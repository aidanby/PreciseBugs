{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n\n/**\n * @property Organisation $Organisation\n */\nclass OrganisationsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        if (!empty($this->request->params['admin']) && !$this->_isSiteAdmin()) {\n            $this->redirect('/');\n        }\n    }\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => 'LOWER(Organisation.name)'\n            //'order' => array(\n            //      'Organisation.name' => 'ASC'\n            //),\n    );\n\n    public function index()\n    {\n        $conditions = array();\n        // We can either index all of the organisations existing on this instance (default)\n        // or we can pass the 'external' keyword in the URL to look at the added external organisations\n        $scope = isset($this->passedArgs['scope']) ? $this->passedArgs['scope'] : 'local';\n        if ($scope !== 'all') {\n            $conditions['AND'][] = array('Organisation.local' => $scope === 'external' ? 0 : 1);\n        }\n        $passedArgs = $this->passedArgs;\n\n        if (isset($this->request->data['searchall'])) {\n            $searchall = $this->request->data['searchall'];\n        } elseif (isset($this->passedArgs['all'])) {\n            $searchall = $this->passedArgs['all'];\n        } elseif (isset($this->passedArgs['searchall'])) {\n            $searchall = $this->passedArgs['searchall'];\n        } elseif (isset($this->passedArgs['quickFilter'])) {\n            $searchall = $this->passedArgs['quickFilter'];\n        }\n\n        if (isset($searchall) && !empty($searchall)) {\n            $passedArgs['searchall'] = $searchall;\n            $allSearchFields = array('name', 'description', 'nationality', 'sector', 'type', 'contacts', 'restricted_to_domain', 'uuid');\n            $searchTerm = '%' . strtolower($passedArgs['searchall']) . '%';\n            foreach ($allSearchFields as $field) {\n                $conditions['OR'][] = array('LOWER(Organisation.' . $field . ') LIKE' => $searchTerm);\n            }\n        }\n\n        $this->paginate['conditions'] = $conditions;\n\n        $this->Organisation->addCountField('user_count', $this->User, ['User.org_id = Organisation.id']);\n        if ($this->_isRest()) {\n            unset($this->paginate['limit']);\n            $orgs = $this->Organisation->find('all', $this->paginate);\n        } else {\n            $viewAll = isset($this->params['named']['viewall']) && $this->params['named']['viewall'];\n            if ($viewAll) {\n                unset($this->paginate['limit']);\n            }\n            $this->set('viewall', $viewAll);\n            $orgs = $this->paginate();\n        }\n\n        $this->loadModel('User');\n        $org_creator_ids = array();\n        foreach ($orgs as $k => $org) {\n            if ($this->_isSiteAdmin()) {\n                if (!isset($org_creator_ids[$org['Organisation']['created_by']])) {\n                    $email = $this->User->find('first', array(\n                        'recursive' => -1,\n                        'fields' => array('id', 'email'),\n                        'conditions' => array('id' => $org['Organisation']['created_by']))\n                    );\n                    if (!empty($email)) {\n                        $org_creator_ids[$org['Organisation']['created_by']] = $email['User']['email'];\n                    } else {\n                        $org_creator_ids[$org['Organisation']['created_by']] = __('Unknown');\n                    }\n                }\n                $orgs[$k]['Organisation']['created_by_email'] = $org_creator_ids[$org['Organisation']['created_by']];\n            } else {\n                unset($orgs[$k]['Organisation']['created_by']);\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($orgs, $this->response->type());\n        }\n        foreach ($orgs as &$org) {\n            $org['Organisation']['country_code'] = $this->Organisation->getCountryCode($org['Organisation']['nationality']);\n        }\n\n        $this->set('named', $this->params['named']);\n        $this->set('scope', $scope);\n        $this->set('orgs', $orgs);\n        $this->set('passedArgs', json_encode($passedArgs));\n    }\n\n    public function admin_add()\n    {\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (!isset($this->request->data['Organisation'])) {\n                    $this->request->data['Organisation'] = $this->request->data;\n                }\n                if (isset($this->request->data['Organisation']['id'])) {\n                    unset($this->request->data['Organisation']['id']);\n                }\n            }\n            $this->Organisation->create();\n            $this->request->data['Organisation']['created_by'] = $this->Auth->user('id');\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['Organisation']['local'])) {\n                    $this->request->data['Organisation']['local'] = true;\n                }\n            }\n            if ($this->Organisation->save($this->request->data)) {\n                $this->__uploadLogo($this->Organisation->id);\n                if ($this->_isRest()) {\n                    $org = $this->Organisation->find('first', array(\n                        'conditions' => array('Organisation.id' => $this->Organisation->id),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($org, $this->response->type());\n                } else {\n                    $this->Flash->success(__('The organisation has been successfully added.'));\n                    $this->redirect(array('admin' => false, 'action' => 'view', $this->Organisation->id));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Organisations', 'admin_add', false, $this->Organisation->validationErrors, $this->response->type());\n                } else {\n                    $this->Flash->error(__('The organisation could not be added.'));\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Organisations', 'admin_add', false, $this->response->type());\n            } else {\n                if (!empty($this->params['named']['name'])) {\n                    $this->request->data['Organisation']['name'] = $this->params['named']['name'];\n                }\n                if (!empty($this->params['named']['uuid'])) {\n                    $this->request->data['Organisation']['uuid'] = $this->params['named']['uuid'];\n                }\n            }\n        }\n        $countries = array_merge(['' => __('Not specified')], $this->_arrayToValuesIndexArray($this->Organisation->getCountries()));\n        $this->set('countries', $countries);\n        $this->set('action', 'add');\n    }\n\n    public function admin_edit($id)\n    {\n        if (Validation::uuid($id)) {\n            $temp = $this->Organisation->find('first', array('recursive' => -1, 'fields' => array('Organisation.id'), 'conditions' => array('Organisation.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid organisation.'));\n            }\n            $id = $temp['Organisation']['id'];\n        }\n        $this->Organisation->id = $id;\n        if (!$this->Organisation->exists()) {\n            throw new NotFoundException(__('Invalid organisation'));\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if ($this->_isRest()) {\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (!isset($this->request->data['Organisation'])) {\n                    $this->request->data['Organisation'] = $this->request->data;\n                }\n                $existingOrg = $this->Organisation->find('first', array('conditions' => array('Organisation.id' => $id)));\n                $changeFields = array('name', 'type', 'nationality', 'sector', 'contacts', 'description', 'local', 'uuid', 'restricted_to_domain');\n                $temp = array('Organisation' => array());\n                foreach ($changeFields as $field) {\n                    if (isset($this->request->data['Organisation'][$field])) {\n                        $temp['Organisation'][$field] = $this->request->data['Organisation'][$field];\n                    } else {\n                        $temp['Organisation'][$field] = $existingOrg['Organisation'][$field];\n                    }\n                }\n                $this->request->data = $temp;\n            }\n            $this->request->data['Organisation']['id'] = $id;\n            if ($this->Organisation->save($this->request->data)) {\n                $this->__uploadLogo($this->Organisation->id);\n                if ($this->_isRest()) {\n                    $org = $this->Organisation->find('first', array(\n                            'conditions' => array('Organisation.id' => $this->Organisation->id),\n                            'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($org, $this->response->type());\n                } else {\n                    $this->Flash->success(__('Organisation updated.'));\n                    $this->redirect(array('admin' => false, 'action' => 'view', $this->Organisation->id));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Organisations', 'admin_edit', false, $this->Organisation->validationErrors, $this->response->type());\n                } else {\n                    if (isset($this->Organisation->validationErrors['uuid'])) {\n                        $duplicate_org = $this->Organisation->find('first', array(\n                            'recursive' => -1,\n                            'conditions' => array('Organisation.uuid' => trim($this->request->data['Organisation']['uuid'])),\n                            'fields' => array('Organisation.id')\n                        ));\n                        $this->set('duplicate_org', $duplicate_org['Organisation']['id']);\n                    }\n                    $this->Flash->error(__('The organisation could not be updated.'));\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Organisations', 'admin_edit', false, $this->response->type());\n            }\n            $this->Organisation->read(null, $id);\n            $this->request->data = $this->Organisation->data;\n        }\n\n        $countries = array_merge(['' => __('Not specified')], $this->_arrayToValuesIndexArray($this->Organisation->getCountries()));\n        if (!empty($this->Organisation->data['Organisation']['nationality'])) {\n            $currentCountry = $this->Organisation->data['Organisation']['nationality'];\n            if (!isset($countries[$currentCountry])) {\n                // Append old country name to list to keep backward compatibility\n                $countries[$currentCountry] = $currentCountry;\n            }\n        }\n\n        $this->set('countries', $countries);\n        $this->set('orgId', $id);\n        if (is_array($this->request->data['Organisation']['restricted_to_domain'])) {\n            $this->request->data['Organisation']['restricted_to_domain'] = implode(\"\\n\", $this->request->data['Organisation']['restricted_to_domain']);\n        }\n        $this->set('id', $id);\n        $this->set('action', 'edit');\n        $this->render('admin_add');\n    }\n\n    public function admin_delete($id)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        if (Validation::uuid($id)) {\n            $temp = $this->Organisation->find('first', array('recursive' => -1, 'fields' => array('Organisation.id'), 'conditions' => array('Organisation.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid organisation'));\n            }\n            $id = $temp['Organisation']['id'];\n        }\n        $this->Organisation->id = $id;\n        if (!$this->Organisation->exists()) {\n            throw new NotFoundException(__('Invalid organisation'));\n        }\n\n        $org = $this->Organisation->find('first', array(\n                'conditions' => array('id' => $id),\n                'recursive' => -1,\n                'fields' => array('local')\n        ));\n        if ($org['Organisation']['local']) {\n            $url = '/organisations/index';\n        } else {\n            $url = '/organisations/index/remote';\n        }\n        if ($this->Organisation->delete()) {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Organisations', 'admin_delete', $id, $this->response->type());\n            } else {\n                $this->Flash->success(__('Organisation deleted'));\n                $this->redirect($url);\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Organisations', 'admin_delete', $id, $this->Organisation->validationErrors, $this->response->type());\n            } else {\n                $this->Flash->error(__('Organisation could not be deleted. Generally organisations should never be deleted, instead consider moving them to the known remote organisations list. Alternatively, if you are certain that you would like to remove an organisation and are aware of the impact, make sure that there are no users or events still tied to this organisation before deleting it.'));\n                $this->redirect($url);\n            }\n        }\n    }\n\n    public function admin_generateuuid()\n    {\n        $this->set('uuid', CakeText::uuid());\n        $this->set('_serialize', array('uuid'));\n    }\n\n    public function view($id)\n    {\n        if (is_numeric($id)) {\n            $conditions = ['Organisation.id' => $id];\n        } else if (Validation::uuid($id)) {\n            $conditions = ['Organisation.uuid' => $id];\n        } else {\n            $conditions = ['Organisation.name' => urldecode($id)];\n        }\n\n        if ($this->request->is('head')) { // Just check if org exists and user can access it\n            $org = $this->Organisation->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1,\n                'fields' => ['id'],\n            ));\n            $exists = $org && $this->Organisation->canSee($this->Auth->user(), $org['Organisation']['id']);\n            return new CakeResponse(['status' => $exists ? 200 : 404]);\n        }\n\n        $fields = ['id', 'name', 'date_created', 'date_modified', 'type', 'nationality', 'sector', 'contacts', 'description', 'local', 'uuid', 'restricted_to_domain', 'created_by'];\n        if ($this->_isRest()) {\n            $this->Organisation->addCountField('user_count', $this->User, ['User.org_id = Organisation.id']);\n            $fields[] = 'user_count';\n        }\n\n        $org = $this->Organisation->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'fields' => $fields,\n        ));\n        if (!$org || !$this->Organisation->canSee($this->Auth->user(), $org['Organisation']['id'])) {\n            throw new NotFoundException(__('Invalid organisation'));\n        }\n\n        $fullAccess = $this->_isSiteAdmin() || ($this->_isAdmin() && $this->Auth->user('Organisation')['id'] == $org['Organisation']['id']);\n        if ($fullAccess) {\n            $creator = $this->Organisation->User->find('first', array(\n                'conditions' => array('User.id' => $org['Organisation']['created_by']),\n                'fields' => array('email'),\n                'recursive' => -1\n            ));\n            if (!empty($creator)) {\n                $org['Organisation']['created_by_email'] = $creator['User']['email'];\n            }\n        } else {\n            unset($org['Organisation']['created_by']);\n        }\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($org, $this->response->type());\n        }\n\n        $org['Organisation']['country_code'] = $this->Organisation->getCountryCode($org['Organisation']['nationality']);\n        $this->set('local', $org['Organisation']['local']);\n        $this->set('fullAccess', $fullAccess);\n        $this->set('org', $org);\n        $this->set('id', $org['Organisation']['id']);\n        $this->set('title_for_layout', __('Organisation %s', $org['Organisation']['name']));\n    }\n\n    public function fetchOrgsForSG($idList = '{}', $type)\n    {\n        if ($type === 'local') {\n            $local = 1;\n        } else {\n            $local = 0;\n        }\n        $idList = json_decode($idList, true);\n        $id_exclusion_list = array_merge($idList, array($this->Auth->user('Organisation')['id']));\n        $orgs = $this->Organisation->find('list', array(\n            'conditions' => array(\n                'local' => $local,\n                'id !=' => $id_exclusion_list,\n            ),\n            'recursive' => -1,\n            'fields' => array('id', 'name'),\n            'order' => array('lower(name) ASC')\n        ));\n        $this->set('local', $local);\n        $this->layout = false;\n        $this->autoRender = false;\n        $this->set('orgs', $orgs);\n        $this->render('ajax/fetch_orgs_for_sg');\n    }\n\n    public function fetchSGOrgRow($id, $removable = false, $extend = false)\n    {\n        $this->layout = false;\n        $this->autoRender = false;\n        $this->set('id', (int)$id);\n        $this->set('removable', $removable);\n        $this->set('extend', $extend);\n        $this->render('ajax/sg_org_row_empty');\n    }\n\n    /**\n     * @deprecated Probably not used anywhere.\n     */\n    public function getUUIDs()\n    {\n        if (Configure::read('Security.hide_organisation_index_from_users')) {\n            throw new MethodNotAllowedException(__('This action is not enabled on this instance.'));\n        }\n        $temp = $this->Organisation->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('local' => 1),\n                'fields' => array('Organisation.uuid')\n        ));\n        $orgs = array();\n        foreach ($temp as $t) {\n            $orgs[] = $t['Organisation']['uuid'];\n        }\n        return new CakeResponse(array('body'=> json_encode($orgs), 'type' => 'json'));\n    }\n\n    public function admin_merge($id, $target_id = false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        if ($this->request->is('Post')) {\n            $result = $this->Organisation->orgMerge($id, $this->request->data, $this->Auth->user());\n            if ($result) {\n                $this->Flash->success(__('The organisation has been successfully merged.'));\n                $this->redirect(array('admin' => false, 'action' => 'view', $result));\n            } else {\n                $this->Flash->error(__('There was an error while merging the organisations. To find out more about what went wrong, refer to the audit logs. If you would like to revert the changes, you can find a .sql file'));\n            }\n            $this->redirect(array('admin' => false, 'action' => 'index'));\n        } else {\n            $currentOrg = $this->Organisation->find('first', array('fields' => array('id', 'name', 'uuid', 'local'), 'recursive' => -1, 'conditions' => array('Organisation.id' => $id)));\n            $orgs['local'] = $this->Organisation->find('all', array(\n                    'fields' => array('id', 'name', 'uuid'),\n                    'conditions' => array('Organisation.id !=' => $id, 'Organisation.local' => 1),\n                    'order' => 'lower(Organisation.name) ASC'\n            ));\n            $orgs['external'] = $this->Organisation->find('all', array(\n                    'fields' => array('id', 'name', 'uuid'),\n                    'conditions' => array('Organisation.id !=' => $id, 'Organisation.local' => 0),\n                    'order' => 'lower(Organisation.name) ASC'\n            ));\n            foreach (array('local', 'external') as $type) {\n                $orgOptions[$type] = Hash::combine($orgs[$type], '{n}.Organisation.id', '{n}.Organisation.name');\n                $orgs[$type] = Hash::combine($orgs[$type], '{n}.Organisation.id', '{n}');\n            }\n            if (!empty($target_id)) {\n                $target = array();\n                foreach (array('local', 'external') as $type) {\n                    foreach ($orgOptions[$type] as $k => $v) {\n                        if ($k == $target_id) {\n                            $target = array('id' => $k, 'type' => $type);\n                        }\n                    }\n                }\n                if (!empty($target)) {\n                    $this->set('target', $target);\n                }\n            }\n            $this->set('orgs', json_encode($orgs));\n            $this->set('orgOptions', $orgOptions);\n            $this->set('currentOrg', $currentOrg);\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->render('ajax/merge');\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    private function __uploadLogo($orgId)\n    {\n        if (!isset($this->request->data['Organisation']['logo']['size'])) {\n            return false;\n        }\n\n        $logo = $this->request->data['Organisation']['logo'];\n        if ($logo['size'] > 0 && $logo['error'] == 0) {\n            $extension = pathinfo($logo['name'], PATHINFO_EXTENSION);\n            $filename = $orgId . '.' . ($extension === 'svg' ? 'svg' : 'png');\n\n            if ($extension === 'svg' && !Configure::read('Security.enable_svg_logos')) {\n                $this->Flash->error(__('Invalid file extension, SVG images are not allowed.'));\n                return false;\n            }\n\n            if (!empty($logo['tmp_name']) && is_uploaded_file($logo['tmp_name'])) {\n                return move_uploaded_file($logo['tmp_name'], APP . 'webroot/img/orgs/' . $filename);\n            }\n        }\n\n        return false;\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n\n/**\n * @property Organisation $Organisation\n */\nclass OrganisationsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        if (!empty($this->request->params['admin']) && !$this->_isSiteAdmin()) {\n            $this->redirect('/');\n        }\n    }\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => 'LOWER(Organisation.name)'\n            //'order' => array(\n            //      'Organisation.name' => 'ASC'\n            //),\n    );\n\n    public function index()\n    {\n        $conditions = array();\n        // We can either index all of the organisations existing on this instance (default)\n        // or we can pass the 'external' keyword in the URL to look at the added external organisations\n        $scope = isset($this->passedArgs['scope']) ? $this->passedArgs['scope'] : 'local';\n        if ($scope !== 'all') {\n            $conditions['AND'][] = array('Organisation.local' => $scope === 'external' ? 0 : 1);\n        }\n        $passedArgs = $this->passedArgs;\n\n        if (isset($this->request->data['searchall'])) {\n            $searchall = $this->request->data['searchall'];\n        } elseif (isset($this->passedArgs['all'])) {\n            $searchall = $this->passedArgs['all'];\n        } elseif (isset($this->passedArgs['searchall'])) {\n            $searchall = $this->passedArgs['searchall'];\n        } elseif (isset($this->passedArgs['quickFilter'])) {\n            $searchall = $this->passedArgs['quickFilter'];\n        }\n\n        if (isset($searchall) && !empty($searchall)) {\n            $passedArgs['searchall'] = $searchall;\n            $allSearchFields = array('name', 'description', 'nationality', 'sector', 'type', 'contacts', 'restricted_to_domain', 'uuid');\n            $searchTerm = '%' . strtolower($passedArgs['searchall']) . '%';\n            foreach ($allSearchFields as $field) {\n                $conditions['OR'][] = array('LOWER(Organisation.' . $field . ') LIKE' => $searchTerm);\n            }\n        }\n\n        $this->paginate['conditions'] = $conditions;\n\n        $this->Organisation->addCountField('user_count', $this->User, ['User.org_id = Organisation.id']);\n        if ($this->_isRest()) {\n            unset($this->paginate['limit']);\n            $orgs = $this->Organisation->find('all', $this->paginate);\n        } else {\n            $viewAll = isset($this->params['named']['viewall']) && $this->params['named']['viewall'];\n            if ($viewAll) {\n                unset($this->paginate['limit']);\n            }\n            $this->set('viewall', $viewAll);\n            $orgs = $this->paginate();\n        }\n\n        $this->loadModel('User');\n        $org_creator_ids = array();\n        foreach ($orgs as $k => $org) {\n            if ($this->_isSiteAdmin()) {\n                if (!isset($org_creator_ids[$org['Organisation']['created_by']])) {\n                    $email = $this->User->find('first', array(\n                        'recursive' => -1,\n                        'fields' => array('id', 'email'),\n                        'conditions' => array('id' => $org['Organisation']['created_by']))\n                    );\n                    if (!empty($email)) {\n                        $org_creator_ids[$org['Organisation']['created_by']] = $email['User']['email'];\n                    } else {\n                        $org_creator_ids[$org['Organisation']['created_by']] = __('Unknown');\n                    }\n                }\n                $orgs[$k]['Organisation']['created_by_email'] = $org_creator_ids[$org['Organisation']['created_by']];\n            } else {\n                unset($orgs[$k]['Organisation']['created_by']);\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($orgs, $this->response->type());\n        }\n        foreach ($orgs as &$org) {\n            $org['Organisation']['country_code'] = $this->Organisation->getCountryCode($org['Organisation']['nationality']);\n        }\n\n        $this->set('named', $this->params['named']);\n        $this->set('scope', $scope);\n        $this->set('orgs', $orgs);\n        $this->set('passedArgs', json_encode($passedArgs));\n    }\n\n    public function admin_add()\n    {\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (!isset($this->request->data['Organisation'])) {\n                    $this->request->data['Organisation'] = $this->request->data;\n                }\n                if (isset($this->request->data['Organisation']['id'])) {\n                    unset($this->request->data['Organisation']['id']);\n                }\n            }\n            $this->Organisation->create();\n            $this->request->data['Organisation']['created_by'] = $this->Auth->user('id');\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['Organisation']['local'])) {\n                    $this->request->data['Organisation']['local'] = true;\n                }\n            }\n            if ($this->Organisation->save($this->request->data)) {\n                $this->__uploadLogo($this->Organisation->id);\n                if ($this->_isRest()) {\n                    $org = $this->Organisation->find('first', array(\n                        'conditions' => array('Organisation.id' => $this->Organisation->id),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($org, $this->response->type());\n                } else {\n                    $this->Flash->success(__('The organisation has been successfully added.'));\n                    $this->redirect(array('admin' => false, 'action' => 'view', $this->Organisation->id));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Organisations', 'admin_add', false, $this->Organisation->validationErrors, $this->response->type());\n                } else {\n                    $this->Flash->error(__('The organisation could not be added.'));\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Organisations', 'admin_add', false, $this->response->type());\n            } else {\n                if (!empty($this->params['named']['name'])) {\n                    $this->request->data['Organisation']['name'] = $this->params['named']['name'];\n                }\n                if (!empty($this->params['named']['uuid'])) {\n                    $this->request->data['Organisation']['uuid'] = $this->params['named']['uuid'];\n                }\n            }\n        }\n        $countries = array_merge(['' => __('Not specified')], $this->_arrayToValuesIndexArray($this->Organisation->getCountries()));\n        $this->set('countries', $countries);\n        $this->set('action', 'add');\n    }\n\n    public function admin_edit($id)\n    {\n        if (Validation::uuid($id)) {\n            $temp = $this->Organisation->find('first', array('recursive' => -1, 'fields' => array('Organisation.id'), 'conditions' => array('Organisation.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid organisation.'));\n            }\n            $id = $temp['Organisation']['id'];\n        }\n        $this->Organisation->id = $id;\n        if (!$this->Organisation->exists()) {\n            throw new NotFoundException(__('Invalid organisation'));\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if ($this->_isRest()) {\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (!isset($this->request->data['Organisation'])) {\n                    $this->request->data['Organisation'] = $this->request->data;\n                }\n                $existingOrg = $this->Organisation->find('first', array('conditions' => array('Organisation.id' => $id)));\n                $changeFields = array('name', 'type', 'nationality', 'sector', 'contacts', 'description', 'local', 'uuid', 'restricted_to_domain');\n                $temp = array('Organisation' => array());\n                foreach ($changeFields as $field) {\n                    if (isset($this->request->data['Organisation'][$field])) {\n                        $temp['Organisation'][$field] = $this->request->data['Organisation'][$field];\n                    } else {\n                        $temp['Organisation'][$field] = $existingOrg['Organisation'][$field];\n                    }\n                }\n                $this->request->data = $temp;\n            }\n            $this->request->data['Organisation']['id'] = $id;\n            if ($this->Organisation->save($this->request->data)) {\n                $this->__uploadLogo($this->Organisation->id);\n                if ($this->_isRest()) {\n                    $org = $this->Organisation->find('first', array(\n                            'conditions' => array('Organisation.id' => $this->Organisation->id),\n                            'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($org, $this->response->type());\n                } else {\n                    $this->Flash->success(__('Organisation updated.'));\n                    $this->redirect(array('admin' => false, 'action' => 'view', $this->Organisation->id));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Organisations', 'admin_edit', false, $this->Organisation->validationErrors, $this->response->type());\n                } else {\n                    if (isset($this->Organisation->validationErrors['uuid'])) {\n                        $duplicate_org = $this->Organisation->find('first', array(\n                            'recursive' => -1,\n                            'conditions' => array('Organisation.uuid' => trim($this->request->data['Organisation']['uuid'])),\n                            'fields' => array('Organisation.id')\n                        ));\n                        $this->set('duplicate_org', $duplicate_org['Organisation']['id']);\n                    }\n                    $this->Flash->error(__('The organisation could not be updated.'));\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Organisations', 'admin_edit', false, $this->response->type());\n            }\n            $this->Organisation->read(null, $id);\n            $this->request->data = $this->Organisation->data;\n        }\n\n        $countries = array_merge(['' => __('Not specified')], $this->_arrayToValuesIndexArray($this->Organisation->getCountries()));\n        if (!empty($this->Organisation->data['Organisation']['nationality'])) {\n            $currentCountry = $this->Organisation->data['Organisation']['nationality'];\n            if (!isset($countries[$currentCountry])) {\n                // Append old country name to list to keep backward compatibility\n                $countries[$currentCountry] = $currentCountry;\n            }\n        }\n\n        $this->set('countries', $countries);\n        $this->set('orgId', $id);\n        if (is_array($this->request->data['Organisation']['restricted_to_domain'])) {\n            $this->request->data['Organisation']['restricted_to_domain'] = implode(\"\\n\", $this->request->data['Organisation']['restricted_to_domain']);\n        }\n        $this->set('id', $id);\n        $this->set('action', 'edit');\n        $this->render('admin_add');\n    }\n\n    public function admin_delete($id)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        if (Validation::uuid($id)) {\n            $temp = $this->Organisation->find('first', array('recursive' => -1, 'fields' => array('Organisation.id'), 'conditions' => array('Organisation.uuid' => $id)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid organisation'));\n            }\n            $id = $temp['Organisation']['id'];\n        }\n        $this->Organisation->id = $id;\n        if (!$this->Organisation->exists()) {\n            throw new NotFoundException(__('Invalid organisation'));\n        }\n\n        $org = $this->Organisation->find('first', array(\n                'conditions' => array('id' => $id),\n                'recursive' => -1,\n                'fields' => array('local')\n        ));\n        if ($org['Organisation']['local']) {\n            $url = '/organisations/index';\n        } else {\n            $url = '/organisations/index/remote';\n        }\n        if ($this->Organisation->delete()) {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Organisations', 'admin_delete', $id, $this->response->type());\n            } else {\n                $this->Flash->success(__('Organisation deleted'));\n                $this->redirect($url);\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Organisations', 'admin_delete', $id, $this->Organisation->validationErrors, $this->response->type());\n            } else {\n                $this->Flash->error(__('Organisation could not be deleted. Generally organisations should never be deleted, instead consider moving them to the known remote organisations list. Alternatively, if you are certain that you would like to remove an organisation and are aware of the impact, make sure that there are no users or events still tied to this organisation before deleting it.'));\n                $this->redirect($url);\n            }\n        }\n    }\n\n    public function admin_generateuuid()\n    {\n        $this->set('uuid', CakeText::uuid());\n        $this->set('_serialize', array('uuid'));\n    }\n\n    public function view($id)\n    {\n        if (is_numeric($id)) {\n            $conditions = ['Organisation.id' => $id];\n        } else if (Validation::uuid($id)) {\n            $conditions = ['Organisation.uuid' => $id];\n        } else {\n            $conditions = ['Organisation.name' => urldecode($id)];\n        }\n\n        if ($this->request->is('head')) { // Just check if org exists and user can access it\n            $org = $this->Organisation->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1,\n                'fields' => ['id'],\n            ));\n            $exists = $org && $this->Organisation->canSee($this->Auth->user(), $org['Organisation']['id']);\n            return new CakeResponse(['status' => $exists ? 200 : 404]);\n        }\n\n        $fields = ['id', 'name', 'date_created', 'date_modified', 'type', 'nationality', 'sector', 'contacts', 'description', 'local', 'uuid', 'restricted_to_domain', 'created_by'];\n        if ($this->_isRest()) {\n            $this->Organisation->addCountField('user_count', $this->User, ['User.org_id = Organisation.id']);\n            $fields[] = 'user_count';\n        }\n\n        $org = $this->Organisation->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'fields' => $fields,\n        ));\n        if (!$org || !$this->Organisation->canSee($this->Auth->user(), $org['Organisation']['id'])) {\n            throw new NotFoundException(__('Invalid organisation'));\n        }\n\n        $fullAccess = $this->_isSiteAdmin() || ($this->_isAdmin() && $this->Auth->user('Organisation')['id'] == $org['Organisation']['id']);\n        if ($fullAccess) {\n            $creator = $this->Organisation->User->find('first', array(\n                'conditions' => array('User.id' => $org['Organisation']['created_by']),\n                'fields' => array('email'),\n                'recursive' => -1\n            ));\n            if (!empty($creator)) {\n                $org['Organisation']['created_by_email'] = $creator['User']['email'];\n            }\n        } else {\n            unset($org['Organisation']['created_by']);\n        }\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($org, $this->response->type());\n        }\n\n        $org['Organisation']['country_code'] = $this->Organisation->getCountryCode($org['Organisation']['nationality']);\n        $this->set('local', $org['Organisation']['local']);\n        $this->set('fullAccess', $fullAccess);\n        $this->set('org', $org);\n        $this->set('id', $org['Organisation']['id']);\n        $this->set('title_for_layout', __('Organisation %s', $org['Organisation']['name']));\n    }\n\n    public function fetchOrgsForSG($idList = '{}', $type)\n    {\n        if ($type === 'local') {\n            $local = 1;\n        } else {\n            $local = 0;\n        }\n        $idList = json_decode($idList, true);\n        $id_exclusion_list = array_merge($idList, array($this->Auth->user('Organisation')['id']));\n        $orgs = $this->Organisation->find('list', array(\n            'conditions' => array(\n                'local' => $local,\n                'id !=' => $id_exclusion_list,\n            ),\n            'recursive' => -1,\n            'fields' => array('id', 'name'),\n            'order' => array('lower(name) ASC')\n        ));\n        $this->set('local', $local);\n        $this->layout = false;\n        $this->autoRender = false;\n        $this->set('orgs', $orgs);\n        $this->render('ajax/fetch_orgs_for_sg');\n    }\n\n    public function fetchSGOrgRow($id, $removable = false, $extend = false)\n    {\n        $this->layout = false;\n        $this->autoRender = false;\n        $this->set('id', (int)$id);\n        $this->set('removable', $removable);\n        $this->set('extend', $extend);\n        $this->render('ajax/sg_org_row_empty');\n    }\n\n    /**\n     * @deprecated Probably not used anywhere.\n     */\n    public function getUUIDs()\n    {\n        if (Configure::read('Security.hide_organisation_index_from_users')) {\n            throw new MethodNotAllowedException(__('This action is not enabled on this instance.'));\n        }\n        $temp = $this->Organisation->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('local' => 1),\n                'fields' => array('Organisation.uuid')\n        ));\n        $orgs = array();\n        foreach ($temp as $t) {\n            $orgs[] = $t['Organisation']['uuid'];\n        }\n        return new CakeResponse(array('body'=> json_encode($orgs), 'type' => 'json'));\n    }\n\n    public function admin_merge($id, $target_id = false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        if ($this->request->is('Post')) {\n            $result = $this->Organisation->orgMerge($id, $this->request->data, $this->Auth->user());\n            if ($result) {\n                $this->Flash->success(__('The organisation has been successfully merged.'));\n                $this->redirect(array('admin' => false, 'action' => 'view', $result));\n            } else {\n                $this->Flash->error(__('There was an error while merging the organisations. To find out more about what went wrong, refer to the audit logs. If you would like to revert the changes, you can find a .sql file'));\n            }\n            $this->redirect(array('admin' => false, 'action' => 'index'));\n        } else {\n            $currentOrg = $this->Organisation->find('first', array('fields' => array('id', 'name', 'uuid', 'local'), 'recursive' => -1, 'conditions' => array('Organisation.id' => $id)));\n            $orgs['local'] = $this->Organisation->find('all', array(\n                    'fields' => array('id', 'name', 'uuid'),\n                    'conditions' => array('Organisation.id !=' => $id, 'Organisation.local' => 1),\n                    'order' => 'lower(Organisation.name) ASC'\n            ));\n            $orgs['external'] = $this->Organisation->find('all', array(\n                    'fields' => array('id', 'name', 'uuid'),\n                    'conditions' => array('Organisation.id !=' => $id, 'Organisation.local' => 0),\n                    'order' => 'lower(Organisation.name) ASC'\n            ));\n            foreach (array('local', 'external') as $type) {\n                $orgOptions[$type] = Hash::combine($orgs[$type], '{n}.Organisation.id', '{n}.Organisation.name');\n                $orgs[$type] = Hash::combine($orgs[$type], '{n}.Organisation.id', '{n}');\n            }\n            if (!empty($target_id)) {\n                $target = array();\n                foreach (array('local', 'external') as $type) {\n                    foreach ($orgOptions[$type] as $k => $v) {\n                        if ($k == $target_id) {\n                            $target = array('id' => $k, 'type' => $type);\n                        }\n                    }\n                }\n                if (!empty($target)) {\n                    $this->set('target', $target);\n                }\n            }\n            $this->set('orgs', json_encode($orgs));\n            $this->set('orgOptions', $orgOptions);\n            $this->set('currentOrg', $currentOrg);\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->render('ajax/merge');\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    private function __uploadLogo($orgId)\n    {\n        if (!isset($this->request->data['Organisation']['logo']['size'])) {\n            return false;\n        }\n\n        $logo = $this->request->data['Organisation']['logo'];\n        if ($logo['size'] > 0 && $logo['error'] == 0) {\n            $extension = pathinfo($logo['name'], PATHINFO_EXTENSION);\n            $filename = $orgId . '.' . ($extension === 'svg' ? 'svg' : 'png');\n\n            if ($logo['size'] > 250*1024) {\n                $this->Flash->error(__('This organisation logo is too large, maximum file size allowed is 250kB.'));\n                return false;\n            }\n\n            if ($extension !== 'svg' && $extension !== 'png') {\n                $this->Flash->error(__('Invalid file extension, Only PNG and SVG images are allowed.'));\n                return false;\n            }\n\n            $imgMime = mime_content_type($logo['tmp_name']);\n            if ($extension === 'png' && !exif_imagetype($logo['tmp_name'])) {\n                $this->Flash->error(__('This is not a valid PNG image.'));\n                return false;\n            } else if ($extension === 'svg' && !($imgMime === 'image/svg+xml' || $imgMime === 'image/svg')) {\n                $this->Flash->error(__('This is not a valid SVG image.'));\n                return false;\n            }\n\n            if ($extension === 'svg' && !Configure::read('Security.enable_svg_logos')) {\n                $this->Flash->error(__('Invalid file extension, SVG images are not allowed.'));\n                return false;\n            }\n\n            if (!empty($logo['tmp_name']) && is_uploaded_file($logo['tmp_name'])) {\n                return move_uploaded_file($logo['tmp_name'], APP . 'webroot/img/orgs/' . $filename);\n            }\n        }\n\n        return false;\n    }\n}\n"], "filenames": ["app/Controller/OrganisationsController.php"], "buggy_code_start_loc": [483], "buggy_code_end_loc": [483], "fixing_code_start_loc": [484], "fixing_code_end_loc": [503], "type": "CWE-434", "message": "An issue was discovered in MISP before 2.4.184. Organisation logo upload is insecure because of a lack of checks for the file extension and MIME type.", "other": {"cve": {"id": "CVE-2024-25674", "sourceIdentifier": "cve@mitre.org", "published": "2024-02-09T09:15:08.597", "lastModified": "2024-02-12T14:30:40.343", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP before 2.4.184. Organisation logo upload is insecure because of a lack of checks for the file extension and MIME type."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en MISP antes de la versi\u00f3n 2.4.184. La carga del logotipo de la organizaci\u00f3n no es segura debido a la falta de comprobaciones de la extensi\u00f3n del archivo y el tipo MIME."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.184", "matchCriteriaId": "92E5DACC-4136-41BD-AF20-BC889159DB39"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/312d2d5422235235ddd211dcb6bb5bb09c07791f", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.183...v2.4.184", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/312d2d5422235235ddd211dcb6bb5bb09c07791f"}}