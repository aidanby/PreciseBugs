{"buggy_code": ["/** \n * A simple, static http GET server. \n * \n * (C) 2015 TekMonks. All rights reserved.\n * License: See enclosed file.\n */\n\nconst extensions = [];\nconst fs = require(\"fs\");\nconst zlib = require(\"zlib\");\nconst path = require(\"path\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nlet access; let error;\n\nexports.bootstrap = bootstrap;\n\n// support starting in stand-alone config\nif (require(\"cluster\").isMaster == true) bootstrap();\t\n\nfunction bootstrap() {\n\t_initConfSync();\n\t_initLogsSync();\n\t_initExtensions();\n\n\t/* Start HTTP/S server */\n\tconst listener = async (req, res) => { try{await _handleRequest(req, res);} catch(e){error.error(e.stack?e.stack.toString():e.toString()); _sendError(req,res,500,e);} }\n\tconst options = conf.ssl ? {key: fs.readFileSync(conf.sslKeyFile), cert: fs.readFileSync(conf.sslCertFile)} : null;\n\tconst httpd = options ? https.createServer(options, listener) : http.createServer(listener);\n\thttpd.setTimeout(conf.timeout);\n\thttpd.listen(conf.port, conf.host||\"::\");\n\t\n\taccess.info(`Server started on ${conf.host||\"::\"}:${conf.port}`);\n\tconsole.log(`Server started on ${conf.host||\"::\"}:${conf.port}`);\n}\n\nfunction _initConfSync() {\n\tglobal.conf = require(`${__dirname}/conf/httpd.json`);\n\n\t// normalize paths\n\tconf.webroot = path.resolve(conf.webroot);\t\n\tconf.logdir = path.resolve(conf.logdir);\t\n\tconf.libdir = path.resolve(conf.libdir);\n\tconf.confdir = path.resolve(conf.confdir);\n\tconf.accesslog = path.resolve(conf.accesslog);\n\tconf.errorlog = path.resolve(conf.errorlog);\n\tconst utils = require(conf.libdir+\"/utils.js\");\n\n\t// merge web app conf files into main http server, for app specific configuration directives\n\tif (fs.existsSync(`${__dirname}/../apps/`)) for (const app of fs.readdirSync(`${__dirname}/../apps/`)) if (fs.existsSync(`${__dirname}/../apps/${app}/conf/httpd.json`)) {\n\t\tconst appHTTPDConf = require(`${__dirname}/../apps/${app}/conf/httpd.json`);\n\t\tfor (const confKey of Object.keys(appHTTPDConf)) {\n\t\t\tconst value = appHTTPDConf[confKey];\n\t\t\tif (!global.conf[confKey]) {global.conf[confKey] = value; continue;}\t// not set, then just set it\n\t\t\tif (Array.isArray(value)) global.conf[confKey] = utils.union(value, global.conf[confKey]);\t// merge arrays\n\t\t\telse if (typeof value === \"object\" && value !== null) global.conf[confKey] = {...global.conf[confKey], ...value};\t// merge objects, app overrides\n\t\t\telse global.conf[confKey] = value;\t// override value\n\t\t}\n\t}\n}\n\nfunction _initLogsSync() {\n\tconsole.log(\"Starting...\");\n\tconsole.log(\"Initializing the logs.\");\n\t\n\t// Init logging \n\tif (!fs.existsSync(conf.logdir)) fs.mkdirSync(conf.logdir);\n\t\t\n\tconst Logger = require(conf.libdir+\"/Logger.js\").Logger;\t\n\taccess = new Logger(conf.accesslog, 100*1024*1024);\n\terror = new Logger(conf.errorlog, 100*1024*1024);\n}\n\nfunction _initExtensions() {\n\tconst extensions_dir = path.resolve(conf.extdir);\n\tfor (const extension of conf.extensions) {\n\t\tconsole.log(`Loading extension ${extension}`);\n\t\tconst ext = require(`${extensions_dir}/${extension}.js`);  if (ext.initSync) ext.initSync();\n\t\textensions.push(ext);\n\t}\n}\n\nasync function _handleRequest(req, res) {\n\taccess.info(`From: ${_getReqHost(req)} Agent: ${req.headers[\"user-agent\"]} GET: ${req.url}`);\n\tfor (const extension of extensions) if (await extension.processRequest(req, res, _sendData, _sendError, access, error)) {\n\t\taccess.info(`Request ${req.url} handled by extension ${extension.name}`);\n\t\treturn; // extension handled it\n\t}\n\n\tconst pathname = new URL(req.url, `http://${req.headers.host}/`).pathname;\n\tlet fileRequested = path.resolve(conf.webroot+\"/\"+pathname);\n\n\t// don't allow reading outside webroot\n\tif (!_isSubdirectory(fileRequested, conf.webroot))\n\t\t{_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\n\t// don't allow reading the server tree, if requested\n\tif (conf.restrictServerTree && _isSubdirectory(path.dirname(fileRequested), __dirname)) \n\t\t{_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\t\n\tfs.access(fileRequested, fs.constants.R_OK, err => {\n\t\tif (err) {_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\n\t\tfs.stat(fileRequested, (err, stats) => {\n\t\t\tif (err) {_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\t\t\t\n\t\t\tif (stats.isDirectory()) fileRequested += \"/\" + conf.indexfile;\n\t\t\t_sendFile(fileRequested, req, res, stats);\n\t\t});\n\t});\n}\n\nfunction _getServerHeaders(headers, stats) {\n\tif (conf.httpdHeaders) headers = { ...headers, ...conf.httpdHeaders };\n\tif (stats) {\n\t\theaders[\"Last-Modified\"] = stats.mtime.toGMTString();\n\t\theaders[\"ETag\"] = `${stats.ino}-${stats.mtimeMs}-${stats.size}`;\n\t}\n\treturn headers;\n}\n\nfunction _sendFile(fileRequested, req, res, stats) {\n\tfs.open(fileRequested, \"r\", (err, fd) => {\t\n\t\tif (err) (err.code === \"ENOENT\") ? _sendError(req, res, 404, \"Path Not Found.\") : _sendError(req, res, 500, err);\n\t\telse {\n\t\t\taccess.info(`Sending: ${fileRequested}`);\n\t\t\tconst mime = conf.mimeTypes[path.extname(fileRequested)];\n\t\t\tconst rawStream = fs.createReadStream(null, {\"flags\":\"r\",\"fd\":fd,\"autoClose\":true});\n\t\t\tconst acceptEncodingHeader = req.headers[\"accept-encoding\"] || \"\";\n\n\t\t\tif (conf.enableGZIPEncoding && acceptEncodingHeader.includes(\"gzip\") && mime && (!Array.isArray(mime) || Array.isArray(mime) && mime[1]) ) {\n\t\t\t\tres.writeHead(200, _getServerHeaders({ \"Content-Type\": Array.isArray(mime)?mime[0]:mime, \"Content-Encoding\": \"gzip\" }, stats));\n\t\t\t\trawStream.pipe(zlib.createGzip()).pipe(res)\n\t\t\t\t.on(\"error\", err => _sendError(req, res, 500, `500: ${req.url}, Server error: ${err}`))\n\t\t\t\t.on(\"end\", _ => res.end());\n\t\t\t} else {\n\t\t\t\tres.writeHead(200, mime ? _getServerHeaders({\"Content-Type\":Array.isArray(mime)?mime[0]:mime}, stats) : _getServerHeaders({}, stats));\n\t\t\t\trawStream.on(\"data\", chunk => res.write(chunk, \"binary\"))\n\t\t\t\t\t.on(\"error\", err => _sendError(req, res, 500, `500: ${req.url}, Server error: ${err}`))\n\t\t\t\t\t.on(\"end\", _ => res.end());\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction _sendError(req, res, code, message) {\n\terror.error(`From: ${_getReqHost(req)} Agent: ${req.headers[\"user-agent\"]} Code: ${code} URL: ${req.url} Message: ${message}`);\n\tres.writeHead(code, _getServerHeaders({\"Content-Type\": \"text/plain\"}));\n\tres.write(`${code} ${message}\\n`);\n\tres.end();\n}\n\nfunction _sendData(res, code, headers, data) {\n\tres.writeHead(code||200, _getServerHeaders(headers));\n\tif (data) res.write(data);\n\tres.end();\n}\n\nfunction _isSubdirectory(child, parent) { // from: https://stackoverflow.com/questions/37521893/determine-if-a-path-is-subdirectory-of-another-in-node-js\n\tchild = path.resolve(child); parent = path.resolve(parent);\n\n\tif (parent.toLowerCase() == child.toLowerCase()) return true;\t// a directory is its own subdirectory (remember ./)\n\n\tconst relative = path.relative(parent, child);\n\tconst isSubdir = !!relative && !relative.startsWith('..') && !path.isAbsolute(relative);\n\treturn isSubdir;\n}\n\nfunction _getReqHost(req) {\n\tconst host = req.headers[\"x-forwarded-for\"]?req.headers[\"x-forwarded-for\"]:req.headers[\"x-forwarded-host\"]?req.headers[\"x-forwarded-host\"]:req.socket.remoteAddress;\n\tconst port = req.headers[\"x-forwarded-port\"]?req.headers[\"x-forwarded-port\"]:req.socket.remotePort;\n\treturn `[${host}]:${port}`;\n}"], "fixing_code": ["/** \n * A simple, static http GET server. \n * \n * (C) 2015 TekMonks. All rights reserved.\n * License: See enclosed file.\n */\n\nconst extensions = [];\nconst fs = require(\"fs\");\nconst zlib = require(\"zlib\");\nconst path = require(\"path\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nlet access; let error;\n\nexports.bootstrap = bootstrap;\n\n// support starting in stand-alone config\nif (require(\"cluster\").isMaster == true) bootstrap();\t\n\nfunction bootstrap() {\n\t_initConfSync();\n\t_initLogsSync();\n\t_initExtensions();\n\n\t/* Start HTTP/S server */\n\tconst listener = async (req, res) => { try{await _handleRequest(req, res);} catch(e){error.error(e.stack?e.stack.toString():e.toString()); _sendError(req,res,500,e);} }\n\tconst options = conf.ssl ? {key: fs.readFileSync(conf.sslKeyFile), cert: fs.readFileSync(conf.sslCertFile)} : null;\n\tconst httpd = options ? https.createServer(options, listener) : http.createServer(listener);\n\thttpd.setTimeout(conf.timeout);\n\thttpd.listen(conf.port, conf.host||\"::\");\n\t\n\taccess.info(`Server started on ${conf.host||\"::\"}:${conf.port}`);\n\tconsole.log(`Server started on ${conf.host||\"::\"}:${conf.port}`);\n}\n\nfunction _initConfSync() {\n\tglobal.conf = require(`${__dirname}/conf/httpd.json`);\n\n\t// normalize paths\n\tconf.webroot = path.resolve(conf.webroot);\t\n\tconf.logdir = path.resolve(conf.logdir);\t\n\tconf.libdir = path.resolve(conf.libdir);\n\tconf.confdir = path.resolve(conf.confdir);\n\tconf.accesslog = path.resolve(conf.accesslog);\n\tconf.errorlog = path.resolve(conf.errorlog);\n\tconst utils = require(conf.libdir+\"/utils.js\");\n\n\t// merge web app conf files into main http server, for app specific configuration directives\n\tif (fs.existsSync(`${__dirname}/../apps/`)) for (const app of fs.readdirSync(`${__dirname}/../apps/`)) if (fs.existsSync(`${__dirname}/../apps/${app}/conf/httpd.json`)) {\n\t\tconst appHTTPDConf = require(`${__dirname}/../apps/${app}/conf/httpd.json`);\n\t\tfor (const confKey of Object.keys(appHTTPDConf)) {\n\t\t\tconst value = appHTTPDConf[confKey];\n\t\t\tif (!global.conf[confKey]) {global.conf[confKey] = value; continue;}\t// not set, then just set it\n\t\t\tif (Array.isArray(value)) global.conf[confKey] = utils.union(value, global.conf[confKey]);\t// merge arrays\n\t\t\telse if (typeof value === \"object\" && value !== null) global.conf[confKey] = {...global.conf[confKey], ...value};\t// merge objects, app overrides\n\t\t\telse global.conf[confKey] = value;\t// override value\n\t\t}\n\t}\n}\n\nfunction _initLogsSync() {\n\tconsole.log(\"Starting...\");\n\tconsole.log(\"Initializing the logs.\");\n\t\n\t// Init logging \n\tif (!fs.existsSync(conf.logdir)) fs.mkdirSync(conf.logdir);\n\t\t\n\tconst Logger = require(conf.libdir+\"/Logger.js\").Logger;\t\n\taccess = new Logger(conf.accesslog, 100*1024*1024);\n\terror = new Logger(conf.errorlog, 100*1024*1024);\n}\n\nfunction _initExtensions() {\n\tconst extensions_dir = path.resolve(conf.extdir);\n\tfor (const extension of conf.extensions) {\n\t\tconsole.log(`Loading extension ${extension}`);\n\t\tconst ext = require(`${extensions_dir}/${extension}.js`);  if (ext.initSync) ext.initSync();\n\t\textensions.push(ext);\n\t}\n}\n\nasync function _handleRequest(req, res) {\n\taccess.info(`From: ${_getReqHost(req)} Agent: ${req.headers[\"user-agent\"]} GET: ${req.url}`);\n\tfor (const extension of extensions) if (await extension.processRequest(req, res, _sendData, _sendError, access, error)) {\n\t\taccess.info(`Request ${req.url} handled by extension ${extension.name}`);\n\t\treturn; // extension handled it\n\t}\n\n\tconst pathname = new URL(req.url, `http://${req.headers.host}/`).pathname;\n\tlet fileRequested = path.resolve(conf.webroot+\"/\"+pathname);\n\n\t// don't allow reading outside webroot\n\tif (!_isSubdirectory(fileRequested, conf.webroot))\n\t\t{_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\n\t// don't allow reading the server tree, if requested\n\tif (conf.restrictServerTree && _isSubdirectory(path.dirname(fileRequested), __dirname)) \n\t\t{_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\t\n\tfs.access(fileRequested, fs.constants.R_OK, err => {\n\t\tif (err) {_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\n\t\tfs.stat(fileRequested, (err, stats) => {\n\t\t\tif (err) {_sendError(req, res, 404, \"Path Not Found.\"); return;}\n\t\t\t\n\t\t\tif (stats.isDirectory()) fileRequested += \"/\" + conf.indexfile;\n\t\t\t_sendFile(fileRequested, req, res, stats);\n\t\t});\n\t});\n}\n\nfunction _getServerHeaders(headers, stats) {\n\tif (conf.httpdHeaders) headers = { ...headers, ...conf.httpdHeaders };\n\tif (stats) {\n\t\theaders[\"Last-Modified\"] = stats.mtime.toGMTString();\n\t\theaders[\"ETag\"] = `${stats.ino}-${stats.mtimeMs}-${stats.size}`;\n\t}\n\treturn headers;\n}\n\nfunction _sendFile(fileRequested, req, res, stats) {\n\tfs.open(fileRequested, \"r\", (err, fd) => {\t\n\t\tif (err) (err.code === \"ENOENT\") ? _sendError(req, res, 404, \"Path Not Found.\") : _sendError(req, res, 500, err);\n\t\telse {\n\t\t\taccess.info(`Sending: ${fileRequested}`);\n\t\t\tconst mime = conf.mimeTypes[path.extname(fileRequested)];\n\t\t\tconst rawStream = fs.createReadStream(null, {\"flags\":\"r\",\"fd\":fd,\"autoClose\":true});\n\t\t\tconst acceptEncodingHeader = req.headers[\"accept-encoding\"] || \"\";\n\n\t\t\tif (conf.enableGZIPEncoding && acceptEncodingHeader.includes(\"gzip\") && mime && (!Array.isArray(mime) || Array.isArray(mime) && mime[1]) ) {\n\t\t\t\tres.writeHead(200, _getServerHeaders({ \"Content-Type\": Array.isArray(mime)?mime[0]:mime, \"Content-Encoding\": \"gzip\" }, stats));\n\t\t\t\trawStream.pipe(zlib.createGzip()).pipe(res)\n\t\t\t\t.on(\"error\", err => _sendError(req, res, 500, `500: Error: ${err}`))\n\t\t\t\t.on(\"end\", _ => res.end());\n\t\t\t} else {\n\t\t\t\tres.writeHead(200, mime ? _getServerHeaders({\"Content-Type\":Array.isArray(mime)?mime[0]:mime}, stats) : _getServerHeaders({}, stats));\n\t\t\t\trawStream.on(\"data\", chunk => res.write(chunk, \"binary\"))\n\t\t\t\t\t.on(\"error\", err => _sendError(req, res, 500, `500: Error: ${err}`))\n\t\t\t\t\t.on(\"end\", _ => res.end());\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction _sendError(req, res, code, message) {\n\terror.error(`From: ${_getReqHost(req)} Agent: ${req.headers[\"user-agent\"]} Code: ${code} URL: ${req.url} Message: ${message}`);\n\tres.writeHead(code, _getServerHeaders({\"Content-Type\": \"text/plain\"}));\n\tres.write(`${code} ${message}\\n`);\n\tres.end();\n}\n\nfunction _sendData(res, code, headers, data) {\n\tres.writeHead(code||200, _getServerHeaders(headers));\n\tif (data) res.write(data);\n\tres.end();\n}\n\nfunction _isSubdirectory(child, parent) { // from: https://stackoverflow.com/questions/37521893/determine-if-a-path-is-subdirectory-of-another-in-node-js\n\tchild = path.resolve(child); parent = path.resolve(parent);\n\n\tif (parent.toLowerCase() == child.toLowerCase()) return true;\t// a directory is its own subdirectory (remember ./)\n\n\tconst relative = path.relative(parent, child);\n\tconst isSubdir = !!relative && !relative.startsWith('..') && !path.isAbsolute(relative);\n\treturn isSubdir;\n}\n\nfunction _getReqHost(req) {\n\tconst host = req.headers[\"x-forwarded-for\"]?req.headers[\"x-forwarded-for\"]:req.headers[\"x-forwarded-host\"]?req.headers[\"x-forwarded-host\"]:req.socket.remoteAddress;\n\tconst port = req.headers[\"x-forwarded-port\"]?req.headers[\"x-forwarded-port\"]:req.socket.remotePort;\n\treturn `[${host}]:${port}`;\n}"], "filenames": ["frontend/server/server.js"], "buggy_code_start_loc": [134], "buggy_code_end_loc": [140], "fixing_code_start_loc": [134], "fixing_code_end_loc": [140], "type": "CWE-116", "message": "Monkshu is an enterprise application server for mobile apps (iOS and Android), responsive HTML 5 apps, and JSON API services. In version 2.90 and earlier, there is a reflected cross-site scripting vulnerability in frontend HTTP server. The attacker can send in a carefully crafted URL along with a known bug in the server which will cause a 500 error, and the response will then embed the URL provided by the hacker. The impact is moderate as the hacker must also be able to craft an HTTP request which should cause a 500 server error. None such requests are known as this point. The issue is patched in version 2.95. As a workaround, one may use a disk caching plugin.", "other": {"cve": {"id": "CVE-2021-32812", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-02T23:15:08.020", "lastModified": "2021-08-12T15:47:58.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Monkshu is an enterprise application server for mobile apps (iOS and Android), responsive HTML 5 apps, and JSON API services. In version 2.90 and earlier, there is a reflected cross-site scripting vulnerability in frontend HTTP server. The attacker can send in a carefully crafted URL along with a known bug in the server which will cause a 500 error, and the response will then embed the URL provided by the hacker. The impact is moderate as the hacker must also be able to craft an HTTP request which should cause a 500 server error. None such requests are known as this point. The issue is patched in version 2.95. As a workaround, one may use a disk caching plugin."}, {"lang": "es", "value": "Monkshu es un servidor de aplicaciones empresariales para aplicaciones m\u00f3viles (iOS y Android), aplicaciones HTML 5 responsivas y servicios API JSON. En la versi\u00f3n 2.90 y anteriores, se presenta una vulnerabilidad de tipo cross-site scripting reflejado en el servidor HTTP del frontend. El atacante puede enviar una URL cuidadosamente dise\u00f1ada junto con un bug conocido en el servidor que causar\u00e1 un error 500, y la respuesta insertar\u00e1 entonces la URL proporcionada por el hacker. El impacto es moderado, ya que el hacker tambi\u00e9n debe ser capaz de dise\u00f1ar una petici\u00f3n HTTP que cause un error 500 en el servidor. Hasta el momento no se conoce ninguna petici\u00f3n de este tipo. El problema est\u00e1 parcheado en la versi\u00f3n 2.95. Como soluci\u00f3n, se puede usar un plugin de cach\u00e9 de disco"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}, {"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-116"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tekmonks:monkshu:2.90:*:*:*:*:*:*:*", "matchCriteriaId": "5A000055-E0C7-4D74-B9E2-A7DCB0662F2A"}]}]}], "references": [{"url": "https://github.com/TekMonksGitHub/monkshu/commit/4601a9bfdc934d7ac32619ce621652fad0cf452b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TekMonksGitHub/monkshu/releases/tag/v2.95", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/TekMonksGitHub/monkshu/security/advisories/GHSA-hcpx-66hq-7g4x", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/TekMonksGitHub/monkshu/commit/4601a9bfdc934d7ac32619ce621652fad0cf452b"}}