{"buggy_code": ["## 1.8.1\n\n+ Fix haddock build\n\n## 1.8\n\n+ Add NixOS support\n+ Describe debug port in readme.\n+ Improve ensure alive error message due to \n  https://github.com/snoyberg/keter/issues/236\n+ Add `missing-host-response-file` and `unknown-host-response-file`\n  to the global keter config, which replace the default responses.\n+ All missing-host responses will now fill the requested host in the\n  `X-Forwarded-Host: HOSTNAME` header, where HOSTNAME is the requested host.\n  This is done because the default response fills in the hostname.\n  Now javascript could potentially fix that by making another request\n  to itself.\n+ Document missing configuration options in `etc/keter-config.yaml`\n\n## 1.7\n\n* Add support Aeson 2.*\n* Add `Data.Aeson.KeyHelper.hs` in cabal file.\n* And use the module where Aeson has changed how to handle Key and KeyMap.\n\n## 1.6\n* Make keter more chatty on boot.\n  This allows you to figure out in code where things go wrong.\n* Add opt-in debug CLI, allowing you to inspect keters' internal state.\n  You can activate it by specifying a cli-port.\n* Emit which pid is being killed by keter.\n  This helps with process leakage issues,\n  for example if the user launches from a bash script without using `exec`.\n\n## 1.5\n\n* Builds with `process` 1.6\n* add dependency for `tls-session-manager`\n* Add show instance for App\n* Add ensure alive timeout config\n* Add `nc` example in incoming\n* Change to github actions because travis ci stopped working.\n* Fix hackage issues in cabal file\n* Fix breaking changes with warp-tls.\n\n## 1.4.3.1\n\n* Add cabal flag `system-filepath` for compatibility with older versions of fsnotify.\n\n## 1.4.3\n\n* Update fsnotify dependency version and remove system-filepath.\n\n## 1.4.2.1\n\nBug fix: Change default connection time bound from 5 sec to 5 minutes [#107](https://github.com/snoyberg/keter/pull/107)\n\n## 1.4.1\n\n* Add configurable timeouts [#93](https://github.com/snoyberg/keter/pull/93)\n\n## 1.4.0.1\n\n* Avoid infinite loop traversing incoming directory [#96](https://github.com/snoyberg/keter/issues/96)\n\n## 1.4.0\n\n* Drop system-filepath\n\n## 1.3.10\n\n* Configurable time bound [#92](https://github.com/snoyberg/keter/pull/92)\n\n## 1.3.9.2\n\n* Lower case PostgreSQL names [#88](https://github.com/snoyberg/keter/pull/88)\n\n## 1.3.9.1\n\n* Allow blaze-builder 0.4\n\n## 1.3.9\n\n* Support chain certificates in credentials [#82](https://github.com/snoyberg/keter/pull/82)\n\n## 1.3.7.1\n\nBug fix: catch exceptions during reload [#64](https://github.com/snoyberg/keter/issues/64)\n\n## 1.3.7\n\n* Add ability to use middleware [#63](https://github.com/snoyberg/keter/pulls/63)\n\n## 1.3.6\n\nSupport the `forward-env` setting.\n\n## 1.3.5.3\n\nMore correct/complete solution for issue #44. Allows looking up hosts either with or without port numbers.\n\n## 1.3.5.2\n\nPartial workaround for keter.yaml files that give a port with the hostname.\n\n## 1.3.5.1\n\nFix bug where the cleanup process would remain running.\n\n## 1.3.5\n\nAll stanzas may have the `requires-secure` property to force redirect to HTTPS. You can set additional environment variables in your global Keter config file.\n\n## 1.3.4\n\nSupport for overriding external ports. Support for keter.yml in addition to keter.yaml. Case insensitive hostname lookups.\n\n## 1.3.3\n\nSet the X-Forwarded-Proto header\n\n## 1.3.2\n\nEnable GZIP middleware\n\n## 1.3.1\n\nUpgrade to WAI 3.0\n\n## 1.3.0\n\nUpgrade to conduit 1.1\n\n## 1.0.1\n\nPermit use of wildcard subdomains and exceptions to wildcards. Convert internal strings to use Data.Text in more places. (Although internationalized domain names are not supported unless entered in punycode in configuration files.)\n\n## 1.0.0\n\nSignificant overhaul. We now support monitoring of much more arbitrary jobs (e.g., background tasks), have a proper plugin system (PostgreSQL is no longer a required component), and have a much better system for tracking hostname mapping changes.\n\n## 0.4.0\n\nSwitch to fsnotify to get cross-platform support. No longer using raw proxies, but instead WAI proxies.\n\n## 0.3.7\n\nSending a HUP signal reloads the list of deployed apps. This is useful for circumstances where inotify does not work correctly, such as on file systems which do not support it.\n\n## 0.3.5\n\nYou can now create Keter bundles without any applications. These can contain static hosts and redirects.\n", "{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards   #-}\n{-# LANGUAGE TupleSections   #-}\n{-# LANGUAGE CPP #-}\n-- | A light-weight, minimalistic reverse HTTP proxy.\nmodule Keter.Proxy\n    ( reverseProxy\n    , makeSettings\n    , ProxySettings(..)\n    , TLSConfig (..)\n    ) where\n\nimport qualified Network.HTTP.Conduit      as HTTP\nimport qualified Data.CaseInsensitive      as CI\nimport qualified Keter.HostManager         as HostMan\nimport           Blaze.ByteString.Builder          (copyByteString)\nimport           Control.Applicative               ((<$>), (<|>))\nimport           Control.Monad.IO.Class            (liftIO)\nimport qualified Data.ByteString                   as S\nimport qualified Data.ByteString.Char8             as S8\nimport qualified Data.CaseInsensitive              as CI\n#if MIN_VERSION_http_reverse_proxy(0,6,0)\nimport           Network.Wai.Middleware.Gzip       (def)\n#else\nimport           Data.Default                      (Default (..))\n#endif\nimport           Data.Monoid                       (mappend, mempty)\nimport           Data.Text.Encoding                (decodeUtf8With, encodeUtf8)\nimport           Data.Text.Encoding.Error          (lenientDecode)\nimport qualified Data.Vector                       as V\nimport           Keter.Types\nimport           Keter.Types.Middleware\nimport           Network.HTTP.Conduit              (Manager)\n\n#if MIN_VERSION_http_reverse_proxy(0,4,2)\nimport           Network.HTTP.ReverseProxy         (defaultLocalWaiProxySettings)\n#endif\n\n#if MIN_VERSION_http_reverse_proxy(0,6,0)\nimport           Network.HTTP.ReverseProxy         (defaultWaiProxySettings)\n#endif\n\nimport           Network.HTTP.ReverseProxy         (ProxyDest (ProxyDest),\n                                                    SetIpHeader (..),\n                                                    WaiProxyResponse (..),\n                                                    LocalWaiProxySettings,\n                                                    setLpsTimeBound,\n                                                    waiProxyToSettings,\n                                                    wpsSetIpHeader,\n                                                    wpsGetDest)\nimport qualified Network.HTTP.ReverseProxy.Rewrite as Rewrite\nimport           Network.HTTP.Types                (mkStatus, status200,\n                                                    status301, status302,\n                                                    status303, status307,\n                                                    status404)\nimport qualified Network.Wai                       as Wai\nimport           Network.Wai.Application.Static    (defaultFileServerSettings,\n                                                    ssListing, staticApp)\nimport qualified Network.Wai.Handler.Warp          as Warp\nimport qualified Network.Wai.Handler.WarpTLS       as WarpTLS\nimport qualified Network.TLS.SessionManager        as TLSSession\nimport           Network.Wai.Middleware.Gzip       (gzip, GzipSettings(..), GzipFiles(..))\nimport           Prelude                           hiding (FilePath, (++))\nimport           WaiAppStatic.Listing              (defaultListing)\nimport qualified Network.TLS as TLS\nimport qualified System.Directory as Dir\n\n#if !MIN_VERSION_http_reverse_proxy(0,6,0)\ndefaultWaiProxySettings = def\n#endif\n\n#if !MIN_VERSION_http_reverse_proxy(0,4,2)\ndefaultLocalWaiProxySettings = def\n#endif\n\n\ndata ProxySettings = MkProxySettings\n  { -- | Mapping from virtual hostname to port number.\n    psHostLookup  :: ByteString -> IO (Maybe (ProxyAction, TLS.Credentials))\n  , psManager     :: !Manager\n  , psConfig      :: !KeterConfig\n  , psUnkownHost  :: ByteString -> ByteString\n  , psMissingHost :: ByteString\n  }\n\nmakeSettings :: KeterConfig -> HostMan.HostManager -> IO ProxySettings\nmakeSettings psConfig@KeterConfig {..} hostman = do\n    psManager <- HTTP.newManager HTTP.tlsManagerSettings\n    psMissingHost <- case kconfigMissingHostResponse of\n      Nothing -> pure defaultMissingHostBody\n      Just x -> taggedReadFile \"unknown-host-response-file\" x\n    psUnkownHost <- case kconfigUnknownHostResponse  of\n                Nothing -> pure defaultUnknownHostBody\n                Just x -> const <$> taggedReadFile \"missing-host-response-file\" x\n    pure $ MkProxySettings{..}\n    where\n        psHostLookup = HostMan.lookupAction hostman . CI.mk\n\ntaggedReadFile :: String -> FilePath -> IO ByteString\ntaggedReadFile tag file = do\n        isExist <- Dir.doesFileExist file\n        if isExist then S.readFile file else do\n          wd <- Dir.getCurrentDirectory\n          error $ \"could not find \" <> tag <> \" on path '\" <> file <> \"' with working dir '\" <> wd <> \"'\"\n\nreverseProxy :: ProxySettings -> ListeningPort -> IO ()\nreverseProxy settings listener =\n    run $ gzip def{gzipFiles = GzipPreCompressed GzipIgnore} $ withClient isSecure settings\n  where\n    warp host port = Warp.setHost host $ Warp.setPort port Warp.defaultSettings\n    (run, isSecure) =\n        case listener of\n            LPInsecure host port -> (Warp.runSettings (warp host port), False)\n            LPSecure host port cert chainCerts key session -> (WarpTLS.runTLS\n                (connectClientCertificates (psHostLookup settings) session $ WarpTLS.tlsSettingsChain\n                    cert\n                    (V.toList chainCerts)\n                    key)\n                (warp host port), True)\n\nconnectClientCertificates :: (ByteString -> IO (Maybe (ProxyAction, TLS.Credentials))) -> Bool -> WarpTLS.TLSSettings -> WarpTLS.TLSSettings\nconnectClientCertificates hl session s =\n    let\n        newHooks@TLS.ServerHooks{..} = WarpTLS.tlsServerHooks s\n        -- todo: add nested lookup\n        newOnServerNameIndication (Just n) =\n             maybe mempty snd <$> hl (S8.pack n)\n        newOnServerNameIndication Nothing =\n             return mempty -- we could return default certificate here\n    in\n        s { WarpTLS.tlsServerHooks = newHooks{TLS.onServerNameIndication = newOnServerNameIndication}\n          , WarpTLS.tlsSessionManagerConfig = if session then (Just TLSSession.defaultConfig) else Nothing }\n\nwithClient :: Bool -- ^ is secure?\n           -> ProxySettings\n           -> Wai.Application\nwithClient isSecure MkProxySettings {..} =\n    waiProxyToSettings\n       (error \"First argument to waiProxyToSettings forced, even thought wpsGetDest provided\")\n       defaultWaiProxySettings\n        { wpsSetIpHeader =\n            if useHeader\n                then SIHFromHeader\n                else SIHFromSocket\n        ,  wpsGetDest = Just getDest\n        } psManager\n  where\n    useHeader :: Bool\n    useHeader = kconfigIpFromHeader psConfig\n\n    -- calculate the number of microseconds since the\n    -- configuration option is in milliseconds\n    bound :: Int\n    bound = kconfigConnectionTimeBound psConfig * 1000\n    protocol\n        | isSecure = \"https\"\n        | otherwise = \"http\"\n\n    -- FIXME This is a workaround for\n    -- https://github.com/snoyberg/keter/issues/29. After some research, it\n    -- seems like Warp is behaving properly here. I'm still not certain why the\n    -- http call (from http-conduit) inside waiProxyToSettings could ever block\n    -- infinitely without the server it's connecting to going down, so that\n    -- requires more research. Meanwhile, this prevents the file descriptor\n    -- leak from occurring.\n\n    addjustGlobalBound :: Maybe Int -> LocalWaiProxySettings\n    addjustGlobalBound to = go `setLpsTimeBound` defaultLocalWaiProxySettings\n      where\n        go = case to <|> Just bound of\n               Just x | x > 0 -> Just x\n               _              -> Nothing\n\n    getDest :: Wai.Request -> IO (LocalWaiProxySettings, WaiProxyResponse)\n    getDest req =\n        case Wai.requestHeaderHost req of\n            Nothing -> do\n              return (defaultLocalWaiProxySettings, WPRResponse $ missingHostResponse psMissingHost)\n            Just host -> processHost req host\n\n    processHost :: Wai.Request -> S.ByteString -> IO (LocalWaiProxySettings, WaiProxyResponse)\n    processHost req host = do\n        -- Perform two levels of lookup. First: look up the entire host. If\n        -- that fails, try stripping off any port number and try again.\n        mport <- liftIO $ do\n            mport1 <- psHostLookup host\n            case mport1 of\n                Just _ -> return mport1\n                Nothing -> do\n                    let host' = S.takeWhile (/= 58) host\n                    if host' == host\n                        then return Nothing\n                        else psHostLookup host'\n        case mport of\n            Nothing -> do\n              return (defaultLocalWaiProxySettings, WPRResponse $ unknownHostResponse host (psUnkownHost host))\n            Just ((action, requiresSecure), _)\n                | requiresSecure && not isSecure -> performHttpsRedirect host req\n                | otherwise -> performAction req action\n\n    performHttpsRedirect host =\n        return . (addjustGlobalBound Nothing,) . WPRResponse . redirectApp config\n      where\n        host' = CI.mk $ decodeUtf8With lenientDecode host\n        config = RedirectConfig\n            { redirconfigHosts = mempty\n            , redirconfigStatus = 301\n            , redirconfigActions = V.singleton $ RedirectAction SPAny\n                                 $ RDPrefix True host' Nothing\n            , redirconfigSsl = SSLTrue\n            }\n\n    performAction req (PAPort port tbound) =\n        return (addjustGlobalBound tbound, WPRModifiedRequest req' $ ProxyDest \"127.0.0.1\" port)\n      where\n        req' = req\n            { Wai.requestHeaders = (\"X-Forwarded-Proto\", protocol)\n                                 : Wai.requestHeaders req\n            }\n    performAction _ (PAStatic StaticFilesConfig {..}) =\n        return (addjustGlobalBound sfconfigTimeout, WPRApplication $ processMiddleware sfconfigMiddleware $ staticApp (defaultFileServerSettings sfconfigRoot)\n            { ssListing =\n                if sfconfigListings\n                    then Just defaultListing\n                    else Nothing\n            })\n    performAction req (PARedirect config) = return (addjustGlobalBound Nothing, WPRResponse $ redirectApp config req)\n    performAction _ (PAReverseProxy config rpconfigMiddleware tbound) =\n       return (addjustGlobalBound tbound, WPRApplication\n                $ processMiddleware rpconfigMiddleware\n                $ Rewrite.simpleReverseProxy psManager config\n              )\n\nredirectApp :: RedirectConfig -> Wai.Request -> Wai.Response\nredirectApp RedirectConfig {..} req =\n    V.foldr checkAction noAction redirconfigActions\n  where\n    checkAction (RedirectAction SPAny dest) _ = sendTo $ mkUrl dest\n    checkAction (RedirectAction (SPSpecific path) dest) other\n        | encodeUtf8 path == Wai.rawPathInfo req = sendTo $ mkUrl dest\n        | otherwise = other\n\n    noAction = Wai.responseBuilder\n        status404\n        [(\"Content-Type\", \"text/plain\")]\n        (copyByteString \"File not found\")\n\n    sendTo url = Wai.responseBuilder\n        status\n        [(\"Location\", url)]\n        (copyByteString url)\n\n    status =\n        case redirconfigStatus of\n            301 -> status301\n            302 -> status302\n            303 -> status303\n            307 -> status307\n            i   -> mkStatus i $ S8.pack $ show i\n\n    mkUrl (RDUrl url) = encodeUtf8 url\n    mkUrl (RDPrefix isSecure host mport) = S.concat\n        [ if isSecure then \"https://\" else \"http://\"\n        , encodeUtf8 $ CI.original host\n        , case mport of\n            Nothing -> \"\"\n            Just port\n                | isSecure && port == 443 -> \"\"\n                | not isSecure && port == 80 -> \"\"\n                | otherwise -> S8.pack $ ':' : show port\n        , Wai.rawPathInfo req\n        , Wai.rawQueryString req\n        ]\n\ndefaultMissingHostBody :: ByteString\ndefaultMissingHostBody = \"<!DOCTYPE html>\\n<html><head><title>Welcome to Keter</title></head><body><h1>Welcome to Keter</h1><p>You did not provide a virtual hostname for this request.</p></body></html>\"\n\nmissingHostResponse :: ByteString -> Wai.Response\nmissingHostResponse missingHost = Wai.responseBuilder\n    status200\n    [(\"Content-Type\", \"text/html; charset=utf-8\")]\n    $ copyByteString missingHost\n\ndefaultUnknownHostBody :: ByteString -> ByteString\ndefaultUnknownHostBody host =\n  \"<!DOCTYPE html>\\n<html><head><title>Welcome to Keter</title></head><body><h1>Welcome to Keter</h1><p>The hostname you have provided, <code>\"\n  <> host <> \"</code>, is not recognized.</p></body></html>\"\n\nunknownHostResponse :: ByteString -> ByteString -> Wai.Response\nunknownHostResponse host body = Wai.responseBuilder\n    status200\n    [(\"Content-Type\", \"text/html; charset=utf-8\"), (\"X-Forwarded-Host\", host)]\n    (copyByteString body)\n", "Cabal-version:       >=1.10\nName:                keter\nVersion:             1.8.1\nSynopsis:            Web application deployment manager, focusing on Haskell web frameworks\nDescription:         Hackage documentation generation is not reliable. For up to date documentation, please see: <http://www.stackage.org/package/keter>.\nHomepage:            http://www.yesodweb.com/\nLicense:             MIT\nLicense-file:        LICENSE\nAuthor:              Michael Snoyman\nMaintainer:          michael@snoyman.com\nCategory:            Web, Yesod\nBuild-type:          Simple\nextra-source-files:  ChangeLog.md\n                     README.md\n\n--Data-Files:        incoming/foo/bundle.sh, incoming/foo/config/keter.yaml\n\nflag system-filepath\n  description: Use system-filepath\n  default: False\n\nLibrary\n  default-language:    Haskell98\n  Build-depends:       base                      >= 4             && < 5\n                     , directory\n                     , fsnotify >= 0.3\n                     , bytestring\n                     , text\n                     , containers\n                     , transformers\n                     , process                   >= 1.4.3         && < 1.7\n                     , random\n                     , data-default\n                     , filepath\n                     , zlib\n                     , network\n                     , time\n                     , tar                       >= 0.4\n                     , template-haskell\n                     , blaze-builder             >= 0.3           && < 0.5\n                     , yaml                      >= 0.8.4         && < 0.12\n                     , unix-compat               >= 0.3           && < 0.6\n                     , conduit                   >= 1.1\n                     , conduit-extra             >= 1.1\n                     , http-reverse-proxy        >= 0.4.2         && < 0.7\n                     , unix                      >= 2.5\n                     , wai-app-static            >= 3.1           && < 3.2\n                     , wai                       >= 3.2.2\n                     , wai-extra                 >= 3.0.3         && < 3.2\n                     , http-types\n                     , regex-tdfa                >= 1.1\n                     , attoparsec                >= 0.10\n                     , http-client\n                     , http-conduit              >= 2.1\n                     , case-insensitive\n                     , array\n                     , mtl\n                     , warp\n                     , warp-tls                  >= 3.0.3         && < 3.4.0\n                     , aeson\n                     , unordered-containers\n                     , vector\n                     , stm                       >= 2.4\n                     , async\n                     , lifted-base\n                     , tls                       >= 1.4\n                     , tls-session-manager\n                     , optparse-applicative\n                     , indexed-traversable\n\n  if impl(ghc < 7.6)\n    build-depends:     ghc-prim\n  if flag(system-filepath)\n    build-depends:\n                     system-filepath\n    cpp-options:       -DSYSTEM_FILEPATH\n\n  Exposed-Modules:     Keter.Plugin.Postgres\n                       Keter.Types\n                       Keter.Types.V04\n                       Keter.Types.V10\n                       Keter.Types.Common\n                       Keter.Types.Middleware\n                       Keter.App\n                       Keter.AppManager\n                       Keter.LabelMap\n                       Keter.Cli\n                       Keter.Main\n                       Keter.PortPool\n                       Keter.Proxy\n                       Keter.HostManager\n                       Network.HTTP.ReverseProxy.Rewrite\n                       Data.Yaml.FilePath\n                       Data.Aeson.KeyHelper\n                       Codec.Archive.TempTarball\n                       Data.Conduit.LogFile\n                       Data.Conduit.Process.Unix\n  ghc-options:         -Wall\n  c-sources:           cbits/process-tracker.c\n\nExecutable keter\n  default-language:    Haskell98\n  Main-is:             keter.hs\n  hs-source-dirs:      main\n  Build-depends:       base, keter, data-default, filepath\n  ghc-options:         -threaded -Wall\n  other-modules:       Paths_keter\n\ntest-suite test\n    default-language:    Haskell98\n    hs-source-dirs: test\n    main-is: Spec.hs\n    type: exitcode-stdio-1.0\n    build-depends:   base\n                   , transformers\n                   , conduit\n                   , bytestring\n                   , hspec >= 1.3\n                   , unix\n                   , keter\n                   , HUnit\n    ghc-options:     -Wall -threaded\n\nsource-repository head\n  type:     git\n  location: https://github.com/snoyberg/keter\n"], "fixing_code": ["## 1.8.2 \n\n+ Fix XSS issue in the default response.\n  (special thanks to Max @ulidtko for spotting and fixing this)\n\n## 1.8.1\n\n+ Fix haddock build\n\n## 1.8\n\n+ Add NixOS support\n+ Describe debug port in readme.\n+ Improve ensure alive error message due to \n  https://github.com/snoyberg/keter/issues/236\n+ Add `missing-host-response-file` and `unknown-host-response-file`\n  to the global keter config, which replace the default responses.\n+ All missing-host responses will now fill the requested host in the\n  `X-Forwarded-Host: HOSTNAME` header, where HOSTNAME is the requested host.\n  This is done because the default response fills in the hostname.\n  Now javascript could potentially fix that by making another request\n  to itself.\n+ Document missing configuration options in `etc/keter-config.yaml`\n\n## 1.7\n\n* Add support Aeson 2.*\n* Add `Data.Aeson.KeyHelper.hs` in cabal file.\n* And use the module where Aeson has changed how to handle Key and KeyMap.\n\n## 1.6\n* Make keter more chatty on boot.\n  This allows you to figure out in code where things go wrong.\n* Add opt-in debug CLI, allowing you to inspect keters' internal state.\n  You can activate it by specifying a cli-port.\n* Emit which pid is being killed by keter.\n  This helps with process leakage issues,\n  for example if the user launches from a bash script without using `exec`.\n\n## 1.5\n\n* Builds with `process` 1.6\n* add dependency for `tls-session-manager`\n* Add show instance for App\n* Add ensure alive timeout config\n* Add `nc` example in incoming\n* Change to github actions because travis ci stopped working.\n* Fix hackage issues in cabal file\n* Fix breaking changes with warp-tls.\n\n## 1.4.3.1\n\n* Add cabal flag `system-filepath` for compatibility with older versions of fsnotify.\n\n## 1.4.3\n\n* Update fsnotify dependency version and remove system-filepath.\n\n## 1.4.2.1\n\nBug fix: Change default connection time bound from 5 sec to 5 minutes [#107](https://github.com/snoyberg/keter/pull/107)\n\n## 1.4.1\n\n* Add configurable timeouts [#93](https://github.com/snoyberg/keter/pull/93)\n\n## 1.4.0.1\n\n* Avoid infinite loop traversing incoming directory [#96](https://github.com/snoyberg/keter/issues/96)\n\n## 1.4.0\n\n* Drop system-filepath\n\n## 1.3.10\n\n* Configurable time bound [#92](https://github.com/snoyberg/keter/pull/92)\n\n## 1.3.9.2\n\n* Lower case PostgreSQL names [#88](https://github.com/snoyberg/keter/pull/88)\n\n## 1.3.9.1\n\n* Allow blaze-builder 0.4\n\n## 1.3.9\n\n* Support chain certificates in credentials [#82](https://github.com/snoyberg/keter/pull/82)\n\n## 1.3.7.1\n\nBug fix: catch exceptions during reload [#64](https://github.com/snoyberg/keter/issues/64)\n\n## 1.3.7\n\n* Add ability to use middleware [#63](https://github.com/snoyberg/keter/pulls/63)\n\n## 1.3.6\n\nSupport the `forward-env` setting.\n\n## 1.3.5.3\n\nMore correct/complete solution for issue #44. Allows looking up hosts either with or without port numbers.\n\n## 1.3.5.2\n\nPartial workaround for keter.yaml files that give a port with the hostname.\n\n## 1.3.5.1\n\nFix bug where the cleanup process would remain running.\n\n## 1.3.5\n\nAll stanzas may have the `requires-secure` property to force redirect to HTTPS. You can set additional environment variables in your global Keter config file.\n\n## 1.3.4\n\nSupport for overriding external ports. Support for keter.yml in addition to keter.yaml. Case insensitive hostname lookups.\n\n## 1.3.3\n\nSet the X-Forwarded-Proto header\n\n## 1.3.2\n\nEnable GZIP middleware\n\n## 1.3.1\n\nUpgrade to WAI 3.0\n\n## 1.3.0\n\nUpgrade to conduit 1.1\n\n## 1.0.1\n\nPermit use of wildcard subdomains and exceptions to wildcards. Convert internal strings to use Data.Text in more places. (Although internationalized domain names are not supported unless entered in punycode in configuration files.)\n\n## 1.0.0\n\nSignificant overhaul. We now support monitoring of much more arbitrary jobs (e.g., background tasks), have a proper plugin system (PostgreSQL is no longer a required component), and have a much better system for tracking hostname mapping changes.\n\n## 0.4.0\n\nSwitch to fsnotify to get cross-platform support. No longer using raw proxies, but instead WAI proxies.\n\n## 0.3.7\n\nSending a HUP signal reloads the list of deployed apps. This is useful for circumstances where inotify does not work correctly, such as on file systems which do not support it.\n\n## 0.3.5\n\nYou can now create Keter bundles without any applications. These can contain static hosts and redirects.\n", "{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards   #-}\n{-# LANGUAGE TupleSections   #-}\n{-# LANGUAGE CPP #-}\n-- | A light-weight, minimalistic reverse HTTP proxy.\nmodule Keter.Proxy\n    ( reverseProxy\n    , makeSettings\n    , ProxySettings(..)\n    , TLSConfig (..)\n    ) where\n\nimport qualified Network.HTTP.Conduit      as HTTP\nimport qualified Data.CaseInsensitive      as CI\nimport qualified Keter.HostManager         as HostMan\nimport           Blaze.ByteString.Builder          (copyByteString, toByteString)\nimport           Blaze.ByteString.Builder.Html.Word(fromHtmlEscapedByteString)\nimport           Control.Applicative               ((<$>), (<|>))\nimport           Control.Monad.IO.Class            (liftIO)\nimport qualified Data.ByteString                   as S\nimport qualified Data.ByteString.Char8             as S8\nimport qualified Data.CaseInsensitive              as CI\n#if MIN_VERSION_http_reverse_proxy(0,6,0)\nimport           Network.Wai.Middleware.Gzip       (def)\n#else\nimport           Data.Default                      (Default (..))\n#endif\nimport           Data.Monoid                       (mappend, mempty)\nimport           Data.Text.Encoding                (decodeUtf8With, encodeUtf8)\nimport           Data.Text.Encoding.Error          (lenientDecode)\nimport qualified Data.Vector                       as V\nimport           Keter.Types\nimport           Keter.Types.Middleware\nimport           Network.HTTP.Conduit              (Manager)\n\n#if MIN_VERSION_http_reverse_proxy(0,4,2)\nimport           Network.HTTP.ReverseProxy         (defaultLocalWaiProxySettings)\n#endif\n\n#if MIN_VERSION_http_reverse_proxy(0,6,0)\nimport           Network.HTTP.ReverseProxy         (defaultWaiProxySettings)\n#endif\n\nimport           Network.HTTP.ReverseProxy         (ProxyDest (ProxyDest),\n                                                    SetIpHeader (..),\n                                                    WaiProxyResponse (..),\n                                                    LocalWaiProxySettings,\n                                                    setLpsTimeBound,\n                                                    waiProxyToSettings,\n                                                    wpsSetIpHeader,\n                                                    wpsGetDest)\nimport qualified Network.HTTP.ReverseProxy.Rewrite as Rewrite\nimport           Network.HTTP.Types                (mkStatus, status200,\n                                                    status301, status302,\n                                                    status303, status307,\n                                                    status404)\nimport qualified Network.Wai                       as Wai\nimport           Network.Wai.Application.Static    (defaultFileServerSettings,\n                                                    ssListing, staticApp)\nimport qualified Network.Wai.Handler.Warp          as Warp\nimport qualified Network.Wai.Handler.WarpTLS       as WarpTLS\nimport qualified Network.TLS.SessionManager        as TLSSession\nimport           Network.Wai.Middleware.Gzip       (gzip, GzipSettings(..), GzipFiles(..))\nimport           Prelude                           hiding (FilePath, (++))\nimport           WaiAppStatic.Listing              (defaultListing)\nimport qualified Network.TLS as TLS\nimport qualified System.Directory as Dir\n\n#if !MIN_VERSION_http_reverse_proxy(0,6,0)\ndefaultWaiProxySettings = def\n#endif\n\n#if !MIN_VERSION_http_reverse_proxy(0,4,2)\ndefaultLocalWaiProxySettings = def\n#endif\n\n\ndata ProxySettings = MkProxySettings\n  { -- | Mapping from virtual hostname to port number.\n    psHostLookup  :: ByteString -> IO (Maybe (ProxyAction, TLS.Credentials))\n  , psManager     :: !Manager\n  , psConfig      :: !KeterConfig\n  , psUnkownHost  :: ByteString -> ByteString\n  , psMissingHost :: ByteString\n  }\n\nmakeSettings :: KeterConfig -> HostMan.HostManager -> IO ProxySettings\nmakeSettings psConfig@KeterConfig {..} hostman = do\n    psManager <- HTTP.newManager HTTP.tlsManagerSettings\n    psMissingHost <- case kconfigMissingHostResponse of\n      Nothing -> pure defaultMissingHostBody\n      Just x -> taggedReadFile \"unknown-host-response-file\" x\n    psUnkownHost <- case kconfigUnknownHostResponse  of\n                Nothing -> pure defaultUnknownHostBody\n                Just x -> const <$> taggedReadFile \"missing-host-response-file\" x\n    pure $ MkProxySettings{..}\n    where\n        psHostLookup = HostMan.lookupAction hostman . CI.mk\n\ntaggedReadFile :: String -> FilePath -> IO ByteString\ntaggedReadFile tag file = do\n        isExist <- Dir.doesFileExist file\n        if isExist then S.readFile file else do\n          wd <- Dir.getCurrentDirectory\n          error $ \"could not find \" <> tag <> \" on path '\" <> file <> \"' with working dir '\" <> wd <> \"'\"\n\nreverseProxy :: ProxySettings -> ListeningPort -> IO ()\nreverseProxy settings listener =\n    run $ gzip def{gzipFiles = GzipPreCompressed GzipIgnore} $ withClient isSecure settings\n  where\n    warp host port = Warp.setHost host $ Warp.setPort port Warp.defaultSettings\n    (run, isSecure) =\n        case listener of\n            LPInsecure host port -> (Warp.runSettings (warp host port), False)\n            LPSecure host port cert chainCerts key session -> (WarpTLS.runTLS\n                (connectClientCertificates (psHostLookup settings) session $ WarpTLS.tlsSettingsChain\n                    cert\n                    (V.toList chainCerts)\n                    key)\n                (warp host port), True)\n\nconnectClientCertificates :: (ByteString -> IO (Maybe (ProxyAction, TLS.Credentials))) -> Bool -> WarpTLS.TLSSettings -> WarpTLS.TLSSettings\nconnectClientCertificates hl session s =\n    let\n        newHooks@TLS.ServerHooks{..} = WarpTLS.tlsServerHooks s\n        -- todo: add nested lookup\n        newOnServerNameIndication (Just n) =\n             maybe mempty snd <$> hl (S8.pack n)\n        newOnServerNameIndication Nothing =\n             return mempty -- we could return default certificate here\n    in\n        s { WarpTLS.tlsServerHooks = newHooks{TLS.onServerNameIndication = newOnServerNameIndication}\n          , WarpTLS.tlsSessionManagerConfig = if session then (Just TLSSession.defaultConfig) else Nothing }\n\nwithClient :: Bool -- ^ is secure?\n           -> ProxySettings\n           -> Wai.Application\nwithClient isSecure MkProxySettings {..} =\n    waiProxyToSettings\n       (error \"First argument to waiProxyToSettings forced, even thought wpsGetDest provided\")\n       defaultWaiProxySettings\n        { wpsSetIpHeader =\n            if useHeader\n                then SIHFromHeader\n                else SIHFromSocket\n        ,  wpsGetDest = Just getDest\n        } psManager\n  where\n    useHeader :: Bool\n    useHeader = kconfigIpFromHeader psConfig\n\n    -- calculate the number of microseconds since the\n    -- configuration option is in milliseconds\n    bound :: Int\n    bound = kconfigConnectionTimeBound psConfig * 1000\n    protocol\n        | isSecure = \"https\"\n        | otherwise = \"http\"\n\n    -- FIXME This is a workaround for\n    -- https://github.com/snoyberg/keter/issues/29. After some research, it\n    -- seems like Warp is behaving properly here. I'm still not certain why the\n    -- http call (from http-conduit) inside waiProxyToSettings could ever block\n    -- infinitely without the server it's connecting to going down, so that\n    -- requires more research. Meanwhile, this prevents the file descriptor\n    -- leak from occurring.\n\n    addjustGlobalBound :: Maybe Int -> LocalWaiProxySettings\n    addjustGlobalBound to = go `setLpsTimeBound` defaultLocalWaiProxySettings\n      where\n        go = case to <|> Just bound of\n               Just x | x > 0 -> Just x\n               _              -> Nothing\n\n    getDest :: Wai.Request -> IO (LocalWaiProxySettings, WaiProxyResponse)\n    getDest req =\n        case Wai.requestHeaderHost req of\n            Nothing -> do\n              return (defaultLocalWaiProxySettings, WPRResponse $ missingHostResponse psMissingHost)\n            Just host -> processHost req host\n\n    processHost :: Wai.Request -> S.ByteString -> IO (LocalWaiProxySettings, WaiProxyResponse)\n    processHost req host = do\n        -- Perform two levels of lookup. First: look up the entire host. If\n        -- that fails, try stripping off any port number and try again.\n        mport <- liftIO $ do\n            mport1 <- psHostLookup host\n            case mport1 of\n                Just _ -> return mport1\n                Nothing -> do\n                    let host' = S.takeWhile (/= 58) host\n                    if host' == host\n                        then return Nothing\n                        else psHostLookup host'\n        case mport of\n            Nothing -> do\n              return (defaultLocalWaiProxySettings, WPRResponse $ unknownHostResponse host (psUnkownHost host))\n            Just ((action, requiresSecure), _)\n                | requiresSecure && not isSecure -> performHttpsRedirect host req\n                | otherwise -> performAction req action\n\n    performHttpsRedirect host =\n        return . (addjustGlobalBound Nothing,) . WPRResponse . redirectApp config\n      where\n        host' = CI.mk $ decodeUtf8With lenientDecode host\n        config = RedirectConfig\n            { redirconfigHosts = mempty\n            , redirconfigStatus = 301\n            , redirconfigActions = V.singleton $ RedirectAction SPAny\n                                 $ RDPrefix True host' Nothing\n            , redirconfigSsl = SSLTrue\n            }\n\n    performAction req (PAPort port tbound) =\n        return (addjustGlobalBound tbound, WPRModifiedRequest req' $ ProxyDest \"127.0.0.1\" port)\n      where\n        req' = req\n            { Wai.requestHeaders = (\"X-Forwarded-Proto\", protocol)\n                                 : Wai.requestHeaders req\n            }\n    performAction _ (PAStatic StaticFilesConfig {..}) =\n        return (addjustGlobalBound sfconfigTimeout, WPRApplication $ processMiddleware sfconfigMiddleware $ staticApp (defaultFileServerSettings sfconfigRoot)\n            { ssListing =\n                if sfconfigListings\n                    then Just defaultListing\n                    else Nothing\n            })\n    performAction req (PARedirect config) = return (addjustGlobalBound Nothing, WPRResponse $ redirectApp config req)\n    performAction _ (PAReverseProxy config rpconfigMiddleware tbound) =\n       return (addjustGlobalBound tbound, WPRApplication\n                $ processMiddleware rpconfigMiddleware\n                $ Rewrite.simpleReverseProxy psManager config\n              )\n\nredirectApp :: RedirectConfig -> Wai.Request -> Wai.Response\nredirectApp RedirectConfig {..} req =\n    V.foldr checkAction noAction redirconfigActions\n  where\n    checkAction (RedirectAction SPAny dest) _ = sendTo $ mkUrl dest\n    checkAction (RedirectAction (SPSpecific path) dest) other\n        | encodeUtf8 path == Wai.rawPathInfo req = sendTo $ mkUrl dest\n        | otherwise = other\n\n    noAction = Wai.responseBuilder\n        status404\n        [(\"Content-Type\", \"text/plain\")]\n        (copyByteString \"File not found\")\n\n    sendTo url = Wai.responseBuilder\n        status\n        [(\"Location\", url)]\n        (copyByteString url)\n\n    status =\n        case redirconfigStatus of\n            301 -> status301\n            302 -> status302\n            303 -> status303\n            307 -> status307\n            i   -> mkStatus i $ S8.pack $ show i\n\n    mkUrl (RDUrl url) = encodeUtf8 url\n    mkUrl (RDPrefix isSecure host mport) = S.concat\n        [ if isSecure then \"https://\" else \"http://\"\n        , encodeUtf8 $ CI.original host\n        , case mport of\n            Nothing -> \"\"\n            Just port\n                | isSecure && port == 443 -> \"\"\n                | not isSecure && port == 80 -> \"\"\n                | otherwise -> S8.pack $ ':' : show port\n        , Wai.rawPathInfo req\n        , Wai.rawQueryString req\n        ]\n\ndefaultMissingHostBody :: ByteString\ndefaultMissingHostBody = \"<!DOCTYPE html>\\n<html><head><title>Welcome to Keter</title></head><body><h1>Welcome to Keter</h1><p>You did not provide a virtual hostname for this request.</p></body></html>\"\n\nmissingHostResponse :: ByteString -> Wai.Response\nmissingHostResponse missingHost = Wai.responseBuilder\n    status200\n    [(\"Content-Type\", \"text/html; charset=utf-8\")]\n    $ copyByteString missingHost\n\ndefaultUnknownHostBody :: ByteString -> ByteString\ndefaultUnknownHostBody host =\n  \"<!DOCTYPE html>\\n<html><head><title>Welcome to Keter</title></head><body><h1>Welcome to Keter</h1><p>The hostname you have provided, <code>\"\n  <> escapeHtml host <> \"</code>, is not recognized.</p></body></html>\"\n\nunknownHostResponse :: ByteString -> ByteString -> Wai.Response\nunknownHostResponse host body = Wai.responseBuilder\n    status200\n    [(\"Content-Type\", \"text/html; charset=utf-8\"), (\"X-Forwarded-Host\", host)]\n    (copyByteString body)\n\nescapeHtml :: ByteString -> ByteString\nescapeHtml = toByteString . fromHtmlEscapedByteString\n", "Cabal-version:       >=1.10\nName:                keter\nVersion:             1.8.2\nSynopsis:            Web application deployment manager, focusing on Haskell web frameworks\nDescription:         Hackage documentation generation is not reliable. For up to date documentation, please see: <http://www.stackage.org/package/keter>.\nHomepage:            http://www.yesodweb.com/\nLicense:             MIT\nLicense-file:        LICENSE\nAuthor:              Michael Snoyman\nMaintainer:          michael@snoyman.com\nCategory:            Web, Yesod\nBuild-type:          Simple\nextra-source-files:  ChangeLog.md\n                     README.md\n\n--Data-Files:        incoming/foo/bundle.sh, incoming/foo/config/keter.yaml\n\nflag system-filepath\n  description: Use system-filepath\n  default: False\n\nLibrary\n  default-language:    Haskell98\n  Build-depends:       base                      >= 4             && < 5\n                     , directory\n                     , fsnotify >= 0.3\n                     , bytestring\n                     , text\n                     , containers\n                     , transformers\n                     , process                   >= 1.4.3         && < 1.7\n                     , random\n                     , data-default\n                     , filepath\n                     , zlib\n                     , network\n                     , time\n                     , tar                       >= 0.4\n                     , template-haskell\n                     , blaze-builder             >= 0.3           && < 0.5\n                     , yaml                      >= 0.8.4         && < 0.12\n                     , unix-compat               >= 0.3           && < 0.6\n                     , conduit                   >= 1.1\n                     , conduit-extra             >= 1.1\n                     , http-reverse-proxy        >= 0.4.2         && < 0.7\n                     , unix                      >= 2.5\n                     , wai-app-static            >= 3.1           && < 3.2\n                     , wai                       >= 3.2.2\n                     , wai-extra                 >= 3.0.3         && < 3.2\n                     , http-types\n                     , regex-tdfa                >= 1.1\n                     , attoparsec                >= 0.10\n                     , http-client\n                     , http-conduit              >= 2.1\n                     , case-insensitive\n                     , array\n                     , mtl\n                     , warp\n                     , warp-tls                  >= 3.0.3         && < 3.4.0\n                     , aeson\n                     , unordered-containers\n                     , vector\n                     , stm                       >= 2.4\n                     , async\n                     , lifted-base\n                     , tls                       >= 1.4\n                     , tls-session-manager\n                     , optparse-applicative\n                     , indexed-traversable\n\n  if impl(ghc < 7.6)\n    build-depends:     ghc-prim\n  if flag(system-filepath)\n    build-depends:\n                     system-filepath\n    cpp-options:       -DSYSTEM_FILEPATH\n\n  Exposed-Modules:     Keter.Plugin.Postgres\n                       Keter.Types\n                       Keter.Types.V04\n                       Keter.Types.V10\n                       Keter.Types.Common\n                       Keter.Types.Middleware\n                       Keter.App\n                       Keter.AppManager\n                       Keter.LabelMap\n                       Keter.Cli\n                       Keter.Main\n                       Keter.PortPool\n                       Keter.Proxy\n                       Keter.HostManager\n                       Network.HTTP.ReverseProxy.Rewrite\n                       Data.Yaml.FilePath\n                       Data.Aeson.KeyHelper\n                       Codec.Archive.TempTarball\n                       Data.Conduit.LogFile\n                       Data.Conduit.Process.Unix\n  ghc-options:         -Wall\n  c-sources:           cbits/process-tracker.c\n\nExecutable keter\n  default-language:    Haskell98\n  Main-is:             keter.hs\n  hs-source-dirs:      main\n  Build-depends:       base, keter, data-default, filepath\n  ghc-options:         -threaded -Wall\n  other-modules:       Paths_keter\n\ntest-suite test\n    default-language:    Haskell98\n    hs-source-dirs: test\n    main-is: Spec.hs\n    type: exitcode-stdio-1.0\n    build-depends:   base\n                   , transformers\n                   , conduit\n                   , bytestring\n                   , hspec >= 1.3\n                   , unix\n                   , keter\n                   , HUnit\n    ghc-options:     -Wall -threaded\n\nsource-repository head\n  type:     git\n  location: https://github.com/snoyberg/keter\n"], "filenames": ["ChangeLog.md", "Keter/Proxy.hs", "keter.cabal"], "buggy_code_start_loc": [0, 16, 3], "buggy_code_end_loc": [0, 293, 4], "fixing_code_start_loc": [1, 16, 3], "fixing_code_end_loc": [6, 298, 4], "type": "CWE-79", "message": "A vulnerability has been found in snoyberg keter up to 1.8.1 and classified as problematic. This vulnerability affects unknown code of the file Keter/Proxy.hs. The manipulation of the argument host leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.8.2 is able to address this issue. The name of the patch is d41f3697926b231782a3ad8050f5af1ce5cc40b7. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217444.", "other": {"cve": {"id": "CVE-2022-4877", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-05T10:15:10.073", "lastModified": "2023-01-11T19:10:21.303", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in snoyberg keter up to 1.8.1 and classified as problematic. This vulnerability affects unknown code of the file Keter/Proxy.hs. The manipulation of the argument host leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.8.2 is able to address this issue. The name of the patch is d41f3697926b231782a3ad8050f5af1ce5cc40b7. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217444."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:keter_project:keter:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8.2", "matchCriteriaId": "2EA0065A-D39D-4DE2-8E90-31637558BFC9"}]}]}], "references": [{"url": "https://github.com/snoyberg/keter/commit/d41f3697926b231782a3ad8050f5af1ce5cc40b7", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/snoyberg/keter/pull/246", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/snoyberg/keter/releases/tag/keter%2F1.8.2", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217444", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217444", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snoyberg/keter/commit/d41f3697926b231782a3ad8050f5af1ce5cc40b7"}}