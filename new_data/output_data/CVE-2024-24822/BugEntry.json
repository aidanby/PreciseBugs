{"buggy_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\AdminEvents;\nuse Pimcore\\Model\\Element\\Tag;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/tags\")\n *\n * @internal\n */\nclass TagsController extends AdminAbstractController\n{\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_tags_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request): JsonResponse\n    {\n        try {\n            $tag = new Tag();\n            $tag->setName(strip_tags($request->get('text', '')));\n            $tag->setParentId((int)$request->get('parentId'));\n            $tag->save();\n\n            return $this->adminJson(['success' => true, 'id' => $tag->getId()]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_tags_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request): JsonResponse\n    {\n        $tag = Tag::getById((int) $request->get('id'));\n        if ($tag) {\n            $tag->delete();\n\n            return $this->adminJson(['success' => true]);\n        } else {\n            throw $this->createNotFoundException('Tag with ID ' . $request->get('id') . ' not found.');\n        }\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_tags_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request): JsonResponse\n    {\n        $tag = Tag::getById((int) $request->get('id'));\n        if ($tag) {\n            $parentId = $request->get('parentId');\n            if ($parentId || $parentId === '0') {\n                $tag->setParentId((int)$parentId);\n            }\n            if ($request->get('text')) {\n                $tag->setName(strip_tags($request->get('text', '')));\n            }\n\n            $tag->save();\n\n            return $this->adminJson(['success' => true]);\n        } else {\n            throw $this->createNotFoundException('Tag with ID ' . $request->get('id') . ' not found.');\n        }\n    }\n\n    /**\n     * @Route(\"/tree-get-children-by-id\", name=\"pimcore_admin_tags_treegetchildrenbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildrenByIdAction(Request $request): JsonResponse\n    {\n        $showSelection = $request->get('showSelection') == 'true';\n        $assignmentCId = (int)$request->get('assignmentCId');\n        $assignmentCType = strip_tags($request->get('assignmentCType', ''));\n\n        $recursiveChildren = false;\n        $assignedTagIds = [];\n        if ($assignmentCId && $assignmentCType) {\n            $assignedTags = Tag::getTagsForElement($assignmentCType, $assignmentCId);\n\n            foreach ($assignedTags as $assignedTag) {\n                $assignedTagIds[$assignedTag->getId()] = $assignedTag;\n            }\n        }\n\n        $tagList = new Tag\\Listing();\n        if ($request->get('node')) {\n            $tagList->setCondition('parentId = ?', (int)$request->get('node'));\n        } else {\n            $tagList->setCondition('ISNULL(parentId) OR parentId = 0');\n        }\n        $tagList->setOrderKey('name');\n\n        if (!empty($request->get('filter'))) {\n            $filterIds = [0];\n            $filterTagList = new Tag\\Listing();\n            $filterTagList->setCondition('LOWER(`name`) LIKE ?', ['%' . $filterTagList->escapeLike(mb_strtolower($request->get('filter'))) . '%']);\n            foreach ($filterTagList->load() as $filterTag) {\n                if ($filterTag->getParentId() === 0) {\n                    $filterIds[] = $filterTag->getId();\n                } else {\n                    $ids = explode('/', $filterTag->getIdPath());\n                    if (isset($ids[1])) {\n                        $filterIds[] = (int)$ids[1];\n                    }\n                }\n            }\n\n            $filterIds = array_unique(array_values($filterIds));\n            $tagList->setCondition('id IN('.implode(',', $filterIds).')');\n            $recursiveChildren = true;\n        }\n\n        $tags = [];\n        foreach ($tagList->load() as $tag) {\n            $tags[] = $this->convertTagToArray($tag, $showSelection, $assignedTagIds, true, $recursiveChildren);\n        }\n\n        return $this->adminJson($tags);\n    }\n\n    protected function convertTagToArray(Tag $tag, bool $showSelection, array $assignedTagIds, bool $loadChildren = false, bool $recursiveChildren = false): array\n    {\n        $tagArray = [\n            'id' => $tag->getId(),\n            'text' => $tag->getName(),\n            'path' => $tag->getNamePath(),\n            'expandable' => $tag->hasChildren(),\n            'leaf' => !$tag->hasChildren(),\n            'iconCls' => 'pimcore_icon_element_tags',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $tag->getId(),\n            ],\n        ];\n\n        if ($showSelection) {\n            $tagArray['checked'] = isset($assignedTagIds[$tag->getId()]);\n        }\n\n        if ($loadChildren) {\n            $children = $tag->getChildren();\n            $loadChildren = $recursiveChildren;\n            foreach ($children as $child) {\n                $tagArray['children'][] = $this->convertTagToArray($child, $showSelection, $assignedTagIds, $loadChildren, $recursiveChildren);\n            }\n        }\n\n        return $tagArray;\n    }\n\n    /**\n     * @Route(\"/load-tags-for-element\", name=\"pimcore_admin_tags_loadtagsforelement\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function loadTagsForElementAction(Request $request): JsonResponse\n    {\n        $assginmentCId = (int)$request->get('assignmentCId');\n        $assginmentCType = strip_tags($request->get('assignmentCType', ''));\n\n        $assignedTagArray = [];\n        if ($assginmentCId && $assginmentCType) {\n            $assignedTags = Tag::getTagsForElement($assginmentCType, $assginmentCId);\n\n            foreach ($assignedTags as $assignedTag) {\n                $assignedTagArray[] = $this->convertTagToArray($assignedTag, false, []);\n            }\n        }\n\n        return $this->adminJson($assignedTagArray);\n    }\n\n    /**\n     * @Route(\"/add-tag-to-element\", name=\"pimcore_admin_tags_addtagtoelement\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addTagToElementAction(Request $request): JsonResponse\n    {\n        $assginmentCId = (int)$request->get('assignmentElementId');\n        $assginmentCType = strip_tags($request->get('assignmentElementType', ''));\n        $tagId = (int)$request->get('tagId');\n\n        $tag = Tag::getById($tagId);\n        if ($tag) {\n            Tag::addTagToElement($assginmentCType, $assginmentCId, $tag);\n\n            return $this->adminJson(['success' => true, 'id' => $tag->getId()]);\n        } else {\n            return $this->adminJson(['success' => false]);\n        }\n    }\n\n    /**\n     * @Route(\"/remove-tag-from-element\", name=\"pimcore_admin_tags_removetagfromelement\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function removeTagFromElementAction(Request $request): JsonResponse\n    {\n        $assginmentCId = (int)$request->get('assignmentElementId');\n        $assginmentCType = strip_tags($request->get('assignmentElementType', ''));\n        $tagId = (int)$request->get('tagId');\n\n        $tag = Tag::getById($tagId);\n        if ($tag) {\n            Tag::removeTagFromElement($assginmentCType, $assginmentCId, $tag);\n\n            return $this->adminJson(['success' => true, 'id' => $tag->getId()]);\n        } else {\n            return $this->adminJson(['success' => false]);\n        }\n    }\n\n    /**\n     * @Route(\"/get-batch-assignment-jobs\", name=\"pimcore_admin_tags_getbatchassignmentjobs\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function getBatchAssignmentJobsAction(Request $request, EventDispatcherInterface $eventDispatcher): JsonResponse\n    {\n        $elementId = (int)$request->get('elementId');\n        $elementType = strip_tags($request->get('elementType', ''));\n\n        $idList = [];\n        switch ($elementType) {\n            case 'object':\n                $object = \\Pimcore\\Model\\DataObject::getById($elementId);\n                if ($object) {\n                    $idList = $this->getSubObjectIds($object, $eventDispatcher);\n                }\n\n                break;\n            case 'asset':\n                $asset = \\Pimcore\\Model\\Asset::getById($elementId);\n                if ($asset) {\n                    $idList = $this->getSubAssetIds($asset, $eventDispatcher);\n                }\n\n                break;\n            case 'document':\n                $document = \\Pimcore\\Model\\Document::getById($elementId);\n                if ($document) {\n                    $idList = $this->getSubDocumentIds($document, $eventDispatcher);\n                }\n\n                break;\n        }\n\n        $size = 2;\n        $offset = 0;\n        $idListParts = [];\n        while ($offset < count($idList)) {\n            $idListParts[] = array_slice($idList, $offset, $size);\n            $offset += $size;\n        }\n\n        return $this->adminJson(['success' => true, 'idLists' => $idListParts, 'totalCount' => count($idList)]);\n    }\n\n    /**\n     * @return int[]\n     */\n    private function getSubObjectIds(\\Pimcore\\Model\\DataObject\\AbstractObject $object, EventDispatcherInterface $eventDispatcher): array\n    {\n        $childrenList = new \\Pimcore\\Model\\DataObject\\Listing();\n        $condition = '`path` LIKE ?';\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $condition .= ' AND (\n                (SELECT `view` FROM users_workspaces_object WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(CONCAT(`path`,`key`),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    OR\n                (SELECT `view` FROM users_workspaces_object WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(`path`,`key`))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n             )';\n        }\n\n        $childrenList->setCondition($condition, $childrenList->escapeLike($object->getRealFullPath()) . '/%');\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $childrenList,\n            'context' => [],\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::OBJECT_LIST_BEFORE_LIST_LOAD);\n        /** @var \\Pimcore\\Model\\DataObject\\Listing $childrenList */\n        $childrenList = $beforeListLoadEvent->getArgument('list');\n\n        return $childrenList->loadIdList();\n    }\n\n    /**\n     * @return int[]\n     */\n    private function getSubAssetIds(\\Pimcore\\Model\\Asset $asset, EventDispatcherInterface $eventDispatcher): array\n    {\n        $childrenList = new \\Pimcore\\Model\\Asset\\Listing();\n        $condition = '`path` LIKE ?';\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $condition .= ' AND (\n                (SELECT `view` FROM users_workspaces_asset WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(CONCAT(`path`,filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    OR\n                (SELECT `view` FROM users_workspaces_asset WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(`path`,filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n            )';\n        }\n\n        $childrenList->setCondition($condition, $childrenList->escapeLike($asset->getRealFullPath()) . '/%');\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $childrenList,\n            'context' => [],\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n        /** @var \\Pimcore\\Model\\Asset\\Listing $childrenList */\n        $childrenList = $beforeListLoadEvent->getArgument('list');\n\n        return $childrenList->loadIdList();\n    }\n\n    /**\n     * @return int[]\n     */\n    private function getSubDocumentIds(\\Pimcore\\Model\\Document $document, EventDispatcherInterface $eventDispatcher): array\n    {\n        $childrenList = new \\Pimcore\\Model\\Document\\Listing();\n        $condition = '`path` LIKE ?';\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $condition .= ' AND (\n                (SELECT `view` FROM users_workspaces_document WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(CONCAT(`path`,`key`),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    OR\n                (SELECT `view` FROM users_workspaces_document WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(`path`,`key`))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n            )';\n        }\n\n        $childrenList->setCondition($condition, $childrenList->escapeLike($document->getRealFullPath()) . '/%');\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $childrenList,\n            'context' => [],\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::DOCUMENT_LIST_BEFORE_LIST_LOAD);\n        /** @var \\Pimcore\\Model\\Document\\Listing $childrenList */\n        $childrenList = $beforeListLoadEvent->getArgument('list');\n\n        return $childrenList->loadIdList();\n    }\n\n    /**\n     * @Route(\"/do-batch-assignment\", name=\"pimcore_admin_tags_dobatchassignment\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function doBatchAssignmentAction(Request $request): JsonResponse\n    {\n        $cType = strip_tags($request->get('elementType', ''));\n        $assignedTags = json_decode($request->get('assignedTags'));\n        $elementIds = json_decode($request->get('childrenIds'));\n        $doCleanupTags = $request->get('removeAndApply') == 'true';\n\n        Tag::batchAssignTagsToElement($cType, $elementIds, $assignedTags, $doCleanupTags);\n\n        return $this->adminJson(['success' => true]);\n    }\n}\n"], "fixing_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\AdminEvents;\nuse Pimcore\\Model\\Element\\Tag;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/tags\")\n *\n * @internal\n */\nclass TagsController extends AdminAbstractController\n{\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_tags_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request): JsonResponse\n    {\n        $this->checkPermission('tags_configuration');\n\n        try {\n            $tag = new Tag();\n            $tag->setName(strip_tags($request->get('text', '')));\n            $tag->setParentId((int)$request->get('parentId'));\n            $tag->save();\n\n            return $this->adminJson(['success' => true, 'id' => $tag->getId()]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_tags_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request): JsonResponse\n    {\n        $this->checkPermission('tags_configuration');\n\n        $tag = Tag::getById((int) $request->get('id'));\n        if ($tag) {\n            $tag->delete();\n\n            return $this->adminJson(['success' => true]);\n        } else {\n            throw $this->createNotFoundException('Tag with ID ' . $request->get('id') . ' not found.');\n        }\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_tags_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request): JsonResponse\n    {\n        $this->checkPermission('tags_configuration');\n\n        $tag = Tag::getById((int) $request->get('id'));\n        if ($tag) {\n            $parentId = $request->get('parentId');\n            if ($parentId || $parentId === '0') {\n                $tag->setParentId((int)$parentId);\n            }\n            if ($request->get('text')) {\n                $tag->setName(strip_tags($request->get('text', '')));\n            }\n\n            $tag->save();\n\n            return $this->adminJson(['success' => true]);\n        } else {\n            throw $this->createNotFoundException('Tag with ID ' . $request->get('id') . ' not found.');\n        }\n    }\n\n    /**\n     * @Route(\"/tree-get-children-by-id\", name=\"pimcore_admin_tags_treegetchildrenbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildrenByIdAction(Request $request): JsonResponse\n    {\n        $showSelection = $request->get('showSelection') == 'true';\n        $assignmentCId = (int)$request->get('assignmentCId');\n        $assignmentCType = strip_tags($request->get('assignmentCType', ''));\n\n        $recursiveChildren = false;\n        $assignedTagIds = [];\n        if ($assignmentCId && $assignmentCType) {\n            $assignedTags = Tag::getTagsForElement($assignmentCType, $assignmentCId);\n\n            foreach ($assignedTags as $assignedTag) {\n                $assignedTagIds[$assignedTag->getId()] = $assignedTag;\n            }\n        }\n\n        $tagList = new Tag\\Listing();\n        if ($request->get('node')) {\n            $tagList->setCondition('parentId = ?', (int)$request->get('node'));\n        } else {\n            $tagList->setCondition('ISNULL(parentId) OR parentId = 0');\n        }\n        $tagList->setOrderKey('name');\n\n        if (!empty($request->get('filter'))) {\n            $filterIds = [0];\n            $filterTagList = new Tag\\Listing();\n            $filterTagList->setCondition('LOWER(`name`) LIKE ?', ['%' . $filterTagList->escapeLike(mb_strtolower($request->get('filter'))) . '%']);\n            foreach ($filterTagList->load() as $filterTag) {\n                if ($filterTag->getParentId() === 0) {\n                    $filterIds[] = $filterTag->getId();\n                } else {\n                    $ids = explode('/', $filterTag->getIdPath());\n                    if (isset($ids[1])) {\n                        $filterIds[] = (int)$ids[1];\n                    }\n                }\n            }\n\n            $filterIds = array_unique(array_values($filterIds));\n            $tagList->setCondition('id IN('.implode(',', $filterIds).')');\n            $recursiveChildren = true;\n        }\n\n        $tags = [];\n        foreach ($tagList->load() as $tag) {\n            $tags[] = $this->convertTagToArray($tag, $showSelection, $assignedTagIds, true, $recursiveChildren);\n        }\n\n        return $this->adminJson($tags);\n    }\n\n    protected function convertTagToArray(Tag $tag, bool $showSelection, array $assignedTagIds, bool $loadChildren = false, bool $recursiveChildren = false): array\n    {\n        $tagArray = [\n            'id' => $tag->getId(),\n            'text' => $tag->getName(),\n            'path' => $tag->getNamePath(),\n            'expandable' => $tag->hasChildren(),\n            'leaf' => !$tag->hasChildren(),\n            'iconCls' => 'pimcore_icon_element_tags',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $tag->getId(),\n            ],\n        ];\n\n        if ($showSelection) {\n            $tagArray['checked'] = isset($assignedTagIds[$tag->getId()]);\n        }\n\n        if ($loadChildren) {\n            $children = $tag->getChildren();\n            $loadChildren = $recursiveChildren;\n            foreach ($children as $child) {\n                $tagArray['children'][] = $this->convertTagToArray($child, $showSelection, $assignedTagIds, $loadChildren, $recursiveChildren);\n            }\n        }\n\n        return $tagArray;\n    }\n\n    /**\n     * @Route(\"/load-tags-for-element\", name=\"pimcore_admin_tags_loadtagsforelement\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function loadTagsForElementAction(Request $request): JsonResponse\n    {\n        $assginmentCId = (int)$request->get('assignmentCId');\n        $assginmentCType = strip_tags($request->get('assignmentCType', ''));\n\n        $assignedTagArray = [];\n        if ($assginmentCId && $assginmentCType) {\n            $assignedTags = Tag::getTagsForElement($assginmentCType, $assginmentCId);\n\n            foreach ($assignedTags as $assignedTag) {\n                $assignedTagArray[] = $this->convertTagToArray($assignedTag, false, []);\n            }\n        }\n\n        return $this->adminJson($assignedTagArray);\n    }\n\n    /**\n     * @Route(\"/add-tag-to-element\", name=\"pimcore_admin_tags_addtagtoelement\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addTagToElementAction(Request $request): JsonResponse\n    {\n        $assginmentCId = (int)$request->get('assignmentElementId');\n        $assginmentCType = strip_tags($request->get('assignmentElementType', ''));\n        $tagId = (int)$request->get('tagId');\n\n        $tag = Tag::getById($tagId);\n        if ($tag) {\n            Tag::addTagToElement($assginmentCType, $assginmentCId, $tag);\n\n            return $this->adminJson(['success' => true, 'id' => $tag->getId()]);\n        } else {\n            return $this->adminJson(['success' => false]);\n        }\n    }\n\n    /**\n     * @Route(\"/remove-tag-from-element\", name=\"pimcore_admin_tags_removetagfromelement\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function removeTagFromElementAction(Request $request): JsonResponse\n    {\n        $assginmentCId = (int)$request->get('assignmentElementId');\n        $assginmentCType = strip_tags($request->get('assignmentElementType', ''));\n        $tagId = (int)$request->get('tagId');\n\n        $tag = Tag::getById($tagId);\n        if ($tag) {\n            Tag::removeTagFromElement($assginmentCType, $assginmentCId, $tag);\n\n            return $this->adminJson(['success' => true, 'id' => $tag->getId()]);\n        } else {\n            return $this->adminJson(['success' => false]);\n        }\n    }\n\n    /**\n     * @Route(\"/get-batch-assignment-jobs\", name=\"pimcore_admin_tags_getbatchassignmentjobs\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function getBatchAssignmentJobsAction(Request $request, EventDispatcherInterface $eventDispatcher): JsonResponse\n    {\n        $elementId = (int)$request->get('elementId');\n        $elementType = strip_tags($request->get('elementType', ''));\n\n        $idList = [];\n        switch ($elementType) {\n            case 'object':\n                $object = \\Pimcore\\Model\\DataObject::getById($elementId);\n                if ($object) {\n                    $idList = $this->getSubObjectIds($object, $eventDispatcher);\n                }\n\n                break;\n            case 'asset':\n                $asset = \\Pimcore\\Model\\Asset::getById($elementId);\n                if ($asset) {\n                    $idList = $this->getSubAssetIds($asset, $eventDispatcher);\n                }\n\n                break;\n            case 'document':\n                $document = \\Pimcore\\Model\\Document::getById($elementId);\n                if ($document) {\n                    $idList = $this->getSubDocumentIds($document, $eventDispatcher);\n                }\n\n                break;\n        }\n\n        $size = 2;\n        $offset = 0;\n        $idListParts = [];\n        while ($offset < count($idList)) {\n            $idListParts[] = array_slice($idList, $offset, $size);\n            $offset += $size;\n        }\n\n        return $this->adminJson(['success' => true, 'idLists' => $idListParts, 'totalCount' => count($idList)]);\n    }\n\n    /**\n     * @return int[]\n     */\n    private function getSubObjectIds(\\Pimcore\\Model\\DataObject\\AbstractObject $object, EventDispatcherInterface $eventDispatcher): array\n    {\n        $childrenList = new \\Pimcore\\Model\\DataObject\\Listing();\n        $condition = '`path` LIKE ?';\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $condition .= ' AND (\n                (SELECT `view` FROM users_workspaces_object WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(CONCAT(`path`,`key`),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    OR\n                (SELECT `view` FROM users_workspaces_object WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(`path`,`key`))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n             )';\n        }\n\n        $childrenList->setCondition($condition, $childrenList->escapeLike($object->getRealFullPath()) . '/%');\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $childrenList,\n            'context' => [],\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::OBJECT_LIST_BEFORE_LIST_LOAD);\n        /** @var \\Pimcore\\Model\\DataObject\\Listing $childrenList */\n        $childrenList = $beforeListLoadEvent->getArgument('list');\n\n        return $childrenList->loadIdList();\n    }\n\n    /**\n     * @return int[]\n     */\n    private function getSubAssetIds(\\Pimcore\\Model\\Asset $asset, EventDispatcherInterface $eventDispatcher): array\n    {\n        $childrenList = new \\Pimcore\\Model\\Asset\\Listing();\n        $condition = '`path` LIKE ?';\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $condition .= ' AND (\n                (SELECT `view` FROM users_workspaces_asset WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(CONCAT(`path`,filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    OR\n                (SELECT `view` FROM users_workspaces_asset WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(`path`,filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n            )';\n        }\n\n        $childrenList->setCondition($condition, $childrenList->escapeLike($asset->getRealFullPath()) . '/%');\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $childrenList,\n            'context' => [],\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n        /** @var \\Pimcore\\Model\\Asset\\Listing $childrenList */\n        $childrenList = $beforeListLoadEvent->getArgument('list');\n\n        return $childrenList->loadIdList();\n    }\n\n    /**\n     * @return int[]\n     */\n    private function getSubDocumentIds(\\Pimcore\\Model\\Document $document, EventDispatcherInterface $eventDispatcher): array\n    {\n        $childrenList = new \\Pimcore\\Model\\Document\\Listing();\n        $condition = '`path` LIKE ?';\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $condition .= ' AND (\n                (SELECT `view` FROM users_workspaces_document WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(CONCAT(`path`,`key`),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    OR\n                (SELECT `view` FROM users_workspaces_document WHERE userId IN (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(`path`,`key`))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n            )';\n        }\n\n        $childrenList->setCondition($condition, $childrenList->escapeLike($document->getRealFullPath()) . '/%');\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $childrenList,\n            'context' => [],\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::DOCUMENT_LIST_BEFORE_LIST_LOAD);\n        /** @var \\Pimcore\\Model\\Document\\Listing $childrenList */\n        $childrenList = $beforeListLoadEvent->getArgument('list');\n\n        return $childrenList->loadIdList();\n    }\n\n    /**\n     * @Route(\"/do-batch-assignment\", name=\"pimcore_admin_tags_dobatchassignment\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function doBatchAssignmentAction(Request $request): JsonResponse\n    {\n        $cType = strip_tags($request->get('elementType', ''));\n        $assignedTags = json_decode($request->get('assignedTags'));\n        $elementIds = json_decode($request->get('childrenIds'));\n        $doCleanupTags = $request->get('removeAndApply') == 'true';\n\n        Tag::batchAssignTagsToElement($cType, $elementIds, $assignedTags, $doCleanupTags);\n\n        return $this->adminJson(['success' => true]);\n    }\n}\n"], "filenames": ["src/Controller/Admin/TagsController.php"], "buggy_code_start_loc": [43], "buggy_code_end_loc": [87], "fixing_code_start_loc": [44], "fixing_code_end_loc": [94], "type": "CWE-862", "message": "Pimcore's Admin Classic Bundle provides a backend user interface for Pimcore. Prior to version 1.3.3, an attacker can create, delete etc. tags without having the permission to do so. A fix is available in version 1.3.3. As a workaround, one may apply the patch manually.", "other": {"cve": {"id": "CVE-2024-24822", "sourceIdentifier": "security-advisories@github.com", "published": "2024-02-07T18:15:54.147", "lastModified": "2024-02-15T15:43:07.647", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore's Admin Classic Bundle provides a backend user interface for Pimcore. Prior to version 1.3.3, an attacker can create, delete etc. tags without having the permission to do so. A fix is available in version 1.3.3. As a workaround, one may apply the patch manually."}, {"lang": "es", "value": "El paquete Admin Classic de Pimcore proporciona una interfaz de usuario backend para Pimcore. Antes de la versi\u00f3n 1.3.3, un atacante pod\u00eda crear, eliminar, etc. etiquetas sin tener permiso para hacerlo. Hay una soluci\u00f3n disponible en la versi\u00f3n 1.3.3. Como workaround, se puede aplicar el parche manualmente."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:admin_classic_bundle:*:*:*:*:*:pimcore:*:*", "versionEndExcluding": "1.3.3", "matchCriteriaId": "23018350-7CBD-4A0F-8FC3-7591E52971B0"}]}]}], "references": [{"url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/24660b6d5ad9cbcb037a48d4309a6024e9adf251", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/admin-ui-classic-bundle/pull/412", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/admin-ui-classic-bundle/security/advisories/GHSA-3rfr-mpfj-2jwq", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/24660b6d5ad9cbcb037a48d4309a6024e9adf251"}}