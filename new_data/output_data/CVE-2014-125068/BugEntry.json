{"buggy_code": ["var http = require('http');\nvar fs = require('fs');\n\nfs.exists = fs.exists || require('path').exists;\n\nvar SERVER_PORT = 8080;\n\nvar FILE_TYPE_GZIP = 1;\n\nvar FILE_EXT_GZIP = '.gz';\nvar FILE_EXT_CSS = '.css';\nvar FILE_EXT_JS = '.js';\n\n// GZIP text/plain required to get Chrome XHR to decompress file.\nvar MIME_TYPE_GZIP = 'text/plain';\nvar MIME_TYPE_JS = 'text/javascript';\nvar MIME_TYPE_CSS = 'text/css';\n\nfunction log(code, string) {\n  //console.log('[' + code + '] ' + string);\n}\n\nvar server = http.createServer(function(request, response) {\n  var filePath = request.url;\n\n  // Remove query strings from uri\n  if (filePath.indexOf('?') > -1) {\n    filePath = filePath.substr(0, filePath.indexOf('?'));\n  }\n\n  filePath = '.' + filePath;\n\n  fs.exists(filePath, function(exists) {\n    if (!exists) {\n      log(404, filePath)\n      response.writeHead(404);\n      response.end();\n\n      return;\n    }\n\n    var mimeType = '';\n    var fileType = -1;\n\n    if (filePath.substring(filePath.length - FILE_EXT_GZIP.length) == FILE_EXT_GZIP) {\n      fileType = FILE_TYPE_GZIP;\n      mimeType = MIME_TYPE_GZIP;\n    } else if (filePath.substring(filePath.length - FILE_EXT_JS.length) == FILE_EXT_JS) {\n      mimeType = MIME_TYPE_JS;\n    } else if (filePath.substring(filePath.length - FILE_EXT_CSS.length) == FILE_EXT_CSS) {\n      mimeType = MIME_TYPE_CSS;\n    }\n\n    var acceptEncoding = request.headers['accept-encoding'];\n    if (!acceptEncoding) {\n      acceptEncoding = '';\n    }\n\n    fs.readFile(filePath, function(error, content) {\n      if (error) {\n        log(500, filePath);\n        response.writeHead(500);\n        response.end();\n      } else {\n        log(200, filePath);\n        var raw = fs.createReadStream(filePath);\n\n        if (fileType == FILE_TYPE_GZIP && acceptEncoding.match(/\\bgzip\\b/)) {\n          response.writeHead(200, { 'Content-Type': 'text/plain', 'Content-Encoding': 'gzip' });\n        } else if (mimeType) {\n          response.writeHead(200, { 'Content-Type': mimeType });\n        } else {\n          response.writeHead(200, {});\n        }\n\n        raw.pipe(response);\n      }\n    });\n  });\n});\n\nserver.on('error', function (e) {\n  if (e.code == 'EADDRINUSE') {\n    console.log('Port ' + SERVER_PORT + ' already in use.');\n  }\n});\n\nserver.listen(SERVER_PORT);\nconsole.log('Server listening on port ' + SERVER_PORT);\n"], "fixing_code": ["var http = require('http');\nvar fs = require('fs');\nvar path = require('path');\n\nfs.exists = fs.exists || require('path').exists;\n\nvar SERVER_PORT = 8080;\n\nvar FILE_TYPE_GZIP = 1;\n\nvar FILE_EXT_GZIP = '.gz';\nvar FILE_EXT_CSS = '.css';\nvar FILE_EXT_JS = '.js';\n\n// GZIP text/plain required to get Chrome XHR to decompress file.\nvar MIME_TYPE_GZIP = 'text/plain';\nvar MIME_TYPE_JS = 'text/javascript';\nvar MIME_TYPE_CSS = 'text/css';\n\nfunction log(code, string) {\n//  console.log('[' + code + '] ' + string);\n}\n\nvar server = http.createServer(function(request, response) {\n  var filePath = request.url;\n\n  // Remove query strings from uri\n  if (filePath.indexOf('?') > -1) {\n    filePath = filePath.substr(0, filePath.indexOf('?'));\n  }\n\n  // Get the absolute path for the request\n  filePath = path.resolve('.' + filePath);\n\n  // Rejesct queries ouside of the server root\n  var serverPath = path.resolve('.');\n  if (filePath.indexOf(serverPath) != 0 ) {\n    log(403, filePath);\n    response.writeHeader(403);\n    response.end();\n\n    return;\n  }\n\n  fs.exists(filePath, function(exists) {\n    if (!exists) {\n      log(404, filePath);\n      response.writeHead(404);\n      response.end();\n\n      return;\n    }\n\n    // Return index.html if directroy requested.\n    if (fs.statSync(filePath).isDirectory()) {\n      filePath += '/index.html';\n    }\n\n    var mimeType = '';\n    var fileType = -1;\n\n    if (filePath.substring(filePath.length - FILE_EXT_GZIP.length) == FILE_EXT_GZIP) {\n      fileType = FILE_TYPE_GZIP;\n      mimeType = MIME_TYPE_GZIP;\n    } else if (filePath.substring(filePath.length - FILE_EXT_JS.length) == FILE_EXT_JS) {\n      mimeType = MIME_TYPE_JS;\n    } else if (filePath.substring(filePath.length - FILE_EXT_CSS.length) == FILE_EXT_CSS) {\n      mimeType = MIME_TYPE_CSS;\n    }\n\n    var acceptEncoding = request.headers['accept-encoding'];\n    if (!acceptEncoding) {\n      acceptEncoding = '';\n    }\n\n    fs.readFile(filePath, function(error, content) {\n      if (error) {\n        log(500, filePath);\n        response.writeHead(500);\n        response.end();\n      } else {\n        log(200, filePath);\n        var raw = fs.createReadStream(filePath);\n\n        if (fileType == FILE_TYPE_GZIP && acceptEncoding.match(/\\bgzip\\b/)) {\n          response.writeHead(200, { 'Content-Type': 'text/plain', 'Content-Encoding': 'gzip' });\n        } else if (mimeType) {\n          response.writeHead(200, { 'Content-Type': mimeType });\n        } else {\n          response.writeHead(200, {});\n        }\n\n        raw.pipe(response);\n      }\n    });\n  });\n});\n\nserver.on('error', function (e) {\n  if (e.code == 'EADDRINUSE') {\n    console.log('Port ' + SERVER_PORT + ' already in use.');\n  }\n});\n\nserver.listen(SERVER_PORT);\nconsole.log('Server listening on port ' + SERVER_PORT);\n"], "filenames": ["http-server.js"], "buggy_code_start_loc": [2], "buggy_code_end_loc": [39], "fixing_code_start_loc": [3], "fixing_code_end_loc": [57], "type": "CWE-22", "message": "A vulnerability was found in saxman maps-js-icoads and classified as critical. This issue affects some unknown processing of the file http-server.js. The manipulation leads to path traversal. The name of the patch is 34b8b0cce2807b119f4cffda2ac48fc8f427d69a. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217643.", "other": {"cve": {"id": "CVE-2014-125068", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-08T11:15:09.917", "lastModified": "2023-01-12T16:48:03.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in saxman maps-js-icoads and classified as critical. This issue affects some unknown processing of the file http-server.js. The manipulation leads to path traversal. The name of the patch is 34b8b0cce2807b119f4cffda2ac48fc8f427d69a. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217643."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:maps-js-icoads_project:maps-js-icoads:*:*:*:*:*:*:*:*", "versionEndExcluding": "09-02-2014", "matchCriteriaId": "59C94DDF-A874-499D-A89D-2A8D7E062E55"}]}]}], "references": [{"url": "https://github.com/saxman/maps-js-icoads/commit/34b8b0cce2807b119f4cffda2ac48fc8f427d69a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217643", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217643", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/saxman/maps-js-icoads/commit/34b8b0cce2807b119f4cffda2ac48fc8f427d69a"}}