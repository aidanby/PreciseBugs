{"buggy_code": ["try {\n    var _serverTime;\n    var _serverDBTime;\n    var _serverTimeString;\n    var _serverDBTimeString;\n    var _serverTimezone;\n    var _serverDBTimezone;\n    var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    var modal;\n    var player;\n    var floatLeft = \"\";\n    var floatTop = \"\";\n    var floatWidth = \"\";\n    var floatHeight = \"\";\n    var changingVideoFloat = 0;\n    var floatClosed = 0;\n    var fullDuration = 0;\n    var isPlayingAd = false;\n    var mainVideoHeight = 0;\n    var mouseX;\n    var mouseY;\n    var videoContainerDragged = false;\n    var youTubeMenuIsOpened = false;\n    var userIsControling = false;\n    var playerCurrentTime;\n    var mediaId;\n    var isDebuging = false;\n    var avideoIsOnline = false;\n    var userLang = navigator.language || navigator.userLanguage;\n    var iframeAllowAttributes = 'allow=\"fullscreen;autoplay;camera *;microphone *;\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" msallowfullscreen=\"msallowfullscreen\" oallowfullscreen=\"oallowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\"';\n\n    // Create browser compatible event handler.\n    var eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";\n    var eventer = window[eventMethod];\n    var messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";\n    // Listen for a message from the iframe.\n    eventer(messageEvent, function (e) {\n        ////console.log('EventListener', e.data);\n        if (e.data.getHeight) {\n            var height = $('body > div.container-fluid').height();\n            if (!height) {\n                height = $('body > div.container').height();\n            }\n            if (!height) {\n                height = $('body').height();\n            }\n            parent.postMessage({height: height}, '*');\n        }else if (e.data.play) {\n            var currentTime = e.data.play.currentTime;\n            var muted = !empty(e.data.play.muted);\n            if(!muted){\n                playerPlay(currentTime);\n            }else{\n                tryToPlayMuted(currentTime);\n            }\n        }\n    }, false);\n\n    eventer(\"online\", function (e) {\n        avideoToastSuccess(\"Connected\");\n        setBodyOnline();\n    }, false);\n\n    eventer(\"offline\", function (e) {\n        avideoToastError(\"Disconnected\");\n        setBodyOnline();\n    }, false);\n\n    setBodyOnline();\n} catch (e) {\n    //console.log('Variable declaration ERROR', e);\n}\n\nvar queryString = window.location.search;\nvar urlParams = new URLSearchParams(queryString);\n\nif (urlParams.has('debug')) {\n    isDebuging = false;\n}\n\nfunction escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nif (typeof String.prototype.replaceAll === \"undefined\") {\n    console.log('replaceAll is undefined');\n    String.prototype.replaceAll = function (match, _replace) {\n        return this.replace(new RegExp(escapeRegExp(match), 'g'), _replace);\n    }\n}\n\nasync function setBodyOnline() {\n    if (isOnline()) {\n        $('body').removeClass('isOffline');\n        $('body').addClass('isOnline');\n    } else {\n        $('body').removeClass('isOnline');\n        $('body').addClass('isOffline');\n    }\n}\n\nfunction consolelog() {\n    if (isDebuging) {\n        for (var item in arguments) {\n            console.log(arguments[item]);\n        }\n    }\n}\n\nfunction consoleLog() {\n    return consolelog();\n}\n\n$(document).mousemove(function (e) {\n    mouseX = e.pageX;\n    mouseY = e.pageY;\n});\nString.prototype.stripAccents = function () {\n    var returnvar = this.replace(/[\u00e1\u00e0\u00e2\u00e3\u00aa\u00e4\u0105]/g, 'a');\n    returnvar = returnvar.replace(/[\u00c1\u00c0\u00c2\u00c3\u00c4\u0104]/g, 'A');\n    returnvar = returnvar.replace(/[\u00cd\u00cc\u00ce\u00cf]/g, 'I');\n    returnvar = returnvar.replace(/[\u00ed\u00ec\u00ee\u00ef]/g, 'i');\n    returnvar = returnvar.replace(/[\u00e9\u00e8\u00ea\u00eb\u0119]/g, 'e');\n    returnvar = returnvar.replace(/[\u00c9\u00c8\u00ca\u00cb\u0118]/g, 'E');\n    returnvar = returnvar.replace(/[\u00f3\u00f2\u00f4\u00f5\u00ba\u00f6]/g, 'o');\n    returnvar = returnvar.replace(/[\u00d3\u00d2\u00d4\u00d5\u00d6]/g, 'O');\n    returnvar = returnvar.replace(/[\u00fa\u00f9\u00fb\u00fc]/g, 'u');\n    returnvar = returnvar.replace(/[\u00da\u00d9\u00db\u00dc]/g, 'U');\n    returnvar = returnvar.replace(/[\u00e7\u0107]/g, 'c');\n    returnvar = returnvar.replace(/[\u00c7\u0106]/g, 'C');\n    returnvar = returnvar.replace(/[\u00f1\u0144]/g, 'n');\n    returnvar = returnvar.replace(/[\u00d1\u0143]/g, 'N');\n    returnvar = returnvar.replace(/\u2013/g, '-');\n    returnvar = returnvar.replace(/[\u2019\u2018\u2039\u203a\u201a]/g, ' ');\n    returnvar = returnvar.replace(/[\u201c\u201d\u00ab\u00bb\u201e]/g, ' ');\n    returnvar = returnvar.replace(/\u0404/g, 'YE');\n    returnvar = returnvar.replace(/\u0406/g, 'I');\n    returnvar = returnvar.replace(/\u0403/g, 'G');\n    returnvar = returnvar.replace(/\u0456/g, 'i');\n    returnvar = returnvar.replace(/\u2116/g, '#');\n    returnvar = returnvar.replace(/\u0454/g, 'ye');\n    returnvar = returnvar.replace(/\u0453/g, 'g');\n    returnvar = returnvar.replace(/\u0410/g, 'A');\n    returnvar = returnvar.replace(/\u0411/g, 'B');\n    returnvar = returnvar.replace(/\u0412/g, 'V');\n    returnvar = returnvar.replace(/\u0413/g, 'G');\n    returnvar = returnvar.replace(/\u0414/g, 'D');\n    returnvar = returnvar.replace(/\u0415/g, 'E');\n    returnvar = returnvar.replace(/\u0401/g, 'YO');\n    returnvar = returnvar.replace(/\u0416/g, 'ZH');\n    returnvar = returnvar.replace(/[\u0417\u017b\u0179]/g, 'Z');\n    returnvar = returnvar.replace(/\u0418/g, 'I');\n    returnvar = returnvar.replace(/\u0419/g, 'J');\n    returnvar = returnvar.replace(/\u041a/g, 'K');\n    returnvar = returnvar.replace(/[\u041b\u0141]/g, 'L');\n    returnvar = returnvar.replace(/\u041c/g, 'M');\n    returnvar = returnvar.replace(/\u041d/g, 'N');\n    returnvar = returnvar.replace(/\u041e/g, 'O');\n    returnvar = returnvar.replace(/\u041f/g, 'P');\n    returnvar = returnvar.replace(/\u0420/g, 'R');\n    returnvar = returnvar.replace(/[\u0421\u015a]/g, 'S');\n    returnvar = returnvar.replace(/\u0422/g, 'T');\n    returnvar = returnvar.replace(/\u0423/g, 'U');\n    returnvar = returnvar.replace(/\u0424/g, 'F');\n    returnvar = returnvar.replace(/\u0425/g, 'H');\n    returnvar = returnvar.replace(/\u0426/g, 'C');\n    returnvar = returnvar.replace(/\u0427/g, 'CH');\n    returnvar = returnvar.replace(/\u0428/g, 'SH');\n    returnvar = returnvar.replace(/\u0429/g, 'SHH');\n    returnvar = returnvar.replace(/\u042a/g, '');\n    returnvar = returnvar.replace(/\u042b/g, 'Y');\n    returnvar = returnvar.replace(/\u042c/g, '');\n    returnvar = returnvar.replace(/\u042d/g, 'E');\n    returnvar = returnvar.replace(/\u042e/g, 'YU');\n    returnvar = returnvar.replace(/\u042f/g, 'YA');\n    returnvar = returnvar.replace(/\u0430/g, 'a');\n    returnvar = returnvar.replace(/\u0431/g, 'b');\n    returnvar = returnvar.replace(/\u0432/g, 'v');\n    returnvar = returnvar.replace(/\u0433/g, 'g');\n    returnvar = returnvar.replace(/\u0434/g, 'd');\n    returnvar = returnvar.replace(/\u0435/g, 'e');\n    returnvar = returnvar.replace(/\u0451/g, 'yo');\n    returnvar = returnvar.replace(/\u0436/g, 'zh');\n    returnvar = returnvar.replace(/[\u0437\u017c\u017a]/g, 'z');\n    returnvar = returnvar.replace(/\u0438/g, 'i');\n    returnvar = returnvar.replace(/\u0439/g, 'j');\n    returnvar = returnvar.replace(/\u043a/g, 'k');\n    returnvar = returnvar.replace(/[\u043b\u0142]/g, 'l');\n    returnvar = returnvar.replace(/\u043c/g, 'm');\n    returnvar = returnvar.replace(/\u043d/g, 'n');\n    returnvar = returnvar.replace(/\u043e/g, 'o');\n    returnvar = returnvar.replace(/\u043f/g, 'p');\n    returnvar = returnvar.replace(/\u0440/g, 'r');\n    returnvar = returnvar.replace(/[\u0441\u015b]/g, 's');\n    returnvar = returnvar.replace(/\u0442/g, 't');\n    returnvar = returnvar.replace(/\u0443/g, 'u');\n    returnvar = returnvar.replace(/\u0444/g, 'f');\n    returnvar = returnvar.replace(/\u0445/g, 'h');\n    returnvar = returnvar.replace(/\u0446/g, 'c');\n    returnvar = returnvar.replace(/\u0447/g, 'ch');\n    returnvar = returnvar.replace(/\u0448/g, 'sh');\n    returnvar = returnvar.replace(/\u0449/g, 'shh');\n    returnvar = returnvar.replace(/\u044a/g, '');\n    returnvar = returnvar.replace(/\u044b/g, 'y');\n    returnvar = returnvar.replace(/\u044c/g, '');\n    returnvar = returnvar.replace(/\u044d/g, 'e');\n    returnvar = returnvar.replace(/\u044e/g, 'yu');\n    returnvar = returnvar.replace(/\u044f/g, 'ya');\n    returnvar = returnvar.replace(/\u2014/g, '-');\n    returnvar = returnvar.replace(/\u00ab/g, '');\n    returnvar = returnvar.replace(/\u00bb/g, '');\n    returnvar = returnvar.replace(/\u2026/g, '');\n    return returnvar;\n};\nfunction clean_name(str) {\n\n    str = str.stripAccents().toLowerCase();\n    return str.replace(/[!#$&'()*+,/:;=?@[\\] ]+/g, \"-\");\n}\n\nvar processing_lazyImage = false;\nasync function lazyImage() {\n    if (processing_lazyImage) {\n        return false;\n    }\n    processing_lazyImage = true;\n    try {\n        if ($(\".thumbsJPG\").length) {\n            $('.thumbsJPG').lazy({\n                effect: 'fadeIn',\n                visibleOnly: true,\n                // called after an element was successfully handled\n                afterLoad: function (element) {\n\n                    element.addClass('gifNotLoaded');\n                    element.removeClass('blur');\n                    element.mouseover(function () {\n\n                        if ($(this).hasClass('gifNotLoaded')) {\n                            var element = $(this);\n                            element.removeClass('gifNotLoaded');\n                            var gif = element.parent().find('.thumbsGIF');\n                            gif.lazy({\n                                effect: 'fadeIn'\n                            });\n                            /*\n                             gif.addClass('animate__animated');\n                             gif.addClass('animate__bounceIn');\n                             gif.css('-webkit-animation-delay', step+\"s\");\n                             gif.css('animation-delay', \"1s\");\n                             */\n\n                            gif.height(element.height());\n                            gif.width(element.width());\n                            ////console.log('lazyImage', gif);\n                        }\n\n                        $(\"#log\").append(\"<div>Handler for .mouseover() called.</div>\");\n                    });\n                }\n            });\n            mouseEffect();\n        }\n    } catch (e) {\n    }\n    processing_lazyImage = false;\n}\n\nvar pauseIfIsPlayinAdsInterval;\nvar seconds_watching_video = 0;\nvar _startCountPlayingTime;\nasync function setPlayerListners() {\n    if (typeof player !== 'undefined') {\n        player.on('pause', function () {\n            clearTimeout(promisePlayTimeout);\n            //console.log(\"setPlayerListners: pause\");\n            //userIsControling = true;\n            clearInterval(pauseIfIsPlayinAdsInterval);\n            clearInterval(_startCountPlayingTime);\n        });\n        player.on('play', function () {\n            isTryingToPlay = false;\n            clearTimeout(promisePlayTimeout);\n            if (startCurrentTime) {\n                setTimeout(function () {\n                    setCurrentTime(startCurrentTime);\n                    startCurrentTime = 0;\n                }, 100);\n            }\n            //console.log(\"setPlayerListners: play\");\n            //userIsControling = true;\n            pauseIfIsPlayinAdsInterval = setInterval(function () {\n                pauseIfIsPlayinAds();\n            }, 500);\n            clearInterval(_startCountPlayingTime);\n            _startCountPlayingTime = setInterval(function () {\n                seconds_watching_video++;\n            }, 1000);\n        });\n        $(\"#mainVideo .vjs-mute-control\").click(function () {\n            Cookies.set('muted', player.muted(), {\n                path: '/',\n                expires: 365\n            });\n        });\n    } else {\n        setTimeout(function () {\n            setPlayerListners();\n        }, 2000);\n    }\n}\n\nfunction removeTracks() {\n    var oldTracks = player.remoteTextTracks();\n    var i = oldTracks.length;\n    while (i--) {\n        player.removeRemoteTextTrack(oldTracks[i]);\n    }\n}\n\nfunction changeVideoSrc(vid_obj, source) {\n    var srcs = [];\n    removeTracks();\n    var autoLoad = true;\n    for (i = 0; i < source.length; i++) {\n        if (source[i].type) {\n            if (source[i].type === \"application/x-mpegURL\") {\n                // it is HLS cancel it\n                //return false;\n                autoLoad = false;\n            }\n            srcs.push(source[i]);\n        } else if (source[i].srclang) {\n            player.addRemoteTextTrack(source[i]);\n        }\n    }\n    //console.log('changeVideoSrc srcs', srcs);\n    vid_obj.src(srcs);\n    setTimeout(function () {\n        if (autoLoad) {\n            changeVideoSrcLoad();\n        } else {\n            player.play();\n        }\n    }, 1000);\n    return true;\n}\n\nfunction changeVideoSrcLoad() {\n    //console.log(\"changeVideoSrcLoad: Try to load player\");\n    player.load();\n    player.ready(function () {\n        //console.log(\"changeVideoSrcLoad: Player ready\");\n        var err = this.error();\n        if (err && err.code) {\n            //console.log(\"changeVideoSrcLoad: Load player Error\");\n            setTimeout(function () {\n                changeVideoSrcLoad();\n            }, 1000);\n        } else {\n            //console.log(\"changeVideoSrcLoad: Load player Success, Play\");\n            setTimeout(function () {\n                player.load();\n                //console.log(\"changeVideoSrcLoad: Trying to play\");\n                player.play();\n            }, 1000);\n        }\n    });\n}\nvar _reloadAdsTimeout;\nvar isReloadingAds = false;\nfunction reloadAds() {\n    if (isReloadingAds) {\n        return false;\n    }\n    isReloadingAds = true;\n    setTimeout(function () {\n        isReloadingAds = false;\n    }, 500);\n    clearTimeout(_reloadAdsTimeout);\n    //console.log('reloadAds ');\n    if (playerIsReady() && player.ima) {\n        try {\n            //console.log('reloadAds player.ima.getAdsManager()', player.ima.getAdsManager());\n            if (player.ima.getAdsManager()) {\n                player.ima.requestAds();\n            }\n            player.ima.changeAdTag(null);\n            player.ima.setContentWithAdTag(null, _adTagUrl, false);\n            player.ima.changeAdTag(_adTagUrl);\n            setTimeout(function () {\n                player.ima.requestAds();\n                //console.log('reloadAds done');\n            }, 2000);\n            player.ima.requestAds();\n        } catch (e) {\n            //console.log('reloadAds ERROR', e.message);\n        }\n    } else {\n        _reloadAdsTimeout = setTimeout(function () {\n            reloadAds();\n        }, 200);\n    }\n}\n\nfunction validateEmail(email) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nfunction isEmailValid(email) {\n    return validateEmail(email);\n}\n\nfunction subscribe(email, user_id) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: webSiteRootURL + 'objects/subscribe.json.php',\n        method: 'POST',\n        data: {\n            'email': email,\n            'user_id': user_id\n        },\n        success: function (response) {\n            var totalElement = $('.notificationButton' + user_id + ' .badge');\n            if (response.subscribe == \"i\") {\n                $('.notificationButton' + user_id).removeClass(\"subscribed\");\n                totalElement.text(parseInt(totalElement.first().text()) - 1);\n            } else {\n                $('.notificationButton' + user_id).addClass(\"subscribed\");\n                totalElement.text(parseInt(totalElement.first().text()) + 1);\n            }\n            if (!response.notify) {\n                $('.notificationButton' + user_id).removeClass(\"notify\");\n            } else {\n                $('.notificationButton' + user_id).addClass(\"notify\");\n            }\n            $('#popover-content #subscribeEmail').val(email);\n            $('.subscribeButton' + user_id).popover('hide');\n            modal.hidePleaseWait();\n        }\n    });\n}\n\nfunction toogleNotify(user_id) {\n    email = $('#subscribeEmail' + user_id).val();\n    subscribeNotify(email, user_id);\n}\nfunction subscribeNotify(email, user_id) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: webSiteRootURL + 'objects/subscribeNotify.json.php',\n        method: 'POST',\n        data: {\n            'email': email,\n            'user_id': user_id\n        },\n        success: function (response) {\n            if (response.notify) {\n                $('.notificationButton' + user_id).addClass(\"notify\");\n            } else {\n                $('.notificationButton' + user_id).removeClass(\"notify\");\n            }\n            modal.hidePleaseWait();\n        }\n    });\n}\nasync function mouseEffect() {\n    $(\".thumbsImage\").on(\"mouseenter\", function () {\n        var gif = $(this).find(\".thumbsGIF\");\n        var jpg = $(this).find(\".thumbsJPG\");\n        try {\n            gif.lazy({effect: 'fadeIn'});\n            setTimeout(function () {\n                gif.height(jpg.height());\n                gif.width(jpg.width());\n            }, 100);\n        } catch (e) {\n        }\n        gif.height(jpg.height());\n        gif.width(jpg.width());\n        gif.stop(true, true).fadeIn();\n    });\n    $(\".thumbsImage\").on(\"mouseleave\", function () {\n        $(this).find(\".thumbsGIF\").stop(true, true).fadeOut();\n    });\n}\n\nfunction isMobile() {\n    var check = false;\n    (function (a) {\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)))\n            check = true\n    })(navigator.userAgent || navigator.vendor || window.opera);\n    return check;\n}\n\nvar last_videos_id = 0;\nvar last_currentTime = -1;\nvar videoViewAdded = false;\nvar addViewBeaconTimeout;\nvar _addViewCheck = false;\nfunction addView(videos_id, currentTime) {\n    addViewSetCookie(PHPSESSID, videos_id, currentTime, seconds_watching_video);\n    if (_addViewCheck) {\n        return false;\n    }\n    if (last_videos_id == videos_id && last_currentTime == currentTime) {\n        return false;\n    }\n    if (currentTime > 5 && currentTime % 30 !== 0) { // only update each 30 seconds\n        return false;\n    }\n    _addViewCheck = true;\n    last_videos_id = videos_id;\n    last_currentTime = currentTime;\n    _addView(videos_id, currentTime, seconds_watching_video);\n    setTimeout(function () {\n        _addViewCheck = false\n    }, 1000);\n    return true;\n}\n\nfunction _addView(videos_id, currentTime, seconds_watching_video) {\n    if (typeof PHPSESSID == 'undefined') {\n        PHPSESSID = '';\n    }\n    var url = webSiteRootURL + 'objects/videoAddViewCount.json.php';\n    if (empty(PHPSESSID)) {\n        return false;\n    }\n    url = addGetParam(url, 'PHPSESSID', PHPSESSID);\n    //console.log('_addView', videos_id, currentTime);\n    $.ajax({\n        url: url,\n        method: 'POST',\n        data: {\n            id: videos_id,\n            currentTime: currentTime,\n            seconds_watching_video: seconds_watching_video\n        },\n        success: function (response) {\n            $('.view-count' + videos_id).text(response.countHTML);\n        }\n    });\n}\n\nvar _addViewAsyncSent = false;\nfunction _addViewAsync() {\n    if (_addViewAsyncSent || typeof webSiteRootURL == 'undefined' || typeof player == 'undefined') {\n        return false;\n    }\n    if (typeof PHPSESSID == 'undefined') {\n        PHPSESSID = '';\n    }\n    //console.log('_addViewAsync', mediaId, playerCurrentTime);\n    var url = webSiteRootURL + 'objects/videoAddViewCount.json.php';\n    url = addGetParam(url, 'PHPSESSID', PHPSESSID);\n    _addViewAsyncSent = true;\n    _addView(mediaId, playerCurrentTime, seconds_watching_video);\n    setTimeout(function () {\n        _addViewAsyncSent = false;\n    }, 2000);\n}\n\nvar _addViewFromCookie_addingtime = false;\nasync function addViewFromCookie() {\n    if (typeof webSiteRootURL == 'undefined') {\n        return false;\n    }\n    if (_addViewFromCookie_addingtime) {\n        return false;\n    }\n    _addViewFromCookie_addingtime = true;\n    var addView_PHPSESSID = Cookies.get('addView_PHPSESSID');\n    var addView_videos_id = Cookies.get('addView_videos_id');\n    var addView_playerCurrentTime = Cookies.get('addView_playerCurrentTime');\n    var addView_seconds_watching_video = Cookies.get('addView_seconds_watching_video');\n    if (!addView_PHPSESSID || addView_PHPSESSID === 'false' ||\n            !addView_videos_id || addView_videos_id === 'false' ||\n            !addView_playerCurrentTime || addView_playerCurrentTime === 'false' ||\n            !addView_seconds_watching_video || addView_seconds_watching_video === 'false') {\n        return false;\n    }\n    //console.log('addViewFromCookie', addView_videos_id, addView_playerCurrentTime, addView_seconds_watching_video);\n    var url = webSiteRootURL + 'objects/videoAddViewCount.json.php';\n    url = addGetParam(url, 'PHPSESSID', addView_PHPSESSID);\n    if (mediaId == addView_videos_id) {\n        // it is the same video, play at the last moment\n        forceCurrentTime = addView_playerCurrentTime;\n    }\n\n    _addView(addView_videos_id, addView_playerCurrentTime, addView_seconds_watching_video)\n    setTimeout(function () {\n        _addViewFromCookie_addingtime = false;\n    }, 2000);\n    addViewSetCookie(false, false, false, false);\n\n}\n\nasync function addViewSetCookie(PHPSESSID, videos_id, playerCurrentTime, seconds_watching_video) {\n    ////console.log('addViewSetCookie', videos_id, playerCurrentTime, seconds_watching_video, new Error().stack);\n    Cookies.set('addView_PHPSESSID', PHPSESSID, {\n        path: '/',\n        expires: 1\n    });\n    Cookies.set('addView_videos_id', videos_id, {\n        path: '/',\n        expires: 1\n    });\n    Cookies.set('addView_playerCurrentTime', playerCurrentTime, {\n        path: '/',\n        expires: 1\n    });\n    Cookies.set('addView_seconds_watching_video', seconds_watching_video, {\n        path: '/',\n        expires: 1\n    });\n}\n\nfunction getPlayerButtonIndex(name) {\n    var children = player.getChild('controlBar').children();\n    for (i = 0; i < children.length; i++) {\n        if (children[i].name_ === name) {\n            return i;\n        }\n    }\n    return children.length;\n}\n\nasync function copyToClipboard(text) {\n    $('body').append('<textarea id=\"elementToCopyAvideo\" style=\"filter: alpha(opacity=0);-moz-opacity: 0;-khtml-opacity: 0; opacity: 0;position: absolute;z-index: -9999;top: 0;left: 0;pointer-events: none;\"></textarea>');\n    $('#elementToCopyAvideo').css({'top': mouseY, 'left': 0}).fadeIn('slow');\n    $('#elementToCopyAvideo').val(text);\n    $('#elementToCopyAvideo').focus();\n    $('#elementToCopyAvideo').select();\n    document.execCommand('copy');\n    $('#elementToCopyAvideo').remove();\n    $.toast(\"Copied to Clipboard\");\n}\n\nfunction nl2br(str, is_xhtml) {\n    if (typeof str === 'undefined' || str === null) {\n        return '';\n    }\n    var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';\n    return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + breakTag + '$2');\n}\n\nfunction inMainIframe() {\n    var response = false;\n    if (window.self !== window.top) {\n        try {\n            var mainIframe = $('iframe', window.parent.document).attr('id');\n            response = mainIframe === 'mainIframe';\n        } catch (e) {\n\n        }\n\n    }\n    return response;\n}\n\nfunction inIframe() {\n    if (inMainIframe()) {\n        return false;\n    }\n    var url = new URL(location.href);\n    var avideoIframe = url.searchParams.get(\"avideoIframe\");\n    if (avideoIframe && avideoIframe !== '0' && avideoIframe !== 0) {\n        return true;\n    }\n    try {\n        return window.self !== window.top;\n    } catch (e) {\n        return true;\n    }\n}\n\nfunction playerIsReady() {\n    return (typeof player !== 'undefined' && player.isReady_);\n}\n\nvar promisePlaytry = 20;\nvar promisePlaytryNetworkFail = 0;\nvar promisePlayTimeoutTime = 500;\nvar promisePlayTimeout;\nvar promisePlay;\nvar browserPreventShowed = false;\nvar playerPlayTimeout;\nvar isTryingToPlay = false;\nvar promisePlaytryNetworkFailTimeout;\nfunction playerPlay(currentTime) {\n    isTryingToPlay = true;\n    clearTimeout(playerPlayTimeout);\n    if (playerIsPlayingAds()) {\n        return false;\n    }\n    if (currentTime) {\n        //console.log(\"playerPlay time:\", currentTime);\n    }\n    if (!playerIsReady()) {\n        playerPlayTimeout = setTimeout(function () {\n            playerPlay(currentTime);\n        }, 200);\n        return false;\n    }\n    if (userIsControling) { // stops here if the user already clicked on play or pause\n        //console.log(\"playerPlay: userIsControling\");\n        return true;\n    }\n    if (promisePlaytry <= 0) {\n        //console.log(\"playerPlay: promisePlaytry <= 0\");\n        if (!browserPreventShowed) {\n            browserPreventShowed = true;\n            $.toast(\"Your browser prevent autoplay\");\n        }\n        return false;\n    }\n    promisePlaytry--;\n    if (typeof player !== 'undefined') {\n        if (currentTime) {\n            setCurrentTime(currentTime);\n        }\n        try {\n            //console.log(\"playerPlay: Trying to play\", player);\n            promisePlay = player.play();\n            if (promisePlay !== undefined) {\n                tryToPlay(currentTime);\n                //console.log(\"playerPlay: promise found\", currentTime);\n                setPlayerListners();\n                promisePlay.then(function () {\n                    //console.log(\"playerPlay: Autoplay started\", currentTime);\n                    userIsControling = true;\n                    if (player.paused()) {\n                        //console.log(\"The video still paused, trying to mute and play\");\n                        if (promisePlaytry <= 10) {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") The video still paused, trying to mute and play\");\n                            tryToPlayMuted(currentTime);\n                        } else {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") The video still paused, trying to play again\");\n                            tryToPlay(currentTime);\n                        }\n                    } else {\n                        //player.muted(false);\n                        if (player.muted() && !inIframe()) {\n                            showUnmutePopup();\n                        }\n                    }\n                }).catch(function (error) {\n                    if (player.networkState() === 3 && promisePlaytryNetworkFail < 5) {\n                        promisePlaytry = 20;\n                        promisePlaytryNetworkFail++;\n                        //console.log(\"playerPlay: Network error detected, trying again\", promisePlaytryNetworkFail);\n                        clearTimeout(promisePlaytryNetworkFailTimeout);\n                        promisePlaytryNetworkFailTimeout = setTimeout(function () {\n                            player.src(player.currentSources());\n                            userIsControling = false;\n                            tryToPlay(currentTime);\n                        }, promisePlaytryNetworkFail * 1000);\n                    } else {\n                        if (promisePlaytryNetworkFail >= 5) {\n                            userIsControling = true;\n                            //console.log(\"playerPlay: (promisePlaytryNetworkFail) Autoplay was prevented\");\n                            player.pause();\n                        } else if (promisePlaytry <= 10) {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") Autoplay was prevented, trying to mute and play ***\");\n                            tryToPlayMuted(currentTime);\n                        } else {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") Autoplay was prevented, trying to play again\");\n                            tryToPlay(currentTime);\n                        }\n                    }\n                });\n            } else {\n                tryToPlay(currentTime);\n            }\n        } catch (e) {\n            //console.log(\"playerPlay: We could not autoplay, trying again in 1 second\");\n            tryToPlay(currentTime);\n        }\n    } else {\n        //console.log(\"playerPlay: Player is Undefined\");\n    }\n}\n\nfunction showUnmutePopup() {\n\n    var donotShowUnmuteAgain = Cookies.get('donotShowUnmuteAgain');\n    if (!donotShowUnmuteAgain) {\n        var span = document.createElement(\"span\");\n        span.innerHTML = \"<b>Would</b> you like to unmute it?<div id='allowAutoplay' style='max-height: 100px; overflow-y: scroll;'></div>\";\n        swal({\n            title: \"Your Media is Muted\",\n            icon: \"warning\",\n            content: span,\n            dangerMode: true,\n            buttons: {\n                cancel: \"Cancel\",\n                unmute: true,\n                donotShowUnmuteAgain: {\n                    text: \"Don't show again\",\n                    value: \"donotShowUnmuteAgain\",\n                    className: \"btn-danger\",\n                },\n            }\n        }).then(function (value) {\n            switch (value) {\n                case \"unmute\":\n                    player.muted(false);\n                    break;\n                case \"donotShowUnmuteAgain\":\n                    Cookies.set('donotShowUnmuteAgain', true, {\n                        path: '/',\n                        expires: 365\n                    });\n                    break;\n            }\n        });\n    }\n    showMuteTooltip();\n    setTimeout(function () {\n        $(\"#allowAutoplay\").load(webSiteRootURL + \"plugin/PlayerSkins/allowAutoplay/\");\n        player.userActive(true);\n    }, 500);\n}\n\nfunction tryToPlay(currentTime) {\n    clearTimeout(promisePlayTimeout);\n    promisePlayTimeout = setTimeout(function () {\n        if (player.paused()) {\n            playerPlayTimeout = setTimeout(function () {\n                playerPlay(currentTime);\n            }, 200);\n        }\n    }, promisePlayTimeoutTime);\n}\n\nfunction tryToPlayMuted(currentTime) {\n    muteInCookieAllow();\n    return tryToPlay(currentTime);\n}\n\nfunction muteIfNotAudio() {\n    if (!player.isAudio()) {\n        //console.log(\"muteIfNotAudio: We will mute this video\");\n        player.muted(true);\n        return true;\n    }\n    //console.log(\"muteIfNotAudio: We will not mute an audio\");\n    return false;\n}\n\nfunction muteInCookieAllow() {\n    var mute = Cookies.get('muted');\n    if (isALiveContent() || typeof mute === 'undefined' || (mute && mute !== \"false\")) {\n        //console.log(\"muteInCookieAllow: said yes\");\n        return muteIfNotAudio();\n    }\n    //console.log(\"muteInCookieAllow: said no\");\n    return false;\n}\n\nfunction playMuted(currentTime) {\n    muteInCookieAllow();\n    playerPlayTimeout = setTimeout(function () {\n        playerPlay(currentTime);\n    }, 200);\n}\n\nasync function showMuteTooltip() {\n    if ($(\"#mainVideo .vjs-volume-panel\").length) {\n        if (!$(\"#mainVideo .vjs-volume-panel\").is(\":visible\")) {\n            setTimeout(function () {\n                showMuteTooltip();\n            }, 500);\n            return false;\n        }\n        $(\"#mainVideo .vjs-volume-panel\").attr(\"data-toggle\", \"tooltip\");\n        $(\"#mainVideo .vjs-volume-panel\").attr(\"data-placement\", \"top\");\n        $(\"#mainVideo .vjs-volume-panel\").attr(\"title\", \"Click to activate the sound\");\n        $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip({container: '.vjs-control-bar', html: true});\n        $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip('show');\n        $(\"#mainVideo .vjs-volume-panel\").click(function () {\n            //console.log(\"remove unmute tooltip\");\n            $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip('hide');\n            $(\"#mainVideo .vjs-volume-panel\").removeAttr(\"data-toggle\");\n            $(\"#mainVideo .vjs-volume-panel\").removeAttr(\"data-placement\");\n            $(\"#mainVideo .vjs-volume-panel\").removeAttr(\"title\");\n            $(\"#mainVideo .vjs-volume-panel\").removeData('tooltip').unbind().next('div.tooltip').remove();\n        });\n    }\n    player.userActive(true);\n    setTimeout(function () {\n        player.userActive(true);\n    }, 1000);\n    setTimeout(function () {\n        player.userActive(true);\n    }, 1500);\n    setTimeout(function () {\n        $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip('hide');\n    }, 5000);\n}\n\nfunction playerPlayIfAutoPlay(currentTime) {\n    if (isWebRTC()) {\n        return false;\n    }\n    if (forceCurrentTime !== null) {\n        currentTime = forceCurrentTime;\n        forceCurrentTime = null;\n        //console.log(\"playerPlayIfAutoPlay: forceCurrentTime:\", currentTime);\n    }\n\n    if (currentTime) {\n        setCurrentTime(currentTime);\n    }\n    if (isAutoplayEnabled()) {\n        playerPlayTimeout = setTimeout(function () {\n            //console.log('playerPlayIfAutoPlay true', currentTime);\n            playerPlay(currentTime);\n        }, 200);\n        return true;\n    }\n    //console.log('playerPlayIfAutoPlay false', currentTime);\n    //$.toast(\"Autoplay disabled\");\n    return false;\n}\n\nfunction playerPlayMutedIfAutoPlay(currentTime) {\n    if (isWebRTC()) {\n        return false;\n    }\n    if (forceCurrentTime !== null) {\n        currentTime = forceCurrentTime;\n        forceCurrentTime = null;\n        //console.log(\"playerPlayIfAutoPlay: forceCurrentTime:\", currentTime);\n    }\n\n    if (currentTime) {\n        setCurrentTime(currentTime);\n    }\n    if (isAutoplayEnabled()) {\n        playerPlayTimeout = setTimeout(function () {\n            //console.log('playerPlayIfAutoPlay true', currentTime);\n            tryToPlayMuted(currentTime);\n        }, 200);\n        return true;\n    }\n    //console.log('playerPlayIfAutoPlay false', currentTime);\n    //$.toast(\"Autoplay disabled\");\n    return false;\n}\n\nfunction playNext(url) {\n    if (!player.paused()) {\n        return false;\n    }\n    if (playerIsPlayingAds()) {\n        setTimeout(function () {\n            playNext(url);\n        }, 1000);\n    } else if (isPlayNextEnabled()) {\n        modal.showPleaseWait();\n        if (typeof autoPlayAjax == 'undefined' || !autoPlayAjax) {\n            //console.log(\"playNext changing location \" + url);\n            document.location = url;\n        } else {\n            forceCurrentTime = 0;\n            setCurrentTime(0);\n            //console.log(\"playNext ajax\");\n            $.ajax({\n                url: webSiteRootURL + 'view/infoFromURL.php?url=' + encodeURI(url),\n                success: function (response) {\n                    //console.log(response);\n                    if (!response || response.error) {\n                        //console.log(\"playNext ajax fail\");\n                        if (response.url) {\n                            document.location = response.url;\n                        }\n                    } else {\n                        //console.log(\"playNext ajax success\");\n                        $('topInfo').hide();\n                        playNextURL = (typeof isEmbed !== 'undefined' && isEmbed) ? response.nextURLEmbed : response.nextURL;\n                        //console.log(\"New playNextURL\", playNextURL);\n                        var cSource = false;\n                        try {\n                            cSource = changeVideoSrc(player, response.sources);\n                        } catch (e) {\n                            //console.log('changeVideoSrc', e.message);\n                        }\n                        if (!cSource) {\n                            document.location = url;\n                            return false;\n                        }\n                        mediaId = response.videos_id;\n                        webSocketVideos_id = mediaId;\n                        $('video, #mainVideo').attr('poster', response.poster);\n                        player.poster(response.poster);\n                        history.pushState(null, null, url);\n                        $('.topInfoTitle, title').text(response.title);\n                        $('#topInfo img').attr('src', response.userPhoto);\n                        $('#topInfo a').attr('href', response.url);\n                        modal.hidePleaseWait();\n                        if ($('#modeYoutubeBottom').length) {\n                            $.ajax({\n                                url: url,\n                                success: function (response) {\n                                    modeYoutubeBottom = $(response).find('#modeYoutubeBottom').html();\n                                    $('#modeYoutubeBottom').html(modeYoutubeBottom);\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    } else if (isPlayerLoop()) {\n        avideoToast(\"Looping video\");\n        userIsControling = false;\n        playerPlayTimeout = setTimeout(function () {\n            playerPlay(currentTime);\n        }, 200);\n    }\n}\n\nfunction formatBytes(bytes, decimals) {\n    if (bytes == 0)\n        return '0 Bytes';\n    var k = 1024,\n            dm = decimals <= 0 ? 0 : decimals || 2,\n            sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nasync function tooglePlayerLoop() {\n    setPlayerLoop(!isPlayerLoop());\n}\n\nvar setPlayerLoopSetTimeout;\nasync function setPlayerLoop(loop) {\n    clearTimeout(setPlayerLoopSetTimeout);\n    if (typeof player === 'undefined' && $('#mainVideo').length) {\n        setPlayerLoopSetTimeout = setTimeout(function () {\n            setPlayerLoop(loop)\n        }, 1000);\n        return false;\n    }\n    if (loop) {\n        //console.log(\"Loop ON\");\n        //$.toast(\"Loop ON\");\n        player.loop(1);\n        $(\".loop-button\").removeClass('loop-disabled-button');\n        $(\".loop-button, .loopButton\").addClass('fa-spin');\n    } else {\n        $(\".loop-button\").addClass('loop-disabled-button');\n        $(\".loop-button, .loopButton\").removeClass('fa-spin');\n        //console.log(\"Loop OFF\");\n        //$.toast(\"Loop OFF\");\n        player.loop(0);\n    }\n    Cookies.set('playerLoop', loop, {\n        path: '/',\n        expires: 365\n    });\n    if (typeof setImageLoop === 'function') {\n        setImageLoop();\n    }\n}\n\nasync function setImageLoop() {\n    if (isPlayerLoop()) {\n        $('.loopButton').removeClass('opacityBtn');\n        $('.loopButton').addClass('fa-spin');\n    } else {\n        $('.loopButton').addClass('opacityBtn');\n        $('.loopButton').removeClass('fa-spin');\n    }\n}\n\nfunction toogleImageLoop(t) {\n    tooglePlayerLoop();\n    if (typeof setImageLoop === 'function') {\n        setImageLoop();\n    }\n}\n\nfunction isPlayerLoop() {\n    if (typeof player === 'undefined' && $('#mainVideo').length) {\n        return false;\n    }\n    var loop = Cookies.get('playerLoop');\n    if (!loop || loop === \"false\") {\n        return player.loop();\n    } else {\n        return true;\n    }\n}\n\nfunction isArray(what) {\n    return Object.prototype.toString.call(what) === '[object Array]';\n}\n\nasync function reloadVideoJS() {\n    if (typeof player.currentSources === 'function') {\n        var src = player.currentSources();\n        player.src(src);\n        if (typeof replaceVideoSourcesPerOfflineVersion === 'function') {\n            replaceVideoSourcesPerOfflineVersion();\n        }\n    }\n}\n\nvar initdone = false;\nvar startCurrentTime = 0;\nvar forceCurrentTime = null;\nfunction setCurrentTime(currentTime) {\n    //console.log(\"setCurrentTime:\", currentTime, forceCurrentTime);\n    if (forceCurrentTime !== null) {\n        startCurrentTime = forceCurrentTime;\n        currentTime = forceCurrentTime;\n        forceCurrentTime = null;\n        //console.log(\"forceCurrentTime:\", currentTime);\n    } else if (startCurrentTime != currentTime) {\n        startCurrentTime = currentTime;\n        //console.log(\"setCurrentTime changed:\", currentTime);\n    }\n    //console.log('setCurrentTime', currentTime);\n    if (typeof player !== 'undefined') {\n        if (isTryingToPlay) {\n            if (currentTime <= player.currentTime()) {\n                //console.log('setCurrentTime is trying to play', currentTime);\n                return false; // if is trying to play, only update if the time is greater\n            }\n        }\n        player.currentTime(currentTime);\n        initdone = false;\n        // wait for video metadata to load, then set time \n        player.on(\"loadedmetadata\", function () {\n            //console.log('setCurrentTime loadedmetadata', currentTime);\n            //player.currentTime(currentTime);\n        });\n        // iPhone/iPad need to play first, then set the time\n        // events: https://www.w3.org/TR/html5/embedded-content-0.html#mediaevents\n        player.on(\"canplaythrough\", function () {\n            if (!initdone) {\n                console.log('setCurrentTime canplaythrough', currentTime);\n                player.currentTime(currentTime);\n                initdone = true;\n            }\n        });\n    } else {\n        setTimeout(function () {\n            setCurrentTime(currentTime);\n        }, 1000);\n    }\n}\n\nfunction isALiveContent() {\n    if (typeof isLive !== 'undefined' && isLive && (typeof isOnlineLabel === 'undefined' || isOnlineLabel === true || $('.liveOnlineLabel').hasClass('label-success'))) {\n        return true;\n    }\n    return false;\n}\n\nfunction isWebRTC() {\n    if (typeof _isWebRTC !== 'undefined') {\n        return _isWebRTC;\n    }\n    return false;\n}\n\nfunction isAutoplayEnabled() {\n    //consoleLog(\"Cookies.get('autoplay')\", Cookies.get('autoplay'));\n    if (typeof forceNotautoplay !== 'undefined' && forceNotautoplay) {\n        return false;\n    } else if (typeof forceautoplay !== 'undefined' && forceautoplay) {\n        return true;\n    } else if (isWebRTC()) {\n        consoleLog(\"isAutoplayEnabled said No because is WebRTC \");\n        return false;\n    } else if (isALiveContent()) {\n        consoleLog(\"isAutoplayEnabled always autoplay live contents\");\n        return true;\n    } else\n    if ($(\"#autoplay\").length) {\n        autoplay = $(\"#autoplay\").is(\":checked\");\n        consoleLog(\"isAutoplayEnabled #autoplay said \" + ((autoplay) ? \"Yes\" : \"No\"));\n        setAutoplay(autoplay);\n        return autoplay;\n    } else if (\n            typeof Cookies !== 'undefined' &&\n            typeof Cookies.get('autoplay') !== 'undefined'\n            ) {\n        if (Cookies.get('autoplay') === 'true' || Cookies.get('autoplay') == true) {\n            consoleLog(\"isAutoplayEnabled Cookie said Yes \");\n            setAutoplay(true);\n            return true;\n        } else {\n            consoleLog(\"isAutoplayEnabled Cookie said No \");\n            setAutoplay(false);\n            return false;\n        }\n    } else {\n        if (typeof autoplay !== 'undefined') {\n            consoleLog(\"isAutoplayEnabled autoplay said \" + ((autoplay) ? \"Yes\" : \"No\"));\n            setAutoplay(autoplay);\n            return autoplay;\n        }\n    }\n    setAutoplay(false);\n    consoleLog(\"isAutoplayEnabled Default is No \");\n    return false;\n}\n\nfunction setAutoplay(value) {\n    Cookies.set('autoplay', value, {\n        path: '/',\n        expires: 365\n    });\n}\n\nasync function showAutoPlayVideoDiv() {\n    var auto = $(\"#autoplay\").prop('checked');\n    if (!auto) {\n        $('#autoPlayVideoDiv').slideUp();\n    } else {\n        $('#autoPlayVideoDiv').slideDown();\n    }\n}\n\nfunction enableAutoPlay() {\n    setAutoplay(true);\n    checkAutoPlay();\n}\n\nfunction disableAutoPlay() {\n    setAutoplay(false);\n    checkAutoPlay();\n}\n\nasync function checkAutoPlay() {\n    if (isAutoplayEnabled()) {\n        $(\"#autoplay\").prop('checked', true);\n        $('.autoplay-button').addClass('checked');\n        avideoTooltip(\".autoplay-button\", \"Autoplay is ON\");\n    } else {\n        $(\"#autoplay\").prop('checked', false);\n        $('.autoplay-button').removeClass('checked');\n        avideoTooltip(\".autoplay-button\", \"Autoplay is OFF\");\n    }\n    showAutoPlayVideoDiv();\n}\n\nfunction isPlayNextEnabled() {\n    if (isPlayerLoop()) {\n        return false;\n    } else if (isAutoplayEnabled()) {\n        return true;\n    }\n    return false;\n}\n\nfunction avideoAlert(title, msg, type) {\n    if (typeof msg !== 'string') {\n        return false;\n    }\n    avideoAlertHTMLText(title, msg, type);\n}\n\nfunction avideoAlertOnce(title, msg, type, uid) {\n    var cookieName = 'avideoAlertOnce' + uid;\n    if (!Cookies.get(cookieName)) {\n        var span = document.createElement(\"span\");\n        span.innerHTML = msg;\n        swal({\n            title: title,\n            content: span,\n            icon: type,\n            closeOnClickOutside: false,\n            closeModal: true\n        }).then(okay => {\n            if (okay) {\n                Cookies.set(cookieName, 1, {\n                    path: '/',\n                    expires: 365\n                });\n            }\n        });\n    }\n}\n\nasync function avideoConfirm(msg) {\n    var span = document.createElement(\"span\");\n    span.innerHTML = msg;\n    var response = await swal({\n        title: 'Confrim',\n        content: span,\n        icon: 'warning',\n        closeOnClickOutside: false,\n        closeModal: true,\n        buttons: {\n            cancel: \"Cancel\",\n            confirm: {\n                text: \"Confirm\",\n                value: \"confirm\",\n                className: \"btn-danger\",\n            },\n        }\n    }).then(function (value) {\n        return value == 'confirm';\n    });\n    return response;\n}\n\nfunction avideoAlertOnceForceConfirm(title, msg, type) {\n    var span = document.createElement(\"span\");\n    span.innerHTML = msg;\n    swal({\n        title: title,\n        content: span,\n        icon: type,\n        closeOnClickOutside: false,\n        closeModal: true\n    });\n}\n\nfunction _avideoToast(msg, icon) {\n    var options = {text: msg, hideAfter: 7000};\n    if (icon) {\n        options.icon = icon;\n    }\n    $.toast(options);\n}\nfunction avideoToast(msg) {\n    _avideoToast(msg, null);\n}\nfunction avideoToastInfo(msg) {\n    _avideoToast(msg, 'info');\n}\nfunction avideoToastError(msg) {\n    _avideoToast(msg, 'error');\n}\nfunction avideoToastSuccess(msg) {\n    _avideoToast(msg, 'success');\n}\nfunction avideoToastWarning(msg) {\n    _avideoToast(msg, 'warning');\n}\n\nfunction avideoAlertAJAXHTML(url) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: url,\n        success: function (response) {\n            avideoAlertText(response);\n            modal.hidePleaseWait();\n        }\n    });\n}\n\nfunction avideoAlertAJAX(url) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: url,\n        success: function (response) {\n            avideoResponse(response);\n            modal.hidePleaseWait();\n        }\n    });\n}\n\nfunction avideoAlertHTMLText(title, msg, type) {\n    var isErrorOrWarning = (type == 'error' || type == 'warning');\n    var span = document.createElement(\"span\");\n    span.innerHTML = msg;\n    swal({\n        title: title,\n        content: span,\n        icon: type,\n        closeModal: true,\n        closeOnClickOutside: !isErrorOrWarning,\n        buttons: isErrorOrWarning ? null : (empty(type) ? false : true),\n    });\n}\n\nfunction avideoModalIframeClose() {\n    //console.log('avideoModalIframeClose');\n    try {\n        swal.close();\n    } catch (e) {\n\n    }\n    try {\n        if (inIframe()) {\n            window.parent.swal.close();\n        }\n    } catch (e) {\n\n    }\n}\n\nfunction avideoModalIframeCloseToastSuccess(msg) {\n    avideoModalIframeClose();\n    avideoToastSuccess(msg);\n    window.parent.avideoToastSuccess(msg);\n}\n\nfunction avideoDialog(url, maximize) {\n    if (typeof parent.openWindow === 'function') {\n        url = addGetParam(url, 'avideoIframe', 1);\n        parent.openWindow(url, iframeAllowAttributes, '', maximize);\n    } else {\n        avideoModalIframeFullScreen(url);\n    }\n}\n\nfunction avideoDialogWithPost(url, params) {\n    if (typeof parent.openWindowWithPost === 'function') {\n        parent.openWindowWithPost(url, iframeAllowAttributes, params);\n    } else {\n        openWindowWithPost(url, 'avideoDialogWithPost', params, '');\n    }\n}\n\nfunction avideoModalIframe(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe', false);\n}\n\nfunction avideoModalIframeXSmall(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-xsmall', false);\n}\n\nfunction avideoModalIframeSmall(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-small', false);\n}\n\nfunction avideoModalIframeLarge(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-large', false);\n}\n\nfunction avideoModalIframeFullScreen(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-full', true);\n}\n\nfunction avideoModalIframeFullWithMinimize(url) {\n    if (false && typeof parent.openWindow === 'function') {\n        parent.openWindow(url, iframeAllowAttributes, '', true);\n    } else {\n        avideoModalIframeWithClassName(url, 'swal-modal-iframe-full-with-minimize', true);\n    }\n}\n\nfunction avideoModalIframeFullTransparent(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-full-transparent', false);\n}\n\nfunction avideoModalIframeFullScreenMinimize() {\n    $('.swal-modal-iframe-full-with-minimize').closest('.swal-overlay').addClass('swal-offline-video-compress');\n}\n\nfunction avideoModalIframeFullScreenMaximize() {\n    $('.swal-modal-iframe-full-with-minimize').closest('.swal-overlay').removeClass('swal-offline-video-compress');\n}\n\nfunction avideoModalIframeFullScreenClose() {\n    if (typeof swal === 'function') {\n        $('.swal-overlay iframe').attr('src', 'about:blank');\n        try {\n            /*\n             $('.swal-overlay').slideUp();\n             setTimeout(function(){\n             swal.close();\n             },500);\n             */\n            swal.close();\n        } catch (e) {\n\n        }\n    }\n}\n// this is to make sure when the use click on the back page button it will close the iframe\nwindow.onload = function () {\n    if (typeof history.pushState === \"function\") {\n        ////console.log('history.pushState loaded');\n        window.onpopstate = function (e) {\n            ////console.log('onpopstate', e.state, history.state);\n            avideoModalIframeFullScreenClose();\n        };\n    }\n}\n\nfunction avideoModalIframeFull(url) {\n    avideoModalIframeFullScreen(url);\n}\n\nfunction avideoAddIframeIntoElement(element, url, insideSelector) {\n    url = addGetParam(url, 'avideoIframe', 1);\n    //console.log('avideoAddIframeIntoElement', url, element);\n    var html = '';\n    html += '<iframe frameBorder=\"0\" class=\"avideoIframeIntoElement\" src=\"' + url + '\"  ' + iframeAllowAttributes + ' ></iframe>';\n\n    var insideElement = $(element);\n\n    if (!empty(insideSelector)) {\n        insideElement = $(element).find(insideSelector);\n    }\n\n    insideElement.append(html);\n}\n\nfunction avideoWindowIframe(url) {\n    url = addGetParam(url, 'avideoIframe', 1);\n    //console.log('avideoModalIframeWithClassName', url);\n    var html = '';\n    html += '<div class=\"panel panel-default\" id=\"draggable\" style=\"width: 400px; height: 200px; float: left; z-index: 9999;\">';\n    html += '<div class=\"panel-heading\" style=\"cursor: move;\">head</div>';\n    html += '<div class=\"panel-body\" style=\"padding: 0;\">';\n    html += '<iframe id=\"avideoWindowIframe\" frameBorder=\"0\" class=\"animate__animated animate__bounceInDown\" src=\"' + url + '\"  ' + iframeAllowAttributes + '></iframe>';\n    html += '</div>';\n    html += '</div>';\n    $('body').append(html);\n    $(\"#draggable\").draggable({handle: \".panel-heading\", containment: \"parent\"});\n    //$( \"div, p\" ).disableSelection();\n    $(\"#draggable\").resizable();\n}\n\nvar avideoModalIframeFullScreenOriginalURL = false;\nvar avideoModalIframeWithClassNameTimeout;\nvar avideoModalIframeFullScreenMinimize;\nfunction avideoModalIframeWithClassName(url, className, updateURL) {\n    var closeModal = true;\n    showURL = document.location.href;\n    if (updateURL) {\n        if (!avideoModalIframeFullScreenOriginalURL) {\n            avideoModalIframeFullScreenOriginalURL = document.location.href;\n        }\n        showURL = url;\n    }\n    url = addGetParam(url, 'avideoIframe', 1);\n    //console.log('avideoModalIframeWithClassName', url, className, updateURL);\n    var html = '';\n    html += '<div id=\"avideoModalIframeDiv\" class=\"clearfix popover-title\">';\n\n    if (typeof avideoModalIframeFullScreenCloseButton === 'undefined') {\n        avideoModalIframeFullScreenCloseButtonSmall = '<button class=\"btn btn-default pull-left\" onclick=\"avideoModalIframeFullScreenClose();\">';\n        avideoModalIframeFullScreenCloseButtonSmall += '<i class=\"fas fa-chevron-left\"></i>';\n        avideoModalIframeFullScreenCloseButtonSmall += '</button>';\n\n        avideoModalIframeFullScreenCloseButton = avideoModalIframeFullScreenCloseButtonSmall;\n    }\n    avideoModalIframeFullScreenMaximize();\n    if (className === 'swal-modal-iframe-full-with-minimize') {\n        html += '<button class=\"btn btn-default pull-right swal-modal-iframe-full-with-minimize-btn\" onclick=\"avideoModalIframeFullScreenMinimize();\">';\n        html += '<i class=\"fas fa-compress-arrows-alt\"></i>';\n        html += '</button>';\n        html += '<button class=\"btn btn-default pull-right swal-modal-iframe-full-with-maximize-btn\" onclick=\"avideoModalIframeFullScreenMaximize();\">';\n        html += '<i class=\"fas fa-expand-arrows-alt\"></i>';\n        html += '</button>';\n        showURL = document.location.href;\n        closeModal = false;\n    }\n\n    if (inIframe()) {\n        html += avideoModalIframeFullScreenCloseButtonSmall;\n    } else {\n        html += avideoModalIframeFullScreenCloseButton;\n        html += '<img src=\"' + webSiteRootURL + 'videos/userPhoto/logo.png\" class=\"img img-responsive swal-modal-logo\" style=\"max-height:34px;\">';\n    }\n\n    html += '</div>';\n    html += '<iframe id=\"avideoModalIframe\" frameBorder=\"0\" class=\"animate__animated animate__bounceInDown\" src=\"' + url + '\"  ' + iframeAllowAttributes + ' ></iframe>';\n\n    try {\n        console.log('avideoModalIframeWithClassName window.history.pushState showURL', showURL);\n        avideoPushState(showURL);\n    } catch (e) {\n\n    }\n\n    var span = document.createElement(\"span\");\n    span.innerHTML = html;\n    $('.swal-overlay').show();\n    swal({\n        content: span,\n        closeModal: closeModal,\n        buttons: false,\n        className: className,\n        onClose: avideoModalIframeRemove\n    }).then(() => {\n        if (avideoModalIframeFullScreenOriginalURL) {\n            //console.log('avideoModalIframeWithClassName window.history.pushState avideoModalIframeFullScreenOriginalURL', avideoModalIframeFullScreenOriginalURL);\n            avideoPushState(avideoModalIframeFullScreenOriginalURL);\n            avideoModalIframeFullScreenOriginalURL = false;\n        }\n    });\n    setTimeout(function () {\n        if (!isSameDomain(url)) {\n            //console.log('avideoModalIframeWithClassName different domain');\n            avideoModalIframeRemove();\n        } else {\n            var contentLoaded = false;\n            try {\n                $('#avideoModalIframe').load(function () {\n                    contentLoaded = true;\n                    //console.log('avideoModalIframeWithClassName content loaded 1');\n                    clearTimeout(avideoModalIframeWithClassNameTimeout);\n                    avideoModalIframeRemove();\n                });\n            } catch (e) {\n            }\n\n            if ($('#avideoModalIframe').contents().find(\"body\").length) {\n                //console.log('avideoModalIframeWithClassName content loaded 2');\n                contentLoaded = true;\n            }\n\n            if (contentLoaded) {\n                //console.log('avideoModalIframeWithClassName content loaded 3');\n                clearTimeout(avideoModalIframeWithClassNameTimeout);\n                avideoModalIframeRemove();\n            } else {\n                //console.log('avideoModalIframeWithClassName content loaded 4');\n                clearTimeout(avideoModalIframeWithClassNameTimeout);\n                avideoModalIframeWithClassNameTimeout = setTimeout(function () {\n                    if (!$('#avideoModalIframe').contents().find(\"body\").length) {\n                        console.log('avideoModalIframeWithClassName content NOT loaded');\n                        // is not loaded\n                        url = addGetParam(url, 'avideoIframe', 0);\n                        if (isSameDomain(url)) {\n                            document.location = url;\n                        }\n                    }\n                }, 5000);\n            }\n        }\n    }, 1000);\n}\n\nfunction avideoPushState(url) {\n    window.history.pushState(\"\", \"\", url);\n    if (typeof parent.updatePageSRC == 'funciton') {\n        console.log('avideoPushState', url);\n        parent.updatePageSRC(url);\n    }\n}\n\nfunction checkIframeLoaded(id) {\n    // Get a handle to the iframe element\n    var iframe = document.getElementById(id);\n    var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n    // Check if loading is complete\n    if (iframeDoc.readyState == 'complete') {\n        //iframe.contentWindow.alert(\"Hello\");\n        iframe.contentWindow.onload = function () {\n            alert(\"I am loaded\");\n        };\n        // The loading is complete, call the function we want executed once the iframe is loaded\n        afterLoading();\n        return;\n    }\n\n    // If we are here, it is not loaded. Set things up so we check   the status again in 100 milliseconds\n    window.setTimeout(checkIframeLoaded, 100);\n}\n\nfunction avideoModalIframeIsVisible() {\n    var modal = '';\n    if ($('.swal-modal-iframe-xsmall').length) {\n        modal = $('.swal-modal-iframe-xsmall');\n    } else if ($('.swal-modal-iframe-small').length) {\n        modal = $('.swal-modal-iframe-small');\n    } else if ($('.swal-modal-iframe-large').length) {\n        modal = $('.swal-modal-iframe-large');\n    } else if ($('.swal-modal-iframe-full').length) {\n        modal = $('.swal-modal-iframe-full');\n    } else if ($('.swal-modal-iframe-full-transparent').length) {\n        modal = $('.swal-modal-iframe-full-transparent');\n    } else if ($('.swal-modal-iframe-full-with-minimize').length) {\n        modal = $('.swal-modal-iframe-full-with-minimize');\n    } else {\n        modal = $('.swal-modal-iframe');\n    }\n\n    if (modal.parent().hasClass('swal-overlay--show-modal')) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction avideoModalIframeRemove() {\n    if (avideoModalIframeIsVisible()) {\n        setTimeout(function () {\n            avideoModalIframeRemove();\n        }, 1000);\n    } else {\n        //console.log('avideoModalIframeRemove');\n        $('.swal-content').html('');\n    }\n}\n\nfunction avideoResponse(response) {\n    //console.log('avideoResponse', response);\n    if (typeof response === 'string') {\n        response = JSON.parse(response);\n    }\n    //console.log('avideoResponse', response);\n    if (response.error) {\n        if (!response.msg) {\n            if (typeof response.error === 'string') {\n                response.msg = response.error;\n            } else {\n                response.msg = 'Error';\n            }\n        }\n        avideoAlertError(response.msg);\n    } else {\n        if (!response.msg) {\n            response.msg = 'Success';\n        }\n        if (response.warning) {\n            avideoToastWarning(response.msg);\n        } else if (response.info) {\n            avideoToastInfo(response.msg);\n        } else {\n            avideoToastSuccess(response.msg);\n        }\n    }\n}\n\nfunction avideoAlertText(msg) {\n    avideoAlert(\"\", msg, '');\n}\n\nfunction avideoAlertInfo(msg) {\n    avideoAlert(\"Info\", msg, 'info');\n}\n\nfunction avideoAlertError(msg) {\n    avideoAlert(\"Error\", msg, 'error');\n}\nfunction avideoAlertSuccess(msg) {\n    avideoAlert(\"Success\", msg, 'success');\n}\n\nfunction avideoTooltip(selector, text) {\n    $(selector).attr('title', text);\n    $(selector).attr('data-toggle', 'tooltip');\n    $(selector).attr('data-original-title', text);\n    $(selector).tooltip({html: true});\n}\n\nfunction fixAdSize() {\n    ad_container = $('#mainVideo_ima-ad-container');\n    if (ad_container.length) {\n        height = ad_container.css('height');\n        width = ad_container.css('width');\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'height': height});\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'width': width});\n    }\n}\n\nfunction playerIsPlayingAds() {\n    return ($(\"#mainVideo_ima-ad-container\").length && $(\"#mainVideo_ima-ad-container\").is(':visible')) && player.ima.getAdsManager().getRemainingTime() > 0;\n}\n\nfunction playerHasAds() {\n    return ($(\"#mainVideo_ima-ad-container\").length > 0);\n}\n\nfunction pauseIfIsPlayinAds() { // look like the mobile does not know if is playing ads\n    if (!isMobile() && !player.paused() && playerHasAds() && playerIsPlayingAds()) {\n        //player.pause();\n    }\n}\n\nfunction countToOrRevesrse(selector, total) {\n    var text = $(selector).text();\n    if (isNaN(text)) {\n        current = 0;\n    } else {\n        current = parseInt(text);\n    }\n    total = parseInt(total);\n\n    if (current <= total) {\n        countTo(selector, total);\n    } else {\n        countToReverse(selector, total);\n    }\n}\n\nfunction countTo(selector, total) {\n    var text = $(selector).text();\n    if (isNaN(text)) {\n        current = 0;\n    } else {\n        current = parseInt(text);\n    }\n    total = parseInt(total);\n    if (!total || current >= total) {\n        $(selector).removeClass('loading');\n        return;\n    }\n    var rest = (total - current);\n    var step = parseInt(rest / 100);\n    if (step < 1) {\n        step = 1;\n    }\n    current += step;\n    $(selector).text(current);\n    var timeout = (500 / rest);\n    setTimeout(function () {\n        countTo(selector, total);\n    }, timeout);\n}\n\nfunction countToReverse(selector, total) {\n    var text = $(selector).text();\n    if (isNaN(text)) {\n        return false;\n    } else {\n        current = parseInt(text);\n    }\n    total = parseInt(total);\n    if (!total || current <= total) {\n        $(selector).removeClass('loading');\n        return;\n    }\n    var rest = (current - total);\n    var step = parseInt(rest / 100);\n    if (step < 1) {\n        step = 1;\n    }\n    current -= step;\n    $(selector).text(current);\n    var timeout = (500 / rest);\n    setTimeout(function () {\n        countToReverse(selector, total);\n    }, timeout);\n}\n\nif (typeof showPleaseWaitTimeOut == 'undefined') {\n    var showPleaseWaitTimeOut = 0;\n}\n\nvar tabsCategoryDocumentHeight = 0;\nfunction tabsCategoryDocumentHeightChanged() {\n    var newHeight = $(document).height();\n    if (tabsCategoryDocumentHeight !== newHeight) {\n        tabsCategoryDocumentHeight = newHeight;\n        return true;\n    }\n    return false;\n}\n\nasync function checkDescriptionArea() {\n    $(\".descriptionArea\").each(function (index) {\n        if ($(this).height() < $(this).find('.descriptionAreaContent').height()) {\n            $(this).find('.descriptionAreaShowMoreBtn').show();\n        }\n    });\n}\nfunction clearCache(showPleaseWait, FirstPage, sessionOnly) {\n    if (showPleaseWait) {\n        modal.showPleaseWait();\n    }\n    $.ajax({\n        url: webSiteRootURL + 'objects/configurationClearCache.json.php?FirstPage=' + FirstPage + '&sessionOnly=' + sessionOnly,\n        success: function (response) {\n            if (showPleaseWait) {\n                avideoResponse(response);\n                modal.hidePleaseWait();\n            }\n        }\n    });\n}\n\nfunction validURL(str) {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+:]*)*' + // port and path\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nfunction isURL(url) {\n    return validURL(url);\n}\nvar startTimerInterval = [];\nasync function startTimer(duration, selector, prepend) {\n    ////console.log('startTimer 1', duration);\n    clearInterval(startTimerInterval[selector]);\n    var timer = duration;\n    startTimerInterval[selector] = setInterval(function () {\n\n        // Time calculations for days, hours, minutes and seconds\n        var years = Math.floor(duration / (60 * 60 * 24 * 365));\n        var days = Math.floor((duration % (60 * 60 * 24 * 365)) / (60 * 60 * 24));\n        var hours = Math.floor((duration % (60 * 60 * 24)) / (60 * 60));\n        var minutes = Math.floor((duration % (60 * 60)) / (60));\n        var seconds = Math.floor((duration % (60)));\n        // Display the result in the element with id=\"demo\"\n        var text = '';\n        if (years) {\n            text += years + 'y ';\n        }\n        if (days || text) {\n            text += days + 'd ';\n        }\n        if (hours || text) {\n            text += hours + 'h ';\n        }\n        if (minutes || text) {\n            text += minutes + 'm ';\n        }\n        if (seconds || text) {\n            text += seconds + 's ';\n        }\n        // If the count down is finished, write some text\n        if (duration < 0) {\n            clearInterval(startTimerInterval[selector]);\n            //$(selector).text(\"EXPIRED\");\n            startTimerTo(duration * -1, selector);\n        } else {\n            $(selector).html(prepend + text);\n            duration--;\n        }\n\n    }, 1000);\n}\n\nvar startTimerToInterval = [];\nfunction startTimerTo(durationTo, selector) {\n    clearInterval(startTimerToInterval[selector]);\n    startTimerToInterval[selector] = setInterval(function () {\n\n        // Time calculations for days, hours, minutes and seconds\n        var years = Math.floor(durationTo / (60 * 60 * 24 * 365));\n        var days = Math.floor((durationTo % (60 * 60 * 24 * 365)) / (60 * 60 * 24));\n        var hours = Math.floor((durationTo % (60 * 60 * 24)) / (60 * 60));\n        var minutes = Math.floor((durationTo % (60 * 60)) / (60));\n        var seconds = Math.floor((durationTo % (60)));\n        // Display the result in the element with id=\"demo\"\n        var text = '';\n        if (years) {\n            text += years + 'y ';\n        }\n        if (days || text) {\n            text += days + 'd ';\n        }\n        if (hours || text) {\n            text += hours + 'h ';\n        }\n        if (minutes || text) {\n            text += minutes + 'm ';\n        }\n        if (seconds || text) {\n            text += seconds + 's ';\n        }\n        $(selector).text(text);\n        durationTo++;\n    }, 1000);\n}\n\nvar startTimerToDateTimeOut = [];\nfunction startTimerToDate(toDate, selector, useDBDate) {\n    clearTimeout(startTimerToDateTimeOut[selector]);\n    if (typeof _serverTime === 'undefined') {\n        ////console.log('startTimerToDate _serverTime is undefined');\n        getServerTime();\n        startTimerToDateTimeOut[selector] = setTimeout(function () {\n            startTimerToDate(toDate, selector, useDBDate)\n        }, 1000);\n        return false;\n    }\n    if (typeof toDate === 'string') {\n        ////console.log('startTimerToDate 1 '+toDate);\n        toDate = new Date(toDate.replace(/-/g, \"/\"));\n    }\n    if (useDBDate) {\n        if (typeof _serverDBTimeString !== 'undefined') {\n            date2 = new Date(_serverDBTimeString.replace(/-/g, \"/\"));\n            ////console.log('startTimerToDate 2 '+date2);\n        }\n    } else {\n        if (typeof _serverTimeString !== 'undefined') {\n            date2 = new Date(_serverTimeString.replace(/-/g, \"/\"));\n            ////console.log('startTimerToDate 3 '+date2);\n        }\n    }\n    if (typeof date2 === 'undefined') {\n        date2 = new Date();\n        ////console.log('startTimerToDate 4 '+date2);\n    }\n\n    var seconds = (toDate.getTime() - date2.getTime()) / 1000;\n    ////console.log('startTimerToDate toDate', toDate);\n    ////console.log('startTimerToDate selector', selector);\n    ////console.log('startTimerToDate seconds', seconds);\n    return startTimer(seconds, selector, toDate.toLocaleString() + '<br>');\n}\n\nvar _timerIndex = 0;\nfunction createTimer(selector) {\n    var toDate = $(selector).text();\n    var id = $(selector).attr('id');\n    if (!id) {\n        _timerIndex++;\n        id = 'timer_' + _timerIndex;\n        $(selector).attr('id', id);\n    }\n\n    startTimerToDate(toDate, '#' + id, true);\n}\n\nvar getServerTimeActive = 0;\nasync function getServerTime() {\n    if (getServerTimeActive || _serverTime) {\n        return false;\n    }\n    if (typeof webSiteRootURL == 'undefined') {\n        setTimeout(function () {\n            getServerTime();\n        }, 1000);\n        return false;\n    }\n    getServerTimeActive = 1;\n    var d = new Date();\n    $.ajax({\n        url: webSiteRootURL + 'objects/getTimes.json.php',\n        success: function (response) {\n            //console.log('getServerTime', response);\n            _serverTime = response._serverTime;\n            _serverDBTime = response._serverDBTime;\n            _serverTimeString = response._serverTimeString;\n            _serverDBTimeString = response._serverDBTimeString;\n            _serverTimezone = response._serverTimezone;\n            _serverDBTimezone = response._serverDBTimezone;\n            _serverSystemTimezone = response._serverSystemTimezone;\n            //console.log('getServerTime _serverDBTimezone', _serverDBTimezone, response._serverDBTimezone);\n            setInterval(function () {\n                _serverTime++;\n                _serverDBTime++;\n                _serverTimeString = new Date(_serverTime * 1000).toISOString().slice(0, 19).replace('T', ' ');\n                _serverDBTimeString = new Date(_serverDBTime * 1000).toISOString().slice(0, 19).replace('T', ' ');\n            }, 1000);\n        }\n    });\n}\n\nfunction clearServerTime() {\n    //console.log('clearServerTime');\n    _serverTime = null;\n    _serverDBTime = null;\n    _serverTimeString = null;\n    _serverDBTimeString = null;\n}\n\nfunction convertDBDateToLocal(dbDateString) {\n    if (!/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/.test(dbDateString)) {\n        //console.log('convertDBDateToLocal format does not match', dbDateString);\n        return dbDateString;\n    }\n    checkMoment();\n    dbDateString = $.trim(dbDateString.replace(/[^ 0-9:-]/g, ''));\n    var m;\n    if (!_serverDBTimezone) {\n        getServerTime();\n        //console.log('convertDBDateToLocal _serverDBTimezone is empty', dbDateString);\n        m = moment.tz(dbDateString);\n    } else {\n        _serverDBTimezone = $.trim(_serverDBTimezone);\n        //m = moment(dbDateString).tz(_serverDBTimezone);\n        //m = moment.tz(dbDateString, _serverDBTimezone);\n        m = moment.tz(dbDateString, _serverDBTimezone).local();\n    }\n    var fromNow = m.fromNow();\n    consolelog('convertDBDateToLocal', dbDateString, _serverDBTimezone, fromNow);\n    return fromNow;\n}\n\nfunction convertDateFromTimezoneToLocal(dbDateString, timezone) {\n    if (!/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/.test(dbDateString)) {\n        //console.log('convertDBDateToLocal format does not match', dbDateString);\n        return dbDateString;\n    }\n    checkMoment();\n    dbDateString = $.trim(dbDateString.replace(/[^ 0-9:-]/g, ''));\n    timezone = $.trim(timezone);\n    var m = moment.tz(dbDateString, timezone).local();\n    return m.format(\"YYYY-MM-DD HH:mm:ss\");\n}\n\nfunction checkMoment() {\n    /*\n     while(typeof moment === 'undefined' || moment.tz !== 'function'){\n     console.log('checkMoment Waiting moment.tz to load');\n     delay(1);\n     }\n     */\n}\n\nfunction addGetParam(_url, _key, _value) {\n    if (typeof _url !== 'string') {\n        return false;\n    }\n    if (typeof _value == 'undefined' || _value == 'undefined' || _value == '') {\n        return _url;\n    }\n    var param = _key + '=' + escape(_value);\n    var sep = '&';\n    if (_url.indexOf('?') < 0) {\n        sep = '?';\n    } else {\n        var lastChar = _url.slice(-1);\n        if (lastChar == '&')\n            sep = '';\n        if (lastChar == '?')\n            sep = '';\n    }\n    _url += sep + param;\n    _url = removeDuplicatedGetParam(_url);\n    return _url;\n}\n\nfunction addQueryStringParameter(_url, _key, _value) {\n    return addGetParam(_url, _key, _value);\n}\n\nfunction removeDuplicatedGetParam(_url) {\n    var queryParam = _url.replace(/^[^?]+\\?/, '');\n    if (queryParam == '') {\n        return _url;\n    }\n    var params = queryParam.split('&'),\n            results = {};\n    for (var i = 0; i < params.length; i++) {\n        var temp = params[i].split('='),\n                key = temp[0],\n                val = temp[1];\n        results[key] = val;\n    }\n\n    var newQueryParam = [];\n    for (var key in results) {\n        newQueryParam.push(key + '=' + results[key]);\n    }\n    var newQueryParamString = newQueryParam.join('&');\n    return _url.replace(queryParam, newQueryParamString);\n}\n\nfunction removeGetParam(_url, parameter) {\n    var queryParam = _url.replace(/^[^?]+\\?/, '');\n    if (queryParam == '') {\n        return _url;\n    }\n    var params = queryParam.split('&'),\n            results = {};\n    for (var i = 0; i < params.length; i++) {\n        var temp = params[i].split('='),\n                key = temp[0],\n                val = temp[1];\n        if (key !== parameter) {\n            results[key] = val;\n        }\n    }\n\n    var newQueryParam = [];\n    for (var key in results) {\n        newQueryParam.push(key + '=' + results[key]);\n    }\n\n    var newQueryParamString = newQueryParam.join('&');\n    queryParam = '?' + queryParam;\n    if (!empty(newQueryParamString)) {\n        newQueryParamString = '?' + newQueryParamString;\n    }\n    return _url.replace(queryParam, newQueryParamString);\n}\n\nfunction readFileCroppie(input, crop) {\n    if ($(input)[0].files && $(input)[0].files[0]) {\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            crop.croppie('bind', {\n                url: e.target.result\n            }).then(function () {\n                //console.log('jQuery bind complete');\n            });\n        }\n\n        reader.readAsDataURL($(input)[0].files[0]);\n    } else {\n        avideoAlert(\"Sorry - you're browser doesn't support the FileReader API\");\n    }\n}\n\nfunction getCroppie(uploadCropObject, callback, width, height) {\n    //console.log('getCroppie 1', uploadCropObject);\n    var ret = uploadCropObject.croppie('result', {type: 'base64', size: {width: width, height: height}, format: 'png'}).then(function (resp) {\n        ////console.log('getCroppie 2 ' + callback, resp);\n        eval(callback + \"(resp);\");\n    }).catch(function (err) {\n        //console.log('cropieError getCroppie => ' + callback, err);\n        eval(callback + \"(null);\");\n    });\n    //console.log('getCroppie 3', ret);\n}\n\nasync function setToolTips() {\n    var selector = '[data-toggle=\"tooltip\"]';\n    if (!$(selector).not('.alreadyTooltip').length) {\n        return false;\n    }\n    try {\n        $(selector).not('.alreadyTooltip').tooltip({container: 'body', html: true});\n        $(selector).not('.alreadyTooltip').on('click', function () {\n            var t = this;\n            setTimeout(function () {\n                try {\n                    $(t).tooltip('hide');\n                } catch (e) {\n\n                }\n            }, 2000);\n        });\n        $(selector).addClass('alreadyTooltip');\n    } catch (e) {\n        console.log('setToolTips', e);\n        setTimeout(function () {\n            setToolTips();\n        }, 1000);\n    }\n\n}\n\nfunction avideoSocketIsActive() {\n    if (typeof isSocketActive == 'function') {\n        return isSocketActive();\n    } else {\n        return false;\n    }\n}\n\nfunction isMediaSiteURL(url) {\n    if (validURL(url)) {\n        if (url.match(/youtube/i) ||\n                url.match(/youtu\\.be/i) ||\n                url.match(/vimeo/i) ||\n                url.match(/dailymotion/i) ||\n                url.match(/metacafe/i) ||\n                url.match(/vid\\.me/i) ||\n                url.match(/rutube\\.ru/i) ||\n                url.match(/ok\\.ru/i) ||\n                url.match(/streamable/i) ||\n                url.match(/twitch/i) ||\n                url.match(/evideoEmbed/i) ||\n                url.match(/videoEmbeded/i)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction avideoSocket() {\n    if (typeof parseSocketResponse === 'function') {\n        parseSocketResponse();\n    }\n}\n\nfunction changeVideoStatus(videos_id, status) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: webSiteRootURL + 'objects/videoStatus.json.php',\n        data: {\"id\": [videos_id], \"status\": status},\n        type: 'post',\n        success: function (response) {\n            modal.hidePleaseWait();\n            if (response.error) {\n                avideoToast(\"Sorry!\", response.msg, \"error\");\n            } else {\n\n                for (var item in response.status) {\n                    var videos_id = response.status[item].videos_id\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_a');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_u');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_i');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_s');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).addClass('status_' + response.status[item].status);\n                }\n\n\n            }\n        }\n    });\n}\n\nfunction avideoAjax(url, data) {\n    avideoAjax2(url, data, true);\n}\n\nfunction avideoAjax2(url, data, pleaseWait) {\n    if(pleaseWait){\n        modal.showPleaseWait();\n    }\n    $.ajax({\n        url: url,\n        data: data,\n        type: 'post',\n        success: function (response) {\n            if(pleaseWait){\n                modal.hidePleaseWait();\n            }\n            if (response.error) {\n                avideoAlertError(response.msg);\n            } else {\n                avideoToastSuccess(response.msg);\n                if (typeof response.eval !== 'undefined') {\n                    eval(response.eval);\n                }\n            }\n        }\n    });\n}\n\nfunction isPlayerUserActive() {\n    return $('#mainVideo').hasClass(\"vjs-user-active\");\n}\n\neventer('beforeunload', function (e) {\n    ////console.log('window.addEventListener(beforeunload');\n    _addViewAsync();\n}, false);\neventer('visibilitychange', function () {\n    if (document.visibilityState === 'hidden') {\n        _addViewAsync();\n    }\n});\nfunction socketClearSessionCache(json) {\n    //console.log('socketClearSessionCache', json);\n    clearCache(false, 0, 1);\n}\n\nasync function animateChilds(selector, type, delay) {\n    var step = delay;\n    $(selector).children().each(function () {\n        var $currentElement = $(this);\n        $currentElement.addClass('animate__animated');\n        $currentElement.addClass(type);\n        $currentElement.css('-webkit-animation-delay', step + \"s\");\n        $currentElement.css('animation-delay', step + \"s\");\n        step += delay;\n    });\n}\n\nfunction goToURLOrAlertError(jsonURL, data) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: jsonURL,\n        method: 'POST',\n        data: data,\n        success: function (response) {\n            if (response.error) {\n                avideoAlertError(response.msg);\n                modal.hidePleaseWait();\n            } else if (response.url) {\n                if (response.msg) {\n                    avideoAlertInfo(response.msg);\n                }\n                document.location = response.url;\n                setTimeout(function () {\n                    modal.hidePleaseWait();\n                }, 3000)\n            } else {\n                avideoResponse(response);\n                modal.hidePleaseWait();\n            }\n        }\n    });\n}\n\nfunction downloadURL(url, filename) {\n    filename = clean_name(filename) + '.' + clean_name(url.split(/[#?]/)[0].split('.').pop().trim());\n    console.log('downloadURL start ', url, filename);\n    var loaded = 0;\n    var contentLength = 0;\n    fetch(url)\n            .then(response => {\n                avideoToastSuccess('Download Start');\n                const contentEncoding = response.headers.get('content-encoding');\n                const contentLength = response.headers.get(contentEncoding ? 'x-file-size' : 'content-length');\n                if (contentLength === null) {\n                    throw Error('Response size header unavailable');\n                }\n\n                const total = parseInt(contentLength, 10);\n                let loaded = 0;\n                return new Response(\n                        new ReadableStream({\n                            start(controller) {\n                                const reader = response.body.getReader();\n                                read();\n                                function read() {\n                                    reader.read().then(({ done, value }) => {\n                                        if (done) {\n                                            controller.close();\n                                            return;\n                                        }\n                                        loaded += value.byteLength;\n                                        var percentageLoaded = Math.round(loaded / total * 100);\n                                        ////console.log(percentageLoaded);\n                                        modal.setProgress(percentageLoaded);\n                                        modal.setText('Downloading ... ' + percentageLoaded + '%');\n                                        controller.enqueue(value);\n                                        read();\n                                    }).catch(error => {\n                                        console.error(error);\n                                        controller.error(error)\n                                    })\n                                }\n                            }\n                        })\n                        );\n            })\n            .then(response => response.blob())\n            .then(blob => {\n                const urlFromBlob = window.URL.createObjectURL(blob);\n                console.log('downloadURL', url, filename, blob);\n                const a = document.createElement('a');\n                a.style.display = 'none';\n                a.href = urlFromBlob;\n                // the filename you want\n                a.download = filename;\n                document.body.appendChild(a);\n                a.click();\n                window.URL.revokeObjectURL(url);\n                modal.hidePleaseWait();\n                avideoToastSuccess('Download complete ' + filename);\n            })\n            .catch(function (err) {\n                //avideoAlertError('Error on download ');\n                console.log(err);\n                addQueryStringParameter(url, 'download', 1);\n                addQueryStringParameter(url, 'title', filename);\n                document.location = url;\n            });\n}\n\nvar downloadURLOrAlertErrorInterval;\nfunction downloadURLOrAlertError(jsonURL, data, filename, FFMpegProgress) {\n    if (empty(jsonURL)) {\n        console.log('downloadURLOrAlertError error empty jsonURL', jsonURL, data, filename, FFMpegProgress);\n        return false;\n    }\n    modal.showPleaseWait();\n    avideoToastInfo('Converting');\n    console.log('downloadURLOrAlertError 1', jsonURL, FFMpegProgress);\n    checkFFMPEGProgress(FFMpegProgress);\n    $.ajax({\n        url: jsonURL,\n        method: 'POST',\n        data: data,\n        success: function (response) {\n            clearInterval(downloadURLOrAlertErrorInterval);\n            if (response.error) {\n                avideoAlertError(response.msg);\n                modal.hidePleaseWait();\n            } else if (response.url) {\n                if (response.msg) {\n                    avideoAlertInfo(response.msg);\n                }\n                if (\n                        isMobile()\n                        //|| /cdn.ypt.me/.test(response.url)\n                        ) {\n                    window.open(response.url, '_blank');\n                    avideoToastInfo('Opening file');\n                    //document.location = response.url\n                } else {\n                    downloadURL(response.url, filename);\n                }\n            } else {\n                avideoResponse(response);\n                modal.hidePleaseWait();\n            }\n        }\n    });\n}\n\nfunction checkFFMPEGProgress(FFMpegProgress) {\n    if (empty(FFMpegProgress)) {\n        return false;\n    }\n    $.ajax({\n        url: FFMpegProgress,\n        success: function (response) {\n            //console.log(response);\n            if (typeof response.progress.progress !== 'undefined') {\n                var text = 'Converting ...';\n                if (typeof response.progress.progress !== 'undefined') {\n                    text += response.progress.progress + '% ';\n                    modal.setProgress(response.progress.progress);\n                }\n                modal.setText(text);\n                if (response.progress.progress !== 100) {\n                    setTimeout(function () {\n                        checkFFMPEGProgress(FFMpegProgress);\n                    }, 1000);\n                }\n            }\n        }\n    });\n}\n\nfunction startGoogleAd(selector) {\n    if (isVisibleAndInViewport(selector)) {\n        //console.log('startGoogleAd', selector);\n        try {\n            (adsbygoogle = window.adsbygoogle || []).push({});\n        } catch (e) {\n            //console.log('startGoogleAd ERROR', selector, $(selector), e);\n        }\n\n    } else {\n        setTimeout(function () {\n            startGoogleAd(selector);\n        }, 1000);\n    }\n}\n\nfunction isVisibleAndInViewport(selector) {\n    if ($(selector).is(\":visible\")) {\n        var elementTop = $(selector).offset().top;\n        var elementBottom = elementTop + $(selector).outerHeight();\n        var viewportTop = $(window).scrollTop();\n        var viewportBottom = viewportTop + $(window).height();\n        return elementBottom > viewportTop && elementTop < viewportBottom;\n    } else {\n        return false;\n    }\n}\n\nvar playAudioTimeout = [];\nvar showEnableAudioMessage = true;\nvar audioList = [];\nfunction playAudio(mp3) {\n    clearTimeout(playAudioTimeout[mp3]);\n    playAudioTimeout[mp3] = setTimeout(function () {\n        var audio = new Audio();\n        audio.autoplay = true;\n        audio.src = \"data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\";\n        audio.src = mp3;\n        audioList[mp3] = audio;\n        //console.log('playAudio', audioList);\n        ////console.log('pling setTimeout', audio);\n        const promise = audio.play();\n        if (promise !== undefined) {\n            ////console.log('pling promise', promise);\n            promise.then((response) => {\n                ////console.log('pling audio played', response);\n                plingEnabled = false;\n                setTimeout(function () {\n                    plingEnabled = true;\n                }, 3000);\n            }).catch(error => {\n                ////console.log('pling audio disabled', error);\n                if (showEnableAudioMessage) {\n                    showEnableAudioMessage = false;\n                    avideoAlertInfo('Click here to enable audio');\n                }\n            });\n        }\n    }, 500);\n    return playAudioTimeout[mp3];\n}\n\nfunction stopAllAudio() {\n    var audios = document.getElementsByTagName('audio');\n    for (var i = 0, len = audios.length; i < len; i++) {\n        if (audios[i] != e.target) {\n            audios[i].pause();\n        }\n    }\n    for (var i in audioList) {\n        if (typeof audioList[i] === 'object') {\n            audioList[i].pause();\n        }\n    }\n}\n\nfunction isSameDomain(url) {\n    var hrefURL, pageURL;\n    hrefURL = new URL(url);\n    pageURL = new URL(window.location);\n    if (url.startsWith(\"/\") || hrefURL.host === pageURL.host) {\n        return true;\n    }\n    return false;\n}\n\nfunction empty(data) {\n    var type = typeof (data);\n    if (type == 'undefined' || data === null) {\n        return true;\n    } else if (type === 'function') {\n        return false;\n    } else if (type === 'number') {\n        return data == 0;\n    } else if (type === 'boolean') {\n        return !data;\n    } else if (type === 'string') {\n        return /^[\\s]*$/.test(data);\n    } else if (type !== 'undefined') {\n        return Object.keys(data).length == 0;\n    }\n    for (var i in data) {\n        if (data.hasOwnProperty(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction in_array(needle, haystack) {\n    var length = haystack.length;\n    for (var i = 0; i < length; i++) {\n        if (haystack[i] == needle)\n            return true;\n    }\n    return false;\n}\n\nfunction replaceLast(find, replace, string) {\n    var lastIndex = string.lastIndexOf(find);\n\n    if (lastIndex === -1) {\n        return string;\n    }\n\n    var beginString = string.substring(0, lastIndex);\n    var endString = string.substring(lastIndex + find.length);\n\n    return beginString + replace + endString;\n}\n\n\nfunction getCursorPos(input) {\n    if (\"selectionStart\" in input && document.activeElement == input) {\n        return {\n            start: input.selectionStart,\n            end: input.selectionEnd\n        };\n    } else if (input.createTextRange) {\n        var sel = document.selection.createRange();\n        if (sel.parentElement() === input) {\n            var rng = input.createTextRange();\n            rng.moveToBookmark(sel.getBookmark());\n            for (var len = 0; rng.compareEndPoints(\"EndToStart\", rng) > 0; rng.moveEnd(\"character\", -1)) {\n                len++;\n            }\n            rng.setEndPoint(\"StartToStart\", input.createTextRange());\n            for (var pos = {start: 0, end: len}; rng.compareEndPoints(\"EndToStart\", rng) > 0; rng.moveEnd(\"character\", -1)) {\n                pos.start++;\n                pos.end++;\n            }\n            return pos;\n        }\n    } else if (document.getSelection) {    // all browsers, except IE before version 9\n        var sel = document.getSelection();\n        return {\n            start: sel.anchorOffset,\n            end: sel.focusOffset\n        };\n    }\n    return -1;\n}\n\nfunction isUserOnline(users_id) {\n    users_id = parseInt(users_id);\n    if (typeof users_id_online === 'undefined' || empty(users_id_online)) {\n        return false;\n    }\n    if (typeof users_id_online[users_id] === 'undefined' || empty(users_id_online[users_id])) {\n        return false;\n    }\n    if (empty(users_id_online[users_id].resourceId)) {\n        return false;\n    }\n    return users_id_online[users_id];\n}\n\nfunction isReadyToCheckIfIsOnline() {\n    return !empty(users_id_online);\n}\n\nvar addAtMentionActive = false;\nfunction addAtMention(selector) {\n    var emojioneArea = false;\n    if (typeof $(selector).data(\"emojioneArea\") !== 'undefined') {\n        emojioneArea = selector;\n        selector = '.emojionearea-editor';\n    }\n    //console.log('addAtMention(selector)', selector, emojioneArea);\n    var SpaceKeyCode = ' '.charCodeAt(0);\n    var AtMatcher = /^@.+/i;\n    $(selector).on(\"keydown\", function (event) {\n        if (!$(this).autocomplete(\"instance\").menu.active) {\n            if (\n                    event.keyCode === SpaceKeyCode ||\n                    event.keyCode === $.ui.keyCode.TAB ||\n                    event.keyCode === $.ui.keyCode.ENTER ||\n                    event.keyCode === $.ui.keyCode.ESCAPE) {\n                $(this).autocomplete(\"close\");\n            }\n        } else {\n            if ((event.keyCode === $.ui.keyCode.TAB)) {\n                event.preventDefault();\n            }\n        }\n    })\n            .autocomplete({\n                minLength: 2,\n                source: function (request, response) {\n\n                    var pos = getCursorPos($(selector)[0]);\n                    stringStart = request.term.substring(0, pos.end);\n\n                    var term = stringStart.split(/\\s+/).pop();\n                    //console.log('autocomplete', request.term, term, AtMatcher.test(term));\n                    if (AtMatcher.test(term)) {\n                        $.ajax({\n                            url: webSiteRootURL + \"objects/mention.json.php\",\n                            data: {\n                                term: term\n                            },\n                            success: function (data) {\n                                response(data);\n                            }\n                        });\n                    } else {\n                        return false;\n                    }\n                },\n                focus: function () {\n                    // prevent value inserted on focus\n                    return false;\n                },\n                select: function (event, ui) {\n                    addAtMentionActive = true;\n                    setTimeout(function () {\n                        addAtMentionActive = false;\n                    }, 200);\n                    if (emojioneArea) {\n                        this.value = $(emojioneArea).data(\"emojioneArea\").getText();\n                    }\n                    //console.log('addAtMention', this, this.value);\n                    var pos = getCursorPos($(selector)[0]);\n                    stringStart = this.value.substring(0, pos.end);\n                    stringEnd = this.value.substring(pos.end);\n\n                    var terms = stringStart.split(/\\s+/);\n                    // remove the current input\n                    var word = terms.pop();\n                    // add the selected item\n                    //terms.push('@' + ui.item.value);\n                    // add placeholder to get the comma-and-space at the end\n                    //terms.push(\"\");\n                    replace = '@' + ui.item.value;\n\n                    this.value = replaceLast(word, '@' + ui.item.value, stringStart) + stringEnd;\n                    if (emojioneArea) {\n                        $(emojioneArea).data(\"emojioneArea\").setText(this.value);\n                        setTimeout(function () {\n                            contentEditableElement = document.getElementsByClassName(\"emojionearea-editor\")[0];\n                            range = document.createRange();//Create a range (a range is a like the selection but invisible)\n                            range.selectNodeContents(contentEditableElement);//Select the entire contents of the element with the range\n                            range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\n                            selection = window.getSelection();//get the selection object (allows you to change selection)\n                            selection.removeAllRanges();//remove any selections already made\n                            selection.addRange(range);//make the range you have just created the visible selection\n                        }, 50);\n                    }\n                    return false;\n                },\n                create: function () {\n                    $(this).data('ui-autocomplete')._renderItem = function (ul, item) {\n                        return $('<li>' + item.label + '</li>').appendTo(ul); // customize your HTML\n                    };\n                },\n                position: {collision: \"flip\"}\n            });\n}\n/*\n async function selectAElements() {\n $(\"a\").each(function () {\n var location = window.location.toString()\n var res = location.split(\"?\");\n pathWitoutGet = res[0];\n if ($(this).attr(\"href\") == window.location.pathname\n || $(this).attr(\"href\") == window.location\n || $(this).attr(\"href\") == pathWitoutGet) {\n $(this).addClass(\"selected\");\n }\n });\n }*/\n\nvar hidePleaseWaitTimeout = {};\nvar pleaseWaitIsINUse = {};\nvar pleaseNextIndex = 0;\nfunction getPleaseWait() {\n    return (function () {\n        var index = pleaseNextIndex;\n        pleaseNextIndex++;\n        var selector = \"#pleaseWaitDialog_\" + index;\n        var pleaseWaitDiv = $(selector);\n        if (pleaseWaitDiv.length === 0) {\n            //console.log('getPleaseWait', index);\n            if (typeof avideoLoader == 'undefined') {\n                avideoLoader = '';\n            }\n            pleaseWaitDiv = $('<div id=\"pleaseWaitDialog_' + index + '\" class=\"pleaseWaitDialog modal fade\"  data-backdrop=\"static\" data-keyboard=\"false\">' + avideoLoader + '<h2 style=\"display:none;\">Processing...</h2><div class=\"progress\" style=\"display:none;\"><div class=\"progress-bar progress-bar-success progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%\"></div></div></div>').appendTo('body');\n        }\n\n        return {\n            showPleaseWait: function () {\n                if (!empty(pleaseWaitIsINUse[index])) {\n                    console.log('showPleaseWait is in use', index, new Error().stack);\n                    return false;\n                }\n                pleaseWaitIsINUse[index] = true;\n                $(selector).removeClass('loaded');\n                $(selector).find('.progress').hide();\n                this.setText('Processing...');\n                $(selector).find('h2').hide();\n                this.setProgress(0);\n                $(selector).find('.progress').hide();\n                pleaseWaitDiv.modal();\n            },\n            hidePleaseWait: function () {\n                clearTimeout(hidePleaseWaitTimeout[index]);\n                hidePleaseWaitTimeout[index] = setTimeout(function () {\n                    setTimeout(function () {\n                        $(selector).addClass('loaded');\n                    }, showPleaseWaitTimeOut / 2);\n                    setTimeout(function () {\n                        pleaseWaitDiv.modal('hide');\n                    }, showPleaseWaitTimeOut); // wait for loader animation\n                    setTimeout(function () {\n                        pleaseWaitIsINUse[index] = false;\n                    }, showPleaseWaitTimeOut + 1000);\n                }, 500);\n            },\n            setProgress: function (valeur) {\n                var progressSelector = selector + ' .progress';\n                //console.log('showPleaseWait setProgress', progressSelector);\n                $(progressSelector).slideDown();\n                $(selector).find('.progress-bar').css('width', valeur + '%').attr('aria-valuenow', valeur);\n            },\n            setText: function (text) {\n                var textSelector = selector + ' h2';\n                //console.log('showPleaseWait setText', textSelector);\n                $(textSelector).slideDown();\n                $(textSelector).html(text);\n            },\n            getProgressSelector: function () {\n                var progressSelector = selector + ' .progress';\n                return progressSelector;\n            },\n        };\n    })();\n}\n\n$(document).ready(function () {\n    getServerTime();\n    addViewFromCookie();\n    checkDescriptionArea();\n    setInterval(function () {// check for the carousel\n        checkDescriptionArea();\n    }, 3000);\n    Cookies.set('timezone', timezone, {\n        path: '/',\n        expires: 365\n    });\n    tabsCategoryDocumentHeight = $(document).height();\n    if (typeof $('.nav-tabs-horizontal').scrollingTabs == 'function') {\n        $('.nav-tabs-horizontal').scrollingTabs();\n        //$('.nav-tabs-horizontal').fadeIn();\n    }\n    setInterval(function () {\n        if (tabsCategoryDocumentHeightChanged()) {\n            if (typeof $('.nav-tabs-horizontal').scrollingTabs == 'function') {\n                $('.nav-tabs-horizontal').scrollingTabs('refresh');\n            }\n        }\n    }, 2000);\n    modal = getPleaseWait();\n    try {\n        $('[data-toggle=\"popover\"]').popover();\n    } catch (e) {\n\n    }\n\n    setInterval(function () {\n        setToolTips();\n    }, 5000);\n    lazyImage();\n    //aHrefToAjax();\n    //selectAElements();\n    $('#clearCache, .clearCacheButton').on('click', function (ev) {\n        ev.preventDefault();\n        clearCache(true, 0, 0);\n    });\n    $('.clearCacheFirstPageButton').on('click', function (ev) {\n        ev.preventDefault();\n        clearCache(true, 1, 0);\n    });\n    $('#generateSiteMap, .generateSiteMapButton').on('click', function (ev) {\n        ev.preventDefault();\n        modal.showPleaseWait();\n        $.ajax({\n            url: webSiteRootURL + 'objects/configurationGenerateSiteMap.json.php',\n            success: function (response) {\n                if (!response.error) {\n                    avideoAlert(\"Congratulations!\", \"File created!\", \"success\");\n                } else {\n                    if (response.msg) {\n                        avideoAlert(\"Sorry!\", response.msg, \"error\");\n                    } else {\n                        avideoAlert(\"Sorry!\", \"File NOT created!\", \"error\");\n                    }\n                }\n                modal.hidePleaseWait();\n            }\n        });\n    });\n    setPlayerListners();\n    $('.duration:contains(\"00:00:00\"), .duration:contains(\"EE:EE:EE\")').hide();\n    checkSocketStatus();\n    checkSavedCookies();\n    $(\"input.saveCookie\").change(function () {\n        var auto = $(this).prop('checked');\n        Cookies.set($(this).attr(\"name\"), auto, {\n            path: '/',\n            expires: 365\n        });\n    });\n    if (isAutoplayEnabled()) {\n        $(\"#autoplay\").prop('checked', true);\n    }\n    $(\"#autoplay\").change(function () {\n        checkAutoPlay();\n    });\n    checkAutoPlay();\n    // Code to handle install prompt on desktop\n    //aHrefToAjax();\n\n    _alertFromGet('error');\n    _alertFromGet('msg');\n    _alertFromGet('success');\n    _alertFromGet('toast');\n\n});\n\nasync function _alertFromGet(type) {\n    if (urlParams.has(type)) {\n        var msg = urlParams.get(type);\n        var div = document.createElement(\"div\");\n        div.innerHTML = msg;\n        var text = div.textContent || div.innerText || \"\";\n        if (!empty(text)) {\n            switch (type) {\n                case 'error':\n                    avideoAlertError(text);\n                    break;\n                case 'msg':\n                    avideoAlertInfo(text);\n                    break;\n                case 'success':\n                    avideoAlertSuccess(text);\n                    break;\n                case 'toast':\n                    avideoToast(text);\n                    break;\n            }\n            var url = removeGetParam(window.location.href, type);\n            window.history.pushState({}, document.title, url);\n        }\n    }\n}\n\n\nasync function checkSocketStatus() {\n    if (typeof conn != 'undefined') {\n        if (avideoSocketIsActive()) {\n            $(\".socketStatus\").removeClass('disconnected');\n        } else {\n            $(\".socketStatus\").addClass('disconnected');\n        }\n    }\n    setTimeout(function () {\n        checkSocketStatus();\n    }, 1000);\n}\n\nasync function checkSavedCookies() {\n    $(\"input.saveCookie\").each(function () {\n        var mycookie = Cookies.get($(this).attr('name'));\n        if (mycookie && mycookie == \"true\") {\n            $(this).prop('checked', mycookie);\n        }\n    });\n}\n\nfunction openWindow(url) {\n    var windowObject = window.open(url, '_blank').focus();\n    return windowObject;\n}\n\nfunction openWindowWithPost(url, name, params, strWindowFeatures) {\n    if (empty(strWindowFeatures)) {\n        strWindowFeatures = \"directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,resizable=no,height=600,width=800\";\n    }\n    var windowObject = window.open(\"about:blank\", name, strWindowFeatures);\n    postFormToTarget(url, name, params);\n    return windowObject;\n}\n\nfunction postFormToTarget(url, name, params) {\n    var form = document.createElement(\"form\");\n    form.setAttribute(\"method\", \"post\");\n    form.setAttribute(\"action\", url);\n    form.setAttribute(\"target\", name);\n    for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n            var input = document.createElement('input');\n            input.type = 'hidden';\n            input.name = i;\n            input.value = params[i];\n            form.appendChild(input);\n        }\n    }\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n}\n\nfunction fixAdSize() {\n    ad_container = $('#mainVideo_ima-ad-container');\n    if (ad_container.length) {\n        height = ad_container.css('height');\n        width = ad_container.css('width');\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'height': height});\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'width': width});\n    }\n}\n\n/**\n * recreate the sources from the video source tags\n * @type type\n */\nvar videoJSRecreateSourcesTimeout;\nasync function videoJSRecreateSources(defaultSource) {\n    clearTimeout(videoJSRecreateSourcesTimeout);\n    if (empty(player) || empty(player.options_)) {\n        videoJSRecreateSourcesTimeout = setTimeout(function () {\n            videoJSRecreateSources(defaultSource);\n        }, 1000);\n        console.log('videoJSRecreateSources player is empty');\n        return false;\n    }\n\n    var newSources = [];\n\n    $(\"#mainVideo source\").each(function (index) {\n        var res = $(this).attr(\"res\");\n        if (empty(res)) {\n            res = 'auto';\n        }\n        var source = {\n            res: $(this).attr(\"res\"),\n            label: $(this).attr(\"label\"),\n            type: $(this).attr(\"type\"),\n            src: $(this).attr(\"src\"),\n        };\n        ////console.log('videoJSRecreateSources', $(this), source);\n        newSources.push(source);\n    });\n    if (empty(newSources)) {\n        console.log('videoJSRecreateSources: source are empty');\n        return false;\n    }\n\n    player.options_.sources = newSources;\n    if (!empty(player.updateSrc)) {\n        player.updateSrc(player.options_.sources);\n    }\n    if (!empty(player.currentResolution) && !empty(defaultSource)) {\n        player.currentResolution(defaultSource.label, null);\n    }\n    if (!empty(fixResolutionMenu)) {\n        fixResolutionMenu();\n    }\n}\n\n/**\n * \n * MEDIA_ERR_ABORTED (numeric value 1)\n MEDIA_ERR_NETWORK (numeric value 2)\n MEDIA_ERR_DECODE (numeric value 3)\n MEDIA_ERR_SRC_NOT_SUPPORTED (numeric value 4)\n MEDIA_ERR_ENCRYPTED (numeric value 5)\n */\nvar AvideoJSErrorReloadedTimes = 0;\nfunction AvideoJSError(code) {\n    switch (code) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            if (empty(AvideoJSErrorReloadedTimes)) {\n                AvideoJSErrorReloadedTimes++;\n                console.log('AvideoJSError reloadVideoJS in 2 sec');\n                setTimeout(function () {\n                    //reloadVideoJS();\n                }, 2000);\n            } else if (AvideoJSErrorReloadedTimes === 1) {\n                console.log('AvideoJSError reloadDefaultHTML5Player');\n                AvideoJSErrorReloadedTimes++;\n                //var sources = player.currentSources();\n                //reloadDefaultHTML5Player();\n            }\n            break;\n    }\n}\n\nfunction reloadDefaultHTML5Player() {\n    var videoElement;\n    if ($('#mainVideo video').length) {\n        videoElement = $('#mainVideo video').clone();\n    } else if ($('#mainVideo').length) {\n        videoElement = $('#mainVideo').clone();\n    } else {\n        return false;\n    }\n    videoElement.attr('id', 'mainVideo');\n    videoElement.attr('controls', 'controls');\n    videoElement.removeClass('vjs-tech');\n    player.dispose();\n\n    $(\"#main-video\").empty();\n    $(\"#main-video\").append(videoElement);\n\n    player = document.getElementById(\"mainVideo\");\n}\n\nfunction isPromise(p) {\n    if (typeof p === 'object' && typeof p.then === 'function') {\n        return true;\n    }\n\n    return false;\n}\n\nfunction replaceAll(str, find, replace) {\n    return str.replace(new RegExp(find, 'g'), replace);\n}\n\nfunction getExtension(url) {\n    if (empty(url)) {\n        return false;\n    }\n    let domain = (new URL(url));\n    var extension = domain.pathname.split('.').pop().toLowerCase();\n    return extension;\n}\n\nfunction getMimeType(url) {\n    if (empty(url)) {\n        return false;\n    }\n    var extension = getExtension(url);\n    var type = 'text/plain';\n    if (extension === 'js') {\n        type = 'application/javascript';\n    } else if (extension === 'css') {\n        type = 'text/css';\n    } else if (extension === 'ico') {\n        type = 'image/x-icon';\n    } else if (extension === 'jpg' || extension === 'jpeg') {\n        type = 'image/jpeg';\n    } else if (extension === 'gif') {\n        type = 'image/gif';\n    } else if (extension === 'webp') {\n        type = 'image/webp';\n    } else if (extension === 'woff') {\n        type = 'font/woff';\n    } else if (extension === 'woff2') {\n        type = 'font/woff2';\n    } else if (extension === 'pdf') {\n        type = 'application/pdf';\n    } else if (extension === 'zip') {\n        type = 'application/zip';\n    }\n    return type;\n}\n\nfunction isValidURL(value) {\n    if (empty(value)) {\n        return false;\n    }\n    if (/^(ws|wss):\\/\\//i.test(value)) {\n        return true;\n    }\n    if (/^(https?|ftp):\\/\\//i.test(value)) {\n        return true;\n    }\n    return /^(?:(?:(?:https?|ftp|ws|wss):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(value);\n}\n\nfunction blobToURL(blob, type) {\n    blob = blob.slice(0, blob.size, type);\n    var src;\n    if (window.webkitURL != null) {\n        src = window.webkitURL.createObjectURL(blob);\n    } else {\n        src = window.URL.createObjectURL(blob);\n    }\n    return src;\n}\n\nfunction isOnline() {\n    //console.log('window.navigator.onLine', window.navigator.onLine);\n    return window.navigator.onLine;\n}\nvar notifyInputIfIsOutOfBounds_removeClassTImeout;\nvar notifyInputIfIsOutOfBounds_animateClassTImeout;\nfunction notifyInputIfIsOutOfBounds(selector, min_length, max_length) {\n    clearTimeout(notifyInputIfIsOutOfBounds_removeClassTImeout);\n    clearTimeout(notifyInputIfIsOutOfBounds_animateClassTImeout);\n    var text = $(selector).val();\n    var parent = $(selector).parent();\n    var animationInfo = 'animate__headShake';\n    var animationError = 'animate__shakeX';\n    var animationWarning = 'animate__headShake';\n    parent.removeClass('has-error');\n    parent.removeClass('has-warning');\n    parent.removeClass('has-info');\n    parent.removeClass('has-success');\n    parent.removeClass('has-feedback');\n    $(selector).removeClass(animationInfo);\n    $(selector).removeClass(animationError);\n    $(selector).removeClass(animationWarning);\n    $(selector).addClass('animate__animated');\n    parent.find('.help-block').remove();\n    parent.find('.form-control-feedback').remove();\n    var isRequired = min_length == 0 || !empty($(selector).attr('required'));\n    var icon = '';\n    var feedback = '';\n    var force_length = parseInt($(selector).attr('maxlength'));\n\n    if (text.length == 0 && !isRequired) {\n\n    } else if (isTextOutOfBounds(text, min_length, max_length, isRequired)) {\n        var feedbackIcon = 'fas fa-exclamation';\n        parent.addClass('has-feedback');\n        if (!empty(force_length) && text.length >= force_length) {\n            text = text.substr(0, force_length);\n            $(selector).val(text);\n            icon = '<i class=\"fas fa-exclamation-triangle\"></i>';\n            parent.addClass('has-info');\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationInfo);\n            }, 500);\n        } else if (text.length < min_length || !isRequired) {\n            icon = '<i class=\"fas fa-exclamation-circle\"></i>';\n            parent.addClass('has-warning');\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationWarning);\n            }, 500);\n        } else {\n            icon = '<i class=\"fas fa-exclamation-circle\"></i>';\n            parent.addClass('has-error');\n            feedbackIcon = 'fas fa-times';\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationError);\n            }, 500);\n        }\n        feedback = '<i class=\"' + feedbackIcon + ' form-control-feedback\" style=\"right:15px;\"></i>';\n    } else {\n        //console.log('notifyInputIfIsOutOfBounds', text.length, force_length);\n        if (!empty(force_length) && text.length == force_length) {\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationInfo);\n            }, 500);\n        }\n        icon = '<i class=\"fas fa-check-circle\"></i>';\n        parent.addClass('has-success');\n    }\n    notifyInputIfIsOutOfBounds_removeClassTImeout = setTimeout(function () {\n        $(selector).removeClass(animationInfo);\n        $(selector).removeClass(animationError);\n        $(selector).removeClass(animationWarning);\n    }, 1000);\n    parent.append(feedback + '<small class=\"help-block\">' + icon + ' ' + text.length + ' characters of ' + min_length + '-' + max_length + ' recommended</small>');\n}\n\nfunction passStrengthCheck(selector) {\n    var minLen = 6;\n    var pass = $(selector).val();\n\n    var strength = 0;\n    var strengthMsg = [];\n    if (pass.length > minLen) {\n        strength++;\n    } else {\n        strengthMsg.push('Min length ' + minLen);\n    }\n    if (/[a-z]+/.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Lower case letters');\n    }\n    if (/[A-Z]+/.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Upper case letters');\n    }\n    if (/[0-9]+/.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Numbers');\n    }\n    if (/[^a-z0-9]+/i.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Special chars');\n    }\n    return {strength: strength, strengthMsg: strengthMsg};\n}\n\nfunction passStrengthCheckInput(selector) {\n    var strengthCheck = passStrengthCheck(selector);\n    var msg = strengthCheck.strengthMsg;\n    var parent = $(selector).parent();\n    parent.removeClass('has-error');\n    parent.removeClass('has-warning');\n    parent.removeClass('has-success');\n    avideoTooltip(selector, '');\n    var pass = $(selector).val();\n    if (empty(pass)) {\n        return false;\n    }\n    switch (strengthCheck.strength) {\n        case 0:\n        case 1:\n        case 2:\n            parent.addClass('has-error');\n            break;\n        case 3:\n        case 4:\n            parent.addClass('has-warning');\n            break;\n        case 5:\n            parent.addClass('has-success');\n            break;\n    }\n    if (!empty(msg)) {\n        var text = msg.join(', ');\n        avideoTooltip(selector, 'Strength: ' + text);\n    }\n    return true;\n}\n\nfunction passStrengthCheckInputKeyUp(selector) {\n    $(selector).keyup(function () {\n        passStrengthCheckInput('#' + $(this).attr('id'));\n    });\n}\n\nfunction setupFormElement(selector, min_length, max_length, force_length, isRequired) {\n    $(selector).attr('min_length', min_length);\n    $(selector).attr('max_length', max_length);\n    if (!isRequired) {\n        $(selector).removeAttr('required');\n    } else {\n        $(selector).attr('required', 'required');\n    }\n    if (force_length) {\n        $(selector).attr('maxlength', max_length);\n        $(selector).attr('minlength', min_length);\n    }\n    $(selector).keyup(function () {\n        notifyInputIfIsOutOfBounds('#' + $(this).attr('id'), $(this).attr('min_length'), $(this).attr('max_length'));\n    });\n}\n\nvar notifyInputIfIsWrongFormat_removeClassTImeout;\nvar notifyInputIfIsWrongFormat_animateClassTImeout;\nfunction notifyInputIfIsWrongFormat(_this, isValid) {\n    clearTimeout(notifyInputIfIsWrongFormat_removeClassTImeout);\n    clearTimeout(notifyInputIfIsWrongFormat_animateClassTImeout);\n    var text = $(_this).val();\n    var parent = $(_this).parent();\n    var animationError = 'animate__shakeX';\n    var feedback = '';\n    parent.removeClass('has-error');\n    parent.removeClass('has-success');\n    $(_this).removeClass(animationError);\n    $(_this).addClass('animate__animated');\n    parent.find('.help-block').remove();\n    parent.find('.form-control-feedback').remove();\n    if (!isValid) {\n        feedbackIcon = 'fas fa-times';\n        parent.addClass('has-error');\n        notifyInputIfIsWrongFormat_animateClassTImeout = setTimeout(function () {\n            $(_this).addClass(animationError);\n        }, 1000);\n    } else {\n        feedbackIcon = 'fas fa-check';\n        parent.addClass('has-success');\n    }\n    feedback = '<i class=\"' + feedbackIcon + ' form-control-feedback\" style=\"top: 25px;right:15px;\"></i>';\n    notifyInputIfIsWrongFormat_removeClassTImeout = setTimeout(function () {\n        $(_this).removeClass(animationError);\n    }, 1000);\n    parent.append(feedback);\n    $(_this).val(text);\n}\n\nfunction setupMySQLInput(selector) {\n    if (typeof $(selector).inputmask !== 'function') {\n        addScript(webSiteRootURL + 'node_modules/inputmask/dist/jquery.inputmask.min.js');\n        setTimeout(function () {\n            setupMySQLInput(selector);\n        }, 1000);\n        return false;\n    }\n    $(selector).inputmask({\n        mask: \"9999-99-99 99:99:99\",\n        onincomplete: function (buffer, opts) {\n            notifyInputIfIsWrongFormat($(this), false);\n        },\n        oncomplete: function (buffer, opts) {\n            notifyInputIfIsWrongFormat($(this), true);\n        }\n    });\n}\n\nfunction isTextOutOfBounds(text, min_length, max_length, isRequired) {\n    //console.log('isTextOutOfBounds', text, min_length, max_length, allow_null);\n    if (empty(text)) {\n        if (!empty(min_length) && isRequired) {\n            //console.log('isTextOutOfBounds 1');\n            return true;\n        } else {\n            //console.log('isTextOutOfBounds 2');\n            return false;\n        }\n    }\n    if (text.length < min_length) {\n        //console.log('isTextOutOfBounds 3');\n        return true;\n    }\n    if (text.length > max_length) {\n        //console.log('isTextOutOfBounds 4');\n        return true;\n    }\n    //console.log('isTextOutOfBounds 5');\n    return false;\n}\n\n/**\n * Usage: setVideoSuggested(videos_id, isSuggested).then((data) => {...}).catch((error) => {console.log(error)});\n * @param {type} videos_id\n * @param {type} isSuggested\n * @returns {Promise}\n */\nasync function setVideoSuggested(videos_id, isSuggested) {\n    modal.showPleaseWait();\n    return new Promise((resolve, reject) => {\n        $.ajax({\n            url: webSiteRootURL + 'objects/videoSuggest.php',\n            data: {\"id\": videos_id, \"isSuggested\": isSuggested},\n            type: 'post',\n            success: function (data) {\n                modal.hidePleaseWait();\n                avideoResponse(data);\n                resolve(data)\n            },\n            error: function (error) {\n                modal.hidePleaseWait();\n                reject(error)\n            },\n        })\n    })\n}\n\nfunction toogleVideoSuggested(btn) {\n    var videos_id = $(btn).attr('videos_id');\n    var isSuggested = $(btn).hasClass('isSuggested');\n    setVideoSuggested(videos_id, !isSuggested).then((data) => {\n        if (!isSuggested) {\n            $(btn).removeClass('isNotSuggested btn-default');\n            $(btn).addClass('isSuggested btn-warning');\n        } else {\n            $(btn).addClass('isNotSuggested btn-default');\n            $(btn).removeClass('isSuggested btn-warning');\n        }\n    }).catch((error) => {\n        console.log(error)\n    });\n}\n\n\n// Cookie functions stolen from w3schools\nfunction setCookie(cname, cvalue, exdays) {\n    Cookies.set(cname, cvalue, {\n        path: '/',\n        expires: exdays\n    });\n}\n\nfunction getCookie(cname) {\n    return Cookies.get(cname);\n}\n\nfunction delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n}\n\nfunction arrayToTemplate(itemsArray, template) {\n    if (typeof itemsArray == 'function') {\n        return '';\n    }\n    if (typeof template !== 'string') {\n        console.error('arrayToTemplate', typeof template, template);\n        return '';\n    }\n    for (var search in itemsArray) {\n        var replace = itemsArray[search];\n        if (typeof replace == 'function') {\n            continue;\n        }\n        template = template.replace(new RegExp('{' + search + '}', 'g'), replace);\n    }\n    template = template.replace(new RegExp('{[^\\}]}', 'g'), '');\n    return template;\n}\n/*\n function avideoLoadPage(url) {\n console.log('avideoLoadPage', url);\n avideoPushState(url);\n if (inMainIframe()) {\n parent.avideoLoadPage(url);\n } else {\n document.location = url;\n }\n }\n \n function avideoLoadPage3(url) {\n console.log('avideoLoadPage3', url);\n avideoPushState(url);\n if (inMainIframe()) {\n parent.modal.showPleaseWait();\n } else {\n modal.showPleaseWait();\n }\n $.ajax({\n url: url,\n success: function (data) {\n var parser = new DOMParser();\n var htmlDoc = parser.parseFromString(data, \"text/html\");\n $('body').fadeOut('fast', function () {\n var head = $(htmlDoc).find('head');\n $('head').html(head.html());\n var selector = 'body > .container-fluid, body > .container';\n var container = $(htmlDoc).find(selector).html();\n $(selector).html(container);\n var scriptsToAdd = $(htmlDoc).find('body script');\n addScripts(scriptsToAdd);\n var footerCode = $(htmlDoc).find('#pluginFooterCode').html();\n $('#pluginFooterCode').html(footerCode);\n $('body').fadeIn('fast', function () {\n if (inMainIframe()) {\n parent.modal.hidePleaseWait();\n parent.updatePageFromIframe();\n } else {\n modal.hidePleaseWait();\n }\n //aHrefToAjax();\n });\n });\n }\n });\n }\n \n function avideoLoadPage2(url) {\n console.log('avideoLoadPage', url);\n avideoPushState(url);\n modal.showPleaseWait();\n $.ajax({\n url: url,\n success: function (data) {\n var parser = new DOMParser();\n var htmlDoc = parser.parseFromString(data, \"text/html\");\n \n $('body').fadeOut('fast', function () {\n var bodyElement = $(htmlDoc).find('body');\n var head = $(htmlDoc).find('head').html();\n var body = bodyElement.html();\n var _class = bodyElement.attr('class');\n var id = bodyElement.attr('id');\n var style = bodyElement.attr('style');\n $('head').html(head);\n $('body').attr('class', _class);\n $('body').attr('id', id);\n $('body').attr('style', style);\n $('body').html(body);\n $('#pluginFooterCode').fadeIn('slow', function () {\n modal.hidePleaseWait();\n });\n });\n }\n });\n }\n \n \n async function aHrefToAjax() {\n if(typeof useIframe === 'undefined' || !useIframe){\n return false;\n }\n $('a.aHrefToAjax').off('click');\n $('a').click(function (evt) {\n var target = $(this).attr('target');\n $(this).addClass('aHrefToAjax');\n if (empty(target)) {\n var url = $(this).attr('href');\n if (isValidURL(url)) {\n evt.preventDefault();\n avideoLoadPage(url);\n return false;\n }\n }\n });\n }\n \n function addScripts(scriptsToAdd) {\n var localScripts = $(\"script\");\n for (index in scriptsToAdd) {\n var script = scriptsToAdd[index];\n if (typeof script === 'object') {\n var src = $(script).attr('src');\n console.log(typeof script, typeof $(script));\n if (empty(src)) {\n try {\n $('body').append(script);\n } catch (e) {\n \n }\n } else {\n var scriptFound = false;\n localScripts.each(function () {\n var _src = $(this).attr('src');\n \n if (src === _src) {\n scriptFound = true;\n return false;\n }\n });\n if (!scriptFound) {\n $('<script src=\"' + src + '\" type=\"text/javascript\"></script>').appendTo(document.body);\n }\n }\n }\n }\n }\n * */\n\nfunction addScript(src) {\n    if (!empty(src)) {\n        var localScripts = $(\"script\");\n        var scriptFound = false;\n        localScripts.each(function () {\n            var _src = $(this).attr('src');\n\n            if (src === _src) {\n                scriptFound = true;\n                return false;\n            }\n        });\n        if (!scriptFound) {\n            console.log('addScript', src);\n            $('<script src=\"' + src + '\" type=\"text/javascript\"></script>').appendTo(document.body);\n        } else {\n            console.log('addScript already added ', src);\n        }\n    }\n}\n\nfunction avideoLogoff(redirect) {\n    sendAVideoMobileLiveStreamerMessage('logoff', '');\n    if (redirect) {\n        document.location = webSiteRootURL + 'logoff';\n    }\n}\n\nasync function sendAVideoMobileLiveStreamerMessage(type, value){\n    if (typeof window.flutter_inappwebview !== 'undefined') {\n        if (typeof window.flutter_inappwebview.callHandler == 'function') {\n            for (i = 0; i < 10; i++) {\n                response = await window.flutter_inappwebview.callHandler('AVideoMobileLiveStreamer' + i, {type: type, value: value, instanceIndex: i});\n                if(response!==null){\n                    console.log('sendAVideoMobileLiveStreamerMessage executed', i, response, type, value);\n                    break;\n                }else{\n                    console.log('sendAVideoMobileLiveStreamerMessage not found', i, type, value);\n                }\n            }\n        } else {\n            console.log('sendAVideoMobileLiveStreamerMessage will try again', type, value);\n            setTimeout(function () {\n                sendAVideoMobileLiveStreamerMessage(type, value);\n            }, 1000);\n        }\n    } else {\n        //window.parent.postMessage({type: type, value: value}, '*');\n        window.top.postMessage({type: type, value: value}, '*');\n    }\n}\nwindow.addEventListener(\"flutterInAppWebViewPlatformReady\", function (event) {\n    sendAVideoMobileLiveStreamerMessage('APPIsReady', 1);\n});\n\nfunction getUser() {\n    var url = webSiteRootURL + 'plugin/API/get.json.php?APIName=user';\n    return $.ajax({\n        url: url,\n        async: false\n    }).responseText;\n}\n"], "fixing_code": ["try {\n    var _serverTime;\n    var _serverDBTime;\n    var _serverTimeString;\n    var _serverDBTimeString;\n    var _serverTimezone;\n    var _serverDBTimezone;\n    var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    var modal;\n    var player;\n    var floatLeft = \"\";\n    var floatTop = \"\";\n    var floatWidth = \"\";\n    var floatHeight = \"\";\n    var changingVideoFloat = 0;\n    var floatClosed = 0;\n    var fullDuration = 0;\n    var isPlayingAd = false;\n    var mainVideoHeight = 0;\n    var mouseX;\n    var mouseY;\n    var videoContainerDragged = false;\n    var youTubeMenuIsOpened = false;\n    var userIsControling = false;\n    var playerCurrentTime;\n    var mediaId;\n    var isDebuging = false;\n    var avideoIsOnline = false;\n    var userLang = navigator.language || navigator.userLanguage;\n    var iframeAllowAttributes = 'allow=\"fullscreen;autoplay;camera *;microphone *;\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" msallowfullscreen=\"msallowfullscreen\" oallowfullscreen=\"oallowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\"';\n\n    // Create browser compatible event handler.\n    var eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";\n    var eventer = window[eventMethod];\n    var messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";\n    // Listen for a message from the iframe.\n    eventer(messageEvent, function (e) {\n        ////console.log('EventListener', e.data);\n        if (e.data.getHeight) {\n            var height = $('body > div.container-fluid').height();\n            if (!height) {\n                height = $('body > div.container').height();\n            }\n            if (!height) {\n                height = $('body').height();\n            }\n            parent.postMessage({height: height}, '*');\n        }else if (e.data.play) {\n            var currentTime = e.data.play.currentTime;\n            var muted = !empty(e.data.play.muted);\n            if(!muted){\n                playerPlay(currentTime);\n            }else{\n                tryToPlayMuted(currentTime);\n            }\n        }\n    }, false);\n\n    eventer(\"online\", function (e) {\n        avideoToastSuccess(\"Connected\");\n        setBodyOnline();\n    }, false);\n\n    eventer(\"offline\", function (e) {\n        avideoToastError(\"Disconnected\");\n        setBodyOnline();\n    }, false);\n\n    setBodyOnline();\n} catch (e) {\n    //console.log('Variable declaration ERROR', e);\n}\n\nvar queryString = window.location.search;\nvar urlParams = new URLSearchParams(queryString);\n\nif (urlParams.has('debug')) {\n    isDebuging = false;\n}\n\nfunction escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nif (typeof String.prototype.replaceAll === \"undefined\") {\n    console.log('replaceAll is undefined');\n    String.prototype.replaceAll = function (match, _replace) {\n        return this.replace(new RegExp(escapeRegExp(match), 'g'), _replace);\n    }\n}\n\nasync function setBodyOnline() {\n    if (isOnline()) {\n        $('body').removeClass('isOffline');\n        $('body').addClass('isOnline');\n    } else {\n        $('body').removeClass('isOnline');\n        $('body').addClass('isOffline');\n    }\n}\n\nfunction consolelog() {\n    if (isDebuging) {\n        for (var item in arguments) {\n            console.log(arguments[item]);\n        }\n    }\n}\n\nfunction consoleLog() {\n    return consolelog();\n}\n\n$(document).mousemove(function (e) {\n    mouseX = e.pageX;\n    mouseY = e.pageY;\n});\nString.prototype.stripAccents = function () {\n    var returnvar = this.replace(/[\u00e1\u00e0\u00e2\u00e3\u00aa\u00e4\u0105]/g, 'a');\n    returnvar = returnvar.replace(/[\u00c1\u00c0\u00c2\u00c3\u00c4\u0104]/g, 'A');\n    returnvar = returnvar.replace(/[\u00cd\u00cc\u00ce\u00cf]/g, 'I');\n    returnvar = returnvar.replace(/[\u00ed\u00ec\u00ee\u00ef]/g, 'i');\n    returnvar = returnvar.replace(/[\u00e9\u00e8\u00ea\u00eb\u0119]/g, 'e');\n    returnvar = returnvar.replace(/[\u00c9\u00c8\u00ca\u00cb\u0118]/g, 'E');\n    returnvar = returnvar.replace(/[\u00f3\u00f2\u00f4\u00f5\u00ba\u00f6]/g, 'o');\n    returnvar = returnvar.replace(/[\u00d3\u00d2\u00d4\u00d5\u00d6]/g, 'O');\n    returnvar = returnvar.replace(/[\u00fa\u00f9\u00fb\u00fc]/g, 'u');\n    returnvar = returnvar.replace(/[\u00da\u00d9\u00db\u00dc]/g, 'U');\n    returnvar = returnvar.replace(/[\u00e7\u0107]/g, 'c');\n    returnvar = returnvar.replace(/[\u00c7\u0106]/g, 'C');\n    returnvar = returnvar.replace(/[\u00f1\u0144]/g, 'n');\n    returnvar = returnvar.replace(/[\u00d1\u0143]/g, 'N');\n    returnvar = returnvar.replace(/\u2013/g, '-');\n    returnvar = returnvar.replace(/[\u2019\u2018\u2039\u203a\u201a]/g, ' ');\n    returnvar = returnvar.replace(/[\u201c\u201d\u00ab\u00bb\u201e]/g, ' ');\n    returnvar = returnvar.replace(/\u0404/g, 'YE');\n    returnvar = returnvar.replace(/\u0406/g, 'I');\n    returnvar = returnvar.replace(/\u0403/g, 'G');\n    returnvar = returnvar.replace(/\u0456/g, 'i');\n    returnvar = returnvar.replace(/\u2116/g, '#');\n    returnvar = returnvar.replace(/\u0454/g, 'ye');\n    returnvar = returnvar.replace(/\u0453/g, 'g');\n    returnvar = returnvar.replace(/\u0410/g, 'A');\n    returnvar = returnvar.replace(/\u0411/g, 'B');\n    returnvar = returnvar.replace(/\u0412/g, 'V');\n    returnvar = returnvar.replace(/\u0413/g, 'G');\n    returnvar = returnvar.replace(/\u0414/g, 'D');\n    returnvar = returnvar.replace(/\u0415/g, 'E');\n    returnvar = returnvar.replace(/\u0401/g, 'YO');\n    returnvar = returnvar.replace(/\u0416/g, 'ZH');\n    returnvar = returnvar.replace(/[\u0417\u017b\u0179]/g, 'Z');\n    returnvar = returnvar.replace(/\u0418/g, 'I');\n    returnvar = returnvar.replace(/\u0419/g, 'J');\n    returnvar = returnvar.replace(/\u041a/g, 'K');\n    returnvar = returnvar.replace(/[\u041b\u0141]/g, 'L');\n    returnvar = returnvar.replace(/\u041c/g, 'M');\n    returnvar = returnvar.replace(/\u041d/g, 'N');\n    returnvar = returnvar.replace(/\u041e/g, 'O');\n    returnvar = returnvar.replace(/\u041f/g, 'P');\n    returnvar = returnvar.replace(/\u0420/g, 'R');\n    returnvar = returnvar.replace(/[\u0421\u015a]/g, 'S');\n    returnvar = returnvar.replace(/\u0422/g, 'T');\n    returnvar = returnvar.replace(/\u0423/g, 'U');\n    returnvar = returnvar.replace(/\u0424/g, 'F');\n    returnvar = returnvar.replace(/\u0425/g, 'H');\n    returnvar = returnvar.replace(/\u0426/g, 'C');\n    returnvar = returnvar.replace(/\u0427/g, 'CH');\n    returnvar = returnvar.replace(/\u0428/g, 'SH');\n    returnvar = returnvar.replace(/\u0429/g, 'SHH');\n    returnvar = returnvar.replace(/\u042a/g, '');\n    returnvar = returnvar.replace(/\u042b/g, 'Y');\n    returnvar = returnvar.replace(/\u042c/g, '');\n    returnvar = returnvar.replace(/\u042d/g, 'E');\n    returnvar = returnvar.replace(/\u042e/g, 'YU');\n    returnvar = returnvar.replace(/\u042f/g, 'YA');\n    returnvar = returnvar.replace(/\u0430/g, 'a');\n    returnvar = returnvar.replace(/\u0431/g, 'b');\n    returnvar = returnvar.replace(/\u0432/g, 'v');\n    returnvar = returnvar.replace(/\u0433/g, 'g');\n    returnvar = returnvar.replace(/\u0434/g, 'd');\n    returnvar = returnvar.replace(/\u0435/g, 'e');\n    returnvar = returnvar.replace(/\u0451/g, 'yo');\n    returnvar = returnvar.replace(/\u0436/g, 'zh');\n    returnvar = returnvar.replace(/[\u0437\u017c\u017a]/g, 'z');\n    returnvar = returnvar.replace(/\u0438/g, 'i');\n    returnvar = returnvar.replace(/\u0439/g, 'j');\n    returnvar = returnvar.replace(/\u043a/g, 'k');\n    returnvar = returnvar.replace(/[\u043b\u0142]/g, 'l');\n    returnvar = returnvar.replace(/\u043c/g, 'm');\n    returnvar = returnvar.replace(/\u043d/g, 'n');\n    returnvar = returnvar.replace(/\u043e/g, 'o');\n    returnvar = returnvar.replace(/\u043f/g, 'p');\n    returnvar = returnvar.replace(/\u0440/g, 'r');\n    returnvar = returnvar.replace(/[\u0441\u015b]/g, 's');\n    returnvar = returnvar.replace(/\u0442/g, 't');\n    returnvar = returnvar.replace(/\u0443/g, 'u');\n    returnvar = returnvar.replace(/\u0444/g, 'f');\n    returnvar = returnvar.replace(/\u0445/g, 'h');\n    returnvar = returnvar.replace(/\u0446/g, 'c');\n    returnvar = returnvar.replace(/\u0447/g, 'ch');\n    returnvar = returnvar.replace(/\u0448/g, 'sh');\n    returnvar = returnvar.replace(/\u0449/g, 'shh');\n    returnvar = returnvar.replace(/\u044a/g, '');\n    returnvar = returnvar.replace(/\u044b/g, 'y');\n    returnvar = returnvar.replace(/\u044c/g, '');\n    returnvar = returnvar.replace(/\u044d/g, 'e');\n    returnvar = returnvar.replace(/\u044e/g, 'yu');\n    returnvar = returnvar.replace(/\u044f/g, 'ya');\n    returnvar = returnvar.replace(/\u2014/g, '-');\n    returnvar = returnvar.replace(/\u00ab/g, '');\n    returnvar = returnvar.replace(/\u00bb/g, '');\n    returnvar = returnvar.replace(/\u2026/g, '');\n    return returnvar;\n};\nfunction clean_name(str) {\n\n    str = str.stripAccents().toLowerCase();\n    return str.replace(/[!#$&'()*+,/:;=?@[\\] ]+/g, \"-\");\n}\n\nvar processing_lazyImage = false;\nasync function lazyImage() {\n    if (processing_lazyImage) {\n        return false;\n    }\n    processing_lazyImage = true;\n    try {\n        if ($(\".thumbsJPG\").length) {\n            $('.thumbsJPG').lazy({\n                effect: 'fadeIn',\n                visibleOnly: true,\n                // called after an element was successfully handled\n                afterLoad: function (element) {\n\n                    element.addClass('gifNotLoaded');\n                    element.removeClass('blur');\n                    element.mouseover(function () {\n\n                        if ($(this).hasClass('gifNotLoaded')) {\n                            var element = $(this);\n                            element.removeClass('gifNotLoaded');\n                            var gif = element.parent().find('.thumbsGIF');\n                            gif.lazy({\n                                effect: 'fadeIn'\n                            });\n                            /*\n                             gif.addClass('animate__animated');\n                             gif.addClass('animate__bounceIn');\n                             gif.css('-webkit-animation-delay', step+\"s\");\n                             gif.css('animation-delay', \"1s\");\n                             */\n\n                            gif.height(element.height());\n                            gif.width(element.width());\n                            ////console.log('lazyImage', gif);\n                        }\n\n                        $(\"#log\").append(\"<div>Handler for .mouseover() called.</div>\");\n                    });\n                }\n            });\n            mouseEffect();\n        }\n    } catch (e) {\n    }\n    processing_lazyImage = false;\n}\n\nvar pauseIfIsPlayinAdsInterval;\nvar seconds_watching_video = 0;\nvar _startCountPlayingTime;\nasync function setPlayerListners() {\n    if (typeof player !== 'undefined') {\n        player.on('pause', function () {\n            clearTimeout(promisePlayTimeout);\n            //console.log(\"setPlayerListners: pause\");\n            //userIsControling = true;\n            clearInterval(pauseIfIsPlayinAdsInterval);\n            clearInterval(_startCountPlayingTime);\n        });\n        player.on('play', function () {\n            isTryingToPlay = false;\n            clearTimeout(promisePlayTimeout);\n            if (startCurrentTime) {\n                setTimeout(function () {\n                    setCurrentTime(startCurrentTime);\n                    startCurrentTime = 0;\n                }, 100);\n            }\n            //console.log(\"setPlayerListners: play\");\n            //userIsControling = true;\n            pauseIfIsPlayinAdsInterval = setInterval(function () {\n                pauseIfIsPlayinAds();\n            }, 500);\n            clearInterval(_startCountPlayingTime);\n            _startCountPlayingTime = setInterval(function () {\n                seconds_watching_video++;\n            }, 1000);\n        });\n        $(\"#mainVideo .vjs-mute-control\").click(function () {\n            Cookies.set('muted', player.muted(), {\n                path: '/',\n                expires: 365\n            });\n        });\n    } else {\n        setTimeout(function () {\n            setPlayerListners();\n        }, 2000);\n    }\n}\n\nfunction removeTracks() {\n    var oldTracks = player.remoteTextTracks();\n    var i = oldTracks.length;\n    while (i--) {\n        player.removeRemoteTextTrack(oldTracks[i]);\n    }\n}\n\nfunction changeVideoSrc(vid_obj, source) {\n    var srcs = [];\n    removeTracks();\n    var autoLoad = true;\n    for (i = 0; i < source.length; i++) {\n        if (source[i].type) {\n            if (source[i].type === \"application/x-mpegURL\") {\n                // it is HLS cancel it\n                //return false;\n                autoLoad = false;\n            }\n            srcs.push(source[i]);\n        } else if (source[i].srclang) {\n            player.addRemoteTextTrack(source[i]);\n        }\n    }\n    //console.log('changeVideoSrc srcs', srcs);\n    vid_obj.src(srcs);\n    setTimeout(function () {\n        if (autoLoad) {\n            changeVideoSrcLoad();\n        } else {\n            player.play();\n        }\n    }, 1000);\n    return true;\n}\n\nfunction changeVideoSrcLoad() {\n    //console.log(\"changeVideoSrcLoad: Try to load player\");\n    player.load();\n    player.ready(function () {\n        //console.log(\"changeVideoSrcLoad: Player ready\");\n        var err = this.error();\n        if (err && err.code) {\n            //console.log(\"changeVideoSrcLoad: Load player Error\");\n            setTimeout(function () {\n                changeVideoSrcLoad();\n            }, 1000);\n        } else {\n            //console.log(\"changeVideoSrcLoad: Load player Success, Play\");\n            setTimeout(function () {\n                player.load();\n                //console.log(\"changeVideoSrcLoad: Trying to play\");\n                player.play();\n            }, 1000);\n        }\n    });\n}\nvar _reloadAdsTimeout;\nvar isReloadingAds = false;\nfunction reloadAds() {\n    if (isReloadingAds) {\n        return false;\n    }\n    isReloadingAds = true;\n    setTimeout(function () {\n        isReloadingAds = false;\n    }, 500);\n    clearTimeout(_reloadAdsTimeout);\n    //console.log('reloadAds ');\n    if (playerIsReady() && player.ima) {\n        try {\n            //console.log('reloadAds player.ima.getAdsManager()', player.ima.getAdsManager());\n            if (player.ima.getAdsManager()) {\n                player.ima.requestAds();\n            }\n            player.ima.changeAdTag(null);\n            player.ima.setContentWithAdTag(null, _adTagUrl, false);\n            player.ima.changeAdTag(_adTagUrl);\n            setTimeout(function () {\n                player.ima.requestAds();\n                //console.log('reloadAds done');\n            }, 2000);\n            player.ima.requestAds();\n        } catch (e) {\n            //console.log('reloadAds ERROR', e.message);\n        }\n    } else {\n        _reloadAdsTimeout = setTimeout(function () {\n            reloadAds();\n        }, 200);\n    }\n}\n\nfunction validateEmail(email) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nfunction isEmailValid(email) {\n    return validateEmail(email);\n}\n\nfunction subscribe(email, user_id) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: webSiteRootURL + 'objects/subscribe.json.php',\n        method: 'POST',\n        data: {\n            'email': email,\n            'user_id': user_id\n        },\n        success: function (response) {\n            var totalElement = $('.notificationButton' + user_id + ' .badge');\n            if (response.subscribe == \"i\") {\n                $('.notificationButton' + user_id).removeClass(\"subscribed\");\n                totalElement.text(parseInt(totalElement.first().text()) - 1);\n            } else {\n                $('.notificationButton' + user_id).addClass(\"subscribed\");\n                totalElement.text(parseInt(totalElement.first().text()) + 1);\n            }\n            if (!response.notify) {\n                $('.notificationButton' + user_id).removeClass(\"notify\");\n            } else {\n                $('.notificationButton' + user_id).addClass(\"notify\");\n            }\n            $('#popover-content #subscribeEmail').val(email);\n            $('.subscribeButton' + user_id).popover('hide');\n            modal.hidePleaseWait();\n        }\n    });\n}\n\nfunction toogleNotify(user_id) {\n    email = $('#subscribeEmail' + user_id).val();\n    subscribeNotify(email, user_id);\n}\nfunction subscribeNotify(email, user_id) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: webSiteRootURL + 'objects/subscribeNotify.json.php',\n        method: 'POST',\n        data: {\n            'email': email,\n            'user_id': user_id\n        },\n        success: function (response) {\n            if (response.notify) {\n                $('.notificationButton' + user_id).addClass(\"notify\");\n            } else {\n                $('.notificationButton' + user_id).removeClass(\"notify\");\n            }\n            modal.hidePleaseWait();\n        }\n    });\n}\nasync function mouseEffect() {\n    $(\".thumbsImage\").on(\"mouseenter\", function () {\n        var gif = $(this).find(\".thumbsGIF\");\n        var jpg = $(this).find(\".thumbsJPG\");\n        try {\n            gif.lazy({effect: 'fadeIn'});\n            setTimeout(function () {\n                gif.height(jpg.height());\n                gif.width(jpg.width());\n            }, 100);\n        } catch (e) {\n        }\n        gif.height(jpg.height());\n        gif.width(jpg.width());\n        gif.stop(true, true).fadeIn();\n    });\n    $(\".thumbsImage\").on(\"mouseleave\", function () {\n        $(this).find(\".thumbsGIF\").stop(true, true).fadeOut();\n    });\n}\n\nfunction isMobile() {\n    var check = false;\n    (function (a) {\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)))\n            check = true\n    })(navigator.userAgent || navigator.vendor || window.opera);\n    return check;\n}\n\nvar last_videos_id = 0;\nvar last_currentTime = -1;\nvar videoViewAdded = false;\nvar addViewBeaconTimeout;\nvar _addViewCheck = false;\nfunction addView(videos_id, currentTime) {\n    addViewSetCookie(PHPSESSID, videos_id, currentTime, seconds_watching_video);\n    if (_addViewCheck) {\n        return false;\n    }\n    if (last_videos_id == videos_id && last_currentTime == currentTime) {\n        return false;\n    }\n    if (currentTime > 5 && currentTime % 30 !== 0) { // only update each 30 seconds\n        return false;\n    }\n    _addViewCheck = true;\n    last_videos_id = videos_id;\n    last_currentTime = currentTime;\n    _addView(videos_id, currentTime, seconds_watching_video);\n    setTimeout(function () {\n        _addViewCheck = false\n    }, 1000);\n    return true;\n}\n\nfunction _addView(videos_id, currentTime, seconds_watching_video) {\n    if (typeof PHPSESSID == 'undefined') {\n        PHPSESSID = '';\n    }\n    var url = webSiteRootURL + 'objects/videoAddViewCount.json.php';\n    if (empty(PHPSESSID)) {\n        return false;\n    }\n    url = addGetParam(url, 'PHPSESSID', PHPSESSID);\n    //console.log('_addView', videos_id, currentTime);\n    $.ajax({\n        url: url,\n        method: 'POST',\n        data: {\n            id: videos_id,\n            currentTime: currentTime,\n            seconds_watching_video: seconds_watching_video\n        },\n        success: function (response) {\n            $('.view-count' + videos_id).text(response.countHTML);\n        }\n    });\n}\n\nvar _addViewAsyncSent = false;\nfunction _addViewAsync() {\n    if (_addViewAsyncSent || typeof webSiteRootURL == 'undefined' || typeof player == 'undefined') {\n        return false;\n    }\n    if (typeof PHPSESSID == 'undefined') {\n        PHPSESSID = '';\n    }\n    //console.log('_addViewAsync', mediaId, playerCurrentTime);\n    var url = webSiteRootURL + 'objects/videoAddViewCount.json.php';\n    url = addGetParam(url, 'PHPSESSID', PHPSESSID);\n    _addViewAsyncSent = true;\n    _addView(mediaId, playerCurrentTime, seconds_watching_video);\n    setTimeout(function () {\n        _addViewAsyncSent = false;\n    }, 2000);\n}\n\nvar _addViewFromCookie_addingtime = false;\nasync function addViewFromCookie() {\n    if (typeof webSiteRootURL == 'undefined') {\n        return false;\n    }\n    if (_addViewFromCookie_addingtime) {\n        return false;\n    }\n    _addViewFromCookie_addingtime = true;\n    var addView_PHPSESSID = Cookies.get('addView_PHPSESSID');\n    var addView_videos_id = Cookies.get('addView_videos_id');\n    var addView_playerCurrentTime = Cookies.get('addView_playerCurrentTime');\n    var addView_seconds_watching_video = Cookies.get('addView_seconds_watching_video');\n    if (!addView_PHPSESSID || addView_PHPSESSID === 'false' ||\n            !addView_videos_id || addView_videos_id === 'false' ||\n            !addView_playerCurrentTime || addView_playerCurrentTime === 'false' ||\n            !addView_seconds_watching_video || addView_seconds_watching_video === 'false') {\n        return false;\n    }\n    //console.log('addViewFromCookie', addView_videos_id, addView_playerCurrentTime, addView_seconds_watching_video);\n    var url = webSiteRootURL + 'objects/videoAddViewCount.json.php';\n    url = addGetParam(url, 'PHPSESSID', addView_PHPSESSID);\n    if (mediaId == addView_videos_id) {\n        // it is the same video, play at the last moment\n        forceCurrentTime = addView_playerCurrentTime;\n    }\n\n    _addView(addView_videos_id, addView_playerCurrentTime, addView_seconds_watching_video)\n    setTimeout(function () {\n        _addViewFromCookie_addingtime = false;\n    }, 2000);\n    addViewSetCookie(false, false, false, false);\n\n}\n\nasync function addViewSetCookie(PHPSESSID, videos_id, playerCurrentTime, seconds_watching_video) {\n    ////console.log('addViewSetCookie', videos_id, playerCurrentTime, seconds_watching_video, new Error().stack);\n    Cookies.set('addView_PHPSESSID', PHPSESSID, {\n        path: '/',\n        expires: 1\n    });\n    Cookies.set('addView_videos_id', videos_id, {\n        path: '/',\n        expires: 1\n    });\n    Cookies.set('addView_playerCurrentTime', playerCurrentTime, {\n        path: '/',\n        expires: 1\n    });\n    Cookies.set('addView_seconds_watching_video', seconds_watching_video, {\n        path: '/',\n        expires: 1\n    });\n}\n\nfunction getPlayerButtonIndex(name) {\n    var children = player.getChild('controlBar').children();\n    for (i = 0; i < children.length; i++) {\n        if (children[i].name_ === name) {\n            return i;\n        }\n    }\n    return children.length;\n}\n\nasync function copyToClipboard(text) {\n    $('body').append('<textarea id=\"elementToCopyAvideo\" style=\"filter: alpha(opacity=0);-moz-opacity: 0;-khtml-opacity: 0; opacity: 0;position: absolute;z-index: -9999;top: 0;left: 0;pointer-events: none;\"></textarea>');\n    $('#elementToCopyAvideo').css({'top': mouseY, 'left': 0}).fadeIn('slow');\n    $('#elementToCopyAvideo').val(text);\n    $('#elementToCopyAvideo').focus();\n    $('#elementToCopyAvideo').select();\n    document.execCommand('copy');\n    $('#elementToCopyAvideo').remove();\n    $.toast(\"Copied to Clipboard\");\n}\n\nfunction nl2br(str, is_xhtml) {\n    if (typeof str === 'undefined' || str === null) {\n        return '';\n    }\n    var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';\n    return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + breakTag + '$2');\n}\n\nfunction inMainIframe() {\n    var response = false;\n    if (window.self !== window.top) {\n        try {\n            var mainIframe = $('iframe', window.parent.document).attr('id');\n            response = mainIframe === 'mainIframe';\n        } catch (e) {\n\n        }\n\n    }\n    return response;\n}\n\nfunction inIframe() {\n    if (inMainIframe()) {\n        return false;\n    }\n    var url = new URL(location.href);\n    var avideoIframe = url.searchParams.get(\"avideoIframe\");\n    if (avideoIframe && avideoIframe !== '0' && avideoIframe !== 0) {\n        return true;\n    }\n    try {\n        return window.self !== window.top;\n    } catch (e) {\n        return true;\n    }\n}\n\nfunction playerIsReady() {\n    return (typeof player !== 'undefined' && player.isReady_);\n}\n\nvar promisePlaytry = 20;\nvar promisePlaytryNetworkFail = 0;\nvar promisePlayTimeoutTime = 500;\nvar promisePlayTimeout;\nvar promisePlay;\nvar browserPreventShowed = false;\nvar playerPlayTimeout;\nvar isTryingToPlay = false;\nvar promisePlaytryNetworkFailTimeout;\nfunction playerPlay(currentTime) {\n    isTryingToPlay = true;\n    clearTimeout(playerPlayTimeout);\n    if (playerIsPlayingAds()) {\n        return false;\n    }\n    if (currentTime) {\n        //console.log(\"playerPlay time:\", currentTime);\n    }\n    if (!playerIsReady()) {\n        playerPlayTimeout = setTimeout(function () {\n            playerPlay(currentTime);\n        }, 200);\n        return false;\n    }\n    if (userIsControling) { // stops here if the user already clicked on play or pause\n        //console.log(\"playerPlay: userIsControling\");\n        return true;\n    }\n    if (promisePlaytry <= 0) {\n        //console.log(\"playerPlay: promisePlaytry <= 0\");\n        if (!browserPreventShowed) {\n            browserPreventShowed = true;\n            $.toast(\"Your browser prevent autoplay\");\n        }\n        return false;\n    }\n    promisePlaytry--;\n    if (typeof player !== 'undefined') {\n        if (currentTime) {\n            setCurrentTime(currentTime);\n        }\n        try {\n            //console.log(\"playerPlay: Trying to play\", player);\n            promisePlay = player.play();\n            if (promisePlay !== undefined) {\n                tryToPlay(currentTime);\n                //console.log(\"playerPlay: promise found\", currentTime);\n                setPlayerListners();\n                promisePlay.then(function () {\n                    //console.log(\"playerPlay: Autoplay started\", currentTime);\n                    userIsControling = true;\n                    if (player.paused()) {\n                        //console.log(\"The video still paused, trying to mute and play\");\n                        if (promisePlaytry <= 10) {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") The video still paused, trying to mute and play\");\n                            tryToPlayMuted(currentTime);\n                        } else {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") The video still paused, trying to play again\");\n                            tryToPlay(currentTime);\n                        }\n                    } else {\n                        //player.muted(false);\n                        if (player.muted() && !inIframe()) {\n                            showUnmutePopup();\n                        }\n                    }\n                }).catch(function (error) {\n                    if (player.networkState() === 3 && promisePlaytryNetworkFail < 5) {\n                        promisePlaytry = 20;\n                        promisePlaytryNetworkFail++;\n                        //console.log(\"playerPlay: Network error detected, trying again\", promisePlaytryNetworkFail);\n                        clearTimeout(promisePlaytryNetworkFailTimeout);\n                        promisePlaytryNetworkFailTimeout = setTimeout(function () {\n                            player.src(player.currentSources());\n                            userIsControling = false;\n                            tryToPlay(currentTime);\n                        }, promisePlaytryNetworkFail * 1000);\n                    } else {\n                        if (promisePlaytryNetworkFail >= 5) {\n                            userIsControling = true;\n                            //console.log(\"playerPlay: (promisePlaytryNetworkFail) Autoplay was prevented\");\n                            player.pause();\n                        } else if (promisePlaytry <= 10) {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") Autoplay was prevented, trying to mute and play ***\");\n                            tryToPlayMuted(currentTime);\n                        } else {\n                            //console.log(\"playerPlay: (\" + promisePlaytry + \") Autoplay was prevented, trying to play again\");\n                            tryToPlay(currentTime);\n                        }\n                    }\n                });\n            } else {\n                tryToPlay(currentTime);\n            }\n        } catch (e) {\n            //console.log(\"playerPlay: We could not autoplay, trying again in 1 second\");\n            tryToPlay(currentTime);\n        }\n    } else {\n        //console.log(\"playerPlay: Player is Undefined\");\n    }\n}\n\nfunction showUnmutePopup() {\n\n    var donotShowUnmuteAgain = Cookies.get('donotShowUnmuteAgain');\n    if (!donotShowUnmuteAgain) {\n        var span = document.createElement(\"span\");\n        span.innerHTML = \"<b>Would</b> you like to unmute it?<div id='allowAutoplay' style='max-height: 100px; overflow-y: scroll;'></div>\";\n        swal({\n            title: \"Your Media is Muted\",\n            icon: \"warning\",\n            content: span,\n            dangerMode: true,\n            buttons: {\n                cancel: \"Cancel\",\n                unmute: true,\n                donotShowUnmuteAgain: {\n                    text: \"Don't show again\",\n                    value: \"donotShowUnmuteAgain\",\n                    className: \"btn-danger\",\n                },\n            }\n        }).then(function (value) {\n            switch (value) {\n                case \"unmute\":\n                    player.muted(false);\n                    break;\n                case \"donotShowUnmuteAgain\":\n                    Cookies.set('donotShowUnmuteAgain', true, {\n                        path: '/',\n                        expires: 365\n                    });\n                    break;\n            }\n        });\n    }\n    showMuteTooltip();\n    setTimeout(function () {\n        $(\"#allowAutoplay\").load(webSiteRootURL + \"plugin/PlayerSkins/allowAutoplay/\");\n        player.userActive(true);\n    }, 500);\n}\n\nfunction tryToPlay(currentTime) {\n    clearTimeout(promisePlayTimeout);\n    promisePlayTimeout = setTimeout(function () {\n        if (player.paused()) {\n            playerPlayTimeout = setTimeout(function () {\n                playerPlay(currentTime);\n            }, 200);\n        }\n    }, promisePlayTimeoutTime);\n}\n\nfunction tryToPlayMuted(currentTime) {\n    muteInCookieAllow();\n    return tryToPlay(currentTime);\n}\n\nfunction muteIfNotAudio() {\n    if (!player.isAudio()) {\n        //console.log(\"muteIfNotAudio: We will mute this video\");\n        player.muted(true);\n        return true;\n    }\n    //console.log(\"muteIfNotAudio: We will not mute an audio\");\n    return false;\n}\n\nfunction muteInCookieAllow() {\n    var mute = Cookies.get('muted');\n    if (isALiveContent() || typeof mute === 'undefined' || (mute && mute !== \"false\")) {\n        //console.log(\"muteInCookieAllow: said yes\");\n        return muteIfNotAudio();\n    }\n    //console.log(\"muteInCookieAllow: said no\");\n    return false;\n}\n\nfunction playMuted(currentTime) {\n    muteInCookieAllow();\n    playerPlayTimeout = setTimeout(function () {\n        playerPlay(currentTime);\n    }, 200);\n}\n\nasync function showMuteTooltip() {\n    if ($(\"#mainVideo .vjs-volume-panel\").length) {\n        if (!$(\"#mainVideo .vjs-volume-panel\").is(\":visible\")) {\n            setTimeout(function () {\n                showMuteTooltip();\n            }, 500);\n            return false;\n        }\n        $(\"#mainVideo .vjs-volume-panel\").attr(\"data-toggle\", \"tooltip\");\n        $(\"#mainVideo .vjs-volume-panel\").attr(\"data-placement\", \"top\");\n        $(\"#mainVideo .vjs-volume-panel\").attr(\"title\", \"Click to activate the sound\");\n        $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip({container: '.vjs-control-bar', html: true});\n        $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip('show');\n        $(\"#mainVideo .vjs-volume-panel\").click(function () {\n            //console.log(\"remove unmute tooltip\");\n            $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip('hide');\n            $(\"#mainVideo .vjs-volume-panel\").removeAttr(\"data-toggle\");\n            $(\"#mainVideo .vjs-volume-panel\").removeAttr(\"data-placement\");\n            $(\"#mainVideo .vjs-volume-panel\").removeAttr(\"title\");\n            $(\"#mainVideo .vjs-volume-panel\").removeData('tooltip').unbind().next('div.tooltip').remove();\n        });\n    }\n    player.userActive(true);\n    setTimeout(function () {\n        player.userActive(true);\n    }, 1000);\n    setTimeout(function () {\n        player.userActive(true);\n    }, 1500);\n    setTimeout(function () {\n        $('#mainVideo .vjs-volume-panel[data-toggle=\"tooltip\"]').tooltip('hide');\n    }, 5000);\n}\n\nfunction playerPlayIfAutoPlay(currentTime) {\n    if (isWebRTC()) {\n        return false;\n    }\n    if (forceCurrentTime !== null) {\n        currentTime = forceCurrentTime;\n        forceCurrentTime = null;\n        //console.log(\"playerPlayIfAutoPlay: forceCurrentTime:\", currentTime);\n    }\n\n    if (currentTime) {\n        setCurrentTime(currentTime);\n    }\n    if (isAutoplayEnabled()) {\n        playerPlayTimeout = setTimeout(function () {\n            //console.log('playerPlayIfAutoPlay true', currentTime);\n            playerPlay(currentTime);\n        }, 200);\n        return true;\n    }\n    //console.log('playerPlayIfAutoPlay false', currentTime);\n    //$.toast(\"Autoplay disabled\");\n    return false;\n}\n\nfunction playerPlayMutedIfAutoPlay(currentTime) {\n    if (isWebRTC()) {\n        return false;\n    }\n    if (forceCurrentTime !== null) {\n        currentTime = forceCurrentTime;\n        forceCurrentTime = null;\n        //console.log(\"playerPlayIfAutoPlay: forceCurrentTime:\", currentTime);\n    }\n\n    if (currentTime) {\n        setCurrentTime(currentTime);\n    }\n    if (isAutoplayEnabled()) {\n        playerPlayTimeout = setTimeout(function () {\n            //console.log('playerPlayIfAutoPlay true', currentTime);\n            tryToPlayMuted(currentTime);\n        }, 200);\n        return true;\n    }\n    //console.log('playerPlayIfAutoPlay false', currentTime);\n    //$.toast(\"Autoplay disabled\");\n    return false;\n}\n\nfunction playNext(url) {\n    if (!player.paused()) {\n        return false;\n    }\n    if (playerIsPlayingAds()) {\n        setTimeout(function () {\n            playNext(url);\n        }, 1000);\n    } else if (isPlayNextEnabled()) {\n        modal.showPleaseWait();\n        if (typeof autoPlayAjax == 'undefined' || !autoPlayAjax) {\n            //console.log(\"playNext changing location \" + url);\n            document.location = url;\n        } else {\n            forceCurrentTime = 0;\n            setCurrentTime(0);\n            //console.log(\"playNext ajax\");\n            $.ajax({\n                url: webSiteRootURL + 'view/infoFromURL.php?url=' + encodeURI(url),\n                success: function (response) {\n                    //console.log(response);\n                    if (!response || response.error) {\n                        //console.log(\"playNext ajax fail\");\n                        if (response.url) {\n                            document.location = response.url;\n                        }\n                    } else {\n                        //console.log(\"playNext ajax success\");\n                        $('topInfo').hide();\n                        playNextURL = (typeof isEmbed !== 'undefined' && isEmbed) ? response.nextURLEmbed : response.nextURL;\n                        //console.log(\"New playNextURL\", playNextURL);\n                        var cSource = false;\n                        try {\n                            cSource = changeVideoSrc(player, response.sources);\n                        } catch (e) {\n                            //console.log('changeVideoSrc', e.message);\n                        }\n                        if (!cSource) {\n                            document.location = url;\n                            return false;\n                        }\n                        mediaId = response.videos_id;\n                        webSocketVideos_id = mediaId;\n                        $('video, #mainVideo').attr('poster', response.poster);\n                        player.poster(response.poster);\n                        history.pushState(null, null, url);\n                        $('.topInfoTitle, title').text(response.title);\n                        $('#topInfo img').attr('src', response.userPhoto);\n                        $('#topInfo a').attr('href', response.url);\n                        modal.hidePleaseWait();\n                        if ($('#modeYoutubeBottom').length) {\n                            $.ajax({\n                                url: url,\n                                success: function (response) {\n                                    modeYoutubeBottom = $(response).find('#modeYoutubeBottom').html();\n                                    $('#modeYoutubeBottom').html(modeYoutubeBottom);\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    } else if (isPlayerLoop()) {\n        avideoToast(\"Looping video\");\n        userIsControling = false;\n        playerPlayTimeout = setTimeout(function () {\n            playerPlay(currentTime);\n        }, 200);\n    }\n}\n\nfunction formatBytes(bytes, decimals) {\n    if (bytes == 0)\n        return '0 Bytes';\n    var k = 1024,\n            dm = decimals <= 0 ? 0 : decimals || 2,\n            sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nasync function tooglePlayerLoop() {\n    setPlayerLoop(!isPlayerLoop());\n}\n\nvar setPlayerLoopSetTimeout;\nasync function setPlayerLoop(loop) {\n    clearTimeout(setPlayerLoopSetTimeout);\n    if (typeof player === 'undefined' && $('#mainVideo').length) {\n        setPlayerLoopSetTimeout = setTimeout(function () {\n            setPlayerLoop(loop)\n        }, 1000);\n        return false;\n    }\n    if (loop) {\n        //console.log(\"Loop ON\");\n        //$.toast(\"Loop ON\");\n        player.loop(1);\n        $(\".loop-button\").removeClass('loop-disabled-button');\n        $(\".loop-button, .loopButton\").addClass('fa-spin');\n    } else {\n        $(\".loop-button\").addClass('loop-disabled-button');\n        $(\".loop-button, .loopButton\").removeClass('fa-spin');\n        //console.log(\"Loop OFF\");\n        //$.toast(\"Loop OFF\");\n        player.loop(0);\n    }\n    Cookies.set('playerLoop', loop, {\n        path: '/',\n        expires: 365\n    });\n    if (typeof setImageLoop === 'function') {\n        setImageLoop();\n    }\n}\n\nasync function setImageLoop() {\n    if (isPlayerLoop()) {\n        $('.loopButton').removeClass('opacityBtn');\n        $('.loopButton').addClass('fa-spin');\n    } else {\n        $('.loopButton').addClass('opacityBtn');\n        $('.loopButton').removeClass('fa-spin');\n    }\n}\n\nfunction toogleImageLoop(t) {\n    tooglePlayerLoop();\n    if (typeof setImageLoop === 'function') {\n        setImageLoop();\n    }\n}\n\nfunction isPlayerLoop() {\n    if (typeof player === 'undefined' && $('#mainVideo').length) {\n        return false;\n    }\n    var loop = Cookies.get('playerLoop');\n    if (!loop || loop === \"false\") {\n        return player.loop();\n    } else {\n        return true;\n    }\n}\n\nfunction isArray(what) {\n    return Object.prototype.toString.call(what) === '[object Array]';\n}\n\nasync function reloadVideoJS() {\n    if (typeof player.currentSources === 'function') {\n        var src = player.currentSources();\n        player.src(src);\n        if (typeof replaceVideoSourcesPerOfflineVersion === 'function') {\n            replaceVideoSourcesPerOfflineVersion();\n        }\n    }\n}\n\nvar initdone = false;\nvar startCurrentTime = 0;\nvar forceCurrentTime = null;\nfunction setCurrentTime(currentTime) {\n    //console.log(\"setCurrentTime:\", currentTime, forceCurrentTime);\n    if (forceCurrentTime !== null) {\n        startCurrentTime = forceCurrentTime;\n        currentTime = forceCurrentTime;\n        forceCurrentTime = null;\n        //console.log(\"forceCurrentTime:\", currentTime);\n    } else if (startCurrentTime != currentTime) {\n        startCurrentTime = currentTime;\n        //console.log(\"setCurrentTime changed:\", currentTime);\n    }\n    //console.log('setCurrentTime', currentTime);\n    if (typeof player !== 'undefined') {\n        if (isTryingToPlay) {\n            if (currentTime <= player.currentTime()) {\n                //console.log('setCurrentTime is trying to play', currentTime);\n                return false; // if is trying to play, only update if the time is greater\n            }\n        }\n        player.currentTime(currentTime);\n        initdone = false;\n        // wait for video metadata to load, then set time \n        player.on(\"loadedmetadata\", function () {\n            //console.log('setCurrentTime loadedmetadata', currentTime);\n            //player.currentTime(currentTime);\n        });\n        // iPhone/iPad need to play first, then set the time\n        // events: https://www.w3.org/TR/html5/embedded-content-0.html#mediaevents\n        player.on(\"canplaythrough\", function () {\n            if (!initdone) {\n                console.log('setCurrentTime canplaythrough', currentTime);\n                player.currentTime(currentTime);\n                initdone = true;\n            }\n        });\n    } else {\n        setTimeout(function () {\n            setCurrentTime(currentTime);\n        }, 1000);\n    }\n}\n\nfunction isALiveContent() {\n    if (typeof isLive !== 'undefined' && isLive && (typeof isOnlineLabel === 'undefined' || isOnlineLabel === true || $('.liveOnlineLabel').hasClass('label-success'))) {\n        return true;\n    }\n    return false;\n}\n\nfunction isWebRTC() {\n    if (typeof _isWebRTC !== 'undefined') {\n        return _isWebRTC;\n    }\n    return false;\n}\n\nfunction isAutoplayEnabled() {\n    //consoleLog(\"Cookies.get('autoplay')\", Cookies.get('autoplay'));\n    if (typeof forceNotautoplay !== 'undefined' && forceNotautoplay) {\n        return false;\n    } else if (typeof forceautoplay !== 'undefined' && forceautoplay) {\n        return true;\n    } else if (isWebRTC()) {\n        consoleLog(\"isAutoplayEnabled said No because is WebRTC \");\n        return false;\n    } else if (isALiveContent()) {\n        consoleLog(\"isAutoplayEnabled always autoplay live contents\");\n        return true;\n    } else\n    if ($(\"#autoplay\").length) {\n        autoplay = $(\"#autoplay\").is(\":checked\");\n        consoleLog(\"isAutoplayEnabled #autoplay said \" + ((autoplay) ? \"Yes\" : \"No\"));\n        setAutoplay(autoplay);\n        return autoplay;\n    } else if (\n            typeof Cookies !== 'undefined' &&\n            typeof Cookies.get('autoplay') !== 'undefined'\n            ) {\n        if (Cookies.get('autoplay') === 'true' || Cookies.get('autoplay') == true) {\n            consoleLog(\"isAutoplayEnabled Cookie said Yes \");\n            setAutoplay(true);\n            return true;\n        } else {\n            consoleLog(\"isAutoplayEnabled Cookie said No \");\n            setAutoplay(false);\n            return false;\n        }\n    } else {\n        if (typeof autoplay !== 'undefined') {\n            consoleLog(\"isAutoplayEnabled autoplay said \" + ((autoplay) ? \"Yes\" : \"No\"));\n            setAutoplay(autoplay);\n            return autoplay;\n        }\n    }\n    setAutoplay(false);\n    consoleLog(\"isAutoplayEnabled Default is No \");\n    return false;\n}\n\nfunction setAutoplay(value) {\n    Cookies.set('autoplay', value, {\n        path: '/',\n        expires: 365\n    });\n}\n\nasync function showAutoPlayVideoDiv() {\n    var auto = $(\"#autoplay\").prop('checked');\n    if (!auto) {\n        $('#autoPlayVideoDiv').slideUp();\n    } else {\n        $('#autoPlayVideoDiv').slideDown();\n    }\n}\n\nfunction enableAutoPlay() {\n    setAutoplay(true);\n    checkAutoPlay();\n}\n\nfunction disableAutoPlay() {\n    setAutoplay(false);\n    checkAutoPlay();\n}\n\nasync function checkAutoPlay() {\n    if (isAutoplayEnabled()) {\n        $(\"#autoplay\").prop('checked', true);\n        $('.autoplay-button').addClass('checked');\n        avideoTooltip(\".autoplay-button\", \"Autoplay is ON\");\n    } else {\n        $(\"#autoplay\").prop('checked', false);\n        $('.autoplay-button').removeClass('checked');\n        avideoTooltip(\".autoplay-button\", \"Autoplay is OFF\");\n    }\n    showAutoPlayVideoDiv();\n}\n\nfunction isPlayNextEnabled() {\n    if (isPlayerLoop()) {\n        return false;\n    } else if (isAutoplayEnabled()) {\n        return true;\n    }\n    return false;\n}\n\nfunction avideoAlert(title, msg, type) {\n    if (typeof msg !== 'string') {\n        return false;\n    }\n    avideoAlertHTMLText(title, msg, type);\n}\n\nfunction avideoAlertOnce(title, msg, type, uid) {\n    var cookieName = 'avideoAlertOnce' + uid;\n    if (!Cookies.get(cookieName)) {\n        var span = document.createElement(\"span\");\n        span.innerHTML = msg;\n        swal({\n            title: title,\n            content: span,\n            icon: type,\n            closeOnClickOutside: false,\n            closeModal: true\n        }).then(okay => {\n            if (okay) {\n                Cookies.set(cookieName, 1, {\n                    path: '/',\n                    expires: 365\n                });\n            }\n        });\n    }\n}\n\nasync function avideoConfirm(msg) {\n    var span = document.createElement(\"span\");\n    span.innerHTML = msg;\n    var response = await swal({\n        title: 'Confrim',\n        content: span,\n        icon: 'warning',\n        closeOnClickOutside: false,\n        closeModal: true,\n        buttons: {\n            cancel: \"Cancel\",\n            confirm: {\n                text: \"Confirm\",\n                value: \"confirm\",\n                className: \"btn-danger\",\n            },\n        }\n    }).then(function (value) {\n        return value == 'confirm';\n    });\n    return response;\n}\n\nfunction avideoAlertOnceForceConfirm(title, msg, type) {\n    var span = document.createElement(\"span\");\n    span.innerHTML = msg;\n    swal({\n        title: title,\n        content: span,\n        icon: type,\n        closeOnClickOutside: false,\n        closeModal: true\n    });\n}\n\nfunction _avideoToast(msg, icon) {\n    var options = {text: msg, hideAfter: 7000};\n    if (icon) {\n        options.icon = icon;\n    }\n    $.toast(options);\n}\nfunction avideoToast(msg) {\n    _avideoToast(msg, null);\n}\nfunction avideoToastInfo(msg) {\n    _avideoToast(msg, 'info');\n}\nfunction avideoToastError(msg) {\n    _avideoToast(msg, 'error');\n}\nfunction avideoToastSuccess(msg) {\n    _avideoToast(msg, 'success');\n}\nfunction avideoToastWarning(msg) {\n    _avideoToast(msg, 'warning');\n}\n\nfunction avideoAlertAJAXHTML(url) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: url,\n        success: function (response) {\n            avideoAlertText(response);\n            modal.hidePleaseWait();\n        }\n    });\n}\n\nfunction avideoAlertAJAX(url) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: url,\n        success: function (response) {\n            avideoResponse(response);\n            modal.hidePleaseWait();\n        }\n    });\n}\n\nfunction avideoAlertHTMLText(title, msg, type) {\n    var isErrorOrWarning = (type == 'error' || type == 'warning');\n    var span = document.createElement(\"span\");\n    span.innerHTML = msg;\n    swal({\n        title: title,\n        content: span,\n        icon: type,\n        closeModal: true,\n        closeOnClickOutside: !isErrorOrWarning,\n        buttons: isErrorOrWarning ? null : (empty(type) ? false : true),\n    });\n}\n\nfunction avideoModalIframeClose() {\n    //console.log('avideoModalIframeClose');\n    try {\n        swal.close();\n    } catch (e) {\n\n    }\n    try {\n        if (inIframe()) {\n            window.parent.swal.close();\n        }\n    } catch (e) {\n\n    }\n}\n\nfunction avideoModalIframeCloseToastSuccess(msg) {\n    avideoModalIframeClose();\n    avideoToastSuccess(msg);\n    window.parent.avideoToastSuccess(msg);\n}\n\nfunction avideoDialog(url, maximize) {\n    if (typeof parent.openWindow === 'function') {\n        url = addGetParam(url, 'avideoIframe', 1);\n        parent.openWindow(url, iframeAllowAttributes, '', maximize);\n    } else {\n        avideoModalIframeFullScreen(url);\n    }\n}\n\nfunction avideoDialogWithPost(url, params) {\n    if (typeof parent.openWindowWithPost === 'function') {\n        parent.openWindowWithPost(url, iframeAllowAttributes, params);\n    } else {\n        openWindowWithPost(url, 'avideoDialogWithPost', params, '');\n    }\n}\n\nfunction avideoModalIframe(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe', false);\n}\n\nfunction avideoModalIframeXSmall(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-xsmall', false);\n}\n\nfunction avideoModalIframeSmall(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-small', false);\n}\n\nfunction avideoModalIframeLarge(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-large', false);\n}\n\nfunction avideoModalIframeFullScreen(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-full', true);\n}\n\nfunction avideoModalIframeFullWithMinimize(url) {\n    if (false && typeof parent.openWindow === 'function') {\n        parent.openWindow(url, iframeAllowAttributes, '', true);\n    } else {\n        avideoModalIframeWithClassName(url, 'swal-modal-iframe-full-with-minimize', true);\n    }\n}\n\nfunction avideoModalIframeFullTransparent(url) {\n    avideoModalIframeWithClassName(url, 'swal-modal-iframe-full-transparent', false);\n}\n\nfunction avideoModalIframeFullScreenMinimize() {\n    $('.swal-modal-iframe-full-with-minimize').closest('.swal-overlay').addClass('swal-offline-video-compress');\n}\n\nfunction avideoModalIframeFullScreenMaximize() {\n    $('.swal-modal-iframe-full-with-minimize').closest('.swal-overlay').removeClass('swal-offline-video-compress');\n}\n\nfunction avideoModalIframeFullScreenClose() {\n    if (typeof swal === 'function') {\n        $('.swal-overlay iframe').attr('src', 'about:blank');\n        try {\n            /*\n             $('.swal-overlay').slideUp();\n             setTimeout(function(){\n             swal.close();\n             },500);\n             */\n            swal.close();\n        } catch (e) {\n\n        }\n    }\n}\n// this is to make sure when the use click on the back page button it will close the iframe\nwindow.onload = function () {\n    if (typeof history.pushState === \"function\") {\n        ////console.log('history.pushState loaded');\n        window.onpopstate = function (e) {\n            ////console.log('onpopstate', e.state, history.state);\n            avideoModalIframeFullScreenClose();\n        };\n    }\n}\n\nfunction avideoModalIframeFull(url) {\n    avideoModalIframeFullScreen(url);\n}\n\nfunction avideoAddIframeIntoElement(element, url, insideSelector) {\n    url = addGetParam(url, 'avideoIframe', 1);\n    //console.log('avideoAddIframeIntoElement', url, element);\n    var html = '';\n    html += '<iframe frameBorder=\"0\" class=\"avideoIframeIntoElement\" src=\"' + url + '\"  ' + iframeAllowAttributes + ' ></iframe>';\n\n    var insideElement = $(element);\n\n    if (!empty(insideSelector)) {\n        insideElement = $(element).find(insideSelector);\n    }\n\n    insideElement.append(html);\n}\n\nfunction avideoWindowIframe(url) {\n    url = addGetParam(url, 'avideoIframe', 1);\n    //console.log('avideoModalIframeWithClassName', url);\n    var html = '';\n    html += '<div class=\"panel panel-default\" id=\"draggable\" style=\"width: 400px; height: 200px; float: left; z-index: 9999;\">';\n    html += '<div class=\"panel-heading\" style=\"cursor: move;\">head</div>';\n    html += '<div class=\"panel-body\" style=\"padding: 0;\">';\n    html += '<iframe id=\"avideoWindowIframe\" frameBorder=\"0\" class=\"animate__animated animate__bounceInDown\" src=\"' + url + '\"  ' + iframeAllowAttributes + '></iframe>';\n    html += '</div>';\n    html += '</div>';\n    $('body').append(html);\n    $(\"#draggable\").draggable({handle: \".panel-heading\", containment: \"parent\"});\n    //$( \"div, p\" ).disableSelection();\n    $(\"#draggable\").resizable();\n}\n\nvar avideoModalIframeFullScreenOriginalURL = false;\nvar avideoModalIframeWithClassNameTimeout;\nvar avideoModalIframeFullScreenMinimize;\nfunction avideoModalIframeWithClassName(url, className, updateURL) {\n    var closeModal = true;\n    showURL = document.location.href;\n    if (updateURL) {\n        if (!avideoModalIframeFullScreenOriginalURL) {\n            avideoModalIframeFullScreenOriginalURL = document.location.href;\n        }\n        showURL = url;\n    }\n    url = addGetParam(url, 'avideoIframe', 1);\n    //console.log('avideoModalIframeWithClassName', url, className, updateURL);\n    var html = '';\n    html += '<div id=\"avideoModalIframeDiv\" class=\"clearfix popover-title\">';\n\n    if (typeof avideoModalIframeFullScreenCloseButton === 'undefined') {\n        avideoModalIframeFullScreenCloseButtonSmall = '<button class=\"btn btn-default pull-left\" onclick=\"avideoModalIframeFullScreenClose();\">';\n        avideoModalIframeFullScreenCloseButtonSmall += '<i class=\"fas fa-chevron-left\"></i>';\n        avideoModalIframeFullScreenCloseButtonSmall += '</button>';\n\n        avideoModalIframeFullScreenCloseButton = avideoModalIframeFullScreenCloseButtonSmall;\n    }\n    avideoModalIframeFullScreenMaximize();\n    if (className === 'swal-modal-iframe-full-with-minimize') {\n        html += '<button class=\"btn btn-default pull-right swal-modal-iframe-full-with-minimize-btn\" onclick=\"avideoModalIframeFullScreenMinimize();\">';\n        html += '<i class=\"fas fa-compress-arrows-alt\"></i>';\n        html += '</button>';\n        html += '<button class=\"btn btn-default pull-right swal-modal-iframe-full-with-maximize-btn\" onclick=\"avideoModalIframeFullScreenMaximize();\">';\n        html += '<i class=\"fas fa-expand-arrows-alt\"></i>';\n        html += '</button>';\n        showURL = document.location.href;\n        closeModal = false;\n    }\n\n    if (inIframe()) {\n        html += avideoModalIframeFullScreenCloseButtonSmall;\n    } else {\n        html += avideoModalIframeFullScreenCloseButton;\n        html += '<img src=\"' + webSiteRootURL + 'videos/userPhoto/logo.png\" class=\"img img-responsive swal-modal-logo\" style=\"max-height:34px;\">';\n    }\n\n    html += '</div>';\n    html += '<iframe id=\"avideoModalIframe\" frameBorder=\"0\" class=\"animate__animated animate__bounceInDown\" src=\"' + url + '\"  ' + iframeAllowAttributes + ' ></iframe>';\n\n    try {\n        console.log('avideoModalIframeWithClassName window.history.pushState showURL', showURL);\n        avideoPushState(showURL);\n    } catch (e) {\n\n    }\n\n    var span = document.createElement(\"span\");\n    span.innerHTML = html;\n    $('.swal-overlay').show();\n    swal({\n        content: span,\n        closeModal: closeModal,\n        buttons: false,\n        className: className,\n        onClose: avideoModalIframeRemove\n    }).then(() => {\n        if (avideoModalIframeFullScreenOriginalURL) {\n            //console.log('avideoModalIframeWithClassName window.history.pushState avideoModalIframeFullScreenOriginalURL', avideoModalIframeFullScreenOriginalURL);\n            avideoPushState(avideoModalIframeFullScreenOriginalURL);\n            avideoModalIframeFullScreenOriginalURL = false;\n        }\n    });\n    setTimeout(function () {\n        if (!isSameDomain(url)) {\n            //console.log('avideoModalIframeWithClassName different domain');\n            avideoModalIframeRemove();\n        } else {\n            var contentLoaded = false;\n            try {\n                $('#avideoModalIframe').load(function () {\n                    contentLoaded = true;\n                    //console.log('avideoModalIframeWithClassName content loaded 1');\n                    clearTimeout(avideoModalIframeWithClassNameTimeout);\n                    avideoModalIframeRemove();\n                });\n            } catch (e) {\n            }\n\n            if ($('#avideoModalIframe').contents().find(\"body\").length) {\n                //console.log('avideoModalIframeWithClassName content loaded 2');\n                contentLoaded = true;\n            }\n\n            if (contentLoaded) {\n                //console.log('avideoModalIframeWithClassName content loaded 3');\n                clearTimeout(avideoModalIframeWithClassNameTimeout);\n                avideoModalIframeRemove();\n            } else {\n                //console.log('avideoModalIframeWithClassName content loaded 4');\n                clearTimeout(avideoModalIframeWithClassNameTimeout);\n                avideoModalIframeWithClassNameTimeout = setTimeout(function () {\n                    if (!$('#avideoModalIframe').contents().find(\"body\").length) {\n                        console.log('avideoModalIframeWithClassName content NOT loaded');\n                        // is not loaded\n                        url = addGetParam(url, 'avideoIframe', 0);\n                        if (isSameDomain(url)) {\n                            document.location = url;\n                        }\n                    }\n                }, 5000);\n            }\n        }\n    }, 1000);\n}\n\nfunction avideoPushState(url) {\n    window.history.pushState(\"\", \"\", url);\n    if (typeof parent.updatePageSRC == 'funciton') {\n        console.log('avideoPushState', url);\n        parent.updatePageSRC(url);\n    }\n}\n\nfunction checkIframeLoaded(id) {\n    // Get a handle to the iframe element\n    var iframe = document.getElementById(id);\n    var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n    // Check if loading is complete\n    if (iframeDoc.readyState == 'complete') {\n        //iframe.contentWindow.alert(\"Hello\");\n        iframe.contentWindow.onload = function () {\n            alert(\"I am loaded\");\n        };\n        // The loading is complete, call the function we want executed once the iframe is loaded\n        afterLoading();\n        return;\n    }\n\n    // If we are here, it is not loaded. Set things up so we check   the status again in 100 milliseconds\n    window.setTimeout(checkIframeLoaded, 100);\n}\n\nfunction avideoModalIframeIsVisible() {\n    var modal = '';\n    if ($('.swal-modal-iframe-xsmall').length) {\n        modal = $('.swal-modal-iframe-xsmall');\n    } else if ($('.swal-modal-iframe-small').length) {\n        modal = $('.swal-modal-iframe-small');\n    } else if ($('.swal-modal-iframe-large').length) {\n        modal = $('.swal-modal-iframe-large');\n    } else if ($('.swal-modal-iframe-full').length) {\n        modal = $('.swal-modal-iframe-full');\n    } else if ($('.swal-modal-iframe-full-transparent').length) {\n        modal = $('.swal-modal-iframe-full-transparent');\n    } else if ($('.swal-modal-iframe-full-with-minimize').length) {\n        modal = $('.swal-modal-iframe-full-with-minimize');\n    } else {\n        modal = $('.swal-modal-iframe');\n    }\n\n    if (modal.parent().hasClass('swal-overlay--show-modal')) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction avideoModalIframeRemove() {\n    if (avideoModalIframeIsVisible()) {\n        setTimeout(function () {\n            avideoModalIframeRemove();\n        }, 1000);\n    } else {\n        //console.log('avideoModalIframeRemove');\n        $('.swal-content').html('');\n    }\n}\n\nfunction avideoResponse(response) {\n    //console.log('avideoResponse', response);\n    if (typeof response === 'string') {\n        response = JSON.parse(response);\n    }\n    //console.log('avideoResponse', response);\n    if (response.error) {\n        if (!response.msg) {\n            if (typeof response.error === 'string') {\n                response.msg = response.error;\n            } else {\n                response.msg = 'Error';\n            }\n        }\n        avideoAlertError(response.msg);\n    } else {\n        if (!response.msg) {\n            response.msg = 'Success';\n        }\n        if (response.warning) {\n            avideoToastWarning(response.msg);\n        } else if (response.info) {\n            avideoToastInfo(response.msg);\n        } else {\n            avideoToastSuccess(response.msg);\n        }\n    }\n}\n\nfunction avideoAlertText(msg) {\n    avideoAlert(\"\", msg, '');\n}\n\nfunction avideoAlertInfo(msg) {\n    avideoAlert(\"Info\", msg, 'info');\n}\n\nfunction avideoAlertError(msg) {\n    avideoAlert(\"Error\", msg, 'error');\n}\nfunction avideoAlertSuccess(msg) {\n    avideoAlert(\"Success\", msg, 'success');\n}\n\nfunction avideoTooltip(selector, text) {\n    $(selector).attr('title', text);\n    $(selector).attr('data-toggle', 'tooltip');\n    $(selector).attr('data-original-title', text);\n    $(selector).tooltip({html: true});\n}\n\nfunction fixAdSize() {\n    ad_container = $('#mainVideo_ima-ad-container');\n    if (ad_container.length) {\n        height = ad_container.css('height');\n        width = ad_container.css('width');\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'height': height});\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'width': width});\n    }\n}\n\nfunction playerIsPlayingAds() {\n    return ($(\"#mainVideo_ima-ad-container\").length && $(\"#mainVideo_ima-ad-container\").is(':visible')) && player.ima.getAdsManager().getRemainingTime() > 0;\n}\n\nfunction playerHasAds() {\n    return ($(\"#mainVideo_ima-ad-container\").length > 0);\n}\n\nfunction pauseIfIsPlayinAds() { // look like the mobile does not know if is playing ads\n    if (!isMobile() && !player.paused() && playerHasAds() && playerIsPlayingAds()) {\n        //player.pause();\n    }\n}\n\nfunction countToOrRevesrse(selector, total) {\n    var text = $(selector).text();\n    if (isNaN(text)) {\n        current = 0;\n    } else {\n        current = parseInt(text);\n    }\n    total = parseInt(total);\n\n    if (current <= total) {\n        countTo(selector, total);\n    } else {\n        countToReverse(selector, total);\n    }\n}\n\nfunction countTo(selector, total) {\n    var text = $(selector).text();\n    if (isNaN(text)) {\n        current = 0;\n    } else {\n        current = parseInt(text);\n    }\n    total = parseInt(total);\n    if (!total || current >= total) {\n        $(selector).removeClass('loading');\n        return;\n    }\n    var rest = (total - current);\n    var step = parseInt(rest / 100);\n    if (step < 1) {\n        step = 1;\n    }\n    current += step;\n    $(selector).text(current);\n    var timeout = (500 / rest);\n    setTimeout(function () {\n        countTo(selector, total);\n    }, timeout);\n}\n\nfunction countToReverse(selector, total) {\n    var text = $(selector).text();\n    if (isNaN(text)) {\n        return false;\n    } else {\n        current = parseInt(text);\n    }\n    total = parseInt(total);\n    if (!total || current <= total) {\n        $(selector).removeClass('loading');\n        return;\n    }\n    var rest = (current - total);\n    var step = parseInt(rest / 100);\n    if (step < 1) {\n        step = 1;\n    }\n    current -= step;\n    $(selector).text(current);\n    var timeout = (500 / rest);\n    setTimeout(function () {\n        countToReverse(selector, total);\n    }, timeout);\n}\n\nif (typeof showPleaseWaitTimeOut == 'undefined') {\n    var showPleaseWaitTimeOut = 0;\n}\n\nvar tabsCategoryDocumentHeight = 0;\nfunction tabsCategoryDocumentHeightChanged() {\n    var newHeight = $(document).height();\n    if (tabsCategoryDocumentHeight !== newHeight) {\n        tabsCategoryDocumentHeight = newHeight;\n        return true;\n    }\n    return false;\n}\n\nasync function checkDescriptionArea() {\n    $(\".descriptionArea\").each(function (index) {\n        if ($(this).height() < $(this).find('.descriptionAreaContent').height()) {\n            $(this).find('.descriptionAreaShowMoreBtn').show();\n        }\n    });\n}\nfunction clearCache(showPleaseWait, FirstPage, sessionOnly) {\n    if (showPleaseWait) {\n        modal.showPleaseWait();\n    }\n    $.ajax({\n        url: webSiteRootURL + 'objects/configurationClearCache.json.php?FirstPage=' + FirstPage + '&sessionOnly=' + sessionOnly,\n        success: function (response) {\n            if (showPleaseWait) {\n                avideoResponse(response);\n                modal.hidePleaseWait();\n            }\n        }\n    });\n}\n\nfunction validURL(str) {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+:]*)*' + // port and path\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nfunction isURL(url) {\n    return validURL(url);\n}\nvar startTimerInterval = [];\nasync function startTimer(duration, selector, prepend) {\n    ////console.log('startTimer 1', duration);\n    clearInterval(startTimerInterval[selector]);\n    var timer = duration;\n    startTimerInterval[selector] = setInterval(function () {\n\n        // Time calculations for days, hours, minutes and seconds\n        var years = Math.floor(duration / (60 * 60 * 24 * 365));\n        var days = Math.floor((duration % (60 * 60 * 24 * 365)) / (60 * 60 * 24));\n        var hours = Math.floor((duration % (60 * 60 * 24)) / (60 * 60));\n        var minutes = Math.floor((duration % (60 * 60)) / (60));\n        var seconds = Math.floor((duration % (60)));\n        // Display the result in the element with id=\"demo\"\n        var text = '';\n        if (years) {\n            text += years + 'y ';\n        }\n        if (days || text) {\n            text += days + 'd ';\n        }\n        if (hours || text) {\n            text += hours + 'h ';\n        }\n        if (minutes || text) {\n            text += minutes + 'm ';\n        }\n        if (seconds || text) {\n            text += seconds + 's ';\n        }\n        // If the count down is finished, write some text\n        if (duration < 0) {\n            clearInterval(startTimerInterval[selector]);\n            //$(selector).text(\"EXPIRED\");\n            startTimerTo(duration * -1, selector);\n        } else {\n            $(selector).html(prepend + text);\n            duration--;\n        }\n\n    }, 1000);\n}\n\nvar startTimerToInterval = [];\nfunction startTimerTo(durationTo, selector) {\n    clearInterval(startTimerToInterval[selector]);\n    startTimerToInterval[selector] = setInterval(function () {\n\n        // Time calculations for days, hours, minutes and seconds\n        var years = Math.floor(durationTo / (60 * 60 * 24 * 365));\n        var days = Math.floor((durationTo % (60 * 60 * 24 * 365)) / (60 * 60 * 24));\n        var hours = Math.floor((durationTo % (60 * 60 * 24)) / (60 * 60));\n        var minutes = Math.floor((durationTo % (60 * 60)) / (60));\n        var seconds = Math.floor((durationTo % (60)));\n        // Display the result in the element with id=\"demo\"\n        var text = '';\n        if (years) {\n            text += years + 'y ';\n        }\n        if (days || text) {\n            text += days + 'd ';\n        }\n        if (hours || text) {\n            text += hours + 'h ';\n        }\n        if (minutes || text) {\n            text += minutes + 'm ';\n        }\n        if (seconds || text) {\n            text += seconds + 's ';\n        }\n        $(selector).text(text);\n        durationTo++;\n    }, 1000);\n}\n\nvar startTimerToDateTimeOut = [];\nfunction startTimerToDate(toDate, selector, useDBDate) {\n    clearTimeout(startTimerToDateTimeOut[selector]);\n    if (typeof _serverTime === 'undefined') {\n        ////console.log('startTimerToDate _serverTime is undefined');\n        getServerTime();\n        startTimerToDateTimeOut[selector] = setTimeout(function () {\n            startTimerToDate(toDate, selector, useDBDate)\n        }, 1000);\n        return false;\n    }\n    if (typeof toDate === 'string') {\n        ////console.log('startTimerToDate 1 '+toDate);\n        toDate = new Date(toDate.replace(/-/g, \"/\"));\n    }\n    if (useDBDate) {\n        if (typeof _serverDBTimeString !== 'undefined') {\n            date2 = new Date(_serverDBTimeString.replace(/-/g, \"/\"));\n            ////console.log('startTimerToDate 2 '+date2);\n        }\n    } else {\n        if (typeof _serverTimeString !== 'undefined') {\n            date2 = new Date(_serverTimeString.replace(/-/g, \"/\"));\n            ////console.log('startTimerToDate 3 '+date2);\n        }\n    }\n    if (typeof date2 === 'undefined') {\n        date2 = new Date();\n        ////console.log('startTimerToDate 4 '+date2);\n    }\n\n    var seconds = (toDate.getTime() - date2.getTime()) / 1000;\n    ////console.log('startTimerToDate toDate', toDate);\n    ////console.log('startTimerToDate selector', selector);\n    ////console.log('startTimerToDate seconds', seconds);\n    return startTimer(seconds, selector, toDate.toLocaleString() + '<br>');\n}\n\nvar _timerIndex = 0;\nfunction createTimer(selector) {\n    var toDate = $(selector).text();\n    var id = $(selector).attr('id');\n    if (!id) {\n        _timerIndex++;\n        id = 'timer_' + _timerIndex;\n        $(selector).attr('id', id);\n    }\n\n    startTimerToDate(toDate, '#' + id, true);\n}\n\nvar getServerTimeActive = 0;\nasync function getServerTime() {\n    if (getServerTimeActive || _serverTime) {\n        return false;\n    }\n    if (typeof webSiteRootURL == 'undefined') {\n        setTimeout(function () {\n            getServerTime();\n        }, 1000);\n        return false;\n    }\n    getServerTimeActive = 1;\n    var d = new Date();\n    $.ajax({\n        url: webSiteRootURL + 'objects/getTimes.json.php',\n        success: function (response) {\n            //console.log('getServerTime', response);\n            _serverTime = response._serverTime;\n            _serverDBTime = response._serverDBTime;\n            _serverTimeString = response._serverTimeString;\n            _serverDBTimeString = response._serverDBTimeString;\n            _serverTimezone = response._serverTimezone;\n            _serverDBTimezone = response._serverDBTimezone;\n            _serverSystemTimezone = response._serverSystemTimezone;\n            //console.log('getServerTime _serverDBTimezone', _serverDBTimezone, response._serverDBTimezone);\n            setInterval(function () {\n                _serverTime++;\n                _serverDBTime++;\n                _serverTimeString = new Date(_serverTime * 1000).toISOString().slice(0, 19).replace('T', ' ');\n                _serverDBTimeString = new Date(_serverDBTime * 1000).toISOString().slice(0, 19).replace('T', ' ');\n            }, 1000);\n        }\n    });\n}\n\nfunction clearServerTime() {\n    //console.log('clearServerTime');\n    _serverTime = null;\n    _serverDBTime = null;\n    _serverTimeString = null;\n    _serverDBTimeString = null;\n}\n\nfunction convertDBDateToLocal(dbDateString) {\n    if (!/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/.test(dbDateString)) {\n        //console.log('convertDBDateToLocal format does not match', dbDateString);\n        return dbDateString;\n    }\n    checkMoment();\n    dbDateString = $.trim(dbDateString.replace(/[^ 0-9:-]/g, ''));\n    var m;\n    if (!_serverDBTimezone) {\n        getServerTime();\n        //console.log('convertDBDateToLocal _serverDBTimezone is empty', dbDateString);\n        m = moment.tz(dbDateString);\n    } else {\n        _serverDBTimezone = $.trim(_serverDBTimezone);\n        //m = moment(dbDateString).tz(_serverDBTimezone);\n        //m = moment.tz(dbDateString, _serverDBTimezone);\n        m = moment.tz(dbDateString, _serverDBTimezone).local();\n    }\n    var fromNow = m.fromNow();\n    consolelog('convertDBDateToLocal', dbDateString, _serverDBTimezone, fromNow);\n    return fromNow;\n}\n\nfunction convertDateFromTimezoneToLocal(dbDateString, timezone) {\n    if (!/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/.test(dbDateString)) {\n        //console.log('convertDBDateToLocal format does not match', dbDateString);\n        return dbDateString;\n    }\n    checkMoment();\n    dbDateString = $.trim(dbDateString.replace(/[^ 0-9:-]/g, ''));\n    timezone = $.trim(timezone);\n    var m = moment.tz(dbDateString, timezone).local();\n    return m.format(\"YYYY-MM-DD HH:mm:ss\");\n}\n\nfunction checkMoment() {\n    /*\n     while(typeof moment === 'undefined' || moment.tz !== 'function'){\n     console.log('checkMoment Waiting moment.tz to load');\n     delay(1);\n     }\n     */\n}\n\nfunction addGetParam(_url, _key, _value) {\n    if (typeof _url !== 'string') {\n        return false;\n    }\n    if (typeof _value == 'undefined' || _value == 'undefined' || _value == '') {\n        return _url;\n    }\n    var param = _key + '=' + escape(_value);\n    var sep = '&';\n    if (_url.indexOf('?') < 0) {\n        sep = '?';\n    } else {\n        var lastChar = _url.slice(-1);\n        if (lastChar == '&')\n            sep = '';\n        if (lastChar == '?')\n            sep = '';\n    }\n    _url += sep + param;\n    _url = removeDuplicatedGetParam(_url);\n    return _url;\n}\n\nfunction addQueryStringParameter(_url, _key, _value) {\n    return addGetParam(_url, _key, _value);\n}\n\nfunction removeDuplicatedGetParam(_url) {\n    var queryParam = _url.replace(/^[^?]+\\?/, '');\n    if (queryParam == '') {\n        return _url;\n    }\n    var params = queryParam.split('&'),\n            results = {};\n    for (var i = 0; i < params.length; i++) {\n        var temp = params[i].split('='),\n                key = temp[0],\n                val = temp[1];\n        results[key] = val;\n    }\n\n    var newQueryParam = [];\n    for (var key in results) {\n        newQueryParam.push(key + '=' + results[key]);\n    }\n    var newQueryParamString = newQueryParam.join('&');\n    return _url.replace(queryParam, newQueryParamString);\n}\n\nfunction removeGetParam(_url, parameter) {\n    var queryParam = _url.replace(/^[^?]+\\?/, '');\n    if (queryParam == '') {\n        return _url;\n    }\n    var params = queryParam.split('&'),\n            results = {};\n    for (var i = 0; i < params.length; i++) {\n        var temp = params[i].split('='),\n                key = temp[0],\n                val = temp[1];\n        if (key !== parameter) {\n            results[key] = val;\n        }\n    }\n\n    var newQueryParam = [];\n    for (var key in results) {\n        newQueryParam.push(key + '=' + results[key]);\n    }\n\n    var newQueryParamString = newQueryParam.join('&');\n    queryParam = '?' + queryParam;\n    if (!empty(newQueryParamString)) {\n        newQueryParamString = '?' + newQueryParamString;\n    }\n    return _url.replace(queryParam, newQueryParamString);\n}\n\nfunction readFileCroppie(input, crop) {\n    if ($(input)[0].files && $(input)[0].files[0]) {\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            crop.croppie('bind', {\n                url: e.target.result\n            }).then(function () {\n                //console.log('jQuery bind complete');\n            });\n        }\n\n        reader.readAsDataURL($(input)[0].files[0]);\n    } else {\n        avideoAlert(\"Sorry - you're browser doesn't support the FileReader API\");\n    }\n}\n\nfunction getCroppie(uploadCropObject, callback, width, height) {\n    //console.log('getCroppie 1', uploadCropObject);\n    var ret = uploadCropObject.croppie('result', {type: 'base64', size: {width: width, height: height}, format: 'png'}).then(function (resp) {\n        ////console.log('getCroppie 2 ' + callback, resp);\n        eval(callback + \"(resp);\");\n    }).catch(function (err) {\n        //console.log('cropieError getCroppie => ' + callback, err);\n        eval(callback + \"(null);\");\n    });\n    //console.log('getCroppie 3', ret);\n}\n\nasync function setToolTips() {\n    var selector = '[data-toggle=\"tooltip\"]';\n    if (!$(selector).not('.alreadyTooltip').length) {\n        return false;\n    }\n    try {\n        $(selector).not('.alreadyTooltip').tooltip({container: 'body', html: true});\n        $(selector).not('.alreadyTooltip').on('click', function () {\n            var t = this;\n            setTimeout(function () {\n                try {\n                    $(t).tooltip('hide');\n                } catch (e) {\n\n                }\n            }, 2000);\n        });\n        $(selector).addClass('alreadyTooltip');\n    } catch (e) {\n        console.log('setToolTips', e);\n        setTimeout(function () {\n            setToolTips();\n        }, 1000);\n    }\n\n}\n\nfunction avideoSocketIsActive() {\n    if (typeof isSocketActive == 'function') {\n        return isSocketActive();\n    } else {\n        return false;\n    }\n}\n\nfunction isMediaSiteURL(url) {\n    if (validURL(url)) {\n        if (url.match(/youtube/i) ||\n                url.match(/youtu\\.be/i) ||\n                url.match(/vimeo/i) ||\n                url.match(/dailymotion/i) ||\n                url.match(/metacafe/i) ||\n                url.match(/vid\\.me/i) ||\n                url.match(/rutube\\.ru/i) ||\n                url.match(/ok\\.ru/i) ||\n                url.match(/streamable/i) ||\n                url.match(/twitch/i) ||\n                url.match(/evideoEmbed/i) ||\n                url.match(/videoEmbeded/i)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction avideoSocket() {\n    if (typeof parseSocketResponse === 'function') {\n        parseSocketResponse();\n    }\n}\n\nfunction changeVideoStatus(videos_id, status) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: webSiteRootURL + 'objects/videoStatus.json.php',\n        data: {\"id\": [videos_id], \"status\": status},\n        type: 'post',\n        success: function (response) {\n            modal.hidePleaseWait();\n            if (response.error) {\n                avideoToast(\"Sorry!\", response.msg, \"error\");\n            } else {\n\n                for (var item in response.status) {\n                    var videos_id = response.status[item].videos_id\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_a');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_u');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_i');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).removeClass('status_s');\n                    $(\".getChangeVideoStatusButton_\" + videos_id).addClass('status_' + response.status[item].status);\n                }\n\n\n            }\n        }\n    });\n}\n\nfunction avideoAjax(url, data) {\n    avideoAjax2(url, data, true);\n}\n\nfunction avideoAjax2(url, data, pleaseWait) {\n    if(pleaseWait){\n        modal.showPleaseWait();\n    }\n    $.ajax({\n        url: url,\n        data: data,\n        type: 'post',\n        success: function (response) {\n            if(pleaseWait){\n                modal.hidePleaseWait();\n            }\n            if (response.error) {\n                avideoAlertError(response.msg);\n            } else {\n                avideoToastSuccess(response.msg);\n                if (typeof response.eval !== 'undefined') {\n                    eval(response.eval);\n                }\n            }\n        }\n    });\n}\n\nfunction isPlayerUserActive() {\n    return $('#mainVideo').hasClass(\"vjs-user-active\");\n}\n\neventer('beforeunload', function (e) {\n    ////console.log('window.addEventListener(beforeunload');\n    _addViewAsync();\n}, false);\neventer('visibilitychange', function () {\n    if (document.visibilityState === 'hidden') {\n        _addViewAsync();\n    }\n});\nfunction socketClearSessionCache(json) {\n    //console.log('socketClearSessionCache', json);\n    clearCache(false, 0, 1);\n}\n\nasync function animateChilds(selector, type, delay) {\n    var step = delay;\n    $(selector).children().each(function () {\n        var $currentElement = $(this);\n        $currentElement.addClass('animate__animated');\n        $currentElement.addClass(type);\n        $currentElement.css('-webkit-animation-delay', step + \"s\");\n        $currentElement.css('animation-delay', step + \"s\");\n        step += delay;\n    });\n}\n\nfunction goToURLOrAlertError(jsonURL, data) {\n    modal.showPleaseWait();\n    $.ajax({\n        url: jsonURL,\n        method: 'POST',\n        data: data,\n        success: function (response) {\n            if (response.error) {\n                avideoAlertError(response.msg);\n                modal.hidePleaseWait();\n            } else if (response.url) {\n                if (response.msg) {\n                    avideoAlertInfo(response.msg);\n                }\n                document.location = response.url;\n                setTimeout(function () {\n                    modal.hidePleaseWait();\n                }, 3000)\n            } else {\n                avideoResponse(response);\n                modal.hidePleaseWait();\n            }\n        }\n    });\n}\n\nfunction downloadURL(url, filename) {\n    filename = clean_name(filename) + '.' + clean_name(url.split(/[#?]/)[0].split('.').pop().trim());\n    console.log('downloadURL start ', url, filename);\n    var loaded = 0;\n    var contentLength = 0;\n    fetch(url)\n            .then(response => {\n                avideoToastSuccess('Download Start');\n                const contentEncoding = response.headers.get('content-encoding');\n                const contentLength = response.headers.get(contentEncoding ? 'x-file-size' : 'content-length');\n                if (contentLength === null) {\n                    throw Error('Response size header unavailable');\n                }\n\n                const total = parseInt(contentLength, 10);\n                let loaded = 0;\n                return new Response(\n                        new ReadableStream({\n                            start(controller) {\n                                const reader = response.body.getReader();\n                                read();\n                                function read() {\n                                    reader.read().then(({ done, value }) => {\n                                        if (done) {\n                                            controller.close();\n                                            return;\n                                        }\n                                        loaded += value.byteLength;\n                                        var percentageLoaded = Math.round(loaded / total * 100);\n                                        ////console.log(percentageLoaded);\n                                        modal.setProgress(percentageLoaded);\n                                        modal.setText('Downloading ... ' + percentageLoaded + '%');\n                                        controller.enqueue(value);\n                                        read();\n                                    }).catch(error => {\n                                        console.error(error);\n                                        controller.error(error)\n                                    })\n                                }\n                            }\n                        })\n                        );\n            })\n            .then(response => response.blob())\n            .then(blob => {\n                const urlFromBlob = window.URL.createObjectURL(blob);\n                console.log('downloadURL', url, filename, blob);\n                const a = document.createElement('a');\n                a.style.display = 'none';\n                a.href = urlFromBlob;\n                // the filename you want\n                a.download = filename;\n                document.body.appendChild(a);\n                a.click();\n                window.URL.revokeObjectURL(url);\n                modal.hidePleaseWait();\n                avideoToastSuccess('Download complete ' + filename);\n            })\n            .catch(function (err) {\n                //avideoAlertError('Error on download ');\n                console.log(err);\n                addQueryStringParameter(url, 'download', 1);\n                addQueryStringParameter(url, 'title', filename);\n                document.location = url;\n            });\n}\n\nvar downloadURLOrAlertErrorInterval;\nfunction downloadURLOrAlertError(jsonURL, data, filename, FFMpegProgress) {\n    if (empty(jsonURL)) {\n        console.log('downloadURLOrAlertError error empty jsonURL', jsonURL, data, filename, FFMpegProgress);\n        return false;\n    }\n    modal.showPleaseWait();\n    avideoToastInfo('Converting');\n    console.log('downloadURLOrAlertError 1', jsonURL, FFMpegProgress);\n    checkFFMPEGProgress(FFMpegProgress);\n    $.ajax({\n        url: jsonURL,\n        method: 'POST',\n        data: data,\n        success: function (response) {\n            clearInterval(downloadURLOrAlertErrorInterval);\n            if (response.error) {\n                avideoAlertError(response.msg);\n                modal.hidePleaseWait();\n            } else if (response.url) {\n                if (response.msg) {\n                    avideoAlertInfo(response.msg);\n                }\n                if (\n                        isMobile()\n                        //|| /cdn.ypt.me/.test(response.url)\n                        ) {\n                    window.open(response.url, '_blank');\n                    avideoToastInfo('Opening file');\n                    //document.location = response.url\n                } else {\n                    downloadURL(response.url, filename);\n                }\n            } else {\n                avideoResponse(response);\n                modal.hidePleaseWait();\n            }\n        }\n    });\n}\n\nfunction checkFFMPEGProgress(FFMpegProgress) {\n    if (empty(FFMpegProgress)) {\n        return false;\n    }\n    $.ajax({\n        url: FFMpegProgress,\n        success: function (response) {\n            //console.log(response);\n            if (typeof response.progress.progress !== 'undefined') {\n                var text = 'Converting ...';\n                if (typeof response.progress.progress !== 'undefined') {\n                    text += response.progress.progress + '% ';\n                    modal.setProgress(response.progress.progress);\n                }\n                modal.setText(text);\n                if (response.progress.progress !== 100) {\n                    setTimeout(function () {\n                        checkFFMPEGProgress(FFMpegProgress);\n                    }, 1000);\n                }\n            }\n        }\n    });\n}\n\nfunction startGoogleAd(selector) {\n    if (isVisibleAndInViewport(selector)) {\n        //console.log('startGoogleAd', selector);\n        try {\n            (adsbygoogle = window.adsbygoogle || []).push({});\n        } catch (e) {\n            //console.log('startGoogleAd ERROR', selector, $(selector), e);\n        }\n\n    } else {\n        setTimeout(function () {\n            startGoogleAd(selector);\n        }, 1000);\n    }\n}\n\nfunction isVisibleAndInViewport(selector) {\n    if ($(selector).is(\":visible\")) {\n        var elementTop = $(selector).offset().top;\n        var elementBottom = elementTop + $(selector).outerHeight();\n        var viewportTop = $(window).scrollTop();\n        var viewportBottom = viewportTop + $(window).height();\n        return elementBottom > viewportTop && elementTop < viewportBottom;\n    } else {\n        return false;\n    }\n}\n\nvar playAudioTimeout = [];\nvar showEnableAudioMessage = true;\nvar audioList = [];\nfunction playAudio(mp3) {\n    clearTimeout(playAudioTimeout[mp3]);\n    playAudioTimeout[mp3] = setTimeout(function () {\n        var audio = new Audio();\n        audio.autoplay = true;\n        audio.src = \"data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\";\n        audio.src = mp3;\n        audioList[mp3] = audio;\n        //console.log('playAudio', audioList);\n        ////console.log('pling setTimeout', audio);\n        const promise = audio.play();\n        if (promise !== undefined) {\n            ////console.log('pling promise', promise);\n            promise.then((response) => {\n                ////console.log('pling audio played', response);\n                plingEnabled = false;\n                setTimeout(function () {\n                    plingEnabled = true;\n                }, 3000);\n            }).catch(error => {\n                ////console.log('pling audio disabled', error);\n                if (showEnableAudioMessage) {\n                    showEnableAudioMessage = false;\n                    avideoAlertInfo('Click here to enable audio');\n                }\n            });\n        }\n    }, 500);\n    return playAudioTimeout[mp3];\n}\n\nfunction stopAllAudio() {\n    var audios = document.getElementsByTagName('audio');\n    for (var i = 0, len = audios.length; i < len; i++) {\n        if (audios[i] != e.target) {\n            audios[i].pause();\n        }\n    }\n    for (var i in audioList) {\n        if (typeof audioList[i] === 'object') {\n            audioList[i].pause();\n        }\n    }\n}\n\nfunction isSameDomain(url) {\n    var hrefURL, pageURL;\n    hrefURL = new URL(url);\n    pageURL = new URL(window.location);\n    if (url.startsWith(\"/\") || hrefURL.host === pageURL.host) {\n        return true;\n    }\n    return false;\n}\n\nfunction empty(data) {\n    var type = typeof (data);\n    if (type == 'undefined' || data === null) {\n        return true;\n    } else if (type === 'function') {\n        return false;\n    } else if (type === 'number') {\n        return data == 0;\n    } else if (type === 'boolean') {\n        return !data;\n    } else if (type === 'string') {\n        return /^[\\s]*$/.test(data);\n    } else if (type !== 'undefined') {\n        return Object.keys(data).length == 0;\n    }\n    for (var i in data) {\n        if (data.hasOwnProperty(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction in_array(needle, haystack) {\n    var length = haystack.length;\n    for (var i = 0; i < length; i++) {\n        if (haystack[i] == needle)\n            return true;\n    }\n    return false;\n}\n\nfunction replaceLast(find, replace, string) {\n    var lastIndex = string.lastIndexOf(find);\n\n    if (lastIndex === -1) {\n        return string;\n    }\n\n    var beginString = string.substring(0, lastIndex);\n    var endString = string.substring(lastIndex + find.length);\n\n    return beginString + replace + endString;\n}\n\n\nfunction getCursorPos(input) {\n    if (\"selectionStart\" in input && document.activeElement == input) {\n        return {\n            start: input.selectionStart,\n            end: input.selectionEnd\n        };\n    } else if (input.createTextRange) {\n        var sel = document.selection.createRange();\n        if (sel.parentElement() === input) {\n            var rng = input.createTextRange();\n            rng.moveToBookmark(sel.getBookmark());\n            for (var len = 0; rng.compareEndPoints(\"EndToStart\", rng) > 0; rng.moveEnd(\"character\", -1)) {\n                len++;\n            }\n            rng.setEndPoint(\"StartToStart\", input.createTextRange());\n            for (var pos = {start: 0, end: len}; rng.compareEndPoints(\"EndToStart\", rng) > 0; rng.moveEnd(\"character\", -1)) {\n                pos.start++;\n                pos.end++;\n            }\n            return pos;\n        }\n    } else if (document.getSelection) {    // all browsers, except IE before version 9\n        var sel = document.getSelection();\n        return {\n            start: sel.anchorOffset,\n            end: sel.focusOffset\n        };\n    }\n    return -1;\n}\n\nfunction isUserOnline(users_id) {\n    users_id = parseInt(users_id);\n    if (typeof users_id_online === 'undefined' || empty(users_id_online)) {\n        return false;\n    }\n    if (typeof users_id_online[users_id] === 'undefined' || empty(users_id_online[users_id])) {\n        return false;\n    }\n    if (empty(users_id_online[users_id].resourceId)) {\n        return false;\n    }\n    return users_id_online[users_id];\n}\n\nfunction isReadyToCheckIfIsOnline() {\n    return !empty(users_id_online);\n}\n\nvar addAtMentionActive = false;\nfunction addAtMention(selector) {\n    var emojioneArea = false;\n    if (typeof $(selector).data(\"emojioneArea\") !== 'undefined') {\n        emojioneArea = selector;\n        selector = '.emojionearea-editor';\n    }\n    //console.log('addAtMention(selector)', selector, emojioneArea);\n    var SpaceKeyCode = ' '.charCodeAt(0);\n    var AtMatcher = /^@.+/i;\n    $(selector).on(\"keydown\", function (event) {\n        if (!$(this).autocomplete(\"instance\").menu.active) {\n            if (\n                    event.keyCode === SpaceKeyCode ||\n                    event.keyCode === $.ui.keyCode.TAB ||\n                    event.keyCode === $.ui.keyCode.ENTER ||\n                    event.keyCode === $.ui.keyCode.ESCAPE) {\n                $(this).autocomplete(\"close\");\n            }\n        } else {\n            if ((event.keyCode === $.ui.keyCode.TAB)) {\n                event.preventDefault();\n            }\n        }\n    })\n            .autocomplete({\n                minLength: 2,\n                source: function (request, response) {\n\n                    var pos = getCursorPos($(selector)[0]);\n                    stringStart = request.term.substring(0, pos.end);\n\n                    var term = stringStart.split(/\\s+/).pop();\n                    //console.log('autocomplete', request.term, term, AtMatcher.test(term));\n                    if (AtMatcher.test(term)) {\n                        $.ajax({\n                            url: webSiteRootURL + \"objects/mention.json.php\",\n                            data: {\n                                term: term\n                            },\n                            success: function (data) {\n                                response(data);\n                            }\n                        });\n                    } else {\n                        return false;\n                    }\n                },\n                focus: function () {\n                    // prevent value inserted on focus\n                    return false;\n                },\n                select: function (event, ui) {\n                    addAtMentionActive = true;\n                    setTimeout(function () {\n                        addAtMentionActive = false;\n                    }, 200);\n                    if (emojioneArea) {\n                        this.value = $(emojioneArea).data(\"emojioneArea\").getText();\n                    }\n                    //console.log('addAtMention', this, this.value);\n                    var pos = getCursorPos($(selector)[0]);\n                    stringStart = this.value.substring(0, pos.end);\n                    stringEnd = this.value.substring(pos.end);\n\n                    var terms = stringStart.split(/\\s+/);\n                    // remove the current input\n                    var word = terms.pop();\n                    // add the selected item\n                    //terms.push('@' + ui.item.value);\n                    // add placeholder to get the comma-and-space at the end\n                    //terms.push(\"\");\n                    replace = '@' + ui.item.value;\n\n                    this.value = replaceLast(word, '@' + ui.item.value, stringStart) + stringEnd;\n                    if (emojioneArea) {\n                        $(emojioneArea).data(\"emojioneArea\").setText(this.value);\n                        setTimeout(function () {\n                            contentEditableElement = document.getElementsByClassName(\"emojionearea-editor\")[0];\n                            range = document.createRange();//Create a range (a range is a like the selection but invisible)\n                            range.selectNodeContents(contentEditableElement);//Select the entire contents of the element with the range\n                            range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\n                            selection = window.getSelection();//get the selection object (allows you to change selection)\n                            selection.removeAllRanges();//remove any selections already made\n                            selection.addRange(range);//make the range you have just created the visible selection\n                        }, 50);\n                    }\n                    return false;\n                },\n                create: function () {\n                    $(this).data('ui-autocomplete')._renderItem = function (ul, item) {\n                        return $('<li>' + item.label + '</li>').appendTo(ul); // customize your HTML\n                    };\n                },\n                position: {collision: \"flip\"}\n            });\n}\n/*\n async function selectAElements() {\n $(\"a\").each(function () {\n var location = window.location.toString()\n var res = location.split(\"?\");\n pathWitoutGet = res[0];\n if ($(this).attr(\"href\") == window.location.pathname\n || $(this).attr(\"href\") == window.location\n || $(this).attr(\"href\") == pathWitoutGet) {\n $(this).addClass(\"selected\");\n }\n });\n }*/\n\nvar hidePleaseWaitTimeout = {};\nvar pleaseWaitIsINUse = {};\nvar pleaseNextIndex = 0;\nfunction getPleaseWait() {\n    return (function () {\n        var index = pleaseNextIndex;\n        pleaseNextIndex++;\n        var selector = \"#pleaseWaitDialog_\" + index;\n        var pleaseWaitDiv = $(selector);\n        if (pleaseWaitDiv.length === 0) {\n            //console.log('getPleaseWait', index);\n            if (typeof avideoLoader == 'undefined') {\n                avideoLoader = '';\n            }\n            pleaseWaitDiv = $('<div id=\"pleaseWaitDialog_' + index + '\" class=\"pleaseWaitDialog modal fade\"  data-backdrop=\"static\" data-keyboard=\"false\">' + avideoLoader + '<h2 style=\"display:none;\">Processing...</h2><div class=\"progress\" style=\"display:none;\"><div class=\"progress-bar progress-bar-success progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%\"></div></div></div>').appendTo('body');\n        }\n\n        return {\n            showPleaseWait: function () {\n                if (!empty(pleaseWaitIsINUse[index])) {\n                    console.log('showPleaseWait is in use', index, new Error().stack);\n                    return false;\n                }\n                pleaseWaitIsINUse[index] = true;\n                $(selector).removeClass('loaded');\n                $(selector).find('.progress').hide();\n                this.setText('Processing...');\n                $(selector).find('h2').hide();\n                this.setProgress(0);\n                $(selector).find('.progress').hide();\n                pleaseWaitDiv.modal();\n            },\n            hidePleaseWait: function () {\n                clearTimeout(hidePleaseWaitTimeout[index]);\n                hidePleaseWaitTimeout[index] = setTimeout(function () {\n                    setTimeout(function () {\n                        $(selector).addClass('loaded');\n                    }, showPleaseWaitTimeOut / 2);\n                    setTimeout(function () {\n                        pleaseWaitDiv.modal('hide');\n                    }, showPleaseWaitTimeOut); // wait for loader animation\n                    setTimeout(function () {\n                        pleaseWaitIsINUse[index] = false;\n                    }, showPleaseWaitTimeOut + 1000);\n                }, 500);\n            },\n            setProgress: function (valeur) {\n                var progressSelector = selector + ' .progress';\n                //console.log('showPleaseWait setProgress', progressSelector);\n                $(progressSelector).slideDown();\n                $(selector).find('.progress-bar').css('width', valeur + '%').attr('aria-valuenow', valeur);\n            },\n            setText: function (text) {\n                var textSelector = selector + ' h2';\n                //console.log('showPleaseWait setText', textSelector);\n                $(textSelector).slideDown();\n                $(textSelector).html(text);\n            },\n            getProgressSelector: function () {\n                var progressSelector = selector + ' .progress';\n                return progressSelector;\n            },\n        };\n    })();\n}\n\n$(document).ready(function () {\n    getServerTime();\n    addViewFromCookie();\n    checkDescriptionArea();\n    setInterval(function () {// check for the carousel\n        checkDescriptionArea();\n    }, 3000);\n    Cookies.set('timezone', timezone, {\n        path: '/',\n        expires: 365\n    });\n    tabsCategoryDocumentHeight = $(document).height();\n    if (typeof $('.nav-tabs-horizontal').scrollingTabs == 'function') {\n        $('.nav-tabs-horizontal').scrollingTabs();\n        //$('.nav-tabs-horizontal').fadeIn();\n    }\n    setInterval(function () {\n        if (tabsCategoryDocumentHeightChanged()) {\n            if (typeof $('.nav-tabs-horizontal').scrollingTabs == 'function') {\n                $('.nav-tabs-horizontal').scrollingTabs('refresh');\n            }\n        }\n    }, 2000);\n    modal = getPleaseWait();\n    try {\n        $('[data-toggle=\"popover\"]').popover();\n    } catch (e) {\n\n    }\n\n    setInterval(function () {\n        setToolTips();\n    }, 5000);\n    lazyImage();\n    //aHrefToAjax();\n    //selectAElements();\n    $('#clearCache, .clearCacheButton').on('click', function (ev) {\n        ev.preventDefault();\n        clearCache(true, 0, 0);\n    });\n    $('.clearCacheFirstPageButton').on('click', function (ev) {\n        ev.preventDefault();\n        clearCache(true, 1, 0);\n    });\n    $('#generateSiteMap, .generateSiteMapButton').on('click', function (ev) {\n        ev.preventDefault();\n        modal.showPleaseWait();\n        $.ajax({\n            url: webSiteRootURL + 'objects/configurationGenerateSiteMap.json.php',\n            success: function (response) {\n                if (!response.error) {\n                    avideoAlert(\"Congratulations!\", \"File created!\", \"success\");\n                } else {\n                    if (response.msg) {\n                        avideoAlert(\"Sorry!\", response.msg, \"error\");\n                    } else {\n                        avideoAlert(\"Sorry!\", \"File NOT created!\", \"error\");\n                    }\n                }\n                modal.hidePleaseWait();\n            }\n        });\n    });\n    setPlayerListners();\n    $('.duration:contains(\"00:00:00\"), .duration:contains(\"EE:EE:EE\")').hide();\n    checkSocketStatus();\n    checkSavedCookies();\n    $(\"input.saveCookie\").change(function () {\n        var auto = $(this).prop('checked');\n        Cookies.set($(this).attr(\"name\"), auto, {\n            path: '/',\n            expires: 365\n        });\n    });\n    if (isAutoplayEnabled()) {\n        $(\"#autoplay\").prop('checked', true);\n    }\n    $(\"#autoplay\").change(function () {\n        checkAutoPlay();\n    });\n    checkAutoPlay();\n    // Code to handle install prompt on desktop\n    //aHrefToAjax();\n\n    _alertFromGet('error');\n    _alertFromGet('msg');\n    _alertFromGet('success');\n    _alertFromGet('toast');\n\n});\n\n/*!\n * Sanitize an HTML string\n * (c) 2021 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {String}          str   The HTML string to sanitize\n * @param  {Boolean}         nodes If true, returns HTML nodes instead of a string\n * @return {String|NodeList}       The sanitized string or nodes\n */\nfunction cleanHTML (str, nodes) {\n\n\t/**\n\t * Convert the string to an HTML document\n\t * @return {Node} An HTML document\n\t */\n\tfunction stringToHTML () {\n\t\tlet parser = new DOMParser();\n\t\tlet doc = parser.parseFromString(str, 'text/html');\n\t\treturn doc.body || document.createElement('body');\n\t}\n\n\t/**\n\t * Remove <script> elements\n\t * @param  {Node} html The HTML\n\t */\n\tfunction removeScripts (html) {\n\t\tlet scripts = html.querySelectorAll('script');\n\t\tfor (let script of scripts) {\n\t\t\tscript.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Check if the attribute is potentially dangerous\n\t * @param  {String}  name  The attribute name\n\t * @param  {String}  value The attribute value\n\t * @return {Boolean}       If true, the attribute is potentially dangerous\n\t */\n\tfunction isPossiblyDangerous (name, value) {\n\t\tlet val = value.replace(/\\s+/g, '').toLowerCase();\n\t\tif (['src', 'href', 'xlink:href'].includes(name)) {\n\t\t\tif (val.includes('javascript:') || val.includes('data:text/html')) return true;\n\t\t}\n\t\tif (name.startsWith('on')) return true;\n\t}\n\n\t/**\n\t * Remove potentially dangerous attributes from an element\n\t * @param  {Node} elem The element\n\t */\n\tfunction removeAttributes (elem) {\n\n\t\t// Loop through each attribute\n\t\t// If it's dangerous, remove it\n\t\tlet atts = elem.attributes;\n\t\tfor (let {name, value} of atts) {\n\t\t\tif (!isPossiblyDangerous(name, value)) continue;\n\t\t\telem.removeAttribute(name);\n\t\t}\n\n\t}\n\n\t/**\n\t * Remove dangerous stuff from the HTML document's nodes\n\t * @param  {Node} html The HTML document\n\t */\n\tfunction clean (html) {\n\t\tlet nodes = html.children;\n\t\tfor (let node of nodes) {\n\t\t\tremoveAttributes(node);\n\t\t\tclean(node);\n\t\t}\n\t}\n\n\t// Convert the string to HTML\n\tlet html = stringToHTML();\n\n\t// Sanitize it\n\tremoveScripts(html);\n\tclean(html);\n\n\t// If the user wants HTML nodes back, return them\n\t// Otherwise, pass a sanitized string back\n\treturn nodes ? html.childNodes : html.innerHTML;\n\n}\n\nasync function _alertFromGet(type) {\n    if (urlParams.has(type)) {\n        var msg = urlParams.get(type);\n        var div = document.createElement(\"div\");\n        div.innerHTML = cleanHTML(msg, false);\n        var text = div.textContent || div.innerText || \"\";\n        if (!empty(text)) {\n            switch (type) {\n                case 'error':\n                    avideoAlertError(text);\n                    break;\n                case 'msg':\n                    avideoAlertInfo(text);\n                    break;\n                case 'success':\n                    avideoAlertSuccess(text);\n                    break;\n                case 'toast':\n                    avideoToast(text);\n                    break;\n            }\n            var url = removeGetParam(window.location.href, type);\n            window.history.pushState({}, document.title, url);\n        }\n    }\n}\n\n\nasync function checkSocketStatus() {\n    if (typeof conn != 'undefined') {\n        if (avideoSocketIsActive()) {\n            $(\".socketStatus\").removeClass('disconnected');\n        } else {\n            $(\".socketStatus\").addClass('disconnected');\n        }\n    }\n    setTimeout(function () {\n        checkSocketStatus();\n    }, 1000);\n}\n\nasync function checkSavedCookies() {\n    $(\"input.saveCookie\").each(function () {\n        var mycookie = Cookies.get($(this).attr('name'));\n        if (mycookie && mycookie == \"true\") {\n            $(this).prop('checked', mycookie);\n        }\n    });\n}\n\nfunction openWindow(url) {\n    var windowObject = window.open(url, '_blank').focus();\n    return windowObject;\n}\n\nfunction openWindowWithPost(url, name, params, strWindowFeatures) {\n    if (empty(strWindowFeatures)) {\n        strWindowFeatures = \"directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,resizable=no,height=600,width=800\";\n    }\n    var windowObject = window.open(\"about:blank\", name, strWindowFeatures);\n    postFormToTarget(url, name, params);\n    return windowObject;\n}\n\nfunction postFormToTarget(url, name, params) {\n    var form = document.createElement(\"form\");\n    form.setAttribute(\"method\", \"post\");\n    form.setAttribute(\"action\", url);\n    form.setAttribute(\"target\", name);\n    for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n            var input = document.createElement('input');\n            input.type = 'hidden';\n            input.name = i;\n            input.value = params[i];\n            form.appendChild(input);\n        }\n    }\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n}\n\nfunction fixAdSize() {\n    ad_container = $('#mainVideo_ima-ad-container');\n    if (ad_container.length) {\n        height = ad_container.css('height');\n        width = ad_container.css('width');\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'height': height});\n        $($('#mainVideo_ima-ad-container div:first-child')[0]).css({'width': width});\n    }\n}\n\n/**\n * recreate the sources from the video source tags\n * @type type\n */\nvar videoJSRecreateSourcesTimeout;\nasync function videoJSRecreateSources(defaultSource) {\n    clearTimeout(videoJSRecreateSourcesTimeout);\n    if (empty(player) || empty(player.options_)) {\n        videoJSRecreateSourcesTimeout = setTimeout(function () {\n            videoJSRecreateSources(defaultSource);\n        }, 1000);\n        console.log('videoJSRecreateSources player is empty');\n        return false;\n    }\n\n    var newSources = [];\n\n    $(\"#mainVideo source\").each(function (index) {\n        var res = $(this).attr(\"res\");\n        if (empty(res)) {\n            res = 'auto';\n        }\n        var source = {\n            res: $(this).attr(\"res\"),\n            label: $(this).attr(\"label\"),\n            type: $(this).attr(\"type\"),\n            src: $(this).attr(\"src\"),\n        };\n        ////console.log('videoJSRecreateSources', $(this), source);\n        newSources.push(source);\n    });\n    if (empty(newSources)) {\n        console.log('videoJSRecreateSources: source are empty');\n        return false;\n    }\n\n    player.options_.sources = newSources;\n    if (!empty(player.updateSrc)) {\n        player.updateSrc(player.options_.sources);\n    }\n    if (!empty(player.currentResolution) && !empty(defaultSource)) {\n        player.currentResolution(defaultSource.label, null);\n    }\n    if (!empty(fixResolutionMenu)) {\n        fixResolutionMenu();\n    }\n}\n\n/**\n * \n * MEDIA_ERR_ABORTED (numeric value 1)\n MEDIA_ERR_NETWORK (numeric value 2)\n MEDIA_ERR_DECODE (numeric value 3)\n MEDIA_ERR_SRC_NOT_SUPPORTED (numeric value 4)\n MEDIA_ERR_ENCRYPTED (numeric value 5)\n */\nvar AvideoJSErrorReloadedTimes = 0;\nfunction AvideoJSError(code) {\n    switch (code) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            if (empty(AvideoJSErrorReloadedTimes)) {\n                AvideoJSErrorReloadedTimes++;\n                console.log('AvideoJSError reloadVideoJS in 2 sec');\n                setTimeout(function () {\n                    //reloadVideoJS();\n                }, 2000);\n            } else if (AvideoJSErrorReloadedTimes === 1) {\n                console.log('AvideoJSError reloadDefaultHTML5Player');\n                AvideoJSErrorReloadedTimes++;\n                //var sources = player.currentSources();\n                //reloadDefaultHTML5Player();\n            }\n            break;\n    }\n}\n\nfunction reloadDefaultHTML5Player() {\n    var videoElement;\n    if ($('#mainVideo video').length) {\n        videoElement = $('#mainVideo video').clone();\n    } else if ($('#mainVideo').length) {\n        videoElement = $('#mainVideo').clone();\n    } else {\n        return false;\n    }\n    videoElement.attr('id', 'mainVideo');\n    videoElement.attr('controls', 'controls');\n    videoElement.removeClass('vjs-tech');\n    player.dispose();\n\n    $(\"#main-video\").empty();\n    $(\"#main-video\").append(videoElement);\n\n    player = document.getElementById(\"mainVideo\");\n}\n\nfunction isPromise(p) {\n    if (typeof p === 'object' && typeof p.then === 'function') {\n        return true;\n    }\n\n    return false;\n}\n\nfunction replaceAll(str, find, replace) {\n    return str.replace(new RegExp(find, 'g'), replace);\n}\n\nfunction getExtension(url) {\n    if (empty(url)) {\n        return false;\n    }\n    let domain = (new URL(url));\n    var extension = domain.pathname.split('.').pop().toLowerCase();\n    return extension;\n}\n\nfunction getMimeType(url) {\n    if (empty(url)) {\n        return false;\n    }\n    var extension = getExtension(url);\n    var type = 'text/plain';\n    if (extension === 'js') {\n        type = 'application/javascript';\n    } else if (extension === 'css') {\n        type = 'text/css';\n    } else if (extension === 'ico') {\n        type = 'image/x-icon';\n    } else if (extension === 'jpg' || extension === 'jpeg') {\n        type = 'image/jpeg';\n    } else if (extension === 'gif') {\n        type = 'image/gif';\n    } else if (extension === 'webp') {\n        type = 'image/webp';\n    } else if (extension === 'woff') {\n        type = 'font/woff';\n    } else if (extension === 'woff2') {\n        type = 'font/woff2';\n    } else if (extension === 'pdf') {\n        type = 'application/pdf';\n    } else if (extension === 'zip') {\n        type = 'application/zip';\n    }\n    return type;\n}\n\nfunction isValidURL(value) {\n    if (empty(value)) {\n        return false;\n    }\n    if (/^(ws|wss):\\/\\//i.test(value)) {\n        return true;\n    }\n    if (/^(https?|ftp):\\/\\//i.test(value)) {\n        return true;\n    }\n    return /^(?:(?:(?:https?|ftp|ws|wss):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(value);\n}\n\nfunction blobToURL(blob, type) {\n    blob = blob.slice(0, blob.size, type);\n    var src;\n    if (window.webkitURL != null) {\n        src = window.webkitURL.createObjectURL(blob);\n    } else {\n        src = window.URL.createObjectURL(blob);\n    }\n    return src;\n}\n\nfunction isOnline() {\n    //console.log('window.navigator.onLine', window.navigator.onLine);\n    return window.navigator.onLine;\n}\nvar notifyInputIfIsOutOfBounds_removeClassTImeout;\nvar notifyInputIfIsOutOfBounds_animateClassTImeout;\nfunction notifyInputIfIsOutOfBounds(selector, min_length, max_length) {\n    clearTimeout(notifyInputIfIsOutOfBounds_removeClassTImeout);\n    clearTimeout(notifyInputIfIsOutOfBounds_animateClassTImeout);\n    var text = $(selector).val();\n    var parent = $(selector).parent();\n    var animationInfo = 'animate__headShake';\n    var animationError = 'animate__shakeX';\n    var animationWarning = 'animate__headShake';\n    parent.removeClass('has-error');\n    parent.removeClass('has-warning');\n    parent.removeClass('has-info');\n    parent.removeClass('has-success');\n    parent.removeClass('has-feedback');\n    $(selector).removeClass(animationInfo);\n    $(selector).removeClass(animationError);\n    $(selector).removeClass(animationWarning);\n    $(selector).addClass('animate__animated');\n    parent.find('.help-block').remove();\n    parent.find('.form-control-feedback').remove();\n    var isRequired = min_length == 0 || !empty($(selector).attr('required'));\n    var icon = '';\n    var feedback = '';\n    var force_length = parseInt($(selector).attr('maxlength'));\n\n    if (text.length == 0 && !isRequired) {\n\n    } else if (isTextOutOfBounds(text, min_length, max_length, isRequired)) {\n        var feedbackIcon = 'fas fa-exclamation';\n        parent.addClass('has-feedback');\n        if (!empty(force_length) && text.length >= force_length) {\n            text = text.substr(0, force_length);\n            $(selector).val(text);\n            icon = '<i class=\"fas fa-exclamation-triangle\"></i>';\n            parent.addClass('has-info');\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationInfo);\n            }, 500);\n        } else if (text.length < min_length || !isRequired) {\n            icon = '<i class=\"fas fa-exclamation-circle\"></i>';\n            parent.addClass('has-warning');\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationWarning);\n            }, 500);\n        } else {\n            icon = '<i class=\"fas fa-exclamation-circle\"></i>';\n            parent.addClass('has-error');\n            feedbackIcon = 'fas fa-times';\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationError);\n            }, 500);\n        }\n        feedback = '<i class=\"' + feedbackIcon + ' form-control-feedback\" style=\"right:15px;\"></i>';\n    } else {\n        //console.log('notifyInputIfIsOutOfBounds', text.length, force_length);\n        if (!empty(force_length) && text.length == force_length) {\n            notifyInputIfIsOutOfBounds_animateClassTImeout = setTimeout(function () {\n                $(selector).addClass(animationInfo);\n            }, 500);\n        }\n        icon = '<i class=\"fas fa-check-circle\"></i>';\n        parent.addClass('has-success');\n    }\n    notifyInputIfIsOutOfBounds_removeClassTImeout = setTimeout(function () {\n        $(selector).removeClass(animationInfo);\n        $(selector).removeClass(animationError);\n        $(selector).removeClass(animationWarning);\n    }, 1000);\n    parent.append(feedback + '<small class=\"help-block\">' + icon + ' ' + text.length + ' characters of ' + min_length + '-' + max_length + ' recommended</small>');\n}\n\nfunction passStrengthCheck(selector) {\n    var minLen = 6;\n    var pass = $(selector).val();\n\n    var strength = 0;\n    var strengthMsg = [];\n    if (pass.length > minLen) {\n        strength++;\n    } else {\n        strengthMsg.push('Min length ' + minLen);\n    }\n    if (/[a-z]+/.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Lower case letters');\n    }\n    if (/[A-Z]+/.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Upper case letters');\n    }\n    if (/[0-9]+/.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Numbers');\n    }\n    if (/[^a-z0-9]+/i.test(pass)) {\n        strength++;\n    } else {\n        strengthMsg.push('Special chars');\n    }\n    return {strength: strength, strengthMsg: strengthMsg};\n}\n\nfunction passStrengthCheckInput(selector) {\n    var strengthCheck = passStrengthCheck(selector);\n    var msg = strengthCheck.strengthMsg;\n    var parent = $(selector).parent();\n    parent.removeClass('has-error');\n    parent.removeClass('has-warning');\n    parent.removeClass('has-success');\n    avideoTooltip(selector, '');\n    var pass = $(selector).val();\n    if (empty(pass)) {\n        return false;\n    }\n    switch (strengthCheck.strength) {\n        case 0:\n        case 1:\n        case 2:\n            parent.addClass('has-error');\n            break;\n        case 3:\n        case 4:\n            parent.addClass('has-warning');\n            break;\n        case 5:\n            parent.addClass('has-success');\n            break;\n    }\n    if (!empty(msg)) {\n        var text = msg.join(', ');\n        avideoTooltip(selector, 'Strength: ' + text);\n    }\n    return true;\n}\n\nfunction passStrengthCheckInputKeyUp(selector) {\n    $(selector).keyup(function () {\n        passStrengthCheckInput('#' + $(this).attr('id'));\n    });\n}\n\nfunction setupFormElement(selector, min_length, max_length, force_length, isRequired) {\n    $(selector).attr('min_length', min_length);\n    $(selector).attr('max_length', max_length);\n    if (!isRequired) {\n        $(selector).removeAttr('required');\n    } else {\n        $(selector).attr('required', 'required');\n    }\n    if (force_length) {\n        $(selector).attr('maxlength', max_length);\n        $(selector).attr('minlength', min_length);\n    }\n    $(selector).keyup(function () {\n        notifyInputIfIsOutOfBounds('#' + $(this).attr('id'), $(this).attr('min_length'), $(this).attr('max_length'));\n    });\n}\n\nvar notifyInputIfIsWrongFormat_removeClassTImeout;\nvar notifyInputIfIsWrongFormat_animateClassTImeout;\nfunction notifyInputIfIsWrongFormat(_this, isValid) {\n    clearTimeout(notifyInputIfIsWrongFormat_removeClassTImeout);\n    clearTimeout(notifyInputIfIsWrongFormat_animateClassTImeout);\n    var text = $(_this).val();\n    var parent = $(_this).parent();\n    var animationError = 'animate__shakeX';\n    var feedback = '';\n    parent.removeClass('has-error');\n    parent.removeClass('has-success');\n    $(_this).removeClass(animationError);\n    $(_this).addClass('animate__animated');\n    parent.find('.help-block').remove();\n    parent.find('.form-control-feedback').remove();\n    if (!isValid) {\n        feedbackIcon = 'fas fa-times';\n        parent.addClass('has-error');\n        notifyInputIfIsWrongFormat_animateClassTImeout = setTimeout(function () {\n            $(_this).addClass(animationError);\n        }, 1000);\n    } else {\n        feedbackIcon = 'fas fa-check';\n        parent.addClass('has-success');\n    }\n    feedback = '<i class=\"' + feedbackIcon + ' form-control-feedback\" style=\"top: 25px;right:15px;\"></i>';\n    notifyInputIfIsWrongFormat_removeClassTImeout = setTimeout(function () {\n        $(_this).removeClass(animationError);\n    }, 1000);\n    parent.append(feedback);\n    $(_this).val(text);\n}\n\nfunction setupMySQLInput(selector) {\n    if (typeof $(selector).inputmask !== 'function') {\n        addScript(webSiteRootURL + 'node_modules/inputmask/dist/jquery.inputmask.min.js');\n        setTimeout(function () {\n            setupMySQLInput(selector);\n        }, 1000);\n        return false;\n    }\n    $(selector).inputmask({\n        mask: \"9999-99-99 99:99:99\",\n        onincomplete: function (buffer, opts) {\n            notifyInputIfIsWrongFormat($(this), false);\n        },\n        oncomplete: function (buffer, opts) {\n            notifyInputIfIsWrongFormat($(this), true);\n        }\n    });\n}\n\nfunction isTextOutOfBounds(text, min_length, max_length, isRequired) {\n    //console.log('isTextOutOfBounds', text, min_length, max_length, allow_null);\n    if (empty(text)) {\n        if (!empty(min_length) && isRequired) {\n            //console.log('isTextOutOfBounds 1');\n            return true;\n        } else {\n            //console.log('isTextOutOfBounds 2');\n            return false;\n        }\n    }\n    if (text.length < min_length) {\n        //console.log('isTextOutOfBounds 3');\n        return true;\n    }\n    if (text.length > max_length) {\n        //console.log('isTextOutOfBounds 4');\n        return true;\n    }\n    //console.log('isTextOutOfBounds 5');\n    return false;\n}\n\n/**\n * Usage: setVideoSuggested(videos_id, isSuggested).then((data) => {...}).catch((error) => {console.log(error)});\n * @param {type} videos_id\n * @param {type} isSuggested\n * @returns {Promise}\n */\nasync function setVideoSuggested(videos_id, isSuggested) {\n    modal.showPleaseWait();\n    return new Promise((resolve, reject) => {\n        $.ajax({\n            url: webSiteRootURL + 'objects/videoSuggest.php',\n            data: {\"id\": videos_id, \"isSuggested\": isSuggested},\n            type: 'post',\n            success: function (data) {\n                modal.hidePleaseWait();\n                avideoResponse(data);\n                resolve(data)\n            },\n            error: function (error) {\n                modal.hidePleaseWait();\n                reject(error)\n            },\n        })\n    })\n}\n\nfunction toogleVideoSuggested(btn) {\n    var videos_id = $(btn).attr('videos_id');\n    var isSuggested = $(btn).hasClass('isSuggested');\n    setVideoSuggested(videos_id, !isSuggested).then((data) => {\n        if (!isSuggested) {\n            $(btn).removeClass('isNotSuggested btn-default');\n            $(btn).addClass('isSuggested btn-warning');\n        } else {\n            $(btn).addClass('isNotSuggested btn-default');\n            $(btn).removeClass('isSuggested btn-warning');\n        }\n    }).catch((error) => {\n        console.log(error)\n    });\n}\n\n\n// Cookie functions stolen from w3schools\nfunction setCookie(cname, cvalue, exdays) {\n    Cookies.set(cname, cvalue, {\n        path: '/',\n        expires: exdays\n    });\n}\n\nfunction getCookie(cname) {\n    return Cookies.get(cname);\n}\n\nfunction delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n}\n\nfunction arrayToTemplate(itemsArray, template) {\n    if (typeof itemsArray == 'function') {\n        return '';\n    }\n    if (typeof template !== 'string') {\n        console.error('arrayToTemplate', typeof template, template);\n        return '';\n    }\n    for (var search in itemsArray) {\n        var replace = itemsArray[search];\n        if (typeof replace == 'function') {\n            continue;\n        }\n        template = template.replace(new RegExp('{' + search + '}', 'g'), replace);\n    }\n    template = template.replace(new RegExp('{[^\\}]}', 'g'), '');\n    return template;\n}\n/*\n function avideoLoadPage(url) {\n console.log('avideoLoadPage', url);\n avideoPushState(url);\n if (inMainIframe()) {\n parent.avideoLoadPage(url);\n } else {\n document.location = url;\n }\n }\n \n function avideoLoadPage3(url) {\n console.log('avideoLoadPage3', url);\n avideoPushState(url);\n if (inMainIframe()) {\n parent.modal.showPleaseWait();\n } else {\n modal.showPleaseWait();\n }\n $.ajax({\n url: url,\n success: function (data) {\n var parser = new DOMParser();\n var htmlDoc = parser.parseFromString(data, \"text/html\");\n $('body').fadeOut('fast', function () {\n var head = $(htmlDoc).find('head');\n $('head').html(head.html());\n var selector = 'body > .container-fluid, body > .container';\n var container = $(htmlDoc).find(selector).html();\n $(selector).html(container);\n var scriptsToAdd = $(htmlDoc).find('body script');\n addScripts(scriptsToAdd);\n var footerCode = $(htmlDoc).find('#pluginFooterCode').html();\n $('#pluginFooterCode').html(footerCode);\n $('body').fadeIn('fast', function () {\n if (inMainIframe()) {\n parent.modal.hidePleaseWait();\n parent.updatePageFromIframe();\n } else {\n modal.hidePleaseWait();\n }\n //aHrefToAjax();\n });\n });\n }\n });\n }\n \n function avideoLoadPage2(url) {\n console.log('avideoLoadPage', url);\n avideoPushState(url);\n modal.showPleaseWait();\n $.ajax({\n url: url,\n success: function (data) {\n var parser = new DOMParser();\n var htmlDoc = parser.parseFromString(data, \"text/html\");\n \n $('body').fadeOut('fast', function () {\n var bodyElement = $(htmlDoc).find('body');\n var head = $(htmlDoc).find('head').html();\n var body = bodyElement.html();\n var _class = bodyElement.attr('class');\n var id = bodyElement.attr('id');\n var style = bodyElement.attr('style');\n $('head').html(head);\n $('body').attr('class', _class);\n $('body').attr('id', id);\n $('body').attr('style', style);\n $('body').html(body);\n $('#pluginFooterCode').fadeIn('slow', function () {\n modal.hidePleaseWait();\n });\n });\n }\n });\n }\n \n \n async function aHrefToAjax() {\n if(typeof useIframe === 'undefined' || !useIframe){\n return false;\n }\n $('a.aHrefToAjax').off('click');\n $('a').click(function (evt) {\n var target = $(this).attr('target');\n $(this).addClass('aHrefToAjax');\n if (empty(target)) {\n var url = $(this).attr('href');\n if (isValidURL(url)) {\n evt.preventDefault();\n avideoLoadPage(url);\n return false;\n }\n }\n });\n }\n \n function addScripts(scriptsToAdd) {\n var localScripts = $(\"script\");\n for (index in scriptsToAdd) {\n var script = scriptsToAdd[index];\n if (typeof script === 'object') {\n var src = $(script).attr('src');\n console.log(typeof script, typeof $(script));\n if (empty(src)) {\n try {\n $('body').append(script);\n } catch (e) {\n \n }\n } else {\n var scriptFound = false;\n localScripts.each(function () {\n var _src = $(this).attr('src');\n \n if (src === _src) {\n scriptFound = true;\n return false;\n }\n });\n if (!scriptFound) {\n $('<script src=\"' + src + '\" type=\"text/javascript\"></script>').appendTo(document.body);\n }\n }\n }\n }\n }\n * */\n\nfunction addScript(src) {\n    if (!empty(src)) {\n        var localScripts = $(\"script\");\n        var scriptFound = false;\n        localScripts.each(function () {\n            var _src = $(this).attr('src');\n\n            if (src === _src) {\n                scriptFound = true;\n                return false;\n            }\n        });\n        if (!scriptFound) {\n            console.log('addScript', src);\n            $('<script src=\"' + src + '\" type=\"text/javascript\"></script>').appendTo(document.body);\n        } else {\n            console.log('addScript already added ', src);\n        }\n    }\n}\n\nfunction avideoLogoff(redirect) {\n    sendAVideoMobileLiveStreamerMessage('logoff', '');\n    if (redirect) {\n        document.location = webSiteRootURL + 'logoff';\n    }\n}\n\nasync function sendAVideoMobileLiveStreamerMessage(type, value){\n    if (typeof window.flutter_inappwebview !== 'undefined') {\n        if (typeof window.flutter_inappwebview.callHandler == 'function') {\n            for (i = 0; i < 10; i++) {\n                response = await window.flutter_inappwebview.callHandler('AVideoMobileLiveStreamer' + i, {type: type, value: value, instanceIndex: i});\n                if(response!==null){\n                    console.log('sendAVideoMobileLiveStreamerMessage executed', i, response, type, value);\n                    break;\n                }else{\n                    console.log('sendAVideoMobileLiveStreamerMessage not found', i, type, value);\n                }\n            }\n        } else {\n            console.log('sendAVideoMobileLiveStreamerMessage will try again', type, value);\n            setTimeout(function () {\n                sendAVideoMobileLiveStreamerMessage(type, value);\n            }, 1000);\n        }\n    } else {\n        //window.parent.postMessage({type: type, value: value}, '*');\n        window.top.postMessage({type: type, value: value}, '*');\n    }\n}\nwindow.addEventListener(\"flutterInAppWebViewPlatformReady\", function (event) {\n    sendAVideoMobileLiveStreamerMessage('APPIsReady', 1);\n});\n\nfunction getUser() {\n    var url = webSiteRootURL + 'plugin/API/get.json.php?APIName=user';\n    return $.ajax({\n        url: url,\n        async: false\n    }).responseText;\n}\n"], "filenames": ["view/js/script.js"], "buggy_code_start_loc": [2967], "buggy_code_end_loc": [2973], "fixing_code_start_loc": [2968], "fixing_code_end_loc": [3058], "type": "CWE-79", "message": "Cross Site Scripting (XSS) vulnerability in World Wide Broadcast Network AVideo before 12.4, allows attackers to gain sensitive information via the success parameter to /user.", "other": {"cve": {"id": "CVE-2023-25314", "sourceIdentifier": "cve@mitre.org", "published": "2023-04-25T16:15:09.490", "lastModified": "2023-05-03T20:36:34.593", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Scripting (XSS) vulnerability in World Wide Broadcast Network AVideo before 12.4, allows attackers to gain sensitive information via the success parameter to /user."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wwbn:avideo:*:*:*:*:*:*:*:*", "versionEndExcluding": "12.4", "matchCriteriaId": "C7827575-CC53-4298-AA70-AFD19408C79A"}]}]}], "references": [{"url": "https://github.com/WWBN/AVideo/commit/2b44dee815b208da85e1dcafa9839391c3de2655", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/WWBN/AVideo/commit/2b44dee815b208da85e1dcafa9839391c3de2655"}}