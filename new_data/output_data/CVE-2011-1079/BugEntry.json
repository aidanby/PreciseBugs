{"buggy_code": ["/*\n   BNEP implementation for Linux Bluetooth stack (BlueZ).\n   Copyright (C) 2001-2002 Inventel Systemes\n   Written 2001-2002 by\n\tDavid Libault  <david.libault@inventel.fr>\n\n   Copyright (C) 2002 Maxim Krasnyansky <maxk@qualcomm.com>\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License version 2 as\n   published by the Free Software Foundation;\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.\n   IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) AND AUTHOR(S) BE LIABLE FOR ANY\n   CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES\n   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n   ALL LIABILITY, INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PATENTS,\n   COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS, RELATING TO USE OF THIS\n   SOFTWARE IS DISCLAIMED.\n*/\n\n#include <linux/module.h>\n\n#include <linux/types.h>\n#include <linux/capability.h>\n#include <linux/errno.h>\n#include <linux/kernel.h>\n#include <linux/poll.h>\n#include <linux/fcntl.h>\n#include <linux/skbuff.h>\n#include <linux/socket.h>\n#include <linux/ioctl.h>\n#include <linux/file.h>\n#include <linux/init.h>\n#include <linux/compat.h>\n#include <linux/gfp.h>\n#include <net/sock.h>\n\n#include <asm/system.h>\n#include <asm/uaccess.h>\n\n#include \"bnep.h\"\n\nstatic int bnep_sock_release(struct socket *sock)\n{\n\tstruct sock *sk = sock->sk;\n\n\tBT_DBG(\"sock %p sk %p\", sock, sk);\n\n\tif (!sk)\n\t\treturn 0;\n\n\tsock_orphan(sk);\n\tsock_put(sk);\n\treturn 0;\n}\n\nstatic int bnep_sock_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)\n{\n\tstruct bnep_connlist_req cl;\n\tstruct bnep_connadd_req  ca;\n\tstruct bnep_conndel_req  cd;\n\tstruct bnep_conninfo ci;\n\tstruct socket *nsock;\n\tvoid __user *argp = (void __user *)arg;\n\tint err;\n\n\tBT_DBG(\"cmd %x arg %lx\", cmd, arg);\n\n\tswitch (cmd) {\n\tcase BNEPCONNADD:\n\t\tif (!capable(CAP_NET_ADMIN))\n\t\t\treturn -EACCES;\n\n\t\tif (copy_from_user(&ca, argp, sizeof(ca)))\n\t\t\treturn -EFAULT;\n\n\t\tnsock = sockfd_lookup(ca.sock, &err);\n\t\tif (!nsock)\n\t\t\treturn err;\n\n\t\tif (nsock->sk->sk_state != BT_CONNECTED) {\n\t\t\tsockfd_put(nsock);\n\t\t\treturn -EBADFD;\n\t\t}\n\n\t\terr = bnep_add_connection(&ca, nsock);\n\t\tif (!err) {\n\t\t\tif (copy_to_user(argp, &ca, sizeof(ca)))\n\t\t\t\terr = -EFAULT;\n\t\t} else\n\t\t\tsockfd_put(nsock);\n\n\t\treturn err;\n\n\tcase BNEPCONNDEL:\n\t\tif (!capable(CAP_NET_ADMIN))\n\t\t\treturn -EACCES;\n\n\t\tif (copy_from_user(&cd, argp, sizeof(cd)))\n\t\t\treturn -EFAULT;\n\n\t\treturn bnep_del_connection(&cd);\n\n\tcase BNEPGETCONNLIST:\n\t\tif (copy_from_user(&cl, argp, sizeof(cl)))\n\t\t\treturn -EFAULT;\n\n\t\tif (cl.cnum <= 0)\n\t\t\treturn -EINVAL;\n\n\t\terr = bnep_get_connlist(&cl);\n\t\tif (!err && copy_to_user(argp, &cl, sizeof(cl)))\n\t\t\treturn -EFAULT;\n\n\t\treturn err;\n\n\tcase BNEPGETCONNINFO:\n\t\tif (copy_from_user(&ci, argp, sizeof(ci)))\n\t\t\treturn -EFAULT;\n\n\t\terr = bnep_get_conninfo(&ci);\n\t\tif (!err && copy_to_user(argp, &ci, sizeof(ci)))\n\t\t\treturn -EFAULT;\n\n\t\treturn err;\n\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\n\treturn 0;\n}\n\n#ifdef CONFIG_COMPAT\nstatic int bnep_sock_compat_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)\n{\n\tif (cmd == BNEPGETCONNLIST) {\n\t\tstruct bnep_connlist_req cl;\n\t\tuint32_t uci;\n\t\tint err;\n\n\t\tif (get_user(cl.cnum, (uint32_t __user *) arg) ||\n\t\t\t\tget_user(uci, (u32 __user *) (arg + 4)))\n\t\t\treturn -EFAULT;\n\n\t\tcl.ci = compat_ptr(uci);\n\n\t\tif (cl.cnum <= 0)\n\t\t\treturn -EINVAL;\n\n\t\terr = bnep_get_connlist(&cl);\n\n\t\tif (!err && put_user(cl.cnum, (uint32_t __user *) arg))\n\t\t\terr = -EFAULT;\n\n\t\treturn err;\n\t}\n\n\treturn bnep_sock_ioctl(sock, cmd, arg);\n}\n#endif\n\nstatic const struct proto_ops bnep_sock_ops = {\n\t.family\t\t= PF_BLUETOOTH,\n\t.owner\t\t= THIS_MODULE,\n\t.release\t= bnep_sock_release,\n\t.ioctl\t\t= bnep_sock_ioctl,\n#ifdef CONFIG_COMPAT\n\t.compat_ioctl\t= bnep_sock_compat_ioctl,\n#endif\n\t.bind\t\t= sock_no_bind,\n\t.getname\t= sock_no_getname,\n\t.sendmsg\t= sock_no_sendmsg,\n\t.recvmsg\t= sock_no_recvmsg,\n\t.poll\t\t= sock_no_poll,\n\t.listen\t\t= sock_no_listen,\n\t.shutdown\t= sock_no_shutdown,\n\t.setsockopt\t= sock_no_setsockopt,\n\t.getsockopt\t= sock_no_getsockopt,\n\t.connect\t= sock_no_connect,\n\t.socketpair\t= sock_no_socketpair,\n\t.accept\t\t= sock_no_accept,\n\t.mmap\t\t= sock_no_mmap\n};\n\nstatic struct proto bnep_proto = {\n\t.name\t\t= \"BNEP\",\n\t.owner\t\t= THIS_MODULE,\n\t.obj_size\t= sizeof(struct bt_sock)\n};\n\nstatic int bnep_sock_create(struct net *net, struct socket *sock, int protocol,\n\t\t\t    int kern)\n{\n\tstruct sock *sk;\n\n\tBT_DBG(\"sock %p\", sock);\n\n\tif (sock->type != SOCK_RAW)\n\t\treturn -ESOCKTNOSUPPORT;\n\n\tsk = sk_alloc(net, PF_BLUETOOTH, GFP_ATOMIC, &bnep_proto);\n\tif (!sk)\n\t\treturn -ENOMEM;\n\n\tsock_init_data(sock, sk);\n\n\tsock->ops = &bnep_sock_ops;\n\n\tsock->state = SS_UNCONNECTED;\n\n\tsock_reset_flag(sk, SOCK_ZAPPED);\n\n\tsk->sk_protocol = protocol;\n\tsk->sk_state\t= BT_OPEN;\n\n\treturn 0;\n}\n\nstatic const struct net_proto_family bnep_sock_family_ops = {\n\t.family = PF_BLUETOOTH,\n\t.owner\t= THIS_MODULE,\n\t.create = bnep_sock_create\n};\n\nint __init bnep_sock_init(void)\n{\n\tint err;\n\n\terr = proto_register(&bnep_proto, 0);\n\tif (err < 0)\n\t\treturn err;\n\n\terr = bt_sock_register(BTPROTO_BNEP, &bnep_sock_family_ops);\n\tif (err < 0)\n\t\tgoto error;\n\n\treturn 0;\n\nerror:\n\tBT_ERR(\"Can't register BNEP socket\");\n\tproto_unregister(&bnep_proto);\n\treturn err;\n}\n\nvoid __exit bnep_sock_cleanup(void)\n{\n\tif (bt_sock_unregister(BTPROTO_BNEP) < 0)\n\t\tBT_ERR(\"Can't unregister BNEP socket\");\n\n\tproto_unregister(&bnep_proto);\n}\n"], "fixing_code": ["/*\n   BNEP implementation for Linux Bluetooth stack (BlueZ).\n   Copyright (C) 2001-2002 Inventel Systemes\n   Written 2001-2002 by\n\tDavid Libault  <david.libault@inventel.fr>\n\n   Copyright (C) 2002 Maxim Krasnyansky <maxk@qualcomm.com>\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License version 2 as\n   published by the Free Software Foundation;\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.\n   IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) AND AUTHOR(S) BE LIABLE FOR ANY\n   CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES\n   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n   ALL LIABILITY, INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PATENTS,\n   COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS, RELATING TO USE OF THIS\n   SOFTWARE IS DISCLAIMED.\n*/\n\n#include <linux/module.h>\n\n#include <linux/types.h>\n#include <linux/capability.h>\n#include <linux/errno.h>\n#include <linux/kernel.h>\n#include <linux/poll.h>\n#include <linux/fcntl.h>\n#include <linux/skbuff.h>\n#include <linux/socket.h>\n#include <linux/ioctl.h>\n#include <linux/file.h>\n#include <linux/init.h>\n#include <linux/compat.h>\n#include <linux/gfp.h>\n#include <net/sock.h>\n\n#include <asm/system.h>\n#include <asm/uaccess.h>\n\n#include \"bnep.h\"\n\nstatic int bnep_sock_release(struct socket *sock)\n{\n\tstruct sock *sk = sock->sk;\n\n\tBT_DBG(\"sock %p sk %p\", sock, sk);\n\n\tif (!sk)\n\t\treturn 0;\n\n\tsock_orphan(sk);\n\tsock_put(sk);\n\treturn 0;\n}\n\nstatic int bnep_sock_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)\n{\n\tstruct bnep_connlist_req cl;\n\tstruct bnep_connadd_req  ca;\n\tstruct bnep_conndel_req  cd;\n\tstruct bnep_conninfo ci;\n\tstruct socket *nsock;\n\tvoid __user *argp = (void __user *)arg;\n\tint err;\n\n\tBT_DBG(\"cmd %x arg %lx\", cmd, arg);\n\n\tswitch (cmd) {\n\tcase BNEPCONNADD:\n\t\tif (!capable(CAP_NET_ADMIN))\n\t\t\treturn -EACCES;\n\n\t\tif (copy_from_user(&ca, argp, sizeof(ca)))\n\t\t\treturn -EFAULT;\n\n\t\tnsock = sockfd_lookup(ca.sock, &err);\n\t\tif (!nsock)\n\t\t\treturn err;\n\n\t\tif (nsock->sk->sk_state != BT_CONNECTED) {\n\t\t\tsockfd_put(nsock);\n\t\t\treturn -EBADFD;\n\t\t}\n\t\tca.device[sizeof(ca.device)-1] = 0;\n\n\t\terr = bnep_add_connection(&ca, nsock);\n\t\tif (!err) {\n\t\t\tif (copy_to_user(argp, &ca, sizeof(ca)))\n\t\t\t\terr = -EFAULT;\n\t\t} else\n\t\t\tsockfd_put(nsock);\n\n\t\treturn err;\n\n\tcase BNEPCONNDEL:\n\t\tif (!capable(CAP_NET_ADMIN))\n\t\t\treturn -EACCES;\n\n\t\tif (copy_from_user(&cd, argp, sizeof(cd)))\n\t\t\treturn -EFAULT;\n\n\t\treturn bnep_del_connection(&cd);\n\n\tcase BNEPGETCONNLIST:\n\t\tif (copy_from_user(&cl, argp, sizeof(cl)))\n\t\t\treturn -EFAULT;\n\n\t\tif (cl.cnum <= 0)\n\t\t\treturn -EINVAL;\n\n\t\terr = bnep_get_connlist(&cl);\n\t\tif (!err && copy_to_user(argp, &cl, sizeof(cl)))\n\t\t\treturn -EFAULT;\n\n\t\treturn err;\n\n\tcase BNEPGETCONNINFO:\n\t\tif (copy_from_user(&ci, argp, sizeof(ci)))\n\t\t\treturn -EFAULT;\n\n\t\terr = bnep_get_conninfo(&ci);\n\t\tif (!err && copy_to_user(argp, &ci, sizeof(ci)))\n\t\t\treturn -EFAULT;\n\n\t\treturn err;\n\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\n\treturn 0;\n}\n\n#ifdef CONFIG_COMPAT\nstatic int bnep_sock_compat_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)\n{\n\tif (cmd == BNEPGETCONNLIST) {\n\t\tstruct bnep_connlist_req cl;\n\t\tuint32_t uci;\n\t\tint err;\n\n\t\tif (get_user(cl.cnum, (uint32_t __user *) arg) ||\n\t\t\t\tget_user(uci, (u32 __user *) (arg + 4)))\n\t\t\treturn -EFAULT;\n\n\t\tcl.ci = compat_ptr(uci);\n\n\t\tif (cl.cnum <= 0)\n\t\t\treturn -EINVAL;\n\n\t\terr = bnep_get_connlist(&cl);\n\n\t\tif (!err && put_user(cl.cnum, (uint32_t __user *) arg))\n\t\t\terr = -EFAULT;\n\n\t\treturn err;\n\t}\n\n\treturn bnep_sock_ioctl(sock, cmd, arg);\n}\n#endif\n\nstatic const struct proto_ops bnep_sock_ops = {\n\t.family\t\t= PF_BLUETOOTH,\n\t.owner\t\t= THIS_MODULE,\n\t.release\t= bnep_sock_release,\n\t.ioctl\t\t= bnep_sock_ioctl,\n#ifdef CONFIG_COMPAT\n\t.compat_ioctl\t= bnep_sock_compat_ioctl,\n#endif\n\t.bind\t\t= sock_no_bind,\n\t.getname\t= sock_no_getname,\n\t.sendmsg\t= sock_no_sendmsg,\n\t.recvmsg\t= sock_no_recvmsg,\n\t.poll\t\t= sock_no_poll,\n\t.listen\t\t= sock_no_listen,\n\t.shutdown\t= sock_no_shutdown,\n\t.setsockopt\t= sock_no_setsockopt,\n\t.getsockopt\t= sock_no_getsockopt,\n\t.connect\t= sock_no_connect,\n\t.socketpair\t= sock_no_socketpair,\n\t.accept\t\t= sock_no_accept,\n\t.mmap\t\t= sock_no_mmap\n};\n\nstatic struct proto bnep_proto = {\n\t.name\t\t= \"BNEP\",\n\t.owner\t\t= THIS_MODULE,\n\t.obj_size\t= sizeof(struct bt_sock)\n};\n\nstatic int bnep_sock_create(struct net *net, struct socket *sock, int protocol,\n\t\t\t    int kern)\n{\n\tstruct sock *sk;\n\n\tBT_DBG(\"sock %p\", sock);\n\n\tif (sock->type != SOCK_RAW)\n\t\treturn -ESOCKTNOSUPPORT;\n\n\tsk = sk_alloc(net, PF_BLUETOOTH, GFP_ATOMIC, &bnep_proto);\n\tif (!sk)\n\t\treturn -ENOMEM;\n\n\tsock_init_data(sock, sk);\n\n\tsock->ops = &bnep_sock_ops;\n\n\tsock->state = SS_UNCONNECTED;\n\n\tsock_reset_flag(sk, SOCK_ZAPPED);\n\n\tsk->sk_protocol = protocol;\n\tsk->sk_state\t= BT_OPEN;\n\n\treturn 0;\n}\n\nstatic const struct net_proto_family bnep_sock_family_ops = {\n\t.family = PF_BLUETOOTH,\n\t.owner\t= THIS_MODULE,\n\t.create = bnep_sock_create\n};\n\nint __init bnep_sock_init(void)\n{\n\tint err;\n\n\terr = proto_register(&bnep_proto, 0);\n\tif (err < 0)\n\t\treturn err;\n\n\terr = bt_sock_register(BTPROTO_BNEP, &bnep_sock_family_ops);\n\tif (err < 0)\n\t\tgoto error;\n\n\treturn 0;\n\nerror:\n\tBT_ERR(\"Can't register BNEP socket\");\n\tproto_unregister(&bnep_proto);\n\treturn err;\n}\n\nvoid __exit bnep_sock_cleanup(void)\n{\n\tif (bt_sock_unregister(BTPROTO_BNEP) < 0)\n\t\tBT_ERR(\"Can't unregister BNEP socket\");\n\n\tproto_unregister(&bnep_proto);\n}\n"], "filenames": ["net/bluetooth/bnep/sock.c"], "buggy_code_start_loc": [90], "buggy_code_end_loc": [90], "fixing_code_start_loc": [91], "fixing_code_end_loc": [92], "type": "CWE-20", "message": "The bnep_sock_ioctl function in net/bluetooth/bnep/sock.c in the Linux kernel before 2.6.39 does not ensure that a certain device field ends with a '\\0' character, which allows local users to obtain potentially sensitive information from kernel stack memory, or cause a denial of service (BUG and system crash), via a BNEPCONNADD command.", "other": {"cve": {"id": "CVE-2011-1079", "sourceIdentifier": "secalert@redhat.com", "published": "2012-06-21T23:55:02.067", "lastModified": "2023-02-13T04:29:03.077", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The bnep_sock_ioctl function in net/bluetooth/bnep/sock.c in the Linux kernel before 2.6.39 does not ensure that a certain device field ends with a '\\0' character, which allows local users to obtain potentially sensitive information from kernel stack memory, or cause a denial of service (BUG and system crash), via a BNEPCONNADD command."}, {"lang": "es", "value": "La funci\u00f3n de bnep_sock_ioctl en net/bluetooth/bnep/sock.c en versiones del kernel de Linux anteriores a v2.6.39 no garantiza que un campo de dispositivo determinado termine con un '\\0', lo que permite a usuarios locales obtener informaci\u00f3n sensible de la pila del kernel, o causar una denegaci\u00f3n de servicio (por ca\u00edda del sistema), a trav\u00e9s de un comando BNEPCONNADD."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:P/I:N/A:C", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 5.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.4, "impactScore": 7.8, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.6.38.8", "matchCriteriaId": "57A0A2B0-3B9F-40C2-8C7A-CD9590B51315"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:*:*:*:*:*:*:*", "matchCriteriaId": "7462DB6D-E0A6-4DBB-8E21-66B875184FFC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc1:*:*:*:*:*:*", "matchCriteriaId": "2DDCB342-4F5F-4BF1-9624-882BBC57330D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc2:*:*:*:*:*:*", "matchCriteriaId": "C3AB4113-BF83-4587-8A85-0E4FECEE7D9B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc3:*:*:*:*:*:*", "matchCriteriaId": "4B57F5AD-A697-4090-89B9-81BC12993A1A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc4:*:*:*:*:*:*", "matchCriteriaId": "CA141BCB-A705-4DF5-9EED-746B62C86111"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc5:*:*:*:*:*:*", "matchCriteriaId": "E9ECE134-58A3-4B9D-B9B3-F836C0EDD64C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc6:*:*:*:*:*:*", "matchCriteriaId": "56186720-6B4C-4D71-85C5-7EAC5C5D84A1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc7:*:*:*:*:*:*", "matchCriteriaId": "9BBB4630-CBED-43B9-B203-BE65BBF011AA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38:rc8:*:*:*:*:*:*", "matchCriteriaId": "FD375A78-63D7-441A-9FB0-7BC878AB4EDD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38.1:*:*:*:*:*:*:*", "matchCriteriaId": "A5BEFFDD-02BB-4A05-8372-891DBDB9AC5A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38.2:*:*:*:*:*:*:*", "matchCriteriaId": "766E193D-819C-42EA-8411-AE0013AC15FA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38.3:*:*:*:*:*:*:*", "matchCriteriaId": "3B39B6AF-6A83-48C2-BED2-79228F8513A6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38.4:*:*:*:*:*:*:*", "matchCriteriaId": "CD8A68D1-DFE9-4ADB-9FB8-4D69AB4CAFF8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38.5:*:*:*:*:*:*:*", "matchCriteriaId": "0D6EF951-AF15-4C30-A3A5-3392AA61813C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38.6:*:*:*:*:*:*:*", "matchCriteriaId": "15154FA0-65DC-4855-AC70-3ACF92313F49"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:2.6.38.7:*:*:*:*:*:*:*", "matchCriteriaId": "F4B3A9F4-A61F-4919-A173-3E459F0C5AF8"}]}]}], "references": [{"url": "http://downloads.avaya.com/css/P8/documents/100145416", "source": "secalert@redhat.com"}, {"url": "http://ftp.osuosl.org/pub/linux/kernel/v2.6/ChangeLog-2.6.39", "source": "secalert@redhat.com"}, {"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=43629f8f5ea32a998d06d1bb41eefa0e821ff573", "source": "secalert@redhat.com"}, {"url": "http://packetstormsecurity.com/files/153799/Kernel-Live-Patch-Security-Notice-LSN-0053-1.html", "source": "secalert@redhat.com"}, {"url": "http://rhn.redhat.com/errata/RHSA-2011-0833.html", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2011/03/01/10", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=681260", "source": "secalert@redhat.com"}, {"url": "https://github.com/torvalds/linux/commit/43629f8f5ea32a998d06d1bb41eefa0e821ff573", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/43629f8f5ea32a998d06d1bb41eefa0e821ff573"}}