{"buggy_code": ["/* jshint curly: false, eqeqeq: false */\n/* global ajaxurl */\n\nvar tagBox, array_unique_noempty;\n\n( function( $ ) {\n\tvar tagDelimiter = ( window.tagsSuggestL10n && window.tagsSuggestL10n.tagDelimiter ) || ',';\n\n\t// Return an array with any duplicate, whitespace or empty values removed\n\tarray_unique_noempty = function( array ) {\n\t\tvar out = [];\n\n\t\t$.each( array, function( key, val ) {\n\t\t\tval = $.trim( val );\n\n\t\t\tif ( val && $.inArray( val, out ) === -1 ) {\n\t\t\t\tout.push( val );\n\t\t\t}\n\t\t} );\n\n\t\treturn out;\n\t};\n\n\ttagBox = {\n\t\tclean : function( tags ) {\n\t\t\tif ( ',' !== tagDelimiter ) {\n\t\t\t\ttags = tags.replace( new RegExp( tagDelimiter, 'g' ), ',' );\n\t\t\t}\n\n\t\t\ttags = tags.replace(/\\s*,\\s*/g, ',').replace(/,+/g, ',').replace(/[,\\s]+$/, '').replace(/^[,\\s]+/, '');\n\n\t\t\tif ( ',' !== tagDelimiter ) {\n\t\t\t\ttags = tags.replace( /,/g, tagDelimiter );\n\t\t\t}\n\n\t\t\treturn tags;\n\t\t},\n\n\t\tparseTags : function(el) {\n\t\t\tvar id = el.id,\n\t\t\t\tnum = id.split('-check-num-')[1],\n\t\t\t\ttaxbox = $(el).closest('.tagsdiv'),\n\t\t\t\tthetags = taxbox.find('.the-tags'),\n\t\t\t\tcurrent_tags = thetags.val().split( tagDelimiter ),\n\t\t\t\tnew_tags = [];\n\n\t\t\tdelete current_tags[num];\n\n\t\t\t$.each( current_tags, function( key, val ) {\n\t\t\t\tval = $.trim( val );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tnew_tags.push( val );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthetags.val( this.clean( new_tags.join( tagDelimiter ) ) );\n\n\t\t\tthis.quickClicks( taxbox );\n\t\t\treturn false;\n\t\t},\n\n\t\tquickClicks : function( el ) {\n\t\t\tvar thetags = $('.the-tags', el),\n\t\t\t\ttagchecklist = $('.tagchecklist', el),\n\t\t\t\tid = $(el).attr('id'),\n\t\t\t\tcurrent_tags, disabled;\n\n\t\t\tif ( ! thetags.length )\n\t\t\t\treturn;\n\n\t\t\tdisabled = thetags.prop('disabled');\n\n\t\t\tcurrent_tags = thetags.val().split( tagDelimiter );\n\t\t\ttagchecklist.empty();\n\n\t\t\t$.each( current_tags, function( key, val ) {\n\t\t\t\tvar span, xbutton;\n\n\t\t\t\tval = $.trim( val );\n\n\t\t\t\tif ( ! val )\n\t\t\t\t\treturn;\n\n\t\t\t\t// Create a new span, and ensure the text is properly escaped.\n\t\t\t\tspan = $('<span />').text( val );\n\n\t\t\t\t// If tags editing isn't disabled, create the X button.\n\t\t\t\tif ( ! disabled ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Build the X buttons, hide the X icon with aria-hidden and\n\t\t\t\t\t * use visually hidden text for screen readers.\n\t\t\t\t\t */\n\t\t\t\t\txbutton = $( '<button type=\"button\" id=\"' + id + '-check-num-' + key + '\" class=\"ntdelbutton\">' +\n\t\t\t\t\t\t'<span class=\"remove-tag-icon\" aria-hidden=\"true\"></span>' +\n\t\t\t\t\t\t'<span class=\"screen-reader-text\">' + window.tagsSuggestL10n.removeTerm + ' ' + val + '</span>' +\n\t\t\t\t\t\t'</button>' );\n\n\t\t\t\t\txbutton.on( 'click keypress', function( e ) {\n\t\t\t\t\t\t// On click or when using the Enter/Spacebar keys.\n\t\t\t\t\t\tif ( 'click' === e.type || 13 === e.keyCode || 32 === e.keyCode ) {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t * When using the keyboard, move focus back to the\n\t\t\t\t\t\t\t * add new tag field. Note: when releasing the pressed\n\t\t\t\t\t\t\t * key this will fire the `keyup` event on the input.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif ( 13 === e.keyCode || 32 === e.keyCode ) {\n \t\t\t\t\t\t\t\t$( this ).closest( '.tagsdiv' ).find( 'input.newtag' ).focus();\n \t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttagBox.userAction = 'remove';\n\t\t\t\t\t\t\ttagBox.parseTags( this );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tspan.prepend( '&nbsp;' ).prepend( xbutton );\n\t\t\t\t}\n\n\t\t\t\t// Append the span to the tag list.\n\t\t\t\ttagchecklist.append( span );\n\t\t\t});\n\t\t\t// The buttons list is built now, give feedback to screen reader users.\n\t\t\ttagBox.screenReadersMessage();\n\t\t},\n\n\t\tflushTags : function( el, a, f ) {\n\t\t\tvar tagsval, newtags, text,\n\t\t\t\ttags = $( '.the-tags', el ),\n\t\t\t\tnewtag = $( 'input.newtag', el );\n\n\t\t\ta = a || false;\n\n\t\t\ttext = a ? $(a).text() : newtag.val();\n\n\t\t\t/*\n\t\t\t * Return if there's no new tag or if the input field is empty.\n\t\t\t * Note: when using the keyboard to add tags, focus is moved back to\n\t\t\t * the input field and the `keyup` event attached on this field will\n\t\t\t * fire when releasing the pressed key. Checking also for the field\n\t\t\t * emptiness avoids to set the tags and call quickClicks() again.\n\t\t\t */\n\t\t\tif ( 'undefined' == typeof( text ) || '' === text ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttagsval = tags.val();\n\t\t\tnewtags = tagsval ? tagsval + tagDelimiter + text : text;\n\n\t\t\tnewtags = this.clean( newtags );\n\t\t\tnewtags = array_unique_noempty( newtags.split( tagDelimiter ) ).join( tagDelimiter );\n\t\t\ttags.val( newtags );\n\t\t\tthis.quickClicks( el );\n\n\t\t\tif ( ! a )\n\t\t\t\tnewtag.val('');\n\t\t\tif ( 'undefined' == typeof( f ) )\n\t\t\t\tnewtag.focus();\n\n\t\t\treturn false;\n\t\t},\n\n\t\tget : function( id ) {\n\t\t\tvar tax = id.substr( id.indexOf('-') + 1 );\n\n\t\t\t$.post( ajaxurl, { 'action': 'get-tagcloud', 'tax': tax }, function( r, stat ) {\n\t\t\t\tif ( 0 === r || 'success' != stat ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tr = $( '<p id=\"tagcloud-' + tax + '\" class=\"the-tagcloud\">' + r + '</p>' );\n\n\t\t\t\t$( 'a', r ).click( function() {\n\t\t\t\t\ttagBox.userAction = 'add';\n\t\t\t\t\ttagBox.flushTags( $( '#' + tax ), this );\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\t$( '#' + id ).after( r );\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Track the user's last action.\n\t\t *\n\t\t * @since 4.7.0\n\t\t */\n\t\tuserAction: '',\n\n\t\t/**\n\t\t * Dispatch an audible message to screen readers.\n\t\t *\n\t\t * @since 4.7.0\n\t\t */\n\t\tscreenReadersMessage: function() {\n\t\t\tvar message;\n\n\t\t\tswitch ( this.userAction ) {\n\t\t\t\tcase 'remove':\n\t\t\t\t\tmessage = window.tagsSuggestL10n.termRemoved;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'add':\n\t\t\t\t\tmessage = window.tagsSuggestL10n.termAdded;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twindow.wp.a11y.speak( message, 'assertive' );\n\t\t},\n\n\t\tinit : function() {\n\t\t\tvar ajaxtag = $('div.ajaxtag');\n\n\t\t\t$('.tagsdiv').each( function() {\n\t\t\t\ttagBox.quickClicks( this );\n\t\t\t});\n\n\t\t\t$( '.tagadd', ajaxtag ).click( function() {\n\t\t\t\ttagBox.userAction = 'add';\n\t\t\t\ttagBox.flushTags( $( this ).closest( '.tagsdiv' ) );\n\t\t\t});\n\n\t\t\t$( 'input.newtag', ajaxtag ).keyup( function( event ) {\n\t\t\t\tif ( 13 == event.which ) {\n\t\t\t\t\ttagBox.userAction = 'add';\n\t\t\t\t\ttagBox.flushTags( $( this ).closest( '.tagsdiv' ) );\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t}).keypress( function( event ) {\n\t\t\t\tif ( 13 == event.which ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t}).each( function( i, element ) {\n\t\t\t\t$( element ).wpTagsSuggest();\n\t\t\t});\n\n\t\t\t// save tags on post save/publish\n\t\t\t$('#post').submit(function(){\n\t\t\t\t$('div.tagsdiv').each( function() {\n\t\t\t\t\ttagBox.flushTags(this, false, 1);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Fetch and toggle the Tag cloud.\n\t\t\t$('.tagcloud-link').click(function(){\n\t\t\t\t// On the first click, fetch the tag cloud and insert it in the DOM.\n\t\t\t\ttagBox.get( $( this ).attr( 'id' ) );\n\t\t\t\t// Update button state, remove previous click event and attach a new one to toggle the cloud.\n\t\t\t\t$( this )\n\t\t\t\t\t.attr( 'aria-expanded', 'true' )\n\t\t\t\t\t.unbind()\n\t\t\t\t\t.click( function() {\n\t\t\t\t\t\t$( this )\n\t\t\t\t\t\t\t.attr( 'aria-expanded', 'false' === $( this ).attr( 'aria-expanded' ) ? 'true' : 'false' )\n\t\t\t\t\t\t\t.siblings( '.the-tagcloud' ).toggle();\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n}( jQuery ));\n", "var tagBox,array_unique_noempty;!function(a){var b=window.tagsSuggestL10n&&window.tagsSuggestL10n.tagDelimiter||\",\";array_unique_noempty=function(b){var c=[];return a.each(b,function(b,d){d=a.trim(d),d&&a.inArray(d,c)===-1&&c.push(d)}),c},tagBox={clean:function(a){return\",\"!==b&&(a=a.replace(new RegExp(b,\"g\"),\",\")),a=a.replace(/\\s*,\\s*/g,\",\").replace(/,+/g,\",\").replace(/[,\\s]+$/,\"\").replace(/^[,\\s]+/,\"\"),\",\"!==b&&(a=a.replace(/,/g,b)),a},parseTags:function(c){var d=c.id,e=d.split(\"-check-num-\")[1],f=a(c).closest(\".tagsdiv\"),g=f.find(\".the-tags\"),h=g.val().split(b),i=[];return delete h[e],a.each(h,function(b,c){c=a.trim(c),c&&i.push(c)}),g.val(this.clean(i.join(b))),this.quickClicks(f),!1},quickClicks:function(c){var d,e,f=a(\".the-tags\",c),g=a(\".tagchecklist\",c),h=a(c).attr(\"id\");f.length&&(e=f.prop(\"disabled\"),d=f.val().split(b),g.empty(),a.each(d,function(b,c){var d,f;c=a.trim(c),c&&(d=a(\"<span />\").text(c),e||(f=a('<button type=\"button\" id=\"'+h+\"-check-num-\"+b+'\" class=\"ntdelbutton\"><span class=\"remove-tag-icon\" aria-hidden=\"true\"></span><span class=\"screen-reader-text\">'+window.tagsSuggestL10n.removeTerm+\" \"+c+\"</span></button>\"),f.on(\"click keypress\",function(b){\"click\"!==b.type&&13!==b.keyCode&&32!==b.keyCode||(13!==b.keyCode&&32!==b.keyCode||a(this).closest(\".tagsdiv\").find(\"input.newtag\").focus(),tagBox.userAction=\"remove\",tagBox.parseTags(this))}),d.prepend(\"&nbsp;\").prepend(f)),g.append(d))}),tagBox.screenReadersMessage())},flushTags:function(c,d,e){var f,g,h,i=a(\".the-tags\",c),j=a(\"input.newtag\",c);return d=d||!1,h=d?a(d).text():j.val(),\"undefined\"!=typeof h&&\"\"!==h&&(f=i.val(),g=f?f+b+h:h,g=this.clean(g),g=array_unique_noempty(g.split(b)).join(b),i.val(g),this.quickClicks(c),d||j.val(\"\"),\"undefined\"==typeof e&&j.focus(),!1)},get:function(b){var c=b.substr(b.indexOf(\"-\")+1);a.post(ajaxurl,{action:\"get-tagcloud\",tax:c},function(d,e){0!==d&&\"success\"==e&&(d=a('<p id=\"tagcloud-'+c+'\" class=\"the-tagcloud\">'+d+\"</p>\"),a(\"a\",d).click(function(){return tagBox.userAction=\"add\",tagBox.flushTags(a(\"#\"+c),this),!1}),a(\"#\"+b).after(d))})},userAction:\"\",screenReadersMessage:function(){var a;switch(this.userAction){case\"remove\":a=window.tagsSuggestL10n.termRemoved;break;case\"add\":a=window.tagsSuggestL10n.termAdded;break;default:return}window.wp.a11y.speak(a,\"assertive\")},init:function(){var b=a(\"div.ajaxtag\");a(\".tagsdiv\").each(function(){tagBox.quickClicks(this)}),a(\".tagadd\",b).click(function(){tagBox.userAction=\"add\",tagBox.flushTags(a(this).closest(\".tagsdiv\"))}),a(\"input.newtag\",b).keyup(function(b){13==b.which&&(tagBox.userAction=\"add\",tagBox.flushTags(a(this).closest(\".tagsdiv\")),b.preventDefault(),b.stopPropagation())}).keypress(function(a){13==a.which&&(a.preventDefault(),a.stopPropagation())}).each(function(b,c){a(c).wpTagsSuggest()}),a(\"#post\").submit(function(){a(\"div.tagsdiv\").each(function(){tagBox.flushTags(this,!1,1)})}),a(\".tagcloud-link\").click(function(){tagBox.get(a(this).attr(\"id\")),a(this).attr(\"aria-expanded\",\"true\").unbind().click(function(){a(this).attr(\"aria-expanded\",\"false\"===a(this).attr(\"aria-expanded\")?\"true\":\"false\").siblings(\".the-tagcloud\").toggle()})})}}}(jQuery);", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40169';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["/* jshint curly: false, eqeqeq: false */\n/* global ajaxurl */\n\nvar tagBox, array_unique_noempty;\n\n( function( $ ) {\n\tvar tagDelimiter = ( window.tagsSuggestL10n && window.tagsSuggestL10n.tagDelimiter ) || ',';\n\n\t// Return an array with any duplicate, whitespace or empty values removed\n\tarray_unique_noempty = function( array ) {\n\t\tvar out = [];\n\n\t\t$.each( array, function( key, val ) {\n\t\t\tval = $.trim( val );\n\n\t\t\tif ( val && $.inArray( val, out ) === -1 ) {\n\t\t\t\tout.push( val );\n\t\t\t}\n\t\t} );\n\n\t\treturn out;\n\t};\n\n\ttagBox = {\n\t\tclean : function( tags ) {\n\t\t\tif ( ',' !== tagDelimiter ) {\n\t\t\t\ttags = tags.replace( new RegExp( tagDelimiter, 'g' ), ',' );\n\t\t\t}\n\n\t\t\ttags = tags.replace(/\\s*,\\s*/g, ',').replace(/,+/g, ',').replace(/[,\\s]+$/, '').replace(/^[,\\s]+/, '');\n\n\t\t\tif ( ',' !== tagDelimiter ) {\n\t\t\t\ttags = tags.replace( /,/g, tagDelimiter );\n\t\t\t}\n\n\t\t\treturn tags;\n\t\t},\n\n\t\tparseTags : function(el) {\n\t\t\tvar id = el.id,\n\t\t\t\tnum = id.split('-check-num-')[1],\n\t\t\t\ttaxbox = $(el).closest('.tagsdiv'),\n\t\t\t\tthetags = taxbox.find('.the-tags'),\n\t\t\t\tcurrent_tags = thetags.val().split( tagDelimiter ),\n\t\t\t\tnew_tags = [];\n\n\t\t\tdelete current_tags[num];\n\n\t\t\t$.each( current_tags, function( key, val ) {\n\t\t\t\tval = $.trim( val );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tnew_tags.push( val );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthetags.val( this.clean( new_tags.join( tagDelimiter ) ) );\n\n\t\t\tthis.quickClicks( taxbox );\n\t\t\treturn false;\n\t\t},\n\n\t\tquickClicks : function( el ) {\n\t\t\tvar thetags = $('.the-tags', el),\n\t\t\t\ttagchecklist = $('.tagchecklist', el),\n\t\t\t\tid = $(el).attr('id'),\n\t\t\t\tcurrent_tags, disabled;\n\n\t\t\tif ( ! thetags.length )\n\t\t\t\treturn;\n\n\t\t\tdisabled = thetags.prop('disabled');\n\n\t\t\tcurrent_tags = thetags.val().split( tagDelimiter );\n\t\t\ttagchecklist.empty();\n\n\t\t\t$.each( current_tags, function( key, val ) {\n\t\t\t\tvar span, xbutton;\n\n\t\t\t\tval = $.trim( val );\n\n\t\t\t\tif ( ! val )\n\t\t\t\t\treturn;\n\n\t\t\t\t// Create a new span, and ensure the text is properly escaped.\n\t\t\t\tspan = $('<span />').text( val );\n\n\t\t\t\t// If tags editing isn't disabled, create the X button.\n\t\t\t\tif ( ! disabled ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Build the X buttons, hide the X icon with aria-hidden and\n\t\t\t\t\t * use visually hidden text for screen readers.\n\t\t\t\t\t */\n\t\t\t\t\txbutton = $( '<button type=\"button\" id=\"' + id + '-check-num-' + key + '\" class=\"ntdelbutton\">' +\n\t\t\t\t\t\t'<span class=\"remove-tag-icon\" aria-hidden=\"true\"></span>' +\n\t\t\t\t\t\t'<span class=\"screen-reader-text\">' + window.tagsSuggestL10n.removeTerm + ' ' + span.html() + '</span>' +\n\t\t\t\t\t\t'</button>' );\n\n\t\t\t\t\txbutton.on( 'click keypress', function( e ) {\n\t\t\t\t\t\t// On click or when using the Enter/Spacebar keys.\n\t\t\t\t\t\tif ( 'click' === e.type || 13 === e.keyCode || 32 === e.keyCode ) {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t * When using the keyboard, move focus back to the\n\t\t\t\t\t\t\t * add new tag field. Note: when releasing the pressed\n\t\t\t\t\t\t\t * key this will fire the `keyup` event on the input.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif ( 13 === e.keyCode || 32 === e.keyCode ) {\n \t\t\t\t\t\t\t\t$( this ).closest( '.tagsdiv' ).find( 'input.newtag' ).focus();\n \t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttagBox.userAction = 'remove';\n\t\t\t\t\t\t\ttagBox.parseTags( this );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tspan.prepend( '&nbsp;' ).prepend( xbutton );\n\t\t\t\t}\n\n\t\t\t\t// Append the span to the tag list.\n\t\t\t\ttagchecklist.append( span );\n\t\t\t});\n\t\t\t// The buttons list is built now, give feedback to screen reader users.\n\t\t\ttagBox.screenReadersMessage();\n\t\t},\n\n\t\tflushTags : function( el, a, f ) {\n\t\t\tvar tagsval, newtags, text,\n\t\t\t\ttags = $( '.the-tags', el ),\n\t\t\t\tnewtag = $( 'input.newtag', el );\n\n\t\t\ta = a || false;\n\n\t\t\ttext = a ? $(a).text() : newtag.val();\n\n\t\t\t/*\n\t\t\t * Return if there's no new tag or if the input field is empty.\n\t\t\t * Note: when using the keyboard to add tags, focus is moved back to\n\t\t\t * the input field and the `keyup` event attached on this field will\n\t\t\t * fire when releasing the pressed key. Checking also for the field\n\t\t\t * emptiness avoids to set the tags and call quickClicks() again.\n\t\t\t */\n\t\t\tif ( 'undefined' == typeof( text ) || '' === text ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttagsval = tags.val();\n\t\t\tnewtags = tagsval ? tagsval + tagDelimiter + text : text;\n\n\t\t\tnewtags = this.clean( newtags );\n\t\t\tnewtags = array_unique_noempty( newtags.split( tagDelimiter ) ).join( tagDelimiter );\n\t\t\ttags.val( newtags );\n\t\t\tthis.quickClicks( el );\n\n\t\t\tif ( ! a )\n\t\t\t\tnewtag.val('');\n\t\t\tif ( 'undefined' == typeof( f ) )\n\t\t\t\tnewtag.focus();\n\n\t\t\treturn false;\n\t\t},\n\n\t\tget : function( id ) {\n\t\t\tvar tax = id.substr( id.indexOf('-') + 1 );\n\n\t\t\t$.post( ajaxurl, { 'action': 'get-tagcloud', 'tax': tax }, function( r, stat ) {\n\t\t\t\tif ( 0 === r || 'success' != stat ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tr = $( '<p id=\"tagcloud-' + tax + '\" class=\"the-tagcloud\">' + r + '</p>' );\n\n\t\t\t\t$( 'a', r ).click( function() {\n\t\t\t\t\ttagBox.userAction = 'add';\n\t\t\t\t\ttagBox.flushTags( $( '#' + tax ), this );\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\t$( '#' + id ).after( r );\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Track the user's last action.\n\t\t *\n\t\t * @since 4.7.0\n\t\t */\n\t\tuserAction: '',\n\n\t\t/**\n\t\t * Dispatch an audible message to screen readers.\n\t\t *\n\t\t * @since 4.7.0\n\t\t */\n\t\tscreenReadersMessage: function() {\n\t\t\tvar message;\n\n\t\t\tswitch ( this.userAction ) {\n\t\t\t\tcase 'remove':\n\t\t\t\t\tmessage = window.tagsSuggestL10n.termRemoved;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'add':\n\t\t\t\t\tmessage = window.tagsSuggestL10n.termAdded;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twindow.wp.a11y.speak( message, 'assertive' );\n\t\t},\n\n\t\tinit : function() {\n\t\t\tvar ajaxtag = $('div.ajaxtag');\n\n\t\t\t$('.tagsdiv').each( function() {\n\t\t\t\ttagBox.quickClicks( this );\n\t\t\t});\n\n\t\t\t$( '.tagadd', ajaxtag ).click( function() {\n\t\t\t\ttagBox.userAction = 'add';\n\t\t\t\ttagBox.flushTags( $( this ).closest( '.tagsdiv' ) );\n\t\t\t});\n\n\t\t\t$( 'input.newtag', ajaxtag ).keyup( function( event ) {\n\t\t\t\tif ( 13 == event.which ) {\n\t\t\t\t\ttagBox.userAction = 'add';\n\t\t\t\t\ttagBox.flushTags( $( this ).closest( '.tagsdiv' ) );\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t}).keypress( function( event ) {\n\t\t\t\tif ( 13 == event.which ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t}).each( function( i, element ) {\n\t\t\t\t$( element ).wpTagsSuggest();\n\t\t\t});\n\n\t\t\t// save tags on post save/publish\n\t\t\t$('#post').submit(function(){\n\t\t\t\t$('div.tagsdiv').each( function() {\n\t\t\t\t\ttagBox.flushTags(this, false, 1);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Fetch and toggle the Tag cloud.\n\t\t\t$('.tagcloud-link').click(function(){\n\t\t\t\t// On the first click, fetch the tag cloud and insert it in the DOM.\n\t\t\t\ttagBox.get( $( this ).attr( 'id' ) );\n\t\t\t\t// Update button state, remove previous click event and attach a new one to toggle the cloud.\n\t\t\t\t$( this )\n\t\t\t\t\t.attr( 'aria-expanded', 'true' )\n\t\t\t\t\t.unbind()\n\t\t\t\t\t.click( function() {\n\t\t\t\t\t\t$( this )\n\t\t\t\t\t\t\t.attr( 'aria-expanded', 'false' === $( this ).attr( 'aria-expanded' ) ? 'true' : 'false' )\n\t\t\t\t\t\t\t.siblings( '.the-tagcloud' ).toggle();\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n}( jQuery ));\n", "var tagBox,array_unique_noempty;!function(a){var b=window.tagsSuggestL10n&&window.tagsSuggestL10n.tagDelimiter||\",\";array_unique_noempty=function(b){var c=[];return a.each(b,function(b,d){d=a.trim(d),d&&a.inArray(d,c)===-1&&c.push(d)}),c},tagBox={clean:function(a){return\",\"!==b&&(a=a.replace(new RegExp(b,\"g\"),\",\")),a=a.replace(/\\s*,\\s*/g,\",\").replace(/,+/g,\",\").replace(/[,\\s]+$/,\"\").replace(/^[,\\s]+/,\"\"),\",\"!==b&&(a=a.replace(/,/g,b)),a},parseTags:function(c){var d=c.id,e=d.split(\"-check-num-\")[1],f=a(c).closest(\".tagsdiv\"),g=f.find(\".the-tags\"),h=g.val().split(b),i=[];return delete h[e],a.each(h,function(b,c){c=a.trim(c),c&&i.push(c)}),g.val(this.clean(i.join(b))),this.quickClicks(f),!1},quickClicks:function(c){var d,e,f=a(\".the-tags\",c),g=a(\".tagchecklist\",c),h=a(c).attr(\"id\");f.length&&(e=f.prop(\"disabled\"),d=f.val().split(b),g.empty(),a.each(d,function(b,c){var d,f;c=a.trim(c),c&&(d=a(\"<span />\").text(c),e||(f=a('<button type=\"button\" id=\"'+h+\"-check-num-\"+b+'\" class=\"ntdelbutton\"><span class=\"remove-tag-icon\" aria-hidden=\"true\"></span><span class=\"screen-reader-text\">'+window.tagsSuggestL10n.removeTerm+\" \"+d.html()+\"</span></button>\"),f.on(\"click keypress\",function(b){\"click\"!==b.type&&13!==b.keyCode&&32!==b.keyCode||(13!==b.keyCode&&32!==b.keyCode||a(this).closest(\".tagsdiv\").find(\"input.newtag\").focus(),tagBox.userAction=\"remove\",tagBox.parseTags(this))}),d.prepend(\"&nbsp;\").prepend(f)),g.append(d))}),tagBox.screenReadersMessage())},flushTags:function(c,d,e){var f,g,h,i=a(\".the-tags\",c),j=a(\"input.newtag\",c);return d=d||!1,h=d?a(d).text():j.val(),\"undefined\"!=typeof h&&\"\"!==h&&(f=i.val(),g=f?f+b+h:h,g=this.clean(g),g=array_unique_noempty(g.split(b)).join(b),i.val(g),this.quickClicks(c),d||j.val(\"\"),\"undefined\"==typeof e&&j.focus(),!1)},get:function(b){var c=b.substr(b.indexOf(\"-\")+1);a.post(ajaxurl,{action:\"get-tagcloud\",tax:c},function(d,e){0!==d&&\"success\"==e&&(d=a('<p id=\"tagcloud-'+c+'\" class=\"the-tagcloud\">'+d+\"</p>\"),a(\"a\",d).click(function(){return tagBox.userAction=\"add\",tagBox.flushTags(a(\"#\"+c),this),!1}),a(\"#\"+b).after(d))})},userAction:\"\",screenReadersMessage:function(){var a;switch(this.userAction){case\"remove\":a=window.tagsSuggestL10n.termRemoved;break;case\"add\":a=window.tagsSuggestL10n.termAdded;break;default:return}window.wp.a11y.speak(a,\"assertive\")},init:function(){var b=a(\"div.ajaxtag\");a(\".tagsdiv\").each(function(){tagBox.quickClicks(this)}),a(\".tagadd\",b).click(function(){tagBox.userAction=\"add\",tagBox.flushTags(a(this).closest(\".tagsdiv\"))}),a(\"input.newtag\",b).keyup(function(b){13==b.which&&(tagBox.userAction=\"add\",tagBox.flushTags(a(this).closest(\".tagsdiv\")),b.preventDefault(),b.stopPropagation())}).keypress(function(a){13==a.which&&(a.preventDefault(),a.stopPropagation())}).each(function(b,c){a(c).wpTagsSuggest()}),a(\"#post\").submit(function(){a(\"div.tagsdiv\").each(function(){tagBox.flushTags(this,!1,1)})}),a(\".tagcloud-link\").click(function(){tagBox.get(a(this).attr(\"id\")),a(this).attr(\"aria-expanded\",\"true\").unbind().click(function(){a(this).attr(\"aria-expanded\",\"false\"===a(this).attr(\"aria-expanded\")?\"true\":\"false\").siblings(\".the-tagcloud\").toggle()})})}}}(jQuery);", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40181';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/js/tags-box.js", "wp-admin/js/tags-box.min.js", "wp-includes/version.php"], "buggy_code_start_loc": [95, 1, 7], "buggy_code_end_loc": [96, 2, 8], "fixing_code_start_loc": [95, 1, 7], "fixing_code_end_loc": [96, 2, 8], "type": "CWE-79", "message": "In WordPress before 4.7.3 (wp-admin/js/tags-box.js), there is cross-site scripting (XSS) via taxonomy term names.", "other": {"cve": {"id": "CVE-2017-6818", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-12T01:59:00.317", "lastModified": "2019-03-19T12:20:24.613", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.7.3 (wp-admin/js/tags-box.js), there is cross-site scripting (XSS) via taxonomy term names."}, {"lang": "es", "value": "En WordPress en versiones anteriores a 4.7.3 (wp-admin/js/tags-box.js), hay secuencias de comandos de sitios cruzados (XSS) a trav\u00e9s de nombres de t\u00e9rminos de taxonom\u00eda."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.2", "matchCriteriaId": "5A557EFF-02E2-499A-AA55-15F43DB9D820"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/96601", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037959", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.3", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/9092fd01e1f452f37c313d38b18f9fe6907541f9", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8769", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/9092fd01e1f452f37c313d38b18f9fe6907541f9"}}