{"buggy_code": ["/*\n * SPDX-FileCopyrightText: 1990       , Julianne Frances Haugh\n * SPDX-FileCopyrightText: 1996 - 1997, Marek Micha\u0142kiewicz\n * SPDX-FileCopyrightText: 2003 - 2005, Tomasz K\u0142oczko\n * SPDX-FileCopyrightText: 2007       , Nicolas Fran\u00e7ois\n *\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n#include <config.h>\n\n#ident \"$Id$\"\n\n#include <ctype.h>\n#include <string.h>\n#include <stdio.h>\n#include \"prototypes.h\"\n\n/*\n * valid_field - insure that a field contains all legal characters\n *\n * The supplied field is scanned for non-printable and other illegal\n * characters.\n *  + -1 is returned if an illegal character is present.\n *  +  1 is returned if no illegal characters are present, but the field\n *       contains a non-printable character.\n *  +  0 is returned otherwise.\n */\nint valid_field (const char *field, const char *illegal)\n{\n\tconst char *cp;\n\tint err = 0;\n\n\tif (NULL == field) {\n\t\treturn -1;\n\t}\n\n\t/* For each character of field, search if it appears in the list\n\t * of illegal characters. */\n\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\tif (strchr (illegal, *cp) != NULL) {\n\t\t\terr = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (0 == err) {\n\t\t/* Search if there are some non-printable characters */\n\t\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\t\tif (!isprint (*cp)) {\n\t\t\t\terr = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn err;\n}\n\n/*\n * change_field - change a single field if a new value is given.\n *\n * prompt the user with the name of the field being changed and the\n * current value.\n */\nvoid change_field (char *buf, size_t maxsize, const char *prompt)\n{\n\tchar newf[200];\n\tchar *cp;\n\n\tif (maxsize > sizeof (newf)) {\n\t\tmaxsize = sizeof (newf);\n\t}\n\n\tprintf (\"\\t%s [%s]: \", prompt, buf);\n\t(void) fflush (stdout);\n\tif (fgets (newf, maxsize, stdin) != newf) {\n\t\treturn;\n\t}\n\n\tcp = strchr (newf, '\\n');\n\tif (NULL == cp) {\n\t\treturn;\n\t}\n\t*cp = '\\0';\n\n\tif ('\\0' != newf[0]) {\n\t\t/*\n\t\t * Remove leading and trailing whitespace.  This also\n\t\t * makes it possible to change the field to empty, by\n\t\t * entering a space.  --marekm\n\t\t */\n\n\t\twhile (newf < cp && isspace (cp[-1])) {\n\t\t\tcp--;\n\t\t}\n\t\t*cp = '\\0';\n\n\t\tcp = newf;\n\t\twhile (isspace (*cp)) {\n\t\t\tcp++;\n\t\t}\n\n\t\tstrcpy (buf, cp);\n\t}\n}\n"], "fixing_code": ["/*\n * SPDX-FileCopyrightText: 1990       , Julianne Frances Haugh\n * SPDX-FileCopyrightText: 1996 - 1997, Marek Micha\u0142kiewicz\n * SPDX-FileCopyrightText: 2003 - 2005, Tomasz K\u0142oczko\n * SPDX-FileCopyrightText: 2007       , Nicolas Fran\u00e7ois\n *\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n#include <config.h>\n\n#ident \"$Id$\"\n\n#include <ctype.h>\n#include <string.h>\n#include <stdio.h>\n#include \"prototypes.h\"\n\n/*\n * valid_field - insure that a field contains all legal characters\n *\n * The supplied field is scanned for non-printable and other illegal\n * characters.\n *  + -1 is returned if an illegal or control character is present.\n *  +  1 is returned if no illegal or control characters are present,\n *       but the field contains a non-printable character.\n *  +  0 is returned otherwise.\n */\nint valid_field (const char *field, const char *illegal)\n{\n\tconst char *cp;\n\tint err = 0;\n\n\tif (NULL == field) {\n\t\treturn -1;\n\t}\n\n\t/* For each character of field, search if it appears in the list\n\t * of illegal characters. */\n\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\tif (strchr (illegal, *cp) != NULL) {\n\t\t\terr = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (0 == err) {\n\t\t/* Search if there are non-printable or control characters */\n\t\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\t\tif (!isprint (*cp)) {\n\t\t\t\terr = 1;\n\t\t\t}\n\t\t\tif (!iscntrl (*cp)) {\n\t\t\t\terr = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn err;\n}\n\n/*\n * change_field - change a single field if a new value is given.\n *\n * prompt the user with the name of the field being changed and the\n * current value.\n */\nvoid change_field (char *buf, size_t maxsize, const char *prompt)\n{\n\tchar newf[200];\n\tchar *cp;\n\n\tif (maxsize > sizeof (newf)) {\n\t\tmaxsize = sizeof (newf);\n\t}\n\n\tprintf (\"\\t%s [%s]: \", prompt, buf);\n\t(void) fflush (stdout);\n\tif (fgets (newf, maxsize, stdin) != newf) {\n\t\treturn;\n\t}\n\n\tcp = strchr (newf, '\\n');\n\tif (NULL == cp) {\n\t\treturn;\n\t}\n\t*cp = '\\0';\n\n\tif ('\\0' != newf[0]) {\n\t\t/*\n\t\t * Remove leading and trailing whitespace.  This also\n\t\t * makes it possible to change the field to empty, by\n\t\t * entering a space.  --marekm\n\t\t */\n\n\t\twhile (newf < cp && isspace (cp[-1])) {\n\t\t\tcp--;\n\t\t}\n\t\t*cp = '\\0';\n\n\t\tcp = newf;\n\t\twhile (isspace (*cp)) {\n\t\t\tcp++;\n\t\t}\n\n\t\tstrcpy (buf, cp);\n\t}\n}\n"], "filenames": ["lib/fields.c"], "buggy_code_start_loc": [24], "buggy_code_end_loc": [51], "fixing_code_start_loc": [24], "fixing_code_end_loc": [55], "type": "CWE-74", "message": "In Shadow 4.13, it is possible to inject control characters into fields provided to the SUID program chfn (change finger). Although it is not possible to exploit this directly (e.g., adding a new user fails because \\n is in the block list), it is possible to misrepresent the /etc/passwd file when viewed. Use of \\r manipulations and Unicode characters to work around blocking of the : character make it possible to give the impression that a new user has been added. In other words, an adversary may be able to convince a system administrator to take the system offline (an indirect, social-engineered denial of service) by demonstrating that \"cat /etc/passwd\" shows a rogue user account.", "other": {"cve": {"id": "CVE-2023-29383", "sourceIdentifier": "cve@mitre.org", "published": "2023-04-14T22:15:07.680", "lastModified": "2023-04-24T18:05:30.313", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Shadow 4.13, it is possible to inject control characters into fields provided to the SUID program chfn (change finger). Although it is not possible to exploit this directly (e.g., adding a new user fails because \\n is in the block list), it is possible to misrepresent the /etc/passwd file when viewed. Use of \\r manipulations and Unicode characters to work around blocking of the : character make it possible to give the impression that a new user has been added. In other words, an adversary may be able to convince a system administrator to take the system offline (an indirect, social-engineered denial of service) by demonstrating that \"cat /etc/passwd\" shows a rogue user account."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.3, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shadow_project:shadow:4.13:*:*:*:*:*:*:*", "matchCriteriaId": "79B0C1D0-9CF5-451D-B3B3-750B64FD7575"}]}]}], "references": [{"url": "https://github.com/shadow-maint/shadow/commit/e5905c4b84d4fb90aefcd96ee618411ebfac663d", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/shadow-maint/shadow/pull/687", "source": "cve@mitre.org", "tags": ["Issue Tracking"]}, {"url": "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/cve-2023-29383-abusing-linux-chfn-to-misrepresent-etc-passwd/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.trustwave.com/en-us/resources/security-resources/security-advisories/?fid=31797", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shadow-maint/shadow/commit/e5905c4b84d4fb90aefcd96ee618411ebfac663d"}}