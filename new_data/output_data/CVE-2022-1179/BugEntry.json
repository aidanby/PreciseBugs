{"buggy_code": ["<?php\n\n@define('__POSTCALENDAR__', 'PostCalendar');\n/**\n *  $Id$\n *\n *  PostCalendar::PostNuke Events Calendar Module\n *  Copyright (C) 2002  The PostCalendar Team\n *  http://postcalendar.tv\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  To read the license please read the docs/license.txt or visit\n *  http://www.gnu.org/copyleft/gpl.html\n *\n */\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Acl\\AclExtended;\nuse OpenEMR\\Core\\Header;\n\n//=========================================================================\n//  Load the API Functions\n//=========================================================================\npnModAPILoad(__POSTCALENDAR__, 'admin');\n\nfunction postcalendar_admin_modifyconfig($msg = '', $showMenu = true)\n{\n    $output = new pnHTML();\n\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n\n    $header = \"<html><head><title>\" . xlt(\"Calendar\") . \"</title>\";\n    $header .= Header::setupHeader('', false)  . '</head><body>';\n\n    $output->Text($header);\n\n    if (!empty($msg)) {\n        $output->Text(postcalendar_adminmenu(\"clearCache\"));\n        $output -> Text('<div class=\"alert alert-success mx-1 text-center\" role=\"alert\">');\n        $output->Text(\"<b>$msg</b>\");\n        $output -> Text('</div>');\n    } else {\n        if ($showMenu) {\n            $output->Text(postcalendar_adminmenu(\"\"));\n        }\n    }\n\n    $output->Text(\"</body></html>\");\n\n    return $output->GetOutput();\n}\n\nfunction postcalendar_admin_categoriesConfirm()\n{\n    $output = new pnHTML();\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n    $header = <<<EOF\n\t<html>\n\t<head>\nEOF;\n    $header .= Header::setupHeader('', false)  . '</head><body><div class=\"container\">';\n    $output->Text($header);\n    $output->Text(postcalendar_adminmenu(\"category\"));\n    list($id, $del, $name, $constantid, $value_cat_type, $desc, $color,\n        $event_repeat, $event_repeat_freq,\n        $event_repeat_freq_type, $event_repeat_on_num,\n        $event_repeat_on_day, $event_repeat_on_freq, $durationh, $durationm,\n        $end_date_flag, $end_date_type, $end_date_freq, $end_all_day, $active, $sequence, $aco,\n        $newname, $newconstantid, $newdesc, $newcolor, $new_event_repeat, $new_event_repeat_freq,\n        $new_event_repeat_freq_type, $new_event_repeat_on_num, $new_event_repeat_on_day,\n        $new_event_repeat_on_freq, $new_durationh, $new_durationm, $new_limitid, $new_end_date_flag,\n        $new_end_date_type, $new_end_date_freq, $new_end_all_day, $new_value_cat_type, $newactive, $newsequence, $newaco\n        ) = pnVarCleanFromInput(\n            'id',\n            'del',\n            'name',\n            'constantid',\n            'value_cat_type',\n            'desc',\n            'color',\n            'event_repeat',\n            'event_repeat_freq',\n            'event_repeat_freq_type',\n            'event_repeat_on_num',\n            'event_repeat_on_day',\n            'event_repeat_on_freq',\n            'durationh',\n            'durationm',\n            'end_date_flag',\n            'end_date_type',\n            'end_date_freq',\n            'end_all_day',\n            'active',\n            'sequence',\n            'aco',\n            'newname',\n            'newconstantid',\n            'newdesc',\n            'newcolor',\n            'newevent_repeat',\n            'newevent_repeat_freq',\n            'newevent_repeat_freq_type',\n            'newevent_repeat_on_num',\n            'newevent_repeat_on_day',\n            'newevent_repeat_on_freq',\n            'newdurationh',\n            'newdurationm',\n            'newlimitid',\n            'newend_date_flag',\n            'newend_date_type',\n            'newend_date_freq',\n            'newend_all_day',\n            'newvalue_cat_type',\n            'newactive',\n            'newsequence',\n            'newaco'\n        );\n    //data validation\n    foreach ($name as $i => $item) {\n        if (empty($item)) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Names must contain a value!\"));\n            return $output->GetOutput();\n        }\n        if (empty($constantid[$i])) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must contain a value!\"));\n            return $output->GetOutput();\n        }\n        $tmp = $constantid[$i];\n        if (strpos(trim($tmp), ' ')) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must be one word!\"));\n            return $output->GetOutput();\n        }\n        $tmp = $color[$i];\n        if (strlen($tmp) != 7 || $tmp[0] != \"#\") {\n            $e = $tmp . \" size \" . strlen($tmp) . \" at 0 \" . $tmp[0];\n            $output->Text(postcalendar_admin_categories($msg, \"You entered an invalid color(USE Pick) $e!\"));\n            return $output->GetOutput();\n        }\n    }\n    foreach ($durationh as $i => $val) {\n        if (\n            !is_numeric($durationh[$i]) || !is_numeric($durationm[$i]) ||\n            !is_numeric($event_repeat_freq[$i]) ||\n            !is_numeric($event_repeat_on_freq[$i]) || !is_numeric($end_date_freq[$i])\n        ) {\n            $output->Text(postcalendar_admin_categories(\n                $msg,\n                \" Hours, Minutes and recurrence values must be numeric!\"\n            ));\n            return $output->GetOutput();\n        }\n    }\n    if (!empty($newnam)) {\n        if (\n            !is_numeric($new_durationh) ||\n            !is_numeric($new_durationm) ||\n            !is_numeric($new_event_repeat_freq) ||\n            !is_numeric($new_event_repeat_on_freq) ||\n            !is_numeric($new_end_date_freq)\n        ) {\n            $output->Text(postcalendar_admin_categories($msg, \"Hours, Minutes and recurrence values must be numeric!\"));\n            return $output->GetOutput();\n        }\n    }\n    $new_duration = ($new_durationh * (60 * 60)) + ($new_durationm * 60);\n    $event_recurrspec = serialize(compact(\n        'event_repeat_freq',\n        'event_repeat_freq_type',\n        'event_repeat_on_num',\n        'event_repeat_on_day',\n        'event_repeat_on_freq'\n    ));\n    $new_event_recurrspec = serialize(compact(\n        'new_event_repeat_freq',\n        'new_event_repeat_freq_type',\n        'new_event_repeat_on_num',\n        'new_event_repeat_on_day',\n        'new_event_repeat_on_freq'\n    ));\n    if (is_array($del)) {\n        $dels = implode(',', $del);\n        $delText = _PC_DELETE_CATS . $dels . '.';\n    }\n    $output->FormStart(pnModURL(__POSTCALENDAR__, 'admin', 'categoriesUpdate'));\n    $output->Text(_PC_ARE_YOU_SURE);\n    $output->Linebreak(2);\n    // deletions\n    if (isset($delText)) {\n        $output->FormHidden('dels', $dels);\n        $output->Text($delText);\n        $output->Linebreak();\n    }\n    if (!empty($newname)) {\n        if (empty($newconstantid)) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must contain a value!\"));\n            return $output->GetOutput();\n        }\n        if (strpos(trim($newconstantid), ' ')) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must be one word!\"));\n            return $output->GetOutput();\n        }\n        $output->FormHidden('newname', $newname);\n        $output->FormHidden('newconstantid', $newconstantid);\n        $output->FormHidden('newdesc', $newdesc);\n        $output->FormHidden('newvalue_cat_type', $new_value_cat_type);\n        $output->FormHidden('newcolor', $newcolor);\n        $output->FormHidden('newevent_repeat', $new_event_repeat);\n        $output->FormHidden('newevent_recurrfreq', $new_event_repeat_freq);\n        $output->FormHidden('newevent_recurrspec', $new_event_recurrspec);\n        $output->FormHidden('newduration', $new_duration);\n        $output->FormHidden('newlimitid', $new_limitid);\n        $output->FormHidden('newend_date_flag', $new_end_date_flag);\n        $output->FormHidden('newend_date_type', $new_end_date_type);\n        $output->FormHidden('newend_date_freq', $new_end_date_freq);\n        $output->FormHidden('newend_all_day', $new_end_all_day);\n        $output->FormHidden(\"newactive\", $newactive);\n        $output->FormHidden(\"newsequence\", $newsequence);\n        $output->FormHidden(\"newaco\", $newaco);\n        $output->Text(_PC_ADD_CAT . $newname . '.');\n        $output->Linebreak();\n    }\n    $output->Text(_PC_MODIFY_CATS);\n    $output->FormHidden('id', serialize($id));\n    $output->FormHidden('del', serialize($del));\n    $output->FormHidden('name', serialize($name));\n    $output->FormHidden('constantid', serialize($constantid));\n    $output->FormHidden('desc', serialize($desc));\n    $output->FormHidden('value_cat_type', serialize($value_cat_type));\n    $output->FormHidden('color', serialize($color));\n    $output->FormHidden('event_repeat', serialize($event_repeat));\n    $output->FormHidden('event_recurrspec', $event_recurrspec);\n    $output->FormHidden('durationh', serialize($durationh));\n    $output->FormHidden('durationm', serialize($durationm));\n    $output->FormHidden('end_date_flag', serialize($end_date_flag));\n    $output->FormHidden('end_date_type', serialize($end_date_type));\n    $output->FormHidden('end_date_freq', serialize($end_date_freq));\n    $output->FormHidden('end_all_day', serialize($end_all_day));\n    $output->FormHidden(\"active\", serialize($active));\n    $output->FormHidden(\"sequence\", serialize($sequence));\n    $output->FormHidden(\"aco\", serialize($aco));\n    $output->Linebreak();\n    $output->FormSubmit(_PC_CATS_CONFIRM);\n    $output->FormEnd();\n    return $output->GetOutput();\n}\n\nfunction postcalendar_admin_categoriesUpdate()\n{\n    $output = new pnHTML();\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n\n    list($dbconn) = pnDBGetConn();\n    $pntable = pnDBGetTables();\n\n    list($id,$del,$name,$constantid,$value_cat_type,$desc,$color,\n        $event_repeat_array,$event_recurrspec_array,$dels,$durationh,$durationm,\n        $end_date_flag,$end_date_type,$end_date_freq,$end_all_day,$active,$sequence,$aco,$newname,$newconstantid,$newdesc,$newcolor,\n        $new_event_repeat,$new_event_recurrspec,$new_event_recurrfreq,\n        $new_duration,$new_dailylimitid,$new_end_date_flag,$new_end_date_type,\n        $new_end_date_freq,$new_end_all_day,$new_value_cat_type,$newactive,$newsequence,$newaco\n        ) = pnVarCleanFromInput(\n            'id',\n            'del',\n            'name',\n            'constantid',\n            'value_cat_type',\n            'desc',\n            'color',\n            'event_repeat',\n            'event_recurrspec',\n            'dels',\n            'durationh',\n            'durationm',\n            'end_date_flag',\n            'end_date_type',\n            'end_date_freq',\n            'end_all_day',\n            'active',\n            'sequence',\n            'aco',\n            'newname',\n            'newconstantid',\n            'newdesc',\n            'newcolor',\n            'newevent_repeat',\n            'newevent_recurrspec',\n            'newevent_recurrfreq',\n            'newduration',\n            'newlimitid',\n            'newend_date_flag',\n            'newend_date_type',\n            'newend_date_freq',\n            'newend_all_day',\n            'newvalue_cat_type',\n            'newactive',\n            'newsequence',\n            'newaco'\n        );\n\n    $id = unserialize($id, ['allowed_classes' => false]);\n    $del = unserialize($del, ['allowed_classes' => false]);\n    $name = unserialize($name, ['allowed_classes' => false]);\n    $constantid = unserialize($constantid, ['allowed_classes' => false]);\n    $value_cat_type = unserialize($value_cat_type, ['allowed_classes' => false]);\n    $desc = unserialize($desc, ['allowed_classes' => false]);\n    $color = unserialize($color, ['allowed_classes' => false]);\n    $event_repeat_array = unserialize($event_repeat_array, ['allowed_classes' => false]);\n    $event_recurrspec_array = unserialize($event_recurrspec_array, ['allowed_classes' => false]);\n    $durationh = unserialize($durationh, ['allowed_classes' => false]);\n    $durationm = unserialize($durationm, ['allowed_classes' => false]);\n    $end_date_flag = unserialize($end_date_flag, ['allowed_classes' => false]);\n    $end_date_type = unserialize($end_date_type, ['allowed_classes' => false]);\n    $end_date_freq = unserialize($end_date_freq, ['allowed_classes' => false]);\n    $end_all_day = unserialize($end_all_day, ['allowed_classes' => false]);\n    $active = unserialize($active, ['allowed_classes' => false]);\n    $sequence = unserialize($sequence, ['allowed_classes' => false]);\n    $aco = unserialize($aco, ['allowed_classes' => false]);\n    $updates = array();\n\n    if (isset($id)) {\n        foreach ($id as $k => $i) {\n            $found = false;\n            if (!empty($del)) {\n                if (count($del)) {\n                    foreach ($del as $d) {\n                        if ($i == $d) {\n                            $found = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (!$found) {\n                $event_repeat_freq = $event_recurrspec_array['event_repeat_freq'][$i];\n                $event_repeat_freq_type = $event_recurrspec_array['event_repeat_freq_type'][$i];\n                $event_repeat_on_num = $event_recurrspec_array['event_repeat_on_num'][$i];\n                $event_repeat_on_day = $event_recurrspec_array['event_repeat_on_day'][$i];\n                $event_repeat_on_freq = $event_recurrspec_array['event_repeat_on_freq'][$i];\n\n                $recurrspec = serialize(compact(\n                    'event_repeat_freq',\n                    'event_repeat_freq_type',\n                    'event_repeat_on_num',\n                    'event_repeat_on_day',\n                    'event_repeat_on_freq'\n                ));\n\n                $dur = ( ($durationh[$i] * (60 * 60)) + ($durationm[$i] * 60));\n\n                $update_sql = \"UPDATE $pntable[postcalendar_categories]\n\t\t                             SET pc_catname='\" . pnVarPrepForStore($name[$k]) . \"',\n\t\t                                 pc_constant_id='\" . trim(pnVarPrepForStore($constantid[$k])) . \"',\n\t\t                                 pc_catdesc='\" . trim(pnVarPrepForStore($desc[$k])) . \"',\n\t\t                                 pc_cattype='\" . trim(pnVarPrepForStore($value_cat_type[$k])) . \"',\n\t\t                                 pc_catcolor='\" . pnVarPrepForStore($color[$k]) . \"',\n\t\t                                 pc_recurrtype='\" . pnVarPrepForStore($event_repeat_array[$i]) . \"',\n\t\t                                 pc_recurrspec='\" . pnVarPrepForStore($recurrspec) . \"',\n\t\t                                 pc_duration='\" . pnVarPrepForStore($dur) . \"',\n\t\t                                 pc_end_date_flag='\" . pnVarPrepForStore($end_date_flag[$i]) . \"',\n\t\t                             \t pc_end_date_type='\" . pnVarPrepForStore($end_date_type[$i]) . \"',\n\t\t                             \t pc_end_date_freq='\" . pnVarPrepForStore($end_date_freq[$i]) . \"',\n\t\t                             \t pc_end_all_day='\" . pnVarPrepForStore($end_all_day[$i]) . \"',\n\t\t                             \t pc_active ='\" . pnVarPrepForStore($active[$i]) . \"',\n\t\t                             \t pc_seq = '\" . pnVarPrepForStore($sequence[$k]) . \"',\n\t\t                             \t aco_spec = '\" . pnVarPrepForStore($aco[$k]) . \"'\n\t\t                             WHERE pc_catid = '\" . pnVarPrepForStore($i) . \"'\";\n\n                array_push($updates, $update_sql);\n                unset($recurrspec);\n                unset($dur);\n            }\n        }\n    }\n\n\n    $delete = \"DELETE FROM $pntable[postcalendar_categories] WHERE pc_catid IN ($dels)\";\n    $e =  $msg = '';\n    if (!pnModAPIFunc(__POSTCALENDAR__, 'admin', 'updateCategories', array('updates' => $updates))) {\n        $e .= 'UPDATE FAILED';\n    }\n    if (isset($dels)) {\n        if (!pnModAPIFunc(__POSTCALENDAR__, 'admin', 'deleteCategories', array('delete' => $delete))) {\n            $e .= 'DELETE FAILED';\n        }\n    }\n    if (isset($newname)) {\n        $unpacked = unserialize($new_event_recurrspec, ['allowed_classes' => false]);\n        unset($new_event_recurrspec);\n        $new_event_recurrspec['event_repeat_freq'] = $unpacked['new_event_repeat_freq'];\n        $new_event_recurrspec['event_repeat_freq_type'] = $unpacked['new_event_repeat_freq_type'];\n        $new_event_recurrspec['event_repeat_on_num'] = $unpacked['new_event_repeat_on_num'];\n        $new_event_recurrspec['event_repeat_on_day'] = $unpacked['new_event_repeat_on_day'];\n        $new_event_recurrspec['event_repeat_on_freq'] = $unpacked['new_event_repeat_on_freq'];\n        $new_event_recurrspec = serialize($new_event_recurrspec);\n\n        if (\n            !pnModAPIFunc(\n                __POSTCALENDAR__,\n                'admin',\n                'addCategories',\n                array('name' => $newname,'constantid' => $newconstantid,'desc' => $newdesc,'value_cat_type' => $new_value_cat_type,'color' => $newcolor,'active' => $newactive,'sequence' => $newsequence, 'aco' => $newaco,\n                'repeat' => $new_event_repeat,'spec' => $new_event_recurrspec,\n                'recurrfreq' => $new_recurrfreq,'duration' => $new_duration,'limitid' => $new_dailylimitid,\n                'end_date_flag' => $new_end_date_flag,'end_date_type' => $new_end_date_flag,\n                'end_date_freq' => $new_end_date_freq,\n                'end_all_day' => $new_end_all_day)\n            )\n        ) {\n            $e .= 'INSERT FAILED';\n        }\n    }\n\n    if (empty($e)) {\n        $msg = 'DONE';\n    }\n    $output->Text(postcalendar_admin_categories($msg, $e));\n    return $output->GetOutput();\n}\n\n/**\n* Creates a new category\n*/\nfunction postcalendar_admin_categories($msg = '', $e = '', $args = array())\n{\n    extract($args);\n    unset($args);\n\n    $output = new pnHTML();\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n    // set up Smarty\n    $tpl = new pcSmarty();\n    $tpl->caching = false;\n\n    $template_name = pnModGetVar(__POSTCALENDAR__, 'pcTemplate');\n\n    if (!isset($template_name)) {\n        $template_name = 'default';\n    }\n\n    $output->Text(postcalendar_adminmenu(\"category\"));\n\n    if (!empty($e)) {\n        $output -> Text('<div class=\"alert alert-danger mx-1\" role=\"alert\">');\n        $output->Text('<span class=\"text-center font-weight-bold\">' . text($e) . '</span>');\n        $output -> Text('</div><br />');\n    }\n\n    if (!empty($msg)) {\n        $output -> Text('<div class=\"alert alert-success mx-1\" role=\"alert\">');\n        $output->Text('<span class=\"text-center font-weight-bold\">' . text($msg) . '</span>');\n        $output -> Text('</div><br />');\n    }\n\n    //=================================================================\n    //  Setup the correct config file path for the templates\n    //=================================================================\n    $modinfo = pnModGetInfo(pnModGetIDFromName(__POSTCALENDAR__));\n    $modir = pnVarPrepForOS($modinfo['directory']);\n    $modname = $modinfo['displayname'];\n    $all_categories = pnModAPIFunc(__POSTCALENDAR__, 'user', 'getCategories');\n    //print_r($all_categories);\n    unset($modinfo);\n    $tpl->config_dir = \"modules/$modir/pntemplates/$template_name/config/\";\n\n    //=================================================================\n    //  PARSE MAIN\n    //=================================================================\n\n    // create translations if applicable\n    if (($GLOBALS['translate_appt_categories']) && ($_SESSION['language_choice'] > 1)) {\n        $sizeAllCat = count($all_categories);\n        for ($m = 0; $m < $sizeAllCat; $m++) {\n            $tempCategory = $all_categories[$m][\"name\"];\n            $tempDescription = $all_categories[$m][\"desc\"];\n            $all_categories[$m][\"nameTranslate\"] = xl($tempCategory);\n            $all_categories[$m][\"descTranslate\"] = xl($tempDescription);\n        }\n    }\n    $tpl->assign('globals', $GLOBALS);\n\n    $tpl->assign_by_ref('TPL_NAME', $template_name);\n    $tpl->assign('FUNCTION', pnVarCleanFromInput('func'));\n    $tpl->assign_by_ref('ModuleName', $modname);\n    $tpl->assign_by_ref('ModuleDirectory', $modir);\n    $tpl->assign_by_ref('all_categories', $all_categories);\n\n    $tpl->assign('pcDir', $modir);\n    $tpl->assign('action', pnModURL(__POSTCALENDAR__, 'admin', 'categoriesConfirm'));\n    $tpl->assign('adminmenu', postcalendar_adminmenu(\"category\"));\n    $tpl->assign('BGCOLOR2', $GLOBALS['style']['BGCOLOR2']);\n    $tpl->assign('css_header', $GLOBALS['css_header']);\n    $tpl->assign('_PC_REP_CAT_TITLE_S', _PC_REP_CAT_TITLE_S);\n    $tpl->assign('_PC_NEW_CAT_TITLE_S', _PC_NEW_CAT_TITLE_S);\n    $tpl->assign('_PC_CAT_NAME', _PC_CAT_NAME);\n    $tpl->assign('_PC_CAT_CONSTANT_ID', _PC_CAT_CONSTANT_ID);\n    $tpl->assign('_PC_CAT_TYPE', _PC_CAT_TYPE);\n    $tpl->assign('_PC_CAT_NAME_XL', _PC_CAT_NAME_XL);\n    $tpl->assign('_PC_CAT_DESC', _PC_CAT_DESC);\n    $tpl->assign('_PC_CAT_DESC_XL', _PC_CAT_DESC_XL);\n    $tpl->assign('_PC_CAT_COLOR', _PC_CAT_COLOR);\n    $tpl->assign('_PC_CAT_DELETE', _PC_CAT_DELETE);\n    $tpl->assign('_PC_CAT_DUR', _PC_CAT_DUR);\n    $tpl->assign('_PC_COLOR_PICK_TITLE', _PC_COLOR_PICK_TITLE);\n    $tpl->assign('_EDIT_PC_CONFIG_CATDETAILS', _EDIT_PC_CONFIG_CATDETAILS);\n    $tpl->assign(\"_PC_ACTIVE\", _PC_ACTIVE);\n    $tpl->assign(\"_PC_SEQ\", _PC_SEQ);\n    $tpl->assign(\"_ACO\", _ACO);\n    //=================================================================\n    //  Repeating Information\n    //=================================================================\n    $tpl->assign('RepeatingHeader', _PC_REPEATING_HEADER);\n    $tpl->assign('NoRepeatTitle', _PC_NO_REPEAT);\n    $tpl->assign('RepeatTitle', _PC_REPEAT);\n    $tpl->assign('RepeatOnTitle', _PC_REPEAT_ON);\n    $tpl->assign('OfTheMonthTitle', _PC_OF_THE_MONTH);\n    $tpl->assign('EndDateTitle', _PC_END_DATE);\n    $tpl->assign('NoEndDateTitle', _PC_NO_END);\n    $tpl->assign('REP_CAT_TITLE', _PC_REP_CAT_TITLE);\n    $tpl->assign('NEW_CAT_TITLE', _PC_NEW_CAT_TITLE);\n    $tpl->assign('InputNoRepeat', 'event_repeat');\n    $tpl->assign('ValueNoRepeat', '0');\n    $tpl->assign('SelectedNoRepeat', (int) $event_repeat == 0 ? 'checked' : '');\n    $tpl->assign('InputRepeat', 'event_repeat');\n    $tpl->assign('ValueRepeat', '1');\n    $tpl->assign('SelectedRepeat', (int) $event_repeat == 1 ? 'checked' : '');\n\n\n    unset($in);\n    $in = array(_PC_EVERY,_PC_EVERY_OTHER,_PC_EVERY_THIRD,_PC_EVERY_FOURTH);\n    $keys = array(REPEAT_EVERY,REPEAT_EVERY_OTHER,REPEAT_EVERY_THIRD,REPEAT_EVERY_FOURTH);\n    $repeat_freq = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_freq, array('value' => $keys[$k],\n                                      'selected' => ($keys[$k] == $event_repeat_freq ? 'selected' : ''),\n                                      'name' => $v));\n    }\n    $tpl->assign('InputRepeatFreq', 'event_repeat_freq');\n    if (empty($event_repeat_freq) || $event_repeat_freq < 1) {\n        $event_repeat_freq = 1;\n    }\n    $tpl->assign('InputRepeatFreqVal', $event_repeat_freq);\n    $tpl->assign('repeat_freq', $event_repeat_freq);\n    unset($in);\n\n    $in = array(_PC_EVERY_DAY,_PC_EVERY_WORKDAY,_PC_EVERY_WEEK,_PC_EVERY_MONTH,_PC_EVERY_YEAR);\n    $keys = array(REPEAT_EVERY_DAY,REPEAT_EVERY_WORK_DAY,REPEAT_EVERY_WEEK,REPEAT_EVERY_MONTH,REPEAT_EVERY_YEAR);\n    $repeat_freq_type = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_freq_type, array('value' => $keys[$k],\n                                           'selected' => ($keys[$k] == $event_repeat_freq_type ? 'selected' : ''),\n                                           'name' => $v));\n    }\n    $tpl->assign('InputRepeatFreqType', 'event_repeat_freq_type');\n    $tpl->assign('InuptRepeatFreq', '' . 'event_repeat_freq');\n    $tpl->assign('repeat_freq_type', $repeat_freq_type);\n\n    $tpl->assign('InputRepeatOn', 'event_repeat');\n    $tpl->assign('ValueRepeatOn', '2');\n    $tpl->assign('SelectedRepeatOn', (int) $event_repeat == 2 ? 'checked' : '');\n\n    // All Day START\n    $tpl->assign('InputAllDay', 'end_all_day');\n    $tpl->assign('ValueAllDay', '1');\n    $tpl->assign('ValueAllDayNo', '0');\n    $tpl->assign('ALL_DAY_CAT_TITLE', _PC_ALL_DAY_CAT_TITLE);\n    $tpl->assign('ALL_DAY_CAT_YES', _PC_ALL_DAY_CAT_YES);\n    $tpl->assign('ALL_DAY_CAT_NO', _PC_ALL_DAY_CAT_NO);\n\n    //ALL Day End\n    // End date gather date start\n\n    $tpl->assign('InputEndDateFreq', 'end_date_freq');\n    $tpl->assign('InputEndOn', 'end_date_flag');\n    $tpl->assign('InputEndDateFreqType', 'end_date_type');\n    $tpl->assign('ValueNoEnd', '0');\n    $tpl->assign('ValueEnd', '1');\n\n    if (empty($end_date_type)) {\n        $end_date_type = array();\n    }\n    foreach ($in as $k => $v) {\n        array_push($end_date_type, array('value' => $keys[$k],\n                                           'selected' => ($keys[$k] == $end_date_type ? 'selected' : ''),\n                                           'name' => $v));\n    }\n    unset($in);\n\n\n    // End date gather date end\n\n\n    unset($in);\n    $in = array(_PC_EVERY_1ST,_PC_EVERY_2ND,_PC_EVERY_3RD,_PC_EVERY_4TH,_PC_EVERY_LAST);\n    $keys = array(REPEAT_ON_1ST,REPEAT_ON_2ND,REPEAT_ON_3RD,REPEAT_ON_4TH,REPEAT_ON_LAST);\n    $repeat_on_num = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_on_num, array('value' => $keys[$k],\n                                        'selected' => ($keys[$k] == $event_repeat_on_num ? 'selected' : ''),\n                                        'name' => $v));\n    }\n    $tpl->assign('InputRepeatOnNum', 'event_repeat_on_num');\n    $tpl->assign('repeat_on_num', $repeat_on_num);\n\n    unset($in);\n    $in = array(_PC_EVERY_SUN,_PC_EVERY_MON,_PC_EVERY_TUE,_PC_EVERY_WED,_PC_EVERY_THU,_PC_EVERY_FRI,_PC_EVERY_SAT);\n    $keys = array(REPEAT_ON_SUN,REPEAT_ON_MON,REPEAT_ON_TUE,REPEAT_ON_WED,REPEAT_ON_THU,REPEAT_ON_FRI,REPEAT_ON_SAT);\n    $repeat_on_day = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_on_day, array('value' => $keys[$k],\n                                        'selected' => ($keys[$k] == $event_repeat_on_day ? 'selected' : ''),\n                                        'name' => $v));\n    }\n    $tpl->assign('InputRepeatOnDay', 'event_repeat_on_day');\n    $tpl->assign('repeat_on_day', $repeat_on_day);\n\n    unset($in);\n    $in = array(_PC_CAT_PATIENT,_PC_CAT_PROVIDER,_PC_CAT_CLINIC,_PC_CAT_THERAPY_GROUP);\n    $keys = array(TYPE_ON_PATIENT,TYPE_ON_PROVIDER,TYPE_ON_CLINIC,TYPE_ON_THERAPY_GROUP);\n    $cat_type = array();\n    foreach ($in as $k => $v) {\n        array_push($cat_type, array('value' => $keys[$k],\n                                        'selected' => ($keys[$k] == $value_cat_type ? 'selected' : ''),\n                                        'name' => $v));\n    }\n    $tpl->assign('InputCatType', 'value_cat_type');\n    $tpl->assign('cat_type', $cat_type);\n\n    unset($in);\n    $in = array(_PC_OF_EVERY_MONTH,_PC_OF_EVERY_2MONTH,_PC_OF_EVERY_3MONTH,_PC_OF_EVERY_4MONTH,_PC_OF_EVERY_6MONTH,_PC_OF_EVERY_YEAR);\n    $keys = array(REPEAT_ON_MONTH,REPEAT_ON_2MONTH,REPEAT_ON_3MONTH,REPEAT_ON_4MONTH,REPEAT_ON_6MONTH,REPEAT_ON_YEAR);\n    $repeat_on_freq = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_on_freq, array('value' => $keys[$k],\n                                         'selected' => ($keys[$k] == $event_repeat_on_freq ? 'selected' : ''),\n                                         'name' => $v));\n    }\n    $tpl->assign('InputRepeatOnFreq', 'event_repeat_on_freq');\n    if (empty($event_repeat_on_freq) || $event_repeat_on_freq < 1) {\n        $event_repeat_on_freq = 1;\n    }\n    $tpl->assign('InputRepeatOnFreqVal', $event_repeat_on_freq);\n    $tpl->assign('repeat_on_freq', $repeat_on_freq);\n    $tpl->assign('MonthsTitle', _PC_MONTHS);\n    $tpl->assign('DurationHourTitle', _PC_DURATION_HOUR);\n    $tpl->assign('DurationMinTitle', _PC_DURATION_MIN);\n    $tpl->assign('InputDurationHour', \"durationh\");\n    $tpl->assign('InputDurationMin', \"durationm\");\n    $tpl->assign('ActiveTitleYes', xl('Yes'));\n    $tpl->assign('ActiveTitleNo', xl('No'));\n\n    // Added ACO for each category\n    $tpl->assign('InputACO', 'aco');\n    $acoList = AclExtended::genAcoArray();\n    $tpl->assign('ACO_List', $acoList);\n\n    $output->SetOutputMode(_PNH_RETURNOUTPUT);\n    $output->SetOutputMode(_PNH_KEEPOUTPUT);\n\n    $form_hidden = \"<input type=\\\"hidden\\\" name=\\\"is_update\\\" value=\\\"\" . attr($is_update) . \"\\\" />\";\n    $form_hidden .= \"<input type=\\\"hidden\\\" name=\\\"pc_event_id\\\" value=\\\"\" . attr($pc_event_id) . \"\\\" />\";\n    if (isset($data_loaded)) {\n        $form_hidden .= \"<input type=\\\"hidden\\\" name=\\\"data_loaded\\\" value=\\\"\" . attr($data_loaded) . \"\\\" />\";\n        $tpl->assign('FormHidden', $form_hidden);\n    }\n    $form_submit = '<input type=hidden name=\"form_action\" value=\"commit\"/>\n\t\t\t\t   ' . text($authkey) . '<input class=\"btn btn-primary\" type=\"submit\" name=\"submit\" value=\"' . xla('Save') . '\">';\n    $tpl->assign('FormSubmit', $form_submit);\n\n    $output->Text($tpl->fetch($template_name . '/admin/submit_category.html'));\n    $output->Text(postcalendar_footer());\n    return $output->GetOutput();\n}\n\n/**\n * Main administration menu\n */\nfunction postcalendar_adminmenu($menuItem)\n{\n    global $bgcolor1, $bgcolor2;\n\n    @define('_AM_VAL', 1);\n    @define('_PM_VAL', 2);\n\n    @define('_EVENT_APPROVED', 1);\n    @define('_EVENT_QUEUED', 0);\n    @define('_EVENT_HIDDEN', -1);\n\n    $categoryURL  = pnModURL(__POSTCALENDAR__, 'admin', 'categories');\n    $cacheURL     = pnModURL(__POSTCALENDAR__, 'admin', 'clearCache');\n    $systemURL    = pnModURL(__POSTCALENDAR__, 'admin', 'testSystem');\n\n    $categoryText = text(_EDIT_PC_CONFIG_CATEGORIES);\n    $cacheText    = text(_PC_CLEAR_CACHE);\n    $systemText   = text(_PC_TEST_SYSTEM);\n\n    $output = \" <div class='container mt-3 mb-3'><ul class='nav nav-pills'>\";\n\n    if ($menuItem === \"clearCache\") {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link active\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    } elseif ($menuItem === \"testSystem\") {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    } elseif ($menuItem === \"category\") {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link active\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    } else {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    }\n    $output .= \"</ul></div>\";\n    // Return the output that has been generated by this function\n    return $output;\n}\n\nfunction postcalendar_admin_clearCache()\n{\n    $tpl = new pcSmarty();\n    //fmg: check that both subdirs to be cleared first exist and are writeable\n    $spec_err = '';\n\n    if (!file_exists($tpl->compile_dir)) {\n        $spec_err .= \"Error: folder '\" . text($tpl->compile_dir) . \"' doesn't exist!<br />\";\n    } elseif (!is_writeable($tpl->compile_dir)) {\n        $spec_err .= \"Error: folder '\" . text($tpl->compile_dir) . \"' not writeable!<br />\";\n    }\n\n    //note: we don't abort on error... like before.\n    $tpl->clear_all_cache();\n    $tpl->clear_compiled_tpl();\n\n    return postcalendar_admin_modifyconfig('<div class=\"text-center\">' . $spec_err . text(_PC_CACHE_CLEARED) . '</div>');\n}\n\nfunction postcalendar_admin_testSystem()\n{\n    $modinfo = pnModGetInfo(pnModGetIDFromName(__POSTCALENDAR__));\n    $pcDir = pnVarPrepForOS($modinfo['directory']);\n    $version = $modinfo['version'];\n    unset($modinfo);\n\n    $tpl = new pcSmarty();\n    $infos = array();\n\n    $__SERVER =& $_SERVER;\n    $__ENV    =& $_ENV;\n\n    if (defined('_PN_VERSION_NUM')) {\n        $pnVersion = _PN_VERSION_NUM;\n    } else {\n        $pnVersion = pnConfigGetVar('Version_Num');\n    }\n\n    array_push($infos, array('CMS Version', $pnVersion));\n    array_push($infos, array('Sitename', pnConfigGetVar('sitename')));\n    array_push($infos, array('url', pnGetBaseURL()));\n    array_push($infos, array('PHP Version', phpversion()));\n    if ((bool) ini_get('safe_mode')) {\n        $safe_mode = \"On\";\n    } else {\n        $safe_mode = \"Off\";\n    }\n    array_push($infos, array('PHP safe_mode', $safe_mode));\n    if ((bool) ini_get('safe_mode_gid')) {\n        $safe_mode_gid = \"On\";\n    } else {\n        $safe_mode_gid = \"Off\";\n    }\n    array_push($infos, array('PHP safe_mode_gid', $safe_mode_gid));\n    $base_dir = ini_get('open_basedir');\n    if (!empty($base_dir)) {\n        $open_basedir = \"$base_dir\";\n    } else {\n        $open_basedir = \"NULL\";\n    }\n    array_push($infos, array('PHP open_basedir', $open_basedir));\n    array_push($infos, array('SAPI', php_sapi_name()));\n    array_push($infos, array('OS', php_uname()));\n    array_push($infos, array('WebServer', $__SERVER['SERVER_SOFTWARE']));\n    array_push($infos, array('Module dir', \"modules/$pcDir\"));\n\n    $modversion = array();\n    include  \"modules/$pcDir/pnversion.php\";\n\n    $error = '';\n    if ($modversion['version'] != $version) {\n        $error  = '<br /><div class=\"text-danger\">';\n        $error .= \"new version $modversion[version] installed but not updated!\";\n        $error .= '</div>';\n    }\n    array_push($infos, array('Module version', $version . \" $error\"));\n    array_push($infos, array('smarty version', $tpl->_version));\n    array_push($infos, array('smarty location',  SMARTY_DIR));\n    array_push($infos, array('smarty template dir', $tpl->template_dir));\n\n    $info = $tpl->compile_dir;\n    $error = '';\n    if (!file_exists($tpl->compile_dir)) {\n        $error .= \" compile dir doesn't exist! [\" . text($tpl->compile_dir) . \"]<br />\";\n    } else {\n        // dir exists -> check if it's writeable\n        if (!is_writeable($tpl->compile_dir)) {\n            $error .= \" compile dir not writeable! [\" . text($tpl->compile_dir) . \"]<br />\";\n        }\n    }\n    if (strlen($error) > 0) {\n        $info .= \"<br /><div class='text-danger'>$error</div>\";\n    }\n    array_push($infos, array('smarty compile dir',  $info));\n\n    if (AclMain::aclCheckCore('admin', 'super')) {\n        $header = \"<head><title>\" . xlt(\"Diagnostics\") . \"</title></head><body>\";\n        $output = $header;\n        $output .= '<div class=\"container mt-3\"><div class=\"row\"><div class=\"col-sm-12\"><div class=\"clearfix\">';\n        $output .= '<h2>' . xlt('Diagnostics') . '</h2>';\n        $output .= '</div></div></div>';\n        $output .= '<div class=\"table-responsive\"><table class=\"table table-bordered table-striped\"><thead>';\n        $output .= '<tr><th>' . xlt('Name') . '</th><th>' . xlt('Value') . '</th></tr></thead>';\n        foreach ($infos as $info) {\n            $output .= '<tr><td><b>' . pnVarPrepHTMLDisplay($info[0]) . '</b></td>';\n            $output .= '<td>' . pnVarPrepHTMLDisplay($info[1]) . '</td></tr>';\n        }\n        $output .= '</table></div></div>';\n        $output .= '<br /><br />';\n        $output .= postcalendar_admin_modifyconfig('', false);\n        $output .= \"</body></html>\";\n        return $output;\n    } else {\n        die(xlt(\"Not Authorized\"));\n    }\n}\n", "<?php\n\n/**\n * view/plans_config.php  UI for CDR admin rules plan\n *\n * UI to select or add new plans in plans configuration\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jan Jajalla <Jajalla23@gmail.com>\n * @author    Roberto Vasquez <robertogagliotta@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2014 Jan Jajalla <Jajalla23@gmail.com>\n * @copyright Copyright (c) 2014 Roberto Vasquez <robertogagliotta@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n?>\n\n<link rel=\"stylesheet\" href=\"<?php echo $GLOBALS['assets_static_relative'] . '/jquery-ui-themes/themes/ui-lightness/jquery-ui.min.css'; ?>\" />\n<link rel=\"stylesheet\" href=\"<?php css_src('cdr-multiselect/common.css') ?>\" />\n<link rel=\"stylesheet\" href=\"<?php css_src('cdr-multiselect/ui.multiselect.css') ?>\" />\n<link rel=\"stylesheet\" href=\"<?php css_src('cdr-multiselect/plans_config.css') ?>\" />\n\n<script src=\"<?php js_src('/cdr-multiselect/jquery.min.js') ?>\"></script>\n<script src=\"<?php js_src('/cdr-multiselect/jquery-ui.min.js') ?>\"></script>\n<script src=\"<?php js_src('/cdr-multiselect/plugins/localisation/jquery.localisation-min.js') ?>\"></script>\n<script src=\"<?php js_src('/cdr-multiselect/plugins/scrollTo/jquery.scrollTo-min.js') ?>\"></script>\n<script src=\"<?php js_src('/cdr-multiselect/ui.multiselect.js') ?>\"></script>\n<script>\n// Below variables are to be used in the javascript for the cdr-multiselect(from cdr-multiselect/locale/ui-multiselect-cdr.js)\n$.extend($.ui.multiselect.locale, {\n    addAll:<?php echo xlj('Add all rules to plan'); ?>,\n    removeAll:<?php echo xlj('Remove all rules from plan'); ?>,\n    itemsCount:<?php echo xlj('rules already in plan'); ?>\n});\n</script>\n\n<script src=\"<?php js_src('list.js') ?>\"></script>\n<script src=\"<?php js_src('jQuery.fn.sortElements.js') ?>\"></script>\n\n<script>\n    $(function () {\n        //load plans\n        $(\"#cdr-plans\").load('<?php library_src('RulesPlanMappingEventHandlers_ajax.php') ?>');\n\n        $.post(\n            '<?php echo  _base_url() . '/library/RulesPlanMappingEventHandlers_ajax.php?action=getNonCQMPlans'; ?>'\n        )\n        .done(function(resp) {\n            var data = $.parseJSON(resp);\n\n            $.each(data, function(idx, obj) {\n                $('<option id=\"' + obj.plan_id + '\" p_id=\"' + obj.plan_pid + '\" value=\"' + obj.plan_id + '\">' + obj.plan_title + '</option>')\n                    .insertAfter('#select_plan')\n                    .insertBefore('#divider');\n            });\n        });\n\n        //Change selected plan\n        $(\"#cdr-plans-select\").change(function() {\n            $loadRules(\n                    $('#cdr-plans-select').find('option:selected').attr('id'),\n                    $('#cdr-plans-select').find('option:selected').attr('p_id')\n            );\n        });\n\n        //Update Plan status\n        $(\"#cdr-status\").click(function() {\n                        if (window.buttonStatus == \"active\")\n                            {\n                               $deactivatePlan();\n                               $togglePlanStatus(false);\n                             } else {\n\n                    $activatePlan();\n                    $togglePlanStatus(true);\n                             }\n        });\n\n        //Cancel\n        $(\"#cdr-button-cancel\").click(function() {\n            if (confirm(<?php echo xlj('Are you sure you want to cancel your changes?'); ?>)) {\n                $loadRules(\n                    $('#cdr-plans-select').find('option:selected').attr('id'),\n                    $('#cdr-plans-select').find('option:selected').attr('p_id')\n                );\n            }\n        });\n\n        //Delete Plan\n        $(\"#delete_plan\").click(function() {\n            if (confirm(<?php echo xlj('Are you sure you want to delete this plan?'); ?>)) {\n                var selected_plan = $('#cdr-plans-select').find('option:selected').attr('id');\n                var selected_plan_pid = $('#cdr-plans-select').find('option:selected').attr('p_id');\n\n                $(\"body\").addClass(\"loading\");\n\n                $.post\n                (\n                    '<?php echo  _base_url() .\n                            \"/library/RulesPlanMappingEventHandlers_ajax.php?action=deletePlan&plan_id=\"; ?>' + encodeURIComponent(selected_plan)\n                            + '&plan_pid=' + encodeURIComponent(selected_plan_pid)\n                )\n                .done(function(resp) {\n                    $(\"body\").removeClass(\"loading\");\n                    location.reload();\n                })\n                .fail(function (jqXHR, textStatus) {\n                    console.log(textStatus);\n                                        alert(<?php echo xlj('Error while deleting the plan'); ?>);\n                    $(\"body\").removeClass(\"loading\");\n                });\n            }\n        });\n\n        //Submit Changes\n        $(\"#cdr-button-submit\").click(function() {\n            var plan_id = $('#cdr-plans-select').find('option:selected').attr('id');\n            var plan_name = $('#cdr-plans-select').find('option:selected').text();\n            var is_new_plan = false;\n\n            if (plan_id == 'add_new_plan') {\n                //reset\n                $('#new_plan_name')\n                    .css({'border-color':'',\n                            'border-width':''\n                    });\n\n                plan_name = $(\"#new_plan_name\").val();\n                is_new_plan = true;\n            }\n\n            var new_selected = new Array;\n            var new_unselected = new Array;\n\n            $('#cdr_rules_select option').each(function() {\n                if ($(this).attr('selected') && ($(this).attr('init_value') == 'not-selected')) {\n                    new_selected.push($(this).val());\n\n                } else if (!$(this).attr('selected') && ($(this).attr('init_value') == 'selected')) {\n                    new_unselected.push($(this).val());\n                }\n\n            });\n\n            //Validate\n            if (new_selected.length == 0 && new_unselected.length == 0) {\n                alert(<?php echo xlj('No Changes Detected'); ?>);\n                return;\n            } else if (is_new_plan && plan_name.length == 0) {\n                alert(<?php echo xlj('Plan Name Missing'); ?>);\n                $('#new_plan_name')\n                    .css({'border-color':'red',\n                            'border-width':'3px'\n                                });\n                $('#new_plan_name').focus();\n                return;\n            }\n\n            $(\"body\").addClass(\"loading\");\n\n            var postData =\n                {\n                    \"plan_id\": plan_id,\n                    \"added_rules\": new_selected,\n                    \"removed_rules\": new_unselected,\n                    \"plan_name\" : plan_name\n                }\n            var dataString = JSON.stringify(postData);\n\n            $.post(\n                '<?php echo  _base_url() . '/library/RulesPlanMappingEventHandlers_ajax.php?action=commitChanges'; ?>',\n                dataString)\n            .done(function(resp) {\n                var obj = $.parseJSON(resp);\n                if (obj.status_code == '000') {\n                    //Success\n                    if (is_new_plan) {\n                        $('<option id=\"' + obj.plan_id + '\" value=\"' + obj.plan_id + '\">' + obj.plan_title + '</option>')\n                            .insertAfter('#select_plan')\n                            .insertBefore('#divider')\n                            .attr(\"selected\",\"selected\");\n                        plan_id = obj.plan_id;\n\n                        alert(<?php echo xlj('Plan Added Successfully'); ?>);\n\n                    } else {\n                        alert(<?php echo xlj('Plan Updated Successfully'); ?>);\n                    }\n\n                    $loadRules(plan_id, 0);\n\n                } else if (obj.status_code == '001') {\n                    alert(<?php echo xlj('Unknown Error'); ?>);\n\n                } else if (obj.status_code == '002') {\n                    alert(<?php echo xlj('Plan Name Already Taken'); ?>);\n                    $('#new_plan_name')\n                        .css({'border-color':'red',\n                            'border-width':'3px'\n                        });\n                    $('#new_plan_name').focus();\n                } else {\n                    //Error\n                    console.log(obj.status_message);\n                    if (is_new_plan) {\n                        alert(<?php echo xlj('Error while adding new plan'); ?>);\n                    } else {\n                        alert(<?php echo xlj('Error while updating the plan'); ?>);\n                    }\n                }\n\n                $(\"body\").removeClass(\"loading\");\n            })\n            .fail(function (jqXHR, textStatus) {\n                console.log(textStatus);\n                if (is_new_plan) {\n                    alert(<?php echo xlj('Error while adding new plan'); ?>);\n                } else {\n                    alert(<?php echo xlj('Error while updating the plan'); ?>);\n                }\n\n                $(\"body\").removeClass(\"loading\");\n            });\n        });\n    });\n\n    $loadRules = function(selected_plan, selected_plan_pid){\n        $(\"#cdr_rules\").empty(selected_plan);\n        $('#new_plan_container').empty();\n\n        if (selected_plan != 'select_plan') {\n            $(\"body\").addClass(\"loading\");\n\n            $(\"#cdr_hide_show-div\").show();\n            $(\"#delete_plan\").show();\n            $(\"#plan_status_div\").show();\n\n            if (selected_plan == 'add_new_plan') {\n                $(\"#delete_plan\").hide();\n                $(\"#plan_status_div\").hide();\n                $newPlan();\n\n            } else {\n                $loadPlanStatus(selected_plan, selected_plan_pid);\n            }\n\n            $.post\n                (\n                    '<?php echo  _base_url() .\n                            '/library/RulesPlanMappingEventHandlers_ajax.php?action=getRulesInAndNotInPlan&plan_id='; ?>' + selected_plan\n                )\n                .done(function(resp) {\n                    var data = $.parseJSON(resp);\n\n                    $('#cdr_rules')\n                        .append('<select id=\"cdr_rules_select\" class=\"multiselect\" multiple=\"multiple\" name=\"cdr_rules_select[]\"/>');\n\n                    $.each(data, function(idx, obj) {\n                        if (obj.selected  == \"true\") {\n                            $(\"#cdr_rules_select\")\n                                .append(\n                                    $('<option value=\"' + obj.rule_id + '\" selected=\"selected\" init_value=\"selected\">' + obj.rule_title + '</option>')\n                                );\n                        } else {\n                            $(\"#cdr_rules_select\")\n                                .append(\n                                    $('<option value=\"' + obj.rule_id + '\" init_value=\"not-selected\">' + obj.rule_title + '</option>')\n                                );\n                        }\n                    });\n\n                    $(\"#cdr_rules_select\").multiselect({dividerLocation: 0.45});\n                    $(\"body\").removeClass(\"loading\");\n                });\n        } else {\n            $(\"#cdr_hide_show-div\").hide();\n            $(\"#delete_plan\").hide();\n        }\n    }\n\n    $loadPlanStatus = function(selected_plan, selected_plan_pid) {\n        $.post\n        (\n            '<?php echo  _base_url() .\n                    '/library/RulesPlanMappingEventHandlers_ajax.php?action=getPlanStatus&plan_id='; ?>' + encodeURIComponent(selected_plan)\n                    + '&plan_pid=' + encodeURIComponent(selected_plan_pid)\n        )\n        .done(function(resp) {\n            var obj = $.parseJSON(resp);\n\n            if (obj.is_plan_active) {\n                $activatePlan();\n            } else {\n                $deactivatePlan();\n            }\n\n        })\n        .fail(function (jqXHR, textStatus) {\n            console.log(textStatus);\n            alert('<?php echo xls('Error'); ?>');\n        });\n\n    }\n\n    $newPlan = function() {\n        $('#new_plan_container')\n                        .append('<?php echo '<label>' . xla('Plan Name') . ': </label>'; ?>')\n            .append('<input id=\"new_plan_name\" type=\"text\" name=\"new_plan_name\">');\n\n        $(\"#cdr-rules_cont\").removeClass(\"overlay\");\n    }\n\n    $togglePlanStatus = function (isActive) {\n        var selected_plan = $('#cdr-plans-select').find('option:selected').attr('id');\n        var selected_plan_pid = $('#cdr-plans-select').find('option:selected').attr('p_id');\n        var action = 'activate';\n\n        if (!isActive) {\n            action = 'deactivate';\n        }\n\n                var postToggle =\n                       {\n                          \"selected_plan\": selected_plan,\n                          \"plan_pid\":  selected_plan_pid,\n                          \"plan_status\": action\n                       }\n               var dataStringToggle = JSON.stringify(postToggle);\n\n        $.post(\n      '<?php echo  _base_url() . '/library/RulesPlanMappingEventHandlers_ajax.php?action=togglePlanStatus'; ?>'\n               , dataStringToggle).done(function(resp) {\n                        var obj = $.parseJSON(resp);\n                           if (obj == '007')\n                            {\n                              alert(<?php echo xlj('Plan Status Changed'); ?>);\n                             }\n                           if (obj == '002') {\n                              alert(<?php echo xlj('Plan Status Failed to Change'); ?>);\n                             }\n        })\n        .fail(function(jqXHR, textStatus) {\n            console.log(textStatus);\n            alert(<?php echo xlj('Error'); ?>);\n        });\n    }\n\n    $activatePlan = function() {\n        $(\"#plan-status-label\").text('<?php echo xla('Status') . ': ' . xla('Active{{Plan}}'); ?>');\n        window.buttonStatus = \"active\";\n        $(\"#cdr-status\").removeAttr(\"disabled\");\n        $(\"#cdr-status\").text('<?php echo xla('Deactivate'); ?>');\n\n        $(\"#cdr-rules_cont\").removeClass(\"overlay\");\n    }\n\n    $deactivatePlan = function() {\n        $(\"#plan-status-label\").text('<?php echo xla('Status') . ': ' . xla('Inactive'); ?>');\n        window.buttonStatus = \"inactive\";\n        $(\"#cdr-status\").removeAttr(\"disabled\");\n        $(\"#cdr-status\").text('<?php echo xla('Activate'); ?>');\n\n        $(\"#cdr-rules_cont\").addClass(\"overlay\");\n    }\n\n</script>\n\n<div class=\"cdr-mappings\">\n    <br/>\n    <div><b><?php echo xlt('View Plan Rules'); ?></b></div>\n    <br/>\n    <div id=\"cdr_mappings_form-div\" class=\"cdr-form\">\n        <div class=\"cdr-plans\">\n            <?php echo xlt('Plan') . ':'; ?>\n            <select id=\"cdr-plans-select\" name=\"cdr-plans-select\" class=\"cdr-plans-select-class\">\n                             <option id=\"select_plan\" value=\"select_plan\">- <?php echo xlt('SELECT PLAN'); ?> -</option>\n                <option id=\"divider\" value=\"divider\" disabled/>\n                <option id=\"add_new_plan\" value=\"add_new_plan\"><?php echo xlt('ADD NEW PLAN'); ?></option>\n            </select>\n            <input title=\"<?php echo xla('Delete Plan'); ?>\" id=\"delete_plan\" class=\"delete_button\" type=\"image\" style=\"display: none;\"/>\n        </div>\n        <div id=\"new_plan_container\"></div>\n        <div id=\"cdr_hide_show-div\" style=\"display: none;\">\n            <div id=\"plan_status_div\" class=\"plan-status_div\">\n                                <label id='plan-status-label'><?php echo xlt('Status') . ':'; ?></label>\n                <button id='cdr-status' disable><?php echo xlt('Activate'); ?></button>\n            </div>\n            <br/>\n\n            <div id=\"cdr-rules_cont\">\n                <div id=\"cdr_rules\" class=\"cdr-rules-class\"></div>\n\n                <div id=\"cdr_buttons_div\" class=\"cdr-buttons-class\">\n                    <button id='cdr-button-cancel'><?php echo xlt('Cancel'); ?></button>\n                    <button id='cdr-button-submit'><?php echo xlt('Submit'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"modal\"></div>\n", "/*\n * jQuery UI Multiselect\n *\n * Authors:\n *  Michael Aufreiter (quasipartikel.at)\n *  Yanick Rochon (yanick.rochon[at]gmail[dot]com)\n * \n * Dual licensed under the MIT (MIT-LICENSE.txt)\n * and GPL (GPL-LICENSE.txt) licenses.\n * \n * http://www.quasipartikel.at/multiselect/\n *\n * \n * Depends:\n *\tui.core.js\n *\tui.sortable.js\n *\n * Optional:\n * localization (http://plugins.jquery.com/project/localisation)\n * scrollTo (http://plugins.jquery.com/project/ScrollTo)\n * \n * Todo:\n *  Make batch actions faster\n *  Implement dynamic insertion through remote calls\n */\n\n\n(function($) {\n\n$.widget(\"ui.multiselect\", {\n  options: {\n\t\tsortable: true,\n\t\tsearchable: true,\n\t\tdoubleClickable: true,\n\t\tanimated: 'fast',\n\t\tshow: 'slideDown',\n\t\thide: 'slideUp',\n\t\tdividerLocation: 0.6,\n\t\tnodeComparator: function(node1,node2) {\n\t\t\tvar text1 = node1.text(),\n\t\t\t    text2 = node2.text();\n\t\t\treturn text1 == text2 ? 0 : (text1 < text2 ? -1 : 1);\n\t\t}\n\t},\n\t_create: function() {\n\t\tthis.element.hide();\n\t\tthis.id = this.element.attr(\"id\");\n\t\tthis.container = $('<div class=\"ui-multiselect ui-helper-clearfix ui-widget\"></div>').insertAfter(this.element);\n\t\tthis.count = 0; // number of currently selected options\n\t\tthis.selectedContainer = $('<div class=\"selected\"></div>').appendTo(this.container);\n\t\tthis.availableContainer = $('<div class=\"available\"></div>').appendTo(this.container);\n\t\tthis.selectedActions = $('<div class=\"actions ui-widget-header ui-helper-clearfix\"><span class=\"count\">0 '+$.ui.multiselect.locale.itemsCount+'</span><a href=\"#\" class=\"remove-all\">'+$.ui.multiselect.locale.removeAll+'</a></div>').appendTo(this.selectedContainer);\n\t\tthis.availableActions = $('<div class=\"actions ui-widget-header ui-helper-clearfix\"><input type=\"text\" class=\"search empty ui-widget-content ui-corner-all\"/><a href=\"#\" class=\"add-all\">'+$.ui.multiselect.locale.addAll+'</a></div>').appendTo(this.availableContainer);\n\t\tthis.selectedList = $('<ul class=\"selected connected-list\"><li class=\"ui-helper-hidden-accessible\"></li></ul>').bind('selectstart', function(){return false;}).appendTo(this.selectedContainer);\n\t\tthis.availableList = $('<ul class=\"available connected-list\"><li class=\"ui-helper-hidden-accessible\"></li></ul>').bind('selectstart', function(){return false;}).appendTo(this.availableContainer);\n\t\t\n\t\tvar that = this;\n\n\t\t// set dimensions\n\t\tthis.container.width(this.element.width()+1);\n\t\tthis.selectedContainer.width(Math.floor(this.element.width()*this.options.dividerLocation));\n\t\tthis.availableContainer.width(Math.floor(this.element.width()*(1-this.options.dividerLocation)));\n\n\t\t// fix list height to match <option> depending on their individual header's heights\n\t\tthis.selectedList.height(Math.max(this.element.height()-this.selectedActions.height(),1));\n\t\tthis.availableList.height(Math.max(this.element.height()-this.availableActions.height(),1));\n\t\t\n\t\tif ( !this.options.animated ) {\n\t\t\tthis.options.show = 'show';\n\t\t\tthis.options.hide = 'hide';\n\t\t}\n\t\t\n\t\t// init lists\n\t\tthis._populateLists(this.element.find('option'));\n\t\t\n\t\t// make selection sortable\n\t\tif (this.options.sortable) {\n\t\t\tthis.selectedList.sortable({\n\t\t\t\tplaceholder: 'ui-state-highlight',\n\t\t\t\taxis: 'y',\n\t\t\t\tupdate: function(event, ui) {\n\t\t\t\t\t// apply the new sort order to the original selectbox\n\t\t\t\t\tthat.selectedList.find('li').each(function() {\n\t\t\t\t\t\tif ($(this).data('optionLink'))\n\t\t\t\t\t\t\t$(this).data('optionLink').remove().appendTo(that.element);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\treceive: function(event, ui) {\n\t\t\t\t\tui.item.data('optionLink').attr('selected', true);\n\t\t\t\t\t// increment count\n\t\t\t\t\tthat.count += 1;\n\t\t\t\t\tthat._updateCount();\n\t\t\t\t\t// workaround, because there's no way to reference \n\t\t\t\t\t// the new element, see http://dev.jqueryui.com/ticket/4303\n\t\t\t\t\tthat.selectedList.children('.ui-draggable').each(function() {\n\t\t\t\t\t\t$(this).removeClass('ui-draggable');\n\t\t\t\t\t\t$(this).data('optionLink', ui.item.data('optionLink'));\n\t\t\t\t\t\t$(this).data('idx', ui.item.data('idx'));\n\t\t\t\t\t\tthat._applyItemState($(this), true);\n\t\t\t\t\t});\n\t\t\t\n\t\t\t\t\t// workaround according to http://dev.jqueryui.com/ticket/4088\n\t\t\t\t\tsetTimeout(function() { ui.item.remove(); }, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\t// set up livesearch\n\t\tif (this.options.searchable) {\n\t\t\tthis._registerSearchEvents(this.availableContainer.find('input.search'));\n\t\t} else {\n\t\t\t$('.search').hide();\n\t\t}\n\t\t\n\t\t// batch actions\n\t\tthis.container.find(\".remove-all\").click(function() {\n\t\t\tthat._populateLists(that.element.find('option').removeAttr('selected'));\n\t\t\treturn false;\n\t\t});\n\t\t\n\t\tthis.container.find(\".add-all\").click(function() {\n\t\t\tvar options = that.element.find('option').not(\":selected\");\n\t\t\tif (that.availableList.children('li:hidden').length > 1) {\n\t\t\t\tthat.availableList.children('li').each(function(i) {\n\t\t\t\t\tif ($(this).is(\":visible\")) $(options[i-1]).attr('selected', 'selected'); \n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toptions.attr('selected', 'selected');\n\t\t\t}\n\t\t\tthat._populateLists(that.element.find('option'));\n\t\t\treturn false;\n\t\t});\n\t},\n\tdestroy: function() {\n\t\tthis.element.show();\n\t\tthis.container.remove();\n\n\t\t$.Widget.prototype.destroy.apply(this, arguments);\n\t},\n\t_populateLists: function(options) {\n\t\tthis.selectedList.children('.ui-element').remove();\n\t\tthis.availableList.children('.ui-element').remove();\n\t\tthis.count = 0;\n\n\t\tvar that = this;\n\t\tvar items = $(options.map(function(i) {\n\t      var item = that._getOptionNode(this).appendTo(this.selected ? that.selectedList : that.availableList).show();\n\n\t\t\tif (this.selected) that.count += 1;\n\t\t\tthat._applyItemState(item, this.selected);\n\t\t\titem.data('idx', i);\n\t\t\treturn item[0];\n    }));\n\t\t\n\t\t// update count\n\t\tthis._updateCount();\n\t\tthat._filter.apply(this.availableContainer.find('input.search'), [that.availableList]);\n  },\n\t_updateCount: function() {\n\t\tthis.selectedContainer.find('span.count').text(this.count+\" \"+$.ui.multiselect.locale.itemsCount);\n\t},\n\t_getOptionNode: function(option) {\n\t\toption = $(option);\n\t\tvar node = $('<li class=\"ui-state-default ui-element\" title=\"'+option.text()+'\"><span class=\"ui-icon\"/>'+option.text()+'<a href=\"#\" class=\"action\"><span class=\"ui-corner-all ui-icon\"/></a></li>').hide();\n\t\tnode.data('optionLink', option);\n\t\treturn node;\n\t},\n\t// clones an item with associated data\n\t// didn't find a smarter away around this\n\t_cloneWithData: function(clonee) {\n\t\tvar clone = clonee.clone(false,false);\n\t\tclone.data('optionLink', clonee.data('optionLink'));\n\t\tclone.data('idx', clonee.data('idx'));\n\t\treturn clone;\n\t},\n\t_setSelected: function(item, selected) {\n\t\titem.data('optionLink').attr('selected', selected);\n\n\t\tif (selected) {\n\t\t\tvar selectedItem = this._cloneWithData(item);\n\t\t\titem[this.options.hide](this.options.animated, function() { $(this).remove(); });\n\t\t\tselectedItem.appendTo(this.selectedList).hide()[this.options.show](this.options.animated);\n\t\t\t\n\t\t\tthis._applyItemState(selectedItem, true);\n\t\t\treturn selectedItem;\n\t\t} else {\n\t\t\t\n\t\t\t// look for successor based on initial option index\n\t\t\tvar items = this.availableList.find('li'), comparator = this.options.nodeComparator;\n\t\t\tvar succ = null, i = item.data('idx'), direction = comparator(item, $(items[i]));\n\n\t\t\t// TODO: test needed for dynamic list populating\n\t\t\tif ( direction ) {\n\t\t\t\twhile (i>=0 && i<items.length) {\n\t\t\t\t\tdirection > 0 ? i++ : i--;\n\t\t\t\t\tif ( direction != comparator(item, $(items[i])) ) {\n\t\t\t\t\t\t// going up, go back one item down, otherwise leave as is\n\t\t\t\t\t\tsucc = items[direction > 0 ? i : i+1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsucc = items[i];\n\t\t\t}\n\t\t\t\n\t\t\tvar availableItem = this._cloneWithData(item);\n\t\t\tsucc ? availableItem.insertBefore($(succ)) : availableItem.appendTo(this.availableList);\n\t\t\titem[this.options.hide](this.options.animated, function() { $(this).remove(); });\n\t\t\tavailableItem.hide()[this.options.show](this.options.animated);\n\t\t\t\n\t\t\tthis._applyItemState(availableItem, false);\n\t\t\treturn availableItem;\n\t\t}\n\t},\n\t_applyItemState: function(item, selected) {\n\t\tif (selected) {\n\t\t\tif (this.options.sortable)\n\t\t\t\titem.children('span').addClass('ui-icon-arrowthick-2-n-s').removeClass('ui-helper-hidden').addClass('ui-icon');\n\t\t\telse\n\t\t\t\titem.children('span').removeClass('ui-icon-arrowthick-2-n-s').addClass('ui-helper-hidden').removeClass('ui-icon');\n\t\t\titem.find('a.action span').addClass('ui-icon-minus').removeClass('ui-icon-plus');\n\t\t\tthis._registerRemoveEvents(item.find('a.action'));\n\t\t\t\n\t\t} else {\n\t\t\titem.children('span').removeClass('ui-icon-arrowthick-2-n-s').addClass('ui-helper-hidden').removeClass('ui-icon');\n\t\t\titem.find('a.action span').addClass('ui-icon-plus').removeClass('ui-icon-minus');\n\t\t\tthis._registerAddEvents(item.find('a.action'));\n\t\t}\n\t\t\n\t\tthis._registerDoubleClickEvents(item);\n\t\tthis._registerHoverEvents(item);\n\t},\n\t// taken from John Resig's liveUpdate script\n\t_filter: function(list) {\n\t\tvar input = $(this);\n\t\tvar rows = list.children('li'),\n\t\t\tcache = rows.map(function(){\n\t\t\t\t\n\t\t\t\treturn $(this).text().toLowerCase();\n\t\t\t});\n\t\t\n\t\tvar term = $.trim(input.val().toLowerCase()), scores = [];\n\t\t\n\t\tif (!term) {\n\t\t\trows.show();\n\t\t} else {\n\t\t\trows.hide();\n\n\t\t\tcache.each(function(i) {\n\t\t\t\tif (this.indexOf(term)>-1) { scores.push(i); }\n\t\t\t});\n\n\t\t\t$.each(scores, function() {\n\t\t\t\t$(rows[this]).show();\n\t\t\t});\n\t\t}\n\t},\n\t_registerDoubleClickEvents: function(elements) {\n\t\tif (!this.options.doubleClickable) return;\n\t\telements.dblclick(function() {\n\t\t\telements.find('a.action').click();\n\t\t});\n\t},\n\t_registerHoverEvents: function(elements) {\n\t\telements.removeClass('ui-state-hover');\n\t\telements.mouseover(function() {\n\t\t\t$(this).addClass('ui-state-hover');\n\t\t});\n\t\telements.mouseout(function() {\n\t\t\t$(this).removeClass('ui-state-hover');\n\t\t});\n\t},\n\t_registerAddEvents: function(elements) {\n\t\tvar that = this;\n\t\telements.click(function() {\n\t\t\tvar item = that._setSelected($(this).parent(), true);\n\t\t\tthat.count += 1;\n\t\t\tthat._updateCount();\n\t\t\treturn false;\n\t\t});\n\t\t\n\t\t// make draggable\n\t\tif (this.options.sortable) {\n  \t\telements.each(function() {\n  \t\t\t$(this).parent().draggable({\n  \t      connectToSortable: that.selectedList,\n  \t\t\t\thelper: function() {\n  \t\t\t\t\tvar selectedItem = that._cloneWithData($(this)).width($(this).width() - 50);\n  \t\t\t\t\tselectedItem.width($(this).width());\n  \t\t\t\t\treturn selectedItem;\n  \t\t\t\t},\n  \t\t\t\tappendTo: that.container,\n  \t\t\t\tcontainment: that.container,\n  \t\t\t\trevert: 'invalid'\n  \t    });\n  \t\t});\t\t  \n\t\t}\n\t},\n\t_registerRemoveEvents: function(elements) {\n\t\tvar that = this;\n\t\telements.click(function() {\n\t\t\tthat._setSelected($(this).parent(), false);\n\t\t\tthat.count -= 1;\n\t\t\tthat._updateCount();\n\t\t\treturn false;\n\t\t});\n \t},\n\t_registerSearchEvents: function(input) {\n\t\tvar that = this;\n\n\t\tinput.focus(function() {\n\t\t\t$(this).addClass('ui-state-active');\n\t\t})\n\t\t.blur(function() {\n\t\t\t$(this).removeClass('ui-state-active');\n\t\t})\n\t\t.keypress(function(e) {\n\t\t\tif (e.keyCode == 13)\n\t\t\t\treturn false;\n\t\t})\n\t\t.keyup(function() {\n\t\t\tthat._filter.apply(this, [that.availableList]);\n\t\t});\n\t}\n});\n\t\t\n$.extend($.ui.multiselect, {\n\tlocale: {\n\t\taddAll:'Add all',\n\t\tremoveAll:'Remove all',\n\t\titemsCount:'items selected'\n\t}\n});\n\n\n})(jQuery);", "<?php\n\n// +-----------------------------------------------------------------------+\n// | Copyright (c) 2002-2003, Richard Heyes, Harald Radi                        |\n// | All rights reserved.                                                  |\n// |                                                                       |\n// | Redistribution and use in source and binary forms, with or without    |\n// | modification, are permitted provided that the following conditions    |\n// | are met:                                                              |\n// |                                                                       |\n// | o Redistributions of source code must retain the above copyright      |\n// |   notice, this list of conditions and the following disclaimer.       |\n// | o Redistributions in binary form must reproduce the above copyright   |\n// |   notice, this list of conditions and the following disclaimer in the |\n// |   documentation and/or other materials provided with the distribution.|\n// | o The names of the authors may not be used to endorse or promote      |\n// |   products derived from this software without specific prior written  |\n// |   permission.                                                         |\n// |                                                                       |\n// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   |\n// | \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     |\n// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR |\n// | A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  |\n// | OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, |\n// | SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      |\n// | LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, |\n// | DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY |\n// | THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   |\n// | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE |\n// | OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  |\n// |                                                                       |\n// +-----------------------------------------------------------------------+\n// | Author: Richard Heyes <richard@phpguru.org>                           |\n// |         Harald Radi <harald.radi@nme.at>                              |\n// +-----------------------------------------------------------------------+\n//\n// $Id$\n\n/**\n* HTML_TreeMenu Class\n*\n* A simple couple of PHP classes and some not so simple\n* Jabbascript which produces a tree menu. In IE this menu\n* is dynamic, with branches being collapsable. In IE5+ the\n* status of the collapsed/open branches persists across page\n* refreshes.In any other browser the tree is static. Code is\n* based on work of Harald Radi.\n*\n* Usage.\n*\n* After installing the package, copy the example php script to\n* your servers document root. Also place the TreeMenu.js and the\n* images folder in the same place. Running the script should\n* then produce the tree.\n*\n* Thanks go to Chip Chapin (http://www.chipchapin.com) for many\n* excellent ideas and improvements.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\n\nclass HTML_TreeMenu\n{\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    */\n    function __construct()\n    {\n        // Not much to do here :(\n    }\n\n    /**\n    * This function adds an item to the the tree.\n    *\n    * @access public\n    * @param  object $node The node to add. This object should be\n    *                      a HTML_TreeNode object.\n    * @return object       Returns a reference to the new node inside\n    *                      the tree.\n    */\n    function &addItem(&$node)\n    {\n        $this->items[] = &$node;\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Import method for creating HTML_TreeMenu objects/structures\n    * out of existing tree objects/structures. Currently supported\n    * are Wolfram Kriesings' PEAR Tree class, and Richard Heyes' (me!)\n    * Tree class (available here: http://www.phpguru.org/). This\n    * method is intended to be used statically, eg:\n    * $treeMenu = &HTML_TreeMenu::createFromStructure($myTreeStructureObj);\n    *\n    * @param  array  $params   An array of parameters that determine\n    *                          how the import happens. This can consist of:\n    *                            structure   => The tree structure\n    *                            type        => The type of the structure, currently\n    *                                           can be either 'heyes' or 'kriesing'\n    *                            nodeOptions => Default options for each node\n    *\n    * @return object           The resulting HTML_TreeMenu object\n    */\n    function createFromStructure($params)\n    {\n        if (!isset($params['nodeOptions'])) {\n            $params['nodeOptions'] = array();\n        }\n\n        switch (@$params['type']) {\n\n            /**\n            * Wolfram Kriesings' PEAR Tree class\n            */\n            case 'kriesing':\n                $className = strtolower(get_class($params['structure']->dataSourceClass));\n                $isXMLStruct = strpos($className, '_xml') !== false ? true : false;\n\n                // Get the entire tree, the $nodes are sorted like in the tree view\n                // from top to bottom, so we can easily put them in the nodes\n                $nodes = $params['structure']->getNode();\n\n                // Make a new menu and fill it with the values from the tree\n                $treeMenu  = new HTML_TreeMenu();\n                $curNode[0] = &$treeMenu;   // we need the current node as the reference to the\n\n                foreach ($nodes as $aNode) {\n                    $events = array();\n                    $data = array();\n\n                    // In an XML, all the attributes are saved in an array, but since they might be\n                    // used as the parameters, we simply extract them here if we handle an XML-structure\n                    if ($isXMLStruct && sizeof($aNode['attributes'])) {\n                        foreach ($aNode['attributes'] as $key => $val) {\n                            if (!$aNode[$key]) { // dont overwrite existing values\n                                $aNode[$key] = $val;\n                            }\n                        }\n                    }\n\n                    // Process all the data that are saved in $aNode and put them in the data and/or events array\n                    foreach ($aNode as $key => $val) {\n                        if (!is_array($val)) {\n                            // Dont get the recursive data in here! they are always arrays\n                            if (substr($key, 0, 2) == 'on') {  // get the events\n                                $events[$key] = $val;\n                            }\n\n                            // I put it in data too, so in case an options starts with 'on' its also passed to the node ... not too cool i know\n                            $data[$key] = $val;\n                        }\n                    }\n\n                    // Normally the text is in 'name' in the Tree class, so we check both but 'text' is used if found\n                    $data['text'] = $aNode['text'] ? $aNode['text'] : $aNode['name'];\n\n                    // Add the item to the proper node\n                    $thisNode = &$curNode[$aNode['level']]->addItem(new HTML_TreeNode($data, $events));\n                    $curNode[$aNode['level'] + 1] = &$thisNode;\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) second (array based) Tree class\n            */\n            case 'heyes_array':\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                    $parentID = 0;\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                    $parentID = $params['parentID'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->getChildren($parentID) as $nodeID) {\n                    $data = $params['structure']->getData($nodeID);\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $data)));\n\n                    // Recurse ?\n                    if ($params['structure']->hasChildren($nodeID)) {\n                        $recurseParams['type']        = 'heyes_array';\n                        $recurseParams['parentID']    = $nodeID;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['structure']   = &$params['structure'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) original OO based Tree class\n            */\n            case 'heyes':\n            default:\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->nodes->nodes as $node) {\n                    $tag = $node->getTag();\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $tag)));\n\n                    // Recurse ?\n                    if (!empty($node->nodes->nodes)) {\n                        $recurseParams['structure']   = $node;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n        }\n\n        return $treeMenu;\n    }\n\n    /**\n    * Creates a treeMenu from XML. The structure of your XML should be\n    * like so:\n    *\n    * <treemenu>\n    *     <node text=\"First node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     <node text=\"Second node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    *         <node text=\"Sub node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     </node>\n    *     <node text=\"Third node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    * </treemenu>\n    *\n    * Any of the options you can supply to the HTML_TreeNode constructor can be supplied as\n    * attributes to the <node> tag. If there are no subnodes for a particular node, you can\n    * use the XML shortcut <node ... /> instead of <node ... ></node>. The $xml argument can\n    * be either the XML as a string, or an pre-created XML_Tree object. Also, this method\n    * REQUIRES my own Tree class to work (http://phpguru.org/tree.html). If this has not\n    * been include()ed or require()ed this method will die().\n    *\n    * @param  mixed  $xml  This can be either a string containing the XML, or an XML_Tree object\n    *                      (the PEAR::XML_Tree package).\n    * @return object       The HTML_TreeMenu object\n    */\n    function createFromXML($xml)\n    {\n        if (!class_exists('Tree')) {\n            die('Could not find Tree class');\n        }\n\n        // Supplied $xml is a string\n        if (is_string($xml)) {\n            require_once('XML/Tree.php');\n            $xmlTree = new XML_Tree();\n            $xmlTree->getTreeFromString($xml);\n\n        // Supplied $xml is an XML_Tree object\n        } else {\n            $xmlTree = $xml;\n        }\n\n        // Now process the XML_Tree object, setting the XML attributes\n        // to be the tag data (with out the XML tag name or contents).\n        $treeStructure = Tree::createFromXMLTree($xmlTree, true);\n        $treeStructure->nodes->traverse(create_function('&$node', '$tagData = $node->getTag(); $node->setTag($tagData[\"attributes\"]);'));\n\n\n        return HTML_TreeMenu::createFromStructure(array('structure' => $treeStructure));\n    }\n} // HTML_TreeMenu\n\n\n/**\n* HTML_TreeNode class\n*\n* This class is supplementary to the above and provides a way to\n* add nodes to the tree. A node can have other nodes added to it.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\nclass HTML_TreeNode\n{\n    /**\n    * The text for this node.\n    * @var string\n    */\n    var $text;\n\n    /**\n    * The link for this node.\n    * @var string\n    */\n    var $link;\n\n    /**\n    * The icon for this node.\n    * @var string\n    */\n    var $icon;\n\n    /**\n    * The icon to show when expanded for this node.\n    * @var string\n    */\n    var $expandedIcon;\n\n    /**\n    * The css class for this node\n    * @var string\n    */\n    var $cssClass;\n\n    /**\n    * The link target for this node\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Whether this node is expanded or not\n    * @var bool\n    */\n    var $expanded;\n\n    /**\n    * Whether this node is dynamic or not\n    * @var bool\n    */\n    var $isDynamic;\n\n    /**\n    * Should this node be made visible?\n    * @var bool\n    */\n    var $ensureVisible;\n\n    /**\n    * The parent node. Null if top level\n    * @var object\n    */\n    var $parent;\n\n    /**\n    * Unique ID of this node\n    * @var int\n    */\n    //commented out because it was causing Documents page to not show\n   //because of this redeclaration of $parent.  I do not know what the\n  // author's intention was in using this name twice or if it was a mistake\n    //var $parent;\n\n\n    /**\n    * Javascript event handlers;\n    * @var array\n    */\n    var $events;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    * @param  array $options An array of options which you can pass to change\n    *                        the way this node looks/acts. This can consist of:\n    *                         o text          The title of the node, defaults to blank\n    *                         o link          The link for the node, defaults to blank\n    *                         o icon          The icon for the node, defaults to blank\n    *                         o expandedIcon  The icon to show when the node is expanded\n    *                         o cssClass      The CSS class for this node, defaults to blank\n    *                         o expanded      The default expanded status of this node, defaults to false\n    *                                         This doesn't affect non dynamic presentation types\n    *                         o linkTarget    Target for the links. Defaults to linkTarget of the\n    *                                         HTML_TreeMenu_Presentation.\n    *                         o isDynamic     If this node is dynamic or not. Only affects\n    *                                         certain presentation types.\n    *                         o ensureVisible If true this node will be made visible despite the expanded\n    *                                         settings, and client side persistence. Will not affect\n    *                                         some presentation styles, such as Listbox. Default is false\n    * @param  array $events An array of javascript events and the corresponding event handlers.\n    *                       Additionally to the standard javascript events you can specify handlers\n    *                       for the 'onexpand', 'oncollapse' and 'ontoggle' events which will be fired\n    *                       whenever a node is collapsed and/or expanded.\n    */\n    function __construct($options = array(), $events = array())\n    {\n        $this->text          = '';\n        $this->link          = '';\n        $this->icon          = '';\n        $this->expandedIcon  = '';\n        $this->cssClass      = '';\n        $this->expanded      = false;\n        $this->isDynamic     = true;\n        $this->ensureVisible = false;\n        $this->linkTarget    = null;\n        $this->id            = null;\n\n        $this->parent        = null;\n        $this->events        = $events;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Allows setting of various parameters after the initial\n    * constructor call. Possible options you can set are:\n    *  o text\n    *  o link\n    *  o icon\n    *  o cssClass\n    *  o expanded\n    *  o isDynamic\n    *  o ensureVisible\n    * ie The same options as in the constructor\n    *\n    * @access public\n    * @param  string $option Option to set\n    * @param  string $value  Value to set the option to\n    */\n    function setOption($option, $value)\n    {\n        $this->$option = $value;\n    }\n\n    /**\n    * Adds a new subnode to this node.\n    *\n    * @access public\n    * @param  object $node The new node\n    */\n    function &addItem(&$node)\n    {\n        $node->parent  = &$this;\n        $this->items[] = &$node;\n\n        /**\n        * If the subnode has ensureVisible set it needs\n        * to be handled, and all parents set accordingly.\n        */\n        if ($node->ensureVisible) {\n            $this->_ensureVisible();\n        }\n\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Private function to handle ensureVisible stuff\n    *\n    * @access private\n    */\n    function _ensureVisible()\n    {\n        $this->ensureVisible = true;\n        $this->expanded      = true;\n\n        if (!is_null($this->parent)) {\n            $this->parent->_ensureVisible();\n        }\n    }\n} // HTML_TreeNode\n\n\n/**\n* HTML_TreeMenu_Presentation class\n*\n* Base class for other presentation classes to\n* inherit from.\n*/\nclass HTML_TreeMenu_Presentation\n{\n    /**\n    * The TreeMenu structure\n    * @var object\n    */\n    var $menu;\n\n    /**\n    * Base constructor simply sets the menu object\n    *\n    * @param object $structure The menu structure\n    */\n    function __construct(&$structure)\n    {\n        $this->menu = &$structure;\n    }\n\n    /**\n    * Prints the HTML generated by the toHTML() method.\n    * toHTML() must therefore be defined by the derived\n    * class.\n    *\n    * @access public\n    * @param  array  Options to set. Any options taken by\n    *                the presentation class can be specified\n    *                here.\n    */\n    function printMenu($options = array())\n    {\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n\n        echo $this->toHTML();\n    }\n}\n\n\n/**\n* HTML_TreeMenu_DHTML class\n*\n* This class is a presentation class for the tree structure\n* created using the TreeMenu/TreeNode. It presents the\n* traditional tree, static for browsers that can't handle\n* the DHTML.\n*/\nclass HTML_TreeMenu_DHTML extends HTML_TreeMenu_Presentation\n{\n    /**\n    * Dynamic status of the treemenu. If true (default) this has no effect. If\n    * false it will override all dynamic status vars and set the menu to be\n    * fully expanded an non-dynamic.\n    */\n    var $isDynamic;\n\n    /**\n    * Path to the images\n    * @var string\n    */\n    var $images;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Whether to use clientside persistence or not\n    * @var bool\n    */\n    var $userPersistence;\n\n    /**\n    * The default CSS class for the nodes\n    */\n    var $defaultClass;\n\n    /**\n    * Whether to skip first level branch images\n    * @var bool\n    */\n    var $noTopLevelImages;\n\n    /**\n    * Constructor, takes the tree structure as\n    * an argument and an array of options which\n    * can consist of:\n    *  o images            -  The path to the images folder. Defaults to \"images\"\n    *  o linkTarget        -  The target for the link. Defaults to \"_self\"\n    *  o defaultClass      -  The default CSS class to apply to a node. Default is none.\n    *  o usePersistence    -  Whether to use clientside persistence. This persistence\n    *                         is achieved using cookies. Default is true.\n    *  o noTopLevelImages  -  Whether to skip displaying the first level of images if\n    *                         there is multiple top level branches.\n    *  o maxDepth          -  The maximum depth of indentation. Useful for ensuring\n    *                         deeply nested trees don't go way off to the right of your\n    *                         page etc. Defaults to no limit.\n    *\n    * And also a boolean for whether the entire tree is dynamic or not.\n    * This overrides any perNode dynamic settings.\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Array of options\n    * @param bool   $isDynamic Whether the tree is dynamic or not\n    */\n    function __construct(&$structure, $options = array(), $isDynamic = true)\n    {\n        parent::__construct($structure);\n        $this->isDynamic = $isDynamic;\n\n        // Defaults\n        $this->images           = 'public/images';\n        $this->maxDepth         = 0;        // No limit\n        $this->linkTarget       = '_self';\n        $this->defaultClass     = '';\n        $this->usePersistence   = true;\n        $this->noTopLevelImages = false;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML for the menu. This method can be\n    * used instead of printMenu() to use the menu system\n    * with a template system.\n    *\n    * @access public\n    * @return string The HTML for the menu\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $menuObj     = 'objTreeMenu_' . ++$count;\n\n        $html  = \"\\n\";\n        $html .= '<script>' . \"\\n\\t\";\n        $html .= sprintf(\n            '%s = new TreeMenu(\"%s\", \"%s\", \"%s\", \"%s\", %s, %s);',\n            $menuObj,\n            $this->images,\n            $menuObj,\n            $this->linkTarget,\n            $this->defaultClass,\n            $this->usePersistence ? 'true' : 'false',\n            $this->noTopLevelImages ? 'true' : 'false'\n        );\n\n        $html .= \"\\n\";\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $html .= $this->_nodeToHTML($this->menu->items[$i], $menuObj);\n            }\n        }\n\n        $html .= sprintf(\"\\n\\t%s.drawMenu();\", $menuObj);\n        $html .= sprintf(\"\\n\\t%s.writeOutput();\", $menuObj);\n\n        if ($this->usePersistence && $this->isDynamic) {\n            $html .= sprintf(\"\\n\\t%s.resetBranches();\", $menuObj);\n        }\n\n        $html .= \"\\n</script>\";\n\n        return $html;\n    }\n\n    /**\n    * Prints a node of the menu\n    *\n    * @access private\n    */\n    function _nodeToHTML($nodeObj, $prefix, $return = 'newNode', $currentDepth = 0, $maxDepthPrefix = null)\n    {\n        $prefix = empty($maxDepthPrefix) ? $prefix : $maxDepthPrefix;\n\n        $expanded  = $this->isDynamic ? ($nodeObj->expanded  ? 'true' : 'false') : 'true';\n        $isDynamic = $this->isDynamic ? ($nodeObj->isDynamic ? 'true' : 'false') : 'false';\n        $html = sprintf(\n            \"\\t %s = %s.addItem(new TreeNode('%s', %s, %s, %s, %s, '%s', '%s', %s));\\n\",\n            $return,\n            $prefix,\n            attr($nodeObj->text),\n            !empty($nodeObj->icon) ? \"'\" . $nodeObj->icon . \"'\" : 'null',\n            !empty($nodeObj->link) ? \"'\" . attr($nodeObj->link) . \"'\" : 'null',\n            $expanded,\n            $isDynamic,\n            $nodeObj->cssClass,\n            $nodeObj->linkTarget,\n            !empty($nodeObj->expandedIcon) ? \"'\" . $nodeObj->expandedIcon . \"'\" : 'null'\n        );\n\n        foreach ($nodeObj->events as $event => $handler) {\n            $html .= sprintf(\n                \"\\t %s.setEvent('%s', '%s');\\n\",\n                $return,\n                $event,\n                str_replace(array(\"\\r\", \"\\n\", \"'\"), array('\\r', '\\n', \"\\'\"), $handler)\n            );\n        }\n\n        if ($this->maxDepth > 0 and $currentDepth == $this->maxDepth) {\n            $maxDepthPrefix = $prefix;\n        }\n\n        /**\n        * Loop through subnodes\n        */\n        if (!empty($nodeObj->items)) {\n            for ($i = 0; $i < count($nodeObj->items); $i++) {\n                $html .= $this->_nodeToHTML($nodeObj->items[$i], $return, $return . '_' . ($i + 1), $currentDepth + 1, $maxDepthPrefix);\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_DHTML\n\n\n/**\n* HTML_TreeMenu_Listbox class\n*\n* This class presents the menu as a listbox\n*/\nclass HTML_TreeMenu_Listbox extends HTML_TreeMenu_Presentation\n{\n    /**\n    * The text that is displayed in the first option\n    * @var string\n    */\n    var $promoText;\n\n    /**\n    * The character used for indentation\n    * @var string\n    */\n    var $indentChar;\n\n    /**\n    * How many of the indent chars to use\n    * per indentation level\n    * @var integer\n    */\n    var $indentNum;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Constructor\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Options whic affect the display of the listbox.\n    *                          These can consist of:\n    *                           o promoText  The text that appears at the the top of the listbox\n    *                                        Defaults to \"Select...\"\n    *                           o indentChar The character to use for indenting the nodes\n    *                                        Defaults to \"&nbsp;\"\n    *                           o indentNum  How many of the indentChars to use per indentation level\n    *                                        Defaults to 2\n    *                           o linkTarget Target for the links. Defaults to \"_self\"\n    *                           o submitText Text for the submit button. Defaults to \"Go\"\n    */\n    function __construct($structure, $options = array())\n    {\n        parent::__construct($structure);\n\n        $this->promoText  = null;\n        $this->indentChar = '&nbsp;';\n        $this->indentNum  = 2;\n        $this->linkTarget = '_self';\n        $this->submitText = 'Go';\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML generated\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $nodeHTML = '';\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $nodeHTML .= $this->_nodeToHTML($this->menu->items[$i]);\n            }\n        }\n\n        if ($this->promoText) {\n            return sprintf('<option value=\"\">%s</option>%s', $this->promoText, $nodeHTML);\n        } else {\n            return $nodeHTML;\n        }\n    }\n\n    /**\n    * Returns HTML for a single node\n    *\n    * @access private\n    */\n    function _nodeToHTML($node, $prefix = '')\n    {\n        $html = sprintf('<option value=\"%s\">%s%s</option>', $node->id, $prefix, $node->text);\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($node->items)) {\n            for ($i = 0; $i < count($node->items); $i++) {\n                $html .= $this->_nodeToHTML($node->items[$i], $prefix . str_repeat($this->indentChar, $this->indentNum));\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_Listbox\n"], "fixing_code": ["<?php\n\n@define('__POSTCALENDAR__', 'PostCalendar');\n/**\n *  $Id$\n *\n *  PostCalendar::PostNuke Events Calendar Module\n *  Copyright (C) 2002  The PostCalendar Team\n *  http://postcalendar.tv\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  To read the license please read the docs/license.txt or visit\n *  http://www.gnu.org/copyleft/gpl.html\n *\n */\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Acl\\AclExtended;\nuse OpenEMR\\Core\\Header;\n\n//=========================================================================\n//  Load the API Functions\n//=========================================================================\npnModAPILoad(__POSTCALENDAR__, 'admin');\n\nfunction postcalendar_admin_modifyconfig($msg = '', $showMenu = true)\n{\n    $output = new pnHTML();\n\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n\n    $header = \"<html><head><title>\" . xlt(\"Calendar\") . \"</title>\";\n    $header .= Header::setupHeader('', false)  . '</head><body>';\n\n    $output->Text($header);\n\n    if (!empty($msg)) {\n        $output->Text(postcalendar_adminmenu(\"clearCache\"));\n        $output -> Text('<div class=\"alert alert-success mx-1 text-center\" role=\"alert\">');\n        $output->Text(\"<b>$msg</b>\");\n        $output -> Text('</div>');\n    } else {\n        if ($showMenu) {\n            $output->Text(postcalendar_adminmenu(\"\"));\n        }\n    }\n\n    $output->Text(\"</body></html>\");\n\n    return $output->GetOutput();\n}\n\nfunction postcalendar_admin_categoriesConfirm()\n{\n    $output = new pnHTML();\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n    $header = <<<EOF\n\t<html>\n\t<head>\nEOF;\n    $header .= Header::setupHeader('', false)  . '</head><body><div class=\"container\">';\n    $output->Text($header);\n    $output->Text(postcalendar_adminmenu(\"category\"));\n    list($id, $del, $name, $constantid, $value_cat_type, $desc, $color,\n        $event_repeat, $event_repeat_freq,\n        $event_repeat_freq_type, $event_repeat_on_num,\n        $event_repeat_on_day, $event_repeat_on_freq, $durationh, $durationm,\n        $end_date_flag, $end_date_type, $end_date_freq, $end_all_day, $active, $sequence, $aco,\n        $newname, $newconstantid, $newdesc, $newcolor, $new_event_repeat, $new_event_repeat_freq,\n        $new_event_repeat_freq_type, $new_event_repeat_on_num, $new_event_repeat_on_day,\n        $new_event_repeat_on_freq, $new_durationh, $new_durationm, $new_limitid, $new_end_date_flag,\n        $new_end_date_type, $new_end_date_freq, $new_end_all_day, $new_value_cat_type, $newactive, $newsequence, $newaco\n        ) = pnVarCleanFromInput(\n            'id',\n            'del',\n            'name',\n            'constantid',\n            'value_cat_type',\n            'desc',\n            'color',\n            'event_repeat',\n            'event_repeat_freq',\n            'event_repeat_freq_type',\n            'event_repeat_on_num',\n            'event_repeat_on_day',\n            'event_repeat_on_freq',\n            'durationh',\n            'durationm',\n            'end_date_flag',\n            'end_date_type',\n            'end_date_freq',\n            'end_all_day',\n            'active',\n            'sequence',\n            'aco',\n            'newname',\n            'newconstantid',\n            'newdesc',\n            'newcolor',\n            'newevent_repeat',\n            'newevent_repeat_freq',\n            'newevent_repeat_freq_type',\n            'newevent_repeat_on_num',\n            'newevent_repeat_on_day',\n            'newevent_repeat_on_freq',\n            'newdurationh',\n            'newdurationm',\n            'newlimitid',\n            'newend_date_flag',\n            'newend_date_type',\n            'newend_date_freq',\n            'newend_all_day',\n            'newvalue_cat_type',\n            'newactive',\n            'newsequence',\n            'newaco'\n        );\n    //data validation\n    foreach ($name as $i => $item) {\n        if (empty($item)) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Names must contain a value!\"));\n            return $output->GetOutput();\n        }\n        if (empty($constantid[$i])) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must contain a value!\"));\n            return $output->GetOutput();\n        }\n        $tmp = $constantid[$i];\n        if (strpos(trim($tmp), ' ')) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must be one word!\"));\n            return $output->GetOutput();\n        }\n        $tmp = $color[$i];\n        if (strlen($tmp) != 7 || $tmp[0] != \"#\") {\n            $e = $tmp . \" size \" . strlen($tmp) . \" at 0 \" . $tmp[0];\n            $output->Text(postcalendar_admin_categories($msg, \"You entered an invalid color(USE Pick) $e!\"));\n            return $output->GetOutput();\n        }\n    }\n    foreach ($durationh as $i => $val) {\n        if (\n            !is_numeric($durationh[$i]) || !is_numeric($durationm[$i]) ||\n            !is_numeric($event_repeat_freq[$i]) ||\n            !is_numeric($event_repeat_on_freq[$i]) || !is_numeric($end_date_freq[$i])\n        ) {\n            $output->Text(postcalendar_admin_categories(\n                $msg,\n                \" Hours, Minutes and recurrence values must be numeric!\"\n            ));\n            return $output->GetOutput();\n        }\n    }\n    if (!empty($newnam)) {\n        if (\n            !is_numeric($new_durationh) ||\n            !is_numeric($new_durationm) ||\n            !is_numeric($new_event_repeat_freq) ||\n            !is_numeric($new_event_repeat_on_freq) ||\n            !is_numeric($new_end_date_freq)\n        ) {\n            $output->Text(postcalendar_admin_categories($msg, \"Hours, Minutes and recurrence values must be numeric!\"));\n            return $output->GetOutput();\n        }\n    }\n    $new_duration = ($new_durationh * (60 * 60)) + ($new_durationm * 60);\n    $event_recurrspec = serialize(compact(\n        'event_repeat_freq',\n        'event_repeat_freq_type',\n        'event_repeat_on_num',\n        'event_repeat_on_day',\n        'event_repeat_on_freq'\n    ));\n    $new_event_recurrspec = serialize(compact(\n        'new_event_repeat_freq',\n        'new_event_repeat_freq_type',\n        'new_event_repeat_on_num',\n        'new_event_repeat_on_day',\n        'new_event_repeat_on_freq'\n    ));\n    if (is_array($del)) {\n        $dels = implode(',', $del);\n        $delText = _PC_DELETE_CATS . $dels . '.';\n    }\n    $output->FormStart(pnModURL(__POSTCALENDAR__, 'admin', 'categoriesUpdate'));\n    $output->Text(_PC_ARE_YOU_SURE);\n    $output->Linebreak(2);\n    // deletions\n    if (isset($delText)) {\n        $output->FormHidden('dels', $dels);\n        $output->Text($delText);\n        $output->Linebreak();\n    }\n    if (!empty($newname)) {\n        if (empty($newconstantid)) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must contain a value!\"));\n            return $output->GetOutput();\n        }\n        if (strpos(trim($newconstantid), ' ')) {\n            $output->Text(postcalendar_admin_categories($msg, \"Category Identifiers must be one word!\"));\n            return $output->GetOutput();\n        }\n        $output->FormHidden('newname', $newname);\n        $output->FormHidden('newconstantid', $newconstantid);\n        $output->FormHidden('newdesc', $newdesc);\n        $output->FormHidden('newvalue_cat_type', $new_value_cat_type);\n        $output->FormHidden('newcolor', $newcolor);\n        $output->FormHidden('newevent_repeat', $new_event_repeat);\n        $output->FormHidden('newevent_recurrfreq', $new_event_repeat_freq);\n        $output->FormHidden('newevent_recurrspec', $new_event_recurrspec);\n        $output->FormHidden('newduration', $new_duration);\n        $output->FormHidden('newlimitid', $new_limitid);\n        $output->FormHidden('newend_date_flag', $new_end_date_flag);\n        $output->FormHidden('newend_date_type', $new_end_date_type);\n        $output->FormHidden('newend_date_freq', $new_end_date_freq);\n        $output->FormHidden('newend_all_day', $new_end_all_day);\n        $output->FormHidden(\"newactive\", $newactive);\n        $output->FormHidden(\"newsequence\", $newsequence);\n        $output->FormHidden(\"newaco\", $newaco);\n        $output->Text(_PC_ADD_CAT . text($newname) . '.');\n        $output->Linebreak();\n    }\n    $output->Text(_PC_MODIFY_CATS);\n    $output->FormHidden('id', serialize($id));\n    $output->FormHidden('del', serialize($del));\n    $output->FormHidden('name', serialize($name));\n    $output->FormHidden('constantid', serialize($constantid));\n    $output->FormHidden('desc', serialize($desc));\n    $output->FormHidden('value_cat_type', serialize($value_cat_type));\n    $output->FormHidden('color', serialize($color));\n    $output->FormHidden('event_repeat', serialize($event_repeat));\n    $output->FormHidden('event_recurrspec', $event_recurrspec);\n    $output->FormHidden('durationh', serialize($durationh));\n    $output->FormHidden('durationm', serialize($durationm));\n    $output->FormHidden('end_date_flag', serialize($end_date_flag));\n    $output->FormHidden('end_date_type', serialize($end_date_type));\n    $output->FormHidden('end_date_freq', serialize($end_date_freq));\n    $output->FormHidden('end_all_day', serialize($end_all_day));\n    $output->FormHidden(\"active\", serialize($active));\n    $output->FormHidden(\"sequence\", serialize($sequence));\n    $output->FormHidden(\"aco\", serialize($aco));\n    $output->Linebreak();\n    $output->FormSubmit(_PC_CATS_CONFIRM);\n    $output->FormEnd();\n    return $output->GetOutput();\n}\n\nfunction postcalendar_admin_categoriesUpdate()\n{\n    $output = new pnHTML();\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n\n    list($dbconn) = pnDBGetConn();\n    $pntable = pnDBGetTables();\n\n    list($id,$del,$name,$constantid,$value_cat_type,$desc,$color,\n        $event_repeat_array,$event_recurrspec_array,$dels,$durationh,$durationm,\n        $end_date_flag,$end_date_type,$end_date_freq,$end_all_day,$active,$sequence,$aco,$newname,$newconstantid,$newdesc,$newcolor,\n        $new_event_repeat,$new_event_recurrspec,$new_event_recurrfreq,\n        $new_duration,$new_dailylimitid,$new_end_date_flag,$new_end_date_type,\n        $new_end_date_freq,$new_end_all_day,$new_value_cat_type,$newactive,$newsequence,$newaco\n        ) = pnVarCleanFromInput(\n            'id',\n            'del',\n            'name',\n            'constantid',\n            'value_cat_type',\n            'desc',\n            'color',\n            'event_repeat',\n            'event_recurrspec',\n            'dels',\n            'durationh',\n            'durationm',\n            'end_date_flag',\n            'end_date_type',\n            'end_date_freq',\n            'end_all_day',\n            'active',\n            'sequence',\n            'aco',\n            'newname',\n            'newconstantid',\n            'newdesc',\n            'newcolor',\n            'newevent_repeat',\n            'newevent_recurrspec',\n            'newevent_recurrfreq',\n            'newduration',\n            'newlimitid',\n            'newend_date_flag',\n            'newend_date_type',\n            'newend_date_freq',\n            'newend_all_day',\n            'newvalue_cat_type',\n            'newactive',\n            'newsequence',\n            'newaco'\n        );\n\n    $id = unserialize($id, ['allowed_classes' => false]);\n    $del = unserialize($del, ['allowed_classes' => false]);\n    $name = unserialize($name, ['allowed_classes' => false]);\n    $constantid = unserialize($constantid, ['allowed_classes' => false]);\n    $value_cat_type = unserialize($value_cat_type, ['allowed_classes' => false]);\n    $desc = unserialize($desc, ['allowed_classes' => false]);\n    $color = unserialize($color, ['allowed_classes' => false]);\n    $event_repeat_array = unserialize($event_repeat_array, ['allowed_classes' => false]);\n    $event_recurrspec_array = unserialize($event_recurrspec_array, ['allowed_classes' => false]);\n    $durationh = unserialize($durationh, ['allowed_classes' => false]);\n    $durationm = unserialize($durationm, ['allowed_classes' => false]);\n    $end_date_flag = unserialize($end_date_flag, ['allowed_classes' => false]);\n    $end_date_type = unserialize($end_date_type, ['allowed_classes' => false]);\n    $end_date_freq = unserialize($end_date_freq, ['allowed_classes' => false]);\n    $end_all_day = unserialize($end_all_day, ['allowed_classes' => false]);\n    $active = unserialize($active, ['allowed_classes' => false]);\n    $sequence = unserialize($sequence, ['allowed_classes' => false]);\n    $aco = unserialize($aco, ['allowed_classes' => false]);\n    $updates = array();\n\n    if (isset($id)) {\n        foreach ($id as $k => $i) {\n            $found = false;\n            if (!empty($del)) {\n                if (count($del)) {\n                    foreach ($del as $d) {\n                        if ($i == $d) {\n                            $found = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (!$found) {\n                $event_repeat_freq = $event_recurrspec_array['event_repeat_freq'][$i];\n                $event_repeat_freq_type = $event_recurrspec_array['event_repeat_freq_type'][$i];\n                $event_repeat_on_num = $event_recurrspec_array['event_repeat_on_num'][$i];\n                $event_repeat_on_day = $event_recurrspec_array['event_repeat_on_day'][$i];\n                $event_repeat_on_freq = $event_recurrspec_array['event_repeat_on_freq'][$i];\n\n                $recurrspec = serialize(compact(\n                    'event_repeat_freq',\n                    'event_repeat_freq_type',\n                    'event_repeat_on_num',\n                    'event_repeat_on_day',\n                    'event_repeat_on_freq'\n                ));\n\n                $dur = ( ($durationh[$i] * (60 * 60)) + ($durationm[$i] * 60));\n\n                $update_sql = \"UPDATE $pntable[postcalendar_categories]\n\t\t                             SET pc_catname='\" . pnVarPrepForStore($name[$k]) . \"',\n\t\t                                 pc_constant_id='\" . trim(pnVarPrepForStore($constantid[$k])) . \"',\n\t\t                                 pc_catdesc='\" . trim(pnVarPrepForStore($desc[$k])) . \"',\n\t\t                                 pc_cattype='\" . trim(pnVarPrepForStore($value_cat_type[$k])) . \"',\n\t\t                                 pc_catcolor='\" . pnVarPrepForStore($color[$k]) . \"',\n\t\t                                 pc_recurrtype='\" . pnVarPrepForStore($event_repeat_array[$i]) . \"',\n\t\t                                 pc_recurrspec='\" . pnVarPrepForStore($recurrspec) . \"',\n\t\t                                 pc_duration='\" . pnVarPrepForStore($dur) . \"',\n\t\t                                 pc_end_date_flag='\" . pnVarPrepForStore($end_date_flag[$i]) . \"',\n\t\t                             \t pc_end_date_type='\" . pnVarPrepForStore($end_date_type[$i]) . \"',\n\t\t                             \t pc_end_date_freq='\" . pnVarPrepForStore($end_date_freq[$i]) . \"',\n\t\t                             \t pc_end_all_day='\" . pnVarPrepForStore($end_all_day[$i]) . \"',\n\t\t                             \t pc_active ='\" . pnVarPrepForStore($active[$i]) . \"',\n\t\t                             \t pc_seq = '\" . pnVarPrepForStore($sequence[$k]) . \"',\n\t\t                             \t aco_spec = '\" . pnVarPrepForStore($aco[$k]) . \"'\n\t\t                             WHERE pc_catid = '\" . pnVarPrepForStore($i) . \"'\";\n\n                array_push($updates, $update_sql);\n                unset($recurrspec);\n                unset($dur);\n            }\n        }\n    }\n\n\n    $delete = \"DELETE FROM $pntable[postcalendar_categories] WHERE pc_catid IN ($dels)\";\n    $e =  $msg = '';\n    if (!pnModAPIFunc(__POSTCALENDAR__, 'admin', 'updateCategories', array('updates' => $updates))) {\n        $e .= 'UPDATE FAILED';\n    }\n    if (isset($dels)) {\n        if (!pnModAPIFunc(__POSTCALENDAR__, 'admin', 'deleteCategories', array('delete' => $delete))) {\n            $e .= 'DELETE FAILED';\n        }\n    }\n    if (isset($newname)) {\n        $unpacked = unserialize($new_event_recurrspec, ['allowed_classes' => false]);\n        unset($new_event_recurrspec);\n        $new_event_recurrspec['event_repeat_freq'] = $unpacked['new_event_repeat_freq'];\n        $new_event_recurrspec['event_repeat_freq_type'] = $unpacked['new_event_repeat_freq_type'];\n        $new_event_recurrspec['event_repeat_on_num'] = $unpacked['new_event_repeat_on_num'];\n        $new_event_recurrspec['event_repeat_on_day'] = $unpacked['new_event_repeat_on_day'];\n        $new_event_recurrspec['event_repeat_on_freq'] = $unpacked['new_event_repeat_on_freq'];\n        $new_event_recurrspec = serialize($new_event_recurrspec);\n\n        if (\n            !pnModAPIFunc(\n                __POSTCALENDAR__,\n                'admin',\n                'addCategories',\n                array('name' => $newname,'constantid' => $newconstantid,'desc' => $newdesc,'value_cat_type' => $new_value_cat_type,'color' => $newcolor,'active' => $newactive,'sequence' => $newsequence, 'aco' => $newaco,\n                'repeat' => $new_event_repeat,'spec' => $new_event_recurrspec,\n                'recurrfreq' => $new_recurrfreq,'duration' => $new_duration,'limitid' => $new_dailylimitid,\n                'end_date_flag' => $new_end_date_flag,'end_date_type' => $new_end_date_flag,\n                'end_date_freq' => $new_end_date_freq,\n                'end_all_day' => $new_end_all_day)\n            )\n        ) {\n            $e .= 'INSERT FAILED';\n        }\n    }\n\n    if (empty($e)) {\n        $msg = 'DONE';\n    }\n    $output->Text(postcalendar_admin_categories($msg, $e));\n    return $output->GetOutput();\n}\n\n/**\n* Creates a new category\n*/\nfunction postcalendar_admin_categories($msg = '', $e = '', $args = array())\n{\n    extract($args);\n    unset($args);\n\n    $output = new pnHTML();\n    $output->SetInputMode(_PNH_VERBATIMINPUT);\n    // set up Smarty\n    $tpl = new pcSmarty();\n    $tpl->caching = false;\n\n    $template_name = pnModGetVar(__POSTCALENDAR__, 'pcTemplate');\n\n    if (!isset($template_name)) {\n        $template_name = 'default';\n    }\n\n    $output->Text(postcalendar_adminmenu(\"category\"));\n\n    if (!empty($e)) {\n        $output -> Text('<div class=\"alert alert-danger mx-1\" role=\"alert\">');\n        $output->Text('<span class=\"text-center font-weight-bold\">' . text($e) . '</span>');\n        $output -> Text('</div><br />');\n    }\n\n    if (!empty($msg)) {\n        $output -> Text('<div class=\"alert alert-success mx-1\" role=\"alert\">');\n        $output->Text('<span class=\"text-center font-weight-bold\">' . text($msg) . '</span>');\n        $output -> Text('</div><br />');\n    }\n\n    //=================================================================\n    //  Setup the correct config file path for the templates\n    //=================================================================\n    $modinfo = pnModGetInfo(pnModGetIDFromName(__POSTCALENDAR__));\n    $modir = pnVarPrepForOS($modinfo['directory']);\n    $modname = $modinfo['displayname'];\n    $all_categories = pnModAPIFunc(__POSTCALENDAR__, 'user', 'getCategories');\n    //print_r($all_categories);\n    unset($modinfo);\n    $tpl->config_dir = \"modules/$modir/pntemplates/$template_name/config/\";\n\n    //=================================================================\n    //  PARSE MAIN\n    //=================================================================\n\n    // create translations if applicable\n    if (($GLOBALS['translate_appt_categories']) && ($_SESSION['language_choice'] > 1)) {\n        $sizeAllCat = count($all_categories);\n        for ($m = 0; $m < $sizeAllCat; $m++) {\n            $tempCategory = $all_categories[$m][\"name\"];\n            $tempDescription = $all_categories[$m][\"desc\"];\n            $all_categories[$m][\"nameTranslate\"] = xl($tempCategory);\n            $all_categories[$m][\"descTranslate\"] = xl($tempDescription);\n        }\n    }\n    $tpl->assign('globals', $GLOBALS);\n\n    $tpl->assign_by_ref('TPL_NAME', $template_name);\n    $tpl->assign('FUNCTION', pnVarCleanFromInput('func'));\n    $tpl->assign_by_ref('ModuleName', $modname);\n    $tpl->assign_by_ref('ModuleDirectory', $modir);\n    $tpl->assign_by_ref('all_categories', $all_categories);\n\n    $tpl->assign('pcDir', $modir);\n    $tpl->assign('action', pnModURL(__POSTCALENDAR__, 'admin', 'categoriesConfirm'));\n    $tpl->assign('adminmenu', postcalendar_adminmenu(\"category\"));\n    $tpl->assign('BGCOLOR2', $GLOBALS['style']['BGCOLOR2']);\n    $tpl->assign('css_header', $GLOBALS['css_header']);\n    $tpl->assign('_PC_REP_CAT_TITLE_S', _PC_REP_CAT_TITLE_S);\n    $tpl->assign('_PC_NEW_CAT_TITLE_S', _PC_NEW_CAT_TITLE_S);\n    $tpl->assign('_PC_CAT_NAME', _PC_CAT_NAME);\n    $tpl->assign('_PC_CAT_CONSTANT_ID', _PC_CAT_CONSTANT_ID);\n    $tpl->assign('_PC_CAT_TYPE', _PC_CAT_TYPE);\n    $tpl->assign('_PC_CAT_NAME_XL', _PC_CAT_NAME_XL);\n    $tpl->assign('_PC_CAT_DESC', _PC_CAT_DESC);\n    $tpl->assign('_PC_CAT_DESC_XL', _PC_CAT_DESC_XL);\n    $tpl->assign('_PC_CAT_COLOR', _PC_CAT_COLOR);\n    $tpl->assign('_PC_CAT_DELETE', _PC_CAT_DELETE);\n    $tpl->assign('_PC_CAT_DUR', _PC_CAT_DUR);\n    $tpl->assign('_PC_COLOR_PICK_TITLE', _PC_COLOR_PICK_TITLE);\n    $tpl->assign('_EDIT_PC_CONFIG_CATDETAILS', _EDIT_PC_CONFIG_CATDETAILS);\n    $tpl->assign(\"_PC_ACTIVE\", _PC_ACTIVE);\n    $tpl->assign(\"_PC_SEQ\", _PC_SEQ);\n    $tpl->assign(\"_ACO\", _ACO);\n    //=================================================================\n    //  Repeating Information\n    //=================================================================\n    $tpl->assign('RepeatingHeader', _PC_REPEATING_HEADER);\n    $tpl->assign('NoRepeatTitle', _PC_NO_REPEAT);\n    $tpl->assign('RepeatTitle', _PC_REPEAT);\n    $tpl->assign('RepeatOnTitle', _PC_REPEAT_ON);\n    $tpl->assign('OfTheMonthTitle', _PC_OF_THE_MONTH);\n    $tpl->assign('EndDateTitle', _PC_END_DATE);\n    $tpl->assign('NoEndDateTitle', _PC_NO_END);\n    $tpl->assign('REP_CAT_TITLE', _PC_REP_CAT_TITLE);\n    $tpl->assign('NEW_CAT_TITLE', _PC_NEW_CAT_TITLE);\n    $tpl->assign('InputNoRepeat', 'event_repeat');\n    $tpl->assign('ValueNoRepeat', '0');\n    $tpl->assign('SelectedNoRepeat', (int) $event_repeat == 0 ? 'checked' : '');\n    $tpl->assign('InputRepeat', 'event_repeat');\n    $tpl->assign('ValueRepeat', '1');\n    $tpl->assign('SelectedRepeat', (int) $event_repeat == 1 ? 'checked' : '');\n\n\n    unset($in);\n    $in = array(_PC_EVERY,_PC_EVERY_OTHER,_PC_EVERY_THIRD,_PC_EVERY_FOURTH);\n    $keys = array(REPEAT_EVERY,REPEAT_EVERY_OTHER,REPEAT_EVERY_THIRD,REPEAT_EVERY_FOURTH);\n    $repeat_freq = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_freq, array('value' => $keys[$k],\n                                      'selected' => ($keys[$k] == $event_repeat_freq ? 'selected' : ''),\n                                      'name' => $v));\n    }\n    $tpl->assign('InputRepeatFreq', 'event_repeat_freq');\n    if (empty($event_repeat_freq) || $event_repeat_freq < 1) {\n        $event_repeat_freq = 1;\n    }\n    $tpl->assign('InputRepeatFreqVal', $event_repeat_freq);\n    $tpl->assign('repeat_freq', $event_repeat_freq);\n    unset($in);\n\n    $in = array(_PC_EVERY_DAY,_PC_EVERY_WORKDAY,_PC_EVERY_WEEK,_PC_EVERY_MONTH,_PC_EVERY_YEAR);\n    $keys = array(REPEAT_EVERY_DAY,REPEAT_EVERY_WORK_DAY,REPEAT_EVERY_WEEK,REPEAT_EVERY_MONTH,REPEAT_EVERY_YEAR);\n    $repeat_freq_type = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_freq_type, array('value' => $keys[$k],\n                                           'selected' => ($keys[$k] == $event_repeat_freq_type ? 'selected' : ''),\n                                           'name' => $v));\n    }\n    $tpl->assign('InputRepeatFreqType', 'event_repeat_freq_type');\n    $tpl->assign('InuptRepeatFreq', '' . 'event_repeat_freq');\n    $tpl->assign('repeat_freq_type', $repeat_freq_type);\n\n    $tpl->assign('InputRepeatOn', 'event_repeat');\n    $tpl->assign('ValueRepeatOn', '2');\n    $tpl->assign('SelectedRepeatOn', (int) $event_repeat == 2 ? 'checked' : '');\n\n    // All Day START\n    $tpl->assign('InputAllDay', 'end_all_day');\n    $tpl->assign('ValueAllDay', '1');\n    $tpl->assign('ValueAllDayNo', '0');\n    $tpl->assign('ALL_DAY_CAT_TITLE', _PC_ALL_DAY_CAT_TITLE);\n    $tpl->assign('ALL_DAY_CAT_YES', _PC_ALL_DAY_CAT_YES);\n    $tpl->assign('ALL_DAY_CAT_NO', _PC_ALL_DAY_CAT_NO);\n\n    //ALL Day End\n    // End date gather date start\n\n    $tpl->assign('InputEndDateFreq', 'end_date_freq');\n    $tpl->assign('InputEndOn', 'end_date_flag');\n    $tpl->assign('InputEndDateFreqType', 'end_date_type');\n    $tpl->assign('ValueNoEnd', '0');\n    $tpl->assign('ValueEnd', '1');\n\n    if (empty($end_date_type)) {\n        $end_date_type = array();\n    }\n    foreach ($in as $k => $v) {\n        array_push($end_date_type, array('value' => $keys[$k],\n                                           'selected' => ($keys[$k] == $end_date_type ? 'selected' : ''),\n                                           'name' => $v));\n    }\n    unset($in);\n\n\n    // End date gather date end\n\n\n    unset($in);\n    $in = array(_PC_EVERY_1ST,_PC_EVERY_2ND,_PC_EVERY_3RD,_PC_EVERY_4TH,_PC_EVERY_LAST);\n    $keys = array(REPEAT_ON_1ST,REPEAT_ON_2ND,REPEAT_ON_3RD,REPEAT_ON_4TH,REPEAT_ON_LAST);\n    $repeat_on_num = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_on_num, array('value' => $keys[$k],\n                                        'selected' => ($keys[$k] == $event_repeat_on_num ? 'selected' : ''),\n                                        'name' => $v));\n    }\n    $tpl->assign('InputRepeatOnNum', 'event_repeat_on_num');\n    $tpl->assign('repeat_on_num', $repeat_on_num);\n\n    unset($in);\n    $in = array(_PC_EVERY_SUN,_PC_EVERY_MON,_PC_EVERY_TUE,_PC_EVERY_WED,_PC_EVERY_THU,_PC_EVERY_FRI,_PC_EVERY_SAT);\n    $keys = array(REPEAT_ON_SUN,REPEAT_ON_MON,REPEAT_ON_TUE,REPEAT_ON_WED,REPEAT_ON_THU,REPEAT_ON_FRI,REPEAT_ON_SAT);\n    $repeat_on_day = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_on_day, array('value' => $keys[$k],\n                                        'selected' => ($keys[$k] == $event_repeat_on_day ? 'selected' : ''),\n                                        'name' => $v));\n    }\n    $tpl->assign('InputRepeatOnDay', 'event_repeat_on_day');\n    $tpl->assign('repeat_on_day', $repeat_on_day);\n\n    unset($in);\n    $in = array(_PC_CAT_PATIENT,_PC_CAT_PROVIDER,_PC_CAT_CLINIC,_PC_CAT_THERAPY_GROUP);\n    $keys = array(TYPE_ON_PATIENT,TYPE_ON_PROVIDER,TYPE_ON_CLINIC,TYPE_ON_THERAPY_GROUP);\n    $cat_type = array();\n    foreach ($in as $k => $v) {\n        array_push($cat_type, array('value' => $keys[$k],\n                                        'selected' => ($keys[$k] == $value_cat_type ? 'selected' : ''),\n                                        'name' => $v));\n    }\n    $tpl->assign('InputCatType', 'value_cat_type');\n    $tpl->assign('cat_type', $cat_type);\n\n    unset($in);\n    $in = array(_PC_OF_EVERY_MONTH,_PC_OF_EVERY_2MONTH,_PC_OF_EVERY_3MONTH,_PC_OF_EVERY_4MONTH,_PC_OF_EVERY_6MONTH,_PC_OF_EVERY_YEAR);\n    $keys = array(REPEAT_ON_MONTH,REPEAT_ON_2MONTH,REPEAT_ON_3MONTH,REPEAT_ON_4MONTH,REPEAT_ON_6MONTH,REPEAT_ON_YEAR);\n    $repeat_on_freq = array();\n    foreach ($in as $k => $v) {\n        array_push($repeat_on_freq, array('value' => $keys[$k],\n                                         'selected' => ($keys[$k] == $event_repeat_on_freq ? 'selected' : ''),\n                                         'name' => $v));\n    }\n    $tpl->assign('InputRepeatOnFreq', 'event_repeat_on_freq');\n    if (empty($event_repeat_on_freq) || $event_repeat_on_freq < 1) {\n        $event_repeat_on_freq = 1;\n    }\n    $tpl->assign('InputRepeatOnFreqVal', $event_repeat_on_freq);\n    $tpl->assign('repeat_on_freq', $repeat_on_freq);\n    $tpl->assign('MonthsTitle', _PC_MONTHS);\n    $tpl->assign('DurationHourTitle', _PC_DURATION_HOUR);\n    $tpl->assign('DurationMinTitle', _PC_DURATION_MIN);\n    $tpl->assign('InputDurationHour', \"durationh\");\n    $tpl->assign('InputDurationMin', \"durationm\");\n    $tpl->assign('ActiveTitleYes', xl('Yes'));\n    $tpl->assign('ActiveTitleNo', xl('No'));\n\n    // Added ACO for each category\n    $tpl->assign('InputACO', 'aco');\n    $acoList = AclExtended::genAcoArray();\n    $tpl->assign('ACO_List', $acoList);\n\n    $output->SetOutputMode(_PNH_RETURNOUTPUT);\n    $output->SetOutputMode(_PNH_KEEPOUTPUT);\n\n    $form_hidden = \"<input type=\\\"hidden\\\" name=\\\"is_update\\\" value=\\\"\" . attr($is_update) . \"\\\" />\";\n    $form_hidden .= \"<input type=\\\"hidden\\\" name=\\\"pc_event_id\\\" value=\\\"\" . attr($pc_event_id) . \"\\\" />\";\n    if (isset($data_loaded)) {\n        $form_hidden .= \"<input type=\\\"hidden\\\" name=\\\"data_loaded\\\" value=\\\"\" . attr($data_loaded) . \"\\\" />\";\n        $tpl->assign('FormHidden', $form_hidden);\n    }\n    $form_submit = '<input type=hidden name=\"form_action\" value=\"commit\"/>\n\t\t\t\t   ' . text($authkey) . '<input class=\"btn btn-primary\" type=\"submit\" name=\"submit\" value=\"' . xla('Save') . '\">';\n    $tpl->assign('FormSubmit', $form_submit);\n\n    $output->Text($tpl->fetch($template_name . '/admin/submit_category.html'));\n    $output->Text(postcalendar_footer());\n    return $output->GetOutput();\n}\n\n/**\n * Main administration menu\n */\nfunction postcalendar_adminmenu($menuItem)\n{\n    global $bgcolor1, $bgcolor2;\n\n    @define('_AM_VAL', 1);\n    @define('_PM_VAL', 2);\n\n    @define('_EVENT_APPROVED', 1);\n    @define('_EVENT_QUEUED', 0);\n    @define('_EVENT_HIDDEN', -1);\n\n    $categoryURL  = pnModURL(__POSTCALENDAR__, 'admin', 'categories');\n    $cacheURL     = pnModURL(__POSTCALENDAR__, 'admin', 'clearCache');\n    $systemURL    = pnModURL(__POSTCALENDAR__, 'admin', 'testSystem');\n\n    $categoryText = text(_EDIT_PC_CONFIG_CATEGORIES);\n    $cacheText    = text(_PC_CLEAR_CACHE);\n    $systemText   = text(_PC_TEST_SYSTEM);\n\n    $output = \" <div class='container mt-3 mb-3'><ul class='nav nav-pills'>\";\n\n    if ($menuItem === \"clearCache\") {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link active\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    } elseif ($menuItem === \"testSystem\") {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    } elseif ($menuItem === \"category\") {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link active\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    } else {\n        $output .= <<<EOF\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$cacheURL\">$cacheText</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"$categoryURL\">$categoryText</a>\n</li>\nEOF;\n    }\n    $output .= \"</ul></div>\";\n    // Return the output that has been generated by this function\n    return $output;\n}\n\nfunction postcalendar_admin_clearCache()\n{\n    $tpl = new pcSmarty();\n    //fmg: check that both subdirs to be cleared first exist and are writeable\n    $spec_err = '';\n\n    if (!file_exists($tpl->compile_dir)) {\n        $spec_err .= \"Error: folder '\" . text($tpl->compile_dir) . \"' doesn't exist!<br />\";\n    } elseif (!is_writeable($tpl->compile_dir)) {\n        $spec_err .= \"Error: folder '\" . text($tpl->compile_dir) . \"' not writeable!<br />\";\n    }\n\n    //note: we don't abort on error... like before.\n    $tpl->clear_all_cache();\n    $tpl->clear_compiled_tpl();\n\n    return postcalendar_admin_modifyconfig('<div class=\"text-center\">' . $spec_err . text(_PC_CACHE_CLEARED) . '</div>');\n}\n\nfunction postcalendar_admin_testSystem()\n{\n    $modinfo = pnModGetInfo(pnModGetIDFromName(__POSTCALENDAR__));\n    $pcDir = pnVarPrepForOS($modinfo['directory']);\n    $version = $modinfo['version'];\n    unset($modinfo);\n\n    $tpl = new pcSmarty();\n    $infos = array();\n\n    $__SERVER =& $_SERVER;\n    $__ENV    =& $_ENV;\n\n    if (defined('_PN_VERSION_NUM')) {\n        $pnVersion = _PN_VERSION_NUM;\n    } else {\n        $pnVersion = pnConfigGetVar('Version_Num');\n    }\n\n    array_push($infos, array('CMS Version', $pnVersion));\n    array_push($infos, array('Sitename', pnConfigGetVar('sitename')));\n    array_push($infos, array('url', pnGetBaseURL()));\n    array_push($infos, array('PHP Version', phpversion()));\n    if ((bool) ini_get('safe_mode')) {\n        $safe_mode = \"On\";\n    } else {\n        $safe_mode = \"Off\";\n    }\n    array_push($infos, array('PHP safe_mode', $safe_mode));\n    if ((bool) ini_get('safe_mode_gid')) {\n        $safe_mode_gid = \"On\";\n    } else {\n        $safe_mode_gid = \"Off\";\n    }\n    array_push($infos, array('PHP safe_mode_gid', $safe_mode_gid));\n    $base_dir = ini_get('open_basedir');\n    if (!empty($base_dir)) {\n        $open_basedir = \"$base_dir\";\n    } else {\n        $open_basedir = \"NULL\";\n    }\n    array_push($infos, array('PHP open_basedir', $open_basedir));\n    array_push($infos, array('SAPI', php_sapi_name()));\n    array_push($infos, array('OS', php_uname()));\n    array_push($infos, array('WebServer', $__SERVER['SERVER_SOFTWARE']));\n    array_push($infos, array('Module dir', \"modules/$pcDir\"));\n\n    $modversion = array();\n    include  \"modules/$pcDir/pnversion.php\";\n\n    $error = '';\n    if ($modversion['version'] != $version) {\n        $error  = '<br /><div class=\"text-danger\">';\n        $error .= \"new version $modversion[version] installed but not updated!\";\n        $error .= '</div>';\n    }\n    array_push($infos, array('Module version', $version . \" $error\"));\n    array_push($infos, array('smarty version', $tpl->_version));\n    array_push($infos, array('smarty location',  SMARTY_DIR));\n    array_push($infos, array('smarty template dir', $tpl->template_dir));\n\n    $info = $tpl->compile_dir;\n    $error = '';\n    if (!file_exists($tpl->compile_dir)) {\n        $error .= \" compile dir doesn't exist! [\" . text($tpl->compile_dir) . \"]<br />\";\n    } else {\n        // dir exists -> check if it's writeable\n        if (!is_writeable($tpl->compile_dir)) {\n            $error .= \" compile dir not writeable! [\" . text($tpl->compile_dir) . \"]<br />\";\n        }\n    }\n    if (strlen($error) > 0) {\n        $info .= \"<br /><div class='text-danger'>$error</div>\";\n    }\n    array_push($infos, array('smarty compile dir',  $info));\n\n    if (AclMain::aclCheckCore('admin', 'super')) {\n        $header = \"<head><title>\" . xlt(\"Diagnostics\") . \"</title></head><body>\";\n        $output = $header;\n        $output .= '<div class=\"container mt-3\"><div class=\"row\"><div class=\"col-sm-12\"><div class=\"clearfix\">';\n        $output .= '<h2>' . xlt('Diagnostics') . '</h2>';\n        $output .= '</div></div></div>';\n        $output .= '<div class=\"table-responsive\"><table class=\"table table-bordered table-striped\"><thead>';\n        $output .= '<tr><th>' . xlt('Name') . '</th><th>' . xlt('Value') . '</th></tr></thead>';\n        foreach ($infos as $info) {\n            $output .= '<tr><td><b>' . pnVarPrepHTMLDisplay($info[0]) . '</b></td>';\n            $output .= '<td>' . pnVarPrepHTMLDisplay($info[1]) . '</td></tr>';\n        }\n        $output .= '</table></div></div>';\n        $output .= '<br /><br />';\n        $output .= postcalendar_admin_modifyconfig('', false);\n        $output .= \"</body></html>\";\n        return $output;\n    } else {\n        die(xlt(\"Not Authorized\"));\n    }\n}\n", "<?php\n\n/**\n * view/plans_config.php  UI for CDR admin rules plan\n *\n * UI to select or add new plans in plans configuration\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jan Jajalla <Jajalla23@gmail.com>\n * @author    Roberto Vasquez <robertogagliotta@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2014 Jan Jajalla <Jajalla23@gmail.com>\n * @copyright Copyright (c) 2014 Roberto Vasquez <robertogagliotta@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n?>\n\n<link rel=\"stylesheet\" href=\"<?php echo $GLOBALS['assets_static_relative'] . '/jquery-ui-themes/themes/ui-lightness/jquery-ui.min.css'; ?>\" />\n<link rel=\"stylesheet\" href=\"<?php css_src('cdr-multiselect/common.css') ?>\" />\n<link rel=\"stylesheet\" href=\"<?php css_src('cdr-multiselect/ui.multiselect.css') ?>\" />\n<link rel=\"stylesheet\" href=\"<?php css_src('cdr-multiselect/plans_config.css') ?>\" />\n\n<script src=\"<?php js_src('cdr-multiselect/jquery.min.js') ?>\"></script>\n<script src=\"<?php js_src('cdr-multiselect/jquery-ui.min.js') ?>\"></script>\n<script src=\"<?php js_src('cdr-multiselect/plugins/localisation/jquery.localisation-min.js') ?>\"></script>\n<script src=\"<?php js_src('cdr-multiselect/plugins/scrollTo/jquery.scrollTo-min.js') ?>\"></script>\n<script src=\"<?php js_src('cdr-multiselect/ui.multiselect.js?v=' . $GLOBALS['v_js_includes']) ?>\"></script>\n<script>\n// Below variables are to be used in the javascript for the cdr-multiselect(from cdr-multiselect/locale/ui-multiselect-cdr.js)\n$.extend($.ui.multiselect.locale, {\n    addAll:<?php echo xlj('Add all rules to plan'); ?>,\n    removeAll:<?php echo xlj('Remove all rules from plan'); ?>,\n    itemsCount:<?php echo xlj('rules already in plan'); ?>\n});\n</script>\n\n<script src=\"<?php js_src('list.js') ?>\"></script>\n<script src=\"<?php js_src('jQuery.fn.sortElements.js') ?>\"></script>\n\n<script>\n    $(function () {\n        //load plans\n        $(\"#cdr-plans\").load('<?php library_src('RulesPlanMappingEventHandlers_ajax.php') ?>');\n\n        $.post(\n            '<?php echo  _base_url() . '/library/RulesPlanMappingEventHandlers_ajax.php?action=getNonCQMPlans'; ?>'\n        )\n        .done(function(resp) {\n            var data = $.parseJSON(resp);\n\n            $.each(data, function(idx, obj) {\n                $('<option id=\"' + jsAttr(obj.plan_id) + '\" p_id=\"' + jsAttr(obj.plan_pid) + '\" value=\"' + jsAttr(obj.plan_id) + '\">' + jsText(obj.plan_title) + '</option>')\n                    .insertAfter('#select_plan')\n                    .insertBefore('#divider');\n            });\n        });\n\n        //Change selected plan\n        $(\"#cdr-plans-select\").change(function() {\n            $loadRules(\n                    $('#cdr-plans-select').find('option:selected').attr('id'),\n                    $('#cdr-plans-select').find('option:selected').attr('p_id')\n            );\n        });\n\n        //Update Plan status\n        $(\"#cdr-status\").click(function() {\n                        if (window.buttonStatus == \"active\")\n                            {\n                               $deactivatePlan();\n                               $togglePlanStatus(false);\n                             } else {\n\n                    $activatePlan();\n                    $togglePlanStatus(true);\n                             }\n        });\n\n        //Cancel\n        $(\"#cdr-button-cancel\").click(function() {\n            if (confirm(<?php echo xlj('Are you sure you want to cancel your changes?'); ?>)) {\n                $loadRules(\n                    $('#cdr-plans-select').find('option:selected').attr('id'),\n                    $('#cdr-plans-select').find('option:selected').attr('p_id')\n                );\n            }\n        });\n\n        //Delete Plan\n        $(\"#delete_plan\").click(function() {\n            if (confirm(<?php echo xlj('Are you sure you want to delete this plan?'); ?>)) {\n                var selected_plan = $('#cdr-plans-select').find('option:selected').attr('id');\n                var selected_plan_pid = $('#cdr-plans-select').find('option:selected').attr('p_id');\n\n                $(\"body\").addClass(\"loading\");\n\n                $.post\n                (\n                    '<?php echo  _base_url() .\n                            \"/library/RulesPlanMappingEventHandlers_ajax.php?action=deletePlan&plan_id=\"; ?>' + encodeURIComponent(selected_plan)\n                            + '&plan_pid=' + encodeURIComponent(selected_plan_pid)\n                )\n                .done(function(resp) {\n                    $(\"body\").removeClass(\"loading\");\n                    location.reload();\n                })\n                .fail(function (jqXHR, textStatus) {\n                    console.log(textStatus);\n                                        alert(<?php echo xlj('Error while deleting the plan'); ?>);\n                    $(\"body\").removeClass(\"loading\");\n                });\n            }\n        });\n\n        //Submit Changes\n        $(\"#cdr-button-submit\").click(function() {\n            var plan_id = $('#cdr-plans-select').find('option:selected').attr('id');\n            var plan_name = $('#cdr-plans-select').find('option:selected').text();\n            var is_new_plan = false;\n\n            if (plan_id == 'add_new_plan') {\n                //reset\n                $('#new_plan_name')\n                    .css({'border-color':'',\n                            'border-width':''\n                    });\n\n                plan_name = $(\"#new_plan_name\").val();\n                is_new_plan = true;\n            }\n\n            var new_selected = new Array;\n            var new_unselected = new Array;\n\n            $('#cdr_rules_select option').each(function() {\n                if ($(this).attr('selected') && ($(this).attr('init_value') == 'not-selected')) {\n                    new_selected.push($(this).val());\n\n                } else if (!$(this).attr('selected') && ($(this).attr('init_value') == 'selected')) {\n                    new_unselected.push($(this).val());\n                }\n\n            });\n\n            //Validate\n            if (new_selected.length == 0 && new_unselected.length == 0) {\n                alert(<?php echo xlj('No Changes Detected'); ?>);\n                return;\n            } else if (is_new_plan && plan_name.length == 0) {\n                alert(<?php echo xlj('Plan Name Missing'); ?>);\n                $('#new_plan_name')\n                    .css({'border-color':'red',\n                            'border-width':'3px'\n                                });\n                $('#new_plan_name').focus();\n                return;\n            }\n\n            $(\"body\").addClass(\"loading\");\n\n            var postData =\n                {\n                    \"plan_id\": plan_id,\n                    \"added_rules\": new_selected,\n                    \"removed_rules\": new_unselected,\n                    \"plan_name\" : plan_name\n                }\n            var dataString = JSON.stringify(postData);\n\n            $.post(\n                '<?php echo  _base_url() . '/library/RulesPlanMappingEventHandlers_ajax.php?action=commitChanges'; ?>',\n                dataString)\n            .done(function(resp) {\n                var obj = $.parseJSON(resp);\n                if (obj.status_code == '000') {\n                    //Success\n                    if (is_new_plan) {\n                        $('<option id=\"' + jsAttr(obj.plan_id) + '\" value=\"' + jsAttr(obj.plan_id) + '\">' + jsText(obj.plan_title) + '</option>')\n                            .insertAfter('#select_plan')\n                            .insertBefore('#divider')\n                            .attr(\"selected\",\"selected\");\n                        plan_id = obj.plan_id;\n\n                        alert(<?php echo xlj('Plan Added Successfully'); ?>);\n\n                    } else {\n                        alert(<?php echo xlj('Plan Updated Successfully'); ?>);\n                    }\n\n                    $loadRules(plan_id, 0);\n\n                } else if (obj.status_code == '001') {\n                    alert(<?php echo xlj('Unknown Error'); ?>);\n\n                } else if (obj.status_code == '002') {\n                    alert(<?php echo xlj('Plan Name Already Taken'); ?>);\n                    $('#new_plan_name')\n                        .css({'border-color':'red',\n                            'border-width':'3px'\n                        });\n                    $('#new_plan_name').focus();\n                } else {\n                    //Error\n                    console.log(obj.status_message);\n                    if (is_new_plan) {\n                        alert(<?php echo xlj('Error while adding new plan'); ?>);\n                    } else {\n                        alert(<?php echo xlj('Error while updating the plan'); ?>);\n                    }\n                }\n\n                $(\"body\").removeClass(\"loading\");\n            })\n            .fail(function (jqXHR, textStatus) {\n                console.log(textStatus);\n                if (is_new_plan) {\n                    alert(<?php echo xlj('Error while adding new plan'); ?>);\n                } else {\n                    alert(<?php echo xlj('Error while updating the plan'); ?>);\n                }\n\n                $(\"body\").removeClass(\"loading\");\n            });\n        });\n    });\n\n    $loadRules = function(selected_plan, selected_plan_pid){\n        $(\"#cdr_rules\").empty(selected_plan);\n        $('#new_plan_container').empty();\n\n        if (selected_plan != 'select_plan') {\n            $(\"body\").addClass(\"loading\");\n\n            $(\"#cdr_hide_show-div\").show();\n            $(\"#delete_plan\").show();\n            $(\"#plan_status_div\").show();\n\n            if (selected_plan == 'add_new_plan') {\n                $(\"#delete_plan\").hide();\n                $(\"#plan_status_div\").hide();\n                $newPlan();\n\n            } else {\n                $loadPlanStatus(selected_plan, selected_plan_pid);\n            }\n\n            $.post\n                (\n                    '<?php echo  _base_url() .\n                            '/library/RulesPlanMappingEventHandlers_ajax.php?action=getRulesInAndNotInPlan&plan_id='; ?>' + encodeURIComponent(selected_plan)\n                )\n                .done(function(resp) {\n                    var data = $.parseJSON(resp);\n\n                    $('#cdr_rules')\n                        .append('<select id=\"cdr_rules_select\" class=\"multiselect\" multiple=\"multiple\" name=\"cdr_rules_select[]\"/>');\n\n                    $.each(data, function(idx, obj) {\n                        if (obj.selected  == \"true\") {\n                            $(\"#cdr_rules_select\")\n                                .append(\n                                    $('<option value=\"' + jsAttr(obj.rule_id) + '\" selected=\"selected\" init_value=\"selected\">' + jsText(obj.rule_title) + '</option>')\n                                );\n                        } else {\n                            $(\"#cdr_rules_select\")\n                                .append(\n                                    $('<option value=\"' + jsAttr(obj.rule_id) + '\" init_value=\"not-selected\">' + jsText(obj.rule_title) + '</option>')\n                                );\n                        }\n                    });\n\n                    $(\"#cdr_rules_select\").multiselect({dividerLocation: 0.45});\n                    $(\"body\").removeClass(\"loading\");\n                });\n        } else {\n            $(\"#cdr_hide_show-div\").hide();\n            $(\"#delete_plan\").hide();\n        }\n    }\n\n    $loadPlanStatus = function(selected_plan, selected_plan_pid) {\n        $.post\n        (\n            '<?php echo  _base_url() .\n                    '/library/RulesPlanMappingEventHandlers_ajax.php?action=getPlanStatus&plan_id='; ?>' + encodeURIComponent(selected_plan)\n                    + '&plan_pid=' + encodeURIComponent(selected_plan_pid)\n        )\n        .done(function(resp) {\n            var obj = $.parseJSON(resp);\n\n            if (obj.is_plan_active) {\n                $activatePlan();\n            } else {\n                $deactivatePlan();\n            }\n\n        })\n        .fail(function (jqXHR, textStatus) {\n            console.log(textStatus);\n            alert(<?php echo xlj('Error'); ?>);\n        });\n\n    }\n\n    $newPlan = function() {\n        $('#new_plan_container')\n                        .append('<label>' + jsText(<?php echo xlj('Plan Name'); ?>) + ': </label>')\n            .append('<input id=\"new_plan_name\" type=\"text\" name=\"new_plan_name\">');\n\n        $(\"#cdr-rules_cont\").removeClass(\"overlay\");\n    }\n\n    $togglePlanStatus = function (isActive) {\n        var selected_plan = $('#cdr-plans-select').find('option:selected').attr('id');\n        var selected_plan_pid = $('#cdr-plans-select').find('option:selected').attr('p_id');\n        var action = 'activate';\n\n        if (!isActive) {\n            action = 'deactivate';\n        }\n\n                var postToggle =\n                       {\n                          \"selected_plan\": selected_plan,\n                          \"plan_pid\":  selected_plan_pid,\n                          \"plan_status\": action\n                       }\n               var dataStringToggle = JSON.stringify(postToggle);\n\n        $.post(\n      '<?php echo  _base_url() . '/library/RulesPlanMappingEventHandlers_ajax.php?action=togglePlanStatus'; ?>'\n               , dataStringToggle).done(function(resp) {\n                        var obj = $.parseJSON(resp);\n                           if (obj == '007')\n                            {\n                              alert(<?php echo xlj('Plan Status Changed'); ?>);\n                             }\n                           if (obj == '002') {\n                              alert(<?php echo xlj('Plan Status Failed to Change'); ?>);\n                             }\n        })\n        .fail(function(jqXHR, textStatus) {\n            console.log(textStatus);\n            alert(<?php echo xlj('Error'); ?>);\n        });\n    }\n\n    $activatePlan = function() {\n        $(\"#plan-status-label\").text(jsText(<?php echo xlj('Status'); ?>) + ': ' + jsText(<?php echo xlj('Active{{Plan}}'); ?>));\n        window.buttonStatus = \"active\";\n        $(\"#cdr-status\").removeAttr(\"disabled\");\n        $(\"#cdr-status\").text(jsText(<?php echo xlj('Deactivate'); ?>));\n\n        $(\"#cdr-rules_cont\").removeClass(\"overlay\");\n    }\n\n    $deactivatePlan = function() {\n        $(\"#plan-status-label\").text(jsText(<?php echo xlj('Status'); ?>) + ': ' + jsText(<?php echo xlj('Inactive'); ?>));\n        window.buttonStatus = \"inactive\";\n        $(\"#cdr-status\").removeAttr(\"disabled\");\n        $(\"#cdr-status\").text(jsText(<?php echo xlj('Activate'); ?>));\n\n        $(\"#cdr-rules_cont\").addClass(\"overlay\");\n    }\n\n</script>\n\n<div class=\"cdr-mappings\">\n    <br/>\n    <div><b><?php echo xlt('View Plan Rules'); ?></b></div>\n    <br/>\n    <div id=\"cdr_mappings_form-div\" class=\"cdr-form\">\n        <div class=\"cdr-plans\">\n            <?php echo xlt('Plan') . ':'; ?>\n            <select id=\"cdr-plans-select\" name=\"cdr-plans-select\" class=\"cdr-plans-select-class\">\n                             <option id=\"select_plan\" value=\"select_plan\">- <?php echo xlt('SELECT PLAN'); ?> -</option>\n                <option id=\"divider\" value=\"divider\" disabled/>\n                <option id=\"add_new_plan\" value=\"add_new_plan\"><?php echo xlt('ADD NEW PLAN'); ?></option>\n            </select>\n            <input title=\"<?php echo xla('Delete Plan'); ?>\" id=\"delete_plan\" class=\"delete_button\" type=\"image\" style=\"display: none;\"/>\n        </div>\n        <div id=\"new_plan_container\"></div>\n        <div id=\"cdr_hide_show-div\" style=\"display: none;\">\n            <div id=\"plan_status_div\" class=\"plan-status_div\">\n                                <label id='plan-status-label'><?php echo xlt('Status') . ':'; ?></label>\n                <button id='cdr-status' disable><?php echo xlt('Activate'); ?></button>\n            </div>\n            <br/>\n\n            <div id=\"cdr-rules_cont\">\n                <div id=\"cdr_rules\" class=\"cdr-rules-class\"></div>\n\n                <div id=\"cdr_buttons_div\" class=\"cdr-buttons-class\">\n                    <button id='cdr-button-cancel'><?php echo xlt('Cancel'); ?></button>\n                    <button id='cdr-button-submit'><?php echo xlt('Submit'); ?></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"modal\"></div>\n", "/*\n * jQuery UI Multiselect\n *\n * Authors:\n *  Michael Aufreiter (quasipartikel.at)\n *  Yanick Rochon (yanick.rochon[at]gmail[dot]com)\n *\n * Dual licensed under the MIT (MIT-LICENSE.txt)\n * and GPL (GPL-LICENSE.txt) licenses.\n *\n * http://www.quasipartikel.at/multiselect/\n *\n *\n * Depends:\n *\tui.core.js\n *\tui.sortable.js\n *\n * Optional:\n * localization (http://plugins.jquery.com/project/localisation)\n * scrollTo (http://plugins.jquery.com/project/ScrollTo)\n *\n * Todo:\n *  Make batch actions faster\n *  Implement dynamic insertion through remote calls\n */\n\n\n(function($) {\n\n$.widget(\"ui.multiselect\", {\n  options: {\n\t\tsortable: true,\n\t\tsearchable: true,\n\t\tdoubleClickable: true,\n\t\tanimated: 'fast',\n\t\tshow: 'slideDown',\n\t\thide: 'slideUp',\n\t\tdividerLocation: 0.6,\n\t\tnodeComparator: function(node1,node2) {\n\t\t\tvar text1 = node1.text(),\n\t\t\t    text2 = node2.text();\n\t\t\treturn text1 == text2 ? 0 : (text1 < text2 ? -1 : 1);\n\t\t}\n\t},\n\t_create: function() {\n\t\tthis.element.hide();\n\t\tthis.id = this.element.attr(\"id\");\n\t\tthis.container = $('<div class=\"ui-multiselect ui-helper-clearfix ui-widget\"></div>').insertAfter(this.element);\n\t\tthis.count = 0; // number of currently selected options\n\t\tthis.selectedContainer = $('<div class=\"selected\"></div>').appendTo(this.container);\n\t\tthis.availableContainer = $('<div class=\"available\"></div>').appendTo(this.container);\n\t\tthis.selectedActions = $('<div class=\"actions ui-widget-header ui-helper-clearfix\"><span class=\"count\">0 '+$.ui.multiselect.locale.itemsCount+'</span><a href=\"#\" class=\"remove-all\">'+$.ui.multiselect.locale.removeAll+'</a></div>').appendTo(this.selectedContainer);\n\t\tthis.availableActions = $('<div class=\"actions ui-widget-header ui-helper-clearfix\"><input type=\"text\" class=\"search empty ui-widget-content ui-corner-all\"/><a href=\"#\" class=\"add-all\">'+$.ui.multiselect.locale.addAll+'</a></div>').appendTo(this.availableContainer);\n\t\tthis.selectedList = $('<ul class=\"selected connected-list\"><li class=\"ui-helper-hidden-accessible\"></li></ul>').bind('selectstart', function(){return false;}).appendTo(this.selectedContainer);\n\t\tthis.availableList = $('<ul class=\"available connected-list\"><li class=\"ui-helper-hidden-accessible\"></li></ul>').bind('selectstart', function(){return false;}).appendTo(this.availableContainer);\n\n\t\tvar that = this;\n\n\t\t// set dimensions\n\t\tthis.container.width(this.element.width()+1);\n\t\tthis.selectedContainer.width(Math.floor(this.element.width()*this.options.dividerLocation));\n\t\tthis.availableContainer.width(Math.floor(this.element.width()*(1-this.options.dividerLocation)));\n\n\t\t// fix list height to match <option> depending on their individual header's heights\n\t\tthis.selectedList.height(Math.max(this.element.height()-this.selectedActions.height(),1));\n\t\tthis.availableList.height(Math.max(this.element.height()-this.availableActions.height(),1));\n\n\t\tif ( !this.options.animated ) {\n\t\t\tthis.options.show = 'show';\n\t\t\tthis.options.hide = 'hide';\n\t\t}\n\n\t\t// init lists\n\t\tthis._populateLists(this.element.find('option'));\n\n\t\t// make selection sortable\n\t\tif (this.options.sortable) {\n\t\t\tthis.selectedList.sortable({\n\t\t\t\tplaceholder: 'ui-state-highlight',\n\t\t\t\taxis: 'y',\n\t\t\t\tupdate: function(event, ui) {\n\t\t\t\t\t// apply the new sort order to the original selectbox\n\t\t\t\t\tthat.selectedList.find('li').each(function() {\n\t\t\t\t\t\tif ($(this).data('optionLink'))\n\t\t\t\t\t\t\t$(this).data('optionLink').remove().appendTo(that.element);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\treceive: function(event, ui) {\n\t\t\t\t\tui.item.data('optionLink').attr('selected', true);\n\t\t\t\t\t// increment count\n\t\t\t\t\tthat.count += 1;\n\t\t\t\t\tthat._updateCount();\n\t\t\t\t\t// workaround, because there's no way to reference\n\t\t\t\t\t// the new element, see http://dev.jqueryui.com/ticket/4303\n\t\t\t\t\tthat.selectedList.children('.ui-draggable').each(function() {\n\t\t\t\t\t\t$(this).removeClass('ui-draggable');\n\t\t\t\t\t\t$(this).data('optionLink', ui.item.data('optionLink'));\n\t\t\t\t\t\t$(this).data('idx', ui.item.data('idx'));\n\t\t\t\t\t\tthat._applyItemState($(this), true);\n\t\t\t\t\t});\n\n\t\t\t\t\t// workaround according to http://dev.jqueryui.com/ticket/4088\n\t\t\t\t\tsetTimeout(function() { ui.item.remove(); }, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// set up livesearch\n\t\tif (this.options.searchable) {\n\t\t\tthis._registerSearchEvents(this.availableContainer.find('input.search'));\n\t\t} else {\n\t\t\t$('.search').hide();\n\t\t}\n\n\t\t// batch actions\n\t\tthis.container.find(\".remove-all\").click(function() {\n\t\t\tthat._populateLists(that.element.find('option').removeAttr('selected'));\n\t\t\treturn false;\n\t\t});\n\n\t\tthis.container.find(\".add-all\").click(function() {\n\t\t\tvar options = that.element.find('option').not(\":selected\");\n\t\t\tif (that.availableList.children('li:hidden').length > 1) {\n\t\t\t\tthat.availableList.children('li').each(function(i) {\n\t\t\t\t\tif ($(this).is(\":visible\")) $(options[i-1]).attr('selected', 'selected');\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toptions.attr('selected', 'selected');\n\t\t\t}\n\t\t\tthat._populateLists(that.element.find('option'));\n\t\t\treturn false;\n\t\t});\n\t},\n\tdestroy: function() {\n\t\tthis.element.show();\n\t\tthis.container.remove();\n\n\t\t$.Widget.prototype.destroy.apply(this, arguments);\n\t},\n\t_populateLists: function(options) {\n\t\tthis.selectedList.children('.ui-element').remove();\n\t\tthis.availableList.children('.ui-element').remove();\n\t\tthis.count = 0;\n\n\t\tvar that = this;\n\t\tvar items = $(options.map(function(i) {\n\t      var item = that._getOptionNode(this).appendTo(this.selected ? that.selectedList : that.availableList).show();\n\n\t\t\tif (this.selected) that.count += 1;\n\t\t\tthat._applyItemState(item, this.selected);\n\t\t\titem.data('idx', i);\n\t\t\treturn item[0];\n    }));\n\n\t\t// update count\n\t\tthis._updateCount();\n\t\tthat._filter.apply(this.availableContainer.find('input.search'), [that.availableList]);\n  },\n\t_updateCount: function() {\n\t\tthis.selectedContainer.find('span.count').text(this.count+\" \"+$.ui.multiselect.locale.itemsCount);\n\t},\n\t_getOptionNode: function(option) {\n\t\toption = $(option);\n\t\tvar node = $('<li class=\"ui-state-default ui-element\" title=\"' + jsAttr(option.text()) + '\"><span class=\"ui-icon\"/>' + jsText(option.text()) + '<a href=\"#\" class=\"action\"><span class=\"ui-corner-all ui-icon\"/></a></li>').hide();\n\t\tnode.data('optionLink', option);\n\t\treturn node;\n\t},\n\t// clones an item with associated data\n\t// didn't find a smarter away around this\n\t_cloneWithData: function(clonee) {\n\t\tvar clone = clonee.clone(false,false);\n\t\tclone.data('optionLink', clonee.data('optionLink'));\n\t\tclone.data('idx', clonee.data('idx'));\n\t\treturn clone;\n\t},\n\t_setSelected: function(item, selected) {\n\t\titem.data('optionLink').attr('selected', selected);\n\n\t\tif (selected) {\n\t\t\tvar selectedItem = this._cloneWithData(item);\n\t\t\titem[this.options.hide](this.options.animated, function() { $(this).remove(); });\n\t\t\tselectedItem.appendTo(this.selectedList).hide()[this.options.show](this.options.animated);\n\n\t\t\tthis._applyItemState(selectedItem, true);\n\t\t\treturn selectedItem;\n\t\t} else {\n\n\t\t\t// look for successor based on initial option index\n\t\t\tvar items = this.availableList.find('li'), comparator = this.options.nodeComparator;\n\t\t\tvar succ = null, i = item.data('idx'), direction = comparator(item, $(items[i]));\n\n\t\t\t// TODO: test needed for dynamic list populating\n\t\t\tif ( direction ) {\n\t\t\t\twhile (i>=0 && i<items.length) {\n\t\t\t\t\tdirection > 0 ? i++ : i--;\n\t\t\t\t\tif ( direction != comparator(item, $(items[i])) ) {\n\t\t\t\t\t\t// going up, go back one item down, otherwise leave as is\n\t\t\t\t\t\tsucc = items[direction > 0 ? i : i+1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsucc = items[i];\n\t\t\t}\n\n\t\t\tvar availableItem = this._cloneWithData(item);\n\t\t\tsucc ? availableItem.insertBefore($(succ)) : availableItem.appendTo(this.availableList);\n\t\t\titem[this.options.hide](this.options.animated, function() { $(this).remove(); });\n\t\t\tavailableItem.hide()[this.options.show](this.options.animated);\n\n\t\t\tthis._applyItemState(availableItem, false);\n\t\t\treturn availableItem;\n\t\t}\n\t},\n\t_applyItemState: function(item, selected) {\n\t\tif (selected) {\n\t\t\tif (this.options.sortable)\n\t\t\t\titem.children('span').addClass('ui-icon-arrowthick-2-n-s').removeClass('ui-helper-hidden').addClass('ui-icon');\n\t\t\telse\n\t\t\t\titem.children('span').removeClass('ui-icon-arrowthick-2-n-s').addClass('ui-helper-hidden').removeClass('ui-icon');\n\t\t\titem.find('a.action span').addClass('ui-icon-minus').removeClass('ui-icon-plus');\n\t\t\tthis._registerRemoveEvents(item.find('a.action'));\n\n\t\t} else {\n\t\t\titem.children('span').removeClass('ui-icon-arrowthick-2-n-s').addClass('ui-helper-hidden').removeClass('ui-icon');\n\t\t\titem.find('a.action span').addClass('ui-icon-plus').removeClass('ui-icon-minus');\n\t\t\tthis._registerAddEvents(item.find('a.action'));\n\t\t}\n\n\t\tthis._registerDoubleClickEvents(item);\n\t\tthis._registerHoverEvents(item);\n\t},\n\t// taken from John Resig's liveUpdate script\n\t_filter: function(list) {\n\t\tvar input = $(this);\n\t\tvar rows = list.children('li'),\n\t\t\tcache = rows.map(function(){\n\n\t\t\t\treturn $(this).text().toLowerCase();\n\t\t\t});\n\n\t\tvar term = $.trim(input.val().toLowerCase()), scores = [];\n\n\t\tif (!term) {\n\t\t\trows.show();\n\t\t} else {\n\t\t\trows.hide();\n\n\t\t\tcache.each(function(i) {\n\t\t\t\tif (this.indexOf(term)>-1) { scores.push(i); }\n\t\t\t});\n\n\t\t\t$.each(scores, function() {\n\t\t\t\t$(rows[this]).show();\n\t\t\t});\n\t\t}\n\t},\n\t_registerDoubleClickEvents: function(elements) {\n\t\tif (!this.options.doubleClickable) return;\n\t\telements.dblclick(function() {\n\t\t\telements.find('a.action').click();\n\t\t});\n\t},\n\t_registerHoverEvents: function(elements) {\n\t\telements.removeClass('ui-state-hover');\n\t\telements.mouseover(function() {\n\t\t\t$(this).addClass('ui-state-hover');\n\t\t});\n\t\telements.mouseout(function() {\n\t\t\t$(this).removeClass('ui-state-hover');\n\t\t});\n\t},\n\t_registerAddEvents: function(elements) {\n\t\tvar that = this;\n\t\telements.click(function() {\n\t\t\tvar item = that._setSelected($(this).parent(), true);\n\t\t\tthat.count += 1;\n\t\t\tthat._updateCount();\n\t\t\treturn false;\n\t\t});\n\n\t\t// make draggable\n\t\tif (this.options.sortable) {\n  \t\telements.each(function() {\n  \t\t\t$(this).parent().draggable({\n  \t      connectToSortable: that.selectedList,\n  \t\t\t\thelper: function() {\n  \t\t\t\t\tvar selectedItem = that._cloneWithData($(this)).width($(this).width() - 50);\n  \t\t\t\t\tselectedItem.width($(this).width());\n  \t\t\t\t\treturn selectedItem;\n  \t\t\t\t},\n  \t\t\t\tappendTo: that.container,\n  \t\t\t\tcontainment: that.container,\n  \t\t\t\trevert: 'invalid'\n  \t    });\n  \t\t});\n\t\t}\n\t},\n\t_registerRemoveEvents: function(elements) {\n\t\tvar that = this;\n\t\telements.click(function() {\n\t\t\tthat._setSelected($(this).parent(), false);\n\t\t\tthat.count -= 1;\n\t\t\tthat._updateCount();\n\t\t\treturn false;\n\t\t});\n \t},\n\t_registerSearchEvents: function(input) {\n\t\tvar that = this;\n\n\t\tinput.focus(function() {\n\t\t\t$(this).addClass('ui-state-active');\n\t\t})\n\t\t.blur(function() {\n\t\t\t$(this).removeClass('ui-state-active');\n\t\t})\n\t\t.keypress(function(e) {\n\t\t\tif (e.keyCode == 13)\n\t\t\t\treturn false;\n\t\t})\n\t\t.keyup(function() {\n\t\t\tthat._filter.apply(this, [that.availableList]);\n\t\t});\n\t}\n});\n\n$.extend($.ui.multiselect, {\n\tlocale: {\n\t\taddAll:'Add all',\n\t\tremoveAll:'Remove all',\n\t\titemsCount:'items selected'\n\t}\n});\n\n\n})(jQuery);\n", "<?php\n\n// +-----------------------------------------------------------------------+\n// | Copyright (c) 2002-2003, Richard Heyes, Harald Radi                        |\n// | All rights reserved.                                                  |\n// |                                                                       |\n// | Redistribution and use in source and binary forms, with or without    |\n// | modification, are permitted provided that the following conditions    |\n// | are met:                                                              |\n// |                                                                       |\n// | o Redistributions of source code must retain the above copyright      |\n// |   notice, this list of conditions and the following disclaimer.       |\n// | o Redistributions in binary form must reproduce the above copyright   |\n// |   notice, this list of conditions and the following disclaimer in the |\n// |   documentation and/or other materials provided with the distribution.|\n// | o The names of the authors may not be used to endorse or promote      |\n// |   products derived from this software without specific prior written  |\n// |   permission.                                                         |\n// |                                                                       |\n// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   |\n// | \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     |\n// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR |\n// | A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  |\n// | OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, |\n// | SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      |\n// | LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, |\n// | DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY |\n// | THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   |\n// | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE |\n// | OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  |\n// |                                                                       |\n// +-----------------------------------------------------------------------+\n// | Author: Richard Heyes <richard@phpguru.org>                           |\n// |         Harald Radi <harald.radi@nme.at>                              |\n// +-----------------------------------------------------------------------+\n//\n// $Id$\n\n/**\n* HTML_TreeMenu Class\n*\n* A simple couple of PHP classes and some not so simple\n* Jabbascript which produces a tree menu. In IE this menu\n* is dynamic, with branches being collapsable. In IE5+ the\n* status of the collapsed/open branches persists across page\n* refreshes.In any other browser the tree is static. Code is\n* based on work of Harald Radi.\n*\n* Usage.\n*\n* After installing the package, copy the example php script to\n* your servers document root. Also place the TreeMenu.js and the\n* images folder in the same place. Running the script should\n* then produce the tree.\n*\n* Thanks go to Chip Chapin (http://www.chipchapin.com) for many\n* excellent ideas and improvements.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\n\nclass HTML_TreeMenu\n{\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    */\n    function __construct()\n    {\n        // Not much to do here :(\n    }\n\n    /**\n    * This function adds an item to the the tree.\n    *\n    * @access public\n    * @param  object $node The node to add. This object should be\n    *                      a HTML_TreeNode object.\n    * @return object       Returns a reference to the new node inside\n    *                      the tree.\n    */\n    function &addItem(&$node)\n    {\n        $this->items[] = &$node;\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Import method for creating HTML_TreeMenu objects/structures\n    * out of existing tree objects/structures. Currently supported\n    * are Wolfram Kriesings' PEAR Tree class, and Richard Heyes' (me!)\n    * Tree class (available here: http://www.phpguru.org/). This\n    * method is intended to be used statically, eg:\n    * $treeMenu = &HTML_TreeMenu::createFromStructure($myTreeStructureObj);\n    *\n    * @param  array  $params   An array of parameters that determine\n    *                          how the import happens. This can consist of:\n    *                            structure   => The tree structure\n    *                            type        => The type of the structure, currently\n    *                                           can be either 'heyes' or 'kriesing'\n    *                            nodeOptions => Default options for each node\n    *\n    * @return object           The resulting HTML_TreeMenu object\n    */\n    function createFromStructure($params)\n    {\n        if (!isset($params['nodeOptions'])) {\n            $params['nodeOptions'] = array();\n        }\n\n        switch (@$params['type']) {\n\n            /**\n            * Wolfram Kriesings' PEAR Tree class\n            */\n            case 'kriesing':\n                $className = strtolower(get_class($params['structure']->dataSourceClass));\n                $isXMLStruct = strpos($className, '_xml') !== false ? true : false;\n\n                // Get the entire tree, the $nodes are sorted like in the tree view\n                // from top to bottom, so we can easily put them in the nodes\n                $nodes = $params['structure']->getNode();\n\n                // Make a new menu and fill it with the values from the tree\n                $treeMenu  = new HTML_TreeMenu();\n                $curNode[0] = &$treeMenu;   // we need the current node as the reference to the\n\n                foreach ($nodes as $aNode) {\n                    $events = array();\n                    $data = array();\n\n                    // In an XML, all the attributes are saved in an array, but since they might be\n                    // used as the parameters, we simply extract them here if we handle an XML-structure\n                    if ($isXMLStruct && sizeof($aNode['attributes'])) {\n                        foreach ($aNode['attributes'] as $key => $val) {\n                            if (!$aNode[$key]) { // dont overwrite existing values\n                                $aNode[$key] = $val;\n                            }\n                        }\n                    }\n\n                    // Process all the data that are saved in $aNode and put them in the data and/or events array\n                    foreach ($aNode as $key => $val) {\n                        if (!is_array($val)) {\n                            // Dont get the recursive data in here! they are always arrays\n                            if (substr($key, 0, 2) == 'on') {  // get the events\n                                $events[$key] = $val;\n                            }\n\n                            // I put it in data too, so in case an options starts with 'on' its also passed to the node ... not too cool i know\n                            $data[$key] = $val;\n                        }\n                    }\n\n                    // Normally the text is in 'name' in the Tree class, so we check both but 'text' is used if found\n                    $data['text'] = $aNode['text'] ? $aNode['text'] : $aNode['name'];\n\n                    // Add the item to the proper node\n                    $thisNode = &$curNode[$aNode['level']]->addItem(new HTML_TreeNode($data, $events));\n                    $curNode[$aNode['level'] + 1] = &$thisNode;\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) second (array based) Tree class\n            */\n            case 'heyes_array':\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                    $parentID = 0;\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                    $parentID = $params['parentID'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->getChildren($parentID) as $nodeID) {\n                    $data = $params['structure']->getData($nodeID);\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $data)));\n\n                    // Recurse ?\n                    if ($params['structure']->hasChildren($nodeID)) {\n                        $recurseParams['type']        = 'heyes_array';\n                        $recurseParams['parentID']    = $nodeID;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['structure']   = &$params['structure'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) original OO based Tree class\n            */\n            case 'heyes':\n            default:\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->nodes->nodes as $node) {\n                    $tag = $node->getTag();\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $tag)));\n\n                    // Recurse ?\n                    if (!empty($node->nodes->nodes)) {\n                        $recurseParams['structure']   = $node;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n        }\n\n        return $treeMenu;\n    }\n\n    /**\n    * Creates a treeMenu from XML. The structure of your XML should be\n    * like so:\n    *\n    * <treemenu>\n    *     <node text=\"First node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     <node text=\"Second node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    *         <node text=\"Sub node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     </node>\n    *     <node text=\"Third node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    * </treemenu>\n    *\n    * Any of the options you can supply to the HTML_TreeNode constructor can be supplied as\n    * attributes to the <node> tag. If there are no subnodes for a particular node, you can\n    * use the XML shortcut <node ... /> instead of <node ... ></node>. The $xml argument can\n    * be either the XML as a string, or an pre-created XML_Tree object. Also, this method\n    * REQUIRES my own Tree class to work (http://phpguru.org/tree.html). If this has not\n    * been include()ed or require()ed this method will die().\n    *\n    * @param  mixed  $xml  This can be either a string containing the XML, or an XML_Tree object\n    *                      (the PEAR::XML_Tree package).\n    * @return object       The HTML_TreeMenu object\n    */\n    function createFromXML($xml)\n    {\n        if (!class_exists('Tree')) {\n            die('Could not find Tree class');\n        }\n\n        // Supplied $xml is a string\n        if (is_string($xml)) {\n            require_once('XML/Tree.php');\n            $xmlTree = new XML_Tree();\n            $xmlTree->getTreeFromString($xml);\n\n        // Supplied $xml is an XML_Tree object\n        } else {\n            $xmlTree = $xml;\n        }\n\n        // Now process the XML_Tree object, setting the XML attributes\n        // to be the tag data (with out the XML tag name or contents).\n        $treeStructure = Tree::createFromXMLTree($xmlTree, true);\n        $treeStructure->nodes->traverse(create_function('&$node', '$tagData = $node->getTag(); $node->setTag($tagData[\"attributes\"]);'));\n\n\n        return HTML_TreeMenu::createFromStructure(array('structure' => $treeStructure));\n    }\n} // HTML_TreeMenu\n\n\n/**\n* HTML_TreeNode class\n*\n* This class is supplementary to the above and provides a way to\n* add nodes to the tree. A node can have other nodes added to it.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\nclass HTML_TreeNode\n{\n    /**\n    * The text for this node.\n    * @var string\n    */\n    var $text;\n\n    /**\n    * The link for this node.\n    * @var string\n    */\n    var $link;\n\n    /**\n    * The icon for this node.\n    * @var string\n    */\n    var $icon;\n\n    /**\n    * The icon to show when expanded for this node.\n    * @var string\n    */\n    var $expandedIcon;\n\n    /**\n    * The css class for this node\n    * @var string\n    */\n    var $cssClass;\n\n    /**\n    * The link target for this node\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Whether this node is expanded or not\n    * @var bool\n    */\n    var $expanded;\n\n    /**\n    * Whether this node is dynamic or not\n    * @var bool\n    */\n    var $isDynamic;\n\n    /**\n    * Should this node be made visible?\n    * @var bool\n    */\n    var $ensureVisible;\n\n    /**\n    * The parent node. Null if top level\n    * @var object\n    */\n    var $parent;\n\n    /**\n    * Unique ID of this node\n    * @var int\n    */\n    //commented out because it was causing Documents page to not show\n   //because of this redeclaration of $parent.  I do not know what the\n  // author's intention was in using this name twice or if it was a mistake\n    //var $parent;\n\n\n    /**\n    * Javascript event handlers;\n    * @var array\n    */\n    var $events;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    * @param  array $options An array of options which you can pass to change\n    *                        the way this node looks/acts. This can consist of:\n    *                         o text          The title of the node, defaults to blank\n    *                         o link          The link for the node, defaults to blank\n    *                         o icon          The icon for the node, defaults to blank\n    *                         o expandedIcon  The icon to show when the node is expanded\n    *                         o cssClass      The CSS class for this node, defaults to blank\n    *                         o expanded      The default expanded status of this node, defaults to false\n    *                                         This doesn't affect non dynamic presentation types\n    *                         o linkTarget    Target for the links. Defaults to linkTarget of the\n    *                                         HTML_TreeMenu_Presentation.\n    *                         o isDynamic     If this node is dynamic or not. Only affects\n    *                                         certain presentation types.\n    *                         o ensureVisible If true this node will be made visible despite the expanded\n    *                                         settings, and client side persistence. Will not affect\n    *                                         some presentation styles, such as Listbox. Default is false\n    * @param  array $events An array of javascript events and the corresponding event handlers.\n    *                       Additionally to the standard javascript events you can specify handlers\n    *                       for the 'onexpand', 'oncollapse' and 'ontoggle' events which will be fired\n    *                       whenever a node is collapsed and/or expanded.\n    */\n    function __construct($options = array(), $events = array())\n    {\n        $this->text          = '';\n        $this->link          = '';\n        $this->icon          = '';\n        $this->expandedIcon  = '';\n        $this->cssClass      = '';\n        $this->expanded      = false;\n        $this->isDynamic     = true;\n        $this->ensureVisible = false;\n        $this->linkTarget    = null;\n        $this->id            = null;\n\n        $this->parent        = null;\n        $this->events        = $events;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Allows setting of various parameters after the initial\n    * constructor call. Possible options you can set are:\n    *  o text\n    *  o link\n    *  o icon\n    *  o cssClass\n    *  o expanded\n    *  o isDynamic\n    *  o ensureVisible\n    * ie The same options as in the constructor\n    *\n    * @access public\n    * @param  string $option Option to set\n    * @param  string $value  Value to set the option to\n    */\n    function setOption($option, $value)\n    {\n        $this->$option = $value;\n    }\n\n    /**\n    * Adds a new subnode to this node.\n    *\n    * @access public\n    * @param  object $node The new node\n    */\n    function &addItem(&$node)\n    {\n        $node->parent  = &$this;\n        $this->items[] = &$node;\n\n        /**\n        * If the subnode has ensureVisible set it needs\n        * to be handled, and all parents set accordingly.\n        */\n        if ($node->ensureVisible) {\n            $this->_ensureVisible();\n        }\n\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Private function to handle ensureVisible stuff\n    *\n    * @access private\n    */\n    function _ensureVisible()\n    {\n        $this->ensureVisible = true;\n        $this->expanded      = true;\n\n        if (!is_null($this->parent)) {\n            $this->parent->_ensureVisible();\n        }\n    }\n} // HTML_TreeNode\n\n\n/**\n* HTML_TreeMenu_Presentation class\n*\n* Base class for other presentation classes to\n* inherit from.\n*/\nclass HTML_TreeMenu_Presentation\n{\n    /**\n    * The TreeMenu structure\n    * @var object\n    */\n    var $menu;\n\n    /**\n    * Base constructor simply sets the menu object\n    *\n    * @param object $structure The menu structure\n    */\n    function __construct(&$structure)\n    {\n        $this->menu = &$structure;\n    }\n\n    /**\n    * Prints the HTML generated by the toHTML() method.\n    * toHTML() must therefore be defined by the derived\n    * class.\n    *\n    * @access public\n    * @param  array  Options to set. Any options taken by\n    *                the presentation class can be specified\n    *                here.\n    */\n    function printMenu($options = array())\n    {\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n\n        echo $this->toHTML();\n    }\n}\n\n\n/**\n* HTML_TreeMenu_DHTML class\n*\n* This class is a presentation class for the tree structure\n* created using the TreeMenu/TreeNode. It presents the\n* traditional tree, static for browsers that can't handle\n* the DHTML.\n*/\nclass HTML_TreeMenu_DHTML extends HTML_TreeMenu_Presentation\n{\n    /**\n    * Dynamic status of the treemenu. If true (default) this has no effect. If\n    * false it will override all dynamic status vars and set the menu to be\n    * fully expanded an non-dynamic.\n    */\n    var $isDynamic;\n\n    /**\n    * Path to the images\n    * @var string\n    */\n    var $images;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Whether to use clientside persistence or not\n    * @var bool\n    */\n    var $userPersistence;\n\n    /**\n    * The default CSS class for the nodes\n    */\n    var $defaultClass;\n\n    /**\n    * Whether to skip first level branch images\n    * @var bool\n    */\n    var $noTopLevelImages;\n\n    /**\n    * Constructor, takes the tree structure as\n    * an argument and an array of options which\n    * can consist of:\n    *  o images            -  The path to the images folder. Defaults to \"images\"\n    *  o linkTarget        -  The target for the link. Defaults to \"_self\"\n    *  o defaultClass      -  The default CSS class to apply to a node. Default is none.\n    *  o usePersistence    -  Whether to use clientside persistence. This persistence\n    *                         is achieved using cookies. Default is true.\n    *  o noTopLevelImages  -  Whether to skip displaying the first level of images if\n    *                         there is multiple top level branches.\n    *  o maxDepth          -  The maximum depth of indentation. Useful for ensuring\n    *                         deeply nested trees don't go way off to the right of your\n    *                         page etc. Defaults to no limit.\n    *\n    * And also a boolean for whether the entire tree is dynamic or not.\n    * This overrides any perNode dynamic settings.\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Array of options\n    * @param bool   $isDynamic Whether the tree is dynamic or not\n    */\n    function __construct(&$structure, $options = array(), $isDynamic = true)\n    {\n        parent::__construct($structure);\n        $this->isDynamic = $isDynamic;\n\n        // Defaults\n        $this->images           = 'public/images';\n        $this->maxDepth         = 0;        // No limit\n        $this->linkTarget       = '_self';\n        $this->defaultClass     = '';\n        $this->usePersistence   = true;\n        $this->noTopLevelImages = false;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML for the menu. This method can be\n    * used instead of printMenu() to use the menu system\n    * with a template system.\n    *\n    * @access public\n    * @return string The HTML for the menu\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $menuObj     = 'objTreeMenu_' . ++$count;\n\n        $html  = \"\\n\";\n        $html .= '<script>' . \"\\n\\t\";\n        $html .= sprintf(\n            '%s = new TreeMenu(\"%s\", \"%s\", \"%s\", \"%s\", %s, %s);',\n            $menuObj,\n            $this->images,\n            $menuObj,\n            $this->linkTarget,\n            $this->defaultClass,\n            $this->usePersistence ? 'true' : 'false',\n            $this->noTopLevelImages ? 'true' : 'false'\n        );\n\n        $html .= \"\\n\";\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $html .= $this->_nodeToHTML($this->menu->items[$i], $menuObj);\n            }\n        }\n\n        $html .= sprintf(\"\\n\\t%s.drawMenu();\", $menuObj);\n        $html .= sprintf(\"\\n\\t%s.writeOutput();\", $menuObj);\n\n        if ($this->usePersistence && $this->isDynamic) {\n            $html .= sprintf(\"\\n\\t%s.resetBranches();\", $menuObj);\n        }\n\n        $html .= \"\\n</script>\";\n\n        return $html;\n    }\n\n    /**\n    * Prints a node of the menu\n    *\n    * @access private\n    */\n    function _nodeToHTML($nodeObj, $prefix, $return = 'newNode', $currentDepth = 0, $maxDepthPrefix = null)\n    {\n        $prefix = empty($maxDepthPrefix) ? $prefix : $maxDepthPrefix;\n\n        $expanded  = $this->isDynamic ? ($nodeObj->expanded  ? 'true' : 'false') : 'true';\n        $isDynamic = $this->isDynamic ? ($nodeObj->isDynamic ? 'true' : 'false') : 'false';\n        $html = sprintf(\n            \"\\t %s = %s.addItem(new TreeNode('%s', %s, %s, %s, %s, '%s', '%s', %s));\\n\",\n            $return,\n            $prefix,\n            attr($nodeObj->text),\n            !empty($nodeObj->icon) ? \"'\" . $nodeObj->icon . \"'\" : 'null',\n            !empty($nodeObj->link) ? \"'\" . attr($nodeObj->link) . \"'\" : 'null',\n            $expanded,\n            $isDynamic,\n            $nodeObj->cssClass,\n            $nodeObj->linkTarget,\n            !empty($nodeObj->expandedIcon) ? \"'\" . $nodeObj->expandedIcon . \"'\" : 'null'\n        );\n\n        foreach ($nodeObj->events as $event => $handler) {\n            $html .= sprintf(\n                \"\\t %s.setEvent('%s', '%s');\\n\",\n                $return,\n                $event,\n                str_replace(array(\"\\r\", \"\\n\", \"'\"), array('\\r', '\\n', \"\\'\"), $handler)\n            );\n        }\n\n        if ($this->maxDepth > 0 and $currentDepth == $this->maxDepth) {\n            $maxDepthPrefix = $prefix;\n        }\n\n        /**\n        * Loop through subnodes\n        */\n        if (!empty($nodeObj->items)) {\n            for ($i = 0; $i < count($nodeObj->items); $i++) {\n                $html .= $this->_nodeToHTML($nodeObj->items[$i], $return, $return . '_' . ($i + 1), $currentDepth + 1, $maxDepthPrefix);\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_DHTML\n\n\n/**\n* HTML_TreeMenu_Listbox class\n*\n* This class presents the menu as a listbox\n*/\nclass HTML_TreeMenu_Listbox extends HTML_TreeMenu_Presentation\n{\n    /**\n    * The text that is displayed in the first option\n    * @var string\n    */\n    var $promoText;\n\n    /**\n    * The character used for indentation\n    * @var string\n    */\n    var $indentChar;\n\n    /**\n    * How many of the indent chars to use\n    * per indentation level\n    * @var integer\n    */\n    var $indentNum;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Constructor\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Options whic affect the display of the listbox.\n    *                          These can consist of:\n    *                           o promoText  The text that appears at the the top of the listbox\n    *                                        Defaults to \"Select...\"\n    *                           o indentChar The character to use for indenting the nodes\n    *                                        Defaults to \"&nbsp;\"\n    *                           o indentNum  How many of the indentChars to use per indentation level\n    *                                        Defaults to 2\n    *                           o linkTarget Target for the links. Defaults to \"_self\"\n    *                           o submitText Text for the submit button. Defaults to \"Go\"\n    */\n    function __construct($structure, $options = array())\n    {\n        parent::__construct($structure);\n\n        $this->promoText  = null;\n        $this->indentChar = '&nbsp;';\n        $this->indentNum  = 2;\n        $this->linkTarget = '_self';\n        $this->submitText = 'Go';\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML generated\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $nodeHTML = '';\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $nodeHTML .= $this->_nodeToHTML($this->menu->items[$i]);\n            }\n        }\n\n        if ($this->promoText) {\n            return sprintf('<option value=\"\">%s</option>%s', text($this->promoText ?? ''), $nodeHTML);\n        } else {\n            return $nodeHTML;\n        }\n    }\n\n    /**\n    * Returns HTML for a single node\n    *\n    * @access private\n    */\n    function _nodeToHTML($node, $prefix = '')\n    {\n        $html = sprintf('<option value=\"%s\">%s%s</option>', attr($node->id), $prefix, text($node->text));\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($node->items)) {\n            for ($i = 0; $i < count($node->items); $i++) {\n                $html .= $this->_nodeToHTML($node->items[$i], $prefix . str_repeat($this->indentChar, $this->indentNum));\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_Listbox\n"], "filenames": ["interface/main/calendar/modules/PostCalendar/pnadmin.php", "interface/super/rules/controllers/browse/view/plans_config.php", "interface/super/rules/www/js/cdr-multiselect/ui.multiselect.js", "library/classes/TreeMenu.php"], "buggy_code_start_loc": [232, 26, 7, 799], "buggy_code_end_loc": [233, 365, 337, 813], "fixing_code_start_loc": [232, 26, 7, 799], "fixing_code_end_loc": [233, 365, 337, 813], "type": "CWE-79", "message": "Non-Privilege User Can Created New Rule and Lead to Stored Cross Site Scripting in GitHub repository openemr/openemr prior to 6.0.0.4.", "other": {"cve": {"id": "CVE-2022-1179", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-30T12:15:08.070", "lastModified": "2022-04-04T19:50:38.147", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Non-Privilege User Can Created New Rule and Lead to Stored Cross Site Scripting in GitHub repository openemr/openemr prior to 6.0.0.4."}, {"lang": "es", "value": "Un usuario no privilegiado puede crear una nueva regla y conllevar a una vulnerabilidad de tipo Cross Site Scripting almacenado en el repositorio de GitHub openemr/openemr versiones anteriores a 6.0.0.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.0.4", "matchCriteriaId": "1544F4DB-0DDA-43C6-946B-313C3E4FACE8"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/347ad614507183035d188ba14427bc162419778c", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/8025e31f-7dcf-4db9-ab07-06c1e055ab42", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/347ad614507183035d188ba14427bc162419778c"}}