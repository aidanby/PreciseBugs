{"buggy_code": ["/**\n* @author Scott Covert\n* @date 12/17/2015\n* @description This class provides generic SObject services including generating and/or executing database queries\n*/\n\npublic with sharing class SObjectService {\t\n\t/** Constant representing the max records to be retrieved by a single SOQL query */\n\tpublic static final Integer MAX_ROWS = 10000;\n\t/** Constant representing the governor limit for SOQL rows returned in a single execution context */\n\tpublic static final Integer SOQL_ROW_GOV_LIMIT = 50000;\n\t/** Constant representing the SOQL query syntax for returning results in ascending order */\n\tpublic static final String ASC_DIR_ORDER = 'ASC';\n\t/** Constant representing the SOQL query syntax for returning results in descending order */\n\tpublic static final String DESC_DIR_ORDER = 'DESC';\n\t/** Constant representing the default sort order to use for SOQL queries */\n\tpublic static final String DEFAULT_DIR_ORDER = ASC_DIR_ORDER;\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description This method takes an iterable string list and a text field and returns a filter string for a dyanmic soql query\n\t* @param List A list of string values to be used in creating the filter\n\t* @param String The API name of the field to be querying against in the filter\n\t* @param Boolean Determines if the relationship filter is inclusive (default) or exclusive\n\t* @return String A filter string to be used in a dynamic SOQL query\n\t*/\n\tpublic static String BuildRelationshipFilter(list<String> valueList, String queryIdField, Boolean inclusive){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildRelationshipFilter');\n\t\tset<String> valueSet = new set<String>();\n\t\tfor(Integer i=0; i<valueList.size(); i++){\n\t\t\tvalueSet.add('\\'' + String.escapeSingleQuotes(valueList[i]) + '\\'');\n\t\t}\n\t\tif (valueSet.isEmpty()){\n\t\t\tvalueSet.add('\\'\\'');\n\t\t}\n\t\tString modifier = inclusive ? '' : ' NOT';\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn queryIdField + modifier + ' IN (' + String.join(new list<String>(valueSet),',') + ')';\n\t}\n\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description This method takes an object name and returns its corresponding field map\n\t* @param String The API name of the object that needs its field map returned\n\t* @return Map A map of the given object's field API names to their corresponding Schema.SObjectField info\n\t*/\n\tprivate static map<String, Schema.SObjectField> FieldMap(String objectName){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.FieldMap');\n\t\tSchema.SObjectType sObjectType = Schema.getGlobalDescribe().get(SafeName(objectName));\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn sObjectType!=null ? new Map<String,Schema.SObjectField>(sObjectType.getdescribe().fields.getMap()) : new Map<String,Schema.SObjectField>();\t\t\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Retrieves a list of fields accessible by the running user for an SObject from the database schema \n\t* @param String SObject API name\n\t* @param Boolean Determines if text area fields should be included in the returned field list\n\t* @return List A list of fields accessible by the running user for the SObject\n\t*/\n\tpublic static list<String> FieldList(String objectAPIName, Boolean includeTextAreaFields){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.FieldList');\n\t\tset<String> fieldSet = new set<String>();\n\t\tMap<String, Schema.SobjectField> fields = FieldMap(objectAPIName);\n\t\tif (!fields.isEmpty()){\n\t\t\tfor (String s : new list<String>(fields.keyset())){\n\t\t\t\t// Ensure all fields are stored in lowercase\n\t\t\t\ts = s.toLowerCase();\n\t\t\t\tSchema.DescribeFieldResult dfr = fields.get(s).getDescribe();\n\t\t\t\tif ( Test.isRunningTest() && dfr.getName().contains('__c') && dfr.getLocalName() == dfr.getName() ){\n\t\t\t\t\t// Don't include custom fields that live outside the package in queries during testing\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( dfr.isAccessible() && (dfr.getType()!=Schema.DisplayType.TEXTAREA || includeTextAreaFields) ){\n\t\t\t\t\tif (dfr.getType()==Schema.DisplayType.CURRENCY && ConfigService.MultiCurrency ){\n\t\t\t\t\t\tfieldSet.add('ConvertCurrency('+s+')');\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tfieldSet.add(s);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn new list<String>(fieldSet);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Retrieves from a specified field list those accessible by the running user for a given SObject\n\t* @param String SObject API name\n\t* @param List A specific list of fields to be included in field list\n\t* @return List A list of fields accessible by the running user for the SObject\n\t*/\n\tpublic static list<String> FieldList(String objectAPIName, list<String> fieldList){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.FieldList');\n\t\t// Prevent null reference error in case of null field list\n\t\tif (fieldList==null || fieldList.isEmpty()){\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn null;\n\t\t}\n\t\tSet<String> accessibleFields = new Set<String>(FieldList(objectAPIName, true));\n\t\t// Return fields from given list that exist in the accessible field set \n\t\tset<String> fieldSet = new set<String>();\n\t\tfor (String field : fieldList){\n\t\t\t// Convert to lowercase\n\t\t\tfield = field.toLowerCase();\n\t\t\tif (accessibleFields.contains(field)) fieldSet.add(field);\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn new list<String>(fieldSet);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Generates a dynamic SOQL query based on a given object, field list, and other parameters\n\t* @param String SObject name\n\t* @param Set A set of fields from the given SObject that should be included within the query\n\t* @param Set A set of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param String The filter clause for the query\n\t* @param Set A set of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param String The limit clause for the query\n\t* @return String A dyanmic SOQL query\n\t*/\n\tprivate static String BuildSoqlString(String objectAPIName, set<String> objectFieldList, set<String> relationshipFields, String filter, set<String> orderByFieldSet, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildSoqlString');\n\t\tString soql = 'SELECT ' + String.escapeSingleQuotes(String.join(new list<String>(objectFieldList),','));\n\t\tif (relationshipFields!=null && !relationshipFields.isEmpty()){\n\t\t\tsoql += ', ' + String.escapeSingleQuotes(String.join(new list<String>(relationshipFields),',')); \n\t\t}\n\t\tsoql += ' FROM ' + String.escapeSingleQuotes(objectAPIName);\n\t\tif (filter!=null && filter!=''){\n\t\t\tsoql += ' WHERE ' + filter;\n\t\t}\n\t\tif (orderByFieldSet!=null && !orderByFieldSet.isEmpty()) {\n\t\t\tsoql += ' ORDER BY ' + String.escapeSingleQuotes(String.join(new list<String>(orderByFieldSet),','));\n\t\t\tif (!ASC_DIR_ORDER.equalsIgnoreCase(orderDirection) && !DESC_DIR_ORDER.equalsIgnoreCase(orderDirection)){\n\t\t\t\tsoql += ' ' + DEFAULT_DIR_ORDER;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsoql += ' ' + orderDirection.toUpperCase();\n\t\t\t}\n\t\t}\n\t\tif (limitTo!=null && limitTo>0){\n\t\t\tif (limitTo > SOQL_ROW_GOV_LIMIT){\n\t\t\t\tlimitTo = SOQL_ROW_GOV_LIMIT;\n\t\t\t}\n\t\t\tsoql += ' LIMIT ' + String.escapeSingleQuotes(String.valueOf(limitTo));\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\t\t\n\t\treturn soql;\n\t}\n\t\t\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Builds a dynamic SOQL query of all accessible fields for a given SObject\n\t* @param String SObject name\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param Boolean Determines if text area fields should be included in query, which can greatly impact processing time and heap size\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param String The limit clause for the query\n\t* @return String A dyanmic SOQL query\n\t*/\n\tprivate static String BuildQuery(String objectAPIName, list<String> relationshipFields, Boolean includeTextAreaFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildQuery');\n\t\t// Determine all accessible orderBy fields\n\t\tlist<String> orderByFieldList = FieldList(objectAPIName, orderBy);\n\t\t// Generate Dynamic SOQL Query for all accessible fields for the object\n\t\tlist<String> objectFieldList = FieldList(objectAPIName, includeTextAreaFields);\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn BuildSoqlString(objectAPIName,\n\t\t\tobjectFieldList!=null ? new Set<String>(objectFieldList) : null,\n\t\t\trelationshipFields!=null ? new Set<String>(relationshipFields) : null,\n\t\t\tfilter,\n\t\t\torderByFieldList!=null ? new Set<String>(orderByFieldList) : null,\n\t\t\torderDirection,\n\t\t\tlimitTo);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Executes a dynamic SOQL query of all accessible fields for a given SObject\n\t* @param String SObject API name\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param Boolean Determines if text area fields should be included in query, which can impact processing time and heap size\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param Integer The limit clause for the query\n\t* @return List A list of SObjects returned by the query\n\t*/\n\tpublic static list<SObject> RunQuery(String objectAPIName, list<String> relationshipFields, Boolean includeTextAreaFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.RunQuery');\n\t\t// Execute Dynamic SOQL Query\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn Database.query( BuildQuery(objectAPIName, relationshipFields, includeTextAreaFields, filter, orderBy, orderDirection, limitTo) );\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Builds a dynamic SOQL query of the accessible fields from a specified list for a given SObject\n\t* @param String SObject name\n\t* @param List The specific list of fields from the given SObject that should be included within the query, if accessible\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param String The limit clause for the query\n\t* @return String A dyanmic SOQL query\n\t*/\n\tprivate static String BuildQuery(String objectAPIName, list<String> fieldList, list<String> relationshipFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildQuery');\n\t\t// Determine all accessible orderBy fields\n\t\tlist<String> orderByFieldList = FieldList(objectAPIName, orderBy);\n\t\t// Add accessible orderBy fields to fieldList\n\t\tif (fieldList==null)\n\t\t\tfieldList = new List<String>();\n\t\tif (orderByFieldList!=null)\n\t\t\tfieldList.addAll(orderByFieldList);\n\t\t// Generate Dynamic SOQL Query for all accessible fields from the given field list and orderBy fields\n\t\tlist<String> objectFieldList = FieldList(objectAPIName, fieldList);\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn BuildSoqlString(objectAPIName,\n\t\t\tobjectFieldList!=null ? new Set<String>(objectFieldList) : null,\n\t\t\trelationshipFields!=null ? new Set<String>(relationshipFields) : null,\n\t\t\tfilter,\n\t\t\torderByFieldList!=null ? new Set<String>(orderByFieldList) : null,\n\t\t\torderDirection,\n\t\t\tlimitTo);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Executes a dynamic SOQL query of the accessible fields from a specified list for a given SObject\n\t* @param String SObject API name\n\t* @param List The specific list of fields from the given SObject that should be included within the query, if accessible\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param Integer The limit clause for the query\n\t* @return List A list of SObjects returned by the query\n\t*/\n\tpublic static list<SObject> RunQuery(String objectAPIName, list<String> fieldList, list<String> relationshipFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.RunQuery');\n\t\t// Execute Dynamic SOQL Query\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn Database.query( BuildQuery(objectAPIName, fieldList, relationshipFields, filter, orderBy, orderDirection, limitTo) );\n\t}\n  \n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Returns the type name of a given SObject.\n\t* @param SObject The SObject for which a name is to be obtained.\n\t* @return String The type name.\n\t*/\n\tpublic static String TypeName(SObject so) {\n\t\tDiagnosticsInstrumentation.Push('SObjectService.TypeName');\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn so.getSObjectType().getDescribe().getName();\n\t}\n\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Returns the unique key identifier for a given SObject\n\t* @param String API name for an SObject\n\t* @return String The unique key identifier for the SObject\n\t*/\n\tpublic static String PrefixKey(String objectName){    \n\t\tDiagnosticsInstrumentation.Push('SObjectService.KeyPrefix');\n\t\tif (objectName==null || ConfigService.ObjectByKeyPrefix.get(objectName.toLowerCase())==null){\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn '';\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn ConfigService.ObjectByKeyPrefix.get(objectName.toLowerCase());\n\t}\n\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Returns the SObject API name for a given Id/Key Prefix\n\t* @param String SObject Id/Key Prefix\n\t* @return String The SObject API name\n\t*/\n\tpublic static String ObjectName(String objectId){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.ObjectName');\n\t\tif (objectId==null || objectId.length()<3 || ConfigService.KeyPrefixByObject.get(objectId.substring(0,3))==null){\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn '';\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn SafeName(ConfigService.KeyPrefixByObject.get(objectId.substring(0,3)));\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Verifies the given field is of a particular field type\n\t* @param String The SObject API name for the field\n\t* @param String The field API name\n\t* @param Schema.DisplayType The field type to check for\n\t* @return Boolean Determines if the passed in field's type matches that of the field type argument\n\t*/\n\tpublic static Boolean VerifyFieldType(String objectAPIName, String fieldName, Schema.DisplayType fieldType) {\n\t\tDiagnosticsInstrumentation.Push('SObjectService.VerifyFieldType');\n\t\tSchema.SObjectType sObjectType = Schema.getGlobalDescribe().get(objectAPIName);\n\t\t// Return false for bad object API name\n\t\tif (sObjectType==null) {\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn false;\n\t\t}\n\t\tSchema.SObjectField field = sObjectType.getDescribe().fields.getMap().get(fieldName);\n\t\t// Return false for bad field API name\n\t\tif (field==null) {\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn false;\n\t\t}\n\t\t// Check field type against argument\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn field.getDescribe().getType()==fieldType ? true : false;\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Retrieves the proper API name for a given field API name in case person accounts is enabled\n\t* @param String API name for an SObject field\n\t* @return String The proper API name of the SObject field\n\t*/\n\tprivate static String PersonAccountAlias(String fieldName){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.PersonAccountAlias');\n\t\t// Make logic case-insensitive\n\t\tfieldName = fieldName.toLowerCase();\n\t\tString safeFieldName;\n\t\t// Unchanged\n\t\tif ( Schema.SObjectType.Account.Fields.getMap().keySet().contains(fieldName) )\n\t\t\tsafeFieldName = fieldName;\t\t\t\n\t\t// Custom Contact Fields\n\t\tfieldName = fieldName.replace('__c','__pc');\n\t\tif ( Schema.SObjectType.Account.Fields.getMap().keySet().contains(fieldName) )\n\t\t\tsafeFieldName = fieldName;\n\t\t// Standard Contact Fields\n\t\tif ( Schema.SObjectType.Account.Fields.getMap().keySet().contains('person' + fieldName) )\n\t\t\tsafeFieldName = 'person' + fieldName;\n    \tDiagnosticsInstrumentation.Pop();\n    \treturn safeFieldName;\n\t}\n\n    /**\n    * @author Scott Covert\n    * @date 12/17/2015\n    * @description Returns the safe name for a given SObject/Field\n    * @param String API name for an SObject/Field\n    * @return String The safe API name for an SObject/Field, which may include a namespace reference\n    */\n    private static String SafeName(String genericApiName){\n      \tDiagnosticsInstrumentation.Push('SObjectService.SafeName');\n      \t// Return non-custom API Names or API Names with the Namespace already prepended\n      \tif ( !genericApiName.contains('__c') || ( !String.isBlank(ConfigService.Namespace) && genericApiName.startsWith(ConfigService.Namespace) ) ){\n      \t\tDiagnosticsInstrumentation.Pop();\n      \t    return PersonAccountAlias(genericApiName)!=null ? PersonAccountAlias(genericApiName) : genericApiName.toLowerCase();\n      \t}\n      \tDiagnosticsInstrumentation.Pop();\n      \treturn PersonAccountAlias(ConfigService.Namespace + genericApiName.toLowerCase())!=null ? \n      \t\tPersonAccountAlias(ConfigService.Namespace + genericApiName.toLowerCase()) : \n      \t\tConfigService.Namespace + genericApiName.toLowerCase();\n    }\n}"], "fixing_code": ["/**\n* @author Scott Covert\n* @date 12/17/2015\n* @description This class provides generic SObject services including generating and/or executing database queries\n*/\n\npublic with sharing class SObjectService {\t\n\t/** Constant representing the max records to be retrieved by a single SOQL query */\n\tpublic static final Integer MAX_ROWS = 10000;\n\t/** Constant representing the governor limit for SOQL rows returned in a single execution context */\n\tpublic static final Integer SOQL_ROW_GOV_LIMIT = 50000;\n\t/** Constant representing the SOQL query syntax for returning results in ascending order */\n\tpublic static final String ASC_DIR_ORDER = 'ASC';\n\t/** Constant representing the SOQL query syntax for returning results in descending order */\n\tpublic static final String DESC_DIR_ORDER = 'DESC';\n\t/** Constant representing the default sort order to use for SOQL queries */\n\tpublic static final String DEFAULT_DIR_ORDER = ASC_DIR_ORDER;\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description This method takes an iterable string list and a text field and returns a filter string for a dyanmic soql query\n\t* @param List A list of string values to be used in creating the filter\n\t* @param String The API name of the field to be querying against in the filter\n\t* @param Boolean Determines if the relationship filter is inclusive (default) or exclusive\n\t* @return String A filter string to be used in a dynamic SOQL query\n\t*/\n\tpublic static String BuildRelationshipFilter(list<String> valueList, String queryIdField, Boolean inclusive){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildRelationshipFilter');\n\t\tset<String> valueSet = new set<String>();\n\t\tfor(Integer i=0; i<valueList.size(); i++){\n\t\t\tvalueSet.add('\\'' + String.escapeSingleQuotes(valueList[i]) + '\\'');\n\t\t}\n\t\tif (valueSet.isEmpty()){\n\t\t\tvalueSet.add('\\'\\'');\n\t\t}\n\t\tString modifier = inclusive ? '' : ' NOT';\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn queryIdField + modifier + ' IN (' + String.join(new list<String>(valueSet),',') + ')';\n\t}\n\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description This method takes an object name and returns its corresponding field map\n\t* @param String The API name of the object that needs its field map returned\n\t* @return Map A map of the given object's field API names to their corresponding Schema.SObjectField info\n\t*/\n\tprivate static map<String, Schema.SObjectField> FieldMap(String objectName){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.FieldMap');\n\t\tSchema.SObjectType sObjectType = Schema.getGlobalDescribe().get(SafeName(objectName));\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn sObjectType!=null ? new Map<String,Schema.SObjectField>(sObjectType.getdescribe().fields.getMap()) : new Map<String,Schema.SObjectField>();\t\t\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Retrieves a list of fields accessible by the running user for an SObject from the database schema \n\t* @param String SObject API name\n\t* @param Boolean Determines if text area fields should be included in the returned field list\n\t* @return List A list of fields accessible by the running user for the SObject\n\t*/\n\tpublic static list<String> FieldList(String objectAPIName, Boolean includeTextAreaFields){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.FieldList');\n\t\tset<String> fieldSet = new set<String>();\n\t\tMap<String, Schema.SobjectField> fields = FieldMap(objectAPIName);\n\t\tif (!fields.isEmpty()){\n\t\t\tfor (String s : new list<String>(fields.keyset())){\n\t\t\t\t// Ensure all fields are stored in lowercase\n\t\t\t\ts = s.toLowerCase();\n\t\t\t\tSchema.DescribeFieldResult dfr = fields.get(s).getDescribe();\n\t\t\t\tif ( Test.isRunningTest() && dfr.getName().contains('__c') && dfr.getLocalName() == dfr.getName() ){\n\t\t\t\t\t// Don't include custom fields that live outside the package in queries during testing\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ( dfr.isAccessible() && (dfr.getType()!=Schema.DisplayType.TEXTAREA || includeTextAreaFields) ){\n\t\t\t\t\tif (dfr.getType()==Schema.DisplayType.CURRENCY && ConfigService.MultiCurrency ){\n\t\t\t\t\t\tfieldSet.add('ConvertCurrency('+s+')');\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tfieldSet.add(s);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn new list<String>(fieldSet);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Retrieves from a specified field list those accessible by the running user for a given SObject\n\t* @param String SObject API name\n\t* @param List A specific list of fields to be included in field list\n\t* @return List A list of fields accessible by the running user for the SObject\n\t*/\n\tpublic static list<String> FieldList(String objectAPIName, list<String> fieldList){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.FieldList');\n\t\t// Prevent null reference error in case of null field list\n\t\tif (fieldList==null || fieldList.isEmpty()){\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn null;\n\t\t}\n\t\tSet<String> accessibleFields = new Set<String>(FieldList(objectAPIName, true));\n\t\t// Return fields from given list that exist in the accessible field set \n\t\tset<String> fieldSet = new set<String>();\n\t\tfor (String field : fieldList){\n\t\t\t// Convert to lowercase\n\t\t\tfield = field.toLowerCase();\n\t\t\tif (accessibleFields.contains(field)) fieldSet.add(field);\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn new list<String>(fieldSet);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Generates a dynamic SOQL query based on a given object, field list, and other parameters\n\t* @param String SObject name\n\t* @param Set A set of fields from the given SObject that should be included within the query\n\t* @param Set A set of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param String The filter clause for the query\n\t* @param Set A set of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param String The limit clause for the query\n\t* @return String A dyanmic SOQL query\n\t*/\n\tprivate static String BuildSoqlString(String objectAPIName, set<String> objectFieldList, set<String> relationshipFields, String filter, set<String> orderByFieldSet, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildSoqlString');\n\t\tString soql = 'SELECT ' + String.escapeSingleQuotes(String.join(new list<String>(objectFieldList),','));\n\t\tif (relationshipFields!=null && !relationshipFields.isEmpty()){\n\t\t\tsoql += ', ' + String.escapeSingleQuotes(String.join(new list<String>(relationshipFields),',')); \n\t\t}\n\t\tsoql += ' FROM ' + String.escapeSingleQuotes(objectAPIName);\n\t\tif (filter!=null && filter!=''){\n\t\t\tsoql += ' WHERE ' + filter;\n\t\t}\n\t\tif (orderByFieldSet!=null && !orderByFieldSet.isEmpty()) {\n\t\t\tsoql += ' ORDER BY ' + String.escapeSingleQuotes(String.join(new list<String>(orderByFieldSet),','));\n\t\t\tif (!ASC_DIR_ORDER.equalsIgnoreCase(orderDirection) && !DESC_DIR_ORDER.equalsIgnoreCase(orderDirection)){\n\t\t\t\tsoql += ' ' + DEFAULT_DIR_ORDER;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsoql += ' ' + String.escapeSingleQuotes(orderDirection.toUpperCase());\n\t\t\t}\n\t\t}\n\t\tif (limitTo!=null && limitTo>0){\n\t\t\tif (limitTo > SOQL_ROW_GOV_LIMIT){\n\t\t\t\tlimitTo = SOQL_ROW_GOV_LIMIT;\n\t\t\t}\n\t\t\tsoql += ' LIMIT ' + String.escapeSingleQuotes(String.valueOf(limitTo));\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\t\t\n\t\treturn soql;\n\t}\n\t\t\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Builds a dynamic SOQL query of all accessible fields for a given SObject\n\t* @param String SObject name\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param Boolean Determines if text area fields should be included in query, which can greatly impact processing time and heap size\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param String The limit clause for the query\n\t* @return String A dyanmic SOQL query\n\t*/\n\tprivate static String BuildQuery(String objectAPIName, list<String> relationshipFields, Boolean includeTextAreaFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildQuery');\n\t\t// Determine all accessible orderBy fields\n\t\tlist<String> orderByFieldList = FieldList(objectAPIName, orderBy);\n\t\t// Generate Dynamic SOQL Query for all accessible fields for the object\n\t\tlist<String> objectFieldList = FieldList(objectAPIName, includeTextAreaFields);\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn BuildSoqlString(objectAPIName,\n\t\t\tobjectFieldList!=null ? new Set<String>(objectFieldList) : null,\n\t\t\trelationshipFields!=null ? new Set<String>(relationshipFields) : null,\n\t\t\tfilter,\n\t\t\torderByFieldList!=null ? new Set<String>(orderByFieldList) : null,\n\t\t\torderDirection,\n\t\t\tlimitTo);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Executes a dynamic SOQL query of all accessible fields for a given SObject\n\t* @param String SObject API name\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param Boolean Determines if text area fields should be included in query, which can impact processing time and heap size\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param Integer The limit clause for the query\n\t* @return List A list of SObjects returned by the query\n\t*/\n\tpublic static list<SObject> RunQuery(String objectAPIName, list<String> relationshipFields, Boolean includeTextAreaFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.RunQuery');\n\t\t// Execute Dynamic SOQL Query\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn Database.query( BuildQuery(objectAPIName, relationshipFields, includeTextAreaFields, filter, orderBy, orderDirection, limitTo) );\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Builds a dynamic SOQL query of the accessible fields from a specified list for a given SObject\n\t* @param String SObject name\n\t* @param List The specific list of fields from the given SObject that should be included within the query, if accessible\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param String The limit clause for the query\n\t* @return String A dyanmic SOQL query\n\t*/\n\tprivate static String BuildQuery(String objectAPIName, list<String> fieldList, list<String> relationshipFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.BuildQuery');\n\t\t// Determine all accessible orderBy fields\n\t\tlist<String> orderByFieldList = FieldList(objectAPIName, orderBy);\n\t\t// Add accessible orderBy fields to fieldList\n\t\tif (fieldList==null)\n\t\t\tfieldList = new List<String>();\n\t\tif (orderByFieldList!=null)\n\t\t\tfieldList.addAll(orderByFieldList);\n\t\t// Generate Dynamic SOQL Query for all accessible fields from the given field list and orderBy fields\n\t\tlist<String> objectFieldList = FieldList(objectAPIName, fieldList);\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn BuildSoqlString(objectAPIName,\n\t\t\tobjectFieldList!=null ? new Set<String>(objectFieldList) : null,\n\t\t\trelationshipFields!=null ? new Set<String>(relationshipFields) : null,\n\t\t\tfilter,\n\t\t\torderByFieldList!=null ? new Set<String>(orderByFieldList) : null,\n\t\t\torderDirection,\n\t\t\tlimitTo);\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Executes a dynamic SOQL query of the accessible fields from a specified list for a given SObject\n\t* @param String SObject API name\n\t* @param List The specific list of fields from the given SObject that should be included within the query, if accessible\n\t* @param List A list of any relationship fields, such as those from parent records, that should be included in the query\n\t* @param String The filter clause for the query\n\t* @param List A list of fields to be used in the order by clause for the query\n\t* @param String The direction (ascending or descending) to use when ordering values\n\t* @param Integer The limit clause for the query\n\t* @return List A list of SObjects returned by the query\n\t*/\n\tpublic static list<SObject> RunQuery(String objectAPIName, list<String> fieldList, list<String> relationshipFields, String filter, list<String> orderBy, String orderDirection, Integer limitTo){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.RunQuery');\n\t\t// Execute Dynamic SOQL Query\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn Database.query( BuildQuery(objectAPIName, fieldList, relationshipFields, filter, orderBy, orderDirection, limitTo) );\n\t}\n  \n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Returns the type name of a given SObject.\n\t* @param SObject The SObject for which a name is to be obtained.\n\t* @return String The type name.\n\t*/\n\tpublic static String TypeName(SObject so) {\n\t\tDiagnosticsInstrumentation.Push('SObjectService.TypeName');\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn so.getSObjectType().getDescribe().getName();\n\t}\n\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Returns the unique key identifier for a given SObject\n\t* @param String API name for an SObject\n\t* @return String The unique key identifier for the SObject\n\t*/\n\tpublic static String PrefixKey(String objectName){    \n\t\tDiagnosticsInstrumentation.Push('SObjectService.KeyPrefix');\n\t\tif (objectName==null || ConfigService.ObjectByKeyPrefix.get(objectName.toLowerCase())==null){\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn '';\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn ConfigService.ObjectByKeyPrefix.get(objectName.toLowerCase());\n\t}\n\n  \t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Returns the SObject API name for a given Id/Key Prefix\n\t* @param String SObject Id/Key Prefix\n\t* @return String The SObject API name\n\t*/\n\tpublic static String ObjectName(String objectId){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.ObjectName');\n\t\tif (objectId==null || objectId.length()<3 || ConfigService.KeyPrefixByObject.get(objectId.substring(0,3))==null){\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn '';\n\t\t}\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn SafeName(ConfigService.KeyPrefixByObject.get(objectId.substring(0,3)));\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Verifies the given field is of a particular field type\n\t* @param String The SObject API name for the field\n\t* @param String The field API name\n\t* @param Schema.DisplayType The field type to check for\n\t* @return Boolean Determines if the passed in field's type matches that of the field type argument\n\t*/\n\tpublic static Boolean VerifyFieldType(String objectAPIName, String fieldName, Schema.DisplayType fieldType) {\n\t\tDiagnosticsInstrumentation.Push('SObjectService.VerifyFieldType');\n\t\tSchema.SObjectType sObjectType = Schema.getGlobalDescribe().get(objectAPIName);\n\t\t// Return false for bad object API name\n\t\tif (sObjectType==null) {\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn false;\n\t\t}\n\t\tSchema.SObjectField field = sObjectType.getDescribe().fields.getMap().get(fieldName);\n\t\t// Return false for bad field API name\n\t\tif (field==null) {\n\t\t\tDiagnosticsInstrumentation.Pop();\n\t\t\treturn false;\n\t\t}\n\t\t// Check field type against argument\n\t\tDiagnosticsInstrumentation.Pop();\n\t\treturn field.getDescribe().getType()==fieldType ? true : false;\n\t}\n\n\t/**\n\t* @author Scott Covert\n\t* @date 12/17/2015\n\t* @description Retrieves the proper API name for a given field API name in case person accounts is enabled\n\t* @param String API name for an SObject field\n\t* @return String The proper API name of the SObject field\n\t*/\n\tprivate static String PersonAccountAlias(String fieldName){\n\t\tDiagnosticsInstrumentation.Push('SObjectService.PersonAccountAlias');\n\t\t// Make logic case-insensitive\n\t\tfieldName = fieldName.toLowerCase();\n\t\tString safeFieldName;\n\t\t// Unchanged\n\t\tif ( Schema.SObjectType.Account.Fields.getMap().keySet().contains(fieldName) )\n\t\t\tsafeFieldName = fieldName;\t\t\t\n\t\t// Custom Contact Fields\n\t\tfieldName = fieldName.replace('__c','__pc');\n\t\tif ( Schema.SObjectType.Account.Fields.getMap().keySet().contains(fieldName) )\n\t\t\tsafeFieldName = fieldName;\n\t\t// Standard Contact Fields\n\t\tif ( Schema.SObjectType.Account.Fields.getMap().keySet().contains('person' + fieldName) )\n\t\t\tsafeFieldName = 'person' + fieldName;\n    \tDiagnosticsInstrumentation.Pop();\n    \treturn safeFieldName;\n\t}\n\n    /**\n    * @author Scott Covert\n    * @date 12/17/2015\n    * @description Returns the safe name for a given SObject/Field\n    * @param String API name for an SObject/Field\n    * @return String The safe API name for an SObject/Field, which may include a namespace reference\n    */\n    private static String SafeName(String genericApiName){\n      \tDiagnosticsInstrumentation.Push('SObjectService.SafeName');\n      \t// Return non-custom API Names or API Names with the Namespace already prepended\n      \tif ( !genericApiName.contains('__c') || ( !String.isBlank(ConfigService.Namespace) && genericApiName.startsWith(ConfigService.Namespace) ) ){\n      \t\tDiagnosticsInstrumentation.Pop();\n      \t    return PersonAccountAlias(genericApiName)!=null ? PersonAccountAlias(genericApiName) : genericApiName.toLowerCase();\n      \t}\n      \tDiagnosticsInstrumentation.Pop();\n      \treturn PersonAccountAlias(ConfigService.Namespace + genericApiName.toLowerCase())!=null ? \n      \t\tPersonAccountAlias(ConfigService.Namespace + genericApiName.toLowerCase()) : \n      \t\tConfigService.Namespace + genericApiName.toLowerCase();\n    }\n}"], "filenames": ["src/classes/SObjectService.cls"], "buggy_code_start_loc": [147], "buggy_code_end_loc": [148], "fixing_code_start_loc": [147], "fixing_code_end_loc": [148], "type": "CWE-74", "message": "A vulnerability was found in Centralized-Salesforce-Dev-Framework. It has been declared as problematic. Affected by this vulnerability is the function SObjectService of the file src/classes/SObjectService.cls of the component SOQL Handler. The manipulation of the argument orderDirection leads to injection. The name of the patch is db03ac5b8a9d830095991b529c067a030a0ccf7b. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217195.", "other": {"cve": {"id": "CVE-2016-15007", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-02T19:15:10.387", "lastModified": "2023-01-09T19:04:24.293", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Centralized-Salesforce-Dev-Framework. It has been declared as problematic. Affected by this vulnerability is the function SObjectService of the file src/classes/SObjectService.cls of the component SOQL Handler. The manipulation of the argument orderDirection leads to injection. The name of the patch is db03ac5b8a9d830095991b529c067a030a0ccf7b. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217195."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:centralized_salesforce_development_framework_project:centralized_salesforce_development_framework:*:*:*:*:*:*:*:*", "versionEndExcluding": "2016-06-20", "matchCriteriaId": "504935B1-E443-47CF-8E73-45BAF13D607A"}]}]}], "references": [{"url": "https://github.com/scottbcovert/Centralized-Salesforce-Dev-Framework/commit/db03ac5b8a9d830095991b529c067a030a0ccf7b", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217195", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217195", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/scottbcovert/Centralized-Salesforce-Dev-Framework/commit/db03ac5b8a9d830095991b529c067a030a0ccf7b"}}