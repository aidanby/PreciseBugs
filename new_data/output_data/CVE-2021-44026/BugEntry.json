{"buggy_code": ["<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page and page size (#6103)\n        $source->set_page(1);\n        $source->set_pagesize(count($ids));\n\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/vcard; charset=' . RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Provide addressbook functionality and GUI objects                   |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n$SEARCH_MODS_DEFAULT = array('name'=>1, 'firstname'=>1, 'surname'=>1, 'email'=>1, '*'=>1);\n\n// general definition of contact coltypes\n$CONTACT_COLTYPES = array(\n    'name'         => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('name'), 'category' => 'main'),\n    'firstname'    => array('type' => 'text', 'size' => 19, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('firstname'), 'category' => 'main'),\n    'surname'      => array('type' => 'text', 'size' => 19, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('surname'), 'category' => 'main'),\n    'email'        => array('type' => 'text', 'size' => 40, 'maxlength' => 254, 'label' => $RCMAIL->gettext('email'), 'subtypes' => array('home','work','other'), 'category' => 'main'),\n    'middlename'   => array('type' => 'text', 'size' => 19, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('middlename'), 'category' => 'main'),\n    'prefix'       => array('type' => 'text', 'size' => 8,  'maxlength' => 20, 'limit' => 1, 'label' => $RCMAIL->gettext('nameprefix'), 'category' => 'main'),\n    'suffix'       => array('type' => 'text', 'size' => 8,  'maxlength' => 20, 'limit' => 1, 'label' => $RCMAIL->gettext('namesuffix'), 'category' => 'main'),\n    'nickname'     => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('nickname'), 'category' => 'main'),\n    'jobtitle'     => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('jobtitle'), 'category' => 'main'),\n    'organization' => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('organization'), 'category' => 'main'),\n    'department'   => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('department'), 'category' => 'main'),\n    'gender'       => array('type' => 'select', 'limit' => 1, 'label' => $RCMAIL->gettext('gender'), 'options' => array('male' => $RCMAIL->gettext('male'), 'female' => $RCMAIL->gettext('female')), 'category' => 'personal'),\n    'maidenname'   => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('maidenname'), 'category' => 'personal'),\n    'phone'        => array('type' => 'text', 'size' => 40, 'maxlength' => 20, 'label' => $RCMAIL->gettext('phone'), 'subtypes' => array('home','home2','work','work2','mobile','main','homefax','workfax','car','pager','video','assistant','other'), 'category' => 'main'),\n    'address'      => array('type' => 'composite', 'label' => $RCMAIL->gettext('address'), 'subtypes' => array('home','work','other'), 'childs' => array(\n        'street'     => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'label' => $RCMAIL->gettext('street'), 'category' => 'main'),\n        'locality'   => array('type' => 'text', 'size' => 28, 'maxlength' => 50, 'label' => $RCMAIL->gettext('locality'), 'category' => 'main'),\n        'zipcode'    => array('type' => 'text', 'size' => 8,  'maxlength' => 15, 'label' => $RCMAIL->gettext('zipcode'), 'category' => 'main'),\n        'region'     => array('type' => 'text', 'size' => 12, 'maxlength' => 50, 'label' => $RCMAIL->gettext('region'), 'category' => 'main'),\n        'country'    => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'label' => $RCMAIL->gettext('country'), 'category' => 'main'),\n        ), 'category' => 'main'),\n    'birthday'     => array('type' => 'date', 'size' => 12, 'maxlength' => 16, 'label' => $RCMAIL->gettext('birthday'), 'limit' => 1, 'render_func' => 'rcmail_format_date_col', 'category' => 'personal'),\n    'anniversary'  => array('type' => 'date', 'size' => 12, 'maxlength' => 16, 'label' => $RCMAIL->gettext('anniversary'), 'limit' => 1, 'render_func' => 'rcmail_format_date_col', 'category' => 'personal'),\n    'website'      => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'label' => $RCMAIL->gettext('website'), 'subtypes' => array('homepage','work','blog','profile','other'), 'category' => 'main'),\n    'im'           => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'label' => $RCMAIL->gettext('instantmessenger'), 'subtypes' => array('aim','icq','msn','yahoo','jabber','skype','other'), 'category' => 'main'),\n    'notes'        => array('type' => 'textarea', 'size' => 40, 'rows' => 15, 'maxlength' => 500, 'label' => $RCMAIL->gettext('notes'), 'limit' => 1),\n    'photo'        => array('type' => 'image', 'limit' => 1, 'category' => 'main'),\n    'assistant'    => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('assistant'), 'category' => 'personal'),\n    'manager'      => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('manager'), 'category' => 'personal'),\n    'spouse'       => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('spouse'), 'category' => 'personal'),\n    // TODO: define fields for vcards like GEO, KEY\n);\n\n$PAGE_SIZE = $RCMAIL->config->get('addressbook_pagesize', $RCMAIL->config->get('pagesize', 50));\n\n// Addressbook UI\nif (!$RCMAIL->action && !$OUTPUT->ajax_call) {\n    // add list of address sources to client env\n    $js_list = $RCMAIL->get_address_sources();\n\n    // count all/writeable sources\n    $writeable = 0;\n    $count     = 0;\n\n    foreach ($js_list as $sid => $s) {\n        $count++;\n        if (!$s['readonly']) {\n            $writeable++;\n        }\n        // unset hidden sources\n        if ($s['hidden']) {\n            unset($js_list[$sid]);\n        }\n    }\n\n    $OUTPUT->set_env('display_next', (bool) $RCMAIL->config->get('display_next'));\n    $OUTPUT->set_env('search_mods', $RCMAIL->config->get('addressbook_search_mods', $SEARCH_MODS_DEFAULT));\n    $OUTPUT->set_env('address_sources', $js_list);\n    $OUTPUT->set_env('writable_source', $writeable);\n    $OUTPUT->set_env('contact_move_enabled', $writeable > 1);\n    $OUTPUT->set_env('contact_copy_enabled', $writeable > 1 || ($writeable == 1 && count($js_list) > 1));\n\n    $OUTPUT->set_pagetitle($RCMAIL->gettext('contacts'));\n\n    $_SESSION['addressbooks_count'] = $count;\n    $_SESSION['addressbooks_count_writeable'] = $writeable;\n\n    // select address book\n    $source = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n\n    // use first directory by default\n    if (!strlen($source) || !isset($js_list[$source])) {\n        $source = $RCMAIL->config->get('default_addressbook');\n        if (!strlen($source) || !isset($js_list[$source])) {\n            $source = strval(key($js_list));\n        }\n    }\n\n    $CONTACTS = rcmail_contact_source($source, true);\n}\n\n// remove undo information...\nif ($undo = $_SESSION['contact_undo']) {\n    // ...after timeout\n    $undo_time = $RCMAIL->config->get('undo_timeout', 0);\n    if ($undo['ts'] < time() - $undo_time)\n        $RCMAIL->session->remove('contact_undo');\n}\n\n// register UI objects\n$OUTPUT->add_handlers(array(\n    'directorylist'       => 'rcmail_directory_list',\n    'savedsearchlist'     => 'rcmail_savedsearch_list',\n    'addresslist'         => 'rcmail_contacts_list',\n    'addresslisttitle'    => 'rcmail_contacts_list_title',\n    'recordscountdisplay' => 'rcmail_rowcount_display',\n    'searchform'          => array($OUTPUT, 'search_form')\n));\n\n// register action aliases\n$RCMAIL->register_action_map(array(\n    'add'              => 'edit.inc',\n    'group-create'     => 'groups.inc',\n    'group-rename'     => 'groups.inc',\n    'group-delete'     => 'groups.inc',\n    'group-addmembers' => 'groups.inc',\n    'group-delmembers' => 'groups.inc',\n    'search-create'    => 'search.inc',\n    'search-delete'    => 'search.inc',\n));\n\n// Disable qr-code if php-gd or Endroid's QrCode is not installed\nif (!$OUTPUT->ajax_call) {\n    $OUTPUT->set_env('qrcode', function_exists('imagecreate') && class_exists('Endroid\\QrCode\\QrCode'));\n    $OUTPUT->add_label('qrcode');\n}\n\n\n// instantiate a contacts object according to the given source\nfunction rcmail_contact_source($source=null, $init_env=false, $writable=false)\n{\n    global $RCMAIL, $OUTPUT, $CONTACT_COLTYPES, $PAGE_SIZE;\n\n    if (!strlen($source)) {\n        $source = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n    }\n\n    // Get object\n    $CONTACTS = $RCMAIL->get_address_book($source, $writable);\n    $CONTACTS->set_pagesize($PAGE_SIZE);\n\n    // set list properties and session vars\n    if (!empty($_GET['_page']))\n        $CONTACTS->set_page(($_SESSION['page'] = intval($_GET['_page'])));\n    else\n        $CONTACTS->set_page(isset($_SESSION['page']) ? $_SESSION['page'] : 1);\n\n    if ($group = rcube_utils::get_input_value('_gid', rcube_utils::INPUT_GP)) {\n        $CONTACTS->set_group($group);\n    }\n\n    if (!$init_env) {\n        return $CONTACTS;\n    }\n\n    $OUTPUT->set_env('readonly', $CONTACTS->readonly);\n    $OUTPUT->set_env('source', (string) $source);\n    $OUTPUT->set_env('group', $group);\n\n    // reduce/extend $CONTACT_COLTYPES with specification from the current $CONTACT object\n    if (is_array($CONTACTS->coltypes)) {\n        // remove cols not listed by the backend class\n        $contact_cols = $CONTACTS->coltypes[0] ? array_flip($CONTACTS->coltypes) : $CONTACTS->coltypes;\n        $CONTACT_COLTYPES = array_intersect_key($CONTACT_COLTYPES, $contact_cols);\n        // add associative coltypes definition\n        if (!$CONTACTS->coltypes[0]) {\n            foreach ($CONTACTS->coltypes as $col => $colprop) {\n                if (is_array($colprop['childs'])) {\n                    foreach ($colprop['childs'] as $childcol => $childprop)\n                        $colprop['childs'][$childcol] = array_merge((array)$CONTACT_COLTYPES[$col]['childs'][$childcol], $childprop);\n                }\n                $CONTACT_COLTYPES[$col] = $CONTACT_COLTYPES[$col] ? array_merge($CONTACT_COLTYPES[$col], $colprop) : $colprop;\n            }\n        }\n    }\n\n    $OUTPUT->set_env('photocol', is_array($CONTACT_COLTYPES['photo']));\n\n    return $CONTACTS;\n}\n\n\nfunction rcmail_set_sourcename($abook)\n{\n    global $OUTPUT, $RCMAIL;\n\n    // get address book name (for display)\n    if ($abook && $_SESSION['addressbooks_count'] > 1) {\n        $name = $abook->get_name();\n        if (!$name) {\n            $name = $RCMAIL->gettext('personaladrbook');\n        }\n        $OUTPUT->set_env('sourcename', html_entity_decode($name, ENT_COMPAT, 'UTF-8'));\n    }\n}\n\n\nfunction rcmail_directory_list($attrib)\n{\n    global $RCMAIL, $OUTPUT;\n\n    if (!$attrib['id'])\n        $attrib['id'] = 'rcmdirectorylist';\n\n    $out = '';\n    $jsdata = array();\n\n    $line_templ = html::tag('li', array(\n        'id' => 'rcmli%s', 'class' => '%s', 'noclose' => true),\n        html::a(array('href' => '%s',\n            'rel' => '%s',\n            'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".command('list','%s',this)\"), '%s'));\n\n    $sources = (array) $OUTPUT->get_env('address_sources');\n    reset($sources);\n\n    // currently selected source\n    $current = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n\n    foreach ($sources as $j => $source) {\n        $id = strval(strlen($source['id']) ? $source['id'] : $j);\n        $js_id = rcube::JQ($id);\n\n        // set class name(s)\n        $class_name = 'addressbook';\n        if ($current === $id)\n            $class_name .= ' selected';\n        if ($source['readonly'])\n            $class_name .= ' readonly';\n        if ($source['class_name'])\n            $class_name .= ' ' . $source['class_name'];\n\n        $name = $source['name'] ?: $id;\n        $out .= sprintf($line_templ,\n            rcube_utils::html_identifier($id, true),\n            $class_name,\n            rcube::Q($RCMAIL->url(array('_source' => $id))),\n            $source['id'],\n            $js_id, $name);\n\n        $groupdata = array('out' => $out, 'jsdata' => $jsdata, 'source' => $id);\n        if ($source['groups'])\n            $groupdata = rcmail_contact_groups($groupdata);\n        $jsdata = $groupdata['jsdata'];\n        $out = $groupdata['out'];\n        $out .= '</li>';\n    }\n\n    $OUTPUT->set_env('contactgroups', $jsdata);\n    $OUTPUT->set_env('collapsed_abooks', (string)$RCMAIL->config->get('collapsed_abooks',''));\n    $OUTPUT->add_gui_object('folderlist', $attrib['id']);\n    $OUTPUT->include_script('treelist.js');\n\n    // add some labels to client\n    $OUTPUT->add_label('deletegroupconfirm', 'groupdeleting', 'addingmember', 'removingmember',\n        'newgroup', 'grouprename', 'searchsave', 'namex', 'save', 'import', 'importcontacts',\n        'advsearch', 'search'\n    );\n\n    return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n\nfunction rcmail_savedsearch_list($attrib)\n{\n    global $RCMAIL, $OUTPUT;\n\n    if (!$attrib['id'])\n        $attrib['id'] = 'rcmsavedsearchlist';\n\n    $out = '';\n    $line_templ = html::tag('li', array(\n        'id' => 'rcmli%s', 'class' => '%s'),\n        html::a(array('href' => '#', 'rel' => 'S%s',\n            'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".command('listsearch', '%s', this)\"), '%s'));\n\n    // Saved searches\n    $sources = $RCMAIL->user->list_searches(rcube_user::SEARCH_ADDRESSBOOK);\n    foreach ($sources as $source) {\n        $id    = $source['id'];\n        $js_id = rcube::JQ($id);\n\n        // set class name(s)\n        $classes = array('contactsearch');\n        if (!empty($source['class_name']))\n            $classes[] = $source['class_name'];\n\n        $out .= sprintf($line_templ,\n            rcube_utils::html_identifier('S'.$id, true),\n            join(' ', $classes),\n            $id,\n            $js_id, rcube::Q($source['name'] ?: $id)\n        );\n    }\n\n    $OUTPUT->add_gui_object('savedsearchlist', $attrib['id']);\n\n    return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n\nfunction rcmail_contact_groups($args)\n{\n    global $RCMAIL;\n\n    $groups_html = '';\n    $groups = $RCMAIL->get_address_book($args['source'])->list_groups();\n\n    if (!empty($groups)) {\n        $line_templ = html::tag('li', array(\n            'id' => 'rcmli%s', 'class' => 'contactgroup'),\n            html::a(array('href' => '#',\n                'rel' => '%s:%s',\n                'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".command('listgroup',{'source':'%s','id':'%s'},this)\"), '%s'));\n\n        // append collapse/expand toggle and open a new <ul>\n        $is_collapsed = strpos($RCMAIL->config->get('collapsed_abooks',''), '&'.rawurlencode($args['source']).'&') !== false;\n        $args['out'] .= html::div('treetoggle ' . ($is_collapsed ? 'collapsed' : 'expanded'), '&nbsp;');\n\n        foreach ($groups as $group) {\n            $groups_html .= sprintf($line_templ,\n                rcube_utils::html_identifier('G' . $args['source'] . $group['ID'], true),\n                $args['source'], $group['ID'],\n                $args['source'], $group['ID'], rcube::Q($group['name'])\n            );\n            $args['jsdata']['G'.$args['source'].$group['ID']] = array(\n                'source' => $args['source'], 'id' => $group['ID'],\n                'name' => $group['name'], 'type' => 'group');\n        }\n    }\n\n    $args['out'] .= html::tag('ul',\n      array('class' => 'groups', 'style' => ($is_collapsed || empty($groups) ? \"display:none;\" : null)),\n      $groups_html);\n\n    return $args;\n}\n\n\n// return the contacts list as HTML table\nfunction rcmail_contacts_list($attrib)\n{\n    global $RCMAIL, $CONTACTS, $OUTPUT;\n\n    // define list of cols to be displayed\n    $a_show_cols = array('name','action');\n\n    // add id to message list table if not specified\n    if (!strlen($attrib['id']))\n        $attrib['id'] = 'rcmAddressList';\n\n    // create XHTML table\n    $out = $RCMAIL->table_output($attrib, array(), $a_show_cols, $CONTACTS->primary_key);\n\n    // set client env\n    $OUTPUT->add_gui_object('contactslist', $attrib['id']);\n    $OUTPUT->set_env('current_page', (int)$CONTACTS->list_page);\n    $OUTPUT->include_script('list.js');\n\n    // add some labels to client\n    $OUTPUT->add_label('deletecontactconfirm', 'copyingcontact', 'movingcontact', 'contactdeleting');\n\n    return $out;\n}\n\n\nfunction rcmail_js_contacts_list($result, $prefix='')\n{\n    global $OUTPUT, $RCMAIL;\n\n    if (empty($result) || $result->count == 0) {\n        return;\n    }\n\n    // define list of cols to be displayed\n    $a_show_cols = array('name','action');\n\n    while ($row = $result->next()) {\n        $emails       = rcube_addressbook::get_col_values('email', $row, true);\n        $row['CID']   = $row['ID'];\n        $row['email'] = reset($emails);\n\n        $source_id  = $OUTPUT->get_env('source');\n        $a_row_cols = array();\n        $classes    = array($row['_type'] ?: 'person');\n\n        // build contact ID with source ID\n        if (isset($row['sourceid'])) {\n            $row['ID'] = $row['ID'].'-'.$row['sourceid'];\n            $source_id = $row['sourceid'];\n        }\n\n        // format each col\n        foreach ($a_show_cols as $col) {\n            $val = '';\n            switch ($col) {\n                case 'name':\n                    $val = rcube::Q(rcube_addressbook::compose_list_name($row));\n                    break;\n\n                case 'action':\n                    if ($row['_type'] == 'group') {\n                        $val = html::a(array(\n                            'href'    => '#list',\n                            'rel'     => $row['ID'],\n                            'title'   => $RCMAIL->gettext('listgroup'),\n                            'onclick' => sprintf(\"return %s.command('pushgroup',{'source':'%s','id':'%s'},this,event)\", rcmail_output::JS_OBJECT_NAME, $source_id, $row['CID']),\n                            'class'   => 'pushgroup',\n                            'data-action-link' => true,\n                        ), '&raquo;');\n                    }\n                    else\n                        $val = '';\n                    break;\n\n                default:\n                    $val = rcube::Q($row[$col]);\n                    break;\n            }\n\n            $a_row_cols[$col] = $val;\n        }\n\n        if ($row['readonly'])\n            $classes[] = 'readonly';\n\n        $OUTPUT->command($prefix.'add_contact_row', $row['ID'], $a_row_cols, join(' ', $classes), array_intersect_key($row, array('ID'=>1,'readonly'=>1,'_type'=>1,'email'=>1,'name'=>1)));\n    }\n}\n\n\nfunction rcmail_contacts_list_title($attrib)\n{\n    global $OUTPUT, $RCMAIL;\n\n    $attrib += array('label' => 'contacts', 'id' => 'rcmabooklisttitle', 'tag' => 'span');\n    unset($attrib['name']);\n\n    $OUTPUT->add_gui_object('addresslist_title', $attrib['id']);\n    $OUTPUT->add_label('contacts','uponelevel');\n\n    return html::tag($attrib['tag'], $attrib, $RCMAIL->gettext($attrib['label']), html::$common_attrib);\n}\n\n\nfunction rcmail_rowcount_display($attrib)\n{\n    global $RCMAIL;\n\n    if (!$attrib['id'])\n        $attrib['id'] = 'rcmcountdisplay';\n\n    $RCMAIL->output->add_gui_object('countdisplay', $attrib['id']);\n\n    if ($attrib['label'])\n      $_SESSION['contactcountdisplay'] = $attrib['label'];\n\n    return html::span($attrib, $RCMAIL->gettext('loading'));\n}\n\n\nfunction rcmail_get_rowcount_text($result=null)\n{\n    global $RCMAIL, $CONTACTS, $PAGE_SIZE;\n\n    // read nr of contacts\n    if (!$result) {\n        $result = $CONTACTS->get_result();\n    }\n\n    if ($result->count == 0)\n        $out = $RCMAIL->gettext('nocontactsfound');\n    else\n        $out = $RCMAIL->gettext(array(\n            'name'  => $_SESSION['contactcountdisplay'] ?: 'contactsfromto',\n            'vars'  => array(\n            'from'  => $result->first + 1,\n            'to'    => min($result->count, $result->first + $PAGE_SIZE),\n            'count' => $result->count)\n        ));\n\n    return $out;\n}\n\n\nfunction rcmail_get_type_label($type)\n{\n    global $RCMAIL;\n\n    $label = 'type'.$type;\n    if ($RCMAIL->text_exists($label, '*', $domain))\n        return $RCMAIL->gettext($label, $domain);\n    else if (preg_match('/\\w+(\\d+)$/', $label, $m)\n            && ($label = preg_replace('/(\\d+)$/', '', $label))\n            && $RCMAIL->text_exists($label, '*', $domain))\n        return $RCMAIL->gettext($label, $domain) . ' ' . $m[1];\n\n    return ucfirst($type);\n}\n\n\nfunction rcmail_contact_form($form, $record, $attrib = null)\n{\n    global $RCMAIL;\n\n    // group fields\n    $head_fields = array(\n        'source'       => array('source'),\n        'names'        => array('prefix','firstname','middlename','surname','suffix'),\n        'displayname'  => array('name'),\n        'nickname'     => array('nickname'),\n        'organization' => array('organization'),\n        'department'   => array('department'),\n        'jobtitle'     => array('jobtitle'),\n    );\n\n    // Allow plugins to modify contact form content\n    $plugin = $RCMAIL->plugins->exec_hook('contact_form', array(\n        'form' => $form, 'record' => $record, 'head_fields' => $head_fields));\n\n    $form        = $plugin['form'];\n    $record      = $plugin['record'];\n    $head_fields = $plugin['head_fields'];\n    $edit_mode   = $RCMAIL->action != 'show' && $RCMAIL->action != 'print';\n    $compact     = rcube_utils::get_boolean($attrib['compact-form']);\n    $use_labels  = rcube_utils::get_boolean($attrib['use-labels']);\n    $with_source = rcube_utils::get_boolean($attrib['with-source']);\n    $out         = '';\n\n    if ($attrib['deleteicon']) {\n        $del_button = html::img(array('src' => $RCMAIL->output->get_skin_file($attrib['deleteicon']), 'alt' => $RCMAIL->gettext('delete')));\n    }\n    else {\n        $del_button = html::span('inner', $RCMAIL->gettext('delete'));\n    }\n\n    unset($attrib['deleteicon']);\n\n    // get default coltypes\n    $coltypes = $GLOBALS['CONTACT_COLTYPES'];\n    $coltype_labels = array();\n\n    foreach ($coltypes as $col => $prop) {\n        if ($prop['subtypes']) {\n            $subtype_names = array_map('rcmail_get_type_label', $prop['subtypes']);\n            $select_subtype = new html_select(array('name' => '_subtype_'.$col.'[]', 'class' => 'contactselectsubtype custom-select', 'title' => $prop['label'] . ' ' . $RCMAIL->gettext('type')));\n            $select_subtype->add($subtype_names, $prop['subtypes']);\n            $coltypes[$col]['subtypes_select'] = $select_subtype->show();\n        }\n        if ($prop['childs']) {\n            foreach ($prop['childs'] as $childcol => $cp)\n                $coltype_labels[$childcol] = array('label' => $cp['label']);\n        }\n    }\n\n    foreach ($form as $section => $fieldset) {\n        // skip empty sections\n        if (empty($fieldset['content'])) {\n            continue;\n        }\n\n        $select_add = new html_select(array('class' => 'addfieldmenu', 'rel' => $section, 'data-compact' => $compact ? \"true\" : null));\n        $select_add->add($RCMAIL->gettext('addfield'), '');\n\n        // render head section with name fields (not a regular list of rows)\n        if ($section == 'head') {\n            $content = '';\n\n            // unset display name if it is composed from name parts\n            if ($record['name'] == rcube_addressbook::compose_display_name(array('name' => '') + (array)$record)) {\n                unset($record['name']);\n            }\n\n            foreach ($head_fields as $blockname => $colnames) {\n                $fields     = '';\n                $block_attr = array('class' => $blockname  . (count($colnames) == 1 ? ' row' : ''));\n\n                foreach ($colnames as $col) {\n                    if ($col == 'source') {\n                        if (!$with_source || !($source = $RCMAIL->output->get_env('sourcename'))) {\n                            continue;\n                        }\n\n                        if (!$edit_mode) {\n                            $record['source'] = $RCMAIL->gettext('addressbook') . ': ' . $source;\n                        }\n                        else if ($RCMAIL->action == 'add') {\n                            $record['source'] = $source;\n                        }\n                        else {\n                            continue;\n                        }\n                    }\n                    // skip cols unknown to the backend\n                    else if (!$coltypes[$col]) {\n                        continue;\n                    }\n\n                    // skip cols not listed in the form definition\n                    if (is_array($fieldset['content']) && !in_array($col, array_keys($fieldset['content']))) {\n                        continue;\n                    }\n\n                    // only string values are expected here\n                    if (is_array($record[$col])) {\n                        $record[$col] = join(' ', $record[$col]);\n                    }\n\n                    if (!$edit_mode) {\n                        if (!empty($record[$col])) {\n                            $fields .= html::span('namefield ' . $col, rcube::Q($record[$col])) . ' ';\n                        }\n                    }\n                    else {\n                        $colprop = (array)$fieldset['content'][$col] + (array)$coltypes[$col];\n                        $visible = true;\n\n                        if (empty($colprop['id'])) {\n                            $colprop['id'] = 'ff_' . $col;\n                        }\n\n                        if (empty($record[$col]) && !$colprop['visible']) {\n                            $visible          = false;\n                            $colprop['style'] = $use_labels ? null : 'display:none';\n                            $select_add->add($colprop['label'], $col);\n                        }\n\n                        if ($col == 'source') {\n                            $input = rcmail_source_selector(array('id' => $colprop['id']));\n                        }\n                        else {\n                            $input = rcube_output::get_edit_field($col, $record[$col], $colprop, $colprop['type']);\n                        }\n\n                        if ($use_labels) {\n                            $_content = html::label($colprop['id'], rcube::Q($colprop['label'])) . html::div(null, $input);\n                            if (count($colnames) > 1) {\n                                $fields .= html::div(array('class' => 'row', 'style' => $visible ? null : 'display:none'), $_content);\n                            }\n                            else {\n                                $fields .= $_content;\n                                $block_attr['style'] = $visible ? null : 'display:none';\n                            }\n                        }\n                        else {\n                            $fields .= $input;\n                        }\n                    }\n                }\n\n                if ($fields) {\n                    $content .= html::div($block_attr, $fields);\n                }\n            }\n\n            if ($edit_mode) {\n                $content .= html::p('addfield', $select_add->show(null));\n            }\n\n            $legend = !empty($fieldset['name']) ? html::tag('legend', null, rcube::Q($fieldset['name'])) : '';\n            $out   .= html::tag('fieldset', $attrib, $legend . $content, html::$common_attrib) .\"\\n\";\n            continue;\n        }\n\n        $content = '';\n        if (is_array($fieldset['content'])) {\n            foreach ($fieldset['content'] as $col => $colprop) {\n                // remove subtype part of col name\n                list($field, $subtype) = explode(':', $col);\n                if (!$subtype) $subtype = 'home';\n                $fullkey = $col.':'.$subtype;\n\n                // skip cols unknown to the backend\n                if (!$coltypes[$field] && empty($colprop['value'])) {\n                    continue;\n                }\n\n                // merge colprop with global coltype configuration\n                if ($coltypes[$field]) {\n                    $colprop += $coltypes[$field];\n                }\n\n                $label = isset($colprop['label']) ? $colprop['label'] : $RCMAIL->gettext($col);\n\n                // prepare subtype selector in edit mode\n                if ($edit_mode && is_array($colprop['subtypes'])) {\n                    $subtype_names = array_map('rcmail_get_type_label', $colprop['subtypes']);\n                    $select_subtype = new html_select(array('name' => '_subtype_'.$col.'[]', 'class' => 'contactselectsubtype', 'title' => $colprop['label'] . ' ' . $RCMAIL->gettext('type')));\n                    $select_subtype->add($subtype_names, $colprop['subtypes']);\n                }\n                else {\n                    $select_subtype = null;\n                }\n\n                if (!empty($colprop['value'])) {\n                    $values = (array)$colprop['value'];\n                }\n                else {\n                    // iterate over possible subtypes and collect values with their subtype\n                    if (is_array($colprop['subtypes'])) {\n                        $values = $subtypes = array();\n                        foreach (rcube_addressbook::get_col_values($field, $record) as $st => $vals) {\n                            foreach ((array)$vals as $value) {\n                                $i = count($values);\n                                $subtypes[$i] = $st;\n                                $values[$i] = $value;\n                            }\n                            // TODO: add $st to $select_subtype if missing ?\n                        }\n                    }\n                    else {\n                        $values   = $record[$fullkey] ?: $record[$field];\n                        $subtypes = null;\n                    }\n                }\n\n                // hack: create empty values array to force this field to be displayed\n                if (empty($values) && $colprop['visible']) {\n                    $values = array('');\n                }\n\n                if (!is_array($values)) {\n                    // $values can be an object, don't use (array)$values syntax\n                    $values = !empty($values) ? array($values) : array();\n                }\n\n                $rows = '';\n                foreach ($values as $i => $val) {\n                    if ($subtypes[$i]) {\n                        $subtype = $subtypes[$i];\n                    }\n\n                    $colprop['id'] = 'ff_' . $col . intval($coltypes[$field]['count']);\n                    $row_class     = 'row';\n\n                    // render composite field\n                    if ($colprop['type'] == 'composite') {\n                        $row_class .= ' composite';\n                        $composite  = array();\n                        $template   = $RCMAIL->config->get($col . '_template', '{'.join('} {', array_keys($colprop['childs'])).'}');\n                        $j = 0;\n\n                        foreach ($colprop['childs'] as $childcol => $cp) {\n                            if (!empty($val) && is_array($val)) {\n                                $childvalue = $val[$childcol] ?: $val[$j];\n                            }\n                            else {\n                                $childvalue = '';\n                            }\n\n                            if ($edit_mode) {\n                                if ($colprop['subtypes'] || $colprop['limit'] != 1) $cp['array'] = true;\n                                $composite['{'.$childcol.'}'] = rcube_output::get_edit_field($childcol, $childvalue, $cp, $cp['type']) . ' ';\n                            }\n                            else {\n                                $childval = $cp['render_func'] ? call_user_func($cp['render_func'], $childvalue, $childcol) : rcube::Q($childvalue);\n                                $composite['{'.$childcol.'}'] = html::span('data ' . $childcol, $childval) . ' ';\n                            }\n                            $j++;\n                        }\n\n                        $coltypes[$field] += (array)$colprop;\n                        $coltypes[$field]['count']++;\n                        $val = preg_replace('/\\{\\w+\\}/', '', strtr($template, $composite));\n\n                        if ($compact) {\n                            $val = html::div('content', str_replace('<br/>', '', $val));\n                        }\n                    }\n                    else if ($edit_mode) {\n                        // call callback to render/format value\n                        if ($colprop['render_func']) {\n                            $val = call_user_func($colprop['render_func'], $val, $col);\n                        }\n\n                        $coltypes[$field] = (array)$colprop + $coltypes[$field];\n\n                        if ($colprop['subtypes'] || $colprop['limit'] != 1) {\n                            $colprop['array'] = true;\n                        }\n\n                        // load jquery UI datepicker for date fields\n                        if ($colprop['type'] == 'date') {\n                            $colprop['class'] .= ($colprop['class'] ? ' ' : '') . 'datepicker';\n                            if (!$colprop['render_func']) {\n                                $val = rcmail_format_date_col($val);\n                            }\n                        }\n\n                        $val = rcube_output::get_edit_field($col, $val, $colprop, $colprop['type']);\n                        $coltypes[$field]['count']++;\n                    }\n                    else if ($colprop['render_func']) {\n                        $val = call_user_func($colprop['render_func'], $val, $col);\n                    }\n                    else if (is_array($colprop['options']) && isset($colprop['options'][$val])) {\n                        $val = $colprop['options'][$val];\n                    }\n                    else {\n                        $val = rcube::Q($val);\n                    }\n\n                    // use subtype as label\n                    if ($colprop['subtypes']) {\n                        $label = rcmail_get_type_label($subtype);\n                    }\n\n                    $_del_btn = html::a(array('href' => '#del', 'class' => 'contactfieldbutton deletebutton', 'title' => $RCMAIL->gettext('delete'), 'rel' => $col), $del_button);\n\n                    // add delete button/link\n                    if (!$compact && $edit_mode && !($colprop['visible'] && $colprop['limit'] == 1)) {\n                        $val .= $_del_btn;\n                    }\n\n                    // display row with label\n                    if ($label) {\n                        if ($RCMAIL->action == 'print') {\n                            $_label = rcube::Q($colprop['label'] . ($label != $colprop['label'] ? ' (' . $label . ')' : ''));\n                            if (!$compact) {\n                                $_label = html::div('contactfieldlabel label', $_label);\n                            }\n                        }\n                        else if ($select_subtype) {\n                            $_label = $select_subtype->show($subtype);\n                            if (!$compact) {\n                                $_label = html::div('contactfieldlabel label', $_label);\n                            }\n                        }\n                        else {\n                            $_label = html::label(array('class' => 'contactfieldlabel label', 'for' => $colprop['id']), rcube::Q($label));\n                        }\n\n                        if (!$compact) {\n                            $val = html::div('contactfieldcontent ' . $colprop['type'], $val);\n                        }\n                        else {\n                            $val .= $_del_btn;\n                        }\n\n                        $rows .= html::div($row_class, $_label . $val);\n                    }\n                    // row without label\n                    else {\n                        $rows .= html::div($row_class, $compact ? $val : html::div('contactfield', $val));\n                    }\n                }\n\n                // add option to the add-field menu\n                if (!$colprop['limit'] || $coltypes[$field]['count'] < $colprop['limit']) {\n                    $select_add->add($colprop['label'], $col);\n                    $select_add->_count++;\n                }\n\n                // wrap rows in fieldgroup container\n                if ($rows) {\n                    $c_class    = 'contactfieldgroup ' . ($colprop['subtypes'] ? 'contactfieldgroupmulti ' : '') . 'contactcontroller' . $col;\n                    $with_label = $colprop['subtypes'] && $RCMAIL->action != 'print';\n                    $content   .= html::tag(\n                        'fieldset',\n                        array('class' => $c_class, 'style' => ($rows ? null : 'display:none')),\n                        ($with_label ? html::tag('legend', null, rcube::Q($colprop['label'])) : ' ') . $rows\n                    );\n                }\n            }\n\n            if (!$content && (!$edit_mode || !$select_add->_count)) {\n                continue;\n            }\n\n            // also render add-field selector\n            if ($edit_mode) {\n                $content .= html::p('addfield', $select_add->show(null, array('style' => $select_add->_count ? null : 'display:none')));\n            }\n\n            $content = html::div(array('id' => 'contactsection' . $section), $content);\n        }\n        else {\n            $content = $fieldset['content'];\n        }\n\n        if ($content) {\n            $out .= html::tag('fieldset', array('class' => $attrib['fieldset-class']),\n                html::tag('legend', null, rcube::Q($fieldset['name'])) . $content) . \"\\n\";\n        }\n    }\n\n    if ($edit_mode) {\n        $RCMAIL->output->set_env('coltypes', $coltypes + $coltype_labels);\n        $RCMAIL->output->set_env('delbutton', $del_button);\n        $RCMAIL->output->add_label('delete');\n    }\n\n    return $out;\n}\n\n\nfunction rcmail_contact_photo($attrib)\n{\n    global $SOURCE_ID, $CONTACTS, $CONTACT_COLTYPES, $RCMAIL;\n\n    if ($result = $CONTACTS->get_result()) {\n        $record = $result->first();\n    }\n\n    if ($record['_type'] == 'group' && $attrib['placeholdergroup']) {\n        $photo_img = $RCMAIL->output->abs_url($attrib['placeholdergroup'], true);\n    }\n    else {\n        $photo_img = $attrib['placeholder'] ? $RCMAIL->output->abs_url($attrib['placeholder'], true) : 'program/resources/blank.gif';\n    }\n\n    $photo_img = $RCMAIL->output->asset_url($photo_img);\n\n    $RCMAIL->output->set_env('photo_placeholder', $photo_img);\n\n    unset($attrib['placeholder']);\n\n    $plugin = $RCMAIL->plugins->exec_hook('contact_photo', array('record' => $record, 'data' => $record['photo']));\n\n    // check if we have photo data from contact form\n    if ($GLOBALS['EDIT_RECORD']) {\n        $rec = $GLOBALS['EDIT_RECORD'];\n        if ($rec['photo'] == '-del-') {\n            $record['photo'] = '';\n        }\n        else if ($_SESSION['contacts']['files'][$rec['photo']]) {\n            $record['photo'] = $file_id = $rec['photo'];\n        }\n    }\n\n    if ($plugin['url'])\n        $photo_img = $plugin['url'];\n    else if (preg_match('!^https?://!i', $record['photo']))\n        $photo_img = $record['photo'];\n    else if ($record['photo']) {\n        $url = array('_action' => 'photo', '_cid' => $record['ID'], '_source' => $SOURCE_ID);\n        if ($file_id) {\n            $url['_photo'] = $ff_value = $file_id;\n        }\n        $photo_img = $RCMAIL->url($url);\n    }\n    else {\n        $ff_value = '-del-'; // will disable delete-photo action\n    }\n\n    $content = html::div($attrib, html::img(array(\n            'src'     => $photo_img,\n            'alt'     => $RCMAIL->gettext('contactphoto'),\n            'onerror' => 'this.src = rcmail.env.photo_placeholder; this.onerror = null',\n    )));\n\n    if ($CONTACT_COLTYPES['photo'] && ($RCMAIL->action == 'edit' || $RCMAIL->action == 'add')) {\n        $RCMAIL->output->add_gui_object('contactphoto', $attrib['id']);\n        $hidden = new html_hiddenfield(array('name' => '_photo', 'id' => 'ff_photo', 'value' => $ff_value));\n        $content .= $hidden->show();\n    }\n\n    return $content;\n}\n\n\nfunction rcmail_format_date_col($val)\n{\n    global $RCMAIL;\n    return $RCMAIL->format_date($val, $RCMAIL->config->get('date_format', 'Y-m-d'), false);\n}\n\n/**\n * Updates saved search after data changed\n */\nfunction rcmail_search_update($return = false)\n{\n    global $RCMAIL;\n\n    if (($search_request = $_REQUEST['_search']) && isset($_SESSION['search'][$search_request])) {\n        $search   = (array)$_SESSION['search'][$search_request];\n        $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n        $afields  = $return ? $RCMAIL->config->get('contactlist_fields') : array('name', 'email');\n        $records  = array();\n\n        foreach ($search as $s => $set) {\n            $source = $RCMAIL->get_address_book($s);\n\n            // reset page\n            $source->set_page(1);\n            $source->set_pagesize(9999);\n            $source->set_search_set($set);\n\n            // get records\n            $result = $source->list_records($afields);\n\n            if (!$result->count) {\n                unset($search[$s]);\n                continue;\n            }\n\n            if ($return) {\n                while ($row = $result->next()) {\n                    $row['sourceid'] = $s;\n                    $key = rcube_addressbook::compose_contact_key($row, $sort_col);\n                    $records[$key] = $row;\n                }\n                unset($result);\n            }\n\n            $search[$s] = $source->get_search_set();\n        }\n\n        $_SESSION['search'][$search_request] = $search;\n\n        return $records;\n    }\n\n    return false;\n}\n\n/**\n * Returns contact ID(s) and source(s) from GET/POST data\n *\n * @return array List of contact IDs per-source\n */\nfunction rcmail_get_cids($filter = null, $request_type = rcube_utils::INPUT_GPC)\n{\n    // contact ID (or comma-separated list of IDs) is provided in two\n    // forms. If _source is an empty string then the ID is a string\n    // containing contact ID and source name in form: <ID>-<SOURCE>\n\n    $cid    = rcube_utils::get_input_value('_cid', $request_type);\n    $source = (string) rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n\n    if (is_array($cid)) {\n        return $cid;\n    }\n\n    if (!preg_match('/^[a-zA-Z0-9\\+\\/=_-]+(,[a-zA-Z0-9\\+\\/=_-]+)*$/', $cid)) {\n        return array();\n    }\n\n    $cid        = explode(',', $cid);\n    $got_source = strlen($source);\n    $result     = array();\n\n    // create per-source contact IDs array\n    foreach ($cid as $id) {\n        // extract source ID from contact ID (it's there in search mode)\n        // see #1488959 and #1488862 for reference\n        if (!$got_source) {\n            if ($sep = strrpos($id, '-')) {\n                $contact_id = substr($id, 0, $sep);\n                $source_id  = (string) substr($id, $sep+1);\n                if (strlen($source_id)) {\n                    $result[$source_id][] = $contact_id;\n                }\n            }\n        }\n        else {\n            if (substr($id, -($got_source+1)) === \"-$source\") {\n                $id = substr($id, 0, -($got_source+1));\n            }\n            $result[$source][] = $id;\n        }\n    }\n\n    return $filter !== null ? $result[$filter] : $result;\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Search action (and form) for address book contacts                  |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\nif ($RCMAIL->action == 'search-create') {\n    $id   = rcube_utils::get_input_value('_search', rcube_utils::INPUT_POST);\n    $name = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true);\n\n    if (($params = $_SESSION['search_params']) && $params['id'] == $id) {\n\n        $data = array(\n            'type' => rcube_user::SEARCH_ADDRESSBOOK,\n            'name' => $name,\n            'data' => array(\n                'fields' => $params['data'][0],\n                'search' => $params['data'][1],\n            ),\n        );\n\n        $plugin = $RCMAIL->plugins->exec_hook('saved_search_create', array('data' => $data));\n\n        if (!$plugin['abort'])\n            $result = $RCMAIL->user->insert_search($plugin['data']);\n        else\n            $result = $plugin['result'];\n    }\n\n    if ($result) {\n        $OUTPUT->show_message('savedsearchcreated', 'confirmation');\n        $OUTPUT->command('insert_saved_search', rcube::Q($name), rcube::Q($result));\n    }\n    else\n        $OUTPUT->show_message($plugin['message'] ?: 'savedsearchcreateerror', 'error');\n\n    $OUTPUT->send();\n}\n\nif ($RCMAIL->action == 'search-delete') {\n    $id = rcube_utils::get_input_value('_sid', rcube_utils::INPUT_POST);\n\n    $plugin = $RCMAIL->plugins->exec_hook('saved_search_delete', array('id' => $id));\n\n    if (!$plugin['abort'])\n        $result = $RCMAIL->user->delete_search($id);\n    else\n        $result = $plugin['result'];\n\n    if ($result) {\n        $OUTPUT->show_message('savedsearchdeleted', 'confirmation');\n        $OUTPUT->command('remove_search_item', rcube::Q($id));\n        // contact list will be cleared, clear also page counter\n        $OUTPUT->command('set_rowcount', $RCMAIL->gettext('nocontactsfound'));\n        $OUTPUT->set_env('pagecount', 0);\n    }\n    else\n        $OUTPUT->show_message($plugin['message'] ?: 'savedsearchdeleteerror', 'error');\n\n    $OUTPUT->send();\n}\n\n\nif (!isset($_GET['_form'])) {\n    rcmail_contact_search();\n}\n\n$OUTPUT->add_handler('searchform', 'rcmail_contact_search_form');\n$OUTPUT->send('contactsearch');\n\n\nfunction rcmail_contact_search()\n{\n    global $RCMAIL, $OUTPUT, $SEARCH_MODS_DEFAULT, $PAGE_SIZE;\n\n    $adv = isset($_POST['_adv']);\n    $sid = rcube_utils::get_input_value('_sid', rcube_utils::INPUT_GET);\n\n    // get search criteria from saved search\n    if ($sid && ($search = $RCMAIL->user->get_search($sid))) {\n        $fields = $search['data']['fields'];\n        $search = $search['data']['search'];\n    }\n    // get fields/values from advanced search form\n    else if ($adv) {\n        foreach (array_keys($_POST) as $key) {\n            $s = trim(rcube_utils::get_input_value($key, rcube_utils::INPUT_POST, true));\n            if (strlen($s) && preg_match('/^_search_([a-zA-Z0-9_-]+)$/', $key, $m)) {\n                $search[] = $s;\n                $fields[] = $m[1];\n            }\n        }\n\n        if (empty($fields)) {\n            // do nothing, show the form again\n            return;\n        }\n    }\n    // quick-search\n    else {\n        $search = trim(rcube_utils::get_input_value('_q', rcube_utils::INPUT_GET, true));\n        $fields = rcube_utils::get_input_value('_headers', rcube_utils::INPUT_GET);\n\n        if (empty($fields)) {\n            $fields = array_keys($SEARCH_MODS_DEFAULT);\n        }\n        else {\n            $fields = array_filter(explode(',', $fields));\n        }\n\n        // update search_mods setting\n        $old_mods = $RCMAIL->config->get('addressbook_search_mods');\n        $search_mods = array_fill_keys($fields, 1);\n        if ($old_mods != $search_mods) {\n            $RCMAIL->user->save_prefs(array('addressbook_search_mods' => $search_mods));\n        }\n\n        if (in_array('*', $fields)) {\n            $fields = '*';\n        }\n    }\n\n    // Values matching mode\n    $mode = (int) $RCMAIL->config->get('addressbook_search_mode');\n    $mode |= rcube_addressbook::SEARCH_GROUPS;\n\n    // get sources list\n    $sources    = $RCMAIL->get_address_sources();\n    $search_set = array();\n    $records    = array();\n    $sort_col   = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $afields = $RCMAIL->config->get('contactlist_fields');\n\n    foreach ($sources as $s) {\n        $source = $RCMAIL->get_address_book($s['id']);\n\n        // check if search fields are supported....\n        if (is_array($fields)) {\n            $cols = $source->coltypes[0] ? array_flip($source->coltypes) : $source->coltypes;\n            $supported = 0;\n\n            foreach ($fields as $f) {\n                if (array_key_exists($f, $cols)) {\n                    $supported ++;\n                }\n            }\n\n            // in advanced search we require all fields (AND operator)\n            // in quick search we require at least one field (OR operator)\n            if (($adv && $supported < count($fields)) || (!$adv && !$supported)) {\n                continue;\n            }\n        }\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(9999);\n\n        // get contacts count\n        $result = $source->search($fields, $search, $mode, false);\n\n        if (!$result->count) {\n            continue;\n        }\n\n        // get records\n        $result = $source->list_records($afields);\n\n        while ($row = $result->next()) {\n            $row['sourceid'] = $s['id'];\n            $key = rcube_addressbook::compose_contact_key($row, $sort_col);\n            $records[$key] = $row;\n        }\n\n        unset($result);\n        $search_set[$s['id']] = $source->get_search_set();\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n\n    // cut first-page records\n    if ($PAGE_SIZE < $count) {\n        $records = array_slice($records, 0, $PAGE_SIZE);\n    }\n\n    $result->records = array_values($records);\n\n    // search request ID\n    $search_request = md5('addr'\n        .(is_array($fields) ? implode(',', $fields) : $fields)\n        .(is_array($search) ? implode(',', $search) : $search));\n\n    // save search settings in session\n    $_SESSION['search'][$search_request] = $search_set;\n    $_SESSION['search_params'] = array('id' => $search_request, 'data' => array($fields, $search));\n    $_SESSION['page'] = 1;\n\n    if ($adv)\n        $OUTPUT->command('list_contacts_clear');\n\n    if ($result->count > 0) {\n        // create javascript list\n        rcmail_js_contacts_list($result);\n        $OUTPUT->show_message('contactsearchsuccessful', 'confirmation', array('nr' => $result->count));\n    }\n    else {\n        $OUTPUT->show_message('nocontactsfound', 'notice');\n    }\n\n    // update message count display\n    $OUTPUT->set_env('search_request', $search_request);\n    $OUTPUT->set_env('pagecount', ceil($result->count / $PAGE_SIZE));\n    $OUTPUT->command('set_rowcount', rcmail_get_rowcount_text($result));\n    // Re-set current source\n    $OUTPUT->set_env('search_id', $sid);\n    $OUTPUT->set_env('source', '');\n    $OUTPUT->set_env('group', '');\n    // Re-set list header\n    $OUTPUT->command('set_group_prop', null);\n\n    if (!$sid) {\n        // unselect currently selected directory/group\n        $OUTPUT->command('unselect_directory');\n        // enable \"Save search\" command\n        $OUTPUT->command('enable_command', 'search-create', true);\n    }\n    $OUTPUT->command('update_group_commands');\n\n    // send response\n    $OUTPUT->send();\n}\n\nfunction rcmail_contact_search_form($attrib)\n{\n    global $RCMAIL, $CONTACT_COLTYPES;\n\n    $i_size       = $attrib['size'] ?: 30;\n    $short_labels = rcube_utils::get_boolean($attrib['short-legend-labels']);\n\n    $form = array(\n        'main' => array(\n            'name'    => $RCMAIL->gettext('properties'),\n            'content' => array(\n            ),\n        ),\n        'personal' => array(\n            'name'    => $RCMAIL->gettext($short_labels ? 'personal' : 'personalinfo'),\n            'content' => array(\n            ),\n        ),\n        'other' => array(\n            'name'    => $RCMAIL->gettext('other'),\n            'content' => array(\n            ),\n        ),\n    );\n\n    // get supported coltypes from all address sources\n    $sources  = $RCMAIL->get_address_sources();\n    $coltypes = array();\n\n    foreach ($sources as $s) {\n        $CONTACTS = $RCMAIL->get_address_book($s['id']);\n\n        if (is_array($CONTACTS->coltypes)) {\n            $contact_cols = $CONTACTS->coltypes[0] ? array_flip($CONTACTS->coltypes) : $CONTACTS->coltypes;\n            $coltypes     = array_merge($coltypes, $contact_cols);\n        }\n    }\n\n    // merge supported coltypes with $CONTACT_COLTYPES\n    foreach ($coltypes as $col => $colprop) {\n        $coltypes[$col] = $CONTACT_COLTYPES[$col] ? array_merge($CONTACT_COLTYPES[$col], (array)$colprop) : (array)$colprop;\n    }\n\n    // build form fields list\n    foreach ($coltypes as $col => $colprop) {\n        if ($colprop['type'] != 'image' && !$colprop['nosearch']) {\n            $ftype    = $colprop['type'] == 'select' ? 'select' : 'text';\n            $label    = isset($colprop['label']) ? $colprop['label'] : $RCMAIL->gettext($col);\n            $category = $colprop['category'] ?: 'other';\n\n            // load jquery UI datepicker for date fields\n            if ($colprop['type'] == 'date') {\n                $colprop['class'] .= ($colprop['class'] ? ' ' : '') . 'datepicker';\n            }\n            else if ($ftype == 'text') {\n                $colprop['size'] = $i_size;\n            }\n\n            $colprop['id'] = '_search_' . $col;\n\n            $content  = html::div('row',\n                html::label(array('class' => 'contactfieldlabel label', 'for' => $colprop['id']), rcube::Q($label))\n                . html::div('contactfieldcontent', rcube_output::get_edit_field('search_'.$col, '', $colprop, $ftype)));\n\n            $form[$category]['content'][] = $content;\n        }\n    }\n\n    $hiddenfields = new html_hiddenfield();\n    $hiddenfields->add(array('name' => '_adv', 'value' => 1));\n\n    $out = $RCMAIL->output->request_form(array(\n            'name'    => 'form',\n            'method'  => 'post',\n            'task'    => $RCMAIL->task,\n            'action'  => 'search',\n            'noclose' => true,\n        ) + $attrib, $hiddenfields->show());\n\n    $RCMAIL->output->add_gui_object('editform', $attrib['id']);\n\n    unset($attrib['name']);\n    unset($attrib['id']);\n\n    foreach ($form as $f) {\n        if (!empty($f['content'])) {\n            $content = html::div('contactfieldgroup', join(\"\\n\", $f['content']));\n\n            $out .= html::tag('fieldset', $attrib,\n                html::tag('legend', null, rcube::Q($f['name']))\n                . $content) . \"\\n\";\n        }\n    }\n\n    return $out . '</form>';\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Send contacts list to client (as remote response)                   |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n$afields       = $RCMAIL->config->get('contactlist_fields');\n$addr_sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n$page_size     = $RCMAIL->config->get('addressbook_pagesize', $RCMAIL->config->get('pagesize', 50));\n$list_page     = max(1, intval($_GET['_page']));\n$jsresult      = array();\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $sparam = $_SESSION['search_params']['id'] == $_REQUEST['_search'] ? $_SESSION['search_params']['data'] : array();\n\n    // get records from all sources\n    foreach ($search as $s => $set) {\n        $CONTACTS = $RCMAIL->get_address_book($s);\n\n        // list matching groups of this source (on page one)\n        if ($sparam[1] && $CONTACTS->groups && $list_page == 1) {\n            $jsresult += rcmail_compose_contact_groups($CONTACTS, $s, $sparam[1], (int)$RCMAIL->config->get('addressbook_search_mode'));\n        }\n\n        // reset page\n        $CONTACTS->set_page(1);\n        $CONTACTS->set_pagesize(9999);\n        $CONTACTS->set_search_set($set);\n\n        // get records\n        $result = $CONTACTS->list_records($afields);\n\n        while ($row = $result->next()) {\n            $row['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($row, $addr_sort_col);\n            $records[$key] = $row;\n        }\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $first  = ($list_page-1) * $page_size;\n    $result = new rcube_result_set($count, $first);\n\n    // we need only records for current page\n    if ($page_size < $count) {\n        $records = array_slice($records, $first, $page_size);\n    }\n\n    $result->records = array_values($records);\n}\n// list contacts from selected source\nelse {\n    $source = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n    $CONTACTS = $RCMAIL->get_address_book($source);\n\n    if ($CONTACTS && $CONTACTS->ready) {\n        // set list properties\n        $CONTACTS->set_pagesize($page_size);\n        $CONTACTS->set_page($list_page);\n\n        if ($group_id = rcube_utils::get_input_value('_gid', rcube_utils::INPUT_GET)) {\n            $CONTACTS->set_group($group_id);\n        }\n        // list groups of this source (on page one)\n        else if ($CONTACTS->groups && $CONTACTS->list_page == 1) {\n            $jsresult = rcmail_compose_contact_groups($CONTACTS, $source);\n        }\n\n        // get contacts for this user\n        $result = $CONTACTS->list_records($afields);\n    }\n}\n\nif (!empty($result) && !$result->count && $result->searchonly) {\n    $OUTPUT->show_message('contactsearchonly', 'notice');\n}\nelse if (!empty($result) && $result->count > 0) {\n    // create javascript list\n    while ($row = $result->next()) {\n        $name = rcube_addressbook::compose_list_name($row);\n\n        // add record for every email address of the contact\n        $emails = $CONTACTS->get_col_values('email', $row, true);\n        foreach ($emails as $i => $email) {\n            $source = $row['sourceid'] ?: $source;\n            $row_id = $source.'-'.$row['ID'].'-'.$i;\n            $jsresult[$row_id] = format_email_recipient($email, $name);\n            $classname = $row['_type'] == 'group' ? 'group' : 'person';\n            $keyname = $row['_type'] == 'group' ? 'contactgroup' : 'contact';\n\n            $OUTPUT->command('add_contact_row', $row_id, array(\n                $keyname => html::a(array('title' => $email), rcube::Q($name ?: $email) .\n                    ($name && count($emails) > 1 ? '&nbsp;' . html::span('email', rcube::Q($email)) : '')\n                )), $classname);\n        }\n    }\n}\n\n// update env\n$OUTPUT->set_env('contactdata', $jsresult);\n$OUTPUT->set_env('pagecount', ceil($result->count / $page_size));\n$OUTPUT->command('set_page_buttons');\n\n// send response\n$OUTPUT->send();\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Search contacts from the address book widget                        |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n$search        = rcube_utils::get_input_value('_q', rcube_utils::INPUT_GPC, true);\n$sources       = $RCMAIL->get_address_sources();\n$search_mode   = (int) $RCMAIL->config->get('addressbook_search_mode');\n$addr_sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n$afields       = $RCMAIL->config->get('contactlist_fields');\n$page_size     = $RCMAIL->config->get('addressbook_pagesize', $RCMAIL->config->get('pagesize', 50));\n$records       = array();\n$search_set    = array();\n$jsresult      = array();\n$search_mode  |= rcube_addressbook::SEARCH_GROUPS;\n\nforeach ($sources as $s) {\n    $source = $RCMAIL->get_address_book($s['id']);\n    $source->set_page(1);\n    $source->set_pagesize(9999);\n\n    // list matching groups of this source\n    if ($source->groups) {\n        $jsresult += rcmail_compose_contact_groups($source, $s['id'], $search, $search_mode);\n    }\n\n    // get contacts count\n    $result = $source->search($afields, $search, $search_mode, true, true, 'email');\n\n    if (!$result->count) {\n        continue;\n    }\n\n    while ($row = $result->next()) {\n        $row['sourceid'] = $s['id'];\n        $key = rcube_addressbook::compose_contact_key($row, $addr_sort_col);\n        $records[$key] = $row;\n    }\n\n    $search_set[$s['id']] = $source->get_search_set();\n    unset($result);\n}\n\n$group_count = count($jsresult);\n\n// sort the records\nksort($records, SORT_LOCALE_STRING);\n\n// create resultset object\n$count  = count($records);\n$result = new rcube_result_set($count);\n\n// select the requested page\nif ($page_size < $count) {\n    $records = array_slice($records, $result->first, $page_size);\n}\n\n$result->records = array_values($records);\n\nif (!empty($result) && $result->count > 0) {\n    // create javascript list\n    while ($row = $result->next()) {\n        $name      = rcube_addressbook::compose_list_name($row);\n        $classname = $row['_type'] == 'group' ? 'group' : 'person';\n        $keyname   = $row['_type'] == 'group' ? 'contactgroup' : 'contact';\n\n        // add record for every email address of the contact\n        // (same as in list_contacts.inc)\n        $emails = $source->get_col_values('email', $row, true);\n        foreach ($emails as $i => $email) {\n            $row_id = $row['sourceid'].'-'.$row['ID'].'-'.$i;\n            $jsresult[$row_id] = format_email_recipient($email, $name);\n            $title = rcube_addressbook::compose_search_name($row, $email, $name);\n\n            $OUTPUT->command('add_contact_row', $row_id, array(\n                $keyname => html::a(array('title' => $title), rcube::Q($name ?: $email) .\n                    ($name && count($emails) > 1 ? '&nbsp;' . html::span('email', rcube::Q($email)) : '')\n                )), $classname);\n        }\n    }\n\n    // search request ID\n    $search_request = md5('composeaddr' . $search);\n\n    // save search settings in session\n    $_SESSION['search'][$search_request] = $search_set;\n    $_SESSION['search_params'] = array('id' => $search_request, 'data' => array($afields, $search));\n\n    $OUTPUT->show_message('contactsearchsuccessful', 'confirmation', array('nr' => $result->count));\n\n    $OUTPUT->set_env('search_request', $search_request);\n    $OUTPUT->set_env('source', '');\n    $OUTPUT->command('unselect_directory');\n}\nelse if (!$group_count) {\n    $OUTPUT->show_message('nocontactsfound', 'notice');\n}\n\n// update env\n$OUTPUT->set_env('contactdata', $jsresult);\n$OUTPUT->set_env('pagecount', ceil($result->count / $page_size));\n$OUTPUT->command('set_page_buttons');\n\n// send response\n$OUTPUT->send();\n"], "fixing_code": ["<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['contact_search'][$_REQUEST['_search']])\n    && is_array($_SESSION['contact_search'][$_REQUEST['_search']])\n) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = $_SESSION['contact_search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page and page size (#6103)\n        $source->set_page(1);\n        $source->set_pagesize(count($ids));\n\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/vcard; charset=' . RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Provide addressbook functionality and GUI objects                   |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n$SEARCH_MODS_DEFAULT = array('name'=>1, 'firstname'=>1, 'surname'=>1, 'email'=>1, '*'=>1);\n\n// general definition of contact coltypes\n$CONTACT_COLTYPES = array(\n    'name'         => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('name'), 'category' => 'main'),\n    'firstname'    => array('type' => 'text', 'size' => 19, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('firstname'), 'category' => 'main'),\n    'surname'      => array('type' => 'text', 'size' => 19, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('surname'), 'category' => 'main'),\n    'email'        => array('type' => 'text', 'size' => 40, 'maxlength' => 254, 'label' => $RCMAIL->gettext('email'), 'subtypes' => array('home','work','other'), 'category' => 'main'),\n    'middlename'   => array('type' => 'text', 'size' => 19, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('middlename'), 'category' => 'main'),\n    'prefix'       => array('type' => 'text', 'size' => 8,  'maxlength' => 20, 'limit' => 1, 'label' => $RCMAIL->gettext('nameprefix'), 'category' => 'main'),\n    'suffix'       => array('type' => 'text', 'size' => 8,  'maxlength' => 20, 'limit' => 1, 'label' => $RCMAIL->gettext('namesuffix'), 'category' => 'main'),\n    'nickname'     => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('nickname'), 'category' => 'main'),\n    'jobtitle'     => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('jobtitle'), 'category' => 'main'),\n    'organization' => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('organization'), 'category' => 'main'),\n    'department'   => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('department'), 'category' => 'main'),\n    'gender'       => array('type' => 'select', 'limit' => 1, 'label' => $RCMAIL->gettext('gender'), 'options' => array('male' => $RCMAIL->gettext('male'), 'female' => $RCMAIL->gettext('female')), 'category' => 'personal'),\n    'maidenname'   => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'limit' => 1, 'label' => $RCMAIL->gettext('maidenname'), 'category' => 'personal'),\n    'phone'        => array('type' => 'text', 'size' => 40, 'maxlength' => 20, 'label' => $RCMAIL->gettext('phone'), 'subtypes' => array('home','home2','work','work2','mobile','main','homefax','workfax','car','pager','video','assistant','other'), 'category' => 'main'),\n    'address'      => array('type' => 'composite', 'label' => $RCMAIL->gettext('address'), 'subtypes' => array('home','work','other'), 'childs' => array(\n        'street'     => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'label' => $RCMAIL->gettext('street'), 'category' => 'main'),\n        'locality'   => array('type' => 'text', 'size' => 28, 'maxlength' => 50, 'label' => $RCMAIL->gettext('locality'), 'category' => 'main'),\n        'zipcode'    => array('type' => 'text', 'size' => 8,  'maxlength' => 15, 'label' => $RCMAIL->gettext('zipcode'), 'category' => 'main'),\n        'region'     => array('type' => 'text', 'size' => 12, 'maxlength' => 50, 'label' => $RCMAIL->gettext('region'), 'category' => 'main'),\n        'country'    => array('type' => 'text', 'size' => 40, 'maxlength' => 50, 'label' => $RCMAIL->gettext('country'), 'category' => 'main'),\n        ), 'category' => 'main'),\n    'birthday'     => array('type' => 'date', 'size' => 12, 'maxlength' => 16, 'label' => $RCMAIL->gettext('birthday'), 'limit' => 1, 'render_func' => 'rcmail_format_date_col', 'category' => 'personal'),\n    'anniversary'  => array('type' => 'date', 'size' => 12, 'maxlength' => 16, 'label' => $RCMAIL->gettext('anniversary'), 'limit' => 1, 'render_func' => 'rcmail_format_date_col', 'category' => 'personal'),\n    'website'      => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'label' => $RCMAIL->gettext('website'), 'subtypes' => array('homepage','work','blog','profile','other'), 'category' => 'main'),\n    'im'           => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'label' => $RCMAIL->gettext('instantmessenger'), 'subtypes' => array('aim','icq','msn','yahoo','jabber','skype','other'), 'category' => 'main'),\n    'notes'        => array('type' => 'textarea', 'size' => 40, 'rows' => 15, 'maxlength' => 500, 'label' => $RCMAIL->gettext('notes'), 'limit' => 1),\n    'photo'        => array('type' => 'image', 'limit' => 1, 'category' => 'main'),\n    'assistant'    => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('assistant'), 'category' => 'personal'),\n    'manager'      => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('manager'), 'category' => 'personal'),\n    'spouse'       => array('type' => 'text', 'size' => 40, 'maxlength' => 128, 'limit' => 1, 'label' => $RCMAIL->gettext('spouse'), 'category' => 'personal'),\n    // TODO: define fields for vcards like GEO, KEY\n);\n\n$PAGE_SIZE = $RCMAIL->config->get('addressbook_pagesize', $RCMAIL->config->get('pagesize', 50));\n\n// Addressbook UI\nif (!$RCMAIL->action && !$OUTPUT->ajax_call) {\n    // add list of address sources to client env\n    $js_list = $RCMAIL->get_address_sources();\n\n    // count all/writeable sources\n    $writeable = 0;\n    $count     = 0;\n\n    foreach ($js_list as $sid => $s) {\n        $count++;\n        if (!$s['readonly']) {\n            $writeable++;\n        }\n        // unset hidden sources\n        if ($s['hidden']) {\n            unset($js_list[$sid]);\n        }\n    }\n\n    $OUTPUT->set_env('display_next', (bool) $RCMAIL->config->get('display_next'));\n    $OUTPUT->set_env('search_mods', $RCMAIL->config->get('addressbook_search_mods', $SEARCH_MODS_DEFAULT));\n    $OUTPUT->set_env('address_sources', $js_list);\n    $OUTPUT->set_env('writable_source', $writeable);\n    $OUTPUT->set_env('contact_move_enabled', $writeable > 1);\n    $OUTPUT->set_env('contact_copy_enabled', $writeable > 1 || ($writeable == 1 && count($js_list) > 1));\n\n    $OUTPUT->set_pagetitle($RCMAIL->gettext('contacts'));\n\n    $_SESSION['addressbooks_count'] = $count;\n    $_SESSION['addressbooks_count_writeable'] = $writeable;\n\n    // select address book\n    $source = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n\n    // use first directory by default\n    if (!strlen($source) || !isset($js_list[$source])) {\n        $source = $RCMAIL->config->get('default_addressbook');\n        if (!strlen($source) || !isset($js_list[$source])) {\n            $source = strval(key($js_list));\n        }\n    }\n\n    $CONTACTS = rcmail_contact_source($source, true);\n}\n\n// remove undo information...\nif ($undo = $_SESSION['contact_undo']) {\n    // ...after timeout\n    $undo_time = $RCMAIL->config->get('undo_timeout', 0);\n    if ($undo['ts'] < time() - $undo_time)\n        $RCMAIL->session->remove('contact_undo');\n}\n\n// register UI objects\n$OUTPUT->add_handlers(array(\n    'directorylist'       => 'rcmail_directory_list',\n    'savedsearchlist'     => 'rcmail_savedsearch_list',\n    'addresslist'         => 'rcmail_contacts_list',\n    'addresslisttitle'    => 'rcmail_contacts_list_title',\n    'recordscountdisplay' => 'rcmail_rowcount_display',\n    'searchform'          => array($OUTPUT, 'search_form')\n));\n\n// register action aliases\n$RCMAIL->register_action_map(array(\n    'add'              => 'edit.inc',\n    'group-create'     => 'groups.inc',\n    'group-rename'     => 'groups.inc',\n    'group-delete'     => 'groups.inc',\n    'group-addmembers' => 'groups.inc',\n    'group-delmembers' => 'groups.inc',\n    'search-create'    => 'search.inc',\n    'search-delete'    => 'search.inc',\n));\n\n// Disable qr-code if php-gd or Endroid's QrCode is not installed\nif (!$OUTPUT->ajax_call) {\n    $OUTPUT->set_env('qrcode', function_exists('imagecreate') && class_exists('Endroid\\QrCode\\QrCode'));\n    $OUTPUT->add_label('qrcode');\n}\n\n\n// instantiate a contacts object according to the given source\nfunction rcmail_contact_source($source=null, $init_env=false, $writable=false)\n{\n    global $RCMAIL, $OUTPUT, $CONTACT_COLTYPES, $PAGE_SIZE;\n\n    if (!strlen($source)) {\n        $source = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n    }\n\n    // Get object\n    $CONTACTS = $RCMAIL->get_address_book($source, $writable);\n    $CONTACTS->set_pagesize($PAGE_SIZE);\n\n    // set list properties and session vars\n    if (!empty($_GET['_page']))\n        $CONTACTS->set_page(($_SESSION['page'] = intval($_GET['_page'])));\n    else\n        $CONTACTS->set_page(isset($_SESSION['page']) ? $_SESSION['page'] : 1);\n\n    if ($group = rcube_utils::get_input_value('_gid', rcube_utils::INPUT_GP)) {\n        $CONTACTS->set_group($group);\n    }\n\n    if (!$init_env) {\n        return $CONTACTS;\n    }\n\n    $OUTPUT->set_env('readonly', $CONTACTS->readonly);\n    $OUTPUT->set_env('source', (string) $source);\n    $OUTPUT->set_env('group', $group);\n\n    // reduce/extend $CONTACT_COLTYPES with specification from the current $CONTACT object\n    if (is_array($CONTACTS->coltypes)) {\n        // remove cols not listed by the backend class\n        $contact_cols = $CONTACTS->coltypes[0] ? array_flip($CONTACTS->coltypes) : $CONTACTS->coltypes;\n        $CONTACT_COLTYPES = array_intersect_key($CONTACT_COLTYPES, $contact_cols);\n        // add associative coltypes definition\n        if (!$CONTACTS->coltypes[0]) {\n            foreach ($CONTACTS->coltypes as $col => $colprop) {\n                if (is_array($colprop['childs'])) {\n                    foreach ($colprop['childs'] as $childcol => $childprop)\n                        $colprop['childs'][$childcol] = array_merge((array)$CONTACT_COLTYPES[$col]['childs'][$childcol], $childprop);\n                }\n                $CONTACT_COLTYPES[$col] = $CONTACT_COLTYPES[$col] ? array_merge($CONTACT_COLTYPES[$col], $colprop) : $colprop;\n            }\n        }\n    }\n\n    $OUTPUT->set_env('photocol', is_array($CONTACT_COLTYPES['photo']));\n\n    return $CONTACTS;\n}\n\n\nfunction rcmail_set_sourcename($abook)\n{\n    global $OUTPUT, $RCMAIL;\n\n    // get address book name (for display)\n    if ($abook && $_SESSION['addressbooks_count'] > 1) {\n        $name = $abook->get_name();\n        if (!$name) {\n            $name = $RCMAIL->gettext('personaladrbook');\n        }\n        $OUTPUT->set_env('sourcename', html_entity_decode($name, ENT_COMPAT, 'UTF-8'));\n    }\n}\n\n\nfunction rcmail_directory_list($attrib)\n{\n    global $RCMAIL, $OUTPUT;\n\n    if (!$attrib['id'])\n        $attrib['id'] = 'rcmdirectorylist';\n\n    $out = '';\n    $jsdata = array();\n\n    $line_templ = html::tag('li', array(\n        'id' => 'rcmli%s', 'class' => '%s', 'noclose' => true),\n        html::a(array('href' => '%s',\n            'rel' => '%s',\n            'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".command('list','%s',this)\"), '%s'));\n\n    $sources = (array) $OUTPUT->get_env('address_sources');\n    reset($sources);\n\n    // currently selected source\n    $current = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n\n    foreach ($sources as $j => $source) {\n        $id = strval(strlen($source['id']) ? $source['id'] : $j);\n        $js_id = rcube::JQ($id);\n\n        // set class name(s)\n        $class_name = 'addressbook';\n        if ($current === $id)\n            $class_name .= ' selected';\n        if ($source['readonly'])\n            $class_name .= ' readonly';\n        if ($source['class_name'])\n            $class_name .= ' ' . $source['class_name'];\n\n        $name = $source['name'] ?: $id;\n        $out .= sprintf($line_templ,\n            rcube_utils::html_identifier($id, true),\n            $class_name,\n            rcube::Q($RCMAIL->url(array('_source' => $id))),\n            $source['id'],\n            $js_id, $name);\n\n        $groupdata = array('out' => $out, 'jsdata' => $jsdata, 'source' => $id);\n        if ($source['groups'])\n            $groupdata = rcmail_contact_groups($groupdata);\n        $jsdata = $groupdata['jsdata'];\n        $out = $groupdata['out'];\n        $out .= '</li>';\n    }\n\n    $OUTPUT->set_env('contactgroups', $jsdata);\n    $OUTPUT->set_env('collapsed_abooks', (string)$RCMAIL->config->get('collapsed_abooks',''));\n    $OUTPUT->add_gui_object('folderlist', $attrib['id']);\n    $OUTPUT->include_script('treelist.js');\n\n    // add some labels to client\n    $OUTPUT->add_label('deletegroupconfirm', 'groupdeleting', 'addingmember', 'removingmember',\n        'newgroup', 'grouprename', 'searchsave', 'namex', 'save', 'import', 'importcontacts',\n        'advsearch', 'search'\n    );\n\n    return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n\nfunction rcmail_savedsearch_list($attrib)\n{\n    global $RCMAIL, $OUTPUT;\n\n    if (!$attrib['id'])\n        $attrib['id'] = 'rcmsavedsearchlist';\n\n    $out = '';\n    $line_templ = html::tag('li', array(\n        'id' => 'rcmli%s', 'class' => '%s'),\n        html::a(array('href' => '#', 'rel' => 'S%s',\n            'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".command('listsearch', '%s', this)\"), '%s'));\n\n    // Saved searches\n    $sources = $RCMAIL->user->list_searches(rcube_user::SEARCH_ADDRESSBOOK);\n    foreach ($sources as $source) {\n        $id    = $source['id'];\n        $js_id = rcube::JQ($id);\n\n        // set class name(s)\n        $classes = array('contactsearch');\n        if (!empty($source['class_name']))\n            $classes[] = $source['class_name'];\n\n        $out .= sprintf($line_templ,\n            rcube_utils::html_identifier('S'.$id, true),\n            join(' ', $classes),\n            $id,\n            $js_id, rcube::Q($source['name'] ?: $id)\n        );\n    }\n\n    $OUTPUT->add_gui_object('savedsearchlist', $attrib['id']);\n\n    return html::tag('ul', $attrib, $out, html::$common_attrib);\n}\n\n\nfunction rcmail_contact_groups($args)\n{\n    global $RCMAIL;\n\n    $groups_html = '';\n    $groups = $RCMAIL->get_address_book($args['source'])->list_groups();\n\n    if (!empty($groups)) {\n        $line_templ = html::tag('li', array(\n            'id' => 'rcmli%s', 'class' => 'contactgroup'),\n            html::a(array('href' => '#',\n                'rel' => '%s:%s',\n                'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".command('listgroup',{'source':'%s','id':'%s'},this)\"), '%s'));\n\n        // append collapse/expand toggle and open a new <ul>\n        $is_collapsed = strpos($RCMAIL->config->get('collapsed_abooks',''), '&'.rawurlencode($args['source']).'&') !== false;\n        $args['out'] .= html::div('treetoggle ' . ($is_collapsed ? 'collapsed' : 'expanded'), '&nbsp;');\n\n        foreach ($groups as $group) {\n            $groups_html .= sprintf($line_templ,\n                rcube_utils::html_identifier('G' . $args['source'] . $group['ID'], true),\n                $args['source'], $group['ID'],\n                $args['source'], $group['ID'], rcube::Q($group['name'])\n            );\n            $args['jsdata']['G'.$args['source'].$group['ID']] = array(\n                'source' => $args['source'], 'id' => $group['ID'],\n                'name' => $group['name'], 'type' => 'group');\n        }\n    }\n\n    $args['out'] .= html::tag('ul',\n      array('class' => 'groups', 'style' => ($is_collapsed || empty($groups) ? \"display:none;\" : null)),\n      $groups_html);\n\n    return $args;\n}\n\n\n// return the contacts list as HTML table\nfunction rcmail_contacts_list($attrib)\n{\n    global $RCMAIL, $CONTACTS, $OUTPUT;\n\n    // define list of cols to be displayed\n    $a_show_cols = array('name','action');\n\n    // add id to message list table if not specified\n    if (!strlen($attrib['id']))\n        $attrib['id'] = 'rcmAddressList';\n\n    // create XHTML table\n    $out = $RCMAIL->table_output($attrib, array(), $a_show_cols, $CONTACTS->primary_key);\n\n    // set client env\n    $OUTPUT->add_gui_object('contactslist', $attrib['id']);\n    $OUTPUT->set_env('current_page', (int)$CONTACTS->list_page);\n    $OUTPUT->include_script('list.js');\n\n    // add some labels to client\n    $OUTPUT->add_label('deletecontactconfirm', 'copyingcontact', 'movingcontact', 'contactdeleting');\n\n    return $out;\n}\n\n\nfunction rcmail_js_contacts_list($result, $prefix='')\n{\n    global $OUTPUT, $RCMAIL;\n\n    if (empty($result) || $result->count == 0) {\n        return;\n    }\n\n    // define list of cols to be displayed\n    $a_show_cols = array('name','action');\n\n    while ($row = $result->next()) {\n        $emails       = rcube_addressbook::get_col_values('email', $row, true);\n        $row['CID']   = $row['ID'];\n        $row['email'] = reset($emails);\n\n        $source_id  = $OUTPUT->get_env('source');\n        $a_row_cols = array();\n        $classes    = array($row['_type'] ?: 'person');\n\n        // build contact ID with source ID\n        if (isset($row['sourceid'])) {\n            $row['ID'] = $row['ID'].'-'.$row['sourceid'];\n            $source_id = $row['sourceid'];\n        }\n\n        // format each col\n        foreach ($a_show_cols as $col) {\n            $val = '';\n            switch ($col) {\n                case 'name':\n                    $val = rcube::Q(rcube_addressbook::compose_list_name($row));\n                    break;\n\n                case 'action':\n                    if ($row['_type'] == 'group') {\n                        $val = html::a(array(\n                            'href'    => '#list',\n                            'rel'     => $row['ID'],\n                            'title'   => $RCMAIL->gettext('listgroup'),\n                            'onclick' => sprintf(\"return %s.command('pushgroup',{'source':'%s','id':'%s'},this,event)\", rcmail_output::JS_OBJECT_NAME, $source_id, $row['CID']),\n                            'class'   => 'pushgroup',\n                            'data-action-link' => true,\n                        ), '&raquo;');\n                    }\n                    else\n                        $val = '';\n                    break;\n\n                default:\n                    $val = rcube::Q($row[$col]);\n                    break;\n            }\n\n            $a_row_cols[$col] = $val;\n        }\n\n        if ($row['readonly'])\n            $classes[] = 'readonly';\n\n        $OUTPUT->command($prefix.'add_contact_row', $row['ID'], $a_row_cols, join(' ', $classes), array_intersect_key($row, array('ID'=>1,'readonly'=>1,'_type'=>1,'email'=>1,'name'=>1)));\n    }\n}\n\n\nfunction rcmail_contacts_list_title($attrib)\n{\n    global $OUTPUT, $RCMAIL;\n\n    $attrib += array('label' => 'contacts', 'id' => 'rcmabooklisttitle', 'tag' => 'span');\n    unset($attrib['name']);\n\n    $OUTPUT->add_gui_object('addresslist_title', $attrib['id']);\n    $OUTPUT->add_label('contacts','uponelevel');\n\n    return html::tag($attrib['tag'], $attrib, $RCMAIL->gettext($attrib['label']), html::$common_attrib);\n}\n\n\nfunction rcmail_rowcount_display($attrib)\n{\n    global $RCMAIL;\n\n    if (!$attrib['id'])\n        $attrib['id'] = 'rcmcountdisplay';\n\n    $RCMAIL->output->add_gui_object('countdisplay', $attrib['id']);\n\n    if ($attrib['label'])\n      $_SESSION['contactcountdisplay'] = $attrib['label'];\n\n    return html::span($attrib, $RCMAIL->gettext('loading'));\n}\n\n\nfunction rcmail_get_rowcount_text($result=null)\n{\n    global $RCMAIL, $CONTACTS, $PAGE_SIZE;\n\n    // read nr of contacts\n    if (!$result) {\n        $result = $CONTACTS->get_result();\n    }\n\n    if ($result->count == 0)\n        $out = $RCMAIL->gettext('nocontactsfound');\n    else\n        $out = $RCMAIL->gettext(array(\n            'name'  => $_SESSION['contactcountdisplay'] ?: 'contactsfromto',\n            'vars'  => array(\n            'from'  => $result->first + 1,\n            'to'    => min($result->count, $result->first + $PAGE_SIZE),\n            'count' => $result->count)\n        ));\n\n    return $out;\n}\n\n\nfunction rcmail_get_type_label($type)\n{\n    global $RCMAIL;\n\n    $label = 'type'.$type;\n    if ($RCMAIL->text_exists($label, '*', $domain))\n        return $RCMAIL->gettext($label, $domain);\n    else if (preg_match('/\\w+(\\d+)$/', $label, $m)\n            && ($label = preg_replace('/(\\d+)$/', '', $label))\n            && $RCMAIL->text_exists($label, '*', $domain))\n        return $RCMAIL->gettext($label, $domain) . ' ' . $m[1];\n\n    return ucfirst($type);\n}\n\n\nfunction rcmail_contact_form($form, $record, $attrib = null)\n{\n    global $RCMAIL;\n\n    // group fields\n    $head_fields = array(\n        'source'       => array('source'),\n        'names'        => array('prefix','firstname','middlename','surname','suffix'),\n        'displayname'  => array('name'),\n        'nickname'     => array('nickname'),\n        'organization' => array('organization'),\n        'department'   => array('department'),\n        'jobtitle'     => array('jobtitle'),\n    );\n\n    // Allow plugins to modify contact form content\n    $plugin = $RCMAIL->plugins->exec_hook('contact_form', array(\n        'form' => $form, 'record' => $record, 'head_fields' => $head_fields));\n\n    $form        = $plugin['form'];\n    $record      = $plugin['record'];\n    $head_fields = $plugin['head_fields'];\n    $edit_mode   = $RCMAIL->action != 'show' && $RCMAIL->action != 'print';\n    $compact     = rcube_utils::get_boolean($attrib['compact-form']);\n    $use_labels  = rcube_utils::get_boolean($attrib['use-labels']);\n    $with_source = rcube_utils::get_boolean($attrib['with-source']);\n    $out         = '';\n\n    if ($attrib['deleteicon']) {\n        $del_button = html::img(array('src' => $RCMAIL->output->get_skin_file($attrib['deleteicon']), 'alt' => $RCMAIL->gettext('delete')));\n    }\n    else {\n        $del_button = html::span('inner', $RCMAIL->gettext('delete'));\n    }\n\n    unset($attrib['deleteicon']);\n\n    // get default coltypes\n    $coltypes = $GLOBALS['CONTACT_COLTYPES'];\n    $coltype_labels = array();\n\n    foreach ($coltypes as $col => $prop) {\n        if ($prop['subtypes']) {\n            $subtype_names = array_map('rcmail_get_type_label', $prop['subtypes']);\n            $select_subtype = new html_select(array('name' => '_subtype_'.$col.'[]', 'class' => 'contactselectsubtype custom-select', 'title' => $prop['label'] . ' ' . $RCMAIL->gettext('type')));\n            $select_subtype->add($subtype_names, $prop['subtypes']);\n            $coltypes[$col]['subtypes_select'] = $select_subtype->show();\n        }\n        if ($prop['childs']) {\n            foreach ($prop['childs'] as $childcol => $cp)\n                $coltype_labels[$childcol] = array('label' => $cp['label']);\n        }\n    }\n\n    foreach ($form as $section => $fieldset) {\n        // skip empty sections\n        if (empty($fieldset['content'])) {\n            continue;\n        }\n\n        $select_add = new html_select(array('class' => 'addfieldmenu', 'rel' => $section, 'data-compact' => $compact ? \"true\" : null));\n        $select_add->add($RCMAIL->gettext('addfield'), '');\n\n        // render head section with name fields (not a regular list of rows)\n        if ($section == 'head') {\n            $content = '';\n\n            // unset display name if it is composed from name parts\n            if ($record['name'] == rcube_addressbook::compose_display_name(array('name' => '') + (array)$record)) {\n                unset($record['name']);\n            }\n\n            foreach ($head_fields as $blockname => $colnames) {\n                $fields     = '';\n                $block_attr = array('class' => $blockname  . (count($colnames) == 1 ? ' row' : ''));\n\n                foreach ($colnames as $col) {\n                    if ($col == 'source') {\n                        if (!$with_source || !($source = $RCMAIL->output->get_env('sourcename'))) {\n                            continue;\n                        }\n\n                        if (!$edit_mode) {\n                            $record['source'] = $RCMAIL->gettext('addressbook') . ': ' . $source;\n                        }\n                        else if ($RCMAIL->action == 'add') {\n                            $record['source'] = $source;\n                        }\n                        else {\n                            continue;\n                        }\n                    }\n                    // skip cols unknown to the backend\n                    else if (!$coltypes[$col]) {\n                        continue;\n                    }\n\n                    // skip cols not listed in the form definition\n                    if (is_array($fieldset['content']) && !in_array($col, array_keys($fieldset['content']))) {\n                        continue;\n                    }\n\n                    // only string values are expected here\n                    if (is_array($record[$col])) {\n                        $record[$col] = join(' ', $record[$col]);\n                    }\n\n                    if (!$edit_mode) {\n                        if (!empty($record[$col])) {\n                            $fields .= html::span('namefield ' . $col, rcube::Q($record[$col])) . ' ';\n                        }\n                    }\n                    else {\n                        $colprop = (array)$fieldset['content'][$col] + (array)$coltypes[$col];\n                        $visible = true;\n\n                        if (empty($colprop['id'])) {\n                            $colprop['id'] = 'ff_' . $col;\n                        }\n\n                        if (empty($record[$col]) && !$colprop['visible']) {\n                            $visible          = false;\n                            $colprop['style'] = $use_labels ? null : 'display:none';\n                            $select_add->add($colprop['label'], $col);\n                        }\n\n                        if ($col == 'source') {\n                            $input = rcmail_source_selector(array('id' => $colprop['id']));\n                        }\n                        else {\n                            $input = rcube_output::get_edit_field($col, $record[$col], $colprop, $colprop['type']);\n                        }\n\n                        if ($use_labels) {\n                            $_content = html::label($colprop['id'], rcube::Q($colprop['label'])) . html::div(null, $input);\n                            if (count($colnames) > 1) {\n                                $fields .= html::div(array('class' => 'row', 'style' => $visible ? null : 'display:none'), $_content);\n                            }\n                            else {\n                                $fields .= $_content;\n                                $block_attr['style'] = $visible ? null : 'display:none';\n                            }\n                        }\n                        else {\n                            $fields .= $input;\n                        }\n                    }\n                }\n\n                if ($fields) {\n                    $content .= html::div($block_attr, $fields);\n                }\n            }\n\n            if ($edit_mode) {\n                $content .= html::p('addfield', $select_add->show(null));\n            }\n\n            $legend = !empty($fieldset['name']) ? html::tag('legend', null, rcube::Q($fieldset['name'])) : '';\n            $out   .= html::tag('fieldset', $attrib, $legend . $content, html::$common_attrib) .\"\\n\";\n            continue;\n        }\n\n        $content = '';\n        if (is_array($fieldset['content'])) {\n            foreach ($fieldset['content'] as $col => $colprop) {\n                // remove subtype part of col name\n                list($field, $subtype) = explode(':', $col);\n                if (!$subtype) $subtype = 'home';\n                $fullkey = $col.':'.$subtype;\n\n                // skip cols unknown to the backend\n                if (!$coltypes[$field] && empty($colprop['value'])) {\n                    continue;\n                }\n\n                // merge colprop with global coltype configuration\n                if ($coltypes[$field]) {\n                    $colprop += $coltypes[$field];\n                }\n\n                $label = isset($colprop['label']) ? $colprop['label'] : $RCMAIL->gettext($col);\n\n                // prepare subtype selector in edit mode\n                if ($edit_mode && is_array($colprop['subtypes'])) {\n                    $subtype_names = array_map('rcmail_get_type_label', $colprop['subtypes']);\n                    $select_subtype = new html_select(array('name' => '_subtype_'.$col.'[]', 'class' => 'contactselectsubtype', 'title' => $colprop['label'] . ' ' . $RCMAIL->gettext('type')));\n                    $select_subtype->add($subtype_names, $colprop['subtypes']);\n                }\n                else {\n                    $select_subtype = null;\n                }\n\n                if (!empty($colprop['value'])) {\n                    $values = (array)$colprop['value'];\n                }\n                else {\n                    // iterate over possible subtypes and collect values with their subtype\n                    if (is_array($colprop['subtypes'])) {\n                        $values = $subtypes = array();\n                        foreach (rcube_addressbook::get_col_values($field, $record) as $st => $vals) {\n                            foreach ((array)$vals as $value) {\n                                $i = count($values);\n                                $subtypes[$i] = $st;\n                                $values[$i] = $value;\n                            }\n                            // TODO: add $st to $select_subtype if missing ?\n                        }\n                    }\n                    else {\n                        $values   = $record[$fullkey] ?: $record[$field];\n                        $subtypes = null;\n                    }\n                }\n\n                // hack: create empty values array to force this field to be displayed\n                if (empty($values) && $colprop['visible']) {\n                    $values = array('');\n                }\n\n                if (!is_array($values)) {\n                    // $values can be an object, don't use (array)$values syntax\n                    $values = !empty($values) ? array($values) : array();\n                }\n\n                $rows = '';\n                foreach ($values as $i => $val) {\n                    if ($subtypes[$i]) {\n                        $subtype = $subtypes[$i];\n                    }\n\n                    $colprop['id'] = 'ff_' . $col . intval($coltypes[$field]['count']);\n                    $row_class     = 'row';\n\n                    // render composite field\n                    if ($colprop['type'] == 'composite') {\n                        $row_class .= ' composite';\n                        $composite  = array();\n                        $template   = $RCMAIL->config->get($col . '_template', '{'.join('} {', array_keys($colprop['childs'])).'}');\n                        $j = 0;\n\n                        foreach ($colprop['childs'] as $childcol => $cp) {\n                            if (!empty($val) && is_array($val)) {\n                                $childvalue = $val[$childcol] ?: $val[$j];\n                            }\n                            else {\n                                $childvalue = '';\n                            }\n\n                            if ($edit_mode) {\n                                if ($colprop['subtypes'] || $colprop['limit'] != 1) $cp['array'] = true;\n                                $composite['{'.$childcol.'}'] = rcube_output::get_edit_field($childcol, $childvalue, $cp, $cp['type']) . ' ';\n                            }\n                            else {\n                                $childval = $cp['render_func'] ? call_user_func($cp['render_func'], $childvalue, $childcol) : rcube::Q($childvalue);\n                                $composite['{'.$childcol.'}'] = html::span('data ' . $childcol, $childval) . ' ';\n                            }\n                            $j++;\n                        }\n\n                        $coltypes[$field] += (array)$colprop;\n                        $coltypes[$field]['count']++;\n                        $val = preg_replace('/\\{\\w+\\}/', '', strtr($template, $composite));\n\n                        if ($compact) {\n                            $val = html::div('content', str_replace('<br/>', '', $val));\n                        }\n                    }\n                    else if ($edit_mode) {\n                        // call callback to render/format value\n                        if ($colprop['render_func']) {\n                            $val = call_user_func($colprop['render_func'], $val, $col);\n                        }\n\n                        $coltypes[$field] = (array)$colprop + $coltypes[$field];\n\n                        if ($colprop['subtypes'] || $colprop['limit'] != 1) {\n                            $colprop['array'] = true;\n                        }\n\n                        // load jquery UI datepicker for date fields\n                        if ($colprop['type'] == 'date') {\n                            $colprop['class'] .= ($colprop['class'] ? ' ' : '') . 'datepicker';\n                            if (!$colprop['render_func']) {\n                                $val = rcmail_format_date_col($val);\n                            }\n                        }\n\n                        $val = rcube_output::get_edit_field($col, $val, $colprop, $colprop['type']);\n                        $coltypes[$field]['count']++;\n                    }\n                    else if ($colprop['render_func']) {\n                        $val = call_user_func($colprop['render_func'], $val, $col);\n                    }\n                    else if (is_array($colprop['options']) && isset($colprop['options'][$val])) {\n                        $val = $colprop['options'][$val];\n                    }\n                    else {\n                        $val = rcube::Q($val);\n                    }\n\n                    // use subtype as label\n                    if ($colprop['subtypes']) {\n                        $label = rcmail_get_type_label($subtype);\n                    }\n\n                    $_del_btn = html::a(array('href' => '#del', 'class' => 'contactfieldbutton deletebutton', 'title' => $RCMAIL->gettext('delete'), 'rel' => $col), $del_button);\n\n                    // add delete button/link\n                    if (!$compact && $edit_mode && !($colprop['visible'] && $colprop['limit'] == 1)) {\n                        $val .= $_del_btn;\n                    }\n\n                    // display row with label\n                    if ($label) {\n                        if ($RCMAIL->action == 'print') {\n                            $_label = rcube::Q($colprop['label'] . ($label != $colprop['label'] ? ' (' . $label . ')' : ''));\n                            if (!$compact) {\n                                $_label = html::div('contactfieldlabel label', $_label);\n                            }\n                        }\n                        else if ($select_subtype) {\n                            $_label = $select_subtype->show($subtype);\n                            if (!$compact) {\n                                $_label = html::div('contactfieldlabel label', $_label);\n                            }\n                        }\n                        else {\n                            $_label = html::label(array('class' => 'contactfieldlabel label', 'for' => $colprop['id']), rcube::Q($label));\n                        }\n\n                        if (!$compact) {\n                            $val = html::div('contactfieldcontent ' . $colprop['type'], $val);\n                        }\n                        else {\n                            $val .= $_del_btn;\n                        }\n\n                        $rows .= html::div($row_class, $_label . $val);\n                    }\n                    // row without label\n                    else {\n                        $rows .= html::div($row_class, $compact ? $val : html::div('contactfield', $val));\n                    }\n                }\n\n                // add option to the add-field menu\n                if (!$colprop['limit'] || $coltypes[$field]['count'] < $colprop['limit']) {\n                    $select_add->add($colprop['label'], $col);\n                    $select_add->_count++;\n                }\n\n                // wrap rows in fieldgroup container\n                if ($rows) {\n                    $c_class    = 'contactfieldgroup ' . ($colprop['subtypes'] ? 'contactfieldgroupmulti ' : '') . 'contactcontroller' . $col;\n                    $with_label = $colprop['subtypes'] && $RCMAIL->action != 'print';\n                    $content   .= html::tag(\n                        'fieldset',\n                        array('class' => $c_class, 'style' => ($rows ? null : 'display:none')),\n                        ($with_label ? html::tag('legend', null, rcube::Q($colprop['label'])) : ' ') . $rows\n                    );\n                }\n            }\n\n            if (!$content && (!$edit_mode || !$select_add->_count)) {\n                continue;\n            }\n\n            // also render add-field selector\n            if ($edit_mode) {\n                $content .= html::p('addfield', $select_add->show(null, array('style' => $select_add->_count ? null : 'display:none')));\n            }\n\n            $content = html::div(array('id' => 'contactsection' . $section), $content);\n        }\n        else {\n            $content = $fieldset['content'];\n        }\n\n        if ($content) {\n            $out .= html::tag('fieldset', array('class' => $attrib['fieldset-class']),\n                html::tag('legend', null, rcube::Q($fieldset['name'])) . $content) . \"\\n\";\n        }\n    }\n\n    if ($edit_mode) {\n        $RCMAIL->output->set_env('coltypes', $coltypes + $coltype_labels);\n        $RCMAIL->output->set_env('delbutton', $del_button);\n        $RCMAIL->output->add_label('delete');\n    }\n\n    return $out;\n}\n\n\nfunction rcmail_contact_photo($attrib)\n{\n    global $SOURCE_ID, $CONTACTS, $CONTACT_COLTYPES, $RCMAIL;\n\n    if ($result = $CONTACTS->get_result()) {\n        $record = $result->first();\n    }\n\n    if ($record['_type'] == 'group' && $attrib['placeholdergroup']) {\n        $photo_img = $RCMAIL->output->abs_url($attrib['placeholdergroup'], true);\n    }\n    else {\n        $photo_img = $attrib['placeholder'] ? $RCMAIL->output->abs_url($attrib['placeholder'], true) : 'program/resources/blank.gif';\n    }\n\n    $photo_img = $RCMAIL->output->asset_url($photo_img);\n\n    $RCMAIL->output->set_env('photo_placeholder', $photo_img);\n\n    unset($attrib['placeholder']);\n\n    $plugin = $RCMAIL->plugins->exec_hook('contact_photo', array('record' => $record, 'data' => $record['photo']));\n\n    // check if we have photo data from contact form\n    if ($GLOBALS['EDIT_RECORD']) {\n        $rec = $GLOBALS['EDIT_RECORD'];\n        if ($rec['photo'] == '-del-') {\n            $record['photo'] = '';\n        }\n        else if ($_SESSION['contacts']['files'][$rec['photo']]) {\n            $record['photo'] = $file_id = $rec['photo'];\n        }\n    }\n\n    if ($plugin['url'])\n        $photo_img = $plugin['url'];\n    else if (preg_match('!^https?://!i', $record['photo']))\n        $photo_img = $record['photo'];\n    else if ($record['photo']) {\n        $url = array('_action' => 'photo', '_cid' => $record['ID'], '_source' => $SOURCE_ID);\n        if ($file_id) {\n            $url['_photo'] = $ff_value = $file_id;\n        }\n        $photo_img = $RCMAIL->url($url);\n    }\n    else {\n        $ff_value = '-del-'; // will disable delete-photo action\n    }\n\n    $content = html::div($attrib, html::img(array(\n            'src'     => $photo_img,\n            'alt'     => $RCMAIL->gettext('contactphoto'),\n            'onerror' => 'this.src = rcmail.env.photo_placeholder; this.onerror = null',\n    )));\n\n    if ($CONTACT_COLTYPES['photo'] && ($RCMAIL->action == 'edit' || $RCMAIL->action == 'add')) {\n        $RCMAIL->output->add_gui_object('contactphoto', $attrib['id']);\n        $hidden = new html_hiddenfield(array('name' => '_photo', 'id' => 'ff_photo', 'value' => $ff_value));\n        $content .= $hidden->show();\n    }\n\n    return $content;\n}\n\n\nfunction rcmail_format_date_col($val)\n{\n    global $RCMAIL;\n    return $RCMAIL->format_date($val, $RCMAIL->config->get('date_format', 'Y-m-d'), false);\n}\n\n/**\n * Updates saved search after data changed\n */\nfunction rcmail_search_update($return = false)\n{\n    global $RCMAIL;\n\n    if (($search_request = $_REQUEST['_search']) && isset($_SESSION['contact_search'][$search_request])\n        && is_array($_SESSION['contact_search'][$search_request])\n    ) {\n        $search   = $_SESSION['contact_search'][$search_request];\n        $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n        $afields  = $return ? $RCMAIL->config->get('contactlist_fields') : array('name', 'email');\n        $records  = array();\n\n        foreach ($search as $s => $set) {\n            $source = $RCMAIL->get_address_book($s);\n\n            // reset page\n            $source->set_page(1);\n            $source->set_pagesize(9999);\n            $source->set_search_set($set);\n\n            // get records\n            $result = $source->list_records($afields);\n\n            if (!$result->count) {\n                unset($search[$s]);\n                continue;\n            }\n\n            if ($return) {\n                while ($row = $result->next()) {\n                    $row['sourceid'] = $s;\n                    $key = rcube_addressbook::compose_contact_key($row, $sort_col);\n                    $records[$key] = $row;\n                }\n                unset($result);\n            }\n\n            $search[$s] = $source->get_search_set();\n        }\n\n        $_SESSION['contact_search'][$search_request] = $search;\n\n        return $records;\n    }\n\n    return false;\n}\n\n/**\n * Returns contact ID(s) and source(s) from GET/POST data\n *\n * @return array List of contact IDs per-source\n */\nfunction rcmail_get_cids($filter = null, $request_type = rcube_utils::INPUT_GPC)\n{\n    // contact ID (or comma-separated list of IDs) is provided in two\n    // forms. If _source is an empty string then the ID is a string\n    // containing contact ID and source name in form: <ID>-<SOURCE>\n\n    $cid    = rcube_utils::get_input_value('_cid', $request_type);\n    $source = (string) rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n\n    if (is_array($cid)) {\n        return $cid;\n    }\n\n    if (!preg_match('/^[a-zA-Z0-9\\+\\/=_-]+(,[a-zA-Z0-9\\+\\/=_-]+)*$/', $cid)) {\n        return array();\n    }\n\n    $cid        = explode(',', $cid);\n    $got_source = strlen($source);\n    $result     = array();\n\n    // create per-source contact IDs array\n    foreach ($cid as $id) {\n        // extract source ID from contact ID (it's there in search mode)\n        // see #1488959 and #1488862 for reference\n        if (!$got_source) {\n            if ($sep = strrpos($id, '-')) {\n                $contact_id = substr($id, 0, $sep);\n                $source_id  = (string) substr($id, $sep+1);\n                if (strlen($source_id)) {\n                    $result[$source_id][] = $contact_id;\n                }\n            }\n        }\n        else {\n            if (substr($id, -($got_source+1)) === \"-$source\") {\n                $id = substr($id, 0, -($got_source+1));\n            }\n            $result[$source][] = $id;\n        }\n    }\n\n    return $filter !== null ? $result[$filter] : $result;\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Search action (and form) for address book contacts                  |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\nif ($RCMAIL->action == 'search-create') {\n    $id   = rcube_utils::get_input_value('_search', rcube_utils::INPUT_POST);\n    $name = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true);\n\n    if (($params = $_SESSION['contact_search_params']) && $params['id'] == $id) {\n        $data = array(\n            'type' => rcube_user::SEARCH_ADDRESSBOOK,\n            'name' => $name,\n            'data' => array(\n                'fields' => $params['data'][0],\n                'search' => $params['data'][1],\n            ),\n        );\n\n        $plugin = $RCMAIL->plugins->exec_hook('saved_search_create', array('data' => $data));\n\n        if (!$plugin['abort'])\n            $result = $RCMAIL->user->insert_search($plugin['data']);\n        else\n            $result = $plugin['result'];\n    }\n\n    if ($result) {\n        $OUTPUT->show_message('savedsearchcreated', 'confirmation');\n        $OUTPUT->command('insert_saved_search', rcube::Q($name), rcube::Q($result));\n    }\n    else\n        $OUTPUT->show_message($plugin['message'] ?: 'savedsearchcreateerror', 'error');\n\n    $OUTPUT->send();\n}\n\nif ($RCMAIL->action == 'search-delete') {\n    $id = rcube_utils::get_input_value('_sid', rcube_utils::INPUT_POST);\n\n    $plugin = $RCMAIL->plugins->exec_hook('saved_search_delete', array('id' => $id));\n\n    if (!$plugin['abort'])\n        $result = $RCMAIL->user->delete_search($id);\n    else\n        $result = $plugin['result'];\n\n    if ($result) {\n        $OUTPUT->show_message('savedsearchdeleted', 'confirmation');\n        $OUTPUT->command('remove_search_item', rcube::Q($id));\n        // contact list will be cleared, clear also page counter\n        $OUTPUT->command('set_rowcount', $RCMAIL->gettext('nocontactsfound'));\n        $OUTPUT->set_env('pagecount', 0);\n    }\n    else\n        $OUTPUT->show_message($plugin['message'] ?: 'savedsearchdeleteerror', 'error');\n\n    $OUTPUT->send();\n}\n\n\nif (!isset($_GET['_form'])) {\n    rcmail_contact_search();\n}\n\n$OUTPUT->add_handler('searchform', 'rcmail_contact_search_form');\n$OUTPUT->send('contactsearch');\n\n\nfunction rcmail_contact_search()\n{\n    global $RCMAIL, $OUTPUT, $SEARCH_MODS_DEFAULT, $PAGE_SIZE;\n\n    $adv = isset($_POST['_adv']);\n    $sid = rcube_utils::get_input_value('_sid', rcube_utils::INPUT_GET);\n\n    // get search criteria from saved search\n    if ($sid && ($search = $RCMAIL->user->get_search($sid))) {\n        $fields = $search['data']['fields'];\n        $search = $search['data']['search'];\n    }\n    // get fields/values from advanced search form\n    else if ($adv) {\n        foreach (array_keys($_POST) as $key) {\n            $s = trim(rcube_utils::get_input_value($key, rcube_utils::INPUT_POST, true));\n            if (strlen($s) && preg_match('/^_search_([a-zA-Z0-9_-]+)$/', $key, $m)) {\n                $search[] = $s;\n                $fields[] = $m[1];\n            }\n        }\n\n        if (empty($fields)) {\n            // do nothing, show the form again\n            return;\n        }\n    }\n    // quick-search\n    else {\n        $search = trim(rcube_utils::get_input_value('_q', rcube_utils::INPUT_GET, true));\n        $fields = rcube_utils::get_input_value('_headers', rcube_utils::INPUT_GET);\n\n        if (empty($fields)) {\n            $fields = array_keys($SEARCH_MODS_DEFAULT);\n        }\n        else {\n            $fields = array_filter(explode(',', $fields));\n        }\n\n        // update search_mods setting\n        $old_mods = $RCMAIL->config->get('addressbook_search_mods');\n        $search_mods = array_fill_keys($fields, 1);\n        if ($old_mods != $search_mods) {\n            $RCMAIL->user->save_prefs(array('addressbook_search_mods' => $search_mods));\n        }\n\n        if (in_array('*', $fields)) {\n            $fields = '*';\n        }\n    }\n\n    // Values matching mode\n    $mode = (int) $RCMAIL->config->get('addressbook_search_mode');\n    $mode |= rcube_addressbook::SEARCH_GROUPS;\n\n    // get sources list\n    $sources    = $RCMAIL->get_address_sources();\n    $search_set = array();\n    $records    = array();\n    $sort_col   = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $afields = $RCMAIL->config->get('contactlist_fields');\n\n    foreach ($sources as $s) {\n        $source = $RCMAIL->get_address_book($s['id']);\n\n        // check if search fields are supported....\n        if (is_array($fields)) {\n            $cols = $source->coltypes[0] ? array_flip($source->coltypes) : $source->coltypes;\n            $supported = 0;\n\n            foreach ($fields as $f) {\n                if (array_key_exists($f, $cols)) {\n                    $supported ++;\n                }\n            }\n\n            // in advanced search we require all fields (AND operator)\n            // in quick search we require at least one field (OR operator)\n            if (($adv && $supported < count($fields)) || (!$adv && !$supported)) {\n                continue;\n            }\n        }\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(9999);\n\n        // get contacts count\n        $result = $source->search($fields, $search, $mode, false);\n\n        if (!$result->count) {\n            continue;\n        }\n\n        // get records\n        $result = $source->list_records($afields);\n\n        while ($row = $result->next()) {\n            $row['sourceid'] = $s['id'];\n            $key = rcube_addressbook::compose_contact_key($row, $sort_col);\n            $records[$key] = $row;\n        }\n\n        unset($result);\n        $search_set[$s['id']] = $source->get_search_set();\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n\n    // cut first-page records\n    if ($PAGE_SIZE < $count) {\n        $records = array_slice($records, 0, $PAGE_SIZE);\n    }\n\n    $result->records = array_values($records);\n\n    // search request ID\n    $search_request = md5('addr'\n        .(is_array($fields) ? implode(',', $fields) : $fields)\n        .(is_array($search) ? implode(',', $search) : $search));\n\n    // save search settings in session\n    $_SESSION['contact_search'][$search_request] = $search_set;\n    $_SESSION['contact_search_params'] = array('id' => $search_request, 'data' => array($fields, $search));\n    $_SESSION['page'] = 1;\n\n    if ($adv)\n        $OUTPUT->command('list_contacts_clear');\n\n    if ($result->count > 0) {\n        // create javascript list\n        rcmail_js_contacts_list($result);\n        $OUTPUT->show_message('contactsearchsuccessful', 'confirmation', array('nr' => $result->count));\n    }\n    else {\n        $OUTPUT->show_message('nocontactsfound', 'notice');\n    }\n\n    // update message count display\n    $OUTPUT->set_env('search_request', $search_request);\n    $OUTPUT->set_env('pagecount', ceil($result->count / $PAGE_SIZE));\n    $OUTPUT->command('set_rowcount', rcmail_get_rowcount_text($result));\n    // Re-set current source\n    $OUTPUT->set_env('search_id', $sid);\n    $OUTPUT->set_env('source', '');\n    $OUTPUT->set_env('group', '');\n    // Re-set list header\n    $OUTPUT->command('set_group_prop', null);\n\n    if (!$sid) {\n        // unselect currently selected directory/group\n        $OUTPUT->command('unselect_directory');\n        // enable \"Save search\" command\n        $OUTPUT->command('enable_command', 'search-create', true);\n    }\n    $OUTPUT->command('update_group_commands');\n\n    // send response\n    $OUTPUT->send();\n}\n\nfunction rcmail_contact_search_form($attrib)\n{\n    global $RCMAIL, $CONTACT_COLTYPES;\n\n    $i_size       = $attrib['size'] ?: 30;\n    $short_labels = rcube_utils::get_boolean($attrib['short-legend-labels']);\n\n    $form = array(\n        'main' => array(\n            'name'    => $RCMAIL->gettext('properties'),\n            'content' => array(\n            ),\n        ),\n        'personal' => array(\n            'name'    => $RCMAIL->gettext($short_labels ? 'personal' : 'personalinfo'),\n            'content' => array(\n            ),\n        ),\n        'other' => array(\n            'name'    => $RCMAIL->gettext('other'),\n            'content' => array(\n            ),\n        ),\n    );\n\n    // get supported coltypes from all address sources\n    $sources  = $RCMAIL->get_address_sources();\n    $coltypes = array();\n\n    foreach ($sources as $s) {\n        $CONTACTS = $RCMAIL->get_address_book($s['id']);\n\n        if (is_array($CONTACTS->coltypes)) {\n            $contact_cols = $CONTACTS->coltypes[0] ? array_flip($CONTACTS->coltypes) : $CONTACTS->coltypes;\n            $coltypes     = array_merge($coltypes, $contact_cols);\n        }\n    }\n\n    // merge supported coltypes with $CONTACT_COLTYPES\n    foreach ($coltypes as $col => $colprop) {\n        $coltypes[$col] = $CONTACT_COLTYPES[$col] ? array_merge($CONTACT_COLTYPES[$col], (array)$colprop) : (array)$colprop;\n    }\n\n    // build form fields list\n    foreach ($coltypes as $col => $colprop) {\n        if ($colprop['type'] != 'image' && !$colprop['nosearch']) {\n            $ftype    = $colprop['type'] == 'select' ? 'select' : 'text';\n            $label    = isset($colprop['label']) ? $colprop['label'] : $RCMAIL->gettext($col);\n            $category = $colprop['category'] ?: 'other';\n\n            // load jquery UI datepicker for date fields\n            if ($colprop['type'] == 'date') {\n                $colprop['class'] .= ($colprop['class'] ? ' ' : '') . 'datepicker';\n            }\n            else if ($ftype == 'text') {\n                $colprop['size'] = $i_size;\n            }\n\n            $colprop['id'] = '_search_' . $col;\n\n            $content  = html::div('row',\n                html::label(array('class' => 'contactfieldlabel label', 'for' => $colprop['id']), rcube::Q($label))\n                . html::div('contactfieldcontent', rcube_output::get_edit_field('search_'.$col, '', $colprop, $ftype)));\n\n            $form[$category]['content'][] = $content;\n        }\n    }\n\n    $hiddenfields = new html_hiddenfield();\n    $hiddenfields->add(array('name' => '_adv', 'value' => 1));\n\n    $out = $RCMAIL->output->request_form(array(\n            'name'    => 'form',\n            'method'  => 'post',\n            'task'    => $RCMAIL->task,\n            'action'  => 'search',\n            'noclose' => true,\n        ) + $attrib, $hiddenfields->show());\n\n    $RCMAIL->output->add_gui_object('editform', $attrib['id']);\n\n    unset($attrib['name']);\n    unset($attrib['id']);\n\n    foreach ($form as $f) {\n        if (!empty($f['content'])) {\n            $content = html::div('contactfieldgroup', join(\"\\n\", $f['content']));\n\n            $out .= html::tag('fieldset', $attrib,\n                html::tag('legend', null, rcube::Q($f['name']))\n                . $content) . \"\\n\";\n        }\n    }\n\n    return $out . '</form>';\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Send contacts list to client (as remote response)                   |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n$afields       = $RCMAIL->config->get('contactlist_fields');\n$addr_sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n$page_size     = $RCMAIL->config->get('addressbook_pagesize', $RCMAIL->config->get('pagesize', 50));\n$list_page     = max(1, intval($_GET['_page']));\n$jsresult      = array();\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['contact_search'][$_REQUEST['_search']])\n    && is_array($_SESSION['contact_search'][$_REQUEST['_search']])\n) {\n    $search = $_SESSION['contact_search'][$_REQUEST['_search']];\n    $sparam = $_SESSION['contact_search_params']['id'] == $_REQUEST['_search'] ? $_SESSION['contact_search_params']['data'] : array();\n\n    // get records from all sources\n    foreach ($search as $s => $set) {\n        $CONTACTS = $RCMAIL->get_address_book($s);\n\n        // list matching groups of this source (on page one)\n        if ($sparam[1] && $CONTACTS->groups && $list_page == 1) {\n            $jsresult += rcmail_compose_contact_groups($CONTACTS, $s, $sparam[1], (int)$RCMAIL->config->get('addressbook_search_mode'));\n        }\n\n        // reset page\n        $CONTACTS->set_page(1);\n        $CONTACTS->set_pagesize(9999);\n        $CONTACTS->set_search_set($set);\n\n        // get records\n        $result = $CONTACTS->list_records($afields);\n\n        while ($row = $result->next()) {\n            $row['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($row, $addr_sort_col);\n            $records[$key] = $row;\n        }\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $first  = ($list_page-1) * $page_size;\n    $result = new rcube_result_set($count, $first);\n\n    // we need only records for current page\n    if ($page_size < $count) {\n        $records = array_slice($records, $first, $page_size);\n    }\n\n    $result->records = array_values($records);\n}\n// list contacts from selected source\nelse {\n    $source = rcube_utils::get_input_value('_source', rcube_utils::INPUT_GPC);\n    $CONTACTS = $RCMAIL->get_address_book($source);\n\n    if ($CONTACTS && $CONTACTS->ready) {\n        // set list properties\n        $CONTACTS->set_pagesize($page_size);\n        $CONTACTS->set_page($list_page);\n\n        if ($group_id = rcube_utils::get_input_value('_gid', rcube_utils::INPUT_GET)) {\n            $CONTACTS->set_group($group_id);\n        }\n        // list groups of this source (on page one)\n        else if ($CONTACTS->groups && $CONTACTS->list_page == 1) {\n            $jsresult = rcmail_compose_contact_groups($CONTACTS, $source);\n        }\n\n        // get contacts for this user\n        $result = $CONTACTS->list_records($afields);\n    }\n}\n\nif (!empty($result) && !$result->count && $result->searchonly) {\n    $OUTPUT->show_message('contactsearchonly', 'notice');\n}\nelse if (!empty($result) && $result->count > 0) {\n    // create javascript list\n    while ($row = $result->next()) {\n        $name = rcube_addressbook::compose_list_name($row);\n\n        // add record for every email address of the contact\n        $emails = $CONTACTS->get_col_values('email', $row, true);\n        foreach ($emails as $i => $email) {\n            $source = $row['sourceid'] ?: $source;\n            $row_id = $source.'-'.$row['ID'].'-'.$i;\n            $jsresult[$row_id] = format_email_recipient($email, $name);\n            $classname = $row['_type'] == 'group' ? 'group' : 'person';\n            $keyname = $row['_type'] == 'group' ? 'contactgroup' : 'contact';\n\n            $OUTPUT->command('add_contact_row', $row_id, array(\n                $keyname => html::a(array('title' => $email), rcube::Q($name ?: $email) .\n                    ($name && count($emails) > 1 ? '&nbsp;' . html::span('email', rcube::Q($email)) : '')\n                )), $classname);\n        }\n    }\n}\n\n// update env\n$OUTPUT->set_env('contactdata', $jsresult);\n$OUTPUT->set_env('pagecount', ceil($result->count / $page_size));\n$OUTPUT->command('set_page_buttons');\n\n// send response\n$OUTPUT->send();\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Search contacts from the address book widget                        |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n$search        = rcube_utils::get_input_value('_q', rcube_utils::INPUT_GPC, true);\n$sources       = $RCMAIL->get_address_sources();\n$search_mode   = (int) $RCMAIL->config->get('addressbook_search_mode');\n$addr_sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n$afields       = $RCMAIL->config->get('contactlist_fields');\n$page_size     = $RCMAIL->config->get('addressbook_pagesize', $RCMAIL->config->get('pagesize', 50));\n$records       = array();\n$search_set    = array();\n$jsresult      = array();\n$search_mode  |= rcube_addressbook::SEARCH_GROUPS;\n\nforeach ($sources as $s) {\n    $source = $RCMAIL->get_address_book($s['id']);\n    $source->set_page(1);\n    $source->set_pagesize(9999);\n\n    // list matching groups of this source\n    if ($source->groups) {\n        $jsresult += rcmail_compose_contact_groups($source, $s['id'], $search, $search_mode);\n    }\n\n    // get contacts count\n    $result = $source->search($afields, $search, $search_mode, true, true, 'email');\n\n    if (!$result->count) {\n        continue;\n    }\n\n    while ($row = $result->next()) {\n        $row['sourceid'] = $s['id'];\n        $key = rcube_addressbook::compose_contact_key($row, $addr_sort_col);\n        $records[$key] = $row;\n    }\n\n    $search_set[$s['id']] = $source->get_search_set();\n    unset($result);\n}\n\n$group_count = count($jsresult);\n\n// sort the records\nksort($records, SORT_LOCALE_STRING);\n\n// create resultset object\n$count  = count($records);\n$result = new rcube_result_set($count);\n\n// select the requested page\nif ($page_size < $count) {\n    $records = array_slice($records, $result->first, $page_size);\n}\n\n$result->records = array_values($records);\n\nif (!empty($result) && $result->count > 0) {\n    // create javascript list\n    while ($row = $result->next()) {\n        $name      = rcube_addressbook::compose_list_name($row);\n        $classname = $row['_type'] == 'group' ? 'group' : 'person';\n        $keyname   = $row['_type'] == 'group' ? 'contactgroup' : 'contact';\n\n        // add record for every email address of the contact\n        // (same as in list_contacts.inc)\n        $emails = $source->get_col_values('email', $row, true);\n        foreach ($emails as $i => $email) {\n            $row_id = $row['sourceid'].'-'.$row['ID'].'-'.$i;\n            $jsresult[$row_id] = format_email_recipient($email, $name);\n            $title = rcube_addressbook::compose_search_name($row, $email, $name);\n\n            $OUTPUT->command('add_contact_row', $row_id, array(\n                $keyname => html::a(array('title' => $title), rcube::Q($name ?: $email) .\n                    ($name && count($emails) > 1 ? '&nbsp;' . html::span('email', rcube::Q($email)) : '')\n                )), $classname);\n        }\n    }\n\n    // search request ID\n    $search_request = md5('composeaddr' . $search);\n\n    // save search settings in session\n    $_SESSION['contact_search'][$search_request] = $search_set;\n    $_SESSION['contact_search_params'] = array('id' => $search_request, 'data' => array($afields, $search));\n\n    $OUTPUT->show_message('contactsearchsuccessful', 'confirmation', array('nr' => $result->count));\n\n    $OUTPUT->set_env('search_request', $search_request);\n    $OUTPUT->set_env('source', '');\n    $OUTPUT->command('unselect_directory');\n}\nelse if (!$group_count) {\n    $OUTPUT->show_message('nocontactsfound', 'notice');\n}\n\n// update env\n$OUTPUT->set_env('contactdata', $jsresult);\n$OUTPUT->set_env('pagecount', ceil($result->count / $page_size));\n$OUTPUT->command('set_page_buttons');\n\n// send response\n$OUTPUT->send();\n"], "filenames": ["program/steps/addressbook/export.inc", "program/steps/addressbook/func.inc", "program/steps/addressbook/search.inc", "program/steps/mail/list_contacts.inc", "program/steps/mail/search_contacts.inc"], "buggy_code_start_loc": [25, 988, 26, 27, 100], "buggy_code_end_loc": [28, 1023, 216, 30, 102], "fixing_code_start_loc": [25, 988, 26, 27, 100], "fixing_code_end_loc": [30, 1025, 215, 32, 102], "type": "CWE-89", "message": "Roundcube before 1.3.17 and 1.4.x before 1.4.12 is prone to a potential SQL injection via search or search_params.", "other": {"cve": {"id": "CVE-2021-44026", "sourceIdentifier": "cve@mitre.org", "published": "2021-11-19T04:15:07.197", "lastModified": "2021-12-16T18:41:22.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Roundcube before 1.3.17 and 1.4.x before 1.4.12 is prone to a potential SQL injection via search or search_params."}, {"lang": "es", "value": "Roundcube  versiones anteriores a 1.3.17 y versiones 1.4.x anteriores a 1.4.12, es propenso a una potencial inyecci\u00f3n SQL por medio de los par\u00e1metros search o search_params"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.17", "matchCriteriaId": "DA15B6EF-37D5-4C52-ACE8-BFC70EC57247"}, {"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.4.0", "versionEndExcluding": "1.4.12", "matchCriteriaId": "E2A9DC05-E22B-4AFF-BA40-7B48BA545461"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:11.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA6FEEC2-9F11-4643-8827-749718254FED"}]}]}], "references": [{"url": "https://bugs.debian.org/1000156", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/roundcube/roundcubemail/commit/c8947ecb762d9e89c2091bda28d49002817263f1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/roundcube/roundcubemail/commit/ee809bde2dcaa04857a919397808a7296681dcfa", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/12/msg00004.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NDVGIZMQJ5IOM47Y3SAAJRN5VPANKTKO/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TP3Y5RXTUUOUODNG7HFEKWYNIPIT2NL4/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2021/dsa-5013", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/roundcube/roundcubemail/commit/c8947ecb762d9e89c2091bda28d49002817263f1"}}