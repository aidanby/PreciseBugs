{"buggy_code": ["/* Capstone Disassembly Engine */\n/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2015 */\n\n#ifdef CAPSTONE_HAS_X86\n\n#include <string.h>\n#include <stdlib.h>\n\n#include \"X86Mapping.h\"\n#include \"X86DisassemblerDecoder.h\"\n\n#include \"../../utils.h\"\n\n\nuint64_t arch_masks[9] = {\n\t0, 0xff,\n\t0xffff,\n\t0,\n\t0xffffffff,\n\t0, 0, 0,\n\t0xffffffffffffffffLL\n};\n\nstatic x86_reg sib_base_map[] = {\n\tX86_REG_INVALID,\n#define ENTRY(x) X86_REG_##x,\n\tALL_SIB_BASES\n#undef ENTRY\n};\n\n// Fill-ins to make the compiler happy.  These constants are never actually\n//   assigned; they are just filler to make an automatically-generated switch\n//   statement work.\nenum {\n\tX86_REG_BX_SI = 500,\n\tX86_REG_BX_DI = 501,\n\tX86_REG_BP_SI = 502,\n\tX86_REG_BP_DI = 503,\n\tX86_REG_sib   = 504,\n\tX86_REG_sib64 = 505\n};\n\nstatic x86_reg sib_index_map[] = {\n\tX86_REG_INVALID,\n#define ENTRY(x) X86_REG_##x,\n\tALL_EA_BASES\n\tREGS_XMM\n\tREGS_YMM\n\tREGS_ZMM\n#undef ENTRY\n};\n\nstatic x86_reg segment_map[] = {\n\tX86_REG_INVALID,\n\tX86_REG_CS,\n\tX86_REG_SS,\n\tX86_REG_DS,\n\tX86_REG_ES,\n\tX86_REG_FS,\n\tX86_REG_GS,\n};\n\nx86_reg x86_map_sib_base(int r)\n{\n\treturn sib_base_map[r];\n}\n\nx86_reg x86_map_sib_index(int r)\n{\n\treturn sib_index_map[r];\n}\n\nx86_reg x86_map_segment(int r)\n{\n\treturn segment_map[r];\n}\n\n#ifndef CAPSTONE_DIET\nstatic name_map reg_name_maps[] = {\n\t{ X86_REG_INVALID, NULL },\n\n\t{ X86_REG_AH, \"ah\" },\n\t{ X86_REG_AL, \"al\" },\n\t{ X86_REG_AX, \"ax\" },\n\t{ X86_REG_BH, \"bh\" },\n\t{ X86_REG_BL, \"bl\" },\n\t{ X86_REG_BP, \"bp\" },\n\t{ X86_REG_BPL, \"bpl\" },\n\t{ X86_REG_BX, \"bx\" },\n\t{ X86_REG_CH, \"ch\" },\n\t{ X86_REG_CL, \"cl\" },\n\t{ X86_REG_CS, \"cs\" },\n\t{ X86_REG_CX, \"cx\" },\n\t{ X86_REG_DH, \"dh\" },\n\t{ X86_REG_DI, \"di\" },\n\t{ X86_REG_DIL, \"dil\" },\n\t{ X86_REG_DL, \"dl\" },\n\t{ X86_REG_DS, \"ds\" },\n\t{ X86_REG_DX, \"dx\" },\n\t{ X86_REG_EAX, \"eax\" },\n\t{ X86_REG_EBP, \"ebp\" },\n\t{ X86_REG_EBX, \"ebx\" },\n\t{ X86_REG_ECX, \"ecx\" },\n\t{ X86_REG_EDI, \"edi\" },\n\t{ X86_REG_EDX, \"edx\" },\n\t{ X86_REG_EFLAGS, \"flags\" },\n\t{ X86_REG_EIP, \"eip\" },\n\t{ X86_REG_EIZ, \"eiz\" },\n\t{ X86_REG_ES, \"es\" },\n\t{ X86_REG_ESI, \"esi\" },\n\t{ X86_REG_ESP, \"esp\" },\n\t{ X86_REG_FPSW, \"fpsw\" },\n\t{ X86_REG_FS, \"fs\" },\n\t{ X86_REG_GS, \"gs\" },\n\t{ X86_REG_IP, \"ip\" },\n\t{ X86_REG_RAX, \"rax\" },\n\t{ X86_REG_RBP, \"rbp\" },\n\t{ X86_REG_RBX, \"rbx\" },\n\t{ X86_REG_RCX, \"rcx\" },\n\t{ X86_REG_RDI, \"rdi\" },\n\t{ X86_REG_RDX, \"rdx\" },\n\t{ X86_REG_RIP, \"rip\" },\n\t{ X86_REG_RIZ, \"riz\" },\n\t{ X86_REG_RSI, \"rsi\" },\n\t{ X86_REG_RSP, \"rsp\" },\n\t{ X86_REG_SI, \"si\" },\n\t{ X86_REG_SIL, \"sil\" },\n\t{ X86_REG_SP, \"sp\" },\n\t{ X86_REG_SPL, \"spl\" },\n\t{ X86_REG_SS, \"ss\" },\n\t{ X86_REG_CR0, \"cr0\" },\n\t{ X86_REG_CR1, \"cr1\" },\n\t{ X86_REG_CR2, \"cr2\" },\n\t{ X86_REG_CR3, \"cr3\" },\n\t{ X86_REG_CR4, \"cr4\" },\n\t{ X86_REG_CR5, \"cr5\" },\n\t{ X86_REG_CR6, \"cr6\" },\n\t{ X86_REG_CR7, \"cr7\" },\n\t{ X86_REG_CR8, \"cr8\" },\n\t{ X86_REG_CR9, \"cr9\" },\n\t{ X86_REG_CR10, \"cr10\" },\n\t{ X86_REG_CR11, \"cr11\" },\n\t{ X86_REG_CR12, \"cr12\" },\n\t{ X86_REG_CR13, \"cr13\" },\n\t{ X86_REG_CR14, \"cr14\" },\n\t{ X86_REG_CR15, \"cr15\" },\n\t{ X86_REG_DR0, \"dr0\" },\n\t{ X86_REG_DR1, \"dr1\" },\n\t{ X86_REG_DR2, \"dr2\" },\n\t{ X86_REG_DR3, \"dr3\" },\n\t{ X86_REG_DR4, \"dr4\" },\n\t{ X86_REG_DR5, \"dr5\" },\n\t{ X86_REG_DR6, \"dr6\" },\n\t{ X86_REG_DR7, \"dr7\" },\n\t{ X86_REG_DR8, \"dr8\" },\n\t{ X86_REG_DR9, \"dr9\" },\n\t{ X86_REG_DR10, \"dr10\" },\n\t{ X86_REG_DR11, \"dr11\" },\n\t{ X86_REG_DR12, \"dr12\" },\n\t{ X86_REG_DR13, \"dr13\" },\n\t{ X86_REG_DR14, \"dr14\" },\n\t{ X86_REG_DR15, \"dr15\" },\n\t{ X86_REG_FP0, \"fp0\" },\n\t{ X86_REG_FP1, \"fp1\" },\n\t{ X86_REG_FP2, \"fp2\" },\n\t{ X86_REG_FP3, \"fp3\" },\n\t{ X86_REG_FP4, \"fp4\" },\n\t{ X86_REG_FP5, \"fp5\" },\n\t{ X86_REG_FP6, \"fp6\" },\n\t{ X86_REG_FP7, \"fp7\" },\n\t{ X86_REG_K0, \"k0\" },\n\t{ X86_REG_K1, \"k1\" },\n\t{ X86_REG_K2, \"k2\" },\n\t{ X86_REG_K3, \"k3\" },\n\t{ X86_REG_K4, \"k4\" },\n\t{ X86_REG_K5, \"k5\" },\n\t{ X86_REG_K6, \"k6\" },\n\t{ X86_REG_K7, \"k7\" },\n\t{ X86_REG_MM0, \"mm0\" },\n\t{ X86_REG_MM1, \"mm1\" },\n\t{ X86_REG_MM2, \"mm2\" },\n\t{ X86_REG_MM3, \"mm3\" },\n\t{ X86_REG_MM4, \"mm4\" },\n\t{ X86_REG_MM5, \"mm5\" },\n\t{ X86_REG_MM6, \"mm6\" },\n\t{ X86_REG_MM7, \"mm7\" },\n\t{ X86_REG_R8, \"r8\" },\n\t{ X86_REG_R9, \"r9\" },\n\t{ X86_REG_R10, \"r10\" },\n\t{ X86_REG_R11, \"r11\" },\n\t{ X86_REG_R12, \"r12\" },\n\t{ X86_REG_R13, \"r13\" },\n\t{ X86_REG_R14, \"r14\" },\n\t{ X86_REG_R15, \"r15\" },\n\t{ X86_REG_ST0, \"st0\" },\n\t{ X86_REG_ST1, \"st1\" },\n\t{ X86_REG_ST2, \"st2\" },\n\t{ X86_REG_ST3, \"st3\" },\n\t{ X86_REG_ST4, \"st4\" },\n\t{ X86_REG_ST5, \"st5\" },\n\t{ X86_REG_ST6, \"st6\" },\n\t{ X86_REG_ST7, \"st7\" },\n\t{ X86_REG_XMM0, \"xmm0\" },\n\t{ X86_REG_XMM1, \"xmm1\" },\n\t{ X86_REG_XMM2, \"xmm2\" },\n\t{ X86_REG_XMM3, \"xmm3\" },\n\t{ X86_REG_XMM4, \"xmm4\" },\n\t{ X86_REG_XMM5, \"xmm5\" },\n\t{ X86_REG_XMM6, \"xmm6\" },\n\t{ X86_REG_XMM7, \"xmm7\" },\n\t{ X86_REG_XMM8, \"xmm8\" },\n\t{ X86_REG_XMM9, \"xmm9\" },\n\t{ X86_REG_XMM10, \"xmm10\" },\n\t{ X86_REG_XMM11, \"xmm11\" },\n\t{ X86_REG_XMM12, \"xmm12\" },\n\t{ X86_REG_XMM13, \"xmm13\" },\n\t{ X86_REG_XMM14, \"xmm14\" },\n\t{ X86_REG_XMM15, \"xmm15\" },\n\t{ X86_REG_XMM16, \"xmm16\" },\n\t{ X86_REG_XMM17, \"xmm17\" },\n\t{ X86_REG_XMM18, \"xmm18\" },\n\t{ X86_REG_XMM19, \"xmm19\" },\n\t{ X86_REG_XMM20, \"xmm20\" },\n\t{ X86_REG_XMM21, \"xmm21\" },\n\t{ X86_REG_XMM22, \"xmm22\" },\n\t{ X86_REG_XMM23, \"xmm23\" },\n\t{ X86_REG_XMM24, \"xmm24\" },\n\t{ X86_REG_XMM25, \"xmm25\" },\n\t{ X86_REG_XMM26, \"xmm26\" },\n\t{ X86_REG_XMM27, \"xmm27\" },\n\t{ X86_REG_XMM28, \"xmm28\" },\n\t{ X86_REG_XMM29, \"xmm29\" },\n\t{ X86_REG_XMM30, \"xmm30\" },\n\t{ X86_REG_XMM31, \"xmm31\" },\n\t{ X86_REG_YMM0, \"ymm0\" },\n\t{ X86_REG_YMM1, \"ymm1\" },\n\t{ X86_REG_YMM2, \"ymm2\" },\n\t{ X86_REG_YMM3, \"ymm3\" },\n\t{ X86_REG_YMM4, \"ymm4\" },\n\t{ X86_REG_YMM5, \"ymm5\" },\n\t{ X86_REG_YMM6, \"ymm6\" },\n\t{ X86_REG_YMM7, \"ymm7\" },\n\t{ X86_REG_YMM8, \"ymm8\" },\n\t{ X86_REG_YMM9, \"ymm9\" },\n\t{ X86_REG_YMM10, \"ymm10\" },\n\t{ X86_REG_YMM11, \"ymm11\" },\n\t{ X86_REG_YMM12, \"ymm12\" },\n\t{ X86_REG_YMM13, \"ymm13\" },\n\t{ X86_REG_YMM14, \"ymm14\" },\n\t{ X86_REG_YMM15, \"ymm15\" },\n\t{ X86_REG_YMM16, \"ymm16\" },\n\t{ X86_REG_YMM17, \"ymm17\" },\n\t{ X86_REG_YMM18, \"ymm18\" },\n\t{ X86_REG_YMM19, \"ymm19\" },\n\t{ X86_REG_YMM20, \"ymm20\" },\n\t{ X86_REG_YMM21, \"ymm21\" },\n\t{ X86_REG_YMM22, \"ymm22\" },\n\t{ X86_REG_YMM23, \"ymm23\" },\n\t{ X86_REG_YMM24, \"ymm24\" },\n\t{ X86_REG_YMM25, \"ymm25\" },\n\t{ X86_REG_YMM26, \"ymm26\" },\n\t{ X86_REG_YMM27, \"ymm27\" },\n\t{ X86_REG_YMM28, \"ymm28\" },\n\t{ X86_REG_YMM29, \"ymm29\" },\n\t{ X86_REG_YMM30, \"ymm30\" },\n\t{ X86_REG_YMM31, \"ymm31\" },\n\t{ X86_REG_ZMM0, \"zmm0\" },\n\t{ X86_REG_ZMM1, \"zmm1\" },\n\t{ X86_REG_ZMM2, \"zmm2\" },\n\t{ X86_REG_ZMM3, \"zmm3\" },\n\t{ X86_REG_ZMM4, \"zmm4\" },\n\t{ X86_REG_ZMM5, \"zmm5\" },\n\t{ X86_REG_ZMM6, \"zmm6\" },\n\t{ X86_REG_ZMM7, \"zmm7\" },\n\t{ X86_REG_ZMM8, \"zmm8\" },\n\t{ X86_REG_ZMM9, \"zmm9\" },\n\t{ X86_REG_ZMM10, \"zmm10\" },\n\t{ X86_REG_ZMM11, \"zmm11\" },\n\t{ X86_REG_ZMM12, \"zmm12\" },\n\t{ X86_REG_ZMM13, \"zmm13\" },\n\t{ X86_REG_ZMM14, \"zmm14\" },\n\t{ X86_REG_ZMM15, \"zmm15\" },\n\t{ X86_REG_ZMM16, \"zmm16\" },\n\t{ X86_REG_ZMM17, \"zmm17\" },\n\t{ X86_REG_ZMM18, \"zmm18\" },\n\t{ X86_REG_ZMM19, \"zmm19\" },\n\t{ X86_REG_ZMM20, \"zmm20\" },\n\t{ X86_REG_ZMM21, \"zmm21\" },\n\t{ X86_REG_ZMM22, \"zmm22\" },\n\t{ X86_REG_ZMM23, \"zmm23\" },\n\t{ X86_REG_ZMM24, \"zmm24\" },\n\t{ X86_REG_ZMM25, \"zmm25\" },\n\t{ X86_REG_ZMM26, \"zmm26\" },\n\t{ X86_REG_ZMM27, \"zmm27\" },\n\t{ X86_REG_ZMM28, \"zmm28\" },\n\t{ X86_REG_ZMM29, \"zmm29\" },\n\t{ X86_REG_ZMM30, \"zmm30\" },\n\t{ X86_REG_ZMM31, \"zmm31\" },\n\t{ X86_REG_R8B, \"r8b\" },\n\t{ X86_REG_R9B, \"r9b\" },\n\t{ X86_REG_R10B, \"r10b\" },\n\t{ X86_REG_R11B, \"r11b\" },\n\t{ X86_REG_R12B, \"r12b\" },\n\t{ X86_REG_R13B, \"r13b\" },\n\t{ X86_REG_R14B, \"r14b\" },\n\t{ X86_REG_R15B, \"r15b\" },\n\t{ X86_REG_R8D, \"r8d\" },\n\t{ X86_REG_R9D, \"r9d\" },\n\t{ X86_REG_R10D, \"r10d\" },\n\t{ X86_REG_R11D, \"r11d\" },\n\t{ X86_REG_R12D, \"r12d\" },\n\t{ X86_REG_R13D, \"r13d\" },\n\t{ X86_REG_R14D, \"r14d\" },\n\t{ X86_REG_R15D, \"r15d\" },\n\t{ X86_REG_R8W, \"r8w\" },\n\t{ X86_REG_R9W, \"r9w\" },\n\t{ X86_REG_R10W, \"r10w\" },\n\t{ X86_REG_R11W, \"r11w\" },\n\t{ X86_REG_R12W, \"r12w\" },\n\t{ X86_REG_R13W, \"r13w\" },\n\t{ X86_REG_R14W, \"r14w\" },\n\t{ X86_REG_R15W, \"r15w\" },\n};\n#endif\n\n// register size in non-64bit mode\nuint8_t regsize_map_32 [] = {\n\t0,\t// \t{ X86_REG_INVALID, NULL },\n\t1,\t// { X86_REG_AH, \"ah\" },\n\t1,\t// { X86_REG_AL, \"al\" },\n\t2,\t// { X86_REG_AX, \"ax\" },\n\t1,\t// { X86_REG_BH, \"bh\" },\n\t1,\t// { X86_REG_BL, \"bl\" },\n\t2,\t// { X86_REG_BP, \"bp\" },\n\t1,\t// { X86_REG_BPL, \"bpl\" },\n\t2,\t// { X86_REG_BX, \"bx\" },\n\t1,\t// { X86_REG_CH, \"ch\" },\n\t1,\t// { X86_REG_CL, \"cl\" },\n\t2,\t// { X86_REG_CS, \"cs\" },\n\t2,\t// { X86_REG_CX, \"cx\" },\n\t1,\t// { X86_REG_DH, \"dh\" },\n\t2,\t// { X86_REG_DI, \"di\" },\n\t1,\t// { X86_REG_DIL, \"dil\" },\n\t1,\t// { X86_REG_DL, \"dl\" },\n\t2,\t// { X86_REG_DS, \"ds\" },\n\t2,\t// { X86_REG_DX, \"dx\" },\n\t4,\t// { X86_REG_EAX, \"eax\" },\n\t4,\t// { X86_REG_EBP, \"ebp\" },\n\t4,\t// { X86_REG_EBX, \"ebx\" },\n\t4,\t// { X86_REG_ECX, \"ecx\" },\n\t4,\t// { X86_REG_EDI, \"edi\" },\n\t4,\t// { X86_REG_EDX, \"edx\" },\n\t4,\t// { X86_REG_EFLAGS, \"flags\" },\n\t4,\t// { X86_REG_EIP, \"eip\" },\n\t4,\t// { X86_REG_EIZ, \"eiz\" },\n\t2,\t// { X86_REG_ES, \"es\" },\n\t4,\t// { X86_REG_ESI, \"esi\" },\n\t4,\t// { X86_REG_ESP, \"esp\" },\n\t10,\t// { X86_REG_FPSW, \"fpsw\" },\n\t2,\t// { X86_REG_FS, \"fs\" },\n\t2,\t// { X86_REG_GS, \"gs\" },\n\t2,\t// { X86_REG_IP, \"ip\" },\n\t8,\t// { X86_REG_RAX, \"rax\" },\n\t8,\t// { X86_REG_RBP, \"rbp\" },\n\t8,\t// { X86_REG_RBX, \"rbx\" },\n\t8,\t// { X86_REG_RCX, \"rcx\" },\n\t8,\t// { X86_REG_RDI, \"rdi\" },\n\t8,\t// { X86_REG_RDX, \"rdx\" },\n\t8,\t// { X86_REG_RIP, \"rip\" },\n\t8,\t// { X86_REG_RIZ, \"riz\" },\n\t8,\t// { X86_REG_RSI, \"rsi\" },\n\t8,\t// { X86_REG_RSP, \"rsp\" },\n\t2,\t// { X86_REG_SI, \"si\" },\n\t1,\t// { X86_REG_SIL, \"sil\" },\n\t2,\t// { X86_REG_SP, \"sp\" },\n\t1,\t// { X86_REG_SPL, \"spl\" },\n\t2,\t// { X86_REG_SS, \"ss\" },\n\t4,\t// { X86_REG_CR0, \"cr0\" },\n\t4,\t// { X86_REG_CR1, \"cr1\" },\n\t4,\t// { X86_REG_CR2, \"cr2\" },\n\t4,\t// { X86_REG_CR3, \"cr3\" },\n\t4,\t// { X86_REG_CR4, \"cr4\" },\n\t8,\t// { X86_REG_CR5, \"cr5\" },\n\t8,\t// { X86_REG_CR6, \"cr6\" },\n\t8,\t// { X86_REG_CR7, \"cr7\" },\n\t8,\t// { X86_REG_CR8, \"cr8\" },\n\t8,\t// { X86_REG_CR9, \"cr9\" },\n\t8,\t// { X86_REG_CR10, \"cr10\" },\n\t8,\t// { X86_REG_CR11, \"cr11\" },\n\t8,\t// { X86_REG_CR12, \"cr12\" },\n\t8,\t// { X86_REG_CR13, \"cr13\" },\n\t8,\t// { X86_REG_CR14, \"cr14\" },\n\t8,\t// { X86_REG_CR15, \"cr15\" },\n\t4,\t// { X86_REG_DR0, \"dr0\" },\n\t4,\t// { X86_REG_DR1, \"dr1\" },\n\t4,\t// { X86_REG_DR2, \"dr2\" },\n\t4,\t// { X86_REG_DR3, \"dr3\" },\n\t4,\t// { X86_REG_DR4, \"dr4\" },\n\t4,\t// { X86_REG_DR5, \"dr5\" },\n\t4,\t// { X86_REG_DR6, \"dr6\" },\n\t4,\t// { X86_REG_DR7, \"dr7\" },\n\t4,\t// { X86_REG_DR8, \"dr8\" },\n\t4,\t// { X86_REG_DR9, \"dr9\" },\n\t4,\t// { X86_REG_DR10, \"dr10\" },\n\t4,\t// { X86_REG_DR11, \"dr11\" },\n\t4,\t// { X86_REG_DR12, \"dr12\" },\n\t4,\t// { X86_REG_DR13, \"dr13\" },\n\t4,\t// { X86_REG_DR14, \"dr14\" },\n\t4,\t// { X86_REG_DR15, \"dr15\" },\n\t10,\t// { X86_REG_FP0, \"fp0\" },\n\t10,\t// { X86_REG_FP1, \"fp1\" },\n\t10,\t// { X86_REG_FP2, \"fp2\" },\n\t10,\t// { X86_REG_FP3, \"fp3\" },\n\t10,\t// { X86_REG_FP4, \"fp4\" },\n\t10,\t// { X86_REG_FP5, \"fp5\" },\n\t10,\t// { X86_REG_FP6, \"fp6\" },\n\t10,\t// { X86_REG_FP7, \"fp7\" },\n\t2,\t// { X86_REG_K0, \"k0\" },\n\t2,\t// { X86_REG_K1, \"k1\" },\n\t2,\t// { X86_REG_K2, \"k2\" },\n\t2,\t// { X86_REG_K3, \"k3\" },\n\t2,\t// { X86_REG_K4, \"k4\" },\n\t2,\t// { X86_REG_K5, \"k5\" },\n\t2,\t// { X86_REG_K6, \"k6\" },\n\t2,\t// { X86_REG_K7, \"k7\" },\n\t8,\t// { X86_REG_MM0, \"mm0\" },\n\t8,\t// { X86_REG_MM1, \"mm1\" },\n\t8,\t// { X86_REG_MM2, \"mm2\" },\n\t8,\t// { X86_REG_MM3, \"mm3\" },\n\t8,\t// { X86_REG_MM4, \"mm4\" },\n\t8,\t// { X86_REG_MM5, \"mm5\" },\n\t8,\t// { X86_REG_MM6, \"mm6\" },\n\t8,\t// { X86_REG_MM7, \"mm7\" },\n\t8,\t// { X86_REG_R8, \"r8\" },\n\t8,\t// { X86_REG_R9, \"r9\" },\n\t8,\t// { X86_REG_R10, \"r10\" },\n\t8,\t// { X86_REG_R11, \"r11\" },\n\t8,\t// { X86_REG_R12, \"r12\" },\n\t8,\t// { X86_REG_R13, \"r13\" },\n\t8,\t// { X86_REG_R14, \"r14\" },\n\t8,\t// { X86_REG_R15, \"r15\" },\n\t10,\t// { X86_REG_ST0, \"st0\" },\n\t10,\t// { X86_REG_ST1, \"st1\" },\n\t10,\t// { X86_REG_ST2, \"st2\" },\n\t10,\t// { X86_REG_ST3, \"st3\" },\n\t10,\t// { X86_REG_ST4, \"st4\" },\n\t10,\t// { X86_REG_ST5, \"st5\" },\n\t10,\t// { X86_REG_ST6, \"st6\" },\n\t10,\t// { X86_REG_ST7, \"st7\" },\n\t16,\t// { X86_REG_XMM0, \"xmm0\" },\n\t16,\t// { X86_REG_XMM1, \"xmm1\" },\n\t16,\t// { X86_REG_XMM2, \"xmm2\" },\n\t16,\t// { X86_REG_XMM3, \"xmm3\" },\n\t16,\t// { X86_REG_XMM4, \"xmm4\" },\n\t16,\t// { X86_REG_XMM5, \"xmm5\" },\n\t16,\t// { X86_REG_XMM6, \"xmm6\" },\n\t16,\t// { X86_REG_XMM7, \"xmm7\" },\n\t16,\t// { X86_REG_XMM8, \"xmm8\" },\n\t16,\t// { X86_REG_XMM9, \"xmm9\" },\n\t16,\t// { X86_REG_XMM10, \"xmm10\" },\n\t16,\t// { X86_REG_XMM11, \"xmm11\" },\n\t16,\t// { X86_REG_XMM12, \"xmm12\" },\n\t16,\t// { X86_REG_XMM13, \"xmm13\" },\n\t16,\t// { X86_REG_XMM14, \"xmm14\" },\n\t16,\t// { X86_REG_XMM15, \"xmm15\" },\n\t16,\t// { X86_REG_XMM16, \"xmm16\" },\n\t16,\t// { X86_REG_XMM17, \"xmm17\" },\n\t16,\t// { X86_REG_XMM18, \"xmm18\" },\n\t16,\t// { X86_REG_XMM19, \"xmm19\" },\n\t16,\t// { X86_REG_XMM20, \"xmm20\" },\n\t16,\t// { X86_REG_XMM21, \"xmm21\" },\n\t16,\t// { X86_REG_XMM22, \"xmm22\" },\n\t16,\t// { X86_REG_XMM23, \"xmm23\" },\n\t16,\t// { X86_REG_XMM24, \"xmm24\" },\n\t16,\t// { X86_REG_XMM25, \"xmm25\" },\n\t16,\t// { X86_REG_XMM26, \"xmm26\" },\n\t16,\t// { X86_REG_XMM27, \"xmm27\" },\n\t16,\t// { X86_REG_XMM28, \"xmm28\" },\n\t16,\t// { X86_REG_XMM29, \"xmm29\" },\n\t16,\t// { X86_REG_XMM30, \"xmm30\" },\n\t16,\t// { X86_REG_XMM31, \"xmm31\" },\n\t32,\t// { X86_REG_YMM0, \"ymm0\" },\n\t32,\t// { X86_REG_YMM1, \"ymm1\" },\n\t32,\t// { X86_REG_YMM2, \"ymm2\" },\n\t32,\t// { X86_REG_YMM3, \"ymm3\" },\n\t32,\t// { X86_REG_YMM4, \"ymm4\" },\n\t32,\t// { X86_REG_YMM5, \"ymm5\" },\n\t32,\t// { X86_REG_YMM6, \"ymm6\" },\n\t32,\t// { X86_REG_YMM7, \"ymm7\" },\n\t32,\t// { X86_REG_YMM8, \"ymm8\" },\n\t32,\t// { X86_REG_YMM9, \"ymm9\" },\n\t32,\t// { X86_REG_YMM10, \"ymm10\" },\n\t32,\t// { X86_REG_YMM11, \"ymm11\" },\n\t32,\t// { X86_REG_YMM12, \"ymm12\" },\n\t32,\t// { X86_REG_YMM13, \"ymm13\" },\n\t32,\t// { X86_REG_YMM14, \"ymm14\" },\n\t32,\t// { X86_REG_YMM15, \"ymm15\" },\n\t32,\t// { X86_REG_YMM16, \"ymm16\" },\n\t32,\t// { X86_REG_YMM17, \"ymm17\" },\n\t32,\t// { X86_REG_YMM18, \"ymm18\" },\n\t32,\t// { X86_REG_YMM19, \"ymm19\" },\n\t32,\t// { X86_REG_YMM20, \"ymm20\" },\n\t32,\t// { X86_REG_YMM21, \"ymm21\" },\n\t32,\t// { X86_REG_YMM22, \"ymm22\" },\n\t32,\t// { X86_REG_YMM23, \"ymm23\" },\n\t32,\t// { X86_REG_YMM24, \"ymm24\" },\n\t32,\t// { X86_REG_YMM25, \"ymm25\" },\n\t32,\t// { X86_REG_YMM26, \"ymm26\" },\n\t32,\t// { X86_REG_YMM27, \"ymm27\" },\n\t32,\t// { X86_REG_YMM28, \"ymm28\" },\n\t32,\t// { X86_REG_YMM29, \"ymm29\" },\n\t32,\t// { X86_REG_YMM30, \"ymm30\" },\n\t32,\t// { X86_REG_YMM31, \"ymm31\" },\n\t64,\t// { X86_REG_ZMM0, \"zmm0\" },\n\t64,\t// { X86_REG_ZMM1, \"zmm1\" },\n\t64,\t// { X86_REG_ZMM2, \"zmm2\" },\n\t64,\t// { X86_REG_ZMM3, \"zmm3\" },\n\t64,\t// { X86_REG_ZMM4, \"zmm4\" },\n\t64,\t// { X86_REG_ZMM5, \"zmm5\" },\n\t64,\t// { X86_REG_ZMM6, \"zmm6\" },\n\t64,\t// { X86_REG_ZMM7, \"zmm7\" },\n\t64,\t// { X86_REG_ZMM8, \"zmm8\" },\n\t64,\t// { X86_REG_ZMM9, \"zmm9\" },\n\t64,\t// { X86_REG_ZMM10, \"zmm10\" },\n\t64,\t// { X86_REG_ZMM11, \"zmm11\" },\n\t64,\t// { X86_REG_ZMM12, \"zmm12\" },\n\t64,\t// { X86_REG_ZMM13, \"zmm13\" },\n\t64,\t// { X86_REG_ZMM14, \"zmm14\" },\n\t64,\t// { X86_REG_ZMM15, \"zmm15\" },\n\t64,\t// { X86_REG_ZMM16, \"zmm16\" },\n\t64,\t// { X86_REG_ZMM17, \"zmm17\" },\n\t64,\t// { X86_REG_ZMM18, \"zmm18\" },\n\t64,\t// { X86_REG_ZMM19, \"zmm19\" },\n\t64,\t// { X86_REG_ZMM20, \"zmm20\" },\n\t64,\t// { X86_REG_ZMM21, \"zmm21\" },\n\t64,\t// { X86_REG_ZMM22, \"zmm22\" },\n\t64,\t// { X86_REG_ZMM23, \"zmm23\" },\n\t64,\t// { X86_REG_ZMM24, \"zmm24\" },\n\t64,\t// { X86_REG_ZMM25, \"zmm25\" },\n\t64,\t// { X86_REG_ZMM26, \"zmm26\" },\n\t64,\t// { X86_REG_ZMM27, \"zmm27\" },\n\t64,\t// { X86_REG_ZMM28, \"zmm28\" },\n\t64,\t// { X86_REG_ZMM29, \"zmm29\" },\n\t64,\t// { X86_REG_ZMM30, \"zmm30\" },\n\t64,\t// { X86_REG_ZMM31, \"zmm31\" },\n\t1,\t// { X86_REG_R8B, \"r8b\" },\n\t1,\t// { X86_REG_R9B, \"r9b\" },\n\t1,\t// { X86_REG_R10B, \"r10b\" },\n\t1,\t// { X86_REG_R11B, \"r11b\" },\n\t1,\t// { X86_REG_R12B, \"r12b\" },\n\t1,\t// { X86_REG_R13B, \"r13b\" },\n\t1,\t// { X86_REG_R14B, \"r14b\" },\n\t1,\t// { X86_REG_R15B, \"r15b\" },\n\t4,\t// { X86_REG_R8D, \"r8d\" },\n\t4,\t// { X86_REG_R9D, \"r9d\" },\n\t4,\t// { X86_REG_R10D, \"r10d\" },\n\t4,\t// { X86_REG_R11D, \"r11d\" },\n\t4,\t// { X86_REG_R12D, \"r12d\" },\n\t4,\t// { X86_REG_R13D, \"r13d\" },\n\t4,\t// { X86_REG_R14D, \"r14d\" },\n\t4,\t// { X86_REG_R15D, \"r15d\" },\n\t2,\t// { X86_REG_R8W, \"r8w\" },\n\t2,\t// { X86_REG_R9W, \"r9w\" },\n\t2,\t// { X86_REG_R10W, \"r10w\" },\n\t2,\t// { X86_REG_R11W, \"r11w\" },\n\t2,\t// { X86_REG_R12W, \"r12w\" },\n\t2,\t// { X86_REG_R13W, \"r13w\" },\n\t2,\t// { X86_REG_R14W, \"r14w\" },\n\t2,\t// { X86_REG_R15W, \"r15w\" },\n};\n\n// register size in 64bit mode\nuint8_t regsize_map_64 [] = {\n\t0,\t// \t{ X86_REG_INVALID, NULL },\n\t1,\t// { X86_REG_AH, \"ah\" },\n\t1,\t// { X86_REG_AL, \"al\" },\n\t2,\t// { X86_REG_AX, \"ax\" },\n\t1,\t// { X86_REG_BH, \"bh\" },\n\t1,\t// { X86_REG_BL, \"bl\" },\n\t2,\t// { X86_REG_BP, \"bp\" },\n\t1,\t// { X86_REG_BPL, \"bpl\" },\n\t2,\t// { X86_REG_BX, \"bx\" },\n\t1,\t// { X86_REG_CH, \"ch\" },\n\t1,\t// { X86_REG_CL, \"cl\" },\n\t2,\t// { X86_REG_CS, \"cs\" },\n\t2,\t// { X86_REG_CX, \"cx\" },\n\t1,\t// { X86_REG_DH, \"dh\" },\n\t2,\t// { X86_REG_DI, \"di\" },\n\t1,\t// { X86_REG_DIL, \"dil\" },\n\t1,\t// { X86_REG_DL, \"dl\" },\n\t2,\t// { X86_REG_DS, \"ds\" },\n\t2,\t// { X86_REG_DX, \"dx\" },\n\t4,\t// { X86_REG_EAX, \"eax\" },\n\t4,\t// { X86_REG_EBP, \"ebp\" },\n\t4,\t// { X86_REG_EBX, \"ebx\" },\n\t4,\t// { X86_REG_ECX, \"ecx\" },\n\t4,\t// { X86_REG_EDI, \"edi\" },\n\t4,\t// { X86_REG_EDX, \"edx\" },\n\t8,\t// { X86_REG_EFLAGS, \"flags\" },\n\t4,\t// { X86_REG_EIP, \"eip\" },\n\t4,\t// { X86_REG_EIZ, \"eiz\" },\n\t2,\t// { X86_REG_ES, \"es\" },\n\t4,\t// { X86_REG_ESI, \"esi\" },\n\t4,\t// { X86_REG_ESP, \"esp\" },\n\t10,\t// { X86_REG_FPSW, \"fpsw\" },\n\t2,\t// { X86_REG_FS, \"fs\" },\n\t2,\t// { X86_REG_GS, \"gs\" },\n\t2,\t// { X86_REG_IP, \"ip\" },\n\t8,\t// { X86_REG_RAX, \"rax\" },\n\t8,\t// { X86_REG_RBP, \"rbp\" },\n\t8,\t// { X86_REG_RBX, \"rbx\" },\n\t8,\t// { X86_REG_RCX, \"rcx\" },\n\t8,\t// { X86_REG_RDI, \"rdi\" },\n\t8,\t// { X86_REG_RDX, \"rdx\" },\n\t8,\t// { X86_REG_RIP, \"rip\" },\n\t8,\t// { X86_REG_RIZ, \"riz\" },\n\t8,\t// { X86_REG_RSI, \"rsi\" },\n\t8,\t// { X86_REG_RSP, \"rsp\" },\n\t2,\t// { X86_REG_SI, \"si\" },\n\t1,\t// { X86_REG_SIL, \"sil\" },\n\t2,\t// { X86_REG_SP, \"sp\" },\n\t1,\t// { X86_REG_SPL, \"spl\" },\n\t2,\t// { X86_REG_SS, \"ss\" },\n\t8,\t// { X86_REG_CR0, \"cr0\" },\n\t8,\t// { X86_REG_CR1, \"cr1\" },\n\t8,\t// { X86_REG_CR2, \"cr2\" },\n\t8,\t// { X86_REG_CR3, \"cr3\" },\n\t8,\t// { X86_REG_CR4, \"cr4\" },\n\t8,\t// { X86_REG_CR5, \"cr5\" },\n\t8,\t// { X86_REG_CR6, \"cr6\" },\n\t8,\t// { X86_REG_CR7, \"cr7\" },\n\t8,\t// { X86_REG_CR8, \"cr8\" },\n\t8,\t// { X86_REG_CR9, \"cr9\" },\n\t8,\t// { X86_REG_CR10, \"cr10\" },\n\t8,\t// { X86_REG_CR11, \"cr11\" },\n\t8,\t// { X86_REG_CR12, \"cr12\" },\n\t8,\t// { X86_REG_CR13, \"cr13\" },\n\t8,\t// { X86_REG_CR14, \"cr14\" },\n\t8,\t// { X86_REG_CR15, \"cr15\" },\n\t8,\t// { X86_REG_DR0, \"dr0\" },\n\t8,\t// { X86_REG_DR1, \"dr1\" },\n\t8,\t// { X86_REG_DR2, \"dr2\" },\n\t8,\t// { X86_REG_DR3, \"dr3\" },\n\t8,\t// { X86_REG_DR4, \"dr4\" },\n\t8,\t// { X86_REG_DR5, \"dr5\" },\n\t8,\t// { X86_REG_DR6, \"dr6\" },\n\t8,\t// { X86_REG_DR7, \"dr7\" },\n\t8,\t// { X86_REG_DR8, \"dr8\" },\n\t8,\t// { X86_REG_DR9, \"dr9\" },\n\t8,\t// { X86_REG_DR10, \"dr10\" },\n\t8,\t// { X86_REG_DR11, \"dr11\" },\n\t8,\t// { X86_REG_DR12, \"dr12\" },\n\t8,\t// { X86_REG_DR13, \"dr13\" },\n\t8,\t// { X86_REG_DR14, \"dr14\" },\n\t8,\t// { X86_REG_DR15, \"dr15\" },\n\t10,\t// { X86_REG_FP0, \"fp0\" },\n\t10,\t// { X86_REG_FP1, \"fp1\" },\n\t10,\t// { X86_REG_FP2, \"fp2\" },\n\t10,\t// { X86_REG_FP3, \"fp3\" },\n\t10,\t// { X86_REG_FP4, \"fp4\" },\n\t10,\t// { X86_REG_FP5, \"fp5\" },\n\t10,\t// { X86_REG_FP6, \"fp6\" },\n\t10,\t// { X86_REG_FP7, \"fp7\" },\n\t2,\t// { X86_REG_K0, \"k0\" },\n\t2,\t// { X86_REG_K1, \"k1\" },\n\t2,\t// { X86_REG_K2, \"k2\" },\n\t2,\t// { X86_REG_K3, \"k3\" },\n\t2,\t// { X86_REG_K4, \"k4\" },\n\t2,\t// { X86_REG_K5, \"k5\" },\n\t2,\t// { X86_REG_K6, \"k6\" },\n\t2,\t// { X86_REG_K7, \"k7\" },\n\t8,\t// { X86_REG_MM0, \"mm0\" },\n\t8,\t// { X86_REG_MM1, \"mm1\" },\n\t8,\t// { X86_REG_MM2, \"mm2\" },\n\t8,\t// { X86_REG_MM3, \"mm3\" },\n\t8,\t// { X86_REG_MM4, \"mm4\" },\n\t8,\t// { X86_REG_MM5, \"mm5\" },\n\t8,\t// { X86_REG_MM6, \"mm6\" },\n\t8,\t// { X86_REG_MM7, \"mm7\" },\n\t8,\t// { X86_REG_R8, \"r8\" },\n\t8,\t// { X86_REG_R9, \"r9\" },\n\t8,\t// { X86_REG_R10, \"r10\" },\n\t8,\t// { X86_REG_R11, \"r11\" },\n\t8,\t// { X86_REG_R12, \"r12\" },\n\t8,\t// { X86_REG_R13, \"r13\" },\n\t8,\t// { X86_REG_R14, \"r14\" },\n\t8,\t// { X86_REG_R15, \"r15\" },\n\t10,\t// { X86_REG_ST0, \"st0\" },\n\t10,\t// { X86_REG_ST1, \"st1\" },\n\t10,\t// { X86_REG_ST2, \"st2\" },\n\t10,\t// { X86_REG_ST3, \"st3\" },\n\t10,\t// { X86_REG_ST4, \"st4\" },\n\t10,\t// { X86_REG_ST5, \"st5\" },\n\t10,\t// { X86_REG_ST6, \"st6\" },\n\t10,\t// { X86_REG_ST7, \"st7\" },\n\t16,\t// { X86_REG_XMM0, \"xmm0\" },\n\t16,\t// { X86_REG_XMM1, \"xmm1\" },\n\t16,\t// { X86_REG_XMM2, \"xmm2\" },\n\t16,\t// { X86_REG_XMM3, \"xmm3\" },\n\t16,\t// { X86_REG_XMM4, \"xmm4\" },\n\t16,\t// { X86_REG_XMM5, \"xmm5\" },\n\t16,\t// { X86_REG_XMM6, \"xmm6\" },\n\t16,\t// { X86_REG_XMM7, \"xmm7\" },\n\t16,\t// { X86_REG_XMM8, \"xmm8\" },\n\t16,\t// { X86_REG_XMM9, \"xmm9\" },\n\t16,\t// { X86_REG_XMM10, \"xmm10\" },\n\t16,\t// { X86_REG_XMM11, \"xmm11\" },\n\t16,\t// { X86_REG_XMM12, \"xmm12\" },\n\t16,\t// { X86_REG_XMM13, \"xmm13\" },\n\t16,\t// { X86_REG_XMM14, \"xmm14\" },\n\t16,\t// { X86_REG_XMM15, \"xmm15\" },\n\t16,\t// { X86_REG_XMM16, \"xmm16\" },\n\t16,\t// { X86_REG_XMM17, \"xmm17\" },\n\t16,\t// { X86_REG_XMM18, \"xmm18\" },\n\t16,\t// { X86_REG_XMM19, \"xmm19\" },\n\t16,\t// { X86_REG_XMM20, \"xmm20\" },\n\t16,\t// { X86_REG_XMM21, \"xmm21\" },\n\t16,\t// { X86_REG_XMM22, \"xmm22\" },\n\t16,\t// { X86_REG_XMM23, \"xmm23\" },\n\t16,\t// { X86_REG_XMM24, \"xmm24\" },\n\t16,\t// { X86_REG_XMM25, \"xmm25\" },\n\t16,\t// { X86_REG_XMM26, \"xmm26\" },\n\t16,\t// { X86_REG_XMM27, \"xmm27\" },\n\t16,\t// { X86_REG_XMM28, \"xmm28\" },\n\t16,\t// { X86_REG_XMM29, \"xmm29\" },\n\t16,\t// { X86_REG_XMM30, \"xmm30\" },\n\t16,\t// { X86_REG_XMM31, \"xmm31\" },\n\t32,\t// { X86_REG_YMM0, \"ymm0\" },\n\t32,\t// { X86_REG_YMM1, \"ymm1\" },\n\t32,\t// { X86_REG_YMM2, \"ymm2\" },\n\t32,\t// { X86_REG_YMM3, \"ymm3\" },\n\t32,\t// { X86_REG_YMM4, \"ymm4\" },\n\t32,\t// { X86_REG_YMM5, \"ymm5\" },\n\t32,\t// { X86_REG_YMM6, \"ymm6\" },\n\t32,\t// { X86_REG_YMM7, \"ymm7\" },\n\t32,\t// { X86_REG_YMM8, \"ymm8\" },\n\t32,\t// { X86_REG_YMM9, \"ymm9\" },\n\t32,\t// { X86_REG_YMM10, \"ymm10\" },\n\t32,\t// { X86_REG_YMM11, \"ymm11\" },\n\t32,\t// { X86_REG_YMM12, \"ymm12\" },\n\t32,\t// { X86_REG_YMM13, \"ymm13\" },\n\t32,\t// { X86_REG_YMM14, \"ymm14\" },\n\t32,\t// { X86_REG_YMM15, \"ymm15\" },\n\t32,\t// { X86_REG_YMM16, \"ymm16\" },\n\t32,\t// { X86_REG_YMM17, \"ymm17\" },\n\t32,\t// { X86_REG_YMM18, \"ymm18\" },\n\t32,\t// { X86_REG_YMM19, \"ymm19\" },\n\t32,\t// { X86_REG_YMM20, \"ymm20\" },\n\t32,\t// { X86_REG_YMM21, \"ymm21\" },\n\t32,\t// { X86_REG_YMM22, \"ymm22\" },\n\t32,\t// { X86_REG_YMM23, \"ymm23\" },\n\t32,\t// { X86_REG_YMM24, \"ymm24\" },\n\t32,\t// { X86_REG_YMM25, \"ymm25\" },\n\t32,\t// { X86_REG_YMM26, \"ymm26\" },\n\t32,\t// { X86_REG_YMM27, \"ymm27\" },\n\t32,\t// { X86_REG_YMM28, \"ymm28\" },\n\t32,\t// { X86_REG_YMM29, \"ymm29\" },\n\t32,\t// { X86_REG_YMM30, \"ymm30\" },\n\t32,\t// { X86_REG_YMM31, \"ymm31\" },\n\t64,\t// { X86_REG_ZMM0, \"zmm0\" },\n\t64,\t// { X86_REG_ZMM1, \"zmm1\" },\n\t64,\t// { X86_REG_ZMM2, \"zmm2\" },\n\t64,\t// { X86_REG_ZMM3, \"zmm3\" },\n\t64,\t// { X86_REG_ZMM4, \"zmm4\" },\n\t64,\t// { X86_REG_ZMM5, \"zmm5\" },\n\t64,\t// { X86_REG_ZMM6, \"zmm6\" },\n\t64,\t// { X86_REG_ZMM7, \"zmm7\" },\n\t64,\t// { X86_REG_ZMM8, \"zmm8\" },\n\t64,\t// { X86_REG_ZMM9, \"zmm9\" },\n\t64,\t// { X86_REG_ZMM10, \"zmm10\" },\n\t64,\t// { X86_REG_ZMM11, \"zmm11\" },\n\t64,\t// { X86_REG_ZMM12, \"zmm12\" },\n\t64,\t// { X86_REG_ZMM13, \"zmm13\" },\n\t64,\t// { X86_REG_ZMM14, \"zmm14\" },\n\t64,\t// { X86_REG_ZMM15, \"zmm15\" },\n\t64,\t// { X86_REG_ZMM16, \"zmm16\" },\n\t64,\t// { X86_REG_ZMM17, \"zmm17\" },\n\t64,\t// { X86_REG_ZMM18, \"zmm18\" },\n\t64,\t// { X86_REG_ZMM19, \"zmm19\" },\n\t64,\t// { X86_REG_ZMM20, \"zmm20\" },\n\t64,\t// { X86_REG_ZMM21, \"zmm21\" },\n\t64,\t// { X86_REG_ZMM22, \"zmm22\" },\n\t64,\t// { X86_REG_ZMM23, \"zmm23\" },\n\t64,\t// { X86_REG_ZMM24, \"zmm24\" },\n\t64,\t// { X86_REG_ZMM25, \"zmm25\" },\n\t64,\t// { X86_REG_ZMM26, \"zmm26\" },\n\t64,\t// { X86_REG_ZMM27, \"zmm27\" },\n\t64,\t// { X86_REG_ZMM28, \"zmm28\" },\n\t64,\t// { X86_REG_ZMM29, \"zmm29\" },\n\t64,\t// { X86_REG_ZMM30, \"zmm30\" },\n\t64,\t// { X86_REG_ZMM31, \"zmm31\" },\n\t1,\t// { X86_REG_R8B, \"r8b\" },\n\t1,\t// { X86_REG_R9B, \"r9b\" },\n\t1,\t// { X86_REG_R10B, \"r10b\" },\n\t1,\t// { X86_REG_R11B, \"r11b\" },\n\t1,\t// { X86_REG_R12B, \"r12b\" },\n\t1,\t// { X86_REG_R13B, \"r13b\" },\n\t1,\t// { X86_REG_R14B, \"r14b\" },\n\t1,\t// { X86_REG_R15B, \"r15b\" },\n\t4,\t// { X86_REG_R8D, \"r8d\" },\n\t4,\t// { X86_REG_R9D, \"r9d\" },\n\t4,\t// { X86_REG_R10D, \"r10d\" },\n\t4,\t// { X86_REG_R11D, \"r11d\" },\n\t4,\t// { X86_REG_R12D, \"r12d\" },\n\t4,\t// { X86_REG_R13D, \"r13d\" },\n\t4,\t// { X86_REG_R14D, \"r14d\" },\n\t4,\t// { X86_REG_R15D, \"r15d\" },\n\t2,\t// { X86_REG_R8W, \"r8w\" },\n\t2,\t// { X86_REG_R9W, \"r9w\" },\n\t2,\t// { X86_REG_R10W, \"r10w\" },\n\t2,\t// { X86_REG_R11W, \"r11w\" },\n\t2,\t// { X86_REG_R12W, \"r12w\" },\n\t2,\t// { X86_REG_R13W, \"r13w\" },\n\t2,\t// { X86_REG_R14W, \"r14w\" },\n\t2,\t// { X86_REG_R15W, \"r15w\" },\n};\n\nconst char *X86_reg_name(csh handle, unsigned int reg)\n{\n#ifndef CAPSTONE_DIET\n\tcs_struct *ud = (cs_struct *)handle;\n\n\tif (reg >= X86_REG_ENDING)\n\t\treturn NULL;\n\n\tif (reg == X86_REG_EFLAGS) {\n\t\tif (ud->mode & CS_MODE_32)\n\t\t\treturn \"eflags\";\n\t\tif (ud->mode & CS_MODE_64)\n\t\t\treturn \"rflags\";\n\t}\n\n\treturn reg_name_maps[reg].name;\n#else\n\treturn NULL;\n#endif\n}\n\n#ifndef CAPSTONE_DIET\nstatic name_map insn_name_maps[] = {\n\t{ X86_INS_INVALID, NULL },\n\n\t{ X86_INS_AAA, \"aaa\" },\n\t{ X86_INS_AAD, \"aad\" },\n\t{ X86_INS_AAM, \"aam\" },\n\t{ X86_INS_AAS, \"aas\" },\n\t{ X86_INS_FABS, \"fabs\" },\n\t{ X86_INS_ADC, \"adc\" },\n\t{ X86_INS_ADCX, \"adcx\" },\n\t{ X86_INS_ADD, \"add\" },\n\t{ X86_INS_ADDPD, \"addpd\" },\n\t{ X86_INS_ADDPS, \"addps\" },\n\t{ X86_INS_ADDSD, \"addsd\" },\n\t{ X86_INS_ADDSS, \"addss\" },\n\t{ X86_INS_ADDSUBPD, \"addsubpd\" },\n\t{ X86_INS_ADDSUBPS, \"addsubps\" },\n\t{ X86_INS_FADD, \"fadd\" },\n\t{ X86_INS_FIADD, \"fiadd\" },\n\t{ X86_INS_FADDP, \"faddp\" },\n\t{ X86_INS_ADOX, \"adox\" },\n\t{ X86_INS_AESDECLAST, \"aesdeclast\" },\n\t{ X86_INS_AESDEC, \"aesdec\" },\n\t{ X86_INS_AESENCLAST, \"aesenclast\" },\n\t{ X86_INS_AESENC, \"aesenc\" },\n\t{ X86_INS_AESIMC, \"aesimc\" },\n\t{ X86_INS_AESKEYGENASSIST, \"aeskeygenassist\" },\n\t{ X86_INS_AND, \"and\" },\n\t{ X86_INS_ANDN, \"andn\" },\n\t{ X86_INS_ANDNPD, \"andnpd\" },\n\t{ X86_INS_ANDNPS, \"andnps\" },\n\t{ X86_INS_ANDPD, \"andpd\" },\n\t{ X86_INS_ANDPS, \"andps\" },\n\t{ X86_INS_ARPL, \"arpl\" },\n\t{ X86_INS_BEXTR, \"bextr\" },\n\t{ X86_INS_BLCFILL, \"blcfill\" },\n\t{ X86_INS_BLCI, \"blci\" },\n\t{ X86_INS_BLCIC, \"blcic\" },\n\t{ X86_INS_BLCMSK, \"blcmsk\" },\n\t{ X86_INS_BLCS, \"blcs\" },\n\t{ X86_INS_BLENDPD, \"blendpd\" },\n\t{ X86_INS_BLENDPS, \"blendps\" },\n\t{ X86_INS_BLENDVPD, \"blendvpd\" },\n\t{ X86_INS_BLENDVPS, \"blendvps\" },\n\t{ X86_INS_BLSFILL, \"blsfill\" },\n\t{ X86_INS_BLSI, \"blsi\" },\n\t{ X86_INS_BLSIC, \"blsic\" },\n\t{ X86_INS_BLSMSK, \"blsmsk\" },\n\t{ X86_INS_BLSR, \"blsr\" },\n\t{ X86_INS_BOUND, \"bound\" },\n\t{ X86_INS_BSF, \"bsf\" },\n\t{ X86_INS_BSR, \"bsr\" },\n\t{ X86_INS_BSWAP, \"bswap\" },\n\t{ X86_INS_BT, \"bt\" },\n\t{ X86_INS_BTC, \"btc\" },\n\t{ X86_INS_BTR, \"btr\" },\n\t{ X86_INS_BTS, \"bts\" },\n\t{ X86_INS_BZHI, \"bzhi\" },\n\t{ X86_INS_CALL, \"call\" },\n\t{ X86_INS_CBW, \"cbw\" },\n\t{ X86_INS_CDQ, \"cdq\" },\n\t{ X86_INS_CDQE, \"cdqe\" },\n\t{ X86_INS_FCHS, \"fchs\" },\n\t{ X86_INS_CLAC, \"clac\" },\n\t{ X86_INS_CLC, \"clc\" },\n\t{ X86_INS_CLD, \"cld\" },\n\t{ X86_INS_CLFLUSH, \"clflush\" },\n\t{ X86_INS_CLFLUSHOPT, \"clflushopt\" },\n\t{ X86_INS_CLGI, \"clgi\" },\n\t{ X86_INS_CLI, \"cli\" },\n\t{ X86_INS_CLTS, \"clts\" },\n\t{ X86_INS_CLWB, \"clwb\" },\n\t{ X86_INS_CMC, \"cmc\" },\n\t{ X86_INS_CMOVA, \"cmova\" },\n\t{ X86_INS_CMOVAE, \"cmovae\" },\n\t{ X86_INS_CMOVB, \"cmovb\" },\n\t{ X86_INS_CMOVBE, \"cmovbe\" },\n\t{ X86_INS_FCMOVBE, \"fcmovbe\" },\n\t{ X86_INS_FCMOVB, \"fcmovb\" },\n\t{ X86_INS_CMOVE, \"cmove\" },\n\t{ X86_INS_FCMOVE, \"fcmove\" },\n\t{ X86_INS_CMOVG, \"cmovg\" },\n\t{ X86_INS_CMOVGE, \"cmovge\" },\n\t{ X86_INS_CMOVL, \"cmovl\" },\n\t{ X86_INS_CMOVLE, \"cmovle\" },\n\t{ X86_INS_FCMOVNBE, \"fcmovnbe\" },\n\t{ X86_INS_FCMOVNB, \"fcmovnb\" },\n\t{ X86_INS_CMOVNE, \"cmovne\" },\n\t{ X86_INS_FCMOVNE, \"fcmovne\" },\n\t{ X86_INS_CMOVNO, \"cmovno\" },\n\t{ X86_INS_CMOVNP, \"cmovnp\" },\n\t{ X86_INS_FCMOVNU, \"fcmovnu\" },\n\t{ X86_INS_CMOVNS, \"cmovns\" },\n\t{ X86_INS_CMOVO, \"cmovo\" },\n\t{ X86_INS_CMOVP, \"cmovp\" },\n\t{ X86_INS_FCMOVU, \"fcmovu\" },\n\t{ X86_INS_CMOVS, \"cmovs\" },\n\t{ X86_INS_CMP, \"cmp\" },\n\t{ X86_INS_CMPSB, \"cmpsb\" },\n\t{ X86_INS_CMPSQ, \"cmpsq\" },\n\t{ X86_INS_CMPSW, \"cmpsw\" },\n\t{ X86_INS_CMPXCHG16B, \"cmpxchg16b\" },\n\t{ X86_INS_CMPXCHG, \"cmpxchg\" },\n\t{ X86_INS_CMPXCHG8B, \"cmpxchg8b\" },\n\t{ X86_INS_COMISD, \"comisd\" },\n\t{ X86_INS_COMISS, \"comiss\" },\n\t{ X86_INS_FCOMP, \"fcomp\" },\n\t{ X86_INS_FCOMPI, \"fcompi\" },\n\t{ X86_INS_FCOMI, \"fcomi\" },\n\t{ X86_INS_FCOM, \"fcom\" },\n\t{ X86_INS_FCOS, \"fcos\" },\n\t{ X86_INS_CPUID, \"cpuid\" },\n\t{ X86_INS_CQO, \"cqo\" },\n\t{ X86_INS_CRC32, \"crc32\" },\n\t{ X86_INS_CVTDQ2PD, \"cvtdq2pd\" },\n\t{ X86_INS_CVTDQ2PS, \"cvtdq2ps\" },\n\t{ X86_INS_CVTPD2DQ, \"cvtpd2dq\" },\n\t{ X86_INS_CVTPD2PS, \"cvtpd2ps\" },\n\t{ X86_INS_CVTPS2DQ, \"cvtps2dq\" },\n\t{ X86_INS_CVTPS2PD, \"cvtps2pd\" },\n\t{ X86_INS_CVTSD2SI, \"cvtsd2si\" },\n\t{ X86_INS_CVTSD2SS, \"cvtsd2ss\" },\n\t{ X86_INS_CVTSI2SD, \"cvtsi2sd\" },\n\t{ X86_INS_CVTSI2SS, \"cvtsi2ss\" },\n\t{ X86_INS_CVTSS2SD, \"cvtss2sd\" },\n\t{ X86_INS_CVTSS2SI, \"cvtss2si\" },\n\t{ X86_INS_CVTTPD2DQ, \"cvttpd2dq\" },\n\t{ X86_INS_CVTTPS2DQ, \"cvttps2dq\" },\n\t{ X86_INS_CVTTSD2SI, \"cvttsd2si\" },\n\t{ X86_INS_CVTTSS2SI, \"cvttss2si\" },\n\t{ X86_INS_CWD, \"cwd\" },\n\t{ X86_INS_CWDE, \"cwde\" },\n\t{ X86_INS_DAA, \"daa\" },\n\t{ X86_INS_DAS, \"das\" },\n\t{ X86_INS_DATA16, \"data16\" },\n\t{ X86_INS_DEC, \"dec\" },\n\t{ X86_INS_DIV, \"div\" },\n\t{ X86_INS_DIVPD, \"divpd\" },\n\t{ X86_INS_DIVPS, \"divps\" },\n\t{ X86_INS_FDIVR, \"fdivr\" },\n\t{ X86_INS_FIDIVR, \"fidivr\" },\n\t{ X86_INS_FDIVRP, \"fdivrp\" },\n\t{ X86_INS_DIVSD, \"divsd\" },\n\t{ X86_INS_DIVSS, \"divss\" },\n\t{ X86_INS_FDIV, \"fdiv\" },\n\t{ X86_INS_FIDIV, \"fidiv\" },\n\t{ X86_INS_FDIVP, \"fdivp\" },\n\t{ X86_INS_DPPD, \"dppd\" },\n\t{ X86_INS_DPPS, \"dpps\" },\n\t{ X86_INS_RET, \"ret\" },\n\t{ X86_INS_ENCLS, \"encls\" },\n\t{ X86_INS_ENCLU, \"enclu\" },\n\t{ X86_INS_ENTER, \"enter\" },\n\t{ X86_INS_EXTRACTPS, \"extractps\" },\n\t{ X86_INS_EXTRQ, \"extrq\" },\n\t{ X86_INS_F2XM1, \"f2xm1\" },\n\t{ X86_INS_LCALL, \"lcall\" },\n\t{ X86_INS_LJMP, \"ljmp\" },\n\t{ X86_INS_FBLD, \"fbld\" },\n\t{ X86_INS_FBSTP, \"fbstp\" },\n\t{ X86_INS_FCOMPP, \"fcompp\" },\n\t{ X86_INS_FDECSTP, \"fdecstp\" },\n\t{ X86_INS_FEMMS, \"femms\" },\n\t{ X86_INS_FFREE, \"ffree\" },\n\t{ X86_INS_FICOM, \"ficom\" },\n\t{ X86_INS_FICOMP, \"ficomp\" },\n\t{ X86_INS_FINCSTP, \"fincstp\" },\n\t{ X86_INS_FLDCW, \"fldcw\" },\n\t{ X86_INS_FLDENV, \"fldenv\" },\n\t{ X86_INS_FLDL2E, \"fldl2e\" },\n\t{ X86_INS_FLDL2T, \"fldl2t\" },\n\t{ X86_INS_FLDLG2, \"fldlg2\" },\n\t{ X86_INS_FLDLN2, \"fldln2\" },\n\t{ X86_INS_FLDPI, \"fldpi\" },\n\t{ X86_INS_FNCLEX, \"fnclex\" },\n\t{ X86_INS_FNINIT, \"fninit\" },\n\t{ X86_INS_FNOP, \"fnop\" },\n\t{ X86_INS_FNSTCW, \"fnstcw\" },\n\t{ X86_INS_FNSTSW, \"fnstsw\" },\n\t{ X86_INS_FPATAN, \"fpatan\" },\n\t{ X86_INS_FPREM, \"fprem\" },\n\t{ X86_INS_FPREM1, \"fprem1\" },\n\t{ X86_INS_FPTAN, \"fptan\" },\n\t{ X86_INS_FFREEP, \"ffreep\" },\n\t{ X86_INS_FRNDINT, \"frndint\" },\n\t{ X86_INS_FRSTOR, \"frstor\" },\n\t{ X86_INS_FNSAVE, \"fnsave\" },\n\t{ X86_INS_FSCALE, \"fscale\" },\n\t{ X86_INS_FSETPM, \"fsetpm\" },\n\t{ X86_INS_FSINCOS, \"fsincos\" },\n\t{ X86_INS_FNSTENV, \"fnstenv\" },\n\t{ X86_INS_FXAM, \"fxam\" },\n\t{ X86_INS_FXRSTOR, \"fxrstor\" },\n\t{ X86_INS_FXRSTOR64, \"fxrstor64\" },\n\t{ X86_INS_FXSAVE, \"fxsave\" },\n\t{ X86_INS_FXSAVE64, \"fxsave64\" },\n\t{ X86_INS_FXTRACT, \"fxtract\" },\n\t{ X86_INS_FYL2X, \"fyl2x\" },\n\t{ X86_INS_FYL2XP1, \"fyl2xp1\" },\n\t{ X86_INS_MOVAPD, \"movapd\" },\n\t{ X86_INS_MOVAPS, \"movaps\" },\n\t{ X86_INS_ORPD, \"orpd\" },\n\t{ X86_INS_ORPS, \"orps\" },\n\t{ X86_INS_VMOVAPD, \"vmovapd\" },\n\t{ X86_INS_VMOVAPS, \"vmovaps\" },\n\t{ X86_INS_XORPD, \"xorpd\" },\n\t{ X86_INS_XORPS, \"xorps\" },\n\t{ X86_INS_GETSEC, \"getsec\" },\n\t{ X86_INS_HADDPD, \"haddpd\" },\n\t{ X86_INS_HADDPS, \"haddps\" },\n\t{ X86_INS_HLT, \"hlt\" },\n\t{ X86_INS_HSUBPD, \"hsubpd\" },\n\t{ X86_INS_HSUBPS, \"hsubps\" },\n\t{ X86_INS_IDIV, \"idiv\" },\n\t{ X86_INS_FILD, \"fild\" },\n\t{ X86_INS_IMUL, \"imul\" },\n\t{ X86_INS_IN, \"in\" },\n\t{ X86_INS_INC, \"inc\" },\n\t{ X86_INS_INSB, \"insb\" },\n\t{ X86_INS_INSERTPS, \"insertps\" },\n\t{ X86_INS_INSERTQ, \"insertq\" },\n\t{ X86_INS_INSD, \"insd\" },\n\t{ X86_INS_INSW, \"insw\" },\n\t{ X86_INS_INT, \"int\" },\n\t{ X86_INS_INT1, \"int1\" },\n\t{ X86_INS_INT3, \"int3\" },\n\t{ X86_INS_INTO, \"into\" },\n\t{ X86_INS_INVD, \"invd\" },\n\t{ X86_INS_INVEPT, \"invept\" },\n\t{ X86_INS_INVLPG, \"invlpg\" },\n\t{ X86_INS_INVLPGA, \"invlpga\" },\n\t{ X86_INS_INVPCID, \"invpcid\" },\n\t{ X86_INS_INVVPID, \"invvpid\" },\n\t{ X86_INS_IRET, \"iret\" },\n\t{ X86_INS_IRETD, \"iretd\" },\n\t{ X86_INS_IRETQ, \"iretq\" },\n\t{ X86_INS_FISTTP, \"fisttp\" },\n\t{ X86_INS_FIST, \"fist\" },\n\t{ X86_INS_FISTP, \"fistp\" },\n\t{ X86_INS_UCOMISD, \"ucomisd\" },\n\t{ X86_INS_UCOMISS, \"ucomiss\" },\n\t{ X86_INS_VCOMISD, \"vcomisd\" },\n\t{ X86_INS_VCOMISS, \"vcomiss\" },\n\t{ X86_INS_VCVTSD2SS, \"vcvtsd2ss\" },\n\t{ X86_INS_VCVTSI2SD, \"vcvtsi2sd\" },\n\t{ X86_INS_VCVTSI2SS, \"vcvtsi2ss\" },\n\t{ X86_INS_VCVTSS2SD, \"vcvtss2sd\" },\n\t{ X86_INS_VCVTTSD2SI, \"vcvttsd2si\" },\n\t{ X86_INS_VCVTTSD2USI, \"vcvttsd2usi\" },\n\t{ X86_INS_VCVTTSS2SI, \"vcvttss2si\" },\n\t{ X86_INS_VCVTTSS2USI, \"vcvttss2usi\" },\n\t{ X86_INS_VCVTUSI2SD, \"vcvtusi2sd\" },\n\t{ X86_INS_VCVTUSI2SS, \"vcvtusi2ss\" },\n\t{ X86_INS_VUCOMISD, \"vucomisd\" },\n\t{ X86_INS_VUCOMISS, \"vucomiss\" },\n\t{ X86_INS_JAE, \"jae\" },\n\t{ X86_INS_JA, \"ja\" },\n\t{ X86_INS_JBE, \"jbe\" },\n\t{ X86_INS_JB, \"jb\" },\n\t{ X86_INS_JCXZ, \"jcxz\" },\n\t{ X86_INS_JECXZ, \"jecxz\" },\n\t{ X86_INS_JE, \"je\" },\n\t{ X86_INS_JGE, \"jge\" },\n\t{ X86_INS_JG, \"jg\" },\n\t{ X86_INS_JLE, \"jle\" },\n\t{ X86_INS_JL, \"jl\" },\n\t{ X86_INS_JMP, \"jmp\" },\n\t{ X86_INS_JNE, \"jne\" },\n\t{ X86_INS_JNO, \"jno\" },\n\t{ X86_INS_JNP, \"jnp\" },\n\t{ X86_INS_JNS, \"jns\" },\n\t{ X86_INS_JO, \"jo\" },\n\t{ X86_INS_JP, \"jp\" },\n\t{ X86_INS_JRCXZ, \"jrcxz\" },\n\t{ X86_INS_JS, \"js\" },\n\t{ X86_INS_KANDB, \"kandb\" },\n\t{ X86_INS_KANDD, \"kandd\" },\n\t{ X86_INS_KANDNB, \"kandnb\" },\n\t{ X86_INS_KANDND, \"kandnd\" },\n\t{ X86_INS_KANDNQ, \"kandnq\" },\n\t{ X86_INS_KANDNW, \"kandnw\" },\n\t{ X86_INS_KANDQ, \"kandq\" },\n\t{ X86_INS_KANDW, \"kandw\" },\n\t{ X86_INS_KMOVB, \"kmovb\" },\n\t{ X86_INS_KMOVD, \"kmovd\" },\n\t{ X86_INS_KMOVQ, \"kmovq\" },\n\t{ X86_INS_KMOVW, \"kmovw\" },\n\t{ X86_INS_KNOTB, \"knotb\" },\n\t{ X86_INS_KNOTD, \"knotd\" },\n\t{ X86_INS_KNOTQ, \"knotq\" },\n\t{ X86_INS_KNOTW, \"knotw\" },\n\t{ X86_INS_KORB, \"korb\" },\n\t{ X86_INS_KORD, \"kord\" },\n\t{ X86_INS_KORQ, \"korq\" },\n\t{ X86_INS_KORTESTB, \"kortestb\" },\n\t{ X86_INS_KORTESTD, \"kortestd\" },\n\t{ X86_INS_KORTESTQ, \"kortestq\" },\n\t{ X86_INS_KORTESTW, \"kortestw\" },\n\t{ X86_INS_KORW, \"korw\" },\n\t{ X86_INS_KSHIFTLB, \"kshiftlb\" },\n\t{ X86_INS_KSHIFTLD, \"kshiftld\" },\n\t{ X86_INS_KSHIFTLQ, \"kshiftlq\" },\n\t{ X86_INS_KSHIFTLW, \"kshiftlw\" },\n\t{ X86_INS_KSHIFTRB, \"kshiftrb\" },\n\t{ X86_INS_KSHIFTRD, \"kshiftrd\" },\n\t{ X86_INS_KSHIFTRQ, \"kshiftrq\" },\n\t{ X86_INS_KSHIFTRW, \"kshiftrw\" },\n\t{ X86_INS_KUNPCKBW, \"kunpckbw\" },\n\t{ X86_INS_KXNORB, \"kxnorb\" },\n\t{ X86_INS_KXNORD, \"kxnord\" },\n\t{ X86_INS_KXNORQ, \"kxnorq\" },\n\t{ X86_INS_KXNORW, \"kxnorw\" },\n\t{ X86_INS_KXORB, \"kxorb\" },\n\t{ X86_INS_KXORD, \"kxord\" },\n\t{ X86_INS_KXORQ, \"kxorq\" },\n\t{ X86_INS_KXORW, \"kxorw\" },\n\t{ X86_INS_LAHF, \"lahf\" },\n\t{ X86_INS_LAR, \"lar\" },\n\t{ X86_INS_LDDQU, \"lddqu\" },\n\t{ X86_INS_LDMXCSR, \"ldmxcsr\" },\n\t{ X86_INS_LDS, \"lds\" },\n\t{ X86_INS_FLDZ, \"fldz\" },\n\t{ X86_INS_FLD1, \"fld1\" },\n\t{ X86_INS_FLD, \"fld\" },\n\t{ X86_INS_LEA, \"lea\" },\n\t{ X86_INS_LEAVE, \"leave\" },\n\t{ X86_INS_LES, \"les\" },\n\t{ X86_INS_LFENCE, \"lfence\" },\n\t{ X86_INS_LFS, \"lfs\" },\n\t{ X86_INS_LGDT, \"lgdt\" },\n\t{ X86_INS_LGS, \"lgs\" },\n\t{ X86_INS_LIDT, \"lidt\" },\n\t{ X86_INS_LLDT, \"lldt\" },\n\t{ X86_INS_LMSW, \"lmsw\" },\n\t{ X86_INS_OR, \"or\" },\n\t{ X86_INS_SUB, \"sub\" },\n\t{ X86_INS_XOR, \"xor\" },\n\t{ X86_INS_LODSB, \"lodsb\" },\n\t{ X86_INS_LODSD, \"lodsd\" },\n\t{ X86_INS_LODSQ, \"lodsq\" },\n\t{ X86_INS_LODSW, \"lodsw\" },\n\t{ X86_INS_LOOP, \"loop\" },\n\t{ X86_INS_LOOPE, \"loope\" },\n\t{ X86_INS_LOOPNE, \"loopne\" },\n\t{ X86_INS_RETF, \"retf\" },\n\t{ X86_INS_RETFQ, \"retfq\" },\n\t{ X86_INS_LSL, \"lsl\" },\n\t{ X86_INS_LSS, \"lss\" },\n\t{ X86_INS_LTR, \"ltr\" },\n\t{ X86_INS_XADD, \"xadd\" },\n\t{ X86_INS_LZCNT, \"lzcnt\" },\n\t{ X86_INS_MASKMOVDQU, \"maskmovdqu\" },\n\t{ X86_INS_MAXPD, \"maxpd\" },\n\t{ X86_INS_MAXPS, \"maxps\" },\n\t{ X86_INS_MAXSD, \"maxsd\" },\n\t{ X86_INS_MAXSS, \"maxss\" },\n\t{ X86_INS_MFENCE, \"mfence\" },\n\t{ X86_INS_MINPD, \"minpd\" },\n\t{ X86_INS_MINPS, \"minps\" },\n\t{ X86_INS_MINSD, \"minsd\" },\n\t{ X86_INS_MINSS, \"minss\" },\n\t{ X86_INS_CVTPD2PI, \"cvtpd2pi\" },\n\t{ X86_INS_CVTPI2PD, \"cvtpi2pd\" },\n\t{ X86_INS_CVTPI2PS, \"cvtpi2ps\" },\n\t{ X86_INS_CVTPS2PI, \"cvtps2pi\" },\n\t{ X86_INS_CVTTPD2PI, \"cvttpd2pi\" },\n\t{ X86_INS_CVTTPS2PI, \"cvttps2pi\" },\n\t{ X86_INS_EMMS, \"emms\" },\n\t{ X86_INS_MASKMOVQ, \"maskmovq\" },\n\t{ X86_INS_MOVD, \"movd\" },\n\t{ X86_INS_MOVDQ2Q, \"movdq2q\" },\n\t{ X86_INS_MOVNTQ, \"movntq\" },\n\t{ X86_INS_MOVQ2DQ, \"movq2dq\" },\n\t{ X86_INS_MOVQ, \"movq\" },\n\t{ X86_INS_PABSB, \"pabsb\" },\n\t{ X86_INS_PABSD, \"pabsd\" },\n\t{ X86_INS_PABSW, \"pabsw\" },\n\t{ X86_INS_PACKSSDW, \"packssdw\" },\n\t{ X86_INS_PACKSSWB, \"packsswb\" },\n\t{ X86_INS_PACKUSWB, \"packuswb\" },\n\t{ X86_INS_PADDB, \"paddb\" },\n\t{ X86_INS_PADDD, \"paddd\" },\n\t{ X86_INS_PADDQ, \"paddq\" },\n\t{ X86_INS_PADDSB, \"paddsb\" },\n\t{ X86_INS_PADDSW, \"paddsw\" },\n\t{ X86_INS_PADDUSB, \"paddusb\" },\n\t{ X86_INS_PADDUSW, \"paddusw\" },\n\t{ X86_INS_PADDW, \"paddw\" },\n\t{ X86_INS_PALIGNR, \"palignr\" },\n\t{ X86_INS_PANDN, \"pandn\" },\n\t{ X86_INS_PAND, \"pand\" },\n\t{ X86_INS_PAVGB, \"pavgb\" },\n\t{ X86_INS_PAVGW, \"pavgw\" },\n\t{ X86_INS_PCMPEQB, \"pcmpeqb\" },\n\t{ X86_INS_PCMPEQD, \"pcmpeqd\" },\n\t{ X86_INS_PCMPEQW, \"pcmpeqw\" },\n\t{ X86_INS_PCMPGTB, \"pcmpgtb\" },\n\t{ X86_INS_PCMPGTD, \"pcmpgtd\" },\n\t{ X86_INS_PCMPGTW, \"pcmpgtw\" },\n\t{ X86_INS_PEXTRW, \"pextrw\" },\n\t{ X86_INS_PHADDSW, \"phaddsw\" },\n\t{ X86_INS_PHADDW, \"phaddw\" },\n\t{ X86_INS_PHADDD, \"phaddd\" },\n\t{ X86_INS_PHSUBD, \"phsubd\" },\n\t{ X86_INS_PHSUBSW, \"phsubsw\" },\n\t{ X86_INS_PHSUBW, \"phsubw\" },\n\t{ X86_INS_PINSRW, \"pinsrw\" },\n\t{ X86_INS_PMADDUBSW, \"pmaddubsw\" },\n\t{ X86_INS_PMADDWD, \"pmaddwd\" },\n\t{ X86_INS_PMAXSW, \"pmaxsw\" },\n\t{ X86_INS_PMAXUB, \"pmaxub\" },\n\t{ X86_INS_PMINSW, \"pminsw\" },\n\t{ X86_INS_PMINUB, \"pminub\" },\n\t{ X86_INS_PMOVMSKB, \"pmovmskb\" },\n\t{ X86_INS_PMULHRSW, \"pmulhrsw\" },\n\t{ X86_INS_PMULHUW, \"pmulhuw\" },\n\t{ X86_INS_PMULHW, \"pmulhw\" },\n\t{ X86_INS_PMULLW, \"pmullw\" },\n\t{ X86_INS_PMULUDQ, \"pmuludq\" },\n\t{ X86_INS_POR, \"por\" },\n\t{ X86_INS_PSADBW, \"psadbw\" },\n\t{ X86_INS_PSHUFB, \"pshufb\" },\n\t{ X86_INS_PSHUFW, \"pshufw\" },\n\t{ X86_INS_PSIGNB, \"psignb\" },\n\t{ X86_INS_PSIGND, \"psignd\" },\n\t{ X86_INS_PSIGNW, \"psignw\" },\n\t{ X86_INS_PSLLD, \"pslld\" },\n\t{ X86_INS_PSLLQ, \"psllq\" },\n\t{ X86_INS_PSLLW, \"psllw\" },\n\t{ X86_INS_PSRAD, \"psrad\" },\n\t{ X86_INS_PSRAW, \"psraw\" },\n\t{ X86_INS_PSRLD, \"psrld\" },\n\t{ X86_INS_PSRLQ, \"psrlq\" },\n\t{ X86_INS_PSRLW, \"psrlw\" },\n\t{ X86_INS_PSUBB, \"psubb\" },\n\t{ X86_INS_PSUBD, \"psubd\" },\n\t{ X86_INS_PSUBQ, \"psubq\" },\n\t{ X86_INS_PSUBSB, \"psubsb\" },\n\t{ X86_INS_PSUBSW, \"psubsw\" },\n\t{ X86_INS_PSUBUSB, \"psubusb\" },\n\t{ X86_INS_PSUBUSW, \"psubusw\" },\n\t{ X86_INS_PSUBW, \"psubw\" },\n\t{ X86_INS_PUNPCKHBW, \"punpckhbw\" },\n\t{ X86_INS_PUNPCKHDQ, \"punpckhdq\" },\n\t{ X86_INS_PUNPCKHWD, \"punpckhwd\" },\n\t{ X86_INS_PUNPCKLBW, \"punpcklbw\" },\n\t{ X86_INS_PUNPCKLDQ, \"punpckldq\" },\n\t{ X86_INS_PUNPCKLWD, \"punpcklwd\" },\n\t{ X86_INS_PXOR, \"pxor\" },\n\t{ X86_INS_MONITOR, \"monitor\" },\n\t{ X86_INS_MONTMUL, \"montmul\" },\n\t{ X86_INS_MOV, \"mov\" },\n\t{ X86_INS_MOVABS, \"movabs\" },\n\t{ X86_INS_MOVBE, \"movbe\" },\n\t{ X86_INS_MOVDDUP, \"movddup\" },\n\t{ X86_INS_MOVDQA, \"movdqa\" },\n\t{ X86_INS_MOVDQU, \"movdqu\" },\n\t{ X86_INS_MOVHLPS, \"movhlps\" },\n\t{ X86_INS_MOVHPD, \"movhpd\" },\n\t{ X86_INS_MOVHPS, \"movhps\" },\n\t{ X86_INS_MOVLHPS, \"movlhps\" },\n\t{ X86_INS_MOVLPD, \"movlpd\" },\n\t{ X86_INS_MOVLPS, \"movlps\" },\n\t{ X86_INS_MOVMSKPD, \"movmskpd\" },\n\t{ X86_INS_MOVMSKPS, \"movmskps\" },\n\t{ X86_INS_MOVNTDQA, \"movntdqa\" },\n\t{ X86_INS_MOVNTDQ, \"movntdq\" },\n\t{ X86_INS_MOVNTI, \"movnti\" },\n\t{ X86_INS_MOVNTPD, \"movntpd\" },\n\t{ X86_INS_MOVNTPS, \"movntps\" },\n\t{ X86_INS_MOVNTSD, \"movntsd\" },\n\t{ X86_INS_MOVNTSS, \"movntss\" },\n\t{ X86_INS_MOVSB, \"movsb\" },\n\t{ X86_INS_MOVSD, \"movsd\" },\n\t{ X86_INS_MOVSHDUP, \"movshdup\" },\n\t{ X86_INS_MOVSLDUP, \"movsldup\" },\n\t{ X86_INS_MOVSQ, \"movsq\" },\n\t{ X86_INS_MOVSS, \"movss\" },\n\t{ X86_INS_MOVSW, \"movsw\" },\n\t{ X86_INS_MOVSX, \"movsx\" },\n\t{ X86_INS_MOVSXD, \"movsxd\" },\n\t{ X86_INS_MOVUPD, \"movupd\" },\n\t{ X86_INS_MOVUPS, \"movups\" },\n\t{ X86_INS_MOVZX, \"movzx\" },\n\t{ X86_INS_MPSADBW, \"mpsadbw\" },\n\t{ X86_INS_MUL, \"mul\" },\n\t{ X86_INS_MULPD, \"mulpd\" },\n\t{ X86_INS_MULPS, \"mulps\" },\n\t{ X86_INS_MULSD, \"mulsd\" },\n\t{ X86_INS_MULSS, \"mulss\" },\n\t{ X86_INS_MULX, \"mulx\" },\n\t{ X86_INS_FMUL, \"fmul\" },\n\t{ X86_INS_FIMUL, \"fimul\" },\n\t{ X86_INS_FMULP, \"fmulp\" },\n\t{ X86_INS_MWAIT, \"mwait\" },\n\t{ X86_INS_NEG, \"neg\" },\n\t{ X86_INS_NOP, \"nop\" },\n\t{ X86_INS_NOT, \"not\" },\n\t{ X86_INS_OUT, \"out\" },\n\t{ X86_INS_OUTSB, \"outsb\" },\n\t{ X86_INS_OUTSD, \"outsd\" },\n\t{ X86_INS_OUTSW, \"outsw\" },\n\t{ X86_INS_PACKUSDW, \"packusdw\" },\n\t{ X86_INS_PAUSE, \"pause\" },\n\t{ X86_INS_PAVGUSB, \"pavgusb\" },\n\t{ X86_INS_PBLENDVB, \"pblendvb\" },\n\t{ X86_INS_PBLENDW, \"pblendw\" },\n\t{ X86_INS_PCLMULQDQ, \"pclmulqdq\" },\n\t{ X86_INS_PCMPEQQ, \"pcmpeqq\" },\n\t{ X86_INS_PCMPESTRI, \"pcmpestri\" },\n\t{ X86_INS_PCMPESTRM, \"pcmpestrm\" },\n\t{ X86_INS_PCMPGTQ, \"pcmpgtq\" },\n\t{ X86_INS_PCMPISTRI, \"pcmpistri\" },\n\t{ X86_INS_PCMPISTRM, \"pcmpistrm\" },\n\t{ X86_INS_PCOMMIT, \"pcommit\" },\n\t{ X86_INS_PDEP, \"pdep\" },\n\t{ X86_INS_PEXT, \"pext\" },\n\t{ X86_INS_PEXTRB, \"pextrb\" },\n\t{ X86_INS_PEXTRD, \"pextrd\" },\n\t{ X86_INS_PEXTRQ, \"pextrq\" },\n\t{ X86_INS_PF2ID, \"pf2id\" },\n\t{ X86_INS_PF2IW, \"pf2iw\" },\n\t{ X86_INS_PFACC, \"pfacc\" },\n\t{ X86_INS_PFADD, \"pfadd\" },\n\t{ X86_INS_PFCMPEQ, \"pfcmpeq\" },\n\t{ X86_INS_PFCMPGE, \"pfcmpge\" },\n\t{ X86_INS_PFCMPGT, \"pfcmpgt\" },\n\t{ X86_INS_PFMAX, \"pfmax\" },\n\t{ X86_INS_PFMIN, \"pfmin\" },\n\t{ X86_INS_PFMUL, \"pfmul\" },\n\t{ X86_INS_PFNACC, \"pfnacc\" },\n\t{ X86_INS_PFPNACC, \"pfpnacc\" },\n\t{ X86_INS_PFRCPIT1, \"pfrcpit1\" },\n\t{ X86_INS_PFRCPIT2, \"pfrcpit2\" },\n\t{ X86_INS_PFRCP, \"pfrcp\" },\n\t{ X86_INS_PFRSQIT1, \"pfrsqit1\" },\n\t{ X86_INS_PFRSQRT, \"pfrsqrt\" },\n\t{ X86_INS_PFSUBR, \"pfsubr\" },\n\t{ X86_INS_PFSUB, \"pfsub\" },\n\t{ X86_INS_PHMINPOSUW, \"phminposuw\" },\n\t{ X86_INS_PI2FD, \"pi2fd\" },\n\t{ X86_INS_PI2FW, \"pi2fw\" },\n\t{ X86_INS_PINSRB, \"pinsrb\" },\n\t{ X86_INS_PINSRD, \"pinsrd\" },\n\t{ X86_INS_PINSRQ, \"pinsrq\" },\n\t{ X86_INS_PMAXSB, \"pmaxsb\" },\n\t{ X86_INS_PMAXSD, \"pmaxsd\" },\n\t{ X86_INS_PMAXUD, \"pmaxud\" },\n\t{ X86_INS_PMAXUW, \"pmaxuw\" },\n\t{ X86_INS_PMINSB, \"pminsb\" },\n\t{ X86_INS_PMINSD, \"pminsd\" },\n\t{ X86_INS_PMINUD, \"pminud\" },\n\t{ X86_INS_PMINUW, \"pminuw\" },\n\t{ X86_INS_PMOVSXBD, \"pmovsxbd\" },\n\t{ X86_INS_PMOVSXBQ, \"pmovsxbq\" },\n\t{ X86_INS_PMOVSXBW, \"pmovsxbw\" },\n\t{ X86_INS_PMOVSXDQ, \"pmovsxdq\" },\n\t{ X86_INS_PMOVSXWD, \"pmovsxwd\" },\n\t{ X86_INS_PMOVSXWQ, \"pmovsxwq\" },\n\t{ X86_INS_PMOVZXBD, \"pmovzxbd\" },\n\t{ X86_INS_PMOVZXBQ, \"pmovzxbq\" },\n\t{ X86_INS_PMOVZXBW, \"pmovzxbw\" },\n\t{ X86_INS_PMOVZXDQ, \"pmovzxdq\" },\n\t{ X86_INS_PMOVZXWD, \"pmovzxwd\" },\n\t{ X86_INS_PMOVZXWQ, \"pmovzxwq\" },\n\t{ X86_INS_PMULDQ, \"pmuldq\" },\n\t{ X86_INS_PMULHRW, \"pmulhrw\" },\n\t{ X86_INS_PMULLD, \"pmulld\" },\n\t{ X86_INS_POP, \"pop\" },\n\t{ X86_INS_POPAW, \"popaw\" },\n\t{ X86_INS_POPAL, \"popal\" },\n\t{ X86_INS_POPCNT, \"popcnt\" },\n\t{ X86_INS_POPF, \"popf\" },\n\t{ X86_INS_POPFD, \"popfd\" },\n\t{ X86_INS_POPFQ, \"popfq\" },\n\t{ X86_INS_PREFETCH, \"prefetch\" },\n\t{ X86_INS_PREFETCHNTA, \"prefetchnta\" },\n\t{ X86_INS_PREFETCHT0, \"prefetcht0\" },\n\t{ X86_INS_PREFETCHT1, \"prefetcht1\" },\n\t{ X86_INS_PREFETCHT2, \"prefetcht2\" },\n\t{ X86_INS_PREFETCHW, \"prefetchw\" },\n\t{ X86_INS_PSHUFD, \"pshufd\" },\n\t{ X86_INS_PSHUFHW, \"pshufhw\" },\n\t{ X86_INS_PSHUFLW, \"pshuflw\" },\n\t{ X86_INS_PSLLDQ, \"pslldq\" },\n\t{ X86_INS_PSRLDQ, \"psrldq\" },\n\t{ X86_INS_PSWAPD, \"pswapd\" },\n\t{ X86_INS_PTEST, \"ptest\" },\n\t{ X86_INS_PUNPCKHQDQ, \"punpckhqdq\" },\n\t{ X86_INS_PUNPCKLQDQ, \"punpcklqdq\" },\n\t{ X86_INS_PUSH, \"push\" },\n\t{ X86_INS_PUSHAW, \"pushaw\" },\n\t{ X86_INS_PUSHAL, \"pushal\" },\n\t{ X86_INS_PUSHF, \"pushf\" },\n\t{ X86_INS_PUSHFD, \"pushfd\" },\n\t{ X86_INS_PUSHFQ, \"pushfq\" },\n\t{ X86_INS_RCL, \"rcl\" },\n\t{ X86_INS_RCPPS, \"rcpps\" },\n\t{ X86_INS_RCPSS, \"rcpss\" },\n\t{ X86_INS_RCR, \"rcr\" },\n\t{ X86_INS_RDFSBASE, \"rdfsbase\" },\n\t{ X86_INS_RDGSBASE, \"rdgsbase\" },\n\t{ X86_INS_RDMSR, \"rdmsr\" },\n\t{ X86_INS_RDPMC, \"rdpmc\" },\n\t{ X86_INS_RDRAND, \"rdrand\" },\n\t{ X86_INS_RDSEED, \"rdseed\" },\n\t{ X86_INS_RDTSC, \"rdtsc\" },\n\t{ X86_INS_RDTSCP, \"rdtscp\" },\n\t{ X86_INS_ROL, \"rol\" },\n\t{ X86_INS_ROR, \"ror\" },\n\t{ X86_INS_RORX, \"rorx\" },\n\t{ X86_INS_ROUNDPD, \"roundpd\" },\n\t{ X86_INS_ROUNDPS, \"roundps\" },\n\t{ X86_INS_ROUNDSD, \"roundsd\" },\n\t{ X86_INS_ROUNDSS, \"roundss\" },\n\t{ X86_INS_RSM, \"rsm\" },\n\t{ X86_INS_RSQRTPS, \"rsqrtps\" },\n\t{ X86_INS_RSQRTSS, \"rsqrtss\" },\n\t{ X86_INS_SAHF, \"sahf\" },\n\t{ X86_INS_SAL, \"sal\" },\n\t{ X86_INS_SALC, \"salc\" },\n\t{ X86_INS_SAR, \"sar\" },\n\t{ X86_INS_SARX, \"sarx\" },\n\t{ X86_INS_SBB, \"sbb\" },\n\t{ X86_INS_SCASB, \"scasb\" },\n\t{ X86_INS_SCASD, \"scasd\" },\n\t{ X86_INS_SCASQ, \"scasq\" },\n\t{ X86_INS_SCASW, \"scasw\" },\n\t{ X86_INS_SETAE, \"setae\" },\n\t{ X86_INS_SETA, \"seta\" },\n\t{ X86_INS_SETBE, \"setbe\" },\n\t{ X86_INS_SETB, \"setb\" },\n\t{ X86_INS_SETE, \"sete\" },\n\t{ X86_INS_SETGE, \"setge\" },\n\t{ X86_INS_SETG, \"setg\" },\n\t{ X86_INS_SETLE, \"setle\" },\n\t{ X86_INS_SETL, \"setl\" },\n\t{ X86_INS_SETNE, \"setne\" },\n\t{ X86_INS_SETNO, \"setno\" },\n\t{ X86_INS_SETNP, \"setnp\" },\n\t{ X86_INS_SETNS, \"setns\" },\n\t{ X86_INS_SETO, \"seto\" },\n\t{ X86_INS_SETP, \"setp\" },\n\t{ X86_INS_SETS, \"sets\" },\n\t{ X86_INS_SFENCE, \"sfence\" },\n\t{ X86_INS_SGDT, \"sgdt\" },\n\t{ X86_INS_SHA1MSG1, \"sha1msg1\" },\n\t{ X86_INS_SHA1MSG2, \"sha1msg2\" },\n\t{ X86_INS_SHA1NEXTE, \"sha1nexte\" },\n\t{ X86_INS_SHA1RNDS4, \"sha1rnds4\" },\n\t{ X86_INS_SHA256MSG1, \"sha256msg1\" },\n\t{ X86_INS_SHA256MSG2, \"sha256msg2\" },\n\t{ X86_INS_SHA256RNDS2, \"sha256rnds2\" },\n\t{ X86_INS_SHL, \"shl\" },\n\t{ X86_INS_SHLD, \"shld\" },\n\t{ X86_INS_SHLX, \"shlx\" },\n\t{ X86_INS_SHR, \"shr\" },\n\t{ X86_INS_SHRD, \"shrd\" },\n\t{ X86_INS_SHRX, \"shrx\" },\n\t{ X86_INS_SHUFPD, \"shufpd\" },\n\t{ X86_INS_SHUFPS, \"shufps\" },\n\t{ X86_INS_SIDT, \"sidt\" },\n\t{ X86_INS_FSIN, \"fsin\" },\n\t{ X86_INS_SKINIT, \"skinit\" },\n\t{ X86_INS_SLDT, \"sldt\" },\n\t{ X86_INS_SMSW, \"smsw\" },\n\t{ X86_INS_SQRTPD, \"sqrtpd\" },\n\t{ X86_INS_SQRTPS, \"sqrtps\" },\n\t{ X86_INS_SQRTSD, \"sqrtsd\" },\n\t{ X86_INS_SQRTSS, \"sqrtss\" },\n\t{ X86_INS_FSQRT, \"fsqrt\" },\n\t{ X86_INS_STAC, \"stac\" },\n\t{ X86_INS_STC, \"stc\" },\n\t{ X86_INS_STD, \"std\" },\n\t{ X86_INS_STGI, \"stgi\" },\n\t{ X86_INS_STI, \"sti\" },\n\t{ X86_INS_STMXCSR, \"stmxcsr\" },\n\t{ X86_INS_STOSB, \"stosb\" },\n\t{ X86_INS_STOSD, \"stosd\" },\n\t{ X86_INS_STOSQ, \"stosq\" },\n\t{ X86_INS_STOSW, \"stosw\" },\n\t{ X86_INS_STR, \"str\" },\n\t{ X86_INS_FST, \"fst\" },\n\t{ X86_INS_FSTP, \"fstp\" },\n\t{ X86_INS_FSTPNCE, \"fstpnce\" },\n\t{ X86_INS_FXCH, \"fxch\" },\n\t{ X86_INS_SUBPD, \"subpd\" },\n\t{ X86_INS_SUBPS, \"subps\" },\n\t{ X86_INS_FSUBR, \"fsubr\" },\n\t{ X86_INS_FISUBR, \"fisubr\" },\n\t{ X86_INS_FSUBRP, \"fsubrp\" },\n\t{ X86_INS_SUBSD, \"subsd\" },\n\t{ X86_INS_SUBSS, \"subss\" },\n\t{ X86_INS_FSUB, \"fsub\" },\n\t{ X86_INS_FISUB, \"fisub\" },\n\t{ X86_INS_FSUBP, \"fsubp\" },\n\t{ X86_INS_SWAPGS, \"swapgs\" },\n\t{ X86_INS_SYSCALL, \"syscall\" },\n\t{ X86_INS_SYSENTER, \"sysenter\" },\n\t{ X86_INS_SYSEXIT, \"sysexit\" },\n\t{ X86_INS_SYSRET, \"sysret\" },\n\t{ X86_INS_T1MSKC, \"t1mskc\" },\n\t{ X86_INS_TEST, \"test\" },\n\t{ X86_INS_UD2, \"ud2\" },\n\t{ X86_INS_FTST, \"ftst\" },\n\t{ X86_INS_TZCNT, \"tzcnt\" },\n\t{ X86_INS_TZMSK, \"tzmsk\" },\n\t{ X86_INS_FUCOMPI, \"fucompi\" },\n\t{ X86_INS_FUCOMI, \"fucomi\" },\n\t{ X86_INS_FUCOMPP, \"fucompp\" },\n\t{ X86_INS_FUCOMP, \"fucomp\" },\n\t{ X86_INS_FUCOM, \"fucom\" },\n\t{ X86_INS_UD2B, \"ud2b\" },\n\t{ X86_INS_UNPCKHPD, \"unpckhpd\" },\n\t{ X86_INS_UNPCKHPS, \"unpckhps\" },\n\t{ X86_INS_UNPCKLPD, \"unpcklpd\" },\n\t{ X86_INS_UNPCKLPS, \"unpcklps\" },\n\t{ X86_INS_VADDPD, \"vaddpd\" },\n\t{ X86_INS_VADDPS, \"vaddps\" },\n\t{ X86_INS_VADDSD, \"vaddsd\" },\n\t{ X86_INS_VADDSS, \"vaddss\" },\n\t{ X86_INS_VADDSUBPD, \"vaddsubpd\" },\n\t{ X86_INS_VADDSUBPS, \"vaddsubps\" },\n\t{ X86_INS_VAESDECLAST, \"vaesdeclast\" },\n\t{ X86_INS_VAESDEC, \"vaesdec\" },\n\t{ X86_INS_VAESENCLAST, \"vaesenclast\" },\n\t{ X86_INS_VAESENC, \"vaesenc\" },\n\t{ X86_INS_VAESIMC, \"vaesimc\" },\n\t{ X86_INS_VAESKEYGENASSIST, \"vaeskeygenassist\" },\n\t{ X86_INS_VALIGND, \"valignd\" },\n\t{ X86_INS_VALIGNQ, \"valignq\" },\n\t{ X86_INS_VANDNPD, \"vandnpd\" },\n\t{ X86_INS_VANDNPS, \"vandnps\" },\n\t{ X86_INS_VANDPD, \"vandpd\" },\n\t{ X86_INS_VANDPS, \"vandps\" },\n\t{ X86_INS_VBLENDMPD, \"vblendmpd\" },\n\t{ X86_INS_VBLENDMPS, \"vblendmps\" },\n\t{ X86_INS_VBLENDPD, \"vblendpd\" },\n\t{ X86_INS_VBLENDPS, \"vblendps\" },\n\t{ X86_INS_VBLENDVPD, \"vblendvpd\" },\n\t{ X86_INS_VBLENDVPS, \"vblendvps\" },\n\t{ X86_INS_VBROADCASTF128, \"vbroadcastf128\" },\n\t{ X86_INS_VBROADCASTI32X4, \"vbroadcasti32x4\" },\n\t{ X86_INS_VBROADCASTI64X4, \"vbroadcasti64x4\" },\n\t{ X86_INS_VBROADCASTSD, \"vbroadcastsd\" },\n\t{ X86_INS_VBROADCASTSS, \"vbroadcastss\" },\n\t{ X86_INS_VCOMPRESSPD, \"vcompresspd\" },\n\t{ X86_INS_VCOMPRESSPS, \"vcompressps\" },\n\t{ X86_INS_VCVTDQ2PD, \"vcvtdq2pd\" },\n\t{ X86_INS_VCVTDQ2PS, \"vcvtdq2ps\" },\n\t{ X86_INS_VCVTPD2DQX, \"vcvtpd2dqx\" },\n\t{ X86_INS_VCVTPD2DQ, \"vcvtpd2dq\" },\n\t{ X86_INS_VCVTPD2PSX, \"vcvtpd2psx\" },\n\t{ X86_INS_VCVTPD2PS, \"vcvtpd2ps\" },\n\t{ X86_INS_VCVTPD2UDQ, \"vcvtpd2udq\" },\n\t{ X86_INS_VCVTPH2PS, \"vcvtph2ps\" },\n\t{ X86_INS_VCVTPS2DQ, \"vcvtps2dq\" },\n\t{ X86_INS_VCVTPS2PD, \"vcvtps2pd\" },\n\t{ X86_INS_VCVTPS2PH, \"vcvtps2ph\" },\n\t{ X86_INS_VCVTPS2UDQ, \"vcvtps2udq\" },\n\t{ X86_INS_VCVTSD2SI, \"vcvtsd2si\" },\n\t{ X86_INS_VCVTSD2USI, \"vcvtsd2usi\" },\n\t{ X86_INS_VCVTSS2SI, \"vcvtss2si\" },\n\t{ X86_INS_VCVTSS2USI, \"vcvtss2usi\" },\n\t{ X86_INS_VCVTTPD2DQX, \"vcvttpd2dqx\" },\n\t{ X86_INS_VCVTTPD2DQ, \"vcvttpd2dq\" },\n\t{ X86_INS_VCVTTPD2UDQ, \"vcvttpd2udq\" },\n\t{ X86_INS_VCVTTPS2DQ, \"vcvttps2dq\" },\n\t{ X86_INS_VCVTTPS2UDQ, \"vcvttps2udq\" },\n\t{ X86_INS_VCVTUDQ2PD, \"vcvtudq2pd\" },\n\t{ X86_INS_VCVTUDQ2PS, \"vcvtudq2ps\" },\n\t{ X86_INS_VDIVPD, \"vdivpd\" },\n\t{ X86_INS_VDIVPS, \"vdivps\" },\n\t{ X86_INS_VDIVSD, \"vdivsd\" },\n\t{ X86_INS_VDIVSS, \"vdivss\" },\n\t{ X86_INS_VDPPD, \"vdppd\" },\n\t{ X86_INS_VDPPS, \"vdpps\" },\n\t{ X86_INS_VERR, \"verr\" },\n\t{ X86_INS_VERW, \"verw\" },\n\t{ X86_INS_VEXP2PD, \"vexp2pd\" },\n\t{ X86_INS_VEXP2PS, \"vexp2ps\" },\n\t{ X86_INS_VEXPANDPD, \"vexpandpd\" },\n\t{ X86_INS_VEXPANDPS, \"vexpandps\" },\n\t{ X86_INS_VEXTRACTF128, \"vextractf128\" },\n\t{ X86_INS_VEXTRACTF32X4, \"vextractf32x4\" },\n\t{ X86_INS_VEXTRACTF64X4, \"vextractf64x4\" },\n\t{ X86_INS_VEXTRACTI128, \"vextracti128\" },\n\t{ X86_INS_VEXTRACTI32X4, \"vextracti32x4\" },\n\t{ X86_INS_VEXTRACTI64X4, \"vextracti64x4\" },\n\t{ X86_INS_VEXTRACTPS, \"vextractps\" },\n\t{ X86_INS_VFMADD132PD, \"vfmadd132pd\" },\n\t{ X86_INS_VFMADD132PS, \"vfmadd132ps\" },\n\t{ X86_INS_VFMADDPD, \"vfmaddpd\" },\n\t{ X86_INS_VFMADD213PD, \"vfmadd213pd\" },\n\t{ X86_INS_VFMADD231PD, \"vfmadd231pd\" },\n\t{ X86_INS_VFMADDPS, \"vfmaddps\" },\n\t{ X86_INS_VFMADD213PS, \"vfmadd213ps\" },\n\t{ X86_INS_VFMADD231PS, \"vfmadd231ps\" },\n\t{ X86_INS_VFMADDSD, \"vfmaddsd\" },\n\t{ X86_INS_VFMADD213SD, \"vfmadd213sd\" },\n\t{ X86_INS_VFMADD132SD, \"vfmadd132sd\" },\n\t{ X86_INS_VFMADD231SD, \"vfmadd231sd\" },\n\t{ X86_INS_VFMADDSS, \"vfmaddss\" },\n\t{ X86_INS_VFMADD213SS, \"vfmadd213ss\" },\n\t{ X86_INS_VFMADD132SS, \"vfmadd132ss\" },\n\t{ X86_INS_VFMADD231SS, \"vfmadd231ss\" },\n\t{ X86_INS_VFMADDSUB132PD, \"vfmaddsub132pd\" },\n\t{ X86_INS_VFMADDSUB132PS, \"vfmaddsub132ps\" },\n\t{ X86_INS_VFMADDSUBPD, \"vfmaddsubpd\" },\n\t{ X86_INS_VFMADDSUB213PD, \"vfmaddsub213pd\" },\n\t{ X86_INS_VFMADDSUB231PD, \"vfmaddsub231pd\" },\n\t{ X86_INS_VFMADDSUBPS, \"vfmaddsubps\" },\n\t{ X86_INS_VFMADDSUB213PS, \"vfmaddsub213ps\" },\n\t{ X86_INS_VFMADDSUB231PS, \"vfmaddsub231ps\" },\n\t{ X86_INS_VFMSUB132PD, \"vfmsub132pd\" },\n\t{ X86_INS_VFMSUB132PS, \"vfmsub132ps\" },\n\t{ X86_INS_VFMSUBADD132PD, \"vfmsubadd132pd\" },\n\t{ X86_INS_VFMSUBADD132PS, \"vfmsubadd132ps\" },\n\t{ X86_INS_VFMSUBADDPD, \"vfmsubaddpd\" },\n\t{ X86_INS_VFMSUBADD213PD, \"vfmsubadd213pd\" },\n\t{ X86_INS_VFMSUBADD231PD, \"vfmsubadd231pd\" },\n\t{ X86_INS_VFMSUBADDPS, \"vfmsubaddps\" },\n\t{ X86_INS_VFMSUBADD213PS, \"vfmsubadd213ps\" },\n\t{ X86_INS_VFMSUBADD231PS, \"vfmsubadd231ps\" },\n\t{ X86_INS_VFMSUBPD, \"vfmsubpd\" },\n\t{ X86_INS_VFMSUB213PD, \"vfmsub213pd\" },\n\t{ X86_INS_VFMSUB231PD, \"vfmsub231pd\" },\n\t{ X86_INS_VFMSUBPS, \"vfmsubps\" },\n\t{ X86_INS_VFMSUB213PS, \"vfmsub213ps\" },\n\t{ X86_INS_VFMSUB231PS, \"vfmsub231ps\" },\n\t{ X86_INS_VFMSUBSD, \"vfmsubsd\" },\n\t{ X86_INS_VFMSUB213SD, \"vfmsub213sd\" },\n\t{ X86_INS_VFMSUB132SD, \"vfmsub132sd\" },\n\t{ X86_INS_VFMSUB231SD, \"vfmsub231sd\" },\n\t{ X86_INS_VFMSUBSS, \"vfmsubss\" },\n\t{ X86_INS_VFMSUB213SS, \"vfmsub213ss\" },\n\t{ X86_INS_VFMSUB132SS, \"vfmsub132ss\" },\n\t{ X86_INS_VFMSUB231SS, \"vfmsub231ss\" },\n\t{ X86_INS_VFNMADD132PD, \"vfnmadd132pd\" },\n\t{ X86_INS_VFNMADD132PS, \"vfnmadd132ps\" },\n\t{ X86_INS_VFNMADDPD, \"vfnmaddpd\" },\n\t{ X86_INS_VFNMADD213PD, \"vfnmadd213pd\" },\n\t{ X86_INS_VFNMADD231PD, \"vfnmadd231pd\" },\n\t{ X86_INS_VFNMADDPS, \"vfnmaddps\" },\n\t{ X86_INS_VFNMADD213PS, \"vfnmadd213ps\" },\n\t{ X86_INS_VFNMADD231PS, \"vfnmadd231ps\" },\n\t{ X86_INS_VFNMADDSD, \"vfnmaddsd\" },\n\t{ X86_INS_VFNMADD213SD, \"vfnmadd213sd\" },\n\t{ X86_INS_VFNMADD132SD, \"vfnmadd132sd\" },\n\t{ X86_INS_VFNMADD231SD, \"vfnmadd231sd\" },\n\t{ X86_INS_VFNMADDSS, \"vfnmaddss\" },\n\t{ X86_INS_VFNMADD213SS, \"vfnmadd213ss\" },\n\t{ X86_INS_VFNMADD132SS, \"vfnmadd132ss\" },\n\t{ X86_INS_VFNMADD231SS, \"vfnmadd231ss\" },\n\t{ X86_INS_VFNMSUB132PD, \"vfnmsub132pd\" },\n\t{ X86_INS_VFNMSUB132PS, \"vfnmsub132ps\" },\n\t{ X86_INS_VFNMSUBPD, \"vfnmsubpd\" },\n\t{ X86_INS_VFNMSUB213PD, \"vfnmsub213pd\" },\n\t{ X86_INS_VFNMSUB231PD, \"vfnmsub231pd\" },\n\t{ X86_INS_VFNMSUBPS, \"vfnmsubps\" },\n\t{ X86_INS_VFNMSUB213PS, \"vfnmsub213ps\" },\n\t{ X86_INS_VFNMSUB231PS, \"vfnmsub231ps\" },\n\t{ X86_INS_VFNMSUBSD, \"vfnmsubsd\" },\n\t{ X86_INS_VFNMSUB213SD, \"vfnmsub213sd\" },\n\t{ X86_INS_VFNMSUB132SD, \"vfnmsub132sd\" },\n\t{ X86_INS_VFNMSUB231SD, \"vfnmsub231sd\" },\n\t{ X86_INS_VFNMSUBSS, \"vfnmsubss\" },\n\t{ X86_INS_VFNMSUB213SS, \"vfnmsub213ss\" },\n\t{ X86_INS_VFNMSUB132SS, \"vfnmsub132ss\" },\n\t{ X86_INS_VFNMSUB231SS, \"vfnmsub231ss\" },\n\t{ X86_INS_VFRCZPD, \"vfrczpd\" },\n\t{ X86_INS_VFRCZPS, \"vfrczps\" },\n\t{ X86_INS_VFRCZSD, \"vfrczsd\" },\n\t{ X86_INS_VFRCZSS, \"vfrczss\" },\n\t{ X86_INS_VORPD, \"vorpd\" },\n\t{ X86_INS_VORPS, \"vorps\" },\n\t{ X86_INS_VXORPD, \"vxorpd\" },\n\t{ X86_INS_VXORPS, \"vxorps\" },\n\t{ X86_INS_VGATHERDPD, \"vgatherdpd\" },\n\t{ X86_INS_VGATHERDPS, \"vgatherdps\" },\n\t{ X86_INS_VGATHERPF0DPD, \"vgatherpf0dpd\" },\n\t{ X86_INS_VGATHERPF0DPS, \"vgatherpf0dps\" },\n\t{ X86_INS_VGATHERPF0QPD, \"vgatherpf0qpd\" },\n\t{ X86_INS_VGATHERPF0QPS, \"vgatherpf0qps\" },\n\t{ X86_INS_VGATHERPF1DPD, \"vgatherpf1dpd\" },\n\t{ X86_INS_VGATHERPF1DPS, \"vgatherpf1dps\" },\n\t{ X86_INS_VGATHERPF1QPD, \"vgatherpf1qpd\" },\n\t{ X86_INS_VGATHERPF1QPS, \"vgatherpf1qps\" },\n\t{ X86_INS_VGATHERQPD, \"vgatherqpd\" },\n\t{ X86_INS_VGATHERQPS, \"vgatherqps\" },\n\t{ X86_INS_VHADDPD, \"vhaddpd\" },\n\t{ X86_INS_VHADDPS, \"vhaddps\" },\n\t{ X86_INS_VHSUBPD, \"vhsubpd\" },\n\t{ X86_INS_VHSUBPS, \"vhsubps\" },\n\t{ X86_INS_VINSERTF128, \"vinsertf128\" },\n\t{ X86_INS_VINSERTF32X4, \"vinsertf32x4\" },\n\t{ X86_INS_VINSERTF32X8, \"vinsertf32x8\" },\n\t{ X86_INS_VINSERTF64X2, \"vinsertf64x2\" },\n\t{ X86_INS_VINSERTF64X4, \"vinsertf64x4\" },\n\t{ X86_INS_VINSERTI128, \"vinserti128\" },\n\t{ X86_INS_VINSERTI32X4, \"vinserti32x4\" },\n\t{ X86_INS_VINSERTI32X8, \"vinserti32x8\" },\n\t{ X86_INS_VINSERTI64X2, \"vinserti64x2\" },\n\t{ X86_INS_VINSERTI64X4, \"vinserti64x4\" },\n\t{ X86_INS_VINSERTPS, \"vinsertps\" },\n\t{ X86_INS_VLDDQU, \"vlddqu\" },\n\t{ X86_INS_VLDMXCSR, \"vldmxcsr\" },\n\t{ X86_INS_VMASKMOVDQU, \"vmaskmovdqu\" },\n\t{ X86_INS_VMASKMOVPD, \"vmaskmovpd\" },\n\t{ X86_INS_VMASKMOVPS, \"vmaskmovps\" },\n\t{ X86_INS_VMAXPD, \"vmaxpd\" },\n\t{ X86_INS_VMAXPS, \"vmaxps\" },\n\t{ X86_INS_VMAXSD, \"vmaxsd\" },\n\t{ X86_INS_VMAXSS, \"vmaxss\" },\n\t{ X86_INS_VMCALL, \"vmcall\" },\n\t{ X86_INS_VMCLEAR, \"vmclear\" },\n\t{ X86_INS_VMFUNC, \"vmfunc\" },\n\t{ X86_INS_VMINPD, \"vminpd\" },\n\t{ X86_INS_VMINPS, \"vminps\" },\n\t{ X86_INS_VMINSD, \"vminsd\" },\n\t{ X86_INS_VMINSS, \"vminss\" },\n\t{ X86_INS_VMLAUNCH, \"vmlaunch\" },\n\t{ X86_INS_VMLOAD, \"vmload\" },\n\t{ X86_INS_VMMCALL, \"vmmcall\" },\n\t{ X86_INS_VMOVQ, \"vmovq\" },\n\t{ X86_INS_VMOVDDUP, \"vmovddup\" },\n\t{ X86_INS_VMOVD, \"vmovd\" },\n\t{ X86_INS_VMOVDQA32, \"vmovdqa32\" },\n\t{ X86_INS_VMOVDQA64, \"vmovdqa64\" },\n\t{ X86_INS_VMOVDQA, \"vmovdqa\" },\n\t{ X86_INS_VMOVDQU16, \"vmovdqu16\" },\n\t{ X86_INS_VMOVDQU32, \"vmovdqu32\" },\n\t{ X86_INS_VMOVDQU64, \"vmovdqu64\" },\n\t{ X86_INS_VMOVDQU8, \"vmovdqu8\" },\n\t{ X86_INS_VMOVDQU, \"vmovdqu\" },\n\t{ X86_INS_VMOVHLPS, \"vmovhlps\" },\n\t{ X86_INS_VMOVHPD, \"vmovhpd\" },\n\t{ X86_INS_VMOVHPS, \"vmovhps\" },\n\t{ X86_INS_VMOVLHPS, \"vmovlhps\" },\n\t{ X86_INS_VMOVLPD, \"vmovlpd\" },\n\t{ X86_INS_VMOVLPS, \"vmovlps\" },\n\t{ X86_INS_VMOVMSKPD, \"vmovmskpd\" },\n\t{ X86_INS_VMOVMSKPS, \"vmovmskps\" },\n\t{ X86_INS_VMOVNTDQA, \"vmovntdqa\" },\n\t{ X86_INS_VMOVNTDQ, \"vmovntdq\" },\n\t{ X86_INS_VMOVNTPD, \"vmovntpd\" },\n\t{ X86_INS_VMOVNTPS, \"vmovntps\" },\n\t{ X86_INS_VMOVSD, \"vmovsd\" },\n\t{ X86_INS_VMOVSHDUP, \"vmovshdup\" },\n\t{ X86_INS_VMOVSLDUP, \"vmovsldup\" },\n\t{ X86_INS_VMOVSS, \"vmovss\" },\n\t{ X86_INS_VMOVUPD, \"vmovupd\" },\n\t{ X86_INS_VMOVUPS, \"vmovups\" },\n\t{ X86_INS_VMPSADBW, \"vmpsadbw\" },\n\t{ X86_INS_VMPTRLD, \"vmptrld\" },\n\t{ X86_INS_VMPTRST, \"vmptrst\" },\n\t{ X86_INS_VMREAD, \"vmread\" },\n\t{ X86_INS_VMRESUME, \"vmresume\" },\n\t{ X86_INS_VMRUN, \"vmrun\" },\n\t{ X86_INS_VMSAVE, \"vmsave\" },\n\t{ X86_INS_VMULPD, \"vmulpd\" },\n\t{ X86_INS_VMULPS, \"vmulps\" },\n\t{ X86_INS_VMULSD, \"vmulsd\" },\n\t{ X86_INS_VMULSS, \"vmulss\" },\n\t{ X86_INS_VMWRITE, \"vmwrite\" },\n\t{ X86_INS_VMXOFF, \"vmxoff\" },\n\t{ X86_INS_VMXON, \"vmxon\" },\n\t{ X86_INS_VPABSB, \"vpabsb\" },\n\t{ X86_INS_VPABSD, \"vpabsd\" },\n\t{ X86_INS_VPABSQ, \"vpabsq\" },\n\t{ X86_INS_VPABSW, \"vpabsw\" },\n\t{ X86_INS_VPACKSSDW, \"vpackssdw\" },\n\t{ X86_INS_VPACKSSWB, \"vpacksswb\" },\n\t{ X86_INS_VPACKUSDW, \"vpackusdw\" },\n\t{ X86_INS_VPACKUSWB, \"vpackuswb\" },\n\t{ X86_INS_VPADDB, \"vpaddb\" },\n\t{ X86_INS_VPADDD, \"vpaddd\" },\n\t{ X86_INS_VPADDQ, \"vpaddq\" },\n\t{ X86_INS_VPADDSB, \"vpaddsb\" },\n\t{ X86_INS_VPADDSW, \"vpaddsw\" },\n\t{ X86_INS_VPADDUSB, \"vpaddusb\" },\n\t{ X86_INS_VPADDUSW, \"vpaddusw\" },\n\t{ X86_INS_VPADDW, \"vpaddw\" },\n\t{ X86_INS_VPALIGNR, \"vpalignr\" },\n\t{ X86_INS_VPANDD, \"vpandd\" },\n\t{ X86_INS_VPANDND, \"vpandnd\" },\n\t{ X86_INS_VPANDNQ, \"vpandnq\" },\n\t{ X86_INS_VPANDN, \"vpandn\" },\n\t{ X86_INS_VPANDQ, \"vpandq\" },\n\t{ X86_INS_VPAND, \"vpand\" },\n\t{ X86_INS_VPAVGB, \"vpavgb\" },\n\t{ X86_INS_VPAVGW, \"vpavgw\" },\n\t{ X86_INS_VPBLENDD, \"vpblendd\" },\n\t{ X86_INS_VPBLENDMB, \"vpblendmb\" },\n\t{ X86_INS_VPBLENDMD, \"vpblendmd\" },\n\t{ X86_INS_VPBLENDMQ, \"vpblendmq\" },\n\t{ X86_INS_VPBLENDMW, \"vpblendmw\" },\n\t{ X86_INS_VPBLENDVB, \"vpblendvb\" },\n\t{ X86_INS_VPBLENDW, \"vpblendw\" },\n\t{ X86_INS_VPBROADCASTB, \"vpbroadcastb\" },\n\t{ X86_INS_VPBROADCASTD, \"vpbroadcastd\" },\n\t{ X86_INS_VPBROADCASTMB2Q, \"vpbroadcastmb2q\" },\n\t{ X86_INS_VPBROADCASTMW2D, \"vpbroadcastmw2d\" },\n\t{ X86_INS_VPBROADCASTQ, \"vpbroadcastq\" },\n\t{ X86_INS_VPBROADCASTW, \"vpbroadcastw\" },\n\t{ X86_INS_VPCLMULQDQ, \"vpclmulqdq\" },\n\t{ X86_INS_VPCMOV, \"vpcmov\" },\n\t{ X86_INS_VPCMPB, \"vpcmpb\" },\n\t{ X86_INS_VPCMPD, \"vpcmpd\" },\n\t{ X86_INS_VPCMPEQB, \"vpcmpeqb\" },\n\t{ X86_INS_VPCMPEQD, \"vpcmpeqd\" },\n\t{ X86_INS_VPCMPEQQ, \"vpcmpeqq\" },\n\t{ X86_INS_VPCMPEQW, \"vpcmpeqw\" },\n\t{ X86_INS_VPCMPESTRI, \"vpcmpestri\" },\n\t{ X86_INS_VPCMPESTRM, \"vpcmpestrm\" },\n\t{ X86_INS_VPCMPGTB, \"vpcmpgtb\" },\n\t{ X86_INS_VPCMPGTD, \"vpcmpgtd\" },\n\t{ X86_INS_VPCMPGTQ, \"vpcmpgtq\" },\n\t{ X86_INS_VPCMPGTW, \"vpcmpgtw\" },\n\t{ X86_INS_VPCMPISTRI, \"vpcmpistri\" },\n\t{ X86_INS_VPCMPISTRM, \"vpcmpistrm\" },\n\t{ X86_INS_VPCMPQ, \"vpcmpq\" },\n\t{ X86_INS_VPCMPUB, \"vpcmpub\" },\n\t{ X86_INS_VPCMPUD, \"vpcmpud\" },\n\t{ X86_INS_VPCMPUQ, \"vpcmpuq\" },\n\t{ X86_INS_VPCMPUW, \"vpcmpuw\" },\n\t{ X86_INS_VPCMPW, \"vpcmpw\" },\n\t{ X86_INS_VPCOMB, \"vpcomb\" },\n\t{ X86_INS_VPCOMD, \"vpcomd\" },\n\t{ X86_INS_VPCOMPRESSD, \"vpcompressd\" },\n\t{ X86_INS_VPCOMPRESSQ, \"vpcompressq\" },\n\t{ X86_INS_VPCOMQ, \"vpcomq\" },\n\t{ X86_INS_VPCOMUB, \"vpcomub\" },\n\t{ X86_INS_VPCOMUD, \"vpcomud\" },\n\t{ X86_INS_VPCOMUQ, \"vpcomuq\" },\n\t{ X86_INS_VPCOMUW, \"vpcomuw\" },\n\t{ X86_INS_VPCOMW, \"vpcomw\" },\n\t{ X86_INS_VPCONFLICTD, \"vpconflictd\" },\n\t{ X86_INS_VPCONFLICTQ, \"vpconflictq\" },\n\t{ X86_INS_VPERM2F128, \"vperm2f128\" },\n\t{ X86_INS_VPERM2I128, \"vperm2i128\" },\n\t{ X86_INS_VPERMD, \"vpermd\" },\n\t{ X86_INS_VPERMI2D, \"vpermi2d\" },\n\t{ X86_INS_VPERMI2PD, \"vpermi2pd\" },\n\t{ X86_INS_VPERMI2PS, \"vpermi2ps\" },\n\t{ X86_INS_VPERMI2Q, \"vpermi2q\" },\n\t{ X86_INS_VPERMIL2PD, \"vpermil2pd\" },\n\t{ X86_INS_VPERMIL2PS, \"vpermil2ps\" },\n\t{ X86_INS_VPERMILPD, \"vpermilpd\" },\n\t{ X86_INS_VPERMILPS, \"vpermilps\" },\n\t{ X86_INS_VPERMPD, \"vpermpd\" },\n\t{ X86_INS_VPERMPS, \"vpermps\" },\n\t{ X86_INS_VPERMQ, \"vpermq\" },\n\t{ X86_INS_VPERMT2D, \"vpermt2d\" },\n\t{ X86_INS_VPERMT2PD, \"vpermt2pd\" },\n\t{ X86_INS_VPERMT2PS, \"vpermt2ps\" },\n\t{ X86_INS_VPERMT2Q, \"vpermt2q\" },\n\t{ X86_INS_VPEXPANDD, \"vpexpandd\" },\n\t{ X86_INS_VPEXPANDQ, \"vpexpandq\" },\n\t{ X86_INS_VPEXTRB, \"vpextrb\" },\n\t{ X86_INS_VPEXTRD, \"vpextrd\" },\n\t{ X86_INS_VPEXTRQ, \"vpextrq\" },\n\t{ X86_INS_VPEXTRW, \"vpextrw\" },\n\t{ X86_INS_VPGATHERDD, \"vpgatherdd\" },\n\t{ X86_INS_VPGATHERDQ, \"vpgatherdq\" },\n\t{ X86_INS_VPGATHERQD, \"vpgatherqd\" },\n\t{ X86_INS_VPGATHERQQ, \"vpgatherqq\" },\n\t{ X86_INS_VPHADDBD, \"vphaddbd\" },\n\t{ X86_INS_VPHADDBQ, \"vphaddbq\" },\n\t{ X86_INS_VPHADDBW, \"vphaddbw\" },\n\t{ X86_INS_VPHADDDQ, \"vphadddq\" },\n\t{ X86_INS_VPHADDD, \"vphaddd\" },\n\t{ X86_INS_VPHADDSW, \"vphaddsw\" },\n\t{ X86_INS_VPHADDUBD, \"vphaddubd\" },\n\t{ X86_INS_VPHADDUBQ, \"vphaddubq\" },\n\t{ X86_INS_VPHADDUBW, \"vphaddubw\" },\n\t{ X86_INS_VPHADDUDQ, \"vphaddudq\" },\n\t{ X86_INS_VPHADDUWD, \"vphadduwd\" },\n\t{ X86_INS_VPHADDUWQ, \"vphadduwq\" },\n\t{ X86_INS_VPHADDWD, \"vphaddwd\" },\n\t{ X86_INS_VPHADDWQ, \"vphaddwq\" },\n\t{ X86_INS_VPHADDW, \"vphaddw\" },\n\t{ X86_INS_VPHMINPOSUW, \"vphminposuw\" },\n\t{ X86_INS_VPHSUBBW, \"vphsubbw\" },\n\t{ X86_INS_VPHSUBDQ, \"vphsubdq\" },\n\t{ X86_INS_VPHSUBD, \"vphsubd\" },\n\t{ X86_INS_VPHSUBSW, \"vphsubsw\" },\n\t{ X86_INS_VPHSUBWD, \"vphsubwd\" },\n\t{ X86_INS_VPHSUBW, \"vphsubw\" },\n\t{ X86_INS_VPINSRB, \"vpinsrb\" },\n\t{ X86_INS_VPINSRD, \"vpinsrd\" },\n\t{ X86_INS_VPINSRQ, \"vpinsrq\" },\n\t{ X86_INS_VPINSRW, \"vpinsrw\" },\n\t{ X86_INS_VPLZCNTD, \"vplzcntd\" },\n\t{ X86_INS_VPLZCNTQ, \"vplzcntq\" },\n\t{ X86_INS_VPMACSDD, \"vpmacsdd\" },\n\t{ X86_INS_VPMACSDQH, \"vpmacsdqh\" },\n\t{ X86_INS_VPMACSDQL, \"vpmacsdql\" },\n\t{ X86_INS_VPMACSSDD, \"vpmacssdd\" },\n\t{ X86_INS_VPMACSSDQH, \"vpmacssdqh\" },\n\t{ X86_INS_VPMACSSDQL, \"vpmacssdql\" },\n\t{ X86_INS_VPMACSSWD, \"vpmacsswd\" },\n\t{ X86_INS_VPMACSSWW, \"vpmacssww\" },\n\t{ X86_INS_VPMACSWD, \"vpmacswd\" },\n\t{ X86_INS_VPMACSWW, \"vpmacsww\" },\n\t{ X86_INS_VPMADCSSWD, \"vpmadcsswd\" },\n\t{ X86_INS_VPMADCSWD, \"vpmadcswd\" },\n\t{ X86_INS_VPMADDUBSW, \"vpmaddubsw\" },\n\t{ X86_INS_VPMADDWD, \"vpmaddwd\" },\n\t{ X86_INS_VPMASKMOVD, \"vpmaskmovd\" },\n\t{ X86_INS_VPMASKMOVQ, \"vpmaskmovq\" },\n\t{ X86_INS_VPMAXSB, \"vpmaxsb\" },\n\t{ X86_INS_VPMAXSD, \"vpmaxsd\" },\n\t{ X86_INS_VPMAXSQ, \"vpmaxsq\" },\n\t{ X86_INS_VPMAXSW, \"vpmaxsw\" },\n\t{ X86_INS_VPMAXUB, \"vpmaxub\" },\n\t{ X86_INS_VPMAXUD, \"vpmaxud\" },\n\t{ X86_INS_VPMAXUQ, \"vpmaxuq\" },\n\t{ X86_INS_VPMAXUW, \"vpmaxuw\" },\n\t{ X86_INS_VPMINSB, \"vpminsb\" },\n\t{ X86_INS_VPMINSD, \"vpminsd\" },\n\t{ X86_INS_VPMINSQ, \"vpminsq\" },\n\t{ X86_INS_VPMINSW, \"vpminsw\" },\n\t{ X86_INS_VPMINUB, \"vpminub\" },\n\t{ X86_INS_VPMINUD, \"vpminud\" },\n\t{ X86_INS_VPMINUQ, \"vpminuq\" },\n\t{ X86_INS_VPMINUW, \"vpminuw\" },\n\t{ X86_INS_VPMOVDB, \"vpmovdb\" },\n\t{ X86_INS_VPMOVDW, \"vpmovdw\" },\n\t{ X86_INS_VPMOVM2B, \"vpmovm2b\" },\n\t{ X86_INS_VPMOVM2D, \"vpmovm2d\" },\n\t{ X86_INS_VPMOVM2Q, \"vpmovm2q\" },\n\t{ X86_INS_VPMOVM2W, \"vpmovm2w\" },\n\t{ X86_INS_VPMOVMSKB, \"vpmovmskb\" },\n\t{ X86_INS_VPMOVQB, \"vpmovqb\" },\n\t{ X86_INS_VPMOVQD, \"vpmovqd\" },\n\t{ X86_INS_VPMOVQW, \"vpmovqw\" },\n\t{ X86_INS_VPMOVSDB, \"vpmovsdb\" },\n\t{ X86_INS_VPMOVSDW, \"vpmovsdw\" },\n\t{ X86_INS_VPMOVSQB, \"vpmovsqb\" },\n\t{ X86_INS_VPMOVSQD, \"vpmovsqd\" },\n\t{ X86_INS_VPMOVSQW, \"vpmovsqw\" },\n\t{ X86_INS_VPMOVSXBD, \"vpmovsxbd\" },\n\t{ X86_INS_VPMOVSXBQ, \"vpmovsxbq\" },\n\t{ X86_INS_VPMOVSXBW, \"vpmovsxbw\" },\n\t{ X86_INS_VPMOVSXDQ, \"vpmovsxdq\" },\n\t{ X86_INS_VPMOVSXWD, \"vpmovsxwd\" },\n\t{ X86_INS_VPMOVSXWQ, \"vpmovsxwq\" },\n\t{ X86_INS_VPMOVUSDB, \"vpmovusdb\" },\n\t{ X86_INS_VPMOVUSDW, \"vpmovusdw\" },\n\t{ X86_INS_VPMOVUSQB, \"vpmovusqb\" },\n\t{ X86_INS_VPMOVUSQD, \"vpmovusqd\" },\n\t{ X86_INS_VPMOVUSQW, \"vpmovusqw\" },\n\t{ X86_INS_VPMOVZXBD, \"vpmovzxbd\" },\n\t{ X86_INS_VPMOVZXBQ, \"vpmovzxbq\" },\n\t{ X86_INS_VPMOVZXBW, \"vpmovzxbw\" },\n\t{ X86_INS_VPMOVZXDQ, \"vpmovzxdq\" },\n\t{ X86_INS_VPMOVZXWD, \"vpmovzxwd\" },\n\t{ X86_INS_VPMOVZXWQ, \"vpmovzxwq\" },\n\t{ X86_INS_VPMULDQ, \"vpmuldq\" },\n\t{ X86_INS_VPMULHRSW, \"vpmulhrsw\" },\n\t{ X86_INS_VPMULHUW, \"vpmulhuw\" },\n\t{ X86_INS_VPMULHW, \"vpmulhw\" },\n\t{ X86_INS_VPMULLD, \"vpmulld\" },\n\t{ X86_INS_VPMULLQ, \"vpmullq\" },\n\t{ X86_INS_VPMULLW, \"vpmullw\" },\n\t{ X86_INS_VPMULUDQ, \"vpmuludq\" },\n\t{ X86_INS_VPORD, \"vpord\" },\n\t{ X86_INS_VPORQ, \"vporq\" },\n\t{ X86_INS_VPOR, \"vpor\" },\n\t{ X86_INS_VPPERM, \"vpperm\" },\n\t{ X86_INS_VPROTB, \"vprotb\" },\n\t{ X86_INS_VPROTD, \"vprotd\" },\n\t{ X86_INS_VPROTQ, \"vprotq\" },\n\t{ X86_INS_VPROTW, \"vprotw\" },\n\t{ X86_INS_VPSADBW, \"vpsadbw\" },\n\t{ X86_INS_VPSCATTERDD, \"vpscatterdd\" },\n\t{ X86_INS_VPSCATTERDQ, \"vpscatterdq\" },\n\t{ X86_INS_VPSCATTERQD, \"vpscatterqd\" },\n\t{ X86_INS_VPSCATTERQQ, \"vpscatterqq\" },\n\t{ X86_INS_VPSHAB, \"vpshab\" },\n\t{ X86_INS_VPSHAD, \"vpshad\" },\n\t{ X86_INS_VPSHAQ, \"vpshaq\" },\n\t{ X86_INS_VPSHAW, \"vpshaw\" },\n\t{ X86_INS_VPSHLB, \"vpshlb\" },\n\t{ X86_INS_VPSHLD, \"vpshld\" },\n\t{ X86_INS_VPSHLQ, \"vpshlq\" },\n\t{ X86_INS_VPSHLW, \"vpshlw\" },\n\t{ X86_INS_VPSHUFB, \"vpshufb\" },\n\t{ X86_INS_VPSHUFD, \"vpshufd\" },\n\t{ X86_INS_VPSHUFHW, \"vpshufhw\" },\n\t{ X86_INS_VPSHUFLW, \"vpshuflw\" },\n\t{ X86_INS_VPSIGNB, \"vpsignb\" },\n\t{ X86_INS_VPSIGND, \"vpsignd\" },\n\t{ X86_INS_VPSIGNW, \"vpsignw\" },\n\t{ X86_INS_VPSLLDQ, \"vpslldq\" },\n\t{ X86_INS_VPSLLD, \"vpslld\" },\n\t{ X86_INS_VPSLLQ, \"vpsllq\" },\n\t{ X86_INS_VPSLLVD, \"vpsllvd\" },\n\t{ X86_INS_VPSLLVQ, \"vpsllvq\" },\n\t{ X86_INS_VPSLLW, \"vpsllw\" },\n\t{ X86_INS_VPSRAD, \"vpsrad\" },\n\t{ X86_INS_VPSRAQ, \"vpsraq\" },\n\t{ X86_INS_VPSRAVD, \"vpsravd\" },\n\t{ X86_INS_VPSRAVQ, \"vpsravq\" },\n\t{ X86_INS_VPSRAW, \"vpsraw\" },\n\t{ X86_INS_VPSRLDQ, \"vpsrldq\" },\n\t{ X86_INS_VPSRLD, \"vpsrld\" },\n\t{ X86_INS_VPSRLQ, \"vpsrlq\" },\n\t{ X86_INS_VPSRLVD, \"vpsrlvd\" },\n\t{ X86_INS_VPSRLVQ, \"vpsrlvq\" },\n\t{ X86_INS_VPSRLW, \"vpsrlw\" },\n\t{ X86_INS_VPSUBB, \"vpsubb\" },\n\t{ X86_INS_VPSUBD, \"vpsubd\" },\n\t{ X86_INS_VPSUBQ, \"vpsubq\" },\n\t{ X86_INS_VPSUBSB, \"vpsubsb\" },\n\t{ X86_INS_VPSUBSW, \"vpsubsw\" },\n\t{ X86_INS_VPSUBUSB, \"vpsubusb\" },\n\t{ X86_INS_VPSUBUSW, \"vpsubusw\" },\n\t{ X86_INS_VPSUBW, \"vpsubw\" },\n\t{ X86_INS_VPTESTMD, \"vptestmd\" },\n\t{ X86_INS_VPTESTMQ, \"vptestmq\" },\n\t{ X86_INS_VPTESTNMD, \"vptestnmd\" },\n\t{ X86_INS_VPTESTNMQ, \"vptestnmq\" },\n\t{ X86_INS_VPTEST, \"vptest\" },\n\t{ X86_INS_VPUNPCKHBW, \"vpunpckhbw\" },\n\t{ X86_INS_VPUNPCKHDQ, \"vpunpckhdq\" },\n\t{ X86_INS_VPUNPCKHQDQ, \"vpunpckhqdq\" },\n\t{ X86_INS_VPUNPCKHWD, \"vpunpckhwd\" },\n\t{ X86_INS_VPUNPCKLBW, \"vpunpcklbw\" },\n\t{ X86_INS_VPUNPCKLDQ, \"vpunpckldq\" },\n\t{ X86_INS_VPUNPCKLQDQ, \"vpunpcklqdq\" },\n\t{ X86_INS_VPUNPCKLWD, \"vpunpcklwd\" },\n\t{ X86_INS_VPXORD, \"vpxord\" },\n\t{ X86_INS_VPXORQ, \"vpxorq\" },\n\t{ X86_INS_VPXOR, \"vpxor\" },\n\t{ X86_INS_VRCP14PD, \"vrcp14pd\" },\n\t{ X86_INS_VRCP14PS, \"vrcp14ps\" },\n\t{ X86_INS_VRCP14SD, \"vrcp14sd\" },\n\t{ X86_INS_VRCP14SS, \"vrcp14ss\" },\n\t{ X86_INS_VRCP28PD, \"vrcp28pd\" },\n\t{ X86_INS_VRCP28PS, \"vrcp28ps\" },\n\t{ X86_INS_VRCP28SD, \"vrcp28sd\" },\n\t{ X86_INS_VRCP28SS, \"vrcp28ss\" },\n\t{ X86_INS_VRCPPS, \"vrcpps\" },\n\t{ X86_INS_VRCPSS, \"vrcpss\" },\n\t{ X86_INS_VRNDSCALEPD, \"vrndscalepd\" },\n\t{ X86_INS_VRNDSCALEPS, \"vrndscaleps\" },\n\t{ X86_INS_VRNDSCALESD, \"vrndscalesd\" },\n\t{ X86_INS_VRNDSCALESS, \"vrndscaless\" },\n\t{ X86_INS_VROUNDPD, \"vroundpd\" },\n\t{ X86_INS_VROUNDPS, \"vroundps\" },\n\t{ X86_INS_VROUNDSD, \"vroundsd\" },\n\t{ X86_INS_VROUNDSS, \"vroundss\" },\n\t{ X86_INS_VRSQRT14PD, \"vrsqrt14pd\" },\n\t{ X86_INS_VRSQRT14PS, \"vrsqrt14ps\" },\n\t{ X86_INS_VRSQRT14SD, \"vrsqrt14sd\" },\n\t{ X86_INS_VRSQRT14SS, \"vrsqrt14ss\" },\n\t{ X86_INS_VRSQRT28PD, \"vrsqrt28pd\" },\n\t{ X86_INS_VRSQRT28PS, \"vrsqrt28ps\" },\n\t{ X86_INS_VRSQRT28SD, \"vrsqrt28sd\" },\n\t{ X86_INS_VRSQRT28SS, \"vrsqrt28ss\" },\n\t{ X86_INS_VRSQRTPS, \"vrsqrtps\" },\n\t{ X86_INS_VRSQRTSS, \"vrsqrtss\" },\n\t{ X86_INS_VSCATTERDPD, \"vscatterdpd\" },\n\t{ X86_INS_VSCATTERDPS, \"vscatterdps\" },\n\t{ X86_INS_VSCATTERPF0DPD, \"vscatterpf0dpd\" },\n\t{ X86_INS_VSCATTERPF0DPS, \"vscatterpf0dps\" },\n\t{ X86_INS_VSCATTERPF0QPD, \"vscatterpf0qpd\" },\n\t{ X86_INS_VSCATTERPF0QPS, \"vscatterpf0qps\" },\n\t{ X86_INS_VSCATTERPF1DPD, \"vscatterpf1dpd\" },\n\t{ X86_INS_VSCATTERPF1DPS, \"vscatterpf1dps\" },\n\t{ X86_INS_VSCATTERPF1QPD, \"vscatterpf1qpd\" },\n\t{ X86_INS_VSCATTERPF1QPS, \"vscatterpf1qps\" },\n\t{ X86_INS_VSCATTERQPD, \"vscatterqpd\" },\n\t{ X86_INS_VSCATTERQPS, \"vscatterqps\" },\n\t{ X86_INS_VSHUFPD, \"vshufpd\" },\n\t{ X86_INS_VSHUFPS, \"vshufps\" },\n\t{ X86_INS_VSQRTPD, \"vsqrtpd\" },\n\t{ X86_INS_VSQRTPS, \"vsqrtps\" },\n\t{ X86_INS_VSQRTSD, \"vsqrtsd\" },\n\t{ X86_INS_VSQRTSS, \"vsqrtss\" },\n\t{ X86_INS_VSTMXCSR, \"vstmxcsr\" },\n\t{ X86_INS_VSUBPD, \"vsubpd\" },\n\t{ X86_INS_VSUBPS, \"vsubps\" },\n\t{ X86_INS_VSUBSD, \"vsubsd\" },\n\t{ X86_INS_VSUBSS, \"vsubss\" },\n\t{ X86_INS_VTESTPD, \"vtestpd\" },\n\t{ X86_INS_VTESTPS, \"vtestps\" },\n\t{ X86_INS_VUNPCKHPD, \"vunpckhpd\" },\n\t{ X86_INS_VUNPCKHPS, \"vunpckhps\" },\n\t{ X86_INS_VUNPCKLPD, \"vunpcklpd\" },\n\t{ X86_INS_VUNPCKLPS, \"vunpcklps\" },\n\t{ X86_INS_VZEROALL, \"vzeroall\" },\n\t{ X86_INS_VZEROUPPER, \"vzeroupper\" },\n\t{ X86_INS_WAIT, \"wait\" },\n\t{ X86_INS_WBINVD, \"wbinvd\" },\n\t{ X86_INS_WRFSBASE, \"wrfsbase\" },\n\t{ X86_INS_WRGSBASE, \"wrgsbase\" },\n\t{ X86_INS_WRMSR, \"wrmsr\" },\n\t{ X86_INS_XABORT, \"xabort\" },\n\t{ X86_INS_XACQUIRE, \"xacquire\" },\n\t{ X86_INS_XBEGIN, \"xbegin\" },\n\t{ X86_INS_XCHG, \"xchg\" },\n\t{ X86_INS_XCRYPTCBC, \"xcryptcbc\" },\n\t{ X86_INS_XCRYPTCFB, \"xcryptcfb\" },\n\t{ X86_INS_XCRYPTCTR, \"xcryptctr\" },\n\t{ X86_INS_XCRYPTECB, \"xcryptecb\" },\n\t{ X86_INS_XCRYPTOFB, \"xcryptofb\" },\n\t{ X86_INS_XEND, \"xend\" },\n\t{ X86_INS_XGETBV, \"xgetbv\" },\n\t{ X86_INS_XLATB, \"xlatb\" },\n\t{ X86_INS_XRELEASE, \"xrelease\" },\n\t{ X86_INS_XRSTOR, \"xrstor\" },\n\t{ X86_INS_XRSTOR64, \"xrstor64\" },\n\t{ X86_INS_XRSTORS, \"xrstors\" },\n\t{ X86_INS_XRSTORS64, \"xrstors64\" },\n\t{ X86_INS_XSAVE, \"xsave\" },\n\t{ X86_INS_XSAVE64, \"xsave64\" },\n\t{ X86_INS_XSAVEC, \"xsavec\" },\n\t{ X86_INS_XSAVEC64, \"xsavec64\" },\n\t{ X86_INS_XSAVEOPT, \"xsaveopt\" },\n\t{ X86_INS_XSAVEOPT64, \"xsaveopt64\" },\n\t{ X86_INS_XSAVES, \"xsaves\" },\n\t{ X86_INS_XSAVES64, \"xsaves64\" },\n\t{ X86_INS_XSETBV, \"xsetbv\" },\n\t{ X86_INS_XSHA1, \"xsha1\" },\n\t{ X86_INS_XSHA256, \"xsha256\" },\n\t{ X86_INS_XSTORE, \"xstore\" },\n\t{ X86_INS_XTEST, \"xtest\" },\n\t{ X86_INS_FDISI8087_NOP, \"fdisi8087_nop\" },\n\t{ X86_INS_FENI8087_NOP, \"feni8087_nop\" },\n\n\t// pseudo instructions\n\t{ X86_INS_CMPSS, \"cmpss\" },\n\t{ X86_INS_CMPEQSS, \"cmpeqss\" },\n\t{ X86_INS_CMPLTSS, \"cmpltss\" },\n\t{ X86_INS_CMPLESS, \"cmpless\" },\n\t{ X86_INS_CMPUNORDSS, \"cmpunordss\" },\n\t{ X86_INS_CMPNEQSS, \"cmpneqss\" },\n\t{ X86_INS_CMPNLTSS, \"cmpnltss\" },\n\t{ X86_INS_CMPNLESS, \"cmpnless\" },\n\t{ X86_INS_CMPORDSS, \"cmpordss\" },\n\n\t{ X86_INS_CMPSD, \"cmpsd\" },\n\t{ X86_INS_CMPEQSD, \"cmpeqsd\" },\n\t{ X86_INS_CMPLTSD, \"cmpltsd\" },\n\t{ X86_INS_CMPLESD, \"cmplesd\" },\n\t{ X86_INS_CMPUNORDSD, \"cmpunordsd\" },\n\t{ X86_INS_CMPNEQSD, \"cmpneqsd\" },\n\t{ X86_INS_CMPNLTSD, \"cmpnltsd\" },\n\t{ X86_INS_CMPNLESD, \"cmpnlesd\" },\n\t{ X86_INS_CMPORDSD, \"cmpordsd\" },\n\n\t{ X86_INS_CMPPS, \"cmpps\" },\n\t{ X86_INS_CMPEQPS, \"cmpeqps\" },\n\t{ X86_INS_CMPLTPS, \"cmpltps\" },\n\t{ X86_INS_CMPLEPS, \"cmpleps\" },\n\t{ X86_INS_CMPUNORDPS, \"cmpunordps\" },\n\t{ X86_INS_CMPNEQPS, \"cmpneqps\" },\n\t{ X86_INS_CMPNLTPS, \"cmpnltps\" },\n\t{ X86_INS_CMPNLEPS, \"cmpnleps\" },\n\t{ X86_INS_CMPORDPS, \"cmpordps\" },\n\n\t{ X86_INS_CMPPD, \"cmppd\" },\n\t{ X86_INS_CMPEQPD, \"cmpeqpd\" },\n\t{ X86_INS_CMPLTPD, \"cmpltpd\" },\n\t{ X86_INS_CMPLEPD, \"cmplepd\" },\n\t{ X86_INS_CMPUNORDPD, \"cmpunordpd\" },\n\t{ X86_INS_CMPNEQPD, \"cmpneqpd\" },\n\t{ X86_INS_CMPNLTPD, \"cmpnltpd\" },\n\t{ X86_INS_CMPNLEPD, \"cmpnlepd\" },\n\t{ X86_INS_CMPORDPD, \"cmpordpd\" },\n\n\t{ X86_INS_VCMPSS, \"vcmpss\" },\n\t{ X86_INS_VCMPEQSS, \"vcmpeqss\" },\n\t{ X86_INS_VCMPLTSS, \"vcmpltss\" },\n\t{ X86_INS_VCMPLESS, \"vcmpless\" },\n\t{ X86_INS_VCMPUNORDSS, \"vcmpunordss\" },\n\t{ X86_INS_VCMPNEQSS, \"vcmpneqss\" },\n\t{ X86_INS_VCMPNLTSS, \"vcmpnltss\" },\n\t{ X86_INS_VCMPNLESS, \"vcmpnless\" },\n\t{ X86_INS_VCMPORDSS, \"vcmpordss\" },\n\t{ X86_INS_VCMPEQ_UQSS, \"vcmpeq_uqss\" },\n\t{ X86_INS_VCMPNGESS, \"vcmpngess\" },\n\t{ X86_INS_VCMPNGTSS, \"vcmpngtss\" },\n\t{ X86_INS_VCMPFALSESS, \"vcmpfalsess\" },\n\t{ X86_INS_VCMPNEQ_OQSS, \"vcmpneq_oqss\" },\n\t{ X86_INS_VCMPGESS, \"vcmpgess\" },\n\t{ X86_INS_VCMPGTSS, \"vcmpgtss\" },\n\t{ X86_INS_VCMPTRUESS, \"vcmptruess\" },\n\t{ X86_INS_VCMPEQ_OSSS, \"vcmpeq_osss\" },\n\t{ X86_INS_VCMPLT_OQSS, \"vcmplt_oqss\" },\n\t{ X86_INS_VCMPLE_OQSS, \"vcmple_oqss\" },\n\t{ X86_INS_VCMPUNORD_SSS, \"vcmpunord_sss\" },\n\t{ X86_INS_VCMPNEQ_USSS, \"vcmpneq_usss\" },\n\t{ X86_INS_VCMPNLT_UQSS, \"vcmpnlt_uqss\" },\n\t{ X86_INS_VCMPNLE_UQSS, \"vcmpnle_uqss\" },\n\t{ X86_INS_VCMPORD_SSS, \"vcmpord_sss\" },\n\t{ X86_INS_VCMPEQ_USSS, \"vcmpeq_usss\" },\n\t{ X86_INS_VCMPNGE_UQSS, \"vcmpnge_uqss\" },\n\t{ X86_INS_VCMPNGT_UQSS, \"vcmpngt_uqss\" },\n\t{ X86_INS_VCMPFALSE_OSSS, \"vcmpfalse_osss\" },\n\t{ X86_INS_VCMPNEQ_OSSS, \"vcmpneq_osss\" },\n\t{ X86_INS_VCMPGE_OQSS, \"vcmpge_oqss\" },\n\t{ X86_INS_VCMPGT_OQSS, \"vcmpgt_oqss\" },\n\t{ X86_INS_VCMPTRUE_USSS, \"vcmptrue_usss\" },\n\n\t{ X86_INS_VCMPSD, \"vcmpsd\" },\n\t{ X86_INS_VCMPEQSD, \"vcmpeqsd\" },\n\t{ X86_INS_VCMPLTSD, \"vcmpltsd\" },\n\t{ X86_INS_VCMPLESD, \"vcmplesd\" },\n\t{ X86_INS_VCMPUNORDSD, \"vcmpunordsd\" },\n\t{ X86_INS_VCMPNEQSD, \"vcmpneqsd\" },\n\t{ X86_INS_VCMPNLTSD, \"vcmpnltsd\" },\n\t{ X86_INS_VCMPNLESD, \"vcmpnlesd\" },\n\t{ X86_INS_VCMPORDSD, \"vcmpordsd\" },\n\t{ X86_INS_VCMPEQ_UQSD, \"vcmpeq_uqsd\" },\n\t{ X86_INS_VCMPNGESD, \"vcmpngesd\" },\n\t{ X86_INS_VCMPNGTSD, \"vcmpngtsd\" },\n\t{ X86_INS_VCMPFALSESD, \"vcmpfalsesd\" },\n\t{ X86_INS_VCMPNEQ_OQSD, \"vcmpneq_oqsd\" },\n\t{ X86_INS_VCMPGESD, \"vcmpgesd\" },\n\t{ X86_INS_VCMPGTSD, \"vcmpgtsd\" },\n\t{ X86_INS_VCMPTRUESD, \"vcmptruesd\" },\n\t{ X86_INS_VCMPEQ_OSSD, \"vcmpeq_ossd\" },\n\t{ X86_INS_VCMPLT_OQSD, \"vcmplt_oqsd\" },\n\t{ X86_INS_VCMPLE_OQSD, \"vcmple_oqsd\" },\n\t{ X86_INS_VCMPUNORD_SSD, \"vcmpunord_ssd\" },\n\t{ X86_INS_VCMPNEQ_USSD, \"vcmpneq_ussd\" },\n\t{ X86_INS_VCMPNLT_UQSD, \"vcmpnlt_uqsd\" },\n\t{ X86_INS_VCMPNLE_UQSD, \"vcmpnle_uqsd\" },\n\t{ X86_INS_VCMPORD_SSD, \"vcmpord_ssd\" },\n\t{ X86_INS_VCMPEQ_USSD, \"vcmpeq_ussd\" },\n\t{ X86_INS_VCMPNGE_UQSD, \"vcmpnge_uqsd\" },\n\t{ X86_INS_VCMPNGT_UQSD, \"vcmpngt_uqsd\" },\n\t{ X86_INS_VCMPFALSE_OSSD, \"vcmpfalse_ossd\" },\n\t{ X86_INS_VCMPNEQ_OSSD, \"vcmpneq_ossd\" },\n\t{ X86_INS_VCMPGE_OQSD, \"vcmpge_oqsd\" },\n\t{ X86_INS_VCMPGT_OQSD, \"vcmpgt_oqsd\" },\n\t{ X86_INS_VCMPTRUE_USSD, \"vcmptrue_ussd\" },\n\n\t{ X86_INS_VCMPPS, \"vcmpps\" },\n\t{ X86_INS_VCMPEQPS, \"vcmpeqps\" },\n\t{ X86_INS_VCMPLTPS, \"vcmpltps\" },\n\t{ X86_INS_VCMPLEPS, \"vcmpleps\" },\n\t{ X86_INS_VCMPUNORDPS, \"vcmpunordps\" },\n\t{ X86_INS_VCMPNEQPS, \"vcmpneqps\" },\n\t{ X86_INS_VCMPNLTPS, \"vcmpnltps\" },\n\t{ X86_INS_VCMPNLEPS, \"vcmpnleps\" },\n\t{ X86_INS_VCMPORDPS, \"vcmpordps\" },\n\t{ X86_INS_VCMPEQ_UQPS, \"vcmpeq_uqps\" },\n\t{ X86_INS_VCMPNGEPS, \"vcmpngeps\" },\n\t{ X86_INS_VCMPNGTPS, \"vcmpngtps\" },\n\t{ X86_INS_VCMPFALSEPS, \"vcmpfalseps\" },\n\t{ X86_INS_VCMPNEQ_OQPS, \"vcmpneq_oqps\" },\n\t{ X86_INS_VCMPGEPS, \"vcmpgeps\" },\n\t{ X86_INS_VCMPGTPS, \"vcmpgtps\" },\n\t{ X86_INS_VCMPTRUEPS, \"vcmptrueps\" },\n\t{ X86_INS_VCMPEQ_OSPS, \"vcmpeq_osps\" },\n\t{ X86_INS_VCMPLT_OQPS, \"vcmplt_oqps\" },\n\t{ X86_INS_VCMPLE_OQPS, \"vcmple_oqps\" },\n\t{ X86_INS_VCMPUNORD_SPS, \"vcmpunord_sps\" },\n\t{ X86_INS_VCMPNEQ_USPS, \"vcmpneq_usps\" },\n\t{ X86_INS_VCMPNLT_UQPS, \"vcmpnlt_uqps\" },\n\t{ X86_INS_VCMPNLE_UQPS, \"vcmpnle_uqps\" },\n\t{ X86_INS_VCMPORD_SPS, \"vcmpord_sps\" },\n\t{ X86_INS_VCMPEQ_USPS, \"vcmpeq_usps\" },\n\t{ X86_INS_VCMPNGE_UQPS, \"vcmpnge_uqps\" },\n\t{ X86_INS_VCMPNGT_UQPS, \"vcmpngt_uqps\" },\n\t{ X86_INS_VCMPFALSE_OSPS, \"vcmpfalse_osps\" },\n\t{ X86_INS_VCMPNEQ_OSPS, \"vcmpneq_osps\" },\n\t{ X86_INS_VCMPGE_OQPS, \"vcmpge_oqps\" },\n\t{ X86_INS_VCMPGT_OQPS, \"vcmpgt_oqps\" },\n\t{ X86_INS_VCMPTRUE_USPS, \"vcmptrue_usps\" },\n\n\t{ X86_INS_VCMPPD, \"vcmppd\" },\n\t{ X86_INS_VCMPEQPD, \"vcmpeqpd\" },\n\t{ X86_INS_VCMPLTPD, \"vcmpltpd\" },\n\t{ X86_INS_VCMPLEPD, \"vcmplepd\" },\n\t{ X86_INS_VCMPUNORDPD, \"vcmpunordpd\" },\n\t{ X86_INS_VCMPNEQPD, \"vcmpneqpd\" },\n\t{ X86_INS_VCMPNLTPD, \"vcmpnltpd\" },\n\t{ X86_INS_VCMPNLEPD, \"vcmpnlepd\" },\n\t{ X86_INS_VCMPORDPD, \"vcmpordpd\" },\n\t{ X86_INS_VCMPEQ_UQPD, \"vcmpeq_uqpd\" },\n\t{ X86_INS_VCMPNGEPD, \"vcmpngepd\" },\n\t{ X86_INS_VCMPNGTPD, \"vcmpngtpd\" },\n\t{ X86_INS_VCMPFALSEPD, \"vcmpfalsepd\" },\n\t{ X86_INS_VCMPNEQ_OQPD, \"vcmpneq_oqpd\" },\n\t{ X86_INS_VCMPGEPD, \"vcmpgepd\" },\n\t{ X86_INS_VCMPGTPD, \"vcmpgtpd\" },\n\t{ X86_INS_VCMPTRUEPD, \"vcmptruepd\" },\n\t{ X86_INS_VCMPEQ_OSPD, \"vcmpeq_ospd\" },\n\t{ X86_INS_VCMPLT_OQPD, \"vcmplt_oqpd\" },\n\t{ X86_INS_VCMPLE_OQPD, \"vcmple_oqpd\" },\n\t{ X86_INS_VCMPUNORD_SPD, \"vcmpunord_spd\" },\n\t{ X86_INS_VCMPNEQ_USPD, \"vcmpneq_uspd\" },\n\t{ X86_INS_VCMPNLT_UQPD, \"vcmpnlt_uqpd\" },\n\t{ X86_INS_VCMPNLE_UQPD, \"vcmpnle_uqpd\" },\n\t{ X86_INS_VCMPORD_SPD, \"vcmpord_spd\" },\n\t{ X86_INS_VCMPEQ_USPD, \"vcmpeq_uspd\" },\n\t{ X86_INS_VCMPNGE_UQPD, \"vcmpnge_uqpd\" },\n\t{ X86_INS_VCMPNGT_UQPD, \"vcmpngt_uqpd\" },\n\t{ X86_INS_VCMPFALSE_OSPD, \"vcmpfalse_ospd\" },\n\t{ X86_INS_VCMPNEQ_OSPD, \"vcmpneq_ospd\" },\n\t{ X86_INS_VCMPGE_OQPD, \"vcmpge_oqpd\" },\n\t{ X86_INS_VCMPGT_OQPD, \"vcmpgt_oqpd\" },\n\t{ X86_INS_VCMPTRUE_USPD, \"vcmptrue_uspd\" },\n};\n#endif\n\nconst char *X86_insn_name(csh handle, unsigned int id)\n{\n#ifndef CAPSTONE_DIET\n\tif (id >= X86_INS_ENDING)\n\t\treturn NULL;\n\n\treturn insn_name_maps[id].name;\n#else\n\treturn NULL;\n#endif\n}\n\n#ifndef CAPSTONE_DIET\nstatic name_map group_name_maps[] = {\n\t// generic groups\n\t{ X86_GRP_INVALID, NULL },\n\t{ X86_GRP_JUMP,\t\"jump\" },\n\t{ X86_GRP_CALL,\t\"call\" },\n\t{ X86_GRP_RET, \"ret\" },\n\t{ X86_GRP_INT, \"int\" },\n\t{ X86_GRP_IRET,\t\"iret\" },\n\t{ X86_GRP_PRIVILEGE, \"privilege\" },\n\n\t// architecture-specific groups\n\t{ X86_GRP_VM, \"vm\" },\n\t{ X86_GRP_3DNOW, \"3dnow\" },\n\t{ X86_GRP_AES, \"aes\" },\n\t{ X86_GRP_ADX, \"adx\" },\n\t{ X86_GRP_AVX, \"avx\" },\n\t{ X86_GRP_AVX2, \"avx2\" },\n\t{ X86_GRP_AVX512, \"avx512\" },\n\t{ X86_GRP_BMI, \"bmi\" },\n\t{ X86_GRP_BMI2, \"bmi2\" },\n\t{ X86_GRP_CMOV, \"cmov\" },\n\t{ X86_GRP_F16C, \"fc16\" },\n\t{ X86_GRP_FMA, \"fma\" },\n\t{ X86_GRP_FMA4, \"fma4\" },\n\t{ X86_GRP_FSGSBASE, \"fsgsbase\" },\n\t{ X86_GRP_HLE, \"hle\" },\n\t{ X86_GRP_MMX, \"mmx\" },\n\t{ X86_GRP_MODE32, \"mode32\" },\n\t{ X86_GRP_MODE64, \"mode64\" },\n\t{ X86_GRP_RTM, \"rtm\" },\n\t{ X86_GRP_SHA, \"sha\" },\n\t{ X86_GRP_SSE1, \"sse1\" },\n\t{ X86_GRP_SSE2, \"sse2\" },\n\t{ X86_GRP_SSE3, \"sse3\" },\n\t{ X86_GRP_SSE41, \"sse41\" },\n\t{ X86_GRP_SSE42, \"sse42\" },\n\t{ X86_GRP_SSE4A, \"sse4a\" },\n\t{ X86_GRP_SSSE3, \"ssse3\" },\n\t{ X86_GRP_PCLMUL, \"pclmul\" },\n\t{ X86_GRP_XOP, \"xop\" },\n\t{ X86_GRP_CDI, \"cdi\" },\n\t{ X86_GRP_ERI, \"eri\" },\n\t{ X86_GRP_TBM, \"tbm\" },\n\t{ X86_GRP_16BITMODE, \"16bitmode\" },\n\t{ X86_GRP_NOT64BITMODE, \"not64bitmode\" },\n\t{ X86_GRP_SGX,\t\"sgx\" },\n\t{ X86_GRP_DQI,\t\"dqi\" },\n\t{ X86_GRP_BWI,\t\"bwi\" },\n\t{ X86_GRP_PFI,\t\"pfi\" },\n\t{ X86_GRP_VLX,\t\"vlx\" },\n\t{ X86_GRP_SMAP,\t\"smap\" },\n\t{ X86_GRP_NOVLX, \"novlx\" },\n};\n#endif\n\nconst char *X86_group_name(csh handle, unsigned int id)\n{\n#ifndef CAPSTONE_DIET\n\treturn id2name(group_name_maps, ARR_SIZE(group_name_maps), id);\n#else\n\treturn NULL;\n#endif\n}\n\n#define GET_INSTRINFO_ENUM\n#ifdef CAPSTONE_X86_REDUCE\n#include \"X86GenInstrInfo_reduce.inc\"\n#else\n#include \"X86GenInstrInfo.inc\"\n#endif\n\n#ifndef CAPSTONE_X86_REDUCE\nstatic insn_map insns[] = {\t// full x86 instructions\n\t// dummy item\n\t{\n\t\t0, 0,\n#ifndef CAPSTONE_DIET\n\t\t{ 0 }, { 0 }, { 0 }, 0, 0\n#endif\n\t},\n\n#include \"X86MappingInsn.inc\"\n};\n#else\t// X86 reduce (defined CAPSTONE_X86_REDUCE)\nstatic insn_map insns[] = {\t// reduce x86 instructions\n\t// dummy item\n\t{\n\t\t0, 0,\n#ifndef CAPSTONE_DIET\n\t\t{ 0 }, { 0 }, { 0 }, 0, 0\n#endif\n\t},\n\n#include \"X86MappingInsn_reduce.inc\"\n};\n#endif\n\n#ifndef CAPSTONE_DIET\n// replace r1 = r2\nstatic void arr_replace(uint16_t *arr, uint8_t max, x86_reg r1, x86_reg r2)\n{\n\tuint8_t i;\n\n\tfor(i = 0; i < max; i++) {\n\t\tif (arr[i] == r1) {\n\t\t\tarr[i] = r2;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n#endif\n\n// given internal insn id, return public instruction info\nvoid X86_get_insn_id(cs_struct *h, cs_insn *insn, unsigned int id)\n{\n\tint i = insn_find(insns, ARR_SIZE(insns), id, &h->insn_cache);\n\tif (i != 0) {\n\t\tinsn->id = insns[i].mapid;\n\n\t\tif (h->detail) {\n#ifndef CAPSTONE_DIET\n\t\t\tmemcpy(insn->detail->regs_read, insns[i].regs_use, sizeof(insns[i].regs_use));\n\t\t\tinsn->detail->regs_read_count = (uint8_t)count_positive(insns[i].regs_use);\n\n\t\t\t// special cases when regs_write[] depends on arch\n\t\t\tswitch(id) {\n\t\t\t\tdefault:\n\t\t\t\t\tmemcpy(insn->detail->regs_write, insns[i].regs_mod, sizeof(insns[i].regs_mod));\n\t\t\t\t\tinsn->detail->regs_write_count = (uint8_t)count_positive(insns[i].regs_mod);\n\t\t\t\t\tbreak;\n\t\t\t\tcase X86_RDTSC:\n\t\t\t\t\tif (h->mode == CS_MODE_64) {\n\t\t\t\t\t\tmemcpy(insn->detail->regs_write, insns[i].regs_mod, sizeof(insns[i].regs_mod));\n\t\t\t\t\t\tinsn->detail->regs_write_count = (uint8_t)count_positive(insns[i].regs_mod);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinsn->detail->regs_write[0] = X86_REG_EAX;\n\t\t\t\t\t\tinsn->detail->regs_write[1] = X86_REG_EDX;\n\t\t\t\t\t\tinsn->detail->regs_write_count = 2;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase X86_RDTSCP:\n\t\t\t\t\tif (h->mode == CS_MODE_64) {\n\t\t\t\t\t\tmemcpy(insn->detail->regs_write, insns[i].regs_mod, sizeof(insns[i].regs_mod));\n\t\t\t\t\t\tinsn->detail->regs_write_count = (uint8_t)count_positive(insns[i].regs_mod);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinsn->detail->regs_write[0] = X86_REG_EAX;\n\t\t\t\t\t\tinsn->detail->regs_write[1] = X86_REG_ECX;\n\t\t\t\t\t\tinsn->detail->regs_write[2] = X86_REG_EDX;\n\t\t\t\t\t\tinsn->detail->regs_write_count = 3;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tswitch(insn->id) {\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_LOOP:\n\t\t\t\tcase X86_INS_LOOPE:\n\t\t\t\tcase X86_INS_LOOPNE:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault: break;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\t\t insn->detail->regs_read[0] = X86_REG_CX;\n\t\t\t\t\t\t\t\t insn->detail->regs_read_count = 1;\n\t\t\t\t\t\t\t\t insn->detail->regs_write[0] = X86_REG_CX;\n\t\t\t\t\t\t\t\t insn->detail->regs_write_count = 1;\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\tcase CS_MODE_32:\n\t\t\t\t\t\t\t\t insn->detail->regs_read[0] = X86_REG_ECX;\n\t\t\t\t\t\t\t\t insn->detail->regs_read_count = 1;\n\t\t\t\t\t\t\t\t insn->detail->regs_write[0] = X86_REG_ECX;\n\t\t\t\t\t\t\t\t insn->detail->regs_write_count = 1;\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\t\t insn->detail->regs_read[0] = X86_REG_RCX;\n\t\t\t\t\t\t\t\t insn->detail->regs_read_count = 1;\n\t\t\t\t\t\t\t\t insn->detail->regs_write[0] = X86_REG_RCX;\n\t\t\t\t\t\t\t\t insn->detail->regs_write_count = 1;\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t}\n\n\t\t\t\t\t// LOOPE & LOOPNE also read EFLAGS\n\t\t\t\t\tif (insn->id != X86_INS_LOOP) {\n\t\t\t\t\t\tinsn->detail->regs_read[1] = X86_REG_EFLAGS;\n\t\t\t\t\t\tinsn->detail->regs_read_count = 2;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_LODSB:\n\t\t\t\tcase X86_INS_LODSD:\n\t\t\t\tcase X86_INS_LODSQ:\n\t\t\t\tcase X86_INS_LODSW:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_SCASB:\n\t\t\t\tcase X86_INS_SCASW:\n\t\t\t\tcase X86_INS_SCASQ:\n\t\t\t\tcase X86_INS_STOSB:\n\t\t\t\tcase X86_INS_STOSD:\n\t\t\t\tcase X86_INS_STOSQ:\n\t\t\t\tcase X86_INS_STOSW:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_CMPSB:\n\t\t\t\tcase X86_INS_CMPSD:\n\t\t\t\tcase X86_INS_CMPSQ:\n\t\t\t\tcase X86_INS_CMPSW:\n\t\t\t\tcase X86_INS_MOVSB:\n\t\t\t\tcase X86_INS_MOVSW:\n\t\t\t\tcase X86_INS_MOVSD:\n\t\t\t\tcase X86_INS_MOVSQ:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tmemcpy(insn->detail->groups, insns[i].groups, sizeof(insns[i].groups));\n\t\t\tinsn->detail->groups_count = (uint8_t)count_positive8(insns[i].groups);\n\n\t\t\tif (insns[i].branch || insns[i].indirect_branch) {\n\t\t\t\t// this insn also belongs to JUMP group. add JUMP group\n\t\t\t\tinsn->detail->groups[insn->detail->groups_count] = X86_GRP_JUMP;\n\t\t\t\tinsn->detail->groups_count++;\n\t\t\t}\n\n\t\t\tswitch (insns[i].id) {\n\t\t\t\tcase X86_OUT8ir:\n\t\t\t\tcase X86_OUT16ir:\n\t\t\t\tcase X86_OUT32ir:\n\t\t\t\t\tif (insn->detail->x86.operands[0].imm == -78) {\n\t\t\t\t\t\t// Writing to port 0xb2 causes an SMI on most platforms\n\t\t\t\t\t\t// See: http://cs.gmu.edu/~tr-admin/papers/GMU-CS-TR-2011-8.pdf\n\t\t\t\t\t\tinsn->detail->groups[insn->detail->groups_count] = X86_GRP_INT;\n\t\t\t\t\t\tinsn->detail->groups_count++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n#endif\n\t\t}\n\t}\n}\n\n// map special instructions with accumulate registers.\n// this is needed because LLVM embeds these register names into AsmStrs[],\n// but not separately in operands\nstruct insn_reg {\n\tuint16_t insn;\n\tx86_reg reg;\n\tenum cs_ac_type access;\n};\n\nstruct insn_reg2 {\n\tuint16_t insn;\n\tx86_reg reg1, reg2;\n\tenum cs_ac_type access1, access2;\n};\n\nstatic struct insn_reg insn_regs_att[] = {\n\t{ X86_INSB, X86_REG_DX },\n\t{ X86_INSW, X86_REG_DX },\n\t{ X86_INSL, X86_REG_DX },\n\n\t{ X86_MOV64o64a, X86_REG_RAX },\n\t{ X86_MOV32o32a, X86_REG_EAX },\n\t{ X86_MOV64o32a, X86_REG_EAX },\n\t{ X86_MOV16o16a, X86_REG_AX },\n\n\t{ X86_PUSHCS32, X86_REG_CS },\n\t{ X86_PUSHDS32, X86_REG_DS },\n\t{ X86_PUSHES32, X86_REG_ES },\n\t{ X86_PUSHFS32, X86_REG_FS },\n\t{ X86_PUSHGS32, X86_REG_GS },\n\t{ X86_PUSHSS32, X86_REG_SS },\n\n\t{ X86_PUSHFS64, X86_REG_FS },\n\t{ X86_PUSHGS64, X86_REG_GS },\n\n\t{ X86_PUSHCS16, X86_REG_CS },\n\t{ X86_PUSHDS16, X86_REG_DS },\n\t{ X86_PUSHES16, X86_REG_ES },\n\t{ X86_PUSHFS16, X86_REG_FS },\n\t{ X86_PUSHGS16, X86_REG_GS },\n\t{ X86_PUSHSS16, X86_REG_SS },\n\n\t{ X86_POPDS32, X86_REG_DS },\n\t{ X86_POPES32, X86_REG_ES },\n\t{ X86_POPFS32, X86_REG_FS },\n\t{ X86_POPGS32, X86_REG_GS },\n\t{ X86_POPSS32, X86_REG_SS },\n\n\t{ X86_POPFS64, X86_REG_FS },\n\t{ X86_POPGS64, X86_REG_GS },\n\n\t{ X86_POPDS16, X86_REG_DS },\n\t{ X86_POPES16, X86_REG_ES },\n\t{ X86_POPFS16, X86_REG_FS },\n\t{ X86_POPGS16, X86_REG_GS },\n\t{ X86_POPSS16, X86_REG_SS },\n\n\t{ X86_RCL32rCL, X86_REG_CL },\n\t{ X86_SHL8rCL, X86_REG_CL },\n\t{ X86_SHL16rCL, X86_REG_CL },\n\t{ X86_SHL32rCL, X86_REG_CL },\n\t{ X86_SHL64rCL, X86_REG_CL },\n\t{ X86_SAL8rCL, X86_REG_CL },\n\t{ X86_SAL16rCL, X86_REG_CL },\n\t{ X86_SAL32rCL, X86_REG_CL },\n\t{ X86_SAL64rCL, X86_REG_CL },\n\t{ X86_SHR8rCL, X86_REG_CL },\n\t{ X86_SHR16rCL, X86_REG_CL },\n\t{ X86_SHR32rCL, X86_REG_CL },\n\t{ X86_SHR64rCL, X86_REG_CL },\n\t{ X86_SAR8rCL, X86_REG_CL },\n\t{ X86_SAR16rCL, X86_REG_CL },\n\t{ X86_SAR32rCL, X86_REG_CL },\n\t{ X86_SAR64rCL, X86_REG_CL },\n\t{ X86_RCL8rCL, X86_REG_CL },\n\t{ X86_RCL16rCL, X86_REG_CL },\n\t{ X86_RCL32rCL, X86_REG_CL },\n\t{ X86_RCL64rCL, X86_REG_CL },\n\t{ X86_RCR8rCL, X86_REG_CL },\n\t{ X86_RCR16rCL, X86_REG_CL },\n\t{ X86_RCR32rCL, X86_REG_CL },\n\t{ X86_RCR64rCL, X86_REG_CL },\n\t{ X86_ROL8rCL, X86_REG_CL },\n\t{ X86_ROL16rCL, X86_REG_CL },\n\t{ X86_ROL32rCL, X86_REG_CL },\n\t{ X86_ROL64rCL, X86_REG_CL },\n\t{ X86_ROR8rCL, X86_REG_CL },\n\t{ X86_ROR16rCL, X86_REG_CL },\n\t{ X86_ROR32rCL, X86_REG_CL },\n\t{ X86_ROR64rCL, X86_REG_CL },\n\t{ X86_SHLD16rrCL, X86_REG_CL },\n\t{ X86_SHRD16rrCL, X86_REG_CL },\n\t{ X86_SHLD32rrCL, X86_REG_CL },\n\t{ X86_SHRD32rrCL, X86_REG_CL },\n\t{ X86_SHLD64rrCL, X86_REG_CL },\n\t{ X86_SHRD64rrCL, X86_REG_CL },\n\t{ X86_SHLD16mrCL, X86_REG_CL },\n\t{ X86_SHRD16mrCL, X86_REG_CL },\n\t{ X86_SHLD32mrCL, X86_REG_CL },\n\t{ X86_SHRD32mrCL, X86_REG_CL },\n\t{ X86_SHLD64mrCL, X86_REG_CL },\n\t{ X86_SHRD64mrCL, X86_REG_CL },\n\n\t{ X86_OUT8ir, X86_REG_AL },\n\t{ X86_OUT16ir, X86_REG_AX },\n\t{ X86_OUT32ir, X86_REG_EAX },\n\n#ifndef CAPSTONE_X86_REDUCE\n\t{ X86_SKINIT, X86_REG_EAX },\n\t{ X86_VMRUN32, X86_REG_EAX },\n\t{ X86_VMRUN64, X86_REG_RAX },\n\t{ X86_VMLOAD32, X86_REG_EAX },\n\t{ X86_VMLOAD64, X86_REG_RAX },\n\t{ X86_VMSAVE32, X86_REG_EAX },\n\t{ X86_VMSAVE64, X86_REG_RAX },\n\n\t{ X86_FNSTSW16r, X86_REG_AX },\n\n\t{ X86_ADD_FrST0, X86_REG_ST0 },\n\t{ X86_SUB_FrST0, X86_REG_ST0 },\n\t{ X86_SUBR_FrST0, X86_REG_ST0 },\n\t{ X86_MUL_FrST0, X86_REG_ST0 },\n\t{ X86_DIV_FrST0, X86_REG_ST0 },\n\t{ X86_DIVR_FrST0, X86_REG_ST0 },\n#endif\n};\n\nstatic struct insn_reg insn_regs_intel[] = {\n\t{ X86_OUTSB, X86_REG_DX, CS_AC_WRITE },\n\t{ X86_OUTSW, X86_REG_DX, CS_AC_WRITE },\n\t{ X86_OUTSL, X86_REG_DX, CS_AC_WRITE },\n\n\t{ X86_MOV8ao16, X86_REG_AL, CS_AC_WRITE },     // 16-bit A0 1020                  // mov     al, byte ptr [0x2010]\n\t{ X86_MOV8ao32, X86_REG_AL, CS_AC_WRITE },     // 32-bit A0 10203040              // mov     al, byte ptr [0x40302010]\n\t{ X86_MOV8ao64, X86_REG_AL, CS_AC_WRITE },     // 64-bit 66 A0 1020304050607080   // movabs  al, byte ptr [0x8070605040302010]\n\n\t{ X86_MOV16ao16, X86_REG_AX, CS_AC_WRITE },    // 16-bit A1 1020                  // mov     ax, word ptr [0x2010]\n\t{ X86_MOV16ao32, X86_REG_AX, CS_AC_WRITE },    // 32-bit A1 10203040              // mov     ax, word ptr [0x40302010]\n\t{ X86_MOV16ao64, X86_REG_AX, CS_AC_WRITE },    // 64-bit 66 A1 1020304050607080   // movabs  ax, word ptr [0x8070605040302010]\n\n\t{ X86_MOV32ao16, X86_REG_EAX, CS_AC_WRITE },   // 32-bit 67 A1 1020               // mov     eax, dword ptr [0x2010]\n\t{ X86_MOV32ao32, X86_REG_EAX, CS_AC_WRITE },   // 32-bit A1 10203040              // mov     eax, dword ptr [0x40302010]\n\t{ X86_MOV32ao64, X86_REG_EAX, CS_AC_WRITE },   // 64-bit A1 1020304050607080      // movabs  eax, dword ptr [0x8070605040302010]\n\n\t{ X86_MOV64ao32, X86_REG_RAX, CS_AC_WRITE },   // 64-bit 48 8B04 10203040         // mov     rax, qword ptr [0x40302010]\n\t{ X86_MOV64ao64, X86_REG_RAX, CS_AC_WRITE },   // 64-bit 48 A1 1020304050607080   // movabs  rax, qword ptr [0x8070605040302010]\n\n\t{ X86_LODSQ, X86_REG_RAX, CS_AC_WRITE },\n\t{ X86_OR32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_TEST32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG64ar, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_LODSB, X86_REG_AL, CS_AC_WRITE },\n\t{ X86_AND32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_IN16ri, X86_REG_AX, CS_AC_WRITE },\n\t{ X86_CMP64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG16ar, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_LODSW, X86_REG_AX, CS_AC_WRITE },\n\t{ X86_AND16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG32ar64, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_CMP32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_AND8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASW, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_OR16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG32ar, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASQ, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_OR8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_TEST64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_TEST8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_IN8ri, X86_REG_AL, CS_AC_WRITE },\n\t{ X86_TEST16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASL, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_OR64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASB, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_AND64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_LODSL, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_CMP8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_CMP16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_IN32ri, X86_REG_EAX, CS_AC_WRITE },\n\n\t{ X86_PUSHCS32, X86_REG_CS, CS_AC_READ },\n\t{ X86_PUSHDS32, X86_REG_DS, CS_AC_READ },\n\t{ X86_PUSHES32, X86_REG_ES, CS_AC_READ },\n\t{ X86_PUSHFS32, X86_REG_FS, CS_AC_READ },\n\t{ X86_PUSHGS32, X86_REG_GS, CS_AC_READ },\n\t{ X86_PUSHSS32, X86_REG_SS, CS_AC_READ },\n\n\t{ X86_PUSHFS64, X86_REG_FS, CS_AC_READ },\n\t{ X86_PUSHGS64, X86_REG_GS, CS_AC_READ },\n\n\t{ X86_PUSHCS16, X86_REG_CS, CS_AC_READ },\n\t{ X86_PUSHDS16, X86_REG_DS, CS_AC_READ },\n\t{ X86_PUSHES16, X86_REG_ES, CS_AC_READ },\n\t{ X86_PUSHFS16, X86_REG_FS, CS_AC_READ },\n\t{ X86_PUSHGS16, X86_REG_GS, CS_AC_READ },\n\t{ X86_PUSHSS16, X86_REG_SS, CS_AC_READ },\n\n\t{ X86_POPDS32, X86_REG_DS, CS_AC_WRITE },\n\t{ X86_POPES32, X86_REG_ES, CS_AC_WRITE },\n\t{ X86_POPFS32, X86_REG_FS, CS_AC_WRITE },\n\t{ X86_POPGS32, X86_REG_GS, CS_AC_WRITE },\n\t{ X86_POPSS32, X86_REG_SS, CS_AC_WRITE },\n\n\t{ X86_POPFS64, X86_REG_FS, CS_AC_WRITE },\n\t{ X86_POPGS64, X86_REG_GS, CS_AC_WRITE },\n\n\t{ X86_POPDS16, X86_REG_DS, CS_AC_WRITE },\n\t{ X86_POPES16, X86_REG_ES, CS_AC_WRITE },\n\t{ X86_POPFS16, X86_REG_FS, CS_AC_WRITE },\n\t{ X86_POPGS16, X86_REG_GS, CS_AC_WRITE },\n\t{ X86_POPSS16, X86_REG_SS, CS_AC_WRITE },\n\n#ifndef CAPSTONE_X86_REDUCE\n\t{ X86_SKINIT, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_VMRUN32, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_VMRUN64, X86_REG_RAX, CS_AC_WRITE },\n\t{ X86_VMLOAD32, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_VMLOAD64, X86_REG_RAX, CS_AC_WRITE },\n\t{ X86_VMSAVE32, X86_REG_EAX, CS_AC_READ },\n\t{ X86_VMSAVE64, X86_REG_RAX, CS_AC_READ },\n\n\t{ X86_FNSTSW16r, X86_REG_AX, CS_AC_WRITE },\n\n\t{ X86_CMOVB_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVBE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVP_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNB_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNBE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNP_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FXCHST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FXCHST0r_alt, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FCOMST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FCOMPST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FCOMPST0r_alt, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FPST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FPST0r_alt, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FPNCEST0r, X86_REG_ST0, CS_AC_WRITE },\n#endif\n};\n\nstatic struct insn_reg2 insn_regs_intel2[] = {\n\t{ X86_IN8rr, X86_REG_AL, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },\n\t{ X86_IN16rr, X86_REG_AX, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },\n\t{ X86_IN32rr, X86_REG_EAX, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },\n\n\t{ X86_OUT8rr, X86_REG_DX, X86_REG_AL, CS_AC_READ, CS_AC_READ },\n\t{ X86_OUT16rr, X86_REG_DX, X86_REG_AX, CS_AC_READ, CS_AC_READ },\n\t{ X86_OUT32rr, X86_REG_DX, X86_REG_EAX, CS_AC_READ, CS_AC_READ },\n\n\t{ X86_INVLPGA32, X86_REG_EAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },\n\t{ X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },\n};\n\nstatic struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];\n\nstatic int regs_cmp(const void *a, const void *b)\n{\n\tuint16_t l = ((struct insn_reg *)a)->insn;\n\tuint16_t r = ((struct insn_reg *)b)->insn;\n\treturn (l - r);\n}\n\nstatic bool intel_regs_sorted = false;\n// return register of given instruction id\n// return 0 if not found\n// this is to handle instructions embedding accumulate registers into AsmStrs[]\nx86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)\n{\n\tunsigned int first = 0;\n\tunsigned int last = ARR_SIZE(insn_regs_intel) - 1;\n\tunsigned int mid = ARR_SIZE(insn_regs_intel) / 2;\n\n\tif (!intel_regs_sorted) {\n\t\tmemcpy(insn_regs_intel_sorted, insn_regs_intel,\n\t\t\t\tsizeof(insn_regs_intel_sorted));\n\t\tqsort(insn_regs_intel_sorted,\n\t\t\t\tARR_SIZE(insn_regs_intel_sorted),\n\t\t\t\tsizeof(struct insn_reg), regs_cmp);\n\t\tintel_regs_sorted = true;\n\t}\n\n\twhile (first <= last) {\n\t\tif (insn_regs_intel_sorted[mid].insn < id) {\n\t\t\tfirst = mid + 1;\n\t\t} else if (insn_regs_intel_sorted[mid].insn == id) {\n\t\t\tif (access) {\n\t\t\t\t*access = insn_regs_intel_sorted[mid].access;\n\t\t\t}\n\t\t\treturn insn_regs_intel_sorted[mid].reg;\n\t\t} else {\n\t\t\tif (mid == 0)\n\t\t\t\tbreak;\n\t\t\tlast = mid - 1;\n\t\t}\n\t\tmid = (first + last) / 2;\n\t}\n\n\t// not found\n\treturn 0;\n}\n\nbool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2)\n{\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(insn_regs_intel2); i++) {\n\t\tif (insn_regs_intel2[i].insn == id) {\n\t\t\t*reg1 = insn_regs_intel2[i].reg1;\n\t\t\t*reg2 = insn_regs_intel2[i].reg2;\n\t\t\tif (access1)\n\t\t\t\t*access1 = insn_regs_intel2[i].access1;\n\t\t\tif (access2)\n\t\t\t\t*access2 = insn_regs_intel2[i].access2;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n// ATT just reuses Intel data, but with the order of registers reversed\nbool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2)\n{\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(insn_regs_intel2); i++) {\n\t\tif (insn_regs_intel2[i].insn == id) {\n\t\t\t// reverse order of Intel syntax registers\n\t\t\t*reg1 = insn_regs_intel2[i].reg2;\n\t\t\t*reg2 = insn_regs_intel2[i].reg1;\n            if (access1)\n                *access1 = insn_regs_intel2[i].access2;\n            if (access2)\n                *access2 = insn_regs_intel2[i].access1;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\nx86_reg X86_insn_reg_att(unsigned int id, enum cs_ac_type *access)\n{\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(insn_regs_att); i++) {\n\t\tif (insn_regs_att[i].insn == id) {\n            if (access)\n                *access = insn_regs_intel[i].access;\n\t\t\treturn insn_regs_att[i].reg;\n\t\t}\n\t}\n\n\t// not found\n\treturn 0;\n}\n\n// given MCInst's id, find out if this insn is valid for REPNE prefix\nstatic bool valid_repne(cs_struct *h, unsigned int opcode)\n{\n\tunsigned int id;\n\tint i = insn_find(insns, ARR_SIZE(insns), opcode, &h->insn_cache);\n\tif (i != 0) {\n\t\tid = insns[i].mapid;\n\t\tswitch(id) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_CMPSB:\n\t\t\tcase X86_INS_CMPSW:\n\t\t\tcase X86_INS_CMPSQ:\n\n\t\t\tcase X86_INS_SCASB:\n\t\t\tcase X86_INS_SCASW:\n\t\t\tcase X86_INS_SCASQ:\n\n\t\t\tcase X86_INS_MOVSB:\n\t\t\tcase X86_INS_MOVSW:\n\t\t\tcase X86_INS_MOVSD:\n\t\t\tcase X86_INS_MOVSQ:\n\n\t\t\tcase X86_INS_LODSB:\n\t\t\tcase X86_INS_LODSW:\n\t\t\tcase X86_INS_LODSD:\n\t\t\tcase X86_INS_LODSQ:\n\n\t\t\tcase X86_INS_STOSB:\n\t\t\tcase X86_INS_STOSW:\n\t\t\tcase X86_INS_STOSD:\n\t\t\tcase X86_INS_STOSQ:\n\n\t\t\tcase X86_INS_INSB:\n\t\t\tcase X86_INS_INSW:\n\t\t\tcase X86_INS_INSD:\n\n\t\t\tcase X86_INS_OUTSB:\n\t\t\tcase X86_INS_OUTSW:\n\t\t\tcase X86_INS_OUTSD:\n\n\t\t\t\treturn true;\n\n\t\t\tcase X86_INS_CMPSD:\n\t\t\t\tif (opcode == X86_CMPSL) // REP CMPSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_SCASD:\n\t\t\t\tif (opcode == X86_SCASL) // REP SCASD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n// given MCInst's id, find out if this insn is valid for REP prefix\nstatic bool valid_rep(cs_struct *h, unsigned int opcode)\n{\n\tunsigned int id;\n\tint i = insn_find(insns, ARR_SIZE(insns), opcode, &h->insn_cache);\n\tif (i != 0) {\n\t\tid = insns[i].mapid;\n\t\tswitch(id) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_MOVSB:\n\t\t\tcase X86_INS_MOVSW:\n\t\t\tcase X86_INS_MOVSQ:\n\n\t\t\tcase X86_INS_LODSB:\n\t\t\tcase X86_INS_LODSW:\n\t\t\tcase X86_INS_LODSQ:\n\n\t\t\tcase X86_INS_STOSB:\n\t\t\tcase X86_INS_STOSW:\n\t\t\tcase X86_INS_STOSQ:\n\n\t\t\tcase X86_INS_INSB:\n\t\t\tcase X86_INS_INSW:\n\t\t\tcase X86_INS_INSD:\n\n\t\t\tcase X86_INS_OUTSB:\n\t\t\tcase X86_INS_OUTSW:\n\t\t\tcase X86_INS_OUTSD:\n\t\t\t\treturn true;\n\n\t\t\t// following are some confused instructions, which have the same\n\t\t\t// mnemonics in 128bit media instructions. Intel is horribly crazy!\n\t\t\tcase X86_INS_MOVSD:\n\t\t\t\tif (opcode == X86_MOVSL) // REP MOVSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_LODSD:\n\t\t\t\tif (opcode == X86_LODSL) // REP LODSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_STOSD:\n\t\t\t\tif (opcode == X86_STOSL) // REP STOSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n// given MCInst's id, find out if this insn is valid for REPE prefix\nstatic bool valid_repe(cs_struct *h, unsigned int opcode)\n{\n\tunsigned int id;\n\tint i = insn_find(insns, ARR_SIZE(insns), opcode, &h->insn_cache);\n\tif (i != 0) {\n\t\tid = insns[i].mapid;\n\t\tswitch(id) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_CMPSB:\n\t\t\tcase X86_INS_CMPSW:\n\t\t\tcase X86_INS_CMPSQ:\n\n\t\t\tcase X86_INS_SCASB:\n\t\t\tcase X86_INS_SCASW:\n\t\t\tcase X86_INS_SCASQ:\n\t\t\t\treturn true;\n\n\t\t\t// following are some confused instructions, which have the same\n\t\t\t// mnemonics in 128bit media instructions. Intel is horribly crazy!\n\t\t\tcase X86_INS_CMPSD:\n\t\t\t\tif (opcode == X86_CMPSL) // REP CMPSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_SCASD:\n\t\t\t\tif (opcode == X86_SCASL) // REP SCASD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n#ifndef CAPSTONE_DIET\n// add *CX register to regs_read[] & regs_write[]\nstatic void add_cx(MCInst *MI)\n{\n\tif (MI->csh->detail) {\n\t\tx86_reg cx;\n\n\t\tif (MI->csh->mode & CS_MODE_16)\n\t\t\tcx = X86_REG_CX;\n\t\telse if (MI->csh->mode & CS_MODE_32)\n\t\t\tcx = X86_REG_ECX;\n\t\telse\t// 64-bit\n\t\t\tcx = X86_REG_RCX;\n\n\t\tMI->flat_insn->detail->regs_read[MI->flat_insn->detail->regs_read_count] = cx;\n\t\tMI->flat_insn->detail->regs_read_count++;\n\n\t\tMI->flat_insn->detail->regs_write[MI->flat_insn->detail->regs_write_count] = cx;\n\t\tMI->flat_insn->detail->regs_write_count++;\n\t}\n}\n#endif\n\n// return true if we patch the mnemonic\nbool X86_lockrep(MCInst *MI, SStream *O)\n{\n\tunsigned int opcode;\n\tbool res = false;\n\n\tswitch(MI->x86_prefix[0]) {\n\t\tdefault:\n\t\t\tbreak;\n\t\tcase 0xf0:\n#ifndef CAPSTONE_DIET\n\t\t\tSStream_concat(O, \"lock|\");\n#endif\n\t\t\tbreak;\n\t\tcase 0xf2:\t// repne\n\t\t\topcode = MCInst_getOpcode(MI);\n#ifndef CAPSTONE_DIET\t// only care about memonic in standard (non-diet) mode\n\t\t\tif (valid_repne(MI->csh, opcode)) {\n\t\t\t\tSStream_concat(O, \"repne|\");\n\t\t\t\tadd_cx(MI);\n\t\t\t} else {\n\t\t\t\t// invalid prefix\n\t\t\t\tMI->x86_prefix[0] = 0;\n\n\t\t\t\t// handle special cases\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\t\tMCInst_setOpcode(MI, X86_MULSDrr);\n\t\t\t\t\tSStream_concat(O, \"mulsd\\t\");\n\t\t\t\t\tres = true;\n\t\t\t\t}\n#endif\n\t\t\t}\n#else\t// diet mode -> only patch opcode in special cases\n\t\t\tif (!valid_repne(MI->csh, opcode)) {\n\t\t\t\tMI->x86_prefix[0] = 0;\n\t\t\t}\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t// handle special cases\n\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\tMCInst_setOpcode(MI, X86_MULSDrr);\n\t\t\t}\n#endif\n#endif\n\t\t\tbreak;\n\n\t\tcase 0xf3:\n\t\t\topcode = MCInst_getOpcode(MI);\n#ifndef CAPSTONE_DIET\t// only care about memonic in standard (non-diet) mode\n\t\t\tif (valid_rep(MI->csh, opcode)) {\n\t\t\t\tSStream_concat(O, \"rep|\");\n\t\t\t\tadd_cx(MI);\n\t\t\t} else if (valid_repe(MI->csh, opcode)) {\n\t\t\t\tSStream_concat(O, \"repe|\");\n\t\t\t\tadd_cx(MI);\n\t\t\t} else {\n\t\t\t\t// invalid prefix\n\t\t\t\tMI->x86_prefix[0] = 0;\n\n\t\t\t\t// handle special cases\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\t\tMCInst_setOpcode(MI, X86_MULSSrr);\n\t\t\t\t\tSStream_concat(O, \"mulss\\t\");\n\t\t\t\t\tres = true;\n\t\t\t\t}\n#endif\n\t\t\t}\n#else\t// diet mode -> only patch opcode in special cases\n\t\t\tif (!valid_rep(MI->csh, opcode) && !valid_repe(MI->csh, opcode)) {\n\t\t\t\tMI->x86_prefix[0] = 0;\n\t\t\t}\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t// handle special cases\n\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\tMCInst_setOpcode(MI, X86_MULSSrr);\n\t\t\t}\n#endif\n#endif\n\t\t\tbreak;\n\t}\n\n\t// copy normalized prefix[] back to x86.prefix[]\n\tif (MI->csh->detail)\n\t\tmemcpy(MI->flat_insn->detail->x86.prefix, MI->x86_prefix, ARR_SIZE(MI->x86_prefix));\n\n\treturn res;\n}\n\nvoid op_addReg(MCInst *MI, int reg)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].type = X86_OP_REG;\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].reg = reg;\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->csh->regsize_map[reg];\n\t\tMI->flat_insn->detail->x86.op_count++;\n\t}\n\n\tif (MI->op1_size == 0)\n\t\tMI->op1_size = MI->csh->regsize_map[reg];\n}\n\nvoid op_addImm(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].type = X86_OP_IMM;\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].imm = v;\n\t\t// if op_count > 0, then this operand's size is taken from the destination op\n\t\tif (MI->csh->syntax != CS_OPT_SYNTAX_ATT) {\n\t\t\tif (MI->flat_insn->detail->x86.op_count > 0)\n\t\t\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->flat_insn->detail->x86.operands[0].size;\n\t\t\telse\n\t\t\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->imm_size;\n\t\t} else\n\t\t\tMI->has_imm = true;\n\t\tMI->flat_insn->detail->x86.op_count++;\n\t}\n\n\tif (MI->op1_size == 0)\n\t\tMI->op1_size = MI->imm_size;\n}\n\nvoid op_addXopCC(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.xop_cc = v;\n\t}\n}\n\nvoid op_addSseCC(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.sse_cc = v;\n\t}\n}\n\nvoid op_addAvxCC(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.avx_cc = v;\n\t}\n}\n\nvoid op_addAvxRoundingMode(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.avx_rm = v;\n\t}\n}\n\n// below functions supply details to X86GenAsmWriter*.inc\nvoid op_addAvxZeroOpmask(MCInst *MI)\n{\n\tif (MI->csh->detail) {\n\t\t// link with the previous operand\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count - 1].avx_zero_opmask = true;\n\t}\n}\n\nvoid op_addAvxSae(MCInst *MI)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.avx_sae = true;\n\t}\n}\n\nvoid op_addAvxBroadcast(MCInst *MI, x86_avx_bcast v)\n{\n\tif (MI->csh->detail) {\n\t\t// link with the previous operand\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count - 1].avx_bcast = v;\n\t}\n}\n\n#ifndef CAPSTONE_DIET\n// map instruction to its characteristics\ntypedef struct insn_op {\n\tuint64_t eflags;\t// how this instruction update EFLAGS\n\tuint8_t access[6];\n} insn_op;\n\nstatic insn_op insn_ops[] = {\n\t{\t/* NULL item  */\n\t\t0,\n\t\t{ 0 }\n\t},\n\n#ifdef CAPSTONE_X86_REDUCE\n#include \"X86MappingInsnOp_reduce.inc\"\n#else\n#include \"X86MappingInsnOp.inc\"\n#endif\n};\n\n// given internal insn id, return operand access info\nuint8_t *X86_get_op_access(cs_struct *h, unsigned int id, uint64_t *eflags)\n{\n\tint i = insn_find(insns, ARR_SIZE(insns), id, &h->insn_cache);\n\tif (i != 0) {\n\t\t*eflags = insn_ops[i].eflags;\n\t\treturn insn_ops[i].access;\n\t}\n\n\treturn NULL;\n}\n\nvoid X86_reg_access(const cs_insn *insn,\n\t\tcs_regs regs_read, uint8_t *regs_read_count,\n\t\tcs_regs regs_write, uint8_t *regs_write_count)\n{\n\tuint8_t i;\n\tuint8_t read_count, write_count;\n\tcs_x86 *x86 = &(insn->detail->x86);\n\n\tread_count = insn->detail->regs_read_count;\n\twrite_count = insn->detail->regs_write_count;\n\n\t// implicit registers\n\tmemcpy(regs_read, insn->detail->regs_read, read_count * sizeof(insn->detail->regs_read[0]));\n\tmemcpy(regs_write, insn->detail->regs_write, write_count * sizeof(insn->detail->regs_write[0]));\n\n\t// explicit registers\n\tfor (i = 0; i < x86->op_count; i++) {\n\t\tcs_x86_op *op = &(x86->operands[i]);\n\t\tswitch((int)op->type) {\n\t\t\tcase X86_OP_REG:\n\t\t\t\tif ((op->access & CS_AC_READ) && !arr_exist(regs_read, read_count, op->reg)) {\n\t\t\t\t\tregs_read[read_count] = op->reg;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\t\tif ((op->access & CS_AC_WRITE) && !arr_exist(regs_write, write_count, op->reg)) {\n\t\t\t\t\tregs_write[write_count] = op->reg;\n\t\t\t\t\twrite_count++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase X86_OP_MEM:\n\t\t\t\t// registers appeared in memory references always being read\n\t\t\t\tif ((op->mem.segment != X86_REG_INVALID)) {\n\t\t\t\t\tregs_read[read_count] = op->mem.segment;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\t\tif ((op->mem.base != X86_REG_INVALID) && !arr_exist(regs_read, read_count, op->mem.base)) {\n\t\t\t\t\tregs_read[read_count] = op->mem.base;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\t\tif ((op->mem.index != X86_REG_INVALID) && !arr_exist(regs_read, read_count, op->mem.index)) {\n\t\t\t\t\tregs_read[read_count] = op->mem.index;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t*regs_read_count = read_count;\n\t*regs_write_count = write_count;\n}\n#endif\n\n// map immediate size to instruction id\nstatic struct size_id {\n\tunsigned char size;\n\tunsigned short id;\n} x86_imm_size[] = {\n#include \"X86ImmSize.inc\"\n};\n\n// given the instruction name, return the size of its immediate operand (or 0)\nint X86_immediate_size(unsigned int id)\n{\n#if 0\n\t// linear searching\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(x86_imm_size); i++) {\n\t\tif (id == x86_imm_size[i].id) {\n\t\t\treturn x86_imm_size[i].size;\n\t\t}\n\t}\n#endif\n\n\t// binary searching since the IDs is sorted in order\n\tunsigned int left, right, m;\n\n\tleft = 0;\n\tright = ARR_SIZE(x86_imm_size) - 1;\n\n\twhile(left <= right) {\n\t\tm = (left + right) / 2;\n\t\tif (id == x86_imm_size[m].id)\n\t\t\treturn x86_imm_size[m].size;\n\n\t\tif (id < x86_imm_size[m].id)\n\t\t\tright = m - 1;\n\t\telse\n\t\t\tleft = m + 1;\n\t}\n\n\t// not found\n\treturn 0;\n}\n\n#endif\n"], "fixing_code": ["/* Capstone Disassembly Engine */\n/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2015 */\n\n#ifdef CAPSTONE_HAS_X86\n\n#include <string.h>\n#include <stdlib.h>\n\n#include \"X86Mapping.h\"\n#include \"X86DisassemblerDecoder.h\"\n\n#include \"../../utils.h\"\n\n\nuint64_t arch_masks[9] = {\n\t0, 0xff,\n\t0xffff,\n\t0,\n\t0xffffffff,\n\t0, 0, 0,\n\t0xffffffffffffffffLL\n};\n\nstatic x86_reg sib_base_map[] = {\n\tX86_REG_INVALID,\n#define ENTRY(x) X86_REG_##x,\n\tALL_SIB_BASES\n#undef ENTRY\n};\n\n// Fill-ins to make the compiler happy.  These constants are never actually\n//   assigned; they are just filler to make an automatically-generated switch\n//   statement work.\nenum {\n\tX86_REG_BX_SI = 500,\n\tX86_REG_BX_DI = 501,\n\tX86_REG_BP_SI = 502,\n\tX86_REG_BP_DI = 503,\n\tX86_REG_sib   = 504,\n\tX86_REG_sib64 = 505\n};\n\nstatic x86_reg sib_index_map[] = {\n\tX86_REG_INVALID,\n#define ENTRY(x) X86_REG_##x,\n\tALL_EA_BASES\n\tREGS_XMM\n\tREGS_YMM\n\tREGS_ZMM\n#undef ENTRY\n};\n\nstatic x86_reg segment_map[] = {\n\tX86_REG_INVALID,\n\tX86_REG_CS,\n\tX86_REG_SS,\n\tX86_REG_DS,\n\tX86_REG_ES,\n\tX86_REG_FS,\n\tX86_REG_GS,\n};\n\nx86_reg x86_map_sib_base(int r)\n{\n\treturn sib_base_map[r];\n}\n\nx86_reg x86_map_sib_index(int r)\n{\n\treturn sib_index_map[r];\n}\n\nx86_reg x86_map_segment(int r)\n{\n\treturn segment_map[r];\n}\n\n#ifndef CAPSTONE_DIET\nstatic name_map reg_name_maps[] = {\n\t{ X86_REG_INVALID, NULL },\n\n\t{ X86_REG_AH, \"ah\" },\n\t{ X86_REG_AL, \"al\" },\n\t{ X86_REG_AX, \"ax\" },\n\t{ X86_REG_BH, \"bh\" },\n\t{ X86_REG_BL, \"bl\" },\n\t{ X86_REG_BP, \"bp\" },\n\t{ X86_REG_BPL, \"bpl\" },\n\t{ X86_REG_BX, \"bx\" },\n\t{ X86_REG_CH, \"ch\" },\n\t{ X86_REG_CL, \"cl\" },\n\t{ X86_REG_CS, \"cs\" },\n\t{ X86_REG_CX, \"cx\" },\n\t{ X86_REG_DH, \"dh\" },\n\t{ X86_REG_DI, \"di\" },\n\t{ X86_REG_DIL, \"dil\" },\n\t{ X86_REG_DL, \"dl\" },\n\t{ X86_REG_DS, \"ds\" },\n\t{ X86_REG_DX, \"dx\" },\n\t{ X86_REG_EAX, \"eax\" },\n\t{ X86_REG_EBP, \"ebp\" },\n\t{ X86_REG_EBX, \"ebx\" },\n\t{ X86_REG_ECX, \"ecx\" },\n\t{ X86_REG_EDI, \"edi\" },\n\t{ X86_REG_EDX, \"edx\" },\n\t{ X86_REG_EFLAGS, \"flags\" },\n\t{ X86_REG_EIP, \"eip\" },\n\t{ X86_REG_EIZ, \"eiz\" },\n\t{ X86_REG_ES, \"es\" },\n\t{ X86_REG_ESI, \"esi\" },\n\t{ X86_REG_ESP, \"esp\" },\n\t{ X86_REG_FPSW, \"fpsw\" },\n\t{ X86_REG_FS, \"fs\" },\n\t{ X86_REG_GS, \"gs\" },\n\t{ X86_REG_IP, \"ip\" },\n\t{ X86_REG_RAX, \"rax\" },\n\t{ X86_REG_RBP, \"rbp\" },\n\t{ X86_REG_RBX, \"rbx\" },\n\t{ X86_REG_RCX, \"rcx\" },\n\t{ X86_REG_RDI, \"rdi\" },\n\t{ X86_REG_RDX, \"rdx\" },\n\t{ X86_REG_RIP, \"rip\" },\n\t{ X86_REG_RIZ, \"riz\" },\n\t{ X86_REG_RSI, \"rsi\" },\n\t{ X86_REG_RSP, \"rsp\" },\n\t{ X86_REG_SI, \"si\" },\n\t{ X86_REG_SIL, \"sil\" },\n\t{ X86_REG_SP, \"sp\" },\n\t{ X86_REG_SPL, \"spl\" },\n\t{ X86_REG_SS, \"ss\" },\n\t{ X86_REG_CR0, \"cr0\" },\n\t{ X86_REG_CR1, \"cr1\" },\n\t{ X86_REG_CR2, \"cr2\" },\n\t{ X86_REG_CR3, \"cr3\" },\n\t{ X86_REG_CR4, \"cr4\" },\n\t{ X86_REG_CR5, \"cr5\" },\n\t{ X86_REG_CR6, \"cr6\" },\n\t{ X86_REG_CR7, \"cr7\" },\n\t{ X86_REG_CR8, \"cr8\" },\n\t{ X86_REG_CR9, \"cr9\" },\n\t{ X86_REG_CR10, \"cr10\" },\n\t{ X86_REG_CR11, \"cr11\" },\n\t{ X86_REG_CR12, \"cr12\" },\n\t{ X86_REG_CR13, \"cr13\" },\n\t{ X86_REG_CR14, \"cr14\" },\n\t{ X86_REG_CR15, \"cr15\" },\n\t{ X86_REG_DR0, \"dr0\" },\n\t{ X86_REG_DR1, \"dr1\" },\n\t{ X86_REG_DR2, \"dr2\" },\n\t{ X86_REG_DR3, \"dr3\" },\n\t{ X86_REG_DR4, \"dr4\" },\n\t{ X86_REG_DR5, \"dr5\" },\n\t{ X86_REG_DR6, \"dr6\" },\n\t{ X86_REG_DR7, \"dr7\" },\n\t{ X86_REG_DR8, \"dr8\" },\n\t{ X86_REG_DR9, \"dr9\" },\n\t{ X86_REG_DR10, \"dr10\" },\n\t{ X86_REG_DR11, \"dr11\" },\n\t{ X86_REG_DR12, \"dr12\" },\n\t{ X86_REG_DR13, \"dr13\" },\n\t{ X86_REG_DR14, \"dr14\" },\n\t{ X86_REG_DR15, \"dr15\" },\n\t{ X86_REG_FP0, \"fp0\" },\n\t{ X86_REG_FP1, \"fp1\" },\n\t{ X86_REG_FP2, \"fp2\" },\n\t{ X86_REG_FP3, \"fp3\" },\n\t{ X86_REG_FP4, \"fp4\" },\n\t{ X86_REG_FP5, \"fp5\" },\n\t{ X86_REG_FP6, \"fp6\" },\n\t{ X86_REG_FP7, \"fp7\" },\n\t{ X86_REG_K0, \"k0\" },\n\t{ X86_REG_K1, \"k1\" },\n\t{ X86_REG_K2, \"k2\" },\n\t{ X86_REG_K3, \"k3\" },\n\t{ X86_REG_K4, \"k4\" },\n\t{ X86_REG_K5, \"k5\" },\n\t{ X86_REG_K6, \"k6\" },\n\t{ X86_REG_K7, \"k7\" },\n\t{ X86_REG_MM0, \"mm0\" },\n\t{ X86_REG_MM1, \"mm1\" },\n\t{ X86_REG_MM2, \"mm2\" },\n\t{ X86_REG_MM3, \"mm3\" },\n\t{ X86_REG_MM4, \"mm4\" },\n\t{ X86_REG_MM5, \"mm5\" },\n\t{ X86_REG_MM6, \"mm6\" },\n\t{ X86_REG_MM7, \"mm7\" },\n\t{ X86_REG_R8, \"r8\" },\n\t{ X86_REG_R9, \"r9\" },\n\t{ X86_REG_R10, \"r10\" },\n\t{ X86_REG_R11, \"r11\" },\n\t{ X86_REG_R12, \"r12\" },\n\t{ X86_REG_R13, \"r13\" },\n\t{ X86_REG_R14, \"r14\" },\n\t{ X86_REG_R15, \"r15\" },\n\t{ X86_REG_ST0, \"st0\" },\n\t{ X86_REG_ST1, \"st1\" },\n\t{ X86_REG_ST2, \"st2\" },\n\t{ X86_REG_ST3, \"st3\" },\n\t{ X86_REG_ST4, \"st4\" },\n\t{ X86_REG_ST5, \"st5\" },\n\t{ X86_REG_ST6, \"st6\" },\n\t{ X86_REG_ST7, \"st7\" },\n\t{ X86_REG_XMM0, \"xmm0\" },\n\t{ X86_REG_XMM1, \"xmm1\" },\n\t{ X86_REG_XMM2, \"xmm2\" },\n\t{ X86_REG_XMM3, \"xmm3\" },\n\t{ X86_REG_XMM4, \"xmm4\" },\n\t{ X86_REG_XMM5, \"xmm5\" },\n\t{ X86_REG_XMM6, \"xmm6\" },\n\t{ X86_REG_XMM7, \"xmm7\" },\n\t{ X86_REG_XMM8, \"xmm8\" },\n\t{ X86_REG_XMM9, \"xmm9\" },\n\t{ X86_REG_XMM10, \"xmm10\" },\n\t{ X86_REG_XMM11, \"xmm11\" },\n\t{ X86_REG_XMM12, \"xmm12\" },\n\t{ X86_REG_XMM13, \"xmm13\" },\n\t{ X86_REG_XMM14, \"xmm14\" },\n\t{ X86_REG_XMM15, \"xmm15\" },\n\t{ X86_REG_XMM16, \"xmm16\" },\n\t{ X86_REG_XMM17, \"xmm17\" },\n\t{ X86_REG_XMM18, \"xmm18\" },\n\t{ X86_REG_XMM19, \"xmm19\" },\n\t{ X86_REG_XMM20, \"xmm20\" },\n\t{ X86_REG_XMM21, \"xmm21\" },\n\t{ X86_REG_XMM22, \"xmm22\" },\n\t{ X86_REG_XMM23, \"xmm23\" },\n\t{ X86_REG_XMM24, \"xmm24\" },\n\t{ X86_REG_XMM25, \"xmm25\" },\n\t{ X86_REG_XMM26, \"xmm26\" },\n\t{ X86_REG_XMM27, \"xmm27\" },\n\t{ X86_REG_XMM28, \"xmm28\" },\n\t{ X86_REG_XMM29, \"xmm29\" },\n\t{ X86_REG_XMM30, \"xmm30\" },\n\t{ X86_REG_XMM31, \"xmm31\" },\n\t{ X86_REG_YMM0, \"ymm0\" },\n\t{ X86_REG_YMM1, \"ymm1\" },\n\t{ X86_REG_YMM2, \"ymm2\" },\n\t{ X86_REG_YMM3, \"ymm3\" },\n\t{ X86_REG_YMM4, \"ymm4\" },\n\t{ X86_REG_YMM5, \"ymm5\" },\n\t{ X86_REG_YMM6, \"ymm6\" },\n\t{ X86_REG_YMM7, \"ymm7\" },\n\t{ X86_REG_YMM8, \"ymm8\" },\n\t{ X86_REG_YMM9, \"ymm9\" },\n\t{ X86_REG_YMM10, \"ymm10\" },\n\t{ X86_REG_YMM11, \"ymm11\" },\n\t{ X86_REG_YMM12, \"ymm12\" },\n\t{ X86_REG_YMM13, \"ymm13\" },\n\t{ X86_REG_YMM14, \"ymm14\" },\n\t{ X86_REG_YMM15, \"ymm15\" },\n\t{ X86_REG_YMM16, \"ymm16\" },\n\t{ X86_REG_YMM17, \"ymm17\" },\n\t{ X86_REG_YMM18, \"ymm18\" },\n\t{ X86_REG_YMM19, \"ymm19\" },\n\t{ X86_REG_YMM20, \"ymm20\" },\n\t{ X86_REG_YMM21, \"ymm21\" },\n\t{ X86_REG_YMM22, \"ymm22\" },\n\t{ X86_REG_YMM23, \"ymm23\" },\n\t{ X86_REG_YMM24, \"ymm24\" },\n\t{ X86_REG_YMM25, \"ymm25\" },\n\t{ X86_REG_YMM26, \"ymm26\" },\n\t{ X86_REG_YMM27, \"ymm27\" },\n\t{ X86_REG_YMM28, \"ymm28\" },\n\t{ X86_REG_YMM29, \"ymm29\" },\n\t{ X86_REG_YMM30, \"ymm30\" },\n\t{ X86_REG_YMM31, \"ymm31\" },\n\t{ X86_REG_ZMM0, \"zmm0\" },\n\t{ X86_REG_ZMM1, \"zmm1\" },\n\t{ X86_REG_ZMM2, \"zmm2\" },\n\t{ X86_REG_ZMM3, \"zmm3\" },\n\t{ X86_REG_ZMM4, \"zmm4\" },\n\t{ X86_REG_ZMM5, \"zmm5\" },\n\t{ X86_REG_ZMM6, \"zmm6\" },\n\t{ X86_REG_ZMM7, \"zmm7\" },\n\t{ X86_REG_ZMM8, \"zmm8\" },\n\t{ X86_REG_ZMM9, \"zmm9\" },\n\t{ X86_REG_ZMM10, \"zmm10\" },\n\t{ X86_REG_ZMM11, \"zmm11\" },\n\t{ X86_REG_ZMM12, \"zmm12\" },\n\t{ X86_REG_ZMM13, \"zmm13\" },\n\t{ X86_REG_ZMM14, \"zmm14\" },\n\t{ X86_REG_ZMM15, \"zmm15\" },\n\t{ X86_REG_ZMM16, \"zmm16\" },\n\t{ X86_REG_ZMM17, \"zmm17\" },\n\t{ X86_REG_ZMM18, \"zmm18\" },\n\t{ X86_REG_ZMM19, \"zmm19\" },\n\t{ X86_REG_ZMM20, \"zmm20\" },\n\t{ X86_REG_ZMM21, \"zmm21\" },\n\t{ X86_REG_ZMM22, \"zmm22\" },\n\t{ X86_REG_ZMM23, \"zmm23\" },\n\t{ X86_REG_ZMM24, \"zmm24\" },\n\t{ X86_REG_ZMM25, \"zmm25\" },\n\t{ X86_REG_ZMM26, \"zmm26\" },\n\t{ X86_REG_ZMM27, \"zmm27\" },\n\t{ X86_REG_ZMM28, \"zmm28\" },\n\t{ X86_REG_ZMM29, \"zmm29\" },\n\t{ X86_REG_ZMM30, \"zmm30\" },\n\t{ X86_REG_ZMM31, \"zmm31\" },\n\t{ X86_REG_R8B, \"r8b\" },\n\t{ X86_REG_R9B, \"r9b\" },\n\t{ X86_REG_R10B, \"r10b\" },\n\t{ X86_REG_R11B, \"r11b\" },\n\t{ X86_REG_R12B, \"r12b\" },\n\t{ X86_REG_R13B, \"r13b\" },\n\t{ X86_REG_R14B, \"r14b\" },\n\t{ X86_REG_R15B, \"r15b\" },\n\t{ X86_REG_R8D, \"r8d\" },\n\t{ X86_REG_R9D, \"r9d\" },\n\t{ X86_REG_R10D, \"r10d\" },\n\t{ X86_REG_R11D, \"r11d\" },\n\t{ X86_REG_R12D, \"r12d\" },\n\t{ X86_REG_R13D, \"r13d\" },\n\t{ X86_REG_R14D, \"r14d\" },\n\t{ X86_REG_R15D, \"r15d\" },\n\t{ X86_REG_R8W, \"r8w\" },\n\t{ X86_REG_R9W, \"r9w\" },\n\t{ X86_REG_R10W, \"r10w\" },\n\t{ X86_REG_R11W, \"r11w\" },\n\t{ X86_REG_R12W, \"r12w\" },\n\t{ X86_REG_R13W, \"r13w\" },\n\t{ X86_REG_R14W, \"r14w\" },\n\t{ X86_REG_R15W, \"r15w\" },\n};\n#endif\n\n// register size in non-64bit mode\nuint8_t regsize_map_32 [] = {\n\t0,\t// \t{ X86_REG_INVALID, NULL },\n\t1,\t// { X86_REG_AH, \"ah\" },\n\t1,\t// { X86_REG_AL, \"al\" },\n\t2,\t// { X86_REG_AX, \"ax\" },\n\t1,\t// { X86_REG_BH, \"bh\" },\n\t1,\t// { X86_REG_BL, \"bl\" },\n\t2,\t// { X86_REG_BP, \"bp\" },\n\t1,\t// { X86_REG_BPL, \"bpl\" },\n\t2,\t// { X86_REG_BX, \"bx\" },\n\t1,\t// { X86_REG_CH, \"ch\" },\n\t1,\t// { X86_REG_CL, \"cl\" },\n\t2,\t// { X86_REG_CS, \"cs\" },\n\t2,\t// { X86_REG_CX, \"cx\" },\n\t1,\t// { X86_REG_DH, \"dh\" },\n\t2,\t// { X86_REG_DI, \"di\" },\n\t1,\t// { X86_REG_DIL, \"dil\" },\n\t1,\t// { X86_REG_DL, \"dl\" },\n\t2,\t// { X86_REG_DS, \"ds\" },\n\t2,\t// { X86_REG_DX, \"dx\" },\n\t4,\t// { X86_REG_EAX, \"eax\" },\n\t4,\t// { X86_REG_EBP, \"ebp\" },\n\t4,\t// { X86_REG_EBX, \"ebx\" },\n\t4,\t// { X86_REG_ECX, \"ecx\" },\n\t4,\t// { X86_REG_EDI, \"edi\" },\n\t4,\t// { X86_REG_EDX, \"edx\" },\n\t4,\t// { X86_REG_EFLAGS, \"flags\" },\n\t4,\t// { X86_REG_EIP, \"eip\" },\n\t4,\t// { X86_REG_EIZ, \"eiz\" },\n\t2,\t// { X86_REG_ES, \"es\" },\n\t4,\t// { X86_REG_ESI, \"esi\" },\n\t4,\t// { X86_REG_ESP, \"esp\" },\n\t10,\t// { X86_REG_FPSW, \"fpsw\" },\n\t2,\t// { X86_REG_FS, \"fs\" },\n\t2,\t// { X86_REG_GS, \"gs\" },\n\t2,\t// { X86_REG_IP, \"ip\" },\n\t8,\t// { X86_REG_RAX, \"rax\" },\n\t8,\t// { X86_REG_RBP, \"rbp\" },\n\t8,\t// { X86_REG_RBX, \"rbx\" },\n\t8,\t// { X86_REG_RCX, \"rcx\" },\n\t8,\t// { X86_REG_RDI, \"rdi\" },\n\t8,\t// { X86_REG_RDX, \"rdx\" },\n\t8,\t// { X86_REG_RIP, \"rip\" },\n\t8,\t// { X86_REG_RIZ, \"riz\" },\n\t8,\t// { X86_REG_RSI, \"rsi\" },\n\t8,\t// { X86_REG_RSP, \"rsp\" },\n\t2,\t// { X86_REG_SI, \"si\" },\n\t1,\t// { X86_REG_SIL, \"sil\" },\n\t2,\t// { X86_REG_SP, \"sp\" },\n\t1,\t// { X86_REG_SPL, \"spl\" },\n\t2,\t// { X86_REG_SS, \"ss\" },\n\t4,\t// { X86_REG_CR0, \"cr0\" },\n\t4,\t// { X86_REG_CR1, \"cr1\" },\n\t4,\t// { X86_REG_CR2, \"cr2\" },\n\t4,\t// { X86_REG_CR3, \"cr3\" },\n\t4,\t// { X86_REG_CR4, \"cr4\" },\n\t8,\t// { X86_REG_CR5, \"cr5\" },\n\t8,\t// { X86_REG_CR6, \"cr6\" },\n\t8,\t// { X86_REG_CR7, \"cr7\" },\n\t8,\t// { X86_REG_CR8, \"cr8\" },\n\t8,\t// { X86_REG_CR9, \"cr9\" },\n\t8,\t// { X86_REG_CR10, \"cr10\" },\n\t8,\t// { X86_REG_CR11, \"cr11\" },\n\t8,\t// { X86_REG_CR12, \"cr12\" },\n\t8,\t// { X86_REG_CR13, \"cr13\" },\n\t8,\t// { X86_REG_CR14, \"cr14\" },\n\t8,\t// { X86_REG_CR15, \"cr15\" },\n\t4,\t// { X86_REG_DR0, \"dr0\" },\n\t4,\t// { X86_REG_DR1, \"dr1\" },\n\t4,\t// { X86_REG_DR2, \"dr2\" },\n\t4,\t// { X86_REG_DR3, \"dr3\" },\n\t4,\t// { X86_REG_DR4, \"dr4\" },\n\t4,\t// { X86_REG_DR5, \"dr5\" },\n\t4,\t// { X86_REG_DR6, \"dr6\" },\n\t4,\t// { X86_REG_DR7, \"dr7\" },\n\t4,\t// { X86_REG_DR8, \"dr8\" },\n\t4,\t// { X86_REG_DR9, \"dr9\" },\n\t4,\t// { X86_REG_DR10, \"dr10\" },\n\t4,\t// { X86_REG_DR11, \"dr11\" },\n\t4,\t// { X86_REG_DR12, \"dr12\" },\n\t4,\t// { X86_REG_DR13, \"dr13\" },\n\t4,\t// { X86_REG_DR14, \"dr14\" },\n\t4,\t// { X86_REG_DR15, \"dr15\" },\n\t10,\t// { X86_REG_FP0, \"fp0\" },\n\t10,\t// { X86_REG_FP1, \"fp1\" },\n\t10,\t// { X86_REG_FP2, \"fp2\" },\n\t10,\t// { X86_REG_FP3, \"fp3\" },\n\t10,\t// { X86_REG_FP4, \"fp4\" },\n\t10,\t// { X86_REG_FP5, \"fp5\" },\n\t10,\t// { X86_REG_FP6, \"fp6\" },\n\t10,\t// { X86_REG_FP7, \"fp7\" },\n\t2,\t// { X86_REG_K0, \"k0\" },\n\t2,\t// { X86_REG_K1, \"k1\" },\n\t2,\t// { X86_REG_K2, \"k2\" },\n\t2,\t// { X86_REG_K3, \"k3\" },\n\t2,\t// { X86_REG_K4, \"k4\" },\n\t2,\t// { X86_REG_K5, \"k5\" },\n\t2,\t// { X86_REG_K6, \"k6\" },\n\t2,\t// { X86_REG_K7, \"k7\" },\n\t8,\t// { X86_REG_MM0, \"mm0\" },\n\t8,\t// { X86_REG_MM1, \"mm1\" },\n\t8,\t// { X86_REG_MM2, \"mm2\" },\n\t8,\t// { X86_REG_MM3, \"mm3\" },\n\t8,\t// { X86_REG_MM4, \"mm4\" },\n\t8,\t// { X86_REG_MM5, \"mm5\" },\n\t8,\t// { X86_REG_MM6, \"mm6\" },\n\t8,\t// { X86_REG_MM7, \"mm7\" },\n\t8,\t// { X86_REG_R8, \"r8\" },\n\t8,\t// { X86_REG_R9, \"r9\" },\n\t8,\t// { X86_REG_R10, \"r10\" },\n\t8,\t// { X86_REG_R11, \"r11\" },\n\t8,\t// { X86_REG_R12, \"r12\" },\n\t8,\t// { X86_REG_R13, \"r13\" },\n\t8,\t// { X86_REG_R14, \"r14\" },\n\t8,\t// { X86_REG_R15, \"r15\" },\n\t10,\t// { X86_REG_ST0, \"st0\" },\n\t10,\t// { X86_REG_ST1, \"st1\" },\n\t10,\t// { X86_REG_ST2, \"st2\" },\n\t10,\t// { X86_REG_ST3, \"st3\" },\n\t10,\t// { X86_REG_ST4, \"st4\" },\n\t10,\t// { X86_REG_ST5, \"st5\" },\n\t10,\t// { X86_REG_ST6, \"st6\" },\n\t10,\t// { X86_REG_ST7, \"st7\" },\n\t16,\t// { X86_REG_XMM0, \"xmm0\" },\n\t16,\t// { X86_REG_XMM1, \"xmm1\" },\n\t16,\t// { X86_REG_XMM2, \"xmm2\" },\n\t16,\t// { X86_REG_XMM3, \"xmm3\" },\n\t16,\t// { X86_REG_XMM4, \"xmm4\" },\n\t16,\t// { X86_REG_XMM5, \"xmm5\" },\n\t16,\t// { X86_REG_XMM6, \"xmm6\" },\n\t16,\t// { X86_REG_XMM7, \"xmm7\" },\n\t16,\t// { X86_REG_XMM8, \"xmm8\" },\n\t16,\t// { X86_REG_XMM9, \"xmm9\" },\n\t16,\t// { X86_REG_XMM10, \"xmm10\" },\n\t16,\t// { X86_REG_XMM11, \"xmm11\" },\n\t16,\t// { X86_REG_XMM12, \"xmm12\" },\n\t16,\t// { X86_REG_XMM13, \"xmm13\" },\n\t16,\t// { X86_REG_XMM14, \"xmm14\" },\n\t16,\t// { X86_REG_XMM15, \"xmm15\" },\n\t16,\t// { X86_REG_XMM16, \"xmm16\" },\n\t16,\t// { X86_REG_XMM17, \"xmm17\" },\n\t16,\t// { X86_REG_XMM18, \"xmm18\" },\n\t16,\t// { X86_REG_XMM19, \"xmm19\" },\n\t16,\t// { X86_REG_XMM20, \"xmm20\" },\n\t16,\t// { X86_REG_XMM21, \"xmm21\" },\n\t16,\t// { X86_REG_XMM22, \"xmm22\" },\n\t16,\t// { X86_REG_XMM23, \"xmm23\" },\n\t16,\t// { X86_REG_XMM24, \"xmm24\" },\n\t16,\t// { X86_REG_XMM25, \"xmm25\" },\n\t16,\t// { X86_REG_XMM26, \"xmm26\" },\n\t16,\t// { X86_REG_XMM27, \"xmm27\" },\n\t16,\t// { X86_REG_XMM28, \"xmm28\" },\n\t16,\t// { X86_REG_XMM29, \"xmm29\" },\n\t16,\t// { X86_REG_XMM30, \"xmm30\" },\n\t16,\t// { X86_REG_XMM31, \"xmm31\" },\n\t32,\t// { X86_REG_YMM0, \"ymm0\" },\n\t32,\t// { X86_REG_YMM1, \"ymm1\" },\n\t32,\t// { X86_REG_YMM2, \"ymm2\" },\n\t32,\t// { X86_REG_YMM3, \"ymm3\" },\n\t32,\t// { X86_REG_YMM4, \"ymm4\" },\n\t32,\t// { X86_REG_YMM5, \"ymm5\" },\n\t32,\t// { X86_REG_YMM6, \"ymm6\" },\n\t32,\t// { X86_REG_YMM7, \"ymm7\" },\n\t32,\t// { X86_REG_YMM8, \"ymm8\" },\n\t32,\t// { X86_REG_YMM9, \"ymm9\" },\n\t32,\t// { X86_REG_YMM10, \"ymm10\" },\n\t32,\t// { X86_REG_YMM11, \"ymm11\" },\n\t32,\t// { X86_REG_YMM12, \"ymm12\" },\n\t32,\t// { X86_REG_YMM13, \"ymm13\" },\n\t32,\t// { X86_REG_YMM14, \"ymm14\" },\n\t32,\t// { X86_REG_YMM15, \"ymm15\" },\n\t32,\t// { X86_REG_YMM16, \"ymm16\" },\n\t32,\t// { X86_REG_YMM17, \"ymm17\" },\n\t32,\t// { X86_REG_YMM18, \"ymm18\" },\n\t32,\t// { X86_REG_YMM19, \"ymm19\" },\n\t32,\t// { X86_REG_YMM20, \"ymm20\" },\n\t32,\t// { X86_REG_YMM21, \"ymm21\" },\n\t32,\t// { X86_REG_YMM22, \"ymm22\" },\n\t32,\t// { X86_REG_YMM23, \"ymm23\" },\n\t32,\t// { X86_REG_YMM24, \"ymm24\" },\n\t32,\t// { X86_REG_YMM25, \"ymm25\" },\n\t32,\t// { X86_REG_YMM26, \"ymm26\" },\n\t32,\t// { X86_REG_YMM27, \"ymm27\" },\n\t32,\t// { X86_REG_YMM28, \"ymm28\" },\n\t32,\t// { X86_REG_YMM29, \"ymm29\" },\n\t32,\t// { X86_REG_YMM30, \"ymm30\" },\n\t32,\t// { X86_REG_YMM31, \"ymm31\" },\n\t64,\t// { X86_REG_ZMM0, \"zmm0\" },\n\t64,\t// { X86_REG_ZMM1, \"zmm1\" },\n\t64,\t// { X86_REG_ZMM2, \"zmm2\" },\n\t64,\t// { X86_REG_ZMM3, \"zmm3\" },\n\t64,\t// { X86_REG_ZMM4, \"zmm4\" },\n\t64,\t// { X86_REG_ZMM5, \"zmm5\" },\n\t64,\t// { X86_REG_ZMM6, \"zmm6\" },\n\t64,\t// { X86_REG_ZMM7, \"zmm7\" },\n\t64,\t// { X86_REG_ZMM8, \"zmm8\" },\n\t64,\t// { X86_REG_ZMM9, \"zmm9\" },\n\t64,\t// { X86_REG_ZMM10, \"zmm10\" },\n\t64,\t// { X86_REG_ZMM11, \"zmm11\" },\n\t64,\t// { X86_REG_ZMM12, \"zmm12\" },\n\t64,\t// { X86_REG_ZMM13, \"zmm13\" },\n\t64,\t// { X86_REG_ZMM14, \"zmm14\" },\n\t64,\t// { X86_REG_ZMM15, \"zmm15\" },\n\t64,\t// { X86_REG_ZMM16, \"zmm16\" },\n\t64,\t// { X86_REG_ZMM17, \"zmm17\" },\n\t64,\t// { X86_REG_ZMM18, \"zmm18\" },\n\t64,\t// { X86_REG_ZMM19, \"zmm19\" },\n\t64,\t// { X86_REG_ZMM20, \"zmm20\" },\n\t64,\t// { X86_REG_ZMM21, \"zmm21\" },\n\t64,\t// { X86_REG_ZMM22, \"zmm22\" },\n\t64,\t// { X86_REG_ZMM23, \"zmm23\" },\n\t64,\t// { X86_REG_ZMM24, \"zmm24\" },\n\t64,\t// { X86_REG_ZMM25, \"zmm25\" },\n\t64,\t// { X86_REG_ZMM26, \"zmm26\" },\n\t64,\t// { X86_REG_ZMM27, \"zmm27\" },\n\t64,\t// { X86_REG_ZMM28, \"zmm28\" },\n\t64,\t// { X86_REG_ZMM29, \"zmm29\" },\n\t64,\t// { X86_REG_ZMM30, \"zmm30\" },\n\t64,\t// { X86_REG_ZMM31, \"zmm31\" },\n\t1,\t// { X86_REG_R8B, \"r8b\" },\n\t1,\t// { X86_REG_R9B, \"r9b\" },\n\t1,\t// { X86_REG_R10B, \"r10b\" },\n\t1,\t// { X86_REG_R11B, \"r11b\" },\n\t1,\t// { X86_REG_R12B, \"r12b\" },\n\t1,\t// { X86_REG_R13B, \"r13b\" },\n\t1,\t// { X86_REG_R14B, \"r14b\" },\n\t1,\t// { X86_REG_R15B, \"r15b\" },\n\t4,\t// { X86_REG_R8D, \"r8d\" },\n\t4,\t// { X86_REG_R9D, \"r9d\" },\n\t4,\t// { X86_REG_R10D, \"r10d\" },\n\t4,\t// { X86_REG_R11D, \"r11d\" },\n\t4,\t// { X86_REG_R12D, \"r12d\" },\n\t4,\t// { X86_REG_R13D, \"r13d\" },\n\t4,\t// { X86_REG_R14D, \"r14d\" },\n\t4,\t// { X86_REG_R15D, \"r15d\" },\n\t2,\t// { X86_REG_R8W, \"r8w\" },\n\t2,\t// { X86_REG_R9W, \"r9w\" },\n\t2,\t// { X86_REG_R10W, \"r10w\" },\n\t2,\t// { X86_REG_R11W, \"r11w\" },\n\t2,\t// { X86_REG_R12W, \"r12w\" },\n\t2,\t// { X86_REG_R13W, \"r13w\" },\n\t2,\t// { X86_REG_R14W, \"r14w\" },\n\t2,\t// { X86_REG_R15W, \"r15w\" },\n};\n\n// register size in 64bit mode\nuint8_t regsize_map_64 [] = {\n\t0,\t// \t{ X86_REG_INVALID, NULL },\n\t1,\t// { X86_REG_AH, \"ah\" },\n\t1,\t// { X86_REG_AL, \"al\" },\n\t2,\t// { X86_REG_AX, \"ax\" },\n\t1,\t// { X86_REG_BH, \"bh\" },\n\t1,\t// { X86_REG_BL, \"bl\" },\n\t2,\t// { X86_REG_BP, \"bp\" },\n\t1,\t// { X86_REG_BPL, \"bpl\" },\n\t2,\t// { X86_REG_BX, \"bx\" },\n\t1,\t// { X86_REG_CH, \"ch\" },\n\t1,\t// { X86_REG_CL, \"cl\" },\n\t2,\t// { X86_REG_CS, \"cs\" },\n\t2,\t// { X86_REG_CX, \"cx\" },\n\t1,\t// { X86_REG_DH, \"dh\" },\n\t2,\t// { X86_REG_DI, \"di\" },\n\t1,\t// { X86_REG_DIL, \"dil\" },\n\t1,\t// { X86_REG_DL, \"dl\" },\n\t2,\t// { X86_REG_DS, \"ds\" },\n\t2,\t// { X86_REG_DX, \"dx\" },\n\t4,\t// { X86_REG_EAX, \"eax\" },\n\t4,\t// { X86_REG_EBP, \"ebp\" },\n\t4,\t// { X86_REG_EBX, \"ebx\" },\n\t4,\t// { X86_REG_ECX, \"ecx\" },\n\t4,\t// { X86_REG_EDI, \"edi\" },\n\t4,\t// { X86_REG_EDX, \"edx\" },\n\t8,\t// { X86_REG_EFLAGS, \"flags\" },\n\t4,\t// { X86_REG_EIP, \"eip\" },\n\t4,\t// { X86_REG_EIZ, \"eiz\" },\n\t2,\t// { X86_REG_ES, \"es\" },\n\t4,\t// { X86_REG_ESI, \"esi\" },\n\t4,\t// { X86_REG_ESP, \"esp\" },\n\t10,\t// { X86_REG_FPSW, \"fpsw\" },\n\t2,\t// { X86_REG_FS, \"fs\" },\n\t2,\t// { X86_REG_GS, \"gs\" },\n\t2,\t// { X86_REG_IP, \"ip\" },\n\t8,\t// { X86_REG_RAX, \"rax\" },\n\t8,\t// { X86_REG_RBP, \"rbp\" },\n\t8,\t// { X86_REG_RBX, \"rbx\" },\n\t8,\t// { X86_REG_RCX, \"rcx\" },\n\t8,\t// { X86_REG_RDI, \"rdi\" },\n\t8,\t// { X86_REG_RDX, \"rdx\" },\n\t8,\t// { X86_REG_RIP, \"rip\" },\n\t8,\t// { X86_REG_RIZ, \"riz\" },\n\t8,\t// { X86_REG_RSI, \"rsi\" },\n\t8,\t// { X86_REG_RSP, \"rsp\" },\n\t2,\t// { X86_REG_SI, \"si\" },\n\t1,\t// { X86_REG_SIL, \"sil\" },\n\t2,\t// { X86_REG_SP, \"sp\" },\n\t1,\t// { X86_REG_SPL, \"spl\" },\n\t2,\t// { X86_REG_SS, \"ss\" },\n\t8,\t// { X86_REG_CR0, \"cr0\" },\n\t8,\t// { X86_REG_CR1, \"cr1\" },\n\t8,\t// { X86_REG_CR2, \"cr2\" },\n\t8,\t// { X86_REG_CR3, \"cr3\" },\n\t8,\t// { X86_REG_CR4, \"cr4\" },\n\t8,\t// { X86_REG_CR5, \"cr5\" },\n\t8,\t// { X86_REG_CR6, \"cr6\" },\n\t8,\t// { X86_REG_CR7, \"cr7\" },\n\t8,\t// { X86_REG_CR8, \"cr8\" },\n\t8,\t// { X86_REG_CR9, \"cr9\" },\n\t8,\t// { X86_REG_CR10, \"cr10\" },\n\t8,\t// { X86_REG_CR11, \"cr11\" },\n\t8,\t// { X86_REG_CR12, \"cr12\" },\n\t8,\t// { X86_REG_CR13, \"cr13\" },\n\t8,\t// { X86_REG_CR14, \"cr14\" },\n\t8,\t// { X86_REG_CR15, \"cr15\" },\n\t8,\t// { X86_REG_DR0, \"dr0\" },\n\t8,\t// { X86_REG_DR1, \"dr1\" },\n\t8,\t// { X86_REG_DR2, \"dr2\" },\n\t8,\t// { X86_REG_DR3, \"dr3\" },\n\t8,\t// { X86_REG_DR4, \"dr4\" },\n\t8,\t// { X86_REG_DR5, \"dr5\" },\n\t8,\t// { X86_REG_DR6, \"dr6\" },\n\t8,\t// { X86_REG_DR7, \"dr7\" },\n\t8,\t// { X86_REG_DR8, \"dr8\" },\n\t8,\t// { X86_REG_DR9, \"dr9\" },\n\t8,\t// { X86_REG_DR10, \"dr10\" },\n\t8,\t// { X86_REG_DR11, \"dr11\" },\n\t8,\t// { X86_REG_DR12, \"dr12\" },\n\t8,\t// { X86_REG_DR13, \"dr13\" },\n\t8,\t// { X86_REG_DR14, \"dr14\" },\n\t8,\t// { X86_REG_DR15, \"dr15\" },\n\t10,\t// { X86_REG_FP0, \"fp0\" },\n\t10,\t// { X86_REG_FP1, \"fp1\" },\n\t10,\t// { X86_REG_FP2, \"fp2\" },\n\t10,\t// { X86_REG_FP3, \"fp3\" },\n\t10,\t// { X86_REG_FP4, \"fp4\" },\n\t10,\t// { X86_REG_FP5, \"fp5\" },\n\t10,\t// { X86_REG_FP6, \"fp6\" },\n\t10,\t// { X86_REG_FP7, \"fp7\" },\n\t2,\t// { X86_REG_K0, \"k0\" },\n\t2,\t// { X86_REG_K1, \"k1\" },\n\t2,\t// { X86_REG_K2, \"k2\" },\n\t2,\t// { X86_REG_K3, \"k3\" },\n\t2,\t// { X86_REG_K4, \"k4\" },\n\t2,\t// { X86_REG_K5, \"k5\" },\n\t2,\t// { X86_REG_K6, \"k6\" },\n\t2,\t// { X86_REG_K7, \"k7\" },\n\t8,\t// { X86_REG_MM0, \"mm0\" },\n\t8,\t// { X86_REG_MM1, \"mm1\" },\n\t8,\t// { X86_REG_MM2, \"mm2\" },\n\t8,\t// { X86_REG_MM3, \"mm3\" },\n\t8,\t// { X86_REG_MM4, \"mm4\" },\n\t8,\t// { X86_REG_MM5, \"mm5\" },\n\t8,\t// { X86_REG_MM6, \"mm6\" },\n\t8,\t// { X86_REG_MM7, \"mm7\" },\n\t8,\t// { X86_REG_R8, \"r8\" },\n\t8,\t// { X86_REG_R9, \"r9\" },\n\t8,\t// { X86_REG_R10, \"r10\" },\n\t8,\t// { X86_REG_R11, \"r11\" },\n\t8,\t// { X86_REG_R12, \"r12\" },\n\t8,\t// { X86_REG_R13, \"r13\" },\n\t8,\t// { X86_REG_R14, \"r14\" },\n\t8,\t// { X86_REG_R15, \"r15\" },\n\t10,\t// { X86_REG_ST0, \"st0\" },\n\t10,\t// { X86_REG_ST1, \"st1\" },\n\t10,\t// { X86_REG_ST2, \"st2\" },\n\t10,\t// { X86_REG_ST3, \"st3\" },\n\t10,\t// { X86_REG_ST4, \"st4\" },\n\t10,\t// { X86_REG_ST5, \"st5\" },\n\t10,\t// { X86_REG_ST6, \"st6\" },\n\t10,\t// { X86_REG_ST7, \"st7\" },\n\t16,\t// { X86_REG_XMM0, \"xmm0\" },\n\t16,\t// { X86_REG_XMM1, \"xmm1\" },\n\t16,\t// { X86_REG_XMM2, \"xmm2\" },\n\t16,\t// { X86_REG_XMM3, \"xmm3\" },\n\t16,\t// { X86_REG_XMM4, \"xmm4\" },\n\t16,\t// { X86_REG_XMM5, \"xmm5\" },\n\t16,\t// { X86_REG_XMM6, \"xmm6\" },\n\t16,\t// { X86_REG_XMM7, \"xmm7\" },\n\t16,\t// { X86_REG_XMM8, \"xmm8\" },\n\t16,\t// { X86_REG_XMM9, \"xmm9\" },\n\t16,\t// { X86_REG_XMM10, \"xmm10\" },\n\t16,\t// { X86_REG_XMM11, \"xmm11\" },\n\t16,\t// { X86_REG_XMM12, \"xmm12\" },\n\t16,\t// { X86_REG_XMM13, \"xmm13\" },\n\t16,\t// { X86_REG_XMM14, \"xmm14\" },\n\t16,\t// { X86_REG_XMM15, \"xmm15\" },\n\t16,\t// { X86_REG_XMM16, \"xmm16\" },\n\t16,\t// { X86_REG_XMM17, \"xmm17\" },\n\t16,\t// { X86_REG_XMM18, \"xmm18\" },\n\t16,\t// { X86_REG_XMM19, \"xmm19\" },\n\t16,\t// { X86_REG_XMM20, \"xmm20\" },\n\t16,\t// { X86_REG_XMM21, \"xmm21\" },\n\t16,\t// { X86_REG_XMM22, \"xmm22\" },\n\t16,\t// { X86_REG_XMM23, \"xmm23\" },\n\t16,\t// { X86_REG_XMM24, \"xmm24\" },\n\t16,\t// { X86_REG_XMM25, \"xmm25\" },\n\t16,\t// { X86_REG_XMM26, \"xmm26\" },\n\t16,\t// { X86_REG_XMM27, \"xmm27\" },\n\t16,\t// { X86_REG_XMM28, \"xmm28\" },\n\t16,\t// { X86_REG_XMM29, \"xmm29\" },\n\t16,\t// { X86_REG_XMM30, \"xmm30\" },\n\t16,\t// { X86_REG_XMM31, \"xmm31\" },\n\t32,\t// { X86_REG_YMM0, \"ymm0\" },\n\t32,\t// { X86_REG_YMM1, \"ymm1\" },\n\t32,\t// { X86_REG_YMM2, \"ymm2\" },\n\t32,\t// { X86_REG_YMM3, \"ymm3\" },\n\t32,\t// { X86_REG_YMM4, \"ymm4\" },\n\t32,\t// { X86_REG_YMM5, \"ymm5\" },\n\t32,\t// { X86_REG_YMM6, \"ymm6\" },\n\t32,\t// { X86_REG_YMM7, \"ymm7\" },\n\t32,\t// { X86_REG_YMM8, \"ymm8\" },\n\t32,\t// { X86_REG_YMM9, \"ymm9\" },\n\t32,\t// { X86_REG_YMM10, \"ymm10\" },\n\t32,\t// { X86_REG_YMM11, \"ymm11\" },\n\t32,\t// { X86_REG_YMM12, \"ymm12\" },\n\t32,\t// { X86_REG_YMM13, \"ymm13\" },\n\t32,\t// { X86_REG_YMM14, \"ymm14\" },\n\t32,\t// { X86_REG_YMM15, \"ymm15\" },\n\t32,\t// { X86_REG_YMM16, \"ymm16\" },\n\t32,\t// { X86_REG_YMM17, \"ymm17\" },\n\t32,\t// { X86_REG_YMM18, \"ymm18\" },\n\t32,\t// { X86_REG_YMM19, \"ymm19\" },\n\t32,\t// { X86_REG_YMM20, \"ymm20\" },\n\t32,\t// { X86_REG_YMM21, \"ymm21\" },\n\t32,\t// { X86_REG_YMM22, \"ymm22\" },\n\t32,\t// { X86_REG_YMM23, \"ymm23\" },\n\t32,\t// { X86_REG_YMM24, \"ymm24\" },\n\t32,\t// { X86_REG_YMM25, \"ymm25\" },\n\t32,\t// { X86_REG_YMM26, \"ymm26\" },\n\t32,\t// { X86_REG_YMM27, \"ymm27\" },\n\t32,\t// { X86_REG_YMM28, \"ymm28\" },\n\t32,\t// { X86_REG_YMM29, \"ymm29\" },\n\t32,\t// { X86_REG_YMM30, \"ymm30\" },\n\t32,\t// { X86_REG_YMM31, \"ymm31\" },\n\t64,\t// { X86_REG_ZMM0, \"zmm0\" },\n\t64,\t// { X86_REG_ZMM1, \"zmm1\" },\n\t64,\t// { X86_REG_ZMM2, \"zmm2\" },\n\t64,\t// { X86_REG_ZMM3, \"zmm3\" },\n\t64,\t// { X86_REG_ZMM4, \"zmm4\" },\n\t64,\t// { X86_REG_ZMM5, \"zmm5\" },\n\t64,\t// { X86_REG_ZMM6, \"zmm6\" },\n\t64,\t// { X86_REG_ZMM7, \"zmm7\" },\n\t64,\t// { X86_REG_ZMM8, \"zmm8\" },\n\t64,\t// { X86_REG_ZMM9, \"zmm9\" },\n\t64,\t// { X86_REG_ZMM10, \"zmm10\" },\n\t64,\t// { X86_REG_ZMM11, \"zmm11\" },\n\t64,\t// { X86_REG_ZMM12, \"zmm12\" },\n\t64,\t// { X86_REG_ZMM13, \"zmm13\" },\n\t64,\t// { X86_REG_ZMM14, \"zmm14\" },\n\t64,\t// { X86_REG_ZMM15, \"zmm15\" },\n\t64,\t// { X86_REG_ZMM16, \"zmm16\" },\n\t64,\t// { X86_REG_ZMM17, \"zmm17\" },\n\t64,\t// { X86_REG_ZMM18, \"zmm18\" },\n\t64,\t// { X86_REG_ZMM19, \"zmm19\" },\n\t64,\t// { X86_REG_ZMM20, \"zmm20\" },\n\t64,\t// { X86_REG_ZMM21, \"zmm21\" },\n\t64,\t// { X86_REG_ZMM22, \"zmm22\" },\n\t64,\t// { X86_REG_ZMM23, \"zmm23\" },\n\t64,\t// { X86_REG_ZMM24, \"zmm24\" },\n\t64,\t// { X86_REG_ZMM25, \"zmm25\" },\n\t64,\t// { X86_REG_ZMM26, \"zmm26\" },\n\t64,\t// { X86_REG_ZMM27, \"zmm27\" },\n\t64,\t// { X86_REG_ZMM28, \"zmm28\" },\n\t64,\t// { X86_REG_ZMM29, \"zmm29\" },\n\t64,\t// { X86_REG_ZMM30, \"zmm30\" },\n\t64,\t// { X86_REG_ZMM31, \"zmm31\" },\n\t1,\t// { X86_REG_R8B, \"r8b\" },\n\t1,\t// { X86_REG_R9B, \"r9b\" },\n\t1,\t// { X86_REG_R10B, \"r10b\" },\n\t1,\t// { X86_REG_R11B, \"r11b\" },\n\t1,\t// { X86_REG_R12B, \"r12b\" },\n\t1,\t// { X86_REG_R13B, \"r13b\" },\n\t1,\t// { X86_REG_R14B, \"r14b\" },\n\t1,\t// { X86_REG_R15B, \"r15b\" },\n\t4,\t// { X86_REG_R8D, \"r8d\" },\n\t4,\t// { X86_REG_R9D, \"r9d\" },\n\t4,\t// { X86_REG_R10D, \"r10d\" },\n\t4,\t// { X86_REG_R11D, \"r11d\" },\n\t4,\t// { X86_REG_R12D, \"r12d\" },\n\t4,\t// { X86_REG_R13D, \"r13d\" },\n\t4,\t// { X86_REG_R14D, \"r14d\" },\n\t4,\t// { X86_REG_R15D, \"r15d\" },\n\t2,\t// { X86_REG_R8W, \"r8w\" },\n\t2,\t// { X86_REG_R9W, \"r9w\" },\n\t2,\t// { X86_REG_R10W, \"r10w\" },\n\t2,\t// { X86_REG_R11W, \"r11w\" },\n\t2,\t// { X86_REG_R12W, \"r12w\" },\n\t2,\t// { X86_REG_R13W, \"r13w\" },\n\t2,\t// { X86_REG_R14W, \"r14w\" },\n\t2,\t// { X86_REG_R15W, \"r15w\" },\n};\n\nconst char *X86_reg_name(csh handle, unsigned int reg)\n{\n#ifndef CAPSTONE_DIET\n\tcs_struct *ud = (cs_struct *)handle;\n\n\tif (reg >= X86_REG_ENDING)\n\t\treturn NULL;\n\n\tif (reg == X86_REG_EFLAGS) {\n\t\tif (ud->mode & CS_MODE_32)\n\t\t\treturn \"eflags\";\n\t\tif (ud->mode & CS_MODE_64)\n\t\t\treturn \"rflags\";\n\t}\n\n\treturn reg_name_maps[reg].name;\n#else\n\treturn NULL;\n#endif\n}\n\n#ifndef CAPSTONE_DIET\nstatic name_map insn_name_maps[] = {\n\t{ X86_INS_INVALID, NULL },\n\n\t{ X86_INS_AAA, \"aaa\" },\n\t{ X86_INS_AAD, \"aad\" },\n\t{ X86_INS_AAM, \"aam\" },\n\t{ X86_INS_AAS, \"aas\" },\n\t{ X86_INS_FABS, \"fabs\" },\n\t{ X86_INS_ADC, \"adc\" },\n\t{ X86_INS_ADCX, \"adcx\" },\n\t{ X86_INS_ADD, \"add\" },\n\t{ X86_INS_ADDPD, \"addpd\" },\n\t{ X86_INS_ADDPS, \"addps\" },\n\t{ X86_INS_ADDSD, \"addsd\" },\n\t{ X86_INS_ADDSS, \"addss\" },\n\t{ X86_INS_ADDSUBPD, \"addsubpd\" },\n\t{ X86_INS_ADDSUBPS, \"addsubps\" },\n\t{ X86_INS_FADD, \"fadd\" },\n\t{ X86_INS_FIADD, \"fiadd\" },\n\t{ X86_INS_FADDP, \"faddp\" },\n\t{ X86_INS_ADOX, \"adox\" },\n\t{ X86_INS_AESDECLAST, \"aesdeclast\" },\n\t{ X86_INS_AESDEC, \"aesdec\" },\n\t{ X86_INS_AESENCLAST, \"aesenclast\" },\n\t{ X86_INS_AESENC, \"aesenc\" },\n\t{ X86_INS_AESIMC, \"aesimc\" },\n\t{ X86_INS_AESKEYGENASSIST, \"aeskeygenassist\" },\n\t{ X86_INS_AND, \"and\" },\n\t{ X86_INS_ANDN, \"andn\" },\n\t{ X86_INS_ANDNPD, \"andnpd\" },\n\t{ X86_INS_ANDNPS, \"andnps\" },\n\t{ X86_INS_ANDPD, \"andpd\" },\n\t{ X86_INS_ANDPS, \"andps\" },\n\t{ X86_INS_ARPL, \"arpl\" },\n\t{ X86_INS_BEXTR, \"bextr\" },\n\t{ X86_INS_BLCFILL, \"blcfill\" },\n\t{ X86_INS_BLCI, \"blci\" },\n\t{ X86_INS_BLCIC, \"blcic\" },\n\t{ X86_INS_BLCMSK, \"blcmsk\" },\n\t{ X86_INS_BLCS, \"blcs\" },\n\t{ X86_INS_BLENDPD, \"blendpd\" },\n\t{ X86_INS_BLENDPS, \"blendps\" },\n\t{ X86_INS_BLENDVPD, \"blendvpd\" },\n\t{ X86_INS_BLENDVPS, \"blendvps\" },\n\t{ X86_INS_BLSFILL, \"blsfill\" },\n\t{ X86_INS_BLSI, \"blsi\" },\n\t{ X86_INS_BLSIC, \"blsic\" },\n\t{ X86_INS_BLSMSK, \"blsmsk\" },\n\t{ X86_INS_BLSR, \"blsr\" },\n\t{ X86_INS_BOUND, \"bound\" },\n\t{ X86_INS_BSF, \"bsf\" },\n\t{ X86_INS_BSR, \"bsr\" },\n\t{ X86_INS_BSWAP, \"bswap\" },\n\t{ X86_INS_BT, \"bt\" },\n\t{ X86_INS_BTC, \"btc\" },\n\t{ X86_INS_BTR, \"btr\" },\n\t{ X86_INS_BTS, \"bts\" },\n\t{ X86_INS_BZHI, \"bzhi\" },\n\t{ X86_INS_CALL, \"call\" },\n\t{ X86_INS_CBW, \"cbw\" },\n\t{ X86_INS_CDQ, \"cdq\" },\n\t{ X86_INS_CDQE, \"cdqe\" },\n\t{ X86_INS_FCHS, \"fchs\" },\n\t{ X86_INS_CLAC, \"clac\" },\n\t{ X86_INS_CLC, \"clc\" },\n\t{ X86_INS_CLD, \"cld\" },\n\t{ X86_INS_CLFLUSH, \"clflush\" },\n\t{ X86_INS_CLFLUSHOPT, \"clflushopt\" },\n\t{ X86_INS_CLGI, \"clgi\" },\n\t{ X86_INS_CLI, \"cli\" },\n\t{ X86_INS_CLTS, \"clts\" },\n\t{ X86_INS_CLWB, \"clwb\" },\n\t{ X86_INS_CMC, \"cmc\" },\n\t{ X86_INS_CMOVA, \"cmova\" },\n\t{ X86_INS_CMOVAE, \"cmovae\" },\n\t{ X86_INS_CMOVB, \"cmovb\" },\n\t{ X86_INS_CMOVBE, \"cmovbe\" },\n\t{ X86_INS_FCMOVBE, \"fcmovbe\" },\n\t{ X86_INS_FCMOVB, \"fcmovb\" },\n\t{ X86_INS_CMOVE, \"cmove\" },\n\t{ X86_INS_FCMOVE, \"fcmove\" },\n\t{ X86_INS_CMOVG, \"cmovg\" },\n\t{ X86_INS_CMOVGE, \"cmovge\" },\n\t{ X86_INS_CMOVL, \"cmovl\" },\n\t{ X86_INS_CMOVLE, \"cmovle\" },\n\t{ X86_INS_FCMOVNBE, \"fcmovnbe\" },\n\t{ X86_INS_FCMOVNB, \"fcmovnb\" },\n\t{ X86_INS_CMOVNE, \"cmovne\" },\n\t{ X86_INS_FCMOVNE, \"fcmovne\" },\n\t{ X86_INS_CMOVNO, \"cmovno\" },\n\t{ X86_INS_CMOVNP, \"cmovnp\" },\n\t{ X86_INS_FCMOVNU, \"fcmovnu\" },\n\t{ X86_INS_CMOVNS, \"cmovns\" },\n\t{ X86_INS_CMOVO, \"cmovo\" },\n\t{ X86_INS_CMOVP, \"cmovp\" },\n\t{ X86_INS_FCMOVU, \"fcmovu\" },\n\t{ X86_INS_CMOVS, \"cmovs\" },\n\t{ X86_INS_CMP, \"cmp\" },\n\t{ X86_INS_CMPSB, \"cmpsb\" },\n\t{ X86_INS_CMPSQ, \"cmpsq\" },\n\t{ X86_INS_CMPSW, \"cmpsw\" },\n\t{ X86_INS_CMPXCHG16B, \"cmpxchg16b\" },\n\t{ X86_INS_CMPXCHG, \"cmpxchg\" },\n\t{ X86_INS_CMPXCHG8B, \"cmpxchg8b\" },\n\t{ X86_INS_COMISD, \"comisd\" },\n\t{ X86_INS_COMISS, \"comiss\" },\n\t{ X86_INS_FCOMP, \"fcomp\" },\n\t{ X86_INS_FCOMPI, \"fcompi\" },\n\t{ X86_INS_FCOMI, \"fcomi\" },\n\t{ X86_INS_FCOM, \"fcom\" },\n\t{ X86_INS_FCOS, \"fcos\" },\n\t{ X86_INS_CPUID, \"cpuid\" },\n\t{ X86_INS_CQO, \"cqo\" },\n\t{ X86_INS_CRC32, \"crc32\" },\n\t{ X86_INS_CVTDQ2PD, \"cvtdq2pd\" },\n\t{ X86_INS_CVTDQ2PS, \"cvtdq2ps\" },\n\t{ X86_INS_CVTPD2DQ, \"cvtpd2dq\" },\n\t{ X86_INS_CVTPD2PS, \"cvtpd2ps\" },\n\t{ X86_INS_CVTPS2DQ, \"cvtps2dq\" },\n\t{ X86_INS_CVTPS2PD, \"cvtps2pd\" },\n\t{ X86_INS_CVTSD2SI, \"cvtsd2si\" },\n\t{ X86_INS_CVTSD2SS, \"cvtsd2ss\" },\n\t{ X86_INS_CVTSI2SD, \"cvtsi2sd\" },\n\t{ X86_INS_CVTSI2SS, \"cvtsi2ss\" },\n\t{ X86_INS_CVTSS2SD, \"cvtss2sd\" },\n\t{ X86_INS_CVTSS2SI, \"cvtss2si\" },\n\t{ X86_INS_CVTTPD2DQ, \"cvttpd2dq\" },\n\t{ X86_INS_CVTTPS2DQ, \"cvttps2dq\" },\n\t{ X86_INS_CVTTSD2SI, \"cvttsd2si\" },\n\t{ X86_INS_CVTTSS2SI, \"cvttss2si\" },\n\t{ X86_INS_CWD, \"cwd\" },\n\t{ X86_INS_CWDE, \"cwde\" },\n\t{ X86_INS_DAA, \"daa\" },\n\t{ X86_INS_DAS, \"das\" },\n\t{ X86_INS_DATA16, \"data16\" },\n\t{ X86_INS_DEC, \"dec\" },\n\t{ X86_INS_DIV, \"div\" },\n\t{ X86_INS_DIVPD, \"divpd\" },\n\t{ X86_INS_DIVPS, \"divps\" },\n\t{ X86_INS_FDIVR, \"fdivr\" },\n\t{ X86_INS_FIDIVR, \"fidivr\" },\n\t{ X86_INS_FDIVRP, \"fdivrp\" },\n\t{ X86_INS_DIVSD, \"divsd\" },\n\t{ X86_INS_DIVSS, \"divss\" },\n\t{ X86_INS_FDIV, \"fdiv\" },\n\t{ X86_INS_FIDIV, \"fidiv\" },\n\t{ X86_INS_FDIVP, \"fdivp\" },\n\t{ X86_INS_DPPD, \"dppd\" },\n\t{ X86_INS_DPPS, \"dpps\" },\n\t{ X86_INS_RET, \"ret\" },\n\t{ X86_INS_ENCLS, \"encls\" },\n\t{ X86_INS_ENCLU, \"enclu\" },\n\t{ X86_INS_ENTER, \"enter\" },\n\t{ X86_INS_EXTRACTPS, \"extractps\" },\n\t{ X86_INS_EXTRQ, \"extrq\" },\n\t{ X86_INS_F2XM1, \"f2xm1\" },\n\t{ X86_INS_LCALL, \"lcall\" },\n\t{ X86_INS_LJMP, \"ljmp\" },\n\t{ X86_INS_FBLD, \"fbld\" },\n\t{ X86_INS_FBSTP, \"fbstp\" },\n\t{ X86_INS_FCOMPP, \"fcompp\" },\n\t{ X86_INS_FDECSTP, \"fdecstp\" },\n\t{ X86_INS_FEMMS, \"femms\" },\n\t{ X86_INS_FFREE, \"ffree\" },\n\t{ X86_INS_FICOM, \"ficom\" },\n\t{ X86_INS_FICOMP, \"ficomp\" },\n\t{ X86_INS_FINCSTP, \"fincstp\" },\n\t{ X86_INS_FLDCW, \"fldcw\" },\n\t{ X86_INS_FLDENV, \"fldenv\" },\n\t{ X86_INS_FLDL2E, \"fldl2e\" },\n\t{ X86_INS_FLDL2T, \"fldl2t\" },\n\t{ X86_INS_FLDLG2, \"fldlg2\" },\n\t{ X86_INS_FLDLN2, \"fldln2\" },\n\t{ X86_INS_FLDPI, \"fldpi\" },\n\t{ X86_INS_FNCLEX, \"fnclex\" },\n\t{ X86_INS_FNINIT, \"fninit\" },\n\t{ X86_INS_FNOP, \"fnop\" },\n\t{ X86_INS_FNSTCW, \"fnstcw\" },\n\t{ X86_INS_FNSTSW, \"fnstsw\" },\n\t{ X86_INS_FPATAN, \"fpatan\" },\n\t{ X86_INS_FPREM, \"fprem\" },\n\t{ X86_INS_FPREM1, \"fprem1\" },\n\t{ X86_INS_FPTAN, \"fptan\" },\n\t{ X86_INS_FFREEP, \"ffreep\" },\n\t{ X86_INS_FRNDINT, \"frndint\" },\n\t{ X86_INS_FRSTOR, \"frstor\" },\n\t{ X86_INS_FNSAVE, \"fnsave\" },\n\t{ X86_INS_FSCALE, \"fscale\" },\n\t{ X86_INS_FSETPM, \"fsetpm\" },\n\t{ X86_INS_FSINCOS, \"fsincos\" },\n\t{ X86_INS_FNSTENV, \"fnstenv\" },\n\t{ X86_INS_FXAM, \"fxam\" },\n\t{ X86_INS_FXRSTOR, \"fxrstor\" },\n\t{ X86_INS_FXRSTOR64, \"fxrstor64\" },\n\t{ X86_INS_FXSAVE, \"fxsave\" },\n\t{ X86_INS_FXSAVE64, \"fxsave64\" },\n\t{ X86_INS_FXTRACT, \"fxtract\" },\n\t{ X86_INS_FYL2X, \"fyl2x\" },\n\t{ X86_INS_FYL2XP1, \"fyl2xp1\" },\n\t{ X86_INS_MOVAPD, \"movapd\" },\n\t{ X86_INS_MOVAPS, \"movaps\" },\n\t{ X86_INS_ORPD, \"orpd\" },\n\t{ X86_INS_ORPS, \"orps\" },\n\t{ X86_INS_VMOVAPD, \"vmovapd\" },\n\t{ X86_INS_VMOVAPS, \"vmovaps\" },\n\t{ X86_INS_XORPD, \"xorpd\" },\n\t{ X86_INS_XORPS, \"xorps\" },\n\t{ X86_INS_GETSEC, \"getsec\" },\n\t{ X86_INS_HADDPD, \"haddpd\" },\n\t{ X86_INS_HADDPS, \"haddps\" },\n\t{ X86_INS_HLT, \"hlt\" },\n\t{ X86_INS_HSUBPD, \"hsubpd\" },\n\t{ X86_INS_HSUBPS, \"hsubps\" },\n\t{ X86_INS_IDIV, \"idiv\" },\n\t{ X86_INS_FILD, \"fild\" },\n\t{ X86_INS_IMUL, \"imul\" },\n\t{ X86_INS_IN, \"in\" },\n\t{ X86_INS_INC, \"inc\" },\n\t{ X86_INS_INSB, \"insb\" },\n\t{ X86_INS_INSERTPS, \"insertps\" },\n\t{ X86_INS_INSERTQ, \"insertq\" },\n\t{ X86_INS_INSD, \"insd\" },\n\t{ X86_INS_INSW, \"insw\" },\n\t{ X86_INS_INT, \"int\" },\n\t{ X86_INS_INT1, \"int1\" },\n\t{ X86_INS_INT3, \"int3\" },\n\t{ X86_INS_INTO, \"into\" },\n\t{ X86_INS_INVD, \"invd\" },\n\t{ X86_INS_INVEPT, \"invept\" },\n\t{ X86_INS_INVLPG, \"invlpg\" },\n\t{ X86_INS_INVLPGA, \"invlpga\" },\n\t{ X86_INS_INVPCID, \"invpcid\" },\n\t{ X86_INS_INVVPID, \"invvpid\" },\n\t{ X86_INS_IRET, \"iret\" },\n\t{ X86_INS_IRETD, \"iretd\" },\n\t{ X86_INS_IRETQ, \"iretq\" },\n\t{ X86_INS_FISTTP, \"fisttp\" },\n\t{ X86_INS_FIST, \"fist\" },\n\t{ X86_INS_FISTP, \"fistp\" },\n\t{ X86_INS_UCOMISD, \"ucomisd\" },\n\t{ X86_INS_UCOMISS, \"ucomiss\" },\n\t{ X86_INS_VCOMISD, \"vcomisd\" },\n\t{ X86_INS_VCOMISS, \"vcomiss\" },\n\t{ X86_INS_VCVTSD2SS, \"vcvtsd2ss\" },\n\t{ X86_INS_VCVTSI2SD, \"vcvtsi2sd\" },\n\t{ X86_INS_VCVTSI2SS, \"vcvtsi2ss\" },\n\t{ X86_INS_VCVTSS2SD, \"vcvtss2sd\" },\n\t{ X86_INS_VCVTTSD2SI, \"vcvttsd2si\" },\n\t{ X86_INS_VCVTTSD2USI, \"vcvttsd2usi\" },\n\t{ X86_INS_VCVTTSS2SI, \"vcvttss2si\" },\n\t{ X86_INS_VCVTTSS2USI, \"vcvttss2usi\" },\n\t{ X86_INS_VCVTUSI2SD, \"vcvtusi2sd\" },\n\t{ X86_INS_VCVTUSI2SS, \"vcvtusi2ss\" },\n\t{ X86_INS_VUCOMISD, \"vucomisd\" },\n\t{ X86_INS_VUCOMISS, \"vucomiss\" },\n\t{ X86_INS_JAE, \"jae\" },\n\t{ X86_INS_JA, \"ja\" },\n\t{ X86_INS_JBE, \"jbe\" },\n\t{ X86_INS_JB, \"jb\" },\n\t{ X86_INS_JCXZ, \"jcxz\" },\n\t{ X86_INS_JECXZ, \"jecxz\" },\n\t{ X86_INS_JE, \"je\" },\n\t{ X86_INS_JGE, \"jge\" },\n\t{ X86_INS_JG, \"jg\" },\n\t{ X86_INS_JLE, \"jle\" },\n\t{ X86_INS_JL, \"jl\" },\n\t{ X86_INS_JMP, \"jmp\" },\n\t{ X86_INS_JNE, \"jne\" },\n\t{ X86_INS_JNO, \"jno\" },\n\t{ X86_INS_JNP, \"jnp\" },\n\t{ X86_INS_JNS, \"jns\" },\n\t{ X86_INS_JO, \"jo\" },\n\t{ X86_INS_JP, \"jp\" },\n\t{ X86_INS_JRCXZ, \"jrcxz\" },\n\t{ X86_INS_JS, \"js\" },\n\t{ X86_INS_KANDB, \"kandb\" },\n\t{ X86_INS_KANDD, \"kandd\" },\n\t{ X86_INS_KANDNB, \"kandnb\" },\n\t{ X86_INS_KANDND, \"kandnd\" },\n\t{ X86_INS_KANDNQ, \"kandnq\" },\n\t{ X86_INS_KANDNW, \"kandnw\" },\n\t{ X86_INS_KANDQ, \"kandq\" },\n\t{ X86_INS_KANDW, \"kandw\" },\n\t{ X86_INS_KMOVB, \"kmovb\" },\n\t{ X86_INS_KMOVD, \"kmovd\" },\n\t{ X86_INS_KMOVQ, \"kmovq\" },\n\t{ X86_INS_KMOVW, \"kmovw\" },\n\t{ X86_INS_KNOTB, \"knotb\" },\n\t{ X86_INS_KNOTD, \"knotd\" },\n\t{ X86_INS_KNOTQ, \"knotq\" },\n\t{ X86_INS_KNOTW, \"knotw\" },\n\t{ X86_INS_KORB, \"korb\" },\n\t{ X86_INS_KORD, \"kord\" },\n\t{ X86_INS_KORQ, \"korq\" },\n\t{ X86_INS_KORTESTB, \"kortestb\" },\n\t{ X86_INS_KORTESTD, \"kortestd\" },\n\t{ X86_INS_KORTESTQ, \"kortestq\" },\n\t{ X86_INS_KORTESTW, \"kortestw\" },\n\t{ X86_INS_KORW, \"korw\" },\n\t{ X86_INS_KSHIFTLB, \"kshiftlb\" },\n\t{ X86_INS_KSHIFTLD, \"kshiftld\" },\n\t{ X86_INS_KSHIFTLQ, \"kshiftlq\" },\n\t{ X86_INS_KSHIFTLW, \"kshiftlw\" },\n\t{ X86_INS_KSHIFTRB, \"kshiftrb\" },\n\t{ X86_INS_KSHIFTRD, \"kshiftrd\" },\n\t{ X86_INS_KSHIFTRQ, \"kshiftrq\" },\n\t{ X86_INS_KSHIFTRW, \"kshiftrw\" },\n\t{ X86_INS_KUNPCKBW, \"kunpckbw\" },\n\t{ X86_INS_KXNORB, \"kxnorb\" },\n\t{ X86_INS_KXNORD, \"kxnord\" },\n\t{ X86_INS_KXNORQ, \"kxnorq\" },\n\t{ X86_INS_KXNORW, \"kxnorw\" },\n\t{ X86_INS_KXORB, \"kxorb\" },\n\t{ X86_INS_KXORD, \"kxord\" },\n\t{ X86_INS_KXORQ, \"kxorq\" },\n\t{ X86_INS_KXORW, \"kxorw\" },\n\t{ X86_INS_LAHF, \"lahf\" },\n\t{ X86_INS_LAR, \"lar\" },\n\t{ X86_INS_LDDQU, \"lddqu\" },\n\t{ X86_INS_LDMXCSR, \"ldmxcsr\" },\n\t{ X86_INS_LDS, \"lds\" },\n\t{ X86_INS_FLDZ, \"fldz\" },\n\t{ X86_INS_FLD1, \"fld1\" },\n\t{ X86_INS_FLD, \"fld\" },\n\t{ X86_INS_LEA, \"lea\" },\n\t{ X86_INS_LEAVE, \"leave\" },\n\t{ X86_INS_LES, \"les\" },\n\t{ X86_INS_LFENCE, \"lfence\" },\n\t{ X86_INS_LFS, \"lfs\" },\n\t{ X86_INS_LGDT, \"lgdt\" },\n\t{ X86_INS_LGS, \"lgs\" },\n\t{ X86_INS_LIDT, \"lidt\" },\n\t{ X86_INS_LLDT, \"lldt\" },\n\t{ X86_INS_LMSW, \"lmsw\" },\n\t{ X86_INS_OR, \"or\" },\n\t{ X86_INS_SUB, \"sub\" },\n\t{ X86_INS_XOR, \"xor\" },\n\t{ X86_INS_LODSB, \"lodsb\" },\n\t{ X86_INS_LODSD, \"lodsd\" },\n\t{ X86_INS_LODSQ, \"lodsq\" },\n\t{ X86_INS_LODSW, \"lodsw\" },\n\t{ X86_INS_LOOP, \"loop\" },\n\t{ X86_INS_LOOPE, \"loope\" },\n\t{ X86_INS_LOOPNE, \"loopne\" },\n\t{ X86_INS_RETF, \"retf\" },\n\t{ X86_INS_RETFQ, \"retfq\" },\n\t{ X86_INS_LSL, \"lsl\" },\n\t{ X86_INS_LSS, \"lss\" },\n\t{ X86_INS_LTR, \"ltr\" },\n\t{ X86_INS_XADD, \"xadd\" },\n\t{ X86_INS_LZCNT, \"lzcnt\" },\n\t{ X86_INS_MASKMOVDQU, \"maskmovdqu\" },\n\t{ X86_INS_MAXPD, \"maxpd\" },\n\t{ X86_INS_MAXPS, \"maxps\" },\n\t{ X86_INS_MAXSD, \"maxsd\" },\n\t{ X86_INS_MAXSS, \"maxss\" },\n\t{ X86_INS_MFENCE, \"mfence\" },\n\t{ X86_INS_MINPD, \"minpd\" },\n\t{ X86_INS_MINPS, \"minps\" },\n\t{ X86_INS_MINSD, \"minsd\" },\n\t{ X86_INS_MINSS, \"minss\" },\n\t{ X86_INS_CVTPD2PI, \"cvtpd2pi\" },\n\t{ X86_INS_CVTPI2PD, \"cvtpi2pd\" },\n\t{ X86_INS_CVTPI2PS, \"cvtpi2ps\" },\n\t{ X86_INS_CVTPS2PI, \"cvtps2pi\" },\n\t{ X86_INS_CVTTPD2PI, \"cvttpd2pi\" },\n\t{ X86_INS_CVTTPS2PI, \"cvttps2pi\" },\n\t{ X86_INS_EMMS, \"emms\" },\n\t{ X86_INS_MASKMOVQ, \"maskmovq\" },\n\t{ X86_INS_MOVD, \"movd\" },\n\t{ X86_INS_MOVDQ2Q, \"movdq2q\" },\n\t{ X86_INS_MOVNTQ, \"movntq\" },\n\t{ X86_INS_MOVQ2DQ, \"movq2dq\" },\n\t{ X86_INS_MOVQ, \"movq\" },\n\t{ X86_INS_PABSB, \"pabsb\" },\n\t{ X86_INS_PABSD, \"pabsd\" },\n\t{ X86_INS_PABSW, \"pabsw\" },\n\t{ X86_INS_PACKSSDW, \"packssdw\" },\n\t{ X86_INS_PACKSSWB, \"packsswb\" },\n\t{ X86_INS_PACKUSWB, \"packuswb\" },\n\t{ X86_INS_PADDB, \"paddb\" },\n\t{ X86_INS_PADDD, \"paddd\" },\n\t{ X86_INS_PADDQ, \"paddq\" },\n\t{ X86_INS_PADDSB, \"paddsb\" },\n\t{ X86_INS_PADDSW, \"paddsw\" },\n\t{ X86_INS_PADDUSB, \"paddusb\" },\n\t{ X86_INS_PADDUSW, \"paddusw\" },\n\t{ X86_INS_PADDW, \"paddw\" },\n\t{ X86_INS_PALIGNR, \"palignr\" },\n\t{ X86_INS_PANDN, \"pandn\" },\n\t{ X86_INS_PAND, \"pand\" },\n\t{ X86_INS_PAVGB, \"pavgb\" },\n\t{ X86_INS_PAVGW, \"pavgw\" },\n\t{ X86_INS_PCMPEQB, \"pcmpeqb\" },\n\t{ X86_INS_PCMPEQD, \"pcmpeqd\" },\n\t{ X86_INS_PCMPEQW, \"pcmpeqw\" },\n\t{ X86_INS_PCMPGTB, \"pcmpgtb\" },\n\t{ X86_INS_PCMPGTD, \"pcmpgtd\" },\n\t{ X86_INS_PCMPGTW, \"pcmpgtw\" },\n\t{ X86_INS_PEXTRW, \"pextrw\" },\n\t{ X86_INS_PHADDSW, \"phaddsw\" },\n\t{ X86_INS_PHADDW, \"phaddw\" },\n\t{ X86_INS_PHADDD, \"phaddd\" },\n\t{ X86_INS_PHSUBD, \"phsubd\" },\n\t{ X86_INS_PHSUBSW, \"phsubsw\" },\n\t{ X86_INS_PHSUBW, \"phsubw\" },\n\t{ X86_INS_PINSRW, \"pinsrw\" },\n\t{ X86_INS_PMADDUBSW, \"pmaddubsw\" },\n\t{ X86_INS_PMADDWD, \"pmaddwd\" },\n\t{ X86_INS_PMAXSW, \"pmaxsw\" },\n\t{ X86_INS_PMAXUB, \"pmaxub\" },\n\t{ X86_INS_PMINSW, \"pminsw\" },\n\t{ X86_INS_PMINUB, \"pminub\" },\n\t{ X86_INS_PMOVMSKB, \"pmovmskb\" },\n\t{ X86_INS_PMULHRSW, \"pmulhrsw\" },\n\t{ X86_INS_PMULHUW, \"pmulhuw\" },\n\t{ X86_INS_PMULHW, \"pmulhw\" },\n\t{ X86_INS_PMULLW, \"pmullw\" },\n\t{ X86_INS_PMULUDQ, \"pmuludq\" },\n\t{ X86_INS_POR, \"por\" },\n\t{ X86_INS_PSADBW, \"psadbw\" },\n\t{ X86_INS_PSHUFB, \"pshufb\" },\n\t{ X86_INS_PSHUFW, \"pshufw\" },\n\t{ X86_INS_PSIGNB, \"psignb\" },\n\t{ X86_INS_PSIGND, \"psignd\" },\n\t{ X86_INS_PSIGNW, \"psignw\" },\n\t{ X86_INS_PSLLD, \"pslld\" },\n\t{ X86_INS_PSLLQ, \"psllq\" },\n\t{ X86_INS_PSLLW, \"psllw\" },\n\t{ X86_INS_PSRAD, \"psrad\" },\n\t{ X86_INS_PSRAW, \"psraw\" },\n\t{ X86_INS_PSRLD, \"psrld\" },\n\t{ X86_INS_PSRLQ, \"psrlq\" },\n\t{ X86_INS_PSRLW, \"psrlw\" },\n\t{ X86_INS_PSUBB, \"psubb\" },\n\t{ X86_INS_PSUBD, \"psubd\" },\n\t{ X86_INS_PSUBQ, \"psubq\" },\n\t{ X86_INS_PSUBSB, \"psubsb\" },\n\t{ X86_INS_PSUBSW, \"psubsw\" },\n\t{ X86_INS_PSUBUSB, \"psubusb\" },\n\t{ X86_INS_PSUBUSW, \"psubusw\" },\n\t{ X86_INS_PSUBW, \"psubw\" },\n\t{ X86_INS_PUNPCKHBW, \"punpckhbw\" },\n\t{ X86_INS_PUNPCKHDQ, \"punpckhdq\" },\n\t{ X86_INS_PUNPCKHWD, \"punpckhwd\" },\n\t{ X86_INS_PUNPCKLBW, \"punpcklbw\" },\n\t{ X86_INS_PUNPCKLDQ, \"punpckldq\" },\n\t{ X86_INS_PUNPCKLWD, \"punpcklwd\" },\n\t{ X86_INS_PXOR, \"pxor\" },\n\t{ X86_INS_MONITOR, \"monitor\" },\n\t{ X86_INS_MONTMUL, \"montmul\" },\n\t{ X86_INS_MOV, \"mov\" },\n\t{ X86_INS_MOVABS, \"movabs\" },\n\t{ X86_INS_MOVBE, \"movbe\" },\n\t{ X86_INS_MOVDDUP, \"movddup\" },\n\t{ X86_INS_MOVDQA, \"movdqa\" },\n\t{ X86_INS_MOVDQU, \"movdqu\" },\n\t{ X86_INS_MOVHLPS, \"movhlps\" },\n\t{ X86_INS_MOVHPD, \"movhpd\" },\n\t{ X86_INS_MOVHPS, \"movhps\" },\n\t{ X86_INS_MOVLHPS, \"movlhps\" },\n\t{ X86_INS_MOVLPD, \"movlpd\" },\n\t{ X86_INS_MOVLPS, \"movlps\" },\n\t{ X86_INS_MOVMSKPD, \"movmskpd\" },\n\t{ X86_INS_MOVMSKPS, \"movmskps\" },\n\t{ X86_INS_MOVNTDQA, \"movntdqa\" },\n\t{ X86_INS_MOVNTDQ, \"movntdq\" },\n\t{ X86_INS_MOVNTI, \"movnti\" },\n\t{ X86_INS_MOVNTPD, \"movntpd\" },\n\t{ X86_INS_MOVNTPS, \"movntps\" },\n\t{ X86_INS_MOVNTSD, \"movntsd\" },\n\t{ X86_INS_MOVNTSS, \"movntss\" },\n\t{ X86_INS_MOVSB, \"movsb\" },\n\t{ X86_INS_MOVSD, \"movsd\" },\n\t{ X86_INS_MOVSHDUP, \"movshdup\" },\n\t{ X86_INS_MOVSLDUP, \"movsldup\" },\n\t{ X86_INS_MOVSQ, \"movsq\" },\n\t{ X86_INS_MOVSS, \"movss\" },\n\t{ X86_INS_MOVSW, \"movsw\" },\n\t{ X86_INS_MOVSX, \"movsx\" },\n\t{ X86_INS_MOVSXD, \"movsxd\" },\n\t{ X86_INS_MOVUPD, \"movupd\" },\n\t{ X86_INS_MOVUPS, \"movups\" },\n\t{ X86_INS_MOVZX, \"movzx\" },\n\t{ X86_INS_MPSADBW, \"mpsadbw\" },\n\t{ X86_INS_MUL, \"mul\" },\n\t{ X86_INS_MULPD, \"mulpd\" },\n\t{ X86_INS_MULPS, \"mulps\" },\n\t{ X86_INS_MULSD, \"mulsd\" },\n\t{ X86_INS_MULSS, \"mulss\" },\n\t{ X86_INS_MULX, \"mulx\" },\n\t{ X86_INS_FMUL, \"fmul\" },\n\t{ X86_INS_FIMUL, \"fimul\" },\n\t{ X86_INS_FMULP, \"fmulp\" },\n\t{ X86_INS_MWAIT, \"mwait\" },\n\t{ X86_INS_NEG, \"neg\" },\n\t{ X86_INS_NOP, \"nop\" },\n\t{ X86_INS_NOT, \"not\" },\n\t{ X86_INS_OUT, \"out\" },\n\t{ X86_INS_OUTSB, \"outsb\" },\n\t{ X86_INS_OUTSD, \"outsd\" },\n\t{ X86_INS_OUTSW, \"outsw\" },\n\t{ X86_INS_PACKUSDW, \"packusdw\" },\n\t{ X86_INS_PAUSE, \"pause\" },\n\t{ X86_INS_PAVGUSB, \"pavgusb\" },\n\t{ X86_INS_PBLENDVB, \"pblendvb\" },\n\t{ X86_INS_PBLENDW, \"pblendw\" },\n\t{ X86_INS_PCLMULQDQ, \"pclmulqdq\" },\n\t{ X86_INS_PCMPEQQ, \"pcmpeqq\" },\n\t{ X86_INS_PCMPESTRI, \"pcmpestri\" },\n\t{ X86_INS_PCMPESTRM, \"pcmpestrm\" },\n\t{ X86_INS_PCMPGTQ, \"pcmpgtq\" },\n\t{ X86_INS_PCMPISTRI, \"pcmpistri\" },\n\t{ X86_INS_PCMPISTRM, \"pcmpistrm\" },\n\t{ X86_INS_PCOMMIT, \"pcommit\" },\n\t{ X86_INS_PDEP, \"pdep\" },\n\t{ X86_INS_PEXT, \"pext\" },\n\t{ X86_INS_PEXTRB, \"pextrb\" },\n\t{ X86_INS_PEXTRD, \"pextrd\" },\n\t{ X86_INS_PEXTRQ, \"pextrq\" },\n\t{ X86_INS_PF2ID, \"pf2id\" },\n\t{ X86_INS_PF2IW, \"pf2iw\" },\n\t{ X86_INS_PFACC, \"pfacc\" },\n\t{ X86_INS_PFADD, \"pfadd\" },\n\t{ X86_INS_PFCMPEQ, \"pfcmpeq\" },\n\t{ X86_INS_PFCMPGE, \"pfcmpge\" },\n\t{ X86_INS_PFCMPGT, \"pfcmpgt\" },\n\t{ X86_INS_PFMAX, \"pfmax\" },\n\t{ X86_INS_PFMIN, \"pfmin\" },\n\t{ X86_INS_PFMUL, \"pfmul\" },\n\t{ X86_INS_PFNACC, \"pfnacc\" },\n\t{ X86_INS_PFPNACC, \"pfpnacc\" },\n\t{ X86_INS_PFRCPIT1, \"pfrcpit1\" },\n\t{ X86_INS_PFRCPIT2, \"pfrcpit2\" },\n\t{ X86_INS_PFRCP, \"pfrcp\" },\n\t{ X86_INS_PFRSQIT1, \"pfrsqit1\" },\n\t{ X86_INS_PFRSQRT, \"pfrsqrt\" },\n\t{ X86_INS_PFSUBR, \"pfsubr\" },\n\t{ X86_INS_PFSUB, \"pfsub\" },\n\t{ X86_INS_PHMINPOSUW, \"phminposuw\" },\n\t{ X86_INS_PI2FD, \"pi2fd\" },\n\t{ X86_INS_PI2FW, \"pi2fw\" },\n\t{ X86_INS_PINSRB, \"pinsrb\" },\n\t{ X86_INS_PINSRD, \"pinsrd\" },\n\t{ X86_INS_PINSRQ, \"pinsrq\" },\n\t{ X86_INS_PMAXSB, \"pmaxsb\" },\n\t{ X86_INS_PMAXSD, \"pmaxsd\" },\n\t{ X86_INS_PMAXUD, \"pmaxud\" },\n\t{ X86_INS_PMAXUW, \"pmaxuw\" },\n\t{ X86_INS_PMINSB, \"pminsb\" },\n\t{ X86_INS_PMINSD, \"pminsd\" },\n\t{ X86_INS_PMINUD, \"pminud\" },\n\t{ X86_INS_PMINUW, \"pminuw\" },\n\t{ X86_INS_PMOVSXBD, \"pmovsxbd\" },\n\t{ X86_INS_PMOVSXBQ, \"pmovsxbq\" },\n\t{ X86_INS_PMOVSXBW, \"pmovsxbw\" },\n\t{ X86_INS_PMOVSXDQ, \"pmovsxdq\" },\n\t{ X86_INS_PMOVSXWD, \"pmovsxwd\" },\n\t{ X86_INS_PMOVSXWQ, \"pmovsxwq\" },\n\t{ X86_INS_PMOVZXBD, \"pmovzxbd\" },\n\t{ X86_INS_PMOVZXBQ, \"pmovzxbq\" },\n\t{ X86_INS_PMOVZXBW, \"pmovzxbw\" },\n\t{ X86_INS_PMOVZXDQ, \"pmovzxdq\" },\n\t{ X86_INS_PMOVZXWD, \"pmovzxwd\" },\n\t{ X86_INS_PMOVZXWQ, \"pmovzxwq\" },\n\t{ X86_INS_PMULDQ, \"pmuldq\" },\n\t{ X86_INS_PMULHRW, \"pmulhrw\" },\n\t{ X86_INS_PMULLD, \"pmulld\" },\n\t{ X86_INS_POP, \"pop\" },\n\t{ X86_INS_POPAW, \"popaw\" },\n\t{ X86_INS_POPAL, \"popal\" },\n\t{ X86_INS_POPCNT, \"popcnt\" },\n\t{ X86_INS_POPF, \"popf\" },\n\t{ X86_INS_POPFD, \"popfd\" },\n\t{ X86_INS_POPFQ, \"popfq\" },\n\t{ X86_INS_PREFETCH, \"prefetch\" },\n\t{ X86_INS_PREFETCHNTA, \"prefetchnta\" },\n\t{ X86_INS_PREFETCHT0, \"prefetcht0\" },\n\t{ X86_INS_PREFETCHT1, \"prefetcht1\" },\n\t{ X86_INS_PREFETCHT2, \"prefetcht2\" },\n\t{ X86_INS_PREFETCHW, \"prefetchw\" },\n\t{ X86_INS_PSHUFD, \"pshufd\" },\n\t{ X86_INS_PSHUFHW, \"pshufhw\" },\n\t{ X86_INS_PSHUFLW, \"pshuflw\" },\n\t{ X86_INS_PSLLDQ, \"pslldq\" },\n\t{ X86_INS_PSRLDQ, \"psrldq\" },\n\t{ X86_INS_PSWAPD, \"pswapd\" },\n\t{ X86_INS_PTEST, \"ptest\" },\n\t{ X86_INS_PUNPCKHQDQ, \"punpckhqdq\" },\n\t{ X86_INS_PUNPCKLQDQ, \"punpcklqdq\" },\n\t{ X86_INS_PUSH, \"push\" },\n\t{ X86_INS_PUSHAW, \"pushaw\" },\n\t{ X86_INS_PUSHAL, \"pushal\" },\n\t{ X86_INS_PUSHF, \"pushf\" },\n\t{ X86_INS_PUSHFD, \"pushfd\" },\n\t{ X86_INS_PUSHFQ, \"pushfq\" },\n\t{ X86_INS_RCL, \"rcl\" },\n\t{ X86_INS_RCPPS, \"rcpps\" },\n\t{ X86_INS_RCPSS, \"rcpss\" },\n\t{ X86_INS_RCR, \"rcr\" },\n\t{ X86_INS_RDFSBASE, \"rdfsbase\" },\n\t{ X86_INS_RDGSBASE, \"rdgsbase\" },\n\t{ X86_INS_RDMSR, \"rdmsr\" },\n\t{ X86_INS_RDPMC, \"rdpmc\" },\n\t{ X86_INS_RDRAND, \"rdrand\" },\n\t{ X86_INS_RDSEED, \"rdseed\" },\n\t{ X86_INS_RDTSC, \"rdtsc\" },\n\t{ X86_INS_RDTSCP, \"rdtscp\" },\n\t{ X86_INS_ROL, \"rol\" },\n\t{ X86_INS_ROR, \"ror\" },\n\t{ X86_INS_RORX, \"rorx\" },\n\t{ X86_INS_ROUNDPD, \"roundpd\" },\n\t{ X86_INS_ROUNDPS, \"roundps\" },\n\t{ X86_INS_ROUNDSD, \"roundsd\" },\n\t{ X86_INS_ROUNDSS, \"roundss\" },\n\t{ X86_INS_RSM, \"rsm\" },\n\t{ X86_INS_RSQRTPS, \"rsqrtps\" },\n\t{ X86_INS_RSQRTSS, \"rsqrtss\" },\n\t{ X86_INS_SAHF, \"sahf\" },\n\t{ X86_INS_SAL, \"sal\" },\n\t{ X86_INS_SALC, \"salc\" },\n\t{ X86_INS_SAR, \"sar\" },\n\t{ X86_INS_SARX, \"sarx\" },\n\t{ X86_INS_SBB, \"sbb\" },\n\t{ X86_INS_SCASB, \"scasb\" },\n\t{ X86_INS_SCASD, \"scasd\" },\n\t{ X86_INS_SCASQ, \"scasq\" },\n\t{ X86_INS_SCASW, \"scasw\" },\n\t{ X86_INS_SETAE, \"setae\" },\n\t{ X86_INS_SETA, \"seta\" },\n\t{ X86_INS_SETBE, \"setbe\" },\n\t{ X86_INS_SETB, \"setb\" },\n\t{ X86_INS_SETE, \"sete\" },\n\t{ X86_INS_SETGE, \"setge\" },\n\t{ X86_INS_SETG, \"setg\" },\n\t{ X86_INS_SETLE, \"setle\" },\n\t{ X86_INS_SETL, \"setl\" },\n\t{ X86_INS_SETNE, \"setne\" },\n\t{ X86_INS_SETNO, \"setno\" },\n\t{ X86_INS_SETNP, \"setnp\" },\n\t{ X86_INS_SETNS, \"setns\" },\n\t{ X86_INS_SETO, \"seto\" },\n\t{ X86_INS_SETP, \"setp\" },\n\t{ X86_INS_SETS, \"sets\" },\n\t{ X86_INS_SFENCE, \"sfence\" },\n\t{ X86_INS_SGDT, \"sgdt\" },\n\t{ X86_INS_SHA1MSG1, \"sha1msg1\" },\n\t{ X86_INS_SHA1MSG2, \"sha1msg2\" },\n\t{ X86_INS_SHA1NEXTE, \"sha1nexte\" },\n\t{ X86_INS_SHA1RNDS4, \"sha1rnds4\" },\n\t{ X86_INS_SHA256MSG1, \"sha256msg1\" },\n\t{ X86_INS_SHA256MSG2, \"sha256msg2\" },\n\t{ X86_INS_SHA256RNDS2, \"sha256rnds2\" },\n\t{ X86_INS_SHL, \"shl\" },\n\t{ X86_INS_SHLD, \"shld\" },\n\t{ X86_INS_SHLX, \"shlx\" },\n\t{ X86_INS_SHR, \"shr\" },\n\t{ X86_INS_SHRD, \"shrd\" },\n\t{ X86_INS_SHRX, \"shrx\" },\n\t{ X86_INS_SHUFPD, \"shufpd\" },\n\t{ X86_INS_SHUFPS, \"shufps\" },\n\t{ X86_INS_SIDT, \"sidt\" },\n\t{ X86_INS_FSIN, \"fsin\" },\n\t{ X86_INS_SKINIT, \"skinit\" },\n\t{ X86_INS_SLDT, \"sldt\" },\n\t{ X86_INS_SMSW, \"smsw\" },\n\t{ X86_INS_SQRTPD, \"sqrtpd\" },\n\t{ X86_INS_SQRTPS, \"sqrtps\" },\n\t{ X86_INS_SQRTSD, \"sqrtsd\" },\n\t{ X86_INS_SQRTSS, \"sqrtss\" },\n\t{ X86_INS_FSQRT, \"fsqrt\" },\n\t{ X86_INS_STAC, \"stac\" },\n\t{ X86_INS_STC, \"stc\" },\n\t{ X86_INS_STD, \"std\" },\n\t{ X86_INS_STGI, \"stgi\" },\n\t{ X86_INS_STI, \"sti\" },\n\t{ X86_INS_STMXCSR, \"stmxcsr\" },\n\t{ X86_INS_STOSB, \"stosb\" },\n\t{ X86_INS_STOSD, \"stosd\" },\n\t{ X86_INS_STOSQ, \"stosq\" },\n\t{ X86_INS_STOSW, \"stosw\" },\n\t{ X86_INS_STR, \"str\" },\n\t{ X86_INS_FST, \"fst\" },\n\t{ X86_INS_FSTP, \"fstp\" },\n\t{ X86_INS_FSTPNCE, \"fstpnce\" },\n\t{ X86_INS_FXCH, \"fxch\" },\n\t{ X86_INS_SUBPD, \"subpd\" },\n\t{ X86_INS_SUBPS, \"subps\" },\n\t{ X86_INS_FSUBR, \"fsubr\" },\n\t{ X86_INS_FISUBR, \"fisubr\" },\n\t{ X86_INS_FSUBRP, \"fsubrp\" },\n\t{ X86_INS_SUBSD, \"subsd\" },\n\t{ X86_INS_SUBSS, \"subss\" },\n\t{ X86_INS_FSUB, \"fsub\" },\n\t{ X86_INS_FISUB, \"fisub\" },\n\t{ X86_INS_FSUBP, \"fsubp\" },\n\t{ X86_INS_SWAPGS, \"swapgs\" },\n\t{ X86_INS_SYSCALL, \"syscall\" },\n\t{ X86_INS_SYSENTER, \"sysenter\" },\n\t{ X86_INS_SYSEXIT, \"sysexit\" },\n\t{ X86_INS_SYSRET, \"sysret\" },\n\t{ X86_INS_T1MSKC, \"t1mskc\" },\n\t{ X86_INS_TEST, \"test\" },\n\t{ X86_INS_UD2, \"ud2\" },\n\t{ X86_INS_FTST, \"ftst\" },\n\t{ X86_INS_TZCNT, \"tzcnt\" },\n\t{ X86_INS_TZMSK, \"tzmsk\" },\n\t{ X86_INS_FUCOMPI, \"fucompi\" },\n\t{ X86_INS_FUCOMI, \"fucomi\" },\n\t{ X86_INS_FUCOMPP, \"fucompp\" },\n\t{ X86_INS_FUCOMP, \"fucomp\" },\n\t{ X86_INS_FUCOM, \"fucom\" },\n\t{ X86_INS_UD2B, \"ud2b\" },\n\t{ X86_INS_UNPCKHPD, \"unpckhpd\" },\n\t{ X86_INS_UNPCKHPS, \"unpckhps\" },\n\t{ X86_INS_UNPCKLPD, \"unpcklpd\" },\n\t{ X86_INS_UNPCKLPS, \"unpcklps\" },\n\t{ X86_INS_VADDPD, \"vaddpd\" },\n\t{ X86_INS_VADDPS, \"vaddps\" },\n\t{ X86_INS_VADDSD, \"vaddsd\" },\n\t{ X86_INS_VADDSS, \"vaddss\" },\n\t{ X86_INS_VADDSUBPD, \"vaddsubpd\" },\n\t{ X86_INS_VADDSUBPS, \"vaddsubps\" },\n\t{ X86_INS_VAESDECLAST, \"vaesdeclast\" },\n\t{ X86_INS_VAESDEC, \"vaesdec\" },\n\t{ X86_INS_VAESENCLAST, \"vaesenclast\" },\n\t{ X86_INS_VAESENC, \"vaesenc\" },\n\t{ X86_INS_VAESIMC, \"vaesimc\" },\n\t{ X86_INS_VAESKEYGENASSIST, \"vaeskeygenassist\" },\n\t{ X86_INS_VALIGND, \"valignd\" },\n\t{ X86_INS_VALIGNQ, \"valignq\" },\n\t{ X86_INS_VANDNPD, \"vandnpd\" },\n\t{ X86_INS_VANDNPS, \"vandnps\" },\n\t{ X86_INS_VANDPD, \"vandpd\" },\n\t{ X86_INS_VANDPS, \"vandps\" },\n\t{ X86_INS_VBLENDMPD, \"vblendmpd\" },\n\t{ X86_INS_VBLENDMPS, \"vblendmps\" },\n\t{ X86_INS_VBLENDPD, \"vblendpd\" },\n\t{ X86_INS_VBLENDPS, \"vblendps\" },\n\t{ X86_INS_VBLENDVPD, \"vblendvpd\" },\n\t{ X86_INS_VBLENDVPS, \"vblendvps\" },\n\t{ X86_INS_VBROADCASTF128, \"vbroadcastf128\" },\n\t{ X86_INS_VBROADCASTI32X4, \"vbroadcasti32x4\" },\n\t{ X86_INS_VBROADCASTI64X4, \"vbroadcasti64x4\" },\n\t{ X86_INS_VBROADCASTSD, \"vbroadcastsd\" },\n\t{ X86_INS_VBROADCASTSS, \"vbroadcastss\" },\n\t{ X86_INS_VCOMPRESSPD, \"vcompresspd\" },\n\t{ X86_INS_VCOMPRESSPS, \"vcompressps\" },\n\t{ X86_INS_VCVTDQ2PD, \"vcvtdq2pd\" },\n\t{ X86_INS_VCVTDQ2PS, \"vcvtdq2ps\" },\n\t{ X86_INS_VCVTPD2DQX, \"vcvtpd2dqx\" },\n\t{ X86_INS_VCVTPD2DQ, \"vcvtpd2dq\" },\n\t{ X86_INS_VCVTPD2PSX, \"vcvtpd2psx\" },\n\t{ X86_INS_VCVTPD2PS, \"vcvtpd2ps\" },\n\t{ X86_INS_VCVTPD2UDQ, \"vcvtpd2udq\" },\n\t{ X86_INS_VCVTPH2PS, \"vcvtph2ps\" },\n\t{ X86_INS_VCVTPS2DQ, \"vcvtps2dq\" },\n\t{ X86_INS_VCVTPS2PD, \"vcvtps2pd\" },\n\t{ X86_INS_VCVTPS2PH, \"vcvtps2ph\" },\n\t{ X86_INS_VCVTPS2UDQ, \"vcvtps2udq\" },\n\t{ X86_INS_VCVTSD2SI, \"vcvtsd2si\" },\n\t{ X86_INS_VCVTSD2USI, \"vcvtsd2usi\" },\n\t{ X86_INS_VCVTSS2SI, \"vcvtss2si\" },\n\t{ X86_INS_VCVTSS2USI, \"vcvtss2usi\" },\n\t{ X86_INS_VCVTTPD2DQX, \"vcvttpd2dqx\" },\n\t{ X86_INS_VCVTTPD2DQ, \"vcvttpd2dq\" },\n\t{ X86_INS_VCVTTPD2UDQ, \"vcvttpd2udq\" },\n\t{ X86_INS_VCVTTPS2DQ, \"vcvttps2dq\" },\n\t{ X86_INS_VCVTTPS2UDQ, \"vcvttps2udq\" },\n\t{ X86_INS_VCVTUDQ2PD, \"vcvtudq2pd\" },\n\t{ X86_INS_VCVTUDQ2PS, \"vcvtudq2ps\" },\n\t{ X86_INS_VDIVPD, \"vdivpd\" },\n\t{ X86_INS_VDIVPS, \"vdivps\" },\n\t{ X86_INS_VDIVSD, \"vdivsd\" },\n\t{ X86_INS_VDIVSS, \"vdivss\" },\n\t{ X86_INS_VDPPD, \"vdppd\" },\n\t{ X86_INS_VDPPS, \"vdpps\" },\n\t{ X86_INS_VERR, \"verr\" },\n\t{ X86_INS_VERW, \"verw\" },\n\t{ X86_INS_VEXP2PD, \"vexp2pd\" },\n\t{ X86_INS_VEXP2PS, \"vexp2ps\" },\n\t{ X86_INS_VEXPANDPD, \"vexpandpd\" },\n\t{ X86_INS_VEXPANDPS, \"vexpandps\" },\n\t{ X86_INS_VEXTRACTF128, \"vextractf128\" },\n\t{ X86_INS_VEXTRACTF32X4, \"vextractf32x4\" },\n\t{ X86_INS_VEXTRACTF64X4, \"vextractf64x4\" },\n\t{ X86_INS_VEXTRACTI128, \"vextracti128\" },\n\t{ X86_INS_VEXTRACTI32X4, \"vextracti32x4\" },\n\t{ X86_INS_VEXTRACTI64X4, \"vextracti64x4\" },\n\t{ X86_INS_VEXTRACTPS, \"vextractps\" },\n\t{ X86_INS_VFMADD132PD, \"vfmadd132pd\" },\n\t{ X86_INS_VFMADD132PS, \"vfmadd132ps\" },\n\t{ X86_INS_VFMADDPD, \"vfmaddpd\" },\n\t{ X86_INS_VFMADD213PD, \"vfmadd213pd\" },\n\t{ X86_INS_VFMADD231PD, \"vfmadd231pd\" },\n\t{ X86_INS_VFMADDPS, \"vfmaddps\" },\n\t{ X86_INS_VFMADD213PS, \"vfmadd213ps\" },\n\t{ X86_INS_VFMADD231PS, \"vfmadd231ps\" },\n\t{ X86_INS_VFMADDSD, \"vfmaddsd\" },\n\t{ X86_INS_VFMADD213SD, \"vfmadd213sd\" },\n\t{ X86_INS_VFMADD132SD, \"vfmadd132sd\" },\n\t{ X86_INS_VFMADD231SD, \"vfmadd231sd\" },\n\t{ X86_INS_VFMADDSS, \"vfmaddss\" },\n\t{ X86_INS_VFMADD213SS, \"vfmadd213ss\" },\n\t{ X86_INS_VFMADD132SS, \"vfmadd132ss\" },\n\t{ X86_INS_VFMADD231SS, \"vfmadd231ss\" },\n\t{ X86_INS_VFMADDSUB132PD, \"vfmaddsub132pd\" },\n\t{ X86_INS_VFMADDSUB132PS, \"vfmaddsub132ps\" },\n\t{ X86_INS_VFMADDSUBPD, \"vfmaddsubpd\" },\n\t{ X86_INS_VFMADDSUB213PD, \"vfmaddsub213pd\" },\n\t{ X86_INS_VFMADDSUB231PD, \"vfmaddsub231pd\" },\n\t{ X86_INS_VFMADDSUBPS, \"vfmaddsubps\" },\n\t{ X86_INS_VFMADDSUB213PS, \"vfmaddsub213ps\" },\n\t{ X86_INS_VFMADDSUB231PS, \"vfmaddsub231ps\" },\n\t{ X86_INS_VFMSUB132PD, \"vfmsub132pd\" },\n\t{ X86_INS_VFMSUB132PS, \"vfmsub132ps\" },\n\t{ X86_INS_VFMSUBADD132PD, \"vfmsubadd132pd\" },\n\t{ X86_INS_VFMSUBADD132PS, \"vfmsubadd132ps\" },\n\t{ X86_INS_VFMSUBADDPD, \"vfmsubaddpd\" },\n\t{ X86_INS_VFMSUBADD213PD, \"vfmsubadd213pd\" },\n\t{ X86_INS_VFMSUBADD231PD, \"vfmsubadd231pd\" },\n\t{ X86_INS_VFMSUBADDPS, \"vfmsubaddps\" },\n\t{ X86_INS_VFMSUBADD213PS, \"vfmsubadd213ps\" },\n\t{ X86_INS_VFMSUBADD231PS, \"vfmsubadd231ps\" },\n\t{ X86_INS_VFMSUBPD, \"vfmsubpd\" },\n\t{ X86_INS_VFMSUB213PD, \"vfmsub213pd\" },\n\t{ X86_INS_VFMSUB231PD, \"vfmsub231pd\" },\n\t{ X86_INS_VFMSUBPS, \"vfmsubps\" },\n\t{ X86_INS_VFMSUB213PS, \"vfmsub213ps\" },\n\t{ X86_INS_VFMSUB231PS, \"vfmsub231ps\" },\n\t{ X86_INS_VFMSUBSD, \"vfmsubsd\" },\n\t{ X86_INS_VFMSUB213SD, \"vfmsub213sd\" },\n\t{ X86_INS_VFMSUB132SD, \"vfmsub132sd\" },\n\t{ X86_INS_VFMSUB231SD, \"vfmsub231sd\" },\n\t{ X86_INS_VFMSUBSS, \"vfmsubss\" },\n\t{ X86_INS_VFMSUB213SS, \"vfmsub213ss\" },\n\t{ X86_INS_VFMSUB132SS, \"vfmsub132ss\" },\n\t{ X86_INS_VFMSUB231SS, \"vfmsub231ss\" },\n\t{ X86_INS_VFNMADD132PD, \"vfnmadd132pd\" },\n\t{ X86_INS_VFNMADD132PS, \"vfnmadd132ps\" },\n\t{ X86_INS_VFNMADDPD, \"vfnmaddpd\" },\n\t{ X86_INS_VFNMADD213PD, \"vfnmadd213pd\" },\n\t{ X86_INS_VFNMADD231PD, \"vfnmadd231pd\" },\n\t{ X86_INS_VFNMADDPS, \"vfnmaddps\" },\n\t{ X86_INS_VFNMADD213PS, \"vfnmadd213ps\" },\n\t{ X86_INS_VFNMADD231PS, \"vfnmadd231ps\" },\n\t{ X86_INS_VFNMADDSD, \"vfnmaddsd\" },\n\t{ X86_INS_VFNMADD213SD, \"vfnmadd213sd\" },\n\t{ X86_INS_VFNMADD132SD, \"vfnmadd132sd\" },\n\t{ X86_INS_VFNMADD231SD, \"vfnmadd231sd\" },\n\t{ X86_INS_VFNMADDSS, \"vfnmaddss\" },\n\t{ X86_INS_VFNMADD213SS, \"vfnmadd213ss\" },\n\t{ X86_INS_VFNMADD132SS, \"vfnmadd132ss\" },\n\t{ X86_INS_VFNMADD231SS, \"vfnmadd231ss\" },\n\t{ X86_INS_VFNMSUB132PD, \"vfnmsub132pd\" },\n\t{ X86_INS_VFNMSUB132PS, \"vfnmsub132ps\" },\n\t{ X86_INS_VFNMSUBPD, \"vfnmsubpd\" },\n\t{ X86_INS_VFNMSUB213PD, \"vfnmsub213pd\" },\n\t{ X86_INS_VFNMSUB231PD, \"vfnmsub231pd\" },\n\t{ X86_INS_VFNMSUBPS, \"vfnmsubps\" },\n\t{ X86_INS_VFNMSUB213PS, \"vfnmsub213ps\" },\n\t{ X86_INS_VFNMSUB231PS, \"vfnmsub231ps\" },\n\t{ X86_INS_VFNMSUBSD, \"vfnmsubsd\" },\n\t{ X86_INS_VFNMSUB213SD, \"vfnmsub213sd\" },\n\t{ X86_INS_VFNMSUB132SD, \"vfnmsub132sd\" },\n\t{ X86_INS_VFNMSUB231SD, \"vfnmsub231sd\" },\n\t{ X86_INS_VFNMSUBSS, \"vfnmsubss\" },\n\t{ X86_INS_VFNMSUB213SS, \"vfnmsub213ss\" },\n\t{ X86_INS_VFNMSUB132SS, \"vfnmsub132ss\" },\n\t{ X86_INS_VFNMSUB231SS, \"vfnmsub231ss\" },\n\t{ X86_INS_VFRCZPD, \"vfrczpd\" },\n\t{ X86_INS_VFRCZPS, \"vfrczps\" },\n\t{ X86_INS_VFRCZSD, \"vfrczsd\" },\n\t{ X86_INS_VFRCZSS, \"vfrczss\" },\n\t{ X86_INS_VORPD, \"vorpd\" },\n\t{ X86_INS_VORPS, \"vorps\" },\n\t{ X86_INS_VXORPD, \"vxorpd\" },\n\t{ X86_INS_VXORPS, \"vxorps\" },\n\t{ X86_INS_VGATHERDPD, \"vgatherdpd\" },\n\t{ X86_INS_VGATHERDPS, \"vgatherdps\" },\n\t{ X86_INS_VGATHERPF0DPD, \"vgatherpf0dpd\" },\n\t{ X86_INS_VGATHERPF0DPS, \"vgatherpf0dps\" },\n\t{ X86_INS_VGATHERPF0QPD, \"vgatherpf0qpd\" },\n\t{ X86_INS_VGATHERPF0QPS, \"vgatherpf0qps\" },\n\t{ X86_INS_VGATHERPF1DPD, \"vgatherpf1dpd\" },\n\t{ X86_INS_VGATHERPF1DPS, \"vgatherpf1dps\" },\n\t{ X86_INS_VGATHERPF1QPD, \"vgatherpf1qpd\" },\n\t{ X86_INS_VGATHERPF1QPS, \"vgatherpf1qps\" },\n\t{ X86_INS_VGATHERQPD, \"vgatherqpd\" },\n\t{ X86_INS_VGATHERQPS, \"vgatherqps\" },\n\t{ X86_INS_VHADDPD, \"vhaddpd\" },\n\t{ X86_INS_VHADDPS, \"vhaddps\" },\n\t{ X86_INS_VHSUBPD, \"vhsubpd\" },\n\t{ X86_INS_VHSUBPS, \"vhsubps\" },\n\t{ X86_INS_VINSERTF128, \"vinsertf128\" },\n\t{ X86_INS_VINSERTF32X4, \"vinsertf32x4\" },\n\t{ X86_INS_VINSERTF32X8, \"vinsertf32x8\" },\n\t{ X86_INS_VINSERTF64X2, \"vinsertf64x2\" },\n\t{ X86_INS_VINSERTF64X4, \"vinsertf64x4\" },\n\t{ X86_INS_VINSERTI128, \"vinserti128\" },\n\t{ X86_INS_VINSERTI32X4, \"vinserti32x4\" },\n\t{ X86_INS_VINSERTI32X8, \"vinserti32x8\" },\n\t{ X86_INS_VINSERTI64X2, \"vinserti64x2\" },\n\t{ X86_INS_VINSERTI64X4, \"vinserti64x4\" },\n\t{ X86_INS_VINSERTPS, \"vinsertps\" },\n\t{ X86_INS_VLDDQU, \"vlddqu\" },\n\t{ X86_INS_VLDMXCSR, \"vldmxcsr\" },\n\t{ X86_INS_VMASKMOVDQU, \"vmaskmovdqu\" },\n\t{ X86_INS_VMASKMOVPD, \"vmaskmovpd\" },\n\t{ X86_INS_VMASKMOVPS, \"vmaskmovps\" },\n\t{ X86_INS_VMAXPD, \"vmaxpd\" },\n\t{ X86_INS_VMAXPS, \"vmaxps\" },\n\t{ X86_INS_VMAXSD, \"vmaxsd\" },\n\t{ X86_INS_VMAXSS, \"vmaxss\" },\n\t{ X86_INS_VMCALL, \"vmcall\" },\n\t{ X86_INS_VMCLEAR, \"vmclear\" },\n\t{ X86_INS_VMFUNC, \"vmfunc\" },\n\t{ X86_INS_VMINPD, \"vminpd\" },\n\t{ X86_INS_VMINPS, \"vminps\" },\n\t{ X86_INS_VMINSD, \"vminsd\" },\n\t{ X86_INS_VMINSS, \"vminss\" },\n\t{ X86_INS_VMLAUNCH, \"vmlaunch\" },\n\t{ X86_INS_VMLOAD, \"vmload\" },\n\t{ X86_INS_VMMCALL, \"vmmcall\" },\n\t{ X86_INS_VMOVQ, \"vmovq\" },\n\t{ X86_INS_VMOVDDUP, \"vmovddup\" },\n\t{ X86_INS_VMOVD, \"vmovd\" },\n\t{ X86_INS_VMOVDQA32, \"vmovdqa32\" },\n\t{ X86_INS_VMOVDQA64, \"vmovdqa64\" },\n\t{ X86_INS_VMOVDQA, \"vmovdqa\" },\n\t{ X86_INS_VMOVDQU16, \"vmovdqu16\" },\n\t{ X86_INS_VMOVDQU32, \"vmovdqu32\" },\n\t{ X86_INS_VMOVDQU64, \"vmovdqu64\" },\n\t{ X86_INS_VMOVDQU8, \"vmovdqu8\" },\n\t{ X86_INS_VMOVDQU, \"vmovdqu\" },\n\t{ X86_INS_VMOVHLPS, \"vmovhlps\" },\n\t{ X86_INS_VMOVHPD, \"vmovhpd\" },\n\t{ X86_INS_VMOVHPS, \"vmovhps\" },\n\t{ X86_INS_VMOVLHPS, \"vmovlhps\" },\n\t{ X86_INS_VMOVLPD, \"vmovlpd\" },\n\t{ X86_INS_VMOVLPS, \"vmovlps\" },\n\t{ X86_INS_VMOVMSKPD, \"vmovmskpd\" },\n\t{ X86_INS_VMOVMSKPS, \"vmovmskps\" },\n\t{ X86_INS_VMOVNTDQA, \"vmovntdqa\" },\n\t{ X86_INS_VMOVNTDQ, \"vmovntdq\" },\n\t{ X86_INS_VMOVNTPD, \"vmovntpd\" },\n\t{ X86_INS_VMOVNTPS, \"vmovntps\" },\n\t{ X86_INS_VMOVSD, \"vmovsd\" },\n\t{ X86_INS_VMOVSHDUP, \"vmovshdup\" },\n\t{ X86_INS_VMOVSLDUP, \"vmovsldup\" },\n\t{ X86_INS_VMOVSS, \"vmovss\" },\n\t{ X86_INS_VMOVUPD, \"vmovupd\" },\n\t{ X86_INS_VMOVUPS, \"vmovups\" },\n\t{ X86_INS_VMPSADBW, \"vmpsadbw\" },\n\t{ X86_INS_VMPTRLD, \"vmptrld\" },\n\t{ X86_INS_VMPTRST, \"vmptrst\" },\n\t{ X86_INS_VMREAD, \"vmread\" },\n\t{ X86_INS_VMRESUME, \"vmresume\" },\n\t{ X86_INS_VMRUN, \"vmrun\" },\n\t{ X86_INS_VMSAVE, \"vmsave\" },\n\t{ X86_INS_VMULPD, \"vmulpd\" },\n\t{ X86_INS_VMULPS, \"vmulps\" },\n\t{ X86_INS_VMULSD, \"vmulsd\" },\n\t{ X86_INS_VMULSS, \"vmulss\" },\n\t{ X86_INS_VMWRITE, \"vmwrite\" },\n\t{ X86_INS_VMXOFF, \"vmxoff\" },\n\t{ X86_INS_VMXON, \"vmxon\" },\n\t{ X86_INS_VPABSB, \"vpabsb\" },\n\t{ X86_INS_VPABSD, \"vpabsd\" },\n\t{ X86_INS_VPABSQ, \"vpabsq\" },\n\t{ X86_INS_VPABSW, \"vpabsw\" },\n\t{ X86_INS_VPACKSSDW, \"vpackssdw\" },\n\t{ X86_INS_VPACKSSWB, \"vpacksswb\" },\n\t{ X86_INS_VPACKUSDW, \"vpackusdw\" },\n\t{ X86_INS_VPACKUSWB, \"vpackuswb\" },\n\t{ X86_INS_VPADDB, \"vpaddb\" },\n\t{ X86_INS_VPADDD, \"vpaddd\" },\n\t{ X86_INS_VPADDQ, \"vpaddq\" },\n\t{ X86_INS_VPADDSB, \"vpaddsb\" },\n\t{ X86_INS_VPADDSW, \"vpaddsw\" },\n\t{ X86_INS_VPADDUSB, \"vpaddusb\" },\n\t{ X86_INS_VPADDUSW, \"vpaddusw\" },\n\t{ X86_INS_VPADDW, \"vpaddw\" },\n\t{ X86_INS_VPALIGNR, \"vpalignr\" },\n\t{ X86_INS_VPANDD, \"vpandd\" },\n\t{ X86_INS_VPANDND, \"vpandnd\" },\n\t{ X86_INS_VPANDNQ, \"vpandnq\" },\n\t{ X86_INS_VPANDN, \"vpandn\" },\n\t{ X86_INS_VPANDQ, \"vpandq\" },\n\t{ X86_INS_VPAND, \"vpand\" },\n\t{ X86_INS_VPAVGB, \"vpavgb\" },\n\t{ X86_INS_VPAVGW, \"vpavgw\" },\n\t{ X86_INS_VPBLENDD, \"vpblendd\" },\n\t{ X86_INS_VPBLENDMB, \"vpblendmb\" },\n\t{ X86_INS_VPBLENDMD, \"vpblendmd\" },\n\t{ X86_INS_VPBLENDMQ, \"vpblendmq\" },\n\t{ X86_INS_VPBLENDMW, \"vpblendmw\" },\n\t{ X86_INS_VPBLENDVB, \"vpblendvb\" },\n\t{ X86_INS_VPBLENDW, \"vpblendw\" },\n\t{ X86_INS_VPBROADCASTB, \"vpbroadcastb\" },\n\t{ X86_INS_VPBROADCASTD, \"vpbroadcastd\" },\n\t{ X86_INS_VPBROADCASTMB2Q, \"vpbroadcastmb2q\" },\n\t{ X86_INS_VPBROADCASTMW2D, \"vpbroadcastmw2d\" },\n\t{ X86_INS_VPBROADCASTQ, \"vpbroadcastq\" },\n\t{ X86_INS_VPBROADCASTW, \"vpbroadcastw\" },\n\t{ X86_INS_VPCLMULQDQ, \"vpclmulqdq\" },\n\t{ X86_INS_VPCMOV, \"vpcmov\" },\n\t{ X86_INS_VPCMPB, \"vpcmpb\" },\n\t{ X86_INS_VPCMPD, \"vpcmpd\" },\n\t{ X86_INS_VPCMPEQB, \"vpcmpeqb\" },\n\t{ X86_INS_VPCMPEQD, \"vpcmpeqd\" },\n\t{ X86_INS_VPCMPEQQ, \"vpcmpeqq\" },\n\t{ X86_INS_VPCMPEQW, \"vpcmpeqw\" },\n\t{ X86_INS_VPCMPESTRI, \"vpcmpestri\" },\n\t{ X86_INS_VPCMPESTRM, \"vpcmpestrm\" },\n\t{ X86_INS_VPCMPGTB, \"vpcmpgtb\" },\n\t{ X86_INS_VPCMPGTD, \"vpcmpgtd\" },\n\t{ X86_INS_VPCMPGTQ, \"vpcmpgtq\" },\n\t{ X86_INS_VPCMPGTW, \"vpcmpgtw\" },\n\t{ X86_INS_VPCMPISTRI, \"vpcmpistri\" },\n\t{ X86_INS_VPCMPISTRM, \"vpcmpistrm\" },\n\t{ X86_INS_VPCMPQ, \"vpcmpq\" },\n\t{ X86_INS_VPCMPUB, \"vpcmpub\" },\n\t{ X86_INS_VPCMPUD, \"vpcmpud\" },\n\t{ X86_INS_VPCMPUQ, \"vpcmpuq\" },\n\t{ X86_INS_VPCMPUW, \"vpcmpuw\" },\n\t{ X86_INS_VPCMPW, \"vpcmpw\" },\n\t{ X86_INS_VPCOMB, \"vpcomb\" },\n\t{ X86_INS_VPCOMD, \"vpcomd\" },\n\t{ X86_INS_VPCOMPRESSD, \"vpcompressd\" },\n\t{ X86_INS_VPCOMPRESSQ, \"vpcompressq\" },\n\t{ X86_INS_VPCOMQ, \"vpcomq\" },\n\t{ X86_INS_VPCOMUB, \"vpcomub\" },\n\t{ X86_INS_VPCOMUD, \"vpcomud\" },\n\t{ X86_INS_VPCOMUQ, \"vpcomuq\" },\n\t{ X86_INS_VPCOMUW, \"vpcomuw\" },\n\t{ X86_INS_VPCOMW, \"vpcomw\" },\n\t{ X86_INS_VPCONFLICTD, \"vpconflictd\" },\n\t{ X86_INS_VPCONFLICTQ, \"vpconflictq\" },\n\t{ X86_INS_VPERM2F128, \"vperm2f128\" },\n\t{ X86_INS_VPERM2I128, \"vperm2i128\" },\n\t{ X86_INS_VPERMD, \"vpermd\" },\n\t{ X86_INS_VPERMI2D, \"vpermi2d\" },\n\t{ X86_INS_VPERMI2PD, \"vpermi2pd\" },\n\t{ X86_INS_VPERMI2PS, \"vpermi2ps\" },\n\t{ X86_INS_VPERMI2Q, \"vpermi2q\" },\n\t{ X86_INS_VPERMIL2PD, \"vpermil2pd\" },\n\t{ X86_INS_VPERMIL2PS, \"vpermil2ps\" },\n\t{ X86_INS_VPERMILPD, \"vpermilpd\" },\n\t{ X86_INS_VPERMILPS, \"vpermilps\" },\n\t{ X86_INS_VPERMPD, \"vpermpd\" },\n\t{ X86_INS_VPERMPS, \"vpermps\" },\n\t{ X86_INS_VPERMQ, \"vpermq\" },\n\t{ X86_INS_VPERMT2D, \"vpermt2d\" },\n\t{ X86_INS_VPERMT2PD, \"vpermt2pd\" },\n\t{ X86_INS_VPERMT2PS, \"vpermt2ps\" },\n\t{ X86_INS_VPERMT2Q, \"vpermt2q\" },\n\t{ X86_INS_VPEXPANDD, \"vpexpandd\" },\n\t{ X86_INS_VPEXPANDQ, \"vpexpandq\" },\n\t{ X86_INS_VPEXTRB, \"vpextrb\" },\n\t{ X86_INS_VPEXTRD, \"vpextrd\" },\n\t{ X86_INS_VPEXTRQ, \"vpextrq\" },\n\t{ X86_INS_VPEXTRW, \"vpextrw\" },\n\t{ X86_INS_VPGATHERDD, \"vpgatherdd\" },\n\t{ X86_INS_VPGATHERDQ, \"vpgatherdq\" },\n\t{ X86_INS_VPGATHERQD, \"vpgatherqd\" },\n\t{ X86_INS_VPGATHERQQ, \"vpgatherqq\" },\n\t{ X86_INS_VPHADDBD, \"vphaddbd\" },\n\t{ X86_INS_VPHADDBQ, \"vphaddbq\" },\n\t{ X86_INS_VPHADDBW, \"vphaddbw\" },\n\t{ X86_INS_VPHADDDQ, \"vphadddq\" },\n\t{ X86_INS_VPHADDD, \"vphaddd\" },\n\t{ X86_INS_VPHADDSW, \"vphaddsw\" },\n\t{ X86_INS_VPHADDUBD, \"vphaddubd\" },\n\t{ X86_INS_VPHADDUBQ, \"vphaddubq\" },\n\t{ X86_INS_VPHADDUBW, \"vphaddubw\" },\n\t{ X86_INS_VPHADDUDQ, \"vphaddudq\" },\n\t{ X86_INS_VPHADDUWD, \"vphadduwd\" },\n\t{ X86_INS_VPHADDUWQ, \"vphadduwq\" },\n\t{ X86_INS_VPHADDWD, \"vphaddwd\" },\n\t{ X86_INS_VPHADDWQ, \"vphaddwq\" },\n\t{ X86_INS_VPHADDW, \"vphaddw\" },\n\t{ X86_INS_VPHMINPOSUW, \"vphminposuw\" },\n\t{ X86_INS_VPHSUBBW, \"vphsubbw\" },\n\t{ X86_INS_VPHSUBDQ, \"vphsubdq\" },\n\t{ X86_INS_VPHSUBD, \"vphsubd\" },\n\t{ X86_INS_VPHSUBSW, \"vphsubsw\" },\n\t{ X86_INS_VPHSUBWD, \"vphsubwd\" },\n\t{ X86_INS_VPHSUBW, \"vphsubw\" },\n\t{ X86_INS_VPINSRB, \"vpinsrb\" },\n\t{ X86_INS_VPINSRD, \"vpinsrd\" },\n\t{ X86_INS_VPINSRQ, \"vpinsrq\" },\n\t{ X86_INS_VPINSRW, \"vpinsrw\" },\n\t{ X86_INS_VPLZCNTD, \"vplzcntd\" },\n\t{ X86_INS_VPLZCNTQ, \"vplzcntq\" },\n\t{ X86_INS_VPMACSDD, \"vpmacsdd\" },\n\t{ X86_INS_VPMACSDQH, \"vpmacsdqh\" },\n\t{ X86_INS_VPMACSDQL, \"vpmacsdql\" },\n\t{ X86_INS_VPMACSSDD, \"vpmacssdd\" },\n\t{ X86_INS_VPMACSSDQH, \"vpmacssdqh\" },\n\t{ X86_INS_VPMACSSDQL, \"vpmacssdql\" },\n\t{ X86_INS_VPMACSSWD, \"vpmacsswd\" },\n\t{ X86_INS_VPMACSSWW, \"vpmacssww\" },\n\t{ X86_INS_VPMACSWD, \"vpmacswd\" },\n\t{ X86_INS_VPMACSWW, \"vpmacsww\" },\n\t{ X86_INS_VPMADCSSWD, \"vpmadcsswd\" },\n\t{ X86_INS_VPMADCSWD, \"vpmadcswd\" },\n\t{ X86_INS_VPMADDUBSW, \"vpmaddubsw\" },\n\t{ X86_INS_VPMADDWD, \"vpmaddwd\" },\n\t{ X86_INS_VPMASKMOVD, \"vpmaskmovd\" },\n\t{ X86_INS_VPMASKMOVQ, \"vpmaskmovq\" },\n\t{ X86_INS_VPMAXSB, \"vpmaxsb\" },\n\t{ X86_INS_VPMAXSD, \"vpmaxsd\" },\n\t{ X86_INS_VPMAXSQ, \"vpmaxsq\" },\n\t{ X86_INS_VPMAXSW, \"vpmaxsw\" },\n\t{ X86_INS_VPMAXUB, \"vpmaxub\" },\n\t{ X86_INS_VPMAXUD, \"vpmaxud\" },\n\t{ X86_INS_VPMAXUQ, \"vpmaxuq\" },\n\t{ X86_INS_VPMAXUW, \"vpmaxuw\" },\n\t{ X86_INS_VPMINSB, \"vpminsb\" },\n\t{ X86_INS_VPMINSD, \"vpminsd\" },\n\t{ X86_INS_VPMINSQ, \"vpminsq\" },\n\t{ X86_INS_VPMINSW, \"vpminsw\" },\n\t{ X86_INS_VPMINUB, \"vpminub\" },\n\t{ X86_INS_VPMINUD, \"vpminud\" },\n\t{ X86_INS_VPMINUQ, \"vpminuq\" },\n\t{ X86_INS_VPMINUW, \"vpminuw\" },\n\t{ X86_INS_VPMOVDB, \"vpmovdb\" },\n\t{ X86_INS_VPMOVDW, \"vpmovdw\" },\n\t{ X86_INS_VPMOVM2B, \"vpmovm2b\" },\n\t{ X86_INS_VPMOVM2D, \"vpmovm2d\" },\n\t{ X86_INS_VPMOVM2Q, \"vpmovm2q\" },\n\t{ X86_INS_VPMOVM2W, \"vpmovm2w\" },\n\t{ X86_INS_VPMOVMSKB, \"vpmovmskb\" },\n\t{ X86_INS_VPMOVQB, \"vpmovqb\" },\n\t{ X86_INS_VPMOVQD, \"vpmovqd\" },\n\t{ X86_INS_VPMOVQW, \"vpmovqw\" },\n\t{ X86_INS_VPMOVSDB, \"vpmovsdb\" },\n\t{ X86_INS_VPMOVSDW, \"vpmovsdw\" },\n\t{ X86_INS_VPMOVSQB, \"vpmovsqb\" },\n\t{ X86_INS_VPMOVSQD, \"vpmovsqd\" },\n\t{ X86_INS_VPMOVSQW, \"vpmovsqw\" },\n\t{ X86_INS_VPMOVSXBD, \"vpmovsxbd\" },\n\t{ X86_INS_VPMOVSXBQ, \"vpmovsxbq\" },\n\t{ X86_INS_VPMOVSXBW, \"vpmovsxbw\" },\n\t{ X86_INS_VPMOVSXDQ, \"vpmovsxdq\" },\n\t{ X86_INS_VPMOVSXWD, \"vpmovsxwd\" },\n\t{ X86_INS_VPMOVSXWQ, \"vpmovsxwq\" },\n\t{ X86_INS_VPMOVUSDB, \"vpmovusdb\" },\n\t{ X86_INS_VPMOVUSDW, \"vpmovusdw\" },\n\t{ X86_INS_VPMOVUSQB, \"vpmovusqb\" },\n\t{ X86_INS_VPMOVUSQD, \"vpmovusqd\" },\n\t{ X86_INS_VPMOVUSQW, \"vpmovusqw\" },\n\t{ X86_INS_VPMOVZXBD, \"vpmovzxbd\" },\n\t{ X86_INS_VPMOVZXBQ, \"vpmovzxbq\" },\n\t{ X86_INS_VPMOVZXBW, \"vpmovzxbw\" },\n\t{ X86_INS_VPMOVZXDQ, \"vpmovzxdq\" },\n\t{ X86_INS_VPMOVZXWD, \"vpmovzxwd\" },\n\t{ X86_INS_VPMOVZXWQ, \"vpmovzxwq\" },\n\t{ X86_INS_VPMULDQ, \"vpmuldq\" },\n\t{ X86_INS_VPMULHRSW, \"vpmulhrsw\" },\n\t{ X86_INS_VPMULHUW, \"vpmulhuw\" },\n\t{ X86_INS_VPMULHW, \"vpmulhw\" },\n\t{ X86_INS_VPMULLD, \"vpmulld\" },\n\t{ X86_INS_VPMULLQ, \"vpmullq\" },\n\t{ X86_INS_VPMULLW, \"vpmullw\" },\n\t{ X86_INS_VPMULUDQ, \"vpmuludq\" },\n\t{ X86_INS_VPORD, \"vpord\" },\n\t{ X86_INS_VPORQ, \"vporq\" },\n\t{ X86_INS_VPOR, \"vpor\" },\n\t{ X86_INS_VPPERM, \"vpperm\" },\n\t{ X86_INS_VPROTB, \"vprotb\" },\n\t{ X86_INS_VPROTD, \"vprotd\" },\n\t{ X86_INS_VPROTQ, \"vprotq\" },\n\t{ X86_INS_VPROTW, \"vprotw\" },\n\t{ X86_INS_VPSADBW, \"vpsadbw\" },\n\t{ X86_INS_VPSCATTERDD, \"vpscatterdd\" },\n\t{ X86_INS_VPSCATTERDQ, \"vpscatterdq\" },\n\t{ X86_INS_VPSCATTERQD, \"vpscatterqd\" },\n\t{ X86_INS_VPSCATTERQQ, \"vpscatterqq\" },\n\t{ X86_INS_VPSHAB, \"vpshab\" },\n\t{ X86_INS_VPSHAD, \"vpshad\" },\n\t{ X86_INS_VPSHAQ, \"vpshaq\" },\n\t{ X86_INS_VPSHAW, \"vpshaw\" },\n\t{ X86_INS_VPSHLB, \"vpshlb\" },\n\t{ X86_INS_VPSHLD, \"vpshld\" },\n\t{ X86_INS_VPSHLQ, \"vpshlq\" },\n\t{ X86_INS_VPSHLW, \"vpshlw\" },\n\t{ X86_INS_VPSHUFB, \"vpshufb\" },\n\t{ X86_INS_VPSHUFD, \"vpshufd\" },\n\t{ X86_INS_VPSHUFHW, \"vpshufhw\" },\n\t{ X86_INS_VPSHUFLW, \"vpshuflw\" },\n\t{ X86_INS_VPSIGNB, \"vpsignb\" },\n\t{ X86_INS_VPSIGND, \"vpsignd\" },\n\t{ X86_INS_VPSIGNW, \"vpsignw\" },\n\t{ X86_INS_VPSLLDQ, \"vpslldq\" },\n\t{ X86_INS_VPSLLD, \"vpslld\" },\n\t{ X86_INS_VPSLLQ, \"vpsllq\" },\n\t{ X86_INS_VPSLLVD, \"vpsllvd\" },\n\t{ X86_INS_VPSLLVQ, \"vpsllvq\" },\n\t{ X86_INS_VPSLLW, \"vpsllw\" },\n\t{ X86_INS_VPSRAD, \"vpsrad\" },\n\t{ X86_INS_VPSRAQ, \"vpsraq\" },\n\t{ X86_INS_VPSRAVD, \"vpsravd\" },\n\t{ X86_INS_VPSRAVQ, \"vpsravq\" },\n\t{ X86_INS_VPSRAW, \"vpsraw\" },\n\t{ X86_INS_VPSRLDQ, \"vpsrldq\" },\n\t{ X86_INS_VPSRLD, \"vpsrld\" },\n\t{ X86_INS_VPSRLQ, \"vpsrlq\" },\n\t{ X86_INS_VPSRLVD, \"vpsrlvd\" },\n\t{ X86_INS_VPSRLVQ, \"vpsrlvq\" },\n\t{ X86_INS_VPSRLW, \"vpsrlw\" },\n\t{ X86_INS_VPSUBB, \"vpsubb\" },\n\t{ X86_INS_VPSUBD, \"vpsubd\" },\n\t{ X86_INS_VPSUBQ, \"vpsubq\" },\n\t{ X86_INS_VPSUBSB, \"vpsubsb\" },\n\t{ X86_INS_VPSUBSW, \"vpsubsw\" },\n\t{ X86_INS_VPSUBUSB, \"vpsubusb\" },\n\t{ X86_INS_VPSUBUSW, \"vpsubusw\" },\n\t{ X86_INS_VPSUBW, \"vpsubw\" },\n\t{ X86_INS_VPTESTMD, \"vptestmd\" },\n\t{ X86_INS_VPTESTMQ, \"vptestmq\" },\n\t{ X86_INS_VPTESTNMD, \"vptestnmd\" },\n\t{ X86_INS_VPTESTNMQ, \"vptestnmq\" },\n\t{ X86_INS_VPTEST, \"vptest\" },\n\t{ X86_INS_VPUNPCKHBW, \"vpunpckhbw\" },\n\t{ X86_INS_VPUNPCKHDQ, \"vpunpckhdq\" },\n\t{ X86_INS_VPUNPCKHQDQ, \"vpunpckhqdq\" },\n\t{ X86_INS_VPUNPCKHWD, \"vpunpckhwd\" },\n\t{ X86_INS_VPUNPCKLBW, \"vpunpcklbw\" },\n\t{ X86_INS_VPUNPCKLDQ, \"vpunpckldq\" },\n\t{ X86_INS_VPUNPCKLQDQ, \"vpunpcklqdq\" },\n\t{ X86_INS_VPUNPCKLWD, \"vpunpcklwd\" },\n\t{ X86_INS_VPXORD, \"vpxord\" },\n\t{ X86_INS_VPXORQ, \"vpxorq\" },\n\t{ X86_INS_VPXOR, \"vpxor\" },\n\t{ X86_INS_VRCP14PD, \"vrcp14pd\" },\n\t{ X86_INS_VRCP14PS, \"vrcp14ps\" },\n\t{ X86_INS_VRCP14SD, \"vrcp14sd\" },\n\t{ X86_INS_VRCP14SS, \"vrcp14ss\" },\n\t{ X86_INS_VRCP28PD, \"vrcp28pd\" },\n\t{ X86_INS_VRCP28PS, \"vrcp28ps\" },\n\t{ X86_INS_VRCP28SD, \"vrcp28sd\" },\n\t{ X86_INS_VRCP28SS, \"vrcp28ss\" },\n\t{ X86_INS_VRCPPS, \"vrcpps\" },\n\t{ X86_INS_VRCPSS, \"vrcpss\" },\n\t{ X86_INS_VRNDSCALEPD, \"vrndscalepd\" },\n\t{ X86_INS_VRNDSCALEPS, \"vrndscaleps\" },\n\t{ X86_INS_VRNDSCALESD, \"vrndscalesd\" },\n\t{ X86_INS_VRNDSCALESS, \"vrndscaless\" },\n\t{ X86_INS_VROUNDPD, \"vroundpd\" },\n\t{ X86_INS_VROUNDPS, \"vroundps\" },\n\t{ X86_INS_VROUNDSD, \"vroundsd\" },\n\t{ X86_INS_VROUNDSS, \"vroundss\" },\n\t{ X86_INS_VRSQRT14PD, \"vrsqrt14pd\" },\n\t{ X86_INS_VRSQRT14PS, \"vrsqrt14ps\" },\n\t{ X86_INS_VRSQRT14SD, \"vrsqrt14sd\" },\n\t{ X86_INS_VRSQRT14SS, \"vrsqrt14ss\" },\n\t{ X86_INS_VRSQRT28PD, \"vrsqrt28pd\" },\n\t{ X86_INS_VRSQRT28PS, \"vrsqrt28ps\" },\n\t{ X86_INS_VRSQRT28SD, \"vrsqrt28sd\" },\n\t{ X86_INS_VRSQRT28SS, \"vrsqrt28ss\" },\n\t{ X86_INS_VRSQRTPS, \"vrsqrtps\" },\n\t{ X86_INS_VRSQRTSS, \"vrsqrtss\" },\n\t{ X86_INS_VSCATTERDPD, \"vscatterdpd\" },\n\t{ X86_INS_VSCATTERDPS, \"vscatterdps\" },\n\t{ X86_INS_VSCATTERPF0DPD, \"vscatterpf0dpd\" },\n\t{ X86_INS_VSCATTERPF0DPS, \"vscatterpf0dps\" },\n\t{ X86_INS_VSCATTERPF0QPD, \"vscatterpf0qpd\" },\n\t{ X86_INS_VSCATTERPF0QPS, \"vscatterpf0qps\" },\n\t{ X86_INS_VSCATTERPF1DPD, \"vscatterpf1dpd\" },\n\t{ X86_INS_VSCATTERPF1DPS, \"vscatterpf1dps\" },\n\t{ X86_INS_VSCATTERPF1QPD, \"vscatterpf1qpd\" },\n\t{ X86_INS_VSCATTERPF1QPS, \"vscatterpf1qps\" },\n\t{ X86_INS_VSCATTERQPD, \"vscatterqpd\" },\n\t{ X86_INS_VSCATTERQPS, \"vscatterqps\" },\n\t{ X86_INS_VSHUFPD, \"vshufpd\" },\n\t{ X86_INS_VSHUFPS, \"vshufps\" },\n\t{ X86_INS_VSQRTPD, \"vsqrtpd\" },\n\t{ X86_INS_VSQRTPS, \"vsqrtps\" },\n\t{ X86_INS_VSQRTSD, \"vsqrtsd\" },\n\t{ X86_INS_VSQRTSS, \"vsqrtss\" },\n\t{ X86_INS_VSTMXCSR, \"vstmxcsr\" },\n\t{ X86_INS_VSUBPD, \"vsubpd\" },\n\t{ X86_INS_VSUBPS, \"vsubps\" },\n\t{ X86_INS_VSUBSD, \"vsubsd\" },\n\t{ X86_INS_VSUBSS, \"vsubss\" },\n\t{ X86_INS_VTESTPD, \"vtestpd\" },\n\t{ X86_INS_VTESTPS, \"vtestps\" },\n\t{ X86_INS_VUNPCKHPD, \"vunpckhpd\" },\n\t{ X86_INS_VUNPCKHPS, \"vunpckhps\" },\n\t{ X86_INS_VUNPCKLPD, \"vunpcklpd\" },\n\t{ X86_INS_VUNPCKLPS, \"vunpcklps\" },\n\t{ X86_INS_VZEROALL, \"vzeroall\" },\n\t{ X86_INS_VZEROUPPER, \"vzeroupper\" },\n\t{ X86_INS_WAIT, \"wait\" },\n\t{ X86_INS_WBINVD, \"wbinvd\" },\n\t{ X86_INS_WRFSBASE, \"wrfsbase\" },\n\t{ X86_INS_WRGSBASE, \"wrgsbase\" },\n\t{ X86_INS_WRMSR, \"wrmsr\" },\n\t{ X86_INS_XABORT, \"xabort\" },\n\t{ X86_INS_XACQUIRE, \"xacquire\" },\n\t{ X86_INS_XBEGIN, \"xbegin\" },\n\t{ X86_INS_XCHG, \"xchg\" },\n\t{ X86_INS_XCRYPTCBC, \"xcryptcbc\" },\n\t{ X86_INS_XCRYPTCFB, \"xcryptcfb\" },\n\t{ X86_INS_XCRYPTCTR, \"xcryptctr\" },\n\t{ X86_INS_XCRYPTECB, \"xcryptecb\" },\n\t{ X86_INS_XCRYPTOFB, \"xcryptofb\" },\n\t{ X86_INS_XEND, \"xend\" },\n\t{ X86_INS_XGETBV, \"xgetbv\" },\n\t{ X86_INS_XLATB, \"xlatb\" },\n\t{ X86_INS_XRELEASE, \"xrelease\" },\n\t{ X86_INS_XRSTOR, \"xrstor\" },\n\t{ X86_INS_XRSTOR64, \"xrstor64\" },\n\t{ X86_INS_XRSTORS, \"xrstors\" },\n\t{ X86_INS_XRSTORS64, \"xrstors64\" },\n\t{ X86_INS_XSAVE, \"xsave\" },\n\t{ X86_INS_XSAVE64, \"xsave64\" },\n\t{ X86_INS_XSAVEC, \"xsavec\" },\n\t{ X86_INS_XSAVEC64, \"xsavec64\" },\n\t{ X86_INS_XSAVEOPT, \"xsaveopt\" },\n\t{ X86_INS_XSAVEOPT64, \"xsaveopt64\" },\n\t{ X86_INS_XSAVES, \"xsaves\" },\n\t{ X86_INS_XSAVES64, \"xsaves64\" },\n\t{ X86_INS_XSETBV, \"xsetbv\" },\n\t{ X86_INS_XSHA1, \"xsha1\" },\n\t{ X86_INS_XSHA256, \"xsha256\" },\n\t{ X86_INS_XSTORE, \"xstore\" },\n\t{ X86_INS_XTEST, \"xtest\" },\n\t{ X86_INS_FDISI8087_NOP, \"fdisi8087_nop\" },\n\t{ X86_INS_FENI8087_NOP, \"feni8087_nop\" },\n\n\t// pseudo instructions\n\t{ X86_INS_CMPSS, \"cmpss\" },\n\t{ X86_INS_CMPEQSS, \"cmpeqss\" },\n\t{ X86_INS_CMPLTSS, \"cmpltss\" },\n\t{ X86_INS_CMPLESS, \"cmpless\" },\n\t{ X86_INS_CMPUNORDSS, \"cmpunordss\" },\n\t{ X86_INS_CMPNEQSS, \"cmpneqss\" },\n\t{ X86_INS_CMPNLTSS, \"cmpnltss\" },\n\t{ X86_INS_CMPNLESS, \"cmpnless\" },\n\t{ X86_INS_CMPORDSS, \"cmpordss\" },\n\n\t{ X86_INS_CMPSD, \"cmpsd\" },\n\t{ X86_INS_CMPEQSD, \"cmpeqsd\" },\n\t{ X86_INS_CMPLTSD, \"cmpltsd\" },\n\t{ X86_INS_CMPLESD, \"cmplesd\" },\n\t{ X86_INS_CMPUNORDSD, \"cmpunordsd\" },\n\t{ X86_INS_CMPNEQSD, \"cmpneqsd\" },\n\t{ X86_INS_CMPNLTSD, \"cmpnltsd\" },\n\t{ X86_INS_CMPNLESD, \"cmpnlesd\" },\n\t{ X86_INS_CMPORDSD, \"cmpordsd\" },\n\n\t{ X86_INS_CMPPS, \"cmpps\" },\n\t{ X86_INS_CMPEQPS, \"cmpeqps\" },\n\t{ X86_INS_CMPLTPS, \"cmpltps\" },\n\t{ X86_INS_CMPLEPS, \"cmpleps\" },\n\t{ X86_INS_CMPUNORDPS, \"cmpunordps\" },\n\t{ X86_INS_CMPNEQPS, \"cmpneqps\" },\n\t{ X86_INS_CMPNLTPS, \"cmpnltps\" },\n\t{ X86_INS_CMPNLEPS, \"cmpnleps\" },\n\t{ X86_INS_CMPORDPS, \"cmpordps\" },\n\n\t{ X86_INS_CMPPD, \"cmppd\" },\n\t{ X86_INS_CMPEQPD, \"cmpeqpd\" },\n\t{ X86_INS_CMPLTPD, \"cmpltpd\" },\n\t{ X86_INS_CMPLEPD, \"cmplepd\" },\n\t{ X86_INS_CMPUNORDPD, \"cmpunordpd\" },\n\t{ X86_INS_CMPNEQPD, \"cmpneqpd\" },\n\t{ X86_INS_CMPNLTPD, \"cmpnltpd\" },\n\t{ X86_INS_CMPNLEPD, \"cmpnlepd\" },\n\t{ X86_INS_CMPORDPD, \"cmpordpd\" },\n\n\t{ X86_INS_VCMPSS, \"vcmpss\" },\n\t{ X86_INS_VCMPEQSS, \"vcmpeqss\" },\n\t{ X86_INS_VCMPLTSS, \"vcmpltss\" },\n\t{ X86_INS_VCMPLESS, \"vcmpless\" },\n\t{ X86_INS_VCMPUNORDSS, \"vcmpunordss\" },\n\t{ X86_INS_VCMPNEQSS, \"vcmpneqss\" },\n\t{ X86_INS_VCMPNLTSS, \"vcmpnltss\" },\n\t{ X86_INS_VCMPNLESS, \"vcmpnless\" },\n\t{ X86_INS_VCMPORDSS, \"vcmpordss\" },\n\t{ X86_INS_VCMPEQ_UQSS, \"vcmpeq_uqss\" },\n\t{ X86_INS_VCMPNGESS, \"vcmpngess\" },\n\t{ X86_INS_VCMPNGTSS, \"vcmpngtss\" },\n\t{ X86_INS_VCMPFALSESS, \"vcmpfalsess\" },\n\t{ X86_INS_VCMPNEQ_OQSS, \"vcmpneq_oqss\" },\n\t{ X86_INS_VCMPGESS, \"vcmpgess\" },\n\t{ X86_INS_VCMPGTSS, \"vcmpgtss\" },\n\t{ X86_INS_VCMPTRUESS, \"vcmptruess\" },\n\t{ X86_INS_VCMPEQ_OSSS, \"vcmpeq_osss\" },\n\t{ X86_INS_VCMPLT_OQSS, \"vcmplt_oqss\" },\n\t{ X86_INS_VCMPLE_OQSS, \"vcmple_oqss\" },\n\t{ X86_INS_VCMPUNORD_SSS, \"vcmpunord_sss\" },\n\t{ X86_INS_VCMPNEQ_USSS, \"vcmpneq_usss\" },\n\t{ X86_INS_VCMPNLT_UQSS, \"vcmpnlt_uqss\" },\n\t{ X86_INS_VCMPNLE_UQSS, \"vcmpnle_uqss\" },\n\t{ X86_INS_VCMPORD_SSS, \"vcmpord_sss\" },\n\t{ X86_INS_VCMPEQ_USSS, \"vcmpeq_usss\" },\n\t{ X86_INS_VCMPNGE_UQSS, \"vcmpnge_uqss\" },\n\t{ X86_INS_VCMPNGT_UQSS, \"vcmpngt_uqss\" },\n\t{ X86_INS_VCMPFALSE_OSSS, \"vcmpfalse_osss\" },\n\t{ X86_INS_VCMPNEQ_OSSS, \"vcmpneq_osss\" },\n\t{ X86_INS_VCMPGE_OQSS, \"vcmpge_oqss\" },\n\t{ X86_INS_VCMPGT_OQSS, \"vcmpgt_oqss\" },\n\t{ X86_INS_VCMPTRUE_USSS, \"vcmptrue_usss\" },\n\n\t{ X86_INS_VCMPSD, \"vcmpsd\" },\n\t{ X86_INS_VCMPEQSD, \"vcmpeqsd\" },\n\t{ X86_INS_VCMPLTSD, \"vcmpltsd\" },\n\t{ X86_INS_VCMPLESD, \"vcmplesd\" },\n\t{ X86_INS_VCMPUNORDSD, \"vcmpunordsd\" },\n\t{ X86_INS_VCMPNEQSD, \"vcmpneqsd\" },\n\t{ X86_INS_VCMPNLTSD, \"vcmpnltsd\" },\n\t{ X86_INS_VCMPNLESD, \"vcmpnlesd\" },\n\t{ X86_INS_VCMPORDSD, \"vcmpordsd\" },\n\t{ X86_INS_VCMPEQ_UQSD, \"vcmpeq_uqsd\" },\n\t{ X86_INS_VCMPNGESD, \"vcmpngesd\" },\n\t{ X86_INS_VCMPNGTSD, \"vcmpngtsd\" },\n\t{ X86_INS_VCMPFALSESD, \"vcmpfalsesd\" },\n\t{ X86_INS_VCMPNEQ_OQSD, \"vcmpneq_oqsd\" },\n\t{ X86_INS_VCMPGESD, \"vcmpgesd\" },\n\t{ X86_INS_VCMPGTSD, \"vcmpgtsd\" },\n\t{ X86_INS_VCMPTRUESD, \"vcmptruesd\" },\n\t{ X86_INS_VCMPEQ_OSSD, \"vcmpeq_ossd\" },\n\t{ X86_INS_VCMPLT_OQSD, \"vcmplt_oqsd\" },\n\t{ X86_INS_VCMPLE_OQSD, \"vcmple_oqsd\" },\n\t{ X86_INS_VCMPUNORD_SSD, \"vcmpunord_ssd\" },\n\t{ X86_INS_VCMPNEQ_USSD, \"vcmpneq_ussd\" },\n\t{ X86_INS_VCMPNLT_UQSD, \"vcmpnlt_uqsd\" },\n\t{ X86_INS_VCMPNLE_UQSD, \"vcmpnle_uqsd\" },\n\t{ X86_INS_VCMPORD_SSD, \"vcmpord_ssd\" },\n\t{ X86_INS_VCMPEQ_USSD, \"vcmpeq_ussd\" },\n\t{ X86_INS_VCMPNGE_UQSD, \"vcmpnge_uqsd\" },\n\t{ X86_INS_VCMPNGT_UQSD, \"vcmpngt_uqsd\" },\n\t{ X86_INS_VCMPFALSE_OSSD, \"vcmpfalse_ossd\" },\n\t{ X86_INS_VCMPNEQ_OSSD, \"vcmpneq_ossd\" },\n\t{ X86_INS_VCMPGE_OQSD, \"vcmpge_oqsd\" },\n\t{ X86_INS_VCMPGT_OQSD, \"vcmpgt_oqsd\" },\n\t{ X86_INS_VCMPTRUE_USSD, \"vcmptrue_ussd\" },\n\n\t{ X86_INS_VCMPPS, \"vcmpps\" },\n\t{ X86_INS_VCMPEQPS, \"vcmpeqps\" },\n\t{ X86_INS_VCMPLTPS, \"vcmpltps\" },\n\t{ X86_INS_VCMPLEPS, \"vcmpleps\" },\n\t{ X86_INS_VCMPUNORDPS, \"vcmpunordps\" },\n\t{ X86_INS_VCMPNEQPS, \"vcmpneqps\" },\n\t{ X86_INS_VCMPNLTPS, \"vcmpnltps\" },\n\t{ X86_INS_VCMPNLEPS, \"vcmpnleps\" },\n\t{ X86_INS_VCMPORDPS, \"vcmpordps\" },\n\t{ X86_INS_VCMPEQ_UQPS, \"vcmpeq_uqps\" },\n\t{ X86_INS_VCMPNGEPS, \"vcmpngeps\" },\n\t{ X86_INS_VCMPNGTPS, \"vcmpngtps\" },\n\t{ X86_INS_VCMPFALSEPS, \"vcmpfalseps\" },\n\t{ X86_INS_VCMPNEQ_OQPS, \"vcmpneq_oqps\" },\n\t{ X86_INS_VCMPGEPS, \"vcmpgeps\" },\n\t{ X86_INS_VCMPGTPS, \"vcmpgtps\" },\n\t{ X86_INS_VCMPTRUEPS, \"vcmptrueps\" },\n\t{ X86_INS_VCMPEQ_OSPS, \"vcmpeq_osps\" },\n\t{ X86_INS_VCMPLT_OQPS, \"vcmplt_oqps\" },\n\t{ X86_INS_VCMPLE_OQPS, \"vcmple_oqps\" },\n\t{ X86_INS_VCMPUNORD_SPS, \"vcmpunord_sps\" },\n\t{ X86_INS_VCMPNEQ_USPS, \"vcmpneq_usps\" },\n\t{ X86_INS_VCMPNLT_UQPS, \"vcmpnlt_uqps\" },\n\t{ X86_INS_VCMPNLE_UQPS, \"vcmpnle_uqps\" },\n\t{ X86_INS_VCMPORD_SPS, \"vcmpord_sps\" },\n\t{ X86_INS_VCMPEQ_USPS, \"vcmpeq_usps\" },\n\t{ X86_INS_VCMPNGE_UQPS, \"vcmpnge_uqps\" },\n\t{ X86_INS_VCMPNGT_UQPS, \"vcmpngt_uqps\" },\n\t{ X86_INS_VCMPFALSE_OSPS, \"vcmpfalse_osps\" },\n\t{ X86_INS_VCMPNEQ_OSPS, \"vcmpneq_osps\" },\n\t{ X86_INS_VCMPGE_OQPS, \"vcmpge_oqps\" },\n\t{ X86_INS_VCMPGT_OQPS, \"vcmpgt_oqps\" },\n\t{ X86_INS_VCMPTRUE_USPS, \"vcmptrue_usps\" },\n\n\t{ X86_INS_VCMPPD, \"vcmppd\" },\n\t{ X86_INS_VCMPEQPD, \"vcmpeqpd\" },\n\t{ X86_INS_VCMPLTPD, \"vcmpltpd\" },\n\t{ X86_INS_VCMPLEPD, \"vcmplepd\" },\n\t{ X86_INS_VCMPUNORDPD, \"vcmpunordpd\" },\n\t{ X86_INS_VCMPNEQPD, \"vcmpneqpd\" },\n\t{ X86_INS_VCMPNLTPD, \"vcmpnltpd\" },\n\t{ X86_INS_VCMPNLEPD, \"vcmpnlepd\" },\n\t{ X86_INS_VCMPORDPD, \"vcmpordpd\" },\n\t{ X86_INS_VCMPEQ_UQPD, \"vcmpeq_uqpd\" },\n\t{ X86_INS_VCMPNGEPD, \"vcmpngepd\" },\n\t{ X86_INS_VCMPNGTPD, \"vcmpngtpd\" },\n\t{ X86_INS_VCMPFALSEPD, \"vcmpfalsepd\" },\n\t{ X86_INS_VCMPNEQ_OQPD, \"vcmpneq_oqpd\" },\n\t{ X86_INS_VCMPGEPD, \"vcmpgepd\" },\n\t{ X86_INS_VCMPGTPD, \"vcmpgtpd\" },\n\t{ X86_INS_VCMPTRUEPD, \"vcmptruepd\" },\n\t{ X86_INS_VCMPEQ_OSPD, \"vcmpeq_ospd\" },\n\t{ X86_INS_VCMPLT_OQPD, \"vcmplt_oqpd\" },\n\t{ X86_INS_VCMPLE_OQPD, \"vcmple_oqpd\" },\n\t{ X86_INS_VCMPUNORD_SPD, \"vcmpunord_spd\" },\n\t{ X86_INS_VCMPNEQ_USPD, \"vcmpneq_uspd\" },\n\t{ X86_INS_VCMPNLT_UQPD, \"vcmpnlt_uqpd\" },\n\t{ X86_INS_VCMPNLE_UQPD, \"vcmpnle_uqpd\" },\n\t{ X86_INS_VCMPORD_SPD, \"vcmpord_spd\" },\n\t{ X86_INS_VCMPEQ_USPD, \"vcmpeq_uspd\" },\n\t{ X86_INS_VCMPNGE_UQPD, \"vcmpnge_uqpd\" },\n\t{ X86_INS_VCMPNGT_UQPD, \"vcmpngt_uqpd\" },\n\t{ X86_INS_VCMPFALSE_OSPD, \"vcmpfalse_ospd\" },\n\t{ X86_INS_VCMPNEQ_OSPD, \"vcmpneq_ospd\" },\n\t{ X86_INS_VCMPGE_OQPD, \"vcmpge_oqpd\" },\n\t{ X86_INS_VCMPGT_OQPD, \"vcmpgt_oqpd\" },\n\t{ X86_INS_VCMPTRUE_USPD, \"vcmptrue_uspd\" },\n};\n#endif\n\nconst char *X86_insn_name(csh handle, unsigned int id)\n{\n#ifndef CAPSTONE_DIET\n\tif (id >= X86_INS_ENDING)\n\t\treturn NULL;\n\n\treturn insn_name_maps[id].name;\n#else\n\treturn NULL;\n#endif\n}\n\n#ifndef CAPSTONE_DIET\nstatic name_map group_name_maps[] = {\n\t// generic groups\n\t{ X86_GRP_INVALID, NULL },\n\t{ X86_GRP_JUMP,\t\"jump\" },\n\t{ X86_GRP_CALL,\t\"call\" },\n\t{ X86_GRP_RET, \"ret\" },\n\t{ X86_GRP_INT, \"int\" },\n\t{ X86_GRP_IRET,\t\"iret\" },\n\t{ X86_GRP_PRIVILEGE, \"privilege\" },\n\n\t// architecture-specific groups\n\t{ X86_GRP_VM, \"vm\" },\n\t{ X86_GRP_3DNOW, \"3dnow\" },\n\t{ X86_GRP_AES, \"aes\" },\n\t{ X86_GRP_ADX, \"adx\" },\n\t{ X86_GRP_AVX, \"avx\" },\n\t{ X86_GRP_AVX2, \"avx2\" },\n\t{ X86_GRP_AVX512, \"avx512\" },\n\t{ X86_GRP_BMI, \"bmi\" },\n\t{ X86_GRP_BMI2, \"bmi2\" },\n\t{ X86_GRP_CMOV, \"cmov\" },\n\t{ X86_GRP_F16C, \"fc16\" },\n\t{ X86_GRP_FMA, \"fma\" },\n\t{ X86_GRP_FMA4, \"fma4\" },\n\t{ X86_GRP_FSGSBASE, \"fsgsbase\" },\n\t{ X86_GRP_HLE, \"hle\" },\n\t{ X86_GRP_MMX, \"mmx\" },\n\t{ X86_GRP_MODE32, \"mode32\" },\n\t{ X86_GRP_MODE64, \"mode64\" },\n\t{ X86_GRP_RTM, \"rtm\" },\n\t{ X86_GRP_SHA, \"sha\" },\n\t{ X86_GRP_SSE1, \"sse1\" },\n\t{ X86_GRP_SSE2, \"sse2\" },\n\t{ X86_GRP_SSE3, \"sse3\" },\n\t{ X86_GRP_SSE41, \"sse41\" },\n\t{ X86_GRP_SSE42, \"sse42\" },\n\t{ X86_GRP_SSE4A, \"sse4a\" },\n\t{ X86_GRP_SSSE3, \"ssse3\" },\n\t{ X86_GRP_PCLMUL, \"pclmul\" },\n\t{ X86_GRP_XOP, \"xop\" },\n\t{ X86_GRP_CDI, \"cdi\" },\n\t{ X86_GRP_ERI, \"eri\" },\n\t{ X86_GRP_TBM, \"tbm\" },\n\t{ X86_GRP_16BITMODE, \"16bitmode\" },\n\t{ X86_GRP_NOT64BITMODE, \"not64bitmode\" },\n\t{ X86_GRP_SGX,\t\"sgx\" },\n\t{ X86_GRP_DQI,\t\"dqi\" },\n\t{ X86_GRP_BWI,\t\"bwi\" },\n\t{ X86_GRP_PFI,\t\"pfi\" },\n\t{ X86_GRP_VLX,\t\"vlx\" },\n\t{ X86_GRP_SMAP,\t\"smap\" },\n\t{ X86_GRP_NOVLX, \"novlx\" },\n};\n#endif\n\nconst char *X86_group_name(csh handle, unsigned int id)\n{\n#ifndef CAPSTONE_DIET\n\treturn id2name(group_name_maps, ARR_SIZE(group_name_maps), id);\n#else\n\treturn NULL;\n#endif\n}\n\n#define GET_INSTRINFO_ENUM\n#ifdef CAPSTONE_X86_REDUCE\n#include \"X86GenInstrInfo_reduce.inc\"\n#else\n#include \"X86GenInstrInfo.inc\"\n#endif\n\n#ifndef CAPSTONE_X86_REDUCE\nstatic insn_map insns[] = {\t// full x86 instructions\n\t// dummy item\n\t{\n\t\t0, 0,\n#ifndef CAPSTONE_DIET\n\t\t{ 0 }, { 0 }, { 0 }, 0, 0\n#endif\n\t},\n\n#include \"X86MappingInsn.inc\"\n};\n#else\t// X86 reduce (defined CAPSTONE_X86_REDUCE)\nstatic insn_map insns[] = {\t// reduce x86 instructions\n\t// dummy item\n\t{\n\t\t0, 0,\n#ifndef CAPSTONE_DIET\n\t\t{ 0 }, { 0 }, { 0 }, 0, 0\n#endif\n\t},\n\n#include \"X86MappingInsn_reduce.inc\"\n};\n#endif\n\n#ifndef CAPSTONE_DIET\n// replace r1 = r2\nstatic void arr_replace(uint16_t *arr, uint8_t max, x86_reg r1, x86_reg r2)\n{\n\tuint8_t i;\n\n\tfor(i = 0; i < max; i++) {\n\t\tif (arr[i] == r1) {\n\t\t\tarr[i] = r2;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n#endif\n\n// given internal insn id, return public instruction info\nvoid X86_get_insn_id(cs_struct *h, cs_insn *insn, unsigned int id)\n{\n\tint i = insn_find(insns, ARR_SIZE(insns), id, &h->insn_cache);\n\tif (i != 0) {\n\t\tinsn->id = insns[i].mapid;\n\n\t\tif (h->detail) {\n#ifndef CAPSTONE_DIET\n\t\t\tmemcpy(insn->detail->regs_read, insns[i].regs_use, sizeof(insns[i].regs_use));\n\t\t\tinsn->detail->regs_read_count = (uint8_t)count_positive(insns[i].regs_use);\n\n\t\t\t// special cases when regs_write[] depends on arch\n\t\t\tswitch(id) {\n\t\t\t\tdefault:\n\t\t\t\t\tmemcpy(insn->detail->regs_write, insns[i].regs_mod, sizeof(insns[i].regs_mod));\n\t\t\t\t\tinsn->detail->regs_write_count = (uint8_t)count_positive(insns[i].regs_mod);\n\t\t\t\t\tbreak;\n\t\t\t\tcase X86_RDTSC:\n\t\t\t\t\tif (h->mode == CS_MODE_64) {\n\t\t\t\t\t\tmemcpy(insn->detail->regs_write, insns[i].regs_mod, sizeof(insns[i].regs_mod));\n\t\t\t\t\t\tinsn->detail->regs_write_count = (uint8_t)count_positive(insns[i].regs_mod);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinsn->detail->regs_write[0] = X86_REG_EAX;\n\t\t\t\t\t\tinsn->detail->regs_write[1] = X86_REG_EDX;\n\t\t\t\t\t\tinsn->detail->regs_write_count = 2;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase X86_RDTSCP:\n\t\t\t\t\tif (h->mode == CS_MODE_64) {\n\t\t\t\t\t\tmemcpy(insn->detail->regs_write, insns[i].regs_mod, sizeof(insns[i].regs_mod));\n\t\t\t\t\t\tinsn->detail->regs_write_count = (uint8_t)count_positive(insns[i].regs_mod);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinsn->detail->regs_write[0] = X86_REG_EAX;\n\t\t\t\t\t\tinsn->detail->regs_write[1] = X86_REG_ECX;\n\t\t\t\t\t\tinsn->detail->regs_write[2] = X86_REG_EDX;\n\t\t\t\t\t\tinsn->detail->regs_write_count = 3;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tswitch(insn->id) {\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_LOOP:\n\t\t\t\tcase X86_INS_LOOPE:\n\t\t\t\tcase X86_INS_LOOPNE:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault: break;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\t\t insn->detail->regs_read[0] = X86_REG_CX;\n\t\t\t\t\t\t\t\t insn->detail->regs_read_count = 1;\n\t\t\t\t\t\t\t\t insn->detail->regs_write[0] = X86_REG_CX;\n\t\t\t\t\t\t\t\t insn->detail->regs_write_count = 1;\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\tcase CS_MODE_32:\n\t\t\t\t\t\t\t\t insn->detail->regs_read[0] = X86_REG_ECX;\n\t\t\t\t\t\t\t\t insn->detail->regs_read_count = 1;\n\t\t\t\t\t\t\t\t insn->detail->regs_write[0] = X86_REG_ECX;\n\t\t\t\t\t\t\t\t insn->detail->regs_write_count = 1;\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\t\t insn->detail->regs_read[0] = X86_REG_RCX;\n\t\t\t\t\t\t\t\t insn->detail->regs_read_count = 1;\n\t\t\t\t\t\t\t\t insn->detail->regs_write[0] = X86_REG_RCX;\n\t\t\t\t\t\t\t\t insn->detail->regs_write_count = 1;\n\t\t\t\t\t\t\t\t break;\n\t\t\t\t\t}\n\n\t\t\t\t\t// LOOPE & LOOPNE also read EFLAGS\n\t\t\t\t\tif (insn->id != X86_INS_LOOP) {\n\t\t\t\t\t\tinsn->detail->regs_read[1] = X86_REG_EFLAGS;\n\t\t\t\t\t\tinsn->detail->regs_read_count = 2;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_LODSB:\n\t\t\t\tcase X86_INS_LODSD:\n\t\t\t\tcase X86_INS_LODSQ:\n\t\t\t\tcase X86_INS_LODSW:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_SCASB:\n\t\t\t\tcase X86_INS_SCASW:\n\t\t\t\tcase X86_INS_SCASQ:\n\t\t\t\tcase X86_INS_STOSB:\n\t\t\t\tcase X86_INS_STOSD:\n\t\t\t\tcase X86_INS_STOSQ:\n\t\t\t\tcase X86_INS_STOSW:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase X86_INS_CMPSB:\n\t\t\t\tcase X86_INS_CMPSD:\n\t\t\t\tcase X86_INS_CMPSQ:\n\t\t\t\tcase X86_INS_CMPSW:\n\t\t\t\tcase X86_INS_MOVSB:\n\t\t\t\tcase X86_INS_MOVSW:\n\t\t\t\tcase X86_INS_MOVSD:\n\t\t\t\tcase X86_INS_MOVSQ:\n\t\t\t\t\tswitch(h->mode) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_16:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_DI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_SI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CS_MODE_64:\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_EDI, X86_REG_RDI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_read, insn->detail->regs_read_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tarr_replace(insn->detail->regs_write, insn->detail->regs_write_count, X86_REG_ESI, X86_REG_RSI);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tmemcpy(insn->detail->groups, insns[i].groups, sizeof(insns[i].groups));\n\t\t\tinsn->detail->groups_count = (uint8_t)count_positive8(insns[i].groups);\n\n\t\t\tif (insns[i].branch || insns[i].indirect_branch) {\n\t\t\t\t// this insn also belongs to JUMP group. add JUMP group\n\t\t\t\tinsn->detail->groups[insn->detail->groups_count] = X86_GRP_JUMP;\n\t\t\t\tinsn->detail->groups_count++;\n\t\t\t}\n\n\t\t\tswitch (insns[i].id) {\n\t\t\t\tcase X86_OUT8ir:\n\t\t\t\tcase X86_OUT16ir:\n\t\t\t\tcase X86_OUT32ir:\n\t\t\t\t\tif (insn->detail->x86.operands[0].imm == -78) {\n\t\t\t\t\t\t// Writing to port 0xb2 causes an SMI on most platforms\n\t\t\t\t\t\t// See: http://cs.gmu.edu/~tr-admin/papers/GMU-CS-TR-2011-8.pdf\n\t\t\t\t\t\tinsn->detail->groups[insn->detail->groups_count] = X86_GRP_INT;\n\t\t\t\t\t\tinsn->detail->groups_count++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n#endif\n\t\t}\n\t}\n}\n\n// map special instructions with accumulate registers.\n// this is needed because LLVM embeds these register names into AsmStrs[],\n// but not separately in operands\nstruct insn_reg {\n\tuint16_t insn;\n\tx86_reg reg;\n\tenum cs_ac_type access;\n};\n\nstruct insn_reg2 {\n\tuint16_t insn;\n\tx86_reg reg1, reg2;\n\tenum cs_ac_type access1, access2;\n};\n\nstatic struct insn_reg insn_regs_att[] = {\n\t{ X86_INSB, X86_REG_DX },\n\t{ X86_INSW, X86_REG_DX },\n\t{ X86_INSL, X86_REG_DX },\n\n\t{ X86_MOV64o64a, X86_REG_RAX },\n\t{ X86_MOV32o32a, X86_REG_EAX },\n\t{ X86_MOV64o32a, X86_REG_EAX },\n\t{ X86_MOV16o16a, X86_REG_AX },\n\n\t{ X86_PUSHCS32, X86_REG_CS },\n\t{ X86_PUSHDS32, X86_REG_DS },\n\t{ X86_PUSHES32, X86_REG_ES },\n\t{ X86_PUSHFS32, X86_REG_FS },\n\t{ X86_PUSHGS32, X86_REG_GS },\n\t{ X86_PUSHSS32, X86_REG_SS },\n\n\t{ X86_PUSHFS64, X86_REG_FS },\n\t{ X86_PUSHGS64, X86_REG_GS },\n\n\t{ X86_PUSHCS16, X86_REG_CS },\n\t{ X86_PUSHDS16, X86_REG_DS },\n\t{ X86_PUSHES16, X86_REG_ES },\n\t{ X86_PUSHFS16, X86_REG_FS },\n\t{ X86_PUSHGS16, X86_REG_GS },\n\t{ X86_PUSHSS16, X86_REG_SS },\n\n\t{ X86_POPDS32, X86_REG_DS },\n\t{ X86_POPES32, X86_REG_ES },\n\t{ X86_POPFS32, X86_REG_FS },\n\t{ X86_POPGS32, X86_REG_GS },\n\t{ X86_POPSS32, X86_REG_SS },\n\n\t{ X86_POPFS64, X86_REG_FS },\n\t{ X86_POPGS64, X86_REG_GS },\n\n\t{ X86_POPDS16, X86_REG_DS },\n\t{ X86_POPES16, X86_REG_ES },\n\t{ X86_POPFS16, X86_REG_FS },\n\t{ X86_POPGS16, X86_REG_GS },\n\t{ X86_POPSS16, X86_REG_SS },\n\n\t{ X86_RCL32rCL, X86_REG_CL },\n\t{ X86_SHL8rCL, X86_REG_CL },\n\t{ X86_SHL16rCL, X86_REG_CL },\n\t{ X86_SHL32rCL, X86_REG_CL },\n\t{ X86_SHL64rCL, X86_REG_CL },\n\t{ X86_SAL8rCL, X86_REG_CL },\n\t{ X86_SAL16rCL, X86_REG_CL },\n\t{ X86_SAL32rCL, X86_REG_CL },\n\t{ X86_SAL64rCL, X86_REG_CL },\n\t{ X86_SHR8rCL, X86_REG_CL },\n\t{ X86_SHR16rCL, X86_REG_CL },\n\t{ X86_SHR32rCL, X86_REG_CL },\n\t{ X86_SHR64rCL, X86_REG_CL },\n\t{ X86_SAR8rCL, X86_REG_CL },\n\t{ X86_SAR16rCL, X86_REG_CL },\n\t{ X86_SAR32rCL, X86_REG_CL },\n\t{ X86_SAR64rCL, X86_REG_CL },\n\t{ X86_RCL8rCL, X86_REG_CL },\n\t{ X86_RCL16rCL, X86_REG_CL },\n\t{ X86_RCL32rCL, X86_REG_CL },\n\t{ X86_RCL64rCL, X86_REG_CL },\n\t{ X86_RCR8rCL, X86_REG_CL },\n\t{ X86_RCR16rCL, X86_REG_CL },\n\t{ X86_RCR32rCL, X86_REG_CL },\n\t{ X86_RCR64rCL, X86_REG_CL },\n\t{ X86_ROL8rCL, X86_REG_CL },\n\t{ X86_ROL16rCL, X86_REG_CL },\n\t{ X86_ROL32rCL, X86_REG_CL },\n\t{ X86_ROL64rCL, X86_REG_CL },\n\t{ X86_ROR8rCL, X86_REG_CL },\n\t{ X86_ROR16rCL, X86_REG_CL },\n\t{ X86_ROR32rCL, X86_REG_CL },\n\t{ X86_ROR64rCL, X86_REG_CL },\n\t{ X86_SHLD16rrCL, X86_REG_CL },\n\t{ X86_SHRD16rrCL, X86_REG_CL },\n\t{ X86_SHLD32rrCL, X86_REG_CL },\n\t{ X86_SHRD32rrCL, X86_REG_CL },\n\t{ X86_SHLD64rrCL, X86_REG_CL },\n\t{ X86_SHRD64rrCL, X86_REG_CL },\n\t{ X86_SHLD16mrCL, X86_REG_CL },\n\t{ X86_SHRD16mrCL, X86_REG_CL },\n\t{ X86_SHLD32mrCL, X86_REG_CL },\n\t{ X86_SHRD32mrCL, X86_REG_CL },\n\t{ X86_SHLD64mrCL, X86_REG_CL },\n\t{ X86_SHRD64mrCL, X86_REG_CL },\n\n\t{ X86_OUT8ir, X86_REG_AL },\n\t{ X86_OUT16ir, X86_REG_AX },\n\t{ X86_OUT32ir, X86_REG_EAX },\n\n#ifndef CAPSTONE_X86_REDUCE\n\t{ X86_SKINIT, X86_REG_EAX },\n\t{ X86_VMRUN32, X86_REG_EAX },\n\t{ X86_VMRUN64, X86_REG_RAX },\n\t{ X86_VMLOAD32, X86_REG_EAX },\n\t{ X86_VMLOAD64, X86_REG_RAX },\n\t{ X86_VMSAVE32, X86_REG_EAX },\n\t{ X86_VMSAVE64, X86_REG_RAX },\n\n\t{ X86_FNSTSW16r, X86_REG_AX },\n\n\t{ X86_ADD_FrST0, X86_REG_ST0 },\n\t{ X86_SUB_FrST0, X86_REG_ST0 },\n\t{ X86_SUBR_FrST0, X86_REG_ST0 },\n\t{ X86_MUL_FrST0, X86_REG_ST0 },\n\t{ X86_DIV_FrST0, X86_REG_ST0 },\n\t{ X86_DIVR_FrST0, X86_REG_ST0 },\n#endif\n};\n\nstatic struct insn_reg insn_regs_intel[] = {\n\t{ X86_OUTSB, X86_REG_DX, CS_AC_WRITE },\n\t{ X86_OUTSW, X86_REG_DX, CS_AC_WRITE },\n\t{ X86_OUTSL, X86_REG_DX, CS_AC_WRITE },\n\n\t{ X86_MOV8ao16, X86_REG_AL, CS_AC_WRITE },     // 16-bit A0 1020                  // mov     al, byte ptr [0x2010]\n\t{ X86_MOV8ao32, X86_REG_AL, CS_AC_WRITE },     // 32-bit A0 10203040              // mov     al, byte ptr [0x40302010]\n\t{ X86_MOV8ao64, X86_REG_AL, CS_AC_WRITE },     // 64-bit 66 A0 1020304050607080   // movabs  al, byte ptr [0x8070605040302010]\n\n\t{ X86_MOV16ao16, X86_REG_AX, CS_AC_WRITE },    // 16-bit A1 1020                  // mov     ax, word ptr [0x2010]\n\t{ X86_MOV16ao32, X86_REG_AX, CS_AC_WRITE },    // 32-bit A1 10203040              // mov     ax, word ptr [0x40302010]\n\t{ X86_MOV16ao64, X86_REG_AX, CS_AC_WRITE },    // 64-bit 66 A1 1020304050607080   // movabs  ax, word ptr [0x8070605040302010]\n\n\t{ X86_MOV32ao16, X86_REG_EAX, CS_AC_WRITE },   // 32-bit 67 A1 1020               // mov     eax, dword ptr [0x2010]\n\t{ X86_MOV32ao32, X86_REG_EAX, CS_AC_WRITE },   // 32-bit A1 10203040              // mov     eax, dword ptr [0x40302010]\n\t{ X86_MOV32ao64, X86_REG_EAX, CS_AC_WRITE },   // 64-bit A1 1020304050607080      // movabs  eax, dword ptr [0x8070605040302010]\n\n\t{ X86_MOV64ao32, X86_REG_RAX, CS_AC_WRITE },   // 64-bit 48 8B04 10203040         // mov     rax, qword ptr [0x40302010]\n\t{ X86_MOV64ao64, X86_REG_RAX, CS_AC_WRITE },   // 64-bit 48 A1 1020304050607080   // movabs  rax, qword ptr [0x8070605040302010]\n\n\t{ X86_LODSQ, X86_REG_RAX, CS_AC_WRITE },\n\t{ X86_OR32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_TEST32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG64ar, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_LODSB, X86_REG_AL, CS_AC_WRITE },\n\t{ X86_AND32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_IN16ri, X86_REG_AX, CS_AC_WRITE },\n\t{ X86_CMP64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG16ar, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_LODSW, X86_REG_AX, CS_AC_WRITE },\n\t{ X86_AND16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG32ar64, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_CMP32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_AND8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASW, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_OR16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XCHG32ar, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASQ, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_OR8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_TEST64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_TEST8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_IN8ri, X86_REG_AL, CS_AC_WRITE },\n\t{ X86_TEST16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASL, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SUB8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_OR64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SCASB, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_SBB64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADD16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_XOR16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_AND64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_LODSL, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_CMP8i8, X86_REG_AL, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC64i32, X86_REG_RAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_CMP16i16, X86_REG_AX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_ADC32i32, X86_REG_EAX, CS_AC_WRITE | CS_AC_READ },\n\t{ X86_IN32ri, X86_REG_EAX, CS_AC_WRITE },\n\n\t{ X86_PUSHCS32, X86_REG_CS, CS_AC_READ },\n\t{ X86_PUSHDS32, X86_REG_DS, CS_AC_READ },\n\t{ X86_PUSHES32, X86_REG_ES, CS_AC_READ },\n\t{ X86_PUSHFS32, X86_REG_FS, CS_AC_READ },\n\t{ X86_PUSHGS32, X86_REG_GS, CS_AC_READ },\n\t{ X86_PUSHSS32, X86_REG_SS, CS_AC_READ },\n\n\t{ X86_PUSHFS64, X86_REG_FS, CS_AC_READ },\n\t{ X86_PUSHGS64, X86_REG_GS, CS_AC_READ },\n\n\t{ X86_PUSHCS16, X86_REG_CS, CS_AC_READ },\n\t{ X86_PUSHDS16, X86_REG_DS, CS_AC_READ },\n\t{ X86_PUSHES16, X86_REG_ES, CS_AC_READ },\n\t{ X86_PUSHFS16, X86_REG_FS, CS_AC_READ },\n\t{ X86_PUSHGS16, X86_REG_GS, CS_AC_READ },\n\t{ X86_PUSHSS16, X86_REG_SS, CS_AC_READ },\n\n\t{ X86_POPDS32, X86_REG_DS, CS_AC_WRITE },\n\t{ X86_POPES32, X86_REG_ES, CS_AC_WRITE },\n\t{ X86_POPFS32, X86_REG_FS, CS_AC_WRITE },\n\t{ X86_POPGS32, X86_REG_GS, CS_AC_WRITE },\n\t{ X86_POPSS32, X86_REG_SS, CS_AC_WRITE },\n\n\t{ X86_POPFS64, X86_REG_FS, CS_AC_WRITE },\n\t{ X86_POPGS64, X86_REG_GS, CS_AC_WRITE },\n\n\t{ X86_POPDS16, X86_REG_DS, CS_AC_WRITE },\n\t{ X86_POPES16, X86_REG_ES, CS_AC_WRITE },\n\t{ X86_POPFS16, X86_REG_FS, CS_AC_WRITE },\n\t{ X86_POPGS16, X86_REG_GS, CS_AC_WRITE },\n\t{ X86_POPSS16, X86_REG_SS, CS_AC_WRITE },\n\n#ifndef CAPSTONE_X86_REDUCE\n\t{ X86_SKINIT, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_VMRUN32, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_VMRUN64, X86_REG_RAX, CS_AC_WRITE },\n\t{ X86_VMLOAD32, X86_REG_EAX, CS_AC_WRITE },\n\t{ X86_VMLOAD64, X86_REG_RAX, CS_AC_WRITE },\n\t{ X86_VMSAVE32, X86_REG_EAX, CS_AC_READ },\n\t{ X86_VMSAVE64, X86_REG_RAX, CS_AC_READ },\n\n\t{ X86_FNSTSW16r, X86_REG_AX, CS_AC_WRITE },\n\n\t{ X86_CMOVB_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVBE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVP_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNB_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNBE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNE_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_CMOVNP_F, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FXCHST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FXCHST0r_alt, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FCOMST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FCOMPST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FCOMPST0r_alt, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FPST0r, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FPST0r_alt, X86_REG_ST0, CS_AC_WRITE },\n\t{ X86_ST_FPNCEST0r, X86_REG_ST0, CS_AC_WRITE },\n#endif\n};\n\nstatic struct insn_reg2 insn_regs_intel2[] = {\n\t{ X86_IN8rr, X86_REG_AL, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },\n\t{ X86_IN16rr, X86_REG_AX, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },\n\t{ X86_IN32rr, X86_REG_EAX, X86_REG_DX, CS_AC_WRITE, CS_AC_READ },\n\n\t{ X86_OUT8rr, X86_REG_DX, X86_REG_AL, CS_AC_READ, CS_AC_READ },\n\t{ X86_OUT16rr, X86_REG_DX, X86_REG_AX, CS_AC_READ, CS_AC_READ },\n\t{ X86_OUT32rr, X86_REG_DX, X86_REG_EAX, CS_AC_READ, CS_AC_READ },\n\n\t{ X86_INVLPGA32, X86_REG_EAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },\n\t{ X86_INVLPGA64, X86_REG_RAX, X86_REG_ECX, CS_AC_READ, CS_AC_READ },\n};\n\nstatic struct insn_reg insn_regs_intel_sorted [ARR_SIZE(insn_regs_intel)];\n\nstatic int regs_cmp(const void *a, const void *b)\n{\n\tuint16_t l = ((struct insn_reg *)a)->insn;\n\tuint16_t r = ((struct insn_reg *)b)->insn;\n\treturn (l - r);\n}\n\n// return register of given instruction id\n// return 0 if not found\n// this is to handle instructions embedding accumulate registers into AsmStrs[]\nx86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)\n{\n\tstatic bool intel_regs_sorted = false;\n\tunsigned int first = 0;\n\tunsigned int last = ARR_SIZE(insn_regs_intel) - 1;\n\tunsigned int mid;\n\n\tif (!intel_regs_sorted) {\n\t\tmemcpy(insn_regs_intel_sorted, insn_regs_intel,\n\t\t\t\tsizeof(insn_regs_intel_sorted));\n\t\tqsort(insn_regs_intel_sorted,\n\t\t\t\tARR_SIZE(insn_regs_intel_sorted),\n\t\t\t\tsizeof(struct insn_reg), regs_cmp);\n\t\tintel_regs_sorted = true;\n\t}\n\n\tif (insn_regs_intel_sorted[0].insn > id ||\n\t\t\tinsn_regs_intel_sorted[last].insn < id) {\n\t\treturn 0;\n\t}\n\n\twhile (first <= last) {\n\t\tmid = (first + last) / 2;\n\t\tif (insn_regs_intel_sorted[mid].insn < id) {\n\t\t\tfirst = mid + 1;\n\t\t} else if (insn_regs_intel_sorted[mid].insn == id) {\n\t\t\tif (access) {\n\t\t\t\t*access = insn_regs_intel_sorted[mid].access;\n\t\t\t}\n\t\t\treturn insn_regs_intel_sorted[mid].reg;\n\t\t} else {\n\t\t\tif (mid == 0)\n\t\t\t\tbreak;\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\n\t// not found\n\treturn 0;\n}\n\nbool X86_insn_reg_intel2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2)\n{\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(insn_regs_intel2); i++) {\n\t\tif (insn_regs_intel2[i].insn == id) {\n\t\t\t*reg1 = insn_regs_intel2[i].reg1;\n\t\t\t*reg2 = insn_regs_intel2[i].reg2;\n\t\t\tif (access1)\n\t\t\t\t*access1 = insn_regs_intel2[i].access1;\n\t\t\tif (access2)\n\t\t\t\t*access2 = insn_regs_intel2[i].access2;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n// ATT just reuses Intel data, but with the order of registers reversed\nbool X86_insn_reg_att2(unsigned int id, x86_reg *reg1, enum cs_ac_type *access1, x86_reg *reg2, enum cs_ac_type *access2)\n{\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(insn_regs_intel2); i++) {\n\t\tif (insn_regs_intel2[i].insn == id) {\n\t\t\t// reverse order of Intel syntax registers\n\t\t\t*reg1 = insn_regs_intel2[i].reg2;\n\t\t\t*reg2 = insn_regs_intel2[i].reg1;\n            if (access1)\n                *access1 = insn_regs_intel2[i].access2;\n            if (access2)\n                *access2 = insn_regs_intel2[i].access1;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\nx86_reg X86_insn_reg_att(unsigned int id, enum cs_ac_type *access)\n{\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(insn_regs_att); i++) {\n\t\tif (insn_regs_att[i].insn == id) {\n            if (access)\n                *access = insn_regs_intel[i].access;\n\t\t\treturn insn_regs_att[i].reg;\n\t\t}\n\t}\n\n\t// not found\n\treturn 0;\n}\n\n// given MCInst's id, find out if this insn is valid for REPNE prefix\nstatic bool valid_repne(cs_struct *h, unsigned int opcode)\n{\n\tunsigned int id;\n\tint i = insn_find(insns, ARR_SIZE(insns), opcode, &h->insn_cache);\n\tif (i != 0) {\n\t\tid = insns[i].mapid;\n\t\tswitch(id) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_CMPSB:\n\t\t\tcase X86_INS_CMPSW:\n\t\t\tcase X86_INS_CMPSQ:\n\n\t\t\tcase X86_INS_SCASB:\n\t\t\tcase X86_INS_SCASW:\n\t\t\tcase X86_INS_SCASQ:\n\n\t\t\tcase X86_INS_MOVSB:\n\t\t\tcase X86_INS_MOVSW:\n\t\t\tcase X86_INS_MOVSD:\n\t\t\tcase X86_INS_MOVSQ:\n\n\t\t\tcase X86_INS_LODSB:\n\t\t\tcase X86_INS_LODSW:\n\t\t\tcase X86_INS_LODSD:\n\t\t\tcase X86_INS_LODSQ:\n\n\t\t\tcase X86_INS_STOSB:\n\t\t\tcase X86_INS_STOSW:\n\t\t\tcase X86_INS_STOSD:\n\t\t\tcase X86_INS_STOSQ:\n\n\t\t\tcase X86_INS_INSB:\n\t\t\tcase X86_INS_INSW:\n\t\t\tcase X86_INS_INSD:\n\n\t\t\tcase X86_INS_OUTSB:\n\t\t\tcase X86_INS_OUTSW:\n\t\t\tcase X86_INS_OUTSD:\n\n\t\t\t\treturn true;\n\n\t\t\tcase X86_INS_CMPSD:\n\t\t\t\tif (opcode == X86_CMPSL) // REP CMPSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_SCASD:\n\t\t\t\tif (opcode == X86_SCASL) // REP SCASD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n// given MCInst's id, find out if this insn is valid for REP prefix\nstatic bool valid_rep(cs_struct *h, unsigned int opcode)\n{\n\tunsigned int id;\n\tint i = insn_find(insns, ARR_SIZE(insns), opcode, &h->insn_cache);\n\tif (i != 0) {\n\t\tid = insns[i].mapid;\n\t\tswitch(id) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_MOVSB:\n\t\t\tcase X86_INS_MOVSW:\n\t\t\tcase X86_INS_MOVSQ:\n\n\t\t\tcase X86_INS_LODSB:\n\t\t\tcase X86_INS_LODSW:\n\t\t\tcase X86_INS_LODSQ:\n\n\t\t\tcase X86_INS_STOSB:\n\t\t\tcase X86_INS_STOSW:\n\t\t\tcase X86_INS_STOSQ:\n\n\t\t\tcase X86_INS_INSB:\n\t\t\tcase X86_INS_INSW:\n\t\t\tcase X86_INS_INSD:\n\n\t\t\tcase X86_INS_OUTSB:\n\t\t\tcase X86_INS_OUTSW:\n\t\t\tcase X86_INS_OUTSD:\n\t\t\t\treturn true;\n\n\t\t\t// following are some confused instructions, which have the same\n\t\t\t// mnemonics in 128bit media instructions. Intel is horribly crazy!\n\t\t\tcase X86_INS_MOVSD:\n\t\t\t\tif (opcode == X86_MOVSL) // REP MOVSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_LODSD:\n\t\t\t\tif (opcode == X86_LODSL) // REP LODSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_STOSD:\n\t\t\t\tif (opcode == X86_STOSL) // REP STOSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n// given MCInst's id, find out if this insn is valid for REPE prefix\nstatic bool valid_repe(cs_struct *h, unsigned int opcode)\n{\n\tunsigned int id;\n\tint i = insn_find(insns, ARR_SIZE(insns), opcode, &h->insn_cache);\n\tif (i != 0) {\n\t\tid = insns[i].mapid;\n\t\tswitch(id) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_CMPSB:\n\t\t\tcase X86_INS_CMPSW:\n\t\t\tcase X86_INS_CMPSQ:\n\n\t\t\tcase X86_INS_SCASB:\n\t\t\tcase X86_INS_SCASW:\n\t\t\tcase X86_INS_SCASQ:\n\t\t\t\treturn true;\n\n\t\t\t// following are some confused instructions, which have the same\n\t\t\t// mnemonics in 128bit media instructions. Intel is horribly crazy!\n\t\t\tcase X86_INS_CMPSD:\n\t\t\t\tif (opcode == X86_CMPSL) // REP CMPSD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\n\t\t\tcase X86_INS_SCASD:\n\t\t\t\tif (opcode == X86_SCASL) // REP SCASD\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t// not found\n\treturn false;\n}\n\n#ifndef CAPSTONE_DIET\n// add *CX register to regs_read[] & regs_write[]\nstatic void add_cx(MCInst *MI)\n{\n\tif (MI->csh->detail) {\n\t\tx86_reg cx;\n\n\t\tif (MI->csh->mode & CS_MODE_16)\n\t\t\tcx = X86_REG_CX;\n\t\telse if (MI->csh->mode & CS_MODE_32)\n\t\t\tcx = X86_REG_ECX;\n\t\telse\t// 64-bit\n\t\t\tcx = X86_REG_RCX;\n\n\t\tMI->flat_insn->detail->regs_read[MI->flat_insn->detail->regs_read_count] = cx;\n\t\tMI->flat_insn->detail->regs_read_count++;\n\n\t\tMI->flat_insn->detail->regs_write[MI->flat_insn->detail->regs_write_count] = cx;\n\t\tMI->flat_insn->detail->regs_write_count++;\n\t}\n}\n#endif\n\n// return true if we patch the mnemonic\nbool X86_lockrep(MCInst *MI, SStream *O)\n{\n\tunsigned int opcode;\n\tbool res = false;\n\n\tswitch(MI->x86_prefix[0]) {\n\t\tdefault:\n\t\t\tbreak;\n\t\tcase 0xf0:\n#ifndef CAPSTONE_DIET\n\t\t\tSStream_concat(O, \"lock|\");\n#endif\n\t\t\tbreak;\n\t\tcase 0xf2:\t// repne\n\t\t\topcode = MCInst_getOpcode(MI);\n#ifndef CAPSTONE_DIET\t// only care about memonic in standard (non-diet) mode\n\t\t\tif (valid_repne(MI->csh, opcode)) {\n\t\t\t\tSStream_concat(O, \"repne|\");\n\t\t\t\tadd_cx(MI);\n\t\t\t} else {\n\t\t\t\t// invalid prefix\n\t\t\t\tMI->x86_prefix[0] = 0;\n\n\t\t\t\t// handle special cases\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\t\tMCInst_setOpcode(MI, X86_MULSDrr);\n\t\t\t\t\tSStream_concat(O, \"mulsd\\t\");\n\t\t\t\t\tres = true;\n\t\t\t\t}\n#endif\n\t\t\t}\n#else\t// diet mode -> only patch opcode in special cases\n\t\t\tif (!valid_repne(MI->csh, opcode)) {\n\t\t\t\tMI->x86_prefix[0] = 0;\n\t\t\t}\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t// handle special cases\n\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\tMCInst_setOpcode(MI, X86_MULSDrr);\n\t\t\t}\n#endif\n#endif\n\t\t\tbreak;\n\n\t\tcase 0xf3:\n\t\t\topcode = MCInst_getOpcode(MI);\n#ifndef CAPSTONE_DIET\t// only care about memonic in standard (non-diet) mode\n\t\t\tif (valid_rep(MI->csh, opcode)) {\n\t\t\t\tSStream_concat(O, \"rep|\");\n\t\t\t\tadd_cx(MI);\n\t\t\t} else if (valid_repe(MI->csh, opcode)) {\n\t\t\t\tSStream_concat(O, \"repe|\");\n\t\t\t\tadd_cx(MI);\n\t\t\t} else {\n\t\t\t\t// invalid prefix\n\t\t\t\tMI->x86_prefix[0] = 0;\n\n\t\t\t\t// handle special cases\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\t\tMCInst_setOpcode(MI, X86_MULSSrr);\n\t\t\t\t\tSStream_concat(O, \"mulss\\t\");\n\t\t\t\t\tres = true;\n\t\t\t\t}\n#endif\n\t\t\t}\n#else\t// diet mode -> only patch opcode in special cases\n\t\t\tif (!valid_rep(MI->csh, opcode) && !valid_repe(MI->csh, opcode)) {\n\t\t\t\tMI->x86_prefix[0] = 0;\n\t\t\t}\n#ifndef CAPSTONE_X86_REDUCE\n\t\t\t// handle special cases\n\t\t\tif (opcode == X86_MULPDrr) {\n\t\t\t\tMCInst_setOpcode(MI, X86_MULSSrr);\n\t\t\t}\n#endif\n#endif\n\t\t\tbreak;\n\t}\n\n\t// copy normalized prefix[] back to x86.prefix[]\n\tif (MI->csh->detail)\n\t\tmemcpy(MI->flat_insn->detail->x86.prefix, MI->x86_prefix, ARR_SIZE(MI->x86_prefix));\n\n\treturn res;\n}\n\nvoid op_addReg(MCInst *MI, int reg)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].type = X86_OP_REG;\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].reg = reg;\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->csh->regsize_map[reg];\n\t\tMI->flat_insn->detail->x86.op_count++;\n\t}\n\n\tif (MI->op1_size == 0)\n\t\tMI->op1_size = MI->csh->regsize_map[reg];\n}\n\nvoid op_addImm(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].type = X86_OP_IMM;\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].imm = v;\n\t\t// if op_count > 0, then this operand's size is taken from the destination op\n\t\tif (MI->csh->syntax != CS_OPT_SYNTAX_ATT) {\n\t\t\tif (MI->flat_insn->detail->x86.op_count > 0)\n\t\t\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->flat_insn->detail->x86.operands[0].size;\n\t\t\telse\n\t\t\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].size = MI->imm_size;\n\t\t} else\n\t\t\tMI->has_imm = true;\n\t\tMI->flat_insn->detail->x86.op_count++;\n\t}\n\n\tif (MI->op1_size == 0)\n\t\tMI->op1_size = MI->imm_size;\n}\n\nvoid op_addXopCC(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.xop_cc = v;\n\t}\n}\n\nvoid op_addSseCC(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.sse_cc = v;\n\t}\n}\n\nvoid op_addAvxCC(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.avx_cc = v;\n\t}\n}\n\nvoid op_addAvxRoundingMode(MCInst *MI, int v)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.avx_rm = v;\n\t}\n}\n\n// below functions supply details to X86GenAsmWriter*.inc\nvoid op_addAvxZeroOpmask(MCInst *MI)\n{\n\tif (MI->csh->detail) {\n\t\t// link with the previous operand\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count - 1].avx_zero_opmask = true;\n\t}\n}\n\nvoid op_addAvxSae(MCInst *MI)\n{\n\tif (MI->csh->detail) {\n\t\tMI->flat_insn->detail->x86.avx_sae = true;\n\t}\n}\n\nvoid op_addAvxBroadcast(MCInst *MI, x86_avx_bcast v)\n{\n\tif (MI->csh->detail) {\n\t\t// link with the previous operand\n\t\tMI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count - 1].avx_bcast = v;\n\t}\n}\n\n#ifndef CAPSTONE_DIET\n// map instruction to its characteristics\ntypedef struct insn_op {\n\tuint64_t eflags;\t// how this instruction update EFLAGS\n\tuint8_t access[6];\n} insn_op;\n\nstatic insn_op insn_ops[] = {\n\t{\t/* NULL item  */\n\t\t0,\n\t\t{ 0 }\n\t},\n\n#ifdef CAPSTONE_X86_REDUCE\n#include \"X86MappingInsnOp_reduce.inc\"\n#else\n#include \"X86MappingInsnOp.inc\"\n#endif\n};\n\n// given internal insn id, return operand access info\nuint8_t *X86_get_op_access(cs_struct *h, unsigned int id, uint64_t *eflags)\n{\n\tint i = insn_find(insns, ARR_SIZE(insns), id, &h->insn_cache);\n\tif (i != 0) {\n\t\t*eflags = insn_ops[i].eflags;\n\t\treturn insn_ops[i].access;\n\t}\n\n\treturn NULL;\n}\n\nvoid X86_reg_access(const cs_insn *insn,\n\t\tcs_regs regs_read, uint8_t *regs_read_count,\n\t\tcs_regs regs_write, uint8_t *regs_write_count)\n{\n\tuint8_t i;\n\tuint8_t read_count, write_count;\n\tcs_x86 *x86 = &(insn->detail->x86);\n\n\tread_count = insn->detail->regs_read_count;\n\twrite_count = insn->detail->regs_write_count;\n\n\t// implicit registers\n\tmemcpy(regs_read, insn->detail->regs_read, read_count * sizeof(insn->detail->regs_read[0]));\n\tmemcpy(regs_write, insn->detail->regs_write, write_count * sizeof(insn->detail->regs_write[0]));\n\n\t// explicit registers\n\tfor (i = 0; i < x86->op_count; i++) {\n\t\tcs_x86_op *op = &(x86->operands[i]);\n\t\tswitch((int)op->type) {\n\t\t\tcase X86_OP_REG:\n\t\t\t\tif ((op->access & CS_AC_READ) && !arr_exist(regs_read, read_count, op->reg)) {\n\t\t\t\t\tregs_read[read_count] = op->reg;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\t\tif ((op->access & CS_AC_WRITE) && !arr_exist(regs_write, write_count, op->reg)) {\n\t\t\t\t\tregs_write[write_count] = op->reg;\n\t\t\t\t\twrite_count++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase X86_OP_MEM:\n\t\t\t\t// registers appeared in memory references always being read\n\t\t\t\tif ((op->mem.segment != X86_REG_INVALID)) {\n\t\t\t\t\tregs_read[read_count] = op->mem.segment;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\t\tif ((op->mem.base != X86_REG_INVALID) && !arr_exist(regs_read, read_count, op->mem.base)) {\n\t\t\t\t\tregs_read[read_count] = op->mem.base;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\t\tif ((op->mem.index != X86_REG_INVALID) && !arr_exist(regs_read, read_count, op->mem.index)) {\n\t\t\t\t\tregs_read[read_count] = op->mem.index;\n\t\t\t\t\tread_count++;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t*regs_read_count = read_count;\n\t*regs_write_count = write_count;\n}\n#endif\n\n// map immediate size to instruction id\nstatic struct size_id {\n\tunsigned char size;\n\tunsigned short id;\n} x86_imm_size[] = {\n#include \"X86ImmSize.inc\"\n};\n\n// given the instruction name, return the size of its immediate operand (or 0)\nint X86_immediate_size(unsigned int id)\n{\n#if 0\n\t// linear searching\n\tunsigned int i;\n\n\tfor (i = 0; i < ARR_SIZE(x86_imm_size); i++) {\n\t\tif (id == x86_imm_size[i].id) {\n\t\t\treturn x86_imm_size[i].size;\n\t\t}\n\t}\n#endif\n\n\t// binary searching since the IDs is sorted in order\n\tunsigned int left, right, m;\n\n\tleft = 0;\n\tright = ARR_SIZE(x86_imm_size) - 1;\n\n\twhile(left <= right) {\n\t\tm = (left + right) / 2;\n\t\tif (id == x86_imm_size[m].id)\n\t\t\treturn x86_imm_size[m].size;\n\n\t\tif (id < x86_imm_size[m].id)\n\t\t\tright = m - 1;\n\t\telse\n\t\t\tleft = m + 1;\n\t}\n\n\t// not found\n\treturn 0;\n}\n\n#endif\n"], "filenames": ["arch/X86/X86Mapping.c"], "buggy_code_start_loc": [2933], "buggy_code_end_loc": [2966], "fixing_code_start_loc": [2932], "fixing_code_end_loc": [2970], "type": "CWE-125", "message": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.", "other": {"cve": {"id": "CVE-2016-7151", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-15T14:29:00.530", "lastModified": "2019-05-16T14:04:02.633", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c."}, {"lang": "es", "value": "Capstone 3.0.4 tiene una vulnerabilidad fuera de los l\u00edmites (SEGV causada por un acceso de memoria de lectura) en X86_insn_reg_intel en Arch/x86/X86Mapping. c."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:capstone-engine:capstone:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "2D8451ED-7A5E-44B3-86D1-696906059F04"}]}]}], "references": [{"url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/aquynh/capstone/pull/725", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06"}}