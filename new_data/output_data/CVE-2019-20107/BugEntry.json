{"buggy_code": ["<?php\n/** \n * TestLink Open Source Project - http://testlink.sourceforge.net/\n * This script is distributed under the GNU General Public License 2 or later. \n *\n * @package     TestLink\n * @author      asimon\n * @copyright   2005-2018, TestLink community \n * @filesource  reqCompareVersions.php\n * @link        http://www.testlink.org/\n *\n * Compares selected requirements versions with each other.\n */\n\nrequire_once(\"../../config.inc.php\");\nrequire_once(\"common.php\");\nrequire('../../third_party/diff/diff.php');\nrequire('../../third_party/daisydiff/src/HTMLDiff.php');\n\n$templateCfg = templateConfiguration();\ntestlinkInitPage($db);\n$smarty = new TLSmarty();\n\n$labels = init_labels(array(\"num_changes\" => null,\"no_changes\" => null, \n                \"diff_subtitle_req\" => null, \"version_short\" => null,\n                \"diff_details_req\" => null,\"type\" => null, \"status\" => null,\n                \"expected_coverage\" => null,\n                \"revision_short\" => null, \"version_revision\" => null) );\n\n\n\n$reqMgr = new requirement_mgr($db);\n$differ = new diff();\n$args = init_args();\n$gui = initializeGui($db,$args,$labels,$reqMgr);\n\n\n// if already two versions are selected, display diff\n// else display template with versions to select\nif ($args->compare_selected_versions) \n{\n  // Side By Side\n  $sbs = getItemsToCompare($args->left_item_id,$args->right_item_id,$gui->items);\n  prepareUserFeedback($db,$gui,$args->req_id,$labels,$sbs);\n  \n  $gui->attrDiff = getAttrDiff($sbs['left_item'],$sbs['right_item'],$labels);\n  \n  $cfields = getCFToCompare($sbs,$args->tproject_id,$reqMgr);\n  $gui->cfieldsDiff = null;\n  if( !is_null($cfields) )\n  {\n    $gui->cfieldsDiff = getCFDiff($cfields,$reqMgr);\n  }\n\n  $gui->diff = array(\"scope\" => array());\n  foreach($gui->diff as $key => $val) \n  {\n    if ($args->use_daisydiff) \n    {\n\t  // using daisydiff as diffing engine\n\t  $diff = new HTMLDiffer();\n\t  if ($gui->reqType == 'none'){\n\t\tlist($differences, $diffcount) = $diff->htmlDiff(nl2br($sbs['left_item'][$key]), nl2br($sbs['right_item'][$key]));\n\t  }\n\t  else{\n\t\tlist($differences, $diffcount) = $diff->htmlDiff($sbs['left_item'][$key], $sbs['right_item'][$key]);\n\t  }\n\t  $gui->diff[$key][\"diff\"] = $differences;\n\t  $gui->diff[$key][\"count\"] = $diffcount;\n\t}\n    else\n    {\n      // insert line endings so diff is better readable and makes sense (not everything in one line)\n      // then cast to array with \\n as separating character, differ needs that\n\t  $gui->diff[$key][\"left\"] = explode(\"\\n\", str_replace(\"</p>\", \"</p>\\n\", $sbs['left_item'][$key]));\n      $gui->diff[$key][\"right\"] = explode(\"\\n\", str_replace(\"</p>\", \"</p>\\n\", $sbs['right_item'][$key]));\n\t  $gui->diff[$key][\"diff\"] = $differ->inline($gui->diff[$key][\"left\"], $gui->leftID, \n                                                  $gui->diff[$key][\"right\"], $gui->rightID,$args->context);\n      $gui->diff[$key][\"count\"] = count($differ->changes);\n    }\n    \n    $gui->diff[$key][\"heading\"] = lang_get($key);\n  \n    // are there any changes? then display! if not, nothing to show here\n    $additional = '';\n    $msg_key = \"no_changes\";\n    if ($gui->diff[$key][\"count\"] > 0) \n    {\n      $msg_key = \"num_changes\";\n      $additional = $gui->diff[$key][\"count\"];\n    }\n    $gui->diff[$key][\"message\"] = (sprintf($labels[$msg_key], $key, $additional));\n  }\n}\n\n$smarty->assign('gui', $gui);\n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n/**\n * \n *\n */\nfunction getBareBonesReq($dbHandler,$reqID)\n{\n  $debugMsg = ' Function: ' . __FUNCTION__;\n  $tables = tlObjectWithDB::getDBTables(array('requirements','nodes_hierarchy'));\n  $sql =  \" /* $debugMsg */ SELECT REQ.req_doc_id, NH_REQ.name \" .\n      \" FROM {$tables['requirements']} REQ \" .\n      \" JOIN {$tables['nodes_hierarchy']} NH_REQ  ON  NH_REQ.id = REQ.id \" .\n      \" WHERE REQ.id = \" . intval($reqID);\n      \n  $bones = $dbHandler->get_recordset($sql);   \n\n  return $bones[0];\n}\n\n/**\n * \n *\n */\nfunction getItemsToCompare($leftSideID,$rightSideID,&$itemSet)\n{\n\n  $ret = array();\n  foreach($itemSet as $item) \n  {\n    if ($item['item_id'] == $leftSideID) \n    {\n      $ret['left_item'] = $item;\n    }\n    if ($item['item_id'] == $rightSideID) \n    {\n      $ret['right_item'] = $item;\n    }\n    \n    if( count($ret) == 2 )\n    {\n      break;\n    }\n  }\n  return $ret;\n}\n\n\n/**\n * \n *\n */\nfunction getCFToCompare($sides,$tprojectID,&$reqMgr)\n{\n  $cfields = array('left_side' => array('key' => 'left_item', 'value' => null), \n           'right_side' => array('key' => 'right_item', 'value' => null));\n\n  foreach($cfields as $item_side => $dummy)\n  {\n    $target_id = $sides[$dummy['key']];\n    $target_id = $target_id['item_id'];\n    $cfields[$item_side]['value'] = $reqMgr->get_linked_cfields(null,$target_id,$tprojectID);\n  }\n  return $cfields;  \n}\n\n\n/**\n * \n */\nfunction getCFDiff($cfields,&$reqMgr)\n{\n  $cmp = null;\n  \n  // Development Note\n  // All versions + revisions (i.e. child items) have the same qty of linked CF\n  // => both arrays will have same size()\n  //\n  // This is because to get cfields we look only to CF enabled for node type.\n  $cfieldsLeft = $cfields['left_side']['value'];\n  $cfieldsRight = $cfields['right_side']['value'];\n\n  if( !is_null($cfieldsLeft) )\n  {\n    $key2loop = array_keys($cfieldsLeft);\n    $cmp = array();\n    $type_code = $reqMgr->cfield_mgr->get_available_types();\n    $key2convert = array('lvalue','rvalue');\n    \n\n    $cfg = config_get('gui');\n    $cfCfg = config_get('custom_fields');    \n\n    $formats = array('date' => config_get( 'date_format'));\n    $t_date_format = str_replace(\"%\",\"\",$formats['date']); // must remove %\n    $t_datetime_format = $t_date_format . ' ' . $cfg->custom_fields->time_format;\n \n    foreach($key2loop as $cf_key)\n    {\n      $dt_format = $t_date_format;\n      \n      // $cfg->show_custom_fields_without_value \n      // false => At least one value has to be <> NULL to include on comparsion results\n      // \n      if( $cfCfg->show_custom_fields_without_value == true ||\n          ($cfCfg->show_custom_fields_without_value == false &&\n           ( (!is_null($cfieldsRight) && !is_null($cfieldsRight[$cf_key]['value'])) ||\n             (!is_null($cfieldsLeft) && !is_null($cfieldsLeft[$cf_key]['value'])) )\n            ) \n          )    \n      {   \n        $cmp[$cf_key] = array('label' => htmlspecialchars($cfieldsLeft[$cf_key]['label']),\n                              'lvalue' => $cfieldsLeft[$cf_key]['value'],\n                              'rvalue' => !is_null($cfieldsRight) ? $cfieldsRight[$cf_key]['value'] : null,\n                              'changed' => $cfieldsLeft[$cf_key]['value'] != $cfieldsRight[$cf_key]['value']);\n \n        if($type_code[$cfieldsLeft[$cf_key]['type']] == 'date' ||\n           $type_code[$cfieldsLeft[$cf_key]['type']] == 'datetime') \n        {\n          foreach($key2convert as $fx)\n          {\n            if( ($doIt = ($cmp[$cf_key][$fx] != null)) )\n            {\n              switch($type_code[$cfieldsLeft[$cf_key]['type']])\n              {\n                case 'datetime':\n                  $dt_format = $t_datetime_format;\n                break ;\n              }\n            }                        \n            if( $doIt )\n            {\n              $cmp[$cf_key][$fx] = date($dt_format,$cmp[$cf_key][$fx]);\n            }\n          }\n        } \n      } // mega if\n    }  // foraeach    \n  }\n\n  return (null != $cmp && count($cmp) > 0) ? $cmp : null; \n}\n\n\n\n/**\n * \n *\n */\nfunction init_args() {\n  $args = new stdClass();\n\n  $args->req_id = isset($_REQUEST['requirement_id']) ? $_REQUEST['requirement_id'] : 0;\n  $args->compare_selected_versions = isset($_REQUEST['compare_selected_versions']);\n  $args->left_item_id = isset($_REQUEST['left_item_id']) ? intval($_REQUEST['left_item_id']) : -1;\n  $args->right_item_id = isset($_REQUEST['right_item_id']) ? intval($_REQUEST['right_item_id']) :  -1;\n    $args->tproject_id = isset($_SESSION['testprojectID']) ? $_SESSION['testprojectID'] : 0;\n\n  $args->use_daisydiff = isset($_REQUEST['use_html_comp']);\n\n  $diffEngineCfg = config_get(\"diffEngine\");\n  $args->context = null;\n  if( !isset($_REQUEST['context_show_all']))  {\n    $args->context = (isset($_REQUEST['context']) && is_numeric($_REQUEST['context'])) ? $_REQUEST['context'] : $diffEngineCfg->context;\n  }\n  \n  return $args;\n}\n\n/**\n * \n *\n */\nfunction initializeGui(&$dbHandler,&$argsObj,$lbl,&$reqMgr)\n{\n  $reqCfg = config_get('req_cfg');\n  $guiObj = new stdClass();\n  $guiObj->items = $reqMgr->get_history($argsObj->req_id,array('output' => 'array','decode_user' => true));\n  \n  \n  // Truncate log message\n  if( $reqCfg->log_message_len > 0 )\n  { \n    $loop2do = count($guiObj->items);\n    for($idx=0; $idx < $loop2do; $idx++)\n    {\n      if( strlen($guiObj->items[$idx]['log_message']) > $reqCfg->log_message_len )\n      {\n        $guiObj->items[$idx]['log_message'] = substr($guiObj->items[$idx]['log_message'],0,$reqCfg->log_message_len) . '...';\n      }\n      $guiObj->items[$idx]['log_message'] = htmlspecialchars($guiObj->items[$idx]['log_message']);\n    }\n  } \n  $guiObj->req_id = $argsObj->req_id;\n  $guiObj->compare_selected_versions = $argsObj->compare_selected_versions;\n  $guiObj->context = $argsObj->context;\n  $guiObj->version_short = $lbl['version_short'];\n  $guiObj->diff = null;\n  $reqCfg = getWebEditorCfg('requirement');\n  $guiObj->reqType = $reqCfg['type'];\n  \n  return $guiObj;\n}\n\n/**\n * \n *\n */\nfunction prepareUserFeedback(&$dbHandler,&$guiObj,$reqID,$labels,$sbs)\n{ \n  $guiObj->leftID = sprintf($labels['version_revision'],$sbs['left_item']['version'],$sbs['left_item']['revision']);\n  $guiObj->rightID = sprintf($labels['version_revision'],$sbs['right_item']['version'],$sbs['right_item']['revision']);\n  $mini_me = getBareBonesReq($dbHandler,$reqID);\n  $guiObj->subtitle = sprintf($labels['diff_details_req'], \n                $sbs['left_item']['version'],$sbs['left_item']['revision'],\n                $sbs['left_item']['version'],$sbs['left_item']['revision'],  \n                $sbs['right_item']['version'],$sbs['right_item']['revision'],\n                $sbs['right_item']['version'],$sbs['right_item']['revision'],  \n                            $mini_me['req_doc_id'] . config_get('gui_title_separator_1') . $mini_me['name']);\n}\n\n/**\n * \n *\n */\nfunction getAttrDiff($leftSide,$rightSide,$labels)\n{\n  $req_cfg = config_get('req_cfg'); \n  $key2loop = array('status' => 'status_labels','type' => 'type_labels','expected_coverage' => null);\n  foreach($key2loop as $fkey => $lkey)\n  {\n    // Need to decode\n    $cmp[$fkey] = array('label' => htmlspecialchars($labels[$fkey]),\n                       'lvalue' => $leftSide[$fkey],'rvalue' => $rightSide[$fkey],\n                       'changed' => $leftSide[$fkey] != $rightSide[$fkey]);\n                 \n    if( !is_null($lkey) )\n    {\n      $decode = $req_cfg->$lkey;\n      \n      $cmp[$fkey]['lvalue'] = lang_get($decode[$cmp[$fkey]['lvalue']]);\n      $cmp[$fkey]['rvalue'] = lang_get($decode[$cmp[$fkey]['rvalue']]);\n    }                   \n  }   \n  return $cmp;  \n}"], "fixing_code": ["<?php\n/** \n * TestLink Open Source Project - http://testlink.sourceforge.net/\n * This script is distributed under the GNU General Public License 2 or later. \n *\n * @package     TestLink\n * @author      asimon\n * @copyright   2005-2018, TestLink community \n * @filesource  reqCompareVersions.php\n * @link        http://www.testlink.org/\n *\n * Compares selected requirements versions with each other.\n */\n\nrequire_once(\"../../config.inc.php\");\nrequire_once(\"common.php\");\nrequire('../../third_party/diff/diff.php');\nrequire('../../third_party/daisydiff/src/HTMLDiff.php');\n\n$templateCfg = templateConfiguration();\ntestlinkInitPage($db);\n$smarty = new TLSmarty();\n\n$labels = init_labels(array(\"num_changes\" => null,\"no_changes\" => null, \n                \"diff_subtitle_req\" => null, \"version_short\" => null,\n                \"diff_details_req\" => null,\"type\" => null, \"status\" => null,\n                \"expected_coverage\" => null,\n                \"revision_short\" => null, \"version_revision\" => null) );\n\n\n\n$reqMgr = new requirement_mgr($db);\n$differ = new diff();\n$args = init_args();\n$gui = initializeGui($db,$args,$labels,$reqMgr);\n\n\n// if already two versions are selected, display diff\n// else display template with versions to select\nif ($args->compare_selected_versions) \n{\n  // Side By Side\n  $sbs = getItemsToCompare($args->left_item_id,$args->right_item_id,$gui->items);\n  prepareUserFeedback($db,$gui,$args->req_id,$labels,$sbs);\n  \n  $gui->attrDiff = getAttrDiff($sbs['left_item'],$sbs['right_item'],$labels);\n  \n  $cfields = getCFToCompare($sbs,$args->tproject_id,$reqMgr);\n  $gui->cfieldsDiff = null;\n  if( !is_null($cfields) )\n  {\n    $gui->cfieldsDiff = getCFDiff($cfields,$reqMgr);\n  }\n\n  $gui->diff = array(\"scope\" => array());\n  foreach($gui->diff as $key => $val) \n  {\n    if ($args->use_daisydiff) \n    {\n\t  // using daisydiff as diffing engine\n\t  $diff = new HTMLDiffer();\n\t  if ($gui->reqType == 'none'){\n\t\tlist($differences, $diffcount) = $diff->htmlDiff(nl2br($sbs['left_item'][$key]), nl2br($sbs['right_item'][$key]));\n\t  }\n\t  else{\n\t\tlist($differences, $diffcount) = $diff->htmlDiff($sbs['left_item'][$key], $sbs['right_item'][$key]);\n\t  }\n\t  $gui->diff[$key][\"diff\"] = $differences;\n\t  $gui->diff[$key][\"count\"] = $diffcount;\n\t}\n    else\n    {\n      // insert line endings so diff is better readable and makes sense (not everything in one line)\n      // then cast to array with \\n as separating character, differ needs that\n\t  $gui->diff[$key][\"left\"] = explode(\"\\n\", str_replace(\"</p>\", \"</p>\\n\", $sbs['left_item'][$key]));\n      $gui->diff[$key][\"right\"] = explode(\"\\n\", str_replace(\"</p>\", \"</p>\\n\", $sbs['right_item'][$key]));\n\t  $gui->diff[$key][\"diff\"] = $differ->inline($gui->diff[$key][\"left\"], $gui->leftID, \n                                                  $gui->diff[$key][\"right\"], $gui->rightID,$args->context);\n      $gui->diff[$key][\"count\"] = count($differ->changes);\n    }\n    \n    $gui->diff[$key][\"heading\"] = lang_get($key);\n  \n    // are there any changes? then display! if not, nothing to show here\n    $additional = '';\n    $msg_key = \"no_changes\";\n    if ($gui->diff[$key][\"count\"] > 0) \n    {\n      $msg_key = \"num_changes\";\n      $additional = $gui->diff[$key][\"count\"];\n    }\n    $gui->diff[$key][\"message\"] = (sprintf($labels[$msg_key], $key, $additional));\n  }\n}\n\n$smarty->assign('gui', $gui);\n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n/**\n * \n *\n */\nfunction getBareBonesReq($dbHandler,$reqID)\n{\n  $debugMsg = ' Function: ' . __FUNCTION__;\n  $tables = tlObjectWithDB::getDBTables(array('requirements','nodes_hierarchy'));\n  $sql =  \" /* $debugMsg */ SELECT REQ.req_doc_id, NH_REQ.name \" .\n      \" FROM {$tables['requirements']} REQ \" .\n      \" JOIN {$tables['nodes_hierarchy']} NH_REQ  ON  NH_REQ.id = REQ.id \" .\n      \" WHERE REQ.id = \" . intval($reqID);\n      \n  $bones = $dbHandler->get_recordset($sql);   \n\n  return $bones[0];\n}\n\n/**\n * \n *\n */\nfunction getItemsToCompare($leftSideID,$rightSideID,&$itemSet)\n{\n\n  $ret = array();\n  foreach($itemSet as $item) \n  {\n    if ($item['item_id'] == $leftSideID) \n    {\n      $ret['left_item'] = $item;\n    }\n    if ($item['item_id'] == $rightSideID) \n    {\n      $ret['right_item'] = $item;\n    }\n    \n    if( count($ret) == 2 )\n    {\n      break;\n    }\n  }\n  return $ret;\n}\n\n\n/**\n * \n *\n */\nfunction getCFToCompare($sides,$tprojectID,&$reqMgr)\n{\n  $cfields = array('left_side' => array('key' => 'left_item', 'value' => null), \n           'right_side' => array('key' => 'right_item', 'value' => null));\n\n  foreach($cfields as $item_side => $dummy)\n  {\n    $target_id = $sides[$dummy['key']];\n    $target_id = $target_id['item_id'];\n    $cfields[$item_side]['value'] = $reqMgr->get_linked_cfields(null,$target_id,$tprojectID);\n  }\n  return $cfields;  \n}\n\n\n/**\n * \n */\nfunction getCFDiff($cfields,&$reqMgr)\n{\n  $cmp = null;\n  \n  // Development Note\n  // All versions + revisions (i.e. child items) have the same qty of linked CF\n  // => both arrays will have same size()\n  //\n  // This is because to get cfields we look only to CF enabled for node type.\n  $cfieldsLeft = $cfields['left_side']['value'];\n  $cfieldsRight = $cfields['right_side']['value'];\n\n  if( !is_null($cfieldsLeft) )\n  {\n    $key2loop = array_keys($cfieldsLeft);\n    $cmp = array();\n    $type_code = $reqMgr->cfield_mgr->get_available_types();\n    $key2convert = array('lvalue','rvalue');\n    \n\n    $cfg = config_get('gui');\n    $cfCfg = config_get('custom_fields');    \n\n    $formats = array('date' => config_get( 'date_format'));\n    $t_date_format = str_replace(\"%\",\"\",$formats['date']); // must remove %\n    $t_datetime_format = $t_date_format . ' ' . $cfg->custom_fields->time_format;\n \n    foreach($key2loop as $cf_key)\n    {\n      $dt_format = $t_date_format;\n      \n      // $cfg->show_custom_fields_without_value \n      // false => At least one value has to be <> NULL to include on comparsion results\n      // \n      if( $cfCfg->show_custom_fields_without_value == true ||\n          ($cfCfg->show_custom_fields_without_value == false &&\n           ( (!is_null($cfieldsRight) && !is_null($cfieldsRight[$cf_key]['value'])) ||\n             (!is_null($cfieldsLeft) && !is_null($cfieldsLeft[$cf_key]['value'])) )\n            ) \n          )    \n      {   \n        $cmp[$cf_key] = array('label' => htmlspecialchars($cfieldsLeft[$cf_key]['label']),\n                              'lvalue' => $cfieldsLeft[$cf_key]['value'],\n                              'rvalue' => !is_null($cfieldsRight) ? $cfieldsRight[$cf_key]['value'] : null,\n                              'changed' => $cfieldsLeft[$cf_key]['value'] != $cfieldsRight[$cf_key]['value']);\n \n        if($type_code[$cfieldsLeft[$cf_key]['type']] == 'date' ||\n           $type_code[$cfieldsLeft[$cf_key]['type']] == 'datetime') \n        {\n          foreach($key2convert as $fx)\n          {\n            if( ($doIt = ($cmp[$cf_key][$fx] != null)) )\n            {\n              switch($type_code[$cfieldsLeft[$cf_key]['type']])\n              {\n                case 'datetime':\n                  $dt_format = $t_datetime_format;\n                break ;\n              }\n            }                        \n            if( $doIt )\n            {\n              $cmp[$cf_key][$fx] = date($dt_format,$cmp[$cf_key][$fx]);\n            }\n          }\n        } \n      } // mega if\n    }  // foraeach    \n  }\n\n  return (null != $cmp && count($cmp) > 0) ? $cmp : null; \n}\n\n\n\n/**\n * \n *\n */\nfunction init_args() {\n  $args = new stdClass();\n\n  $args->req_id = isset($_REQUEST['requirement_id']) ? intval($_REQUEST['requirement_id']) : 0;\n\n  $args->compare_selected_versions = isset($_REQUEST['compare_selected_versions']);\n  $args->left_item_id = isset($_REQUEST['left_item_id']) ? intval($_REQUEST['left_item_id']) : -1;\n  $args->right_item_id = isset($_REQUEST['right_item_id']) ? intval($_REQUEST['right_item_id']) :  -1;\n    $args->tproject_id = isset($_SESSION['testprojectID']) ? intval($_SESSION['testprojectID']) : 0;\n\n  $args->use_daisydiff = isset($_REQUEST['use_html_comp']);\n\n  $diffEngineCfg = config_get(\"diffEngine\");\n  $args->context = null;\n  if( !isset($_REQUEST['context_show_all']))  {\n    $args->context = (isset($_REQUEST['context']) && is_numeric($_REQUEST['context'])) ? $_REQUEST['context'] : $diffEngineCfg->context;\n  }\n  \n  return $args;\n}\n\n/**\n * \n *\n */\nfunction initializeGui(&$dbHandler,&$argsObj,$lbl,&$reqMgr)\n{\n  $reqCfg = config_get('req_cfg');\n  $guiObj = new stdClass();\n  $guiObj->items = $reqMgr->get_history($argsObj->req_id,array('output' => 'array','decode_user' => true));\n  \n  \n  // Truncate log message\n  if( $reqCfg->log_message_len > 0 )\n  { \n    $loop2do = count($guiObj->items);\n    for($idx=0; $idx < $loop2do; $idx++)\n    {\n      if( strlen($guiObj->items[$idx]['log_message']) > $reqCfg->log_message_len )\n      {\n        $guiObj->items[$idx]['log_message'] = substr($guiObj->items[$idx]['log_message'],0,$reqCfg->log_message_len) . '...';\n      }\n      $guiObj->items[$idx]['log_message'] = htmlspecialchars($guiObj->items[$idx]['log_message']);\n    }\n  } \n  $guiObj->req_id = $argsObj->req_id;\n  $guiObj->compare_selected_versions = $argsObj->compare_selected_versions;\n  $guiObj->context = $argsObj->context;\n  $guiObj->version_short = $lbl['version_short'];\n  $guiObj->diff = null;\n  $reqCfg = getWebEditorCfg('requirement');\n  $guiObj->reqType = $reqCfg['type'];\n  \n  return $guiObj;\n}\n\n/**\n * \n *\n */\nfunction prepareUserFeedback(&$dbHandler,&$guiObj,$reqID,$labels,$sbs)\n{ \n  $guiObj->leftID = sprintf($labels['version_revision'],$sbs['left_item']['version'],$sbs['left_item']['revision']);\n  $guiObj->rightID = sprintf($labels['version_revision'],$sbs['right_item']['version'],$sbs['right_item']['revision']);\n  $mini_me = getBareBonesReq($dbHandler,$reqID);\n  $guiObj->subtitle = sprintf($labels['diff_details_req'], \n                $sbs['left_item']['version'],$sbs['left_item']['revision'],\n                $sbs['left_item']['version'],$sbs['left_item']['revision'],  \n                $sbs['right_item']['version'],$sbs['right_item']['revision'],\n                $sbs['right_item']['version'],$sbs['right_item']['revision'],  \n                            $mini_me['req_doc_id'] . config_get('gui_title_separator_1') . $mini_me['name']);\n}\n\n/**\n * \n *\n */\nfunction getAttrDiff($leftSide,$rightSide,$labels)\n{\n  $req_cfg = config_get('req_cfg'); \n  $key2loop = array('status' => 'status_labels','type' => 'type_labels','expected_coverage' => null);\n  foreach($key2loop as $fkey => $lkey)\n  {\n    // Need to decode\n    $cmp[$fkey] = array('label' => htmlspecialchars($labels[$fkey]),\n                       'lvalue' => $leftSide[$fkey],'rvalue' => $rightSide[$fkey],\n                       'changed' => $leftSide[$fkey] != $rightSide[$fkey]);\n                 \n    if( !is_null($lkey) )\n    {\n      $decode = $req_cfg->$lkey;\n      \n      $cmp[$fkey]['lvalue'] = lang_get($decode[$cmp[$fkey]['lvalue']]);\n      $cmp[$fkey]['rvalue'] = lang_get($decode[$cmp[$fkey]['rvalue']]);\n    }                   \n  }   \n  return $cmp;  \n}"], "filenames": ["lib/requirements/reqCompareVersions.php"], "buggy_code_start_loc": [250], "buggy_code_end_loc": [255], "fixing_code_start_loc": [250], "fixing_code_end_loc": [256], "type": "CWE-89", "message": "Multiple SQL injection vulnerabilities in TestLink through 1.9.19 allows remote authenticated users to execute arbitrary SQL commands via the (1) tproject_id parameter to keywordsView.php; the (2) req_spec_id parameter to reqSpecCompareRevisions.php; the (3) requirement_id parameter to reqCompareVersions.php; the (4) build_id parameter to planUpdateTC.php; the (5) tplan_id parameter to newest_tcversions.php; the (6) tplan_id parameter to tcCreatedPerUserGUI.php; the (7) tcase_id parameter to tcAssign2Tplan.php; or the (8) testcase_id parameter to tcCompareVersions.php. Authentication is often easy to achieve: a guest account, that can execute this attack, can be created by anyone in the default configuration.", "other": {"cve": {"id": "CVE-2019-20107", "sourceIdentifier": "cve@mitre.org", "published": "2020-03-05T13:15:11.200", "lastModified": "2020-03-07T01:30:01.607", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple SQL injection vulnerabilities in TestLink through 1.9.19 allows remote authenticated users to execute arbitrary SQL commands via the (1) tproject_id parameter to keywordsView.php; the (2) req_spec_id parameter to reqSpecCompareRevisions.php; the (3) requirement_id parameter to reqCompareVersions.php; the (4) build_id parameter to planUpdateTC.php; the (5) tplan_id parameter to newest_tcversions.php; the (6) tplan_id parameter to tcCreatedPerUserGUI.php; the (7) tcase_id parameter to tcAssign2Tplan.php; or the (8) testcase_id parameter to tcCompareVersions.php. Authentication is often easy to achieve: a guest account, that can execute this attack, can be created by anyone in the default configuration."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de inyecci\u00f3n SQL en TestLink versiones hasta 1.9.19, permiten a usuarios autenticados remotos ejecutar comandos SQL arbitrarios por medio del (1) par\u00e1metro tproject_id en el archivo keywordsView.php; el (2) par\u00e1metro req_spec_id en el archivo reqSpecCompareRevisions.php; el (3) par\u00e1metro require_id en el archivo reqCompareVersions.php; el (4) par\u00e1metro build_id en el archivo planUpdateTC.php; el (5) par\u00e1metro tplan_id en el archivo newest_tcversions.php; el (6) par\u00e1metro tplan_id en el archivo tcCreatedPerUserGUI.php; el (7) par\u00e1metro tcase_id en el archivo tcAssign2Tplan.php; o el par\u00e1metro (8) testcase_id en el archivo tcCompareVersions.php. La autenticaci\u00f3n a menudo es f\u00e1cil de lograr: una cuenta invitado, que pueda ejecutar este ataque, puede ser creada por cualquier persona en la configuraci\u00f3n predeterminada."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:testlink:testlink:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.9.19", "matchCriteriaId": "10134F9D-7A59-43ED-930F-C3466CC7CB3E"}]}]}], "references": [{"url": "http://mantis.testlink.org/view.php?id=8829", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://mantis.testlink.org/view.php?id=8829#c29360", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/146b4f38010a48c36b7d9650060ca354c92ab4ac", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/7647a7b53ceab31524cfcfb3beb8435af0a30fc1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/942c406fcee5d376235a264cb8a79300a0002d20", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/bcf7b971b5c88ea08d2dc47685f319be3b02cea8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/d27690c6cb7708a6db0701b6428381d32d51495a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/e2d88c9d7f8e02640ba65e5ff74b55d0399a53d0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://twitter.com/TLOpenSource/status/1212394020946751489", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/146b4f38010a48c36b7d9650060ca354c92ab4ac"}}