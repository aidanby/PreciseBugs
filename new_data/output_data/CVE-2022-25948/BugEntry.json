{"buggy_code": ["---\ntitle: Options\n---\n\nThe [Liquid][liquid] constructor accepts a plain object as options to define the behavior of LiquidJS. All of these options are optional thus we can specify any of them, for example the `cache` option:\n\n```javascript\nconst { Liquid } = require('liquidjs')\nconst engine = new Liquid({\n    cache: true\n})\n```\n\n{% note info API Document %}\nFollowing is an overview for all the options, for exact types and signatures please refer to <a href=\"https://liquidjs.com/api/interfaces/liquid_options_.liquidoptions.html\" target=\"_self\">LiquidOptions | API</a>.\n{% endnote %}\n\n## cache\n\n**cache** is used to improve performance by caching previously parsed template structures, specially in cases when we're repeatedly parse or render files.\n\nIt's default to `false`. When setting to `true` a default LRU cache of size 1024 will be enabled. And certainly it can be a number which indicates the size of cache you want.\n\nAdditionally, it can also be a custom cache implementation. See [Caching][caching] for details.\n\n## Partials/Layouts\n\n**root** is used to specify template directories for LiquidJS to lookup and read template files. Can be a single string and an array of strings. See [Render Files][render-file] for details.\n\n**layouts** is used to specify template directories for LiquidJS to lookup files for `{% layout %}`. Same format as `root` and will default to `root` if not specified.\n\n**partials** is used to specify template directories for LiquidJS to lookup files for `{% render %}` and `{% include %}`. Same format as `root` and will default to `root` if not specified.\n\n**relativeReference** is set to `true` by default to allow relative filenames. Note that relatively referenced files are also need to be within corresponding root. For example you can reference another file like `{% render ../foo/bar %}` as long as `../foo/bar` is also within `partials` directory.\n\n## dynamicPartials\n\n> Note: for historical reasons, it's named dynamicPartials but it also works for layouts.\n\n**dynamicPartials** indicates whether or not to treat filename arguments in [include][include], [render][render], [layout][layout] tags as a variable. Defaults to `true`. For example, render the following snippet with scope `{ file: 'foo.html' }` will include the `foo.html`:\n\n```liquid\n{% include file %}\n```\n\nSetting `dynamicPartials: false`, LiquidJS will try to include the file named `file`, which is weird but allows simpler syntax if your template relations are static:\n\n```liquid\n{% liquid foo.html %}\n```\n\n{% note warn Common Pitfall %}\nLiquidJS defaults this option to <code>true</code> to be compatible with shopify/liquid, but if you're from <a href=\"https://github.com/11ty/eleventy\" target=\"_blank\">eleventy</a> it's set to <code>false</code> by default (see <a href=\"https://www.11ty.dev/docs/languages/liquid/#quoted-include-paths\" target=\"_blank\">Quoted Include Paths</a>) which I believe is trying to be compatible with Jekyll.{% endnote %}\n\n## Jekyll include\n\n{% since %}v9.33.0{% endsince %}\n\n[jekyllInclude][jekyllInclude] is used to enable Jekyll-like include syntax. Defaults to `false`, when set to `true`:\n\n- Filename will be static: `dynamicPartials` now defaults to `false` (instead of `true`). And you can set `dynamicPartials` back to `true`.\n- Use `=` instead of `:` to separate parameter key-values.\n- Parameters are under `include` variable instead of current scope.\n\nFor example in the following template, `name.html` is not quoted, `header` and `\"HEADER\"` are separated by `=`, and the `header` parameter is referenced by `include.header`. More details please check out [include][include].\n\n```liquid\n// entry template\n{% include article.html header=\"HEADER\" content=\"CONTENT\" %}\n\n// article.html\n<article>\n  <header>{{include.header}}</header>\n  {{include.content}}\n</article>\n```\n\n## extname\n\n**extname** defines the default extension name to be appended into filenames if the filename has no extension name. Defaults to `''` which means it's disabled by default. By setting it to `.liquid`:\n\n```liquid\n{% render \"foo\" %}  there's no extname, adds `.liquid` and loads foo.liquid\n{% render \"foo.html\" %}  there is an extname already, loads foo.html directly\n```\n\n{% note info Legacy Versions %}\nBefore 2.0.1, <code>extname</code> is set to `.liquid` by default. To change that you need to set <code>extname: ''</code> explicitly. See <a href=\"https://github.com/harttle/liquidjs/issues/41\" target=\"_blank\">#41</a> for details.\n{% endnote %}\n\n## fs\n\n**fs** is used to define a custom file system implementation which will be used by LiquidJS to lookup and read template files. See [Abstract File System][abstract-fs] for details.\n\n## globals\n\n**globals** is used to define global variables available to all templates even in cases of [render tag][render]. See [3185][185] for details.\n\n## jsTruthy\n\n**jsTruthy** is used to use standard Javascript truthiness rather than the Shopify.\n\nit defaults to false.  For example, when set to true, a blank string would evaluate to false with jsTruthy. With Shopify's truthiness, a blank string is true.\n\n## Date\n\n**timezoneOffset** is used to specify a different timezone to output dates, your local timezone will be used if not specified. For example, set `timezoneOffset: 0` to output all dates in UTC/GMT 00:00.\n\n**preserveTimezones** is a boolean effects only literal timestamps. When set to `true`, all literal timestamps will remain the same when output. This is a parser option, so Date objects passed to LiquidJS as data will not be affected. Note that `preserveTimezones` has a higher priority than `timezoneOffset`.\n\n## Trimming\n\n**greedy**, **trimOutputLeft**, **trimOutputRight**, **trimTagLeft**, **trimTagRight** options are used to eliminate extra newlines and indents in templates around Liquid Constructs. See [Whitespace Control][wc] for details.\n\n## Delimiter\n\n**outputDelimiterLeft**, **outputDelimiterRight**, **tagDelimiterLeft**, **tagDelimiterRight** are used to customize the delimiters for LiquidJS [Tags and Filters][intro]. For example with `outputDelimiterLeft: <%=, outputDelimiterRight: %>` we are able to avoid conflicts with other languages:\n\n```ejs\n<%= username | append: \", welcome to LiquidJS!\" %>\n```\n\n## Strict\n\n**strictFilters** is used to assert filter existence. If set to `false`, undefined filters will be skipped. Otherwise, undefined filters will cause a parse exception. Defaults to `false`.\n\n**strictVariables** is used to assert variable existence.  If set to `false`, undefined variables will be rendered as empty string.  Otherwise, undefined variables will cause a render exception. Defaults to `false`.\n\n**lenientIf** modifies the behavior of `strictVariables` to allow handling optional variables. If set to `true`, an undefined variable will *not* cause an exception in the following two situations: a) it is the condition to an `if`, `elsif`, or `unless` tag; b) it occurs right before a `default` filter. Irrelevant if `strictVariables` is not set. Defaults to `false`.\n\n{% note info Non-existent Tags %}\nNon-existent tags always throw errors during parsing and this behavior can not be customized.\n{% endnote %}\n\n## Parameter Order\n\nParameter orders are ignored by default, for ea `{% for i in (1..8) reversed limit:3 %}` will always perform `limit` before `reversed`, even if `reversed` occurs before `limit`. To make parameter order respected, set **orderedFilterParameters** to `true`. Its default value is `false`.\n\n[liquid]: ../api/classes/liquid_.liquid.html\n[caching]: ./caching.html\n[abstract-fs]: ./render-file.html#Abstract-File-System\n[render-file]: ./render-file.html\n[185]: https://github.com/harttle/liquidjs/issues/185\n[render]: ../tags/render.html\n[include]: ../tags/include.html\n[layout]: ../tags/layout.html\n[wc]: ./whitespace-control.html\n[intro]: ./intro-to-liquid.html\n[jekyllInclude]: ../api/interfaces/liquid_options_.liquidoptions.html#Optional-jekyllInclude\n", "---\ntitle: \u9009\u9879\n---\n\n[Liquid][liquid] \u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u5bf9\u8c61\uff0c\u7528\u6765\u5b9a\u4e49\u5404\u79cd\u6a21\u677f\u5f15\u64ce\u884c\u4e3a\u3002\u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\uff0c\u6bd4\u5982\u6211\u53ef\u4ee5\u6307\u5b9a\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570 `cache`\uff1a\n\n```javascript\nconst { Liquid } = require('liquidjs')\nconst engine = new Liquid({\n    cache: true\n})\n```\n\n{% note info API \u6587\u6863 %}\n\u4e0b\u9762\u7684\u6240\u6709\u9009\u9879\u7684\u6982\u8ff0\uff0c\u5e0c\u671b\u4e86\u89e3\u5177\u4f53\u7684\u7c7b\u578b\u548c\u7b7e\u540d\uff0c\u8bf7\u524d\u5f80 <a href=\"https://liquidjs.com/api/interfaces/liquid_options_.liquidoptions.html\" target=\"_self\">LiquidOptions | API</a>.\n{% endnote %}\n\n## \u7f13\u5b58\n\n**cache** \u7528\u6765\u6307\u5b9a\u662f\u5426\u7f13\u5b58\u66fe\u7ecf\u8bfb\u53d6\u548c\u5904\u7406\u8fc7\u7684\u6a21\u677f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5728\u751f\u4ea7\u73af\u5883\u6a21\u677f\u4f1a\u91cd\u590d\u6e32\u67d3\u7684\u60c5\u51b5\u4f1a\u5f88\u6709\u7528\u3002\n\n\u9ed8\u8ba4\u662f `false`\uff0c\u5f53\u8bbe\u7f6e\u4e3a `true` \u65f6\u4f1a\u542f\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a 1024 \u7684 LRU \u7f13\u5b58\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f20\u4e00\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\u7f13\u5b58\u5927\u5c0f\u3002\u6b64\u5916\u8fd8\u53ef\u4ee5\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7f13\u5b58\u5b9e\u73b0\uff0cLiquidJS \u4f1a\u901a\u8fc7\u5b83\u6765\u67e5\u627e\u548c\u8bfb\u5199\u6587\u4ef6\u3002\u8be6\u60c5\u8bf7\u53c2\u8003 [Caching][caching]\u3002\n\n## \u5e03\u5c40\u548c\u7247\u6bb5\n\n**root** \u7528\u6765\u6307\u5b9a LiquidJS \u67e5\u627e\u548c\u8bfb\u53d6\u6a21\u677f\u7684\u6839\u76ee\u5f55\u3002\u53ef\u4ee5\u662f\u5355\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6570\u7ec4 LiquidJS \u4f1a\u987a\u5e8f\u67e5\u627e\u3002\u8be6\u60c5\u8bf7\u53c2\u8003 [Render Files][render-file]\u3002\n\n**layouts** \u548c `root` \u5177\u6709\u4e00\u6837\u7684\u683c\u5f0f\uff0c\u7528\u6765\u6307\u5b9a `{% layout %}` \u6240\u4f7f\u7528\u7684\u76ee\u5f55\u3002\u6ca1\u6709\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a `root`\u3002\n\n**partials** \u548c `root` \u5177\u6709\u4e00\u6837\u7684\u683c\u5f0f\uff0c\u7528\u6765\u6307\u5b9a `{% render %}` \u548c `{% include %}` \u6240\u4f7f\u7528\u7684\u76ee\u5f55\u3002\u6ca1\u6709\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a `root`\u3002\n\n**relativeReference** \u9ed8\u8ba4\u4e3a `true` \u7528\u6765\u5141\u8bb8\u4ee5\u76f8\u5bf9\u8def\u5f84\u5f15\u7528\u5176\u4ed6\u6587\u4ef6\u3002\u6ce8\u610f\u88ab\u5f15\u7528\u7684\u6587\u4ef6\u4ecd\u7136\u9700\u8981\u5728\u5bf9\u5e94\u7684 root \u76ee\u5f55\u4e0b\u3002\u4f8b\u5982\u53ef\u4ee5\u8fd9\u6837\u5f15\u7528\u4e00\u4e2a\u6587\u4ef6 `{% render ../foo/bar %}`\uff0c\u4f46\u9700\u8981\u786e\u4fdd `../foo/bar` \u5904\u4e8e `partials` \u76ee\u5f55\u4e0b\u3002\n\n## \u52a8\u6001\u5f15\u7528\n\n> \u6ce8\u610f\u7531\u4e8e\u5386\u53f2\u539f\u56e0\u8fd9\u4e2a\u9009\u9879\u53eb\u505a dynamicPartials\uff0c\u4f46\u5b83\u5bf9 layout \u4e5f\u8d77\u4f5c\u7528\u3002\n\n**dynamicPartials** \u8868\u793a\u662f\u5426\u628a\u4f20\u7ed9 [include][include], [render][render], [layout][layout] \u6807\u7b7e\u7684\u6587\u4ef6\u540d\u5f53\u505a\u53d8\u91cf\u5904\u7406\u3002\u9ed8\u8ba4\u4e3a `true`\u3002\u4f8b\u5982\u7528\u4e0a\u4e0b\u6587 `{ file: 'foo.html' }` \u6e32\u67d3\u4e0b\u9762\u7684\u6a21\u677f\u5c06\u4f1a\u5f15\u5165\u6587\u4ef6 `foo.html`\uff1a\n\n```liquid\n{% include file %}\n```\n\n\u8bbe\u7f6e `dynamicPartials: false` \u540e LiquidJS \u5c06\u4f1a\u5c1d\u8bd5\u53bb\u8bfb\u53d6 `file`\u3002\u5f53\u4f60\u7684\u6a21\u677f\u4e4b\u95f4\u90fd\u662f\u9759\u6001\u5f15\u5165\u5173\u7cfb\u65f6\u4f1a\u5f88\u6709\u7528\uff1a\n\n```liquid\n{% liquid foo.html %}\n```\n\n{% note warn \u5e38\u89c1\u9677\u9631 %}\nLiquidJS \u628a\u8fd9\u4e2a\u9009\u9879\u9ed8\u8ba4\u503c\u8bbe\u4e3a <code>true</code> \u4ee5\u517c\u5bb9\u4e8e shopify/liquid\uff0c\u4f46\u5982\u679c\u4f60\u5728\u4f7f\u7528 <a href=\"https://github.com/11ty/eleventy\" target=\"_blank\">eleventy</a> \u5b83\u4f1a\u8bbe\u7f6e\u9ed8\u8ba4\u503c <code>false</code> \uff08\u53c2\u8003 <a href=\"https://www.11ty.dev/docs/languages/liquid/#quoted-include-paths\" target=\"_blank\">Quoted Include Paths</a>\uff09\u4ee5\u517c\u5bb9\u4e8e Jekyll\u3002{% endnote %}\n\n## Jekyll include\n\n{% since %}v9.33.0{% endsince %}\n\n[jekyllInclude][jekyllInclude] \u7528\u6765\u542f\u7528 Jekyll-like include \u8bed\u6cd5\u3002\u9ed8\u8ba4\u4e3a `false`\uff0c\u5f53\u8bbe\u7f6e\u4e3a `true` \u65f6\uff1a\n\n- \u9ed8\u8ba4\u542f\u7528\u9759\u6001\u6587\u4ef6\u540d\uff1a`dynamicPartials` \u7684\u9ed8\u8ba4\u503c\u53d8\u4e3a `false`\uff08\u800c\u975e `true`\uff09\u3002\u4f46\u4f60\u4e5f\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u56de `true`\u3002\n- \u53c2\u6570\u7684\u952e\u548c\u503c\u4e4b\u95f4\u7531 `=` \u5206\u9694\uff08\u672c\u6765\u662f `:`\uff09\u3002\n- \u53c2\u6570\u653e\u5230\u4e86 `include` \u53d8\u91cf\u4e0b\uff0c\u800c\u975e\u5f53\u524d\u4f5c\u7528\u57df\u3002\n\n\u4f8b\u5982\u4e0b\u9762\u7684\u6a21\u677f\u4e2d\uff0c`name.html` \u6ca1\u6709\u5e26\u5f15\u53f7\uff0c`header` \u548c `\"HEADER\"` \u4ee5 `=` \u5206\u9694\uff0c`header` \u53c2\u6570\u901a\u8fc7 `include.header` \u6765\u5f15\u7528\u3002\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u8003 [include][include]\u3002\n\n```liquid\n// entry template\n{% include article.html header=\"HEADER\" content=\"CONTENT\" %}\n\n// article.html\n<article>\n  <header>{{include.header}}</header>\n  {{include.content}}\n</article>\n```\n\n## extname\n\n**extname** \u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u6587\u4ef6\u540e\u7f00\uff0c\u5f53\u4f20\u5165\u6587\u4ef6\u540d\u4e0d\u5305\u542b\u540e\u7f00\u65f6\u81ea\u52a8\u8ffd\u52a0\u3002\u9ed8\u8ba4\u503c\u662f `''` \u4e5f\u5c31\u662f\u8bf4\u9ed8\u8ba4\u662f\u7981\u7528\u7684\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a `.liquid`\uff1a\n\n```liquid\n{% render \"foo\" %}  \u6ca1\u6709\u540e\u7f00\uff0c\u6dfb\u52a0 \".liquid\" \u5e76\u52a0\u8f7d foo.liquid\n{% render \"foo.html\" %} \u5df2\u7ecf\u6709\u540e\u7f00\u4e86\uff0c\u76f4\u63a5\u52a0\u8f7d foo.html\n```\n\n{% note info \u65e7\u7248\u884c\u4e3a %}\n\u5728 2.0.1 \u4e4b\u524d\uff0c<code>extname</code> \u9ed8\u8ba4\u503c\u4e3a `.liquid`\u3002\u8981\u7981\u7528\u5b83\u9700\u8981\u660e\u786e\u8bbe\u7f6e\u4e3a <code>extname: ''</code>\u3002\u8be6\u60c5\u53c2\u8003 <a href=\"https://github.com/harttle/liquidjs/issues/41\" target=\"_blank\">#41</a>\u3002\n{% endnote %}\n\n## fs\n\n**fs** \u7528\u6765\u81ea\u5b9a\u4e49\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 [Abstract File System][abstract-fs]\u3002\n\n## globals\n\n**globals** \u7528\u6765\u5b9a\u4e49\u5bf9\u6240\u6709\u6a21\u677f\u53ef\u89c1\u7684\u5168\u5c40\u53d8\u91cf\u3002\u5305\u62ec [render tag][render] \u5f15\u5165\u7684\u5b50\u6a21\u677f\uff0c\u89c1 [3185][185]\u3002\n\n## jsTruthy\n\n**jsTruthy** \u7528\u6765\u4f7f\u7528 Javascript \u7684\u771f\u503c\u5224\u65ad\uff0c\u9ed8\u8ba4\u4e3a `false` \u4f7f\u7528 Shopify \u65b9\u5f0f\u3002\n\n\u4f8b\u5982\uff0c\u7a7a\u5b57\u7b26\u4e32\u5728 JavaScript \u4e2d\u4e3a\u5047\uff08`jsTruthy` \u4e3a `true` \u65f6\uff09\uff0c\u5728 Shopify \u771f\u503c\u8868\u4e2d\u4e3a\u771f\u3002\n\n## \u65f6\u95f4\u65e5\u671f\u548c\u65f6\u533a\n\n**timezoneOffset** \u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u548c\u4f60\u5f53\u5730\u65f6\u533a\u4e0d\u540c\u7684\u65f6\u533a\uff0c\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u8f93\u51fa\u65f6\u90fd\u8f6c\u6362\u5230\u8fd9\u4e2a\u6307\u5b9a\u7684\u65f6\u533a\u3002\u4f8b\u5982\u8bbe\u7f6e `timezoneOffset: 0` \u5c06\u4f1a\u628a\u6240\u6709\u65e5\u671f\u6309\u7167 UTC/GMT 00:00 \u6765\u8f93\u51fa\u3002\n\n**preserveTimezones** \u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u53ea\u5f71\u54cd\u65f6\u95f4\u6233\u5b57\u9762\u91cf\u3002\u5f53\u8bbe\u7f6e\u4e3a `true` \u65f6\uff0c\u6240\u6709\u5b57\u9762\u91cf\u7684\u65f6\u95f4\u6233\u5b57\u7b26\u4e32\u4f1a\u5728\u8f93\u51fa\u65f6\u4fdd\u6301\u539f\u72b6\uff0c\u5373\u4e0d\u8bba\u8f93\u5165\u65f6\u91c7\u53d6\u600e\u6837\u7684\u65f6\u533a\uff0c\u8f93\u51fa\u65f6\u4ecd\u7136\u91c7\u7528\u90a3\u4e00\u65f6\u533a\uff08\u548c Shopify Liquid \u7684\u884c\u4e3a\u4e00\u81f4\uff09\u3002\u6ce8\u610f\u8fd9\u662f\u4e00\u4e2a\u89e3\u6790\u5668\u53c2\u6570\uff0c\u6e32\u67d3\u65f6\u4f20\u5165\u7684\u6570\u636e\u4e2d\u7684\u65e5\u671f\u7684\u8f93\u51fa\u4e0d\u4f1a\u53d7\u6b64\u53c2\u6570\u5f71\u54cd\u3002\u6ce8\u610f `preserveTimezones` \u6bd4 `timezoneOffset` \u7684\u4f18\u5148\u7ea7\u66f4\u9ad8\u3002\n\n\n## \u6362\u884c\u548c\u7f29\u8fdb\n\n**greedy**, **trimOutputLeft**, **trimOutputRight**, **trimTagLeft**, **trimTagRight** \u9009\u9879\u7528\u6765\u79fb\u9664 Liquid \u8bed\u6cd5\u5468\u56f4\u7684\u6362\u884c\u548c\u7f29\u8fdb\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 [Whitespace Control][wc]\u3002\n\n## \u81ea\u5b9a\u4e49\u5206\u9694\u7b26\n\n**outputDelimiterLeft**, **outputDelimiterRight**, **tagDelimiterLeft**, **tagDelimiterRight** \u7528\u6765\u81ea\u5b9a\u4e49 LiquidJS \u4e2d [\u6807\u7b7e\u548c\u8fc7\u6ee4\u5668][intro] \u7684\u5206\u9694\u7b26\u3002\u4f8b\u5982\u8bbe\u7f6e\u4e86 `outputDelimiterLeft: <%=, outputDelimiterRight: %>` \u540e\u6211\u4eec\u53ef\u4ee5\u907f\u514d\u8ddf\u5176\u4ed6\u6a21\u677f\u5f15\u64ce\u51b2\u7a81\uff1a\n\n```ejs\n<%= username | append: \", welcome to LiquidJS!\" %>\n```\n\n## \u4e25\u683c\u6a21\u5f0f\n\n**strictFilters** \u7528\u6765\u542f\u7528\u8fc7\u6ee4\u5668\u7684\u4e25\u683c\u6a21\u5f0f\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a `true` \u8fc7\u6ee4\u5668\u4e0d\u5b58\u5728\u65f6\u89e3\u6790\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u9ed8\u8ba4\u4e3a `false`\uff0c\u8fd9\u65f6\u4f1a\u8df3\u8fc7\u4e0d\u5b58\u5728\u7684\u8fc7\u6ee4\u5668\u3002\n\n**strictVariables** \u7528\u6765\u542f\u7528\u53d8\u91cf\u4e25\u683c\u6a21\u5f0f\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a `true` \u53d8\u91cf\u4e0d\u5b58\u5728\u65f6\u6e32\u67d3\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u9ed8\u8ba4\u4e3a `false` \u8fd9\u65f6\u4e0d\u5b58\u5728\u7684\u53d8\u91cf\u4f1a\u88ab\u6e32\u67d3\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\n\n{% note info \u4e0d\u5b58\u5728\u7684\u6807\u7b7e %}\n\u4e0d\u5b58\u5728\u7684\u6807\u7b7e\u603b\u662f\u4f1a\u629b\u51fa\u4e00\u4e2a\u89e3\u6790\u5f02\u5e38\uff0c\u8fd9\u4e00\u884c\u4e3a\u65e0\u6cd5\u81ea\u5b9a\u4e49\u3002\n{% endnote %}\n\n## \u53c2\u6570\u987a\u5e8f\n\n\u9ed8\u8ba4\u4f1a\u5ffd\u7565\u53c2\u6570\u51fa\u73b0\u7684\u987a\u5e8f\uff0c\u4f8b\u5982 `{% for i in (1..8) reversed limit:3 %}` \u91cc\u603b\u662f\u4f1a\u5148\u6267\u884c `limit` \u518d\u6267\u884c `reversed`\uff0c\u867d\u7136 `reversed` \u5148\u51fa\u73b0\u3002\u4e3a\u4e86\u8ba9 LiquidJS \u6309\u987a\u5e8f\u6267\u884c\u53c2\u6570\uff0c\u9700\u8981\u8bbe\u7f6e **orderedFilterParameters** \u4e3a `true`\u3002\u5b83\u7684\u9ed8\u8ba4\u503c\u4e3a `false`\u3002\n\n[liquid]: ../api/classes/liquid_.liquid.html\n[caching]: ./caching.html\n[abstract-fs]: ./render-file.html#Abstract-File-System\n[render-file]: ./render-file.html\n[185]: https://github.com/harttle/liquidjs/issues/185\n[render]: ../tags/render.html\n[include]: ../tags/include.html\n[layout]: ../tags/layout.html\n[wc]: ./whitespace-control.html\n[intro]: ./intro-to-liquid.html\n[jekyllInclude]: ../api/interfaces/liquid_options_.liquidoptions.html#Optional-jekyllInclude\n", "{\n  \"name\": \"liquidjs\",\n  \"version\": \"9.33.1\",\n  \"description\": \"A simple, expressive and safe Shopify / Github Pages compatible template engine in pure JavaScript.\",\n  \"main\": \"dist/liquid.node.cjs.js\",\n  \"module\": \"dist/liquid.node.esm.js\",\n  \"es2015\": \"dist/liquid.browser.esm.js\",\n  \"browser\": {\n    \"./dist/liquid.node.cjs.js\": \"./dist/liquid.browser.umd.js\",\n    \"./dist/liquid.node.esm.js\": \"./dist/liquid.browser.esm.js\"\n  },\n  \"types\": \"dist/liquid.d.ts\",\n  \"scripts\": {\n    \"lint\": \"eslint \\\"**/*.ts\\\" .\",\n    \"check\": \"npm run build && npm test && npm run lint\",\n    \"test\": \"nyc mocha \\\"test/**/*.ts\\\"\",\n    \"test:e2e\": \"mocha \\\"test/e2e/**/*.ts\\\"\",\n    \"perf\": \"cd benchmark && npm ci && npm start\",\n    \"perf:diff\": \"bin/perf-diff.sh\",\n    \"perf:engines\": \"cd benchmark && npm run engines\",\n    \"postversion\": \"npm run build:dist\",\n    \"build\": \"npm run build:dist && npm run build:docs\",\n    \"build:dist\": \"rollup -c rollup.config.ts\",\n    \"build:docs\": \"bin/build-docs.sh\"\n  },\n  \"bin\": {\n    \"liquidjs\": \"./bin/liquid.js\",\n    \"liquid\": \"./bin/liquid.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/harttle/liquidjs.git\"\n  },\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/liquidjs\"\n  },\n  \"files\": [\n    \"bin/liquid.js\",\n    \"dist\",\n    \"LICENSE\",\n    \"README.md\"\n  ],\n  \"engines\": {\n    \"node\": \">=4.8.7\"\n  },\n  \"keywords\": [\n    \"liquid\",\n    \"template engine\",\n    \"express\",\n    \"jinja\",\n    \"shopify\"\n  ],\n  \"author\": \"Harttle\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/harttle/liquidjs/issues\"\n  },\n  \"homepage\": \"https://github.com/harttle/liquidjs#readme\",\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^12.1.4\",\n    \"@commitlint/config-conventional\": \"^8.2.0\",\n    \"@semantic-release/changelog\": \"^3.0.2\",\n    \"@semantic-release/commit-analyzer\": \"^6.1.0\",\n    \"@semantic-release/git\": \"^7.0.8\",\n    \"@semantic-release/npm\": \"^5.1.8\",\n    \"@semantic-release/release-notes-generator\": \"^7.1.4\",\n    \"@types/benchmark\": \"^1.0.31\",\n    \"@types/chai\": \"^4.1.7\",\n    \"@types/chai-as-promised\": \"^7.1.0\",\n    \"@types/express\": \"^4.17.2\",\n    \"@types/jsdom\": \"^12.2.2\",\n    \"@types/mocha\": \"^5.2.6\",\n    \"@types/sinon\": \"^7.0.6\",\n    \"@types/sinon-chai\": \"^3.2.2\",\n    \"@types/supertest\": \"^2.0.7\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.6.0\",\n    \"@typescript-eslint/parser\": \"^5.6.0\",\n    \"all-contributors-cli\": \"^6.20.0\",\n    \"benchmark\": \"^2.1.4\",\n    \"chai\": \"^4.2.0\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"coveralls\": \"^3.0.2\",\n    \"cross-env\": \"^5.2.0\",\n    \"eslint\": \"^7.32.0\",\n    \"eslint-config-standard\": \"^12.0.0\",\n    \"eslint-plugin-import\": \"^2.15.0\",\n    \"eslint-plugin-mocha\": \"^5.3.0\",\n    \"eslint-plugin-node\": \"^8.0.1\",\n    \"eslint-plugin-promise\": \"^4.0.1\",\n    \"eslint-plugin-standard\": \"^4.0.0\",\n    \"express\": \"^4.16.4\",\n    \"husky\": \"^4.2.5\",\n    \"jsdom\": \"^13.2.0\",\n    \"mocha\": \"^9.0.1\",\n    \"nyc\": \"^15.1.0\",\n    \"regenerator-runtime\": \"^0.12.1\",\n    \"rollup\": \"^2.61.0\",\n    \"rollup-plugin-replace\": \"^2.1.0\",\n    \"rollup-plugin-typescript2\": \"^0.31.1\",\n    \"rollup-plugin-uglify\": \"^5.0.2\",\n    \"rollup-plugin-version-injector\": \"^1.3.3\",\n    \"semantic-release\": \"^17.2.3\",\n    \"sinon\": \"^7.5.0\",\n    \"sinon-chai\": \"^3.3.0\",\n    \"supertest\": \"^3.4.2\",\n    \"ts-node\": \"^8.0.2\",\n    \"tslib\": \"^2.3.1\",\n    \"typedoc\": \"^0.19.2\",\n    \"typedoc-plugin-markdown\": \"^2.2.17\",\n    \"typescript\": \"^4.5.3\"\n  },\n  \"release\": {\n    \"branch\": \"master\",\n    \"plugins\": [\n      \"@semantic-release/commit-analyzer\",\n      \"@semantic-release/release-notes-generator\",\n      \"@semantic-release/changelog\",\n      \"@semantic-release/npm\",\n      [\n        \"@semantic-release/git\",\n        {\n          \"assets\": [\n            \"package.json\",\n            \"package-lock.json\",\n            \"CHANGELOG.md\"\n          ],\n          \"message\": \"chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}\"\n        }\n      ],\n      \"@semantic-release/github\"\n    ]\n  },\n  \"nyc\": {\n    \"extension\": [\n      \".ts\"\n    ]\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run check\",\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n    }\n  }\n}\n", "import { Drop } from '../drop/drop'\nimport { __assign } from 'tslib'\nimport { NormalizedFullOptions, defaultOptions, RenderOptions } from '../liquid-options'\nimport { Scope } from './scope'\nimport { isArray, isNil, isString, isFunction, toLiquid } from '../util/underscore'\nimport { InternalUndefinedVariableError } from '../util/error'\n\nexport class Context {\n  /**\n   * insert a Context-level empty scope,\n   * for tags like {% capture %} {% assign %} to operate\n   */\n  private scopes: Scope[] = [{}]\n  private registers = {}\n  /**\n   * user passed in scope\n   * {% increment %}, {% decrement %} changes this scope,\n   * whereas {% capture %}, {% assign %} only hide this scope\n   */\n  public environments: Scope\n  /**\n   * global scope used as fallback for missing variables\n   */\n  public globals: Scope\n  public sync: boolean\n  /**\n   * The normalized liquid options object\n   */\n  public opts: NormalizedFullOptions\n  /**\n   * Throw when accessing undefined variable?\n   */\n  public strictVariables: boolean;\n  public constructor (env: object = {}, opts: NormalizedFullOptions = defaultOptions, renderOptions: RenderOptions = {}) {\n    this.sync = !!renderOptions.sync\n    this.opts = opts\n    this.globals = renderOptions.globals ?? opts.globals\n    this.environments = env\n    this.strictVariables = renderOptions.strictVariables ?? this.opts.strictVariables\n  }\n  public getRegister (key: string) {\n    return (this.registers[key] = this.registers[key] || {})\n  }\n  public setRegister (key: string, value: any) {\n    return (this.registers[key] = value)\n  }\n  public saveRegister (...keys: string[]): [string, any][] {\n    return keys.map(key => [key, this.getRegister(key)])\n  }\n  public restoreRegister (keyValues: [string, any][]) {\n    return keyValues.forEach(([key, value]) => this.setRegister(key, value))\n  }\n  public getAll () {\n    return [this.globals, this.environments, ...this.scopes]\n      .reduce((ctx, val) => __assign(ctx, val), {})\n  }\n  public get (paths: string[]) {\n    const scope = this.findScope(paths[0])\n    return this.getFromScope(scope, paths)\n  }\n  public getFromScope (scope: object, paths: string[] | string) {\n    if (typeof paths === 'string') paths = paths.split('.')\n    return paths.reduce((scope, path) => {\n      scope = readProperty(scope, path)\n      if (isNil(scope) && this.strictVariables) {\n        throw new InternalUndefinedVariableError(path)\n      }\n      return scope\n    }, scope)\n  }\n  public push (ctx: object) {\n    return this.scopes.push(ctx)\n  }\n  public pop () {\n    return this.scopes.pop()\n  }\n  public bottom () {\n    return this.scopes[0]\n  }\n  private findScope (key: string) {\n    for (let i = this.scopes.length - 1; i >= 0; i--) {\n      const candidate = this.scopes[i]\n      if (key in candidate) return candidate\n    }\n    if (key in this.environments) return this.environments\n    return this.globals\n  }\n}\n\nexport function readProperty (obj: Scope, key: string) {\n  if (isNil(obj)) return obj\n  obj = toLiquid(obj)\n  if (isFunction(obj[key])) return obj[key]()\n  if (obj instanceof Drop) {\n    if (obj.hasOwnProperty(key)) return obj[key]\n    return obj.liquidMethodMissing(key)\n  }\n  if (key === 'size') return readSize(obj)\n  if (key === 'first') return readFirst(obj)\n  if (key === 'last') return readLast(obj)\n  return obj[key]\n}\n\nfunction readFirst (obj: Scope) {\n  if (isArray(obj)) return obj[0]\n  return obj['first']\n}\n\nfunction readLast (obj: Scope) {\n  if (isArray(obj)) return obj[obj.length - 1]\n  return obj['last']\n}\n\nfunction readSize (obj: Scope) {\n  if (obj.hasOwnProperty('size') || obj['size'] !== undefined) return obj['size']\n  if (isArray(obj) || isString(obj)) return obj.length\n  if (typeof obj === 'object') return Object.keys(obj).length\n}\n", "import * as _ from './util/underscore'\nimport { Template } from './template/template'\nimport { Cache } from './cache/cache'\nimport { LRU } from './cache/lru'\nimport { FS } from './fs/fs'\nimport * as fs from './fs/node'\nimport { defaultOperators, Operators } from './render/operator'\nimport { createTrie, Trie } from './util/operator-trie'\nimport { Thenable } from './util/async'\n\nexport interface LiquidOptions {\n  /** A directory or an array of directories from where to resolve layout and include templates, and the filename passed to `.renderFile()`. If it's an array, the files are looked up in the order they occur in the array. Defaults to `[\".\"]` */\n  root?: string | string[];\n  /** A directory or an array of directories from where to resolve included templates. If it's an array, the files are looked up in the order they occur in the array. Defaults to `root` */\n  partials?: string | string[];\n  /** A directory or an array of directories from where to resolve layout templates. If it's an array, the files are looked up in the order they occur in the array. Defaults to `root` */\n  layouts?: string | string[];\n  /** Allow refer to layouts/partials by relative pathname. To avoid arbitrary filesystem read, paths been referenced also need to be within corresponding root, partials, layouts. Defaults to `true`. */\n  relativeReference?: boolean;\n  /** Use jekyll style include, pass parameters to `include` variable of current scope. Defaults to `false`. */\n  jekyllInclude?: boolean;\n  /** Add a extname (if filepath doesn't include one) before template file lookup. Eg: setting to `\".html\"` will allow including file by basename. Defaults to `\"\"`. */\n  extname?: string;\n  /** Whether or not to cache resolved templates. Defaults to `false`. */\n  cache?: boolean | number | Cache<Thenable<Template[]>>;\n  /** Use Javascript Truthiness. Defaults to `false`. */\n  jsTruthy?: boolean;\n  /** If set, treat the `filepath` parameter in `{%include filepath %}` and `{%layout filepath%}` as a variable, otherwise as a literal value. Defaults to `true`. */\n  dynamicPartials?: boolean;\n  /** Whether or not to assert filter existence. If set to `false`, undefined filters will be skipped. Otherwise, undefined filters will cause an exception. Defaults to `false`. */\n  strictFilters?: boolean;\n  /** Whether or not to assert variable existence.  If set to `false`, undefined variables will be rendered as empty string.  Otherwise, undefined variables will cause an exception. Defaults to `false`. */\n  strictVariables?: boolean;\n  /** Modifies the behavior of `strictVariables`. If set, a single undefined variable will *not* cause an exception in the context of the `if`/`elsif`/`unless` tag and the `default` filter. Instead, it will evaluate to `false` and `null`, respectively. Irrelevant if `strictVariables` is not set. Defaults to `false`. **/\n  lenientIf?: boolean;\n  /** JavaScript timezoneOffset for `date` filter, default to local time. That means if you're in Australia (UTC+10), it'll default to -600 */\n  timezoneOffset?: number;\n  /** Strip blank characters (including ` `, `\\t`, and `\\r`) from the right of tags (`{% %}`) until `\\n` (inclusive). Defaults to `false`. */\n  trimTagRight?: boolean;\n  /** Similar to `trimTagRight`, whereas the `\\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */\n  trimTagLeft?: boolean;\n  /** Strip blank characters (including ` `, `\\t`, and `\\r`) from the right of values (`{{ }}`) until `\\n` (inclusive). Defaults to `false`. */\n  trimOutputRight?: boolean;\n  /** Similar to `trimOutputRight`, whereas the `\\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */\n  trimOutputLeft?: boolean;\n  /** The left delimiter for liquid tags. **/\n  tagDelimiterLeft?: string;\n  /** The right delimiter for liquid tags. **/\n  tagDelimiterRight?: string;\n  /** The left delimiter for liquid outputs. **/\n  outputDelimiterLeft?: string;\n  /** The right delimiter for liquid outputs. **/\n  outputDelimiterRight?: string;\n  /** Whether input strings to date filter preserve the given timezone **/\n  preserveTimezones?: boolean;\n  /** Whether `trim*Left`/`trim*Right` is greedy. When set to `true`, all consecutive blank characters including `\\n` will be trimed regardless of line breaks. Defaults to `true`. */\n  greedy?: boolean;\n  /** `fs` is used to override the default file-system module with a custom implementation. */\n  fs?: FS;\n  /** the global scope passed down to all partial and layout templates, i.e. templates included by `include`, `layout` and `render` tags. */\n  globals?: object;\n  /** Whether or not to keep value type when writing the Output, not working for streamed rendering. Defaults to `false`. */\n  keepOutputType?: boolean;\n  /** An object of operators for conditional statements. Defaults to the regular Liquid operators. */\n  operators?: Operators;\n  /** Respect parameter order when using filters like \"for ... reversed limit\", Defaults to `false`. */\n  orderedFilterParameters?: boolean;\n}\n\nexport interface RenderOptions {\n  /**\n   * This call is sync or async? It's used by Liquid internal methods, you'll not need this.\n   */\n  sync?: boolean;\n  /**\n   * Same as `globals` on LiquidOptions, but only for current render() call\n   */\n  globals?: object;\n  /**\n   * Same as `strictVariables` on LiquidOptions, but only for current render() call\n   */\n  strictVariables?: boolean;\n}\n\ninterface NormalizedOptions extends LiquidOptions {\n  root?: string[];\n  partials?: string[];\n  layouts?: string[];\n  cache?: Cache<Thenable<Template[]>>;\n  operatorsTrie?: Trie;\n}\n\nexport interface NormalizedFullOptions extends NormalizedOptions {\n  root: string[];\n  partials: string[];\n  layouts: string[];\n  relativeReference: boolean;\n  jekyllInclude: boolean;\n  extname: string;\n  cache: undefined | Cache<Thenable<Template[]>>;\n  jsTruthy: boolean;\n  dynamicPartials: boolean;\n  fs: FS;\n  strictFilters: boolean;\n  strictVariables: boolean;\n  lenientIf: boolean;\n  trimTagRight: boolean;\n  trimTagLeft: boolean;\n  trimOutputRight: boolean;\n  trimOutputLeft: boolean;\n  tagDelimiterLeft: string;\n  tagDelimiterRight: string;\n  outputDelimiterLeft: string;\n  outputDelimiterRight: string;\n  preserveTimezones: boolean;\n  greedy: boolean;\n  globals: object;\n  keepOutputType: boolean;\n  operators: Operators;\n  operatorsTrie: Trie;\n}\n\nexport const defaultOptions: NormalizedFullOptions = {\n  root: ['.'],\n  layouts: ['.'],\n  partials: ['.'],\n  relativeReference: true,\n  jekyllInclude: false,\n  cache: undefined,\n  extname: '',\n  fs: fs,\n  dynamicPartials: true,\n  jsTruthy: false,\n  trimTagRight: false,\n  trimTagLeft: false,\n  trimOutputRight: false,\n  trimOutputLeft: false,\n  greedy: true,\n  tagDelimiterLeft: '{%',\n  tagDelimiterRight: '%}',\n  outputDelimiterLeft: '{{',\n  outputDelimiterRight: '}}',\n  preserveTimezones: false,\n  strictFilters: false,\n  strictVariables: false,\n  lenientIf: false,\n  globals: {},\n  keepOutputType: false,\n  operators: defaultOperators,\n  operatorsTrie: createTrie(defaultOperators)\n}\n\nexport function normalize (options: LiquidOptions): NormalizedFullOptions {\n  if (options.hasOwnProperty('operators')) {\n    (options as NormalizedOptions).operatorsTrie = createTrie(options.operators!)\n  }\n  if (options.hasOwnProperty('root')) {\n    if (!options.hasOwnProperty('partials')) options.partials = options.root\n    if (!options.hasOwnProperty('layouts')) options.layouts = options.root\n  }\n  if (options.hasOwnProperty('cache')) {\n    let cache: Cache<Thenable<Template[]>> | undefined\n    if (typeof options.cache === 'number') cache = options.cache > 0 ? new LRU(options.cache) : undefined\n    else if (typeof options.cache === 'object') cache = options.cache\n    else cache = options.cache ? new LRU(1024) : undefined\n    options.cache = cache\n  }\n  options = { ...defaultOptions, ...(options.jekyllInclude ? { dynamicPartials: false } : {}), ...options }\n  if (!options.fs!.dirname && options.relativeReference) {\n    console.warn('[LiquidJS] `fs.dirname` is required for relativeReference, set relativeReference to `false` to suppress this warning, or provide implementation for `fs.dirname`')\n    options.relativeReference = false\n  }\n  options.root = normalizeDirectoryList(options.root)\n  options.partials = normalizeDirectoryList(options.partials)\n  options.layouts = normalizeDirectoryList(options.layouts)\n  return options as NormalizedFullOptions\n}\n\nexport function normalizeDirectoryList (value: any): string[] {\n  let list: string[] = []\n  if (_.isArray(value)) list = value\n  if (_.isString(value)) list = [value]\n  return list\n}\n", "import { Liquid } from '../..'\nimport { expect, use } from 'chai'\nimport * as chaiAsPromised from 'chai-as-promised'\nimport * as sinon from 'sinon'\nimport * as sinonChai from 'sinon-chai'\nconst LiquidUMD = require('../../dist/liquid.browser.umd.js').Liquid\n\nuse(chaiAsPromised)\nuse(sinonChai)\n\ndescribe('Issues', function () {\n  it('#221 unicode blanks are not properly treated', async () => {\n    const engine = new Liquid({ strictVariables: true, strictFilters: true })\n    const html = engine.parseAndRenderSync('{{huh |\u00a0truncate: 11}}', { huh: 'fdsafdsafdsafdsaaaaa' })\n    expect(html).to.equal('fdsafdsa...')\n  })\n  it('#252 \"Not valid identifier\" error for a quotes-containing identifier', async () => {\n    const template = `{% capture \"form_classes\" -%}\n      foo\n    {%- endcapture %}{{form_classes}}`\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(template)\n    expect(html).to.equal('foo')\n  })\n  it('#259 complex property access with braces is not supported', async () => {\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync('{{ [\"complex key\"] }}', { 'complex key': 'foo' })\n    expect(html).to.equal('foo')\n  })\n  it('#243 Potential for ReDoS through string replace function', async () => {\n    const engine = new Liquid()\n    const INPUT = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!'\n    const BROKEN_REGEX = /([a-z]+)+$/\n\n    // string filters vulnerable to regexp parameter: split, replace, replace_first, remove_first\n    const parameters = { input: INPUT, regex: BROKEN_REGEX }\n    const template = `{{ input | replace:regex,'' }}`\n    const html = engine.parseAndRenderSync(template, parameters)\n\n    // should stringify the regexp rather than execute it\n    expect(html).to.equal(INPUT)\n  })\n  it('#263 raw/endraw block not ignoring {% characters', () => {\n    const template = `{% raw %}This is a code snippet showing how {% breaks the raw block.{% endraw %}`\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync(template)\n    expect(html).to.equal('This is a code snippet showing how {% breaks the raw block.')\n  })\n  it('#268 elsif is not supported for unless', () => {\n    const template = `{%- unless condition1 -%}\n    <div>X</div>\n    {%- elsif condition2 -%}\n        <div>Y</div>\n    {%- else %}\n        <div>Z</div>\n    {% endunless %}`\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync(template, { condition1: true, condition2: true })\n    expect(html).to.equal('<div>Y</div>')\n  })\n  it('#277 Passing liquid in FilterImpl', () => {\n    const engine = new Liquid()\n    engine.registerFilter('render', function (this: any, template: string, name: string) {\n      return this.liquid.parseAndRenderSync(decodeURIComponent(template), { name })\n    })\n    const html = engine.parseAndRenderSync(\n      `{{ subtemplate | render: \"foo\" }}`,\n      { subtemplate: encodeURIComponent('hello {{ name }}') }\n    )\n    expect(html).to.equal('hello foo')\n  })\n  it('#288 Unexpected behavior when string literals contain }}', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(`{{ '{{' }}{{ '}}' }}`)\n    expect(html).to.equal('{{}}')\n  })\n  it('#222 Support function calls', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(\n      `{{ obj.property }}`,\n      { obj: { property: () => 'BAR' } }\n    )\n    expect(html).to.equal('BAR')\n  })\n  it('#313 lenientIf not working as expected in umd', async () => {\n    const engine = new LiquidUMD({\n      strictVariables: true,\n      lenientIf: true\n    })\n    const html = await engine.parseAndRender(`{{ name | default: \"default name\" }}`)\n    expect(html).to.equal('default name')\n  })\n  it('#321 comparison for empty/nil', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(\n      '{% if empty == nil %}true{%else%}false{%endif%}' +\n      '{% if nil == empty %}true{%else%}false{%endif%}'\n    )\n    expect(html).to.equal('falsefalse')\n  })\n  it('#320 newline_to_br filter should output <br /> instead of <br/>', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(\n      `{{ 'a \\n b \\n c' | newline_to_br | split: '<br />' }}`\n    )\n    expect(html).to.equal('a ,\\n b ,\\n c')\n  })\n  it('#342 New lines in logical operator', async () => {\n    const engine = new Liquid()\n    const tpl = `{%\\r\\nif\\r\\ntrue\\r\\nor\\r\\nfalse\\r\\n%}\\r\\ntrue\\r\\n{%\\r\\nendif\\r\\n%}`\n    const html = await engine.parseAndRender(tpl)\n    expect(html).to.equal('\\r\\ntrue\\r\\n')\n  })\n  it('#401 Timezone Offset Issue', async () => {\n    const engine = new Liquid({ timezoneOffset: -600 })\n    const tpl = engine.parse('{{ date | date: \"%Y-%m-%d %H:%M %p %z\" }}')\n    const html = await engine.render(tpl, { date: '2021-10-06T15:31:00+08:00' })\n    expect(html).to.equal('2021-10-06 17:31 PM +1000')\n  })\n  it('#412 Pass root as it is to `resolve`', async () => {\n    const engine = new Liquid({\n      root: '/tmp',\n      fs: {\n        readFileSync: (file: string) => file,\n        async readFile (file: string) { return 'foo' },\n        existsSync (file: string) { return true },\n        async exists (file: string) { return true },\n        resolve: (dir: string, file: string) => dir + '/' + file\n      }\n    })\n    const tpl = engine.parse('{% include \"foo.liquid\" %}')\n    const html = await engine.renderSync(tpl)\n    expect(html).to.equal('/tmp/foo.liquid')\n  })\n  it('#416 Templates imported by {% render %} not cached for concurrent async render', async () => {\n    const readFile = sinon.spy(() => Promise.resolve('HELLO'))\n    const exists = sinon.spy(() => 'HELLO')\n    const engine = new Liquid({\n      cache: true,\n      extname: '.liquid',\n      root: '~',\n      fs: {\n        exists,\n        resolve: (root: string, file: string, ext: string) => root + '#' + file + ext,\n        sep: '#',\n        readFile\n      } as any\n    })\n\n    await Promise.all(Array(5).fill(0).map(\n      x => engine.parseAndRender(\"{% render 'template' %}\")\n    ))\n    expect(exists).to.be.calledOnce\n    expect(readFile).to.be.calledOnce\n  })\n  it('#431 Error when using Date timezoneOffset in 9.28.5', async () => {\n    const engine = new Liquid({\n      timezoneOffset: 0,\n      preserveTimezones: true\n    })\n    const tpl = engine.parse('Welcome to {{ now | date: \"%Y-%m-%d\" }}!')\n    expect(engine.render(tpl, { now: new Date('2019/02/01') })).to.eventually.equal('Welcome to 2019-02-01')\n  })\n  it('#433 Support Jekyll-like includes', async () => {\n    const engine = new Liquid({\n      dynamicPartials: false,\n      root: '/tmp',\n      fs: {\n        readFileSync: (file: string) => file,\n        async readFile (file: string) { return `CONTENT for ${file}` },\n        existsSync (file: string) { return true },\n        async exists (file: string) { return true },\n        resolve: (dir: string, file: string) => dir + '/' + file\n      }\n    })\n    const tpl = engine.parse('{% include prefix/{{ my_variable | append: \"-bar\" }}/suffix %}')\n    const html = await engine.render(tpl, { my_variable: 'foo' })\n    expect(html).to.equal('CONTENT for /tmp/prefix/foo-bar/suffix')\n  })\n  it('#428 Implement liquid/echo tags', () => {\n    const template = `{%- liquid\n      for value in array\n        assign double_value = value | times: 2\n        echo double_value | times: 2\n        unless forloop.last\n          echo '#'\n        endunless\n      endfor\n    \n      echo '#'\n      echo double_value\n    -%}`\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync(template, { array: [1, 2, 3] })\n    expect(html).to.equal('4#8#12#6')\n  })\n})\n", "import * as chai from 'chai'\nimport { Context } from '../../../src/context/context'\nimport { Scope } from '../../../src/context/scope'\n\nconst expect = chai.expect\n\ndescribe('Context', function () {\n  let ctx: any, scope: Scope\n  beforeEach(function () {\n    scope = {\n      foo: 'zoo',\n      one: 1,\n      zoo: { size: 4 },\n      map: new Map([['foo', 'FOO']]),\n      obj: {\n        first: 'f',\n        last: 'l'\n      },\n      func: () => 'FUNC',\n      objFunc: () => ({ prop: 'PROP' }),\n      bar: {\n        zoo: 'coo',\n        'Mr.Smith': 'John',\n        arr: ['a', 'b']\n      }\n    }\n    ctx = new Context(scope)\n  })\n\n  describe('#get()', function () {\n    it('should get direct property', async function () {\n      expect(ctx.get(['foo'])).equal('zoo')\n    })\n    it('should read nested property', async function () {\n      expect(ctx.get(['obj', 'first'])).to.equal('f')\n      expect(ctx.get(['obj', 'last'])).to.equal('l')\n      expect(ctx.get(['obj', 'size'])).to.equal(2)\n    })\n    it('undefined property should yield undefined', async function () {\n      expect(ctx.get(['notdefined'])).to.equal(undefined)\n      expect(ctx.get([false as any])).to.equal(undefined)\n    })\n    it('should respect to toLiquid', async function () {\n      const scope = new Context({ foo: {\n        toLiquid: () => ({ bar: 'BAR' }),\n        bar: 'bar'\n      } })\n      expect(scope.get(['foo', 'bar'])).to.equal('BAR')\n    })\n    it('should return undefined when not exist', async function () {\n      expect(ctx.get(['foo', 'foo', 'foo'])).to.be.undefined\n    })\n    it('should return string length as size', async function () {\n      expect(ctx.get(['foo', 'size'])).to.equal(3)\n    })\n    it('should return array length as size', async function () {\n      expect(ctx.get(['bar', 'arr', 'size'])).to.equal(2)\n    })\n    it('should return map size as size', async function () {\n      expect(ctx.get(['map', 'size'])).to.equal(1)\n    })\n    it('should return undefined if not have a size', async function () {\n      expect(ctx.get(['one', 'size'])).to.equal(undefined)\n      expect(ctx.get(['non-exist', 'size'])).to.equal(undefined)\n    })\n    it('should read .first of array', async function () {\n      expect(ctx.get(['bar', 'arr', 'first'])).to.equal('a')\n    })\n    it('should read .last of array', async function () {\n      expect(ctx.get(['bar', 'arr', 'last'])).to.equal('b')\n    })\n    it('should call function', async function () {\n      expect(ctx.get(['func'])).to.equal('FUNC')\n    })\n    it('should call function before read nested property', async function () {\n      expect(ctx.get(['objFunc', 'prop'])).to.equal('PROP')\n    })\n  })\n\n  describe('#getFromScope()', function () {\n    it('should support string', () => {\n      expect(ctx.getFromScope({ obj: { foo: 'FOO' } }, 'obj.foo')).to.equal('FOO')\n    })\n  })\n\n  describe('strictVariables', async function () {\n    let ctx: Context\n    beforeEach(function () {\n      ctx = new Context(ctx, {\n        strictVariables: true\n      } as any)\n    })\n    it('should throw when variable not defined', function () {\n      return expect(() => ctx.get(['notdefined'])).to.throw(/undefined variable: notdefined/)\n    })\n    it('should throw when deep variable not exist', async function () {\n      ctx.push({ foo: 'FOO' })\n      return expect(() => ctx.get(['foo', 'bar', 'not', 'defined'])).to.throw(/undefined variable: bar/)\n    })\n    it('should throw when itself not defined', async function () {\n      ctx.push({ foo: 'FOO' })\n      return expect(() => ctx.get(['foo', 'BAR'])).to.throw(/undefined variable: BAR/)\n    })\n    it('should find variable in parent scope', async function () {\n      ctx.push({ 'foo': 'foo' })\n      ctx.push({\n        'bar': 'bar'\n      })\n      expect(ctx.get(['foo'])).to.equal('foo')\n    })\n  })\n\n  describe('.getAll()', function () {\n    it('should get all properties when arguments empty', async function () {\n      expect(ctx.getAll()).deep.equal(scope)\n    })\n  })\n\n  describe('.push()', function () {\n    it('should push scope', async function () {\n      ctx.push({ 'bar': 'bar' })\n      ctx.push({\n        foo: 'foo'\n      })\n      expect(ctx.get(['foo'])).to.equal('foo')\n      expect(ctx.get(['bar'])).to.equal('bar')\n    })\n    it('should hide deep properties by push', async function () {\n      ctx.push({ bar: { bar: 'bar' } })\n      ctx.push({ bar: { foo: 'foo' } })\n      expect(ctx.get(['bar', 'foo'])).to.equal('foo')\n      expect(ctx.get(['bar', 'bar'])).to.equal(undefined)\n    })\n  })\n  describe('.pop()', function () {\n    it('should pop scope', async function () {\n      ctx.push({\n        foo: 'foo'\n      })\n      ctx.pop()\n      expect(ctx.get(['foo'])).to.equal('zoo')\n    })\n  })\n})\n"], "fixing_code": ["---\ntitle: Options\n---\n\nThe [Liquid][liquid] constructor accepts a plain object as options to define the behavior of LiquidJS. All of these options are optional thus we can specify any of them, for example the `cache` option:\n\n```javascript\nconst { Liquid } = require('liquidjs')\nconst engine = new Liquid({\n    cache: true\n})\n```\n\n{% note info API Document %}\nFollowing is an overview for all the options, for exact types and signatures please refer to <a href=\"https://liquidjs.com/api/interfaces/liquid_options_.liquidoptions.html\" target=\"_self\">LiquidOptions | API</a>.\n{% endnote %}\n\n## cache\n\n**cache** is used to improve performance by caching previously parsed template structures, specially in cases when we're repeatedly parse or render files.\n\nIt's default to `false`. When setting to `true` a default LRU cache of size 1024 will be enabled. And certainly it can be a number which indicates the size of cache you want.\n\nAdditionally, it can also be a custom cache implementation. See [Caching][caching] for details.\n\n## Partials/Layouts\n\n**root** is used to specify template directories for LiquidJS to lookup and read template files. Can be a single string and an array of strings. See [Render Files][render-file] for details.\n\n**layouts** is used to specify template directories for LiquidJS to lookup files for `{% layout %}`. Same format as `root` and will default to `root` if not specified.\n\n**partials** is used to specify template directories for LiquidJS to lookup files for `{% render %}` and `{% include %}`. Same format as `root` and will default to `root` if not specified.\n\n**relativeReference** is set to `true` by default to allow relative filenames. Note that relatively referenced files are also need to be within corresponding root. For example you can reference another file like `{% render ../foo/bar %}` as long as `../foo/bar` is also within `partials` directory.\n\n## dynamicPartials\n\n> Note: for historical reasons, it's named dynamicPartials but it also works for layouts.\n\n**dynamicPartials** indicates whether or not to treat filename arguments in [include][include], [render][render], [layout][layout] tags as a variable. Defaults to `true`. For example, render the following snippet with scope `{ file: 'foo.html' }` will include the `foo.html`:\n\n```liquid\n{% include file %}\n```\n\nSetting `dynamicPartials: false`, LiquidJS will try to include the file named `file`, which is weird but allows simpler syntax if your template relations are static:\n\n```liquid\n{% liquid foo.html %}\n```\n\n{% note warn Common Pitfall %}\nLiquidJS defaults this option to <code>true</code> to be compatible with shopify/liquid, but if you're from <a href=\"https://github.com/11ty/eleventy\" target=\"_blank\">eleventy</a> it's set to <code>false</code> by default (see <a href=\"https://www.11ty.dev/docs/languages/liquid/#quoted-include-paths\" target=\"_blank\">Quoted Include Paths</a>) which I believe is trying to be compatible with Jekyll.{% endnote %}\n\n## Jekyll include\n\n{% since %}v9.33.0{% endsince %}\n\n[jekyllInclude][jekyllInclude] is used to enable Jekyll-like include syntax. Defaults to `false`, when set to `true`:\n\n- Filename will be static: `dynamicPartials` now defaults to `false` (instead of `true`). And you can set `dynamicPartials` back to `true`.\n- Use `=` instead of `:` to separate parameter key-values.\n- Parameters are under `include` variable instead of current scope.\n\nFor example in the following template, `name.html` is not quoted, `header` and `\"HEADER\"` are separated by `=`, and the `header` parameter is referenced by `include.header`. More details please check out [include][include].\n\n```liquid\n// entry template\n{% include article.html header=\"HEADER\" content=\"CONTENT\" %}\n\n// article.html\n<article>\n  <header>{{include.header}}</header>\n  {{include.content}}\n</article>\n```\n\n## extname\n\n**extname** defines the default extension name to be appended into filenames if the filename has no extension name. Defaults to `''` which means it's disabled by default. By setting it to `.liquid`:\n\n```liquid\n{% render \"foo\" %}  there's no extname, adds `.liquid` and loads foo.liquid\n{% render \"foo.html\" %}  there is an extname already, loads foo.html directly\n```\n\n{% note info Legacy Versions %}\nBefore 2.0.1, <code>extname</code> is set to `.liquid` by default. To change that you need to set <code>extname: ''</code> explicitly. See <a href=\"https://github.com/harttle/liquidjs/issues/41\" target=\"_blank\">#41</a> for details.\n{% endnote %}\n\n## fs\n\n**fs** is used to define a custom file system implementation which will be used by LiquidJS to lookup and read template files. See [Abstract File System][abstract-fs] for details.\n\n## globals\n\n**globals** is used to define global variables available to all templates even in cases of [render tag][render]. See [3185][185] for details.\n\n## jsTruthy\n\n**jsTruthy** is used to use standard Javascript truthiness rather than the Shopify.\n\nit defaults to false.  For example, when set to true, a blank string would evaluate to false with jsTruthy. With Shopify's truthiness, a blank string is true.\n\n## Date\n\n**timezoneOffset** is used to specify a different timezone to output dates, your local timezone will be used if not specified. For example, set `timezoneOffset: 0` to output all dates in UTC/GMT 00:00.\n\n**preserveTimezones** is a boolean effects only literal timestamps. When set to `true`, all literal timestamps will remain the same when output. This is a parser option, so Date objects passed to LiquidJS as data will not be affected. Note that `preserveTimezones` has a higher priority than `timezoneOffset`.\n\n## Trimming\n\n**greedy**, **trimOutputLeft**, **trimOutputRight**, **trimTagLeft**, **trimTagRight** options are used to eliminate extra newlines and indents in templates around Liquid Constructs. See [Whitespace Control][wc] for details.\n\n## Delimiter\n\n**outputDelimiterLeft**, **outputDelimiterRight**, **tagDelimiterLeft**, **tagDelimiterRight** are used to customize the delimiters for LiquidJS [Tags and Filters][intro]. For example with `outputDelimiterLeft: <%=, outputDelimiterRight: %>` we are able to avoid conflicts with other languages:\n\n```ejs\n<%= username | append: \", welcome to LiquidJS!\" %>\n```\n\n## Strict\n\n**strictFilters** is used to assert filter existence. If set to `false`, undefined filters will be skipped. Otherwise, undefined filters will cause a parse exception. Defaults to `false`.\n\n**strictVariables** is used to assert variable existence.  If set to `false`, undefined variables will be rendered as empty string.  Otherwise, undefined variables will cause a render exception. Defaults to `false`.\n\n**lenientIf** modifies the behavior of `strictVariables` to allow handling optional variables. If set to `true`, an undefined variable will *not* cause an exception in the following two situations: a) it is the condition to an `if`, `elsif`, or `unless` tag; b) it occurs right before a `default` filter. Irrelevant if `strictVariables` is not set. Defaults to `false`.\n\n**ownPropertyOnly** hides scope variables from prototypes, useful when you're passing a not sanitized object into LiquidJS or need to hide prototypes from templates. Defaults to `false`.\n\n{% note info Non-existent Tags %}\nNon-existent tags always throw errors during parsing and this behavior can not be customized.\n{% endnote %}\n\n## Parameter Order\n\nParameter orders are ignored by default, for ea `{% for i in (1..8) reversed limit:3 %}` will always perform `limit` before `reversed`, even if `reversed` occurs before `limit`. To make parameter order respected, set **orderedFilterParameters** to `true`. Its default value is `false`.\n\n[liquid]: ../api/classes/liquid_.liquid.html\n[caching]: ./caching.html\n[abstract-fs]: ./render-file.html#Abstract-File-System\n[render-file]: ./render-file.html\n[185]: https://github.com/harttle/liquidjs/issues/185\n[render]: ../tags/render.html\n[include]: ../tags/include.html\n[layout]: ../tags/layout.html\n[wc]: ./whitespace-control.html\n[intro]: ./intro-to-liquid.html\n[jekyllInclude]: ../api/interfaces/liquid_options_.liquidoptions.html#Optional-jekyllInclude\n", "---\ntitle: \u9009\u9879\n---\n\n[Liquid][liquid] \u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u5bf9\u8c61\uff0c\u7528\u6765\u5b9a\u4e49\u5404\u79cd\u6a21\u677f\u5f15\u64ce\u884c\u4e3a\u3002\u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\uff0c\u6bd4\u5982\u6211\u53ef\u4ee5\u6307\u5b9a\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570 `cache`\uff1a\n\n```javascript\nconst { Liquid } = require('liquidjs')\nconst engine = new Liquid({\n    cache: true\n})\n```\n\n{% note info API \u6587\u6863 %}\n\u4e0b\u9762\u7684\u6240\u6709\u9009\u9879\u7684\u6982\u8ff0\uff0c\u5e0c\u671b\u4e86\u89e3\u5177\u4f53\u7684\u7c7b\u578b\u548c\u7b7e\u540d\uff0c\u8bf7\u524d\u5f80 <a href=\"https://liquidjs.com/api/interfaces/liquid_options_.liquidoptions.html\" target=\"_self\">LiquidOptions | API</a>.\n{% endnote %}\n\n## \u7f13\u5b58\n\n**cache** \u7528\u6765\u6307\u5b9a\u662f\u5426\u7f13\u5b58\u66fe\u7ecf\u8bfb\u53d6\u548c\u5904\u7406\u8fc7\u7684\u6a21\u677f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5728\u751f\u4ea7\u73af\u5883\u6a21\u677f\u4f1a\u91cd\u590d\u6e32\u67d3\u7684\u60c5\u51b5\u4f1a\u5f88\u6709\u7528\u3002\n\n\u9ed8\u8ba4\u662f `false`\uff0c\u5f53\u8bbe\u7f6e\u4e3a `true` \u65f6\u4f1a\u542f\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a 1024 \u7684 LRU \u7f13\u5b58\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f20\u4e00\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\u7f13\u5b58\u5927\u5c0f\u3002\u6b64\u5916\u8fd8\u53ef\u4ee5\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7f13\u5b58\u5b9e\u73b0\uff0cLiquidJS \u4f1a\u901a\u8fc7\u5b83\u6765\u67e5\u627e\u548c\u8bfb\u5199\u6587\u4ef6\u3002\u8be6\u60c5\u8bf7\u53c2\u8003 [Caching][caching]\u3002\n\n## \u5e03\u5c40\u548c\u7247\u6bb5\n\n**root** \u7528\u6765\u6307\u5b9a LiquidJS \u67e5\u627e\u548c\u8bfb\u53d6\u6a21\u677f\u7684\u6839\u76ee\u5f55\u3002\u53ef\u4ee5\u662f\u5355\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6570\u7ec4 LiquidJS \u4f1a\u987a\u5e8f\u67e5\u627e\u3002\u8be6\u60c5\u8bf7\u53c2\u8003 [Render Files][render-file]\u3002\n\n**layouts** \u548c `root` \u5177\u6709\u4e00\u6837\u7684\u683c\u5f0f\uff0c\u7528\u6765\u6307\u5b9a `{% layout %}` \u6240\u4f7f\u7528\u7684\u76ee\u5f55\u3002\u6ca1\u6709\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a `root`\u3002\n\n**partials** \u548c `root` \u5177\u6709\u4e00\u6837\u7684\u683c\u5f0f\uff0c\u7528\u6765\u6307\u5b9a `{% render %}` \u548c `{% include %}` \u6240\u4f7f\u7528\u7684\u76ee\u5f55\u3002\u6ca1\u6709\u6307\u5b9a\u65f6\u9ed8\u8ba4\u4e3a `root`\u3002\n\n**relativeReference** \u9ed8\u8ba4\u4e3a `true` \u7528\u6765\u5141\u8bb8\u4ee5\u76f8\u5bf9\u8def\u5f84\u5f15\u7528\u5176\u4ed6\u6587\u4ef6\u3002\u6ce8\u610f\u88ab\u5f15\u7528\u7684\u6587\u4ef6\u4ecd\u7136\u9700\u8981\u5728\u5bf9\u5e94\u7684 root \u76ee\u5f55\u4e0b\u3002\u4f8b\u5982\u53ef\u4ee5\u8fd9\u6837\u5f15\u7528\u4e00\u4e2a\u6587\u4ef6 `{% render ../foo/bar %}`\uff0c\u4f46\u9700\u8981\u786e\u4fdd `../foo/bar` \u5904\u4e8e `partials` \u76ee\u5f55\u4e0b\u3002\n\n## \u52a8\u6001\u5f15\u7528\n\n> \u6ce8\u610f\u7531\u4e8e\u5386\u53f2\u539f\u56e0\u8fd9\u4e2a\u9009\u9879\u53eb\u505a dynamicPartials\uff0c\u4f46\u5b83\u5bf9 layout \u4e5f\u8d77\u4f5c\u7528\u3002\n\n**dynamicPartials** \u8868\u793a\u662f\u5426\u628a\u4f20\u7ed9 [include][include], [render][render], [layout][layout] \u6807\u7b7e\u7684\u6587\u4ef6\u540d\u5f53\u505a\u53d8\u91cf\u5904\u7406\u3002\u9ed8\u8ba4\u4e3a `true`\u3002\u4f8b\u5982\u7528\u4e0a\u4e0b\u6587 `{ file: 'foo.html' }` \u6e32\u67d3\u4e0b\u9762\u7684\u6a21\u677f\u5c06\u4f1a\u5f15\u5165\u6587\u4ef6 `foo.html`\uff1a\n\n```liquid\n{% include file %}\n```\n\n\u8bbe\u7f6e `dynamicPartials: false` \u540e LiquidJS \u5c06\u4f1a\u5c1d\u8bd5\u53bb\u8bfb\u53d6 `file`\u3002\u5f53\u4f60\u7684\u6a21\u677f\u4e4b\u95f4\u90fd\u662f\u9759\u6001\u5f15\u5165\u5173\u7cfb\u65f6\u4f1a\u5f88\u6709\u7528\uff1a\n\n```liquid\n{% liquid foo.html %}\n```\n\n{% note warn \u5e38\u89c1\u9677\u9631 %}\nLiquidJS \u628a\u8fd9\u4e2a\u9009\u9879\u9ed8\u8ba4\u503c\u8bbe\u4e3a <code>true</code> \u4ee5\u517c\u5bb9\u4e8e shopify/liquid\uff0c\u4f46\u5982\u679c\u4f60\u5728\u4f7f\u7528 <a href=\"https://github.com/11ty/eleventy\" target=\"_blank\">eleventy</a> \u5b83\u4f1a\u8bbe\u7f6e\u9ed8\u8ba4\u503c <code>false</code> \uff08\u53c2\u8003 <a href=\"https://www.11ty.dev/docs/languages/liquid/#quoted-include-paths\" target=\"_blank\">Quoted Include Paths</a>\uff09\u4ee5\u517c\u5bb9\u4e8e Jekyll\u3002{% endnote %}\n\n## Jekyll include\n\n{% since %}v9.33.0{% endsince %}\n\n[jekyllInclude][jekyllInclude] \u7528\u6765\u542f\u7528 Jekyll-like include \u8bed\u6cd5\u3002\u9ed8\u8ba4\u4e3a `false`\uff0c\u5f53\u8bbe\u7f6e\u4e3a `true` \u65f6\uff1a\n\n- \u9ed8\u8ba4\u542f\u7528\u9759\u6001\u6587\u4ef6\u540d\uff1a`dynamicPartials` \u7684\u9ed8\u8ba4\u503c\u53d8\u4e3a `false`\uff08\u800c\u975e `true`\uff09\u3002\u4f46\u4f60\u4e5f\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u56de `true`\u3002\n- \u53c2\u6570\u7684\u952e\u548c\u503c\u4e4b\u95f4\u7531 `=` \u5206\u9694\uff08\u672c\u6765\u662f `:`\uff09\u3002\n- \u53c2\u6570\u653e\u5230\u4e86 `include` \u53d8\u91cf\u4e0b\uff0c\u800c\u975e\u5f53\u524d\u4f5c\u7528\u57df\u3002\n\n\u4f8b\u5982\u4e0b\u9762\u7684\u6a21\u677f\u4e2d\uff0c`name.html` \u6ca1\u6709\u5e26\u5f15\u53f7\uff0c`header` \u548c `\"HEADER\"` \u4ee5 `=` \u5206\u9694\uff0c`header` \u53c2\u6570\u901a\u8fc7 `include.header` \u6765\u5f15\u7528\u3002\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u8003 [include][include]\u3002\n\n```liquid\n// entry template\n{% include article.html header=\"HEADER\" content=\"CONTENT\" %}\n\n// article.html\n<article>\n  <header>{{include.header}}</header>\n  {{include.content}}\n</article>\n```\n\n## extname\n\n**extname** \u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u6587\u4ef6\u540e\u7f00\uff0c\u5f53\u4f20\u5165\u6587\u4ef6\u540d\u4e0d\u5305\u542b\u540e\u7f00\u65f6\u81ea\u52a8\u8ffd\u52a0\u3002\u9ed8\u8ba4\u503c\u662f `''` \u4e5f\u5c31\u662f\u8bf4\u9ed8\u8ba4\u662f\u7981\u7528\u7684\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a `.liquid`\uff1a\n\n```liquid\n{% render \"foo\" %}  \u6ca1\u6709\u540e\u7f00\uff0c\u6dfb\u52a0 \".liquid\" \u5e76\u52a0\u8f7d foo.liquid\n{% render \"foo.html\" %} \u5df2\u7ecf\u6709\u540e\u7f00\u4e86\uff0c\u76f4\u63a5\u52a0\u8f7d foo.html\n```\n\n{% note info \u65e7\u7248\u884c\u4e3a %}\n\u5728 2.0.1 \u4e4b\u524d\uff0c<code>extname</code> \u9ed8\u8ba4\u503c\u4e3a `.liquid`\u3002\u8981\u7981\u7528\u5b83\u9700\u8981\u660e\u786e\u8bbe\u7f6e\u4e3a <code>extname: ''</code>\u3002\u8be6\u60c5\u53c2\u8003 <a href=\"https://github.com/harttle/liquidjs/issues/41\" target=\"_blank\">#41</a>\u3002\n{% endnote %}\n\n## fs\n\n**fs** \u7528\u6765\u81ea\u5b9a\u4e49\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 [Abstract File System][abstract-fs]\u3002\n\n## globals\n\n**globals** \u7528\u6765\u5b9a\u4e49\u5bf9\u6240\u6709\u6a21\u677f\u53ef\u89c1\u7684\u5168\u5c40\u53d8\u91cf\u3002\u5305\u62ec [render tag][render] \u5f15\u5165\u7684\u5b50\u6a21\u677f\uff0c\u89c1 [3185][185]\u3002\n\n## jsTruthy\n\n**jsTruthy** \u7528\u6765\u4f7f\u7528 Javascript \u7684\u771f\u503c\u5224\u65ad\uff0c\u9ed8\u8ba4\u4e3a `false` \u4f7f\u7528 Shopify \u65b9\u5f0f\u3002\n\n\u4f8b\u5982\uff0c\u7a7a\u5b57\u7b26\u4e32\u5728 JavaScript \u4e2d\u4e3a\u5047\uff08`jsTruthy` \u4e3a `true` \u65f6\uff09\uff0c\u5728 Shopify \u771f\u503c\u8868\u4e2d\u4e3a\u771f\u3002\n\n## \u65f6\u95f4\u65e5\u671f\u548c\u65f6\u533a\n\n**timezoneOffset** \u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u548c\u4f60\u5f53\u5730\u65f6\u533a\u4e0d\u540c\u7684\u65f6\u533a\uff0c\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u8f93\u51fa\u65f6\u90fd\u8f6c\u6362\u5230\u8fd9\u4e2a\u6307\u5b9a\u7684\u65f6\u533a\u3002\u4f8b\u5982\u8bbe\u7f6e `timezoneOffset: 0` \u5c06\u4f1a\u628a\u6240\u6709\u65e5\u671f\u6309\u7167 UTC/GMT 00:00 \u6765\u8f93\u51fa\u3002\n\n**preserveTimezones** \u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u53ea\u5f71\u54cd\u65f6\u95f4\u6233\u5b57\u9762\u91cf\u3002\u5f53\u8bbe\u7f6e\u4e3a `true` \u65f6\uff0c\u6240\u6709\u5b57\u9762\u91cf\u7684\u65f6\u95f4\u6233\u5b57\u7b26\u4e32\u4f1a\u5728\u8f93\u51fa\u65f6\u4fdd\u6301\u539f\u72b6\uff0c\u5373\u4e0d\u8bba\u8f93\u5165\u65f6\u91c7\u53d6\u600e\u6837\u7684\u65f6\u533a\uff0c\u8f93\u51fa\u65f6\u4ecd\u7136\u91c7\u7528\u90a3\u4e00\u65f6\u533a\uff08\u548c Shopify Liquid \u7684\u884c\u4e3a\u4e00\u81f4\uff09\u3002\u6ce8\u610f\u8fd9\u662f\u4e00\u4e2a\u89e3\u6790\u5668\u53c2\u6570\uff0c\u6e32\u67d3\u65f6\u4f20\u5165\u7684\u6570\u636e\u4e2d\u7684\u65e5\u671f\u7684\u8f93\u51fa\u4e0d\u4f1a\u53d7\u6b64\u53c2\u6570\u5f71\u54cd\u3002\u6ce8\u610f `preserveTimezones` \u6bd4 `timezoneOffset` \u7684\u4f18\u5148\u7ea7\u66f4\u9ad8\u3002\n\n\n## \u6362\u884c\u548c\u7f29\u8fdb\n\n**greedy**, **trimOutputLeft**, **trimOutputRight**, **trimTagLeft**, **trimTagRight** \u9009\u9879\u7528\u6765\u79fb\u9664 Liquid \u8bed\u6cd5\u5468\u56f4\u7684\u6362\u884c\u548c\u7f29\u8fdb\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 [Whitespace Control][wc]\u3002\n\n## \u81ea\u5b9a\u4e49\u5206\u9694\u7b26\n\n**outputDelimiterLeft**, **outputDelimiterRight**, **tagDelimiterLeft**, **tagDelimiterRight** \u7528\u6765\u81ea\u5b9a\u4e49 LiquidJS \u4e2d [\u6807\u7b7e\u548c\u8fc7\u6ee4\u5668][intro] \u7684\u5206\u9694\u7b26\u3002\u4f8b\u5982\u8bbe\u7f6e\u4e86 `outputDelimiterLeft: <%=, outputDelimiterRight: %>` \u540e\u6211\u4eec\u53ef\u4ee5\u907f\u514d\u8ddf\u5176\u4ed6\u6a21\u677f\u5f15\u64ce\u51b2\u7a81\uff1a\n\n```ejs\n<%= username | append: \", welcome to LiquidJS!\" %>\n```\n\n## \u4e25\u683c\u6a21\u5f0f\n\n**strictFilters** \u7528\u6765\u542f\u7528\u8fc7\u6ee4\u5668\u7684\u4e25\u683c\u6a21\u5f0f\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a `true` \u8fc7\u6ee4\u5668\u4e0d\u5b58\u5728\u65f6\u89e3\u6790\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u9ed8\u8ba4\u4e3a `false`\uff0c\u8fd9\u65f6\u4f1a\u8df3\u8fc7\u4e0d\u5b58\u5728\u7684\u8fc7\u6ee4\u5668\u3002\n\n**strictVariables** \u7528\u6765\u542f\u7528\u53d8\u91cf\u4e25\u683c\u6a21\u5f0f\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a `true` \u53d8\u91cf\u4e0d\u5b58\u5728\u65f6\u6e32\u67d3\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u9ed8\u8ba4\u4e3a `false` \u8fd9\u65f6\u4e0d\u5b58\u5728\u7684\u53d8\u91cf\u4f1a\u88ab\u6e32\u67d3\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\n\n**ownPropertyOnly** \u7528\u6765\u9690\u85cf\u539f\u578b\u4e0a\u7684\u53d8\u91cf\uff0c\u5982\u679c\u4f60\u9700\u8981\u628a\u672a\u7ecf\u5904\u7406\u8fc7\u7684\u5bf9\u8c61\u4f20\u9012\u7ed9\u6a21\u677f\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6e `ownPropertyOnly` \u4e3a `true`\uff0c\u9ed8\u8ba4\u4e3a `false`\u3002\n\n{% note info \u4e0d\u5b58\u5728\u7684\u6807\u7b7e %}\n\u4e0d\u5b58\u5728\u7684\u6807\u7b7e\u603b\u662f\u4f1a\u629b\u51fa\u4e00\u4e2a\u89e3\u6790\u5f02\u5e38\uff0c\u8fd9\u4e00\u884c\u4e3a\u65e0\u6cd5\u81ea\u5b9a\u4e49\u3002\n{% endnote %}\n\n## \u53c2\u6570\u987a\u5e8f\n\n\u9ed8\u8ba4\u4f1a\u5ffd\u7565\u53c2\u6570\u51fa\u73b0\u7684\u987a\u5e8f\uff0c\u4f8b\u5982 `{% for i in (1..8) reversed limit:3 %}` \u91cc\u603b\u662f\u4f1a\u5148\u6267\u884c `limit` \u518d\u6267\u884c `reversed`\uff0c\u867d\u7136 `reversed` \u5148\u51fa\u73b0\u3002\u4e3a\u4e86\u8ba9 LiquidJS \u6309\u987a\u5e8f\u6267\u884c\u53c2\u6570\uff0c\u9700\u8981\u8bbe\u7f6e **orderedFilterParameters** \u4e3a `true`\u3002\u5b83\u7684\u9ed8\u8ba4\u503c\u4e3a `false`\u3002\n\n[liquid]: ../api/classes/liquid_.liquid.html\n[caching]: ./caching.html\n[abstract-fs]: ./render-file.html#Abstract-File-System\n[render-file]: ./render-file.html\n[185]: https://github.com/harttle/liquidjs/issues/185\n[render]: ../tags/render.html\n[include]: ../tags/include.html\n[layout]: ../tags/layout.html\n[wc]: ./whitespace-control.html\n[intro]: ./intro-to-liquid.html\n[jekyllInclude]: ../api/interfaces/liquid_options_.liquidoptions.html#Optional-jekyllInclude\n", "{\n  \"name\": \"liquidjs\",\n  \"version\": \"9.33.1\",\n  \"description\": \"A simple, expressive and safe Shopify / Github Pages compatible template engine in pure JavaScript.\",\n  \"main\": \"dist/liquid.node.cjs.js\",\n  \"module\": \"dist/liquid.node.esm.js\",\n  \"es2015\": \"dist/liquid.browser.esm.js\",\n  \"browser\": {\n    \"./dist/liquid.node.cjs.js\": \"./dist/liquid.browser.umd.js\",\n    \"./dist/liquid.node.esm.js\": \"./dist/liquid.browser.esm.js\"\n  },\n  \"types\": \"dist/liquid.d.ts\",\n  \"scripts\": {\n    \"lint\": \"eslint \\\"**/*.ts\\\" .\",\n    \"check\": \"npm run build && npm test && npm run lint && npm run perf:diff\",\n    \"test\": \"nyc mocha \\\"test/**/*.ts\\\"\",\n    \"test:e2e\": \"mocha \\\"test/e2e/**/*.ts\\\"\",\n    \"perf\": \"cd benchmark && npm ci && npm start\",\n    \"perf:diff\": \"bin/perf-diff.sh\",\n    \"perf:engines\": \"cd benchmark && npm run engines\",\n    \"postversion\": \"npm run build:dist\",\n    \"build\": \"npm run build:dist && npm run build:docs\",\n    \"build:dist\": \"rollup -c rollup.config.ts\",\n    \"build:docs\": \"bin/build-docs.sh\"\n  },\n  \"bin\": {\n    \"liquidjs\": \"./bin/liquid.js\",\n    \"liquid\": \"./bin/liquid.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/harttle/liquidjs.git\"\n  },\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/liquidjs\"\n  },\n  \"files\": [\n    \"bin/liquid.js\",\n    \"dist\",\n    \"LICENSE\",\n    \"README.md\"\n  ],\n  \"engines\": {\n    \"node\": \">=4.8.7\"\n  },\n  \"keywords\": [\n    \"liquid\",\n    \"template engine\",\n    \"express\",\n    \"jinja\",\n    \"shopify\"\n  ],\n  \"author\": \"Harttle\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/harttle/liquidjs/issues\"\n  },\n  \"homepage\": \"https://github.com/harttle/liquidjs#readme\",\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^12.1.4\",\n    \"@commitlint/config-conventional\": \"^8.2.0\",\n    \"@semantic-release/changelog\": \"^3.0.2\",\n    \"@semantic-release/commit-analyzer\": \"^6.1.0\",\n    \"@semantic-release/git\": \"^7.0.8\",\n    \"@semantic-release/npm\": \"^5.1.8\",\n    \"@semantic-release/release-notes-generator\": \"^7.1.4\",\n    \"@types/benchmark\": \"^1.0.31\",\n    \"@types/chai\": \"^4.1.7\",\n    \"@types/chai-as-promised\": \"^7.1.0\",\n    \"@types/express\": \"^4.17.2\",\n    \"@types/jsdom\": \"^12.2.2\",\n    \"@types/mocha\": \"^5.2.6\",\n    \"@types/sinon\": \"^7.0.6\",\n    \"@types/sinon-chai\": \"^3.2.2\",\n    \"@types/supertest\": \"^2.0.7\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.6.0\",\n    \"@typescript-eslint/parser\": \"^5.6.0\",\n    \"all-contributors-cli\": \"^6.20.0\",\n    \"benchmark\": \"^2.1.4\",\n    \"chai\": \"^4.2.0\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"coveralls\": \"^3.0.2\",\n    \"cross-env\": \"^5.2.0\",\n    \"eslint\": \"^7.32.0\",\n    \"eslint-config-standard\": \"^12.0.0\",\n    \"eslint-plugin-import\": \"^2.15.0\",\n    \"eslint-plugin-mocha\": \"^5.3.0\",\n    \"eslint-plugin-node\": \"^8.0.1\",\n    \"eslint-plugin-promise\": \"^4.0.1\",\n    \"eslint-plugin-standard\": \"^4.0.0\",\n    \"express\": \"^4.16.4\",\n    \"husky\": \"^4.2.5\",\n    \"jsdom\": \"^13.2.0\",\n    \"mocha\": \"^9.0.1\",\n    \"nyc\": \"^15.1.0\",\n    \"regenerator-runtime\": \"^0.12.1\",\n    \"rollup\": \"^2.61.0\",\n    \"rollup-plugin-replace\": \"^2.1.0\",\n    \"rollup-plugin-typescript2\": \"^0.31.1\",\n    \"rollup-plugin-uglify\": \"^5.0.2\",\n    \"rollup-plugin-version-injector\": \"^1.3.3\",\n    \"semantic-release\": \"^17.2.3\",\n    \"sinon\": \"^7.5.0\",\n    \"sinon-chai\": \"^3.3.0\",\n    \"supertest\": \"^3.4.2\",\n    \"ts-node\": \"^8.0.2\",\n    \"tslib\": \"^2.3.1\",\n    \"typedoc\": \"^0.19.2\",\n    \"typedoc-plugin-markdown\": \"^2.2.17\",\n    \"typescript\": \"^4.5.3\"\n  },\n  \"release\": {\n    \"branch\": \"master\",\n    \"plugins\": [\n      \"@semantic-release/commit-analyzer\",\n      \"@semantic-release/release-notes-generator\",\n      \"@semantic-release/changelog\",\n      \"@semantic-release/npm\",\n      [\n        \"@semantic-release/git\",\n        {\n          \"assets\": [\n            \"package.json\",\n            \"package-lock.json\",\n            \"CHANGELOG.md\"\n          ],\n          \"message\": \"chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}\"\n        }\n      ],\n      \"@semantic-release/github\"\n    ]\n  },\n  \"nyc\": {\n    \"extension\": [\n      \".ts\"\n    ]\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run check\",\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n    }\n  }\n}\n", "import { Drop } from '../drop/drop'\nimport { __assign } from 'tslib'\nimport { NormalizedFullOptions, defaultOptions, RenderOptions } from '../liquid-options'\nimport { Scope } from './scope'\nimport { isArray, isNil, isString, isFunction, toLiquid } from '../util/underscore'\nimport { InternalUndefinedVariableError } from '../util/error'\n\nexport class Context {\n  /**\n   * insert a Context-level empty scope,\n   * for tags like {% capture %} {% assign %} to operate\n   */\n  private scopes: Scope[] = [{}]\n  private registers = {}\n  /**\n   * user passed in scope\n   * {% increment %}, {% decrement %} changes this scope,\n   * whereas {% capture %}, {% assign %} only hide this scope\n   */\n  public environments: Scope\n  /**\n   * global scope used as fallback for missing variables\n   */\n  public globals: Scope\n  public sync: boolean\n  /**\n   * The normalized liquid options object\n   */\n  public opts: NormalizedFullOptions\n  /**\n   * Throw when accessing undefined variable?\n   */\n  public strictVariables: boolean;\n  public constructor (env: object = {}, opts: NormalizedFullOptions = defaultOptions, renderOptions: RenderOptions = {}) {\n    this.sync = !!renderOptions.sync\n    this.opts = opts\n    this.globals = renderOptions.globals ?? opts.globals\n    this.environments = env\n    this.strictVariables = renderOptions.strictVariables ?? this.opts.strictVariables\n  }\n  public getRegister (key: string) {\n    return (this.registers[key] = this.registers[key] || {})\n  }\n  public setRegister (key: string, value: any) {\n    return (this.registers[key] = value)\n  }\n  public saveRegister (...keys: string[]): [string, any][] {\n    return keys.map(key => [key, this.getRegister(key)])\n  }\n  public restoreRegister (keyValues: [string, any][]) {\n    return keyValues.forEach(([key, value]) => this.setRegister(key, value))\n  }\n  public getAll () {\n    return [this.globals, this.environments, ...this.scopes]\n      .reduce((ctx, val) => __assign(ctx, val), {})\n  }\n  public get (paths: string[]) {\n    const scope = this.findScope(paths[0])\n    return this.getFromScope(scope, paths)\n  }\n  public getFromScope (scope: object, paths: string[] | string) {\n    if (isString(paths)) paths = paths.split('.')\n    return paths.reduce((scope, path, i) => {\n      scope = readProperty(scope, path, this.opts.ownPropertyOnly)\n      if (isNil(scope) && this.strictVariables) {\n        throw new InternalUndefinedVariableError((paths as string[]).slice(0, i + 1).join!('.'))\n      }\n      return scope\n    }, scope)\n  }\n  public push (ctx: object) {\n    return this.scopes.push(ctx)\n  }\n  public pop () {\n    return this.scopes.pop()\n  }\n  public bottom () {\n    return this.scopes[0]\n  }\n  private findScope (key: string) {\n    for (let i = this.scopes.length - 1; i >= 0; i--) {\n      const candidate = this.scopes[i]\n      if (key in candidate) return candidate\n    }\n    if (key in this.environments) return this.environments\n    return this.globals\n  }\n}\n\nexport function readProperty (obj: Scope, key: string, ownPropertyOnly: boolean) {\n  if (isNil(obj)) return obj\n  obj = toLiquid(obj)\n  const jsProperty = readJSProperty(obj, key, ownPropertyOnly)\n  if (isFunction(jsProperty)) return jsProperty.call(obj)\n  if (obj instanceof Drop) {\n    if (obj.hasOwnProperty(key)) return obj[key]\n    return obj.liquidMethodMissing(key)\n  }\n  if (key === 'size') return readSize(obj)\n  if (key === 'first') return readFirst(obj)\n  if (key === 'last') return readLast(obj)\n  return jsProperty\n}\nexport function readJSProperty (obj: Scope, key: string, ownPropertyOnly: boolean) {\n  if (ownPropertyOnly && !Object.hasOwnProperty.call(obj, key)) return undefined\n  return obj[key]\n}\n\nfunction readFirst (obj: Scope) {\n  if (isArray(obj)) return obj[0]\n  return obj['first']\n}\n\nfunction readLast (obj: Scope) {\n  if (isArray(obj)) return obj[obj.length - 1]\n  return obj['last']\n}\n\nfunction readSize (obj: Scope) {\n  if (obj.hasOwnProperty('size') || obj['size'] !== undefined) return obj['size']\n  if (isArray(obj) || isString(obj)) return obj.length\n  if (typeof obj === 'object') return Object.keys(obj).length\n}\n", "import * as _ from './util/underscore'\nimport { Template } from './template/template'\nimport { Cache } from './cache/cache'\nimport { LRU } from './cache/lru'\nimport { FS } from './fs/fs'\nimport * as fs from './fs/node'\nimport { defaultOperators, Operators } from './render/operator'\nimport { createTrie, Trie } from './util/operator-trie'\nimport { Thenable } from './util/async'\n\nexport interface LiquidOptions {\n  /** A directory or an array of directories from where to resolve layout and include templates, and the filename passed to `.renderFile()`. If it's an array, the files are looked up in the order they occur in the array. Defaults to `[\".\"]` */\n  root?: string | string[];\n  /** A directory or an array of directories from where to resolve included templates. If it's an array, the files are looked up in the order they occur in the array. Defaults to `root` */\n  partials?: string | string[];\n  /** A directory or an array of directories from where to resolve layout templates. If it's an array, the files are looked up in the order they occur in the array. Defaults to `root` */\n  layouts?: string | string[];\n  /** Allow refer to layouts/partials by relative pathname. To avoid arbitrary filesystem read, paths been referenced also need to be within corresponding root, partials, layouts. Defaults to `true`. */\n  relativeReference?: boolean;\n  /** Use jekyll style include, pass parameters to `include` variable of current scope. Defaults to `false`. */\n  jekyllInclude?: boolean;\n  /** Add a extname (if filepath doesn't include one) before template file lookup. Eg: setting to `\".html\"` will allow including file by basename. Defaults to `\"\"`. */\n  extname?: string;\n  /** Whether or not to cache resolved templates. Defaults to `false`. */\n  cache?: boolean | number | Cache<Thenable<Template[]>>;\n  /** Use Javascript Truthiness. Defaults to `false`. */\n  jsTruthy?: boolean;\n  /** If set, treat the `filepath` parameter in `{%include filepath %}` and `{%layout filepath%}` as a variable, otherwise as a literal value. Defaults to `true`. */\n  dynamicPartials?: boolean;\n  /** Whether or not to assert filter existence. If set to `false`, undefined filters will be skipped. Otherwise, undefined filters will cause an exception. Defaults to `false`. */\n  strictFilters?: boolean;\n  /** Whether or not to assert variable existence.  If set to `false`, undefined variables will be rendered as empty string.  Otherwise, undefined variables will cause an exception. Defaults to `false`. */\n  strictVariables?: boolean;\n  /** Hide scope variables from prototypes, useful when you're passing a not sanitized object into LiquidJS or need to hide prototypes from templates. */\n  ownPropertyOnly?: boolean;\n  /** Modifies the behavior of `strictVariables`. If set, a single undefined variable will *not* cause an exception in the context of the `if`/`elsif`/`unless` tag and the `default` filter. Instead, it will evaluate to `false` and `null`, respectively. Irrelevant if `strictVariables` is not set. Defaults to `false`. **/\n  lenientIf?: boolean;\n  /** JavaScript timezoneOffset for `date` filter, default to local time. That means if you're in Australia (UTC+10), it'll default to -600 */\n  timezoneOffset?: number;\n  /** Strip blank characters (including ` `, `\\t`, and `\\r`) from the right of tags (`{% %}`) until `\\n` (inclusive). Defaults to `false`. */\n  trimTagRight?: boolean;\n  /** Similar to `trimTagRight`, whereas the `\\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */\n  trimTagLeft?: boolean;\n  /** Strip blank characters (including ` `, `\\t`, and `\\r`) from the right of values (`{{ }}`) until `\\n` (inclusive). Defaults to `false`. */\n  trimOutputRight?: boolean;\n  /** Similar to `trimOutputRight`, whereas the `\\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */\n  trimOutputLeft?: boolean;\n  /** The left delimiter for liquid tags. **/\n  tagDelimiterLeft?: string;\n  /** The right delimiter for liquid tags. **/\n  tagDelimiterRight?: string;\n  /** The left delimiter for liquid outputs. **/\n  outputDelimiterLeft?: string;\n  /** The right delimiter for liquid outputs. **/\n  outputDelimiterRight?: string;\n  /** Whether input strings to date filter preserve the given timezone **/\n  preserveTimezones?: boolean;\n  /** Whether `trim*Left`/`trim*Right` is greedy. When set to `true`, all consecutive blank characters including `\\n` will be trimed regardless of line breaks. Defaults to `true`. */\n  greedy?: boolean;\n  /** `fs` is used to override the default file-system module with a custom implementation. */\n  fs?: FS;\n  /** the global scope passed down to all partial and layout templates, i.e. templates included by `include`, `layout` and `render` tags. */\n  globals?: object;\n  /** Whether or not to keep value type when writing the Output, not working for streamed rendering. Defaults to `false`. */\n  keepOutputType?: boolean;\n  /** An object of operators for conditional statements. Defaults to the regular Liquid operators. */\n  operators?: Operators;\n  /** Respect parameter order when using filters like \"for ... reversed limit\", Defaults to `false`. */\n  orderedFilterParameters?: boolean;\n}\n\nexport interface RenderOptions {\n  /**\n   * This call is sync or async? It's used by Liquid internal methods, you'll not need this.\n   */\n  sync?: boolean;\n  /**\n   * Same as `globals` on LiquidOptions, but only for current render() call\n   */\n  globals?: object;\n  /**\n   * Same as `strictVariables` on LiquidOptions, but only for current render() call\n   */\n  strictVariables?: boolean;\n  /**\n   * Same as `ownPropertyOnly` on LiquidOptions, but only for current render() call\n   */\n  ownPropertyOnly?: boolean;\n}\n\ninterface NormalizedOptions extends LiquidOptions {\n  root?: string[];\n  partials?: string[];\n  layouts?: string[];\n  cache?: Cache<Thenable<Template[]>>;\n  operatorsTrie?: Trie;\n}\n\nexport interface NormalizedFullOptions extends NormalizedOptions {\n  root: string[];\n  partials: string[];\n  layouts: string[];\n  relativeReference: boolean;\n  jekyllInclude: boolean;\n  extname: string;\n  cache: undefined | Cache<Thenable<Template[]>>;\n  jsTruthy: boolean;\n  dynamicPartials: boolean;\n  fs: FS;\n  strictFilters: boolean;\n  strictVariables: boolean;\n  ownPropertyOnly: boolean;\n  lenientIf: boolean;\n  trimTagRight: boolean;\n  trimTagLeft: boolean;\n  trimOutputRight: boolean;\n  trimOutputLeft: boolean;\n  tagDelimiterLeft: string;\n  tagDelimiterRight: string;\n  outputDelimiterLeft: string;\n  outputDelimiterRight: string;\n  preserveTimezones: boolean;\n  greedy: boolean;\n  globals: object;\n  keepOutputType: boolean;\n  operators: Operators;\n  operatorsTrie: Trie;\n}\n\nexport const defaultOptions: NormalizedFullOptions = {\n  root: ['.'],\n  layouts: ['.'],\n  partials: ['.'],\n  relativeReference: true,\n  jekyllInclude: false,\n  cache: undefined,\n  extname: '',\n  fs: fs,\n  dynamicPartials: true,\n  jsTruthy: false,\n  trimTagRight: false,\n  trimTagLeft: false,\n  trimOutputRight: false,\n  trimOutputLeft: false,\n  greedy: true,\n  tagDelimiterLeft: '{%',\n  tagDelimiterRight: '%}',\n  outputDelimiterLeft: '{{',\n  outputDelimiterRight: '}}',\n  preserveTimezones: false,\n  strictFilters: false,\n  strictVariables: false,\n  ownPropertyOnly: false,\n  lenientIf: false,\n  globals: {},\n  keepOutputType: false,\n  operators: defaultOperators,\n  operatorsTrie: createTrie(defaultOperators)\n}\n\nexport function normalize (options: LiquidOptions): NormalizedFullOptions {\n  if (options.hasOwnProperty('operators')) {\n    (options as NormalizedOptions).operatorsTrie = createTrie(options.operators!)\n  }\n  if (options.hasOwnProperty('root')) {\n    if (!options.hasOwnProperty('partials')) options.partials = options.root\n    if (!options.hasOwnProperty('layouts')) options.layouts = options.root\n  }\n  if (options.hasOwnProperty('cache')) {\n    let cache: Cache<Thenable<Template[]>> | undefined\n    if (typeof options.cache === 'number') cache = options.cache > 0 ? new LRU(options.cache) : undefined\n    else if (typeof options.cache === 'object') cache = options.cache\n    else cache = options.cache ? new LRU(1024) : undefined\n    options.cache = cache\n  }\n  options = { ...defaultOptions, ...(options.jekyllInclude ? { dynamicPartials: false } : {}), ...options }\n  if (!options.fs!.dirname && options.relativeReference) {\n    console.warn('[LiquidJS] `fs.dirname` is required for relativeReference, set relativeReference to `false` to suppress this warning, or provide implementation for `fs.dirname`')\n    options.relativeReference = false\n  }\n  options.root = normalizeDirectoryList(options.root)\n  options.partials = normalizeDirectoryList(options.partials)\n  options.layouts = normalizeDirectoryList(options.layouts)\n  return options as NormalizedFullOptions\n}\n\nexport function normalizeDirectoryList (value: any): string[] {\n  let list: string[] = []\n  if (_.isArray(value)) list = value\n  if (_.isString(value)) list = [value]\n  return list\n}\n", "import { Liquid } from '../..'\nimport { expect, use } from 'chai'\nimport * as chaiAsPromised from 'chai-as-promised'\nimport * as sinon from 'sinon'\nimport * as sinonChai from 'sinon-chai'\nconst LiquidUMD = require('../../dist/liquid.browser.umd.js').Liquid\n\nuse(chaiAsPromised)\nuse(sinonChai)\n\ndescribe('Issues', function () {\n  it('#221 unicode blanks are not properly treated', async () => {\n    const engine = new Liquid({ strictVariables: true, strictFilters: true })\n    const html = engine.parseAndRenderSync('{{huh |\u00a0truncate: 11}}', { huh: 'fdsafdsafdsafdsaaaaa' })\n    expect(html).to.equal('fdsafdsa...')\n  })\n  it('#252 \"Not valid identifier\" error for a quotes-containing identifier', async () => {\n    const template = `{% capture \"form_classes\" -%}\n      foo\n    {%- endcapture %}{{form_classes}}`\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(template)\n    expect(html).to.equal('foo')\n  })\n  it('#259 complex property access with braces is not supported', async () => {\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync('{{ [\"complex key\"] }}', { 'complex key': 'foo' })\n    expect(html).to.equal('foo')\n  })\n  it('#243 Potential for ReDoS through string replace function', async () => {\n    const engine = new Liquid()\n    const INPUT = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!'\n    const BROKEN_REGEX = /([a-z]+)+$/\n\n    // string filters vulnerable to regexp parameter: split, replace, replace_first, remove_first\n    const parameters = { input: INPUT, regex: BROKEN_REGEX }\n    const template = `{{ input | replace:regex,'' }}`\n    const html = engine.parseAndRenderSync(template, parameters)\n\n    // should stringify the regexp rather than execute it\n    expect(html).to.equal(INPUT)\n  })\n  it('#263 raw/endraw block not ignoring {% characters', () => {\n    const template = `{% raw %}This is a code snippet showing how {% breaks the raw block.{% endraw %}`\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync(template)\n    expect(html).to.equal('This is a code snippet showing how {% breaks the raw block.')\n  })\n  it('#268 elsif is not supported for unless', () => {\n    const template = `{%- unless condition1 -%}\n    <div>X</div>\n    {%- elsif condition2 -%}\n        <div>Y</div>\n    {%- else %}\n        <div>Z</div>\n    {% endunless %}`\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync(template, { condition1: true, condition2: true })\n    expect(html).to.equal('<div>Y</div>')\n  })\n  it('#277 Passing liquid in FilterImpl', () => {\n    const engine = new Liquid()\n    engine.registerFilter('render', function (this: any, template: string, name: string) {\n      return this.liquid.parseAndRenderSync(decodeURIComponent(template), { name })\n    })\n    const html = engine.parseAndRenderSync(\n      `{{ subtemplate | render: \"foo\" }}`,\n      { subtemplate: encodeURIComponent('hello {{ name }}') }\n    )\n    expect(html).to.equal('hello foo')\n  })\n  it('#288 Unexpected behavior when string literals contain }}', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(`{{ '{{' }}{{ '}}' }}`)\n    expect(html).to.equal('{{}}')\n  })\n  it('#222 Support function calls', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(\n      `{{ obj.property }}`,\n      { obj: { property: () => 'BAR' } }\n    )\n    expect(html).to.equal('BAR')\n  })\n  it('#313 lenientIf not working as expected in umd', async () => {\n    const engine = new LiquidUMD({\n      strictVariables: true,\n      lenientIf: true\n    })\n    const html = await engine.parseAndRender(`{{ name | default: \"default name\" }}`)\n    expect(html).to.equal('default name')\n  })\n  it('#321 comparison for empty/nil', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(\n      '{% if empty == nil %}true{%else%}false{%endif%}' +\n      '{% if nil == empty %}true{%else%}false{%endif%}'\n    )\n    expect(html).to.equal('falsefalse')\n  })\n  it('#320 newline_to_br filter should output <br /> instead of <br/>', async () => {\n    const engine = new Liquid()\n    const html = await engine.parseAndRender(\n      `{{ 'a \\n b \\n c' | newline_to_br | split: '<br />' }}`\n    )\n    expect(html).to.equal('a ,\\n b ,\\n c')\n  })\n  it('#342 New lines in logical operator', async () => {\n    const engine = new Liquid()\n    const tpl = `{%\\r\\nif\\r\\ntrue\\r\\nor\\r\\nfalse\\r\\n%}\\r\\ntrue\\r\\n{%\\r\\nendif\\r\\n%}`\n    const html = await engine.parseAndRender(tpl)\n    expect(html).to.equal('\\r\\ntrue\\r\\n')\n  })\n  it('#401 Timezone Offset Issue', async () => {\n    const engine = new Liquid({ timezoneOffset: -600 })\n    const tpl = engine.parse('{{ date | date: \"%Y-%m-%d %H:%M %p %z\" }}')\n    const html = await engine.render(tpl, { date: '2021-10-06T15:31:00+08:00' })\n    expect(html).to.equal('2021-10-06 17:31 PM +1000')\n  })\n  it('#412 Pass root as it is to `resolve`', async () => {\n    const engine = new Liquid({\n      root: '/tmp',\n      fs: {\n        readFileSync: (file: string) => file,\n        async readFile (file: string) { return 'foo' },\n        existsSync (file: string) { return true },\n        async exists (file: string) { return true },\n        resolve: (dir: string, file: string) => dir + '/' + file\n      }\n    })\n    const tpl = engine.parse('{% include \"foo.liquid\" %}')\n    const html = await engine.renderSync(tpl)\n    expect(html).to.equal('/tmp/foo.liquid')\n  })\n  it('#416 Templates imported by {% render %} not cached for concurrent async render', async () => {\n    const readFile = sinon.spy(() => Promise.resolve('HELLO'))\n    const exists = sinon.spy(() => 'HELLO')\n    const engine = new Liquid({\n      cache: true,\n      extname: '.liquid',\n      root: '~',\n      fs: {\n        exists,\n        resolve: (root: string, file: string, ext: string) => root + '#' + file + ext,\n        sep: '#',\n        readFile\n      } as any\n    })\n\n    await Promise.all(Array(5).fill(0).map(\n      x => engine.parseAndRender(\"{% render 'template' %}\")\n    ))\n    expect(exists).to.be.calledOnce\n    expect(readFile).to.be.calledOnce\n  })\n  it('#431 Error when using Date timezoneOffset in 9.28.5', async () => {\n    const engine = new Liquid({\n      timezoneOffset: 0,\n      preserveTimezones: true\n    })\n    const tpl = engine.parse('Welcome to {{ now | date: \"%Y-%m-%d\" }}!')\n    expect(engine.render(tpl, { now: new Date('2019/02/01') })).to.eventually.equal('Welcome to 2019-02-01')\n  })\n  it('#433 Support Jekyll-like includes', async () => {\n    const engine = new Liquid({\n      dynamicPartials: false,\n      root: '/tmp',\n      fs: {\n        readFileSync: (file: string) => file,\n        async readFile (file: string) { return `CONTENT for ${file}` },\n        existsSync (file: string) { return true },\n        async exists (file: string) { return true },\n        resolve: (dir: string, file: string) => dir + '/' + file\n      }\n    })\n    const tpl = engine.parse('{% include prefix/{{ my_variable | append: \"-bar\" }}/suffix %}')\n    const html = await engine.render(tpl, { my_variable: 'foo' })\n    expect(html).to.equal('CONTENT for /tmp/prefix/foo-bar/suffix')\n  })\n  it('#428 Implement liquid/echo tags', () => {\n    const template = `{%- liquid\n      for value in array\n        assign double_value = value | times: 2\n        echo double_value | times: 2\n        unless forloop.last\n          echo '#'\n        endunless\n      endfor\n    \n      echo '#'\n      echo double_value\n    -%}`\n    const engine = new Liquid()\n    const html = engine.parseAndRenderSync(template, { array: [1, 2, 3] })\n    expect(html).to.equal('4#8#12#6')\n  })\n  it('#454 leaking JS prototype getter functions in evaluation', async () => {\n    const engine = new Liquid({ ownPropertyOnly: true })\n    const html = engine.parseAndRenderSync('{{foo |\u00a0size}}-{{bar.coo}}', { foo: 'foo', bar: Object.create({ coo: 'COO' }) })\n    expect(html).to.equal('3-')\n  })\n})\n", "import * as chai from 'chai'\nimport { Context } from '../../../src/context/context'\nimport { Scope } from '../../../src/context/scope'\n\nconst expect = chai.expect\n\ndescribe('Context', function () {\n  let ctx: any, scope: Scope\n  beforeEach(function () {\n    scope = {\n      foo: 'zoo',\n      one: 1,\n      zoo: { size: 4 },\n      map: new Map([['foo', 'FOO']]),\n      obj: {\n        first: 'f',\n        last: 'l'\n      },\n      func: () => 'FUNC',\n      objFunc: () => ({ prop: 'PROP' }),\n      bar: {\n        zoo: 'coo',\n        'Mr.Smith': 'John',\n        arr: ['a', 'b']\n      }\n    }\n    ctx = new Context(scope)\n  })\n\n  describe('#get()', function () {\n    it('should get direct property', async function () {\n      expect(ctx.get(['foo'])).equal('zoo')\n    })\n    it('should read nested property', async function () {\n      expect(ctx.get(['obj', 'first'])).to.equal('f')\n      expect(ctx.get(['obj', 'last'])).to.equal('l')\n      expect(ctx.get(['obj', 'size'])).to.equal(2)\n    })\n    it('undefined property should yield undefined', async function () {\n      expect(ctx.get(['notdefined'])).to.equal(undefined)\n      expect(ctx.get([false as any])).to.equal(undefined)\n    })\n    it('should respect to toLiquid', async function () {\n      const scope = new Context({ foo: {\n        toLiquid: () => ({ bar: 'BAR' }),\n        bar: 'bar'\n      } })\n      expect(scope.get(['foo', 'bar'])).to.equal('BAR')\n    })\n    it('should return undefined when not exist', async function () {\n      expect(ctx.get(['foo', 'foo', 'foo'])).to.be.undefined\n    })\n    it('should return string length as size', async function () {\n      expect(ctx.get(['foo', 'size'])).to.equal(3)\n    })\n    it('should return array length as size', async function () {\n      expect(ctx.get(['bar', 'arr', 'size'])).to.equal(2)\n    })\n    it('should return map size as size', async function () {\n      expect(ctx.get(['map', 'size'])).to.equal(1)\n    })\n    it('should return undefined if not have a size', async function () {\n      expect(ctx.get(['one', 'size'])).to.equal(undefined)\n      expect(ctx.get(['non-exist', 'size'])).to.equal(undefined)\n    })\n    it('should read .first of array', async function () {\n      expect(ctx.get(['bar', 'arr', 'first'])).to.equal('a')\n    })\n    it('should read .last of array', async function () {\n      expect(ctx.get(['bar', 'arr', 'last'])).to.equal('b')\n    })\n    it('should call function', async function () {\n      expect(ctx.get(['func'])).to.equal('FUNC')\n    })\n    it('should call function before read nested property', async function () {\n      expect(ctx.get(['objFunc', 'prop'])).to.equal('PROP')\n    })\n  })\n\n  describe('#getFromScope()', function () {\n    it('should support string', () => {\n      expect(ctx.getFromScope({ obj: { foo: 'FOO' } }, 'obj.foo')).to.equal('FOO')\n    })\n  })\n\n  describe('strictVariables', async function () {\n    let ctx: Context\n    beforeEach(function () {\n      ctx = new Context(ctx, {\n        strictVariables: true\n      } as any)\n    })\n    it('should throw when variable not defined', function () {\n      return expect(() => ctx.get(['notdefined'])).to.throw(/undefined variable: notdefined/)\n    })\n    it('should throw when deep variable not exist', async function () {\n      ctx.push({ foo: 'FOO' })\n      return expect(() => ctx.get(['foo', 'bar', 'not', 'defined'])).to.throw(/undefined variable: foo.bar/)\n    })\n    it('should throw when itself not defined', async function () {\n      ctx.push({ foo: 'FOO' })\n      return expect(() => ctx.get(['foo', 'BAR'])).to.throw(/undefined variable: foo.BAR/)\n    })\n    it('should find variable in parent scope', async function () {\n      ctx.push({ 'foo': 'foo' })\n      ctx.push({\n        'bar': 'bar'\n      })\n      expect(ctx.get(['foo'])).to.equal('foo')\n    })\n  })\n\n  describe('ownPropertyOnly', async function () {\n    let ctx: Context\n    beforeEach(function () {\n      ctx = new Context(ctx, {\n        ownPropertyOnly: true\n      } as any)\n    })\n    it('should return undefined for prototype object property', function () {\n      ctx.push({ foo: Object.create({ bar: 'BAR' }) })\n      return expect(ctx.get(['foo', 'bar'])).to.equal(undefined)\n    })\n    it('should return undefined for Array.prototype.reduce', function () {\n      ctx.push({ foo: [] })\n      return expect(ctx.get(['foo', 'reduce'])).to.equal(undefined)\n    })\n    it('should return undefined for function prototype property', function () {\n      function Foo () {}\n      Foo.prototype.bar = 'BAR'\n      ctx.push({ foo: new (Foo as any)() })\n      return expect(ctx.get(['foo', 'bar'])).to.equal(undefined)\n    })\n    it('should allow function constructor properties', function () {\n      function Foo (this: any) { this.bar = 'BAR' }\n      ctx.push({ foo: new (Foo as any)() })\n      return expect(ctx.get(['foo', 'bar'])).to.equal('BAR')\n    })\n    it('should return undefined for class method', function () {\n      class Foo { bar () {} }\n      ctx.push({ foo: new Foo() })\n      return expect(ctx.get(['foo', 'bar'])).to.equal(undefined)\n    })\n    it('should allow class property', function () {\n      class Foo { bar = 'BAR' }\n      ctx.push({ foo: new Foo() })\n      return expect(ctx.get(['foo', 'bar'])).to.equal('BAR')\n    })\n    it('should allow Array.prototype.length', function () {\n      ctx.push({ foo: [1, 2] })\n      return expect(ctx.get(['foo', 'length'])).to.equal(2)\n    })\n    it('should allow size to access Array.prototype.length', function () {\n      ctx.push({ foo: [1, 2] })\n      return expect(ctx.get(['foo', 'size'])).to.equal(2)\n    })\n    it('should allow size to access Set.prototype.size', function () {\n      ctx.push({ foo: new Set([1, 2]) })\n      return expect(ctx.get(['foo', 'size'])).to.equal(2)\n    })\n    it('should allow size to access Object key count', function () {\n      ctx.push({ foo: { bar: 'BAR', coo: 'COO' } })\n      return expect(ctx.get(['foo', 'size'])).to.equal(2)\n    })\n    it('should throw when property is hidden and strictVariables is true', function () {\n      ctx = new Context(ctx, {\n        ownPropertyOnly: true,\n        strictVariables: true\n      } as any)\n      ctx.push({ foo: Object.create({ bar: 'BAR' }) })\n      return expect(() => ctx.get(['foo', 'bar'])).to.throw(/undefined variable: foo.bar/)\n    })\n  })\n\n  describe('.getAll()', function () {\n    it('should get all properties when arguments empty', async function () {\n      expect(ctx.getAll()).deep.equal(scope)\n    })\n  })\n\n  describe('.push()', function () {\n    it('should push scope', async function () {\n      ctx.push({ 'bar': 'bar' })\n      ctx.push({\n        foo: 'foo'\n      })\n      expect(ctx.get(['foo'])).to.equal('foo')\n      expect(ctx.get(['bar'])).to.equal('bar')\n    })\n    it('should hide deep properties by push', async function () {\n      ctx.push({ bar: { bar: 'bar' } })\n      ctx.push({ bar: { foo: 'foo' } })\n      expect(ctx.get(['bar', 'foo'])).to.equal('foo')\n      expect(ctx.get(['bar', 'bar'])).to.equal(undefined)\n    })\n  })\n  describe('.pop()', function () {\n    it('should pop scope', async function () {\n      ctx.push({\n        foo: 'foo'\n      })\n      ctx.pop()\n      expect(ctx.get(['foo'])).to.equal('zoo')\n    })\n  })\n})\n"], "filenames": ["docs/source/tutorials/options.md", "docs/source/zh-cn/tutorials/options.md", "package.json", "src/context/context.ts", "src/liquid-options.ts", "test/e2e/issues.ts", "test/unit/context/context.ts"], "buggy_code_start_loc": [130, 127, 15, 62, 33, 196, 98], "buggy_code_end_loc": [130, 127, 16, 100, 145, 196, 109], "fixing_code_start_loc": [131, 128, 15, 62, 34, 197, 98], "fixing_code_end_loc": [133, 130, 16, 106, 154, 202, 172], "type": "CWE-200", "message": "The package liquidjs before 10.0.0 are vulnerable to Information Exposure when ownPropertyOnly parameter is set to False, which results in leaking properties of a prototype. Workaround For versions 9.34.0 and higher, an option to disable this functionality is provided.", "other": {"cve": {"id": "CVE-2022-25948", "sourceIdentifier": "report@snyk.io", "published": "2022-12-22T05:15:10.487", "lastModified": "2022-12-30T22:00:48.180", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package liquidjs before 10.0.0 are vulnerable to Information Exposure when ownPropertyOnly parameter is set to False, which results in leaking properties of a prototype. Workaround For versions 9.34.0 and higher, an option to disable this functionality is provided."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:liquidjs:liquidjs:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "10.0.0", "matchCriteriaId": "705150F8-5A55-443D-AE5A-5A82874E8EFB"}]}]}], "references": [{"url": "https://github.com/harttle/liquidjs/commit/7e99efc5131e20cf3f59e1fc2c371a15aa4109db", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/harttle/liquidjs/commit/7eb621601c2b05d6e379e5ce42219f2b1f556208", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/harttle/liquidjs/issues/454", "source": "report@snyk.io", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://groups.google.com/u/0/a/snyk.io/g/report/c/9ipXecWRtTM/m/IgLadevtCQAJ", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-LIQUIDJS-2952868", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/harttle/liquidjs/commit/7e99efc5131e20cf3f59e1fc2c371a15aa4109db"}}