{"buggy_code": ["<?php\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default authentication \"guard\" and password\n    | reset options for your application. You may change these defaults\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n    'defaults' => [\n        'guard' => 'web',\n        'passwords' => 'users',\n    ],\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | here which uses session storage and the Eloquent user provider.\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | Supported: \"session\", \"token\"\n    |\n    */\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n        'api' => [\n           // 'driver' => 'passport',\n            'driver' => 'token',\n           // 'driver' => 'passport',\n            'provider' => 'users',\n        ],\n    ],\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | sources which represent each model / table. These sources may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => \\MicroweberPackages\\User\\Models\\User::class,\n        ],\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | Here you may set the options for resetting passwords including the view\n    | that is your password reset e-mail. You may also set the name of the\n    | table that maintains all of the reset tokens for your application.\n    |\n    | You may specify multiple password reset configurations if you have more\n    | than one user table or model in the application and you want to have\n    | separate password reset settings based on the specific user types.\n    |\n    | The expire time is the number of minutes that the reset token should be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    */\n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'table' => 'password_resets',\n            'expire' => 60,\n        ],\n    ],\n];\n", "<?php\n/**\n* Created by PhpStorm.\n * User: Bojidar\n* Date: 10/7/2020\n* Time: 5:50 PM\n*/\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('api/users/export_my_data', function (\\Illuminate\\Http\\Request $request) {\n\n    if (!is_logged()) {\n        return array('error' => 'You must be logged');\n    }\n\n    $userId = (int) $request->all()['user_id'];\n\n    $allowToExport = false;\n    if ($userId == user_id()) {\n        $allowToExport = true;\n    } else if (is_admin()) {\n        $allowToExport = true;\n    }\n\n    if ($allowToExport == false) {\n        return array('error' => 'You are now allowed to export this information.');\n    }\n\n    $exportFromTables = [];\n    $prefix = mw()->database_manager->get_prefix();\n    $tablesList = mw()->database_manager->get_tables_list(true);\n    foreach ($tablesList as $table) {\n        $table = str_replace($prefix, false, $table);\n        $columns  = Schema::getColumnListing($table);\n        if (in_array('created_by', $columns)) {\n            $exportFromTables[] = $table;\n        }\n    }\n\n    $exportData = [];\n    foreach ($exportFromTables as $exportFromTable) {\n        $getData = \\Illuminate\\Support\\Facades\\DB::table($exportFromTable)->where('created_by', $userId)->get();\n        if (!empty($getData)) {\n            $exportData[$exportFromTable] = $getData->toArray();\n        }\n    }\n\n    $json = new \\MicroweberPackages\\Export\\Formats\\JsonExport($exportData);\n    $getJson = $json->start();\n\n    if (isset($getJson['files'][0]['filepath'])) {\n        return response()->download($getJson['files'][0]['filepath'])->deleteFileAfterSend(true);\n    }\n\n})->name('api.users.export_my_data');\n\n// Admin web\nRoute::prefix(ADMIN_PREFIX)->middleware(['admin'])->namespace('\\MicroweberPackages\\User\\Http\\Controllers')->group(function () {\n    Route::get('login', 'UserLoginController@index')->name('admin.login')->middleware(['allowed_ips']);\n});\n\n\n\n// OLD API SAVE USER\nRoute::post('api/save_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_logged()){\n        App::abort(403, 'Unauthorized action.');\n    }\n    $input = Input::all();\n    return save_user($input);\n})->middleware(['api']);\n\nRoute::post('api/delete_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_admin()){\n        App::abort(403, 'Unauthorized action.');\n    }\n    $input = Input::all();\n    return delete_user($input);\n})->middleware(['api']);\n\nRoute::name('api.user.')\n    ->prefix('api/user')\n    ->middleware([\n        'public.api',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers')\n    ->group(function () {\n\n    Route::post('login', 'UserLoginController@login')->name('login')->middleware(['allowed_ips','throttle:60,1']);\n    Route::any('logout', 'UserLoginController@logout')->name('logout');\n    Route::post('register', 'UserRegisterController@register')->name('register')->middleware(['allowed_ips']);\n\n    Route::post('/forgot-password', 'UserForgotPasswordController@send')->name('password.email');\n    Route::post('/reset-password', 'UserForgotPasswordController@update')->name('password.update');\n\n    Route::post('/profile-update', 'UserProfileController@update')->name('profile.update');\n\n});\n\nRoute::name('api.')\n    ->prefix('api')\n    ->middleware([\n        'api',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers\\Api')\n    ->group(function () {\n\n        Route::get('/logout', '\\MicroweberPackages\\User\\Http\\Controllers\\UserLogoutController@index')->name('api.logout');\n\n        Route::apiResource('user', 'UserApiController');\n    });\n", "<?php\n/**\n * Created by PhpStorm.\n * User: Bojidar\n * Date: 10/5/2020\n * Time: 1:45 PM\n */\n\nuse Illuminate\\Support\\Facades\\Route;\n\n\n// Public user\n\n// route moved to src/MicroweberPackages/App/routes/web.php  because if bug\n// Route::get('login', '\\MicroweberPackages\\User\\Http\\Controllers\\UserLoginController@loginForm')->name('login');\n\n\nRoute::name('admin.')\n    ->prefix('admin')\n    ->middleware([\n        'admin',\n       // \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers\\Admin')\n    ->group(function () {\n        Route::resource('user', 'UserController',['except' => ['show','edit', 'create']]);\n    });\n\nRoute::namespace('\\MicroweberPackages\\User\\Http\\Controllers')->middleware(['web'])->group(function () {\n\n    Route::get('/logout', 'UserLogoutController@index')->name('logout');\n    Route::post('/logout', 'UserLogoutController@submit')->name('logout.submit');\n\n\n    Route::get('email/verify/{id}/{hash}', 'UserVerifyController@verify')->name('verification.verify')\n        ->middleware([\\MicroweberPackages\\User\\Http\\Middleware\\UserValidateEmailSignature::class]);\n\n    Route::get('email/verify-resend/{id}/{hash}', 'UserVerifyController@showResendForm')->name('verification.resend');\n    Route::post('email/verify-resend/{id}/{hash}', 'UserVerifyController@sendVerifyEmail')->name('verification.send');\n\n    Route::get('/forgot-password', 'UserForgotPasswordController@showForgotForm')->name('password.request');\n    Route::post('/forgot-password', 'UserForgotPasswordController@send')->name('password.email');\n\n    Route::get('/reset-password/{token}', 'UserForgotPasswordController@showResetForm')->name('password.reset');\n    Route::post('/reset-password', 'UserForgotPasswordController@update')->name('password.update');\n});\n\n\n"], "fixing_code": ["<?php\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default authentication \"guard\" and password\n    | reset options for your application. You may change these defaults\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n    'defaults' => [\n        'guard' => 'web',\n        'passwords' => 'users',\n    ],\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | here which uses session storage and the Eloquent user provider.\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | Supported: \"session\", \"token\"\n    |\n    */\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n        'api' => [\n           // 'driver' => 'passport',\n            'driver' => 'token',\n           // 'driver' => 'passport',\n            'provider' => 'users',\n        ],\n    ],\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | sources which represent each model / table. These sources may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => \\MicroweberPackages\\User\\Models\\User::class,\n        ],\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | Here you may set the options for resetting passwords including the view\n    | that is your password reset e-mail. You may also set the name of the\n    | table that maintains all of the reset tokens for your application.\n    |\n    | You may specify multiple password reset configurations if you have more\n    | than one user table or model in the application and you want to have\n    | separate password reset settings based on the specific user types.\n    |\n    | The expire time is the number of minutes that the reset token should be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    */\n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'table' => 'password_resets',\n            'expire' => 60,\n            'throttle' => 60,\n        ],\n    ],\n];\n", "<?php\n/**\n* Created by PhpStorm.\n * User: Bojidar\n* Date: 10/7/2020\n* Time: 5:50 PM\n*/\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('api/users/export_my_data', function (\\Illuminate\\Http\\Request $request) {\n\n    if (!is_logged()) {\n        return array('error' => 'You must be logged');\n    }\n\n    $userId = (int) $request->all()['user_id'];\n\n    $allowToExport = false;\n    if ($userId == user_id()) {\n        $allowToExport = true;\n    } else if (is_admin()) {\n        $allowToExport = true;\n    }\n\n    if ($allowToExport == false) {\n        return array('error' => 'You are now allowed to export this information.');\n    }\n\n    $exportFromTables = [];\n    $prefix = mw()->database_manager->get_prefix();\n    $tablesList = mw()->database_manager->get_tables_list(true);\n    foreach ($tablesList as $table) {\n        $table = str_replace($prefix, false, $table);\n        $columns  = Schema::getColumnListing($table);\n        if (in_array('created_by', $columns)) {\n            $exportFromTables[] = $table;\n        }\n    }\n\n    $exportData = [];\n    foreach ($exportFromTables as $exportFromTable) {\n        $getData = \\Illuminate\\Support\\Facades\\DB::table($exportFromTable)->where('created_by', $userId)->get();\n        if (!empty($getData)) {\n            $exportData[$exportFromTable] = $getData->toArray();\n        }\n    }\n\n    $json = new \\MicroweberPackages\\Export\\Formats\\JsonExport($exportData);\n    $getJson = $json->start();\n\n    if (isset($getJson['files'][0]['filepath'])) {\n        return response()->download($getJson['files'][0]['filepath'])->deleteFileAfterSend(true);\n    }\n\n})->name('api.users.export_my_data');\n\n// Admin web\nRoute::prefix(ADMIN_PREFIX)->middleware(['admin'])->namespace('\\MicroweberPackages\\User\\Http\\Controllers')->group(function () {\n    Route::get('login', 'UserLoginController@index')->name('admin.login')->middleware(['allowed_ips']);\n});\n\n\n\n// OLD API SAVE USER\nRoute::post('api/save_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_logged()){\n        App::abort(403, 'Unauthorized action.');\n    }\n    $input = Input::all();\n    return save_user($input);\n})->middleware(['api']);\n\nRoute::post('api/delete_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_admin()){\n        App::abort(403, 'Unauthorized action.');\n    }\n    $input = Input::all();\n    return delete_user($input);\n})->middleware(['api']);\n\nRoute::name('api.user.')\n    ->prefix('api/user')\n    ->middleware([\n        'public.api',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers')\n    ->group(function () {\n\n    Route::post('login', 'UserLoginController@login')->name('login')->middleware(['allowed_ips','throttle:60,1']);\n    Route::any('logout', 'UserLoginController@logout')->name('logout');\n    Route::post('register', 'UserRegisterController@register')->name('register')->middleware(['allowed_ips']);\n\n    Route::post('/forgot-password', 'UserForgotPasswordController@send')\n        ->middleware(['throttle:3,1'])\n        ->name('password.email');\n    Route::post('/reset-password', 'UserForgotPasswordController@update')->name('password.update');\n\n    Route::post('/profile-update', 'UserProfileController@update')->name('profile.update');\n\n});\n\nRoute::name('api.')\n    ->prefix('api')\n    ->middleware([\n        'api',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers\\Api')\n    ->group(function () {\n\n        Route::get('/logout', '\\MicroweberPackages\\User\\Http\\Controllers\\UserLogoutController@index')->name('api.logout');\n\n        Route::apiResource('user', 'UserApiController');\n    });\n", "<?php\n/**\n * Created by PhpStorm.\n * User: Bojidar\n * Date: 10/5/2020\n * Time: 1:45 PM\n */\n\nuse Illuminate\\Support\\Facades\\Route;\n\n\n// Public user\n\n// route moved to src/MicroweberPackages/App/routes/web.php  because if bug\n// Route::get('login', '\\MicroweberPackages\\User\\Http\\Controllers\\UserLoginController@loginForm')->name('login');\n\n\nRoute::name('admin.')\n    ->prefix('admin')\n    ->middleware([\n        'admin',\n       // \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers\\Admin')\n    ->group(function () {\n        Route::resource('user', 'UserController',['except' => ['show','edit', 'create']]);\n    });\n\nRoute::namespace('\\MicroweberPackages\\User\\Http\\Controllers')->middleware(['web'])->group(function () {\n\n    Route::get('/logout', 'UserLogoutController@index')->name('logout');\n    Route::post('/logout', 'UserLogoutController@submit')->name('logout.submit');\n\n\n    Route::get('email/verify/{id}/{hash}', 'UserVerifyController@verify')->name('verification.verify')\n        ->middleware([\\MicroweberPackages\\User\\Http\\Middleware\\UserValidateEmailSignature::class]);\n\n    Route::get('email/verify-resend/{id}/{hash}', 'UserVerifyController@showResendForm')->name('verification.resend');\n    Route::post('email/verify-resend/{id}/{hash}', 'UserVerifyController@sendVerifyEmail')->name('verification.send');\n\n    Route::get('/forgot-password', 'UserForgotPasswordController@showForgotForm')->name('password.request');\n    Route::post('/forgot-password', 'UserForgotPasswordController@send')\n        ->middleware(['throttle:3,1'])\n        ->name('password.email');\n\n    Route::get('/reset-password/{token}', 'UserForgotPasswordController@showResetForm')->name('password.reset');\n    Route::post('/reset-password', 'UserForgotPasswordController@update')->name('password.update');\n});\n\n\n"], "filenames": ["config/auth.php", "src/MicroweberPackages/User/routes/api.php", "src/MicroweberPackages/User/routes/web.php"], "buggy_code_start_loc": [93, 103, 43], "buggy_code_end_loc": [93, 104, 44], "fixing_code_start_loc": [94, 103, 43], "fixing_code_end_loc": [95, 106, 46], "type": "CWE-640", "message": "Weak Password Recovery Mechanism for Forgotten Password in GitHub repository microweber/microweber prior to 1.3.", "other": {"cve": {"id": "CVE-2022-0777", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-01T09:15:07.467", "lastModified": "2022-03-09T00:33:58.583", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Weak Password Recovery Mechanism for Forgotten Password in GitHub repository microweber/microweber prior to 1.3."}, {"lang": "es", "value": "Un Mecanismo de Recuperaci\u00f3n de Contrase\u00f1as D\u00e9bil para el Olvido de Contrase\u00f1as en el repositorio de GitHub microweber/microweber versiones anteriores a 1.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-640"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-640"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3", "matchCriteriaId": "CEE7F7A1-F20B-4F8B-A3DE-989A059B7E0E"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/a3944cf9d1d8c41a48297ddc98302934e2511b0f", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b36be8cd-544f-42bd-990d-aa1a46df44d7", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/a3944cf9d1d8c41a48297ddc98302934e2511b0f"}}