{"buggy_code": ["\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , mobconf = require('./routes/mobileconfig')\n  , http = require('http')\n  , path = require('path');\n  \nvar cookieParser = require('cookie-parser')\n\nvar app = express();\n\n// all environments\napp.set('port', process.env.PORT || 3001);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'pug');\n\napp.use(express.urlencoded({extended: true})); \napp.use(cookieParser(process.env.COOKIE_KEY || 'f76210bc2acc4f54af5754e15b0aab05'));\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.raw({\n  'type' : 'application/pkcs7-signature'\n}))\n\napp.get('/', routes.index);\n\napp.post('/enroll', mobconf.enroll);\napp.get('/enrollment', mobconf.enrollment);\n\n\nhttp.createServer(app).listen(app.get('port'), function(){\n  console.log('Express server listening on port ' + app.get('port'));\n});\n", "\n/*\n* GET mobile config\n*/\n\nexports.enrollment = function(req, res){\n    res.set('Content-Type', 'text/html');\n    var url = require('url');\n    var url_parts = url.parse(req.url, true);\n    var query = url_parts.query;\n    \n    var tudid = query.udid;\n    if (tudid) // If it's in the query, store it and redirect (so the user doesn't see the UDID being sent in the URL)\n    {\n        res.cookie('newudid', query.udid, { maxAge: 10 * 60 * 1000});     // Store for 10 minutes\n        res.redirect('/enrollment');\n    }\n    else\n    {\n        var cookie = req.cookies.newudid;\n        if (cookie) {\n            // Found the cookie, let's render it\n            res.render('udid', { udid: cookie, title: 'udid.fyi'});\n        }\n        else {\n            // No cookie, redirect back to home page\n            res.redirect('/');\n        }\n    }\n}\nexports.enroll = function(req, res){\n    var match = req.body.toString().match(/(0000[\\d]{4}-00[A-Fa-f\\d]+)|([a-fA-F\\d]{40})/);\n\n    if (match && match.length > 0) {\n        res.redirect(301,'/enrollment?udid=' + match[0]);\n    }\n    else {\n        res.status(400)\n        res.send('Did not find a valid UDID in the body')\n    }\n};\n"], "fixing_code": ["\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , mobconf = require('./routes/mobileconfig')\n  , http = require('http')\n  , path = require('path');\n  \nvar cookieParser = require('cookie-parser')\n\nvar app = express();\n\n// all environments\napp.set('port', process.env.PORT || 3001);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'pug');\n\napp.use(cookieParser(process.env.COOKIE_KEY || 'f76210bc2acc4f54af5754e15b0aab05'));\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.raw({\n  'type' : 'application/pkcs7-signature'\n}))\n\napp.get('/', routes.index);\n\napp.post('/enroll', mobconf.enroll);\napp.get('/enrollment', mobconf.enrollment);\n\n\nhttp.createServer(app).listen(app.get('port'), function(){\n  console.log('Express server listening on port ' + app.get('port'));\n});\n", "\n/*\n* GET mobile config\n*/\n\nexports.enrollment = function(req, res){\n    res.set('Content-Type', 'text/html');\n    var url = require('url');\n    var url_parts = url.parse(req.url, true);\n    var query = url_parts.query;\n    \n    var tudid = query.udid;\n    if (tudid && extractValidUdid(tudid)) // If it's in the query, store it and redirect (so the user doesn't see the UDID being sent in the URL)\n    {\n        res.cookie('newudid', query.udid, \n        { \n            maxAge: 10 * 60 * 1000,\n            httpOnly: true,\n            secure: process.env.NODE_ENV === 'production'? true: false\n        });\n        res.redirect('/enrollment');\n    }\n    else\n    {\n        var cookie = req.cookies.newudid;\n        if (cookie && extractValidUdid(cookie)) {\n            // Found the cookie, let's render it\n            res.render('udid', { udid: cookie, title: 'udid.fyi'});\n        }\n        else {\n            // No cookie, redirect back to home page\n            res.redirect('/');\n        }\n    }\n}\nexports.enroll = function(req, res){\n    var udid = extractValidUdid(req.body.toString())\n\n    if (udid) {\n        res.redirect(301,'/enrollment?udid=' + udid);\n    }\n    else {\n        res.status(400)\n        res.send('Did not find a valid UDID in the body')\n    }\n};\n\nfunction extractValidUdid (udid) {\n    const match = udid.match(/(0000[\\d]{4}-00[A-Fa-f\\d]+)|([a-fA-F\\d]{40})/);\n\n    if (match && match.length > 0) {\n        return match[0]\n    }\n    else {\n        return null\n    }\n}\n"], "filenames": ["app.js", "routes/mobileconfig.js"], "buggy_code_start_loc": [21, 13], "buggy_code_end_loc": [22, 41], "fixing_code_start_loc": [20, 13], "fixing_code_end_loc": [20, 58], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, has been found in chedabob whatismyudid. Affected by this issue is the function exports.enrollment of the file routes/mobileconfig.js. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is bb33d4325fba80e7ea68b79121dba025caf6f45f. It is recommended to apply a patch to fix this issue. VDB-216470 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2020-36621", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-21T19:15:11.987", "lastModified": "2022-12-28T18:39:41.813", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in chedabob whatismyudid. Affected by this issue is the function exports.enrollment of the file routes/mobileconfig.js. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is bb33d4325fba80e7ea68b79121dba025caf6f45f. It is recommended to apply a patch to fix this issue. VDB-216470 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:whatismyudid_project:whatismyudid:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "2020-09-30", "matchCriteriaId": "8BB42FB6-D028-46C4-97AC-FA73223D46B1"}]}]}], "references": [{"url": "https://github.com/chedabob/whatismyudid/commit/bb33d4325fba80e7ea68b79121dba025caf6f45f", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216470", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/chedabob/whatismyudid/commit/bb33d4325fba80e7ea68b79121dba025caf6f45f"}}