{"buggy_code": ["{% extends \"admin/header.html\" %}\n\n{% load admin_tags i18n lib_tags %}\n\n{% block extra_css %}\n  {{ block.super }}\n  {% extra_static_content \"domains\" \"css\" user %}\n{% endblock %}\n\n{% block leftcol %}\n<ul class=\"nav nav-sidebar\">\n  {% domains_menu \"domains\" user False %}\n</ul>\n\n{% get_extra_admin_content user \"leftcol\" selection %}\n{% endblock %}\n\n{% block apparea %}\n  <h2>{{ object }} {% if not object.enabled %} <small>{% trans \"(disabled)\" %}</small>{% endif %}</h2>\n  <hr>\n\n  <div class=\"col-xs-12 col-sm-6\">\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">{% trans \"Summary\" %}</h3>\n      </div>\n      <table class=\"table\">\n        <tr>\n          <th width=\"40%\">{% trans \"Creation date\" %}</th>\n          <td>{{ domain.creation }}</td>\n        </tr>\n        <tr>\n          <th>{% trans \"Last modification date\" %}</th>\n          <td>{{ domain.last_modification }}</td>\n        </tr>\n        <tr>\n          <th>{% trans \"Domain aliases\" %}</th>\n          <td>{{ domain.domainalias_count }}</td>\n        </tr>\n        <tr>\n          <th><a href=\"{% url 'admin:identity_list' %}#list/?searchquery=@{{ object.name }}&idtfilter=account\">{% trans \"Mailboxes\" %}</a></th>\n          <td>{{ domain.mailbox_count }}</td>\n        </tr>\n        <tr>\n          <th><a href=\"{% url 'admin:identity_list' %}#list/?searchquery=@{{ object.name }}&idtfilter=alias\">{% trans \"Mailbox aliases\" %}</a></th>\n          <td>{{ domain.mbalias_count }}</td>\n        </tr>\n        <tr>\n          <th>{% trans \"Quota\" %}</a></th>\n          <td>{{ domain.quota }} {% trans \"MB\" %}</td>\n        </tr>\n        {% if domain.quota %}\n          <tr>\n            <th>{% trans \"Usage\" %}</a></th>\n            <td>\n              <div class=\"progress\">\n                <div class=\"{% progress_color domain.used_quota_in_percent %}\" style=\"width: {{ domain.used_quota_in_percent }}%\" title=\"{{ domain.used_quota_in_percent }}% ({{ domain.used_quota }} {% trans \"MB\" %}) {% trans 'used' context 'quota' %}\"></div>\n                <div class=\"{% progress_color domain.allocated_quota_in_percent %}\" style=\"width: {{ domain.allocated_quota_in_percent }}%\" title=\"{{ domain.allocated_quota_in_percent }}% ({{ domain.allocated_quota }} {% trans \"MB\" %}) {% trans 'allocated' %}\"></div>\n              </div>\n            </td>\n          </tr>\n        {% endif %}\n        <tr>\n          <th>{% trans \"Default mailbox quota\" %}</a></th>\n          <td>{{ domain.default_mailbox_quota }} {% trans \"MB\" %}</td>\n        </tr>\n        {% if domain.message_limit != None %}\n          <tr>\n            <th>{% trans \"Message sending limit\" %}</a></th>\n            <td>{{ domain.message_limit }} {% trans \"per day\" %}</td>\n          </tr>\n          <tr>\n            <th>{% trans \"Usage\" %}</a></th>\n            <td>\n              <div class=\"progress\">\n                <div class=\"{% progress_color domain.sent_messages_in_percent %}\" style=\"width: {{ domain.sent_messages_in_percent }}%\" title=\"{{ domain.sent_messages_in_percent }}% ({{ domain.sent_messages }}) {% trans 'used' context 'message count' %}\"></div>\n              </div>\n            </td>\n          </tr>\n        {% endif %}\n      </table>\n    </div>\n\n    {% if object.domainalias_set.exists %}\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">{% trans \"Domain aliases\" %}</h3>\n      </div>\n      <table class=\"table\">\n        {% for domainalias in object.domainalias_set.all %}\n          <tr><td>{{ domainalias }}</td></tr>\n        {% endfor %}\n      </table>\n    </div>\n    {% endif %}\n\n    {% for template in templates.left %}\n      {% include template %}\n    {% endfor %}\n  </div>\n\n  <div class=\"col-xs-12 col-sm-6\">\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">\n          {% trans \"DNS\" %}\n          <a href=\"{% url 'dnstools:domain_dns_configuration' domain.pk %}\"\n             data-toggle=\"ajaxmodal\"><span class=\"fa fa-info-circle\"></span></a>\n        </h3>\n      </div>\n      <table class=\"table\">\n        {% if enable_mx_checks or enable_dnsbl_checks %}\n          <tr>\n            <th>{% trans \"Status\" %}</th>\n            <td>\n              {% include \"admin/_domain_dnschecks_status.html\" %}\n            </td>\n          </tr>\n        {% endif %}\n        <tr>\n          <th>{% trans \"DKIM key\" %}</th>\n          <td>\n            {% if domain.dkim_public_key %}\n              <button type=\"button\" class=\"btn btn-primary btn-xs\" data-toggle=\"modal\" data-target=\"#domain_dkim_key\">\n                {% trans \"Show key\" %}\n              </button>\n              <button data-toggle=\"modal\" class=\"btn btn-default btn-xs\" data-target=\"#dkim_regenerate_dialog\"><span class=\"fa fa-refresh\"></span></button>\n              \n              <div class=\"modal fade\" id=\"dkim_regenerate_dialog\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"dkim_regenerate_dialog\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"dkim_regenerate_dialog\">{% trans \"Warning\" %}</h5>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            {% trans \"DKIM keys already exist for this domain. Do you want to overwrite them?\" %}\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">{% trans \"No\" %}</button>\n                            <a id=\"refresh_dkim_key\" class=\"btn btn-danger\" href=\"#\" title=\"{% trans 'Generate new key' %}\" data-dismiss=\"modal\">{% trans \"Yes\" %}</a>\n                        </div>\n                    </div>\n                </div>\n              </div>\n            {% else %}\n              {% trans \"Not generated\" %}\n            {% endif %}\n          </td>\n        </tr>\n      </table>\n    </div>\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\"><h3 class=\"panel-title\">{% trans \"Administrators\" %}</h3></div>\n      <table id=\"domadmins\" class=\"table\">\n        <thead>\n          <tr><th>{% trans \"Username\" %}</th><th>{% trans \"Name\" %}</th><th></th></tr>\n        </thead>\n        <tbody>\n          {% for da in domain.admins %}\n            <tr>\n              <td>{{ da.username }}</td>\n              <td>{{ da.fullname }}</td>\n              <td name=\"actions\">\n                {% if perms.admin.change_domain %}\n                  <a name=\"removeperm\" href=\"{% url 'admin:permission_remove' %}?domid={{ domain.id }}&daid={{ da.id }}\" title=\"{% trans 'Remove this permission' %}\"><span class=\"fa fa-trash\"></span></a>\n                {% endif %}\n              </td>\n            </tr>\n          {% empty %}\n            <tr><td colspan=\"3\">{% trans \"No domain administrator defined yet.\" %}</td></tr>\n          {% endfor %}\n        </tbody>\n      </table>\n    </div>\n\n    {% for template in templates.right %}\n      {% include template %}\n    {% endfor %}\n  </div>\n\n  {% if domain.dkim_public_key %}\n    <div class=\"modal fade\" id=\"domain_dkim_key\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\n      {% include \"admin/_domain_dkim_key.html\" %}\n    </div>\n  {% endif %}\n{% endblock %}\n\n{% block extra_js %}\n  {{ block.super }}\n  <script type=\"text/javascript\">\n  $(document).ready(function () {\n      $('#refresh_dkim_key').click(function (evt) {\n          evt.preventDefault();\n          var $this = $(this);\n          $.ajax({\n              url: '/api/v1/domains/{{ domain.pk }}/',\n              method: 'PATCH',\n              data: {\n                  dkim_public_key: '',\n                  dkim_private_key_path: ''\n              }\n          }).done(function (response) {\n              window.location.reload();\n          });\n      });\n  });\n  function copy(id) {\n    navigator.clipboard.writeText(document.getElementById(id).textContent);\n  }\n  </script>\n{% endblock %}\n", "\"\"\"Identity related views.\"\"\"\n\nfrom reversion import revisions as reversion\n\nfrom django.contrib.auth import mixins as auth_mixins\nfrom django.contrib.auth.decorators import (\n    login_required, permission_required, user_passes_test\n)\nfrom django.shortcuts import render\nfrom django.template.loader import render_to_string\nfrom django.utils.translation import ugettext as _, ungettext\nfrom django.views import generic\nfrom django.views.decorators.csrf import ensure_csrf_cookie\nfrom django.views.decorators.http import require_http_methods\n\nfrom modoboa.core.models import User\nfrom modoboa.lib.exceptions import BadRequest, PermDeniedException\nfrom modoboa.lib.listing import get_listing_page, get_sort_order\nfrom modoboa.lib.web_utils import render_to_json_response\nfrom .. import signals\nfrom ..forms import AccountForm, AccountWizard\nfrom ..lib import get_identities\nfrom ..models import Domain, Mailbox\n\n\n@login_required\n@user_passes_test(\n    lambda u: u.has_perm(\"core.add_user\") or\n    u.has_perm(\"admin.add_alias\")\n)\ndef _identities(request):\n    filters = {\n        fname: request.GET.get(fname, None)\n        for fname in [\"searchquery\", \"idtfilter\", \"grpfilter\"]\n    }\n    request.session[\"identities_filters\"] = filters\n    idents_list = get_identities(request.user, **filters)\n    sort_order, sort_dir = get_sort_order(request.GET, \"identity\",\n                                          [\"identity\", \"name_or_rcpt\", \"tags\"])\n    if sort_order in [\"identity\", \"name_or_rcpt\"]:\n        objects = sorted(idents_list, key=lambda o: getattr(o, sort_order),\n                         reverse=sort_dir == \"-\")\n    else:\n        objects = sorted(idents_list, key=lambda o: o.tags[0][\"label\"],\n                         reverse=sort_dir == \"-\")\n    context = {\n        \"handle_mailboxes\": request.localconfig.parameters.get_value(\n            \"handle_mailboxes\", raise_exception=False)\n    }\n    page = get_listing_page(objects, request.GET.get(\"page\", 1))\n    context[\"headers\"] = render_to_string(\n        \"admin/identity_headers.html\", {}, request)\n    if page is None:\n        context[\"length\"] = 0\n    else:\n        context[\"rows\"] = render_to_string(\n            \"admin/identities_table.html\", {\n                \"identities\": page.object_list\n            }, request\n        )\n        context[\"pages\"] = [page.number]\n    return render_to_json_response(context)\n\n\n@login_required\n@permission_required(\"admin.add_mailbox\")\ndef list_quotas(request):\n    from modoboa.lib.db_utils import db_type\n\n    sort_order, sort_dir = get_sort_order(request.GET, \"address\")\n    mboxes = Mailbox.objects.get_for_admin(\n        request.user, request.GET.get(\"searchquery\", None)\n    )\n    mboxes = mboxes.exclude(quota=0)\n    if sort_order in [\"address\", \"quota\"]:\n        mboxes = mboxes.order_by(\"%s%s\" % (sort_dir, sort_order))\n    elif sort_order in (\"quota_value__bytes\", \"quota_usage\"):\n        db_type = db_type()\n        if db_type == \"mysql\":\n            where = \"CONCAT(admin_mailbox.address,'@',admin_domain.name)\"\n        else:\n            where = \"admin_mailbox.address||'@'||admin_domain.name\"\n        if sort_order == \"quota_value__bytes\":\n            mboxes = mboxes.extra(\n                select={\"quota_value__bytes\": \"admin_quota.bytes\"},\n                where=[\"admin_quota.username=%s\" % where],\n                tables=[\"admin_quota\", \"admin_domain\"],\n                order_by=[\"%s%s\" % (sort_dir, sort_order)]\n            )\n        else:\n            if db_type == \"postgres\":\n                select = (\n                    \"(admin_quota.bytes::float / (CAST(admin_mailbox.quota \"\n                    \"AS BIGINT) * 1048576)) * 100\"\n                )\n            else:\n                select = (\n                    \"(admin_quota.bytes * 1.0 / (admin_mailbox.quota \"\n                    \"* 1048576)) * 100\"\n                )\n            mboxes = mboxes.extra(\n                select={\"quota_usage\": select},\n                where=[\"admin_quota.username=%s\" % where],\n                tables=[\"admin_quota\", \"admin_domain\"],\n                order_by=[\"%s%s\" % (sort_dir, sort_order)]\n            )\n    else:\n        raise BadRequest(_(\"Invalid request\"))\n    page = get_listing_page(mboxes, request.GET.get(\"page\", 1))\n    context = {\n        \"headers\": render_to_string(\n            \"admin/identities_quota_headers.html\", {}, request\n        )\n    }\n    if page is None:\n        context[\"length\"] = 0\n    else:\n        context[\"rows\"] = render_to_string(\n            \"admin/identities_quotas.html\", {\"mboxes\": page}, request\n        )\n        context[\"pages\"] = [page.number]\n    return render_to_json_response(context)\n\n\n@login_required\n@user_passes_test(\n    lambda u: u.has_perm(\"core.add_user\") or\n    u.has_perm(\"admin.add_alias\") or\n    u.has_perm(\"admin.add_mailbox\")\n)\ndef get_next_page(request):\n    \"\"\"Return the next page of the identity list.\"\"\"\n    if request.GET.get(\"objtype\", \"identity\") == \"identity\":\n        return _identities(request)\n    return list_quotas(request)\n\n\n@login_required\n@user_passes_test(\n    lambda u: u.has_perm(\"core.add_user\") or\n    u.has_perm(\"admin.add_alias\")\n)\n@ensure_csrf_cookie\ndef identities(request, tplname=\"admin/identities.html\"):\n    return render(request, tplname, {\n        \"selection\": \"identities\",\n        \"deflocation\": \"list/\"\n    })\n\n\n@login_required\n@permission_required(\"core.add_user\")\ndef accounts_list(request):\n    accs = User.objects.filter(is_superuser=False) \\\n        .exclude(groups__name=\"SimpleUsers\")\n    res = [a.username for a in accs.all()]\n    return render_to_json_response(res)\n\n\n@login_required\n@permission_required(\"core.add_user\")\n@reversion.create_revision()\ndef newaccount(request):\n    \"\"\"Create a new account.\"\"\"\n    return AccountWizard(request).process()\n\n\n@login_required\n@permission_required(\"core.change_user\")\n@reversion.create_revision()\ndef editaccount(request, pk):\n    account = User.objects.get(pk=pk)\n    if not request.user.can_access(account):\n        raise PermDeniedException\n    mb = account.mailbox if hasattr(account, \"mailbox\") else None\n\n    instances = {\n        \"general\": account, \"profile\": account, \"mail\": mb, \"perms\": account\n    }\n    results = signals.get_account_form_instances.send(\n        sender=\"editaccount\", user=request.user, account=account)\n    for result in results:\n        instances.update(result[1])\n    return AccountForm(request, instances=instances).process()\n\n\n@login_required\n@permission_required(\"core.delete_user\")\n@require_http_methods([\"POST\"])\ndef delaccount(request, pk):\n    User.objects.get(pk=pk).delete()\n    return render_to_json_response(\n        ungettext(\"Account deleted\", \"Accounts deleted\", 1)\n    )\n\n\n@login_required\n@permission_required(\"admin.add_domain\")\ndef remove_permission(request):\n    domid = request.GET.get(\"domid\", None)\n    daid = request.GET.get(\"daid\", None)\n    if domid is None or daid is None:\n        raise BadRequest(_(\"Invalid request\"))\n    try:\n        account = User.objects.get(pk=daid)\n        domain = Domain.objects.get(pk=domid)\n    except (User.DoesNotExist, Domain.DoesNotExist):\n        raise BadRequest(_(\"Invalid request\"))\n    if not request.user.can_access(account) or \\\n       not request.user.can_access(domain):\n        raise PermDeniedException\n    domain.remove_admin(account)\n    return render_to_json_response({})\n\n\nclass AccountDetailView(\n        auth_mixins.PermissionRequiredMixin, generic.DetailView):\n    \"\"\"DetailView for Account.\"\"\"\n\n    model = User\n    permission_required = \"core.add_user\"\n    template_name = \"admin/account_detail.html\"\n\n    def has_permission(self):\n        \"\"\"Check object-level access.\"\"\"\n        result = super(AccountDetailView, self).has_permission()\n        if not result:\n            return result\n        return self.request.user.can_access(self.get_object())\n\n    def get_context_data(self, **kwargs):\n        \"\"\"Add information to context.\"\"\"\n        context = super(AccountDetailView, self).get_context_data(**kwargs)\n        del context[\"user\"]\n        result = signals.extra_account_dashboard_widgets.send(\n            self.__class__, user=self.request.user, account=self.object)\n        context[\"templates\"] = {\"left\": [], \"right\": []}\n        for _receiver, widgets in result:\n            for widget in widgets:\n                context[\"templates\"][widget[\"column\"]].append(\n                    widget[\"template\"])\n                context.update(widget[\"context\"])\n        if self.object.role in [\"Resellers\", \"DomainAdmins\"]:\n            context[\"domains\"] = Domain.objects.get_for_admin(self.object)\n        context[\"selection\"] = \"identities\"\n        return context\n"], "fixing_code": ["{% extends \"admin/header.html\" %}\n\n{% load admin_tags i18n lib_tags %}\n\n{% block extra_css %}\n  {{ block.super }}\n  {% extra_static_content \"domains\" \"css\" user %}\n{% endblock %}\n\n{% block leftcol %}\n<ul class=\"nav nav-sidebar\">\n  {% domains_menu \"domains\" user False %}\n</ul>\n\n{% get_extra_admin_content user \"leftcol\" selection %}\n{% endblock %}\n\n{% block apparea %}\n  <h2>{{ object }} {% if not object.enabled %} <small>{% trans \"(disabled)\" %}</small>{% endif %}</h2>\n  <hr>\n\n  <div class=\"col-xs-12 col-sm-6\">\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">{% trans \"Summary\" %}</h3>\n      </div>\n      <table class=\"table\">\n        <tr>\n          <th width=\"40%\">{% trans \"Creation date\" %}</th>\n          <td>{{ domain.creation }}</td>\n        </tr>\n        <tr>\n          <th>{% trans \"Last modification date\" %}</th>\n          <td>{{ domain.last_modification }}</td>\n        </tr>\n        <tr>\n          <th>{% trans \"Domain aliases\" %}</th>\n          <td>{{ domain.domainalias_count }}</td>\n        </tr>\n        <tr>\n          <th><a href=\"{% url 'admin:identity_list' %}#list/?searchquery=@{{ object.name }}&idtfilter=account\">{% trans \"Mailboxes\" %}</a></th>\n          <td>{{ domain.mailbox_count }}</td>\n        </tr>\n        <tr>\n          <th><a href=\"{% url 'admin:identity_list' %}#list/?searchquery=@{{ object.name }}&idtfilter=alias\">{% trans \"Mailbox aliases\" %}</a></th>\n          <td>{{ domain.mbalias_count }}</td>\n        </tr>\n        <tr>\n          <th>{% trans \"Quota\" %}</a></th>\n          <td>{{ domain.quota }} {% trans \"MB\" %}</td>\n        </tr>\n        {% if domain.quota %}\n          <tr>\n            <th>{% trans \"Usage\" %}</a></th>\n            <td>\n              <div class=\"progress\">\n                <div class=\"{% progress_color domain.used_quota_in_percent %}\" style=\"width: {{ domain.used_quota_in_percent }}%\" title=\"{{ domain.used_quota_in_percent }}% ({{ domain.used_quota }} {% trans \"MB\" %}) {% trans 'used' context 'quota' %}\"></div>\n                <div class=\"{% progress_color domain.allocated_quota_in_percent %}\" style=\"width: {{ domain.allocated_quota_in_percent }}%\" title=\"{{ domain.allocated_quota_in_percent }}% ({{ domain.allocated_quota }} {% trans \"MB\" %}) {% trans 'allocated' %}\"></div>\n              </div>\n            </td>\n          </tr>\n        {% endif %}\n        <tr>\n          <th>{% trans \"Default mailbox quota\" %}</a></th>\n          <td>{{ domain.default_mailbox_quota }} {% trans \"MB\" %}</td>\n        </tr>\n        {% if domain.message_limit != None %}\n          <tr>\n            <th>{% trans \"Message sending limit\" %}</a></th>\n            <td>{{ domain.message_limit }} {% trans \"per day\" %}</td>\n          </tr>\n          <tr>\n            <th>{% trans \"Usage\" %}</a></th>\n            <td>\n              <div class=\"progress\">\n                <div class=\"{% progress_color domain.sent_messages_in_percent %}\" style=\"width: {{ domain.sent_messages_in_percent }}%\" title=\"{{ domain.sent_messages_in_percent }}% ({{ domain.sent_messages }}) {% trans 'used' context 'message count' %}\"></div>\n              </div>\n            </td>\n          </tr>\n        {% endif %}\n      </table>\n    </div>\n\n    {% if object.domainalias_set.exists %}\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">{% trans \"Domain aliases\" %}</h3>\n      </div>\n      <table class=\"table\">\n        {% for domainalias in object.domainalias_set.all %}\n          <tr><td>{{ domainalias }}</td></tr>\n        {% endfor %}\n      </table>\n    </div>\n    {% endif %}\n\n    {% for template in templates.left %}\n      {% include template %}\n    {% endfor %}\n  </div>\n\n  <div class=\"col-xs-12 col-sm-6\">\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">\n          {% trans \"DNS\" %}\n          <a href=\"{% url 'dnstools:domain_dns_configuration' domain.pk %}\"\n             data-toggle=\"ajaxmodal\"><span class=\"fa fa-info-circle\"></span></a>\n        </h3>\n      </div>\n      <table class=\"table\">\n        {% if enable_mx_checks or enable_dnsbl_checks %}\n          <tr>\n            <th>{% trans \"Status\" %}</th>\n            <td>\n              {% include \"admin/_domain_dnschecks_status.html\" %}\n            </td>\n          </tr>\n        {% endif %}\n        <tr>\n          <th>{% trans \"DKIM key\" %}</th>\n          <td>\n            {% if domain.dkim_public_key %}\n              <button type=\"button\" class=\"btn btn-primary btn-xs\" data-toggle=\"modal\" data-target=\"#domain_dkim_key\">\n                {% trans \"Show key\" %}\n              </button>\n              <button data-toggle=\"modal\" class=\"btn btn-default btn-xs\" data-target=\"#dkim_regenerate_dialog\"><span class=\"fa fa-refresh\"></span></button>\n\n              <div class=\"modal fade\" id=\"dkim_regenerate_dialog\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"dkim_regenerate_dialog\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"dkim_regenerate_dialog\">{% trans \"Warning\" %}</h5>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            {% trans \"DKIM keys already exist for this domain. Do you want to overwrite them?\" %}\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">{% trans \"No\" %}</button>\n                            <a id=\"refresh_dkim_key\" class=\"btn btn-danger\" href=\"#\" title=\"{% trans 'Generate new key' %}\" data-dismiss=\"modal\">{% trans \"Yes\" %}</a>\n                        </div>\n                    </div>\n                </div>\n              </div>\n            {% else %}\n              {% trans \"Not generated\" %}\n            {% endif %}\n          </td>\n        </tr>\n      </table>\n    </div>\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\"><h3 class=\"panel-title\">{% trans \"Administrators\" %}</h3></div>\n      <table id=\"domadmins\" class=\"table\">\n        <thead>\n          <tr><th>{% trans \"Username\" %}</th><th>{% trans \"Name\" %}</th><th></th></tr>\n        </thead>\n        <tbody>\n          {% for da in domain.admins %}\n            <tr>\n              <td>{{ da.username }}</td>\n              <td>{{ da.fullname }}</td>\n              <td name=\"actions\">\n                {% if perms.admin.change_domain %}\n                  <a name=\"removeperm\" href=\"{% url 'admin:permission_remove' %}?domid={{ domain.id }}&daid={{ da.id }}\" title=\"{% trans 'Remove this permission' %}\"><span class=\"fa fa-trash\"></span></a>\n                {% endif %}\n              </td>\n            </tr>\n          {% empty %}\n            <tr><td colspan=\"3\">{% trans \"No domain administrator defined yet.\" %}</td></tr>\n          {% endfor %}\n        </tbody>\n      </table>\n    </div>\n\n    {% for template in templates.right %}\n      {% include template %}\n    {% endfor %}\n  </div>\n\n  {% if domain.dkim_public_key %}\n    <div class=\"modal fade\" id=\"domain_dkim_key\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\n      {% include \"admin/_domain_dkim_key.html\" %}\n    </div>\n  {% endif %}\n{% endblock %}\n\n{% block extra_js %}\n  {{ block.super }}\n  <script type=\"text/javascript\">\n  $(document).ready(function () {\n      $('#refresh_dkim_key').click(function (evt) {\n          evt.preventDefault();\n          var $this = $(this);\n          $.ajax({\n              url: '/api/v1/domains/{{ domain.pk }}/',\n              method: 'PATCH',\n              data: {\n                  dkim_public_key: '',\n                  dkim_private_key_path: ''\n              }\n          }).done(function (response) {\n              window.location.reload();\n          });\n      });\n      $('a[name=\"removeperm\"]').click(function (evt) {\n          evt.preventDefault();\n          var $this = $(this);\n          $.ajax({\n              url: $this.attr('href'),\n              method: 'DELETE'\n          }).done(function () {\n              window.location.reload();\n          });\n      });\n  });\n  function copy(id) {\n    navigator.clipboard.writeText(document.getElementById(id).textContent);\n  }\n  </script>\n{% endblock %}\n", "\"\"\"Identity related views.\"\"\"\n\nfrom reversion import revisions as reversion\n\nfrom django.contrib.auth import mixins as auth_mixins\nfrom django.contrib.auth.decorators import (\n    login_required, permission_required, user_passes_test\n)\nfrom django.shortcuts import render\nfrom django.template.loader import render_to_string\nfrom django.utils.translation import ugettext as _, ungettext\nfrom django.views import generic\nfrom django.views.decorators.csrf import ensure_csrf_cookie\nfrom django.views.decorators.http import require_http_methods\n\nfrom modoboa.core.models import User\nfrom modoboa.lib.exceptions import BadRequest, PermDeniedException\nfrom modoboa.lib.listing import get_listing_page, get_sort_order\nfrom modoboa.lib.web_utils import render_to_json_response\nfrom .. import signals\nfrom ..forms import AccountForm, AccountWizard\nfrom ..lib import get_identities\nfrom ..models import Domain, Mailbox\n\n\n@login_required\n@user_passes_test(\n    lambda u: u.has_perm(\"core.add_user\") or\n    u.has_perm(\"admin.add_alias\")\n)\ndef _identities(request):\n    filters = {\n        fname: request.GET.get(fname, None)\n        for fname in [\"searchquery\", \"idtfilter\", \"grpfilter\"]\n    }\n    request.session[\"identities_filters\"] = filters\n    idents_list = get_identities(request.user, **filters)\n    sort_order, sort_dir = get_sort_order(request.GET, \"identity\",\n                                          [\"identity\", \"name_or_rcpt\", \"tags\"])\n    if sort_order in [\"identity\", \"name_or_rcpt\"]:\n        objects = sorted(idents_list, key=lambda o: getattr(o, sort_order),\n                         reverse=sort_dir == \"-\")\n    else:\n        objects = sorted(idents_list, key=lambda o: o.tags[0][\"label\"],\n                         reverse=sort_dir == \"-\")\n    context = {\n        \"handle_mailboxes\": request.localconfig.parameters.get_value(\n            \"handle_mailboxes\", raise_exception=False)\n    }\n    page = get_listing_page(objects, request.GET.get(\"page\", 1))\n    context[\"headers\"] = render_to_string(\n        \"admin/identity_headers.html\", {}, request)\n    if page is None:\n        context[\"length\"] = 0\n    else:\n        context[\"rows\"] = render_to_string(\n            \"admin/identities_table.html\", {\n                \"identities\": page.object_list\n            }, request\n        )\n        context[\"pages\"] = [page.number]\n    return render_to_json_response(context)\n\n\n@login_required\n@permission_required(\"admin.add_mailbox\")\ndef list_quotas(request):\n    from modoboa.lib.db_utils import db_type\n\n    sort_order, sort_dir = get_sort_order(request.GET, \"address\")\n    mboxes = Mailbox.objects.get_for_admin(\n        request.user, request.GET.get(\"searchquery\", None)\n    )\n    mboxes = mboxes.exclude(quota=0)\n    if sort_order in [\"address\", \"quota\"]:\n        mboxes = mboxes.order_by(\"%s%s\" % (sort_dir, sort_order))\n    elif sort_order in (\"quota_value__bytes\", \"quota_usage\"):\n        db_type = db_type()\n        if db_type == \"mysql\":\n            where = \"CONCAT(admin_mailbox.address,'@',admin_domain.name)\"\n        else:\n            where = \"admin_mailbox.address||'@'||admin_domain.name\"\n        if sort_order == \"quota_value__bytes\":\n            mboxes = mboxes.extra(\n                select={\"quota_value__bytes\": \"admin_quota.bytes\"},\n                where=[\"admin_quota.username=%s\" % where],\n                tables=[\"admin_quota\", \"admin_domain\"],\n                order_by=[\"%s%s\" % (sort_dir, sort_order)]\n            )\n        else:\n            if db_type == \"postgres\":\n                select = (\n                    \"(admin_quota.bytes::float / (CAST(admin_mailbox.quota \"\n                    \"AS BIGINT) * 1048576)) * 100\"\n                )\n            else:\n                select = (\n                    \"(admin_quota.bytes * 1.0 / (admin_mailbox.quota \"\n                    \"* 1048576)) * 100\"\n                )\n            mboxes = mboxes.extra(\n                select={\"quota_usage\": select},\n                where=[\"admin_quota.username=%s\" % where],\n                tables=[\"admin_quota\", \"admin_domain\"],\n                order_by=[\"%s%s\" % (sort_dir, sort_order)]\n            )\n    else:\n        raise BadRequest(_(\"Invalid request\"))\n    page = get_listing_page(mboxes, request.GET.get(\"page\", 1))\n    context = {\n        \"headers\": render_to_string(\n            \"admin/identities_quota_headers.html\", {}, request\n        )\n    }\n    if page is None:\n        context[\"length\"] = 0\n    else:\n        context[\"rows\"] = render_to_string(\n            \"admin/identities_quotas.html\", {\"mboxes\": page}, request\n        )\n        context[\"pages\"] = [page.number]\n    return render_to_json_response(context)\n\n\n@login_required\n@user_passes_test(\n    lambda u: u.has_perm(\"core.add_user\") or\n    u.has_perm(\"admin.add_alias\") or\n    u.has_perm(\"admin.add_mailbox\")\n)\ndef get_next_page(request):\n    \"\"\"Return the next page of the identity list.\"\"\"\n    if request.GET.get(\"objtype\", \"identity\") == \"identity\":\n        return _identities(request)\n    return list_quotas(request)\n\n\n@login_required\n@user_passes_test(\n    lambda u: u.has_perm(\"core.add_user\") or\n    u.has_perm(\"admin.add_alias\")\n)\n@ensure_csrf_cookie\ndef identities(request, tplname=\"admin/identities.html\"):\n    return render(request, tplname, {\n        \"selection\": \"identities\",\n        \"deflocation\": \"list/\"\n    })\n\n\n@login_required\n@permission_required(\"core.add_user\")\ndef accounts_list(request):\n    accs = User.objects.filter(is_superuser=False) \\\n        .exclude(groups__name=\"SimpleUsers\")\n    res = [a.username for a in accs.all()]\n    return render_to_json_response(res)\n\n\n@login_required\n@permission_required(\"core.add_user\")\n@reversion.create_revision()\ndef newaccount(request):\n    \"\"\"Create a new account.\"\"\"\n    return AccountWizard(request).process()\n\n\n@login_required\n@permission_required(\"core.change_user\")\n@reversion.create_revision()\ndef editaccount(request, pk):\n    account = User.objects.get(pk=pk)\n    if not request.user.can_access(account):\n        raise PermDeniedException\n    mb = account.mailbox if hasattr(account, \"mailbox\") else None\n\n    instances = {\n        \"general\": account, \"profile\": account, \"mail\": mb, \"perms\": account\n    }\n    results = signals.get_account_form_instances.send(\n        sender=\"editaccount\", user=request.user, account=account)\n    for result in results:\n        instances.update(result[1])\n    return AccountForm(request, instances=instances).process()\n\n\n@login_required\n@permission_required(\"core.delete_user\")\n@require_http_methods([\"POST\"])\ndef delaccount(request, pk):\n    User.objects.get(pk=pk).delete()\n    return render_to_json_response(\n        ungettext(\"Account deleted\", \"Accounts deleted\", 1)\n    )\n\n\n@login_required\n@permission_required(\"admin.add_domain\")\n@require_http_methods([\"DELETE\"])\ndef remove_permission(request):\n    domid = request.GET.get(\"domid\", None)\n    daid = request.GET.get(\"daid\", None)\n    if domid is None or daid is None:\n        raise BadRequest(_(\"Invalid request\"))\n    try:\n        account = User.objects.get(pk=daid)\n        domain = Domain.objects.get(pk=domid)\n    except (User.DoesNotExist, Domain.DoesNotExist):\n        raise BadRequest(_(\"Invalid request\"))\n    if not request.user.can_access(account) or \\\n       not request.user.can_access(domain):\n        raise PermDeniedException\n    domain.remove_admin(account)\n    return render_to_json_response({})\n\n\nclass AccountDetailView(\n        auth_mixins.PermissionRequiredMixin, generic.DetailView):\n    \"\"\"DetailView for Account.\"\"\"\n\n    model = User\n    permission_required = \"core.add_user\"\n    template_name = \"admin/account_detail.html\"\n\n    def has_permission(self):\n        \"\"\"Check object-level access.\"\"\"\n        result = super(AccountDetailView, self).has_permission()\n        if not result:\n            return result\n        return self.request.user.can_access(self.get_object())\n\n    def get_context_data(self, **kwargs):\n        \"\"\"Add information to context.\"\"\"\n        context = super(AccountDetailView, self).get_context_data(**kwargs)\n        del context[\"user\"]\n        result = signals.extra_account_dashboard_widgets.send(\n            self.__class__, user=self.request.user, account=self.object)\n        context[\"templates\"] = {\"left\": [], \"right\": []}\n        for _receiver, widgets in result:\n            for widget in widgets:\n                context[\"templates\"][widget[\"column\"]].append(\n                    widget[\"template\"])\n                context.update(widget[\"context\"])\n        if self.object.role in [\"Resellers\", \"DomainAdmins\"]:\n            context[\"domains\"] = Domain.objects.get_for_admin(self.object)\n        context[\"selection\"] = \"identities\"\n        return context\n"], "filenames": ["modoboa/admin/templates/admin/domain_detail.html", "modoboa/admin/views/identity.py"], "buggy_code_start_loc": [128, 198], "buggy_code_end_loc": [208, 198], "fixing_code_start_loc": [128, 199], "fixing_code_end_loc": [219, 200], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository modoboa/modoboa prior to 2.0.4.", "other": {"cve": {"id": "CVE-2023-0438", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-23T14:15:11.627", "lastModified": "2023-01-30T15:28:00.537", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository modoboa/modoboa prior to 2.0.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:modoboa:modoboa:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.4", "matchCriteriaId": "A58F3CCF-F999-4884-B796-9A0099D091C5"}]}]}], "references": [{"url": "https://github.com/modoboa/modoboa/commit/38d778cc71e370216e067d054ce0169ad83078c8", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/07a5b61b-306d-47c4-8ff0-06c540c7dfb3", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/modoboa/modoboa/commit/38d778cc71e370216e067d054ce0169ad83078c8"}}