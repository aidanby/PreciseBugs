{"buggy_code": ["<?php\nrequire_once __DIR__ . DIRECTORY_SEPARATOR . 'autoload.php';\n\nheader('Access-Control-Allow-Origin: *');\nheader(\"Access-Control-Allow-Headers: Content-Type\");\nglobal $global, $config;\nif (!isset($global['systemRootPath'])) {\n    require_once '../videos/configuration.php';\n}\nrequire_once $global['systemRootPath'] . 'objects/functions.php';\n\n$timeLog = __FILE__ . \"::Login \";\nTimeLogStart($timeLog);\n\n// gettig the mobile submited value\n$inputJSON = url_get_contents('php://input');\n$input = _json_decode($inputJSON, true); //convert JSON into array\nif (!empty($input)) {\n    foreach ($input as $key => $value) {\n        $_POST[$key] = $value;\n    }\n}\n\nTimeLogEnd($timeLog, __LINE__);\n\nrequire_once $global['systemRootPath'] . 'videos/configuration.php';\nrequire_once $global['systemRootPath'] . 'objects/user.php';\nrequire_once $global['systemRootPath'] . 'objects/category.php';\n\nCategory::clearCacheCount();\nTimeLogEnd($timeLog, __LINE__);\n\nif (!preg_match(\"|^\" . $global['webSiteRootURL'] . \"|\", $_POST['redirectUri'])) {\n    $_POST['redirectUri'] = $global['webSiteRootURL'];\n}\n_error_log(\"Start Login Request redirectUri=\" . $_POST['redirectUri']);\n\nuse Hybridauth\\Hybridauth;\nuse Hybridauth\\HttpClient;\n\nTimeLogEnd($timeLog, __LINE__);\nif (!empty($_GET['type'])) {\n    if (!empty($_GET['redirectUri'])) {\n        _session_start();\n        $_SESSION['redirectUri'] = getRedirectUri();\n    }\n    if ($_GET['type'] === \"Apple\") {\n        $obj = AVideoPlugin::getDataObjectIfEnabled('LoginApple');\n        if (empty($obj)) {\n            die('Apple Login is disabled');\n        }\n        $config = [\n            'callback' => HttpClient\\Util::getCurrentUrl() . \"?type={$_GET['type']}\",\n            'providers' => [\n                $_GET['type'] => [\n                    \"enabled\" => true,\n                    \"keys\" => [\n                        \"id\" => trim($obj->id),\n                        \"team_id\" => trim($obj->team_id),\n                        \"key_id\" => trim($obj->key_id),\n                        \"key_content\" => trim($obj->key_content->value),\n                    ],\n                    \"scope\" => \"name email\",\n                    \"verifyTokenSignature\" => true,\n                ],\n            ],\n                /* optional : set debug mode\n                  'debug_mode' => true,\n                  // Path to file writable by the web server. Required if 'debug_mode' is not false\n                  'debug_file' => __FILE__ . '.log', */\n        ];\n    } else {\n        $login = AVideoPlugin::getLogin();\n        foreach ($login as $value) {\n            if(!is_object($value['loginObject'])){\n                _error_log('Error on getLogin: '. json_encode($value), AVideoLog::$ERROR);\n                continue;\n            }\n            $obj = $value['loginObject']->getDataObject();\n            if ($value['parameters']->type === $_GET['type']) {\n                $id = $obj->id;\n                $key = $obj->key;\n                break;\n            }\n        }\n        if (empty($id)) {\n            die(sprintf(__(\"%s ERROR: You must set an ID on config\"), $_GET['type']));\n        }\n\n        if (empty($key)) {\n            die(sprintf(__(\"%s ERROR: You must set a KEY on config\"), $_GET['type']));\n        }\n        $scope = 'email';\n        if ($_GET['type'] === \"Yahoo\") {\n            $scope = 'sdpp-w';\n        }\n        if ($_GET['type'] === 'LinkedIn') {\n            $scope = (\"r_liteprofile r_emailaddress w_member_social\");\n        }\n\n        $config = [\n            'callback' => HttpClient\\Util::getCurrentUrl() . \"?type={$_GET['type']}\",\n            'providers' => [\n                $_GET['type'] => [\n                    'enabled' => true,\n                    'keys' => ['id' => $id, 'secret' => $key, 'key' => $id],\n                    \"includeEmail\" => true,\n                    'scope' => $scope,\n                    'trustForwarded' => false,\n                ],\n            ],\n                /* optional : set debug mode\n                  'debug_mode' => true,\n                  // Path to file writeable by the web server. Required if 'debug_mode' is not false\n                  'debug_file' => __FILE__ . '.log', */\n        ];\n    }\n    try {\n        $hybridauth = new Hybridauth($config);\n\n        $adapter = $hybridauth->authenticate($_GET['type']);\n\n        $tokens = $adapter->getAccessToken();\n        $userProfile = $adapter->getUserProfile();\n\n        //print_r($tokens);\n        //print_r($userProfile);\n        if (!empty($userProfile->email)) {\n            $user = $userProfile->email;\n        } else {\n            $user = $userProfile->displayName;\n        }\n        $name = $userProfile->displayName;\n        $photoURL = $userProfile->photoURL;\n        $email = $userProfile->email;\n        $pass = rand();\n        //createUserIfNotExists($user, $pass, $name, $email, $photoURL, $isAdmin = false, $emailVerified = false);\n        User::createUserIfNotExists($user, $pass, $name, $email, $photoURL, false, true);\n        $userObject = new User(0, $user, $pass);\n        $userObject->login(true);\n        $adapter->disconnect();\n\n        if (!empty($_SESSION['redirectUri'])) {\n            _session_start();\n            $location = $_SESSION['redirectUri'];\n            //header(\"Location: {$_SESSION['redirectUri']}\");\n            $_SESSION['redirectUri'] = '';\n            unset($_SESSION['redirectUri']);\n        } else {\n            $location = $global['webSiteRootURL'];\n            //header(\"Location: {$global['webSiteRootURL']}\");\n        }\n    } catch (\\Exception $e) {\n        $location = \"{$global['webSiteRootURL']}user?error=\" . urlencode($e->getMessage());\n        //header(\"Location: {$global['webSiteRootURL']}user?error=\" . urlencode($e->getMessage()));\n        //echo $e->getMessage();\n    }\n    if (!isSameDomainAsMyAVideo($location)) {\n        $location = $global['webSiteRootURL'];\n    }\n    header('Content-Type: text/html'); ?>\n    <script>\n        window.opener = self;\n        if (window.name == 'loginYPT') {\n            window.close();\n        } else {\n            document.location = \"<?php echo $location; ?>\";\n        }\n    </script>\n    <?php\n    return;\n}\n\nheader('Content-Type: application/json');\nTimeLogEnd($timeLog, __LINE__);\n$object = new stdClass();\nif (!empty($_GET['user'])) {\n    $_POST['user'] = $_GET['user'];\n}\nif (!empty($_GET['pass'])) {\n    $_POST['pass'] = $_GET['pass'];\n}\nif (!empty($_GET['encodedPass'])) {\n    $_POST['encodedPass'] = $_GET['encodedPass'];\n}\nif (empty($_POST['user']) || empty($_POST['pass'])) {\n    _error_log(\"User or pass empty on login POST: \" . json_encode($_POST));\n    _error_log(\"User or pass empty on login GET: \" . json_encode($_GET));\n    _error_log(\"User or pass empty on login Request: \" . json_encode($_REQUEST));\n    $inputJSON = file_get_contents('php://input');\n    _error_log(\"User or pass empty on login php://input: \" . ($inputJSON));\n    $object->error = __(\"User and Password can not be blank\");\n    die(json_encode($object));\n}\n$user = new User(0, $_POST['user'], $_POST['pass']);\n\n_error_log(\"login.json.php trying to login\");\n$resp = $user->login(false, @$_POST['encodedPass']);\n_error_log(\"login.json.php login respond something\");\nTimeLogEnd($timeLog, __LINE__);\n$object->isCaptchaNeed = User::isCaptchaNeed();\nif ($resp === User::USER_NOT_VERIFIED) {\n    _error_log(\"login.json.php User not verified\");\n    $object->error = __(\"Please verify your email address\");\n    die(json_encode($object));\n}\n\nif ($resp === User::CAPTCHA_ERROR) {\n    _error_log(\"login.json.php invalid captcha\");\n    $object->error = __(\"Invalid Captcha\");\n    die(json_encode($object));\n}\n\nif ($resp === User::REQUIRE2FA) {\n    _error_log(\"login.json.php 2fa login is required\");\n    $object->error = __(\"2FA login is required\");\n    die(json_encode($object));\n}\n\n//_error_log(\"login.json.php setup object\");\n$object->siteLogo = $global['webSiteRootURL'] . $config->getLogo();\n$object->id = User::getId();\n$object->user = User::getUserName();\n$object->donationLink = User::donationLink();\n$object->name = User::getName();\n//_error_log(\"login.json.php get name identification\");\n$object->nameIdentification = User::getNameIdentification();\n$object->pass = User::getUserPass();\n$object->email = User::getMail();\n//_error_log(\"login.json.php get channel name\");\n$object->channelName = User::_getChannelName($object->id);\n$object->photo = User::getPhoto();\n$object->backgroundURL = User::getBackground($object->id);\n$object->isLogged = User::isLogged();\n$object->isAdmin = User::isAdmin();\n$object->canUpload = User::canUpload();\n$object->canComment = User::canComment();\n$object->canMeet = AVideoPlugin::isEnabledByName('Meet');\n$object->canCreateCategory = Category::canCreateCategory();\n$object->theme = getCurrentTheme();\n$object->canStream = User::canStream();\n$object->redirectUri = @$_POST['redirectUri'];\n$object->embedChatUrl = '';\n$object->embedChatUrlMobile = '';\nif (AVideoPlugin::isEnabledByName('Chat2') && method_exists('Chat2', 'getChatRoomLink')) {\n    $object->embedChatUrl = Chat2::getChatRoomLink(User::getId(), 1, 1, 0, true);\n    $object->embedChatUrlMobile = addQueryStringParameter($object->embedChatUrl, 'mobileMode', 1);\n    $object->embedChatUrlMobile = addQueryStringParameter($object->embedChatUrlMobile, 'user', $object->user);\n    $object->embedChatUrlMobile = addQueryStringParameter($object->embedChatUrlMobile, 'pass', $object->pass);\n}\n//_error_log(\"login.json.php setup object done\");\n\nif ((empty($object->redirectUri) || $object->redirectUri === $global['webSiteRootURL'])) {\n    if (!empty($advancedCustomUser->afterLoginGoToMyChannel)) {\n        $object->redirectUri = User::getChannelLink();\n    } elseif (!empty($advancedCustomUser->afterLoginGoToURL)) {\n        $object->redirectUri = $advancedCustomUser->afterLoginGoToURL;\n    }\n}\n\nif (empty($advancedCustomUser->userCanNotChangeCategory) || User::isAdmin()) {\n    //_error_log(\"login.json.php get categories\");\n    $object->categories = Category::getAllCategories(true);\n    if (is_array($object->categories)) {\n        array_multisort(array_column($object->categories, 'hierarchyAndName'), SORT_ASC, $object->categories);\n    }\n} else {\n    $object->categories = [];\n}\n//_error_log(\"login.json.php get user groups\");\nTimeLogEnd($timeLog, __LINE__);\n$object->userGroups = UserGroups::getAllUsersGroups();\nTimeLogEnd($timeLog, __LINE__);\n$object->streamServerURL = '';\n$object->streamKey = '';\nif ($object->isLogged) {\n    $timeLog2 = __FILE__ . \"::Is Logged \";\n    TimeLogStart($timeLog2);\n\n    //_error_log(\"login.json.php get Live\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"Live\");\n    if (!empty($p)) {\n        require_once $global['systemRootPath'] . 'plugin/Live/Objects/LiveTransmition.php';\n        $trasnmition = LiveTransmition::createTransmitionIfNeed(User::getId());\n        if (!empty($trasnmition)) {\n            $object->streamServerURL = $p->getServer() . \"?p=\" . User::getUserPass();\n            $object->streamKey = $trasnmition['key'];\n        } else {\n            _error_log('login.json.php transmissionKey is empty [' . User::getId() . ']');\n        }\n    } else {\n        _error_log('login.json.php live plugin is disabled');\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get MobileManager\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"MobileManager\");\n    if (!empty($p)) {\n        $object->streamer = _json_decode(url_get_contents($global['webSiteRootURL'] . \"objects/status.json.php\"));\n        $object->plugin = $p->getDataObject();\n        $object->encoder = $config->getEncoderURL();\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get VideoHLS\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"VideoHLS\");\n    if (!empty($p)) {\n        $object->videoHLS = true;\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get Subscriptions\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"Subscription\");\n    if (!empty($p)) {\n        $object->Subscription = Subscription::getAllFromUser($object->id);\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get PayPerView\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"PayPerView\");\n    if (!empty($p) && class_exists('PayPerView')) {\n        $object->PayPerView = PayPerView::getAllPPVFromUser($object->id);\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n} else {\n    _error_log('login.json.php is not logged');\n}\n\n$object->PHPSESSID = session_id();\n\nTimeLogEnd($timeLog, __LINE__);\n//_error_log(\"login.json.php almost complete\");\n$json = _json_encode($object);\n//_error_log(\"login.json.php complete\");\n//header(\"Content-length: \" . strlen($json));\n_error_log('login.json.php is done');\necho $json;\nexit;"], "fixing_code": ["<?php\nrequire_once __DIR__ . DIRECTORY_SEPARATOR . 'autoload.php';\n\nheader('Access-Control-Allow-Origin: *');\nheader(\"Access-Control-Allow-Headers: Content-Type\");\nglobal $global, $config;\nif (!isset($global['systemRootPath'])) {\n    require_once '../videos/configuration.php';\n}\nrequire_once $global['systemRootPath'] . 'objects/functions.php';\n\n$timeLog = __FILE__ . \"::Login \";\nTimeLogStart($timeLog);\n\n// gettig the mobile submited value\n$inputJSON = url_get_contents('php://input');\n$input = _json_decode($inputJSON, true); //convert JSON into array\nif (!empty($input)) {\n    foreach ($input as $key => $value) {\n        $_POST[$key] = $value;\n    }\n}\n\nTimeLogEnd($timeLog, __LINE__);\n\nrequire_once $global['systemRootPath'] . 'videos/configuration.php';\nrequire_once $global['systemRootPath'] . 'objects/user.php';\nrequire_once $global['systemRootPath'] . 'objects/category.php';\n\nCategory::clearCacheCount();\nTimeLogEnd($timeLog, __LINE__);\n\nif(!isSameDomain($global['webSiteRootURL'], $_POST['redirectUri'])){\n    $_POST['redirectUri'] = $global['webSiteRootURL'];\n}\n_error_log(\"Start Login Request redirectUri=\" . $_POST['redirectUri']);\n\nuse Hybridauth\\Hybridauth;\nuse Hybridauth\\HttpClient;\n\nTimeLogEnd($timeLog, __LINE__);\nif (!empty($_GET['type'])) {\n    if (!empty($_GET['redirectUri'])) {\n        _session_start();\n        $_SESSION['redirectUri'] = getRedirectUri();\n    }\n    if ($_GET['type'] === \"Apple\") {\n        $obj = AVideoPlugin::getDataObjectIfEnabled('LoginApple');\n        if (empty($obj)) {\n            die('Apple Login is disabled');\n        }\n        $config = [\n            'callback' => HttpClient\\Util::getCurrentUrl() . \"?type={$_GET['type']}\",\n            'providers' => [\n                $_GET['type'] => [\n                    \"enabled\" => true,\n                    \"keys\" => [\n                        \"id\" => trim($obj->id),\n                        \"team_id\" => trim($obj->team_id),\n                        \"key_id\" => trim($obj->key_id),\n                        \"key_content\" => trim($obj->key_content->value),\n                    ],\n                    \"scope\" => \"name email\",\n                    \"verifyTokenSignature\" => true,\n                ],\n            ],\n                /* optional : set debug mode\n                  'debug_mode' => true,\n                  // Path to file writable by the web server. Required if 'debug_mode' is not false\n                  'debug_file' => __FILE__ . '.log', */\n        ];\n    } else {\n        $login = AVideoPlugin::getLogin();\n        foreach ($login as $value) {\n            if(!is_object($value['loginObject'])){\n                _error_log('Error on getLogin: '. json_encode($value), AVideoLog::$ERROR);\n                continue;\n            }\n            $obj = $value['loginObject']->getDataObject();\n            if ($value['parameters']->type === $_GET['type']) {\n                $id = $obj->id;\n                $key = $obj->key;\n                break;\n            }\n        }\n        if (empty($id)) {\n            die(sprintf(__(\"%s ERROR: You must set an ID on config\"), $_GET['type']));\n        }\n\n        if (empty($key)) {\n            die(sprintf(__(\"%s ERROR: You must set a KEY on config\"), $_GET['type']));\n        }\n        $scope = 'email';\n        if ($_GET['type'] === \"Yahoo\") {\n            $scope = 'sdpp-w';\n        }\n        if ($_GET['type'] === 'LinkedIn') {\n            $scope = (\"r_liteprofile r_emailaddress w_member_social\");\n        }\n\n        $config = [\n            'callback' => HttpClient\\Util::getCurrentUrl() . \"?type={$_GET['type']}\",\n            'providers' => [\n                $_GET['type'] => [\n                    'enabled' => true,\n                    'keys' => ['id' => $id, 'secret' => $key, 'key' => $id],\n                    \"includeEmail\" => true,\n                    'scope' => $scope,\n                    'trustForwarded' => false,\n                ],\n            ],\n                /* optional : set debug mode\n                  'debug_mode' => true,\n                  // Path to file writeable by the web server. Required if 'debug_mode' is not false\n                  'debug_file' => __FILE__ . '.log', */\n        ];\n    }\n    try {\n        $hybridauth = new Hybridauth($config);\n\n        $adapter = $hybridauth->authenticate($_GET['type']);\n\n        $tokens = $adapter->getAccessToken();\n        $userProfile = $adapter->getUserProfile();\n\n        //print_r($tokens);\n        //print_r($userProfile);\n        if (!empty($userProfile->email)) {\n            $user = $userProfile->email;\n        } else {\n            $user = $userProfile->displayName;\n        }\n        $name = $userProfile->displayName;\n        $photoURL = $userProfile->photoURL;\n        $email = $userProfile->email;\n        $pass = rand();\n        //createUserIfNotExists($user, $pass, $name, $email, $photoURL, $isAdmin = false, $emailVerified = false);\n        User::createUserIfNotExists($user, $pass, $name, $email, $photoURL, false, true);\n        $userObject = new User(0, $user, $pass);\n        $userObject->login(true);\n        $adapter->disconnect();\n\n        if (!empty($_SESSION['redirectUri'])) {\n            _session_start();\n            $location = $_SESSION['redirectUri'];\n            //header(\"Location: {$_SESSION['redirectUri']}\");\n            $_SESSION['redirectUri'] = '';\n            unset($_SESSION['redirectUri']);\n        } else {\n            $location = $global['webSiteRootURL'];\n            //header(\"Location: {$global['webSiteRootURL']}\");\n        }\n    } catch (\\Exception $e) {\n        $location = \"{$global['webSiteRootURL']}user?error=\" . urlencode($e->getMessage());\n        //header(\"Location: {$global['webSiteRootURL']}user?error=\" . urlencode($e->getMessage()));\n        //echo $e->getMessage();\n    }\n    if (!isSameDomainAsMyAVideo($location)) {\n        $location = $global['webSiteRootURL'];\n    }\n    header('Content-Type: text/html'); ?>\n    <script>\n        window.opener = self;\n        if (window.name == 'loginYPT') {\n            window.close();\n        } else {\n            document.location = \"<?php echo $location; ?>\";\n        }\n    </script>\n    <?php\n    return;\n}\n\nheader('Content-Type: application/json');\nTimeLogEnd($timeLog, __LINE__);\n$object = new stdClass();\nif (!empty($_GET['user'])) {\n    $_POST['user'] = $_GET['user'];\n}\nif (!empty($_GET['pass'])) {\n    $_POST['pass'] = $_GET['pass'];\n}\nif (!empty($_GET['encodedPass'])) {\n    $_POST['encodedPass'] = $_GET['encodedPass'];\n}\nif (empty($_POST['user']) || empty($_POST['pass'])) {\n    _error_log(\"User or pass empty on login POST: \" . json_encode($_POST));\n    _error_log(\"User or pass empty on login GET: \" . json_encode($_GET));\n    _error_log(\"User or pass empty on login Request: \" . json_encode($_REQUEST));\n    $inputJSON = file_get_contents('php://input');\n    _error_log(\"User or pass empty on login php://input: \" . ($inputJSON));\n    $object->error = __(\"User and Password can not be blank\");\n    die(json_encode($object));\n}\n$user = new User(0, $_POST['user'], $_POST['pass']);\n\n_error_log(\"login.json.php trying to login\");\n$resp = $user->login(false, @$_POST['encodedPass']);\n_error_log(\"login.json.php login respond something\");\nTimeLogEnd($timeLog, __LINE__);\n$object->isCaptchaNeed = User::isCaptchaNeed();\nif ($resp === User::USER_NOT_VERIFIED) {\n    _error_log(\"login.json.php User not verified\");\n    $object->error = __(\"Please verify your email address\");\n    die(json_encode($object));\n}\n\nif ($resp === User::CAPTCHA_ERROR) {\n    _error_log(\"login.json.php invalid captcha\");\n    $object->error = __(\"Invalid Captcha\");\n    die(json_encode($object));\n}\n\nif ($resp === User::REQUIRE2FA) {\n    _error_log(\"login.json.php 2fa login is required\");\n    $object->error = __(\"2FA login is required\");\n    die(json_encode($object));\n}\n\n//_error_log(\"login.json.php setup object\");\n$object->siteLogo = $global['webSiteRootURL'] . $config->getLogo();\n$object->id = User::getId();\n$object->user = User::getUserName();\n$object->donationLink = User::donationLink();\n$object->name = User::getName();\n//_error_log(\"login.json.php get name identification\");\n$object->nameIdentification = User::getNameIdentification();\n$object->pass = User::getUserPass();\n$object->email = User::getMail();\n//_error_log(\"login.json.php get channel name\");\n$object->channelName = User::_getChannelName($object->id);\n$object->photo = User::getPhoto();\n$object->backgroundURL = User::getBackground($object->id);\n$object->isLogged = User::isLogged();\n$object->isAdmin = User::isAdmin();\n$object->canUpload = User::canUpload();\n$object->canComment = User::canComment();\n$object->canMeet = AVideoPlugin::isEnabledByName('Meet');\n$object->canCreateCategory = Category::canCreateCategory();\n$object->theme = getCurrentTheme();\n$object->canStream = User::canStream();\n$object->redirectUri = @$_POST['redirectUri'];\n$object->embedChatUrl = '';\n$object->embedChatUrlMobile = '';\nif (AVideoPlugin::isEnabledByName('Chat2') && method_exists('Chat2', 'getChatRoomLink')) {\n    $object->embedChatUrl = Chat2::getChatRoomLink(User::getId(), 1, 1, 0, true);\n    $object->embedChatUrlMobile = addQueryStringParameter($object->embedChatUrl, 'mobileMode', 1);\n    $object->embedChatUrlMobile = addQueryStringParameter($object->embedChatUrlMobile, 'user', $object->user);\n    $object->embedChatUrlMobile = addQueryStringParameter($object->embedChatUrlMobile, 'pass', $object->pass);\n}\n//_error_log(\"login.json.php setup object done\");\n\nif ((empty($object->redirectUri) || $object->redirectUri === $global['webSiteRootURL'])) {\n    if (!empty($advancedCustomUser->afterLoginGoToMyChannel)) {\n        $object->redirectUri = User::getChannelLink();\n    } elseif (!empty($advancedCustomUser->afterLoginGoToURL)) {\n        $object->redirectUri = $advancedCustomUser->afterLoginGoToURL;\n    }\n}\n\nif (empty($advancedCustomUser->userCanNotChangeCategory) || User::isAdmin()) {\n    //_error_log(\"login.json.php get categories\");\n    $object->categories = Category::getAllCategories(true);\n    if (is_array($object->categories)) {\n        array_multisort(array_column($object->categories, 'hierarchyAndName'), SORT_ASC, $object->categories);\n    }\n} else {\n    $object->categories = [];\n}\n//_error_log(\"login.json.php get user groups\");\nTimeLogEnd($timeLog, __LINE__);\n$object->userGroups = UserGroups::getAllUsersGroups();\nTimeLogEnd($timeLog, __LINE__);\n$object->streamServerURL = '';\n$object->streamKey = '';\nif ($object->isLogged) {\n    $timeLog2 = __FILE__ . \"::Is Logged \";\n    TimeLogStart($timeLog2);\n\n    //_error_log(\"login.json.php get Live\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"Live\");\n    if (!empty($p)) {\n        require_once $global['systemRootPath'] . 'plugin/Live/Objects/LiveTransmition.php';\n        $trasnmition = LiveTransmition::createTransmitionIfNeed(User::getId());\n        if (!empty($trasnmition)) {\n            $object->streamServerURL = $p->getServer() . \"?p=\" . User::getUserPass();\n            $object->streamKey = $trasnmition['key'];\n        } else {\n            _error_log('login.json.php transmissionKey is empty [' . User::getId() . ']');\n        }\n    } else {\n        _error_log('login.json.php live plugin is disabled');\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get MobileManager\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"MobileManager\");\n    if (!empty($p)) {\n        $object->streamer = _json_decode(url_get_contents($global['webSiteRootURL'] . \"objects/status.json.php\"));\n        $object->plugin = $p->getDataObject();\n        $object->encoder = $config->getEncoderURL();\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get VideoHLS\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"VideoHLS\");\n    if (!empty($p)) {\n        $object->videoHLS = true;\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get Subscriptions\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"Subscription\");\n    if (!empty($p)) {\n        $object->Subscription = Subscription::getAllFromUser($object->id);\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n    //_error_log(\"login.json.php get PayPerView\");\n    $p = AVideoPlugin::loadPluginIfEnabled(\"PayPerView\");\n    if (!empty($p) && class_exists('PayPerView')) {\n        $object->PayPerView = PayPerView::getAllPPVFromUser($object->id);\n    }\n    TimeLogEnd($timeLog2, __LINE__);\n} else {\n    _error_log('login.json.php is not logged');\n}\n\n$object->PHPSESSID = session_id();\n\nTimeLogEnd($timeLog, __LINE__);\n//_error_log(\"login.json.php almost complete\");\n$json = _json_encode($object);\n//_error_log(\"login.json.php complete\");\n//header(\"Content-length: \" . strlen($json));\n_error_log('login.json.php is done');\necho $json;\nexit;"], "filenames": ["objects/login.json.php"], "buggy_code_start_loc": [33], "buggy_code_end_loc": [34], "fixing_code_start_loc": [33], "fixing_code_end_loc": [34], "type": "CWE-601", "message": "Open redirect vulnerability in objects/login.json.php in WWBN AVideo through 11.6, allows attackers to arbitrarily redirect users from a crafted url to the login page.", "other": {"cve": {"id": "CVE-2022-27463", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-05T16:15:16.203", "lastModified": "2022-04-12T19:59:17.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Open redirect vulnerability in objects/login.json.php in WWBN AVideo through 11.6, allows attackers to arbitrarily redirect users from a crafted url to the login page."}, {"lang": "es", "value": "Una vulnerabilidad de redireccionamiento abierto en el archivo objects/login.json.php en WWBN Avideo versiones hasta 11.6, permite a atacantes redirigir arbitrariamente a usuarios desde una url dise\u00f1ada a la p\u00e1gina de inicio de sesi\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wwbn:avideo:*:*:*:*:*:*:*:*", "versionEndIncluding": "11.6", "matchCriteriaId": "DEF0B0D4-CF7D-4A7F-996B-2C4E40783131"}]}]}], "references": [{"url": "https://avideo.tube/", "source": "cve@mitre.org", "tags": ["Product"]}, {"url": "https://github.com/WWBN/AVideo/commit/77e9aa6411ff4b97571eb82e587139ec05ff894c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WWBN/AVideo/commit/77e9aa6411ff4b97571eb82e587139ec05ff894c"}}