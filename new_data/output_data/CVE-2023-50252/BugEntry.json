{"buggy_code": ["<?php\n/**\n * @package php-svg-lib\n * @link    http://github.com/PhenX/php-svg-lib\n * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n * @license GNU LGPLv3+ http://www.gnu.org/copyleft/lesser.html\n */\n\nnamespace Svg\\Tag;\n\nclass UseTag extends AbstractTag\n{\n    protected $x = 0;\n    protected $y = 0;\n    protected $width;\n    protected $height;\n    protected $instances = 0;\n\n    /** @var AbstractTag */\n    protected $reference;\n\n    protected function before($attributes)\n    {\n        $this->instances++;\n        if ($this->instances > 1) {\n            //TODO: log circular reference error state\n            return;\n        }\n\n        if (isset($attributes['x'])) {\n            $this->x = $attributes['x'];\n        }\n        if (isset($attributes['y'])) {\n            $this->y = $attributes['y'];\n        }\n\n        if (isset($attributes['width'])) {\n            $this->width = $attributes['width'];\n        }\n        if (isset($attributes['height'])) {\n            $this->height = $attributes['height'];\n        }\n\n        parent::before($attributes);\n\n        $document = $this->getDocument();\n\n        $link = $attributes[\"href\"] ?? $attributes[\"xlink:href\"];\n        $this->reference = $document->getDef($link);\n\n        if ($this->reference) {\n            $this->reference->before($attributes);\n        }\n\n        $surface = $document->getSurface();\n        $surface->save();\n\n        $surface->translate($this->x, $this->y);\n    }\n\n    protected function after() {\n        if ($this->instances > 0) {\n            return;\n        }\n        parent::after();\n\n        if ($this->reference) {\n            $this->reference->after();\n        }\n\n        $this->getDocument()->getSurface()->restore();\n    }\n\n    public function handle($attributes)\n    {\n        if ($this->instances > 1) {\n            //TODO: log circular reference error state\n            return;\n        }\n\n        parent::handle($attributes);\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $mergedAttributes = $this->reference->attributes;\n        $attributesToNotMerge = ['x', 'y', 'width', 'height'];\n        foreach ($attributes as $attrKey => $attrVal) {\n            if (!in_array($attrKey, $attributesToNotMerge) && !isset($mergedAttributes[$attrKey])) {\n                $mergedAttributes[$attrKey] = $attrVal;\n            }\n        }\n\n        $this->reference->handle($mergedAttributes);\n\n        foreach ($this->reference->children as $_child) {\n            $_attributes = array_merge($_child->attributes, $mergedAttributes);\n            $_child->handle($_attributes);\n        }\n    }\n\n    public function handleEnd()\n    {\n        $this->instances--;\n        if ($this->instances > 0) {\n            return;\n        }\n\n        parent::handleEnd();\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $this->reference->handleEnd();\n\n        foreach ($this->reference->children as $_child) {\n            $_child->handleEnd();\n        }\n    }\n} \n"], "fixing_code": ["<?php\n/**\n * @package php-svg-lib\n * @link    http://github.com/PhenX/php-svg-lib\n * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n * @license GNU LGPLv3+ http://www.gnu.org/copyleft/lesser.html\n */\n\nnamespace Svg\\Tag;\n\nclass UseTag extends AbstractTag\n{\n    protected $x = 0;\n    protected $y = 0;\n    protected $width;\n    protected $height;\n    protected $instances = 0;\n\n    /** @var AbstractTag */\n    protected $reference;\n\n    protected function before($attributes)\n    {\n        $this->instances++;\n        if ($this->instances > 1) {\n            //TODO: log circular reference error state\n            return;\n        }\n\n        if (isset($attributes['x'])) {\n            $this->x = $attributes['x'];\n        }\n        if (isset($attributes['y'])) {\n            $this->y = $attributes['y'];\n        }\n\n        if (isset($attributes['width'])) {\n            $this->width = $attributes['width'];\n        }\n        if (isset($attributes['height'])) {\n            $this->height = $attributes['height'];\n        }\n\n        parent::before($attributes);\n\n        $document = $this->getDocument();\n\n        $link = $attributes[\"href\"] ?? $attributes[\"xlink:href\"];\n        $this->reference = $document->getDef($link);\n\n        if ($this->reference) {\n            $this->reference->before($attributes);\n        }\n\n        $surface = $document->getSurface();\n        $surface->save();\n\n        $surface->translate($this->x, $this->y);\n    }\n\n    protected function after() {\n        if ($this->instances > 0) {\n            return;\n        }\n        parent::after();\n\n        if ($this->reference) {\n            $this->reference->after();\n        }\n\n        $this->getDocument()->getSurface()->restore();\n    }\n\n    public function handle($attributes)\n    {\n        if ($this->instances > 1) {\n            //TODO: log circular reference error state\n            return;\n        }\n\n        parent::handle($attributes);\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $mergedAttributes = $this->reference->attributes;\n        $attributesToNotMerge = ['x', 'y', 'width', 'height', 'href', 'xlink:href', 'id'];\n        foreach ($attributes as $attrKey => $attrVal) {\n            if (!in_array($attrKey, $attributesToNotMerge) && !isset($mergedAttributes[$attrKey])) {\n                $mergedAttributes[$attrKey] = $attrVal;\n            }\n        }\n\n        $this->reference->handle($mergedAttributes);\n\n        foreach ($this->reference->children as $_child) {\n            $_attributes = array_merge($_child->attributes, $mergedAttributes);\n            $_child->handle($_attributes);\n        }\n    }\n\n    public function handleEnd()\n    {\n        $this->instances--;\n        if ($this->instances > 0) {\n            return;\n        }\n\n        parent::handleEnd();\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $this->reference->handleEnd();\n\n        foreach ($this->reference->children as $_child) {\n            $_child->handleEnd();\n        }\n    }\n} \n"], "filenames": ["src/Svg/Tag/UseTag.php"], "buggy_code_start_loc": [88], "buggy_code_end_loc": [89], "fixing_code_start_loc": [88], "fixing_code_end_loc": [89], "type": "CWE-15", "message": "php-svg-lib is an SVG file parsing / rendering library. Prior to version 0.5.1, when handling `<use>` tag that references an `<image>` tag, it merges the attributes from the `<use>` tag to the `<image>` tag. The problem pops up especially when the `href` attribute from the `<use>` tag has not been sanitized. This can lead to an unsafe file read that can cause PHAR Deserialization vulnerability in PHP prior to version 8. Version 0.5.1 contains a patch for this issue. ", "other": {"cve": {"id": "CVE-2023-50252", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-12T21:15:08.670", "lastModified": "2023-12-15T17:50:59.207", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "php-svg-lib is an SVG file parsing / rendering library. Prior to version 0.5.1, when handling `<use>` tag that references an `<image>` tag, it merges the attributes from the `<use>` tag to the `<image>` tag. The problem pops up especially when the `href` attribute from the `<use>` tag has not been sanitized. This can lead to an unsafe file read that can cause PHAR Deserialization vulnerability in PHP prior to version 8. Version 0.5.1 contains a patch for this issue. "}, {"lang": "es", "value": "php-svg-lib es una librer\u00eda de an\u00e1lisis/representaci\u00f3n de archivos SVG. Antes de la versi\u00f3n 0.5.1, cuando se maneja la etiqueta `` que hace referencia a una etiqueta ``, se fusionan los atributos de la etiqueta `` con la etiqueta ``. El problema surge especialmente cuando el atributo `href` de la etiqueta `` no ha sido sanitizado. Esto puede provocar una lectura de archivo insegura que puede causar una vulnerabilidad de deserializaci\u00f3n PHAR en PHP anterior a la versi\u00f3n 8. La versi\u00f3n 0.5.1 contiene un parche para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-15"}, {"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dompdf:php-svg-lib:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.1", "matchCriteriaId": "F1E345BA-6667-40EB-AF3F-E279441B6C90"}]}]}], "references": [{"url": "https://github.com/dompdf/php-svg-lib/commit/08ce6a96d63ad7216315fae34a61c886dd2dc030", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/dompdf/php-svg-lib/security/advisories/GHSA-jq98-9543-m4cr", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/dompdf/php-svg-lib/commit/08ce6a96d63ad7216315fae34a61c886dd2dc030"}}