{"buggy_code": ["Code snippets and recipes for ``loguru``\n========================================\n\n.. highlight:: python3\n\n.. |print| replace:: :func:`print()`\n.. |open| replace:: :func:`open()`\n.. |sys.__stdout__| replace:: :data:`sys.__stdout__`\n.. |sys.stdout| replace:: :data:`sys.stdout`\n.. |sys.stderr| replace:: :data:`sys.stderr`\n.. |warnings| replace:: :mod:`warnings`\n.. |warnings.showwarning| replace:: :func:`warnings.showwarning`\n.. |warnings.warn| replace:: :func:`warnings.warn`\n.. |contextlib.redirect_stdout| replace:: :func:`contextlib.redirect_stdout`\n.. |copy.deepcopy| replace:: :func:`copy.deepcopy`\n.. |os.fork| replace:: :func:`os.fork`\n.. |multiprocessing| replace:: :mod:`multiprocessing`\n.. |traceback| replace:: :mod:`traceback`\n.. |Thread| replace:: :class:`~threading.Thread`\n.. |Process| replace:: :class:`~multiprocessing.Process`\n.. |Pool| replace:: :class:`~multiprocessing.pool.Pool`\n.. |Pool.map| replace:: :meth:`~multiprocessing.pool.Pool.map`\n.. |Pool.apply| replace:: :meth:`~multiprocessing.pool.Pool.apply`\n.. |sys.stdout.reconfigure| replace:: :meth:`sys.stdout.reconfigure() <io.TextIOWrapper.reconfigure>`\n.. |UnicodeEncodeError| replace:: :exc:`UnicodeEncodeError`\n\n.. |add| replace:: :meth:`~loguru._logger.Logger.add()`\n.. |remove| replace:: :meth:`~loguru._logger.Logger.remove()`\n.. |enable| replace:: :meth:`~loguru._logger.Logger.enable()`\n.. |disable| replace:: :meth:`~loguru._logger.Logger.disable()`\n.. |bind| replace:: :meth:`~loguru._logger.Logger.bind()`\n.. |patch| replace:: :meth:`~loguru._logger.Logger.patch()`\n.. |opt| replace:: :meth:`~loguru._logger.Logger.opt()`\n.. |log| replace:: :meth:`~loguru._logger.Logger.log()`\n.. |level| replace:: :meth:`~loguru._logger.Logger.level()`\n.. |configure| replace:: :meth:`~loguru._logger.Logger.configure()`\n.. |complete| replace:: :meth:`~loguru._logger.Logger.complete()`\n\n.. _`unicode`: https://docs.python.org/3/howto/unicode.html\n\n.. |stackprinter| replace:: ``stackprinter``\n.. _stackprinter: https://github.com/cknd/stackprinter\n\n.. |zmq| replace:: ``zmq``\n.. _zmq: https://github.com/zeromq/pyzmq\n\n.. _`GH#88`: https://github.com/Delgan/loguru/issues/88\n.. _`GH#132`: https://github.com/Delgan/loguru/issues/132\n\nChanging the level of an existing handler\n-----------------------------------------\n\nOnce a handler has been added, it is actually not possible to update it. This is a deliberate choice in order to keep the Loguru's API minimal. Several solutions are possible, tough, if you need to change the configured ``level`` of a handler. Chose the one that best fits your use case.\n\nThe most straightforward workaround is to |remove| your handler and then re-|add| it with the updated ``level`` parameter. To do so, you have to keep a reference to the identifier number returned while adding a handler::\n\n    handler_id = logger.add(sys.stderr, level=\"WARNING\")\n\n    logger.info(\"Logging 'WARNING' or higher messages only\")\n\n    ...\n\n    logger.remove(handler_id)\n    logger.add(sys.stderr, level=\"DEBUG\")\n\n    logger.debug(\"Logging 'DEBUG' messages too\")\n\n\nAlternatively, you can combine the |bind| method with the ``filter`` argument to provide a function dynamically filtering logs based on their level::\n\n    def my_filter(record):\n        if record[\"extra\"].get(\"warn_only\"):  # \"warn_only\" is bound to the logger and set to 'True'\n            return record[\"level\"].no >= logger.level(\"WARNING\").no\n        return True  # Fallback to default 'level' configured while adding the handler\n\n\n    logger.add(sys.stderr, filter=my_filter, level=\"DEBUG\")\n\n    # Use this logger first, debug messages are filtered out\n    logger = logger.bind(warn_only=True)\n    logger.warn(\"Initialization in progress\")\n\n    # Then you can use this one to log all messages\n    logger = logger.bind(warn_only=False)\n    logger.debug(\"Back to debug messages\")\n\n\nFinally, more advanced control over handler's level can be achieved by using a callable object as the ``filter``::\n\n    class MyFilter:\n\n        def __init__(self, level):\n            self.level = level\n\n        def __call__(self, record):\n            levelno = logger.level(self.level).no\n            return record[\"level\"].no >= levelno\n\n    my_filter = MyFilter(\"WARNING\")\n    logger.add(sys.stderr, filter=my_filter, level=0)\n\n    logger.warning(\"OK\")\n    logger.debug(\"NOK\")\n\n    my_filter.level = \"DEBUG\"\n    logger.debug(\"OK\")\n\n\nSending and receiving log messages across network or processes\n--------------------------------------------------------------\n\nIt is possible to transmit logs between different processes and even between different computer if needed. Once the connection is established between the two Python programs, this requires serializing the logging record in one side while re-constructing the message on the other hand.\n\nThis can be achieved using a custom sink for the client and |patch| for the server.\n\n.. code::\n\n    # client.py\n    import sys\n    import socket\n    import struct\n    import time\n    import pickle\n\n    from loguru import logger\n\n\n    class SocketHandler:\n\n        def __init__(self, host, port):\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.connect((host, port))\n\n        def write(self, message):\n            record = message.record\n            data = pickle.dumps(record)\n            slen = struct.pack(\">L\", len(data))\n            self.sock.send(slen + data)\n\n    logger.configure(handlers=[{\"sink\": SocketHandler('localhost', 9999)}])\n\n    while 1:\n        time.sleep(1)\n        logger.info(\"Sending message from the client\")\n\n\n.. code::\n\n    # server.py\n    import socketserver\n    import pickle\n    import struct\n\n    from loguru import logger\n\n\n    class LoggingStreamHandler(socketserver.StreamRequestHandler):\n\n        def handle(self):\n            while True:\n                chunk = self.connection.recv(4)\n                if len(chunk) < 4:\n                    break\n                slen = struct.unpack('>L', chunk)[0]\n                chunk = self.connection.recv(slen)\n                while len(chunk) < slen:\n                    chunk = chunk + self.connection.recv(slen - len(chunk))\n                record = pickle.loads(chunk)\n                level, message = record[\"level\"].no, record[\"message\"]\n                logger.patch(lambda record: record.update(record)).log(level, message)\n\n    server = socketserver.TCPServer(('localhost', 9999), LoggingStreamHandler)\n    server.serve_forever()\n\n\nKeep in mind though that `pickling is unsafe <https://intoli.com/blog/dangerous-pickles/>`_, use this with care.\n\nAnother possibility is to use a third party library like |zmq|_ for example.\n\n.. code::\n\n    # client.py\n    import zmq\n    from zmq.log.handlers import PUBHandler\n    from loguru import logger\n\n    socket = zmq.Context().socket(zmq.PUB)\n    socket.connect(\"tcp://127.0.0.1:12345\")\n    handler = PUBHandler(socket)\n    logger.add(handler)\n\n    logger.info(\"Logging from client\")\n\n\n.. code::\n\n    # server.py\n    import sys\n    import zmq\n    from loguru import logger\n\n    socket = zmq.Context().socket(zmq.SUB)\n    socket.bind(\"tcp://127.0.0.1:12345\")\n    socket.subscribe(\"\")\n\n    logger.configure(handlers=[{\"sink\": sys.stderr, \"format\": \"{message}\"}])\n\n    while True:\n        _, message = socket.recv_multipart()\n        logger.info(message.decode(\"utf8\").strip())\n\n\n\nResolving ``UnicodeEncodeError`` and other encoding issues\n----------------------------------------------------------\n\nWhen you write a log message, the handler may need to encode the received `unicode`_ string to a specific sequence of bytes. The ``encoding`` used to perform this operation varies depending on the sink type and your environment. Problem may occur if you try to write a character which is not supported by the handler ``encoding``. In such case, it's likely that Python will raise an |UnicodeEncodeError|.\n\nFor example, this may happen while printing to the terminal::\n\n    print(\"\u5929\")\n    # UnicodeEncodeError: 'charmap' codec can't encode character '\\u5929' in position 0: character maps to <undefined>\n\nA similar error may occur while writing to a file which has not been opened using an appropriate encoding. Most common problem happen while logging to standard output or to a file on Windows. So, how to avoid such error? Simply by properly configuring your handler so that it can process any kind of unicode string.\n\nIf you are encountering this error while logging to ``stdout``, you have several options:\n\n* Use |sys.stderr| instead of |sys.stdout| (the former will escape faulty characters rather than raising exception)\n* Set the :envvar:`PYTHONIOENCODING` environment variable to ``utf-8``\n* Call |sys.stdout.reconfigure| with ``encoding='utf-8'`` and / or ``errors='backslashreplace'``\n\nIf you are using a file sink, you can configure the ``errors`` or ``encoding`` parameter while adding the handler like ``logger.add(\"file.log\", encoding=\"utf8\")`` for example.  All additional ``**kwargs`` argument are passed to the built-in |open| function.\n\nFor other types of handlers, you have to check if there is a way to parametrize encoding or fallback policy.\n\n\nLogging entry and exit of functions with a decorator\n----------------------------------------------------\n\nIn some cases, it might be useful to log entry and exit values of a function. Although Loguru doesn't provide such feature out of the box, it can be easily implemented by using Python decorators::\n\n    import functools\n    from loguru import logger\n\n\n    def logger_wraps(*, entry=True, exit=True, level=\"DEBUG\"):\n\n        def wrapper(func):\n            name = func.__name__\n\n            @functools.wraps(func)\n            def wrapped(*args, **kwargs):\n                logger_ = logger.opt(depth=1)\n                if entry:\n                    logger_.log(level, \"Entering '{}' (args={}, kwargs={})\", name, args, kwargs)\n                result = func(*args, **kwargs)\n                if exit:\n                    logger_.log(level, \"Exiting '{}' (result={})\", name, result)\n                return result\n\n            return wrapped\n\n        return wrapper\n\nYou could then use it like this::\n\n    @logger_wraps()\n    def foo(a, b, c):\n        logger.info(\"Inside the function\")\n        return a * b * c\n\n    def bar():\n        foo(2, 4, c=8)\n\n    bar()\n\n\nWhich would result in::\n\n    2019-04-07 11:08:44.198 | DEBUG    | __main__:bar:30 - Entering 'foo' (args=(2, 4), kwargs={'c': 8})\n    2019-04-07 11:08:44.198 | INFO     | __main__:foo:26 - Inside the function\n    2019-04-07 11:08:44.198 | DEBUG    | __main__:bar:30 - Exiting 'foo' (result=64)\n\n\nHere is another simple example to record timing of a function::\n\n    def timeit(func):\n\n        def wrapped(*args, **kwargs):\n            start = time.time()\n            result = func(*args, **kwargs)\n            end = time.time()\n            logger.debug(\"Function '{}' executed in {:f} s\", func.__name__, end - start)\n            return result\n\n        return wrapped\n\n\nUsing logging function based on custom added levels\n---------------------------------------------------\n\nAfter adding a new level, it's habitually used with the |log| function::\n\n    logger.level(\"foobar\", no=33, icon=\"\ud83e\udd16\", color=\"<blue>\")\n\n    logger.log(\"foobar\", \"A message\")\n\n\nFor convenience, one can assign a new logging function which automatically uses the custom added level::\n\n    from functools import partialmethod\n\n    logger.__class__.foobar = partialmethod(logger.__class__.log, \"foobar\")\n\n    logger.foobar(\"A message\")\n\n\nThe new method need to be added only once and will be usable across all your files importing the ``logger``. Assigning the method to ``logger.__class__`` rather than ``logger`` directly ensures that it stays available even after calling ``logger.bind()``, ``logger.patch()`` and ``logger.opt()`` (because these functions return a new ``logger`` instance).\n\n\nPreserving an ``opt()`` parameter for the whole module\n------------------------------------------------------\n\nSupposing you wish to color each of your log messages without having to call ``logger.opt(colors=True)`` every time, you can add this at the very beginning of your module::\n\n    logger = logger.opt(colors=True)\n\n    logger.info(\"It <green>works</>!\")\n\nHowever, it should be noted that it's not possible to chain |opt| calls, using this method again will reset the ``colors`` option to its default value (which is ``False``). For this reason, it is also necessary to patch the |opt| method so that all subsequent calls continue to use the desired value::\n\n    from functools import partial\n\n    logger = logger.opt(colors=True)\n    logger.opt = partial(logger.opt, colors=True)\n\n    logger.opt(raw=True).info(\"It <green>still</> works!\\n\")\n\n\nSerializing log messages using a custom function\n------------------------------------------------\n\nEach handler added with ``serialize=True`` will create messages by converting the logging record to a valid JSON string. Depending on the sink for which the messages are intended, it may be useful to make changes to the generated string. Instead of using the ``serialize`` parameter, you can implement your own serialization function and use it directly in your sink::\n\n    def serialize(record):\n        subset = {\"timestamp\": record[\"time\"].timestamp(), \"message\": record[\"message\"]}\n        return json.dumps(subset)\n\n    def sink(message):\n        serialized = serialize(message.record)\n        print(serialized)\n\n    logger.add(sink)\n\n\nIf you need to send structured logs to a file (or any kind of sink in general), a similar result can be obtained by using a custom ``format`` function::\n\n    def formatter(record):\n        # Note this function returns the string to be formatted, not the actual message to be logged\n        record[\"extra\"][\"serialized\"] = serialize(record)\n        return \"{extra[serialized]}\\n\"\n\n    logger.add(\"file.log\", format=formatter)\n\n\nYou can also use |patch| for this, so the serialization function will be called only once in case you want to use it in multiple sinks::\n\n    def patching(record):\n        record[\"extra\"][\"serialized\"] = serialize(record)\n\n    logger = logger.patch(patching)\n\n    # Note that if \"format\" is not a function, possible exception will be appended to the message\n    logger.add(sys.stderr, format=\"{extra[serialized]}\")\n    logger.add(\"file.log\", format=\"{extra[serialized]}\")\n\n\nRotating log file based on both size and time\n---------------------------------------------\n\nThe ``rotation`` argument of file sinks accept size or time limits but not both for simplification reasons. However, it is possible to create a custom function to support more advanced scenarios::\n\n    import datetime\n\n    class Rotator:\n\n        def __init__(self, *, size, at):\n            now = datetime.datetime.now()\n\n            self._size_limit = size\n            self._time_limit = now.replace(hour=at.hour, minute=at.minute, second=at.second)\n\n            if now >= self._time_limit:\n                # The current time is already past the target time so it would rotate already.\n                # Add one day to prevent an immediate rotation.\n                self._time_limit += datetime.timedelta(days=1)\n\n        def should_rotate(self, message, file):\n            file.seek(0, 2)\n            if file.tell() + len(message) > self._size_limit:\n                return True\n            if message.record[\"time\"].timestamp() > self._time_limit.timestamp():\n                self._time_limit += datetime.timedelta(days=1)\n                return True\n            return False\n\n    # Rotate file if over 500 MB or at midnight every day\n    rotator = Rotator(size=5e+8, at=datetime.time(0, 0, 0))\n    logger.add(\"file.log\", rotation=rotator.should_rotate)\n\n\nAdapting colors and format of logged messages dynamically\n---------------------------------------------------------\n\nIt is possible to customize the colors of your logs thanks to several :ref:`markup tags <color>`. Those are used to configure the ``format`` of your handler. By creating a appropriate formatting function, you can easily define colors depending on the logged message.\n\nFor example, if you want to associate each module with a unique color::\n\n    from collections import defaultdict\n    from random import choice\n\n    colors = [\"blue\", \"cyan\", \"green\", \"magenta\", \"red\", \"yellow\"]\n    color_per_module = defaultdict(lambda: choice(colors))\n\n    def formatter(record):\n        color_tag = color_per_module[record[\"name\"]]\n        return \"<\" + color_tag + \">[{name}]</> <bold>{message}</>\\n{exception}\"\n\n    logger.add(sys.stderr, format=formatter)\n\n\nIf you need to dynamically colorize the ``record[\"message\"]``, make sure that the color tags appear in the returned format instead of modifying the message::\n\n    def rainbow(text):\n        colors = [\"red\", \"yellow\", \"green\", \"cyan\", \"blue\", \"magenta\"]\n        chars = (\"<{}>{}</>\".format(colors[i % len(colors)], c) for i, c in enumerate(text))\n        return \"\".join(chars)\n\n    def formatter(record):\n        rainbow_message = rainbow(record[\"message\"])\n        # Prevent '{}' in message (if any) to be incorrectly parsed during formatting\n        escaped = rainbow_message.replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n        return \"<b>{time}</> \" + escaped + \"\\n{exception}\"\n\n    logger.add(sys.stderr, format=formatter)\n\n\nDynamically formatting messages to properly align values with padding\n---------------------------------------------------------------------\n\nThe default formatter is unable to vertically align log messages because the length of ``{name}``, ``{function}`` and ``{line}`` are not fixed.\n\nOne workaround consists of using padding with some maximum value that should suffice most of the time, like this for example::\n\n    fmt = \"{time} | {level: <8} | {name: ^15} | {function: ^15} | {line: >3} | {message}\"\n    logger.add(sys.stderr, format=fmt)\n\nOthers solutions are possible by using a formatting function or class. For example, it is possible to dynamically adjust the padding length based on previously encountered values::\n\n    class Formatter:\n\n        def __init__(self):\n            self.padding = 0\n            self.fmt = \"{time} | {level: <8} | {name}:{function}:{line}{extra[padding]} | {message}\\n{exception}\"\n\n        def format(self, record):\n            length = len(\"{name}:{function}:{line}\".format(**record))\n            self.padding = max(self.padding, length)\n            record[\"extra\"][\"padding\"] = \" \" * (self.padding - length)\n            return self.fmt\n\n    formatter = Formatter()\n\n    logger.remove()\n    logger.add(sys.stderr, format=formatter.format)\n\n\nCustomizing the formatting of exceptions\n----------------------------------------\n\nLoguru will automatically add the traceback of occurring exception while using ``logger.exception()`` or ``logger.opt(exception=True)``::\n\n    def inverse(x):\n        try:\n            1 / x\n        except ZeroDivisionError:\n            logger.exception(\"Oups...\")\n\n    if __name__ == \"__main__\":\n        inverse(0)\n\n.. code-block:: none\n\n    2019-11-15 10:01:13.703 | ERROR    | __main__:inverse:8 - Oups...\n    Traceback (most recent call last):\n    File \"foo.py\", line 6, in inverse\n        1 / x\n    ZeroDivisionError: division by zero\n\nIf the handler is added with ``backtrace=True``, the traceback is extended to see where the exception came from:\n\n.. code-block:: none\n\n    2019-11-15 10:11:32.829 | ERROR    | __main__:inverse:8 - Oups...\n    Traceback (most recent call last):\n      File \"foo.py\", line 16, in <module>\n        inverse(0)\n    > File \"foo.py\", line 6, in inverse\n        1 / x\n    ZeroDivisionError: division by zero\n\nIf the handler is added with ``diagnose=True``, then the traceback is annotated to see what caused the problem:\n\n.. code-block:: none\n\n    Traceback (most recent call last):\n\n    File \"foo.py\", line 6, in inverse\n        1 / x\n            \u2514 0\n\n    ZeroDivisionError: division by zero\n\nIt is possible to further personalize the formatting of exception by adding an handler with a custom ``format`` function. For example, supposing you want to format errors using the |stackprinter|_ library::\n\n    import stackprinter\n\n    def format(record):\n        format_ = \"{time} {message}\\n\"\n\n        if record[\"exception\"] is not None:\n            record[\"extra\"][\"stack\"] = stackprinter.format(record[\"exception\"])\n            format_ += \"{extra[stack]}\\n\"\n\n        return format_\n\n    logger.add(sys.stderr, format=format)\n\n.. code-block:: none\n\n    2019-11-15T10:46:18.059964+0100 Oups...\n    File foo.py, line 17, in inverse\n        15   def inverse(x):\n        16       try:\n    --> 17           1 / x\n        18       except ZeroDivisionError:\n        ..................................................\n        x = 0\n        ..................................................\n\n    ZeroDivisionError: division by zero\n\n\nDisplaying a stacktrace without using the error context\n-------------------------------------------------------\n\nIt may be useful in some cases to display the traceback at the time your message is logged, while no exceptions have been raised. Although this feature is not built-in into Loguru as it is more related to debugging than logging, it is possible to |patch| your logger and then display the stacktrace as needed (using the |traceback| module)::\n\n    import traceback\n\n    def add_traceback(record):\n        extra = record[\"extra\"]\n        if extra.get(\"with_traceback\", False):\n            extra[\"traceback\"] = \"\\n\" + \"\".join(traceback.format_stack())\n        else:\n            extra[\"traceback\"] = \"\"\n\n    logger = logger.patch(add_traceback)\n    logger.add(sys.stderr, format=\"{time} - {message}{extra[traceback]}\")\n\n    logger.info(\"No traceback\")\n    logger.bind(with_traceback=True).info(\"With traceback\")\n\nHere is another example that demonstrates how to prefix the logged message with the full call stack::\n\n    import traceback\n    from itertools import takewhile\n\n    def tracing_formatter(record):\n        # Filter out frames coming from Loguru internals\n        frames = takewhile(lambda f: \"/loguru/\" not in f.filename, traceback.extract_stack())\n        stack = \" > \".join(\"{}:{}:{}\".format(f.filename, f.name, f.lineno) for f in frames)\n        record[\"extra\"][\"stack\"] = stack\n        return \"{level} | {extra[stack]} - {message}\\n{exception}\"\n\n    def foo():\n        logger.info(\"Deep call\")\n\n    def bar():\n        foo()\n\n    logger.remove()\n    logger.add(sys.stderr, format=tracing_formatter)\n\n    bar()\n    # Output: \"INFO | script.py:<module>:23 > script.py:bar:18 > script.py:foo:15 - Deep call\"\n\n\nManipulating newline terminator to write multiple logs on the same line\n-----------------------------------------------------------------------\n\nYou can temporarily log a message on a continuous line by combining the use of |bind|, |opt| and a custom ``format`` function. This is especially useful if you want to illustrate a step-by-step process in progress, for example::\n\n    def formatter(record):\n        end = record[\"extra\"].get(\"end\", \"\\n\")\n        return \"[{time}] {message}\" + end + \"{exception}\"\n\n    logger.add(sys.stderr, format=formatter)\n    logger.add(\"foo.log\", mode=\"w\")\n\n    logger.bind(end=\"\").debug(\"Progress: \")\n\n    for _ in range(5):\n        logger.opt(raw=True).debug(\".\")\n\n    logger.opt(raw=True).debug(\"\\n\")\n\n    logger.info(\"Done\")\n\n.. code-block:: none\n\n    [2020-03-26T22:47:01.708016+0100] Progress: .....\n    [2020-03-26T22:47:01.709031+0100] Done\n\nNote, however, that you may encounter difficulties depending on the sinks you use. Logging is not always appropriate for this type of end-user message.\n\n\nCapturing standard ``stdout``, ``stderr`` and ``warnings``\n----------------------------------------------------------\n\nThe use of logging should be privileged over |print|, yet, it may happen that you don't have plain control over code executed in your application. If you wish to capture standard output, you can suppress |sys.stdout| (and |sys.stderr|) with a custom stream object using |contextlib.redirect_stdout|. You have to take care of first removing the default handler, and not adding a new stdout sink once redirected or that would cause dead lock (you may use |sys.__stdout__| instead)::\n\n    import contextlib\n    import sys\n    from loguru import logger\n\n    class StreamToLogger:\n\n        def __init__(self, level=\"INFO\"):\n            self._level = level\n\n        def write(self, buffer):\n            for line in buffer.rstrip().splitlines():\n                logger.opt(depth=1).log(self._level, line.rstrip())\n\n        def flush(self):\n            pass\n\n    logger.remove()\n    logger.add(sys.__stdout__)\n\n    stream = StreamToLogger()\n    with contextlib.redirect_stdout(stream):\n        print(\"Standard output is sent to added handlers.\")\n\n\nYou may also capture warnings emitted by your application by replacing |warnings.showwarning|::\n\n    import warnings\n    from loguru import logger\n\n    showwarning_ = warnings.showwarning\n\n    def showwarning(message, *args, **kwargs):\n        logger.warning(message)\n        showwarning_(message, *args, **kwargs)\n\n    warnings.showwarning = showwarning\n\n\nAlternatively, if you want to emit warnings based on logged messages, you can simply use |warnings.warn| as a sink::\n\n\n    logger.add(warnings.warn, format=\"{message}\", filter=lambda record: record[\"level\"].name == \"WARNING\")\n\n\nCircumventing modules whose ``__name__`` value is absent\n--------------------------------------------------------\n\nLoguru makes use of the global variable ``__name__`` to determine from where the logged message is coming from. However, it may happen in very specific situation (like some Dask distributed environment) that this value is not set. In such case, Loguru will use ``None`` to make up for the lack of the value. This implies that if you want to |disable| messages coming from such special module, you have to explicitly call ``logger.disable(None)``.\n\nSimilar considerations should be taken into account while dealing with the ``filter`` attribute. As ``__name__`` is missing, Loguru will assign the ``None`` value to the ``record[\"name\"]`` entry. It also means that once formatted in your log messages, the ``{name}`` token will be equals to ``\"None\"``. This can be worked around by manually overriding the ``record[\"name\"]`` value using |patch| from inside the faulty module::\n\n    # If Loguru fails to retrieve the proper \"name\" value, assign it manually\n    logger = logger.patch(lambda record: record.update(name=\"my_module\"))\n\nYou probably should not worry about all of this except if you noticed that your code is subject to this behavior.\n\n\nInteroperability with ``tqdm`` iterations\n-----------------------------------------\n\nTrying to use the Loguru's ``logger`` during an iteration wrapped by the ``tqdm`` library may disturb the displayed progress bar. As a workaround, one can use the ``tqdm.write()`` function instead of writings logs directly to ``sys.stderr``::\n\n    import time\n\n    from loguru import logger\n    from tqdm import tqdm\n\n    logger.remove()\n    logger.add(lambda msg: tqdm.write(msg, end=\"\"), colorize=True)\n\n    logger.info(\"Initializing\")\n\n    for x in tqdm(range(100)):\n        logger.info(\"Iterating #{}\", x)\n        time.sleep(0.1)\n\n\nYou may encounter problems with colorization of your logs after importing ``tqdm`` using Spyder on Windows. This issue is discussed in `GH#132`_. You can easily circumvent the problem by calling ``colorama.deinit()`` right after your import.\n\n\nUsing Loguru's ``logger`` within a Cython module\n------------------------------------------------\n\nLoguru and Cython do not interoperate very well. This is because Loguru (and logging generally) heavily relies on Python stack frames while Cython, being an alternative Python implementation, try to get rid of these frames for optimization reasons.\n\nCalling the ``logger`` from code compiled with Cython may raise this kind of exception::\n\n    ValueError: call stack is not deep enough\n\nThis error happens when Loguru tries to access a stack frame which has been suppressed by Cython. There is no way for Loguru to retrieve contextual information of the logged message, but there exists a workaround that will at least prevent your application to crash::\n\n    # Add this at the start of your file\n    logger = logger.opt(depth=-1)\n\nNote that logged messages should be displayed correctly, but function name and other information will be incorrect. This issue is discussed in `GH#88`_.\n\n\nCreating independent loggers with separate set of handlers\n----------------------------------------------------------\n\nLoguru is fundamentally designed to be usable with exactly one global ``logger`` object dispatching logging messages to the configured handlers. In some circumstances, it may be useful to have specific messages logged to specific handlers.\n\nFor example, supposing you want to split your logs in two files based on an arbitrary identifier, you can achieve that by combining |bind| and ``filter``::\n\n    from loguru import logger\n\n    def task_A():\n        logger_a = logger.bind(task=\"A\")\n        logger_a.info(\"Starting task A\")\n        do_something()\n        logger_a.success(\"End of task A\")\n\n    def task_B():\n        logger_b = logger.bind(task=\"B\")\n        logger_b.info(\"Starting task B\")\n        do_something_else()\n        logger_b.success(\"End of task B\")\n\n    logger.add(\"file_A.log\", filter=lambda record: record[\"extra\"][\"task\"] == \"A\")\n    logger.add(\"file_B.log\", filter=lambda record: record[\"extra\"][\"task\"] == \"B\")\n\n    task_A()\n    task_B()\n\nThat way, ``\"file_A.log\"`` and ``\"file_B.log\"`` will only contains logs from respectively the ``task_A()`` and ``task_B()`` function.\n\nNow, supposing that you have a lot of these tasks. It may be a bit cumbersome to configure every handlers like this. Most importantly, it may unnecessarily slow down your application as each log will need to be checked by the ``filter`` function of each handler. In such case, it is recommended to rely on the |copy.deepcopy| built-in method that will create an independent ``logger`` object. If you add a handler to a deep copied ``logger``, it will not be shared with others functions using the original ``logger``::\n\n    import copy\n    from loguru import logger\n\n    def task(task_id, logger):\n        logger.info(\"Starting task {}\", task_id)\n        do_something(task_id)\n        logger.success(\"End of task {}\", task_id)\n\n    logger.remove()\n\n    for task_id in [\"A\", \"B\", \"C\", \"D\", \"E\"]:\n        logger_ = copy.deepcopy(logger)\n        logger_.add(\"file_%s.log\" % task_id)\n        task(task_id, logger_)\n\nNote that you may encounter errors if you try to copy a ``logger`` to which non-picklable handlers have been added. For this reason, it is generally advised to remove all handlers before calling ``copy.deepcopy(logger)``.\n\n\nCompatibility with ``multiprocessing`` using ``enqueue`` argument\n-----------------------------------------------------------------\n\nOn Linux, thanks to |os.fork| there is no pitfall while using the ``logger`` inside another process started by the |multiprocessing| module. The child process will automatically inherit added handlers, the ``enqueue=True`` parameter is optional but is recommended as it would avoid concurrent access of your sink::\n\n    # Linux implementation\n    import multiprocessing\n    from loguru import logger\n\n    def my_process():\n        logger.info(\"Executing function in child process\")\n        logger.complete()\n\n    if __name__ == \"__main__\":\n        logger.add(\"file.log\", enqueue=True)\n\n        process = multiprocessing.Process(target=my_process)\n        process.start()\n        process.join()\n\n        logger.info(\"Done\")\n\nThings get a little more complicated on Windows. Indeed, this operating system does not support forking, so Python has to use an alternative method to create sub-processes called \"spawning\". This procedure requires the whole file where the child process is created to be reloaded from scratch. This does not interoperate very well with Loguru, causing handlers to be added twice without any synchronization or, on the contrary, not being added at all (depending on ``add()`` and ``remove()`` being called inside or outside the ``__main__`` branch). For this reason, the ``logger`` object need to be explicitly passed as an initializer argument of your child process::\n\n    # Windows implementation\n    import multiprocessing\n    from loguru import logger\n\n    def my_process(logger_):\n        logger_.info(\"Executing function in child process\")\n        logger_.complete()\n\n    if __name__ == \"__main__\":\n        logger.remove()  # Default \"sys.stderr\" sink is not picklable\n        logger.add(\"file.log\", enqueue=True)\n\n        process = multiprocessing.Process(target=my_process, args=(logger, ))\n        process.start()\n        process.join()\n\n        logger.info(\"Done\")\n\nWindows requires the added sinks to be picklable or otherwise will raise an error while creating the child process. Many stream objects like standard output and file descriptors are not picklable. In such case, the ``enqueue=True`` argument is required as it will allow the child process to only inherit the queue object where logs are sent.\n\nThe |multiprocessing| library is also commonly used to start a pool of workers using for example |Pool.map| or |Pool.apply|. Again, it will work flawlessly on Linux, but it will require some tinkering on Windows. You will probably not be able to pass the ``logger`` as an argument for your worker functions because it needs to be picklable, but although handlers added using ``enqueue=True`` are \"inheritable\", they are not \"picklable\". Instead, you will need to make use of the ``initializer`` and ``initargs`` parameters while creating the |Pool| object in a way allowing your workers to access the shared ``logger``. You can either assign it to a class attribute or override the global logger of your child processes:\n\n.. code::\n\n    # workers_a.py\n    class Worker:\n\n        _logger = None\n\n        @staticmethod\n        def set_logger(logger_):\n            Worker._logger = logger_\n\n        def work(self, x):\n            self._logger.info(\"Square rooting {}\", x)\n            return x**0.5\n\n\n.. code::\n\n    # workers_b.py\n    from loguru import logger\n\n    def set_logger(logger_):\n        global logger\n        logger = logger_\n\n    def work(x):\n        logger.info(\"Square rooting {}\", x)\n        return x**0.5\n\n\n.. code::\n\n    # main.py\n    from multiprocessing import Pool\n    from loguru import logger\n    import workers_a\n    import workers_b\n\n    if __name__ == \"__main__\":\n        logger.remove()\n        logger.add(\"file.log\", enqueue=True)\n\n        worker = workers_a.Worker()\n        with Pool(4, initializer=worker.set_logger, initargs=(logger, )) as pool:\n            results = pool.map(worker.work, [1, 10, 100])\n\n        with Pool(4, initializer=workers_b.set_logger, initargs=(logger, )) as pool:\n            results = pool.map(workers_b.work, [1, 10, 100])\n\n        logger.info(\"Done\")\n\nIndependently of the operating system, note that the process in which a handler is added with ``enqueue=True`` is in charge of the queue internally used. This means that you should avoid to ``.remove()`` such handler from the parent process is any child is likely to continue using it. More importantly, note that a |Thread| is started internally to consume the queue. Therefore, it is recommended to call |complete| before leaving |Process| to make sure the queue is left in a stable state.\n", "\"\"\"\n.. References and links rendered by Sphinx are kept here as \"module documentation\" so that they can\n   be used in the ``Logger`` docstrings but do not pollute ``help(logger)`` output.\n\n.. |Logger| replace:: :class:`~Logger`\n.. |add| replace:: :meth:`~Logger.add()`\n.. |remove| replace:: :meth:`~Logger.remove()`\n.. |complete| replace:: :meth:`~Logger.complete()`\n.. |catch| replace:: :meth:`~Logger.catch()`\n.. |bind| replace:: :meth:`~Logger.bind()`\n.. |contextualize| replace:: :meth:`~Logger.contextualize()`\n.. |patch| replace:: :meth:`~Logger.patch()`\n.. |opt| replace:: :meth:`~Logger.opt()`\n.. |log| replace:: :meth:`~Logger.log()`\n.. |level| replace:: :meth:`~Logger.level()`\n.. |enable| replace:: :meth:`~Logger.enable()`\n.. |disable| replace:: :meth:`~Logger.disable()`\n\n.. |str| replace:: :class:`str`\n.. |int| replace:: :class:`int`\n.. |bool| replace:: :class:`bool`\n.. |tuple| replace:: :class:`tuple`\n.. |namedtuple| replace:: :func:`namedtuple<collections.namedtuple>`\n.. |list| replace:: :class:`list`\n.. |dict| replace:: :class:`dict`\n.. |str.format| replace:: :meth:`str.format()`\n.. |Path| replace:: :class:`pathlib.Path`\n.. |match.groupdict| replace:: :meth:`re.Match.groupdict()`\n.. |Handler| replace:: :class:`logging.Handler`\n.. |sys.stderr| replace:: :data:`sys.stderr`\n.. |sys.exc_info| replace:: :func:`sys.exc_info()`\n.. |time| replace:: :class:`datetime.time`\n.. |datetime| replace:: :class:`datetime.datetime`\n.. |timedelta| replace:: :class:`datetime.timedelta`\n.. |open| replace:: :func:`open()`\n.. |logging| replace:: :mod:`logging`\n.. |signal| replace:: :mod:`signal`\n.. |contextvars| replace:: :mod:`contextvars`\n.. |Thread.run| replace:: :meth:`Thread.run()<threading.Thread.run()>`\n.. |Exception| replace:: :class:`Exception`\n.. |AbstractEventLoop| replace:: :class:`AbstractEventLoop<asyncio.AbstractEventLoop>`\n.. |asyncio.get_running_loop| replace:: :func:`asyncio.get_running_loop()`\n.. |asyncio.run| replace:: :func:`asyncio.run()`\n.. |loop.run_until_complete| replace::\n    :meth:`loop.run_until_complete()<asyncio.loop.run_until_complete()>`\n.. |loop.create_task| replace:: :meth:`loop.create_task()<asyncio.loop.create_task()>`\n\n.. |logger.trace| replace:: :meth:`logger.trace()<Logger.trace()>`\n.. |logger.debug| replace:: :meth:`logger.debug()<Logger.debug()>`\n.. |logger.info| replace:: :meth:`logger.info()<Logger.info()>`\n.. |logger.success| replace:: :meth:`logger.success()<Logger.success()>`\n.. |logger.warning| replace:: :meth:`logger.warning()<Logger.warning()>`\n.. |logger.error| replace:: :meth:`logger.error()<Logger.error()>`\n.. |logger.critical| replace:: :meth:`logger.critical()<Logger.critical()>`\n\n.. |file-like object| replace:: ``file-like object``\n.. _file-like object: https://docs.python.org/3/glossary.html#term-file-object\n.. |callable| replace:: ``callable``\n.. _callable: https://docs.python.org/3/library/functions.html#callable\n.. |coroutine function| replace:: ``coroutine function``\n.. _coroutine function: https://docs.python.org/3/glossary.html#term-coroutine-function\n.. |re.Pattern| replace:: ``re.Pattern``\n.. _re.Pattern: https://docs.python.org/3/library/re.html#re-objects\n\n.. |better_exceptions| replace:: ``better_exceptions``\n.. _better_exceptions: https://github.com/Qix-/better-exceptions\n\n.. _Pendulum: https://pendulum.eustace.io/docs/#tokens\n.. _@sdispater: https://github.com/sdispater\n.. _@Qix-: https://github.com/Qix-\n.. _Formatting directives: https://docs.python.org/3/library/string.html#format-string-syntax\n.. _reentrant: https://en.wikipedia.org/wiki/Reentrancy_(computing)\n\"\"\"\nimport builtins\nimport contextlib\nimport functools\nimport itertools\nimport logging\nimport re\nimport sys\nimport warnings\nfrom collections import namedtuple\nfrom inspect import isclass, iscoroutinefunction, isgeneratorfunction\nfrom multiprocessing import current_process\nfrom os.path import basename, splitext\nfrom threading import current_thread\n\nfrom . import _asyncio_loop, _colorama, _defaults, _filters\nfrom ._better_exceptions import ExceptionFormatter\nfrom ._colorizer import Colorizer\nfrom ._contextvars import ContextVar\nfrom ._datetime import aware_now\nfrom ._error_interceptor import ErrorInterceptor\nfrom ._file_sink import FileSink\nfrom ._get_frame import get_frame\nfrom ._handler import Handler\nfrom ._locks_machinery import create_logger_lock\nfrom ._recattrs import RecordException, RecordFile, RecordLevel, RecordProcess, RecordThread\nfrom ._simple_sinks import AsyncSink, CallableSink, StandardSink, StreamSink\n\nif sys.version_info >= (3, 6):\n    from os import PathLike\nelse:\n    from pathlib import PurePath as PathLike\n\n\nLevel = namedtuple(\"Level\", [\"name\", \"no\", \"color\", \"icon\"])\n\nstart_time = aware_now()\n\ncontext = ContextVar(\"loguru_context\", default={})\n\n\nclass Core:\n    def __init__(self):\n        levels = [\n            Level(\n                \"TRACE\",\n                _defaults.LOGURU_TRACE_NO,\n                _defaults.LOGURU_TRACE_COLOR,\n                _defaults.LOGURU_TRACE_ICON,\n            ),\n            Level(\n                \"DEBUG\",\n                _defaults.LOGURU_DEBUG_NO,\n                _defaults.LOGURU_DEBUG_COLOR,\n                _defaults.LOGURU_DEBUG_ICON,\n            ),\n            Level(\n                \"INFO\",\n                _defaults.LOGURU_INFO_NO,\n                _defaults.LOGURU_INFO_COLOR,\n                _defaults.LOGURU_INFO_ICON,\n            ),\n            Level(\n                \"SUCCESS\",\n                _defaults.LOGURU_SUCCESS_NO,\n                _defaults.LOGURU_SUCCESS_COLOR,\n                _defaults.LOGURU_SUCCESS_ICON,\n            ),\n            Level(\n                \"WARNING\",\n                _defaults.LOGURU_WARNING_NO,\n                _defaults.LOGURU_WARNING_COLOR,\n                _defaults.LOGURU_WARNING_ICON,\n            ),\n            Level(\n                \"ERROR\",\n                _defaults.LOGURU_ERROR_NO,\n                _defaults.LOGURU_ERROR_COLOR,\n                _defaults.LOGURU_ERROR_ICON,\n            ),\n            Level(\n                \"CRITICAL\",\n                _defaults.LOGURU_CRITICAL_NO,\n                _defaults.LOGURU_CRITICAL_COLOR,\n                _defaults.LOGURU_CRITICAL_ICON,\n            ),\n        ]\n        self.levels = {level.name: level for level in levels}\n        self.levels_ansi_codes = {\n            name: Colorizer.ansify(level.color) for name, level in self.levels.items()\n        }\n        self.levels_ansi_codes[None] = \"\"\n\n        self.handlers_count = itertools.count()\n        self.handlers = {}\n\n        self.extra = {}\n        self.patcher = None\n\n        self.min_level = float(\"inf\")\n        self.enabled = {}\n        self.activation_list = []\n        self.activation_none = True\n\n        self.lock = create_logger_lock()\n\n    def __getstate__(self):\n        state = self.__dict__.copy()\n        state[\"lock\"] = None\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.lock = create_logger_lock()\n\n\nclass Logger:\n    \"\"\"An object to dispatch logging messages to configured handlers.\n\n    The |Logger| is the core object of ``loguru``, every logging configuration and usage pass\n    through a call to one of its methods. There is only one logger, so there is no need to retrieve\n    one before usage.\n\n    Once the ``logger`` is imported, it can be used to write messages about events happening in your\n    code. By reading the output logs of your application, you gain a better understanding of the\n    flow of your program and you more easily track and debug unexpected behaviors.\n\n    Handlers to which the logger sends log messages are added using the |add| method. Note that you\n    can use the |Logger| right after import as it comes pre-configured (logs are emitted to\n    |sys.stderr| by default). Messages can be logged with different severity levels and using braces\n    attributes like the |str.format| method do.\n\n    When a message is logged, a \"record\" is associated with it. This record is a dict which contains\n    information about the logging context: time, function, file, line, thread, level... It also\n    contains the ``__name__`` of the module, this is why you don't need named loggers.\n\n    You should not instantiate a |Logger| by yourself, use ``from loguru import logger`` instead.\n    \"\"\"\n\n    def __init__(self, core, exception, depth, record, lazy, colors, raw, capture, patcher, extra):\n        self._core = core\n        self._options = (exception, depth, record, lazy, colors, raw, capture, patcher, extra)\n\n    def __repr__(self):\n        return \"<loguru.logger handlers=%r>\" % list(self._core.handlers.values())\n\n    def add(\n        self,\n        sink,\n        *,\n        level=_defaults.LOGURU_LEVEL,\n        format=_defaults.LOGURU_FORMAT,\n        filter=_defaults.LOGURU_FILTER,\n        colorize=_defaults.LOGURU_COLORIZE,\n        serialize=_defaults.LOGURU_SERIALIZE,\n        backtrace=_defaults.LOGURU_BACKTRACE,\n        diagnose=_defaults.LOGURU_DIAGNOSE,\n        enqueue=_defaults.LOGURU_ENQUEUE,\n        catch=_defaults.LOGURU_CATCH,\n        **kwargs\n    ):\n        r\"\"\"Add a handler sending log messages to a sink adequately configured.\n\n        Parameters\n        ----------\n        sink : |file-like object|_, |str|, |Path|, |callable|_, |coroutine function|_ or |Handler|\n            An object in charge of receiving formatted logging messages and propagating them to an\n            appropriate endpoint.\n        level : |int| or |str|, optional\n            The minimum severity level from which logged messages should be sent to the sink.\n        format : |str| or |callable|_, optional\n            The template used to format logged messages before being sent to the sink.\n        filter : |callable|_, |str| or |dict|, optional\n            A directive optionally used to decide for each logged message whether it should be sent\n            to the sink or not.\n        colorize : |bool|, optional\n            Whether the color markups contained in the formatted message should be converted to ansi\n            codes for terminal coloration, or stripped otherwise. If ``None``, the choice is\n            automatically made based on the sink being a tty or not.\n        serialize : |bool|, optional\n            Whether the logged message and its records should be first converted to a JSON string\n            before being sent to the sink.\n        backtrace : |bool|, optional\n            Whether the exception trace formatted should be extended upward, beyond the catching\n            point, to show the full stacktrace which generated the error.\n        diagnose : |bool|, optional\n            Whether the exception trace should display the variables values to eases the debugging.\n            This should be set to ``False`` in production to avoid leaking sensitive data.\n        enqueue : |bool|, optional\n            Whether the messages to be logged should first pass through a multiprocess-safe queue\n            before reaching the sink. This is useful while logging to a file through multiple\n            processes. This also has the advantage of making logging calls non-blocking.\n        catch : |bool|, optional\n            Whether errors occurring while sink handles logs messages should be automatically\n            caught. If ``True``, an exception message is displayed on |sys.stderr| but the exception\n            is not propagated to the caller, preventing your app to crash.\n        **kwargs\n            Additional parameters that are only valid to configure a coroutine or file sink (see\n            below).\n\n\n        If and only if the sink is a coroutine function, the following parameter applies:\n\n        Parameters\n        ----------\n        loop : |AbstractEventLoop|, optional\n            The event loop in which the asynchronous logging task will be scheduled and executed. If\n            ``None``, the loop used is the one returned by |asyncio.get_running_loop| at the time of\n            the logging call (task is discarded if there is no loop currently running).\n\n\n        If and only if the sink is a file path, the following parameters apply:\n\n        Parameters\n        ----------\n        rotation : |str|, |int|, |time|, |timedelta| or |callable|_, optional\n            A condition indicating whenever the current logged file should be closed and a new one\n            started.\n        retention : |str|, |int|, |timedelta| or |callable|_, optional\n            A directive filtering old files that should be removed during rotation or end of\n            program.\n        compression : |str| or |callable|_, optional\n            A compression or archive format to which log files should be converted at closure.\n        delay : |bool|, optional\n            Whether the file should be created as soon as the sink is configured, or delayed until\n            first logged message. It defaults to ``False``.\n        mode : |str|, optional\n            The opening mode as for built-in |open| function. It defaults to ``\"a\"`` (open the\n            file in appending mode).\n        buffering : |int|, optional\n            The buffering policy as for built-in |open| function. It defaults to ``1`` (line\n            buffered file).\n        encoding : |str|, optional\n            The file encoding as for built-in |open| function. It defaults to ``\"utf8\"``.\n        **kwargs\n            Others parameters are passed to the built-in |open| function.\n\n        Returns\n        -------\n        :class:`int`\n            An identifier associated with the added sink and which should be used to\n            |remove| it.\n\n        Raises\n        ------\n        ValueError\n            If any of the arguments passed to configure the sink is invalid.\n\n        Notes\n        -----\n        Extended summary follows.\n\n        .. _sink:\n\n        .. rubric:: The sink parameter\n\n        The ``sink`` handles incoming log messages and proceed to their writing somewhere and\n        somehow. A sink can take many forms:\n\n        - A |file-like object|_ like ``sys.stderr`` or ``open(\"somefile.log\", \"w\")``. Anything with\n          a ``.write()`` method is considered as a file-like object. Custom handlers may also\n          implement ``flush()`` (called after each logged message), ``stop()`` (called at sink\n          termination) and ``complete()`` (awaited by the eponymous method).\n        - A file path as |str| or |Path|. It can be parametrized with some additional parameters,\n          see below.\n        - A |callable|_ (such as a simple function) like ``lambda msg: print(msg)``. This\n          allows for logging procedure entirely defined by user preferences and needs.\n        - A asynchronous |coroutine function|_ defined with the ``async def`` statement. The\n          coroutine object returned by such function will be added to the event loop using\n          |loop.create_task|. The tasks should be awaited before ending the loop by using\n          |complete|.\n        - A built-in |Handler| like ``logging.StreamHandler``. In such a case, the `Loguru` records\n          are automatically converted to the structure expected by the |logging| module.\n\n        Note that the logging functions are not `reentrant`_. This means you should avoid using\n        the ``logger`` inside any of your sinks or from within |signal| handlers. Otherwise, you\n        may face deadlock if the module's sink was not explicitly disabled.\n\n        .. _message:\n\n        .. rubric:: The logged message\n\n        The logged message passed to all added sinks is nothing more than a string of the\n        formatted log, to which a special attribute is associated: the ``.record`` which is a dict\n        containing all contextual information possibly needed (see below).\n\n        Logged messages are formatted according to the ``format`` of the added sink. This format\n        is usually a string containing braces fields to display attributes from the record dict.\n\n        If fine-grained control is needed, the ``format`` can also be a function which takes the\n        record as parameter and return the format template string. However, note that in such a\n        case, you should take care of appending the line ending and exception field to the returned\n        format, while ``\"\\n{exception}\"`` is automatically appended for convenience if ``format`` is\n        a string.\n\n        The ``filter`` attribute can be used to control which messages are effectively passed to the\n        sink and which one are ignored. A function can be used, accepting the record as an\n        argument, and returning ``True`` if the message should be logged, ``False`` otherwise. If\n        a string is used, only the records with the same ``name`` and its children will be allowed.\n        One can also pass a ``dict`` mapping module names to minimum required level. In such case,\n        each log record will search for it's closest parent in the ``dict`` and use the associated\n        level as the filter. The ``dict`` values can be ``int`` severity, ``str`` level name or\n        ``True`` and ``False`` to respectively authorize and discard all module logs\n        unconditionally. In order to set a default level, the ``\"\"`` module name should be used as\n        it is the parent of all modules (it does not suppress global ``level`` threshold, though).\n\n        Note that while calling a logging method, the keyword arguments (if any) are automatically\n        added to the ``extra`` dict for convenient contextualization (in addition to being used for\n        formatting).\n\n        .. _levels:\n\n        .. rubric:: The severity levels\n\n        Each logged message is associated with a severity level. These levels make it possible to\n        prioritize messages and to choose the verbosity of the logs according to usages. For\n        example, it allows to display some debugging information to a developer, while hiding it to\n        the end user running the application.\n\n        The ``level`` attribute of every added sink controls the minimum threshold from which log\n        messages are allowed to be emitted. While using the ``logger``, you are in charge of\n        configuring the appropriate granularity of your logs. It is possible to add even more custom\n        levels by using the |level| method.\n\n        Here are the standard levels with their default severity value, each one is associated with\n        a logging method of the same name:\n\n        +----------------------+------------------------+------------------------+\n        | Level name           | Severity value         | Logger method          |\n        +======================+========================+========================+\n        | ``TRACE``            | 5                      | |logger.trace|         |\n        +----------------------+------------------------+------------------------+\n        | ``DEBUG``            | 10                     | |logger.debug|         |\n        +----------------------+------------------------+------------------------+\n        | ``INFO``             | 20                     | |logger.info|          |\n        +----------------------+------------------------+------------------------+\n        | ``SUCCESS``          | 25                     | |logger.success|       |\n        +----------------------+------------------------+------------------------+\n        | ``WARNING``          | 30                     | |logger.warning|       |\n        +----------------------+------------------------+------------------------+\n        | ``ERROR``            | 40                     | |logger.error|         |\n        +----------------------+------------------------+------------------------+\n        | ``CRITICAL``         | 50                     | |logger.critical|      |\n        +----------------------+------------------------+------------------------+\n\n        .. _record:\n\n        .. rubric:: The record dict\n\n        The record is just a Python dict, accessible from sinks by ``message.record``. It contains\n        all contextual information of the logging call (time, function, file, line, level, etc.).\n\n        Each of its key can be used in the handler's ``format`` so the corresponding value is\n        properly displayed in the logged message (e.g. ``\"{level}\"`` -> ``\"INFO\"``). Some record's\n        values are objects with two or more attributes, these can be formatted with ``\"{key.attr}\"``\n        (``\"{key}\"`` would display one by default). `Formatting directives`_ like ``\"{key: >3}\"``\n        also works and is particularly useful for time (see below).\n\n        +------------+---------------------------------+----------------------------+\n        | Key        | Description                     | Attributes                 |\n        +============+=================================+============================+\n        | elapsed    | The time elapsed since the      | See |timedelta|            |\n        |            | start of the program            |                            |\n        +------------+---------------------------------+----------------------------+\n        | exception  | The formatted exception if any, | ``type``, ``value``,       |\n        |            | ``None`` otherwise              | ``traceback``              |\n        +------------+---------------------------------+----------------------------+\n        | extra      | The dict of attributes          | None                       |\n        |            | bound by the user (see |bind|)  |                            |\n        +------------+---------------------------------+----------------------------+\n        | file       | The file where the logging call | ``name`` (default),        |\n        |            | was made                        | ``path``                   |\n        +------------+---------------------------------+----------------------------+\n        | function   | The function from which the     | None                       |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | level      | The severity used to log the    | ``name`` (default),        |\n        |            | message                         | ``no``, ``icon``           |\n        +------------+---------------------------------+----------------------------+\n        | line       | The line number in the source   | None                       |\n        |            | code                            |                            |\n        +------------+---------------------------------+----------------------------+\n        | message    | The logged message (not yet     | None                       |\n        |            | formatted)                      |                            |\n        +------------+---------------------------------+----------------------------+\n        | module     | The module where the logging    | None                       |\n        |            | call was made                   |                            |\n        +------------+---------------------------------+----------------------------+\n        | name       | The ``__name__`` where the      | None                       |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | process    | The process in which the        | ``name``, ``id`` (default) |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | thread     | The thread in which the         | ``name``, ``id`` (default) |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | time       | The aware local time when the   | See |datetime|             |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n\n        .. _time:\n\n        .. rubric:: The time formatting\n\n        To use your favorite time representation, you can set it directly in the time formatter\n        specifier of your handler format, like for example ``format=\"{time:HH:mm:ss} {message}\"``.\n        Note that this datetime represents your local time, and it is also made timezone-aware,\n        so you can display the UTC offset to avoid ambiguities.\n\n        The time field can be formatted using more human-friendly tokens. These constitute a subset\n        of the one used by the `Pendulum`_ library of `@sdispater`_. To escape a token, just add\n        square brackets around it, for example ``\"[YY]\"`` would display literally ``\"YY\"``.\n\n        If you prefer to display UTC rather than local time, you can add ``\"!UTC\"`` at the very end\n        of the time format, like ``{time:HH:mm:ss!UTC}``. Doing so will convert the ``datetime``\n        to UTC before formatting.\n\n        If no time formatter specifier is used, like for example if ``format=\"{time} {message}\"``,\n        the default one will use ISO 8601.\n\n        +------------------------+---------+----------------------------------------+\n        |                        | Token   | Output                                 |\n        +========================+=========+========================================+\n        | Year                   | YYYY    | 2000, 2001, 2002 ... 2012, 2013        |\n        |                        +---------+----------------------------------------+\n        |                        | YY      | 00, 01, 02 ... 12, 13                  |\n        +------------------------+---------+----------------------------------------+\n        | Quarter                | Q       | 1 2 3 4                                |\n        +------------------------+---------+----------------------------------------+\n        | Month                  | MMMM    | January, February, March ...           |\n        |                        +---------+----------------------------------------+\n        |                        | MMM     | Jan, Feb, Mar ...                      |\n        |                        +---------+----------------------------------------+\n        |                        | MM      | 01, 02, 03 ... 11, 12                  |\n        |                        +---------+----------------------------------------+\n        |                        | M       | 1, 2, 3 ... 11, 12                     |\n        +------------------------+---------+----------------------------------------+\n        | Day of Year            | DDDD    | 001, 002, 003 ... 364, 365             |\n        |                        +---------+----------------------------------------+\n        |                        | DDD     | 1, 2, 3 ... 364, 365                   |\n        +------------------------+---------+----------------------------------------+\n        | Day of Month           | DD      | 01, 02, 03 ... 30, 31                  |\n        |                        +---------+----------------------------------------+\n        |                        | D       | 1, 2, 3 ... 30, 31                     |\n        +------------------------+---------+----------------------------------------+\n        | Day of Week            | dddd    | Monday, Tuesday, Wednesday ...         |\n        |                        +---------+----------------------------------------+\n        |                        | ddd     | Mon, Tue, Wed ...                      |\n        |                        +---------+----------------------------------------+\n        |                        | d       | 0, 1, 2 ... 6                          |\n        +------------------------+---------+----------------------------------------+\n        | Days of ISO Week       | E       | 1, 2, 3 ... 7                          |\n        +------------------------+---------+----------------------------------------+\n        | Hour                   | HH      | 00, 01, 02 ... 23, 24                  |\n        |                        +---------+----------------------------------------+\n        |                        | H       | 0, 1, 2 ... 23, 24                     |\n        |                        +---------+----------------------------------------+\n        |                        | hh      | 01, 02, 03 ... 11, 12                  |\n        |                        +---------+----------------------------------------+\n        |                        | h       | 1, 2, 3 ... 11, 12                     |\n        +------------------------+---------+----------------------------------------+\n        | Minute                 | mm      | 00, 01, 02 ... 58, 59                  |\n        |                        +---------+----------------------------------------+\n        |                        | m       | 0, 1, 2 ... 58, 59                     |\n        +------------------------+---------+----------------------------------------+\n        | Second                 | ss      | 00, 01, 02 ... 58, 59                  |\n        |                        +---------+----------------------------------------+\n        |                        | s       | 0, 1, 2 ... 58, 59                     |\n        +------------------------+---------+----------------------------------------+\n        | Fractional Second      | S       | 0 1 ... 8 9                            |\n        |                        +---------+----------------------------------------+\n        |                        | SS      | 00, 01, 02 ... 98, 99                  |\n        |                        +---------+----------------------------------------+\n        |                        | SSS     | 000 001 ... 998 999                    |\n        |                        +---------+----------------------------------------+\n        |                        | SSSS... | 000[0..] 001[0..] ... 998[0..] 999[0..]|\n        |                        +---------+----------------------------------------+\n        |                        | SSSSSS  | 000000 000001 ... 999998 999999        |\n        +------------------------+---------+----------------------------------------+\n        | AM / PM                | A       | AM, PM                                 |\n        +------------------------+---------+----------------------------------------+\n        | Timezone               | Z       | -07:00, -06:00 ... +06:00, +07:00      |\n        |                        +---------+----------------------------------------+\n        |                        | ZZ      | -0700, -0600 ... +0600, +0700          |\n        |                        +---------+----------------------------------------+\n        |                        | zz      | EST CST ... MST PST                    |\n        +------------------------+---------+----------------------------------------+\n        | Seconds timestamp      | X       | 1381685817, 1234567890.123             |\n        +------------------------+---------+----------------------------------------+\n        | Microseconds timestamp | x       | 1234567890123                          |\n        +------------------------+---------+----------------------------------------+\n\n        .. _file:\n\n        .. rubric:: The file sinks\n\n        If the sink is a |str| or a |Path|, the corresponding file will be opened for writing logs.\n        The path can also contain a special ``\"{time}\"`` field that will be formatted with the\n        current date at file creation.\n\n        The ``rotation`` check is made before logging each message. If there is already an existing\n        file with the same name that the file to be created, then the existing file is renamed by\n        appending the date to its basename to prevent file overwriting. This parameter accepts:\n\n        - an |int| which corresponds to the maximum file size in bytes before that the current\n          logged file is closed and a new one started over.\n        - a |timedelta| which indicates the frequency of each new rotation.\n        - a |time| which specifies the hour when the daily rotation should occur.\n        - a |str| for human-friendly parametrization of one of the previously enumerated types.\n          Examples: ``\"100 MB\"``, ``\"0.5 GB\"``, ``\"1 month 2 weeks\"``, ``\"4 days\"``, ``\"10h\"``,\n          ``\"monthly\"``, ``\"18:00\"``, ``\"sunday\"``, ``\"w0\"``, ``\"monday at 12:00\"``, ...\n        - a |callable|_ which will be invoked before logging. It should accept two arguments: the\n          logged message and the file object, and it should return ``True`` if the rotation should\n          happen now, ``False`` otherwise.\n\n        The ``retention`` occurs at rotation or at sink stop if rotation is ``None``. Files are\n        selected if they match the pattern ``\"basename(.*).ext(.*)\"`` (possible time fields are\n        beforehand replaced with ``.*``) based on the sink file. This parameter accepts:\n\n        - an |int| which indicates the number of log files to keep, while older files are removed.\n        - a |timedelta| which specifies the maximum age of files to keep.\n        - a |str| for human-friendly parametrization of the maximum age of files to keep.\n          Examples: ``\"1 week, 3 days\"``, ``\"2 months\"``, ...\n        - a |callable|_ which will be invoked before the retention process. It should accept the\n          list of log files as argument and process to whatever it wants (moving files, removing\n          them, etc.).\n\n        The ``compression`` happens at rotation or at sink stop if rotation is ``None``. This\n        parameter accepts:\n\n        - a |str| which corresponds to the compressed or archived file extension. This can be one\n          of: ``\"gz\"``, ``\"bz2\"``, ``\"xz\"``, ``\"lzma\"``, ``\"tar\"``, ``\"tar.gz\"``, ``\"tar.bz2\"``,\n          ``\"tar.xz\"``, ``\"zip\"``.\n        - a |callable|_ which will be invoked before file termination. It should accept the path of\n          the log file as argument and process to whatever it wants (custom compression, network\n          sending, removing it, etc.).\n\n        Either way, if you use a custom function designed according to your preferences, you must be\n        very careful not to use the ``logger`` within your function. Otherwise, there is a risk that\n        your program hang because of a deadlock.\n\n        .. _color:\n\n        .. rubric:: The color markups\n\n        To add colors to your logs, you just have to enclose your format string with the appropriate\n        tags (e.g. ``<red>some message</red>``). These tags are automatically removed if the sink\n        doesn't support ansi codes. For convenience, you can use ``</>`` to close the last opening\n        tag without repeating its name (e.g. ``<red>another message</>``).\n\n        The special tag ``<level>`` (abbreviated with ``<lvl>``) is transformed according to\n        the configured color of the logged message level.\n\n        Tags which are not recognized will raise an exception during parsing, to inform you about\n        possible misuse. If you wish to display a markup tag literally, you can escape it by\n        prepending a ``\\`` like for example ``\\<blue>``. If, for some reason, you need to escape a\n        string programmatically, note that the regex used internally to parse markup tags is\n        ``r\"\\\\?</?((?:[fb]g\\s)?[^<>\\s]*)>\"``.\n\n        Note that when logging a message with ``opt(colors=True)``, color tags present in the\n        formatting arguments (``args`` and ``kwargs``) are completely ignored. This is important if\n        you need to log strings containing markups that might interfere with the color tags (in this\n        case, do not use f-string).\n\n        Here are the available tags (note that compatibility may vary depending on terminal):\n\n        +------------------------------------+--------------------------------------+\n        | Color (abbr)                       | Styles (abbr)                        |\n        +====================================+======================================+\n        | Black (k)                          | Bold (b)                             |\n        +------------------------------------+--------------------------------------+\n        | Blue (e)                           | Dim (d)                              |\n        +------------------------------------+--------------------------------------+\n        | Cyan (c)                           | Normal (n)                           |\n        +------------------------------------+--------------------------------------+\n        | Green (g)                          | Italic (i)                           |\n        +------------------------------------+--------------------------------------+\n        | Magenta (m)                        | Underline (u)                        |\n        +------------------------------------+--------------------------------------+\n        | Red (r)                            | Strike (s)                           |\n        +------------------------------------+--------------------------------------+\n        | White (w)                          | Reverse (v)                          |\n        +------------------------------------+--------------------------------------+\n        | Yellow (y)                         | Blink (l)                            |\n        +------------------------------------+--------------------------------------+\n        |                                    | Hide (h)                             |\n        +------------------------------------+--------------------------------------+\n\n        Usage:\n\n        +-----------------+-------------------------------------------------------------------+\n        | Description     | Examples                                                          |\n        |                 +---------------------------------+---------------------------------+\n        |                 | Foreground                      | Background                      |\n        +=================+=================================+=================================+\n        | Basic colors    | ``<red>``, ``<r>``              | ``<GREEN>``, ``<G>``            |\n        +-----------------+---------------------------------+---------------------------------+\n        | Light colors    | ``<light-blue>``, ``<le>``      | ``<LIGHT-CYAN>``, ``<LC>``      |\n        +-----------------+---------------------------------+---------------------------------+\n        | 8-bit colors    | ``<fg 86>``, ``<fg 255>``       | ``<bg 42>``, ``<bg 9>``         |\n        +-----------------+---------------------------------+---------------------------------+\n        | Hex colors      | ``<fg #00005f>``, ``<fg #EE1>`` | ``<bg #AF5FD7>``, ``<bg #fff>`` |\n        +-----------------+---------------------------------+---------------------------------+\n        | RGB colors      | ``<fg 0,95,0>``                 | ``<bg 72,119,65>``              |\n        +-----------------+---------------------------------+---------------------------------+\n        | Stylizing       | ``<bold>``, ``<b>``,  ``<underline>``, ``<u>``                    |\n        +-----------------+-------------------------------------------------------------------+\n\n        .. _env:\n\n        .. rubric:: The environment variables\n\n        The default values of sink parameters can be entirely customized. This is particularly\n        useful if you don't like the log format of the pre-configured sink.\n\n        Each of the |add| default parameter can be modified by setting the ``LOGURU_[PARAM]``\n        environment variable. For example on Linux: ``export LOGURU_FORMAT=\"{time} - {message}\"``\n        or ``export LOGURU_DIAGNOSE=NO``.\n\n        The default levels' attributes can also be modified by setting the ``LOGURU_[LEVEL]_[ATTR]``\n        environment variable. For example, on Windows: ``setx LOGURU_DEBUG_COLOR \"<blue>\"``\n        or ``setx LOGURU_TRACE_ICON \"\ud83d\ude80\"``. If you use the ``set`` command, do not include quotes\n        but escape special symbol as needed, e.g. ``set LOGURU_DEBUG_COLOR=^<blue^>``.\n\n        If you want to disable the pre-configured sink, you can set the ``LOGURU_AUTOINIT``\n        variable to ``False``.\n\n        On Linux, you will probably need to edit the ``~/.profile`` file to make this persistent. On\n        Windows, don't forget to restart your terminal for the change to be taken into account.\n\n        Examples\n        --------\n        >>> logger.add(sys.stdout, format=\"{time} - {level} - {message}\", filter=\"sub.module\")\n\n        >>> logger.add(\"file_{time}.log\", level=\"TRACE\", rotation=\"100 MB\")\n\n        >>> def debug_only(record):\n        ...     return record[\"level\"].name == \"DEBUG\"\n        ...\n        >>> logger.add(\"debug.log\", filter=debug_only)  # Other levels are filtered out\n\n        >>> def my_sink(message):\n        ...     record = message.record\n        ...     update_db(message, time=record[\"time\"], level=record[\"level\"])\n        ...\n        >>> logger.add(my_sink)\n\n        >>> level_per_module = {\n        ...     \"\": \"DEBUG\",\n        ...     \"third.lib\": \"WARNING\",\n        ...     \"anotherlib\": False\n        ... }\n        >>> logger.add(lambda m: print(m, end=\"\"), filter=level_per_module, level=0)\n\n        >>> async def publish(message):\n        ...     await api.post(message)\n        ...\n        >>> logger.add(publish, serialize=True)\n\n        >>> from logging import StreamHandler\n        >>> logger.add(StreamHandler(sys.stderr), format=\"{message}\")\n\n        >>> class RandomStream:\n        ...     def __init__(self, seed, threshold):\n        ...         self.threshold = threshold\n        ...         random.seed(seed)\n        ...     def write(self, message):\n        ...         if random.random() > self.threshold:\n        ...             print(message)\n        ...\n        >>> stream_object = RandomStream(seed=12345, threshold=0.25)\n        >>> logger.add(stream_object, level=\"INFO\")\n        \"\"\"\n        with self._core.lock:\n            handler_id = next(self._core.handlers_count)\n\n        error_interceptor = ErrorInterceptor(catch, handler_id)\n\n        if colorize is None and serialize:\n            colorize = False\n\n        if isinstance(sink, (str, PathLike)):\n            path = sink\n            name = \"'%s'\" % path\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = FileSink(path, **kwargs)\n            kwargs = {}\n            encoding = wrapped_sink.encoding\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif hasattr(sink, \"write\") and callable(sink.write):\n            name = getattr(sink, \"name\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = _colorama.should_colorize(sink)\n\n            if colorize is True and _colorama.should_wrap(sink):\n                stream = _colorama.wrap(sink)\n            else:\n                stream = sink\n\n            wrapped_sink = StreamSink(stream)\n            encoding = getattr(sink, \"encoding\", None)\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif isinstance(sink, logging.Handler):\n            name = repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = StandardSink(sink)\n            encoding = getattr(sink, \"encoding\", None)\n            terminator = \"\"\n            exception_prefix = \"\\n\"\n        elif iscoroutinefunction(sink) or iscoroutinefunction(getattr(sink, \"__call__\", None)):\n            name = getattr(sink, \"__name__\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            loop = kwargs.pop(\"loop\", None)\n\n            # The worker thread needs an event loop, it can't create a new one internally because it\n            # has to be accessible by the user while calling \"complete()\", instead we use the global\n            # one when the sink is added. If \"enqueue=False\" the event loop is dynamically retrieved\n            # at each logging call, which is much more convenient. However, coroutine can't access\n            # running loop in Python 3.5.2 and earlier versions, see python/asyncio#452.\n            if enqueue and loop is None:\n                try:\n                    loop = _asyncio_loop.get_running_loop()\n                except RuntimeError as e:\n                    raise ValueError(\n                        \"An event loop is required to add a coroutine sink with `enqueue=True`, \"\n                        \"but but none has been passed as argument and none is currently running.\"\n                    ) from e\n\n            coro = sink if iscoroutinefunction(sink) else sink.__call__\n            wrapped_sink = AsyncSink(coro, loop, error_interceptor)\n            encoding = \"utf8\"\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif callable(sink):\n            name = getattr(sink, \"__name__\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = CallableSink(sink)\n            encoding = \"utf8\"\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        else:\n            raise TypeError(\"Cannot log to objects of type '%s'\" % type(sink).__name__)\n\n        if kwargs:\n            raise TypeError(\"add() got an unexpected keyword argument '%s'\" % next(iter(kwargs)))\n\n        if filter is None:\n            filter_func = None\n        elif filter == \"\":\n            filter_func = _filters.filter_none\n        elif isinstance(filter, str):\n            parent = filter + \".\"\n            length = len(parent)\n            filter_func = functools.partial(_filters.filter_by_name, parent=parent, length=length)\n        elif isinstance(filter, dict):\n            level_per_module = {}\n            for module, level_ in filter.items():\n                if module is not None and not isinstance(module, str):\n                    raise TypeError(\n                        \"The filter dict contains an invalid module, \"\n                        \"it should be a string (or None), not: '%s'\" % type(module).__name__\n                    )\n                if level_ is False:\n                    levelno_ = False\n                elif level_ is True:\n                    levelno_ = 0\n                elif isinstance(level_, str):\n                    try:\n                        levelno_ = self.level(level_).no\n                    except ValueError:\n                        raise ValueError(\n                            \"The filter dict contains a module '%s' associated to a level name \"\n                            \"which does not exist: '%s'\" % (module, level_)\n                        )\n                elif isinstance(level_, int):\n                    levelno_ = level_\n                else:\n                    raise TypeError(\n                        \"The filter dict contains a module '%s' associated to an invalid level, \"\n                        \"it should be an integer, a string or a boolean, not: '%s'\"\n                        % (module, type(level_).__name__)\n                    )\n                if levelno_ < 0:\n                    raise ValueError(\n                        \"The filter dict contains a module '%s' associated to an invalid level, \"\n                        \"it should be a positive integer, not: '%d'\" % (module, levelno_)\n                    )\n                level_per_module[module] = levelno_\n            filter_func = functools.partial(\n                _filters.filter_by_level, level_per_module=level_per_module\n            )\n        elif callable(filter):\n            if filter == builtins.filter:\n                raise ValueError(\n                    \"The built-in 'filter()' function cannot be used as a 'filter' parameter, \"\n                    \"this is most likely a mistake (please double-check the arguments passed \"\n                    \"to 'logger.add()').\"\n                )\n            filter_func = filter\n        else:\n            raise TypeError(\n                \"Invalid filter, it should be a function, a string or a dict, not: '%s'\"\n                % type(filter).__name__\n            )\n\n        if isinstance(level, str):\n            levelno = self.level(level).no\n        elif isinstance(level, int):\n            levelno = level\n        else:\n            raise TypeError(\n                \"Invalid level, it should be an integer or a string, not: '%s'\"\n                % type(level).__name__\n            )\n\n        if levelno < 0:\n            raise ValueError(\n                \"Invalid level value, it should be a positive integer, not: %d\" % levelno\n            )\n\n        if isinstance(format, str):\n            try:\n                formatter = Colorizer.prepare_format(format + terminator + \"{exception}\")\n            except ValueError as e:\n                raise ValueError(\n                    \"Invalid format, color markups could not be parsed correctly\"\n                ) from e\n            is_formatter_dynamic = False\n        elif callable(format):\n            if format == builtins.format:\n                raise ValueError(\n                    \"The built-in 'format()' function cannot be used as a 'format' parameter, \"\n                    \"this is most likely a mistake (please double-check the arguments passed \"\n                    \"to 'logger.add()').\"\n                )\n            formatter = format\n            is_formatter_dynamic = True\n        else:\n            raise TypeError(\n                \"Invalid format, it should be a string or a function, not: '%s'\"\n                % type(format).__name__\n            )\n\n        if not isinstance(encoding, str):\n            encoding = \"ascii\"\n\n        with self._core.lock:\n            exception_formatter = ExceptionFormatter(\n                colorize=colorize,\n                encoding=encoding,\n                diagnose=diagnose,\n                backtrace=backtrace,\n                hidden_frames_filename=self.catch.__code__.co_filename,\n                prefix=exception_prefix,\n            )\n\n            handler = Handler(\n                name=name,\n                sink=wrapped_sink,\n                levelno=levelno,\n                formatter=formatter,\n                is_formatter_dynamic=is_formatter_dynamic,\n                filter_=filter_func,\n                colorize=colorize,\n                serialize=serialize,\n                enqueue=enqueue,\n                id_=handler_id,\n                error_interceptor=error_interceptor,\n                exception_formatter=exception_formatter,\n                levels_ansi_codes=self._core.levels_ansi_codes,\n            )\n\n            handlers = self._core.handlers.copy()\n            handlers[handler_id] = handler\n\n            self._core.min_level = min(self._core.min_level, levelno)\n            self._core.handlers = handlers\n\n        return handler_id\n\n    def remove(self, handler_id=None):\n        \"\"\"Remove a previously added handler and stop sending logs to its sink.\n\n        Parameters\n        ----------\n        handler_id : |int| or ``None``\n            The id of the sink to remove, as it was returned by the |add| method. If ``None``, all\n            handlers are removed. The pre-configured handler is guaranteed to have the index ``0``.\n\n        Raises\n        ------\n        ValueError\n            If ``handler_id`` is not ``None`` but there is no active handler with such id.\n\n        Examples\n        --------\n        >>> i = logger.add(sys.stderr, format=\"{message}\")\n        >>> logger.info(\"Logging\")\n        Logging\n        >>> logger.remove(i)\n        >>> logger.info(\"No longer logging\")\n        \"\"\"\n        if not (handler_id is None or isinstance(handler_id, int)):\n            raise TypeError(\n                \"Invalid handler id, it should be an integer as returned \"\n                \"by the 'add()' method (or None), not: '%s'\" % type(handler_id).__name__\n            )\n\n        with self._core.lock:\n            handlers = self._core.handlers.copy()\n\n            if handler_id is not None and handler_id not in handlers:\n                raise ValueError(\"There is no existing handler with id %d\" % handler_id) from None\n\n            if handler_id is None:\n                handler_ids = list(handlers.keys())\n            else:\n                handler_ids = [handler_id]\n\n            for handler_id in handler_ids:\n                handler = handlers.pop(handler_id)\n\n                # This needs to be done first in case \"stop()\" raises an exception\n                levelnos = (h.levelno for h in handlers.values())\n                self._core.min_level = min(levelnos, default=float(\"inf\"))\n                self._core.handlers = handlers\n\n                handler.stop()\n\n    def complete(self):\n        \"\"\"Wait for the end of enqueued messages and asynchronous tasks scheduled by handlers.\n\n        This method proceeds in two steps: first it waits for all logging messages added to handlers\n        with ``enqueue=True`` to be processed, then it returns an object that can be awaited to\n        finalize all logging tasks added to the event loop by coroutine sinks.\n\n        It can be called from non-asynchronous code. This is especially recommended when the\n        ``logger`` is utilized with ``multiprocessing`` to ensure messages put to the internal\n        queue have been properly transmitted before leaving a child process.\n\n        The returned object should be awaited before the end of a coroutine executed by\n        |asyncio.run| or |loop.run_until_complete| to ensure all asynchronous logging messages are\n        processed. The function |asyncio.get_running_loop| is called beforehand, only tasks\n        scheduled in the same loop that the current one will be awaited by the method.\n\n        Returns\n        -------\n        :term:`awaitable`\n            An awaitable object which ensures all asynchronous logging calls are completed when\n            awaited.\n\n        Examples\n        --------\n        >>> async def sink(message):\n        ...     await asyncio.sleep(0.1)  # IO processing...\n        ...     print(message, end=\"\")\n        ...\n        >>> async def work():\n        ...     logger.info(\"Start\")\n        ...     logger.info(\"End\")\n        ...     await logger.complete()\n        ...\n        >>> logger.add(sink)\n        1\n        >>> asyncio.run(work())\n        Start\n        End\n\n        >>> def process():\n        ...     logger.info(\"Message sent from the child\")\n        ...     logger.complete()\n        ...\n        >>> logger.add(sys.stderr, enqueue=True)\n        1\n        >>> process = multiprocessing.Process(target=process)\n        >>> process.start()\n        >>> process.join()\n        Message sent from the child\n        \"\"\"\n\n        with self._core.lock:\n            handlers = self._core.handlers.copy()\n            for handler in handlers.values():\n                handler.complete_queue()\n\n        class AwaitableCompleter:\n            def __await__(self_):\n                with self._core.lock:\n                    handlers = self._core.handlers.copy()\n                    for handler in handlers.values():\n                        yield from handler.complete_async().__await__()\n\n        return AwaitableCompleter()\n\n    def catch(\n        self,\n        exception=Exception,\n        *,\n        level=\"ERROR\",\n        reraise=False,\n        onerror=None,\n        exclude=None,\n        default=None,\n        message=\"An error has been caught in function '{record[function]}', \"\n        \"process '{record[process].name}' ({record[process].id}), \"\n        \"thread '{record[thread].name}' ({record[thread].id}):\"\n    ):\n        \"\"\"Return a decorator to automatically log possibly caught error in wrapped function.\n\n        This is useful to ensure unexpected exceptions are logged, the entire program can be\n        wrapped by this method. This is also very useful to decorate |Thread.run| methods while\n        using threads to propagate errors to the main logger thread.\n\n        Note that the visibility of variables values (which uses the great |better_exceptions|_\n        library from `@Qix-`_) depends on the ``diagnose`` option of each configured sink.\n\n        The returned object can also be used as a context manager.\n\n        Parameters\n        ----------\n        exception : |Exception|, optional\n            The type of exception to intercept. If several types should be caught, a tuple of\n            exceptions can be used too.\n        level : |str| or |int|, optional\n            The level name or severity with which the message should be logged.\n        reraise : |bool|, optional\n            Whether the exception should be raised again and hence propagated to the caller.\n        onerror : |callable|_, optional\n            A function that will be called if an error occurs, once the message has been logged.\n            It should accept the exception instance as it sole argument.\n        exclude : |Exception|, optional\n            A type of exception (or a tuple of types) that will be purposely ignored and hence\n            propagated to the caller without being logged.\n        default : optional\n            The value to be returned by the decorated function if an error occurred without being\n            re-raised.\n        message : |str|, optional\n            The message that will be automatically logged if an exception occurs. Note that it will\n            be formatted with the ``record`` attribute.\n\n        Returns\n        -------\n        :term:`decorator` / :term:`context manager`\n            An object that can be used to decorate a function or as a context manager to log\n            exceptions possibly caught.\n\n        Examples\n        --------\n        >>> @logger.catch\n        ... def f(x):\n        ...     100 / x\n        ...\n        >>> def g():\n        ...     f(10)\n        ...     f(0)\n        ...\n        >>> g()\n        ERROR - An error has been caught in function 'g', process 'Main' (367), thread 'ch1' (1398):\n        Traceback (most recent call last):\n          File \"program.py\", line 12, in <module>\n            g()\n            \u2514 <function g at 0x7f225fe2bc80>\n        > File \"program.py\", line 10, in g\n            f(0)\n            \u2514 <function f at 0x7f225fe2b9d8>\n          File \"program.py\", line 6, in f\n            100 / x\n                  \u2514 0\n        ZeroDivisionError: division by zero\n\n        >>> with logger.catch(message=\"Because we never know...\"):\n        ...    main()  # No exception, no logs\n\n        >>> # Use 'onerror' to prevent the program exit code to be 0 (if 'reraise=False') while\n        >>> # also avoiding the stacktrace to be duplicated on stderr (if 'reraise=True').\n        >>> @logger.catch(onerror=lambda _: sys.exit(1))\n        ... def main():\n        ...     1 / 0\n        \"\"\"\n        if callable(exception) and (\n            not isclass(exception) or not issubclass(exception, BaseException)\n        ):\n            return self.catch()(exception)\n\n        class Catcher:\n            def __init__(self_, from_decorator):\n                self_._from_decorator = from_decorator\n\n            def __enter__(self_):\n                return None\n\n            def __exit__(self_, type_, value, traceback_):\n                if type_ is None:\n                    return\n\n                if not issubclass(type_, exception):\n                    return False\n\n                if exclude is not None and issubclass(type_, exclude):\n                    return False\n\n                from_decorator = self_._from_decorator\n                _, depth, _, *options = self._options\n\n                if from_decorator:\n                    depth += 1\n\n                catch_options = [(type_, value, traceback_), depth, True] + options\n                level_id, static_level_no = self._dynamic_level(level)\n                self._log(level_id, static_level_no, from_decorator, catch_options, message, (), {})\n\n                if onerror is not None:\n                    onerror(value)\n\n                return not reraise\n\n            def __call__(_, function):\n                catcher = Catcher(True)\n\n                if iscoroutinefunction(function):\n\n                    async def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return await function(*args, **kwargs)\n                        return default\n\n                elif isgeneratorfunction(function):\n\n                    def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return (yield from function(*args, **kwargs))\n                        return default\n\n                else:\n\n                    def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return function(*args, **kwargs)\n                        return default\n\n                functools.update_wrapper(catch_wrapper, function)\n                return catch_wrapper\n\n        return Catcher(False)\n\n    def opt(\n        self,\n        *,\n        exception=None,\n        record=False,\n        lazy=False,\n        colors=False,\n        raw=False,\n        capture=True,\n        depth=0,\n        ansi=False\n    ):\n        r\"\"\"Parametrize a logging call to slightly change generated log message.\n\n        Note that it's not possible to chain |opt| calls, the last one takes precedence over the\n        others as it will \"reset\" the options to their default values.\n\n        Parameters\n        ----------\n        exception : |bool|, |tuple| or |Exception|, optional\n            If it does not evaluate as ``False``, the passed exception is formatted and added to the\n            log message. It could be an |Exception| object or a ``(type, value, traceback)`` tuple,\n            otherwise the exception information is retrieved from |sys.exc_info|.\n        record : |bool|, optional\n            If ``True``, the record dict contextualizing the logging call can be used to format the\n            message by using ``{record[key]}`` in the log message.\n        lazy : |bool|, optional\n            If ``True``, the logging call attribute to format the message should be functions which\n            will be called only if the level is high enough. This can be used to avoid expensive\n            functions if not necessary.\n        colors : |bool|, optional\n            If ``True``, logged message will be colorized according to the markups it possibly\n            contains.\n        raw : |bool|, optional\n            If ``True``, the formatting of each sink will be bypassed and the message will be sent\n            as is.\n        capture : |bool|, optional\n            If ``False``, the ``**kwargs`` of logged message will not automatically populate\n            the ``extra`` dict (although they are still used for formatting).\n        depth : |int|, optional\n            Specify which stacktrace should be used to contextualize the logged message. This is\n            useful while using the logger from inside a wrapped function to retrieve worthwhile\n            information.\n        ansi : |bool|, optional\n            Deprecated since version 0.4.1: the ``ansi`` parameter will be removed in Loguru 1.0.0,\n            it is replaced by ``colors`` which is a more appropriate name.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but transforming logged message adequately before\n            sending.\n\n        Examples\n        --------\n        >>> try:\n        ...     1 / 0\n        ... except ZeroDivisionError:\n        ...    logger.opt(exception=True).debug(\"Exception logged with debug level:\")\n        ...\n        [18:10:02] DEBUG in '<module>' - Exception logged with debug level:\n        Traceback (most recent call last, catch point marked):\n        > File \"<stdin>\", line 2, in <module>\n        ZeroDivisionError: division by zero\n\n        >>> logger.opt(record=True).info(\"Current line is: {record[line]}\")\n        [18:10:33] INFO in '<module>' - Current line is: 1\n\n        >>> logger.opt(lazy=True).debug(\"If sink <= DEBUG: {x}\", x=lambda: math.factorial(2**5))\n        [18:11:19] DEBUG in '<module>' - If sink <= DEBUG: 263130836933693530167218012160000000\n\n        >>> logger.opt(colors=True).warning(\"We got a <red>BIG</red> problem\")\n        [18:11:30] WARNING in '<module>' - We got a BIG problem\n\n        >>> logger.opt(raw=True).debug(\"No formatting\\n\")\n        No formatting\n\n        >>> logger.opt(capture=False).info(\"Displayed but not captured: {value}\", value=123)\n        [18:11:41] Displayed but not captured: 123\n\n        >>> def wrapped():\n        ...     logger.opt(depth=1).info(\"Get parent context\")\n        ...\n        >>> def func():\n        ...     wrapped()\n        ...\n        >>> func()\n        [18:11:54] DEBUG in 'func' - Get parent context\n        \"\"\"\n        if ansi:\n            colors = True\n            warnings.warn(\n                \"The 'ansi' parameter is deprecated, please use 'colors' instead\",\n                DeprecationWarning,\n            )\n\n        args = self._options[-2:]\n        return Logger(self._core, exception, depth, record, lazy, colors, raw, capture, *args)\n\n    def bind(__self, **kwargs):\n        \"\"\"Bind attributes to the ``extra`` dict of each logged message record.\n\n        This is used to add custom context to each logging call.\n\n        Parameters\n        ----------\n        **kwargs\n            Mapping between keys and values that will be added to the ``extra`` dict.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but which sends record with the customized ``extra``\n            dict.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{extra[ip]} - {message}\")\n        >>> class Server:\n        ...     def __init__(self, ip):\n        ...         self.ip = ip\n        ...         self.logger = logger.bind(ip=ip)\n        ...     def call(self, message):\n        ...         self.logger.info(message)\n        ...\n        >>> instance_1 = Server(\"192.168.0.200\")\n        >>> instance_2 = Server(\"127.0.0.1\")\n        >>> instance_1.call(\"First instance\")\n        192.168.0.200 - First instance\n        >>> instance_2.call(\"Second instance\")\n        127.0.0.1 - Second instance\n        \"\"\"\n        *options, extra = __self._options\n        return Logger(__self._core, *options, {**extra, **kwargs})\n\n    @contextlib.contextmanager\n    def contextualize(__self, **kwargs):\n        \"\"\"Bind attributes to the context-local ``extra`` dict while inside the ``with`` block.\n\n        Contrary to |bind| there is no ``logger`` returned, the ``extra`` dict is modified in-place\n        and updated globally. Most importantly, it uses |contextvars| which means that\n        contextualized values are unique to each threads and asynchronous tasks.\n\n        The ``extra`` dict will retrieve its initial state once the context manager is exited.\n\n        Parameters\n        ----------\n        **kwargs\n            Mapping between keys and values that will be added to the context-local ``extra`` dict.\n\n        Returns\n        -------\n        :term:`context manager` / :term:`decorator`\n            A context manager (usable as a decorator too) that will bind the attributes once entered\n            and restore the initial state of the ``extra`` dict while exited.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{message} | {extra}\")\n        1\n        >>> def task():\n        ...     logger.info(\"Processing!\")\n        ...\n        >>> with logger.contextualize(task_id=123):\n        ...     task()\n        ...\n        Processing! | {'task_id': 123}\n        >>> logger.info(\"Done.\")\n        Done. | {}\n        \"\"\"\n        with __self._core.lock:\n            new_context = {**context.get(), **kwargs}\n            token = context.set(new_context)\n\n        try:\n            yield\n        finally:\n            with __self._core.lock:\n                context.reset(token)\n\n    def patch(self, patcher):\n        \"\"\"Attach a function to modify the record dict created by each logging call.\n\n        The ``patcher`` may be used to update the record on-the-fly before it's propagated to the\n        handlers. This allows the \"extra\" dict to be populated with dynamic values and also permits\n        advanced modifications of the record emitted while logging a message. The function is called\n        once before sending the log message to the different handlers.\n\n        It is recommended to apply modification on the ``record[\"extra\"]`` dict rather than on the\n        ``record`` dict itself, as some values are used internally by `Loguru`, and modify them may\n        produce unexpected results.\n\n        Parameters\n        ----------\n        patcher: |callable|_\n            The function to which the record dict will be passed as the sole argument. This function\n            is in charge of updating the record in-place, the function does not need to return any\n            value, the modified record object will be re-used.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but which records are passed through the ``patcher``\n            function before being sent to the added handlers.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{extra[utc]} {message}\")\n        >>> logger = logger.patch(lambda record: record[\"extra\"].update(utc=datetime.utcnow())\n        >>> logger.info(\"That's way, you can log messages with time displayed in UTC\")\n\n        >>> def wrapper(func):\n        ...     @functools.wraps(func)\n        ...     def wrapped(*args, **kwargs):\n        ...         logger.patch(lambda r: r.update(function=func.__name__)).info(\"Wrapped!\")\n        ...         return func(*args, **kwargs)\n        ...     return wrapped\n\n        >>> def recv_record_from_network(pipe):\n        ...     record = pickle.loads(pipe.read())\n        ...     level, message = record[\"level\"], record[\"message\"]\n        ...     logger.patch(lambda r: r.update(record)).log(level, message)\n        \"\"\"\n        *options, _, extra = self._options\n        return Logger(self._core, *options, patcher, extra)\n\n    def level(self, name, no=None, color=None, icon=None):\n        \"\"\"Add, update or retrieve a logging level.\n\n        Logging levels are defined by their ``name`` to which a severity ``no``, an ansi ``color``\n        tag and an ``icon`` are associated and possibly modified at run-time. To |log| to a custom\n        level, you should necessarily use its name, the severity number is not linked back to levels\n        name (this implies that several levels can share the same severity).\n\n        To add a new level, its ``name`` and its ``no`` are required. A ``color`` and an ``icon``\n        can also be specified or will be empty by default.\n\n        To update an existing level, pass its ``name`` with the parameters to be changed. It is not\n        possible to modify the ``no`` of a level once it has been added.\n\n        To retrieve level information, the ``name`` solely suffices.\n\n        Parameters\n        ----------\n        name : |str|\n            The name of the logging level.\n        no : |int|\n            The severity of the level to be added or updated.\n        color : |str|\n            The color markup of the level to be added or updated.\n        icon : |str|\n            The icon of the level to be added or updated.\n\n        Returns\n        -------\n        ``Level``\n            A |namedtuple| containing information about the level.\n\n        Raises\n        ------\n        ValueError\n            If there is no level registered with such ``name``.\n\n        Examples\n        --------\n        >>> level = logger.level(\"ERROR\")\n        >>> print(level)\n        Level(name='ERROR', no=40, color='<red><bold>', icon='\u274c')\n        >>> logger.add(sys.stderr, format=\"{level.no} {level.icon} {message}\")\n        1\n        >>> logger.level(\"CUSTOM\", no=15, color=\"<blue>\", icon=\"@\")\n        Level(name='CUSTOM', no=15, color='<blue>', icon='@')\n        >>> logger.log(\"CUSTOM\", \"Logging...\")\n        15 @ Logging...\n        >>> logger.level(\"WARNING\", icon=r\"/!\\\\\")\n        Level(name='WARNING', no=30, color='<yellow><bold>', icon='/!\\\\\\\\')\n        >>> logger.warning(\"Updated!\")\n        30 /!\\\\ Updated!\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\n                \"Invalid level name, it should be a string, not: '%s'\" % type(name).__name__\n            )\n\n        if no is color is icon is None:\n            try:\n                return self._core.levels[name]\n            except KeyError:\n                raise ValueError(\"Level '%s' does not exist\" % name) from None\n\n        if name not in self._core.levels:\n            if no is None:\n                raise ValueError(\n                    \"Level '%s' does not exist, you have to create it by specifying a level no\"\n                    % name\n                )\n            else:\n                old_color, old_icon = \"\", \" \"\n        elif no is not None:\n            raise TypeError(\"Level '%s' already exists, you can't update its severity no\" % name)\n        else:\n            _, no, old_color, old_icon = self.level(name)\n\n        if color is None:\n            color = old_color\n\n        if icon is None:\n            icon = old_icon\n\n        if not isinstance(no, int):\n            raise TypeError(\n                \"Invalid level no, it should be an integer, not: '%s'\" % type(no).__name__\n            )\n\n        if no < 0:\n            raise ValueError(\"Invalid level no, it should be a positive integer, not: %d\" % no)\n\n        ansi = Colorizer.ansify(color)\n        level = Level(name, no, color, icon)\n\n        with self._core.lock:\n            self._core.levels[name] = level\n            self._core.levels_ansi_codes[name] = ansi\n            for handler in self._core.handlers.values():\n                handler.update_format(name)\n\n        return level\n\n    def disable(self, name):\n        \"\"\"Disable logging of messages coming from ``name`` module and its children.\n\n        Developers of library using `Loguru` should absolutely disable it to avoid disrupting\n        users with unrelated logs messages.\n\n        Note that in some rare circumstances, it is not possible for `Loguru` to\n        determine the module's ``__name__`` value. In such situation, ``record[\"name\"]`` will be\n        equal to ``None``, this is why ``None`` is also a valid argument.\n\n        Parameters\n        ----------\n        name : |str| or ``None``\n            The name of the parent module to disable.\n\n        Examples\n        --------\n        >>> logger.info(\"Allowed message by default\")\n        [22:21:55] Allowed message by default\n        >>> logger.disable(\"my_library\")\n        >>> logger.info(\"While publishing a library, don't forget to disable logging\")\n        \"\"\"\n        self._change_activation(name, False)\n\n    def enable(self, name):\n        \"\"\"Enable logging of messages coming from ``name`` module and its children.\n\n        Logging is generally disabled by imported library using `Loguru`, hence this function\n        allows users to receive these messages anyway.\n\n        To enable all logs regardless of the module they are coming from, an empty string ``\"\"`` can\n        be passed.\n\n        Parameters\n        ----------\n        name : |str| or ``None``\n            The name of the parent module to re-allow.\n\n        Examples\n        --------\n        >>> logger.disable(\"__main__\")\n        >>> logger.info(\"Disabled, so nothing is logged.\")\n        >>> logger.enable(\"__main__\")\n        >>> logger.info(\"Re-enabled, messages are logged.\")\n        [22:46:12] Re-enabled, messages are logged.\n        \"\"\"\n        self._change_activation(name, True)\n\n    def configure(self, *, handlers=None, levels=None, extra=None, patcher=None, activation=None):\n        \"\"\"Configure the core logger.\n\n        It should be noted that ``extra`` values set using this function are available across all\n        modules, so this is the best way to set overall default values.\n\n        Parameters\n        ----------\n        handlers : |list| of |dict|, optional\n            A list of each handler to be added. The list should contain dicts of params passed to\n            the |add| function as keyword arguments. If not ``None``, all previously added\n            handlers are first removed.\n        levels : |list| of |dict|, optional\n            A list of each level to be added or updated. The list should contain dicts of params\n            passed to the |level| function as keyword arguments. This will never remove previously\n            created levels.\n        extra : |dict|, optional\n            A dict containing additional parameters bound to the core logger, useful to share\n            common properties if you call |bind| in several of your files modules. If not ``None``,\n            this will remove previously configured ``extra`` dict.\n        patcher : |callable|_, optional\n            A function that will be applied to the record dict of each logged messages across all\n            modules using the logger. It should modify the dict in-place without returning anything.\n            The function is executed prior to the one possibly added by the |patch| method. If not\n            ``None``, this will replace previously configured ``patcher`` function.\n        activation : |list| of |tuple|, optional\n            A list of ``(name, state)`` tuples which denotes which loggers should be enabled (if\n            ``state`` is ``True``) or disabled (if ``state`` is ``False``). The calls to |enable|\n            and |disable| are made accordingly to the list order. This will not modify previously\n            activated loggers, so if you need a fresh start prepend your list with ``(\"\", False)``\n            or ``(\"\", True)``.\n\n        Returns\n        -------\n        :class:`list` of :class:`int`\n            A list containing the identifiers of added sinks (if any).\n\n        Examples\n        --------\n        >>> logger.configure(\n        ...     handlers=[\n        ...         dict(sink=sys.stderr, format=\"[{time}] {message}\"),\n        ...         dict(sink=\"file.log\", enqueue=True, serialize=True),\n        ...     ],\n        ...     levels=[dict(name=\"NEW\", no=13, icon=\"\u00a4\", color=\"\")],\n        ...     extra={\"common_to_all\": \"default\"},\n        ...     patcher=lambda record: record[\"extra\"].update(some_value=42),\n        ...     activation=[(\"my_module.secret\", False), (\"another_library.module\", True)],\n        ... )\n        [1, 2]\n\n        >>> # Set a default \"extra\" dict to logger across all modules, without \"bind()\"\n        >>> extra = {\"context\": \"foo\"}\n        >>> logger.configure(extra=extra)\n        >>> logger.add(sys.stderr, format=\"{extra[context]} - {message}\")\n        >>> logger.info(\"Context without bind\")\n        >>> # => \"foo - Context without bind\"\n        >>> logger.bind(context=\"bar\").info(\"Suppress global context\")\n        >>> # => \"bar - Suppress global context\"\n        \"\"\"\n        if handlers is not None:\n            self.remove()\n        else:\n            handlers = []\n\n        if levels is not None:\n            for params in levels:\n                self.level(**params)\n\n        if patcher is not None:\n            with self._core.lock:\n                self._core.patcher = patcher\n\n        if extra is not None:\n            with self._core.lock:\n                self._core.extra.clear()\n                self._core.extra.update(extra)\n\n        if activation is not None:\n            for name, state in activation:\n                if state:\n                    self.enable(name)\n                else:\n                    self.disable(name)\n\n        return [self.add(**params) for params in handlers]\n\n    def _change_activation(self, name, status):\n        if not (name is None or isinstance(name, str)):\n            raise TypeError(\n                \"Invalid name, it should be a string (or None), not: '%s'\" % type(name).__name__\n            )\n\n        with self._core.lock:\n            enabled = self._core.enabled.copy()\n\n            if name is None:\n                for n in enabled:\n                    if n is None:\n                        enabled[n] = status\n                self._core.activation_none = status\n                self._core.enabled = enabled\n                return\n\n            if name != \"\":\n                name += \".\"\n\n            activation_list = [\n                (n, s) for n, s in self._core.activation_list if n[: len(name)] != name\n            ]\n\n            parent_status = next((s for n, s in activation_list if name[: len(n)] == n), None)\n            if parent_status != status and not (name == \"\" and status is True):\n                activation_list.append((name, status))\n\n                def modules_depth(x):\n                    return x[0].count(\".\")\n\n                activation_list.sort(key=modules_depth, reverse=True)\n\n            for n in enabled:\n                if n is not None and (n + \".\")[: len(name)] == name:\n                    enabled[n] = status\n\n            self._core.activation_list = activation_list\n            self._core.enabled = enabled\n\n    @staticmethod\n    def parse(file, pattern, *, cast={}, chunk=2 ** 16):\n        \"\"\"Parse raw logs and extract each entry as a |dict|.\n\n        The logging format has to be specified as the regex ``pattern``, it will then be\n        used to parse the ``file`` and retrieve each entry based on the named groups present\n        in the regex.\n\n        Parameters\n        ----------\n        file : |str|, |Path| or |file-like object|_\n            The path of the log file to be parsed, or an already opened file object.\n        pattern : |str| or |re.Pattern|_\n            The regex to use for logs parsing, it should contain named groups which will be included\n            in the returned dict.\n        cast : |callable|_ or |dict|, optional\n            A function that should convert in-place the regex groups parsed (a dict of string\n            values) to more appropriate types. If a dict is passed, it should be a mapping between\n            keys of parsed log dict and the function that should be used to convert the associated\n            value.\n        chunk : |int|, optional\n            The number of bytes read while iterating through the logs, this avoids having to load\n            the whole file in memory.\n\n        Yields\n        ------\n        :class:`dict`\n            The dict mapping regex named groups to matched values, as returned by |match.groupdict|\n            and optionally converted according to ``cast`` argument.\n\n        Examples\n        --------\n        >>> reg = r\"(?P<lvl>[0-9]+): (?P<msg>.*)\"    # If log format is \"{level.no} - {message}\"\n        >>> for e in logger.parse(\"file.log\", reg):  # A file line could be \"10 - A debug message\"\n        ...     print(e)                             # => {'lvl': '10', 'msg': 'A debug message'}\n\n        >>> caster = dict(lvl=int)                   # Parse 'lvl' key as an integer\n        >>> for e in logger.parse(\"file.log\", reg, cast=caster):\n        ...     print(e)                             # => {'lvl': 10, 'msg': 'A debug message'}\n\n        >>> def cast(groups):\n        ...     if \"date\" in groups:\n        ...         groups[\"date\"] = datetime.strptime(groups[\"date\"], \"%Y-%m-%d %H:%M:%S\")\n        ...\n        >>> with open(\"file.log\") as file:\n        ...     for log in logger.parse(file, reg, cast=cast):\n        ...         print(log[\"date\"], log[\"something_else\"])\n        \"\"\"\n        if isinstance(file, (str, PathLike)):\n            should_close = True\n            fileobj = open(str(file))\n        elif hasattr(file, \"read\") and callable(file.read):\n            should_close = False\n            fileobj = file\n        else:\n            raise TypeError(\n                \"Invalid file, it should be a string path or a file object, not: '%s'\"\n                % type(file).__name__\n            )\n\n        if isinstance(cast, dict):\n\n            def cast_function(groups):\n                for key, converter in cast.items():\n                    if key in groups:\n                        groups[key] = converter(groups[key])\n\n        elif callable(cast):\n            cast_function = cast\n        else:\n            raise TypeError(\n                \"Invalid cast, it should be a function or a dict, not: '%s'\" % type(cast).__name__\n            )\n\n        try:\n            regex = re.compile(pattern)\n        except TypeError:\n            raise TypeError(\n                \"Invalid pattern, it should be a string or a compiled regex, not: '%s'\"\n                % type(pattern).__name__\n            ) from None\n\n        matches = Logger._find_iter(fileobj, regex, chunk)\n\n        for match in matches:\n            groups = match.groupdict()\n            cast_function(groups)\n            yield groups\n\n        if should_close:\n            fileobj.close()\n\n    @staticmethod\n    def _find_iter(fileobj, regex, chunk):\n        buffer = fileobj.read(0)\n\n        while 1:\n            text = fileobj.read(chunk)\n            buffer += text\n            matches = list(regex.finditer(buffer))\n\n            if not text:\n                yield from matches\n                break\n\n            if len(matches) > 1:\n                end = matches[-2].end()\n                buffer = buffer[end:]\n                yield from matches[:-1]\n\n    def _log(self, level_id, static_level_no, from_decorator, options, message, args, kwargs):\n        core = self._core\n\n        if not core.handlers:\n            return\n\n        (exception, depth, record, lazy, colors, raw, capture, patcher, extra) = options\n\n        frame = get_frame(depth + 2)\n\n        try:\n            name = frame.f_globals[\"__name__\"]\n        except KeyError:\n            name = None\n\n        try:\n            if not core.enabled[name]:\n                return\n        except KeyError:\n            enabled = core.enabled\n            if name is None:\n                status = core.activation_none\n                enabled[name] = status\n                if not status:\n                    return\n            else:\n                dotted_name = name + \".\"\n                for dotted_module_name, status in core.activation_list:\n                    if dotted_name[: len(dotted_module_name)] == dotted_module_name:\n                        if status:\n                            break\n                        enabled[name] = False\n                        return\n                enabled[name] = True\n\n        current_datetime = aware_now()\n\n        if level_id is None:\n            level_icon = \" \"\n            level_no = static_level_no\n            level_name = \"Level %d\" % level_no\n        else:\n            try:\n                level_name, level_no, _, level_icon = core.levels[level_id]\n            except KeyError:\n                raise ValueError(\"Level '%s' does not exist\" % level_id) from None\n\n        if level_no < core.min_level:\n            return\n\n        code = frame.f_code\n        file_path = code.co_filename\n        file_name = basename(file_path)\n        thread = current_thread()\n        process = current_process()\n        elapsed = current_datetime - start_time\n\n        if exception:\n            if isinstance(exception, BaseException):\n                type_, value, traceback = (type(exception), exception, exception.__traceback__)\n            elif isinstance(exception, tuple):\n                type_, value, traceback = exception\n            else:\n                type_, value, traceback = sys.exc_info()\n            exception = RecordException(type_, value, traceback)\n        else:\n            exception = None\n\n        log_record = {\n            \"elapsed\": elapsed,\n            \"exception\": exception,\n            \"extra\": {**core.extra, **context.get(), **extra},\n            \"file\": RecordFile(file_name, file_path),\n            \"function\": code.co_name,\n            \"level\": RecordLevel(level_name, level_no, level_icon),\n            \"line\": frame.f_lineno,\n            \"message\": str(message),\n            \"module\": splitext(file_name)[0],\n            \"name\": name,\n            \"process\": RecordProcess(process.ident, process.name),\n            \"thread\": RecordThread(thread.ident, thread.name),\n            \"time\": current_datetime,\n        }\n\n        if lazy:\n            args = [arg() for arg in args]\n            kwargs = {key: value() for key, value in kwargs.items()}\n\n        if capture and kwargs:\n            log_record[\"extra\"].update(kwargs)\n\n        if record:\n            if \"record\" in kwargs:\n                raise TypeError(\n                    \"The message can't be formatted: 'record' shall not be used as a keyword \"\n                    \"argument while logger has been configured with '.opt(record=True)'\"\n                )\n            kwargs.update(record=log_record)\n\n        if colors:\n            if args or kwargs:\n                colored_message = Colorizer.prepare_message(message, args, kwargs)\n            else:\n                colored_message = Colorizer.prepare_simple_message(str(message))\n            log_record[\"message\"] = colored_message.stripped\n        elif args or kwargs:\n            colored_message = None\n            log_record[\"message\"] = message.format(*args, **kwargs)\n        else:\n            colored_message = None\n\n        if core.patcher:\n            core.patcher(log_record)\n\n        if patcher:\n            patcher(log_record)\n\n        for handler in core.handlers.values():\n            handler.emit(log_record, level_id, from_decorator, raw, colored_message)\n\n    def trace(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'TRACE'``.\"\"\"\n        __self._log(\"TRACE\", None, False, __self._options, __message, args, kwargs)\n\n    def debug(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'DEBUG'``.\"\"\"\n        __self._log(\"DEBUG\", None, False, __self._options, __message, args, kwargs)\n\n    def info(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'INFO'``.\"\"\"\n        __self._log(\"INFO\", None, False, __self._options, __message, args, kwargs)\n\n    def success(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'SUCCESS'``.\"\"\"\n        __self._log(\"SUCCESS\", None, False, __self._options, __message, args, kwargs)\n\n    def warning(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'WARNING'``.\"\"\"\n        __self._log(\"WARNING\", None, False, __self._options, __message, args, kwargs)\n\n    def error(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'ERROR'``.\"\"\"\n        __self._log(\"ERROR\", None, False, __self._options, __message, args, kwargs)\n\n    def critical(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'CRITICAL'``.\"\"\"\n        __self._log(\"CRITICAL\", None, False, __self._options, __message, args, kwargs)\n\n    def exception(__self, __message, *args, **kwargs):\n        r\"\"\"Convenience method for logging an ``'ERROR'`` with exception information.\"\"\"\n        options = (True,) + __self._options[1:]\n        __self._log(\"ERROR\", None, False, options, __message, args, kwargs)\n\n    def log(__self, __level, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``level``.\"\"\"\n        level_id, static_level_no = __self._dynamic_level(__level)\n        __self._log(level_id, static_level_no, False, __self._options, __message, args, kwargs)\n\n    @staticmethod\n    @functools.lru_cache(maxsize=32)\n    def _dynamic_level(level):\n\n        if isinstance(level, str):\n            return (level, None)\n\n        if isinstance(level, int):\n            if level < 0:\n                raise ValueError(\n                    \"Invalid level value, it should be a positive integer, not: %d\" % level\n                )\n            return (None, level)\n\n        raise TypeError(\n            \"Invalid level, it should be an integer or a string, not: '%s'\" % type(level).__name__\n        )\n\n    def start(self, *args, **kwargs):\n        \"\"\"Deprecated function to |add| a new handler.\n\n        Warnings\n        --------\n        .. deprecated:: 0.2.2\n          ``start()`` will be removed in Loguru 1.0.0, it is replaced by ``add()`` which is a less\n          confusing name.\n        \"\"\"\n        warnings.warn(\n            \"The 'start()' method is deprecated, please use 'add()' instead\", DeprecationWarning\n        )\n        return self.add(*args, **kwargs)\n\n    def stop(self, *args, **kwargs):\n        \"\"\"Deprecated function to |remove| an existing handler.\n\n        Warnings\n        --------\n        .. deprecated:: 0.2.2\n          ``stop()`` will be removed in Loguru 1.0.0, it is replaced by ``remove()`` which is a less\n          confusing name.\n        \"\"\"\n        warnings.warn(\n            \"The 'stop()' method is deprecated, please use 'remove()' instead\", DeprecationWarning\n        )\n        return self.remove(*args, **kwargs)\n"], "fixing_code": ["Code snippets and recipes for ``loguru``\n========================================\n\n.. highlight:: python3\n\n.. |print| replace:: :func:`print()`\n.. |open| replace:: :func:`open()`\n.. |sys.__stdout__| replace:: :data:`sys.__stdout__`\n.. |sys.stdout| replace:: :data:`sys.stdout`\n.. |sys.stderr| replace:: :data:`sys.stderr`\n.. |warnings| replace:: :mod:`warnings`\n.. |warnings.showwarning| replace:: :func:`warnings.showwarning`\n.. |warnings.warn| replace:: :func:`warnings.warn`\n.. |contextlib.redirect_stdout| replace:: :func:`contextlib.redirect_stdout`\n.. |copy.deepcopy| replace:: :func:`copy.deepcopy`\n.. |os.fork| replace:: :func:`os.fork`\n.. |multiprocessing| replace:: :mod:`multiprocessing`\n.. |pickle| replace:: :mod:`pickle`\n.. |traceback| replace:: :mod:`traceback`\n.. |Thread| replace:: :class:`~threading.Thread`\n.. |Process| replace:: :class:`~multiprocessing.Process`\n.. |Pool| replace:: :class:`~multiprocessing.pool.Pool`\n.. |Pool.map| replace:: :meth:`~multiprocessing.pool.Pool.map`\n.. |Pool.apply| replace:: :meth:`~multiprocessing.pool.Pool.apply`\n.. |sys.stdout.reconfigure| replace:: :meth:`sys.stdout.reconfigure() <io.TextIOWrapper.reconfigure>`\n.. |UnicodeEncodeError| replace:: :exc:`UnicodeEncodeError`\n\n.. |add| replace:: :meth:`~loguru._logger.Logger.add()`\n.. |remove| replace:: :meth:`~loguru._logger.Logger.remove()`\n.. |enable| replace:: :meth:`~loguru._logger.Logger.enable()`\n.. |disable| replace:: :meth:`~loguru._logger.Logger.disable()`\n.. |bind| replace:: :meth:`~loguru._logger.Logger.bind()`\n.. |patch| replace:: :meth:`~loguru._logger.Logger.patch()`\n.. |opt| replace:: :meth:`~loguru._logger.Logger.opt()`\n.. |log| replace:: :meth:`~loguru._logger.Logger.log()`\n.. |level| replace:: :meth:`~loguru._logger.Logger.level()`\n.. |configure| replace:: :meth:`~loguru._logger.Logger.configure()`\n.. |complete| replace:: :meth:`~loguru._logger.Logger.complete()`\n\n.. _`unicode`: https://docs.python.org/3/howto/unicode.html\n\n.. |stackprinter| replace:: ``stackprinter``\n.. _stackprinter: https://github.com/cknd/stackprinter\n\n.. |zmq| replace:: ``zmq``\n.. _zmq: https://github.com/zeromq/pyzmq\n\n.. _`GH#88`: https://github.com/Delgan/loguru/issues/88\n.. _`GH#132`: https://github.com/Delgan/loguru/issues/132\n\n\nSecurity considerations when using Loguru\n-----------------------------------------\n\nFirstly, if you use |pickle| to load log messages (e.g. from the network), make sure the source is trustable or sign the data to verify its authenticity before deserializing it. If you do not take these precautions, malicious code could be executed by an attacker. You can read more details in this article: `What\u2019s so dangerous about pickles? <https://intoli.com/blog/dangerous-pickles/>`_\n\n.. code::\n\n    import hashlib\n    import hmac\n    import pickle\n\n    def client(connection):\n        data = pickle.dumps(\"Log message\")\n        digest =  hmac.digest(b\"secret-shared-key\", data, hashlib.sha1)\n        connection.send(digest + b\" \" + data)\n\n    def server(connection):\n        expected_digest, data = connection.read().split(b\" \", 1)\n        data_digest = hmac.digest(b\"secret-shared-key\", data, hashlib.sha1)\n        if not hmac.compare_digest(data_digest, expected_digest):\n            print(\"Integrity error\")\n        else:\n            message = pickle.loads(data)\n            logger.info(message)\n\n\nYou should also avoid logging a message that could be maliciously hand-crafted by an attacker. Calling ``logger.debug(message, value)`` is roughly equivalent to calling ``print(message.format(value))`` and the same safety rules apply. In particular, an attacker could force printing of assumed hidden variables of your application. Here is an article explaining the possible vulnerability: `Be Careful with Python's New-Style String Format <https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/>`_.\n\n.. code::\n\n    SECRET_KEY = 'Y0UC4NTS33Th1S!'\n\n    class SomeValue:\n        def __init__(self, value):\n            self.value = value\n\n    # If user types \"{value.__init__.__globals__[SECRET_KEY]}\" then the secret key is displayed.\n    message = \"[Custom message] \" + input()\n    logger.info(message, value=SomeValue(10))\n\n\nNote that by default, Loguru will display the value of existing variables when an ``Exception`` is logged. This is very useful for debugging but could lead to credentials appearing in log files. Make sure to turn it off in production (or set the ``LOGURU_DIAGNOSE=NO`` environment variable).\n\n.. code::\n\n    logger.add(\"out.log\", diagnose=False)\n\n\nAnother thing you should consider is to change the access permissions of your log file. Loguru creates files using the built-in |open| function, which means by default they might be read by a different user than the owner. If this is not desirable, be sure to modify the default access rights.\n\n.. code::\n\n    def opener(file, flags):\n        return os.open(file, flags, 0o600)\n\n    logger.add(\"combined.log\", opener=opener)\n\n\n\nChanging the level of an existing handler\n-----------------------------------------\n\nOnce a handler has been added, it is actually not possible to update it. This is a deliberate choice in order to keep the Loguru's API minimal. Several solutions are possible, tough, if you need to change the configured ``level`` of a handler. Chose the one that best fits your use case.\n\nThe most straightforward workaround is to |remove| your handler and then re-|add| it with the updated ``level`` parameter. To do so, you have to keep a reference to the identifier number returned while adding a handler::\n\n    handler_id = logger.add(sys.stderr, level=\"WARNING\")\n\n    logger.info(\"Logging 'WARNING' or higher messages only\")\n\n    ...\n\n    logger.remove(handler_id)\n    logger.add(sys.stderr, level=\"DEBUG\")\n\n    logger.debug(\"Logging 'DEBUG' messages too\")\n\n\nAlternatively, you can combine the |bind| method with the ``filter`` argument to provide a function dynamically filtering logs based on their level::\n\n    def my_filter(record):\n        if record[\"extra\"].get(\"warn_only\"):  # \"warn_only\" is bound to the logger and set to 'True'\n            return record[\"level\"].no >= logger.level(\"WARNING\").no\n        return True  # Fallback to default 'level' configured while adding the handler\n\n\n    logger.add(sys.stderr, filter=my_filter, level=\"DEBUG\")\n\n    # Use this logger first, debug messages are filtered out\n    logger = logger.bind(warn_only=True)\n    logger.warn(\"Initialization in progress\")\n\n    # Then you can use this one to log all messages\n    logger = logger.bind(warn_only=False)\n    logger.debug(\"Back to debug messages\")\n\n\nFinally, more advanced control over handler's level can be achieved by using a callable object as the ``filter``::\n\n    class MyFilter:\n\n        def __init__(self, level):\n            self.level = level\n\n        def __call__(self, record):\n            levelno = logger.level(self.level).no\n            return record[\"level\"].no >= levelno\n\n    my_filter = MyFilter(\"WARNING\")\n    logger.add(sys.stderr, filter=my_filter, level=0)\n\n    logger.warning(\"OK\")\n    logger.debug(\"NOK\")\n\n    my_filter.level = \"DEBUG\"\n    logger.debug(\"OK\")\n\n\nSending and receiving log messages across network or processes\n--------------------------------------------------------------\n\nIt is possible to transmit logs between different processes and even between different computer if needed. Once the connection is established between the two Python programs, this requires serializing the logging record in one side while re-constructing the message on the other hand.\n\nThis can be achieved using a custom sink for the client and |patch| for the server.\n\n.. code::\n\n    # client.py\n    import sys\n    import socket\n    import struct\n    import time\n    import pickle\n\n    from loguru import logger\n\n\n    class SocketHandler:\n\n        def __init__(self, host, port):\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.connect((host, port))\n\n        def write(self, message):\n            record = message.record\n            data = pickle.dumps(record)\n            slen = struct.pack(\">L\", len(data))\n            self.sock.send(slen + data)\n\n    logger.configure(handlers=[{\"sink\": SocketHandler('localhost', 9999)}])\n\n    while 1:\n        time.sleep(1)\n        logger.info(\"Sending message from the client\")\n\n\n.. code::\n\n    # server.py\n    import socketserver\n    import pickle\n    import struct\n\n    from loguru import logger\n\n\n    class LoggingStreamHandler(socketserver.StreamRequestHandler):\n\n        def handle(self):\n            while True:\n                chunk = self.connection.recv(4)\n                if len(chunk) < 4:\n                    break\n                slen = struct.unpack('>L', chunk)[0]\n                chunk = self.connection.recv(slen)\n                while len(chunk) < slen:\n                    chunk = chunk + self.connection.recv(slen - len(chunk))\n                record = pickle.loads(chunk)\n                level, message = record[\"level\"].no, record[\"message\"]\n                logger.patch(lambda record: record.update(record)).log(level, message)\n\n    server = socketserver.TCPServer(('localhost', 9999), LoggingStreamHandler)\n    server.serve_forever()\n\n\nKeep in mind though that `pickling is unsafe <https://intoli.com/blog/dangerous-pickles/>`_, use this with care.\n\nAnother possibility is to use a third party library like |zmq|_ for example.\n\n.. code::\n\n    # client.py\n    import zmq\n    from zmq.log.handlers import PUBHandler\n    from loguru import logger\n\n    socket = zmq.Context().socket(zmq.PUB)\n    socket.connect(\"tcp://127.0.0.1:12345\")\n    handler = PUBHandler(socket)\n    logger.add(handler)\n\n    logger.info(\"Logging from client\")\n\n\n.. code::\n\n    # server.py\n    import sys\n    import zmq\n    from loguru import logger\n\n    socket = zmq.Context().socket(zmq.SUB)\n    socket.bind(\"tcp://127.0.0.1:12345\")\n    socket.subscribe(\"\")\n\n    logger.configure(handlers=[{\"sink\": sys.stderr, \"format\": \"{message}\"}])\n\n    while True:\n        _, message = socket.recv_multipart()\n        logger.info(message.decode(\"utf8\").strip())\n\n\n\nResolving ``UnicodeEncodeError`` and other encoding issues\n----------------------------------------------------------\n\nWhen you write a log message, the handler may need to encode the received `unicode`_ string to a specific sequence of bytes. The ``encoding`` used to perform this operation varies depending on the sink type and your environment. Problem may occur if you try to write a character which is not supported by the handler ``encoding``. In such case, it's likely that Python will raise an |UnicodeEncodeError|.\n\nFor example, this may happen while printing to the terminal::\n\n    print(\"\u5929\")\n    # UnicodeEncodeError: 'charmap' codec can't encode character '\\u5929' in position 0: character maps to <undefined>\n\nA similar error may occur while writing to a file which has not been opened using an appropriate encoding. Most common problem happen while logging to standard output or to a file on Windows. So, how to avoid such error? Simply by properly configuring your handler so that it can process any kind of unicode string.\n\nIf you are encountering this error while logging to ``stdout``, you have several options:\n\n* Use |sys.stderr| instead of |sys.stdout| (the former will escape faulty characters rather than raising exception)\n* Set the :envvar:`PYTHONIOENCODING` environment variable to ``utf-8``\n* Call |sys.stdout.reconfigure| with ``encoding='utf-8'`` and / or ``errors='backslashreplace'``\n\nIf you are using a file sink, you can configure the ``errors`` or ``encoding`` parameter while adding the handler like ``logger.add(\"file.log\", encoding=\"utf8\")`` for example.  All additional ``**kwargs`` argument are passed to the built-in |open| function.\n\nFor other types of handlers, you have to check if there is a way to parametrize encoding or fallback policy.\n\n\nLogging entry and exit of functions with a decorator\n----------------------------------------------------\n\nIn some cases, it might be useful to log entry and exit values of a function. Although Loguru doesn't provide such feature out of the box, it can be easily implemented by using Python decorators::\n\n    import functools\n    from loguru import logger\n\n\n    def logger_wraps(*, entry=True, exit=True, level=\"DEBUG\"):\n\n        def wrapper(func):\n            name = func.__name__\n\n            @functools.wraps(func)\n            def wrapped(*args, **kwargs):\n                logger_ = logger.opt(depth=1)\n                if entry:\n                    logger_.log(level, \"Entering '{}' (args={}, kwargs={})\", name, args, kwargs)\n                result = func(*args, **kwargs)\n                if exit:\n                    logger_.log(level, \"Exiting '{}' (result={})\", name, result)\n                return result\n\n            return wrapped\n\n        return wrapper\n\nYou could then use it like this::\n\n    @logger_wraps()\n    def foo(a, b, c):\n        logger.info(\"Inside the function\")\n        return a * b * c\n\n    def bar():\n        foo(2, 4, c=8)\n\n    bar()\n\n\nWhich would result in::\n\n    2019-04-07 11:08:44.198 | DEBUG    | __main__:bar:30 - Entering 'foo' (args=(2, 4), kwargs={'c': 8})\n    2019-04-07 11:08:44.198 | INFO     | __main__:foo:26 - Inside the function\n    2019-04-07 11:08:44.198 | DEBUG    | __main__:bar:30 - Exiting 'foo' (result=64)\n\n\nHere is another simple example to record timing of a function::\n\n    def timeit(func):\n\n        def wrapped(*args, **kwargs):\n            start = time.time()\n            result = func(*args, **kwargs)\n            end = time.time()\n            logger.debug(\"Function '{}' executed in {:f} s\", func.__name__, end - start)\n            return result\n\n        return wrapped\n\n\nUsing logging function based on custom added levels\n---------------------------------------------------\n\nAfter adding a new level, it's habitually used with the |log| function::\n\n    logger.level(\"foobar\", no=33, icon=\"\ud83e\udd16\", color=\"<blue>\")\n\n    logger.log(\"foobar\", \"A message\")\n\n\nFor convenience, one can assign a new logging function which automatically uses the custom added level::\n\n    from functools import partialmethod\n\n    logger.__class__.foobar = partialmethod(logger.__class__.log, \"foobar\")\n\n    logger.foobar(\"A message\")\n\n\nThe new method need to be added only once and will be usable across all your files importing the ``logger``. Assigning the method to ``logger.__class__`` rather than ``logger`` directly ensures that it stays available even after calling ``logger.bind()``, ``logger.patch()`` and ``logger.opt()`` (because these functions return a new ``logger`` instance).\n\n\nPreserving an ``opt()`` parameter for the whole module\n------------------------------------------------------\n\nSupposing you wish to color each of your log messages without having to call ``logger.opt(colors=True)`` every time, you can add this at the very beginning of your module::\n\n    logger = logger.opt(colors=True)\n\n    logger.info(\"It <green>works</>!\")\n\nHowever, it should be noted that it's not possible to chain |opt| calls, using this method again will reset the ``colors`` option to its default value (which is ``False``). For this reason, it is also necessary to patch the |opt| method so that all subsequent calls continue to use the desired value::\n\n    from functools import partial\n\n    logger = logger.opt(colors=True)\n    logger.opt = partial(logger.opt, colors=True)\n\n    logger.opt(raw=True).info(\"It <green>still</> works!\\n\")\n\n\nSerializing log messages using a custom function\n------------------------------------------------\n\nEach handler added with ``serialize=True`` will create messages by converting the logging record to a valid JSON string. Depending on the sink for which the messages are intended, it may be useful to make changes to the generated string. Instead of using the ``serialize`` parameter, you can implement your own serialization function and use it directly in your sink::\n\n    def serialize(record):\n        subset = {\"timestamp\": record[\"time\"].timestamp(), \"message\": record[\"message\"]}\n        return json.dumps(subset)\n\n    def sink(message):\n        serialized = serialize(message.record)\n        print(serialized)\n\n    logger.add(sink)\n\n\nIf you need to send structured logs to a file (or any kind of sink in general), a similar result can be obtained by using a custom ``format`` function::\n\n    def formatter(record):\n        # Note this function returns the string to be formatted, not the actual message to be logged\n        record[\"extra\"][\"serialized\"] = serialize(record)\n        return \"{extra[serialized]}\\n\"\n\n    logger.add(\"file.log\", format=formatter)\n\n\nYou can also use |patch| for this, so the serialization function will be called only once in case you want to use it in multiple sinks::\n\n    def patching(record):\n        record[\"extra\"][\"serialized\"] = serialize(record)\n\n    logger = logger.patch(patching)\n\n    # Note that if \"format\" is not a function, possible exception will be appended to the message\n    logger.add(sys.stderr, format=\"{extra[serialized]}\")\n    logger.add(\"file.log\", format=\"{extra[serialized]}\")\n\n\nRotating log file based on both size and time\n---------------------------------------------\n\nThe ``rotation`` argument of file sinks accept size or time limits but not both for simplification reasons. However, it is possible to create a custom function to support more advanced scenarios::\n\n    import datetime\n\n    class Rotator:\n\n        def __init__(self, *, size, at):\n            now = datetime.datetime.now()\n\n            self._size_limit = size\n            self._time_limit = now.replace(hour=at.hour, minute=at.minute, second=at.second)\n\n            if now >= self._time_limit:\n                # The current time is already past the target time so it would rotate already.\n                # Add one day to prevent an immediate rotation.\n                self._time_limit += datetime.timedelta(days=1)\n\n        def should_rotate(self, message, file):\n            file.seek(0, 2)\n            if file.tell() + len(message) > self._size_limit:\n                return True\n            if message.record[\"time\"].timestamp() > self._time_limit.timestamp():\n                self._time_limit += datetime.timedelta(days=1)\n                return True\n            return False\n\n    # Rotate file if over 500 MB or at midnight every day\n    rotator = Rotator(size=5e+8, at=datetime.time(0, 0, 0))\n    logger.add(\"file.log\", rotation=rotator.should_rotate)\n\n\nAdapting colors and format of logged messages dynamically\n---------------------------------------------------------\n\nIt is possible to customize the colors of your logs thanks to several :ref:`markup tags <color>`. Those are used to configure the ``format`` of your handler. By creating a appropriate formatting function, you can easily define colors depending on the logged message.\n\nFor example, if you want to associate each module with a unique color::\n\n    from collections import defaultdict\n    from random import choice\n\n    colors = [\"blue\", \"cyan\", \"green\", \"magenta\", \"red\", \"yellow\"]\n    color_per_module = defaultdict(lambda: choice(colors))\n\n    def formatter(record):\n        color_tag = color_per_module[record[\"name\"]]\n        return \"<\" + color_tag + \">[{name}]</> <bold>{message}</>\\n{exception}\"\n\n    logger.add(sys.stderr, format=formatter)\n\n\nIf you need to dynamically colorize the ``record[\"message\"]``, make sure that the color tags appear in the returned format instead of modifying the message::\n\n    def rainbow(text):\n        colors = [\"red\", \"yellow\", \"green\", \"cyan\", \"blue\", \"magenta\"]\n        chars = (\"<{}>{}</>\".format(colors[i % len(colors)], c) for i, c in enumerate(text))\n        return \"\".join(chars)\n\n    def formatter(record):\n        rainbow_message = rainbow(record[\"message\"])\n        # Prevent '{}' in message (if any) to be incorrectly parsed during formatting\n        escaped = rainbow_message.replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n        return \"<b>{time}</> \" + escaped + \"\\n{exception}\"\n\n    logger.add(sys.stderr, format=formatter)\n\n\nDynamically formatting messages to properly align values with padding\n---------------------------------------------------------------------\n\nThe default formatter is unable to vertically align log messages because the length of ``{name}``, ``{function}`` and ``{line}`` are not fixed.\n\nOne workaround consists of using padding with some maximum value that should suffice most of the time, like this for example::\n\n    fmt = \"{time} | {level: <8} | {name: ^15} | {function: ^15} | {line: >3} | {message}\"\n    logger.add(sys.stderr, format=fmt)\n\nOthers solutions are possible by using a formatting function or class. For example, it is possible to dynamically adjust the padding length based on previously encountered values::\n\n    class Formatter:\n\n        def __init__(self):\n            self.padding = 0\n            self.fmt = \"{time} | {level: <8} | {name}:{function}:{line}{extra[padding]} | {message}\\n{exception}\"\n\n        def format(self, record):\n            length = len(\"{name}:{function}:{line}\".format(**record))\n            self.padding = max(self.padding, length)\n            record[\"extra\"][\"padding\"] = \" \" * (self.padding - length)\n            return self.fmt\n\n    formatter = Formatter()\n\n    logger.remove()\n    logger.add(sys.stderr, format=formatter.format)\n\n\nCustomizing the formatting of exceptions\n----------------------------------------\n\nLoguru will automatically add the traceback of occurring exception while using ``logger.exception()`` or ``logger.opt(exception=True)``::\n\n    def inverse(x):\n        try:\n            1 / x\n        except ZeroDivisionError:\n            logger.exception(\"Oups...\")\n\n    if __name__ == \"__main__\":\n        inverse(0)\n\n.. code-block:: none\n\n    2019-11-15 10:01:13.703 | ERROR    | __main__:inverse:8 - Oups...\n    Traceback (most recent call last):\n    File \"foo.py\", line 6, in inverse\n        1 / x\n    ZeroDivisionError: division by zero\n\nIf the handler is added with ``backtrace=True``, the traceback is extended to see where the exception came from:\n\n.. code-block:: none\n\n    2019-11-15 10:11:32.829 | ERROR    | __main__:inverse:8 - Oups...\n    Traceback (most recent call last):\n      File \"foo.py\", line 16, in <module>\n        inverse(0)\n    > File \"foo.py\", line 6, in inverse\n        1 / x\n    ZeroDivisionError: division by zero\n\nIf the handler is added with ``diagnose=True``, then the traceback is annotated to see what caused the problem:\n\n.. code-block:: none\n\n    Traceback (most recent call last):\n\n    File \"foo.py\", line 6, in inverse\n        1 / x\n            \u2514 0\n\n    ZeroDivisionError: division by zero\n\nIt is possible to further personalize the formatting of exception by adding an handler with a custom ``format`` function. For example, supposing you want to format errors using the |stackprinter|_ library::\n\n    import stackprinter\n\n    def format(record):\n        format_ = \"{time} {message}\\n\"\n\n        if record[\"exception\"] is not None:\n            record[\"extra\"][\"stack\"] = stackprinter.format(record[\"exception\"])\n            format_ += \"{extra[stack]}\\n\"\n\n        return format_\n\n    logger.add(sys.stderr, format=format)\n\n.. code-block:: none\n\n    2019-11-15T10:46:18.059964+0100 Oups...\n    File foo.py, line 17, in inverse\n        15   def inverse(x):\n        16       try:\n    --> 17           1 / x\n        18       except ZeroDivisionError:\n        ..................................................\n        x = 0\n        ..................................................\n\n    ZeroDivisionError: division by zero\n\n\nDisplaying a stacktrace without using the error context\n-------------------------------------------------------\n\nIt may be useful in some cases to display the traceback at the time your message is logged, while no exceptions have been raised. Although this feature is not built-in into Loguru as it is more related to debugging than logging, it is possible to |patch| your logger and then display the stacktrace as needed (using the |traceback| module)::\n\n    import traceback\n\n    def add_traceback(record):\n        extra = record[\"extra\"]\n        if extra.get(\"with_traceback\", False):\n            extra[\"traceback\"] = \"\\n\" + \"\".join(traceback.format_stack())\n        else:\n            extra[\"traceback\"] = \"\"\n\n    logger = logger.patch(add_traceback)\n    logger.add(sys.stderr, format=\"{time} - {message}{extra[traceback]}\")\n\n    logger.info(\"No traceback\")\n    logger.bind(with_traceback=True).info(\"With traceback\")\n\nHere is another example that demonstrates how to prefix the logged message with the full call stack::\n\n    import traceback\n    from itertools import takewhile\n\n    def tracing_formatter(record):\n        # Filter out frames coming from Loguru internals\n        frames = takewhile(lambda f: \"/loguru/\" not in f.filename, traceback.extract_stack())\n        stack = \" > \".join(\"{}:{}:{}\".format(f.filename, f.name, f.lineno) for f in frames)\n        record[\"extra\"][\"stack\"] = stack\n        return \"{level} | {extra[stack]} - {message}\\n{exception}\"\n\n    def foo():\n        logger.info(\"Deep call\")\n\n    def bar():\n        foo()\n\n    logger.remove()\n    logger.add(sys.stderr, format=tracing_formatter)\n\n    bar()\n    # Output: \"INFO | script.py:<module>:23 > script.py:bar:18 > script.py:foo:15 - Deep call\"\n\n\nManipulating newline terminator to write multiple logs on the same line\n-----------------------------------------------------------------------\n\nYou can temporarily log a message on a continuous line by combining the use of |bind|, |opt| and a custom ``format`` function. This is especially useful if you want to illustrate a step-by-step process in progress, for example::\n\n    def formatter(record):\n        end = record[\"extra\"].get(\"end\", \"\\n\")\n        return \"[{time}] {message}\" + end + \"{exception}\"\n\n    logger.add(sys.stderr, format=formatter)\n    logger.add(\"foo.log\", mode=\"w\")\n\n    logger.bind(end=\"\").debug(\"Progress: \")\n\n    for _ in range(5):\n        logger.opt(raw=True).debug(\".\")\n\n    logger.opt(raw=True).debug(\"\\n\")\n\n    logger.info(\"Done\")\n\n.. code-block:: none\n\n    [2020-03-26T22:47:01.708016+0100] Progress: .....\n    [2020-03-26T22:47:01.709031+0100] Done\n\nNote, however, that you may encounter difficulties depending on the sinks you use. Logging is not always appropriate for this type of end-user message.\n\n\nCapturing standard ``stdout``, ``stderr`` and ``warnings``\n----------------------------------------------------------\n\nThe use of logging should be privileged over |print|, yet, it may happen that you don't have plain control over code executed in your application. If you wish to capture standard output, you can suppress |sys.stdout| (and |sys.stderr|) with a custom stream object using |contextlib.redirect_stdout|. You have to take care of first removing the default handler, and not adding a new stdout sink once redirected or that would cause dead lock (you may use |sys.__stdout__| instead)::\n\n    import contextlib\n    import sys\n    from loguru import logger\n\n    class StreamToLogger:\n\n        def __init__(self, level=\"INFO\"):\n            self._level = level\n\n        def write(self, buffer):\n            for line in buffer.rstrip().splitlines():\n                logger.opt(depth=1).log(self._level, line.rstrip())\n\n        def flush(self):\n            pass\n\n    logger.remove()\n    logger.add(sys.__stdout__)\n\n    stream = StreamToLogger()\n    with contextlib.redirect_stdout(stream):\n        print(\"Standard output is sent to added handlers.\")\n\n\nYou may also capture warnings emitted by your application by replacing |warnings.showwarning|::\n\n    import warnings\n    from loguru import logger\n\n    showwarning_ = warnings.showwarning\n\n    def showwarning(message, *args, **kwargs):\n        logger.warning(message)\n        showwarning_(message, *args, **kwargs)\n\n    warnings.showwarning = showwarning\n\n\nAlternatively, if you want to emit warnings based on logged messages, you can simply use |warnings.warn| as a sink::\n\n\n    logger.add(warnings.warn, format=\"{message}\", filter=lambda record: record[\"level\"].name == \"WARNING\")\n\n\nCircumventing modules whose ``__name__`` value is absent\n--------------------------------------------------------\n\nLoguru makes use of the global variable ``__name__`` to determine from where the logged message is coming from. However, it may happen in very specific situation (like some Dask distributed environment) that this value is not set. In such case, Loguru will use ``None`` to make up for the lack of the value. This implies that if you want to |disable| messages coming from such special module, you have to explicitly call ``logger.disable(None)``.\n\nSimilar considerations should be taken into account while dealing with the ``filter`` attribute. As ``__name__`` is missing, Loguru will assign the ``None`` value to the ``record[\"name\"]`` entry. It also means that once formatted in your log messages, the ``{name}`` token will be equals to ``\"None\"``. This can be worked around by manually overriding the ``record[\"name\"]`` value using |patch| from inside the faulty module::\n\n    # If Loguru fails to retrieve the proper \"name\" value, assign it manually\n    logger = logger.patch(lambda record: record.update(name=\"my_module\"))\n\nYou probably should not worry about all of this except if you noticed that your code is subject to this behavior.\n\n\nInteroperability with ``tqdm`` iterations\n-----------------------------------------\n\nTrying to use the Loguru's ``logger`` during an iteration wrapped by the ``tqdm`` library may disturb the displayed progress bar. As a workaround, one can use the ``tqdm.write()`` function instead of writings logs directly to ``sys.stderr``::\n\n    import time\n\n    from loguru import logger\n    from tqdm import tqdm\n\n    logger.remove()\n    logger.add(lambda msg: tqdm.write(msg, end=\"\"), colorize=True)\n\n    logger.info(\"Initializing\")\n\n    for x in tqdm(range(100)):\n        logger.info(\"Iterating #{}\", x)\n        time.sleep(0.1)\n\n\nYou may encounter problems with colorization of your logs after importing ``tqdm`` using Spyder on Windows. This issue is discussed in `GH#132`_. You can easily circumvent the problem by calling ``colorama.deinit()`` right after your import.\n\n\nUsing Loguru's ``logger`` within a Cython module\n------------------------------------------------\n\nLoguru and Cython do not interoperate very well. This is because Loguru (and logging generally) heavily relies on Python stack frames while Cython, being an alternative Python implementation, try to get rid of these frames for optimization reasons.\n\nCalling the ``logger`` from code compiled with Cython may raise this kind of exception::\n\n    ValueError: call stack is not deep enough\n\nThis error happens when Loguru tries to access a stack frame which has been suppressed by Cython. There is no way for Loguru to retrieve contextual information of the logged message, but there exists a workaround that will at least prevent your application to crash::\n\n    # Add this at the start of your file\n    logger = logger.opt(depth=-1)\n\nNote that logged messages should be displayed correctly, but function name and other information will be incorrect. This issue is discussed in `GH#88`_.\n\n\nCreating independent loggers with separate set of handlers\n----------------------------------------------------------\n\nLoguru is fundamentally designed to be usable with exactly one global ``logger`` object dispatching logging messages to the configured handlers. In some circumstances, it may be useful to have specific messages logged to specific handlers.\n\nFor example, supposing you want to split your logs in two files based on an arbitrary identifier, you can achieve that by combining |bind| and ``filter``::\n\n    from loguru import logger\n\n    def task_A():\n        logger_a = logger.bind(task=\"A\")\n        logger_a.info(\"Starting task A\")\n        do_something()\n        logger_a.success(\"End of task A\")\n\n    def task_B():\n        logger_b = logger.bind(task=\"B\")\n        logger_b.info(\"Starting task B\")\n        do_something_else()\n        logger_b.success(\"End of task B\")\n\n    logger.add(\"file_A.log\", filter=lambda record: record[\"extra\"][\"task\"] == \"A\")\n    logger.add(\"file_B.log\", filter=lambda record: record[\"extra\"][\"task\"] == \"B\")\n\n    task_A()\n    task_B()\n\nThat way, ``\"file_A.log\"`` and ``\"file_B.log\"`` will only contains logs from respectively the ``task_A()`` and ``task_B()`` function.\n\nNow, supposing that you have a lot of these tasks. It may be a bit cumbersome to configure every handlers like this. Most importantly, it may unnecessarily slow down your application as each log will need to be checked by the ``filter`` function of each handler. In such case, it is recommended to rely on the |copy.deepcopy| built-in method that will create an independent ``logger`` object. If you add a handler to a deep copied ``logger``, it will not be shared with others functions using the original ``logger``::\n\n    import copy\n    from loguru import logger\n\n    def task(task_id, logger):\n        logger.info(\"Starting task {}\", task_id)\n        do_something(task_id)\n        logger.success(\"End of task {}\", task_id)\n\n    logger.remove()\n\n    for task_id in [\"A\", \"B\", \"C\", \"D\", \"E\"]:\n        logger_ = copy.deepcopy(logger)\n        logger_.add(\"file_%s.log\" % task_id)\n        task(task_id, logger_)\n\nNote that you may encounter errors if you try to copy a ``logger`` to which non-picklable handlers have been added. For this reason, it is generally advised to remove all handlers before calling ``copy.deepcopy(logger)``.\n\n\nCompatibility with ``multiprocessing`` using ``enqueue`` argument\n-----------------------------------------------------------------\n\nOn Linux, thanks to |os.fork| there is no pitfall while using the ``logger`` inside another process started by the |multiprocessing| module. The child process will automatically inherit added handlers, the ``enqueue=True`` parameter is optional but is recommended as it would avoid concurrent access of your sink::\n\n    # Linux implementation\n    import multiprocessing\n    from loguru import logger\n\n    def my_process():\n        logger.info(\"Executing function in child process\")\n        logger.complete()\n\n    if __name__ == \"__main__\":\n        logger.add(\"file.log\", enqueue=True)\n\n        process = multiprocessing.Process(target=my_process)\n        process.start()\n        process.join()\n\n        logger.info(\"Done\")\n\nThings get a little more complicated on Windows. Indeed, this operating system does not support forking, so Python has to use an alternative method to create sub-processes called \"spawning\". This procedure requires the whole file where the child process is created to be reloaded from scratch. This does not interoperate very well with Loguru, causing handlers to be added twice without any synchronization or, on the contrary, not being added at all (depending on ``add()`` and ``remove()`` being called inside or outside the ``__main__`` branch). For this reason, the ``logger`` object need to be explicitly passed as an initializer argument of your child process::\n\n    # Windows implementation\n    import multiprocessing\n    from loguru import logger\n\n    def my_process(logger_):\n        logger_.info(\"Executing function in child process\")\n        logger_.complete()\n\n    if __name__ == \"__main__\":\n        logger.remove()  # Default \"sys.stderr\" sink is not picklable\n        logger.add(\"file.log\", enqueue=True)\n\n        process = multiprocessing.Process(target=my_process, args=(logger, ))\n        process.start()\n        process.join()\n\n        logger.info(\"Done\")\n\nWindows requires the added sinks to be picklable or otherwise will raise an error while creating the child process. Many stream objects like standard output and file descriptors are not picklable. In such case, the ``enqueue=True`` argument is required as it will allow the child process to only inherit the queue object where logs are sent.\n\nThe |multiprocessing| library is also commonly used to start a pool of workers using for example |Pool.map| or |Pool.apply|. Again, it will work flawlessly on Linux, but it will require some tinkering on Windows. You will probably not be able to pass the ``logger`` as an argument for your worker functions because it needs to be picklable, but although handlers added using ``enqueue=True`` are \"inheritable\", they are not \"picklable\". Instead, you will need to make use of the ``initializer`` and ``initargs`` parameters while creating the |Pool| object in a way allowing your workers to access the shared ``logger``. You can either assign it to a class attribute or override the global logger of your child processes:\n\n.. code::\n\n    # workers_a.py\n    class Worker:\n\n        _logger = None\n\n        @staticmethod\n        def set_logger(logger_):\n            Worker._logger = logger_\n\n        def work(self, x):\n            self._logger.info(\"Square rooting {}\", x)\n            return x**0.5\n\n\n.. code::\n\n    # workers_b.py\n    from loguru import logger\n\n    def set_logger(logger_):\n        global logger\n        logger = logger_\n\n    def work(x):\n        logger.info(\"Square rooting {}\", x)\n        return x**0.5\n\n\n.. code::\n\n    # main.py\n    from multiprocessing import Pool\n    from loguru import logger\n    import workers_a\n    import workers_b\n\n    if __name__ == \"__main__\":\n        logger.remove()\n        logger.add(\"file.log\", enqueue=True)\n\n        worker = workers_a.Worker()\n        with Pool(4, initializer=worker.set_logger, initargs=(logger, )) as pool:\n            results = pool.map(worker.work, [1, 10, 100])\n\n        with Pool(4, initializer=workers_b.set_logger, initargs=(logger, )) as pool:\n            results = pool.map(workers_b.work, [1, 10, 100])\n\n        logger.info(\"Done\")\n\nIndependently of the operating system, note that the process in which a handler is added with ``enqueue=True`` is in charge of the queue internally used. This means that you should avoid to ``.remove()`` such handler from the parent process is any child is likely to continue using it. More importantly, note that a |Thread| is started internally to consume the queue. Therefore, it is recommended to call |complete| before leaving |Process| to make sure the queue is left in a stable state.\n", "\"\"\"\n.. References and links rendered by Sphinx are kept here as \"module documentation\" so that they can\n   be used in the ``Logger`` docstrings but do not pollute ``help(logger)`` output.\n\n.. |Logger| replace:: :class:`~Logger`\n.. |add| replace:: :meth:`~Logger.add()`\n.. |remove| replace:: :meth:`~Logger.remove()`\n.. |complete| replace:: :meth:`~Logger.complete()`\n.. |catch| replace:: :meth:`~Logger.catch()`\n.. |bind| replace:: :meth:`~Logger.bind()`\n.. |contextualize| replace:: :meth:`~Logger.contextualize()`\n.. |patch| replace:: :meth:`~Logger.patch()`\n.. |opt| replace:: :meth:`~Logger.opt()`\n.. |log| replace:: :meth:`~Logger.log()`\n.. |level| replace:: :meth:`~Logger.level()`\n.. |enable| replace:: :meth:`~Logger.enable()`\n.. |disable| replace:: :meth:`~Logger.disable()`\n\n.. |str| replace:: :class:`str`\n.. |int| replace:: :class:`int`\n.. |bool| replace:: :class:`bool`\n.. |tuple| replace:: :class:`tuple`\n.. |namedtuple| replace:: :func:`namedtuple<collections.namedtuple>`\n.. |list| replace:: :class:`list`\n.. |dict| replace:: :class:`dict`\n.. |str.format| replace:: :meth:`str.format()`\n.. |Path| replace:: :class:`pathlib.Path`\n.. |match.groupdict| replace:: :meth:`re.Match.groupdict()`\n.. |Handler| replace:: :class:`logging.Handler`\n.. |sys.stderr| replace:: :data:`sys.stderr`\n.. |sys.exc_info| replace:: :func:`sys.exc_info()`\n.. |time| replace:: :class:`datetime.time`\n.. |datetime| replace:: :class:`datetime.datetime`\n.. |timedelta| replace:: :class:`datetime.timedelta`\n.. |open| replace:: :func:`open()`\n.. |logging| replace:: :mod:`logging`\n.. |signal| replace:: :mod:`signal`\n.. |contextvars| replace:: :mod:`contextvars`\n.. |Thread.run| replace:: :meth:`Thread.run()<threading.Thread.run()>`\n.. |Exception| replace:: :class:`Exception`\n.. |AbstractEventLoop| replace:: :class:`AbstractEventLoop<asyncio.AbstractEventLoop>`\n.. |asyncio.get_running_loop| replace:: :func:`asyncio.get_running_loop()`\n.. |asyncio.run| replace:: :func:`asyncio.run()`\n.. |loop.run_until_complete| replace::\n    :meth:`loop.run_until_complete()<asyncio.loop.run_until_complete()>`\n.. |loop.create_task| replace:: :meth:`loop.create_task()<asyncio.loop.create_task()>`\n\n.. |logger.trace| replace:: :meth:`logger.trace()<Logger.trace()>`\n.. |logger.debug| replace:: :meth:`logger.debug()<Logger.debug()>`\n.. |logger.info| replace:: :meth:`logger.info()<Logger.info()>`\n.. |logger.success| replace:: :meth:`logger.success()<Logger.success()>`\n.. |logger.warning| replace:: :meth:`logger.warning()<Logger.warning()>`\n.. |logger.error| replace:: :meth:`logger.error()<Logger.error()>`\n.. |logger.critical| replace:: :meth:`logger.critical()<Logger.critical()>`\n\n.. |file-like object| replace:: ``file-like object``\n.. _file-like object: https://docs.python.org/3/glossary.html#term-file-object\n.. |callable| replace:: ``callable``\n.. _callable: https://docs.python.org/3/library/functions.html#callable\n.. |coroutine function| replace:: ``coroutine function``\n.. _coroutine function: https://docs.python.org/3/glossary.html#term-coroutine-function\n.. |re.Pattern| replace:: ``re.Pattern``\n.. _re.Pattern: https://docs.python.org/3/library/re.html#re-objects\n\n.. |better_exceptions| replace:: ``better_exceptions``\n.. _better_exceptions: https://github.com/Qix-/better-exceptions\n\n.. _Pendulum: https://pendulum.eustace.io/docs/#tokens\n.. _@sdispater: https://github.com/sdispater\n.. _@Qix-: https://github.com/Qix-\n.. _Formatting directives: https://docs.python.org/3/library/string.html#format-string-syntax\n.. _reentrant: https://en.wikipedia.org/wiki/Reentrancy_(computing)\n\"\"\"\nimport builtins\nimport contextlib\nimport functools\nimport itertools\nimport logging\nimport re\nimport sys\nimport warnings\nfrom collections import namedtuple\nfrom inspect import isclass, iscoroutinefunction, isgeneratorfunction\nfrom multiprocessing import current_process\nfrom os.path import basename, splitext\nfrom threading import current_thread\n\nfrom . import _asyncio_loop, _colorama, _defaults, _filters\nfrom ._better_exceptions import ExceptionFormatter\nfrom ._colorizer import Colorizer\nfrom ._contextvars import ContextVar\nfrom ._datetime import aware_now\nfrom ._error_interceptor import ErrorInterceptor\nfrom ._file_sink import FileSink\nfrom ._get_frame import get_frame\nfrom ._handler import Handler\nfrom ._locks_machinery import create_logger_lock\nfrom ._recattrs import RecordException, RecordFile, RecordLevel, RecordProcess, RecordThread\nfrom ._simple_sinks import AsyncSink, CallableSink, StandardSink, StreamSink\n\nif sys.version_info >= (3, 6):\n    from os import PathLike\nelse:\n    from pathlib import PurePath as PathLike\n\n\nLevel = namedtuple(\"Level\", [\"name\", \"no\", \"color\", \"icon\"])\n\nstart_time = aware_now()\n\ncontext = ContextVar(\"loguru_context\", default={})\n\n\nclass Core:\n    def __init__(self):\n        levels = [\n            Level(\n                \"TRACE\",\n                _defaults.LOGURU_TRACE_NO,\n                _defaults.LOGURU_TRACE_COLOR,\n                _defaults.LOGURU_TRACE_ICON,\n            ),\n            Level(\n                \"DEBUG\",\n                _defaults.LOGURU_DEBUG_NO,\n                _defaults.LOGURU_DEBUG_COLOR,\n                _defaults.LOGURU_DEBUG_ICON,\n            ),\n            Level(\n                \"INFO\",\n                _defaults.LOGURU_INFO_NO,\n                _defaults.LOGURU_INFO_COLOR,\n                _defaults.LOGURU_INFO_ICON,\n            ),\n            Level(\n                \"SUCCESS\",\n                _defaults.LOGURU_SUCCESS_NO,\n                _defaults.LOGURU_SUCCESS_COLOR,\n                _defaults.LOGURU_SUCCESS_ICON,\n            ),\n            Level(\n                \"WARNING\",\n                _defaults.LOGURU_WARNING_NO,\n                _defaults.LOGURU_WARNING_COLOR,\n                _defaults.LOGURU_WARNING_ICON,\n            ),\n            Level(\n                \"ERROR\",\n                _defaults.LOGURU_ERROR_NO,\n                _defaults.LOGURU_ERROR_COLOR,\n                _defaults.LOGURU_ERROR_ICON,\n            ),\n            Level(\n                \"CRITICAL\",\n                _defaults.LOGURU_CRITICAL_NO,\n                _defaults.LOGURU_CRITICAL_COLOR,\n                _defaults.LOGURU_CRITICAL_ICON,\n            ),\n        ]\n        self.levels = {level.name: level for level in levels}\n        self.levels_ansi_codes = {\n            name: Colorizer.ansify(level.color) for name, level in self.levels.items()\n        }\n        self.levels_ansi_codes[None] = \"\"\n\n        self.handlers_count = itertools.count()\n        self.handlers = {}\n\n        self.extra = {}\n        self.patcher = None\n\n        self.min_level = float(\"inf\")\n        self.enabled = {}\n        self.activation_list = []\n        self.activation_none = True\n\n        self.lock = create_logger_lock()\n\n    def __getstate__(self):\n        state = self.__dict__.copy()\n        state[\"lock\"] = None\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.lock = create_logger_lock()\n\n\nclass Logger:\n    \"\"\"An object to dispatch logging messages to configured handlers.\n\n    The |Logger| is the core object of ``loguru``, every logging configuration and usage pass\n    through a call to one of its methods. There is only one logger, so there is no need to retrieve\n    one before usage.\n\n    Once the ``logger`` is imported, it can be used to write messages about events happening in your\n    code. By reading the output logs of your application, you gain a better understanding of the\n    flow of your program and you more easily track and debug unexpected behaviors.\n\n    Handlers to which the logger sends log messages are added using the |add| method. Note that you\n    can use the |Logger| right after import as it comes pre-configured (logs are emitted to\n    |sys.stderr| by default). Messages can be logged with different severity levels and they can be\n    formatted using curly braces (it uses |str.format| under the hood).\n\n    When a message is logged, a \"record\" is associated with it. This record is a dict which contains\n    information about the logging context: time, function, file, line, thread, level... It also\n    contains the ``__name__`` of the module, this is why you don't need named loggers.\n\n    You should not instantiate a |Logger| by yourself, use ``from loguru import logger`` instead.\n    \"\"\"\n\n    def __init__(self, core, exception, depth, record, lazy, colors, raw, capture, patcher, extra):\n        self._core = core\n        self._options = (exception, depth, record, lazy, colors, raw, capture, patcher, extra)\n\n    def __repr__(self):\n        return \"<loguru.logger handlers=%r>\" % list(self._core.handlers.values())\n\n    def add(\n        self,\n        sink,\n        *,\n        level=_defaults.LOGURU_LEVEL,\n        format=_defaults.LOGURU_FORMAT,\n        filter=_defaults.LOGURU_FILTER,\n        colorize=_defaults.LOGURU_COLORIZE,\n        serialize=_defaults.LOGURU_SERIALIZE,\n        backtrace=_defaults.LOGURU_BACKTRACE,\n        diagnose=_defaults.LOGURU_DIAGNOSE,\n        enqueue=_defaults.LOGURU_ENQUEUE,\n        catch=_defaults.LOGURU_CATCH,\n        **kwargs\n    ):\n        r\"\"\"Add a handler sending log messages to a sink adequately configured.\n\n        Parameters\n        ----------\n        sink : |file-like object|_, |str|, |Path|, |callable|_, |coroutine function|_ or |Handler|\n            An object in charge of receiving formatted logging messages and propagating them to an\n            appropriate endpoint.\n        level : |int| or |str|, optional\n            The minimum severity level from which logged messages should be sent to the sink.\n        format : |str| or |callable|_, optional\n            The template used to format logged messages before being sent to the sink.\n        filter : |callable|_, |str| or |dict|, optional\n            A directive optionally used to decide for each logged message whether it should be sent\n            to the sink or not.\n        colorize : |bool|, optional\n            Whether the color markups contained in the formatted message should be converted to ansi\n            codes for terminal coloration, or stripped otherwise. If ``None``, the choice is\n            automatically made based on the sink being a tty or not.\n        serialize : |bool|, optional\n            Whether the logged message and its records should be first converted to a JSON string\n            before being sent to the sink.\n        backtrace : |bool|, optional\n            Whether the exception trace formatted should be extended upward, beyond the catching\n            point, to show the full stacktrace which generated the error.\n        diagnose : |bool|, optional\n            Whether the exception trace should display the variables values to eases the debugging.\n            This should be set to ``False`` in production to avoid leaking sensitive data.\n        enqueue : |bool|, optional\n            Whether the messages to be logged should first pass through a multiprocess-safe queue\n            before reaching the sink. This is useful while logging to a file through multiple\n            processes. This also has the advantage of making logging calls non-blocking.\n        catch : |bool|, optional\n            Whether errors occurring while sink handles logs messages should be automatically\n            caught. If ``True``, an exception message is displayed on |sys.stderr| but the exception\n            is not propagated to the caller, preventing your app to crash.\n        **kwargs\n            Additional parameters that are only valid to configure a coroutine or file sink (see\n            below).\n\n\n        If and only if the sink is a coroutine function, the following parameter applies:\n\n        Parameters\n        ----------\n        loop : |AbstractEventLoop|, optional\n            The event loop in which the asynchronous logging task will be scheduled and executed. If\n            ``None``, the loop used is the one returned by |asyncio.get_running_loop| at the time of\n            the logging call (task is discarded if there is no loop currently running).\n\n\n        If and only if the sink is a file path, the following parameters apply:\n\n        Parameters\n        ----------\n        rotation : |str|, |int|, |time|, |timedelta| or |callable|_, optional\n            A condition indicating whenever the current logged file should be closed and a new one\n            started.\n        retention : |str|, |int|, |timedelta| or |callable|_, optional\n            A directive filtering old files that should be removed during rotation or end of\n            program.\n        compression : |str| or |callable|_, optional\n            A compression or archive format to which log files should be converted at closure.\n        delay : |bool|, optional\n            Whether the file should be created as soon as the sink is configured, or delayed until\n            first logged message. It defaults to ``False``.\n        mode : |str|, optional\n            The opening mode as for built-in |open| function. It defaults to ``\"a\"`` (open the\n            file in appending mode).\n        buffering : |int|, optional\n            The buffering policy as for built-in |open| function. It defaults to ``1`` (line\n            buffered file).\n        encoding : |str|, optional\n            The file encoding as for built-in |open| function. It defaults to ``\"utf8\"``.\n        **kwargs\n            Others parameters are passed to the built-in |open| function.\n\n        Returns\n        -------\n        :class:`int`\n            An identifier associated with the added sink and which should be used to\n            |remove| it.\n\n        Raises\n        ------\n        ValueError\n            If any of the arguments passed to configure the sink is invalid.\n\n        Notes\n        -----\n        Extended summary follows.\n\n        .. _sink:\n\n        .. rubric:: The sink parameter\n\n        The ``sink`` handles incoming log messages and proceed to their writing somewhere and\n        somehow. A sink can take many forms:\n\n        - A |file-like object|_ like ``sys.stderr`` or ``open(\"somefile.log\", \"w\")``. Anything with\n          a ``.write()`` method is considered as a file-like object. Custom handlers may also\n          implement ``flush()`` (called after each logged message), ``stop()`` (called at sink\n          termination) and ``complete()`` (awaited by the eponymous method).\n        - A file path as |str| or |Path|. It can be parametrized with some additional parameters,\n          see below.\n        - A |callable|_ (such as a simple function) like ``lambda msg: print(msg)``. This\n          allows for logging procedure entirely defined by user preferences and needs.\n        - A asynchronous |coroutine function|_ defined with the ``async def`` statement. The\n          coroutine object returned by such function will be added to the event loop using\n          |loop.create_task|. The tasks should be awaited before ending the loop by using\n          |complete|.\n        - A built-in |Handler| like ``logging.StreamHandler``. In such a case, the `Loguru` records\n          are automatically converted to the structure expected by the |logging| module.\n\n        Note that the logging functions are not `reentrant`_. This means you should avoid using\n        the ``logger`` inside any of your sinks or from within |signal| handlers. Otherwise, you\n        may face deadlock if the module's sink was not explicitly disabled.\n\n        .. _message:\n\n        .. rubric:: The logged message\n\n        The logged message passed to all added sinks is nothing more than a string of the\n        formatted log, to which a special attribute is associated: the ``.record`` which is a dict\n        containing all contextual information possibly needed (see below).\n\n        Logged messages are formatted according to the ``format`` of the added sink. This format\n        is usually a string containing braces fields to display attributes from the record dict.\n\n        If fine-grained control is needed, the ``format`` can also be a function which takes the\n        record as parameter and return the format template string. However, note that in such a\n        case, you should take care of appending the line ending and exception field to the returned\n        format, while ``\"\\n{exception}\"`` is automatically appended for convenience if ``format`` is\n        a string.\n\n        The ``filter`` attribute can be used to control which messages are effectively passed to the\n        sink and which one are ignored. A function can be used, accepting the record as an\n        argument, and returning ``True`` if the message should be logged, ``False`` otherwise. If\n        a string is used, only the records with the same ``name`` and its children will be allowed.\n        One can also pass a ``dict`` mapping module names to minimum required level. In such case,\n        each log record will search for it's closest parent in the ``dict`` and use the associated\n        level as the filter. The ``dict`` values can be ``int`` severity, ``str`` level name or\n        ``True`` and ``False`` to respectively authorize and discard all module logs\n        unconditionally. In order to set a default level, the ``\"\"`` module name should be used as\n        it is the parent of all modules (it does not suppress global ``level`` threshold, though).\n\n        Note that while calling a logging method, the keyword arguments (if any) are automatically\n        added to the ``extra`` dict for convenient contextualization (in addition to being used for\n        formatting).\n\n        .. _levels:\n\n        .. rubric:: The severity levels\n\n        Each logged message is associated with a severity level. These levels make it possible to\n        prioritize messages and to choose the verbosity of the logs according to usages. For\n        example, it allows to display some debugging information to a developer, while hiding it to\n        the end user running the application.\n\n        The ``level`` attribute of every added sink controls the minimum threshold from which log\n        messages are allowed to be emitted. While using the ``logger``, you are in charge of\n        configuring the appropriate granularity of your logs. It is possible to add even more custom\n        levels by using the |level| method.\n\n        Here are the standard levels with their default severity value, each one is associated with\n        a logging method of the same name:\n\n        +----------------------+------------------------+------------------------+\n        | Level name           | Severity value         | Logger method          |\n        +======================+========================+========================+\n        | ``TRACE``            | 5                      | |logger.trace|         |\n        +----------------------+------------------------+------------------------+\n        | ``DEBUG``            | 10                     | |logger.debug|         |\n        +----------------------+------------------------+------------------------+\n        | ``INFO``             | 20                     | |logger.info|          |\n        +----------------------+------------------------+------------------------+\n        | ``SUCCESS``          | 25                     | |logger.success|       |\n        +----------------------+------------------------+------------------------+\n        | ``WARNING``          | 30                     | |logger.warning|       |\n        +----------------------+------------------------+------------------------+\n        | ``ERROR``            | 40                     | |logger.error|         |\n        +----------------------+------------------------+------------------------+\n        | ``CRITICAL``         | 50                     | |logger.critical|      |\n        +----------------------+------------------------+------------------------+\n\n        .. _record:\n\n        .. rubric:: The record dict\n\n        The record is just a Python dict, accessible from sinks by ``message.record``. It contains\n        all contextual information of the logging call (time, function, file, line, level, etc.).\n\n        Each of its key can be used in the handler's ``format`` so the corresponding value is\n        properly displayed in the logged message (e.g. ``\"{level}\"`` -> ``\"INFO\"``). Some record's\n        values are objects with two or more attributes, these can be formatted with ``\"{key.attr}\"``\n        (``\"{key}\"`` would display one by default). `Formatting directives`_ like ``\"{key: >3}\"``\n        also works and is particularly useful for time (see below).\n\n        +------------+---------------------------------+----------------------------+\n        | Key        | Description                     | Attributes                 |\n        +============+=================================+============================+\n        | elapsed    | The time elapsed since the      | See |timedelta|            |\n        |            | start of the program            |                            |\n        +------------+---------------------------------+----------------------------+\n        | exception  | The formatted exception if any, | ``type``, ``value``,       |\n        |            | ``None`` otherwise              | ``traceback``              |\n        +------------+---------------------------------+----------------------------+\n        | extra      | The dict of attributes          | None                       |\n        |            | bound by the user (see |bind|)  |                            |\n        +------------+---------------------------------+----------------------------+\n        | file       | The file where the logging call | ``name`` (default),        |\n        |            | was made                        | ``path``                   |\n        +------------+---------------------------------+----------------------------+\n        | function   | The function from which the     | None                       |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | level      | The severity used to log the    | ``name`` (default),        |\n        |            | message                         | ``no``, ``icon``           |\n        +------------+---------------------------------+----------------------------+\n        | line       | The line number in the source   | None                       |\n        |            | code                            |                            |\n        +------------+---------------------------------+----------------------------+\n        | message    | The logged message (not yet     | None                       |\n        |            | formatted)                      |                            |\n        +------------+---------------------------------+----------------------------+\n        | module     | The module where the logging    | None                       |\n        |            | call was made                   |                            |\n        +------------+---------------------------------+----------------------------+\n        | name       | The ``__name__`` where the      | None                       |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | process    | The process in which the        | ``name``, ``id`` (default) |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | thread     | The thread in which the         | ``name``, ``id`` (default) |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | time       | The aware local time when the   | See |datetime|             |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n\n        .. _time:\n\n        .. rubric:: The time formatting\n\n        To use your favorite time representation, you can set it directly in the time formatter\n        specifier of your handler format, like for example ``format=\"{time:HH:mm:ss} {message}\"``.\n        Note that this datetime represents your local time, and it is also made timezone-aware,\n        so you can display the UTC offset to avoid ambiguities.\n\n        The time field can be formatted using more human-friendly tokens. These constitute a subset\n        of the one used by the `Pendulum`_ library of `@sdispater`_. To escape a token, just add\n        square brackets around it, for example ``\"[YY]\"`` would display literally ``\"YY\"``.\n\n        If you prefer to display UTC rather than local time, you can add ``\"!UTC\"`` at the very end\n        of the time format, like ``{time:HH:mm:ss!UTC}``. Doing so will convert the ``datetime``\n        to UTC before formatting.\n\n        If no time formatter specifier is used, like for example if ``format=\"{time} {message}\"``,\n        the default one will use ISO 8601.\n\n        +------------------------+---------+----------------------------------------+\n        |                        | Token   | Output                                 |\n        +========================+=========+========================================+\n        | Year                   | YYYY    | 2000, 2001, 2002 ... 2012, 2013        |\n        |                        +---------+----------------------------------------+\n        |                        | YY      | 00, 01, 02 ... 12, 13                  |\n        +------------------------+---------+----------------------------------------+\n        | Quarter                | Q       | 1 2 3 4                                |\n        +------------------------+---------+----------------------------------------+\n        | Month                  | MMMM    | January, February, March ...           |\n        |                        +---------+----------------------------------------+\n        |                        | MMM     | Jan, Feb, Mar ...                      |\n        |                        +---------+----------------------------------------+\n        |                        | MM      | 01, 02, 03 ... 11, 12                  |\n        |                        +---------+----------------------------------------+\n        |                        | M       | 1, 2, 3 ... 11, 12                     |\n        +------------------------+---------+----------------------------------------+\n        | Day of Year            | DDDD    | 001, 002, 003 ... 364, 365             |\n        |                        +---------+----------------------------------------+\n        |                        | DDD     | 1, 2, 3 ... 364, 365                   |\n        +------------------------+---------+----------------------------------------+\n        | Day of Month           | DD      | 01, 02, 03 ... 30, 31                  |\n        |                        +---------+----------------------------------------+\n        |                        | D       | 1, 2, 3 ... 30, 31                     |\n        +------------------------+---------+----------------------------------------+\n        | Day of Week            | dddd    | Monday, Tuesday, Wednesday ...         |\n        |                        +---------+----------------------------------------+\n        |                        | ddd     | Mon, Tue, Wed ...                      |\n        |                        +---------+----------------------------------------+\n        |                        | d       | 0, 1, 2 ... 6                          |\n        +------------------------+---------+----------------------------------------+\n        | Days of ISO Week       | E       | 1, 2, 3 ... 7                          |\n        +------------------------+---------+----------------------------------------+\n        | Hour                   | HH      | 00, 01, 02 ... 23, 24                  |\n        |                        +---------+----------------------------------------+\n        |                        | H       | 0, 1, 2 ... 23, 24                     |\n        |                        +---------+----------------------------------------+\n        |                        | hh      | 01, 02, 03 ... 11, 12                  |\n        |                        +---------+----------------------------------------+\n        |                        | h       | 1, 2, 3 ... 11, 12                     |\n        +------------------------+---------+----------------------------------------+\n        | Minute                 | mm      | 00, 01, 02 ... 58, 59                  |\n        |                        +---------+----------------------------------------+\n        |                        | m       | 0, 1, 2 ... 58, 59                     |\n        +------------------------+---------+----------------------------------------+\n        | Second                 | ss      | 00, 01, 02 ... 58, 59                  |\n        |                        +---------+----------------------------------------+\n        |                        | s       | 0, 1, 2 ... 58, 59                     |\n        +------------------------+---------+----------------------------------------+\n        | Fractional Second      | S       | 0 1 ... 8 9                            |\n        |                        +---------+----------------------------------------+\n        |                        | SS      | 00, 01, 02 ... 98, 99                  |\n        |                        +---------+----------------------------------------+\n        |                        | SSS     | 000 001 ... 998 999                    |\n        |                        +---------+----------------------------------------+\n        |                        | SSSS... | 000[0..] 001[0..] ... 998[0..] 999[0..]|\n        |                        +---------+----------------------------------------+\n        |                        | SSSSSS  | 000000 000001 ... 999998 999999        |\n        +------------------------+---------+----------------------------------------+\n        | AM / PM                | A       | AM, PM                                 |\n        +------------------------+---------+----------------------------------------+\n        | Timezone               | Z       | -07:00, -06:00 ... +06:00, +07:00      |\n        |                        +---------+----------------------------------------+\n        |                        | ZZ      | -0700, -0600 ... +0600, +0700          |\n        |                        +---------+----------------------------------------+\n        |                        | zz      | EST CST ... MST PST                    |\n        +------------------------+---------+----------------------------------------+\n        | Seconds timestamp      | X       | 1381685817, 1234567890.123             |\n        +------------------------+---------+----------------------------------------+\n        | Microseconds timestamp | x       | 1234567890123                          |\n        +------------------------+---------+----------------------------------------+\n\n        .. _file:\n\n        .. rubric:: The file sinks\n\n        If the sink is a |str| or a |Path|, the corresponding file will be opened for writing logs.\n        The path can also contain a special ``\"{time}\"`` field that will be formatted with the\n        current date at file creation.\n\n        The ``rotation`` check is made before logging each message. If there is already an existing\n        file with the same name that the file to be created, then the existing file is renamed by\n        appending the date to its basename to prevent file overwriting. This parameter accepts:\n\n        - an |int| which corresponds to the maximum file size in bytes before that the current\n          logged file is closed and a new one started over.\n        - a |timedelta| which indicates the frequency of each new rotation.\n        - a |time| which specifies the hour when the daily rotation should occur.\n        - a |str| for human-friendly parametrization of one of the previously enumerated types.\n          Examples: ``\"100 MB\"``, ``\"0.5 GB\"``, ``\"1 month 2 weeks\"``, ``\"4 days\"``, ``\"10h\"``,\n          ``\"monthly\"``, ``\"18:00\"``, ``\"sunday\"``, ``\"w0\"``, ``\"monday at 12:00\"``, ...\n        - a |callable|_ which will be invoked before logging. It should accept two arguments: the\n          logged message and the file object, and it should return ``True`` if the rotation should\n          happen now, ``False`` otherwise.\n\n        The ``retention`` occurs at rotation or at sink stop if rotation is ``None``. Files are\n        selected if they match the pattern ``\"basename(.*).ext(.*)\"`` (possible time fields are\n        beforehand replaced with ``.*``) based on the sink file. This parameter accepts:\n\n        - an |int| which indicates the number of log files to keep, while older files are removed.\n        - a |timedelta| which specifies the maximum age of files to keep.\n        - a |str| for human-friendly parametrization of the maximum age of files to keep.\n          Examples: ``\"1 week, 3 days\"``, ``\"2 months\"``, ...\n        - a |callable|_ which will be invoked before the retention process. It should accept the\n          list of log files as argument and process to whatever it wants (moving files, removing\n          them, etc.).\n\n        The ``compression`` happens at rotation or at sink stop if rotation is ``None``. This\n        parameter accepts:\n\n        - a |str| which corresponds to the compressed or archived file extension. This can be one\n          of: ``\"gz\"``, ``\"bz2\"``, ``\"xz\"``, ``\"lzma\"``, ``\"tar\"``, ``\"tar.gz\"``, ``\"tar.bz2\"``,\n          ``\"tar.xz\"``, ``\"zip\"``.\n        - a |callable|_ which will be invoked before file termination. It should accept the path of\n          the log file as argument and process to whatever it wants (custom compression, network\n          sending, removing it, etc.).\n\n        Either way, if you use a custom function designed according to your preferences, you must be\n        very careful not to use the ``logger`` within your function. Otherwise, there is a risk that\n        your program hang because of a deadlock.\n\n        .. _color:\n\n        .. rubric:: The color markups\n\n        To add colors to your logs, you just have to enclose your format string with the appropriate\n        tags (e.g. ``<red>some message</red>``). These tags are automatically removed if the sink\n        doesn't support ansi codes. For convenience, you can use ``</>`` to close the last opening\n        tag without repeating its name (e.g. ``<red>another message</>``).\n\n        The special tag ``<level>`` (abbreviated with ``<lvl>``) is transformed according to\n        the configured color of the logged message level.\n\n        Tags which are not recognized will raise an exception during parsing, to inform you about\n        possible misuse. If you wish to display a markup tag literally, you can escape it by\n        prepending a ``\\`` like for example ``\\<blue>``. If, for some reason, you need to escape a\n        string programmatically, note that the regex used internally to parse markup tags is\n        ``r\"\\\\?</?((?:[fb]g\\s)?[^<>\\s]*)>\"``.\n\n        Note that when logging a message with ``opt(colors=True)``, color tags present in the\n        formatting arguments (``args`` and ``kwargs``) are completely ignored. This is important if\n        you need to log strings containing markups that might interfere with the color tags (in this\n        case, do not use f-string).\n\n        Here are the available tags (note that compatibility may vary depending on terminal):\n\n        +------------------------------------+--------------------------------------+\n        | Color (abbr)                       | Styles (abbr)                        |\n        +====================================+======================================+\n        | Black (k)                          | Bold (b)                             |\n        +------------------------------------+--------------------------------------+\n        | Blue (e)                           | Dim (d)                              |\n        +------------------------------------+--------------------------------------+\n        | Cyan (c)                           | Normal (n)                           |\n        +------------------------------------+--------------------------------------+\n        | Green (g)                          | Italic (i)                           |\n        +------------------------------------+--------------------------------------+\n        | Magenta (m)                        | Underline (u)                        |\n        +------------------------------------+--------------------------------------+\n        | Red (r)                            | Strike (s)                           |\n        +------------------------------------+--------------------------------------+\n        | White (w)                          | Reverse (v)                          |\n        +------------------------------------+--------------------------------------+\n        | Yellow (y)                         | Blink (l)                            |\n        +------------------------------------+--------------------------------------+\n        |                                    | Hide (h)                             |\n        +------------------------------------+--------------------------------------+\n\n        Usage:\n\n        +-----------------+-------------------------------------------------------------------+\n        | Description     | Examples                                                          |\n        |                 +---------------------------------+---------------------------------+\n        |                 | Foreground                      | Background                      |\n        +=================+=================================+=================================+\n        | Basic colors    | ``<red>``, ``<r>``              | ``<GREEN>``, ``<G>``            |\n        +-----------------+---------------------------------+---------------------------------+\n        | Light colors    | ``<light-blue>``, ``<le>``      | ``<LIGHT-CYAN>``, ``<LC>``      |\n        +-----------------+---------------------------------+---------------------------------+\n        | 8-bit colors    | ``<fg 86>``, ``<fg 255>``       | ``<bg 42>``, ``<bg 9>``         |\n        +-----------------+---------------------------------+---------------------------------+\n        | Hex colors      | ``<fg #00005f>``, ``<fg #EE1>`` | ``<bg #AF5FD7>``, ``<bg #fff>`` |\n        +-----------------+---------------------------------+---------------------------------+\n        | RGB colors      | ``<fg 0,95,0>``                 | ``<bg 72,119,65>``              |\n        +-----------------+---------------------------------+---------------------------------+\n        | Stylizing       | ``<bold>``, ``<b>``,  ``<underline>``, ``<u>``                    |\n        +-----------------+-------------------------------------------------------------------+\n\n        .. _env:\n\n        .. rubric:: The environment variables\n\n        The default values of sink parameters can be entirely customized. This is particularly\n        useful if you don't like the log format of the pre-configured sink.\n\n        Each of the |add| default parameter can be modified by setting the ``LOGURU_[PARAM]``\n        environment variable. For example on Linux: ``export LOGURU_FORMAT=\"{time} - {message}\"``\n        or ``export LOGURU_DIAGNOSE=NO``.\n\n        The default levels' attributes can also be modified by setting the ``LOGURU_[LEVEL]_[ATTR]``\n        environment variable. For example, on Windows: ``setx LOGURU_DEBUG_COLOR \"<blue>\"``\n        or ``setx LOGURU_TRACE_ICON \"\ud83d\ude80\"``. If you use the ``set`` command, do not include quotes\n        but escape special symbol as needed, e.g. ``set LOGURU_DEBUG_COLOR=^<blue^>``.\n\n        If you want to disable the pre-configured sink, you can set the ``LOGURU_AUTOINIT``\n        variable to ``False``.\n\n        On Linux, you will probably need to edit the ``~/.profile`` file to make this persistent. On\n        Windows, don't forget to restart your terminal for the change to be taken into account.\n\n        Examples\n        --------\n        >>> logger.add(sys.stdout, format=\"{time} - {level} - {message}\", filter=\"sub.module\")\n\n        >>> logger.add(\"file_{time}.log\", level=\"TRACE\", rotation=\"100 MB\")\n\n        >>> def debug_only(record):\n        ...     return record[\"level\"].name == \"DEBUG\"\n        ...\n        >>> logger.add(\"debug.log\", filter=debug_only)  # Other levels are filtered out\n\n        >>> def my_sink(message):\n        ...     record = message.record\n        ...     update_db(message, time=record[\"time\"], level=record[\"level\"])\n        ...\n        >>> logger.add(my_sink)\n\n        >>> level_per_module = {\n        ...     \"\": \"DEBUG\",\n        ...     \"third.lib\": \"WARNING\",\n        ...     \"anotherlib\": False\n        ... }\n        >>> logger.add(lambda m: print(m, end=\"\"), filter=level_per_module, level=0)\n\n        >>> async def publish(message):\n        ...     await api.post(message)\n        ...\n        >>> logger.add(publish, serialize=True)\n\n        >>> from logging import StreamHandler\n        >>> logger.add(StreamHandler(sys.stderr), format=\"{message}\")\n\n        >>> class RandomStream:\n        ...     def __init__(self, seed, threshold):\n        ...         self.threshold = threshold\n        ...         random.seed(seed)\n        ...     def write(self, message):\n        ...         if random.random() > self.threshold:\n        ...             print(message)\n        ...\n        >>> stream_object = RandomStream(seed=12345, threshold=0.25)\n        >>> logger.add(stream_object, level=\"INFO\")\n        \"\"\"\n        with self._core.lock:\n            handler_id = next(self._core.handlers_count)\n\n        error_interceptor = ErrorInterceptor(catch, handler_id)\n\n        if colorize is None and serialize:\n            colorize = False\n\n        if isinstance(sink, (str, PathLike)):\n            path = sink\n            name = \"'%s'\" % path\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = FileSink(path, **kwargs)\n            kwargs = {}\n            encoding = wrapped_sink.encoding\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif hasattr(sink, \"write\") and callable(sink.write):\n            name = getattr(sink, \"name\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = _colorama.should_colorize(sink)\n\n            if colorize is True and _colorama.should_wrap(sink):\n                stream = _colorama.wrap(sink)\n            else:\n                stream = sink\n\n            wrapped_sink = StreamSink(stream)\n            encoding = getattr(sink, \"encoding\", None)\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif isinstance(sink, logging.Handler):\n            name = repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = StandardSink(sink)\n            encoding = getattr(sink, \"encoding\", None)\n            terminator = \"\"\n            exception_prefix = \"\\n\"\n        elif iscoroutinefunction(sink) or iscoroutinefunction(getattr(sink, \"__call__\", None)):\n            name = getattr(sink, \"__name__\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            loop = kwargs.pop(\"loop\", None)\n\n            # The worker thread needs an event loop, it can't create a new one internally because it\n            # has to be accessible by the user while calling \"complete()\", instead we use the global\n            # one when the sink is added. If \"enqueue=False\" the event loop is dynamically retrieved\n            # at each logging call, which is much more convenient. However, coroutine can't access\n            # running loop in Python 3.5.2 and earlier versions, see python/asyncio#452.\n            if enqueue and loop is None:\n                try:\n                    loop = _asyncio_loop.get_running_loop()\n                except RuntimeError as e:\n                    raise ValueError(\n                        \"An event loop is required to add a coroutine sink with `enqueue=True`, \"\n                        \"but but none has been passed as argument and none is currently running.\"\n                    ) from e\n\n            coro = sink if iscoroutinefunction(sink) else sink.__call__\n            wrapped_sink = AsyncSink(coro, loop, error_interceptor)\n            encoding = \"utf8\"\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif callable(sink):\n            name = getattr(sink, \"__name__\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = CallableSink(sink)\n            encoding = \"utf8\"\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        else:\n            raise TypeError(\"Cannot log to objects of type '%s'\" % type(sink).__name__)\n\n        if kwargs:\n            raise TypeError(\"add() got an unexpected keyword argument '%s'\" % next(iter(kwargs)))\n\n        if filter is None:\n            filter_func = None\n        elif filter == \"\":\n            filter_func = _filters.filter_none\n        elif isinstance(filter, str):\n            parent = filter + \".\"\n            length = len(parent)\n            filter_func = functools.partial(_filters.filter_by_name, parent=parent, length=length)\n        elif isinstance(filter, dict):\n            level_per_module = {}\n            for module, level_ in filter.items():\n                if module is not None and not isinstance(module, str):\n                    raise TypeError(\n                        \"The filter dict contains an invalid module, \"\n                        \"it should be a string (or None), not: '%s'\" % type(module).__name__\n                    )\n                if level_ is False:\n                    levelno_ = False\n                elif level_ is True:\n                    levelno_ = 0\n                elif isinstance(level_, str):\n                    try:\n                        levelno_ = self.level(level_).no\n                    except ValueError:\n                        raise ValueError(\n                            \"The filter dict contains a module '%s' associated to a level name \"\n                            \"which does not exist: '%s'\" % (module, level_)\n                        )\n                elif isinstance(level_, int):\n                    levelno_ = level_\n                else:\n                    raise TypeError(\n                        \"The filter dict contains a module '%s' associated to an invalid level, \"\n                        \"it should be an integer, a string or a boolean, not: '%s'\"\n                        % (module, type(level_).__name__)\n                    )\n                if levelno_ < 0:\n                    raise ValueError(\n                        \"The filter dict contains a module '%s' associated to an invalid level, \"\n                        \"it should be a positive integer, not: '%d'\" % (module, levelno_)\n                    )\n                level_per_module[module] = levelno_\n            filter_func = functools.partial(\n                _filters.filter_by_level, level_per_module=level_per_module\n            )\n        elif callable(filter):\n            if filter == builtins.filter:\n                raise ValueError(\n                    \"The built-in 'filter()' function cannot be used as a 'filter' parameter, \"\n                    \"this is most likely a mistake (please double-check the arguments passed \"\n                    \"to 'logger.add()').\"\n                )\n            filter_func = filter\n        else:\n            raise TypeError(\n                \"Invalid filter, it should be a function, a string or a dict, not: '%s'\"\n                % type(filter).__name__\n            )\n\n        if isinstance(level, str):\n            levelno = self.level(level).no\n        elif isinstance(level, int):\n            levelno = level\n        else:\n            raise TypeError(\n                \"Invalid level, it should be an integer or a string, not: '%s'\"\n                % type(level).__name__\n            )\n\n        if levelno < 0:\n            raise ValueError(\n                \"Invalid level value, it should be a positive integer, not: %d\" % levelno\n            )\n\n        if isinstance(format, str):\n            try:\n                formatter = Colorizer.prepare_format(format + terminator + \"{exception}\")\n            except ValueError as e:\n                raise ValueError(\n                    \"Invalid format, color markups could not be parsed correctly\"\n                ) from e\n            is_formatter_dynamic = False\n        elif callable(format):\n            if format == builtins.format:\n                raise ValueError(\n                    \"The built-in 'format()' function cannot be used as a 'format' parameter, \"\n                    \"this is most likely a mistake (please double-check the arguments passed \"\n                    \"to 'logger.add()').\"\n                )\n            formatter = format\n            is_formatter_dynamic = True\n        else:\n            raise TypeError(\n                \"Invalid format, it should be a string or a function, not: '%s'\"\n                % type(format).__name__\n            )\n\n        if not isinstance(encoding, str):\n            encoding = \"ascii\"\n\n        with self._core.lock:\n            exception_formatter = ExceptionFormatter(\n                colorize=colorize,\n                encoding=encoding,\n                diagnose=diagnose,\n                backtrace=backtrace,\n                hidden_frames_filename=self.catch.__code__.co_filename,\n                prefix=exception_prefix,\n            )\n\n            handler = Handler(\n                name=name,\n                sink=wrapped_sink,\n                levelno=levelno,\n                formatter=formatter,\n                is_formatter_dynamic=is_formatter_dynamic,\n                filter_=filter_func,\n                colorize=colorize,\n                serialize=serialize,\n                enqueue=enqueue,\n                id_=handler_id,\n                error_interceptor=error_interceptor,\n                exception_formatter=exception_formatter,\n                levels_ansi_codes=self._core.levels_ansi_codes,\n            )\n\n            handlers = self._core.handlers.copy()\n            handlers[handler_id] = handler\n\n            self._core.min_level = min(self._core.min_level, levelno)\n            self._core.handlers = handlers\n\n        return handler_id\n\n    def remove(self, handler_id=None):\n        \"\"\"Remove a previously added handler and stop sending logs to its sink.\n\n        Parameters\n        ----------\n        handler_id : |int| or ``None``\n            The id of the sink to remove, as it was returned by the |add| method. If ``None``, all\n            handlers are removed. The pre-configured handler is guaranteed to have the index ``0``.\n\n        Raises\n        ------\n        ValueError\n            If ``handler_id`` is not ``None`` but there is no active handler with such id.\n\n        Examples\n        --------\n        >>> i = logger.add(sys.stderr, format=\"{message}\")\n        >>> logger.info(\"Logging\")\n        Logging\n        >>> logger.remove(i)\n        >>> logger.info(\"No longer logging\")\n        \"\"\"\n        if not (handler_id is None or isinstance(handler_id, int)):\n            raise TypeError(\n                \"Invalid handler id, it should be an integer as returned \"\n                \"by the 'add()' method (or None), not: '%s'\" % type(handler_id).__name__\n            )\n\n        with self._core.lock:\n            handlers = self._core.handlers.copy()\n\n            if handler_id is not None and handler_id not in handlers:\n                raise ValueError(\"There is no existing handler with id %d\" % handler_id) from None\n\n            if handler_id is None:\n                handler_ids = list(handlers.keys())\n            else:\n                handler_ids = [handler_id]\n\n            for handler_id in handler_ids:\n                handler = handlers.pop(handler_id)\n\n                # This needs to be done first in case \"stop()\" raises an exception\n                levelnos = (h.levelno for h in handlers.values())\n                self._core.min_level = min(levelnos, default=float(\"inf\"))\n                self._core.handlers = handlers\n\n                handler.stop()\n\n    def complete(self):\n        \"\"\"Wait for the end of enqueued messages and asynchronous tasks scheduled by handlers.\n\n        This method proceeds in two steps: first it waits for all logging messages added to handlers\n        with ``enqueue=True`` to be processed, then it returns an object that can be awaited to\n        finalize all logging tasks added to the event loop by coroutine sinks.\n\n        It can be called from non-asynchronous code. This is especially recommended when the\n        ``logger`` is utilized with ``multiprocessing`` to ensure messages put to the internal\n        queue have been properly transmitted before leaving a child process.\n\n        The returned object should be awaited before the end of a coroutine executed by\n        |asyncio.run| or |loop.run_until_complete| to ensure all asynchronous logging messages are\n        processed. The function |asyncio.get_running_loop| is called beforehand, only tasks\n        scheduled in the same loop that the current one will be awaited by the method.\n\n        Returns\n        -------\n        :term:`awaitable`\n            An awaitable object which ensures all asynchronous logging calls are completed when\n            awaited.\n\n        Examples\n        --------\n        >>> async def sink(message):\n        ...     await asyncio.sleep(0.1)  # IO processing...\n        ...     print(message, end=\"\")\n        ...\n        >>> async def work():\n        ...     logger.info(\"Start\")\n        ...     logger.info(\"End\")\n        ...     await logger.complete()\n        ...\n        >>> logger.add(sink)\n        1\n        >>> asyncio.run(work())\n        Start\n        End\n\n        >>> def process():\n        ...     logger.info(\"Message sent from the child\")\n        ...     logger.complete()\n        ...\n        >>> logger.add(sys.stderr, enqueue=True)\n        1\n        >>> process = multiprocessing.Process(target=process)\n        >>> process.start()\n        >>> process.join()\n        Message sent from the child\n        \"\"\"\n\n        with self._core.lock:\n            handlers = self._core.handlers.copy()\n            for handler in handlers.values():\n                handler.complete_queue()\n\n        class AwaitableCompleter:\n            def __await__(self_):\n                with self._core.lock:\n                    handlers = self._core.handlers.copy()\n                    for handler in handlers.values():\n                        yield from handler.complete_async().__await__()\n\n        return AwaitableCompleter()\n\n    def catch(\n        self,\n        exception=Exception,\n        *,\n        level=\"ERROR\",\n        reraise=False,\n        onerror=None,\n        exclude=None,\n        default=None,\n        message=\"An error has been caught in function '{record[function]}', \"\n        \"process '{record[process].name}' ({record[process].id}), \"\n        \"thread '{record[thread].name}' ({record[thread].id}):\"\n    ):\n        \"\"\"Return a decorator to automatically log possibly caught error in wrapped function.\n\n        This is useful to ensure unexpected exceptions are logged, the entire program can be\n        wrapped by this method. This is also very useful to decorate |Thread.run| methods while\n        using threads to propagate errors to the main logger thread.\n\n        Note that the visibility of variables values (which uses the great |better_exceptions|_\n        library from `@Qix-`_) depends on the ``diagnose`` option of each configured sink.\n\n        The returned object can also be used as a context manager.\n\n        Parameters\n        ----------\n        exception : |Exception|, optional\n            The type of exception to intercept. If several types should be caught, a tuple of\n            exceptions can be used too.\n        level : |str| or |int|, optional\n            The level name or severity with which the message should be logged.\n        reraise : |bool|, optional\n            Whether the exception should be raised again and hence propagated to the caller.\n        onerror : |callable|_, optional\n            A function that will be called if an error occurs, once the message has been logged.\n            It should accept the exception instance as it sole argument.\n        exclude : |Exception|, optional\n            A type of exception (or a tuple of types) that will be purposely ignored and hence\n            propagated to the caller without being logged.\n        default : optional\n            The value to be returned by the decorated function if an error occurred without being\n            re-raised.\n        message : |str|, optional\n            The message that will be automatically logged if an exception occurs. Note that it will\n            be formatted with the ``record`` attribute.\n\n        Returns\n        -------\n        :term:`decorator` / :term:`context manager`\n            An object that can be used to decorate a function or as a context manager to log\n            exceptions possibly caught.\n\n        Examples\n        --------\n        >>> @logger.catch\n        ... def f(x):\n        ...     100 / x\n        ...\n        >>> def g():\n        ...     f(10)\n        ...     f(0)\n        ...\n        >>> g()\n        ERROR - An error has been caught in function 'g', process 'Main' (367), thread 'ch1' (1398):\n        Traceback (most recent call last):\n          File \"program.py\", line 12, in <module>\n            g()\n            \u2514 <function g at 0x7f225fe2bc80>\n        > File \"program.py\", line 10, in g\n            f(0)\n            \u2514 <function f at 0x7f225fe2b9d8>\n          File \"program.py\", line 6, in f\n            100 / x\n                  \u2514 0\n        ZeroDivisionError: division by zero\n\n        >>> with logger.catch(message=\"Because we never know...\"):\n        ...    main()  # No exception, no logs\n\n        >>> # Use 'onerror' to prevent the program exit code to be 0 (if 'reraise=False') while\n        >>> # also avoiding the stacktrace to be duplicated on stderr (if 'reraise=True').\n        >>> @logger.catch(onerror=lambda _: sys.exit(1))\n        ... def main():\n        ...     1 / 0\n        \"\"\"\n        if callable(exception) and (\n            not isclass(exception) or not issubclass(exception, BaseException)\n        ):\n            return self.catch()(exception)\n\n        class Catcher:\n            def __init__(self_, from_decorator):\n                self_._from_decorator = from_decorator\n\n            def __enter__(self_):\n                return None\n\n            def __exit__(self_, type_, value, traceback_):\n                if type_ is None:\n                    return\n\n                if not issubclass(type_, exception):\n                    return False\n\n                if exclude is not None and issubclass(type_, exclude):\n                    return False\n\n                from_decorator = self_._from_decorator\n                _, depth, _, *options = self._options\n\n                if from_decorator:\n                    depth += 1\n\n                catch_options = [(type_, value, traceback_), depth, True] + options\n                level_id, static_level_no = self._dynamic_level(level)\n                self._log(level_id, static_level_no, from_decorator, catch_options, message, (), {})\n\n                if onerror is not None:\n                    onerror(value)\n\n                return not reraise\n\n            def __call__(_, function):\n                catcher = Catcher(True)\n\n                if iscoroutinefunction(function):\n\n                    async def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return await function(*args, **kwargs)\n                        return default\n\n                elif isgeneratorfunction(function):\n\n                    def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return (yield from function(*args, **kwargs))\n                        return default\n\n                else:\n\n                    def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return function(*args, **kwargs)\n                        return default\n\n                functools.update_wrapper(catch_wrapper, function)\n                return catch_wrapper\n\n        return Catcher(False)\n\n    def opt(\n        self,\n        *,\n        exception=None,\n        record=False,\n        lazy=False,\n        colors=False,\n        raw=False,\n        capture=True,\n        depth=0,\n        ansi=False\n    ):\n        r\"\"\"Parametrize a logging call to slightly change generated log message.\n\n        Note that it's not possible to chain |opt| calls, the last one takes precedence over the\n        others as it will \"reset\" the options to their default values.\n\n        Parameters\n        ----------\n        exception : |bool|, |tuple| or |Exception|, optional\n            If it does not evaluate as ``False``, the passed exception is formatted and added to the\n            log message. It could be an |Exception| object or a ``(type, value, traceback)`` tuple,\n            otherwise the exception information is retrieved from |sys.exc_info|.\n        record : |bool|, optional\n            If ``True``, the record dict contextualizing the logging call can be used to format the\n            message by using ``{record[key]}`` in the log message.\n        lazy : |bool|, optional\n            If ``True``, the logging call attribute to format the message should be functions which\n            will be called only if the level is high enough. This can be used to avoid expensive\n            functions if not necessary.\n        colors : |bool|, optional\n            If ``True``, logged message will be colorized according to the markups it possibly\n            contains.\n        raw : |bool|, optional\n            If ``True``, the formatting of each sink will be bypassed and the message will be sent\n            as is.\n        capture : |bool|, optional\n            If ``False``, the ``**kwargs`` of logged message will not automatically populate\n            the ``extra`` dict (although they are still used for formatting).\n        depth : |int|, optional\n            Specify which stacktrace should be used to contextualize the logged message. This is\n            useful while using the logger from inside a wrapped function to retrieve worthwhile\n            information.\n        ansi : |bool|, optional\n            Deprecated since version 0.4.1: the ``ansi`` parameter will be removed in Loguru 1.0.0,\n            it is replaced by ``colors`` which is a more appropriate name.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but transforming logged message adequately before\n            sending.\n\n        Examples\n        --------\n        >>> try:\n        ...     1 / 0\n        ... except ZeroDivisionError:\n        ...    logger.opt(exception=True).debug(\"Exception logged with debug level:\")\n        ...\n        [18:10:02] DEBUG in '<module>' - Exception logged with debug level:\n        Traceback (most recent call last, catch point marked):\n        > File \"<stdin>\", line 2, in <module>\n        ZeroDivisionError: division by zero\n\n        >>> logger.opt(record=True).info(\"Current line is: {record[line]}\")\n        [18:10:33] INFO in '<module>' - Current line is: 1\n\n        >>> logger.opt(lazy=True).debug(\"If sink <= DEBUG: {x}\", x=lambda: math.factorial(2**5))\n        [18:11:19] DEBUG in '<module>' - If sink <= DEBUG: 263130836933693530167218012160000000\n\n        >>> logger.opt(colors=True).warning(\"We got a <red>BIG</red> problem\")\n        [18:11:30] WARNING in '<module>' - We got a BIG problem\n\n        >>> logger.opt(raw=True).debug(\"No formatting\\n\")\n        No formatting\n\n        >>> logger.opt(capture=False).info(\"Displayed but not captured: {value}\", value=123)\n        [18:11:41] Displayed but not captured: 123\n\n        >>> def wrapped():\n        ...     logger.opt(depth=1).info(\"Get parent context\")\n        ...\n        >>> def func():\n        ...     wrapped()\n        ...\n        >>> func()\n        [18:11:54] DEBUG in 'func' - Get parent context\n        \"\"\"\n        if ansi:\n            colors = True\n            warnings.warn(\n                \"The 'ansi' parameter is deprecated, please use 'colors' instead\",\n                DeprecationWarning,\n            )\n\n        args = self._options[-2:]\n        return Logger(self._core, exception, depth, record, lazy, colors, raw, capture, *args)\n\n    def bind(__self, **kwargs):\n        \"\"\"Bind attributes to the ``extra`` dict of each logged message record.\n\n        This is used to add custom context to each logging call.\n\n        Parameters\n        ----------\n        **kwargs\n            Mapping between keys and values that will be added to the ``extra`` dict.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but which sends record with the customized ``extra``\n            dict.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{extra[ip]} - {message}\")\n        >>> class Server:\n        ...     def __init__(self, ip):\n        ...         self.ip = ip\n        ...         self.logger = logger.bind(ip=ip)\n        ...     def call(self, message):\n        ...         self.logger.info(message)\n        ...\n        >>> instance_1 = Server(\"192.168.0.200\")\n        >>> instance_2 = Server(\"127.0.0.1\")\n        >>> instance_1.call(\"First instance\")\n        192.168.0.200 - First instance\n        >>> instance_2.call(\"Second instance\")\n        127.0.0.1 - Second instance\n        \"\"\"\n        *options, extra = __self._options\n        return Logger(__self._core, *options, {**extra, **kwargs})\n\n    @contextlib.contextmanager\n    def contextualize(__self, **kwargs):\n        \"\"\"Bind attributes to the context-local ``extra`` dict while inside the ``with`` block.\n\n        Contrary to |bind| there is no ``logger`` returned, the ``extra`` dict is modified in-place\n        and updated globally. Most importantly, it uses |contextvars| which means that\n        contextualized values are unique to each threads and asynchronous tasks.\n\n        The ``extra`` dict will retrieve its initial state once the context manager is exited.\n\n        Parameters\n        ----------\n        **kwargs\n            Mapping between keys and values that will be added to the context-local ``extra`` dict.\n\n        Returns\n        -------\n        :term:`context manager` / :term:`decorator`\n            A context manager (usable as a decorator too) that will bind the attributes once entered\n            and restore the initial state of the ``extra`` dict while exited.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{message} | {extra}\")\n        1\n        >>> def task():\n        ...     logger.info(\"Processing!\")\n        ...\n        >>> with logger.contextualize(task_id=123):\n        ...     task()\n        ...\n        Processing! | {'task_id': 123}\n        >>> logger.info(\"Done.\")\n        Done. | {}\n        \"\"\"\n        with __self._core.lock:\n            new_context = {**context.get(), **kwargs}\n            token = context.set(new_context)\n\n        try:\n            yield\n        finally:\n            with __self._core.lock:\n                context.reset(token)\n\n    def patch(self, patcher):\n        \"\"\"Attach a function to modify the record dict created by each logging call.\n\n        The ``patcher`` may be used to update the record on-the-fly before it's propagated to the\n        handlers. This allows the \"extra\" dict to be populated with dynamic values and also permits\n        advanced modifications of the record emitted while logging a message. The function is called\n        once before sending the log message to the different handlers.\n\n        It is recommended to apply modification on the ``record[\"extra\"]`` dict rather than on the\n        ``record`` dict itself, as some values are used internally by `Loguru`, and modify them may\n        produce unexpected results.\n\n        Parameters\n        ----------\n        patcher: |callable|_\n            The function to which the record dict will be passed as the sole argument. This function\n            is in charge of updating the record in-place, the function does not need to return any\n            value, the modified record object will be re-used.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but which records are passed through the ``patcher``\n            function before being sent to the added handlers.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{extra[utc]} {message}\")\n        >>> logger = logger.patch(lambda record: record[\"extra\"].update(utc=datetime.utcnow())\n        >>> logger.info(\"That's way, you can log messages with time displayed in UTC\")\n\n        >>> def wrapper(func):\n        ...     @functools.wraps(func)\n        ...     def wrapped(*args, **kwargs):\n        ...         logger.patch(lambda r: r.update(function=func.__name__)).info(\"Wrapped!\")\n        ...         return func(*args, **kwargs)\n        ...     return wrapped\n\n        >>> def recv_record_from_network(pipe):\n        ...     record = pickle.loads(pipe.read())\n        ...     level, message = record[\"level\"], record[\"message\"]\n        ...     logger.patch(lambda r: r.update(record)).log(level, message)\n        \"\"\"\n        *options, _, extra = self._options\n        return Logger(self._core, *options, patcher, extra)\n\n    def level(self, name, no=None, color=None, icon=None):\n        \"\"\"Add, update or retrieve a logging level.\n\n        Logging levels are defined by their ``name`` to which a severity ``no``, an ansi ``color``\n        tag and an ``icon`` are associated and possibly modified at run-time. To |log| to a custom\n        level, you should necessarily use its name, the severity number is not linked back to levels\n        name (this implies that several levels can share the same severity).\n\n        To add a new level, its ``name`` and its ``no`` are required. A ``color`` and an ``icon``\n        can also be specified or will be empty by default.\n\n        To update an existing level, pass its ``name`` with the parameters to be changed. It is not\n        possible to modify the ``no`` of a level once it has been added.\n\n        To retrieve level information, the ``name`` solely suffices.\n\n        Parameters\n        ----------\n        name : |str|\n            The name of the logging level.\n        no : |int|\n            The severity of the level to be added or updated.\n        color : |str|\n            The color markup of the level to be added or updated.\n        icon : |str|\n            The icon of the level to be added or updated.\n\n        Returns\n        -------\n        ``Level``\n            A |namedtuple| containing information about the level.\n\n        Raises\n        ------\n        ValueError\n            If there is no level registered with such ``name``.\n\n        Examples\n        --------\n        >>> level = logger.level(\"ERROR\")\n        >>> print(level)\n        Level(name='ERROR', no=40, color='<red><bold>', icon='\u274c')\n        >>> logger.add(sys.stderr, format=\"{level.no} {level.icon} {message}\")\n        1\n        >>> logger.level(\"CUSTOM\", no=15, color=\"<blue>\", icon=\"@\")\n        Level(name='CUSTOM', no=15, color='<blue>', icon='@')\n        >>> logger.log(\"CUSTOM\", \"Logging...\")\n        15 @ Logging...\n        >>> logger.level(\"WARNING\", icon=r\"/!\\\\\")\n        Level(name='WARNING', no=30, color='<yellow><bold>', icon='/!\\\\\\\\')\n        >>> logger.warning(\"Updated!\")\n        30 /!\\\\ Updated!\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\n                \"Invalid level name, it should be a string, not: '%s'\" % type(name).__name__\n            )\n\n        if no is color is icon is None:\n            try:\n                return self._core.levels[name]\n            except KeyError:\n                raise ValueError(\"Level '%s' does not exist\" % name) from None\n\n        if name not in self._core.levels:\n            if no is None:\n                raise ValueError(\n                    \"Level '%s' does not exist, you have to create it by specifying a level no\"\n                    % name\n                )\n            else:\n                old_color, old_icon = \"\", \" \"\n        elif no is not None:\n            raise TypeError(\"Level '%s' already exists, you can't update its severity no\" % name)\n        else:\n            _, no, old_color, old_icon = self.level(name)\n\n        if color is None:\n            color = old_color\n\n        if icon is None:\n            icon = old_icon\n\n        if not isinstance(no, int):\n            raise TypeError(\n                \"Invalid level no, it should be an integer, not: '%s'\" % type(no).__name__\n            )\n\n        if no < 0:\n            raise ValueError(\"Invalid level no, it should be a positive integer, not: %d\" % no)\n\n        ansi = Colorizer.ansify(color)\n        level = Level(name, no, color, icon)\n\n        with self._core.lock:\n            self._core.levels[name] = level\n            self._core.levels_ansi_codes[name] = ansi\n            for handler in self._core.handlers.values():\n                handler.update_format(name)\n\n        return level\n\n    def disable(self, name):\n        \"\"\"Disable logging of messages coming from ``name`` module and its children.\n\n        Developers of library using `Loguru` should absolutely disable it to avoid disrupting\n        users with unrelated logs messages.\n\n        Note that in some rare circumstances, it is not possible for `Loguru` to\n        determine the module's ``__name__`` value. In such situation, ``record[\"name\"]`` will be\n        equal to ``None``, this is why ``None`` is also a valid argument.\n\n        Parameters\n        ----------\n        name : |str| or ``None``\n            The name of the parent module to disable.\n\n        Examples\n        --------\n        >>> logger.info(\"Allowed message by default\")\n        [22:21:55] Allowed message by default\n        >>> logger.disable(\"my_library\")\n        >>> logger.info(\"While publishing a library, don't forget to disable logging\")\n        \"\"\"\n        self._change_activation(name, False)\n\n    def enable(self, name):\n        \"\"\"Enable logging of messages coming from ``name`` module and its children.\n\n        Logging is generally disabled by imported library using `Loguru`, hence this function\n        allows users to receive these messages anyway.\n\n        To enable all logs regardless of the module they are coming from, an empty string ``\"\"`` can\n        be passed.\n\n        Parameters\n        ----------\n        name : |str| or ``None``\n            The name of the parent module to re-allow.\n\n        Examples\n        --------\n        >>> logger.disable(\"__main__\")\n        >>> logger.info(\"Disabled, so nothing is logged.\")\n        >>> logger.enable(\"__main__\")\n        >>> logger.info(\"Re-enabled, messages are logged.\")\n        [22:46:12] Re-enabled, messages are logged.\n        \"\"\"\n        self._change_activation(name, True)\n\n    def configure(self, *, handlers=None, levels=None, extra=None, patcher=None, activation=None):\n        \"\"\"Configure the core logger.\n\n        It should be noted that ``extra`` values set using this function are available across all\n        modules, so this is the best way to set overall default values.\n\n        Parameters\n        ----------\n        handlers : |list| of |dict|, optional\n            A list of each handler to be added. The list should contain dicts of params passed to\n            the |add| function as keyword arguments. If not ``None``, all previously added\n            handlers are first removed.\n        levels : |list| of |dict|, optional\n            A list of each level to be added or updated. The list should contain dicts of params\n            passed to the |level| function as keyword arguments. This will never remove previously\n            created levels.\n        extra : |dict|, optional\n            A dict containing additional parameters bound to the core logger, useful to share\n            common properties if you call |bind| in several of your files modules. If not ``None``,\n            this will remove previously configured ``extra`` dict.\n        patcher : |callable|_, optional\n            A function that will be applied to the record dict of each logged messages across all\n            modules using the logger. It should modify the dict in-place without returning anything.\n            The function is executed prior to the one possibly added by the |patch| method. If not\n            ``None``, this will replace previously configured ``patcher`` function.\n        activation : |list| of |tuple|, optional\n            A list of ``(name, state)`` tuples which denotes which loggers should be enabled (if\n            ``state`` is ``True``) or disabled (if ``state`` is ``False``). The calls to |enable|\n            and |disable| are made accordingly to the list order. This will not modify previously\n            activated loggers, so if you need a fresh start prepend your list with ``(\"\", False)``\n            or ``(\"\", True)``.\n\n        Returns\n        -------\n        :class:`list` of :class:`int`\n            A list containing the identifiers of added sinks (if any).\n\n        Examples\n        --------\n        >>> logger.configure(\n        ...     handlers=[\n        ...         dict(sink=sys.stderr, format=\"[{time}] {message}\"),\n        ...         dict(sink=\"file.log\", enqueue=True, serialize=True),\n        ...     ],\n        ...     levels=[dict(name=\"NEW\", no=13, icon=\"\u00a4\", color=\"\")],\n        ...     extra={\"common_to_all\": \"default\"},\n        ...     patcher=lambda record: record[\"extra\"].update(some_value=42),\n        ...     activation=[(\"my_module.secret\", False), (\"another_library.module\", True)],\n        ... )\n        [1, 2]\n\n        >>> # Set a default \"extra\" dict to logger across all modules, without \"bind()\"\n        >>> extra = {\"context\": \"foo\"}\n        >>> logger.configure(extra=extra)\n        >>> logger.add(sys.stderr, format=\"{extra[context]} - {message}\")\n        >>> logger.info(\"Context without bind\")\n        >>> # => \"foo - Context without bind\"\n        >>> logger.bind(context=\"bar\").info(\"Suppress global context\")\n        >>> # => \"bar - Suppress global context\"\n        \"\"\"\n        if handlers is not None:\n            self.remove()\n        else:\n            handlers = []\n\n        if levels is not None:\n            for params in levels:\n                self.level(**params)\n\n        if patcher is not None:\n            with self._core.lock:\n                self._core.patcher = patcher\n\n        if extra is not None:\n            with self._core.lock:\n                self._core.extra.clear()\n                self._core.extra.update(extra)\n\n        if activation is not None:\n            for name, state in activation:\n                if state:\n                    self.enable(name)\n                else:\n                    self.disable(name)\n\n        return [self.add(**params) for params in handlers]\n\n    def _change_activation(self, name, status):\n        if not (name is None or isinstance(name, str)):\n            raise TypeError(\n                \"Invalid name, it should be a string (or None), not: '%s'\" % type(name).__name__\n            )\n\n        with self._core.lock:\n            enabled = self._core.enabled.copy()\n\n            if name is None:\n                for n in enabled:\n                    if n is None:\n                        enabled[n] = status\n                self._core.activation_none = status\n                self._core.enabled = enabled\n                return\n\n            if name != \"\":\n                name += \".\"\n\n            activation_list = [\n                (n, s) for n, s in self._core.activation_list if n[: len(name)] != name\n            ]\n\n            parent_status = next((s for n, s in activation_list if name[: len(n)] == n), None)\n            if parent_status != status and not (name == \"\" and status is True):\n                activation_list.append((name, status))\n\n                def modules_depth(x):\n                    return x[0].count(\".\")\n\n                activation_list.sort(key=modules_depth, reverse=True)\n\n            for n in enabled:\n                if n is not None and (n + \".\")[: len(name)] == name:\n                    enabled[n] = status\n\n            self._core.activation_list = activation_list\n            self._core.enabled = enabled\n\n    @staticmethod\n    def parse(file, pattern, *, cast={}, chunk=2 ** 16):\n        \"\"\"Parse raw logs and extract each entry as a |dict|.\n\n        The logging format has to be specified as the regex ``pattern``, it will then be\n        used to parse the ``file`` and retrieve each entry based on the named groups present\n        in the regex.\n\n        Parameters\n        ----------\n        file : |str|, |Path| or |file-like object|_\n            The path of the log file to be parsed, or an already opened file object.\n        pattern : |str| or |re.Pattern|_\n            The regex to use for logs parsing, it should contain named groups which will be included\n            in the returned dict.\n        cast : |callable|_ or |dict|, optional\n            A function that should convert in-place the regex groups parsed (a dict of string\n            values) to more appropriate types. If a dict is passed, it should be a mapping between\n            keys of parsed log dict and the function that should be used to convert the associated\n            value.\n        chunk : |int|, optional\n            The number of bytes read while iterating through the logs, this avoids having to load\n            the whole file in memory.\n\n        Yields\n        ------\n        :class:`dict`\n            The dict mapping regex named groups to matched values, as returned by |match.groupdict|\n            and optionally converted according to ``cast`` argument.\n\n        Examples\n        --------\n        >>> reg = r\"(?P<lvl>[0-9]+): (?P<msg>.*)\"    # If log format is \"{level.no} - {message}\"\n        >>> for e in logger.parse(\"file.log\", reg):  # A file line could be \"10 - A debug message\"\n        ...     print(e)                             # => {'lvl': '10', 'msg': 'A debug message'}\n\n        >>> caster = dict(lvl=int)                   # Parse 'lvl' key as an integer\n        >>> for e in logger.parse(\"file.log\", reg, cast=caster):\n        ...     print(e)                             # => {'lvl': 10, 'msg': 'A debug message'}\n\n        >>> def cast(groups):\n        ...     if \"date\" in groups:\n        ...         groups[\"date\"] = datetime.strptime(groups[\"date\"], \"%Y-%m-%d %H:%M:%S\")\n        ...\n        >>> with open(\"file.log\") as file:\n        ...     for log in logger.parse(file, reg, cast=cast):\n        ...         print(log[\"date\"], log[\"something_else\"])\n        \"\"\"\n        if isinstance(file, (str, PathLike)):\n            should_close = True\n            fileobj = open(str(file))\n        elif hasattr(file, \"read\") and callable(file.read):\n            should_close = False\n            fileobj = file\n        else:\n            raise TypeError(\n                \"Invalid file, it should be a string path or a file object, not: '%s'\"\n                % type(file).__name__\n            )\n\n        if isinstance(cast, dict):\n\n            def cast_function(groups):\n                for key, converter in cast.items():\n                    if key in groups:\n                        groups[key] = converter(groups[key])\n\n        elif callable(cast):\n            cast_function = cast\n        else:\n            raise TypeError(\n                \"Invalid cast, it should be a function or a dict, not: '%s'\" % type(cast).__name__\n            )\n\n        try:\n            regex = re.compile(pattern)\n        except TypeError:\n            raise TypeError(\n                \"Invalid pattern, it should be a string or a compiled regex, not: '%s'\"\n                % type(pattern).__name__\n            ) from None\n\n        matches = Logger._find_iter(fileobj, regex, chunk)\n\n        for match in matches:\n            groups = match.groupdict()\n            cast_function(groups)\n            yield groups\n\n        if should_close:\n            fileobj.close()\n\n    @staticmethod\n    def _find_iter(fileobj, regex, chunk):\n        buffer = fileobj.read(0)\n\n        while 1:\n            text = fileobj.read(chunk)\n            buffer += text\n            matches = list(regex.finditer(buffer))\n\n            if not text:\n                yield from matches\n                break\n\n            if len(matches) > 1:\n                end = matches[-2].end()\n                buffer = buffer[end:]\n                yield from matches[:-1]\n\n    def _log(self, level_id, static_level_no, from_decorator, options, message, args, kwargs):\n        core = self._core\n\n        if not core.handlers:\n            return\n\n        (exception, depth, record, lazy, colors, raw, capture, patcher, extra) = options\n\n        frame = get_frame(depth + 2)\n\n        try:\n            name = frame.f_globals[\"__name__\"]\n        except KeyError:\n            name = None\n\n        try:\n            if not core.enabled[name]:\n                return\n        except KeyError:\n            enabled = core.enabled\n            if name is None:\n                status = core.activation_none\n                enabled[name] = status\n                if not status:\n                    return\n            else:\n                dotted_name = name + \".\"\n                for dotted_module_name, status in core.activation_list:\n                    if dotted_name[: len(dotted_module_name)] == dotted_module_name:\n                        if status:\n                            break\n                        enabled[name] = False\n                        return\n                enabled[name] = True\n\n        current_datetime = aware_now()\n\n        if level_id is None:\n            level_icon = \" \"\n            level_no = static_level_no\n            level_name = \"Level %d\" % level_no\n        else:\n            try:\n                level_name, level_no, _, level_icon = core.levels[level_id]\n            except KeyError:\n                raise ValueError(\"Level '%s' does not exist\" % level_id) from None\n\n        if level_no < core.min_level:\n            return\n\n        code = frame.f_code\n        file_path = code.co_filename\n        file_name = basename(file_path)\n        thread = current_thread()\n        process = current_process()\n        elapsed = current_datetime - start_time\n\n        if exception:\n            if isinstance(exception, BaseException):\n                type_, value, traceback = (type(exception), exception, exception.__traceback__)\n            elif isinstance(exception, tuple):\n                type_, value, traceback = exception\n            else:\n                type_, value, traceback = sys.exc_info()\n            exception = RecordException(type_, value, traceback)\n        else:\n            exception = None\n\n        log_record = {\n            \"elapsed\": elapsed,\n            \"exception\": exception,\n            \"extra\": {**core.extra, **context.get(), **extra},\n            \"file\": RecordFile(file_name, file_path),\n            \"function\": code.co_name,\n            \"level\": RecordLevel(level_name, level_no, level_icon),\n            \"line\": frame.f_lineno,\n            \"message\": str(message),\n            \"module\": splitext(file_name)[0],\n            \"name\": name,\n            \"process\": RecordProcess(process.ident, process.name),\n            \"thread\": RecordThread(thread.ident, thread.name),\n            \"time\": current_datetime,\n        }\n\n        if lazy:\n            args = [arg() for arg in args]\n            kwargs = {key: value() for key, value in kwargs.items()}\n\n        if capture and kwargs:\n            log_record[\"extra\"].update(kwargs)\n\n        if record:\n            if \"record\" in kwargs:\n                raise TypeError(\n                    \"The message can't be formatted: 'record' shall not be used as a keyword \"\n                    \"argument while logger has been configured with '.opt(record=True)'\"\n                )\n            kwargs.update(record=log_record)\n\n        if colors:\n            if args or kwargs:\n                colored_message = Colorizer.prepare_message(message, args, kwargs)\n            else:\n                colored_message = Colorizer.prepare_simple_message(str(message))\n            log_record[\"message\"] = colored_message.stripped\n        elif args or kwargs:\n            colored_message = None\n            log_record[\"message\"] = message.format(*args, **kwargs)\n        else:\n            colored_message = None\n\n        if core.patcher:\n            core.patcher(log_record)\n\n        if patcher:\n            patcher(log_record)\n\n        for handler in core.handlers.values():\n            handler.emit(log_record, level_id, from_decorator, raw, colored_message)\n\n    def trace(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'TRACE'``.\"\"\"\n        __self._log(\"TRACE\", None, False, __self._options, __message, args, kwargs)\n\n    def debug(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'DEBUG'``.\"\"\"\n        __self._log(\"DEBUG\", None, False, __self._options, __message, args, kwargs)\n\n    def info(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'INFO'``.\"\"\"\n        __self._log(\"INFO\", None, False, __self._options, __message, args, kwargs)\n\n    def success(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'SUCCESS'``.\"\"\"\n        __self._log(\"SUCCESS\", None, False, __self._options, __message, args, kwargs)\n\n    def warning(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'WARNING'``.\"\"\"\n        __self._log(\"WARNING\", None, False, __self._options, __message, args, kwargs)\n\n    def error(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'ERROR'``.\"\"\"\n        __self._log(\"ERROR\", None, False, __self._options, __message, args, kwargs)\n\n    def critical(__self, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'CRITICAL'``.\"\"\"\n        __self._log(\"CRITICAL\", None, False, __self._options, __message, args, kwargs)\n\n    def exception(__self, __message, *args, **kwargs):\n        r\"\"\"Convenience method for logging an ``'ERROR'`` with exception information.\"\"\"\n        options = (True,) + __self._options[1:]\n        __self._log(\"ERROR\", None, False, options, __message, args, kwargs)\n\n    def log(__self, __level, __message, *args, **kwargs):\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``level``.\"\"\"\n        level_id, static_level_no = __self._dynamic_level(__level)\n        __self._log(level_id, static_level_no, False, __self._options, __message, args, kwargs)\n\n    @staticmethod\n    @functools.lru_cache(maxsize=32)\n    def _dynamic_level(level):\n\n        if isinstance(level, str):\n            return (level, None)\n\n        if isinstance(level, int):\n            if level < 0:\n                raise ValueError(\n                    \"Invalid level value, it should be a positive integer, not: %d\" % level\n                )\n            return (None, level)\n\n        raise TypeError(\n            \"Invalid level, it should be an integer or a string, not: '%s'\" % type(level).__name__\n        )\n\n    def start(self, *args, **kwargs):\n        \"\"\"Deprecated function to |add| a new handler.\n\n        Warnings\n        --------\n        .. deprecated:: 0.2.2\n          ``start()`` will be removed in Loguru 1.0.0, it is replaced by ``add()`` which is a less\n          confusing name.\n        \"\"\"\n        warnings.warn(\n            \"The 'start()' method is deprecated, please use 'add()' instead\", DeprecationWarning\n        )\n        return self.add(*args, **kwargs)\n\n    def stop(self, *args, **kwargs):\n        \"\"\"Deprecated function to |remove| an existing handler.\n\n        Warnings\n        --------\n        .. deprecated:: 0.2.2\n          ``stop()`` will be removed in Loguru 1.0.0, it is replaced by ``remove()`` which is a less\n          confusing name.\n        \"\"\"\n        warnings.warn(\n            \"The 'stop()' method is deprecated, please use 'remove()' instead\", DeprecationWarning\n        )\n        return self.remove(*args, **kwargs)\n"], "filenames": ["docs/resources/recipes.rst", "loguru/_logger.py"], "buggy_code_start_loc": [17, 202], "buggy_code_end_loc": [48, 204], "fixing_code_start_loc": [18, 202], "fixing_code_end_loc": [110, 204], "type": "CWE-269", "message": "Improper Privilege Management in Conda loguru prior to 0.5.3.", "other": {"cve": {"id": "CVE-2022-0338", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-25T09:15:06.950", "lastModified": "2023-02-28T15:38:56.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Privilege Management in Conda loguru prior to 0.5.3."}, {"lang": "es", "value": "Una Administraci\u00f3n Inapropiada de Privilegios en Conda loguru versiones anteriores a 0.5.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:loguru_project:loguru:*:*:*:*:*:python:*:*", "versionEndExcluding": "0.5.3", "matchCriteriaId": "9A646140-7263-46EB-8090-99E0A7905A53"}]}]}], "references": [{"url": "https://github.com/delgan/loguru/commit/ea39375e62f9b8f18e2ca798a5c0fb8c972b7eaa", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/359bea50-2bc6-426a-b2f9-175d401b1ed0", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/delgan/loguru/commit/ea39375e62f9b8f18e2ca798a5c0fb8c972b7eaa"}}