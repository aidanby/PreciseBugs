{"buggy_code": ["<?php \n$sitename = \"SomeWebsite\";\n$blogpagename = \"blog\";\n\nerror_reporting(0);\n\nfunction getpage($page)\n{\n  $pagestr = file_get_contents($page);\n  list($pageheader, $pagecontent) = preg_split('~(?:\\r?\\n){2}~', $pagestr, 2);  // split into 2 parts : before/after the first blank line\n  preg_match(\"/^TITLE:(.*)$/m\", $pageheader, $matches1);                        // for articles: title // for pages: title displayed in top-menu\n  preg_match(\"/^AUTHOR:(.*)$/m\", $pageheader, $matches2);                       // for articles only\n  preg_match(\"/^DATE:(.*)$/m\", $pageheader, $matches3);                         // for articles only\n  preg_match(\"/^(NOMENU:1)$/m\", $pageheader, $matches4);                        // for pages only: if NOMENU:1, no link in top-menu\n  preg_match(\"/^URL:(.*)$/m\", $pageheader, $matches5);                          // for articles: article's link    // for pages: top-menu's link \n  return array($pagecontent, $matches1[1], trim($matches2[1]), $matches3[1], $matches4[1], trim($matches5[1]));\n}\n\n$siteroot = substr($_SERVER['PHP_SELF'], 0,  - strlen(basename($_SERVER['PHP_SELF']))); // must have trailing slash, we don't use dirname because it can produce antislash on Windows\n$requestedpage = basename(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));\nif (parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH) === $siteroot) { $requestedpage = \"\"; }     // check if homepage \n$type =  strpos($_SERVER['REQUEST_URI'], 'article/') ? 'article' : 'page';\n$pages = glob(\"./\" . $type .\"/*$requestedpage.{txt,md}\", GLOB_BRACE);\nif ($pages) { $page = $pages[0]; } else { $page = \"./page/HIDDEN-404.txt\"; $type = 'page'; }                 // default 404 error page\nlist($pagecontent, $pagetitle, $pageauthor, $pagedate, $pagenomenu, $pageurl) = getpage($page);\nif (!$pageurl) { $pageurl = pathinfo($page)['filename']; }\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><?php echo (trim($pagetitle) ? \"$sitename - $pagetitle\" : \"$sitename\")?></title>\n  <base href=\"<?php echo $siteroot; ?>\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>\n<body>\n<div class=\"header\">\n  <div class=\"logo\"><a href=\".\"><?php echo $sitename;?></a></div>\n  <ul class=\"menu\">\n    <?php\n    $pages = glob(\"./page/*.{txt,md}\", GLOB_BRACE);\n    foreach($pages as $page)\n    {\n      list($menupagecontent, $menupagetitle, $menupageauthor, $menupagedate, $menupagenomenu, $menupageurl) = getpage($page);\n      if (!$menupagenomenu) { echo \"<li><a href=\\\"\" . ($menupageurl ? $menupageurl : strtolower($menupagetitle)) . \"\\\">$menupagetitle</a></li>\"; }\n    }\n    ?>\n  </ul>\n</div>\n<div class=\"main\">\n\n<?php\nrequire 'Parsedown.php';\n\nif ($type === \"article\")\n{ \n  echo \"<div class=\\\"article\\\"><a href=\\\"article/$pageurl\\\"><h2 class=\\\"articletitle\\\">$pagetitle</h2><div class=\\\"articleinfo\\\">by $pageauthor, on $pagedate</div></a>\";\n  echo (new Parsedown())->text($pagecontent);\n  echo \"</div>\";\n} \nelse if ($type === \"page\") { echo \"<div class=\\\"page\\\">\" . (new Parsedown())->text($pagecontent) . \"</div>\"; }\n\nif ($requestedpage === $blogpagename)\n{\n  $pages = array_slice(array_reverse(glob(\"./article/*.{txt,md}\", GLOB_BRACE)), $_GET['start'], 10);\n  foreach($pages as $page)\n  {\n    list($pagecontent, $pagetitle, $pageauthor, $pagedate, $pagenomenu, $pageurl) = getpage($page);\n    if (!$pageurl) { $pageurl = pathinfo($page)['filename']; }\n    echo \"<div class=\\\"article\\\"><a href=\\\"article/$pageurl\\\"><h2 class=\\\"articletitle\\\">$pagetitle</h2><div class=\\\"articleinfo\\\">by $pageauthor, on $pagedate</div></a>\";\n    echo (new Parsedown())->text($pagecontent);\n    echo \"</div>\";\n  }\n  if ($_GET['start'] > 0) { echo \"<a href=\\\"\" . $blogpagename . (($_GET['start'] > 10) ? \"?start=\" . ($_GET['start'] - 10) : \"\") . \"\\\">Newer articles</a>&nbsp; \"; }\n  if (count(array_slice(array_reverse(glob(\"./article/*.{txt,md}\", GLOB_BRACE)), $_GET['start'], 11)) > 10) { echo \"<a href=\\\"\" . $blogpagename . \"?start=\" . ($_GET['start'] + 10) . \"\\\">Older articles</a>\"; }\n}\n\n?>\n</div>\n<div class=\"footer\">\n  <div class=\"left\"><a href=\"\">\u00a9 <?php echo date('Y') . \" \" . $sitename; ?></a></div>\n  <div class=\"right\">Powered by <a href=\"http://www.thisisvoid.org\">Void</a>.</div>\n</div>\n</body>\n</html>"], "fixing_code": ["<?php \n$sitename = \"SomeWebsite\";\n$blogpagename = \"blog\";\n\nerror_reporting(0);\n\nfunction getpage($page)\n{\n  $pagestr = file_get_contents($page);\n  list($pageheader, $pagecontent) = preg_split('~(?:\\r?\\n){2}~', $pagestr, 2);  // split into 2 parts : before/after the first blank line\n  preg_match(\"/^TITLE:(.*)$/m\", $pageheader, $matches1);                        // for articles: title // for pages: title displayed in top-menu\n  preg_match(\"/^AUTHOR:(.*)$/m\", $pageheader, $matches2);                       // for articles only\n  preg_match(\"/^DATE:(.*)$/m\", $pageheader, $matches3);                         // for articles only\n  preg_match(\"/^(NOMENU:1)$/m\", $pageheader, $matches4);                        // for pages only: if NOMENU:1, no link in top-menu\n  preg_match(\"/^URL:(.*)$/m\", $pageheader, $matches5);                          // for articles: article's link    // for pages: top-menu's link \n  return array($pagecontent, $matches1[1], trim($matches2[1]), $matches3[1], $matches4[1], trim($matches5[1]));\n}\n\n$siteroot = substr($_SERVER['PHP_SELF'], 0,  - strlen(basename($_SERVER['PHP_SELF']))); // must have trailing slash, we don't use dirname because it can produce antislash on Windows\n$requestedpage = basename(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));\nif (parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH) === $siteroot) { $requestedpage = \"\"; }     // check if homepage \n$type =  strpos($_SERVER['REQUEST_URI'], 'article/') ? 'article' : 'page';\n$pages = glob(\"./\" . $type .\"/*$requestedpage.{txt,md}\", GLOB_BRACE);\nif ($pages) { $page = $pages[0]; } else { $page = \"./page/HIDDEN-404.txt\"; $type = 'page'; }                 // default 404 error page\nlist($pagecontent, $pagetitle, $pageauthor, $pagedate, $pagenomenu, $pageurl) = getpage($page);\nif (!$pageurl) { $pageurl = pathinfo($page)['filename']; }\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title><?php echo (trim($pagetitle) ? \"$sitename - $pagetitle\" : \"$sitename\")?></title>\n  <base href=\"<?php echo htmlspecialchars($siteroot, ENT_QUOTES); ?>\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>\n<body>\n<div class=\"header\">\n  <div class=\"logo\"><a href=\".\"><?php echo $sitename;?></a></div>\n  <ul class=\"menu\">\n    <?php\n    $pages = glob(\"./page/*.{txt,md}\", GLOB_BRACE);\n    foreach($pages as $page)\n    {\n      list($menupagecontent, $menupagetitle, $menupageauthor, $menupagedate, $menupagenomenu, $menupageurl) = getpage($page);\n      if (!$menupagenomenu) { echo \"<li><a href=\\\"\" . ($menupageurl ? $menupageurl : strtolower($menupagetitle)) . \"\\\">$menupagetitle</a></li>\"; }\n    }\n    ?>\n  </ul>\n</div>\n<div class=\"main\">\n\n<?php\nrequire 'Parsedown.php';\n\nif ($type === \"article\")\n{ \n  echo \"<div class=\\\"article\\\"><a href=\\\"article/$pageurl\\\"><h2 class=\\\"articletitle\\\">$pagetitle</h2><div class=\\\"articleinfo\\\">by $pageauthor, on $pagedate</div></a>\";\n  echo (new Parsedown())->text($pagecontent);\n  echo \"</div>\";\n} \nelse if ($type === \"page\") { echo \"<div class=\\\"page\\\">\" . (new Parsedown())->text($pagecontent) . \"</div>\"; }\n\nif ($requestedpage === $blogpagename)\n{\n  $pages = array_slice(array_reverse(glob(\"./article/*.{txt,md}\", GLOB_BRACE)), $_GET['start'], 10);\n  foreach($pages as $page)\n  {\n    list($pagecontent, $pagetitle, $pageauthor, $pagedate, $pagenomenu, $pageurl) = getpage($page);\n    if (!$pageurl) { $pageurl = pathinfo($page)['filename']; }\n    echo \"<div class=\\\"article\\\"><a href=\\\"article/$pageurl\\\"><h2 class=\\\"articletitle\\\">$pagetitle</h2><div class=\\\"articleinfo\\\">by $pageauthor, on $pagedate</div></a>\";\n    echo (new Parsedown())->text($pagecontent);\n    echo \"</div>\";\n  }\n  if ($_GET['start'] > 0) { echo \"<a href=\\\"\" . $blogpagename . (($_GET['start'] > 10) ? \"?start=\" . ($_GET['start'] - 10) : \"\") . \"\\\">Newer articles</a>&nbsp; \"; }\n  if (count(array_slice(array_reverse(glob(\"./article/*.{txt,md}\", GLOB_BRACE)), $_GET['start'], 11)) > 10) { echo \"<a href=\\\"\" . $blogpagename . \"?start=\" . ($_GET['start'] + 10) . \"\\\">Older articles</a>\"; }\n}\n\n?>\n</div>\n<div class=\"footer\">\n  <div class=\"left\"><a href=\"\">\u00a9 <?php echo date('Y') . \" \" . $sitename; ?></a></div>\n  <div class=\"right\">Powered by <a href=\"http://www.thisisvoid.org\">Void</a>.</div>\n</div>\n</body>\n</html>"], "filenames": ["index.php"], "buggy_code_start_loc": [34], "buggy_code_end_loc": [35], "fixing_code_start_loc": [34], "fixing_code_end_loc": [35], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in index.php in JosephErnest Void before 2015-10-02 allows remote attackers to inject arbitrary web script or HTML via a crafted URI.", "other": {"cve": {"id": "CVE-2015-7777", "sourceIdentifier": "vultures@jpcert.or.jp", "published": "2015-11-21T11:59:21.527", "lastModified": "2015-11-23T16:21:45.290", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in index.php in JosephErnest Void before 2015-10-02 allows remote attackers to inject arbitrary web script or HTML via a crafted URI."}, {"lang": "es", "value": "Vulnerabilidad de XSS en index.php en JosephErnest Void en versiones anteriores a 2015-10-02 permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de una URI manipulada."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:void_project:void:*:*:*:*:*:*:*:*", "versionEndIncluding": "2015-10-01", "matchCriteriaId": "A97648E7-E74A-4E56-879F-876D4B41B409"}]}]}], "references": [{"url": "http://jvn.jp/en/jp/JVN20649799/index.html", "source": "vultures@jpcert.or.jp", "tags": ["Vendor Advisory"]}, {"url": "http://jvndb.jvn.jp/jvndb/JVNDB-2015-000184", "source": "vultures@jpcert.or.jp", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/josephernest/void/commit/84b9615ae7fe233c40a80bf749085caaef6f4919", "source": "vultures@jpcert.or.jp", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/josephernest/void/commit/84b9615ae7fe233c40a80bf749085caaef6f4919"}}