{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\nimport javax.script.ScriptContext;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiLock;\n\n/**\n * Initializes a document before it is edited.\n *\n * @version $Id$\n */\n@Component\n@Named(\"edit\")\n@Singleton\npublic class EditAction extends XWikiAction\n{\n    /**\n     * The object used for logging.\n     */\n    private static final Logger LOGGER = LoggerFactory.getLogger(EditAction.class);\n\n    @Inject\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;\n\n    /**\n     * Default constructor.\n     */\n    public EditAction()\n    {\n        this.waitForXWikiInitialization = false;\n    }\n\n    @Override\n    protected Class<? extends XWikiForm> getFormClass()\n    {\n        return EditForm.class;\n    }\n\n    @Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        try {\n            XWikiDocument editedDocument = prepareEditedDocument(context);\n            maybeLockDocument(editedDocument, context);\n        } catch (XWikiException e) {\n            if (e.getCode() == XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY) {\n                context.put(\"exception\", e);\n                return \"docalreadyexists\";\n            } else {\n                throw e;\n            }\n        }\n\n        // Make sure object property fields are displayed in edit mode.\n        // See XWikiDocument#display(String, BaseObject, XWikiContext)\n        // TODO: Revisit the display mode after the inline action is removed. Is the display mode still needed when\n        // there is only one edit action?\n        context.put(\"display\", \"edit\");\n        return \"edit\";\n    }\n\n    /**\n     * Determines the edited document (translation) and updates it based on the template specified on the request and\n     * any additional request parameters that overwrite the default values from the template.\n     *\n     * @param context the XWiki context\n     * @return the edited document\n     * @throws XWikiException if something goes wrong\n     */\n    protected XWikiDocument prepareEditedDocument(XWikiContext context) throws XWikiException\n    {\n        // Determine the edited document (translation).\n        XWikiDocument editedDocument = getEditedDocument(context);\n        EditForm editForm = (EditForm) context.getForm();\n\n        // Update the edited document based on the template specified on the request.\n        readFromTemplate(editedDocument, editForm.getTemplate(), context);\n\n        // The default values from the template can be overwritten by additional request parameters.\n        updateDocumentTitleAndContentFromRequest(editedDocument, context);\n        editedDocument.readAddedUpdatedAndRemovedObjectsFromForm(editForm, context);\n\n        // If the metadata is modified, modify the effective metadata author\n        if (editedDocument.isMetaDataDirty()) {\n            UserReference userReference =\n                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n            editedDocument.getAuthors().setEffectiveMetadataAuthor(userReference);\n            editedDocument.getAuthors().setOriginalMetadataAuthor(userReference);\n        }\n\n        // If the content is modified, modify the content author\n        if (editedDocument.isContentDirty()) {\n            UserReference userReference =\n                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n            editedDocument.getAuthors().setContentAuthor(userReference);\n        }\n\n        // Set the current user as creator, author and contentAuthor when the edited document is newly created to avoid\n        // using XWikiGuest instead (because those fields were not previously initialized).\n        if (editedDocument.isNew()) {\n            editedDocument.setCreatorReference(context.getUserReference());\n            editedDocument.setAuthorReference(context.getUserReference());\n            editedDocument.setContentAuthorReference(context.getUserReference());\n        }\n        editedDocument.readTemporaryUploadedFiles(editForm);\n\n        // Expose the edited document on the XWiki context and the Velocity context.\n        putDocumentOnContext(editedDocument, context);\n\n        return editedDocument;\n    }\n\n    /**\n     * There are three important use cases:\n     * <ul>\n     * <li>editing or creating the original translation (for the default language)</li>\n     * <li>editing an existing document translation</li>\n     * <li>creating a new translation.</i>\n     * </ul>\n     * Most of the code deals with the really bad way the default language can be specified (empty string, 'default' or\n     * a real language code).\n     *\n     * @param context the XWiki context\n     * @return the edited document translation based on the language specified on the request\n     * @throws XWikiException if something goes wrong\n     */\n    private XWikiDocument getEditedDocument(XWikiContext context) throws XWikiException\n    {\n        XWikiDocument doc = context.getDoc();\n        boolean hasTranslation = doc != context.get(\"tdoc\");\n\n        // We have to clone the context document because it is cached and the changes we are going to make are valid\n        // only for the duration of the current request.\n        doc = doc.clone();\n        context.put(\"doc\", doc);\n\n        EditForm editForm = (EditForm) context.getForm();\n        doc.readDocMetaFromForm(editForm, context);\n\n        String language = context.getWiki().getLanguagePreference(context);\n        if (doc.isNew() && doc.getDefaultLanguage().equals(\"\")) {\n            doc.setDefaultLanguage(language);\n        }\n\n        String languageToEdit = StringUtils.isEmpty(editForm.getLanguage()) ? language : editForm.getLanguage();\n\n        // If no specific language is set or if it is \"default\" then we edit the current doc.\n        if (languageToEdit == null || languageToEdit.equals(\"default\")) {\n            languageToEdit = \"\";\n        }\n        // If the document is new or if the language to edit is the default language then we edit the default\n        // translation.\n        if (doc.isNew() || doc.getDefaultLanguage().equals(languageToEdit)) {\n            languageToEdit = \"\";\n        }\n        // If the doc does not exist in the language to edit and the language was not explicitly set in the URL then\n        // we edit the default document translation. This prevents use from creating unneeded translations.\n        if (!hasTranslation && StringUtils.isEmpty(editForm.getLanguage())) {\n            languageToEdit = \"\";\n        }\n\n        // Initialize the translated document.\n        XWikiDocument tdoc;\n        if (languageToEdit.equals(\"\")) {\n            // Edit the default document translation (default language).\n            tdoc = doc;\n            if (doc.isNew()) {\n                doc.setDefaultLanguage(language);\n                doc.setLanguage(\"\");\n            }\n        } else if (!hasTranslation && context.getWiki().isMultiLingual(context)) {\n            // Edit a new translation.\n            tdoc = new XWikiDocument(doc.getDocumentReference());\n            tdoc.setLanguage(languageToEdit);\n            tdoc.setDefaultLocale(doc.getDefaultLocale());\n            // Mark the translation. It's important to know whether a document is a translation or not, especially\n            // for the sheet manager which needs to access the objects using the default document not one of its\n            // translations.\n            tdoc.setTitle(doc.getTitle());\n            tdoc.setContent(doc.getContent());\n            tdoc.setSyntax(doc.getSyntax());\n            tdoc.setAuthorReference(context.getUserReference());\n            tdoc.setStore(doc.getStore());\n        } else {\n            // Edit an existing translation. Clone the translated document object to be sure that the changes we are\n            // going to make will last only for the duration of the current request.\n            tdoc = ((XWikiDocument) context.get(\"tdoc\")).clone();\n        }\n\n        return tdoc;\n    }\n\n    /**\n     * Updates the title and content of the given document with values taken from the 'title' and 'content' request\n     * parameters or based on the document section specified on the request.\n     *\n     * @param document the document whose title and content should be updated\n     * @param context the XWiki context\n     * @throws XWikiException if something goes wrong\n     */\n    private void updateDocumentTitleAndContentFromRequest(XWikiDocument document, XWikiContext context)\n        throws XWikiException\n    {\n        // Check if section editing is enabled and if a section is specified.\n        boolean sectionEditingEnabled = context.getWiki().hasSectionEdit(context);\n        int sectionNumber = sectionEditingEnabled ? NumberUtils.toInt(context.getRequest().getParameter(\"section\")) : 0;\n        getCurrentScriptContext().setAttribute(\"sectionNumber\", sectionNumber, ScriptContext.ENGINE_SCOPE);\n\n        // Update the edited content.\n        EditForm editForm = (EditForm) context.getForm();\n        if (editForm.getContent() != null) {\n            document.setContent(editForm.getContent());\n        } else if (sectionNumber > 0) {\n            document.setContent(document.getContentOfSection(sectionNumber));\n        }\n\n        // Update the edited title.\n        if (editForm.getTitle() != null) {\n            document.setTitle(editForm.getTitle());\n        } else if (sectionNumber > 0 && document.getSections().size() > 0) {\n            // The edited content is either the content of the specified section or the content provided on the\n            // request. We assume the content provided on the request is meant to overwrite the specified section.\n            // In both cases the document content is currently having one section, so we can take its title.\n            String sectionTitle = document.getDocumentSection(1).getSectionTitle();\n            if (StringUtils.isNotBlank(sectionTitle)) {\n                // We cannot edit the page title while editing a page section so this title is for display only.\n                String sectionPlainTitle = document.getRenderedContent(sectionTitle, document.getSyntax().toIdString(),\n                    Syntax.PLAIN_1_0.toIdString(), context);\n                document.setTitle(localizePlainOrKey(\"core.editors.content.titleField.sectionEditingFormat\",\n                    document.getRenderedTitle(Syntax.PLAIN_1_0, context), sectionNumber, sectionPlainTitle));\n            }\n        }\n    }\n\n    /**\n     * Exposes the given document in the XWiki context and the Velocity context under the 'tdoc' and 'cdoc' keys.\n     *\n     * @param document the document to expose\n     * @param context the XWiki context\n     */\n    private void putDocumentOnContext(XWikiDocument document, XWikiContext context)\n    {\n        context.put(\"tdoc\", document);\n        // Old XWiki applications that are still using the inline action might expect the cdoc (content document) to be\n        // properly set on the context. Let's expose the given document also as cdoc for backward compatibility.\n        context.put(\"cdoc\", context.get(\"tdoc\"));\n    }\n\n    /**\n     * Locks the given document unless it is already locked by a different user and the current user didn't request to\n     * force the lock.\n     *\n     * @param document the document to lock\n     * @param context the XWiki context\n     */\n    private void maybeLockDocument(XWikiDocument document, XWikiContext context)\n    {\n        try {\n            XWikiLock lock = document.getLock(context);\n            EditForm editForm = (EditForm) context.getForm();\n            if (lock == null || lock.getUserName().equals(context.getUser()) || editForm.isLockForce()) {\n                document.setLock(context.getUser(), context);\n            }\n        } catch (Exception e) {\n            // Lock should never make XWiki fail, but we should log any related information.\n            LOGGER.error(\"Exception while setting up lock\", e);\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport javax.inject.Named;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.store.TemporaryAttachmentSessionsManager;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\nimport org.xwiki.user.UserReferenceSerializer;\n\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\n\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n/**\n * Validate {@link EditAction}.\n * \n * @version $Id$\n */\n@OldcoreTest\n@ReferenceComponentList\npublic class EditActionTest\n{\n    private static final DocumentReference USER_DOCUMENT_REFERENCE = new DocumentReference(\"wiki\", \"XWiki\", \"user\");\n\n    private static final UserReference USER_REFERENCE = mock(UserReference.class);\n\n    private static final UserReference OTHERUSER_REFERENCE = mock(UserReference.class);\n\n    @InjectMockComponents\n    private EditAction action;\n\n    @InjectMockitoOldcore\n    private MockitoOldcore oldcore;\n\n    @MockComponent\n    private TemporaryAttachmentSessionsManager temporaryAttachmentSessionsManager;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> documentReferenceUserReferenceSerializer;\n\n    @Mock\n    private XWikiRequest request;\n\n    @BeforeEach\n    public void beforeEach()\n    {\n        when(this.documentReferenceUserReferenceResolver.resolve(USER_DOCUMENT_REFERENCE)).thenReturn(USER_REFERENCE);\n        when(this.documentReferenceUserReferenceSerializer.serialize(USER_REFERENCE)).thenReturn(USER_DOCUMENT_REFERENCE);\n\n        this.oldcore.getXWikiContext().setUserReference(USER_DOCUMENT_REFERENCE);\n    }\n\n    private String initAndRenderAction() throws XWikiException\n    {\n        EditForm form = new EditForm();\n        form.reset(this.request);\n\n        this.oldcore.getXWikiContext().setForm(form);\n\n        return this.action.render(this.oldcore.getXWikiContext());\n    }\n\n    @Test\n    void documentAuthorsWhenDocumentDoesNotExist() throws XWikiException\n    {\n        XWikiDocument document = oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(document);\n\n        initAndRenderAction();\n\n        document = this.oldcore.getXWikiContext().getDoc();\n\n        assertSame(USER_REFERENCE, document.getAuthors().getContentAuthor());\n        assertSame(USER_REFERENCE, document.getAuthors().getCreator());\n        assertSame(USER_REFERENCE, document.getAuthors().getEffectiveMetadataAuthor());\n        assertSame(USER_REFERENCE, document.getAuthors().getOriginalMetadataAuthor());\n    }\n\n    @Test\n    void documentAuthorsWhenDocumentExist() throws XWikiException\n    {\n        XWikiDocument document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        document.getAuthors().setCreator(OTHERUSER_REFERENCE);\n        document.getAuthors().setContentAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setEffectiveMetadataAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setOriginalMetadataAuthor(OTHERUSER_REFERENCE);\n        this.oldcore.getSpyXWiki().saveDocument(document, this.oldcore.getXWikiContext());\n\n        document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(document);\n        this.oldcore.getXWikiContext().put(\"tdoc\", document);\n\n        initAndRenderAction();\n\n        document = this.oldcore.getXWikiContext().getDoc();\n\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getContentAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getCreator());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getEffectiveMetadataAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getOriginalMetadataAuthor());\n    }\n\n    @Test\n    void documentAuthorsWhenDocumentExistAndContentIsModified() throws XWikiException\n    {\n        XWikiDocument document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        document.getAuthors().setCreator(OTHERUSER_REFERENCE);\n        document.getAuthors().setContentAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setEffectiveMetadataAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setOriginalMetadataAuthor(OTHERUSER_REFERENCE);\n        this.oldcore.getSpyXWiki().saveDocument(document, this.oldcore.getXWikiContext());\n\n        document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(document);\n        this.oldcore.getXWikiContext().put(\"tdoc\", document);\n\n        when(this.request.getParameter(\"content\")).thenReturn(\"modified content\");\n\n        initAndRenderAction();\n\n        document = this.oldcore.getXWikiContext().getDoc();\n\n        assertSame(USER_REFERENCE, document.getAuthors().getContentAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getCreator());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getEffectiveMetadataAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getOriginalMetadataAuthor());\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\nimport javax.script.ScriptContext;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.csrf.CSRFToken;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiLock;\n\n/**\n * Initializes a document before it is edited.\n *\n * @version $Id$\n */\n@Component\n@Named(\"edit\")\n@Singleton\npublic class EditAction extends XWikiAction\n{\n    /**\n     * The object used for logging.\n     */\n    private static final Logger LOGGER = LoggerFactory.getLogger(EditAction.class);\n\n    @Inject\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;\n\n    @Inject\n    private CSRFToken csrf;\n\n    /**\n     * Default constructor.\n     */\n    public EditAction()\n    {\n        this.waitForXWikiInitialization = false;\n    }\n\n    @Override\n    protected Class<? extends XWikiForm> getFormClass()\n    {\n        return EditForm.class;\n    }\n\n    @Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        try {\n            XWikiDocument editedDocument = prepareEditedDocument(context);\n            maybeLockDocument(editedDocument, context);\n        } catch (XWikiException e) {\n            if (e.getCode() == XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY) {\n                context.put(\"exception\", e);\n                return \"docalreadyexists\";\n            } else {\n                throw e;\n            }\n        }\n\n        // Make sure object property fields are displayed in edit mode.\n        // See XWikiDocument#display(String, BaseObject, XWikiContext)\n        // TODO: Revisit the display mode after the inline action is removed. Is the display mode still needed when\n        // there is only one edit action?\n        context.put(\"display\", \"edit\");\n        return \"edit\";\n    }\n\n    /**\n     * Determines the edited document (translation) and updates it based on the template specified on the request and\n     * any additional request parameters that overwrite the default values from the template.\n     *\n     * @param context the XWiki context\n     * @return the edited document\n     * @throws XWikiException if something goes wrong\n     */\n    protected XWikiDocument prepareEditedDocument(XWikiContext context) throws XWikiException\n    {\n        // Determine the edited document (translation).\n        XWikiDocument editedDocument = getEditedDocument(context);\n        EditForm editForm = (EditForm) context.getForm();\n\n        // Update the edited document based on the template specified on the request.\n        readFromTemplate(editedDocument, editForm.getTemplate(), context);\n\n        // The default values from the template can be overwritten by additional request parameters.\n        updateDocumentTitleAndContentFromRequest(editedDocument, context);\n        editedDocument.readAddedUpdatedAndRemovedObjectsFromForm(editForm, context);\n\n        // Check if the document in modified\n        if (editedDocument.isMetaDataDirty() || editedDocument.isContentDirty()) {\n            // If the document is modified make sure a valid CSRF is provided\n            String token = context.getRequest().getParameter(\"form_token\");\n            if (!this.csrf.isTokenValid(token)) {\n                // or make the document restricted\n                editedDocument.setRestricted(true);\n            }\n\n            // If the metadata is modified, modify the effective metadata author\n            if (editedDocument.isMetaDataDirty()) {\n                UserReference userReference =\n                    this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n                editedDocument.getAuthors().setEffectiveMetadataAuthor(userReference);\n                editedDocument.getAuthors().setOriginalMetadataAuthor(userReference);\n            }\n\n            // If the content is modified, modify the content author\n            if (editedDocument.isContentDirty()) {\n                UserReference userReference =\n                    this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n                editedDocument.getAuthors().setContentAuthor(userReference);\n            }\n        }\n\n        // Set the current user as creator, author and contentAuthor when the edited document is newly created to avoid\n        // using XWikiGuest instead (because those fields were not previously initialized).\n        if (editedDocument.isNew()) {\n            editedDocument.setCreatorReference(context.getUserReference());\n            editedDocument.setAuthorReference(context.getUserReference());\n            editedDocument.setContentAuthorReference(context.getUserReference());\n        }\n        editedDocument.readTemporaryUploadedFiles(editForm);\n\n        // Expose the edited document on the XWiki context and the Velocity context.\n        putDocumentOnContext(editedDocument, context);\n\n        return editedDocument;\n    }\n\n    /**\n     * There are three important use cases:\n     * <ul>\n     * <li>editing or creating the original translation (for the default language)</li>\n     * <li>editing an existing document translation</li>\n     * <li>creating a new translation.</i>\n     * </ul>\n     * Most of the code deals with the really bad way the default language can be specified (empty string, 'default' or\n     * a real language code).\n     *\n     * @param context the XWiki context\n     * @return the edited document translation based on the language specified on the request\n     * @throws XWikiException if something goes wrong\n     */\n    private XWikiDocument getEditedDocument(XWikiContext context) throws XWikiException\n    {\n        XWikiDocument doc = context.getDoc();\n        boolean hasTranslation = doc != context.get(\"tdoc\");\n\n        // We have to clone the context document because it is cached and the changes we are going to make are valid\n        // only for the duration of the current request.\n        doc = doc.clone();\n        context.put(\"doc\", doc);\n\n        EditForm editForm = (EditForm) context.getForm();\n        doc.readDocMetaFromForm(editForm, context);\n\n        String language = context.getWiki().getLanguagePreference(context);\n        if (doc.isNew() && doc.getDefaultLanguage().equals(\"\")) {\n            doc.setDefaultLanguage(language);\n        }\n\n        String languageToEdit = StringUtils.isEmpty(editForm.getLanguage()) ? language : editForm.getLanguage();\n\n        // If no specific language is set or if it is \"default\" then we edit the current doc.\n        if (languageToEdit == null || languageToEdit.equals(\"default\")) {\n            languageToEdit = \"\";\n        }\n        // If the document is new or if the language to edit is the default language then we edit the default\n        // translation.\n        if (doc.isNew() || doc.getDefaultLanguage().equals(languageToEdit)) {\n            languageToEdit = \"\";\n        }\n        // If the doc does not exist in the language to edit and the language was not explicitly set in the URL then\n        // we edit the default document translation. This prevents use from creating unneeded translations.\n        if (!hasTranslation && StringUtils.isEmpty(editForm.getLanguage())) {\n            languageToEdit = \"\";\n        }\n\n        // Initialize the translated document.\n        XWikiDocument tdoc;\n        if (languageToEdit.equals(\"\")) {\n            // Edit the default document translation (default language).\n            tdoc = doc;\n            if (doc.isNew()) {\n                doc.setDefaultLanguage(language);\n                doc.setLanguage(\"\");\n            }\n        } else if (!hasTranslation && context.getWiki().isMultiLingual(context)) {\n            // Edit a new translation.\n            tdoc = new XWikiDocument(doc.getDocumentReference());\n            tdoc.setLanguage(languageToEdit);\n            tdoc.setDefaultLocale(doc.getDefaultLocale());\n            // Mark the translation. It's important to know whether a document is a translation or not, especially\n            // for the sheet manager which needs to access the objects using the default document not one of its\n            // translations.\n            tdoc.setTitle(doc.getTitle());\n            tdoc.setContent(doc.getContent());\n            tdoc.setSyntax(doc.getSyntax());\n            tdoc.setAuthorReference(context.getUserReference());\n            tdoc.setStore(doc.getStore());\n        } else {\n            // Edit an existing translation. Clone the translated document object to be sure that the changes we are\n            // going to make will last only for the duration of the current request.\n            tdoc = ((XWikiDocument) context.get(\"tdoc\")).clone();\n        }\n\n        return tdoc;\n    }\n\n    /**\n     * Updates the title and content of the given document with values taken from the 'title' and 'content' request\n     * parameters or based on the document section specified on the request.\n     *\n     * @param document the document whose title and content should be updated\n     * @param context the XWiki context\n     * @throws XWikiException if something goes wrong\n     */\n    private void updateDocumentTitleAndContentFromRequest(XWikiDocument document, XWikiContext context)\n        throws XWikiException\n    {\n        // Check if section editing is enabled and if a section is specified.\n        boolean sectionEditingEnabled = context.getWiki().hasSectionEdit(context);\n        int sectionNumber = sectionEditingEnabled ? NumberUtils.toInt(context.getRequest().getParameter(\"section\")) : 0;\n        getCurrentScriptContext().setAttribute(\"sectionNumber\", sectionNumber, ScriptContext.ENGINE_SCOPE);\n\n        // Update the edited content.\n        EditForm editForm = (EditForm) context.getForm();\n        if (editForm.getContent() != null) {\n            document.setContent(editForm.getContent());\n        } else if (sectionNumber > 0) {\n            document.setContent(document.getContentOfSection(sectionNumber));\n        }\n\n        // Update the edited title.\n        if (editForm.getTitle() != null) {\n            document.setTitle(editForm.getTitle());\n        } else if (sectionNumber > 0 && document.getSections().size() > 0) {\n            // The edited content is either the content of the specified section or the content provided on the\n            // request. We assume the content provided on the request is meant to overwrite the specified section.\n            // In both cases the document content is currently having one section, so we can take its title.\n            String sectionTitle = document.getDocumentSection(1).getSectionTitle();\n            if (StringUtils.isNotBlank(sectionTitle)) {\n                // We cannot edit the page title while editing a page section so this title is for display only.\n                String sectionPlainTitle = document.getRenderedContent(sectionTitle, document.getSyntax().toIdString(),\n                    Syntax.PLAIN_1_0.toIdString(), context);\n                document.setTitle(localizePlainOrKey(\"core.editors.content.titleField.sectionEditingFormat\",\n                    document.getRenderedTitle(Syntax.PLAIN_1_0, context), sectionNumber, sectionPlainTitle));\n            }\n        }\n    }\n\n    /**\n     * Exposes the given document in the XWiki context and the Velocity context under the 'tdoc' and 'cdoc' keys.\n     *\n     * @param document the document to expose\n     * @param context the XWiki context\n     */\n    private void putDocumentOnContext(XWikiDocument document, XWikiContext context)\n    {\n        context.put(\"tdoc\", document);\n        // Old XWiki applications that are still using the inline action might expect the cdoc (content document) to be\n        // properly set on the context. Let's expose the given document also as cdoc for backward compatibility.\n        context.put(\"cdoc\", context.get(\"tdoc\"));\n    }\n\n    /**\n     * Locks the given document unless it is already locked by a different user and the current user didn't request to\n     * force the lock.\n     *\n     * @param document the document to lock\n     * @param context the XWiki context\n     */\n    private void maybeLockDocument(XWikiDocument document, XWikiContext context)\n    {\n        try {\n            XWikiLock lock = document.getLock(context);\n            EditForm editForm = (EditForm) context.getForm();\n            if (lock == null || lock.getUserName().equals(context.getUser()) || editForm.isLockForce()) {\n                document.setLock(context.getUser(), context);\n            }\n        } catch (Exception e) {\n            // Lock should never make XWiki fail, but we should log any related information.\n            LOGGER.error(\"Exception while setting up lock\", e);\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport java.util.Map;\n\nimport javax.inject.Named;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.xwiki.csrf.CSRFToken;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.store.TemporaryAttachmentSessionsManager;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\nimport org.xwiki.user.UserReferenceSerializer;\n\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n/**\n * Validate {@link EditAction}.\n * \n * @version $Id$\n */\n@OldcoreTest\n@ReferenceComponentList\npublic class EditActionTest\n{\n    private static final DocumentReference USER_DOCUMENT_REFERENCE = new DocumentReference(\"wiki\", \"XWiki\", \"user\");\n\n    private static final UserReference USER_REFERENCE = mock(UserReference.class);\n\n    private static final UserReference OTHERUSER_REFERENCE = mock(UserReference.class);\n\n    @InjectMockComponents\n    private EditAction action;\n\n    @InjectMockitoOldcore\n    private MockitoOldcore oldcore;\n\n    @MockComponent\n    private TemporaryAttachmentSessionsManager temporaryAttachmentSessionsManager;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> documentReferenceUserReferenceSerializer;\n\n    @MockComponent\n    private CSRFToken csrf;\n\n    @Mock\n    private XWikiRequest request;\n\n    @BeforeEach\n    public void beforeEach()\n    {\n        when(this.documentReferenceUserReferenceResolver.resolve(USER_DOCUMENT_REFERENCE)).thenReturn(USER_REFERENCE);\n        when(this.documentReferenceUserReferenceSerializer.serialize(USER_REFERENCE)).thenReturn(USER_DOCUMENT_REFERENCE);\n\n        this.oldcore.getXWikiContext().setUserReference(USER_DOCUMENT_REFERENCE);\n\n        this.oldcore.getXWikiContext().setRequest(new XWikiServletRequestStub.Builder().\n            setRequestParameters(Map.of(\"form_token\", new String[] {\"tokenvalue\"})).build());\n    }\n\n    private String initAndRenderAction() throws XWikiException\n    {\n        EditForm form = new EditForm();\n        form.reset(this.request);\n\n        this.oldcore.getXWikiContext().setForm(form);\n\n        return this.action.render(this.oldcore.getXWikiContext());\n    }\n\n    @Test\n    void documentAuthorsWhenDocumentDoesNotExist() throws XWikiException\n    {\n        XWikiDocument document = oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(document);\n\n        initAndRenderAction();\n\n        document = this.oldcore.getXWikiContext().getDoc();\n\n        assertSame(USER_REFERENCE, document.getAuthors().getContentAuthor());\n        assertSame(USER_REFERENCE, document.getAuthors().getCreator());\n        assertSame(USER_REFERENCE, document.getAuthors().getEffectiveMetadataAuthor());\n        assertSame(USER_REFERENCE, document.getAuthors().getOriginalMetadataAuthor());\n    }\n\n    @Test\n    void documentAuthorsWhenDocumentExist() throws XWikiException\n    {\n        XWikiDocument document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        document.getAuthors().setCreator(OTHERUSER_REFERENCE);\n        document.getAuthors().setContentAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setEffectiveMetadataAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setOriginalMetadataAuthor(OTHERUSER_REFERENCE);\n        this.oldcore.getSpyXWiki().saveDocument(document, this.oldcore.getXWikiContext());\n\n        document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(document);\n        this.oldcore.getXWikiContext().put(\"tdoc\", document);\n\n        initAndRenderAction();\n\n        document = this.oldcore.getXWikiContext().getDoc();\n\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getContentAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getCreator());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getEffectiveMetadataAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getOriginalMetadataAuthor());\n    }\n\n    @Test\n    void documentAuthorsWhenDocumentExistAndContentIsModifiedAndInvalidValidCSRF() throws XWikiException\n    {\n        documentAuthorsWhenDocumentExistAndContentIsModified(false);\n    }\n\n    @Test\n    void documentAuthorsWhenDocumentExistAndContentIsModifiedAndValidCSRF() throws XWikiException\n    {\n        documentAuthorsWhenDocumentExistAndContentIsModified(true);\n    }\n\n    void documentAuthorsWhenDocumentExistAndContentIsModified(boolean validToken) throws XWikiException\n    {\n        XWikiDocument document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        document.getAuthors().setCreator(OTHERUSER_REFERENCE);\n        document.getAuthors().setContentAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setEffectiveMetadataAuthor(OTHERUSER_REFERENCE);\n        document.getAuthors().setOriginalMetadataAuthor(OTHERUSER_REFERENCE);\n        this.oldcore.getSpyXWiki().saveDocument(document, this.oldcore.getXWikiContext());\n\n        document = this.oldcore.getSpyXWiki().getDocument(new DocumentReference(\"wiki\", \"space\", \"page\"),\n            this.oldcore.getXWikiContext());\n        this.oldcore.getXWikiContext().setDoc(document);\n        this.oldcore.getXWikiContext().put(\"tdoc\", document);\n\n        when(this.request.getParameter(\"content\")).thenReturn(\"modified content\");\n\n        when(this.csrf.isTokenValid(\"tokenvalue\")).thenReturn(validToken);\n\n        initAndRenderAction();\n\n        document = this.oldcore.getXWikiContext().getDoc();\n\n        assertSame(USER_REFERENCE, document.getAuthors().getContentAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getCreator());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getEffectiveMetadataAuthor());\n        assertSame(OTHERUSER_REFERENCE, document.getAuthors().getOriginalMetadataAuthor());\n        assertEquals(!validToken, document.isRestricted());\n    }\n}\n"], "filenames": ["xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/EditAction.java", "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/EditActionTest.java"], "buggy_code_start_loc": [31, 21], "buggy_code_end_loc": [132, 168], "fixing_code_start_loc": [32, 22], "fixing_code_end_loc": [146, 193], "type": "CWE-352", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions it's possible to execute a content with the right of any user via a crafted URL. A user must have `programming` privileges in order to exploit this vulnerability. This issue has been patched in XWiki 14.10.7 and 15.2RC1. Users are advised to upgrade. There are no known workarounds for for this vulnerability.", "other": {"cve": {"id": "CVE-2023-46242", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-07T19:15:10.163", "lastModified": "2023-11-14T20:06:49.583", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions it's possible to execute a content with the right of any user via a crafted URL. A user must have `programming` privileges in order to exploit this vulnerability. This issue has been patched in XWiki 14.10.7 and 15.2RC1. Users are advised to upgrade. There are no known workarounds for for this vulnerability."}, {"lang": "es", "value": "XWiki Platform es una plataforma wiki gen\u00e9rica que ofrece servicios de ejecuci\u00f3n para aplicaciones creadas sobre ella. En las versiones afectadas es posible ejecutar un contenido con el derecho de cualquier usuario a trav\u00e9s de una URL modificada. Un usuario debe tener privilegios de \"programming\" para poder explotar esta vulnerabilidad. Este problema se solucion\u00f3 en XWiki 14.10.7 y 15.2RC1. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0", "versionEndExcluding": "14.10.7", "matchCriteriaId": "34F155FF-B624-42DB-9EA5-C22883905A54"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "15.0", "versionEndExcluding": "15.2", "matchCriteriaId": "F1AD4421-AE75-43F7-9B8F-F0A739D166C8"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/cf8eb861998ea423c3645d2e5e974420b0e882be", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-hgpw-6p4h-j6h5", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20386", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/cf8eb861998ea423c3645d2e5e974420b0e882be"}}