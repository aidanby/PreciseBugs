{"buggy_code": ["<?php\n/**\n * TwoFactorAuth login file - This script authenticates the user provided\n * his username/passwords as saved in the user database, and an OTP token\n * generated by the Google Authenticator app, based on a shared secret.\n *\n * @author Arno0x0x - https://twitter.com/Arno0x0x\n * @license GPLv3 - licence available here: http://www.gnu.org/copyleft/gpl.html\n * @link https://github.com/Arno0x/\n */\n \n//------------------------------------------------------\n// Include config file\nrequire_once(\"../config.php\");\n\n// Allow included script to be included from this script\ndefine('INCLUSION_ENABLED',true);\n\n//-----------------------------------------------------\n// Sending no-cache headers\nheader( 'Cache-Control: no-store, no-cache, must-revalidate' );\nheader( 'Cache-Control: post-check=0, pre-check=0', false );\nheader( 'Pragma: no-cache' );\n\n//------------------------------------------------------\n// If any form variable is missing, just display the login page\nif (!isset($_POST[\"username\"]) || !isset($_POST[\"password\"]) || !isset($_POST[\"token\"])) {\n\trequire_once(\"loginForm.php\");\n}\nelse {\n    //------------------------------------------------------\n    // Retrieve and store form parameters\n    $username = htmlspecialchars($_POST[\"username\"], ENT_QUOTES);\n    $password = $_POST[\"password\"];\n    $token = $_POST[\"token\"];\n    \n    //-----------------------------------------------------\n    // Import database manager library\n    require_once(DBMANAGER_LIB);\n    try {\n    \t// Create the DB manager object\n    \t$dbManager = new DBManager(USER_SQL_DATABASE_FILE);\n    \t\n    \t// Retrieve the password hash and stored Google Auth secret for this user\n\t    if (!($result = $dbManager->getPasswordHashAndGauthSecret($username))) {\n\t    \t$error = \"[ERROR] Unknown user\";\n\t    } else {\n\t    \t// Import the GoogleAuth library and create a GoogleAuth object\n\t\t    require_once(GAUTH_LIB);\n\t\t    $gauth = new GoogleAuthenticator();\n\t    \t\n\t    \t// Checking password hash and token\n\t    \tif (($result['PASSWORDHASH'] !== hash(\"sha256\",$password)) || !($gauth->verifyCode($result['GAUTHSECRET'],$token))) {\n\t   \t\t\t$error = \"[ERROR] Authentication failed\";\n\t       \t} else {\n\t       \t\t$isAdmin = $dbManager->getAdminStatus($username);\n\t       \t}\n\t    }\n\t    \n\t    $dbManager->close();\n\t    \t\n    \t//--------------------------------------------------\n\t    // Login successful - let's proceed\n\t    if (!isset($error)) {\n\t        //--------------------------------------------------\n\t        // Creating a session to persist the authentication\n\t        session_name(SESSION_NAME);\n\t        session_cache_limiter('private_no_expire');\n\t        \n\t        // Session parameters :\n\t        // - Timelife of of the whole browser session\n\t        // - Valid for all path on the domain, for this FQDN only\n\t        // - Ensure Cookies are not available to Javascript\n\t        // - Cookies are sent on https only\n\t        $domain = ($_SERVER['HTTP_HOST'] !== 'localhost') ? $_SERVER['SERVER_NAME'] : false;\n\t        session_set_cookie_params (0, \"/\", $domain, true, true);\n\t    \n\t        // Create a session\n\t        session_start();\n\t        \n\t        $_SESSION[\"authenticated\"] = true;\n\t        $_SESSION[\"username\"] = $username;\n\t        $_SESSION[\"isAdmin\"] = ($isAdmin === 1)? true: false;\n\t        \n\t        //--------------------------------------------------\n\t        // Checking which URL we should redirect the user to\n\t        if (isset($_POST[\"from\"])) {\n\t        \t$from = urldecode($_POST[\"from\"]);\n\t            $redirectTo = ((isset($_SERVER[\"HTTPS\"]) && $_SERVER[\"HTTPS\"] === \"on\")? \"https://\" : \"http://\").$_SERVER[\"SERVER_NAME\"].\":\".$_SERVER[\"SERVER_PORT\"].$from;\n\t        }\n\t        else {\n\t            $redirectTo = AUTH_SUCCEED_REDIRECT_URL;\n\t        }\n\t        header(\"Location: \".$redirectTo,true,302);\n\t\t}\n    \telse {\n    \t    http_response_code(403);\n        \trequire_once(\"loginForm.php\");   \n    \t}\n    } catch (Exception $e) {\n    \t$error = \"[ERROR] Cannot open user database file\";\n    \trequire_once(\"loginForm.php\");\n    }\n}\n?>\n"], "fixing_code": ["<?php\n/**\n * TwoFactorAuth login file - This script authenticates the user provided\n * his username/passwords as saved in the user database, and an OTP token\n * generated by the Google Authenticator app, based on a shared secret.\n *\n * @author Arno0x0x - https://twitter.com/Arno0x0x\n * @license GPLv3 - licence available here: http://www.gnu.org/copyleft/gpl.html\n * @link https://github.com/Arno0x/\n */\n \n//------------------------------------------------------\n// Include config file\nrequire_once(\"../config.php\");\n\n// Allow included script to be included from this script\ndefine('INCLUSION_ENABLED',true);\n\n//-----------------------------------------------------\n// Sending no-cache headers\nheader( 'Cache-Control: no-store, no-cache, must-revalidate' );\nheader( 'Cache-Control: post-check=0, pre-check=0', false );\nheader( 'Pragma: no-cache' );\n\n//------------------------------------------------------\n// If any form variable is missing, just display the login page\nif (!isset($_POST[\"username\"]) || !isset($_POST[\"password\"]) || !isset($_POST[\"token\"])) {\n\trequire_once(\"loginForm.php\");\n}\nelse {\n    //------------------------------------------------------\n    // Retrieve and store form parameters\n    $username = htmlspecialchars($_POST[\"username\"], ENT_QUOTES);\n    $password = $_POST[\"password\"];\n    $token = $_POST[\"token\"];\n    \n    //-----------------------------------------------------\n    // Import database manager library\n    require_once(DBMANAGER_LIB);\n    try {\n    \t// Create the DB manager object\n    \t$dbManager = new DBManager(USER_SQL_DATABASE_FILE);\n    \t\n    \t// Retrieve the password hash and stored Google Auth secret for this user\n\t    if (!($result = $dbManager->getPasswordHashAndGauthSecret($username))) {\n\t    \t$error = \"[ERROR] Unknown user\";\n\t    } else {\n\t    \t// Import the GoogleAuth library and create a GoogleAuth object\n\t\t    require_once(GAUTH_LIB);\n\t\t    $gauth = new GoogleAuthenticator();\n\t    \t\n\t    \t// Checking password hash and token\n\t    \tif (($result['PASSWORDHASH'] !== hash(\"sha256\",$password)) || !($gauth->verifyCode($result['GAUTHSECRET'],$token))) {\n\t   \t\t\t$error = \"[ERROR] Authentication failed\";\n\t       \t} else {\n\t       \t\t$isAdmin = $dbManager->getAdminStatus($username);\n\t       \t}\n\t    }\n\t    \n\t    $dbManager->close();\n\t    \t\n    \t//--------------------------------------------------\n\t    // Login successful - let's proceed\n\t    if (!isset($error)) {\n\t        //--------------------------------------------------\n\t        // Creating a session to persist the authentication\n\t        session_name(SESSION_NAME);\n\t        session_cache_limiter('private_no_expire');\n\t        \n\t        // Session parameters :\n\t        // - Timelife of of the whole browser session\n\t        // - Valid for all path on the domain, for this FQDN only\n\t        // - Ensure Cookies are not available to Javascript\n\t        // - Cookies are sent on https only\n\t        $domain = ($_SERVER['HTTP_HOST'] !== 'localhost') ? $_SERVER['SERVER_NAME'] : false;\n\t        session_set_cookie_params (0, \"/\", $domain, true, true);\n\t    \n\t        // Create a session\n\t        session_start();\n\t        \n\t        $_SESSION[\"authenticated\"] = true;\n\t        $_SESSION[\"username\"] = $username;\n\t        $_SESSION[\"isAdmin\"] = ($isAdmin === 1)? true: false;\n\t        \n\t        //--------------------------------------------------\n\t        // Checking which URL we should redirect the user to\n\t        if (isset($_GET['from'])) {\n\t        \t$from = $_GET['from'];\n\t\t\tif (preg_match('#^(?:https?:)?//#', $_GET['from'], $m)) {\n\t\t\t\t$url = parse_url($_GET['from']);\n\t\t\t\t$from = $url['path'] . (!empty($url['query']) ? '?' . $url['query'] : '') . (!empty($url['fragment']) ? '#' . $url['fragment'] : '');\n\t\t\t}\n\t            $redirectTo = ((isset($_SERVER[\"HTTPS\"]) && $_SERVER[\"HTTPS\"] === \"on\")? \"https://\" : \"http://\").$_SERVER[\"SERVER_NAME\"].\":\".$_SERVER[\"SERVER_PORT\"].$from;\n\t        }\n\t        else {\n\t            $redirectTo = AUTH_SUCCEED_REDIRECT_URL;\n\t        }\n\t        header(\"Location: \".$redirectTo,true,302);\n\t\t}\n    \telse {\n    \t    http_response_code(403);\n        \trequire_once(\"loginForm.php\");   \n    \t}\n    } catch (Exception $e) {\n    \t$error = \"[ERROR] Cannot open user database file\";\n    \trequire_once(\"loginForm.php\");\n    }\n}\n?>\n"], "filenames": ["login/login.php"], "buggy_code_start_loc": [87], "buggy_code_end_loc": [89], "fixing_code_start_loc": [87], "fixing_code_end_loc": [93], "type": "CWE-601", "message": "A vulnerability classified as problematic has been found in Arno0x TwoFactorAuth. This affects an unknown part of the file login/login.php. The manipulation of the argument from leads to open redirect. It is possible to initiate the attack remotely. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The name of the patch is 8549ad3cf197095f783643e41333586d6a4d0e54. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-223803.", "other": {"cve": {"id": "CVE-2016-15030", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-25T18:15:09.467", "lastModified": "2023-03-30T18:42:59.037", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in Arno0x TwoFactorAuth. This affects an unknown part of the file login/login.php. The manipulation of the argument from leads to open redirect. It is possible to initiate the attack remotely. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The name of the patch is 8549ad3cf197095f783643e41333586d6a4d0e54. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-223803."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:twofactorauth_project:twofactorauth:*:*:*:*:*:*:*:*", "versionEndExcluding": "2016-01-27", "matchCriteriaId": "DF658DB7-9569-4579-990F-C07F50015415"}]}]}], "references": [{"url": "https://github.com/Arno0x/TwoFactorAuth/commit/8549ad3cf197095f783643e41333586d6a4d0e54", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/Arno0x/TwoFactorAuth/pull/3", "source": "cna@vuldb.com", "tags": ["Issue Tracking"]}, {"url": "https://vuldb.com/?ctiid.223803", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.223803", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Arno0x/TwoFactorAuth/commit/8549ad3cf197095f783643e41333586d6a4d0e54"}}