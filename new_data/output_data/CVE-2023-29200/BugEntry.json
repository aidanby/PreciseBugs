{"buggy_code": ["<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\nuse Contao\\CoreBundle\\Exception\\AccessDeniedException;\nuse Contao\\CoreBundle\\Exception\\InternalServerErrorException;\nuse Contao\\CoreBundle\\Exception\\ResponseException;\nuse Contao\\CoreBundle\\Picker\\PickerInterface;\nuse Contao\\CoreBundle\\Util\\SymlinkUtil;\nuse Contao\\Image\\ResizeConfiguration;\nuse Doctrine\\DBAL\\Exception\\DriverException;\nuse Imagine\\Exception\\RuntimeException;\nuse Imagine\\Gd\\Imagine;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\Session\\Session;\nuse Webmozart\\PathUtil\\Path;\n\n/**\n * Provide methods to modify the file system.\n *\n * @property string  $path\n * @property string  $extension\n * @property boolean $createNewVersion\n * @property boolean $isDbAssisted\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass DC_Folder extends DataContainer implements \\listable, \\editable\n{\n\t/**\n\t * Current path\n\t * @var string\n\t */\n\tprotected $strPath;\n\n\t/**\n\t * Current file extension\n\t * @var string\n\t */\n\tprotected $strExtension;\n\n\t/**\n\t * Root dir\n\t * @var string\n\t */\n\tprotected $strRootDir;\n\n\t/**\n\t * Initial ID of the record\n\t * @var string\n\t */\n\tprotected $initialId;\n\n\t/**\n\t * Current filemounts\n\t * @var array\n\t */\n\tprotected $arrFilemounts = array();\n\n\t/**\n\t * Valid file types\n\t * @var array\n\t */\n\tprotected $arrValidFileTypes = array();\n\n\t/**\n\t * Messages\n\t * @var array\n\t */\n\tprotected $arrMessages = array();\n\n\t/**\n\t * Counts\n\t * @var array\n\t */\n\tprotected $arrCounts = array();\n\n\t/**\n\t * Database assisted\n\t * @var boolean\n\t */\n\tprotected $blnIsDbAssisted = false;\n\n\t/**\n\t * Show files\n\t * @var boolean\n\t */\n\tprotected $blnFiles = true;\n\n\t/**\n\t * Only allow to select files\n\t * @var boolean\n\t */\n\tprotected $blnFilesOnly = false;\n\n\t/**\n\t * Initialize the object\n\t *\n\t * @param string $strTable\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function __construct($strTable)\n\t{\n\t\tparent::__construct();\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Check the request token (see #4007)\n\t\tif (isset($_GET['act']))\n\t\t{\n\t\t\tif (!isset($_GET['rt']) || !RequestToken::validate(Input::get('rt')))\n\t\t\t{\n\t\t\t\t$objSession->set('INVALID_TOKEN_URL', Environment::get('request'));\n\t\t\t\t$this->redirect('contao/confirm.php');\n\t\t\t}\n\t\t}\n\n\t\t$this->intId = Input::get('id', true);\n\n\t\t// Clear the clipboard\n\t\tif (isset($_GET['clipboard']))\n\t\t{\n\t\t\t$objSession->set('CLIPBOARD', array());\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\n\t\t// Check whether the table is defined\n\t\tif (!$strTable || !isset($GLOBALS['TL_DCA'][$strTable]))\n\t\t{\n\t\t\t$this->log('Could not load data container configuration for \"' . $strTable . '\"', __METHOD__, TL_ERROR);\n\t\t\ttrigger_error('Could not load data container configuration', E_USER_ERROR);\n\t\t}\n\n\t\t// Check permission to create new folders\n\t\tif (isset($GLOBALS['TL_DCA'][$strTable]['list']['new']) && Input::get('act') == 'paste' && Input::get('mode') == 'create')\n\t\t{\n\t\t\tthrow new AccessDeniedException('Attempt to create a new folder although the method has been overwritten in the data container.');\n\t\t}\n\n\t\t// Set IDs and redirect\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_select')\n\t\t{\n\t\t\t$ids = Input::post('IDS');\n\n\t\t\tif (empty($ids) || !\\is_array($ids))\n\t\t\t{\n\t\t\t\t$this->reload();\n\t\t\t}\n\n\t\t\t// Decode the values (see #5764)\n\t\t\t$ids = array_map('rawurldecode', $ids);\n\n\t\t\t$session = $objSession->all();\n\t\t\t$session['CURRENT']['IDS'] = $ids;\n\t\t\t$objSession->replace($session);\n\n\t\t\tif (isset($_POST['edit']))\n\t\t\t{\n\t\t\t\t$this->redirect(str_replace('act=select', 'act=editAll', Environment::get('request')));\n\t\t\t}\n\t\t\telseif (isset($_POST['delete']))\n\t\t\t{\n\t\t\t\t$this->redirect(str_replace('act=select', 'act=deleteAll', Environment::get('request')));\n\t\t\t}\n\t\t\telseif (isset($_POST['cut']) || isset($_POST['copy']))\n\t\t\t{\n\t\t\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t\t\t$arrClipboard[$strTable] = array\n\t\t\t\t(\n\t\t\t\t\t'id' => $ids,\n\t\t\t\t\t'mode' => (isset($_POST['cut']) ? 'cutAll' : 'copyAll')\n\t\t\t\t);\n\n\t\t\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t}\n\t\t}\n\n\t\t$this->strTable = $strTable;\n\t\t$this->blnIsDbAssisted = $GLOBALS['TL_DCA'][$strTable]['config']['databaseAssisted'];\n\t\t$this->strRootDir = System::getContainer()->getParameter('kernel.project_dir');\n\n\t\t// Check for valid file types\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['validFileTypes'])\n\t\t{\n\t\t\t$this->arrValidFileTypes = StringUtil::trimsplit(',', strtolower($GLOBALS['TL_DCA'][$this->strTable]['config']['validFileTypes']));\n\t\t}\n\n\t\t// Call onload_callback (e.g. to check permissions)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onload_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onload_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$callback($this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get all filemounts (root folders)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$strTable]['list']['sorting']['root']))\n\t\t{\n\t\t\t$this->arrFilemounts = $this->eliminateNestedPaths($GLOBALS['TL_DCA'][$strTable]['list']['sorting']['root']);\n\t\t}\n\t}\n\n\t/**\n\t * Return an object property\n\t *\n\t * @param string $strKey\n\t *\n\t * @return mixed\n\t */\n\tpublic function __get($strKey)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'path':\n\t\t\t\treturn $this->strPath;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn $this->strExtension;\n\n\t\t\tcase 'isDbAssisted':\n\t\t\t\treturn $this->blnIsDbAssisted;\n\t\t}\n\n\t\treturn parent::__get($strKey);\n\t}\n\n\t/**\n\t * List all files and folders of the file system\n\t *\n\t * @return string\n\t */\n\tpublic function showAll()\n\t{\n\t\t$return = '';\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t/** @var AttributeBagInterface $objSessionBag */\n\t\t$objSessionBag = $objSession->getBag('contao_backend');\n\n\t\t$session = $objSessionBag->all();\n\n\t\t// Add to clipboard\n\t\tif (Input::get('act') == 'paste')\n\t\t{\n\t\t\t$mode = Input::get('mode');\n\n\t\t\tif ($mode != 'create' && $mode != 'move')\n\t\t\t{\n\t\t\t\t$this->isValid($this->intId);\n\t\t\t}\n\n\t\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t\t$arrClipboard[$this->strTable] = array\n\t\t\t(\n\t\t\t\t'id' => $this->urlEncode($this->intId),\n\t\t\t\t'childs' => Input::get('childs'),\n\t\t\t\t'mode' => $mode\n\t\t\t);\n\n\t\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\t\t}\n\n\t\t// Get the session data and toggle the nodes\n\t\tif (Input::get('tg') == 'all')\n\t\t{\n\t\t\t// Expand tree\n\t\t\tif (empty($session['filetree']) || !\\is_array($session['filetree']) || current($session['filetree']) != 1)\n\t\t\t{\n\t\t\t\t$session['filetree'] = $this->getMD5Folders(Config::get('uploadPath'));\n\t\t\t}\n\t\t\t// Collapse tree\n\t\t\telse\n\t\t\t{\n\t\t\t\t$session['filetree'] = array();\n\t\t\t}\n\n\t\t\t$objSessionBag->replace($session);\n\t\t\t$this->redirect(preg_replace('/(&(amp;)?|\\?)tg=[^& ]*/i', '', Environment::get('request')));\n\t\t}\n\n\t\t$blnClipboard = false;\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t// Check clipboard\n\t\tif (!empty($arrClipboard[$this->strTable]))\n\t\t{\n\t\t\t$blnClipboard = true;\n\t\t\t$arrClipboard = $arrClipboard[$this->strTable];\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\t\t$this->import(BackendUser::class, 'User');\n\n\t\t$arrFound = array();\n\t\t$for = $session['search'][$this->strTable]['value'];\n\n\t\t// Limit the results by modifying $this->arrFilemounts\n\t\tif ((string) $for !== '')\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$this->Database->prepare(\"SELECT '' REGEXP ?\")->execute($for);\n\t\t\t}\n\t\t\tcatch (DriverException $exception)\n\t\t\t{\n\t\t\t\t// Quote search string if it is not a valid regular expression\n\t\t\t\t$for = preg_quote($for);\n\t\t\t}\n\n\t\t\t$strPattern = \"CAST(name AS CHAR) REGEXP ?\";\n\n\t\t\tif (substr(Config::get('dbCollation'), -3) == '_ci')\n\t\t\t{\n\t\t\t\t$strPattern = \"LOWER(CAST(name AS CHAR)) REGEXP LOWER(?)\";\n\t\t\t}\n\n\t\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey']))\n\t\t\t{\n\t\t\t\tlist($t, $f) = explode('.', $GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey'], 2);\n\n\t\t\t\t$objRoot = $this->Database->prepare(\"SELECT path, type, extension FROM \" . $this->strTable . \" WHERE (\" . $strPattern . \" OR \" . sprintf($strPattern, \"(SELECT \" . Database::quoteIdentifier($f) . \" FROM $t WHERE $t.id=\" . $this->strTable . \".name)\") . \")\")\n\t\t\t\t\t\t\t\t\t\t  ->execute($for, $for);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$objRoot = $this->Database->prepare(\"SELECT path, type, extension FROM \" . $this->strTable . \" WHERE \" . $strPattern)\n\t\t\t\t\t\t\t\t\t\t  ->execute($for);\n\t\t\t}\n\n\t\t\tif ($objRoot->numRows < 1)\n\t\t\t{\n\t\t\t\t$this->arrFilemounts = array();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$arrRoot = array();\n\n\t\t\t\t// Respect existing limitations (root IDs)\n\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root']))\n\t\t\t\t{\n\t\t\t\t\twhile ($objRoot->next())\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'] as $root)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (strncmp($root . '/', $objRoot->path . '/', \\strlen($root) + 1) === 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($objRoot->type == 'folder' || empty($this->arrValidFileTypes) || \\in_array($objRoot->extension, $this->arrValidFileTypes))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$arrFound[] = $objRoot->path;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$arrRoot[] = ($objRoot->type == 'folder') ? $objRoot->path : \\dirname($objRoot->path);\n\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twhile ($objRoot->next())\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($objRoot->type == 'folder' || empty($this->arrValidFileTypes) || \\in_array($objRoot->extension, $this->arrValidFileTypes))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$arrFound[] = $objRoot->path;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$arrRoot[] = ($objRoot->type == 'folder') ? $objRoot->path : \\dirname($objRoot->path);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->arrFilemounts = $this->eliminateNestedPaths(array_unique($arrRoot));\n\t\t\t}\n\t\t}\n\n\t\t// Call recursive function tree()\n\t\tif ((string) $for !== '' && empty($this->arrFilemounts))\n\t\t{\n\t\t\t// Show an empty tree if there are no search results\n\t\t}\n\t\telseif (empty($this->arrFilemounts) && !\\is_array($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root']) && $GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'] !== false)\n\t\t{\n\t\t\t$return .= $this->generateTree($this->strRootDir . '/' . Config::get('uploadPath'), 0, false, true, ($blnClipboard ? $arrClipboard : false), $arrFound);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor ($i=0, $c=\\count($this->arrFilemounts); $i<$c; $i++)\n\t\t\t{\n\t\t\t\tif ($this->arrFilemounts[$i] && is_dir($this->strRootDir . '/' . $this->arrFilemounts[$i]))\n\t\t\t\t{\n\t\t\t\t\t$return .= $this->generateTree($this->strRootDir . '/' . $this->arrFilemounts[$i], 0, true, $this->isProtectedPath($this->arrFilemounts[$i]), ($blnClipboard ? $arrClipboard : false), $arrFound);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for the \"create new\" button\n\t\t$clsNew = 'header_new_folder';\n\t\t$lblNew = $GLOBALS['TL_LANG'][$this->strTable]['new'][0];\n\t\t$ttlNew = $GLOBALS['TL_LANG'][$this->strTable]['new'][1];\n\t\t$hrfNew = 'act=paste&amp;mode=create';\n\n\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['list']['new']))\n\t\t{\n\t\t\t$clsNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['class'];\n\t\t\t$lblNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['label'][0];\n\t\t\t$ttlNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['label'][1];\n\t\t\t$hrfNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['href'];\n\t\t}\n\n\t\t$labelPasteInto = $GLOBALS['TL_LANG'][$this->strTable]['pasteinto'] ?? $GLOBALS['TL_LANG']['DCA']['pasteinto'];\n\t\t$imagePasteInto = Image::getHtml('pasteinto.svg', $labelPasteInto[0]);\n\n\t\tif ((string) $for !== '')\n\t\t{\n\t\t\tMessage::addInfo($GLOBALS['TL_LANG']['MSC']['searchExclude']);\n\t\t}\n\n\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['config']['label']))\n\t\t{\n\t\t\t$label = $GLOBALS['TL_DCA'][$this->strTable]['config']['label'];\n\t\t}\n\t\telseif (($do = Input::get('do')) && isset($GLOBALS['TL_LANG']['MOD'][$do]))\n\t\t{\n\t\t\t$label = $GLOBALS['TL_LANG']['MOD'][$do][0];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$label = $GLOBALS['TL_LANG']['MOD']['files'][0];\n\t\t}\n\n\t\t$icon = $GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['icon'] ?: 'filemounts.svg';\n\t\t$label = Image::getHtml($icon) . ' <label>' . $label . '</label>';\n\n\t\t// Build the tree\n\t\t$return = $this->panel() . Message::generate() . '\n<div id=\"tl_buttons\">' . ((Input::get('act') == 'select') ? '\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a> ' : '') . ((Input::get('act') != 'select' && !$blnClipboard && !$GLOBALS['TL_DCA'][$this->strTable]['config']['closed'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable']) ? '\n<a href=\"' . $this->addToUrl($hrfNew) . '\" class=\"' . $clsNew . '\" title=\"' . StringUtil::specialchars($ttlNew) . '\" accesskey=\"n\" onclick=\"Backend.getScrollOffset()\">' . $lblNew . '</a>\n<a href=\"' . $this->addToUrl('&amp;act=paste&amp;mode=move') . '\" class=\"header_new\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG'][$this->strTable]['move'][1]) . '\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG'][$this->strTable]['move'][0] . '</a>  ' : '') . ($blnClipboard ? '\n<a href=\"' . $this->addToUrl('clipboard=1') . '\" class=\"header_clipboard\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['clearClipboard']) . '\" accesskey=\"x\">' . $GLOBALS['TL_LANG']['MSC']['clearClipboard'] . '</a> ' : $this->generateGlobalButtons()) . '\n</div>' . ((Input::get('act') == 'select') ? '\n<form id=\"tl_select\" class=\"tl_form tl_edit_form' . ((Input::get('act') == 'select') ? ' unselectable' : '') . '\" method=\"post\" novalidate>\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"tl_select\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' : '') . ($blnClipboard ? '\n<div id=\"paste_hint\" data-add-to-scroll-offset=\"20\">\n  <p>' . $GLOBALS['TL_LANG']['MSC']['selectNewPosition'] . '</p>\n</div>' : '') . '\n<div class=\"tl_listing_container tree_view\" id=\"tl_listing\"' . $this->getPickerValueAttribute() . '>' . ($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['breadcrumb'] ?? '') . ((Input::get('act') == 'select' || $this->strPickerFieldType == 'checkbox') ? '\n<div class=\"tl_select_trigger\">\n<label for=\"tl_select_trigger\" class=\"tl_select_label\">' . $GLOBALS['TL_LANG']['MSC']['selectAll'] . '</label> <input type=\"checkbox\" id=\"tl_select_trigger\" onclick=\"Backend.toggleCheckboxes(this)\" class=\"tl_tree_checkbox\">\n</div>' : '') . '\n<ul class=\"tl_listing tl_file_manager' . ($this->strPickerFieldType ? ' picker unselectable' : '') . '\">\n  <li class=\"tl_folder_top cf\"><div class=\"tl_left\">' . $label . '</div> <div class=\"tl_right\">' . (($blnClipboard && empty($this->arrFilemounts) && !\\is_array($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root']) && $GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'] !== false) ? '<a href=\"' . $this->addToUrl('&amp;act=' . $arrClipboard['mode'] . '&amp;mode=2&amp;pid=' . Config::get('uploadPath') . (!\\is_array($arrClipboard['id']) ? '&amp;id=' . $arrClipboard['id'] : '')) . '\" title=\"' . StringUtil::specialchars($labelPasteInto[0]) . '\" onclick=\"Backend.getScrollOffset()\">' . $imagePasteInto . '</a>' : '&nbsp;') . '</div></li>' . $return . '\n</ul>' . ($this->strPickerFieldType == 'radio' ? '\n<div class=\"tl_radio_reset\">\n<label for=\"tl_radio_reset\" class=\"tl_radio_label\">' . $GLOBALS['TL_LANG']['MSC']['resetSelected'] . '</label> <input type=\"radio\" name=\"picker\" id=\"tl_radio_reset\" value=\"\" class=\"tl_tree_radio\">\n</div>' : '') . '\n</div>';\n\n\t\t// Close the form\n\t\tif (Input::get('act') == 'select')\n\t\t{\n\t\t\t// Submit buttons\n\t\t\t$arrButtons = array();\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notEditable'])\n\t\t\t{\n\t\t\t\t$arrButtons['edit'] = '<button type=\"submit\" name=\"edit\" id=\"edit\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['editSelected'] . '</button>';\n\t\t\t}\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notDeletable'])\n\t\t\t{\n\t\t\t\t$arrButtons['delete'] = '<button type=\"submit\" name=\"delete\" id=\"delete\" class=\"tl_submit\" accesskey=\"d\" onclick=\"return confirm(\\'' . $GLOBALS['TL_LANG']['MSC']['delAllConfirmFile'] . '\\')\">' . $GLOBALS['TL_LANG']['MSC']['deleteSelected'] . '</button>';\n\t\t\t}\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notSortable'])\n\t\t\t{\n\t\t\t\t$arrButtons['cut'] = '<button type=\"submit\" name=\"cut\" id=\"cut\" class=\"tl_submit\" accesskey=\"x\">' . $GLOBALS['TL_LANG']['MSC']['moveSelected'] . '</button>';\n\t\t\t}\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notCopyable'])\n\t\t\t{\n\t\t\t\t$arrButtons['copy'] = '<button type=\"submit\" name=\"copy\" id=\"copy\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['copySelected'] . '</button>';\n\t\t\t}\n\n\t\t\t// Call the buttons_callback (see #4691)\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['select']['buttons_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['select']['buttons_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\\count($arrButtons) < 3)\n\t\t\t{\n\t\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t\t{\n\t\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t\t}\n\n\t\t\t\t$strButtons .= '</ul></div>';\n\t\t\t}\n\n\t\t\t$return .= '\n</div>\n<div class=\"tl_formbody_submit\" style=\"text-align:right\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\t\t}\n\n\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['closed'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable'] && Input::get('act') != 'select')\n\t\t{\n\t\t\t$GLOBALS['TL_CSS'][] = 'assets/dropzone/css/dropzone.min.css';\n\t\t\t$GLOBALS['TL_JAVASCRIPT'][] = 'assets/dropzone/js/dropzone.min.js';\n\n\t\t\t$strAccepted = implode(',', array_map(static function ($a) { return '.' . $a; }, StringUtil::trimsplit(',', strtolower(Config::get('uploadTypes')))));\n\t\t\t$intMaxSize = round(FileUpload::getMaxUploadSize() / 1024 / 1024);\n\n\t\t\t$return .= '<script>'\n\t\t\t\t. 'Dropzone.autoDiscover = false;'\n\t\t\t\t. 'Backend.enableFileTreeUpload(\"tl_listing\", ' . json_encode(array(\n\t\t\t\t\t'url' => html_entity_decode($this->addToUrl('act=move&mode=2&pid=' . urlencode($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'][0] ?? Config::get('uploadPath')))),\n\t\t\t\t\t'paramName' => 'files',\n\t\t\t\t\t'maxFilesize' => $intMaxSize,\n\t\t\t\t\t'acceptedFiles' => $strAccepted,\n\t\t\t\t\t'params' => array(\n\t\t\t\t\t\t'FORM_SUBMIT' => 'tl_upload',\n\t\t\t\t\t\t'action' => 'fileupload',\n\t\t\t\t\t),\n\t\t\t\t)) . ')</script>'\n\t\t\t;\n\t\t}\n\n\t\t$return .= '<script>'\n\t\t\t. 'Backend.enableFileTreeDragAndDrop($(\"tl_listing\").getChildren(\".tl_file_manager\")[0], ' . json_encode(array(\n\t\t\t\t'url' => html_entity_decode($this->addToUrl('act=cut&mode=2&pid=' . urlencode($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'][0] ?? Config::get('uploadPath')))),\n\t\t\t)) . ')</script>'\n\t\t;\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Automatically switch to showAll\n\t *\n\t * @return string\n\t */\n\tpublic function show()\n\t{\n\t\treturn $this->showAll();\n\t}\n\n\t/**\n\t * Create a new folder\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function create()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not creatable.');\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\t\t$strFolder = Input::get('pid', true);\n\n\t\tif (!$strFolder || !file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Empty clipboard\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t$arrClipboard[$this->strTable] = array();\n\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\n\t\t$this->Files->mkdir($strFolder . '/__new__');\n\t\t$this->redirect(html_entity_decode($this->switchToEdit($strFolder . '/__new__')));\n\t}\n\n\t/**\n\t * Move an existing file or folder\n\t *\n\t * @param string $source\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function cut($source=null)\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notSortable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not sortable.');\n\t\t}\n\n\t\t$strFolder = Input::get('pid', true);\n\t\t$blnDoNotRedirect = ($source !== null);\n\n\t\tif ($source === null)\n\t\t{\n\t\t\t$source = $this->intId;\n\t\t}\n\n\t\t$this->isValid($source);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $source) || !$this->isMounted($source))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $source . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\tif (!file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\t// Avoid a circular reference\n\t\tif (preg_match('/^' . preg_quote($source, '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Attempt to move the folder \"' . $source . '\" to \"' . $strFolder . '\" (circular reference).');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Empty clipboard\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t$arrClipboard[$this->strTable] = array();\n\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\n\t\t$this->import(Files::class, 'Files');\n\n\t\t// Calculate the destination path\n\t\t$destination = str_replace(\\dirname($source), $strFolder, $source);\n\n\t\t// Do not move if the target exists and would be overriden (not possible for folders anyway)\n\t\tif (file_exists($this->strRootDir . '/' . $destination))\n\t\t{\n\t\t\tMessage::addError(sprintf($GLOBALS['TL_LANG']['ERR']['filetarget'], basename($source), \\dirname($destination)));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->Files->rename($source, $destination);\n\n\t\t\t// Update the database AFTER the file has been moved\n\t\t\tif ($this->blnIsDbAssisted)\n\t\t\t{\n\t\t\t\t$syncSource = Dbafs::shouldBeSynchronized($source);\n\t\t\t\t$syncTarget = Dbafs::shouldBeSynchronized($destination);\n\n\t\t\t\tif ($syncSource && $syncTarget)\n\t\t\t\t{\n\t\t\t\t\tDbafs::moveResource($source, $destination);\n\t\t\t\t}\n\t\t\t\telseif ($syncSource)\n\t\t\t\t{\n\t\t\t\t\tDbafs::deleteResource($source);\n\t\t\t\t}\n\t\t\t\telseif ($syncTarget)\n\t\t\t\t{\n\t\t\t\t\tDbafs::addResource($destination);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the oncut_callback\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['oncut_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['oncut_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($source, $destination, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$callback($source, $destination, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add a log entry\n\t\t\t$this->log('File or folder \"' . $source . '\" has been moved to \"' . $destination . '\"', __METHOD__, TL_FILES);\n\t\t}\n\n\t\t// Redirect\n\t\tif (!$blnDoNotRedirect)\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\t}\n\n\t/**\n\t * Move all selected files and folders\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function cutAll()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notSortable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not sortable.');\n\t\t}\n\n\t\t// PID is mandatory\n\t\tif (!Input::get('pid', true))\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\tif (isset($arrClipboard[$this->strTable]) && \\is_array($arrClipboard[$this->strTable]['id']))\n\t\t{\n\t\t\tforeach ($arrClipboard[$this->strTable]['id'] as $id)\n\t\t\t{\n\t\t\t\t$this->cut($id); // do not urldecode() here (see #6840)\n\t\t\t}\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Recursively duplicate files and folders\n\t *\n\t * @param string $source\n\t * @param string $destination\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function copy($source=null, $destination=null)\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notCopyable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not copyable.');\n\t\t}\n\n\t\t$strFolder = Input::get('pid', true);\n\t\t$blnDoNotRedirect = ($source !== null);\n\n\t\tif ($source === null)\n\t\t{\n\t\t\t$source = $this->intId;\n\t\t}\n\n\t\tif ($destination === null)\n\t\t{\n\t\t\t$destination = str_replace(\\dirname($source), $strFolder, $source);\n\t\t}\n\n\t\t$this->isValid($source);\n\t\t$this->isValid($destination);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $source) || !$this->isMounted($source))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $source . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\tif (!file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\t// Avoid a circular reference\n\t\tif (preg_match('/^' . preg_quote($source, '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Attempt to copy the folder \"' . $source . '\" to \"' . $strFolder . '\" (circular reference).');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Empty clipboard\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t$arrClipboard[$this->strTable] = array();\n\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\n\t\t$this->import(Files::class, 'Files');\n\n\t\t// Copy folders\n\t\tif (is_dir($this->strRootDir . '/' . $source))\n\t\t{\n\t\t\t$count = 1;\n\t\t\t$new = $destination;\n\n\t\t\t// Add a suffix if the folder exists\n\t\t\twhile (is_dir($this->strRootDir . '/' . $new) && $count < 12)\n\t\t\t{\n\t\t\t\t$new = $destination . '_' . $count++;\n\t\t\t}\n\n\t\t\t$destination = $new;\n\t\t\t$this->Files->rcopy($source, $destination);\n\t\t}\n\n\t\t// Copy a file\n\t\telse\n\t\t{\n\t\t\t$count = 1;\n\t\t\t$new = $destination;\n\t\t\t$ext = strtolower(substr($destination, strrpos($destination, '.') + 1));\n\n\t\t\t// Add a suffix if the file exists\n\t\t\twhile (file_exists($this->strRootDir . '/' . $new) && $count < 12)\n\t\t\t{\n\t\t\t\t$new = str_replace('.' . $ext, '_' . $count++ . '.' . $ext, $destination);\n\t\t\t}\n\n\t\t\t$destination = $new;\n\t\t\t$this->Files->copy($source, $destination);\n\t\t}\n\n\t\t// Update the database AFTER the file has been copied\n\t\tif ($this->blnIsDbAssisted)\n\t\t{\n\t\t\t$syncSource = Dbafs::shouldBeSynchronized($source);\n\t\t\t$syncTarget = Dbafs::shouldBeSynchronized($destination);\n\n\t\t\tif ($syncSource && $syncTarget)\n\t\t\t{\n\t\t\t\tDbafs::copyResource($source, $destination);\n\t\t\t}\n\t\t\telseif ($syncTarget)\n\t\t\t{\n\t\t\t\tDbafs::addResource($destination);\n\t\t\t}\n\t\t}\n\n\t\t// Call the oncopy_callback\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['oncopy_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['oncopy_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($source, $destination, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$callback($source, $destination, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add a log entry\n\t\t$this->log('File or folder \"' . $source . '\" has been copied to \"' . $destination . '\"', __METHOD__, TL_FILES);\n\n\t\t// Redirect\n\t\tif (!$blnDoNotRedirect)\n\t\t{\n\t\t\t// Switch to edit mode\n\t\t\tif (is_file($this->strRootDir . '/' . $destination))\n\t\t\t{\n\t\t\t\t$this->redirect($this->switchToEdit($destination));\n\t\t\t}\n\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\t}\n\n\t/**\n\t * Move all selected files and folders\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function copyAll()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notCopyable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not copyable.');\n\t\t}\n\n\t\t// PID is mandatory\n\t\tif (!Input::get('pid', true))\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\tif (isset($arrClipboard[$this->strTable]) && \\is_array($arrClipboard[$this->strTable]['id']))\n\t\t{\n\t\t\tforeach ($arrClipboard[$this->strTable]['id'] as $id)\n\t\t\t{\n\t\t\t\t$this->copy($id); // do not urldecode() here (see #6840)\n\t\t\t}\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Recursively delete files and folders\n\t *\n\t * @param string $source\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function delete($source=null)\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notDeletable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not deletable.');\n\t\t}\n\n\t\t$blnDoNotRedirect = ($source !== null);\n\n\t\tif ($source === null)\n\t\t{\n\t\t\t$source = $this->intId;\n\t\t}\n\n\t\t$this->isValid($source);\n\n\t\t// Delete the file or folder\n\t\tif (!file_exists($this->strRootDir . '/' . $source) || !$this->isMounted($source))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $source . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\t// Call the ondelete_callback\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['ondelete_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['ondelete_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($source, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$callback($source, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\n\t\t// Delete the folder or file\n\t\tif (is_dir($this->strRootDir . '/' . $source))\n\t\t{\n\t\t\t$this->Files->rrdir($source);\n\n\t\t\t$strWebDir = StringUtil::stripRootDir(System::getContainer()->getParameter('contao.web_dir'));\n\n\t\t\t// Also delete the symlink (see #710)\n\t\t\tif (is_link($this->strRootDir . '/' . $strWebDir . '/' . $source))\n\t\t\t{\n\t\t\t\t$this->Files->delete($strWebDir . '/' . $source);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->Files->delete($source);\n\t\t}\n\n\t\t// Update the database AFTER the resource has been deleted\n\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($source))\n\t\t{\n\t\t\tDbafs::deleteResource($source);\n\t\t}\n\n\t\t// Add a log entry\n\t\t$this->log('File or folder \"' . $source . '\" has been deleted', __METHOD__, TL_FILES);\n\n\t\t// Redirect\n\t\tif (!$blnDoNotRedirect)\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\t}\n\n\t/**\n\t * Delete all files and folders that are currently shown\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function deleteAll()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notDeletable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not deletable.');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$session = $objSession->all();\n\t\t$ids = $session['CURRENT']['IDS'];\n\n\t\tif (!empty($ids) && \\is_array($ids))\n\t\t{\n\t\t\t$ids = $this->eliminateNestedPaths($ids); // see #941\n\n\t\t\tforeach ($ids as $id)\n\t\t\t{\n\t\t\t\t$this->delete($id); // do not urldecode() here (see #6840)\n\t\t\t}\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Automatically switch to showAll\n\t *\n\t * @return string\n\t */\n\tpublic function undo()\n\t{\n\t\treturn $this->showAll();\n\t}\n\n\t/**\n\t * Move one or more local files to the server\n\t *\n\t * @param boolean $blnIsAjax\n\t *\n\t * @return string\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function move($blnIsAjax=false)\n\t{\n\t\t$strFolder = Input::get('pid', true);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\tif (!preg_match('/^' . preg_quote(Config::get('uploadPath'), '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not within the files directory.');\n\t\t}\n\n\t\t// Empty clipboard\n\t\tif (!$blnIsAjax)\n\t\t{\n\t\t\t/** @var Session $objSession */\n\t\t\t$objSession = System::getContainer()->get('session');\n\n\t\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t\t$arrClipboard[$this->strTable] = array();\n\t\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\t\t}\n\n\t\t// Instantiate the uploader\n\t\t$this->import(BackendUser::class, 'User');\n\t\t$class = $this->User->uploader;\n\n\t\t// See #4086\n\t\tif (!class_exists($class))\n\t\t{\n\t\t\t$class = 'DropZone';\n\t\t}\n\n\t\t/** @var FileUpload $objUploader */\n\t\t$objUploader = new $class();\n\n\t\t// Process the uploaded files\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_upload')\n\t\t{\n\t\t\t// Generate the DB entries\n\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($strFolder))\n\t\t\t{\n\t\t\t\t// Upload the files\n\t\t\t\t$arrUploaded = $objUploader->uploadTo($strFolder);\n\n\t\t\t\tif (empty($arrUploaded) && !$objUploader->hasError())\n\t\t\t\t{\n\t\t\t\t\tif ($blnIsAjax)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new ResponseException(new Response($GLOBALS['TL_LANG']['ERR']['emptyUpload'], 400));\n\t\t\t\t\t}\n\n\t\t\t\t\tMessage::addError($GLOBALS['TL_LANG']['ERR']['emptyUpload']);\n\t\t\t\t\t$this->reload();\n\t\t\t\t}\n\n\t\t\t\tforeach ($arrUploaded as $strFile)\n\t\t\t\t{\n\t\t\t\t\tDbafs::addResource($strFile);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Not DB-assisted, so just upload the file\n\t\t\t\t$arrUploaded = $objUploader->uploadTo($strFolder);\n\t\t\t}\n\n\t\t\t// HOOK: post upload callback\n\t\t\tif (isset($GLOBALS['TL_HOOKS']['postUpload']) && \\is_array($GLOBALS['TL_HOOKS']['postUpload']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_HOOKS']['postUpload'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($arrUploaded);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$callback($arrUploaded);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the hash of the target folder\n\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($strFolder))\n\t\t\t{\n\t\t\t\tDbafs::updateFolderHashes($strFolder);\n\t\t\t}\n\n\t\t\t// Redirect or reload\n\t\t\tif (!$objUploader->hasError())\n\t\t\t{\n\t\t\t\tif ($blnIsAjax)\n\t\t\t\t{\n\t\t\t\t\t/** @var Session $objSession */\n\t\t\t\t\t$objSession = System::getContainer()->get('session');\n\n\t\t\t\t\tif ($objSession->isStarted())\n\t\t\t\t\t{\n\t\t\t\t\t\t// Get the info messages only\n\t\t\t\t\t\t$arrMessages = $objSession->getFlashBag()->get('contao.' . TL_MODE . '.info');\n\t\t\t\t\t\tMessage::reset();\n\n\t\t\t\t\t\tif (!empty($arrMessages))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new ResponseException(new Response('<p class=\"tl_info\">' . implode('</p><p class=\"tl_info\">', $arrMessages) . '</p>', 201));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new ResponseException(new Response('', 201));\n\t\t\t\t}\n\n\t\t\t\t// Do not purge the html folder (see #2898)\n\t\t\t\tif (isset($_POST['uploadNback']) && !$objUploader->hasResized())\n\t\t\t\t{\n\t\t\t\t\tMessage::reset();\n\t\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t\t}\n\n\t\t\t\t$this->reload();\n\t\t\t}\n\t\t\telseif ($blnIsAjax)\n\t\t\t{\n\t\t\t\tthrow new ResponseException(new Response(Message::generateUnwrapped(TL_MODE, true), 500));\n\t\t\t}\n\t\t}\n\n\t\t// Submit buttons\n\t\t$arrButtons = array();\n\t\t$arrButtons['upload'] = '<button type=\"submit\" name=\"upload\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG'][$this->strTable]['move'][0] . '</button>';\n\t\t$arrButtons['uploadNback'] = '<button type=\"submit\" name=\"uploadNback\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG'][$this->strTable]['uploadNback'] . '</button>';\n\n\t\t// Call the buttons_callback (see #4691)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\\count($arrButtons) < 3)\n\t\t{\n\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t{\n\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t}\n\n\t\t\t$strButtons .= '</ul></div>';\n\t\t}\n\n\t\t// Display the upload form\n\t\treturn Message::generate() . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<form id=\"' . $this->strTable . '\" class=\"tl_form tl_edit_form\" method=\"post\"' . (!empty($this->onsubmit) ? ' onsubmit=\"' . implode(' ', $this->onsubmit) . '\"' : '') . ' enctype=\"multipart/form-data\">\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"tl_upload\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">\n<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"' . Config::get('maxFileSize') . '\">\n<div class=\"tl_tbox\">\n<div class=\"widget\">\n  <h3>' . $GLOBALS['TL_LANG'][$this->strTable]['fileupload'][0] . '</h3>' . $objUploader->generateMarkup() . '\n</div>\n</div>\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\t}\n\n\t/**\n\t * Auto-generate a form to rename a file or folder\n\t *\n\t * @return string\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function edit()\n\t{\n\t\t$return = '';\n\t\t$this->noReload = false;\n\t\t$this->isValid($this->intId);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $this->intId) || !$this->isMounted($this->intId))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $this->intId . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\t$objModel = null;\n\t\t$objVersions = null;\n\n\t\t// Add the versioning routines\n\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($this->intId))\n\t\t{\n\t\t\tif (stripos($this->intId, '__new__') === false)\n\t\t\t{\n\t\t\t\t$objModel = FilesModel::findByPath($this->intId);\n\n\t\t\t\tif ($objModel === null)\n\t\t\t\t{\n\t\t\t\t\t$objModel = Dbafs::addResource($this->intId);\n\t\t\t\t}\n\n\t\t\t\t$this->objActiveRecord = $objModel;\n\n\t\t\t\t$this->blnCreateNewVersion = false;\n\n\t\t\t\t/** @var FilesModel $objModel */\n\t\t\t\t$objVersions = new Versions($this->strTable, $objModel->id);\n\n\t\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'])\n\t\t\t\t{\n\t\t\t\t\t// Compare versions\n\t\t\t\t\tif (Input::get('versions'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$objVersions->compare();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Restore a version\n\t\t\t\t\tif (Input::post('FORM_SUBMIT') == 'tl_version' && Input::post('version'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$objVersions->restore(Input::post('version'));\n\t\t\t\t\t\t$this->reload();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$objVersions->initialize();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Unset the database fields\n\t\t\t$GLOBALS['TL_DCA'][$this->strTable]['fields'] = array_intersect_key($GLOBALS['TL_DCA'][$this->strTable]['fields'], array('name' => true, 'protected' => true, 'syncExclude' => true));\n\t\t}\n\n\t\t// Build an array from boxes and rows (do not show excluded fields)\n\t\t$this->strPalette = $this->getPalette();\n\t\t$boxes = StringUtil::trimsplit(';', $this->strPalette);\n\n\t\tif (!empty($boxes))\n\t\t{\n\t\t\t// Get fields\n\t\t\tforeach ($boxes as $k=>$v)\n\t\t\t{\n\t\t\t\t$boxes[$k] = StringUtil::trimsplit(',', $v);\n\n\t\t\t\tforeach ($boxes[$k] as $kk=>$vv)\n\t\t\t\t{\n\t\t\t\t\tif (!isset($GLOBALS['TL_DCA'][$this->strTable]['fields'][$vv]) || $GLOBALS['TL_DCA'][$this->strTable]['fields'][$vv]['exclude'])\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($boxes[$k][$kk]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Unset a box if it does not contain any fields\n\t\t\t\tif (empty($boxes[$k]))\n\t\t\t\t{\n\t\t\t\t\tunset($boxes[$k]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Render boxes\n\t\t\t$class = 'tl_tbox';\n\n\t\t\tforeach ($boxes as $v)\n\t\t\t{\n\t\t\t\t$return .= '\n<div class=\"' . $class . ' cf\">';\n\n\t\t\t\t// Build rows of the current box\n\t\t\t\tforeach ($v as $vv)\n\t\t\t\t{\n\t\t\t\t\t$this->strField = $vv;\n\t\t\t\t\t$this->strInputName = $vv;\n\n\t\t\t\t\t// Load the current value\n\t\t\t\t\tif ($vv == 'name')\n\t\t\t\t\t{\n\t\t\t\t\t\t$objFile = is_dir($this->strRootDir . '/' . $this->intId) ? new Folder($this->intId) : new File($this->intId);\n\n\t\t\t\t\t\t$this->strPath = StringUtil::stripRootDir($objFile->dirname);\n\t\t\t\t\t\t$this->strExtension = $objFile->origext ? '.' . $objFile->origext : '';\n\t\t\t\t\t\t$this->varValue = $objFile->filename;\n\n\t\t\t\t\t\t// Fix hidden Unix system files\n\t\t\t\t\t\tif (strncmp($this->varValue, '.', 1) === 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->strExtension = '';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Clear the current value if it is a new folder\n\t\t\t\t\t\tif ($this->varValue == '__new__' && !\\in_array(Input::post('FORM_SUBMIT'), array('tl_files', 'tl_templates')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->varValue = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->varValue = ($objModel !== null) ? $objModel->$vv : null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Call load_callback\n\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback'] as $callback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t$this->varValue = $this->{$callback[0]}->{$callback[1]}($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->varValue = $callback($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Build row\n\t\t\t\t\t$return .= $this->row();\n\t\t\t\t}\n\n\t\t\t\t$class = 'tl_box';\n\n\t\t\t\t$return .= '\n  <input type=\"hidden\" name=\"FORM_FIELDS[]\" value=\"' . StringUtil::specialchars($this->strPalette) . '\">\n</div>';\n\t\t\t}\n\t\t}\n\n\t\t// Versions overview\n\t\tif ($objVersions && $this->blnIsDbAssisted && $GLOBALS['TL_DCA'][$this->strTable]['config']['enableVersioning'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'] && Dbafs::shouldBeSynchronized($this->intId))\n\t\t{\n\t\t\t$version = $objVersions->renderDropdown();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$version = '';\n\t\t}\n\n\t\t// Submit buttons\n\t\t$arrButtons = array();\n\t\t$arrButtons['save'] = '<button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['save'] . '</button>';\n\n\t\tif (!Input::get('nb'))\n\t\t{\n\t\t\t$arrButtons['saveNclose'] = '<button type=\"submit\" name=\"saveNclose\" id=\"saveNclose\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['saveNclose'] . '</button>';\n\t\t}\n\n\t\t// Call the buttons_callback (see #4691)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\\count($arrButtons) < 3)\n\t\t{\n\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t{\n\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t}\n\n\t\t\t$strButtons .= '</ul></div>';\n\t\t}\n\n\t\t// Add the buttons and end the form\n\t\t$return .= '\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\n\t\t// Begin the form (-> DO NOT CHANGE THIS ORDER -> this way the onsubmit attribute of the form can be changed by a field)\n\t\t$return = $version . Message::generate() . ($this->noReload ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['general'] . '</p>' : '') . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<form id=\"' . $this->strTable . '\" class=\"tl_form tl_edit_form\" method=\"post\"' . (!empty($this->onsubmit) ? ' onsubmit=\"' . implode(' ', $this->onsubmit) . '\"' : '') . '>\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"' . $this->strTable . '\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' . $return;\n\n\t\t// Always create a new version if something has changed, even if the form has errors (see #237)\n\t\tif ($this->noReload && $this->blnCreateNewVersion && $objModel !== null && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t{\n\t\t\t$objVersions->create();\n\t\t}\n\n\t\t// Reload the page to prevent _POST variables from being sent twice\n\t\tif (!$this->noReload && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t{\n\t\t\t// Trigger the onsubmit_callback\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$callback($this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the current timestamp before creating a new version\n\t\t\tif ($this->blnIsDbAssisted && $objModel !== null)\n\t\t\t{\n\t\t\t\t$this->Database->prepare(\"UPDATE \" . $this->strTable . \" SET tstamp=? WHERE id=?\")\n\t\t\t\t\t\t\t   ->execute(time(), $objModel->id);\n\t\t\t}\n\n\t\t\t// Save the current version\n\t\t\tif ($this->blnCreateNewVersion && $objModel !== null)\n\t\t\t{\n\t\t\t\t$objVersions->create();\n\n\t\t\t\t// Call the onversion_callback\n\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback']))\n\t\t\t\t{\n\t\t\t\t\t@trigger_error('Using the \"onversion_callback\" has been deprecated and will no longer work in Contao 5.0. Use the \"oncreate_version_callback\" instead.', E_USER_DEPRECATED);\n\n\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback'] as $callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$callback($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Redirect\n\t\t\tif (isset($_POST['saveNclose']))\n\t\t\t{\n\t\t\t\tMessage::reset();\n\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t}\n\n\t\t\t// Reload\n\t\t\tif ($this->blnIsDbAssisted && $this->objActiveRecord !== null)\n\t\t\t{\n\t\t\t\t$this->redirect($this->addToUrl('id=' . $this->urlEncode($this->objActiveRecord->path)));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->redirect($this->addToUrl('id=' . $this->urlEncode($this->intId)));\n\t\t\t}\n\t\t}\n\n\t\t// Set the focus if there is an error\n\t\tif ($this->noReload)\n\t\t{\n\t\t\t$return .= '\n<script>\n  window.addEvent(\\'domready\\', function() {\n    Backend.vScrollTo(($(\\'' . $this->strTable . '\\').getElement(\\'label.error\\').getPosition().y - 20));\n  });\n</script>';\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Auto-generate a form to edit all records that are currently shown\n\t *\n\t * @return string\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function editAll()\n\t{\n\t\t$return = '';\n\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notEditable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not editable.');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Get current IDs from session\n\t\t$session = $objSession->all();\n\t\t$ids = $session['CURRENT']['IDS'];\n\n\t\t// Save field selection in session\n\t\tif (Input::post('FORM_SUBMIT') == $this->strTable . '_all' && Input::get('fields'))\n\t\t{\n\t\t\t$session['CURRENT'][$this->strTable] = Input::post('all_fields');\n\t\t\t$objSession->replace($session);\n\t\t}\n\n\t\t$fields = $session['CURRENT'][$this->strTable];\n\n\t\t// Add fields\n\t\tif (!empty($fields) && \\is_array($fields) && Input::get('fields'))\n\t\t{\n\t\t\t$class = 'tl_tbox';\n\n\t\t\t// Walk through each record\n\t\t\tforeach ($ids as $id)\n\t\t\t{\n\t\t\t\t$this->intId = $id;\n\t\t\t\t$this->initialId = $id;\n\t\t\t\t$this->strPalette = StringUtil::trimsplit('[;,]', $this->getPalette());\n\n\t\t\t\t$objModel = null;\n\t\t\t\t$objVersions = null;\n\n\t\t\t\t// Get the DB entry\n\t\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($id))\n\t\t\t\t{\n\t\t\t\t\t$objModel = FilesModel::findByPath($id);\n\n\t\t\t\t\tif ($objModel === null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$objModel = Dbafs::addResource($id);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->objActiveRecord = $objModel;\n\t\t\t\t\t$this->blnCreateNewVersion = false;\n\n\t\t\t\t\t/** @var FilesModel $objModel */\n\t\t\t\t\t$objVersions = new Versions($this->strTable, $objModel->id);\n\t\t\t\t\t$objVersions->initialize();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Unset the database fields\n\t\t\t\t\t$this->strPalette = array_filter($this->strPalette, static function ($val) { return $val == 'name' || $val == 'protected'; });\n\t\t\t\t}\n\n\t\t\t\t$return .= '\n<div class=\"' . $class . '\">';\n\n\t\t\t\t$class = 'tl_box';\n\t\t\t\t$formFields = array();\n\t\t\t\t$strHash = md5($id);\n\n\t\t\t\tforeach ($this->strPalette as $v)\n\t\t\t\t{\n\t\t\t\t\t// Check whether field is excluded\n\t\t\t\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['fields'][$v]['exclude'])\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!\\in_array($v, $fields))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->strField = $v;\n\t\t\t\t\t$this->strInputName = $v . '_' . $strHash;\n\t\t\t\t\t$formFields[] = $v . '_' . $strHash;\n\n\t\t\t\t\t// Load the current value\n\t\t\t\t\tif ($v == 'name')\n\t\t\t\t\t{\n\t\t\t\t\t\t$objFile = is_dir($this->strRootDir . '/' . $id) ? new Folder($id) : new File($id);\n\n\t\t\t\t\t\t$this->strPath = StringUtil::stripRootDir($objFile->dirname);\n\t\t\t\t\t\t$this->strExtension = $objFile->origext ? '.' . $objFile->origext : '';\n\t\t\t\t\t\t$this->varValue = $objFile->filename;\n\n\t\t\t\t\t\t// Fix hidden Unix system files\n\t\t\t\t\t\tif (strncmp($this->varValue, '.', 1) === 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->strExtension = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->varValue = ($objModel !== null) ? $objModel->$v : null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Call load_callback\n\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback'] as $callback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t$this->varValue = $this->{$callback[0]}->{$callback[1]}($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->varValue = $callback($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Build the current row\n\t\t\t\t\t$return .= $this->row();\n\t\t\t\t}\n\n\t\t\t\t// Close box\n\t\t\t\t$return .= '\n  <input type=\"hidden\" name=\"FORM_FIELDS_' . $strHash . '[]\" value=\"' . StringUtil::specialchars(implode(',', $formFields)) . '\">\n</div>';\n\n\t\t\t\t// Always create a new version if something has changed, even if the form has errors (see #237)\n\t\t\t\tif ($this->noReload && $this->blnCreateNewVersion && $objModel !== null && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t\t\t{\n\t\t\t\t\t$objVersions->create();\n\t\t\t\t}\n\n\t\t\t\t// Save the record\n\t\t\t\tif (!$this->noReload && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t\t\t{\n\t\t\t\t\t// Call onsubmit_callback\n\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback'] as $callback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$callback($this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the current timestamp before adding a new version\n\t\t\t\t\tif ($this->blnIsDbAssisted && $objModel !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->Database->prepare(\"UPDATE \" . $this->strTable . \" SET tstamp=? WHERE id=?\")\n\t\t\t\t\t\t\t\t\t   ->execute(time(), $objModel->id);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create a new version\n\t\t\t\t\tif ($this->blnCreateNewVersion && $objModel !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$objVersions->create();\n\n\t\t\t\t\t\t// Call the onversion_callback\n\t\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t@trigger_error('Using the \"onversion_callback\" has been deprecated and will no longer work in Contao 5.0. Use the \"oncreate_version_callback\" instead.', E_USER_DEPRECATED);\n\n\t\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback'] as $callback)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$callback($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Submit buttons\n\t\t\t$arrButtons = array();\n\t\t\t$arrButtons['save'] = '<button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['save'] . '</button>';\n\t\t\t$arrButtons['saveNclose'] = '<button type=\"submit\" name=\"saveNclose\" id=\"saveNclose\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['saveNclose'] . '</button>';\n\n\t\t\t// Call the buttons_callback (see #4691)\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\\count($arrButtons) < 3)\n\t\t\t{\n\t\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t\t{\n\t\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t\t}\n\n\t\t\t\t$strButtons .= '</ul></div>';\n\t\t\t}\n\n\t\t\t// Add the form\n\t\t\t$return = '\n<form id=\"' . $this->strTable . '\" class=\"tl_form tl_edit_form\" method=\"post\">\n<div class=\"tl_formbody_edit nogrid\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"' . $this->strTable . '\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' . ($this->noReload ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['general'] . '</p>' : '') . $return . '\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\n\t\t\t// Set the focus if there is an error\n\t\t\tif ($this->noReload)\n\t\t\t{\n\t\t\t\t$return .= '\n<script>\n  window.addEvent(\\'domready\\', function() {\n    Backend.vScrollTo(($(\\'' . $this->strTable . '\\').getElement(\\'label.error\\').getPosition().y - 20));\n  });\n</script>';\n\t\t\t}\n\n\t\t\t// Reload the page to prevent _POST variables from being sent twice\n\t\t\tif (!$this->noReload && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t\t{\n\t\t\t\tif (isset($_POST['saveNclose']))\n\t\t\t\t{\n\t\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t\t}\n\n\t\t\t\t$this->reload();\n\t\t\t}\n\t\t}\n\n\t\t// Else show a form to select the fields\n\t\telse\n\t\t{\n\t\t\t$options = '';\n\t\t\t$fields = array();\n\n\t\t\t// Add fields of the current table\n\t\t\t$fields = array_merge($fields, array_keys($GLOBALS['TL_DCA'][$this->strTable]['fields']));\n\n\t\t\t// Show all non-excluded fields\n\t\t\tforeach ($fields as $field)\n\t\t\t{\n\t\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['exclude'] && !$GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['eval']['doNotShow'] && (isset($GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['inputType']) || \\is_array($GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['input_field_callback'])))\n\t\t\t\t{\n\t\t\t\t\t$options .= '\n  <input type=\"checkbox\" name=\"all_fields[]\" id=\"all_' . $field . '\" class=\"tl_checkbox\" value=\"' . StringUtil::specialchars($field) . '\"> <label for=\"all_' . $field . '\" class=\"tl_checkbox_label\">' . (($GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['label'][0] ?: ($GLOBALS['TL_LANG']['MSC'][$field][0] ?: $field)) . ' <span style=\"color:#999;padding-left:3px\">[' . $field . ']</span>') . '</label><br>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$blnIsError = ($_POST && empty($_POST['all_fields']));\n\n\t\t\t// Return the select menu\n\t\t\t$return .= '\n<form action=\"' . ampersand(Environment::get('request')) . '&amp;fields=1\" id=\"' . $this->strTable . '_all\" class=\"tl_form tl_edit_form\" method=\"post\">\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"' . $this->strTable . '_all\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' . ($blnIsError ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['general'] . '</p>' : '') . '\n<div class=\"tl_tbox\">\n<div class=\"widget\">\n<fieldset class=\"tl_checkbox_container\">\n  <legend' . ($blnIsError ? ' class=\"error\"' : '') . '>' . $GLOBALS['TL_LANG']['MSC']['all_fields'][0] . '<span class=\"mandatory\">*</span></legend>\n  <input type=\"checkbox\" id=\"check_all\" class=\"tl_checkbox\" onclick=\"Backend.toggleCheckboxes(this)\"> <label for=\"check_all\" style=\"color:#a6a6a6\"><em>' . $GLOBALS['TL_LANG']['MSC']['selectAll'] . '</em></label><br>' . $options . '\n</fieldset>' . ($blnIsError ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['all_fields'] . '</p>' : ((Config::get('showHelp') && isset($GLOBALS['TL_LANG']['MSC']['all_fields'][1])) ? '\n<p class=\"tl_help tl_tip\">' . $GLOBALS['TL_LANG']['MSC']['all_fields'][1] . '</p>' : '')) . '\n</div>\n</div>\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  <button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['continue'] . '</button>\n</div>\n</div>\n</form>';\n\t\t}\n\n\t\t// Return\n\t\treturn '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>' . $return;\n\t}\n\n\t/**\n\t * Load the source editor\n\t *\n\t * @return string\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function source()\n\t{\n\t\t$this->isValid($this->intId);\n\n\t\tif (is_dir($this->strRootDir . '/' . $this->intId))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Folder \"' . $this->intId . '\" cannot be edited.');\n\t\t}\n\n\t\tif (!file_exists($this->strRootDir . '/' . $this->intId))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('File \"' . $this->intId . '\" does not exist.');\n\t\t}\n\n\t\t$objFile = new File($this->intId);\n\n\t\t// Check whether file type is editable\n\t\tif (!\\in_array($objFile->extension, StringUtil::trimsplit(',', strtolower(Config::get('editableFiles')))))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File type \"' . $objFile->extension . '\" (' . $this->intId . ') is not allowed to be edited.');\n\t\t}\n\n\t\t$objMeta = null;\n\t\t$objVersions = null;\n\n\t\t// Add the versioning routines\n\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($this->intId))\n\t\t{\n\t\t\t$objMeta = FilesModel::findByPath($objFile->value);\n\n\t\t\tif ($objMeta === null)\n\t\t\t{\n\t\t\t\t$objMeta = Dbafs::addResource($objFile->value);\n\t\t\t}\n\n\t\t\t$objVersions = new Versions($this->strTable, $objMeta->id);\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'])\n\t\t\t{\n\t\t\t\t// Compare versions\n\t\t\t\tif (Input::get('versions'))\n\t\t\t\t{\n\t\t\t\t\t$objVersions->compare();\n\t\t\t\t}\n\n\t\t\t\t// Restore a version\n\t\t\t\tif (Input::post('FORM_SUBMIT') == 'tl_version' && Input::post('version'))\n\t\t\t\t{\n\t\t\t\t\t$objVersions->restore(Input::post('version'));\n\n\t\t\t\t\t// Purge the script cache (see #7005)\n\t\t\t\t\tif ($objFile->extension == 'css' || $objFile->extension == 'scss' || $objFile->extension == 'less')\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t\t\t\t$this->Automator->purgeScriptCache();\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->reload();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$objVersions->initialize();\n\t\t}\n\n\t\t$strContent = $objFile->getContent();\n\n\t\tif ($objFile->extension == 'svgz')\n\t\t{\n\t\t\t$strContent = gzdecode($strContent);\n\t\t}\n\n\t\t// Process the request\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_files')\n\t\t{\n\t\t\t$strSource = System::getContainer()->get('request_stack')->getCurrentRequest()->request->get('source');\n\n\t\t\t// Save the file\n\t\t\tif (md5($strContent) != md5($strSource))\n\t\t\t{\n\t\t\t\tif ($objFile->extension == 'svgz')\n\t\t\t\t{\n\t\t\t\t\t$strSource = gzencode($strSource);\n\t\t\t\t}\n\n\t\t\t\t// Write the file\n\t\t\t\t$objFile->write($strSource);\n\t\t\t\t$objFile->close();\n\n\t\t\t\t// Update the database\n\t\t\t\tif ($this->blnIsDbAssisted && $objMeta !== null)\n\t\t\t\t{\n\t\t\t\t\t/** @var FilesModel $objMeta */\n\t\t\t\t\t$objMeta->hash = $objFile->hash;\n\t\t\t\t\t$objMeta->save();\n\n\t\t\t\t\t$objVersions->create();\n\t\t\t\t}\n\n\t\t\t\t// Purge the script cache (see #7005)\n\t\t\t\tif (\\in_array($objFile->extension, array('css', 'scss', 'less', 'js')))\n\t\t\t\t{\n\t\t\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t\t\t$this->Automator->purgeScriptCache();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isset($_POST['saveNclose']))\n\t\t\t{\n\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t}\n\n\t\t\t$this->reload();\n\t\t}\n\n\t\t$codeEditor = '';\n\n\t\t// Prepare the code editor\n\t\tif (Config::get('useCE'))\n\t\t{\n\t\t\t$objTemplate = new BackendTemplate('be_ace');\n\t\t\t$objTemplate->selector = 'ctrl_source';\n\t\t\t$objTemplate->type = $objFile->extension;\n\n\t\t\t$codeEditor = $objTemplate->parse();\n\t\t}\n\n\t\t// Versions overview\n\t\tif ($this->blnIsDbAssisted && $objVersions !== null && $GLOBALS['TL_DCA'][$this->strTable]['config']['enableVersioning'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'])\n\t\t{\n\t\t\t$version = $objVersions->renderDropdown();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$version = '';\n\t\t}\n\n\t\t// Submit buttons\n\t\t$arrButtons = array();\n\t\t$arrButtons['save'] = '<button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['save'] . '</button>';\n\t\t$arrButtons['saveNclose'] = '<button type=\"submit\" name=\"saveNclose\" id=\"saveNclose\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['saveNclose'] . '</button>';\n\n\t\t// Call the buttons_callback (see #4691)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\\count($arrButtons) < 3)\n\t\t{\n\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t{\n\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t}\n\n\t\t\t$strButtons .= '</ul></div>';\n\t\t}\n\n\t\t// Add the form\n\t\treturn $version . Message::generate() . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<form id=\"tl_files\" class=\"tl_form tl_edit_form\" method=\"post\">\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"tl_files\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">\n<div class=\"tl_tbox\">\n  <div class=\"widget\">\n    <h3><label for=\"ctrl_source\">' . $GLOBALS['TL_LANG']['tl_files']['editor'][0] . '</label></h3>\n    <textarea name=\"source\" id=\"ctrl_source\" class=\"tl_textarea monospace\" rows=\"12\" cols=\"80\" style=\"height:400px\" onfocus=\"Backend.getScrollOffset()\">' . \"\\n\" . htmlspecialchars($strContent) . '</textarea>' . ((Config::get('showHelp') && isset($GLOBALS['TL_LANG']['tl_files']['editor'][1])) ? '\n    <p class=\"tl_help tl_tip\">' . $GLOBALS['TL_LANG']['tl_files']['editor'][1] . '</p>' : '') . '\n  </div>\n</div>\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>' . \"\\n\\n\" . $codeEditor;\n\t}\n\n\t/**\n\t * Protect a folder\n\t *\n\t * @throws InternalServerErrorException\n\t *\n\t * @deprecated Deprecated since Contao 4.7 to be removed in 5.0.\n\t *             Use Contao\\Folder::protect() and Contao\\Folder::unprotect() instead.\n\t */\n\tpublic function protect()\n\t{\n\t\t@trigger_error('Using DC_Folder::protect() has been deprecated and will no longer work in Contao 5.0. Use Contao\\Folder::protect() and Contao\\Folder::unprotect() instead.', E_USER_DEPRECATED);\n\n\t\tif (!is_dir($this->strRootDir . '/' . $this->intId))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Resource \"' . $this->intId . '\" is not a directory.');\n\t\t}\n\n\t\t// Protect or unprotect the folder\n\t\tif (is_file($this->strRootDir . '/' . $this->intId . '/.public'))\n\t\t{\n\t\t\t$objFolder = new Folder($this->intId);\n\t\t\t$objFolder->protect();\n\n\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t$this->Automator->generateSymlinks();\n\n\t\t\t$this->log('Folder \"' . $this->intId . '\" has been protected', __METHOD__, TL_FILES);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$objFolder = new Folder($this->intId);\n\t\t\t$objFolder->unprotect();\n\n\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t$this->Automator->generateSymlinks();\n\n\t\t\t$this->log('The protection from folder \"' . $this->intId . '\" has been removed', __METHOD__, TL_FILES);\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Save the current value\n\t *\n\t * @param mixed $varValue\n\t *\n\t * @throws \\Exception\n\t */\n\tprotected function save($varValue)\n\t{\n\t\tif (Input::post('FORM_SUBMIT') != $this->strTable)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$arrData = $GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField];\n\n\t\t// File names\n\t\tif ($this->strField == 'name')\n\t\t{\n\t\t\tif ($this->varValue === $varValue || !file_exists($this->strRootDir . '/' . $this->strPath . '/' . $this->varValue . $this->strExtension) || !$this->isMounted($this->strPath . '/' . $this->varValue . $this->strExtension))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->import(Files::class, 'Files');\n\n\t\t\t// Trigger the save_callback\n\t\t\tif (\\is_array($arrData['save_callback']))\n\t\t\t{\n\t\t\t\tforeach ($arrData['save_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$varValue = $this->{$callback[0]}->{$callback[1]}($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$varValue = $callback($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The target exists\n\t\t\tif (strcasecmp($this->strPath . '/' . $this->varValue . $this->strExtension, $this->strPath . '/' . $varValue . $this->strExtension) !== 0 && file_exists($this->strRootDir . '/' . $this->strPath . '/' . $varValue . $this->strExtension))\n\t\t\t{\n\t\t\t\tthrow new \\Exception(sprintf($GLOBALS['TL_LANG']['ERR']['fileExists'], $varValue));\n\t\t\t}\n\n\t\t\t$arrImageTypes = StringUtil::trimsplit(',', strtolower(Config::get('validImageTypes')));\n\n\t\t\t// Remove potentially existing thumbnails (see #6641)\n\t\t\tif (\\in_array(substr($this->strExtension, 1), $arrImageTypes))\n\t\t\t{\n\t\t\t\tforeach (glob(System::getContainer()->getParameter('contao.image.target_dir') . '/*/' . $this->varValue . '-*' . $this->strExtension) as $strThumbnail)\n\t\t\t\t{\n\t\t\t\t\t$this->Files->delete(StringUtil::stripRootDir($strThumbnail));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Rename the file\n\t\t\t$this->Files->rename($this->strPath . '/' . $this->varValue . $this->strExtension, $this->strPath . '/' . $varValue . $this->strExtension);\n\n\t\t\t// New folders\n\t\t\tif (stripos($this->intId, '__new__') !== false)\n\t\t\t{\n\t\t\t\t// Update the database\n\t\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($this->strPath . '/' . $varValue . $this->strExtension))\n\t\t\t\t{\n\t\t\t\t\t$this->objActiveRecord = Dbafs::addResource($this->strPath . '/' . $varValue . $this->strExtension);\n\t\t\t\t}\n\n\t\t\t\t$this->log('Folder \"' . $this->strPath . '/' . $varValue . $this->strExtension . '\" has been created', __METHOD__, TL_FILES);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Update the database\n\t\t\t\tif ($this->blnIsDbAssisted)\n\t\t\t\t{\n\t\t\t\t\t$syncSource = Dbafs::shouldBeSynchronized($this->strPath . '/' . $this->varValue . $this->strExtension);\n\t\t\t\t\t$syncTarget = Dbafs::shouldBeSynchronized($this->strPath . '/' . $varValue . $this->strExtension);\n\n\t\t\t\t\tif ($syncSource && $syncTarget)\n\t\t\t\t\t{\n\t\t\t\t\t\tDbafs::moveResource($this->strPath . '/' . $this->varValue . $this->strExtension, $this->strPath . '/' . $varValue . $this->strExtension);\n\t\t\t\t\t}\n\t\t\t\t\telseif ($syncSource)\n\t\t\t\t\t{\n\t\t\t\t\t\tDbafs::deleteResource($this->strPath . '/' . $this->varValue . $this->strExtension);\n\t\t\t\t\t}\n\t\t\t\t\telseif ($syncTarget)\n\t\t\t\t\t{\n\t\t\t\t\t\tDbafs::addResource($this->strPath . '/' . $varValue . $this->strExtension);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->log('File or folder \"' . $this->strPath . '/' . $this->varValue . $this->strExtension . '\" has been renamed to \"' . $this->strPath . '/' . $varValue . $this->strExtension . '\"', __METHOD__, TL_FILES);\n\t\t\t}\n\n\t\t\t$strWebDir = StringUtil::stripRootDir(System::getContainer()->getParameter('contao.web_dir'));\n\n\t\t\t// Update the symlinks\n\t\t\tif (is_link($this->strRootDir . '/' . $strWebDir . '/' . $this->strPath . '/' . $this->varValue . $this->strExtension))\n\t\t\t{\n\t\t\t\t$this->Files->delete($strWebDir . '/' . $this->strPath . '/' . $this->varValue . $this->strExtension);\n\t\t\t\tSymlinkUtil::symlink($this->strPath . '/' . $varValue . $this->strExtension, $strWebDir . '/' . $this->strPath . '/' . $varValue . $this->strExtension, $this->strRootDir);\n\t\t\t}\n\n\t\t\t// Set the new value so the input field can show it\n\t\t\tif (Input::get('act') == 'editAll')\n\t\t\t{\n\t\t\t\t/** @var Session $objSession */\n\t\t\t\t$objSession = System::getContainer()->get('session');\n\n\t\t\t\t$session = $objSession->all();\n\n\t\t\t\tif (($index = array_search($this->strPath . '/' . $this->varValue . $this->strExtension, $session['CURRENT']['IDS'])) !== false)\n\t\t\t\t{\n\t\t\t\t\t$session['CURRENT']['IDS'][$index] = $this->strPath . '/' . $varValue . $this->strExtension;\n\t\t\t\t\t$objSession->replace($session);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->varValue = $varValue;\n\t\t\t$this->intId = $this->strPath . '/' . $varValue . $this->strExtension;\n\t\t}\n\t\telseif ($this->blnIsDbAssisted && $this->objActiveRecord !== null)\n\t\t{\n\t\t\t// Convert date formats into timestamps\n\t\t\tif ($varValue !== null && $varValue !== '' && \\in_array($arrData['eval']['rgxp'], array('date', 'time', 'datim')))\n\t\t\t{\n\t\t\t\t$objDate = new Date($varValue, Date::getFormatFromRgxp($arrData['eval']['rgxp']));\n\t\t\t\t$varValue = $objDate->tstamp;\n\t\t\t}\n\n\t\t\t// Make sure unique fields are unique\n\t\t\tif ((\\is_array($varValue) || (string) $varValue !== '') && $arrData['eval']['unique'] && !$this->Database->isUniqueValue($this->strTable, $this->strField, $varValue, $this->objActiveRecord->id))\n\t\t\t{\n\t\t\t\tthrow new \\Exception(sprintf($GLOBALS['TL_LANG']['ERR']['unique'], $arrData['label'][0] ?: $this->strField));\n\t\t\t}\n\n\t\t\t// Handle multi-select fields in \"override all\" mode\n\t\t\tif ($this->objActiveRecord !== null && ($arrData['inputType'] == 'checkbox' || $arrData['inputType'] == 'checkboxWizard') && $arrData['eval']['multiple'] && Input::get('act') == 'overrideAll')\n\t\t\t{\n\t\t\t\t$new = StringUtil::deserialize($varValue, true);\n\t\t\t\t$old = StringUtil::deserialize($this->objActiveRecord->{$this->strField}, true);\n\n\t\t\t\tswitch (Input::post($this->strInputName . '_update'))\n\t\t\t\t{\n\t\t\t\t\tcase 'add':\n\t\t\t\t\t\t$varValue = array_values(array_unique(array_merge($old, $new)));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'remove':\n\t\t\t\t\t\t$varValue = array_values(array_diff($old, $new));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t$varValue = $new;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (empty($varValue) || !\\is_array($varValue))\n\t\t\t\t{\n\t\t\t\t\t$varValue = '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$varValue = serialize($varValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert arrays (see #2890)\n\t\t\tif ($arrData['eval']['multiple'] && isset($arrData['eval']['csv']))\n\t\t\t{\n\t\t\t\t$varValue = implode($arrData['eval']['csv'], StringUtil::deserialize($varValue, true));\n\t\t\t}\n\n\t\t\t// Trigger the save_callback\n\t\t\tif (\\is_array($arrData['save_callback']))\n\t\t\t{\n\t\t\t\tforeach ($arrData['save_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$varValue = $this->{$callback[0]}->{$callback[1]}($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$varValue = $callback($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Save the value if there was no error\n\t\t\tif ((\\is_array($varValue) || (string) $varValue !== '' || !$arrData['eval']['doNotSaveEmpty']) && ($this->varValue != $varValue || $arrData['eval']['alwaysSave']))\n\t\t\t{\n\t\t\t\t// If the field is a fallback field, empty all other columns\n\t\t\t\tif ($varValue && $arrData['eval']['fallback'])\n\t\t\t\t{\n\t\t\t\t\t$this->Database->execute(\"UPDATE \" . $this->strTable . \" SET \" . $this->strField . \"=''\");\n\t\t\t\t}\n\n\t\t\t\t// Set the correct empty value (see #6284, #6373)\n\t\t\t\tif (!\\is_array($varValue) && (string) $varValue === '')\n\t\t\t\t{\n\t\t\t\t\t$varValue = Widget::getEmptyValueByFieldType($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['sql']);\n\t\t\t\t}\n\n\t\t\t\t$this->objActiveRecord->{$this->strField} = $varValue;\n\t\t\t\t$this->objActiveRecord->save();\n\n\t\t\t\tif (!isset($arrData['eval']['versionize']) || $arrData['eval']['versionize'] !== false)\n\t\t\t\t{\n\t\t\t\t\t$this->blnCreateNewVersion = true;\n\t\t\t\t}\n\n\t\t\t\t$this->varValue = StringUtil::deserialize($varValue);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Synchronize the file system with the database\n\t *\n\t * @return string\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function sync()\n\t{\n\t\tif (!$this->blnIsDbAssisted)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t$this->loadLanguageFile('tl_files');\n\n\t\t// Synchronize\n\t\t$strLog = Dbafs::syncFiles();\n\n\t\t// Show the results\n\t\t$arrMessages = array();\n\t\t$arrCounts   = array('Added'=>0, 'Changed'=>0, 'Unchanged'=>0, 'Moved'=>0, 'Deleted'=>0);\n\n\t\t// Read the log file\n\t\t$fh = fopen($this->strRootDir . '/' . $strLog, 'r');\n\n\t\twhile (($buffer = fgets($fh)) !== false)\n\t\t{\n\t\t\tlist($type, $file) = explode('] ', trim(substr($buffer, 1)), 2);\n\n\t\t\t// Add a message depending on the type\n\t\t\tswitch ($type)\n\t\t\t{\n\t\t\t\tcase 'Added':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_new\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncAdded'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Changed':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_info\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncChanged'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Unchanged':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_confirm hidden\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncUnchanged'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Moved':\n\t\t\t\t\tlist($source, $target) = explode(' to ', $file, 2);\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_info\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncMoved'], StringUtil::specialchars($source), StringUtil::specialchars($target)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Deleted':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_error\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncDeleted'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_error\">' . StringUtil::specialchars($buffer) . '</p>';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t++$arrCounts[$type];\n\t\t}\n\n\t\t// Close the log file\n\t\tunset($buffer);\n\t\tfclose($fh);\n\n\t\t// Confirm\n\t\tMessage::addConfirmation($GLOBALS['TL_LANG']['tl_files']['syncComplete']);\n\n\t\t$return = Message::generate() . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<div id=\"sync-results\">\n  <p class=\"left\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncResult'], System::getFormattedNumber($arrCounts['Added'], 0), System::getFormattedNumber($arrCounts['Changed'], 0), System::getFormattedNumber($arrCounts['Unchanged'], 0), System::getFormattedNumber($arrCounts['Moved'], 0), System::getFormattedNumber($arrCounts['Deleted'], 0)) . '</p>\n  <p class=\"right\"><input type=\"checkbox\" id=\"show-hidden\" class=\"tl_checkbox\" onclick=\"Backend.toggleUnchanged()\"> <label for=\"show-hidden\">' . $GLOBALS['TL_LANG']['tl_files']['syncShowUnchanged'] . '</label></p>\n</div>\n<div id=\"result-list\">';\n\n\t\t// Add the messages\n\t\tforeach ($arrMessages as $strMessage)\n\t\t{\n\t\t\t$return .= \"\\n  \" . $strMessage;\n\t\t}\n\n\t\t$return .= '\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  <a href=\"' . $this->getReferer(true) . '\" class=\"tl_submit\" style=\"display:inline-block\">' . $GLOBALS['TL_LANG']['MSC']['continue'] . '</a>\n</div>\n</div>';\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Return the name of the current palette\n\t *\n\t * @return string\n\t */\n\tpublic function getPalette()\n\t{\n\t\treturn $GLOBALS['TL_DCA'][$this->strTable]['palettes']['default'];\n\t}\n\n\t/**\n\t * Generate a particular subpart of the tree and return it as HTML string\n\t *\n\t * @param string  $strFolder\n\t * @param integer $level\n\t *\n\t * @return string\n\t */\n\tpublic function ajaxTreeView($strFolder, $level)\n\t{\n\t\tif (!Environment::get('isAjaxRequest'))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$blnClipboard = false;\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t// Check clipboard\n\t\tif (!empty($arrClipboard[$this->strTable]))\n\t\t{\n\t\t\t$blnClipboard = true;\n\t\t\t$arrClipboard = $arrClipboard[$this->strTable];\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\t\t$this->import(BackendUser::class, 'User');\n\n\t\treturn $this->generateTree($this->strRootDir . '/' . $strFolder, ($level * 20), false, $this->isProtectedPath($strFolder), ($blnClipboard ? $arrClipboard : false));\n\t}\n\n\t/**\n\t * Render the file tree and return it as HTML string\n\t *\n\t * @param string  $path\n\t * @param integer $intMargin\n\t * @param boolean $mount\n\t * @param boolean $blnProtected\n\t * @param array   $arrClipboard\n\t * @param array   $arrFound\n\t *\n\t * @return string\n\t */\n\tprotected function generateTree($path, $intMargin, $mount=false, $blnProtected=true, $arrClipboard=null, $arrFound=array())\n\t{\n\t\t/** @var AttributeBagInterface $objSessionBag */\n\t\t$objSessionBag = System::getContainer()->get('session')->getBag('contao_backend');\n\n\t\t$session = $objSessionBag->all();\n\n\t\t// Get the session data and toggle the nodes\n\t\tif (Input::get('tg'))\n\t\t{\n\t\t\t$session['filetree'][Input::get('tg')] = (isset($session['filetree'][Input::get('tg')]) && $session['filetree'][Input::get('tg')] == 1) ? 0 : 1;\n\t\t\t$objSessionBag->replace($session);\n\t\t\t$this->redirect(preg_replace('/(&(amp;)?|\\?)tg=[^& ]*/i', '', Environment::get('request')));\n\t\t}\n\n\t\t$return = '';\n\t\t$files = array();\n\t\t$folders = array();\n\t\t$intSpacing = 20;\n\t\t$level = ($intMargin / $intSpacing + 1);\n\n\t\t// Mount folder\n\t\tif ($mount)\n\t\t{\n\t\t\t$folders = array($path);\n\t\t}\n\n\t\t// Scan directory and sort the result\n\t\telse\n\t\t{\n\t\t\tforeach (scan($path) as $v)\n\t\t\t{\n\t\t\t\tif (strncmp($v, '.', 1) === 0)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (preg_match('//u', $v) !== 1)\n\t\t\t\t{\n\t\t\t\t\ttrigger_error(sprintf('Path \"%s\" contains malformed UTF-8 characters.', $path . '/' . $v), E_USER_WARNING);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (is_file($path . '/' . $v))\n\t\t\t\t{\n\t\t\t\t\t$files[] = $path . '/' . $v;\n\t\t\t\t}\n\t\t\t\telseif ($v == '__new__')\n\t\t\t\t{\n\t\t\t\t\t$this->Files->rrdir(StringUtil::stripRootDir($path) . '/' . $v);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$folders[] = $path . '/' . $v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnatcasesort($folders);\n\t\t\t$folders = array_values($folders);\n\n\t\t\tnatcasesort($files);\n\t\t\t$files = array_values($files);\n\t\t}\n\n\t\t// Folders\n\t\tfor ($f=0, $c=\\count($folders); $f<$c; $f++)\n\t\t{\n\t\t\t$currentFolder = StringUtil::stripRootDir($folders[$f]);\n\n\t\t\t// Hide unsynchronized folders in the picker (see #919)\n\t\t\tif ($this->strPickerFieldType && !Dbafs::shouldBeSynchronized($currentFolder))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$md5 = substr(md5($folders[$f]), 0, 8);\n\t\t\t$content = scan($folders[$f]);\n\t\t\t$session['filetree'][$md5] = is_numeric($session['filetree'][$md5]) ? $session['filetree'][$md5] : 0;\n\t\t\t$currentEncoded = $this->urlEncode($currentFolder);\n\t\t\t$countFiles = \\count($content);\n\n\t\t\t// Subtract files that will not be shown\n\t\t\tforeach ($content as $file)\n\t\t\t{\n\t\t\t\tif (strncmp($file, '.', 1) === 0)\n\t\t\t\t{\n\t\t\t\t\t--$countFiles;\n\t\t\t\t}\n\t\t\t\telseif (!empty($arrFound) && !\\in_array($currentFolder . '/' . $file, $arrFound) && !preg_grep('/^' . preg_quote($currentFolder . '/' . $file, '/') . '\\//', $arrFound))\n\t\t\t\t{\n\t\t\t\t\t--$countFiles;\n\t\t\t\t}\n\t\t\t\telseif (!$this->blnFiles && !$this->blnFilesOnly && !is_dir($this->strRootDir . '/' . $currentFolder . '/' . $file))\n\t\t\t\t{\n\t\t\t\t\t--$countFiles;\n\t\t\t\t}\n\t\t\t\telseif (!empty($this->arrValidFileTypes) && !is_dir($this->strRootDir . '/' . $currentFolder . '/' . $file))\n\t\t\t\t{\n\t\t\t\t\t$objFile =  new File($currentFolder . '/' . $file);\n\n\t\t\t\t\tif (!\\in_array($objFile->extension, $this->arrValidFileTypes))\n\t\t\t\t\t{\n\t\t\t\t\t\t--$countFiles;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!empty($arrFound) && $countFiles < 1 && !\\in_array($currentFolder, $arrFound))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$blnIsOpen = (!empty($arrFound) || $session['filetree'][$md5] == 1);\n\n\t\t\t// Always show selected nodes\n\t\t\tif (!$blnIsOpen && !empty($this->arrPickerValue) && \\count(preg_grep('/^' . preg_quote($this->urlEncode($currentFolder), '/') . '\\//', $this->arrPickerValue)))\n\t\t\t{\n\t\t\t\t$blnIsOpen = true;\n\t\t\t}\n\n\t\t\t$return .= \"\\n  \" . '<li data-id=\"' . htmlspecialchars($currentFolder, ENT_QUOTES) . '\" class=\"tl_folder click2edit toggle_select hover-div\"><div class=\"tl_left\" style=\"padding-left:' . ($intMargin + (($countFiles < 1) ? 20 : 0)) . 'px\">';\n\n\t\t\t// Add a toggle button if there are childs\n\t\t\tif ($countFiles > 0)\n\t\t\t{\n\t\t\t\t$img = $blnIsOpen ? 'folMinus.svg' : 'folPlus.svg';\n\t\t\t\t$alt = $blnIsOpen ? $GLOBALS['TL_LANG']['MSC']['collapseNode'] : $GLOBALS['TL_LANG']['MSC']['expandNode'];\n\t\t\t\t$return .= '<a href=\"' . $this->addToUrl('tg=' . $md5) . '\" title=\"' . StringUtil::specialchars($alt) . '\" onclick=\"Backend.getScrollOffset(); return AjaxRequest.toggleFileManager(this, \\'filetree_' . $md5 . '\\', \\'' . $currentFolder . '\\', ' . $level . ')\">' . Image::getHtml($img, '', 'style=\"margin-right:2px\"') . '</a>';\n\t\t\t}\n\n\t\t\t$protected = $blnProtected;\n\n\t\t\t// Check whether the folder is public\n\t\t\tif ($protected === true && \\in_array('.public', $content) && !is_dir(Path::join($folders[$f], '.public')))\n\t\t\t{\n\t\t\t\t$protected = false;\n\t\t\t}\n\n\t\t\t$folderImg = $protected ? 'folderCP.svg' : 'folderC.svg';\n\t\t\t$folderAlt = $protected ? $GLOBALS['TL_LANG']['MSC']['folderCP'] : $GLOBALS['TL_LANG']['MSC']['folderC'];\n\n\t\t\t// Add the current folder\n\t\t\t$strFolderNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFolder)), Config::get('characterSet'));\n\t\t\t$return .= Image::getHtml($folderImg, $folderAlt) . ' <a href=\"' . $this->addToUrl('fn=' . $currentEncoded) . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['selectNode']) . '\"><strong>' . $strFolderNameEncoded . '</strong></a></div> <div class=\"tl_right\">';\n\n\t\t\t// Paste buttons\n\t\t\tif ($arrClipboard !== false && Input::get('act') != 'select')\n\t\t\t{\n\t\t\t\t$labelPasteInto = $GLOBALS['TL_LANG'][$this->strTable]['pasteinto'] ?? $GLOBALS['TL_LANG']['DCA']['pasteinto'];\n\t\t\t\t$imagePasteInto = Image::getHtml('pasteinto.svg', sprintf($labelPasteInto[1], $currentEncoded));\n\n\t\t\t\tif (\\in_array($arrClipboard['mode'], array('copy', 'cut')) && (($arrClipboard['mode'] == 'cut' && \\dirname($arrClipboard['id']) == $currentFolder) || preg_match('#^' . preg_quote(rawurldecode($arrClipboard['id']), '#') . '(/|$)#i', $currentFolder)))\n\t\t\t\t{\n\t\t\t\t\t$return .= Image::getHtml('pasteinto_.svg');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$return .= '<a href=\"' . $this->addToUrl('act=' . $arrClipboard['mode'] . '&amp;mode=2&amp;pid=' . $currentEncoded . (!\\is_array($arrClipboard['id']) ? '&amp;id=' . $arrClipboard['id'] : '')) . '\" title=\"' . StringUtil::specialchars(sprintf($labelPasteInto[1], $currentEncoded)) . '\" onclick=\"Backend.getScrollOffset()\">' . $imagePasteInto . '</a> ';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Default buttons\n\t\t\telse\n\t\t\t{\n\t\t\t\t$uploadButton = ' <a href=\"' . $this->addToUrl('&amp;act=move&amp;mode=2&amp;pid=' . $currentEncoded) . '\" title=\"' . StringUtil::specialchars(sprintf($GLOBALS['TL_LANG']['tl_files']['uploadFF'], $currentEncoded)) . '\">' . Image::getHtml('new.svg', $GLOBALS['TL_LANG'][$this->strTable]['move'][0]) . '</a>';\n\n\t\t\t\t// Only show the upload button for mounted folders\n\t\t\t\tif (!$this->User->isAdmin && \\in_array($currentFolder, $this->User->filemounts))\n\t\t\t\t{\n\t\t\t\t\t$return .= $uploadButton;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$return .= (Input::get('act') == 'select') ? '<input type=\"checkbox\" name=\"IDS[]\" id=\"ids_' . md5($currentEncoded) . '\" class=\"tl_tree_checkbox\" value=\"' . $currentEncoded . '\">' : $this->generateButtons(array('id'=>$currentEncoded, 'fileNameEncoded'=>$strFolderNameEncoded, 'type'=>'folder'), $this->strTable);\n\t\t\t\t}\n\n\t\t\t\t// Add upload button if it is missing for backwards compatibility\n\t\t\t\tif (!isset($GLOBALS['TL_DCA'][$this->strTable]['list']['operations']['upload']) && !$GLOBALS['TL_DCA'][$this->strTable]['config']['closed'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable'] && Input::get('act') != 'select')\n\t\t\t\t{\n\t\t\t\t\t$return .= $uploadButton;\n\t\t\t\t}\n\n\t\t\t\tif ($this->strPickerFieldType)\n\t\t\t\t{\n\t\t\t\t\t$return .= $this->getPickerInputField($currentEncoded, $this->blnFilesOnly ? ' disabled' : '');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$return .= '</div><div style=\"clear:both\"></div></li>';\n\n\t\t\t// Call the next node\n\t\t\tif (!empty($content) && $blnIsOpen)\n\t\t\t{\n\t\t\t\t$return .= '<li class=\"parent\" id=\"filetree_' . $md5 . '\"><ul class=\"level_' . $level . '\">';\n\t\t\t\t$return .= $this->generateTree($folders[$f], ($intMargin + $intSpacing), false, $protected, $arrClipboard, $arrFound);\n\t\t\t\t$return .= '</ul></li>';\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->blnFiles && !$this->blnFilesOnly)\n\t\t{\n\t\t\treturn $return;\n\t\t}\n\n\t\t// Process files\n\t\tfor ($h=0, $c=\\count($files); $h<$c; $h++)\n\t\t{\n\t\t\t$thumbnail = '';\n\t\t\t$currentFile = StringUtil::stripRootDir($files[$h]);\n\n\t\t\t$objFile = new File($currentFile);\n\n\t\t\tif (!empty($this->arrValidFileTypes) && !\\in_array($objFile->extension, $this->arrValidFileTypes))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Ignore files not matching the search criteria\n\t\t\tif (!empty($arrFound) && !\\in_array($currentFile, $arrFound))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$currentEncoded = $this->urlEncode($currentFile);\n\t\t\t$return .= \"\\n  \" . '<li data-id=\"' . htmlspecialchars($currentFile, ENT_QUOTES) . '\" class=\"tl_file click2edit toggle_select hover-div\"><div class=\"tl_left\" style=\"padding-left:' . ($intMargin + $intSpacing) . 'px\">';\n\t\t\t$thumbnail .= ' <span class=\"tl_gray\">(' . $this->getReadableSize($objFile->filesize);\n\n\t\t\tif ($objFile->width && $objFile->height)\n\t\t\t{\n\t\t\t\t$thumbnail .= ', ' . $objFile->width . 'x' . $objFile->height . ' px';\n\t\t\t}\n\n\t\t\t$thumbnail .= ')</span>';\n\n\t\t\t// Generate the thumbnail\n\t\t\tif ($objFile->isImage && (!$objFile->isSvgImage || $objFile->viewHeight > 0) && Config::get('thumbnails') && \\in_array($objFile->extension, System::getContainer()->getParameter('contao.image.valid_extensions')))\n\t\t\t{\n\t\t\t\t$blnCanResize = true;\n\n\t\t\t\t// Check the maximum width and height if the GDlib is used to resize images\n\t\t\t\tif (!$objFile->isSvgImage && System::getContainer()->get('contao.image.imagine') instanceof Imagine)\n\t\t\t\t{\n\t\t\t\t\t$blnCanResize = $objFile->height <= Config::get('gdMaxImgHeight') && $objFile->width <= Config::get('gdMaxImgWidth');\n\t\t\t\t}\n\n\t\t\t\tif ($blnCanResize)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Inline the image if no preview image will be generated (see #636)\n\t\t\t\t\t\tif ($objFile->height !== null && $objFile->height <= 75 && $objFile->width !== null && $objFile->width <= 100)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$thumbnail .= '<br><img src=\"' . $objFile->dataUri . '\" width=\"' . $objFile->width . '\" height=\"' . $objFile->height . '\" alt=\"\" class=\"preview-image\">';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$thumbnail .= '<br>' . Image::getHtml(System::getContainer()->get('contao.image.image_factory')->create($this->strRootDir . '/' . rawurldecode($currentEncoded), array(100, 75, ResizeConfiguration::MODE_BOX))->getUrl($this->strRootDir), '', 'class=\"preview-image\" loading=\"lazy\"');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$importantPart = System::getContainer()->get('contao.image.image_factory')->create($this->strRootDir . '/' . rawurldecode($currentEncoded))->getImportantPart();\n\n\t\t\t\t\t\tif ($importantPart->getX() > 0 || $importantPart->getY() > 0 || $importantPart->getWidth() < 1 || $importantPart->getHeight() < 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$thumbnail .= ' ' . Image::getHtml(System::getContainer()->get('contao.image.image_factory')->create($this->strRootDir . '/' . rawurldecode($currentEncoded), (new ResizeConfiguration())->setWidth(80)->setHeight(60)->setMode(ResizeConfiguration::MODE_BOX)->setZoomLevel(100))->getUrl($this->strRootDir), '', 'class=\"preview-important\" loading=\"lazy\"');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$thumbnail .= '<br><p class=\"preview-image broken-image\">Broken image!</p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$strFileNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFile)), Config::get('characterSet'));\n\t\t\t$iconAlt = sprintf($GLOBALS['TL_LANG']['MSC']['typeOfFile'], strtoupper($objFile->extension));\n\n\t\t\t// No popup links for protected files, templates and in the popup file manager\n\t\t\tif ($blnProtected || $this->strTable == 'tl_templates' || Input::get('popup'))\n\t\t\t{\n\t\t\t\t$return .= Image::getHtml($objFile->icon, $iconAlt) . ' ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$return .= '<a href=\"' . $currentEncoded . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['view']) . '\" target=\"_blank\">' . Image::getHtml($objFile->icon, $iconAlt) . '</a> ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';\n\t\t\t}\n\n\t\t\t// Buttons\n\t\t\tif ($arrClipboard !== false && Input::get('act') != 'select')\n\t\t\t{\n\t\t\t\t$_buttons = '&nbsp;';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$_buttons = (Input::get('act') == 'select') ? '<input type=\"checkbox\" name=\"IDS[]\" id=\"ids_' . md5($currentEncoded) . '\" class=\"tl_tree_checkbox\" value=\"' . $currentEncoded . '\">' : $this->generateButtons(array('id'=>$currentEncoded, 'fileNameEncoded'=>$strFileNameEncoded, 'type'=>'file'), $this->strTable);\n\n\t\t\t\tif ($this->strPickerFieldType)\n\t\t\t\t{\n\t\t\t\t\t$_buttons .= $this->getPickerInputField($currentEncoded);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$return .= $_buttons . '</div><div style=\"clear:both\"></div></li>';\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Return a search form that allows to search results using regular expressions\n\t *\n\t * @return string\n\t */\n\tprotected function searchMenu()\n\t{\n\t\t/** @var AttributeBagInterface $objSessionBag */\n\t\t$objSessionBag = System::getContainer()->get('session')->getBag('contao_backend');\n\n\t\t$session = $objSessionBag->all();\n\n\t\t// Store search value in the current session\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_filters')\n\t\t{\n\t\t\t$strKeyword = ltrim(Input::postRaw('tl_value'), '*');\n\n\t\t\t$session['search'][$this->strTable]['value'] = $strKeyword;\n\n\t\t\t$objSessionBag->replace($session);\n\t\t}\n\n\t\t// Set the search value from the session\n\t\telseif ((string) $session['search'][$this->strTable]['value'] !== '')\n\t\t{\n\t\t\t$searchValue = $session['search'][$this->strTable]['value'];\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$this->Database->prepare(\"SELECT '' REGEXP ?\")->execute($searchValue);\n\t\t\t}\n\t\t\tcatch (DriverException $exception)\n\t\t\t{\n\t\t\t\t// Quote search string if it is not a valid regular expression\n\t\t\t\t$searchValue = preg_quote($searchValue);\n\t\t\t}\n\n\t\t\t$strPattern = \"CAST(name AS CHAR) REGEXP ?\";\n\n\t\t\tif (substr(Config::get('dbCollation'), -3) == '_ci')\n\t\t\t{\n\t\t\t\t$strPattern = \"LOWER(CAST(name AS CHAR)) REGEXP LOWER(?)\";\n\t\t\t}\n\n\t\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey']))\n\t\t\t{\n\t\t\t\tlist($t, $f) = explode('.', $GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey'], 2);\n\t\t\t\t$this->procedure[] = \"(\" . $strPattern . \" OR \" . sprintf($strPattern, \"(SELECT \" . Database::quoteIdentifier($f) . \" FROM $t WHERE $t.id=\" . $this->strTable . \".name)\") . \")\";\n\t\t\t\t$this->values[] = $searchValue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->procedure[] = $strPattern;\n\t\t\t}\n\n\t\t\t$this->values[] = $searchValue;\n\t\t}\n\n\t\t$active = isset($session['search'][$this->strTable]['value']) && (string) $session['search'][$this->strTable]['value'] !== '';\n\n\t\treturn '\n    <div class=\"tl_search tl_subpanel\">\n      <strong>' . $GLOBALS['TL_LANG']['MSC']['search'] . ':</strong>\n      <select name=\"tl_field\" class=\"tl_select' . ($active ? ' active' : '') . '\">\n        <option value=\"name\">' . ($GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['label'][0] ?: (\\is_array($GLOBALS['TL_LANG']['MSC']['name']) ? $GLOBALS['TL_LANG']['MSC']['name'][0] : $GLOBALS['TL_LANG']['MSC']['name'])) . '</option>\n      </select>\n      <span>=</span>\n      <input type=\"search\" name=\"tl_value\" class=\"tl_text' . ($active ? ' active' : '') . '\" value=\"' . StringUtil::specialchars($session['search'][$this->strTable]['value']) . '\">\n    </div>';\n\t}\n\n\t/**\n\t * Return true if the current folder is mounted\n\t *\n\t * @param string $strFolder\n\t *\n\t * @return boolean\n\t */\n\tprotected function isMounted($strFolder)\n\t{\n\t\tif (!$strFolder)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($this->arrFilemounts))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t$path = $strFolder;\n\n\t\twhile (\\is_array($this->arrFilemounts) && substr_count($path, '/') > 0)\n\t\t{\n\t\t\tif (\\in_array($path, $this->arrFilemounts))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t$path = \\dirname($path);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check a file operation\n\t *\n\t * @param string $strFile\n\t *\n\t * @return boolean\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tprotected function isValid($strFile)\n\t{\n\t\t$strFolder = Input::get('pid', true);\n\n\t\t// Check the path\n\t\tif (Validator::isInsecurePath($strFile))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Invalid file name \"' . $strFile . '\" (hacking attempt).');\n\t\t}\n\n\t\tif (Validator::isInsecurePath($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Invalid folder name \"' . $strFolder . '\" (hacking attempt).');\n\t\t}\n\n\t\t// Check for valid file types\n\t\tif (!empty($this->arrValidFileTypes) && is_file($this->strRootDir . '/' . $strFile))\n\t\t{\n\t\t\t$fileinfo = preg_replace('/.*\\.(.*)$/u', '$1', $strFile);\n\n\t\t\tif (!\\in_array(strtolower($fileinfo), $this->arrValidFileTypes))\n\t\t\t{\n\t\t\t\tthrow new AccessDeniedException('File \"' . $strFile . '\" is not an allowed file type.');\n\t\t\t}\n\t\t}\n\n\t\t// Check whether the file is within the files directory\n\t\tif (!preg_match('/^' . preg_quote(Config::get('uploadPath'), '/') . '/i', $strFile))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $strFile . '\" is not within the files directory.');\n\t\t}\n\n\t\t// Check whether the parent folder is within the files directory\n\t\tif ($strFolder && !preg_match('/^' . preg_quote(Config::get('uploadPath'), '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not within the files directory.');\n\t\t}\n\n\t\t// Do not allow file operations on root folders\n\t\tif (\\in_array(Input::get('act'), array('edit', 'paste', 'delete')))\n\t\t{\n\t\t\t$this->import(BackendUser::class, 'User');\n\n\t\t\tif (!$this->User->isAdmin && \\in_array($strFile, $this->User->filemounts))\n\t\t\t{\n\t\t\t\tthrow new AccessDeniedException('Attempt to edit, copy, move or delete the root folder \"' . $strFile . '\".');\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return an array of encrypted folder names\n\t *\n\t * @param string $strPath\n\t *\n\t * @return array\n\t */\n\tprotected function getMD5Folders($strPath)\n\t{\n\t\t$arrFiles = array();\n\n\t\tforeach (scan($this->strRootDir . '/' . $strPath) as $strFile)\n\t\t{\n\t\t\tif (!is_dir($this->strRootDir . '/' . $strPath . '/' . $strFile))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$arrFiles[substr(md5($this->strRootDir . '/' . $strPath . '/' . $strFile), 0, 8)] = 1;\n\n\t\t\t// Do not use array_merge() here (see #8105)\n\t\t\tforeach ($this->getMD5Folders($strPath . '/' . $strFile) as $k=>$v)\n\t\t\t{\n\t\t\t\t$arrFiles[$k] = $v;\n\t\t\t}\n\t\t}\n\n\t\treturn $arrFiles;\n\t}\n\n\t/**\n\t * Check if a path is protected (see #287)\n\t *\n\t * @param string $path\n\t *\n\t * @return boolean\n\t */\n\tprotected function isProtectedPath($path)\n\t{\n\t\treturn !(new Folder($path))->isUnprotected();\n\t}\n\n\tprotected function getFormFieldSuffix()\n\t{\n\t\treturn md5($this->initialId ?: $this->intId);\n\t}\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tpublic function initPicker(PickerInterface $picker)\n\t{\n\t\t$attributes = parent::initPicker($picker);\n\n\t\tif (null === $attributes)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\t$this->blnFiles = isset($attributes['files']) && $attributes['files'];\n\t\t$this->blnFilesOnly = isset($attributes['filesOnly']) && $attributes['filesOnly'];\n\n\t\tif (isset($attributes['path']))\n\t\t{\n\t\t\t$strPath = (string) $attributes['path'];\n\n\t\t\tif (Validator::isInsecurePath($strPath) || !is_dir($this->strRootDir . '/' . $strPath))\n\t\t\t{\n\t\t\t\tthrow new \\RuntimeException('Invalid path ' . $strPath);\n\t\t\t}\n\n\t\t\t$strNode = System::getContainer()->get('session')->getBag('contao_backend')->get('tl_files_node');\n\n\t\t\t// If the files node is not within the current path, remove it (see #856)\n\t\t\tif ($strNode && ($i = array_search($strNode, $this->arrFilemounts)) !== false && strncmp($strNode . '/', $strPath . '/', \\strlen($strPath) + 1) !== 0)\n\t\t\t{\n\t\t\t\tunset($this->arrFilemounts[$i], $GLOBALS['TL_DCA']['tl_files']['list']['sorting']['breadcrumb']);\n\t\t\t}\n\n\t\t\t// Allow only those roots that are allowed in root nodes\n\t\t\tif (!empty($this->arrFilemounts))\n\t\t\t{\n\t\t\t\t$blnValid = false;\n\n\t\t\t\tforeach ($this->arrFilemounts as $strFolder)\n\t\t\t\t{\n\t\t\t\t\tif (0 === strpos($strPath, $strFolder))\n\t\t\t\t\t{\n\t\t\t\t\t\t$blnValid = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$blnValid)\n\t\t\t\t{\n\t\t\t\t\t$strPath = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->arrFilemounts = array($strPath);\n\t\t}\n\n\t\tif (isset($attributes['extensions']))\n\t\t{\n\t\t\t$this->arrValidFileTypes = StringUtil::trimsplit(',', strtolower($attributes['extensions']));\n\t\t}\n\n\t\treturn $attributes;\n\t}\n}\n\nclass_alias(DC_Folder::class, 'DC_Folder');\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\nuse Contao\\CoreBundle\\Exception\\AccessDeniedException;\nuse Contao\\CoreBundle\\Exception\\InternalServerErrorException;\nuse Contao\\CoreBundle\\Exception\\ResponseException;\nuse Contao\\CoreBundle\\Picker\\PickerInterface;\nuse Contao\\CoreBundle\\Util\\SymlinkUtil;\nuse Contao\\Image\\ResizeConfiguration;\nuse Doctrine\\DBAL\\Exception\\DriverException;\nuse Imagine\\Exception\\RuntimeException;\nuse Imagine\\Gd\\Imagine;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\Session\\Session;\nuse Webmozart\\PathUtil\\Path;\n\n/**\n * Provide methods to modify the file system.\n *\n * @property string  $path\n * @property string  $extension\n * @property boolean $createNewVersion\n * @property boolean $isDbAssisted\n *\n * @author Leo Feyer <https://github.com/leofeyer>\n */\nclass DC_Folder extends DataContainer implements \\listable, \\editable\n{\n\t/**\n\t * Current path\n\t * @var string\n\t */\n\tprotected $strPath;\n\n\t/**\n\t * Current file extension\n\t * @var string\n\t */\n\tprotected $strExtension;\n\n\t/**\n\t * Root dir\n\t * @var string\n\t */\n\tprotected $strRootDir;\n\n\t/**\n\t * Initial ID of the record\n\t * @var string\n\t */\n\tprotected $initialId;\n\n\t/**\n\t * Current filemounts\n\t * @var array\n\t */\n\tprotected $arrFilemounts = array();\n\n\t/**\n\t * Valid file types\n\t * @var array\n\t */\n\tprotected $arrValidFileTypes = array();\n\n\t/**\n\t * Messages\n\t * @var array\n\t */\n\tprotected $arrMessages = array();\n\n\t/**\n\t * Counts\n\t * @var array\n\t */\n\tprotected $arrCounts = array();\n\n\t/**\n\t * Database assisted\n\t * @var boolean\n\t */\n\tprotected $blnIsDbAssisted = false;\n\n\t/**\n\t * Show files\n\t * @var boolean\n\t */\n\tprotected $blnFiles = true;\n\n\t/**\n\t * Only allow to select files\n\t * @var boolean\n\t */\n\tprotected $blnFilesOnly = false;\n\n\t/**\n\t * Initialize the object\n\t *\n\t * @param string $strTable\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function __construct($strTable)\n\t{\n\t\tparent::__construct();\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Check the request token (see #4007)\n\t\tif (isset($_GET['act']))\n\t\t{\n\t\t\tif (!isset($_GET['rt']) || !RequestToken::validate(Input::get('rt')))\n\t\t\t{\n\t\t\t\t$objSession->set('INVALID_TOKEN_URL', Environment::get('request'));\n\t\t\t\t$this->redirect('contao/confirm.php');\n\t\t\t}\n\t\t}\n\n\t\t$this->intId = Input::get('id', true);\n\n\t\t// Clear the clipboard\n\t\tif (isset($_GET['clipboard']))\n\t\t{\n\t\t\t$objSession->set('CLIPBOARD', array());\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\n\t\t// Check whether the table is defined\n\t\tif (!$strTable || !isset($GLOBALS['TL_DCA'][$strTable]))\n\t\t{\n\t\t\t$this->log('Could not load data container configuration for \"' . $strTable . '\"', __METHOD__, TL_ERROR);\n\t\t\ttrigger_error('Could not load data container configuration', E_USER_ERROR);\n\t\t}\n\n\t\t// Check permission to create new folders\n\t\tif (isset($GLOBALS['TL_DCA'][$strTable]['list']['new']) && Input::get('act') == 'paste' && Input::get('mode') == 'create')\n\t\t{\n\t\t\tthrow new AccessDeniedException('Attempt to create a new folder although the method has been overwritten in the data container.');\n\t\t}\n\n\t\t// Set IDs and redirect\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_select')\n\t\t{\n\t\t\t$ids = Input::post('IDS');\n\n\t\t\tif (empty($ids) || !\\is_array($ids))\n\t\t\t{\n\t\t\t\t$this->reload();\n\t\t\t}\n\n\t\t\t// Decode the values (see #5764)\n\t\t\t$ids = array_map('rawurldecode', $ids);\n\n\t\t\t$session = $objSession->all();\n\t\t\t$session['CURRENT']['IDS'] = $ids;\n\t\t\t$objSession->replace($session);\n\n\t\t\tif (isset($_POST['edit']))\n\t\t\t{\n\t\t\t\t$this->redirect(str_replace('act=select', 'act=editAll', Environment::get('request')));\n\t\t\t}\n\t\t\telseif (isset($_POST['delete']))\n\t\t\t{\n\t\t\t\t$this->redirect(str_replace('act=select', 'act=deleteAll', Environment::get('request')));\n\t\t\t}\n\t\t\telseif (isset($_POST['cut']) || isset($_POST['copy']))\n\t\t\t{\n\t\t\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t\t\t$arrClipboard[$strTable] = array\n\t\t\t\t(\n\t\t\t\t\t'id' => $ids,\n\t\t\t\t\t'mode' => (isset($_POST['cut']) ? 'cutAll' : 'copyAll')\n\t\t\t\t);\n\n\t\t\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t}\n\t\t}\n\n\t\t$this->strTable = $strTable;\n\t\t$this->blnIsDbAssisted = $GLOBALS['TL_DCA'][$strTable]['config']['databaseAssisted'];\n\t\t$this->strRootDir = System::getContainer()->getParameter('kernel.project_dir');\n\n\t\t// Check for valid file types\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['validFileTypes'])\n\t\t{\n\t\t\t$this->arrValidFileTypes = StringUtil::trimsplit(',', strtolower($GLOBALS['TL_DCA'][$this->strTable]['config']['validFileTypes']));\n\t\t}\n\n\t\t// Call onload_callback (e.g. to check permissions)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onload_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onload_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$callback($this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get all filemounts (root folders)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$strTable]['list']['sorting']['root']))\n\t\t{\n\t\t\t$this->arrFilemounts = $this->eliminateNestedPaths($GLOBALS['TL_DCA'][$strTable]['list']['sorting']['root']);\n\t\t}\n\t}\n\n\t/**\n\t * Return an object property\n\t *\n\t * @param string $strKey\n\t *\n\t * @return mixed\n\t */\n\tpublic function __get($strKey)\n\t{\n\t\tswitch ($strKey)\n\t\t{\n\t\t\tcase 'path':\n\t\t\t\treturn $this->strPath;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn $this->strExtension;\n\n\t\t\tcase 'isDbAssisted':\n\t\t\t\treturn $this->blnIsDbAssisted;\n\t\t}\n\n\t\treturn parent::__get($strKey);\n\t}\n\n\t/**\n\t * List all files and folders of the file system\n\t *\n\t * @return string\n\t */\n\tpublic function showAll()\n\t{\n\t\t$return = '';\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t/** @var AttributeBagInterface $objSessionBag */\n\t\t$objSessionBag = $objSession->getBag('contao_backend');\n\n\t\t$session = $objSessionBag->all();\n\n\t\t// Add to clipboard\n\t\tif (Input::get('act') == 'paste')\n\t\t{\n\t\t\t$mode = Input::get('mode');\n\n\t\t\tif ($mode != 'create' && $mode != 'move')\n\t\t\t{\n\t\t\t\t$this->isValid($this->intId);\n\t\t\t}\n\n\t\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t\t$arrClipboard[$this->strTable] = array\n\t\t\t(\n\t\t\t\t'id' => $this->urlEncode($this->intId),\n\t\t\t\t'childs' => Input::get('childs'),\n\t\t\t\t'mode' => $mode\n\t\t\t);\n\n\t\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\t\t}\n\n\t\t// Get the session data and toggle the nodes\n\t\tif (Input::get('tg') == 'all')\n\t\t{\n\t\t\t// Expand tree\n\t\t\tif (empty($session['filetree']) || !\\is_array($session['filetree']) || current($session['filetree']) != 1)\n\t\t\t{\n\t\t\t\t$session['filetree'] = $this->getMD5Folders(Config::get('uploadPath'));\n\t\t\t}\n\t\t\t// Collapse tree\n\t\t\telse\n\t\t\t{\n\t\t\t\t$session['filetree'] = array();\n\t\t\t}\n\n\t\t\t$objSessionBag->replace($session);\n\t\t\t$this->redirect(preg_replace('/(&(amp;)?|\\?)tg=[^& ]*/i', '', Environment::get('request')));\n\t\t}\n\n\t\t$blnClipboard = false;\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t// Check clipboard\n\t\tif (!empty($arrClipboard[$this->strTable]))\n\t\t{\n\t\t\t$blnClipboard = true;\n\t\t\t$arrClipboard = $arrClipboard[$this->strTable];\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\t\t$this->import(BackendUser::class, 'User');\n\n\t\t$arrFound = array();\n\t\t$for = $session['search'][$this->strTable]['value'];\n\n\t\t// Limit the results by modifying $this->arrFilemounts\n\t\tif ((string) $for !== '')\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$this->Database->prepare(\"SELECT '' REGEXP ?\")->execute($for);\n\t\t\t}\n\t\t\tcatch (DriverException $exception)\n\t\t\t{\n\t\t\t\t// Quote search string if it is not a valid regular expression\n\t\t\t\t$for = preg_quote($for);\n\t\t\t}\n\n\t\t\t$strPattern = \"CAST(name AS CHAR) REGEXP ?\";\n\n\t\t\tif (substr(Config::get('dbCollation'), -3) == '_ci')\n\t\t\t{\n\t\t\t\t$strPattern = \"LOWER(CAST(name AS CHAR)) REGEXP LOWER(?)\";\n\t\t\t}\n\n\t\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey']))\n\t\t\t{\n\t\t\t\tlist($t, $f) = explode('.', $GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey'], 2);\n\n\t\t\t\t$objRoot = $this->Database->prepare(\"SELECT path, type, extension FROM \" . $this->strTable . \" WHERE (\" . $strPattern . \" OR \" . sprintf($strPattern, \"(SELECT \" . Database::quoteIdentifier($f) . \" FROM $t WHERE $t.id=\" . $this->strTable . \".name)\") . \")\")\n\t\t\t\t\t\t\t\t\t\t  ->execute($for, $for);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$objRoot = $this->Database->prepare(\"SELECT path, type, extension FROM \" . $this->strTable . \" WHERE \" . $strPattern)\n\t\t\t\t\t\t\t\t\t\t  ->execute($for);\n\t\t\t}\n\n\t\t\tif ($objRoot->numRows < 1)\n\t\t\t{\n\t\t\t\t$this->arrFilemounts = array();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$arrRoot = array();\n\n\t\t\t\t// Respect existing limitations (root IDs)\n\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root']))\n\t\t\t\t{\n\t\t\t\t\twhile ($objRoot->next())\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'] as $root)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (strncmp($root . '/', $objRoot->path . '/', \\strlen($root) + 1) === 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($objRoot->type == 'folder' || empty($this->arrValidFileTypes) || \\in_array($objRoot->extension, $this->arrValidFileTypes))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$arrFound[] = $objRoot->path;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$arrRoot[] = ($objRoot->type == 'folder') ? $objRoot->path : \\dirname($objRoot->path);\n\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twhile ($objRoot->next())\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($objRoot->type == 'folder' || empty($this->arrValidFileTypes) || \\in_array($objRoot->extension, $this->arrValidFileTypes))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$arrFound[] = $objRoot->path;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$arrRoot[] = ($objRoot->type == 'folder') ? $objRoot->path : \\dirname($objRoot->path);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->arrFilemounts = $this->eliminateNestedPaths(array_unique($arrRoot));\n\t\t\t}\n\t\t}\n\n\t\t// Call recursive function tree()\n\t\tif ((string) $for !== '' && empty($this->arrFilemounts))\n\t\t{\n\t\t\t// Show an empty tree if there are no search results\n\t\t}\n\t\telseif (empty($this->arrFilemounts) && !\\is_array($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root']) && $GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'] !== false)\n\t\t{\n\t\t\t$return .= $this->generateTree($this->strRootDir . '/' . Config::get('uploadPath'), 0, false, true, ($blnClipboard ? $arrClipboard : false), $arrFound);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor ($i=0, $c=\\count($this->arrFilemounts); $i<$c; $i++)\n\t\t\t{\n\t\t\t\tif ($this->arrFilemounts[$i] && is_dir($this->strRootDir . '/' . $this->arrFilemounts[$i]))\n\t\t\t\t{\n\t\t\t\t\t$return .= $this->generateTree($this->strRootDir . '/' . $this->arrFilemounts[$i], 0, true, $this->isProtectedPath($this->arrFilemounts[$i]), ($blnClipboard ? $arrClipboard : false), $arrFound);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for the \"create new\" button\n\t\t$clsNew = 'header_new_folder';\n\t\t$lblNew = $GLOBALS['TL_LANG'][$this->strTable]['new'][0];\n\t\t$ttlNew = $GLOBALS['TL_LANG'][$this->strTable]['new'][1];\n\t\t$hrfNew = 'act=paste&amp;mode=create';\n\n\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['list']['new']))\n\t\t{\n\t\t\t$clsNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['class'];\n\t\t\t$lblNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['label'][0];\n\t\t\t$ttlNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['label'][1];\n\t\t\t$hrfNew = $GLOBALS['TL_DCA'][$this->strTable]['list']['new']['href'];\n\t\t}\n\n\t\t$labelPasteInto = $GLOBALS['TL_LANG'][$this->strTable]['pasteinto'] ?? $GLOBALS['TL_LANG']['DCA']['pasteinto'];\n\t\t$imagePasteInto = Image::getHtml('pasteinto.svg', $labelPasteInto[0]);\n\n\t\tif ((string) $for !== '')\n\t\t{\n\t\t\tMessage::addInfo($GLOBALS['TL_LANG']['MSC']['searchExclude']);\n\t\t}\n\n\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['config']['label']))\n\t\t{\n\t\t\t$label = $GLOBALS['TL_DCA'][$this->strTable]['config']['label'];\n\t\t}\n\t\telseif (($do = Input::get('do')) && isset($GLOBALS['TL_LANG']['MOD'][$do]))\n\t\t{\n\t\t\t$label = $GLOBALS['TL_LANG']['MOD'][$do][0];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$label = $GLOBALS['TL_LANG']['MOD']['files'][0];\n\t\t}\n\n\t\t$icon = $GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['icon'] ?: 'filemounts.svg';\n\t\t$label = Image::getHtml($icon) . ' <label>' . $label . '</label>';\n\n\t\t// Build the tree\n\t\t$return = $this->panel() . Message::generate() . '\n<div id=\"tl_buttons\">' . ((Input::get('act') == 'select') ? '\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a> ' : '') . ((Input::get('act') != 'select' && !$blnClipboard && !$GLOBALS['TL_DCA'][$this->strTable]['config']['closed'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable']) ? '\n<a href=\"' . $this->addToUrl($hrfNew) . '\" class=\"' . $clsNew . '\" title=\"' . StringUtil::specialchars($ttlNew) . '\" accesskey=\"n\" onclick=\"Backend.getScrollOffset()\">' . $lblNew . '</a>\n<a href=\"' . $this->addToUrl('&amp;act=paste&amp;mode=move') . '\" class=\"header_new\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG'][$this->strTable]['move'][1]) . '\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG'][$this->strTable]['move'][0] . '</a>  ' : '') . ($blnClipboard ? '\n<a href=\"' . $this->addToUrl('clipboard=1') . '\" class=\"header_clipboard\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['clearClipboard']) . '\" accesskey=\"x\">' . $GLOBALS['TL_LANG']['MSC']['clearClipboard'] . '</a> ' : $this->generateGlobalButtons()) . '\n</div>' . ((Input::get('act') == 'select') ? '\n<form id=\"tl_select\" class=\"tl_form tl_edit_form' . ((Input::get('act') == 'select') ? ' unselectable' : '') . '\" method=\"post\" novalidate>\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"tl_select\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' : '') . ($blnClipboard ? '\n<div id=\"paste_hint\" data-add-to-scroll-offset=\"20\">\n  <p>' . $GLOBALS['TL_LANG']['MSC']['selectNewPosition'] . '</p>\n</div>' : '') . '\n<div class=\"tl_listing_container tree_view\" id=\"tl_listing\"' . $this->getPickerValueAttribute() . '>' . ($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['breadcrumb'] ?? '') . ((Input::get('act') == 'select' || $this->strPickerFieldType == 'checkbox') ? '\n<div class=\"tl_select_trigger\">\n<label for=\"tl_select_trigger\" class=\"tl_select_label\">' . $GLOBALS['TL_LANG']['MSC']['selectAll'] . '</label> <input type=\"checkbox\" id=\"tl_select_trigger\" onclick=\"Backend.toggleCheckboxes(this)\" class=\"tl_tree_checkbox\">\n</div>' : '') . '\n<ul class=\"tl_listing tl_file_manager' . ($this->strPickerFieldType ? ' picker unselectable' : '') . '\">\n  <li class=\"tl_folder_top cf\"><div class=\"tl_left\">' . $label . '</div> <div class=\"tl_right\">' . (($blnClipboard && empty($this->arrFilemounts) && !\\is_array($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root']) && $GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'] !== false) ? '<a href=\"' . $this->addToUrl('&amp;act=' . $arrClipboard['mode'] . '&amp;mode=2&amp;pid=' . Config::get('uploadPath') . (!\\is_array($arrClipboard['id']) ? '&amp;id=' . $arrClipboard['id'] : '')) . '\" title=\"' . StringUtil::specialchars($labelPasteInto[0]) . '\" onclick=\"Backend.getScrollOffset()\">' . $imagePasteInto . '</a>' : '&nbsp;') . '</div></li>' . $return . '\n</ul>' . ($this->strPickerFieldType == 'radio' ? '\n<div class=\"tl_radio_reset\">\n<label for=\"tl_radio_reset\" class=\"tl_radio_label\">' . $GLOBALS['TL_LANG']['MSC']['resetSelected'] . '</label> <input type=\"radio\" name=\"picker\" id=\"tl_radio_reset\" value=\"\" class=\"tl_tree_radio\">\n</div>' : '') . '\n</div>';\n\n\t\t// Close the form\n\t\tif (Input::get('act') == 'select')\n\t\t{\n\t\t\t// Submit buttons\n\t\t\t$arrButtons = array();\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notEditable'])\n\t\t\t{\n\t\t\t\t$arrButtons['edit'] = '<button type=\"submit\" name=\"edit\" id=\"edit\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['editSelected'] . '</button>';\n\t\t\t}\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notDeletable'])\n\t\t\t{\n\t\t\t\t$arrButtons['delete'] = '<button type=\"submit\" name=\"delete\" id=\"delete\" class=\"tl_submit\" accesskey=\"d\" onclick=\"return confirm(\\'' . $GLOBALS['TL_LANG']['MSC']['delAllConfirmFile'] . '\\')\">' . $GLOBALS['TL_LANG']['MSC']['deleteSelected'] . '</button>';\n\t\t\t}\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notSortable'])\n\t\t\t{\n\t\t\t\t$arrButtons['cut'] = '<button type=\"submit\" name=\"cut\" id=\"cut\" class=\"tl_submit\" accesskey=\"x\">' . $GLOBALS['TL_LANG']['MSC']['moveSelected'] . '</button>';\n\t\t\t}\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['notCopyable'])\n\t\t\t{\n\t\t\t\t$arrButtons['copy'] = '<button type=\"submit\" name=\"copy\" id=\"copy\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['copySelected'] . '</button>';\n\t\t\t}\n\n\t\t\t// Call the buttons_callback (see #4691)\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['select']['buttons_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['select']['buttons_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\\count($arrButtons) < 3)\n\t\t\t{\n\t\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t\t{\n\t\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t\t}\n\n\t\t\t\t$strButtons .= '</ul></div>';\n\t\t\t}\n\n\t\t\t$return .= '\n</div>\n<div class=\"tl_formbody_submit\" style=\"text-align:right\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\t\t}\n\n\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['closed'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable'] && Input::get('act') != 'select')\n\t\t{\n\t\t\t$GLOBALS['TL_CSS'][] = 'assets/dropzone/css/dropzone.min.css';\n\t\t\t$GLOBALS['TL_JAVASCRIPT'][] = 'assets/dropzone/js/dropzone.min.js';\n\n\t\t\t$strAccepted = implode(',', array_map(static function ($a) { return '.' . $a; }, StringUtil::trimsplit(',', strtolower(Config::get('uploadTypes')))));\n\t\t\t$intMaxSize = round(FileUpload::getMaxUploadSize() / 1024 / 1024);\n\n\t\t\t$return .= '<script>'\n\t\t\t\t. 'Dropzone.autoDiscover = false;'\n\t\t\t\t. 'Backend.enableFileTreeUpload(\"tl_listing\", ' . json_encode(array(\n\t\t\t\t\t'url' => html_entity_decode($this->addToUrl('act=move&mode=2&pid=' . urlencode($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'][0] ?? Config::get('uploadPath')))),\n\t\t\t\t\t'paramName' => 'files',\n\t\t\t\t\t'maxFilesize' => $intMaxSize,\n\t\t\t\t\t'acceptedFiles' => $strAccepted,\n\t\t\t\t\t'params' => array(\n\t\t\t\t\t\t'FORM_SUBMIT' => 'tl_upload',\n\t\t\t\t\t\t'action' => 'fileupload',\n\t\t\t\t\t),\n\t\t\t\t)) . ')</script>'\n\t\t\t;\n\t\t}\n\n\t\t$return .= '<script>'\n\t\t\t. 'Backend.enableFileTreeDragAndDrop($(\"tl_listing\").getChildren(\".tl_file_manager\")[0], ' . json_encode(array(\n\t\t\t\t'url' => html_entity_decode($this->addToUrl('act=cut&mode=2&pid=' . urlencode($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'][0] ?? Config::get('uploadPath')))),\n\t\t\t)) . ')</script>'\n\t\t;\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Automatically switch to showAll\n\t *\n\t * @return string\n\t */\n\tpublic function show()\n\t{\n\t\treturn $this->showAll();\n\t}\n\n\t/**\n\t * Create a new folder\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function create()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not creatable.');\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\t\t$strFolder = Input::get('pid', true);\n\n\t\tif (!$strFolder || !file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Empty clipboard\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t$arrClipboard[$this->strTable] = array();\n\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\n\t\t$this->Files->mkdir($strFolder . '/__new__');\n\t\t$this->redirect(html_entity_decode($this->switchToEdit($strFolder . '/__new__')));\n\t}\n\n\t/**\n\t * Move an existing file or folder\n\t *\n\t * @param string $source\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function cut($source=null)\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notSortable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not sortable.');\n\t\t}\n\n\t\t$strFolder = Input::get('pid', true);\n\t\t$blnDoNotRedirect = ($source !== null);\n\n\t\tif ($source === null)\n\t\t{\n\t\t\t$source = $this->intId;\n\t\t}\n\n\t\t$this->isValid($source);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $source) || !$this->isMounted($source))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $source . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\tif (!file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\t// Avoid a circular reference\n\t\tif (preg_match('/^' . preg_quote($source, '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Attempt to move the folder \"' . $source . '\" to \"' . $strFolder . '\" (circular reference).');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Empty clipboard\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t$arrClipboard[$this->strTable] = array();\n\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\n\t\t$this->import(Files::class, 'Files');\n\n\t\t// Calculate the destination path\n\t\t$destination = str_replace(\\dirname($source), $strFolder, $source);\n\n\t\t// Do not move if the target exists and would be overriden (not possible for folders anyway)\n\t\tif (file_exists($this->strRootDir . '/' . $destination))\n\t\t{\n\t\t\tMessage::addError(sprintf($GLOBALS['TL_LANG']['ERR']['filetarget'], basename($source), \\dirname($destination)));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->Files->rename($source, $destination);\n\n\t\t\t// Update the database AFTER the file has been moved\n\t\t\tif ($this->blnIsDbAssisted)\n\t\t\t{\n\t\t\t\t$syncSource = Dbafs::shouldBeSynchronized($source);\n\t\t\t\t$syncTarget = Dbafs::shouldBeSynchronized($destination);\n\n\t\t\t\tif ($syncSource && $syncTarget)\n\t\t\t\t{\n\t\t\t\t\tDbafs::moveResource($source, $destination);\n\t\t\t\t}\n\t\t\t\telseif ($syncSource)\n\t\t\t\t{\n\t\t\t\t\tDbafs::deleteResource($source);\n\t\t\t\t}\n\t\t\t\telseif ($syncTarget)\n\t\t\t\t{\n\t\t\t\t\tDbafs::addResource($destination);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the oncut_callback\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['oncut_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['oncut_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($source, $destination, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$callback($source, $destination, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add a log entry\n\t\t\t$this->log('File or folder \"' . $source . '\" has been moved to \"' . $destination . '\"', __METHOD__, TL_FILES);\n\t\t}\n\n\t\t// Redirect\n\t\tif (!$blnDoNotRedirect)\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\t}\n\n\t/**\n\t * Move all selected files and folders\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function cutAll()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notSortable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not sortable.');\n\t\t}\n\n\t\t// PID is mandatory\n\t\tif (!Input::get('pid', true))\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\tif (isset($arrClipboard[$this->strTable]) && \\is_array($arrClipboard[$this->strTable]['id']))\n\t\t{\n\t\t\tforeach ($arrClipboard[$this->strTable]['id'] as $id)\n\t\t\t{\n\t\t\t\t$this->cut($id); // do not urldecode() here (see #6840)\n\t\t\t}\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Recursively duplicate files and folders\n\t *\n\t * @param string $source\n\t * @param string $destination\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function copy($source=null, $destination=null)\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notCopyable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not copyable.');\n\t\t}\n\n\t\t$strFolder = Input::get('pid', true);\n\t\t$blnDoNotRedirect = ($source !== null);\n\n\t\tif ($source === null)\n\t\t{\n\t\t\t$source = $this->intId;\n\t\t}\n\n\t\tif ($destination === null)\n\t\t{\n\t\t\t$destination = str_replace(\\dirname($source), $strFolder, $source);\n\t\t}\n\n\t\t$this->isValid($source);\n\t\t$this->isValid($destination);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $source) || !$this->isMounted($source))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $source . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\tif (!file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\t// Avoid a circular reference\n\t\tif (preg_match('/^' . preg_quote($source, '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Attempt to copy the folder \"' . $source . '\" to \"' . $strFolder . '\" (circular reference).');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Empty clipboard\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t$arrClipboard[$this->strTable] = array();\n\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\n\t\t$this->import(Files::class, 'Files');\n\n\t\t// Copy folders\n\t\tif (is_dir($this->strRootDir . '/' . $source))\n\t\t{\n\t\t\t$count = 1;\n\t\t\t$new = $destination;\n\n\t\t\t// Add a suffix if the folder exists\n\t\t\twhile (is_dir($this->strRootDir . '/' . $new) && $count < 12)\n\t\t\t{\n\t\t\t\t$new = $destination . '_' . $count++;\n\t\t\t}\n\n\t\t\t$destination = $new;\n\t\t\t$this->Files->rcopy($source, $destination);\n\t\t}\n\n\t\t// Copy a file\n\t\telse\n\t\t{\n\t\t\t$count = 1;\n\t\t\t$new = $destination;\n\t\t\t$ext = strtolower(substr($destination, strrpos($destination, '.') + 1));\n\n\t\t\t// Add a suffix if the file exists\n\t\t\twhile (file_exists($this->strRootDir . '/' . $new) && $count < 12)\n\t\t\t{\n\t\t\t\t$new = str_replace('.' . $ext, '_' . $count++ . '.' . $ext, $destination);\n\t\t\t}\n\n\t\t\t$destination = $new;\n\t\t\t$this->Files->copy($source, $destination);\n\t\t}\n\n\t\t// Update the database AFTER the file has been copied\n\t\tif ($this->blnIsDbAssisted)\n\t\t{\n\t\t\t$syncSource = Dbafs::shouldBeSynchronized($source);\n\t\t\t$syncTarget = Dbafs::shouldBeSynchronized($destination);\n\n\t\t\tif ($syncSource && $syncTarget)\n\t\t\t{\n\t\t\t\tDbafs::copyResource($source, $destination);\n\t\t\t}\n\t\t\telseif ($syncTarget)\n\t\t\t{\n\t\t\t\tDbafs::addResource($destination);\n\t\t\t}\n\t\t}\n\n\t\t// Call the oncopy_callback\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['oncopy_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['oncopy_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($source, $destination, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$callback($source, $destination, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add a log entry\n\t\t$this->log('File or folder \"' . $source . '\" has been copied to \"' . $destination . '\"', __METHOD__, TL_FILES);\n\n\t\t// Redirect\n\t\tif (!$blnDoNotRedirect)\n\t\t{\n\t\t\t// Switch to edit mode\n\t\t\tif (is_file($this->strRootDir . '/' . $destination))\n\t\t\t{\n\t\t\t\t$this->redirect($this->switchToEdit($destination));\n\t\t\t}\n\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\t}\n\n\t/**\n\t * Move all selected files and folders\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function copyAll()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notCopyable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not copyable.');\n\t\t}\n\n\t\t// PID is mandatory\n\t\tif (!Input::get('pid', true))\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\tif (isset($arrClipboard[$this->strTable]) && \\is_array($arrClipboard[$this->strTable]['id']))\n\t\t{\n\t\t\tforeach ($arrClipboard[$this->strTable]['id'] as $id)\n\t\t\t{\n\t\t\t\t$this->copy($id); // do not urldecode() here (see #6840)\n\t\t\t}\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Recursively delete files and folders\n\t *\n\t * @param string $source\n\t *\n\t * @throws AccessDeniedException\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function delete($source=null)\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notDeletable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not deletable.');\n\t\t}\n\n\t\t$blnDoNotRedirect = ($source !== null);\n\n\t\tif ($source === null)\n\t\t{\n\t\t\t$source = $this->intId;\n\t\t}\n\n\t\t$this->isValid($source);\n\n\t\t// Delete the file or folder\n\t\tif (!file_exists($this->strRootDir . '/' . $source) || !$this->isMounted($source))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $source . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\t// Call the ondelete_callback\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['ondelete_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['ondelete_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($source, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$callback($source, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\n\t\t// Delete the folder or file\n\t\tif (is_dir($this->strRootDir . '/' . $source))\n\t\t{\n\t\t\t$this->Files->rrdir($source);\n\n\t\t\t$strWebDir = StringUtil::stripRootDir(System::getContainer()->getParameter('contao.web_dir'));\n\n\t\t\t// Also delete the symlink (see #710)\n\t\t\tif (is_link($this->strRootDir . '/' . $strWebDir . '/' . $source))\n\t\t\t{\n\t\t\t\t$this->Files->delete($strWebDir . '/' . $source);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->Files->delete($source);\n\t\t}\n\n\t\t// Update the database AFTER the resource has been deleted\n\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($source))\n\t\t{\n\t\t\tDbafs::deleteResource($source);\n\t\t}\n\n\t\t// Add a log entry\n\t\t$this->log('File or folder \"' . $source . '\" has been deleted', __METHOD__, TL_FILES);\n\n\t\t// Redirect\n\t\tif (!$blnDoNotRedirect)\n\t\t{\n\t\t\t$this->redirect($this->getReferer());\n\t\t}\n\t}\n\n\t/**\n\t * Delete all files and folders that are currently shown\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function deleteAll()\n\t{\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notDeletable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not deletable.');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$session = $objSession->all();\n\t\t$ids = $session['CURRENT']['IDS'];\n\n\t\tif (!empty($ids) && \\is_array($ids))\n\t\t{\n\t\t\t$ids = $this->eliminateNestedPaths($ids); // see #941\n\n\t\t\tforeach ($ids as $id)\n\t\t\t{\n\t\t\t\t$this->delete($id); // do not urldecode() here (see #6840)\n\t\t\t}\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Automatically switch to showAll\n\t *\n\t * @return string\n\t */\n\tpublic function undo()\n\t{\n\t\treturn $this->showAll();\n\t}\n\n\t/**\n\t * Move one or more local files to the server\n\t *\n\t * @param boolean $blnIsAjax\n\t *\n\t * @return string\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function move($blnIsAjax=false)\n\t{\n\t\t$strFolder = Input::get('pid', true);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Folder \"' . $strFolder . '\" is not mounted or is not a directory.');\n\t\t}\n\n\t\tif (!preg_match('/^' . preg_quote(Config::get('uploadPath'), '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not within the files directory.');\n\t\t}\n\n\t\t// Empty clipboard\n\t\tif (!$blnIsAjax)\n\t\t{\n\t\t\t/** @var Session $objSession */\n\t\t\t$objSession = System::getContainer()->get('session');\n\n\t\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\t\t\t$arrClipboard[$this->strTable] = array();\n\t\t\t$objSession->set('CLIPBOARD', $arrClipboard);\n\t\t}\n\n\t\t// Instantiate the uploader\n\t\t$this->import(BackendUser::class, 'User');\n\t\t$class = $this->User->uploader;\n\n\t\t// See #4086\n\t\tif (!class_exists($class))\n\t\t{\n\t\t\t$class = 'DropZone';\n\t\t}\n\n\t\t/** @var FileUpload $objUploader */\n\t\t$objUploader = new $class();\n\n\t\t// Process the uploaded files\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_upload')\n\t\t{\n\t\t\t// Generate the DB entries\n\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($strFolder))\n\t\t\t{\n\t\t\t\t// Upload the files\n\t\t\t\t$arrUploaded = $objUploader->uploadTo($strFolder);\n\n\t\t\t\tif (empty($arrUploaded) && !$objUploader->hasError())\n\t\t\t\t{\n\t\t\t\t\tif ($blnIsAjax)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new ResponseException(new Response($GLOBALS['TL_LANG']['ERR']['emptyUpload'], 400));\n\t\t\t\t\t}\n\n\t\t\t\t\tMessage::addError($GLOBALS['TL_LANG']['ERR']['emptyUpload']);\n\t\t\t\t\t$this->reload();\n\t\t\t\t}\n\n\t\t\t\tforeach ($arrUploaded as $strFile)\n\t\t\t\t{\n\t\t\t\t\tDbafs::addResource($strFile);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Not DB-assisted, so just upload the file\n\t\t\t\t$arrUploaded = $objUploader->uploadTo($strFolder);\n\t\t\t}\n\n\t\t\t// HOOK: post upload callback\n\t\t\tif (isset($GLOBALS['TL_HOOKS']['postUpload']) && \\is_array($GLOBALS['TL_HOOKS']['postUpload']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_HOOKS']['postUpload'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($arrUploaded);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$callback($arrUploaded);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the hash of the target folder\n\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($strFolder))\n\t\t\t{\n\t\t\t\tDbafs::updateFolderHashes($strFolder);\n\t\t\t}\n\n\t\t\t// Redirect or reload\n\t\t\tif (!$objUploader->hasError())\n\t\t\t{\n\t\t\t\tif ($blnIsAjax)\n\t\t\t\t{\n\t\t\t\t\t/** @var Session $objSession */\n\t\t\t\t\t$objSession = System::getContainer()->get('session');\n\n\t\t\t\t\tif ($objSession->isStarted())\n\t\t\t\t\t{\n\t\t\t\t\t\t// Get the info messages only\n\t\t\t\t\t\t$arrMessages = $objSession->getFlashBag()->get('contao.' . TL_MODE . '.info');\n\t\t\t\t\t\tMessage::reset();\n\n\t\t\t\t\t\tif (!empty($arrMessages))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new ResponseException(new Response('<p class=\"tl_info\">' . implode('</p><p class=\"tl_info\">', $arrMessages) . '</p>', 201));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new ResponseException(new Response('', 201));\n\t\t\t\t}\n\n\t\t\t\t// Do not purge the html folder (see #2898)\n\t\t\t\tif (isset($_POST['uploadNback']) && !$objUploader->hasResized())\n\t\t\t\t{\n\t\t\t\t\tMessage::reset();\n\t\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t\t}\n\n\t\t\t\t$this->reload();\n\t\t\t}\n\t\t\telseif ($blnIsAjax)\n\t\t\t{\n\t\t\t\tthrow new ResponseException(new Response(Message::generateUnwrapped(TL_MODE, true), 500));\n\t\t\t}\n\t\t}\n\n\t\t// Submit buttons\n\t\t$arrButtons = array();\n\t\t$arrButtons['upload'] = '<button type=\"submit\" name=\"upload\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG'][$this->strTable]['move'][0] . '</button>';\n\t\t$arrButtons['uploadNback'] = '<button type=\"submit\" name=\"uploadNback\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG'][$this->strTable]['uploadNback'] . '</button>';\n\n\t\t// Call the buttons_callback (see #4691)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\\count($arrButtons) < 3)\n\t\t{\n\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t{\n\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t}\n\n\t\t\t$strButtons .= '</ul></div>';\n\t\t}\n\n\t\t// Display the upload form\n\t\treturn Message::generate() . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<form id=\"' . $this->strTable . '\" class=\"tl_form tl_edit_form\" method=\"post\"' . (!empty($this->onsubmit) ? ' onsubmit=\"' . implode(' ', $this->onsubmit) . '\"' : '') . ' enctype=\"multipart/form-data\">\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"tl_upload\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">\n<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"' . Config::get('maxFileSize') . '\">\n<div class=\"tl_tbox\">\n<div class=\"widget\">\n  <h3>' . $GLOBALS['TL_LANG'][$this->strTable]['fileupload'][0] . '</h3>' . $objUploader->generateMarkup() . '\n</div>\n</div>\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\t}\n\n\t/**\n\t * Auto-generate a form to rename a file or folder\n\t *\n\t * @return string\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function edit()\n\t{\n\t\t$return = '';\n\t\t$this->noReload = false;\n\t\t$this->isValid($this->intId);\n\n\t\tif (!file_exists($this->strRootDir . '/' . $this->intId) || !$this->isMounted($this->intId))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $this->intId . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\t$objModel = null;\n\t\t$objVersions = null;\n\n\t\t// Add the versioning routines\n\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($this->intId))\n\t\t{\n\t\t\tif (stripos($this->intId, '__new__') === false)\n\t\t\t{\n\t\t\t\t$objModel = FilesModel::findByPath($this->intId);\n\n\t\t\t\tif ($objModel === null)\n\t\t\t\t{\n\t\t\t\t\t$objModel = Dbafs::addResource($this->intId);\n\t\t\t\t}\n\n\t\t\t\t$this->objActiveRecord = $objModel;\n\n\t\t\t\t$this->blnCreateNewVersion = false;\n\n\t\t\t\t/** @var FilesModel $objModel */\n\t\t\t\t$objVersions = new Versions($this->strTable, $objModel->id);\n\n\t\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'])\n\t\t\t\t{\n\t\t\t\t\t// Compare versions\n\t\t\t\t\tif (Input::get('versions'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$objVersions->compare();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Restore a version\n\t\t\t\t\tif (Input::post('FORM_SUBMIT') == 'tl_version' && Input::post('version'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$objVersions->restore(Input::post('version'));\n\t\t\t\t\t\t$this->reload();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$objVersions->initialize();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Unset the database fields\n\t\t\t$GLOBALS['TL_DCA'][$this->strTable]['fields'] = array_intersect_key($GLOBALS['TL_DCA'][$this->strTable]['fields'], array('name' => true, 'protected' => true, 'syncExclude' => true));\n\t\t}\n\n\t\t// Build an array from boxes and rows (do not show excluded fields)\n\t\t$this->strPalette = $this->getPalette();\n\t\t$boxes = StringUtil::trimsplit(';', $this->strPalette);\n\n\t\tif (!empty($boxes))\n\t\t{\n\t\t\t// Get fields\n\t\t\tforeach ($boxes as $k=>$v)\n\t\t\t{\n\t\t\t\t$boxes[$k] = StringUtil::trimsplit(',', $v);\n\n\t\t\t\tforeach ($boxes[$k] as $kk=>$vv)\n\t\t\t\t{\n\t\t\t\t\tif (!isset($GLOBALS['TL_DCA'][$this->strTable]['fields'][$vv]) || $GLOBALS['TL_DCA'][$this->strTable]['fields'][$vv]['exclude'])\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($boxes[$k][$kk]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Unset a box if it does not contain any fields\n\t\t\t\tif (empty($boxes[$k]))\n\t\t\t\t{\n\t\t\t\t\tunset($boxes[$k]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Render boxes\n\t\t\t$class = 'tl_tbox';\n\n\t\t\tforeach ($boxes as $v)\n\t\t\t{\n\t\t\t\t$return .= '\n<div class=\"' . $class . ' cf\">';\n\n\t\t\t\t// Build rows of the current box\n\t\t\t\tforeach ($v as $vv)\n\t\t\t\t{\n\t\t\t\t\t$this->strField = $vv;\n\t\t\t\t\t$this->strInputName = $vv;\n\n\t\t\t\t\t// Load the current value\n\t\t\t\t\tif ($vv == 'name')\n\t\t\t\t\t{\n\t\t\t\t\t\t$objFile = is_dir($this->strRootDir . '/' . $this->intId) ? new Folder($this->intId) : new File($this->intId);\n\n\t\t\t\t\t\t$this->strPath = StringUtil::stripRootDir($objFile->dirname);\n\t\t\t\t\t\t$this->strExtension = $objFile->origext ? '.' . $objFile->origext : '';\n\t\t\t\t\t\t$this->varValue = $objFile->filename;\n\n\t\t\t\t\t\t// Fix hidden Unix system files\n\t\t\t\t\t\tif (strncmp($this->varValue, '.', 1) === 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->strExtension = '';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Clear the current value if it is a new folder\n\t\t\t\t\t\tif ($this->varValue == '__new__' && !\\in_array(Input::post('FORM_SUBMIT'), array('tl_files', 'tl_templates')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->varValue = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->varValue = ($objModel !== null) ? $objModel->$vv : null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Call load_callback\n\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback'] as $callback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t$this->varValue = $this->{$callback[0]}->{$callback[1]}($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->varValue = $callback($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Build row\n\t\t\t\t\t$return .= $this->row();\n\t\t\t\t}\n\n\t\t\t\t$class = 'tl_box';\n\n\t\t\t\t$return .= '\n  <input type=\"hidden\" name=\"FORM_FIELDS[]\" value=\"' . StringUtil::specialchars($this->strPalette) . '\">\n</div>';\n\t\t\t}\n\t\t}\n\n\t\t// Versions overview\n\t\tif ($objVersions && $this->blnIsDbAssisted && $GLOBALS['TL_DCA'][$this->strTable]['config']['enableVersioning'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'] && Dbafs::shouldBeSynchronized($this->intId))\n\t\t{\n\t\t\t$version = $objVersions->renderDropdown();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$version = '';\n\t\t}\n\n\t\t// Submit buttons\n\t\t$arrButtons = array();\n\t\t$arrButtons['save'] = '<button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['save'] . '</button>';\n\n\t\tif (!Input::get('nb'))\n\t\t{\n\t\t\t$arrButtons['saveNclose'] = '<button type=\"submit\" name=\"saveNclose\" id=\"saveNclose\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['saveNclose'] . '</button>';\n\t\t}\n\n\t\t// Call the buttons_callback (see #4691)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\\count($arrButtons) < 3)\n\t\t{\n\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t{\n\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t}\n\n\t\t\t$strButtons .= '</ul></div>';\n\t\t}\n\n\t\t// Add the buttons and end the form\n\t\t$return .= '\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\n\t\t// Begin the form (-> DO NOT CHANGE THIS ORDER -> this way the onsubmit attribute of the form can be changed by a field)\n\t\t$return = $version . Message::generate() . ($this->noReload ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['general'] . '</p>' : '') . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<form id=\"' . $this->strTable . '\" class=\"tl_form tl_edit_form\" method=\"post\"' . (!empty($this->onsubmit) ? ' onsubmit=\"' . implode(' ', $this->onsubmit) . '\"' : '') . '>\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"' . $this->strTable . '\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' . $return;\n\n\t\t// Always create a new version if something has changed, even if the form has errors (see #237)\n\t\tif ($this->noReload && $this->blnCreateNewVersion && $objModel !== null && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t{\n\t\t\t$objVersions->create();\n\t\t}\n\n\t\t// Reload the page to prevent _POST variables from being sent twice\n\t\tif (!$this->noReload && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t{\n\t\t\t// Trigger the onsubmit_callback\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$callback($this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the current timestamp before creating a new version\n\t\t\tif ($this->blnIsDbAssisted && $objModel !== null)\n\t\t\t{\n\t\t\t\t$this->Database->prepare(\"UPDATE \" . $this->strTable . \" SET tstamp=? WHERE id=?\")\n\t\t\t\t\t\t\t   ->execute(time(), $objModel->id);\n\t\t\t}\n\n\t\t\t// Save the current version\n\t\t\tif ($this->blnCreateNewVersion && $objModel !== null)\n\t\t\t{\n\t\t\t\t$objVersions->create();\n\n\t\t\t\t// Call the onversion_callback\n\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback']))\n\t\t\t\t{\n\t\t\t\t\t@trigger_error('Using the \"onversion_callback\" has been deprecated and will no longer work in Contao 5.0. Use the \"oncreate_version_callback\" instead.', E_USER_DEPRECATED);\n\n\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback'] as $callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$callback($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Redirect\n\t\t\tif (isset($_POST['saveNclose']))\n\t\t\t{\n\t\t\t\tMessage::reset();\n\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t}\n\n\t\t\t// Reload\n\t\t\tif ($this->blnIsDbAssisted && $this->objActiveRecord !== null)\n\t\t\t{\n\t\t\t\t$this->redirect($this->addToUrl('id=' . $this->urlEncode($this->objActiveRecord->path)));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->redirect($this->addToUrl('id=' . $this->urlEncode($this->intId)));\n\t\t\t}\n\t\t}\n\n\t\t// Set the focus if there is an error\n\t\tif ($this->noReload)\n\t\t{\n\t\t\t$return .= '\n<script>\n  window.addEvent(\\'domready\\', function() {\n    Backend.vScrollTo(($(\\'' . $this->strTable . '\\').getElement(\\'label.error\\').getPosition().y - 20));\n  });\n</script>';\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Auto-generate a form to edit all records that are currently shown\n\t *\n\t * @return string\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function editAll()\n\t{\n\t\t$return = '';\n\n\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['config']['notEditable'])\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Table \"' . $this->strTable . '\" is not editable.');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t// Get current IDs from session\n\t\t$session = $objSession->all();\n\t\t$ids = $session['CURRENT']['IDS'];\n\n\t\t// Save field selection in session\n\t\tif (Input::post('FORM_SUBMIT') == $this->strTable . '_all' && Input::get('fields'))\n\t\t{\n\t\t\t$session['CURRENT'][$this->strTable] = Input::post('all_fields');\n\t\t\t$objSession->replace($session);\n\t\t}\n\n\t\t$fields = $session['CURRENT'][$this->strTable];\n\n\t\t// Add fields\n\t\tif (!empty($fields) && \\is_array($fields) && Input::get('fields'))\n\t\t{\n\t\t\t$class = 'tl_tbox';\n\n\t\t\t// Walk through each record\n\t\t\tforeach ($ids as $id)\n\t\t\t{\n\t\t\t\t$this->intId = $id;\n\t\t\t\t$this->initialId = $id;\n\t\t\t\t$this->strPalette = StringUtil::trimsplit('[;,]', $this->getPalette());\n\n\t\t\t\t$objModel = null;\n\t\t\t\t$objVersions = null;\n\n\t\t\t\t// Get the DB entry\n\t\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($id))\n\t\t\t\t{\n\t\t\t\t\t$objModel = FilesModel::findByPath($id);\n\n\t\t\t\t\tif ($objModel === null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$objModel = Dbafs::addResource($id);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->objActiveRecord = $objModel;\n\t\t\t\t\t$this->blnCreateNewVersion = false;\n\n\t\t\t\t\t/** @var FilesModel $objModel */\n\t\t\t\t\t$objVersions = new Versions($this->strTable, $objModel->id);\n\t\t\t\t\t$objVersions->initialize();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Unset the database fields\n\t\t\t\t\t$this->strPalette = array_filter($this->strPalette, static function ($val) { return $val == 'name' || $val == 'protected'; });\n\t\t\t\t}\n\n\t\t\t\t$return .= '\n<div class=\"' . $class . '\">';\n\n\t\t\t\t$class = 'tl_box';\n\t\t\t\t$formFields = array();\n\t\t\t\t$strHash = md5($id);\n\n\t\t\t\tforeach ($this->strPalette as $v)\n\t\t\t\t{\n\t\t\t\t\t// Check whether field is excluded\n\t\t\t\t\tif ($GLOBALS['TL_DCA'][$this->strTable]['fields'][$v]['exclude'])\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!\\in_array($v, $fields))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->strField = $v;\n\t\t\t\t\t$this->strInputName = $v . '_' . $strHash;\n\t\t\t\t\t$formFields[] = $v . '_' . $strHash;\n\n\t\t\t\t\t// Load the current value\n\t\t\t\t\tif ($v == 'name')\n\t\t\t\t\t{\n\t\t\t\t\t\t$objFile = is_dir($this->strRootDir . '/' . $id) ? new Folder($id) : new File($id);\n\n\t\t\t\t\t\t$this->strPath = StringUtil::stripRootDir($objFile->dirname);\n\t\t\t\t\t\t$this->strExtension = $objFile->origext ? '.' . $objFile->origext : '';\n\t\t\t\t\t\t$this->varValue = $objFile->filename;\n\n\t\t\t\t\t\t// Fix hidden Unix system files\n\t\t\t\t\t\tif (strncmp($this->varValue, '.', 1) === 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->strExtension = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->varValue = ($objModel !== null) ? $objModel->$v : null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Call load_callback\n\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['load_callback'] as $callback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t$this->varValue = $this->{$callback[0]}->{$callback[1]}($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->varValue = $callback($this->varValue, $this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Build the current row\n\t\t\t\t\t$return .= $this->row();\n\t\t\t\t}\n\n\t\t\t\t// Close box\n\t\t\t\t$return .= '\n  <input type=\"hidden\" name=\"FORM_FIELDS_' . $strHash . '[]\" value=\"' . StringUtil::specialchars(implode(',', $formFields)) . '\">\n</div>';\n\n\t\t\t\t// Always create a new version if something has changed, even if the form has errors (see #237)\n\t\t\t\tif ($this->noReload && $this->blnCreateNewVersion && $objModel !== null && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t\t\t{\n\t\t\t\t\t$objVersions->create();\n\t\t\t\t}\n\n\t\t\t\t// Save the record\n\t\t\t\tif (!$this->noReload && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t\t\t{\n\t\t\t\t\t// Call onsubmit_callback\n\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onsubmit_callback'] as $callback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$callback($this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the current timestamp before adding a new version\n\t\t\t\t\tif ($this->blnIsDbAssisted && $objModel !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->Database->prepare(\"UPDATE \" . $this->strTable . \" SET tstamp=? WHERE id=?\")\n\t\t\t\t\t\t\t\t\t   ->execute(time(), $objModel->id);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create a new version\n\t\t\t\t\tif ($this->blnCreateNewVersion && $objModel !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$objVersions->create();\n\n\t\t\t\t\t\t// Call the onversion_callback\n\t\t\t\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t@trigger_error('Using the \"onversion_callback\" has been deprecated and will no longer work in Contao 5.0. Use the \"oncreate_version_callback\" instead.', E_USER_DEPRECATED);\n\n\t\t\t\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['config']['onversion_callback'] as $callback)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t\t\t\t$this->{$callback[0]}->{$callback[1]}($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$callback($this->strTable, $objModel->id, $this);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Submit buttons\n\t\t\t$arrButtons = array();\n\t\t\t$arrButtons['save'] = '<button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['save'] . '</button>';\n\t\t\t$arrButtons['saveNclose'] = '<button type=\"submit\" name=\"saveNclose\" id=\"saveNclose\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['saveNclose'] . '</button>';\n\n\t\t\t// Call the buttons_callback (see #4691)\n\t\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t\t{\n\t\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\\count($arrButtons) < 3)\n\t\t\t{\n\t\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t\t{\n\t\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t\t}\n\n\t\t\t\t$strButtons .= '</ul></div>';\n\t\t\t}\n\n\t\t\t// Add the form\n\t\t\t$return = '\n<form id=\"' . $this->strTable . '\" class=\"tl_form tl_edit_form\" method=\"post\">\n<div class=\"tl_formbody_edit nogrid\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"' . $this->strTable . '\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' . ($this->noReload ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['general'] . '</p>' : '') . $return . '\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>';\n\n\t\t\t// Set the focus if there is an error\n\t\t\tif ($this->noReload)\n\t\t\t{\n\t\t\t\t$return .= '\n<script>\n  window.addEvent(\\'domready\\', function() {\n    Backend.vScrollTo(($(\\'' . $this->strTable . '\\').getElement(\\'label.error\\').getPosition().y - 20));\n  });\n</script>';\n\t\t\t}\n\n\t\t\t// Reload the page to prevent _POST variables from being sent twice\n\t\t\tif (!$this->noReload && Input::post('FORM_SUBMIT') == $this->strTable)\n\t\t\t{\n\t\t\t\tif (isset($_POST['saveNclose']))\n\t\t\t\t{\n\t\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t\t}\n\n\t\t\t\t$this->reload();\n\t\t\t}\n\t\t}\n\n\t\t// Else show a form to select the fields\n\t\telse\n\t\t{\n\t\t\t$options = '';\n\t\t\t$fields = array();\n\n\t\t\t// Add fields of the current table\n\t\t\t$fields = array_merge($fields, array_keys($GLOBALS['TL_DCA'][$this->strTable]['fields']));\n\n\t\t\t// Show all non-excluded fields\n\t\t\tforeach ($fields as $field)\n\t\t\t{\n\t\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['exclude'] && !$GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['eval']['doNotShow'] && (isset($GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['inputType']) || \\is_array($GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['input_field_callback'])))\n\t\t\t\t{\n\t\t\t\t\t$options .= '\n  <input type=\"checkbox\" name=\"all_fields[]\" id=\"all_' . $field . '\" class=\"tl_checkbox\" value=\"' . StringUtil::specialchars($field) . '\"> <label for=\"all_' . $field . '\" class=\"tl_checkbox_label\">' . (($GLOBALS['TL_DCA'][$this->strTable]['fields'][$field]['label'][0] ?: ($GLOBALS['TL_LANG']['MSC'][$field][0] ?: $field)) . ' <span style=\"color:#999;padding-left:3px\">[' . $field . ']</span>') . '</label><br>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$blnIsError = ($_POST && empty($_POST['all_fields']));\n\n\t\t\t// Return the select menu\n\t\t\t$return .= '\n<form action=\"' . ampersand(Environment::get('request')) . '&amp;fields=1\" id=\"' . $this->strTable . '_all\" class=\"tl_form tl_edit_form\" method=\"post\">\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"' . $this->strTable . '_all\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">' . ($blnIsError ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['general'] . '</p>' : '') . '\n<div class=\"tl_tbox\">\n<div class=\"widget\">\n<fieldset class=\"tl_checkbox_container\">\n  <legend' . ($blnIsError ? ' class=\"error\"' : '') . '>' . $GLOBALS['TL_LANG']['MSC']['all_fields'][0] . '<span class=\"mandatory\">*</span></legend>\n  <input type=\"checkbox\" id=\"check_all\" class=\"tl_checkbox\" onclick=\"Backend.toggleCheckboxes(this)\"> <label for=\"check_all\" style=\"color:#a6a6a6\"><em>' . $GLOBALS['TL_LANG']['MSC']['selectAll'] . '</em></label><br>' . $options . '\n</fieldset>' . ($blnIsError ? '\n<p class=\"tl_error\">' . $GLOBALS['TL_LANG']['ERR']['all_fields'] . '</p>' : ((Config::get('showHelp') && isset($GLOBALS['TL_LANG']['MSC']['all_fields'][1])) ? '\n<p class=\"tl_help tl_tip\">' . $GLOBALS['TL_LANG']['MSC']['all_fields'][1] . '</p>' : '')) . '\n</div>\n</div>\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  <button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['continue'] . '</button>\n</div>\n</div>\n</form>';\n\t\t}\n\n\t\t// Return\n\t\treturn '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>' . $return;\n\t}\n\n\t/**\n\t * Load the source editor\n\t *\n\t * @return string\n\t *\n\t * @throws InternalServerErrorException\n\t */\n\tpublic function source()\n\t{\n\t\t$this->isValid($this->intId);\n\n\t\tif (is_dir($this->strRootDir . '/' . $this->intId))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Folder \"' . $this->intId . '\" cannot be edited.');\n\t\t}\n\n\t\tif (!file_exists($this->strRootDir . '/' . $this->intId))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('File \"' . $this->intId . '\" does not exist.');\n\t\t}\n\n\t\t$objFile = new File($this->intId);\n\n\t\t// Check whether file type is editable\n\t\tif (!\\in_array($objFile->extension, StringUtil::trimsplit(',', strtolower(Config::get('editableFiles')))))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File type \"' . $objFile->extension . '\" (' . $this->intId . ') is not allowed to be edited.');\n\t\t}\n\n\t\t$objMeta = null;\n\t\t$objVersions = null;\n\n\t\t// Add the versioning routines\n\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($this->intId))\n\t\t{\n\t\t\t$objMeta = FilesModel::findByPath($objFile->value);\n\n\t\t\tif ($objMeta === null)\n\t\t\t{\n\t\t\t\t$objMeta = Dbafs::addResource($objFile->value);\n\t\t\t}\n\n\t\t\t$objVersions = new Versions($this->strTable, $objMeta->id);\n\n\t\t\tif (!$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'])\n\t\t\t{\n\t\t\t\t// Compare versions\n\t\t\t\tif (Input::get('versions'))\n\t\t\t\t{\n\t\t\t\t\t$objVersions->compare();\n\t\t\t\t}\n\n\t\t\t\t// Restore a version\n\t\t\t\tif (Input::post('FORM_SUBMIT') == 'tl_version' && Input::post('version'))\n\t\t\t\t{\n\t\t\t\t\t$objVersions->restore(Input::post('version'));\n\n\t\t\t\t\t// Purge the script cache (see #7005)\n\t\t\t\t\tif ($objFile->extension == 'css' || $objFile->extension == 'scss' || $objFile->extension == 'less')\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t\t\t\t$this->Automator->purgeScriptCache();\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->reload();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$objVersions->initialize();\n\t\t}\n\n\t\t$strContent = $objFile->getContent();\n\n\t\tif ($objFile->extension == 'svgz')\n\t\t{\n\t\t\t$strContent = gzdecode($strContent);\n\t\t}\n\n\t\t// Process the request\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_files')\n\t\t{\n\t\t\t$strSource = System::getContainer()->get('request_stack')->getCurrentRequest()->request->get('source');\n\n\t\t\t// Save the file\n\t\t\tif (md5($strContent) != md5($strSource))\n\t\t\t{\n\t\t\t\tif ($objFile->extension == 'svgz')\n\t\t\t\t{\n\t\t\t\t\t$strSource = gzencode($strSource);\n\t\t\t\t}\n\n\t\t\t\t// Write the file\n\t\t\t\t$objFile->write($strSource);\n\t\t\t\t$objFile->close();\n\n\t\t\t\t// Update the database\n\t\t\t\tif ($this->blnIsDbAssisted && $objMeta !== null)\n\t\t\t\t{\n\t\t\t\t\t/** @var FilesModel $objMeta */\n\t\t\t\t\t$objMeta->hash = $objFile->hash;\n\t\t\t\t\t$objMeta->save();\n\n\t\t\t\t\t$objVersions->create();\n\t\t\t\t}\n\n\t\t\t\t// Purge the script cache (see #7005)\n\t\t\t\tif (\\in_array($objFile->extension, array('css', 'scss', 'less', 'js')))\n\t\t\t\t{\n\t\t\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t\t\t$this->Automator->purgeScriptCache();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isset($_POST['saveNclose']))\n\t\t\t{\n\t\t\t\t$this->redirect($this->getReferer());\n\t\t\t}\n\n\t\t\t$this->reload();\n\t\t}\n\n\t\t$codeEditor = '';\n\n\t\t// Prepare the code editor\n\t\tif (Config::get('useCE'))\n\t\t{\n\t\t\t$objTemplate = new BackendTemplate('be_ace');\n\t\t\t$objTemplate->selector = 'ctrl_source';\n\t\t\t$objTemplate->type = $objFile->extension;\n\n\t\t\t$codeEditor = $objTemplate->parse();\n\t\t}\n\n\t\t// Versions overview\n\t\tif ($this->blnIsDbAssisted && $objVersions !== null && $GLOBALS['TL_DCA'][$this->strTable]['config']['enableVersioning'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['hideVersionMenu'])\n\t\t{\n\t\t\t$version = $objVersions->renderDropdown();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$version = '';\n\t\t}\n\n\t\t// Submit buttons\n\t\t$arrButtons = array();\n\t\t$arrButtons['save'] = '<button type=\"submit\" name=\"save\" id=\"save\" class=\"tl_submit\" accesskey=\"s\">' . $GLOBALS['TL_LANG']['MSC']['save'] . '</button>';\n\t\t$arrButtons['saveNclose'] = '<button type=\"submit\" name=\"saveNclose\" id=\"saveNclose\" class=\"tl_submit\" accesskey=\"c\">' . $GLOBALS['TL_LANG']['MSC']['saveNclose'] . '</button>';\n\n\t\t// Call the buttons_callback (see #4691)\n\t\tif (\\is_array($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_DCA'][$this->strTable]['edit']['buttons_callback'] as $callback)\n\t\t\t{\n\t\t\t\tif (\\is_array($callback))\n\t\t\t\t{\n\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t$arrButtons = $this->{$callback[0]}->{$callback[1]}($arrButtons, $this);\n\t\t\t\t}\n\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t{\n\t\t\t\t\t$arrButtons = $callback($arrButtons, $this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\\count($arrButtons) < 3)\n\t\t{\n\t\t\t$strButtons = implode(' ', $arrButtons);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$strButtons = array_shift($arrButtons) . ' ';\n\t\t\t$strButtons .= '<div class=\"split-button\">';\n\t\t\t$strButtons .= array_shift($arrButtons) . '<button type=\"button\" id=\"sbtog\">' . Image::getHtml('navcol.svg') . '</button> <ul class=\"invisible\">';\n\n\t\t\tforeach ($arrButtons as $strButton)\n\t\t\t{\n\t\t\t\t$strButtons .= '<li>' . $strButton . '</li>';\n\t\t\t}\n\n\t\t\t$strButtons .= '</ul></div>';\n\t\t}\n\n\t\t// Add the form\n\t\treturn $version . Message::generate() . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<form id=\"tl_files\" class=\"tl_form tl_edit_form\" method=\"post\">\n<div class=\"tl_formbody_edit\">\n<input type=\"hidden\" name=\"FORM_SUBMIT\" value=\"tl_files\">\n<input type=\"hidden\" name=\"REQUEST_TOKEN\" value=\"' . REQUEST_TOKEN . '\">\n<div class=\"tl_tbox\">\n  <div class=\"widget\">\n    <h3><label for=\"ctrl_source\">' . $GLOBALS['TL_LANG']['tl_files']['editor'][0] . '</label></h3>\n    <textarea name=\"source\" id=\"ctrl_source\" class=\"tl_textarea monospace\" rows=\"12\" cols=\"80\" style=\"height:400px\" onfocus=\"Backend.getScrollOffset()\">' . \"\\n\" . htmlspecialchars($strContent) . '</textarea>' . ((Config::get('showHelp') && isset($GLOBALS['TL_LANG']['tl_files']['editor'][1])) ? '\n    <p class=\"tl_help tl_tip\">' . $GLOBALS['TL_LANG']['tl_files']['editor'][1] . '</p>' : '') . '\n  </div>\n</div>\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  ' . $strButtons . '\n</div>\n</div>\n</form>' . \"\\n\\n\" . $codeEditor;\n\t}\n\n\t/**\n\t * Protect a folder\n\t *\n\t * @throws InternalServerErrorException\n\t *\n\t * @deprecated Deprecated since Contao 4.7 to be removed in 5.0.\n\t *             Use Contao\\Folder::protect() and Contao\\Folder::unprotect() instead.\n\t */\n\tpublic function protect()\n\t{\n\t\t@trigger_error('Using DC_Folder::protect() has been deprecated and will no longer work in Contao 5.0. Use Contao\\Folder::protect() and Contao\\Folder::unprotect() instead.', E_USER_DEPRECATED);\n\n\t\tif (!is_dir($this->strRootDir . '/' . $this->intId))\n\t\t{\n\t\t\tthrow new InternalServerErrorException('Resource \"' . $this->intId . '\" is not a directory.');\n\t\t}\n\n\t\t// Protect or unprotect the folder\n\t\tif (is_file($this->strRootDir . '/' . $this->intId . '/.public'))\n\t\t{\n\t\t\t$objFolder = new Folder($this->intId);\n\t\t\t$objFolder->protect();\n\n\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t$this->Automator->generateSymlinks();\n\n\t\t\t$this->log('Folder \"' . $this->intId . '\" has been protected', __METHOD__, TL_FILES);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$objFolder = new Folder($this->intId);\n\t\t\t$objFolder->unprotect();\n\n\t\t\t$this->import(Automator::class, 'Automator');\n\t\t\t$this->Automator->generateSymlinks();\n\n\t\t\t$this->log('The protection from folder \"' . $this->intId . '\" has been removed', __METHOD__, TL_FILES);\n\t\t}\n\n\t\t$this->redirect($this->getReferer());\n\t}\n\n\t/**\n\t * Save the current value\n\t *\n\t * @param mixed $varValue\n\t *\n\t * @throws \\Exception\n\t */\n\tprotected function save($varValue)\n\t{\n\t\tif (Input::post('FORM_SUBMIT') != $this->strTable)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$arrData = $GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField];\n\n\t\t// File names\n\t\tif ($this->strField == 'name')\n\t\t{\n\t\t\tif ($this->varValue === $varValue || !file_exists($this->strRootDir . '/' . $this->strPath . '/' . $this->varValue . $this->strExtension) || !$this->isMounted($this->strPath . '/' . $this->varValue . $this->strExtension))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->import(Files::class, 'Files');\n\n\t\t\t// Trigger the save_callback\n\t\t\tif (\\is_array($arrData['save_callback']))\n\t\t\t{\n\t\t\t\tforeach ($arrData['save_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$varValue = $this->{$callback[0]}->{$callback[1]}($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$varValue = $callback($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The target exists\n\t\t\tif (strcasecmp($this->strPath . '/' . $this->varValue . $this->strExtension, $this->strPath . '/' . $varValue . $this->strExtension) !== 0 && file_exists($this->strRootDir . '/' . $this->strPath . '/' . $varValue . $this->strExtension))\n\t\t\t{\n\t\t\t\tthrow new \\Exception(sprintf($GLOBALS['TL_LANG']['ERR']['fileExists'], $varValue));\n\t\t\t}\n\n\t\t\t$arrImageTypes = StringUtil::trimsplit(',', strtolower(Config::get('validImageTypes')));\n\n\t\t\t// Remove potentially existing thumbnails (see #6641)\n\t\t\tif (\\in_array(substr($this->strExtension, 1), $arrImageTypes))\n\t\t\t{\n\t\t\t\tforeach (glob(System::getContainer()->getParameter('contao.image.target_dir') . '/*/' . $this->varValue . '-*' . $this->strExtension) as $strThumbnail)\n\t\t\t\t{\n\t\t\t\t\t$this->Files->delete(StringUtil::stripRootDir($strThumbnail));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Rename the file\n\t\t\t$this->Files->rename($this->strPath . '/' . $this->varValue . $this->strExtension, $this->strPath . '/' . $varValue . $this->strExtension);\n\n\t\t\t// New folders\n\t\t\tif (stripos($this->intId, '__new__') !== false)\n\t\t\t{\n\t\t\t\t// Update the database\n\t\t\t\tif ($this->blnIsDbAssisted && Dbafs::shouldBeSynchronized($this->strPath . '/' . $varValue . $this->strExtension))\n\t\t\t\t{\n\t\t\t\t\t$this->objActiveRecord = Dbafs::addResource($this->strPath . '/' . $varValue . $this->strExtension);\n\t\t\t\t}\n\n\t\t\t\t$this->log('Folder \"' . $this->strPath . '/' . $varValue . $this->strExtension . '\" has been created', __METHOD__, TL_FILES);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Update the database\n\t\t\t\tif ($this->blnIsDbAssisted)\n\t\t\t\t{\n\t\t\t\t\t$syncSource = Dbafs::shouldBeSynchronized($this->strPath . '/' . $this->varValue . $this->strExtension);\n\t\t\t\t\t$syncTarget = Dbafs::shouldBeSynchronized($this->strPath . '/' . $varValue . $this->strExtension);\n\n\t\t\t\t\tif ($syncSource && $syncTarget)\n\t\t\t\t\t{\n\t\t\t\t\t\tDbafs::moveResource($this->strPath . '/' . $this->varValue . $this->strExtension, $this->strPath . '/' . $varValue . $this->strExtension);\n\t\t\t\t\t}\n\t\t\t\t\telseif ($syncSource)\n\t\t\t\t\t{\n\t\t\t\t\t\tDbafs::deleteResource($this->strPath . '/' . $this->varValue . $this->strExtension);\n\t\t\t\t\t}\n\t\t\t\t\telseif ($syncTarget)\n\t\t\t\t\t{\n\t\t\t\t\t\tDbafs::addResource($this->strPath . '/' . $varValue . $this->strExtension);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->log('File or folder \"' . $this->strPath . '/' . $this->varValue . $this->strExtension . '\" has been renamed to \"' . $this->strPath . '/' . $varValue . $this->strExtension . '\"', __METHOD__, TL_FILES);\n\t\t\t}\n\n\t\t\t$strWebDir = StringUtil::stripRootDir(System::getContainer()->getParameter('contao.web_dir'));\n\n\t\t\t// Update the symlinks\n\t\t\tif (is_link($this->strRootDir . '/' . $strWebDir . '/' . $this->strPath . '/' . $this->varValue . $this->strExtension))\n\t\t\t{\n\t\t\t\t$this->Files->delete($strWebDir . '/' . $this->strPath . '/' . $this->varValue . $this->strExtension);\n\t\t\t\tSymlinkUtil::symlink($this->strPath . '/' . $varValue . $this->strExtension, $strWebDir . '/' . $this->strPath . '/' . $varValue . $this->strExtension, $this->strRootDir);\n\t\t\t}\n\n\t\t\t// Set the new value so the input field can show it\n\t\t\tif (Input::get('act') == 'editAll')\n\t\t\t{\n\t\t\t\t/** @var Session $objSession */\n\t\t\t\t$objSession = System::getContainer()->get('session');\n\n\t\t\t\t$session = $objSession->all();\n\n\t\t\t\tif (($index = array_search($this->strPath . '/' . $this->varValue . $this->strExtension, $session['CURRENT']['IDS'])) !== false)\n\t\t\t\t{\n\t\t\t\t\t$session['CURRENT']['IDS'][$index] = $this->strPath . '/' . $varValue . $this->strExtension;\n\t\t\t\t\t$objSession->replace($session);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->varValue = $varValue;\n\t\t\t$this->intId = $this->strPath . '/' . $varValue . $this->strExtension;\n\t\t}\n\t\telseif ($this->blnIsDbAssisted && $this->objActiveRecord !== null)\n\t\t{\n\t\t\t// Convert date formats into timestamps\n\t\t\tif ($varValue !== null && $varValue !== '' && \\in_array($arrData['eval']['rgxp'], array('date', 'time', 'datim')))\n\t\t\t{\n\t\t\t\t$objDate = new Date($varValue, Date::getFormatFromRgxp($arrData['eval']['rgxp']));\n\t\t\t\t$varValue = $objDate->tstamp;\n\t\t\t}\n\n\t\t\t// Make sure unique fields are unique\n\t\t\tif ((\\is_array($varValue) || (string) $varValue !== '') && $arrData['eval']['unique'] && !$this->Database->isUniqueValue($this->strTable, $this->strField, $varValue, $this->objActiveRecord->id))\n\t\t\t{\n\t\t\t\tthrow new \\Exception(sprintf($GLOBALS['TL_LANG']['ERR']['unique'], $arrData['label'][0] ?: $this->strField));\n\t\t\t}\n\n\t\t\t// Handle multi-select fields in \"override all\" mode\n\t\t\tif ($this->objActiveRecord !== null && ($arrData['inputType'] == 'checkbox' || $arrData['inputType'] == 'checkboxWizard') && $arrData['eval']['multiple'] && Input::get('act') == 'overrideAll')\n\t\t\t{\n\t\t\t\t$new = StringUtil::deserialize($varValue, true);\n\t\t\t\t$old = StringUtil::deserialize($this->objActiveRecord->{$this->strField}, true);\n\n\t\t\t\tswitch (Input::post($this->strInputName . '_update'))\n\t\t\t\t{\n\t\t\t\t\tcase 'add':\n\t\t\t\t\t\t$varValue = array_values(array_unique(array_merge($old, $new)));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'remove':\n\t\t\t\t\t\t$varValue = array_values(array_diff($old, $new));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t$varValue = $new;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (empty($varValue) || !\\is_array($varValue))\n\t\t\t\t{\n\t\t\t\t\t$varValue = '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$varValue = serialize($varValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert arrays (see #2890)\n\t\t\tif ($arrData['eval']['multiple'] && isset($arrData['eval']['csv']))\n\t\t\t{\n\t\t\t\t$varValue = implode($arrData['eval']['csv'], StringUtil::deserialize($varValue, true));\n\t\t\t}\n\n\t\t\t// Trigger the save_callback\n\t\t\tif (\\is_array($arrData['save_callback']))\n\t\t\t{\n\t\t\t\tforeach ($arrData['save_callback'] as $callback)\n\t\t\t\t{\n\t\t\t\t\tif (\\is_array($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->import($callback[0]);\n\t\t\t\t\t\t$varValue = $this->{$callback[0]}->{$callback[1]}($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t\telseif (\\is_callable($callback))\n\t\t\t\t\t{\n\t\t\t\t\t\t$varValue = $callback($varValue, $this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Save the value if there was no error\n\t\t\tif ((\\is_array($varValue) || (string) $varValue !== '' || !$arrData['eval']['doNotSaveEmpty']) && ($this->varValue != $varValue || $arrData['eval']['alwaysSave']))\n\t\t\t{\n\t\t\t\t// If the field is a fallback field, empty all other columns\n\t\t\t\tif ($varValue && $arrData['eval']['fallback'])\n\t\t\t\t{\n\t\t\t\t\t$this->Database->execute(\"UPDATE \" . $this->strTable . \" SET \" . $this->strField . \"=''\");\n\t\t\t\t}\n\n\t\t\t\t// Set the correct empty value (see #6284, #6373)\n\t\t\t\tif (!\\is_array($varValue) && (string) $varValue === '')\n\t\t\t\t{\n\t\t\t\t\t$varValue = Widget::getEmptyValueByFieldType($GLOBALS['TL_DCA'][$this->strTable]['fields'][$this->strField]['sql']);\n\t\t\t\t}\n\n\t\t\t\t$this->objActiveRecord->{$this->strField} = $varValue;\n\t\t\t\t$this->objActiveRecord->save();\n\n\t\t\t\tif (!isset($arrData['eval']['versionize']) || $arrData['eval']['versionize'] !== false)\n\t\t\t\t{\n\t\t\t\t\t$this->blnCreateNewVersion = true;\n\t\t\t\t}\n\n\t\t\t\t$this->varValue = StringUtil::deserialize($varValue);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Synchronize the file system with the database\n\t *\n\t * @return string\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tpublic function sync()\n\t{\n\t\tif (!$this->blnIsDbAssisted)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t$this->loadLanguageFile('tl_files');\n\n\t\t// Synchronize\n\t\t$strLog = Dbafs::syncFiles();\n\n\t\t// Show the results\n\t\t$arrMessages = array();\n\t\t$arrCounts   = array('Added'=>0, 'Changed'=>0, 'Unchanged'=>0, 'Moved'=>0, 'Deleted'=>0);\n\n\t\t// Read the log file\n\t\t$fh = fopen($this->strRootDir . '/' . $strLog, 'r');\n\n\t\twhile (($buffer = fgets($fh)) !== false)\n\t\t{\n\t\t\tlist($type, $file) = explode('] ', trim(substr($buffer, 1)), 2);\n\n\t\t\t// Add a message depending on the type\n\t\t\tswitch ($type)\n\t\t\t{\n\t\t\t\tcase 'Added':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_new\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncAdded'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Changed':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_info\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncChanged'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Unchanged':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_confirm hidden\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncUnchanged'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Moved':\n\t\t\t\t\tlist($source, $target) = explode(' to ', $file, 2);\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_info\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncMoved'], StringUtil::specialchars($source), StringUtil::specialchars($target)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Deleted':\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_error\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncDeleted'], StringUtil::specialchars($file)) . '</p>';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$arrMessages[] = '<p class=\"tl_error\">' . StringUtil::specialchars($buffer) . '</p>';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t++$arrCounts[$type];\n\t\t}\n\n\t\t// Close the log file\n\t\tunset($buffer);\n\t\tfclose($fh);\n\n\t\t// Confirm\n\t\tMessage::addConfirmation($GLOBALS['TL_LANG']['tl_files']['syncComplete']);\n\n\t\t$return = Message::generate() . '\n<div id=\"tl_buttons\">\n<a href=\"' . $this->getReferer(true) . '\" class=\"header_back\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['backBTTitle']) . '\" accesskey=\"b\" onclick=\"Backend.getScrollOffset()\">' . $GLOBALS['TL_LANG']['MSC']['backBT'] . '</a>\n</div>\n<div id=\"sync-results\">\n  <p class=\"left\">' . sprintf($GLOBALS['TL_LANG']['tl_files']['syncResult'], System::getFormattedNumber($arrCounts['Added'], 0), System::getFormattedNumber($arrCounts['Changed'], 0), System::getFormattedNumber($arrCounts['Unchanged'], 0), System::getFormattedNumber($arrCounts['Moved'], 0), System::getFormattedNumber($arrCounts['Deleted'], 0)) . '</p>\n  <p class=\"right\"><input type=\"checkbox\" id=\"show-hidden\" class=\"tl_checkbox\" onclick=\"Backend.toggleUnchanged()\"> <label for=\"show-hidden\">' . $GLOBALS['TL_LANG']['tl_files']['syncShowUnchanged'] . '</label></p>\n</div>\n<div id=\"result-list\">';\n\n\t\t// Add the messages\n\t\tforeach ($arrMessages as $strMessage)\n\t\t{\n\t\t\t$return .= \"\\n  \" . $strMessage;\n\t\t}\n\n\t\t$return .= '\n</div>\n<div class=\"tl_formbody_submit\">\n<div class=\"tl_submit_container\">\n  <a href=\"' . $this->getReferer(true) . '\" class=\"tl_submit\" style=\"display:inline-block\">' . $GLOBALS['TL_LANG']['MSC']['continue'] . '</a>\n</div>\n</div>';\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Return the name of the current palette\n\t *\n\t * @return string\n\t */\n\tpublic function getPalette()\n\t{\n\t\treturn $GLOBALS['TL_DCA'][$this->strTable]['palettes']['default'];\n\t}\n\n\t/**\n\t * Generate a particular subpart of the tree and return it as HTML string\n\t *\n\t * @param string  $strFolder\n\t * @param integer $level\n\t *\n\t * @return string\n\t */\n\tpublic function ajaxTreeView($strFolder, $level)\n\t{\n\t\tif (!Environment::get('isAjaxRequest'))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t$this->isValid($strFolder);\n\n\t\tif (!is_dir($this->strRootDir . '/' . $strFolder) || !$this->isMounted($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Folder \"' . $strFolder . '\" is not mounted or cannot be found.');\n\t\t}\n\n\t\t/** @var Session $objSession */\n\t\t$objSession = System::getContainer()->get('session');\n\n\t\t$blnClipboard = false;\n\t\t$arrClipboard = $objSession->get('CLIPBOARD');\n\n\t\t// Check clipboard\n\t\tif (!empty($arrClipboard[$this->strTable]))\n\t\t{\n\t\t\t$blnClipboard = true;\n\t\t\t$arrClipboard = $arrClipboard[$this->strTable];\n\t\t}\n\n\t\t$this->import(Files::class, 'Files');\n\t\t$this->import(BackendUser::class, 'User');\n\n\t\treturn $this->generateTree($this->strRootDir . '/' . $strFolder, ($level * 20), false, $this->isProtectedPath($strFolder), ($blnClipboard ? $arrClipboard : false));\n\t}\n\n\t/**\n\t * Render the file tree and return it as HTML string\n\t *\n\t * @param string  $path\n\t * @param integer $intMargin\n\t * @param boolean $mount\n\t * @param boolean $blnProtected\n\t * @param array   $arrClipboard\n\t * @param array   $arrFound\n\t *\n\t * @return string\n\t */\n\tprotected function generateTree($path, $intMargin, $mount=false, $blnProtected=true, $arrClipboard=null, $arrFound=array())\n\t{\n\t\t/** @var AttributeBagInterface $objSessionBag */\n\t\t$objSessionBag = System::getContainer()->get('session')->getBag('contao_backend');\n\n\t\t$session = $objSessionBag->all();\n\n\t\t// Get the session data and toggle the nodes\n\t\tif (Input::get('tg'))\n\t\t{\n\t\t\t$session['filetree'][Input::get('tg')] = (isset($session['filetree'][Input::get('tg')]) && $session['filetree'][Input::get('tg')] == 1) ? 0 : 1;\n\t\t\t$objSessionBag->replace($session);\n\t\t\t$this->redirect(preg_replace('/(&(amp;)?|\\?)tg=[^& ]*/i', '', Environment::get('request')));\n\t\t}\n\n\t\t$return = '';\n\t\t$files = array();\n\t\t$folders = array();\n\t\t$intSpacing = 20;\n\t\t$level = ($intMargin / $intSpacing + 1);\n\n\t\t// Mount folder\n\t\tif ($mount)\n\t\t{\n\t\t\t$folders = array($path);\n\t\t}\n\n\t\t// Scan directory and sort the result\n\t\telse\n\t\t{\n\t\t\tforeach (scan($path) as $v)\n\t\t\t{\n\t\t\t\tif (strncmp($v, '.', 1) === 0)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (preg_match('//u', $v) !== 1)\n\t\t\t\t{\n\t\t\t\t\ttrigger_error(sprintf('Path \"%s\" contains malformed UTF-8 characters.', $path . '/' . $v), E_USER_WARNING);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (is_file($path . '/' . $v))\n\t\t\t\t{\n\t\t\t\t\t$files[] = $path . '/' . $v;\n\t\t\t\t}\n\t\t\t\telseif ($v == '__new__')\n\t\t\t\t{\n\t\t\t\t\t$this->Files->rrdir(StringUtil::stripRootDir($path) . '/' . $v);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$folders[] = $path . '/' . $v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnatcasesort($folders);\n\t\t\t$folders = array_values($folders);\n\n\t\t\tnatcasesort($files);\n\t\t\t$files = array_values($files);\n\t\t}\n\n\t\t// Folders\n\t\tfor ($f=0, $c=\\count($folders); $f<$c; $f++)\n\t\t{\n\t\t\t$currentFolder = StringUtil::stripRootDir($folders[$f]);\n\n\t\t\t// Hide unsynchronized folders in the picker (see #919)\n\t\t\tif ($this->strPickerFieldType && !Dbafs::shouldBeSynchronized($currentFolder))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$md5 = substr(md5($folders[$f]), 0, 8);\n\t\t\t$content = scan($folders[$f]);\n\t\t\t$session['filetree'][$md5] = is_numeric($session['filetree'][$md5]) ? $session['filetree'][$md5] : 0;\n\t\t\t$currentEncoded = $this->urlEncode($currentFolder);\n\t\t\t$countFiles = \\count($content);\n\n\t\t\t// Subtract files that will not be shown\n\t\t\tforeach ($content as $file)\n\t\t\t{\n\t\t\t\tif (strncmp($file, '.', 1) === 0)\n\t\t\t\t{\n\t\t\t\t\t--$countFiles;\n\t\t\t\t}\n\t\t\t\telseif (!empty($arrFound) && !\\in_array($currentFolder . '/' . $file, $arrFound) && !preg_grep('/^' . preg_quote($currentFolder . '/' . $file, '/') . '\\//', $arrFound))\n\t\t\t\t{\n\t\t\t\t\t--$countFiles;\n\t\t\t\t}\n\t\t\t\telseif (!$this->blnFiles && !$this->blnFilesOnly && !is_dir($this->strRootDir . '/' . $currentFolder . '/' . $file))\n\t\t\t\t{\n\t\t\t\t\t--$countFiles;\n\t\t\t\t}\n\t\t\t\telseif (!empty($this->arrValidFileTypes) && !is_dir($this->strRootDir . '/' . $currentFolder . '/' . $file))\n\t\t\t\t{\n\t\t\t\t\t$objFile =  new File($currentFolder . '/' . $file);\n\n\t\t\t\t\tif (!\\in_array($objFile->extension, $this->arrValidFileTypes))\n\t\t\t\t\t{\n\t\t\t\t\t\t--$countFiles;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!empty($arrFound) && $countFiles < 1 && !\\in_array($currentFolder, $arrFound))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$blnIsOpen = (!empty($arrFound) || $session['filetree'][$md5] == 1);\n\n\t\t\t// Always show selected nodes\n\t\t\tif (!$blnIsOpen && !empty($this->arrPickerValue) && \\count(preg_grep('/^' . preg_quote($this->urlEncode($currentFolder), '/') . '\\//', $this->arrPickerValue)))\n\t\t\t{\n\t\t\t\t$blnIsOpen = true;\n\t\t\t}\n\n\t\t\t$return .= \"\\n  \" . '<li data-id=\"' . htmlspecialchars($currentFolder, ENT_QUOTES) . '\" class=\"tl_folder click2edit toggle_select hover-div\"><div class=\"tl_left\" style=\"padding-left:' . ($intMargin + (($countFiles < 1) ? 20 : 0)) . 'px\">';\n\n\t\t\t// Add a toggle button if there are childs\n\t\t\tif ($countFiles > 0)\n\t\t\t{\n\t\t\t\t$img = $blnIsOpen ? 'folMinus.svg' : 'folPlus.svg';\n\t\t\t\t$alt = $blnIsOpen ? $GLOBALS['TL_LANG']['MSC']['collapseNode'] : $GLOBALS['TL_LANG']['MSC']['expandNode'];\n\t\t\t\t$return .= '<a href=\"' . $this->addToUrl('tg=' . $md5) . '\" title=\"' . StringUtil::specialchars($alt) . '\" onclick=\"Backend.getScrollOffset(); return AjaxRequest.toggleFileManager(this, \\'filetree_' . $md5 . '\\', \\'' . $currentFolder . '\\', ' . $level . ')\">' . Image::getHtml($img, '', 'style=\"margin-right:2px\"') . '</a>';\n\t\t\t}\n\n\t\t\t$protected = $blnProtected;\n\n\t\t\t// Check whether the folder is public\n\t\t\tif ($protected === true && \\in_array('.public', $content) && !is_dir(Path::join($folders[$f], '.public')))\n\t\t\t{\n\t\t\t\t$protected = false;\n\t\t\t}\n\n\t\t\t$folderImg = $protected ? 'folderCP.svg' : 'folderC.svg';\n\t\t\t$folderAlt = $protected ? $GLOBALS['TL_LANG']['MSC']['folderCP'] : $GLOBALS['TL_LANG']['MSC']['folderC'];\n\n\t\t\t// Add the current folder\n\t\t\t$strFolderNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFolder)), Config::get('characterSet'));\n\t\t\t$return .= Image::getHtml($folderImg, $folderAlt) . ' <a href=\"' . $this->addToUrl('fn=' . $currentEncoded) . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['selectNode']) . '\"><strong>' . $strFolderNameEncoded . '</strong></a></div> <div class=\"tl_right\">';\n\n\t\t\t// Paste buttons\n\t\t\tif ($arrClipboard !== false && Input::get('act') != 'select')\n\t\t\t{\n\t\t\t\t$labelPasteInto = $GLOBALS['TL_LANG'][$this->strTable]['pasteinto'] ?? $GLOBALS['TL_LANG']['DCA']['pasteinto'];\n\t\t\t\t$imagePasteInto = Image::getHtml('pasteinto.svg', sprintf($labelPasteInto[1], $currentEncoded));\n\n\t\t\t\tif (\\in_array($arrClipboard['mode'], array('copy', 'cut')) && (($arrClipboard['mode'] == 'cut' && \\dirname($arrClipboard['id']) == $currentFolder) || preg_match('#^' . preg_quote(rawurldecode($arrClipboard['id']), '#') . '(/|$)#i', $currentFolder)))\n\t\t\t\t{\n\t\t\t\t\t$return .= Image::getHtml('pasteinto_.svg');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$return .= '<a href=\"' . $this->addToUrl('act=' . $arrClipboard['mode'] . '&amp;mode=2&amp;pid=' . $currentEncoded . (!\\is_array($arrClipboard['id']) ? '&amp;id=' . $arrClipboard['id'] : '')) . '\" title=\"' . StringUtil::specialchars(sprintf($labelPasteInto[1], $currentEncoded)) . '\" onclick=\"Backend.getScrollOffset()\">' . $imagePasteInto . '</a> ';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Default buttons\n\t\t\telse\n\t\t\t{\n\t\t\t\t$uploadButton = ' <a href=\"' . $this->addToUrl('&amp;act=move&amp;mode=2&amp;pid=' . $currentEncoded) . '\" title=\"' . StringUtil::specialchars(sprintf($GLOBALS['TL_LANG']['tl_files']['uploadFF'], $currentEncoded)) . '\">' . Image::getHtml('new.svg', $GLOBALS['TL_LANG'][$this->strTable]['move'][0]) . '</a>';\n\n\t\t\t\t// Only show the upload button for mounted folders\n\t\t\t\tif (!$this->User->isAdmin && \\in_array($currentFolder, $this->User->filemounts))\n\t\t\t\t{\n\t\t\t\t\t$return .= $uploadButton;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$return .= (Input::get('act') == 'select') ? '<input type=\"checkbox\" name=\"IDS[]\" id=\"ids_' . md5($currentEncoded) . '\" class=\"tl_tree_checkbox\" value=\"' . $currentEncoded . '\">' : $this->generateButtons(array('id'=>$currentEncoded, 'fileNameEncoded'=>$strFolderNameEncoded, 'type'=>'folder'), $this->strTable);\n\t\t\t\t}\n\n\t\t\t\t// Add upload button if it is missing for backwards compatibility\n\t\t\t\tif (!isset($GLOBALS['TL_DCA'][$this->strTable]['list']['operations']['upload']) && !$GLOBALS['TL_DCA'][$this->strTable]['config']['closed'] && !$GLOBALS['TL_DCA'][$this->strTable]['config']['notCreatable'] && Input::get('act') != 'select')\n\t\t\t\t{\n\t\t\t\t\t$return .= $uploadButton;\n\t\t\t\t}\n\n\t\t\t\tif ($this->strPickerFieldType)\n\t\t\t\t{\n\t\t\t\t\t$return .= $this->getPickerInputField($currentEncoded, $this->blnFilesOnly ? ' disabled' : '');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$return .= '</div><div style=\"clear:both\"></div></li>';\n\n\t\t\t// Call the next node\n\t\t\tif (!empty($content) && $blnIsOpen)\n\t\t\t{\n\t\t\t\t$return .= '<li class=\"parent\" id=\"filetree_' . $md5 . '\"><ul class=\"level_' . $level . '\">';\n\t\t\t\t$return .= $this->generateTree($folders[$f], ($intMargin + $intSpacing), false, $protected, $arrClipboard, $arrFound);\n\t\t\t\t$return .= '</ul></li>';\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->blnFiles && !$this->blnFilesOnly)\n\t\t{\n\t\t\treturn $return;\n\t\t}\n\n\t\t// Process files\n\t\tfor ($h=0, $c=\\count($files); $h<$c; $h++)\n\t\t{\n\t\t\t$thumbnail = '';\n\t\t\t$currentFile = StringUtil::stripRootDir($files[$h]);\n\n\t\t\t$objFile = new File($currentFile);\n\n\t\t\tif (!empty($this->arrValidFileTypes) && !\\in_array($objFile->extension, $this->arrValidFileTypes))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Ignore files not matching the search criteria\n\t\t\tif (!empty($arrFound) && !\\in_array($currentFile, $arrFound))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$currentEncoded = $this->urlEncode($currentFile);\n\t\t\t$return .= \"\\n  \" . '<li data-id=\"' . htmlspecialchars($currentFile, ENT_QUOTES) . '\" class=\"tl_file click2edit toggle_select hover-div\"><div class=\"tl_left\" style=\"padding-left:' . ($intMargin + $intSpacing) . 'px\">';\n\t\t\t$thumbnail .= ' <span class=\"tl_gray\">(' . $this->getReadableSize($objFile->filesize);\n\n\t\t\tif ($objFile->width && $objFile->height)\n\t\t\t{\n\t\t\t\t$thumbnail .= ', ' . $objFile->width . 'x' . $objFile->height . ' px';\n\t\t\t}\n\n\t\t\t$thumbnail .= ')</span>';\n\n\t\t\t// Generate the thumbnail\n\t\t\tif ($objFile->isImage && (!$objFile->isSvgImage || $objFile->viewHeight > 0) && Config::get('thumbnails') && \\in_array($objFile->extension, System::getContainer()->getParameter('contao.image.valid_extensions')))\n\t\t\t{\n\t\t\t\t$blnCanResize = true;\n\n\t\t\t\t// Check the maximum width and height if the GDlib is used to resize images\n\t\t\t\tif (!$objFile->isSvgImage && System::getContainer()->get('contao.image.imagine') instanceof Imagine)\n\t\t\t\t{\n\t\t\t\t\t$blnCanResize = $objFile->height <= Config::get('gdMaxImgHeight') && $objFile->width <= Config::get('gdMaxImgWidth');\n\t\t\t\t}\n\n\t\t\t\tif ($blnCanResize)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Inline the image if no preview image will be generated (see #636)\n\t\t\t\t\t\tif ($objFile->height !== null && $objFile->height <= 75 && $objFile->width !== null && $objFile->width <= 100)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$thumbnail .= '<br><img src=\"' . $objFile->dataUri . '\" width=\"' . $objFile->width . '\" height=\"' . $objFile->height . '\" alt=\"\" class=\"preview-image\">';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$thumbnail .= '<br>' . Image::getHtml(System::getContainer()->get('contao.image.image_factory')->create($this->strRootDir . '/' . rawurldecode($currentEncoded), array(100, 75, ResizeConfiguration::MODE_BOX))->getUrl($this->strRootDir), '', 'class=\"preview-image\" loading=\"lazy\"');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$importantPart = System::getContainer()->get('contao.image.image_factory')->create($this->strRootDir . '/' . rawurldecode($currentEncoded))->getImportantPart();\n\n\t\t\t\t\t\tif ($importantPart->getX() > 0 || $importantPart->getY() > 0 || $importantPart->getWidth() < 1 || $importantPart->getHeight() < 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$thumbnail .= ' ' . Image::getHtml(System::getContainer()->get('contao.image.image_factory')->create($this->strRootDir . '/' . rawurldecode($currentEncoded), (new ResizeConfiguration())->setWidth(80)->setHeight(60)->setMode(ResizeConfiguration::MODE_BOX)->setZoomLevel(100))->getUrl($this->strRootDir), '', 'class=\"preview-important\" loading=\"lazy\"');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$thumbnail .= '<br><p class=\"preview-image broken-image\">Broken image!</p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$strFileNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFile)), Config::get('characterSet'));\n\t\t\t$iconAlt = sprintf($GLOBALS['TL_LANG']['MSC']['typeOfFile'], strtoupper($objFile->extension));\n\n\t\t\t// No popup links for protected files, templates and in the popup file manager\n\t\t\tif ($blnProtected || $this->strTable == 'tl_templates' || Input::get('popup'))\n\t\t\t{\n\t\t\t\t$return .= Image::getHtml($objFile->icon, $iconAlt) . ' ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$return .= '<a href=\"' . $currentEncoded . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['view']) . '\" target=\"_blank\">' . Image::getHtml($objFile->icon, $iconAlt) . '</a> ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';\n\t\t\t}\n\n\t\t\t// Buttons\n\t\t\tif ($arrClipboard !== false && Input::get('act') != 'select')\n\t\t\t{\n\t\t\t\t$_buttons = '&nbsp;';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$_buttons = (Input::get('act') == 'select') ? '<input type=\"checkbox\" name=\"IDS[]\" id=\"ids_' . md5($currentEncoded) . '\" class=\"tl_tree_checkbox\" value=\"' . $currentEncoded . '\">' : $this->generateButtons(array('id'=>$currentEncoded, 'fileNameEncoded'=>$strFileNameEncoded, 'type'=>'file'), $this->strTable);\n\n\t\t\t\tif ($this->strPickerFieldType)\n\t\t\t\t{\n\t\t\t\t\t$_buttons .= $this->getPickerInputField($currentEncoded);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$return .= $_buttons . '</div><div style=\"clear:both\"></div></li>';\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Return a search form that allows to search results using regular expressions\n\t *\n\t * @return string\n\t */\n\tprotected function searchMenu()\n\t{\n\t\t/** @var AttributeBagInterface $objSessionBag */\n\t\t$objSessionBag = System::getContainer()->get('session')->getBag('contao_backend');\n\n\t\t$session = $objSessionBag->all();\n\n\t\t// Store search value in the current session\n\t\tif (Input::post('FORM_SUBMIT') == 'tl_filters')\n\t\t{\n\t\t\t$strKeyword = ltrim(Input::postRaw('tl_value'), '*');\n\n\t\t\t$session['search'][$this->strTable]['value'] = $strKeyword;\n\n\t\t\t$objSessionBag->replace($session);\n\t\t}\n\n\t\t// Set the search value from the session\n\t\telseif ((string) $session['search'][$this->strTable]['value'] !== '')\n\t\t{\n\t\t\t$searchValue = $session['search'][$this->strTable]['value'];\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$this->Database->prepare(\"SELECT '' REGEXP ?\")->execute($searchValue);\n\t\t\t}\n\t\t\tcatch (DriverException $exception)\n\t\t\t{\n\t\t\t\t// Quote search string if it is not a valid regular expression\n\t\t\t\t$searchValue = preg_quote($searchValue);\n\t\t\t}\n\n\t\t\t$strPattern = \"CAST(name AS CHAR) REGEXP ?\";\n\n\t\t\tif (substr(Config::get('dbCollation'), -3) == '_ci')\n\t\t\t{\n\t\t\t\t$strPattern = \"LOWER(CAST(name AS CHAR)) REGEXP LOWER(?)\";\n\t\t\t}\n\n\t\t\tif (isset($GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey']))\n\t\t\t{\n\t\t\t\tlist($t, $f) = explode('.', $GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['foreignKey'], 2);\n\t\t\t\t$this->procedure[] = \"(\" . $strPattern . \" OR \" . sprintf($strPattern, \"(SELECT \" . Database::quoteIdentifier($f) . \" FROM $t WHERE $t.id=\" . $this->strTable . \".name)\") . \")\";\n\t\t\t\t$this->values[] = $searchValue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->procedure[] = $strPattern;\n\t\t\t}\n\n\t\t\t$this->values[] = $searchValue;\n\t\t}\n\n\t\t$active = isset($session['search'][$this->strTable]['value']) && (string) $session['search'][$this->strTable]['value'] !== '';\n\n\t\treturn '\n    <div class=\"tl_search tl_subpanel\">\n      <strong>' . $GLOBALS['TL_LANG']['MSC']['search'] . ':</strong>\n      <select name=\"tl_field\" class=\"tl_select' . ($active ? ' active' : '') . '\">\n        <option value=\"name\">' . ($GLOBALS['TL_DCA'][$this->strTable]['fields']['name']['label'][0] ?: (\\is_array($GLOBALS['TL_LANG']['MSC']['name']) ? $GLOBALS['TL_LANG']['MSC']['name'][0] : $GLOBALS['TL_LANG']['MSC']['name'])) . '</option>\n      </select>\n      <span>=</span>\n      <input type=\"search\" name=\"tl_value\" class=\"tl_text' . ($active ? ' active' : '') . '\" value=\"' . StringUtil::specialchars($session['search'][$this->strTable]['value']) . '\">\n    </div>';\n\t}\n\n\t/**\n\t * Return true if the current folder is mounted\n\t *\n\t * @param string $strFolder\n\t *\n\t * @return boolean\n\t */\n\tprotected function isMounted($strFolder)\n\t{\n\t\tif (!$strFolder)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($this->arrFilemounts) && !\\is_array($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root']) && $GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['root'] !== false)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t$path = $strFolder;\n\n\t\twhile (\\is_array($this->arrFilemounts) && substr_count($path, '/') > 0)\n\t\t{\n\t\t\tif (\\in_array($path, $this->arrFilemounts))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t$path = \\dirname($path);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check a file operation\n\t *\n\t * @param string $strFile\n\t *\n\t * @return boolean\n\t *\n\t * @throws AccessDeniedException\n\t */\n\tprotected function isValid($strFile)\n\t{\n\t\t$strFolder = Input::get('pid', true);\n\n\t\t// Check the path\n\t\tif (Validator::isInsecurePath($strFile))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Invalid file name \"' . $strFile . '\" (hacking attempt).');\n\t\t}\n\n\t\tif (Validator::isInsecurePath($strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Invalid folder name \"' . $strFolder . '\" (hacking attempt).');\n\t\t}\n\n\t\t// Check for valid file types\n\t\tif (!empty($this->arrValidFileTypes) && is_file($this->strRootDir . '/' . $strFile))\n\t\t{\n\t\t\t$fileinfo = preg_replace('/.*\\.(.*)$/u', '$1', $strFile);\n\n\t\t\tif (!\\in_array(strtolower($fileinfo), $this->arrValidFileTypes))\n\t\t\t{\n\t\t\t\tthrow new AccessDeniedException('File \"' . $strFile . '\" is not an allowed file type.');\n\t\t\t}\n\t\t}\n\n\t\t// Check whether the file is within the files directory\n\t\tif (!preg_match('/^' . preg_quote(Config::get('uploadPath'), '/') . '/i', $strFile))\n\t\t{\n\t\t\tthrow new AccessDeniedException('File or folder \"' . $strFile . '\" is not within the files directory.');\n\t\t}\n\n\t\t// Check whether the parent folder is within the files directory\n\t\tif ($strFolder && !preg_match('/^' . preg_quote(Config::get('uploadPath'), '/') . '/i', $strFolder))\n\t\t{\n\t\t\tthrow new AccessDeniedException('Parent folder \"' . $strFolder . '\" is not within the files directory.');\n\t\t}\n\n\t\t// Do not allow file operations on root folders\n\t\tif (\\in_array(Input::get('act'), array('edit', 'paste', 'delete')))\n\t\t{\n\t\t\t$this->import(BackendUser::class, 'User');\n\n\t\t\tif (!$this->User->isAdmin && \\in_array($strFile, $this->User->filemounts))\n\t\t\t{\n\t\t\t\tthrow new AccessDeniedException('Attempt to edit, copy, move or delete the root folder \"' . $strFile . '\".');\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return an array of encrypted folder names\n\t *\n\t * @param string $strPath\n\t *\n\t * @return array\n\t */\n\tprotected function getMD5Folders($strPath)\n\t{\n\t\t$arrFiles = array();\n\n\t\tforeach (scan($this->strRootDir . '/' . $strPath) as $strFile)\n\t\t{\n\t\t\tif (!is_dir($this->strRootDir . '/' . $strPath . '/' . $strFile))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$arrFiles[substr(md5($this->strRootDir . '/' . $strPath . '/' . $strFile), 0, 8)] = 1;\n\n\t\t\t// Do not use array_merge() here (see #8105)\n\t\t\tforeach ($this->getMD5Folders($strPath . '/' . $strFile) as $k=>$v)\n\t\t\t{\n\t\t\t\t$arrFiles[$k] = $v;\n\t\t\t}\n\t\t}\n\n\t\treturn $arrFiles;\n\t}\n\n\t/**\n\t * Check if a path is protected (see #287)\n\t *\n\t * @param string $path\n\t *\n\t * @return boolean\n\t */\n\tprotected function isProtectedPath($path)\n\t{\n\t\treturn !(new Folder($path))->isUnprotected();\n\t}\n\n\tprotected function getFormFieldSuffix()\n\t{\n\t\treturn md5($this->initialId ?: $this->intId);\n\t}\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tpublic function initPicker(PickerInterface $picker)\n\t{\n\t\t$attributes = parent::initPicker($picker);\n\n\t\tif (null === $attributes)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\t$this->blnFiles = isset($attributes['files']) && $attributes['files'];\n\t\t$this->blnFilesOnly = isset($attributes['filesOnly']) && $attributes['filesOnly'];\n\n\t\tif (isset($attributes['path']))\n\t\t{\n\t\t\t$strPath = (string) $attributes['path'];\n\n\t\t\tif (Validator::isInsecurePath($strPath) || !is_dir($this->strRootDir . '/' . $strPath))\n\t\t\t{\n\t\t\t\tthrow new \\RuntimeException('Invalid path ' . $strPath);\n\t\t\t}\n\n\t\t\t$strNode = System::getContainer()->get('session')->getBag('contao_backend')->get('tl_files_node');\n\n\t\t\t// If the files node is not within the current path, remove it (see #856)\n\t\t\tif ($strNode && ($i = array_search($strNode, $this->arrFilemounts)) !== false && strncmp($strNode . '/', $strPath . '/', \\strlen($strPath) + 1) !== 0)\n\t\t\t{\n\t\t\t\tunset($this->arrFilemounts[$i], $GLOBALS['TL_DCA']['tl_files']['list']['sorting']['breadcrumb']);\n\t\t\t}\n\n\t\t\t// Allow only those roots that are allowed in root nodes\n\t\t\tif (!empty($this->arrFilemounts))\n\t\t\t{\n\t\t\t\t$blnValid = false;\n\n\t\t\t\tforeach ($this->arrFilemounts as $strFolder)\n\t\t\t\t{\n\t\t\t\t\tif (0 === strpos($strPath, $strFolder))\n\t\t\t\t\t{\n\t\t\t\t\t\t$blnValid = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$blnValid)\n\t\t\t\t{\n\t\t\t\t\t$strPath = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->arrFilemounts = array($strPath);\n\t\t}\n\n\t\tif (isset($attributes['extensions']))\n\t\t{\n\t\t\t$this->arrValidFileTypes = StringUtil::trimsplit(',', strtolower($attributes['extensions']));\n\t\t}\n\n\t\treturn $attributes;\n\t}\n}\n\nclass_alias(DC_Folder::class, 'DC_Folder');\n"], "filenames": ["core-bundle/src/Resources/contao/drivers/DC_Folder.php"], "buggy_code_start_loc": [2527], "buggy_code_end_loc": [2951], "fixing_code_start_loc": [2528], "fixing_code_end_loc": [2958], "type": "CWE-22", "message": "Contao is an open source content management system. Prior to versions 4.9.40, 4.13.21, and 5.1.4, logged in users can list arbitrary system files in the file manager by manipulating the Ajax request. However, it is not possible to read the contents of these files. Users should update to Contao 4.9.40, 4.13.21 or 5.1.4 to receive a patch. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-29200", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-25T18:15:09.510", "lastModified": "2023-05-04T19:35:45.310", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Contao is an open source content management system. Prior to versions 4.9.40, 4.13.21, and 5.1.4, logged in users can list arbitrary system files in the file manager by manipulating the Ajax request. However, it is not possible to read the contents of these files. Users should update to Contao 4.9.40, 4.13.21 or 5.1.4 to receive a patch. There are no known workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:contao:contao:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "4.9.40", "matchCriteriaId": "899AC8E3-897E-4949-937A-DC2BE6C83064"}, {"vulnerable": true, "criteria": "cpe:2.3:a:contao:contao:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.10.0", "versionEndExcluding": "4.13.21", "matchCriteriaId": "374F1348-15EC-4952-B6B7-3E19BE0950DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:contao:contao:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.1.4", "matchCriteriaId": "F47206DC-DFB3-43F7-BD46-67C4893F1A37"}]}]}], "references": [{"url": "https://contao.org/en/security-advisories/directory-traversal-in-the-file-manager", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/contao/contao/commit/6f3e705f4ff23f4419563d09d8485793569f31df", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/contao/contao/security/advisories/GHSA-fp7q-xhhw-6rj3", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/contao/contao/commit/6f3e705f4ff23f4419563d09d8485793569f31df"}}