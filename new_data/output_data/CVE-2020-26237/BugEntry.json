{"buggy_code": ["## Version 10.1.1\n\nFixes:\n\n- Resolve issue on Node 6 due to dangling comma (#2608) [Edwin Hoogerbeets][]\n- Resolve `index.d.ts is not a module` error (#2603) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n[Edwin Hoogerbeets]: https://github.com/ehoogerbeets\n\n\n## Version 10.1.0\n\nNew themes:\n\n- *NNFX* and *NNFX-dark* by [Jim Mason][]\n- *lioshi* by [lioshi][]\n\nParser Engine:\n\n- (parser) Now escapes quotes in text content when escaping HTML (#2564) [Josh Goebel][]\n- (parser) Adds `keywords.$pattern` key to grammar definitions (#2519) [Josh Goebel][]\n- (parser) Adds SHEBANG utility mode [Josh Goebel][]\n- (parser) Adds `registerAliases` method (#2540) [Taufik Nurrohman][]\n- (enh) Added `on:begin` callback for modes (#2261) [Josh Goebel][]\n- (enh) Added `on:end` callback for modes (#2261) [Josh Goebel][]\n- (enh) Added ability to programatically ignore begin and end matches (#2261) [Josh Goebel][]\n- (enh) Added `END_SAME_AS_BEGIN` mode to replace `endSameAsBegin` parser attribute (#2261) [Josh Goebel][]\n- (fix) `fixMarkup` would rarely destroy markup when `useBR` was enabled (#2532) [Josh Goebel][]\n\nDeprecations:\n\n- `htmlbars` grammar is now deprecated. Use `handlebars` instead. (#2344) [Nils Knappmeier][]\n- when using `highlightBlock` `result.re` deprecated. Use `result.relevance` instead. (#2552) [Josh Goebel][]\n- ditto for `result.second_best.re` => `result.second_best.relevance` (#2552)\n- `lexemes` is now deprecated in favor of `keywords.$pattern` key (#2519) [Josh Goebel][]\n- `endSameAsBegin` is now deprecated. (#2261) [Josh Goebel][]\n\nLanguage Improvements:\n\n- fix(groovy) strings are not allowed inside ternary clauses (#2217) [Josh Goebel][]\n- fix(typescript) add `readonly` keyword (#2562) [Martin (Lhoerion)][]\n- fix(javascript) fix regex inside parens after a non-regex (#2530) [Josh Goebel][]\n- enh(typescript) use identifier to match potential keywords, preventing false positivites (#2519) [Josh Goebel][]\n- enh(javascript) use identifier to match potential keywords, preventing false positivites (#2519) [Josh Goebel][]\n- [enh] Add `OPTIMIZE:` and `HACK:` to the labels highlighted inside comments [Josh Goebel][]\n- enh(typescript/javascript/coffeescript/livescript) derive ECMAscript keywords from a common foudation (#2518) [Josh Goebel][]\n- enh(typescript) add setInterval, setTimeout, clearInterval, clearTimeout (#2514) [Josh Goebel][]\n- enh(javascript) add setInterval, setTimeout, clearInterval, clearTimeout (#2514) [Vania Kucher][]\n- enh(cpp) add `pair`, `make_pair`, `priority_queue` as built-ins (#2538) [Hankun Lin][]\n- enh(cpp) recognize `priority_queue` `pair` as cpp containers (#2541) [Hankun Lin][]\n- fix(javascript) prevent `set` keyword conflicting with setTimeout, etc. (#2514) [Vania Kucher][]\n- fix(cpp) Fix highlighting of unterminated raw strings (#2261) [David Benjamin][]\n- fix(javascript) `=>` function with nested `()` in params now works (#2502) [Josh Goebel][]\n- fix(typescript) `=>` function with nested `()` in params now works (#2502) [Josh Goebel][]\n- fix(yaml) Fix tags to include non-word characters (#2486) [Peter Plantinga][]\n- fix(swift) `@objcMembers` was being partially highlighted (#2543) [Nick Randall][]\n- enh(dart) Add `late` and `required` keywords, the `Never` built-in type, and nullable built-in types (#2550) [Sam Rawlins][]\n- enh(erlang) Add underscore separators to numeric literals (#2554) [Sergey Prokhorov][]\n- enh(handlebars) Support for sub-expressions, path-expressions, hashes, block-parameters and literals (#2344) [Nils Knappmeier][]\n- enh(protobuf) Support multiline comments (#2597) [Pavel Evstigneev][]\n- fix(toml) Improve key parsing (#2595) [Antoine du Hamel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n[Peter Plantinga]: https://github.com/pplantinga\n[David Benjamin]: https://github.com/davidben\n[Vania Kucher]: https://github.com/qWici\n[Hankun Lin]: https://github.com/Linhk1606\n[Nick Randall]: https://github.com/nicked\n[Sam Rawlins]: https://github.com/srawlins\n[Sergey Prokhorov]: https://github.com/seriyps\n[Nils Knappmeier]: https://github.com/nknapp\n[Martin (Lhoerion)]: https://github.com/Lhoerion\n[Jim Mason]: https://github.com/RocketMan\n[lioshi]: https://github.com/lioshi\n[Pavel Evstigneev]: https://github.com/Paxa\n[Antoine du Hamel]: https://github.com/aduh95\n\n\n## Version 10.0.2\n\nBrower build:\n\n- [Issue](https://github.com/highlightjs/highlight.js/issues/2505) (bug) Fix: Version 10 fails to load as CommonJS module. (#2511) [Josh Goebel][]\n- [Issue](https://github.com/highlightjs/highlight.js/issues/2505) (removal) AMD module loading support has been removed. (#2511) [Josh Goebel][]\n\nParser Engine Changes:\n\n- [Issue](https://github.com/highlightjs/highlight.js/issues/2522) fix(parser) Fix freez issue with illegal 0 width matches (#2524) [Josh Goebel][]\n\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 10.0.1\n\nParser Engine Changes:\n\n- (bug) Fix sublanguage with no relevance score (#2506) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 10.0.0\n\nNew languages:\n\n- add(php-template) Explicit language to detect PHP templates (vs xml) [Josh Goebel][]\n- enh(python) Added `python-repl` for Python REPL sessions\n- add(never) Added 3rd party Never language support\n\nNew themes:\n\n- *Srcery* by [Chen Bin][]\n\nParser Engine Changes:\n\n- (bug) Fix `beginKeywords` to ignore . matches (#2434) [Josh Goebel][]\n- (enh) add `before:highlight` plugin API callback (#2395) [Josh Goebel][]\n- (enh) add `after:highlight` plugin API callback (#2395) [Josh Goebel][]\n- (enh) split out parse tree generation and HTML rendering concerns (#2404) [Josh Goebel][]\n- (enh) every language can have a `name` attribute now (#2400) [Josh Goebel][]\n- (enh) improve regular expression detect (less false-positives) (#2380) [Josh Goebel][]\n- (enh) make `noHighlightRe` and `languagePrefixRe` configurable (#2374) [Josh Goebel][]\n\nLanguage Improvements:\n\n- enh(python) Exclude parens from functions params (#2490) [\u00c1lvaro Mond\u00e9jar][]\n- enh(swift) Add `compactMap` to keywords as built_in (#2478) [Omid Golparvar][]\n- enh(nim) adds `func` keyword (#2468) [Adnan Yaqoob][]\n- enh(xml) deprecate ActionScript inside script tags (#2444) [Josh Goebel][]\n- fix(javascript) prevent get/set variables conflicting with keywords (#2440) [Josh Goebel][]\n- bug(clojure) Now highlights `defn-` properly (#2438) [Josh Goebel][]\n- enh(bash) default value is another variable (#2439) [Josh Goebel][]\n- enh(bash) string nested within string (#2439) [Josh Goebel][]\n- enh(bash) Add arithmetic expression support (#2439) [Josh Goebel][]\n- enh(clojure) Add support for global definitions name (#2347) [Alexandre Grison][]\n- enh(fortran) Support Fortran 77 style comments (#2416) [Josh Goebel][]\n- (csharp) add support for `@identifier` style identifiers (#2414) [Josh Goebel][]\n- fix(elixir) Support function names with a slash (#2406) [Josh Goebel][]\n- fix(javascript) comma is allowed in a \"value container\" (#2403) [Josh Goebel][]\n- enh(apache) add `deny` and `allow` keywords [Josh Goebel][]\n- enh(apache) highlight numeric attributes values [Josh Goebel][]\n- enh(apache) highlight IP addresses, ports, and strings in sections [Josh Goebel][]\n- enh(php) added more keywords and include `<?=` syntax to meta [Taufik Nurrohman][]\n- fix(protobuf) Fix `rpc` when followed by a block (#) [Josh Goebel][]\n- enh(zephir) almost complete rework of the zephir grammar (#2387) [Josh Goebel][]\n- (markdown) much improved code block support (#2382) [Josh Goebel][]\n- (markdown) improve bold/italic nesting (#2382) [Josh Goebel][]\n- enh(csharp) Support `where` keyword as class constraint (#2378) [Josh Goebel][]\n- enh(csharp) Allow reference path in class inheritance lists (#2378) [Josh Goebel][]\n- enh(csharp) Add generic modifiers (in, out) (#2378) [Josh Goebel][]\n- (fortran) enh(fortran) support intrinsic data types (#2379) [Josh Goebel][]\n- enh(java) annotations can include numbers (#2377) [Josh Goebel][]\n- enh(java) annotations can take params (#2377) [Josh Goebel][]\n- enh(java) allow annotations inside function call params (#2377) [Josh Goebel][]\n- enh(parser) pre/post-highlightBlock callbacks via plugin (#2285) [Josh Goebel][]\n- (fortran) Add Fortran 2018 keywords and coarray intrinsics (#2361) [Sam Miller][]\n- (delphi) highlight hexadecimal, octal, and binary numbers (#2370) [Robert Riebisch]()\n- enh(plaintext) added `text` and `txt` as alias (#2360) [Taufik Nurrohman][]\n- enh(powershell) added PowerShell v5.1/v7 default aliases as \"built_in\"s (#2423) [Sean Williams][]\n- enh(yaml) added support for timestamps (#2475) [Peter Plantinga][]\n\nDeveloper Tools:\n\n- added Dockerfile for optionally developing with a container\n\n[Omid Golparvar]: https://github.com/omidgolparvar\n[Alexandre Grison]: https://github.com/agrison\n[Josh Goebel]: https://github.com/yyyc514\n[Chen Bin]: https://github.com/redguardtoo\n[Sam Miller]: https://github.com/smillerc\n[Robert Riebisch]: https://github.com/bttrx\n[Taufik Nurrohman]: https://github.com/taufik-nurrohman\n[Josh Goebel]: https://github.com/yyyc514\n[Sean Williams]: https://github.com/hmmwhatsthisdo\n[Adnan Yaqoob]: https://github.com/adnanyaqoobvirk\n[\u00c1lvaro Mond\u00e9jar]: https://github.com/mondeja\n\n\n## Version 9.18.1\n\nGrammar Improvements:\n\n- bug(coffeescript) fix freezing bug due to badly behaved regex (#2376) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 9.18.0\n\nNew languages:\n\n- none.\n\nNew themes:\n\n- none.\n\nCore Changes:\n\n- none.\n\nLanguage Improvements:\n\n- (javascript) fix JSX self-closing tag issues (#2322) [Josh Goebel][]\n- (fortran) added `block` and `endblock` keywords (#2343) [Philipp Engel][]\n- (javascript) support jsx fragments (#2333) [Josh Goebel][]\n- (ini) support TOML arrays, clean up grammar (#2335) [Josh Goebel][]\n- (vbnet) add nameof operator to the keywords (#2329) [Youssef Victor][]\n- (stan) updated with improved coverage of language keywords and patterns. (#1829) [Jeffrey Arnold][]\n- enh(cpp) Detect namespaced function types (`A::typeName func(...)`) (#2332) [Josh Goebel][]\n- enh(cpp) Detect namespaced functions also (`A::functionName`) (#2332) [Josh Goebel][]\n- enh(cpp) Properly detect decltype(auto) (#2332) [Josh Goebel][]\n- enh(cpp) recognize primitive types (`int8_t`, etc.) as function types (#2332) [Josh Goebel][]\n\nDeveloper Tools:\n\n- feat(developer): add button to show parsed structure (#2345) [Nils Knappmeier][]\n\n[Jeffrey Arnold]: https://github.com/jrnold\n[Josh Goebel]: https://github.com/yyyc514\n[Philipp Engel]: https://github.com/interkosmos\n[Youssef Victor]: https://github.com/Youssef1313\n[Nils Knappmeier]: https://github.com/nknapp\n\n\n## Version 9.17.1\n\nFixes:\n\n- fix(parser): resolve IE 11 issue with Object.freeze() (#2319) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 9.17.0\n\nNew languages:\n\n- none.\n\nNew themes:\n\n- *Gradient Dark* by [Samia Ali][]\n\nCore Improvements:\n\n- chore(parser): switch from `createElementNS` to `createElement` (#2314) [Josh Goebel][]\n- enh(parser): add better error when a language requirement is missing (#2311) [Josh Goebel][]\n- fix(parser/docs): disallow `self` mode at the top-level of a language (#2294) [Josh Goebel][]\n- enh(parser) add safe & debug modes.  Better error handling for crash conditions. (#2286) [Josh Goebel][]\n- fix(parser): Fix merger HTML attribute quoting (#2235) [Josh Goebel][]\n- fix(parser): Look-ahead regex now work for end matches also (#2237) [Josh Goebel][]\n- fix(parser): Better errors when a language is missing (#2236) [Josh Goebel][]\n- fix(parser): freeze built-in modes to prevent grammars altering them (#2271) [Josh Goebel][]\n- fix(themes): fix inconsistencies between some themes padding/spacing (#2300) [Josh Goebel][]\n- ehh(build) Add CI check for building a \"use strict\" safe rollup package from NPM builds (#2247) [Josh Goebel][]\n- fix(pkg): Prefix global addEventListener with window to be able to minify with closure compiler (#2305) [Kirill Saksin]()\n\nLanguage Improvements:\n\n- fix(sql): backslash is not used to escape in strings in standard SQL (#1748) [Mike Schall][]\n- enh(ebnf) add backticks as additional string variant (#2290) [Chris Marchesi][]\n- chore(javascript): add esm related extensions to aliases (#2298) [Rongjian Zhang][]\n- fix(kotlin): fix termination of \"\"\" string literals (#2295) [Josh Goebel][]\n- fix(mercury): don't change global STRING modes (#2271) [Josh Goebel][]\n- enh(xml) expand and improve document type highlighting (#2287) [w3suli][]\n- enh(ebnf) add underscore as allowed meta identifier character, and dot as terminator (#2281) [Chris Marchesi][]\n- fix(makefile) fix double relevance for assigns, improves auto-detection (#2278) [Josh Goebel][]\n- enh(xml) support for highlighting entities (#2260) [w3suli][]\n- enh(gml) fix naming of keyword class (consistency fix) (#2254) [Liam Nobel][]\n- enh(javascript): Add support for jsdoc comments (#2245) [Milutin Kristofic][]\n- fix(python) fix `if` getting confused as an f-string (#2200) [Josh Goebel][] and [Carl Baxter][]\n- enh(powershell) major overhaul, huge improvements (#2224)\n- enh(css) Improve @rule highlighting, including properties (#2241) [Josh Goebel][]\n- enh(css) Improve highlighting of numbers inside expr/func `calc(2px+3px)` (#2241)\n- enh(scss) Pull some of the CSS improvements back into SCSS (#2241)\n- fix(go): Fix escaped character literals (#2266) [David Benjamin][]\n- fix(objectivec): Fix various preprocessor highlighting issues (#2265) [David Benjamin][]\n- fix(objectivec): Handle multibyte character literals (#2268) [David Benjamin][]\n- enh(cpp): Add additional keywords (#2289) [Adrian Ostrowski][]\n\n[Josh Goebel]: https://github.com/yyyc514\n[Liam Nobel]: https://github.com/liamnobel\n[Carl Baxter]: https://github.com/cdbax\n[Milutin Kristofic]: https://github.com/milutin\n[w3suli]: https://github.com/w3suli\n[David Benjamin]: https://github.com/davidben\n[Chris Marchesi]: https://github.com/vancluever\n[Adrian Ostrowski]: https://github.com/aostrowski\n[Rongjian Zhang]: https://github.com/pd4d10\n[Mike Schall]: https://github.com/schallm\n[Kirill Saksin]: https://github.com/saksmt\n[Samia Ali]:https://github.com/samiaab1990\n\n\n## Version 9.16.2\n\nNew languages:\n  none.\n\nNew styles:\n  none.\n\nImprovements:\n- fix(arduino) Resolves issue with arduino.js not being \"use strict\" safe (#2247)\n\n\n## Version 9.16.1\n\nNew languages:\n  none.\n\nNew styles:\n- *Night Owl* by [Carl Baxter][]\n\nImprovements:\n- Add CLI tool to quickly check for relevance conflicts [Mark Ellis][] (#1554)\n- enhance(twig) update list of filter and tags (#2090)\n- fix(crystal): correctly highlight `!~` method definition (#2222)\n- fix dropping characters if we choke up on a 0-width match (#2219)\n- (accesslog) improve accesslog relevancy scoring (#2172)\n- fix(shell): fix parsing of prompts with forward slash (#2218)\n- improve parser to properly support look-ahead regex in begin matchers (#2135)\n- blacklist super-common keywords from having relevance (#2179)\n- fix(swift): support for `@dynamicMemberLookup` and `@propertyWrapper` (#2202)\n- fix: `endWithParent` inside `starts` now always works (#2201)\n- fix(typescript): constructor in declaration doesn't break highlighting\n- fix(typescript): only match function keyword as a separate identifier (#2191)\n- feature(arduino) make arduino a super-set of cpp grammar\n- fix(javascript): fix object attributes immediately following line comments\n- fix(xml): remove `vbscript` as potential script tag subLanguage\n- fix(Elixir): improve regex for numbers\n- fix(YAML): improve matching for keys, blocks and numbers\n- fix(Pony): improve regex for numbers\n- fix(handlebars): add support for raw-blocks, and triple-mustaches(#2175)\n- fix(handlebars): fix parsing of block-comments containing closing mustaches (#2175)\n- fix(handlebars): add support for segment-literal notation, and escaped mustaches (#2184)\n- JSON: support for comments in JSON (#2016)\n- fix(cpp): improve string literal matching\n- fix(highlight.js): omit empty span-tags in the output (#2182)\n- fix(Go): improve function declaration matching\n- fix(python): added support for f-string literal curly braces (#2195)\n- fix(cpp): add `future` built-in (#1610)\n- fix(python): support comments within function parameters (#2214)\n\n[Carl Baxter]: https://github.com/cdbax\n[Mark Ellis]: https://github.com/ellismarkf\n\n## Version 9.15.10\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n  - support for ruby's squiggly heredoc (#2049)\n  - support css custom properties (#2082)\n  - fix(PureBASIC): update to 5.60 (#1508)\n  - fix(Kotlin): parenthesized types in function declaration (#2107)\n  - fix(Kotlin): nested comment (#2104)\n  - fix(isbl): contains key typo (#2103)\n  - fix(github-gist.css): match Github styles (#2100)\n  - fix(elm): update to latest elm syntax (#2088)\n  - fix: Support highlighting inline HTML and CSS tagged template strings in JS and TS (#2105)\n  - feat(YAML): add YAML to common languages (#1952)\n  - feat(xml): Add support for Windows Script File (.wsf), inline VBScript in XML `script` tags (#1690)\n\n## Version 9.15.9\n\nImprovements:\n - fix(AutoHotkey): order and extended highlighting (#1579)\n - fix(Go): correctly highlight hex numbers, rather than stopping at last 'd' or 'f'. (#2060)\n - fix(Mathematica): Improvements to language (#2065)\n - fix(Node): Adds SCSS build (#2079)\n - fix(Rust): update keywords (#2052)\n - fix(Stata): Added keywords for the meta-analysis suite introduced in Stata 16 (#2081)\n - fix(Bash): escape double quotes (#2048)\n\n## Version 9.15.8\n\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n  - fix(bash): revert escaped double quotes - broke Firefox/Safari.\n\n## Version 9.15.7\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n - fix(powershell): Add cmdlets (#2022)\n - fix(Bash): escaped double quotes (#2041)\n - fix(c++): add aliases 'hh', 'hxx', 'cxx' (#2017)\n - fix(ini/toml): Support comments on the same line. (#2039)\n - fix(JSX): not rendering well in a function without parentheses. (#2024)\n - fix(LiveCode): language definition update (#2021)\n - fix(markdown): indented lists (#2004)\n - fix(styles/school-book): don't style all the pre, use .hljs instead (#2034)\n - fix(JSX): Modify JSX tag detection to use XML language regex in place of simplistic \\w+\n\n## Version 9.15.6\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n - Move dependencies to be devDependencies.\n - Fixed security issues in dev dependencies.\n\n## Version 9.15.5\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix: updated build tool.\n\n## Version 9.15.4\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix: reverted hljs cli build tool, as it was causing issues with install.\n\n## Version 9.15.3\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix: reverted hljs cli build tool, as it was causing issues with install.\n\n## Version 9.15.2\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix that was preventing highlight.js from installing.\n\n## Version 9.15.1\n\nNew languages:\n    none.\n\nNew styles:\n    none.\n\nImprovements:\n\n- Pony: Fixed keywords without spaces at line ends, highlighting of `iso` in class definitions, and function heads without bodies in traits and interfaces. Removed FUNCTION and CLASS modes until they are found to be needed and to provide some of the fixes.\n - Support external language files in minified version of highlight.js (#1888)\n\n## Version 9.15\n\nNew languages:\n    none.\n\nNew styles:\n    none.\n\nImprovements:\n - new cli tool `hljs` - allows easier [building from command line](docs/building-testing.rst#building-a-bundle-from-the-command-line).\n - cpp: Fully support C++11 raw strings. (#1897)\n - Python: Treat False None and True as literals (#1920)\n\n## Version 9.14.2\n\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n- *Gauss* fixed to stop global namespace pollution [Scott Hyndman][].\n- fix(Tcl): removed apostrophe string delimiters (don't exist)\n\n[Scott Hyndman]: https://github.com/shyndman\n\n## Version 9.14.1\n\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n- Pony: language improvements (#1958)\n\n## Version 9.14.0\n\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n- Pony: add missing \"object\" highlighting (#1932)\n- Added *XQuery* built-in functions, prolog declarations, as well as parsing of function bodies, computed and direct constructors, by [Duncan Paterson][]\n- fix(dart): Corrects highlighting with string interpolation. (#1946)\n- fix(swift): be eager on optional-using types (!/?) (#1919)\n- fix(tex): Changed cyrillic to unicode (IE11 throw SCRIPT5021) (#1601)\n- fix(JavaScript): Recognize get/set accessor keywords (#1940)\n- Fixed Dockerfile definition when using highlight continuation parameter, by [Laurent Voullemier][]\n- Added tests & new `annotation` and `verbatim` keywords to *Crystal*, by [Benoit de Chezelles][]\n- Added missing dockerfile markup tests, by [Laurent Voullemier][]\n  Allow empty prompt text in clojure-repl, by [Egor Rogov][]\n- Fixed several issues with *Crystal* language definition, by [Johannes M\u00fcller][]\n- Added `C#` as an alias for *CSharp* language, by [Ahmed Atito][]\n- Added generic user-defined proc support, new compiler define, refactor to re-use rules, and add tests to *GAUSS*, by [Matthew Evans][]\n- Improve *Crystal* language to highlight regexes after some keywords, by [Tsuyusato Kitsune][]\n- Fix filterByQualifiers: fileInfo can be null\n- Fixed String interpolation in Dart, by [Scott Hyndman][].\n\n[Laurent Voullemier]: https://github.com/l-vo\n[Benoit de Chezelles]: https://github.com/bew\n[Johannes M\u00fcller]: https://github.com/straight-shoota\n[Ahmed Atito]: https://github.com/atitoa93\n[Matthew Evans]: https://github.com/matthewevans\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Scott Hyndman]: https://github.com/shyndman\n[Duncan Paterson]: https://github.com/duncdrum\n\n## Version 9.13.1\n\nImprovements:\n\n- *C#* function declarations no longer include trailing whitespace, by [JeremyTCD][]\n- Added new and missing keywords to *AngelScript*, by [Melissa Geels][]\n- *TypeScript* decorator factories highlighting fix, by [Antoine Boisier-Michaud][]\n- Added support for multiline strings to *Swift*, by [Alejandro Isaza][]\n- Fixed issue that was causing some minifiers to fail.\n- Fixed `autoDetection` to accept language aliases.\n\n[JeremyTCD]: https://github.com/JeremyTCD\n[Melissa Geels]: https://github.com/codecat\n[Antoine Boisier-Michaud]: https://github.com/Aboisier\n[Alejandro Isaza]: https://github.com/alejandro-isaza\n\n## Version 9.13.0\n\nNew languages:\n\n- *ArcGIS Arcade* by [John Foster][]\n- *AngelScript* by [Melissa Geels][]\n- *GML* by [meseta][]\n- *isbl* built-in language DIRECTUM and Conterra by [Dmitriy Tarasov][].\n- *PostgreSQL* SQL dialect and PL/pgSQL language by [Egor Rogov][].\n- *ReasonML* by [Gidi Meir Morris][]\n- *SAS* by [Mauricio Caceres Bravo][]\n- *Plaintext* by [Egor Rogov][]\n- *.properties* by [bostko][] and [Egor Rogov][]\n\nNew styles:\n\n- *a11y-dark theme* by [Eric Bailey][]\n- *a11y-light theme* by [Eric Bailey][]\n- *An Old Hope* by [Gustavo Costa][]\n- *Atom One Dark Reasonable* by [Gidi Meir Morris][]\n- *isbl editor dark* by [Dmitriy Tarasov][]\n- *isbl editor light* by [Dmitriy Tarasov][]\n- *Lightfair* by [Tristian Kelly][]\n- [*Nord*][nord-highlightjs] by [Arctic Ice Studio][]\n- *[\ud83e\udd84 Shades of Purple](https://github.com/ahmadawais/Shades-of-Purple-HighlightJS)* by [Ahmad Awais][]\n\nImprovements:\n\n- New attribute `endSameAsBegin` for nested constructs with variable names\n  by [Egor Rogov][].\n- *Python* highlighting of escaped quotes fixed by [Harmon][]\n- *PHP*: Added alias for php7, by [Vijaya Chandran Mani][]\n- *C++* string handling, by [David Benjamin][]\n- *Swift* Add `@objcMembers` to `@attributes`, by [Berk \u00c7ebi][]\n- Infrastructural changes by [Marcos C\u00e1ceres][]\n- Fixed metachars highighting for *NSIS* by [Jan T. Sott][]\n- *Yaml* highlight local tags as types by [L\u00e9o Lam][]\n- Improved highlighting for *Elixir* by [Piotr Kaminski][]\n- New attribute `disableAutodetect` for preventing autodetection by [Egor Rogov][]\n- *Matlab*: transpose operators and double quote strings, by [JohnC32][] and [Egor Rogov][]\n- Various documentation typos and improvemets by [Jimmy W\u00e4rting][], [Lutz B\u00fcch][], [bcleland][]\n- *Cmake* updated with new keywords and commands by [Deniz Bahadir][]\n\n[Ahmad Awais]: https://github.com/ahmadawais\n[Arctic Ice Studio]: https://github.com/arcticicestudio\n[Dmitriy Tarasov]: https://github.com/MedvedTMN\n[Egor Rogov]: https://github.com/egor-rogov\n[Eric Bailey]: https://github.com/ericwbailey\n[Gidi Meir Morris]: https://github.com/gmmorris\n[Gustavo Costa]: https://github.com/gusbemacbe\n[Harmon]: https://github.com/Harmon758\n[Melissa Geels]: https://github.com/codecat\n[meseta]: https://github.com/meseta\n[nord-highlightjs]: https://github.com/arcticicestudio/nord-highlightjs\n[Tristian Kelly]: https://github.com/TristianK3604\n[Vijaya Chandran Mani]: https://github.com/vijaycs85\n[John Foster]: https://github.com/jf990\n[David Benjamin]: https://github.com/davidben\n[Berk \u00c7ebi]: https://github.com/berkcebi\n[Mauricio Caceres Bravo]: https://github.com/mcaceresb\n[bostko]: https://github.com/bostko\n[Deniz Bahadir]: https://github.com/Bagira80\n[bcleland]: https://github.com/bcleland\n[JohnC32]: https://github.com/JohnC32\n[Lutz B\u00fcch]: https://github.com/lutz-100worte\n[Piotr Kaminski]: https://github.com/pkaminski\n[L\u00e9o Lam]: https://github.com/leoetlino\n[Jan T. Sott]: https://github.com/idleberg\n[Jimmy W\u00e4rting]: https://github.com/jimmywarting\n[Marcos C\u00e1ceres]: https://github.com/marcoscaceres\n\n## Version 9.12.0\n\nNew language:\n\n- *MikroTik* RouterOS Scripting language by [Ivan Dementev][].\n\nNew style:\n\n- *VisualStudio 2015 Dark* by [Nicolas LLOBERA][]\n\nImprovements:\n- *Crystal* updated with new keywords and syntaxes by [Tsuyusato Kitsune][].\n- *Julia* updated to the modern definitions by [Alex Arslan][].\n- *julia-repl* added by [Morten Piibeleht][].\n- [Stanislav Belov][] wrote a new definition for *1C*, replacing the one that\n  has not been updated for more than 8 years. The new version supports syntax\n  for versions 7.7 and 8.\n- [Nicolas LLOBERA][] improved C# definition fixing edge cases with function\n  titles detection and added highlighting of `[Attributes]`.\n- [nnnik][] provided a few correctness fixes for *Autohotkey*.\n- [Martin Clausen][] made annotation collections in *Clojure* to look\n  consistently with other kinds.\n- [Alejandro Alonso][] updated *Swift* keywords.\n\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Alex Arslan]: https://github.com/ararslan\n[Morten Piibeleht]: https://github.com/mortenpi\n[Stanislav Belov]: https://github.com/4ppl\n[Ivan Dementev]: https://github.com/DiVAN1x\n[Nicolas LLOBERA]: https://github.com/Nicolas01\n[nnnik]: https://github.com/nnnik\n[Martin Clausen]: https://github.com/maacl\n[Alejandro Alonso]: https://github.com/Azoy\n\n## Version 9.11.0\n\nNew languages:\n\n- *Shell* by [Tsuyusato Kitsune][]\n- *jboss-cli* by [Rapha\u00ebl Parr\u00ebe][]\n\nImprovements:\n\n- [Jo\u00ebl Porquet] has [greatly improved the definition of *makefile*][5b3e0e6].\n- *C++* class titles are now highlighted as in other languages with classes.\n- [Jordi Petit][] added rarely used `or`, `and` and `not` keywords to *C++*.\n- [Pieter Vantorre][] fixed highlighting of negative floating point values.\n\n\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Jordi Petit]: https://github.com/jordi-petit\n[Rapha\u00ebl Parr\u00ebe]: https://github.com/rparree\n[Pieter Vantorre]: https://github.com/NuclearCookie\n[5b3e0e6]: https://github.com/isagalaev/highlight.js/commit/5b3e0e68bfaae282faff6697d6a490567fa9d44b\n\n\n## Version 9.10.0\n\nApologies for missing the previous release cycle. Some thing just can't be\nautomated\u2026 Anyway, we're back!\n\nNew languages:\n\n- *Hy* by [Sergey Sobko][]\n- *Leaf* by [Hale Chan][]\n- *N1QL* by [Andres T\u00e4ht][] and [Rene Saarsoo][]\n\nImprovements:\n\n- *Rust* got updated with new keywords by [Kasper Andersen][] and then\n  significantly modernized even more by [Eduard-Mihai Burtescu][] (yes, @eddyb,\n  Rust core team member!)\n- *Python* updated with f-literals by [Philipp A][].\n- *YAML* updated with unquoted strings support.\n- *Gauss* updated with new keywords by [Matt Evans][].\n- *Lua* updated with new keywords by [Joe Blow][].\n- *Kotlin* updated with new keywords by [Philipp Hauer][].\n- *TypeScript* got highlighting of function params and updated keywords by\n  [Ike Ku][].\n- *Scheme* now correctly handles \\`-quoted lists thanks to [Guannan Wei].\n- [Sam Wu][] fixed handling of `<<` in *C++* defines.\n\n[Philipp A]: https://github.com/flying-sheep\n[Philipp Hauer]: https://github.com/phauer\n[Sergey Sobko]: https://github.com/profitware\n[Hale Chan]: https://github.com/halechan\n[Matt Evans]: https://github.com/matthewevans\n[Joe Blow]: https://github.com/mossarelli\n[Kasper Andersen]: https://github.com/kasma1990\n[Eduard-Mihai Burtescu]: https://github.com/eddyb\n[Andres T\u00e4ht]: https://github.com/andrestaht\n[Rene Saarsoo]: https://github.com/nene\n[Philipp Hauer]: https://github.com/phauer\n[Ike Ku]: https://github.com/dempfi\n[Guannan Wei]: https://github.com/Kraks\n[Sam Wu]: https://github.com/samsam2310\n\n\n## Version 9.9.0\n\nNew languages\n\n- *LLVM* by [Michael Rodler][]\n\nImprovements:\n\n- *TypeScript* updated with annotations and param lists inside constructors, by\n  [Raphael Parree][].\n- *CoffeeScript* updated with new keywords and fixed to recognize JavaScript\n  in \\`\\`\\`, thanks to thanks to [Geoffrey Booth][].\n- Compiler directives in *Delphi* are now correctly highlighted as \"meta\".\n\n[Raphael Parree]: https://github.com/rparree\n[Michael Rodler]: https://github.com/f0rki\n[Geoffrey Booth]: https://github.com/GeoffreyBooth\n\n\n## Version 9.8.0 \"New York\"\n\nThis version is the second one that deserved a name. Because I'm in New York,\nand the release isn't missing the deadline only because it's still Tuesday on\nWest Coast.\n\nNew languages:\n\n- *Clean* by [Camil Staps][]\n- *Flix* by [Magnus Madsen][]\n\nImprovements:\n\n- [Kenton Hamaluik][] did a comprehensive update for *Haxe*.\n- New commands for *PowerShell* from [Nicolas Le Gall][].\n- [Jan T. Sott][] updated *NSIS*.\n- *Java* and *Swift* support unicode characters in identifiers thanks to\n  [Alexander Lichter][].\n\n[Camil Staps]: https://github.com/camilstaps\n[Magnus Madsen]: https://github.com/magnus-madsen\n[Kenton Hamaluik]: https://github.com/FuzzyWuzzie\n[Nicolas Le Gall]: https://github.com/darkitty\n[Jan T. Sott]: https://github.com/idleberg\n[Alexander Lichter]: https://github.com/manniL\n\n\n## Version 9.7.0\n\nA comprehensive bugfix release. This is one of the best things about\nhighlight.js: even boring things keep getting better (even if slow).\n\n- VHDL updated with PSL keywords and uses more consistent styling.\n- Nested C-style comments no longer break highlighting in many languages.\n- JavaScript updated with `=>` functions, highlighted object attributes and\n  parsing within template string substitution blocks (`${...}`).\n- Fixed another corner case with self-closing `<tag/>` in JSX.\n- Added `HEALTHCHECK` directive in Docker.\n- Delphi updated with new Free Pascal keywords.\n- Fixed digit separator parsing in C++.\n- C# updated with new keywords and fixed to allow multiple identifiers within\n  generics `<...>`.\n- Fixed another slow regex in Less.\n\n\n## Version 9.6.0\n\nNew languages:\n\n- *ABNF* and *EBNF* by [Alex McKibben][]\n- *Awk* by [Matthew Daly][]\n- *SubUnit* by [Sergey Bronnikov][]\n\nNew styles:\n\n- *Atom One* in both Dark and Light variants  by [Daniel Gamage][]\n\nPlus, a few smaller updates for *Lasso*, *Elixir*, *C++* and *SQL*.\n\n[Alex McKibben]: https://github.com/mckibbenta\n[Daniel Gamage]: https://github.com/danielgamage\n[Matthew Daly]: https://github.com/matthewbdaly\n[Sergey Bronnikov]: https://github.com/ligurio\n\n\n## Version 9.5.0\n\nNew languages:\n\n- *Excel* by [Victor Zhou][]\n- *Linden Scripting Language* by [Builder's Brewery][]\n- *TAP* (Test Anything Protocol) by [Sergey Bronnikov][]\n- *Pony* by [Joe Eli McIlvain][]\n- *Coq* by [Stephan Boyer][]\n- *dsconfig* and *LDIF* by [Jacob Childress][]\n\nNew styles:\n\n- *Ocean Dark* by [Gavin Siu][]\n\nNotable changes:\n\n- [Minh Nguy\u1ec5n][] added more built-ins to Objective C.\n- [Jeremy Hull][] fixed corner cases in C++ preprocessor directives and Diff\n  comments.\n- [Victor Zhou][] added support for digit separators in C++ numbers.\n\n[Gavin Siu]: https://github.com/gavsiu\n[Builder's Brewery]: https://github.com/buildersbrewery\n[Victor Zhou]: https://github.com/OiCMudkips\n[Sergey Bronnikov]: https://github.com/ligurio\n[Joe Eli McIlvain]: https://github.com/jemc\n[Stephan Boyer]: https://github.com/boyers\n[Jacob Childress]: https://github.com/braveulysses\n[Minh Nguy\u1ec5n]: https://github.com/1ec5\n[Jeremy Hull]: https://github.com/sourrust\n\n\n## Version 9.4.0\n\nNew languages:\n\n- *PureBASIC* by [Tristano Ajmone][]\n- *BNF* by [Oleg Efimov][]\n- *Ada* by [Lars Schulna][]\n\nNew styles:\n\n- *PureBASIC* by [Tristano Ajmone][]\n\nImprovements to existing languages and styles:\n\n- We now highlight function declarations in Go.\n- [Taisuke Fujimoto][] contributed very convoluted rules for raw and\n  interpolated strings in C#.\n- [Boone Severson][] updated Verilog to comply with IEEE 1800-2012\n  SystemVerilog.\n- [Victor Zhou][] improved rules for comments and strings in PowerShell files.\n- [Janis Voigtl\u00e4nder][] updated the definition of Elm to version 0.17 of the\n  languages. Elm is now featured on the front page of <https://highlightjs.org>.\n- Special variable `$this` is highlighted as a keyword in PHP.\n- `usize` and `isize` are now highlighted in Rust.\n- Fixed labels and directives in x86 assembler.\n\n[Tristano Ajmone]: https://github.com/tajmone\n[Taisuke Fujimoto]: https://github.com/temp-impl\n[Oleg Efimov]: https://github.com/Sannis\n[Boone Severson]: https://github.com/BooneJS\n[Victor Zhou]: https://github.com/OiCMudkips\n[Lars Schulna]: https://github.com/captain-hanuta\n[Janis Voigtl\u00e4nder]: https://github.com/jvoigtlaender\n\n\n## Version 9.3.0\n\nNew languages:\n\n- *Tagger Script* by [Philipp Wolfer][]\n- *MoonScript* by [Billy Quith][]\n\nNew styles:\n\n- *xt256* by [Herbert Shin][]\n\nImprovements to existing languages and styles:\n\n- More robust handling of unquoted HTML tag attributes\n- Relevance tuning for QML which was unnecessary eager at seizing other\n  languages' code\n- Improve GAMS language parsing\n- Fixed a bunch of bugs around selectors in Less\n- Kotlin's got a new definition for annotations, updated keywords and other\n  minor improvements\n- Added `move` to Rust keywords\n- Markdown now recognizes \\`\\`\\`-fenced code blocks\n- Improved detection of function declarations in C++ and C#\n\n[Philipp Wolfer]: https://github.com/phw\n[Billy Quith]: https://github.com/billyquith\n[Herbert Shin]: https://github.com/initbar\n\n\n## Version 9.2.0\n\nNew languages:\n\n- *QML* by [John Foster][]\n- *HTMLBars* by [Michael Johnston][]\n- *CSP* by [Taras][]\n- *Maxima* by [Robert Dodier][]\n\nNew styles:\n\n- *Gruvbox* by [Qeole][]\n- *Dracula* by [Denis Ciccale][]\n\nImprovements to existing languages and styles:\n\n- We now correctly handle JSX with arbitrary node tree depth.\n- Argument list for `(lambda)` in Scheme is no longer highlighted as a function\n  call.\n- Stylus syntax doesn't break on valid CSS.\n- More correct handling of comments and strings and other improvements for\n  VimScript.\n- More subtle work on the default style.\n- We now use anonymous modules for AMD.\n- `macro_rules!` is now recognized as a built-in in Rust.\n\n[John Foster]: https://github.com/jf990\n[Qeole]: https://github.com/Qeole\n[Denis Ciccale]: https://github.com/dciccale\n[Michael Johnston]: https://github.com/lastobelus\n[Taras]: https://github.com/oxdef\n[Robert Dodier]: https://github.com/robert-dodier\n\n\n## Version 9.1.0\n\nNew languages:\n\n- *Stan* by [Brendan Rocks][]\n- *BASIC* by [Rapha\u00ebl Ass\u00e9nat][]\n- *GAUSS* by [Matt Evans][]\n- *DTS* by [Martin Braun][]\n- *Arduino* by [Stefania Mellai][]\n\nNew Styles:\n\n- *Arduino Light* by [Stefania Mellai][]\n\nImprovements to existing languages and styles:\n\n- Handle return type annotations in Python\n- Allow shebang headers in Javascript\n- Support strings in Rust meta\n- Recognize `struct` as a class-level definition in Rust\n- Recognize b-prefixed chars and strings in Rust\n- Better numbers handling in Verilog\n\n[Brendan Rocks]: http://brendanrocks.com\n[Rapha\u00ebl Ass\u00e9nat]: https://github.com/raphnet\n[Matt Evans]: https://github.com/matthewevans\n[Martin Braun]: https://github.com/mbr0wn\n[Stefania Mellai]: https://github.com/smellai\n\n\n## Version 9.0.0\n\nThe new major version brings a reworked styling system. Highlight.js now defines\na limited set of highlightable classes giving a consistent result across all the\nstyles and languages. You can read a more detailed explanation and background in\nthe [tracking issue][#348] that started this long process back in May.\n\nThis change is backwards incompatible for those who uses highlight.js with a\ncustom stylesheet. The [new style guide][sg] explains how to write styles\nin this new world.\n\nBundled themes have also suffered a significant amount of improvements and may\nlook different in places, but all the things now consistent and make more sense.\nAmong others, the Default style has got a refresh and will probably be tweaked\nsome more in next releases. Please do give your feedback in our\n[issue tracker][issues].\n\nNew languages in this release:\n\n- *Cach\u00e9 Object Script* by [Nikita Savchenko][]\n- *YAML* by [Stefan Wienert][]\n- *MIPS Assembler* by [Nebuleon Fumika][]\n- *HSP* by [prince][]\n\nImprovements to existing languages and styles:\n\n- ECMAScript 6 modules import now do not require closing semicolon.\n- ECMAScript 6 classes constructors now highlighted.\n- Template string support for Typescript, as for ECMAScript 6.\n- Scala case classes params highlight fixed.\n- Built-in names introduced in Julia v0.4 added by [Kenta Sato][].\n- Refreshed Default style.\n\nOther notable changes:\n\n- [Web workers support][webworkers] added bu [Jan K\u00fchle][].\n- We now have tests for compressed browser builds as well.\n- The building tool chain has been switched to node.js 4.x. and is now\n  shamelessly uses ES6 features all over the place, courtesy of [Jeremy Hull][].\n- License added to non-compressed browser build.\n\n[Jan K\u00fchle]: https://github.com/frigus02\n[Stefan Wienert]: https://github.com/zealot128\n[Kenta Sato]: https://github.com/bicycle1885\n[Nikita Savchenko]: https://github.com/ZitRos\n[webworkers]: https://github.com/isagalaev/highlight.js#web-workers\n[Jeremy Hull]: https://github.com/sourrust\n[#348]: https://github.com/isagalaev/highlight.js/issues/348\n[sg]: http://highlightjs.readthedocs.org/en/latest/style-guide.html\n[issues]: https://github.com/isagalaev/highlight.js/issues\n[Nebuleon Fumika]: https://github.com/Nebuleon\n[prince]: https://github.com/prince-0203\n\n\n## Version 8.9.1\n\nSome last-minute changes reverted due to strange bug with minified browser build:\n\n- Scala case classes params highlight fixed\n- ECMAScript 6 modules import now do not require closing semicolon\n- ECMAScript 6 classes constructors now highlighted\n- Template string support for Typescript, as for ECMAScript 6\n- License added to not minified browser build\n\n\n## Version 8.9.0\n\nNew languages:\n\n- *crmsh* by [Kristoffer Gronlund][]\n- *SQF* by [Soren Enevoldsen][]\n\n[Kristoffer Gronlund]: https://github.com/krig\n[Soren Enevoldsen]: https://github.com/senevoldsen90\n\nNotable fixes and improvements to existing languages:\n\n- Added `abstract` and `namespace` keywords to TypeScript by [Daniel Rosenwasser][]\n- Added `label` support to Dockerfile by [Ladislav Prskavec][]\n- Crystal highlighting improved by [Tsuyusato Kitsune][]\n- Missing Swift keywords added by [Nate Cook][]\n- Improve detection of C block comments\n- ~~Scala case classes params highlight fixed~~\n- ~~ECMAScript 6 modules import now do not require closing semicolon~~\n- ~~ECMAScript 6 classes constructors now highlighted~~\n- ~~Template string support for Typescript, as for ECMAScript 6~~\n\nOther notable changes:\n\n- ~~License added to not minified browser build~~\n\n[Kristoffer Gronlund]: https://github.com/krig\n[S\u00f8ren Enevoldsen]: https://github.com/senevoldsen90\n[Daniel Rosenwasser]: https://github.com/DanielRosenwasser\n[Ladislav Prskavec]: https://github.com/abtris\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Nate Cook]: https://github.com/natecook1000\n\n\n## Version 8.8.0\n\nNew languages:\n\n- *Golo* by [Philippe Charri\u00e8re][]\n- *GAMS* by [Stefan Bechert][]\n- *IRPF90* by [Anthony Scemama][]\n- *Access logs* by [Oleg Efimov][]\n- *Crystal* by [Tsuyusato Kitsune][]\n\nNotable fixes and improvements to existing languages:\n\n- JavaScript highlighting no longer fails with ES6 default parameters\n- Added keywords `async` and `await` to Python\n- PHP heredoc support improved\n- Allow preprocessor directives within C++ functions\n\nOther notable changes:\n\n- Change versions to X.Y.Z SemVer-compatible format\n- Added ability to build all targets at once\n\n[Philippe Charri\u00e8re]: https://github.com/k33g\n[Stefan Bechert]: https://github.com/b-pos465\n[Anthony Scemama]: https://github.com/scemama\n[Oleg Efimov]: https://github.com/Sannis\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n\n\n## Version 8.7\n\nNew languages:\n\n- *Zephir* by [Oleg Efimov][]\n- *Elm* by [Janis Voigtl\u00e4nder][]\n- *XQuery* by [Dirk Kirsten][]\n- *Mojolicious* by [Dotan Dimet][]\n- *AutoIt* by Manh Tuan from [J2TeaM][]\n- *Toml* (ini extension) by [Guillaume Gomez][]\n\nNew styles:\n\n- *Hopscotch* by [Jan T. Sott][]\n- *Grayscale* by [MY Sun][]\n\nNotable fixes and improvements to existing languages:\n\n- Fix encoding of images when copied over in certain builds\n- Fix incorrect highlighting of the word \"bug\" in comments\n- Treat decorators different from matrix multiplication in Python\n- Fix traits inheritance highlighting in Rust\n- Fix incorrect document\n- Oracle keywords added to SQL language definition by [Vadimtro][]\n- Postgres keywords added to SQL language definition by [Benjamin Auder][]\n- Fix registers in x86asm being highlighted as a hex number\n- Fix highlighting for numbers with a leading decimal point\n- Correctly highlight numbers and strings inside of C/C++ macros\n- C/C++ functions now support pointer, reference, and move returns\n\n[Oleg Efimov]: https://github.com/Sannis\n[Guillaume Gomez]: https://github.com/GuillaumeGomez\n[Janis Voigtl\u00e4nder]: https://github.com/jvoigtlaender\n[Jan T. Sott]: https://github.com/idleberg\n[Dirk Kirsten]: https://github.com/dirkk\n[MY Sun]: https://github.com/simonmysun\n[Vadimtro]: https://github.com/Vadimtro\n[Benjamin Auder]: https://github.com/ghost\n[Dotan Dimet]: https://github.com/dotandimet\n[J2TeaM]: https://github.com/J2TeaM\n\n\n## Version 8.6\n\nNew languages:\n\n- *C/AL* by [Kenneth Fuglsang][]\n- *DNS zone file* by [Tim Schumacher][]\n- *Ceylon* by [Lucas Werkmeister][]\n- *OpenSCAD* by [Dan Panzarella][]\n- *Inform7* by [Bruno Dias][]\n- *armasm* by [Dan Panzarella][]\n- *TP* by [Jay Strybis][]\n\nNew styles:\n\n- *Atelier Cave*, *Atelier Estuary*,\n  *Atelier Plateau* and *Atelier Savanna* by [Bram de Haan][]\n- *Github Gist* by [Louis Barranqueiro][]\n\nNotable fixes and improvements to existing languages:\n\n- Multi-line raw strings from C++11 are now supported\n- Fix class names with dashes in HAML\n- The `async` keyword from ES6/7 is now supported\n- TypeScript functions handle type and parameter complexity better\n- We unified phpdoc/javadoc/yardoc etc modes across all languages\n- CSS .class selectors relevance was dropped to prevent wrong language detection\n- Images is now included to CDN build\n- Release process is now automated\n\n[Bram de Haan]: https://github.com/atelierbram\n[Kenneth Fuglsang]: https://github.com/kfuglsang\n[Louis Barranqueiro]: https://github.com/LouisBarranqueiro\n[Tim Schumacher]: https://github.com/enko\n[Lucas Werkmeister]: https://github.com/lucaswerkmeister\n[Dan Panzarella]: https://github.com/pzl\n[Bruno Dias]: https://github.com/sequitur\n[Jay Strybis]: https://github.com/unreal\n\n\n## Version 8.5\n\nNew languages:\n\n- *pf.conf* by [Peter Piwowarski][]\n- *Julia* by [Kenta Sato][]\n- *Prolog* by [Raivo Laanemets][]\n- *Docker* by [Alexis H\u00e9naut][]\n- *Fortran* by [Anthony Scemama][] and [Thomas Applencourt][]\n- *Kotlin* by [Sergey Mashkov][]\n\nNew styles:\n\n- *Agate* by [Taufik Nurrohman][]\n- *Darcula* by [JetBrains][]\n- *Atelier Sulphurpool* by [Bram de Haan][]\n- *Android Studio* by [Pedro Oliveira][]\n\nNotable fixes and improvements to existing languages:\n\n- ES6 features in JavaScript are better supported now by [Gu Yiling][].\n- Swift now recognizes body-less method definitions.\n- Single expression functions `def foo, do: ... ` now work in Elixir.\n- More uniform detection of built-in classes in Objective C.\n- Fixes for number literals and processor directives in Rust.\n- HTML `<script>` tag now allows any language, not just JavaScript.\n- Multi-line comments are supported now in MatLab.\n\n[Taufik Nurrohman]: https://github.com/tovic\n[Jet Brains]: https://www.jetbrains.com/\n[Peter Piwowarski]: https://github.com/oldlaptop\n[Kenta Sato]: https://github.com/bicycle1885\n[Bram de Haan]: https://github.com/atelierbram\n[Raivo Laanemets]: https://github.com/rla\n[Alexis H\u00e9naut]: https://github.com/AlexisNo\n[Anthony Scemama]: https://github.com/scemama\n[Pedro Oliveira]: https://github.com/kanytu\n[Gu Yiling]: https://github.com/Justineo\n[Sergey Mashkov]: https://github.com/cy6erGn0m\n[Thomas Applencourt]: https://github.com/TApplencourt\n\n\n## Version 8.4\n\nWe've got the new [demo page][]! The obvious new feature is the new look, but\napart from that it's got smarter: by presenting languages in groups it avoids\nrunning 10000 highlighting attempts after first load which was slowing it down\nand giving bad overall impression. It is now also being generated from test\ncode snippets so the authors of new languages don't have to update both tests\nand the demo page with the same thing.\n\nOther notable changes:\n\n- The `template_comment` class is gone in favor of the more general `comment`.\n- Number parsing unified and improved across languages.\n- C++, Java and C# now use unified grammar to highlight titles in\n  function/method definitions.\n- The browser build is now usable as an AMD module, there's no separate build\n  target for that anymore.\n- OCaml has got a [comprehensive overhaul][ocaml] by [Micka\u00ebl Delahaye][].\n- Clojure's data structures and literals are now highlighted outside of lists\n  and we can now highlight Clojure's REPL sessions.\n\nNew languages:\n\n- *AspectJ* by [Hakan \u00d6zler][]\n- *STEP Part 21* by [Adam Joseph Cook][]\n- *SML* derived by [Edwin Dalorzo][] from OCaml definition\n- *Mercury* by [mucaho][]\n- *Smali* by [Dennis Titze][]\n- *Verilog* by [Jon Evans][]\n- *Stata* by [Brian Quistorff][]\n\n[Hakan \u00d6zler]: https://github.com/ozlerhakan\n[Adam Joseph Cook]: https://github.com/adamjcook\n[demo page]: https://highlightjs.org/static/demo/\n[Ivan Sagalaev]: https://github.com/isagalaev\n[Edwin Dalorzo]: https://github.com/edalorzo\n[mucaho]: https://github.com/mucaho\n[Dennis Titze]: https://github.com/titze\n[Jon Evans]: https://github.com/craftyjon\n[Brian Quistorff]: https://github.com/bquistorff\n[ocaml]: https://github.com/isagalaev/highlight.js/pull/608#issue-46190207\n[Micka\u00ebl Delahaye]: https://github.com/polazarus\n\n\n## Version 8.3\n\nWe streamlined our tool chain, it is now based entirely on node.js instead of\nbeing a mix of node.js, Python and Java. The build script options and arguments\nremained the same, and we've noted all the changes in the [documentation][b].\nApart from reducing complexity, the new build script is also faster from not\nhaving to start Java machine repeatedly. The credits for the work go to [Jeremy\nHull][].\n\nSome notable fixes:\n\n- PHP and JavaScript mixed in HTML now live happily with each other.\n- JavaScript regexes now understand ES6 flags \"u\" and \"y\".\n- `throw` keyword is no longer detected as a method name in Java.\n- Fixed parsing of numbers and symbols in Clojure thanks to [input from Ivan\n  Kleshnin][ik].\n\nNew languages in this release:\n\n- *Less* by [Max Mikhailov][]\n- *Stylus* by [Bryant Williams][]\n- *Tcl* by [Radek Liska][]\n- *Puppet* by [Jose Molina Colmenero][]\n- *Processing* by [Erik Paluka][]\n- *Twig* templates by [Luke Holder][]\n- *PowerShell* by [David Mohundro][], based on [the work of Nicholas Blumhardt][ps]\n- *XL* by [Christophe de Dinechin][]\n- *LiveScript* by [Taneli Vatanen][] and [Jen Evers-Corvina][]\n- *ERB* (Ruby in HTML) by [Lucas Mazza][]\n- *Roboconf* by [Vincent Zurczak][]\n\n[b]: http://highlightjs.readthedocs.org/en/latest/building-testing.html\n[Jeremy Hull]: https://github.com/sourrust\n[ik]: https://twitter.com/IvanKleshnin/status/514041599484231680\n[Max Mikhailov]: https://github.com/seven-phases-max\n[Bryant Williams]: https://github.com/scien\n[Radek Liska]: https://github.com/Nindaleth\n[Jose Molina Colmenero]: https://github.com/Moliholy\n[Erik Paluka]: https://github.com/paluka\n[Luke Holder]: https://github.com/lukeholder\n[David Mohundro]: https://github.com/drmohundro\n[ps]: https://github.com/OctopusDeploy/Library/blob/master/app/shared/presentation/highlighting/powershell.js\n[Christophe de Dinechin]: https://github.com/c3d\n[Taneli Vatanen]: https://github.com/Daiz-\n[Jen Evers-Corvina]: https://github.com/sevvie\n[Lucas Mazza]: https://github.com/lucasmazza\n[Vincent Zurczak]: https://github.com/vincent-zurczak\n\n\n## Version 8.2\n\nWe've finally got [real tests][test] and [continuous testing on Travis][ci]\nthanks to [Jeremy Hull][] and [Chris Eidhof][]. The tests designed to cover\neverything: language detection, correct parsing of individual language features\nand various special cases. This is a very important change that gives us\nconfidence in extending language definitions and refactoring library core.\n\nWe're going to redesign the old [demo/test suite][demo] into an interactive\ndemo web app. If you're confident front-end developer or designer and want to\nhelp us with it, drop a comment into [the issue][#542] on GitHub.\n\n[test]: https://github.com/isagalaev/highlight.js/tree/master/test\n[demo]: https://highlightjs.org/static/test.html\n[#542]: https://github.com/isagalaev/highlight.js/issues/542\n[ci]: https://travis-ci.org/isagalaev/highlight.js\n[Jeremy Hull]: https://github.com/sourrust\n[Chris Eidhof]: https://github.com/chriseidhof\n\nAs usually there's a handful of new languages in this release:\n\n- *Groovy* by [Guillaume Laforge][]\n- *Dart* by [Maxim Dikun][]\n- *Dust* by [Michael Allen][]\n- *Scheme* by [JP Verkamp][]\n- *G-Code* by [Adam Joseph Cook][]\n- *Q* from Kx Systems by [Sergey Vidyuk][]\n\n[Guillaume Laforge]: https://github.com/glaforge\n[Maxim Dikun]: https://github.com/dikmax\n[Michael Allen]: https://github.com/bfui\n[JP Verkamp]: https://github.com/jpverkamp\n[Adam Joseph Cook]: https://github.com/adamjcook\n[Sergey Vidyuk]: https://github.com/sv\n\nOther improvements:\n\n- [Erik Osheim][] heavily reworked Scala definitions making it richer.\n- [Lucas Mazza][] fixed Ruby hashes highlighting\n- Lisp variants (Lisp, Clojure and Scheme) are unified in regard to naming\n  the first symbol in parentheses: it's \"keyword\" in general case and also\n  \"built_in\" for built-in functions in Clojure and Scheme.\n\n[Erik Osheim]: https://github.com/non\n[Lucas Mazza]: https://github.com/lucasmazza\n\n\n## Version 8.1\n\nNew languages:\n\n- *Gherkin* by [Sam Pikesley][]\n- *Elixir* by [Josh Adams][]\n- *NSIS* by [Jan T. Sott][]\n- *VIM script* by [Jun Yang][]\n- *Protocol Buffers* by [Dan Tao][]\n- *Nix* by [Domen Ko\u017ear][]\n- *x86asm* by [innocenat][]\n- *Cap\u2019n Proto* and *Thrift* by [Oleg Efimov][]\n- *Monkey* by [Arthur Bikmullin][]\n- *TypeScript* by [Panu Horsmalahti][]\n- *Nimrod* by [Flaviu Tamas][]\n- *Gradle* by [Damian Mee][]\n- *Haxe* by [Christopher Kaster][]\n- *Swift* by [Chris Eidhof][] and [Nate Cook][]\n\nNew styles:\n\n- *Kimbie*, light and dark variants by [Jan T. Sott][]\n- *Color brewer* by [Fabr\u00edcio Tavares de Oliveira][]\n- *Codepen.io embed* by [Justin Perry][]\n- *Hybrid* by [Nic West][]\n\n[Sam Pikesley]: https://github.com/pikesley\n[Sindre Sorhus]: https://github.com/sindresorhus\n[Josh Adams]: https://github.com/knewter\n[Jan T. Sott]: https://github.com/idleberg\n[Jun Yang]: https://github.com/harttle\n[Dan Tao]: https://github.com/dtao\n[Domen Ko\u017ear]: https://github.com/iElectric\n[innocenat]: https://github.com/innocenat\n[Oleg Efimov]: https://github.com/Sannis\n[Arthur Bikmullin]: https://github.com/devolonter\n[Panu Horsmalahti]: https://github.com/panuhorsmalahti\n[Flaviu Tamas]: https://github.com/flaviut\n[Damian Mee]: https://github.com/chester1000\n[Christopher Kaster]: http://christopher.kaster.ws\n[Fabr\u00edcio Tavares de Oliveira]: https://github.com/fabriciotav\n[Justin Perry]: https://github.com/ourmaninamsterdam\n[Nic West]: https://github.com/nicwest\n[Chris Eidhof]: https://github.com/chriseidhof\n[Nate Cook]: https://github.com/natecook1000\n\nOther improvements:\n\n- The README is heavily reworked and brought up to date by [Jeremy Hull][].\n- Added [`listLanguages()`][ll] method in the API.\n- Improved C/C++/C# detection.\n- Added a bunch of new language aliases, documented the existing ones. Thanks to\n  [Sindre Sorhus][] for background research.\n- Added phrasal English words to boost relevance in comments.\n- Many improvements to SQL definition made by [Heiko August][],\n  [Nikolay Lisienko][] and [Travis Odom][].\n- The shorter `lang-` prefix for language names in HTML classes supported\n  alongside `language-`. Thanks to [Jeff Escalante][].\n- Ruby's got support for interactive console sessions. Thanks to\n  [Pascal Hurni][].\n- Added built-in functions for R language. Thanks to [Artem A. Klevtsov][].\n- Rust's got definition for lifetime parameters and improved string syntax.\n  Thanks to [Roman Shmatov][].\n- Various improvements to Objective-C definition by [Matt Diephouse][].\n- Fixed highlighting of generics in Java.\n\n[ll]: http://highlightjs.readthedocs.org/en/latest/api.html#listlanguages\n[Sindre Sorhus]: https://github.com/sindresorhus\n[Heiko August]: https://github.com/auge8472\n[Nikolay Lisienko]: https://github.com/neor-ru\n[Travis Odom]: https://github.com/Burstaholic\n[Jeff Escalante]: https://github.com/jenius\n[Pascal Hurni]: https://github.com/phurni\n[Jiyin Yiyong]: https://github.com/jiyinyiyong\n[Artem A. Klevtsov]: https://github.com/unikum\n[Roman Shmatov]: https://github.com/shmatov\n[Jeremy Hull]: https://github.com/sourrust\n[Matt Diephouse]: https://github.com/mdiep\n\n\n## Version 8.0\n\nThis new major release is quite a big overhaul bringing both new features and\nsome backwards incompatible changes. However, chances are that the majority of\nusers won't be affected by the latter: the basic scenario described in the\nREADME is left intact.\n\nHere's what did change in an incompatible way:\n\n- We're now prefixing all classes located in [CSS classes reference][cr] with\n  `hljs-`, by default, because some class names would collide with other\n  people's stylesheets. If you were using an older version, you might still want\n  the previous behavior, but still want to upgrade. To suppress this new\n  behavior, you would initialize like so:\n\n  ```html\n  <script type=\"text/javascript\">\n    hljs.configure({classPrefix: ''});\n    hljs.initHighlightingOnLoad();\n  </script>\n  ```\n\n- `tabReplace` and `useBR` that were used in different places are also unified\n  into the global options object and are to be set using `configure(options)`.\n  This function is documented in our [API docs][]. Also note that these\n  parameters are gone from `highlightBlock` and `fixMarkup` which are now also\n  rely on `configure`.\n\n- We removed public-facing (though undocumented) object `hljs.LANGUAGES` which\n  was used to register languages with the library in favor of two new methods:\n  `registerLanguage` and `getLanguage`. Both are documented in our [API docs][].\n\n- Result returned from `highlight` and `highlightAuto` no longer contains two\n  separate attributes contributing to relevance score, `relevance` and\n  `keyword_count`. They are now unified in `relevance`.\n\nAnother technically compatible change that nonetheless might need attention:\n\n- The structure of the NPM package was refactored, so if you had installed it\n  locally, you'll have to update your paths. The usual `require('highlight.js')`\n  works as before. This is contributed by [Dmitry Smolin][].\n\nNew features:\n\n- Languages now can be recognized by multiple names like \"js\" for JavaScript or\n  \"html\" for, well, HTML (which earlier insisted on calling it \"xml\"). These\n  aliases can be specified in the class attribute of the code container in your\n  HTML as well as in various API calls. For now there are only a few very common\n  aliases but we'll expand it in the future. All of them are listed in the\n  [class reference][cr].\n\n- Language detection can now be restricted to a subset of languages relevant in\n  a given context \u2014 a web page or even a single highlighting call. This is\n  especially useful for node.js build that includes all the known languages.\n  Another example is a StackOverflow-style site where users specify languages\n  as tags rather than in the markdown-formatted code snippets. This is\n  documented in the [API reference][] (see methods `highlightAuto` and\n  `configure`).\n\n- Language definition syntax streamlined with [variants][] and\n  [beginKeywords][].\n\nNew languages and styles:\n\n- *Oxygene* by [Carlo Kok][]\n- *Mathematica* by [Daniel Kvasni\u010dka][]\n- *Autohotkey* by [Seongwon Lee][]\n- *Atelier* family of styles in 10 variants by [Bram de Haan][]\n- *Para\u00edso* styles by [Jan T. Sott][]\n\nMiscellaneous improvements:\n\n- Highlighting `=>` prompts in Clojure.\n- [Jeremy Hull][] fixed a lot of styles for consistency.\n- Finally, highlighting PHP and HTML [mixed in peculiar ways][php-html].\n- Objective C and C# now properly highlight titles in method definition.\n- Big overhaul of relevance counting for a number of languages. Please do report\n  bugs about mis-detection of non-trivial code snippets!\n\n[API reference]: http://highlightjs.readthedocs.org/en/latest/api.html\n\n[cr]: http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\n[api docs]: http://highlightjs.readthedocs.org/en/latest/api.html\n[variants]: https://groups.google.com/d/topic/highlightjs/VoGC9-1p5vk/discussion\n[beginKeywords]: https://github.com/isagalaev/highlight.js/commit/6c7fdea002eb3949577a85b3f7930137c7c3038d\n[php-html]: https://twitter.com/highlightjs/status/408890903017689088\n\n[Carlo Kok]: https://github.com/carlokok\n[Bram de Haan]: https://github.com/atelierbram\n[Daniel Kvasni\u010dka]: https://github.com/dkvasnicka\n[Dmitry Smolin]: https://github.com/dimsmol\n[Jeremy Hull]: https://github.com/sourrust\n[Seongwon Lee]: https://github.com/dlimpid\n[Jan T. Sott]: https://github.com/idleberg\n\n\n## Version 7.5\n\nA catch-up release dealing with some of the accumulated contributions. This one\nis probably will be the last before the 8.0 which will be slightly backwards\nincompatible regarding some advanced use-cases.\n\nOne outstanding change in this version is the addition of 6 languages to the\n[hosted script][d]: Markdown, ObjectiveC, CoffeeScript, Apache, Nginx and\nMakefile. It now weighs about 6K more but we're going to keep it under 30K.\n\nNew languages:\n\n- OCaml by [Mehdi Dogguy][mehdid] and [Nicolas Braud-Santoni][nbraud]\n- [LiveCode Server][lcs] by [Ralf Bitter][revig]\n- Scilab by [Sylvestre Ledru][sylvestre]\n- basic support for Makefile by [Ivan Sagalaev][isagalaev]\n\nImprovements:\n\n- Ruby's got support for characters like `?A`, `?1`, `?\\012` etc. and `%r{..}`\n  regexps.\n- Clojure now allows a function call in the beginning of s-expressions\n  `(($filter \"myCount\") (arr 1 2 3 4 5))`.\n- Haskell's got new keywords and now recognizes more things like pragmas,\n  preprocessors, modules, containers, FFIs etc. Thanks to [Zena Treep][treep]\n  for the implementation and to [Jeremy Hull][sourrust] for guiding it.\n- Miscellaneous fixes in PHP, Brainfuck, SCSS, Asciidoc, CMake, Python and F#.\n\n[mehdid]: https://github.com/mehdid\n[nbraud]: https://github.com/nbraud\n[revig]: https://github.com/revig\n[lcs]: http://livecode.com/developers/guides/server/\n[sylvestre]: https://github.com/sylvestre\n[isagalaev]: https://github.com/isagalaev\n[treep]: https://github.com/treep\n[sourrust]: https://github.com/sourrust\n[d]: http://highlightjs.org/download/\n\n\n## New core developers\n\nThe latest long period of almost complete inactivity in the project coincided\nwith growing interest to it led to a decision that now seems completely obvious:\nwe need more core developers.\n\nSo without further ado let me welcome to the core team two long-time\ncontributors: [Jeremy Hull][] and [Oleg\nEfimov][].\n\nHope now we'll be able to work through stuff faster!\n\nP.S. The historical commit is [here][1] for the record.\n\n[Jeremy Hull]: https://github.com/sourrust\n[Oleg Efimov]: https://github.com/sannis\n[1]: https://github.com/isagalaev/highlight.js/commit/f3056941bda56d2b72276b97bc0dd5f230f2473f\n\n\n## Version 7.4\n\nThis long overdue version is a snapshot of the current source tree with all the\nchanges that happened during the past year. Sorry for taking so long!\n\nAlong with the changes in code highlight.js has finally got its new home at\n<http://highlightjs.org/>, moving from its cradle on Software Maniacs which it\noutgrew a long time ago. Be sure to report any bugs about the site to\n<mailto:info@highlightjs.org>.\n\nOn to what's new\u2026\n\nNew languages:\n\n- Handlebars templates by [Robin Ward][]\n- Oracle Rules Language by [Jason Jacobson][]\n- F# by [Joans Folles\u00f8][]\n- AsciiDoc and Haml by [Dan Allen][]\n- Lasso by [Eric Knibbe][]\n- SCSS by [Kurt Emch][]\n- VB.NET by [Poren Chiang][]\n- Mizar by [Kelley van Evert][]\n\n[Robin Ward]: https://github.com/eviltrout\n[Jason Jacobson]: https://github.com/jayce7\n[Joans Folles\u00f8]: https://github.com/follesoe\n[Dan Allen]: https://github.com/mojavelinux\n[Eric Knibbe]: https://github.com/EricFromCanada\n[Kurt Emch]: https://github.com/kemch\n[Poren Chiang]: https://github.com/rschiang\n[Kelley van Evert]: https://github.com/kelleyvanevert\n\nNew style themes:\n\n- Monokai Sublime by [noformnocontent][]\n- Railscasts by [Damien White][]\n- Obsidian by [Alexander Marenin][]\n- Docco by [Simon Madine][]\n- Mono Blue by [Ivan Sagalaev][] (uses a single color hue for everything)\n- Foundation by [Dan Allen][]\n\n[noformnocontent]: http://nn.mit-license.org/\n[Damien White]: https://github.com/visoft\n[Alexander Marenin]: https://github.com/ioncreature\n[Simon Madine]: https://github.com/thingsinjars\n[Ivan Sagalaev]: https://github.com/isagalaev\n\nOther notable changes:\n\n- Corrected many corner cases in CSS.\n- Dropped Python 2 version of the build tool.\n- Implemented building for the AMD format.\n- Updated Rust keywords (thanks to [Dmitry Medvinsky][]).\n- Literal regexes can now be used in language definitions.\n- CoffeeScript highlighting is now significantly more robust and rich due to\n  input from [C\u00e9dric N\u00e9h\u00e9mie][].\n\n[Dmitry Medvinsky]: https://github.com/dmedvinsky\n[C\u00e9dric N\u00e9h\u00e9mie]: https://github.com/abe33\n\n\n## Version 7.3\n\n- Since this version highlight.js no longer works in IE version 8 and older.\n  It's made it possible to reduce the library size and dramatically improve code\n  readability and made it easier to maintain. Time to go forward!\n\n- New languages: AppleScript (by [Nathan Grigg][ng] and [Dr. Drang][dd]) and\n  Brainfuck (by [Evgeny Stepanischev][bolk]).\n\n- Improvements to existing languages:\n\n    - interpreter prompt in Python (`>>>` and `...`)\n    - @-properties and classes in CoffeeScript\n    - E4X in JavaScript (by [Oleg Efimov][oe])\n    - new keywords in Perl (by [Kirk Kimmel][kk])\n    - big Ruby syntax update (by [Vasily Polovnyov][vast])\n    - small fixes in Bash\n\n- Also Oleg Efimov did a great job of moving all the docs for language and style\n  developers and contributors from the old wiki under the source code in the\n  \"docs\" directory. Now these docs are nicely presented at\n  <http://highlightjs.readthedocs.org/>.\n\n[ng]: https://github.com/nathan11g\n[dd]: https://github.com/drdrang\n[bolk]: https://github.com/bolknote\n[oe]: https://github.com/Sannis\n[kk]: https://github.com/kimmel\n[vast]: https://github.com/vast\n\n\n## Version 7.2\n\nA regular bug-fix release without any significant new features. Enjoy!\n\n\n## Version 7.1\n\nA Summer crop:\n\n- [Marc Fornos][mf] made the definition for Clojure along with the matching\n  style Rainbow (which, of course, works for other languages too).\n- CoffeeScript support continues to improve getting support for regular\n  expressions.\n- Yoshihide Jimbo ported to highlight.js [five Tomorrow styles][tm] from the\n  [project by Chris Kempson][tm0].\n- Thanks to [Casey Duncun][cd] the library can now be built in the popular\n  [AMD format][amd].\n- And last but not least, we've got a fair number of correctness and consistency\n  fixes, including a pretty significant refactoring of Ruby.\n\n[mf]: https://github.com/mfornos\n[tm]: http://jmblog.github.com/color-themes-for-highlightjs/\n[tm0]: https://github.com/ChrisKempson/Tomorrow-Theme\n[cd]: https://github.com/caseman\n[amd]: http://requirejs.org/docs/whyamd.html\n\n\n## Version 7.0\n\nThe reason for the new major version update is a global change of keyword syntax\nwhich resulted in the library getting smaller once again. For example, the\nhosted build is 2K less than at the previous version while supporting two new\nlanguages.\n\nNotable changes:\n\n- The library now works not only in a browser but also with [node.js][]. It is\n  installable with `npm install highlight.js`. [API][] docs are available on our\n  wiki.\n\n- The new unique feature (apparently) among syntax highlighters is highlighting\n  *HTTP* headers and an arbitrary language in the request body. The most useful\n  languages here are *XML* and *JSON* both of which highlight.js does support.\n  Here's [the detailed post][p] about the feature.\n\n- Two new style themes: a dark \"south\" *[Pojoaque][]* by Jason Tate and an\n  emulation of*XCode* IDE by [Angel Olloqui][ao].\n\n- Three new languages: *D* by [Aleksandar Ru\u017ei\u010di\u0107][ar], *R* by [Joe Cheng][jc]\n  and *GLSL* by [Sergey Tikhomirov][st].\n\n- *Nginx* syntax has become a million times smaller and more universal thanks to\n  remaking it in a more generic manner that doesn't require listing all the\n  directives in the known universe.\n\n- Function titles are now highlighted in *PHP*.\n\n- *Haskell* and *VHDL* were significantly reworked to be more rich and correct\n  by their respective maintainers [Jeremy Hull][sr] and [Igor Kalnitsky][ik].\n\nAnd last but not least, many bugs have been fixed around correctness and\nlanguage detection.\n\nOverall highlight.js currently supports 51 languages and 20 style themes.\n\n[node.js]: http://nodejs.org/\n[api]: http://softwaremaniacs.org/wiki/doku.php/highlight.js:api\n[p]: http://softwaremaniacs.org/blog/2012/05/10/http-and-json-in-highlight-js/en/\n[pojoaque]: http://web-cms-designs.com/ftopict-10-pojoaque-style-for-highlight-js-code-highlighter.html\n[ao]: https://github.com/angelolloqui\n[ar]: https://github.com/raleksandar\n[jc]: https://github.com/jcheng5\n[st]: https://github.com/tikhomirov\n[sr]: https://github.com/sourrust\n[ik]: https://github.com/ikalnitsky\n\n\n## Version 6.2\n\nA lot of things happened in highlight.js since the last version! We've got nine\nnew contributors, the discussion group came alive, and the main branch on GitHub\nnow counts more than 350 followers. Here are most significant results coming\nfrom all this activity:\n\n- 5 (five!) new languages: Rust, ActionScript, CoffeeScript, MatLab and\n  experimental support for markdown. Thanks go to [Andrey Vlasovskikh][av],\n  [Alexander Myadzel][am], [Dmytrii Nagirniak][dn], [Oleg Efimov][oe], [Denis\n  Bardadym][db] and [John Crepezzi][jc].\n\n- 2 new style themes: Monokai by [Luigi Maselli][lm] and stylistic imitation of\n  another well-known highlighter Google Code Prettify by [Aahan Krish][ak].\n\n- A vast number of [correctness fixes and code refactorings][log], mostly made\n  by [Oleg Efimov][oe] and [Evgeny Stepanischev][es].\n\n[av]: https://github.com/vlasovskikh\n[am]: https://github.com/myadzel\n[dn]: https://github.com/dnagir\n[oe]: https://github.com/Sannis\n[db]: https://github.com/btd\n[jc]: https://github.com/seejohnrun\n[lm]: http://grigio.org/\n[ak]: https://github.com/geekpanth3r\n[es]: https://github.com/bolknote\n[log]: https://github.com/isagalaev/highlight.js/commits/\n\n\n## Version 6.1 \u2014 Solarized\n\n[Jeremy Hull][jh] has implemented my dream feature \u2014 a port of [Solarized][]\nstyle theme famous for being based on the intricate color theory to achieve\ncorrect contrast and color perception. It is now available for highlight.js in\nboth variants \u2014 light and dark.\n\nThis version also adds a new original style Arta. Its author pumbur maintains a\n[heavily modified fork of highlight.js][pb] on GitHub.\n\n[jh]: https://github.com/sourrust\n[solarized]: http://ethanschoonover.com/solarized\n[pb]: https://github.com/pumbur/highlight.js\n\n\n## Version 6.0\n\nNew major version of the highlighter has been built on a significantly\nrefactored syntax. Due to this it's even smaller than the previous one while\nsupporting more languages!\n\nNew languages are:\n\n- Haskell by [Jeremy Hull][sourrust]\n- Erlang in two varieties \u2014 module and REPL \u2014 made collectively by [Nikolay\n  Zakharov][desh], [Dmitry Kovega][arhibot] and [Sergey Ignatov][ignatov]\n- Objective C by [Valerii Hiora][vhbit]\n- Vala by [Antono Vasiljev][antono]\n- Go by [Stephan Kountso][steplg]\n\n[sourrust]: https://github.com/sourrust\n[desh]: http://desh.su/\n[arhibot]: https://github.com/arhibot\n[ignatov]: https://github.com/ignatov\n[vhbit]: https://github.com/vhbit\n[antono]: https://github.com/antono\n[steplg]: https://github.com/steplg\n\nAlso this version is marginally faster and fixes a number of small long-standing\nbugs.\n\nDeveloper overview of the new language syntax is available in a [blog post about\nrecent beta release][beta].\n\n[beta]: http://softwaremaniacs.org/blog/2011/04/25/highlight-js-60-beta/en/\n\nP.S. New version is not yet available on a Yandex CDN, so for now you have to\ndownload [your own copy][d].\n\n[d]: /soft/highlight/en/download/\n\n\n## Version 5.14\n\nFixed bugs in HTML/XML detection and relevance introduced in previous\nrefactoring.\n\nAlso test.html now shows the second best result of language detection by\nrelevance.\n\n\n## Version 5.13\n\nPast weekend began with a couple of simple additions for existing languages but\nended up in a big code refactoring bringing along nice improvements for language\ndevelopers.\n\n### For users\n\n- Description of C++ has got new keywords from the upcoming [C++ 0x][] standard.\n- Description of HTML has got new tags from [HTML 5][].\n- CSS-styles have been unified to use consistent padding and also have lost\n  pop-outs with names of detected languages.\n- [Igor Kalnitsky][ik] has sent two new language descriptions: CMake & VHDL.\n\nThis makes total number of languages supported by highlight.js to reach 35.\n\nBug fixes:\n\n- Custom classes on `<pre>` tags are not being overridden anymore\n- More correct highlighting of code blocks inside non-`<pre>` containers:\n  highlighter now doesn't insist on replacing them with its own container and\n  just replaces the contents.\n- Small fixes in browser compatibility and heuristics.\n\n[c++ 0x]: http://ru.wikipedia.org/wiki/C%2B%2B0x\n[html 5]: http://en.wikipedia.org/wiki/HTML5\n[ik]: http://kalnitsky.org.ua/\n\n### For developers\n\nThe most significant change is the ability to include language submodes right\nunder `contains` instead of defining explicit named submodes in the main array:\n\n    contains: [\n      'string',\n      'number',\n      {begin: '\\\\n', end: hljs.IMMEDIATE_RE}\n    ]\n\nThis is useful for auxiliary modes needed only in one place to define parsing.\nNote that such modes often don't have `className` and hence won't generate a\nseparate `<span>` in the resulting markup. This is similar in effect to\n`noMarkup: true`. All existing languages have been refactored accordingly.\n\nTest file test.html has at last become a real test. Now it not only puts the\ndetected language name under the code snippet but also tests if it matches the\nexpected one. Test summary is displayed right above all language snippets.\n\n\n## CDN\n\nFine people at [Yandex][] agreed to host highlight.js on their big fast servers.\n[Link up][l]!\n\n[yandex]: http://yandex.com/\n[l]: http://softwaremaniacs.org/soft/highlight/en/download/\n\n\n## Version 5.10 \u2014 \"Paris\".\n\nThough I'm on a vacation in Paris, I decided to release a new version with a\ncouple of small fixes:\n\n- Tomas Vitvar discovered that TAB replacement doesn't always work when used\n  with custom markup in code\n- SQL parsing is even more rigid now and doesn't step over SmallTalk in tests\n\n\n## Version 5.9\n\nA long-awaited version is finally released.\n\nNew languages:\n\n- Andrew Fedorov made a definition for Lua\n- a long-time highlight.js contributor [Peter Leonov][pl] made a definition for\n  Nginx config\n- [Vladimir Moskva][vm] made a definition for TeX\n\n[pl]: http://kung-fu-tzu.ru/\n[vm]: http://fulc.ru/\n\nFixes for existing languages:\n\n- [Loren Segal][ls] reworked the Ruby definition and added highlighting for\n  [YARD][] inline documentation\n- the definition of SQL has become more solid and now it shouldn't be overly\n  greedy when it comes to language detection\n\n[ls]: http://gnuu.org/\n[yard]: http://yardoc.org/\n\nThe highlighter has become more usable as a library allowing to do highlighting\nfrom initialization code of JS frameworks and in ajax methods (see.\nreadme.eng.txt).\n\nAlso this version drops support for the [WordPress][wp] plugin. Everyone is\nwelcome to [pick up its maintenance][p] if needed.\n\n[wp]: http://wordpress.org/\n[p]: http://bazaar.launchpad.net/~isagalaev/+junk/highlight/annotate/342/src/wp_highlight.js.php\n\n\n## Version 5.8\n\n- Jan Berkel has contributed a definition for Scala. +1 to hotness!\n- All CSS-styles are rewritten to work only inside `<pre>` tags to avoid\n  conflicts with host site styles.\n\n\n## Version 5.7.\n\nFixed escaping of quotes in VBScript strings.\n\n\n## Version 5.5\n\nThis version brings a small change: now .ini-files allow digits, underscores and\nsquare brackets in key names.\n\n\n## Version 5.4\n\nFixed small but upsetting bug in the packer which caused incorrect highlighting\nof explicitly specified languages. Thanks to Andrew Fedorov for precise\ndiagnostics!\n\n\n## Version 5.3\n\nThe version to fulfil old promises.\n\nThe most significant change is that highlight.js now preserves custom user\nmarkup in code along with its own highlighting markup. This means that now it's\npossible to use, say, links in code. Thanks to [Vladimir Dolzhenko][vd] for the\n[initial proposal][1] and for making a proof-of-concept patch.\n\nAlso in this version:\n\n- [Vasily Polovnyov][vp] has sent a GitHub-like style and has implemented\n  support for CSS @-rules and Ruby symbols.\n- Yura Zaripov has sent two styles: Brown Paper and School Book.\n- Oleg Volchkov has sent a definition for [Parser 3][p3].\n\n[1]: http://softwaremaniacs.org/forum/highlightjs/6612/\n[p3]: http://www.parser.ru/\n[vp]: http://vasily.polovnyov.ru/\n[vd]: http://dolzhenko.blogspot.com/\n\n\n## Version 5.2\n\n- at last it's possible to replace indentation TABs with something sensible\n  (e.g. 2 or 4 spaces)\n- new keywords and built-ins for 1C by Sergey Baranov\n- a couple of small fixes to Apache highlighting\n\n\n## Version 5.1\n\nThis is one of those nice version consisting entirely of new and shiny\ncontributions!\n\n- [Vladimir Ermakov][vooon] created highlighting for AVR Assembler\n- [Ruslan Keba][rukeba] created highlighting for Apache config file. Also his\n  original visual style for it is now available for all highlight.js languages\n  under the name \"Magula\".\n- [Shuen-Huei Guan][drake] (aka Drake) sent new keywords for RenderMan\n  languages. Also thanks go to [Konstantin Evdokimenko][ke] for his advice on\n  the matter.\n\n[vooon]: http://vehq.ru/about/\n[rukeba]: http://rukeba.com/\n[drake]: http://drakeguan.org/\n[ke]: http://k-evdokimenko.moikrug.ru/\n\n\n## Version 5.0\n\nThe main change in the new major version of highlight.js is a mechanism for\npacking several languages along with the library itself into a single compressed\nfile. Now sites using several languages will load considerably faster because\nthe library won't dynamically include additional files while loading.\n\nAlso this version fixes a long-standing bug with Javascript highlighting that\ncouldn't distinguish between regular expressions and division operations.\n\nAnd as usually there were a couple of minor correctness fixes.\n\nGreat thanks to all contributors! Keep using highlight.js.\n\n\n## Version 4.3\n\nThis version comes with two contributions from [Jason Diamond][jd]:\n\n- language definition for C# (yes! it was a long-missed thing!)\n- Visual Studio-like highlighting style\n\nPlus there are a couple of minor bug fixes for parsing HTML and XML attributes.\n\n[jd]: http://jason.diamond.name/weblog/\n\n\n## Version 4.2\n\nThe biggest news is highlighting for Lisp, courtesy of Vasily Polovnyov. It's\nsomewhat experimental meaning that for highlighting \"keywords\" it doesn't use\nany pre-defined set of a Lisp dialect. Instead it tries to highlight first word\nin parentheses wherever it makes sense. I'd like to ask people programming in\nLisp to confirm if it's a good idea and send feedback to [the forum][f].\n\nOther changes:\n\n- Smalltalk was excluded from DEFAULT_LANGUAGES to save traffic\n- [Vladimir Epifanov][voldmar] has implemented javascript style switcher for\n  test.html\n- comments now allowed inside Ruby function definition\n- [MEL][] language from [Shuen-Huei Guan][drake]\n- whitespace now allowed between `<pre>` and `<code>`\n- better auto-detection of C++ and PHP\n- HTML allows embedded VBScript (`<% .. %>`)\n\n[f]: http://softwaremaniacs.org/forum/highlightjs/\n[voldmar]: http://voldmar.ya.ru/\n[mel]: http://en.wikipedia.org/wiki/Maya_Embedded_Language\n[drake]: http://drakeguan.org/\n\n\n## Version 4.1\n\nLanguages:\n\n- Bash from Vah\n- DOS bat-files from Alexander Makarov (Sam)\n- Diff files from Vasily Polovnyov\n- Ini files from myself though initial idea was from Sam\n\nStyles:\n\n- Zenburn from Vladimir Epifanov, this is an imitation of a\n  [well-known theme for Vim][zenburn].\n- Ascetic from myself, as a realization of ideals of non-flashy highlighting:\n  just one color in only three gradations :-)\n\nIn other news. [One small bug][bug] was fixed, built-in keywords were added for\nPython and C++ which improved auto-detection for the latter (it was shame that\n[my wife's blog][alenacpp] had issues with it from time to time). And lastly\nthanks go to Sam for getting rid of my stylistic comments in code that were\ngetting in the way of [JSMin][].\n\n[zenburn]: http://en.wikipedia.org/wiki/Zenburn\n[alenacpp]: http://alenacpp.blogspot.com/\n[bug]: http://softwaremaniacs.org/forum/viewtopic.php?id=1823\n[jsmin]: http://code.google.com/p/jsmin-php/\n\n\n## Version 4.0\n\nNew major version is a result of vast refactoring and of many contributions.\n\nVisible new features:\n\n- Highlighting of embedded languages. Currently is implemented highlighting of\n  Javascript and CSS inside HTML.\n- Bundled 5 ready-made style themes!\n\nInvisible new features:\n\n- Highlight.js no longer pollutes global namespace. Only one object and one\n  function for backward compatibility.\n- Performance is further increased by about 15%.\n\nChanging of a major version number caused by a new format of language definition\nfiles. If you use some third-party language files they should be updated.\n\n\n## Version 3.5\n\nA very nice version in my opinion fixing a number of small bugs and slightly\nincreased speed in a couple of corner cases. Thanks to everybody who reports\nbugs in he [forum][f] and by email!\n\nThere is also a new language \u2014 XML. A custom XML formerly was detected as HTML\nand didn't highlight custom tags. In this version I tried to make custom XML to\nbe detected and highlighted by its own rules. Which by the way include such\nthings as CDATA sections and processing instructions (`<? ... ?>`).\n\n[f]: http://softwaremaniacs.org/forum/viewforum.php?id=6\n\n\n## Version 3.3\n\n[Vladimir Gubarkov][xonix] has provided an interesting and useful addition.\nFile export.html contains a little program that shows and allows to copy and\npaste an HTML code generated by the highlighter for any code snippet. This can\nbe useful in situations when one can't use the script itself on a site.\n\n\n[xonix]: http://xonixx.blogspot.com/\n\n\n## Version 3.2 consists completely of contributions:\n\n- Vladimir Gubarkov has described SmallTalk\n- Yuri Ivanov has described 1C\n- Peter Leonov has packaged the highlighter as a Firefox extension\n- Vladimir Ermakov has compiled a mod for phpBB\n\nMany thanks to you all!\n\n\n## Version 3.1\n\nThree new languages are available: Django templates, SQL and Axapta. The latter\ntwo are sent by [Dmitri Roudakov][1]. However I've almost entirely rewrote an\nSQL definition but I'd never started it be it from the ground up :-)\n\nThe engine itself has got a long awaited feature of grouping keywords\n(\"keyword\", \"built-in function\", \"literal\"). No more hacks!\n\n[1]: http://roudakov.ru/\n\n\n## Version 3.0\n\nIt is major mainly because now highlight.js has grown large and has become\nmodular. Now when you pass it a list of languages to highlight it will\ndynamically load into a browser only those languages.\n\nAlso:\n\n- Konstantin Evdokimenko of [RibKit][] project has created a highlighting for\n  RenderMan Shading Language and RenderMan Interface Bytestream. Yay for more\n  languages!\n- Heuristics for C++ and HTML got better.\n- I've implemented (at last) a correct handling of backslash escapes in C-like\n  languages.\n\nThere is also a small backwards incompatible change in the new version. The\nfunction initHighlighting that was used to initialize highlighting instead of\ninitHighlightingOnLoad a long time ago no longer works. If you by chance still\nuse it \u2014 replace it with the new one.\n\n[RibKit]: http://ribkit.sourceforge.net/\n\n\n## Version 2.9\n\nHighlight.js is a parser, not just a couple of regular expressions. That said\nI'm glad to announce that in the new version 2.9 has support for:\n\n- in-string substitutions for Ruby -- `#{...}`\n- strings from from numeric symbol codes (like #XX) for Delphi\n\n\n## Version 2.8\n\nA maintenance release with more tuned heuristics. Fully backwards compatible.\n\n\n## Version 2.7\n\n- Nikita Ledyaev presents highlighting for VBScript, yay!\n- A couple of bugs with escaping in strings were fixed thanks to Mickle\n- Ongoing tuning of heuristics\n\nFixed bugs were rather unpleasant so I encourage everyone to upgrade!\n\n\n## Version 2.4\n\n- Peter Leonov provides another improved highlighting for Perl\n- Javascript gets a new kind of keywords \u2014 \"literals\". These are the words\n  \"true\", \"false\" and \"null\"\n\nAlso highlight.js homepage now lists sites that use the library. Feel free to\nadd your site by [dropping me a message][mail] until I find the time to build a\nsubmit form.\n\n[mail]: mailto:Maniac@SoftwareManiacs.Org\n\n\n## Version 2.3\n\nThis version fixes IE breakage in previous version. My apologies to all who have\nalready downloaded that one!\n\n\n## Version 2.2\n\n- added highlighting for Javascript\n- at last fixed parsing of Delphi's escaped apostrophes in strings\n- in Ruby fixed highlighting of keywords 'def' and 'class', same for 'sub' in\n  Perl\n\n\n## Version 2.0\n\n- Ruby support by [Anton Kovalyov][ak]\n- speed increased by orders of magnitude due to new way of parsing\n- this same way allows now correct highlighting of keywords in some tricky\n  places (like keyword \"End\" at the end of Delphi classes)\n\n[ak]: http://anton.kovalyov.net/\n\n\n## Version 1.0\n\nVersion 1.0 of javascript syntax highlighter is released!\n\nIt's the first version available with English description. Feel free to post\nyour comments and question to [highlight.js forum][forum]. And don't be afraid\nif you find there some fancy Cyrillic letters -- it's for Russian users too :-)\n\n[forum]: http://softwaremaniacs.org/forum/viewforum.php?id=6\n", "/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\nimport deepFreeze from './vendor/deep_freeze.js';\nimport Response from './lib/response.js';\nimport TokenTreeEmitter from './lib/token_tree.js';\nimport * as regex from './lib/regex.js';\nimport * as utils from './lib/utils.js';\nimport * as MODES from './lib/modes.js';\nimport { compileLanguage } from './lib/mode_compiler.js';\nimport * as packageJSON from '../package.json';\n\nconst escape = utils.escapeHTML;\nconst inherit = utils.inherit;\n\nconst { nodeStream, mergeStreams } = utils;\nconst NO_MATCH = Symbol(\"nomatch\");\n\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */\nconst HLJS = function(hljs) {\n  // Convenience variables for build-in objects\n  /** @type {unknown[]} */\n  var ArrayProto = [];\n\n  // Global internal variables used within the highlight.js library.\n  /** @type {Record<string, Language>} */\n  var languages = {};\n  /** @type {Record<string, string>} */\n  var aliases = {};\n  /** @type {HLJSPlugin[]} */\n  var plugins = [];\n\n  // safe/production mode - swallows more errors, tries to keep running\n  // even if a single syntax or parse hits a fatal error\n  var SAFE_MODE = true;\n  var fixMarkupRe = /(^(<[^>]+>|\\t|)+|\\n)/gm;\n  var LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n  /** @type {Language} */\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  /** @type HLJSOptions */\n  var options = {\n    noHighlightRe: /^(no-?highlight)$/i,\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: null,\n    // beta configuration options, subject to change, welcome to discuss\n    // https://github.com/highlightjs/highlight.js/issues/1086\n    __emitter: TokenTreeEmitter\n  };\n\n  /* Utility functions */\n\n  /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */\n  function shouldNotHighlight(languageName) {\n    return options.noHighlightRe.test(languageName);\n  }\n\n  /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */\n  function blockLanguage(block) {\n    var classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    const match = options.languageDetectRe.exec(classes);\n    if (match) {\n      var language = getLanguage(match[1]);\n      if (!language) {\n        console.warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n        console.warn(\"Falling back to no-highlight mode for this block.\", block);\n      }\n      return language ? match[1] : 'no-highlight';\n    }\n\n    return classes\n      .split(/\\s+/)\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\n  }\n\n  /**\n   * Core highlighting function.\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {Mode} [continuation] - current continuation mode, if any\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {Mode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */\n  function highlight(languageName, code, ignoreIllegals, continuation) {\n    /** @type {{ code: string, language: string, result?: any }} */\n    var context = {\n      code,\n      language: languageName\n    };\n    // the plugin can change the desired language or the code to be highlighted\n    // just be changing the object it was passed\n    fire(\"before:highlight\", context);\n\n    // a before plugin can usurp the result completely by providing it's own\n    // in which case we don't even need to call highlight\n    var result = context.result ?\n      context.result :\n      _highlight(context.language, context.code, ignoreIllegals, continuation);\n\n    result.code = context.code;\n    // the plugin can change anything in result to suite it\n    fire(\"after:highlight\", result);\n\n    return result;\n  }\n\n  /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {Mode} [continuation] - current continuation mode, if any\n  */\n  function _highlight(languageName, code, ignoreIllegals, continuation) {\n    var codeToHighlight = code;\n\n    /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {RegExpMatchArray} match - regexp match data\n     * @returns {KeywordData | false}\n     */\n    function keywordData(mode, match) {\n      var matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];\n    }\n\n    function processKeywords() {\n      if (!top.keywords) {\n        emitter.addText(mode_buffer);\n        return;\n      }\n\n      let last_index = 0;\n      top.keywordPatternRe.lastIndex = 0;\n      let match = top.keywordPatternRe.exec(mode_buffer);\n      let buf = \"\";\n\n      while (match) {\n        buf += mode_buffer.substring(last_index, match.index);\n        const data = keywordData(top, match);\n        if (data) {\n          const [kind, keywordRelevance] = data;\n          emitter.addText(buf);\n          buf = \"\";\n\n          relevance += keywordRelevance;\n          emitter.addKeyword(match[0], kind);\n        } else {\n          buf += match[0];\n        }\n        last_index = top.keywordPatternRe.lastIndex;\n        match = top.keywordPatternRe.exec(mode_buffer);\n      }\n      buf += mode_buffer.substr(last_index);\n      emitter.addText(buf);\n    }\n\n    function processSubLanguage() {\n      if (mode_buffer === \"\") return;\n      /** @type HighlightResult */\n      var result = null;\n\n      if (typeof top.subLanguage === 'string') {\n        if (!languages[top.subLanguage]) {\n          emitter.addText(mode_buffer);\n          return;\n        }\n        result = _highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]);\n        continuations[top.subLanguage] = result.top;\n      } else {\n        result = highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : null);\n      }\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      emitter.addSublanguage(result.emitter, result.language);\n    }\n\n    function processBuffer() {\n      if (top.subLanguage != null) {\n        processSubLanguage();\n      } else {\n        processKeywords();\n      }\n      mode_buffer = '';\n    }\n\n    /**\n     * @param {Mode} mode - new mode to start\n     */\n    function startNewMode(mode) {\n      if (mode.className) {\n        emitter.openNode(mode.className);\n      }\n      top = Object.create(mode, { parent: { value: top } });\n      return top;\n    }\n\n    /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */\n    function endOfMode(mode, match, matchPlusRemainder) {\n      let matched = regex.startsWith(mode.endRe, matchPlusRemainder);\n\n      if (matched) {\n        if (mode[\"on:end\"]) {\n          const resp = new Response(mode);\n          mode[\"on:end\"](match, resp);\n          if (resp.ignore) matched = false;\n        }\n\n        if (matched) {\n          while (mode.endsParent && mode.parent) {\n            mode = mode.parent;\n          }\n          return mode;\n        }\n      }\n      // even if on:end fires an `ignore` it's still possible\n      // that we might trigger the end node because of a parent mode\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, match, matchPlusRemainder);\n      }\n    }\n\n    /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */\n    function doIgnore(lexeme) {\n      if (top.matcher.regexIndex === 0) {\n        // no more regexs to potentially match here, so we move the cursor forward one\n        // space\n        mode_buffer += lexeme[0];\n        return 1;\n      } else {\n        // no need to move the cursor, we still have additional regexes to try and\n        // match at this very spot\n        continueScanAtSamePosition = true;\n        return 0;\n      }\n    }\n\n    /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */\n    function doBeginMatch(match) {\n      var lexeme = match[0];\n      var new_mode = match.rule;\n\n      const resp = new Response(new_mode);\n      // first internal before callbacks, then the public ones\n      const beforeCallbacks = [new_mode.__beforeBegin, new_mode[\"on:begin\"]];\n      for (const cb of beforeCallbacks) {\n        if (!cb) continue;\n        cb(match, resp);\n        if (resp.ignore) return doIgnore(lexeme);\n      }\n\n      if (new_mode && new_mode.endSameAsBegin) {\n        new_mode.endRe = regex.escape(lexeme);\n      }\n\n      if (new_mode.skip) {\n        mode_buffer += lexeme;\n      } else {\n        if (new_mode.excludeBegin) {\n          mode_buffer += lexeme;\n        }\n        processBuffer();\n        if (!new_mode.returnBegin && !new_mode.excludeBegin) {\n          mode_buffer = lexeme;\n        }\n      }\n      startNewMode(new_mode);\n      // if (mode[\"after:begin\"]) {\n      //   let resp = new Response(mode);\n      //   mode[\"after:begin\"](match, resp);\n      // }\n      return new_mode.returnBegin ? 0 : lexeme.length;\n    }\n\n    /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */\n    function doEndMatch(match) {\n      var lexeme = match[0];\n      var matchPlusRemainder = codeToHighlight.substr(match.index);\n\n      var end_mode = endOfMode(top, match, matchPlusRemainder);\n      if (!end_mode) { return NO_MATCH; }\n\n      var origin = top;\n      if (origin.skip) {\n        mode_buffer += lexeme;\n      } else {\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          mode_buffer += lexeme;\n        }\n        processBuffer();\n        if (origin.excludeEnd) {\n          mode_buffer = lexeme;\n        }\n      }\n      do {\n        if (top.className) {\n          emitter.closeNode();\n        }\n        if (!top.skip && !top.subLanguage) {\n          relevance += top.relevance;\n        }\n        top = top.parent;\n      } while (top !== end_mode.parent);\n      if (end_mode.starts) {\n        if (end_mode.endSameAsBegin) {\n          end_mode.starts.endRe = end_mode.endRe;\n        }\n        startNewMode(end_mode.starts);\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    function processContinuations() {\n      var list = [];\n      for (var current = top; current !== language; current = current.parent) {\n        if (current.className) {\n          list.unshift(current.className);\n        }\n      }\n      list.forEach(item => emitter.openNode(item));\n    }\n\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\n    var lastMatch = {};\n\n    /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceeding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */\n    function processLexeme(textBeforeMatch, match) {\n      var lexeme = match && match[0];\n\n      // add non-matched text to the current mode buffer\n      mode_buffer += textBeforeMatch;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      // we've found a 0 width match and we're stuck, so we need to advance\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\n      // sometimes they can end up matching nothing at all\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\n        mode_buffer += codeToHighlight.slice(match.index, match.index + 1);\n        if (!SAFE_MODE) {\n          /** @type {AnnotatedError} */\n          const err = new Error('0 width match regex');\n          err.languageName = languageName;\n          err.badRule = lastMatch.rule;\n          throw err;\n        }\n        return 1;\n      }\n      lastMatch = match;\n\n      if (match.type === \"begin\") {\n        return doBeginMatch(match);\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\n        // illegal match, we do not continue processing\n        /** @type {AnnotatedError} */\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n        err.mode = top;\n        throw err;\n      } else if (match.type === \"end\") {\n        var processed = doEndMatch(match);\n        if (processed !== NO_MATCH) {\n          return processed;\n        }\n      }\n\n      // edge case for when illegal matches $ (end of line) which is technically\n      // a 0 width match but not a begin/end match so it's not caught by the\n      // first handler (when ignoreIllegals is true)\n      if (match.type === \"illegal\" && lexeme === \"\") {\n        // advance so we aren't stuck in an infinite loop\n        return 1;\n      }\n\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\n      // decent number of iterations yet our index (cursor position in our\n      // parsing) still 3x behind our index then something is very wrong\n      // so we bail\n      if (iterations > 100000 && iterations > match.index * 3) {\n        const err = new Error('potential infinite loop, way more iterations than matches');\n        throw err;\n      }\n\n      /*\n      Why might be find ourselves here?  Only one occasion now.  An end match that was\n      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`\n      rule sets the end rule to a specific match.  Since the overall mode termination rule that's\n      being used to scan the text isn't recompiled that means that any match that LOOKS like\n      the end (but is not, because it is not an exact match to the beginning) will\n      end up here.  A definite end match, but when `doEndMatch` tries to \"reapply\"\n      the end rule and fails to match, we wind up here, and just silently ignore the end.\n\n      This causes no real harm other than stopping a few times too many.\n      */\n\n      mode_buffer += lexeme;\n      return lexeme.length;\n    }\n\n    var language = getLanguage(languageName);\n    if (!language) {\n      console.error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n      throw new Error('Unknown language: \"' + languageName + '\"');\n    }\n\n    var md = compileLanguage(language);\n    var result = '';\n    /** @type {CompiledMode} */\n    var top = continuation || md;\n    /** @type Record<string,Mode> */\n    var continuations = {}; // keep continuations for sub-languages\n    var emitter = new options.__emitter(options);\n    processContinuations();\n    var mode_buffer = '';\n    var relevance = 0;\n    var index = 0;\n    var iterations = 0;\n    var continueScanAtSamePosition = false;\n\n    try {\n      top.matcher.considerAll();\n\n      for (;;) {\n        iterations++;\n        if (continueScanAtSamePosition) {\n          // only regexes not matched previously will now be\n          // considered for a potential match\n          continueScanAtSamePosition = false;\n        } else {\n          top.matcher.lastIndex = index;\n          top.matcher.considerAll();\n        }\n        const match = top.matcher.exec(codeToHighlight);\n        // console.log(\"match\", match[0], match.rule && match.rule.begin)\n        if (!match) break;\n\n        const beforeMatch = codeToHighlight.substring(index, match.index);\n        const processedCount = processLexeme(beforeMatch, match);\n        index = match.index + processedCount;\n      }\n      processLexeme(codeToHighlight.substr(index));\n      emitter.closeAllNodes();\n      emitter.finalize();\n      result = emitter.toHTML();\n\n      return {\n        relevance: relevance,\n        value: result,\n        language: languageName,\n        illegal: false,\n        emitter: emitter,\n        top: top\n      };\n    } catch (err) {\n      if (err.message && err.message.includes('Illegal')) {\n        return {\n          illegal: true,\n          illegalBy: {\n            msg: err.message,\n            context: codeToHighlight.slice(index - 100, index + 100),\n            mode: err.mode\n          },\n          sofar: result,\n          relevance: 0,\n          value: escape(codeToHighlight),\n          emitter: emitter\n        };\n      } else if (SAFE_MODE) {\n        return {\n          illegal: false,\n          relevance: 0,\n          value: escape(codeToHighlight),\n          emitter: emitter,\n          language: languageName,\n          top: top,\n          errorRaised: err\n        };\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */\n  function justTextHighlightResult(code) {\n    const result = {\n      relevance: 0,\n      emitter: new options.__emitter(options),\n      value: escape(code),\n      illegal: false,\n      top: PLAINTEXT_LANGUAGE\n    };\n    result.emitter.addText(code);\n    return result;\n  }\n\n  /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */\n  function highlightAuto(code, languageSubset) {\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\n    var result = justTextHighlightResult(code);\n    var secondBest = result;\n    languageSubset.filter(getLanguage).filter(autoDetection).forEach(function(name) {\n      var current = _highlight(name, code, false);\n      current.language = name;\n      if (current.relevance > secondBest.relevance) {\n        secondBest = current;\n      }\n      if (current.relevance > result.relevance) {\n        secondBest = result;\n        result = current;\n      }\n    });\n    if (secondBest.language) {\n      // second_best (with underscore) is the expected API\n      result.second_best = secondBest;\n    }\n    return result;\n  }\n\n  /**\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n    @param {string} html\n    @returns {string}\n  */\n  function fixMarkup(html) {\n    if (!(options.tabReplace || options.useBR)) {\n      return html;\n    }\n\n    return html.replace(fixMarkupRe, match => {\n      if (match === '\\n') {\n        return options.useBR ? '<br>' : match;\n      } else if (options.tabReplace) {\n        return match.replace(/\\t/g, options.tabReplace);\n      }\n      return match;\n    });\n  }\n\n  /**\n   * Builds new class name for block given the language name\n   *\n   * @param {string} prevClassName\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */\n  function buildClassName(prevClassName, currentLang, resultLang) {\n    var language = currentLang ? aliases[currentLang] : resultLang;\n    var result = [prevClassName.trim()];\n\n    if (!prevClassName.match(/\\bhljs\\b/)) {\n      result.push('hljs');\n    }\n\n    if (!prevClassName.includes(language)) {\n      result.push(language);\n    }\n\n    return result.join(' ').trim();\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code. Accepts a DOM node and\n   * two optional parameters for fixMarkup.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */\n  function highlightBlock(element) {\n    /** @type HTMLElement */\n    let node = null;\n    const language = blockLanguage(element);\n\n    if (shouldNotHighlight(language)) return;\n\n    fire(\"before:highlightBlock\",\n      { block: element, language: language });\n\n    if (options.useBR) {\n      node = document.createElement('div');\n      node.innerHTML = element.innerHTML.replace(/\\n/g, '').replace(/<br[ /]*>/g, '\\n');\n    } else {\n      node = element;\n    }\n    const text = node.textContent;\n    const result = language ? highlight(language, text, true) : highlightAuto(text);\n\n    const originalStream = nodeStream(node);\n    if (originalStream.length) {\n      const resultNode = document.createElement('div');\n      resultNode.innerHTML = result.value;\n      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n    }\n    result.value = fixMarkup(result.value);\n\n    fire(\"after:highlightBlock\", { block: element, result: result });\n\n    element.innerHTML = result.value;\n    element.className = buildClassName(element.className, language, result.language);\n    element.result = {\n      language: result.language,\n      // TODO: remove with version 11.0\n      re: result.relevance,\n      relavance: result.relevance\n    };\n    if (result.second_best) {\n      element.second_best = {\n        language: result.second_best.language,\n        // TODO: remove with version 11.0\n        re: result.second_best.relevance,\n        relavance: result.second_best.relevance\n      };\n    }\n  }\n\n  /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {{}} userOptions\n   */\n  function configure(userOptions) {\n    options = inherit(options, userOptions);\n  }\n\n  /**\n   * Highlights to all <pre><code> blocks on a page\n   *\n   * @type {Function & {called?: boolean}}\n   */\n  const initHighlighting = () => {\n    if (initHighlighting.called) return;\n    initHighlighting.called = true;\n\n    var blocks = document.querySelectorAll('pre code');\n    ArrayProto.forEach.call(blocks, highlightBlock);\n  };\n\n  // Higlights all when DOMContentLoaded fires\n  function initHighlightingOnLoad() {\n    // @ts-ignore\n    window.addEventListener('DOMContentLoaded', initHighlighting, false);\n  }\n\n  /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */\n  function registerLanguage(languageName, languageDefinition) {\n    var lang = null;\n    try {\n      lang = languageDefinition(hljs);\n    } catch (error) {\n      console.error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n      // hard or soft error\n      if (!SAFE_MODE) { throw error; } else { console.error(error); }\n      // languages that have serious errors are replaced with essentially a\n      // \"plaintext\" stand-in so that the code blocks will still get normal\n      // css classes applied to them - and one bad language won't break the\n      // entire highlighter\n      lang = PLAINTEXT_LANGUAGE;\n    }\n    // give it a temporary name if it doesn't have one in the meta-data\n    if (!lang.name) lang.name = languageName;\n    languages[languageName] = lang;\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\n\n    if (lang.aliases) {\n      registerAliases(lang.aliases, { languageName });\n    }\n  }\n\n  /**\n   * @returns {string[]} List of language internal names\n   */\n  function listLanguages() {\n    return Object.keys(languages);\n  }\n\n  /**\n    intended usage: When one language truly requires another\n\n    Unlike `getLanguage`, this will throw when the requested language\n    is not available.\n\n    @param {string} name - name of the language to fetch/require\n    @returns {Language | never}\n  */\n  function requireLanguage(name) {\n    var lang = getLanguage(name);\n    if (lang) { return lang; }\n\n    var err = new Error('The \\'{}\\' language is required, but not loaded.'.replace('{}', name));\n    throw err;\n  }\n\n  /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */\n  function registerAliases(aliasList, { languageName }) {\n    if (typeof aliasList === 'string') {\n      aliasList = [aliasList];\n    }\n    aliasList.forEach(alias => { aliases[alias] = languageName; });\n  }\n\n  /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */\n  function autoDetection(name) {\n    var lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function addPlugin(plugin) {\n    plugins.push(plugin);\n  }\n\n  /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */\n  function fire(event, args) {\n    var cb = event;\n    plugins.forEach(function(plugin) {\n      if (plugin[cb]) {\n        plugin[cb](args);\n      }\n    });\n  }\n\n  /* Interface definition */\n\n  Object.assign(hljs, {\n    highlight,\n    highlightAuto,\n    fixMarkup,\n    highlightBlock,\n    configure,\n    initHighlighting,\n    initHighlightingOnLoad,\n    registerLanguage,\n    listLanguages,\n    getLanguage,\n    registerAliases,\n    requireLanguage,\n    autoDetection,\n    inherit,\n    addPlugin\n  });\n\n  hljs.debugMode = function() { SAFE_MODE = false; };\n  hljs.safeMode = function() { SAFE_MODE = true; };\n  hljs.versionString = packageJSON.version;\n\n  for (const key in MODES) {\n    // @ts-ignore\n    if (typeof MODES[key] === \"object\") {\n      // @ts-ignore\n      deepFreeze(MODES[key]);\n    }\n  }\n\n  // merge all the modes/regexs into our main object\n  Object.assign(hljs, MODES);\n\n  return hljs;\n};\n\n// export an \"instance\" of the highlighter\nexport default HLJS({});\n", "'use strict';\n\nconst hljs   = require('../../build');\nconst should = require('should');\n\ndescribe('.getLanguage()', () => {\n  it('should get an existing language', () => {\n    const result = hljs.getLanguage('python');\n\n    result.should.be.instanceOf(Object);\n  });\n\n  it('should get an existing language by alias', () => {\n    const result = hljs.getLanguage('py');\n\n    result.should.be.instanceOf(Object);\n  });\n\n  it('should be case insensitive', () => {\n    const result = hljs.getLanguage('pYTHOn');\n\n    result.should.be.instanceOf(Object);\n  });\n\n  it('should return undefined', () => {\n    const result = hljs.getLanguage('-impossible-');\n\n    should.strictEqual(result, undefined);\n  });\n\n  it('should not break on undefined', () => {\n    const result = hljs.getLanguage(undefined);\n\n    should.strictEqual(result, undefined);\n  });\n\n  it('should get the csharp language by c# alias', () => {\n    const result = hljs.getLanguage('c#');\n\n    result.should.be.instanceOf(Object);\n    result.should.have.property('aliases').with.containEql('cs');\n    should.strictEqual(result, hljs.getLanguage('csharp'))\n  });\n});\n"], "fixing_code": ["## Version 10.1.2\n\nFixes:\n\n- fix(night) Prevent object prototype values from being returned by `getLanguage` (#2636) [night][]\n\n[night]: https://github.com/night\n\n\n## Version 10.1.1\n\nFixes:\n\n- Resolve issue on Node 6 due to dangling comma (#2608) [Edwin Hoogerbeets][]\n- Resolve `index.d.ts is not a module` error (#2603) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n[Edwin Hoogerbeets]: https://github.com/ehoogerbeets\n\n\n## Version 10.1.0\n\nNew themes:\n\n- *NNFX* and *NNFX-dark* by [Jim Mason][]\n- *lioshi* by [lioshi][]\n\nParser Engine:\n\n- (parser) Now escapes quotes in text content when escaping HTML (#2564) [Josh Goebel][]\n- (parser) Adds `keywords.$pattern` key to grammar definitions (#2519) [Josh Goebel][]\n- (parser) Adds SHEBANG utility mode [Josh Goebel][]\n- (parser) Adds `registerAliases` method (#2540) [Taufik Nurrohman][]\n- (enh) Added `on:begin` callback for modes (#2261) [Josh Goebel][]\n- (enh) Added `on:end` callback for modes (#2261) [Josh Goebel][]\n- (enh) Added ability to programatically ignore begin and end matches (#2261) [Josh Goebel][]\n- (enh) Added `END_SAME_AS_BEGIN` mode to replace `endSameAsBegin` parser attribute (#2261) [Josh Goebel][]\n- (fix) `fixMarkup` would rarely destroy markup when `useBR` was enabled (#2532) [Josh Goebel][]\n\nDeprecations:\n\n- `htmlbars` grammar is now deprecated. Use `handlebars` instead. (#2344) [Nils Knappmeier][]\n- when using `highlightBlock` `result.re` deprecated. Use `result.relevance` instead. (#2552) [Josh Goebel][]\n- ditto for `result.second_best.re` => `result.second_best.relevance` (#2552)\n- `lexemes` is now deprecated in favor of `keywords.$pattern` key (#2519) [Josh Goebel][]\n- `endSameAsBegin` is now deprecated. (#2261) [Josh Goebel][]\n\nLanguage Improvements:\n\n- fix(groovy) strings are not allowed inside ternary clauses (#2217) [Josh Goebel][]\n- fix(typescript) add `readonly` keyword (#2562) [Martin (Lhoerion)][]\n- fix(javascript) fix regex inside parens after a non-regex (#2530) [Josh Goebel][]\n- enh(typescript) use identifier to match potential keywords, preventing false positivites (#2519) [Josh Goebel][]\n- enh(javascript) use identifier to match potential keywords, preventing false positivites (#2519) [Josh Goebel][]\n- [enh] Add `OPTIMIZE:` and `HACK:` to the labels highlighted inside comments [Josh Goebel][]\n- enh(typescript/javascript/coffeescript/livescript) derive ECMAscript keywords from a common foudation (#2518) [Josh Goebel][]\n- enh(typescript) add setInterval, setTimeout, clearInterval, clearTimeout (#2514) [Josh Goebel][]\n- enh(javascript) add setInterval, setTimeout, clearInterval, clearTimeout (#2514) [Vania Kucher][]\n- enh(cpp) add `pair`, `make_pair`, `priority_queue` as built-ins (#2538) [Hankun Lin][]\n- enh(cpp) recognize `priority_queue` `pair` as cpp containers (#2541) [Hankun Lin][]\n- fix(javascript) prevent `set` keyword conflicting with setTimeout, etc. (#2514) [Vania Kucher][]\n- fix(cpp) Fix highlighting of unterminated raw strings (#2261) [David Benjamin][]\n- fix(javascript) `=>` function with nested `()` in params now works (#2502) [Josh Goebel][]\n- fix(typescript) `=>` function with nested `()` in params now works (#2502) [Josh Goebel][]\n- fix(yaml) Fix tags to include non-word characters (#2486) [Peter Plantinga][]\n- fix(swift) `@objcMembers` was being partially highlighted (#2543) [Nick Randall][]\n- enh(dart) Add `late` and `required` keywords, the `Never` built-in type, and nullable built-in types (#2550) [Sam Rawlins][]\n- enh(erlang) Add underscore separators to numeric literals (#2554) [Sergey Prokhorov][]\n- enh(handlebars) Support for sub-expressions, path-expressions, hashes, block-parameters and literals (#2344) [Nils Knappmeier][]\n- enh(protobuf) Support multiline comments (#2597) [Pavel Evstigneev][]\n- fix(toml) Improve key parsing (#2595) [Antoine du Hamel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n[Peter Plantinga]: https://github.com/pplantinga\n[David Benjamin]: https://github.com/davidben\n[Vania Kucher]: https://github.com/qWici\n[Hankun Lin]: https://github.com/Linhk1606\n[Nick Randall]: https://github.com/nicked\n[Sam Rawlins]: https://github.com/srawlins\n[Sergey Prokhorov]: https://github.com/seriyps\n[Nils Knappmeier]: https://github.com/nknapp\n[Martin (Lhoerion)]: https://github.com/Lhoerion\n[Jim Mason]: https://github.com/RocketMan\n[lioshi]: https://github.com/lioshi\n[Pavel Evstigneev]: https://github.com/Paxa\n[Antoine du Hamel]: https://github.com/aduh95\n\n\n## Version 10.0.2\n\nBrower build:\n\n- [Issue](https://github.com/highlightjs/highlight.js/issues/2505) (bug) Fix: Version 10 fails to load as CommonJS module. (#2511) [Josh Goebel][]\n- [Issue](https://github.com/highlightjs/highlight.js/issues/2505) (removal) AMD module loading support has been removed. (#2511) [Josh Goebel][]\n\nParser Engine Changes:\n\n- [Issue](https://github.com/highlightjs/highlight.js/issues/2522) fix(parser) Fix freez issue with illegal 0 width matches (#2524) [Josh Goebel][]\n\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 10.0.1\n\nParser Engine Changes:\n\n- (bug) Fix sublanguage with no relevance score (#2506) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 10.0.0\n\nNew languages:\n\n- add(php-template) Explicit language to detect PHP templates (vs xml) [Josh Goebel][]\n- enh(python) Added `python-repl` for Python REPL sessions\n- add(never) Added 3rd party Never language support\n\nNew themes:\n\n- *Srcery* by [Chen Bin][]\n\nParser Engine Changes:\n\n- (bug) Fix `beginKeywords` to ignore . matches (#2434) [Josh Goebel][]\n- (enh) add `before:highlight` plugin API callback (#2395) [Josh Goebel][]\n- (enh) add `after:highlight` plugin API callback (#2395) [Josh Goebel][]\n- (enh) split out parse tree generation and HTML rendering concerns (#2404) [Josh Goebel][]\n- (enh) every language can have a `name` attribute now (#2400) [Josh Goebel][]\n- (enh) improve regular expression detect (less false-positives) (#2380) [Josh Goebel][]\n- (enh) make `noHighlightRe` and `languagePrefixRe` configurable (#2374) [Josh Goebel][]\n\nLanguage Improvements:\n\n- enh(python) Exclude parens from functions params (#2490) [\u00c1lvaro Mond\u00e9jar][]\n- enh(swift) Add `compactMap` to keywords as built_in (#2478) [Omid Golparvar][]\n- enh(nim) adds `func` keyword (#2468) [Adnan Yaqoob][]\n- enh(xml) deprecate ActionScript inside script tags (#2444) [Josh Goebel][]\n- fix(javascript) prevent get/set variables conflicting with keywords (#2440) [Josh Goebel][]\n- bug(clojure) Now highlights `defn-` properly (#2438) [Josh Goebel][]\n- enh(bash) default value is another variable (#2439) [Josh Goebel][]\n- enh(bash) string nested within string (#2439) [Josh Goebel][]\n- enh(bash) Add arithmetic expression support (#2439) [Josh Goebel][]\n- enh(clojure) Add support for global definitions name (#2347) [Alexandre Grison][]\n- enh(fortran) Support Fortran 77 style comments (#2416) [Josh Goebel][]\n- (csharp) add support for `@identifier` style identifiers (#2414) [Josh Goebel][]\n- fix(elixir) Support function names with a slash (#2406) [Josh Goebel][]\n- fix(javascript) comma is allowed in a \"value container\" (#2403) [Josh Goebel][]\n- enh(apache) add `deny` and `allow` keywords [Josh Goebel][]\n- enh(apache) highlight numeric attributes values [Josh Goebel][]\n- enh(apache) highlight IP addresses, ports, and strings in sections [Josh Goebel][]\n- enh(php) added more keywords and include `<?=` syntax to meta [Taufik Nurrohman][]\n- fix(protobuf) Fix `rpc` when followed by a block (#) [Josh Goebel][]\n- enh(zephir) almost complete rework of the zephir grammar (#2387) [Josh Goebel][]\n- (markdown) much improved code block support (#2382) [Josh Goebel][]\n- (markdown) improve bold/italic nesting (#2382) [Josh Goebel][]\n- enh(csharp) Support `where` keyword as class constraint (#2378) [Josh Goebel][]\n- enh(csharp) Allow reference path in class inheritance lists (#2378) [Josh Goebel][]\n- enh(csharp) Add generic modifiers (in, out) (#2378) [Josh Goebel][]\n- (fortran) enh(fortran) support intrinsic data types (#2379) [Josh Goebel][]\n- enh(java) annotations can include numbers (#2377) [Josh Goebel][]\n- enh(java) annotations can take params (#2377) [Josh Goebel][]\n- enh(java) allow annotations inside function call params (#2377) [Josh Goebel][]\n- enh(parser) pre/post-highlightBlock callbacks via plugin (#2285) [Josh Goebel][]\n- (fortran) Add Fortran 2018 keywords and coarray intrinsics (#2361) [Sam Miller][]\n- (delphi) highlight hexadecimal, octal, and binary numbers (#2370) [Robert Riebisch]()\n- enh(plaintext) added `text` and `txt` as alias (#2360) [Taufik Nurrohman][]\n- enh(powershell) added PowerShell v5.1/v7 default aliases as \"built_in\"s (#2423) [Sean Williams][]\n- enh(yaml) added support for timestamps (#2475) [Peter Plantinga][]\n\nDeveloper Tools:\n\n- added Dockerfile for optionally developing with a container\n\n[Omid Golparvar]: https://github.com/omidgolparvar\n[Alexandre Grison]: https://github.com/agrison\n[Josh Goebel]: https://github.com/yyyc514\n[Chen Bin]: https://github.com/redguardtoo\n[Sam Miller]: https://github.com/smillerc\n[Robert Riebisch]: https://github.com/bttrx\n[Taufik Nurrohman]: https://github.com/taufik-nurrohman\n[Josh Goebel]: https://github.com/yyyc514\n[Sean Williams]: https://github.com/hmmwhatsthisdo\n[Adnan Yaqoob]: https://github.com/adnanyaqoobvirk\n[\u00c1lvaro Mond\u00e9jar]: https://github.com/mondeja\n\n\n## Version 9.18.1\n\nGrammar Improvements:\n\n- bug(coffeescript) fix freezing bug due to badly behaved regex (#2376) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 9.18.0\n\nNew languages:\n\n- none.\n\nNew themes:\n\n- none.\n\nCore Changes:\n\n- none.\n\nLanguage Improvements:\n\n- (javascript) fix JSX self-closing tag issues (#2322) [Josh Goebel][]\n- (fortran) added `block` and `endblock` keywords (#2343) [Philipp Engel][]\n- (javascript) support jsx fragments (#2333) [Josh Goebel][]\n- (ini) support TOML arrays, clean up grammar (#2335) [Josh Goebel][]\n- (vbnet) add nameof operator to the keywords (#2329) [Youssef Victor][]\n- (stan) updated with improved coverage of language keywords and patterns. (#1829) [Jeffrey Arnold][]\n- enh(cpp) Detect namespaced function types (`A::typeName func(...)`) (#2332) [Josh Goebel][]\n- enh(cpp) Detect namespaced functions also (`A::functionName`) (#2332) [Josh Goebel][]\n- enh(cpp) Properly detect decltype(auto) (#2332) [Josh Goebel][]\n- enh(cpp) recognize primitive types (`int8_t`, etc.) as function types (#2332) [Josh Goebel][]\n\nDeveloper Tools:\n\n- feat(developer): add button to show parsed structure (#2345) [Nils Knappmeier][]\n\n[Jeffrey Arnold]: https://github.com/jrnold\n[Josh Goebel]: https://github.com/yyyc514\n[Philipp Engel]: https://github.com/interkosmos\n[Youssef Victor]: https://github.com/Youssef1313\n[Nils Knappmeier]: https://github.com/nknapp\n\n\n## Version 9.17.1\n\nFixes:\n\n- fix(parser): resolve IE 11 issue with Object.freeze() (#2319) [Josh Goebel][]\n\n[Josh Goebel]: https://github.com/yyyc514\n\n\n## Version 9.17.0\n\nNew languages:\n\n- none.\n\nNew themes:\n\n- *Gradient Dark* by [Samia Ali][]\n\nCore Improvements:\n\n- chore(parser): switch from `createElementNS` to `createElement` (#2314) [Josh Goebel][]\n- enh(parser): add better error when a language requirement is missing (#2311) [Josh Goebel][]\n- fix(parser/docs): disallow `self` mode at the top-level of a language (#2294) [Josh Goebel][]\n- enh(parser) add safe & debug modes.  Better error handling for crash conditions. (#2286) [Josh Goebel][]\n- fix(parser): Fix merger HTML attribute quoting (#2235) [Josh Goebel][]\n- fix(parser): Look-ahead regex now work for end matches also (#2237) [Josh Goebel][]\n- fix(parser): Better errors when a language is missing (#2236) [Josh Goebel][]\n- fix(parser): freeze built-in modes to prevent grammars altering them (#2271) [Josh Goebel][]\n- fix(themes): fix inconsistencies between some themes padding/spacing (#2300) [Josh Goebel][]\n- ehh(build) Add CI check for building a \"use strict\" safe rollup package from NPM builds (#2247) [Josh Goebel][]\n- fix(pkg): Prefix global addEventListener with window to be able to minify with closure compiler (#2305) [Kirill Saksin]()\n\nLanguage Improvements:\n\n- fix(sql): backslash is not used to escape in strings in standard SQL (#1748) [Mike Schall][]\n- enh(ebnf) add backticks as additional string variant (#2290) [Chris Marchesi][]\n- chore(javascript): add esm related extensions to aliases (#2298) [Rongjian Zhang][]\n- fix(kotlin): fix termination of \"\"\" string literals (#2295) [Josh Goebel][]\n- fix(mercury): don't change global STRING modes (#2271) [Josh Goebel][]\n- enh(xml) expand and improve document type highlighting (#2287) [w3suli][]\n- enh(ebnf) add underscore as allowed meta identifier character, and dot as terminator (#2281) [Chris Marchesi][]\n- fix(makefile) fix double relevance for assigns, improves auto-detection (#2278) [Josh Goebel][]\n- enh(xml) support for highlighting entities (#2260) [w3suli][]\n- enh(gml) fix naming of keyword class (consistency fix) (#2254) [Liam Nobel][]\n- enh(javascript): Add support for jsdoc comments (#2245) [Milutin Kristofic][]\n- fix(python) fix `if` getting confused as an f-string (#2200) [Josh Goebel][] and [Carl Baxter][]\n- enh(powershell) major overhaul, huge improvements (#2224)\n- enh(css) Improve @rule highlighting, including properties (#2241) [Josh Goebel][]\n- enh(css) Improve highlighting of numbers inside expr/func `calc(2px+3px)` (#2241)\n- enh(scss) Pull some of the CSS improvements back into SCSS (#2241)\n- fix(go): Fix escaped character literals (#2266) [David Benjamin][]\n- fix(objectivec): Fix various preprocessor highlighting issues (#2265) [David Benjamin][]\n- fix(objectivec): Handle multibyte character literals (#2268) [David Benjamin][]\n- enh(cpp): Add additional keywords (#2289) [Adrian Ostrowski][]\n\n[Josh Goebel]: https://github.com/yyyc514\n[Liam Nobel]: https://github.com/liamnobel\n[Carl Baxter]: https://github.com/cdbax\n[Milutin Kristofic]: https://github.com/milutin\n[w3suli]: https://github.com/w3suli\n[David Benjamin]: https://github.com/davidben\n[Chris Marchesi]: https://github.com/vancluever\n[Adrian Ostrowski]: https://github.com/aostrowski\n[Rongjian Zhang]: https://github.com/pd4d10\n[Mike Schall]: https://github.com/schallm\n[Kirill Saksin]: https://github.com/saksmt\n[Samia Ali]:https://github.com/samiaab1990\n\n\n## Version 9.16.2\n\nNew languages:\n  none.\n\nNew styles:\n  none.\n\nImprovements:\n- fix(arduino) Resolves issue with arduino.js not being \"use strict\" safe (#2247)\n\n\n## Version 9.16.1\n\nNew languages:\n  none.\n\nNew styles:\n- *Night Owl* by [Carl Baxter][]\n\nImprovements:\n- Add CLI tool to quickly check for relevance conflicts [Mark Ellis][] (#1554)\n- enhance(twig) update list of filter and tags (#2090)\n- fix(crystal): correctly highlight `!~` method definition (#2222)\n- fix dropping characters if we choke up on a 0-width match (#2219)\n- (accesslog) improve accesslog relevancy scoring (#2172)\n- fix(shell): fix parsing of prompts with forward slash (#2218)\n- improve parser to properly support look-ahead regex in begin matchers (#2135)\n- blacklist super-common keywords from having relevance (#2179)\n- fix(swift): support for `@dynamicMemberLookup` and `@propertyWrapper` (#2202)\n- fix: `endWithParent` inside `starts` now always works (#2201)\n- fix(typescript): constructor in declaration doesn't break highlighting\n- fix(typescript): only match function keyword as a separate identifier (#2191)\n- feature(arduino) make arduino a super-set of cpp grammar\n- fix(javascript): fix object attributes immediately following line comments\n- fix(xml): remove `vbscript` as potential script tag subLanguage\n- fix(Elixir): improve regex for numbers\n- fix(YAML): improve matching for keys, blocks and numbers\n- fix(Pony): improve regex for numbers\n- fix(handlebars): add support for raw-blocks, and triple-mustaches(#2175)\n- fix(handlebars): fix parsing of block-comments containing closing mustaches (#2175)\n- fix(handlebars): add support for segment-literal notation, and escaped mustaches (#2184)\n- JSON: support for comments in JSON (#2016)\n- fix(cpp): improve string literal matching\n- fix(highlight.js): omit empty span-tags in the output (#2182)\n- fix(Go): improve function declaration matching\n- fix(python): added support for f-string literal curly braces (#2195)\n- fix(cpp): add `future` built-in (#1610)\n- fix(python): support comments within function parameters (#2214)\n\n[Carl Baxter]: https://github.com/cdbax\n[Mark Ellis]: https://github.com/ellismarkf\n\n## Version 9.15.10\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n  - support for ruby's squiggly heredoc (#2049)\n  - support css custom properties (#2082)\n  - fix(PureBASIC): update to 5.60 (#1508)\n  - fix(Kotlin): parenthesized types in function declaration (#2107)\n  - fix(Kotlin): nested comment (#2104)\n  - fix(isbl): contains key typo (#2103)\n  - fix(github-gist.css): match Github styles (#2100)\n  - fix(elm): update to latest elm syntax (#2088)\n  - fix: Support highlighting inline HTML and CSS tagged template strings in JS and TS (#2105)\n  - feat(YAML): add YAML to common languages (#1952)\n  - feat(xml): Add support for Windows Script File (.wsf), inline VBScript in XML `script` tags (#1690)\n\n## Version 9.15.9\n\nImprovements:\n - fix(AutoHotkey): order and extended highlighting (#1579)\n - fix(Go): correctly highlight hex numbers, rather than stopping at last 'd' or 'f'. (#2060)\n - fix(Mathematica): Improvements to language (#2065)\n - fix(Node): Adds SCSS build (#2079)\n - fix(Rust): update keywords (#2052)\n - fix(Stata): Added keywords for the meta-analysis suite introduced in Stata 16 (#2081)\n - fix(Bash): escape double quotes (#2048)\n\n## Version 9.15.8\n\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n  - fix(bash): revert escaped double quotes - broke Firefox/Safari.\n\n## Version 9.15.7\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n - fix(powershell): Add cmdlets (#2022)\n - fix(Bash): escaped double quotes (#2041)\n - fix(c++): add aliases 'hh', 'hxx', 'cxx' (#2017)\n - fix(ini/toml): Support comments on the same line. (#2039)\n - fix(JSX): not rendering well in a function without parentheses. (#2024)\n - fix(LiveCode): language definition update (#2021)\n - fix(markdown): indented lists (#2004)\n - fix(styles/school-book): don't style all the pre, use .hljs instead (#2034)\n - fix(JSX): Modify JSX tag detection to use XML language regex in place of simplistic \\w+\n\n## Version 9.15.6\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n - Move dependencies to be devDependencies.\n - Fixed security issues in dev dependencies.\n\n## Version 9.15.5\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix: updated build tool.\n\n## Version 9.15.4\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix: reverted hljs cli build tool, as it was causing issues with install.\n\n## Version 9.15.3\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix: reverted hljs cli build tool, as it was causing issues with install.\n\n## Version 9.15.2\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n  \ud83d\udd25 Hot fix that was preventing highlight.js from installing.\n\n## Version 9.15.1\n\nNew languages:\n    none.\n\nNew styles:\n    none.\n\nImprovements:\n\n- Pony: Fixed keywords without spaces at line ends, highlighting of `iso` in class definitions, and function heads without bodies in traits and interfaces. Removed FUNCTION and CLASS modes until they are found to be needed and to provide some of the fixes.\n - Support external language files in minified version of highlight.js (#1888)\n\n## Version 9.15\n\nNew languages:\n    none.\n\nNew styles:\n    none.\n\nImprovements:\n - new cli tool `hljs` - allows easier [building from command line](docs/building-testing.rst#building-a-bundle-from-the-command-line).\n - cpp: Fully support C++11 raw strings. (#1897)\n - Python: Treat False None and True as literals (#1920)\n\n## Version 9.14.2\n\nNew languages:\n  none.\nNew styles:\n  none.\nImprovements:\n- *Gauss* fixed to stop global namespace pollution [Scott Hyndman][].\n- fix(Tcl): removed apostrophe string delimiters (don't exist)\n\n[Scott Hyndman]: https://github.com/shyndman\n\n## Version 9.14.1\n\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n- Pony: language improvements (#1958)\n\n## Version 9.14.0\n\nNew languages:\n    none.\nNew styles:\n    none.\nImprovements:\n- Pony: add missing \"object\" highlighting (#1932)\n- Added *XQuery* built-in functions, prolog declarations, as well as parsing of function bodies, computed and direct constructors, by [Duncan Paterson][]\n- fix(dart): Corrects highlighting with string interpolation. (#1946)\n- fix(swift): be eager on optional-using types (!/?) (#1919)\n- fix(tex): Changed cyrillic to unicode (IE11 throw SCRIPT5021) (#1601)\n- fix(JavaScript): Recognize get/set accessor keywords (#1940)\n- Fixed Dockerfile definition when using highlight continuation parameter, by [Laurent Voullemier][]\n- Added tests & new `annotation` and `verbatim` keywords to *Crystal*, by [Benoit de Chezelles][]\n- Added missing dockerfile markup tests, by [Laurent Voullemier][]\n  Allow empty prompt text in clojure-repl, by [Egor Rogov][]\n- Fixed several issues with *Crystal* language definition, by [Johannes M\u00fcller][]\n- Added `C#` as an alias for *CSharp* language, by [Ahmed Atito][]\n- Added generic user-defined proc support, new compiler define, refactor to re-use rules, and add tests to *GAUSS*, by [Matthew Evans][]\n- Improve *Crystal* language to highlight regexes after some keywords, by [Tsuyusato Kitsune][]\n- Fix filterByQualifiers: fileInfo can be null\n- Fixed String interpolation in Dart, by [Scott Hyndman][].\n\n[Laurent Voullemier]: https://github.com/l-vo\n[Benoit de Chezelles]: https://github.com/bew\n[Johannes M\u00fcller]: https://github.com/straight-shoota\n[Ahmed Atito]: https://github.com/atitoa93\n[Matthew Evans]: https://github.com/matthewevans\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Scott Hyndman]: https://github.com/shyndman\n[Duncan Paterson]: https://github.com/duncdrum\n\n## Version 9.13.1\n\nImprovements:\n\n- *C#* function declarations no longer include trailing whitespace, by [JeremyTCD][]\n- Added new and missing keywords to *AngelScript*, by [Melissa Geels][]\n- *TypeScript* decorator factories highlighting fix, by [Antoine Boisier-Michaud][]\n- Added support for multiline strings to *Swift*, by [Alejandro Isaza][]\n- Fixed issue that was causing some minifiers to fail.\n- Fixed `autoDetection` to accept language aliases.\n\n[JeremyTCD]: https://github.com/JeremyTCD\n[Melissa Geels]: https://github.com/codecat\n[Antoine Boisier-Michaud]: https://github.com/Aboisier\n[Alejandro Isaza]: https://github.com/alejandro-isaza\n\n## Version 9.13.0\n\nNew languages:\n\n- *ArcGIS Arcade* by [John Foster][]\n- *AngelScript* by [Melissa Geels][]\n- *GML* by [meseta][]\n- *isbl* built-in language DIRECTUM and Conterra by [Dmitriy Tarasov][].\n- *PostgreSQL* SQL dialect and PL/pgSQL language by [Egor Rogov][].\n- *ReasonML* by [Gidi Meir Morris][]\n- *SAS* by [Mauricio Caceres Bravo][]\n- *Plaintext* by [Egor Rogov][]\n- *.properties* by [bostko][] and [Egor Rogov][]\n\nNew styles:\n\n- *a11y-dark theme* by [Eric Bailey][]\n- *a11y-light theme* by [Eric Bailey][]\n- *An Old Hope* by [Gustavo Costa][]\n- *Atom One Dark Reasonable* by [Gidi Meir Morris][]\n- *isbl editor dark* by [Dmitriy Tarasov][]\n- *isbl editor light* by [Dmitriy Tarasov][]\n- *Lightfair* by [Tristian Kelly][]\n- [*Nord*][nord-highlightjs] by [Arctic Ice Studio][]\n- *[\ud83e\udd84 Shades of Purple](https://github.com/ahmadawais/Shades-of-Purple-HighlightJS)* by [Ahmad Awais][]\n\nImprovements:\n\n- New attribute `endSameAsBegin` for nested constructs with variable names\n  by [Egor Rogov][].\n- *Python* highlighting of escaped quotes fixed by [Harmon][]\n- *PHP*: Added alias for php7, by [Vijaya Chandran Mani][]\n- *C++* string handling, by [David Benjamin][]\n- *Swift* Add `@objcMembers` to `@attributes`, by [Berk \u00c7ebi][]\n- Infrastructural changes by [Marcos C\u00e1ceres][]\n- Fixed metachars highighting for *NSIS* by [Jan T. Sott][]\n- *Yaml* highlight local tags as types by [L\u00e9o Lam][]\n- Improved highlighting for *Elixir* by [Piotr Kaminski][]\n- New attribute `disableAutodetect` for preventing autodetection by [Egor Rogov][]\n- *Matlab*: transpose operators and double quote strings, by [JohnC32][] and [Egor Rogov][]\n- Various documentation typos and improvemets by [Jimmy W\u00e4rting][], [Lutz B\u00fcch][], [bcleland][]\n- *Cmake* updated with new keywords and commands by [Deniz Bahadir][]\n\n[Ahmad Awais]: https://github.com/ahmadawais\n[Arctic Ice Studio]: https://github.com/arcticicestudio\n[Dmitriy Tarasov]: https://github.com/MedvedTMN\n[Egor Rogov]: https://github.com/egor-rogov\n[Eric Bailey]: https://github.com/ericwbailey\n[Gidi Meir Morris]: https://github.com/gmmorris\n[Gustavo Costa]: https://github.com/gusbemacbe\n[Harmon]: https://github.com/Harmon758\n[Melissa Geels]: https://github.com/codecat\n[meseta]: https://github.com/meseta\n[nord-highlightjs]: https://github.com/arcticicestudio/nord-highlightjs\n[Tristian Kelly]: https://github.com/TristianK3604\n[Vijaya Chandran Mani]: https://github.com/vijaycs85\n[John Foster]: https://github.com/jf990\n[David Benjamin]: https://github.com/davidben\n[Berk \u00c7ebi]: https://github.com/berkcebi\n[Mauricio Caceres Bravo]: https://github.com/mcaceresb\n[bostko]: https://github.com/bostko\n[Deniz Bahadir]: https://github.com/Bagira80\n[bcleland]: https://github.com/bcleland\n[JohnC32]: https://github.com/JohnC32\n[Lutz B\u00fcch]: https://github.com/lutz-100worte\n[Piotr Kaminski]: https://github.com/pkaminski\n[L\u00e9o Lam]: https://github.com/leoetlino\n[Jan T. Sott]: https://github.com/idleberg\n[Jimmy W\u00e4rting]: https://github.com/jimmywarting\n[Marcos C\u00e1ceres]: https://github.com/marcoscaceres\n\n## Version 9.12.0\n\nNew language:\n\n- *MikroTik* RouterOS Scripting language by [Ivan Dementev][].\n\nNew style:\n\n- *VisualStudio 2015 Dark* by [Nicolas LLOBERA][]\n\nImprovements:\n- *Crystal* updated with new keywords and syntaxes by [Tsuyusato Kitsune][].\n- *Julia* updated to the modern definitions by [Alex Arslan][].\n- *julia-repl* added by [Morten Piibeleht][].\n- [Stanislav Belov][] wrote a new definition for *1C*, replacing the one that\n  has not been updated for more than 8 years. The new version supports syntax\n  for versions 7.7 and 8.\n- [Nicolas LLOBERA][] improved C# definition fixing edge cases with function\n  titles detection and added highlighting of `[Attributes]`.\n- [nnnik][] provided a few correctness fixes for *Autohotkey*.\n- [Martin Clausen][] made annotation collections in *Clojure* to look\n  consistently with other kinds.\n- [Alejandro Alonso][] updated *Swift* keywords.\n\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Alex Arslan]: https://github.com/ararslan\n[Morten Piibeleht]: https://github.com/mortenpi\n[Stanislav Belov]: https://github.com/4ppl\n[Ivan Dementev]: https://github.com/DiVAN1x\n[Nicolas LLOBERA]: https://github.com/Nicolas01\n[nnnik]: https://github.com/nnnik\n[Martin Clausen]: https://github.com/maacl\n[Alejandro Alonso]: https://github.com/Azoy\n\n## Version 9.11.0\n\nNew languages:\n\n- *Shell* by [Tsuyusato Kitsune][]\n- *jboss-cli* by [Rapha\u00ebl Parr\u00ebe][]\n\nImprovements:\n\n- [Jo\u00ebl Porquet] has [greatly improved the definition of *makefile*][5b3e0e6].\n- *C++* class titles are now highlighted as in other languages with classes.\n- [Jordi Petit][] added rarely used `or`, `and` and `not` keywords to *C++*.\n- [Pieter Vantorre][] fixed highlighting of negative floating point values.\n\n\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Jordi Petit]: https://github.com/jordi-petit\n[Rapha\u00ebl Parr\u00ebe]: https://github.com/rparree\n[Pieter Vantorre]: https://github.com/NuclearCookie\n[5b3e0e6]: https://github.com/isagalaev/highlight.js/commit/5b3e0e68bfaae282faff6697d6a490567fa9d44b\n\n\n## Version 9.10.0\n\nApologies for missing the previous release cycle. Some thing just can't be\nautomated\u2026 Anyway, we're back!\n\nNew languages:\n\n- *Hy* by [Sergey Sobko][]\n- *Leaf* by [Hale Chan][]\n- *N1QL* by [Andres T\u00e4ht][] and [Rene Saarsoo][]\n\nImprovements:\n\n- *Rust* got updated with new keywords by [Kasper Andersen][] and then\n  significantly modernized even more by [Eduard-Mihai Burtescu][] (yes, @eddyb,\n  Rust core team member!)\n- *Python* updated with f-literals by [Philipp A][].\n- *YAML* updated with unquoted strings support.\n- *Gauss* updated with new keywords by [Matt Evans][].\n- *Lua* updated with new keywords by [Joe Blow][].\n- *Kotlin* updated with new keywords by [Philipp Hauer][].\n- *TypeScript* got highlighting of function params and updated keywords by\n  [Ike Ku][].\n- *Scheme* now correctly handles \\`-quoted lists thanks to [Guannan Wei].\n- [Sam Wu][] fixed handling of `<<` in *C++* defines.\n\n[Philipp A]: https://github.com/flying-sheep\n[Philipp Hauer]: https://github.com/phauer\n[Sergey Sobko]: https://github.com/profitware\n[Hale Chan]: https://github.com/halechan\n[Matt Evans]: https://github.com/matthewevans\n[Joe Blow]: https://github.com/mossarelli\n[Kasper Andersen]: https://github.com/kasma1990\n[Eduard-Mihai Burtescu]: https://github.com/eddyb\n[Andres T\u00e4ht]: https://github.com/andrestaht\n[Rene Saarsoo]: https://github.com/nene\n[Philipp Hauer]: https://github.com/phauer\n[Ike Ku]: https://github.com/dempfi\n[Guannan Wei]: https://github.com/Kraks\n[Sam Wu]: https://github.com/samsam2310\n\n\n## Version 9.9.0\n\nNew languages\n\n- *LLVM* by [Michael Rodler][]\n\nImprovements:\n\n- *TypeScript* updated with annotations and param lists inside constructors, by\n  [Raphael Parree][].\n- *CoffeeScript* updated with new keywords and fixed to recognize JavaScript\n  in \\`\\`\\`, thanks to thanks to [Geoffrey Booth][].\n- Compiler directives in *Delphi* are now correctly highlighted as \"meta\".\n\n[Raphael Parree]: https://github.com/rparree\n[Michael Rodler]: https://github.com/f0rki\n[Geoffrey Booth]: https://github.com/GeoffreyBooth\n\n\n## Version 9.8.0 \"New York\"\n\nThis version is the second one that deserved a name. Because I'm in New York,\nand the release isn't missing the deadline only because it's still Tuesday on\nWest Coast.\n\nNew languages:\n\n- *Clean* by [Camil Staps][]\n- *Flix* by [Magnus Madsen][]\n\nImprovements:\n\n- [Kenton Hamaluik][] did a comprehensive update for *Haxe*.\n- New commands for *PowerShell* from [Nicolas Le Gall][].\n- [Jan T. Sott][] updated *NSIS*.\n- *Java* and *Swift* support unicode characters in identifiers thanks to\n  [Alexander Lichter][].\n\n[Camil Staps]: https://github.com/camilstaps\n[Magnus Madsen]: https://github.com/magnus-madsen\n[Kenton Hamaluik]: https://github.com/FuzzyWuzzie\n[Nicolas Le Gall]: https://github.com/darkitty\n[Jan T. Sott]: https://github.com/idleberg\n[Alexander Lichter]: https://github.com/manniL\n\n\n## Version 9.7.0\n\nA comprehensive bugfix release. This is one of the best things about\nhighlight.js: even boring things keep getting better (even if slow).\n\n- VHDL updated with PSL keywords and uses more consistent styling.\n- Nested C-style comments no longer break highlighting in many languages.\n- JavaScript updated with `=>` functions, highlighted object attributes and\n  parsing within template string substitution blocks (`${...}`).\n- Fixed another corner case with self-closing `<tag/>` in JSX.\n- Added `HEALTHCHECK` directive in Docker.\n- Delphi updated with new Free Pascal keywords.\n- Fixed digit separator parsing in C++.\n- C# updated with new keywords and fixed to allow multiple identifiers within\n  generics `<...>`.\n- Fixed another slow regex in Less.\n\n\n## Version 9.6.0\n\nNew languages:\n\n- *ABNF* and *EBNF* by [Alex McKibben][]\n- *Awk* by [Matthew Daly][]\n- *SubUnit* by [Sergey Bronnikov][]\n\nNew styles:\n\n- *Atom One* in both Dark and Light variants  by [Daniel Gamage][]\n\nPlus, a few smaller updates for *Lasso*, *Elixir*, *C++* and *SQL*.\n\n[Alex McKibben]: https://github.com/mckibbenta\n[Daniel Gamage]: https://github.com/danielgamage\n[Matthew Daly]: https://github.com/matthewbdaly\n[Sergey Bronnikov]: https://github.com/ligurio\n\n\n## Version 9.5.0\n\nNew languages:\n\n- *Excel* by [Victor Zhou][]\n- *Linden Scripting Language* by [Builder's Brewery][]\n- *TAP* (Test Anything Protocol) by [Sergey Bronnikov][]\n- *Pony* by [Joe Eli McIlvain][]\n- *Coq* by [Stephan Boyer][]\n- *dsconfig* and *LDIF* by [Jacob Childress][]\n\nNew styles:\n\n- *Ocean Dark* by [Gavin Siu][]\n\nNotable changes:\n\n- [Minh Nguy\u1ec5n][] added more built-ins to Objective C.\n- [Jeremy Hull][] fixed corner cases in C++ preprocessor directives and Diff\n  comments.\n- [Victor Zhou][] added support for digit separators in C++ numbers.\n\n[Gavin Siu]: https://github.com/gavsiu\n[Builder's Brewery]: https://github.com/buildersbrewery\n[Victor Zhou]: https://github.com/OiCMudkips\n[Sergey Bronnikov]: https://github.com/ligurio\n[Joe Eli McIlvain]: https://github.com/jemc\n[Stephan Boyer]: https://github.com/boyers\n[Jacob Childress]: https://github.com/braveulysses\n[Minh Nguy\u1ec5n]: https://github.com/1ec5\n[Jeremy Hull]: https://github.com/sourrust\n\n\n## Version 9.4.0\n\nNew languages:\n\n- *PureBASIC* by [Tristano Ajmone][]\n- *BNF* by [Oleg Efimov][]\n- *Ada* by [Lars Schulna][]\n\nNew styles:\n\n- *PureBASIC* by [Tristano Ajmone][]\n\nImprovements to existing languages and styles:\n\n- We now highlight function declarations in Go.\n- [Taisuke Fujimoto][] contributed very convoluted rules for raw and\n  interpolated strings in C#.\n- [Boone Severson][] updated Verilog to comply with IEEE 1800-2012\n  SystemVerilog.\n- [Victor Zhou][] improved rules for comments and strings in PowerShell files.\n- [Janis Voigtl\u00e4nder][] updated the definition of Elm to version 0.17 of the\n  languages. Elm is now featured on the front page of <https://highlightjs.org>.\n- Special variable `$this` is highlighted as a keyword in PHP.\n- `usize` and `isize` are now highlighted in Rust.\n- Fixed labels and directives in x86 assembler.\n\n[Tristano Ajmone]: https://github.com/tajmone\n[Taisuke Fujimoto]: https://github.com/temp-impl\n[Oleg Efimov]: https://github.com/Sannis\n[Boone Severson]: https://github.com/BooneJS\n[Victor Zhou]: https://github.com/OiCMudkips\n[Lars Schulna]: https://github.com/captain-hanuta\n[Janis Voigtl\u00e4nder]: https://github.com/jvoigtlaender\n\n\n## Version 9.3.0\n\nNew languages:\n\n- *Tagger Script* by [Philipp Wolfer][]\n- *MoonScript* by [Billy Quith][]\n\nNew styles:\n\n- *xt256* by [Herbert Shin][]\n\nImprovements to existing languages and styles:\n\n- More robust handling of unquoted HTML tag attributes\n- Relevance tuning for QML which was unnecessary eager at seizing other\n  languages' code\n- Improve GAMS language parsing\n- Fixed a bunch of bugs around selectors in Less\n- Kotlin's got a new definition for annotations, updated keywords and other\n  minor improvements\n- Added `move` to Rust keywords\n- Markdown now recognizes \\`\\`\\`-fenced code blocks\n- Improved detection of function declarations in C++ and C#\n\n[Philipp Wolfer]: https://github.com/phw\n[Billy Quith]: https://github.com/billyquith\n[Herbert Shin]: https://github.com/initbar\n\n\n## Version 9.2.0\n\nNew languages:\n\n- *QML* by [John Foster][]\n- *HTMLBars* by [Michael Johnston][]\n- *CSP* by [Taras][]\n- *Maxima* by [Robert Dodier][]\n\nNew styles:\n\n- *Gruvbox* by [Qeole][]\n- *Dracula* by [Denis Ciccale][]\n\nImprovements to existing languages and styles:\n\n- We now correctly handle JSX with arbitrary node tree depth.\n- Argument list for `(lambda)` in Scheme is no longer highlighted as a function\n  call.\n- Stylus syntax doesn't break on valid CSS.\n- More correct handling of comments and strings and other improvements for\n  VimScript.\n- More subtle work on the default style.\n- We now use anonymous modules for AMD.\n- `macro_rules!` is now recognized as a built-in in Rust.\n\n[John Foster]: https://github.com/jf990\n[Qeole]: https://github.com/Qeole\n[Denis Ciccale]: https://github.com/dciccale\n[Michael Johnston]: https://github.com/lastobelus\n[Taras]: https://github.com/oxdef\n[Robert Dodier]: https://github.com/robert-dodier\n\n\n## Version 9.1.0\n\nNew languages:\n\n- *Stan* by [Brendan Rocks][]\n- *BASIC* by [Rapha\u00ebl Ass\u00e9nat][]\n- *GAUSS* by [Matt Evans][]\n- *DTS* by [Martin Braun][]\n- *Arduino* by [Stefania Mellai][]\n\nNew Styles:\n\n- *Arduino Light* by [Stefania Mellai][]\n\nImprovements to existing languages and styles:\n\n- Handle return type annotations in Python\n- Allow shebang headers in Javascript\n- Support strings in Rust meta\n- Recognize `struct` as a class-level definition in Rust\n- Recognize b-prefixed chars and strings in Rust\n- Better numbers handling in Verilog\n\n[Brendan Rocks]: http://brendanrocks.com\n[Rapha\u00ebl Ass\u00e9nat]: https://github.com/raphnet\n[Matt Evans]: https://github.com/matthewevans\n[Martin Braun]: https://github.com/mbr0wn\n[Stefania Mellai]: https://github.com/smellai\n\n\n## Version 9.0.0\n\nThe new major version brings a reworked styling system. Highlight.js now defines\na limited set of highlightable classes giving a consistent result across all the\nstyles and languages. You can read a more detailed explanation and background in\nthe [tracking issue][#348] that started this long process back in May.\n\nThis change is backwards incompatible for those who uses highlight.js with a\ncustom stylesheet. The [new style guide][sg] explains how to write styles\nin this new world.\n\nBundled themes have also suffered a significant amount of improvements and may\nlook different in places, but all the things now consistent and make more sense.\nAmong others, the Default style has got a refresh and will probably be tweaked\nsome more in next releases. Please do give your feedback in our\n[issue tracker][issues].\n\nNew languages in this release:\n\n- *Cach\u00e9 Object Script* by [Nikita Savchenko][]\n- *YAML* by [Stefan Wienert][]\n- *MIPS Assembler* by [Nebuleon Fumika][]\n- *HSP* by [prince][]\n\nImprovements to existing languages and styles:\n\n- ECMAScript 6 modules import now do not require closing semicolon.\n- ECMAScript 6 classes constructors now highlighted.\n- Template string support for Typescript, as for ECMAScript 6.\n- Scala case classes params highlight fixed.\n- Built-in names introduced in Julia v0.4 added by [Kenta Sato][].\n- Refreshed Default style.\n\nOther notable changes:\n\n- [Web workers support][webworkers] added bu [Jan K\u00fchle][].\n- We now have tests for compressed browser builds as well.\n- The building tool chain has been switched to node.js 4.x. and is now\n  shamelessly uses ES6 features all over the place, courtesy of [Jeremy Hull][].\n- License added to non-compressed browser build.\n\n[Jan K\u00fchle]: https://github.com/frigus02\n[Stefan Wienert]: https://github.com/zealot128\n[Kenta Sato]: https://github.com/bicycle1885\n[Nikita Savchenko]: https://github.com/ZitRos\n[webworkers]: https://github.com/isagalaev/highlight.js#web-workers\n[Jeremy Hull]: https://github.com/sourrust\n[#348]: https://github.com/isagalaev/highlight.js/issues/348\n[sg]: http://highlightjs.readthedocs.org/en/latest/style-guide.html\n[issues]: https://github.com/isagalaev/highlight.js/issues\n[Nebuleon Fumika]: https://github.com/Nebuleon\n[prince]: https://github.com/prince-0203\n\n\n## Version 8.9.1\n\nSome last-minute changes reverted due to strange bug with minified browser build:\n\n- Scala case classes params highlight fixed\n- ECMAScript 6 modules import now do not require closing semicolon\n- ECMAScript 6 classes constructors now highlighted\n- Template string support for Typescript, as for ECMAScript 6\n- License added to not minified browser build\n\n\n## Version 8.9.0\n\nNew languages:\n\n- *crmsh* by [Kristoffer Gronlund][]\n- *SQF* by [Soren Enevoldsen][]\n\n[Kristoffer Gronlund]: https://github.com/krig\n[Soren Enevoldsen]: https://github.com/senevoldsen90\n\nNotable fixes and improvements to existing languages:\n\n- Added `abstract` and `namespace` keywords to TypeScript by [Daniel Rosenwasser][]\n- Added `label` support to Dockerfile by [Ladislav Prskavec][]\n- Crystal highlighting improved by [Tsuyusato Kitsune][]\n- Missing Swift keywords added by [Nate Cook][]\n- Improve detection of C block comments\n- ~~Scala case classes params highlight fixed~~\n- ~~ECMAScript 6 modules import now do not require closing semicolon~~\n- ~~ECMAScript 6 classes constructors now highlighted~~\n- ~~Template string support for Typescript, as for ECMAScript 6~~\n\nOther notable changes:\n\n- ~~License added to not minified browser build~~\n\n[Kristoffer Gronlund]: https://github.com/krig\n[S\u00f8ren Enevoldsen]: https://github.com/senevoldsen90\n[Daniel Rosenwasser]: https://github.com/DanielRosenwasser\n[Ladislav Prskavec]: https://github.com/abtris\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n[Nate Cook]: https://github.com/natecook1000\n\n\n## Version 8.8.0\n\nNew languages:\n\n- *Golo* by [Philippe Charri\u00e8re][]\n- *GAMS* by [Stefan Bechert][]\n- *IRPF90* by [Anthony Scemama][]\n- *Access logs* by [Oleg Efimov][]\n- *Crystal* by [Tsuyusato Kitsune][]\n\nNotable fixes and improvements to existing languages:\n\n- JavaScript highlighting no longer fails with ES6 default parameters\n- Added keywords `async` and `await` to Python\n- PHP heredoc support improved\n- Allow preprocessor directives within C++ functions\n\nOther notable changes:\n\n- Change versions to X.Y.Z SemVer-compatible format\n- Added ability to build all targets at once\n\n[Philippe Charri\u00e8re]: https://github.com/k33g\n[Stefan Bechert]: https://github.com/b-pos465\n[Anthony Scemama]: https://github.com/scemama\n[Oleg Efimov]: https://github.com/Sannis\n[Tsuyusato Kitsune]: https://github.com/MakeNowJust\n\n\n## Version 8.7\n\nNew languages:\n\n- *Zephir* by [Oleg Efimov][]\n- *Elm* by [Janis Voigtl\u00e4nder][]\n- *XQuery* by [Dirk Kirsten][]\n- *Mojolicious* by [Dotan Dimet][]\n- *AutoIt* by Manh Tuan from [J2TeaM][]\n- *Toml* (ini extension) by [Guillaume Gomez][]\n\nNew styles:\n\n- *Hopscotch* by [Jan T. Sott][]\n- *Grayscale* by [MY Sun][]\n\nNotable fixes and improvements to existing languages:\n\n- Fix encoding of images when copied over in certain builds\n- Fix incorrect highlighting of the word \"bug\" in comments\n- Treat decorators different from matrix multiplication in Python\n- Fix traits inheritance highlighting in Rust\n- Fix incorrect document\n- Oracle keywords added to SQL language definition by [Vadimtro][]\n- Postgres keywords added to SQL language definition by [Benjamin Auder][]\n- Fix registers in x86asm being highlighted as a hex number\n- Fix highlighting for numbers with a leading decimal point\n- Correctly highlight numbers and strings inside of C/C++ macros\n- C/C++ functions now support pointer, reference, and move returns\n\n[Oleg Efimov]: https://github.com/Sannis\n[Guillaume Gomez]: https://github.com/GuillaumeGomez\n[Janis Voigtl\u00e4nder]: https://github.com/jvoigtlaender\n[Jan T. Sott]: https://github.com/idleberg\n[Dirk Kirsten]: https://github.com/dirkk\n[MY Sun]: https://github.com/simonmysun\n[Vadimtro]: https://github.com/Vadimtro\n[Benjamin Auder]: https://github.com/ghost\n[Dotan Dimet]: https://github.com/dotandimet\n[J2TeaM]: https://github.com/J2TeaM\n\n\n## Version 8.6\n\nNew languages:\n\n- *C/AL* by [Kenneth Fuglsang][]\n- *DNS zone file* by [Tim Schumacher][]\n- *Ceylon* by [Lucas Werkmeister][]\n- *OpenSCAD* by [Dan Panzarella][]\n- *Inform7* by [Bruno Dias][]\n- *armasm* by [Dan Panzarella][]\n- *TP* by [Jay Strybis][]\n\nNew styles:\n\n- *Atelier Cave*, *Atelier Estuary*,\n  *Atelier Plateau* and *Atelier Savanna* by [Bram de Haan][]\n- *Github Gist* by [Louis Barranqueiro][]\n\nNotable fixes and improvements to existing languages:\n\n- Multi-line raw strings from C++11 are now supported\n- Fix class names with dashes in HAML\n- The `async` keyword from ES6/7 is now supported\n- TypeScript functions handle type and parameter complexity better\n- We unified phpdoc/javadoc/yardoc etc modes across all languages\n- CSS .class selectors relevance was dropped to prevent wrong language detection\n- Images is now included to CDN build\n- Release process is now automated\n\n[Bram de Haan]: https://github.com/atelierbram\n[Kenneth Fuglsang]: https://github.com/kfuglsang\n[Louis Barranqueiro]: https://github.com/LouisBarranqueiro\n[Tim Schumacher]: https://github.com/enko\n[Lucas Werkmeister]: https://github.com/lucaswerkmeister\n[Dan Panzarella]: https://github.com/pzl\n[Bruno Dias]: https://github.com/sequitur\n[Jay Strybis]: https://github.com/unreal\n\n\n## Version 8.5\n\nNew languages:\n\n- *pf.conf* by [Peter Piwowarski][]\n- *Julia* by [Kenta Sato][]\n- *Prolog* by [Raivo Laanemets][]\n- *Docker* by [Alexis H\u00e9naut][]\n- *Fortran* by [Anthony Scemama][] and [Thomas Applencourt][]\n- *Kotlin* by [Sergey Mashkov][]\n\nNew styles:\n\n- *Agate* by [Taufik Nurrohman][]\n- *Darcula* by [JetBrains][]\n- *Atelier Sulphurpool* by [Bram de Haan][]\n- *Android Studio* by [Pedro Oliveira][]\n\nNotable fixes and improvements to existing languages:\n\n- ES6 features in JavaScript are better supported now by [Gu Yiling][].\n- Swift now recognizes body-less method definitions.\n- Single expression functions `def foo, do: ... ` now work in Elixir.\n- More uniform detection of built-in classes in Objective C.\n- Fixes for number literals and processor directives in Rust.\n- HTML `<script>` tag now allows any language, not just JavaScript.\n- Multi-line comments are supported now in MatLab.\n\n[Taufik Nurrohman]: https://github.com/tovic\n[Jet Brains]: https://www.jetbrains.com/\n[Peter Piwowarski]: https://github.com/oldlaptop\n[Kenta Sato]: https://github.com/bicycle1885\n[Bram de Haan]: https://github.com/atelierbram\n[Raivo Laanemets]: https://github.com/rla\n[Alexis H\u00e9naut]: https://github.com/AlexisNo\n[Anthony Scemama]: https://github.com/scemama\n[Pedro Oliveira]: https://github.com/kanytu\n[Gu Yiling]: https://github.com/Justineo\n[Sergey Mashkov]: https://github.com/cy6erGn0m\n[Thomas Applencourt]: https://github.com/TApplencourt\n\n\n## Version 8.4\n\nWe've got the new [demo page][]! The obvious new feature is the new look, but\napart from that it's got smarter: by presenting languages in groups it avoids\nrunning 10000 highlighting attempts after first load which was slowing it down\nand giving bad overall impression. It is now also being generated from test\ncode snippets so the authors of new languages don't have to update both tests\nand the demo page with the same thing.\n\nOther notable changes:\n\n- The `template_comment` class is gone in favor of the more general `comment`.\n- Number parsing unified and improved across languages.\n- C++, Java and C# now use unified grammar to highlight titles in\n  function/method definitions.\n- The browser build is now usable as an AMD module, there's no separate build\n  target for that anymore.\n- OCaml has got a [comprehensive overhaul][ocaml] by [Micka\u00ebl Delahaye][].\n- Clojure's data structures and literals are now highlighted outside of lists\n  and we can now highlight Clojure's REPL sessions.\n\nNew languages:\n\n- *AspectJ* by [Hakan \u00d6zler][]\n- *STEP Part 21* by [Adam Joseph Cook][]\n- *SML* derived by [Edwin Dalorzo][] from OCaml definition\n- *Mercury* by [mucaho][]\n- *Smali* by [Dennis Titze][]\n- *Verilog* by [Jon Evans][]\n- *Stata* by [Brian Quistorff][]\n\n[Hakan \u00d6zler]: https://github.com/ozlerhakan\n[Adam Joseph Cook]: https://github.com/adamjcook\n[demo page]: https://highlightjs.org/static/demo/\n[Ivan Sagalaev]: https://github.com/isagalaev\n[Edwin Dalorzo]: https://github.com/edalorzo\n[mucaho]: https://github.com/mucaho\n[Dennis Titze]: https://github.com/titze\n[Jon Evans]: https://github.com/craftyjon\n[Brian Quistorff]: https://github.com/bquistorff\n[ocaml]: https://github.com/isagalaev/highlight.js/pull/608#issue-46190207\n[Micka\u00ebl Delahaye]: https://github.com/polazarus\n\n\n## Version 8.3\n\nWe streamlined our tool chain, it is now based entirely on node.js instead of\nbeing a mix of node.js, Python and Java. The build script options and arguments\nremained the same, and we've noted all the changes in the [documentation][b].\nApart from reducing complexity, the new build script is also faster from not\nhaving to start Java machine repeatedly. The credits for the work go to [Jeremy\nHull][].\n\nSome notable fixes:\n\n- PHP and JavaScript mixed in HTML now live happily with each other.\n- JavaScript regexes now understand ES6 flags \"u\" and \"y\".\n- `throw` keyword is no longer detected as a method name in Java.\n- Fixed parsing of numbers and symbols in Clojure thanks to [input from Ivan\n  Kleshnin][ik].\n\nNew languages in this release:\n\n- *Less* by [Max Mikhailov][]\n- *Stylus* by [Bryant Williams][]\n- *Tcl* by [Radek Liska][]\n- *Puppet* by [Jose Molina Colmenero][]\n- *Processing* by [Erik Paluka][]\n- *Twig* templates by [Luke Holder][]\n- *PowerShell* by [David Mohundro][], based on [the work of Nicholas Blumhardt][ps]\n- *XL* by [Christophe de Dinechin][]\n- *LiveScript* by [Taneli Vatanen][] and [Jen Evers-Corvina][]\n- *ERB* (Ruby in HTML) by [Lucas Mazza][]\n- *Roboconf* by [Vincent Zurczak][]\n\n[b]: http://highlightjs.readthedocs.org/en/latest/building-testing.html\n[Jeremy Hull]: https://github.com/sourrust\n[ik]: https://twitter.com/IvanKleshnin/status/514041599484231680\n[Max Mikhailov]: https://github.com/seven-phases-max\n[Bryant Williams]: https://github.com/scien\n[Radek Liska]: https://github.com/Nindaleth\n[Jose Molina Colmenero]: https://github.com/Moliholy\n[Erik Paluka]: https://github.com/paluka\n[Luke Holder]: https://github.com/lukeholder\n[David Mohundro]: https://github.com/drmohundro\n[ps]: https://github.com/OctopusDeploy/Library/blob/master/app/shared/presentation/highlighting/powershell.js\n[Christophe de Dinechin]: https://github.com/c3d\n[Taneli Vatanen]: https://github.com/Daiz-\n[Jen Evers-Corvina]: https://github.com/sevvie\n[Lucas Mazza]: https://github.com/lucasmazza\n[Vincent Zurczak]: https://github.com/vincent-zurczak\n\n\n## Version 8.2\n\nWe've finally got [real tests][test] and [continuous testing on Travis][ci]\nthanks to [Jeremy Hull][] and [Chris Eidhof][]. The tests designed to cover\neverything: language detection, correct parsing of individual language features\nand various special cases. This is a very important change that gives us\nconfidence in extending language definitions and refactoring library core.\n\nWe're going to redesign the old [demo/test suite][demo] into an interactive\ndemo web app. If you're confident front-end developer or designer and want to\nhelp us with it, drop a comment into [the issue][#542] on GitHub.\n\n[test]: https://github.com/isagalaev/highlight.js/tree/master/test\n[demo]: https://highlightjs.org/static/test.html\n[#542]: https://github.com/isagalaev/highlight.js/issues/542\n[ci]: https://travis-ci.org/isagalaev/highlight.js\n[Jeremy Hull]: https://github.com/sourrust\n[Chris Eidhof]: https://github.com/chriseidhof\n\nAs usually there's a handful of new languages in this release:\n\n- *Groovy* by [Guillaume Laforge][]\n- *Dart* by [Maxim Dikun][]\n- *Dust* by [Michael Allen][]\n- *Scheme* by [JP Verkamp][]\n- *G-Code* by [Adam Joseph Cook][]\n- *Q* from Kx Systems by [Sergey Vidyuk][]\n\n[Guillaume Laforge]: https://github.com/glaforge\n[Maxim Dikun]: https://github.com/dikmax\n[Michael Allen]: https://github.com/bfui\n[JP Verkamp]: https://github.com/jpverkamp\n[Adam Joseph Cook]: https://github.com/adamjcook\n[Sergey Vidyuk]: https://github.com/sv\n\nOther improvements:\n\n- [Erik Osheim][] heavily reworked Scala definitions making it richer.\n- [Lucas Mazza][] fixed Ruby hashes highlighting\n- Lisp variants (Lisp, Clojure and Scheme) are unified in regard to naming\n  the first symbol in parentheses: it's \"keyword\" in general case and also\n  \"built_in\" for built-in functions in Clojure and Scheme.\n\n[Erik Osheim]: https://github.com/non\n[Lucas Mazza]: https://github.com/lucasmazza\n\n\n## Version 8.1\n\nNew languages:\n\n- *Gherkin* by [Sam Pikesley][]\n- *Elixir* by [Josh Adams][]\n- *NSIS* by [Jan T. Sott][]\n- *VIM script* by [Jun Yang][]\n- *Protocol Buffers* by [Dan Tao][]\n- *Nix* by [Domen Ko\u017ear][]\n- *x86asm* by [innocenat][]\n- *Cap\u2019n Proto* and *Thrift* by [Oleg Efimov][]\n- *Monkey* by [Arthur Bikmullin][]\n- *TypeScript* by [Panu Horsmalahti][]\n- *Nimrod* by [Flaviu Tamas][]\n- *Gradle* by [Damian Mee][]\n- *Haxe* by [Christopher Kaster][]\n- *Swift* by [Chris Eidhof][] and [Nate Cook][]\n\nNew styles:\n\n- *Kimbie*, light and dark variants by [Jan T. Sott][]\n- *Color brewer* by [Fabr\u00edcio Tavares de Oliveira][]\n- *Codepen.io embed* by [Justin Perry][]\n- *Hybrid* by [Nic West][]\n\n[Sam Pikesley]: https://github.com/pikesley\n[Sindre Sorhus]: https://github.com/sindresorhus\n[Josh Adams]: https://github.com/knewter\n[Jan T. Sott]: https://github.com/idleberg\n[Jun Yang]: https://github.com/harttle\n[Dan Tao]: https://github.com/dtao\n[Domen Ko\u017ear]: https://github.com/iElectric\n[innocenat]: https://github.com/innocenat\n[Oleg Efimov]: https://github.com/Sannis\n[Arthur Bikmullin]: https://github.com/devolonter\n[Panu Horsmalahti]: https://github.com/panuhorsmalahti\n[Flaviu Tamas]: https://github.com/flaviut\n[Damian Mee]: https://github.com/chester1000\n[Christopher Kaster]: http://christopher.kaster.ws\n[Fabr\u00edcio Tavares de Oliveira]: https://github.com/fabriciotav\n[Justin Perry]: https://github.com/ourmaninamsterdam\n[Nic West]: https://github.com/nicwest\n[Chris Eidhof]: https://github.com/chriseidhof\n[Nate Cook]: https://github.com/natecook1000\n\nOther improvements:\n\n- The README is heavily reworked and brought up to date by [Jeremy Hull][].\n- Added [`listLanguages()`][ll] method in the API.\n- Improved C/C++/C# detection.\n- Added a bunch of new language aliases, documented the existing ones. Thanks to\n  [Sindre Sorhus][] for background research.\n- Added phrasal English words to boost relevance in comments.\n- Many improvements to SQL definition made by [Heiko August][],\n  [Nikolay Lisienko][] and [Travis Odom][].\n- The shorter `lang-` prefix for language names in HTML classes supported\n  alongside `language-`. Thanks to [Jeff Escalante][].\n- Ruby's got support for interactive console sessions. Thanks to\n  [Pascal Hurni][].\n- Added built-in functions for R language. Thanks to [Artem A. Klevtsov][].\n- Rust's got definition for lifetime parameters and improved string syntax.\n  Thanks to [Roman Shmatov][].\n- Various improvements to Objective-C definition by [Matt Diephouse][].\n- Fixed highlighting of generics in Java.\n\n[ll]: http://highlightjs.readthedocs.org/en/latest/api.html#listlanguages\n[Sindre Sorhus]: https://github.com/sindresorhus\n[Heiko August]: https://github.com/auge8472\n[Nikolay Lisienko]: https://github.com/neor-ru\n[Travis Odom]: https://github.com/Burstaholic\n[Jeff Escalante]: https://github.com/jenius\n[Pascal Hurni]: https://github.com/phurni\n[Jiyin Yiyong]: https://github.com/jiyinyiyong\n[Artem A. Klevtsov]: https://github.com/unikum\n[Roman Shmatov]: https://github.com/shmatov\n[Jeremy Hull]: https://github.com/sourrust\n[Matt Diephouse]: https://github.com/mdiep\n\n\n## Version 8.0\n\nThis new major release is quite a big overhaul bringing both new features and\nsome backwards incompatible changes. However, chances are that the majority of\nusers won't be affected by the latter: the basic scenario described in the\nREADME is left intact.\n\nHere's what did change in an incompatible way:\n\n- We're now prefixing all classes located in [CSS classes reference][cr] with\n  `hljs-`, by default, because some class names would collide with other\n  people's stylesheets. If you were using an older version, you might still want\n  the previous behavior, but still want to upgrade. To suppress this new\n  behavior, you would initialize like so:\n\n  ```html\n  <script type=\"text/javascript\">\n    hljs.configure({classPrefix: ''});\n    hljs.initHighlightingOnLoad();\n  </script>\n  ```\n\n- `tabReplace` and `useBR` that were used in different places are also unified\n  into the global options object and are to be set using `configure(options)`.\n  This function is documented in our [API docs][]. Also note that these\n  parameters are gone from `highlightBlock` and `fixMarkup` which are now also\n  rely on `configure`.\n\n- We removed public-facing (though undocumented) object `hljs.LANGUAGES` which\n  was used to register languages with the library in favor of two new methods:\n  `registerLanguage` and `getLanguage`. Both are documented in our [API docs][].\n\n- Result returned from `highlight` and `highlightAuto` no longer contains two\n  separate attributes contributing to relevance score, `relevance` and\n  `keyword_count`. They are now unified in `relevance`.\n\nAnother technically compatible change that nonetheless might need attention:\n\n- The structure of the NPM package was refactored, so if you had installed it\n  locally, you'll have to update your paths. The usual `require('highlight.js')`\n  works as before. This is contributed by [Dmitry Smolin][].\n\nNew features:\n\n- Languages now can be recognized by multiple names like \"js\" for JavaScript or\n  \"html\" for, well, HTML (which earlier insisted on calling it \"xml\"). These\n  aliases can be specified in the class attribute of the code container in your\n  HTML as well as in various API calls. For now there are only a few very common\n  aliases but we'll expand it in the future. All of them are listed in the\n  [class reference][cr].\n\n- Language detection can now be restricted to a subset of languages relevant in\n  a given context \u2014 a web page or even a single highlighting call. This is\n  especially useful for node.js build that includes all the known languages.\n  Another example is a StackOverflow-style site where users specify languages\n  as tags rather than in the markdown-formatted code snippets. This is\n  documented in the [API reference][] (see methods `highlightAuto` and\n  `configure`).\n\n- Language definition syntax streamlined with [variants][] and\n  [beginKeywords][].\n\nNew languages and styles:\n\n- *Oxygene* by [Carlo Kok][]\n- *Mathematica* by [Daniel Kvasni\u010dka][]\n- *Autohotkey* by [Seongwon Lee][]\n- *Atelier* family of styles in 10 variants by [Bram de Haan][]\n- *Para\u00edso* styles by [Jan T. Sott][]\n\nMiscellaneous improvements:\n\n- Highlighting `=>` prompts in Clojure.\n- [Jeremy Hull][] fixed a lot of styles for consistency.\n- Finally, highlighting PHP and HTML [mixed in peculiar ways][php-html].\n- Objective C and C# now properly highlight titles in method definition.\n- Big overhaul of relevance counting for a number of languages. Please do report\n  bugs about mis-detection of non-trivial code snippets!\n\n[API reference]: http://highlightjs.readthedocs.org/en/latest/api.html\n\n[cr]: http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\n[api docs]: http://highlightjs.readthedocs.org/en/latest/api.html\n[variants]: https://groups.google.com/d/topic/highlightjs/VoGC9-1p5vk/discussion\n[beginKeywords]: https://github.com/isagalaev/highlight.js/commit/6c7fdea002eb3949577a85b3f7930137c7c3038d\n[php-html]: https://twitter.com/highlightjs/status/408890903017689088\n\n[Carlo Kok]: https://github.com/carlokok\n[Bram de Haan]: https://github.com/atelierbram\n[Daniel Kvasni\u010dka]: https://github.com/dkvasnicka\n[Dmitry Smolin]: https://github.com/dimsmol\n[Jeremy Hull]: https://github.com/sourrust\n[Seongwon Lee]: https://github.com/dlimpid\n[Jan T. Sott]: https://github.com/idleberg\n\n\n## Version 7.5\n\nA catch-up release dealing with some of the accumulated contributions. This one\nis probably will be the last before the 8.0 which will be slightly backwards\nincompatible regarding some advanced use-cases.\n\nOne outstanding change in this version is the addition of 6 languages to the\n[hosted script][d]: Markdown, ObjectiveC, CoffeeScript, Apache, Nginx and\nMakefile. It now weighs about 6K more but we're going to keep it under 30K.\n\nNew languages:\n\n- OCaml by [Mehdi Dogguy][mehdid] and [Nicolas Braud-Santoni][nbraud]\n- [LiveCode Server][lcs] by [Ralf Bitter][revig]\n- Scilab by [Sylvestre Ledru][sylvestre]\n- basic support for Makefile by [Ivan Sagalaev][isagalaev]\n\nImprovements:\n\n- Ruby's got support for characters like `?A`, `?1`, `?\\012` etc. and `%r{..}`\n  regexps.\n- Clojure now allows a function call in the beginning of s-expressions\n  `(($filter \"myCount\") (arr 1 2 3 4 5))`.\n- Haskell's got new keywords and now recognizes more things like pragmas,\n  preprocessors, modules, containers, FFIs etc. Thanks to [Zena Treep][treep]\n  for the implementation and to [Jeremy Hull][sourrust] for guiding it.\n- Miscellaneous fixes in PHP, Brainfuck, SCSS, Asciidoc, CMake, Python and F#.\n\n[mehdid]: https://github.com/mehdid\n[nbraud]: https://github.com/nbraud\n[revig]: https://github.com/revig\n[lcs]: http://livecode.com/developers/guides/server/\n[sylvestre]: https://github.com/sylvestre\n[isagalaev]: https://github.com/isagalaev\n[treep]: https://github.com/treep\n[sourrust]: https://github.com/sourrust\n[d]: http://highlightjs.org/download/\n\n\n## New core developers\n\nThe latest long period of almost complete inactivity in the project coincided\nwith growing interest to it led to a decision that now seems completely obvious:\nwe need more core developers.\n\nSo without further ado let me welcome to the core team two long-time\ncontributors: [Jeremy Hull][] and [Oleg\nEfimov][].\n\nHope now we'll be able to work through stuff faster!\n\nP.S. The historical commit is [here][1] for the record.\n\n[Jeremy Hull]: https://github.com/sourrust\n[Oleg Efimov]: https://github.com/sannis\n[1]: https://github.com/isagalaev/highlight.js/commit/f3056941bda56d2b72276b97bc0dd5f230f2473f\n\n\n## Version 7.4\n\nThis long overdue version is a snapshot of the current source tree with all the\nchanges that happened during the past year. Sorry for taking so long!\n\nAlong with the changes in code highlight.js has finally got its new home at\n<http://highlightjs.org/>, moving from its cradle on Software Maniacs which it\noutgrew a long time ago. Be sure to report any bugs about the site to\n<mailto:info@highlightjs.org>.\n\nOn to what's new\u2026\n\nNew languages:\n\n- Handlebars templates by [Robin Ward][]\n- Oracle Rules Language by [Jason Jacobson][]\n- F# by [Joans Folles\u00f8][]\n- AsciiDoc and Haml by [Dan Allen][]\n- Lasso by [Eric Knibbe][]\n- SCSS by [Kurt Emch][]\n- VB.NET by [Poren Chiang][]\n- Mizar by [Kelley van Evert][]\n\n[Robin Ward]: https://github.com/eviltrout\n[Jason Jacobson]: https://github.com/jayce7\n[Joans Folles\u00f8]: https://github.com/follesoe\n[Dan Allen]: https://github.com/mojavelinux\n[Eric Knibbe]: https://github.com/EricFromCanada\n[Kurt Emch]: https://github.com/kemch\n[Poren Chiang]: https://github.com/rschiang\n[Kelley van Evert]: https://github.com/kelleyvanevert\n\nNew style themes:\n\n- Monokai Sublime by [noformnocontent][]\n- Railscasts by [Damien White][]\n- Obsidian by [Alexander Marenin][]\n- Docco by [Simon Madine][]\n- Mono Blue by [Ivan Sagalaev][] (uses a single color hue for everything)\n- Foundation by [Dan Allen][]\n\n[noformnocontent]: http://nn.mit-license.org/\n[Damien White]: https://github.com/visoft\n[Alexander Marenin]: https://github.com/ioncreature\n[Simon Madine]: https://github.com/thingsinjars\n[Ivan Sagalaev]: https://github.com/isagalaev\n\nOther notable changes:\n\n- Corrected many corner cases in CSS.\n- Dropped Python 2 version of the build tool.\n- Implemented building for the AMD format.\n- Updated Rust keywords (thanks to [Dmitry Medvinsky][]).\n- Literal regexes can now be used in language definitions.\n- CoffeeScript highlighting is now significantly more robust and rich due to\n  input from [C\u00e9dric N\u00e9h\u00e9mie][].\n\n[Dmitry Medvinsky]: https://github.com/dmedvinsky\n[C\u00e9dric N\u00e9h\u00e9mie]: https://github.com/abe33\n\n\n## Version 7.3\n\n- Since this version highlight.js no longer works in IE version 8 and older.\n  It's made it possible to reduce the library size and dramatically improve code\n  readability and made it easier to maintain. Time to go forward!\n\n- New languages: AppleScript (by [Nathan Grigg][ng] and [Dr. Drang][dd]) and\n  Brainfuck (by [Evgeny Stepanischev][bolk]).\n\n- Improvements to existing languages:\n\n    - interpreter prompt in Python (`>>>` and `...`)\n    - @-properties and classes in CoffeeScript\n    - E4X in JavaScript (by [Oleg Efimov][oe])\n    - new keywords in Perl (by [Kirk Kimmel][kk])\n    - big Ruby syntax update (by [Vasily Polovnyov][vast])\n    - small fixes in Bash\n\n- Also Oleg Efimov did a great job of moving all the docs for language and style\n  developers and contributors from the old wiki under the source code in the\n  \"docs\" directory. Now these docs are nicely presented at\n  <http://highlightjs.readthedocs.org/>.\n\n[ng]: https://github.com/nathan11g\n[dd]: https://github.com/drdrang\n[bolk]: https://github.com/bolknote\n[oe]: https://github.com/Sannis\n[kk]: https://github.com/kimmel\n[vast]: https://github.com/vast\n\n\n## Version 7.2\n\nA regular bug-fix release without any significant new features. Enjoy!\n\n\n## Version 7.1\n\nA Summer crop:\n\n- [Marc Fornos][mf] made the definition for Clojure along with the matching\n  style Rainbow (which, of course, works for other languages too).\n- CoffeeScript support continues to improve getting support for regular\n  expressions.\n- Yoshihide Jimbo ported to highlight.js [five Tomorrow styles][tm] from the\n  [project by Chris Kempson][tm0].\n- Thanks to [Casey Duncun][cd] the library can now be built in the popular\n  [AMD format][amd].\n- And last but not least, we've got a fair number of correctness and consistency\n  fixes, including a pretty significant refactoring of Ruby.\n\n[mf]: https://github.com/mfornos\n[tm]: http://jmblog.github.com/color-themes-for-highlightjs/\n[tm0]: https://github.com/ChrisKempson/Tomorrow-Theme\n[cd]: https://github.com/caseman\n[amd]: http://requirejs.org/docs/whyamd.html\n\n\n## Version 7.0\n\nThe reason for the new major version update is a global change of keyword syntax\nwhich resulted in the library getting smaller once again. For example, the\nhosted build is 2K less than at the previous version while supporting two new\nlanguages.\n\nNotable changes:\n\n- The library now works not only in a browser but also with [node.js][]. It is\n  installable with `npm install highlight.js`. [API][] docs are available on our\n  wiki.\n\n- The new unique feature (apparently) among syntax highlighters is highlighting\n  *HTTP* headers and an arbitrary language in the request body. The most useful\n  languages here are *XML* and *JSON* both of which highlight.js does support.\n  Here's [the detailed post][p] about the feature.\n\n- Two new style themes: a dark \"south\" *[Pojoaque][]* by Jason Tate and an\n  emulation of*XCode* IDE by [Angel Olloqui][ao].\n\n- Three new languages: *D* by [Aleksandar Ru\u017ei\u010di\u0107][ar], *R* by [Joe Cheng][jc]\n  and *GLSL* by [Sergey Tikhomirov][st].\n\n- *Nginx* syntax has become a million times smaller and more universal thanks to\n  remaking it in a more generic manner that doesn't require listing all the\n  directives in the known universe.\n\n- Function titles are now highlighted in *PHP*.\n\n- *Haskell* and *VHDL* were significantly reworked to be more rich and correct\n  by their respective maintainers [Jeremy Hull][sr] and [Igor Kalnitsky][ik].\n\nAnd last but not least, many bugs have been fixed around correctness and\nlanguage detection.\n\nOverall highlight.js currently supports 51 languages and 20 style themes.\n\n[node.js]: http://nodejs.org/\n[api]: http://softwaremaniacs.org/wiki/doku.php/highlight.js:api\n[p]: http://softwaremaniacs.org/blog/2012/05/10/http-and-json-in-highlight-js/en/\n[pojoaque]: http://web-cms-designs.com/ftopict-10-pojoaque-style-for-highlight-js-code-highlighter.html\n[ao]: https://github.com/angelolloqui\n[ar]: https://github.com/raleksandar\n[jc]: https://github.com/jcheng5\n[st]: https://github.com/tikhomirov\n[sr]: https://github.com/sourrust\n[ik]: https://github.com/ikalnitsky\n\n\n## Version 6.2\n\nA lot of things happened in highlight.js since the last version! We've got nine\nnew contributors, the discussion group came alive, and the main branch on GitHub\nnow counts more than 350 followers. Here are most significant results coming\nfrom all this activity:\n\n- 5 (five!) new languages: Rust, ActionScript, CoffeeScript, MatLab and\n  experimental support for markdown. Thanks go to [Andrey Vlasovskikh][av],\n  [Alexander Myadzel][am], [Dmytrii Nagirniak][dn], [Oleg Efimov][oe], [Denis\n  Bardadym][db] and [John Crepezzi][jc].\n\n- 2 new style themes: Monokai by [Luigi Maselli][lm] and stylistic imitation of\n  another well-known highlighter Google Code Prettify by [Aahan Krish][ak].\n\n- A vast number of [correctness fixes and code refactorings][log], mostly made\n  by [Oleg Efimov][oe] and [Evgeny Stepanischev][es].\n\n[av]: https://github.com/vlasovskikh\n[am]: https://github.com/myadzel\n[dn]: https://github.com/dnagir\n[oe]: https://github.com/Sannis\n[db]: https://github.com/btd\n[jc]: https://github.com/seejohnrun\n[lm]: http://grigio.org/\n[ak]: https://github.com/geekpanth3r\n[es]: https://github.com/bolknote\n[log]: https://github.com/isagalaev/highlight.js/commits/\n\n\n## Version 6.1 \u2014 Solarized\n\n[Jeremy Hull][jh] has implemented my dream feature \u2014 a port of [Solarized][]\nstyle theme famous for being based on the intricate color theory to achieve\ncorrect contrast and color perception. It is now available for highlight.js in\nboth variants \u2014 light and dark.\n\nThis version also adds a new original style Arta. Its author pumbur maintains a\n[heavily modified fork of highlight.js][pb] on GitHub.\n\n[jh]: https://github.com/sourrust\n[solarized]: http://ethanschoonover.com/solarized\n[pb]: https://github.com/pumbur/highlight.js\n\n\n## Version 6.0\n\nNew major version of the highlighter has been built on a significantly\nrefactored syntax. Due to this it's even smaller than the previous one while\nsupporting more languages!\n\nNew languages are:\n\n- Haskell by [Jeremy Hull][sourrust]\n- Erlang in two varieties \u2014 module and REPL \u2014 made collectively by [Nikolay\n  Zakharov][desh], [Dmitry Kovega][arhibot] and [Sergey Ignatov][ignatov]\n- Objective C by [Valerii Hiora][vhbit]\n- Vala by [Antono Vasiljev][antono]\n- Go by [Stephan Kountso][steplg]\n\n[sourrust]: https://github.com/sourrust\n[desh]: http://desh.su/\n[arhibot]: https://github.com/arhibot\n[ignatov]: https://github.com/ignatov\n[vhbit]: https://github.com/vhbit\n[antono]: https://github.com/antono\n[steplg]: https://github.com/steplg\n\nAlso this version is marginally faster and fixes a number of small long-standing\nbugs.\n\nDeveloper overview of the new language syntax is available in a [blog post about\nrecent beta release][beta].\n\n[beta]: http://softwaremaniacs.org/blog/2011/04/25/highlight-js-60-beta/en/\n\nP.S. New version is not yet available on a Yandex CDN, so for now you have to\ndownload [your own copy][d].\n\n[d]: /soft/highlight/en/download/\n\n\n## Version 5.14\n\nFixed bugs in HTML/XML detection and relevance introduced in previous\nrefactoring.\n\nAlso test.html now shows the second best result of language detection by\nrelevance.\n\n\n## Version 5.13\n\nPast weekend began with a couple of simple additions for existing languages but\nended up in a big code refactoring bringing along nice improvements for language\ndevelopers.\n\n### For users\n\n- Description of C++ has got new keywords from the upcoming [C++ 0x][] standard.\n- Description of HTML has got new tags from [HTML 5][].\n- CSS-styles have been unified to use consistent padding and also have lost\n  pop-outs with names of detected languages.\n- [Igor Kalnitsky][ik] has sent two new language descriptions: CMake & VHDL.\n\nThis makes total number of languages supported by highlight.js to reach 35.\n\nBug fixes:\n\n- Custom classes on `<pre>` tags are not being overridden anymore\n- More correct highlighting of code blocks inside non-`<pre>` containers:\n  highlighter now doesn't insist on replacing them with its own container and\n  just replaces the contents.\n- Small fixes in browser compatibility and heuristics.\n\n[c++ 0x]: http://ru.wikipedia.org/wiki/C%2B%2B0x\n[html 5]: http://en.wikipedia.org/wiki/HTML5\n[ik]: http://kalnitsky.org.ua/\n\n### For developers\n\nThe most significant change is the ability to include language submodes right\nunder `contains` instead of defining explicit named submodes in the main array:\n\n    contains: [\n      'string',\n      'number',\n      {begin: '\\\\n', end: hljs.IMMEDIATE_RE}\n    ]\n\nThis is useful for auxiliary modes needed only in one place to define parsing.\nNote that such modes often don't have `className` and hence won't generate a\nseparate `<span>` in the resulting markup. This is similar in effect to\n`noMarkup: true`. All existing languages have been refactored accordingly.\n\nTest file test.html has at last become a real test. Now it not only puts the\ndetected language name under the code snippet but also tests if it matches the\nexpected one. Test summary is displayed right above all language snippets.\n\n\n## CDN\n\nFine people at [Yandex][] agreed to host highlight.js on their big fast servers.\n[Link up][l]!\n\n[yandex]: http://yandex.com/\n[l]: http://softwaremaniacs.org/soft/highlight/en/download/\n\n\n## Version 5.10 \u2014 \"Paris\".\n\nThough I'm on a vacation in Paris, I decided to release a new version with a\ncouple of small fixes:\n\n- Tomas Vitvar discovered that TAB replacement doesn't always work when used\n  with custom markup in code\n- SQL parsing is even more rigid now and doesn't step over SmallTalk in tests\n\n\n## Version 5.9\n\nA long-awaited version is finally released.\n\nNew languages:\n\n- Andrew Fedorov made a definition for Lua\n- a long-time highlight.js contributor [Peter Leonov][pl] made a definition for\n  Nginx config\n- [Vladimir Moskva][vm] made a definition for TeX\n\n[pl]: http://kung-fu-tzu.ru/\n[vm]: http://fulc.ru/\n\nFixes for existing languages:\n\n- [Loren Segal][ls] reworked the Ruby definition and added highlighting for\n  [YARD][] inline documentation\n- the definition of SQL has become more solid and now it shouldn't be overly\n  greedy when it comes to language detection\n\n[ls]: http://gnuu.org/\n[yard]: http://yardoc.org/\n\nThe highlighter has become more usable as a library allowing to do highlighting\nfrom initialization code of JS frameworks and in ajax methods (see.\nreadme.eng.txt).\n\nAlso this version drops support for the [WordPress][wp] plugin. Everyone is\nwelcome to [pick up its maintenance][p] if needed.\n\n[wp]: http://wordpress.org/\n[p]: http://bazaar.launchpad.net/~isagalaev/+junk/highlight/annotate/342/src/wp_highlight.js.php\n\n\n## Version 5.8\n\n- Jan Berkel has contributed a definition for Scala. +1 to hotness!\n- All CSS-styles are rewritten to work only inside `<pre>` tags to avoid\n  conflicts with host site styles.\n\n\n## Version 5.7.\n\nFixed escaping of quotes in VBScript strings.\n\n\n## Version 5.5\n\nThis version brings a small change: now .ini-files allow digits, underscores and\nsquare brackets in key names.\n\n\n## Version 5.4\n\nFixed small but upsetting bug in the packer which caused incorrect highlighting\nof explicitly specified languages. Thanks to Andrew Fedorov for precise\ndiagnostics!\n\n\n## Version 5.3\n\nThe version to fulfil old promises.\n\nThe most significant change is that highlight.js now preserves custom user\nmarkup in code along with its own highlighting markup. This means that now it's\npossible to use, say, links in code. Thanks to [Vladimir Dolzhenko][vd] for the\n[initial proposal][1] and for making a proof-of-concept patch.\n\nAlso in this version:\n\n- [Vasily Polovnyov][vp] has sent a GitHub-like style and has implemented\n  support for CSS @-rules and Ruby symbols.\n- Yura Zaripov has sent two styles: Brown Paper and School Book.\n- Oleg Volchkov has sent a definition for [Parser 3][p3].\n\n[1]: http://softwaremaniacs.org/forum/highlightjs/6612/\n[p3]: http://www.parser.ru/\n[vp]: http://vasily.polovnyov.ru/\n[vd]: http://dolzhenko.blogspot.com/\n\n\n## Version 5.2\n\n- at last it's possible to replace indentation TABs with something sensible\n  (e.g. 2 or 4 spaces)\n- new keywords and built-ins for 1C by Sergey Baranov\n- a couple of small fixes to Apache highlighting\n\n\n## Version 5.1\n\nThis is one of those nice version consisting entirely of new and shiny\ncontributions!\n\n- [Vladimir Ermakov][vooon] created highlighting for AVR Assembler\n- [Ruslan Keba][rukeba] created highlighting for Apache config file. Also his\n  original visual style for it is now available for all highlight.js languages\n  under the name \"Magula\".\n- [Shuen-Huei Guan][drake] (aka Drake) sent new keywords for RenderMan\n  languages. Also thanks go to [Konstantin Evdokimenko][ke] for his advice on\n  the matter.\n\n[vooon]: http://vehq.ru/about/\n[rukeba]: http://rukeba.com/\n[drake]: http://drakeguan.org/\n[ke]: http://k-evdokimenko.moikrug.ru/\n\n\n## Version 5.0\n\nThe main change in the new major version of highlight.js is a mechanism for\npacking several languages along with the library itself into a single compressed\nfile. Now sites using several languages will load considerably faster because\nthe library won't dynamically include additional files while loading.\n\nAlso this version fixes a long-standing bug with Javascript highlighting that\ncouldn't distinguish between regular expressions and division operations.\n\nAnd as usually there were a couple of minor correctness fixes.\n\nGreat thanks to all contributors! Keep using highlight.js.\n\n\n## Version 4.3\n\nThis version comes with two contributions from [Jason Diamond][jd]:\n\n- language definition for C# (yes! it was a long-missed thing!)\n- Visual Studio-like highlighting style\n\nPlus there are a couple of minor bug fixes for parsing HTML and XML attributes.\n\n[jd]: http://jason.diamond.name/weblog/\n\n\n## Version 4.2\n\nThe biggest news is highlighting for Lisp, courtesy of Vasily Polovnyov. It's\nsomewhat experimental meaning that for highlighting \"keywords\" it doesn't use\nany pre-defined set of a Lisp dialect. Instead it tries to highlight first word\nin parentheses wherever it makes sense. I'd like to ask people programming in\nLisp to confirm if it's a good idea and send feedback to [the forum][f].\n\nOther changes:\n\n- Smalltalk was excluded from DEFAULT_LANGUAGES to save traffic\n- [Vladimir Epifanov][voldmar] has implemented javascript style switcher for\n  test.html\n- comments now allowed inside Ruby function definition\n- [MEL][] language from [Shuen-Huei Guan][drake]\n- whitespace now allowed between `<pre>` and `<code>`\n- better auto-detection of C++ and PHP\n- HTML allows embedded VBScript (`<% .. %>`)\n\n[f]: http://softwaremaniacs.org/forum/highlightjs/\n[voldmar]: http://voldmar.ya.ru/\n[mel]: http://en.wikipedia.org/wiki/Maya_Embedded_Language\n[drake]: http://drakeguan.org/\n\n\n## Version 4.1\n\nLanguages:\n\n- Bash from Vah\n- DOS bat-files from Alexander Makarov (Sam)\n- Diff files from Vasily Polovnyov\n- Ini files from myself though initial idea was from Sam\n\nStyles:\n\n- Zenburn from Vladimir Epifanov, this is an imitation of a\n  [well-known theme for Vim][zenburn].\n- Ascetic from myself, as a realization of ideals of non-flashy highlighting:\n  just one color in only three gradations :-)\n\nIn other news. [One small bug][bug] was fixed, built-in keywords were added for\nPython and C++ which improved auto-detection for the latter (it was shame that\n[my wife's blog][alenacpp] had issues with it from time to time). And lastly\nthanks go to Sam for getting rid of my stylistic comments in code that were\ngetting in the way of [JSMin][].\n\n[zenburn]: http://en.wikipedia.org/wiki/Zenburn\n[alenacpp]: http://alenacpp.blogspot.com/\n[bug]: http://softwaremaniacs.org/forum/viewtopic.php?id=1823\n[jsmin]: http://code.google.com/p/jsmin-php/\n\n\n## Version 4.0\n\nNew major version is a result of vast refactoring and of many contributions.\n\nVisible new features:\n\n- Highlighting of embedded languages. Currently is implemented highlighting of\n  Javascript and CSS inside HTML.\n- Bundled 5 ready-made style themes!\n\nInvisible new features:\n\n- Highlight.js no longer pollutes global namespace. Only one object and one\n  function for backward compatibility.\n- Performance is further increased by about 15%.\n\nChanging of a major version number caused by a new format of language definition\nfiles. If you use some third-party language files they should be updated.\n\n\n## Version 3.5\n\nA very nice version in my opinion fixing a number of small bugs and slightly\nincreased speed in a couple of corner cases. Thanks to everybody who reports\nbugs in he [forum][f] and by email!\n\nThere is also a new language \u2014 XML. A custom XML formerly was detected as HTML\nand didn't highlight custom tags. In this version I tried to make custom XML to\nbe detected and highlighted by its own rules. Which by the way include such\nthings as CDATA sections and processing instructions (`<? ... ?>`).\n\n[f]: http://softwaremaniacs.org/forum/viewforum.php?id=6\n\n\n## Version 3.3\n\n[Vladimir Gubarkov][xonix] has provided an interesting and useful addition.\nFile export.html contains a little program that shows and allows to copy and\npaste an HTML code generated by the highlighter for any code snippet. This can\nbe useful in situations when one can't use the script itself on a site.\n\n\n[xonix]: http://xonixx.blogspot.com/\n\n\n## Version 3.2 consists completely of contributions:\n\n- Vladimir Gubarkov has described SmallTalk\n- Yuri Ivanov has described 1C\n- Peter Leonov has packaged the highlighter as a Firefox extension\n- Vladimir Ermakov has compiled a mod for phpBB\n\nMany thanks to you all!\n\n\n## Version 3.1\n\nThree new languages are available: Django templates, SQL and Axapta. The latter\ntwo are sent by [Dmitri Roudakov][1]. However I've almost entirely rewrote an\nSQL definition but I'd never started it be it from the ground up :-)\n\nThe engine itself has got a long awaited feature of grouping keywords\n(\"keyword\", \"built-in function\", \"literal\"). No more hacks!\n\n[1]: http://roudakov.ru/\n\n\n## Version 3.0\n\nIt is major mainly because now highlight.js has grown large and has become\nmodular. Now when you pass it a list of languages to highlight it will\ndynamically load into a browser only those languages.\n\nAlso:\n\n- Konstantin Evdokimenko of [RibKit][] project has created a highlighting for\n  RenderMan Shading Language and RenderMan Interface Bytestream. Yay for more\n  languages!\n- Heuristics for C++ and HTML got better.\n- I've implemented (at last) a correct handling of backslash escapes in C-like\n  languages.\n\nThere is also a small backwards incompatible change in the new version. The\nfunction initHighlighting that was used to initialize highlighting instead of\ninitHighlightingOnLoad a long time ago no longer works. If you by chance still\nuse it \u2014 replace it with the new one.\n\n[RibKit]: http://ribkit.sourceforge.net/\n\n\n## Version 2.9\n\nHighlight.js is a parser, not just a couple of regular expressions. That said\nI'm glad to announce that in the new version 2.9 has support for:\n\n- in-string substitutions for Ruby -- `#{...}`\n- strings from from numeric symbol codes (like #XX) for Delphi\n\n\n## Version 2.8\n\nA maintenance release with more tuned heuristics. Fully backwards compatible.\n\n\n## Version 2.7\n\n- Nikita Ledyaev presents highlighting for VBScript, yay!\n- A couple of bugs with escaping in strings were fixed thanks to Mickle\n- Ongoing tuning of heuristics\n\nFixed bugs were rather unpleasant so I encourage everyone to upgrade!\n\n\n## Version 2.4\n\n- Peter Leonov provides another improved highlighting for Perl\n- Javascript gets a new kind of keywords \u2014 \"literals\". These are the words\n  \"true\", \"false\" and \"null\"\n\nAlso highlight.js homepage now lists sites that use the library. Feel free to\nadd your site by [dropping me a message][mail] until I find the time to build a\nsubmit form.\n\n[mail]: mailto:Maniac@SoftwareManiacs.Org\n\n\n## Version 2.3\n\nThis version fixes IE breakage in previous version. My apologies to all who have\nalready downloaded that one!\n\n\n## Version 2.2\n\n- added highlighting for Javascript\n- at last fixed parsing of Delphi's escaped apostrophes in strings\n- in Ruby fixed highlighting of keywords 'def' and 'class', same for 'sub' in\n  Perl\n\n\n## Version 2.0\n\n- Ruby support by [Anton Kovalyov][ak]\n- speed increased by orders of magnitude due to new way of parsing\n- this same way allows now correct highlighting of keywords in some tricky\n  places (like keyword \"End\" at the end of Delphi classes)\n\n[ak]: http://anton.kovalyov.net/\n\n\n## Version 1.0\n\nVersion 1.0 of javascript syntax highlighter is released!\n\nIt's the first version available with English description. Feel free to post\nyour comments and question to [highlight.js forum][forum]. And don't be afraid\nif you find there some fancy Cyrillic letters -- it's for Russian users too :-)\n\n[forum]: http://softwaremaniacs.org/forum/viewforum.php?id=6\n", "/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\nimport deepFreeze from './vendor/deep_freeze.js';\nimport Response from './lib/response.js';\nimport TokenTreeEmitter from './lib/token_tree.js';\nimport * as regex from './lib/regex.js';\nimport * as utils from './lib/utils.js';\nimport * as MODES from './lib/modes.js';\nimport { compileLanguage } from './lib/mode_compiler.js';\nimport * as packageJSON from '../package.json';\n\nconst escape = utils.escapeHTML;\nconst inherit = utils.inherit;\n\nconst { nodeStream, mergeStreams } = utils;\nconst NO_MATCH = Symbol(\"nomatch\");\n\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */\nconst HLJS = function(hljs) {\n  // Convenience variables for build-in objects\n  /** @type {unknown[]} */\n  var ArrayProto = [];\n\n  // Global internal variables used within the highlight.js library.\n  /** @type {Record<string, Language>} */\n  var languages = Object.create(null);\n  /** @type {Record<string, string>} */\n  var aliases = Object.create(null);\n  /** @type {HLJSPlugin[]} */\n  var plugins = [];\n\n  // safe/production mode - swallows more errors, tries to keep running\n  // even if a single syntax or parse hits a fatal error\n  var SAFE_MODE = true;\n  var fixMarkupRe = /(^(<[^>]+>|\\t|)+|\\n)/gm;\n  var LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n  /** @type {Language} */\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  /** @type HLJSOptions */\n  var options = {\n    noHighlightRe: /^(no-?highlight)$/i,\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: null,\n    // beta configuration options, subject to change, welcome to discuss\n    // https://github.com/highlightjs/highlight.js/issues/1086\n    __emitter: TokenTreeEmitter\n  };\n\n  /* Utility functions */\n\n  /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */\n  function shouldNotHighlight(languageName) {\n    return options.noHighlightRe.test(languageName);\n  }\n\n  /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */\n  function blockLanguage(block) {\n    var classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    const match = options.languageDetectRe.exec(classes);\n    if (match) {\n      var language = getLanguage(match[1]);\n      if (!language) {\n        console.warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n        console.warn(\"Falling back to no-highlight mode for this block.\", block);\n      }\n      return language ? match[1] : 'no-highlight';\n    }\n\n    return classes\n      .split(/\\s+/)\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\n  }\n\n  /**\n   * Core highlighting function.\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {Mode} [continuation] - current continuation mode, if any\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {Mode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */\n  function highlight(languageName, code, ignoreIllegals, continuation) {\n    /** @type {{ code: string, language: string, result?: any }} */\n    var context = {\n      code,\n      language: languageName\n    };\n    // the plugin can change the desired language or the code to be highlighted\n    // just be changing the object it was passed\n    fire(\"before:highlight\", context);\n\n    // a before plugin can usurp the result completely by providing it's own\n    // in which case we don't even need to call highlight\n    var result = context.result ?\n      context.result :\n      _highlight(context.language, context.code, ignoreIllegals, continuation);\n\n    result.code = context.code;\n    // the plugin can change anything in result to suite it\n    fire(\"after:highlight\", result);\n\n    return result;\n  }\n\n  /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {Mode} [continuation] - current continuation mode, if any\n  */\n  function _highlight(languageName, code, ignoreIllegals, continuation) {\n    var codeToHighlight = code;\n\n    /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {RegExpMatchArray} match - regexp match data\n     * @returns {KeywordData | false}\n     */\n    function keywordData(mode, match) {\n      var matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];\n    }\n\n    function processKeywords() {\n      if (!top.keywords) {\n        emitter.addText(mode_buffer);\n        return;\n      }\n\n      let last_index = 0;\n      top.keywordPatternRe.lastIndex = 0;\n      let match = top.keywordPatternRe.exec(mode_buffer);\n      let buf = \"\";\n\n      while (match) {\n        buf += mode_buffer.substring(last_index, match.index);\n        const data = keywordData(top, match);\n        if (data) {\n          const [kind, keywordRelevance] = data;\n          emitter.addText(buf);\n          buf = \"\";\n\n          relevance += keywordRelevance;\n          emitter.addKeyword(match[0], kind);\n        } else {\n          buf += match[0];\n        }\n        last_index = top.keywordPatternRe.lastIndex;\n        match = top.keywordPatternRe.exec(mode_buffer);\n      }\n      buf += mode_buffer.substr(last_index);\n      emitter.addText(buf);\n    }\n\n    function processSubLanguage() {\n      if (mode_buffer === \"\") return;\n      /** @type HighlightResult */\n      var result = null;\n\n      if (typeof top.subLanguage === 'string') {\n        if (!languages[top.subLanguage]) {\n          emitter.addText(mode_buffer);\n          return;\n        }\n        result = _highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]);\n        continuations[top.subLanguage] = result.top;\n      } else {\n        result = highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : null);\n      }\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      emitter.addSublanguage(result.emitter, result.language);\n    }\n\n    function processBuffer() {\n      if (top.subLanguage != null) {\n        processSubLanguage();\n      } else {\n        processKeywords();\n      }\n      mode_buffer = '';\n    }\n\n    /**\n     * @param {Mode} mode - new mode to start\n     */\n    function startNewMode(mode) {\n      if (mode.className) {\n        emitter.openNode(mode.className);\n      }\n      top = Object.create(mode, { parent: { value: top } });\n      return top;\n    }\n\n    /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */\n    function endOfMode(mode, match, matchPlusRemainder) {\n      let matched = regex.startsWith(mode.endRe, matchPlusRemainder);\n\n      if (matched) {\n        if (mode[\"on:end\"]) {\n          const resp = new Response(mode);\n          mode[\"on:end\"](match, resp);\n          if (resp.ignore) matched = false;\n        }\n\n        if (matched) {\n          while (mode.endsParent && mode.parent) {\n            mode = mode.parent;\n          }\n          return mode;\n        }\n      }\n      // even if on:end fires an `ignore` it's still possible\n      // that we might trigger the end node because of a parent mode\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, match, matchPlusRemainder);\n      }\n    }\n\n    /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */\n    function doIgnore(lexeme) {\n      if (top.matcher.regexIndex === 0) {\n        // no more regexs to potentially match here, so we move the cursor forward one\n        // space\n        mode_buffer += lexeme[0];\n        return 1;\n      } else {\n        // no need to move the cursor, we still have additional regexes to try and\n        // match at this very spot\n        continueScanAtSamePosition = true;\n        return 0;\n      }\n    }\n\n    /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */\n    function doBeginMatch(match) {\n      var lexeme = match[0];\n      var new_mode = match.rule;\n\n      const resp = new Response(new_mode);\n      // first internal before callbacks, then the public ones\n      const beforeCallbacks = [new_mode.__beforeBegin, new_mode[\"on:begin\"]];\n      for (const cb of beforeCallbacks) {\n        if (!cb) continue;\n        cb(match, resp);\n        if (resp.ignore) return doIgnore(lexeme);\n      }\n\n      if (new_mode && new_mode.endSameAsBegin) {\n        new_mode.endRe = regex.escape(lexeme);\n      }\n\n      if (new_mode.skip) {\n        mode_buffer += lexeme;\n      } else {\n        if (new_mode.excludeBegin) {\n          mode_buffer += lexeme;\n        }\n        processBuffer();\n        if (!new_mode.returnBegin && !new_mode.excludeBegin) {\n          mode_buffer = lexeme;\n        }\n      }\n      startNewMode(new_mode);\n      // if (mode[\"after:begin\"]) {\n      //   let resp = new Response(mode);\n      //   mode[\"after:begin\"](match, resp);\n      // }\n      return new_mode.returnBegin ? 0 : lexeme.length;\n    }\n\n    /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */\n    function doEndMatch(match) {\n      var lexeme = match[0];\n      var matchPlusRemainder = codeToHighlight.substr(match.index);\n\n      var end_mode = endOfMode(top, match, matchPlusRemainder);\n      if (!end_mode) { return NO_MATCH; }\n\n      var origin = top;\n      if (origin.skip) {\n        mode_buffer += lexeme;\n      } else {\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          mode_buffer += lexeme;\n        }\n        processBuffer();\n        if (origin.excludeEnd) {\n          mode_buffer = lexeme;\n        }\n      }\n      do {\n        if (top.className) {\n          emitter.closeNode();\n        }\n        if (!top.skip && !top.subLanguage) {\n          relevance += top.relevance;\n        }\n        top = top.parent;\n      } while (top !== end_mode.parent);\n      if (end_mode.starts) {\n        if (end_mode.endSameAsBegin) {\n          end_mode.starts.endRe = end_mode.endRe;\n        }\n        startNewMode(end_mode.starts);\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    function processContinuations() {\n      var list = [];\n      for (var current = top; current !== language; current = current.parent) {\n        if (current.className) {\n          list.unshift(current.className);\n        }\n      }\n      list.forEach(item => emitter.openNode(item));\n    }\n\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\n    var lastMatch = {};\n\n    /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceeding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */\n    function processLexeme(textBeforeMatch, match) {\n      var lexeme = match && match[0];\n\n      // add non-matched text to the current mode buffer\n      mode_buffer += textBeforeMatch;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      // we've found a 0 width match and we're stuck, so we need to advance\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\n      // sometimes they can end up matching nothing at all\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\n        mode_buffer += codeToHighlight.slice(match.index, match.index + 1);\n        if (!SAFE_MODE) {\n          /** @type {AnnotatedError} */\n          const err = new Error('0 width match regex');\n          err.languageName = languageName;\n          err.badRule = lastMatch.rule;\n          throw err;\n        }\n        return 1;\n      }\n      lastMatch = match;\n\n      if (match.type === \"begin\") {\n        return doBeginMatch(match);\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\n        // illegal match, we do not continue processing\n        /** @type {AnnotatedError} */\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n        err.mode = top;\n        throw err;\n      } else if (match.type === \"end\") {\n        var processed = doEndMatch(match);\n        if (processed !== NO_MATCH) {\n          return processed;\n        }\n      }\n\n      // edge case for when illegal matches $ (end of line) which is technically\n      // a 0 width match but not a begin/end match so it's not caught by the\n      // first handler (when ignoreIllegals is true)\n      if (match.type === \"illegal\" && lexeme === \"\") {\n        // advance so we aren't stuck in an infinite loop\n        return 1;\n      }\n\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\n      // decent number of iterations yet our index (cursor position in our\n      // parsing) still 3x behind our index then something is very wrong\n      // so we bail\n      if (iterations > 100000 && iterations > match.index * 3) {\n        const err = new Error('potential infinite loop, way more iterations than matches');\n        throw err;\n      }\n\n      /*\n      Why might be find ourselves here?  Only one occasion now.  An end match that was\n      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`\n      rule sets the end rule to a specific match.  Since the overall mode termination rule that's\n      being used to scan the text isn't recompiled that means that any match that LOOKS like\n      the end (but is not, because it is not an exact match to the beginning) will\n      end up here.  A definite end match, but when `doEndMatch` tries to \"reapply\"\n      the end rule and fails to match, we wind up here, and just silently ignore the end.\n\n      This causes no real harm other than stopping a few times too many.\n      */\n\n      mode_buffer += lexeme;\n      return lexeme.length;\n    }\n\n    var language = getLanguage(languageName);\n    if (!language) {\n      console.error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n      throw new Error('Unknown language: \"' + languageName + '\"');\n    }\n\n    var md = compileLanguage(language);\n    var result = '';\n    /** @type {CompiledMode} */\n    var top = continuation || md;\n    /** @type Record<string,Mode> */\n    var continuations = {}; // keep continuations for sub-languages\n    var emitter = new options.__emitter(options);\n    processContinuations();\n    var mode_buffer = '';\n    var relevance = 0;\n    var index = 0;\n    var iterations = 0;\n    var continueScanAtSamePosition = false;\n\n    try {\n      top.matcher.considerAll();\n\n      for (;;) {\n        iterations++;\n        if (continueScanAtSamePosition) {\n          // only regexes not matched previously will now be\n          // considered for a potential match\n          continueScanAtSamePosition = false;\n        } else {\n          top.matcher.lastIndex = index;\n          top.matcher.considerAll();\n        }\n        const match = top.matcher.exec(codeToHighlight);\n        // console.log(\"match\", match[0], match.rule && match.rule.begin)\n        if (!match) break;\n\n        const beforeMatch = codeToHighlight.substring(index, match.index);\n        const processedCount = processLexeme(beforeMatch, match);\n        index = match.index + processedCount;\n      }\n      processLexeme(codeToHighlight.substr(index));\n      emitter.closeAllNodes();\n      emitter.finalize();\n      result = emitter.toHTML();\n\n      return {\n        relevance: relevance,\n        value: result,\n        language: languageName,\n        illegal: false,\n        emitter: emitter,\n        top: top\n      };\n    } catch (err) {\n      if (err.message && err.message.includes('Illegal')) {\n        return {\n          illegal: true,\n          illegalBy: {\n            msg: err.message,\n            context: codeToHighlight.slice(index - 100, index + 100),\n            mode: err.mode\n          },\n          sofar: result,\n          relevance: 0,\n          value: escape(codeToHighlight),\n          emitter: emitter\n        };\n      } else if (SAFE_MODE) {\n        return {\n          illegal: false,\n          relevance: 0,\n          value: escape(codeToHighlight),\n          emitter: emitter,\n          language: languageName,\n          top: top,\n          errorRaised: err\n        };\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */\n  function justTextHighlightResult(code) {\n    const result = {\n      relevance: 0,\n      emitter: new options.__emitter(options),\n      value: escape(code),\n      illegal: false,\n      top: PLAINTEXT_LANGUAGE\n    };\n    result.emitter.addText(code);\n    return result;\n  }\n\n  /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */\n  function highlightAuto(code, languageSubset) {\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\n    var result = justTextHighlightResult(code);\n    var secondBest = result;\n    languageSubset.filter(getLanguage).filter(autoDetection).forEach(function(name) {\n      var current = _highlight(name, code, false);\n      current.language = name;\n      if (current.relevance > secondBest.relevance) {\n        secondBest = current;\n      }\n      if (current.relevance > result.relevance) {\n        secondBest = result;\n        result = current;\n      }\n    });\n    if (secondBest.language) {\n      // second_best (with underscore) is the expected API\n      result.second_best = secondBest;\n    }\n    return result;\n  }\n\n  /**\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n    @param {string} html\n    @returns {string}\n  */\n  function fixMarkup(html) {\n    if (!(options.tabReplace || options.useBR)) {\n      return html;\n    }\n\n    return html.replace(fixMarkupRe, match => {\n      if (match === '\\n') {\n        return options.useBR ? '<br>' : match;\n      } else if (options.tabReplace) {\n        return match.replace(/\\t/g, options.tabReplace);\n      }\n      return match;\n    });\n  }\n\n  /**\n   * Builds new class name for block given the language name\n   *\n   * @param {string} prevClassName\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */\n  function buildClassName(prevClassName, currentLang, resultLang) {\n    var language = currentLang ? aliases[currentLang] : resultLang;\n    var result = [prevClassName.trim()];\n\n    if (!prevClassName.match(/\\bhljs\\b/)) {\n      result.push('hljs');\n    }\n\n    if (!prevClassName.includes(language)) {\n      result.push(language);\n    }\n\n    return result.join(' ').trim();\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code. Accepts a DOM node and\n   * two optional parameters for fixMarkup.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */\n  function highlightBlock(element) {\n    /** @type HTMLElement */\n    let node = null;\n    const language = blockLanguage(element);\n\n    if (shouldNotHighlight(language)) return;\n\n    fire(\"before:highlightBlock\",\n      { block: element, language: language });\n\n    if (options.useBR) {\n      node = document.createElement('div');\n      node.innerHTML = element.innerHTML.replace(/\\n/g, '').replace(/<br[ /]*>/g, '\\n');\n    } else {\n      node = element;\n    }\n    const text = node.textContent;\n    const result = language ? highlight(language, text, true) : highlightAuto(text);\n\n    const originalStream = nodeStream(node);\n    if (originalStream.length) {\n      const resultNode = document.createElement('div');\n      resultNode.innerHTML = result.value;\n      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n    }\n    result.value = fixMarkup(result.value);\n\n    fire(\"after:highlightBlock\", { block: element, result: result });\n\n    element.innerHTML = result.value;\n    element.className = buildClassName(element.className, language, result.language);\n    element.result = {\n      language: result.language,\n      // TODO: remove with version 11.0\n      re: result.relevance,\n      relavance: result.relevance\n    };\n    if (result.second_best) {\n      element.second_best = {\n        language: result.second_best.language,\n        // TODO: remove with version 11.0\n        re: result.second_best.relevance,\n        relavance: result.second_best.relevance\n      };\n    }\n  }\n\n  /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {{}} userOptions\n   */\n  function configure(userOptions) {\n    options = inherit(options, userOptions);\n  }\n\n  /**\n   * Highlights to all <pre><code> blocks on a page\n   *\n   * @type {Function & {called?: boolean}}\n   */\n  const initHighlighting = () => {\n    if (initHighlighting.called) return;\n    initHighlighting.called = true;\n\n    var blocks = document.querySelectorAll('pre code');\n    ArrayProto.forEach.call(blocks, highlightBlock);\n  };\n\n  // Higlights all when DOMContentLoaded fires\n  function initHighlightingOnLoad() {\n    // @ts-ignore\n    window.addEventListener('DOMContentLoaded', initHighlighting, false);\n  }\n\n  /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */\n  function registerLanguage(languageName, languageDefinition) {\n    var lang = null;\n    try {\n      lang = languageDefinition(hljs);\n    } catch (error) {\n      console.error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n      // hard or soft error\n      if (!SAFE_MODE) { throw error; } else { console.error(error); }\n      // languages that have serious errors are replaced with essentially a\n      // \"plaintext\" stand-in so that the code blocks will still get normal\n      // css classes applied to them - and one bad language won't break the\n      // entire highlighter\n      lang = PLAINTEXT_LANGUAGE;\n    }\n    // give it a temporary name if it doesn't have one in the meta-data\n    if (!lang.name) lang.name = languageName;\n    languages[languageName] = lang;\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\n\n    if (lang.aliases) {\n      registerAliases(lang.aliases, { languageName });\n    }\n  }\n\n  /**\n   * @returns {string[]} List of language internal names\n   */\n  function listLanguages() {\n    return Object.keys(languages);\n  }\n\n  /**\n    intended usage: When one language truly requires another\n\n    Unlike `getLanguage`, this will throw when the requested language\n    is not available.\n\n    @param {string} name - name of the language to fetch/require\n    @returns {Language | never}\n  */\n  function requireLanguage(name) {\n    var lang = getLanguage(name);\n    if (lang) { return lang; }\n\n    var err = new Error('The \\'{}\\' language is required, but not loaded.'.replace('{}', name));\n    throw err;\n  }\n\n  /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */\n  function registerAliases(aliasList, { languageName }) {\n    if (typeof aliasList === 'string') {\n      aliasList = [aliasList];\n    }\n    aliasList.forEach(alias => { aliases[alias] = languageName; });\n  }\n\n  /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */\n  function autoDetection(name) {\n    var lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function addPlugin(plugin) {\n    plugins.push(plugin);\n  }\n\n  /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */\n  function fire(event, args) {\n    var cb = event;\n    plugins.forEach(function(plugin) {\n      if (plugin[cb]) {\n        plugin[cb](args);\n      }\n    });\n  }\n\n  /* Interface definition */\n\n  Object.assign(hljs, {\n    highlight,\n    highlightAuto,\n    fixMarkup,\n    highlightBlock,\n    configure,\n    initHighlighting,\n    initHighlightingOnLoad,\n    registerLanguage,\n    listLanguages,\n    getLanguage,\n    registerAliases,\n    requireLanguage,\n    autoDetection,\n    inherit,\n    addPlugin\n  });\n\n  hljs.debugMode = function() { SAFE_MODE = false; };\n  hljs.safeMode = function() { SAFE_MODE = true; };\n  hljs.versionString = packageJSON.version;\n\n  for (const key in MODES) {\n    // @ts-ignore\n    if (typeof MODES[key] === \"object\") {\n      // @ts-ignore\n      deepFreeze(MODES[key]);\n    }\n  }\n\n  // merge all the modes/regexs into our main object\n  Object.assign(hljs, MODES);\n\n  return hljs;\n};\n\n// export an \"instance\" of the highlighter\nexport default HLJS({});\n", "'use strict';\n\nconst hljs   = require('../../build');\nconst should = require('should');\n\ndescribe('.getLanguage()', () => {\n  it('should get an existing language', () => {\n    const result = hljs.getLanguage('python');\n\n    result.should.be.instanceOf(Object);\n  });\n\n  it('should get an existing language by alias', () => {\n    const result = hljs.getLanguage('py');\n\n    result.should.be.instanceOf(Object);\n  });\n\n  it('should be case insensitive', () => {\n    const result = hljs.getLanguage('pYTHOn');\n\n    result.should.be.instanceOf(Object);\n  });\n\n  it('should return undefined', () => {\n    const result = hljs.getLanguage('-impossible-');\n\n    should.strictEqual(result, undefined);\n  });\n\n  it('should not break on undefined', () => {\n    const result = hljs.getLanguage(undefined);\n\n    should.strictEqual(result, undefined);\n  });\n\n  it('should get the csharp language by c# alias', () => {\n    const result = hljs.getLanguage('c#');\n\n    result.should.be.instanceOf(Object);\n    result.should.have.property('aliases').with.containEql('cs');\n    should.strictEqual(result, hljs.getLanguage('csharp'))\n  });\n\n  it('should not succeed for constructor', () => {\n    const result = hljs.getLanguage('constructor');\n\n    should.strictEqual(result, undefined);\n  });\n\n  it('should not succeed for __proto__', () => {\n    const result = hljs.getLanguage('__proto__');\n\n    should.strictEqual(result, undefined);\n  });\n});\n"], "filenames": ["CHANGES.md", "src/highlight.js", "test/api/getLanguage.js"], "buggy_code_start_loc": [0, 32, 43], "buggy_code_end_loc": [0, 35, 43], "fixing_code_start_loc": [1, 32, 44], "fixing_code_end_loc": [10, 35, 56], "type": "CWE-471", "message": "Highlight.js is a syntax highlighter written in JavaScript. Highlight.js versions before 9.18.2 and 10.1.2 are vulnerable to Prototype Pollution. A malicious HTML code block can be crafted that will result in prototype pollution of the base object's prototype during highlighting. If you allow users to insert custom HTML code blocks into your page/app via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable. The pollution should just be harmless data but this can cause problems for applications not expecting these properties to exist and can result in strange behavior or application crashes, i.e. a potential DOS vector. If your website or application does not render user provided data it should be unaffected. Versions 9.18.2 and 10.1.2 and newer include fixes for this vulnerability. If you are using version 7 or 8 you are encouraged to upgrade to a newer release.", "other": {"cve": {"id": "CVE-2020-26237", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-24T23:15:11.223", "lastModified": "2022-10-19T13:49:21.293", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Highlight.js is a syntax highlighter written in JavaScript. Highlight.js versions before 9.18.2 and 10.1.2 are vulnerable to Prototype Pollution. A malicious HTML code block can be crafted that will result in prototype pollution of the base object's prototype during highlighting. If you allow users to insert custom HTML code blocks into your page/app via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable. The pollution should just be harmless data but this can cause problems for applications not expecting these properties to exist and can result in strange behavior or application crashes, i.e. a potential DOS vector. If your website or application does not render user provided data it should be unaffected. Versions 9.18.2 and 10.1.2 and newer include fixes for this vulnerability. If you are using version 7 or 8 you are encouraged to upgrade to a newer release."}, {"lang": "es", "value": "Highlight.js es un resaltador de sintaxis escrito en JavaScript.&#xa0;Highlight.js versiones anteriores a 9.18.2 y 10.1.2 son vulnerables a una Contaminaci\u00f3n de Prototipo. Un bloque de c\u00f3digo HTML malicioso puede ser dise\u00f1ado lo que resultar\u00e1 en la contaminaci\u00f3n del prototipo del prototipo del objeto base durante el resaltado.&#xa0;Si permite a usuarios insertar bloques de c\u00f3digo HTML personalizados en su p\u00e1gina y aplicaci\u00f3n por medio del an\u00e1lisis de bloques de c\u00f3digo Markdown (o similar) y no filtrar los nombres del idioma que el usuario puede proporcionar, puede ser vulnerable.&#xa0;La contaminaci\u00f3n deber\u00eda ser solo datos inofensivos, pero esto puede causar problemas para las aplicaciones que no esperan que se presenten estas propiedades y puede resultar en un comportamiento extra\u00f1o o fallos de la aplicaci\u00f3n, es decir, un vector de DOS potencial.&#xa0;Si su sitio web o aplicaci\u00f3n no proporciona los datos proporcionados por el usuario, no deber\u00eda estar afectado.&#xa0;Versiones 9.18.2 y 10.1.&#xa0;2 y m\u00e1s recientes incluyen correcciones para esta vulnerabilidad.&#xa0;Si est\u00e1 usando la versi\u00f3n 7 o 8, le recomendamos que actualice a una versi\u00f3n m\u00e1s reciente"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-471"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:highlightjs:highlight.js:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "9.18.2", "matchCriteriaId": "AF6D839E-1AC7-4F59-B516-69D5F8487ED4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:highlightjs:highlight.js:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "10.1.0", "versionEndExcluding": "10.1.2", "matchCriteriaId": "EE56A922-F91D-4AD1-8C07-56B25BD9E32D"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:mysql_enterprise_monitor:*:*:*:*:*:*:*:*", "versionEndIncluding": "8.0.30", "matchCriteriaId": "6B4888C7-3A68-4AAE-A3ED-8DD4E358BCA4"}]}]}], "references": [{"url": "https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/highlightjs/highlight.js/pull/2636", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/highlightjs/highlight.js/security/advisories/GHSA-vfrc-7r7c-w9mx", "source": "security-advisories@github.com", "tags": ["Mitigation", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/12/msg00041.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/highlight.js", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujul2022.html", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0"}}