{"buggy_code": ["/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.admin;\n\nimport java.util.TimeZone;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.PasswordTextField;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.apache.wicket.spring.injection.annot.SpringBean;\nimport org.apache.wicket.validation.IValidatable;\nimport org.apache.wicket.validation.IValidator;\nimport org.projectforge.core.Configuration;\nimport org.projectforge.core.ConfigurationDO;\nimport org.projectforge.database.InitDatabaseDao;\nimport org.projectforge.user.UserDao;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.MaxLengthTextField;\nimport org.projectforge.web.wicket.components.RequiredMaxLengthTextField;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.components.TimeZonePanel;\nimport org.projectforge.web.wicket.flowlayout.DivPanel;\nimport org.projectforge.web.wicket.flowlayout.DivType;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.InputPanel;\nimport org.projectforge.web.wicket.flowlayout.ParTextPanel;\nimport org.projectforge.web.wicket.flowlayout.PasswordPanel;\nimport org.projectforge.web.wicket.flowlayout.RadioGroupPanel;\n\npublic class SetupForm extends AbstractForm<SetupForm, SetupPage>\n{\n  private static final long serialVersionUID = -277853572580468505L;\n\n  private static final String MAGIC_PASSWORD = \"******\";\n\n  @SpringBean(name = \"userDao\")\n  private UserDao userDao;\n\n  private final SetupTarget setupMode = SetupTarget.TEST_DATA;\n\n  private final TimeZone timeZone = TimeZone.getDefault();\n\n  private String sysopEMail;\n\n  private String feedbackEMail;\n\n  private String calendarDomain;\n\n  private final String adminUsername = InitDatabaseDao.DEFAULT_ADMIN_USER;\n\n  // @SuppressWarnings(\"unused\")\n  // private String organization;\n\n  @SuppressWarnings(\"unused\")\n  private String password;\n\n  @SuppressWarnings(\"unused\")\n  private String passwordRepeat;\n\n  private String encryptedPassword;\n\n  public SetupForm(final SetupPage parentPage)\n  {\n    super(parentPage, \"setupform\");\n  }\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(createFeedbackPanel());\n    final GridBuilder gridBuilder = newGridBuilder(this, \"flowform\");\n    gridBuilder.newFormHeading(getString(\"administration.setup.heading\"));\n    final DivPanel panel = gridBuilder.getPanel();\n    panel.add(new ParTextPanel(panel.newChildId(), getString(\"administration.setup.heading.subtitle\")));\n    {\n      // RadioChoice mode\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.setup.target\"));\n      final DivPanel radioPanel = new DivPanel(fs.newChildId(), DivType.RADIOBOX);\n      fs.add(radioPanel);\n      fs.setLabelFor(radioPanel);\n      final RadioGroupPanel<SetupTarget> radioGroup = new RadioGroupPanel<SetupTarget>(radioPanel.newChildId(), \"setuptarget\",\n          new PropertyModel<SetupTarget>(this, \"setupMode\"));\n      radioPanel.add(radioGroup);\n      for (final SetupTarget target : SetupTarget.values()) {\n        radioGroup.add(new Model<SetupTarget>(target), getString(target.getI18nKey()), getString(target.getI18nKey() + \".tooltip\"));\n      }\n    }\n    // final RequiredMaxLengthTextField organizationField = new RequiredMaxLengthTextField(this, \"organization\", getString(\"organization\"),\n    // new PropertyModel<String>(this, \"organization\"), 100);\n    // add(organizationField);\n    {\n      // User name\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"username\"));\n      fs.add(new RequiredMaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this, \"adminUsername\"), 100));\n    }\n    final PasswordTextField passwordField = new PasswordTextField(PasswordPanel.WICKET_ID, new PropertyModel<String>(this, \"password\")) {\n      @Override\n      protected void onComponentTag(final ComponentTag tag)\n      {\n        super.onComponentTag(tag);\n        if (encryptedPassword == null) {\n          tag.put(\"value\", \"\");\n        } else if (StringUtils.isEmpty(getConvertedInput()) == false) {\n          tag.put(\"value\", MAGIC_PASSWORD);\n        }\n      }\n    };\n    {\n      // Password\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"password\"));\n      passwordField.setRequired(true); // No setReset(true), otherwise uploading and re-entering passwords is a real pain.\n      fs.add(passwordField);\n      WicketUtils.setFocus(passwordField);\n    }\n    {\n      // Password repeat\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"passwordRepeat\"));\n      final PasswordTextField passwordRepeatField = new PasswordTextField(PasswordPanel.WICKET_ID, new PropertyModel<String>(this,\n          \"passwordRepeat\")) {\n        @Override\n        protected void onComponentTag(final ComponentTag tag)\n        {\n          super.onComponentTag(tag);\n          if (encryptedPassword == null) {\n            tag.put(\"value\", \"\");\n          } else if (StringUtils.isEmpty(getConvertedInput()) == false) {\n            tag.put(\"value\", MAGIC_PASSWORD);\n          }\n        }\n      };\n      passwordRepeatField.setRequired(true); // No setReset(true), otherwise uploading and re-entering passwords is a real pain.\n      passwordRepeatField.add(new IValidator<String>() {\n        @Override\n        public void validate(final IValidatable<String> validatable)\n        {\n          final String input = validatable.getValue();\n          final String passwordInput = passwordField.getConvertedInput();\n          if (StringUtils.equals(input, passwordInput) == false) {\n            passwordRepeatField.error(getString(\"user.error.passwordAndRepeatDoesNotMatch\"));\n            encryptedPassword = null;\n            return;\n          }\n          if (MAGIC_PASSWORD.equals(passwordInput) == false || encryptedPassword == null) {\n            final String errorMsgKey = userDao.checkPasswordQuality(passwordInput);\n            if (errorMsgKey != null) {\n              encryptedPassword = null;\n              passwordField.error(getString(errorMsgKey));\n            } else {\n              encryptedPassword = userDao.encryptPassword(passwordInput);\n            }\n          }\n        }\n      });\n      fs.add(passwordRepeatField);\n    }\n    {\n      // Time zone\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.timezone\"));\n      final TimeZonePanel timeZone = new TimeZonePanel(fs.newChildId(), new PropertyModel<TimeZone>(this, \"timeZone\"));\n      fs.setLabelFor(timeZone);\n      fs.add(timeZone);\n      fs.addHelpIcon(getString(\"administration.configuration.param.timezone.description\"));\n    }\n    {\n      // Calendar domain\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.calendarDomain\"));\n      final RequiredMaxLengthTextField textField = new RequiredMaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this,\n          \"calendarDomain\"), ConfigurationDO.PARAM_LENGTH);\n      fs.add(textField);\n      textField.add(new IValidator<String>() {\n        @Override\n        public void validate(final IValidatable<String> validatable)\n        {\n          if (Configuration.isDomainValid(validatable.getValue()) == false) {\n            textField.error(getString(\"validation.error.generic\"));\n          }\n        }\n      });\n      fs.addHelpIcon(getString(\"administration.configuration.param.calendarDomain.description\"));\n    }\n    {\n      // E-Mail sysops\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.systemAdministratorEMail.label\"),\n          getString(\"email\"));\n      fs.add(new MaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this, \"sysopEMail\"), ConfigurationDO.PARAM_LENGTH));\n      fs.addHelpIcon(getString(\"administration.configuration.param.systemAdministratorEMail.description\"));\n    }\n    {\n      // E-Mail sysops\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.feedbackEMail.label\"),\n          getString(\"email\"));\n      fs.add(new MaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this, \"feedbackEMail\"), ConfigurationDO.PARAM_LENGTH));\n      fs.addHelpIcon(getString(\"administration.configuration.param.feedbackEMail.description\"));\n    }\n    final RepeatingView actionButtons = new RepeatingView(\"buttons\");\n    add(actionButtons);\n    {\n      final Button finishButton = new Button(SingleButtonPanel.WICKET_ID, new Model<String>(\"finish\")) {\n        @Override\n        public final void onSubmit()\n        {\n          parentPage.finishSetup();\n        }\n      };\n      final SingleButtonPanel finishButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), finishButton,\n          getString(\"administration.setup.finish\"), SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(finishButtonPanel);\n      setDefaultButton(finishButton);\n    }\n  }\n\n  public SetupTarget getSetupMode()\n  {\n    return setupMode;\n  }\n\n  public TimeZone getTimeZone()\n  {\n    return timeZone;\n  }\n\n  /**\n   * @return the calendarDomain\n   */\n  public String getCalendarDomain()\n  {\n    return calendarDomain;\n  }\n\n  public String getSysopEMail()\n  {\n    return sysopEMail;\n  }\n\n  public String getFeedbackEMail()\n  {\n    return feedbackEMail;\n  }\n\n  public String getEncryptedPassword()\n  {\n    return encryptedPassword;\n  }\n\n  public String getAdminUsername()\n  {\n    return adminUsername;\n  }\n}\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.admin;\n\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.upload.FileUploadField;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.util.lang.Bytes;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.FileUploadPanel;\n\npublic class SetupImportForm extends AbstractForm<SetupImportForm, SetupPage>\n{\n  private static final long serialVersionUID = -277853572580468505L;\n\n  protected FileUploadField fileUploadField;\n\n  protected String filename;\n\n  public SetupImportForm(final SetupPage parentPage)\n  {\n    super(parentPage, \"importform\");\n    initUpload(Bytes.megabytes(100));\n  }\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(createFeedbackPanel());\n    final GridBuilder gridBuilder = newGridBuilder(this, \"flowform\");\n    gridBuilder.newFormHeading(getString(\"import\"));\n    {\n      // Upload dump file\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.setup.dumpFile\"));\n      fileUploadField = new FileUploadField(FileUploadPanel.WICKET_ID);\n      fs.add(new FileUploadPanel(fs.newChildId(), fileUploadField));\n    }\n    final RepeatingView actionButtons = new RepeatingView(\"buttons\");\n    add(actionButtons);\n    {\n      final Button importButton = new Button(SingleButtonPanel.WICKET_ID, new Model<String>(\"import\")) {\n        @Override\n        public final void onSubmit()\n        {\n          parentPage.upload();\n        }\n      };\n      final SingleButtonPanel importButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), importButton, getString(\"import\"),\n          SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(importButtonPanel);\n    }\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:extend>\n    <div class=\"tabbable\">\n      <ul class=\"nav nav-tabs\">\n        <li class=\"active\"><a href=\"#setupform\" data-toggle=\"tab\"><wicket:message key=\"administration.setup\" /></a></li>\n        <li><a href=\"#upload\" data-toggle=\"tab\"><wicket:message key=\"import\" /></a></li>\n      </ul>\n    </div>\n    <div class=\"tab-content\">\n      <div id=\"setupform\" class=\"tab-pane active\">\n\n        <div id=\"setupform\" class=\"section\">\n          <form wicket:id=\"setupform\" autocomplete=\"off\">\n            <div wicket:id=\"feedback\"></div>\n            <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n            <div class=\"button_bar\">\n              <wicket:container wicket:id=\"buttons\">[action buttons]</wicket:container>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <div id=\"upload\" class=\"tab-pane\">\n        <form wicket:id=\"importform\" autocomplete=\"off\">\n          <div wicket:id=\"feedback\"></div>\n          <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n          <div class=\"button_bar\">\n            <wicket:container wicket:id=\"buttons\">[action buttons]</wicket:container>\n          </div>\n        </form>\n      </div>\n    </div>\n  </wicket:extend>\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.admin;\n\nimport java.util.SortedSet;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.projectforge.Version;\nimport org.projectforge.continuousdb.UpdateEntry;\nimport org.projectforge.continuousdb.UpdatePreCheckStatus;\nimport org.projectforge.web.HtmlHelper;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.CheckBoxPanel;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.MyComponentsRepeater;\n\npublic class SystemUpdateForm extends AbstractForm<SystemUpdateForm, SystemUpdatePage>\n{\n  private static final long serialVersionUID = 2492737003121592489L;\n\n  protected WebMarkupContainer scripts;\n\n  public boolean showOldUpdateScripts;\n\n  private GridBuilder gridBuilder;\n\n  /**\n   * List to create content menu in the desired order before creating the RepeatingView.\n   */\n  protected MyComponentsRepeater<SingleButtonPanel> actionButtons;\n\n  public SystemUpdateForm(final SystemUpdatePage parentPage)\n  {\n    super(parentPage);\n  }\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(createFeedbackPanel());\n    gridBuilder = newGridBuilder(this, \"flowform\");\n    gridBuilder.newGridPanel();\n    {\n      final FieldsetPanel fs = gridBuilder.newFieldset(\"Show all\");\n      fs.add(new CheckBoxPanel(fs.newChildId(), new PropertyModel<Boolean>(this, \"showOldUpdateScripts\"), null, true) {\n        /**\n         * @see org.projectforge.web.wicket.flowlayout.CheckBoxPanel#onSelectionChanged(java.lang.Boolean)\n         */\n        @Override\n        protected void onSelectionChanged(final Boolean newSelection)\n        {\n          parentPage.refresh();\n        }\n      });\n    }\n    scripts = new WebMarkupContainer(\"scripts\");\n    add(scripts);\n    updateEntryRows();\n\n    actionButtons = new MyComponentsRepeater<SingleButtonPanel>(\"buttons\");\n    add(actionButtons.getRepeatingView());\n    {\n      final Button refreshButton = new Button(SingleButtonPanel.WICKET_ID, new Model<String>(\"refresh\")) {\n        @Override\n        public final void onSubmit()\n        {\n          parentPage.refresh();\n        }\n      };\n      final SingleButtonPanel refreshButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), refreshButton, \"refresh\",\n          SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(refreshButtonPanel);\n      setDefaultButton(refreshButton);\n    }\n  }\n\n  @SuppressWarnings(\"serial\")\n  protected void updateEntryRows()\n  {\n    scripts.removeAll();\n    final RepeatingView scriptRows = new RepeatingView(\"scriptRows\");\n    scripts.add(scriptRows);\n    final SortedSet<UpdateEntry> updateEntries = parentPage.myDatabaseUpdater.getSystemUpdater().getUpdateEntries();\n    if (updateEntries == null) {\n      return;\n    }\n    boolean odd = true;\n    for (final UpdateEntry updateEntry : updateEntries) {\n      if (showOldUpdateScripts == false && updateEntry.getPreCheckStatus() == UpdatePreCheckStatus.ALREADY_UPDATED) {\n        continue;\n      }\n      final Version version = updateEntry.getVersion();\n      final WebMarkupContainer item = new WebMarkupContainer(scriptRows.newChildId());\n      scriptRows.add(item);\n      if (odd == true) {\n        item.add(AttributeModifier.append(\"class\", \"odd\"));\n      } else {\n        item.add(AttributeModifier.append(\"class\", \"even\"));\n      }\n      odd = !odd;\n      item.add(new Label(\"regionId\", updateEntry.getRegionId()));\n      if (updateEntry.isInitial() == true) {\n        item.add(new Label(\"version\", \"initial\"));\n      } else {\n        item.add(new Label(\"version\", version.toString()));\n      }\n      final String description = updateEntry.getDescription();\n      item.add(new Label(\"description\", StringUtils.isBlank(description) == true ? \"\" : description));\n      item.add(new Label(\"date\", updateEntry.getDate()));\n      final String preCheckResult = updateEntry.getPreCheckResult();\n      item.add(new Label(\"preCheckResult\", HtmlHelper.escapeHtml(preCheckResult, true)));\n      if (updateEntry.getPreCheckStatus() == UpdatePreCheckStatus.READY_FOR_UPDATE) {\n        final Button updateButton = new Button(\"button\", new Model<String>(\"update\")) {\n          @Override\n          public final void onSubmit()\n          {\n            parentPage.update(updateEntry);\n          }\n        };\n        item.add(new SingleButtonPanel(\"update\", updateButton, \"update\"));\n      } else {\n        final String runningResult = updateEntry.getRunningResult();\n        item.add(new Label(\"update\", HtmlHelper.escapeHtml(runningResult, true)));\n      }\n    }\n  }\n\n  /**\n   * @see org.projectforge.web.wicket.AbstractForm#onBeforeRender()\n   */\n  @Override\n  public void onBeforeRender()\n  {\n    super.onBeforeRender();\n    actionButtons.render();\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:extend>\n    <form wicket:id=\"form\" name=\"form\" autocomplete=\"off\">\n      <div class=\"grid_16\">\n        <div wicket:id=\"feedback\">[Validation errors]</div>\n      </div>\n      <div class=\"grid_16\">\n        <h2 class=\"section\" style=\"color: red;\">Important notes</h2>\n        <ol style=\"margin-left: 3em;\">\n          <li style=\"color: red; padding: .5em;\">Please make a backup of your data base before running any of these scripts!</li>\n          <li style=\"padding: .5em;\">Watch the ProjectForge log files for observing the results of the update scripts.</li>\n          <li style=\"padding: .5em;\">In productive installations it's recommended to disable the automatically schema update in the context.xml.</li>\n          <li style=\"color: red; padding: .5em;\">Please redeploy/restart your ProjectForge web application after updating the data-base.</li>\n        </ol>\n        <h3 class=\"section\">Update scripts</h3>\n        <table class=\"dataview\">\n          <thead>\n            <tr class=\"headers\">\n              <th>Region</th>\n              <th title=\"The version to update to.\"><i>Version</i></th>\n              <th>Date</th>\n              <th>Pre-check</th>\n              <th>Result</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            <wicket:container wicket:id=\"scripts\">\n              <tr wicket:id=\"scriptRows\">\n                <td wicket:id=\"regionId\">[ProjectForge]</td>\n                <td wicket:id=\"version\">[3.3.44]</td>\n                <td wicket:id=\"date\">[2011-02-27]</td>\n                <td wicket:id=\"preCheckResult\">[--]</td>\n                <td><span wicket:id=\"update\">[run]</span></td>\n                <td wicket:id=\"description\">[...]</td>\n              </tr>\n            </wicket:container>\n          </tbody>\n        </table>\n      </div>\n      <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n      <div class=\"button_bar\">\n        <wicket:container wicket:id=\"buttons\">[action buttons]</wicket:container>\n      </div>\n    </form>\n  </wicket:extend>\n</body>\n</html>", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:panel>\n    <div class=\"navbar-inner\">\n      <div class=\"container\">\n        <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".navbar-responsive-collapse\"> <span class=\"icon-bar\"></span> <span\n          class=\"icon-bar\"></span> <span class=\"icon-bar\"></span>\n        </a>\n        <div class=\"nav-collapse collapse navbar-responsive-collapse\">\n          <ul class=\"nav pf_sitemap\">\n            <li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><i class=\"icon-sitemap\"></i><span\n                class=\"badge badge-important\" wicket:id=\"totalMenuCounter\">[8]</span><b class=\"caret\"></b></a>\n              <ul class=\"dropdown-menu\">\n                <li class=\"dropdown-submenu\" wicket:id=\"completeMenuCategoryRepeater\"><a href=\"#\"><span wicket:id=\"menuCategoryLabel\">[General]</span><span\n                    class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span></a>\n                  <ul class=\"dropdown-menu\">\n                    <li wicket:id=\"completeSubMenuRepeater\"><a wicket:id=\"link\"><span wicket:id=\"label\">[Addresses]</span><span\n                        class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span></a></li>\n                  </ul></li>\n              </ul></li>\n          </ul>\n          <wicket:container wicket:id=\"menuconfig\"></wicket:container>\n          <div id=\"pf_sortablecontainer\">\n            <ul class=\"nav\" role=\"menu\">\n              <li id=\"pf_newentry\" class=\"pf_disable\"><input type=\"text\" class=\"text\"><a class=\"pf_safenewentry\"><i\n                  class=\"icon-plus-sign\"></i></a></li>\n              <li wicket:id=\"goMobile\"><a href=\"#\" wicket:id=\"link\"><wicket:message key=\"menu.mobileMenu\" /></a></li>\n              <li wicket:id=\"menuRepeater\"><a href=\"#\" wicket:id=\"link\"><span wicket:id=\"label\">[Generic]</span><span\n                  class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span> <b class=\"caret\" wicket:id=\"caret\"></b></a>\n                <ul class=\"dropdown-menu\" wicket:id=\"subMenu\">\n                  <li wicket:id=\"subMenuRepeater\"><a wicket:id=\"link\"><span wicket:id=\"label\">[Addresses]</span><span\n                      class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span></a></li>\n                </ul></li>\n            </ul>\n          </div>\n          <form class=\"navbar-search pull-left\" wicket:id=\"searchForm\" autocomplete=\"off\">\n            <input type=\"text\" class=\"search-query span2\" placeholder=\"Search\" wicket:id=\"searchField\">\n          </form>\n          <ul class=\"nav pull-right\">\n            <li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span wicket:id=\"user\">[Kai Reinhard]</span><b\n                class=\"caret\"></b></a>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"wa/layoutSettings\" wicket:id=\"layoutSettingsMenuLink\"><wicket:message key=\"menu.gear.layoutsettings\" /></a></li>\n                <li><a href=\"wa/feedback\" wicket:id=\"feedbackLink\"><wicket:message key=\"menu.gear.feedback\" /></a></li>\n                <li class=\"divider\"></li>\n                <li><a href=\"#\" wicket:id=\"showBookmarkLink\"><wicket:message key=\"menu.gear.showBookmark\" /></a></li>\n                <li><a wicket:id=\"documentationLink\" href=\"/myAccount\"><wicket:message key=\"menu.documentation\" /></a></li>\n                <li><a wicket:id=\"myAccountLink\" href=\"/myAccount\"><wicket:message key=\"menu.myAccount\" /></a></li>\n                <li><a wicket:id=\"logoutLink\" href=\"/login?logout=true\"><wicket:message key=\"menu.logout\" /></a></li>\n              </ul></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </wicket:panel>\n\n</body>\n</html>\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.core;\n\nimport java.util.Collection;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.AjaxLink;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextArea;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.link.AbstractLink;\nimport org.apache.wicket.markup.html.link.BookmarkablePageLink;\nimport org.apache.wicket.markup.html.link.Link;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.apache.wicket.request.http.WebRequest;\nimport org.apache.wicket.request.http.WebResponse;\nimport org.apache.wicket.request.mapper.parameter.PageParameters;\nimport org.projectforge.access.AccessChecker;\nimport org.projectforge.user.PFUserContext;\nimport org.projectforge.user.UserRights;\nimport org.projectforge.user.UserXmlPreferencesCache;\nimport org.projectforge.web.FavoritesMenu;\nimport org.projectforge.web.LayoutSettingsPage;\nimport org.projectforge.web.LoginPage;\nimport org.projectforge.web.MenuEntry;\nimport org.projectforge.web.core.menuconfig.MenuConfig;\nimport org.projectforge.web.dialog.ModalDialog;\nimport org.projectforge.web.doc.DocumentationPage;\nimport org.projectforge.web.mobile.MenuMobilePage;\nimport org.projectforge.web.user.ChangePasswordPage;\nimport org.projectforge.web.user.MyAccountEditPage;\nimport org.projectforge.web.wicket.AbstractSecuredPage;\nimport org.projectforge.web.wicket.FeedbackPage;\nimport org.projectforge.web.wicket.MySession;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\n\n/**\n * Displays the favorite menu.\n * @author Kai Reinhard (k.reinhard@micromata.de)\n */\npublic class NavTopPanel extends NavAbstractPanel\n{\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(NavTopPanel.class);\n\n  private static final long serialVersionUID = -7858806882044188339L;\n\n  private FavoritesMenu favoritesMenu;\n\n  private final AccessChecker accessChecker;\n\n  private final UserXmlPreferencesCache userXmlPreferencesCache;\n\n  private BookmarkDialog bookmarkDialog;\n\n  public NavTopPanel(final String id, final UserXmlPreferencesCache userXmlPreferencesCache, final AccessChecker accessChecker)\n  {\n    super(id);\n    this.userXmlPreferencesCache = userXmlPreferencesCache;\n    this.accessChecker = accessChecker;\n  }\n\n  public void init(final AbstractSecuredPage page)\n  {\n    getMenu();\n    this.favoritesMenu = FavoritesMenu.get();\n    final WebMarkupContainer goMobile = new WebMarkupContainer(\"goMobile\");\n    add(goMobile);\n    if (page.getMySession().isMobileUserAgent() == true) {\n      goMobile.add(new BookmarkablePageLink<Void>(\"link\", MenuMobilePage.class));\n    } else {\n      goMobile.setVisible(false);\n    }\n    final BookmarkablePageLink<Void> layoutSettingsMenuLink = new BookmarkablePageLink<Void>(\"layoutSettingsMenuLink\",\n        LayoutSettingsPage.class);\n    if (UserRights.getAccessChecker().isRestrictedUser() == true) {\n      // Not visibible for restricted users:\n      layoutSettingsMenuLink.setVisible(false);\n    }\n    add(new MenuConfig(\"menuconfig\", getMenu(), favoritesMenu));\n    @SuppressWarnings(\"serial\")\n    final Form<String> searchForm = new Form<String>(\"searchForm\") {\n      private String searchString;\n\n      /**\n       * @see org.apache.wicket.markup.html.form.Form#onSubmit()\n       */\n      @Override\n      protected void onSubmit()\n      {\n        if (StringUtils.isNotBlank(searchString) == true) {\n          final SearchPage searchPage = new SearchPage(new PageParameters(), searchString);\n          setResponsePage(searchPage);\n        }\n        super.onSubmit();\n      }\n    };\n    add(searchForm);\n    final TextField<String> searchField = new TextField<String>(\"searchField\", new PropertyModel<String>(searchForm, \"searchString\"));\n    WicketUtils.setPlaceHolderAttribute(searchField, getString(\"search.search\"));\n    searchForm.add(searchField);\n    add(layoutSettingsMenuLink);\n    add(new BookmarkablePageLink<Void>(\"feedbackLink\", FeedbackPage.class));\n    {\n      @SuppressWarnings(\"serial\")\n      final AjaxLink<Void> showBookmarkLink = new AjaxLink<Void>(\"showBookmarkLink\") {\n        /**\n         * @see org.apache.wicket.ajax.markup.html.AjaxLink#onClick(org.apache.wicket.ajax.AjaxRequestTarget)\n         */\n        @Override\n        public void onClick(final AjaxRequestTarget target)\n        {\n          bookmarkDialog.open(target);\n          // Redraw the content:\n          bookmarkDialog.redraw().addContent(target);\n        }\n      };\n      add(showBookmarkLink);\n      addBookmarkDialog();\n    }\n    {\n      add(new Label(\"user\", PFUserContext.getUser().getFullname()));\n      if (accessChecker.isRestrictedUser() == true) {\n        // Show ChangePaswordPage as my account for restricted users.\n        final BookmarkablePageLink<Void> changePasswordLink = new BookmarkablePageLink<Void>(\"myAccountLink\", ChangePasswordPage.class);\n        add(changePasswordLink);\n      } else {\n        final BookmarkablePageLink<Void> myAccountLink = new BookmarkablePageLink<Void>(\"myAccountLink\", MyAccountEditPage.class);\n        add(myAccountLink);\n      }\n      final BookmarkablePageLink<Void> documentationLink = new BookmarkablePageLink<Void>(\"documentationLink\", DocumentationPage.class);\n      add(documentationLink);\n\n      @SuppressWarnings(\"serial\")\n      final Link<String> logoutLink = new Link<String>(\"logoutLink\") {\n        @Override\n        public void onClick()\n        {\n          LoginPage.logout((MySession) getSession(), (WebRequest) getRequest(), (WebResponse) getResponse(), userXmlPreferencesCache);\n          setResponsePage(LoginPage.class);\n        };\n      };\n      add(logoutLink);\n    }\n    addCompleteMenu();\n    addFavoriteMenu();\n  }\n\n  @SuppressWarnings(\"serial\")\n  private void addCompleteMenu()\n  {\n    final Label totalMenuSuffixLabel = new MenuSuffixLabel(\"totalMenuCounter\", new Model<Integer>() {\n      @Override\n      public Integer getObject()\n      {\n        int counter = 0;\n        if (menu.getMenuEntries() == null) {\n          return counter;\n        }\n        for (final MenuEntry menuEntry : menu.getMenuEntries()) {\n          final IModel<Integer> newCounterModel = menuEntry.getNewCounterModel();\n          if (newCounterModel != null && newCounterModel.getObject() != null) {\n            counter += newCounterModel.getObject();\n          }\n        }\n        return counter;\n      };\n    });\n    add(totalMenuSuffixLabel);\n\n    final RepeatingView completeMenuCategoryRepeater = new RepeatingView(\"completeMenuCategoryRepeater\");\n    add(completeMenuCategoryRepeater);\n    if (menu.getMenuEntries() != null) {\n      for (final MenuEntry menuEntry : menu.getMenuEntries()) {\n        if (menuEntry.getSubMenuEntries() == null) {\n          continue;\n        }\n        // Now we add a new menu area (title with sub menus):\n        final WebMarkupContainer categoryContainer = new WebMarkupContainer(completeMenuCategoryRepeater.newChildId());\n        completeMenuCategoryRepeater.add(categoryContainer);\n        categoryContainer.add(new Label(\"menuCategoryLabel\", getString(menuEntry.getI18nKey())));\n        final Label areaSuffixLabel = getSuffixLabel(menuEntry);\n        categoryContainer.add(areaSuffixLabel);\n\n        // final WebMarkupContainer subMenuContainer = new WebMarkupContainer(\"subMenu\");\n        // categoryContainer.add(subMenuContainer);\n        if (menuEntry.hasSubMenuEntries() == false) {\n          // subMenuContainer.setVisible(false);\n          continue;\n        }\n\n        final RepeatingView completeSubMenuRepeater = new RepeatingView(\"completeSubMenuRepeater\");\n        categoryContainer.add(completeSubMenuRepeater);\n        for (final MenuEntry subMenuEntry : menuEntry.getSubMenuEntries()) {\n          if (subMenuEntry.getSubMenuEntries() != null) {\n            log.error(\"Oups: sub sub menus not supported: \" + menuEntry.getId() + \" has child menus which are ignored.\");\n          }\n          // Now we add the next menu entry to the area:\n          final WebMarkupContainer subMenuItem = new WebMarkupContainer(completeSubMenuRepeater.newChildId());\n          completeSubMenuRepeater.add(subMenuItem);\n          final AbstractLink link = getMenuEntryLink(subMenuEntry, true);\n          if (link != null) {\n            subMenuItem.add(link);\n          } else {\n            subMenuItem.setVisible(false);\n          }\n        }\n      }\n    }\n\n  }\n\n  private void addFavoriteMenu()\n  {\n    // Favorite menu:\n    final RepeatingView menuRepeater = new RepeatingView(\"menuRepeater\");\n    add(menuRepeater);\n    final Collection<MenuEntry> menuEntries = favoritesMenu.getMenuEntries();\n    if (menuEntries != null) {\n      for (final MenuEntry menuEntry : menuEntries) {\n        // Now we add a new menu area (title with sub menus):\n        final WebMarkupContainer menuItem = new WebMarkupContainer(menuRepeater.newChildId());\n        menuRepeater.add(menuItem);\n        final AbstractLink link = getMenuEntryLink(menuEntry, true);\n        if (link == null) {\n          menuItem.setVisible(false);\n          continue;\n        }\n        menuItem.add(link);\n\n        final WebMarkupContainer subMenuContainer = new WebMarkupContainer(\"subMenu\");\n        menuItem.add(subMenuContainer);\n        final WebMarkupContainer caret = new WebMarkupContainer(\"caret\");\n        link.add(caret);\n        if (menuEntry.hasSubMenuEntries() == false) {\n          subMenuContainer.setVisible(false);\n          caret.setVisible(false);\n          continue;\n        }\n        menuItem.add(AttributeModifier.append(\"class\", \"dropdown\"));\n        link.add(AttributeModifier.append(\"class\", \"dropdown-toggle\"));\n        link.add(AttributeModifier.append(\"data-toggle\", \"dropdown\"));\n        final RepeatingView subMenuRepeater = new RepeatingView(\"subMenuRepeater\");\n        subMenuContainer.add(subMenuRepeater);\n        for (final MenuEntry subMenuEntry : menuEntry.getSubMenuEntries()) {\n          // Now we add the next menu entry to the area:\n          if (subMenuEntry.hasSubMenuEntries() == false) {\n            final WebMarkupContainer subMenuItem = new WebMarkupContainer(subMenuRepeater.newChildId());\n            subMenuRepeater.add(subMenuItem);\n            // Subsubmenu entries aren't yet supported, show only the sub entries without children, otherwise only the children are\n            // displayed.\n            final AbstractLink subLink = getMenuEntryLink(subMenuEntry, true);\n            if (subLink == null) {\n              subMenuItem.setVisible(false);\n              continue;\n            }\n            subMenuItem.add(subLink);\n            continue;\n          }\n\n          // final WebMarkupContainer subsubMenuContainer = new WebMarkupContainer(\"subsubMenu\");\n          // subMenuItem.add(subsubMenuContainer);\n          // if (subMenuEntry.hasSubMenuEntries() == false) {\n          // subsubMenuContainer.setVisible(false);\n          // continue;\n          // }\n          // final RepeatingView subsubMenuRepeater = new RepeatingView(\"subsubMenuRepeater\");\n          // subsubMenuContainer.add(subsubMenuRepeater);\n          for (final MenuEntry subsubMenuEntry : subMenuEntry.getSubMenuEntries()) {\n            // Now we add the next menu entry to the sub menu:\n            final WebMarkupContainer subMenuItem = new WebMarkupContainer(subMenuRepeater.newChildId());\n            subMenuRepeater.add(subMenuItem);\n            // Subsubmenu entries aren't yet supported, show only the sub entries without children, otherwise only the children are\n            // displayed.\n            final AbstractLink subLink = getMenuEntryLink(subsubMenuEntry, true);\n            if (subLink == null) {\n              subMenuItem.setVisible(false);\n              continue;\n            }\n            subMenuItem.add(subLink);\n            // final WebMarkupContainer subsubMenuItem = new WebMarkupContainer(subsubMenuRepeater.newChildId());\n            // subsubMenuRepeater.add(subsubMenuItem);\n            // final AbstractLink subsubLink = getMenuEntryLink(subsubMenuEntry, subsubMenuItem);\n            // subsubMenuItem.add(subsubLink);\n          }\n        }\n      }\n    }\n  }\n\n  private void addBookmarkDialog()\n  {\n    final AbstractSecuredPage parentPage = (AbstractSecuredPage) getPage();\n    bookmarkDialog = new BookmarkDialog(parentPage.newModalDialogId());\n    bookmarkDialog.setOutputMarkupId(true);\n    parentPage.add(bookmarkDialog);\n    bookmarkDialog.init();\n  }\n\n  @SuppressWarnings(\"serial\")\n  private class BookmarkDialog extends ModalDialog\n  {\n    /**\n     * @param id\n     */\n    public BookmarkDialog(final String id)\n    {\n      super(id);\n    }\n\n    @Override\n    public void init()\n    {\n      setTitle(getString(\"bookmark.title\"));\n      init(new Form<String>(getFormId()));\n      gridBuilder.newFormHeading(\"\"); // Otherwise it's empty and an IllegalArgumentException is thrown.\n    }\n\n    private BookmarkDialog redraw()\n    {\n      clearContent();\n      final AbstractSecuredPage page = (AbstractSecuredPage) NavTopPanel.this.getPage();\n      {\n        final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"bookmark.directPageLink\")).setLabelSide(false);\n        final TextArea<String> textArea = new TextArea<String>(fs.getTextAreaId(), new Model<String>(page.getPageAsLink()));\n        fs.add(textArea);\n        textArea.add(AttributeModifier.replace(\"onClick\", \"$(this).select();\"));\n      }\n      final PageParameters params = page.getBookmarkableInitialParameters();\n      if (params.isEmpty() == false) {\n        final FieldsetPanel fs = gridBuilder.newFieldset(getString(page.getTitleKey4BookmarkableInitialParameters())).setLabelSide(false);\n        final TextArea<String> textArea = new TextArea<String>(fs.getTextAreaId(), new Model<String>(page.getPageAsLink(params)));\n        fs.add(textArea);\n        textArea.add(AttributeModifier.replace(\"onClick\", \"$(this).select();\"));\n      }\n      return this;\n    }\n  }\n}\n", "<wicket:panel xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n  <div class=\"modal hide\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\" wicket:id=\"mainContainer\">\n    <wicket:container wicket:id=\"mainSubContainer\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>\n        <h3 id=\"myModalLabel\" wicket:id=\"titleContainer\"><span wicket:id=\"titleText\">[title]</span></h3>\n      </div>\n      <form wicket:id=\"form\" autocomplete=\"off\">\n        <div class=\"modal-body\" wicket:id=\"gridContent\">\n          <div wicket:id=\"formFeedback\"></div>\n          <wicket:container wicket:id=\"flowform\">[The content]</wicket:container>\n        </div>\n        <div class=\"modal-footer\" wicket:id=\"buttonBar\">\n          <wicket:container wicket:id=\"actionButtons\" />\n        </div>\n      </form>\n    </wicket:container>\n  </div>\n</wicket:panel>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.dialog;\n\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.ajax.AjaxEventBehavior;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.form.AjaxButton;\nimport org.apache.wicket.feedback.ComponentFeedbackMessageFilter;\nimport org.apache.wicket.markup.head.IHeaderResponse;\nimport org.apache.wicket.markup.head.OnDomReadyHeaderItem;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.panel.FeedbackPanel;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.projectforge.web.core.NavTopPanel;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.MyComponentsRepeater;\n\nimport de.micromata.wicket.ajax.AjaxCallback;\nimport de.micromata.wicket.ajax.AjaxFormSubmitCallback;\n\n/**\n * Base component for the ProjectForge modal dialogs.<br/>\n * This dialog is modal.<br/>\n * \n * @author Johannes Unterstein (j.unterstein@micromata.de)\n * @author Kai Reinhard (k.reinhard@micromata.de)\n * \n */\npublic abstract class ModalDialog extends Panel\n{\n  private static final long serialVersionUID = 4235521713603821639L;\n\n  protected GridBuilder gridBuilder;\n\n  protected final WebMarkupContainer mainContainer, mainSubContainer, gridContentContainer, buttonBarContainer;\n\n  private boolean escapeKeyEnabled = true;\n\n  private String closeButtonLabel;\n\n  private SingleButtonPanel closeButtonPanel;\n\n  private boolean showCancelButton;\n\n  private boolean bigWindow;\n\n  private boolean draggable = true;\n\n  private Boolean resizable;\n\n  private boolean lazyBinding;\n\n  private WebMarkupContainer titleContainer;\n\n  private Label titleLabel;\n\n  protected Form< ? > form;\n\n  protected FeedbackPanel formFeedback;\n\n  /**\n   * If true, a GridBuilder is automatically available.\n   */\n  protected boolean autoGenerateGridBuilder = true;\n\n  /**\n   * List to create action buttons in the desired order before creating the RepeatingView.\n   */\n  protected MyComponentsRepeater<Component> actionButtons;\n\n  /**\n   * @param id\n   */\n  public ModalDialog(final String id)\n  {\n    super(id);\n    actionButtons = new MyComponentsRepeater<Component>(\"actionButtons\");\n    mainContainer = new WebMarkupContainer(\"mainContainer\");\n    add(mainContainer.setOutputMarkupId(true));\n    mainContainer.add(mainSubContainer = new WebMarkupContainer(\"mainSubContainer\"));\n    gridContentContainer = new WebMarkupContainer(\"gridContent\");\n    gridContentContainer.setOutputMarkupId(true);\n    buttonBarContainer = new WebMarkupContainer(\"buttonBar\");\n    buttonBarContainer.setOutputMarkupId(true);\n  }\n\n  /**\n   * @see org.apache.wicket.Component#onInitialize()\n   */\n  @Override\n  protected void onInitialize()\n  {\n    super.onInitialize();\n    if (bigWindow == true) {\n      mainContainer.add(AttributeModifier.append(\"class\", \"big-modal\"));\n    }\n  }\n\n  /**\n   * Sets also draggable to false. Appends css class big-modal.\n   */\n  public ModalDialog setBigWindow()\n  {\n    bigWindow = true;\n    draggable = false;\n    return this;\n  }\n\n  /**\n   * Only the div panel of the modal dialog is rendered without buttons and content. Default is false.\n   * @return this for chaining.\n   */\n  public ModalDialog setLazyBinding()\n  {\n    this.lazyBinding = true;\n    mainSubContainer.setVisible(false);\n    return this;\n  }\n\n  public void bind(final AjaxRequestTarget target)\n  {\n    actionButtons.render();\n    mainSubContainer.setVisible(true);\n    target.appendJavaScript(getJavaScriptAction());\n  }\n\n  /**\n   * @return true if no lazy binding was used or bind() was already called.\n   */\n  public boolean isBound()\n  {\n    return mainSubContainer.isVisible();\n  }\n\n  /**\n   * @param draggable the draggable to set (default is true).\n   * @return this for chaining.\n   */\n  public ModalDialog setDraggable(final boolean draggable)\n  {\n    this.draggable = draggable;\n    return this;\n  }\n\n  /**\n   * @param resizable the resizable to set (default is true for bigWindows, otherwise false).\n   * @return this for chaining.\n   */\n  public ModalDialog setResizable(final boolean resizable)\n  {\n    this.resizable = resizable;\n    return this;\n  }\n\n  /**\n   * Display the cancel button.\n   * @return this for chaining.\n   */\n  public ModalDialog setShowCancelButton()\n  {\n    this.showCancelButton = true;\n    return this;\n  }\n\n  /**\n   * @param escapeKeyEnabled the keyboard to set (default is true).\n   * @return this for chaining.\n   */\n  public ModalDialog setEscapeKeyEnabled(final boolean escapeKeyEnabled)\n  {\n    this.escapeKeyEnabled = escapeKeyEnabled;\n    return this;\n  }\n\n  /**\n   * Close is used as default:\n   * @param closeButtonLabel the closeButtonLabel to set\n   * @return this for chaining.\n   */\n  public ModalDialog setCloseButtonLabel(final String closeButtonLabel)\n  {\n    this.closeButtonLabel = closeButtonLabel;\n    return this;\n  }\n\n  /**\n   * Should be called directly after {@link #init()}.\n   * @param tooltipTitle\n   * @param tooltipContent\n   * @see WicketUtils#addTooltip(Component, IModel, IModel)\n   */\n  public ModalDialog setCloseButtonTooltip(final IModel<String> tooltipTitle, final IModel<String> tooltipContent)\n  {\n    WicketUtils.addTooltip(this.closeButtonPanel.getButton(), tooltipTitle, tooltipContent);\n    return this;\n  }\n\n  @SuppressWarnings(\"serial\")\n  public ModalDialog wantsNotificationOnClose()\n  {\n    mainContainer.add(new AjaxEventBehavior(\"hidden\") {\n      @Override\n      protected void onEvent(final AjaxRequestTarget target)\n      {\n        handleCloseEvent(target);\n      }\n    });\n    return this;\n  }\n\n  public ModalDialog addAjaxEventBehavior(final AjaxEventBehavior behavior)\n  {\n    mainContainer.add(behavior);\n    return this;\n  }\n\n  public String getMainContainerMarkupId()\n  {\n    return mainContainer.getMarkupId(true);\n  }\n\n  @Override\n  public void renderHead(final IHeaderResponse response)\n  {\n    super.renderHead(response);\n    if (lazyBinding == false) {\n      final String script = getJavaScriptAction();\n      response.render(OnDomReadyHeaderItem.forScript(script));\n    }\n  }\n\n  private String getJavaScriptAction()\n  {\n    final StringBuffer script = new StringBuffer();\n    script.append(\"$('#\").append(getMainContainerMarkupId()).append(\"').modal({keyboard: \").append(escapeKeyEnabled)\n    .append(\", show: false });\");\n    final boolean isResizable = (resizable == null && bigWindow == true) || Boolean.TRUE.equals(resizable) == true;\n    if (draggable == true || isResizable == true) {\n      script.append(\" $('#\").append(getMainContainerMarkupId()).append(\"')\");\n    }\n    if (draggable == true) {\n      script.append(\".draggable()\");\n    }\n    if (isResizable) {\n      script.append(\".resizable({ alsoResize: '#\")\n      .append(getMainContainerMarkupId())\n      // max-height of .modal-body is 600px, need to enlarge this setting for resizing.\n      .append(\n          \", .modal-body', resize: function( event, ui ) {$('.modal-body').css('max-height', '4000px');}, minWidth: 300, minHeight: 200 })\");\n    }\n    return script.toString();\n  }\n\n  public ModalDialog open(final AjaxRequestTarget target)\n  {\n    target.appendJavaScript(\"$('#\" + getMainContainerMarkupId() + \"').modal('show');\");\n    return this;\n  }\n\n  public void close(final AjaxRequestTarget target)\n  {\n    target.appendJavaScript(\"$('#\" + getMainContainerMarkupId() + \"').modal('hide');\");\n  }\n\n  /**\n   * Add the content to the AjaxRequestTarget if the content is changed.\n   * @param target\n   * @return this for chaining.\n   */\n  public ModalDialog addContent(final AjaxRequestTarget target)\n  {\n    target.add(gridContentContainer);\n    return this;\n  }\n\n  /**\n   * Add the button bar to the AjaxRequestTarget if the buttons or their visibility are changed.\n   * @param target\n   * @return this for chaining.\n   */\n  public ModalDialog addButtonBar(final AjaxRequestTarget target)\n  {\n    target.add(buttonBarContainer);\n    return this;\n  }\n\n  /**\n   * @param target\n   * @return this for chaining.\n   */\n  public ModalDialog addTitleLabel(final AjaxRequestTarget target)\n  {\n    target.add(titleLabel);\n    return this;\n  }\n\n  public abstract void init();\n\n  /**\n   * @param title\n   * @return this for chaining.\n   */\n  public ModalDialog setTitle(final String title)\n  {\n    return setTitle(Model.of(title));\n  }\n\n  /**\n   * @param title\n   * @return this for chaining.\n   */\n  public ModalDialog setTitle(final IModel<String> title)\n  {\n    titleContainer = new WebMarkupContainer(\"titleContainer\");\n    mainSubContainer.add(titleContainer.setOutputMarkupId(true));\n    titleContainer.add(titleLabel = new Label(\"titleText\", title));\n    titleLabel.setOutputMarkupId(true);\n    return this;\n  }\n\n  /**\n   * The gridContentContainer is cleared (all child elements are removed). This is useful for Ajax dialogs with dynamic content (see\n   * {@link NavTopPanel} for an example).\n   * @return\n   */\n  public ModalDialog clearContent()\n  {\n    gridContentContainer.removeAll();\n    if (autoGenerateGridBuilder == true) {\n      gridBuilder = new GridBuilder(gridContentContainer, \"flowform\");\n    }\n    initFeedback(gridContentContainer);\n    return this;\n  }\n\n  @SuppressWarnings(\"serial\")\n  protected void init(final Form< ? > form)\n  {\n    this.form = form;\n    mainSubContainer.add(form);\n    form.add(gridContentContainer);\n    form.add(buttonBarContainer);\n    if (showCancelButton == true) {\n      final SingleButtonPanel cancelButton = appendNewAjaxActionButton(new AjaxCallback() {\n        @Override\n        public void callback(final AjaxRequestTarget target)\n        {\n          onCancelButtonSubmit(target);\n          close(target);\n        }\n      }, getString(\"cancel\"), SingleButtonPanel.CANCEL);\n      cancelButton.getButton().setDefaultFormProcessing(false);\n    }\n    closeButtonPanel = appendNewAjaxActionButton(new AjaxFormSubmitCallback() {\n\n      @Override\n      public void callback(final AjaxRequestTarget target)\n      {\n        if (onCloseButtonSubmit(target)) {\n          close(target);\n        }\n      }\n\n      @Override\n      public void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        ModalDialog.this.onError(target, form);\n      }\n    }, closeButtonLabel != null ? closeButtonLabel : getString(\"close\"), SingleButtonPanel.NORMAL);\n    buttonBarContainer.add(actionButtons.getRepeatingView());\n    form.setDefaultButton(closeButtonPanel.getButton());\n    if (autoGenerateGridBuilder == true) {\n      gridBuilder = new GridBuilder(gridContentContainer, \"flowform\");\n    }\n    initFeedback(gridContentContainer);\n  }\n\n  private void initFeedback(final WebMarkupContainer container)\n  {\n    if (formFeedback == null) {\n      formFeedback = new FeedbackPanel(\"formFeedback\", new ComponentFeedbackMessageFilter(form));\n      formFeedback.setOutputMarkupId(true);\n      formFeedback.setOutputMarkupPlaceholderTag(true);\n    }\n    container.add(formFeedback);\n  }\n\n  protected void ajaxError(final String error, final AjaxRequestTarget target)\n  {\n    form.error(error);\n    target.add(formFeedback);\n  }\n\n  /**\n   * Called if {@link #wantsNotificationOnClose()} was chosen and the dialog is closed (by pressing esc, clicking outside or clicking the\n   * upper right cross).\n   * @param target\n   */\n  protected void handleCloseEvent(final AjaxRequestTarget target)\n  {\n  }\n\n  /**\n   * Called if user hit the cancel button.\n   * @param target\n   */\n  protected void onCancelButtonSubmit(final AjaxRequestTarget target)\n  {\n  }\n\n  /**\n   * Called if user hit the close button.\n   * \n   * @param target\n   * \n   * @return true if the dialog can be close, false if errors occured.\n   */\n  protected boolean onCloseButtonSubmit(final AjaxRequestTarget target)\n  {\n    return true;\n  }\n\n  protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n  {\n  }\n\n  /**\n   * @see org.apache.wicket.Component#onBeforeRender()\n   */\n  @Override\n  protected void onBeforeRender()\n  {\n    super.onBeforeRender();\n    if (lazyBinding == false) {\n      actionButtons.render();\n    }\n  }\n\n  public String getFormId()\n  {\n    return \"form\";\n  }\n\n  public SingleButtonPanel appendNewAjaxActionButton(final AjaxCallback ajaxCallback, final String label, final String... classnames)\n  {\n    final SingleButtonPanel result = addNewAjaxActionButton(ajaxCallback, label, classnames);\n    this.actionButtons.add(result);\n    return result;\n  }\n\n  public SingleButtonPanel prependNewAjaxActionButton(final AjaxCallback ajaxCallback, final String label, final String... classnames)\n  {\n    return insertNewAjaxActionButton(ajaxCallback, 0, label, classnames);\n  }\n\n  /**\n   * @param ajaxCallback\n   * @param position 0 is the first position.\n   * @param label\n   * @param classnames\n   * @return\n   */\n  public SingleButtonPanel insertNewAjaxActionButton(final AjaxCallback ajaxCallback, final int position, final String label,\n      final String... classnames)\n  {\n    final SingleButtonPanel result = addNewAjaxActionButton(ajaxCallback, label, classnames);\n    this.actionButtons.add(position, result);\n    return result;\n  }\n\n  private SingleButtonPanel addNewAjaxActionButton(final AjaxCallback ajaxCallback, final String label, final String... classnames)\n  {\n    final AjaxButton button = new AjaxButton(\"button\", form) {\n      private static final long serialVersionUID = -5306532706450731336L;\n\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        ajaxCallback.callback(target);\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        if (ajaxCallback instanceof AjaxFormSubmitCallback) {\n          ((AjaxFormSubmitCallback) ajaxCallback).onError(target, form);\n        }\n      }\n    };\n    final SingleButtonPanel buttonPanel = new SingleButtonPanel(this.actionButtons.newChildId(), button, label, classnames);\n    buttonPanel.add(button);\n    return buttonPanel;\n  }\n\n  /**\n   * @return the mainContainer\n   */\n  public WebMarkupContainer getMainContainer()\n  {\n    return mainContainer;\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:panel>\n    <div wicket:id=\"feedback\">[feedback panel]</div>\n    <form wicket:id=\"form\" autocomplete=\"off\">\n      <div>\n        <wicket:container wicket:id=\"recalculateButton\" />\n        <wicket:container wicket:id=\"addRowButton\" />\n      </div>\n      <table class=\"costassignment\">\n        <thead>\n          <tr>\n            <th><wicket:message key=\"fibu.kost1\" /></th>\n            <th><wicket:message key=\"fibu.kost2\" /></th>\n            <th><wicket:message key=\"fibu.common.netto\" /></th>\n            <th><wicket:message key=\"percent\" /></th>\n            <th>&nbsp;</th>\n          </tr>\n        </thead>\n        <tbody id=\"costAssignmentBody\">\n          <tr wicket:id=\"rows\">\n            <td><input wicket:id=\"kost1\" title=\"3.501.00.01 - Kai Reinhard\" /></td>\n            <td><input wicket:id=\"kost2\" title=\"5.105.03.07 - ACME Web portal\" /></td>\n            <td><input wicket:id=\"netto\" /></td>\n            <td wicket:id=\"percentage\">[30%]</td>\n            <td style=\"vertical-align: middle;\" wicket:id=\"deleteEntry\">[delete button]</td>\n          </tr>\n        </tbody>\n      </table>\n      <div>\n      <wicket:message key=\"rest\" />: <span wicket:id=\"restValue\">[-1234,00]</span></div>\n    </form>\n  </wicket:panel>\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.fibu;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.List;\n\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.form.AjaxButton;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.panel.FeedbackPanel;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.apache.wicket.spring.injection.annot.SpringBean;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.projectforge.common.NumberHelper;\nimport org.projectforge.core.Constants;\nimport org.projectforge.core.CurrencyFormatter;\nimport org.projectforge.core.NumberFormatter;\nimport org.projectforge.fibu.AbstractRechnungsPositionDO;\nimport org.projectforge.fibu.EingangsrechnungsPositionDO;\nimport org.projectforge.fibu.ProjektDO;\nimport org.projectforge.fibu.RechnungDO;\nimport org.projectforge.fibu.RechnungsPositionDO;\nimport org.projectforge.fibu.kost.Kost1DO;\nimport org.projectforge.fibu.kost.Kost2DO;\nimport org.projectforge.fibu.kost.Kost2Dao;\nimport org.projectforge.fibu.kost.KostZuweisungDO;\nimport org.projectforge.fibu.kost.KostZuweisungenCopyHelper;\nimport org.projectforge.web.wicket.WicketAjaxUtils;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.components.MinMaxNumberField;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.converter.CurrencyConverter;\nimport org.projectforge.web.wicket.flowlayout.ButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.IconButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.IconType;\nimport org.projectforge.web.wicket.flowlayout.MyAjaxComponentHolder;\n\n/**\n * @author Kai Reinhard (k.reinhard@micromata.de)\n * \n */\npublic class RechnungCostEditTablePanel extends Panel\n{\n  private static final long serialVersionUID = -5732520730823126042L;\n\n  private final RepeatingView rows;\n\n  private final Form<AbstractRechnungsPositionDO> form;\n\n  private final FeedbackPanel feedbackPanel;\n\n  @SpringBean(name = \"kost2Dao\")\n  private Kost2Dao kost2Dao;\n\n  private AbstractRechnungsPositionDO position;\n\n  MyAjaxComponentHolder ajaxComponents = new MyAjaxComponentHolder();\n\n  /**\n   * @param id\n   */\n  public RechnungCostEditTablePanel(final String id)\n  {\n    super(id);\n    feedbackPanel = new FeedbackPanel(\"feedback\");\n    ajaxComponents.register(feedbackPanel);\n    add(feedbackPanel);\n    this.form = new Form<AbstractRechnungsPositionDO>(\"form\");\n    add(form);\n    rows = new RepeatingView(\"rows\");\n    form.add(rows);\n  }\n\n  /**\n   * @return the position\n   */\n  public AbstractRechnungsPositionDO getPosition()\n  {\n    return position;\n  }\n\n  @SuppressWarnings(\"serial\")\n  public RechnungCostEditTablePanel add(final AbstractRechnungsPositionDO origPosition)\n  {\n    if (origPosition instanceof RechnungsPositionDO) {\n      position = new RechnungsPositionDO();\n    } else {\n      position = new EingangsrechnungsPositionDO();\n    }\n    position.copyValuesFrom(origPosition, \"kostZuweisungen\");\n    new KostZuweisungenCopyHelper().mycopy(origPosition.getKostZuweisungen(), null, position);\n    List<KostZuweisungDO> kostzuweisungen = position.getKostZuweisungen();\n    if (CollectionUtils.isEmpty(kostzuweisungen) == true) {\n      addZuweisung(position);\n      kostzuweisungen = position.getKostZuweisungen();\n    }\n    for (final KostZuweisungDO zuweisung : kostzuweisungen) {\n      final WebMarkupContainer row = createRow(rows.newChildId(), position, zuweisung);\n      rows.add(row);\n    }\n    final Label restLabel = new Label(\"restValue\", new Model<String>() {\n      /**\n       * @see org.apache.wicket.model.Model#getObject()\n       */\n      @Override\n      public String getObject()\n      {\n        return CurrencyFormatter.format(position.getKostZuweisungNetFehlbetrag());\n      }\n    });\n    form.add(restLabel);\n    ajaxComponents.register(restLabel);\n    final AjaxButton addRowButton = new AjaxButton(ButtonPanel.BUTTON_ID, form) {\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        final KostZuweisungDO zuweisung = addZuweisung(position);\n        final WebMarkupContainer newRow = createRow(rows.newChildId(), position, zuweisung);\n        newRow.setOutputMarkupId(true);\n        final StringBuffer prependJavascriptBuf = new StringBuffer();\n        prependJavascriptBuf.append(WicketAjaxUtils.appendChild(\"costAssignmentBody\", \"tr\", newRow.getMarkupId()));\n        rows.add(newRow);\n        target.add(newRow);\n        ajaxComponents.addTargetComponents(target);\n        target.prependJavaScript(prependJavascriptBuf.toString());\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        target.add(feedbackPanel);\n      }\n    };\n    // addRowButton.setDefaultFormProcessing(false);\n    final SingleButtonPanel addPositionButtonPanel = new SingleButtonPanel(\"addRowButton\", addRowButton, getString(\"add\"));\n    form.add(addPositionButtonPanel);\n\n    final AjaxButton recalculateButton = new AjaxButton(ButtonPanel.BUTTON_ID, form) {\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        ajaxComponents.addTargetComponents(target);\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        target.add(feedbackPanel);\n      }\n    };\n    // recalculateButton.setDefaultFormProcessing(false);\n    final SingleButtonPanel recalculateButtonPanel = new SingleButtonPanel(\"recalculateButton\", recalculateButton, getString(\"recalculate\"));\n    form.add(recalculateButtonPanel);\n\n    return this;\n  }\n\n  @SuppressWarnings(\"serial\")\n  private WebMarkupContainer createRow(final String id, final AbstractRechnungsPositionDO position, final KostZuweisungDO zuweisung)\n  {\n    final WebMarkupContainer row = new WebMarkupContainer(id);\n    row.setOutputMarkupId(true);\n    final Kost1FormComponent kost1 = new Kost1FormComponent(\"kost1\", new PropertyModel<Kost1DO>(zuweisung, \"kost1\"), true);\n    kost1.setLabel(new Model<String>(getString(\"fibu.kost1\")));\n    row.add(kost1);\n    ajaxComponents.register(kost1);\n    final Kost2FormComponent kost2 = new Kost2FormComponent(\"kost2\", new PropertyModel<Kost2DO>(zuweisung, \"kost2\"), true);\n    kost2.setLabel(new Model<String>(getString(\"fibu.kost2\")));\n    row.add(kost2);\n    ajaxComponents.register(kost2);\n\n    final MinMaxNumberField<BigDecimal> netto = new MinMaxNumberField<BigDecimal>(\"netto\",\n        new PropertyModel<BigDecimal>(zuweisung, \"netto\"), Constants.TEN_BILLION_NEGATIVE, Constants.TEN_BILLION) {\n      @SuppressWarnings({ \"rawtypes\", \"unchecked\"})\n      @Override\n      public IConverter getConverter(final Class type)\n      {\n        return new CurrencyConverter(position.getNetSum());\n      }\n    };\n    netto.setLabel(new Model<String>(getString(\"fibu.common.netto\")));\n    WicketUtils.addTooltip(netto, getString(\"currencyConverter.percentage.help\"));\n    row.add(netto);\n    ajaxComponents.register(netto); // Should be updated if e. g. percentage value is given.\n    final Label pLabel = new Label(\"percentage\", new Model<String>() {\n      /**\n       * @see org.apache.wicket.model.Model#getObject()\n       */\n      @Override\n      public String getObject()\n      {\n        final BigDecimal percentage;\n        if (NumberHelper.isZeroOrNull(position.getNetSum()) == true || NumberHelper.isZeroOrNull(zuweisung.getNetto()) == true) {\n          percentage = BigDecimal.ZERO;\n        } else {\n          percentage = zuweisung.getNetto().divide(position.getNetSum(), RoundingMode.HALF_UP);\n        }\n        final boolean percentageVisible = NumberHelper.isNotZero(percentage);\n        if (percentageVisible == true) {\n          return NumberFormatter.formatPercent(percentage);\n        } else {\n          return \" \";\n        }\n      }\n    });\n    ajaxComponents.register(pLabel);\n    row.add(pLabel);\n\n    if (position.isKostZuweisungDeletable(zuweisung) == true) {\n      final AjaxButton deleteRowButton = new AjaxButton(ButtonPanel.BUTTON_ID, form) {\n        @Override\n        protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n        {\n          position.deleteKostZuweisung(zuweisung.getIndex());\n          final StringBuffer prependJavascriptBuf = new StringBuffer();\n          prependJavascriptBuf.append(WicketAjaxUtils.removeChild(\"costAssignmentBody\", row.getMarkupId()));\n          ajaxComponents.remove(row);\n          rows.remove(row);\n          target.prependJavaScript(prependJavascriptBuf.toString());\n        }\n\n        @Override\n        protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n        {\n          target.add(feedbackPanel.setVisible(true));\n        }\n      };\n      deleteRowButton.setDefaultFormProcessing(false);\n      row.add(new IconButtonPanel(\"deleteEntry\", deleteRowButton, IconType.TRASH, null).setLight());\n    } else {\n      // Don't show a delete button.\n      row.add(new Label(\"deleteEntry\", \"&nbsp;\").setEscapeModelStrings(false).setRenderBodyOnly(true));\n    }\n    return row;\n  }\n\n  private KostZuweisungDO addZuweisung(final AbstractRechnungsPositionDO position)\n  {\n    final KostZuweisungDO kostZuweisung = new KostZuweisungDO();\n    position.addKostZuweisung(kostZuweisung);\n    if (kostZuweisung.getIndex() > 0) {\n      final KostZuweisungDO predecessor = position.getKostZuweisung(kostZuweisung.getIndex() - 1);\n      if (predecessor != null) {\n        kostZuweisung.setKost1(predecessor.getKost1()); // Preset kost1 from the predecessor position.\n        kostZuweisung.setKost2(predecessor.getKost2()); // Preset kost2 from the predecessor position.\n      }\n    }\n    if (RechnungsPositionDO.class.isAssignableFrom(position.getClass()) == true && kostZuweisung.getKost2() == null) {\n      // Preset kost2 with first kost2 found for the projekt.\n      final RechnungsPositionDO rechnungsPosition = (RechnungsPositionDO) position;\n      if (rechnungsPosition != null) {\n        final RechnungDO rechnung = rechnungsPosition.getRechnung();\n        if (rechnung != null) {\n          final ProjektDO project = rechnung.getProjekt();\n          if (project != null) {\n            final List<Kost2DO> kost2List = kost2Dao.getActiveKost2(project);\n            if (CollectionUtils.isNotEmpty(kost2List) == true) {\n              kostZuweisung.setKost2(kost2List.get(0));\n            }\n          }\n        }\n      }\n    }\n    kostZuweisung.setNetto(position.getKostZuweisungNetFehlbetrag().negate());\n    return kostZuweisung;\n  }\n\n  /**\n   * @return the form\n   */\n  public Form<AbstractRechnungsPositionDO> getForm()\n  {\n    return form;\n  }\n}\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.mobile;\n\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.SubmitLink;\nimport org.apache.wicket.markup.html.panel.FeedbackPanel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.projectforge.core.AbstractBaseDO;\nimport org.projectforge.web.wicket.mobileflowlayout.MobileGridBuilder;\n\npublic abstract class AbstractMobileEditForm<O extends AbstractBaseDO< ? >, P extends AbstractMobileEditPage< ? , ? , ? >> extends\nAbstractMobileForm<O, P>\n{\n  private static final long serialVersionUID = 1836099012618517190L;\n\n  protected O data;\n\n  protected MobileGridBuilder gridBuilder;\n\n  public AbstractMobileEditForm(final P parentPage, final O data)\n  {\n    super(parentPage);\n    this.data = data;\n  }\n\n  public O getData()\n  {\n    return this.data;\n  }\n\n  public void setData(final O data)\n  {\n    this.data = data;\n  }\n\n  public boolean isNew()\n  {\n    return this.data == null || this.data.getId() == null;\n  }\n\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(new FeedbackPanel(\"feedback\").setOutputMarkupId(true));\n    final SubmitLink submitButton = new SubmitLink(\"submitButton\") {\n      @Override\n      public final void onSubmit()\n      {\n        parentPage.save();\n      }\n    };\n    final RepeatingView flowform = new RepeatingView(\"flowform\");\n    add(flowform);\n    gridBuilder = newGridBuilder(flowform);\n\n    add(submitButton);\n    if (isNew() == true) {\n      submitButton.add(new Label(\"label\", getString(\"create\")));\n    } else {\n      submitButton.add(new Label(\"label\", getString(\"update\")));\n    }\n  }\n}\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\" />\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\" />\n</head>\n\n<body>\n\n  <div id=\"topbar\">\n    <div id=\"title\">ProjectForge - Edit</div>\n  </div>\n  <wicket:extend>\n    <div id=\"content\">\n      <form wicket:id=\"form\" autocomplete=\"off\">\n        <div wicket:id=\"feedback\">[feedback]</div>\n        <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n        <wicket:child />\n        <p>\n          <a wicket:id=\"submitButton\" rel=\"external\" data-role=\"button\"><wicket:container wicket:id=\"label\">[create or update]</wicket:container></a>\n        </p>\n      </form>\n    </div>\n  </wicket:extend>\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.mobile;\n\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.PropertyModel;\nimport org.projectforge.core.BaseSearchFilter;\n\npublic abstract class AbstractMobileListForm<F extends BaseSearchFilter, P extends AbstractMobileListPage< ? , ? , ? >> extends\nAbstractMobileForm<AbstractMobileListForm< ? , ? >, AbstractMobileListPage< ? , ? , ? >>\n{\n  private static final long serialVersionUID = -2521426347126048630L;\n\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(AbstractMobileListForm.class);\n\n  protected F filter;\n\n  @SuppressWarnings(\"unchecked\")\n  public AbstractMobileListForm(final AbstractMobileListPage< ? , ? , ? > parentPage)\n  {\n    super(parentPage);\n    final String userPrefFilterKey = this.getClass().getSimpleName() + \".filter\";\n    try {\n      filter = (F) parentPage.getUserPrefEntry(userPrefFilterKey);\n    } catch (final ClassCastException ex) {\n      log.info(\"Could not restore filter from user prefs (OK, probably new software release): \" + userPrefFilterKey);\n    }\n    if (filter == null) {\n      filter = newFilter();\n      parentPage.putUserPrefEntry(userPrefFilterKey, filter, true);\n    }\n  }\n\n  protected void init()\n  {\n    add(new TextField<String>(\"searchField\", new PropertyModel<String>(filter, \"searchString\")).add(AttributeModifier.replace(\n        \"placeholder\", getString(\"search\"))));\n  }\n\n  protected abstract F newFilter();\n}\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\" />\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\" />\n</head>\n\n<body>\n<wicket:extend>\n  <form wicket:id=\"form\" autocomplete=\"off\">\n  <div data-role=\"fieldcontain\" id=\"searchfield\"><input type=\"text\" data-type=\"search\" wicket:id=\"searchField\" id=\"search\" placeholder=\"Suche\" /></div>\n  </form>\n  <wicket:container wicket:id=\"listViewPage\">\n  </wicket:container>\n</wicket:extend>\n</body>\n</html>\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.task;\n\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.projectforge.task.TaskFilter;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.WebConstants;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.bootstrap.GridSize;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.CheckBoxPanel;\nimport org.projectforge.web.wicket.flowlayout.DivPanel;\nimport org.projectforge.web.wicket.flowlayout.FieldSetIconPosition;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.IconPanel;\nimport org.projectforge.web.wicket.flowlayout.IconType;\nimport org.projectforge.web.wicket.flowlayout.InputPanel;\nimport org.projectforge.web.wicket.flowlayout.MyComponentsRepeater;\n\npublic class TaskTreeForm extends AbstractForm<TaskFilter, TaskTreePage>\n{\n  private static final long serialVersionUID = -203572415793301622L;\n\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TaskTreeForm.class);\n\n  private TaskFilter searchFilter;\n\n  private MyComponentsRepeater<Component> actionButtons;\n\n  private SingleButtonPanel cancelButtonPanel;\n\n  private SingleButtonPanel resetButtonPanel;\n\n  private SingleButtonPanel listViewButtonPanel;\n\n  private SingleButtonPanel searchButtonPanel;\n\n  protected GridBuilder gridBuilder;\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    super.init();\n    add(createFeedbackPanel());\n    gridBuilder = newGridBuilder(this, \"flowform\");\n    {\n      gridBuilder.newSplitPanel(GridSize.COL50);\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"searchFilter\"));\n      final TextField<String> searchField = new TextField<String>(InputPanel.WICKET_ID, new PropertyModel<String>(getSearchFilter(),\n          \"searchString\"));\n      searchField.add(WicketUtils.setFocus());\n      fs.add(new InputPanel(fs.newChildId(), searchField));\n      fs.add(new IconPanel(fs.newIconChildId(), IconType.HELP, getString(\"tooltip.lucene.link\")).setOnClickLocation(getRequestCycle(),\n          WebConstants.DOC_LINK_HANDBUCH_LUCENE, true), FieldSetIconPosition.TOP_RIGHT);\n    }\n    {\n      gridBuilder.newSplitPanel(GridSize.COL50);\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"label.options\")).suppressLabelForWarning();\n      final DivPanel checkBoxPanel = fs.addNewCheckBoxDiv();\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"notOpened\"),\n          getString(\"task.status.notOpened\")));\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"opened\"),\n          getString(\"task.status.opened\")));\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"closed\"),\n          getString(\"task.status.closed\")));\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"deleted\"),\n          getString(\"deleted\")));\n    }\n\n    actionButtons = new MyComponentsRepeater<Component>(\"actionButtons\");\n    add(actionButtons.getRepeatingView());\n    {\n      final Button cancelButton = new Button(\"button\", new Model<String>(\"cancel\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onCancelSubmit();\n        }\n      };\n      cancelButton.setDefaultFormProcessing(false);\n      cancelButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), cancelButton, getString(\"cancel\"), SingleButtonPanel.CANCEL);\n      actionButtons.add(cancelButtonPanel);\n    }\n    {\n      final Button resetButton = new Button(\"button\", new Model<String>(\"reset\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onResetSubmit();\n        }\n      };\n      resetButton.setDefaultFormProcessing(false);\n      resetButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), resetButton, getString(\"reset\"), SingleButtonPanel.RESET);\n      actionButtons.add(resetButtonPanel);\n    }\n    {\n      final Button listViewButton = new Button(\"button\", new Model<String>(\"listView\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onListViewSubmit();\n        }\n      };\n\n      listViewButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), listViewButton, getString(\"listView\"), SingleButtonPanel.NORMAL);\n      actionButtons.add(listViewButtonPanel);\n    }\n    {\n      final Button searchButton = new Button(\"button\", new Model<String>(\"search\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onSearchSubmit();\n        }\n      };\n      searchButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), searchButton, getString(\"search\"),\n          SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(searchButtonPanel);\n      setDefaultButton(searchButton);\n    }\n    setComponentsVisibility();\n  }\n\n  public TaskTreeForm(final TaskTreePage parentPage)\n  {\n    super(parentPage);\n  }\n\n  @Override\n  public void onBeforeRender()\n  {\n    super.onBeforeRender();\n    actionButtons.render();\n  }\n\n  protected void setComponentsVisibility()\n  {\n    if (parentPage.isSelectMode() == false) {\n      // Show cancel button only in select mode.\n      cancelButtonPanel.setVisible(false);\n    }\n    searchButtonPanel.setVisible(true);\n    resetButtonPanel.setVisible(true);\n  }\n\n  public TaskFilter getSearchFilter()\n  {\n    if (this.searchFilter == null) {\n      final Object filter = getParentPage().getUserPrefEntry(TaskListForm.class.getName() + \":Filter\");\n      if (filter != null) {\n        try {\n          this.searchFilter = (TaskFilter) filter;\n        } catch (final ClassCastException ex) {\n          // Probably a new software release results in an incompability of old and new filter format.\n          log.info(\"Could not restore filter from user prefs: (old) filter type \"\n              + filter.getClass().getName()\n              + \" is not assignable to (new) filter type TaskFilter (OK, probably new software release).\");\n        }\n      }\n    }\n    if (this.searchFilter == null) {\n      this.searchFilter = new TaskFilter();\n      getParentPage().putUserPrefEntry(TaskListForm.class.getName() + \":Filter\", this.searchFilter, true);\n    }\n    return this.searchFilter;\n  }\n\n  @Override\n  protected void onSubmit()\n  {\n    super.onSubmit();\n    parentPage.refresh();\n  }\n\n  @SuppressWarnings(\"serial\")\n  private class MyCheckBoxPanel extends CheckBoxPanel\n  {\n    public MyCheckBoxPanel(final String id, final IModel<Boolean> model, final String labelString)\n    {\n      super(id, model, labelString);\n    }\n\n    @Override\n    protected boolean wantOnSelectionChangedNotifications()\n    {\n      return true;\n    }\n\n    @Override\n    protected void onSelectionChanged(final Boolean newSelection)\n    {\n      parentPage.refresh();\n    }\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:extend>\n    <script>\n\t\t\t\t\tfunction updateEvenOdd() {\n\t\t\t\t\t\t$(\"tr:odd:not(.headers)\").removeClass('even').addClass(\n\t\t\t\t\t\t\t\t'odd');\n\t\t\t\t\t\t$(\"tr:even:not(.headers)\").removeClass('odd').addClass(\n\t\t\t\t\t\t\t\t'even');\n\t\t\t\t\t}\n\t\t\t\t</script>\n\n    <form wicket:id=\"form\" autocomplete=\"off\">\n      <div wicket:id=\"feedback\"></div>\n\n      <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n\n      <div class=\"button_bar\">\n        <wicket:container wicket:id=\"actionButtons\">[cancel] [search]</wicket:container>\n      </div>\n      <div wicket:id=\"tree\">[tree]</div>\n    </form>\n    <div class=\"alert alert-info\" wicket:id=\"info\">[Click on row to select one task.]</div>\n  </wicket:extend>\n\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.wicket;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.Session;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.HiddenField;\nimport org.apache.wicket.model.Model;\nimport org.projectforge.core.InternalErrorException;\n\n/**\n * Every form should use this handler for preventing cross site request forgery attacks.\n * @author Kai Reinhard (k.reinhard@micromata.de)\n * \n */\npublic class CsrfTokenHandler implements Serializable\n{\n  private static final long serialVersionUID = -9129345307409567900L;\n\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(CsrfTokenHandler.class);\n\n  private HiddenField<String> csrfTokenField;\n\n  /**\n   * The given form should contain a hidden field named 'csrfToken'.\n   * @param form\n   */\n  public CsrfTokenHandler(final Form< ? > form)\n  {\n    form.add(csrfTokenField = new HiddenField<String>(\"csrfToken\", Model.of(getCsrfSessionToken())));\n  }\n\n  /**\n   * This parameter should be set as hidden field in every formular and should be tested on every submit action for preventing CSRF attacks.\n   * @return the randomized cross site request forgery token.\n   */\n  private String getCsrfSessionToken()\n  {\n    final MySession session = (MySession) Session.get();\n    return session.getCsrfToken();\n  }\n\n  /**\n   * Checks the cross site request forgery token (as posted hidden field) and if it doesn't match an exception is thrown.\n   * @see org.apache.wicket.markup.html.form.Form#onSubmit()\n   */\n  public void onSubmit()\n  {\n    final String sessionCsrfToken = getCsrfSessionToken();\n    final String postedCsrfToken = this.csrfTokenField.getInput();\n    if (StringUtils.equals(sessionCsrfToken, postedCsrfToken) == false) {\n      log.error(\"Cross site request forgery alert. csrf token doesn't match! session csrf token=\"\n          + sessionCsrfToken\n          + \", posted csrf token=\"\n          + postedCsrfToken);\n      throw new InternalErrorException(\"errorpage.csrfError\");\n    }\n  }\n}\n", "<wicket:panel xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n  <div class=\"pf_dnd\" wicket:id=\"main\">\n    <input type=\"file\" id=\"fileselect\" class=\"pf_fileselect\" />\n    <div class=\"pf_filedrag\"><wicket:message key=\"drop\" /></div>\n    <form wicket:id=\"hiddenForm\" class=\"pf_hiddenForm\">\n      <textarea class=\"pf_text\" wicket:id=\"importString\"></textarea>\n      <textarea class=\"pf_name\" wicket:id=\"importFileName\"></textarea>\n      <input type=\"submit\" class=\"pf_submit\" wicket:id=\"submitButton\" />\n    </form>\n  </div>\n</wicket:panel>\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.wicket.components;\n\nimport java.io.Serializable;\n\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextArea;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.CompoundPropertyModel;\nimport org.projectforge.web.wicket.WicketUtils;\n\n/**\n * The panel which includes the drop behavior for several files. If the dropped file (string) was sucessfully importet, the hook method\n * {@link #onStringImport(AjaxRequestTarget, String, String)} is called.\n * \n * @author Johannes Unterstein (j.unterstein@micromata.de)\n * \n */\npublic abstract class DropFileContainer extends Panel\n{\n  private static final long serialVersionUID = 3622467918922963503L;\n\n  private final WebMarkupContainer main;\n  private final String mimeType;\n\n  /**\n   * @param id\n   */\n  public DropFileContainer(final String id)\n  {\n    this(id, null);\n  }\n\n  public DropFileContainer(final String id, final String mimeType) {\n    super(id);\n    this.mimeType = mimeType;\n    main = new WebMarkupContainer(\"main\");\n    add(main);\n  }\n\n  /**\n   * @see org.apache.wicket.Component#onInitialize()\n   */\n  @Override\n  protected void onInitialize()\n  {\n    super.onInitialize();\n    final Form<FormBean> hiddenForm = new Form<FormBean>(\"hiddenForm\", new CompoundPropertyModel<FormBean>(new FormBean()));\n    hiddenForm.add(AttributeModifier.replace(\"data-mimetype\", mimeType));\n    main.add(hiddenForm);\n    hiddenForm.add(new TextArea<String>(\"importString\"));\n    hiddenForm.add(new TextArea<String>(\"importFileName\"));\n    hiddenForm.add(new AjaxSubmitLink(\"submitButton\") {\n      private static final long serialVersionUID = 6140567784494429257L;\n\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        final FormBean modelObject = hiddenForm.getModel().getObject();\n        onStringImport(target, modelObject.importFileName, modelObject.importString);\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        // nothing to do here\n      }\n\n    });\n  }\n\n  /**\n   * @param content\n   * @return this for chaining.\n   */\n  public DropFileContainer setTooltip(final String content)\n  {\n    WicketUtils.addTooltip(main, content);\n    return this;\n  }\n\n  /**\n   * @param title\n   * @param content\n   * @return this for chaining.\n   */\n  public DropFileContainer setTooltip(final String title, final String content)\n  {\n    WicketUtils.addTooltip(main, title, content);\n    return this;\n  }\n\n  protected abstract void onStringImport(final AjaxRequestTarget target, final String filename, final String content);\n\n  /**\n   * Just the form model\n   * \n   */\n  private class FormBean implements Serializable\n  {\n    private static final long serialVersionUID = 4250094235574838882L;\n\n    private String importString;\n\n    private String importFileName;\n  }\n}\n"], "fixing_code": ["/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.admin;\n\nimport java.util.TimeZone;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.PasswordTextField;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.apache.wicket.spring.injection.annot.SpringBean;\nimport org.apache.wicket.validation.IValidatable;\nimport org.apache.wicket.validation.IValidator;\nimport org.projectforge.core.Configuration;\nimport org.projectforge.core.ConfigurationDO;\nimport org.projectforge.database.InitDatabaseDao;\nimport org.projectforge.user.UserDao;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.MaxLengthTextField;\nimport org.projectforge.web.wicket.components.RequiredMaxLengthTextField;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.components.TimeZonePanel;\nimport org.projectforge.web.wicket.flowlayout.DivPanel;\nimport org.projectforge.web.wicket.flowlayout.DivType;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.InputPanel;\nimport org.projectforge.web.wicket.flowlayout.ParTextPanel;\nimport org.projectforge.web.wicket.flowlayout.PasswordPanel;\nimport org.projectforge.web.wicket.flowlayout.RadioGroupPanel;\n\npublic class SetupForm extends AbstractForm<SetupForm, SetupPage>\n{\n  private static final long serialVersionUID = -277853572580468505L;\n\n  private static final String MAGIC_PASSWORD = \"******\";\n\n  @SpringBean(name = \"userDao\")\n  private UserDao userDao;\n\n  private final SetupTarget setupMode = SetupTarget.TEST_DATA;\n\n  private final TimeZone timeZone = TimeZone.getDefault();\n\n  private String sysopEMail;\n\n  private String feedbackEMail;\n\n  private String calendarDomain;\n\n  private final String adminUsername = InitDatabaseDao.DEFAULT_ADMIN_USER;\n\n  // @SuppressWarnings(\"unused\")\n  // private String organization;\n\n  @SuppressWarnings(\"unused\")\n  private String password;\n\n  @SuppressWarnings(\"unused\")\n  private String passwordRepeat;\n\n  private String encryptedPassword;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private final CsrfTokenHandler csrfTokenHandler;\n\n  public SetupForm(final SetupPage parentPage)\n  {\n    super(parentPage, \"setupform\");\n    csrfTokenHandler = new CsrfTokenHandler(this);\n  }\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(createFeedbackPanel());\n    final GridBuilder gridBuilder = newGridBuilder(this, \"flowform\");\n    gridBuilder.newFormHeading(getString(\"administration.setup.heading\"));\n    final DivPanel panel = gridBuilder.getPanel();\n    panel.add(new ParTextPanel(panel.newChildId(), getString(\"administration.setup.heading.subtitle\")));\n    {\n      // RadioChoice mode\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.setup.target\"));\n      final DivPanel radioPanel = new DivPanel(fs.newChildId(), DivType.RADIOBOX);\n      fs.add(radioPanel);\n      fs.setLabelFor(radioPanel);\n      final RadioGroupPanel<SetupTarget> radioGroup = new RadioGroupPanel<SetupTarget>(radioPanel.newChildId(), \"setuptarget\",\n          new PropertyModel<SetupTarget>(this, \"setupMode\"));\n      radioPanel.add(radioGroup);\n      for (final SetupTarget target : SetupTarget.values()) {\n        radioGroup.add(new Model<SetupTarget>(target), getString(target.getI18nKey()), getString(target.getI18nKey() + \".tooltip\"));\n      }\n    }\n    // final RequiredMaxLengthTextField organizationField = new RequiredMaxLengthTextField(this, \"organization\", getString(\"organization\"),\n    // new PropertyModel<String>(this, \"organization\"), 100);\n    // add(organizationField);\n    {\n      // User name\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"username\"));\n      fs.add(new RequiredMaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this, \"adminUsername\"), 100));\n    }\n    final PasswordTextField passwordField = new PasswordTextField(PasswordPanel.WICKET_ID, new PropertyModel<String>(this, \"password\")) {\n      @Override\n      protected void onComponentTag(final ComponentTag tag)\n      {\n        super.onComponentTag(tag);\n        if (encryptedPassword == null) {\n          tag.put(\"value\", \"\");\n        } else if (StringUtils.isEmpty(getConvertedInput()) == false) {\n          tag.put(\"value\", MAGIC_PASSWORD);\n        }\n      }\n    };\n    {\n      // Password\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"password\"));\n      passwordField.setRequired(true); // No setReset(true), otherwise uploading and re-entering passwords is a real pain.\n      fs.add(passwordField);\n      WicketUtils.setFocus(passwordField);\n    }\n    {\n      // Password repeat\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"passwordRepeat\"));\n      final PasswordTextField passwordRepeatField = new PasswordTextField(PasswordPanel.WICKET_ID, new PropertyModel<String>(this,\n          \"passwordRepeat\")) {\n        @Override\n        protected void onComponentTag(final ComponentTag tag)\n        {\n          super.onComponentTag(tag);\n          if (encryptedPassword == null) {\n            tag.put(\"value\", \"\");\n          } else if (StringUtils.isEmpty(getConvertedInput()) == false) {\n            tag.put(\"value\", MAGIC_PASSWORD);\n          }\n        }\n      };\n      passwordRepeatField.setRequired(true); // No setReset(true), otherwise uploading and re-entering passwords is a real pain.\n      passwordRepeatField.add(new IValidator<String>() {\n        @Override\n        public void validate(final IValidatable<String> validatable)\n        {\n          final String input = validatable.getValue();\n          final String passwordInput = passwordField.getConvertedInput();\n          if (StringUtils.equals(input, passwordInput) == false) {\n            passwordRepeatField.error(getString(\"user.error.passwordAndRepeatDoesNotMatch\"));\n            encryptedPassword = null;\n            return;\n          }\n          if (MAGIC_PASSWORD.equals(passwordInput) == false || encryptedPassword == null) {\n            final String errorMsgKey = userDao.checkPasswordQuality(passwordInput);\n            if (errorMsgKey != null) {\n              encryptedPassword = null;\n              passwordField.error(getString(errorMsgKey));\n            } else {\n              encryptedPassword = userDao.encryptPassword(passwordInput);\n            }\n          }\n        }\n      });\n      fs.add(passwordRepeatField);\n    }\n    {\n      // Time zone\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.timezone\"));\n      final TimeZonePanel timeZone = new TimeZonePanel(fs.newChildId(), new PropertyModel<TimeZone>(this, \"timeZone\"));\n      fs.setLabelFor(timeZone);\n      fs.add(timeZone);\n      fs.addHelpIcon(getString(\"administration.configuration.param.timezone.description\"));\n    }\n    {\n      // Calendar domain\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.calendarDomain\"));\n      final RequiredMaxLengthTextField textField = new RequiredMaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this,\n          \"calendarDomain\"), ConfigurationDO.PARAM_LENGTH);\n      fs.add(textField);\n      textField.add(new IValidator<String>() {\n        @Override\n        public void validate(final IValidatable<String> validatable)\n        {\n          if (Configuration.isDomainValid(validatable.getValue()) == false) {\n            textField.error(getString(\"validation.error.generic\"));\n          }\n        }\n      });\n      fs.addHelpIcon(getString(\"administration.configuration.param.calendarDomain.description\"));\n    }\n    {\n      // E-Mail sysops\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.systemAdministratorEMail.label\"),\n          getString(\"email\"));\n      fs.add(new MaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this, \"sysopEMail\"), ConfigurationDO.PARAM_LENGTH));\n      fs.addHelpIcon(getString(\"administration.configuration.param.systemAdministratorEMail.description\"));\n    }\n    {\n      // E-Mail sysops\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.configuration.param.feedbackEMail.label\"),\n          getString(\"email\"));\n      fs.add(new MaxLengthTextField(InputPanel.WICKET_ID, new PropertyModel<String>(this, \"feedbackEMail\"), ConfigurationDO.PARAM_LENGTH));\n      fs.addHelpIcon(getString(\"administration.configuration.param.feedbackEMail.description\"));\n    }\n    final RepeatingView actionButtons = new RepeatingView(\"buttons\");\n    add(actionButtons);\n    {\n      final Button finishButton = new Button(SingleButtonPanel.WICKET_ID, new Model<String>(\"finish\")) {\n        @Override\n        public final void onSubmit()\n        {\n          csrfTokenHandler.onSubmit();\n          parentPage.finishSetup();\n        }\n      };\n      final SingleButtonPanel finishButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), finishButton,\n          getString(\"administration.setup.finish\"), SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(finishButtonPanel);\n      setDefaultButton(finishButton);\n    }\n  }\n\n  @Override\n  protected void onSubmit()\n  {\n    super.onSubmit();\n    csrfTokenHandler.onSubmit();\n  }\n\n  public SetupTarget getSetupMode()\n  {\n    return setupMode;\n  }\n\n  public TimeZone getTimeZone()\n  {\n    return timeZone;\n  }\n\n  /**\n   * @return the calendarDomain\n   */\n  public String getCalendarDomain()\n  {\n    return calendarDomain;\n  }\n\n  public String getSysopEMail()\n  {\n    return sysopEMail;\n  }\n\n  public String getFeedbackEMail()\n  {\n    return feedbackEMail;\n  }\n\n  public String getEncryptedPassword()\n  {\n    return encryptedPassword;\n  }\n\n  public String getAdminUsername()\n  {\n    return adminUsername;\n  }\n}\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.admin;\n\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.upload.FileUploadField;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.util.lang.Bytes;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.FileUploadPanel;\n\npublic class SetupImportForm extends AbstractForm<SetupImportForm, SetupPage>\n{\n  private static final long serialVersionUID = -277853572580468505L;\n\n  protected FileUploadField fileUploadField;\n\n  protected String filename;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private final CsrfTokenHandler csrfTokenHandler;\n\n  public SetupImportForm(final SetupPage parentPage)\n  {\n    super(parentPage, \"importform\");\n    initUpload(Bytes.megabytes(100));\n    csrfTokenHandler = new CsrfTokenHandler(this);\n  }\n\n  @Override\n  protected void onSubmit()\n  {\n    super.onSubmit();\n    csrfTokenHandler.onSubmit();\n  }\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(createFeedbackPanel());\n    final GridBuilder gridBuilder = newGridBuilder(this, \"flowform\");\n    gridBuilder.newFormHeading(getString(\"import\"));\n    {\n      // Upload dump file\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"administration.setup.dumpFile\"));\n      fileUploadField = new FileUploadField(FileUploadPanel.WICKET_ID);\n      fs.add(new FileUploadPanel(fs.newChildId(), fileUploadField));\n    }\n    final RepeatingView actionButtons = new RepeatingView(\"buttons\");\n    add(actionButtons);\n    {\n      final Button importButton = new Button(SingleButtonPanel.WICKET_ID, new Model<String>(\"import\")) {\n        @Override\n        public final void onSubmit()\n        {\n          parentPage.upload();\n        }\n      };\n      final SingleButtonPanel importButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), importButton, getString(\"import\"),\n          SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(importButtonPanel);\n    }\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:extend>\n    <div class=\"tabbable\">\n      <ul class=\"nav nav-tabs\">\n        <li class=\"active\"><a href=\"#setupform\" data-toggle=\"tab\"><wicket:message key=\"administration.setup\" /></a></li>\n        <li><a href=\"#upload\" data-toggle=\"tab\"><wicket:message key=\"import\" /></a></li>\n      </ul>\n    </div>\n    <div class=\"tab-content\">\n      <div id=\"setupform\" class=\"tab-pane active\">\n\n        <div id=\"setupform\" class=\"section\">\n          <form wicket:id=\"setupform\" autocomplete=\"off\">\n            <div wicket:id=\"feedback\"></div>\n            <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n            <div class=\"button_bar\">\n              <wicket:container wicket:id=\"buttons\">[action buttons]</wicket:container>\n            </div>\n            <input type=\"hidden\" wicket:id=\"csrfToken\" />\n          </form>\n        </div>\n      </div>\n\n      <div id=\"upload\" class=\"tab-pane\">\n        <form wicket:id=\"importform\" autocomplete=\"off\">\n          <div wicket:id=\"feedback\"></div>\n          <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n          <div class=\"button_bar\">\n            <wicket:container wicket:id=\"buttons\">[action buttons]</wicket:container>\n          </div>\n          <input type=\"hidden\" wicket:id=\"csrfToken\" />\n        </form>\n      </div>\n    </div>\n  </wicket:extend>\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.admin;\n\nimport java.util.SortedSet;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.projectforge.Version;\nimport org.projectforge.continuousdb.UpdateEntry;\nimport org.projectforge.continuousdb.UpdatePreCheckStatus;\nimport org.projectforge.web.HtmlHelper;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.CheckBoxPanel;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.MyComponentsRepeater;\n\npublic class SystemUpdateForm extends AbstractForm<SystemUpdateForm, SystemUpdatePage>\n{\n  private static final long serialVersionUID = 2492737003121592489L;\n\n  protected WebMarkupContainer scripts;\n\n  public boolean showOldUpdateScripts;\n\n  private GridBuilder gridBuilder;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private final CsrfTokenHandler csrfTokenHandler;\n\n  /**\n   * List to create content menu in the desired order before creating the RepeatingView.\n   */\n  protected MyComponentsRepeater<SingleButtonPanel> actionButtons;\n\n  public SystemUpdateForm(final SystemUpdatePage parentPage)\n  {\n    super(parentPage);\n    csrfTokenHandler = new CsrfTokenHandler(this);\n  }\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(createFeedbackPanel());\n    gridBuilder = newGridBuilder(this, \"flowform\");\n    gridBuilder.newGridPanel();\n    {\n      final FieldsetPanel fs = gridBuilder.newFieldset(\"Show all\");\n      fs.add(new CheckBoxPanel(fs.newChildId(), new PropertyModel<Boolean>(this, \"showOldUpdateScripts\"), null, true) {\n        /**\n         * @see org.projectforge.web.wicket.flowlayout.CheckBoxPanel#onSelectionChanged(java.lang.Boolean)\n         */\n        @Override\n        protected void onSelectionChanged(final Boolean newSelection)\n        {\n          parentPage.refresh();\n        }\n      });\n    }\n    scripts = new WebMarkupContainer(\"scripts\");\n    add(scripts);\n    updateEntryRows();\n\n    actionButtons = new MyComponentsRepeater<SingleButtonPanel>(\"buttons\");\n    add(actionButtons.getRepeatingView());\n    {\n      final Button refreshButton = new Button(SingleButtonPanel.WICKET_ID, new Model<String>(\"refresh\")) {\n        @Override\n        public final void onSubmit()\n        {\n          parentPage.refresh();\n        }\n      };\n      final SingleButtonPanel refreshButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), refreshButton, \"refresh\",\n          SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(refreshButtonPanel);\n      setDefaultButton(refreshButton);\n    }\n  }\n\n  @SuppressWarnings(\"serial\")\n  protected void updateEntryRows()\n  {\n    scripts.removeAll();\n    final RepeatingView scriptRows = new RepeatingView(\"scriptRows\");\n    scripts.add(scriptRows);\n    final SortedSet<UpdateEntry> updateEntries = parentPage.myDatabaseUpdater.getSystemUpdater().getUpdateEntries();\n    if (updateEntries == null) {\n      return;\n    }\n    boolean odd = true;\n    for (final UpdateEntry updateEntry : updateEntries) {\n      if (showOldUpdateScripts == false && updateEntry.getPreCheckStatus() == UpdatePreCheckStatus.ALREADY_UPDATED) {\n        continue;\n      }\n      final Version version = updateEntry.getVersion();\n      final WebMarkupContainer item = new WebMarkupContainer(scriptRows.newChildId());\n      scriptRows.add(item);\n      if (odd == true) {\n        item.add(AttributeModifier.append(\"class\", \"odd\"));\n      } else {\n        item.add(AttributeModifier.append(\"class\", \"even\"));\n      }\n      odd = !odd;\n      item.add(new Label(\"regionId\", updateEntry.getRegionId()));\n      if (updateEntry.isInitial() == true) {\n        item.add(new Label(\"version\", \"initial\"));\n      } else {\n        item.add(new Label(\"version\", version.toString()));\n      }\n      final String description = updateEntry.getDescription();\n      item.add(new Label(\"description\", StringUtils.isBlank(description) == true ? \"\" : description));\n      item.add(new Label(\"date\", updateEntry.getDate()));\n      final String preCheckResult = updateEntry.getPreCheckResult();\n      item.add(new Label(\"preCheckResult\", HtmlHelper.escapeHtml(preCheckResult, true)));\n      if (updateEntry.getPreCheckStatus() == UpdatePreCheckStatus.READY_FOR_UPDATE) {\n        final Button updateButton = new Button(\"button\", new Model<String>(\"update\")) {\n          @Override\n          public final void onSubmit()\n          {\n            parentPage.update(updateEntry);\n          }\n        };\n        item.add(new SingleButtonPanel(\"update\", updateButton, \"update\"));\n      } else {\n        final String runningResult = updateEntry.getRunningResult();\n        item.add(new Label(\"update\", HtmlHelper.escapeHtml(runningResult, true)));\n      }\n    }\n  }\n\n  /**\n   * @see org.projectforge.web.wicket.AbstractForm#onBeforeRender()\n   */\n  @Override\n  public void onBeforeRender()\n  {\n    super.onBeforeRender();\n    actionButtons.render();\n  }\n\n  @Override\n  protected void onSubmit()\n  {\n    super.onSubmit();\n    csrfTokenHandler.onSubmit();\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:extend>\n    <form wicket:id=\"form\" name=\"form\" autocomplete=\"off\">\n      <div class=\"grid_16\">\n        <div wicket:id=\"feedback\">[Validation errors]</div>\n      </div>\n      <div class=\"grid_16\">\n        <h2 class=\"section\" style=\"color: red;\">Important notes</h2>\n        <ol style=\"margin-left: 3em;\">\n          <li style=\"color: red; padding: .5em;\">Please make a backup of your data base before running any of these scripts!</li>\n          <li style=\"padding: .5em;\">Watch the ProjectForge log files for observing the results of the update scripts.</li>\n          <li style=\"padding: .5em;\">In productive installations it's recommended to disable the automatically schema update in the context.xml.</li>\n          <li style=\"color: red; padding: .5em;\">Please redeploy/restart your ProjectForge web application after updating the data-base.</li>\n        </ol>\n        <h3 class=\"section\">Update scripts</h3>\n        <table class=\"dataview\">\n          <thead>\n            <tr class=\"headers\">\n              <th>Region</th>\n              <th title=\"The version to update to.\"><i>Version</i></th>\n              <th>Date</th>\n              <th>Pre-check</th>\n              <th>Result</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            <wicket:container wicket:id=\"scripts\">\n              <tr wicket:id=\"scriptRows\">\n                <td wicket:id=\"regionId\">[ProjectForge]</td>\n                <td wicket:id=\"version\">[3.3.44]</td>\n                <td wicket:id=\"date\">[2011-02-27]</td>\n                <td wicket:id=\"preCheckResult\">[--]</td>\n                <td><span wicket:id=\"update\">[run]</span></td>\n                <td wicket:id=\"description\">[...]</td>\n              </tr>\n            </wicket:container>\n          </tbody>\n        </table>\n      </div>\n      <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n      <div class=\"button_bar\">\n        <wicket:container wicket:id=\"buttons\">[action buttons]</wicket:container>\n      </div>\n      <input type=\"hidden\" wicket:id=\"csrfToken\" />\n    </form>\n  </wicket:extend>\n</body>\n</html>", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:panel>\n    <div class=\"navbar-inner\">\n      <div class=\"container\">\n        <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".navbar-responsive-collapse\"> <span class=\"icon-bar\"></span> <span\n          class=\"icon-bar\"></span> <span class=\"icon-bar\"></span>\n        </a>\n        <div class=\"nav-collapse collapse navbar-responsive-collapse\">\n          <ul class=\"nav pf_sitemap\">\n            <li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><i class=\"icon-sitemap\"></i><span\n                class=\"badge badge-important\" wicket:id=\"totalMenuCounter\">[8]</span><b class=\"caret\"></b></a>\n              <ul class=\"dropdown-menu\">\n                <li class=\"dropdown-submenu\" wicket:id=\"completeMenuCategoryRepeater\"><a href=\"#\"><span wicket:id=\"menuCategoryLabel\">[General]</span><span\n                    class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span></a>\n                  <ul class=\"dropdown-menu\">\n                    <li wicket:id=\"completeSubMenuRepeater\"><a wicket:id=\"link\"><span wicket:id=\"label\">[Addresses]</span><span\n                        class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span></a></li>\n                  </ul></li>\n              </ul></li>\n          </ul>\n          <wicket:container wicket:id=\"menuconfig\"></wicket:container>\n          <div id=\"pf_sortablecontainer\">\n            <ul class=\"nav\" role=\"menu\">\n              <li id=\"pf_newentry\" class=\"pf_disable\"><input type=\"text\" class=\"text\"><a class=\"pf_safenewentry\"><i\n                  class=\"icon-plus-sign\"></i></a></li>\n              <li wicket:id=\"goMobile\"><a href=\"#\" wicket:id=\"link\"><wicket:message key=\"menu.mobileMenu\" /></a></li>\n              <li wicket:id=\"menuRepeater\"><a href=\"#\" wicket:id=\"link\"><span wicket:id=\"label\">[Generic]</span><span\n                  class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span> <b class=\"caret\" wicket:id=\"caret\"></b></a>\n                <ul class=\"dropdown-menu\" wicket:id=\"subMenu\">\n                  <li wicket:id=\"subMenuRepeater\"><a wicket:id=\"link\"><span wicket:id=\"label\">[Addresses]</span><span\n                      class=\"badge badge-important\" wicket:id=\"suffix\">[5]</span></a></li>\n                </ul></li>\n            </ul>\n          </div>\n          <form class=\"navbar-search pull-left\" wicket:id=\"searchForm\" autocomplete=\"off\">\n            <input type=\"text\" class=\"search-query span2\" placeholder=\"Search\" wicket:id=\"searchField\">\n            <input type=\"hidden\" wicket:id=\"csrfToken\" />\n          </form>\n          <ul class=\"nav pull-right\">\n            <li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span wicket:id=\"user\">[Kai Reinhard]</span><b\n                class=\"caret\"></b></a>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"wa/layoutSettings\" wicket:id=\"layoutSettingsMenuLink\"><wicket:message key=\"menu.gear.layoutsettings\" /></a></li>\n                <li><a href=\"wa/feedback\" wicket:id=\"feedbackLink\"><wicket:message key=\"menu.gear.feedback\" /></a></li>\n                <li class=\"divider\"></li>\n                <li><a href=\"#\" wicket:id=\"showBookmarkLink\"><wicket:message key=\"menu.gear.showBookmark\" /></a></li>\n                <li><a wicket:id=\"documentationLink\" href=\"/myAccount\"><wicket:message key=\"menu.documentation\" /></a></li>\n                <li><a wicket:id=\"myAccountLink\" href=\"/myAccount\"><wicket:message key=\"menu.myAccount\" /></a></li>\n                <li><a wicket:id=\"logoutLink\" href=\"/login?logout=true\"><wicket:message key=\"menu.logout\" /></a></li>\n              </ul></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </wicket:panel>\n\n</body>\n</html>\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.core;\n\nimport java.util.Collection;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.AjaxLink;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextArea;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.link.AbstractLink;\nimport org.apache.wicket.markup.html.link.BookmarkablePageLink;\nimport org.apache.wicket.markup.html.link.Link;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.apache.wicket.request.http.WebRequest;\nimport org.apache.wicket.request.http.WebResponse;\nimport org.apache.wicket.request.mapper.parameter.PageParameters;\nimport org.projectforge.access.AccessChecker;\nimport org.projectforge.user.PFUserContext;\nimport org.projectforge.user.UserRights;\nimport org.projectforge.user.UserXmlPreferencesCache;\nimport org.projectforge.web.FavoritesMenu;\nimport org.projectforge.web.LayoutSettingsPage;\nimport org.projectforge.web.LoginPage;\nimport org.projectforge.web.MenuEntry;\nimport org.projectforge.web.core.menuconfig.MenuConfig;\nimport org.projectforge.web.dialog.ModalDialog;\nimport org.projectforge.web.doc.DocumentationPage;\nimport org.projectforge.web.mobile.MenuMobilePage;\nimport org.projectforge.web.user.ChangePasswordPage;\nimport org.projectforge.web.user.MyAccountEditPage;\nimport org.projectforge.web.wicket.AbstractSecuredPage;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.FeedbackPage;\nimport org.projectforge.web.wicket.MySession;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\n\n/**\n * Displays the favorite menu.\n * @author Kai Reinhard (k.reinhard@micromata.de)\n */\npublic class NavTopPanel extends NavAbstractPanel\n{\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(NavTopPanel.class);\n\n  private static final long serialVersionUID = -7858806882044188339L;\n\n  private FavoritesMenu favoritesMenu;\n\n  private final AccessChecker accessChecker;\n\n  private final UserXmlPreferencesCache userXmlPreferencesCache;\n\n  private BookmarkDialog bookmarkDialog;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private CsrfTokenHandler csrfTokenHandler;\n\n  public NavTopPanel(final String id, final UserXmlPreferencesCache userXmlPreferencesCache, final AccessChecker accessChecker)\n  {\n    super(id);\n    this.userXmlPreferencesCache = userXmlPreferencesCache;\n    this.accessChecker = accessChecker;\n  }\n\n  public void init(final AbstractSecuredPage page)\n  {\n    getMenu();\n    this.favoritesMenu = FavoritesMenu.get();\n    final WebMarkupContainer goMobile = new WebMarkupContainer(\"goMobile\");\n    add(goMobile);\n    if (page.getMySession().isMobileUserAgent() == true) {\n      goMobile.add(new BookmarkablePageLink<Void>(\"link\", MenuMobilePage.class));\n    } else {\n      goMobile.setVisible(false);\n    }\n    final BookmarkablePageLink<Void> layoutSettingsMenuLink = new BookmarkablePageLink<Void>(\"layoutSettingsMenuLink\",\n        LayoutSettingsPage.class);\n    if (UserRights.getAccessChecker().isRestrictedUser() == true) {\n      // Not visibible for restricted users:\n      layoutSettingsMenuLink.setVisible(false);\n    }\n    add(new MenuConfig(\"menuconfig\", getMenu(), favoritesMenu));\n    @SuppressWarnings(\"serial\")\n    final Form<String> searchForm = new Form<String>(\"searchForm\") {\n      private String searchString;\n\n      /**\n       * @see org.apache.wicket.markup.html.form.Form#onSubmit()\n       */\n      @Override\n      protected void onSubmit()\n      {\n        csrfTokenHandler.onSubmit();\n        if (StringUtils.isNotBlank(searchString) == true) {\n          final SearchPage searchPage = new SearchPage(new PageParameters(), searchString);\n          setResponsePage(searchPage);\n        }\n        super.onSubmit();\n      }\n    };\n    csrfTokenHandler = new CsrfTokenHandler(searchForm);\n    add(searchForm);\n    final TextField<String> searchField = new TextField<String>(\"searchField\", new PropertyModel<String>(searchForm, \"searchString\"));\n    WicketUtils.setPlaceHolderAttribute(searchField, getString(\"search.search\"));\n    searchForm.add(searchField);\n    add(layoutSettingsMenuLink);\n    add(new BookmarkablePageLink<Void>(\"feedbackLink\", FeedbackPage.class));\n    {\n      @SuppressWarnings(\"serial\")\n      final AjaxLink<Void> showBookmarkLink = new AjaxLink<Void>(\"showBookmarkLink\") {\n        /**\n         * @see org.apache.wicket.ajax.markup.html.AjaxLink#onClick(org.apache.wicket.ajax.AjaxRequestTarget)\n         */\n        @Override\n        public void onClick(final AjaxRequestTarget target)\n        {\n          bookmarkDialog.open(target);\n          // Redraw the content:\n          bookmarkDialog.redraw().addContent(target);\n        }\n      };\n      add(showBookmarkLink);\n      addBookmarkDialog();\n    }\n    {\n      add(new Label(\"user\", PFUserContext.getUser().getFullname()));\n      if (accessChecker.isRestrictedUser() == true) {\n        // Show ChangePaswordPage as my account for restricted users.\n        final BookmarkablePageLink<Void> changePasswordLink = new BookmarkablePageLink<Void>(\"myAccountLink\", ChangePasswordPage.class);\n        add(changePasswordLink);\n      } else {\n        final BookmarkablePageLink<Void> myAccountLink = new BookmarkablePageLink<Void>(\"myAccountLink\", MyAccountEditPage.class);\n        add(myAccountLink);\n      }\n      final BookmarkablePageLink<Void> documentationLink = new BookmarkablePageLink<Void>(\"documentationLink\", DocumentationPage.class);\n      add(documentationLink);\n\n      @SuppressWarnings(\"serial\")\n      final Link<String> logoutLink = new Link<String>(\"logoutLink\") {\n        @Override\n        public void onClick()\n        {\n          LoginPage.logout((MySession) getSession(), (WebRequest) getRequest(), (WebResponse) getResponse(), userXmlPreferencesCache);\n          setResponsePage(LoginPage.class);\n        };\n      };\n      add(logoutLink);\n    }\n    addCompleteMenu();\n    addFavoriteMenu();\n  }\n\n  @SuppressWarnings(\"serial\")\n  private void addCompleteMenu()\n  {\n    final Label totalMenuSuffixLabel = new MenuSuffixLabel(\"totalMenuCounter\", new Model<Integer>() {\n      @Override\n      public Integer getObject()\n      {\n        int counter = 0;\n        if (menu.getMenuEntries() == null) {\n          return counter;\n        }\n        for (final MenuEntry menuEntry : menu.getMenuEntries()) {\n          final IModel<Integer> newCounterModel = menuEntry.getNewCounterModel();\n          if (newCounterModel != null && newCounterModel.getObject() != null) {\n            counter += newCounterModel.getObject();\n          }\n        }\n        return counter;\n      };\n    });\n    add(totalMenuSuffixLabel);\n\n    final RepeatingView completeMenuCategoryRepeater = new RepeatingView(\"completeMenuCategoryRepeater\");\n    add(completeMenuCategoryRepeater);\n    if (menu.getMenuEntries() != null) {\n      for (final MenuEntry menuEntry : menu.getMenuEntries()) {\n        if (menuEntry.getSubMenuEntries() == null) {\n          continue;\n        }\n        // Now we add a new menu area (title with sub menus):\n        final WebMarkupContainer categoryContainer = new WebMarkupContainer(completeMenuCategoryRepeater.newChildId());\n        completeMenuCategoryRepeater.add(categoryContainer);\n        categoryContainer.add(new Label(\"menuCategoryLabel\", getString(menuEntry.getI18nKey())));\n        final Label areaSuffixLabel = getSuffixLabel(menuEntry);\n        categoryContainer.add(areaSuffixLabel);\n\n        // final WebMarkupContainer subMenuContainer = new WebMarkupContainer(\"subMenu\");\n        // categoryContainer.add(subMenuContainer);\n        if (menuEntry.hasSubMenuEntries() == false) {\n          // subMenuContainer.setVisible(false);\n          continue;\n        }\n\n        final RepeatingView completeSubMenuRepeater = new RepeatingView(\"completeSubMenuRepeater\");\n        categoryContainer.add(completeSubMenuRepeater);\n        for (final MenuEntry subMenuEntry : menuEntry.getSubMenuEntries()) {\n          if (subMenuEntry.getSubMenuEntries() != null) {\n            log.error(\"Oups: sub sub menus not supported: \" + menuEntry.getId() + \" has child menus which are ignored.\");\n          }\n          // Now we add the next menu entry to the area:\n          final WebMarkupContainer subMenuItem = new WebMarkupContainer(completeSubMenuRepeater.newChildId());\n          completeSubMenuRepeater.add(subMenuItem);\n          final AbstractLink link = getMenuEntryLink(subMenuEntry, true);\n          if (link != null) {\n            subMenuItem.add(link);\n          } else {\n            subMenuItem.setVisible(false);\n          }\n        }\n      }\n    }\n\n  }\n\n  private void addFavoriteMenu()\n  {\n    // Favorite menu:\n    final RepeatingView menuRepeater = new RepeatingView(\"menuRepeater\");\n    add(menuRepeater);\n    final Collection<MenuEntry> menuEntries = favoritesMenu.getMenuEntries();\n    if (menuEntries != null) {\n      for (final MenuEntry menuEntry : menuEntries) {\n        // Now we add a new menu area (title with sub menus):\n        final WebMarkupContainer menuItem = new WebMarkupContainer(menuRepeater.newChildId());\n        menuRepeater.add(menuItem);\n        final AbstractLink link = getMenuEntryLink(menuEntry, true);\n        if (link == null) {\n          menuItem.setVisible(false);\n          continue;\n        }\n        menuItem.add(link);\n\n        final WebMarkupContainer subMenuContainer = new WebMarkupContainer(\"subMenu\");\n        menuItem.add(subMenuContainer);\n        final WebMarkupContainer caret = new WebMarkupContainer(\"caret\");\n        link.add(caret);\n        if (menuEntry.hasSubMenuEntries() == false) {\n          subMenuContainer.setVisible(false);\n          caret.setVisible(false);\n          continue;\n        }\n        menuItem.add(AttributeModifier.append(\"class\", \"dropdown\"));\n        link.add(AttributeModifier.append(\"class\", \"dropdown-toggle\"));\n        link.add(AttributeModifier.append(\"data-toggle\", \"dropdown\"));\n        final RepeatingView subMenuRepeater = new RepeatingView(\"subMenuRepeater\");\n        subMenuContainer.add(subMenuRepeater);\n        for (final MenuEntry subMenuEntry : menuEntry.getSubMenuEntries()) {\n          // Now we add the next menu entry to the area:\n          if (subMenuEntry.hasSubMenuEntries() == false) {\n            final WebMarkupContainer subMenuItem = new WebMarkupContainer(subMenuRepeater.newChildId());\n            subMenuRepeater.add(subMenuItem);\n            // Subsubmenu entries aren't yet supported, show only the sub entries without children, otherwise only the children are\n            // displayed.\n            final AbstractLink subLink = getMenuEntryLink(subMenuEntry, true);\n            if (subLink == null) {\n              subMenuItem.setVisible(false);\n              continue;\n            }\n            subMenuItem.add(subLink);\n            continue;\n          }\n\n          // final WebMarkupContainer subsubMenuContainer = new WebMarkupContainer(\"subsubMenu\");\n          // subMenuItem.add(subsubMenuContainer);\n          // if (subMenuEntry.hasSubMenuEntries() == false) {\n          // subsubMenuContainer.setVisible(false);\n          // continue;\n          // }\n          // final RepeatingView subsubMenuRepeater = new RepeatingView(\"subsubMenuRepeater\");\n          // subsubMenuContainer.add(subsubMenuRepeater);\n          for (final MenuEntry subsubMenuEntry : subMenuEntry.getSubMenuEntries()) {\n            // Now we add the next menu entry to the sub menu:\n            final WebMarkupContainer subMenuItem = new WebMarkupContainer(subMenuRepeater.newChildId());\n            subMenuRepeater.add(subMenuItem);\n            // Subsubmenu entries aren't yet supported, show only the sub entries without children, otherwise only the children are\n            // displayed.\n            final AbstractLink subLink = getMenuEntryLink(subsubMenuEntry, true);\n            if (subLink == null) {\n              subMenuItem.setVisible(false);\n              continue;\n            }\n            subMenuItem.add(subLink);\n            // final WebMarkupContainer subsubMenuItem = new WebMarkupContainer(subsubMenuRepeater.newChildId());\n            // subsubMenuRepeater.add(subsubMenuItem);\n            // final AbstractLink subsubLink = getMenuEntryLink(subsubMenuEntry, subsubMenuItem);\n            // subsubMenuItem.add(subsubLink);\n          }\n        }\n      }\n    }\n  }\n\n  private void addBookmarkDialog()\n  {\n    final AbstractSecuredPage parentPage = (AbstractSecuredPage) getPage();\n    bookmarkDialog = new BookmarkDialog(parentPage.newModalDialogId());\n    bookmarkDialog.setOutputMarkupId(true);\n    parentPage.add(bookmarkDialog);\n    bookmarkDialog.init();\n  }\n\n  @SuppressWarnings(\"serial\")\n  private class BookmarkDialog extends ModalDialog\n  {\n    /**\n     * @param id\n     */\n    public BookmarkDialog(final String id)\n    {\n      super(id);\n    }\n\n    @Override\n    public void init()\n    {\n      setTitle(getString(\"bookmark.title\"));\n      init(new Form<String>(getFormId()));\n      gridBuilder.newFormHeading(\"\"); // Otherwise it's empty and an IllegalArgumentException is thrown.\n    }\n\n    private BookmarkDialog redraw()\n    {\n      clearContent();\n      final AbstractSecuredPage page = (AbstractSecuredPage) NavTopPanel.this.getPage();\n      {\n        final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"bookmark.directPageLink\")).setLabelSide(false);\n        final TextArea<String> textArea = new TextArea<String>(fs.getTextAreaId(), new Model<String>(page.getPageAsLink()));\n        fs.add(textArea);\n        textArea.add(AttributeModifier.replace(\"onClick\", \"$(this).select();\"));\n      }\n      final PageParameters params = page.getBookmarkableInitialParameters();\n      if (params.isEmpty() == false) {\n        final FieldsetPanel fs = gridBuilder.newFieldset(getString(page.getTitleKey4BookmarkableInitialParameters())).setLabelSide(false);\n        final TextArea<String> textArea = new TextArea<String>(fs.getTextAreaId(), new Model<String>(page.getPageAsLink(params)));\n        fs.add(textArea);\n        textArea.add(AttributeModifier.replace(\"onClick\", \"$(this).select();\"));\n      }\n      return this;\n    }\n  }\n}\n", "<wicket:panel xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n  <div class=\"modal hide\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\" wicket:id=\"mainContainer\">\n    <wicket:container wicket:id=\"mainSubContainer\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>\n        <h3 id=\"myModalLabel\" wicket:id=\"titleContainer\">\n          <span wicket:id=\"titleText\">[title]</span>\n        </h3>\n      </div>\n      <form wicket:id=\"form\" autocomplete=\"off\">\n        <div class=\"modal-body\" wicket:id=\"gridContent\">\n          <div wicket:id=\"formFeedback\"></div>\n          <wicket:container wicket:id=\"flowform\">[The content]</wicket:container>\n        </div>\n        <div class=\"modal-footer\" wicket:id=\"buttonBar\">\n          <wicket:container wicket:id=\"actionButtons\" />\n        </div>\n        <input type=\"hidden\" wicket:id=\"csrfToken\" />\n      </form>\n    </wicket:container>\n  </div>\n</wicket:panel>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.dialog;\n\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.ajax.AjaxEventBehavior;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.form.AjaxButton;\nimport org.apache.wicket.feedback.ComponentFeedbackMessageFilter;\nimport org.apache.wicket.markup.head.IHeaderResponse;\nimport org.apache.wicket.markup.head.OnDomReadyHeaderItem;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.panel.FeedbackPanel;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.projectforge.web.core.NavTopPanel;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.MyComponentsRepeater;\n\nimport de.micromata.wicket.ajax.AjaxCallback;\nimport de.micromata.wicket.ajax.AjaxFormSubmitCallback;\n\n/**\n * Base component for the ProjectForge modal dialogs.<br/>\n * This dialog is modal.<br/>\n * \n * @author Johannes Unterstein (j.unterstein@micromata.de)\n * @author Kai Reinhard (k.reinhard@micromata.de)\n * \n */\npublic abstract class ModalDialog extends Panel\n{\n  private static final long serialVersionUID = 4235521713603821639L;\n\n  protected GridBuilder gridBuilder;\n\n  protected final WebMarkupContainer mainContainer, mainSubContainer, gridContentContainer, buttonBarContainer;\n\n  private boolean escapeKeyEnabled = true;\n\n  private String closeButtonLabel;\n\n  private SingleButtonPanel closeButtonPanel;\n\n  private boolean showCancelButton;\n\n  private boolean bigWindow;\n\n  private boolean draggable = true;\n\n  private Boolean resizable;\n\n  private boolean lazyBinding;\n\n  private WebMarkupContainer titleContainer;\n\n  private Label titleLabel;\n\n  protected Form< ? > form;\n\n  protected FeedbackPanel formFeedback;\n\n  /**\n   * If true, a GridBuilder is automatically available.\n   */\n  protected boolean autoGenerateGridBuilder = true;\n\n  /**\n   * List to create action buttons in the desired order before creating the RepeatingView.\n   */\n  protected MyComponentsRepeater<Component> actionButtons;\n\n  /**\n   * Cross site request forgery token.\n   */\n  protected CsrfTokenHandler csrfTokenHandler;\n\n  /**\n   * @param id\n   */\n  public ModalDialog(final String id)\n  {\n    super(id);\n    actionButtons = new MyComponentsRepeater<Component>(\"actionButtons\");\n    mainContainer = new WebMarkupContainer(\"mainContainer\");\n    add(mainContainer.setOutputMarkupId(true));\n    mainContainer.add(mainSubContainer = new WebMarkupContainer(\"mainSubContainer\"));\n    gridContentContainer = new WebMarkupContainer(\"gridContent\");\n    gridContentContainer.setOutputMarkupId(true);\n    buttonBarContainer = new WebMarkupContainer(\"buttonBar\");\n    buttonBarContainer.setOutputMarkupId(true);\n  }\n\n  /**\n   * @see org.apache.wicket.Component#onInitialize()\n   */\n  @Override\n  protected void onInitialize()\n  {\n    super.onInitialize();\n    if (bigWindow == true) {\n      mainContainer.add(AttributeModifier.append(\"class\", \"big-modal\"));\n    }\n  }\n\n  /**\n   * Sets also draggable to false. Appends css class big-modal.\n   */\n  public ModalDialog setBigWindow()\n  {\n    bigWindow = true;\n    draggable = false;\n    return this;\n  }\n\n  /**\n   * Only the div panel of the modal dialog is rendered without buttons and content. Default is false.\n   * @return this for chaining.\n   */\n  public ModalDialog setLazyBinding()\n  {\n    this.lazyBinding = true;\n    mainSubContainer.setVisible(false);\n    return this;\n  }\n\n  public void bind(final AjaxRequestTarget target)\n  {\n    actionButtons.render();\n    mainSubContainer.setVisible(true);\n    target.appendJavaScript(getJavaScriptAction());\n  }\n\n  /**\n   * @return true if no lazy binding was used or bind() was already called.\n   */\n  public boolean isBound()\n  {\n    return mainSubContainer.isVisible();\n  }\n\n  /**\n   * @param draggable the draggable to set (default is true).\n   * @return this for chaining.\n   */\n  public ModalDialog setDraggable(final boolean draggable)\n  {\n    this.draggable = draggable;\n    return this;\n  }\n\n  /**\n   * @param resizable the resizable to set (default is true for bigWindows, otherwise false).\n   * @return this for chaining.\n   */\n  public ModalDialog setResizable(final boolean resizable)\n  {\n    this.resizable = resizable;\n    return this;\n  }\n\n  /**\n   * Display the cancel button.\n   * @return this for chaining.\n   */\n  public ModalDialog setShowCancelButton()\n  {\n    this.showCancelButton = true;\n    return this;\n  }\n\n  /**\n   * @param escapeKeyEnabled the keyboard to set (default is true).\n   * @return this for chaining.\n   */\n  public ModalDialog setEscapeKeyEnabled(final boolean escapeKeyEnabled)\n  {\n    this.escapeKeyEnabled = escapeKeyEnabled;\n    return this;\n  }\n\n  /**\n   * Close is used as default:\n   * @param closeButtonLabel the closeButtonLabel to set\n   * @return this for chaining.\n   */\n  public ModalDialog setCloseButtonLabel(final String closeButtonLabel)\n  {\n    this.closeButtonLabel = closeButtonLabel;\n    return this;\n  }\n\n  /**\n   * Should be called directly after {@link #init()}.\n   * @param tooltipTitle\n   * @param tooltipContent\n   * @see WicketUtils#addTooltip(Component, IModel, IModel)\n   */\n  public ModalDialog setCloseButtonTooltip(final IModel<String> tooltipTitle, final IModel<String> tooltipContent)\n  {\n    WicketUtils.addTooltip(this.closeButtonPanel.getButton(), tooltipTitle, tooltipContent);\n    return this;\n  }\n\n  @SuppressWarnings(\"serial\")\n  public ModalDialog wantsNotificationOnClose()\n  {\n    mainContainer.add(new AjaxEventBehavior(\"hidden\") {\n      @Override\n      protected void onEvent(final AjaxRequestTarget target)\n      {\n        csrfTokenHandler.onSubmit();\n        handleCloseEvent(target);\n      }\n    });\n    return this;\n  }\n\n  public ModalDialog addAjaxEventBehavior(final AjaxEventBehavior behavior)\n  {\n    mainContainer.add(behavior);\n    return this;\n  }\n\n  public String getMainContainerMarkupId()\n  {\n    return mainContainer.getMarkupId(true);\n  }\n\n  @Override\n  public void renderHead(final IHeaderResponse response)\n  {\n    super.renderHead(response);\n    if (lazyBinding == false) {\n      final String script = getJavaScriptAction();\n      response.render(OnDomReadyHeaderItem.forScript(script));\n    }\n  }\n\n  private String getJavaScriptAction()\n  {\n    final StringBuffer script = new StringBuffer();\n    script.append(\"$('#\").append(getMainContainerMarkupId()).append(\"').modal({keyboard: \").append(escapeKeyEnabled)\n    .append(\", show: false });\");\n    final boolean isResizable = (resizable == null && bigWindow == true) || Boolean.TRUE.equals(resizable) == true;\n    if (draggable == true || isResizable == true) {\n      script.append(\" $('#\").append(getMainContainerMarkupId()).append(\"')\");\n    }\n    if (draggable == true) {\n      script.append(\".draggable()\");\n    }\n    if (isResizable) {\n      script.append(\".resizable({ alsoResize: '#\")\n      .append(getMainContainerMarkupId())\n      // max-height of .modal-body is 600px, need to enlarge this setting for resizing.\n      .append(\n          \", .modal-body', resize: function( event, ui ) {$('.modal-body').css('max-height', '4000px');}, minWidth: 300, minHeight: 200 })\");\n    }\n    return script.toString();\n  }\n\n  public ModalDialog open(final AjaxRequestTarget target)\n  {\n    target.appendJavaScript(\"$('#\" + getMainContainerMarkupId() + \"').modal('show');\");\n    return this;\n  }\n\n  public void close(final AjaxRequestTarget target)\n  {\n    csrfTokenHandler.onSubmit();\n    target.appendJavaScript(\"$('#\" + getMainContainerMarkupId() + \"').modal('hide');\");\n  }\n\n  /**\n   * Add the content to the AjaxRequestTarget if the content is changed.\n   * @param target\n   * @return this for chaining.\n   */\n  public ModalDialog addContent(final AjaxRequestTarget target)\n  {\n    target.add(gridContentContainer);\n    return this;\n  }\n\n  /**\n   * Add the button bar to the AjaxRequestTarget if the buttons or their visibility are changed.\n   * @param target\n   * @return this for chaining.\n   */\n  public ModalDialog addButtonBar(final AjaxRequestTarget target)\n  {\n    target.add(buttonBarContainer);\n    return this;\n  }\n\n  /**\n   * @param target\n   * @return this for chaining.\n   */\n  public ModalDialog addTitleLabel(final AjaxRequestTarget target)\n  {\n    target.add(titleLabel);\n    return this;\n  }\n\n  public abstract void init();\n\n  /**\n   * @param title\n   * @return this for chaining.\n   */\n  public ModalDialog setTitle(final String title)\n  {\n    return setTitle(Model.of(title));\n  }\n\n  /**\n   * @param title\n   * @return this for chaining.\n   */\n  public ModalDialog setTitle(final IModel<String> title)\n  {\n    titleContainer = new WebMarkupContainer(\"titleContainer\");\n    mainSubContainer.add(titleContainer.setOutputMarkupId(true));\n    titleContainer.add(titleLabel = new Label(\"titleText\", title));\n    titleLabel.setOutputMarkupId(true);\n    return this;\n  }\n\n  /**\n   * The gridContentContainer is cleared (all child elements are removed). This is useful for Ajax dialogs with dynamic content (see\n   * {@link NavTopPanel} for an example).\n   * @return\n   */\n  public ModalDialog clearContent()\n  {\n    gridContentContainer.removeAll();\n    if (autoGenerateGridBuilder == true) {\n      gridBuilder = new GridBuilder(gridContentContainer, \"flowform\");\n    }\n    initFeedback(gridContentContainer);\n    return this;\n  }\n\n  @SuppressWarnings(\"serial\")\n  protected void init(final Form< ? > form)\n  {\n    this.form = form;\n    csrfTokenHandler = new CsrfTokenHandler(form);\n    mainSubContainer.add(form);\n    form.add(gridContentContainer);\n    form.add(buttonBarContainer);\n    if (showCancelButton == true) {\n      final SingleButtonPanel cancelButton = appendNewAjaxActionButton(new AjaxCallback() {\n        @Override\n        public void callback(final AjaxRequestTarget target)\n        {\n          csrfTokenHandler.onSubmit();\n          onCancelButtonSubmit(target);\n          close(target);\n        }\n      }, getString(\"cancel\"), SingleButtonPanel.CANCEL);\n      cancelButton.getButton().setDefaultFormProcessing(false);\n    }\n    closeButtonPanel = appendNewAjaxActionButton(new AjaxFormSubmitCallback() {\n\n      @Override\n      public void callback(final AjaxRequestTarget target)\n      {\n        csrfTokenHandler.onSubmit();\n        if (onCloseButtonSubmit(target)) {\n          close(target);\n        }\n      }\n\n      @Override\n      public void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        csrfTokenHandler.onSubmit();\n        ModalDialog.this.onError(target, form);\n      }\n    }, closeButtonLabel != null ? closeButtonLabel : getString(\"close\"), SingleButtonPanel.NORMAL);\n    buttonBarContainer.add(actionButtons.getRepeatingView());\n    form.setDefaultButton(closeButtonPanel.getButton());\n    if (autoGenerateGridBuilder == true) {\n      gridBuilder = new GridBuilder(gridContentContainer, \"flowform\");\n    }\n    initFeedback(gridContentContainer);\n  }\n\n  private void initFeedback(final WebMarkupContainer container)\n  {\n    if (formFeedback == null) {\n      formFeedback = new FeedbackPanel(\"formFeedback\", new ComponentFeedbackMessageFilter(form));\n      formFeedback.setOutputMarkupId(true);\n      formFeedback.setOutputMarkupPlaceholderTag(true);\n    }\n    container.add(formFeedback);\n  }\n\n  protected void ajaxError(final String error, final AjaxRequestTarget target)\n  {\n    csrfTokenHandler.onSubmit();\n    form.error(error);\n    target.add(formFeedback);\n  }\n\n  /**\n   * Called if {@link #wantsNotificationOnClose()} was chosen and the dialog is closed (by pressing esc, clicking outside or clicking the\n   * upper right cross).\n   * @param target\n   */\n  protected void handleCloseEvent(final AjaxRequestTarget target)\n  {\n    csrfTokenHandler.onSubmit();\n  }\n\n  /**\n   * Called if user hit the cancel button.\n   * @param target\n   */\n  protected void onCancelButtonSubmit(final AjaxRequestTarget target)\n  {\n  }\n\n  /**\n   * Called if user hit the close button.\n   * \n   * @param target\n   * \n   * @return true if the dialog can be close, false if errors occured.\n   */\n  protected boolean onCloseButtonSubmit(final AjaxRequestTarget target)\n  {\n    return true;\n  }\n\n  protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n  {\n  }\n\n  /**\n   * @see org.apache.wicket.Component#onBeforeRender()\n   */\n  @Override\n  protected void onBeforeRender()\n  {\n    super.onBeforeRender();\n    if (lazyBinding == false) {\n      actionButtons.render();\n    }\n  }\n\n  public String getFormId()\n  {\n    return \"form\";\n  }\n\n  public SingleButtonPanel appendNewAjaxActionButton(final AjaxCallback ajaxCallback, final String label, final String... classnames)\n  {\n    final SingleButtonPanel result = addNewAjaxActionButton(ajaxCallback, label, classnames);\n    this.actionButtons.add(result);\n    return result;\n  }\n\n  public SingleButtonPanel prependNewAjaxActionButton(final AjaxCallback ajaxCallback, final String label, final String... classnames)\n  {\n    return insertNewAjaxActionButton(ajaxCallback, 0, label, classnames);\n  }\n\n  /**\n   * @param ajaxCallback\n   * @param position 0 is the first position.\n   * @param label\n   * @param classnames\n   * @return\n   */\n  public SingleButtonPanel insertNewAjaxActionButton(final AjaxCallback ajaxCallback, final int position, final String label,\n      final String... classnames)\n  {\n    final SingleButtonPanel result = addNewAjaxActionButton(ajaxCallback, label, classnames);\n    this.actionButtons.add(position, result);\n    return result;\n  }\n\n  private SingleButtonPanel addNewAjaxActionButton(final AjaxCallback ajaxCallback, final String label, final String... classnames)\n  {\n    final AjaxButton button = new AjaxButton(\"button\", form) {\n      private static final long serialVersionUID = -5306532706450731336L;\n\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        csrfTokenHandler.onSubmit();\n        ajaxCallback.callback(target);\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        if (ajaxCallback instanceof AjaxFormSubmitCallback) {\n          ((AjaxFormSubmitCallback) ajaxCallback).onError(target, form);\n        }\n      }\n    };\n    final SingleButtonPanel buttonPanel = new SingleButtonPanel(this.actionButtons.newChildId(), button, label, classnames);\n    buttonPanel.add(button);\n    return buttonPanel;\n  }\n\n  /**\n   * @return the mainContainer\n   */\n  public WebMarkupContainer getMainContainer()\n  {\n    return mainContainer;\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:panel>\n    <div wicket:id=\"feedback\">[feedback panel]</div>\n    <form wicket:id=\"form\" autocomplete=\"off\">\n      <div>\n        <wicket:container wicket:id=\"recalculateButton\" />\n        <wicket:container wicket:id=\"addRowButton\" />\n      </div>\n      <table class=\"costassignment\">\n        <thead>\n          <tr>\n            <th><wicket:message key=\"fibu.kost1\" /></th>\n            <th><wicket:message key=\"fibu.kost2\" /></th>\n            <th><wicket:message key=\"fibu.common.netto\" /></th>\n            <th><wicket:message key=\"percent\" /></th>\n            <th>&nbsp;</th>\n          </tr>\n        </thead>\n        <tbody id=\"costAssignmentBody\">\n          <tr wicket:id=\"rows\">\n            <td><input wicket:id=\"kost1\" title=\"3.501.00.01 - Kai Reinhard\" /></td>\n            <td><input wicket:id=\"kost2\" title=\"5.105.03.07 - ACME Web portal\" /></td>\n            <td><input wicket:id=\"netto\" /></td>\n            <td wicket:id=\"percentage\">[30%]</td>\n            <td style=\"vertical-align: middle;\" wicket:id=\"deleteEntry\">[delete button]</td>\n          </tr>\n        </tbody>\n      </table>\n      <div>\n        <wicket:message key=\"rest\" />\n        : <span wicket:id=\"restValue\">[-1234,00]</span>\n      </div>\n      <input type=\"hidden\" wicket:id=\"csrfToken\" />\n    </form>\n  </wicket:panel>\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.fibu;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.List;\n\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.form.AjaxButton;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.panel.FeedbackPanel;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.apache.wicket.spring.injection.annot.SpringBean;\nimport org.apache.wicket.util.convert.IConverter;\nimport org.projectforge.common.NumberHelper;\nimport org.projectforge.core.Constants;\nimport org.projectforge.core.CurrencyFormatter;\nimport org.projectforge.core.NumberFormatter;\nimport org.projectforge.fibu.AbstractRechnungsPositionDO;\nimport org.projectforge.fibu.EingangsrechnungsPositionDO;\nimport org.projectforge.fibu.ProjektDO;\nimport org.projectforge.fibu.RechnungDO;\nimport org.projectforge.fibu.RechnungsPositionDO;\nimport org.projectforge.fibu.kost.Kost1DO;\nimport org.projectforge.fibu.kost.Kost2DO;\nimport org.projectforge.fibu.kost.Kost2Dao;\nimport org.projectforge.fibu.kost.KostZuweisungDO;\nimport org.projectforge.fibu.kost.KostZuweisungenCopyHelper;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.WicketAjaxUtils;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.components.MinMaxNumberField;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.converter.CurrencyConverter;\nimport org.projectforge.web.wicket.flowlayout.ButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.IconButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.IconType;\nimport org.projectforge.web.wicket.flowlayout.MyAjaxComponentHolder;\n\n/**\n * @author Kai Reinhard (k.reinhard@micromata.de)\n * \n */\npublic class RechnungCostEditTablePanel extends Panel\n{\n  private static final long serialVersionUID = -5732520730823126042L;\n\n  private final RepeatingView rows;\n\n  private final Form<AbstractRechnungsPositionDO> form;\n\n  private final FeedbackPanel feedbackPanel;\n\n  @SpringBean(name = \"kost2Dao\")\n  private Kost2Dao kost2Dao;\n\n  private AbstractRechnungsPositionDO position;\n\n  MyAjaxComponentHolder ajaxComponents = new MyAjaxComponentHolder();\n\n  /**\n   * Cross site request forgery token.\n   */\n  private final CsrfTokenHandler csrfTokenHandler;\n\n  /**\n   * @param id\n   */\n  @SuppressWarnings(\"serial\")\n  public RechnungCostEditTablePanel(final String id)\n  {\n    super(id);\n    feedbackPanel = new FeedbackPanel(\"feedback\");\n    ajaxComponents.register(feedbackPanel);\n    add(feedbackPanel);\n    this.form = new Form<AbstractRechnungsPositionDO>(\"form\") {\n      @Override\n      protected void onSubmit()\n      {\n        super.onSubmit();\n        csrfTokenHandler.onSubmit();\n      }\n    };\n    add(form);\n    csrfTokenHandler = new CsrfTokenHandler(form);\n    rows = new RepeatingView(\"rows\");\n    form.add(rows);\n  }\n\n  /**\n   * @return the position\n   */\n  public AbstractRechnungsPositionDO getPosition()\n  {\n    return position;\n  }\n\n  @SuppressWarnings(\"serial\")\n  public RechnungCostEditTablePanel add(final AbstractRechnungsPositionDO origPosition)\n  {\n    if (origPosition instanceof RechnungsPositionDO) {\n      position = new RechnungsPositionDO();\n    } else {\n      position = new EingangsrechnungsPositionDO();\n    }\n    position.copyValuesFrom(origPosition, \"kostZuweisungen\");\n    new KostZuweisungenCopyHelper().mycopy(origPosition.getKostZuweisungen(), null, position);\n    List<KostZuweisungDO> kostzuweisungen = position.getKostZuweisungen();\n    if (CollectionUtils.isEmpty(kostzuweisungen) == true) {\n      addZuweisung(position);\n      kostzuweisungen = position.getKostZuweisungen();\n    }\n    for (final KostZuweisungDO zuweisung : kostzuweisungen) {\n      final WebMarkupContainer row = createRow(rows.newChildId(), position, zuweisung);\n      rows.add(row);\n    }\n    final Label restLabel = new Label(\"restValue\", new Model<String>() {\n      /**\n       * @see org.apache.wicket.model.Model#getObject()\n       */\n      @Override\n      public String getObject()\n      {\n        return CurrencyFormatter.format(position.getKostZuweisungNetFehlbetrag());\n      }\n    });\n    form.add(restLabel);\n    ajaxComponents.register(restLabel);\n    final AjaxButton addRowButton = new AjaxButton(ButtonPanel.BUTTON_ID, form) {\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        final KostZuweisungDO zuweisung = addZuweisung(position);\n        final WebMarkupContainer newRow = createRow(rows.newChildId(), position, zuweisung);\n        newRow.setOutputMarkupId(true);\n        final StringBuffer prependJavascriptBuf = new StringBuffer();\n        prependJavascriptBuf.append(WicketAjaxUtils.appendChild(\"costAssignmentBody\", \"tr\", newRow.getMarkupId()));\n        rows.add(newRow);\n        target.add(newRow);\n        ajaxComponents.addTargetComponents(target);\n        target.prependJavaScript(prependJavascriptBuf.toString());\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        target.add(feedbackPanel);\n      }\n    };\n    // addRowButton.setDefaultFormProcessing(false);\n    final SingleButtonPanel addPositionButtonPanel = new SingleButtonPanel(\"addRowButton\", addRowButton, getString(\"add\"));\n    form.add(addPositionButtonPanel);\n\n    final AjaxButton recalculateButton = new AjaxButton(ButtonPanel.BUTTON_ID, form) {\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        ajaxComponents.addTargetComponents(target);\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        target.add(feedbackPanel);\n      }\n    };\n    // recalculateButton.setDefaultFormProcessing(false);\n    final SingleButtonPanel recalculateButtonPanel = new SingleButtonPanel(\"recalculateButton\", recalculateButton, getString(\"recalculate\"));\n    form.add(recalculateButtonPanel);\n\n    return this;\n  }\n\n  @SuppressWarnings(\"serial\")\n  private WebMarkupContainer createRow(final String id, final AbstractRechnungsPositionDO position, final KostZuweisungDO zuweisung)\n  {\n    final WebMarkupContainer row = new WebMarkupContainer(id);\n    row.setOutputMarkupId(true);\n    final Kost1FormComponent kost1 = new Kost1FormComponent(\"kost1\", new PropertyModel<Kost1DO>(zuweisung, \"kost1\"), true);\n    kost1.setLabel(new Model<String>(getString(\"fibu.kost1\")));\n    row.add(kost1);\n    ajaxComponents.register(kost1);\n    final Kost2FormComponent kost2 = new Kost2FormComponent(\"kost2\", new PropertyModel<Kost2DO>(zuweisung, \"kost2\"), true);\n    kost2.setLabel(new Model<String>(getString(\"fibu.kost2\")));\n    row.add(kost2);\n    ajaxComponents.register(kost2);\n\n    final MinMaxNumberField<BigDecimal> netto = new MinMaxNumberField<BigDecimal>(\"netto\",\n        new PropertyModel<BigDecimal>(zuweisung, \"netto\"), Constants.TEN_BILLION_NEGATIVE, Constants.TEN_BILLION) {\n      @SuppressWarnings({ \"rawtypes\", \"unchecked\"})\n      @Override\n      public IConverter getConverter(final Class type)\n      {\n        return new CurrencyConverter(position.getNetSum());\n      }\n    };\n    netto.setLabel(new Model<String>(getString(\"fibu.common.netto\")));\n    WicketUtils.addTooltip(netto, getString(\"currencyConverter.percentage.help\"));\n    row.add(netto);\n    ajaxComponents.register(netto); // Should be updated if e. g. percentage value is given.\n    final Label pLabel = new Label(\"percentage\", new Model<String>() {\n      /**\n       * @see org.apache.wicket.model.Model#getObject()\n       */\n      @Override\n      public String getObject()\n      {\n        final BigDecimal percentage;\n        if (NumberHelper.isZeroOrNull(position.getNetSum()) == true || NumberHelper.isZeroOrNull(zuweisung.getNetto()) == true) {\n          percentage = BigDecimal.ZERO;\n        } else {\n          percentage = zuweisung.getNetto().divide(position.getNetSum(), RoundingMode.HALF_UP);\n        }\n        final boolean percentageVisible = NumberHelper.isNotZero(percentage);\n        if (percentageVisible == true) {\n          return NumberFormatter.formatPercent(percentage);\n        } else {\n          return \" \";\n        }\n      }\n    });\n    ajaxComponents.register(pLabel);\n    row.add(pLabel);\n\n    if (position.isKostZuweisungDeletable(zuweisung) == true) {\n      final AjaxButton deleteRowButton = new AjaxButton(ButtonPanel.BUTTON_ID, form) {\n        @Override\n        protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n        {\n          position.deleteKostZuweisung(zuweisung.getIndex());\n          final StringBuffer prependJavascriptBuf = new StringBuffer();\n          prependJavascriptBuf.append(WicketAjaxUtils.removeChild(\"costAssignmentBody\", row.getMarkupId()));\n          ajaxComponents.remove(row);\n          rows.remove(row);\n          target.prependJavaScript(prependJavascriptBuf.toString());\n        }\n\n        @Override\n        protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n        {\n          target.add(feedbackPanel.setVisible(true));\n        }\n      };\n      deleteRowButton.setDefaultFormProcessing(false);\n      row.add(new IconButtonPanel(\"deleteEntry\", deleteRowButton, IconType.TRASH, null).setLight());\n    } else {\n      // Don't show a delete button.\n      row.add(new Label(\"deleteEntry\", \"&nbsp;\").setEscapeModelStrings(false).setRenderBodyOnly(true));\n    }\n    return row;\n  }\n\n  private KostZuweisungDO addZuweisung(final AbstractRechnungsPositionDO position)\n  {\n    final KostZuweisungDO kostZuweisung = new KostZuweisungDO();\n    position.addKostZuweisung(kostZuweisung);\n    if (kostZuweisung.getIndex() > 0) {\n      final KostZuweisungDO predecessor = position.getKostZuweisung(kostZuweisung.getIndex() - 1);\n      if (predecessor != null) {\n        kostZuweisung.setKost1(predecessor.getKost1()); // Preset kost1 from the predecessor position.\n        kostZuweisung.setKost2(predecessor.getKost2()); // Preset kost2 from the predecessor position.\n      }\n    }\n    if (RechnungsPositionDO.class.isAssignableFrom(position.getClass()) == true && kostZuweisung.getKost2() == null) {\n      // Preset kost2 with first kost2 found for the projekt.\n      final RechnungsPositionDO rechnungsPosition = (RechnungsPositionDO) position;\n      if (rechnungsPosition != null) {\n        final RechnungDO rechnung = rechnungsPosition.getRechnung();\n        if (rechnung != null) {\n          final ProjektDO project = rechnung.getProjekt();\n          if (project != null) {\n            final List<Kost2DO> kost2List = kost2Dao.getActiveKost2(project);\n            if (CollectionUtils.isNotEmpty(kost2List) == true) {\n              kostZuweisung.setKost2(kost2List.get(0));\n            }\n          }\n        }\n      }\n    }\n    kostZuweisung.setNetto(position.getKostZuweisungNetFehlbetrag().negate());\n    return kostZuweisung;\n  }\n\n  /**\n   * @return the form\n   */\n  public Form<AbstractRechnungsPositionDO> getForm()\n  {\n    return form;\n  }\n}\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.mobile;\n\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.SubmitLink;\nimport org.apache.wicket.markup.html.panel.FeedbackPanel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.projectforge.core.AbstractBaseDO;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.mobileflowlayout.MobileGridBuilder;\n\npublic abstract class AbstractMobileEditForm<O extends AbstractBaseDO< ? >, P extends AbstractMobileEditPage< ? , ? , ? >> extends\nAbstractMobileForm<O, P>\n{\n  private static final long serialVersionUID = 1836099012618517190L;\n\n  protected O data;\n\n  protected MobileGridBuilder gridBuilder;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private final CsrfTokenHandler csrfTokenHandler;\n\n  public AbstractMobileEditForm(final P parentPage, final O data)\n  {\n    super(parentPage);\n    this.data = data;\n    csrfTokenHandler = new CsrfTokenHandler(this);\n  }\n\n  @Override\n  protected void onSubmit()\n  {\n    super.onSubmit();\n    csrfTokenHandler.onSubmit();\n  }\n\n  public O getData()\n  {\n    return this.data;\n  }\n\n  public void setData(final O data)\n  {\n    this.data = data;\n  }\n\n  public boolean isNew()\n  {\n    return this.data == null || this.data.getId() == null;\n  }\n\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    add(new FeedbackPanel(\"feedback\").setOutputMarkupId(true));\n    final SubmitLink submitButton = new SubmitLink(\"submitButton\") {\n      @Override\n      public final void onSubmit()\n      {\n        parentPage.save();\n      }\n    };\n    final RepeatingView flowform = new RepeatingView(\"flowform\");\n    add(flowform);\n    gridBuilder = newGridBuilder(flowform);\n\n    add(submitButton);\n    if (isNew() == true) {\n      submitButton.add(new Label(\"label\", getString(\"create\")));\n    } else {\n      submitButton.add(new Label(\"label\", getString(\"update\")));\n    }\n  }\n}\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\" />\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\" />\n</head>\n\n<body>\n\n  <div id=\"topbar\">\n    <div id=\"title\">ProjectForge - Edit</div>\n  </div>\n  <wicket:extend>\n    <div id=\"content\">\n      <form wicket:id=\"form\" autocomplete=\"off\">\n        <div wicket:id=\"feedback\">[feedback]</div>\n        <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n        <wicket:child />\n        <p>\n          <a wicket:id=\"submitButton\" rel=\"external\" data-role=\"button\"><wicket:container wicket:id=\"label\">[create or update]</wicket:container></a>\n        </p>\n        <input type=\"hidden\" wicket:id=\"csrfToken\" />\n      </form>\n    </div>\n  </wicket:extend>\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.mobile;\n\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.PropertyModel;\nimport org.projectforge.core.BaseSearchFilter;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\n\npublic abstract class AbstractMobileListForm<F extends BaseSearchFilter, P extends AbstractMobileListPage< ? , ? , ? >> extends\nAbstractMobileForm<AbstractMobileListForm< ? , ? >, AbstractMobileListPage< ? , ? , ? >>\n{\n  private static final long serialVersionUID = -2521426347126048630L;\n\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(AbstractMobileListForm.class);\n\n  protected F filter;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private final CsrfTokenHandler csrfTokenHandler;\n\n  @SuppressWarnings(\"unchecked\")\n  public AbstractMobileListForm(final AbstractMobileListPage< ? , ? , ? > parentPage)\n  {\n    super(parentPage);\n    final String userPrefFilterKey = this.getClass().getSimpleName() + \".filter\";\n    try {\n      filter = (F) parentPage.getUserPrefEntry(userPrefFilterKey);\n    } catch (final ClassCastException ex) {\n      log.info(\"Could not restore filter from user prefs (OK, probably new software release): \" + userPrefFilterKey);\n    }\n    if (filter == null) {\n      filter = newFilter();\n      parentPage.putUserPrefEntry(userPrefFilterKey, filter, true);\n    }\n    csrfTokenHandler = new CsrfTokenHandler(this);\n  }\n\n  @Override\n  protected void onSubmit()\n  {\n    super.onSubmit();\n    csrfTokenHandler.onSubmit();\n  }\n\n  protected void init()\n  {\n    add(new TextField<String>(\"searchField\", new PropertyModel<String>(filter, \"searchString\")).add(AttributeModifier.replace(\n        \"placeholder\", getString(\"search\"))));\n  }\n\n  protected abstract F newFilter();\n}\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\" />\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\" />\n</head>\n\n<body>\n  <wicket:extend>\n    <form wicket:id=\"form\" autocomplete=\"off\">\n      <div data-role=\"fieldcontain\" id=\"searchfield\">\n        <input type=\"text\" data-type=\"search\" wicket:id=\"searchField\" id=\"search\" placeholder=\"Suche\" />\n      </div>\n      <input type=\"hidden\" wicket:id=\"csrfToken\" />\n    </form>\n    <wicket:container wicket:id=\"listViewPage\">\n    </wicket:container>\n  </wicket:extend>\n</body>\n</html>\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.task;\n\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.model.PropertyModel;\nimport org.projectforge.task.TaskFilter;\nimport org.projectforge.web.wicket.AbstractForm;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.WebConstants;\nimport org.projectforge.web.wicket.WicketUtils;\nimport org.projectforge.web.wicket.bootstrap.GridBuilder;\nimport org.projectforge.web.wicket.bootstrap.GridSize;\nimport org.projectforge.web.wicket.components.SingleButtonPanel;\nimport org.projectforge.web.wicket.flowlayout.CheckBoxPanel;\nimport org.projectforge.web.wicket.flowlayout.DivPanel;\nimport org.projectforge.web.wicket.flowlayout.FieldSetIconPosition;\nimport org.projectforge.web.wicket.flowlayout.FieldsetPanel;\nimport org.projectforge.web.wicket.flowlayout.IconPanel;\nimport org.projectforge.web.wicket.flowlayout.IconType;\nimport org.projectforge.web.wicket.flowlayout.InputPanel;\nimport org.projectforge.web.wicket.flowlayout.MyComponentsRepeater;\n\npublic class TaskTreeForm extends AbstractForm<TaskFilter, TaskTreePage>\n{\n  private static final long serialVersionUID = -203572415793301622L;\n\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(TaskTreeForm.class);\n\n  private TaskFilter searchFilter;\n\n  private MyComponentsRepeater<Component> actionButtons;\n\n  private SingleButtonPanel cancelButtonPanel;\n\n  private SingleButtonPanel resetButtonPanel;\n\n  private SingleButtonPanel listViewButtonPanel;\n\n  private SingleButtonPanel searchButtonPanel;\n\n  protected GridBuilder gridBuilder;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private final CsrfTokenHandler csrfTokenHandler;\n\n  @Override\n  @SuppressWarnings(\"serial\")\n  protected void init()\n  {\n    super.init();\n    add(createFeedbackPanel());\n    gridBuilder = newGridBuilder(this, \"flowform\");\n    {\n      gridBuilder.newSplitPanel(GridSize.COL50);\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"searchFilter\"));\n      final TextField<String> searchField = new TextField<String>(InputPanel.WICKET_ID, new PropertyModel<String>(getSearchFilter(),\n          \"searchString\"));\n      searchField.add(WicketUtils.setFocus());\n      fs.add(new InputPanel(fs.newChildId(), searchField));\n      fs.add(new IconPanel(fs.newIconChildId(), IconType.HELP, getString(\"tooltip.lucene.link\")).setOnClickLocation(getRequestCycle(),\n          WebConstants.DOC_LINK_HANDBUCH_LUCENE, true), FieldSetIconPosition.TOP_RIGHT);\n    }\n    {\n      gridBuilder.newSplitPanel(GridSize.COL50);\n      final FieldsetPanel fs = gridBuilder.newFieldset(getString(\"label.options\")).suppressLabelForWarning();\n      final DivPanel checkBoxPanel = fs.addNewCheckBoxDiv();\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"notOpened\"),\n          getString(\"task.status.notOpened\")));\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"opened\"),\n          getString(\"task.status.opened\")));\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"closed\"),\n          getString(\"task.status.closed\")));\n      checkBoxPanel.add(new MyCheckBoxPanel(checkBoxPanel.newChildId(), new PropertyModel<Boolean>(getSearchFilter(), \"deleted\"),\n          getString(\"deleted\")));\n    }\n\n    actionButtons = new MyComponentsRepeater<Component>(\"actionButtons\");\n    add(actionButtons.getRepeatingView());\n    {\n      final Button cancelButton = new Button(\"button\", new Model<String>(\"cancel\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onCancelSubmit();\n        }\n      };\n      cancelButton.setDefaultFormProcessing(false);\n      cancelButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), cancelButton, getString(\"cancel\"), SingleButtonPanel.CANCEL);\n      actionButtons.add(cancelButtonPanel);\n    }\n    {\n      final Button resetButton = new Button(\"button\", new Model<String>(\"reset\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onResetSubmit();\n        }\n      };\n      resetButton.setDefaultFormProcessing(false);\n      resetButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), resetButton, getString(\"reset\"), SingleButtonPanel.RESET);\n      actionButtons.add(resetButtonPanel);\n    }\n    {\n      final Button listViewButton = new Button(\"button\", new Model<String>(\"listView\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onListViewSubmit();\n        }\n      };\n\n      listViewButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), listViewButton, getString(\"listView\"),\n          SingleButtonPanel.NORMAL);\n      actionButtons.add(listViewButtonPanel);\n    }\n    {\n      final Button searchButton = new Button(\"button\", new Model<String>(\"search\")) {\n        @Override\n        public final void onSubmit()\n        {\n          getParentPage().onSearchSubmit();\n        }\n      };\n      searchButtonPanel = new SingleButtonPanel(actionButtons.newChildId(), searchButton, getString(\"search\"),\n          SingleButtonPanel.DEFAULT_SUBMIT);\n      actionButtons.add(searchButtonPanel);\n      setDefaultButton(searchButton);\n    }\n    setComponentsVisibility();\n  }\n\n  public TaskTreeForm(final TaskTreePage parentPage)\n  {\n    super(parentPage);\n    csrfTokenHandler = new CsrfTokenHandler(this);\n  }\n\n  @Override\n  public void onBeforeRender()\n  {\n    super.onBeforeRender();\n    actionButtons.render();\n  }\n\n  protected void setComponentsVisibility()\n  {\n    if (parentPage.isSelectMode() == false) {\n      // Show cancel button only in select mode.\n      cancelButtonPanel.setVisible(false);\n    }\n    searchButtonPanel.setVisible(true);\n    resetButtonPanel.setVisible(true);\n  }\n\n  public TaskFilter getSearchFilter()\n  {\n    if (this.searchFilter == null) {\n      final Object filter = getParentPage().getUserPrefEntry(TaskListForm.class.getName() + \":Filter\");\n      if (filter != null) {\n        try {\n          this.searchFilter = (TaskFilter) filter;\n        } catch (final ClassCastException ex) {\n          // Probably a new software release results in an incompability of old and new filter format.\n          log.info(\"Could not restore filter from user prefs: (old) filter type \"\n              + filter.getClass().getName()\n              + \" is not assignable to (new) filter type TaskFilter (OK, probably new software release).\");\n        }\n      }\n    }\n    if (this.searchFilter == null) {\n      this.searchFilter = new TaskFilter();\n      getParentPage().putUserPrefEntry(TaskListForm.class.getName() + \":Filter\", this.searchFilter, true);\n    }\n    return this.searchFilter;\n  }\n\n  @Override\n  protected void onSubmit()\n  {\n    super.onSubmit();\n    csrfTokenHandler.onSubmit();\n    parentPage.refresh();\n  }\n\n  @SuppressWarnings(\"serial\")\n  private class MyCheckBoxPanel extends CheckBoxPanel\n  {\n    public MyCheckBoxPanel(final String id, final IModel<Boolean> model, final String labelString)\n    {\n      super(id, model, labelString);\n    }\n\n    @Override\n    protected boolean wantOnSelectionChangedNotifications()\n    {\n      return true;\n    }\n\n    @Override\n    protected void onSelectionChanged(final Boolean newSelection)\n    {\n      parentPage.refresh();\n    }\n  }\n}\n", "<html lang=\"en\" xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n</head>\n\n<body>\n  <wicket:extend>\n    <script>\n\t\t\t\t\tfunction updateEvenOdd() {\n\t\t\t\t\t\t$(\"tr:odd:not(.headers)\").removeClass('even').addClass(\n\t\t\t\t\t\t\t\t'odd');\n\t\t\t\t\t\t$(\"tr:even:not(.headers)\").removeClass('odd').addClass(\n\t\t\t\t\t\t\t\t'even');\n\t\t\t\t\t}\n\t\t\t\t</script>\n\n    <form wicket:id=\"form\" autocomplete=\"off\">\n      <div wicket:id=\"feedback\"></div>\n\n      <wicket:container wicket:id=\"flowform\">[the form fields]</wicket:container>\n\n      <div class=\"button_bar\">\n        <wicket:container wicket:id=\"actionButtons\">[cancel] [search]</wicket:container>\n      </div>\n      <div wicket:id=\"tree\">[tree]</div>\n      <input type=\"hidden\" wicket:id=\"csrfToken\" />\n    </form>\n    <div class=\"alert alert-info\" wicket:id=\"info\">[Click on row to select one task.]</div>\n  </wicket:extend>\n\n</body>\n</html>", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.wicket;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.wicket.Session;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.HiddenField;\nimport org.apache.wicket.model.PropertyModel;\nimport org.projectforge.core.InternalErrorException;\n\n/**\n * Every form should use this handler for preventing cross site request forgery attacks.\n * @author Kai Reinhard (k.reinhard@micromata.de)\n * \n */\npublic class CsrfTokenHandler implements Serializable\n{\n  private static final long serialVersionUID = -9129345307409567900L;\n\n  private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(CsrfTokenHandler.class);\n\n  private final String csrfToken;\n\n  /**\n   * The given form should contain a hidden field named 'csrfToken'.\n   * @param form\n   */\n  public CsrfTokenHandler(final Form< ? > form)\n  {\n    csrfToken = getCsrfSessionToken();\n    form.add(new HiddenField<String>(\"csrfToken\", new PropertyModel<String>(this, \"csrfToken\")));\n  }\n\n  /**\n   * This parameter should be set as hidden field in every formular and should be tested on every submit action for preventing CSRF attacks.\n   * @return the randomized cross site request forgery token.\n   */\n  private String getCsrfSessionToken()\n  {\n    final MySession session = (MySession) Session.get();\n    return session.getCsrfToken();\n  }\n\n  /**\n   * Checks the cross site request forgery token (as posted hidden field) and if it doesn't match an exception is thrown.\n   * @see org.apache.wicket.markup.html.form.Form#onSubmit()\n   */\n  public void onSubmit()\n  {\n    final String sessionCsrfToken = getCsrfSessionToken();\n    if (StringUtils.equals(sessionCsrfToken, csrfToken) == false) {\n      log.error(\"Cross site request forgery alert. csrf token doesn't match! session csrf token=\"\n          + sessionCsrfToken\n          + \", posted csrf token=\"\n          + csrfToken);\n      throw new InternalErrorException(\"errorpage.csrfError\");\n    }\n  }\n}\n", "<wicket:panel xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n  <div class=\"pf_dnd\" wicket:id=\"main\">\n    <input type=\"file\" id=\"fileselect\" class=\"pf_fileselect\" />\n    <div class=\"pf_filedrag\">\n      <wicket:message key=\"drop\" />\n    </div>\n    <form wicket:id=\"hiddenForm\" class=\"pf_hiddenForm\">\n      <textarea class=\"pf_text\" wicket:id=\"importString\"></textarea>\n      <textarea class=\"pf_name\" wicket:id=\"importFileName\"></textarea>\n      <input type=\"submit\" class=\"pf_submit\" wicket:id=\"submitButton\" /> <input type=\"hidden\" wicket:id=\"csrfToken\" />\n    </form>\n  </div>\n</wicket:panel>\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.wicket.components;\n\nimport java.io.Serializable;\n\nimport org.apache.wicket.AttributeModifier;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextArea;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.CompoundPropertyModel;\nimport org.projectforge.web.wicket.CsrfTokenHandler;\nimport org.projectforge.web.wicket.WicketUtils;\n\n/**\n * The panel which includes the drop behavior for several files. If the dropped file (string) was sucessfully importet, the hook method\n * {@link #onStringImport(AjaxRequestTarget, String, String)} is called.\n * \n * @author Johannes Unterstein (j.unterstein@micromata.de)\n * \n */\npublic abstract class DropFileContainer extends Panel\n{\n  private static final long serialVersionUID = 3622467918922963503L;\n\n  private final WebMarkupContainer main;\n\n  private final String mimeType;\n\n  /**\n   * Cross site request forgery token.\n   */\n  private  CsrfTokenHandler csrfTokenHandler;\n\n  /**\n   * @param id\n   */\n  public DropFileContainer(final String id)\n  {\n    this(id, null);\n  }\n\n  public DropFileContainer(final String id, final String mimeType)\n  {\n    super(id);\n    this.mimeType = mimeType;\n    main = new WebMarkupContainer(\"main\");\n    add(main);\n  }\n\n  /**\n   * @see org.apache.wicket.Component#onInitialize()\n   */\n  @Override\n  protected void onInitialize()\n  {\n    super.onInitialize();\n    final Form<FormBean> hiddenForm = new Form<FormBean>(\"hiddenForm\", new CompoundPropertyModel<FormBean>(new FormBean()));\n    hiddenForm.add(AttributeModifier.replace(\"data-mimetype\", mimeType));\n    main.add(hiddenForm);\n    hiddenForm.add(new TextArea<String>(\"importString\"));\n    hiddenForm.add(new TextArea<String>(\"importFileName\"));\n    hiddenForm.add(new AjaxSubmitLink(\"submitButton\") {\n      private static final long serialVersionUID = 6140567784494429257L;\n\n      @Override\n      protected void onSubmit(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        csrfTokenHandler.onSubmit();\n        final FormBean modelObject = hiddenForm.getModel().getObject();\n        onStringImport(target, modelObject.importFileName, modelObject.importString);\n      }\n\n      @Override\n      protected void onError(final AjaxRequestTarget target, final Form< ? > form)\n      {\n        // nothing to do here\n      }\n\n    });\n    csrfTokenHandler = new CsrfTokenHandler(hiddenForm);\n  }\n\n  /**\n   * @param content\n   * @return this for chaining.\n   */\n  public DropFileContainer setTooltip(final String content)\n  {\n    WicketUtils.addTooltip(main, content);\n    return this;\n  }\n\n  /**\n   * @param title\n   * @param content\n   * @return this for chaining.\n   */\n  public DropFileContainer setTooltip(final String title, final String content)\n  {\n    WicketUtils.addTooltip(main, title, content);\n    return this;\n  }\n\n  protected abstract void onStringImport(final AjaxRequestTarget target, final String filename, final String content);\n\n  /**\n   * Just the form model\n   * \n   */\n  private class FormBean implements Serializable\n  {\n    private static final long serialVersionUID = 4250094235574838882L;\n\n    private String importString;\n\n    private String importFileName;\n  }\n}\n"], "filenames": ["src/main/java/org/projectforge/web/admin/SetupForm.java", "src/main/java/org/projectforge/web/admin/SetupImportForm.java", "src/main/java/org/projectforge/web/admin/SetupPage.html", "src/main/java/org/projectforge/web/admin/SystemUpdateForm.java", "src/main/java/org/projectforge/web/admin/SystemUpdatePage.html", "src/main/java/org/projectforge/web/core/NavTopPanel.html", "src/main/java/org/projectforge/web/core/NavTopPanel.java", "src/main/java/org/projectforge/web/dialog/ModalDialog.html", "src/main/java/org/projectforge/web/dialog/ModalDialog.java", "src/main/java/org/projectforge/web/fibu/RechnungCostEditTablePanel.html", "src/main/java/org/projectforge/web/fibu/RechnungCostEditTablePanel.java", "src/main/java/org/projectforge/web/mobile/AbstractMobileEditForm.java", "src/main/java/org/projectforge/web/mobile/AbstractMobileEditPage.html", "src/main/java/org/projectforge/web/mobile/AbstractMobileListForm.java", "src/main/java/org/projectforge/web/mobile/AbstractMobileListPage.html", "src/main/java/org/projectforge/web/task/TaskTreeForm.java", "src/main/java/org/projectforge/web/task/TaskTreePage.html", "src/main/java/org/projectforge/web/wicket/CsrfTokenHandler.java", "src/main/java/org/projectforge/web/wicket/components/DropFileContainer.html", "src/main/java/org/projectforge/web/wicket/components/DropFileContainer.java"], "buggy_code_start_loc": [42, 31, 23, 40, 49, 41, 61, 6, 41, 35, 56, 30, 21, 29, 9, 33, 25, 32, 4, 35], "buggy_code_end_loc": [239, 48, 34, 167, 49, 41, 126, 15, 507, 36, 98, 45, 21, 53, 16, 200, 25, 80, 9, 95], "fixing_code_start_loc": [43, 32, 24, 41, 50, 42, 62, 6, 42, 35, 57, 31, 22, 30, 9, 34, 26, 32, 4, 36], "fixing_code_end_loc": [255, 63, 37, 182, 51, 43, 135, 19, 523, 39, 114, 60, 23, 68, 19, 210, 27, 80, 11, 106], "type": "CWE-352", "message": "Multiple cross-site request forgery (CSRF) vulnerabilities in ProjectForge before 5.3 allow remote attackers to hijack the authentication of arbitrary users via vectors related to (1) web/admin/, (2) web/core/, (3) web/dialog/, (4) web/fibu/, (5) web/mobile/, (6) web/task/, or (7) web/wicket/.", "other": {"cve": {"id": "CVE-2013-7251", "sourceIdentifier": "cve@mitre.org", "published": "2014-01-02T14:59:04.267", "lastModified": "2016-12-31T02:59:09.543", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site request forgery (CSRF) vulnerabilities in ProjectForge before 5.3 allow remote attackers to hijack the authentication of arbitrary users via vectors related to (1) web/admin/, (2) web/core/, (3) web/dialog/, (4) web/fibu/, (5) web/mobile/, (6) web/task/, or (7) web/wicket/."}, {"lang": "es", "value": "Multiple vulnerabilidades  cross-site request forgery (CSRF) en ProjectForge anterior a 5.3 que permite a atacantes remotos secuestrar la autenticaci\u00f3n de usuarios a trav\u00e9s de vectores relacionados con (1) web/admin/, (2) web/core/, (3) web/dialog/, (4) web/fibu/, (5) web/mobile/, (6) web/task/, or (7) web/wicket/."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:projectforge:projectforge:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.2", "matchCriteriaId": "BF5D532A-E85C-4239-827F-6C4ADF04B1F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:projectforge:projectforge:5.0:*:*:*:*:*:*:*", "matchCriteriaId": "12F8E378-EC24-4458-A0BB-B479FDC9D9A2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:projectforge:projectforge:5.1:*:*:*:*:*:*:*", "matchCriteriaId": "53F6C76A-C058-4732-84CB-B4F1F1E39FD4"}]}]}], "references": [{"url": "http://www.projectforge.org/pf-en/News", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/64632", "source": "cve@mitre.org"}, {"url": "https://github.com/micromata/projectforge-webapp/commit/422de35e3c3141e418a73bfb39b430d5fd74077e", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://www.projectforge.org/jira/browse/PF-485", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/micromata/projectforge-webapp/commit/422de35e3c3141e418a73bfb39b430d5fd74077e"}}