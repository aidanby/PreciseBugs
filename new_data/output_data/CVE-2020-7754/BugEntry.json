{"buggy_code": ["exports.email = email\nexports.pw = pw\nexports.username = username\nvar requirements = exports.requirements = {\n  username: {\n    length: 'Name length must be less than or equal to 214 characters long',\n    lowerCase: 'Name must be lowercase',\n    urlSafe: 'Name may not contain non-url-safe chars',\n    dot: 'Name may not start with \".\"',\n    illegal: 'Name may not contain illegal character'\n  },\n  password: {},\n  email: {\n    valid: 'Email must be an email address'\n  }\n}\n\nvar illegalCharacterRe = new RegExp('([' + [\n  \"'\"\n].join() + '])')\n\nfunction username (un) {\n  if (un !== un.toLowerCase()) {\n    return new Error(requirements.username.lowerCase)\n  }\n\n  if (un !== encodeURIComponent(un)) {\n    return new Error(requirements.username.urlSafe)\n  }\n\n  if (un.charAt(0) === '.') {\n    return new Error(requirements.username.dot)\n  }\n\n  if (un.length > 214) {\n    return new Error(requirements.username.length)\n  }\n\n  var illegal = un.match(illegalCharacterRe)\n  if (illegal) {\n    return new Error(requirements.username.illegal + ' \"' + illegal[0] + '\"')\n  }\n\n  return null\n}\n\nfunction email (em) {\n  if (!em.match(/^.+@.+\\..+$/)) {\n    return new Error(requirements.email.valid)\n  }\n\n  return null\n}\n\nfunction pw (pw) {\n  return null\n}\n", "var test = require('tap').test\nvar v = require('../npm-user-validate.js').email\n\ntest('email misses an @', function (t) {\n  var err = v('namedomain')\n  t.type(err, 'object')\n  t.end()\n})\n\ntest('email misses a dot', function (t) {\n  var err = v('name@domain')\n  t.type(err, 'object')\n  t.end()\n})\n\ntest('email misses a string before the @', function (t) {\n  var err = v('@domain')\n  t.type(err, 'object')\n  t.end()\n})\n\ntest('email is ok', function (t) {\n  var err = v('name@domain.com')\n  t.type(err, 'null')\n  t.end()\n})\n"], "fixing_code": ["exports.email = email\nexports.pw = pw\nexports.username = username\nvar requirements = exports.requirements = {\n  username: {\n    length: 'Name length must be less than or equal to 214 characters long',\n    lowerCase: 'Name must be lowercase',\n    urlSafe: 'Name may not contain non-url-safe chars',\n    dot: 'Name may not start with \".\"',\n    illegal: 'Name may not contain illegal character'\n  },\n  password: {},\n  email: {\n    length: 'Email length must be less then or equal to 254 characters long',\n    valid: 'Email must be an email address'\n  }\n}\n\nvar illegalCharacterRe = new RegExp('([' + [\n  \"'\"\n].join() + '])')\n\nfunction username (un) {\n  if (un !== un.toLowerCase()) {\n    return new Error(requirements.username.lowerCase)\n  }\n\n  if (un !== encodeURIComponent(un)) {\n    return new Error(requirements.username.urlSafe)\n  }\n\n  if (un.charAt(0) === '.') {\n    return new Error(requirements.username.dot)\n  }\n\n  if (un.length > 214) {\n    return new Error(requirements.username.length)\n  }\n\n  var illegal = un.match(illegalCharacterRe)\n  if (illegal) {\n    return new Error(requirements.username.illegal + ' \"' + illegal[0] + '\"')\n  }\n\n  return null\n}\n\nfunction email (em) {\n  if (em.length > 254) {\n    return new Error(requirements.email.length)\n  }\n  if (!em.match(/^[^@]+@.+\\..+$/)) {\n    return new Error(requirements.email.valid)\n  }\n\n  return null\n}\n\nfunction pw (pw) {\n  return null\n}\n", "var test = require('tap').test\nvar v = require('../npm-user-validate.js').email\n\ntest('email misses an @', function (t) {\n  var err = v('namedomain')\n  t.type(err, 'object')\n  t.end()\n})\n\ntest('email is longer then 254 characters', function (t) {\n  var str = '@'.repeat(255)\n  var err = v(str)\n  t.type(err, 'object')\n  t.end()\n})\n\ntest('email misses a dot', function (t) {\n  var err = v('name@domain')\n  t.type(err, 'object')\n  t.end()\n})\n\ntest('email misses a string before the @', function (t) {\n  var err = v('@domain')\n  t.type(err, 'object')\n  t.end()\n})\n\ntest('email is ok', function (t) {\n  var err = v('name@domain.com')\n  t.type(err, 'null')\n  t.end()\n})\n"], "filenames": ["npm-user-validate.js", "test/email.test.js"], "buggy_code_start_loc": [13, 5], "buggy_code_end_loc": [49, 5], "fixing_code_start_loc": [14, 6], "fixing_code_end_loc": [53, 13], "type": "NVD-CWE-noinfo", "message": "This affects the package npm-user-validate before 1.0.1. The regex that validates user emails took exponentially longer to process long input strings beginning with @ characters.", "other": {"cve": {"id": "CVE-2020-7754", "sourceIdentifier": "report@snyk.io", "published": "2020-10-27T15:15:13.123", "lastModified": "2020-10-27T17:31:05.710", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package npm-user-validate before 1.0.1. The regex that validates user emails took exponentially longer to process long input strings beginning with @ characters."}, {"lang": "es", "value": "Esto afecta al paquete npm-user-validate versiones anteriores a 1.0.1.&#xa0;La expresi\u00f3n regular que comprueba los correos electr\u00f3nicos de los usuarios tard\u00f3 exponencialmente m\u00e1s en procesar cadenas de entrada largas que comienzan con caracteres @"}], "metrics": {"cvssMetricV31": [{"source": "report@snyk.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:npmjs:npm-user-validate:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.0.1", "matchCriteriaId": "2AC44E3C-4A3B-4215-AB0D-34D7395FC274"}]}]}], "references": [{"url": "https://github.com/npm/npm-user-validate/commit/c8a87dac1a4cc6988b5418f30411a8669bef204e", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/npm/npm-user-validate/security/advisories/GHSA-xgh6-85xh-479p", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1019353", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-NPMUSERVALIDATE-1019352", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/npm/npm-user-validate/commit/c8a87dac1a4cc6988b5418f30411a8669bef204e"}}