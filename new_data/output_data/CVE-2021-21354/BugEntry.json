{"buggy_code": ["import logging\nfrom aiohttp import web\nimport os\n\nlogger = logging.getLogger(__package__)\n\n\ndef setup_middlewares(app):\n    error_middleware = error_pages({404: handle_404,\n                                    500: handle_500})\n    app.middlewares.append(error_middleware)\n    app.middlewares.append(cache_control_middleware)\n\n\n# Cache-Control middleware\nCACHE_MAX_AGE = int(os.getenv(\"CACHE_MAX_AGE\", \"30\"))\nNO_CACHE_ENDPOINTS = ['/v1/', '/v1/__version__', '/v1/__heartbeat__', '/v1/__lbheartbeat__']\n\n\nasync def cache_control_middleware(app, handler):\n    async def middleware_handler(request):\n        response = await handler(request)\n        cache_control_value = \"public; max-age={}\".format(CACHE_MAX_AGE)\n        if request.path in NO_CACHE_ENDPOINTS or CACHE_MAX_AGE <= 0:\n            cache_control_value = \"no-cache\"\n        response.headers.setdefault(\"Cache-Control\", cache_control_value)\n        return response\n    return middleware_handler\n\n\n# Error page middlewares\ndef error_pages(overrides):\n    async def middleware(app, handler):\n        async def middleware_handler(request):\n            try:\n                response = await handler(request)\n                override = overrides.get(response.status)\n                if override is None:\n                    return response\n                else:\n                    return await override(request, response)\n            except web.HTTPException as ex:\n                override = overrides.get(ex.status)\n                if override is None:\n                    return await handle_any(request, ex)\n                else:\n                    return await override(request, ex)\n            except Exception as ex:\n                return await handle_500(request, error=ex)\n        return middleware_handler\n    return middleware\n\n\nasync def handle_any(request, response):\n    return web.json_response({\n        \"status\": response.status,\n        \"message\": response.reason\n    }, status=response.status)\n\n\nasync def handle_404(request, response):\n    if 'json' not in response.headers['Content-Type']:\n        if request.path.endswith('/'):\n            return web.HTTPFound(request.path.rstrip('/'))\n        return web.json_response({\n            \"status\": 404,\n            \"message\": \"Page '{}' not found\".format(request.path)\n        }, status=404)\n    return response\n\n\nasync def handle_500(request, response=None, error=None):\n    logger.exception(error)\n    return web.json_response({\n            \"status\": 503,\n            \"message\": \"Service currently unavailable\"\n        }, status=503)\n", "import json\nimport os.path\n\nfrom aiohttp import web, ClientError\nimport mock\nimport pytest\nimport ruamel.yaml as yaml\n\nfrom pollbot import __version__ as pollbot_version, HTTP_API_VERSION, PRODUCTS\nfrom pollbot.app import get_app\nfrom pollbot.middlewares import NO_CACHE_ENDPOINTS\nfrom pollbot.exceptions import TaskError\nfrom pollbot.tasks.buildhub import get_build_ids_for_version\nfrom pollbot.views.release import status_response\nfrom pollbot.utils import Status\n\nHERE = os.path.dirname(__file__)\n\n\n@pytest.fixture\ndef cli(loop, test_client):\n    async def error403(request):\n        raise web.HTTPForbidden()\n\n    async def error404(request):\n        return web.HTTPNotFound()\n\n    async def error(request):\n        raise ValueError()\n\n    app = get_app(loop=loop)\n    app.router.add_get('/error', error)\n    app.router.add_get('/error-403', error403)\n    app.router.add_get('/error-404', error404)\n    return loop.run_until_complete(test_client(app))\n\n\nasync def check_response(cli, url, *, status=200, body=None, method=\"get\", **kwargs):\n    resp = await getattr(cli, method)(url, **kwargs)\n    assert resp.status == status\n    text = json.dumps(body)\n    text = text.replace('http://localhost/', '{}://{}:{}/'.format(\n        resp.url.scheme, resp.url.host, resp.url.port))\n    if body is not None:\n        assert await resp.json() == json.loads(text)\n    return resp\n\n\nasync def test_home_redirects_to_v1(cli):\n    resp = await check_response(cli, \"/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_v1_redirects_to_v1_slash(cli):\n    resp = await check_response(cli, \"/v1\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_redirects_trailing_slashes(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/firefox/54.0\"\n\n\nasync def check_yaml_resource(cli, url, filename, **kwargs):\n    with open(os.path.join(HERE, \"..\", \"pollbot\", filename)) as stream:\n        content = yaml.safe_load(stream)\n    resp = await cli.get(url, headers={\"Host\": \"127.0.0.1\"})\n    content.update(**kwargs)\n    assert await resp.json() == content\n\n\nasync def test_oas_spec(cli):\n    await check_yaml_resource(cli, \"/v1/__api__\", \"api.yaml\", host=\"127.0.0.1\")\n\n\nasync def test_contribute_redirect(cli):\n    resp = await check_response(cli, \"/contribute.json\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/contribute.json\"\n\n\nasync def test_contribute_json(cli):\n    await check_yaml_resource(cli, \"/v1/contribute.json\", \"contribute.yaml\")\n\n\nasync def test_home_body(cli):\n    await check_response(cli, \"/v1/\", body={\n        \"project_name\": \"pollbot\",\n        \"project_version\": pollbot_version,\n        \"url\": \"https://github.com/mozilla/PollBot\",\n        \"http_api_version\": HTTP_API_VERSION,\n        \"docs\": \"http://127.0.0.1/v1/api/doc/\",\n        \"products\": PRODUCTS\n    }, headers={\"Host\": \"127.0.0.1\"})\n\n\nasync def test_status_response_handle_task_errors(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_handle_task_errors_with_links(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message', url='http://www.perdu.com/')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n        \"link\": \"http://www.perdu.com/\"\n    }\n\n\nasync def test_status_response_handle_client_errors(cli):\n    async def error_task(product, version):\n        raise ClientError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_validates_product_name(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"invalid-product\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\",\n    }\n\n\nasync def test_status_response_validates_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"invalid-version\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\",\n    }\n\n\nasync def test_status_response_validates_devedition_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"devedition\", \"version\": \"58.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number for devedition: 58.0\",\n    }\n\n\nasync def test_get_releases_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_get_releases_response_validates_version(cli):\n    await check_response(cli, \"/v1/firefox/invalid-version\", body={\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\"\n    }, status=404)\n\n\nasync def test_403_errors_are_json_responses(cli):\n    await check_response(cli, \"/error-403\", body={\n        \"status\": 403,\n        \"message\": \"Forbidden\"\n    }, status=403)\n\n\nasync def test_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/not-found\", body={\n        \"status\": 404,\n        \"message\": \"Page '/not-found' not found\"\n    }, status=404)\n\n\nasync def test_handle_views_that_return_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/error-404\", body={\n        \"status\": 404,\n        \"message\": \"Page '/error-404' not found\"\n    }, status=404)\n\n\nasync def test_500_pages_are_json_responses(cli):\n    await check_response(cli, \"/error\", body={\n        \"status\": 503,\n        \"message\": \"Service currently unavailable\"\n    }, status=503)\n\n\nasync def test_get_checks_for_nightly(cli):\n    await check_response(cli, \"/v1/firefox/57.0a1\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0a1\",\n        \"channel\": \"nightly\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_beta(cli):\n    await check_response(cli, \"/v1/firefox/56.0b6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"beta\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n\n        ]\n    })\n\n\nasync def test_get_checks_for_devedition(cli):\n    await check_response(cli, \"/v1/devedition/56.0b6\", body={\n        \"product\": \"devedition\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"aurora\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/archive\",\n             \"title\": \"Archive Release\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_candidates(cli):\n    await check_response(cli, \"/v1/firefox/57.0rc6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0rc6\",\n        \"channel\": \"candidate\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {'title': 'Partner repacks', \"actionable\": True,\n             'url': 'http://localhost/v1/firefox/57.0rc6/archive/partner-repacks'},\n        ]\n    })\n\n\nasync def test_get_checks_for_release(cli):\n    await check_response(cli, \"/v1/firefox/54.0\", body={\n        \"product\": \"firefox\",\n        \"version\": \"54.0\",\n        \"channel\": \"release\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {'title': 'Telemetry Main Summary Uptake (24h latency)', \"actionable\": False,\n             'url': 'http://localhost/v1/firefox/54.0/telemetry/main-summary-uptake'},\n        ]\n    })\n\n\nasync def test_get_checks_for_esr(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr\", body={\n        \"product\": \"firefox\",\n        \"version\": \"52.3.0esr\",\n        \"channel\": \"esr\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/56.0\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\n# These are currently functional tests.\n\nasync def test_nightly_archive(cli):\n    resp = await check_response(cli, \"/v1/firefox/58.0a1/archive\")\n    body = await resp.json()\n    assert 'firefox/nightly/latest-mozilla-central-l10n' in body['message']\n    assert body['link'] == (\"https://archive.mozilla.org/pub/firefox/nightly/\"\n                            \"latest-mozilla-central-l10n/\")\n    assert body['status'] in (Status.EXISTS.value, Status.INCOMPLETE.value, Status.MISSING.value)\n\n\nasync def test_release_archive(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/54.0/ \"\n        \"and all 94 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/54.0/\"\n    })\n\n\nasync def test_candidate_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_archive_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/56.0b10\"\n        \"/ and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/56.0b10/\"\n    })\n\n\nasync def test_devedition_archive(cli):\n    await check_response(cli, \"/v1/devedition/59.0b5/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/devedition/releases\"\n        \"/59.0b5/ and all 97 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/devedition/releases/59.0b5/\"\n    })\n\n\nasync def test_esr_archive(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/\"\n        \"52.3.0esr/ and all 92 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/52.3.0esr/\"\n    })\n\n\nasync def test_release_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/54.0-candidates/build3/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/54.0-candidates/build3/\"\n    })\n\n\nasync def test_candidate_partner_repacks_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0b10-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0b10-candidates/build1/\"\n    })\n\n\nasync def test_release_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-release\"\n\n\nasync def test_release_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20170608175746, 20170608105825\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=54.0&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1rc2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub_build(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1build2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_devedition_buildhub(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20180108140638\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=58.0b15&products[0]=devedition&channel[0]=aurora\")\n\n\nasync def test_release_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/57.0.2/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 57.0.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/57.0.2/releasenotes/\"\n    })\n\n\nasync def test_devedition_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 58.0beta.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/58.0beta/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_esr_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/52.5.2esr/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 52.5.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/52.5.2/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_security_advisories(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/security-advisories\")\n    body = await resp.json()\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Security advisories for release were updated up to version\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/security/known-vulnerabilities/firefox/\"\n\n\nasync def test_release_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/firefox/all/\"\n\n\nasync def test_devedition_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\n# FIXME(willkg): This fails because mozilla.org redid their /firefox/all/ page.\n# See https://github.com/mozilla/PollBot/issues/247\n@pytest.mark.xfail\nasync def test_release_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for RELEASE redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/firefox/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_devedition_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for DEVEDITION redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_release_product_details(cli):\n    await check_response(cli, \"/v1/firefox/54.0/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 54.0\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_devedition_product_details(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 58.0b15\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_beta_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/firefox/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_devedition_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/devedition/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_release_product_details_devedition_and_beta_versions_matches(cli):\n    url = \"/v1/firefox/54.0/product-details/devedition-beta-versions-matches\"\n    await check_response(cli, url, body={\n        \"status\": Status.MISSING.value,\n        \"message\": \"No devedition and beta check for 'release' releases\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox_versions.json\"\n    })\n\n\nasync def test_esr_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/52.3.0esr/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/esr52\"\n\n\nasync def test_beta_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-beta\"\n\n\nasync def test_devedition_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/devedition/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated for Devedition\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/devedition\"\n\n\nasync def test_nightly_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/57.0a1/balrog-rules\")\n    body = await resp.json()\n    assert \"Balrog rule is configured\" in body[\"message\"]\n    assert body[\"status\"] in (Status.EXISTS.value, Status.MISSING.value, Status.INCOMPLETE.value)\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-nightly\"\n\n\nasync def test_firefox_releases_list(cli):\n    resp = await check_response(cli, \"/v1/firefox\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n\n\nasync def test_devedition_releases_list(cli):\n    resp = await check_response(cli, \"/v1/devedition\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n    assert all(['rc' not in version for version in body[\"releases\"]])\n\n\n# Utilities\nasync def test_lbheartbeat(cli):\n    await check_response(cli, \"/v1/__lbheartbeat__\",\n                         body={\n                             \"status\": \"running\"\n                         })\n\n\nasync def test_heartbeat(cli):\n    await check_response(cli, \"/v1/__heartbeat__\",\n                         status=503,\n                         body={\n                             \"archive\": True,\n                             \"balrog\": True,\n                             \"bedrock\": True,\n                             \"bouncer\": True,\n                             \"buildhub\": True,\n                             \"product-details\": True,\n                             \"telemetry\": False,\n                             \"thunderbird_net\": True,\n                         })\n\n\nasync def test_version_view_return_404_if_missing_file(cli):\n    with mock.patch(\"builtins.open\", side_effect=IOError):\n        await check_response(cli, \"/v1/__version__\",\n                             status=404,\n                             body={\n                                 \"status\": 404,\n                                 \"message\": \"Page '/v1/__version__' not found\"\n                             })\n\n\nasync def test_version_view_return_200(cli):\n    with open(\"version.json\") as fd:\n        await check_response(cli, \"/v1/__version__\",\n                             body=json.load(fd))\n\n\nasync def test_ongoing_versions_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/ongoing-versions\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_ongoing_versions_view_firefox(cli):\n    resp = await check_response(cli, \"/v1/firefox/ongoing-versions\")\n    body = await resp.json()\n    assert \"esr\" in body\n    assert \"release\" in body\n    assert \"beta\" in body\n    assert \"nightly\" in body\n    assert \"devedition\" not in body\n\n\nasync def test_ongoing_versions_view_devedition(cli):\n    resp = await check_response(cli, \"/v1/devedition/ongoing-versions\")\n    body = await resp.json()\n    assert \"devedition\" in body\n\n\n@pytest.mark.parametrize(\"endpoint\", NO_CACHE_ENDPOINTS)\nasync def test_endpoint_have_got_cache_control_headers(cli, endpoint):\n    resp = await cli.get(endpoint)\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"no-cache\"\n\n\nasync def test_product_endpoint_have_got_cache_control_headers(cli):\n    resp = await cli.get(\"/v1/firefox/54.0\")\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"public; max-age=30\"\n\n\nasync def test_cache_control_header_max_age_can_be_parametrized(cli):\n    with mock.patch(\"pollbot.middlewares.CACHE_MAX_AGE\", 10):\n        resp = await cli.get(\"/v1/firefox/54.0\")\n        assert \"Cache-Control\" in resp.headers\n        assert resp.headers[\"Cache-Control\"] == \"public; max-age=10\"\n\n\nasync def test_get_buildid_for_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0b5\")\n    assert build_ids == ['20171002181526']\n\n\nasync def test_get_buildid_for_nightly_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0a1\", size=100)\n    assert build_ids == [\n        '20170921100141', '20170920220431', '20170920100426', '20170919220202', '20170919100405',\n        '20170918220054', '20170918100059', '20170917220255', '20170917100334', '20170916220246',\n        '20170916100147', '20170915220136', '20170915100121', '20170914220209', '20170914100122',\n        '20170913220121', '20170913100125', '20170912220343', '20170912100139', '20170912013600',\n        '20170911100210', '20170910220126', '20170910100150', '20170909220406', '20170909100226',\n        '20170908220146', '20170908100218', '20170907220212', '20170907100318', '20170906220306',\n        '20170906100107', '20170905220108', '20170905100117', '20170904220027', '20170904100131',\n        '20170903220032', '20170903100443', '20170902220453', '20170902100317', '20170901220209',\n        '20170901151028', '20170901100309', '20170831220208', '20170831100258', '20170830220349',\n        '20170830100230', '20170829100404', '20170828100127', '20170827100428', '20170826213134',\n        '20170826100418', '20170825100126', '20170824100243', '20170823100553', '20170822142709',\n        '20170822100529', '20170821100350', '20170820100343', '20170819100442', '20170818100226',\n        '20170817100132', '20170816100153', '20170815213904', '20170815183542', '20170815100349',\n        '20170814100258', '20170813183258', '20170813100233', '20170812100345', '20170811100330',\n        '20170810100255', '20170809100326', '20170808114032', '20170808100224', '20170807113452',\n        '20170807100344', '20170806100257', '20170805100334', '20170804193726', '20170804180022',\n        '20170804100354', '20170803134456', '20170803100352', '20170802100302']\n"], "fixing_code": ["import logging\nfrom aiohttp import web\nimport os\n\nlogger = logging.getLogger(__package__)\n\n\ndef setup_middlewares(app):\n    error_middleware = error_pages({404: handle_404,\n                                    500: handle_500})\n    app.middlewares.append(error_middleware)\n    app.middlewares.append(cache_control_middleware)\n\n\n# Cache-Control middleware\nCACHE_MAX_AGE = int(os.getenv(\"CACHE_MAX_AGE\", \"30\"))\nNO_CACHE_ENDPOINTS = ['/v1/', '/v1/__version__', '/v1/__heartbeat__', '/v1/__lbheartbeat__']\n\n\nasync def cache_control_middleware(app, handler):\n    async def middleware_handler(request):\n        response = await handler(request)\n        cache_control_value = \"public; max-age={}\".format(CACHE_MAX_AGE)\n        if request.path in NO_CACHE_ENDPOINTS or CACHE_MAX_AGE <= 0:\n            cache_control_value = \"no-cache\"\n        response.headers.setdefault(\"Cache-Control\", cache_control_value)\n        return response\n    return middleware_handler\n\n\n# Error page middlewares\ndef error_pages(overrides):\n    async def middleware(app, handler):\n        async def middleware_handler(request):\n            try:\n                response = await handler(request)\n                override = overrides.get(response.status)\n                if override is None:\n                    return response\n                else:\n                    return await override(request, response)\n            except web.HTTPException as ex:\n                override = overrides.get(ex.status)\n                if override is None:\n                    return await handle_any(request, ex)\n                else:\n                    return await override(request, ex)\n            except Exception as ex:\n                return await handle_500(request, error=ex)\n        return middleware_handler\n    return middleware\n\n\nasync def handle_any(request, response):\n    return web.json_response({\n        \"status\": response.status,\n        \"message\": response.reason\n    }, status=response.status)\n\n\nasync def handle_404(request, response):\n    if 'json' not in response.headers['Content-Type']:\n        if request.path.endswith('/'):\n            return web.HTTPFound('/' + request.path.strip('/'))\n        return web.json_response({\n            \"status\": 404,\n            \"message\": \"Page '{}' not found\".format(request.path)\n        }, status=404)\n    return response\n\n\nasync def handle_500(request, response=None, error=None):\n    logger.exception(error)\n    return web.json_response({\n            \"status\": 503,\n            \"message\": \"Service currently unavailable\"\n        }, status=503)\n", "import json\nimport os.path\n\nfrom aiohttp import web, ClientError\nimport mock\nimport pytest\nimport ruamel.yaml as yaml\n\nfrom pollbot import __version__ as pollbot_version, HTTP_API_VERSION, PRODUCTS\nfrom pollbot.app import get_app\nfrom pollbot.middlewares import NO_CACHE_ENDPOINTS\nfrom pollbot.exceptions import TaskError\nfrom pollbot.tasks.buildhub import get_build_ids_for_version\nfrom pollbot.views.release import status_response\nfrom pollbot.utils import Status\n\nHERE = os.path.dirname(__file__)\n\n\n@pytest.fixture\ndef cli(loop, test_client):\n    async def error403(request):\n        raise web.HTTPForbidden()\n\n    async def error404(request):\n        return web.HTTPNotFound()\n\n    async def error(request):\n        raise ValueError()\n\n    app = get_app(loop=loop)\n    app.router.add_get('/error', error)\n    app.router.add_get('/error-403', error403)\n    app.router.add_get('/error-404', error404)\n    return loop.run_until_complete(test_client(app))\n\n\nasync def check_response(cli, url, *, status=200, body=None, method=\"get\", **kwargs):\n    resp = await getattr(cli, method)(url, **kwargs)\n    assert resp.status == status\n    text = json.dumps(body)\n    text = text.replace('http://localhost/', '{}://{}:{}/'.format(\n        resp.url.scheme, resp.url.host, resp.url.port))\n    if body is not None:\n        assert await resp.json() == json.loads(text)\n    return resp\n\n\nasync def test_home_redirects_to_v1(cli):\n    resp = await check_response(cli, \"/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_v1_redirects_to_v1_slash(cli):\n    resp = await check_response(cli, \"/v1\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/\"\n\n\nasync def test_redirects_trailing_slashes(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/firefox/54.0\"\n\n\nasync def test_redirects_strip_leading_slashes(cli):\n    resp = await check_response(cli, \"//page/\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/page\"\n\n\nasync def check_yaml_resource(cli, url, filename, **kwargs):\n    with open(os.path.join(HERE, \"..\", \"pollbot\", filename)) as stream:\n        content = yaml.safe_load(stream)\n    resp = await cli.get(url, headers={\"Host\": \"127.0.0.1\"})\n    content.update(**kwargs)\n    assert await resp.json() == content\n\n\nasync def test_oas_spec(cli):\n    await check_yaml_resource(cli, \"/v1/__api__\", \"api.yaml\", host=\"127.0.0.1\")\n\n\nasync def test_contribute_redirect(cli):\n    resp = await check_response(cli, \"/contribute.json\", status=302, allow_redirects=False)\n    assert resp.headers['Location'] == \"/v1/contribute.json\"\n\n\nasync def test_contribute_json(cli):\n    await check_yaml_resource(cli, \"/v1/contribute.json\", \"contribute.yaml\")\n\n\nasync def test_home_body(cli):\n    await check_response(cli, \"/v1/\", body={\n        \"project_name\": \"pollbot\",\n        \"project_version\": pollbot_version,\n        \"url\": \"https://github.com/mozilla/PollBot\",\n        \"http_api_version\": HTTP_API_VERSION,\n        \"docs\": \"http://127.0.0.1/v1/api/doc/\",\n        \"products\": PRODUCTS\n    }, headers={\"Host\": \"127.0.0.1\"})\n\n\nasync def test_status_response_handle_task_errors(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_handle_task_errors_with_links(cli):\n    async def error_task(product, version):\n        raise TaskError('Error message', url='http://www.perdu.com/')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n        \"link\": \"http://www.perdu.com/\"\n    }\n\n\nasync def test_status_response_handle_client_errors(cli):\n    async def error_task(product, version):\n        raise ClientError('Error message')\n    error_endpoint = status_response(error_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert json.loads(resp.body.decode()) == {\n        \"status\": Status.ERROR.value,\n        \"message\": \"Error message\",\n    }\n\n\nasync def test_status_response_validates_product_name(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"invalid-product\", \"version\": \"57.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\",\n    }\n\n\nasync def test_status_response_validates_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"firefox\", \"version\": \"invalid-version\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\",\n    }\n\n\nasync def test_status_response_validates_devedition_version(cli):\n    async def dummy_task(product, version):\n        return True\n    error_endpoint = status_response(dummy_task)\n    request = mock.MagicMock()\n    request.match_info = {\"product\": \"devedition\", \"version\": \"58.0\"}\n    resp = await error_endpoint(request)\n    assert resp.status == 404\n    assert json.loads(resp.body.decode()) == {\n        \"status\": 404,\n        \"message\": \"Invalid version number for devedition: 58.0\",\n    }\n\n\nasync def test_get_releases_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_get_releases_response_validates_version(cli):\n    await check_response(cli, \"/v1/firefox/invalid-version\", body={\n        \"status\": 404,\n        \"message\": \"Invalid version number: invalid-version\"\n    }, status=404)\n\n\nasync def test_403_errors_are_json_responses(cli):\n    await check_response(cli, \"/error-403\", body={\n        \"status\": 403,\n        \"message\": \"Forbidden\"\n    }, status=403)\n\n\nasync def test_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/not-found\", body={\n        \"status\": 404,\n        \"message\": \"Page '/not-found' not found\"\n    }, status=404)\n\n\nasync def test_handle_views_that_return_404_pages_are_json_responses(cli):\n    await check_response(cli, \"/error-404\", body={\n        \"status\": 404,\n        \"message\": \"Page '/error-404' not found\"\n    }, status=404)\n\n\nasync def test_500_pages_are_json_responses(cli):\n    await check_response(cli, \"/error\", body={\n        \"status\": 503,\n        \"message\": \"Service currently unavailable\"\n    }, status=503)\n\n\nasync def test_get_checks_for_nightly(cli):\n    await check_response(cli, \"/v1/firefox/57.0a1\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0a1\",\n        \"channel\": \"nightly\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0a1/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_beta(cli):\n    await check_response(cli, \"/v1/firefox/56.0b6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"beta\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n\n        ]\n    })\n\n\nasync def test_get_checks_for_devedition(cli):\n    await check_response(cli, \"/v1/devedition/56.0b6\", body={\n        \"product\": \"devedition\",\n        \"version\": \"56.0b6\",\n        \"channel\": \"aurora\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/archive\",\n             \"title\": \"Archive Release\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\"\n             \"/devedition-beta-versions-matches\", \"actionable\": True,\n             \"title\": \"Devedition and Beta versions matches\"},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/devedition/56.0b6/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_for_candidates(cli):\n    await check_response(cli, \"/v1/firefox/57.0rc6\", body={\n        \"product\": \"firefox\",\n        \"version\": \"57.0rc6\",\n        \"channel\": \"candidate\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/57.0rc6/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {'title': 'Partner repacks', \"actionable\": True,\n             'url': 'http://localhost/v1/firefox/57.0rc6/archive/partner-repacks'},\n        ]\n    })\n\n\nasync def test_get_checks_for_release(cli):\n    await check_response(cli, \"/v1/firefox/54.0\", body={\n        \"product\": \"firefox\",\n        \"version\": \"54.0\",\n        \"channel\": \"release\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/archive/partner-repacks\",\n             \"title\": \"Partner repacks\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/54.0/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {'title': 'Telemetry Main Summary Uptake (24h latency)', \"actionable\": False,\n             'url': 'http://localhost/v1/firefox/54.0/telemetry/main-summary-uptake'},\n        ]\n    })\n\n\nasync def test_get_checks_for_esr(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr\", body={\n        \"product\": \"firefox\",\n        \"version\": \"52.3.0esr\",\n        \"channel\": \"esr\",\n        \"checks\": [\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/archive\", \"title\": \"Archive Release\",\n             \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/balrog-rules\",\n             \"title\": \"Balrog update rules\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bouncer\",\n             \"title\": \"Bouncer\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/buildhub\",\n             \"title\": \"Buildhub release info\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/download-links\",\n             \"title\": \"Download links\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/product-details\",\n             \"title\": \"Product details\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/release-notes\",\n             \"title\": \"Release notes\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/bedrock/security-advisories\",\n             \"title\": \"Security advisories\", \"actionable\": True},\n            {\"url\": \"http://localhost/v1/firefox/52.3.0esr/telemetry/main-summary-uptake\",\n             \"title\": \"Telemetry Main Summary Uptake (24h latency)\", \"actionable\": False},\n        ]\n    })\n\n\nasync def test_get_checks_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/56.0\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\n# These are currently functional tests.\n\nasync def test_nightly_archive(cli):\n    resp = await check_response(cli, \"/v1/firefox/58.0a1/archive\")\n    body = await resp.json()\n    assert 'firefox/nightly/latest-mozilla-central-l10n' in body['message']\n    assert body['link'] == (\"https://archive.mozilla.org/pub/firefox/nightly/\"\n                            \"latest-mozilla-central-l10n/\")\n    assert body['status'] in (Status.EXISTS.value, Status.INCOMPLETE.value, Status.MISSING.value)\n\n\nasync def test_release_archive(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/54.0/ \"\n        \"and all 94 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/54.0/\"\n    })\n\n\nasync def test_candidate_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_archive_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at \"\n        \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/ \"\n        \"and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_archive(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/56.0b10\"\n        \"/ and all 95 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/56.0b10/\"\n    })\n\n\nasync def test_devedition_archive(cli):\n    await check_response(cli, \"/v1/devedition/59.0b5/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/devedition/releases\"\n        \"/59.0b5/ and all 97 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/devedition/releases/59.0b5/\"\n    })\n\n\nasync def test_esr_archive(cli):\n    await check_response(cli, \"/v1/firefox/52.3.0esr/archive\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"The archive exists at https://archive.mozilla.org/pub/firefox/releases/\"\n        \"52.3.0esr/ and all 92 locales are present for all platforms \"\n        \"(linux-i686, linux-x86_64, mac, win32, win64)\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/releases/52.3.0esr/\"\n    })\n\n\nasync def test_release_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/54.0/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/54.0-candidates/build3/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/54.0-candidates/build3/\"\n    })\n\n\nasync def test_candidate_partner_repacks_build(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2build1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_candidate_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0.2rc1/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0.2-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0.2-candidates/build1/\"\n    })\n\n\nasync def test_beta_partner_repacks(cli):\n    await check_response(cli, \"/v1/firefox/56.0b10/archive/partner-repacks\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Partner-repacks found in https://archive.mozilla.org/pub/\"\n        \"firefox/candidates/56.0b10-candidates/build1/\",\n        \"link\": \"https://archive.mozilla.org/pub/firefox/candidates/56.0b10-candidates/build1/\"\n    })\n\n\nasync def test_release_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-release\"\n\n\nasync def test_release_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20170608175746, 20170608105825\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=54.0&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1rc2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_candidates_buildhub_build(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0.1build2/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20171002220106\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=56.0.1rc2&products[0]=firefox&channel[0]=release\")\n\n\nasync def test_devedition_buildhub(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/buildhub\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Build IDs for this release: 20180108140638\" == body[\"message\"]\n    assert body[\"link\"] == (\"https://buildhub.moz.tools/\"\n                            \"?versions[0]=58.0b15&products[0]=devedition&channel[0]=aurora\")\n\n\nasync def test_release_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/57.0.2/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 57.0.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/57.0.2/releasenotes/\"\n    })\n\n\nasync def test_devedition_bedrock_release_notes(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 58.0beta.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/58.0beta/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_esr_release_notes(cli):\n    await check_response(cli, \"/v1/firefox/52.5.2esr/bedrock/release-notes\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"Release notes were found for version 52.5.2.\",\n        \"link\": \"https://www.mozilla.org/en-US/firefox/52.5.2/releasenotes/\"\n    })\n\n\nasync def test_release_bedrock_security_advisories(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/security-advisories\")\n    body = await resp.json()\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Security advisories for release were updated up to version\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/security/known-vulnerabilities/firefox/\"\n\n\nasync def test_release_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    assert body['link'] == \"https://www.mozilla.org/en-US/firefox/all/\"\n\n\nasync def test_devedition_bedrock_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bedrock/download-links\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"The download links for release have been published\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\n# FIXME(willkg): This fails because mozilla.org redid their /firefox/all/ page.\n# See https://github.com/mozilla/PollBot/issues/247\n@pytest.mark.xfail\nasync def test_release_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/firefox/54.0/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for RELEASE redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/firefox/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_devedition_bouncer_download_links(cli):\n    resp = await check_response(cli, \"/v1/devedition/58.0b15/bouncer\")\n    body = await resp.json()\n\n    assert body['status'] == Status.EXISTS.value\n    assert body['message'].startswith(\"Bouncer for DEVEDITION redirects to version\")\n    url_prefix = \"https://download-installer.cdn.mozilla.net/pub/devedition/releases/\"\n    assert body['link'].startswith(url_prefix)\n\n\nasync def test_release_product_details(cli):\n    await check_response(cli, \"/v1/firefox/54.0/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 54.0\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_devedition_product_details(cli):\n    await check_response(cli, \"/v1/devedition/58.0b15/product-details\", body={\n        \"status\": Status.EXISTS.value,\n        \"message\": \"We found product-details information about version 58.0b15\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox.json\"\n    })\n\n\nasync def test_beta_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/firefox/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_devedition_product_details_devedition_and_beta_versions_matches(cli):\n    await check_response(cli,\n                         \"/v1/devedition/56.0b7/product-details/devedition-beta-versions-matches\",\n                         status=200)\n\n\nasync def test_release_product_details_devedition_and_beta_versions_matches(cli):\n    url = \"/v1/firefox/54.0/product-details/devedition-beta-versions-matches\"\n    await check_response(cli, url, body={\n        \"status\": Status.MISSING.value,\n        \"message\": \"No devedition and beta check for 'release' releases\",\n        \"link\": \"https://product-details.mozilla.org/1.0/firefox_versions.json\"\n    })\n\n\nasync def test_esr_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/52.3.0esr/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] == Status.EXISTS.value\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/esr52\"\n\n\nasync def test_beta_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-beta\"\n\n\nasync def test_devedition_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/devedition/56.0b7/balrog-rules\")\n    body = await resp.json()\n    assert body[\"status\"] in (Status.EXISTS.value, Status.INCOMPLETE.value)\n    assert \"Balrog rule has been updated for Devedition\" in body[\"message\"]\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/devedition\"\n\n\nasync def test_nightly_balrog_rules(cli):\n    resp = await check_response(cli, \"/v1/firefox/57.0a1/balrog-rules\")\n    body = await resp.json()\n    assert \"Balrog rule is configured\" in body[\"message\"]\n    assert body[\"status\"] in (Status.EXISTS.value, Status.MISSING.value, Status.INCOMPLETE.value)\n    assert body[\"link\"] == \"https://aus-api.mozilla.org/api/v1/rules/firefox-nightly\"\n\n\nasync def test_firefox_releases_list(cli):\n    resp = await check_response(cli, \"/v1/firefox\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n\n\nasync def test_devedition_releases_list(cli):\n    resp = await check_response(cli, \"/v1/devedition\")\n    body = await resp.json()\n    assert \"releases\" in body\n    assert all([isinstance(version, str) for version in body[\"releases\"]])\n    assert all(['rc' not in version for version in body[\"releases\"]])\n\n\n# Utilities\nasync def test_lbheartbeat(cli):\n    await check_response(cli, \"/v1/__lbheartbeat__\",\n                         body={\n                             \"status\": \"running\"\n                         })\n\n\nasync def test_heartbeat(cli):\n    await check_response(cli, \"/v1/__heartbeat__\",\n                         status=503,\n                         body={\n                             \"archive\": True,\n                             \"balrog\": True,\n                             \"bedrock\": True,\n                             \"bouncer\": True,\n                             \"buildhub\": True,\n                             \"product-details\": True,\n                             \"telemetry\": False,\n                             \"thunderbird_net\": True,\n                         })\n\n\nasync def test_version_view_return_404_if_missing_file(cli):\n    with mock.patch(\"builtins.open\", side_effect=IOError):\n        await check_response(cli, \"/v1/__version__\",\n                             status=404,\n                             body={\n                                 \"status\": 404,\n                                 \"message\": \"Page '/v1/__version__' not found\"\n                             })\n\n\nasync def test_version_view_return_200(cli):\n    with open(\"version.json\") as fd:\n        await check_response(cli, \"/v1/__version__\",\n                             body=json.load(fd))\n\n\nasync def test_ongoing_versions_response_validates_product_name(cli):\n    await check_response(cli, \"/v1/invalid-product/ongoing-versions\", body={\n        \"status\": 404,\n        \"message\": \"Invalid product: invalid-product not in ('firefox', \"\n                   \"'devedition', 'thunderbird')\"\n    }, status=404)\n\n\nasync def test_ongoing_versions_view_firefox(cli):\n    resp = await check_response(cli, \"/v1/firefox/ongoing-versions\")\n    body = await resp.json()\n    assert \"esr\" in body\n    assert \"release\" in body\n    assert \"beta\" in body\n    assert \"nightly\" in body\n    assert \"devedition\" not in body\n\n\nasync def test_ongoing_versions_view_devedition(cli):\n    resp = await check_response(cli, \"/v1/devedition/ongoing-versions\")\n    body = await resp.json()\n    assert \"devedition\" in body\n\n\n@pytest.mark.parametrize(\"endpoint\", NO_CACHE_ENDPOINTS)\nasync def test_endpoint_have_got_cache_control_headers(cli, endpoint):\n    resp = await cli.get(endpoint)\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"no-cache\"\n\n\nasync def test_product_endpoint_have_got_cache_control_headers(cli):\n    resp = await cli.get(\"/v1/firefox/54.0\")\n    assert \"Cache-Control\" in resp.headers\n    assert resp.headers[\"Cache-Control\"] == \"public; max-age=30\"\n\n\nasync def test_cache_control_header_max_age_can_be_parametrized(cli):\n    with mock.patch(\"pollbot.middlewares.CACHE_MAX_AGE\", 10):\n        resp = await cli.get(\"/v1/firefox/54.0\")\n        assert \"Cache-Control\" in resp.headers\n        assert resp.headers[\"Cache-Control\"] == \"public; max-age=10\"\n\n\nasync def test_get_buildid_for_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0b5\")\n    assert build_ids == ['20171002181526']\n\n\nasync def test_get_buildid_for_nightly_version(cli):\n    build_ids = await get_build_ids_for_version(\"firefox\", \"57.0a1\", size=100)\n    assert build_ids == [\n        '20170921100141', '20170920220431', '20170920100426', '20170919220202', '20170919100405',\n        '20170918220054', '20170918100059', '20170917220255', '20170917100334', '20170916220246',\n        '20170916100147', '20170915220136', '20170915100121', '20170914220209', '20170914100122',\n        '20170913220121', '20170913100125', '20170912220343', '20170912100139', '20170912013600',\n        '20170911100210', '20170910220126', '20170910100150', '20170909220406', '20170909100226',\n        '20170908220146', '20170908100218', '20170907220212', '20170907100318', '20170906220306',\n        '20170906100107', '20170905220108', '20170905100117', '20170904220027', '20170904100131',\n        '20170903220032', '20170903100443', '20170902220453', '20170902100317', '20170901220209',\n        '20170901151028', '20170901100309', '20170831220208', '20170831100258', '20170830220349',\n        '20170830100230', '20170829100404', '20170828100127', '20170827100428', '20170826213134',\n        '20170826100418', '20170825100126', '20170824100243', '20170823100553', '20170822142709',\n        '20170822100529', '20170821100350', '20170820100343', '20170819100442', '20170818100226',\n        '20170817100132', '20170816100153', '20170815213904', '20170815183542', '20170815100349',\n        '20170814100258', '20170813183258', '20170813100233', '20170812100345', '20170811100330',\n        '20170810100255', '20170809100326', '20170808114032', '20170808100224', '20170807113452',\n        '20170807100344', '20170806100257', '20170805100334', '20170804193726', '20170804180022',\n        '20170804100354', '20170803134456', '20170803100352', '20170802100302']\n"], "filenames": ["pollbot/middlewares.py", "tests/test_views.py"], "buggy_code_start_loc": [64, 61], "buggy_code_end_loc": [65, 61], "fixing_code_start_loc": [64, 62], "fixing_code_end_loc": [65, 67], "type": "CWE-601", "message": "Pollbot is open source software which \"frees its human masters from the toilsome task of polling for the state of things during the Firefox release process.\" In Pollbot before version 1.4.4 there is an open redirection vulnerability in the path of \"https://pollbot.services.mozilla.com/\". An attacker can redirect anyone to malicious sites. To Reproduce type in this URL: \"https://pollbot.services.mozilla.com//evil.com/\". Affected versions will redirect to that website when you inject a payload like \"//evil.com/\". This is fixed in version 1.4.4.", "other": {"cve": {"id": "CVE-2021-21354", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-08T19:15:13.333", "lastModified": "2021-03-12T15:21:09.807", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pollbot is open source software which \"frees its human masters from the toilsome task of polling for the state of things during the Firefox release process.\" In Pollbot before version 1.4.4 there is an open redirection vulnerability in the path of \"https://pollbot.services.mozilla.com/\". An attacker can redirect anyone to malicious sites. To Reproduce type in this URL: \"https://pollbot.services.mozilla.com//evil.com/\". Affected versions will redirect to that website when you inject a payload like \"//evil.com/\". This is fixed in version 1.4.4."}, {"lang": "es", "value": "Pollbot es un software de c\u00f3digo abierto que \"libera a sus maestros humanos de la ardua tarea de sondear el estado de las cosas durante el proceso de lanzamiento de Firefox\".&#xa0;En Pollbot versiones anteriores a 1.4.4, se presenta una vulnerabilidad de redireccionamiento abierto en la ruta de \"https://pollbot.services.mozilla.com/\".&#xa0;Un atacante puede redireccionar a cualquier persona a sitios maliciosos.&#xa0;Para reproducir escriba esta URL: \"https://pollbot.services.mozilla.com//evil.com/\".&#xa0;Las versiones afectadas redireccionaran a ese sitio web cuando inyecte una carga \u00fatil como \"//evil.com/\".&#xa0;Esto es corregido en la versi\u00f3n 1.4.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mozilla:pollbot:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.4", "matchCriteriaId": "3FF4092D-8B10-4C05-A89F-534FB926E740"}]}]}], "references": [{"url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1694684", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Permissions Required", "Third Party Advisory"]}, {"url": "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/mozilla/PollBot/commit/6db74a4fcbff258c7cdf51a6ff0724fc10c485e5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mozilla/PollBot/pull/333", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mozilla/PollBot/releases/tag/v1.4.4", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/mozilla/PollBot/security/advisories/GHSA-jhgx-wmq8-jc24", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mozilla/PollBot/commit/6db74a4fcbff258c7cdf51a6ff0724fc10c485e5"}}