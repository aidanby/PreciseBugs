{"buggy_code": ["v3.9.15 (2023-04-06)\n--------------------\n[fix] Security fix (see https://github.com/patriksimek/vm2/issues/515).\n\nv3.9.14 (2023-02-05)\n--------------------\n[new] Support conditional export resolution with custom resolver. (nick-klaviyo)  \n\nv3.9.13 (2022-12-08)\n--------------------\n[fix] Fix typescript errors in index.d.ts  \n\nv3.9.12 (2022-11-29)\n--------------------\n[new] Add file system API.  \n[fix] Fix parsing error with object pattern in catch clause.  \n\nv3.9.11 (2022-08-28)\n--------------------\n[new] Add option `require.strict` to allow to load required modules in non strict mode.  \n[fix] Security fix.  \n\nv3.9.10 (2022-07-05)\n-------------------\n[new] Add uptime to process.  \n[fix] Security fix.  \n[fix] Fix inspection with showProxy.\n\nv3.9.9 (2022-02-24)\n-------------------\n[fix] Bump parser ECMA version to 2022.  \n\nv3.9.8 (2022-02-16)\n-------------------\n[fix] Add function type check for arguments, caller, and callee property check (GeoffRen)  \n[fix] Fix find best extension handler  \n\nv3.9.7 (2022-02-10)\n-------------------\n[fix] Allow relative require from base script  \n[fix] Fix issue with modules with exports clause in package JSON  \n[fix] Added missing whitelist check before custom require  \n[fix] Revert plain object toString behavior  \n[fix] Root path check improved  \n\nv3.9.6 (2022-02-08)\n-------------------\n[fix] Security fixes (XmiliaH)  \n\nv3.9.5 (2021-10-17)\n-------------------\n[new] Editor config (aubelsb2)  \n[fix] Fix for Promise.then breaking  \n[fix] Fix for missing properties on CallSite  \n\nv3.9.4 (2021-10-12)\n-------------------\n[new] Added strict option  \n[fix] Security fixes (XmiliaH)  \n[fix] Fixed bound function causes TypeError (XmiliaH)  \n[fix] Allow extending of frozen objects  \n\nv3.9.3 (2020-04-07)\n-------------------\n[fix] Security fixes  \n[fix] Fixed problems when Promise object is deleted (XmiliaH)  \n[fix] Fixed oversight that write ability can change on non configurable properties (XmiliaH)  \n[fix] Support shebang as node does (XmiliaH)  \n[fix] Property typos (Shigma)\n\n\nv3.9.2 (2020-04-29)\n-------------------\n[new] Added NodeVM options to pass argv & env to process object (XmiliaH)  \n[fix] Fixed breakouts in NodeVM (XmiliaH)  \n[fix] Made async check more robust (XmiliaH)  \n\nv3.9.1 (2020-03-29)\n-------------------\n[fix] Require helpers statically in main (XmiliaH)  \n[fix] Fix for non-configurable property access (XmiliaH)  \n\nv3.9.0 (2020-03-21)\n-------------------\n[new] Added vm.Script `lineOffset` and `columnOffset` options (azu)  \n[new] Allow to specify a compiler per VMScript (XmiliaH)  \n[new] Add option to disable async (XmiliaH)  \n[new] Added allot of jsdoc (XmiliaH)  \n[fix] Fix access to frozen or unconfigurable properties (XmiliaH)  \n[fix] Double wrap Objects to prevent breakout via inspect (XmiliaH)  \n[fix] Compile now compiles VM code (XmiliaH)  \n\nv3.8.4 (2019-09-13)\n-------------------\n[fix] Do not allow precompiling VMScript (XmiliaH)  \n[fix] Security fixes (XmiliaH)  \n\nv3.8.3 (2019-07-31)\n-------------------\n[fix] Security fixes  \n\nv3.8.2 (2019-06-13)\n-------------------\n[fix] toString() on builtin objects  \n\nv3.8.1 (2019-05-02)\n-------------------\n[fix] Module resolver fixes  \n[fix] require('events') works correctly in Node 12  \n[fix] SyntaxError not being instanceOf Error  \n\nv3.8.0 (2019-04-21)\n-------------------\n[new] Allow prohibiting access to eval/wasm in sandbox context  \n[new] Allow transitive external dependencies in sandbox context (Idan Attias)  \n[new] Allow using wildcards in module-names passed using the external attribute (Harel Moshe)  \n[fix] Default to index.js when specified \"main\" does not exist (Harel Moshe)  \n[fix] Security fixes  \n\nv3.7.0 (2019-04-15)\n-------------------\n[new] Add require.resolve (Idan Attias)  \n[new] Support multiple root paths (Idan Attias)  \n\nv3.6.11 (2019-04-08)\n-------------------\n[fix] Contextification of EvalError and URIError  \n[fix] Security fixes  \n\nv3.6.10 (2019-01-28)\n-------------------\n[fix] Add missing console.debug function in NodeVM  \n[fix] Security fixes  \n\nv3.6.9 (2019-01-26)\n-------------------\n[fix] Security fixes  \n\nv3.6.8 (2019-01-26)\n-------------------\n[fix] Security fixes  \n\nv3.6.7 (2019-01-26)\n-------------------\n[fix] Security fixes  \n\nv3.6.6 (2019-01-01)\n-------------------\n[fix] Security fixes  \n\nv3.6.5 (2018-12-31)\n-------------------\n[fix] Security fixes  \n\nv3.6.4 (2018-10-17)\n-------------------\n[fix] Added new to vmwerror when trying to load coffeescipt but can't (dotconnor)  \n[fix] Add arguments to process.nextTick proxy (Patrick Engstr\u00f6m)  \n\nv3.6.3 (2018-08-06)\n-------------------\n[fix] Security fixes  \n\nv3.6.2 (2018-07-05)\n-------------------\n[fix] Security fixes  \n\nv3.6.1 (2018-06-27)\n-------------------\n[fix] Security fixes  \n\nv3.6.0 (2018-05-11)\n-------------------\n[new] Support for custom source extensions  \n[new] WIP support for disallowing Promise  \n[fix] Prevent slow unsafe alloc for Buffers  \n[fix] Refactors around defaults  \n[fix] Types definition update  \n\nv3.5.2 (2017-10-04)\n-------------------\n[fix] Prevent slow unsafe alloc for Buffers  \n\nv3.5.1 (2017-10-04)\n-------------------\n[fix] Prevent unsafe alloc for Buffers  \n\nv3.5.0 (2017-08-31)\n-------------------\n[new] Allow a custom compiler to receive the filetype (Orta Therox)  \n[new] Allow in-sandbox requires to also get called through the compiler (Orta Therox)  \n[new] Support whitelisting modules inside a VM (Orta Therox)  \n[new] Add TypeScript definition (Orta Therox)  \n\nv3.4.0 (2017-03-28)\n-------------------\n[new] Added experimental VM.protect method  \n\nv3.3.1 (2017-03-27)\n-------------------\n[new] Added VM.freeze method  \n\nv3.2.0 (2017-02-10)\n-------------------\n[new] Added support for pre-compiled scripts via VMScript  \n\nv3.1.0 (2016-09-03)\n-------------------\n[new] Added option wrapper (Alizain Feerasta)  \n\nv3.0.1 (2016-07-20)\n-------------------\nInitial release  \n", "\nconst {Parser: AcornParser, isNewLine: acornIsNewLine, getLineInfo: acornGetLineInfo} = require('acorn');\nconst {full: acornWalkFull} = require('acorn-walk');\n\nconst INTERNAL_STATE_NAME = 'VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL';\n\nfunction assertType(node, type) {\n\tif (!node) throw new Error(`None existent node expected '${type}'`);\n\tif (node.type !== type) throw new Error(`Invalid node type '${node.type}' expected '${type}'`);\n\treturn node;\n}\n\nfunction makeNiceSyntaxError(message, code, filename, location, tokenizer) {\n\tconst loc = acornGetLineInfo(code, location);\n\tlet end = location;\n\twhile (end < code.length && !acornIsNewLine(code.charCodeAt(end))) {\n\t\tend++;\n\t}\n\tlet markerEnd = tokenizer.start === location ? tokenizer.end : location + 1;\n\tif (!markerEnd || markerEnd > end) markerEnd = end;\n\tlet markerLen = markerEnd - location;\n\tif (markerLen <= 0) markerLen = 1;\n\tif (message === 'Unexpected token') {\n\t\tconst type = tokenizer.type;\n\t\tif (type.label === 'name' || type.label === 'privateId') {\n\t\t\tmessage = 'Unexpected identifier';\n\t\t} else if (type.label === 'eof') {\n\t\t\tmessage = 'Unexpected end of input';\n\t\t} else if (type.label === 'num') {\n\t\t\tmessage = 'Unexpected number';\n\t\t} else if (type.label === 'string') {\n\t\t\tmessage = 'Unexpected string';\n\t\t} else if (type.label === 'regexp') {\n\t\t\tmessage = 'Unexpected token \\'/\\'';\n\t\t\tmarkerLen = 1;\n\t\t} else {\n\t\t\tconst token = tokenizer.value || type.label;\n\t\t\tmessage = `Unexpected token '${token}'`;\n\t\t}\n\t}\n\tconst error = new SyntaxError(message);\n\tif (!filename) return error;\n\tconst line = code.slice(location - loc.column, end);\n\tconst marker = line.slice(0, loc.column).replace(/\\S/g, ' ') + '^'.repeat(markerLen);\n\terror.stack = `${filename}:${loc.line}\\n${line}\\n${marker}\\n\\n${error.stack}`;\n\treturn error;\n}\n\nfunction transformer(args, body, isAsync, isGenerator, filename) {\n\tlet code;\n\tlet argsOffset;\n\tif (args === null) {\n\t\tcode = body;\n\t\t// Note: Keywords are not allows to contain u escapes\n\t\tif (!/\\b(?:catch|import|async)\\b/.test(code)) {\n\t\t\treturn {__proto__: null, code, hasAsync: false};\n\t\t}\n\t} else {\n\t\tcode = isAsync ? '(async function' : '(function';\n\t\tif (isGenerator) code += '*';\n\t\tcode += ' anonymous(';\n\t\tcode += args;\n\t\targsOffset = code.length;\n\t\tcode += '\\n) {\\n';\n\t\tcode += body;\n\t\tcode += '\\n})';\n\t}\n\n\tconst parser = new AcornParser({\n\t\t__proto__: null,\n\t\tecmaVersion: 2022,\n\t\tallowAwaitOutsideFunction: args === null && isAsync,\n\t\tallowReturnOutsideFunction: args === null\n\t}, code);\n\tlet ast;\n\ttry {\n\t\tast = parser.parse();\n\t} catch (e) {\n\t\t// Try to generate a nicer error message.\n\t\tif (e instanceof SyntaxError && e.pos !== undefined) {\n\t\t\tlet message = e.message;\n\t\t\tconst match = message.match(/^(.*) \\(\\d+:\\d+\\)$/);\n\t\t\tif (match) message = match[1];\n\t\t\te = makeNiceSyntaxError(message, code, filename, e.pos, parser);\n\t\t}\n\t\tthrow e;\n\t}\n\n\tif (args !== null) {\n\t\tconst pBody = assertType(ast, 'Program').body;\n\t\tif (pBody.length !== 1) throw new SyntaxError('Single function literal required');\n\t\tconst expr = pBody[0];\n\t\tif (expr.type !== 'ExpressionStatement') throw new SyntaxError('Single function literal required');\n\t\tconst func = expr.expression;\n\t\tif (func.type !== 'FunctionExpression') throw new SyntaxError('Single function literal required');\n\t\tif (func.body.start !== argsOffset + 3) throw new SyntaxError('Unexpected end of arg string');\n\t}\n\n\tconst insertions = [];\n\tlet hasAsync = false;\n\n\tconst TO_LEFT = -100;\n\tconst TO_RIGHT = 100;\n\n\tlet internStateValiable = undefined;\n\tlet tmpname = 'VM2_INTERNAL_TMPNAME';\n\n\tacornWalkFull(ast, (node, state, type) => {\n\t\tif (type === 'Function') {\n\t\t\tif (node.async) hasAsync = true;\n\t\t}\n\t\tconst nodeType = node.type;\n\t\tif (nodeType === 'CatchClause') {\n\t\t\tconst param = node.param;\n\t\t\tif (param) {\n\t\t\t\tif (param.type === 'ObjectPattern') {\n\t\t\t\t\tinsertions.push({\n\t\t\t\t\t\t__proto__: null,\n\t\t\t\t\t\tpos: node.start,\n\t\t\t\t\t\torder: TO_RIGHT,\n\t\t\t\t\t\tcode: `catch($tmpname){try{throw ${INTERNAL_STATE_NAME}.handleException($tmpname);}`\n\t\t\t\t\t});\n\t\t\t\t\tinsertions.push({\n\t\t\t\t\t\t__proto__: null,\n\t\t\t\t\t\tpos: node.body.end,\n\t\t\t\t\t\torder: TO_LEFT,\n\t\t\t\t\t\tcode: `}`\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst name = assertType(param, 'Identifier').name;\n\t\t\t\t\tconst cBody = assertType(node.body, 'BlockStatement');\n\t\t\t\t\tif (cBody.body.length > 0) {\n\t\t\t\t\t\tinsertions.push({\n\t\t\t\t\t\t\t__proto__: null,\n\t\t\t\t\t\t\tpos: cBody.body[0].start,\n\t\t\t\t\t\t\torder: TO_LEFT,\n\t\t\t\t\t\t\tcode: `${name}=${INTERNAL_STATE_NAME}.handleException(${name});`\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (nodeType === 'WithStatement') {\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.object.start,\n\t\t\t\torder: TO_LEFT,\n\t\t\t\tcode: INTERNAL_STATE_NAME + '.wrapWith('\n\t\t\t});\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.object.end,\n\t\t\t\torder: TO_RIGHT,\n\t\t\t\tcode: ')'\n\t\t\t});\n\t\t} else if (nodeType === 'Identifier') {\n\t\t\tif (node.name === INTERNAL_STATE_NAME) {\n\t\t\t\tif (internStateValiable === undefined || internStateValiable.start > node.start) {\n\t\t\t\t\tinternStateValiable = node;\n\t\t\t\t}\n\t\t\t} else if (node.name.startsWith(tmpname)) {\n\t\t\t\ttmpname = node.name + '_UNIQUE';\n\t\t\t}\n\t\t} else if (nodeType === 'ImportExpression') {\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.start,\n\t\t\t\torder: TO_RIGHT,\n\t\t\t\tcode: INTERNAL_STATE_NAME + '.'\n\t\t\t});\n\t\t}\n\t});\n\n\tif (internStateValiable) {\n\t\tthrow makeNiceSyntaxError('Use of internal vm2 state variable', code, filename, internStateValiable.start, {\n\t\t\t__proto__: null,\n\t\t\tstart: internStateValiable.start,\n\t\t\tend: internStateValiable.end\n\t\t});\n\t}\n\n\tif (insertions.length === 0) return {__proto__: null, code, hasAsync};\n\n\tinsertions.sort((a, b) => (a.pos == b.pos ? a.order - b.order : a.pos - b.pos));\n\n\tlet ncode = '';\n\tlet curr = 0;\n\tfor (let i = 0; i < insertions.length; i++) {\n\t\tconst change = insertions[i];\n\t\tncode += code.substring(curr, change.pos) + change.code.replace(/\\$tmpname/g, tmpname);\n\t\tcurr = change.pos;\n\t}\n\tncode += code.substring(curr);\n\n\treturn {__proto__: null, code: ncode, hasAsync};\n}\n\nexports.INTERNAL_STATE_NAME = INTERNAL_STATE_NAME;\nexports.transformer = transformer;\n", "{\n  \"author\": {\n    \"name\": \"Patrik Simek\",\n    \"url\": \"https://patriksimek.cz\"\n  },\n  \"name\": \"vm2\",\n  \"description\": \"vm2 is a sandbox that can run untrusted code with whitelisted Node's built-in modules. Securely!\",\n  \"keywords\": [\n    \"sandbox\",\n    \"prison\",\n    \"jail\",\n    \"vm\",\n    \"alcatraz\",\n    \"contextify\"\n  ],\n  \"version\": \"3.9.15\",\n  \"main\": \"index.js\",\n  \"sideEffects\": false,\n  \"repository\": \"github:patriksimek/vm2\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"acorn\": \"^8.7.0\",\n    \"acorn-walk\": \"^8.2.0\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^5.16.0\",\n    \"eslint-config-integromat\": \"^1.5.0\",\n    \"mocha\": \"^6.2.2\"\n  },\n  \"engines\": {\n    \"node\": \">=6.0\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha test\",\n    \"pretest\": \"eslint .\"\n  },\n  \"bin\": {\n    \"vm2\": \"./bin/vm2\"\n  },\n  \"types\": \"index.d.ts\"\n}\n"], "fixing_code": ["v3.9.16 (2023-04-11)\n--------------------\n[fix] Security fix (see https://github.com/patriksimek/vm2/issues/516).\n\nv3.9.15 (2023-04-06)\n--------------------\n[fix] Security fix (see https://github.com/patriksimek/vm2/issues/515).\n\nv3.9.14 (2023-02-05)\n--------------------\n[new] Support conditional export resolution with custom resolver. (nick-klaviyo)  \n\nv3.9.13 (2022-12-08)\n--------------------\n[fix] Fix typescript errors in index.d.ts  \n\nv3.9.12 (2022-11-29)\n--------------------\n[new] Add file system API.  \n[fix] Fix parsing error with object pattern in catch clause.  \n\nv3.9.11 (2022-08-28)\n--------------------\n[new] Add option `require.strict` to allow to load required modules in non strict mode.  \n[fix] Security fix.  \n\nv3.9.10 (2022-07-05)\n-------------------\n[new] Add uptime to process.  \n[fix] Security fix.  \n[fix] Fix inspection with showProxy.\n\nv3.9.9 (2022-02-24)\n-------------------\n[fix] Bump parser ECMA version to 2022.  \n\nv3.9.8 (2022-02-16)\n-------------------\n[fix] Add function type check for arguments, caller, and callee property check (GeoffRen)  \n[fix] Fix find best extension handler  \n\nv3.9.7 (2022-02-10)\n-------------------\n[fix] Allow relative require from base script  \n[fix] Fix issue with modules with exports clause in package JSON  \n[fix] Added missing whitelist check before custom require  \n[fix] Revert plain object toString behavior  \n[fix] Root path check improved  \n\nv3.9.6 (2022-02-08)\n-------------------\n[fix] Security fixes (XmiliaH)  \n\nv3.9.5 (2021-10-17)\n-------------------\n[new] Editor config (aubelsb2)  \n[fix] Fix for Promise.then breaking  \n[fix] Fix for missing properties on CallSite  \n\nv3.9.4 (2021-10-12)\n-------------------\n[new] Added strict option  \n[fix] Security fixes (XmiliaH)  \n[fix] Fixed bound function causes TypeError (XmiliaH)  \n[fix] Allow extending of frozen objects  \n\nv3.9.3 (2020-04-07)\n-------------------\n[fix] Security fixes  \n[fix] Fixed problems when Promise object is deleted (XmiliaH)  \n[fix] Fixed oversight that write ability can change on non configurable properties (XmiliaH)  \n[fix] Support shebang as node does (XmiliaH)  \n[fix] Property typos (Shigma)\n\n\nv3.9.2 (2020-04-29)\n-------------------\n[new] Added NodeVM options to pass argv & env to process object (XmiliaH)  \n[fix] Fixed breakouts in NodeVM (XmiliaH)  \n[fix] Made async check more robust (XmiliaH)  \n\nv3.9.1 (2020-03-29)\n-------------------\n[fix] Require helpers statically in main (XmiliaH)  \n[fix] Fix for non-configurable property access (XmiliaH)  \n\nv3.9.0 (2020-03-21)\n-------------------\n[new] Added vm.Script `lineOffset` and `columnOffset` options (azu)  \n[new] Allow to specify a compiler per VMScript (XmiliaH)  \n[new] Add option to disable async (XmiliaH)  \n[new] Added allot of jsdoc (XmiliaH)  \n[fix] Fix access to frozen or unconfigurable properties (XmiliaH)  \n[fix] Double wrap Objects to prevent breakout via inspect (XmiliaH)  \n[fix] Compile now compiles VM code (XmiliaH)  \n\nv3.8.4 (2019-09-13)\n-------------------\n[fix] Do not allow precompiling VMScript (XmiliaH)  \n[fix] Security fixes (XmiliaH)  \n\nv3.8.3 (2019-07-31)\n-------------------\n[fix] Security fixes  \n\nv3.8.2 (2019-06-13)\n-------------------\n[fix] toString() on builtin objects  \n\nv3.8.1 (2019-05-02)\n-------------------\n[fix] Module resolver fixes  \n[fix] require('events') works correctly in Node 12  \n[fix] SyntaxError not being instanceOf Error  \n\nv3.8.0 (2019-04-21)\n-------------------\n[new] Allow prohibiting access to eval/wasm in sandbox context  \n[new] Allow transitive external dependencies in sandbox context (Idan Attias)  \n[new] Allow using wildcards in module-names passed using the external attribute (Harel Moshe)  \n[fix] Default to index.js when specified \"main\" does not exist (Harel Moshe)  \n[fix] Security fixes  \n\nv3.7.0 (2019-04-15)\n-------------------\n[new] Add require.resolve (Idan Attias)  \n[new] Support multiple root paths (Idan Attias)  \n\nv3.6.11 (2019-04-08)\n-------------------\n[fix] Contextification of EvalError and URIError  \n[fix] Security fixes  \n\nv3.6.10 (2019-01-28)\n-------------------\n[fix] Add missing console.debug function in NodeVM  \n[fix] Security fixes  \n\nv3.6.9 (2019-01-26)\n-------------------\n[fix] Security fixes  \n\nv3.6.8 (2019-01-26)\n-------------------\n[fix] Security fixes  \n\nv3.6.7 (2019-01-26)\n-------------------\n[fix] Security fixes  \n\nv3.6.6 (2019-01-01)\n-------------------\n[fix] Security fixes  \n\nv3.6.5 (2018-12-31)\n-------------------\n[fix] Security fixes  \n\nv3.6.4 (2018-10-17)\n-------------------\n[fix] Added new to vmwerror when trying to load coffeescipt but can't (dotconnor)  \n[fix] Add arguments to process.nextTick proxy (Patrick Engstr\u00f6m)  \n\nv3.6.3 (2018-08-06)\n-------------------\n[fix] Security fixes  \n\nv3.6.2 (2018-07-05)\n-------------------\n[fix] Security fixes  \n\nv3.6.1 (2018-06-27)\n-------------------\n[fix] Security fixes  \n\nv3.6.0 (2018-05-11)\n-------------------\n[new] Support for custom source extensions  \n[new] WIP support for disallowing Promise  \n[fix] Prevent slow unsafe alloc for Buffers  \n[fix] Refactors around defaults  \n[fix] Types definition update  \n\nv3.5.2 (2017-10-04)\n-------------------\n[fix] Prevent slow unsafe alloc for Buffers  \n\nv3.5.1 (2017-10-04)\n-------------------\n[fix] Prevent unsafe alloc for Buffers  \n\nv3.5.0 (2017-08-31)\n-------------------\n[new] Allow a custom compiler to receive the filetype (Orta Therox)  \n[new] Allow in-sandbox requires to also get called through the compiler (Orta Therox)  \n[new] Support whitelisting modules inside a VM (Orta Therox)  \n[new] Add TypeScript definition (Orta Therox)  \n\nv3.4.0 (2017-03-28)\n-------------------\n[new] Added experimental VM.protect method  \n\nv3.3.1 (2017-03-27)\n-------------------\n[new] Added VM.freeze method  \n\nv3.2.0 (2017-02-10)\n-------------------\n[new] Added support for pre-compiled scripts via VMScript  \n\nv3.1.0 (2016-09-03)\n-------------------\n[new] Added option wrapper (Alizain Feerasta)  \n\nv3.0.1 (2016-07-20)\n-------------------\nInitial release  \n", "\nconst {Parser: AcornParser, isNewLine: acornIsNewLine, getLineInfo: acornGetLineInfo} = require('acorn');\nconst {full: acornWalkFull} = require('acorn-walk');\n\nconst INTERNAL_STATE_NAME = 'VM2_INTERNAL_STATE_DO_NOT_USE_OR_PROGRAM_WILL_FAIL';\n\nfunction assertType(node, type) {\n\tif (!node) throw new Error(`None existent node expected '${type}'`);\n\tif (node.type !== type) throw new Error(`Invalid node type '${node.type}' expected '${type}'`);\n\treturn node;\n}\n\nfunction makeNiceSyntaxError(message, code, filename, location, tokenizer) {\n\tconst loc = acornGetLineInfo(code, location);\n\tlet end = location;\n\twhile (end < code.length && !acornIsNewLine(code.charCodeAt(end))) {\n\t\tend++;\n\t}\n\tlet markerEnd = tokenizer.start === location ? tokenizer.end : location + 1;\n\tif (!markerEnd || markerEnd > end) markerEnd = end;\n\tlet markerLen = markerEnd - location;\n\tif (markerLen <= 0) markerLen = 1;\n\tif (message === 'Unexpected token') {\n\t\tconst type = tokenizer.type;\n\t\tif (type.label === 'name' || type.label === 'privateId') {\n\t\t\tmessage = 'Unexpected identifier';\n\t\t} else if (type.label === 'eof') {\n\t\t\tmessage = 'Unexpected end of input';\n\t\t} else if (type.label === 'num') {\n\t\t\tmessage = 'Unexpected number';\n\t\t} else if (type.label === 'string') {\n\t\t\tmessage = 'Unexpected string';\n\t\t} else if (type.label === 'regexp') {\n\t\t\tmessage = 'Unexpected token \\'/\\'';\n\t\t\tmarkerLen = 1;\n\t\t} else {\n\t\t\tconst token = tokenizer.value || type.label;\n\t\t\tmessage = `Unexpected token '${token}'`;\n\t\t}\n\t}\n\tconst error = new SyntaxError(message);\n\tif (!filename) return error;\n\tconst line = code.slice(location - loc.column, end);\n\tconst marker = line.slice(0, loc.column).replace(/\\S/g, ' ') + '^'.repeat(markerLen);\n\terror.stack = `${filename}:${loc.line}\\n${line}\\n${marker}\\n\\n${error.stack}`;\n\treturn error;\n}\n\nfunction transformer(args, body, isAsync, isGenerator, filename) {\n\tlet code;\n\tlet argsOffset;\n\tif (args === null) {\n\t\tcode = body;\n\t\t// Note: Keywords are not allows to contain u escapes\n\t\tif (!/\\b(?:catch|import|async)\\b/.test(code)) {\n\t\t\treturn {__proto__: null, code, hasAsync: false};\n\t\t}\n\t} else {\n\t\tcode = isAsync ? '(async function' : '(function';\n\t\tif (isGenerator) code += '*';\n\t\tcode += ' anonymous(';\n\t\tcode += args;\n\t\targsOffset = code.length;\n\t\tcode += '\\n) {\\n';\n\t\tcode += body;\n\t\tcode += '\\n})';\n\t}\n\n\tconst parser = new AcornParser({\n\t\t__proto__: null,\n\t\tecmaVersion: 2022,\n\t\tallowAwaitOutsideFunction: args === null && isAsync,\n\t\tallowReturnOutsideFunction: args === null\n\t}, code);\n\tlet ast;\n\ttry {\n\t\tast = parser.parse();\n\t} catch (e) {\n\t\t// Try to generate a nicer error message.\n\t\tif (e instanceof SyntaxError && e.pos !== undefined) {\n\t\t\tlet message = e.message;\n\t\t\tconst match = message.match(/^(.*) \\(\\d+:\\d+\\)$/);\n\t\t\tif (match) message = match[1];\n\t\t\te = makeNiceSyntaxError(message, code, filename, e.pos, parser);\n\t\t}\n\t\tthrow e;\n\t}\n\n\tif (args !== null) {\n\t\tconst pBody = assertType(ast, 'Program').body;\n\t\tif (pBody.length !== 1) throw new SyntaxError('Single function literal required');\n\t\tconst expr = pBody[0];\n\t\tif (expr.type !== 'ExpressionStatement') throw new SyntaxError('Single function literal required');\n\t\tconst func = expr.expression;\n\t\tif (func.type !== 'FunctionExpression') throw new SyntaxError('Single function literal required');\n\t\tif (func.body.start !== argsOffset + 3) throw new SyntaxError('Unexpected end of arg string');\n\t}\n\n\tconst insertions = [];\n\tlet hasAsync = false;\n\n\tconst TO_LEFT = -100;\n\tconst TO_RIGHT = 100;\n\n\tlet internStateValiable = undefined;\n\tlet tmpname = 'VM2_INTERNAL_TMPNAME';\n\n\tacornWalkFull(ast, (node, state, type) => {\n\t\tif (type === 'Function') {\n\t\t\tif (node.async) hasAsync = true;\n\t\t}\n\t\tconst nodeType = node.type;\n\t\tif (nodeType === 'CatchClause') {\n\t\t\tconst param = node.param;\n\t\t\tif (param) {\n\t\t\t\tif (param.type === 'ObjectPattern') {\n\t\t\t\t\tinsertions.push({\n\t\t\t\t\t\t__proto__: null,\n\t\t\t\t\t\tpos: node.start,\n\t\t\t\t\t\torder: TO_RIGHT,\n\t\t\t\t\t\tcoder: () => `catch(${tmpname}){try{throw(${tmpname}=${INTERNAL_STATE_NAME}.handleException(${tmpname}));}`\n\t\t\t\t\t});\n\t\t\t\t\tinsertions.push({\n\t\t\t\t\t\t__proto__: null,\n\t\t\t\t\t\tpos: node.body.end,\n\t\t\t\t\t\torder: TO_LEFT,\n\t\t\t\t\t\tcoder: () => `}`\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst name = assertType(param, 'Identifier').name;\n\t\t\t\t\tconst cBody = assertType(node.body, 'BlockStatement');\n\t\t\t\t\tif (cBody.body.length > 0) {\n\t\t\t\t\t\tinsertions.push({\n\t\t\t\t\t\t\t__proto__: null,\n\t\t\t\t\t\t\tpos: cBody.body[0].start,\n\t\t\t\t\t\t\torder: TO_LEFT,\n\t\t\t\t\t\t\tcoder: () => `${name}=${INTERNAL_STATE_NAME}.handleException(${name});`\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (nodeType === 'WithStatement') {\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.object.start,\n\t\t\t\torder: TO_LEFT,\n\t\t\t\tcoder: () => INTERNAL_STATE_NAME + '.wrapWith('\n\t\t\t});\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.object.end,\n\t\t\t\torder: TO_RIGHT,\n\t\t\t\tcoder: () => ')'\n\t\t\t});\n\t\t} else if (nodeType === 'Identifier') {\n\t\t\tif (node.name === INTERNAL_STATE_NAME) {\n\t\t\t\tif (internStateValiable === undefined || internStateValiable.start > node.start) {\n\t\t\t\t\tinternStateValiable = node;\n\t\t\t\t}\n\t\t\t} else if (node.name.startsWith(tmpname)) {\n\t\t\t\ttmpname = node.name + '_UNIQUE';\n\t\t\t}\n\t\t} else if (nodeType === 'ImportExpression') {\n\t\t\tinsertions.push({\n\t\t\t\t__proto__: null,\n\t\t\t\tpos: node.start,\n\t\t\t\torder: TO_RIGHT,\n\t\t\t\tcoder: () => INTERNAL_STATE_NAME + '.'\n\t\t\t});\n\t\t}\n\t});\n\n\tif (internStateValiable) {\n\t\tthrow makeNiceSyntaxError('Use of internal vm2 state variable', code, filename, internStateValiable.start, {\n\t\t\t__proto__: null,\n\t\t\tstart: internStateValiable.start,\n\t\t\tend: internStateValiable.end\n\t\t});\n\t}\n\n\tif (insertions.length === 0) return {__proto__: null, code, hasAsync};\n\n\tinsertions.sort((a, b) => (a.pos == b.pos ? a.order - b.order : a.pos - b.pos));\n\n\tlet ncode = '';\n\tlet curr = 0;\n\tfor (let i = 0; i < insertions.length; i++) {\n\t\tconst change = insertions[i];\n\t\tncode += code.substring(curr, change.pos) + change.coder();\n\t\tcurr = change.pos;\n\t}\n\tncode += code.substring(curr);\n\n\treturn {__proto__: null, code: ncode, hasAsync};\n}\n\nexports.INTERNAL_STATE_NAME = INTERNAL_STATE_NAME;\nexports.transformer = transformer;\n", "{\n  \"author\": {\n    \"name\": \"Patrik Simek\",\n    \"url\": \"https://patriksimek.cz\"\n  },\n  \"name\": \"vm2\",\n  \"description\": \"vm2 is a sandbox that can run untrusted code with whitelisted Node's built-in modules. Securely!\",\n  \"keywords\": [\n    \"sandbox\",\n    \"prison\",\n    \"jail\",\n    \"vm\",\n    \"alcatraz\",\n    \"contextify\"\n  ],\n  \"version\": \"3.9.16\",\n  \"main\": \"index.js\",\n  \"sideEffects\": false,\n  \"repository\": \"github:patriksimek/vm2\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"acorn\": \"^8.7.0\",\n    \"acorn-walk\": \"^8.2.0\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^5.16.0\",\n    \"eslint-config-integromat\": \"^1.5.0\",\n    \"mocha\": \"^6.2.2\"\n  },\n  \"engines\": {\n    \"node\": \">=6.0\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha test\",\n    \"pretest\": \"eslint .\"\n  },\n  \"bin\": {\n    \"vm2\": \"./bin/vm2\"\n  },\n  \"types\": \"index.d.ts\"\n}\n"], "filenames": ["CHANGELOG.md", "lib/transformer.js", "package.json"], "buggy_code_start_loc": [0, 121, 16], "buggy_code_end_loc": [0, 190, 17], "fixing_code_start_loc": [1, 121, 16], "fixing_code_end_loc": [5, 190, 17], "type": "CWE-913", "message": "There exists a vulnerability in source code transformer (exception sanitization logic) of vm2 for versions up to 3.9.15, allowing attackers to bypass `handleException()` and leak unsanitized host exceptions which can be used to escape the sandbox and run arbitrary code in host context. A threat actor can bypass the sandbox protections to gain remote code execution rights on the host running the sandbox. This vulnerability was patched in the release of version `3.9.16` of `vm2`.\n", "other": {"cve": {"id": "CVE-2023-29199", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-14T19:15:09.337", "lastModified": "2023-04-25T15:14:48.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "There exists a vulnerability in source code transformer (exception sanitization logic) of vm2 for versions up to 3.9.15, allowing attackers to bypass `handleException()` and leak unsanitized host exceptions which can be used to escape the sandbox and run arbitrary code in host context. A threat actor can bypass the sandbox protections to gain remote code execution rights on the host running the sandbox. This vulnerability was patched in the release of version `3.9.16` of `vm2`.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-913"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vm2_project:vm2:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "3.9.16", "matchCriteriaId": "7E3BC6AA-3926-4AA9-9EE5-4B85232942A1"}]}]}], "references": [{"url": "https://gist.github.com/leesh3288/f05730165799bf56d70391f3d9ea187c", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/patriksimek/vm2/commit/24c724daa7c09f003e556d7cd1c7a8381cb985d7", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/patriksimek/vm2/issues/516", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/patriksimek/vm2/releases/tag/3.9.16", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/patriksimek/vm2/security/advisories/GHSA-xj72-wvfv-8985", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/patriksimek/vm2/commit/24c724daa7c09f003e556d7cd1c7a8381cb985d7"}}