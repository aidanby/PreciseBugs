{"buggy_code": ["/**\n * Copyright (c) 2004-2011 QOS.ch\n * All rights reserved.\n *\n * Permission is hereby granted, free  of charge, to any person obtaining\n * a  copy  of this  software  and  associated  documentation files  (the\n * \"Software\"), to  deal in  the Software without  restriction, including\n * without limitation  the rights to  use, copy, modify,  merge, publish,\n * distribute,  sublicense, and/or sell  copies of  the Software,  and to\n * permit persons to whom the Software  is furnished to do so, subject to\n * the following conditions:\n *\n * The  above  copyright  notice  and  this permission  notice  shall  be\n * included in all copies or substantial portions of the Software.\n *\n * THE  SOFTWARE IS  PROVIDED  \"AS  IS\", WITHOUT  WARRANTY  OF ANY  KIND,\n * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF\n * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n */\npackage org.slf4j.ext;\n\nimport java.io.Serializable;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.beans.XMLDecoder;\nimport java.beans.XMLEncoder;\nimport java.beans.ExceptionListener;\n\n/**\n * Base class for Event Data. Event Data contains data to be logged about an\n * event. Users may extend this class for each EventType they want to log.\n * \n * @author Ralph Goers\n */\npublic class EventData implements Serializable {\n\n    private static final long serialVersionUID = 153270778642103985L;\n\n    private Map<String, Object> eventData = new HashMap<String, Object>();\n    public static final String EVENT_MESSAGE = \"EventMessage\";\n    public static final String EVENT_TYPE = \"EventType\";\n    public static final String EVENT_DATETIME = \"EventDateTime\";\n    public static final String EVENT_ID = \"EventId\";\n\n    /**\n     * Default Constructor\n     */\n    public EventData() {\n    }\n\n    /**\n     * Constructor to create event data from a Map.\n     * \n     * @param map\n     *          The event data.\n     */\n    public EventData(Map<String, Object> map) {\n        eventData.putAll(map);\n    }\n\n    /**\n     * Construct from a serialized form of the Map containing the RequestInfo\n     * elements\n     * \n     * @param xml\n     *          The serialized form of the RequestInfo Map.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public EventData(String xml) {\n        ByteArrayInputStream bais = new ByteArrayInputStream(xml.getBytes());\n        try {\n            XMLDecoder decoder = new XMLDecoder(bais);\n            this.eventData = (Map<String, Object>) decoder.readObject();\n        } catch (Exception e) {\n            throw new EventException(\"Error decoding \" + xml, e);\n        }\n    }\n\n    /**\n     * Serialize all the EventData items into an XML representation.\n     * \n     * @return an XML String containing all the EventData items.\n     */\n    public String toXML() {\n        return toXML(eventData);\n    }\n\n    /**\n     * Serialize all the EventData items into an XML representation.\n     * \n     * @param map the Map to transform\n     * @return an XML String containing all the EventData items.\n     */\n    public static String toXML(Map<String, Object> map) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n            XMLEncoder encoder = new XMLEncoder(baos);\n            encoder.setExceptionListener(new ExceptionListener() {\n                public void exceptionThrown(Exception exception) {\n                    exception.printStackTrace();\n                }\n            });\n            encoder.writeObject(map);\n            encoder.close();\n            return baos.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * Retrieve the event identifier.\n     * \n     * @return The event identifier\n     */\n    public String getEventId() {\n        return (String) this.eventData.get(EVENT_ID);\n    }\n\n    /**\n     * Set the event identifier.\n     * \n     * @param eventId\n     *          The event identifier.\n     */\n    public void setEventId(String eventId) {\n        if (eventId == null) {\n            throw new IllegalArgumentException(\"eventId cannot be null\");\n        }\n        this.eventData.put(EVENT_ID, eventId);\n    }\n\n    /**\n     * Retrieve the message text associated with this event, if any.\n     * \n     * @return The message text associated with this event or null if there is\n     *         none.\n     */\n    public String getMessage() {\n        return (String) this.eventData.get(EVENT_MESSAGE);\n    }\n\n    /**\n     * Set the message text associated with this event.\n     * \n     * @param message\n     *          The message text.\n     */\n    public void setMessage(String message) {\n        this.eventData.put(EVENT_MESSAGE, message);\n    }\n\n    /**\n     * Retrieve the date and time the event occurred.\n     * \n     * @return The Date associated with the event.\n     */\n    public Date getEventDateTime() {\n        return (Date) this.eventData.get(EVENT_DATETIME);\n    }\n\n    /**\n     * Set the date and time the event occurred in case it is not the same as when\n     * the event was logged.\n     * \n     * @param eventDateTime\n     *          The event Date.\n     */\n    public void setEventDateTime(Date eventDateTime) {\n        this.eventData.put(EVENT_DATETIME, eventDateTime);\n    }\n\n    /**\n     * Set the type of event that occurred.\n     * \n     * @param eventType\n     *          The type of the event.\n     */\n    public void setEventType(String eventType) {\n        this.eventData.put(EVENT_TYPE, eventType);\n    }\n\n    /**\n     * Retrieve the type of the event.\n     * \n     * @return The event type.\n     */\n    public String getEventType() {\n        return (String) this.eventData.get(EVENT_TYPE);\n    }\n\n    /**\n     * Add arbitrary attributes about the event.\n     * \n     * @param name\n     *          The attribute's key.\n     * @param obj\n     *          The data associated with the key.\n     */\n    public void put(String name, Serializable obj) {\n        this.eventData.put(name, obj);\n    }\n\n    /**\n     * Retrieve an event attribute.\n     * \n     * @param name\n     *          The attribute's key.\n     * @return The value associated with the key or null if the key is not\n     *         present.\n     */\n    public Serializable get(String name) {\n        return (Serializable) this.eventData.get(name);\n    }\n\n    /**\n     * Populate the event data from a Map.\n     * \n     * @param data\n     *          The Map to copy.\n     */\n    public void putAll(Map<String, Object> data) {\n        this.eventData.putAll(data);\n    }\n\n    /**\n     * Returns the number of attributes in the EventData.\n     * \n     * @return the number of attributes in the EventData.\n     */\n    public int getSize() {\n        return this.eventData.size();\n    }\n\n    /**\n     * Returns an Iterator over all the entries in the EventData.\n     * \n     * @return an Iterator that can be used to access all the event attributes.\n     */\n    public Iterator<Map.Entry<String, Object>> getEntrySetIterator() {\n        return this.eventData.entrySet().iterator();\n    }\n\n    /**\n     * Retrieve all the attributes in the EventData as a Map. Changes to this map\n     * will be reflected in the EventData.\n     * \n     * @return The Map of attributes in this EventData instance.\n     */\n    public Map<String, Object> getEventMap() {\n        return this.eventData;\n    }\n\n    /**\n     * Convert the EventData to a String.\n     * \n     * @return The EventData as a String.\n     */\n    @Override\n    public String toString() {\n        return toXML();\n    }\n\n    /**\n     * Compare two EventData objects for equality.\n     * \n     * @param o\n     *          The Object to compare.\n     * @return true if the objects are the same instance or contain all the same\n     *         keys and their values.\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof EventData || o instanceof Map)) {\n            return false;\n        }\n        Map<String, Object> map = (o instanceof EventData) ? ((EventData) o).getEventMap() : (Map<String, Object>) o;\n\n        return this.eventData.equals(map);\n    }\n\n    /**\n     * Compute the hashCode for this EventData instance.\n     * \n     * @return The hashcode for this EventData instance.\n     */\n    @Override\n    public int hashCode() {\n        return this.eventData.hashCode();\n    }\n}"], "fixing_code": ["/**\n * Copyright (c) 2004-2011 QOS.ch\n * All rights reserved.\n *\n * Permission is hereby granted, free  of charge, to any person obtaining\n * a  copy  of this  software  and  associated  documentation files  (the\n * \"Software\"), to  deal in  the Software without  restriction, including\n * without limitation  the rights to  use, copy, modify,  merge, publish,\n * distribute,  sublicense, and/or sell  copies of  the Software,  and to\n * permit persons to whom the Software  is furnished to do so, subject to\n * the following conditions:\n *\n * The  above  copyright  notice  and  this permission  notice  shall  be\n * included in all copies or substantial portions of the Software.\n *\n * THE  SOFTWARE IS  PROVIDED  \"AS  IS\", WITHOUT  WARRANTY  OF ANY  KIND,\n * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF\n * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n */\npackage org.slf4j.ext;\n\nimport java.io.Serializable;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.beans.XMLDecoder;\nimport java.beans.XMLEncoder;\nimport java.beans.ExceptionListener;\n\n/**\n * Base class for Event Data. Event Data contains data to be logged about an\n * event. Users may extend this class for each EventType they want to log.\n * \n * @author Ralph Goers\n * \n * @deprecated Due to a security vulnerability, this class will be removed without replacement.\n */\npublic class EventData implements Serializable {\n\n    private static final long serialVersionUID = 153270778642103985L;\n\n    private Map<String, Object> eventData = new HashMap<String, Object>();\n    public static final String EVENT_MESSAGE = \"EventMessage\";\n    public static final String EVENT_TYPE = \"EventType\";\n    public static final String EVENT_DATETIME = \"EventDateTime\";\n    public static final String EVENT_ID = \"EventId\";\n\n    /**\n     * Default Constructor\n     */\n    public EventData() {\n    }\n\n    /**\n     * Constructor to create event data from a Map.\n     * \n     * @param map\n     *          The event data.\n     */\n    public EventData(Map<String, Object> map) {\n        eventData.putAll(map);\n    }\n\n    /**\n     * Construct from a serialized form of the Map containing the RequestInfo\n     * elements\n     * \n     * @param xml\n     *          The serialized form of the RequestInfo Map.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public EventData(String xml) {\n        ByteArrayInputStream bais = new ByteArrayInputStream(xml.getBytes());\n        try {\n            XMLDecoder decoder = new XMLDecoder(bais);\n            this.eventData = (Map<String, Object>) decoder.readObject();\n        } catch (Exception e) {\n            throw new EventException(\"Error decoding \" + xml, e);\n        }\n    }\n\n    /**\n     * Serialize all the EventData items into an XML representation.\n     * \n     * @return an XML String containing all the EventData items.\n     */\n    public String toXML() {\n        return toXML(eventData);\n    }\n\n    /**\n     * Serialize all the EventData items into an XML representation.\n     * \n     * @param map the Map to transform\n     * @return an XML String containing all the EventData items.\n     */\n    public static String toXML(Map<String, Object> map) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n            XMLEncoder encoder = new XMLEncoder(baos);\n            encoder.setExceptionListener(new ExceptionListener() {\n                public void exceptionThrown(Exception exception) {\n                    exception.printStackTrace();\n                }\n            });\n            encoder.writeObject(map);\n            encoder.close();\n            return baos.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * Retrieve the event identifier.\n     * \n     * @return The event identifier\n     */\n    public String getEventId() {\n        return (String) this.eventData.get(EVENT_ID);\n    }\n\n    /**\n     * Set the event identifier.\n     * \n     * @param eventId\n     *          The event identifier.\n     */\n    public void setEventId(String eventId) {\n        if (eventId == null) {\n            throw new IllegalArgumentException(\"eventId cannot be null\");\n        }\n        this.eventData.put(EVENT_ID, eventId);\n    }\n\n    /**\n     * Retrieve the message text associated with this event, if any.\n     * \n     * @return The message text associated with this event or null if there is\n     *         none.\n     */\n    public String getMessage() {\n        return (String) this.eventData.get(EVENT_MESSAGE);\n    }\n\n    /**\n     * Set the message text associated with this event.\n     * \n     * @param message\n     *          The message text.\n     */\n    public void setMessage(String message) {\n        this.eventData.put(EVENT_MESSAGE, message);\n    }\n\n    /**\n     * Retrieve the date and time the event occurred.\n     * \n     * @return The Date associated with the event.\n     */\n    public Date getEventDateTime() {\n        return (Date) this.eventData.get(EVENT_DATETIME);\n    }\n\n    /**\n     * Set the date and time the event occurred in case it is not the same as when\n     * the event was logged.\n     * \n     * @param eventDateTime\n     *          The event Date.\n     */\n    public void setEventDateTime(Date eventDateTime) {\n        this.eventData.put(EVENT_DATETIME, eventDateTime);\n    }\n\n    /**\n     * Set the type of event that occurred.\n     * \n     * @param eventType\n     *          The type of the event.\n     */\n    public void setEventType(String eventType) {\n        this.eventData.put(EVENT_TYPE, eventType);\n    }\n\n    /**\n     * Retrieve the type of the event.\n     * \n     * @return The event type.\n     */\n    public String getEventType() {\n        return (String) this.eventData.get(EVENT_TYPE);\n    }\n\n    /**\n     * Add arbitrary attributes about the event.\n     * \n     * @param name\n     *          The attribute's key.\n     * @param obj\n     *          The data associated with the key.\n     */\n    public void put(String name, Serializable obj) {\n        this.eventData.put(name, obj);\n    }\n\n    /**\n     * Retrieve an event attribute.\n     * \n     * @param name\n     *          The attribute's key.\n     * @return The value associated with the key or null if the key is not\n     *         present.\n     */\n    public Serializable get(String name) {\n        return (Serializable) this.eventData.get(name);\n    }\n\n    /**\n     * Populate the event data from a Map.\n     * \n     * @param data\n     *          The Map to copy.\n     */\n    public void putAll(Map<String, Object> data) {\n        this.eventData.putAll(data);\n    }\n\n    /**\n     * Returns the number of attributes in the EventData.\n     * \n     * @return the number of attributes in the EventData.\n     */\n    public int getSize() {\n        return this.eventData.size();\n    }\n\n    /**\n     * Returns an Iterator over all the entries in the EventData.\n     * \n     * @return an Iterator that can be used to access all the event attributes.\n     */\n    public Iterator<Map.Entry<String, Object>> getEntrySetIterator() {\n        return this.eventData.entrySet().iterator();\n    }\n\n    /**\n     * Retrieve all the attributes in the EventData as a Map. Changes to this map\n     * will be reflected in the EventData.\n     * \n     * @return The Map of attributes in this EventData instance.\n     */\n    public Map<String, Object> getEventMap() {\n        return this.eventData;\n    }\n\n    /**\n     * Convert the EventData to a String.\n     * \n     * @return The EventData as a String.\n     */\n    @Override\n    public String toString() {\n        return toXML();\n    }\n\n    /**\n     * Compare two EventData objects for equality.\n     * \n     * @param o\n     *          The Object to compare.\n     * @return true if the objects are the same instance or contain all the same\n     *         keys and their values.\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof EventData || o instanceof Map)) {\n            return false;\n        }\n        Map<String, Object> map = (o instanceof EventData) ? ((EventData) o).getEventMap() : (Map<String, Object>) o;\n\n        return this.eventData.equals(map);\n    }\n\n    /**\n     * Compute the hashCode for this EventData instance.\n     * \n     * @return The hashcode for this EventData instance.\n     */\n    @Override\n    public int hashCode() {\n        return this.eventData.hashCode();\n    }\n}"], "filenames": ["slf4j-ext/src/main/java/org/slf4j/ext/EventData.java"], "buggy_code_start_loc": [42], "buggy_code_end_loc": [42], "fixing_code_start_loc": [43], "fixing_code_end_loc": [45], "type": "NVD-CWE-noinfo", "message": "org.slf4j.ext.EventData in the slf4j-ext module in QOS.CH SLF4J before 1.8.0-beta2 allows remote attackers to bypass intended access restrictions via crafted data. EventData in the slf4j-ext module in QOS.CH SLF4J, has been fixed in SLF4J versions 1.7.26 later and in the 2.0.x series.", "other": {"cve": {"id": "CVE-2018-8088", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-20T16:29:00.547", "lastModified": "2022-01-31T19:15:07.870", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "org.slf4j.ext.EventData in the slf4j-ext module in QOS.CH SLF4J before 1.8.0-beta2 allows remote attackers to bypass intended access restrictions via crafted data. EventData in the slf4j-ext module in QOS.CH SLF4J, has been fixed in SLF4J versions 1.7.26 later and in the 2.0.x series."}, {"lang": "es", "value": "org.slf4j.ext.EventData en el m\u00f3dulo slf4j-ext en QOS.CH SLF4J antes de la versi\u00f3n 1.8.0-beta2 permite a los atacantes remotos saltarse las restricciones de acceso previstas a trav\u00e9s de datos manipulados. EventData en el m\u00f3dulo slf4j-ext en QOS.CH SLF4J, ha sido corregido en las versiones 1.7.26 posteriores de SLF4J y en la serie 2.0.x"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:qos:slf4j:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.26", "matchCriteriaId": "D42F1233-D2BD-4CF0-94F9-8BE35346BC1F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:qos:slf4j:1.8.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "53E5592F-9FFB-4ABE-82B9-D6A130359C6C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:qos:slf4j:1.8.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "51E52584-4E04-40CE-AD6D-7D2B9A97DF2C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:qos:slf4j:1.8.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "9EA01C6A-4A37-436E-939E-A4C6E29D0F81"}, {"vulnerable": true, "criteria": "cpe:2.3:a:qos:slf4j:1.8.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "BA0E73F4-0197-422E-B454-A6090BD1D911"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jboss_enterprise_application_platform:7.1:*:*:*:*:*:*:*", "matchCriteriaId": "7117F117-D439-45EB-BB95-397E5E52C9BB"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F6AB192-9D7D-4A9A-8995-E53A9DE9EAFC"}, {"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "142AD0DD-4CF3-4D74-9442-459CE3347E3A"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B142ACCC-F7A9-4A3B-BE60-0D6691D5058D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jboss_enterprise_application_platform:6.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "B1ABA871-3271-48E2-A69C-5AD70AF94E53"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:5.0:*:*:*:*:*:*:*", "matchCriteriaId": "1D8B549B-E57B-4DFE-8A13-CAB06B5356B3"}, {"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F6AB192-9D7D-4A9A-8995-E53A9DE9EAFC"}, {"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "142AD0DD-4CF3-4D74-9442-459CE3347E3A"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:virtualization:4.0:*:*:*:*:*:*:*", "matchCriteriaId": "6BBD7A51-0590-4DDF-8249-5AFA8D645CB6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:virtualization_host:4.0:*:*:*:*:*:*:*", "matchCriteriaId": "BB28F9AF-3D06-4532-B397-96D7E4792503"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "51EF4996-72F4-4FA4-814F-F5991E7A8318"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "33C068A4-3780-4EAB-A937-6082DF847564"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "F96E3779-F56A-45FF-BB3D-4980527D721E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.5:*:*:*:*:*:*:*", "matchCriteriaId": "0CF73560-2F5B-4723-A8A1-9AADBB3ADA00"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "5BF3C7A5-9117-42C7-BEA1-4AA378A582EF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "83737173-E12E-4641-BC49-0BD84A6B29D0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "51EF4996-72F4-4FA4-814F-F5991E7A8318"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "D99A687E-EAE6-417E-A88E-D0082BC194CD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "B353CE99-D57C-465B-AAB0-73EF581127D1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "7431ABC1-9252-419E-8CC1-311B41360078"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "D5F7E11E-FB34-4467-8919-2B6BEAABF665"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "B76AA310-FEC7-497F-AF04-C3EC1E76C4CC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "17F256A9-D3B9-4C72-B013-4EFD878BFEA8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "825ECE2D-E232-46E0-A047-074B34DB1E97"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:goldengate_application_adapters:12.3.2.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "F6F259E6-10A8-4207-8FC2-85ABD70B04C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:goldengate_stream_analytics:*:*:*:*:*:*:*:*", "versionEndExcluding": "19.1.0.0.1", "matchCriteriaId": "F4E7F2AA-B851-4D85-9895-2CDD6BE9FCB4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.2.0.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "5435B365-BFF3-4A9E-B45C-42D8F1E20FB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.2.0.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "1FAC3840-2CF8-44CE-81BB-EEEBDA00A34A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.3.0.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "F7715FC4-631E-462D-AD59-F44235C19837"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.3.0.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "2224F133-2D7D-4F3A-995A-31599C579ADB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.3.0.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "EA3D0BC5-109D-4405-8566-3C91A20EA3A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.3.0.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "A5BBA303-8D2B-48C5-B52A-4E192166699C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.3.0.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "8DF02546-3F0D-4FDD-89B1-8A3FE43FB5BF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:4.4.0.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "3F906F04-39E4-4BE4-8A73-9D058AAADB43"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/103737", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1040627", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:0582", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:0592", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:0627", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:0628", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:0629", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:0630", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1247", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1248", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1249", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1251", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1323", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1447", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1448", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1449", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1450", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1451", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1525", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1575", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:2143", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:2419", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:2420", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:2669", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:2930", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:2413", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:3140", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/qos-ch/slf4j/commit/d2b27fba88e983f921558da27fc29b5f5d269405", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://jira.qos.ch/browse/SLF4J-430", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://jira.qos.ch/browse/SLF4J-431", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://lists.apache.org/thread.html/956ba8e76b6793a6670b2eb0129a5e3003ce2124ca3130fd57d48d0f@%3Cdevnull.infra.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/95ce76613c869dbccf1d3d29327099ccc71aeec156f76c30853044fa@%3Cdevnull.infra.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r0f376559fd39cf1a53ac3afbc1fc5d62649dcac9916d4697445a94fa@%3Cissues.zookeeper.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r1660c72a660f0522947ca6ce329dcc74e1ee20c58bbe208472754489@%3Ccommon-issues.hadoop.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r17e7e6abc53d29c0e269153517d36f4bec2755b95900596e6df15cbe@%3Cnotifications.iotdb.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r2d05924f903403927a2f4e78d9b1249a42f0bd09f69a7c1954d74a42@%3Creviews.iotdb.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r32be21da011479df41468a62bc09d12f0d3b4e3a71679d33cb0e8c56@%3Cissues.zookeeper.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r37644f0a00aca9fbcbc21c0f9a91f927b63153ec3607be469cd515e5@%3Creviews.iotdb.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r48247c12cf652e95a01fc94ee5aa8641f3ec481235774790e53eb55e@%3Creviews.iotdb.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r573eb577a67503e72181eee637d9b0ac042197e632bcdfce76af06a3@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r5cf87a035b297c19f4043a37b73c341576dd92f819bd3e4aa27de541@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r767861f053c15f9e9201b939a0d508dd58475a072e76135eaaca17f0@%3Ccommon-issues.hadoop.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r81711cde77c2c5742b7b8533c978e79771b700af0ef4d3149d70df25@%3Cnotifications.logging.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r891761d5014f9ffd79d9737482de832462de538b6c4bdcef21aad729@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r9584c4304c888f651d214341a939bd264ed30c9e3d0d30fe85097ecf@%3Ccommits.pulsar.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r99a6552e45ca6ba1082031421f51799a4a665eda905ab2c2aa9d6ffa@%3Cdev.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/r9e25496608036573736cee484d8d03dae400f09e443b0000b6adc042@%3Ccommits.iotdb.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/raabf1a00b2652575fca9fcb44166a828a0cab97a7d1594001eabc991@%3Ccommon-issues.hadoop.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rc378b97d52856f9f3c5ced14771fed8357e4187a3a0f9a2f0515931a@%3Cissues.zookeeper.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/rc7de83170d3402af15bfed3d59f80aea20f250535bdce30e4cad24db@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rd86db9679150e9297b5c0fcb6f0e80a8b81b54fcf423de5a914bca78@%3Ccommon-commits.hadoop.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/re6fb6b0de9d679310437ff87fc94e39da5a14dce9c73864a41837462@%3Ccommon-commits.hadoop.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/reb3eeb985afdead17fadb7c33d5d472c1015a85ea5c9b038ec77f378@%3Ccommon-dev.hadoop.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rf58e1bee31d66665437dde9acd9abed53f8483034b69fa9ca7cde09c@%3Cdev.zookeeper.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/rfb45527bad7220ada9e30957762e1da254ce405e67cc3ddf6f3558d9@%3Creviews.iotdb.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/rfe52b7cbba4dcba521e13130e5d28d5818b78d70db0af1b470fa0264@%3Ccommon-issues.hadoop.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujul2020.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2020.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2021.html", "source": "cve@mitre.org"}, {"url": "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.slf4j.org/news.html", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/qos-ch/slf4j/commit/d2b27fba88e983f921558da27fc29b5f5d269405"}}