{"buggy_code": ["package liquibase.parser.core.xml\n\nimport liquibase.Contexts\nimport liquibase.GlobalConfiguration\nimport liquibase.LabelExpression\nimport liquibase.RuntimeEnvironment\nimport liquibase.Scope\nimport liquibase.changelog.ChangeLogIterator\nimport liquibase.changelog.ChangeLogParameters\nimport liquibase.changelog.ChangeSet\nimport liquibase.changelog.DatabaseChangeLog\nimport liquibase.changelog.filter.ChangeSetFilterResult\nimport liquibase.changelog.visitor.ChangeSetVisitor\nimport liquibase.database.Database\nimport liquibase.database.core.MockDatabase\nimport liquibase.exception.ChangeLogParseException\nimport liquibase.exception.LiquibaseException\nimport liquibase.sdk.resource.MockResourceAccessor\nimport liquibase.test.JUnitResourceAccessor\nimport spock.lang.Specification\n\nclass XMLChangeLogSAXParserTest extends Specification {\n\n    def INSECURE_XML = \"\"\"\n<!DOCTYPE databaseChangeLog [\n        <!ENTITY insecure SYSTEM \"https://localhost/insecure\">\n        ]>\n\n<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n                   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                   xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd\">\n\n    <changeSet id=\"1\" author=\"example\">\n        <output>&insecure;</output>\n    </changeSet>\n\n</databaseChangeLog>\n\"\"\"\n\n    def testIgnoreDuplicateChangeSets() throws ChangeLogParseException, Exception {\n        when:\n        def xmlParser = new XMLChangeLogSAXParser()\n        def changeLog = xmlParser.parse(\"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/master.changelog.xml\",\n                new ChangeLogParameters(), new JUnitResourceAccessor())\n\n        final List<ChangeSet> changeSets = new ArrayList<ChangeSet>()\n\n        new ChangeLogIterator(changeLog).run(new ChangeSetVisitor() {\n            @Override\n            ChangeSetVisitor.Direction getDirection() {\n                return ChangeSetVisitor.Direction.FORWARD\n            }\n\n            @Override\n            void visit(ChangeSet changeSet, DatabaseChangeLog databaseChangeLog, Database database, Set<ChangeSetFilterResult> filterResults) throws LiquibaseException {\n                changeSets.add(changeSet)\n            }\n        }, new RuntimeEnvironment(new MockDatabase(), new Contexts(), new LabelExpression()))\n\n\n        then:\n        changeSets.size() == 8\n        changeSets.get(0).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(1).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(1).getContexts().getContexts().size() == 1\n        changeSets.get(2).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(2).getLabels().getLabels().size() == 1\n        changeSets.get(3).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(3).getLabels().getLabels().size() == 2\n        changeSets.get(4).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(4).getDbmsSet().size() == 1\n        changeSets.get(5).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog1.xml::1::testuser\"\n        changeSets.get(6).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog3.xml::1::testuser\"\n        changeSets.get(7).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog2.xml::1::testuser\"\n    }\n\n    def \"uses liquibase.secureParsing by default\"() {\n        when:\n        def resourceAccessor = new MockResourceAccessor([\"com/example/insecure.xml\": INSECURE_XML])\n\n        new XMLChangeLogSAXParser().parse(\"com/example/insecure.xml\", new ChangeLogParameters(), resourceAccessor)\n\n        then:\n        def e = thrown(ChangeLogParseException)\n        e.message.contains(\"Failed to read external document 'insecure'\")\n    }\n\n    def \"allows liquibase.secureParsing=false to disable secure parsing\"() {\n        when:\n        def resourceAccessor = new MockResourceAccessor([\"com/example/insecure.xml\": INSECURE_XML])\n\n        Scope.child(GlobalConfiguration.SECURE_PARSING.key, \"false\", { ->\n            new XMLChangeLogSAXParser().parse(\"com/example/insecure.xml\", new ChangeLogParameters(), resourceAccessor)\n        })\n\n\n        then:\n        def e = thrown(ChangeLogParseException)\n        e.message.contains(\"Connection refused\")\n    }\n\n}\n"], "fixing_code": ["package liquibase.parser.core.xml\n\nimport liquibase.Contexts\nimport liquibase.GlobalConfiguration\nimport liquibase.LabelExpression\nimport liquibase.RuntimeEnvironment\nimport liquibase.Scope\nimport liquibase.changelog.ChangeLogIterator\nimport liquibase.changelog.ChangeLogParameters\nimport liquibase.changelog.ChangeSet\nimport liquibase.changelog.DatabaseChangeLog\nimport liquibase.changelog.filter.ChangeSetFilterResult\nimport liquibase.changelog.visitor.ChangeSetVisitor\nimport liquibase.database.Database\nimport liquibase.database.core.MockDatabase\nimport liquibase.exception.ChangeLogParseException\nimport liquibase.exception.LiquibaseException\nimport liquibase.sdk.resource.MockResourceAccessor\nimport liquibase.test.JUnitResourceAccessor\nimport spock.lang.Specification\n\nclass XMLChangeLogSAXParserTest extends Specification {\n\n    def INSECURE_XML = \"\"\"\n<!DOCTYPE databaseChangeLog [\n        <!ENTITY insecure SYSTEM \"file://invalid.txt\">\n        ]>\n\n<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n                   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                   xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd\">\n\n    <changeSet id=\"1\" author=\"example\">\n        <output>&insecure;</output>\n    </changeSet>\n\n</databaseChangeLog>\n\"\"\"\n\n    def testIgnoreDuplicateChangeSets() throws ChangeLogParseException, Exception {\n        when:\n        def xmlParser = new XMLChangeLogSAXParser()\n        def changeLog = xmlParser.parse(\"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/master.changelog.xml\",\n                new ChangeLogParameters(), new JUnitResourceAccessor())\n\n        final List<ChangeSet> changeSets = new ArrayList<ChangeSet>()\n\n        new ChangeLogIterator(changeLog).run(new ChangeSetVisitor() {\n            @Override\n            ChangeSetVisitor.Direction getDirection() {\n                return ChangeSetVisitor.Direction.FORWARD\n            }\n\n            @Override\n            void visit(ChangeSet changeSet, DatabaseChangeLog databaseChangeLog, Database database, Set<ChangeSetFilterResult> filterResults) throws LiquibaseException {\n                changeSets.add(changeSet)\n            }\n        }, new RuntimeEnvironment(new MockDatabase(), new Contexts(), new LabelExpression()))\n\n\n        then:\n        changeSets.size() == 8\n        changeSets.get(0).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(1).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(1).getContexts().getContexts().size() == 1\n        changeSets.get(2).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(2).getLabels().getLabels().size() == 1\n        changeSets.get(3).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(3).getLabels().getLabels().size() == 2\n        changeSets.get(4).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog4.xml::1::testuser\"\n        changeSets.get(4).getDbmsSet().size() == 1\n        changeSets.get(5).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog1.xml::1::testuser\"\n        changeSets.get(6).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog3.xml::1::testuser\"\n        changeSets.get(7).toString() == \"liquibase/parser/core/xml/ignoreDuplicatedChangeLogs/included.changelog2.xml::1::testuser\"\n    }\n\n    def \"uses liquibase.secureParsing by default\"() {\n        when:\n        def resourceAccessor = new MockResourceAccessor([\"com/example/insecure.xml\": INSECURE_XML])\n\n        new XMLChangeLogSAXParser().parse(\"com/example/insecure.xml\", new ChangeLogParameters(), resourceAccessor)\n\n        then:\n        def e = thrown(ChangeLogParseException)\n        e.message.contains(\"access is not allowed due to restriction set by the accessExternalDTD property\")\n    }\n\n    def \"allows liquibase.secureParsing=false to disable secure parsing\"() {\n        when:\n        def resourceAccessor = new MockResourceAccessor([\"com/example/insecure.xml\": INSECURE_XML])\n\n        Scope.child(GlobalConfiguration.SECURE_PARSING.key, \"false\", { ->\n            new XMLChangeLogSAXParser().parse(\"com/example/insecure.xml\", new ChangeLogParameters(), resourceAccessor)\n        })\n\n\n        then:\n        def e = thrown(ChangeLogParseException)\n        e.message.contains(\"Error Reading Changelog File: invalid.txt\")\n    }\n\n}\n"], "filenames": ["liquibase-core/src/test/groovy/liquibase/parser/core/xml/XMLChangeLogSAXParserTest.groovy"], "buggy_code_start_loc": [26], "buggy_code_end_loc": [101], "fixing_code_start_loc": [26], "fixing_code_end_loc": [101], "type": "CWE-611", "message": "Improper Restriction of XML External Entity Reference in GitHub repository liquibase/liquibase prior to 4.8.0.", "other": {"cve": {"id": "CVE-2022-0839", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-04T15:15:09.097", "lastModified": "2023-02-22T17:45:26.700", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Restriction of XML External Entity Reference in GitHub repository liquibase/liquibase prior to 4.8.0."}, {"lang": "es", "value": "Una Restricci\u00f3n Inapropiada de la Referencia de Entidad Externa XML en el repositorio de GitHub liquibase/liquibase versiones anteriores a 4.8.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:liquibase:liquibase:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.8.0", "matchCriteriaId": "E7182354-CBC3-4D65-952D-B3A42FBDA74D"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:sqlcl:19c:*:*:*:*:*:*:*", "matchCriteriaId": "8ED7C03D-9CC5-41CA-8639-4055169DF369"}]}]}], "references": [{"url": "https://github.com/liquibase/liquibase/commit/33d9d925082097fb1a3d2fc8e44423d964cd9381", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/f1ae5779-b406-4594-a8a3-d089c68d6e70", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujul2022.html", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/liquibase/liquibase/commit/33d9d925082097fb1a3d2fc8e44423d964cd9381"}}