{"buggy_code": ["<?php\n/**\n * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n * @license For full copyright and license information view LICENSE file distributed with this source code.\n * @version //autogentag//\n * @package kernel\n */\n\n$tpl = eZTemplate::factory();\n$tpl->setVariable( 'generated', false );\n$tpl->setVariable( 'wrong_email', false );\n$tpl->setVariable( 'link', false );\n$tpl->setVariable( 'wrong_key', false );\n\n$http = eZHTTPTool::instance();\n$module = $Params['Module'];\n$hashKey = $Params[\"HashKey\"];\n$ini = eZINI::instance();\n\nif ( strlen( $hashKey ) == 32 )\n{\n    $forgotPasswdObj = eZForgotPassword::fetchByKey( $hashKey );\n    if ( $forgotPasswdObj )\n    {\n        $userID = $forgotPasswdObj->attribute( 'user_id' );\n        $user   = eZUser::fetch( $userID  );\n        $email  = $user->attribute( 'email' );\n\n        $ini = eZINI::instance();\n        $passwordLength = $ini->variable( \"UserSettings\", \"GeneratePasswordLength\" );\n        $newPassword = eZUser::createPassword( $passwordLength );\n\n        $userToSendEmail = $user;\n\n        $db = eZDB::instance();\n        $db->begin();\n\n        // Change user password\n        if ( eZOperationHandler::operationIsAvailable( 'user_password' ) )\n        {\n            $operationResult = eZOperationHandler::execute( 'user',\n                                                            'password', array( 'user_id'    => $userID,\n                                                                               'new_password'  => $newPassword ) );\n        }\n        else\n        {\n            eZUserOperationCollection::password( $userID, $newPassword );\n        }\n\n        $receiver = $email;\n        $mail = new eZMail();\n        if ( !$mail->validate( $receiver ) )\n        {\n        }\n\n        $tpl = eZTemplate::factory();\n        $tpl->setVariable( 'user', $userToSendEmail );\n        $tpl->setVariable( 'object', $userToSendEmail->attribute( 'contentobject' ) );\n        $tpl->setVariable( 'password', $newPassword );\n\n        $templateResult = $tpl->fetch( 'design:user/forgotpasswordmail.tpl' );\n        $emailSender = $ini->variable( 'MailSettings', 'EmailSender' );\n        if ( !$emailSender )\n            $emailSender = $ini->variable( 'MailSettings', 'AdminEmail' );\n        $mail->setSender( $emailSender );\n        $mail->setReceiver( $receiver );\n        $subject = ezpI18n::tr( 'kernel/user/register', 'Registration info' );\n        if ( $tpl->hasVariable( 'subject' ) )\n            $subject = $tpl->variable( 'subject' );\n        if ( $tpl->hasVariable( 'content_type' ) )\n            $mail->setContentType( $tpl->variable( 'content_type' ) );\n        $mail->setSubject( $subject );\n        $mail->setBody( $templateResult );\n        $mailResult = eZMailTransport::send( $mail );\n        $tpl->setVariable( 'generated', true );\n        $tpl->setVariable( 'email', $email );\n        $forgotPasswdObj->remove();\n        $db->commit();\n    }\n    else\n    {\n        $tpl->setVariable( 'wrong_key', true );\n    }\n}\nelse if ( strlen( $hashKey ) > 4 )\n{\n    $tpl->setVariable( 'wrong_key', true );\n}\n\nif ( $module->isCurrentAction( \"Generate\" ) )\n{\n    $ini = eZINI::instance();\n    $passwordLength = $ini->variable( \"UserSettings\", \"GeneratePasswordLength\" );\n    $password = eZUser::createPassword( $passwordLength );\n    $passwordConfirm = $password;\n\n//    $http->setSessionVariable( \"GeneratedPassword\", $password );\n\n    if ( $module->hasActionParameter( \"Email\" ) )\n    {\n        $email = $module->actionParameter( \"Email\" );\n        if ( trim( $email ) != \"\" )\n        {\n            $users = eZPersistentObject::fetchObjectList( eZUser::definition(),\n                                                       null,\n                                                       array( 'email' => $email ),\n                                                       null,\n                                                       null,\n                                                       true );\n        }\n        if ( isset($users) && count($users) > 0 )\n        {\n            $user   = $users[0];\n            $time   = time();\n            $userID = $user->id();\n            $hashKey = md5( $userID . ':' . $time . ':' . mt_rand() );\n\n            // Create forgot password object\n            if ( eZOperationHandler::operationIsAvailable( 'user_forgotpassword' ) )\n            {\n                $operationResult = eZOperationHandler::execute( 'user',\n                                                                'forgotpassword', array( 'user_id'    => $userID,\n                                                                                         'password_hash'  => $hashKey,\n                                                                                         'time' => $time ) );\n            }\n            else\n            {\n                eZUserOperationCollection::forgotpassword( $userID, $hashKey, $time );\n            }\n\n            $userToSendEmail = $user;\n            $receiver = $email;\n\n            $mail = new eZMail();\n            if ( !$mail->validate( $receiver ) )\n            {\n            }\n\n            $tpl = eZTemplate::factory();\n            $tpl->setVariable( 'user', $userToSendEmail );\n            $tpl->setVariable( 'object', $userToSendEmail->attribute( 'contentobject' ) );\n            $tpl->setVariable( 'password', $password );\n            $tpl->setVariable( 'link', true );\n            $tpl->setVariable( 'hash_key', $hashKey );\n            $templateResult = $tpl->fetch( 'design:user/forgotpasswordmail.tpl' );\n            if ( $tpl->hasVariable( 'content_type' ) )\n                $mail->setContentType( $tpl->variable( 'content_type' ) );\n            $emailSender = $ini->variable( 'MailSettings', 'EmailSender' );\n            if ( !$emailSender )\n                $emailSender = $ini->variable( 'MailSettings', 'AdminEmail' );\n            $mail->setSender( $emailSender );\n            $mail->setReceiver( $receiver );\n            $subject = ezpI18n::tr( 'kernel/user/register', 'Registration info' );\n            if ( $tpl->hasVariable( 'subject' ) )\n                $subject = $tpl->variable( 'subject' );\n            $mail->setSubject( $subject );\n            $mail->setBody( $templateResult );\n            $mailResult = eZMailTransport::send( $mail );\n            $tpl->setVariable( 'email', $email );\n\n        }\n        else\n        {\n            $tpl->setVariable( 'wrong_email', $email );\n        }\n    }\n}\n\n$Result = array();\n$Result['content'] = $tpl->fetch( 'design:user/forgotpassword.tpl' );\n$Result['path'] = array( array( 'text' => ezpI18n::tr( 'kernel/user', 'User' ),\n                                'url' => false ),\n                         array( 'text' => ezpI18n::tr( 'kernel/user', 'Forgot password' ),\n                                'url' => false ) );\n\nif ( $ini->variable( 'SiteSettings', 'LoginPage' ) == 'custom' )\n{\n    $Result['pagelayout'] = 'loginpagelayout.tpl';\n}\n\n?>\n"], "fixing_code": ["<?php\n/**\n * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n * @license For full copyright and license information view LICENSE file distributed with this source code.\n * @version //autogentag//\n * @package kernel\n */\n\n$tpl = eZTemplate::factory();\n$tpl->setVariable( 'generated', false );\n$tpl->setVariable( 'wrong_email', false );\n$tpl->setVariable( 'link', false );\n$tpl->setVariable( 'wrong_key', false );\n\n$http = eZHTTPTool::instance();\n$module = $Params['Module'];\n$hashKey = $Params[\"HashKey\"];\n$ini = eZINI::instance();\n\nif ( strlen( $hashKey ) == 32 )\n{\n    $forgotPasswdObj = eZForgotPassword::fetchByKey( $hashKey );\n    if ( $forgotPasswdObj )\n    {\n        $userID = $forgotPasswdObj->attribute( 'user_id' );\n        $user   = eZUser::fetch( $userID  );\n        $email  = $user->attribute( 'email' );\n\n        $ini = eZINI::instance();\n        $passwordLength = $ini->variable( \"UserSettings\", \"GeneratePasswordLength\" );\n        $newPassword = eZUser::createPassword( $passwordLength );\n\n        $userToSendEmail = $user;\n\n        $db = eZDB::instance();\n        $db->begin();\n\n        // Change user password\n        if ( eZOperationHandler::operationIsAvailable( 'user_password' ) )\n        {\n            $operationResult = eZOperationHandler::execute( 'user',\n                                                            'password', array( 'user_id'    => $userID,\n                                                                               'new_password'  => $newPassword ) );\n        }\n        else\n        {\n            eZUserOperationCollection::password( $userID, $newPassword );\n        }\n\n        $receiver = $email;\n        $mail = new eZMail();\n        if ( !$mail->validate( $receiver ) )\n        {\n        }\n\n        $tpl = eZTemplate::factory();\n        $tpl->setVariable( 'user', $userToSendEmail );\n        $tpl->setVariable( 'object', $userToSendEmail->attribute( 'contentobject' ) );\n        $tpl->setVariable( 'password', $newPassword );\n\n        $templateResult = $tpl->fetch( 'design:user/forgotpasswordmail.tpl' );\n        $emailSender = $ini->variable( 'MailSettings', 'EmailSender' );\n        if ( !$emailSender )\n            $emailSender = $ini->variable( 'MailSettings', 'AdminEmail' );\n        $mail->setSender( $emailSender );\n        $mail->setReceiver( $receiver );\n        $subject = ezpI18n::tr( 'kernel/user/register', 'Registration info' );\n        if ( $tpl->hasVariable( 'subject' ) )\n            $subject = $tpl->variable( 'subject' );\n        if ( $tpl->hasVariable( 'content_type' ) )\n            $mail->setContentType( $tpl->variable( 'content_type' ) );\n        $mail->setSubject( $subject );\n        $mail->setBody( $templateResult );\n        $mailResult = eZMailTransport::send( $mail );\n        $tpl->setVariable( 'generated', true );\n        $tpl->setVariable( 'email', $email );\n        $forgotPasswdObj->remove();\n        $db->commit();\n    }\n    else\n    {\n        $tpl->setVariable( 'wrong_key', true );\n    }\n}\nelse if ( strlen( $hashKey ) > 4 )\n{\n    $tpl->setVariable( 'wrong_key', true );\n}\n\nif ( $module->isCurrentAction( \"Generate\" ) )\n{\n    $ini = eZINI::instance();\n    $passwordLength = $ini->variable( \"UserSettings\", \"GeneratePasswordLength\" );\n    $password = eZUser::createPassword( $passwordLength );\n    $passwordConfirm = $password;\n\n//    $http->setSessionVariable( \"GeneratedPassword\", $password );\n\n    if ( $module->hasActionParameter( \"Email\" ) )\n    {\n        $email = $module->actionParameter( \"Email\" );\n        if ( trim( $email ) != \"\" )\n        {\n            $users = eZPersistentObject::fetchObjectList( eZUser::definition(),\n                                                       null,\n                                                       array( 'email' => $email ),\n                                                       null,\n                                                       null,\n                                                       true );\n        }\n        if ( isset($users) && count($users) > 0 )\n        {\n            $user   = $users[0];\n            $time   = time();\n            $userID = $user->id();\n            $hashKey = md5(\n                $userID . ':' . microtime() . ':' .\n                ( function_exists( \"openssl_random_pseudo_bytes\" ) ?\n                    openssl_random_pseudo_bytes( 32 ) : mt_rand() )\n            );\n\n            // Create forgot password object\n            if ( eZOperationHandler::operationIsAvailable( 'user_forgotpassword' ) )\n            {\n                $operationResult = eZOperationHandler::execute( 'user',\n                                                                'forgotpassword', array( 'user_id'    => $userID,\n                                                                                         'password_hash'  => $hashKey,\n                                                                                         'time' => $time ) );\n            }\n            else\n            {\n                eZUserOperationCollection::forgotpassword( $userID, $hashKey, $time );\n            }\n\n            $userToSendEmail = $user;\n            $receiver = $email;\n\n            $mail = new eZMail();\n            if ( !$mail->validate( $receiver ) )\n            {\n            }\n\n            $tpl = eZTemplate::factory();\n            $tpl->setVariable( 'user', $userToSendEmail );\n            $tpl->setVariable( 'object', $userToSendEmail->attribute( 'contentobject' ) );\n            $tpl->setVariable( 'password', $password );\n            $tpl->setVariable( 'link', true );\n            $tpl->setVariable( 'hash_key', $hashKey );\n            $templateResult = $tpl->fetch( 'design:user/forgotpasswordmail.tpl' );\n            if ( $tpl->hasVariable( 'content_type' ) )\n                $mail->setContentType( $tpl->variable( 'content_type' ) );\n            $emailSender = $ini->variable( 'MailSettings', 'EmailSender' );\n            if ( !$emailSender )\n                $emailSender = $ini->variable( 'MailSettings', 'AdminEmail' );\n            $mail->setSender( $emailSender );\n            $mail->setReceiver( $receiver );\n            $subject = ezpI18n::tr( 'kernel/user/register', 'Registration info' );\n            if ( $tpl->hasVariable( 'subject' ) )\n                $subject = $tpl->variable( 'subject' );\n            $mail->setSubject( $subject );\n            $mail->setBody( $templateResult );\n            $mailResult = eZMailTransport::send( $mail );\n            $tpl->setVariable( 'email', $email );\n\n        }\n        else\n        {\n            $tpl->setVariable( 'wrong_email', $email );\n        }\n    }\n}\n\n$Result = array();\n$Result['content'] = $tpl->fetch( 'design:user/forgotpassword.tpl' );\n$Result['path'] = array( array( 'text' => ezpI18n::tr( 'kernel/user', 'User' ),\n                                'url' => false ),\n                         array( 'text' => ezpI18n::tr( 'kernel/user', 'Forgot password' ),\n                                'url' => false ) );\n\nif ( $ini->variable( 'SiteSettings', 'LoginPage' ) == 'custom' )\n{\n    $Result['pagelayout'] = 'loginpagelayout.tpl';\n}\n\n?>\n"], "filenames": ["kernel/user/forgotpassword.php"], "buggy_code_start_loc": [116], "buggy_code_end_loc": [117], "fixing_code_start_loc": [116], "fixing_code_end_loc": [121], "type": "CWE-640", "message": "A vulnerability was found in gitter-badger ezpublish-modern-legacy. It has been rated as problematic. This issue affects some unknown processing of the file kernel/user/forgotpassword.php. The manipulation leads to weak password recovery. Upgrading to version 1.0 is able to address this issue. The name of the patch is 5908d5ee65fec61ce0e321d586530461a210bf2a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-218951.", "other": {"cve": {"id": "CVE-2015-10071", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-19T10:15:11.697", "lastModified": "2023-01-27T17:33:18.313", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in gitter-badger ezpublish-modern-legacy. It has been rated as problematic. This issue affects some unknown processing of the file kernel/user/forgotpassword.php. The manipulation leads to weak password recovery. Upgrading to version 1.0 is able to address this issue. The name of the patch is 5908d5ee65fec61ce0e321d586530461a210bf2a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-218951."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:H/Au:S/C:P/I:N/A:N", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 1.4}, "baseSeverity": "LOW", "exploitabilityScore": 2.5, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-640"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gitter:ez_publish_modern_legacy:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0", "matchCriteriaId": "76B99B99-F0DB-4118-86C7-B9BC49DA7780"}]}]}], "references": [{"url": "https://github.com/gitter-badger/ezpublish-modern-legacy/commit/5908d5ee65fec61ce0e321d586530461a210bf2a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gitter-badger/ezpublish-modern-legacy/releases/tag/1.0", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218951", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218951", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gitter-badger/ezpublish-modern-legacy/commit/5908d5ee65fec61ce0e321d586530461a210bf2a"}}