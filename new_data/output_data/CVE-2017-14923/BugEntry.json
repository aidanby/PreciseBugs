{"buggy_code": ["/*\n * Tine 2.0\n * \n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Alexander Stintzing <a.stintzing@metaways.de>\n * @copyright   Copyright (c) 2012-2017 Metaways Infosystems GmbH (http://www.metaways.de)\n */\nExt.ns('Tine.Filemanager');\n\n/**\n * @namespace   Tine.Filemanager\n * @class       Tine.Filemanager.NodeEditDialog\n * @extends     Tine.widgets.dialog.EditDialog\n * \n * <p>Node Compose Dialog</p>\n * <p></p>\n * \n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Alexander Stintzing <a.stintzing@metaways.de>\n * \n * @param       {Object} config\n * @constructor\n * Create a new Tine.Filemanager.NodeEditDialog\n */\nTine.Filemanager.NodeEditDialog = Ext.extend(Tine.widgets.dialog.EditDialog, {\n    \n    /**\n     * @private\n     */\n    windowNamePrefix: 'NodeEditWindow_',\n    appName: 'Filemanager',\n    recordClass: Tine.Filemanager.Model.Node,\n    recordProxy: Tine.Filemanager.fileRecordBackend,\n    tbarItems: null,\n    evalGrants: true,\n    showContainerSelector: false,\n    displayNotes: true,\n    requiredSaveGrant: 'readGrant',\n    \n    /**\n     * @type Tine.Filemanager.DownloadLinkGridPanel\n     */\n    downloadLinkGrid: null,\n    \n    initComponent: function() {\n        this.app = Tine.Tinebase.appMgr.get('Filemanager');\n        this.downloadAction = new Ext.Action({\n            requiredGrant: 'readGrant',\n            allowMultiple: false,\n            actionType: 'download',\n            text: this.app.i18n._('Save locally'),\n            handler: this.onDownload,\n            iconCls: 'action_filemanager_save_all',\n            disabled: this.record.data.type === 'folder',\n            scope: this\n        });\n        \n        this.tbarItems = [this.downloadAction];\n        \n        Tine.Filemanager.NodeEditDialog.superclass.initComponent.call(this);\n    },\n\n    /**\n     * folder or file?\n     */\n    getFittingTypeTranslation: function (isWindowTitle) {\n        if (isWindowTitle) {\n            return this.record.data.type == 'folder' ? this.app.i18n._('Edit folder') : this.app.i18n._('edit file');\n        } else {\n            return this.record.data.type == 'folder' ? this.app.i18n._('Folder') : this.app.i18n._('File');\n        }\n    },\n    \n    /**\n     * executed when record is loaded\n     * @private\n     */\n    onRecordLoad: function() {\n        Tine.Filemanager.NodeEditDialog.superclass.onRecordLoad.apply(this, arguments);\n        \n        this.window.setTitle(this.getFittingTypeTranslation(true));\n    },\n    \n    /**\n     * download file\n     */\n    onDownload: function() {\n        Tine.Filemanager.downloadFile(this.record);\n    },\n\n    /**\n     * returns dialog\n     * @return {Object}\n     * @private\n     */\n    getFormItems: function() {\n        var me = this,\n            _ = window.lodash,\n            fsConfig = Tine.Tinebase.configManager.get('filesystem'),\n            formFieldDefaults = {\n            xtype:'textfield',\n            anchor: '100%',\n            labelSeparator: '',\n            columnWidth: .5,\n            readOnly: true,\n            disabled: true\n        };\n        \n        this.downloadLinkGrid = new Tine.Filemanager.DownloadLinkGridPanel({\n            node: this.record,\n            app: this.app,\n            title: this.app.i18n._('Public Links'),\n            editDialog: this\n        });\n\n        // require('./GrantsPanel');\n        var grantsPanel = new Tine.Filemanager.GrantsPanel({\n            app: this.app,\n            editDialog: this\n        });\n\n        var notificationPanel = new Tine.Filemanager.NotificationPanel({\n            app: this.app,\n            editDialog: this\n        });\n\n        var revisionPanel = {};\n\n        if (_.get(fsConfig, 'modLogActive', false)) {\n            revisionPanel = new Tine.Filemanager.RevisionPanel({\n                editDialog: this\n            });\n        }\n\n        return {\n            xtype: 'tabpanel',\n            border: false,\n            plain:true,\n            plugins: [{\n                ptype : 'ux.tabpanelkeyplugin'\n            }],\n            activeTab: 0,\n            border: false,\n            items:[{\n                title: this.getFittingTypeTranslation(false),\n                autoScroll: true,\n                border: false,\n                frame: true,\n                layout: 'border',\n                items: [{\n                    region: 'center',\n                    layout: 'hfit',\n                    border: false,\n                    items: [{\n                        xtype: 'fieldset',\n                        layout: 'hfit',\n                        autoHeight: true,\n                        title: this.getFittingTypeTranslation(false),\n                        items: [{\n                            xtype: 'columnform',\n                            labelAlign: 'top',\n                            formDefaults: formFieldDefaults,\n                            items: [[{\n                                    fieldLabel: this.app.i18n._('Name'),\n                                    requiredGrant: 'editGrant',\n                                    name: 'name',\n                                    allowBlank: false,\n                                    readOnly: false,\n                                    columnWidth: .75,\n                                    disabled: false\n                                }, {\n                                    fieldLabel: this.app.i18n._('Type'),\n                                    name: 'contenttype',\n                                    columnWidth: .25\n                                }],[{\n                                    xtype: 'displayfield',\n                                    name: 'isIndexed',\n                                    hideLabel: true,\n                                    fieldClass: 'x-ux-displayfield-text',\n                                    width: 10,\n                                    setValue: function(value) {\n                                        var string, color, html = '';\n                                        if (Tine.Tinebase.configManager.get('filesystem.index_content', 'Tinebase') && me.record.get('type') == 'file') {\n                                            string = value ? me.app.i18n._('Indexed') : me.app.i18n._('Not yet indexed');\n                                            color = value ? 'green' : 'yellow';\n                                            html = ['<span style=\"color:', color, ' !important;\" qtip=\"',string, '\">&bull;</span>'].join('');\n                                        }\n\n                                        this.setRawValue(html);\n                                    }\n                                }, {\n                                    xtype: 'displayfield',\n                                    name: 'path',\n                                    hideLabel: true,\n                                    fieldClass: 'x-ux-displayfield-text',\n                                    columnWidth: 1\n                                }],[\n                                Tine.widgets.form.RecordPickerManager.get('Addressbook', 'Contact', {\n                                    userOnly: true,\n                                    useAccountRecord: true,\n                                    blurOnSelect: true,\n                                    fieldLabel: this.app.i18n._('Created By'),\n                                    name: 'created_by'\n                                }), {\n                                    fieldLabel: this.app.i18n._('Creation Time'),\n                                    name: 'creation_time',\n                                    xtype: 'datefield'\n                                }\n                                ],[\n                                Tine.widgets.form.RecordPickerManager.get('Addressbook', 'Contact', {\n                                    userOnly: true,\n                                    useAccountRecord: true,\n                                    blurOnSelect: true,\n                                    fieldLabel: this.app.i18n._('Modified By'),\n                                    name: 'last_modified_by'\n                                }), {\n                                    fieldLabel: this.app.i18n._('Last Modified'),\n                                    name: 'last_modified_time',\n                                    xtype: 'datefield'\n                                }\n                                ]]\n                        }]\n                    }, revisionPanel]\n                }, {\n                    // activities and tags\n                    layout: 'accordion',\n                    animate: true,\n                    region: 'east',\n                    width: 210,\n                    split: true,\n                    collapsible: true,\n                    collapseMode: 'mini',\n                    header: false,\n                    margins: '0 5 0 5',\n                    border: true,\n                    items: [\n                        new Ext.Panel({\n                            title: this.app.i18n._('Description'),\n                            iconCls: 'descriptionIcon',\n                            layout: 'form',\n                            labelAlign: 'top',\n                            border: false,\n                            items: [{\n                                style: 'margin-top: -4px; border 0px;',\n                                labelSeparator: '',\n                                xtype: 'textarea',\n                                name: 'description',\n                                hideLabel: true,\n                                grow: false,\n                                preventScrollbars: false,\n                                anchor: '100% 100%',\n                                emptyText: this.app.i18n._('Enter description'),\n                                requiredGrant: 'editGrant'\n                            }]\n                        }),\n                        new Tine.widgets.tags.TagPanel({\n                            app: 'Filemanager',\n                            border: false,\n                            bodyStyle: 'border:1px solid #B5B8C8;'\n                        })\n                    ]\n                }]\n            },\n            new Tine.widgets.activities.ActivitiesTabPanel({\n                app: this.appName,\n                record_id: this.record.id,\n                record_model: 'Tinebase_Model_Tree_Node'\n                }),\n                this.downloadLinkGrid,\n                {xtype: 'Tine.Filemanager.UsagePanel'},\n                grantsPanel,\n                notificationPanel\n            ]\n        }\n    }\n});\n\n/**\n * Filemanager Edit Popup\n * \n * @param   {Object} config\n * @return  {Ext.ux.Window}\n */\nTine.Filemanager.NodeEditDialog.openWindow = function (config) {\n    var id = (config.record && config.record.id) ? config.record.id : 0;\n    var window = Tine.WindowFactory.getWindow({\n        width: 800,\n        height: 570,\n        name: Tine.Filemanager.NodeEditDialog.prototype.windowNamePrefix + id,\n        contentPanelConstructor: 'Tine.Filemanager.NodeEditDialog',\n        contentPanelConstructorConfig: config\n    });\n    \n    return window;\n};\n", "/*\n * Tine 2.0\n *\n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Cornelius Wei\u00df <c.weiss@metaways.de>\n * @copyright   Copyright (c) 2017 Metaways Infosystems GmbH (http://www.metaways.de)\n */\nExt.ns('Tine.Filemanager.nodeActions');\n\n/**\n * @singleton\n */\nTine.Filemanager.nodeActionsMgr = new (Ext.extend(Tine.widgets.ActionManager, {\n    actionConfigs: Tine.Filemanager.nodeActions\n}))();\n\n// /**\n//  * reload\n//  */\n// Tine.Filemanager.nodeActions.Reload = {\n//     app: 'Filemanager',\n//     text: 'Reload', // _('Reload),\n//     iconCls: 'x-tbar-loading',\n//     handler: function() {\n//         var record = this.initialConfig.selections[0];\n//         // arg - does not trigger tree children reload!\n//         Tine.Filemanager.fileRecordBackend.loadRecord(record);\n//     }\n// };\n\n/**\n * create new folder, needs a single folder selection with addGrant\n */\nTine.Filemanager.nodeActions.CreateFolder = {\n    app: 'Filemanager',\n    requiredGrant: 'addGrant',\n    allowMultiple: false,\n    // actionType: 'add',\n    text: 'Create Folder', // _('Create Folder')\n    disabled: true,\n    iconCls: 'action_create_folder',\n    scope: this,\n    handler: function() {\n        var app = this.initialConfig.app,\n            currentFolderNode = this.initialConfig.selections[0],\n            nodeName = Tine.Filemanager.Model.Node.getContainerName();\n\n        Ext.MessageBox.prompt(app.i18n._('New Folder'), app.i18n._('Please enter the name of the new folder:'), function(btn, text) {\n            if(currentFolderNode && btn == 'ok') {\n                if (! text) {\n                    Ext.Msg.alert(String.format(app.i18n._('No {0} added'), nodeName), String.format(app.i18n._('You have to supply a {0} name!'), nodeName));\n                    return;\n                }\n\n                var filename = currentFolderNode.get('path') + '/' + text;\n                Tine.Filemanager.fileRecordBackend.createFolder(filename);\n            }\n        }, this);\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        var enabled = !isFilterSelect\n            && records && records.length == 1\n            && records[0].get('type') == 'folder'\n            && window.lodash.get(records, '[0].data.account_grants.addGrant', false);\n\n        action.setDisabled(!enabled);\n    }\n};\n\n/**\n * show native file select, upload files, create nodes\n * a single directory node with create grant has to be selected\n * for this action to be active\n */\n// Tine.Filemanager.nodeActions.UploadFiles = {};\n\n/**\n * single file or directory node with readGrant\n */\nTine.Filemanager.nodeActions.Edit = {\n    app: 'Filemanager',\n    requiredGrant: 'readGrant',\n    allowMultiple: false,\n    text: 'Edit Properties', // _('Edit Properties')\n    iconCls: 'action_edit_file',\n    disabled: true,\n    // actionType: 'edit',\n    scope: this,\n    handler: function () {\n        if(this.initialConfig.selections.length == 1) {\n            Tine.Filemanager.NodeEditDialog.openWindow({record: this.initialConfig.selections[0]});\n        }\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        // run default updater\n        Tine.widgets.ActionUpdater.prototype.defaultUpdater(action, grants, records, isFilterSelect);\n\n        var _ = window.lodash,\n            disabled = _.isFunction(action.isDisabled) ? action.isDisabled() : action.disabled;\n\n        // if enabled check for not accessible node and disable\n        if (! disabled) {\n            action.setDisabled(window.lodash.reduce(records, function(disabled, record) {\n                return disabled || record.isVirtual();\n            }, false));\n        }\n    }\n};\n\n/**\n * single file or directory node with editGrant\n */\nTine.Filemanager.nodeActions.Rename = {\n    app: 'Filemanager',\n    requiredGrant: 'editGrant',\n    allowMultiple: false,\n    text: 'Rename', // _('Rename')\n    iconCls: 'action_rename',\n    disabled: true,\n    // actionType: 'edit',\n    scope: this,\n    handler: function () {\n        var _ = window.lodash,\n            app = this.initialConfig.app,\n            record = this.initialConfig.selections[0],\n            nodeName = record.get('type') == 'folder' ?\n                Tine.Filemanager.Model.Node.getContainerName() :\n                Tine.Filemanager.Model.Node.getRecordName();\n\n        Ext.MessageBox.show({\n            title: String.format(i18n._('Rename {0}'), nodeName),\n            msg: String.format(i18n._('Please enter the new name of the {0}:'), nodeName),\n            buttons: Ext.MessageBox.OKCANCEL,\n            value: record.get('name'),\n            fn: function (btn, text) {\n                if (btn == 'ok') {\n                    if (!text) {\n                        Ext.Msg.alert(String.format(i18n._('Not renamed {0}'), nodeName), String.format(i18n._('You have to supply a {0} name!'), nodeName));\n                        return;\n                    }\n\n                    // @TODO validate filename\n                    var targetPath = record.get('path').replace(new RegExp(_.escapeRegExp(record.get('name')) +'$'), text);\n                    Tine.Filemanager.fileRecordBackend.copyNodes([record], targetPath, true);\n\n                }\n            },\n            scope: this,\n            prompt: true,\n            icon: Ext.MessageBox.QUESTION\n        });\n    }\n};\n\n/**\n * single file or directory node with editGrant\n */\nTine.Filemanager.nodeActions.SystemLink = {\n    app: 'Filemanager',\n    requiredGrant: 'readGrant',\n    allowMultiple: false,\n    text: 'System Link', // _('System Link')\n    iconCls: 'action_system_link',\n    disabled: true,\n    // actionType: 'edit',\n    scope: this,\n    handler: function () {\n        var _ = window.lodash,\n            app = this.initialConfig.app,\n            record = this.initialConfig.selections[0];\n\n        Ext.MessageBox.show({\n            title: i18n._('System Link'),\n            // minWidth:\n            maxWidth: screen.availWidth,\n            msg: '<b>' + app.i18n._('Use this link to share the entry with other system users') + ':</b><br>'\n                    + record.getSystemLink(),\n            buttons: Ext.MessageBox.OK,\n            // value: record.getSystemLink(),\n            // prompt: true,\n            icon: Ext.MessageBox.INFO\n        });\n    }\n};\n\n/**\n * one or multiple nodes, all need deleteGrant\n */\nTine.Filemanager.nodeActions.Delete = {\n    app: 'Filemanager',\n    requiredGrant: 'deleteGrant',\n    allowMultiple: true,\n    text: 'Delete', // _('Delete')\n    disabled: true,\n    iconCls: 'action_delete',\n    scope: this,\n    handler: function (button, event) {\n        var app = this.initialConfig.app,\n            nodeName = '',\n            nodes = this.initialConfig.selections;\n\n        if (nodes && nodes.length) {\n            for (var i = 0; i < nodes.length; i++) {\n                var currNodeData = nodes[i].data;\n\n                if (typeof currNodeData.name == 'object') {\n                    nodeName += currNodeData.name.name + '<br />';\n                }\n                else {\n                    nodeName += currNodeData.name + '<br />';\n                }\n            }\n        }\n\n        this.conflictConfirmWin = Tine.widgets.dialog.FileListDialog.openWindow({\n            modal: true,\n            allowCancel: false,\n            height: 180,\n            width: 300,\n            title: app.i18n._('Do you really want to delete the following files?'),\n            text: nodeName,\n            scope: this,\n            handler: function (button) {\n                if (nodes && button == 'yes') {\n                    Tine.Filemanager.fileRecordBackend.deleteItems(nodes);\n                }\n\n                for (var i = 0; i < nodes.length; i++) {\n                    var node = nodes[i];\n\n                    if (node.fileRecord) {\n                        var upload = Tine.Tinebase.uploadManager.getUpload(node.fileRecord.get('uploadKey'));\n                        upload.setPaused(true);\n                        Tine.Tinebase.uploadManager.unregisterUpload(upload.id);\n                    }\n\n                }\n            }\n        });\n    }\n};\n\n/**\n * one node with readGrant\n */\n// Tine.Filemanager.nodeActions.Copy = {};\n\n/**\n * one or multiple nodes with read, edit AND deleteGrant\n */\nTine.Filemanager.nodeActions.Move = {\n    app: 'Filemanager',\n    requiredGrant: 'editGrant',\n    allowMultiple: true,\n    text: 'Move', // _('Move')\n    disabled: true,\n    actionType: 'edit',\n    scope: this,\n    iconCls: 'action_move',\n    handler: function() {\n        var app = this.initialConfig.app,\n            i18n = app.i18n,\n            records = this.initialConfig.selections;\n\n        var filePickerDialog = new Tine.Filemanager.FilePickerDialog({\n            title: app.i18n._('Move Items'),\n            singleSelect: true,\n            constraint: 'folder'\n        });\n\n        filePickerDialog.on('selected', function(nodes) {\n            var node = nodes[0];\n            Tine.Filemanager.fileRecordBackend.copyNodes(records, node, true);\n        });\n\n        filePickerDialog.openWindow();\n    }\n};\n\n/**\n * one file node with download grant\n */\nTine.Filemanager.nodeActions.Download = {\n    app: 'Filemanager',\n    requiredGrant: 'downloadGrant',\n    allowMultiple: false,\n    actionType: 'download',\n    text: 'Save locally', // _('Save locally')\n    iconCls: 'action_filemanager_save_all',\n    disabled: true,\n    scope: this,\n    handler: function() {\n        Tine.Filemanager.downloadFile(this.initialConfig.selections[0]);\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        var enabled = !isFilterSelect\n            && records && records.length == 1\n            && records[0].get('type') != 'folder'\n            && window.lodash.get(records, '[0].data.account_grants.downloadGrant', false);\n\n        action.setDisabled(!enabled);\n    }\n};\n\n/**\n * one file node with readGrant\n */\nTine.Filemanager.nodeActions.Preview = {\n    app: 'Filemanager',\n    allowMultiple: false,\n    requiredGrant: 'readGrant',\n    text: 'Preview', // _('Preview')\n    disabled: true,\n    iconCls: 'previewIcon',\n    scope: this,\n    handler: function () {\n        var selections = this.initialConfig.selections;\n\n        if (selections.length > 0) {\n            var selection = selections[0];\n\n            if (selection && selection.get('type') === 'file') {\n                Tine.Filemanager.DocumentPreview.openWindow({\n                    record: selection,\n                    initialApp: this.initialConfig.initialApp || null\n                });\n            }\n        }\n    }\n};\n\n/**\n * one node with publish grant\n */\nTine.Filemanager.nodeActions.Publish = {\n    app: 'Filemanager',\n    allowMultiple: false,\n    text: 'Publish', // _('Publish')\n    disabled: true,\n    iconCls: 'action_publish',\n    scope: this,\n    handler: function() {\n        var app = this.initialConfig.app,\n            i18n = app.i18n,\n            selections = this.initialConfig.selections;\n\n        if (selections.length != 1) {\n            return;\n        }\n\n        var passwordDialog = new Tine.Tinebase.widgets.dialog.PasswordDialog({\n            allowEmptyPassword: true\n        });\n        passwordDialog.openWindow();\n\n        passwordDialog.on('passwordEntered', function (password) {\n            var date = new Date();\n            date.setDate(date.getDate() + 30);\n\n            var record = new Tine.Filemanager.Model.DownloadLink({\n                node_id: selections[0].id,\n                expiry_time: date,\n                password: password\n            });\n\n            Tine.Filemanager.downloadLinkRecordBackend.saveRecord(record, {\n                success: function (record) {\n                    Tine.Filemanager.FilePublishedDialog.openWindow({\n                        title: selections[0].data.type == 'folder' ? app.i18n._('Folder has been published successfully') : app.i18n._('File has been published successfully'),\n                        record: record,\n                        password: password\n                    });\n                }, failure: Tine.Tinebase.ExceptionHandler.handleRequestException, scope: this\n            });\n        }, this);\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        var enabled = !isFilterSelect\n            && records && records.length == 1\n            && window.lodash.get(records, '[0].data.account_grants.publishGrant', false);\n\n        action.setDisabled(!enabled);\n    }\n};\n\n/**\n * one or multiple file nodes currently uploaded\n */\nTine.Filemanager.nodeActions.PauseUploadAction = {};\n\n/**\n * one or multiple file nodes currently upload paused\n */\nTine.Filemanager.nodeActions.ResumeUploadAction = {};\n\n/**\n * one or multiple file nodes currently uploaded or upload paused\n * @TODO deletes node as well?\n */\nTine.Filemanager.nodeActions.CancelUploadAction = {};\n", "/*\n * Tine 2.0\n * \n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Cornelius Weiss <c.weiss@metaways.de>\n * @copyright   Copyright (c) 2007-2011 Metaways Infosystems GmbH (http://www.metaways.de)\n */\nExt.ns('Tine.widgets', 'Tine.widgets.container');\n\n/**\n * @namespace   Tine.widgets.container\n * @class       Tine.widgets.container.TreePanel\n * @extends     Ext.tree.TreePanel\n * @author      Cornelius Weiss <c.weiss@metaways.de>\n * @param       {Object} config Configuration options\n * @description\n * <p>Utility class for generating container trees as used in the apps tree panel</p>\n * <p>This widget handles all container related actions like add/rename/delte and manager permissions<p>\n *<p>Example usage:</p>\n<pre><code>\nvar taskPanel =  new Tine.containerTreePanel({\n    app: Tine.Tinebase.appMgr.get('Tasks'),\n    recordClass: Tine.Tasks.Model.Task\n});\n</code></pre>\n */\nTine.widgets.container.TreePanel = function(config) {\n    Ext.apply(this, config);\n\n    this.addEvents(\n        /**\n         * @event containeradded\n         * Fires when a container was added\n         * @param {container} the new container\n         */\n        'containeradd',\n        /**\n         * @event containerdelete\n         * Fires when a container got deleted\n         * @param {container} the deleted container\n         */\n        'containerdelete',\n        /**\n         * @event containerrename\n         * Fires when a container got renamed\n         * @param {container} the renamed container\n         */\n        'containerrename',\n        /**\n         * @event containerpermissionchange\n         * Fires when a container got renamed\n         * @param {container} the container whose permissions where changed\n         */\n        'containerpermissionchange',\n        /**\n         * @event containercolorset\n         * Fires when a container color got changed\n         * @param {container} the container whose color where changed\n         */\n        'containercolorset'\n    );\n\n    Tine.widgets.container.TreePanel.superclass.constructor.call(this);\n};\n\nExt.extend(Tine.widgets.container.TreePanel, Ext.tree.TreePanel, {\n    /**\n     * @cfg {Tine.Tinebase.Application} app\n     */\n    app: null,\n    /**\n     * @cfg {Boolean} allowMultiSelection (defaults to true)\n     */\n    allowMultiSelection: true,\n    /**\n     * @cfg {String} defaultContainerPath\n     */\n    defaultContainerPath: null,\n    /**\n     * @cfg {array} extraItems additional items to display under all\n     */\n    extraItems: null,\n    /**\n     * @cfg {String} filterMode one of:\n     *   - gridFilter: hooks into the grids.store\n     *   - filterToolbar: hooks into the filterToolbar (container filterModel required)\n     */\n    filterMode: 'gridFilter',\n    /**\n     * @cfg {Tine.data.Record} recordClass\n     */\n    recordClass: null,\n    /**\n     * @cfg {Array} requiredGrants\n     * grants which are required to select leaf node(s)\n     */\n    requiredGrants: null,\n\n    /**\n     * @cfg {Boolean} useContainerColor\n     * use container colors\n     */\n    useContainerColor: false,\n    /**\n     * @cfg {Boolean} useProperties\n     * use container properties\n     */\n    useProperties: true,\n\n    /**\n     * @property {Object}\n     * modelConfiguration of recordClass (if available)\n     */\n    modelConfiguration: null,\n\n    /**\n     * @cfg {String}\n     * canonical name\n     */\n    canonicalName: 'ContainerTree',\n\n    /**\n     * Referenced grid panel\n     */\n    gridPanel: null,\n\n    useArrows: true,\n    border: false,\n    autoScroll: true,\n    enableDrop: true,\n    ddGroup: 'containerDDGroup',\n    hasPersonalContainer: true,\n    hasContextMenu: true,\n\n    /**\n     * @fixme not needed => all events hand their events over!!!\n     *\n     * @property ctxNode holds treenode which got a contextmenu\n     * @type Ext.tree.TreeNode\n     */\n    ctxNode: null,\n\n    /**\n     * No user interactions, menus etc. allowed except for browsing\n     */\n    readOnly: false,\n\n    /**\n     * init this treePanel\n     */\n    initComponent: function() {\n        if (! this.appName && this.recordClass) {\n            this.appName = this.recordClass.getMeta('appName');\n        }\n        if (! this.app) {\n            this.app = Tine.Tinebase.appMgr.get(this.appName);\n        }\n\n        if (this.allowMultiSelection) {\n            this.selModel = new Ext.tree.MultiSelectionModel({});\n        }\n\n        if (this.recordClass) {\n            this.modelConfiguration = this.recordClass.getModelConfiguration();\n        }\n\n        if (this.modelConfiguration) {\n            this.hasPersonalContainer = this.modelConfiguration.hasPersonalContainer !== false;\n        }\n\n        var containerName = this.recordClass ? this.recordClass.getContainerName() : 'container';\n        var containersName = this.recordClass ? this.recordClass.getContainersName() : 'containers';\n\n        //ngettext('container', 'containers', n);\n        this.containerName = this.containerName || this.app.i18n.n_hidden(containerName, containersName, 1);\n        this.containersName = this.containersName || this.app.i18n._hidden(containersName);\n\n        this.loader = this.loader || new Tine.widgets.tree.Loader({\n            getParams: this.onBeforeLoad.createDelegate(this),\n            inspectCreateNode: this.onBeforeCreateNode.createDelegate(this)\n        });\n\n        this.loader.on('virtualNodesSelected', this.onVirtualNodesSelected.createDelegate(this));\n\n        var extraItems = this.getExtraItems();\n        this.root = this.getRoot(extraItems);\n        if (!this.hasPersonalContainer && ! extraItems.length) {\n            this.rootVisible = false;\n        }\n\n        if (!this.readOnly && !this.dropConfig) {\n            // init drop zone\n            this.dropConfig = {\n                ddGroup: this.ddGroup || 'TreeDD',\n                appendOnly: this.ddAppendOnly === true,\n                /**\n                 * @todo check acl!\n                 */\n                onNodeOver: function (n, dd, e, data) {\n                    var node = n.node;\n\n                    // auto node expand check\n                    if (node.hasChildNodes() && !node.isExpanded()) {\n                        this.queueExpand(node);\n                    }\n                    return node.attributes.allowDrop ? 'tinebase-tree-drop-move' : false;\n                },\n                isValidDropPoint: function (n, dd, e, data) {\n                    return n.node.attributes.allowDrop;\n                },\n                completeDrop: Ext.emptyFn\n            };\n        }\n\n        if (this.hasContextMenu) {\n            this.initContextMenu();\n        }\n\n        this.getSelectionModel().on('beforeselect', this.onBeforeSelect, this);\n        this.getSelectionModel().on('selectionchange', this.onSelectionChange, this);\n\n        this.on('click', this.onClick, this);\n        if (this.hasContextMenu) {\n            this.on('contextmenu', this.onContextMenu, this);\n        }\n\n        if (!this.readOnly) {\n            this.on('beforenodedrop', this.onBeforeNodeDrop, this);\n            this.on('append', this.onAppendNode, this);\n            this.on('beforecollapsenode', this.onBeforeCollapse, this);\n        }\n\n        Tine.widgets.container.TreePanel.superclass.initComponent.call(this);\n    },\n\n    /**\n     * @param nodes\n     */\n    onVirtualNodesSelected: function (nodes) {\n        this.suspendEvents();\n\n        if (0 === nodes.length) {\n            return;\n        }\n\n\n        var sm = this.getSelectionModel();\n\n        sm.clearSelections(true);\n\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n\n            if (sm.isSelected(node)) {\n                sm.lastSelNode = node;\n                continue;\n            }\n\n            sm.selNodes.push(node);\n            sm.selMap[node.id] = node;\n            sm.lastSelNode = node;\n            node.ui.onSelectedChange(true);\n        }\n\n        this.onFilterChange();\n        this.resumeEvents();\n    },\n\n    /**\n     * returns canonical path part\n     * @returns {string}\n     */\n    getCanonicalPathSegment: function () {\n        if (this.recordClass) {\n            return [\n                this.recordClass.getMeta('modelName'),\n                this.canonicalName,\n            ].join(Tine.Tinebase.CanonicalPath.separator);\n        }\n    },\n\n    getRoot: function(extraItems)\n    {\n        return {\n            path: '/',\n            cls: 'tinebase-tree-hide-collapsetool',\n            expanded: true,\n            children: [{\n                path: Tine.Tinebase.container.getMyNodePath(),\n                id: 'personal',\n                hidden: !this.hasPersonalContainer\n            }, {\n                path: '/shared',\n                id: 'shared'\n            }, {\n                path: '/personal',\n                id: 'otherUsers',\n                hidden: !this.hasPersonalContainer\n            }].concat(extraItems)\n        };\n    },\n\n    /**\n     * template fn for subclasses to set default path\n     *\n     * @return {String}\n     */\n    getDefaultContainerPath: function() {\n        return this.defaultContainerPath || '/';\n    },\n\n    /**\n     * template fn for subclasses to append extra items\n     *\n     * @return {Array}\n     */\n    getExtraItems: function() {\n        return this.extraItems || [];\n    },\n\n    /**\n     * returns a filter plugin to be used in a grid\n     */\n    getFilterPlugin: function() {\n        if (!this.filterPlugin) {\n            this.filterPlugin = new Tine.widgets.tree.FilterPlugin({\n                treePanel: this\n            });\n        }\n\n        return this.filterPlugin;\n    },\n\n    /**\n     * returns object of selected container/filter or null/default\n     *\n     * @param {Array} [requiredGrants]\n     * @param {Tine.Tinebase.Model.Container} [defaultContainer]\n     * @param {Boolean} onlySingle use default if more than one container in selection\n     * @return {Tine.Tinebase.Model.Container}\n     */\n    getSelectedContainer: function(requiredGrants, defaultContainer, onlySingle) {\n        var container = defaultContainer,\n            sm = this.getSelectionModel(),\n            selection = typeof sm.getSelectedNodes == 'function' ? sm.getSelectedNodes() : [sm.getSelectedNode()];\n\n        if (Ext.isArray(selection) && selection.length > 0 && (! onlySingle || selection.length === 1 || ! container)) {\n            container = this.getContainerFromSelection(selection, requiredGrants) || container;\n        }\n        // postpone this as we don't get the whole container record here\n//        else if (this.filterMode == 'filterToolbar' && this.filterPlugin) {\n//            container = this.getContainerFromFilter() || container;\n//        }\n\n        return container;\n    },\n\n    /**\n     * get container from selection\n     *\n     * @param {Array} selection\n     * @param {Array} requiredGrants\n     * @return {Tine.Tinebase.Model.Container}\n     */\n    getContainerFromSelection: function(selection, requiredGrants) {\n        var result = null;\n\n        Ext.each(selection, function(node) {\n            if (node && Tine.Tinebase.container.pathIsContainer(node.attributes.container.path)) {\n                if (! requiredGrants || this.hasGrant(node, requiredGrants)) {\n                    result = node.attributes.container;\n                    // take the first one\n                    return false;\n                }\n            }\n        }, this);\n\n        return result;\n    },\n\n    /**\n     * get container from filter toolbar\n     *\n     * @param {Array} requiredGrants\n     * @return {Tine.Tinebase.Model.Container}\n     *\n     * TODO make this work -> atm we don't get the account grants here (why?)\n     */\n    getContainerFromFilter: function(requiredGrants) {\n        var result = null;\n\n        // check if single container is selected in filter toolbar \n        var ftb = this.filterPlugin.getGridPanel().filterToolbar,\n            filterValue = null;\n\n        ftb.filterStore.each(function(filter) {\n            if (filter.get('field') == this.recordClass.getMeta('containerProperty')) {\n                filterValue = filter.get('value');\n                if (filter.get('operator') == 'equals') {\n                    result = filterValue;\n                } else if (filter.get('operator') == 'in' && filterValue.length == 1){\n                    result = filterValue[0];\n                }\n                // take the first one\n                return false;\n            }\n        }, this);\n\n        return result;\n    },\n\n    /**\n     * convert containerPath to treePath\n     *\n     * @param {String}  containerPath\n     * @return {String} treePath\n     */\n    getTreePath: function(containerPath) {\n        var treePath = '/' + this.getRootNode().id + (containerPath !== '/' ? containerPath : '');\n\n        // replace personal with otherUsers if personal && ! personal/myaccountid\n        var matches = containerPath.match(/^\\/personal\\/{0,1}([0-9a-z_\\-]*)\\/{0,1}/i);\n        if (matches) {\n            if (matches[1] != Tine.Tinebase.registry.get('currentAccount').accountId) {\n                treePath = treePath.replace('personal', 'otherUsers');\n            } else {\n                treePath = treePath.replace('personal/'  + Tine.Tinebase.registry.get('currentAccount').accountId, 'personal');\n            }\n        }\n\n        return treePath;\n    },\n\n    /**\n     * checkes if user has requested grant for given container represented by a tree node\n     *\n     * @param {Ext.tree.TreeNode} node\n     * @param {Array} grant\n     * @return {}\n     */\n    hasGrant: function(node, grants) {\n        var attr = node.attributes,\n            condition = false;\n\n        if(attr && attr.leaf) {\n            condition = true;\n            Ext.each(grants, function(grant) {\n                condition = condition && attr.container.account_grants[grant];\n            }, this);\n        }\n\n        return condition;\n    },\n\n    /**\n     * @private\n     * - select default path\n     */\n    afterRender: function() {\n        Tine.widgets.container.TreePanel.superclass.afterRender.call(this);\n\n        var defaultContainerPath = this.getDefaultContainerPath();\n\n        if (defaultContainerPath && defaultContainerPath != '/') {\n            var root = '/' + this.getRootNode().id;\n\n            this.expand();\n\n            // @TODO use getTreePath() when filemanager is fixed\n            (function() {\n                // no initial load triggering here\n                this.getSelectionModel().suspendEvents();\n                this.selectPath(root + defaultContainerPath);\n                this.getSelectionModel().resumeEvents();\n            }).defer(100, this);\n        }\n    },\n\n    /**\n     * @private\n     */\n    initContextMenu: function() {\n\n        this.contextMenuUserFolder = Tine.widgets.tree.ContextMenu.getMenu({\n            nodeName: this.containerName,\n            actions: ['add'],\n            scope: this,\n            backend: 'Tinebase_Container',\n            backendModel: 'Container'\n        });\n\n        this.contextMenuSingleContainer = Tine.widgets.tree.ContextMenu.getMenu({\n            nodeName: this.containerName,\n            actions: ['delete', 'rename', 'grants'].concat(\n                this.useProperties ? ['properties'] : []\n            ).concat(\n                this.useContainerColor ? ['changecolor'] : []\n            ),\n            scope: this,\n            backend: 'Tinebase_Container',\n            backendModel: 'Container'\n        });\n\n        this.contextMenuSingleContainerProperties = Tine.widgets.tree.ContextMenu.getMenu({\n            nodeName: this.containerName,\n            actions: ['properties'],\n            scope: this,\n            backend: 'Tinebase_Container',\n            backendModel: 'Container'\n        });\n    },\n\n    /**\n     * called when node is appended to this tree\n     */\n    onAppendNode: function(tree, parent, appendedNode, idx) {\n        if (appendedNode.leaf && this.hasGrant(appendedNode, this.requiredGrants)) {\n            if (this.useContainerColor) {\n                appendedNode.ui.render = appendedNode.ui.render.createSequence(function () {\n                    this.colorNode = Ext.DomHelper.insertAfter(this.iconNode, {\n                        tag: 'span',\n                        html: '&nbsp;&#9673;&nbsp',\n                        style: {color: appendedNode.attributes.container.color || '#808080'}\n                    }, true);\n                }, appendedNode.ui);\n            }\n        }\n    },\n\n    /**\n     * expand automatically on node click\n     *\n     * @param {} node\n     * @param {} e\n     */\n    onClick: function(node, e) {\n        var sm = this.getSelectionModel(),\n            selectedNode = sm.getSelectedNode();\n\n        // NOTE: in single select mode, a node click on a selected node does not trigger \n        //       a selection change. We need to do this by hand here\n        if (! this.allowMultiSelection && node == selectedNode) {\n            this.onSelectionChange(sm, node);\n        }\n\n        node.expand();\n    },\n\n    /**\n     * show context menu\n     *\n     * @param {} node\n     * @param {} event\n     */\n    onContextMenu: function(node, event) {\n        this.ctxNode = node;\n        var container = node.attributes.container,\n            path = container.path,\n            owner;\n\n        if (! Ext.isString(path)) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (Tine.Tinebase.container.pathIsContainer(path)) {\n            if (container.account_grants && container.account_grants.adminGrant) {\n                this.contextMenuSingleContainer.showAt(event.getXY());\n            } else {\n                this.contextMenuSingleContainerProperties.showAt(event.getXY());\n            }\n        } else if (path.match(/^\\/shared$/) && (Tine.Tinebase.common.hasRight('admin', this.app.appName) || Tine.Tinebase.common.hasRight('manage_shared_folders', this.app.appName))){\n            this.contextMenuUserFolder.showAt(event.getXY());\n        } else if (Tine.Tinebase.registry.get('currentAccount').accountId == Tine.Tinebase.container.pathIsPersonalNode(path)){\n            this.contextMenuUserFolder.showAt(event.getXY());\n        }\n    },\n\n    /**\n     * adopt attr\n     *\n     * @param {Object} attr\n     */\n    onBeforeCreateNode: function(attr) {\n        if (attr.accountDisplayName) {\n            attr.name = attr.accountDisplayName;\n            attr.path = '/personal/' + attr.accountId;\n            attr.id = attr.accountId;\n        }\n\n        if (! attr.name && attr.path) {\n            attr.name = Tine.Tinebase.container.path2name(attr.path, this.containerName, this.containersName);\n        }\n\n        Ext.applyIf(attr, {\n            text: Ext.util.Format.htmlEncode(attr.name),\n            qtip: Tine.Tinebase.common.doubleEncode(attr.name),\n            leaf: !!attr.account_grants,\n            allowDrop: !!attr.account_grants && attr.account_grants.addGrant\n        });\n\n        // copy 'real' data to container space\n        attr.container = Ext.copyTo({}, attr, Tine.Tinebase.Model.Container.getFieldNames());\n    },\n\n    /**\n     * returns params for async request\n     *\n     * @param {Ext.tree.TreeNode} node\n     * @return {Object}\n     */\n    onBeforeLoad: function(node) {\n        var path = node.attributes.path;\n        var type = Tine.Tinebase.container.path2type(path);\n        var owner = Tine.Tinebase.container.pathIsPersonalNode(path);\n\n        if (type === 'personal' && ! owner) {\n            type = 'otherUsers';\n        }\n\n        var params = {\n            method: 'Tinebase_Container.getContainer',\n            application: this.app.appName,\n            containerType: type,\n            requiredGrants: this.requiredGrants,\n            owner: owner\n        };\n\n        return params;\n    },\n\n    /**\n     * permit selection of nodes with missing required grant\n     *\n     * @param {} sm\n     * @param {} newSelection\n     * @param {} oldSelection\n     * @return {Boolean}\n     */\n    onBeforeSelect: function(sm, newSelection, oldSelection) {\n\n        if (this.requiredGrant && newSelection.isLeaf()) {\n            var accountGrants =  newSelection.attributes.container.account_grants || {};\n            if (! accountGrants[this.requiredGrant]) {\n                var message = '<b>' +String.format(i18n._(\"You are not allowed to select the {0} '{1}':\"), this.containerName, newSelection.attributes.text) + '</b><br />' +\n                              String.format(i18n._(\"{0} grant is required for desired action\"), this.requiredGrant);\n                Ext.Msg.alert(i18n._('Insufficient Grants'), message);\n                return false;\n            }\n        }\n    },\n\n    /**\n     * record got dropped on container node\n     *\n     * @param {Object} dropEvent\n     * @private\n     *\n     * TODO use Ext.Direct\n     */\n    onBeforeNodeDrop: function(dropEvent) {\n        var targetContainerId = dropEvent.target.id;\n\n        // get selection filter from grid\n        var sm = this.app.getMainScreen().getCenterPanel().getGrid().getSelectionModel();\n        if (sm.getCount() === 0) {\n            return false;\n        }\n        var filter = sm.getSelectionFilter();\n\n        // move messages to folder\n        Ext.Ajax.request({\n            params: {\n                method: 'Tinebase_Container.moveRecordsToContainer',\n                targetContainerId: targetContainerId,\n                filterData: filter,\n                model: this.recordClass.getMeta('modelName'),\n                applicationName: this.recordClass.getMeta('appName')\n            },\n            scope: this,\n            success: function(result, request){\n                // update grid\n                this.app.getMainScreen().getCenterPanel().loadGridData();\n            }\n        });\n\n        // prevent repair actions\n        dropEvent.dropStatus = true;\n        return true;\n    },\n\n    /**\n     * require reload when node is collapsed\n     */\n    onBeforeCollapse: function(node) {\n        node.removeAll();\n        node.loaded = false;\n    },\n\n    onFilterChange: function() {\n        // get filterToolbar\n        var ftb = this.filterPlugin.getGridPanel().filterToolbar;\n\n        // in case of filterPanel\n        ftb = ftb.activeFilterPanel ? ftb.activeFilterPanel : ftb;\n\n        // remove all ftb container and /toberemoved/ filters\n        ftb.supressEvents = true;\n        ftb.filterStore.each(function(filter) {\n            var field = filter.get('field');\n            // @todo find criteria what to remove\n            if (field === 'container_id' || field === 'attender' || field === 'path') {\n                ftb.deleteFilter(filter);\n            }\n        }, this);\n        ftb.supressEvents = false;\n\n        // set ftb filters according to tree selection\n        var containerFilter = this.getFilterPlugin().getFilter();\n        ftb.addFilter(new ftb.record(containerFilter));\n\n        ftb.onFiltertrigger();\n    },\n\n    /**\n     * called when tree selection changes\n     *\n     * @param {} sm\n     * @param {} nodes\n     */\n    onSelectionChange: function(sm, nodes) {\n\n        if (this.filterMode == 'gridFilter' && this.filterPlugin) {\n            this.filterPlugin.onFilterChange();\n        }\n        if (this.filterMode == 'filterToolbar' && this.filterPlugin) {\n\n            this.onFilterChange();\n\n            // finally select the selected node, as filtertrigger clears all selections\n            sm.suspendEvents();\n            Ext.each(nodes, function(node) {\n                sm.select(node, Ext.EventObject, true);\n            }, this);\n            sm.resumeEvents();\n        }\n    },\n\n    /**\n     * selects path by container Path\n     *\n     * @param {String} containerPath\n     * @param {String} [attr]\n     * @param {Function} [callback]\n     */\n    selectContainerPath: function(containerPath, attr, callback) {\n        return this.selectPath(this.getTreePath(containerPath), attr, callback);\n    },\n\n    /**\n     * get default container for new records\n     *\n     * @param {String} default container registry key\n     * @return {Tine.Tinebase.Model.Container}\n     */\n    getDefaultContainer: function(registryKey) {\n        if (! registryKey) {\n            registryKey = 'defaultContainer';\n        }\n\n        var container = Tine[this.appName].registry.get(registryKey);\n\n        return this.getSelectedContainer('addGrant', container, true);\n    }\n});\n"], "fixing_code": ["/*\n * Tine 2.0\n * \n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Alexander Stintzing <a.stintzing@metaways.de>\n * @copyright   Copyright (c) 2012-2017 Metaways Infosystems GmbH (http://www.metaways.de)\n */\nExt.ns('Tine.Filemanager');\n\n/**\n * @namespace   Tine.Filemanager\n * @class       Tine.Filemanager.NodeEditDialog\n * @extends     Tine.widgets.dialog.EditDialog\n * \n * <p>Node Compose Dialog</p>\n * <p></p>\n * \n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Alexander Stintzing <a.stintzing@metaways.de>\n * \n * @param       {Object} config\n * @constructor\n * Create a new Tine.Filemanager.NodeEditDialog\n */\nTine.Filemanager.NodeEditDialog = Ext.extend(Tine.widgets.dialog.EditDialog, {\n    \n    /**\n     * @private\n     */\n    windowNamePrefix: 'NodeEditWindow_',\n    appName: 'Filemanager',\n    recordClass: Tine.Filemanager.Model.Node,\n    recordProxy: Tine.Filemanager.fileRecordBackend,\n    tbarItems: null,\n    evalGrants: true,\n    showContainerSelector: false,\n    displayNotes: true,\n    requiredSaveGrant: 'readGrant',\n    \n    /**\n     * @type Tine.Filemanager.DownloadLinkGridPanel\n     */\n    downloadLinkGrid: null,\n    \n    initComponent: function() {\n        this.app = Tine.Tinebase.appMgr.get('Filemanager');\n        this.downloadAction = new Ext.Action({\n            requiredGrant: 'readGrant',\n            allowMultiple: false,\n            actionType: 'download',\n            text: this.app.i18n._('Save locally'),\n            handler: this.onDownload,\n            iconCls: 'action_filemanager_save_all',\n            disabled: this.record.data.type === 'folder',\n            scope: this\n        });\n        \n        this.tbarItems = [this.downloadAction];\n        \n        Tine.Filemanager.NodeEditDialog.superclass.initComponent.call(this);\n    },\n\n    /**\n     * folder or file?\n     */\n    getFittingTypeTranslation: function (isWindowTitle) {\n        if (isWindowTitle) {\n            return this.record.data.type == 'folder' ? this.app.i18n._('Edit folder') : this.app.i18n._('edit file');\n        } else {\n            return this.record.data.type == 'folder' ? this.app.i18n._('Folder') : this.app.i18n._('File');\n        }\n    },\n    \n    /**\n     * executed when record is loaded\n     * @private\n     */\n    onRecordLoad: function() {\n        Tine.Filemanager.NodeEditDialog.superclass.onRecordLoad.apply(this, arguments);\n        \n        this.window.setTitle(this.getFittingTypeTranslation(true));\n    },\n    \n    /**\n     * download file\n     */\n    onDownload: function() {\n        Tine.Filemanager.downloadFile(this.record);\n    },\n\n    /**\n     * returns dialog\n     * @return {Object}\n     * @private\n     */\n    getFormItems: function() {\n        var me = this,\n            _ = window.lodash,\n            fsConfig = Tine.Tinebase.configManager.get('filesystem'),\n            formFieldDefaults = {\n            xtype:'textfield',\n            anchor: '100%',\n            labelSeparator: '',\n            columnWidth: .5,\n            readOnly: true,\n            disabled: true\n        };\n        \n        this.downloadLinkGrid = new Tine.Filemanager.DownloadLinkGridPanel({\n            node: this.record,\n            app: this.app,\n            title: this.app.i18n._('Public Links'),\n            editDialog: this\n        });\n\n        // require('./GrantsPanel');\n        var grantsPanel = new Tine.Filemanager.GrantsPanel({\n            app: this.app,\n            editDialog: this\n        });\n\n        var notificationPanel = new Tine.Filemanager.NotificationPanel({\n            app: this.app,\n            editDialog: this\n        });\n\n        var revisionPanel = {};\n\n        if (_.get(fsConfig, 'modLogActive', false)) {\n            revisionPanel = new Tine.Filemanager.RevisionPanel({\n                editDialog: this\n            });\n        }\n\n        return {\n            xtype: 'tabpanel',\n            border: false,\n            plain:true,\n            plugins: [{\n                ptype : 'ux.tabpanelkeyplugin'\n            }],\n            activeTab: 0,\n            border: false,\n            items:[{\n                title: this.getFittingTypeTranslation(false),\n                autoScroll: true,\n                border: false,\n                frame: true,\n                layout: 'border',\n                items: [{\n                    region: 'center',\n                    layout: 'hfit',\n                    border: false,\n                    items: [{\n                        xtype: 'fieldset',\n                        layout: 'hfit',\n                        autoHeight: true,\n                        title: this.getFittingTypeTranslation(false),\n                        items: [{\n                            xtype: 'columnform',\n                            labelAlign: 'top',\n                            formDefaults: formFieldDefaults,\n                            items: [[{\n                                    fieldLabel: this.app.i18n._('Name'),\n                                    requiredGrant: 'editGrant',\n                                    name: 'name',\n                                    allowBlank: false,\n                                    readOnly: false,\n                                    columnWidth: .75,\n                                    disabled: false\n                                }, {\n                                    fieldLabel: this.app.i18n._('Type'),\n                                    name: 'contenttype',\n                                    columnWidth: .25\n                                }],[{\n                                    xtype: 'displayfield',\n                                    name: 'isIndexed',\n                                    hideLabel: true,\n                                    fieldClass: 'x-ux-displayfield-text',\n                                    width: 10,\n                                    setValue: function(value) {\n                                        var string, color, html = '';\n                                        if (Tine.Tinebase.configManager.get('filesystem.index_content', 'Tinebase') && me.record.get('type') == 'file') {\n                                            string = value ? me.app.i18n._('Indexed') : me.app.i18n._('Not yet indexed');\n                                            color = value ? 'green' : 'yellow';\n                                            html = ['<span style=\"color:', color, ' !important;\" qtip=\"',string, '\">&bull;</span>'].join('');\n                                        }\n\n                                        this.setRawValue(html);\n                                    }\n                                }, {\n                                    xtype: 'displayfield',\n                                    name: 'path',\n                                    hideLabel: true,\n                                    fieldClass: 'x-ux-displayfield-text',\n                                    htmlEncode: true,\n                                    columnWidth: 1\n                                }],[\n                                Tine.widgets.form.RecordPickerManager.get('Addressbook', 'Contact', {\n                                    userOnly: true,\n                                    useAccountRecord: true,\n                                    blurOnSelect: true,\n                                    fieldLabel: this.app.i18n._('Created By'),\n                                    name: 'created_by'\n                                }), {\n                                    fieldLabel: this.app.i18n._('Creation Time'),\n                                    name: 'creation_time',\n                                    xtype: 'datefield'\n                                }\n                                ],[\n                                Tine.widgets.form.RecordPickerManager.get('Addressbook', 'Contact', {\n                                    userOnly: true,\n                                    useAccountRecord: true,\n                                    blurOnSelect: true,\n                                    fieldLabel: this.app.i18n._('Modified By'),\n                                    name: 'last_modified_by'\n                                }), {\n                                    fieldLabel: this.app.i18n._('Last Modified'),\n                                    name: 'last_modified_time',\n                                    xtype: 'datefield'\n                                }\n                                ]]\n                        }]\n                    }, revisionPanel]\n                }, {\n                    // activities and tags\n                    layout: 'accordion',\n                    animate: true,\n                    region: 'east',\n                    width: 210,\n                    split: true,\n                    collapsible: true,\n                    collapseMode: 'mini',\n                    header: false,\n                    margins: '0 5 0 5',\n                    border: true,\n                    items: [\n                        new Ext.Panel({\n                            title: this.app.i18n._('Description'),\n                            iconCls: 'descriptionIcon',\n                            layout: 'form',\n                            labelAlign: 'top',\n                            border: false,\n                            items: [{\n                                style: 'margin-top: -4px; border 0px;',\n                                labelSeparator: '',\n                                xtype: 'textarea',\n                                name: 'description',\n                                hideLabel: true,\n                                grow: false,\n                                preventScrollbars: false,\n                                anchor: '100% 100%',\n                                emptyText: this.app.i18n._('Enter description'),\n                                requiredGrant: 'editGrant'\n                            }]\n                        }),\n                        new Tine.widgets.tags.TagPanel({\n                            app: 'Filemanager',\n                            border: false,\n                            bodyStyle: 'border:1px solid #B5B8C8;'\n                        })\n                    ]\n                }]\n            },\n            new Tine.widgets.activities.ActivitiesTabPanel({\n                app: this.appName,\n                record_id: this.record.id,\n                record_model: 'Tinebase_Model_Tree_Node'\n                }),\n                this.downloadLinkGrid,\n                {xtype: 'Tine.Filemanager.UsagePanel'},\n                grantsPanel,\n                notificationPanel\n            ]\n        }\n    }\n});\n\n/**\n * Filemanager Edit Popup\n * \n * @param   {Object} config\n * @return  {Ext.ux.Window}\n */\nTine.Filemanager.NodeEditDialog.openWindow = function (config) {\n    var id = (config.record && config.record.id) ? config.record.id : 0;\n    var window = Tine.WindowFactory.getWindow({\n        width: 800,\n        height: 570,\n        name: Tine.Filemanager.NodeEditDialog.prototype.windowNamePrefix + id,\n        contentPanelConstructor: 'Tine.Filemanager.NodeEditDialog',\n        contentPanelConstructorConfig: config\n    });\n    \n    return window;\n};\n", "/*\n * Tine 2.0\n *\n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Cornelius Wei\u00df <c.weiss@metaways.de>\n * @copyright   Copyright (c) 2017 Metaways Infosystems GmbH (http://www.metaways.de)\n */\nExt.ns('Tine.Filemanager.nodeActions');\n\n/**\n * @singleton\n */\nTine.Filemanager.nodeActionsMgr = new (Ext.extend(Tine.widgets.ActionManager, {\n    actionConfigs: Tine.Filemanager.nodeActions\n}))();\n\n// /**\n//  * reload\n//  */\n// Tine.Filemanager.nodeActions.Reload = {\n//     app: 'Filemanager',\n//     text: 'Reload', // _('Reload),\n//     iconCls: 'x-tbar-loading',\n//     handler: function() {\n//         var record = this.initialConfig.selections[0];\n//         // arg - does not trigger tree children reload!\n//         Tine.Filemanager.fileRecordBackend.loadRecord(record);\n//     }\n// };\n\n/**\n * create new folder, needs a single folder selection with addGrant\n */\nTine.Filemanager.nodeActions.CreateFolder = {\n    app: 'Filemanager',\n    requiredGrant: 'addGrant',\n    allowMultiple: false,\n    // actionType: 'add',\n    text: 'Create Folder', // _('Create Folder')\n    disabled: true,\n    iconCls: 'action_create_folder',\n    scope: this,\n    handler: function() {\n        var app = this.initialConfig.app,\n            currentFolderNode = this.initialConfig.selections[0],\n            nodeName = Tine.Filemanager.Model.Node.getContainerName();\n\n        Ext.MessageBox.prompt(app.i18n._('New Folder'), app.i18n._('Please enter the name of the new folder:'), function(btn, text) {\n            if(currentFolderNode && btn == 'ok') {\n                if (! text) {\n                    Ext.Msg.alert(String.format(app.i18n._('No {0} added'), nodeName), String.format(app.i18n._('You have to supply a {0} name!'), nodeName));\n                    return;\n                }\n\n                var filename = currentFolderNode.get('path') + '/' + text;\n                Tine.Filemanager.fileRecordBackend.createFolder(filename);\n            }\n        }, this);\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        var enabled = !isFilterSelect\n            && records && records.length == 1\n            && records[0].get('type') == 'folder'\n            && window.lodash.get(records, '[0].data.account_grants.addGrant', false);\n\n        action.setDisabled(!enabled);\n    }\n};\n\n/**\n * show native file select, upload files, create nodes\n * a single directory node with create grant has to be selected\n * for this action to be active\n */\n// Tine.Filemanager.nodeActions.UploadFiles = {};\n\n/**\n * single file or directory node with readGrant\n */\nTine.Filemanager.nodeActions.Edit = {\n    app: 'Filemanager',\n    requiredGrant: 'readGrant',\n    allowMultiple: false,\n    text: 'Edit Properties', // _('Edit Properties')\n    iconCls: 'action_edit_file',\n    disabled: true,\n    // actionType: 'edit',\n    scope: this,\n    handler: function () {\n        if(this.initialConfig.selections.length == 1) {\n            Tine.Filemanager.NodeEditDialog.openWindow({record: this.initialConfig.selections[0]});\n        }\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        // run default updater\n        Tine.widgets.ActionUpdater.prototype.defaultUpdater(action, grants, records, isFilterSelect);\n\n        var _ = window.lodash,\n            disabled = _.isFunction(action.isDisabled) ? action.isDisabled() : action.disabled;\n\n        // if enabled check for not accessible node and disable\n        if (! disabled) {\n            action.setDisabled(window.lodash.reduce(records, function(disabled, record) {\n                return disabled || record.isVirtual();\n            }, false));\n        }\n    }\n};\n\n/**\n * single file or directory node with editGrant\n */\nTine.Filemanager.nodeActions.Rename = {\n    app: 'Filemanager',\n    requiredGrant: 'editGrant',\n    allowMultiple: false,\n    text: 'Rename', // _('Rename')\n    iconCls: 'action_rename',\n    disabled: true,\n    // actionType: 'edit',\n    scope: this,\n    handler: function () {\n        var _ = window.lodash,\n            app = this.initialConfig.app,\n            record = this.initialConfig.selections[0],\n            nodeName = record.get('type') == 'folder' ?\n                Tine.Filemanager.Model.Node.getContainerName() :\n                Tine.Filemanager.Model.Node.getRecordName();\n\n        Ext.MessageBox.show({\n            title: String.format(i18n._('Rename {0}'), nodeName),\n            msg: String.format(i18n._('Please enter the new name of the {0}:'), nodeName),\n            buttons: Ext.MessageBox.OKCANCEL,\n            value: record.get('name'),\n            fn: function (btn, text) {\n                if (btn == 'ok') {\n                    if (!text) {\n                        Ext.Msg.alert(String.format(i18n._('Not renamed {0}'), nodeName), String.format(i18n._('You have to supply a {0} name!'), nodeName));\n                        return;\n                    }\n\n                    // @TODO validate filename\n                    var targetPath = record.get('path').replace(new RegExp(_.escapeRegExp(record.get('name')) +'$'), text);\n                    Tine.Filemanager.fileRecordBackend.copyNodes([record], targetPath, true);\n\n                }\n            },\n            scope: this,\n            prompt: true,\n            icon: Ext.MessageBox.QUESTION\n        });\n    }\n};\n\n/**\n * single file or directory node with editGrant\n */\nTine.Filemanager.nodeActions.SystemLink = {\n    app: 'Filemanager',\n    requiredGrant: 'readGrant',\n    allowMultiple: false,\n    text: 'System Link', // _('System Link')\n    iconCls: 'action_system_link',\n    disabled: true,\n    // actionType: 'edit',\n    scope: this,\n    handler: function () {\n        var _ = window.lodash,\n            app = this.initialConfig.app,\n            record = this.initialConfig.selections[0];\n\n        Ext.MessageBox.show({\n            title: i18n._('System Link'),\n            // minWidth:\n            maxWidth: screen.availWidth,\n            msg: '<b>' + app.i18n._('Use this link to share the entry with other system users') + ':</b><br>'\n                    + record.getSystemLink(),\n            buttons: Ext.MessageBox.OK,\n            // value: record.getSystemLink(),\n            // prompt: true,\n            icon: Ext.MessageBox.INFO\n        });\n    }\n};\n\n/**\n * one or multiple nodes, all need deleteGrant\n */\nTine.Filemanager.nodeActions.Delete = {\n    app: 'Filemanager',\n    requiredGrant: 'deleteGrant',\n    allowMultiple: true,\n    text: 'Delete', // _('Delete')\n    disabled: true,\n    iconCls: 'action_delete',\n    scope: this,\n    handler: function (button, event) {\n        var app = this.initialConfig.app,\n            nodeName = '',\n            nodes = this.initialConfig.selections;\n\n        if (nodes && nodes.length) {\n            for (var i = 0; i < nodes.length; i++) {\n                var currNodeData = nodes[i].data;\n                nodeName += Tine.Tinebase.EncodingHelper.encode(typeof currNodeData.name == 'object' ?\n                    currNodeData.name.name :\n                    currNodeData.name) + '<br />';\n            }\n        }\n\n        this.conflictConfirmWin = Tine.widgets.dialog.FileListDialog.openWindow({\n            modal: true,\n            allowCancel: false,\n            height: 180,\n            width: 300,\n            title: app.i18n._('Do you really want to delete the following files?'),\n            text: nodeName,\n            scope: this,\n            handler: function (button) {\n                if (nodes && button == 'yes') {\n                    Tine.Filemanager.fileRecordBackend.deleteItems(nodes);\n                }\n\n                for (var i = 0; i < nodes.length; i++) {\n                    var node = nodes[i];\n\n                    if (node.fileRecord) {\n                        var upload = Tine.Tinebase.uploadManager.getUpload(node.fileRecord.get('uploadKey'));\n                        upload.setPaused(true);\n                        Tine.Tinebase.uploadManager.unregisterUpload(upload.id);\n                    }\n\n                }\n            }\n        });\n    }\n};\n\n/**\n * one node with readGrant\n */\n// Tine.Filemanager.nodeActions.Copy = {};\n\n/**\n * one or multiple nodes with read, edit AND deleteGrant\n */\nTine.Filemanager.nodeActions.Move = {\n    app: 'Filemanager',\n    requiredGrant: 'editGrant',\n    allowMultiple: true,\n    text: 'Move', // _('Move')\n    disabled: true,\n    actionType: 'edit',\n    scope: this,\n    iconCls: 'action_move',\n    handler: function() {\n        var app = this.initialConfig.app,\n            i18n = app.i18n,\n            records = this.initialConfig.selections;\n\n        var filePickerDialog = new Tine.Filemanager.FilePickerDialog({\n            title: app.i18n._('Move Items'),\n            singleSelect: true,\n            constraint: 'folder'\n        });\n\n        filePickerDialog.on('selected', function(nodes) {\n            var node = nodes[0];\n            Tine.Filemanager.fileRecordBackend.copyNodes(records, node, true);\n        });\n\n        filePickerDialog.openWindow();\n    }\n};\n\n/**\n * one file node with download grant\n */\nTine.Filemanager.nodeActions.Download = {\n    app: 'Filemanager',\n    requiredGrant: 'downloadGrant',\n    allowMultiple: false,\n    actionType: 'download',\n    text: 'Save locally', // _('Save locally')\n    iconCls: 'action_filemanager_save_all',\n    disabled: true,\n    scope: this,\n    handler: function() {\n        Tine.Filemanager.downloadFile(this.initialConfig.selections[0]);\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        var enabled = !isFilterSelect\n            && records && records.length == 1\n            && records[0].get('type') != 'folder'\n            && window.lodash.get(records, '[0].data.account_grants.downloadGrant', false);\n\n        action.setDisabled(!enabled);\n    }\n};\n\n/**\n * one file node with readGrant\n */\nTine.Filemanager.nodeActions.Preview = {\n    app: 'Filemanager',\n    allowMultiple: false,\n    requiredGrant: 'readGrant',\n    text: 'Preview', // _('Preview')\n    disabled: true,\n    iconCls: 'previewIcon',\n    scope: this,\n    handler: function () {\n        var selections = this.initialConfig.selections;\n\n        if (selections.length > 0) {\n            var selection = selections[0];\n\n            if (selection && selection.get('type') === 'file') {\n                Tine.Filemanager.DocumentPreview.openWindow({\n                    record: selection,\n                    initialApp: this.initialConfig.initialApp || null\n                });\n            }\n        }\n    }\n};\n\n/**\n * one node with publish grant\n */\nTine.Filemanager.nodeActions.Publish = {\n    app: 'Filemanager',\n    allowMultiple: false,\n    text: 'Publish', // _('Publish')\n    disabled: true,\n    iconCls: 'action_publish',\n    scope: this,\n    handler: function() {\n        var app = this.initialConfig.app,\n            i18n = app.i18n,\n            selections = this.initialConfig.selections;\n\n        if (selections.length != 1) {\n            return;\n        }\n\n        var passwordDialog = new Tine.Tinebase.widgets.dialog.PasswordDialog({\n            allowEmptyPassword: true\n        });\n        passwordDialog.openWindow();\n\n        passwordDialog.on('passwordEntered', function (password) {\n            var date = new Date();\n            date.setDate(date.getDate() + 30);\n\n            var record = new Tine.Filemanager.Model.DownloadLink({\n                node_id: selections[0].id,\n                expiry_time: date,\n                password: password\n            });\n\n            Tine.Filemanager.downloadLinkRecordBackend.saveRecord(record, {\n                success: function (record) {\n                    Tine.Filemanager.FilePublishedDialog.openWindow({\n                        title: selections[0].data.type == 'folder' ? app.i18n._('Folder has been published successfully') : app.i18n._('File has been published successfully'),\n                        record: record,\n                        password: password\n                    });\n                }, failure: Tine.Tinebase.ExceptionHandler.handleRequestException, scope: this\n            });\n        }, this);\n    },\n    actionUpdater: function(action, grants, records, isFilterSelect) {\n        var enabled = !isFilterSelect\n            && records && records.length == 1\n            && window.lodash.get(records, '[0].data.account_grants.publishGrant', false);\n\n        action.setDisabled(!enabled);\n    }\n};\n\n/**\n * one or multiple file nodes currently uploaded\n */\nTine.Filemanager.nodeActions.PauseUploadAction = {};\n\n/**\n * one or multiple file nodes currently upload paused\n */\nTine.Filemanager.nodeActions.ResumeUploadAction = {};\n\n/**\n * one or multiple file nodes currently uploaded or upload paused\n * @TODO deletes node as well?\n */\nTine.Filemanager.nodeActions.CancelUploadAction = {};\n", "/*\n * Tine 2.0\n * \n * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3\n * @author      Cornelius Weiss <c.weiss@metaways.de>\n * @copyright   Copyright (c) 2007-2011 Metaways Infosystems GmbH (http://www.metaways.de)\n */\nExt.ns('Tine.widgets', 'Tine.widgets.container');\n\n/**\n * @namespace   Tine.widgets.container\n * @class       Tine.widgets.container.TreePanel\n * @extends     Ext.tree.TreePanel\n * @author      Cornelius Weiss <c.weiss@metaways.de>\n * @param       {Object} config Configuration options\n * @description\n * <p>Utility class for generating container trees as used in the apps tree panel</p>\n * <p>This widget handles all container related actions like add/rename/delte and manager permissions<p>\n *<p>Example usage:</p>\n<pre><code>\nvar taskPanel =  new Tine.containerTreePanel({\n    app: Tine.Tinebase.appMgr.get('Tasks'),\n    recordClass: Tine.Tasks.Model.Task\n});\n</code></pre>\n */\nTine.widgets.container.TreePanel = function(config) {\n    Ext.apply(this, config);\n\n    this.addEvents(\n        /**\n         * @event containeradded\n         * Fires when a container was added\n         * @param {container} the new container\n         */\n        'containeradd',\n        /**\n         * @event containerdelete\n         * Fires when a container got deleted\n         * @param {container} the deleted container\n         */\n        'containerdelete',\n        /**\n         * @event containerrename\n         * Fires when a container got renamed\n         * @param {container} the renamed container\n         */\n        'containerrename',\n        /**\n         * @event containerpermissionchange\n         * Fires when a container got renamed\n         * @param {container} the container whose permissions where changed\n         */\n        'containerpermissionchange',\n        /**\n         * @event containercolorset\n         * Fires when a container color got changed\n         * @param {container} the container whose color where changed\n         */\n        'containercolorset'\n    );\n\n    Tine.widgets.container.TreePanel.superclass.constructor.call(this);\n};\n\nExt.extend(Tine.widgets.container.TreePanel, Ext.tree.TreePanel, {\n    /**\n     * @cfg {Tine.Tinebase.Application} app\n     */\n    app: null,\n    /**\n     * @cfg {Boolean} allowMultiSelection (defaults to true)\n     */\n    allowMultiSelection: true,\n    /**\n     * @cfg {String} defaultContainerPath\n     */\n    defaultContainerPath: null,\n    /**\n     * @cfg {array} extraItems additional items to display under all\n     */\n    extraItems: null,\n    /**\n     * @cfg {String} filterMode one of:\n     *   - gridFilter: hooks into the grids.store\n     *   - filterToolbar: hooks into the filterToolbar (container filterModel required)\n     */\n    filterMode: 'gridFilter',\n    /**\n     * @cfg {Tine.data.Record} recordClass\n     */\n    recordClass: null,\n    /**\n     * @cfg {Array} requiredGrants\n     * grants which are required to select leaf node(s)\n     */\n    requiredGrants: null,\n\n    /**\n     * @cfg {Boolean} useContainerColor\n     * use container colors\n     */\n    useContainerColor: false,\n    /**\n     * @cfg {Boolean} useProperties\n     * use container properties\n     */\n    useProperties: true,\n\n    /**\n     * @property {Object}\n     * modelConfiguration of recordClass (if available)\n     */\n    modelConfiguration: null,\n\n    /**\n     * @cfg {String}\n     * canonical name\n     */\n    canonicalName: 'ContainerTree',\n\n    /**\n     * Referenced grid panel\n     */\n    gridPanel: null,\n\n    useArrows: true,\n    border: false,\n    autoScroll: true,\n    enableDrop: true,\n    ddGroup: 'containerDDGroup',\n    hasPersonalContainer: true,\n    hasContextMenu: true,\n\n    /**\n     * @fixme not needed => all events hand their events over!!!\n     *\n     * @property ctxNode holds treenode which got a contextmenu\n     * @type Ext.tree.TreeNode\n     */\n    ctxNode: null,\n\n    /**\n     * No user interactions, menus etc. allowed except for browsing\n     */\n    readOnly: false,\n\n    /**\n     * init this treePanel\n     */\n    initComponent: function() {\n        if (! this.appName && this.recordClass) {\n            this.appName = this.recordClass.getMeta('appName');\n        }\n        if (! this.app) {\n            this.app = Tine.Tinebase.appMgr.get(this.appName);\n        }\n\n        if (this.allowMultiSelection) {\n            this.selModel = new Ext.tree.MultiSelectionModel({});\n        }\n\n        if (this.recordClass) {\n            this.modelConfiguration = this.recordClass.getModelConfiguration();\n        }\n\n        if (this.modelConfiguration) {\n            this.hasPersonalContainer = this.modelConfiguration.hasPersonalContainer !== false;\n        }\n\n        var containerName = this.recordClass ? this.recordClass.getContainerName() : 'container';\n        var containersName = this.recordClass ? this.recordClass.getContainersName() : 'containers';\n\n        //ngettext('container', 'containers', n);\n        this.containerName = this.containerName || this.app.i18n.n_hidden(containerName, containersName, 1);\n        this.containersName = this.containersName || this.app.i18n._hidden(containersName);\n\n        this.loader = this.loader || new Tine.widgets.tree.Loader({\n            getParams: this.onBeforeLoad.createDelegate(this),\n            inspectCreateNode: this.onBeforeCreateNode.createDelegate(this)\n        });\n\n        this.loader.on('virtualNodesSelected', this.onVirtualNodesSelected.createDelegate(this));\n\n        var extraItems = this.getExtraItems();\n        this.root = this.getRoot(extraItems);\n        if (!this.hasPersonalContainer && ! extraItems.length) {\n            this.rootVisible = false;\n        }\n\n        if (!this.readOnly && !this.dropConfig) {\n            // init drop zone\n            this.dropConfig = {\n                ddGroup: this.ddGroup || 'TreeDD',\n                appendOnly: this.ddAppendOnly === true,\n                /**\n                 * @todo check acl!\n                 */\n                onNodeOver: function (n, dd, e, data) {\n                    var node = n.node;\n\n                    // auto node expand check\n                    if (node.hasChildNodes() && !node.isExpanded()) {\n                        this.queueExpand(node);\n                    }\n                    return node.attributes.allowDrop ? 'tinebase-tree-drop-move' : false;\n                },\n                isValidDropPoint: function (n, dd, e, data) {\n                    return n.node.attributes.allowDrop;\n                },\n                completeDrop: Ext.emptyFn\n            };\n        }\n\n        if (this.hasContextMenu) {\n            this.initContextMenu();\n        }\n\n        this.getSelectionModel().on('beforeselect', this.onBeforeSelect, this);\n        this.getSelectionModel().on('selectionchange', this.onSelectionChange, this);\n\n        this.on('click', this.onClick, this);\n        if (this.hasContextMenu) {\n            this.on('contextmenu', this.onContextMenu, this);\n        }\n\n        if (!this.readOnly) {\n            this.on('beforenodedrop', this.onBeforeNodeDrop, this);\n            this.on('append', this.onAppendNode, this);\n            this.on('beforecollapsenode', this.onBeforeCollapse, this);\n        }\n\n        Tine.widgets.container.TreePanel.superclass.initComponent.call(this);\n    },\n\n    /**\n     * @param nodes\n     */\n    onVirtualNodesSelected: function (nodes) {\n        this.suspendEvents();\n\n        if (0 === nodes.length) {\n            return;\n        }\n\n\n        var sm = this.getSelectionModel();\n\n        sm.clearSelections(true);\n\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n\n            if (sm.isSelected(node)) {\n                sm.lastSelNode = node;\n                continue;\n            }\n\n            sm.selNodes.push(node);\n            sm.selMap[node.id] = node;\n            sm.lastSelNode = node;\n            node.ui.onSelectedChange(true);\n        }\n\n        this.onFilterChange();\n        this.resumeEvents();\n    },\n\n    /**\n     * returns canonical path part\n     * @returns {string}\n     */\n    getCanonicalPathSegment: function () {\n        if (this.recordClass) {\n            return [\n                this.recordClass.getMeta('modelName'),\n                this.canonicalName,\n            ].join(Tine.Tinebase.CanonicalPath.separator);\n        }\n    },\n\n    getRoot: function(extraItems)\n    {\n        return {\n            path: '/',\n            cls: 'tinebase-tree-hide-collapsetool',\n            expanded: true,\n            children: [{\n                path: Tine.Tinebase.container.getMyNodePath(),\n                id: 'personal',\n                hidden: !this.hasPersonalContainer\n            }, {\n                path: '/shared',\n                id: 'shared'\n            }, {\n                path: '/personal',\n                id: 'otherUsers',\n                hidden: !this.hasPersonalContainer\n            }].concat(extraItems)\n        };\n    },\n\n    /**\n     * template fn for subclasses to set default path\n     *\n     * @return {String}\n     */\n    getDefaultContainerPath: function() {\n        return this.defaultContainerPath || '/';\n    },\n\n    /**\n     * template fn for subclasses to append extra items\n     *\n     * @return {Array}\n     */\n    getExtraItems: function() {\n        return this.extraItems || [];\n    },\n\n    /**\n     * returns a filter plugin to be used in a grid\n     */\n    getFilterPlugin: function() {\n        if (!this.filterPlugin) {\n            this.filterPlugin = new Tine.widgets.tree.FilterPlugin({\n                treePanel: this\n            });\n        }\n\n        return this.filterPlugin;\n    },\n\n    /**\n     * returns object of selected container/filter or null/default\n     *\n     * @param {Array} [requiredGrants]\n     * @param {Tine.Tinebase.Model.Container} [defaultContainer]\n     * @param {Boolean} onlySingle use default if more than one container in selection\n     * @return {Tine.Tinebase.Model.Container}\n     */\n    getSelectedContainer: function(requiredGrants, defaultContainer, onlySingle) {\n        var container = defaultContainer,\n            sm = this.getSelectionModel(),\n            selection = typeof sm.getSelectedNodes == 'function' ? sm.getSelectedNodes() : [sm.getSelectedNode()];\n\n        if (Ext.isArray(selection) && selection.length > 0 && (! onlySingle || selection.length === 1 || ! container)) {\n            container = this.getContainerFromSelection(selection, requiredGrants) || container;\n        }\n        // postpone this as we don't get the whole container record here\n//        else if (this.filterMode == 'filterToolbar' && this.filterPlugin) {\n//            container = this.getContainerFromFilter() || container;\n//        }\n\n        return container;\n    },\n\n    /**\n     * get container from selection\n     *\n     * @param {Array} selection\n     * @param {Array} requiredGrants\n     * @return {Tine.Tinebase.Model.Container}\n     */\n    getContainerFromSelection: function(selection, requiredGrants) {\n        var result = null;\n\n        Ext.each(selection, function(node) {\n            if (node && Tine.Tinebase.container.pathIsContainer(node.attributes.container.path)) {\n                if (! requiredGrants || this.hasGrant(node, requiredGrants)) {\n                    result = node.attributes.container;\n                    // take the first one\n                    return false;\n                }\n            }\n        }, this);\n\n        return result;\n    },\n\n    /**\n     * get container from filter toolbar\n     *\n     * @param {Array} requiredGrants\n     * @return {Tine.Tinebase.Model.Container}\n     *\n     * TODO make this work -> atm we don't get the account grants here (why?)\n     */\n    getContainerFromFilter: function(requiredGrants) {\n        var result = null;\n\n        // check if single container is selected in filter toolbar \n        var ftb = this.filterPlugin.getGridPanel().filterToolbar,\n            filterValue = null;\n\n        ftb.filterStore.each(function(filter) {\n            if (filter.get('field') == this.recordClass.getMeta('containerProperty')) {\n                filterValue = filter.get('value');\n                if (filter.get('operator') == 'equals') {\n                    result = filterValue;\n                } else if (filter.get('operator') == 'in' && filterValue.length == 1){\n                    result = filterValue[0];\n                }\n                // take the first one\n                return false;\n            }\n        }, this);\n\n        return result;\n    },\n\n    /**\n     * convert containerPath to treePath\n     *\n     * @param {String}  containerPath\n     * @return {String} treePath\n     */\n    getTreePath: function(containerPath) {\n        var treePath = '/' + this.getRootNode().id + (containerPath !== '/' ? containerPath : '');\n\n        // replace personal with otherUsers if personal && ! personal/myaccountid\n        var matches = containerPath.match(/^\\/personal\\/{0,1}([0-9a-z_\\-]*)\\/{0,1}/i);\n        if (matches) {\n            if (matches[1] != Tine.Tinebase.registry.get('currentAccount').accountId) {\n                treePath = treePath.replace('personal', 'otherUsers');\n            } else {\n                treePath = treePath.replace('personal/'  + Tine.Tinebase.registry.get('currentAccount').accountId, 'personal');\n            }\n        }\n\n        return treePath;\n    },\n\n    /**\n     * checkes if user has requested grant for given container represented by a tree node\n     *\n     * @param {Ext.tree.TreeNode} node\n     * @param {Array} grant\n     * @return {}\n     */\n    hasGrant: function(node, grants) {\n        var attr = node.attributes,\n            condition = false;\n\n        if(attr && attr.leaf) {\n            condition = true;\n            Ext.each(grants, function(grant) {\n                condition = condition && attr.container.account_grants[grant];\n            }, this);\n        }\n\n        return condition;\n    },\n\n    /**\n     * @private\n     * - select default path\n     */\n    afterRender: function() {\n        Tine.widgets.container.TreePanel.superclass.afterRender.call(this);\n\n        var defaultContainerPath = this.getDefaultContainerPath();\n\n        if (defaultContainerPath && defaultContainerPath != '/') {\n            var root = '/' + this.getRootNode().id;\n\n            this.expand();\n\n            // @TODO use getTreePath() when filemanager is fixed\n            (function() {\n                // no initial load triggering here\n                this.getSelectionModel().suspendEvents();\n                this.selectPath(root + defaultContainerPath);\n                this.getSelectionModel().resumeEvents();\n            }).defer(100, this);\n        }\n    },\n\n    /**\n     * @private\n     */\n    initContextMenu: function() {\n\n        this.contextMenuUserFolder = Tine.widgets.tree.ContextMenu.getMenu({\n            nodeName: this.containerName,\n            actions: ['add'],\n            scope: this,\n            backend: 'Tinebase_Container',\n            backendModel: 'Container'\n        });\n\n        this.contextMenuSingleContainer = Tine.widgets.tree.ContextMenu.getMenu({\n            nodeName: this.containerName,\n            actions: ['delete', 'rename', 'grants'].concat(\n                this.useProperties ? ['properties'] : []\n            ).concat(\n                this.useContainerColor ? ['changecolor'] : []\n            ),\n            scope: this,\n            backend: 'Tinebase_Container',\n            backendModel: 'Container'\n        });\n\n        this.contextMenuSingleContainerProperties = Tine.widgets.tree.ContextMenu.getMenu({\n            nodeName: this.containerName,\n            actions: ['properties'],\n            scope: this,\n            backend: 'Tinebase_Container',\n            backendModel: 'Container'\n        });\n    },\n\n    /**\n     * called when node is appended to this tree\n     */\n    onAppendNode: function(tree, parent, appendedNode, idx) {\n        if (appendedNode.leaf && this.hasGrant(appendedNode, this.requiredGrants)) {\n            if (this.useContainerColor) {\n                appendedNode.ui.render = appendedNode.ui.render.createSequence(function () {\n                    this.colorNode = Ext.DomHelper.insertAfter(this.iconNode, {\n                        tag: 'span',\n                        html: '&nbsp;&#9673;&nbsp',\n                        style: {color: appendedNode.attributes.container.color || '#808080'}\n                    }, true);\n                }, appendedNode.ui);\n            }\n        }\n    },\n\n    /**\n     * expand automatically on node click\n     *\n     * @param {} node\n     * @param {} e\n     */\n    onClick: function(node, e) {\n        var sm = this.getSelectionModel(),\n            selectedNode = sm.getSelectedNode();\n\n        // NOTE: in single select mode, a node click on a selected node does not trigger \n        //       a selection change. We need to do this by hand here\n        if (! this.allowMultiSelection && node == selectedNode) {\n            this.onSelectionChange(sm, node);\n        }\n\n        node.expand();\n    },\n\n    /**\n     * show context menu\n     *\n     * @param {} node\n     * @param {} event\n     */\n    onContextMenu: function(node, event) {\n        this.ctxNode = node;\n        var container = node.attributes.container,\n            path = container.path,\n            owner;\n\n        if (! Ext.isString(path)) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (Tine.Tinebase.container.pathIsContainer(path)) {\n            if (container.account_grants && container.account_grants.adminGrant) {\n                this.contextMenuSingleContainer.showAt(event.getXY());\n            } else {\n                this.contextMenuSingleContainerProperties.showAt(event.getXY());\n            }\n        } else if (path.match(/^\\/shared$/) && (Tine.Tinebase.common.hasRight('admin', this.app.appName) || Tine.Tinebase.common.hasRight('manage_shared_folders', this.app.appName))){\n            this.contextMenuUserFolder.showAt(event.getXY());\n        } else if (Tine.Tinebase.registry.get('currentAccount').accountId == Tine.Tinebase.container.pathIsPersonalNode(path)){\n            this.contextMenuUserFolder.showAt(event.getXY());\n        }\n    },\n\n    /**\n     * adopt attr\n     *\n     * @param {Object} attr\n     */\n    onBeforeCreateNode: function(attr) {\n        if (attr.accountDisplayName) {\n            attr.name = attr.accountDisplayName;\n            attr.path = '/personal/' + attr.accountId;\n            attr.id = attr.accountId;\n        }\n\n        if (! attr.name && attr.path) {\n            attr.name = Tine.Tinebase.container.path2name(attr.path, this.containerName, this.containersName);\n        }\n\n        Ext.applyIf(attr, {\n            text: attr.name,\n            qtip: attr.name,\n            leaf: !!attr.account_grants,\n            allowDrop: !!attr.account_grants && attr.account_grants.addGrant\n        });\n\n        attr.text = Tine.Tinebase.EncodingHelper.encode(attr.text);\n        attr.qtip = Tine.Tinebase.EncodingHelper.encode(attr.qtip);\n\n        // copy 'real' data to container space\n        attr.container = Ext.copyTo({}, attr, Tine.Tinebase.Model.Container.getFieldNames());\n    },\n\n    /**\n     * returns params for async request\n     *\n     * @param {Ext.tree.TreeNode} node\n     * @return {Object}\n     */\n    onBeforeLoad: function(node) {\n        var path = node.attributes.path;\n        var type = Tine.Tinebase.container.path2type(path);\n        var owner = Tine.Tinebase.container.pathIsPersonalNode(path);\n\n        if (type === 'personal' && ! owner) {\n            type = 'otherUsers';\n        }\n\n        var params = {\n            method: 'Tinebase_Container.getContainer',\n            application: this.app.appName,\n            containerType: type,\n            requiredGrants: this.requiredGrants,\n            owner: owner\n        };\n\n        return params;\n    },\n\n    /**\n     * permit selection of nodes with missing required grant\n     *\n     * @param {} sm\n     * @param {} newSelection\n     * @param {} oldSelection\n     * @return {Boolean}\n     */\n    onBeforeSelect: function(sm, newSelection, oldSelection) {\n\n        if (this.requiredGrant && newSelection.isLeaf()) {\n            var accountGrants =  newSelection.attributes.container.account_grants || {};\n            if (! accountGrants[this.requiredGrant]) {\n                var message = '<b>' +String.format(i18n._(\"You are not allowed to select the {0} '{1}':\"), this.containerName, newSelection.attributes.text) + '</b><br />' +\n                              String.format(i18n._(\"{0} grant is required for desired action\"), this.requiredGrant);\n                Ext.Msg.alert(i18n._('Insufficient Grants'), message);\n                return false;\n            }\n        }\n    },\n\n    /**\n     * record got dropped on container node\n     *\n     * @param {Object} dropEvent\n     * @private\n     *\n     * TODO use Ext.Direct\n     */\n    onBeforeNodeDrop: function(dropEvent) {\n        var targetContainerId = dropEvent.target.id;\n\n        // get selection filter from grid\n        var sm = this.app.getMainScreen().getCenterPanel().getGrid().getSelectionModel();\n        if (sm.getCount() === 0) {\n            return false;\n        }\n        var filter = sm.getSelectionFilter();\n\n        // move messages to folder\n        Ext.Ajax.request({\n            params: {\n                method: 'Tinebase_Container.moveRecordsToContainer',\n                targetContainerId: targetContainerId,\n                filterData: filter,\n                model: this.recordClass.getMeta('modelName'),\n                applicationName: this.recordClass.getMeta('appName')\n            },\n            scope: this,\n            success: function(result, request){\n                // update grid\n                this.app.getMainScreen().getCenterPanel().loadGridData();\n            }\n        });\n\n        // prevent repair actions\n        dropEvent.dropStatus = true;\n        return true;\n    },\n\n    /**\n     * require reload when node is collapsed\n     */\n    onBeforeCollapse: function(node) {\n        node.removeAll();\n        node.loaded = false;\n    },\n\n    onFilterChange: function() {\n        // get filterToolbar\n        var ftb = this.filterPlugin.getGridPanel().filterToolbar;\n\n        // in case of filterPanel\n        ftb = ftb.activeFilterPanel ? ftb.activeFilterPanel : ftb;\n\n        // remove all ftb container and /toberemoved/ filters\n        ftb.supressEvents = true;\n        ftb.filterStore.each(function(filter) {\n            var field = filter.get('field');\n            // @todo find criteria what to remove\n            if (field === 'container_id' || field === 'attender' || field === 'path') {\n                ftb.deleteFilter(filter);\n            }\n        }, this);\n        ftb.supressEvents = false;\n\n        // set ftb filters according to tree selection\n        var containerFilter = this.getFilterPlugin().getFilter();\n        ftb.addFilter(new ftb.record(containerFilter));\n\n        ftb.onFiltertrigger();\n    },\n\n    /**\n     * called when tree selection changes\n     *\n     * @param {} sm\n     * @param {} nodes\n     */\n    onSelectionChange: function(sm, nodes) {\n\n        if (this.filterMode == 'gridFilter' && this.filterPlugin) {\n            this.filterPlugin.onFilterChange();\n        }\n        if (this.filterMode == 'filterToolbar' && this.filterPlugin) {\n\n            this.onFilterChange();\n\n            // finally select the selected node, as filtertrigger clears all selections\n            sm.suspendEvents();\n            Ext.each(nodes, function(node) {\n                sm.select(node, Ext.EventObject, true);\n            }, this);\n            sm.resumeEvents();\n        }\n    },\n\n    /**\n     * selects path by container Path\n     *\n     * @param {String} containerPath\n     * @param {String} [attr]\n     * @param {Function} [callback]\n     */\n    selectContainerPath: function(containerPath, attr, callback) {\n        return this.selectPath(this.getTreePath(containerPath), attr, callback);\n    },\n\n    /**\n     * get default container for new records\n     *\n     * @param {String} default container registry key\n     * @return {Tine.Tinebase.Model.Container}\n     */\n    getDefaultContainer: function(registryKey) {\n        if (! registryKey) {\n            registryKey = 'defaultContainer';\n        }\n\n        var container = Tine[this.appName].registry.get(registryKey);\n\n        return this.getSelectedContainer('addGrant', container, true);\n    }\n});\n"], "filenames": ["tine20/Filemanager/js/NodeEditDialog.js", "tine20/Filemanager/js/nodeActions.js", "tine20/Tinebase/js/widgets/container/TreePanel.js"], "buggy_code_start_loc": [195, 205, 598], "buggy_code_end_loc": [195, 212, 602], "fixing_code_start_loc": [196, 205, 598], "fixing_code_end_loc": [197, 208, 606], "type": "CWE-79", "message": "Stored XSS vulnerability via IMG element at \"Leadname\" of CRM in Tine 2.0 Community Edition before 2017.08.4 allows an authenticated user to inject JavaScript, which is mishandled during rendering by the application administrator and other users.", "other": {"cve": {"id": "CVE-2017-14923", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-30T01:29:01.990", "lastModified": "2017-10-05T16:49:06.450", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Stored XSS vulnerability via IMG element at \"Leadname\" of CRM in Tine 2.0 Community Edition before 2017.08.4 allows an authenticated user to inject JavaScript, which is mishandled during rendering by the application administrator and other users."}, {"lang": "es", "value": "Una vulnerabilidad de Cross-Site Scripting (XSS) persistente mediante un elemento IMG en \"Leadname\" de CRM en Time 2.0 Community Edition en versiones anteriores a la 2017.08.4 permite que un usuario autenticado inyecte c\u00f3digo JavaScript, el cual no se gestiona correctamente durante el renderizado por parte del administrador de la aplicaci\u00f3n u otros usuarios."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tine20:tine_2.0:*:*:*:*:community:*:*:*", "versionEndIncluding": "2017.08.3", "matchCriteriaId": "B37AEE90-38C9-404F-8120-555D5DAD5AC1"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/09/28/11", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/commit/146c5aaafd826c1c8990333c393bff6f64c90786", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/commit/24e39e1e930097b8793a03b8864d3c484ede546b", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/commit/bc8a6fbd3128cf5ef27d808f6c6ba869fdc2262b", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/releases", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tine20/Tine-2.0-Open-Source-Groupware-and-CRM/commit/146c5aaafd826c1c8990333c393bff6f64c90786"}}