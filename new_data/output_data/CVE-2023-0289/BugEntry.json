{"buggy_code": ["<?php\n/* Most of WebCalendar's functions.\n *\n * @author Craig Knudsen <cknudsen@cknudsen.com>\n * @copyright Craig Knudsen, <cknudsen@cknudsen.com>, http://www.k5n.us/cknudsen\n * @license http://www.gnu.org/licenses/gpl.html GNU GPL\n * @package WebCalendar\n */\n\n/* Functions start here. All non-function code should be above this.\n *\n * Note to developers:\n *  Documentation is generated from the function comments below.\n *  When adding/updating functions, please follow these conventions.\n *  Your cooperation in this matter is appreciated. :-)\n *\n *  If you want your documentation to link to the db documentation,\n *  just make sure you mention the db table name followed by \"table\"\n *  on the same line. Here's an example:\n *    Retrieve preferences from the webcal_user_pref table.\n */\n\n$tzInitSet = false;\n\n/**\n * Logs a debug message.\n *\n * Generally, we try not to leave calls to this function in the code.\n * It is used for debugging only.\n *\n * @param string $msg Text to be logged\n */\nfunction do_debug ( $msg ) {\n  // log to /tmp/webcal-debug.log\n  // error_log ( date ( 'Y-m-d H:i:s' ) . \"> $msg\\n<br />\",\n  // 3, 'd:/php/logs/debug.txt' );\n  //$fd = fopen ( \"/tmp/webcal.log\", 'a+b' );\n  //fwrite ( $fd, date ( 'Y-m-d H:i:s' ) . \"> $msg\\n\" );\n  //fclose ( $fd );\n  // 3, '/tmp/webcal-debug.log' );\n  // error_log ( date ( 'Y-m-d H:i:s' ) . \"> $msg\\n\",\n  // 2, 'sockieman:2000' );\n}\n\n/**\n * Looks for URLs in the given text, and makes them into links.\n *\n * @param string $text Input text\n *\n * @return string  The text altered to have HTML links for any web links.\n */\nfunction activate_urls( $text ) {\n  return preg_replace( '/[a-z]+:\\/\\/[^<> \\t\\r\\n]+[a-z0-9\\/]/i',\n    '<a href=\"\\\\0\">\\\\0</a>', $text );\n}\n\n/**\n * Adds something to the activity log for an event.\n *\n * The information will be saved to the webcal_entry_log table.\n *\n * @param int    $event_id  Event ID\n * @param string $user      Username of user doing this\n * @param string $user_cal  Username of user whose calendar is affected\n * @param string $type      Type of activity we are logging:\n *   - LOG_APPROVE\n *   - LOG_APPROVE_T\n *   - LOG_ATTACHMENT\n *   - LOG_COMMENT\n *   - LOG_CREATE\n *   - LOG_CREATE_T\n *   - LOG_DELETE\n *   - LOG_DELETE_T\n *   - LOG_LOGIN_FAILURE\n *   - LOG_NEWUSER_FULL\n *   - LOG_NEWUSEREMAIL\n *   - LOG_NOTIFICATION\n *   - LOG_REJECT\n *   - LOG_REJECT_T\n *   - LOG_REMINDER\n *   - LOG_UPDATE\n *   - LOG_UPDATE_T\n *   - LOG_USER_ADD\n *   - LOG_USER_DELETE\n *   - LOG_USER_UPDATE\n * @param string $text     Text comment to add with activity log entry\n */\nfunction activity_log ( $event_id, $user, $user_cal, $type, $text ) {\n  $next_id = 1;\n\n  if ( empty ( $type ) ) {\n    echo translate ( 'Error Type not set for activity log!' );\n    // But don't exit since we may be in mid-transaction.\n    return;\n  }\n\n  $res = dbi_execute ( 'SELECT MAX( cal_log_id ) FROM webcal_entry_log' );\n  if ( $res ) {\n    if ( $row = dbi_fetch_row ( $res ) )\n      $next_id = $row[0] + 1;\n\n    dbi_free_result ( $res );\n  }\n  $sql = 'INSERT INTO webcal_entry_log ( cal_log_id, cal_entry_id, cal_login,\n    cal_user_cal, cal_type, cal_date, cal_time, cal_text )\n    VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )';\n  if ( ! dbi_execute ( $sql, [$next_id, $event_id, $user,\n        ( empty ( $user_cal ) ? null : $user_cal ), $type, gmdate ( 'Ymd' ),\n          gmdate ( 'Gis' ), ( empty ( $text ) ? null : $text )] ) )\n    db_error ( true, $sql );\n}\n\n/**\n * Get the corrected timestamp after adding or subtracting ONE_HOUR\n * to compensate for DST.\n */\nfunction add_dstfree_time ( $date, $span, $interval = 1 ) {\n  $ctime = date ( 'G', $date );\n  $date += $span * $interval;\n  $dtime = date ( 'G', $date );\n  if ( $ctime == $dtime )\n    return $date;\n  elseif ( $ctime == 23 && $dtime == 0 )\n    $date -= 3600;\n  elseif ( ( $ctime == 0 && $dtime == 23 ) || $ctime > $dtime )\n    $date += 3600;\n  elseif ( $ctime < $dtime )\n    $date -= 3600;\n\n  return $date;\n}\n\n/**\n * Return the time in HHMMSS format of input time + duration\n *\n * @param string $time   format \"235900\"\n * @param int $duration  number of minutes\n *\n * @return string  The time in HHMMSS format.\n */\nfunction add_duration ( $time, $duration ) {\n  $time = sprintf ( \"%06d\", $time );\n  $minutes =\n    intval ( $time / 10000 ) * 60 + ( ( $time / 100 ) % 100 ) + $duration;\n  // If we ran past 240000, then roll back over to 000000.\n  $minutes %= ( 24 * 60 );\n\n  return sprintf ( \"%d%02d00\", $minutes / 60, $minutes % 60 );\n}\n\n/**\n * Bump UNIX local timestamp with the given duration.\n *\n * param int $ts      input timestamp\n * param int $hour    hour duration\n * param int $minute  minute duration\n * param int $second  second duration\n * param int $month   month duration\n * param int $day     day duration\n * param int $year    year duration\n *\n * This function overcomes problems due to daylight saving change dates;\n *  it is based on the fact that function mktime() accepts out of range data.\n */\n\nfunction bump_local_timestamp( $ts, $hour = 0, $minute = 0, $second = 0,\n  $month = 0, $day = 0, $year = 0 ) {\n  return mktime( date( 'G', $ts ) + $hour, date( 'i', $ts ) + $minute,\n    date( 's', $ts ) + $second, date( 'n', $ts ) + $month,\n    date( 'j', $ts ) + $day, date( 'Y', $ts ) + $year );\n}\n\n/**\n * Builds the HTML for the event label.\n *\n * @param string  $can_access\n * @param string  $time_only\n *\n * @return string  The HTML for the event label\n */\nfunction build_entry_label ( $event, $popupid,\n  $can_access, $timestr, $time_only = 'N' ) {\n  global $eventinfo, $login, $SUMMARY_LENGTH, $UAC_ENABLED, $user;\n  $ret = '';\n  // Get reminders display string.\n  $reminder = getReminders( $event->getId(), true );\n  $can_access = ( $UAC_ENABLED == 'Y' ? $can_access : 0 );\n  $not_my_entry = ( ( $login != $user && strlen ( $user ) ) ||\n    ( $login != $event->getLogin() && strlen( $event->getLogin() ) ) );\n\n  $sum_length = $SUMMARY_LENGTH;\n  if( $event->isAllDay() || $event->isUntimed() )\n    $sum_length += 6;\n\n  $tmpAccess = $event->getAccess();\n  $tmpId = $event->getId();\n  $tmpLogin = $event->getLogin();\n  $tmpName = $event->getName();\n  $tmp_ret = htmlspecialchars ( substr ( $tmpName, 0, $sum_length )\n     . ( strlen ( $tmpName ) > $sum_length ? '...' : '' ) );\n\n  if ( $not_my_entry && $tmpAccess == 'R' && !\n    ( $can_access &PRIVATE_WT ) ) {\n    if ( $time_only != 'Y' )\n      $ret = '<span class=\"parentheses\">' . translate ( 'Private' ) . '</span>';\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin,\n      str_replace ( 'XXX', translate ( 'private' ),\n        translate ( 'This event is XXX.' ) ), '' );\n  } else\n  if ( $not_my_entry && $tmpAccess == 'C' && !\n    ( $can_access &CONF_WT ) ) {\n    if ( $time_only != 'Y' )\n      $ret = '(' . translate ( 'Conf.' ) . ')';\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin,\n      str_replace ( 'XXX', translate ( 'confidential' ),\n        translate ( 'This event is XXX.' ) ), '' );\n  } else\n  if ( $can_access == 0 && $UAC_ENABLED == 'Y' ) {\n    if ( $time_only != 'Y' )\n      $ret = $tmp_ret;\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin, '',\n      $timestr, '', '', $tmpName, '' );\n  } else {\n    if ( $time_only != 'Y' )\n      $ret = $tmp_ret;\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin,\n      $event->getDescription(), $timestr, site_extras_for_popup( $tmpId ),\n      $event->getLocation(), $tmpName, $tmpId, $reminder );\n  }\n  return $ret;\n}\n\n/**\n * Calculates which row/slot this time represents.\n *\n * This is used in day and week views where hours of the time are separeted\n * into different cells in a table.\n *\n * <b>Note:</b> the global variable <var>$TIME_SLOTS</var> is used to determine\n * how many time slots there are and how many minutes each is. This variable\n * is defined user preferences (or defaulted to admin system settings).\n *\n * @param string $time        Input time in HHMMSS format\n * @param bool   $round_down  Should we change 1100 to 1059?\n *                            (This will make sure a 10AM-100AM appointment just\n *                            shows up in the 10AM slow and not in the 11AM slot\n *                            also.)\n *\n * @return int  The time slot index.\n */\nfunction calc_time_slot ( $time, $round_down = false ) {\n  global $TIME_SLOTS;\n\n  $interval = 1440 / $TIME_SLOTS;\n  $mins_since_midnight = time_to_minutes ( sprintf ( \"%06d\", $time ) );\n  $ret = intval ( $mins_since_midnight / $interval );\n  if ( $round_down && $ret * $interval == $mins_since_midnight )\n    $ret--;\n\n  if ( $ret > $TIME_SLOTS )\n    $ret = $TIME_SLOTS;\n\n  return $ret;\n}\n\n/**\n * Checks for conflicts.\n *\n * Find overlaps between an array of dates and the other dates in the database.\n *\n * Limits on number of appointments: if enabled in System Settings\n * (<var>$LIMIT_APPTS</var> global variable), too many appointments can also\n * generate a scheduling conflict.\n *\n * @todo Update this to handle exceptions to repeating events.\n *\n * @param array  $dates         Array of dates in Timestamp format that is\n *                              checked for overlaps.\n * @param int    $duration      Event duration in minutes\n * @param int    $eventstart    GMT starttime timestamp\n * @param array  $participants  Array of users whose calendars are to be checked\n * @param string $login         The current user name\n * @param int    $id            Current event id (this keeps overlaps from\n *                              wrongly checking an event against itself)\n *\n * @return  Empty string for no conflicts or return the HTML of the\n *          conflicts when one or more are found.\n */\nfunction check_for_conflicts ( $dates, $duration, $eventstart,\n  $participants, $login, $id ) {\n  global $LIMIT_APPTS, $LIMIT_APPTS_NUMBER, $repeated_events,\n  $single_user, $single_user_login, $jumpdate;\n\n  $datecnt = count ( $dates );\n  if ( ! $datecnt )\n    return false;\n\n  $conflicts = '';\n  $count = 0;\n  $evtcnt = $found = $query_params = [];\n  $partcnt = count ( $participants );\n\n  $hour = gmdate ( 'H', $eventstart );\n  $minute = gmdate ( 'i', $eventstart );\n\n  $allDayStr = translate ( 'All day event' );\n  $confidentialStr = translate ( 'Confidential' );\n  $exceedsStr = translate ( 'exceeds limit of XXX events per day' );\n  $onStr = translate ( 'on' );\n  $privateStr = translate ( 'Private' );\n\n  $sql = 'SELECT DISTINCT( weu.cal_login ), we.cal_time, we.cal_duration,\n    we.cal_name, we.cal_id, we.cal_access, weu.cal_status, we.cal_date\n    FROM webcal_entry we, webcal_entry_user weu WHERE we.cal_id = weu.cal_id AND ( ';\n\n  for ( $i = 0; $i < $datecnt; $i++ ) {\n    $sql .= ( $i != 0 ? ' OR ' : '' ) . 'we.cal_date = '\n     . gmdate ( 'Ymd', $dates[$i] );\n  }\n  $sql .= ' ) AND we.cal_time >= 0 AND weu.cal_status IN ( \\'A\\',\\'W\\' ) AND ( ';\n  if ( $single_user == 'Y' )\n    $participants[0] = $single_user_login;\n  else\n  if ( strlen ( $participants[0] ) == 0 )\n    // Likely called from a form with 1 user.\n    $participants[0] = $login;\n\n  for ( $i = 0; $i < $partcnt; $i++ ) {\n    $sql .= ( $i > 0 ? ' OR ' : '' ) . 'weu.cal_login = ?';\n    $query_params[] = $participants[$i];\n  }\n  // Make sure we don't get something past the end date of the event we're saving.\n  $res = dbi_execute ( $sql . ' )', $query_params );\n  if ( $res ) {\n    $duration1 = sprintf ( \"%d\", $duration );\n    $time1 = sprintf ( \"%d%02d00\", $hour, $minute );\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      // Add to an array to see if it has been found already for the next part.\n      $found[$count++] = $row[4];\n      // See if events overlaps one another.\n      if ( $row[4] != $id ) {\n        $cntkey = $row[0] . '-' . $row[7];\n        $duration2 = $row[2];\n        $time2 = sprintf ( \"%06d\", $row[1] );\n        if ( empty ( $evtcnt[$cntkey] ) )\n          $evtcnt[$cntkey] = 0;\n        else\n          $evtcnt[$cntkey]++;\n\n        $over_limit = ( $LIMIT_APPTS == 'Y' && $LIMIT_APPTS_NUMBER > 0 &&\n          $evtcnt[$cntkey] >= $LIMIT_APPTS_NUMBER ? 1 : 0 );\n\n        if ( $over_limit ||\n          times_overlap ( $time1, $duration1, $time2, $duration2 ) ) {\n          $conflicts .= '\n            <li>';\n\n          if ( $single_user != 'Y' ) {\n            user_load_variables ( $row[0], 'conflict_' );\n            $conflicts .= $GLOBALS['conflict_fullname'] . ': ';\n          }\n          $conflicts .= ( $row[5] == 'C' && $row[0] != $login && !\n            $is_assistant && ! $is_nonuser_admin\n            // Assistants can see confidential stuff.\n            ? '(' . $confidentialStr . ')'\n            : ( $row[5] == 'R' && $row[0] != $login\n              ? '( ' . $privateStr . ')'\n              : '<a href=\"view_entry.php?id=' . $row[4]\n               . ( $row[0] != $login ? '&amp;user=' . $row[0] : '' )\n               . '\">' . $row[3] . '</a>' ) )\n           . ( $duration2 == 1440 && $time2 == 0\n            ? ' (' . $allDayStr . ')'\n            : ' (' . display_time ( $row[7] . $time2 )\n             . ( $duration2 > 0\n              ? '-' . display_time ( $row[7]\n                 . add_duration ( $time2, $duration2 ) ) : '' ) . ')' )\n           . ' ' . $onStr . ' '\n           . date_to_str ( date ( 'Ymd', date_to_epoch ( $row[7]\n                 . sprintf ( \"%06d\", $row[1] ) ) ) )\n           . ( $over_limit ? ' (' . str_replace ( 'XXX', $LIMIT_APPTS_NUMBER,\n              $exceedsStr ) . ')' : '' ) . '</li>';\n        }\n      }\n    }\n    dbi_free_result ( $res );\n  } else\n    db_error ( true );\n\n  for ( $q = 0; $q < $partcnt; $q++ ) {\n    // Read repeated events only once for a participant for performance reasons.\n    $jumpdate = gmdate ( 'Ymd', $dates[count ( $dates )-1] );\n    $repeated_events = query_events ( $participants[$q], true,\n      // This date filter is not necessary for functional reasons, but it\n      // eliminates some of the events that couldn't possibly match. This could\n      // be made much more complex to put more of the searching work onto the\n      // database server, or it could be dropped all together to put the\n      // searching work onto the client.\n      'AND ( we.cal_date <= ' . $jumpdate\n       . ' AND ( wer.cal_end IS NULL OR wer.cal_end >= '\n       . gmdate ( 'Ymd', $dates[0] ) . ' ) )' );\n    for ( $i = 0; $i < $datecnt; $i++ ) {\n      $dateYmd = gmdate ( 'Ymd', $dates[$i] );\n      $list = get_repeating_entries ( $participants[$q], $dateYmd );\n      for ( $j = 0, $listcnt = count ( $list ); $j < $listcnt; $j++ ) {\n        // OK we've narrowed it down to a day, now I just gotta check the time...\n        // I hope this is right...\n        $row = $list[$j];\n        if( $row->getID() != $id && ! in_array($row->getID(), $found )\n            && ( $row->getExtForID() == '' || $row->getExtForID() != $id ) ) {\n          $time2 = sprintf( \"%06d\", $row->getTime() );\n          $duration2 = $row->getDuration();\n          if ( times_overlap ( $time1, $duration1, $time2, $duration2 ) ) {\n            $conflicts .= '\n            <li>';\n            if ( $single_user != 'Y' ) {\n              user_load_variables( $row->getLogin(), 'conflict_' );\n              $conflicts .= $GLOBALS['conflict_fullname'] . ': ';\n            }\n            $conflicts .= ( $row->getAccess() == 'C'\n              && $row->getLogin() != $login && ! $is_assistant\n              && ! $is_nonuser_admin\n              // Assistants can see confidential stuff.\n              ? '(' . $confidentialStr . ')'\n              : ( $row->getAccess() == 'R' && $row->getLogin() != $login\n                ? '(' . $privateStr . ')'\n                : '<a href=\"view_entry.php?id=' . $row->getID()\n                 . ( ! empty ( $user ) && $user != $login\n                  ? '&amp;user=' . $user : '' )\n                 . '\">' . $row->getName() . '</a>' ) )\n             . ' (' . display_time( $row->getDate() . $time2 )\n             . ( $duration2 > 0\n              ? '-' . display_time( $row->getDate()\n                 . add_duration ( $time2, $duration2 ) ) : '' )\n             . ')' . ' ' . $onStr . ' ' . date_to_str ( $dateYmd ) . '</li>';\n          }\n        }\n      }\n    }\n  }\n\n  return $conflicts;\n}\n\n/**\n * Replaces unsafe characters with HTML encoded equivalents.\n *\n * @param string $value  Input text\n *\n * @return string  The cleaned text.\n */\nfunction clean_html ( $value ) {\n  $value = htmlspecialchars ( $value, ENT_QUOTES );\n  $value = strtr ( $value, [\n      '(' => '&#40;',\n      ')' => '&#41;'] );\n  return $value;\n}\n\n/**\n * Removes non-digits from the specified text.\n *\n * @param string $data  Input text\n *\n * @return string  The converted text.\n */\nfunction clean_int ( $data ) {\n  return preg_replace ( '/\\D/', '', $data );\n}\n\n/**\n * Removes whitespace from the specified text.\n *\n * @param string $data  Input text\n *\n * @return string  The converted text.\n */\nfunction clean_whitespace ( $data ) {\n  return preg_replace ( '/\\s/', '', $data );\n}\n\n/**\n * Removes non-word characters from the specified text.\n *\n * @param string $data  Input text\n *\n * @return string  The converted text.\n */\nfunction clean_word ( $data ) {\n  return preg_replace ( '/\\W/', '', $data );\n}\n\n/**\n * Combines the repeating and nonrepeating event arrays and sorts them\n *\n * The returned events will be sorted by time of day.\n *\n * @param array $ev   Array of events\n * @param array $rep  Array of repeating events\n *\n * @return array  Array of Events.\n */\nfunction combine_and_sort_events ( $ev, $rep ) {\n  $ids = [];\n\n  // Repeating events show up in $ev and $rep.\n  // Record their ids and don't add them to the combined array.\n  foreach ( $rep as $obj ) {\n    $ids[] = $obj->getID();\n  }\n  foreach ( $ev as $obj ) {\n    if( ! in_array( $obj->getID(), $ids ) )\n     $rep[] = $obj;\n  }\n  usort ( $rep, 'sort_events' );\n\n  return $rep;\n}\n\n/**\n * Draws a daily outlook style availability grid showing events that are\n * approved and awaiting approval.\n *\n * @param string $date          Date to show the grid for\n * @param array  $participants  Which users should be included in the grid\n * @param string $popup         Not used\n *\n * @return string  HTML to display matrix.\n */\nfunction daily_matrix ( $date, $participants, $popup = '' ) {\n  global $CELLBG, $ENTRY_SLOTS, $events, $repeated_events, $TABLEBG, $THBG,\n  $THFG, $thismonth, $thisyear, $TIME_FORMAT, $TODAYCELLBG, $user_fullname,\n  $WORK_DAY_END_HOUR, $WORK_DAY_START_HOUR;\n\n  $allAttendeesStr = translate ( 'All Attendees' );\n  $busy = translate ( 'Busy' );\n  $cnt = count ( $participants );\n  $dateTS = date_to_epoch ( $date );\n  $first_hour = $WORK_DAY_START_HOUR;\n  $increment = intval ( 1440 /\n    ( $ENTRY_SLOTS > 288 ? 288 : ( $ENTRY_SLOTS < 72 ? 72 : $ENTRY_SLOTS ) ) );\n  $last_hour = $WORK_DAY_END_HOUR;\n  $master = [];\n  $MouseOut = $MouseOver = $str = '';\n  $participant_pct = '20%'; //Use percentage.\n\n  $tentative = translate ( 'Tentative' );\n  $titleStr = ' title=\"' . translate ( 'Schedule an appointment for XXX.' ) . '\">';\n  $viewMsg = translate ( 'View this entry' );\n\n  $hours = $last_hour - $first_hour;\n  $interval = intval ( 60 / $increment );\n  $cell_pct = intval ( 80 / ( $hours * $interval ) );\n  $style_width = ( $cell_pct > 0 ? 'style=\"width:' . $cell_pct . '%;\"' : '' );\n  $thismonth = date ( 'm', $dateTS );\n  $thisyear = date ( 'Y', $dateTS );\n  $cols = ( ( $hours * $interval ) + 1 );\n  $ret = <<<EOT\n    <br />\n    <table class=\"aligncenter matrixd\" style=\"width:'80%';\"\n     >\n      <tr>\n        <td class=\"matrix\" colspan=\"{$cols}\"></td>\n      </tr>\n      <tr>\n        <th style=\"width:{$participant_pct};\">\nEOT;\n   $ret .= translate ( 'Participants' ) . '</th>';\n  $tentative = translate ( 'Tentative' );\n  $titleStr = ' title=\"' . translate ( 'Schedule an appointment for XXX.' ) . '\">';\n  $viewMsg = translate ( 'View this entry' );\n\n  $hours = $last_hour - $first_hour;\n  $interval = intval ( 60 / $increment );\n  $cell_pct = intval ( 80 / ( $hours * $interval ) );\n  $cols = ( ( $hours * $interval ) + 1 );\n  $style_width = ( $cell_pct > 0 ? 'style=\"width:' . $cell_pct . '%;\"' : '' );\n  $thismonth = date ( 'm', $dateTS );\n  $thisyear = date ( 'Y', $dateTS );\n\n  // Build a master array containing all events for $participants.\n  for ( $i = 0; $i < $cnt; $i++ ) {\n    /* Pre-Load the repeated events for quckier access. */\n    $repeated_events = read_repeated_events ( $participants[$i], $dateTS,\n      $dateTS, '' );\n    /* Pre-load the non-repeating events for quicker access. */\n    $events = read_events ( $participants[$i], $dateTS, $dateTS );\n\n    // Combine events for this date into a single array for easy processing.\n    $ALL = array_merge (\n      get_repeating_entries ( $participants[$i], $date ),\n      get_entries ( $date )\n      );\n    foreach ( $ALL as $E ) {\n      if( $E->getTime() == 0 ) {\n        $duration = 60 * $hours;\n        $time = $first_hour . '0000';\n      } else {\n        $duration = $E->getDuration();\n        $time = date( 'His', $E->getDateTimeTS() );\n      }\n      $hour = substr ( $time, 0, 2 );\n      $mins = substr ( $time, 2, 2 );\n\n      // Convert cal_time to slot.\n      $slot = $hour + substr ( $mins, 0, 1 );\n\n      // Convert cal_duration to bars.\n      $bars = $duration / $increment;\n\n      // Never replace 'A' with 'W'.\n      for ( $q = 0; $bars > $q; $q++ ) {\n        $slot = sprintf ( \"%02.2f\", $slot );\n        if ( strlen ( $slot ) == 4 )\n          $slot = '0' . $slot; // Add leading zeros.\n\n        $slot = $slot . ''; // Convert to a string.\n        if ( empty ( $master['_all_'][$slot] ) ||\n            ( $master['_all_'][$slot]['stat'] != 'A' ) )\n          $master['_all_'][$slot]['stat'] = $E->getStatus();\n\n        if ( empty ( $master[$participants[$i]][$slot] ) ||\n            ( $master[$participants[$i]][$slot]['stat'] != 'A' ) ) {\n          $master[$participants[$i]][$slot]['stat'] = $E->getStatus();\n          $master[$participants[$i]][$slot]['ID'] = $E->getID();\n        }\n        $slot = $slot + ( $increment * .01 );\n        if ( $slot - ( int )$slot >= .59 )\n          $slot = ( int )$slot + 1;\n      }\n    }\n  }\n\n  for( $i = $first_hour; $i < $last_hour; $i++ ) {\n    $hour = $i;\n    if ( $TIME_FORMAT == '12' ) {\n      $hour %= 12;\n      if ( $hour == 0 )\n        $hour = 12;\n\n      $hourfmt = '%d';\n    } else\n      $hourfmt = '%02d';\n\n    $halfway = intval ( ( $interval / 2 ) -1 );\n    for( $j = 0; $j < $interval; $j++ ) {\n      $inc_x_j = $increment * $j;\n      $str .= '\n        <td id=\"C' . ( $j + 1 ) . '\" class=\"dailymatrix\" ';\n      $tmpTitle = 'onmousedown=\"schedule_event( ' . $i . ','\n       . sprintf ( \"%02d\", $inc_x_j ) . ' );\"' . $MouseOver . $MouseOut\n       . str_replace ( 'XXX', sprintf ( $hourfmt, $hour ) . ':' .\n          ( $inc_x_j <= 9 ? '0' : '' ) . $inc_x_j, $titleStr );\n      switch ( $j ) {\n        case $halfway:\n          $k = ( $hour <= 9 ? '0' : substr ( $hour, 0, 1 ) );\n          $str .= 'style=\"width:' . $cell_pct . '%; text-align:right;\" '\n           . $tmpTitle . $k . '</td>';\n          break;\n        case $halfway + 1:\n          $k = ( $hour <= 9 ? substr ( $hour, 0, 1 ) : substr ( $hour, 1, 2 ) );\n          $str .= 'style=\"width:' . $cell_pct . '%; text-align:left;\" '\n           . $tmpTitle . $k . '</td>';\n          break;\n        default:\n          $str .= $style_width . $tmpTitle . '&nbsp;&nbsp;</td>';\n      }\n    }\n  }\n  $ret .= $str . '\n      </tr>\n      <tr>\n        <td class=\"matrix\" colspan=\"' . $cols . '\"></td>\n      </tr>';\n\n  // Add user _all_ to beginning of $participants array.\n  array_unshift ( $participants, '_all_' );\n  // Javascript for cells.\n  // Display each participant.\n  for ( $i = 0; $i <= $cnt; $i++ ) {\n    if ( $participants[$i] != '_all_' ) {\n      // Load full name of user.\n      user_load_variables ( $participants[$i], 'user_' );\n\n      // Exchange space for &nbsp; to keep from breaking.\n      $user_nospace = preg_replace ( '/\\s/', '&nbsp;', $user_fullname );\n    } else\n      $user_nospace = preg_replace ( '/\\s/', '&nbsp;', $allAttendeesStr );\n\n    $ret .= '\n      <tr>\n        <th class=\"weekday\" style=\"width:' . $participant_pct . ';\">'\n     . $user_nospace . '</th>';\n    $col = 1;\n\n    // Check each timebar.\n    for ( $j = $first_hour; $j < $last_hour; $j++ ) {\n      for ( $k = 0; $k < $interval; $k++ ) {\n        $r = sprintf ( \"%02d\", $j ) . '.'\n         . sprintf ( \"%02d\", ( $increment * $k ) ) . '';\n        $space = '&nbsp;';\n\n        if ( empty ( $master[$participants[$i]][$r] ) ) {\n          // Ignore this..\n        } else\n        if ( empty ( $master[$participants[$i]][$r]['ID'] ) )\n          // This is the first line for 'all' users. No event here.\n          $space = '\n          <span class=\"matrix\"><img src=\"images/pix.gif\" alt=\"\" /></span>';\n        else {\n          $tmpMast = $master[$participants[$i]][$r]['stat'];\n          if ( strpos ( 'AW', $tmpMast ) !== false )\n            $space = '\n          <a class=\"matrix\" href=\"view_entry.php?id='\n             . $master[$participants[$i]][$r]['ID']\n             . '&friendly=1\"><img src=\"images/pix' . ( $tmpMast = 'A' ? '' : 'b' )\n             . '.gif\" title=\"' . $viewMsg . '\" alt=\"' . $viewMsg . '\" /></a>';\n        }\n\n        $ret .= '\n        <td class=\"matrixappts' . ( $k == '0' ? ' matrixledge' : '' ) . '\" '\n         . $style_width . ( $space == '&nbsp;' ? ' '\n           . 'onmousedown=\"schedule_event( ' . $j . ','\n           . sprintf ( \"%02d\", ( $increment * $k ) ) . ' );\"'\n           . \" $MouseOver $MouseOut\" : '' ) . '>' . $space . '</td>';\n        $col++;\n      }\n    }\n\n    $ret .= '</tr>';\n  } // End foreach participant.\n  return $ret . <<<EOT\n    </table><br />\n    <table class=\"aligncenter\">\n      <tr>\n        <td class=\"matrixlegend\"><img src=\"images/pix.gif\" title=\"{$busy}\"\n          alt=\"{$busy}\" />{$busy}&nbsp;&nbsp;&nbsp;<img src=\"images/pixb.gif\"\n          title=\"{$tentative}\" alt=\"{$tentative}\" />{$tentative}</td>\n      </tr>\n    </table>\nEOT;\n}\n\n/**\n * Date selection via DHTML.\n * This will create two HTML elements:\n * - a form element of type hidden that will hold the date value in\n *   YYYYMMDD format\n * - a span element that will display the nicely formatted date to the user\n * The CSS ids will be the datename parameter with '_fmt' and '_YMD'\n * appended.\n */\nfunction datesel_Print($datename, $ymdValue = '')\n{\n  if (empty($ymdValue))\n    $ymdValue = date('Y-m-d');\n  if (strpos($ymdValue, '-') == false && strlen($ymdValue) == 8) {\n    // Convert YYYYMMDD into YYYY-MM-DD\n    $ymdValue = date(\"Y-m-d\", strtotime($ymdValue));\n  }\n\n  return '<input type=\"date\" name=\"' . $datename .\n    '_YMD\" id=\"' . $datename . '_YMD\" class=\"form-control\" value=\"' .\n    $ymdValue . '\">';\n}\n\n\n/**\n * Generate HTML for a date selection for use in a form.\n *\n * @param string $prefix   Prefix to use in front of form element names\n * @param string $date     Currently selected date (in YYYYMMDD format)\n * @param bool $trigger    Add onchange event trigger that\n *                         calls javascript function $prefix_datechanged()\n * @param int  $num_years  Number of years to display\n *\n * @return string  HTML for the selection box.\n */\nfunction date_selection($prefix, $date, $trigger = false, $num_years = 20)\n{\n  if (empty($date)) {\n    $ymdValue = date('Y-m-d');\n  } else {\n    $ymdValue = date('Y-m-d', strtotime($date));\n  }\n  $trigger_str = (empty($trigger) ? '' : $prefix . 'datechanged();');\n  $onchange = (empty($trigger_str) ? '' : 'onchange=\"$trigger_str\"');\n  return '<input type=\"date\" name=\"' . $prefix .\n    '_YMD\" id=\"' . $prefix . '_YMD\" class=\"form-control\" value=\"' .\n    $ymdValue . '\" ' . $onchange . '>';\n}\n\n/**\n * Converts a date to a timestamp.\n *\n * @param string $d   Date in YYYYMMDD or YYYYMMDDHHIISS format\n * @param bool   $gmt Whether to use GMT or LOCAL\n *\n * @return int  Timestamp representing, in UTC or LOCAL time.\n */\nfunction date_to_epoch( $d, $gmt = true ) {\n  if ( $d == 0 )\n    return 0;\n\n  $dH = $di = $ds = 0;\n  if ( strlen ( $d ) == 13 ) { // Hour value is single digit.\n    $dH = substr ( $d, 8, 1 );\n    $di = substr ( $d, 9, 2 );\n    $ds = substr ( $d, 11, 2 );\n  }\n  if ( strlen ( $d ) == 14 ) {\n    $dH = substr ( $d, 8, 2 );\n    $di = substr ( $d, 10, 2 );\n    $ds = substr ( $d, 12, 2 );\n  }\n\n  if ( $gmt )\n    return gmmktime ( $dH, $di, $ds,\n      substr ( $d, 4, 2 ),\n      substr ( $d, 6, 2 ),\n      substr ( $d, 0, 4 ) );\n  else\n    return mktime ( $dH, $di, $ds,\n      substr ( $d, 4, 2 ),\n      substr ( $d, 6, 2 ),\n      substr ( $d, 0, 4 ) );\n}\n\n\n/**\n * Converts a date in YYYYMMDD format into \"Friday, December 31, 1999\",\n * \"Friday, 12-31-1999\" or whatever format the user prefers.\n *\n * @param string  $indate        Date in YYYYMMDD format\n * @param string  $format        Format to use for date\n *                               (default is \"__month__ __dd__, __yyyy__\")\n * @param bool    $show_weekday  Should the day of week also be included?\n * @param bool    $short_months  Should the abbreviated month names be used\n *                               instead of the full month names?\n * @param bool   $forceTranslate Check to see if there is a translation for\n *                    the specified data format. If there is, then use\n *                    the translated format from the language file, but\n *                    only if $DATE_FORMAT is language-defined.\n *\n * @return string  Date in the specified format.\n *\n * @global string Preferred date format\n */\nfunction date_to_str ( $indate, $format = '', $show_weekday = true,\n  $short_months = false, $forceTranslate = false ) {\n  global $DATE_FORMAT;\n\n  if ( strlen ( $indate ) == 0 )\n    $indate = date ( 'Ymd' );\n\n  // If they have not set a preference yet...\n  if ( $DATE_FORMAT === '' || $DATE_FORMAT === 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT = translate ( '__month__ __dd__, __yyyy__' );\n  elseif ( $forceTranslate && $format !== '' && translation_exists ( $format ) )\n    $format = translate ( $format );\n\n  if ( empty ( $format ) )\n    $format = $DATE_FORMAT;\n\n  $y = intval ( $indate / 10000 );\n  $m = intval ( $indate / 100 ) % 100;\n  $d = $indate % 100;\n  $wday = strftime ( \"%w\", mktime ( 0, 0, 0, $m, $d, $y ) );\n  if ( $short_months ) {\n    $month = month_name ( $m - 1, 'M' );\n    $weekday = weekday_name ( $wday, 'D' );\n  } else {\n    $month = month_name ( $m - 1 );\n    $weekday = weekday_name ( $wday );\n  }\n\n  $ret = str_replace ( '__dd__', $d, $format );\n  $ret = str_replace ( '__j__', intval ( $d ), $ret );\n  $ret = str_replace ( '__mm__', $m, $ret );\n  $ret = str_replace ( '__mon__', $month, $ret );\n  $ret = str_replace ( '__month__', $month, $ret );\n  $ret = str_replace ( '__n__', sprintf ( \"%02d\", $m ), $ret );\n  $ret = str_replace ( '__yy__', sprintf ( \"%02d\", $y % 100 ), $ret );\n\n  return ( $show_weekday\n    ? weekday_name ( strftime ( '%w', mktime ( 0, 0, 0, $m, $d, $y ) ),\n      ( $short_months ? 'D' : '' ) ) . ', '\n    : '' ) . str_replace ( '__yyyy__', $y, $ret );\n}\n\n/**\n * Extracts a user's name from a session id.\n *\n * This prevents users from begin able to edit their cookies.txt file and set\n * the username in plain text.\n *\n * @param string $instr  A hex-encoded string. \"Hello\" would be \"678ea786a5\".\n *\n * @return string  The decoded string.\n *\n * @global array Array of offsets\n *\n * @see encode_string\n */\nfunction decode_string ( $instr ) {\n  global $offsets;\n\n  $cntOffsets = count ( $offsets );\n  $orig = '';\n  for ( $i = 0, $cnt = strlen ( $instr ); $i < $cnt; $i += 2 ) {\n    $orig .= chr (\n      ( hextoint ( substr ( $instr, $i, 1 ) ) * 16 +\n        hextoint ( substr ( $instr, $i + 1, 1 ) ) - $offsets[\n        ( $i / 2 ) % $cntOffsets ] + 256 ) % 256 );\n  }\n  return $orig;\n}\n\n/**\n * Display a text for a single activity log entry.\n *\n * @param string $cal_type  the log entry type\n * @param string $cal_text  addiitonal text to display\n *\n * @return string  HTML for one log entry.\n */\nfunction display_activity_log( $cal_type, $cal_text = '', $break = '<br />&nbsp;' ) {\n  if ( $cal_type == LOG_APPROVE )\n    $ret = translate ( 'Event approved' );\n  elseif ( $cal_type == LOG_APPROVE_J )\n    $ret = translate ( 'Journal approved' );\n  elseif ( $cal_type == LOG_APPROVE_T )\n    $ret = translate ( 'Task approved' );\n  elseif ( $cal_type == LOG_ATTACHMENT )\n    $ret = translate ( 'Attachment' );\n  elseif ( $cal_type == LOG_COMMENT )\n    $ret = translate ( 'Comment' );\n  elseif ( $cal_type == LOG_CREATE )\n    $ret = translate ( 'Event created' );\n  elseif ( $cal_type == LOG_CREATE_J )\n    $ret = translate ( 'Journal created' );\n  elseif ( $cal_type == LOG_CREATE_T )\n    $ret = translate ( 'Task created' );\n  elseif ( $cal_type == LOG_DELETE )\n    $ret = translate ( 'Event deleted' );\n  elseif ( $cal_type == LOG_DELETE_J )\n    $ret = translate ( 'Journal deleted' );\n  elseif ( $cal_type == LOG_DELETE_T )\n    $ret = translate ( 'Task deleted' );\n  elseif ( $cal_type == LOG_LOGIN_FAILURE )\n    $ret = translate ( 'Invalid login' );\n  elseif ( $cal_type == LOG_NEWUSER_EMAIL )\n    $ret = translate ( 'New user via email (self registration)' );\n  elseif ( $cal_type == LOG_NEWUSER_FULL )\n    $ret = translate ( 'New user (self registration)' );\n  elseif ( $cal_type == LOG_NOTIFICATION )\n    $ret = translate ( 'Notification sent' );\n  elseif ( $cal_type == LOG_REJECT )\n    $ret = translate ( 'Event rejected' );\n  elseif ( $cal_type == LOG_REJECT_J )\n    $ret = translate ( 'Journal rejected' );\n  elseif ( $cal_type == LOG_REJECT_T )\n    $ret = translate ( 'Task rejected' );\n  elseif ( $cal_type == LOG_REMINDER )\n    $ret = translate ( 'Reminder sent' );\n  elseif ( $cal_type == LOG_UPDATE )\n    $ret = translate ( 'Event updated' );\n  elseif ( $cal_type == LOG_UPDATE_J )\n    $ret = translate ( 'Journal updated' );\n  elseif ( $cal_type == LOG_UPDATE_T )\n    $ret = translate ( 'Task updated' );\n  elseif ( $cal_type == LOG_USER_ADD )\n    $ret = translate ( 'Add User' );\n  elseif ( $cal_type == LOG_USER_DELETE )\n    $ret = translate ( 'Delete User' );\n  elseif ( $cal_type == LOG_USER_UPDATE )\n    $ret = translate ( 'Edit User' );\n  else\n    $ret = '???';\n  //fix any broken special characters\n  $cal_text = preg_replace( \"/&amp;(#[0-9]+|[a-z]+);/i\", \"&$1;\",\n    htmlentities( $cal_text ) );\n  return $ret\n   . ( empty ( $cal_text ) ? '' : $break . $cal_text );\n}\n\n/**\n * Display the <<Admin link on pages if menus are not enabled\n *\n * @param bool $break  If true, include break if empty\n *\n * @return string  HTML for Admin Home link\n * @global string  (Y/N) Is the Top Menu Enabled\n */\nfunction display_admin_link($break = true) {\n  global $MENU_ENABLED;\n\n  $adminStr = translate ( 'Admin' );\n\n  return ( $break ? '<br />' . \"\\n\" : '' )\n   . ( $MENU_ENABLED == 'N' ? '<a title=\"' . $adminStr\n     . '\" class=\"nav\" href=\"adminhome.php\">&laquo;&nbsp; ' . $adminStr\n     . '</a><br /><br />' . \"\\n\" : '' );\n}\n\n/**\n * Generate HTML to create a month display.\n * If $enableDblClick is set to true, the file js/dblclick_add.js should\n * be included in the array of includes passed to print_header().\n */\nfunction display_month( $thismonth, $thisyear, $demo = false,\n  $enableDblClick = false ) {\n  global $DISPLAY_ALL_DAYS_IN_MONTH, $DISPLAY_LONG_DAYS, $DISPLAY_WEEKNUMBER,\n  $is_admin, $is_nonuser, $login, $PUBLIC_ACCESS, $PUBLIC_ACCESS_CAN_ADD,\n  $readonly, $today, $user, $WEEKENDBG, $WEEK_START;\n\n  $ret = '';\n\n  if ( $enableDblClick ) {\n    $can_add = ( $readonly == 'N' || $is_admin );\n\n    if ( $PUBLIC_ACCESS == 'Y' && $PUBLIC_ACCESS_CAN_ADD != 'Y'\n        && $login == '__public__' )\n      $can_add = false;\n\n    if ( $readonly == 'Y' )\n      $can_add = false;\n\n    if ( $is_nonuser )\n      $can_add = false;\n  } else {\n    // double-click not enabled\n    $can_add = false;\n  }\n\n  // Add mouse-over help for table.\n  if ( $can_add ) {\n    $help = 'title=\"' .\n      translate ( 'Double-click on empty cell to add new entry' ) . '\"';\n  } else {\n    $help = '';\n  }\n\n  $ret .= '\n    <table ' . $help . ' class=\"main\" id=\"month_main\">\n      <tr>' . ( $DISPLAY_WEEKNUMBER == 'Y' ? '\n        <th class=\"empty\"></th>' : '' );\n\n  for ( $i = 0; $i < 7; $i++ ) {\n    $thday = ( $i + $WEEK_START ) % 7;\n    $ret .= '\n        <th' . ( is_weekend ( $thday ) ? ' class=\"weekend\"' : '' )\n     . '>' . weekday_name ( $thday, $DISPLAY_LONG_DAYS ) . '</th>';\n  }\n  $ret .= '\n      </tr>';\n  $charset = translate ( 'charset' );\n  $weekStr = translate ( 'Week' );\n  $WKStr = translate ( 'WK' );\n\n  $wkstart = get_weekday_before ( $thisyear, $thismonth );\n  // Generate values for first day and last day of month.\n  $monthstart = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth, 1, $thisyear ) );\n  $monthend = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, 0, $thisyear ) );\n  $monthend2 = date ( 'Ymd His', mktime ( 0, 0, 0, $thismonth + 1, 0, $thisyear ) );\n  $todayYmd = date ( 'Ymd', $today );\n  for ( $i = $wkstart; date ( 'Ymd', $i + 43200 ) <= $monthend; $i += 604800 ) {\n    $ret .= '\n      <tr>';\n    if ( $DISPLAY_WEEKNUMBER == 'Y' ) {\n      $tmp = date( 'W', $i + 172800 );\n      $ret .= '\n        <td class=\"weekcell\"><a title=\"' . $weekStr . ' ' . $tmp . '\" href=\"'\n       . ( $demo ? '' : 'week.php?date=' . date ( 'Ymd', $i + 86400 )\n         . ( ! empty ( $user ) && $user != $login ? '&amp;user=' . $user : '' )\n         . ( empty ( $cat_id ) ? '' : '&amp;cat_id=' . $cat_id ) ) . '\"' . '>';\n\n      $wkStr = $WKStr . $tmp;\n      $wkStr2 = '';\n\n      if ( $charset == 'UTF-8' )\n        $wkStr2 = $wkStr;\n      else {\n        for ( $w = 0, $cnt = strlen ( $wkStr ); $w < $cnt; $w++ ) {\n          $wkStr2 .= substr ( $wkStr, $w, 1 ) . '<br />';\n        }\n      }\n      $ret .= $wkStr2 . '</a></td>';\n    }\n\n    for ( $j = 0; $j < 7; $j++ ) {\n      $date = $i + ( $j * 86400 + 43200 );\n      $dateYmd = date ( 'Ymd', $date );\n      $dateD = date ( 'd', $date );\n      $thiswday = date ( 'w', $date );\n      $is_weekend = is_weekend ( $date ) && ( ! empty ( $WEEKENDBG ) );\n      $ret .= '\n        <td';\n\n      if ( $can_add ) {\n        $ret .= \" ondblclick=\\\"dblclick_add( '$dateYmd', '$user' )\\\"\";\n      }\n\n      $currMonth = ( $dateYmd >= $monthstart && $dateYmd <= $monthend );\n      if ( $currMonth ||\n        ( ! empty ( $DISPLAY_ALL_DAYS_IN_MONTH ) && $DISPLAY_ALL_DAYS_IN_MONTH == 'Y' ) ) {\n        $class = ( $currMonth\n          ? ( ! $demo && $dateYmd == $todayYmd ? 'today' : ( $is_weekend ? 'weekend' : '' ) )\n          : 'othermonth' );\n\n        // Get events for this day.\n        $ret_events = '';\n        if ( ! $demo ) {\n          $ret_events = print_date_entries ( $dateYmd,\n            ( empty ( $user ) ? $login : $user ), false, true );\n        } else {\n          // Since we base this calendar on the current month,\n          // the placement of the days always change so\n          // set 3rd Thursday as \"today\" for the demo...\n          if ( $dateD > 15 && $dateD < 23 && $thiswday == 4 ) {\n            $class = 'today';\n            $ret_events = translate ( 'Today' );\n          }\n          // ... and set 2nd Saturday and 2nd Tuesday as the demo event days.\n          if ( $dateD > 7 && $dateD < 16 &&\n            ( $thiswday == 2 || $thiswday == 6 ) ) {\n            $class .= ' entry hasevents';\n            $ret_events = translate ( 'My event text' );\n          }\n        }\n        $class = trim ( $class );\n        $class .= ( ! empty( $ret_events )\n            && strstr( $ret_events, 'class=\"entry\"' )\n// If we decide we don't like it, just remove the next 1 line.\n            || strstr( $ret_events, 'class=\"layerentry\"' )\n          ? ' hasevents' : '' );\n\n        $ret .= ( strlen ( $class ) ? ' class=\"' . $class . '\"' : '' )\n         . '>' . $ret_events . '</td>';\n      } else\n        $ret .= ( $is_weekend ? ' class=\"weekend\"' : '' ) . '>&nbsp;</td>';\n    }\n    $ret .= '\n      </tr>';\n  }\n  return $ret . '\n    </table>';\n}\n\n/**\n * Generate the HTML for the navigation bar.\n */\nfunction display_navigation ( $name, $show_arrows = true, $show_cats = true ) {\n  global $cat_id, $CATEGORIES_ENABLED, $caturl, $DATE_FORMAT_MY,\n  $DISPLAY_SM_MONTH, $DISPLAY_TASKS, $DISPLAY_WEEKNUMBER, $is_admin,\n  $is_assistant, $is_nonuser_admin, $login, $nextYmd, $nowYmd, $prevYmd,\n  $single_user, $spacer, $thisday, $thismonth, $thisyear, $user, $user_fullname,\n  $wkend, $wkstart;\n\n  if ( empty ( $name ) )\n    return;\n\n  $nextStr = translate ( 'Next' );\n  $prevStr = translate ( 'Previous' );\n  $u_url = ( ! empty ( $user ) && $user != $login\n    ? 'user=' . $user . '&amp;' : '' );\n  $ret = '\n      <div class=\"topnav\"'\n  // Hack to prevent giant space between minicals and navigation in IE.\n  . ( get_web_browser() == 'MSIE' ? ' style=\"zoom:1\"' : '' )\n   . '>' . ( $show_arrows &&\n    ( $name != 'month' || $DISPLAY_SM_MONTH == 'N' || $DISPLAY_TASKS == 'Y' ) ? '\n        <a title=\"' . $nextStr . '\" class=\"next\" href=\"' . $name . '.php?'\n     . $u_url . 'date=' . $nextYmd . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-right-circle.svg\" alt=\"' . $nextStr . '\" /></a>\n        <a title=\"' . $prevStr . '\" class=\"prev\" href=\"' . $name . '.php?'\n     . $u_url . 'date=' . $prevYmd . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-left-circle.svg\" alt=\"' . $prevStr . '\" /></a>' : '' ) . '\n        <div class=\"title\">\n          <span class=\"date\">';\n\n  if ( $name == 'day' )\n    $ret .= date_to_str ( $nowYmd );\n  elseif ( $name == 'week' )\n    $ret .= date_to_str ( date ( 'Ymd', $wkstart ), '', false )\n     . '&nbsp;&nbsp;&nbsp; - &nbsp;&nbsp;&nbsp;'\n     . date_to_str ( date ( 'Ymd', $wkend - 86400 ), '', false )\n     . ( $DISPLAY_WEEKNUMBER == 'Y' ? \" \\n(\" . translate ( 'Week' ) . ' '\n       . date ( 'W', $wkstart + 86400 ) . ')' : '' );\n  elseif ( $name == 'month' || $name == 'view_l' ) {\n    $ret .= $spacer\n     . date_to_str ( sprintf ( \"%04d%02d01\", $thisyear, $thismonth ),\n      $DATE_FORMAT_MY, false, false, true );\n  }\n\n  return $ret . '</span>\n          <span class=\"user\">'\n  // Display current calendar's user (if not in single user).\n  . ( $single_user == 'N' ? '<br />' . $user_fullname : '' )\n   . ( $is_nonuser_admin ||\n    ( $is_admin && ! empty ( $user ) && $user == '__public__' )\n    ? '<br />-- ' . translate ( 'Admin mode' ) . ' --' : '' )\n   . ( $is_assistant\n    ? '<br />-- ' . translate ( 'Assistant mode' ) . ' --' : '' ) . '</span>'\n   . ( $CATEGORIES_ENABLED == 'Y' && $show_cats &&\n    ( ! $user || ( $user == $login || $is_assistant ) ) ? '<br /><br />'\n     . print_category_menu ( $name,\n      sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, $thisday ),\n      $cat_id ) : '' ) . '\n        </div>\n      </div><br />';\n}\n\n/**\n * Prints out a minicalendar for a month.\n *\n * @todo Make day.php NOT be a special case\n *\n * @param int    $thismonth      Number of the month to print\n * @param int    $thisyear       Number of the year\n * @param bool   $showyear       Show the year in the calendar's title?\n * @param bool   $show_weeknums  Show week numbers to the left of each row?\n * @param string $minical_id     id attribute for the minical table\n * @param string $month_link     URL and query string for month link that should\n *                               come before the date specification (e.g.\n *                               month.php?  or  view_l.php?id=7&amp;)\n */\nfunction display_small_month ( $thismonth, $thisyear, $showyear,\n  $show_weeknums = false, $minical_id = '', $month_link = 'month.php?' ) {\n  global $boldDays, $caturl, $DATE_FORMAT_MY, $DISPLAY_ALL_DAYS_IN_MONTH,\n  $DISPLAY_TASKS, $DISPLAY_WEEKNUMBER, $get_unapproved, $login,\n  $MINI_TARGET, // Used by minical.php\n  $SCRIPT, $SHOW_EMPTY_WEEKENDS,//Used by year.php\n  $thisday, // Needed for day.php\n  $today, $use_http_auth, $user, $WEEK_START;\n\n  $nextStr = translate ( 'Next' );\n  $prevStr = translate ( 'Previous' );\n  $u_url = ( $user != $login && ! empty ( $user )\n    ? 'user=' . $user . '&amp;' : '' );\n  $weekStr = translate ( 'Week' );\n\n  // Start the minical table for each month.\n  $ret = '\n    <table class=\"minical\"'\n   . ( $minical_id != '' ? ' id=\"' . $minical_id . '\"' : '' ) . '>';\n\n  $monthstart = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth, 1, $thisyear ) );\n  $monthend = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, 0, $thisyear ) );\n  // Determine if the week starts on Sunday or Monday.\n  // TODO:  We need to be able to start a week on ANY day.\n  $wkstart = get_weekday_before ( $thisyear, $thismonth );\n\n  if ( $SCRIPT == 'day.php' ) {\n    $month_ago =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth - 1, 1, $thisyear ) );\n    $month_ahead =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, 1, $thisyear ) );\n\n    $ret .= '<caption>' . $thisday . '</caption>\n      <thead>\n        <tr class=\"monthnav\">\n          <th colspan=\"' . ( $DISPLAY_WEEKNUMBER == true ? 8 : 7 ) . '\">\n            <a title=\"' . $prevStr . '\" class=\"prev\" href=\"day.php?' . $u_url\n     . 'date=' . $month_ago . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-left-circle.svg\" alt=\"' . $prevStr . '\" /></a>\n            <a title=\"' . $nextStr . '\" class=\"next\" href=\"day.php?' . $u_url\n     . 'date=' . $month_ahead . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-right-circle.svg\" alt=\"' . $nextStr . '\" /></a>'\n     . date_to_str ( sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, 1 ),\n      ( $showyear != '' ? $DATE_FORMAT_MY : '__month__' ), false ) . '\n          </th>\n        </tr>';\n  } elseif ( $SCRIPT == 'minical.php' ) {\n    $month_ago =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth - 1, $thisday, $thisyear ) );\n    $month_ahead =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, $thisday, $thisyear ) );\n\n    $ret .= '\n      <thead>\n        <tr class=\"monthnav\">\n          <th colspan=\"7\">\n            <a title=\"' . $prevStr . '\" class=\"prev\" href=\"minical.php?'\n     . $u_url . 'date=' . $month_ago\n     . '\"><img src=\"images/bootstrap-icons/arrow-left-circle.svg\" alt=\"' . $prevStr . '\" /></a>\n            <a title=\"' . $nextStr . '\" class=\"next\" href=\"minical.php?'\n     . $u_url . 'date=' . $month_ahead\n     . '\"><img src=\"images/bootstrap-icons/arrow-right-circle.svg\" alt=\"' . $nextStr . '\" /></a>'\n     . date_to_str ( sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, 1 ),\n      ( $showyear != '' ? $DATE_FORMAT_MY : '__month__' ), false ) . '\n          </th>\n        </tr>';\n  } else // Not day or minical script. Print the month name.\n    $ret .= '\n      <caption><a href=\"' . $month_link . $u_url . 'year=' . $thisyear\n     . '&amp;month=' . $thismonth . '\">'\n     . date_to_str ( sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, 1 ),\n      ( $showyear != '' ? $DATE_FORMAT_MY : '__month__' ), false )\n     . '</a></caption>\n      <thead>';\n\n  $ret .= '\n        <tr>'\n  // Print the headers to display the day of the week (Sun, Mon, Tues, etc.).\n  // If we're showing week numbers we need an extra column.\n  . ( $show_weeknums && $DISPLAY_WEEKNUMBER == 'Y' ? '\n          <th class=\"empty\">&nbsp;</th>' : '' );\n\n  for ( $i = 0; $i < 7; $i++ ) {\n    $thday = ( $i + $WEEK_START ) % 7;\n    $ret .= '\n          <th' . ( is_weekend ( $thday ) ? ' class=\"weekend\"' : '' ) . '>'\n     . weekday_name ( $thday, 'D' ) . '</th>';\n  }\n  // End the header row.\n  $ret .= '\n        </tr>\n      </thead>\n      <tbody>';\n  for ( $i = $wkstart; date ( 'Ymd', $i ) <= $monthend; $i += 604800 ) {\n    $tmp = $i + 172800; // 48 hours.\n    $ret .= '\n        <tr>' . ( $show_weeknums && $DISPLAY_WEEKNUMBER == 'Y' ? '\n          <td><a class=\"weeknumber\" ' . 'title=\"' . $weekStr . '&nbsp;'\n       . date ( 'W', $i + 86400 ) . '\" ' . 'href=\"week.php?' . $u_url . 'date='\n       . date ( 'Ymd', $tmp ) . '\">(' . date ( 'W', $tmp ) . ')</a></td>' : '' );\n\n    for ( $j = 0; $j < 7; $j++ ) {\n      // Add 12 hours just so we don't have DST problems.\n      $date = $i + ( $j * 86400 + 43200 );\n      $dateYmd = date ( 'Ymd', $date );\n      $hasEvents = false;\n      $title = '';\n      $ret .= '\n          <td';\n\n      if ( $boldDays ) {\n        $ev = get_entries ( $dateYmd, $get_unapproved, true, true );\n        if ( count ( $ev ) > 0 ) {\n          $hasEvents = true;\n          $title = $ev[0]->getName();\n        } else {\n          $rep = get_repeating_entries ( $user, $dateYmd, $get_unapproved );\n          if ( count ( $rep ) > 0 ) {\n            $hasEvents = true;\n            $title = $rep[0]->getName();\n          }\n        }\n      }\n      if ( ( $dateYmd >= $monthstart && $dateYmd <= $monthend ) ||\n          ( ! empty ( $DISPLAY_ALL_DAYS_IN_MONTH ) &&\n            $DISPLAY_ALL_DAYS_IN_MONTH == 'Y' ) ) {\n        $class =\n        // If it's a weekend.\n        ( is_weekend ( $date ) ? 'weekend' : '' )\n        // If the day being viewed is today AND script = day.php.\n        . ( $dateYmd == $thisyear . $thismonth . $thisday && $SCRIPT == 'day.php'\n          ? ' selectedday' : '' )\n        // Are there any events scheduled for this date?\n        . ( $hasEvents ? ' hasevents' : '' );\n\n        $ret .= ( $class != '' ? ' class=\"' . $class . '\"' : '' )\n         . ( $dateYmd == date ( 'Ymd', $today ) ? ' id=\"today\"' : '' )\n         . '><a href=\"';\n\n        if ( $SCRIPT == 'minical.php' )\n          $ret .= ( $use_http_auth\n            ? 'day.php?user=' . $user\n            : 'nulogin.php?login=' . $user . '&amp;return_path=day.php' )\n           . '&amp;date=' . $dateYmd . '\"'\n           . ( empty ( $MINI_TARGET ) ? '' : ' target=\"' . $MINI_TARGET . '\"' )\n           . ( empty ( $title ) ? '' : ' title=\"' . $title . '\"' );\n        else\n          $ret .= 'day.php?' . $u_url . 'date=' . $dateYmd . '\"';\n\n        $ret .= '>' . date ( 'j', $date ) . '</a></td>';\n      } else\n        $ret .= ' class=\"empty' . ( ! empty ( $SHOW_EMPTY_WEEKENDS )\n          && is_weekend ( $date ) ? ' weekend' : '' ) . '\">&nbsp;</td>';\n    } // end for $j\n    $ret .= '\n        </tr>';\n  } // end for $i\n  return $ret . '\n      </tbody>\n    </table>';\n}\n\n/**\n * Prints small task list for this $login user.\n */\nfunction display_small_tasks ( $cat_id ) {\n  global $caturl, $DATE_FORMAT_TASK, $eventinfo,\n  $is_assistant, $login, $task_filter, $user;\n  static $key = 0;\n\n  if ( ! empty ( $user ) && $user != $login && ! $is_assistant )\n    return false;\n\n  $SORT_TASKS = 'Y';\n\n  $pri[1] = translate ( 'High' );\n  $pri[2] = translate ( 'Medium' );\n  $pri[3] = translate ( 'Low' );\n  $task_user = $login;\n  $u_url = '';\n\n  if ( $user != $login && ! empty ( $user ) ) {\n    $u_url = 'user=' . $user . '&amp;';\n    $task_user = $user;\n  }\n  $ajax = [];\n  $dueSpacer = '&nbsp;';\n  $task_cat = ( empty ( $cat_id ) ? -99 : $cat_id );\n\n  if ( $SORT_TASKS == 'Y' ) {\n    for ( $i = 0; $i < 4; $i++ ) {\n      $ajax[$i] = '\n        <td class=\"sorter\" onclick=\"sortTasks( ' . $i . ', ' . $task_cat\n       . ', this )\"><img src=\"images/bootstrap-icons/arrow-up-short.svg\" style=\"vertical-align:bottom\" /></td>';\n      $ajax[$i + 4] = '\n        <td  class=\"sorter sorterbottom\" onclick=\"sortTasks( ' .\n      ( $i + 4 ) . ', ' . $task_cat\n       . ', this )\"><img src=\"images/bootstrap-icons/arrow-down-short.svg\" style=\"vertical-align:top\" /></td>';\n    }\n  } else {\n    $dueSpacer = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';\n    $ajax = array_pad ( $ajax, 8, '\n        <td></td>' );\n  }\n\n  $priorityStr = translate ( 'Priority' );\n  $dateFormatStr = $DATE_FORMAT_TASK;\n  $task_list = query_events ( $task_user, false,\n    ( empty ( $task_filter ) ? '' : $task_filter ), $cat_id, true );\n  $row_cnt = 1;\n  $task_html = '\n    <table class=\"minitask\" cellpadding=\"2\">\n      <tr class=\"header\">\n        <th colspan=\"6\">' . translate ( 'TASKS' ) . '</th>\n        <th class=\"alignright\" colspan=\"2\"><a href=\"edit_entry.php?' . $u_url\n   . 'eType=task' . $caturl\n   . '\"><img src=\"images/bootstrap-icons/plus-circle.sv\" alt=\"+\" class=\"new\" /></a></th>\n      </tr>\n      <tr class=\"header\">\n        <td rowspan=\"2\" class=\"sorterbottom\">!&nbsp;</td>' . $ajax[0] . '\n        <td rowspan=\"2\" width=\"20%\" class=\"sorterbottom\">'\n   . translate ( 'Task_Title' )\n   . '&nbsp;</td>' . $ajax[1] . '\n        <td rowspan=\"2\" class=\"sorterbottom\">' . translate ( 'Due' )\n   . $dueSpacer . '</td>'\n   . $ajax[2] . '\n        <td rowspan=\"2\" class=\"sorterbottom\">%</td>' . $ajax[3] . '\n      </tr>\n      <tr class=\"header\">' . $ajax[4] . $ajax[5] . $ajax[6] . $ajax[7] . '\n      </tr>';\n  foreach ( $task_list as $E ) {\n    // Check UAC.\n    $task_owner = $E->getLogin();\n    if( access_is_enabled() ) {\n      $can_access = access_user_calendar ( 'view', $task_owner, '',\n        $E->getCalType(), $E->getAccess() );\n      if ( $can_access == 0 )\n        continue;\n    }\n    $cal_id = $E->getId();\n    // Generate popup info.\n    $linkid = 'pop' . \"$cal_id-$key\";\n    $key++;\n    $link = '<a href=\"view_entry.php?'\n     . ( $task_owner != $login ? 'user=' . $task_owner . '&amp;' : '' )\n     . 'id=' . $cal_id . '\"';\n    $task_html .= '\n      <tr class=\"task\" id=\"' . $linkid . '\" style=\"background-color:'\n     . rgb_luminance( $GLOBALS['BGCOLOR'], $E->getPriority() ) . '\">\n        <td colspan=\"2\">' . $link . ' title=\"' . $priorityStr . '\">'\n     . $E->getPriority() . '</a></td>\n        <td class=\"name\" colspan=\"2\" width=\"50%\">&nbsp;' . $link . ' title=\"'\n     . translate( 'Task Name' ) . ': ' . $E->getName() . '\">'\n     . substr( $E->getName(), 0, 15 )\n     . ( strlen( $E->getName() ) > 15 ? '...' : '' ) . '</a></td>\n        <td colspan=\"2\">' . $link . ' title=\"' . translate ( 'Task Due Date' )\n     . '\">'\n     . date_to_str( $E->getDueDate(), $dateFormatStr, false, false ) . '</a>'\n     . '</td>\n        <td class=\"pct\" colspan=\"2\">' . $link . ' title=\"% '\n     . translate( 'Completed' ) . '\">' . $E->getPercent() . '</a></td>\n      </tr>';\n    $row_cnt++;\n    // Build special string to pass to popup.\n    // TODO: Move this logic into build_entry_popup().\n    $eventinfo .= build_entry_popup( 'eventinfo-' . $linkid, $E->getLogin(),\n      $E->getDescription(), translate( 'Due Time' ) . ':'\n       . display_time( '', 0, $E->getDueDateTimeTS() ) . '</dd><dd>'\n       . translate ( 'Due Date' ) . ':'\n       . date_to_str( $E->getDueDate(), '', false )\n       . \"</dd>\\n<dt>\" . $priorityStr . \":</dt>\\n<dd>\" . $E->getPriority()\n       . '-' . $pri[ceil( $E->getPriority() / 3 )] . \"</dd>\\n<dt>\"\n       . translate( 'Percent Complete' ) . \":</dt>\\n<dd>\" . $E->getPercent()\n       . '%', '', $E->getLocation(), $E->getName(), $cal_id );\n  }\n  for ( $i = 7; $i > $row_cnt; $i-- ) {\n    $task_html .= '<tr><td colspan=\"8\" class=\"filler\">&nbsp;</td></tr>' . \"\\n\";\n  }\n  $task_html .= \"</table>\\n\";\n  return $task_html;\n}\n\n/**\n * Displays a time in either 12 or 24 hour format.\n *\n * @param string $time       Input time in HHMMSS format\n *                           Optionally, the format can be YYYYMMDDHHMMSS\n * @param int   $control     bitwise command value\n *   0 default\n *   1 ignore_offset Do not use the timezone offset\n *   2 show_tzid Show abbrev TZ id ie EST after time\n *   4 use server's timezone\n * @param int    $timestamp  optional input time in timestamp format\n * @param string $format     user's TIME_FORMAT when sending emails\n *\n * @return string  The time in the user's timezone and preferred format.\n */\nfunction display_time ( $time = '', $control = 0, $timestamp = '',\n  $format = '' ) {\n  global $SERVER_TIMEZONE, $TIME_FORMAT;\n\n  if ( $control & 4 ) {\n    $currentTZ = getenv ( 'TZ' );\n    set_env ( 'TZ', $SERVER_TIMEZONE );\n  }\n  $t_format = ( empty ( $format ) ? $TIME_FORMAT : $format );\n  $tzid = date ( ' T' ); //Default tzid for today.\n\n  if ( ! empty ( $time ) && strlen ( $time ) > 12 )\n    $timestamp = date_to_epoch ( $time );\n\n  if ( ! empty ( $timestamp ) ) {\n    $time = date ( 'His', $timestamp );\n    $tzid = date ( ' T', $timestamp );\n    // $control & 1 = do not do timezone calculations\n    if ( $control & 1 ) {\n      $time = gmdate ( 'His', $timestamp );\n      $tzid = ' GMT';\n    }\n  }\n  $hour = intval ( $time / 10000 );\n  $min = abs ( ( $time / 100 ) % 100 );\n\n  // Prevent goofy times like 8:00 9:30 9:00 10:30 10:00.\n  if ( $time < 0 && $min > 0 )\n    $hour--;\n  while ( $hour < 0 ) {\n    $hour += 24;\n  }\n  while ( $hour > 23 ) {\n    $hour -= 24;\n  }\n  if ( $t_format == '12' ) {\n    $ampm = translate ( $hour >= 12 ? 'pm' : 'am' );\n    $hour %= 12;\n    if ( $hour == 0 )\n      $hour = 12;\n\n    $ret = sprintf ( \"%d:%02d%s\", $hour, $min, $ampm );\n  } else {\n    //$ret = sprintf ( \"%02d&#58;%02d\", $hour, $min );\n    $ret = sprintf ( \"%02d:%02d\", $hour, $min );\n  }\n\n  if ( $control & 2 )\n    $ret .= $tzid;\n\n  // Reset timezone to previous value.\n  if ( ! empty ( $currentTZ ) )\n    set_env ( 'TZ', $currentTZ );\n\n  return $ret;\n}\n\n/**\n * Checks for any unnaproved events.\n *\n * If any are found, display a link to the unapproved events\n * (where they can be approved).\n *\n * If the user is an admin user, also count up any public events.\n * If the user is a nonuser admin, count up events on the nonuser calendar.\n *\n * @param string $user  Current user login\n */\nfunction display_unapproved_events ( $user ) {\n  global $is_admin, $is_nonuser, $login, $MENU_ENABLED,\n  $NONUSER_ENABLED, $PUBLIC_ACCESS;\n  static $retval;\n\n  // Don't do this for public access login,\n  // admin user must approve public events if UAC is not enabled.\n  if ( $user == '__public__' || $is_nonuser )\n    return;\n\n  // Don't run this more than once.\n  if ( ! empty ( $retval[$user] ) )\n    return $retval[$user];\n\n  $app_user_hash = $app_users = $query_params = [];\n  $query_params[] = $user;\n  $ret = '';\n  $sql = 'SELECT COUNT( weu.cal_id ) FROM webcal_entry_user weu, webcal_entry we\n    WHERE weu.cal_id = we.cal_id AND weu.cal_status = \\'W\\'\n    AND ( weu.cal_login = ?'\n   . ( $PUBLIC_ACCESS == 'Y' && $is_admin && ! access_is_enabled()\n    ? ' OR weu.cal_login = \\'__public__\\'' : '' );\n\n  if( access_is_enabled() ) {\n    $app_user_hash[$login] = 1;\n    $app_users[] = $login;\n\n    $all = ( $NONUSER_ENABLED == 'Y'\n      // TODO:  Add 'approved' switch to these functions.\n      ? array_merge( get_my_users(), get_my_nonusers() ) : get_my_users() );\n\n    for ( $j = 0, $cnt = count ( $all ); $j < $cnt; $j++ ) {\n      $x = $all[$j]['cal_login'];\n      if ( access_user_calendar ( 'approve', $x ) &&\n          empty ( $app_user_hash[$x] ) ) {\n        $app_user_hash[$x] = 1;\n        $app_users[] = $x;\n      }\n    }\n    for ( $i = 0, $cnt = count ( $app_users ); $i < $cnt; $i++ ) {\n      $query_params[] = $app_users[$i];\n      $sql .= ' OR weu.cal_login = ? ';\n    }\n  } else\n  if ( $NONUSER_ENABLED == 'Y' ) {\n    $admincals = get_my_nonusers ( $login );\n    for ( $i = 0, $cnt = count ( $admincals ); $i < $cnt; $i++ ) {\n      $query_params[] = $admincals[$i]['cal_login'];\n      $sql .= ' OR weu.cal_login = ? ';\n    }\n  }\n  $rows = dbi_get_cached_rows ( $sql . ' )', $query_params );\n  if ( $rows ) {\n    $row = $rows[0];\n    if ( $row && $row[0] > 0 )\n      $ret .= ( $MENU_ENABLED == 'N'\n        ? '<a class=\"nav\" href=\"list_unapproved.php'\n         . ( $user != $login ? '?user=' . $user . '\"' : '' )\n         . '\">' . str_replace ( 'XXX', $row[0],\n          translate ( 'You have XXX unapproved entries' ) ) . \"</a><br />\\n\"\n        : // Return something that won't display in bottom menu\n        // but still has strlen > 0.\n        '<!--NOP-->' );\n  }\n\n  $retval[$user] = $ret;\n\n  return $ret;\n}\n/**\n * Get the request origin.\n */\nfunction url_origin($s, $use_forwarded_host = false)\n{\n  $ssl      = (!empty($s['HTTPS']) && $s['HTTPS'] == 'on');\n  $sp       = strtolower($s['SERVER_PROTOCOL']);\n  $protocol = substr($sp, 0, strpos($sp, '/')) . (($ssl) ? 's' : '');\n  $port     = $s['SERVER_PORT'];\n  $port     = ((!$ssl && $port == '80') || ($ssl && $port == '443')) ? '' : ':' . $port;\n  $host     = ($use_forwarded_host && isset($s['HTTP_X_FORWARDED_HOST'])) ? $s['HTTP_X_FORWARDED_HOST'] : (isset($s['HTTP_HOST']) ? $s['HTTP_HOST'] : null);\n  $host     = isset($host) ? $host : $s['SERVER_NAME'] . $port;\n  return $protocol . '://' . $host;\n}\n\n/**\n * Get the full URL of the current request.\n */\nfunction full_url($s, $use_forwarded_host = false)\n{\n  return url_origin($s, $use_forwarded_host) . $s['REQUEST_URI'];\n}\n\n/**\n * Sends a redirect to the specified page.\n * The database connection is closed and execution terminates in this function.\n *\n * <b>Note:</b>  MS IIS/PWS has a bug that does not allow sending a cookie and a\n * redirect in the same HTTP header. When we detect that the web server is IIS,\n * we accomplish the redirect using meta-refresh.\n * See the following for more info on the IIS bug:\n * {@link http://www.faqts.com/knowledge_base/view.phtml/aid/9316/fid/4}\n *\n * @param string $url  The page to redirect to. In theory, this should be an\n *                     absolute URL, but all browsers accept relative URLs\n *                     (like \"month.php\").\n *\n * @global string    Type of webserver\n * @global array     Server variables\n * @global resource  Database connection\n */\nfunction do_redirect ( $url ) {\n  global $_SERVER, $c, $SERVER_SOFTWARE, $SERVER_URL;\n\n  // Replace any '&amp;' with '&' since we don't want that in the HTTP header.\n  $url = str_replace ( '&amp;', '&', $url );\n\n  if ( empty ( $SERVER_SOFTWARE ) )\n    $SERVER_SOFTWARE = $_SERVER['SERVER_SOFTWARE'];\n\n  // As of RFC 7231, Location redirects can be relative URLs.\n  // See: https://tools.ietf.org/html/rfc7231#section-7.1.2\n\n  $meta = '';\n  if ( ( substr ( $SERVER_SOFTWARE, 0, 5 ) == 'Micro' ) ||\n      ( substr ( $SERVER_SOFTWARE, 0, 3 ) == 'WN/' ) )\n    $meta = '\n    <meta http-equiv=\"refresh\" content=\"0; url=' . $url . '\" />';\n  else\n    header ( 'Location: ' . $url );\n\n  echo send_doctype ( 'Redirect' ) . $meta . '\n  </head>\n  <body>\n    Redirecting to.. <a href=\"' . $url . '\">here</a>.\n  </body>\n</html>';\n  dbi_close ( $c );\n  exit;\n}\n\n/**\n * Takes an input string and encode it into a slightly encoded hexval that we\n * can use as a session cookie.\n *\n * @param string $instr  Text to encode\n *\n * @return string  The encoded text.\n *\n * @global array Array of offsets\n *\n * @see decode_string\n */\nfunction encode_string ( $instr ) {\n  global $offsets;\n\n  $cntOffsets = count ( $offsets );\n  $ret = '';\n  for ( $i = 0, $cnt = strlen ( $instr ); $i < $cnt; $i++ ) {\n    $ret .= bin2hex ( chr ( ( ord ( substr ( $instr, $i, 1 ) ) + $offsets[ $i %\n      $cntOffsets ] ) % 256 ) );\n  }\n  return $ret;\n}\n\n/**\n * Check for errors and return required HTML for display\n *\n * @param string $nextURL   URL the redirect to\n * @param bool   $redirect  Redirect OR popup Confirmation window\n *\n * @return string  HTML to display.\n *\n * @global string  $error  Current error message\n *\n * @uses print_error_header\n */\nfunction error_check ( $nextURL, $redirect = true ) {\n  global $error;\n\n  $ret = '';\n  if ( ! empty ( $error ) ) {\n    print_header ( '', '', '', true );\n    $ret .= '\n    <h2>' . print_error ( $error ) . '</h2>';\n  } else {\n    if ( $redirect )\n      do_redirect ( $nextURL );\n\n    $ret .= '<html>\n  <head></head>\n  <body onload=\"alert( \\'' . translate ( 'Changes successfully saved', true )\n     . '\\' ); window.parent.location.href=\\'' . $nextURL . '\\';\">';\n  }\n  return $ret . '\n  </body>\n</html>';\n}\n\n/**\n * Gets the list of external users for an event from the\n * webcal_entry_ext_user table in HTML format.\n *\n * @param int $event_id    Event ID\n * @param int $use_mailto  When set to 1, email address will contain an href\n *                         link with a mailto URL.\n *\n * @return string  The list of external users for an event formated in HTML.\n */\nfunction event_get_external_users ( $event_id, $use_mailto = 0 ) {\n  $ret = '';\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_fullname, cal_email\n    FROM webcal_entry_ext_user WHERE cal_id = ? ORDER by cal_fullname',\n    [$event_id] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n\n      // Remove [\\d] if duplicate name.\n      $ret .= trim ( preg_replace ( '/\\[[\\d]]/', '', $row[0] ) );\n      if ( strlen ( $row[1] ) ) {\n        $row_one = htmlentities ( \" <$row[1]>\" );\n        $ret .= ( $use_mailto\n          ? ' <a href=\"mailto:' . \"$row[1]\\\">$row_one</a>\" : $row_one );\n      }\n      $ret .= \"\\n\";\n    }\n  }\n  return $ret;\n}\n\n/**\n * Fakes an email for testing purposes.\n *\n * @param string $mailto  Email address to send mail to\n * @param string $subj    Subject of email\n * @param string $text    Email body\n * @param string $hdrs    Other email headers\n *\n * @ignore\n */\nfunction fake_mail ( $mailto, $subj, $text, $hdrs ) {\n  echo 'To: ' . $mailto . '<br />\nSubject: ' . $subj . '<br />\n' . nl2br ( $hdrs ) . '<br />\n' . nl2br ( $text );\n}\n\n/**\n * Generate activity log\n *\n *  @paran  int   $id       Event id if called from view_entry.php\n *  @param  bool  $sys      Display System Log ro Event Log\n *  @param  int   $startid  Event number to start off list\n *\n *  @return string  HTML to diplay log.\n */\nfunction generate_activity_log ( $id = '', $sys = false, $startid = '' ) {\n  global $GENERAL_USE_GMT, $nextpage, $PAGE_SIZE;\n\n  $nextpage = '';\n  $size = ( $id ? 'h3' : 'h2' );\n  $sql_params = [];\n  if ( ! empty ( $id ) )\n    $sql_params[] = $id;\n\n  $sql_params[] = $startid;\n  $ret = \"<$size>\"\n   . ( $sys ? translate ( 'System Log' ) : translate ( 'Activity Log' ) )\n   . ( $sys ? '' : ' &nbsp;<a href=\"rss_activity_log.php\">'\n   . '<img src=\"images/bootstrap-icons/rss-fill.svg\" width=\"14\" height=\"14\" alt=\"RSS 2.0 - '\n   . translate( 'Activity Log' ) . '\" /></a>' )\n   . \"</$size>\" . display_admin_link(false) . '\n    <table class=\"table table-striped mt-2 table-responsive\">\n      <thead><tr>\n        <th class=\"usr\">' . translate ( 'User' ) . '</th>\n        <th class=\"cal\">' . translate ( 'Calendar' ) . '</th>\n        <th class=\"scheduled\">' . translate ( 'Date' ) . '/'\n   . translate ( 'Time' ) . '</th>' . ( $sys || $id ? '' : '\n        <th class=\"dsc\">' . translate ( 'Event' ) . '</th>' ) . '\n        <th class=\"action\">' . translate ( 'Action' ) . '</th>\n      </tr></thead><tbody>';\n\n  $sql = 'SELECT wel.cal_login, wel.cal_user_cal, wel.cal_type, wel.cal_date,\n    wel.cal_time, wel.cal_text, '\n   . ( $sys\n    ? 'wel.cal_log_id FROM webcal_entry_log wel WHERE wel.cal_entry_id = 0'\n    : 'we.cal_id, we.cal_name, wel.cal_log_id, we.cal_type\n      FROM webcal_entry_log wel, webcal_entry we\n      WHERE wel.cal_entry_id = we.cal_id' )\n   . ( empty ( $id ) ? '' : ' AND we.cal_id = ?' )\n   . ( empty ( $startid ) ? '' : ' AND wel.cal_log_id <= ?' )\n   . ' ORDER BY wel.cal_log_id DESC';\n\n  $res = dbi_execute ( $sql, $sql_params );\n\n  if ( $res ) {\n    $num = 0;\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      $l_login = $row[0];\n      $l_user = $row[1];\n      $l_type = $row[2];\n      $l_date = $row[3];\n      $l_time = $row[4];\n      $l_text = $row[5];\n\n      if ( $sys )\n        $l_id = $row[6];\n      else {\n        $l_eid = $row[6];\n        $l_ename = $row[7];\n        $l_id = $row[8];\n        $l_etype = $row[9];\n      }\n      $num++;\n      if ( $num > $PAGE_SIZE ) {\n        $nextpage = $l_id;\n        break;\n      } else\n        $ret .= '\n      <tr' . ( $num % 2 ? ' class=\"odd\"' : '' ) . '>\n        <td>' . $l_login . '</td>\n        <td>' . $l_user . '</td>\n        <td>' . date_to_str ( $l_date ) . '&nbsp;'\n         . display_time ( $l_date . $l_time,\n          // Added TZ conversion\n          ( ! empty ( $GENERAL_USE_GMT ) && $GENERAL_USE_GMT == 'Y' ? 3 : 2 ) )\n         . '</td>\n        <td>' . ( ! $sys && ! $id ? '<a title=\"' . htmlspecialchars ( $l_ename )\n           . '\" href=\"view_entry.php?id=' . $l_eid . '\">'\n           . htmlspecialchars ( $l_ename ) . '</a></td>\n        <td>' : '' ) . display_activity_log ( $l_type, $l_text ) . '</td>\n      </tr>';\n    }\n    dbi_free_result ( $res );\n  }\n\n  return $ret . '\n    </tbody></table>';\n}\n\n/**\n * Generate Application Name\n *\n * @param bool $custom  Allow user name to be displayed\n */\nfunction generate_application_name ( $custom = true ) {\n  global $APPLICATION_NAME, $fullname;\n\n  if ( empty ( $APPLICATION_NAME ) )\n    $APPLICATION_NAME = 'Title';\n\n  return ( $custom && ! empty ( $fullname ) && $APPLICATION_NAME == 'myname'\n    ? $fullname\n    : ( $APPLICATION_NAME == 'Title' || $APPLICATION_NAME == 'myname'\n      ? ( function_exists ( 'translate' ) ? translate ( 'Title' ) : 'Title' )\n      : htmlspecialchars ( $APPLICATION_NAME ) ) );\n}\n\n/**\n * Generate HTML to add Printer Friendly Link.\n * If called without parameter, return only the href string.\n *\n * @param string $hrefin  script name\n *\n * @return string  URL to printer friendly page.\n *\n * @global array SERVER\n * @global string SCRIPT name\n * @global string (Y/N) Top menu enabled\n */\nfunction generate_printer_friendly ( $hrefin = '' ) {\n  global $_SERVER, $MENU_ENABLED, $SCRIPT, $show_printer;\n\n  // Set this to enable printer icon in top menu.\n  $href = ( empty ( $href ) ? $SCRIPT : $hrefin ) . '?'\n   . ( empty ( $_SERVER['QUERY_STRING'] ) ? '' : addslashes(htmlentities($_SERVER['QUERY_STRING'])) );\n  $href .= ( substr ( $href, -1 ) == '?' ? '' : '&' ) . 'friendly=1';\n  $show_printer = true;\n  $href = str_replace ( '&amp;', '&', $href );\n  if ( empty ( $hrefin ) ) // Menu will call this function without parameter.\n    return $href;\n\n  if ( $MENU_ENABLED == 'Y' ) // Return nothing if using menus.\n    return '';\n\n  $href = str_replace ( '&', '&amp;', $href );\n  $displayStr = translate ( 'Printer Friendly' );\n  $statusStr = translate ( 'Generate printer-friendly version' );\n\n  return <<<EOT\n    <a title=\"{$statusStr}\" class=\"printer\" href=\"{$href}\"\n      target=\"cal_printer_friendly\">[{$displayStr}]</a>\nEOT;\n}\n\n/**\n * Generate Refresh Meta Tag.\n *\n * @return  HTML for Meta Tag.\n */\nfunction generate_refresh_meta() {\n  global $AUTO_REFRESH, $AUTO_REFRESH_TIME, $REQUEST_URI;\n\n  return ( $AUTO_REFRESH == 'Y' && ! empty ( $AUTO_REFRESH_TIME ) && !\n    empty ( $REQUEST_URI )\n    ? '\n    <meta http-equiv=\"refresh\" content=\"'\n     . $AUTO_REFRESH_TIME * 60 // Convert to seconds.\n     . '; url=' . addslashes(htmlentities($REQUEST_URI)) . '\" />' : '' );\n}\n\n/**\n * Returns all the dates a specific event will fall on\n * accounting for the repeating.\n *\n * Any event with no end will be assigned one.\n *\n * @param int $date          Initial date in raw format\n * @param string $rpt_type   Repeating type as stored in the database\n * @param int $interval      Interval of repetition\n * @param array $ByMonth     Array of ByMonth values\n * @param array $ByWeekNo    Array of ByWeekNo values\n * @param array $ByYearDay   Array of ByYearDay values\n * @param array $ByMonthDay  Array of ByMonthDay values\n * @param array $ByDay       Array of ByDay values\n * @param array $BySetPos    Array of BySetPos values\n * @param int $Count         Max number of events to return\n * @param string $Until      Last day of repeat\n * @param string $Wkst       First day of week ('MO' is default)\n * @param array $ex_days     Array of exception dates for this event in YYYYMMDD format\n * @param array $inc_days    Array of inclusion dates for this event in YYYYMMDD format\n * @param int $jump          Date to short cycle loop counts to,\n *                           also makes output YYYYMMDD\n *\n * @return array  Array of dates (in UNIX time format).\n */\nfunction get_all_dates ( $date, $rpt_type, $interval = 1, $ByMonth = '',\n  $ByWeekNo = '', $ByYearDay = '', $ByMonthDay = '', $ByDay = '', $BySetPos = '',\n  $Count = 999, $Until = null, $Wkst = 'MO', $ex_days = '', $inc_days = '',\n  $jump = '' ) {\n  global $byday_names, $byday_values, $CONFLICT_REPEAT_MONTHS;\n\n  $dateYmd = date ( 'Ymd', $date );\n  $hour = date ( 'H', $date );\n  $minute = date ( 'i', $date );\n\n  if ( $Until == null && $Count == 999 ) {\n    // Check for $CONFLICT_REPEAT_MONTHS months into future for conflicts.\n    $thisyear = substr ( $dateYmd, 0, 4 );\n    $thismonth = substr ( $dateYmd, 4, 2 ) + $CONFLICT_REPEAT_MONTHS;\n    $thisday = substr ( $dateYmd, 6, 2 );\n    if ( $thismonth > 12 ) {\n      $thisyear++;\n      $thismonth -= 12;\n    }\n    $realend = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n  } else\n    $realend = ( $Count != 999\n      ? mktime ( 0, 0, 0, 1, 1, 2038 ) // Set $until to some ridiculous value.\n      : $Until );\n\n  $ret = [];\n  $date_excluded = false; //Flag to track ical results.\n  // Do iterative checking here.\n  // I floored the $realend so I check it against the floored date.\n  if ( $rpt_type && ( floor ( $date / 86400 ) * 86400 ) < $realend ) {\n    $cdate = $date;\n    $n = 0;\n    if ( ! empty ( $ByDay ) )\n      $byday = explode ( ',', $ByDay );\n\n    if ( ! empty ( $ByMonth ) )\n      $bymonth = explode ( ',', $ByMonth );\n\n    if ( ! empty ( $ByMonthDay ) )\n      $bymonthday = explode ( ',', $ByMonthDay );\n\n    if ( ! empty ( $BySetPos ) )\n      $bysetpos = explode ( ',', $BySetPos );\n\n    if ( ! empty ( $ByWeekNo ) )\n      $byweekno = explode ( ',', $ByWeekNo );\n\n    if ( ! empty ( $ByYearDay ) )\n      $byyearday = explode ( ',', $ByYearDay );\n\n    if ( $rpt_type == 'daily' ) {\n      // Skip to this year/month\n      // if called from query_events and we don't need count.\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        while ( $cdate < $jump ) {\n          $cdate = add_dstfree_time ( $cdate, 86400, $interval );\n        }\n      } while ( $cdate <= $realend && $n < $Count ) {\n        // Check RRULE items.\n        if ( ! empty ( $bymonth ) && !\n            in_array ( date ( 'n', $cdate ), $bymonth ) )\n          $date_excluded = true;\n\n        if ( ! empty ( $byweekno ) && !\n            in_array ( date ( 'W', $cdate ), $byweekno ) )\n          $date_excluded = true;\n\n        if ( ! empty ( $byyearday ) ) {\n          $doy = date ( 'z', $cdate ); //day of year\n          $diy = date ( 'L', $cdate ) + 365; //days in year\n          $diyReverse = $doy - $diy -1;\n          if ( ! in_array ( $doy, $byyearday ) && !\n              in_array ( $diyReverse, $byyearday ) )\n            $date_excluded = true;\n        }\n        if ( ! empty ( $bymonthday ) ) {\n          $dom = date ( 'j', $cdate ); //day of month\n          $dim = date ( 't', $cdate ); //days in month\n          $dimReverse = $dom - $dim -1;\n          if ( ! in_array ( $dom, $bymonthday ) && !\n              in_array ( $dimReverse, $bymonthday ) )\n            $date_excluded = true;\n        }\n        if ( ! empty ( $byday ) ) {\n          $bydayvalues = get_byday ( $byday, $cdate, 'daily', $date );\n          if ( ! in_array ( $cdate, $bydayvalues ) )\n            $date_excluded = true;\n        }\n        if ( $date_excluded == false )\n          $ret[$n++] = $cdate;\n\n        $cdate = add_dstfree_time ( $cdate, 86400, $interval );\n        $date_excluded = false;\n      }\n    } elseif ( $rpt_type == 'weekly' ) {\n      $r = 0;\n      $dow = date ( 'w', $date );\n      $cdate = $date - ( $dow * 86400 );\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        while ( ($cdate+604800) < $jump ) {\n          $cdate = add_dstfree_time ( $cdate, 604800, $interval );\n        }\n      }\n\n      while ( $cdate <= $realend && $n < $Count ) {\n        if ( ! empty ( $byday ) ) {\n          $WkstDay = $byday_values[$Wkst];\n          for ( $i=$WkstDay; $i<=( $WkstDay + 6 ); $i++ ) {\n            $td = $cdate + ( $i * 86400 );\n            $tdDay = date ( 'w', $td );\n            //echo $Count . '  ' . $n . '  ' .$WkstDay .'<br />';\n            if ( in_array( $byday_names[$tdDay], $byday ) && $td >= $date\n                && $td <= $realend && $n < $Count )\n              $ret[$n++] = $td;\n          }\n        } else {\n          $td = $cdate + ( $dow * 86400 );\n          $cdow = date ( 'w', $td );\n          if ( $cdow == $dow )\n            $ret[$n++] = $td;\n        }\n        // Skip to the next week in question.\n        $cdate = add_dstfree_time ( $cdate, 604800, $interval );\n      }\n    } elseif ( substr ( $rpt_type, 0, 7 ) == 'monthly' ) {\n      $thisyear = substr ( $dateYmd, 0, 4 );\n      $thismonth = substr ( $dateYmd, 4, 2 );\n      $thisday = substr ( $dateYmd, 6, 2 );\n      $hour = date ( 'H', $date );\n      $minute = date ( 'i', $date );\n      // Skip to this year if called from query_events and we don't need count.\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        while ( $cdate < $jump ) {\n          $thismonth += $interval;\n          $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n        }\n      }\n      $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n      $mdate = $cdate;\n      while ( $cdate <= $realend && $n < $Count ) {\n          $bydayvalues = $bymonthdayvalues = $yret = [];\n          if ( isset ( $byday ) )\n            $bydayvalues = get_byday ( $byday, $mdate, 'month', $date );\n\n          if ( isset ( $bymonthday ) )\n            $bymonthdayvalues = get_bymonthday ( $bymonthday, $mdate,\n              $date, $realend );\n\n          if ( isset ( $byday ) && isset ( $bymonthday ) ) {\n            $bydaytemp = array_intersect ( $bymonthdayvalues, $bydayvalues );\n            $yret = array_merge ( $yret, $bydaytemp );\n          } elseif ( isset ( $bymonthday ) )\n            $yret = array_merge ( $yret, $bymonthdayvalues );\n          elseif ( isset ( $byday ) )\n            $yret = array_merge ( $yret, $bydayvalues );\n          elseif ( ! isset ( $byday ) && ! isset ( $bymonthday ) )\n            $yret[] = $cdate;\n\n          // Must wait till all other BYxx are processed.\n          if ( isset ( $bysetpos ) ) {\n            $mth = date ( 'm', $cdate );\n            sort ( $yret );\n            sort ( $bysetpos );\n            $setposdate = mktime ( $hour, $minute, 0, $mth, 1, $thisyear );\n            $dim = date ( 't', $setposdate ); //Days in month.\n            $yretcnt = count ( $yret );\n            $bysetposcnt = count ( $bysetpos );\n            for ( $i = 0; $i < $bysetposcnt; $i++ ) {\n              if ( $bysetpos[$i] > 0 && $bysetpos[$i] <= $yretcnt )\n                $ret[] = $yret[$bysetpos[$i] -1];\n              else\n              if ( abs ( $bysetpos[$i] ) <= $yretcnt )\n                $ret[] = $yret[$yretcnt + $bysetpos[$i] ];\n            }\n          } else\n          if ( ! empty ( $yret ) ) { // Add all BYxx additional dates.\n            $yret = array_unique ( $yret );\n            $ret = array_merge ( $ret, $yret );\n          }\n          sort ( $ret );\n        $thismonth += $interval;\n        $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n        $mdate = mktime ( $hour, $minute, 0, $thismonth, 1, $thisyear );\n        $n = count ( $ret );\n      } //end while\n    } elseif ( $rpt_type == 'yearly' ) {\n      // This RRULE is VERY difficult to parse because RFC2445 doesn't\n      // give any guidance on which BYxxx are mutually exclusive.\n      // We will assume that:\n      // BYMONTH, BYMONTHDAY, BYDAY go together.\n      // BYDAY will be parsed relative to BYMONTH\n      // if BYDAY is used without BYMONTH,\n      // then it is relative to the current year (i.e 20MO).\n      $thisyear = substr ( $dateYmd, 0, 4 );\n      $thismonth = substr ( $dateYmd, 4, 2 );\n      $thisday = substr ( $dateYmd, 6, 2 );\n      // Skip to this year if called from query_events and we don't need count.\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        $jumpY = date ( 'Y', $jump );\n        while ( date ( 'Y', $cdate ) < $jumpY ) {\n          $thisyear += $interval;\n          $cdate = mktime ( $hour, $minute, 0, 1, 1, $thisyear );\n        }\n      }\n      $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n      while ( $cdate <= $realend && $n < $Count ) {\n        $yret = [];\n        $ycd = date ( 'Y', $cdate );\n        $fdoy = mktime ( 0, 0, 0, 1, 1, $ycd ); //first day of year\n        $fdow = date ( 'w', $fdoy ); //day of week first day of year\n        $ldoy = mktime ( 0, 0, 0, 12, 31, $ycd ); //last day of year\n        $ldow = date ( 'w', $ldoy ); //day of week last day  of year\n        $dow = date ( 'w', $cdate ); //day of week\n        $week = date ( 'W', $cdate ); //ISO 8601 number of week\n        if ( isset ( $bymonth ) ) {\n          foreach ( $bymonth as $month ) {\n            $mdate = mktime ( $hour, $minute, 0, $month, 1, $ycd );\n            $bydayvalues = $bymonthdayvalues = [];\n            if ( isset ( $byday ) )\n              $bydayvalues = get_byday ( $byday, $mdate, 'month', $date );\n\n            if ( isset ( $bymonthday ) )\n              $bymonthdayvalues = get_bymonthday ( $bymonthday, $mdate,\n                $date, $realend );\n\n            if ( isset ( $byday ) && isset ( $bymonthday ) ) {\n              $bydaytemp = array_intersect ( $bymonthdayvalues, $bydayvalues );\n              $yret = array_merge ( $yret, $bydaytemp );\n            } else\n              $yret = ( isset ( $bymonthday )\n                ? array_merge ( $yret, $bymonthdayvalues )\n                : ( isset ( $byday )\n                  ? array_merge ( $yret, $bydayvalues )\n                  : [mktime ( $hour, $minute, 0, $month, $thisday, $ycd )] ) );\n          } //end foreach bymonth\n        } elseif ( isset ( $byyearday ) ) { // end if isset bymonth\n          foreach ( $byyearday as $yearday ) {\n            preg_match( '/([-+]?)(\\d{1,3})/', $yearday, $match );\n            if ( $match[1] == '-' && ( $cdate >= $date ) )\n              $yret[] =\n              mktime ( $hour, $minute, 0, 12, 31 - $match[2] - 1, $thisyear );\n            else\n            if ( ( $n < $Count ) && ( $cdate >= $date ) )\n              $yret[] = mktime ( $hour, $minute, 0, 1, $match[2], $thisyear );\n          }\n        } elseif ( isset ( $byweekno ) ) {\n          $wkst_date = ( $Wkst == 'SU' ? $cdate + 86400 : $cdate );\n          if ( isset ( $byday ) )\n            $bydayvalues = get_byday ( $byday, $cdate, 'year', $date );\n\n          if ( in_array ( $week, $byweekno ) ) {\n            if ( isset ( $bydayvalues ) ) {\n              foreach ( $bydayvalues as $bydayvalue ) {\n                if ( $week == date ( 'W', $bydayvalue ) )\n                  $yret[] = $bydayvalue;\n              }\n            } else\n              $yret[] = $cdate;\n          }\n        } elseif ( isset ( $byday ) ) {\n          $bydayvalues = get_byday ( $byday, $cdate, 'year', $date );\n          if ( ! empty ( $bydayvalues ) )\n            $yret = array_merge ( $yret, $bydayvalues );\n        } else // No Byxx rules apply.\n          $ret[] = $cdate;\n\n        // Must wait till all other BYxx are processed.\n        if ( isset ( $bysetpos ) ) {\n          sort ( $yret );\n          for ( $i = 0, $bysetposcnt = count ( $bysetpos ); $i < $bysetposcnt;\n            $i++ ) {\n            $ret[] = ( $bysetpos[$i] > 0\n              ? $yret[$bysetpos[$i] -1]\n              : $yret[count ( $yret ) + $bysetpos[$i] ] );\n          }\n        } else\n        if ( ! empty ( $yret ) ) { // Add all BYxx additional dates.\n          $yret = array_unique ( $yret );\n          $ret = array_merge ( $ret, $yret );\n        }\n        sort ( $ret );\n        $n = count ( $ret );\n        $thisyear += $interval;\n        $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n      }\n    } //end if rpt_type\n  }\n  if ( ! empty ( $ex_days ) ) {\n    foreach ( $ex_days as $ex_day ) {\n      for ( $i = 0, $cnt = count ( $ret ); $i < $cnt;$i++ ) {\n        if ( isset ( $ret[$i] ) &&\n            date ( 'Ymd', $ret[$i] ) == substr ( $ex_day, 0, 8 ) )\n          unset ( $ret[$i] );\n      }\n      // Remove any unset elements.\n      sort ( $ret );\n    }\n  }\n  if ( ! empty ( $inc_days ) ) {\n    foreach ( $inc_days as $inc_day ) {\n      $ret[] = strtotime ( $inc_day );\n    }\n  }\n  // Remove any unset elements.\n  sort ( $ret );\n  // We want results in YYYYMMDD format.\n  if ( ! empty ( $jump ) ) {\n    for ( $i = 0, $retcnt = count ( $ret ); $i < $retcnt;$i++ ) {\n      if ( isset ( $ret[$i] ) )\n        $ret[$i] = date ( 'Ymd', $ret[$i] );\n    }\n  }\n  return $ret;\n}\n\n/**\n * Get the dates the correspond to the byday values.\n *\n * @param array $byday   ByDay values to process (MO,TU,-1MO,20MO...)\n * @param string $cdate  First day of target search (Unix timestamp)\n * @param string $type   Month, Year, Week (default = month)\n * @param string $date   First day of event (Unix timestamp)\n *\n * @return array  Dates that match ByDay (YYYYMMDD format).\n */\nfunction get_byday ( $byday, $cdate, $type, $date ) {\n  global $byday_values;\n\n  if ( empty ( $byday ) )\n    return;\n\n  $ret = [];\n  $hour = date ( 'H', $cdate );\n  $minute = date ( 'i', $cdate );\n  $mth = date ( 'm', $cdate );\n  $yr = date ( 'Y', $cdate );\n  if ( $type == 'month' ) {\n    $ditype = date ( 't', $cdate ); //Days in month.\n    $fday = mktime ( 0, 0, 0, $mth, 1, $yr ); //First day of month.\n    $lday = mktime ( 0, 0, 0, $mth + 1, 0, $yr ); //Last day of month.\n    $month = $mth;\n  } elseif ( $type == 'year' ) {\n    $ditype = date ( 'L', $cdate ) + 365; //Days in year.\n    $fday = mktime ( 0, 0, 0, 1, 1, $yr ); //First day of year.\n    $lday = mktime ( 0, 0, 0, 12, 31, $yr ); //Last day of year.\n    $month = 1;\n  } elseif ( $type == 'daily' ) {\n    $fday = $lday = $cdate;\n    $month = $mth;\n  } else {\n    die_miserable_death('Invalid type \"' . $type . '\" in get_by_day');\n  }\n\n  $fdow = date ( 'w', $fday ); //Day of week first day of $type.\n  $ldow = date ( 'w', $lday ); //Day of week last day of $type\n  foreach ( $byday as $day ) {\n    $byxxxDay = '';\n    $dayTxt = substr ( $day, -2, 2 );\n    $dayOffset = substr_replace ( $day, '', -2, 2 );\n\n    // It is possible to have spurious offset days within a 'daily' repetition,\n    //   by setting them while in month/year repetition type, then changing\n    //   type to 'daily'.\n    // These situations will lead in a crash without the following test.\n    if (is_numeric($dayOffset) && !isset($ditype))\n      continue;\n\n    $dowOffset = ( ( -1 * $byday_values[$dayTxt] ) + 7 ) % 7; //SU=0, MO=6, TU=5...\n    if ( is_numeric ( $dayOffset ) && $dayOffset > 0 ) {\n      // Offset from beginning of $type.\n      $dayOffsetDays = ( ( $dayOffset - 1 ) * 7 ); //1 = 0, 2 = 7, 3 = 14...\n      $forwardOffset = $byday_values[$dayTxt] - $fdow;\n      if ( $forwardOffset < 0 )\n        $forwardOffset += 7;\n\n      $domOffset = ( 1 + $forwardOffset + $dayOffsetDays );\n      if ( $domOffset <= $ditype ) {\n        $byxxxDay = mktime ( $hour, $minute, 0, $month, $domOffset, $yr );\n        if ( $mth == date ( 'm', $byxxxDay ) && $byxxxDay > $date )\n          $ret[] = $byxxxDay;\n      }\n    } else\n    if ( is_numeric ( $dayOffset ) ) { // Offset from end of $type.\n      $dayOffsetDays = ( ( $dayOffset + 1 ) * 7 ); //-1 = 0, -2 = 7, -3 = 14...\n      $byxxxDay = mktime ( $hour, $minute, 0, $month + 1,\n        ( 0 - ( ( $ldow + $dowOffset ) % 7 ) + $dayOffsetDays ), $yr );\n      if ( $mth == date ( 'm', $byxxxDay ) && $byxxxDay > $date )\n        $ret[] = $byxxxDay;\n    } else {\n      if ( $type == 'daily' ) {\n        if ( ( date ( 'w', $cdate ) == $byday_values[$dayTxt] ) && $cdate > $date )\n          $ret[] = $cdate;\n      } else {\n        for ( $i = 1; $i <= $ditype; $i++ ) {\n          $loopdate = mktime ( $hour, $minute, 0, $month, $i, $yr );\n          if ( ( date ( 'w', $loopdate ) == $byday_values[$dayTxt] ) &&\n            $loopdate > $date ) {\n            $ret[] = $loopdate;\n            $i += 6; //Skip to next week.\n          }\n        }\n      }\n    }\n  }\n  return $ret;\n}\n\n/**\n * Get the dates the correspond to the bymonthday values.\n *\n * @param array $bymonthday  ByMonthDay values to process (1,2,-1,-2...)\n * @param string $cdate      First day of target search (Unix timestamp)\n * @param string $date       First day of event (Unix timestamp)\n * @param string $realend    Last day of event (Unix timestamp)\n *\n * @return array  Dates that match ByMonthDay (YYYYMMDD format).\n */\nfunction get_bymonthday ( $bymonthday, $cdate, $date, $realend ) {\n  if ( empty ( $bymonthday ) )\n    return;\n\n  $ret = [];\n  $dateYmHi = date ( 'YmHi', $cdate );\n  $dim = date ( 't', $cdate ); //Days in month.\n  $yr = substr ( $dateYmHi, 0, 4 );\n  $mth = substr ( $dateYmHi, 4, 2 );\n  $hour = substr ( $dateYmHi, 6, 2 );\n  $minute = substr ( $dateYmHi, 8, 2 );\n  foreach ( $bymonthday as $monthday ) {\n    $byxxxDay = mktime ( $hour, $minute, 0, $mth,\n      ( $monthday > 0 ? $monthday : $dim + $monthday + 1 ), $yr );\n    if ( $byxxxDay > $date )\n      $ret[] = $byxxxDay;\n  }\n  return $ret;\n}\n\n/**\n * Get categories for a given event id\n * Global categories are changed to negative numbers\n *\n * @param int      $id  Id of event\n * @param string   $user normally this is $login\n * @param bool     $asterisk Include '*' if Global\n *\n * @return array   Array containing category names.\n */\nfunction get_categories_by_id ( $id, $user, $asterisk = false ) {\n  global $login;\n\n  if ( empty ( $id ) )\n    return false;\n\n  $categories = [];\n\n  $res = dbi_execute ( 'SELECT wc.cat_name, wc.cat_id, wec.cat_owner\n    FROM webcal_categories wc, webcal_entry_categories wec WHERE wec.cal_id = ?\n    AND wec.cat_id = wc.cat_id AND ( wc.cat_owner = ? OR wc.cat_owner IS NULL )\n  ORDER BY wec.cat_order', [$id, ( empty ( $user ) ? $login : $user )] );\n  while ( $row = dbi_fetch_row ( $res ) ) {\n    $categories[ ( empty ( $row[2] ) ? - $row[1] : $row[1] ) ] = $row[0]\n     . ( $asterisk && empty ( $row[2] ) ? '*' : '' );\n  }\n  dbi_free_result ( $res );\n\n  return $categories;\n}\n\n/**\n * Gets all the events for a specific date.\n *\n * Events are retreived from the array of pre-loaded events\n * (which was loaded all at once to improve performance).\n *\n * The returned events will be sorted by time of day.\n *\n * @param string $date            Date to get events for in YYYYMMDD format\n *                                in user's timezone\n * @param bool   $get_unapproved  Load unapproved events?\n *\n * @return array  Array of Events.\n */\nfunction get_entries ( $date, $get_unapproved = true ) {\n  global $events;\n  $ret = [];\n  for ( $i = 0, $cnt = count ( $events ); $i < $cnt; $i++ ) {\n    $event_date = $events[$i]->getDateTimeAdjusted();\n    if( ! $get_unapproved && $events[$i]->getStatus() == 'W' )\n      continue;\n\n    if( $events[$i]->isAllDay() || $events[$i]->isUntimed() ) {\n      if( $events[$i]->getDate() == $date )\n        $ret[] = $events[$i];\n    } else {\n      if ( $event_date == $date )\n        $ret[] = $events[$i];\n    }\n  }\n  return $ret;\n}\n\n/**\n * Gets all the groups a user is authorized to see\n *\n * @param string $user        Subject User\n *\n * @return array  Array of Groups.\n */\nfunction get_groups($user, $includeUserlist=false)\n{\n  global $GROUPS_ENABLED, $USER_SEES_ONLY_HIS_GROUPS, $PUBLIC_ACCESS_FULLNAME, $NONUSER_PREFIX,\n    $is_nonuser_admin, $is_assistant, $login, $is_admin;\n\n  if (empty($GROUPS_ENABLED) || $GROUPS_ENABLED != 'Y')\n    return false;\n\n  $owner = ($is_nonuser_admin || $is_assistant ? $user : $login);\n\n  // Load list of groups.\n  $sql = 'SELECT wg.cal_group_id, wg.cal_name, wg.cal_owner, ' .\n    'wg.cal_last_update FROM webcal_group wg';\n  $sql_params = [];\n  if ($USER_SEES_ONLY_HIS_GROUPS == 'Y' && !$is_admin) {\n    $sql .= ', webcal_group_user wgu WHERE wg.cal_group_id = wgu.cal_group_id\n      AND wgu.cal_login = ?';\n    $sql_params[] = $owner;\n  }\n\n  $res = dbi_execute($sql . ' ORDER BY wg.cal_name', $sql_params);\n\n  $groups = [];\n  if ($res) {\n    while ($row = dbi_fetch_row($res)) {\n      $groups[] = [\n        'cal_group_id' => $row[0],\n        'cal_name' => $row[1],\n        'cal_owner' => $row[2],\n        'cal_last_update' => $row[3]\n      ];\n    }\n    dbi_free_result($res);\n  }\n\n  if ($includeUserlist) {\n    $users = user_get_users();\n    $users_by_name = [];\n    foreach ($users as $user) {\n      $users_by_name[$user['cal_login']] = $user;\n    }\n    $user_by_name['__public__'] = [\n      'cal_login' => '__public__',\n      'cal_fullname' => $PUBLIC_ACCESS_FULLNAME\n    ];\n    // Also include Remote and Resource calendars in case the group contains one\n    $resourceCals = get_nonuser_cals($login, false);\n    $remoteCals = get_nonuser_cals($login, true);\n    $others = array_merge($resourceCals, $remoteCals);\n    foreach ($others as $other) {\n      $users_by_name[$other['cal_login']] = $other;\n    }\n\n    for ($i = 0; $i < count($groups); $i++) {\n      $users = [];\n      $sql = 'SELECT cal_login FROM webcal_group_user WHERE cal_group_id = ? ORDER BY cal_login';\n      $res = dbi_execute($sql, [$groups[$i]['cal_group_id']]);\n      while ($row = dbi_fetch_row($res)) {\n        $users[] = $users_by_name[$row[0]];\n      }\n      $groups[$i]['cal_users'] = $users;\n    }\n  }\n  return $groups;\n}\n\n/**\n * Gets the last page stored using {@link remember_this_view()}.\n *\n * @return string The URL of the last view or an empty string if it cannot be\n *                determined.\n *\n * @global array  Cookies\n */\nfunction get_last_view ( $clear=true ) {\n  $val = ( isset ( $_COOKIE['webcalendar_last_view'] )\n    ? str_replace ( '&', '&amp;', $_COOKIE['webcalendar_last_view'] ) : '' );\n\n  if ( $clear )\n    sendCookie ( 'webcalendar_last_view', '', 0 );\n\n  return $val;\n}\n\n/**\n * Gets a list of nonusers.\n *\n * If groups are enabled, this will restrict the list of nonusers to only those\n * that are in the same group(s) as the user (unless the user is an admin) or\n * the nonuser is a public calendar. We allow admin users to see all users\n * because they can also edit someone else's events (so they may need access to\n * users who are not in the same groups).\n *\n * If user access control is enabled, then we also check to see if this\n * user is allowed to view each nonuser's calendar. If not, then that nonuser\n * is not included in the list.\n *\n * @return array  Array of nonusers, where each element in the array is an array\n *                with the following keys:\n *    - cal_login\n *    - cal_lastname\n *    - cal_firstname\n *    - cal_is_public\n */\nfunction get_my_nonusers ( $user = '', $add_public = false, $reason = 'invite' ) {\n  global $GROUPS_ENABLED, $is_admin, $is_nonuser, $is_nonuser_admin, $login,\n  $my_nonuser_array, $my_user_array, $PUBLIC_ACCESS, $PUBLIC_ACCESS_FULLNAME,\n  $USER_SEES_ONLY_HIS_GROUPS, $USER_SORT_ORDER;\n\n  $this_user = ( empty ( $user ) ? $login : $user );\n  // Return the global variable (cached).\n  if ( ! empty ( $my_nonuser_array[$this_user . $add_public] ) &&\n      is_array ( $my_nonuser_array ) )\n    return $my_nonuser_array[$this_user . $add_public];\n\n  $u = get_nonuser_cals();\n  if ( $GROUPS_ENABLED == 'Y' && $USER_SEES_ONLY_HIS_GROUPS == 'Y' && ! $is_admin ) {\n    // Get current user's groups.\n    $rows = dbi_get_cached_rows ( 'SELECT cal_group_id FROM webcal_group_user\n  WHERE cal_login = ?', [$this_user] );\n    $groups = $ret = $u_byname = [];\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $groups[] = $row[0];\n      }\n    }\n    $groupcnt = count ( $groups );\n    // Nonuser (public) can only see themself (unless access control is on).\n    if( $is_nonuser && ! access_is_enabled() )\n      return [$this_user];\n\n    for ( $i = 0, $cnt = count ( $u ); $i < $cnt; $i++ ) {\n      $u_byname[$u[$i]['cal_login']] = $u[$i];\n    }\n\n    if ( $groupcnt == 0 ) {\n      // Eek. User is in no groups... Return only themselves.\n      if ( isset ( $u_byname[$this_user] ) )\n        $ret[] = $u_byname[$this_user];\n\n      $my_nonuser_array[$this_user . $add_public] = $ret;\n      return $ret;\n    }\n    // Get other members of current users' groups.\n    $sql = 'SELECT DISTINCT( wnc.cal_login ), cal_lastname, cal_firstname,\n      cal_is_public FROM webcal_group_user wgu, webcal_nonuser_cals wnc WHERE '\n     . ( $add_public ? 'wnc.cal_is_public = \\'Y\\'  OR ' : '' )\n     . ' cal_admin = ?\n    OR ( wgu.cal_login = wnc.cal_login\n      AND cal_group_id ' .\n      ( $groupcnt == 1 ? '= ?' : 'IN ( ?' . str_repeat ( ',?', $groupcnt - 1 ) . ' )' );\n\n    // Add $this_user to beginning of query params.\n    array_unshift ( $groups, $this_user );\n    $rows = dbi_get_cached_rows ( $sql . ' )\n  ORDER BY '\n       . ( empty ( $USER_SORT_ORDER ) ? '' : \"$USER_SORT_ORDER\" ), $groups );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        if ( isset ( $u_byname[$row[0]] ) )\n          $ret[] = $u_byname[$row[0]];\n      }\n    }\n  } else\n    // Groups not enabled... return all nonusers.\n    $ret = $u;\n\n  // We add Public Access if $add_public= true.\n  // Admin already sees all users.\n  if ( ! $is_admin && $add_public && $PUBLIC_ACCESS == 'Y' ) {\n    $pa = user_get_users ( true );\n    array_unshift ( $ret, $pa[0] );\n  }\n  // If user access control enabled,\n  // remove any nonusers that this user does not have required access.\n  if( access_is_enabled() ) {\n    $newlist = [];\n    for ( $i = 0, $cnt = count ( $ret ); $i < $cnt; $i++ ) {\n      $can_list = access_user_calendar ( $reason, $ret[$i]['cal_login'], $this_user );\n      if ( $can_list == 'Y' || $can_list > 0 )\n        $newlist[] = $ret[$i];\n    }\n    $ret = $newlist;\n  }\n  $my_nonuser_array[$this_user . $add_public] = $ret;\n  return $ret;\n}\n\n/**\n * Gets a list of users.\n *\n * If groups are enabled, this will restrict the list to only those users who\n * are in the same group(s) as this user (unless the user is an admin). We allow\n * admin users to see all users because they can also edit someone else's events\n * (so they may need access to users who are not in the same groups).\n *\n * If user access control is enabled, then we also check to see if this\n * user is allowed to view each user's calendar. If not, then that user\n * is not included in the list.\n *\n * @return array  Array of users, where each element in the array is an array\n *                with the following keys:\n *    - cal_login\n *    - cal_lastname\n *    - cal_firstname\n *    - cal_is_admin\n *    - cal_email\n *    - cal_password\n *    - cal_fullname\n */\nfunction get_my_users ( $user = '', $reason = 'invite' ) {\n  global $GROUPS_ENABLED, $is_admin, $is_nonuser, $is_nonuser_admin, $login,\n  $my_user_array, $USER_SEES_ONLY_HIS_GROUPS, $USER_SORT_ORDER;\n\n  $this_user = ( empty ( $user ) ? $login : $user );\n  // Return the global variable (cached).\n  if ( ! empty ( $my_user_array[$this_user][$reason] ) &&\n      is_array ( $my_user_array ) )\n    return $my_user_array[$this_user][$reason];\n\n  if ( $GROUPS_ENABLED == 'Y' && $USER_SEES_ONLY_HIS_GROUPS == 'Y' && ! $is_admin ) {\n    // Get groups with current user as member.\n    $rows = dbi_get_cached_rows ( 'SELECT cal_group_id FROM webcal_group_user\n  WHERE cal_login = ?', [$this_user] );\n    $groups = $ret = $u_byname = [];\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $groups[] = $row[0];\n      }\n    }\n    $groupcnt = count ( $groups );\n    // Nonuser (public) can only see themself (unless access control is on).\n    if( $is_nonuser && ! access_is_enabled() )\n      return [$this_user];\n\n    $u = user_get_users();\n    if ( $is_nonuser_admin )\n      $u = array_merge( get_my_nonusers(), $u );\n\n    for ( $i = 0, $cnt = count ( $u ); $i < $cnt; $i++ ) {\n      $u_byname[$u[$i]['cal_login']] = $u[$i];\n    }\n\n    if ( $groupcnt == 0 ) {\n      // Eek. User is in no groups... Return only themselves.\n      if ( isset ( $u_byname[$this_user] ) )\n        $ret[] = $u_byname[$this_user];\n\n      $my_user_array[$this_user][$reason] = $ret;\n      return $ret;\n    }\n    // Get other members of users' groups.\n    $sql = 'SELECT DISTINCT(webcal_group_user.cal_login), cal_lastname,\n      cal_firstname FROM webcal_group_user LEFT JOIN webcal_user\n    ON webcal_group_user.cal_login = webcal_user.cal_login\n  WHERE cal_group_id ' .\n      ( $groupcnt == 1 ? '= ?' : 'IN ( ?' . str_repeat ( ',?', $groupcnt - 1 ) . ' )' );\n\n    $rows = dbi_get_cached_rows ( $sql . ' ORDER BY '\n       . ( empty ( $USER_SORT_ORDER ) ? '' : \"$USER_SORT_ORDER, \" )\n       . 'webcal_group_user.cal_login', $groups );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        if ( isset ( $u_byname[$row[0]] ) )\n          $ret[] = $u_byname[$row[0]];\n      }\n    }\n  } else\n    // Groups not enabled... return all users.\n    $ret = user_get_users();\n\n  // If user access control enabled,\n  // remove any users that this user does not have required access.\n  if( access_is_enabled() ) {\n    $newlist = [];\n    for ( $i = 0, $cnt = count ( $ret ); $i < $cnt; $i++ ) {\n      $can_list = access_user_calendar ( $reason, $ret[$i]['cal_login'], $this_user );\n      if ( $can_list == 'Y' || $can_list > 0 )\n        $newlist[] = $ret[$i];\n    }\n    $ret = $newlist;\n  }\n  $my_user_array[$this_user][$reason] = $ret;\n  return $ret;\n}\n\n/**\n * Gets a list of nonuser calendars and return info in an array.\n *\n * @param string $user    Login of admin of the nonuser calendars\n * @param bool   $remote  Return only remote calendar  records\n *\n * @return array  Array of nonuser cals, where each is an array with the\n *                following fields:\n * - <var>cal_login</var>\n * - <var>cal_lastname</var>\n * - <var>cal_firstname</var>\n * - <var>cal_admin</var>\n * - <var>cal_fullname</var>\n * - <var>cal_is_public</var>\n */\nfunction get_nonuser_cals ( $user = '', $remote = false ) {\n  global $is_admin, $USER_SORT_ORDER;\n  $count = 0;\n  $query_params = $ret = [];\n  $sql = 'SELECT cal_login, cal_lastname, cal_firstname, cal_admin,\n    cal_is_public, cal_url FROM webcal_nonuser_cals WHERE cal_url IS '\n   . ( $remote == false ? '' : 'NOT ' ) . 'NULL ';\n\n  if ( $user != '' ) {\n    $sql .= 'AND  cal_admin = ? ';\n    $query_params[] = $user;\n  }\n\n  $rows = dbi_get_cached_rows ( $sql . 'ORDER BY '\n     . ( empty ( $USER_SORT_ORDER ) ? '' : \"$USER_SORT_ORDER, \" ) . 'cal_login',\n    $query_params );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $fullname = '';\n      if (!empty($row[1]))\n        $fullname = $row[1];\n      if (!empty($row[2])) {\n        if(!empty($fullname))\n          $fullname .= ' ';\n        $fullname .= $row[2];\n      }\n      $ret[$count++] = [\n        'cal_login' => $row[0],\n        'cal_lastname' => $row[1],\n        'cal_firstname' => $row[2],\n        'cal_admin' => $row[3],\n        'cal_is_public' => $row[4],\n        'cal_url' => $row[5],\n        'cal_fullname' => $fullname ];\n    }\n  }\n  // If user access control enabled,\n  // remove any users that this user does not have 'view' access to.\n  if( access_is_enabled() && ! $is_admin ) {\n    $newlist = [];\n    for ( $i = 0, $cnt = count ( $ret ); $i < $cnt; $i++ ) {\n      if ( access_user_calendar ( 'view', $ret[$i]['cal_login'] ) )\n        $newlist[] = $ret[$i];\n    }\n    $ret = $newlist;\n  }\n  return $ret;\n}\n\n// Get the number of events the specified username is a participant to.\nfunction get_event_count_for_user($username)\n{\n  $sql = 'SELECT COUNT(weu.cal_id) FROM webcal_entry_user weu, webcal_entry we ' .\n    'WHERE weu.cal_id = we.cal_id ' .\n    'AND weu.cal_login = ?';\n  //echo \"SQL: $sql \\nUser: $username\\n\";\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  //echo \"COUNT: \"; print_r($rows);\n  if ($rows) {\n    return $rows[0][0];\n  }\n  return 0;\n}\n\n// Get the last import date for a remote calendar in YYYYMMDD format or '' for none.\nfunction get_remote_calendar_last_update($username)\n{\n  $sql = 'SELECT MAX(cal_date) FROM webcal_import WHERE cal_login = ?';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n  }\n  return $ret;\n}\n\n// Get the last date we attempted an import (but may have skipped it because it was\n// identical to a previous import) for a remote calendar in YYYYMMDD format or '' for none.\nfunction get_remote_calendar_last_checked($username)\n{\n  $sql = 'SELECT MAX(cal_check_date) FROM webcal_import WHERE cal_login = ?';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n  }\n  return $ret;\n}\n\n// Get the md5 hash of the last successful import.  It the new md5 hash is\n// identical, we can skip the new import.\nfunction get_remote_calendar_last_md5($username)\n{\n  $sql = 'SELECT cal_md5 FROM webcal_import WHERE cal_login = ? ORDER BY cal_import_id DESC LIMIT 1';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n  }\n  return $ret;\n}\n\nfunction update_import_check_date($username)\n{\n  $sql = 'SELECT MAX(cal_import_id) FROM webcal_import WHERE cal_login = ?';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n    if (!empty($ret)) {\n      $sql = 'UPDATE webcal_import SET cal_check_date = ? WHERE cal_import_id = ?';\n      dbi_execute($sql, [date('Ymd'), $ret]);\n    }\n  }\n  return $ret;\n}\n\n/**\n * Load or reload a remote calendar if and only if it has been modified since the last time it was imported.\n */\nfunction load_remote_calendar($username, $url)\n{\n  global $login, $errormsg, $error_num, $count_suc, $numDeleted, $calUser, $importMd5;\n\n  // Set global vars used in xcal.php (blech)\n  $data = [];\n  $calUser = $username;\n  $overwrite = true;\n  $type = 'remoteics';\n  $numDeleted = 0;\n  $count_suc = 0;\n  $data = parse_ical($url, $type);\n  // Get prior md5 has to see if there has been an update.\n  // New md5 is in global var $importMd5\n  $count = get_event_count_for_user($username);\n  $priorMd5 = get_remote_calendar_last_md5($username);\n  if ($priorMd5 == $importMd5 && $count > 0) {\n    // No changes in remote calendar since we last imported it.  Just skip it.\n    update_import_check_date($username);\n    activity_log(0, $login, $username, LOG_UPDATE, \"Remote calendar checked but was identical to previous import\");\n    return [0, 0, 0, \"Remote calendar not updated since last import.\"];\n  }\n  if (!empty($data) && count($data) > 0 && empty($errormsg)) {\n    // Delete existing events.\n    $numDeleted = user_delete_events ($username);\n    // Import new events\n    import_data($data, $overwrite, $type, true);\n    activity_log(0, $login, $username, LOG_UPDATE, \"Remote calendar reloaded with $count_suc events added, $numDeleted deleted\");\n    return [0, $count_suc, $numDeleted, ''];\n  } else  if (empty($errormsg)) {\n    return [1, 0, 0, \"No data imported.\"];\n  }\n  return [empty($errormsg) ? 0 : 1, $count_suc, $numDeleted, $errormsg];\n}\n\n/**\n * Gets the list of active plugins.\n *\n * Should be called after\n * {@link load_global_settings()} and {@link load_user_preferences()}.\n *\n * @internal cek: Ignored since I am not sure this will ever be used...\n *\n * @return array Active plugins\n *\n * @ignore\n */\nfunction get_plugin_list ( $include_disabled = false ) {\n  global $error;\n  // First get list of available plugins.\n  $res = dbi_execute ( 'SELECT cal_setting FROM webcal_config\n    WHERE cal_setting LIKE \\'%.plugin_status\\' '\n     . ( ! $include_disabled ? 'AND cal_value = \\'Y\\' ' : '' )\n     . 'ORDER BY cal_setting' );\n  $plugins = [];\n  if ( $res ) {\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      $e = explode ( '.', $row[0] );\n      if ( $e[0] != '' )\n        $plugins[] = $e[0];\n    }\n    dbi_free_result ( $res );\n  } else\n    $error = db_error ( true );\n\n  if ( count ( $plugins ) == 0 )\n    $plugins[] = 'webcalendar';\n\n  return $plugins;\n}\n\n/**\n * Gets a preference setting for the specified user.\n *\n * If no value is found in the database,\n * then the system default setting will be returned.\n *\n * @param string $user     User login we are getting preference for\n * @param string $setting  Name of the setting\n * @param stirng $defaultSetting    Value to return if no value foun\n *            in the database\n *\n * @return string  The value found in the webcal_user_pref table for the\n *                 specified setting or the sytem default if no user settings\n *                 was found.\n */\nfunction get_pref_setting ( $user, $setting, $defaultValue='' ) {\n  $ret = $defaultValue;\n  // Set default.\n  if ( ! isset ( $GLOBALS['sys_' . $setting] ) ) {\n    // This could happen if the current user has not saved any prefs yet.\n    if ( ! empty ( $GLOBALS[$setting] ) ) {\n      $ret = $GLOBALS[$setting];\n    }\n  } else {\n    if ( isset ( $GLOBALS['sys_' . $setting] ) )\n      $ret = $GLOBALS['sys_' . $setting];\n  }\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_value FROM webcal_user_pref\n  WHERE cal_login = ?\n    AND cal_setting = ?', [$user, $setting] );\n  if ( $rows ) {\n    $row = $rows[0];\n    if ( $row && ! empty ( $row[0] ) )\n      $ret = $row[0];\n  }\n  return $ret;\n}\n\n/**\n * Gets user's preferred view.\n *\n * The user's preferred view is stored in the $STARTVIEW global variable.\n * This is loaded from the user preferences (or system settings\n * if there are no user prefererences.)\n *\n * @param string $indate  Date to pass to preferred view in YYYYMMDD format\n * @param string $args    Arguments to include in the URL (such as \"user=joe\")\n *\n * @return string  URL of the user's preferred view.\n */\nfunction get_preferred_view ( $indate = '', $args = '' ) {\n  global $ALLOW_VIEW_OTHER, $is_admin, $STARTVIEW, $thisdate, $views;\n\n  // We want user's to set  their pref on first login.\n  if ( empty ( $STARTVIEW ) )\n    return false;\n\n  $url = $STARTVIEW;\n  // We used to just store \"month\" in $STARTVIEW without the \".php\".\n  // This is just to prevent users from getting a \"404 not found\"\n  // if they have not updated their preferences.\n  $url .= ( ! strpos ( $STARTVIEW, '.php' ) ? '.php' : '' );\n\n  // Prevent endless looping\n  // if preferred view is custom and viewing others is not allowed.\n  if ( substr ( $url, 0, 5 ) == 'view_' && $ALLOW_VIEW_OTHER == 'N' && !\n      $is_admin )\n    $url = 'month.php';\n\n  if ( ! access_can_view_page ( $url ) ) {\n    if ( access_can_access_function ( ACCESS_DAY ) )\n      $url = 'day.php';\n    else\n    if ( access_can_access_function ( ACCESS_MONTH ) )\n      $url = 'month.php';\n    else\n    if ( access_can_access_function ( ACCESS_WEEK ) )\n      $url = 'week.php';\n    // At this point, this user cannot access the view set in their preferences\n    // (and they cannot update their preferences), and they cannot view any of\n    // the standard day/month/week/year pages. All that's left is either\n    // a custom view that was created by them, or a global view.\n    if ( count ( $views ) > 0 )\n      $url = $views[0]['url'];\n  }\n\n  $url = str_replace ( '&amp;', '&', $url );\n  $url = str_replace ( '&', '&amp;', $url );\n\n  $xdate = ( empty ( $indate ) ? $thisdate : $indate );\n\n  $url .= ( empty ( $xdate ) ? '' : ( strstr ( $url, '?' ) ? '&amp;' : '?' )\n     . 'date=' . $xdate );\n  $url .= ( empty ( $args ) ? '' : ( strstr ( $url, '?' ) ? '&amp;' : '?' )\n     . $args );\n\n  return $url;\n}\n\n/**\n * Gets all the repeating events for the specified date.\n *\n * <b>Note:</b>\n * The global variable <var>$repeated_events</var> needs to be\n * set by calling {@link read_repeated_events()} first.\n *\n * @param string $user            Username\n * @param string $date            Date to get events for in YYYYMMDD format\n * @param bool   $get_unapproved  Include unapproved events in results?\n *\n * @return mixed  The query result resource on queries (which can then be\n *                passed to {@link dbi_fetch_row()} to obtain the results), or\n *                true/false on insert or delete queries.\n *\n * @global array  Array of {@link RepeatingEvent}s\n *                retreived using {@link read_repeated_events()}\n */\nfunction get_repeating_entries ( $user, $dateYmd, $get_unapproved = true ) {\n  global $repeated_events;\n\n  $n = 0;\n  $ret = [];\n  for ( $i = 0, $cnt = count ( $repeated_events ); $i < $cnt; $i++ ) {\n    if( ( $repeated_events[$i]->getStatus() == 'A' || $get_unapproved )\n        && in_array( $dateYmd, $repeated_events[$i]->getRepeatAllDates() ) )\n      $ret[$n++] = $repeated_events[$i];\n  }\n  return $ret;\n}\n\n/**\n * Gets all the tasks for a specific date.\n *\n * Events are retreived from the array of pre-loaded tasks\n * (which was loaded all at once to improve performance).\n *\n * The returned tasks will be sorted by time of day.\n *\n * @param string $date            Date to get tasks for in YYYYMMDD format\n * @param bool   $get_unapproved  Load unapproved events?\n *\n * @return array  Array of Tasks.\n */\nfunction get_tasks ( $date, $get_unapproved = true ) {\n  global $tasks;\n\n  $ret = [];\n  $today = date ( 'Ymd' );\n  for ( $i = 0, $cnt = is_array($tasks) ? count ($tasks) : 0; $i < $cnt; $i++ ) {\n    // In case of data corruption (or some other bug...).\n    if( empty( $tasks[$i] ) || $tasks[$i]->getID() == ''\n        || ( ! $get_unapproved && $tasks[$i]->getStatus() == 'W' ) )\n      continue;\n\n    $due_date = date( 'Ymd', $tasks[$i]->getDueDateTimeTS() );\n    // Make overdue tasks float to today.\n    if ( ( $date == $today && $due_date < $today ) || $due_date == $date )\n      $ret[] = $tasks[$i];\n  }\n  return $ret;\n}\n\n/**\n * Get plugins available to the current user.\n *\n * Do this by getting a list of all plugins that are not disabled by the\n * administrator and make sure this user has not disabled any of them.\n *\n * It's done this was so that when an admin adds a new plugin,\n * it shows up on each users system automatically (until they disable it).\n *\n * @return array  Plugins available to current user.\n *\n * @ignore\n */\nfunction get_user_plugin_list() {\n  $ret = [];\n  $all_plugins = get_plugin_list();\n  for ( $i = 0, $cnt = count ( $all_plugins ); $i < $cnt; $i++ ) {\n    if ( $GLOBALS[$all_plugins[$i] . '.disabled'] != 'N' )\n      $ret[] = $all_plugins[$i];\n  }\n  return $ret;\n}\n\n/**\n * Get event ids for all events this user is a participant.\n *\n * @param string $user  User to retrieve event ids\n */\nfunction get_users_event_ids ( $user ) {\n  $events = [];\n  $res = dbi_execute ( 'SELECT we.cal_id FROM webcal_entry we, webcal_entry_user weu\n  WHERE we.cal_id = weu.cal_id\n    AND weu.cal_login = ?', [$user] );\n  if ( $res ) {\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      $events[] = $row[0];\n    }\n  }\n  return $events;\n}\n\n/**\n * Identify user's browser.\n *\n * Returned value will be one of:\n * - \"Mozilla/5\" = Mozilla (open source Mozilla 5.0)\n * - \"Mozilla/[3,4]\" = Netscape (3.X, 4.X)\n * - \"MSIE 4\" = MSIE (4.X)\n *\n * @return string  String identifying browser.\n *\n * @ignore\n */\nfunction get_web_browser() {\n  $agent = getenv( 'HTTP_USER_AGENT' );\n\n  if ( preg_match( '/MSIE \\d/', $agent ) )\n    return 'MSIE';\n\n  if ( preg_match( '/Mozilla\\/[234]/', $agent ) )\n    return 'Netscape';\n\n  if ( preg_match( '/Mozilla\\/[5678]/', $agent ) )\n    return 'Mozilla';\n\n  return 'Unknown';\n}\n\n/**\n * Gets the previous weekday of the week containing the specified date.\n *\n * If the date specified is a Sunday, then that date is returned.\n *\n * @param int $year   Year\n * @param int $month  Month (1-12)\n * @param int $day    Day (1-31)\n *\n * @return int  The date (in UNIX timestamp format).\n */\nfunction get_weekday_before ( $year, $month, $day = 2 ) {\n  global $DISPLAY_WEEKENDS, $WEEK_START, $weekday_names;\n\n  // Construct string like 'last Sun'.\n  $laststr = 'last ' . $weekday_names[$WEEK_START];\n  // We default day=2 so if the 1ast is Sunday or Monday it will return the 1st.\n  $newdate = strtotime ( $laststr,\n    mktime ( 0, 0, 0, $month, $day, $year ) + $GLOBALS['tzOffset'] );\n  // Check DST and adjust newdate.\n  while ( date ( 'w', $newdate ) == date ( 'w', $newdate + 86400 ) ) {\n    $newdate += 3600;\n  }\n  return $newdate;\n}\n\n/**\n * Get the moonphases for a given year and month.\n *\n * Will only work if optional moon_phases.php file exists in includes folder.\n *\n * @param int $year   Year in YYYY format\n * @param int $month  Month in m format Jan =1\n *\n * @return array  $key = phase name, $val = Ymd value.\n *\n * @global string (Y/N) Display Moon Phases\n */\nfunction getMoonPhases ( $year, $month ) {\n  global $DISPLAY_MOON_PHASES;\n  static $moons;\n\n  if ( empty ( $DISPLAY_MOON_PHASES ) || $DISPLAY_MOON_PHASES == 'N' )\n    return false;\n\n  if ( empty ( $moons ) && file_exists ( 'includes/moon_phases.php' ) ) {\n    include_once ( 'includes/moon_phases.php' );\n    $moons = calculateMoonPhases ( $year, $month );\n  }\n\n  return $moons;\n}\n\n/**\n * Calculate event rollover to next day and add partial event as needed.\n *\n * Create a cloned event on the fly as needed to display in next day slot.\n * The event times will be adjusted so that the total of all times will\n * equal the total time of the original event. This function will get called\n * recursively until all time has been accounted for.\n *\n * @param mixed $item    Event Object\n * @param int   $i       Current count of event array\n * @param bool  $parent  flag to keep track of the original event object\n *\n * $global array     $result        Array of events\n * @global string    (Y/N)          Do we want to use cross day display\n * @staticvar int    $realEndTS     The true end of the original event\n * @staticvar string $originalDate  The start date of the original event\n * @staticvar mixed  $originalItem  The original event object\n*/\nfunction getOverLap ( $item, $i, $parent = true ) {\n  global $DISABLE_CROSSDAY_EVENTS, $result;\n  static $originalDate, $originalItem, $realEndTS;\n\n  if ( $DISABLE_CROSSDAY_EVENTS == 'Y' )\n    return false;\n\n  $lt = localtime( $item->getDateTimeTS() );\n  $recurse = 0;\n\n  $midnight = gmmktime( - ( date( 'Z', $item->getDateTimeTS() ) / 3600 ),\n    0, 0, $lt[4] + 1, $lt[3] + 1, 1900 + $lt[5] );\n  if ( $parent ) {\n    $realEndTS = $item->getEndDateTimeTS();\n    $originalDate = $item->getDate();\n    $originalItem = $item;\n  }\n  $new_duration = ( $realEndTS - $midnight ) / 60;\n  if ( $new_duration > 1440 ) {\n    $new_duration = 1439;\n    $recurse = 1;\n  }\n  if ( $realEndTS > $midnight ) {\n    $result[$i] = clone ( $originalItem );\n    $result[$i]->setClone ( $originalDate );\n    $result[$i]->setDuration ( $new_duration );\n    $result[$i]->setTime ( gmdate ( 'G0000', $midnight ) );\n    $result[$i]->setDate ( gmdate ( 'Ymd', $midnight ) );\n    $result[$i]->setName( $originalItem->getName() . ' ('\n       . translate ( 'cont.' ) . ')' );\n\n    $i++;\n    if ( $parent )\n      $item->setDuration( ( ( $midnight - $item->getDateTimeTS() ) / 60 ) -1 );\n  }\n  // Call this function recursively until duration < ONE_DAY.\n  if ( $recurse == 1 )\n   getOverLap ( $result[$i -1], $i, false );\n}\n\n/**\n * Hack to implement clone() for php4.x.\n *\n * @param mixed  Event object\n *\n * @return mixed  Clone of the original object.\n */\nif( version_compare( phpversion(), '5.0' ) < 0 ) {\n  eval ( '\n    function clone ($item) {\n      return $item;\n    }\n    ' );\n}\n\n/**\n * Get the reminder data for a given entry id.\n *\n * @param int $id        cal_id of requested entry\n * @param bool $display  if true, will create a displayable string\n *\n * @return string $str       string to display Reminder value.\n * @return array  $reminder\n */\nfunction getReminders ( $id, $display = false ) {\n  $reminder = [];\n  $str = '';\n  // Get reminders.\n  $rows = dbi_get_cached_rows ( 'SELECT cal_id, cal_date, cal_offset,\n    cal_related, cal_before, cal_repeats, cal_duration, cal_action,\n    cal_last_sent, cal_times_sent FROM webcal_reminders\n  WHERE cal_id = ?\n  ORDER BY cal_date, cal_offset, cal_last_sent', [$id] );\n  if ( $rows ) {\n    $rowcnt = count ( $rows );\n    for ( $i = 0; $i < $rowcnt; $i++ ) {\n      $row = $rows[$i];\n      $reminder['id'] = $row[0];\n      if ( $row[1] != 0 ) {\n        $reminder['timestamp'] = $row[1];\n        $reminder['date'] = date ( 'Ymd', $row[1] );\n        $reminder['time'] = date ( 'His', $row[1] );\n      }\n      $reminder['offset'] = $row[2];\n      $reminder['related'] = $row[3];\n      $reminder['before'] = $row[4];\n      $reminder['repeats'] = $row[5];\n      $reminder['duration'] = $row[6];\n      $reminder['action'] = $row[7];\n      $reminder['last_sent'] = $row[8];\n      $reminder['times_sent'] = $row[9];\n    }\n    // Create display string if needed in user's timezone.\n    if ( ! empty ( $reminder ) && $display == true ) {\n      $str .= translate ( 'Yes' ) . '&nbsp;&nbsp;-&nbsp;&nbsp;';\n      if ( ! empty ( $reminder['date'] ) )\n        $str .= date ( 'Ymd', $reminder['timestamp'] );\n      else { // Must be an offset even if zero.\n        $d = $h = $minutes = 0;\n        if ( $reminder['offset'] > 0 ) {\n          $minutes = $reminder['offset'];\n          $d = intval ( $minutes / (24*60) );\n          $minutes -= ( $d * (24*60) );\n          $h = intval ( $minutes / 60 );\n          $minutes -= ( $h * 60 );\n        }\n        /*\nLet tools/update_translations.pl see these.\ntranslate ( 'after' ) translate ( 'before' ) translate ( 'end' )\ntranslate ( 'start' ) translate ( 'day' ) translate ( 'days' )\ntranslate ( 'hour' ) translate ( 'hours' ) translate ( 'minute' )\ntranslate ( 'minutes' )\n */\n        $str .= $d . ' ' . translate ( 'day'\n           . ( $d == 1 ? '' : 's' ) ) . ' ' . $h . ' ' . translate ( 'hour'\n           . ( $h = 1 ? '' : 's' ) ) . ' ' . $minutes . ' ' . translate ( 'minute'\n           . ( $minutes == 1 ? '' : 's' ) ) . ' '\n         . translate ( $reminder['before'] == 'Y'\n          ? 'before' : 'after' ) . ' ' . translate ( $reminder['related'] == 'S'\n          ? 'start' : 'end' );\n      }\n      return $str;\n    }\n  }\n  return $reminder;\n}\n\n/**\n * Remove :00 from times based on $DISPLAY_MINUTES value.\n *\n * @param string $timestr  time value to shorten\n *\n * @global string (Y/N)  Display 00 if on the hour\n */\nfunction getShortTime ( $timestr ) {\n  global $DISPLAY_MINUTES;\n\n  return ( empty ( $DISPLAY_MINUTES ) || $DISPLAY_MINUTES == 'N'\n    ? preg_replace ( '/(:00)/', '', $timestr ) : $timestr );\n}\n\n/**\n * Converts from Gregorian Year-Month-Day to ISO YearNumber-WeekNumber-WeekDay.\n *\n * @internal JGH borrowed gregorianToISO from PEAR Date_Calc Class and added\n *\n * $GLOBALS['WEEK_START'] (change noted)\n *\n * @param int $day    Day of month\n * @param int $month  Number of month\n * @param int $year   Year\n *\n * @return string  Date in ISO YearNumber-WeekNumber-WeekDay format.\n *\n * @ignore\n */\nfunction gregorianToISO ( $day, $month, $year ) {\n  global $WEEK_START;\n\n  $mnth = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  $y_isleap = isLeapYear ( $year );\n\n  $day_of_year_number = $day + $mnth[$month - 1];\n  if ( $y_isleap && $month > 2 )\n    $day_of_year_number++;\n\n  // Find Jan 1 weekday (Monday = 1, Sunday = 7).\n  $yy = ( $year - 1 ) % 100;\n  $jan1_weekday = 1 +\n  intval ( ( ( ( ( ( $year - 1 ) - $yy / 100 ) % 4 ) * 5 ) + $yy +\n      intval ( $yy / 4 ) ) % 7 );\n\n  // JGH added next if/else to compensate for week begins on Sunday.\n  if ( ! $WEEK_START ) {\n    if ( $jan1_weekday < 7 )\n      $jan1_weekday++;\n    elseif ( $jan1_weekday == 7 )\n      $jan1_weekday = 1;\n  }\n\n  // Weekday for year-month-day.\n  $weekday = 1 +\n  intval ( ( $day_of_year_number + ( $jan1_weekday - 1 ) - 1 ) % 7 );\n  $yearnumber = $year;\n  // Find if Y M D falls in YearNumber Y-1, WeekNumber 52.\n  if ( $day_of_year_number <= ( 8 - $jan1_weekday ) && $jan1_weekday > 4 ) {\n    $weeknumber = ( $jan1_weekday == 5 || ( $jan1_weekday == 6 &&\n        isLeapYear ( $year - 1 ) ) ? 53 : 52 );\n    $yearnumber--;\n  }\n\n  // Find if Y M D falls in YearNumber Y+1, WeekNumber 1.\n  if ( $yearnumber == $year ) {\n    $i = 365;\n    if ( $y_isleap )\n      $i++;\n\n    if ( ( $i - $day_of_year_number ) < ( 4 - $weekday ) ) {\n      $weeknumber = 1;\n      $yearnumber++;\n    }\n  }\n  // Find if Y M D falls in YearNumber Y, WeekNumber 1 through 53.\n  if ( $yearnumber == $year ) {\n    $weeknumber = intval ( ( $day_of_year_number + ( 7 - $weekday ) +\n        ( $jan1_weekday - 1 ) ) / 7 );\n    if ( $jan1_weekday > 4 )\n      $weeknumber--;\n  }\n  // Put it all together.\n  if ( $weeknumber < 10 )\n    $weeknumber = '0' . $weeknumber;\n\n  return \"{$yearnumber}-{$weeknumber}-{$weekday}\";\n}\n\n/**\n * Converts a hexadecimal digit to an integer.\n *\n * @param string $val Hexadecimal digit\n *\n * @return int Equivalent integer in base-10\n *\n * @ignore\n */\nfunction hextoint ( $val ) {\n  if ( empty ( $val ) )\n    return 0;\n\n  switch ( strtoupper ( $val ) ) {\n    case '0': return 0;\n    case '1': return 1;\n    case '2': return 2;\n    case '3': return 3;\n    case '4': return 4;\n    case '5': return 5;\n    case '6': return 6;\n    case '7': return 7;\n    case '8': return 8;\n    case '9': return 9;\n    case 'A': return 10;\n    case 'B': return 11;\n    case 'C': return 12;\n    case 'D': return 13;\n    case 'E': return 14;\n    case 'F': return 15;\n  }\n  return 0;\n}\n\n\n/**\n * Generates the HTML for an event to be viewed in the day-at-glance (day.php).\n *\n * The HTML will be stored in an array (global variable $hour_arr)\n * indexed on the event's starting hour.\n *\n * @param Event  $event  The event\n * @param string $date   Date of event in YYYYMMDD format\n */\nfunction html_for_event_day_at_a_glance ( $event, $date ) {\n  global $ALLOW_HTML_DESCRIPTION, $categories, $DISPLAY_DESC_PRINT_DAY,\n  $DISPLAY_END_TIMES, $first_slot, $hour_arr, $last_slot, $layers, $login,\n  $PHP_SELF, $rowspan, $rowspan_arr;\n  static $key = 0;\n\n  $can_access = CAN_DOALL;\n  $end_timestr = $popup_timestr = '';\n  $getCalTypeName = $event->getCalTypeName();\n  $getCat = abs( $event->getCategory() );\n  $getClone = $event->getClone();\n  $getDesc = $event->getDescription();\n  $getLogin = $event->getLogin();\n  $getPri = $event->getPriority();\n  $id = $event->getID();\n  $ind = 9999;\n  $isAllDay = $event->isAllDay();\n  $linkid = \"pop$id-$key\";\n  $name = $event->getName();\n  $time = $event->getTime();\n  $time_only = 'N';\n  $view_text = translate ( 'View this event' );\n\n  $catIcon = 'wc-icons/cat-' . $getCat . '.gif';\n  if ( ! file_exists ( $catIcon ) )\n    $catIcon = 'wc-icons/cat-' . $getCat . '.png';\n  $key++;\n\n  if( access_is_enabled() ) {\n    $can_access = access_user_calendar ( 'view', $getLogin, '',\n      $event->getCalType(), $event->getAccess() );\n    $time_only = access_user_calendar ( 'time', $getLogin );\n    if ( $getCalTypeName == 'task' && $can_access == 0 )\n      return false;\n  }\n\n  // If TZ_OFFSET make this event before the start of the day or\n  // after the end of the day, adjust the time slot accordingly.\n  if( ! $event->isUntimed() && ! $isAllDay && $getCalTypeName != 'task' ) {\n    $tz_time = date( 'His', $event->getDateTimeTS() );\n    $ind = calc_time_slot ( $tz_time );\n    if ( $ind < $first_slot )\n      $first_slot = $ind;\n\n    $tz_time2 = date( 'His', $event->getEndDateTimeTS() );\n    $ind2 = calc_time_slot ( $tz_time2 );\n    if ( $ind2 > $last_slot )\n      $last_slot = $ind2;\n  }\n  if ( empty ( $hour_arr[$ind] ) )\n    $hour_arr[$ind] = '';\n\n  $class = ( $login != $getLogin && strlen ( $getLogin )\n    ? 'layer' : ( $event->getStatus() == 'W' ? 'unapproved' : '' ) ) . 'entry';\n  // If we are looking at a view, then always use \"entry\".\n  if ( strstr ( $PHP_SELF, 'view_m.php' ) ||\n      strstr ( $PHP_SELF, 'view_t.php' ) ||\n      strstr ( $PHP_SELF, 'view_v.php' ) ||\n      strstr ( $PHP_SELF, 'view_w.php' ) )\n    $class = 'entry';\n\n  if ( $getCat > 0 && file_exists ( $catIcon ) ) {\n    $catAlt = translate ( 'Category' ) . ': ' . $categories[$getCat]['cat_name'];\n    $hour_arr[$ind] .= '<img src=\"' . $catIcon . '\" alt=\"' . $catAlt\n     . '\" title=\"' . $catAlt . '\" />';\n  }\n\n  if ( $getCalTypeName == 'task' ) {\n    $hour_arr[$ind] .= '<img src=\"images/bootstrap-icons/circle-fill.svg\" class=\"bullet\" alt=\"*\" /> ';\n    $view_text = translate ( 'View this task' );\n  }\n\n  $hour_arr[$ind] .= '<a title=\"' . $view_text . '\" class=\"' . $class . '\" id=\"'\n   . $linkid . '\" '\n  // Make sure clones have parents URL date.\n  . ( $can_access != 0 && $time_only != 'Y'\n    ? 'href=\"view_entry.php?id=' . $id . '&amp;date='\n     . ( $getClone ? $getClone : $date )\n     . ( strlen ( $GLOBALS['user'] ) > 0\n      ? '&amp;user=' . $GLOBALS['user']\n      : ( $class == 'layerentry' ? '&amp;user=' . $getLogin : '' ) ) . '\"'\n    : '' ) . '>' . ( $getPri == 3 ? '<strong>' : '' );\n\n  if ( $login != $getLogin && strlen ( $getLogin ) ) {\n    if ( $layers ) {\n      foreach ( $layers as $layer ) {\n        if ( $layer['cal_layeruser'] == $getLogin ) {\n          $hour_arr[$ind] .= '<span style=\"color:' . $layer['cal_color'] . ';\">';\n          $in_span = true;\n        }\n      }\n    }\n    // Check to see if Category Colors are set.\n  } else\n  if ( ! empty ( $categories[$getCat]['cat_color'] ) ) {\n    $cat_color = $categories[$getCat]['cat_color'];\n    if ( $cat_color != '#000000' ) {\n      $hour_arr[$ind] .= '<span style=\"color:' . $cat_color . ';\">';\n      $in_span = true;\n    }\n  }\n\n  if ( $isAllDay )\n    $hour_arr[$ind] .= '[' . translate ( 'All day event' ) . '] ';\n  else\n  if ( $time >= 0 && ! $isAllDay && $getCalTypeName != 'task' ) {\n    $end_timestr = '-' . display_time( $event->getEndDateTime() );\n    $popup_timestr = display_time( $event->getDatetime() );\n\n    $hour_arr[$ind] .= '[' . $popup_timestr;\n    if( $event->getDuration() > 0 ) {\n      $popup_timestr .= $end_timestr;\n      if ( $DISPLAY_END_TIMES == 'Y' )\n        $hour_arr[$ind] .= $end_timestr;\n      // Which slot is end time in? take one off so we don't\n      // show 11:00-12:00 as taking up both 11 and 12 slots.\n      $end_time = date( 'His', $event->getEndDateTimeTS() );\n      // This fixes the improper display if an event ends at or after midnight.\n      if ( $end_time < $tz_time )\n        $end_time += 240000;\n\n      $endind = calc_time_slot ( $end_time, true );\n      $rowspan = ( $endind == $ind ? 0 : $endind - $ind + 1 );\n\n      if ( ! isset ( $rowspan_arr[$ind] ) )\n        $rowspan_arr[$ind] = 0;\n\n      if ( $rowspan > $rowspan_arr[$ind] && $rowspan > 1 )\n        $rowspan_arr[$ind] = $rowspan;\n    }\n  $hour_arr[$ind] .= '] ';\n  }\n  $hour_arr[$ind] .= build_entry_label ( $event, 'eventinfo-' . $linkid,\n    $can_access, $popup_timestr, $time_only )\n   . ( $getPri == 3 ? '</strong>' : '' ) . '</a>'\n   . ( $DISPLAY_DESC_PRINT_DAY == 'Y' ? '\n    <dl class=\"desc\">\n      <dt>' . translate ( 'Description' ) . ':</dt>\n      <dd>'\n     . ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y'\n      ? $getDesc : strip_tags ( $getDesc ) ) . '</dd>\n    </dl>' : '' ) . \"<br />\\n\";\n}\n\n/**\n * Generates the HTML for an event to be viewed in the week-at-glance (week.php).\n *\n * The HTML will be stored in an array (global variable $hour_arr)\n * indexed on the event's starting hour.\n *\n * @param Event  $event           The event\n * @param string $date            Date for which we're printing (in YYYYMMDD format)\n * @param string $override_class  If set, then this is the class to use\n * @param bool   $show_time       If enabled, then event time is displayed\n */\nfunction html_for_event_week_at_a_glance ( $event, $date,\n  $override_class = '', $show_time = true ) {\n  global $categories, $DISPLAY_ICONS, $DISPLAY_TZ, $eventinfo, $first_slot,\n  $hour_arr, $is_assistant, $is_nonuser_admin, $last_slot, $layers, $login,\n  $PHP_SELF, $rowspan, $rowspan_arr, $TIME_SPACER, $user;\n  static $key = 0;\n\n  $can_access = CAN_DOALL;\n  $catAlt = $href = $timestr = '';\n  $getCalTypeName = $event->getCalTypeName();\n  $getCat = abs( $event->getCategory() );\n  $getClone = $event->getClone();\n  $getDatetime = $event->getDatetime();\n  $getLoginStr = $event->getLogin();\n  $getPri = $event->getPriority();\n  $id = $event->getID();\n  $ind = 9999;\n  $isAllDay = $event->isAllDay();\n  $isUntime = $event->isUntimed();\n  $linkid = \"pop$id-$key\";\n  $name = $event->getName();\n  $time_only = 'N';\n  $title = '<a title=\"';\n\n  $catIcon = 'wc-icons/cat-' . $getCat . '.gif';\n  if ( ! file_exists ( $catIcon ) )\n    $catIcon = 'wc-icons/cat-' . $getCat . '.png';\n  $key++;\n\n  if( access_is_enabled() ) {\n    $can_access = access_user_calendar ( 'view', $getLoginStr, '',\n      $event->getCalType(), $event->getAccess() );\n    $time_only = access_user_calendar ( 'time', $getLoginStr );\n    if ( $getCalTypeName == 'task' && $can_access == 0 )\n      return false;\n  }\n\n  // Figure out which time slot it goes in. Put tasks in with AllDay and Untimed.\n  if ( ! $isUntime && ! $isAllDay && $getCalTypeName != 'task' ) {\n    $tz_time = date( 'His', $event->getDateTimeTS() );\n    $ind = calc_time_slot ( $tz_time );\n    if ( $ind < $first_slot )\n      $first_slot = $ind;\n\n    if ( $ind > $last_slot )\n      $last_slot = $ind;\n  }\n\n  $class = ( $login != $getLoginStr && strlen ( $getLoginStr )\n    ? 'layer' : ( $event->getStatus() == 'W' ? 'unapproved' : '' ) ) . 'entry';\n  // If we are looking at a view, then always use \"entry\".\n  if ( strstr ( $PHP_SELF, 'view_m.php' ) ||\n      strstr ( $PHP_SELF, 'view_r.php' ) ||\n      strstr ( $PHP_SELF, 'view_t.php' ) ||\n      strstr ( $PHP_SELF, 'view_v.php' ) ||\n      strstr ( $PHP_SELF, 'view_w.php' ) )\n    $class = 'entry';\n\n  if ( ! empty ( $override_class ) )\n    $class .= ' ' . $override_class;\n\n  // Avoid PHP warning for undefined array index.\n  if ( empty ( $hour_arr[$ind] ) )\n    $hour_arr[$ind] = '';\n\n  if ( $getCat > 0 && file_exists ( $catIcon ) ) {\n    $catAlt = translate ( 'Category' ) . ': ' . $categories[$getCat]['cat_name'];\n    $hour_arr[$ind] .= '<img src=\"' . $catIcon . '\" alt=\"' . $catAlt\n     . '\" title=\"' . $catAlt . '\" />';\n  }\n\n  // Build entry link if UAC permits viewing.\n  if ( $can_access != 0 && $time_only != 'Y' ) {\n    // Make sure clones have parents URL date.\n    $href = 'href=\"view_entry.php?id=' . $id . '&amp;date='\n     . ( $getClone ? $getClone : $date );\n    if ( $getCalTypeName == 'task' ) {\n      $hour_arr[$ind] .= '<img src=\"images/bootstrap-icons/circle-fill.svg\" class=\"bullet\" alt=\"*\" /> ';\n\n      $title .= translate ( 'View this task' );\n    } else { // Must be event.\n      if ( $isAllDay || $isUntime && $catAlt == '' )\n        $hour_arr[$ind] .= '<img src=\"images/bootstrap-icons/circle-fill.svg\" class=\"bullet\" alt=\"*\" /> ';\n\n      $title .= translate ( 'View this event' );\n    }\n  }\n\n  $hour_arr[$ind] .= $title . '\" class=\"' . $class . '\" id=\"' . $linkid . '\" '\n   . $href . ( strlen ( $GLOBALS['user'] ) > 0\n    ? '&amp;user=' . $GLOBALS['user']\n    : ( $class == 'layerentry' ? '&amp;user=' . $getLoginStr : '' ) ) . '\">'\n   . ( $getPri == 3 ? '<strong>' : '' );\n\n  if ( $login != $getLoginStr && strlen ( $getLoginStr ) ) {\n    if ( $layers ) {\n      foreach ( $layers as $layer ) {\n        if ( $layer['cal_layeruser'] == $getLoginStr ) {\n          $hour_arr[$ind] .= '<span style=\"color:' . $layer['cal_color'] . ';\">';\n          $in_span = true;\n        }\n      }\n    }\n    // Check to see if Category Colors are set.\n  } else\n  if ( ! empty ( $categories[$getCat]['cat_color'] ) ) {\n    $cat_color = $categories[$getCat]['cat_color'];\n    if ( $cat_color != '#000000' ) {\n      $hour_arr[$ind] .= '<span style=\"color:' . $cat_color . ';\">';\n      $in_span = true;\n    }\n  }\n  if ( $isAllDay ) {\n    $timestr = translate ( 'All day event' );\n    // Set start cell of all-day event to beginning of work hours.\n    if ( empty ( $rowspan_arr[$first_slot] ) )\n      $rowspan_arr[$first_slot] = 0; // Avoid warning below.\n    // We'll skip tasks here as well.\n  } else\n  if ( $event->getTime() >= 0 && $getCalTypeName != 'task' ) {\n    if ( $show_time )\n      $hour_arr[$ind] .= display_time ( $getDatetime )\n       . ( $time_only == 'Y' ? '' : $TIME_SPACER );\n\n    $timestr = display_time ( $getDatetime );\n    if( $event->getDuration() > 0 ) {\n      $end_time = date( 'His', $event->getEndDateTimeTS() );\n      $timestr .= '-' . display_time( $event->getEndDateTime(), $DISPLAY_TZ );\n      // This fixes the improper display if an event ends at or after midnight.\n      if ( $end_time < $tz_time )\n        $end_time += 240000;\n    } else\n      $end_time = 0;\n\n    if ( empty ( $rowspan_arr[$ind] ) )\n      $rowspan_arr[$ind] = 0; // Avoid warning below.\n\n    // Which slot is end time in? take one off so we don't\n    // show 11:00-12:00 as taking up both 11 and 12 slots.\n    $endind = calc_time_slot ( $end_time, true );\n    $rowspan = ( $endind == $ind ? 0 : $endind - $ind + 1 );\n\n    if ( $rowspan > $rowspan_arr[$ind] && $rowspan > 1 )\n      $rowspan_arr[$ind] = $rowspan;\n  }\n\n  $hour_arr[$ind] .= build_entry_label ( $event, 'eventinfo-' . $linkid,\n    $can_access, $timestr, $time_only )\n   . ( empty ( $in_span ) ? '' : '</span>' )// End color span.\n   . ( $getPri == 3 ? '</strong>' : '' ) . '</a>'\n  // . ( $DISPLAY_ICONS == 'Y' ? icon_text ( $id, true, true ) : '' )\n  . \"<br />\\n\";\n}\n\n/**\n * Converts HTML entities in 8bit.\n *\n * <b>Note:</b> Only supported for PHP4 (not PHP3).\n *\n * @param string $html  HTML text\n *\n * @return string  The converted text.\n */\nfunction html_to_8bits ( $html ) {\n  return ( floor( phpversion() ) < 4\n   ? $html\n   : strtr ( $html, array_flip ( get_html_translation_table ( HTML_ENTITIES ) ) ) );\n}\n\n/**\n * Determine if date is a weekend\n *\n * @param int $date  Timestamp of subject date OR a weekday number 0-6\n *\n * @return bool  True = Date is weekend\n */\nfunction is_weekend ( $date ) {\n  global $WEEKEND_START;\n\n  // We can't test for empty because $date may equal 0.\n  if ( ! strlen ( $date ) )\n    return false;\n\n  if ( ! isset ( $WEEKEND_START ) )\n    $WEEKEND_START = 6;\n\n  // We may have been passed a weekday 0-6.\n  if ( $date < 7 )\n    return ( $date == $WEEKEND_START % 7 || $date == ( $WEEKEND_START + 1 ) % 7 );\n\n  // We were passed a timestamp.\n  $wday = date ( 'w', $date );\n  return ( $wday == $WEEKEND_START % 7 || $wday == ( $WEEKEND_START + 1 ) % 7 );\n}\n\n/**\n * Is this a leap year?\n *\n * @internal JGH Borrowed isLeapYear from PEAR Date_Calc Class\n *\n * @param int $year  Year\n *\n * @return bool  True for a leap year, else false.\n *\n * @ignore\n */\nfunction isLeapYear ( $year = '' ) {\n  if ( empty ( $year ) )\n    $year = strftime( '%Y', time() );\n\n  if ( strlen ( $year ) != 4 || preg_match ( '/\\D/', $year ) )\n    return false;\n\n  return ( ( $year % 4 == 0 && $year % 100 != 0 ) || $year % 400 == 0 );\n}\n\n/**\n * Loads default system settings (which can be updated via admin.php).\n *\n * System settings are stored in the webcal_config table.\n *\n * <b>Note:</b> If the setting for <var>server_url</var> is not set,\n * the value will be calculated and stored in the database.\n *\n * @global string  User's login name\n * @global bool    Readonly\n * @global string  HTTP hostname\n * @global int     Server's port number\n * @global string  Request string\n * @global array   Server variables\n */\nfunction load_global_settings() {\n  global $_SERVER, $APPLICATION_NAME, $FONTS, $HTTP_HOST,\n  $LANGUAGE, $REQUEST_URI, $SERVER_PORT, $SERVER_URL;\n\n  // Note:  When running from the command line (send_reminders.php),\n  // these variables are (obviously) not set.\n  // TODO:  This type of checking should be moved to a central location\n  // like init.php.\n  if ( isset ( $_SERVER ) && is_array ( $_SERVER ) ) {\n    if ( empty ( $HTTP_HOST ) && isset ( $_SERVER['HTTP_HOST'] ) )\n      $HTTP_HOST = $_SERVER['HTTP_HOST'];\n\n    if ( empty ( $SERVER_PORT ) && isset ( $_SERVER['SERVER_PORT'] ) )\n      $SERVER_PORT = $_SERVER['SERVER_PORT'];\n\n    if ( ! isset ( $_SERVER['REQUEST_URI'] ) ) {\n      $arr = explode ( '/', $_SERVER['PHP_SELF'] );\n      $_SERVER['REQUEST_URI'] = '/' . $arr[count ( $arr )-1];\n      if ( isset ( $_SERVER['argv'][0] ) && $_SERVER['argv'][0] != '' )\n        $_SERVER['REQUEST_URI'] .= '?' . $_SERVER['argv'][0];\n    }\n    if ( empty ( $REQUEST_URI ) && isset ( $_SERVER['REQUEST_URI'] ) )\n      $REQUEST_URI = $_SERVER['REQUEST_URI'];\n\n    // Hack to fix up IIS.\n    if ( isset ( $_SERVER['SERVER_SOFTWARE'] ) &&\n        strstr ( $_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS' ) &&\n        isset ( $_SERVER['SCRIPT_NAME'] ) )\n      $REQUEST_URI = $_SERVER['SCRIPT_NAME'];\n  }\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_setting, cal_value\n    FROM webcal_config' );\n  for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n    $row = $rows[$i];\n    $setting = $row[0];\n    $GLOBALS[$setting] = $value = $row[1];\n  }\n\n  // Set SERVER TIMEZONE.\n  if ( empty ( $GLOBALS['TIMEZONE'] ) )\n    $GLOBALS['TIMEZONE'] = $GLOBALS['SERVER_TIMEZONE'];\n\n  set_env ( 'TZ', $GLOBALS['TIMEZONE'] );\n  if ( empty ( $tzInitSet ) ) {\n    if ( function_exists ( \"date_default_timezone_set\" ) )\n      date_default_timezone_set ( $GLOBALS['TIMEZONE'] );\n  }\n\n  // If app name not set.... default to \"Title\". This gets translated later\n  // since this function is typically called before translate.php is included.\n  // Note:  We usually use translate ( $APPLICATION_NAME ) instead of\n  // translate ( 'Title' ).\n  if ( empty ( $APPLICATION_NAME ) )\n    $APPLICATION_NAME = 'Title';\n\n  if ( empty ( $SERVER_URL ) &&\n      ( ! empty ( $HTTP_HOST ) && ! empty ( $REQUEST_URI ) ) ) {\n    $ptr = strrpos ( $REQUEST_URI, '/' );\n    if ( $ptr > 0 ) {\n      $SERVER_URL = 'http://' . $HTTP_HOST\n       . ( ! empty ( $SERVER_PORT ) && $SERVER_PORT != 80\n        ? ':' . $SERVER_PORT : '' )\n       . substr ( $REQUEST_URI, 0, $ptr + 1 );\n\n      dbi_execute ( 'INSERT INTO webcal_config ( cal_setting, cal_value )\n        VALUES ( ?, ? )', ['SERVER_URL', $SERVER_URL] );\n    }\n  }\n\n  // If no font settings, then set default.\n  if ( empty ( $FONTS ) )\n    $FONTS = ( $LANGUAGE == 'Japanese' ? 'Osaka, ' : '' )\n     . 'Arial, Helvetica, sans-serif';\n}\n\n/**\n * Loads nonuser preferences from the webcal_user_pref table\n * if on a nonuser admin page.\n *\n * @param string $nonuser  Login name for nonuser calendar\n */\nfunction load_nonuser_preferences ( $nonuser ) {\n  global $DATE_FORMAT, $DATE_FORMAT_MD, $DATE_FORMAT_MY, $prefarray;\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_setting, cal_value\n  FROM webcal_user_pref\n  WHERE cal_login = ?', [$nonuser] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $setting = $row[0];\n      $value = $row[1];\n      // $sys_setting = 'sys_' . $setting;\n      // save system defaults\n      // ** Don't override ones set by load_user_prefs.\n      if ( ! empty ( $GLOBALS[$setting] ) && empty ( $GLOBALS['sys_' . $setting] ) )\n        $GLOBALS['sys_' . $setting] = $GLOBALS[$setting];\n\n      $GLOBALS[$setting] = $prefarray[$setting] = $value;\n    }\n  }\n\n  if ( empty ( $DATE_FORMAT ) || $DATE_FORMAT == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT = translate ( '__month__ __dd__, __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MY ) || $DATE_FORMAT_MY == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MY = translate ( '__month__ __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MD ) || $DATE_FORMAT_MD == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MD = translate ( '__month__ __dd__' );\n}\n\n/**\n * Returns a custom header, stylesheet or tailer.\n *\n * The data will be loaded from the webcal_user_template table.\n * If the global variable $ALLOW_EXTERNAL_HEADER is set to 'Y',\n * then we load an external file using include.\n * This can have serious security issues since a\n * malicous user could open up /etc/passwd.\n *\n * @param string $login  Current user login\n * @param string $type   type of template\n *                       ('H' = header, 'S' = stylesheet, 'T' = trailer)\n */\nfunction load_template ( $login, $type ) {\n  global $ALLOW_EXTERNAL_HEADER, $ALLOW_USER_HEADER;\n\n  $found = false;\n  $ret = '';\n\n  // First, check for a user-specific template.\n  $sql = 'SELECT cal_template_text FROM webcal_user_template\n    WHERE cal_type = ? and cal_login = ';\n  if ( ! empty ( $ALLOW_USER_HEADER ) && $ALLOW_USER_HEADER == 'Y' ) {\n    $rows = dbi_get_cached_rows ( $sql . '?', [$type, $login] );\n    if ( $rows && ! empty ( $rows[0] ) ) {\n      $row = $rows[0];\n      $ret .= $row[0];\n      $found = true;\n    }\n  }\n\n  // If no user-specific template, check for the system template.\n  if ( ! $found ) {\n    $rows = dbi_get_cached_rows ( $sql . '\"__system__\"', [$type] );\n    if ( $rows && ! empty ( $rows[0] ) ) {\n      $row = $rows[0];\n      $ret .= $row[0];\n      $found = true;\n    }\n  }\n\n  // If still not found, the check the old location (WebCalendar 1.0 and before).\n  if ( ! $found ) {\n    $rows = dbi_get_cached_rows ( 'SELECT cal_template_text\n      FROM webcal_report_template\n  WHERE cal_template_type = ?\n    AND cal_report_id = 0', [$type] );\n    if ( $rows && ! empty ( $rows[0] ) ) {\n      $row = $rows[0];\n      if ( ! empty ( $row ) ) {\n        $ret .= $row[0];\n        $found = true;\n      }\n    }\n  }\n\n\n  // Strip leading and trailing white space in file name candidate.\n  $file = preg_replace ('/^\\s*/', '', $ret);\n  $file = preg_replace ('/\\s*$/', '', $file);\n\n  if ( $found &&\n    ( ! empty ( $ALLOW_EXTERNAL_HEADER ) && $ALLOW_EXTERNAL_HEADER == 'Y' ) &&\n      file_exists ( $file ) ) {\n// Craig. Why not just do $ret = file_get_contents ( $file ) here?\n    ob_start();\n    include \"$file\";\n    $ret = ob_get_contents();\n    ob_end_clean();\n  }\n\n  return $ret;\n}\n\n/**\n * Loads current user's category info and stuff it into category global variable.\n *\n * @param string $ex_global Don't include global categories ('' or '1')\n */\nfunction load_user_categories ( $ex_global = '' ) {\n  global $categories, $CATEGORIES_ENABLED,\n  $is_admin, $is_assistant, $login, $user;\n\n  $categories = [];\n  // These are default values.\n  $categories[0]['cat_name'] = translate ( 'All' );\n  $categories[-1]['cat_name'] = translate ( 'None' );\n  if ( $CATEGORIES_ENABLED == 'Y' ) {\n    $query_params = [];\n    $query_params[] = ( ( ! empty ( $user ) && strlen ( $user ) ) &&\n      ( $is_assistant || $is_admin ) ? $user : $login );\n    $rows = dbi_get_cached_rows ( 'SELECT cat_id, cat_name, cat_owner, cat_color\n      FROM webcal_categories WHERE ( cat_owner = ? ) ' . ( $ex_global == ''\n        ? 'OR ( cat_owner IS NULL ) ORDER BY cat_owner,' : 'ORDER BY' )\n       . ' cat_name', $query_params );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $categories[$row[0]] = [\n          'cat_name' => $row[1],\n          'cat_owner' => $row[2],\n          'cat_global' => empty ( $row[2] ) ? 1 : 0,\n          'cat_color' => ( empty ( $row[3] ) ? '#000000' : $row[3] )];\n      }\n    }\n  }\n}\n\n/**\n * Loads current user's layer info into layer global variable.\n *\n * If the system setting <var>$ALLOW_VIEW_OTHER</var> is not set to 'Y', then\n * we ignore all layer functionality. If <var>$force</var> is 0, we only load\n * layers if the current user preferences have layers turned on.\n *\n * @param string $user   Username of user to load layers for\n * @param int    $force  If set to 1, then load layers for this user even if\n *                       user preferences have layers turned off.\n */\nfunction load_user_layers ( $user = '', $force = 0 ) {\n  global $ALLOW_VIEW_OTHER, $layers, $LAYERS_STATUS, $login;\n\n  if ( $user == '' )\n    $user = $login;\n\n  $layers = [];\n\n  if ( empty ( $ALLOW_VIEW_OTHER ) || $ALLOW_VIEW_OTHER != 'Y' )\n    return; // Not allowed to view others' calendars, so cannot use layers.\n  if ( $force || ( ! empty ( $LAYERS_STATUS ) && $LAYERS_STATUS != 'N' ) ) {\n    $rows = dbi_get_cached_rows ( 'SELECT cal_layerid, cal_layeruser, cal_color,\n      cal_dups FROM webcal_user_layers WHERE cal_login = ? ORDER BY cal_layerid',\n      [$user] );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $layers[$row[0]] = [\n          'cal_layerid' => $row[0],\n          'cal_layeruser' => $row[1],\n          'cal_color' => $row[2],\n          'cal_dups' => $row[3]];\n      }\n    }\n  }\n}\n\n/**\n * Loads the current user's preferences as global variables\n * from the webcal_user_pref table.\n *\n * Also loads the list of views for this user\n * (not really a preference, but this is a convenient place to put this...)\n *\n * <b>Notes:</b>\n * - If <var>$ALLOW_COLOR_CUSTOMIZATION</var> is set to 'N', then we ignore any\n *   color preferences.\n * - Other default values will also be set if the user has not saved a\n *   preference and no global value has been set by the administrator in the\n *   system settings.\n */\nfunction load_user_preferences ( $guest = '' ) {\n  global $ALLOW_COLOR_CUSTOMIZATION, $browser, $DATE_FORMAT, $DATE_FORMAT_MD,\n  $DATE_FORMAT_MY, $DATE_FORMAT_TASK, $has_boss, $is_assistant, $is_nonuser,\n  $is_nonuser_admin, $lang_file, $LANGUAGE, $login, $prefarray, $user, $views;\n\n  $browser = get_web_browser();\n  $browser_lang = get_browser_language();\n  $colors = [\n    'BGCOLOR' => 1,\n    'CELLBG' => 1,\n    'H2COLOR' => 1,\n    'HASEVENTSBG' => 1,\n    'MYEVENTS' => 1,\n    'OTHERMONTHBG' => 1,\n    'POPUP_BG' => 1,\n    'POPUP_FG' => 1,\n    'TABLEBG' => 1,\n    'TEXTCOLOR' => 1,\n    'THBG' => 1,\n    'THFG' => 1,\n    'TODAYCELLBG' => 1,\n    'WEEKENDBG' => 1,\n    'WEEKNUMBER' => 1];\n  $lang_found = false;\n  $prefarray = [];\n  // Allow __public__ pref to be used if logging in or user not validated.\n  $tmp_login = ( empty ( $guest )\n    ? $login : ( $guest == 'guest' ? '__public__' : $guest ) );\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_setting, cal_value\n  FROM webcal_user_pref\n  WHERE cal_login = ?', [$tmp_login] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $setting = $row[0];\n      $value = $row[1];\n\n      if ( $setting == 'LANGUAGE' )\n        $lang_found = true;\n\n      if ( $ALLOW_COLOR_CUSTOMIZATION == 'N' &&\n        isset ( $colors[$setting] ) )\n        continue;\n\n      // $sys_setting = 'sys_' . $setting;\n      // Save system defaults.\n      if ( ! empty ( $GLOBALS[$setting] ) )\n        $GLOBALS['sys_' . $setting] = $GLOBALS[$setting];\n\n      $GLOBALS[$setting] = $prefarray[$setting] = $value;\n    }\n  }\n\n  // Set users timezone.\n  if ( isset ( $GLOBALS['TIMEZONE'] ) )\n    set_env ( 'TZ', $GLOBALS['TIMEZONE'] );\n\n  // Get views for this user and global views.\n  // If NUC and not authorized by UAC, disallow global views.\n  $rows = dbi_get_cached_rows ( 'SELECT cal_view_id, cal_name, cal_view_type,\n    cal_is_global, cal_owner FROM webcal_view WHERE cal_owner = ? '\n     . ( $is_nonuser && ( ! access_is_enabled() ||\n        ( access_is_enabled()\n          && ! access_can_access_function( ACCESS_VIEW, $guest ) ) )\n      ? '' : ' OR cal_is_global = \\'Y\\' ' )\n     . 'ORDER BY cal_name', [$tmp_login] );\n  $views = [];\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $url = 'view_';\n      if ( $row[2] == 'E' )\n        $url .= 'r.php?';\n      elseif ( $row[2] == 'S' )\n        $url .= 't.php?';\n      elseif ( $row[2] == 'T' )\n        $url .= 't.php?';\n      else\n        $url .= strtolower ( $row[2] ) . '.php?';\n\n      $v = [\n        'cal_view_id' => $row[0],\n        'cal_name' => $row[1],\n        'cal_view_type' => $row[2],\n        'cal_is_global' => $row[3],\n        'cal_owner' => $row[4],\n        'url' => $url . 'id=' . $row[0]];\n      $views[] = $v;\n    }\n  }\n\n  // If user has not set a language preference and admin has not specified a\n  // language, then use their browser settings to figure it out\n  // and save it in the database for future use (email reminders).\n  $lang = 'none';\n  if ( ! $lang_found && strlen ( $tmp_login ) && $tmp_login != '__public__' ) {\n    if ( $LANGUAGE == 'none' )\n      $lang = $browser_lang;\n\n    dbi_execute ( 'INSERT INTO webcal_user_pref ( cal_login, cal_setting,\n     cal_value ) VALUES ( ?, ?, ? )', [$tmp_login, 'LANGUAGE', $lang] );\n  }\n  reset_language ( ! empty ( $LANGUAGE ) && $LANGUAGE != 'none'\n    ? $LANGUAGE : $browser_lang );\n\n  if ( empty ( $DATE_FORMAT ) || $DATE_FORMAT == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT = translate ( '__month__ __dd__, __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MY ) || $DATE_FORMAT_MY == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MY = translate ( '__month__ __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MD ) || $DATE_FORMAT_MD == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MD = translate ( '__month__ __dd__' );\n\n  if ( empty ( $DATE_FORMAT_TASK ) || $DATE_FORMAT_TASK == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_TASK = translate ( '__mm__/__dd__/__yyyy__' );\n\n  $has_boss = user_has_boss ( $tmp_login );\n  $is_assistant = ( empty ( $user )\n    ? false : user_is_assistant ( $tmp_login, $user ) );\n  $is_nonuser_admin = ( $user\n    ? user_is_nonuser_admin ( $tmp_login, $user ) : false );\n  // if ( $is_nonuser_admin ) load_nonuser_preferences ($user);\n\n}\n\n/**\n * Returns the either the full name or the abbreviation of the specified month.\n *\n * @param int     $m       Number of the month (0-11)\n * @param string  $format  'F' = full, 'M' = abbreviation\n *\n * @return string The name of the specified month.\n */\nfunction month_name ( $m, $format = 'F' ) {\n  global $lang;\n  static $local_lang, $month_names, $monthshort_names;\n  //.\n  // We may have switched languages.\n  if ( $local_lang != $lang )\n    $month_names = $monthshort_names = [];\n\n  $local_lang = $lang;\n\n  if ( empty ( $month_names[0] ) || empty ( $monthshort_names[0] ) ) {\n    $month_names = [\n      translate ( 'January' ),\n      translate ( 'February' ),\n      translate ( 'March' ),\n      translate ( 'April' ),\n      translate ( 'May_' ), // needs to be different than \"May\",\n      translate ( 'June' ),\n      translate ( 'July' ),\n      translate ( 'August' ),\n      translate ( 'September' ),\n      translate ( 'October' ),\n      translate ( 'November' ),\n      translate ( 'December' )];\n\n    $monthshort_names = [\n      translate ( 'Jan' ),\n      translate ( 'Feb' ),\n      translate ( 'Mar' ),\n      translate ( 'Apr' ),\n      translate ( 'May' ),\n      translate ( 'Jun' ),\n      translate ( 'Jul' ),\n      translate ( 'Aug' ),\n      translate ( 'Sep' ),\n      translate ( 'Oct' ),\n      translate ( 'Nov' ),\n      translate ( 'Dec' )];\n  }\n\n  if ( $m >= 0 && $m < 12 )\n    return ( $format == 'F' ? $month_names[$m] : $monthshort_names[$m] );\n\n  return translate ( 'unknown-month' ) . \" ($m)\";\n}\n\n/**\n * Loads nonuser variables (login, firstname, etc.).\n *\n * The following variables will be set:\n * - <var>login</var>\n * - <var>firstname</var>\n * - <var>lastname</var>\n * - <var>fullname</var>\n * - <var>admin</var>\n * - <var>email</var>\n *\n * @param string $login   Login name of nonuser calendar\n * @param string $prefix  Prefix to use for variables that will be set.\n *                        For example, if prefix is \"temp_\", then the login will\n *                        be stored in the <var>$temp_login</var> global variable.\n */\nfunction nonuser_load_variables ( $login, $prefix ) {\n  global $error, $nuloadtmp_email;\n\n  $ret = false;\n  $rows = dbi_get_cached_rows ( 'SELECT cal_login, cal_lastname, cal_firstname,\n    cal_admin, cal_is_public, cal_url FROM webcal_nonuser_cals\n  WHERE cal_login = ?', [$login] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $GLOBALS[$prefix . 'fullname'] = ( strlen ( $row[1] ) || strlen ( $row[2] )\n        ? \"$row[2] $row[1]\" : $row[0] );\n      $GLOBALS[$prefix . 'login'] = $row[0];\n      $GLOBALS[$prefix . 'lastname'] = $row[1];\n      $GLOBALS[$prefix . 'firstname'] = $row[2];\n      $GLOBALS[$prefix . 'fullname'] = trim($row[1] . ' ' . $row[2]);\n      $GLOBALS[$prefix . 'admin'] = $row[3];\n      $GLOBALS[$prefix . 'is_public'] = $row[4];\n      $GLOBALS[$prefix . 'url'] = $row[5];\n      $GLOBALS[$prefix . 'is_admin'] = false;\n      $GLOBALS[$prefix . 'is_nonuser'] = true;\n      // We need the email address for the admin.\n      user_load_variables ( $row[3], 'nuloadtmp_' );\n      $GLOBALS[$prefix . 'email'] = $nuloadtmp_email;\n      $ret = true;\n    }\n  }\n  return $ret;\n}\n\n/**\n * Prints dropdown HTML for categories.\n *\n * @param string $form    The page to submit data to (without .php)\n * @param string $date    Date in YYYYMMDD format\n * @param int    $cat_id  Category id that should be pre-selected\n */\nfunction print_category_menu ( $form, $date = '', $cat_id = '' ) {\n  global $categories, $login, $user, $CATEGORIES_ENABLED;\n\n  if ( empty( $CATEGORIES_ENABLED ) || $CATEGORIES_ENABLED == 'N' )\n    return false;\n\n  $catStr = translate ( 'Category' );\n  $printerStr = '';\n  $ret = '\n    <form action=\"' . $form . '.php\" method=\"get\" name=\"SelectCategory\" '\n   . 'class=\"categories\">' . ( empty ( $date ) ? '' : '\n      <input type=\"hidden\" name=\"' . ( $form != 'year' ? 'date' : 'year' )\n     . '\" value=\"' . $date . '\" />' )\n   . ( ! empty ( $user ) && $user != $login ? '\n      <input type=\"hidden\" name=\"user\" value=\"' . $user . '\" />' : '' )\n   . $catStr . ':\n      <select name=\"cat_id\" onchange=\"document.SelectCategory.submit()\">';\n\n  // 'None' and 'All' are added during load_user_categories\n  if ( is_array ( $categories ) ) {\n    foreach ( $categories as $K => $V ) {\n      if ( ( ! empty ( $user ) && strlen ( $user ) ? $user : $login ) ||\n          empty ( $categories[$K]['cat_owner'] ) ) {\n        $ret .= '\n        <option value=\"' . $K . '\"';\n        if ( $cat_id == $K ) {\n          $printerStr .= '\n    <span id=\"cat\">' . $catStr . ': ' . $categories[$K]['cat_name'] . '</span>';\n          $ret .= ' selected=\"selected\"';\n        }\n        $ret .= \">{$V['cat_name']}</option>\";\n      }\n    }\n  }\n  return $ret . '\n      </select>\n    </form>'\n  // This is used for Printer Friendly view.\n  . $printerStr;\n}\n\n/**\n * Generates HTML for checkbox form controls.\n *\n * @param array  $vals      (name, value, display, setting)\n * @param string $id        the id of the control\n * @param string $onchange  javascript function to call if needed\n *\n * @return string  HTML for the checkbox control.\n */\nfunction print_checkbox( $vals, $id = '', $onchange = '' ) {\n  global $prefarray, $s, $SCRIPT;\n  static $checked, $No, $Yes;\n\n  $setting  = ( empty( $vals[3] ) ? $vals[0] : $vals[3] );\n  $variable = $vals[0];\n\n   if( $SCRIPT == 'admin.php' ) {\n    $setting  = $s[$vals[0]];\n    $variable = 'admin_' . $vals[0];\n  }\n  \n  if( $SCRIPT == 'pref.php' ) {\n    $setting  = $prefarray[$vals[0]];\n    $variable = 'pref_' . $vals[0];\n  }\n    \n  $hidden = ( strpos( 'admin.phpref.php', $SCRIPT ) === false ? '' : '\n    <input type=\"hidden\" name=\"' . $variable . '\" value=\"N\" />' );\n\n\n  if( ! empty( $id ) && $id = 'dito' )\n    $id = $vals[0];\n\n  if( empty( $checked ) ) {\n    $checked = ' checked=\"checked\"';\n    $No  = translate( 'No' );\n    $Yes = translate( 'Yes' );\n  }\n\n  return $hidden . '\n      <label><input type=\"checkbox\" name=\"' . $variable . '\" value=\"' . $vals[1]\n   . '\" ' . ( empty( $id ) ? '' : 'id=\"' . $id . '\" ' )\n   . ( $setting == $vals[1] ? $checked : '' )\n   . ( empty( $onchange ) ? '' : ' onchange=\"' . $onchange . '()\"' )\n   . ' />&nbsp;' . $vals[2] . '</label>';\n}\n\n/**\n * Generates color input type, now supported in HTML.\n *\n * @param string $varname  the name of the variable to display\n * @param string $title    color description\n * @param string $varval   the default value to display\n * @param string $id       the id of the html element\n *\n * @return string  HTML for the color selector.\n */\nfunction print_color_input_html ($varname, $title, $varval = '', $id='', $tag='div', $class='form-inline', $onchange = '') {\n  global $SCRIPT, $s, $prefarray;\n  $id = empty($id) ? $varname : $id;\n  // TODO: Get the text input box working so users can input RGB values.\n  //$textId = $id . 'RGB';\n  //return '<div class=\"form-inline\"><input class=\"form-control\" id=\"' . $textId . '\" type=\"text\" size=\"7\" value=\"' . $varval . '\"/>' .\n  //  '<input class=\"form-control\" style=\"height: 2em; width: 4em;\" name=\"' . $varname . '\" id=\"' . $id .\n  //  '\" type=\"color\" class=\"form-control\" value=\"' . $varval . '\"' .\n  //  'onchange=\"var c = $(\\'#' . $id . '\\').val();' .\n  //  'console.log(\\'color=\\'+c); var x=$(\\'' . $textId . '\\'); console.log(\\'textId=\\'+x); x.attr(\\'value\\',c); x.trigger(\\'change\\'); console.log(\\'x.val=\\'+x.val());\"></div>';\n  $prefix = '';\n  if ( $SCRIPT == 'admin.php' ) {\n    $prefix = 'admin_';\n    $setting = $s[$varname];\n  } elseif ( $SCRIPT == 'pref.php' ) {\n    $prefix = 'pref_';\n    $setting = $prefarray[$varname];\n  } else {\n    $setting = $varval;\n  }\n\n  return '<' . $tag . ' class=\"form-inline\">' .\n  (empty($title) ? '' : ('<label class=\"' . $class . '\" for=\"' . $prefix . $varname . '\">' . $title . '</label>')) .\n    '<input class=\"form-control\" style=\"height: 2em; width: 4em;\" name=\"' . $prefix . $varname . '\" id=\"' . $prefix . $id .\n    '\" type=\"color\" value=\"' . $setting . '\"' . (empty($onchange) ? '' : ' onchange=\"' . $onchange . '()\"') .\n    '></' . $tag . '>';\n  }\n\n/**\n * Prints all the calendar entries for the specified user for the specified date.\n *\n * If we are displaying data from someone other than\n * the logged in user, then check the access permission of the entry.\n *\n * @param string $date  Date in YYYYMMDD format\n * @param string $user  Username\n * @param bool   $ssi   Is this being called from week_ssi.php?\n * @param bool   $disallowAddIcon  If true, then do not display the\n *          add icon, even if user can add events\n */\nfunction print_date_entries ( $date, $user, $ssi = false,\n  $disallowAddIcon = false ) {\n  global $cat_id, $DISPLAY_TASKS_IN_GRID, $DISPLAY_UNAPPROVED, $events,\n  $is_admin, $is_nonuser, $login, $PUBLIC_ACCESS, $PUBLIC_ACCESS_CAN_ADD,\n  $readonly, $tasks, $WEEK_START;\n  static $newEntryStr;\n\n  if ( empty ( $newEntryStr ) )\n    $newEntryStr = translate ( 'New Entry' );\n\n  $cnt = 0;\n  $get_unapproved = ( $DISPLAY_UNAPPROVED == 'Y' );\n  $moons = getMoonPhases ( substr ( $date, 0, 4 ), substr ( $date, 4, 2 ) );\n  $ret = '';\n\n  $can_add = ( $readonly == 'N' || $is_admin );\n\n  if ( $PUBLIC_ACCESS == 'Y' && $PUBLIC_ACCESS_CAN_ADD != 'Y'\n      && $login == '__public__' )\n    $can_add = false;\n\n  if ( $readonly == 'Y' )\n    $can_add = false;\n\n  if ( $is_nonuser )\n    $can_add = false;\n\n  if ( $disallowAddIcon )\n    $can_add = false;\n\n  if ( ! $ssi ) {\n  /* translate ( 'First Quarter Moon') translate ( 'Full Moon' )\n     translate ( 'Last Quarter Moon') translate ( 'New Moon' )\n   */\n    $userCatStr = ( strcmp ( $user, $login ) ? 'user=' . $user . '&amp;' : '' )\n     . ( empty ( $cat_id ) ? '' : 'cat_id=' . $cat_id . '&amp;' );\n    $tmp = ( empty( $moons[$date] ) ? '' : $moons[$date] );\n    $moon_title = ( empty ( $tmp ) ? '' : translate ( ucfirst ( $tmp )\n     . ( strpos ( 'fullnew', $tmp ) !== false ? '' : ' Quarter' ) . ' Moon' ) );\n    $ret = ( $can_add ? '\n        <a title=\"' . $newEntryStr . '\" href=\"edit_entry.php?' . $userCatStr\n       . 'date=' . $date . '\"><img src=\"images/bootstrap-icons/plus-circle.svg\" alt=\"' . $newEntryStr\n       . '\" class=\"new\" /></a>' : '' ) . '\n        <a class=\"dayofmonth\" href=\"day.php?' . $userCatStr . 'date=' . $date\n     . '\">' . substr ( $date, 6, 2 ) . '</a>' . ( empty ( $tmp )\n      ? '' : '<img src=\"images/' . $tmp . 'moon.gif\" title=\"' . $moon_title\n      . '\" alt=\"' . $moon_title . '\" />' ) . \"<br />\\n\";\n    $cnt++;\n  }\n  // Get, combime and sort the events for this date.\n  $ev = combine_and_sort_events (\n    // Get all the non-repeating events.\n    get_entries ( $date, $get_unapproved ),\n    // Get all the repeating events.\n    get_repeating_entries ( $user, $date, $get_unapproved ) );\n\n  // If wanted, get all due tasks for this date.\n  if ( ( empty ( $DISPLAY_TASKS_IN_GRID ) || $DISPLAY_TASKS_IN_GRID == 'Y' ) &&\n      ( $date >= date ( 'Ymd' ) ) )\n    $ev = combine_and_sort_events ( $ev, get_tasks ( $date, $get_unapproved ) );\n\n  for ( $i = 0, $evCnt = count ( $ev ); $i < $evCnt; $i++ ) {\n    if( $get_unapproved || $ev[$i]->getStatus() == 'A' ) {\n      $ret .= print_entry ( $ev[$i], $date );\n      $cnt++;\n    }\n  }\n  if ( $cnt == 0 )\n    $ret .= '&nbsp;'; // So the table cell has at least something.\n\n  return $ret;\n}\n\n/**\n * Prints all the calendar entries for the specified user\n * for the specified date in day-at-a-glance format.\n *\n * If we are displaying data from someone other than\n * the logged in user, then check the access permission of the entry.\n *\n * @param string $date  Date in YYYYMMDD format\n * @param string $user  Username of calendar\n */\nfunction print_day_at_a_glance ( $date, $user, $can_add = 0 ) {\n  global $CELLBG, $DISPLAY_TASKS_IN_GRID, $DISPLAY_UNAPPROVED, $first_slot,\n  $hour_arr, $last_slot, $rowspan, $rowspan_arr, $TABLEBG, $THBG, $THFG,\n  $TIME_SLOTS, $today, $TODAYCELLBG, $WORK_DAY_END_HOUR, $WORK_DAY_START_HOUR;\n\n  if ( empty ( $TIME_SLOTS ) )\n    return translate ( 'Error TIME_SLOTS undefined!' ) . \"<br />\\n\";\n\n  $get_unapproved = ( $DISPLAY_UNAPPROVED == 'Y' );\n  // Get, combine and sort the events for this date.\n  $ev = combine_and_sort_events (\n    get_entries ( $date, $get_unapproved ), // Get static non-repeating events.\n    get_repeating_entries ( $user, $date )// Get all the repeating events.\n    );\n  if ( $date >= date ( 'Ymd' ) &&\n      ( empty ( $DISPLAY_TASKS_IN_GRID ) || $DISPLAY_TASKS_IN_GRID == 'Y' ) )\n    $ev = combine_and_sort_events ( $ev,\n      get_tasks ( $date, $get_unapproved ) // Get all due tasks.\n      );\n  $hour_arr = $rowspan_arr = [];\n  $interval = 1440 / $TIME_SLOTS; // Number of minutes per slot\n\n  $first_slot = intval ( ( $WORK_DAY_START_HOUR * 60 ) / $interval );\n  $last_slot = intval ( ( $WORK_DAY_END_HOUR * 60 ) / $interval );\n\n  for ( $i = 0, $cnt = count ( $ev ); $i < $cnt; $i++ ) {\n    if( $get_unapproved || $ev[$i]->getStatus() == 'A' )\n      html_for_event_day_at_a_glance ( $ev[$i], $date );\n  }\n  $last_row = -1;\n  $ret = '';\n  $rowspan = 0;\n  // Squish events that use the same cell into the same cell.\n  // For example, an event from 8:00-9:15 and another from 9:30-9:45 both\n  // want to show up in the 8:00-9:59 cell.\n  for ( $i = ( $first_slot < 0 ? $first_slot : 0 ); $i < $TIME_SLOTS; $i++ ) {\n    if ( $rowspan > 1 ) {\n      if ( ! empty ( $hour_arr[$i] ) ) {\n        $diff_start_time = $i - $last_row;\n        if ( ! empty ( $rowspan_arr[$i] ) ) {\n          if ( $rowspan_arr[$i] > 1 &&\n            ( $rowspan_arr[$i] + ( $diff_start_time ) > $rowspan_arr[$last_row] ) )\n            $rowspan_arr[$last_row] = ( $rowspan_arr[$i] + ( $diff_start_time ) );\n\n          $rowspan += ( $rowspan_arr[$i] - 1 );\n        } else\n          $rowspan_arr[$last_row] += $rowspan_arr[$i];\n\n        // This will move entries apart that appear in one field,\n        // yet start on different hours.\n        for ( $u = $diff_start_time; $u > 0; $u-- ) {\n          $hour_arr[$last_row] .= \"<br />\\n\";\n        }\n        $hour_arr[$last_row] .= $hour_arr[$i];\n        $hour_arr[$i] = '';\n        $rowspan_arr[$i] = 0;\n      }\n      $rowspan--;\n    } else\n    if ( ! empty ( $rowspan_arr[$i] ) && $rowspan_arr[$i] > 1 ) {\n      $last_row = $i;\n      $rowspan = $rowspan_arr[$i];\n    }\n  }\n  $ret .= '\n    <table class=\"main glance\">'\n   . ( empty ( $hour_arr[9999] ) ? '' : '\n      <tr>\n        <th class=\"empty\">&nbsp;</th>\n        <td class=\"hasevents\">' . $hour_arr[9999] . '</td>\n      </tr>' );\n\n  $rowspan = 0;\n  for ( $i = $first_slot; $i <= $last_slot; $i++ ) {\n    $time_h = intval ( ( $i * $interval ) / 60 );\n    $time_m = ( $i * $interval ) % 60;\n    $ret .= '<tr><th class=\"weekday\"';\n    $ret .= '>'\n     . display_time ( ( $time_h * 100 + $time_m ) * 100 ) . '</th>';\n    if ( $rowspan > 1 ) {\n      // This might mean there's an overlap, or it could mean one event\n      // ends at 11:15 and another starts at 11:30.\n      if ( ! empty ( $hour_arr[$i] ) ) {\n        $ret .= '<td class=\"hasevents\"';\n        if ( $can_add )\n          $ret .=\n            \" ondblclick=\\\"dblclick_add('$date','$user',$time_h,$time_m)\\\"\";\n        $ret .= '>' . $hour_arr[$i] . '</td>';\n      }\n      $rowspan--;\n    } else {\n      $ret .= '\n        <td ';\n      if ( empty ( $hour_arr[$i] ) ) {\n        $ret .= ( $date == date ( 'Ymd', $today ) ? ' class=\"today\"' : '' );\n        if ( $can_add )\n          $ret .=\n            \" ondblclick=\\\"dblclick_add('$date','$user',$time_h,$time_m)\\\"\";\n        $ret .= '>&nbsp;';\n      } else {\n        $rowspan = ( empty ( $rowspan_arr[$i] ) ? '' : $rowspan_arr[$i] );\n\n        $ret .= ( $rowspan > 1 ? 'rowspan=\"' . $rowspan . '\"' : '' )\n         . 'class=\"hasevents\"';\n        if ( $can_add )\n          $ret .=\n            \" ondblclick=\\\"dblclick_add('$date','$user',$time_h,$time_m)\\\"\";\n        $ret .= '>' . $hour_arr[$i];\n      }\n      $ret .= '</td>';\n    }\n    $ret .= '\n      </tr>';\n  }\n  return $ret . '\n    </table>';\n}\n\n/**\n * Prints the HTML for one event in the month view.\n *\n * @param Event  $event  The event\n * @param string $date   The data for which we're printing (YYYYMMDD)\n *\n * @staticvar int  Used to ensure all event popups have a unique id.\n *\n * @uses build_entry_popup\n */\nfunction print_entry ( $event, $date ) {\n  global $categories, $DISPLAY_END_TIMES, $DISPLAY_LOCATION,\n  $DISPLAY_TASKS_IN_GRID, $eventinfo, $is_assistant, $is_nonuser_admin,\n  $layers, $login, $PHP_SELF, $TIME_SPACER, $user;\n\n  static $key = 0;\n  static $viewEventStr, $viewTaskStr;\n\n  if ( empty ( $viewEventStr ) ) {\n    $viewEventStr = translate ( 'View this event' );\n    $viewTaskStr = translate ( 'View this task' );\n  }\n\n  $catIcon = $in_span = $padding = $popup_timestr = $ret = $timestr = '';\n  $cal_type = $event->getCalTypeName();\n  $loginStr = $event->getLogin();\n\n  if( access_is_enabled() ) {\n    $can_access = access_user_calendar ( 'view', $loginStr, '',\n      $event->getCalType(), $event->getAccess() );\n    $time_only = access_user_calendar ( 'time', $loginStr );\n    if ( $cal_type == 'task' && $can_access == 0 )\n      return false;\n  } else {\n    $can_access = CAN_DOALL;\n    $time_only = 'N';\n  }\n\n  // No need to display if show time only and not a timed event.\n  if( $time_only == 'Y' && ! $event->Istimed() )\n    return false;\n\n  $class = ( $login != $loginStr && strlen ( $loginStr )\n    ? 'layer' : ( $event->getStatus() == 'W' ? 'unapproved' : '' ) ) . 'entry';\n\n  // If we are looking at a view, then always use \"entry\".\n  if ( strstr ( $PHP_SELF, 'view_m.php' ) ||\n      strstr ( $PHP_SELF, 'view_t.php' ) ||\n      strstr ( $PHP_SELF, 'view_v.php' ) ||\n      strstr ( $PHP_SELF, 'view_w.php' ) )\n    $class = 'entry';\n\n  if( $event->getPriority() < 4 )\n    $ret .= '<strong>';\n\n  $cloneStr = $event->getClone();\n  $id = $event->getID();\n  $linkid = 'pop' . \"$id-$key\";\n  $name = $event->getName();\n  $view_text = ( $cal_type == 'task' ? $viewTaskStr : $viewEventStr );\n\n  $key++;\n\n  // Build entry link if UAC permits viewing.\n  if ( $can_access != 0 && $time_only != 'Y' ) {\n    // Make sure clones have parents URL date.\n    $href = 'href=\"view_entry.php?id=' . $id . '&amp;date='\n     . ( $cloneStr ? $cloneStr : $date )\n     . ( strlen ( $user ) > 0\n      ? '&amp;user=' . $user\n      : ( $class == 'layerentry' ? '&amp;user=' . $loginStr : '' ) ) . '\"';\n    $title = ' title=\"' . $view_text . '\" ';\n  } else\n    $href = $title = '';\n\n  $ret .= '\n      <a ' . $title . ' class=\"' . $class . '\" id=\"' . \"$linkid\\\" $href\"\n   . '><img src=\"';\n\n  $catNum = empty($event->getCategory()) ? 0 : abs($event->getCategory());\n  $icon = \"bootstrap-icons/circle-fill.svg\";\n  if ( $catNum > 0 ) {\n    $catIcon = 'wc-icons/cat-' . $catNum . '.gif';\n    if ( ! file_exists ( $catIcon ) )\n      $catIcon = 'wc-icons/cat-' . $catNum . '.png';\n    if ( ! file_exists ( $catIcon ) )\n      $catIcon = '';\n  }\n\n  if ( empty ( $catIcon ) )\n    $ret .= 'images/' . $icon . '\" class=\"bullet\" alt=\"' . $view_text\n     . '\" width=\"5\" height=\"7\" />';\n  else {\n    // Use category icon.\n    $catAlt = ( empty ( $categories[$catNum] )\n      ? '' : translate ( 'Category' ) . ': '\n       . $categories[$catNum]['cat_name'] );\n\n    $ret .= $catIcon . '\" alt=\"' . $catAlt . '\" title=\"' . \"$catAlt\\\" />\";\n  }\n\n  if ( $login != $loginStr && strlen ( $loginStr ) ) {\n    if ( $layers ) {\n      foreach ( $layers as $layer ) {\n        if ( $layer['cal_layeruser'] == $loginStr ) {\n          $in_span = true;\n          $ret .= ( '<span style=\"color:' . $layer['cal_color'] . ';\">' );\n        }\n      }\n    }\n    // Check to see if Category Colors are set.\n  } else\n  if ( ! empty ( $categories[$catNum]['cat_color'] ) ) {\n    $cat_color = $categories[$catNum]['cat_color'];\n    if ( $cat_color != '#000000' ) {\n      $in_span = true;\n      $ret .= ( '<span style=\"color:' . $cat_color . ';\">' );\n    }\n  }\n\n  if( $event->isAllDay() )\n    $timestr = $popup_timestr = translate ( 'All day event' );\n  elseif( ! $event->isUntimed() ) {\n    $timestr = $popup_timestr = display_time( $event->getDateTime() );\n    if( $event->getDuration() > 0 )\n      $popup_timestr .= ' - ' . display_time( $event->getEndDateTime() );\n\n    if ( $DISPLAY_END_TIMES == 'Y' )\n      $timestr = $popup_timestr;\n\n    if ( $cal_type == 'event' )\n      $ret .= getShortTime ( $timestr )\n       . ( $time_only == 'Y' ? '' : $TIME_SPACER );\n  }\n  return $ret . build_entry_label ( $event, 'eventinfo-' . $linkid, $can_access,\n    $popup_timestr, $time_only )\n\n  // Added to allow a small location to be displayed if wanted.\n  . ( ! empty ( $location ) && !\n    empty ( $DISPLAY_LOCATION ) && $DISPLAY_LOCATION == 'Y'\n    ? '<br /><span class=\"location\">('\n     . htmlspecialchars ( $location ) . ')</span>' : '' )\n   . ( $in_span == true ? '</span>' : '' ) . '</a>'\n   . ( $event->getPriority() < 4 ? '</strong>' : '' ) // end font-weight span\n  . '<br />';\n}\n\n/**\n * Generate standardized error message\n *\n * @param string $error  Message to display\n * @param bool   $full   Include extra text in display\n *\n * @return string  HTML to display error.\n *\n * @uses print_error_header\n */\nfunction print_error ( $error, $full = false ) {\n  return print_error_header()\n   . ( $full ? translate ( 'The following error occurred' ) . ':' : '' ) . '\n    <blockquote>' . $error . '</blockquote>';\n}\n\n/**\n * An h2 header error message.\n */\nfunction print_error_header() {\n  return '\n    <h2>' . translate ( 'Error' ) . '</h2>';\n}\n\n/**\n * Generate standardized Not Authorized message\n *\n * @param bool $full  Include ERROR title\n *\n * @return string  HTML to display notice.\n *\n * @uses print_error_header\n */\nfunction print_not_auth ( $full = false ) {\n  $ret = ( $full ? print_error_header() : '' )\n   . '!!!' . translate ( 'You are not authorized.' ) . \"\\n\";\n  return $ret;\n}\n\n/**\n * Generates HTML for radio buttons.\n *\n * @param string  $variable the name of the variable to display\n * @param array   $vals the value and display variables\n *                if empty ( Yes/No options will be displayed )\n * @param string  $onclick  javascript function to call if needed\n * @param string  $defIdx default array index to select\n * @param string  $sep HTML value between radio options (&nbsp;,<br />)\n *\n * @return string  HTML for the radio control.\n */\nfunction print_radio ( $variable, $vals = '', $onclick = '', $defIdx = '',\n  $sep = '&nbsp;' ) {\n  global $prefarray, $s, $SCRIPT;\n  static $checked, $No, $Yes;\n\n  $ret = '';\n  $setting = $defIdx;\n  if ( empty ( $checked ) ) {\n    $checked = ' checked=\"checked\"';\n    $No = translate ( 'No' );\n    $Yes = translate ( 'Yes' );\n  }\n  if ( empty ( $vals ) )\n    $vals = ['Y' => $Yes, 'N' => $No];\n\n  if ( $SCRIPT == 'admin.php' ) {\n    if ( ! empty ( $s[$variable] ) )\n      $setting = $s[$variable];\n    $variable = 'admin_' . $variable;\n  }\n  if ( $SCRIPT == 'pref.php' ) {\n    if ( ! empty ( $prefarray[$variable] ) )\n      $setting = $prefarray[$variable];\n    $variable = 'pref_' . $variable;\n  }\n  $onclickStr = ( empty( $onclick ) ? '' : ' onclick=\"' . $onclick . '()\"' );\n  $ind = 0;\n  foreach ( $vals as $K => $V ) {\n    $margin = $ind++ == 0 ? 'ml-1' : 'ml-3';\n    $ret .= '\n      <input class=\"form-check-input m-1 ' . $margin . '\" type=\"radio\" name=\"' .\n      $variable . '\" id=\"' . $variable . '_' . $K . '\" value=\"' . $K . '\"'\n     . ( $setting == $K ? $checked : '' ) . $onclickStr . ' />' . $V;\n  }\n  return $ret;\n}\n\n/**\n * Generate standardized Success message.\n *\n * @param bool $saved\n *\n * @return string  HTML to display error.\n */\nfunction print_success ( $saved ) {\n  return ( $saved ? '\n    <script>\n<!-- <![CDATA[\n      alert ( \\'' . translate ( 'Changes successfully saved', true ) . '\\' );\n//]]> -->\n    </script>' : '' );\n}\n\n/**\n * Prints Timezone select for use on forms\n *\n * @param string  $prefix  Prefix for select control's name\n * @param string  $tz      Current timezone of logged in user\n *\n * @return string $ret  HTML for select control.\n*/\nfunction print_timezone_select_html ( $prefix, $tz ) {\n  $ret = '';\n  // We may be using php 4.x on Windows, so we can't use set_env() to\n  // adjust the user's TIMEZONE. We'll need to reply on the old fashioned\n  // way of using $tz_offset from the server's timezone.\n  $can_setTZ = ( substr ( $tz, 0, 11 ) == 'WebCalendar' ? false : true );\n  $old_TZ = getenv ( 'TZ' );\n  set_env ( 'TZ', 'America/New_York' );\n  $tmp_timezone = date ( 'T' );\n  set_env ( 'TZ', $old_TZ );\n  // Don't change this to date().\n  // if ( date ( 'T' ) == 'Ame' || ! $can_setTZ ) { //We have a problem!!\n  if ( 0 ) { // Ignore this code for now.\n    $tz_value = ( ! $can_setTZ ? substr ( $tz, 12 ) : 0 );\n    $ret = '\n        <select class=\"form-control\" name=\"' . $prefix . 'TIMEZONE\" id=\"' . $prefix . 'TIMEZONE\">';\n    $text_add = translate ( 'Add N hours to' );\n    $text_sub = translate ( 'Subtract N hours from' );\n    for ( $i = -12; $i <= 13; $i++ ) {\n      $ret .= '\n          <option value=\"WebCalendar/' . $i . '\"'\n       . ( $tz_value == $i ? ' selected=\"selected\"' : '' ) . '>' . ( $i < 0\n        ? str_replace ( 'N', - $i, $text_sub ) : ( $i == 0\n          ? translate ( 'same as' ) : str_replace ( 'N', $i, $text_add ) ) )\n       . '</option>';\n    }\n    $ret .= '\n        </select>&nbsp;' . translate ( 'server time' );\n  } else { // This installation supports TZ env.\n    // Import Timezone name. This file will not normally be available\n    // on windows platforms, so we'll just include it with WebCalendar.\n    $tz_file = 'includes/zone.tab';\n    if ( ! $fd = @fopen ( $tz_file, 'r', false ) )\n      return str_replace ( 'XXX', $tz_file,\n        translate ( 'Cannot read timezone file XXX.' ) );\n    else {\n      while ( ( $data = fgets ( $fd, 1000 ) ) !== false ) {\n        if ( ( substr ( trim ( $data ), 0, 1 ) == '#' ) || strlen ( $data ) <= 2 )\n          continue;\n        else {\n          $data = trim ( $data, strrchr ( $data, '#' ) );\n          $data = preg_split ( '/[\\s,]+/', trim ( $data ) );\n          $timezones[] = $data[2];\n        }\n      }\n      fclose ( $fd );\n    }\n    sort ( $timezones );\n    $ret = '\n        <select class=\"form-control\" name=\"' . $prefix . 'TIMEZONE\" id=\"' . $prefix . 'TIMEZONE\">';\n    for ( $i = 0, $cnt = count ( $timezones ); $i < $cnt; $i++ ) {\n      $ret .= '\n          <option value=\"' . $timezones[$i] . '\"'\n       . ( $timezones[$i] == $tz ? ' selected=\"selected\" ' : '' ) . '>'\n       . unhtmlentities ( $timezones[$i] ) . '</option>';\n    }\n    $ret .= '\n        </select>&nbsp;&nbsp;' . str_replace (' XXX ',\n         '&nbsp;' . date ( 'Z' ) / 3600 . '&nbsp;',\n         translate ( 'Your current GMT offset is XXX hours.' ) );\n  }\n  return $ret;\n}\n\n/**\n * Reads events visible to a user.\n *\n * Includes layers and possibly public access if enabled.\n * NOTE: The values for the global variables $thisyear and $thismonth\n * MUST be set!  (This will determine how far in the future to caclulate\n * repeating event dates.)\n *\n * @param string $user           Username\n * @param bool   $want_repeated  Get repeating events?\n * @param string $date_filter    SQL phrase starting with AND, to be appended to\n *                               the WHERE clause. May be empty string.\n * @param int    $cat_id         Category ID to filter on. May be empty.\n * @param bool   $is_task        Used to restrict results to events OR tasks\n *\n * @return array  Array of Events sorted by time of day.\n */\nfunction query_events ( $user, $want_repeated, $date_filter, $cat_id = '',\n  $is_task = false ) {\n  global $db_connection_info, $jumpdate, $layers, $login, $max_until,\n  $PUBLIC_ACCESS_DEFAULT_VISIBLE, $result, $thismonth, $thisyear;\n  global $OVERRIDE_PUBLIC, $OVERRIDE_PUBLIC_TEXT;\n\n  // New multiple categories requires some checking to see if this cat_id is\n  // valid for this cal_id. It could be done with nested SQL,\n  // but that may not work for all databases. This might be quicker also.\n  $catlist = $cloneRepeats = $layers_byuser = $result = [];\n\n  $sql = 'SELECT DISTINCT( cal_id ) FROM webcal_entry_categories ';\n  // None was selected...return only events without categories.\n  if ( $cat_id == -1 )\n    $rows = dbi_get_cached_rows ( $sql, [] );\n  elseif ( ! empty ( $cat_id ) ) {\n    $cat_array = explode ( ',', $cat_id );\n    $rows = dbi_get_cached_rows ( $sql . '\n  WHERE cat_id IN ( ?' . str_repeat ( ',?', count ( $cat_array ) - 1 ) . ' )', $cat_array );\n  }\n  if ( ! empty ( $cat_id ) ) {\n    // $rows = dbi_get_cached_rows ( $sql, [$cat_id] );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $catlist[$i] = $row[0];\n      }\n    }\n  }\n  $catlistcnt = count ( $catlist );\n  $query_params = [];\n  $sql = 'SELECT we.cal_name, we.cal_description, we.cal_date, we.cal_time,\n    we.cal_id, we.cal_ext_for_id, we.cal_priority, we.cal_access,\n    we.cal_duration, weu.cal_status, we.cal_create_by, weu.cal_login,\n    we.cal_type, we.cal_location, we.cal_url, we.cal_due_date, we.cal_due_time,\n    weu.cal_percent, we.cal_mod_date, we.cal_mod_time '\n   . ( $want_repeated\n    ? ', wer.cal_type, wer.cal_end, wer.cal_frequency,\n      wer.cal_days, wer.cal_bymonth, wer.cal_bymonthday,\n      wer.cal_byday, wer.cal_bysetpos, wer.cal_byweekno,\n      wer.cal_byyearday, wer.cal_wkst, wer.cal_count, wer.cal_endtime\n      FROM webcal_entry we, webcal_entry_repeats wer, webcal_entry_user weu\n      WHERE we.cal_id = wer.cal_id AND '\n    : 'FROM webcal_entry we, webcal_entry_user weu WHERE ' )\n   . 'we.cal_id = weu.cal_id AND weu.cal_status IN ( \\'A\\',\\'W\\' ) ';\n\n  if ( $catlistcnt > 0 ) {\n    $placeholders = '?' . str_repeat ( ',?', $catlistcnt - 1 );\n    for ( $p_i = 0; $p_i < $catlistcnt; $p_i++ ) {\n      $query_params[] = $catlist[$p_i];\n    }\n\n    if ( $cat_id > 0 )\n      $sql .= 'AND we.cal_id IN ( ' . $placeholders . ' ) ';\n    elseif ( $cat_id == -1 ) // Eliminate events with categories.\n      $sql .= 'AND we.cal_id NOT IN ( ' . $placeholders . ' ) ';\n  } else\n  if ( ! empty ( $cat_id ) )\n    // Force no rows to be returned. No matching entries in category.\n    $sql .= 'AND 1 = 0 ';\n\n  $sql .= 'AND we.cal_type IN ( '\n   . ( $is_task == false\n    ? '\\'E\\',\\'M\\' ) ' : '\\'N\\',\\'T\\' ) AND ( we.cal_completed IS NULL ) ' )\n   . ( strlen ( $user ) > 0 ? 'AND ( weu.cal_login = ? ' : '' );\n\n  $query_params[] = $user;\n\n  if ( $user == $login && strlen ( $user ) > 0 && $layers ) {\n    foreach ( $layers as $layer ) {\n      $layeruser = $layer['cal_layeruser'];\n\n      $sql .= 'OR weu.cal_login = ? ';\n      $query_params[] = $layeruser;\n\n      // While we are parsing the whole layers array, build ourselves\n      // a new array that will help when we have to check for dups.\n      $layers_byuser[$layeruser] = $layer['cal_dups'];\n    }\n  }\n\n  $rows = dbi_get_cached_rows( $sql . ( $user == $login && strlen( $user )\n    && $PUBLIC_ACCESS_DEFAULT_VISIBLE == 'Y'\n      ? 'OR weu.cal_login = \\'__public__\\' ' : '' )\n   . ( strlen( $user ) > 0 ? ') ' : '' ) . $date_filter . ' ORDER BY '\n    // Order the results by time, then name if not tasks.\n    // Must also order by cal_id, in case there are more than\n    // one event in a month with the same name and time.\n   . ( $is_task ? '' : 'we.cal_time, we.cal_name, ' )\n   . 'we.cal_id', $query_params );\n\n  if ( $rows ) {\n    $i = 0;\n    $checkdup_id = $first_i_this_id = -1;\n    for ( $ii = 0, $cnt = count ( $rows ); $ii < $cnt; $ii++ ) {\n      $row = $rows[$ii];\n      if ( $row[9] == 'D' || $row[9] == 'R' )\n        continue; // Don't show deleted/rejected ones.\n\n      // Get primary category for this event, used for icon and color.\n      $categories = get_categories_by_id ( $row[4], $user );\n      $cat_keys = array_keys ( $categories );\n      $primary_cat = ( empty ( $cat_keys[0] ) ? '' : $cat_keys[0] );\n\n      if ( $login == '__public__' && ! empty ( $OVERRIDE_PUBLIC ) &&\n        $OVERRIDE_PUBLIC == 'Y' ) {\n        $evt_name = $OVERRIDE_PUBLIC_TEXT;\n        $evt_descr = $OVERRIDE_PUBLIC_TEXT;\n      } else {\n        $evt_name = $row[0];\n        $evt_descr = $row[1];\n      }\n\n      if ( $want_repeated && ! empty ( $row[20] ) ) // row[20] = cal_type\n        $item = new RepeatingEvent( $evt_name, $evt_descr, $row[2], $row[3],\n          $row[4], $row[5], $row[6], $row[7], $row[8], $row[9], $row[10],\n          $primary_cat, $row[11], $row[12], $row[13], $row[14], $row[15],\n          $row[16], $row[17], $row[18], $row[19], $row[20], $row[21], $row[22],\n          $row[23], $row[24], $row[25], $row[26], $row[27], $row[28], $row[29],\n          $row[30], $row[31], $row[32], [], [], [] );\n      else\n        $item = new Event( $evt_name, $evt_descr, $row[2], $row[3], $row[4],\n          $row[5], $row[6], $row[7], $row[8], $row[9], $row[10], $primary_cat,\n          $row[11], $row[12], $row[13], $row[14], $row[15], $row[16], $row[17],\n          $row[18], $row[19] );\n\n      if( $item->getID() != $checkdup_id ) {\n        $checkdup_id = $item->getID();\n        $first_i_this_id = $i;\n      }\n\n      if( $item->getLogin() == $user ) {\n        // Insert this one before all others with this ID.\n        array_splice ( $result, $first_i_this_id, 0, [$item] );\n        $i++;\n\n        if ( $first_i_this_id + 1 < $i ) {\n          // There's another one with the same ID as the one we inserted.\n          // Check for dupe and if so, delete it.\n          $other_item = $result[$first_i_this_id + 1];\n          $tmp = $layers_byuser[$other_item->getLogin()];\n\n          if( empty( $tmp ) || $tmp == 'N' ) {\n            array_splice( $result, $first_i_this_id + 1, 1 );\n            $i--;\n          }\n        }\n      } else {\n        $tmp = isset($layers_byuser[$item->getLogin()]) ? $layers_byuser[$item->getLogin()] : '';\n\n        if( $i == $first_i_this_id || ( ! empty( $tmp ) && $tmp == 'Y' ) )\n          // This item is either the first one with its ID, or dupes allowed.\n          // Add it to the end of the array.\n          $result[$i++] = $item;\n      }\n      // Does event go past midnight?\n      if( date ( 'Ymd', $item->getDateTimeTS() )\n          != date( 'Ymd', $item->getEndDateTimeTS() )\n          && ! $item->isAllDay() && $item->getCalTypeName() == 'event' ) {\n        getOverLap ( $item, $i, true );\n        $i = count ( $result );\n      }\n    }\n  }\n\n  if ( $want_repeated ) {\n    // Now load event exceptions/inclusions and store as array.\n\n    // TODO:  Allow passing this max_until as param in case we create\n    // a custom report that shows N years of events.\n    if ( empty ( $max_until ) )\n      $max_until = mktime ( 0, 0, 0, $thismonth + 2, 1, $thisyear );\n\n    for ( $i = 0, $resultcnt = count ( $result ); $i < $resultcnt; $i++ ) {\n      if( $result[$i]->getID() != '' ) {\n        $rows = dbi_get_cached_rows ( 'SELECT cal_date, cal_exdate\n          FROM webcal_entry_repeats_not\n  WHERE cal_id = ?', [$result[$i]->getID()] );\n        for ( $ii = 0, $rowcnt = count ( $rows ); $ii < $rowcnt; $ii++ ) {\n          $row = $rows[$ii];\n          // If this is not a clone, add exception date.\n          if( ! $result[$i]->getClone() )\n            $except_date = $row[0];\n\n          if ( $row[1] == 1 )\n            $result[$i]->addRepeatException( $except_date, $result[$i]->getID() );\n          else\n            $result[$i]->addRepeatInclusion ( $except_date );\n        }\n        // Get all dates for this event.\n        // If clone, we'll get the dates from parent later.\n        if( ! $result[$i]->getClone() ) {\n          $until = ( $result[$i]->getRepeatEndDateTimeTS()\n            ? $result[$i]->getRepeatEndDateTimeTS()\n            : // Make sure all January dates will appear in small calendars.\n            $max_until );\n\n          // Try to minimize the repeat search by shortening\n          // until if BySetPos is not used.\n          if( ! $result[$i]->getRepeatBySetPos() && $until > $max_until )\n            $until = $max_until;\n\n          $rpt_count = 999; //Some BIG number.\n          // End date... for year view and some reports we need whole year...\n          // So, let's do up to 365 days after current month.\n          // TODO:  Add this end time as a parameter in case someone creates\n          // a custom report that asks for N years of events.\n          // $jump = mktime ( 0, 0, 0, $thismonth -1, 1, $thisyear);\n          if( $result[$i]->getRepeatCount() )\n            $rpt_count = $result[$i]->getRepeatCount();\n\n          $date = $result[$i]->getDateTimeTS();\n          if( $result[$i]->isAllDay() || $result[$i]->isUntimed() )\n            $date += 43200; //A simple hack to prevent DST problems.\n\n          // TODO get this to work\n          // C heck if this event id has been cached.\n          // $file = '';\n          // if ( ! empty( $db_connection_info['cachedir'] ) ) {\n          // $hash = md5( $result[$i]->getId() . $until . $jump );\n          // $file = $db_connection_info['cachedir'] . '/' . $hash . '.dat';\n          // }\n          // if ( file_exists ( $file ) ) {\n          // $dates = unserialize( file_get_contents( $file ) );\n          // } else {\n          $dates = get_all_dates(\n            $date,\n            $result[$i]->getRepeatType(),\n            $result[$i]->getRepeatFrequency(),\n            $result[$i]->getRepeatByMonth(),\n            $result[$i]->getRepeatByWeekNo(),\n            $result[$i]->getRepeatByYearDay(),\n            $result[$i]->getRepeatByMonthDay(),\n            $result[$i]->getRepeatByDay(),\n            $result[$i]->getRepeatBySetPos(),\n            $rpt_count,\n            $until,\n            $result[$i]->getRepeatWkst(),\n            $result[$i]->getRepeatExceptions(),\n            $result[$i]->getRepeatInclusions(),\n            $jumpdate );\n          $result[$i]->addRepeatAllDates( $dates );\n          // Serialize and save in cache for later use.\n          // if ( ! empty ( $db_connection_info['cachedir'] ) ) {\n          // $fd = @fopen ( $file, 'w+b', false );\n          // if ( empty ( $fd ) ) {\n          // dbi_fatal_error ( \"Cache error: could not write file $file\" );\n          // }\n          // fwrite ( $fd, serialize ( $dates ) );\n          // fclose ( $fd );\n          // chmod ( $file, 0666 );\n          // }\n          // }\n        } else { // Process clones if any.\n          if( count( $result[$i-1]->getRepeatAllDates() ) > 0 ) {\n            $parentRepeats = $result[$i-1]->getRepeatAllDates();\n            $cloneRepeats = [];\n            for( $j = 0, $parentRepeatscnt = count( $parentRepeats );\n                $j < $parentRepeatscnt; $j++ ) {\n              $cloneRepeats[] = gmdate( 'Ymd',\n                date_to_epoch( $parentRepeats[$j] ) + 86400 );\n            }\n            $result[$i]->addRepeatAllDates( $cloneRepeats );\n          }\n        }\n      }\n    }\n  }\n  return $result;\n}\n\n/**\n * Reads all the events for a user for the specified range of dates.\n *\n * This is only called once per page request to improve performance. All the\n * events get loaded into the array <var>$events</var> sorted by time of day\n * (not date).\n *\n * @param string $user       Username\n * @param string $startdate  Start date range, inclusive (in timestamp format)\n *                           in user's timezone\n * @param string $enddate    End date range, inclusive (in timestamp format)\n *                           in user's timezone\n * @param int    $cat_id     Category ID to filter on\n *\n * @return array  Array of Events\n *\n * @uses query_events\n */\nfunction read_events ( $user, $startdate, $enddate, $cat_id = '' ) {\n  global $login;\n\n  // Shift date/times to UTC.\n  $start_date = gmdate ( 'Ymd', $startdate );\n  $end_date = gmdate ( 'Ymd', $enddate );\n  return query_events( $user, false, 'AND ( ( we.cal_date >= ' . $start_date\n     . ' AND we.cal_date <= ' . $end_date\n     . ' AND we.cal_time = -1 ) OR ( we.cal_date > ' . $start_date\n     . ' AND we.cal_date < ' . $end_date . ' ) OR ( we.cal_date = ' . $start_date\n     . ' AND we.cal_time >= ' . gmdate ( 'His', $startdate )\n     . ' ) OR ( we.cal_date = ' . $end_date . ' AND we.cal_time <= '\n     . gmdate ( 'His', $enddate ) . ' ) )', $cat_id );\n}\n\n/**\n * Reads all the repeated events for a user.\n *\n * This is only called once per page request to improve performance.\n * All the events get loaded into the array <var>$repeated_events</var>\n * sorted by time of day (not date).\n *\n * This will load all the repeated events into memory.\n *\n * <b>Notes:</b>\n * - To get which events repeat on a specific date, use\n *   {@link get_repeating_entries()}.\n * - To get all the dates that one specific event repeats on, call\n *   {@link get_all_dates()}.\n *\n * @param string $user    Username\n * @param int    $cat_id  Category ID to filter on  (May be empty)\n * @param int $date       Cutoff date for repeating event cal_end in timestamp\n *                        format (may be empty)\n *\n * @return array  Array of RepeatingEvents sorted by time of day.\n *\n * @uses query_events\n */\nfunction read_repeated_events ( $user, $date = '', $enddate = '', $cat_id = '' ) {\n  global $jumpdate, $login, $max_until;\n\n  // This date should help speed up things\n  // by eliminating events that won't display anyway.\n  $jumpdate = $date;\n  $max_until = $enddate + 86400;\n  if ( $date != '' )\n    $date = gmdate ( 'Ymd', $date );\n\n  return query_events ( $user, true, ( $date != ''\n      ? 'AND ( wer.cal_end >= ' . $date . ' OR wer.cal_end IS NULL )' : '' ),\n    $cat_id );\n}\n\n/**\n * Reads all the tasks for a user with due date within the specified date range.\n *\n * This is only called once per page request to improve performance.\n * All the tasks get loaded into the array <var>$tasks</var> sorted by\n * time of day (not date).\n *\n * @param string $user      Username\n * @param string $duedate   End date range, inclusive (in timestamp format)\n *                          in user's timezone\n * @param int    $cat_id    Category ID to filter on\n *\n * @return array  Array of Tasks\n *\n * @uses query_events\n */\nfunction read_tasks ( $user, $duedate, $cat_id = '' ) {\n  $due_date = gmdate ( 'Ymd', $duedate );\n  return query_events( $user, false, 'AND ( ( we.cal_due_date <= ' . $due_date\n     . ' ) OR ( we.cal_due_date = ' . $due_date . ' AND we.cal_due_time <= '\n     . gmdate ( 'His', $duedate ) . ' ) )', $cat_id, true );\n}\n\n/**\n * Generates a cookie that saves the last calendar view.\n *\n * Cookie is based on the current <var>$REQUEST_URI</var>.\n *\n * We save this cookie so we can return to this same page after a user\n * edits/deletes/etc an event.\n *\n * @param bool $view  Determine if we are using a view_x.php file\n *\n * @global string  Request string\n */\nfunction remember_this_view ( $view = false ) {\n  global $REQUEST_URI;\n  if ( empty ( $REQUEST_URI ) )\n    $REQUEST_URI = $_SERVER['REQUEST_URI'];\n\n  // If called from init, only process script named \"view_x.php.\n  if ( $view == true && ! strstr ( $REQUEST_URI, 'view_' ) )\n    return;\n\n  // Do not use anything with \"friendly\" in the URI.\n  if ( strstr ( $REQUEST_URI, 'friendly=' ) )\n    return;\n\n  sendCookie ( 'webcalendar_last_view', $REQUEST_URI );\n\n}\n\n/**\n * This just sends the DOCTYPE used in a lot of places in the code.\n *\n * @param string  lang\n */\nfunction send_doctype ( $doc_title = '' ) {\n  global $charset, $lang, $LANGUAGE;\n\n  $lang = ( empty ( $LANGUAGE ) ? '' : languageToAbbrev ( $LANGUAGE ) );\n  if ( empty ( $lang ) )\n    $lang = 'en';\n\n  $charset = ( empty ( $LANGUAGE ) ? 'iso-8859-1' : translate ( 'charset' ) );\n\n  return '<!DOCTYPE html><html><head>' .\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . $charset .\n    '\" />' . ( empty ( $doc_title ) ? '' : '<title>' . $doc_title . '</title>' );\n}\n\n/**\n * Sends an HTTP login request to the browser and stops execution.\n *\n * @global string  name of language file\n * @global string  Application Name\n *\n */\nfunction send_http_login() {\n  global $lang_file;\n\n  if ( strlen ( $lang_file ) ) {\n    $not_authorized = print_not_auth();\n    $title = translate ( 'Title' );\n    $unauthorized = translate ( 'Unauthorized' );\n  } else {\n    $not_authorized = 'You are not authorized';\n    $title = 'WebCalendar';\n    $unauthorized = 'Unauthorized';\n  }\n  header ( 'WWW-Authenticate: Basic realm=\"' . \"$title\\\"\" );\n  header ( 'HTTP/1.0 401 Unauthorized' );\n  echo send_doctype ( $unauthorized ) . '\n  </head>\n  <body>\n    <h2>' . $title . '</h2>\n    ' . $not_authorized . '\n  </body>\n</html>';\n  exit;\n}\n\n/**\n * Sends HTTP headers that tell the browser not to cache this page.\n *\n * Different browsers use different mechanisms for this,\n * so a series of HTTP header directives are sent.\n *\n * <b>Note:</b>  This function needs to be called before any HTML output is sent\n *               to the browser.\n */\nfunction send_no_cache_header() {\n  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );\n  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );\n  header ( 'Cache-Control: no-store, no-cache, must-revalidate' );\n  header ( 'Cache-Control: post-check=0, pre-check=0', false );\n  header ( 'Pragma: no-cache' );\n}\n\n/**\n * Sends a redirect to the user's preferred view.\n *\n * The user's preferred view is stored in the $STARTVIEW global variable.\n * This is loaded from the user preferences (or system settings\n * if there are no user prefererences.)\n *\n * @param string $indate  Date to pass to preferred view in YYYYMMDD format\n * @param string $args    Arguments to include in the URL (such as \"user=joe\")\n */\nfunction send_to_preferred_view ( $indate = '', $args = '' ) {\n  do_redirect ( get_preferred_view ( $indate, $args ) );\n}\n\n/**\n * Set an environment variable if system allows it.\n *\n * @param string $val      name of environment variable\n * @param string $setting  value to assign\n *\n * @return bool  true = success false = not allowed.\n */\nfunction set_env ( $val, $setting ) {\n  global $tzOffset;\n  global $tzInitSet;\n\n  // Set SERVER TIMEZONE.\n  if ( ! $tzInitSet ) {\n    if ( empty ( $GLOBALS['TIMEZONE'] ) )\n      $GLOBALS['TIMEZONE'] = $GLOBALS['SERVER_TIMEZONE'];\n    if ( function_exists ( \"date_default_timezone_set\" ) )\n      date_default_timezone_set ( $GLOBALS['TIMEZONE'] );\n  }\n\n  $can_setTZ = ( substr ( $setting, 0, 11 ) == 'WebCalendar' ? false : true );\n  $ret = false;\n  // Test if safe_mode is enabled.\n  // If so, we then check safe_mode_allowed_env_vars for $val.\n  if ( ini_get ( 'safe_mode' ) ) {\n    $allowed_vars = explode ( ',', ini_get ( 'safe_mode_allowed_env_vars' ) );\n    if ( in_array ( $val, $allowed_vars ) )\n      $ret = true;\n  } else\n    $ret = true;\n\n  // We can't set TZ env on php 4.0 windows,\n  // so the setting should already contain 'WebCalendar/xx'.\n  if ( $ret == true && $can_setTZ )\n    putenv ( $val . '=' . $setting );\n\n  if ( $val == 'TZ' ) {\n    $tzOffset = ( ! $can_setTZ ? substr ( $setting, 12 ) * 3600 : 0 );\n    // Some say this is required to properly init timezone changes.\n    mktime ( 0, 0, 0, 1, 1, 1970 );\n  }\n\n  return $ret;\n}\n\n/**\n * Determines what the day is and sets it globally.\n * All times are in the user's timezone\n *\n * The following global variables will be set:\n * - <var>$thisyear</var>\n * - <var>$thismonth</var>\n * - <var>$thisday</var>\n * - <var>$thisdate</var>\n * - <var>$today</var>\n *\n * @param string $date  The date in YYYYMMDD format\n */\nfunction set_today ( $date = '' ) {\n  global $day, $month, $thisdate, $thisday, $thismonth, $thisyear, $today, $year;\n\n  $today = time();\n\n  if ( empty ( $date ) ) {\n    $thisyear = ( empty ( $year ) ? date ( 'Y', $today ) : $year );\n    $thismonth = ( empty ( $month ) ? date ( 'm', $today ) : $month );\n    $thisday = ( empty ( $day ) ? date ( 'd', $today ) : $day );\n  } else {\n    $thisyear = substr ( $date, 0, 4 );\n    $thismonth = substr ( $date, 4, 2 );\n    $thisday = substr ( $date, 6, 2 );\n  }\n  $thisdate = sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, $thisday );\n}\n\n/**\n * Sorts the combined event arrays by timestamp then name.\n *\n * <b>Note:</b> This is a user-defined comparison function for usort().\n *\n * @params passed automatically by usort, don't pass them in your call\n */\nfunction sort_events ( $a, $b ) {\n  // Handle untimed events first.\n  if( $a->isUntimed() && $b->isUntimed() )\n    return strnatcmp( $a->getName(), $b->getName() );\n  else if( $a->isUntimed() || $b->isUntimed() )\n    return strnatcmp( $b->isUntimed(), $a->isUntimed() );\n\n  $retval = strnatcmp (\n    display_time( '', 0, $a->getDateTimeTS(), 24 ),\n    display_time( '', 0, $b->getDateTimeTS(), 24 ) );\n\n  return ( $retval ? $retval : strnatcmp( $a->getName(), $b->getName() ) );\n}\n\n/**\n * Sorts the combined event arrays by timestamp then name (case insensitive).\n *\n * <b>Note:</b> This is a user-defined comparison function for usort().\n *\n * @params passed automatically by usort, don't pass them in your call.\n */\nfunction sort_events_insensitive ( $a, $b ) {\n  $retval = strnatcmp (\n    display_time( '', 0, $a->getDateTimeTS(), 24 ),\n    display_time( '', 0, $b->getDateTimeTS(), 24 ) );\n\n  return ( $retval\n    ? $retval\n    : strnatcmp( strtolower( $a->getName() ), strtolower( $b->getName() ) ) );\n}\n\n/**\n * Sort user array based on $USER_SORT_ORDER.\n * <b>Note:</b> This is a user-defined comparison function for usort()\n * that will be called from user-xxx.php.\n * @TODO:  Move to user.php along with migration to user.class.\n *\n * @params passed automatically by usort, don't pass them in your call.\n */\nfunction sort_users ( $a, $b ) {\n  global $USER_SORT_ORDER;\n\n  $first = strnatcmp ( strtolower ( $a['cal_firstname'] ),\n    strtolower ( $b['cal_firstname'] ) );\n  $last = strnatcmp ( strtolower ( $a['cal_lastname'] ),\n    strtolower ( $b['cal_lastname'] ) );\n\n  return ( ( empty ( $USER_SORT_ORDER )\n      ? 'cal_lastname, cal_firstname,'\n      : \"$USER_SORT_ORDER,\" ) == 'cal_lastname, cal_firstname,'\n    ? ( empty ( $last ) ? $first : $last )\n    : ( empty ( $first ) ? $last : $first ) );\n}\n\n/**\n * Converts a time format HHMMSS (like 130000 for 1PM)\n * into number of minutes past midnight.\n *\n * @param string $time  Input time in HHMMSS format\n *\n * @return int  The number of minutes since midnight.\n */\nfunction time_to_minutes ( $time ) {\n  return intval ( $time / 10000 ) * 60 + intval ( ( $time / 100 ) % 100 );\n}\n\n/**\n * Checks to see if two events overlap.\n *\n * @param string $time1      Time 1 in HHMMSS format\n * @param int    $duration1  Duration 1 in minutes\n * @param string $time2      Time 2 in HHMMSS format\n * @param int    $duration2  Duration 2 in minutes\n *\n * @return bool  True if the two times overlap, false if they do not.\n */\nfunction times_overlap ( $time1, $duration1, $time2, $duration2 ) {\n  $hour1 = intval ( $time1 / 10000 );\n  $min1 = ( $time1 / 100 ) % 100;\n  $hour2 = intval ( $time2 / 10000 );\n  $min2 = ( $time2 / 100 ) % 100;\n  // Convert to minutes since midnight and\n  // remove 1 minute from duration so 9AM-10AM will not conflict with 10AM-11AM.\n  if ( $duration1 > 0 )\n    $duration1 -= 1;\n\n  if ( $duration2 > 0 )\n    $duration2 -= 1;\n\n  $tmins1start = $hour1 * 60 + $min1;\n  $tmins1end = $tmins1start + $duration1;\n  $tmins2start = $hour2 * 60 + $min2;\n  $tmins2end = $tmins2start + $duration2;\n\n  return ( ( $tmins1start >= $tmins2end ) || ( $tmins2start >= $tmins1end )\n    ? false : true );\n}\n\n/**\n * Updates event status and logs activity\n *\n * @param string $status  A,D,R,W to set cal_status\n * @param string $user    user to apply changes to\n * @param int    $id      event id\n * @param string $type    event type for logging\n *\n * @global string logged in user\n * @global string current error message\n */\nfunction update_status ( $status, $user, $id, $type = 'E' ) {\n  global $error, $login;\n\n  if ( empty ( $status ) )\n    return;\n\n  $log_type = '';\n  switch ( $type ) {\n    case 'N':\n    case 'T':\n      $log_type = '_T';\n      break;\n    case 'J':\n    case 'O':\n      $log_type = '_J';\n  }\n  switch ( $status ) {\n    case 'A':\n      $log_type = constant ( 'LOG_APPROVE' . $log_type );\n      $error_msg = translate ( 'Error approving event XXX.' );\n      break;\n    case 'D':\n      $log_type = constant ( 'LOG_DELETE' . $log_type );\n      $error_msg = translate ( 'Error deleting event XXX.' );\n      break;\n    case 'R':\n      $log_type = constant ( 'LOG_REJECT' . $log_type );\n      $error_msg = translate ( 'Error rejecting event XXX.' );\n  }\n\n  if ( ! dbi_execute ( 'UPDATE webcal_entry_user SET cal_status = ?\n  WHERE cal_login = ?\n    AND cal_id = ?', [$status, $user, $id] ) )\n    $error = str_replace( 'XXX', dbi_error(), $error_msg );\n  else\n    activity_log ( $id, $login, $user, $log_type, '' );\n}\n\n/**\n * Checks the webcal_nonuser_cals table to determine if the user is the\n * administrator for the nonuser calendar.\n *\n * @param string $login    Login of user that is the potential administrator\n * @param string $nonuser  Login name for nonuser calendar\n *\n * @return bool  True if the user is the administrator for the nonuser calendar.\n */\nfunction user_is_nonuser_admin ( $login, $nonuser ) {\n  $rows = dbi_get_cached_rows ( 'SELECT cal_admin FROM webcal_nonuser_cals\n  WHERE cal_login = ?\n    AND cal_admin = ?', [$nonuser, $login] );\n  return ( $rows && ! empty ( $rows[0] ) );\n}\n\n/**\n * Determine if the specified user is a participant in the event.\n * User must have status 'A' or 'W'.\n *\n * @param int    $id    event id\n * @param string $user  user login\n */\nfunction user_is_participant ( $id, $user ) {\n  $ret = false;\n\n  $rows = dbi_get_cached_rows ( 'SELECT COUNT( cal_id ) FROM webcal_entry_user\n    WHERE cal_id = ? AND cal_login = ? AND cal_status IN ( \\'A\\',\\'W\\' )',\n    [$id, $user] );\n  if ( ! $rows )\n    die_miserable_death( str_replace( 'XXX', dbi_error(),\n        translate ( 'Database error XXX.' ) ) );\n\n  if ( ! empty ( $rows[0] ) ) {\n    $row = $rows[0];\n    if ( ! empty ( $row ) )\n      $ret = ( $row[0] > 0 );\n  }\n\n  return $ret;\n}\n\n/**\n * Checks to see if user's IP in in the IP Domain\n * specified by the /includes/blacklist.php file\n *\n * @return bool  Is user's IP in required domain?\n *\n * @see /includes/blacklist.php\n * @todo:  There has to be a way to vastly improve on this logic.\n */\nfunction validate_domain() {\n  global $SELF_REGISTRATION_BLACKLIST;\n\n  if ( empty ( $SELF_REGISTRATION_BLACKLIST ) || $SELF_REGISTRATION_BLACKLIST == 'N' )\n    return true;\n\n  $allow_true = $deny_true = [];\n  $ip_authorized = false;\n  $rmt_long = ip2long ( $_SERVER['REMOTE_ADDR'] );\n  $fd = @fopen ( 'includes/blacklist.php', 'rb', false );\n  if ( ! empty ( $fd ) ) {\n    // We don't use fgets() since it seems to have problems with Mac-formatted\n    // text files.\n    // Instead, we read in the entire file, then split the lines manually.\n    $data = '';\n    while ( ! feof ( $fd ) ) {\n      $data .= fgets ( $fd, 4096 );\n    }\n    fclose ( $fd );\n\n    // Replace any combination of carriage return (\\r) and new line (\\n)\n    // with a single new line.\n    $data = preg_replace ( \"/[\\r\\n]+/\", \"\\n\", $data );\n\n    // Split the data into lines.\n    $blacklistLines = explode ( \"\\n\", $data );\n\n    for ( $n = 0, $cnt = count ( $blacklistLines ); $n < $cnt; $n++ ) {\n      $buffer = trim ( $blacklistLines[$n], \"\\r\\n \" );\n      if ( preg_match ( '/^#/', $buffer ) )\n        continue;\n\n      if ( preg_match ( '/(\\S+):\\s*(\\S+):\\s*(\\S+)/', $buffer, $matches ) ) {\n        $permission = $matches[1];\n        $black_long = ip2long ( $matches[2] );\n        $mask = ip2long ( $matches[3] );\n        if ( $matches[2] == '255.255.255.255' )\n          $black_long = $rmt_long;\n\n        if ( ( $black_long & $mask ) == ( $rmt_long & $mask ) ) {\n          if ( $permission == 'deny' )\n            $deny_true[] = true;\n          elseif ( $permission == 'allow' )\n            $allow_true[] = true;\n        }\n      }\n    }\n    $ip_authorized = ( count ( $deny_true ) && ! count ( $allow_true )\n      ? false : true );\n  }\n\n  return $ip_authorized;\n}\n\n/**\n * Returns either the full name or the abbreviation of the day.\n *\n * @param int     $w       Number of the day in the week (0=Sun,...,6=Sat)\n * @param string  $format  'l' (lowercase L) = Full, 'D' = abbreviation.\n *\n * @return string The weekday name (\"Sunday\" or \"Sun\")\n */\nfunction weekday_name ( $w, $format = 'l' ) {\n  global $lang;\n  static $local_lang, $week_names, $weekday_names;\n\n  // We may have switched languages.\n  if ( $local_lang != $lang )\n    $week_names = $weekday_names = [];\n\n  $local_lang = $lang;\n\n  // We may pass $DISPLAY_LONG_DAYS as $format.\n  if ( $format == 'N' )\n    $format = 'D';\n\n  if ( $format == 'Y' )\n    $format = 'l';\n\n  if ( empty ( $weekday_names[0] ) || empty ( $week_names[0] ) ) {\n    $weekday_names = [\n      translate ( 'Sunday' ),\n      translate ( 'Monday' ),\n      translate ( 'Tuesday' ),\n      translate ( 'Wednesday' ),\n      translate ( 'Thursday' ),\n      translate ( 'Friday' ),\n      translate ( 'Saturday' )];\n\n    $week_names = [\n      translate ( 'Sun' ),\n      translate ( 'Mon' ),\n      translate ( 'Tue' ),\n      translate ( 'Wed' ),\n      translate ( 'Thu' ),\n      translate ( 'Fri' ),\n      translate ( 'Sat' )];\n  }\n\n  if ( $w >= 0 && $w < 7 )\n    return ( $format == 'l' ? $weekday_names[$w] : $week_names[$w] );\n\n  return translate ( 'unknown-weekday' ) . \" ($w)\";\n}\n\n/* ****************************************************************************\n *     Functions for getting information about boss and their assistants.     *\n **************************************************************************** */\n\n/**\n * Checks the boss user preferences to see if the boss must approve events\n * added to their calendar.\n *\n * @param string $assistant  Assistant login\n * @param string $boss       Boss login\n *\n * @return bool  True if the boss must approve new events.\n */\nfunction boss_must_approve_event ( $assistant, $boss ) {\n  if ( user_is_assistant ( $assistant, $boss ) )\n    return ( get_pref_setting ( $boss, 'APPROVE_ASSISTANT_EVENT' ) == 'Y'\n      ? true : false );\n\n  return true;\n}\n\n/**\n * Checks the boss user preferences to see if the boss wants to be notified via\n * email on changes to their calendar.\n *\n * @param string $assistant  Assistant login\n * @param string $boss       Boss login\n *\n * @return bool  True if the boss wants email notifications.\n */\nfunction boss_must_be_notified ( $assistant, $boss ) {\n  if ( user_is_assistant ( $assistant, $boss ) )\n    return ( get_pref_setting ( $boss, 'EMAIL_ASSISTANT_EVENTS' ) == 'Y'\n      ? true : false );\n\n  return true;\n}\n\n/**\n * Is this user an assistant of this boss?\n *\n * @param string $assistant  Login of potential assistant\n * @param string $boss       Login of potential boss\n *\n * @return bool  True or false.\n */\nfunction user_is_assistant ( $assistant, $boss ) {\n  if ( empty ( $boss ) )\n    return false;\n\n  $ret = false;\n  $rows = dbi_get_cached_rows ( 'SELECT * FROM webcal_asst\n  WHERE cal_assistant = ?\n    AND cal_boss = ?', [$assistant, $boss] );\n  if ( $rows ) {\n    $row = $rows[0];\n\n    if ( ! empty ( $row[0] ) )\n      $ret = true;\n  }\n  return $ret;\n}\n\n/**\n * Gets a list of an assistant's boss from the webcal_asst table.\n *\n * @param string $assistant Login of assistant\n *\n * @return array  Array of bosses,\n *                where each boss is an array with the following fields:\n * - <var>cal_login</var>\n * - <var>cal_fullname</var>\n */\nfunction user_get_boss_list ( $assistant ) {\n  global $bosstemp_fullname;\n\n  $count = 0;\n  $ret = [];\n  $rows = dbi_get_cached_rows ( 'SELECT cal_boss FROM webcal_asst\n  WHERE cal_assistant = ?', [$assistant] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      if (!user_load_variables ( $row[0], 'bosstemp_' ))\n        nonuser_load_variables($row[0], 'bosstemp_');\n      $ret[$count++] = [\n        'cal_login' => $row[0],\n        'cal_fullname' => $bosstemp_fullname];\n    }\n  }\n  return $ret;\n}\n\n/**\n * Is this user an assistant?\n *\n * @param string $assistant  Login for user\n *\n * @return bool  true if the user is an assistant to one or more bosses.\n */\nfunction user_has_boss ( $assistant ) {\n  $ret = false;\n  $rows = dbi_get_cached_rows ( 'SELECT * FROM webcal_asst\n  WHERE cal_assistant = ?', [$assistant] );\n  if ( $rows ) {\n    $row = $rows[0];\n     if ( ! empty ( $row[0] ) )\n      $ret = true;\n  }\n  return $ret;\n}\n\n/* ****************************************************************************\n *                       Functions to handle site_extras                      *\n **************************************************************************** */\n\n/**\n * Builds the HTML for the entry popup.\n *\n * @param string $popupid      CSS id to use for event popup\n * @param string $user         Username of user the event pertains to\n * @param string $description  Event description\n * @param string $time         Time of the event\n *                             (already formatted in a display format)\n * @param string $site_extras  HTML for any site_extras for this event\n *\n * @return string  The HTML for the event popup.\n */\nfunction build_entry_popup ( $popupid, $user, $description, $time,\n  $site_extras = '', $location = '', $name = '', $id = '', $reminder = '' ) {\n  global $ALLOW_HTML_DESCRIPTION, $DISABLE_POPUPS, $login,\n  $PARTICIPANTS_IN_POPUP, $popup_fullnames, $popuptemp_fullname,\n  $PUBLIC_ACCESS_VIEW_PART, $SUMMARY_LENGTH, $tempfullname;\n\n  if ( ! empty ( $DISABLE_POPUPS ) && $DISABLE_POPUPS == 'Y' )\n    return;\n\n  // Restrict info if time only set.\n  $details = true;\n  if ( function_exists ( 'access_is_enabled' ) &&\n      access_is_enabled() && $user != $login ) {\n    $time_only = access_user_calendar ( 'time', $user );\n    $details = ( $time_only == 'N' ? 1 : 0 );\n  }\n\n  $ret = '<dl id=\"' . $popupid . '\" class=\"popup\">' . \"\\n\";\n\n  if ( empty ( $popup_fullnames ) )\n    $popup_fullnames = [];\n\n  $partList = [];\n  if ( $details && $id != '' && !\n    empty ( $PARTICIPANTS_IN_POPUP ) && $PARTICIPANTS_IN_POPUP == 'Y' && !\n      ( $PUBLIC_ACCESS_VIEW_PART == 'N' && $login == '__public__' ) ) {\n    $rows = dbi_get_cached_rows ( 'SELECT cal_login, cal_status\n  FROM webcal_entry_user\n  WHERE cal_id = ?\n    AND cal_status IN ( \"A\",\"W\" )', [$id] );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $participants[] = $row;\n      }\n    }\n    for ( $i = 0, $cnt = count ( $participants ); $i < $cnt; $i++ ) {\n      user_load_variables ( $participants[$i][0], 'temp' );\n      $partList[] = $tempfullname . ' '\n       . ( $participants[$i][1] == 'W' ? '(?)' : '' );\n    }\n    $rows = dbi_get_cached_rows ( 'SELECT cal_fullname FROM webcal_entry_ext_user\n  WHERE cal_id = ?\n  ORDER by cal_fullname', [$id] );\n    if ( $rows ) {\n      $extStr = translate ( 'External User' );\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $partList[] = $row[0] . ' (' . $extStr . ')';\n      }\n    }\n  }\n\n  if ( $user != $login ) {\n    if ( empty ( $popup_fullnames[$user] ) ) {\n      user_load_variables ( $user, 'popuptemp_' );\n      $popup_fullnames[$user] = $popuptemp_fullname;\n    }\n    $ret .= '<dt>' . translate ( 'User' )\n     . \":</dt>\\n<dd>$popup_fullnames[$user]</dd>\\n\";\n  }\n  $ret .= ( $SUMMARY_LENGTH < 80 && strlen ( $name ) && $details\n    ? '<dt>' . htmlspecialchars ( substr ( $name, 0, 40 ) ) . \"</dt>\\n\" : '' )\n   . ( strlen ( $time )\n    ? '<dt>' . translate ( 'Time' ) . \":</dt>\\n<dd>$time</dd>\\n\" : '' )\n   . ( ! empty ( $location ) && $details\n    ? '<dt>' . translate ( 'Location' ) . \":</dt>\\n<dd> $location</dd>\\n\" : '' )\n   . ( ! empty ( $reminder ) && $details\n    ? '<dt>' . translate ( 'Send Reminder' ) . \":</dt>\\n<dd> $reminder</dd>\\n\" : '' );\n\n  if ( ! empty ( $partList ) && $details ) {\n    $ret .= '<dt>' . translate ( 'Participants' ) . \":</dt>\\n\";\n    foreach ( $partList as $parts ) {\n      $ret .= \"<dd> $parts</dd>\\n\";\n    }\n  }\n\n  if ( ! empty ( $description ) && $details ) {\n    $ret .= '<dt>' . translate ( 'Description' ) . \":</dt>\\n<dd>\";\n    if ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y' ) {\n      // Replace &s and decode special characters.\n      $str = unhtmlentities (\n        str_replace ( '&amp;amp;', '&amp;',\n          str_replace ( '&', '&amp;', $description ) ) );\n      // If there is no HTML found, then go ahead and replace\n      // the line breaks (\"\\n\") with the HTML break (\"<br />\").\n      $ret .= ( strstr ( $str, '<' ) && strstr ( $str, '>' )\n        ? $str : nl2br ( $str ) );\n    } else\n      // HTML not allowed in description, escape everything.\n      $ret .= nl2br ( htmlspecialchars ( $description ) );\n\n    $ret .= \"</dd>\\n\";\n  } //if $description\n  return $ret . ( empty ( $site_extras ) ? '' : $site_extras ) . \"</dl>\\n\";\n}\n\n/**\n * Formats site_extras for display according to their type.\n *\n * This will return an array containing formatted extras indexed on their\n * unique names. Each formatted extra is another array containing two\n * indices: 'name' and 'data', which hold the name of the site_extra and the\n * formatted data, respectively. So, to access the name and data of an extra\n * uniquely name 'Reminder', you would access\n * <var>$array['Reminder']['name']</var> and\n * <var>$array['Reminder']['data']</var>\n *\n * @param array $extras  Array of site_extras for an event as returned by\n *                       {@link get_site_extra_fields()}\n * @param int   $filter  CONSTANT 'view settings' values from site_extras.php\n *\n * @return array  Array of formatted extras.\n */\nfunction format_site_extras ( $extras, $filter = '' ) {\n  global $site_extras;\n\n  if ( empty ( $site_extras ) || empty ( $extras ) )\n    return;\n\n  $ret = [];\n  foreach ( $site_extras as $site_extra ) {\n    $data = '';\n    $extra_name = $site_extra[0];\n    $extra_desc = $site_extra[1];\n    $extra_type = $site_extra[2];\n    $extra_arg1 = $site_extra[3];\n    $extra_arg2 = $site_extra[4]; // only used in edit pages (not here)\n    if ( ! empty ( $site_extra[5] ) && ! empty ( $filter ) )\n      $extra_view = $site_extra[5] & $filter;\n    if ( ! empty ( $extras[$extra_name] ) && !\n      empty($extras[$extra_name]['cal_name']) && !empty($extra_desc)) {\n      $name = translate ( $extra_desc );\n\n      if ($extra_type == EXTRA_DATE) {\n        if ($extras[$extra_name]['cal_date'] > 0)\n          $data = date_to_str($extras[$extra_name]['cal_date']);\n      } elseif (($extra_type == EXTRA_TEXT || $extra_type == EXTRA_MULTILINETEXT)\n        && !empty($extras[$extra_name]['cal_data'])) {\n        $data = nl2br($extras[$extra_name]['cal_data']);\n      } elseif ($extra_type == EXTRA_RADIO && !empty($extra_arg1[$extras[$extra_name]['cal_data']])) {\n        $data .= $extra_arg1[$extras[$extra_name]['cal_data']];\n      } elseif (!empty($extras[$extra_name]['cal_data'])) {\n        $data .= $extras[$extra_name]['cal_data'];\n      }\n\n      $ret[$extra_name] = ['name' => $name, 'data' => $data];\n    }\n  }\n  return $ret;\n}\n\n/**\n * Gets any site-specific fields for an entry that are stored in the database\n * in the webcal_site_extras table.\n *\n * @param int $eventid  Event ID\n *\n * @return array  Array with the keys as follows:\n *   - <var>cal_name</var>\n *   - <var>cal_type</var>\n *   - <var>cal_date</var>\n *   - <var>cal_remind</var>\n *   - <var>cal_data</var>\n */\nfunction get_site_extra_fields ( $eventid ) {\n  $rows = dbi_get_cached_rows ( 'SELECT cal_name, cal_type, cal_date, cal_remind, cal_data\n  FROM webcal_site_extras\n  WHERE cal_id = ?', [$eventid] );\n  $extras = [];\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      // Save by cal_name (e.g. \"URL\").\n      $extras[$row[0]] = [\n        'cal_name' => $row[0],\n        'cal_type' => $row[1],\n        'cal_date' => $row[2],\n        'cal_remind' => $row[3],\n        'cal_data' => $row[4]];\n    }\n  }\n  return $extras;\n}\n\n/**\n * Extract the names of all site_extras.\n *\n * @param int $filter  CONSTANT 'view setting' from site_extras.php\n *\n * @return array  Array of site_extras names.\n */\nfunction get_site_extras_names ( $filter = '' ) {\n  global $site_extras;\n\n  $ret = [];\n\n  foreach ( $site_extras as $extra ) {\n    if ( $extra == 'FIELDSET' ||\n      ( ! empty ( $extra[5] ) && ! empty ( $filter ) && !\n          ( $extra[5] & $filter ) ) )\n      continue;\n\n    $ret[] = $extra[0];\n  }\n\n  return $ret;\n}\n\n/**\n * Generates the HTML used in an event popup for the site_extras fields.\n *\n * @param int $id  Event ID\n *\n * @return string  The HTML to be used within the event popup for any site_extra\n *                 fields found for the specified event.\n */\nfunction site_extras_for_popup ( $id ) {\n  global $SITE_EXTRAS_IN_POPUP;\n\n  if ( $SITE_EXTRAS_IN_POPUP != 'Y' )\n    return '';\n\n  $extras = format_site_extras ( get_site_extra_fields ( $id ), EXTRA_DISPLAY_POPUP );\n  if ( empty ( $extras ) )\n    return '';\n\n  $ret = '';\n\n  foreach ( $extras as $extra ) {\n    $ret .= '<dt>' . $extra['name'] . \":</dt>\\n<dd>\" . $extra['data'] . \"</dd>\\n\";\n  }\n\n  return $ret;\n}\n\n// Print a box with an error message and a nice error icon.\nfunction print_error_box ( $msg )\n{\n  echo '<div class=\"warningBox\">' .\n    '<table><tr><td class=\"alignmiddle\">' .\n    '<img src=\"images/bootstrap-icons/exclamation-triangle-fill.svg\" width=\"40\" height=\"40\" class=\"alignmiddle\" alt=\"' .\n    translate ( 'Error' ) . '\" /></td><td class=\"alignmiddle\">' .\n    translate('The permissions for the icons directory are set to read-only') .\n    \"</td></tr></table></div>\\n\";\n}\n\n// Convert an HTML color ('#ff00ff') into an array of red/green/blue values\n// of 0 to 255.\nfunction html2rgb($color)\n{\n  if ($color[0] == '#')\n    $color = substr($color, 1);\n\n  if (strlen($color) == 6) {\n    list($r, $g, $b) = [$color[0].$color[1], $color[2].$color[3], $color[4].$color[5]];\n  } elseif (strlen($color) == 3) {\n    list($r, $g, $b) = [$color[0].$color[0], $color[1].$color[1], $color[2].$color[2]];\n  } else {\n    return false;\n  }\n\n  $r = hexdec($r); $g = hexdec($g); $b = hexdec($b);\n\n  return [$r, $g, $b];\n}\n\n// Convert RGB values (0-255) into HTML color ('#ffffff')\nfunction rgb2html($r, $g=-1, $b=-1)\n{\n  if (is_array($r) && sizeof($r) == 3)\n    list($r, $g, $b) = $r;\n\n  $r = intval($r); $g = intval($g);\n  $b = intval($b);\n\n  $r = dechex($r<0?0:($r>255?255:$r));\n  $g = dechex($g<0?0:($g>255?255:$g));\n  $b = dechex($b<0?0:($b>255?255:$b));\n\n  $color = (strlen($r) < 2?'0':'').$r;\n  $color .= (strlen($g) < 2?'0':'').$g;\n  $color .= (strlen($b) < 2?'0':'').$b;\n  return '#'.$color;\n}\n\n/**\n  * Is the current connection using HTTPS rather than HTTP?\n  */\nfunction isSecure() {\n  return\n    (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off')\n    || $_SERVER['SERVER_PORT'] == 443;\n}\n\nfunction sendCookie($name, $value, $expiration=0, $path='', $sensitive=true) {\n  $domain = '';\n  $httpOnly = true; // don't allow JS access to cookies.\n  // If sensitive and HTTPS is supported, set secure to true\n  $secure = $sensitive && isSecure();\n  SetCookie ( $name, $value, $expiration, $path, $domain, $secure, $httpOnly);\n}\n\n?>\n", "<?php\n/**\n* Description:\n* Presents page to view an event with links to edit, delete\n* confirm, copy, add event\n*\n* Input Parameters:\n* id (*) - cal_id of requested event\n* date   - yyyymmdd format of requested event\n* user   - user to display\n* log    - show activity log (any non-empty value)\n* (*) required field\n*/\ninclude_once 'includes/init.php';\ninclude 'includes/xcal.php'; // only to display recurrance info\n// Load Doc classes for attachments and comments\ninclude 'includes/classes/Doc.php';\ninclude 'includes/classes/DocList.php';\ninclude 'includes/classes/AttachmentList.php';\ninclude 'includes/classes/CommentList.php';\n\n// Make sure this user is allowed to look at this calendar.\n$can_approve = $can_edit = $can_view = false;\n$is_my_event = false; // Is this user owner or participant?\n$is_confidential = $is_private = $rss_view  = false;\n$error = $eType = $event_status = '';\n$log = getGetValue ( 'log' );\n$show_log = ! empty ( $log );\n$can_email = 'Y';\n\n$areYouSureStr = translate( 'Are you sure you want to delete this entry?' );\n$pri[1] = translate ( 'High' );\n$pri[2] = translate ( 'Medium' );\n$pri[3] = translate ( 'Low' );\n\nif ( empty ( $id ) || $id <= 0 || ! is_numeric ( $id ) )\n$error = translate ( 'Invalid entry id.' );\n\n$hide_details = ( $login == '__public__' && !\nempty ( $OVERRIDE_PUBLIC ) && $OVERRIDE_PUBLIC == 'Y' );\n\n\n// Check if we can display basic info for RSS FEED\n$rssuser = getGetValue ( 'rssuser' );\nif ( ! empty ( $rssuser ) ) {\n$user_rss_enabled = get_pref_setting ( $rssuser, 'USER_RSS_ENABLED' );\n$user_remote_access = get_pref_setting ( $rssuser, 'USER_REMOTE_ACCESS' );\n$user_rss_timezone = get_pref_setting ( $rssuser, 'TIMEZONE' );\n$rss_view = ( $RSS_ENABLED == 'Y' && $user_rss_enabled == 'Y' &&\n$friendly == 1 && ! empty ( $rssuser ) && isset ( $user_remote_access ) );\nif ( $rss_view == true ) {\nif ( $login == '__public__')\n$user = $rssuser;\n$hide_details = false;\n// Make sure the displayed time is accurate.\nset_env ( 'TZ', $user_rss_timezone );\n}\n}\n\n// Is this user a participant or the creator of the event?\n// If assistant is doing this, then we need to switch login to user in the sql.\n$sqlparm = ( $is_assistant ? $user : $login );\n$res = dbi_execute ( 'SELECT we.cal_id, we.cal_create_by\nFROM webcal_entry we, webcal_entry_user weu\nWHERE we.cal_id = weu.cal_id AND we.cal_id = ?\nAND ( we.cal_create_by = ? OR weu.cal_login = ? )',\n[$id, $sqlparm, $sqlparm] );\nif ( $res ) {\n$row = dbi_fetch_row ( $res );\nif ( $row && $row[0] > 0 ) {\n$can_view = $is_my_event = true;\n$creator = $row[1];\n}\ndbi_free_result ( $res );\n}\n\n// Update the task percentage for this user.\nif ( ! empty ( $_POST ) && $is_my_event ) {\n$upercent = getPostValue ( 'upercent' );\nif ( $upercent >= 0 && $upercent <= 100 ) {\ndbi_execute ( 'UPDATE webcal_entry_user SET cal_percent = ?\nWHERE cal_login = ? AND cal_id = ?',\n[$upercent, $login, $id] );\nactivity_log ( $id, $login, $creator, LOG_UPDATE_T,\ntranslate ( 'Update Task Percentage' ) . ' ' . $upercent . '%' );\n}\n// Check if all other user percent is 100%, if so, set cal_complete date.\n$others_complete = getPostValue ( 'others_complete' );\nif ( $upercent == 100 && $others_complete == 'yes' ) {\ndbi_execute ( 'UPDATE webcal_entry SET cal_completed = ?\nWHERE cal_id = ?', [gmdate ( 'Ymd', time() ), $id] );\nactivity_log ( $id, $login, $creator, LOG_UPDATE_T,\ntranslate ( 'Completed' ) );\n}\n}\n\n// Load event info now.\n$res = dbi_execute ( 'SELECT cal_create_by, cal_date, cal_time, cal_mod_date,\ncal_mod_time, cal_duration, cal_priority, cal_type, cal_access,\ncal_name, cal_description, cal_location, cal_url, cal_due_date,\ncal_due_time, cal_completed FROM webcal_entry WHERE cal_id = ?',\n[$id] );\nif ( ! $res )\n$error = str_replace ('XXX', $id, translate ( 'Invalid entry id XXX.' ) );\nelse {\n$row = dbi_fetch_row ( $res );\nif ( $row ) {\n$create_by = $row[0];\n$orig_date = $row[1];\n$event_time = $row[2];\n$mod_date = $row[3];\n$mod_time = sprintf ( \"%06d\", $row[4] );\n$duration = $row[5];\n$cal_priority = $row[6];\n$cal_type = $row[7];\n$cal_access = $row[8];\nif ( strpos ( 'NT', $cal_type ) !== false )\n$eType = 'task';\nif ( $hide_details ) {\n$description = $name = $overrideStr = translate ( $OVERRIDE_PUBLIC_TEXT );\nif ( ! empty ( $row[11] ) )\n$location = $overrideStr;\nif ( ! empty ( $row[12] ) )\n$url = $overrideStr;\n} else {\n$name = $row[9];\n$description = $row[10];\n$location = $row[11];\n$url = $row[12];\n}\n$due_date = $row[13];\n$due_time = $row[14];\n$cal_completed = $row[15];\n} else\n$error = str_replace ('XXX', $id, translate ( 'Invalid entry id XXX.' ) );\n\ndbi_free_result ( $res );\n}\n\nif ( empty ( $error ) ) {\n// don't shift date if All Day or Untimed\n$display_date = ( $event_time > 0 || ( $event_time == 0 && $duration != 1440 )\n? date ( 'Ymd', date_to_epoch ( $orig_date\n . sprintf ( \"%06d\", $event_time ) ) )\n: $orig_date );\n\nif ( ! empty ( $year ) )\n$thisyear = $year;\n\nif ( ! empty ( $month ) )\n$thismonth = $month;\n\n// Check UAC.\n$euser = ( empty ( $user ) ? ( $is_my_event ? $login : $create_by ) : $user );\n$time_only = 'N';\n\nif ( access_is_enabled() ) {\n$can_approve =\naccess_user_calendar ( 'approve', $euser, $login, $cal_type, $cal_access );\n$can_edit =\naccess_user_calendar ( 'edit', $create_by, $login, $cal_type, $cal_access );\n$can_view =\naccess_user_calendar ( 'view', $euser, $login, $cal_type, $cal_access );\n$time_only =\naccess_user_calendar ( 'time', $euser, $login, $cal_type, $cal_access );\n}\n\nif ( $is_admin || $is_nonuser_admin || $is_assistant )\n$can_view = true;\n\n// Commented out by RJ. Not sure of the reason for this code\n//   if ( ($login != '__public__') && ($PUBLIC_ACCESS_OTHERS == 'Y') ) {\n//     $can_view = true;\n//   }\n\n$can_edit = ( $can_edit || $is_admin || $is_nonuser_admin &&\n$user == $create_by ||\n( $is_assistant && ! $is_private && $user == $create_by ) ||\n( $readonly != 'Y' && ( $login == $create_by || $single_user == 'Y' ) ) );\n\nif ( $readonly == 'Y' || $is_nonuser ||\n( $PUBLIC_ACCESS == 'Y' && $login == '__public__' ) )\n$can_edit = false;\n\nif ( ! $can_view ) {\n// if not a participant in the event, must be allowed to look at\n// other user's calendar.\n$check_group = ( $login == '__public__' && $PUBLIC_ACCESS_OTHERS == 'Y' ) ||\n$ALLOW_VIEW_OTHER == 'Y';\n// If $check_group is true, it means this user can look at the event only if\n// they are in the same group as some of the people in the event. This gets\n// kind of tricky. If there is a participant from a different group, do we\n// still show it? For now, the answer is no. This could be configurable\n// somehow, but how many lines of text would it need in the admin page to\n// describe this scenario? Would confuse 99.9% of users.\n// In summary, make sure at least one event participant is in one of\n// this user's groups.\n$my_users = get_my_users();\n$my_usercnt = count ( $my_users );\nif ( is_array ( $my_users ) && $my_usercnt ) {\n$sql_params = [];\n$sql = 'SELECT we.cal_id FROM webcal_entry we, webcal_entry_user weu\nWHERE we.cal_id = weu.cal_id AND we.cal_id = ? AND weu.cal_login IN ( ';\n$sql_params[] = $id;\nfor ( $i = 0; $i < $my_usercnt; $i++ ) {\n$sql .= ( $i > 0 ? ', ' : '' ) . '?';\n$sql_params[] = $my_users[$i]['cal_login'];\n}\n$res = dbi_execute ( $sql . ' )', $sql_params );\nif ( $res ) {\n$row = dbi_fetch_row ( $res );\nif ( $row && $row[0] > 0 )\n  $can_view = true;\n\ndbi_free_result ( $res );\n}\n}\n// If we didn't indicate we need to check groups,\n// then this user can't view this event.\nif ( ! $check_group || access_is_enabled() )\n$can_view = false;\n}\n} //end $error test\n\n// If they still cannot view, make sure they are not looking at a nonuser\n// calendar event where the nonuser is the _only_ participant.\nif ( empty ( $error ) && ! $can_view && !\nempty ( $NONUSER_ENABLED ) && $NONUSER_ENABLED == 'Y' ) {\n$nonusers = get_nonuser_cals();\n$nonuser_lookup = [];\nfor ( $i = 0, $cnt = count ( $nonusers ); $i < $cnt; $i++ ) {\n$nonuser_lookup[$nonusers[$i]['cal_login']] = 1;\n}\n$res = dbi_execute ( 'SELECT cal_login FROM webcal_entry_user WHERE cal_id = ? ' .\n'AND cal_status IN (\\'A\\',\\'W\\')', [$id] );\n$found_nonuser_cal = $found_reg_user = false;\nif ( $res ) {\nwhile ( $row = dbi_fetch_row ( $res ) ) {\nif ( ! empty ( $nonuser_lookup[$row[0]] ) )\n$found_nonuser_cal = true;\nelse\n$found_reg_user = true;\n}\ndbi_free_result ( $res );\n}\n// Does this event contain only nonuser calendars as participants?\n// If so, then grant access.\nif ( $found_nonuser_cal && ! $found_reg_user && ! access_is_enabled() )\n$can_view = true;\n}\n\n// Final case. If 'public visible by default' is on and 'public' is\n// a participant to this event, then anyone can view the event.\nif ( ! $can_view && ! empty ( $PUBLIC_ACCESS_DEFAULT_VISIBLE ) &&\n$PUBLIC_ACCESS_DEFAULT_VISIBLE == 'Y' ) {\n// check to see if 'public' was a participant\n$res = dbi_execute ( 'SELECT cal_login\nFROM webcal_entry_user\nWHERE cal_id = ?\nAND cal_login = \"__public__\"\nAND cal_status IN (\\'A\\',\\'W\\')', [$id] );\nif ( $res ) {\nwhile ( $row = dbi_fetch_row ( $res ) ) {\nif ( ! empty ( $row[0] ) && $row[0] == '__public__' ) {\n// public is participant\n$can_view = true;\n}\n}\ndbi_free_result ( $res );\n}\n}\n\n$printerStr = generate_printer_friendly ( 'view_entry.php' );\n\nprint_header();\n\nif ( ! empty ( $error ) ) {\necho print_error ( $error ) . print_trailer();\nexit;\n}\n\nif ( ! empty ( $user ) && $login != $user ) {\n// If viewing another user's calendar, check the status of the\n// event on their calendar (to see if it's deleted).\n$res = dbi_execute ( 'SELECT cal_status FROM webcal_entry_user\nWHERE cal_login = ?\nAND cal_id = ?', [$user, $id] );\nif ( $res ) {\nif ( $row = dbi_fetch_row ( $res ) )\n$event_status = $row[0];\n\ndbi_free_result ( $res );\n}\n} else {\n// We are viewing event on user's own calendar, so check the\n// status on their own calendar.\n$res = dbi_execute ( 'SELECT cal_id, cal_status FROM webcal_entry_user\nWHERE cal_login = ?\nAND cal_id = ?', [$login, $id] );\nif ( $res ) {\n$row = dbi_fetch_row ( $res );\n$event_status = $row[1];\ndbi_free_result ( $res );\n}\n}\n// This section commented out by RJ\n// This code allows viewing events not otherwise authorized\n\n// At this point, if we don't have the event status, then this user is not\n// viewing an event from his own calendar and not viewing an event from someone\n// else's calendar. They probably got here from the search results page\n// (or possibly by hand typing in the URL.)\n// Check to make sure that it hasn't been deleted from everyone's calendar.\n//if ( empty ( $event_status ) ) {\n//  $res = dbi_execute ( 'SELECT cal_status FROM webcal_entry_user\n//  WHERE cal_status <> \"D\"\n//  ORDER BY cal_status', [] );\n// if ( $res ) {\n//    if ( $row = dbi_fetch_row ( $res ) )\n//      $event_status = $row[0];\n\n//    dbi_free_result ( $res );\n//  }\n//}\n\n// If we have no event status yet, it must have been deleted.\nif ( ( empty ( $event_status ) && ! $is_admin ) ||\n( ! $can_view && empty ( $rss_view ) ) ) {\necho print_not_auth ( true ) . print_trailer();\nexit;\n}\n\n// We can bypass $can_view if coming from RSS\nif ( ( ! $can_view && empty ( $rss_view ) ) ) {\necho print_not_auth ( true ) . print_trailer();\nexit;\n}\n// save date so the trailer links are for the same time period\n$thisyear = intval ( $orig_date / 10000 );\n$thismonth = ( $orig_date / 100 ) % 100;\n$thisday = $orig_date % 100;\n// $subject is used for mailto URLs.\n$subject = generate_application_name() . ': ' . $name;\n// Remove the '\"' character since it causes some mailers to barf\n$subject = str_replace ( ' \"', '', $subject );\n$subject = htmlspecialchars ( $subject );\n\n$event_repeats = false;\n// Build info string for repeating events and end date.\n$res = dbi_execute ( 'SELECT cal_type FROM webcal_entry_repeats\nWHERE cal_id = ?', [$id] );\n$rep_str = '';\nif ( $res ) {\nif ( $tmprow = dbi_fetch_row ( $res ) )\n$event_repeats = true;\n\ndbi_free_result ( $res );\n}\n/* calculate end time */\n$end_str = ( $event_time >= 0 && $duration > 0\n? '-' . display_time ( $display_date\n. add_duration ( $event_time, $duration % 1440 ), 2 )\n: '' );\n\n// get the email adress of the creator of the entry\nuser_load_variables ( $create_by, 'createby_' );\n$email_addr = empty ( $createby_email ) ? '' : $createby_email;\n\n// If Private and not this user's event or\n// Confidential and not user's and not assistant,\n// then they cannot see name or description.\n// if ( $row[8] == \"R\" && ! $is_my_event && ! $is_admin ) {\nif ( $cal_access == 'R' && ! $is_my_event && ! access_is_enabled() ) {\n$is_private = true;\n$description = $name = '[' . translate ( 'Private' ) . ']';\n} else if ( $cal_access == 'C' && ! $is_my_event && ! $is_assistant && !\naccess_is_enabled() ) {\n$is_confidential = true;\n$description = $name = '[' . translate ( 'Confidential' ) . ']';\n}\n$event_date = ( $event_repeats && ! empty ( $date ) ? $date : $orig_date );\n\n// Get category Info\nif ( $CATEGORIES_ENABLED == 'Y' ) {\n$categories = get_categories_by_id ( $id,\n( ( ! empty ( $user ) && strlen ( $user ) ) && ( $is_assistant || $is_admin )\n? $user : $login ), true );\n$category = implode ( ', ', $categories );\n}\n\n// get reminders\n$reminder = getReminders ( $id, true );\n?>\n<div class=\"row\">\n<div class=\"col\" id=\"view-event-title\"><h2>\n<?php\n\necho htmlentities($name) . ( $is_nonuser_admin ||\n( $is_admin && ! empty ( $user ) && $user == '__public__' )\n? '  ( ' . translate ( 'Admin mode' ) . ' )' : '' )\n. ( $is_assistant ? ' ( ' . translate ( 'Assistant mode' ) . ' )' : '' );\necho \"    </h2></div>\\n  </div>\\n\";\n\necho '<div class=\"row\"><div class=\"col-3\">' . translate ( 'Description' ) . \"</div>\\n\";\necho '<div class=\"col-9\">';\n\nif ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y' ) {\n$str = $description;\n// $str = str_replace ( '&', '&amp;', $description );\n$str = str_replace ( '&amp;amp;', '&amp;', $str );\n// If there is no HTML found, then go ahead and replace\n// the line breaks (\"\\n\") with the HTML break.\necho ( strstr ( $str, '<' ) && strstr ( $str, '>' )\n? $str // found some html...\n: nl2br ( activate_urls ( $str ) ) );\n} else {\necho nl2br ( activate_urls ( htmlspecialchars ( $description ) ) );\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\nif ($DISABLE_LOCATION_FIELD != 'Y' && !empty($location)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Description') . \"</div>\\n\";\necho '<div class=\"col-9\">'  . $location . \"</div>\\n\";\necho '<div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif (!empty($url)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('URL') . \"</div>\\n\";\necho '<div class=\"col-9\">' . activate_urls($url) . \"</div>\\n\";\necho '<div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($event_status != 'A' && !empty($event_status)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Status') . \"</div>\\n\";\necho '<div class=\"col-9\">';\nif ($event_status == 'D')\necho ($eType == 'task'\n? translate('Declined') : translate('Deleted'));\nelseif ($event_status == 'R')\necho translate('Rejected');\nelseif ($event_status == 'W')\necho ($eType == 'task'\n? translate('Needs-Action') : translate('Waiting for approval'));\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\necho '<div class=\"row\"><div class=\"col-3\">' . ($eType == 'task' ? translate('Start Date') : translate('Date')) . \"</div>\\n\";\necho '<div class=\"col-9\">' . date_to_str($display_date);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\nif ($eType == 'task') {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Start Time') . \"</div>\\n\";\necho '<div class=\"col-9\">' . display_time($display_date . sprintf(\"%06d\", $event_time), 2);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Due Date') . \"</div>\\n\";\necho '<div class=\"col-9\">' . date_to_str($due_date);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\nif (!empty($cal_completed)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Completed') . \"</div>\\n\";\necho '<div class=\"col-9\">' . date_to_str($cal_completed);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n}\n\nif ($event_repeats) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Repeat Type') . \"</div>\\n\";\necho '<div class=\"col-9\">' . export_recurrence_ical($id, true);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($eType != 'task' && $event_time >= 0) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Start Time') . \"</div>\\n\";\necho '<div class=\"col-9\">';\necho ($duration == 1440 && $event_time == 0\n? translate('All day event')\n: display_time(\n$display_date . sprintf(\"%06d\", $event_time),\n// Display TZID if no end time\n(empty($end_str) ? 2 : 0)\n)\n. $end_str);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($duration > 0 && $duration != 1440) {\n$dur_h = intval($duration / 60);\n$dur_m = $duration - ($dur_h * 60);\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Duration') . \"</div>\\n\";\necho '<div class=\"col-9\">';\necho ($dur_h > 0 ? $dur_h . ' ' . translate('hour'\n. ($dur_h == 1 ? '' : 's')) . ' ' : '')\n. ($dur_m > 0 ? $dur_m . ' ' . translate('minutes') : '');\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($DISABLE_PRIORITY_FIELD != 'Y') {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Priority') . \"</div>\\n\";\necho '<div class=\"col-9\">' . $cal_priority . '-' . $pri[ceil($cal_priority / 3)];\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Access') . \"</div>\\n\";\necho '<div class=\"col-9\">';\nswitch ($cal_access) {\ncase 'P':\necho translate('Public');\nbreak;\ncase 'C':\necho translate('Confidential');\nbreak;\ndefault:\necho translate('Private');\nbreak;\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\nif ($CATEGORIES_ENABLED == 'Y' && !empty($category)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Category') . \"</div>\\n\";\necho '<div class=\"col-9\">' . $category;\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n// Display who originally created event\n// useful if assistant or Admin\n$proxy_fullname = '';\nif ( ! empty ( $DISPLAY_CREATED_BYPROXY ) && $DISPLAY_CREATED_BYPROXY == 'Y' ) {\n$res = dbi_execute ( 'SELECT cal_login FROM webcal_entry_log\nWHERE webcal_entry_log.cal_entry_id = ? AND webcal_entry_log.cal_type = \\'C\\'',\n[$id] );\nif ( $res ) {\n$row3 = dbi_fetch_row ( $res );\nif ( $row3 ) {\nuser_load_variables ( $row3[0], 'proxy_' );\n$proxy_fullname = ( $createby_fullname == $proxy_fullname\n? '' : ' ( ' . translate ( 'by' ) . ' ' . $proxy_fullname . ' )' );\n}\ndbi_free_result ( $res );\n}\n}\n\nif ($single_user == 'N' && !empty($createby_fullname)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Created by') . \"</div>\\n\";\necho '<div class=\"col-9\">';\nif ($is_private && !access_is_enabled()) {\necho '[' . translate('Private') . ']';\n} else if ($is_confidential && !access_is_enabled()) {\necho '[' . translate('Confidential') . ']';\n} else {\nif (access_is_enabled()) {\n$can_email = access_user_calendar('email', $create_by);\n}\n$pubAccStr = ($row[0] == '__public__') ? translate('Public Access') : $createby_fullname;\nif (strlen($email_addr) && $can_email != 'N') {\necho '<a href=\"mailto:' . $email_addr . '?subject=' . $subject . '\">'\n. $pubAccStr . '</a>';\n} else {\necho $pubAccStr;\n}\necho $proxy_fullname;\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif (!empty($mod_date)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Updated') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n//if (!empty($GENERAL_USE_GMT) && $GENERAL_USE_GMT == 'Y') {\n//echo date_to_str($mod_date) . ' ' . display_time($mod_date . $mod_time, 3);\n//} else {\necho date_to_str(date('Ymd', date_to_epoch($mod_date . $mod_time)))\n. ' ' . display_time($mod_date . $mod_time, 2);\n//}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n// Display the reminder info if found.\nif (!empty($reminder)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Send Reminder') . \"</div>\\n\";\necho '<div class=\"col-9\">' . $reminder;\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n// load any site-specific fields and display them\n$extras = get_site_extra_fields($id);\n$site_extracnt = count($site_extras);\nfor ($i = 0; $i < $site_extracnt; $i++) {\nif ($site_extras[$i] == 'FIELDSET') continue;\n$extra_name = $site_extras[$i][0];\n$extra_type = $site_extras[$i][2];\n$extra_arg1 = $site_extras[$i][3];\n$extra_arg2 = $site_extras[$i][4];\nif (!empty($site_extras[$i][5]))\n$extra_view = $site_extras[$i][5] & EXTRA_DISPLAY_VIEW;\nif (!empty($extras[$extra_name]['cal_name'])  && !empty($extra_view)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate($site_extras[$i][1]) . \"</div>\\n\";\necho '<div class=\"col-9\">';\nif ($extra_type == EXTRA_URL) {\n$target = (!empty($extra_arg1) ? ' target=\"' . $extra_arg1 . '\" ' : '');\necho (strlen($extras[$extra_name]['cal_data']) ? '<a href=\"'\n. $extras[$extra_name]['cal_data'] . '\"' . $target . '>'\n. $extras[$extra_name]['cal_data'] . '</a>' : '');\n} elseif ($extra_type == EXTRA_EMAIL)\necho (strlen($extras[$extra_name]['cal_data']) ? '<a href=\"mailto:'\n. $extras[$extra_name]['cal_data'] . '?subject=' . $subject . '\">'\n. $extras[$extra_name]['cal_data'] . '</a>' : '');\nelseif ($extra_type == EXTRA_DATE)\necho ($extras[$extra_name]['cal_date'] > 0\n? date_to_str($extras[$extra_name]['cal_date']) : '');\nelseif ($extra_type == EXTRA_TEXT || $extra_type == EXTRA_MULTILINETEXT)\necho nl2br($extras[$extra_name]['cal_data']);\nelseif (\n$extra_type == EXTRA_USER || $extra_type == EXTRA_SELECTLIST\n|| $extra_type == EXTRA_CHECKBOX\n)\necho $extras[$extra_name]['cal_data'];\nelseif ($extra_type == EXTRA_RADIO)\necho $extra_arg1[$extras[$extra_name]['cal_data']];\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n}\n// participants\n// Only ask for participants if we are multi-user.\n$allmails = [];\n$show_participants = ( $DISABLE_PARTICIPANTS_FIELD != 'Y' );\nif ( $is_admin )\n$show_participants = true;\n\nif ( $PUBLIC_ACCESS == 'Y' && $login == '__public__' &&\n( $PUBLIC_ACCESS_OTHERS != 'Y' || $PUBLIC_ACCESS_VIEW_PART == 'N' ) )\n$show_participants = false;\n\nif ( $single_user == 'N' && $show_participants ) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Participants') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n$num_app = $num_rej = $num_wait = 0;\nif ( $is_private && ! access_is_enabled() )\necho '[' . translate ( 'Private' ) . ']';\nelse\nif ( $is_confidential && ! access_is_enabled() )\necho '[' . translate ( 'Confidential' ) . ']';\nelse {\n$res = dbi_execute ( 'SELECT cal_login, cal_status, cal_percent\nFROM webcal_entry_user WHERE cal_id = ?'\n. ( $eType == 'task' ? ' AND cal_status IN ( \\'A\\', \\'W\\' )' : '' ),\n[$id] );\n$first = 1;\nif ( $res ) {\nwhile ( $row = dbi_fetch_row ( $res ) ) {\n$participants[] = $row;\n$pname = $row[0];\n\nif ( $row[1] == 'A' )\n  $approved[$num_app++] = $pname;\nelseif ( $row[1] == 'R' )\n  $rejected[$num_rej++] = $pname;\nelseif ( $row[1] == 'W' )\n  $waiting[$num_wait++] = $pname;\n}\ndbi_free_result ( $res );\n} else\ndb_error() . '<br />';\n}\nif ( $eType == 'task' ) {\necho '\n  <table border=\"1\" width=\"80%\" cellpadding=\"1\">\n    <th class=\"aligncenter\">' . translate ( 'Participants' ) . '</th>\n    <th class=\"aligncenter\" colspan=\"2\">'\n. translate ( 'Percentage Complete' ) . '</th>';\n$others_complete = 'yes';\nfor ( $i = 0, $cnt = count ( $participants ); $i < $cnt; $i++ ) {\nuser_load_variables ( $participants[$i][0], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\n$spacer = 100 - $participants[$i][2];\n$percentage = $participants[$i][2];\nif ( $participants[$i][0] == $login )\n$login_percentage = $participants[$i][2];\nelse\nif ( $participants[$i][2] < 100 )\n$others_complete = 'no';\n\necho '\n    <tr>\n      <td width=\"30%\">';\nif ( strlen ( $tempemail ) && $can_email != 'N' ) {\necho '<a href=\"mailto:' . $tempemail . '?subject=' . $subject\n . '\">&nbsp;' . $tempfullname . '</a>';\n$allmails[] = $tempemail;\n} else\necho '&nbsp;' . $tempfullname;\n\necho '</td>\n      <td width=\"5%\" class=\"aligncenter\">' . $percentage . '%</td>\n      <td width=\"65%\">\n\t<img src=\"images/pix.gif\" width=\"' . $percentage\n. '%\" height=\"10\">\n\t<img src=\"images/spacer.gif\" width=\"' . $spacer\n. '\" height=\"10\">\n      </td>\n    </tr>';\n}\necho '\n  </table>';\n} else {\nfor ( $i = 0; $i < $num_app; $i++ ) {\nuser_load_variables ( $approved[$i], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\necho '\n  ';\nif ( strlen ( $tempemail ) > 0 && $can_email != 'N' ) {\necho '<a href=\"mailto:' . $tempemail . '?subject=' . $subject . '\">'\n . $tempfullname . '</a>';\n$allmails[] = $tempemail;\n} else\necho $tempfullname;\n\necho '<br />';\n}\n// show external users here...\nif ( ! empty ( $ALLOW_EXTERNAL_USERS ) && $ALLOW_EXTERNAL_USERS == 'Y' ) {\n$external_users = event_get_external_users ( $id, 1 );\n$ext_users = explode ( \"\\n\", $external_users );\nif ( is_array ( $ext_users ) ) {\n$externUserStr = translate ( 'External User' );\nfor ( $i = 0, $cnt = count ( $ext_users ); $i < $cnt; $i++ ) {\n  if ( ! empty ( $ext_users[$i] ) ) {\n    echo '\n  ' . $ext_users[$i] . ' (' . $externUserStr . ')<br />';\n    if ( preg_match ( '/mailto: (\\S+)\"/', $ext_users[$i], $match ) )\n      $allmails[] = $match[1];\n  }\n}\n}\n}\nfor ( $i = 0; $i < $num_wait; $i++ ) {\nuser_load_variables ( $waiting[$i], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\necho '\n  ';\nif ( strlen ( $tempemail ) > 0 && $can_email != 'N' ) {\necho '<a href=\"mailto:' . $tempemail . '?subject=' . $subject . '\">'\n . $tempfullname . '</a>';\n$allmails[] = $tempemail;\n} else\necho $tempfullname;\n\necho ' (?)<br />';\n}\nfor ( $i = 0; $i < $num_rej; $i++ ) {\nuser_load_variables ( $rejected[$i], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\n\necho '\n  <strike>' . ( strlen ( $tempemail ) > 0 && $can_email != 'N'\n? '<a href=\"mailto:' . $tempemail . '?subject=' . $subject . '\">'\n . $tempfullname . '</a>'\n: $tempfullname ) . '</strike> (' . translate ( 'Rejected' ) . ')<br />';\n}\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n} // end participants\n\n$can_edit = ( $can_edit || $is_admin || $is_nonuser_admin &&\n( $user == $create_by ) ||\n( $is_assistant && ! $is_private && ( $user == $create_by ) ) ||\n( $readonly != 'Y' && ( $login != '__public__' && $login == $create_by ||\n$single_user == 'Y' ) ) );\n\nif ( empty ( $event_status ) ) {\n// this only happens when an admin views a deleted event that he is\n// not a participant for. Set to $event_status to \"D\" just to get\n// rid of all the edit/delete links below.\n$event_status = 'D';\n}\n\nif ( $eType == 'task' ) {\n// allow user to update their task completion percentage\nif ( empty ( $user ) && $readonly != 'Y' && $is_my_event &&\n( $login != '__public__' ) && ! $is_nonuser && $event_status != 'D' ) {\necho '<div class=\"row\"><div class=\"col-3\">';\necho '<form action=\"view_entry.php?id=' . $id\n. '\" method=\"post\" name=\"setpercentage\">' . csrf_form_key() . '\n    <input type=\"hidden\" name=\"others_complete\" value=\"'\n. $others_complete . '\" />' . translate ( 'Update Task Percentage' ) . '</div>';\necho '<div class=\"col-9\"><select name=\"upercent\" id=\"task_percent\">';\nfor ( $i = 0; $i <= 100; $i += 10 ) {\necho '\n      <option value=\"' . \"$i\\\" \" . ( $login_percentage == $i\n? ' selected=\"selected\"':'' ) . ' >' . $i . '</option>';\n}\necho '\n    </select>&nbsp;\n    <input type=\"submit\" value=\"' . translate ( 'Update' ) . '\" />\n  </form>';\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n}\n\nif ( Doc::attachmentsEnabled() && $rss_view == false ) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Attachments') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n$attList = new AttachmentList( $id );\nfor ( $i = 0; $i < $attList->getSize(); $i++ ) {\n$a = $attList->getDoc ( $i );\necho \"<div class=\\\"mt-2 pb-3 p-2 eventattachment\\\">\\n\";\necho ' ' . $a->getSummary();\n\n// Dropdown menu for actions on this attachment\necho '&nbsp;<div class=\"btn-group dropleft float-right\">' . \n'<button type=\"button\" class=\"btn btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">' . \n'</button><div class=\"dropdown-menu\">';\n$url = 'doc.php?blid=' . $a->getId();\necho '<a class=\"dropdown-item\" href=\"' . $url . '\">' . translate('View') . '</a>';\n// TODO: Allow editing of an attachment\n// show delete link if user can delete\necho ( $is_admin || $login == $a->getLogin()\n|| user_is_assistant( $login, $a->getLogin() ) || $login == $create_by\n|| user_is_assistant( $login, $create_by ) )\n? '<a class=\"dropdown-item\" href=\"docdel.php?blid=' . $a->getId()\n. '&csrf_form_key=' . getFormKey()\n. '\" onclick=\"return confirm( \\'' . $areYouSureStr . '\\' );\">'\n. translate('Delete') . '</a>' : '';\necho '</div></div>' . \"\\n\";\n// Show images; limit height to 35% of viewport size.\nif ( $a->getMimeType() == 'image/jpeg' || $a->getMimeType() == 'image/png' ||\n$a->getMimeType() == 'image/gif' ) {\necho '<br><a href=\"doc.php?blid=' . $a->getId() .\n'\"><img src=\"doc.php?blid=' . $a->getId() . '\"' .\n' style=\"max-height:35vh; width: auto\" /></a>';\n}\necho \"</div>\\n\";\n}\n$num_app = $num_rej = $num_wait = 0;\n$num_attach = $attList->getSize();\n\necho ( $num_attach == 0 ? ' ' . translate ( 'None' ) . '<br />' :'' );\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ( Doc::commentsEnabled() ) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Comments') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n\n$comList = new CommentList( $id );\n$num_comment = $comList->getSize();\n$comment_text = '';\nfor ( $i = 0; $i < $num_comment; $i++ ) {\n$comment_text .= \"<div class=\\\"p-2 m-2 eventcomment\\\">\\n\";\n$cmt = $comList->getDoc ( $i );\nuser_load_variables ( $cmt->getLogin(), 'cmt_' );\n$comment_text .= '\n  <strong>' . htmlspecialchars ( $cmt->getDescription() )\n. '</strong> - ' . $cmt_fullname . ' ' . translate ( 'at' ) . ' '\n. date_to_str ( $cmt->getModDate(), '', false, true ) . ' '\n. display_time ( $cmt->getModTime(), 2 );\n\n// Dropdown menu for actions on this comment\n$comment_text .= '&nbsp;<div class=\"btn-group dropleft float-right\">' . \n'<button type=\"button\" class=\"btn btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">' . \n'</button>' . \"\\n\"  . '<div class=\"dropdown-menu\">';\n// show delete link if user can delete\nif ($is_admin || $login == $cmt->getLogin()\n|| user_is_assistant($login, $cmt->getLogin()) || $login == $create_by\n|| user_is_assistant($login, $create_by)) {\n$comment_text .= '<a class=\"dropdown-item\" href=\"docdel.php?blid=' . $cmt->getId()\n. '&csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr . '\\' );\">'\n. translate('Delete') . '</a>';\n}\n$comment_text .= '</div></div><hr>' . \"\\n\";\n//$comment_text .= '<br />  <blockquote class=\"eventcomment\">';\nif ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y' ) {\n$str = $cmt->getData();\n$str = str_replace ( '&amp;amp;', '&amp;', $str );\n// If there is no HTML found, then go ahead and replace\n// the line breaks (\"\\n\") with the HTML break.\n$comment_text .= ( strstr ( $str, '<' ) && strstr ( $str, '>' )\n? $str // found some html...\n: nl2br ( activate_urls ( $str ) ) );\n} else {\n$comment_text .= nl2br ( activate_urls (\nhtmlspecialchars( $cmt->getData() ) ) );\n}\n//$comment_text .= '</blockquote><div style=\"clear:both\"></div>';\n$comment_text .= \"</div>\\n\";\n}\n\nif ( $num_comment == 0 )\necho translate ( 'None' ) . '<br />';\nelse {\necho '\n  ' . $num_comment . ' ' . translate ( 'comments' ) . '\n  <input class=\"btn\" id=\"showbutton\" type=\"button\" value=\"' . translate ( 'Show' )\n. '\" onclick=\"showComments();\" />\n  <input class=\"btn\" id=\"hidebutton\" type=\"button\" value=\"' . translate ( 'Hide' )\n. '\" onclick=\"hideComments();\" /><br />\n  <div id=\"comtext\">' . $comment_text . '</div>';\n// We could put the following JS in includes/js/view_entry.php,\n// but we won't need it in many cases and we don't know whether\n// we need it until after would need to include it.\n// So, we will include it here instead.\n?>\n<script>\n<!-- <![CDATA[\nfunction showComments() {\nvar x = document.getElementById ( \"comtext\" )\nif ( x ) {\nx.style.display = \"block\";\n}\nx = document.getElementById ( \"showbutton\" )\nif ( x ) {\nx.style.display = \"none\";\n}\nx = document.getElementById ( \"hidebutton\" )\nif ( x ) {\nx.style.display = \"block\";\n}\n}\nfunction hideComments() {\nvar x = document.getElementById ( \"comtext\" )\nif ( x ) {\nx.style.display = \"none\";\n}\nx = document.getElementById ( \"showbutton\" )\nif ( x ) {\nx.style.display = \"block\";\n}\nx = document.getElementById ( \"hidebutton\" )\nif ( x ) {\nx.style.display = \"none\";\n}\n}\nhideComments();\n//]]> -->\n</script>\n<?php\n}\n\n$num_app = $num_rej = $num_wait = 0;\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n$rdate = ( $event_repeats ? '&amp;date=' . $event_date : '' );\n\n$u_url = ( ! empty ( $user ) && $login != $user ? \"&amp;user=$user\" : '' );\n\necho \"</div>\\n\"; // End of container\n\necho '<div class=\"row\"><div class=\"col-12\">' . \"\\n\";\necho '<ul class=\"noprint list-action-options\">';\n\n// Show a printer-friendly link\nif ( empty ( $friendly ) )\n  echo $printerStr;\n\nif ( ( $is_my_event || $is_nonuser_admin || $is_assistant || $can_approve )\n    && $readonly == 'N' && $login != '__public__') {\n  if ( $event_status != 'A' ) {\n    $approveStr = translate( 'Approve/Confirm entry' );\n    echo '\n        <li><a title=\"' . $approveStr\n     . '\" class=\"nav\" href=\"approve_entry.php?id=' . $id . $u_url\n     . '&amp;type=E\" onclick=\"return confirm( \\''\n     . translate( 'Approve this entry?', true ) . '\\' );\">'\n     . $approveStr . '</a></li>';\n  }\n  if ( $event_status != 'R' ) {\n    $rejectStr = translate( 'Reject entry' );\n    echo '\n        <li><a title=\"' . $rejectStr\n     . '\" class=\"nav\" href=\"reject_entry.php?id=' . $id . $u_url\n     . '&amp;type=E\" onclick=\"return confirm( \\''\n     . translate( 'Reject this entry?', true ) . '\\' );\">'\n     . $rejectStr . '</a></li>';\n  }\n}\n\n// TODO add these permissions to the UAC list\n$can_add_attach = ( Doc::attachmentsEnabled() && $login != '__public__'\n  && ( ( $login == $create_by ) || ( $is_my_event && $ALLOW_ATTACH_PART == 'Y' ) ||\n  ( $ALLOW_ATTACH_ANY == 'Y' ) || $is_admin ) );\n\n$can_add_comment = ( Doc::commentsEnabled() && $login != '__public__'\n  && ( ( $login == $create_by ) ||  ( $is_my_event && $ALLOW_COMMENTS_PART == 'Y' ) ||\n  ( $ALLOW_COMMENTS_ANY == 'Y' ) || $is_admin ) );\n\nif ( $can_add_attach && $event_status != 'D' ) {\n  $addAttchStr = translate ( 'Add Attachment' );\n  echo '\n      <li><a title=\"' . $addAttchStr\n   . '\" class=\"nav\" href=\"docadd.php?type=A&amp;id=' . $id\n   . $u_url . '\">' . $addAttchStr\n   . '</a></li>';\n}\n\nif ( $can_add_comment && $event_status != 'D' ) {\n  $addCommentStr = translate ( 'Add Comment' );\n  echo '\n      <li><a title=\"' . $addCommentStr\n   . '\" class=\"nav\" href=\"docadd.php?type=C&amp;id=' . $id\n   . $u_url . '\">' . $addCommentStr\n   . '</a></li>';\n}\n\n// If approved, but event category not set (and user does not have permission\n// to edit where they could also set the category), then allow them to\n// set it through set_cat.php.\nif ( empty ( $user ) && $CATEGORIES_ENABLED == 'Y' && $readonly != 'Y' &&\n    $is_my_event && $login != '__public__' && !\n    $is_nonuser && $event_status != 'D' && ! $can_edit ) {\n  $setCatStr = translate ( 'Set category' );\n  echo '\n      <li><a title=\"' . $setCatStr . '\" class=\"nav\" href=\"set_entry_cat.php?id='\n   . $id . $rdate . '\">' . $setCatStr . '</a></li>';\n}\n\n$addToMineStr = translate ( 'Add to My Calendar' );\n$copyStr = translate ( 'Copy entry' );\n$deleteAllStr = translate ( 'This will delete this entry for all users.', true );\n$deleteEntryStr = translate ( 'Delete entry' );\n$editEntryStr = translate ( 'Edit entry' );\n\n//TODO Don't show if $user != $login and not assistant\n// This will be easier with UAC always on\nif ( $can_edit && $event_status != 'D' && ! $is_nonuser && $readonly != 'Y' ) {\n  if ( $event_repeats ) {\n    $editAllDatesStr = translate ( 'Edit repeating entry for all dates' );\n    $deleteAllDatesStr = translate ( 'Delete repeating event for all dates' );\n    echo '\n      <li><a title=\"' . $editAllDatesStr\n     . '\" class=\"nav\" href=\"edit_entry.php?id=' . $id . $u_url . '\">'\n     . $editAllDatesStr . '</a></li>';\n    // Don't allow override of first event\n    if ( ! empty ( $date ) && $date != $orig_date ) {\n      $editThisDateStr = translate ( 'Edit entry for this date' );\n      echo '\n      <li><a title=\"' . $editThisDateStr . '\" class=\"nav\" '\n       . 'href=\"edit_entry.php?id=' . $id . $u_url . $rdate . '&amp;override=1\">'\n       . $editThisDateStr . '</a></li>';\n    }\n    echo '\n      <li><a title=\"' . $deleteAllDatesStr\n     . '\" class=\"nav\" href=\"del_entry.php?id=' . $id . $u_url\n     . '&amp;override=1&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr . \"\\\\n\\\\n\"\n     . $deleteAllStr . '\\' );\">' . $deleteAllDatesStr . '</a></li>';\n    // Don't allow deletion of first event\n    if ( ! empty ( $date ) && $date != $orig_date ) {\n      $deleteOnlyStr = translate ( 'Delete entry only for this date' );\n      echo '\n      <li><a title=\"' . $deleteOnlyStr . '\" class=\"nav\" href=\"del_entry.php?id='\n       . $id . $u_url . $rdate . '&amp;override=1&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\''\n       . $areYouSureStr . \"\\\\n\\\\n\" . $deleteAllStr . '\\' );\">' . $deleteOnlyStr\n       . '</a></li>';\n    }\n  } else {\n    if ( ! empty( $user ) && $user != $login && ! $is_assistant ) {\n      user_load_variables( $user, 'temp_' );\n      $delete_str = str_replace( 'XXX', $temp_fullname,\n                                translate( 'Delete entry from calendar of XXX' ) );\n    } else {\n      $delete_str = $deleteEntryStr;\n    }\n    echo '\n      <li><a title=\"' . $editEntryStr . '\" class=\"nav\" href=\"edit_entry.php?id='\n     . $id . $u_url . '\">' . $editEntryStr . '</a></li>\n      <li><a title=\"' . $delete_str . '\" class=\"nav\" href=\"del_entry.php?id='\n     . $id . $u_url . $rdate . '&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr\n     . \"\\\\n\\\\n\"\n     . ( empty ( $user ) || $user == $login || $is_assistant\n      ? $deleteAllStr : '' )\n     . '\\' );\">' . $delete_str;\n    echo '</a></li>';\n  }\n  echo '\n      <li><a title=\"' . $copyStr . '\" class=\"nav\" href=\"edit_entry.php?id='\n   . $id . $u_url . '&amp;copy=1\">' . $copyStr . '</a></li>';\n} elseif ( $readonly != 'Y' &&\n  ( $is_my_event || $is_nonuser_admin || $can_edit ) &&\n    ( $login != '__public__' ) && ! $is_nonuser && $event_status != 'D' ) {\n  $delFromCalStr =\n  translate ( 'This will delete the entry from your XXX calendar.', true );\n  echo '\n      <li><a title=\"' . $deleteEntryStr . '\" class=\"nav\" href=\"del_entry.php?id='\n   . $id . $u_url . $rdate . '&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr\n   . \"\\\\n\\\\n\"\n   . str_replace ( 'XXX ',\n    ( $is_assistant ? translate ( 'boss' ) . ' ' : '' ), $delFromCalStr )\n  // ( $is_assistant\n  // ? translate ( 'This will delete the entry from your boss calendar.', true )\n  // : translate ( 'This will delete the entry from your calendar.', true ) )\n  . '\\' );\">'\n   . $deleteEntryStr\n   . ( $is_assistant ? ' ' . translate ( 'from your boss calendar' ) : '' )\n   . '</a></li>\n      <li><a title=\"' . $copyStr . '\" class=\"nav\" href=\"edit_entry.php?id='\n   . $id . '&amp;copy=1\">' . $copyStr . '</a></li>';\n}\n\nif ( $readonly != 'Y' && ! $is_my_event && ! $is_private && !\n  $is_confidential && $event_status != 'D' && $login != '__public__' && !\n  $is_nonuser )\n  echo '\n      <li><a title=\"' . $addToMineStr . '\" class=\"nav\" href=\"add_entry.php?id=' .\n      $id . '&csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\''\n   . translate ( 'Do you want to add this entry to your calendar?', true )\n   . \"\\\\n\\\\n\" . translate ( 'This will add the entry to your calendar.', true )\n   . '\\' );\">' . $addToMineStr . '</a></li>';\n\nif ( $login != '__public__' && count ( $allmails ) > 0 ) {\n  $emailAllStr = translate ( 'Email all participants' );\n  echo '\n      <li><a title=\"' . $emailAllStr . '\" class=\"nav\" href=\"mailto:'\n   . implode ( ',', $allmails ) . '?subject=' . rawurlencode ( $subject ) . '\">'\n   . $emailAllStr . '</a></li>';\n}\n\nif ( access_can_access_function ( ACCESS_EXPORT ) &&\n    ( ( ! $is_private && ! $is_confidential ) || ! access_is_enabled() ) && !\n    $hide_details ) {\n  echo '<li><a class=\"nav\" href=\"export_handler.php?id=' . $id .\n    (!empty($user) ? '&user=' . $user : '') .\n    '&csrf_form_key=' . getFormKey() .\n    '&format=ical\">' .\n    translate ( 'Export this entry to' ) . \" iCalendar</a></li>\\n\";\n}\n\n$can_show_log = $is_admin; // default if access control is not enabled\nif ( access_is_enabled() )\n  $can_show_log = access_can_access_function ( ACCESS_ACTIVITY_LOG );\n\nif ( $can_show_log ) {\n  $hideActivityStr = translate ( 'Hide activity log' );\n  $showActivityStr = translate ( 'Show activity log' );\n  echo '<li><a title=\"'\n   . ( ! $show_log\n    ? $showActivityStr . '\" class=\"nav\" href=\"view_entry.php?id=' . $id\n     . '&amp;log=1\">' . $showActivityStr\n    : $hideActivityStr . '\" class=\"nav\" href=\"view_entry.php?id=' . $id . '\">'\n     . $hideActivityStr )\n   . '</a></li>';\n}\n\nif ( $can_show_log && $show_log ) {\n  $PAGE_SIZE = 25; // number of entries to show at once\n  echo '<div class=\"pl-3 pr-3 pt-2 pb-1\"><div class=\"p-1 border\">';\n  echo generate_activity_log ( $id );\n  echo \"</div></div>\";\n}\n\necho '</ul>';\n\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\necho print_trailer ( empty ( $friendly ) );\n\n?>\n"], "fixing_code": ["<?php\n/* Most of WebCalendar's functions.\n *\n * @author Craig Knudsen <cknudsen@cknudsen.com>\n * @copyright Craig Knudsen, <cknudsen@cknudsen.com>, http://www.k5n.us/cknudsen\n * @license http://www.gnu.org/licenses/gpl.html GNU GPL\n * @package WebCalendar\n */\n\n/* Functions start here. All non-function code should be above this.\n *\n * Note to developers:\n *  Documentation is generated from the function comments below.\n *  When adding/updating functions, please follow these conventions.\n *  Your cooperation in this matter is appreciated. :-)\n *\n *  If you want your documentation to link to the db documentation,\n *  just make sure you mention the db table name followed by \"table\"\n *  on the same line. Here's an example:\n *    Retrieve preferences from the webcal_user_pref table.\n */\n\n$tzInitSet = false;\n\n/**\n * Logs a debug message.\n *\n * Generally, we try not to leave calls to this function in the code.\n * It is used for debugging only.\n *\n * @param string $msg Text to be logged\n */\nfunction do_debug ( $msg ) {\n  // log to /tmp/webcal-debug.log\n  // error_log ( date ( 'Y-m-d H:i:s' ) . \"> $msg\\n<br />\",\n  // 3, 'd:/php/logs/debug.txt' );\n  //$fd = fopen ( \"/tmp/webcal.log\", 'a+b' );\n  //fwrite ( $fd, date ( 'Y-m-d H:i:s' ) . \"> $msg\\n\" );\n  //fclose ( $fd );\n  // 3, '/tmp/webcal-debug.log' );\n  // error_log ( date ( 'Y-m-d H:i:s' ) . \"> $msg\\n\",\n  // 2, 'sockieman:2000' );\n}\n\n/**\n * Looks for URLs in the given text, and makes them into links.\n *\n * @param string $text Input text\n *\n * @return string  The text altered to have HTML links for any web links.\n */\nfunction activate_urls( $text ) {\n  return preg_replace( '/[a-z]+:\\/\\/[^<> \\t\\r\\n]+[a-z0-9\\/]/i',\n    '<a href=\"\\\\0\">\\\\0</a>', $text );\n}\n\n/**\n * Adds something to the activity log for an event.\n *\n * The information will be saved to the webcal_entry_log table.\n *\n * @param int    $event_id  Event ID\n * @param string $user      Username of user doing this\n * @param string $user_cal  Username of user whose calendar is affected\n * @param string $type      Type of activity we are logging:\n *   - LOG_APPROVE\n *   - LOG_APPROVE_T\n *   - LOG_ATTACHMENT\n *   - LOG_COMMENT\n *   - LOG_CREATE\n *   - LOG_CREATE_T\n *   - LOG_DELETE\n *   - LOG_DELETE_T\n *   - LOG_LOGIN_FAILURE\n *   - LOG_NEWUSER_FULL\n *   - LOG_NEWUSEREMAIL\n *   - LOG_NOTIFICATION\n *   - LOG_REJECT\n *   - LOG_REJECT_T\n *   - LOG_REMINDER\n *   - LOG_UPDATE\n *   - LOG_UPDATE_T\n *   - LOG_USER_ADD\n *   - LOG_USER_DELETE\n *   - LOG_USER_UPDATE\n * @param string $text     Text comment to add with activity log entry\n */\nfunction activity_log ( $event_id, $user, $user_cal, $type, $text ) {\n  $next_id = 1;\n\n  if ( empty ( $type ) ) {\n    echo translate ( 'Error Type not set for activity log!' );\n    // But don't exit since we may be in mid-transaction.\n    return;\n  }\n\n  $res = dbi_execute ( 'SELECT MAX( cal_log_id ) FROM webcal_entry_log' );\n  if ( $res ) {\n    if ( $row = dbi_fetch_row ( $res ) )\n      $next_id = $row[0] + 1;\n\n    dbi_free_result ( $res );\n  }\n  $sql = 'INSERT INTO webcal_entry_log ( cal_log_id, cal_entry_id, cal_login,\n    cal_user_cal, cal_type, cal_date, cal_time, cal_text )\n    VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )';\n  if ( ! dbi_execute ( $sql, [$next_id, $event_id, $user,\n        ( empty ( $user_cal ) ? null : $user_cal ), $type, gmdate ( 'Ymd' ),\n          gmdate ( 'Gis' ), ( empty ( $text ) ? null : $text )] ) )\n    db_error ( true, $sql );\n}\n\n/**\n * Get the corrected timestamp after adding or subtracting ONE_HOUR\n * to compensate for DST.\n */\nfunction add_dstfree_time ( $date, $span, $interval = 1 ) {\n  $ctime = date ( 'G', $date );\n  $date += $span * $interval;\n  $dtime = date ( 'G', $date );\n  if ( $ctime == $dtime )\n    return $date;\n  elseif ( $ctime == 23 && $dtime == 0 )\n    $date -= 3600;\n  elseif ( ( $ctime == 0 && $dtime == 23 ) || $ctime > $dtime )\n    $date += 3600;\n  elseif ( $ctime < $dtime )\n    $date -= 3600;\n\n  return $date;\n}\n\n/**\n * Return the time in HHMMSS format of input time + duration\n *\n * @param string $time   format \"235900\"\n * @param int $duration  number of minutes\n *\n * @return string  The time in HHMMSS format.\n */\nfunction add_duration ( $time, $duration ) {\n  $time = sprintf ( \"%06d\", $time );\n  $minutes =\n    intval ( $time / 10000 ) * 60 + ( ( $time / 100 ) % 100 ) + $duration;\n  // If we ran past 240000, then roll back over to 000000.\n  $minutes %= ( 24 * 60 );\n\n  return sprintf ( \"%d%02d00\", $minutes / 60, $minutes % 60 );\n}\n\n/**\n * Bump UNIX local timestamp with the given duration.\n *\n * param int $ts      input timestamp\n * param int $hour    hour duration\n * param int $minute  minute duration\n * param int $second  second duration\n * param int $month   month duration\n * param int $day     day duration\n * param int $year    year duration\n *\n * This function overcomes problems due to daylight saving change dates;\n *  it is based on the fact that function mktime() accepts out of range data.\n */\n\nfunction bump_local_timestamp( $ts, $hour = 0, $minute = 0, $second = 0,\n  $month = 0, $day = 0, $year = 0 ) {\n  return mktime( date( 'G', $ts ) + $hour, date( 'i', $ts ) + $minute,\n    date( 's', $ts ) + $second, date( 'n', $ts ) + $month,\n    date( 'j', $ts ) + $day, date( 'Y', $ts ) + $year );\n}\n\n/**\n * Builds the HTML for the event label.\n *\n * @param string  $can_access\n * @param string  $time_only\n *\n * @return string  The HTML for the event label\n */\nfunction build_entry_label ( $event, $popupid,\n  $can_access, $timestr, $time_only = 'N' ) {\n  global $eventinfo, $login, $SUMMARY_LENGTH, $UAC_ENABLED, $user;\n  $ret = '';\n  // Get reminders display string.\n  $reminder = getReminders( $event->getId(), true );\n  $can_access = ( $UAC_ENABLED == 'Y' ? $can_access : 0 );\n  $not_my_entry = ( ( $login != $user && strlen ( $user ) ) ||\n    ( $login != $event->getLogin() && strlen( $event->getLogin() ) ) );\n\n  $sum_length = $SUMMARY_LENGTH;\n  if( $event->isAllDay() || $event->isUntimed() )\n    $sum_length += 6;\n\n  $tmpAccess = $event->getAccess();\n  $tmpId = $event->getId();\n  $tmpLogin = $event->getLogin();\n  $tmpName = $event->getName();\n  $tmp_ret = htmlspecialchars ( substr ( $tmpName, 0, $sum_length )\n     . ( strlen ( $tmpName ) > $sum_length ? '...' : '' ) );\n\n  if ( $not_my_entry && $tmpAccess == 'R' && !\n    ( $can_access &PRIVATE_WT ) ) {\n    if ( $time_only != 'Y' )\n      $ret = '<span class=\"parentheses\">' . translate ( 'Private' ) . '</span>';\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin,\n      str_replace ( 'XXX', translate ( 'private' ),\n        translate ( 'This event is XXX.' ) ), '' );\n  } else\n  if ( $not_my_entry && $tmpAccess == 'C' && !\n    ( $can_access &CONF_WT ) ) {\n    if ( $time_only != 'Y' )\n      $ret = '(' . translate ( 'Conf.' ) . ')';\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin,\n      str_replace ( 'XXX', translate ( 'confidential' ),\n        translate ( 'This event is XXX.' ) ), '' );\n  } else\n  if ( $can_access == 0 && $UAC_ENABLED == 'Y' ) {\n    if ( $time_only != 'Y' )\n      $ret = $tmp_ret;\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin, '',\n      $timestr, '', '', $tmpName, '' );\n  } else {\n    if ( $time_only != 'Y' )\n      $ret = $tmp_ret;\n\n    $eventinfo .= build_entry_popup ( $popupid, $tmpLogin,\n      $event->getDescription(), $timestr, site_extras_for_popup( $tmpId ),\n      $event->getLocation(), $tmpName, $tmpId, $reminder );\n  }\n  return $ret;\n}\n\n/**\n * Calculates which row/slot this time represents.\n *\n * This is used in day and week views where hours of the time are separeted\n * into different cells in a table.\n *\n * <b>Note:</b> the global variable <var>$TIME_SLOTS</var> is used to determine\n * how many time slots there are and how many minutes each is. This variable\n * is defined user preferences (or defaulted to admin system settings).\n *\n * @param string $time        Input time in HHMMSS format\n * @param bool   $round_down  Should we change 1100 to 1059?\n *                            (This will make sure a 10AM-100AM appointment just\n *                            shows up in the 10AM slow and not in the 11AM slot\n *                            also.)\n *\n * @return int  The time slot index.\n */\nfunction calc_time_slot ( $time, $round_down = false ) {\n  global $TIME_SLOTS;\n\n  $interval = 1440 / $TIME_SLOTS;\n  $mins_since_midnight = time_to_minutes ( sprintf ( \"%06d\", $time ) );\n  $ret = intval ( $mins_since_midnight / $interval );\n  if ( $round_down && $ret * $interval == $mins_since_midnight )\n    $ret--;\n\n  if ( $ret > $TIME_SLOTS )\n    $ret = $TIME_SLOTS;\n\n  return $ret;\n}\n\n/**\n * Checks for conflicts.\n *\n * Find overlaps between an array of dates and the other dates in the database.\n *\n * Limits on number of appointments: if enabled in System Settings\n * (<var>$LIMIT_APPTS</var> global variable), too many appointments can also\n * generate a scheduling conflict.\n *\n * @todo Update this to handle exceptions to repeating events.\n *\n * @param array  $dates         Array of dates in Timestamp format that is\n *                              checked for overlaps.\n * @param int    $duration      Event duration in minutes\n * @param int    $eventstart    GMT starttime timestamp\n * @param array  $participants  Array of users whose calendars are to be checked\n * @param string $login         The current user name\n * @param int    $id            Current event id (this keeps overlaps from\n *                              wrongly checking an event against itself)\n *\n * @return  Empty string for no conflicts or return the HTML of the\n *          conflicts when one or more are found.\n */\nfunction check_for_conflicts ( $dates, $duration, $eventstart,\n  $participants, $login, $id ) {\n  global $LIMIT_APPTS, $LIMIT_APPTS_NUMBER, $repeated_events,\n  $single_user, $single_user_login, $jumpdate;\n\n  $datecnt = count ( $dates );\n  if ( ! $datecnt )\n    return false;\n\n  $conflicts = '';\n  $count = 0;\n  $evtcnt = $found = $query_params = [];\n  $partcnt = count ( $participants );\n\n  $hour = gmdate ( 'H', $eventstart );\n  $minute = gmdate ( 'i', $eventstart );\n\n  $allDayStr = translate ( 'All day event' );\n  $confidentialStr = translate ( 'Confidential' );\n  $exceedsStr = translate ( 'exceeds limit of XXX events per day' );\n  $onStr = translate ( 'on' );\n  $privateStr = translate ( 'Private' );\n\n  $sql = 'SELECT DISTINCT( weu.cal_login ), we.cal_time, we.cal_duration,\n    we.cal_name, we.cal_id, we.cal_access, weu.cal_status, we.cal_date\n    FROM webcal_entry we, webcal_entry_user weu WHERE we.cal_id = weu.cal_id AND ( ';\n\n  for ( $i = 0; $i < $datecnt; $i++ ) {\n    $sql .= ( $i != 0 ? ' OR ' : '' ) . 'we.cal_date = '\n     . gmdate ( 'Ymd', $dates[$i] );\n  }\n  $sql .= ' ) AND we.cal_time >= 0 AND weu.cal_status IN ( \\'A\\',\\'W\\' ) AND ( ';\n  if ( $single_user == 'Y' )\n    $participants[0] = $single_user_login;\n  else\n  if ( strlen ( $participants[0] ) == 0 )\n    // Likely called from a form with 1 user.\n    $participants[0] = $login;\n\n  for ( $i = 0; $i < $partcnt; $i++ ) {\n    $sql .= ( $i > 0 ? ' OR ' : '' ) . 'weu.cal_login = ?';\n    $query_params[] = $participants[$i];\n  }\n  // Make sure we don't get something past the end date of the event we're saving.\n  $res = dbi_execute ( $sql . ' )', $query_params );\n  if ( $res ) {\n    $duration1 = sprintf ( \"%d\", $duration );\n    $time1 = sprintf ( \"%d%02d00\", $hour, $minute );\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      // Add to an array to see if it has been found already for the next part.\n      $found[$count++] = $row[4];\n      // See if events overlaps one another.\n      if ( $row[4] != $id ) {\n        $cntkey = $row[0] . '-' . $row[7];\n        $duration2 = $row[2];\n        $time2 = sprintf ( \"%06d\", $row[1] );\n        if ( empty ( $evtcnt[$cntkey] ) )\n          $evtcnt[$cntkey] = 0;\n        else\n          $evtcnt[$cntkey]++;\n\n        $over_limit = ( $LIMIT_APPTS == 'Y' && $LIMIT_APPTS_NUMBER > 0 &&\n          $evtcnt[$cntkey] >= $LIMIT_APPTS_NUMBER ? 1 : 0 );\n\n        if ( $over_limit ||\n          times_overlap ( $time1, $duration1, $time2, $duration2 ) ) {\n          $conflicts .= '\n            <li>';\n\n          if ( $single_user != 'Y' ) {\n            user_load_variables ( $row[0], 'conflict_' );\n            $conflicts .= $GLOBALS['conflict_fullname'] . ': ';\n          }\n          $conflicts .= ( $row[5] == 'C' && $row[0] != $login && !\n            $is_assistant && ! $is_nonuser_admin\n            // Assistants can see confidential stuff.\n            ? '(' . $confidentialStr . ')'\n            : ( $row[5] == 'R' && $row[0] != $login\n              ? '( ' . $privateStr . ')'\n              : '<a href=\"view_entry.php?id=' . $row[4]\n               . ( $row[0] != $login ? '&amp;user=' . $row[0] : '' )\n               . '\">' . $row[3] . '</a>' ) )\n           . ( $duration2 == 1440 && $time2 == 0\n            ? ' (' . $allDayStr . ')'\n            : ' (' . display_time ( $row[7] . $time2 )\n             . ( $duration2 > 0\n              ? '-' . display_time ( $row[7]\n                 . add_duration ( $time2, $duration2 ) ) : '' ) . ')' )\n           . ' ' . $onStr . ' '\n           . date_to_str ( date ( 'Ymd', date_to_epoch ( $row[7]\n                 . sprintf ( \"%06d\", $row[1] ) ) ) )\n           . ( $over_limit ? ' (' . str_replace ( 'XXX', $LIMIT_APPTS_NUMBER,\n              $exceedsStr ) . ')' : '' ) . '</li>';\n        }\n      }\n    }\n    dbi_free_result ( $res );\n  } else\n    db_error ( true );\n\n  for ( $q = 0; $q < $partcnt; $q++ ) {\n    // Read repeated events only once for a participant for performance reasons.\n    $jumpdate = gmdate ( 'Ymd', $dates[count ( $dates )-1] );\n    $repeated_events = query_events ( $participants[$q], true,\n      // This date filter is not necessary for functional reasons, but it\n      // eliminates some of the events that couldn't possibly match. This could\n      // be made much more complex to put more of the searching work onto the\n      // database server, or it could be dropped all together to put the\n      // searching work onto the client.\n      'AND ( we.cal_date <= ' . $jumpdate\n       . ' AND ( wer.cal_end IS NULL OR wer.cal_end >= '\n       . gmdate ( 'Ymd', $dates[0] ) . ' ) )' );\n    for ( $i = 0; $i < $datecnt; $i++ ) {\n      $dateYmd = gmdate ( 'Ymd', $dates[$i] );\n      $list = get_repeating_entries ( $participants[$q], $dateYmd );\n      for ( $j = 0, $listcnt = count ( $list ); $j < $listcnt; $j++ ) {\n        // OK we've narrowed it down to a day, now I just gotta check the time...\n        // I hope this is right...\n        $row = $list[$j];\n        if( $row->getID() != $id && ! in_array($row->getID(), $found )\n            && ( $row->getExtForID() == '' || $row->getExtForID() != $id ) ) {\n          $time2 = sprintf( \"%06d\", $row->getTime() );\n          $duration2 = $row->getDuration();\n          if ( times_overlap ( $time1, $duration1, $time2, $duration2 ) ) {\n            $conflicts .= '\n            <li>';\n            if ( $single_user != 'Y' ) {\n              user_load_variables( $row->getLogin(), 'conflict_' );\n              $conflicts .= $GLOBALS['conflict_fullname'] . ': ';\n            }\n            $conflicts .= ( $row->getAccess() == 'C'\n              && $row->getLogin() != $login && ! $is_assistant\n              && ! $is_nonuser_admin\n              // Assistants can see confidential stuff.\n              ? '(' . $confidentialStr . ')'\n              : ( $row->getAccess() == 'R' && $row->getLogin() != $login\n                ? '(' . $privateStr . ')'\n                : '<a href=\"view_entry.php?id=' . $row->getID()\n                 . ( ! empty ( $user ) && $user != $login\n                  ? '&amp;user=' . $user : '' )\n                 . '\">' . $row->getName() . '</a>' ) )\n             . ' (' . display_time( $row->getDate() . $time2 )\n             . ( $duration2 > 0\n              ? '-' . display_time( $row->getDate()\n                 . add_duration ( $time2, $duration2 ) ) : '' )\n             . ')' . ' ' . $onStr . ' ' . date_to_str ( $dateYmd ) . '</li>';\n          }\n        }\n      }\n    }\n  }\n\n  return $conflicts;\n}\n\n/**\n * Replaces unsafe characters with HTML encoded equivalents.\n *\n * @param string $value  Input text\n *\n * @return string  The cleaned text.\n */\nfunction clean_html ( $value ) {\n  $value = htmlspecialchars ( $value, ENT_QUOTES );\n  $value = strtr ( $value, [\n      '(' => '&#40;',\n      ')' => '&#41;'] );\n  return $value;\n}\n\n/**\n * Removes non-digits from the specified text.\n *\n * @param string $data  Input text\n *\n * @return string  The converted text.\n */\nfunction clean_int ( $data ) {\n  return preg_replace ( '/\\D/', '', $data );\n}\n\n/**\n * Removes whitespace from the specified text.\n *\n * @param string $data  Input text\n *\n * @return string  The converted text.\n */\nfunction clean_whitespace ( $data ) {\n  return preg_replace ( '/\\s/', '', $data );\n}\n\n/**\n * Removes non-word characters from the specified text.\n *\n * @param string $data  Input text\n *\n * @return string  The converted text.\n */\nfunction clean_word ( $data ) {\n  return preg_replace ( '/\\W/', '', $data );\n}\n\n/**\n * Combines the repeating and nonrepeating event arrays and sorts them\n *\n * The returned events will be sorted by time of day.\n *\n * @param array $ev   Array of events\n * @param array $rep  Array of repeating events\n *\n * @return array  Array of Events.\n */\nfunction combine_and_sort_events ( $ev, $rep ) {\n  $ids = [];\n\n  // Repeating events show up in $ev and $rep.\n  // Record their ids and don't add them to the combined array.\n  foreach ( $rep as $obj ) {\n    $ids[] = $obj->getID();\n  }\n  foreach ( $ev as $obj ) {\n    if( ! in_array( $obj->getID(), $ids ) )\n     $rep[] = $obj;\n  }\n  usort ( $rep, 'sort_events' );\n\n  return $rep;\n}\n\n/**\n * Draws a daily outlook style availability grid showing events that are\n * approved and awaiting approval.\n *\n * @param string $date          Date to show the grid for\n * @param array  $participants  Which users should be included in the grid\n * @param string $popup         Not used\n *\n * @return string  HTML to display matrix.\n */\nfunction daily_matrix ( $date, $participants, $popup = '' ) {\n  global $CELLBG, $ENTRY_SLOTS, $events, $repeated_events, $TABLEBG, $THBG,\n  $THFG, $thismonth, $thisyear, $TIME_FORMAT, $TODAYCELLBG, $user_fullname,\n  $WORK_DAY_END_HOUR, $WORK_DAY_START_HOUR;\n\n  $allAttendeesStr = translate ( 'All Attendees' );\n  $busy = translate ( 'Busy' );\n  $cnt = count ( $participants );\n  $dateTS = date_to_epoch ( $date );\n  $first_hour = $WORK_DAY_START_HOUR;\n  $increment = intval ( 1440 /\n    ( $ENTRY_SLOTS > 288 ? 288 : ( $ENTRY_SLOTS < 72 ? 72 : $ENTRY_SLOTS ) ) );\n  $last_hour = $WORK_DAY_END_HOUR;\n  $master = [];\n  $MouseOut = $MouseOver = $str = '';\n  $participant_pct = '20%'; //Use percentage.\n\n  $tentative = translate ( 'Tentative' );\n  $titleStr = ' title=\"' . translate ( 'Schedule an appointment for XXX.' ) . '\">';\n  $viewMsg = translate ( 'View this entry' );\n\n  $hours = $last_hour - $first_hour;\n  $interval = intval ( 60 / $increment );\n  $cell_pct = intval ( 80 / ( $hours * $interval ) );\n  $style_width = ( $cell_pct > 0 ? 'style=\"width:' . $cell_pct . '%;\"' : '' );\n  $thismonth = date ( 'm', $dateTS );\n  $thisyear = date ( 'Y', $dateTS );\n  $cols = ( ( $hours * $interval ) + 1 );\n  $ret = <<<EOT\n    <br />\n    <table class=\"aligncenter matrixd\" style=\"width:'80%';\"\n     >\n      <tr>\n        <td class=\"matrix\" colspan=\"{$cols}\"></td>\n      </tr>\n      <tr>\n        <th style=\"width:{$participant_pct};\">\nEOT;\n   $ret .= translate ( 'Participants' ) . '</th>';\n  $tentative = translate ( 'Tentative' );\n  $titleStr = ' title=\"' . translate ( 'Schedule an appointment for XXX.' ) . '\">';\n  $viewMsg = translate ( 'View this entry' );\n\n  $hours = $last_hour - $first_hour;\n  $interval = intval ( 60 / $increment );\n  $cell_pct = intval ( 80 / ( $hours * $interval ) );\n  $cols = ( ( $hours * $interval ) + 1 );\n  $style_width = ( $cell_pct > 0 ? 'style=\"width:' . $cell_pct . '%;\"' : '' );\n  $thismonth = date ( 'm', $dateTS );\n  $thisyear = date ( 'Y', $dateTS );\n\n  // Build a master array containing all events for $participants.\n  for ( $i = 0; $i < $cnt; $i++ ) {\n    /* Pre-Load the repeated events for quckier access. */\n    $repeated_events = read_repeated_events ( $participants[$i], $dateTS,\n      $dateTS, '' );\n    /* Pre-load the non-repeating events for quicker access. */\n    $events = read_events ( $participants[$i], $dateTS, $dateTS );\n\n    // Combine events for this date into a single array for easy processing.\n    $ALL = array_merge (\n      get_repeating_entries ( $participants[$i], $date ),\n      get_entries ( $date )\n      );\n    foreach ( $ALL as $E ) {\n      if( $E->getTime() == 0 ) {\n        $duration = 60 * $hours;\n        $time = $first_hour . '0000';\n      } else {\n        $duration = $E->getDuration();\n        $time = date( 'His', $E->getDateTimeTS() );\n      }\n      $hour = substr ( $time, 0, 2 );\n      $mins = substr ( $time, 2, 2 );\n\n      // Convert cal_time to slot.\n      $slot = $hour + substr ( $mins, 0, 1 );\n\n      // Convert cal_duration to bars.\n      $bars = $duration / $increment;\n\n      // Never replace 'A' with 'W'.\n      for ( $q = 0; $bars > $q; $q++ ) {\n        $slot = sprintf ( \"%02.2f\", $slot );\n        if ( strlen ( $slot ) == 4 )\n          $slot = '0' . $slot; // Add leading zeros.\n\n        $slot = $slot . ''; // Convert to a string.\n        if ( empty ( $master['_all_'][$slot] ) ||\n            ( $master['_all_'][$slot]['stat'] != 'A' ) )\n          $master['_all_'][$slot]['stat'] = $E->getStatus();\n\n        if ( empty ( $master[$participants[$i]][$slot] ) ||\n            ( $master[$participants[$i]][$slot]['stat'] != 'A' ) ) {\n          $master[$participants[$i]][$slot]['stat'] = $E->getStatus();\n          $master[$participants[$i]][$slot]['ID'] = $E->getID();\n        }\n        $slot = $slot + ( $increment * .01 );\n        if ( $slot - ( int )$slot >= .59 )\n          $slot = ( int )$slot + 1;\n      }\n    }\n  }\n\n  for( $i = $first_hour; $i < $last_hour; $i++ ) {\n    $hour = $i;\n    if ( $TIME_FORMAT == '12' ) {\n      $hour %= 12;\n      if ( $hour == 0 )\n        $hour = 12;\n\n      $hourfmt = '%d';\n    } else\n      $hourfmt = '%02d';\n\n    $halfway = intval ( ( $interval / 2 ) -1 );\n    for( $j = 0; $j < $interval; $j++ ) {\n      $inc_x_j = $increment * $j;\n      $str .= '\n        <td id=\"C' . ( $j + 1 ) . '\" class=\"dailymatrix\" ';\n      $tmpTitle = 'onmousedown=\"schedule_event( ' . $i . ','\n       . sprintf ( \"%02d\", $inc_x_j ) . ' );\"' . $MouseOver . $MouseOut\n       . str_replace ( 'XXX', sprintf ( $hourfmt, $hour ) . ':' .\n          ( $inc_x_j <= 9 ? '0' : '' ) . $inc_x_j, $titleStr );\n      switch ( $j ) {\n        case $halfway:\n          $k = ( $hour <= 9 ? '0' : substr ( $hour, 0, 1 ) );\n          $str .= 'style=\"width:' . $cell_pct . '%; text-align:right;\" '\n           . $tmpTitle . $k . '</td>';\n          break;\n        case $halfway + 1:\n          $k = ( $hour <= 9 ? substr ( $hour, 0, 1 ) : substr ( $hour, 1, 2 ) );\n          $str .= 'style=\"width:' . $cell_pct . '%; text-align:left;\" '\n           . $tmpTitle . $k . '</td>';\n          break;\n        default:\n          $str .= $style_width . $tmpTitle . '&nbsp;&nbsp;</td>';\n      }\n    }\n  }\n  $ret .= $str . '\n      </tr>\n      <tr>\n        <td class=\"matrix\" colspan=\"' . $cols . '\"></td>\n      </tr>';\n\n  // Add user _all_ to beginning of $participants array.\n  array_unshift ( $participants, '_all_' );\n  // Javascript for cells.\n  // Display each participant.\n  for ( $i = 0; $i <= $cnt; $i++ ) {\n    if ( $participants[$i] != '_all_' ) {\n      // Load full name of user.\n      user_load_variables ( $participants[$i], 'user_' );\n\n      // Exchange space for &nbsp; to keep from breaking.\n      $user_nospace = preg_replace ( '/\\s/', '&nbsp;', $user_fullname );\n    } else\n      $user_nospace = preg_replace ( '/\\s/', '&nbsp;', $allAttendeesStr );\n\n    $ret .= '\n      <tr>\n        <th class=\"weekday\" style=\"width:' . $participant_pct . ';\">'\n     . $user_nospace . '</th>';\n    $col = 1;\n\n    // Check each timebar.\n    for ( $j = $first_hour; $j < $last_hour; $j++ ) {\n      for ( $k = 0; $k < $interval; $k++ ) {\n        $r = sprintf ( \"%02d\", $j ) . '.'\n         . sprintf ( \"%02d\", ( $increment * $k ) ) . '';\n        $space = '&nbsp;';\n\n        if ( empty ( $master[$participants[$i]][$r] ) ) {\n          // Ignore this..\n        } else\n        if ( empty ( $master[$participants[$i]][$r]['ID'] ) )\n          // This is the first line for 'all' users. No event here.\n          $space = '\n          <span class=\"matrix\"><img src=\"images/pix.gif\" alt=\"\" /></span>';\n        else {\n          $tmpMast = $master[$participants[$i]][$r]['stat'];\n          if ( strpos ( 'AW', $tmpMast ) !== false )\n            $space = '\n          <a class=\"matrix\" href=\"view_entry.php?id='\n             . $master[$participants[$i]][$r]['ID']\n             . '&friendly=1\"><img src=\"images/pix' . ( $tmpMast = 'A' ? '' : 'b' )\n             . '.gif\" title=\"' . $viewMsg . '\" alt=\"' . $viewMsg . '\" /></a>';\n        }\n\n        $ret .= '\n        <td class=\"matrixappts' . ( $k == '0' ? ' matrixledge' : '' ) . '\" '\n         . $style_width . ( $space == '&nbsp;' ? ' '\n           . 'onmousedown=\"schedule_event( ' . $j . ','\n           . sprintf ( \"%02d\", ( $increment * $k ) ) . ' );\"'\n           . \" $MouseOver $MouseOut\" : '' ) . '>' . $space . '</td>';\n        $col++;\n      }\n    }\n\n    $ret .= '</tr>';\n  } // End foreach participant.\n  return $ret . <<<EOT\n    </table><br />\n    <table class=\"aligncenter\">\n      <tr>\n        <td class=\"matrixlegend\"><img src=\"images/pix.gif\" title=\"{$busy}\"\n          alt=\"{$busy}\" />{$busy}&nbsp;&nbsp;&nbsp;<img src=\"images/pixb.gif\"\n          title=\"{$tentative}\" alt=\"{$tentative}\" />{$tentative}</td>\n      </tr>\n    </table>\nEOT;\n}\n\n/**\n * Date selection via DHTML.\n * This will create two HTML elements:\n * - a form element of type hidden that will hold the date value in\n *   YYYYMMDD format\n * - a span element that will display the nicely formatted date to the user\n * The CSS ids will be the datename parameter with '_fmt' and '_YMD'\n * appended.\n */\nfunction datesel_Print($datename, $ymdValue = '')\n{\n  if (empty($ymdValue))\n    $ymdValue = date('Y-m-d');\n  if (strpos($ymdValue, '-') == false && strlen($ymdValue) == 8) {\n    // Convert YYYYMMDD into YYYY-MM-DD\n    $ymdValue = date(\"Y-m-d\", strtotime($ymdValue));\n  }\n\n  return '<input type=\"date\" name=\"' . $datename .\n    '_YMD\" id=\"' . $datename . '_YMD\" class=\"form-control\" value=\"' .\n    $ymdValue . '\">';\n}\n\n\n/**\n * Generate HTML for a date selection for use in a form.\n *\n * @param string $prefix   Prefix to use in front of form element names\n * @param string $date     Currently selected date (in YYYYMMDD format)\n * @param bool $trigger    Add onchange event trigger that\n *                         calls javascript function $prefix_datechanged()\n * @param int  $num_years  Number of years to display\n *\n * @return string  HTML for the selection box.\n */\nfunction date_selection($prefix, $date, $trigger = false, $num_years = 20)\n{\n  if (empty($date)) {\n    $ymdValue = date('Y-m-d');\n  } else {\n    $ymdValue = date('Y-m-d', strtotime($date));\n  }\n  $trigger_str = (empty($trigger) ? '' : $prefix . 'datechanged();');\n  $onchange = (empty($trigger_str) ? '' : 'onchange=\"$trigger_str\"');\n  return '<input type=\"date\" name=\"' . $prefix .\n    '_YMD\" id=\"' . $prefix . '_YMD\" class=\"form-control\" value=\"' .\n    $ymdValue . '\" ' . $onchange . '>';\n}\n\n/**\n * Converts a date to a timestamp.\n *\n * @param string $d   Date in YYYYMMDD or YYYYMMDDHHIISS format\n * @param bool   $gmt Whether to use GMT or LOCAL\n *\n * @return int  Timestamp representing, in UTC or LOCAL time.\n */\nfunction date_to_epoch( $d, $gmt = true ) {\n  if ( $d == 0 )\n    return 0;\n\n  $dH = $di = $ds = 0;\n  if ( strlen ( $d ) == 13 ) { // Hour value is single digit.\n    $dH = substr ( $d, 8, 1 );\n    $di = substr ( $d, 9, 2 );\n    $ds = substr ( $d, 11, 2 );\n  }\n  if ( strlen ( $d ) == 14 ) {\n    $dH = substr ( $d, 8, 2 );\n    $di = substr ( $d, 10, 2 );\n    $ds = substr ( $d, 12, 2 );\n  }\n\n  if ( $gmt )\n    return gmmktime ( $dH, $di, $ds,\n      substr ( $d, 4, 2 ),\n      substr ( $d, 6, 2 ),\n      substr ( $d, 0, 4 ) );\n  else\n    return mktime ( $dH, $di, $ds,\n      substr ( $d, 4, 2 ),\n      substr ( $d, 6, 2 ),\n      substr ( $d, 0, 4 ) );\n}\n\n\n/**\n * Converts a date in YYYYMMDD format into \"Friday, December 31, 1999\",\n * \"Friday, 12-31-1999\" or whatever format the user prefers.\n *\n * @param string  $indate        Date in YYYYMMDD format\n * @param string  $format        Format to use for date\n *                               (default is \"__month__ __dd__, __yyyy__\")\n * @param bool    $show_weekday  Should the day of week also be included?\n * @param bool    $short_months  Should the abbreviated month names be used\n *                               instead of the full month names?\n * @param bool   $forceTranslate Check to see if there is a translation for\n *                    the specified data format. If there is, then use\n *                    the translated format from the language file, but\n *                    only if $DATE_FORMAT is language-defined.\n *\n * @return string  Date in the specified format.\n *\n * @global string Preferred date format\n */\nfunction date_to_str ( $indate, $format = '', $show_weekday = true,\n  $short_months = false, $forceTranslate = false ) {\n  global $DATE_FORMAT;\n\n  if ( strlen ( $indate ) == 0 )\n    $indate = date ( 'Ymd' );\n\n  // If they have not set a preference yet...\n  if ( $DATE_FORMAT === '' || $DATE_FORMAT === 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT = translate ( '__month__ __dd__, __yyyy__' );\n  elseif ( $forceTranslate && $format !== '' && translation_exists ( $format ) )\n    $format = translate ( $format );\n\n  if ( empty ( $format ) )\n    $format = $DATE_FORMAT;\n\n  $y = intval ( $indate / 10000 );\n  $m = intval ( $indate / 100 ) % 100;\n  $d = $indate % 100;\n  $wday = strftime ( \"%w\", mktime ( 0, 0, 0, $m, $d, $y ) );\n  if ( $short_months ) {\n    $month = month_name ( $m - 1, 'M' );\n    $weekday = weekday_name ( $wday, 'D' );\n  } else {\n    $month = month_name ( $m - 1 );\n    $weekday = weekday_name ( $wday );\n  }\n\n  $ret = str_replace ( '__dd__', $d, $format );\n  $ret = str_replace ( '__j__', intval ( $d ), $ret );\n  $ret = str_replace ( '__mm__', $m, $ret );\n  $ret = str_replace ( '__mon__', $month, $ret );\n  $ret = str_replace ( '__month__', $month, $ret );\n  $ret = str_replace ( '__n__', sprintf ( \"%02d\", $m ), $ret );\n  $ret = str_replace ( '__yy__', sprintf ( \"%02d\", $y % 100 ), $ret );\n\n  return ( $show_weekday\n    ? weekday_name ( strftime ( '%w', mktime ( 0, 0, 0, $m, $d, $y ) ),\n      ( $short_months ? 'D' : '' ) ) . ', '\n    : '' ) . str_replace ( '__yyyy__', $y, $ret );\n}\n\n/**\n * Extracts a user's name from a session id.\n *\n * This prevents users from begin able to edit their cookies.txt file and set\n * the username in plain text.\n *\n * @param string $instr  A hex-encoded string. \"Hello\" would be \"678ea786a5\".\n *\n * @return string  The decoded string.\n *\n * @global array Array of offsets\n *\n * @see encode_string\n */\nfunction decode_string ( $instr ) {\n  global $offsets;\n\n  $cntOffsets = count ( $offsets );\n  $orig = '';\n  for ( $i = 0, $cnt = strlen ( $instr ); $i < $cnt; $i += 2 ) {\n    $orig .= chr (\n      ( hextoint ( substr ( $instr, $i, 1 ) ) * 16 +\n        hextoint ( substr ( $instr, $i + 1, 1 ) ) - $offsets[\n        ( $i / 2 ) % $cntOffsets ] + 256 ) % 256 );\n  }\n  return $orig;\n}\n\n/**\n * Display a text for a single activity log entry.\n *\n * @param string $cal_type  the log entry type\n * @param string $cal_text  addiitonal text to display\n *\n * @return string  HTML for one log entry.\n */\nfunction display_activity_log( $cal_type, $cal_text = '', $break = '<br />&nbsp;' ) {\n  if ( $cal_type == LOG_APPROVE )\n    $ret = translate ( 'Event approved' );\n  elseif ( $cal_type == LOG_APPROVE_J )\n    $ret = translate ( 'Journal approved' );\n  elseif ( $cal_type == LOG_APPROVE_T )\n    $ret = translate ( 'Task approved' );\n  elseif ( $cal_type == LOG_ATTACHMENT )\n    $ret = translate ( 'Attachment' );\n  elseif ( $cal_type == LOG_COMMENT )\n    $ret = translate ( 'Comment' );\n  elseif ( $cal_type == LOG_CREATE )\n    $ret = translate ( 'Event created' );\n  elseif ( $cal_type == LOG_CREATE_J )\n    $ret = translate ( 'Journal created' );\n  elseif ( $cal_type == LOG_CREATE_T )\n    $ret = translate ( 'Task created' );\n  elseif ( $cal_type == LOG_DELETE )\n    $ret = translate ( 'Event deleted' );\n  elseif ( $cal_type == LOG_DELETE_J )\n    $ret = translate ( 'Journal deleted' );\n  elseif ( $cal_type == LOG_DELETE_T )\n    $ret = translate ( 'Task deleted' );\n  elseif ( $cal_type == LOG_LOGIN_FAILURE )\n    $ret = translate ( 'Invalid login' );\n  elseif ( $cal_type == LOG_NEWUSER_EMAIL )\n    $ret = translate ( 'New user via email (self registration)' );\n  elseif ( $cal_type == LOG_NEWUSER_FULL )\n    $ret = translate ( 'New user (self registration)' );\n  elseif ( $cal_type == LOG_NOTIFICATION )\n    $ret = translate ( 'Notification sent' );\n  elseif ( $cal_type == LOG_REJECT )\n    $ret = translate ( 'Event rejected' );\n  elseif ( $cal_type == LOG_REJECT_J )\n    $ret = translate ( 'Journal rejected' );\n  elseif ( $cal_type == LOG_REJECT_T )\n    $ret = translate ( 'Task rejected' );\n  elseif ( $cal_type == LOG_REMINDER )\n    $ret = translate ( 'Reminder sent' );\n  elseif ( $cal_type == LOG_UPDATE )\n    $ret = translate ( 'Event updated' );\n  elseif ( $cal_type == LOG_UPDATE_J )\n    $ret = translate ( 'Journal updated' );\n  elseif ( $cal_type == LOG_UPDATE_T )\n    $ret = translate ( 'Task updated' );\n  elseif ( $cal_type == LOG_USER_ADD )\n    $ret = translate ( 'Add User' );\n  elseif ( $cal_type == LOG_USER_DELETE )\n    $ret = translate ( 'Delete User' );\n  elseif ( $cal_type == LOG_USER_UPDATE )\n    $ret = translate ( 'Edit User' );\n  else\n    $ret = '???';\n  //fix any broken special characters\n  $cal_text = preg_replace( \"/&amp;(#[0-9]+|[a-z]+);/i\", \"&$1;\",\n    htmlentities( $cal_text ) );\n  return $ret\n   . ( empty ( $cal_text ) ? '' : $break . $cal_text );\n}\n\n/**\n * Display the <<Admin link on pages if menus are not enabled\n *\n * @param bool $break  If true, include break if empty\n *\n * @return string  HTML for Admin Home link\n * @global string  (Y/N) Is the Top Menu Enabled\n */\nfunction display_admin_link($break = true) {\n  global $MENU_ENABLED;\n\n  $adminStr = translate ( 'Admin' );\n\n  return ( $break ? '<br />' . \"\\n\" : '' )\n   . ( $MENU_ENABLED == 'N' ? '<a title=\"' . $adminStr\n     . '\" class=\"nav\" href=\"adminhome.php\">&laquo;&nbsp; ' . $adminStr\n     . '</a><br /><br />' . \"\\n\" : '' );\n}\n\n/**\n * Generate HTML to create a month display.\n * If $enableDblClick is set to true, the file js/dblclick_add.js should\n * be included in the array of includes passed to print_header().\n */\nfunction display_month( $thismonth, $thisyear, $demo = false,\n  $enableDblClick = false ) {\n  global $DISPLAY_ALL_DAYS_IN_MONTH, $DISPLAY_LONG_DAYS, $DISPLAY_WEEKNUMBER,\n  $is_admin, $is_nonuser, $login, $PUBLIC_ACCESS, $PUBLIC_ACCESS_CAN_ADD,\n  $readonly, $today, $user, $WEEKENDBG, $WEEK_START;\n\n  $ret = '';\n\n  if ( $enableDblClick ) {\n    $can_add = ( $readonly == 'N' || $is_admin );\n\n    if ( $PUBLIC_ACCESS == 'Y' && $PUBLIC_ACCESS_CAN_ADD != 'Y'\n        && $login == '__public__' )\n      $can_add = false;\n\n    if ( $readonly == 'Y' )\n      $can_add = false;\n\n    if ( $is_nonuser )\n      $can_add = false;\n  } else {\n    // double-click not enabled\n    $can_add = false;\n  }\n\n  // Add mouse-over help for table.\n  if ( $can_add ) {\n    $help = 'title=\"' .\n      translate ( 'Double-click on empty cell to add new entry' ) . '\"';\n  } else {\n    $help = '';\n  }\n\n  $ret .= '\n    <table ' . $help . ' class=\"main\" id=\"month_main\">\n      <tr>' . ( $DISPLAY_WEEKNUMBER == 'Y' ? '\n        <th class=\"empty\"></th>' : '' );\n\n  for ( $i = 0; $i < 7; $i++ ) {\n    $thday = ( $i + $WEEK_START ) % 7;\n    $ret .= '\n        <th' . ( is_weekend ( $thday ) ? ' class=\"weekend\"' : '' )\n     . '>' . weekday_name ( $thday, $DISPLAY_LONG_DAYS ) . '</th>';\n  }\n  $ret .= '\n      </tr>';\n  $charset = translate ( 'charset' );\n  $weekStr = translate ( 'Week' );\n  $WKStr = translate ( 'WK' );\n\n  $wkstart = get_weekday_before ( $thisyear, $thismonth );\n  // Generate values for first day and last day of month.\n  $monthstart = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth, 1, $thisyear ) );\n  $monthend = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, 0, $thisyear ) );\n  $monthend2 = date ( 'Ymd His', mktime ( 0, 0, 0, $thismonth + 1, 0, $thisyear ) );\n  $todayYmd = date ( 'Ymd', $today );\n  for ( $i = $wkstart; date ( 'Ymd', $i + 43200 ) <= $monthend; $i += 604800 ) {\n    $ret .= '\n      <tr>';\n    if ( $DISPLAY_WEEKNUMBER == 'Y' ) {\n      $tmp = date( 'W', $i + 172800 );\n      $ret .= '\n        <td class=\"weekcell\"><a title=\"' . $weekStr . ' ' . $tmp . '\" href=\"'\n       . ( $demo ? '' : 'week.php?date=' . date ( 'Ymd', $i + 86400 )\n         . ( ! empty ( $user ) && $user != $login ? '&amp;user=' . $user : '' )\n         . ( empty ( $cat_id ) ? '' : '&amp;cat_id=' . $cat_id ) ) . '\"' . '>';\n\n      $wkStr = $WKStr . $tmp;\n      $wkStr2 = '';\n\n      if ( $charset == 'UTF-8' )\n        $wkStr2 = $wkStr;\n      else {\n        for ( $w = 0, $cnt = strlen ( $wkStr ); $w < $cnt; $w++ ) {\n          $wkStr2 .= substr ( $wkStr, $w, 1 ) . '<br />';\n        }\n      }\n      $ret .= $wkStr2 . '</a></td>';\n    }\n\n    for ( $j = 0; $j < 7; $j++ ) {\n      $date = $i + ( $j * 86400 + 43200 );\n      $dateYmd = date ( 'Ymd', $date );\n      $dateD = date ( 'd', $date );\n      $thiswday = date ( 'w', $date );\n      $is_weekend = is_weekend ( $date ) && ( ! empty ( $WEEKENDBG ) );\n      $ret .= '\n        <td';\n\n      if ( $can_add ) {\n        $ret .= \" ondblclick=\\\"dblclick_add( '$dateYmd', '$user' )\\\"\";\n      }\n\n      $currMonth = ( $dateYmd >= $monthstart && $dateYmd <= $monthend );\n      if ( $currMonth ||\n        ( ! empty ( $DISPLAY_ALL_DAYS_IN_MONTH ) && $DISPLAY_ALL_DAYS_IN_MONTH == 'Y' ) ) {\n        $class = ( $currMonth\n          ? ( ! $demo && $dateYmd == $todayYmd ? 'today' : ( $is_weekend ? 'weekend' : '' ) )\n          : 'othermonth' );\n\n        // Get events for this day.\n        $ret_events = '';\n        if ( ! $demo ) {\n          $ret_events = print_date_entries ( $dateYmd,\n            ( empty ( $user ) ? $login : $user ), false, true );\n        } else {\n          // Since we base this calendar on the current month,\n          // the placement of the days always change so\n          // set 3rd Thursday as \"today\" for the demo...\n          if ( $dateD > 15 && $dateD < 23 && $thiswday == 4 ) {\n            $class = 'today';\n            $ret_events = translate ( 'Today' );\n          }\n          // ... and set 2nd Saturday and 2nd Tuesday as the demo event days.\n          if ( $dateD > 7 && $dateD < 16 &&\n            ( $thiswday == 2 || $thiswday == 6 ) ) {\n            $class .= ' entry hasevents';\n            $ret_events = translate ( 'My event text' );\n          }\n        }\n        $class = trim ( $class );\n        $class .= ( ! empty( $ret_events )\n            && strstr( $ret_events, 'class=\"entry\"' )\n// If we decide we don't like it, just remove the next 1 line.\n            || strstr( $ret_events, 'class=\"layerentry\"' )\n          ? ' hasevents' : '' );\n\n        $ret .= ( strlen ( $class ) ? ' class=\"' . $class . '\"' : '' )\n         . '>' . $ret_events . '</td>';\n      } else\n        $ret .= ( $is_weekend ? ' class=\"weekend\"' : '' ) . '>&nbsp;</td>';\n    }\n    $ret .= '\n      </tr>';\n  }\n  return $ret . '\n    </table>';\n}\n\n/**\n * Generate the HTML for the navigation bar.\n */\nfunction display_navigation ( $name, $show_arrows = true, $show_cats = true ) {\n  global $cat_id, $CATEGORIES_ENABLED, $caturl, $DATE_FORMAT_MY,\n  $DISPLAY_SM_MONTH, $DISPLAY_TASKS, $DISPLAY_WEEKNUMBER, $is_admin,\n  $is_assistant, $is_nonuser_admin, $login, $nextYmd, $nowYmd, $prevYmd,\n  $single_user, $spacer, $thisday, $thismonth, $thisyear, $user, $user_fullname,\n  $wkend, $wkstart;\n\n  if ( empty ( $name ) )\n    return;\n\n  $nextStr = translate ( 'Next' );\n  $prevStr = translate ( 'Previous' );\n  $u_url = ( ! empty ( $user ) && $user != $login\n    ? 'user=' . $user . '&amp;' : '' );\n  $ret = '\n      <div class=\"topnav\"'\n  // Hack to prevent giant space between minicals and navigation in IE.\n  . ( get_web_browser() == 'MSIE' ? ' style=\"zoom:1\"' : '' )\n   . '>' . ( $show_arrows &&\n    ( $name != 'month' || $DISPLAY_SM_MONTH == 'N' || $DISPLAY_TASKS == 'Y' ) ? '\n        <a title=\"' . $nextStr . '\" class=\"next\" href=\"' . $name . '.php?'\n     . $u_url . 'date=' . $nextYmd . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-right-circle.svg\" alt=\"' . $nextStr . '\" /></a>\n        <a title=\"' . $prevStr . '\" class=\"prev\" href=\"' . $name . '.php?'\n     . $u_url . 'date=' . $prevYmd . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-left-circle.svg\" alt=\"' . $prevStr . '\" /></a>' : '' ) . '\n        <div class=\"title\">\n          <span class=\"date\">';\n\n  if ( $name == 'day' )\n    $ret .= date_to_str ( $nowYmd );\n  elseif ( $name == 'week' )\n    $ret .= date_to_str ( date ( 'Ymd', $wkstart ), '', false )\n     . '&nbsp;&nbsp;&nbsp; - &nbsp;&nbsp;&nbsp;'\n     . date_to_str ( date ( 'Ymd', $wkend - 86400 ), '', false )\n     . ( $DISPLAY_WEEKNUMBER == 'Y' ? \" \\n(\" . translate ( 'Week' ) . ' '\n       . date ( 'W', $wkstart + 86400 ) . ')' : '' );\n  elseif ( $name == 'month' || $name == 'view_l' ) {\n    $ret .= $spacer\n     . date_to_str ( sprintf ( \"%04d%02d01\", $thisyear, $thismonth ),\n      $DATE_FORMAT_MY, false, false, true );\n  }\n\n  return $ret . '</span>\n          <span class=\"user\">'\n  // Display current calendar's user (if not in single user).\n  . ( $single_user == 'N' ? '<br />' . $user_fullname : '' )\n   . ( $is_nonuser_admin ||\n    ( $is_admin && ! empty ( $user ) && $user == '__public__' )\n    ? '<br />-- ' . translate ( 'Admin mode' ) . ' --' : '' )\n   . ( $is_assistant\n    ? '<br />-- ' . translate ( 'Assistant mode' ) . ' --' : '' ) . '</span>'\n   . ( $CATEGORIES_ENABLED == 'Y' && $show_cats &&\n    ( ! $user || ( $user == $login || $is_assistant ) ) ? '<br /><br />'\n     . print_category_menu ( $name,\n      sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, $thisday ),\n      $cat_id ) : '' ) . '\n        </div>\n      </div><br />';\n}\n\n/**\n * Prints out a minicalendar for a month.\n *\n * @todo Make day.php NOT be a special case\n *\n * @param int    $thismonth      Number of the month to print\n * @param int    $thisyear       Number of the year\n * @param bool   $showyear       Show the year in the calendar's title?\n * @param bool   $show_weeknums  Show week numbers to the left of each row?\n * @param string $minical_id     id attribute for the minical table\n * @param string $month_link     URL and query string for month link that should\n *                               come before the date specification (e.g.\n *                               month.php?  or  view_l.php?id=7&amp;)\n */\nfunction display_small_month ( $thismonth, $thisyear, $showyear,\n  $show_weeknums = false, $minical_id = '', $month_link = 'month.php?' ) {\n  global $boldDays, $caturl, $DATE_FORMAT_MY, $DISPLAY_ALL_DAYS_IN_MONTH,\n  $DISPLAY_TASKS, $DISPLAY_WEEKNUMBER, $get_unapproved, $login,\n  $MINI_TARGET, // Used by minical.php\n  $SCRIPT, $SHOW_EMPTY_WEEKENDS,//Used by year.php\n  $thisday, // Needed for day.php\n  $today, $use_http_auth, $user, $WEEK_START;\n\n  $nextStr = translate ( 'Next' );\n  $prevStr = translate ( 'Previous' );\n  $u_url = ( $user != $login && ! empty ( $user )\n    ? 'user=' . $user . '&amp;' : '' );\n  $weekStr = translate ( 'Week' );\n\n  // Start the minical table for each month.\n  $ret = '\n    <table class=\"minical\"'\n   . ( $minical_id != '' ? ' id=\"' . $minical_id . '\"' : '' ) . '>';\n\n  $monthstart = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth, 1, $thisyear ) );\n  $monthend = date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, 0, $thisyear ) );\n  // Determine if the week starts on Sunday or Monday.\n  // TODO:  We need to be able to start a week on ANY day.\n  $wkstart = get_weekday_before ( $thisyear, $thismonth );\n\n  if ( $SCRIPT == 'day.php' ) {\n    $month_ago =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth - 1, 1, $thisyear ) );\n    $month_ahead =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, 1, $thisyear ) );\n\n    $ret .= '<caption>' . $thisday . '</caption>\n      <thead>\n        <tr class=\"monthnav\">\n          <th colspan=\"' . ( $DISPLAY_WEEKNUMBER == true ? 8 : 7 ) . '\">\n            <a title=\"' . $prevStr . '\" class=\"prev\" href=\"day.php?' . $u_url\n     . 'date=' . $month_ago . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-left-circle.svg\" alt=\"' . $prevStr . '\" /></a>\n            <a title=\"' . $nextStr . '\" class=\"next\" href=\"day.php?' . $u_url\n     . 'date=' . $month_ahead . $caturl\n     . '\"><img src=\"images/bootstrap-icons/arrow-right-circle.svg\" alt=\"' . $nextStr . '\" /></a>'\n     . date_to_str ( sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, 1 ),\n      ( $showyear != '' ? $DATE_FORMAT_MY : '__month__' ), false ) . '\n          </th>\n        </tr>';\n  } elseif ( $SCRIPT == 'minical.php' ) {\n    $month_ago =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth - 1, $thisday, $thisyear ) );\n    $month_ahead =\n    date ( 'Ymd', mktime ( 0, 0, 0, $thismonth + 1, $thisday, $thisyear ) );\n\n    $ret .= '\n      <thead>\n        <tr class=\"monthnav\">\n          <th colspan=\"7\">\n            <a title=\"' . $prevStr . '\" class=\"prev\" href=\"minical.php?'\n     . $u_url . 'date=' . $month_ago\n     . '\"><img src=\"images/bootstrap-icons/arrow-left-circle.svg\" alt=\"' . $prevStr . '\" /></a>\n            <a title=\"' . $nextStr . '\" class=\"next\" href=\"minical.php?'\n     . $u_url . 'date=' . $month_ahead\n     . '\"><img src=\"images/bootstrap-icons/arrow-right-circle.svg\" alt=\"' . $nextStr . '\" /></a>'\n     . date_to_str ( sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, 1 ),\n      ( $showyear != '' ? $DATE_FORMAT_MY : '__month__' ), false ) . '\n          </th>\n        </tr>';\n  } else // Not day or minical script. Print the month name.\n    $ret .= '\n      <caption><a href=\"' . $month_link . $u_url . 'year=' . $thisyear\n     . '&amp;month=' . $thismonth . '\">'\n     . date_to_str ( sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, 1 ),\n      ( $showyear != '' ? $DATE_FORMAT_MY : '__month__' ), false )\n     . '</a></caption>\n      <thead>';\n\n  $ret .= '\n        <tr>'\n  // Print the headers to display the day of the week (Sun, Mon, Tues, etc.).\n  // If we're showing week numbers we need an extra column.\n  . ( $show_weeknums && $DISPLAY_WEEKNUMBER == 'Y' ? '\n          <th class=\"empty\">&nbsp;</th>' : '' );\n\n  for ( $i = 0; $i < 7; $i++ ) {\n    $thday = ( $i + $WEEK_START ) % 7;\n    $ret .= '\n          <th' . ( is_weekend ( $thday ) ? ' class=\"weekend\"' : '' ) . '>'\n     . weekday_name ( $thday, 'D' ) . '</th>';\n  }\n  // End the header row.\n  $ret .= '\n        </tr>\n      </thead>\n      <tbody>';\n  for ( $i = $wkstart; date ( 'Ymd', $i ) <= $monthend; $i += 604800 ) {\n    $tmp = $i + 172800; // 48 hours.\n    $ret .= '\n        <tr>' . ( $show_weeknums && $DISPLAY_WEEKNUMBER == 'Y' ? '\n          <td><a class=\"weeknumber\" ' . 'title=\"' . $weekStr . '&nbsp;'\n       . date ( 'W', $i + 86400 ) . '\" ' . 'href=\"week.php?' . $u_url . 'date='\n       . date ( 'Ymd', $tmp ) . '\">(' . date ( 'W', $tmp ) . ')</a></td>' : '' );\n\n    for ( $j = 0; $j < 7; $j++ ) {\n      // Add 12 hours just so we don't have DST problems.\n      $date = $i + ( $j * 86400 + 43200 );\n      $dateYmd = date ( 'Ymd', $date );\n      $hasEvents = false;\n      $title = '';\n      $ret .= '\n          <td';\n\n      if ( $boldDays ) {\n        $ev = get_entries ( $dateYmd, $get_unapproved, true, true );\n        if ( count ( $ev ) > 0 ) {\n          $hasEvents = true;\n          $title = $ev[0]->getName();\n        } else {\n          $rep = get_repeating_entries ( $user, $dateYmd, $get_unapproved );\n          if ( count ( $rep ) > 0 ) {\n            $hasEvents = true;\n            $title = $rep[0]->getName();\n          }\n        }\n      }\n      if ( ( $dateYmd >= $monthstart && $dateYmd <= $monthend ) ||\n          ( ! empty ( $DISPLAY_ALL_DAYS_IN_MONTH ) &&\n            $DISPLAY_ALL_DAYS_IN_MONTH == 'Y' ) ) {\n        $class =\n        // If it's a weekend.\n        ( is_weekend ( $date ) ? 'weekend' : '' )\n        // If the day being viewed is today AND script = day.php.\n        . ( $dateYmd == $thisyear . $thismonth . $thisday && $SCRIPT == 'day.php'\n          ? ' selectedday' : '' )\n        // Are there any events scheduled for this date?\n        . ( $hasEvents ? ' hasevents' : '' );\n\n        $ret .= ( $class != '' ? ' class=\"' . $class . '\"' : '' )\n         . ( $dateYmd == date ( 'Ymd', $today ) ? ' id=\"today\"' : '' )\n         . '><a href=\"';\n\n        if ( $SCRIPT == 'minical.php' )\n          $ret .= ( $use_http_auth\n            ? 'day.php?user=' . $user\n            : 'nulogin.php?login=' . $user . '&amp;return_path=day.php' )\n           . '&amp;date=' . $dateYmd . '\"'\n           . ( empty ( $MINI_TARGET ) ? '' : ' target=\"' . $MINI_TARGET . '\"' )\n           . ( empty ( $title ) ? '' : ' title=\"' . $title . '\"' );\n        else\n          $ret .= 'day.php?' . $u_url . 'date=' . $dateYmd . '\"';\n\n        $ret .= '>' . date ( 'j', $date ) . '</a></td>';\n      } else\n        $ret .= ' class=\"empty' . ( ! empty ( $SHOW_EMPTY_WEEKENDS )\n          && is_weekend ( $date ) ? ' weekend' : '' ) . '\">&nbsp;</td>';\n    } // end for $j\n    $ret .= '\n        </tr>';\n  } // end for $i\n  return $ret . '\n      </tbody>\n    </table>';\n}\n\n/**\n * Prints small task list for this $login user.\n */\nfunction display_small_tasks ( $cat_id ) {\n  global $caturl, $DATE_FORMAT_TASK, $eventinfo,\n  $is_assistant, $login, $task_filter, $user;\n  static $key = 0;\n\n  if ( ! empty ( $user ) && $user != $login && ! $is_assistant )\n    return false;\n\n  $SORT_TASKS = 'Y';\n\n  $pri[1] = translate ( 'High' );\n  $pri[2] = translate ( 'Medium' );\n  $pri[3] = translate ( 'Low' );\n  $task_user = $login;\n  $u_url = '';\n\n  if ( $user != $login && ! empty ( $user ) ) {\n    $u_url = 'user=' . $user . '&amp;';\n    $task_user = $user;\n  }\n  $ajax = [];\n  $dueSpacer = '&nbsp;';\n  $task_cat = ( empty ( $cat_id ) ? -99 : $cat_id );\n\n  if ( $SORT_TASKS == 'Y' ) {\n    for ( $i = 0; $i < 4; $i++ ) {\n      $ajax[$i] = '\n        <td class=\"sorter\" onclick=\"sortTasks( ' . $i . ', ' . $task_cat\n       . ', this )\"><img src=\"images/bootstrap-icons/arrow-up-short.svg\" style=\"vertical-align:bottom\" /></td>';\n      $ajax[$i + 4] = '\n        <td  class=\"sorter sorterbottom\" onclick=\"sortTasks( ' .\n      ( $i + 4 ) . ', ' . $task_cat\n       . ', this )\"><img src=\"images/bootstrap-icons/arrow-down-short.svg\" style=\"vertical-align:top\" /></td>';\n    }\n  } else {\n    $dueSpacer = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';\n    $ajax = array_pad ( $ajax, 8, '\n        <td></td>' );\n  }\n\n  $priorityStr = translate ( 'Priority' );\n  $dateFormatStr = $DATE_FORMAT_TASK;\n  $task_list = query_events ( $task_user, false,\n    ( empty ( $task_filter ) ? '' : $task_filter ), $cat_id, true );\n  $row_cnt = 1;\n  $task_html = '\n    <table class=\"minitask\" cellpadding=\"2\">\n      <tr class=\"header\">\n        <th colspan=\"6\">' . translate ( 'TASKS' ) . '</th>\n        <th class=\"alignright\" colspan=\"2\"><a href=\"edit_entry.php?' . $u_url\n   . 'eType=task' . $caturl\n   . '\"><img src=\"images/bootstrap-icons/plus-circle.sv\" alt=\"+\" class=\"new\" /></a></th>\n      </tr>\n      <tr class=\"header\">\n        <td rowspan=\"2\" class=\"sorterbottom\">!&nbsp;</td>' . $ajax[0] . '\n        <td rowspan=\"2\" width=\"20%\" class=\"sorterbottom\">'\n   . translate ( 'Task_Title' )\n   . '&nbsp;</td>' . $ajax[1] . '\n        <td rowspan=\"2\" class=\"sorterbottom\">' . translate ( 'Due' )\n   . $dueSpacer . '</td>'\n   . $ajax[2] . '\n        <td rowspan=\"2\" class=\"sorterbottom\">%</td>' . $ajax[3] . '\n      </tr>\n      <tr class=\"header\">' . $ajax[4] . $ajax[5] . $ajax[6] . $ajax[7] . '\n      </tr>';\n  foreach ( $task_list as $E ) {\n    // Check UAC.\n    $task_owner = $E->getLogin();\n    if( access_is_enabled() ) {\n      $can_access = access_user_calendar ( 'view', $task_owner, '',\n        $E->getCalType(), $E->getAccess() );\n      if ( $can_access == 0 )\n        continue;\n    }\n    $cal_id = $E->getId();\n    // Generate popup info.\n    $linkid = 'pop' . \"$cal_id-$key\";\n    $key++;\n    $link = '<a href=\"view_entry.php?'\n     . ( $task_owner != $login ? 'user=' . $task_owner . '&amp;' : '' )\n     . 'id=' . $cal_id . '\"';\n    $task_html .= '\n      <tr class=\"task\" id=\"' . $linkid . '\" style=\"background-color:'\n     . rgb_luminance( $GLOBALS['BGCOLOR'], $E->getPriority() ) . '\">\n        <td colspan=\"2\">' . $link . ' title=\"' . $priorityStr . '\">'\n     . $E->getPriority() . '</a></td>\n        <td class=\"name\" colspan=\"2\" width=\"50%\">&nbsp;' . $link . ' title=\"'\n     . translate( 'Task Name' ) . ': ' . $E->getName() . '\">'\n     . substr( $E->getName(), 0, 15 )\n     . ( strlen( $E->getName() ) > 15 ? '...' : '' ) . '</a></td>\n        <td colspan=\"2\">' . $link . ' title=\"' . translate ( 'Task Due Date' )\n     . '\">'\n     . date_to_str( $E->getDueDate(), $dateFormatStr, false, false ) . '</a>'\n     . '</td>\n        <td class=\"pct\" colspan=\"2\">' . $link . ' title=\"% '\n     . translate( 'Completed' ) . '\">' . $E->getPercent() . '</a></td>\n      </tr>';\n    $row_cnt++;\n    // Build special string to pass to popup.\n    // TODO: Move this logic into build_entry_popup().\n    $eventinfo .= build_entry_popup( 'eventinfo-' . $linkid, $E->getLogin(),\n      $E->getDescription(), translate( 'Due Time' ) . ':'\n       . display_time( '', 0, $E->getDueDateTimeTS() ) . '</dd><dd>'\n       . translate ( 'Due Date' ) . ':'\n       . date_to_str( $E->getDueDate(), '', false )\n       . \"</dd>\\n<dt>\" . $priorityStr . \":</dt>\\n<dd>\" . $E->getPriority()\n       . '-' . $pri[ceil( $E->getPriority() / 3 )] . \"</dd>\\n<dt>\"\n       . translate( 'Percent Complete' ) . \":</dt>\\n<dd>\" . $E->getPercent()\n       . '%', '', $E->getLocation(), $E->getName(), $cal_id );\n  }\n  for ( $i = 7; $i > $row_cnt; $i-- ) {\n    $task_html .= '<tr><td colspan=\"8\" class=\"filler\">&nbsp;</td></tr>' . \"\\n\";\n  }\n  $task_html .= \"</table>\\n\";\n  return $task_html;\n}\n\n/**\n * Displays a time in either 12 or 24 hour format.\n *\n * @param string $time       Input time in HHMMSS format\n *                           Optionally, the format can be YYYYMMDDHHMMSS\n * @param int   $control     bitwise command value\n *   0 default\n *   1 ignore_offset Do not use the timezone offset\n *   2 show_tzid Show abbrev TZ id ie EST after time\n *   4 use server's timezone\n * @param int    $timestamp  optional input time in timestamp format\n * @param string $format     user's TIME_FORMAT when sending emails\n *\n * @return string  The time in the user's timezone and preferred format.\n */\nfunction display_time ( $time = '', $control = 0, $timestamp = '',\n  $format = '' ) {\n  global $SERVER_TIMEZONE, $TIME_FORMAT;\n\n  if ( $control & 4 ) {\n    $currentTZ = getenv ( 'TZ' );\n    set_env ( 'TZ', $SERVER_TIMEZONE );\n  }\n  $t_format = ( empty ( $format ) ? $TIME_FORMAT : $format );\n  $tzid = date ( ' T' ); //Default tzid for today.\n\n  if ( ! empty ( $time ) && strlen ( $time ) > 12 )\n    $timestamp = date_to_epoch ( $time );\n\n  if ( ! empty ( $timestamp ) ) {\n    $time = date ( 'His', $timestamp );\n    $tzid = date ( ' T', $timestamp );\n    // $control & 1 = do not do timezone calculations\n    if ( $control & 1 ) {\n      $time = gmdate ( 'His', $timestamp );\n      $tzid = ' GMT';\n    }\n  }\n  $hour = intval ( $time / 10000 );\n  $min = abs ( ( $time / 100 ) % 100 );\n\n  // Prevent goofy times like 8:00 9:30 9:00 10:30 10:00.\n  if ( $time < 0 && $min > 0 )\n    $hour--;\n  while ( $hour < 0 ) {\n    $hour += 24;\n  }\n  while ( $hour > 23 ) {\n    $hour -= 24;\n  }\n  if ( $t_format == '12' ) {\n    $ampm = translate ( $hour >= 12 ? 'pm' : 'am' );\n    $hour %= 12;\n    if ( $hour == 0 )\n      $hour = 12;\n\n    $ret = sprintf ( \"%d:%02d%s\", $hour, $min, $ampm );\n  } else {\n    //$ret = sprintf ( \"%02d&#58;%02d\", $hour, $min );\n    $ret = sprintf ( \"%02d:%02d\", $hour, $min );\n  }\n\n  if ( $control & 2 )\n    $ret .= $tzid;\n\n  // Reset timezone to previous value.\n  if ( ! empty ( $currentTZ ) )\n    set_env ( 'TZ', $currentTZ );\n\n  return $ret;\n}\n\n/**\n * Checks for any unnaproved events.\n *\n * If any are found, display a link to the unapproved events\n * (where they can be approved).\n *\n * If the user is an admin user, also count up any public events.\n * If the user is a nonuser admin, count up events on the nonuser calendar.\n *\n * @param string $user  Current user login\n */\nfunction display_unapproved_events ( $user ) {\n  global $is_admin, $is_nonuser, $login, $MENU_ENABLED,\n  $NONUSER_ENABLED, $PUBLIC_ACCESS;\n  static $retval;\n\n  // Don't do this for public access login,\n  // admin user must approve public events if UAC is not enabled.\n  if ( $user == '__public__' || $is_nonuser )\n    return;\n\n  // Don't run this more than once.\n  if ( ! empty ( $retval[$user] ) )\n    return $retval[$user];\n\n  $app_user_hash = $app_users = $query_params = [];\n  $query_params[] = $user;\n  $ret = '';\n  $sql = 'SELECT COUNT( weu.cal_id ) FROM webcal_entry_user weu, webcal_entry we\n    WHERE weu.cal_id = we.cal_id AND weu.cal_status = \\'W\\'\n    AND ( weu.cal_login = ?'\n   . ( $PUBLIC_ACCESS == 'Y' && $is_admin && ! access_is_enabled()\n    ? ' OR weu.cal_login = \\'__public__\\'' : '' );\n\n  if( access_is_enabled() ) {\n    $app_user_hash[$login] = 1;\n    $app_users[] = $login;\n\n    $all = ( $NONUSER_ENABLED == 'Y'\n      // TODO:  Add 'approved' switch to these functions.\n      ? array_merge( get_my_users(), get_my_nonusers() ) : get_my_users() );\n\n    for ( $j = 0, $cnt = count ( $all ); $j < $cnt; $j++ ) {\n      $x = $all[$j]['cal_login'];\n      if ( access_user_calendar ( 'approve', $x ) &&\n          empty ( $app_user_hash[$x] ) ) {\n        $app_user_hash[$x] = 1;\n        $app_users[] = $x;\n      }\n    }\n    for ( $i = 0, $cnt = count ( $app_users ); $i < $cnt; $i++ ) {\n      $query_params[] = $app_users[$i];\n      $sql .= ' OR weu.cal_login = ? ';\n    }\n  } else\n  if ( $NONUSER_ENABLED == 'Y' ) {\n    $admincals = get_my_nonusers ( $login );\n    for ( $i = 0, $cnt = count ( $admincals ); $i < $cnt; $i++ ) {\n      $query_params[] = $admincals[$i]['cal_login'];\n      $sql .= ' OR weu.cal_login = ? ';\n    }\n  }\n  $rows = dbi_get_cached_rows ( $sql . ' )', $query_params );\n  if ( $rows ) {\n    $row = $rows[0];\n    if ( $row && $row[0] > 0 )\n      $ret .= ( $MENU_ENABLED == 'N'\n        ? '<a class=\"nav\" href=\"list_unapproved.php'\n         . ( $user != $login ? '?user=' . $user . '\"' : '' )\n         . '\">' . str_replace ( 'XXX', $row[0],\n          translate ( 'You have XXX unapproved entries' ) ) . \"</a><br />\\n\"\n        : // Return something that won't display in bottom menu\n        // but still has strlen > 0.\n        '<!--NOP-->' );\n  }\n\n  $retval[$user] = $ret;\n\n  return $ret;\n}\n/**\n * Get the request origin.\n */\nfunction url_origin($s, $use_forwarded_host = false)\n{\n  $ssl      = (!empty($s['HTTPS']) && $s['HTTPS'] == 'on');\n  $sp       = strtolower($s['SERVER_PROTOCOL']);\n  $protocol = substr($sp, 0, strpos($sp, '/')) . (($ssl) ? 's' : '');\n  $port     = $s['SERVER_PORT'];\n  $port     = ((!$ssl && $port == '80') || ($ssl && $port == '443')) ? '' : ':' . $port;\n  $host     = ($use_forwarded_host && isset($s['HTTP_X_FORWARDED_HOST'])) ? $s['HTTP_X_FORWARDED_HOST'] : (isset($s['HTTP_HOST']) ? $s['HTTP_HOST'] : null);\n  $host     = isset($host) ? $host : $s['SERVER_NAME'] . $port;\n  return $protocol . '://' . $host;\n}\n\n/**\n * Get the full URL of the current request.\n */\nfunction full_url($s, $use_forwarded_host = false)\n{\n  return url_origin($s, $use_forwarded_host) . $s['REQUEST_URI'];\n}\n\n/**\n * Sends a redirect to the specified page.\n * The database connection is closed and execution terminates in this function.\n *\n * <b>Note:</b>  MS IIS/PWS has a bug that does not allow sending a cookie and a\n * redirect in the same HTTP header. When we detect that the web server is IIS,\n * we accomplish the redirect using meta-refresh.\n * See the following for more info on the IIS bug:\n * {@link http://www.faqts.com/knowledge_base/view.phtml/aid/9316/fid/4}\n *\n * @param string $url  The page to redirect to. In theory, this should be an\n *                     absolute URL, but all browsers accept relative URLs\n *                     (like \"month.php\").\n *\n * @global string    Type of webserver\n * @global array     Server variables\n * @global resource  Database connection\n */\nfunction do_redirect ( $url ) {\n  global $_SERVER, $c, $SERVER_SOFTWARE, $SERVER_URL;\n\n  // Replace any '&amp;' with '&' since we don't want that in the HTTP header.\n  $url = str_replace ( '&amp;', '&', $url );\n\n  if ( empty ( $SERVER_SOFTWARE ) )\n    $SERVER_SOFTWARE = $_SERVER['SERVER_SOFTWARE'];\n\n  // As of RFC 7231, Location redirects can be relative URLs.\n  // See: https://tools.ietf.org/html/rfc7231#section-7.1.2\n\n  $meta = '';\n  if ( ( substr ( $SERVER_SOFTWARE, 0, 5 ) == 'Micro' ) ||\n      ( substr ( $SERVER_SOFTWARE, 0, 3 ) == 'WN/' ) )\n    $meta = '\n    <meta http-equiv=\"refresh\" content=\"0; url=' . $url . '\" />';\n  else\n    header ( 'Location: ' . $url );\n\n  echo send_doctype ( 'Redirect' ) . $meta . '\n  </head>\n  <body>\n    Redirecting to.. <a href=\"' . $url . '\">here</a>.\n  </body>\n</html>';\n  dbi_close ( $c );\n  exit;\n}\n\n/**\n * Takes an input string and encode it into a slightly encoded hexval that we\n * can use as a session cookie.\n *\n * @param string $instr  Text to encode\n *\n * @return string  The encoded text.\n *\n * @global array Array of offsets\n *\n * @see decode_string\n */\nfunction encode_string ( $instr ) {\n  global $offsets;\n\n  $cntOffsets = count ( $offsets );\n  $ret = '';\n  for ( $i = 0, $cnt = strlen ( $instr ); $i < $cnt; $i++ ) {\n    $ret .= bin2hex ( chr ( ( ord ( substr ( $instr, $i, 1 ) ) + $offsets[ $i %\n      $cntOffsets ] ) % 256 ) );\n  }\n  return $ret;\n}\n\n/**\n * Check for errors and return required HTML for display\n *\n * @param string $nextURL   URL the redirect to\n * @param bool   $redirect  Redirect OR popup Confirmation window\n *\n * @return string  HTML to display.\n *\n * @global string  $error  Current error message\n *\n * @uses print_error_header\n */\nfunction error_check ( $nextURL, $redirect = true ) {\n  global $error;\n\n  $ret = '';\n  if ( ! empty ( $error ) ) {\n    print_header ( '', '', '', true );\n    $ret .= '\n    <h2>' . print_error ( $error ) . '</h2>';\n  } else {\n    if ( $redirect )\n      do_redirect ( $nextURL );\n\n    $ret .= '<html>\n  <head></head>\n  <body onload=\"alert( \\'' . translate ( 'Changes successfully saved', true )\n     . '\\' ); window.parent.location.href=\\'' . $nextURL . '\\';\">';\n  }\n  return $ret . '\n  </body>\n</html>';\n}\n\n/**\n * Gets the list of external users for an event from the\n * webcal_entry_ext_user table in HTML format.\n *\n * @param int $event_id    Event ID\n * @param int $use_mailto  When set to 1, email address will contain an href\n *                         link with a mailto URL.\n *\n * @return string  The list of external users for an event formated in HTML.\n */\nfunction event_get_external_users ( $event_id, $use_mailto = 0 ) {\n  $ret = '';\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_fullname, cal_email\n    FROM webcal_entry_ext_user WHERE cal_id = ? ORDER by cal_fullname',\n    [$event_id] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n\n      // Remove [\\d] if duplicate name.\n      $ret .= trim ( preg_replace ( '/\\[[\\d]]/', '', $row[0] ) );\n      if ( strlen ( $row[1] ) ) {\n        $row_one = htmlentities ( \" <$row[1]>\" );\n        $ret .= ( $use_mailto\n          ? ' <a href=\"mailto:' . \"$row[1]\\\">$row_one</a>\" : $row_one );\n      }\n      $ret .= \"\\n\";\n    }\n  }\n  return $ret;\n}\n\n/**\n * Fakes an email for testing purposes.\n *\n * @param string $mailto  Email address to send mail to\n * @param string $subj    Subject of email\n * @param string $text    Email body\n * @param string $hdrs    Other email headers\n *\n * @ignore\n */\nfunction fake_mail ( $mailto, $subj, $text, $hdrs ) {\n  echo 'To: ' . $mailto . '<br />\nSubject: ' . $subj . '<br />\n' . nl2br ( $hdrs ) . '<br />\n' . nl2br ( $text );\n}\n\n/**\n * Generate activity log\n *\n *  @paran  int   $id       Event id if called from view_entry.php\n *  @param  bool  $sys      Display System Log ro Event Log\n *  @param  int   $startid  Event number to start off list\n *\n *  @return string  HTML to diplay log.\n */\nfunction generate_activity_log ( $id = '', $sys = false, $startid = '' ) {\n  global $GENERAL_USE_GMT, $nextpage, $PAGE_SIZE;\n\n  $nextpage = '';\n  $size = ( $id ? 'h3' : 'h2' );\n  $sql_params = [];\n  if ( ! empty ( $id ) )\n    $sql_params[] = $id;\n\n  $sql_params[] = $startid;\n  $ret = \"<$size>\"\n   . ( $sys ? translate ( 'System Log' ) : translate ( 'Activity Log' ) )\n   . ( $sys ? '' : ' &nbsp;<a href=\"rss_activity_log.php\">'\n   . '<img src=\"images/bootstrap-icons/rss-fill.svg\" width=\"14\" height=\"14\" alt=\"RSS 2.0 - '\n   . translate( 'Activity Log' ) . '\" /></a>' )\n   . \"</$size>\" . display_admin_link(false) . '\n    <table class=\"table table-striped mt-2 table-responsive\">\n      <thead><tr>\n        <th class=\"usr\">' . translate ( 'User' ) . '</th>\n        <th class=\"cal\">' . translate ( 'Calendar' ) . '</th>\n        <th class=\"scheduled\">' . translate ( 'Date' ) . '/'\n   . translate ( 'Time' ) . '</th>' . ( $sys || $id ? '' : '\n        <th class=\"dsc\">' . translate ( 'Event' ) . '</th>' ) . '\n        <th class=\"action\">' . translate ( 'Action' ) . '</th>\n      </tr></thead><tbody>';\n\n  $sql = 'SELECT wel.cal_login, wel.cal_user_cal, wel.cal_type, wel.cal_date,\n    wel.cal_time, wel.cal_text, '\n   . ( $sys\n    ? 'wel.cal_log_id FROM webcal_entry_log wel WHERE wel.cal_entry_id = 0'\n    : 'we.cal_id, we.cal_name, wel.cal_log_id, we.cal_type\n      FROM webcal_entry_log wel, webcal_entry we\n      WHERE wel.cal_entry_id = we.cal_id' )\n   . ( empty ( $id ) ? '' : ' AND we.cal_id = ?' )\n   . ( empty ( $startid ) ? '' : ' AND wel.cal_log_id <= ?' )\n   . ' ORDER BY wel.cal_log_id DESC';\n\n  $res = dbi_execute ( $sql, $sql_params );\n\n  if ( $res ) {\n    $num = 0;\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      $l_login = $row[0];\n      $l_user = $row[1];\n      $l_type = $row[2];\n      $l_date = $row[3];\n      $l_time = $row[4];\n      $l_text = $row[5];\n\n      if ( $sys )\n        $l_id = $row[6];\n      else {\n        $l_eid = $row[6];\n        $l_ename = $row[7];\n        $l_id = $row[8];\n        $l_etype = $row[9];\n      }\n      $num++;\n      if ( $num > $PAGE_SIZE ) {\n        $nextpage = $l_id;\n        break;\n      } else\n        $ret .= '\n      <tr' . ( $num % 2 ? ' class=\"odd\"' : '' ) . '>\n        <td>' . $l_login . '</td>\n        <td>' . $l_user . '</td>\n        <td>' . date_to_str ( $l_date ) . '&nbsp;'\n         . display_time ( $l_date . $l_time,\n          // Added TZ conversion\n          ( ! empty ( $GENERAL_USE_GMT ) && $GENERAL_USE_GMT == 'Y' ? 3 : 2 ) )\n         . '</td>\n        <td>' . ( ! $sys && ! $id ? '<a title=\"' . htmlspecialchars ( $l_ename )\n           . '\" href=\"view_entry.php?id=' . $l_eid . '\">'\n           . htmlspecialchars ( $l_ename ) . '</a></td>\n        <td>' : '' ) . display_activity_log ( $l_type, $l_text ) . '</td>\n      </tr>';\n    }\n    dbi_free_result ( $res );\n  }\n\n  return $ret . '\n    </tbody></table>';\n}\n\n/**\n * Generate Application Name\n *\n * @param bool $custom  Allow user name to be displayed\n */\nfunction generate_application_name ( $custom = true ) {\n  global $APPLICATION_NAME, $fullname;\n\n  if ( empty ( $APPLICATION_NAME ) )\n    $APPLICATION_NAME = 'Title';\n\n  return ( $custom && ! empty ( $fullname ) && $APPLICATION_NAME == 'myname'\n    ? $fullname\n    : ( $APPLICATION_NAME == 'Title' || $APPLICATION_NAME == 'myname'\n      ? ( function_exists ( 'translate' ) ? translate ( 'Title' ) : 'Title' )\n      : htmlspecialchars ( $APPLICATION_NAME ) ) );\n}\n\n/**\n * Generate HTML to add Printer Friendly Link.\n * If called without parameter, return only the href string.\n *\n * @param string $hrefin  script name\n *\n * @return string  URL to printer friendly page.\n *\n * @global array SERVER\n * @global string SCRIPT name\n * @global string (Y/N) Top menu enabled\n */\nfunction generate_printer_friendly ( $hrefin = '' ) {\n  global $_SERVER, $MENU_ENABLED, $SCRIPT, $show_printer;\n\n  // Set this to enable printer icon in top menu.\n  $href = ( empty ( $href ) ? $SCRIPT : $hrefin ) . '?'\n   . ( empty ( $_SERVER['QUERY_STRING'] ) ? '' : addslashes(htmlentities($_SERVER['QUERY_STRING'])) );\n  $href .= ( substr ( $href, -1 ) == '?' ? '' : '&' ) . 'friendly=1';\n  $show_printer = true;\n  $href = str_replace ( '&amp;', '&', $href );\n  if ( empty ( $hrefin ) ) // Menu will call this function without parameter.\n    return $href;\n\n  if ( $MENU_ENABLED == 'Y' ) // Return nothing if using menus.\n    return '';\n\n  $href = str_replace ( '&', '&amp;', $href );\n  $displayStr = translate ( 'Printer Friendly' );\n  $statusStr = translate ( 'Generate printer-friendly version' );\n\n  return <<<EOT\n    <a title=\"{$statusStr}\" class=\"printer\" href=\"{$href}\"\n      target=\"cal_printer_friendly\">[{$displayStr}]</a>\nEOT;\n}\n\n/**\n * Generate Refresh Meta Tag.\n *\n * @return  HTML for Meta Tag.\n */\nfunction generate_refresh_meta() {\n  global $AUTO_REFRESH, $AUTO_REFRESH_TIME, $REQUEST_URI;\n\n  return ( $AUTO_REFRESH == 'Y' && ! empty ( $AUTO_REFRESH_TIME ) && !\n    empty ( $REQUEST_URI )\n    ? '\n    <meta http-equiv=\"refresh\" content=\"'\n     . $AUTO_REFRESH_TIME * 60 // Convert to seconds.\n     . '; url=' . addslashes(htmlentities($REQUEST_URI)) . '\" />' : '' );\n}\n\n/**\n * Returns all the dates a specific event will fall on\n * accounting for the repeating.\n *\n * Any event with no end will be assigned one.\n *\n * @param int $date          Initial date in raw format\n * @param string $rpt_type   Repeating type as stored in the database\n * @param int $interval      Interval of repetition\n * @param array $ByMonth     Array of ByMonth values\n * @param array $ByWeekNo    Array of ByWeekNo values\n * @param array $ByYearDay   Array of ByYearDay values\n * @param array $ByMonthDay  Array of ByMonthDay values\n * @param array $ByDay       Array of ByDay values\n * @param array $BySetPos    Array of BySetPos values\n * @param int $Count         Max number of events to return\n * @param string $Until      Last day of repeat\n * @param string $Wkst       First day of week ('MO' is default)\n * @param array $ex_days     Array of exception dates for this event in YYYYMMDD format\n * @param array $inc_days    Array of inclusion dates for this event in YYYYMMDD format\n * @param int $jump          Date to short cycle loop counts to,\n *                           also makes output YYYYMMDD\n *\n * @return array  Array of dates (in UNIX time format).\n */\nfunction get_all_dates ( $date, $rpt_type, $interval = 1, $ByMonth = '',\n  $ByWeekNo = '', $ByYearDay = '', $ByMonthDay = '', $ByDay = '', $BySetPos = '',\n  $Count = 999, $Until = null, $Wkst = 'MO', $ex_days = '', $inc_days = '',\n  $jump = '' ) {\n  global $byday_names, $byday_values, $CONFLICT_REPEAT_MONTHS;\n\n  $dateYmd = date ( 'Ymd', $date );\n  $hour = date ( 'H', $date );\n  $minute = date ( 'i', $date );\n\n  if ( $Until == null && $Count == 999 ) {\n    // Check for $CONFLICT_REPEAT_MONTHS months into future for conflicts.\n    $thisyear = substr ( $dateYmd, 0, 4 );\n    $thismonth = substr ( $dateYmd, 4, 2 ) + $CONFLICT_REPEAT_MONTHS;\n    $thisday = substr ( $dateYmd, 6, 2 );\n    if ( $thismonth > 12 ) {\n      $thisyear++;\n      $thismonth -= 12;\n    }\n    $realend = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n  } else\n    $realend = ( $Count != 999\n      ? mktime ( 0, 0, 0, 1, 1, 2038 ) // Set $until to some ridiculous value.\n      : $Until );\n\n  $ret = [];\n  $date_excluded = false; //Flag to track ical results.\n  // Do iterative checking here.\n  // I floored the $realend so I check it against the floored date.\n  if ( $rpt_type && ( floor ( $date / 86400 ) * 86400 ) < $realend ) {\n    $cdate = $date;\n    $n = 0;\n    if ( ! empty ( $ByDay ) )\n      $byday = explode ( ',', $ByDay );\n\n    if ( ! empty ( $ByMonth ) )\n      $bymonth = explode ( ',', $ByMonth );\n\n    if ( ! empty ( $ByMonthDay ) )\n      $bymonthday = explode ( ',', $ByMonthDay );\n\n    if ( ! empty ( $BySetPos ) )\n      $bysetpos = explode ( ',', $BySetPos );\n\n    if ( ! empty ( $ByWeekNo ) )\n      $byweekno = explode ( ',', $ByWeekNo );\n\n    if ( ! empty ( $ByYearDay ) )\n      $byyearday = explode ( ',', $ByYearDay );\n\n    if ( $rpt_type == 'daily' ) {\n      // Skip to this year/month\n      // if called from query_events and we don't need count.\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        while ( $cdate < $jump ) {\n          $cdate = add_dstfree_time ( $cdate, 86400, $interval );\n        }\n      } while ( $cdate <= $realend && $n < $Count ) {\n        // Check RRULE items.\n        if ( ! empty ( $bymonth ) && !\n            in_array ( date ( 'n', $cdate ), $bymonth ) )\n          $date_excluded = true;\n\n        if ( ! empty ( $byweekno ) && !\n            in_array ( date ( 'W', $cdate ), $byweekno ) )\n          $date_excluded = true;\n\n        if ( ! empty ( $byyearday ) ) {\n          $doy = date ( 'z', $cdate ); //day of year\n          $diy = date ( 'L', $cdate ) + 365; //days in year\n          $diyReverse = $doy - $diy -1;\n          if ( ! in_array ( $doy, $byyearday ) && !\n              in_array ( $diyReverse, $byyearday ) )\n            $date_excluded = true;\n        }\n        if ( ! empty ( $bymonthday ) ) {\n          $dom = date ( 'j', $cdate ); //day of month\n          $dim = date ( 't', $cdate ); //days in month\n          $dimReverse = $dom - $dim -1;\n          if ( ! in_array ( $dom, $bymonthday ) && !\n              in_array ( $dimReverse, $bymonthday ) )\n            $date_excluded = true;\n        }\n        if ( ! empty ( $byday ) ) {\n          $bydayvalues = get_byday ( $byday, $cdate, 'daily', $date );\n          if ( ! in_array ( $cdate, $bydayvalues ) )\n            $date_excluded = true;\n        }\n        if ( $date_excluded == false )\n          $ret[$n++] = $cdate;\n\n        $cdate = add_dstfree_time ( $cdate, 86400, $interval );\n        $date_excluded = false;\n      }\n    } elseif ( $rpt_type == 'weekly' ) {\n      $r = 0;\n      $dow = date ( 'w', $date );\n      $cdate = $date - ( $dow * 86400 );\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        while ( ($cdate+604800) < $jump ) {\n          $cdate = add_dstfree_time ( $cdate, 604800, $interval );\n        }\n      }\n\n      while ( $cdate <= $realend && $n < $Count ) {\n        if ( ! empty ( $byday ) ) {\n          $WkstDay = $byday_values[$Wkst];\n          for ( $i=$WkstDay; $i<=( $WkstDay + 6 ); $i++ ) {\n            $td = $cdate + ( $i * 86400 );\n            $tdDay = date ( 'w', $td );\n            //echo $Count . '  ' . $n . '  ' .$WkstDay .'<br />';\n            if ( in_array( $byday_names[$tdDay], $byday ) && $td >= $date\n                && $td <= $realend && $n < $Count )\n              $ret[$n++] = $td;\n          }\n        } else {\n          $td = $cdate + ( $dow * 86400 );\n          $cdow = date ( 'w', $td );\n          if ( $cdow == $dow )\n            $ret[$n++] = $td;\n        }\n        // Skip to the next week in question.\n        $cdate = add_dstfree_time ( $cdate, 604800, $interval );\n      }\n    } elseif ( substr ( $rpt_type, 0, 7 ) == 'monthly' ) {\n      $thisyear = substr ( $dateYmd, 0, 4 );\n      $thismonth = substr ( $dateYmd, 4, 2 );\n      $thisday = substr ( $dateYmd, 6, 2 );\n      $hour = date ( 'H', $date );\n      $minute = date ( 'i', $date );\n      // Skip to this year if called from query_events and we don't need count.\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        while ( $cdate < $jump ) {\n          $thismonth += $interval;\n          $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n        }\n      }\n      $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n      $mdate = $cdate;\n      while ( $cdate <= $realend && $n < $Count ) {\n          $bydayvalues = $bymonthdayvalues = $yret = [];\n          if ( isset ( $byday ) )\n            $bydayvalues = get_byday ( $byday, $mdate, 'month', $date );\n\n          if ( isset ( $bymonthday ) )\n            $bymonthdayvalues = get_bymonthday ( $bymonthday, $mdate,\n              $date, $realend );\n\n          if ( isset ( $byday ) && isset ( $bymonthday ) ) {\n            $bydaytemp = array_intersect ( $bymonthdayvalues, $bydayvalues );\n            $yret = array_merge ( $yret, $bydaytemp );\n          } elseif ( isset ( $bymonthday ) )\n            $yret = array_merge ( $yret, $bymonthdayvalues );\n          elseif ( isset ( $byday ) )\n            $yret = array_merge ( $yret, $bydayvalues );\n          elseif ( ! isset ( $byday ) && ! isset ( $bymonthday ) )\n            $yret[] = $cdate;\n\n          // Must wait till all other BYxx are processed.\n          if ( isset ( $bysetpos ) ) {\n            $mth = date ( 'm', $cdate );\n            sort ( $yret );\n            sort ( $bysetpos );\n            $setposdate = mktime ( $hour, $minute, 0, $mth, 1, $thisyear );\n            $dim = date ( 't', $setposdate ); //Days in month.\n            $yretcnt = count ( $yret );\n            $bysetposcnt = count ( $bysetpos );\n            for ( $i = 0; $i < $bysetposcnt; $i++ ) {\n              if ( $bysetpos[$i] > 0 && $bysetpos[$i] <= $yretcnt )\n                $ret[] = $yret[$bysetpos[$i] -1];\n              else\n              if ( abs ( $bysetpos[$i] ) <= $yretcnt )\n                $ret[] = $yret[$yretcnt + $bysetpos[$i] ];\n            }\n          } else\n          if ( ! empty ( $yret ) ) { // Add all BYxx additional dates.\n            $yret = array_unique ( $yret );\n            $ret = array_merge ( $ret, $yret );\n          }\n          sort ( $ret );\n        $thismonth += $interval;\n        $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n        $mdate = mktime ( $hour, $minute, 0, $thismonth, 1, $thisyear );\n        $n = count ( $ret );\n      } //end while\n    } elseif ( $rpt_type == 'yearly' ) {\n      // This RRULE is VERY difficult to parse because RFC2445 doesn't\n      // give any guidance on which BYxxx are mutually exclusive.\n      // We will assume that:\n      // BYMONTH, BYMONTHDAY, BYDAY go together.\n      // BYDAY will be parsed relative to BYMONTH\n      // if BYDAY is used without BYMONTH,\n      // then it is relative to the current year (i.e 20MO).\n      $thisyear = substr ( $dateYmd, 0, 4 );\n      $thismonth = substr ( $dateYmd, 4, 2 );\n      $thisday = substr ( $dateYmd, 6, 2 );\n      // Skip to this year if called from query_events and we don't need count.\n      if ( ! empty ( $jump ) && $Count == 999 ) {\n        $jumpY = date ( 'Y', $jump );\n        while ( date ( 'Y', $cdate ) < $jumpY ) {\n          $thisyear += $interval;\n          $cdate = mktime ( $hour, $minute, 0, 1, 1, $thisyear );\n        }\n      }\n      $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n      while ( $cdate <= $realend && $n < $Count ) {\n        $yret = [];\n        $ycd = date ( 'Y', $cdate );\n        $fdoy = mktime ( 0, 0, 0, 1, 1, $ycd ); //first day of year\n        $fdow = date ( 'w', $fdoy ); //day of week first day of year\n        $ldoy = mktime ( 0, 0, 0, 12, 31, $ycd ); //last day of year\n        $ldow = date ( 'w', $ldoy ); //day of week last day  of year\n        $dow = date ( 'w', $cdate ); //day of week\n        $week = date ( 'W', $cdate ); //ISO 8601 number of week\n        if ( isset ( $bymonth ) ) {\n          foreach ( $bymonth as $month ) {\n            $mdate = mktime ( $hour, $minute, 0, $month, 1, $ycd );\n            $bydayvalues = $bymonthdayvalues = [];\n            if ( isset ( $byday ) )\n              $bydayvalues = get_byday ( $byday, $mdate, 'month', $date );\n\n            if ( isset ( $bymonthday ) )\n              $bymonthdayvalues = get_bymonthday ( $bymonthday, $mdate,\n                $date, $realend );\n\n            if ( isset ( $byday ) && isset ( $bymonthday ) ) {\n              $bydaytemp = array_intersect ( $bymonthdayvalues, $bydayvalues );\n              $yret = array_merge ( $yret, $bydaytemp );\n            } else\n              $yret = ( isset ( $bymonthday )\n                ? array_merge ( $yret, $bymonthdayvalues )\n                : ( isset ( $byday )\n                  ? array_merge ( $yret, $bydayvalues )\n                  : [mktime ( $hour, $minute, 0, $month, $thisday, $ycd )] ) );\n          } //end foreach bymonth\n        } elseif ( isset ( $byyearday ) ) { // end if isset bymonth\n          foreach ( $byyearday as $yearday ) {\n            preg_match( '/([-+]?)(\\d{1,3})/', $yearday, $match );\n            if ( $match[1] == '-' && ( $cdate >= $date ) )\n              $yret[] =\n              mktime ( $hour, $minute, 0, 12, 31 - $match[2] - 1, $thisyear );\n            else\n            if ( ( $n < $Count ) && ( $cdate >= $date ) )\n              $yret[] = mktime ( $hour, $minute, 0, 1, $match[2], $thisyear );\n          }\n        } elseif ( isset ( $byweekno ) ) {\n          $wkst_date = ( $Wkst == 'SU' ? $cdate + 86400 : $cdate );\n          if ( isset ( $byday ) )\n            $bydayvalues = get_byday ( $byday, $cdate, 'year', $date );\n\n          if ( in_array ( $week, $byweekno ) ) {\n            if ( isset ( $bydayvalues ) ) {\n              foreach ( $bydayvalues as $bydayvalue ) {\n                if ( $week == date ( 'W', $bydayvalue ) )\n                  $yret[] = $bydayvalue;\n              }\n            } else\n              $yret[] = $cdate;\n          }\n        } elseif ( isset ( $byday ) ) {\n          $bydayvalues = get_byday ( $byday, $cdate, 'year', $date );\n          if ( ! empty ( $bydayvalues ) )\n            $yret = array_merge ( $yret, $bydayvalues );\n        } else // No Byxx rules apply.\n          $ret[] = $cdate;\n\n        // Must wait till all other BYxx are processed.\n        if ( isset ( $bysetpos ) ) {\n          sort ( $yret );\n          for ( $i = 0, $bysetposcnt = count ( $bysetpos ); $i < $bysetposcnt;\n            $i++ ) {\n            $ret[] = ( $bysetpos[$i] > 0\n              ? $yret[$bysetpos[$i] -1]\n              : $yret[count ( $yret ) + $bysetpos[$i] ] );\n          }\n        } else\n        if ( ! empty ( $yret ) ) { // Add all BYxx additional dates.\n          $yret = array_unique ( $yret );\n          $ret = array_merge ( $ret, $yret );\n        }\n        sort ( $ret );\n        $n = count ( $ret );\n        $thisyear += $interval;\n        $cdate = mktime ( $hour, $minute, 0, $thismonth, $thisday, $thisyear );\n      }\n    } //end if rpt_type\n  }\n  if ( ! empty ( $ex_days ) ) {\n    foreach ( $ex_days as $ex_day ) {\n      for ( $i = 0, $cnt = count ( $ret ); $i < $cnt;$i++ ) {\n        if ( isset ( $ret[$i] ) &&\n            date ( 'Ymd', $ret[$i] ) == substr ( $ex_day, 0, 8 ) )\n          unset ( $ret[$i] );\n      }\n      // Remove any unset elements.\n      sort ( $ret );\n    }\n  }\n  if ( ! empty ( $inc_days ) ) {\n    foreach ( $inc_days as $inc_day ) {\n      $ret[] = strtotime ( $inc_day );\n    }\n  }\n  // Remove any unset elements.\n  sort ( $ret );\n  // We want results in YYYYMMDD format.\n  if ( ! empty ( $jump ) ) {\n    for ( $i = 0, $retcnt = count ( $ret ); $i < $retcnt;$i++ ) {\n      if ( isset ( $ret[$i] ) )\n        $ret[$i] = date ( 'Ymd', $ret[$i] );\n    }\n  }\n  return $ret;\n}\n\n/**\n * Get the dates the correspond to the byday values.\n *\n * @param array $byday   ByDay values to process (MO,TU,-1MO,20MO...)\n * @param string $cdate  First day of target search (Unix timestamp)\n * @param string $type   Month, Year, Week (default = month)\n * @param string $date   First day of event (Unix timestamp)\n *\n * @return array  Dates that match ByDay (YYYYMMDD format).\n */\nfunction get_byday ( $byday, $cdate, $type, $date ) {\n  global $byday_values;\n\n  if ( empty ( $byday ) )\n    return;\n\n  $ret = [];\n  $hour = date ( 'H', $cdate );\n  $minute = date ( 'i', $cdate );\n  $mth = date ( 'm', $cdate );\n  $yr = date ( 'Y', $cdate );\n  if ( $type == 'month' ) {\n    $ditype = date ( 't', $cdate ); //Days in month.\n    $fday = mktime ( 0, 0, 0, $mth, 1, $yr ); //First day of month.\n    $lday = mktime ( 0, 0, 0, $mth + 1, 0, $yr ); //Last day of month.\n    $month = $mth;\n  } elseif ( $type == 'year' ) {\n    $ditype = date ( 'L', $cdate ) + 365; //Days in year.\n    $fday = mktime ( 0, 0, 0, 1, 1, $yr ); //First day of year.\n    $lday = mktime ( 0, 0, 0, 12, 31, $yr ); //Last day of year.\n    $month = 1;\n  } elseif ( $type == 'daily' ) {\n    $fday = $lday = $cdate;\n    $month = $mth;\n  } else {\n    die_miserable_death('Invalid type \"' . $type . '\" in get_by_day');\n  }\n\n  $fdow = date ( 'w', $fday ); //Day of week first day of $type.\n  $ldow = date ( 'w', $lday ); //Day of week last day of $type\n  foreach ( $byday as $day ) {\n    $byxxxDay = '';\n    $dayTxt = substr ( $day, -2, 2 );\n    $dayOffset = substr_replace ( $day, '', -2, 2 );\n\n    // It is possible to have spurious offset days within a 'daily' repetition,\n    //   by setting them while in month/year repetition type, then changing\n    //   type to 'daily'.\n    // These situations will lead in a crash without the following test.\n    if (is_numeric($dayOffset) && !isset($ditype))\n      continue;\n\n    $dowOffset = ( ( -1 * $byday_values[$dayTxt] ) + 7 ) % 7; //SU=0, MO=6, TU=5...\n    if ( is_numeric ( $dayOffset ) && $dayOffset > 0 ) {\n      // Offset from beginning of $type.\n      $dayOffsetDays = ( ( $dayOffset - 1 ) * 7 ); //1 = 0, 2 = 7, 3 = 14...\n      $forwardOffset = $byday_values[$dayTxt] - $fdow;\n      if ( $forwardOffset < 0 )\n        $forwardOffset += 7;\n\n      $domOffset = ( 1 + $forwardOffset + $dayOffsetDays );\n      if ( $domOffset <= $ditype ) {\n        $byxxxDay = mktime ( $hour, $minute, 0, $month, $domOffset, $yr );\n        if ( $mth == date ( 'm', $byxxxDay ) && $byxxxDay > $date )\n          $ret[] = $byxxxDay;\n      }\n    } else\n    if ( is_numeric ( $dayOffset ) ) { // Offset from end of $type.\n      $dayOffsetDays = ( ( $dayOffset + 1 ) * 7 ); //-1 = 0, -2 = 7, -3 = 14...\n      $byxxxDay = mktime ( $hour, $minute, 0, $month + 1,\n        ( 0 - ( ( $ldow + $dowOffset ) % 7 ) + $dayOffsetDays ), $yr );\n      if ( $mth == date ( 'm', $byxxxDay ) && $byxxxDay > $date )\n        $ret[] = $byxxxDay;\n    } else {\n      if ( $type == 'daily' ) {\n        if ( ( date ( 'w', $cdate ) == $byday_values[$dayTxt] ) && $cdate > $date )\n          $ret[] = $cdate;\n      } else {\n        for ( $i = 1; $i <= $ditype; $i++ ) {\n          $loopdate = mktime ( $hour, $minute, 0, $month, $i, $yr );\n          if ( ( date ( 'w', $loopdate ) == $byday_values[$dayTxt] ) &&\n            $loopdate > $date ) {\n            $ret[] = $loopdate;\n            $i += 6; //Skip to next week.\n          }\n        }\n      }\n    }\n  }\n  return $ret;\n}\n\n/**\n * Get the dates the correspond to the bymonthday values.\n *\n * @param array $bymonthday  ByMonthDay values to process (1,2,-1,-2...)\n * @param string $cdate      First day of target search (Unix timestamp)\n * @param string $date       First day of event (Unix timestamp)\n * @param string $realend    Last day of event (Unix timestamp)\n *\n * @return array  Dates that match ByMonthDay (YYYYMMDD format).\n */\nfunction get_bymonthday ( $bymonthday, $cdate, $date, $realend ) {\n  if ( empty ( $bymonthday ) )\n    return;\n\n  $ret = [];\n  $dateYmHi = date ( 'YmHi', $cdate );\n  $dim = date ( 't', $cdate ); //Days in month.\n  $yr = substr ( $dateYmHi, 0, 4 );\n  $mth = substr ( $dateYmHi, 4, 2 );\n  $hour = substr ( $dateYmHi, 6, 2 );\n  $minute = substr ( $dateYmHi, 8, 2 );\n  foreach ( $bymonthday as $monthday ) {\n    $byxxxDay = mktime ( $hour, $minute, 0, $mth,\n      ( $monthday > 0 ? $monthday : $dim + $monthday + 1 ), $yr );\n    if ( $byxxxDay > $date )\n      $ret[] = $byxxxDay;\n  }\n  return $ret;\n}\n\n/**\n * Get categories for a given event id\n * Global categories are changed to negative numbers\n *\n * @param int      $id  Id of event\n * @param string   $user normally this is $login\n * @param bool     $asterisk Include '*' if Global\n *\n * @return array   Array containing category names.\n */\nfunction get_categories_by_id ( $id, $user, $asterisk = false ) {\n  global $login;\n\n  if ( empty ( $id ) )\n    return false;\n\n  $categories = [];\n\n  $res = dbi_execute ( 'SELECT wc.cat_name, wc.cat_id, wec.cat_owner\n    FROM webcal_categories wc, webcal_entry_categories wec WHERE wec.cal_id = ?\n    AND wec.cat_id = wc.cat_id AND ( wc.cat_owner = ? OR wc.cat_owner IS NULL )\n  ORDER BY wec.cat_order', [$id, ( empty ( $user ) ? $login : $user )] );\n  while ( $row = dbi_fetch_row ( $res ) ) {\n    $categories[ ( empty ( $row[2] ) ? - $row[1] : $row[1] ) ] = $row[0]\n     . ( $asterisk && empty ( $row[2] ) ? '*' : '' );\n  }\n  dbi_free_result ( $res );\n\n  return $categories;\n}\n\n/**\n * Gets all the events for a specific date.\n *\n * Events are retreived from the array of pre-loaded events\n * (which was loaded all at once to improve performance).\n *\n * The returned events will be sorted by time of day.\n *\n * @param string $date            Date to get events for in YYYYMMDD format\n *                                in user's timezone\n * @param bool   $get_unapproved  Load unapproved events?\n *\n * @return array  Array of Events.\n */\nfunction get_entries ( $date, $get_unapproved = true ) {\n  global $events;\n  $ret = [];\n  for ( $i = 0, $cnt = count ( $events ); $i < $cnt; $i++ ) {\n    $event_date = $events[$i]->getDateTimeAdjusted();\n    if( ! $get_unapproved && $events[$i]->getStatus() == 'W' )\n      continue;\n\n    if( $events[$i]->isAllDay() || $events[$i]->isUntimed() ) {\n      if( $events[$i]->getDate() == $date )\n        $ret[] = $events[$i];\n    } else {\n      if ( $event_date == $date )\n        $ret[] = $events[$i];\n    }\n  }\n  return $ret;\n}\n\n/**\n * Gets all the groups a user is authorized to see\n *\n * @param string $user        Subject User\n *\n * @return array  Array of Groups.\n */\nfunction get_groups($user, $includeUserlist=false)\n{\n  global $GROUPS_ENABLED, $USER_SEES_ONLY_HIS_GROUPS, $PUBLIC_ACCESS_FULLNAME, $NONUSER_PREFIX,\n    $is_nonuser_admin, $is_assistant, $login, $is_admin;\n\n  if (empty($GROUPS_ENABLED) || $GROUPS_ENABLED != 'Y')\n    return false;\n\n  $owner = ($is_nonuser_admin || $is_assistant ? $user : $login);\n\n  // Load list of groups.\n  $sql = 'SELECT wg.cal_group_id, wg.cal_name, wg.cal_owner, ' .\n    'wg.cal_last_update FROM webcal_group wg';\n  $sql_params = [];\n  if ($USER_SEES_ONLY_HIS_GROUPS == 'Y' && !$is_admin) {\n    $sql .= ', webcal_group_user wgu WHERE wg.cal_group_id = wgu.cal_group_id\n      AND wgu.cal_login = ?';\n    $sql_params[] = $owner;\n  }\n\n  $res = dbi_execute($sql . ' ORDER BY wg.cal_name', $sql_params);\n\n  $groups = [];\n  if ($res) {\n    while ($row = dbi_fetch_row($res)) {\n      $groups[] = [\n        'cal_group_id' => $row[0],\n        'cal_name' => $row[1],\n        'cal_owner' => $row[2],\n        'cal_last_update' => $row[3]\n      ];\n    }\n    dbi_free_result($res);\n  }\n\n  if ($includeUserlist) {\n    $users = user_get_users();\n    $users_by_name = [];\n    foreach ($users as $user) {\n      $users_by_name[$user['cal_login']] = $user;\n    }\n    $user_by_name['__public__'] = [\n      'cal_login' => '__public__',\n      'cal_fullname' => $PUBLIC_ACCESS_FULLNAME\n    ];\n    // Also include Remote and Resource calendars in case the group contains one\n    $resourceCals = get_nonuser_cals($login, false);\n    $remoteCals = get_nonuser_cals($login, true);\n    $others = array_merge($resourceCals, $remoteCals);\n    foreach ($others as $other) {\n      $users_by_name[$other['cal_login']] = $other;\n    }\n\n    for ($i = 0; $i < count($groups); $i++) {\n      $users = [];\n      $sql = 'SELECT cal_login FROM webcal_group_user WHERE cal_group_id = ? ORDER BY cal_login';\n      $res = dbi_execute($sql, [$groups[$i]['cal_group_id']]);\n      while ($row = dbi_fetch_row($res)) {\n        $users[] = $users_by_name[$row[0]];\n      }\n      $groups[$i]['cal_users'] = $users;\n    }\n  }\n  return $groups;\n}\n\n/**\n * Gets the last page stored using {@link remember_this_view()}.\n *\n * @return string The URL of the last view or an empty string if it cannot be\n *                determined.\n *\n * @global array  Cookies\n */\nfunction get_last_view ( $clear=true ) {\n  $val = ( isset ( $_COOKIE['webcalendar_last_view'] )\n    ? str_replace ( '&', '&amp;', $_COOKIE['webcalendar_last_view'] ) : '' );\n\n  if ( $clear )\n    sendCookie ( 'webcalendar_last_view', '', 0 );\n\n  return $val;\n}\n\n/**\n * Gets a list of nonusers.\n *\n * If groups are enabled, this will restrict the list of nonusers to only those\n * that are in the same group(s) as the user (unless the user is an admin) or\n * the nonuser is a public calendar. We allow admin users to see all users\n * because they can also edit someone else's events (so they may need access to\n * users who are not in the same groups).\n *\n * If user access control is enabled, then we also check to see if this\n * user is allowed to view each nonuser's calendar. If not, then that nonuser\n * is not included in the list.\n *\n * @return array  Array of nonusers, where each element in the array is an array\n *                with the following keys:\n *    - cal_login\n *    - cal_lastname\n *    - cal_firstname\n *    - cal_is_public\n */\nfunction get_my_nonusers ( $user = '', $add_public = false, $reason = 'invite' ) {\n  global $GROUPS_ENABLED, $is_admin, $is_nonuser, $is_nonuser_admin, $login,\n  $my_nonuser_array, $my_user_array, $PUBLIC_ACCESS, $PUBLIC_ACCESS_FULLNAME,\n  $USER_SEES_ONLY_HIS_GROUPS, $USER_SORT_ORDER;\n\n  $this_user = ( empty ( $user ) ? $login : $user );\n  // Return the global variable (cached).\n  if ( ! empty ( $my_nonuser_array[$this_user . $add_public] ) &&\n      is_array ( $my_nonuser_array ) )\n    return $my_nonuser_array[$this_user . $add_public];\n\n  $u = get_nonuser_cals();\n  if ( $GROUPS_ENABLED == 'Y' && $USER_SEES_ONLY_HIS_GROUPS == 'Y' && ! $is_admin ) {\n    // Get current user's groups.\n    $rows = dbi_get_cached_rows ( 'SELECT cal_group_id FROM webcal_group_user\n  WHERE cal_login = ?', [$this_user] );\n    $groups = $ret = $u_byname = [];\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $groups[] = $row[0];\n      }\n    }\n    $groupcnt = count ( $groups );\n    // Nonuser (public) can only see themself (unless access control is on).\n    if( $is_nonuser && ! access_is_enabled() )\n      return [$this_user];\n\n    for ( $i = 0, $cnt = count ( $u ); $i < $cnt; $i++ ) {\n      $u_byname[$u[$i]['cal_login']] = $u[$i];\n    }\n\n    if ( $groupcnt == 0 ) {\n      // Eek. User is in no groups... Return only themselves.\n      if ( isset ( $u_byname[$this_user] ) )\n        $ret[] = $u_byname[$this_user];\n\n      $my_nonuser_array[$this_user . $add_public] = $ret;\n      return $ret;\n    }\n    // Get other members of current users' groups.\n    $sql = 'SELECT DISTINCT( wnc.cal_login ), cal_lastname, cal_firstname,\n      cal_is_public FROM webcal_group_user wgu, webcal_nonuser_cals wnc WHERE '\n     . ( $add_public ? 'wnc.cal_is_public = \\'Y\\'  OR ' : '' )\n     . ' cal_admin = ?\n    OR ( wgu.cal_login = wnc.cal_login\n      AND cal_group_id ' .\n      ( $groupcnt == 1 ? '= ?' : 'IN ( ?' . str_repeat ( ',?', $groupcnt - 1 ) . ' )' );\n\n    // Add $this_user to beginning of query params.\n    array_unshift ( $groups, $this_user );\n    $rows = dbi_get_cached_rows ( $sql . ' )\n  ORDER BY '\n       . ( empty ( $USER_SORT_ORDER ) ? '' : \"$USER_SORT_ORDER\" ), $groups );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        if ( isset ( $u_byname[$row[0]] ) )\n          $ret[] = $u_byname[$row[0]];\n      }\n    }\n  } else\n    // Groups not enabled... return all nonusers.\n    $ret = $u;\n\n  // We add Public Access if $add_public= true.\n  // Admin already sees all users.\n  if ( ! $is_admin && $add_public && $PUBLIC_ACCESS == 'Y' ) {\n    $pa = user_get_users ( true );\n    array_unshift ( $ret, $pa[0] );\n  }\n  // If user access control enabled,\n  // remove any nonusers that this user does not have required access.\n  if( access_is_enabled() ) {\n    $newlist = [];\n    for ( $i = 0, $cnt = count ( $ret ); $i < $cnt; $i++ ) {\n      $can_list = access_user_calendar ( $reason, $ret[$i]['cal_login'], $this_user );\n      if ( $can_list == 'Y' || $can_list > 0 )\n        $newlist[] = $ret[$i];\n    }\n    $ret = $newlist;\n  }\n  $my_nonuser_array[$this_user . $add_public] = $ret;\n  return $ret;\n}\n\n/**\n * Gets a list of users.\n *\n * If groups are enabled, this will restrict the list to only those users who\n * are in the same group(s) as this user (unless the user is an admin). We allow\n * admin users to see all users because they can also edit someone else's events\n * (so they may need access to users who are not in the same groups).\n *\n * If user access control is enabled, then we also check to see if this\n * user is allowed to view each user's calendar. If not, then that user\n * is not included in the list.\n *\n * @return array  Array of users, where each element in the array is an array\n *                with the following keys:\n *    - cal_login\n *    - cal_lastname\n *    - cal_firstname\n *    - cal_is_admin\n *    - cal_email\n *    - cal_password\n *    - cal_fullname\n */\nfunction get_my_users ( $user = '', $reason = 'invite' ) {\n  global $GROUPS_ENABLED, $is_admin, $is_nonuser, $is_nonuser_admin, $login,\n  $my_user_array, $USER_SEES_ONLY_HIS_GROUPS, $USER_SORT_ORDER;\n\n  $this_user = ( empty ( $user ) ? $login : $user );\n  // Return the global variable (cached).\n  if ( ! empty ( $my_user_array[$this_user][$reason] ) &&\n      is_array ( $my_user_array ) )\n    return $my_user_array[$this_user][$reason];\n\n  if ( $GROUPS_ENABLED == 'Y' && $USER_SEES_ONLY_HIS_GROUPS == 'Y' && ! $is_admin ) {\n    // Get groups with current user as member.\n    $rows = dbi_get_cached_rows ( 'SELECT cal_group_id FROM webcal_group_user\n  WHERE cal_login = ?', [$this_user] );\n    $groups = $ret = $u_byname = [];\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $groups[] = $row[0];\n      }\n    }\n    $groupcnt = count ( $groups );\n    // Nonuser (public) can only see themself (unless access control is on).\n    if( $is_nonuser && ! access_is_enabled() )\n      return [$this_user];\n\n    $u = user_get_users();\n    if ( $is_nonuser_admin )\n      $u = array_merge( get_my_nonusers(), $u );\n\n    for ( $i = 0, $cnt = count ( $u ); $i < $cnt; $i++ ) {\n      $u_byname[$u[$i]['cal_login']] = $u[$i];\n    }\n\n    if ( $groupcnt == 0 ) {\n      // Eek. User is in no groups... Return only themselves.\n      if ( isset ( $u_byname[$this_user] ) )\n        $ret[] = $u_byname[$this_user];\n\n      $my_user_array[$this_user][$reason] = $ret;\n      return $ret;\n    }\n    // Get other members of users' groups.\n    $sql = 'SELECT DISTINCT(webcal_group_user.cal_login), cal_lastname,\n      cal_firstname FROM webcal_group_user LEFT JOIN webcal_user\n    ON webcal_group_user.cal_login = webcal_user.cal_login\n  WHERE cal_group_id ' .\n      ( $groupcnt == 1 ? '= ?' : 'IN ( ?' . str_repeat ( ',?', $groupcnt - 1 ) . ' )' );\n\n    $rows = dbi_get_cached_rows ( $sql . ' ORDER BY '\n       . ( empty ( $USER_SORT_ORDER ) ? '' : \"$USER_SORT_ORDER, \" )\n       . 'webcal_group_user.cal_login', $groups );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        if ( isset ( $u_byname[$row[0]] ) )\n          $ret[] = $u_byname[$row[0]];\n      }\n    }\n  } else\n    // Groups not enabled... return all users.\n    $ret = user_get_users();\n\n  // If user access control enabled,\n  // remove any users that this user does not have required access.\n  if( access_is_enabled() ) {\n    $newlist = [];\n    for ( $i = 0, $cnt = count ( $ret ); $i < $cnt; $i++ ) {\n      $can_list = access_user_calendar ( $reason, $ret[$i]['cal_login'], $this_user );\n      if ( $can_list == 'Y' || $can_list > 0 )\n        $newlist[] = $ret[$i];\n    }\n    $ret = $newlist;\n  }\n  $my_user_array[$this_user][$reason] = $ret;\n  return $ret;\n}\n\n/**\n * Gets a list of nonuser calendars and return info in an array.\n *\n * @param string $user    Login of admin of the nonuser calendars\n * @param bool   $remote  Return only remote calendar  records\n *\n * @return array  Array of nonuser cals, where each is an array with the\n *                following fields:\n * - <var>cal_login</var>\n * - <var>cal_lastname</var>\n * - <var>cal_firstname</var>\n * - <var>cal_admin</var>\n * - <var>cal_fullname</var>\n * - <var>cal_is_public</var>\n */\nfunction get_nonuser_cals ( $user = '', $remote = false ) {\n  global $is_admin, $USER_SORT_ORDER;\n  $count = 0;\n  $query_params = $ret = [];\n  $sql = 'SELECT cal_login, cal_lastname, cal_firstname, cal_admin,\n    cal_is_public, cal_url FROM webcal_nonuser_cals WHERE cal_url IS '\n   . ( $remote == false ? '' : 'NOT ' ) . 'NULL ';\n\n  if ( $user != '' ) {\n    $sql .= 'AND  cal_admin = ? ';\n    $query_params[] = $user;\n  }\n\n  $rows = dbi_get_cached_rows ( $sql . 'ORDER BY '\n     . ( empty ( $USER_SORT_ORDER ) ? '' : \"$USER_SORT_ORDER, \" ) . 'cal_login',\n    $query_params );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $fullname = '';\n      if (!empty($row[1]))\n        $fullname = $row[1];\n      if (!empty($row[2])) {\n        if(!empty($fullname))\n          $fullname .= ' ';\n        $fullname .= $row[2];\n      }\n      $ret[$count++] = [\n        'cal_login' => $row[0],\n        'cal_lastname' => $row[1],\n        'cal_firstname' => $row[2],\n        'cal_admin' => $row[3],\n        'cal_is_public' => $row[4],\n        'cal_url' => $row[5],\n        'cal_fullname' => $fullname ];\n    }\n  }\n  // If user access control enabled,\n  // remove any users that this user does not have 'view' access to.\n  if( access_is_enabled() && ! $is_admin ) {\n    $newlist = [];\n    for ( $i = 0, $cnt = count ( $ret ); $i < $cnt; $i++ ) {\n      if ( access_user_calendar ( 'view', $ret[$i]['cal_login'] ) )\n        $newlist[] = $ret[$i];\n    }\n    $ret = $newlist;\n  }\n  return $ret;\n}\n\n// Get the number of events the specified username is a participant to.\nfunction get_event_count_for_user($username)\n{\n  $sql = 'SELECT COUNT(weu.cal_id) FROM webcal_entry_user weu, webcal_entry we ' .\n    'WHERE weu.cal_id = we.cal_id ' .\n    'AND weu.cal_login = ?';\n  //echo \"SQL: $sql \\nUser: $username\\n\";\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  //echo \"COUNT: \"; print_r($rows);\n  if ($rows) {\n    return $rows[0][0];\n  }\n  return 0;\n}\n\n// Get the last import date for a remote calendar in YYYYMMDD format or '' for none.\nfunction get_remote_calendar_last_update($username)\n{\n  $sql = 'SELECT MAX(cal_date) FROM webcal_import WHERE cal_login = ?';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n  }\n  return $ret;\n}\n\n// Get the last date we attempted an import (but may have skipped it because it was\n// identical to a previous import) for a remote calendar in YYYYMMDD format or '' for none.\nfunction get_remote_calendar_last_checked($username)\n{\n  $sql = 'SELECT MAX(cal_check_date) FROM webcal_import WHERE cal_login = ?';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n  }\n  return $ret;\n}\n\n// Get the md5 hash of the last successful import.  It the new md5 hash is\n// identical, we can skip the new import.\nfunction get_remote_calendar_last_md5($username)\n{\n  $sql = 'SELECT cal_md5 FROM webcal_import WHERE cal_login = ? ORDER BY cal_import_id DESC LIMIT 1';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n  }\n  return $ret;\n}\n\nfunction update_import_check_date($username)\n{\n  $sql = 'SELECT MAX(cal_import_id) FROM webcal_import WHERE cal_login = ?';\n  $rows = dbi_get_cached_rows($sql, [$username]);\n  if ($rows && is_array($rows)) {\n    $ret = $rows[0][0];\n    if (!empty($ret)) {\n      $sql = 'UPDATE webcal_import SET cal_check_date = ? WHERE cal_import_id = ?';\n      dbi_execute($sql, [date('Ymd'), $ret]);\n    }\n  }\n  return $ret;\n}\n\n/**\n * Load or reload a remote calendar if and only if it has been modified since the last time it was imported.\n */\nfunction load_remote_calendar($username, $url)\n{\n  global $login, $errormsg, $error_num, $count_suc, $numDeleted, $calUser, $importMd5;\n\n  // Set global vars used in xcal.php (blech)\n  $data = [];\n  $calUser = $username;\n  $overwrite = true;\n  $type = 'remoteics';\n  $numDeleted = 0;\n  $count_suc = 0;\n  $data = parse_ical($url, $type);\n  // Get prior md5 has to see if there has been an update.\n  // New md5 is in global var $importMd5\n  $count = get_event_count_for_user($username);\n  $priorMd5 = get_remote_calendar_last_md5($username);\n  if ($priorMd5 == $importMd5 && $count > 0) {\n    // No changes in remote calendar since we last imported it.  Just skip it.\n    update_import_check_date($username);\n    activity_log(0, $login, $username, LOG_UPDATE, \"Remote calendar checked but was identical to previous import\");\n    return [0, 0, 0, \"Remote calendar not updated since last import.\"];\n  }\n  if (!empty($data) && count($data) > 0 && empty($errormsg)) {\n    // Delete existing events.\n    $numDeleted = user_delete_events ($username);\n    // Import new events\n    import_data($data, $overwrite, $type, true);\n    activity_log(0, $login, $username, LOG_UPDATE, \"Remote calendar reloaded with $count_suc events added, $numDeleted deleted\");\n    return [0, $count_suc, $numDeleted, ''];\n  } else  if (empty($errormsg)) {\n    return [1, 0, 0, \"No data imported.\"];\n  }\n  return [empty($errormsg) ? 0 : 1, $count_suc, $numDeleted, $errormsg];\n}\n\n/**\n * Gets the list of active plugins.\n *\n * Should be called after\n * {@link load_global_settings()} and {@link load_user_preferences()}.\n *\n * @internal cek: Ignored since I am not sure this will ever be used...\n *\n * @return array Active plugins\n *\n * @ignore\n */\nfunction get_plugin_list ( $include_disabled = false ) {\n  global $error;\n  // First get list of available plugins.\n  $res = dbi_execute ( 'SELECT cal_setting FROM webcal_config\n    WHERE cal_setting LIKE \\'%.plugin_status\\' '\n     . ( ! $include_disabled ? 'AND cal_value = \\'Y\\' ' : '' )\n     . 'ORDER BY cal_setting' );\n  $plugins = [];\n  if ( $res ) {\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      $e = explode ( '.', $row[0] );\n      if ( $e[0] != '' )\n        $plugins[] = $e[0];\n    }\n    dbi_free_result ( $res );\n  } else\n    $error = db_error ( true );\n\n  if ( count ( $plugins ) == 0 )\n    $plugins[] = 'webcalendar';\n\n  return $plugins;\n}\n\n/**\n * Gets a preference setting for the specified user.\n *\n * If no value is found in the database,\n * then the system default setting will be returned.\n *\n * @param string $user     User login we are getting preference for\n * @param string $setting  Name of the setting\n * @param stirng $defaultSetting    Value to return if no value foun\n *            in the database\n *\n * @return string  The value found in the webcal_user_pref table for the\n *                 specified setting or the sytem default if no user settings\n *                 was found.\n */\nfunction get_pref_setting ( $user, $setting, $defaultValue='' ) {\n  $ret = $defaultValue;\n  // Set default.\n  if ( ! isset ( $GLOBALS['sys_' . $setting] ) ) {\n    // This could happen if the current user has not saved any prefs yet.\n    if ( ! empty ( $GLOBALS[$setting] ) ) {\n      $ret = $GLOBALS[$setting];\n    }\n  } else {\n    if ( isset ( $GLOBALS['sys_' . $setting] ) )\n      $ret = $GLOBALS['sys_' . $setting];\n  }\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_value FROM webcal_user_pref\n  WHERE cal_login = ?\n    AND cal_setting = ?', [$user, $setting] );\n  if ( $rows ) {\n    $row = $rows[0];\n    if ( $row && ! empty ( $row[0] ) )\n      $ret = $row[0];\n  }\n  return $ret;\n}\n\n/**\n * Gets user's preferred view.\n *\n * The user's preferred view is stored in the $STARTVIEW global variable.\n * This is loaded from the user preferences (or system settings\n * if there are no user prefererences.)\n *\n * @param string $indate  Date to pass to preferred view in YYYYMMDD format\n * @param string $args    Arguments to include in the URL (such as \"user=joe\")\n *\n * @return string  URL of the user's preferred view.\n */\nfunction get_preferred_view ( $indate = '', $args = '' ) {\n  global $ALLOW_VIEW_OTHER, $is_admin, $STARTVIEW, $thisdate, $views;\n\n  // We want user's to set  their pref on first login.\n  if ( empty ( $STARTVIEW ) )\n    return false;\n\n  $url = $STARTVIEW;\n  // We used to just store \"month\" in $STARTVIEW without the \".php\".\n  // This is just to prevent users from getting a \"404 not found\"\n  // if they have not updated their preferences.\n  $url .= ( ! strpos ( $STARTVIEW, '.php' ) ? '.php' : '' );\n\n  // Prevent endless looping\n  // if preferred view is custom and viewing others is not allowed.\n  if ( substr ( $url, 0, 5 ) == 'view_' && $ALLOW_VIEW_OTHER == 'N' && !\n      $is_admin )\n    $url = 'month.php';\n\n  if ( ! access_can_view_page ( $url ) ) {\n    if ( access_can_access_function ( ACCESS_DAY ) )\n      $url = 'day.php';\n    else\n    if ( access_can_access_function ( ACCESS_MONTH ) )\n      $url = 'month.php';\n    else\n    if ( access_can_access_function ( ACCESS_WEEK ) )\n      $url = 'week.php';\n    // At this point, this user cannot access the view set in their preferences\n    // (and they cannot update their preferences), and they cannot view any of\n    // the standard day/month/week/year pages. All that's left is either\n    // a custom view that was created by them, or a global view.\n    if ( count ( $views ) > 0 )\n      $url = $views[0]['url'];\n  }\n\n  $url = str_replace ( '&amp;', '&', $url );\n  $url = str_replace ( '&', '&amp;', $url );\n\n  $xdate = ( empty ( $indate ) ? $thisdate : $indate );\n\n  $url .= ( empty ( $xdate ) ? '' : ( strstr ( $url, '?' ) ? '&amp;' : '?' )\n     . 'date=' . $xdate );\n  $url .= ( empty ( $args ) ? '' : ( strstr ( $url, '?' ) ? '&amp;' : '?' )\n     . $args );\n\n  return $url;\n}\n\n/**\n * Gets all the repeating events for the specified date.\n *\n * <b>Note:</b>\n * The global variable <var>$repeated_events</var> needs to be\n * set by calling {@link read_repeated_events()} first.\n *\n * @param string $user            Username\n * @param string $date            Date to get events for in YYYYMMDD format\n * @param bool   $get_unapproved  Include unapproved events in results?\n *\n * @return mixed  The query result resource on queries (which can then be\n *                passed to {@link dbi_fetch_row()} to obtain the results), or\n *                true/false on insert or delete queries.\n *\n * @global array  Array of {@link RepeatingEvent}s\n *                retreived using {@link read_repeated_events()}\n */\nfunction get_repeating_entries ( $user, $dateYmd, $get_unapproved = true ) {\n  global $repeated_events;\n\n  $n = 0;\n  $ret = [];\n  for ( $i = 0, $cnt = count ( $repeated_events ); $i < $cnt; $i++ ) {\n    if( ( $repeated_events[$i]->getStatus() == 'A' || $get_unapproved )\n        && in_array( $dateYmd, $repeated_events[$i]->getRepeatAllDates() ) )\n      $ret[$n++] = $repeated_events[$i];\n  }\n  return $ret;\n}\n\n/**\n * Gets all the tasks for a specific date.\n *\n * Events are retreived from the array of pre-loaded tasks\n * (which was loaded all at once to improve performance).\n *\n * The returned tasks will be sorted by time of day.\n *\n * @param string $date            Date to get tasks for in YYYYMMDD format\n * @param bool   $get_unapproved  Load unapproved events?\n *\n * @return array  Array of Tasks.\n */\nfunction get_tasks ( $date, $get_unapproved = true ) {\n  global $tasks;\n\n  $ret = [];\n  $today = date ( 'Ymd' );\n  for ( $i = 0, $cnt = is_array($tasks) ? count ($tasks) : 0; $i < $cnt; $i++ ) {\n    // In case of data corruption (or some other bug...).\n    if( empty( $tasks[$i] ) || $tasks[$i]->getID() == ''\n        || ( ! $get_unapproved && $tasks[$i]->getStatus() == 'W' ) )\n      continue;\n\n    $due_date = date( 'Ymd', $tasks[$i]->getDueDateTimeTS() );\n    // Make overdue tasks float to today.\n    if ( ( $date == $today && $due_date < $today ) || $due_date == $date )\n      $ret[] = $tasks[$i];\n  }\n  return $ret;\n}\n\n/**\n * Get plugins available to the current user.\n *\n * Do this by getting a list of all plugins that are not disabled by the\n * administrator and make sure this user has not disabled any of them.\n *\n * It's done this was so that when an admin adds a new plugin,\n * it shows up on each users system automatically (until they disable it).\n *\n * @return array  Plugins available to current user.\n *\n * @ignore\n */\nfunction get_user_plugin_list() {\n  $ret = [];\n  $all_plugins = get_plugin_list();\n  for ( $i = 0, $cnt = count ( $all_plugins ); $i < $cnt; $i++ ) {\n    if ( $GLOBALS[$all_plugins[$i] . '.disabled'] != 'N' )\n      $ret[] = $all_plugins[$i];\n  }\n  return $ret;\n}\n\n/**\n * Get event ids for all events this user is a participant.\n *\n * @param string $user  User to retrieve event ids\n */\nfunction get_users_event_ids ( $user ) {\n  $events = [];\n  $res = dbi_execute ( 'SELECT we.cal_id FROM webcal_entry we, webcal_entry_user weu\n  WHERE we.cal_id = weu.cal_id\n    AND weu.cal_login = ?', [$user] );\n  if ( $res ) {\n    while ( $row = dbi_fetch_row ( $res ) ) {\n      $events[] = $row[0];\n    }\n  }\n  return $events;\n}\n\n/**\n * Identify user's browser.\n *\n * Returned value will be one of:\n * - \"Mozilla/5\" = Mozilla (open source Mozilla 5.0)\n * - \"Mozilla/[3,4]\" = Netscape (3.X, 4.X)\n * - \"MSIE 4\" = MSIE (4.X)\n *\n * @return string  String identifying browser.\n *\n * @ignore\n */\nfunction get_web_browser() {\n  $agent = getenv( 'HTTP_USER_AGENT' );\n\n  if ( preg_match( '/MSIE \\d/', $agent ) )\n    return 'MSIE';\n\n  if ( preg_match( '/Mozilla\\/[234]/', $agent ) )\n    return 'Netscape';\n\n  if ( preg_match( '/Mozilla\\/[5678]/', $agent ) )\n    return 'Mozilla';\n\n  return 'Unknown';\n}\n\n/**\n * Gets the previous weekday of the week containing the specified date.\n *\n * If the date specified is a Sunday, then that date is returned.\n *\n * @param int $year   Year\n * @param int $month  Month (1-12)\n * @param int $day    Day (1-31)\n *\n * @return int  The date (in UNIX timestamp format).\n */\nfunction get_weekday_before ( $year, $month, $day = 2 ) {\n  global $DISPLAY_WEEKENDS, $WEEK_START, $weekday_names;\n\n  // Construct string like 'last Sun'.\n  $laststr = 'last ' . $weekday_names[$WEEK_START];\n  // We default day=2 so if the 1ast is Sunday or Monday it will return the 1st.\n  $newdate = strtotime ( $laststr,\n    mktime ( 0, 0, 0, $month, $day, $year ) + $GLOBALS['tzOffset'] );\n  // Check DST and adjust newdate.\n  while ( date ( 'w', $newdate ) == date ( 'w', $newdate + 86400 ) ) {\n    $newdate += 3600;\n  }\n  return $newdate;\n}\n\n/**\n * Get the moonphases for a given year and month.\n *\n * Will only work if optional moon_phases.php file exists in includes folder.\n *\n * @param int $year   Year in YYYY format\n * @param int $month  Month in m format Jan =1\n *\n * @return array  $key = phase name, $val = Ymd value.\n *\n * @global string (Y/N) Display Moon Phases\n */\nfunction getMoonPhases ( $year, $month ) {\n  global $DISPLAY_MOON_PHASES;\n  static $moons;\n\n  if ( empty ( $DISPLAY_MOON_PHASES ) || $DISPLAY_MOON_PHASES == 'N' )\n    return false;\n\n  if ( empty ( $moons ) && file_exists ( 'includes/moon_phases.php' ) ) {\n    include_once ( 'includes/moon_phases.php' );\n    $moons = calculateMoonPhases ( $year, $month );\n  }\n\n  return $moons;\n}\n\n/**\n * Calculate event rollover to next day and add partial event as needed.\n *\n * Create a cloned event on the fly as needed to display in next day slot.\n * The event times will be adjusted so that the total of all times will\n * equal the total time of the original event. This function will get called\n * recursively until all time has been accounted for.\n *\n * @param mixed $item    Event Object\n * @param int   $i       Current count of event array\n * @param bool  $parent  flag to keep track of the original event object\n *\n * $global array     $result        Array of events\n * @global string    (Y/N)          Do we want to use cross day display\n * @staticvar int    $realEndTS     The true end of the original event\n * @staticvar string $originalDate  The start date of the original event\n * @staticvar mixed  $originalItem  The original event object\n*/\nfunction getOverLap ( $item, $i, $parent = true ) {\n  global $DISABLE_CROSSDAY_EVENTS, $result;\n  static $originalDate, $originalItem, $realEndTS;\n\n  if ( $DISABLE_CROSSDAY_EVENTS == 'Y' )\n    return false;\n\n  $lt = localtime( $item->getDateTimeTS() );\n  $recurse = 0;\n\n  $midnight = gmmktime( - ( date( 'Z', $item->getDateTimeTS() ) / 3600 ),\n    0, 0, $lt[4] + 1, $lt[3] + 1, 1900 + $lt[5] );\n  if ( $parent ) {\n    $realEndTS = $item->getEndDateTimeTS();\n    $originalDate = $item->getDate();\n    $originalItem = $item;\n  }\n  $new_duration = ( $realEndTS - $midnight ) / 60;\n  if ( $new_duration > 1440 ) {\n    $new_duration = 1439;\n    $recurse = 1;\n  }\n  if ( $realEndTS > $midnight ) {\n    $result[$i] = clone ( $originalItem );\n    $result[$i]->setClone ( $originalDate );\n    $result[$i]->setDuration ( $new_duration );\n    $result[$i]->setTime ( gmdate ( 'G0000', $midnight ) );\n    $result[$i]->setDate ( gmdate ( 'Ymd', $midnight ) );\n    $result[$i]->setName( $originalItem->getName() . ' ('\n       . translate ( 'cont.' ) . ')' );\n\n    $i++;\n    if ( $parent )\n      $item->setDuration( ( ( $midnight - $item->getDateTimeTS() ) / 60 ) -1 );\n  }\n  // Call this function recursively until duration < ONE_DAY.\n  if ( $recurse == 1 )\n   getOverLap ( $result[$i -1], $i, false );\n}\n\n/**\n * Hack to implement clone() for php4.x.\n *\n * @param mixed  Event object\n *\n * @return mixed  Clone of the original object.\n */\nif( version_compare( phpversion(), '5.0' ) < 0 ) {\n  eval ( '\n    function clone ($item) {\n      return $item;\n    }\n    ' );\n}\n\n/**\n * Get the reminder data for a given entry id.\n *\n * @param int $id        cal_id of requested entry\n * @param bool $display  if true, will create a displayable string\n *\n * @return string $str       string to display Reminder value.\n * @return array  $reminder\n */\nfunction getReminders ( $id, $display = false ) {\n  $reminder = [];\n  $str = '';\n  // Get reminders.\n  $rows = dbi_get_cached_rows ( 'SELECT cal_id, cal_date, cal_offset,\n    cal_related, cal_before, cal_repeats, cal_duration, cal_action,\n    cal_last_sent, cal_times_sent FROM webcal_reminders\n  WHERE cal_id = ?\n  ORDER BY cal_date, cal_offset, cal_last_sent', [$id] );\n  if ( $rows ) {\n    $rowcnt = count ( $rows );\n    for ( $i = 0; $i < $rowcnt; $i++ ) {\n      $row = $rows[$i];\n      $reminder['id'] = $row[0];\n      if ( $row[1] != 0 ) {\n        $reminder['timestamp'] = $row[1];\n        $reminder['date'] = date ( 'Ymd', $row[1] );\n        $reminder['time'] = date ( 'His', $row[1] );\n      }\n      $reminder['offset'] = $row[2];\n      $reminder['related'] = $row[3];\n      $reminder['before'] = $row[4];\n      $reminder['repeats'] = $row[5];\n      $reminder['duration'] = $row[6];\n      $reminder['action'] = $row[7];\n      $reminder['last_sent'] = $row[8];\n      $reminder['times_sent'] = $row[9];\n    }\n    // Create display string if needed in user's timezone.\n    if ( ! empty ( $reminder ) && $display == true ) {\n      $str .= translate ( 'Yes' ) . '&nbsp;&nbsp;-&nbsp;&nbsp;';\n      if ( ! empty ( $reminder['date'] ) )\n        $str .= date ( 'Ymd', $reminder['timestamp'] );\n      else { // Must be an offset even if zero.\n        $d = $h = $minutes = 0;\n        if ( $reminder['offset'] > 0 ) {\n          $minutes = $reminder['offset'];\n          $d = intval ( $minutes / (24*60) );\n          $minutes -= ( $d * (24*60) );\n          $h = intval ( $minutes / 60 );\n          $minutes -= ( $h * 60 );\n        }\n        /*\nLet tools/update_translations.pl see these.\ntranslate ( 'after' ) translate ( 'before' ) translate ( 'end' )\ntranslate ( 'start' ) translate ( 'day' ) translate ( 'days' )\ntranslate ( 'hour' ) translate ( 'hours' ) translate ( 'minute' )\ntranslate ( 'minutes' )\n */\n        $str .= $d . ' ' . translate ( 'day'\n           . ( $d == 1 ? '' : 's' ) ) . ' ' . $h . ' ' . translate ( 'hour'\n           . ( $h = 1 ? '' : 's' ) ) . ' ' . $minutes . ' ' . translate ( 'minute'\n           . ( $minutes == 1 ? '' : 's' ) ) . ' '\n         . translate ( $reminder['before'] == 'Y'\n          ? 'before' : 'after' ) . ' ' . translate ( $reminder['related'] == 'S'\n          ? 'start' : 'end' );\n      }\n      return $str;\n    }\n  }\n  return $reminder;\n}\n\n/**\n * Remove :00 from times based on $DISPLAY_MINUTES value.\n *\n * @param string $timestr  time value to shorten\n *\n * @global string (Y/N)  Display 00 if on the hour\n */\nfunction getShortTime ( $timestr ) {\n  global $DISPLAY_MINUTES;\n\n  return ( empty ( $DISPLAY_MINUTES ) || $DISPLAY_MINUTES == 'N'\n    ? preg_replace ( '/(:00)/', '', $timestr ) : $timestr );\n}\n\n/**\n * Converts from Gregorian Year-Month-Day to ISO YearNumber-WeekNumber-WeekDay.\n *\n * @internal JGH borrowed gregorianToISO from PEAR Date_Calc Class and added\n *\n * $GLOBALS['WEEK_START'] (change noted)\n *\n * @param int $day    Day of month\n * @param int $month  Number of month\n * @param int $year   Year\n *\n * @return string  Date in ISO YearNumber-WeekNumber-WeekDay format.\n *\n * @ignore\n */\nfunction gregorianToISO ( $day, $month, $year ) {\n  global $WEEK_START;\n\n  $mnth = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  $y_isleap = isLeapYear ( $year );\n\n  $day_of_year_number = $day + $mnth[$month - 1];\n  if ( $y_isleap && $month > 2 )\n    $day_of_year_number++;\n\n  // Find Jan 1 weekday (Monday = 1, Sunday = 7).\n  $yy = ( $year - 1 ) % 100;\n  $jan1_weekday = 1 +\n  intval ( ( ( ( ( ( $year - 1 ) - $yy / 100 ) % 4 ) * 5 ) + $yy +\n      intval ( $yy / 4 ) ) % 7 );\n\n  // JGH added next if/else to compensate for week begins on Sunday.\n  if ( ! $WEEK_START ) {\n    if ( $jan1_weekday < 7 )\n      $jan1_weekday++;\n    elseif ( $jan1_weekday == 7 )\n      $jan1_weekday = 1;\n  }\n\n  // Weekday for year-month-day.\n  $weekday = 1 +\n  intval ( ( $day_of_year_number + ( $jan1_weekday - 1 ) - 1 ) % 7 );\n  $yearnumber = $year;\n  // Find if Y M D falls in YearNumber Y-1, WeekNumber 52.\n  if ( $day_of_year_number <= ( 8 - $jan1_weekday ) && $jan1_weekday > 4 ) {\n    $weeknumber = ( $jan1_weekday == 5 || ( $jan1_weekday == 6 &&\n        isLeapYear ( $year - 1 ) ) ? 53 : 52 );\n    $yearnumber--;\n  }\n\n  // Find if Y M D falls in YearNumber Y+1, WeekNumber 1.\n  if ( $yearnumber == $year ) {\n    $i = 365;\n    if ( $y_isleap )\n      $i++;\n\n    if ( ( $i - $day_of_year_number ) < ( 4 - $weekday ) ) {\n      $weeknumber = 1;\n      $yearnumber++;\n    }\n  }\n  // Find if Y M D falls in YearNumber Y, WeekNumber 1 through 53.\n  if ( $yearnumber == $year ) {\n    $weeknumber = intval ( ( $day_of_year_number + ( 7 - $weekday ) +\n        ( $jan1_weekday - 1 ) ) / 7 );\n    if ( $jan1_weekday > 4 )\n      $weeknumber--;\n  }\n  // Put it all together.\n  if ( $weeknumber < 10 )\n    $weeknumber = '0' . $weeknumber;\n\n  return \"{$yearnumber}-{$weeknumber}-{$weekday}\";\n}\n\n/**\n * Converts a hexadecimal digit to an integer.\n *\n * @param string $val Hexadecimal digit\n *\n * @return int Equivalent integer in base-10\n *\n * @ignore\n */\nfunction hextoint ( $val ) {\n  if ( empty ( $val ) )\n    return 0;\n\n  switch ( strtoupper ( $val ) ) {\n    case '0': return 0;\n    case '1': return 1;\n    case '2': return 2;\n    case '3': return 3;\n    case '4': return 4;\n    case '5': return 5;\n    case '6': return 6;\n    case '7': return 7;\n    case '8': return 8;\n    case '9': return 9;\n    case 'A': return 10;\n    case 'B': return 11;\n    case 'C': return 12;\n    case 'D': return 13;\n    case 'E': return 14;\n    case 'F': return 15;\n  }\n  return 0;\n}\n\n\n/**\n * Generates the HTML for an event to be viewed in the day-at-glance (day.php).\n *\n * The HTML will be stored in an array (global variable $hour_arr)\n * indexed on the event's starting hour.\n *\n * @param Event  $event  The event\n * @param string $date   Date of event in YYYYMMDD format\n */\nfunction html_for_event_day_at_a_glance ( $event, $date ) {\n  global $ALLOW_HTML_DESCRIPTION, $categories, $DISPLAY_DESC_PRINT_DAY,\n  $DISPLAY_END_TIMES, $first_slot, $hour_arr, $last_slot, $layers, $login,\n  $PHP_SELF, $rowspan, $rowspan_arr;\n  static $key = 0;\n\n  $can_access = CAN_DOALL;\n  $end_timestr = $popup_timestr = '';\n  $getCalTypeName = $event->getCalTypeName();\n  $getCat = abs( $event->getCategory() );\n  $getClone = $event->getClone();\n  $getDesc = $event->getDescription();\n  $getLogin = $event->getLogin();\n  $getPri = $event->getPriority();\n  $id = $event->getID();\n  $ind = 9999;\n  $isAllDay = $event->isAllDay();\n  $linkid = \"pop$id-$key\";\n  $name = $event->getName();\n  $time = $event->getTime();\n  $time_only = 'N';\n  $view_text = translate ( 'View this event' );\n\n  $catIcon = 'wc-icons/cat-' . $getCat . '.gif';\n  if ( ! file_exists ( $catIcon ) )\n    $catIcon = 'wc-icons/cat-' . $getCat . '.png';\n  $key++;\n\n  if( access_is_enabled() ) {\n    $can_access = access_user_calendar ( 'view', $getLogin, '',\n      $event->getCalType(), $event->getAccess() );\n    $time_only = access_user_calendar ( 'time', $getLogin );\n    if ( $getCalTypeName == 'task' && $can_access == 0 )\n      return false;\n  }\n\n  // If TZ_OFFSET make this event before the start of the day or\n  // after the end of the day, adjust the time slot accordingly.\n  if( ! $event->isUntimed() && ! $isAllDay && $getCalTypeName != 'task' ) {\n    $tz_time = date( 'His', $event->getDateTimeTS() );\n    $ind = calc_time_slot ( $tz_time );\n    if ( $ind < $first_slot )\n      $first_slot = $ind;\n\n    $tz_time2 = date( 'His', $event->getEndDateTimeTS() );\n    $ind2 = calc_time_slot ( $tz_time2 );\n    if ( $ind2 > $last_slot )\n      $last_slot = $ind2;\n  }\n  if ( empty ( $hour_arr[$ind] ) )\n    $hour_arr[$ind] = '';\n\n  $class = ( $login != $getLogin && strlen ( $getLogin )\n    ? 'layer' : ( $event->getStatus() == 'W' ? 'unapproved' : '' ) ) . 'entry';\n  // If we are looking at a view, then always use \"entry\".\n  if ( strstr ( $PHP_SELF, 'view_m.php' ) ||\n      strstr ( $PHP_SELF, 'view_t.php' ) ||\n      strstr ( $PHP_SELF, 'view_v.php' ) ||\n      strstr ( $PHP_SELF, 'view_w.php' ) )\n    $class = 'entry';\n\n  if ( $getCat > 0 && file_exists ( $catIcon ) ) {\n    $catAlt = translate ( 'Category' ) . ': ' . $categories[$getCat]['cat_name'];\n    $hour_arr[$ind] .= '<img src=\"' . $catIcon . '\" alt=\"' . $catAlt\n     . '\" title=\"' . $catAlt . '\" />';\n  }\n\n  if ( $getCalTypeName == 'task' ) {\n    $hour_arr[$ind] .= '<img src=\"images/bootstrap-icons/circle-fill.svg\" class=\"bullet\" alt=\"*\" /> ';\n    $view_text = translate ( 'View this task' );\n  }\n\n  $hour_arr[$ind] .= '<a title=\"' . $view_text . '\" class=\"' . $class . '\" id=\"'\n   . $linkid . '\" '\n  // Make sure clones have parents URL date.\n  . ( $can_access != 0 && $time_only != 'Y'\n    ? 'href=\"view_entry.php?id=' . $id . '&amp;date='\n     . ( $getClone ? $getClone : $date )\n     . ( strlen ( $GLOBALS['user'] ) > 0\n      ? '&amp;user=' . $GLOBALS['user']\n      : ( $class == 'layerentry' ? '&amp;user=' . $getLogin : '' ) ) . '\"'\n    : '' ) . '>' . ( $getPri == 3 ? '<strong>' : '' );\n\n  if ( $login != $getLogin && strlen ( $getLogin ) ) {\n    if ( $layers ) {\n      foreach ( $layers as $layer ) {\n        if ( $layer['cal_layeruser'] == $getLogin ) {\n          $hour_arr[$ind] .= '<span style=\"color:' . $layer['cal_color'] . ';\">';\n          $in_span = true;\n        }\n      }\n    }\n    // Check to see if Category Colors are set.\n  } else\n  if ( ! empty ( $categories[$getCat]['cat_color'] ) ) {\n    $cat_color = $categories[$getCat]['cat_color'];\n    if ( $cat_color != '#000000' ) {\n      $hour_arr[$ind] .= '<span style=\"color:' . $cat_color . ';\">';\n      $in_span = true;\n    }\n  }\n\n  if ( $isAllDay )\n    $hour_arr[$ind] .= '[' . translate ( 'All day event' ) . '] ';\n  else\n  if ( $time >= 0 && ! $isAllDay && $getCalTypeName != 'task' ) {\n    $end_timestr = '-' . display_time( $event->getEndDateTime() );\n    $popup_timestr = display_time( $event->getDatetime() );\n\n    $hour_arr[$ind] .= '[' . $popup_timestr;\n    if( $event->getDuration() > 0 ) {\n      $popup_timestr .= $end_timestr;\n      if ( $DISPLAY_END_TIMES == 'Y' )\n        $hour_arr[$ind] .= $end_timestr;\n      // Which slot is end time in? take one off so we don't\n      // show 11:00-12:00 as taking up both 11 and 12 slots.\n      $end_time = date( 'His', $event->getEndDateTimeTS() );\n      // This fixes the improper display if an event ends at or after midnight.\n      if ( $end_time < $tz_time )\n        $end_time += 240000;\n\n      $endind = calc_time_slot ( $end_time, true );\n      $rowspan = ( $endind == $ind ? 0 : $endind - $ind + 1 );\n\n      if ( ! isset ( $rowspan_arr[$ind] ) )\n        $rowspan_arr[$ind] = 0;\n\n      if ( $rowspan > $rowspan_arr[$ind] && $rowspan > 1 )\n        $rowspan_arr[$ind] = $rowspan;\n    }\n  $hour_arr[$ind] .= '] ';\n  }\n  $hour_arr[$ind] .= build_entry_label ( $event, 'eventinfo-' . $linkid,\n    $can_access, $popup_timestr, $time_only )\n   . ( $getPri == 3 ? '</strong>' : '' ) . '</a>'\n   . ( $DISPLAY_DESC_PRINT_DAY == 'Y' ? '\n    <dl class=\"desc\">\n      <dt>' . translate ( 'Description' ) . ':</dt>\n      <dd>'\n     . ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y'\n      ? $getDesc : strip_tags ( $getDesc ) ) . '</dd>\n    </dl>' : '' ) . \"<br />\\n\";\n}\n\n/**\n * Generates the HTML for an event to be viewed in the week-at-glance (week.php).\n *\n * The HTML will be stored in an array (global variable $hour_arr)\n * indexed on the event's starting hour.\n *\n * @param Event  $event           The event\n * @param string $date            Date for which we're printing (in YYYYMMDD format)\n * @param string $override_class  If set, then this is the class to use\n * @param bool   $show_time       If enabled, then event time is displayed\n */\nfunction html_for_event_week_at_a_glance ( $event, $date,\n  $override_class = '', $show_time = true ) {\n  global $categories, $DISPLAY_ICONS, $DISPLAY_TZ, $eventinfo, $first_slot,\n  $hour_arr, $is_assistant, $is_nonuser_admin, $last_slot, $layers, $login,\n  $PHP_SELF, $rowspan, $rowspan_arr, $TIME_SPACER, $user;\n  static $key = 0;\n\n  $can_access = CAN_DOALL;\n  $catAlt = $href = $timestr = '';\n  $getCalTypeName = $event->getCalTypeName();\n  $getCat = abs( $event->getCategory() );\n  $getClone = $event->getClone();\n  $getDatetime = $event->getDatetime();\n  $getLoginStr = $event->getLogin();\n  $getPri = $event->getPriority();\n  $id = $event->getID();\n  $ind = 9999;\n  $isAllDay = $event->isAllDay();\n  $isUntime = $event->isUntimed();\n  $linkid = \"pop$id-$key\";\n  $name = $event->getName();\n  $time_only = 'N';\n  $title = '<a title=\"';\n\n  $catIcon = 'wc-icons/cat-' . $getCat . '.gif';\n  if ( ! file_exists ( $catIcon ) )\n    $catIcon = 'wc-icons/cat-' . $getCat . '.png';\n  $key++;\n\n  if( access_is_enabled() ) {\n    $can_access = access_user_calendar ( 'view', $getLoginStr, '',\n      $event->getCalType(), $event->getAccess() );\n    $time_only = access_user_calendar ( 'time', $getLoginStr );\n    if ( $getCalTypeName == 'task' && $can_access == 0 )\n      return false;\n  }\n\n  // Figure out which time slot it goes in. Put tasks in with AllDay and Untimed.\n  if ( ! $isUntime && ! $isAllDay && $getCalTypeName != 'task' ) {\n    $tz_time = date( 'His', $event->getDateTimeTS() );\n    $ind = calc_time_slot ( $tz_time );\n    if ( $ind < $first_slot )\n      $first_slot = $ind;\n\n    if ( $ind > $last_slot )\n      $last_slot = $ind;\n  }\n\n  $class = ( $login != $getLoginStr && strlen ( $getLoginStr )\n    ? 'layer' : ( $event->getStatus() == 'W' ? 'unapproved' : '' ) ) . 'entry';\n  // If we are looking at a view, then always use \"entry\".\n  if ( strstr ( $PHP_SELF, 'view_m.php' ) ||\n      strstr ( $PHP_SELF, 'view_r.php' ) ||\n      strstr ( $PHP_SELF, 'view_t.php' ) ||\n      strstr ( $PHP_SELF, 'view_v.php' ) ||\n      strstr ( $PHP_SELF, 'view_w.php' ) )\n    $class = 'entry';\n\n  if ( ! empty ( $override_class ) )\n    $class .= ' ' . $override_class;\n\n  // Avoid PHP warning for undefined array index.\n  if ( empty ( $hour_arr[$ind] ) )\n    $hour_arr[$ind] = '';\n\n  if ( $getCat > 0 && file_exists ( $catIcon ) ) {\n    $catAlt = translate ( 'Category' ) . ': ' . $categories[$getCat]['cat_name'];\n    $hour_arr[$ind] .= '<img src=\"' . $catIcon . '\" alt=\"' . $catAlt\n     . '\" title=\"' . $catAlt . '\" />';\n  }\n\n  // Build entry link if UAC permits viewing.\n  if ( $can_access != 0 && $time_only != 'Y' ) {\n    // Make sure clones have parents URL date.\n    $href = 'href=\"view_entry.php?id=' . $id . '&amp;date='\n     . ( $getClone ? $getClone : $date );\n    if ( $getCalTypeName == 'task' ) {\n      $hour_arr[$ind] .= '<img src=\"images/bootstrap-icons/circle-fill.svg\" class=\"bullet\" alt=\"*\" /> ';\n\n      $title .= translate ( 'View this task' );\n    } else { // Must be event.\n      if ( $isAllDay || $isUntime && $catAlt == '' )\n        $hour_arr[$ind] .= '<img src=\"images/bootstrap-icons/circle-fill.svg\" class=\"bullet\" alt=\"*\" /> ';\n\n      $title .= translate ( 'View this event' );\n    }\n  }\n\n  $hour_arr[$ind] .= $title . '\" class=\"' . $class . '\" id=\"' . $linkid . '\" '\n   . $href . ( strlen ( $GLOBALS['user'] ) > 0\n    ? '&amp;user=' . $GLOBALS['user']\n    : ( $class == 'layerentry' ? '&amp;user=' . $getLoginStr : '' ) ) . '\">'\n   . ( $getPri == 3 ? '<strong>' : '' );\n\n  if ( $login != $getLoginStr && strlen ( $getLoginStr ) ) {\n    if ( $layers ) {\n      foreach ( $layers as $layer ) {\n        if ( $layer['cal_layeruser'] == $getLoginStr ) {\n          $hour_arr[$ind] .= '<span style=\"color:' . $layer['cal_color'] . ';\">';\n          $in_span = true;\n        }\n      }\n    }\n    // Check to see if Category Colors are set.\n  } else\n  if ( ! empty ( $categories[$getCat]['cat_color'] ) ) {\n    $cat_color = $categories[$getCat]['cat_color'];\n    if ( $cat_color != '#000000' ) {\n      $hour_arr[$ind] .= '<span style=\"color:' . $cat_color . ';\">';\n      $in_span = true;\n    }\n  }\n  if ( $isAllDay ) {\n    $timestr = translate ( 'All day event' );\n    // Set start cell of all-day event to beginning of work hours.\n    if ( empty ( $rowspan_arr[$first_slot] ) )\n      $rowspan_arr[$first_slot] = 0; // Avoid warning below.\n    // We'll skip tasks here as well.\n  } else\n  if ( $event->getTime() >= 0 && $getCalTypeName != 'task' ) {\n    if ( $show_time )\n      $hour_arr[$ind] .= display_time ( $getDatetime )\n       . ( $time_only == 'Y' ? '' : $TIME_SPACER );\n\n    $timestr = display_time ( $getDatetime );\n    if( $event->getDuration() > 0 ) {\n      $end_time = date( 'His', $event->getEndDateTimeTS() );\n      $timestr .= '-' . display_time( $event->getEndDateTime(), $DISPLAY_TZ );\n      // This fixes the improper display if an event ends at or after midnight.\n      if ( $end_time < $tz_time )\n        $end_time += 240000;\n    } else\n      $end_time = 0;\n\n    if ( empty ( $rowspan_arr[$ind] ) )\n      $rowspan_arr[$ind] = 0; // Avoid warning below.\n\n    // Which slot is end time in? take one off so we don't\n    // show 11:00-12:00 as taking up both 11 and 12 slots.\n    $endind = calc_time_slot ( $end_time, true );\n    $rowspan = ( $endind == $ind ? 0 : $endind - $ind + 1 );\n\n    if ( $rowspan > $rowspan_arr[$ind] && $rowspan > 1 )\n      $rowspan_arr[$ind] = $rowspan;\n  }\n\n  $hour_arr[$ind] .= build_entry_label ( $event, 'eventinfo-' . $linkid,\n    $can_access, $timestr, $time_only )\n   . ( empty ( $in_span ) ? '' : '</span>' )// End color span.\n   . ( $getPri == 3 ? '</strong>' : '' ) . '</a>'\n  // . ( $DISPLAY_ICONS == 'Y' ? icon_text ( $id, true, true ) : '' )\n  . \"<br />\\n\";\n}\n\n/**\n * Converts HTML entities in 8bit.\n *\n * <b>Note:</b> Only supported for PHP4 (not PHP3).\n *\n * @param string $html  HTML text\n *\n * @return string  The converted text.\n */\nfunction html_to_8bits ( $html ) {\n  return ( floor( phpversion() ) < 4\n   ? $html\n   : strtr ( $html, array_flip ( get_html_translation_table ( HTML_ENTITIES ) ) ) );\n}\n\n/**\n * Determine if date is a weekend\n *\n * @param int $date  Timestamp of subject date OR a weekday number 0-6\n *\n * @return bool  True = Date is weekend\n */\nfunction is_weekend ( $date ) {\n  global $WEEKEND_START;\n\n  // We can't test for empty because $date may equal 0.\n  if ( ! strlen ( $date ) )\n    return false;\n\n  if ( ! isset ( $WEEKEND_START ) )\n    $WEEKEND_START = 6;\n\n  // We may have been passed a weekday 0-6.\n  if ( $date < 7 )\n    return ( $date == $WEEKEND_START % 7 || $date == ( $WEEKEND_START + 1 ) % 7 );\n\n  // We were passed a timestamp.\n  $wday = date ( 'w', $date );\n  return ( $wday == $WEEKEND_START % 7 || $wday == ( $WEEKEND_START + 1 ) % 7 );\n}\n\n/**\n * Is this a leap year?\n *\n * @internal JGH Borrowed isLeapYear from PEAR Date_Calc Class\n *\n * @param int $year  Year\n *\n * @return bool  True for a leap year, else false.\n *\n * @ignore\n */\nfunction isLeapYear ( $year = '' ) {\n  if ( empty ( $year ) )\n    $year = strftime( '%Y', time() );\n\n  if ( strlen ( $year ) != 4 || preg_match ( '/\\D/', $year ) )\n    return false;\n\n  return ( ( $year % 4 == 0 && $year % 100 != 0 ) || $year % 400 == 0 );\n}\n\n/**\n * Loads default system settings (which can be updated via admin.php).\n *\n * System settings are stored in the webcal_config table.\n *\n * <b>Note:</b> If the setting for <var>server_url</var> is not set,\n * the value will be calculated and stored in the database.\n *\n * @global string  User's login name\n * @global bool    Readonly\n * @global string  HTTP hostname\n * @global int     Server's port number\n * @global string  Request string\n * @global array   Server variables\n */\nfunction load_global_settings() {\n  global $_SERVER, $APPLICATION_NAME, $FONTS, $HTTP_HOST,\n  $LANGUAGE, $REQUEST_URI, $SERVER_PORT, $SERVER_URL;\n\n  // Note:  When running from the command line (send_reminders.php),\n  // these variables are (obviously) not set.\n  // TODO:  This type of checking should be moved to a central location\n  // like init.php.\n  if ( isset ( $_SERVER ) && is_array ( $_SERVER ) ) {\n    if ( empty ( $HTTP_HOST ) && isset ( $_SERVER['HTTP_HOST'] ) )\n      $HTTP_HOST = $_SERVER['HTTP_HOST'];\n\n    if ( empty ( $SERVER_PORT ) && isset ( $_SERVER['SERVER_PORT'] ) )\n      $SERVER_PORT = $_SERVER['SERVER_PORT'];\n\n    if ( ! isset ( $_SERVER['REQUEST_URI'] ) ) {\n      $arr = explode ( '/', $_SERVER['PHP_SELF'] );\n      $_SERVER['REQUEST_URI'] = '/' . $arr[count ( $arr )-1];\n      if ( isset ( $_SERVER['argv'][0] ) && $_SERVER['argv'][0] != '' )\n        $_SERVER['REQUEST_URI'] .= '?' . $_SERVER['argv'][0];\n    }\n    if ( empty ( $REQUEST_URI ) && isset ( $_SERVER['REQUEST_URI'] ) )\n      $REQUEST_URI = $_SERVER['REQUEST_URI'];\n\n    // Hack to fix up IIS.\n    if ( isset ( $_SERVER['SERVER_SOFTWARE'] ) &&\n        strstr ( $_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS' ) &&\n        isset ( $_SERVER['SCRIPT_NAME'] ) )\n      $REQUEST_URI = $_SERVER['SCRIPT_NAME'];\n  }\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_setting, cal_value\n    FROM webcal_config' );\n  for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n    $row = $rows[$i];\n    $setting = $row[0];\n    $GLOBALS[$setting] = $value = $row[1];\n  }\n\n  // Set SERVER TIMEZONE.\n  if ( empty ( $GLOBALS['TIMEZONE'] ) )\n    $GLOBALS['TIMEZONE'] = $GLOBALS['SERVER_TIMEZONE'];\n\n  set_env ( 'TZ', $GLOBALS['TIMEZONE'] );\n  if ( empty ( $tzInitSet ) ) {\n    if ( function_exists ( \"date_default_timezone_set\" ) )\n      date_default_timezone_set ( $GLOBALS['TIMEZONE'] );\n  }\n\n  // If app name not set.... default to \"Title\". This gets translated later\n  // since this function is typically called before translate.php is included.\n  // Note:  We usually use translate ( $APPLICATION_NAME ) instead of\n  // translate ( 'Title' ).\n  if ( empty ( $APPLICATION_NAME ) )\n    $APPLICATION_NAME = 'Title';\n\n  if ( empty ( $SERVER_URL ) &&\n      ( ! empty ( $HTTP_HOST ) && ! empty ( $REQUEST_URI ) ) ) {\n    $ptr = strrpos ( $REQUEST_URI, '/' );\n    if ( $ptr > 0 ) {\n      $SERVER_URL = 'http://' . $HTTP_HOST\n       . ( ! empty ( $SERVER_PORT ) && $SERVER_PORT != 80\n        ? ':' . $SERVER_PORT : '' )\n       . substr ( $REQUEST_URI, 0, $ptr + 1 );\n\n      dbi_execute ( 'INSERT INTO webcal_config ( cal_setting, cal_value )\n        VALUES ( ?, ? )', ['SERVER_URL', $SERVER_URL] );\n    }\n  }\n\n  // If no font settings, then set default.\n  if ( empty ( $FONTS ) )\n    $FONTS = ( $LANGUAGE == 'Japanese' ? 'Osaka, ' : '' )\n     . 'Arial, Helvetica, sans-serif';\n}\n\n/**\n * Loads nonuser preferences from the webcal_user_pref table\n * if on a nonuser admin page.\n *\n * @param string $nonuser  Login name for nonuser calendar\n */\nfunction load_nonuser_preferences ( $nonuser ) {\n  global $DATE_FORMAT, $DATE_FORMAT_MD, $DATE_FORMAT_MY, $prefarray;\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_setting, cal_value\n  FROM webcal_user_pref\n  WHERE cal_login = ?', [$nonuser] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $setting = $row[0];\n      $value = $row[1];\n      // $sys_setting = 'sys_' . $setting;\n      // save system defaults\n      // ** Don't override ones set by load_user_prefs.\n      if ( ! empty ( $GLOBALS[$setting] ) && empty ( $GLOBALS['sys_' . $setting] ) )\n        $GLOBALS['sys_' . $setting] = $GLOBALS[$setting];\n\n      $GLOBALS[$setting] = $prefarray[$setting] = $value;\n    }\n  }\n\n  if ( empty ( $DATE_FORMAT ) || $DATE_FORMAT == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT = translate ( '__month__ __dd__, __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MY ) || $DATE_FORMAT_MY == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MY = translate ( '__month__ __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MD ) || $DATE_FORMAT_MD == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MD = translate ( '__month__ __dd__' );\n}\n\n/**\n * Returns a custom header, stylesheet or tailer.\n *\n * The data will be loaded from the webcal_user_template table.\n * If the global variable $ALLOW_EXTERNAL_HEADER is set to 'Y',\n * then we load an external file using include.\n * This can have serious security issues since a\n * malicous user could open up /etc/passwd.\n *\n * @param string $login  Current user login\n * @param string $type   type of template\n *                       ('H' = header, 'S' = stylesheet, 'T' = trailer)\n */\nfunction load_template ( $login, $type ) {\n  global $ALLOW_EXTERNAL_HEADER, $ALLOW_USER_HEADER;\n\n  $found = false;\n  $ret = '';\n\n  // First, check for a user-specific template.\n  $sql = 'SELECT cal_template_text FROM webcal_user_template\n    WHERE cal_type = ? and cal_login = ';\n  if ( ! empty ( $ALLOW_USER_HEADER ) && $ALLOW_USER_HEADER == 'Y' ) {\n    $rows = dbi_get_cached_rows ( $sql . '?', [$type, $login] );\n    if ( $rows && ! empty ( $rows[0] ) ) {\n      $row = $rows[0];\n      $ret .= $row[0];\n      $found = true;\n    }\n  }\n\n  // If no user-specific template, check for the system template.\n  if ( ! $found ) {\n    $rows = dbi_get_cached_rows ( $sql . '\"__system__\"', [$type] );\n    if ( $rows && ! empty ( $rows[0] ) ) {\n      $row = $rows[0];\n      $ret .= $row[0];\n      $found = true;\n    }\n  }\n\n  // If still not found, the check the old location (WebCalendar 1.0 and before).\n  if ( ! $found ) {\n    $rows = dbi_get_cached_rows ( 'SELECT cal_template_text\n      FROM webcal_report_template\n  WHERE cal_template_type = ?\n    AND cal_report_id = 0', [$type] );\n    if ( $rows && ! empty ( $rows[0] ) ) {\n      $row = $rows[0];\n      if ( ! empty ( $row ) ) {\n        $ret .= $row[0];\n        $found = true;\n      }\n    }\n  }\n\n\n  // Strip leading and trailing white space in file name candidate.\n  $file = preg_replace ('/^\\s*/', '', $ret);\n  $file = preg_replace ('/\\s*$/', '', $file);\n\n  if ( $found &&\n    ( ! empty ( $ALLOW_EXTERNAL_HEADER ) && $ALLOW_EXTERNAL_HEADER == 'Y' ) &&\n      file_exists ( $file ) ) {\n// Craig. Why not just do $ret = file_get_contents ( $file ) here?\n    ob_start();\n    include \"$file\";\n    $ret = ob_get_contents();\n    ob_end_clean();\n  }\n\n  return $ret;\n}\n\n/**\n * Loads current user's category info and stuff it into category global variable.\n *\n * @param string $ex_global Don't include global categories ('' or '1')\n */\nfunction load_user_categories ( $ex_global = '' ) {\n  global $categories, $CATEGORIES_ENABLED,\n  $is_admin, $is_assistant, $login, $user;\n\n  $categories = [];\n  // These are default values.\n  $categories[0]['cat_name'] = translate ( 'All' );\n  $categories[-1]['cat_name'] = translate ( 'None' );\n  if ( $CATEGORIES_ENABLED == 'Y' ) {\n    $query_params = [];\n    $query_params[] = ( ( ! empty ( $user ) && strlen ( $user ) ) &&\n      ( $is_assistant || $is_admin ) ? $user : $login );\n    $rows = dbi_get_cached_rows ( 'SELECT cat_id, cat_name, cat_owner, cat_color\n      FROM webcal_categories WHERE ( cat_owner = ? ) ' . ( $ex_global == ''\n        ? 'OR ( cat_owner IS NULL ) ORDER BY cat_owner,' : 'ORDER BY' )\n       . ' cat_name', $query_params );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $categories[$row[0]] = [\n          'cat_name' => $row[1],\n          'cat_owner' => $row[2],\n          'cat_global' => empty ( $row[2] ) ? 1 : 0,\n          'cat_color' => ( empty ( $row[3] ) ? '#000000' : $row[3] )];\n      }\n    }\n  }\n}\n\n/**\n * Loads current user's layer info into layer global variable.\n *\n * If the system setting <var>$ALLOW_VIEW_OTHER</var> is not set to 'Y', then\n * we ignore all layer functionality. If <var>$force</var> is 0, we only load\n * layers if the current user preferences have layers turned on.\n *\n * @param string $user   Username of user to load layers for\n * @param int    $force  If set to 1, then load layers for this user even if\n *                       user preferences have layers turned off.\n */\nfunction load_user_layers ( $user = '', $force = 0 ) {\n  global $ALLOW_VIEW_OTHER, $layers, $LAYERS_STATUS, $login;\n\n  if ( $user == '' )\n    $user = $login;\n\n  $layers = [];\n\n  if ( empty ( $ALLOW_VIEW_OTHER ) || $ALLOW_VIEW_OTHER != 'Y' )\n    return; // Not allowed to view others' calendars, so cannot use layers.\n  if ( $force || ( ! empty ( $LAYERS_STATUS ) && $LAYERS_STATUS != 'N' ) ) {\n    $rows = dbi_get_cached_rows ( 'SELECT cal_layerid, cal_layeruser, cal_color,\n      cal_dups FROM webcal_user_layers WHERE cal_login = ? ORDER BY cal_layerid',\n      [$user] );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $layers[$row[0]] = [\n          'cal_layerid' => $row[0],\n          'cal_layeruser' => $row[1],\n          'cal_color' => $row[2],\n          'cal_dups' => $row[3]];\n      }\n    }\n  }\n}\n\n/**\n * Loads the current user's preferences as global variables\n * from the webcal_user_pref table.\n *\n * Also loads the list of views for this user\n * (not really a preference, but this is a convenient place to put this...)\n *\n * <b>Notes:</b>\n * - If <var>$ALLOW_COLOR_CUSTOMIZATION</var> is set to 'N', then we ignore any\n *   color preferences.\n * - Other default values will also be set if the user has not saved a\n *   preference and no global value has been set by the administrator in the\n *   system settings.\n */\nfunction load_user_preferences ( $guest = '' ) {\n  global $ALLOW_COLOR_CUSTOMIZATION, $browser, $DATE_FORMAT, $DATE_FORMAT_MD,\n  $DATE_FORMAT_MY, $DATE_FORMAT_TASK, $has_boss, $is_assistant, $is_nonuser,\n  $is_nonuser_admin, $lang_file, $LANGUAGE, $login, $prefarray, $user, $views;\n\n  $browser = get_web_browser();\n  $browser_lang = get_browser_language();\n  $colors = [\n    'BGCOLOR' => 1,\n    'CELLBG' => 1,\n    'H2COLOR' => 1,\n    'HASEVENTSBG' => 1,\n    'MYEVENTS' => 1,\n    'OTHERMONTHBG' => 1,\n    'POPUP_BG' => 1,\n    'POPUP_FG' => 1,\n    'TABLEBG' => 1,\n    'TEXTCOLOR' => 1,\n    'THBG' => 1,\n    'THFG' => 1,\n    'TODAYCELLBG' => 1,\n    'WEEKENDBG' => 1,\n    'WEEKNUMBER' => 1];\n  $lang_found = false;\n  $prefarray = [];\n  // Allow __public__ pref to be used if logging in or user not validated.\n  $tmp_login = ( empty ( $guest )\n    ? $login : ( $guest == 'guest' ? '__public__' : $guest ) );\n\n  $rows = dbi_get_cached_rows ( 'SELECT cal_setting, cal_value\n  FROM webcal_user_pref\n  WHERE cal_login = ?', [$tmp_login] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $setting = $row[0];\n      $value = $row[1];\n\n      if ( $setting == 'LANGUAGE' )\n        $lang_found = true;\n\n      if ( $ALLOW_COLOR_CUSTOMIZATION == 'N' &&\n        isset ( $colors[$setting] ) )\n        continue;\n\n      // $sys_setting = 'sys_' . $setting;\n      // Save system defaults.\n      if ( ! empty ( $GLOBALS[$setting] ) )\n        $GLOBALS['sys_' . $setting] = $GLOBALS[$setting];\n\n      $GLOBALS[$setting] = $prefarray[$setting] = $value;\n    }\n  }\n\n  // Set users timezone.\n  if ( isset ( $GLOBALS['TIMEZONE'] ) )\n    set_env ( 'TZ', $GLOBALS['TIMEZONE'] );\n\n  // Get views for this user and global views.\n  // If NUC and not authorized by UAC, disallow global views.\n  $rows = dbi_get_cached_rows ( 'SELECT cal_view_id, cal_name, cal_view_type,\n    cal_is_global, cal_owner FROM webcal_view WHERE cal_owner = ? '\n     . ( $is_nonuser && ( ! access_is_enabled() ||\n        ( access_is_enabled()\n          && ! access_can_access_function( ACCESS_VIEW, $guest ) ) )\n      ? '' : ' OR cal_is_global = \\'Y\\' ' )\n     . 'ORDER BY cal_name', [$tmp_login] );\n  $views = [];\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $url = 'view_';\n      if ( $row[2] == 'E' )\n        $url .= 'r.php?';\n      elseif ( $row[2] == 'S' )\n        $url .= 't.php?';\n      elseif ( $row[2] == 'T' )\n        $url .= 't.php?';\n      else\n        $url .= strtolower ( $row[2] ) . '.php?';\n\n      $v = [\n        'cal_view_id' => $row[0],\n        'cal_name' => $row[1],\n        'cal_view_type' => $row[2],\n        'cal_is_global' => $row[3],\n        'cal_owner' => $row[4],\n        'url' => $url . 'id=' . $row[0]];\n      $views[] = $v;\n    }\n  }\n\n  // If user has not set a language preference and admin has not specified a\n  // language, then use their browser settings to figure it out\n  // and save it in the database for future use (email reminders).\n  $lang = 'none';\n  if ( ! $lang_found && strlen ( $tmp_login ) && $tmp_login != '__public__' ) {\n    if ( $LANGUAGE == 'none' )\n      $lang = $browser_lang;\n\n    dbi_execute ( 'INSERT INTO webcal_user_pref ( cal_login, cal_setting,\n     cal_value ) VALUES ( ?, ?, ? )', [$tmp_login, 'LANGUAGE', $lang] );\n  }\n  reset_language ( ! empty ( $LANGUAGE ) && $LANGUAGE != 'none'\n    ? $LANGUAGE : $browser_lang );\n\n  if ( empty ( $DATE_FORMAT ) || $DATE_FORMAT == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT = translate ( '__month__ __dd__, __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MY ) || $DATE_FORMAT_MY == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MY = translate ( '__month__ __yyyy__' );\n\n  if ( empty ( $DATE_FORMAT_MD ) || $DATE_FORMAT_MD == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_MD = translate ( '__month__ __dd__' );\n\n  if ( empty ( $DATE_FORMAT_TASK ) || $DATE_FORMAT_TASK == 'LANGUAGE_DEFINED' )\n    $DATE_FORMAT_TASK = translate ( '__mm__/__dd__/__yyyy__' );\n\n  $has_boss = user_has_boss ( $tmp_login );\n  $is_assistant = ( empty ( $user )\n    ? false : user_is_assistant ( $tmp_login, $user ) );\n  $is_nonuser_admin = ( $user\n    ? user_is_nonuser_admin ( $tmp_login, $user ) : false );\n  // if ( $is_nonuser_admin ) load_nonuser_preferences ($user);\n\n}\n\n/**\n * Returns the either the full name or the abbreviation of the specified month.\n *\n * @param int     $m       Number of the month (0-11)\n * @param string  $format  'F' = full, 'M' = abbreviation\n *\n * @return string The name of the specified month.\n */\nfunction month_name ( $m, $format = 'F' ) {\n  global $lang;\n  static $local_lang, $month_names, $monthshort_names;\n  //.\n  // We may have switched languages.\n  if ( $local_lang != $lang )\n    $month_names = $monthshort_names = [];\n\n  $local_lang = $lang;\n\n  if ( empty ( $month_names[0] ) || empty ( $monthshort_names[0] ) ) {\n    $month_names = [\n      translate ( 'January' ),\n      translate ( 'February' ),\n      translate ( 'March' ),\n      translate ( 'April' ),\n      translate ( 'May_' ), // needs to be different than \"May\",\n      translate ( 'June' ),\n      translate ( 'July' ),\n      translate ( 'August' ),\n      translate ( 'September' ),\n      translate ( 'October' ),\n      translate ( 'November' ),\n      translate ( 'December' )];\n\n    $monthshort_names = [\n      translate ( 'Jan' ),\n      translate ( 'Feb' ),\n      translate ( 'Mar' ),\n      translate ( 'Apr' ),\n      translate ( 'May' ),\n      translate ( 'Jun' ),\n      translate ( 'Jul' ),\n      translate ( 'Aug' ),\n      translate ( 'Sep' ),\n      translate ( 'Oct' ),\n      translate ( 'Nov' ),\n      translate ( 'Dec' )];\n  }\n\n  if ( $m >= 0 && $m < 12 )\n    return ( $format == 'F' ? $month_names[$m] : $monthshort_names[$m] );\n\n  return translate ( 'unknown-month' ) . \" ($m)\";\n}\n\n/**\n * Loads nonuser variables (login, firstname, etc.).\n *\n * The following variables will be set:\n * - <var>login</var>\n * - <var>firstname</var>\n * - <var>lastname</var>\n * - <var>fullname</var>\n * - <var>admin</var>\n * - <var>email</var>\n *\n * @param string $login   Login name of nonuser calendar\n * @param string $prefix  Prefix to use for variables that will be set.\n *                        For example, if prefix is \"temp_\", then the login will\n *                        be stored in the <var>$temp_login</var> global variable.\n */\nfunction nonuser_load_variables ( $login, $prefix ) {\n  global $error, $nuloadtmp_email;\n\n  $ret = false;\n  $rows = dbi_get_cached_rows ( 'SELECT cal_login, cal_lastname, cal_firstname,\n    cal_admin, cal_is_public, cal_url FROM webcal_nonuser_cals\n  WHERE cal_login = ?', [$login] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      $GLOBALS[$prefix . 'fullname'] = ( strlen ( $row[1] ) || strlen ( $row[2] )\n        ? \"$row[2] $row[1]\" : $row[0] );\n      $GLOBALS[$prefix . 'login'] = $row[0];\n      $GLOBALS[$prefix . 'lastname'] = $row[1];\n      $GLOBALS[$prefix . 'firstname'] = $row[2];\n      $GLOBALS[$prefix . 'fullname'] = trim($row[1] . ' ' . $row[2]);\n      $GLOBALS[$prefix . 'admin'] = $row[3];\n      $GLOBALS[$prefix . 'is_public'] = $row[4];\n      $GLOBALS[$prefix . 'url'] = $row[5];\n      $GLOBALS[$prefix . 'is_admin'] = false;\n      $GLOBALS[$prefix . 'is_nonuser'] = true;\n      // We need the email address for the admin.\n      user_load_variables ( $row[3], 'nuloadtmp_' );\n      $GLOBALS[$prefix . 'email'] = $nuloadtmp_email;\n      $ret = true;\n    }\n  }\n  return $ret;\n}\n\n/**\n * Prints dropdown HTML for categories.\n *\n * @param string $form    The page to submit data to (without .php)\n * @param string $date    Date in YYYYMMDD format\n * @param int    $cat_id  Category id that should be pre-selected\n */\nfunction print_category_menu ( $form, $date = '', $cat_id = '' ) {\n  global $categories, $login, $user, $CATEGORIES_ENABLED;\n\n  if ( empty( $CATEGORIES_ENABLED ) || $CATEGORIES_ENABLED == 'N' )\n    return false;\n\n  $catStr = translate ( 'Category' );\n  $printerStr = '';\n  $ret = '\n    <form action=\"' . $form . '.php\" method=\"get\" name=\"SelectCategory\" '\n   . 'class=\"categories\">' . ( empty ( $date ) ? '' : '\n      <input type=\"hidden\" name=\"' . ( $form != 'year' ? 'date' : 'year' )\n     . '\" value=\"' . $date . '\" />' )\n   . ( ! empty ( $user ) && $user != $login ? '\n      <input type=\"hidden\" name=\"user\" value=\"' . $user . '\" />' : '' )\n   . $catStr . ':\n      <select name=\"cat_id\" onchange=\"document.SelectCategory.submit()\">';\n\n  // 'None' and 'All' are added during load_user_categories\n  if ( is_array ( $categories ) ) {\n    foreach ( $categories as $K => $V ) {\n      if ( ( ! empty ( $user ) && strlen ( $user ) ? $user : $login ) ||\n          empty ( $categories[$K]['cat_owner'] ) ) {\n        $ret .= '\n        <option value=\"' . $K . '\"';\n        if ( $cat_id == $K ) {\n          $printerStr .= '\n    <span id=\"cat\">' . $catStr . ': ' . $categories[$K]['cat_name'] . '</span>';\n          $ret .= ' selected=\"selected\"';\n        }\n        $ret .= \">{$V['cat_name']}</option>\";\n      }\n    }\n  }\n  return $ret . '\n      </select>\n    </form>'\n  // This is used for Printer Friendly view.\n  . $printerStr;\n}\n\n/**\n * Generates HTML for checkbox form controls.\n *\n * @param array  $vals      (name, value, display, setting)\n * @param string $id        the id of the control\n * @param string $onchange  javascript function to call if needed\n *\n * @return string  HTML for the checkbox control.\n */\nfunction print_checkbox( $vals, $id = '', $onchange = '' ) {\n  global $prefarray, $s, $SCRIPT;\n  static $checked, $No, $Yes;\n\n  $setting  = ( empty( $vals[3] ) ? $vals[0] : $vals[3] );\n  $variable = $vals[0];\n\n   if( $SCRIPT == 'admin.php' ) {\n    $setting  = $s[$vals[0]];\n    $variable = 'admin_' . $vals[0];\n  }\n  \n  if( $SCRIPT == 'pref.php' ) {\n    $setting  = $prefarray[$vals[0]];\n    $variable = 'pref_' . $vals[0];\n  }\n    \n  $hidden = ( strpos( 'admin.phpref.php', $SCRIPT ) === false ? '' : '\n    <input type=\"hidden\" name=\"' . $variable . '\" value=\"N\" />' );\n\n\n  if( ! empty( $id ) && $id = 'dito' )\n    $id = $vals[0];\n\n  if( empty( $checked ) ) {\n    $checked = ' checked=\"checked\"';\n    $No  = translate( 'No' );\n    $Yes = translate( 'Yes' );\n  }\n\n  return $hidden . '\n      <label><input type=\"checkbox\" name=\"' . $variable . '\" value=\"' . $vals[1]\n   . '\" ' . ( empty( $id ) ? '' : 'id=\"' . $id . '\" ' )\n   . ( $setting == $vals[1] ? $checked : '' )\n   . ( empty( $onchange ) ? '' : ' onchange=\"' . $onchange . '()\"' )\n   . ' />&nbsp;' . $vals[2] . '</label>';\n}\n\n/**\n * Generates color input type, now supported in HTML.\n *\n * @param string $varname  the name of the variable to display\n * @param string $title    color description\n * @param string $varval   the default value to display\n * @param string $id       the id of the html element\n *\n * @return string  HTML for the color selector.\n */\nfunction print_color_input_html ($varname, $title, $varval = '', $id='', $tag='div', $class='form-inline', $onchange = '') {\n  global $SCRIPT, $s, $prefarray;\n  $id = empty($id) ? $varname : $id;\n  // TODO: Get the text input box working so users can input RGB values.\n  //$textId = $id . 'RGB';\n  //return '<div class=\"form-inline\"><input class=\"form-control\" id=\"' . $textId . '\" type=\"text\" size=\"7\" value=\"' . $varval . '\"/>' .\n  //  '<input class=\"form-control\" style=\"height: 2em; width: 4em;\" name=\"' . $varname . '\" id=\"' . $id .\n  //  '\" type=\"color\" class=\"form-control\" value=\"' . $varval . '\"' .\n  //  'onchange=\"var c = $(\\'#' . $id . '\\').val();' .\n  //  'console.log(\\'color=\\'+c); var x=$(\\'' . $textId . '\\'); console.log(\\'textId=\\'+x); x.attr(\\'value\\',c); x.trigger(\\'change\\'); console.log(\\'x.val=\\'+x.val());\"></div>';\n  $prefix = '';\n  if ( $SCRIPT == 'admin.php' ) {\n    $prefix = 'admin_';\n    $setting = $s[$varname];\n  } elseif ( $SCRIPT == 'pref.php' ) {\n    $prefix = 'pref_';\n    $setting = $prefarray[$varname];\n  } else {\n    $setting = $varval;\n  }\n\n  return '<' . $tag . ' class=\"form-inline\">' .\n  (empty($title) ? '' : ('<label class=\"' . $class . '\" for=\"' . $prefix . $varname . '\">' . $title . '</label>')) .\n    '<input class=\"form-control\" style=\"height: 2em; width: 4em;\" name=\"' . $prefix . $varname . '\" id=\"' . $prefix . $id .\n    '\" type=\"color\" value=\"' . $setting . '\"' . (empty($onchange) ? '' : ' onchange=\"' . $onchange . '()\"') .\n    '></' . $tag . '>';\n  }\n\n/**\n * Prints all the calendar entries for the specified user for the specified date.\n *\n * If we are displaying data from someone other than\n * the logged in user, then check the access permission of the entry.\n *\n * @param string $date  Date in YYYYMMDD format\n * @param string $user  Username\n * @param bool   $ssi   Is this being called from week_ssi.php?\n * @param bool   $disallowAddIcon  If true, then do not display the\n *          add icon, even if user can add events\n */\nfunction print_date_entries ( $date, $user, $ssi = false,\n  $disallowAddIcon = false ) {\n  global $cat_id, $DISPLAY_TASKS_IN_GRID, $DISPLAY_UNAPPROVED, $events,\n  $is_admin, $is_nonuser, $login, $PUBLIC_ACCESS, $PUBLIC_ACCESS_CAN_ADD,\n  $readonly, $tasks, $WEEK_START;\n  static $newEntryStr;\n\n  if ( empty ( $newEntryStr ) )\n    $newEntryStr = translate ( 'New Entry' );\n\n  $cnt = 0;\n  $get_unapproved = ( $DISPLAY_UNAPPROVED == 'Y' );\n  $moons = getMoonPhases ( substr ( $date, 0, 4 ), substr ( $date, 4, 2 ) );\n  $ret = '';\n\n  $can_add = ( $readonly == 'N' || $is_admin );\n\n  if ( $PUBLIC_ACCESS == 'Y' && $PUBLIC_ACCESS_CAN_ADD != 'Y'\n      && $login == '__public__' )\n    $can_add = false;\n\n  if ( $readonly == 'Y' )\n    $can_add = false;\n\n  if ( $is_nonuser )\n    $can_add = false;\n\n  if ( $disallowAddIcon )\n    $can_add = false;\n\n  if ( ! $ssi ) {\n  /* translate ( 'First Quarter Moon') translate ( 'Full Moon' )\n     translate ( 'Last Quarter Moon') translate ( 'New Moon' )\n   */\n    $userCatStr = ( strcmp ( $user, $login ) ? 'user=' . $user . '&amp;' : '' )\n     . ( empty ( $cat_id ) ? '' : 'cat_id=' . $cat_id . '&amp;' );\n    $tmp = ( empty( $moons[$date] ) ? '' : $moons[$date] );\n    $moon_title = ( empty ( $tmp ) ? '' : translate ( ucfirst ( $tmp )\n     . ( strpos ( 'fullnew', $tmp ) !== false ? '' : ' Quarter' ) . ' Moon' ) );\n    $ret = ( $can_add ? '\n        <a title=\"' . $newEntryStr . '\" href=\"edit_entry.php?' . $userCatStr\n       . 'date=' . $date . '\"><img src=\"images/bootstrap-icons/plus-circle.svg\" alt=\"' . $newEntryStr\n       . '\" class=\"new\" /></a>' : '' ) . '\n        <a class=\"dayofmonth\" href=\"day.php?' . $userCatStr . 'date=' . $date\n     . '\">' . substr ( $date, 6, 2 ) . '</a>' . ( empty ( $tmp )\n      ? '' : '<img src=\"images/' . $tmp . 'moon.gif\" title=\"' . $moon_title\n      . '\" alt=\"' . $moon_title . '\" />' ) . \"<br />\\n\";\n    $cnt++;\n  }\n  // Get, combime and sort the events for this date.\n  $ev = combine_and_sort_events (\n    // Get all the non-repeating events.\n    get_entries ( $date, $get_unapproved ),\n    // Get all the repeating events.\n    get_repeating_entries ( $user, $date, $get_unapproved ) );\n\n  // If wanted, get all due tasks for this date.\n  if ( ( empty ( $DISPLAY_TASKS_IN_GRID ) || $DISPLAY_TASKS_IN_GRID == 'Y' ) &&\n      ( $date >= date ( 'Ymd' ) ) )\n    $ev = combine_and_sort_events ( $ev, get_tasks ( $date, $get_unapproved ) );\n\n  for ( $i = 0, $evCnt = count ( $ev ); $i < $evCnt; $i++ ) {\n    if( $get_unapproved || $ev[$i]->getStatus() == 'A' ) {\n      $ret .= print_entry ( $ev[$i], $date );\n      $cnt++;\n    }\n  }\n  if ( $cnt == 0 )\n    $ret .= '&nbsp;'; // So the table cell has at least something.\n\n  return $ret;\n}\n\n/**\n * Prints all the calendar entries for the specified user\n * for the specified date in day-at-a-glance format.\n *\n * If we are displaying data from someone other than\n * the logged in user, then check the access permission of the entry.\n *\n * @param string $date  Date in YYYYMMDD format\n * @param string $user  Username of calendar\n */\nfunction print_day_at_a_glance ( $date, $user, $can_add = 0 ) {\n  global $CELLBG, $DISPLAY_TASKS_IN_GRID, $DISPLAY_UNAPPROVED, $first_slot,\n  $hour_arr, $last_slot, $rowspan, $rowspan_arr, $TABLEBG, $THBG, $THFG,\n  $TIME_SLOTS, $today, $TODAYCELLBG, $WORK_DAY_END_HOUR, $WORK_DAY_START_HOUR;\n\n  if ( empty ( $TIME_SLOTS ) )\n    return translate ( 'Error TIME_SLOTS undefined!' ) . \"<br />\\n\";\n\n  $get_unapproved = ( $DISPLAY_UNAPPROVED == 'Y' );\n  // Get, combine and sort the events for this date.\n  $ev = combine_and_sort_events (\n    get_entries ( $date, $get_unapproved ), // Get static non-repeating events.\n    get_repeating_entries ( $user, $date )// Get all the repeating events.\n    );\n  if ( $date >= date ( 'Ymd' ) &&\n      ( empty ( $DISPLAY_TASKS_IN_GRID ) || $DISPLAY_TASKS_IN_GRID == 'Y' ) )\n    $ev = combine_and_sort_events ( $ev,\n      get_tasks ( $date, $get_unapproved ) // Get all due tasks.\n      );\n  $hour_arr = $rowspan_arr = [];\n  $interval = 1440 / $TIME_SLOTS; // Number of minutes per slot\n\n  $first_slot = intval ( ( $WORK_DAY_START_HOUR * 60 ) / $interval );\n  $last_slot = intval ( ( $WORK_DAY_END_HOUR * 60 ) / $interval );\n\n  for ( $i = 0, $cnt = count ( $ev ); $i < $cnt; $i++ ) {\n    if( $get_unapproved || $ev[$i]->getStatus() == 'A' )\n      html_for_event_day_at_a_glance ( $ev[$i], $date );\n  }\n  $last_row = -1;\n  $ret = '';\n  $rowspan = 0;\n  // Squish events that use the same cell into the same cell.\n  // For example, an event from 8:00-9:15 and another from 9:30-9:45 both\n  // want to show up in the 8:00-9:59 cell.\n  for ( $i = ( $first_slot < 0 ? $first_slot : 0 ); $i < $TIME_SLOTS; $i++ ) {\n    if ( $rowspan > 1 ) {\n      if ( ! empty ( $hour_arr[$i] ) ) {\n        $diff_start_time = $i - $last_row;\n        if ( ! empty ( $rowspan_arr[$i] ) ) {\n          if ( $rowspan_arr[$i] > 1 &&\n            ( $rowspan_arr[$i] + ( $diff_start_time ) > $rowspan_arr[$last_row] ) )\n            $rowspan_arr[$last_row] = ( $rowspan_arr[$i] + ( $diff_start_time ) );\n\n          $rowspan += ( $rowspan_arr[$i] - 1 );\n        } else\n          $rowspan_arr[$last_row] += $rowspan_arr[$i];\n\n        // This will move entries apart that appear in one field,\n        // yet start on different hours.\n        for ( $u = $diff_start_time; $u > 0; $u-- ) {\n          $hour_arr[$last_row] .= \"<br />\\n\";\n        }\n        $hour_arr[$last_row] .= $hour_arr[$i];\n        $hour_arr[$i] = '';\n        $rowspan_arr[$i] = 0;\n      }\n      $rowspan--;\n    } else\n    if ( ! empty ( $rowspan_arr[$i] ) && $rowspan_arr[$i] > 1 ) {\n      $last_row = $i;\n      $rowspan = $rowspan_arr[$i];\n    }\n  }\n  $ret .= '\n    <table class=\"main glance\">'\n   . ( empty ( $hour_arr[9999] ) ? '' : '\n      <tr>\n        <th class=\"empty\">&nbsp;</th>\n        <td class=\"hasevents\">' . $hour_arr[9999] . '</td>\n      </tr>' );\n\n  $rowspan = 0;\n  for ( $i = $first_slot; $i <= $last_slot; $i++ ) {\n    $time_h = intval ( ( $i * $interval ) / 60 );\n    $time_m = ( $i * $interval ) % 60;\n    $ret .= '<tr><th class=\"weekday\"';\n    $ret .= '>'\n     . display_time ( ( $time_h * 100 + $time_m ) * 100 ) . '</th>';\n    if ( $rowspan > 1 ) {\n      // This might mean there's an overlap, or it could mean one event\n      // ends at 11:15 and another starts at 11:30.\n      if ( ! empty ( $hour_arr[$i] ) ) {\n        $ret .= '<td class=\"hasevents\"';\n        if ( $can_add )\n          $ret .=\n            \" ondblclick=\\\"dblclick_add('$date','$user',$time_h,$time_m)\\\"\";\n        $ret .= '>' . $hour_arr[$i] . '</td>';\n      }\n      $rowspan--;\n    } else {\n      $ret .= '\n        <td ';\n      if ( empty ( $hour_arr[$i] ) ) {\n        $ret .= ( $date == date ( 'Ymd', $today ) ? ' class=\"today\"' : '' );\n        if ( $can_add )\n          $ret .=\n            \" ondblclick=\\\"dblclick_add('$date','$user',$time_h,$time_m)\\\"\";\n        $ret .= '>&nbsp;';\n      } else {\n        $rowspan = ( empty ( $rowspan_arr[$i] ) ? '' : $rowspan_arr[$i] );\n\n        $ret .= ( $rowspan > 1 ? 'rowspan=\"' . $rowspan . '\"' : '' )\n         . 'class=\"hasevents\"';\n        if ( $can_add )\n          $ret .=\n            \" ondblclick=\\\"dblclick_add('$date','$user',$time_h,$time_m)\\\"\";\n        $ret .= '>' . $hour_arr[$i];\n      }\n      $ret .= '</td>';\n    }\n    $ret .= '\n      </tr>';\n  }\n  return $ret . '\n    </table>';\n}\n\n/**\n * Prints the HTML for one event in the month view.\n *\n * @param Event  $event  The event\n * @param string $date   The data for which we're printing (YYYYMMDD)\n *\n * @staticvar int  Used to ensure all event popups have a unique id.\n *\n * @uses build_entry_popup\n */\nfunction print_entry ( $event, $date ) {\n  global $categories, $DISPLAY_END_TIMES, $DISPLAY_LOCATION,\n  $DISPLAY_TASKS_IN_GRID, $eventinfo, $is_assistant, $is_nonuser_admin,\n  $layers, $login, $PHP_SELF, $TIME_SPACER, $user;\n\n  static $key = 0;\n  static $viewEventStr, $viewTaskStr;\n\n  if ( empty ( $viewEventStr ) ) {\n    $viewEventStr = translate ( 'View this event' );\n    $viewTaskStr = translate ( 'View this task' );\n  }\n\n  $catIcon = $in_span = $padding = $popup_timestr = $ret = $timestr = '';\n  $cal_type = $event->getCalTypeName();\n  $loginStr = $event->getLogin();\n\n  if( access_is_enabled() ) {\n    $can_access = access_user_calendar ( 'view', $loginStr, '',\n      $event->getCalType(), $event->getAccess() );\n    $time_only = access_user_calendar ( 'time', $loginStr );\n    if ( $cal_type == 'task' && $can_access == 0 )\n      return false;\n  } else {\n    $can_access = CAN_DOALL;\n    $time_only = 'N';\n  }\n\n  // No need to display if show time only and not a timed event.\n  if( $time_only == 'Y' && ! $event->Istimed() )\n    return false;\n\n  $class = ( $login != $loginStr && strlen ( $loginStr )\n    ? 'layer' : ( $event->getStatus() == 'W' ? 'unapproved' : '' ) ) . 'entry';\n\n  // If we are looking at a view, then always use \"entry\".\n  if ( strstr ( $PHP_SELF, 'view_m.php' ) ||\n      strstr ( $PHP_SELF, 'view_t.php' ) ||\n      strstr ( $PHP_SELF, 'view_v.php' ) ||\n      strstr ( $PHP_SELF, 'view_w.php' ) )\n    $class = 'entry';\n\n  if( $event->getPriority() < 4 )\n    $ret .= '<strong>';\n\n  $cloneStr = $event->getClone();\n  $id = $event->getID();\n  $linkid = 'pop' . \"$id-$key\";\n  $name = $event->getName();\n  $view_text = ( $cal_type == 'task' ? $viewTaskStr : $viewEventStr );\n\n  $key++;\n\n  // Build entry link if UAC permits viewing.\n  if ( $can_access != 0 && $time_only != 'Y' ) {\n    // Make sure clones have parents URL date.\n    $href = 'href=\"view_entry.php?id=' . $id . '&amp;date='\n     . ( $cloneStr ? $cloneStr : $date )\n     . ( strlen ( $user ) > 0\n      ? '&amp;user=' . $user\n      : ( $class == 'layerentry' ? '&amp;user=' . $loginStr : '' ) ) . '\"';\n    $title = ' title=\"' . $view_text . '\" ';\n  } else\n    $href = $title = '';\n\n  $ret .= '\n      <a ' . $title . ' class=\"' . $class . '\" id=\"' . \"$linkid\\\" $href\"\n   . '><img src=\"';\n\n  $catNum = empty($event->getCategory()) ? 0 : abs($event->getCategory());\n  $icon = \"bootstrap-icons/circle-fill.svg\";\n  if ( $catNum > 0 ) {\n    $catIcon = 'wc-icons/cat-' . $catNum . '.gif';\n    if ( ! file_exists ( $catIcon ) )\n      $catIcon = 'wc-icons/cat-' . $catNum . '.png';\n    if ( ! file_exists ( $catIcon ) )\n      $catIcon = '';\n  }\n\n  if ( empty ( $catIcon ) )\n    $ret .= 'images/' . $icon . '\" class=\"bullet\" alt=\"' . $view_text\n     . '\" width=\"5\" height=\"7\" />';\n  else {\n    // Use category icon.\n    $catAlt = ( empty ( $categories[$catNum] )\n      ? '' : translate ( 'Category' ) . ': '\n       . $categories[$catNum]['cat_name'] );\n\n    $ret .= $catIcon . '\" alt=\"' . $catAlt . '\" title=\"' . \"$catAlt\\\" />\";\n  }\n\n  if ( $login != $loginStr && strlen ( $loginStr ) ) {\n    if ( $layers ) {\n      foreach ( $layers as $layer ) {\n        if ( $layer['cal_layeruser'] == $loginStr ) {\n          $in_span = true;\n          $ret .= ( '<span style=\"color:' . $layer['cal_color'] . ';\">' );\n        }\n      }\n    }\n    // Check to see if Category Colors are set.\n  } else\n  if ( ! empty ( $categories[$catNum]['cat_color'] ) ) {\n    $cat_color = $categories[$catNum]['cat_color'];\n    if ( $cat_color != '#000000' ) {\n      $in_span = true;\n      $ret .= ( '<span style=\"color:' . $cat_color . ';\">' );\n    }\n  }\n\n  if( $event->isAllDay() )\n    $timestr = $popup_timestr = translate ( 'All day event' );\n  elseif( ! $event->isUntimed() ) {\n    $timestr = $popup_timestr = display_time( $event->getDateTime() );\n    if( $event->getDuration() > 0 )\n      $popup_timestr .= ' - ' . display_time( $event->getEndDateTime() );\n\n    if ( $DISPLAY_END_TIMES == 'Y' )\n      $timestr = $popup_timestr;\n\n    if ( $cal_type == 'event' )\n      $ret .= getShortTime ( $timestr )\n       . ( $time_only == 'Y' ? '' : $TIME_SPACER );\n  }\n  return $ret . build_entry_label ( $event, 'eventinfo-' . $linkid, $can_access,\n    $popup_timestr, $time_only )\n\n  // Added to allow a small location to be displayed if wanted.\n  . ( ! empty ( $location ) && !\n    empty ( $DISPLAY_LOCATION ) && $DISPLAY_LOCATION == 'Y'\n    ? '<br /><span class=\"location\">('\n     . htmlspecialchars ( $location ) . ')</span>' : '' )\n   . ( $in_span == true ? '</span>' : '' ) . '</a>'\n   . ( $event->getPriority() < 4 ? '</strong>' : '' ) // end font-weight span\n  . '<br />';\n}\n\n/**\n * Generate standardized error message\n *\n * @param string $error  Message to display\n * @param bool   $full   Include extra text in display\n *\n * @return string  HTML to display error.\n *\n * @uses print_error_header\n */\nfunction print_error ( $error, $full = false ) {\n  return print_error_header()\n   . ( $full ? translate ( 'The following error occurred' ) . ':' : '' ) . '\n    <blockquote>' . $error . '</blockquote>';\n}\n\n/**\n * An h2 header error message.\n */\nfunction print_error_header() {\n  return '\n    <h2>' . translate ( 'Error' ) . '</h2>';\n}\n\n/**\n * Generate standardized Not Authorized message\n *\n * @param bool $full  Include ERROR title\n *\n * @return string  HTML to display notice.\n *\n * @uses print_error_header\n */\nfunction print_not_auth ( $full = false ) {\n  $ret = ( $full ? print_error_header() : '' )\n   . '!!!' . translate ( 'You are not authorized.' ) . \"\\n\";\n  return $ret;\n}\n\n/**\n * Generates HTML for radio buttons.\n *\n * @param string  $variable the name of the variable to display\n * @param array   $vals the value and display variables\n *                if empty ( Yes/No options will be displayed )\n * @param string  $onclick  javascript function to call if needed\n * @param string  $defIdx default array index to select\n * @param string  $sep HTML value between radio options (&nbsp;,<br />)\n *\n * @return string  HTML for the radio control.\n */\nfunction print_radio ( $variable, $vals = '', $onclick = '', $defIdx = '',\n  $sep = '&nbsp;' ) {\n  global $prefarray, $s, $SCRIPT;\n  static $checked, $No, $Yes;\n\n  $ret = '';\n  $setting = $defIdx;\n  if ( empty ( $checked ) ) {\n    $checked = ' checked=\"checked\"';\n    $No = translate ( 'No' );\n    $Yes = translate ( 'Yes' );\n  }\n  if ( empty ( $vals ) )\n    $vals = ['Y' => $Yes, 'N' => $No];\n\n  if ( $SCRIPT == 'admin.php' ) {\n    if ( ! empty ( $s[$variable] ) )\n      $setting = $s[$variable];\n    $variable = 'admin_' . $variable;\n  }\n  if ( $SCRIPT == 'pref.php' ) {\n    if ( ! empty ( $prefarray[$variable] ) )\n      $setting = $prefarray[$variable];\n    $variable = 'pref_' . $variable;\n  }\n  $onclickStr = ( empty( $onclick ) ? '' : ' onclick=\"' . $onclick . '()\"' );\n  $ind = 0;\n  foreach ( $vals as $K => $V ) {\n    $margin = $ind++ == 0 ? 'ml-1' : 'ml-3';\n    $ret .= '\n      <input class=\"form-check-input m-1 ' . $margin . '\" type=\"radio\" name=\"' .\n      $variable . '\" id=\"' . $variable . '_' . $K . '\" value=\"' . $K . '\"'\n     . ( $setting == $K ? $checked : '' ) . $onclickStr . ' />' . $V;\n  }\n  return $ret;\n}\n\n/**\n * Generate standardized Success message.\n *\n * @param bool $saved\n *\n * @return string  HTML to display error.\n */\nfunction print_success ( $saved ) {\n  return ( $saved ? '\n    <script>\n<!-- <![CDATA[\n      alert ( \\'' . translate ( 'Changes successfully saved', true ) . '\\' );\n//]]> -->\n    </script>' : '' );\n}\n\n/**\n * Prints Timezone select for use on forms\n *\n * @param string  $prefix  Prefix for select control's name\n * @param string  $tz      Current timezone of logged in user\n *\n * @return string $ret  HTML for select control.\n*/\nfunction print_timezone_select_html ( $prefix, $tz ) {\n  $ret = '';\n  // We may be using php 4.x on Windows, so we can't use set_env() to\n  // adjust the user's TIMEZONE. We'll need to reply on the old fashioned\n  // way of using $tz_offset from the server's timezone.\n  $can_setTZ = ( substr ( $tz, 0, 11 ) == 'WebCalendar' ? false : true );\n  $old_TZ = getenv ( 'TZ' );\n  set_env ( 'TZ', 'America/New_York' );\n  $tmp_timezone = date ( 'T' );\n  set_env ( 'TZ', $old_TZ );\n  // Don't change this to date().\n  // if ( date ( 'T' ) == 'Ame' || ! $can_setTZ ) { //We have a problem!!\n  if ( 0 ) { // Ignore this code for now.\n    $tz_value = ( ! $can_setTZ ? substr ( $tz, 12 ) : 0 );\n    $ret = '\n        <select class=\"form-control\" name=\"' . $prefix . 'TIMEZONE\" id=\"' . $prefix . 'TIMEZONE\">';\n    $text_add = translate ( 'Add N hours to' );\n    $text_sub = translate ( 'Subtract N hours from' );\n    for ( $i = -12; $i <= 13; $i++ ) {\n      $ret .= '\n          <option value=\"WebCalendar/' . $i . '\"'\n       . ( $tz_value == $i ? ' selected=\"selected\"' : '' ) . '>' . ( $i < 0\n        ? str_replace ( 'N', - $i, $text_sub ) : ( $i == 0\n          ? translate ( 'same as' ) : str_replace ( 'N', $i, $text_add ) ) )\n       . '</option>';\n    }\n    $ret .= '\n        </select>&nbsp;' . translate ( 'server time' );\n  } else { // This installation supports TZ env.\n    // Import Timezone name. This file will not normally be available\n    // on windows platforms, so we'll just include it with WebCalendar.\n    $tz_file = 'includes/zone.tab';\n    if ( ! $fd = @fopen ( $tz_file, 'r', false ) )\n      return str_replace ( 'XXX', $tz_file,\n        translate ( 'Cannot read timezone file XXX.' ) );\n    else {\n      while ( ( $data = fgets ( $fd, 1000 ) ) !== false ) {\n        if ( ( substr ( trim ( $data ), 0, 1 ) == '#' ) || strlen ( $data ) <= 2 )\n          continue;\n        else {\n          $data = trim ( $data, strrchr ( $data, '#' ) );\n          $data = preg_split ( '/[\\s,]+/', trim ( $data ) );\n          $timezones[] = $data[2];\n        }\n      }\n      fclose ( $fd );\n    }\n    sort ( $timezones );\n    $ret = '\n        <select class=\"form-control\" name=\"' . $prefix . 'TIMEZONE\" id=\"' . $prefix . 'TIMEZONE\">';\n    for ( $i = 0, $cnt = count ( $timezones ); $i < $cnt; $i++ ) {\n      $ret .= '\n          <option value=\"' . $timezones[$i] . '\"'\n       . ( $timezones[$i] == $tz ? ' selected=\"selected\" ' : '' ) . '>'\n       . unhtmlentities ( $timezones[$i] ) . '</option>';\n    }\n    $ret .= '\n        </select>&nbsp;&nbsp;' . str_replace (' XXX ',\n         '&nbsp;' . date ( 'Z' ) / 3600 . '&nbsp;',\n         translate ( 'Your current GMT offset is XXX hours.' ) );\n  }\n  return $ret;\n}\n\n/**\n * Reads events visible to a user.\n *\n * Includes layers and possibly public access if enabled.\n * NOTE: The values for the global variables $thisyear and $thismonth\n * MUST be set!  (This will determine how far in the future to caclulate\n * repeating event dates.)\n *\n * @param string $user           Username\n * @param bool   $want_repeated  Get repeating events?\n * @param string $date_filter    SQL phrase starting with AND, to be appended to\n *                               the WHERE clause. May be empty string.\n * @param int    $cat_id         Category ID to filter on. May be empty.\n * @param bool   $is_task        Used to restrict results to events OR tasks\n *\n * @return array  Array of Events sorted by time of day.\n */\nfunction query_events ( $user, $want_repeated, $date_filter, $cat_id = '',\n  $is_task = false ) {\n  global $db_connection_info, $jumpdate, $layers, $login, $max_until,\n  $PUBLIC_ACCESS_DEFAULT_VISIBLE, $result, $thismonth, $thisyear;\n  global $OVERRIDE_PUBLIC, $OVERRIDE_PUBLIC_TEXT;\n\n  // New multiple categories requires some checking to see if this cat_id is\n  // valid for this cal_id. It could be done with nested SQL,\n  // but that may not work for all databases. This might be quicker also.\n  $catlist = $cloneRepeats = $layers_byuser = $result = [];\n\n  $sql = 'SELECT DISTINCT( cal_id ) FROM webcal_entry_categories ';\n  // None was selected...return only events without categories.\n  if ( $cat_id == -1 )\n    $rows = dbi_get_cached_rows ( $sql, [] );\n  elseif ( ! empty ( $cat_id ) ) {\n    $cat_array = explode ( ',', $cat_id );\n    $rows = dbi_get_cached_rows ( $sql . '\n  WHERE cat_id IN ( ?' . str_repeat ( ',?', count ( $cat_array ) - 1 ) . ' )', $cat_array );\n  }\n  if ( ! empty ( $cat_id ) ) {\n    // $rows = dbi_get_cached_rows ( $sql, [$cat_id] );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $catlist[$i] = $row[0];\n      }\n    }\n  }\n  $catlistcnt = count ( $catlist );\n  $query_params = [];\n  $sql = 'SELECT we.cal_name, we.cal_description, we.cal_date, we.cal_time,\n    we.cal_id, we.cal_ext_for_id, we.cal_priority, we.cal_access,\n    we.cal_duration, weu.cal_status, we.cal_create_by, weu.cal_login,\n    we.cal_type, we.cal_location, we.cal_url, we.cal_due_date, we.cal_due_time,\n    weu.cal_percent, we.cal_mod_date, we.cal_mod_time '\n   . ( $want_repeated\n    ? ', wer.cal_type, wer.cal_end, wer.cal_frequency,\n      wer.cal_days, wer.cal_bymonth, wer.cal_bymonthday,\n      wer.cal_byday, wer.cal_bysetpos, wer.cal_byweekno,\n      wer.cal_byyearday, wer.cal_wkst, wer.cal_count, wer.cal_endtime\n      FROM webcal_entry we, webcal_entry_repeats wer, webcal_entry_user weu\n      WHERE we.cal_id = wer.cal_id AND '\n    : 'FROM webcal_entry we, webcal_entry_user weu WHERE ' )\n   . 'we.cal_id = weu.cal_id AND weu.cal_status IN ( \\'A\\',\\'W\\' ) ';\n\n  if ( $catlistcnt > 0 ) {\n    $placeholders = '?' . str_repeat ( ',?', $catlistcnt - 1 );\n    for ( $p_i = 0; $p_i < $catlistcnt; $p_i++ ) {\n      $query_params[] = $catlist[$p_i];\n    }\n\n    if ( $cat_id > 0 )\n      $sql .= 'AND we.cal_id IN ( ' . $placeholders . ' ) ';\n    elseif ( $cat_id == -1 ) // Eliminate events with categories.\n      $sql .= 'AND we.cal_id NOT IN ( ' . $placeholders . ' ) ';\n  } else\n  if ( ! empty ( $cat_id ) )\n    // Force no rows to be returned. No matching entries in category.\n    $sql .= 'AND 1 = 0 ';\n\n  $sql .= 'AND we.cal_type IN ( '\n   . ( $is_task == false\n    ? '\\'E\\',\\'M\\' ) ' : '\\'N\\',\\'T\\' ) AND ( we.cal_completed IS NULL ) ' )\n   . ( strlen ( $user ) > 0 ? 'AND ( weu.cal_login = ? ' : '' );\n\n  $query_params[] = $user;\n\n  if ( $user == $login && strlen ( $user ) > 0 && $layers ) {\n    foreach ( $layers as $layer ) {\n      $layeruser = $layer['cal_layeruser'];\n\n      $sql .= 'OR weu.cal_login = ? ';\n      $query_params[] = $layeruser;\n\n      // While we are parsing the whole layers array, build ourselves\n      // a new array that will help when we have to check for dups.\n      $layers_byuser[$layeruser] = $layer['cal_dups'];\n    }\n  }\n\n  $rows = dbi_get_cached_rows( $sql . ( $user == $login && strlen( $user )\n    && $PUBLIC_ACCESS_DEFAULT_VISIBLE == 'Y'\n      ? 'OR weu.cal_login = \\'__public__\\' ' : '' )\n   . ( strlen( $user ) > 0 ? ') ' : '' ) . $date_filter . ' ORDER BY '\n    // Order the results by time, then name if not tasks.\n    // Must also order by cal_id, in case there are more than\n    // one event in a month with the same name and time.\n   . ( $is_task ? '' : 'we.cal_time, we.cal_name, ' )\n   . 'we.cal_id', $query_params );\n\n  if ( $rows ) {\n    $i = 0;\n    $checkdup_id = $first_i_this_id = -1;\n    for ( $ii = 0, $cnt = count ( $rows ); $ii < $cnt; $ii++ ) {\n      $row = $rows[$ii];\n      if ( $row[9] == 'D' || $row[9] == 'R' )\n        continue; // Don't show deleted/rejected ones.\n\n      // Get primary category for this event, used for icon and color.\n      $categories = get_categories_by_id ( $row[4], $user );\n      $cat_keys = array_keys ( $categories );\n      $primary_cat = ( empty ( $cat_keys[0] ) ? '' : $cat_keys[0] );\n\n      if ( $login == '__public__' && ! empty ( $OVERRIDE_PUBLIC ) &&\n        $OVERRIDE_PUBLIC == 'Y' ) {\n        $evt_name = $OVERRIDE_PUBLIC_TEXT;\n        $evt_descr = $OVERRIDE_PUBLIC_TEXT;\n      } else {\n        $evt_name = $row[0];\n        $evt_descr = $row[1];\n      }\n\n      if ( $want_repeated && ! empty ( $row[20] ) ) // row[20] = cal_type\n        $item = new RepeatingEvent( $evt_name, $evt_descr, $row[2], $row[3],\n          $row[4], $row[5], $row[6], $row[7], $row[8], $row[9], $row[10],\n          $primary_cat, $row[11], $row[12], $row[13], $row[14], $row[15],\n          $row[16], $row[17], $row[18], $row[19], $row[20], $row[21], $row[22],\n          $row[23], $row[24], $row[25], $row[26], $row[27], $row[28], $row[29],\n          $row[30], $row[31], $row[32], [], [], [] );\n      else\n        $item = new Event( $evt_name, $evt_descr, $row[2], $row[3], $row[4],\n          $row[5], $row[6], $row[7], $row[8], $row[9], $row[10], $primary_cat,\n          $row[11], $row[12], $row[13], $row[14], $row[15], $row[16], $row[17],\n          $row[18], $row[19] );\n\n      if( $item->getID() != $checkdup_id ) {\n        $checkdup_id = $item->getID();\n        $first_i_this_id = $i;\n      }\n\n      if( $item->getLogin() == $user ) {\n        // Insert this one before all others with this ID.\n        array_splice ( $result, $first_i_this_id, 0, [$item] );\n        $i++;\n\n        if ( $first_i_this_id + 1 < $i ) {\n          // There's another one with the same ID as the one we inserted.\n          // Check for dupe and if so, delete it.\n          $other_item = $result[$first_i_this_id + 1];\n          $tmp = $layers_byuser[$other_item->getLogin()];\n\n          if( empty( $tmp ) || $tmp == 'N' ) {\n            array_splice( $result, $first_i_this_id + 1, 1 );\n            $i--;\n          }\n        }\n      } else {\n        $tmp = isset($layers_byuser[$item->getLogin()]) ? $layers_byuser[$item->getLogin()] : '';\n\n        if( $i == $first_i_this_id || ( ! empty( $tmp ) && $tmp == 'Y' ) )\n          // This item is either the first one with its ID, or dupes allowed.\n          // Add it to the end of the array.\n          $result[$i++] = $item;\n      }\n      // Does event go past midnight?\n      if( date ( 'Ymd', $item->getDateTimeTS() )\n          != date( 'Ymd', $item->getEndDateTimeTS() )\n          && ! $item->isAllDay() && $item->getCalTypeName() == 'event' ) {\n        getOverLap ( $item, $i, true );\n        $i = count ( $result );\n      }\n    }\n  }\n\n  if ( $want_repeated ) {\n    // Now load event exceptions/inclusions and store as array.\n\n    // TODO:  Allow passing this max_until as param in case we create\n    // a custom report that shows N years of events.\n    if ( empty ( $max_until ) )\n      $max_until = mktime ( 0, 0, 0, $thismonth + 2, 1, $thisyear );\n\n    for ( $i = 0, $resultcnt = count ( $result ); $i < $resultcnt; $i++ ) {\n      if( $result[$i]->getID() != '' ) {\n        $rows = dbi_get_cached_rows ( 'SELECT cal_date, cal_exdate\n          FROM webcal_entry_repeats_not\n  WHERE cal_id = ?', [$result[$i]->getID()] );\n        for ( $ii = 0, $rowcnt = count ( $rows ); $ii < $rowcnt; $ii++ ) {\n          $row = $rows[$ii];\n          // If this is not a clone, add exception date.\n          if( ! $result[$i]->getClone() )\n            $except_date = $row[0];\n\n          if ( $row[1] == 1 )\n            $result[$i]->addRepeatException( $except_date, $result[$i]->getID() );\n          else\n            $result[$i]->addRepeatInclusion ( $except_date );\n        }\n        // Get all dates for this event.\n        // If clone, we'll get the dates from parent later.\n        if( ! $result[$i]->getClone() ) {\n          $until = ( $result[$i]->getRepeatEndDateTimeTS()\n            ? $result[$i]->getRepeatEndDateTimeTS()\n            : // Make sure all January dates will appear in small calendars.\n            $max_until );\n\n          // Try to minimize the repeat search by shortening\n          // until if BySetPos is not used.\n          if( ! $result[$i]->getRepeatBySetPos() && $until > $max_until )\n            $until = $max_until;\n\n          $rpt_count = 999; //Some BIG number.\n          // End date... for year view and some reports we need whole year...\n          // So, let's do up to 365 days after current month.\n          // TODO:  Add this end time as a parameter in case someone creates\n          // a custom report that asks for N years of events.\n          // $jump = mktime ( 0, 0, 0, $thismonth -1, 1, $thisyear);\n          if( $result[$i]->getRepeatCount() )\n            $rpt_count = $result[$i]->getRepeatCount();\n\n          $date = $result[$i]->getDateTimeTS();\n          if( $result[$i]->isAllDay() || $result[$i]->isUntimed() )\n            $date += 43200; //A simple hack to prevent DST problems.\n\n          // TODO get this to work\n          // C heck if this event id has been cached.\n          // $file = '';\n          // if ( ! empty( $db_connection_info['cachedir'] ) ) {\n          // $hash = md5( $result[$i]->getId() . $until . $jump );\n          // $file = $db_connection_info['cachedir'] . '/' . $hash . '.dat';\n          // }\n          // if ( file_exists ( $file ) ) {\n          // $dates = unserialize( file_get_contents( $file ) );\n          // } else {\n          $dates = get_all_dates(\n            $date,\n            $result[$i]->getRepeatType(),\n            $result[$i]->getRepeatFrequency(),\n            $result[$i]->getRepeatByMonth(),\n            $result[$i]->getRepeatByWeekNo(),\n            $result[$i]->getRepeatByYearDay(),\n            $result[$i]->getRepeatByMonthDay(),\n            $result[$i]->getRepeatByDay(),\n            $result[$i]->getRepeatBySetPos(),\n            $rpt_count,\n            $until,\n            $result[$i]->getRepeatWkst(),\n            $result[$i]->getRepeatExceptions(),\n            $result[$i]->getRepeatInclusions(),\n            $jumpdate );\n          $result[$i]->addRepeatAllDates( $dates );\n          // Serialize and save in cache for later use.\n          // if ( ! empty ( $db_connection_info['cachedir'] ) ) {\n          // $fd = @fopen ( $file, 'w+b', false );\n          // if ( empty ( $fd ) ) {\n          // dbi_fatal_error ( \"Cache error: could not write file $file\" );\n          // }\n          // fwrite ( $fd, serialize ( $dates ) );\n          // fclose ( $fd );\n          // chmod ( $file, 0666 );\n          // }\n          // }\n        } else { // Process clones if any.\n          if( count( $result[$i-1]->getRepeatAllDates() ) > 0 ) {\n            $parentRepeats = $result[$i-1]->getRepeatAllDates();\n            $cloneRepeats = [];\n            for( $j = 0, $parentRepeatscnt = count( $parentRepeats );\n                $j < $parentRepeatscnt; $j++ ) {\n              $cloneRepeats[] = gmdate( 'Ymd',\n                date_to_epoch( $parentRepeats[$j] ) + 86400 );\n            }\n            $result[$i]->addRepeatAllDates( $cloneRepeats );\n          }\n        }\n      }\n    }\n  }\n  return $result;\n}\n\n/**\n * Reads all the events for a user for the specified range of dates.\n *\n * This is only called once per page request to improve performance. All the\n * events get loaded into the array <var>$events</var> sorted by time of day\n * (not date).\n *\n * @param string $user       Username\n * @param string $startdate  Start date range, inclusive (in timestamp format)\n *                           in user's timezone\n * @param string $enddate    End date range, inclusive (in timestamp format)\n *                           in user's timezone\n * @param int    $cat_id     Category ID to filter on\n *\n * @return array  Array of Events\n *\n * @uses query_events\n */\nfunction read_events ( $user, $startdate, $enddate, $cat_id = '' ) {\n  global $login;\n\n  // Shift date/times to UTC.\n  $start_date = gmdate ( 'Ymd', $startdate );\n  $end_date = gmdate ( 'Ymd', $enddate );\n  return query_events( $user, false, 'AND ( ( we.cal_date >= ' . $start_date\n     . ' AND we.cal_date <= ' . $end_date\n     . ' AND we.cal_time = -1 ) OR ( we.cal_date > ' . $start_date\n     . ' AND we.cal_date < ' . $end_date . ' ) OR ( we.cal_date = ' . $start_date\n     . ' AND we.cal_time >= ' . gmdate ( 'His', $startdate )\n     . ' ) OR ( we.cal_date = ' . $end_date . ' AND we.cal_time <= '\n     . gmdate ( 'His', $enddate ) . ' ) )', $cat_id );\n}\n\n/**\n * Reads all the repeated events for a user.\n *\n * This is only called once per page request to improve performance.\n * All the events get loaded into the array <var>$repeated_events</var>\n * sorted by time of day (not date).\n *\n * This will load all the repeated events into memory.\n *\n * <b>Notes:</b>\n * - To get which events repeat on a specific date, use\n *   {@link get_repeating_entries()}.\n * - To get all the dates that one specific event repeats on, call\n *   {@link get_all_dates()}.\n *\n * @param string $user    Username\n * @param int    $cat_id  Category ID to filter on  (May be empty)\n * @param int $date       Cutoff date for repeating event cal_end in timestamp\n *                        format (may be empty)\n *\n * @return array  Array of RepeatingEvents sorted by time of day.\n *\n * @uses query_events\n */\nfunction read_repeated_events ( $user, $date = '', $enddate = '', $cat_id = '' ) {\n  global $jumpdate, $login, $max_until;\n\n  // This date should help speed up things\n  // by eliminating events that won't display anyway.\n  $jumpdate = $date;\n  $max_until = $enddate + 86400;\n  if ( $date != '' )\n    $date = gmdate ( 'Ymd', $date );\n\n  return query_events ( $user, true, ( $date != ''\n      ? 'AND ( wer.cal_end >= ' . $date . ' OR wer.cal_end IS NULL )' : '' ),\n    $cat_id );\n}\n\n/**\n * Reads all the tasks for a user with due date within the specified date range.\n *\n * This is only called once per page request to improve performance.\n * All the tasks get loaded into the array <var>$tasks</var> sorted by\n * time of day (not date).\n *\n * @param string $user      Username\n * @param string $duedate   End date range, inclusive (in timestamp format)\n *                          in user's timezone\n * @param int    $cat_id    Category ID to filter on\n *\n * @return array  Array of Tasks\n *\n * @uses query_events\n */\nfunction read_tasks ( $user, $duedate, $cat_id = '' ) {\n  $due_date = gmdate ( 'Ymd', $duedate );\n  return query_events( $user, false, 'AND ( ( we.cal_due_date <= ' . $due_date\n     . ' ) OR ( we.cal_due_date = ' . $due_date . ' AND we.cal_due_time <= '\n     . gmdate ( 'His', $duedate ) . ' ) )', $cat_id, true );\n}\n\n/**\n * Generates a cookie that saves the last calendar view.\n *\n * Cookie is based on the current <var>$REQUEST_URI</var>.\n *\n * We save this cookie so we can return to this same page after a user\n * edits/deletes/etc an event.\n *\n * @param bool $view  Determine if we are using a view_x.php file\n *\n * @global string  Request string\n */\nfunction remember_this_view ( $view = false ) {\n  global $REQUEST_URI;\n  if ( empty ( $REQUEST_URI ) )\n    $REQUEST_URI = $_SERVER['REQUEST_URI'];\n\n  // If called from init, only process script named \"view_x.php.\n  if ( $view == true && ! strstr ( $REQUEST_URI, 'view_' ) )\n    return;\n\n  // Do not use anything with \"friendly\" in the URI.\n  if ( strstr ( $REQUEST_URI, 'friendly=' ) )\n    return;\n\n  sendCookie ( 'webcalendar_last_view', $REQUEST_URI );\n\n}\n\n/**\n * This just sends the DOCTYPE used in a lot of places in the code.\n *\n * @param string  lang\n */\nfunction send_doctype ( $doc_title = '' ) {\n  global $charset, $lang, $LANGUAGE;\n\n  $lang = ( empty ( $LANGUAGE ) ? '' : languageToAbbrev ( $LANGUAGE ) );\n  if ( empty ( $lang ) )\n    $lang = 'en';\n\n  $charset = ( empty ( $LANGUAGE ) ? 'iso-8859-1' : translate ( 'charset' ) );\n\n  return '<!DOCTYPE html><html><head>' .\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . $charset .\n    '\" />' . ( empty ( $doc_title ) ? '' : '<title>' . $doc_title . '</title>' );\n}\n\n/**\n * Sends an HTTP login request to the browser and stops execution.\n *\n * @global string  name of language file\n * @global string  Application Name\n *\n */\nfunction send_http_login() {\n  global $lang_file;\n\n  if ( strlen ( $lang_file ) ) {\n    $not_authorized = print_not_auth();\n    $title = translate ( 'Title' );\n    $unauthorized = translate ( 'Unauthorized' );\n  } else {\n    $not_authorized = 'You are not authorized';\n    $title = 'WebCalendar';\n    $unauthorized = 'Unauthorized';\n  }\n  header ( 'WWW-Authenticate: Basic realm=\"' . \"$title\\\"\" );\n  header ( 'HTTP/1.0 401 Unauthorized' );\n  echo send_doctype ( $unauthorized ) . '\n  </head>\n  <body>\n    <h2>' . $title . '</h2>\n    ' . $not_authorized . '\n  </body>\n</html>';\n  exit;\n}\n\n/**\n * Sends HTTP headers that tell the browser not to cache this page.\n *\n * Different browsers use different mechanisms for this,\n * so a series of HTTP header directives are sent.\n *\n * <b>Note:</b>  This function needs to be called before any HTML output is sent\n *               to the browser.\n */\nfunction send_no_cache_header() {\n  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );\n  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );\n  header ( 'Cache-Control: no-store, no-cache, must-revalidate' );\n  header ( 'Cache-Control: post-check=0, pre-check=0', false );\n  header ( 'Pragma: no-cache' );\n}\n\n/**\n * Sends a redirect to the user's preferred view.\n *\n * The user's preferred view is stored in the $STARTVIEW global variable.\n * This is loaded from the user preferences (or system settings\n * if there are no user prefererences.)\n *\n * @param string $indate  Date to pass to preferred view in YYYYMMDD format\n * @param string $args    Arguments to include in the URL (such as \"user=joe\")\n */\nfunction send_to_preferred_view ( $indate = '', $args = '' ) {\n  do_redirect ( get_preferred_view ( $indate, $args ) );\n}\n\n/**\n * Set an environment variable if system allows it.\n *\n * @param string $val      name of environment variable\n * @param string $setting  value to assign\n *\n * @return bool  true = success false = not allowed.\n */\nfunction set_env ( $val, $setting ) {\n  global $tzOffset;\n  global $tzInitSet;\n\n  // Set SERVER TIMEZONE.\n  if ( ! $tzInitSet ) {\n    if ( empty ( $GLOBALS['TIMEZONE'] ) )\n      $GLOBALS['TIMEZONE'] = $GLOBALS['SERVER_TIMEZONE'];\n    if ( function_exists ( \"date_default_timezone_set\" ) )\n      date_default_timezone_set ( $GLOBALS['TIMEZONE'] );\n  }\n\n  $can_setTZ = ( substr ( $setting, 0, 11 ) == 'WebCalendar' ? false : true );\n  $ret = false;\n  // Test if safe_mode is enabled.\n  // If so, we then check safe_mode_allowed_env_vars for $val.\n  if ( ini_get ( 'safe_mode' ) ) {\n    $allowed_vars = explode ( ',', ini_get ( 'safe_mode_allowed_env_vars' ) );\n    if ( in_array ( $val, $allowed_vars ) )\n      $ret = true;\n  } else\n    $ret = true;\n\n  // We can't set TZ env on php 4.0 windows,\n  // so the setting should already contain 'WebCalendar/xx'.\n  if ( $ret == true && $can_setTZ )\n    putenv ( $val . '=' . $setting );\n\n  if ( $val == 'TZ' ) {\n    $tzOffset = ( ! $can_setTZ ? substr ( $setting, 12 ) * 3600 : 0 );\n    // Some say this is required to properly init timezone changes.\n    mktime ( 0, 0, 0, 1, 1, 1970 );\n  }\n\n  return $ret;\n}\n\n/**\n * Determines what the day is and sets it globally.\n * All times are in the user's timezone\n *\n * The following global variables will be set:\n * - <var>$thisyear</var>\n * - <var>$thismonth</var>\n * - <var>$thisday</var>\n * - <var>$thisdate</var>\n * - <var>$today</var>\n *\n * @param string $date  The date in YYYYMMDD format\n */\nfunction set_today ( $date = '' ) {\n  global $day, $month, $thisdate, $thisday, $thismonth, $thisyear, $today, $year;\n\n  $today = time();\n\n  if ( empty ( $date ) ) {\n    $thisyear = ( empty ( $year ) ? date ( 'Y', $today ) : $year );\n    $thismonth = ( empty ( $month ) ? date ( 'm', $today ) : $month );\n    $thisday = ( empty ( $day ) ? date ( 'd', $today ) : $day );\n  } else {\n    $thisyear = substr ( $date, 0, 4 );\n    $thismonth = substr ( $date, 4, 2 );\n    $thisday = substr ( $date, 6, 2 );\n  }\n  $thisdate = sprintf ( \"%04d%02d%02d\", $thisyear, $thismonth, $thisday );\n}\n\n/**\n * Sorts the combined event arrays by timestamp then name.\n *\n * <b>Note:</b> This is a user-defined comparison function for usort().\n *\n * @params passed automatically by usort, don't pass them in your call\n */\nfunction sort_events ( $a, $b ) {\n  // Handle untimed events first.\n  if( $a->isUntimed() && $b->isUntimed() )\n    return strnatcmp( $a->getName(), $b->getName() );\n  else if( $a->isUntimed() || $b->isUntimed() )\n    return strnatcmp( $b->isUntimed(), $a->isUntimed() );\n\n  $retval = strnatcmp (\n    display_time( '', 0, $a->getDateTimeTS(), 24 ),\n    display_time( '', 0, $b->getDateTimeTS(), 24 ) );\n\n  return ( $retval ? $retval : strnatcmp( $a->getName(), $b->getName() ) );\n}\n\n/**\n * Sorts the combined event arrays by timestamp then name (case insensitive).\n *\n * <b>Note:</b> This is a user-defined comparison function for usort().\n *\n * @params passed automatically by usort, don't pass them in your call.\n */\nfunction sort_events_insensitive ( $a, $b ) {\n  $retval = strnatcmp (\n    display_time( '', 0, $a->getDateTimeTS(), 24 ),\n    display_time( '', 0, $b->getDateTimeTS(), 24 ) );\n\n  return ( $retval\n    ? $retval\n    : strnatcmp( strtolower( $a->getName() ), strtolower( $b->getName() ) ) );\n}\n\n/**\n * Sort user array based on $USER_SORT_ORDER.\n * <b>Note:</b> This is a user-defined comparison function for usort()\n * that will be called from user-xxx.php.\n * @TODO:  Move to user.php along with migration to user.class.\n *\n * @params passed automatically by usort, don't pass them in your call.\n */\nfunction sort_users ( $a, $b ) {\n  global $USER_SORT_ORDER;\n\n  $first = strnatcmp ( strtolower ( $a['cal_firstname'] ),\n    strtolower ( $b['cal_firstname'] ) );\n  $last = strnatcmp ( strtolower ( $a['cal_lastname'] ),\n    strtolower ( $b['cal_lastname'] ) );\n\n  return ( ( empty ( $USER_SORT_ORDER )\n      ? 'cal_lastname, cal_firstname,'\n      : \"$USER_SORT_ORDER,\" ) == 'cal_lastname, cal_firstname,'\n    ? ( empty ( $last ) ? $first : $last )\n    : ( empty ( $first ) ? $last : $first ) );\n}\n\n/**\n * Converts a time format HHMMSS (like 130000 for 1PM)\n * into number of minutes past midnight.\n *\n * @param string $time  Input time in HHMMSS format\n *\n * @return int  The number of minutes since midnight.\n */\nfunction time_to_minutes ( $time ) {\n  return intval ( $time / 10000 ) * 60 + intval ( ( $time / 100 ) % 100 );\n}\n\n/**\n * Checks to see if two events overlap.\n *\n * @param string $time1      Time 1 in HHMMSS format\n * @param int    $duration1  Duration 1 in minutes\n * @param string $time2      Time 2 in HHMMSS format\n * @param int    $duration2  Duration 2 in minutes\n *\n * @return bool  True if the two times overlap, false if they do not.\n */\nfunction times_overlap ( $time1, $duration1, $time2, $duration2 ) {\n  $hour1 = intval ( $time1 / 10000 );\n  $min1 = ( $time1 / 100 ) % 100;\n  $hour2 = intval ( $time2 / 10000 );\n  $min2 = ( $time2 / 100 ) % 100;\n  // Convert to minutes since midnight and\n  // remove 1 minute from duration so 9AM-10AM will not conflict with 10AM-11AM.\n  if ( $duration1 > 0 )\n    $duration1 -= 1;\n\n  if ( $duration2 > 0 )\n    $duration2 -= 1;\n\n  $tmins1start = $hour1 * 60 + $min1;\n  $tmins1end = $tmins1start + $duration1;\n  $tmins2start = $hour2 * 60 + $min2;\n  $tmins2end = $tmins2start + $duration2;\n\n  return ( ( $tmins1start >= $tmins2end ) || ( $tmins2start >= $tmins1end )\n    ? false : true );\n}\n\n/**\n * Updates event status and logs activity\n *\n * @param string $status  A,D,R,W to set cal_status\n * @param string $user    user to apply changes to\n * @param int    $id      event id\n * @param string $type    event type for logging\n *\n * @global string logged in user\n * @global string current error message\n */\nfunction update_status ( $status, $user, $id, $type = 'E' ) {\n  global $error, $login;\n\n  if ( empty ( $status ) )\n    return;\n\n  $log_type = '';\n  switch ( $type ) {\n    case 'N':\n    case 'T':\n      $log_type = '_T';\n      break;\n    case 'J':\n    case 'O':\n      $log_type = '_J';\n  }\n  switch ( $status ) {\n    case 'A':\n      $log_type = constant ( 'LOG_APPROVE' . $log_type );\n      $error_msg = translate ( 'Error approving event XXX.' );\n      break;\n    case 'D':\n      $log_type = constant ( 'LOG_DELETE' . $log_type );\n      $error_msg = translate ( 'Error deleting event XXX.' );\n      break;\n    case 'R':\n      $log_type = constant ( 'LOG_REJECT' . $log_type );\n      $error_msg = translate ( 'Error rejecting event XXX.' );\n  }\n\n  if ( ! dbi_execute ( 'UPDATE webcal_entry_user SET cal_status = ?\n  WHERE cal_login = ?\n    AND cal_id = ?', [$status, $user, $id] ) )\n    $error = str_replace( 'XXX', dbi_error(), $error_msg );\n  else\n    activity_log ( $id, $login, $user, $log_type, '' );\n}\n\n/**\n * Checks the webcal_nonuser_cals table to determine if the user is the\n * administrator for the nonuser calendar.\n *\n * @param string $login    Login of user that is the potential administrator\n * @param string $nonuser  Login name for nonuser calendar\n *\n * @return bool  True if the user is the administrator for the nonuser calendar.\n */\nfunction user_is_nonuser_admin ( $login, $nonuser ) {\n  $rows = dbi_get_cached_rows ( 'SELECT cal_admin FROM webcal_nonuser_cals\n  WHERE cal_login = ?\n    AND cal_admin = ?', [$nonuser, $login] );\n  return ( $rows && ! empty ( $rows[0] ) );\n}\n\n/**\n * Determine if the specified user is a participant in the event.\n * User must have status 'A' or 'W'.\n *\n * @param int    $id    event id\n * @param string $user  user login\n */\nfunction user_is_participant ( $id, $user ) {\n  $ret = false;\n\n  $rows = dbi_get_cached_rows ( 'SELECT COUNT( cal_id ) FROM webcal_entry_user\n    WHERE cal_id = ? AND cal_login = ? AND cal_status IN ( \\'A\\',\\'W\\' )',\n    [$id, $user] );\n  if ( ! $rows )\n    die_miserable_death( str_replace( 'XXX', dbi_error(),\n        translate ( 'Database error XXX.' ) ) );\n\n  if ( ! empty ( $rows[0] ) ) {\n    $row = $rows[0];\n    if ( ! empty ( $row ) )\n      $ret = ( $row[0] > 0 );\n  }\n\n  return $ret;\n}\n\n/**\n * Checks to see if user's IP in in the IP Domain\n * specified by the /includes/blacklist.php file\n *\n * @return bool  Is user's IP in required domain?\n *\n * @see /includes/blacklist.php\n * @todo:  There has to be a way to vastly improve on this logic.\n */\nfunction validate_domain() {\n  global $SELF_REGISTRATION_BLACKLIST;\n\n  if ( empty ( $SELF_REGISTRATION_BLACKLIST ) || $SELF_REGISTRATION_BLACKLIST == 'N' )\n    return true;\n\n  $allow_true = $deny_true = [];\n  $ip_authorized = false;\n  $rmt_long = ip2long ( $_SERVER['REMOTE_ADDR'] );\n  $fd = @fopen ( 'includes/blacklist.php', 'rb', false );\n  if ( ! empty ( $fd ) ) {\n    // We don't use fgets() since it seems to have problems with Mac-formatted\n    // text files.\n    // Instead, we read in the entire file, then split the lines manually.\n    $data = '';\n    while ( ! feof ( $fd ) ) {\n      $data .= fgets ( $fd, 4096 );\n    }\n    fclose ( $fd );\n\n    // Replace any combination of carriage return (\\r) and new line (\\n)\n    // with a single new line.\n    $data = preg_replace ( \"/[\\r\\n]+/\", \"\\n\", $data );\n\n    // Split the data into lines.\n    $blacklistLines = explode ( \"\\n\", $data );\n\n    for ( $n = 0, $cnt = count ( $blacklistLines ); $n < $cnt; $n++ ) {\n      $buffer = trim ( $blacklistLines[$n], \"\\r\\n \" );\n      if ( preg_match ( '/^#/', $buffer ) )\n        continue;\n\n      if ( preg_match ( '/(\\S+):\\s*(\\S+):\\s*(\\S+)/', $buffer, $matches ) ) {\n        $permission = $matches[1];\n        $black_long = ip2long ( $matches[2] );\n        $mask = ip2long ( $matches[3] );\n        if ( $matches[2] == '255.255.255.255' )\n          $black_long = $rmt_long;\n\n        if ( ( $black_long & $mask ) == ( $rmt_long & $mask ) ) {\n          if ( $permission == 'deny' )\n            $deny_true[] = true;\n          elseif ( $permission == 'allow' )\n            $allow_true[] = true;\n        }\n      }\n    }\n    $ip_authorized = ( count ( $deny_true ) && ! count ( $allow_true )\n      ? false : true );\n  }\n\n  return $ip_authorized;\n}\n\n/**\n * Returns either the full name or the abbreviation of the day.\n *\n * @param int     $w       Number of the day in the week (0=Sun,...,6=Sat)\n * @param string  $format  'l' (lowercase L) = Full, 'D' = abbreviation.\n *\n * @return string The weekday name (\"Sunday\" or \"Sun\")\n */\nfunction weekday_name ( $w, $format = 'l' ) {\n  global $lang;\n  static $local_lang, $week_names, $weekday_names;\n\n  // We may have switched languages.\n  if ( $local_lang != $lang )\n    $week_names = $weekday_names = [];\n\n  $local_lang = $lang;\n\n  // We may pass $DISPLAY_LONG_DAYS as $format.\n  if ( $format == 'N' )\n    $format = 'D';\n\n  if ( $format == 'Y' )\n    $format = 'l';\n\n  if ( empty ( $weekday_names[0] ) || empty ( $week_names[0] ) ) {\n    $weekday_names = [\n      translate ( 'Sunday' ),\n      translate ( 'Monday' ),\n      translate ( 'Tuesday' ),\n      translate ( 'Wednesday' ),\n      translate ( 'Thursday' ),\n      translate ( 'Friday' ),\n      translate ( 'Saturday' )];\n\n    $week_names = [\n      translate ( 'Sun' ),\n      translate ( 'Mon' ),\n      translate ( 'Tue' ),\n      translate ( 'Wed' ),\n      translate ( 'Thu' ),\n      translate ( 'Fri' ),\n      translate ( 'Sat' )];\n  }\n\n  if ( $w >= 0 && $w < 7 )\n    return ( $format == 'l' ? $weekday_names[$w] : $week_names[$w] );\n\n  return translate ( 'unknown-weekday' ) . \" ($w)\";\n}\n\n/* ****************************************************************************\n *     Functions for getting information about boss and their assistants.     *\n **************************************************************************** */\n\n/**\n * Checks the boss user preferences to see if the boss must approve events\n * added to their calendar.\n *\n * @param string $assistant  Assistant login\n * @param string $boss       Boss login\n *\n * @return bool  True if the boss must approve new events.\n */\nfunction boss_must_approve_event ( $assistant, $boss ) {\n  if ( user_is_assistant ( $assistant, $boss ) )\n    return ( get_pref_setting ( $boss, 'APPROVE_ASSISTANT_EVENT' ) == 'Y'\n      ? true : false );\n\n  return true;\n}\n\n/**\n * Checks the boss user preferences to see if the boss wants to be notified via\n * email on changes to their calendar.\n *\n * @param string $assistant  Assistant login\n * @param string $boss       Boss login\n *\n * @return bool  True if the boss wants email notifications.\n */\nfunction boss_must_be_notified ( $assistant, $boss ) {\n  if ( user_is_assistant ( $assistant, $boss ) )\n    return ( get_pref_setting ( $boss, 'EMAIL_ASSISTANT_EVENTS' ) == 'Y'\n      ? true : false );\n\n  return true;\n}\n\n/**\n * Is this user an assistant of this boss?\n *\n * @param string $assistant  Login of potential assistant\n * @param string $boss       Login of potential boss\n *\n * @return bool  True or false.\n */\nfunction user_is_assistant ( $assistant, $boss ) {\n  if ( empty ( $boss ) )\n    return false;\n\n  $ret = false;\n  $rows = dbi_get_cached_rows ( 'SELECT * FROM webcal_asst\n  WHERE cal_assistant = ?\n    AND cal_boss = ?', [$assistant, $boss] );\n  if ( $rows ) {\n    $row = $rows[0];\n\n    if ( ! empty ( $row[0] ) )\n      $ret = true;\n  }\n  return $ret;\n}\n\n/**\n * Gets a list of an assistant's boss from the webcal_asst table.\n *\n * @param string $assistant Login of assistant\n *\n * @return array  Array of bosses,\n *                where each boss is an array with the following fields:\n * - <var>cal_login</var>\n * - <var>cal_fullname</var>\n */\nfunction user_get_boss_list ( $assistant ) {\n  global $bosstemp_fullname;\n\n  $count = 0;\n  $ret = [];\n  $rows = dbi_get_cached_rows ( 'SELECT cal_boss FROM webcal_asst\n  WHERE cal_assistant = ?', [$assistant] );\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      if (!user_load_variables ( $row[0], 'bosstemp_' ))\n        nonuser_load_variables($row[0], 'bosstemp_');\n      $ret[$count++] = [\n        'cal_login' => $row[0],\n        'cal_fullname' => $bosstemp_fullname];\n    }\n  }\n  return $ret;\n}\n\n/**\n * Is this user an assistant?\n *\n * @param string $assistant  Login for user\n *\n * @return bool  true if the user is an assistant to one or more bosses.\n */\nfunction user_has_boss ( $assistant ) {\n  $ret = false;\n  $rows = dbi_get_cached_rows ( 'SELECT * FROM webcal_asst\n  WHERE cal_assistant = ?', [$assistant] );\n  if ( $rows ) {\n    $row = $rows[0];\n     if ( ! empty ( $row[0] ) )\n      $ret = true;\n  }\n  return $ret;\n}\n\n/* ****************************************************************************\n *                       Functions to handle site_extras                      *\n **************************************************************************** */\n\n/**\n * Builds the HTML for the entry popup.\n *\n * @param string $popupid      CSS id to use for event popup\n * @param string $user         Username of user the event pertains to\n * @param string $description  Event description\n * @param string $time         Time of the event\n *                             (already formatted in a display format)\n * @param string $site_extras  HTML for any site_extras for this event\n *\n * @return string  The HTML for the event popup.\n */\nfunction build_entry_popup ( $popupid, $user, $description, $time,\n  $site_extras = '', $location = '', $name = '', $id = '', $reminder = '' ) {\n  global $ALLOW_HTML_DESCRIPTION, $DISABLE_POPUPS, $login,\n  $PARTICIPANTS_IN_POPUP, $popup_fullnames, $popuptemp_fullname,\n  $PUBLIC_ACCESS_VIEW_PART, $SUMMARY_LENGTH, $tempfullname;\n\n  if ( ! empty ( $DISABLE_POPUPS ) && $DISABLE_POPUPS == 'Y' )\n    return;\n\n  // Restrict info if time only set.\n  $details = true;\n  if ( function_exists ( 'access_is_enabled' ) &&\n      access_is_enabled() && $user != $login ) {\n    $time_only = access_user_calendar ( 'time', $user );\n    $details = ( $time_only == 'N' ? 1 : 0 );\n  }\n\n  $ret = '<dl id=\"' . $popupid . '\" class=\"popup\">' . \"\\n\";\n\n  if ( empty ( $popup_fullnames ) )\n    $popup_fullnames = [];\n\n  $partList = [];\n  if ( $details && $id != '' && !\n    empty ( $PARTICIPANTS_IN_POPUP ) && $PARTICIPANTS_IN_POPUP == 'Y' && !\n      ( $PUBLIC_ACCESS_VIEW_PART == 'N' && $login == '__public__' ) ) {\n    $rows = dbi_get_cached_rows ( 'SELECT cal_login, cal_status\n  FROM webcal_entry_user\n  WHERE cal_id = ?\n    AND cal_status IN ( \"A\",\"W\" )', [$id] );\n    if ( $rows ) {\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $participants[] = $row;\n      }\n    }\n    for ( $i = 0, $cnt = count ( $participants ); $i < $cnt; $i++ ) {\n      user_load_variables ( $participants[$i][0], 'temp' );\n      $partList[] = $tempfullname . ' '\n       . ( $participants[$i][1] == 'W' ? '(?)' : '' );\n    }\n    $rows = dbi_get_cached_rows ( 'SELECT cal_fullname FROM webcal_entry_ext_user\n  WHERE cal_id = ?\n  ORDER by cal_fullname', [$id] );\n    if ( $rows ) {\n      $extStr = translate ( 'External User' );\n      for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n        $row = $rows[$i];\n        $partList[] = $row[0] . ' (' . $extStr . ')';\n      }\n    }\n  }\n\n  if ( $user != $login ) {\n    if ( empty ( $popup_fullnames[$user] ) ) {\n      user_load_variables ( $user, 'popuptemp_' );\n      $popup_fullnames[$user] = $popuptemp_fullname;\n    }\n    $ret .= '<dt>' . translate ( 'User' )\n     . \":</dt>\\n<dd>$popup_fullnames[$user]</dd>\\n\";\n  }\n  $ret .= ( $SUMMARY_LENGTH < 80 && strlen ( $name ) && $details\n    ? '<dt>' . htmlspecialchars ( substr ( $name, 0, 40 ) ) . \"</dt>\\n\" : '' )\n   . ( strlen ( $time )\n    ? '<dt>' . translate ( 'Time' ) . \":</dt>\\n<dd>$time</dd>\\n\" : '' )\n   . ( ! empty ( $location ) && $details\n    ? '<dt>' . translate ( 'Location' ) . \":</dt>\\n<dd>\" . htmlspecialchars($location) . \"</dd>\\n\" : '' )\n   . ( ! empty ( $reminder ) && $details\n    ? '<dt>' . translate ( 'Send Reminder' ) . \":</dt>\\n<dd> $reminder</dd>\\n\" : '' );\n\n  if ( ! empty ( $partList ) && $details ) {\n    $ret .= '<dt>' . translate ( 'Participants' ) . \":</dt>\\n\";\n    foreach ( $partList as $parts ) {\n      $ret .= \"<dd> $parts</dd>\\n\";\n    }\n  }\n\n  if ( ! empty ( $description ) && $details ) {\n    $ret .= '<dt>' . translate ( 'Description' ) . \":</dt>\\n<dd>\";\n    if ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y' ) {\n      // Replace &s and decode special characters.\n      $str = unhtmlentities (\n        str_replace ( '&amp;amp;', '&amp;',\n          str_replace ( '&', '&amp;', $description ) ) );\n      // If there is no HTML found, then go ahead and replace\n      // the line breaks (\"\\n\") with the HTML break (\"<br />\").\n      $ret .= ( strstr ( $str, '<' ) && strstr ( $str, '>' )\n        ? $str : nl2br ( $str ) );\n    } else\n      // HTML not allowed in description, escape everything.\n      $ret .= nl2br ( htmlspecialchars ( $description ) );\n\n    $ret .= \"</dd>\\n\";\n  } //if $description\n  return $ret . ( empty ( $site_extras ) ? '' : $site_extras ) . \"</dl>\\n\";\n}\n\n/**\n * Formats site_extras for display according to their type.\n *\n * This will return an array containing formatted extras indexed on their\n * unique names. Each formatted extra is another array containing two\n * indices: 'name' and 'data', which hold the name of the site_extra and the\n * formatted data, respectively. So, to access the name and data of an extra\n * uniquely name 'Reminder', you would access\n * <var>$array['Reminder']['name']</var> and\n * <var>$array['Reminder']['data']</var>\n *\n * @param array $extras  Array of site_extras for an event as returned by\n *                       {@link get_site_extra_fields()}\n * @param int   $filter  CONSTANT 'view settings' values from site_extras.php\n *\n * @return array  Array of formatted extras.\n */\nfunction format_site_extras ( $extras, $filter = '' ) {\n  global $site_extras;\n\n  if ( empty ( $site_extras ) || empty ( $extras ) )\n    return;\n\n  $ret = [];\n  foreach ( $site_extras as $site_extra ) {\n    $data = '';\n    $extra_name = $site_extra[0];\n    $extra_desc = $site_extra[1];\n    $extra_type = $site_extra[2];\n    $extra_arg1 = $site_extra[3];\n    $extra_arg2 = $site_extra[4]; // only used in edit pages (not here)\n    if ( ! empty ( $site_extra[5] ) && ! empty ( $filter ) )\n      $extra_view = $site_extra[5] & $filter;\n    if ( ! empty ( $extras[$extra_name] ) && !\n      empty($extras[$extra_name]['cal_name']) && !empty($extra_desc)) {\n      $name = translate ( $extra_desc );\n\n      if ($extra_type == EXTRA_DATE) {\n        if ($extras[$extra_name]['cal_date'] > 0)\n          $data = date_to_str($extras[$extra_name]['cal_date']);\n      } elseif (($extra_type == EXTRA_TEXT || $extra_type == EXTRA_MULTILINETEXT)\n        && !empty($extras[$extra_name]['cal_data'])) {\n        $data = nl2br($extras[$extra_name]['cal_data']);\n      } elseif ($extra_type == EXTRA_RADIO && !empty($extra_arg1[$extras[$extra_name]['cal_data']])) {\n        $data .= $extra_arg1[$extras[$extra_name]['cal_data']];\n      } elseif (!empty($extras[$extra_name]['cal_data'])) {\n        $data .= $extras[$extra_name]['cal_data'];\n      }\n\n      $ret[$extra_name] = ['name' => $name, 'data' => $data];\n    }\n  }\n  return $ret;\n}\n\n/**\n * Gets any site-specific fields for an entry that are stored in the database\n * in the webcal_site_extras table.\n *\n * @param int $eventid  Event ID\n *\n * @return array  Array with the keys as follows:\n *   - <var>cal_name</var>\n *   - <var>cal_type</var>\n *   - <var>cal_date</var>\n *   - <var>cal_remind</var>\n *   - <var>cal_data</var>\n */\nfunction get_site_extra_fields ( $eventid ) {\n  $rows = dbi_get_cached_rows ( 'SELECT cal_name, cal_type, cal_date, cal_remind, cal_data\n  FROM webcal_site_extras\n  WHERE cal_id = ?', [$eventid] );\n  $extras = [];\n  if ( $rows ) {\n    for ( $i = 0, $cnt = count ( $rows ); $i < $cnt; $i++ ) {\n      $row = $rows[$i];\n      // Save by cal_name (e.g. \"URL\").\n      $extras[$row[0]] = [\n        'cal_name' => $row[0],\n        'cal_type' => $row[1],\n        'cal_date' => $row[2],\n        'cal_remind' => $row[3],\n        'cal_data' => $row[4]];\n    }\n  }\n  return $extras;\n}\n\n/**\n * Extract the names of all site_extras.\n *\n * @param int $filter  CONSTANT 'view setting' from site_extras.php\n *\n * @return array  Array of site_extras names.\n */\nfunction get_site_extras_names ( $filter = '' ) {\n  global $site_extras;\n\n  $ret = [];\n\n  foreach ( $site_extras as $extra ) {\n    if ( $extra == 'FIELDSET' ||\n      ( ! empty ( $extra[5] ) && ! empty ( $filter ) && !\n          ( $extra[5] & $filter ) ) )\n      continue;\n\n    $ret[] = $extra[0];\n  }\n\n  return $ret;\n}\n\n/**\n * Generates the HTML used in an event popup for the site_extras fields.\n *\n * @param int $id  Event ID\n *\n * @return string  The HTML to be used within the event popup for any site_extra\n *                 fields found for the specified event.\n */\nfunction site_extras_for_popup ( $id ) {\n  global $SITE_EXTRAS_IN_POPUP;\n\n  if ( $SITE_EXTRAS_IN_POPUP != 'Y' )\n    return '';\n\n  $extras = format_site_extras ( get_site_extra_fields ( $id ), EXTRA_DISPLAY_POPUP );\n  if ( empty ( $extras ) )\n    return '';\n\n  $ret = '';\n\n  foreach ( $extras as $extra ) {\n    $ret .= '<dt>' . $extra['name'] . \":</dt>\\n<dd>\" . $extra['data'] . \"</dd>\\n\";\n  }\n\n  return $ret;\n}\n\n// Print a box with an error message and a nice error icon.\nfunction print_error_box ( $msg )\n{\n  echo '<div class=\"warningBox\">' .\n    '<table><tr><td class=\"alignmiddle\">' .\n    '<img src=\"images/bootstrap-icons/exclamation-triangle-fill.svg\" width=\"40\" height=\"40\" class=\"alignmiddle\" alt=\"' .\n    translate ( 'Error' ) . '\" /></td><td class=\"alignmiddle\">' .\n    translate('The permissions for the icons directory are set to read-only') .\n    \"</td></tr></table></div>\\n\";\n}\n\n// Convert an HTML color ('#ff00ff') into an array of red/green/blue values\n// of 0 to 255.\nfunction html2rgb($color)\n{\n  if ($color[0] == '#')\n    $color = substr($color, 1);\n\n  if (strlen($color) == 6) {\n    list($r, $g, $b) = [$color[0].$color[1], $color[2].$color[3], $color[4].$color[5]];\n  } elseif (strlen($color) == 3) {\n    list($r, $g, $b) = [$color[0].$color[0], $color[1].$color[1], $color[2].$color[2]];\n  } else {\n    return false;\n  }\n\n  $r = hexdec($r); $g = hexdec($g); $b = hexdec($b);\n\n  return [$r, $g, $b];\n}\n\n// Convert RGB values (0-255) into HTML color ('#ffffff')\nfunction rgb2html($r, $g=-1, $b=-1)\n{\n  if (is_array($r) && sizeof($r) == 3)\n    list($r, $g, $b) = $r;\n\n  $r = intval($r); $g = intval($g);\n  $b = intval($b);\n\n  $r = dechex($r<0?0:($r>255?255:$r));\n  $g = dechex($g<0?0:($g>255?255:$g));\n  $b = dechex($b<0?0:($b>255?255:$b));\n\n  $color = (strlen($r) < 2?'0':'').$r;\n  $color .= (strlen($g) < 2?'0':'').$g;\n  $color .= (strlen($b) < 2?'0':'').$b;\n  return '#'.$color;\n}\n\n/**\n  * Is the current connection using HTTPS rather than HTTP?\n  */\nfunction isSecure() {\n  return\n    (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off')\n    || $_SERVER['SERVER_PORT'] == 443;\n}\n\nfunction sendCookie($name, $value, $expiration=0, $path='', $sensitive=true) {\n  $domain = '';\n  $httpOnly = true; // don't allow JS access to cookies.\n  // If sensitive and HTTPS is supported, set secure to true\n  $secure = $sensitive && isSecure();\n  SetCookie ( $name, $value, $expiration, $path, $domain, $secure, $httpOnly);\n}\n\n?>\n", "<?php\n/**\n* Description:\n* Presents page to view an event with links to edit, delete\n* confirm, copy, add event\n*\n* Input Parameters:\n* id (*) - cal_id of requested event\n* date   - yyyymmdd format of requested event\n* user   - user to display\n* log    - show activity log (any non-empty value)\n* (*) required field\n*/\ninclude_once 'includes/init.php';\ninclude 'includes/xcal.php'; // only to display recurrance info\n// Load Doc classes for attachments and comments\ninclude 'includes/classes/Doc.php';\ninclude 'includes/classes/DocList.php';\ninclude 'includes/classes/AttachmentList.php';\ninclude 'includes/classes/CommentList.php';\n\n// Make sure this user is allowed to look at this calendar.\n$can_approve = $can_edit = $can_view = false;\n$is_my_event = false; // Is this user owner or participant?\n$is_confidential = $is_private = $rss_view  = false;\n$error = $eType = $event_status = '';\n$log = getGetValue ( 'log' );\n$show_log = ! empty ( $log );\n$can_email = 'Y';\n\n$areYouSureStr = translate( 'Are you sure you want to delete this entry?' );\n$pri[1] = translate ( 'High' );\n$pri[2] = translate ( 'Medium' );\n$pri[3] = translate ( 'Low' );\n\nif ( empty ( $id ) || $id <= 0 || ! is_numeric ( $id ) )\n$error = translate ( 'Invalid entry id.' );\n\n$hide_details = ( $login == '__public__' && !\nempty ( $OVERRIDE_PUBLIC ) && $OVERRIDE_PUBLIC == 'Y' );\n\n\n// Check if we can display basic info for RSS FEED\n$rssuser = getGetValue ( 'rssuser' );\nif ( ! empty ( $rssuser ) ) {\n$user_rss_enabled = get_pref_setting ( $rssuser, 'USER_RSS_ENABLED' );\n$user_remote_access = get_pref_setting ( $rssuser, 'USER_REMOTE_ACCESS' );\n$user_rss_timezone = get_pref_setting ( $rssuser, 'TIMEZONE' );\n$rss_view = ( $RSS_ENABLED == 'Y' && $user_rss_enabled == 'Y' &&\n$friendly == 1 && ! empty ( $rssuser ) && isset ( $user_remote_access ) );\nif ( $rss_view == true ) {\nif ( $login == '__public__')\n$user = $rssuser;\n$hide_details = false;\n// Make sure the displayed time is accurate.\nset_env ( 'TZ', $user_rss_timezone );\n}\n}\n\n// Is this user a participant or the creator of the event?\n// If assistant is doing this, then we need to switch login to user in the sql.\n$sqlparm = ( $is_assistant ? $user : $login );\n$res = dbi_execute ( 'SELECT we.cal_id, we.cal_create_by\nFROM webcal_entry we, webcal_entry_user weu\nWHERE we.cal_id = weu.cal_id AND we.cal_id = ?\nAND ( we.cal_create_by = ? OR weu.cal_login = ? )',\n[$id, $sqlparm, $sqlparm] );\nif ( $res ) {\n$row = dbi_fetch_row ( $res );\nif ( $row && $row[0] > 0 ) {\n$can_view = $is_my_event = true;\n$creator = $row[1];\n}\ndbi_free_result ( $res );\n}\n\n// Update the task percentage for this user.\nif ( ! empty ( $_POST ) && $is_my_event ) {\n$upercent = getPostValue ( 'upercent' );\nif ( $upercent >= 0 && $upercent <= 100 ) {\ndbi_execute ( 'UPDATE webcal_entry_user SET cal_percent = ?\nWHERE cal_login = ? AND cal_id = ?',\n[$upercent, $login, $id] );\nactivity_log ( $id, $login, $creator, LOG_UPDATE_T,\ntranslate ( 'Update Task Percentage' ) . ' ' . $upercent . '%' );\n}\n// Check if all other user percent is 100%, if so, set cal_complete date.\n$others_complete = getPostValue ( 'others_complete' );\nif ( $upercent == 100 && $others_complete == 'yes' ) {\ndbi_execute ( 'UPDATE webcal_entry SET cal_completed = ?\nWHERE cal_id = ?', [gmdate ( 'Ymd', time() ), $id] );\nactivity_log ( $id, $login, $creator, LOG_UPDATE_T,\ntranslate ( 'Completed' ) );\n}\n}\n\n// Load event info now.\n$res = dbi_execute ( 'SELECT cal_create_by, cal_date, cal_time, cal_mod_date,\ncal_mod_time, cal_duration, cal_priority, cal_type, cal_access,\ncal_name, cal_description, cal_location, cal_url, cal_due_date,\ncal_due_time, cal_completed FROM webcal_entry WHERE cal_id = ?',\n[$id] );\nif ( ! $res )\n$error = str_replace ('XXX', $id, translate ( 'Invalid entry id XXX.' ) );\nelse {\n$row = dbi_fetch_row ( $res );\nif ( $row ) {\n$create_by = $row[0];\n$orig_date = $row[1];\n$event_time = $row[2];\n$mod_date = $row[3];\n$mod_time = sprintf ( \"%06d\", $row[4] );\n$duration = $row[5];\n$cal_priority = $row[6];\n$cal_type = $row[7];\n$cal_access = $row[8];\nif ( strpos ( 'NT', $cal_type ) !== false )\n$eType = 'task';\nif ( $hide_details ) {\n$description = $name = $overrideStr = translate ( $OVERRIDE_PUBLIC_TEXT );\nif ( ! empty ( $row[11] ) )\n$location = $overrideStr;\nif ( ! empty ( $row[12] ) )\n$url = $overrideStr;\n} else {\n$name = $row[9];\n$description = $row[10];\n$location = $row[11];\n$url = $row[12];\n}\n$due_date = $row[13];\n$due_time = $row[14];\n$cal_completed = $row[15];\n} else\n$error = str_replace ('XXX', $id, translate ( 'Invalid entry id XXX.' ) );\n\ndbi_free_result ( $res );\n}\n\nif ( empty ( $error ) ) {\n// don't shift date if All Day or Untimed\n$display_date = ( $event_time > 0 || ( $event_time == 0 && $duration != 1440 )\n? date ( 'Ymd', date_to_epoch ( $orig_date\n . sprintf ( \"%06d\", $event_time ) ) )\n: $orig_date );\n\nif ( ! empty ( $year ) )\n$thisyear = $year;\n\nif ( ! empty ( $month ) )\n$thismonth = $month;\n\n// Check UAC.\n$euser = ( empty ( $user ) ? ( $is_my_event ? $login : $create_by ) : $user );\n$time_only = 'N';\n\nif ( access_is_enabled() ) {\n$can_approve =\naccess_user_calendar ( 'approve', $euser, $login, $cal_type, $cal_access );\n$can_edit =\naccess_user_calendar ( 'edit', $create_by, $login, $cal_type, $cal_access );\n$can_view =\naccess_user_calendar ( 'view', $euser, $login, $cal_type, $cal_access );\n$time_only =\naccess_user_calendar ( 'time', $euser, $login, $cal_type, $cal_access );\n}\n\nif ( $is_admin || $is_nonuser_admin || $is_assistant )\n$can_view = true;\n\n// Commented out by RJ. Not sure of the reason for this code\n//   if ( ($login != '__public__') && ($PUBLIC_ACCESS_OTHERS == 'Y') ) {\n//     $can_view = true;\n//   }\n\n$can_edit = ( $can_edit || $is_admin || $is_nonuser_admin &&\n$user == $create_by ||\n( $is_assistant && ! $is_private && $user == $create_by ) ||\n( $readonly != 'Y' && ( $login == $create_by || $single_user == 'Y' ) ) );\n\nif ( $readonly == 'Y' || $is_nonuser ||\n( $PUBLIC_ACCESS == 'Y' && $login == '__public__' ) )\n$can_edit = false;\n\nif ( ! $can_view ) {\n// if not a participant in the event, must be allowed to look at\n// other user's calendar.\n$check_group = ( $login == '__public__' && $PUBLIC_ACCESS_OTHERS == 'Y' ) ||\n$ALLOW_VIEW_OTHER == 'Y';\n// If $check_group is true, it means this user can look at the event only if\n// they are in the same group as some of the people in the event. This gets\n// kind of tricky. If there is a participant from a different group, do we\n// still show it? For now, the answer is no. This could be configurable\n// somehow, but how many lines of text would it need in the admin page to\n// describe this scenario? Would confuse 99.9% of users.\n// In summary, make sure at least one event participant is in one of\n// this user's groups.\n$my_users = get_my_users();\n$my_usercnt = count ( $my_users );\nif ( is_array ( $my_users ) && $my_usercnt ) {\n$sql_params = [];\n$sql = 'SELECT we.cal_id FROM webcal_entry we, webcal_entry_user weu\nWHERE we.cal_id = weu.cal_id AND we.cal_id = ? AND weu.cal_login IN ( ';\n$sql_params[] = $id;\nfor ( $i = 0; $i < $my_usercnt; $i++ ) {\n$sql .= ( $i > 0 ? ', ' : '' ) . '?';\n$sql_params[] = $my_users[$i]['cal_login'];\n}\n$res = dbi_execute ( $sql . ' )', $sql_params );\nif ( $res ) {\n$row = dbi_fetch_row ( $res );\nif ( $row && $row[0] > 0 )\n  $can_view = true;\n\ndbi_free_result ( $res );\n}\n}\n// If we didn't indicate we need to check groups,\n// then this user can't view this event.\nif ( ! $check_group || access_is_enabled() )\n$can_view = false;\n}\n} //end $error test\n\n// If they still cannot view, make sure they are not looking at a nonuser\n// calendar event where the nonuser is the _only_ participant.\nif ( empty ( $error ) && ! $can_view && !\nempty ( $NONUSER_ENABLED ) && $NONUSER_ENABLED == 'Y' ) {\n$nonusers = get_nonuser_cals();\n$nonuser_lookup = [];\nfor ( $i = 0, $cnt = count ( $nonusers ); $i < $cnt; $i++ ) {\n$nonuser_lookup[$nonusers[$i]['cal_login']] = 1;\n}\n$res = dbi_execute ( 'SELECT cal_login FROM webcal_entry_user WHERE cal_id = ? ' .\n'AND cal_status IN (\\'A\\',\\'W\\')', [$id] );\n$found_nonuser_cal = $found_reg_user = false;\nif ( $res ) {\nwhile ( $row = dbi_fetch_row ( $res ) ) {\nif ( ! empty ( $nonuser_lookup[$row[0]] ) )\n$found_nonuser_cal = true;\nelse\n$found_reg_user = true;\n}\ndbi_free_result ( $res );\n}\n// Does this event contain only nonuser calendars as participants?\n// If so, then grant access.\nif ( $found_nonuser_cal && ! $found_reg_user && ! access_is_enabled() )\n$can_view = true;\n}\n\n// Final case. If 'public visible by default' is on and 'public' is\n// a participant to this event, then anyone can view the event.\nif ( ! $can_view && ! empty ( $PUBLIC_ACCESS_DEFAULT_VISIBLE ) &&\n$PUBLIC_ACCESS_DEFAULT_VISIBLE == 'Y' ) {\n// check to see if 'public' was a participant\n$res = dbi_execute ( 'SELECT cal_login\nFROM webcal_entry_user\nWHERE cal_id = ?\nAND cal_login = \"__public__\"\nAND cal_status IN (\\'A\\',\\'W\\')', [$id] );\nif ( $res ) {\nwhile ( $row = dbi_fetch_row ( $res ) ) {\nif ( ! empty ( $row[0] ) && $row[0] == '__public__' ) {\n// public is participant\n$can_view = true;\n}\n}\ndbi_free_result ( $res );\n}\n}\n\n$printerStr = generate_printer_friendly ( 'view_entry.php' );\n\nprint_header();\n\nif ( ! empty ( $error ) ) {\necho print_error ( $error ) . print_trailer();\nexit;\n}\n\nif ( ! empty ( $user ) && $login != $user ) {\n// If viewing another user's calendar, check the status of the\n// event on their calendar (to see if it's deleted).\n$res = dbi_execute ( 'SELECT cal_status FROM webcal_entry_user\nWHERE cal_login = ?\nAND cal_id = ?', [$user, $id] );\nif ( $res ) {\nif ( $row = dbi_fetch_row ( $res ) )\n$event_status = $row[0];\n\ndbi_free_result ( $res );\n}\n} else {\n// We are viewing event on user's own calendar, so check the\n// status on their own calendar.\n$res = dbi_execute ( 'SELECT cal_id, cal_status FROM webcal_entry_user\nWHERE cal_login = ?\nAND cal_id = ?', [$login, $id] );\nif ( $res ) {\n$row = dbi_fetch_row ( $res );\n$event_status = $row[1];\ndbi_free_result ( $res );\n}\n}\n// This section commented out by RJ\n// This code allows viewing events not otherwise authorized\n\n// At this point, if we don't have the event status, then this user is not\n// viewing an event from his own calendar and not viewing an event from someone\n// else's calendar. They probably got here from the search results page\n// (or possibly by hand typing in the URL.)\n// Check to make sure that it hasn't been deleted from everyone's calendar.\n//if ( empty ( $event_status ) ) {\n//  $res = dbi_execute ( 'SELECT cal_status FROM webcal_entry_user\n//  WHERE cal_status <> \"D\"\n//  ORDER BY cal_status', [] );\n// if ( $res ) {\n//    if ( $row = dbi_fetch_row ( $res ) )\n//      $event_status = $row[0];\n\n//    dbi_free_result ( $res );\n//  }\n//}\n\n// If we have no event status yet, it must have been deleted.\nif ( ( empty ( $event_status ) && ! $is_admin ) ||\n( ! $can_view && empty ( $rss_view ) ) ) {\necho print_not_auth ( true ) . print_trailer();\nexit;\n}\n\n// We can bypass $can_view if coming from RSS\nif ( ( ! $can_view && empty ( $rss_view ) ) ) {\necho print_not_auth ( true ) . print_trailer();\nexit;\n}\n// save date so the trailer links are for the same time period\n$thisyear = intval ( $orig_date / 10000 );\n$thismonth = ( $orig_date / 100 ) % 100;\n$thisday = $orig_date % 100;\n// $subject is used for mailto URLs.\n$subject = generate_application_name() . ': ' . $name;\n// Remove the '\"' character since it causes some mailers to barf\n$subject = str_replace ( ' \"', '', $subject );\n$subject = htmlspecialchars ( $subject );\n\n$event_repeats = false;\n// Build info string for repeating events and end date.\n$res = dbi_execute ( 'SELECT cal_type FROM webcal_entry_repeats\nWHERE cal_id = ?', [$id] );\n$rep_str = '';\nif ( $res ) {\nif ( $tmprow = dbi_fetch_row ( $res ) )\n$event_repeats = true;\n\ndbi_free_result ( $res );\n}\n/* calculate end time */\n$end_str = ( $event_time >= 0 && $duration > 0\n? '-' . display_time ( $display_date\n. add_duration ( $event_time, $duration % 1440 ), 2 )\n: '' );\n\n// get the email adress of the creator of the entry\nuser_load_variables ( $create_by, 'createby_' );\n$email_addr = empty ( $createby_email ) ? '' : $createby_email;\n\n// If Private and not this user's event or\n// Confidential and not user's and not assistant,\n// then they cannot see name or description.\n// if ( $row[8] == \"R\" && ! $is_my_event && ! $is_admin ) {\nif ( $cal_access == 'R' && ! $is_my_event && ! access_is_enabled() ) {\n$is_private = true;\n$description = $name = '[' . translate ( 'Private' ) . ']';\n} else if ( $cal_access == 'C' && ! $is_my_event && ! $is_assistant && !\naccess_is_enabled() ) {\n$is_confidential = true;\n$description = $name = '[' . translate ( 'Confidential' ) . ']';\n}\n$event_date = ( $event_repeats && ! empty ( $date ) ? $date : $orig_date );\n\n// Get category Info\nif ( $CATEGORIES_ENABLED == 'Y' ) {\n$categories = get_categories_by_id ( $id,\n( ( ! empty ( $user ) && strlen ( $user ) ) && ( $is_assistant || $is_admin )\n? $user : $login ), true );\n$category = implode ( ', ', $categories );\n}\n\n// get reminders\n$reminder = getReminders ( $id, true );\n?>\n<div class=\"row\">\n<div class=\"col\" id=\"view-event-title\"><h2>\n<?php\n\necho htmlentities($name) . ( $is_nonuser_admin ||\n( $is_admin && ! empty ( $user ) && $user == '__public__' )\n? '  ( ' . translate ( 'Admin mode' ) . ' )' : '' )\n. ( $is_assistant ? ' ( ' . translate ( 'Assistant mode' ) . ' )' : '' );\necho \"    </h2></div>\\n  </div>\\n\";\n\necho '<div class=\"row\"><div class=\"col-3\">' . translate ( 'Description' ) . \"</div>\\n\";\necho '<div class=\"col-9\">';\n\nif ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y' ) {\n$str = $description;\n// $str = str_replace ( '&', '&amp;', $description );\n$str = str_replace ( '&amp;amp;', '&amp;', $str );\n// If there is no HTML found, then go ahead and replace\n// the line breaks (\"\\n\") with the HTML break.\necho ( strstr ( $str, '<' ) && strstr ( $str, '>' )\n? $str // found some html...\n: nl2br ( activate_urls ( $str ) ) );\n} else {\necho nl2br ( activate_urls ( htmlspecialchars ( $description ) ) );\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\nif ($DISABLE_LOCATION_FIELD != 'Y' && !empty($location)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Location') . \"</div>\\n\";\necho '<div class=\"col-9\">'  . htmlentities($location) . \"</div>\\n\";\necho '<div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif (!empty($url)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('URL') . \"</div>\\n\";\necho '<div class=\"col-9\">' . activate_urls($url) . \"</div>\\n\";\necho '<div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($event_status != 'A' && !empty($event_status)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Status') . \"</div>\\n\";\necho '<div class=\"col-9\">';\nif ($event_status == 'D')\necho ($eType == 'task'\n? translate('Declined') : translate('Deleted'));\nelseif ($event_status == 'R')\necho translate('Rejected');\nelseif ($event_status == 'W')\necho ($eType == 'task'\n? translate('Needs-Action') : translate('Waiting for approval'));\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\necho '<div class=\"row\"><div class=\"col-3\">' . ($eType == 'task' ? translate('Start Date') : translate('Date')) . \"</div>\\n\";\necho '<div class=\"col-9\">' . date_to_str($display_date);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\nif ($eType == 'task') {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Start Time') . \"</div>\\n\";\necho '<div class=\"col-9\">' . display_time($display_date . sprintf(\"%06d\", $event_time), 2);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Due Date') . \"</div>\\n\";\necho '<div class=\"col-9\">' . date_to_str($due_date);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\nif (!empty($cal_completed)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Completed') . \"</div>\\n\";\necho '<div class=\"col-9\">' . date_to_str($cal_completed);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n}\n\nif ($event_repeats) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Repeat Type') . \"</div>\\n\";\necho '<div class=\"col-9\">' . export_recurrence_ical($id, true);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($eType != 'task' && $event_time >= 0) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Start Time') . \"</div>\\n\";\necho '<div class=\"col-9\">';\necho ($duration == 1440 && $event_time == 0\n? translate('All day event')\n: display_time(\n$display_date . sprintf(\"%06d\", $event_time),\n// Display TZID if no end time\n(empty($end_str) ? 2 : 0)\n)\n. $end_str);\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($duration > 0 && $duration != 1440) {\n$dur_h = intval($duration / 60);\n$dur_m = $duration - ($dur_h * 60);\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Duration') . \"</div>\\n\";\necho '<div class=\"col-9\">';\necho ($dur_h > 0 ? $dur_h . ' ' . translate('hour'\n. ($dur_h == 1 ? '' : 's')) . ' ' : '')\n. ($dur_m > 0 ? $dur_m . ' ' . translate('minutes') : '');\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ($DISABLE_PRIORITY_FIELD != 'Y') {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Priority') . \"</div>\\n\";\necho '<div class=\"col-9\">' . $cal_priority . '-' . $pri[ceil($cal_priority / 3)];\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Access') . \"</div>\\n\";\necho '<div class=\"col-9\">';\nswitch ($cal_access) {\ncase 'P':\necho translate('Public');\nbreak;\ncase 'C':\necho translate('Confidential');\nbreak;\ndefault:\necho translate('Private');\nbreak;\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\nif ($CATEGORIES_ENABLED == 'Y' && !empty($category)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Category') . \"</div>\\n\";\necho '<div class=\"col-9\">' . $category;\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n// Display who originally created event\n// useful if assistant or Admin\n$proxy_fullname = '';\nif ( ! empty ( $DISPLAY_CREATED_BYPROXY ) && $DISPLAY_CREATED_BYPROXY == 'Y' ) {\n$res = dbi_execute ( 'SELECT cal_login FROM webcal_entry_log\nWHERE webcal_entry_log.cal_entry_id = ? AND webcal_entry_log.cal_type = \\'C\\'',\n[$id] );\nif ( $res ) {\n$row3 = dbi_fetch_row ( $res );\nif ( $row3 ) {\nuser_load_variables ( $row3[0], 'proxy_' );\n$proxy_fullname = ( $createby_fullname == $proxy_fullname\n? '' : ' ( ' . translate ( 'by' ) . ' ' . $proxy_fullname . ' )' );\n}\ndbi_free_result ( $res );\n}\n}\n\nif ($single_user == 'N' && !empty($createby_fullname)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Created by') . \"</div>\\n\";\necho '<div class=\"col-9\">';\nif ($is_private && !access_is_enabled()) {\necho '[' . translate('Private') . ']';\n} else if ($is_confidential && !access_is_enabled()) {\necho '[' . translate('Confidential') . ']';\n} else {\nif (access_is_enabled()) {\n$can_email = access_user_calendar('email', $create_by);\n}\n$pubAccStr = ($row[0] == '__public__') ? translate('Public Access') : $createby_fullname;\nif (strlen($email_addr) && $can_email != 'N') {\necho '<a href=\"mailto:' . $email_addr . '?subject=' . $subject . '\">'\n. $pubAccStr . '</a>';\n} else {\necho $pubAccStr;\n}\necho $proxy_fullname;\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif (!empty($mod_date)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Updated') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n//if (!empty($GENERAL_USE_GMT) && $GENERAL_USE_GMT == 'Y') {\n//echo date_to_str($mod_date) . ' ' . display_time($mod_date . $mod_time, 3);\n//} else {\necho date_to_str(date('Ymd', date_to_epoch($mod_date . $mod_time)))\n. ' ' . display_time($mod_date . $mod_time, 2);\n//}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n// Display the reminder info if found.\nif (!empty($reminder)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Send Reminder') . \"</div>\\n\";\necho '<div class=\"col-9\">' . $reminder;\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n// load any site-specific fields and display them\n$extras = get_site_extra_fields($id);\n$site_extracnt = count($site_extras);\nfor ($i = 0; $i < $site_extracnt; $i++) {\nif ($site_extras[$i] == 'FIELDSET') continue;\n$extra_name = $site_extras[$i][0];\n$extra_type = $site_extras[$i][2];\n$extra_arg1 = $site_extras[$i][3];\n$extra_arg2 = $site_extras[$i][4];\nif (!empty($site_extras[$i][5]))\n$extra_view = $site_extras[$i][5] & EXTRA_DISPLAY_VIEW;\nif (!empty($extras[$extra_name]['cal_name'])  && !empty($extra_view)) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate($site_extras[$i][1]) . \"</div>\\n\";\necho '<div class=\"col-9\">';\nif ($extra_type == EXTRA_URL) {\n$target = (!empty($extra_arg1) ? ' target=\"' . $extra_arg1 . '\" ' : '');\necho (strlen($extras[$extra_name]['cal_data']) ? '<a href=\"'\n. $extras[$extra_name]['cal_data'] . '\"' . $target . '>'\n. $extras[$extra_name]['cal_data'] . '</a>' : '');\n} elseif ($extra_type == EXTRA_EMAIL)\necho (strlen($extras[$extra_name]['cal_data']) ? '<a href=\"mailto:'\n. $extras[$extra_name]['cal_data'] . '?subject=' . $subject . '\">'\n. $extras[$extra_name]['cal_data'] . '</a>' : '');\nelseif ($extra_type == EXTRA_DATE)\necho ($extras[$extra_name]['cal_date'] > 0\n? date_to_str($extras[$extra_name]['cal_date']) : '');\nelseif ($extra_type == EXTRA_TEXT || $extra_type == EXTRA_MULTILINETEXT)\necho nl2br($extras[$extra_name]['cal_data']);\nelseif (\n$extra_type == EXTRA_USER || $extra_type == EXTRA_SELECTLIST\n|| $extra_type == EXTRA_CHECKBOX\n)\necho $extras[$extra_name]['cal_data'];\nelseif ($extra_type == EXTRA_RADIO)\necho $extra_arg1[$extras[$extra_name]['cal_data']];\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n}\n// participants\n// Only ask for participants if we are multi-user.\n$allmails = [];\n$show_participants = ( $DISABLE_PARTICIPANTS_FIELD != 'Y' );\nif ( $is_admin )\n$show_participants = true;\n\nif ( $PUBLIC_ACCESS == 'Y' && $login == '__public__' &&\n( $PUBLIC_ACCESS_OTHERS != 'Y' || $PUBLIC_ACCESS_VIEW_PART == 'N' ) )\n$show_participants = false;\n\nif ( $single_user == 'N' && $show_participants ) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Participants') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n$num_app = $num_rej = $num_wait = 0;\nif ( $is_private && ! access_is_enabled() )\necho '[' . translate ( 'Private' ) . ']';\nelse\nif ( $is_confidential && ! access_is_enabled() )\necho '[' . translate ( 'Confidential' ) . ']';\nelse {\n$res = dbi_execute ( 'SELECT cal_login, cal_status, cal_percent\nFROM webcal_entry_user WHERE cal_id = ?'\n. ( $eType == 'task' ? ' AND cal_status IN ( \\'A\\', \\'W\\' )' : '' ),\n[$id] );\n$first = 1;\nif ( $res ) {\nwhile ( $row = dbi_fetch_row ( $res ) ) {\n$participants[] = $row;\n$pname = $row[0];\n\nif ( $row[1] == 'A' )\n  $approved[$num_app++] = $pname;\nelseif ( $row[1] == 'R' )\n  $rejected[$num_rej++] = $pname;\nelseif ( $row[1] == 'W' )\n  $waiting[$num_wait++] = $pname;\n}\ndbi_free_result ( $res );\n} else\ndb_error() . '<br />';\n}\nif ( $eType == 'task' ) {\necho '\n  <table border=\"1\" width=\"80%\" cellpadding=\"1\">\n    <th class=\"aligncenter\">' . translate ( 'Participants' ) . '</th>\n    <th class=\"aligncenter\" colspan=\"2\">'\n. translate ( 'Percentage Complete' ) . '</th>';\n$others_complete = 'yes';\nfor ( $i = 0, $cnt = count ( $participants ); $i < $cnt; $i++ ) {\nuser_load_variables ( $participants[$i][0], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\n$spacer = 100 - $participants[$i][2];\n$percentage = $participants[$i][2];\nif ( $participants[$i][0] == $login )\n$login_percentage = $participants[$i][2];\nelse\nif ( $participants[$i][2] < 100 )\n$others_complete = 'no';\n\necho '\n    <tr>\n      <td width=\"30%\">';\nif ( strlen ( $tempemail ) && $can_email != 'N' ) {\necho '<a href=\"mailto:' . $tempemail . '?subject=' . $subject\n . '\">&nbsp;' . $tempfullname . '</a>';\n$allmails[] = $tempemail;\n} else\necho '&nbsp;' . $tempfullname;\n\necho '</td>\n      <td width=\"5%\" class=\"aligncenter\">' . $percentage . '%</td>\n      <td width=\"65%\">\n\t<img src=\"images/pix.gif\" width=\"' . $percentage\n. '%\" height=\"10\">\n\t<img src=\"images/spacer.gif\" width=\"' . $spacer\n. '\" height=\"10\">\n      </td>\n    </tr>';\n}\necho '\n  </table>';\n} else {\nfor ( $i = 0; $i < $num_app; $i++ ) {\nuser_load_variables ( $approved[$i], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\necho '\n  ';\nif ( strlen ( $tempemail ) > 0 && $can_email != 'N' ) {\necho '<a href=\"mailto:' . $tempemail . '?subject=' . $subject . '\">'\n . $tempfullname . '</a>';\n$allmails[] = $tempemail;\n} else\necho $tempfullname;\n\necho '<br />';\n}\n// show external users here...\nif ( ! empty ( $ALLOW_EXTERNAL_USERS ) && $ALLOW_EXTERNAL_USERS == 'Y' ) {\n$external_users = event_get_external_users ( $id, 1 );\n$ext_users = explode ( \"\\n\", $external_users );\nif ( is_array ( $ext_users ) ) {\n$externUserStr = translate ( 'External User' );\nfor ( $i = 0, $cnt = count ( $ext_users ); $i < $cnt; $i++ ) {\n  if ( ! empty ( $ext_users[$i] ) ) {\n    echo '\n  ' . $ext_users[$i] . ' (' . $externUserStr . ')<br />';\n    if ( preg_match ( '/mailto: (\\S+)\"/', $ext_users[$i], $match ) )\n      $allmails[] = $match[1];\n  }\n}\n}\n}\nfor ( $i = 0; $i < $num_wait; $i++ ) {\nuser_load_variables ( $waiting[$i], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\necho '\n  ';\nif ( strlen ( $tempemail ) > 0 && $can_email != 'N' ) {\necho '<a href=\"mailto:' . $tempemail . '?subject=' . $subject . '\">'\n . $tempfullname . '</a>';\n$allmails[] = $tempemail;\n} else\necho $tempfullname;\n\necho ' (?)<br />';\n}\nfor ( $i = 0; $i < $num_rej; $i++ ) {\nuser_load_variables ( $rejected[$i], 'temp' );\nif ( access_is_enabled() )\n$can_email = access_user_calendar ( 'email', $templogin );\n\necho '\n  <strike>' . ( strlen ( $tempemail ) > 0 && $can_email != 'N'\n? '<a href=\"mailto:' . $tempemail . '?subject=' . $subject . '\">'\n . $tempfullname . '</a>'\n: $tempfullname ) . '</strike> (' . translate ( 'Rejected' ) . ')<br />';\n}\n}\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n} // end participants\n\n$can_edit = ( $can_edit || $is_admin || $is_nonuser_admin &&\n( $user == $create_by ) ||\n( $is_assistant && ! $is_private && ( $user == $create_by ) ) ||\n( $readonly != 'Y' && ( $login != '__public__' && $login == $create_by ||\n$single_user == 'Y' ) ) );\n\nif ( empty ( $event_status ) ) {\n// this only happens when an admin views a deleted event that he is\n// not a participant for. Set to $event_status to \"D\" just to get\n// rid of all the edit/delete links below.\n$event_status = 'D';\n}\n\nif ( $eType == 'task' ) {\n// allow user to update their task completion percentage\nif ( empty ( $user ) && $readonly != 'Y' && $is_my_event &&\n( $login != '__public__' ) && ! $is_nonuser && $event_status != 'D' ) {\necho '<div class=\"row\"><div class=\"col-3\">';\necho '<form action=\"view_entry.php?id=' . $id\n. '\" method=\"post\" name=\"setpercentage\">' . csrf_form_key() . '\n    <input type=\"hidden\" name=\"others_complete\" value=\"'\n. $others_complete . '\" />' . translate ( 'Update Task Percentage' ) . '</div>';\necho '<div class=\"col-9\"><select name=\"upercent\" id=\"task_percent\">';\nfor ( $i = 0; $i <= 100; $i += 10 ) {\necho '\n      <option value=\"' . \"$i\\\" \" . ( $login_percentage == $i\n? ' selected=\"selected\"':'' ) . ' >' . $i . '</option>';\n}\necho '\n    </select>&nbsp;\n    <input type=\"submit\" value=\"' . translate ( 'Update' ) . '\" />\n  </form>';\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n}\n\nif ( Doc::attachmentsEnabled() && $rss_view == false ) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Attachments') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n$attList = new AttachmentList( $id );\nfor ( $i = 0; $i < $attList->getSize(); $i++ ) {\n$a = $attList->getDoc ( $i );\necho \"<div class=\\\"mt-2 pb-3 p-2 eventattachment\\\">\\n\";\necho ' ' . $a->getSummary();\n\n// Dropdown menu for actions on this attachment\necho '&nbsp;<div class=\"btn-group dropleft float-right\">' . \n'<button type=\"button\" class=\"btn btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">' . \n'</button><div class=\"dropdown-menu\">';\n$url = 'doc.php?blid=' . $a->getId();\necho '<a class=\"dropdown-item\" href=\"' . $url . '\">' . translate('View') . '</a>';\n// TODO: Allow editing of an attachment\n// show delete link if user can delete\necho ( $is_admin || $login == $a->getLogin()\n|| user_is_assistant( $login, $a->getLogin() ) || $login == $create_by\n|| user_is_assistant( $login, $create_by ) )\n? '<a class=\"dropdown-item\" href=\"docdel.php?blid=' . $a->getId()\n. '&csrf_form_key=' . getFormKey()\n. '\" onclick=\"return confirm( \\'' . $areYouSureStr . '\\' );\">'\n. translate('Delete') . '</a>' : '';\necho '</div></div>' . \"\\n\";\n// Show images; limit height to 35% of viewport size.\nif ( $a->getMimeType() == 'image/jpeg' || $a->getMimeType() == 'image/png' ||\n$a->getMimeType() == 'image/gif' ) {\necho '<br><a href=\"doc.php?blid=' . $a->getId() .\n'\"><img src=\"doc.php?blid=' . $a->getId() . '\"' .\n' style=\"max-height:35vh; width: auto\" /></a>';\n}\necho \"</div>\\n\";\n}\n$num_app = $num_rej = $num_wait = 0;\n$num_attach = $attList->getSize();\n\necho ( $num_attach == 0 ? ' ' . translate ( 'None' ) . '<br />' :'' );\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\nif ( Doc::commentsEnabled() ) {\necho '<div class=\"row\"><div class=\"col-3\">' . translate('Comments') . \"</div>\\n\";\necho '<div class=\"col-9\">';\n\n$comList = new CommentList( $id );\n$num_comment = $comList->getSize();\n$comment_text = '';\nfor ( $i = 0; $i < $num_comment; $i++ ) {\n$comment_text .= \"<div class=\\\"p-2 m-2 eventcomment\\\">\\n\";\n$cmt = $comList->getDoc ( $i );\nuser_load_variables ( $cmt->getLogin(), 'cmt_' );\n$comment_text .= '\n  <strong>' . htmlspecialchars ( $cmt->getDescription() )\n. '</strong> - ' . $cmt_fullname . ' ' . translate ( 'at' ) . ' '\n. date_to_str ( $cmt->getModDate(), '', false, true ) . ' '\n. display_time ( $cmt->getModTime(), 2 );\n\n// Dropdown menu for actions on this comment\n$comment_text .= '&nbsp;<div class=\"btn-group dropleft float-right\">' . \n'<button type=\"button\" class=\"btn btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">' . \n'</button>' . \"\\n\"  . '<div class=\"dropdown-menu\">';\n// show delete link if user can delete\nif ($is_admin || $login == $cmt->getLogin()\n|| user_is_assistant($login, $cmt->getLogin()) || $login == $create_by\n|| user_is_assistant($login, $create_by)) {\n$comment_text .= '<a class=\"dropdown-item\" href=\"docdel.php?blid=' . $cmt->getId()\n. '&csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr . '\\' );\">'\n. translate('Delete') . '</a>';\n}\n$comment_text .= '</div></div><hr>' . \"\\n\";\n//$comment_text .= '<br />  <blockquote class=\"eventcomment\">';\nif ( ! empty ( $ALLOW_HTML_DESCRIPTION ) && $ALLOW_HTML_DESCRIPTION == 'Y' ) {\n$str = $cmt->getData();\n$str = str_replace ( '&amp;amp;', '&amp;', $str );\n// If there is no HTML found, then go ahead and replace\n// the line breaks (\"\\n\") with the HTML break.\n$comment_text .= ( strstr ( $str, '<' ) && strstr ( $str, '>' )\n? $str // found some html...\n: nl2br ( activate_urls ( $str ) ) );\n} else {\n$comment_text .= nl2br ( activate_urls (\nhtmlspecialchars( $cmt->getData() ) ) );\n}\n//$comment_text .= '</blockquote><div style=\"clear:both\"></div>';\n$comment_text .= \"</div>\\n\";\n}\n\nif ( $num_comment == 0 )\necho translate ( 'None' ) . '<br />';\nelse {\necho '\n  ' . $num_comment . ' ' . translate ( 'comments' ) . '\n  <input class=\"btn\" id=\"showbutton\" type=\"button\" value=\"' . translate ( 'Show' )\n. '\" onclick=\"showComments();\" />\n  <input class=\"btn\" id=\"hidebutton\" type=\"button\" value=\"' . translate ( 'Hide' )\n. '\" onclick=\"hideComments();\" /><br />\n  <div id=\"comtext\">' . $comment_text . '</div>';\n// We could put the following JS in includes/js/view_entry.php,\n// but we won't need it in many cases and we don't know whether\n// we need it until after would need to include it.\n// So, we will include it here instead.\n?>\n<script>\n<!-- <![CDATA[\nfunction showComments() {\nvar x = document.getElementById ( \"comtext\" )\nif ( x ) {\nx.style.display = \"block\";\n}\nx = document.getElementById ( \"showbutton\" )\nif ( x ) {\nx.style.display = \"none\";\n}\nx = document.getElementById ( \"hidebutton\" )\nif ( x ) {\nx.style.display = \"block\";\n}\n}\nfunction hideComments() {\nvar x = document.getElementById ( \"comtext\" )\nif ( x ) {\nx.style.display = \"none\";\n}\nx = document.getElementById ( \"showbutton\" )\nif ( x ) {\nx.style.display = \"block\";\n}\nx = document.getElementById ( \"hidebutton\" )\nif ( x ) {\nx.style.display = \"none\";\n}\n}\nhideComments();\n//]]> -->\n</script>\n<?php\n}\n\n$num_app = $num_rej = $num_wait = 0;\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n}\n\n$rdate = ( $event_repeats ? '&amp;date=' . $event_date : '' );\n\n$u_url = ( ! empty ( $user ) && $login != $user ? \"&amp;user=$user\" : '' );\n\necho \"</div>\\n\"; // End of container\n\necho '<div class=\"row\"><div class=\"col-12\">' . \"\\n\";\necho '<ul class=\"noprint list-action-options\">';\n\n// Show a printer-friendly link\nif ( empty ( $friendly ) )\n  echo $printerStr;\n\nif ( ( $is_my_event || $is_nonuser_admin || $is_assistant || $can_approve )\n    && $readonly == 'N' && $login != '__public__') {\n  if ( $event_status != 'A' ) {\n    $approveStr = translate( 'Approve/Confirm entry' );\n    echo '\n        <li><a title=\"' . $approveStr\n     . '\" class=\"nav\" href=\"approve_entry.php?id=' . $id . $u_url\n     . '&amp;type=E\" onclick=\"return confirm( \\''\n     . translate( 'Approve this entry?', true ) . '\\' );\">'\n     . $approveStr . '</a></li>';\n  }\n  if ( $event_status != 'R' ) {\n    $rejectStr = translate( 'Reject entry' );\n    echo '\n        <li><a title=\"' . $rejectStr\n     . '\" class=\"nav\" href=\"reject_entry.php?id=' . $id . $u_url\n     . '&amp;type=E\" onclick=\"return confirm( \\''\n     . translate( 'Reject this entry?', true ) . '\\' );\">'\n     . $rejectStr . '</a></li>';\n  }\n}\n\n// TODO add these permissions to the UAC list\n$can_add_attach = ( Doc::attachmentsEnabled() && $login != '__public__'\n  && ( ( $login == $create_by ) || ( $is_my_event && $ALLOW_ATTACH_PART == 'Y' ) ||\n  ( $ALLOW_ATTACH_ANY == 'Y' ) || $is_admin ) );\n\n$can_add_comment = ( Doc::commentsEnabled() && $login != '__public__'\n  && ( ( $login == $create_by ) ||  ( $is_my_event && $ALLOW_COMMENTS_PART == 'Y' ) ||\n  ( $ALLOW_COMMENTS_ANY == 'Y' ) || $is_admin ) );\n\nif ( $can_add_attach && $event_status != 'D' ) {\n  $addAttchStr = translate ( 'Add Attachment' );\n  echo '\n      <li><a title=\"' . $addAttchStr\n   . '\" class=\"nav\" href=\"docadd.php?type=A&amp;id=' . $id\n   . $u_url . '\">' . $addAttchStr\n   . '</a></li>';\n}\n\nif ( $can_add_comment && $event_status != 'D' ) {\n  $addCommentStr = translate ( 'Add Comment' );\n  echo '\n      <li><a title=\"' . $addCommentStr\n   . '\" class=\"nav\" href=\"docadd.php?type=C&amp;id=' . $id\n   . $u_url . '\">' . $addCommentStr\n   . '</a></li>';\n}\n\n// If approved, but event category not set (and user does not have permission\n// to edit where they could also set the category), then allow them to\n// set it through set_cat.php.\nif ( empty ( $user ) && $CATEGORIES_ENABLED == 'Y' && $readonly != 'Y' &&\n    $is_my_event && $login != '__public__' && !\n    $is_nonuser && $event_status != 'D' && ! $can_edit ) {\n  $setCatStr = translate ( 'Set category' );\n  echo '\n      <li><a title=\"' . $setCatStr . '\" class=\"nav\" href=\"set_entry_cat.php?id='\n   . $id . $rdate . '\">' . $setCatStr . '</a></li>';\n}\n\n$addToMineStr = translate ( 'Add to My Calendar' );\n$copyStr = translate ( 'Copy entry' );\n$deleteAllStr = translate ( 'This will delete this entry for all users.', true );\n$deleteEntryStr = translate ( 'Delete entry' );\n$editEntryStr = translate ( 'Edit entry' );\n\n//TODO Don't show if $user != $login and not assistant\n// This will be easier with UAC always on\nif ( $can_edit && $event_status != 'D' && ! $is_nonuser && $readonly != 'Y' ) {\n  if ( $event_repeats ) {\n    $editAllDatesStr = translate ( 'Edit repeating entry for all dates' );\n    $deleteAllDatesStr = translate ( 'Delete repeating event for all dates' );\n    echo '\n      <li><a title=\"' . $editAllDatesStr\n     . '\" class=\"nav\" href=\"edit_entry.php?id=' . $id . $u_url . '\">'\n     . $editAllDatesStr . '</a></li>';\n    // Don't allow override of first event\n    if ( ! empty ( $date ) && $date != $orig_date ) {\n      $editThisDateStr = translate ( 'Edit entry for this date' );\n      echo '\n      <li><a title=\"' . $editThisDateStr . '\" class=\"nav\" '\n       . 'href=\"edit_entry.php?id=' . $id . $u_url . $rdate . '&amp;override=1\">'\n       . $editThisDateStr . '</a></li>';\n    }\n    echo '\n      <li><a title=\"' . $deleteAllDatesStr\n     . '\" class=\"nav\" href=\"del_entry.php?id=' . $id . $u_url\n     . '&amp;override=1&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr . \"\\\\n\\\\n\"\n     . $deleteAllStr . '\\' );\">' . $deleteAllDatesStr . '</a></li>';\n    // Don't allow deletion of first event\n    if ( ! empty ( $date ) && $date != $orig_date ) {\n      $deleteOnlyStr = translate ( 'Delete entry only for this date' );\n      echo '\n      <li><a title=\"' . $deleteOnlyStr . '\" class=\"nav\" href=\"del_entry.php?id='\n       . $id . $u_url . $rdate . '&amp;override=1&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\''\n       . $areYouSureStr . \"\\\\n\\\\n\" . $deleteAllStr . '\\' );\">' . $deleteOnlyStr\n       . '</a></li>';\n    }\n  } else {\n    if ( ! empty( $user ) && $user != $login && ! $is_assistant ) {\n      user_load_variables( $user, 'temp_' );\n      $delete_str = str_replace( 'XXX', $temp_fullname,\n                                translate( 'Delete entry from calendar of XXX' ) );\n    } else {\n      $delete_str = $deleteEntryStr;\n    }\n    echo '\n      <li><a title=\"' . $editEntryStr . '\" class=\"nav\" href=\"edit_entry.php?id='\n     . $id . $u_url . '\">' . $editEntryStr . '</a></li>\n      <li><a title=\"' . $delete_str . '\" class=\"nav\" href=\"del_entry.php?id='\n     . $id . $u_url . $rdate . '&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr\n     . \"\\\\n\\\\n\"\n     . ( empty ( $user ) || $user == $login || $is_assistant\n      ? $deleteAllStr : '' )\n     . '\\' );\">' . $delete_str;\n    echo '</a></li>';\n  }\n  echo '\n      <li><a title=\"' . $copyStr . '\" class=\"nav\" href=\"edit_entry.php?id='\n   . $id . $u_url . '&amp;copy=1\">' . $copyStr . '</a></li>';\n} elseif ( $readonly != 'Y' &&\n  ( $is_my_event || $is_nonuser_admin || $can_edit ) &&\n    ( $login != '__public__' ) && ! $is_nonuser && $event_status != 'D' ) {\n  $delFromCalStr =\n  translate ( 'This will delete the entry from your XXX calendar.', true );\n  echo '\n      <li><a title=\"' . $deleteEntryStr . '\" class=\"nav\" href=\"del_entry.php?id='\n   . $id . $u_url . $rdate . '&amp;csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\'' . $areYouSureStr\n   . \"\\\\n\\\\n\"\n   . str_replace ( 'XXX ',\n    ( $is_assistant ? translate ( 'boss' ) . ' ' : '' ), $delFromCalStr )\n  // ( $is_assistant\n  // ? translate ( 'This will delete the entry from your boss calendar.', true )\n  // : translate ( 'This will delete the entry from your calendar.', true ) )\n  . '\\' );\">'\n   . $deleteEntryStr\n   . ( $is_assistant ? ' ' . translate ( 'from your boss calendar' ) : '' )\n   . '</a></li>\n      <li><a title=\"' . $copyStr . '\" class=\"nav\" href=\"edit_entry.php?id='\n   . $id . '&amp;copy=1\">' . $copyStr . '</a></li>';\n}\n\nif ( $readonly != 'Y' && ! $is_my_event && ! $is_private && !\n  $is_confidential && $event_status != 'D' && $login != '__public__' && !\n  $is_nonuser )\n  echo '\n      <li><a title=\"' . $addToMineStr . '\" class=\"nav\" href=\"add_entry.php?id=' .\n      $id . '&csrf_form_key=' . getFormKey() . '\" onclick=\"return confirm( \\''\n   . translate ( 'Do you want to add this entry to your calendar?', true )\n   . \"\\\\n\\\\n\" . translate ( 'This will add the entry to your calendar.', true )\n   . '\\' );\">' . $addToMineStr . '</a></li>';\n\nif ( $login != '__public__' && count ( $allmails ) > 0 ) {\n  $emailAllStr = translate ( 'Email all participants' );\n  echo '\n      <li><a title=\"' . $emailAllStr . '\" class=\"nav\" href=\"mailto:'\n   . implode ( ',', $allmails ) . '?subject=' . rawurlencode ( $subject ) . '\">'\n   . $emailAllStr . '</a></li>';\n}\n\nif ( access_can_access_function ( ACCESS_EXPORT ) &&\n    ( ( ! $is_private && ! $is_confidential ) || ! access_is_enabled() ) && !\n    $hide_details ) {\n  echo '<li><a class=\"nav\" href=\"export_handler.php?id=' . $id .\n    (!empty($user) ? '&user=' . $user : '') .\n    '&csrf_form_key=' . getFormKey() .\n    '&format=ical\">' .\n    translate ( 'Export this entry to' ) . \" iCalendar</a></li>\\n\";\n}\n\n$can_show_log = $is_admin; // default if access control is not enabled\nif ( access_is_enabled() )\n  $can_show_log = access_can_access_function ( ACCESS_ACTIVITY_LOG );\n\nif ( $can_show_log ) {\n  $hideActivityStr = translate ( 'Hide activity log' );\n  $showActivityStr = translate ( 'Show activity log' );\n  echo '<li><a title=\"'\n   . ( ! $show_log\n    ? $showActivityStr . '\" class=\"nav\" href=\"view_entry.php?id=' . $id\n     . '&amp;log=1\">' . $showActivityStr\n    : $hideActivityStr . '\" class=\"nav\" href=\"view_entry.php?id=' . $id . '\">'\n     . $hideActivityStr )\n   . '</a></li>';\n}\n\nif ( $can_show_log && $show_log ) {\n  $PAGE_SIZE = 25; // number of entries to show at once\n  echo '<div class=\"pl-3 pr-3 pt-2 pb-1\"><div class=\"p-1 border\">';\n  echo generate_activity_log ( $id );\n  echo \"</div></div>\";\n}\n\necho '</ul>';\n\necho '</div><div class=\"w-100\"></div></div>' . \"\\n\";\n\necho print_trailer ( empty ( $friendly ) );\n\n?>\n"], "filenames": ["includes/functions.php", "view_entry.php"], "buggy_code_start_loc": [6223, 422], "buggy_code_end_loc": [6224, 424], "fixing_code_start_loc": [6223, 422], "fixing_code_end_loc": [6224, 424], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository craigk5n/webcalendar prior to master.", "other": {"cve": {"id": "CVE-2023-0289", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-13T16:15:09.007", "lastModified": "2023-01-20T07:53:26.967", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository craigk5n/webcalendar prior to master."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:webcalendar_project:webcalendar:-:*:*:*:*:*:*:*", "matchCriteriaId": "4E26A0C7-0003-4F99-9E78-94289A1525D7"}]}]}], "references": [{"url": "https://github.com/craigk5n/webcalendar/commit/7906b4924c2dc3727c3540682f432ebbb93f810d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b9584c87-60e8-4a03-9e79-5f1e2d595361", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/craigk5n/webcalendar/commit/7906b4924c2dc3727c3540682f432ebbb93f810d"}}