{"buggy_code": ["<?php\n\n/**\n * Provides the JSON API for the file browser in the WYSIWYG editor.\n */\n\n$this->require_admin ();\n\n$page->layout = false;\n\nif (isset ($_POST['action'])) {\n\theader ('Content-Type: text/plain; charset=UTF-8');\n\t$_GET['action'] = $_POST['action'];\n} else {\n\theader ('Content-Type: application/json');\n\t$error = false;\n}\n\nswitch ($_GET['action']) {\n\tcase 'auth':\n\t\tif ($_GET['auth'] != 'jwysiwyg') {\n\t\t\t$error = 'Authorization failed.';\n\t\t\tbreak;\n\t\t}\n\t\t$out = array (\n\t\t\t'move' => array ('enabled' => false),\n\t\t\t'rename' => array ('enabled' => false),\n\t\t\t'remove' => array ('enabled' => false),\n\t\t\t'mkdir' => array ('enabled' => false),\n\t\t\t'upload' => array ('enabled' => true, 'handler' => '/filemanager/embed')\n\t\t);\n\t\tbreak;\n\tcase 'list':\n\t\t$ok = 0;\n\t\tif (! isset ($_GET['dir']) || $_GET['dir'] === '/') {\n\t\t\t$_GET['dir'] = '/files';\n\t\t}\n\t\tif ($_GET['dir'] === '/files') {\n\t\t\t$ok = 3;\n\t\t} else {\n\t\t\tif (strpos ($_GET['dir'], '..') === false) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t\tif (strpos ($_GET['dir'], '/files/') === 0) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t\tif (@is_dir (getcwd () . $_GET['dir'])) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t}\n\t\tif ($ok < 3) {\n\t\t\t$error = 'Invalid directory: ' . $_GET['dir'];\n\t\t\tbreak;\n\t\t}\n\t\t$out = array (\n\t\t\t'directories' => array (),\n\t\t\t'files' => array ()\n\t\t);\n\t\t$d = dir (getcwd () . $_GET['dir']);\n\t\twhile (false !== ($entry = $d->read ())) {\n\t\t\tif (strpos ($entry, '.') === 0) {\n\t\t\t\tcontinue;\n\t\t\t} elseif (@is_dir (ltrim ($_GET['dir'], '/') . '/' . $entry)) {\n\t\t\t\t$out['directories'][$entry] = rtrim ($_GET['dir'], '/') . '/' . $entry;\n\t\t\t} else {\n\t\t\t\t$out['files'][$entry] = rtrim ($_GET['dir'], '/') . '/' . $entry;\n\t\t\t}\n\t\t}\n\t\t$d->close ();\n\t\tbreak;\n\tcase 'upload':\n\t\t$ok = 0;\n\t\t\n\t\t// prevent encoded symbols bypassing checks\n\t\t$_POST['dir'] = urldecode ($_POST['dir']);\n\t\t$_POST['newName'] = urldecode ($_POST['newName']);\n\n\t\tif (! isset ($_POST['dir']) || $_POST['dir'] === '/') {\n\t\t\t$_POST['dir'] = '/files';\n\t\t}\n\n\t\tif ($_POST['dir'] === '/files') {\n\t\t\t$ok = 3;\n\t\t} else {\n\t\t\tif (strpos ($_POST['dir'], '..') === false) {\n\t\t\t\t$ok++;\n\t\t\t}\n\n\t\t\tif (strpos ($_POST['dir'], '/files/') === 0) {\n\t\t\t\t$ok++;\n\t\t\t}\n\n\t\t\tif (is_dir (getcwd () . $_POST['dir'])) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($ok < 3) {\n\t\t\techo __ ('Invalid directory');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (! isset ($_POST['newName'])) {\n\t\t\techo __ ('No name specified');\n\t\t\tbreak;\n\t\t}\n\n\t\tif (strpos ($_POST['newName'], '..') !== false || strpos ($_POST['newName'], '/') !== false) {\n\t\t\techo __ ('Invalid name');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe)$/i', $_POST['newName'])) {\n\t\t\techo __ ('Invalid file type');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$dest = ltrim ($_POST['dir'], '/') . '/' . $_POST['newName'];\n\n\t\tif (file_exists ($dest)) {\n\t\t\techo __ ('File already exists');\n\t\t\treturn;\n\t\t}\n\n\t\tif (! is_uploaded_file ($_FILES['handle']['tmp_name'])) {\n\t\t\techo __ ('File upload failed');\n\t\t\treturn;\n\t\t}\n\n\t\tif (! move_uploaded_file ($_FILES['handle']['tmp_name'], $dest)) {\n\t\t\techo __ ('File save failed');\n\t\t\treturn;\n\t\t}\n\n\t\techo 'File uploaded successfully';\n\t\treturn;\n}\n\nif ($error) {\n\techo json_encode (array (\n\t\t'success' => false,\n\t\t'error' => $error,\n\t\t'errno' => 1\n\t));\n} else {\n\techo json_encode (array (\n\t\t'success' => true,\n\t\t'data' => $out\n\t));\n}\n", "<?php\n\n/**\n * Upload handler for the wysiwyg editor.\n */\n\n$page->layout = false;\n\nif (! User::require_acl ('admin') || ! User::require_acl ('filemanager')) {\n\techo json_encode (array ('error' => __ ('Must be logged in to upload')));\n\treturn;\n}\n\n$f = new Form ('post', $this);\nif (! $f->verify_csrf ()) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Validation error')));\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! isset ($_FILES['file'])) {\n\techo json_encode (array ('error' => __ ('File upload field not set.')));\n\treturn;\n}\n\nforeach ($_FILES['file']['error'] as $error) {\n\tif ($error > 0) {\n\t\t$errors = array (\n\t\t\t1 => __ ('File size is too large.'),\n\t\t\t2 => __ ('File size is too large.'),\n\t\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t\t4 => __ ('No file was uploaded.'),\n\t\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t\t);\n\t\techo json_encode (array ('error' => $errors[$error]));\n\t\treturn;\n\t}\n}\n\n// some browsers may urlencode the file name\n$_FILES['file']['name'] = urldecode ($_FILES['file']['name']);\n\nif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {\n\techo json_encode (array ('error' => __ ('Cannot upload executable files due to security.')));\n\treturn;\n}\n\nif (file_exists ($root . $_FILES['file']['name'])) {\n\techo json_encode (array ('error' => __ ('File already exists') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\nif (strpos ($_FILES['file']['name'], '..') !== false) {\n\techo json_encode (array ('error' => __ ('Invalid file name') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\nif (@move_uploaded_file ($_FILES['file']['tmp_name'], $root . $_FILES['file']['name'])) {\n\t@chmod ($root . $_FILES['file']['name'], 0666);\n\t$this->hook ('filemanager/add', array (\n\t\t'file' => '/' . $_FILES['file']['name']\n\t));\n\techo stripslashes (\n\t\tjson_encode (\n\t\t\tarray (\n\t\t\t\t'filelink' => '/' . conf('Paths','filemanager_path') . '/' . $_FILES['file']['name'],\n\t\t\t\t'filename' => $_FILES['file']['name']\n\t\t\t)\n\t\t)\n\t);\n} else {\n\techo json_encode (array ('error' => __ ('Failed to save file') . ': ' . $_FILES['file']['name']));\n}\n", "<?php\n\n/**\n * Upload handler for the file manager.\n */\n\n$page->layout = 'admin';\n\n$this->require_acl ('admin', 'filemanager');\n\n$f = new Form ('post', $this);\nif (! $f->verify_csrf ()) {\n\t$page->title = __ ('Validation Error');\t\n\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! FileManager::verify_folder ($_POST['path'], $root)) {\n\t$page->title = __ ('Invalid Path');\n\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\treturn;\n}\n\nif (! isset ($_FILES['file'])) {\n\t$page->title = __ ('An Error Occurred');\n\techo '<p>' . __ ('No file uploaded or file too large.') . '</p>';\n\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\treturn;\n}\n\nforeach ($_FILES['file']['error'] as $error) {\n\tif ($error > 0) {\n\t\t$errors = array (\n\t\t\t1 => __ ('File size is too large.'),\n\t\t\t2 => __ ('File size is too large.'),\n\t\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t\t4 => __ ('No file was uploaded.'),\n\t\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t\t);\n\t\t$page->title = __ ('An Error Occurred');\n\t\techo '<p>' . __ ('Error message') . ': ' . $errors[$error] . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n}\n\nfor ($i = 0; $i < count ($_FILES['file']['name']); $i++) {\n\t$_FILES['file']['name'][$i] = urldecode ($_FILES['file']['name'][$i]);\n\tif (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'][$i])) {\n\t\t$page->title = __ ('File Already Exists') . ': ' . $_FILES['file']['name'][$i];\n\t\techo '<p>' . __ ('A file by that name already exists.') . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n\tif (strpos ($_FILES['file']['name'][$i], '..') !== false) {\n\t\t$page->title = __ ('Invalid File Name') . ': ' . $_FILES['file']['name'][$i];\n\t\techo '<p>' . __ ('The file name contains invalid characters.') . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n\tif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'][$i])) {\n\t\t$page->title = __ ('Invalid File Name') . ': ' . $_FILES['file']['name'][$i];\n\t\techo '<p>' . __ ('Cannot upload executable files due to security.') . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n}\n\n$count = 0;\n$errors = array ();\nfor ($i = 0; $i < count ($_FILES['file']['name']); $i++) {\n\tif (@move_uploaded_file ($_FILES['file']['tmp_name'][$i], $root . $_POST['path'] . '/' . $_FILES['file']['name'][$i])) {\n\t\t$count++;\n\t\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'][$i], 0666);\n\t\t$this->hook ('filemanager/add', array (\n\t\t\t'file' => $_POST['path'] . '/' . $_FILES['file']['name']\n\t\t));\n\t} else {\n\t\t$errors[] = $_FILES['file']['name'][$i];\n\t}\n}\n\nif (count ($_FILES['file']) > 1) {\n\tif (count ($_FILES['file']['name']) === $count) {\n\t\t$this->add_notification (__ ('%d files saved.', $count));\n\t} else {\n\t\t$this->add_notification (__ ('%d file saved. Unable to save files: %s', $count, join (', ', $errors)));\n\t}\n} else {\n\t$this->add_notification (__ ('File saved.'));\n}\n$this->redirect ('/filemanager?path=' . $_POST['path']);\n", "<?php\n\n/**\n * Upload handler for the filemanager/util/browser dialog.\n */\n\n$page->layout = false;\n\nif (! User::require_acl ('admin') || ! User::require_acl ('filemanager')) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Must be logged in to upload')));\n\treturn;\n}\n\n$f = new Form ('post', $this);\n$_POST['_token_'] = $_POST['token'];\nif (! $f->verify_csrf ()) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Validation error')));\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! FileManager::verify_folder ($_POST['path'], $root)) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Invalid path')));\n\treturn;\n}\n\nif (! isset ($_FILES['file'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('No file uploaded or file too large.')));\n\treturn;\n}\n\nif (isset ($_FILES['file']['error']) && $_FILES['file']['error'] > 0) {\n\t$errors = array (\n\t\t1 => __ ('File size is too large.'),\n\t\t2 => __ ('File size is too large.'),\n\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t4 => __ ('No file was uploaded.'),\n\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t);\n\techo json_encode (array ('success' => false, 'error' => $errors[$_FILES['file']['error']]));\n\treturn;\n}\n\n// some browsers may urlencode the file name\n$_FILES['file']['name'] = urldecode ($_FILES['file']['name']);\n\nif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Cannot upload executable files due to security.')));\n\treturn;\n}\n\nif (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('A file by that name already exists.')));\n\treturn;\n}\nif (strpos ($_FILES['file']['name'], '..') !== false) {\n\techo json_encode (array ('success' => false, 'error' => __ ('The file name contains invalid characters.')));\n\treturn;\n}\n\nif (@move_uploaded_file ($_FILES['file']['tmp_name'], $root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'], 0666);\n\t$this->hook ('filemanager/add', array (\n\t\t'file' => $_POST['path'] . '/' . $_FILES['file']['name']\n\t));\n} else {\n\techo json_encode (array ('success' => false, 'error' => __ ('Unable to save the file') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\necho json_encode (array ('success' => true, 'data' => __ ('File saved.')));\n", "<?php\n\nnamespace filemanager;\n\nuse DB, FileManager, I18n, Restful, Zipper;\n\n/**\n * Provides the JSON API for the admin file manager/browser, as well as functions\n * to verify files and folders.\n */\nclass API extends Restful {\n\t/**\n\t * Handle list directory requests (/filemanager/api/ls).\n\t */\n\tpublic function get_ls () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\n\t\t$res = FileManager::dir ($file);\n\t\tif (! $res) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\tforeach ($res['dirs'] as $k => $dir) {\n\t\t\t$res['dirs'][$k]['mtime'] = I18n::short_date_year_time ($dir['mtime']);\n\t\t}\n\n\t\tforeach ($res['files'] as $k => $file) {\n\t\t\t$res['files'][$k]['mtime'] = I18n::short_date_year_time ($file['mtime']);\n\t\t\t$res['files'][$k]['fsize'] = format_filesize ($file['fsize']);\n\t\t}\n\n\t\treturn $res;\n\t}\n\n\t/**\n\t * Handle a directories request (/filemanager/api/dirs).\n\t */\n\tpublic function get_dirs () {\n\t\treturn FileManager::list_folders ();\n\t}\n\t\n\t/**\n\t * Handle Bitly link requests (/filemanager/api/bitly).\n\t */\n\tpublic function get_bitly () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\t\t$link = $this->controller->absolutize ('/files/' . $file);\n\t\treturn BitlyLink::lookup ($link);\n\t}\n\n\t/**\n\t * Handle remove file requests (/filemanager/api/rm).\n\t */\n\tpublic function post_rm () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\n\t\t$res = FileManager::unlink ($file);\n\t\tif (! $res) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\t$this->controller->hook ('filemanager/delete', array (\n\t\t\t'file' => $file\n\t\t));\n\n\t\treturn array ('msg' => __ ('File deleted.'), 'data' => $file);\n\t}\n\t\n\t/**\n\t * Handle remove folder requests (/filemanager/api/rmdir).\n\t * Note: Erases the contents of the folder as well.\n\t */\n\tpublic function post_rmdir () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\n\t\t$res = FileManager::rmdir ($file, true);\n\t\tif (! $res) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\t$this->controller->hook ('filemanager/delete', array (\n\t\t\t'file' => $file\n\t\t));\n\n\t\treturn array ('msg' => __ ('Folder deleted.'), 'data' => $file);\n\t}\n\n\t/**\n\t * Handle rename requests (/filemanager/api/mv).\n\t */\n\tpublic function post_mv () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\n\t\t$is_folder = FileManager::verify_folder ($file) ? true : false;\n\t\t\n\t\tif (! FileManager::rename ($file, $_POST['rename'])) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\t\t$parts = explode ('/', $file);\n\t\t$old = array_pop ($parts);\n\t\t$new = preg_replace ('/' . preg_quote ($old) . '$/', $_POST['rename'], $file);\n\t\tif ($is_folder) {\n\t\t\treturn array ('msg' => __ ('Folder renamed.'), 'data' => $new);\n\t\t}\n\t\t$this->controller->hook ('filemanager/rename', array (\n\t\t\t'file' => $file,\n\t\t\t'renamed' => $new\n\t\t));\n\t\treturn array ('msg' => __ ('File renamed.'), 'data' => $new);\n\t}\n\n\t/**\n\t * Handle drop requests (/filemanager/api/drop), which move files between\n\t * folders.\n\t */\n\tpublic function post_drop () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\t\t\n\t\tif (! FileManager::move ($file, $_POST['folder'])) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\t$new = $_POST['folder'] . '/' . basename ($file);\n\t\t$this->controller->hook ('filemanager/drop', array (\n\t\t\t'file' => $file,\n\t\t\t'folder' => $_POST['folder'],\n\t\t\t'new' => $new\n\t\t));\n\t\treturn array ('msg' => __ ('File moved.'), 'data' => $new);\n\t}\n\n\t/**\n\t * Handle make directory requests (/filemanager/api/mkdir).\n\t */\n\tpublic function post_mkdir () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\t\t\n\t\tif (! FileManager::mkdir ($file)) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\treturn array ('msg' => __ ('Folder created.'), 'data' => $file);\n\t}\n\n\t/**\n\t * Handle property update requests (/filemanager/api/prop).\n\t *\n\t * If passed a `props` array, the key/value pairs will be\n\t * saved as properties and returned as a `props` field in\n\t * the response.\n\t *\n\t * Otherwise, individual `prop` and `value` parameters can\n\t * be used to set an individual property's value.\n\t */\n\tpublic function post_prop () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\t\tif (! FileManager::verify_file ($file)) {\n\t\t\treturn $this->error (__ ('Invalid file name'));\n\t\t}\n\t\t\n\t\t// handle multiple properties at once\n\t\tif (isset ($_POST['props'])) {\n\t\t\tif (! is_array ($_POST['props'])) {\n\t\t\t\treturn $this->error (__ ('Invalid properties'));\n\t\t\t}\n\t\t\t\n\t\t\tforeach ($_POST['props'] as $k => $v) {\n\t\t\t\tif (FileManager::prop ($file, $k, $v) === false) {\n\t\t\t\t\treturn $this->error (__ ('Error saving properties.'));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn array (\n\t\t\t\t'file' => $file,\n\t\t\t\t'props' => $_POST['props'],\n\t\t\t\t'msg' => __ ('Properties saved.')\n\t\t\t);\n\t\t}\n\t\t\n\t\t// handle a single property\n\t\tif (! isset ($_POST['prop'])) {\n\t\t\treturn $this->error (__ ('Missing property name'));\n\t\t}\n\t\tif (isset ($_POST['value'])) {\n\t\t\t// update and fetch\n\t\t\t$res = FileManager::prop ($file, $_POST['prop'], $_POST['value']);\n\t\t} else {\n\t\t\t// fetch\n\t\t\t$res = FileManager::prop ($file, $_POST['prop']);\n\t\t}\n\t\treturn array (\n\t\t\t'file' => $file,\n\t\t\t'prop' => $_POST['prop'],\n\t\t\t'value' => $res,\n\t\t\t'msg' => __ ('Properties saved.')\n\t\t);\n\t}\n\t\n\t/**\n\t * Handle unzip requests via (/filemanager/api/unzip).\n\t */\n\tpublic function post_unzip () {\n\t\t$file = urldecode (join ('/', func_get_args ()));\n\t\tif (! FileManager::verify_file ($file)) {\n\t\t\treturn $this->error (__ ('Invalid file name'));\n\t\t}\n\t\t\n\t\t// make sure it's a zip file\n\t\tif (! preg_match ('/\\.zip$/i', $file)) {\n\t\t\treturn $this->error (__ ('Invalid file type'));\n\t\t}\n\t\t\n\t\t// make sure the folder doesn't already exist\n\t\t$folder = preg_replace ('/\\.zip$/i', '', $file);\n\t\tif (FileManager::verify_folder ($folder)) {\n\t\t\treturn $this->error (__ ('Folder already exists'));\n\t\t}\n\t\t\n\t\t// unzip the file\n\t\ttry {\n\t\t\tZipper::unzip (FileManager::root () . $file);\n\t\t} catch (\\Exception $e) {\n\t\t\treturn $this->error ($e->getMessage ());\n\t\t}\n\n\t\t// move the unzipped folder\n\t\t$created = Zipper::find_folder (FileManager::root () . $file);\n\t\terror_log ($created);\n\t\tif (! $created) {\n\t\t\tif (! rename (Zipper::$folder, FileManager::root () . $folder)) {\n\t\t\t\treturn $this->error (__ ('Unable to save unzipped folder.'));\n\t\t\t}\n\t\t} elseif (! rename ($created, FileManager::root () . $folder)) {\n\t\t\treturn $this->error (__ ('Unable to save unzipped folder.'));\n\t\t}\n\n\t\t// return the newly-created folder\n\t\treturn array (\n\t\t\t'file' => $folder,\n\t\t\t'msg' => __ ('File unzipped.')\n\t\t);\n\t}\n}\n", "<?php\n\n/**\n * Elefant CMS - http://www.elefantcms.com/\n *\n * Copyright (c) 2011 Johnny Broadway\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Provides an API for managing common file operations such as listing directory\n * contents, renaming, and deleting files. Using this class, extended file\n * properties will be correctly re-linked to files that are renamed or moved,\n * and file and folder names and paths will be verified to be correct.\n *\n * Also note that file and folder paths are specified relative to `FileManager::root()`.\n *\n * Usage:\n *\n *     <?php\n *     \n *     // Get listing of files/homepage directory\n *     $list = FileManager::dir ('homepage');\n *     \n *     // Delete files/homepage/photo1.jpg\n *     $res = FileManager::unlink ('homepage/photo1.jpg');\n *     \n *     ?>\n */\nclass FileManager {\n\t/**\n\t * The path to the root directory to store files.\n\t */\n\tpublic static $root = null;\n\n\t/**\n\t * The web path to the root directory.\n\t */\n\tpublic static $webroot = null;\n\n\t/**\n\t * The error message if an error occurs in one of the static methods.\n\t */\n\tpublic static $error;\n\n\t/**\n\t * Returns the $root. Sets $root if not yet set.\n\t */\n\tpublic static function root () {\n                self::$webroot = self::$webroot ? self::$webroot : '/' . conf('Paths','filemanager_path') . '/';\n\t\tif (self::$root === null) {\n\t\t\tself::$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\t\t}\n\t\treturn self::$root;\n\t}\n\n\t/**\n\t * Adds the $webroot to a file/folder path, if not present.\n\t * Examples:\n\t *\n\t *     foo.txt  -> /files/foo.txt\n\t *     /foo.txt -> /files/foo.txt\n\t */\n\tpublic static function add_webroot ($path) {\n                self::$webroot = self::$webroot ? self::$webroot : '/' . conf('Paths','filemanager_path') . '/';\n\t\t$path = (strpos ($path, '/') === 0) ? $path : '/' . $path;\n\t\tif (! preg_match ('/^' . preg_quote (self::$webroot, '/') . '/', $path)) {\n\t\t\t$path = self::$webroot . ltrim ($path, '/');\n\t\t}\n\t\treturn $path;\n\t}\n\n\t/**\n\t * Removes the $webroot from a file/folder path.\n\t * Examples:\n\t *\n\t *     /files/foo.txt -> foo.txt\n\t *     files/foo.txt  -> foo.txt\n\t */\n\tpublic static function strip_webroot ($path) {\n                self::$webroot = self::$webroot ? self::$webroot : '/' . conf('Paths','filemanager_path') . '/';\n\t\t$root = preg_quote (self::$webroot, '/');\n\t\t$root = preg_replace ('|^\\\\\\/|', '\\\\/?', $root);\n\t\treturn preg_replace ('/^' . $root . '/', '', $path);\n\t}\n\n\t/**\n\t * Returns the last error message.\n\t */\n\tpublic static function error () {\n\t\treturn self::$error;\n\t}\n\n\t/**\n\t * List all directories and files in a directory. Returns an array\n\t * with 'dirs' and 'files'. Each directory has a 'name', 'path',\n\t * and 'mtime'. Each file also has 'fsize'.\n\t */\n\tpublic static function dir ($path = '') {\n\t\tif (! self::verify_folder ($path)) {\n\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\treturn false;\n\t\t}\n\n\t\t$d = dir (self::root () . $path);\n\t\tif (! $d) {\n\t\t\tself::$error = __ ('Unable to read folder');\n\t\t\treturn false;\n\t\t}\n\n\t\t$out = array ('dirs' => array (), 'files' => array ());\n\t\twhile (false !=  ($entry = $d->read ())) {\n\t\t\tif (preg_match ('/^\\./', $entry)) {\n\t\t\t\tcontinue;\n\t\t\t} elseif (is_dir (self::root () . $path . '/' . $entry)) {\n\t\t\t\t$out['dirs'][] = array (\n\t\t\t\t\t'name' => $entry,\n\t\t\t\t\t'path' => ltrim ($path . '/' . $entry, '/'),\n\t\t\t\t\t'mtime' => filemtime (self::root () . $path . '/' . $entry)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$out['files'][] = array (\n\t\t\t\t\t'name' => $entry,\n\t\t\t\t\t'path' => ltrim ($path . '/' . $entry, '/'),\n\t\t\t\t\t'mtime' => filemtime (self::root () . $path . '/' . $entry),\n\t\t\t\t\t'fsize' => filesize (self::root () . $path . '/' . $entry)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$d->close ();\n\t\tusort ($out['dirs'], array ('FileManager', 'fsort'));\n\t\tusort ($out['files'], array ('FileManager', 'fsort'));\n\t\treturn $out;\n\t}\n\n\t/**\n\t * Delete a file.\n\t */\n\tpublic static function unlink ($file) {\n\t\tif (self::verify_folder ($file)) {\n\t\t\tself::$error = __ ('Unable to delete folders');\n\t\t\treturn false;\n\t\t} elseif (! self::verify_file ($file)) {\n\t\t\tself::$error = __ ('File not found');\n\t\t\treturn false;\n\t\t} elseif (! unlink (self::root () . $file)) {\n\t\t\tself::$error = __ ('Unable to delete') . ' ' . $file;\n\t\t\treturn false;\n\t\t}\n\t\tself::prop_delete ($file);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Rename a file or folder.\n\t */\n\tpublic static function rename ($file, $new_name) {\n\t\tif (self::verify_folder ($file)) {\n\t\t\tif (! self::verify_folder_name ($new_name)) {\n\t\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$parts = explode ('/', $file);\n\t\t\t$old = array_pop ($parts);\n\t\t\t$new = preg_replace ('/' . preg_quote ($old) . '$/', $new_name, $file);\n\t\t\tif (! rename (self::root () . $file, self::root () . $new)) {\n\t\t\t\tself::$error = __ ('Unable to rename') . ' ' . $file;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tself::prop_rename ($file, $new, true);\n\t\t\treturn true;\n\t\t} elseif (self::verify_file ($file)) {\n\t\t\tif (! self::verify_file_name ($new_name)) {\n\t\t\t\tself::$error = __ ('Invalid file name');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$parts = explode ('/', $file);\n\t\t\t$old = array_pop ($parts);\n\t\t\t$new = preg_replace ('/' . preg_quote ($old) . '$/', $new_name, $file);\n\t\t\tif (! rename (self::root () . $file, self::root () . $new)) {\n\t\t\t\tself::$error = __ ('Unable to rename') . ' ' . $file;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tFileManager::prop_rename ($file, $new);\n\t\t\treturn true;\n\t\t}\n\t\tself::$error = __ ('File not found');\n\t\treturn false;\n\t}\n\n\t/**\n\t * Move a file to a new folder.\n\t */\n\tpublic static function move ($file, $folder) {\n\t\tif (! self::verify_file ($file)) {\n\t\t\tself::$error = __ ('File not found');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (! self::verify_folder ($folder)) {\n\t\t\tself::$error = __ ('Invalid folder');\n\t\t\treturn false;\n\t\t}\n\n\t\t$new = $folder . '/' . basename ($file);\n\t\t$new = ltrim ($new, '/');\n\t\tif (! rename (self::root () . $file, self::root () . $new)) {\n\t\t\tself::$error = __ ('Unable to move') . ' ' . $file;\n\t\t\treturn false;\n\t\t}\n\n\t\tself::prop_rename ($file, $new);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Touch a file. If it exists, updates its modification\n\t * time. If not, creates a blank file.\n\t */\n\tpublic static function touch ($file) {\n\t\tif (! self::verify_file ($file)) {\n\t\t\t$basename = basename ($file);\n\t\t\t$path = pathinfo ($file, PATHINFO_DIRNAME);\n\t\t\tif (! self::verify_folder ($path)) {\n\t\t\t\tself::$error = __ ('Invalid folder');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (! self::verify_file_name ($basename)) {\n\t\t\t\tself::$error = __ ('Invalid file name');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn touch (self::root () . $file);\n\t}\n\n\t/**\n\t * Make a new folder.\n\t */\n\tpublic static function mkdir ($folder) {\n\t\t$parts = explode ('/', $folder);\n\t\t$newdir = array_pop ($parts);\n\t\t$path = preg_replace ('/\\/?' . preg_quote ($newdir) . '$/', '', $folder);\n\t\tif (! self::verify_folder ($path)) {\n\t\t\tself::$error = __ ('Invalid location');\n\t\t\treturn false;\n\t\t} elseif (! self::verify_folder_name ($newdir)) {\n\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\treturn false;\n\t\t} elseif (is_dir (self::root () . $folder)) {\n\t\t\tself::$error = __ ('Folder already exists') . ' ' . $folder;\n\t\t\treturn false;\n\t\t} elseif (! mkdir (self::root () . $folder)) {\n\t\t\tself::$error = __ ('Unable to create folder') . ' ' . $folder;\n\t\t\treturn false;\n\t\t}\n\t\tchmod (self::root () . $folder, 0777);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Remove a folder. The folder must be empty, or recursive\n\t * must be set to true to remove non-empty folders.\n\t */\n\tpublic static function rmdir ($folder, $recursive = false) {\n\t\tif (! self::verify_folder ($folder)) {\n\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\treturn false;\n\t\t}\n\n\t\t$list = self::dir ($folder);\n\t\tif (! $list) {\n\t\t\tself::$error = __ ('Unable to verify folder');\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (! $recursive) {\n\t\t\tif (count ($list['dirs']) > 0 || count ($list['files']) > 0) {\n\t\t\t\tself::$error = __ ('Folder must be empty');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (! rmdir (self::root () . $folder)) {\n\t\t\t\tself::$error = __ ('Unable to delete folder');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn self::rmdir_recursive (self::root () . $folder);\n\t}\n\n\t/**\n\t * Handles recursively deleting folders for `FileManager::rmdir()`.\n\t */\n\tprivate static function rmdir_recursive ($path) {\n\t\tif (preg_match ('|/\\.+$|', $path)) {\n\t\t\treturn;\n\t\t}\n\t\treturn is_file ($path)\n\t\t\t? unlink ($path)\n\t\t\t: array_map (array ('FileManager', 'rmdir_recursive'), glob ($path . '/{,.}*', GLOB_BRACE)) == rmdir ($path);\n\t}\n\n\t/**\n\t * Returns a list of folders recursively under the specified\n\t * folder path.\n\t */\n\tpublic static function list_folders ($path = '') {\n\t\t$folders = array ();\n                $root = conf('Paths','filemanager_path');\n\t\tif (! empty ($path)) {\n\t\t\t$rpath = $root . \"/\" . $path;\n\t\t\t$epath = $path . '/';\n\t\t} else {\n\t\t\t$rpath = $root;\n\t\t\t$epath = '';\n\t\t}\n\t\t$d = dir ($rpath);\n\t\tif (! $d) {\n\t\t\treturn array ();\n\t\t}\n\t\twhile (false !== ($file = $d->read ())) {\n\t\t\t$files[] = $file;\n\t\t}\n\t\t$d->close ();\n\n\t\tforeach ($files as $file) {\n\t\t\tif (strpos ($file, '.') === 0 || ! @is_dir ($rpath . '/' . $file)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$folders[] = $epath . $file;\n\t\t\t$subs = self::list_folders ($epath . $file);\n\t\t\tforeach ($subs as $sub) {\n\t\t\t\t$folders[] = $sub;\n\t\t\t}\n\t\t}\n\t\treturn $folders;\n\t}\n\n\t/**\n\t * Verify that the specified folder is valid, and exists\n\t * inside a certain root folder.\n\t */\n\tpublic static function verify_folder ($path, $root = false) {\n\t\t$root = ($root) ? rtrim ($root) : rtrim (self::root ());\n\t\t$path = trim ($path, '/');\n\t\tif (strpos ($path, '..') !== false) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! @is_dir ($root . '/' . $path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verify that the specified file is valid, and exists\n\t * inside a certain root folder.\n\t */\n\tpublic static function verify_file ($path, $root = false) {\n\t\t$root = ($root) ? rtrim ($root) : rtrim (self::root ());\n\t\t$path = trim ($path, '/');\n\t\tif (strpos ($path, '..') !== false) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! @file_exists ($root . '/' . $path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verify that a folder name contains only a-z, A-Z, 0-9,\n\t * underscores, and dashes.\n\t */\n\tpublic static function verify_folder_name ($name) {\n\t\tif (! preg_match ('/^[a-zA-Z0-9 _-]+$/', $name)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verify that a file name contains only a-z, A-Z, 0-9,\n\t * underscores, and dashes, and a dot.\n\t */\n\tpublic static function verify_file_name ($name) {\n\t\tif (! preg_match ('/^[a-zA-Z0-9 _-]+\\.[a-zA-Z0-9_-]+$/', $name)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (preg_match ('/\\.php$/i', $name)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper for sorting files by name. For use with `usort()`.\n\t */\n\tpublic static function fsort ($a, $b) {\n\t\treturn strcmp ($a['name'], $b['name']);\n\t}\n\n\t/**\n\t * Fetch all of the properties for the specified file.\n\t */\n\tpublic static function props ($file) {\n\t\treturn DB::pairs ('select prop, value from #prefix#filemanager_prop where file = ?', $file);\n\t}\n\n\t/**\n\t * Get or set a property for the specified file.\n\t * Can also retrieve an array of a property for a\n\t * list of files if `$file` is an array.\n\t */\n\tpublic static function prop ($file, $prop, $value = null) {\n\t\tif ($value !== null) {\n\t\t\t// takes an extra select query, but works cross-database\n\t\t\t$res = self::prop ($file, $prop);\n\t\t\tif ($res === $value) {\n\t\t\t\treturn $value;\n\t\t\t} elseif ($res === false || $res === null) {\n\t\t\t\t// doesn't exist yet\n\t\t\t\tif (! DB::execute (\n\t\t\t\t\t'insert into #prefix#filemanager_prop (file, prop, value) values (?, ?, ?)',\n\t\t\t\t\t$file,\n\t\t\t\t\t$prop,\n\t\t\t\t\t$value\n\t\t\t\t)) {\n\t\t\t\t\tself::$error = DB::error ();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// already exists, update\n\t\t\t\tif (! DB::execute (\n\t\t\t\t\t'update #prefix#filemanager_prop set value = ? where file = ? and prop = ?',\n\t\t\t\t\t$value,\n\t\t\t\t\t$file,\n\t\t\t\t\t$prop\n\t\t\t\t)) {\n\t\t\t\t\tself::$error = DB::error ();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $value;\n\t\t}\n\t\tif (is_array ($file)) {\n\t\t\t// get as a list\n\t\t\t$qmarks = array_fill (0, count ($file), '?');\n\t\t\t$file[] = $prop;\n\t\t\treturn DB::pairs (\n\t\t\t\t'select file, value from #prefix#filemanager_prop where file in(' . join (', ', $qmarks) . ') and prop = ?',\n\t\t\t\t$file\n\t\t\t);\n\t\t}\n\t\t// get a single value\n\t\treturn DB::shift (\n\t\t\t'select value from #prefix#filemanager_prop where file = ? and prop = ?',\n\t\t\t$file,\n\t\t\t$prop\n\t\t);\n\t}\n\n\t/**\n\t * Rename the properties for a file that has been renamed.\n\t */\n\tpublic static function prop_rename ($file, $new_name, $folder = false) {\n\t\tif ($folder) {\n\t\t\tif (! DB::execute (\n\t\t\t\t'update #prefix#filemanager_prop set file = replace(file, ?, ?) where file like ?',\n\t\t\t\t$file . '/',\n\t\t\t\t$new_name . '/',\n\t\t\t\t$file . '/%'\n\t\t\t)) {\n\t\t\t\tself::$error = DB::error ();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (! DB::execute (\n\t\t\t'update #prefix#filemanager_prop set file = ? where file = ?',\n\t\t\t$new_name,\n\t\t\t$file\n\t\t)) {\n\t\t\tself::$error = DB::error ();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete the properties for a file that has been deleted.\n\t */\n\tpublic static function prop_delete ($file) {\n\t\tif (! DB::execute (\n\t\t\t'delete from #prefix#filemanager_prop where file = ?',\n\t\t\t$file\n\t\t)) {\n\t\t\tself::$error = DB::error ();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * Provides the JSON API for the file browser in the WYSIWYG editor.\n */\n\n$this->require_admin ();\n\n$page->layout = false;\n\nif (isset ($_POST['action'])) {\n\theader ('Content-Type: text/plain; charset=UTF-8');\n\t$_GET['action'] = $_POST['action'];\n} else {\n\theader ('Content-Type: application/json');\n\t$error = false;\n}\n\nswitch ($_GET['action']) {\n\tcase 'auth':\n\t\tif ($_GET['auth'] != 'jwysiwyg') {\n\t\t\t$error = 'Authorization failed.';\n\t\t\tbreak;\n\t\t}\n\t\t$out = array (\n\t\t\t'move' => array ('enabled' => false),\n\t\t\t'rename' => array ('enabled' => false),\n\t\t\t'remove' => array ('enabled' => false),\n\t\t\t'mkdir' => array ('enabled' => false),\n\t\t\t'upload' => array ('enabled' => true, 'handler' => '/filemanager/embed')\n\t\t);\n\t\tbreak;\n\tcase 'list':\n\t\t$ok = 0;\n\t\tif (! isset ($_GET['dir']) || $_GET['dir'] === '/') {\n\t\t\t$_GET['dir'] = '/files';\n\t\t}\n\t\tif ($_GET['dir'] === '/files') {\n\t\t\t$ok = 3;\n\t\t} else {\n\t\t\tif (strpos ($_GET['dir'], '..') === false) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t\tif (strpos ($_GET['dir'], '/files/') === 0) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t\tif (@is_dir (getcwd () . $_GET['dir'])) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t}\n\t\tif ($ok < 3) {\n\t\t\t$error = 'Invalid directory: ' . $_GET['dir'];\n\t\t\tbreak;\n\t\t}\n\t\t$out = array (\n\t\t\t'directories' => array (),\n\t\t\t'files' => array ()\n\t\t);\n\t\t$d = dir (getcwd () . $_GET['dir']);\n\t\twhile (false !== ($entry = $d->read ())) {\n\t\t\tif (strpos ($entry, '.') === 0) {\n\t\t\t\tcontinue;\n\t\t\t} elseif (@is_dir (ltrim ($_GET['dir'], '/') . '/' . $entry)) {\n\t\t\t\t$out['directories'][$entry] = rtrim ($_GET['dir'], '/') . '/' . $entry;\n\t\t\t} else {\n\t\t\t\t$out['files'][$entry] = rtrim ($_GET['dir'], '/') . '/' . $entry;\n\t\t\t}\n\t\t}\n\t\t$d->close ();\n\t\tbreak;\n\tcase 'upload':\n\t\t$ok = 0;\n\t\t\n\t\t// prevent encoded symbols bypassing checks\n\t\t$_POST['dir'] = urldecode ($_POST['dir']);\n\t\t$_POST['newName'] = urldecode ($_POST['newName']);\n\n\t\tif (! isset ($_POST['dir']) || $_POST['dir'] === '/') {\n\t\t\t$_POST['dir'] = '/files';\n\t\t}\n\n\t\tif ($_POST['dir'] === '/files') {\n\t\t\t$ok = 3;\n\t\t} else {\n\t\t\tif (strpos ($_POST['dir'], '..') === false) {\n\t\t\t\t$ok++;\n\t\t\t}\n\n\t\t\tif (strpos ($_POST['dir'], '/files/') === 0) {\n\t\t\t\t$ok++;\n\t\t\t}\n\n\t\t\tif (is_dir (getcwd () . $_POST['dir'])) {\n\t\t\t\t$ok++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($ok < 3) {\n\t\t\techo __ ('Invalid directory');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (! isset ($_POST['newName'])) {\n\t\t\techo __ ('No name specified');\n\t\t\tbreak;\n\t\t}\n\n\t\tif (strpos ($_POST['newName'], '..') !== false || strpos ($_POST['newName'], '/') !== false) {\n\t\t\techo __ ('Invalid name');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$_POST['newName'] = trim ($_POST['newName']);\n\t\t\n\t\tif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe|htaccess|htpasswd)$/i', $_POST['newName'])) {\n\t\t\techo __ ('Invalid file type');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$dest = ltrim ($_POST['dir'], '/') . '/' . $_POST['newName'];\n\n\t\tif (file_exists ($dest)) {\n\t\t\techo __ ('File already exists');\n\t\t\treturn;\n\t\t}\n\n\t\tif (! is_uploaded_file ($_FILES['handle']['tmp_name'])) {\n\t\t\techo __ ('File upload failed');\n\t\t\treturn;\n\t\t}\n\n\t\tif (! move_uploaded_file ($_FILES['handle']['tmp_name'], $dest)) {\n\t\t\techo __ ('File save failed');\n\t\t\treturn;\n\t\t}\n\n\t\techo 'File uploaded successfully';\n\t\treturn;\n}\n\nif ($error) {\n\techo json_encode (array (\n\t\t'success' => false,\n\t\t'error' => $error,\n\t\t'errno' => 1\n\t));\n} else {\n\techo json_encode (array (\n\t\t'success' => true,\n\t\t'data' => $out\n\t));\n}\n", "<?php\n\n/**\n * Upload handler for the wysiwyg editor.\n */\n\n$page->layout = false;\n\nif (! User::require_acl ('admin') || ! User::require_acl ('filemanager')) {\n\techo json_encode (array ('error' => __ ('Must be logged in to upload')));\n\treturn;\n}\n\n$f = new Form ('post', $this);\nif (! $f->verify_csrf ()) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Validation error')));\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! isset ($_FILES['file'])) {\n\techo json_encode (array ('error' => __ ('File upload field not set.')));\n\treturn;\n}\n\nforeach ($_FILES['file']['error'] as $error) {\n\tif ($error > 0) {\n\t\t$errors = array (\n\t\t\t1 => __ ('File size is too large.'),\n\t\t\t2 => __ ('File size is too large.'),\n\t\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t\t4 => __ ('No file was uploaded.'),\n\t\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t\t);\n\t\techo json_encode (array ('error' => $errors[$error]));\n\t\treturn;\n\t}\n}\n\n// some browsers may urlencode the file name\n$_FILES['file']['name'] = trim (urldecode ($_FILES['file']['name']));\n\nif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe|htaccess|htpasswd)$/i', $_FILES['file']['name'])) {\n\techo json_encode (array ('error' => __ ('Cannot upload executable files due to security.')));\n\treturn;\n}\n\nif (file_exists ($root . $_FILES['file']['name'])) {\n\techo json_encode (array ('error' => __ ('File already exists') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\nif (strpos ($_FILES['file']['name'], '..') !== false) {\n\techo json_encode (array ('error' => __ ('Invalid file name') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\nif (@move_uploaded_file ($_FILES['file']['tmp_name'], $root . $_FILES['file']['name'])) {\n\t@chmod ($root . $_FILES['file']['name'], 0666);\n\t$this->hook ('filemanager/add', array (\n\t\t'file' => '/' . $_FILES['file']['name']\n\t));\n\techo stripslashes (\n\t\tjson_encode (\n\t\t\tarray (\n\t\t\t\t'filelink' => '/' . conf('Paths','filemanager_path') . '/' . $_FILES['file']['name'],\n\t\t\t\t'filename' => $_FILES['file']['name']\n\t\t\t)\n\t\t)\n\t);\n} else {\n\techo json_encode (array ('error' => __ ('Failed to save file') . ': ' . $_FILES['file']['name']));\n}\n", "<?php\n\n/**\n * Upload handler for the file manager.\n */\n\n$page->layout = 'admin';\n\n$this->require_acl ('admin', 'filemanager');\n\n$f = new Form ('post', $this);\nif (! $f->verify_csrf ()) {\n\t$page->title = __ ('Validation Error');\t\n\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! FileManager::verify_folder ($_POST['path'], $root)) {\n\t$page->title = __ ('Invalid Path');\n\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\treturn;\n}\n\nif (! isset ($_FILES['file'])) {\n\t$page->title = __ ('An Error Occurred');\n\techo '<p>' . __ ('No file uploaded or file too large.') . '</p>';\n\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\treturn;\n}\n\nforeach ($_FILES['file']['error'] as $error) {\n\tif ($error > 0) {\n\t\t$errors = array (\n\t\t\t1 => __ ('File size is too large.'),\n\t\t\t2 => __ ('File size is too large.'),\n\t\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t\t4 => __ ('No file was uploaded.'),\n\t\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t\t);\n\t\t$page->title = __ ('An Error Occurred');\n\t\techo '<p>' . __ ('Error message') . ': ' . $errors[$error] . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n}\n\nfor ($i = 0; $i < count ($_FILES['file']['name']); $i++) {\n\t$_FILES['file']['name'][$i] = trim (urldecode ($_FILES['file']['name'][$i]));\n\tif (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'][$i])) {\n\t\t$page->title = __ ('File Already Exists') . ': ' . $_FILES['file']['name'][$i];\n\t\techo '<p>' . __ ('A file by that name already exists.') . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n\tif (strpos ($_FILES['file']['name'][$i], '..') !== false) {\n\t\t$page->title = __ ('Invalid File Name') . ': ' . $_FILES['file']['name'][$i];\n\t\techo '<p>' . __ ('The file name contains invalid characters.') . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n\tif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe|htaccess|htpasswd)$/i', $_FILES['file']['name'][$i])) {\n\t\t$page->title = __ ('Invalid File Name') . ': ' . $_FILES['file']['name'][$i];\n\t\techo '<p>' . __ ('Cannot upload executable files due to security.') . '</p>';\n\t\techo '<p><a href=\"/filemanager\">' . __ ('Back') . '</a></p>';\n\t\treturn;\n\t}\n}\n\n$count = 0;\n$errors = array ();\nfor ($i = 0; $i < count ($_FILES['file']['name']); $i++) {\n\tif (@move_uploaded_file ($_FILES['file']['tmp_name'][$i], $root . $_POST['path'] . '/' . $_FILES['file']['name'][$i])) {\n\t\t$count++;\n\t\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'][$i], 0666);\n\t\t$this->hook ('filemanager/add', array (\n\t\t\t'file' => $_POST['path'] . '/' . $_FILES['file']['name']\n\t\t));\n\t} else {\n\t\t$errors[] = $_FILES['file']['name'][$i];\n\t}\n}\n\nif (count ($_FILES['file']) > 1) {\n\tif (count ($_FILES['file']['name']) === $count) {\n\t\t$this->add_notification (__ ('%d files saved.', $count));\n\t} else {\n\t\t$this->add_notification (__ ('%d file saved. Unable to save files: %s', $count, join (', ', $errors)));\n\t}\n} else {\n\t$this->add_notification (__ ('File saved.'));\n}\n$this->redirect ('/filemanager?path=' . $_POST['path']);\n", "<?php\n\n/**\n * Upload handler for the filemanager/util/browser dialog.\n */\n\n$page->layout = false;\n\nif (! User::require_acl ('admin') || ! User::require_acl ('filemanager')) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Must be logged in to upload')));\n\treturn;\n}\n\n$f = new Form ('post', $this);\n$_POST['_token_'] = $_POST['token'];\nif (! $f->verify_csrf ()) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Validation error')));\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! FileManager::verify_folder ($_POST['path'], $root)) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Invalid path')));\n\treturn;\n}\n\nif (! isset ($_FILES['file'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('No file uploaded or file too large.')));\n\treturn;\n}\n\nif (isset ($_FILES['file']['error']) && $_FILES['file']['error'] > 0) {\n\t$errors = array (\n\t\t1 => __ ('File size is too large.'),\n\t\t2 => __ ('File size is too large.'),\n\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t4 => __ ('No file was uploaded.'),\n\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t);\n\techo json_encode (array ('success' => false, 'error' => $errors[$_FILES['file']['error']]));\n\treturn;\n}\n\n// some browsers may urlencode the file name\n$_FILES['file']['name'] = trim (urldecode ($_FILES['file']['name']));\n\nif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe|htaccess|htpasswd)$/i', $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Cannot upload executable files due to security.')));\n\treturn;\n}\n\nif (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('A file by that name already exists.')));\n\treturn;\n}\nif (strpos ($_FILES['file']['name'], '..') !== false) {\n\techo json_encode (array ('success' => false, 'error' => __ ('The file name contains invalid characters.')));\n\treturn;\n}\n\nif (@move_uploaded_file ($_FILES['file']['tmp_name'], $root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'], 0666);\n\t$this->hook ('filemanager/add', array (\n\t\t'file' => $_POST['path'] . '/' . $_FILES['file']['name']\n\t));\n} else {\n\techo json_encode (array ('success' => false, 'error' => __ ('Unable to save the file') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\necho json_encode (array ('success' => true, 'data' => __ ('File saved.')));\n", "<?php\n\nnamespace filemanager;\n\nuse DB, FileManager, I18n, Restful, Zipper;\n\n/**\n * Provides the JSON API for the admin file manager/browser, as well as functions\n * to verify files and folders.\n */\nclass API extends Restful {\n\t/**\n\t * Handle list directory requests (/filemanager/api/ls).\n\t */\n\tpublic function get_ls () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\n\t\t$res = FileManager::dir ($file);\n\t\tif (! $res) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\tforeach ($res['dirs'] as $k => $dir) {\n\t\t\t$res['dirs'][$k]['mtime'] = I18n::short_date_year_time ($dir['mtime']);\n\t\t}\n\n\t\tforeach ($res['files'] as $k => $file) {\n\t\t\t$res['files'][$k]['mtime'] = I18n::short_date_year_time ($file['mtime']);\n\t\t\t$res['files'][$k]['fsize'] = format_filesize ($file['fsize']);\n\t\t}\n\n\t\treturn $res;\n\t}\n\n\t/**\n\t * Handle a directories request (/filemanager/api/dirs).\n\t */\n\tpublic function get_dirs () {\n\t\treturn FileManager::list_folders ();\n\t}\n\t\n\t/**\n\t * Handle Bitly link requests (/filemanager/api/bitly).\n\t */\n\tpublic function get_bitly () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\t\t$link = $this->controller->absolutize ('/files/' . $file);\n\t\treturn BitlyLink::lookup ($link);\n\t}\n\n\t/**\n\t * Handle remove file requests (/filemanager/api/rm).\n\t */\n\tpublic function post_rm () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\n\t\t$res = FileManager::unlink ($file);\n\t\tif (! $res) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\t$this->controller->hook ('filemanager/delete', array (\n\t\t\t'file' => $file\n\t\t));\n\n\t\treturn array ('msg' => __ ('File deleted.'), 'data' => $file);\n\t}\n\t\n\t/**\n\t * Handle remove folder requests (/filemanager/api/rmdir).\n\t * Note: Erases the contents of the folder as well.\n\t */\n\tpublic function post_rmdir () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\n\t\t$res = FileManager::rmdir ($file, true);\n\t\tif (! $res) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\t$this->controller->hook ('filemanager/delete', array (\n\t\t\t'file' => $file\n\t\t));\n\n\t\treturn array ('msg' => __ ('Folder deleted.'), 'data' => $file);\n\t}\n\n\t/**\n\t * Handle rename requests (/filemanager/api/mv).\n\t */\n\tpublic function post_mv () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\n\t\t$is_folder = FileManager::verify_folder ($file) ? true : false;\n\t\t\n\t\tif (! FileManager::rename ($file, $_POST['rename'])) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\t\t$parts = explode ('/', $file);\n\t\t$old = array_pop ($parts);\n\t\t$new = preg_replace ('/' . preg_quote ($old) . '$/', $_POST['rename'], $file);\n\t\tif ($is_folder) {\n\t\t\treturn array ('msg' => __ ('Folder renamed.'), 'data' => $new);\n\t\t}\n\t\t$this->controller->hook ('filemanager/rename', array (\n\t\t\t'file' => $file,\n\t\t\t'renamed' => $new\n\t\t));\n\t\treturn array ('msg' => __ ('File renamed.'), 'data' => $new);\n\t}\n\n\t/**\n\t * Handle drop requests (/filemanager/api/drop), which move files between\n\t * folders.\n\t */\n\tpublic function post_drop () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\t\t\n\t\tif (! FileManager::move ($file, $_POST['folder'])) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\t$new = $_POST['folder'] . '/' . basename ($file);\n\t\t$this->controller->hook ('filemanager/drop', array (\n\t\t\t'file' => $file,\n\t\t\t'folder' => $_POST['folder'],\n\t\t\t'new' => $new\n\t\t));\n\t\treturn array ('msg' => __ ('File moved.'), 'data' => $new);\n\t}\n\n\t/**\n\t * Handle make directory requests (/filemanager/api/mkdir).\n\t */\n\tpublic function post_mkdir () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\t\t\n\t\tif (! FileManager::mkdir ($file)) {\n\t\t\treturn $this->error (FileManager::error ());\n\t\t}\n\n\t\treturn array ('msg' => __ ('Folder created.'), 'data' => $file);\n\t}\n\n\t/**\n\t * Handle property update requests (/filemanager/api/prop).\n\t *\n\t * If passed a `props` array, the key/value pairs will be\n\t * saved as properties and returned as a `props` field in\n\t * the response.\n\t *\n\t * Otherwise, individual `prop` and `value` parameters can\n\t * be used to set an individual property's value.\n\t */\n\tpublic function post_prop () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\t\tif (! FileManager::verify_file ($file)) {\n\t\t\treturn $this->error (__ ('Invalid file name'));\n\t\t}\n\t\t\n\t\t// handle multiple properties at once\n\t\tif (isset ($_POST['props'])) {\n\t\t\tif (! is_array ($_POST['props'])) {\n\t\t\t\treturn $this->error (__ ('Invalid properties'));\n\t\t\t}\n\t\t\t\n\t\t\tforeach ($_POST['props'] as $k => $v) {\n\t\t\t\tif (FileManager::prop ($file, $k, $v) === false) {\n\t\t\t\t\treturn $this->error (__ ('Error saving properties.'));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn array (\n\t\t\t\t'file' => $file,\n\t\t\t\t'props' => $_POST['props'],\n\t\t\t\t'msg' => __ ('Properties saved.')\n\t\t\t);\n\t\t}\n\t\t\n\t\t// handle a single property\n\t\tif (! isset ($_POST['prop'])) {\n\t\t\treturn $this->error (__ ('Missing property name'));\n\t\t}\n\t\tif (isset ($_POST['value'])) {\n\t\t\t// update and fetch\n\t\t\t$res = FileManager::prop ($file, $_POST['prop'], $_POST['value']);\n\t\t} else {\n\t\t\t// fetch\n\t\t\t$res = FileManager::prop ($file, $_POST['prop']);\n\t\t}\n\t\treturn array (\n\t\t\t'file' => $file,\n\t\t\t'prop' => $_POST['prop'],\n\t\t\t'value' => $res,\n\t\t\t'msg' => __ ('Properties saved.')\n\t\t);\n\t}\n\t\n\t/**\n\t * Handle unzip requests via (/filemanager/api/unzip).\n\t */\n\tpublic function post_unzip () {\n\t\t$file = trim (urldecode (join ('/', func_get_args ())));\n\t\tif (! FileManager::verify_file ($file)) {\n\t\t\treturn $this->error (__ ('Invalid file name'));\n\t\t}\n\t\t\n\t\t// make sure it's a zip file\n\t\tif (! preg_match ('/\\.zip$/i', $file)) {\n\t\t\treturn $this->error (__ ('Invalid file type'));\n\t\t}\n\t\t\n\t\t// make sure the folder doesn't already exist\n\t\t$folder = preg_replace ('/\\.zip$/i', '', $file);\n\t\tif (FileManager::verify_folder ($folder)) {\n\t\t\treturn $this->error (__ ('Folder already exists'));\n\t\t}\n\t\t\n\t\t// unzip the file\n\t\ttry {\n\t\t\tZipper::unzip (FileManager::root () . $file);\n\t\t} catch (\\Exception $e) {\n\t\t\treturn $this->error ($e->getMessage ());\n\t\t}\n\n\t\t// move the unzipped folder\n\t\t$created = Zipper::find_folder (FileManager::root () . $file);\n\t\terror_log ($created);\n\t\tif (! $created) {\n\t\t\tif (! rename (Zipper::$folder, FileManager::root () . $folder)) {\n\t\t\t\treturn $this->error (__ ('Unable to save unzipped folder.'));\n\t\t\t}\n\t\t} elseif (! rename ($created, FileManager::root () . $folder)) {\n\t\t\treturn $this->error (__ ('Unable to save unzipped folder.'));\n\t\t}\n\n\t\t// return the newly-created folder\n\t\treturn array (\n\t\t\t'file' => $folder,\n\t\t\t'msg' => __ ('File unzipped.')\n\t\t);\n\t}\n}\n", "<?php\n\n/**\n * Elefant CMS - http://www.elefantcms.com/\n *\n * Copyright (c) 2011 Johnny Broadway\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Provides an API for managing common file operations such as listing directory\n * contents, renaming, and deleting files. Using this class, extended file\n * properties will be correctly re-linked to files that are renamed or moved,\n * and file and folder names and paths will be verified to be correct.\n *\n * Also note that file and folder paths are specified relative to `FileManager::root()`.\n *\n * Usage:\n *\n *     <?php\n *     \n *     // Get listing of files/homepage directory\n *     $list = FileManager::dir ('homepage');\n *     \n *     // Delete files/homepage/photo1.jpg\n *     $res = FileManager::unlink ('homepage/photo1.jpg');\n *     \n *     ?>\n */\nclass FileManager {\n\t/**\n\t * The path to the root directory to store files.\n\t */\n\tpublic static $root = null;\n\n\t/**\n\t * The web path to the root directory.\n\t */\n\tpublic static $webroot = null;\n\n\t/**\n\t * The error message if an error occurs in one of the static methods.\n\t */\n\tpublic static $error;\n\n\t/**\n\t * Returns the $root. Sets $root if not yet set.\n\t */\n\tpublic static function root () {\n                self::$webroot = self::$webroot ? self::$webroot : '/' . conf('Paths','filemanager_path') . '/';\n\t\tif (self::$root === null) {\n\t\t\tself::$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\t\t}\n\t\treturn self::$root;\n\t}\n\n\t/**\n\t * Adds the $webroot to a file/folder path, if not present.\n\t * Examples:\n\t *\n\t *     foo.txt  -> /files/foo.txt\n\t *     /foo.txt -> /files/foo.txt\n\t */\n\tpublic static function add_webroot ($path) {\n                self::$webroot = self::$webroot ? self::$webroot : '/' . conf('Paths','filemanager_path') . '/';\n\t\t$path = (strpos ($path, '/') === 0) ? $path : '/' . $path;\n\t\tif (! preg_match ('/^' . preg_quote (self::$webroot, '/') . '/', $path)) {\n\t\t\t$path = self::$webroot . ltrim ($path, '/');\n\t\t}\n\t\treturn $path;\n\t}\n\n\t/**\n\t * Removes the $webroot from a file/folder path.\n\t * Examples:\n\t *\n\t *     /files/foo.txt -> foo.txt\n\t *     files/foo.txt  -> foo.txt\n\t */\n\tpublic static function strip_webroot ($path) {\n                self::$webroot = self::$webroot ? self::$webroot : '/' . conf('Paths','filemanager_path') . '/';\n\t\t$root = preg_quote (self::$webroot, '/');\n\t\t$root = preg_replace ('|^\\\\\\/|', '\\\\/?', $root);\n\t\treturn preg_replace ('/^' . $root . '/', '', $path);\n\t}\n\n\t/**\n\t * Returns the last error message.\n\t */\n\tpublic static function error () {\n\t\treturn self::$error;\n\t}\n\n\t/**\n\t * List all directories and files in a directory. Returns an array\n\t * with 'dirs' and 'files'. Each directory has a 'name', 'path',\n\t * and 'mtime'. Each file also has 'fsize'.\n\t */\n\tpublic static function dir ($path = '') {\n\t\tif (! self::verify_folder ($path)) {\n\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\treturn false;\n\t\t}\n\n\t\t$d = dir (self::root () . $path);\n\t\tif (! $d) {\n\t\t\tself::$error = __ ('Unable to read folder');\n\t\t\treturn false;\n\t\t}\n\n\t\t$out = array ('dirs' => array (), 'files' => array ());\n\t\twhile (false !=  ($entry = $d->read ())) {\n\t\t\tif (preg_match ('/^\\./', $entry)) {\n\t\t\t\tcontinue;\n\t\t\t} elseif (is_dir (self::root () . $path . '/' . $entry)) {\n\t\t\t\t$out['dirs'][] = array (\n\t\t\t\t\t'name' => $entry,\n\t\t\t\t\t'path' => ltrim ($path . '/' . $entry, '/'),\n\t\t\t\t\t'mtime' => filemtime (self::root () . $path . '/' . $entry)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$out['files'][] = array (\n\t\t\t\t\t'name' => $entry,\n\t\t\t\t\t'path' => ltrim ($path . '/' . $entry, '/'),\n\t\t\t\t\t'mtime' => filemtime (self::root () . $path . '/' . $entry),\n\t\t\t\t\t'fsize' => filesize (self::root () . $path . '/' . $entry)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$d->close ();\n\t\tusort ($out['dirs'], array ('FileManager', 'fsort'));\n\t\tusort ($out['files'], array ('FileManager', 'fsort'));\n\t\treturn $out;\n\t}\n\n\t/**\n\t * Delete a file.\n\t */\n\tpublic static function unlink ($file) {\n\t\tif (self::verify_folder ($file)) {\n\t\t\tself::$error = __ ('Unable to delete folders');\n\t\t\treturn false;\n\t\t} elseif (! self::verify_file ($file)) {\n\t\t\tself::$error = __ ('File not found');\n\t\t\treturn false;\n\t\t} elseif (! self::verify_file_name ($file)) {\n\t\t\tself::$error = __ ('Invalid file name');\n\t\t\treturn false;\n\t\t} elseif (! unlink (self::root () . $file)) {\n\t\t\tself::$error = __ ('Unable to delete') . ' ' . $file;\n\t\t\treturn false;\n\t\t}\n\t\tself::prop_delete ($file);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Rename a file or folder.\n\t */\n\tpublic static function rename ($file, $new_name) {\n\t\tif (self::verify_folder ($file)) {\n\t\t\tif (! self::verify_folder_name ($new_name)) {\n\t\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$parts = explode ('/', $file);\n\t\t\t$old = array_pop ($parts);\n\t\t\t$new = preg_replace ('/' . preg_quote ($old) . '$/', $new_name, $file);\n\t\t\tif (! rename (self::root () . $file, self::root () . $new)) {\n\t\t\t\tself::$error = __ ('Unable to rename') . ' ' . $file;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tself::prop_rename ($file, $new, true);\n\t\t\treturn true;\n\t\t} elseif (self::verify_file ($file)) {\n\t\t\tif (! self::verify_file_name ($new_name)) {\n\t\t\t\tself::$error = __ ('Invalid file name');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$parts = explode ('/', $file);\n\t\t\t$old = array_pop ($parts);\n\t\t\t$new = preg_replace ('/' . preg_quote ($old) . '$/', $new_name, $file);\n\t\t\tif (! rename (self::root () . $file, self::root () . $new)) {\n\t\t\t\tself::$error = __ ('Unable to rename') . ' ' . $file;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tFileManager::prop_rename ($file, $new);\n\t\t\treturn true;\n\t\t}\n\t\tself::$error = __ ('File not found');\n\t\treturn false;\n\t}\n\n\t/**\n\t * Move a file to a new folder.\n\t */\n\tpublic static function move ($file, $folder) {\n\t\tif (! self::verify_file ($file)) {\n\t\t\tself::$error = __ ('File not found');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (! self::verify_folder ($folder)) {\n\t\t\tself::$error = __ ('Invalid folder');\n\t\t\treturn false;\n\t\t}\n\n\t\t$new = $folder . '/' . basename ($file);\n\t\t$new = ltrim ($new, '/');\n\t\tif (! rename (self::root () . $file, self::root () . $new)) {\n\t\t\tself::$error = __ ('Unable to move') . ' ' . $file;\n\t\t\treturn false;\n\t\t}\n\n\t\tself::prop_rename ($file, $new);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Touch a file. If it exists, updates its modification\n\t * time. If not, creates a blank file.\n\t */\n\tpublic static function touch ($file) {\n\t\tif (! self::verify_file ($file)) {\n\t\t\t$basename = basename ($file);\n\t\t\t$path = pathinfo ($file, PATHINFO_DIRNAME);\n\t\t\tif (! self::verify_folder ($path)) {\n\t\t\t\tself::$error = __ ('Invalid folder');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (! self::verify_file_name ($basename)) {\n\t\t\t\tself::$error = __ ('Invalid file name');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn touch (self::root () . $file);\n\t}\n\n\t/**\n\t * Make a new folder.\n\t */\n\tpublic static function mkdir ($folder) {\n\t\t$parts = explode ('/', $folder);\n\t\t$newdir = array_pop ($parts);\n\t\t$path = preg_replace ('/\\/?' . preg_quote ($newdir) . '$/', '', $folder);\n\t\tif (! self::verify_folder ($path)) {\n\t\t\tself::$error = __ ('Invalid location');\n\t\t\treturn false;\n\t\t} elseif (! self::verify_folder_name ($newdir)) {\n\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\treturn false;\n\t\t} elseif (is_dir (self::root () . $folder)) {\n\t\t\tself::$error = __ ('Folder already exists') . ' ' . $folder;\n\t\t\treturn false;\n\t\t} elseif (! mkdir (self::root () . $folder)) {\n\t\t\tself::$error = __ ('Unable to create folder') . ' ' . $folder;\n\t\t\treturn false;\n\t\t}\n\t\tchmod (self::root () . $folder, 0777);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Remove a folder. The folder must be empty, or recursive\n\t * must be set to true to remove non-empty folders.\n\t */\n\tpublic static function rmdir ($folder, $recursive = false) {\n\t\tif (! self::verify_folder ($folder)) {\n\t\t\tself::$error = __ ('Invalid folder name');\n\t\t\treturn false;\n\t\t}\n\n\t\t$list = self::dir ($folder);\n\t\tif (! $list) {\n\t\t\tself::$error = __ ('Unable to verify folder');\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (! $recursive) {\n\t\t\tif (count ($list['dirs']) > 0 || count ($list['files']) > 0) {\n\t\t\t\tself::$error = __ ('Folder must be empty');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (! rmdir (self::root () . $folder)) {\n\t\t\t\tself::$error = __ ('Unable to delete folder');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn self::rmdir_recursive (self::root () . $folder);\n\t}\n\n\t/**\n\t * Handles recursively deleting folders for `FileManager::rmdir()`.\n\t */\n\tprivate static function rmdir_recursive ($path) {\n\t\tif (preg_match ('|/\\.+$|', $path)) {\n\t\t\treturn;\n\t\t}\n\t\treturn is_file ($path)\n\t\t\t? unlink ($path)\n\t\t\t: array_map (array ('FileManager', 'rmdir_recursive'), glob ($path . '/{,.}*', GLOB_BRACE)) == rmdir ($path);\n\t}\n\n\t/**\n\t * Returns a list of folders recursively under the specified\n\t * folder path.\n\t */\n\tpublic static function list_folders ($path = '') {\n\t\t$folders = array ();\n                $root = conf('Paths','filemanager_path');\n\t\tif (! empty ($path)) {\n\t\t\t$rpath = $root . \"/\" . $path;\n\t\t\t$epath = $path . '/';\n\t\t} else {\n\t\t\t$rpath = $root;\n\t\t\t$epath = '';\n\t\t}\n\t\t$d = dir ($rpath);\n\t\tif (! $d) {\n\t\t\treturn array ();\n\t\t}\n\t\twhile (false !== ($file = $d->read ())) {\n\t\t\t$files[] = $file;\n\t\t}\n\t\t$d->close ();\n\n\t\tforeach ($files as $file) {\n\t\t\tif (strpos ($file, '.') === 0 || ! @is_dir ($rpath . '/' . $file)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$folders[] = $epath . $file;\n\t\t\t$subs = self::list_folders ($epath . $file);\n\t\t\tforeach ($subs as $sub) {\n\t\t\t\t$folders[] = $sub;\n\t\t\t}\n\t\t}\n\t\treturn $folders;\n\t}\n\n\t/**\n\t * Verify that the specified folder is valid, and exists\n\t * inside a certain root folder.\n\t */\n\tpublic static function verify_folder ($path, $root = false) {\n\t\t$root = ($root) ? rtrim ($root) : rtrim (self::root ());\n\t\t$path = trim ($path, '/');\n\t\tif (strpos ($path, '..') !== false) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! @is_dir ($root . '/' . $path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verify that the specified file is valid, and exists\n\t * inside a certain root folder.\n\t */\n\tpublic static function verify_file ($path, $root = false) {\n\t\t$root = ($root) ? rtrim ($root) : rtrim (self::root ());\n\t\t$path = trim ($path, '/');\n\t\tif (strpos ($path, '..') !== false) {\n\t\t\treturn false;\n\t\t}\n\t\tif (! @file_exists ($root . '/' . $path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verify that a folder name contains only a-z, A-Z, 0-9,\n\t * underscores, and dashes.\n\t */\n\tpublic static function verify_folder_name ($name) {\n\t\tif (! preg_match ('/^[a-zA-Z0-9 _-]+$/', $name)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Verify that a file name contains only a-z, A-Z, 0-9,\n\t * underscores, and dashes, and a dot.\n\t */\n\tpublic static function verify_file_name ($name) {\n\t\tif (! preg_match ('/^[a-zA-Z0-9 _-]+\\.[a-zA-Z0-9_-]+$/', $name)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (preg_match ('/\\.(php|phtml|pht|php3|php4|php5|phar|js|rb|py|pl|sh|bash|exe|htaccess|htpasswd)$/i', $name)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper for sorting files by name. For use with `usort()`.\n\t */\n\tpublic static function fsort ($a, $b) {\n\t\treturn strcmp ($a['name'], $b['name']);\n\t}\n\n\t/**\n\t * Fetch all of the properties for the specified file.\n\t */\n\tpublic static function props ($file) {\n\t\treturn DB::pairs ('select prop, value from #prefix#filemanager_prop where file = ?', $file);\n\t}\n\n\t/**\n\t * Get or set a property for the specified file.\n\t * Can also retrieve an array of a property for a\n\t * list of files if `$file` is an array.\n\t */\n\tpublic static function prop ($file, $prop, $value = null) {\n\t\tif ($value !== null) {\n\t\t\t// takes an extra select query, but works cross-database\n\t\t\t$res = self::prop ($file, $prop);\n\t\t\tif ($res === $value) {\n\t\t\t\treturn $value;\n\t\t\t} elseif ($res === false || $res === null) {\n\t\t\t\t// doesn't exist yet\n\t\t\t\tif (! DB::execute (\n\t\t\t\t\t'insert into #prefix#filemanager_prop (file, prop, value) values (?, ?, ?)',\n\t\t\t\t\t$file,\n\t\t\t\t\t$prop,\n\t\t\t\t\t$value\n\t\t\t\t)) {\n\t\t\t\t\tself::$error = DB::error ();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// already exists, update\n\t\t\t\tif (! DB::execute (\n\t\t\t\t\t'update #prefix#filemanager_prop set value = ? where file = ? and prop = ?',\n\t\t\t\t\t$value,\n\t\t\t\t\t$file,\n\t\t\t\t\t$prop\n\t\t\t\t)) {\n\t\t\t\t\tself::$error = DB::error ();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $value;\n\t\t}\n\t\tif (is_array ($file)) {\n\t\t\t// get as a list\n\t\t\t$qmarks = array_fill (0, count ($file), '?');\n\t\t\t$file[] = $prop;\n\t\t\treturn DB::pairs (\n\t\t\t\t'select file, value from #prefix#filemanager_prop where file in(' . join (', ', $qmarks) . ') and prop = ?',\n\t\t\t\t$file\n\t\t\t);\n\t\t}\n\t\t// get a single value\n\t\treturn DB::shift (\n\t\t\t'select value from #prefix#filemanager_prop where file = ? and prop = ?',\n\t\t\t$file,\n\t\t\t$prop\n\t\t);\n\t}\n\n\t/**\n\t * Rename the properties for a file that has been renamed.\n\t */\n\tpublic static function prop_rename ($file, $new_name, $folder = false) {\n\t\tif ($folder) {\n\t\t\tif (! DB::execute (\n\t\t\t\t'update #prefix#filemanager_prop set file = replace(file, ?, ?) where file like ?',\n\t\t\t\t$file . '/',\n\t\t\t\t$new_name . '/',\n\t\t\t\t$file . '/%'\n\t\t\t)) {\n\t\t\t\tself::$error = DB::error ();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (! DB::execute (\n\t\t\t'update #prefix#filemanager_prop set file = ? where file = ?',\n\t\t\t$new_name,\n\t\t\t$file\n\t\t)) {\n\t\t\tself::$error = DB::error ();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete the properties for a file that has been deleted.\n\t */\n\tpublic static function prop_delete ($file) {\n\t\tif (! DB::execute (\n\t\t\t'delete from #prefix#filemanager_prop where file = ?',\n\t\t\t$file\n\t\t)) {\n\t\t\tself::$error = DB::error ();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"], "filenames": ["apps/filemanager/handlers/embed.php", "apps/filemanager/handlers/redactor/upload.php", "apps/filemanager/handlers/upload.php", "apps/filemanager/handlers/upload/drop.php", "apps/filemanager/lib/API.php", "apps/filemanager/lib/FileManager.php"], "buggy_code_start_loc": [113, 44, 52, 48, 16, 162], "buggy_code_end_loc": [114, 47, 66, 51, 204, 409], "fixing_code_start_loc": [113, 44, 52, 48, 16, 163], "fixing_code_end_loc": [116, 47, 66, 51, 204, 412], "type": "CWE-434", "message": "An issue was discovered in Elefant CMS before 2.0.7. There is a PHP Code Execution Vulnerability in apps/filemanager/upload/drop.php by using /filemanager/api/rm/.htaccess to remove the .htaccess file, and then using a filename that ends in .php followed by space characters (for bypassing the blacklist).", "other": {"cve": {"id": "CVE-2018-16974", "sourceIdentifier": "cve@mitre.org", "published": "2018-09-12T21:29:00.613", "lastModified": "2018-11-19T20:09:22.873", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Elefant CMS before 2.0.7. There is a PHP Code Execution Vulnerability in apps/filemanager/upload/drop.php by using /filemanager/api/rm/.htaccess to remove the .htaccess file, and then using a filename that ends in .php followed by space characters (for bypassing the blacklist)."}, {"lang": "es", "value": "Se ha descubierto un problema en versiones anteriores a la 2.0.7 de Elefant CMS. Hay una vulnerabilidad de ejecuci\u00f3n de c\u00f3digo PHP en apps/filemanager/upload/drop.php mediante el uso de /filemanager/api/rm/.htaccess para eliminar el archivo .htaccess y, a continuaci\u00f3n, utilizando un archivo que termina por .php seguido por caracteres de espacio (para eludir la lista negra)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:elefantcms:elefant:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.7", "matchCriteriaId": "1064DF8F-8937-4E41-96E1-180DA0EE9B59"}]}]}], "references": [{"url": "https://github.com/jbroadway/elefant/commit/49ba8cc24e9f009ce30d2c2eb9eefeb9be4ce1d0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jbroadway/elefant/issues/287", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/jbroadway/elefant/releases/tag/elefant_2_0_7_stable", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/jbroadway/elefant/commit/49ba8cc24e9f009ce30d2c2eb9eefeb9be4ce1d0"}}