{"buggy_code": ["<?php\n/**\n * These functions can be replaced via plugins. If plugins do not redefine these\n * functions, then these will be used instead.\n *\n * @package WordPress\n */\n\nif ( ! function_exists( 'wp_set_current_user' ) ) :\n\t/**\n\t * Changes the current user by ID or name.\n\t *\n\t * Set $id to null and specify a name if you do not know a user's ID.\n\t *\n\t * Some WordPress functionality is based on the current user and not based on\n\t * the signed in user. Therefore, it opens the ability to edit and perform\n\t * actions on users who aren't signed in.\n\t *\n\t * @since 2.0.3\n\t * @global WP_User $current_user The current user object which holds the user data.\n\t *\n\t * @param int    $id   User ID\n\t * @param string $name User's username\n\t * @return WP_User Current user User object\n\t */\n\tfunction wp_set_current_user( $id, $name = '' ) {\n\t\tglobal $current_user;\n\n\t\t// If `$id` matches the current user, there is nothing to do.\n\t\tif ( isset( $current_user )\n\t\t&& ( $current_user instanceof WP_User )\n\t\t&& ( $id == $current_user->ID )\n\t\t&& ( null !== $id )\n\t\t) {\n\t\t\treturn $current_user;\n\t\t}\n\n\t\t$current_user = new WP_User( $id, $name );\n\n\t\tsetup_userdata( $current_user->ID );\n\n\t\t/**\n\t\t * Fires after the current user is set.\n\t\t *\n\t\t * @since 2.0.1\n\t\t */\n\t\tdo_action( 'set_current_user' );\n\n\t\treturn $current_user;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_get_current_user' ) ) :\n\t/**\n\t * Retrieve the current user object.\n\t *\n\t * Will set the current user, if the current user is not set. The current user\n\t * will be set to the logged-in person. If no user is logged-in, then it will\n\t * set the current user to 0, which is invalid and won't have any permissions.\n\t *\n\t * @since 2.0.3\n\t *\n\t * @see _wp_get_current_user()\n\t * @global WP_User $current_user Checks if the current user is set.\n\t *\n\t * @return WP_User Current WP_User instance.\n\t */\n\tfunction wp_get_current_user() {\n\t\treturn _wp_get_current_user();\n\t}\nendif;\n\nif ( ! function_exists( 'get_userdata' ) ) :\n\t/**\n\t * Retrieve user info by user ID.\n\t *\n\t * @since 0.71\n\t *\n\t * @param int $user_id User ID\n\t * @return WP_User|false WP_User object on success, false on failure.\n\t */\n\tfunction get_userdata( $user_id ) {\n\t\treturn get_user_by( 'id', $user_id );\n\t}\nendif;\n\nif ( ! function_exists( 'get_user_by' ) ) :\n\t/**\n\t * Retrieve user info by a given field\n\t *\n\t * @since 2.8.0\n\t * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.\n\t *\n\t * @param string     $field The field to retrieve the user with. id | ID | slug | email | login.\n\t * @param int|string $value A value for $field. A user ID, slug, email address, or login name.\n\t * @return WP_User|false WP_User object on success, false on failure.\n\t */\n\tfunction get_user_by( $field, $value ) {\n\t\t$userdata = WP_User::get_data_by( $field, $value );\n\n\t\tif ( ! $userdata ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$user = new WP_User;\n\t\t$user->init( $userdata );\n\n\t\treturn $user;\n\t}\nendif;\n\nif ( ! function_exists( 'cache_users' ) ) :\n\t/**\n\t * Retrieve info for user lists to prevent multiple queries by get_userdata()\n\t *\n\t * @since 3.0.0\n\t *\n\t * @global wpdb $wpdb WordPress database abstraction object.\n\t *\n\t * @param array $user_ids User ID numbers list\n\t */\n\tfunction cache_users( $user_ids ) {\n\t\tglobal $wpdb;\n\n\t\t$clean = _get_non_cached_ids( $user_ids, 'users' );\n\n\t\tif ( empty( $clean ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$list = implode( ',', $clean );\n\n\t\t$users = $wpdb->get_results( \"SELECT * FROM $wpdb->users WHERE ID IN ($list)\" );\n\n\t\t$ids = array();\n\t\tforeach ( $users as $user ) {\n\t\t\tupdate_user_caches( $user );\n\t\t\t$ids[] = $user->ID;\n\t\t}\n\t\tupdate_meta_cache( 'user', $ids );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_mail' ) ) :\n\t/**\n\t * Sends an email, similar to PHP's mail function.\n\t *\n\t * A true return value does not automatically mean that the user received the\n\t * email successfully. It just only means that the method used was able to\n\t * process the request without any errors.\n\t *\n\t * The default content type is `text/plain` which does not allow using HTML.\n\t * However, you can set the content type of the email by using the\n\t * {@see 'wp_mail_content_type'} filter.\n\t *\n\t * The default charset is based on the charset used on the blog. The charset can\n\t * be set using the {@see 'wp_mail_charset'} filter.\n\t *\n\t * @since 1.2.1\n\t *\n\t * @global PHPMailer $phpmailer\n\t *\n\t * @param string|array $to          Array or comma-separated list of email addresses to send message.\n\t * @param string       $subject     Email subject\n\t * @param string       $message     Message contents\n\t * @param string|array $headers     Optional. Additional headers.\n\t * @param string|array $attachments Optional. Files to attach.\n\t * @return bool Whether the email contents were sent successfully.\n\t */\n\tfunction wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {\n\t\t// Compact the input, apply the filters, and extract them back out.\n\n\t\t/**\n\t\t * Filters the wp_mail() arguments.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param array $args A compacted array of wp_mail() arguments, including the \"to\" email,\n\t\t *                    subject, message, headers, and attachments values.\n\t\t */\n\t\t$atts = apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) );\n\n\t\tif ( isset( $atts['to'] ) ) {\n\t\t\t$to = $atts['to'];\n\t\t}\n\n\t\tif ( ! is_array( $to ) ) {\n\t\t\t$to = explode( ',', $to );\n\t\t}\n\n\t\tif ( isset( $atts['subject'] ) ) {\n\t\t\t$subject = $atts['subject'];\n\t\t}\n\n\t\tif ( isset( $atts['message'] ) ) {\n\t\t\t$message = $atts['message'];\n\t\t}\n\n\t\tif ( isset( $atts['headers'] ) ) {\n\t\t\t$headers = $atts['headers'];\n\t\t}\n\n\t\tif ( isset( $atts['attachments'] ) ) {\n\t\t\t$attachments = $atts['attachments'];\n\t\t}\n\n\t\tif ( ! is_array( $attachments ) ) {\n\t\t\t$attachments = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $attachments ) );\n\t\t}\n\t\tglobal $phpmailer;\n\n\t\t// (Re)create it, if it's gone missing.\n\t\tif ( ! ( $phpmailer instanceof PHPMailer ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/class-phpmailer.php';\n\t\t\trequire_once ABSPATH . WPINC . '/class-smtp.php';\n\t\t\t$phpmailer = new PHPMailer( true );\n\t\t}\n\n\t\t// Headers.\n\t\t$cc       = array();\n\t\t$bcc      = array();\n\t\t$reply_to = array();\n\n\t\tif ( empty( $headers ) ) {\n\t\t\t$headers = array();\n\t\t} else {\n\t\t\tif ( ! is_array( $headers ) ) {\n\t\t\t\t// Explode the headers out, so this function can take\n\t\t\t\t// both string headers and an array of headers.\n\t\t\t\t$tempheaders = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $headers ) );\n\t\t\t} else {\n\t\t\t\t$tempheaders = $headers;\n\t\t\t}\n\t\t\t$headers = array();\n\n\t\t\t// If it's actually got contents.\n\t\t\tif ( ! empty( $tempheaders ) ) {\n\t\t\t\t// Iterate through the raw headers.\n\t\t\t\tforeach ( (array) $tempheaders as $header ) {\n\t\t\t\t\tif ( strpos( $header, ':' ) === false ) {\n\t\t\t\t\t\tif ( false !== stripos( $header, 'boundary=' ) ) {\n\t\t\t\t\t\t\t$parts    = preg_split( '/boundary=/i', trim( $header ) );\n\t\t\t\t\t\t\t$boundary = trim( str_replace( array( \"'\", '\"' ), '', $parts[1] ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// Explode them out.\n\t\t\t\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t\t\t\t// Cleanup crew.\n\t\t\t\t\t$name    = trim( $name );\n\t\t\t\t\t$content = trim( $content );\n\n\t\t\t\t\tswitch ( strtolower( $name ) ) {\n\t\t\t\t\t\t// Mainly for legacy -- process a \"From:\" header if it's there.\n\t\t\t\t\t\tcase 'from':\n\t\t\t\t\t\t\t$bracket_pos = strpos( $content, '<' );\n\t\t\t\t\t\t\tif ( false !== $bracket_pos ) {\n\t\t\t\t\t\t\t\t// Text before the bracketed email is the \"From\" name.\n\t\t\t\t\t\t\t\tif ( $bracket_pos > 0 ) {\n\t\t\t\t\t\t\t\t\t$from_name = substr( $content, 0, $bracket_pos - 1 );\n\t\t\t\t\t\t\t\t\t$from_name = str_replace( '\"', '', $from_name );\n\t\t\t\t\t\t\t\t\t$from_name = trim( $from_name );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$from_email = substr( $content, $bracket_pos + 1 );\n\t\t\t\t\t\t\t\t$from_email = str_replace( '>', '', $from_email );\n\t\t\t\t\t\t\t\t$from_email = trim( $from_email );\n\n\t\t\t\t\t\t\t\t// Avoid setting an empty $from_email.\n\t\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t\t$from_email = trim( $content );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'content-type':\n\t\t\t\t\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\t\t\t\t\tlist( $type, $charset_content ) = explode( ';', $content );\n\t\t\t\t\t\t\t\t$content_type                   = trim( $type );\n\t\t\t\t\t\t\t\tif ( false !== stripos( $charset_content, 'charset=' ) ) {\n\t\t\t\t\t\t\t\t\t$charset = trim( str_replace( array( 'charset=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t\t} elseif ( false !== stripos( $charset_content, 'boundary=' ) ) {\n\t\t\t\t\t\t\t\t\t$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t\t\t$charset  = '';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Avoid setting an empty $content_type.\n\t\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t\t$content_type = trim( $content );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t\t$cc = array_merge( (array) $cc, explode( ',', $content ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t\t$bcc = array_merge( (array) $bcc, explode( ',', $content ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'reply-to':\n\t\t\t\t\t\t\t$reply_to = array_merge( (array) $reply_to, explode( ',', $content ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// Add it to our grand headers array.\n\t\t\t\t\t\t\t$headers[ trim( $name ) ] = trim( $content );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Empty out the values that may be set.\n\t\t$phpmailer->clearAllRecipients();\n\t\t$phpmailer->clearAttachments();\n\t\t$phpmailer->clearCustomHeaders();\n\t\t$phpmailer->clearReplyTos();\n\n\t\t// Set \"From\" name and email.\n\n\t\t// If we don't have a name from the input headers.\n\t\tif ( ! isset( $from_name ) ) {\n\t\t\t$from_name = 'WordPress';\n\t\t}\n\n\t\t/*\n\t\t * If we don't have an email from the input headers, default to wordpress@$sitename\n\t\t * Some hosts will block outgoing mail from this address if it doesn't exist,\n\t\t * but there's no easy alternative. Defaulting to admin_email might appear to be\n\t\t * another option, but some hosts may refuse to relay mail from an unknown domain.\n\t\t * See https://core.trac.wordpress.org/ticket/5007.\n\t\t */\n\t\tif ( ! isset( $from_email ) ) {\n\t\t\t// Get the site domain and get rid of www.\n\t\t\t$sitename = strtolower( $_SERVER['SERVER_NAME'] );\n\t\t\tif ( substr( $sitename, 0, 4 ) == 'www.' ) {\n\t\t\t\t$sitename = substr( $sitename, 4 );\n\t\t\t}\n\n\t\t\t$from_email = 'wordpress@' . $sitename;\n\t\t}\n\n\t\t/**\n\t\t * Filters the email address to send from.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param string $from_email Email address to send from.\n\t\t */\n\t\t$from_email = apply_filters( 'wp_mail_from', $from_email );\n\n\t\t/**\n\t\t * Filters the name to associate with the \"from\" email address.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $from_name Name associated with the \"from\" email address.\n\t\t */\n\t\t$from_name = apply_filters( 'wp_mail_from_name', $from_name );\n\n\t\ttry {\n\t\t\t$phpmailer->setFrom( $from_email, $from_name, false );\n\t\t} catch ( phpmailerException $e ) {\n\t\t\t$mail_error_data                             = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Set mail's subject and body.\n\t\t$phpmailer->Subject = $subject;\n\t\t$phpmailer->Body    = $message;\n\n\t\t// Set destination addresses, using appropriate methods for handling addresses.\n\t\t$address_headers = compact( 'to', 'cc', 'bcc', 'reply_to' );\n\n\t\tforeach ( $address_headers as $address_header => $addresses ) {\n\t\t\tif ( empty( $addresses ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ( (array) $addresses as $address ) {\n\t\t\t\ttry {\n\t\t\t\t\t// Break $recipient into name and address parts if in the format \"Foo <bar@baz.com>\".\n\t\t\t\t\t$recipient_name = '';\n\n\t\t\t\t\tif ( preg_match( '/(.*)<(.+)>/', $address, $matches ) ) {\n\t\t\t\t\t\tif ( count( $matches ) == 3 ) {\n\t\t\t\t\t\t\t$recipient_name = $matches[1];\n\t\t\t\t\t\t\t$address        = $matches[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( $address_header ) {\n\t\t\t\t\t\tcase 'to':\n\t\t\t\t\t\t\t$phpmailer->addAddress( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t\t$phpmailer->addCc( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t\t$phpmailer->addBcc( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'reply_to':\n\t\t\t\t\t\t\t$phpmailer->addReplyTo( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set to use PHP's mail().\n\t\t$phpmailer->isMail();\n\n\t\t// Set Content-Type and charset.\n\n\t\t// If we don't have a content-type from the input headers.\n\t\tif ( ! isset( $content_type ) ) {\n\t\t\t$content_type = 'text/plain';\n\t\t}\n\n\t\t/**\n\t\t * Filters the wp_mail() content type.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $content_type Default wp_mail() content type.\n\t\t */\n\t\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\t\t$phpmailer->ContentType = $content_type;\n\n\t\t// Set whether it's plaintext, depending on $content_type.\n\t\tif ( 'text/html' == $content_type ) {\n\t\t\t$phpmailer->isHTML( true );\n\t\t}\n\n\t\t// If we don't have a charset from the input headers.\n\t\tif ( ! isset( $charset ) ) {\n\t\t\t$charset = get_bloginfo( 'charset' );\n\t\t}\n\n\t\t/**\n\t\t * Filters the default wp_mail() charset.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $charset Default email charset.\n\t\t */\n\t\t$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );\n\n\t\t// Set custom headers.\n\t\tif ( ! empty( $headers ) ) {\n\t\t\tforeach ( (array) $headers as $name => $content ) {\n\t\t\t\t// Only add custom headers not added automatically by PHPMailer.\n\t\t\t\tif ( ! in_array( $name, array( 'MIME-Version', 'X-Mailer' ) ) ) {\n\t\t\t\t\t$phpmailer->addCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( false !== stripos( $content_type, 'multipart' ) && ! empty( $boundary ) ) {\n\t\t\t\t$phpmailer->addCustomHeader( sprintf( \"Content-Type: %s;\\n\\t boundary=\\\"%s\\\"\", $content_type, $boundary ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $attachments ) ) {\n\t\t\tforeach ( $attachments as $attachment ) {\n\t\t\t\ttry {\n\t\t\t\t\t$phpmailer->addAttachment( $attachment );\n\t\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fires after PHPMailer is initialized.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param PHPMailer $phpmailer The PHPMailer instance (passed by reference).\n\t\t */\n\t\tdo_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );\n\n\t\t// Send!\n\t\ttry {\n\t\t\treturn $phpmailer->send();\n\t\t} catch ( phpmailerException $e ) {\n\n\t\t\t$mail_error_data                             = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t\t/**\n\t\t\t * Fires after a phpmailerException is caught.\n\t\t\t *\n\t\t\t * @since 4.4.0\n\t\t\t *\n\t\t\t * @param WP_Error $error A WP_Error object with the phpmailerException message, and an array\n\t\t\t *                        containing the mail recipient, subject, message, headers, and attachments.\n\t\t\t */\n\t\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\t\treturn false;\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_authenticate' ) ) :\n\t/**\n\t * Authenticate a user, confirming the login credentials are valid.\n\t *\n\t * @since 2.5.0\n\t * @since 4.5.0 `$username` now accepts an email address.\n\t *\n\t * @param string $username User's username or email address.\n\t * @param string $password User's password.\n\t * @return WP_User|WP_Error WP_User object if the credentials are valid,\n\t *                          otherwise WP_Error.\n\t */\n\tfunction wp_authenticate( $username, $password ) {\n\t\t$username = sanitize_user( $username );\n\t\t$password = trim( $password );\n\n\t\t/**\n\t\t * Filters whether a set of user login credentials are valid.\n\t\t *\n\t\t * A WP_User object is returned if the credentials authenticate a user.\n\t\t * WP_Error or null otherwise.\n\t\t *\n\t\t * @since 2.8.0\n\t\t * @since 4.5.0 `$username` now accepts an email address.\n\t\t *\n\t\t * @param null|WP_User|WP_Error $user     WP_User if the user is authenticated.\n\t\t *                                        WP_Error or null otherwise.\n\t\t * @param string                $username Username or email address.\n\t\t * @param string                $password User password\n\t\t */\n\t\t$user = apply_filters( 'authenticate', null, $username, $password );\n\n\t\tif ( null == $user ) {\n\t\t\t// TODO: What should the error message be? (Or would these even happen?)\n\t\t\t// Only needed if all authentication handlers fail to return anything.\n\t\t\t$user = new WP_Error( 'authentication_failed', __( '<strong>Error</strong>: Invalid username, email address or incorrect password.' ) );\n\t\t}\n\n\t\t$ignore_codes = array( 'empty_username', 'empty_password' );\n\n\t\tif ( is_wp_error( $user ) && ! in_array( $user->get_error_code(), $ignore_codes ) ) {\n\t\t\t$error = $user;\n\n\t\t\t/**\n\t\t\t * Fires after a user login has failed.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t * @since 4.5.0 The value of `$username` can now be an email address.\n\t\t\t * @since 5.4.0 The `$error` parameter was added.\n\t\t\t *\n\t\t\t * @param string   $username Username or email address.\n\t\t\t * @param WP_Error $error    A WP_Error object with the authentication failure details.\n\t\t\t */\n\t\t\tdo_action( 'wp_login_failed', $username, $error );\n\t\t}\n\n\t\treturn $user;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_logout' ) ) :\n\t/**\n\t * Log the current user out.\n\t *\n\t * @since 2.5.0\n\t */\n\tfunction wp_logout() {\n\t\twp_destroy_current_session();\n\t\twp_clear_auth_cookie();\n\t\twp_set_current_user( 0 );\n\n\t\t/**\n\t\t * Fires after a user is logged-out.\n\t\t *\n\t\t * @since 1.5.0\n\t\t */\n\t\tdo_action( 'wp_logout' );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_validate_auth_cookie' ) ) :\n\t/**\n\t * Validates authentication cookie.\n\t *\n\t * The checks include making sure that the authentication cookie is set and\n\t * pulling in the contents (if $cookie is not used).\n\t *\n\t * Makes sure the cookie is not expired. Verifies the hash in cookie is what is\n\t * should be and compares the two.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global int $login_grace_period\n\t *\n\t * @param string $cookie Optional. If used, will validate contents instead of cookie's.\n\t * @param string $scheme Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.\n\t * @return int|false User ID if valid cookie, false if invalid.\n\t */\n\tfunction wp_validate_auth_cookie( $cookie = '', $scheme = '' ) {\n\t\t$cookie_elements = wp_parse_auth_cookie( $cookie, $scheme );\n\t\tif ( ! $cookie_elements ) {\n\t\t\t/**\n\t\t\t * Fires if an authentication cookie is malformed.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string $cookie Malformed auth cookie.\n\t\t\t * @param string $scheme Authentication scheme. Values include 'auth', 'secure_auth',\n\t\t\t *                       or 'logged_in'.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_malformed', $cookie, $scheme );\n\t\t\treturn false;\n\t\t}\n\n\t\t$scheme     = $cookie_elements['scheme'];\n\t\t$username   = $cookie_elements['username'];\n\t\t$hmac       = $cookie_elements['hmac'];\n\t\t$token      = $cookie_elements['token'];\n\t\t$expired    = $cookie_elements['expiration'];\n\t\t$expiration = $cookie_elements['expiration'];\n\n\t\t// Allow a grace period for POST and Ajax requests.\n\t\tif ( wp_doing_ajax() || 'POST' == $_SERVER['REQUEST_METHOD'] ) {\n\t\t\t$expired += HOUR_IN_SECONDS;\n\t\t}\n\n\t\t// Quick check to see if an honest cookie has expired.\n\t\tif ( $expired < time() ) {\n\t\t\t/**\n\t\t\t * Fires once an authentication cookie has expired.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_expired', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t$user = get_user_by( 'login', $username );\n\t\tif ( ! $user ) {\n\t\t\t/**\n\t\t\t * Fires if a bad username is entered in the user authentication process.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_bad_username', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t$pass_frag = substr( $user->user_pass, 8, 4 );\n\n\t\t$key = wp_hash( $username . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t\t$hash = hash_hmac( $algo, $username . '|' . $expiration . '|' . $token, $key );\n\n\t\tif ( ! hash_equals( $hash, $hmac ) ) {\n\t\t\t/**\n\t\t\t * Fires if a bad authentication cookie hash is encountered.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_bad_hash', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t$manager = WP_Session_Tokens::get_instance( $user->ID );\n\t\tif ( ! $manager->verify( $token ) ) {\n\t\t\t/**\n\t\t\t * Fires if a bad session token is encountered.\n\t\t\t *\n\t\t\t * @since 4.0.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_bad_session_token', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ajax/POST grace period set above.\n\t\tif ( $expiration < time() ) {\n\t\t\t$GLOBALS['login_grace_period'] = 1;\n\t\t}\n\n\t\t/**\n\t\t * Fires once an authentication cookie has been validated.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t * @param WP_User  $user            User object.\n\t\t */\n\t\tdo_action( 'auth_cookie_valid', $cookie_elements, $user );\n\n\t\treturn $user->ID;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_generate_auth_cookie' ) ) :\n\t/**\n\t * Generates authentication cookie contents.\n\t *\n\t * @since 2.5.0\n\t * @since 4.0.0 The `$token` parameter was added.\n\t *\n\t * @param int    $user_id    User ID.\n\t * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n\t * @param string $scheme     Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.\n\t *                           Default 'auth'.\n\t * @param string $token      User's session token to use for this cookie.\n\t * @return string Authentication cookie contents. Empty string if user does not exist.\n\t */\n\tfunction wp_generate_auth_cookie( $user_id, $expiration, $scheme = 'auth', $token = '' ) {\n\t\t$user = get_userdata( $user_id );\n\t\tif ( ! $user ) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif ( ! $token ) {\n\t\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t\t$token   = $manager->create( $expiration );\n\t\t}\n\n\t\t$pass_frag = substr( $user->user_pass, 8, 4 );\n\n\t\t$key = wp_hash( $user->user_login . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t\t$hash = hash_hmac( $algo, $user->user_login . '|' . $expiration . '|' . $token, $key );\n\n\t\t$cookie = $user->user_login . '|' . $expiration . '|' . $token . '|' . $hash;\n\n\t\t/**\n\t\t * Filters the authentication cookie.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.0.0 The `$token` parameter was added.\n\t\t *\n\t\t * @param string $cookie     Authentication cookie.\n\t\t * @param int    $user_id    User ID.\n\t\t * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n\t\t * @param string $scheme     Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'.\n\t\t * @param string $token      User's session token used.\n\t\t */\n\t\treturn apply_filters( 'auth_cookie', $cookie, $user_id, $expiration, $scheme, $token );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_parse_auth_cookie' ) ) :\n\t/**\n\t * Parses a cookie into its components.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string $cookie Authentication cookie.\n\t * @param string $scheme Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.\n\t * @return string[]|false Authentication cookie components.\n\t */\n\tfunction wp_parse_auth_cookie( $cookie = '', $scheme = '' ) {\n\t\tif ( empty( $cookie ) ) {\n\t\t\tswitch ( $scheme ) {\n\t\t\t\tcase 'auth':\n\t\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'secure_auth':\n\t\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'logged_in':\n\t\t\t\t\t$cookie_name = LOGGED_IN_COOKIE;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif ( is_ssl() ) {\n\t\t\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\t\t\t$scheme      = 'secure_auth';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\t\t\t$scheme      = 'auth';\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $_COOKIE[ $cookie_name ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$cookie = $_COOKIE[ $cookie_name ];\n\t\t}\n\n\t\t$cookie_elements = explode( '|', $cookie );\n\t\tif ( count( $cookie_elements ) !== 4 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlist( $username, $expiration, $token, $hmac ) = $cookie_elements;\n\n\t\treturn compact( 'username', 'expiration', 'token', 'hmac', 'scheme' );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_set_auth_cookie' ) ) :\n\t/**\n\t * Sets the authentication cookies based on user ID.\n\t *\n\t * The $remember parameter increases the time that the cookie will be kept. The\n\t * default the cookie is kept without remembering is two days. When $remember is\n\t * set, the cookies will be kept for 14 days or two weeks.\n\t *\n\t * @since 2.5.0\n\t * @since 4.3.0 Added the `$token` parameter.\n\t *\n\t * @param int         $user_id  User ID.\n\t * @param bool        $remember Whether to remember the user.\n\t * @param bool|string $secure   Whether the auth cookie should only be sent over HTTPS. Default is an empty\n\t *                              string which means the value of `is_ssl()` will be used.\n\t * @param string      $token    Optional. User's session token to use for this cookie.\n\t */\n\tfunction wp_set_auth_cookie( $user_id, $remember = false, $secure = '', $token = '' ) {\n\t\tif ( $remember ) {\n\t\t\t/**\n\t\t\t * Filters the duration of the authentication cookie expiration period.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param int  $length   Duration of the expiration period in seconds.\n\t\t\t * @param int  $user_id  User ID.\n\t\t\t * @param bool $remember Whether to remember the user login. Default false.\n\t\t\t */\n\t\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 14 * DAY_IN_SECONDS, $user_id, $remember );\n\n\t\t\t/*\n\t\t\t * Ensure the browser will continue to send the cookie after the expiration time is reached.\n\t\t\t * Needed for the login grace period in wp_validate_auth_cookie().\n\t\t\t */\n\t\t\t$expire = $expiration + ( 12 * HOUR_IN_SECONDS );\n\t\t} else {\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 2 * DAY_IN_SECONDS, $user_id, $remember );\n\t\t\t$expire     = 0;\n\t\t}\n\n\t\tif ( '' === $secure ) {\n\t\t\t$secure = is_ssl();\n\t\t}\n\n\t\t// Front-end cookie is secure when the auth cookie is secure and the site's home URL uses HTTPS.\n\t\t$secure_logged_in_cookie = $secure && 'https' === parse_url( get_option( 'home' ), PHP_URL_SCHEME );\n\n\t\t/**\n\t\t * Filters whether the auth cookie should only be sent over HTTPS.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool $secure  Whether the cookie should only be sent over HTTPS.\n\t\t * @param int  $user_id User ID.\n\t\t */\n\t\t$secure = apply_filters( 'secure_auth_cookie', $secure, $user_id );\n\n\t\t/**\n\t\t * Filters whether the logged in cookie should only be sent over HTTPS.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool $secure_logged_in_cookie Whether the logged in cookie should only be sent over HTTPS.\n\t\t * @param int  $user_id                 User ID.\n\t\t * @param bool $secure                  Whether the auth cookie should only be sent over HTTPS.\n\t\t */\n\t\t$secure_logged_in_cookie = apply_filters( 'secure_logged_in_cookie', $secure_logged_in_cookie, $user_id, $secure );\n\n\t\tif ( $secure ) {\n\t\t\t$auth_cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t$scheme           = 'secure_auth';\n\t\t} else {\n\t\t\t$auth_cookie_name = AUTH_COOKIE;\n\t\t\t$scheme           = 'auth';\n\t\t}\n\n\t\tif ( '' === $token ) {\n\t\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t\t$token   = $manager->create( $expiration );\n\t\t}\n\n\t\t$auth_cookie      = wp_generate_auth_cookie( $user_id, $expiration, $scheme, $token );\n\t\t$logged_in_cookie = wp_generate_auth_cookie( $user_id, $expiration, 'logged_in', $token );\n\n\t\t/**\n\t\t * Fires immediately before the authentication cookie is set.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.9.0 The `$token` parameter was added.\n\t\t *\n\t\t * @param string $auth_cookie Authentication cookie value.\n\t\t * @param int    $expire      The time the login grace period expires as a UNIX timestamp.\n\t\t *                            Default is 12 hours past the cookie's expiration time.\n\t\t * @param int    $expiration  The time when the authentication cookie expires as a UNIX timestamp.\n\t\t *                            Default is 14 days from now.\n\t\t * @param int    $user_id     User ID.\n\t\t * @param string $scheme      Authentication scheme. Values include 'auth' or 'secure_auth'.\n\t\t * @param string $token       User's session token to use for this cookie.\n\t\t */\n\t\tdo_action( 'set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme, $token );\n\n\t\t/**\n\t\t * Fires immediately before the logged-in authentication cookie is set.\n\t\t *\n\t\t * @since 2.6.0\n\t\t * @since 4.9.0 The `$token` parameter was added.\n\t\t *\n\t\t * @param string $logged_in_cookie The logged-in cookie value.\n\t\t * @param int    $expire           The time the login grace period expires as a UNIX timestamp.\n\t\t *                                 Default is 12 hours past the cookie's expiration time.\n\t\t * @param int    $expiration       The time when the logged-in authentication cookie expires as a UNIX timestamp.\n\t\t *                                 Default is 14 days from now.\n\t\t * @param int    $user_id          User ID.\n\t\t * @param string $scheme           Authentication scheme. Default 'logged_in'.\n\t\t * @param string $token            User's session token to use for this cookie.\n\t\t */\n\t\tdo_action( 'set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in', $token );\n\n\t\t/**\n\t\t * Allows preventing auth cookies from actually being sent to the client.\n\t\t *\n\t\t * @since 4.7.4\n\t\t *\n\t\t * @param bool $send Whether to send auth cookies to the client.\n\t\t */\n\t\tif ( ! apply_filters( 'send_auth_cookies', true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetcookie( $auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true );\n\t\tsetcookie( $auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true );\n\t\tsetcookie( LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true );\n\t\tif ( COOKIEPATH != SITECOOKIEPATH ) {\n\t\t\tsetcookie( LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true );\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_clear_auth_cookie' ) ) :\n\t/**\n\t * Removes all of the cookies associated with authentication.\n\t *\n\t * @since 2.5.0\n\t */\n\tfunction wp_clear_auth_cookie() {\n\t\t/**\n\t\t * Fires just before the authentication cookies are cleared.\n\t\t *\n\t\t * @since 2.7.0\n\t\t */\n\t\tdo_action( 'clear_auth_cookie' );\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\tif ( ! apply_filters( 'send_auth_cookies', true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Auth cookies.\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( LOGGED_IN_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( LOGGED_IN_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t\t// Settings cookies.\n\t\tsetcookie( 'wp-settings-' . get_current_user_id(), ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH );\n\t\tsetcookie( 'wp-settings-time-' . get_current_user_id(), ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH );\n\n\t\t// Old cookies.\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t\t// Even older cookies.\n\t\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t\t// Post password cookie.\n\t\tsetcookie( 'wp-postpass_' . COOKIEHASH, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t}\nendif;\n\nif ( ! function_exists( 'is_user_logged_in' ) ) :\n\t/**\n\t * Determines whether the current visitor is a logged in user.\n\t *\n\t * For more information on this and similar theme functions, check out\n\t * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/\n\t * Conditional Tags} article in the Theme Developer Handbook.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @return bool True if user is logged in, false if not logged in.\n\t */\n\tfunction is_user_logged_in() {\n\t\t$user = wp_get_current_user();\n\n\t\treturn $user->exists();\n\t}\nendif;\n\nif ( ! function_exists( 'auth_redirect' ) ) :\n\t/**\n\t * Checks if a user is logged in, if not it redirects them to the login page.\n\t *\n\t * When this code is called from a page, it checks to see if the user viewing the page is logged in.\n\t * If the user is not logged in, they are redirected to the login page. The user is redirected\n\t * in such a way that, upon logging in, they will be sent directly to the page they were originally\n\t * trying to access.\n\t *\n\t * @since 1.5.0\n\t */\n\tfunction auth_redirect() {\n\t\t$secure = ( is_ssl() || force_ssl_admin() );\n\n\t\t/**\n\t\t * Filters whether to use a secure authentication redirect.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool $secure Whether to use a secure authentication redirect. Default false.\n\t\t */\n\t\t$secure = apply_filters( 'secure_auth_redirect', $secure );\n\n\t\t// If https is required and request is http, redirect.\n\t\tif ( $secure && ! is_ssl() && false !== strpos( $_SERVER['REQUEST_URI'], 'wp-admin' ) ) {\n\t\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the authentication redirect scheme.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param string $scheme Authentication redirect scheme. Default empty.\n\t\t */\n\t\t$scheme = apply_filters( 'auth_redirect_scheme', '' );\n\n\t\t$user_id = wp_validate_auth_cookie( '', $scheme );\n\t\tif ( $user_id ) {\n\t\t\t/**\n\t\t\t * Fires before the authentication redirect.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param int $user_id User ID.\n\t\t\t */\n\t\t\tdo_action( 'auth_redirect', $user_id );\n\n\t\t\t// If the user wants ssl but the session is not ssl, redirect.\n\t\t\tif ( ! $secure && get_user_option( 'use_ssl', $user_id ) && false !== strpos( $_SERVER['REQUEST_URI'], 'wp-admin' ) ) {\n\t\t\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\t\t\texit();\n\t\t\t\t} else {\n\t\t\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn; // The cookie is good, so we're done.\n\t\t}\n\n\t\t// The cookie is no good, so force login.\n\t\tnocache_headers();\n\n\t\t$redirect = ( strpos( $_SERVER['REQUEST_URI'], '/options.php' ) && wp_get_referer() ) ? wp_get_referer() : set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\n\t\t$login_url = wp_login_url( $redirect, true );\n\n\t\twp_redirect( $login_url );\n\t\texit();\n\t}\nendif;\n\nif ( ! function_exists( 'check_admin_referer' ) ) :\n\t/**\n\t * Ensures intent by verifying that a user was referred from another admin page with the correct security nonce.\n\t *\n\t * This function ensures the user intends to perform a given action, which helps protect against clickjacking style\n\t * attacks. It verifies intent, not authorisation, therefore it does not verify the user's capabilities. This should\n\t * be performed with `current_user_can()` or similar.\n\t *\n\t * If the nonce value is invalid, the function will exit with an \"Are You Sure?\" style message.\n\t *\n\t * @since 1.2.0\n\t * @since 2.5.0 The `$query_arg` parameter was added.\n\t *\n\t * @param int|string $action    The nonce action.\n\t * @param string     $query_arg Optional. Key to check for nonce in `$_REQUEST`. Default '_wpnonce'.\n\t * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,\n\t *                   2 if the nonce is valid and generated between 12-24 hours ago.\n\t *                   False if the nonce is invalid.\n\t */\n\tfunction check_admin_referer( $action = -1, $query_arg = '_wpnonce' ) {\n\t\tif ( -1 === $action ) {\n\t\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '3.2.0' );\n\t\t}\n\n\t\t$adminurl = strtolower( admin_url() );\n\t\t$referer  = strtolower( wp_get_referer() );\n\t\t$result   = isset( $_REQUEST[ $query_arg ] ) ? wp_verify_nonce( $_REQUEST[ $query_arg ], $action ) : false;\n\n\t\t/**\n\t\t * Fires once the admin request has been validated or not.\n\t\t *\n\t\t * @since 1.5.1\n\t\t *\n\t\t * @param string    $action The nonce action.\n\t\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t\t */\n\t\tdo_action( 'check_admin_referer', $action, $result );\n\n\t\tif ( ! $result && ! ( -1 === $action && strpos( $referer, $adminurl ) === 0 ) ) {\n\t\t\twp_nonce_ays( $action );\n\t\t\tdie();\n\t\t}\n\n\t\treturn $result;\n\t}\nendif;\n\nif ( ! function_exists( 'check_ajax_referer' ) ) :\n\t/**\n\t * Verifies the Ajax request to prevent processing requests external of the blog.\n\t *\n\t * @since 2.0.3\n\t *\n\t * @param int|string   $action    Action nonce.\n\t * @param false|string $query_arg Optional. Key to check for the nonce in `$_REQUEST` (since 2.5). If false,\n\t *                                `$_REQUEST` values will be evaluated for '_ajax_nonce', and '_wpnonce'\n\t *                                (in that order). Default false.\n\t * @param bool         $die       Optional. Whether to die early when the nonce cannot be verified.\n\t *                                Default true.\n\t * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,\n\t *                   2 if the nonce is valid and generated between 12-24 hours ago.\n\t *                   False if the nonce is invalid.\n\t */\n\tfunction check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {\n\t\tif ( -1 == $action ) {\n\t\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '4.7' );\n\t\t}\n\n\t\t$nonce = '';\n\n\t\tif ( $query_arg && isset( $_REQUEST[ $query_arg ] ) ) {\n\t\t\t$nonce = $_REQUEST[ $query_arg ];\n\t\t} elseif ( isset( $_REQUEST['_ajax_nonce'] ) ) {\n\t\t\t$nonce = $_REQUEST['_ajax_nonce'];\n\t\t} elseif ( isset( $_REQUEST['_wpnonce'] ) ) {\n\t\t\t$nonce = $_REQUEST['_wpnonce'];\n\t\t}\n\n\t\t$result = wp_verify_nonce( $nonce, $action );\n\n\t\t/**\n\t\t * Fires once the Ajax request has been validated or not.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string    $action The Ajax nonce action.\n\t\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t\t */\n\t\tdo_action( 'check_ajax_referer', $action, $result );\n\n\t\tif ( $die && false === $result ) {\n\t\t\tif ( wp_doing_ajax() ) {\n\t\t\t\twp_die( -1, 403 );\n\t\t\t} else {\n\t\t\t\tdie( '-1' );\n\t\t\t}\n\t\t}\n\n\t\treturn $result;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_redirect' ) ) :\n\t/**\n\t * Redirects to another page.\n\t *\n\t * Note: wp_redirect() does not exit automatically, and should almost always be\n\t * followed by a call to `exit;`:\n\t *\n\t *     wp_redirect( $url );\n\t *     exit;\n\t *\n\t * Exiting can also be selectively manipulated by using wp_redirect() as a conditional\n\t * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} filters:\n\t *\n\t *     if ( wp_redirect( $url ) ) {\n\t *         exit;\n\t *     }\n\t *\n\t * @since 1.5.1\n\t * @since 5.1.0 The `$x_redirect_by` parameter was added.\n\t * @since 5.4.0 On invalid status codes, wp_die() is called.\n\t *\n\t * @global bool $is_IIS\n\t *\n\t * @param string $location      The path or URL to redirect to.\n\t * @param int    $status        Optional. HTTP response status code to use. Default '302' (Moved Temporarily).\n\t * @param string $x_redirect_by Optional. The application doing the redirect. Default 'WordPress'.\n\t * @return bool False if the redirect was cancelled, true otherwise.\n\t */\n\tfunction wp_redirect( $location, $status = 302, $x_redirect_by = 'WordPress' ) {\n\t\tglobal $is_IIS;\n\n\t\t/**\n\t\t * Filters the redirect location.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $location The path or URL to redirect to.\n\t\t * @param int    $status   The HTTP response status code to use.\n\t\t */\n\t\t$location = apply_filters( 'wp_redirect', $location, $status );\n\n\t\t/**\n\t\t * Filters the redirect HTTP response status code to use.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param int    $status   The HTTP response status code to use.\n\t\t * @param string $location The path or URL to redirect to.\n\t\t */\n\t\t$status = apply_filters( 'wp_redirect_status', $status, $location );\n\n\t\tif ( ! $location ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( $status < 300 || 399 < $status ) {\n\t\t\twp_die( __( 'HTTP redirect status code must be a redirection code, 3xx.' ) );\n\t\t}\n\n\t\t$location = wp_sanitize_redirect( $location );\n\n\t\tif ( ! $is_IIS && PHP_SAPI != 'cgi-fcgi' ) {\n\t\t\tstatus_header( $status ); // This causes problems on IIS and some FastCGI setups.\n\t\t}\n\n\t\t/**\n\t\t * Filters the X-Redirect-By header.\n\t\t *\n\t\t * Allows applications to identify themselves when they're doing a redirect.\n\t\t *\n\t\t * @since 5.1.0\n\t\t *\n\t\t * @param string $x_redirect_by The application doing the redirect.\n\t\t * @param int    $status        Status code to use.\n\t\t * @param string $location      The path to redirect to.\n\t\t */\n\t\t$x_redirect_by = apply_filters( 'x_redirect_by', $x_redirect_by, $status, $location );\n\t\tif ( is_string( $x_redirect_by ) ) {\n\t\t\theader( \"X-Redirect-By: $x_redirect_by\" );\n\t\t}\n\n\t\theader( \"Location: $location\", true, $status );\n\n\t\treturn true;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_sanitize_redirect' ) ) :\n\t/**\n\t * Sanitizes a URL for use in a redirect.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $location The path to redirect to.\n\t * @return string Redirect-sanitized URL.\n\t */\n\tfunction wp_sanitize_redirect( $location ) {\n\t\t// Encode spaces.\n\t\t$location = str_replace( ' ', '%20', $location );\n\n\t\t$regex    = '/\n\t\t(\n\t\t\t(?: [\\xC2-\\xDF][\\x80-\\xBF]        # double-byte sequences   110xxxxx 10xxxxxx\n\t\t\t|   \\xE0[\\xA0-\\xBF][\\x80-\\xBF]    # triple-byte sequences   1110xxxx 10xxxxxx * 2\n\t\t\t|   [\\xE1-\\xEC][\\x80-\\xBF]{2}\n\t\t\t|   \\xED[\\x80-\\x9F][\\x80-\\xBF]\n\t\t\t|   [\\xEE-\\xEF][\\x80-\\xBF]{2}\n\t\t\t|   \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3\n\t\t\t|   [\\xF1-\\xF3][\\x80-\\xBF]{3}\n\t\t\t|   \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}\n\t\t){1,40}                              # ...one or more times\n\t\t)/x';\n\t\t$location = preg_replace_callback( $regex, '_wp_sanitize_utf8_in_redirect', $location );\n\t\t$location = preg_replace( '|[^a-z0-9-~+_.?#=&;,/:%!*\\[\\]()@]|i', '', $location );\n\t\t$location = wp_kses_no_null( $location );\n\n\t\t// Remove %0D and %0A from location.\n\t\t$strip = array( '%0d', '%0a', '%0D', '%0A' );\n\t\treturn _deep_replace( $strip, $location );\n\t}\n\n\t/**\n\t * URL encode UTF-8 characters in a URL.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t * @access private\n\t *\n\t * @see wp_sanitize_redirect()\n\t *\n\t * @param array $matches RegEx matches against the redirect location.\n\t * @return string URL-encoded version of the first RegEx match.\n\t */\n\tfunction _wp_sanitize_utf8_in_redirect( $matches ) {\n\t\treturn urlencode( $matches[0] );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_safe_redirect' ) ) :\n\t/**\n\t * Performs a safe (local) redirect, using wp_redirect().\n\t *\n\t * Checks whether the $location is using an allowed host, if it has an absolute\n\t * path. A plugin can therefore set or remove allowed host(s) to or from the\n\t * list.\n\t *\n\t * If the host is not allowed, then the redirect defaults to wp-admin on the siteurl\n\t * instead. This prevents malicious redirects which redirect to another host,\n\t * but only used in a few places.\n\t *\n\t * Note: wp_safe_redirect() does not exit automatically, and should almost always be\n\t * followed by a call to `exit;`:\n\t *\n\t *     wp_safe_redirect( $url );\n\t *     exit;\n\t *\n\t * Exiting can also be selectively manipulated by using wp_safe_redirect() as a conditional\n\t * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} filters:\n\t *\n\t *     if ( wp_safe_redirect( $url ) ) {\n\t *         exit;\n\t *     }\n\t *\n\t * @since 2.3.0\n\t * @since 5.1.0 The return value from wp_redirect() is now passed on, and the `$x_redirect_by` parameter was added.\n\t *\n\t * @param string $location      The path or URL to redirect to.\n\t * @param int    $status        Optional. HTTP response status code to use. Default '302' (Moved Temporarily).\n\t * @param string $x_redirect_by Optional. The application doing the redirect. Default 'WordPress'.\n\t * @return bool  $redirect False if the redirect was cancelled, true otherwise.\n\t */\n\tfunction wp_safe_redirect( $location, $status = 302, $x_redirect_by = 'WordPress' ) {\n\n\t\t// Need to look at the URL the way it will end up in wp_redirect().\n\t\t$location = wp_sanitize_redirect( $location );\n\n\t\t/**\n\t\t * Filters the redirect fallback URL for when the provided redirect is not safe (local).\n\t\t *\n\t\t * @since 4.3.0\n\t\t *\n\t\t * @param string $fallback_url The fallback URL to use by default.\n\t\t * @param int    $status       The HTTP response status code to use.\n\t\t */\n\t\t$location = wp_validate_redirect( $location, apply_filters( 'wp_safe_redirect_fallback', admin_url(), $status ) );\n\n\t\treturn wp_redirect( $location, $status, $x_redirect_by );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_validate_redirect' ) ) :\n\t/**\n\t * Validates a URL for use in a redirect.\n\t *\n\t * Checks whether the $location is using an allowed host, if it has an absolute\n\t * path. A plugin can therefore set or remove allowed host(s) to or from the\n\t * list.\n\t *\n\t * If the host is not allowed, then the redirect is to $default supplied\n\t *\n\t * @since 2.8.1\n\t *\n\t * @param string $location The redirect to validate\n\t * @param string $default  The value to return if $location is not allowed\n\t * @return string redirect-sanitized URL\n\t */\n\tfunction wp_validate_redirect( $location, $default = '' ) {\n\t\t$location = trim( $location, \" \\t\\n\\r\\0\\x08\\x0B\" );\n\t\t// Browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'.\n\t\tif ( substr( $location, 0, 2 ) == '//' ) {\n\t\t\t$location = 'http:' . $location;\n\t\t}\n\n\t\t// In PHP 5 parse_url() may fail if the URL query part contains 'http://'.\n\t\t// See https://bugs.php.net/bug.php?id=38143\n\t\t$cut  = strpos( $location, '?' );\n\t\t$test = $cut ? substr( $location, 0, $cut ) : $location;\n\n\t\t// @-operator is used to prevent possible warnings in PHP < 5.3.3.\n\t\t$lp = @parse_url( $test );\n\n\t\t// Give up if malformed URL.\n\t\tif ( false === $lp ) {\n\t\t\treturn $default;\n\t\t}\n\n\t\t// Allow only 'http' and 'https' schemes. No 'data:', etc.\n\t\tif ( isset( $lp['scheme'] ) && ! ( 'http' == $lp['scheme'] || 'https' == $lp['scheme'] ) ) {\n\t\t\treturn $default;\n\t\t}\n\n\t\tif ( ! isset( $lp['host'] ) && ! empty( $lp['path'] ) && '/' !== $lp['path'][0] ) {\n\t\t\t$path = '';\n\t\t\tif ( ! empty( $_SERVER['REQUEST_URI'] ) ) {\n\t\t\t\t$path = dirname( parse_url( 'http://placeholder' . $_SERVER['REQUEST_URI'], PHP_URL_PATH ) . '?' );\n\t\t\t\t$path = wp_normalize_path( $path );\n\t\t\t}\n\t\t\t$location = '/' . ltrim( $path . '/', '/' ) . $location;\n\t\t}\n\n\t\t// Reject if certain components are set but host is not.\n\t\t// This catches URLs like https:host.com for which parse_url() does not set the host field.\n\t\tif ( ! isset( $lp['host'] ) && ( isset( $lp['scheme'] ) || isset( $lp['user'] ) || isset( $lp['pass'] ) || isset( $lp['port'] ) ) ) {\n\t\t\treturn $default;\n\t\t}\n\n\t\t// Reject malformed components parse_url() can return on odd inputs.\n\t\tforeach ( array( 'user', 'pass', 'host' ) as $component ) {\n\t\t\tif ( isset( $lp[ $component ] ) && strpbrk( $lp[ $component ], ':/?#@' ) ) {\n\t\t\t\treturn $default;\n\t\t\t}\n\t\t}\n\n\t\t$wpp = parse_url( home_url() );\n\n\t\t/**\n\t\t * Filters the whitelist of hosts to redirect to.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string[] $hosts An array of allowed host names.\n\t\t * @param string   $host  The host name of the redirect destination; empty string if not set.\n\t\t */\n\t\t$allowed_hosts = (array) apply_filters( 'allowed_redirect_hosts', array( $wpp['host'] ), isset( $lp['host'] ) ? $lp['host'] : '' );\n\n\t\tif ( isset( $lp['host'] ) && ( ! in_array( $lp['host'], $allowed_hosts ) && strtolower( $wpp['host'] ) !== $lp['host'] ) ) {\n\t\t\t$location = $default;\n\t\t}\n\n\t\treturn $location;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_notify_postauthor' ) ) :\n\t/**\n\t * Notify an author (and/or others) of a comment/trackback/pingback on a post.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param int|WP_Comment  $comment_id Comment ID or WP_Comment object.\n\t * @param string          $deprecated Not used\n\t * @return bool True on completion. False if no email addresses were specified.\n\t */\n\tfunction wp_notify_postauthor( $comment_id, $deprecated = null ) {\n\t\tif ( null !== $deprecated ) {\n\t\t\t_deprecated_argument( __FUNCTION__, '3.8.0' );\n\t\t}\n\n\t\t$comment = get_comment( $comment_id );\n\t\tif ( empty( $comment ) || empty( $comment->comment_post_ID ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$post   = get_post( $comment->comment_post_ID );\n\t\t$author = get_userdata( $post->post_author );\n\n\t\t// Who to notify? By default, just the post author, but others can be added.\n\t\t$emails = array();\n\t\tif ( $author ) {\n\t\t\t$emails[] = $author->user_email;\n\t\t}\n\n\t\t/**\n\t\t * Filters the list of email addresses to receive a comment notification.\n\t\t *\n\t\t * By default, only post authors are notified of comments. This filter allows\n\t\t * others to be added.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param string[] $emails     An array of email addresses to receive a comment notification.\n\t\t * @param int      $comment_id The comment ID.\n\t\t */\n\t\t$emails = apply_filters( 'comment_notification_recipients', $emails, $comment->comment_ID );\n\t\t$emails = array_filter( $emails );\n\n\t\t// If there are no addresses to send the comment to, bail.\n\t\tif ( ! count( $emails ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Facilitate unsetting below without knowing the keys.\n\t\t$emails = array_flip( $emails );\n\n\t\t/**\n\t\t * Filters whether to notify comment authors of their comments on their own posts.\n\t\t *\n\t\t * By default, comment authors aren't notified of their comments on their own\n\t\t * posts. This filter allows you to override that.\n\t\t *\n\t\t * @since 3.8.0\n\t\t *\n\t\t * @param bool $notify     Whether to notify the post author of their own comment.\n\t\t *                         Default false.\n\t\t * @param int  $comment_id The comment ID.\n\t\t */\n\t\t$notify_author = apply_filters( 'comment_notification_notify_author', false, $comment->comment_ID );\n\n\t\t// The comment was left by the author.\n\t\tif ( $author && ! $notify_author && $comment->user_id == $post->post_author ) {\n\t\t\tunset( $emails[ $author->user_email ] );\n\t\t}\n\n\t\t// The author moderated a comment on their own post.\n\t\tif ( $author && ! $notify_author && get_current_user_id() == $post->post_author ) {\n\t\t\tunset( $emails[ $author->user_email ] );\n\t\t}\n\n\t\t// The post author is no longer a member of the blog.\n\t\tif ( $author && ! $notify_author && ! user_can( $post->post_author, 'read_post', $post->ID ) ) {\n\t\t\tunset( $emails[ $author->user_email ] );\n\t\t}\n\n\t\t// If there's no email to send the comment to, bail, otherwise flip array back around for use below.\n\t\tif ( ! count( $emails ) ) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$emails = array_flip( $emails );\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_locale() );\n\n\t\t$comment_author_domain = '';\n\t\tif ( WP_Http::is_ip_address( $comment->comment_author_IP ) ) {\n\t\t\t$comment_author_domain = gethostbyaddr( $comment->comment_author_IP );\n\t\t}\n\n\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t// We want to reverse this for the plain text arena of emails.\n\t\t$blogname        = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\t\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\t\tswitch ( $comment->comment_type ) {\n\t\t\tcase 'trackback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message = sprintf( __( 'New trackback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\t$notify_message .= __( 'You can see all trackbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t\t/* translators: Trackback notification email subject. 1: Site title, 2: Post title. */\n\t\t\t\t$subject = sprintf( __( '[%1$s] Trackback: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t\t\tbreak;\n\n\t\t\tcase 'pingback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message = sprintf( __( 'New pingback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\t$notify_message .= __( 'You can see all pingbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t\t/* translators: Pingback notification email subject. 1: Site title, 2: Post title. */\n\t\t\t\t$subject = sprintf( __( '[%1$s] Pingback: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t\t\tbreak;\n\n\t\t\tdefault: // Comments.\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message = sprintf( __( 'New comment on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t/* translators: 1: Comment author's name, 2: Comment author's IP address, 3: Comment author's hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment author email. */\n\t\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\n\t\t\t\tif ( $comment->comment_parent && user_can( $post->post_author, 'edit_comment', $comment->comment_parent ) ) {\n\t\t\t\t\t/* translators: Comment moderation. %s: Parent comment edit URL. */\n\t\t\t\t\t$notify_message .= sprintf( __( 'In reply to: %s' ), admin_url( \"comment.php?action=editcomment&c={$comment->comment_parent}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t\t}\n\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\t$notify_message .= __( 'You can see all comments on this post here:' ) . \"\\r\\n\";\n\t\t\t\t/* translators: Comment notification email subject. 1: Site title, 2: Post title. */\n\t\t\t\t$subject = sprintf( __( '[%1$s] Comment: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"#comments\\r\\n\\r\\n\";\n\t\t/* translators: %s: Comment URL. */\n\t\t$notify_message .= sprintf( __( 'Permalink: %s' ), get_comment_link( $comment ) ) . \"\\r\\n\";\n\n\t\tif ( user_can( $post->post_author, 'edit_comment', $comment->comment_ID ) ) {\n\t\t\tif ( EMPTY_TRASH_DAYS ) {\n\t\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t} else {\n\t\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t}\n\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t}\n\n\t\t$wp_email = 'wordpress@' . preg_replace( '#^www\\.#', '', strtolower( $_SERVER['SERVER_NAME'] ) );\n\n\t\tif ( '' == $comment->comment_author ) {\n\t\t\t$from = \"From: \\\"$blogname\\\" <$wp_email>\";\n\t\t\tif ( '' != $comment->comment_author_email ) {\n\t\t\t\t$reply_to = \"Reply-To: $comment->comment_author_email\";\n\t\t\t}\n\t\t} else {\n\t\t\t$from = \"From: \\\"$comment->comment_author\\\" <$wp_email>\";\n\t\t\tif ( '' != $comment->comment_author_email ) {\n\t\t\t\t$reply_to = \"Reply-To: \\\"$comment->comment_author_email\\\" <$comment->comment_author_email>\";\n\t\t\t}\n\t\t}\n\n\t\t$message_headers = \"$from\\n\"\n\t\t. 'Content-Type: text/plain; charset=\"' . get_option( 'blog_charset' ) . \"\\\"\\n\";\n\n\t\tif ( isset( $reply_to ) ) {\n\t\t\t$message_headers .= $reply_to . \"\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Filters the comment notification email text.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $notify_message The comment notification email text.\n\t\t * @param int    $comment_id     Comment ID.\n\t\t */\n\t\t$notify_message = apply_filters( 'comment_notification_text', $notify_message, $comment->comment_ID );\n\n\t\t/**\n\t\t * Filters the comment notification email subject.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $subject    The comment notification email subject.\n\t\t * @param int    $comment_id Comment ID.\n\t\t */\n\t\t$subject = apply_filters( 'comment_notification_subject', $subject, $comment->comment_ID );\n\n\t\t/**\n\t\t * Filters the comment notification email headers.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $message_headers Headers for the comment notification email.\n\t\t * @param int    $comment_id      Comment ID.\n\t\t */\n\t\t$message_headers = apply_filters( 'comment_notification_headers', $message_headers, $comment->comment_ID );\n\n\t\tforeach ( $emails as $email ) {\n\t\t\twp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t\t}\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\treturn true;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_notify_moderator' ) ) :\n\t/**\n\t * Notifies the moderator of the site about a new comment that is awaiting approval.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @global wpdb $wpdb WordPress database abstraction object.\n\t *\n\t * Uses the {@see 'notify_moderator'} filter to determine whether the site moderator\n\t * should be notified, overriding the site setting.\n\t *\n\t * @param int $comment_id Comment ID.\n\t * @return true Always returns true.\n\t */\n\tfunction wp_notify_moderator( $comment_id ) {\n\t\tglobal $wpdb;\n\n\t\t$maybe_notify = get_option( 'moderation_notify' );\n\n\t\t/**\n\t\t * Filters whether to send the site moderator email notifications, overriding the site setting.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param bool $maybe_notify Whether to notify blog moderator.\n\t\t * @param int  $comment_ID   The id of the comment for the notification.\n\t\t */\n\t\t$maybe_notify = apply_filters( 'notify_moderator', $maybe_notify, $comment_id );\n\n\t\tif ( ! $maybe_notify ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$comment = get_comment( $comment_id );\n\t\t$post    = get_post( $comment->comment_post_ID );\n\t\t$user    = get_userdata( $post->post_author );\n\t\t// Send to the administration and to the post author if the author can modify the comment.\n\t\t$emails = array( get_option( 'admin_email' ) );\n\t\tif ( $user && user_can( $user->ID, 'edit_comment', $comment_id ) && ! empty( $user->user_email ) ) {\n\t\t\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) ) {\n\t\t\t\t$emails[] = $user->user_email;\n\t\t\t}\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_locale() );\n\n\t\t$comment_author_domain = '';\n\t\tif ( WP_Http::is_ip_address( $comment->comment_author_IP ) ) {\n\t\t\t$comment_author_domain = gethostbyaddr( $comment->comment_author_IP );\n\t\t}\n\n\t\t$comments_waiting = $wpdb->get_var( \"SELECT COUNT(*) FROM $wpdb->comments WHERE comment_approved = '0'\" );\n\n\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t// We want to reverse this for the plain text arena of emails.\n\t\t$blogname        = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\t\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\t\tswitch ( $comment->comment_type ) {\n\t\t\tcase 'trackback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message  = sprintf( __( 'A new trackback on the post \"%s\" is waiting for your approval' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"\\r\\n\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= __( 'Trackback excerpt: ' ) . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\t\tbreak;\n\n\t\t\tcase 'pingback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message  = sprintf( __( 'A new pingback on the post \"%s\" is waiting for your approval' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"\\r\\n\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= __( 'Pingback excerpt: ' ) . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\t\tbreak;\n\n\t\t\tdefault: // Comments.\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message  = sprintf( __( 'A new comment on the post \"%s\" is waiting for your approval' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"\\r\\n\\r\\n\";\n\t\t\t\t/* translators: 1: Comment author's name, 2: Comment author's IP address, 3: Comment author's hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment author email. */\n\t\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\n\t\t\t\tif ( $comment->comment_parent ) {\n\t\t\t\t\t/* translators: Comment moderation. %s: Parent comment edit URL. */\n\t\t\t\t\t$notify_message .= sprintf( __( 'In reply to: %s' ), admin_url( \"comment.php?action=editcomment&c={$comment->comment_parent}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t\t}\n\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t$notify_message .= sprintf( __( 'Approve it: %s' ), admin_url( \"comment.php?action=approve&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\t\tif ( EMPTY_TRASH_DAYS ) {\n\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t} else {\n\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t}\n\n\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\t\t$notify_message .= sprintf(\n\t\t\t/* translators: Comment moderation. %s: Number of comments awaiting approval. */\n\t\t\t_n(\n\t\t\t\t'Currently %s comment is waiting for approval. Please visit the moderation panel:',\n\t\t\t\t'Currently %s comments are waiting for approval. Please visit the moderation panel:',\n\t\t\t\t$comments_waiting\n\t\t\t),\n\t\t\tnumber_format_i18n( $comments_waiting )\n\t\t) . \"\\r\\n\";\n\t\t$notify_message .= admin_url( 'edit-comments.php?comment_status=moderated#wpbody-content' ) . \"\\r\\n\";\n\n\t\t/* translators: Comment moderation notification email subject. 1: Site title, 2: Post title. */\n\t\t$subject         = sprintf( __( '[%1$s] Please moderate: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t$message_headers = '';\n\n\t\t/**\n\t\t * Filters the list of recipients for comment moderation emails.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param string[] $emails     List of email addresses to notify for comment moderation.\n\t\t * @param int      $comment_id Comment ID.\n\t\t */\n\t\t$emails = apply_filters( 'comment_moderation_recipients', $emails, $comment_id );\n\n\t\t/**\n\t\t * Filters the comment moderation email text.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $notify_message Text of the comment moderation email.\n\t\t * @param int    $comment_id     Comment ID.\n\t\t */\n\t\t$notify_message = apply_filters( 'comment_moderation_text', $notify_message, $comment_id );\n\n\t\t/**\n\t\t * Filters the comment moderation email subject.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $subject    Subject of the comment moderation email.\n\t\t * @param int    $comment_id Comment ID.\n\t\t */\n\t\t$subject = apply_filters( 'comment_moderation_subject', $subject, $comment_id );\n\n\t\t/**\n\t\t * Filters the comment moderation email headers.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $message_headers Headers for the comment moderation email.\n\t\t * @param int    $comment_id      Comment ID.\n\t\t */\n\t\t$message_headers = apply_filters( 'comment_moderation_headers', $message_headers, $comment_id );\n\n\t\tforeach ( $emails as $email ) {\n\t\t\twp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t\t}\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\treturn true;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_password_change_notification' ) ) :\n\t/**\n\t * Notify the blog admin of a user changing password, normally via email.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param WP_User $user User object.\n\t */\n\tfunction wp_password_change_notification( $user ) {\n\t\t// Send a copy of password change notification to the admin,\n\t\t// but check to see if it's the admin whose password we're changing, and skip this.\n\t\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) ) {\n\t\t\t/* translators: %s: User name. */\n\t\t\t$message = sprintf( __( 'Password changed for user: %s' ), $user->user_login ) . \"\\r\\n\";\n\t\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t\t// We want to reverse this for the plain text arena of emails.\n\t\t\t$blogname = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\n\t\t\t$wp_password_change_notification_email = array(\n\t\t\t\t'to'      => get_option( 'admin_email' ),\n\t\t\t\t/* translators: Password change notification email subject. %s: Site title. */\n\t\t\t\t'subject' => __( '[%s] Password Changed' ),\n\t\t\t\t'message' => $message,\n\t\t\t\t'headers' => '',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Filters the contents of the password change notification email sent to the site admin.\n\t\t\t *\n\t\t\t * @since 4.9.0\n\t\t\t *\n\t\t\t * @param array   $wp_password_change_notification_email {\n\t\t\t *     Used to build wp_mail().\n\t\t\t *\n\t\t\t *     @type string $to      The intended recipient - site admin email address.\n\t\t\t *     @type string $subject The subject of the email.\n\t\t\t *     @type string $message The body of the email.\n\t\t\t *     @type string $headers The headers of the email.\n\t\t\t * }\n\t\t\t * @param WP_User $user     User object for user whose password was changed.\n\t\t\t * @param string  $blogname The site title.\n\t\t\t */\n\t\t\t$wp_password_change_notification_email = apply_filters( 'wp_password_change_notification_email', $wp_password_change_notification_email, $user, $blogname );\n\n\t\t\twp_mail(\n\t\t\t\t$wp_password_change_notification_email['to'],\n\t\t\t\twp_specialchars_decode( sprintf( $wp_password_change_notification_email['subject'], $blogname ) ),\n\t\t\t\t$wp_password_change_notification_email['message'],\n\t\t\t\t$wp_password_change_notification_email['headers']\n\t\t\t);\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_new_user_notification' ) ) :\n\t/**\n\t * Email login credentials to a newly-registered user.\n\t *\n\t * A new user registration notification is also sent to admin email.\n\t *\n\t * @since 2.0.0\n\t * @since 4.3.0 The `$plaintext_pass` parameter was changed to `$notify`.\n\t * @since 4.3.1 The `$plaintext_pass` parameter was deprecated. `$notify` added as a third parameter.\n\t * @since 4.6.0 The `$notify` parameter accepts 'user' for sending notification only to the user created.\n\t *\n\t * @param int    $user_id    User ID.\n\t * @param null   $deprecated Not used (argument deprecated).\n\t * @param string $notify     Optional. Type of notification that should happen. Accepts 'admin' or an empty\n\t *                           string (admin only), 'user', or 'both' (admin and user). Default empty.\n\t */\n\tfunction wp_new_user_notification( $user_id, $deprecated = null, $notify = '' ) {\n\t\tif ( null !== $deprecated ) {\n\t\t\t_deprecated_argument( __FUNCTION__, '4.3.1' );\n\t\t}\n\n\t\t// Accepts only 'user', 'admin' , 'both' or default '' as $notify.\n\t\tif ( ! in_array( $notify, array( 'user', 'admin', 'both', '' ), true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$user = get_userdata( $user_id );\n\n\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t// We want to reverse this for the plain text arena of emails.\n\t\t$blogname = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\n\t\tif ( 'user' !== $notify ) {\n\t\t\t$switched_locale = switch_to_locale( get_locale() );\n\n\t\t\t/* translators: %s: Site title. */\n\t\t\t$message = sprintf( __( 'New user registration on your site %s:' ), $blogname ) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: %s: User login. */\n\t\t\t$message .= sprintf( __( 'Username: %s' ), $user->user_login ) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: %s: User email address. */\n\t\t\t$message .= sprintf( __( 'Email: %s' ), $user->user_email ) . \"\\r\\n\";\n\n\t\t\t$wp_new_user_notification_email_admin = array(\n\t\t\t\t'to'      => get_option( 'admin_email' ),\n\t\t\t\t/* translators: New user registration notification email subject. %s: Site title. */\n\t\t\t\t'subject' => __( '[%s] New User Registration' ),\n\t\t\t\t'message' => $message,\n\t\t\t\t'headers' => '',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Filters the contents of the new user notification email sent to the site admin.\n\t\t\t *\n\t\t\t * @since 4.9.0\n\t\t\t *\n\t\t\t * @param array   $wp_new_user_notification_email_admin {\n\t\t\t *     Used to build wp_mail().\n\t\t\t *\n\t\t\t *     @type string $to      The intended recipient - site admin email address.\n\t\t\t *     @type string $subject The subject of the email.\n\t\t\t *     @type string $message The body of the email.\n\t\t\t *     @type string $headers The headers of the email.\n\t\t\t * }\n\t\t\t * @param WP_User $user     User object for new user.\n\t\t\t * @param string  $blogname The site title.\n\t\t\t */\n\t\t\t$wp_new_user_notification_email_admin = apply_filters( 'wp_new_user_notification_email_admin', $wp_new_user_notification_email_admin, $user, $blogname );\n\n\t\t\twp_mail(\n\t\t\t\t$wp_new_user_notification_email_admin['to'],\n\t\t\t\twp_specialchars_decode( sprintf( $wp_new_user_notification_email_admin['subject'], $blogname ) ),\n\t\t\t\t$wp_new_user_notification_email_admin['message'],\n\t\t\t\t$wp_new_user_notification_email_admin['headers']\n\t\t\t);\n\n\t\t\tif ( $switched_locale ) {\n\t\t\t\trestore_previous_locale();\n\t\t\t}\n\t\t}\n\n\t\t// `$deprecated` was pre-4.3 `$plaintext_pass`. An empty `$plaintext_pass` didn't sent a user notification.\n\t\tif ( 'admin' === $notify || ( empty( $deprecated ) && empty( $notify ) ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$key = get_password_reset_key( $user );\n\t\tif ( is_wp_error( $key ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_user_locale( $user ) );\n\n\t\t/* translators: %s: User login. */\n\t\t$message  = sprintf( __( 'Username: %s' ), $user->user_login ) . \"\\r\\n\\r\\n\";\n\t\t$message .= __( 'To set your password, visit the following address:' ) . \"\\r\\n\\r\\n\";\n\t\t$message .= network_site_url( \"wp-login.php?action=rp&key=$key&login=\" . rawurlencode( $user->user_login ), 'login' ) . \"\\r\\n\\r\\n\";\n\n\t\t$message .= wp_login_url() . \"\\r\\n\";\n\n\t\t$wp_new_user_notification_email = array(\n\t\t\t'to'      => $user->user_email,\n\t\t\t/* translators: Login details notification email subject. %s: Site title. */\n\t\t\t'subject' => __( '[%s] Login Details' ),\n\t\t\t'message' => $message,\n\t\t\t'headers' => '',\n\t\t);\n\n\t\t/**\n\t\t * Filters the contents of the new user notification email sent to the new user.\n\t\t *\n\t\t * @since 4.9.0\n\t\t *\n\t\t * @param array   $wp_new_user_notification_email {\n\t\t *     Used to build wp_mail().\n\t\t *\n\t\t *     @type string $to      The intended recipient - New user email address.\n\t\t *     @type string $subject The subject of the email.\n\t\t *     @type string $message The body of the email.\n\t\t *     @type string $headers The headers of the email.\n\t\t * }\n\t\t * @param WP_User $user     User object for new user.\n\t\t * @param string  $blogname The site title.\n\t\t */\n\t\t$wp_new_user_notification_email = apply_filters( 'wp_new_user_notification_email', $wp_new_user_notification_email, $user, $blogname );\n\n\t\twp_mail(\n\t\t\t$wp_new_user_notification_email['to'],\n\t\t\twp_specialchars_decode( sprintf( $wp_new_user_notification_email['subject'], $blogname ) ),\n\t\t\t$wp_new_user_notification_email['message'],\n\t\t\t$wp_new_user_notification_email['headers']\n\t\t);\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_nonce_tick' ) ) :\n\t/**\n\t * Returns the time-dependent variable for nonce creation.\n\t *\n\t * A nonce has a lifespan of two ticks. Nonces in their second tick may be\n\t * updated, e.g. by autosave.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @return float Float value rounded up to the next highest integer.\n\t */\n\tfunction wp_nonce_tick() {\n\t\t/**\n\t\t * Filters the lifespan of nonces in seconds.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param int $lifespan Lifespan of nonces in seconds. Default 86,400 seconds, or one day.\n\t\t */\n\t\t$nonce_life = apply_filters( 'nonce_life', DAY_IN_SECONDS );\n\n\t\treturn ceil( time() / ( $nonce_life / 2 ) );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_verify_nonce' ) ) :\n\t/**\n\t * Verifies that a correct security nonce was used with time limit.\n\t *\n\t * A nonce is valid for 24 hours (by default).\n\t *\n\t * @since 2.0.3\n\t *\n\t * @param string     $nonce  Nonce value that was used for verification, usually via a form field.\n\t * @param string|int $action Should give context to what is taking place and be the same when nonce was created.\n\t * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,\n\t *                   2 if the nonce is valid and generated between 12-24 hours ago.\n\t *                   False if the nonce is invalid.\n\t */\n\tfunction wp_verify_nonce( $nonce, $action = -1 ) {\n\t\t$nonce = (string) $nonce;\n\t\t$user  = wp_get_current_user();\n\t\t$uid   = (int) $user->ID;\n\t\tif ( ! $uid ) {\n\t\t\t/**\n\t\t\t * Filters whether the user who generated the nonce is logged out.\n\t\t\t *\n\t\t\t * @since 3.5.0\n\t\t\t *\n\t\t\t * @param int    $uid    ID of the nonce-owning user.\n\t\t\t * @param string $action The nonce action.\n\t\t\t */\n\t\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t\t}\n\n\t\tif ( empty( $nonce ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$token = wp_get_session_token();\n\t\t$i     = wp_nonce_tick();\n\n\t\t// Nonce generated 0-12 hours ago.\n\t\t$expected = substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\t\tif ( hash_equals( $expected, $nonce ) ) {\n\t\t\treturn 1;\n\t\t}\n\n\t\t// Nonce generated 12-24 hours ago.\n\t\t$expected = substr( wp_hash( ( $i - 1 ) . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\t\tif ( hash_equals( $expected, $nonce ) ) {\n\t\t\treturn 2;\n\t\t}\n\n\t\t/**\n\t\t * Fires when nonce verification fails.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string     $nonce  The invalid nonce.\n\t\t * @param string|int $action The nonce action.\n\t\t * @param WP_User    $user   The current user object.\n\t\t * @param string     $token  The user's session token.\n\t\t */\n\t\tdo_action( 'wp_verify_nonce_failed', $nonce, $action, $user, $token );\n\n\t\t// Invalid nonce.\n\t\treturn false;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_create_nonce' ) ) :\n\t/**\n\t * Creates a cryptographic token tied to a specific action, user, user session,\n\t * and window of time.\n\t *\n\t * @since 2.0.3\n\t * @since 4.0.0 Session tokens were integrated with nonce creation\n\t *\n\t * @param string|int $action Scalar value to add context to the nonce.\n\t * @return string The token.\n\t */\n\tfunction wp_create_nonce( $action = -1 ) {\n\t\t$user = wp_get_current_user();\n\t\t$uid  = (int) $user->ID;\n\t\tif ( ! $uid ) {\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t\t}\n\n\t\t$token = wp_get_session_token();\n\t\t$i     = wp_nonce_tick();\n\n\t\treturn substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_salt' ) ) :\n\t/**\n\t * Returns a salt to add to hashes.\n\t *\n\t * Salts are created using secret keys. Secret keys are located in two places:\n\t * in the database and in the wp-config.php file. The secret key in the database\n\t * is randomly generated and will be appended to the secret keys in wp-config.php.\n\t *\n\t * The secret keys in wp-config.php should be updated to strong, random keys to maximize\n\t * security. Below is an example of how the secret key constants are defined.\n\t * Do not paste this example directly into wp-config.php. Instead, have a\n\t * {@link https://api.wordpress.org/secret-key/1.1/salt/ secret key created} just\n\t * for you.\n\t *\n\t *     define('AUTH_KEY',         ' Xakm<o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@< >M%G4Yt>f`z]MON');\n\t *     define('SECURE_AUTH_KEY',  'LzJ}op]mr|6+![P}Ak:uNdJCJZd>(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%/U^O~');\n\t *     define('LOGGED_IN_KEY',    '|i|Ux`9<p-h$aFf(qnT:sDO:D1P^wZ$$/Ra@miTJi9G;ddp_<q}6H1)o|a +&JCM');\n\t *     define('NONCE_KEY',        '%:R{[P|,s.KuMltH5}cI;/k<Gx~j!f0I)m_sIyu+&NJZ)-iO>z7X>QYR0Z_XnZ@|');\n\t *     define('AUTH_SALT',        'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW');\n\t *     define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9/^4-3 STz},T(w}W<I`.JjPi)<Bmf1v,HpGe}T1:Xt7n');\n\t *     define('LOGGED_IN_SALT',   '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n<+=uKR:>*c(u`g~EJBf#8u#R{mUEZrozmm');\n\t *     define('NONCE_SALT',       'h`GXHhD>SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&`+AycHcAV$+?@3q+rxV{%^VyKT');\n\t *\n\t * Salting passwords helps against tools which has stored hashed values of\n\t * common dictionary strings. The added values makes it harder to crack.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @link https://api.wordpress.org/secret-key/1.1/salt/ Create secrets for wp-config.php\n\t *\n\t * @staticvar array $cached_salts\n\t * @staticvar array $duplicated_keys\n\t *\n\t * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n\t * @return string Salt value\n\t */\n\tfunction wp_salt( $scheme = 'auth' ) {\n\t\tstatic $cached_salts = array();\n\t\tif ( isset( $cached_salts[ $scheme ] ) ) {\n\t\t\t/**\n\t\t\t * Filters the WordPress salt.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $cached_salt Cached salt for the given scheme.\n\t\t\t * @param string $scheme      Authentication scheme. Values include 'auth',\n\t\t\t *                            'secure_auth', 'logged_in', and 'nonce'.\n\t\t\t */\n\t\t\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n\t\t}\n\n\t\tstatic $duplicated_keys;\n\t\tif ( null === $duplicated_keys ) {\n\t\t\t$duplicated_keys = array( 'put your unique phrase here' => true );\n\t\t\tforeach ( array( 'AUTH', 'SECURE_AUTH', 'LOGGED_IN', 'NONCE', 'SECRET' ) as $first ) {\n\t\t\t\tforeach ( array( 'KEY', 'SALT' ) as $second ) {\n\t\t\t\t\tif ( ! defined( \"{$first}_{$second}\" ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$value                     = constant( \"{$first}_{$second}\" );\n\t\t\t\t\t$duplicated_keys[ $value ] = isset( $duplicated_keys[ $value ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$values = array(\n\t\t\t'key'  => '',\n\t\t\t'salt' => '',\n\t\t);\n\t\tif ( defined( 'SECRET_KEY' ) && SECRET_KEY && empty( $duplicated_keys[ SECRET_KEY ] ) ) {\n\t\t\t$values['key'] = SECRET_KEY;\n\t\t}\n\t\tif ( 'auth' == $scheme && defined( 'SECRET_SALT' ) && SECRET_SALT && empty( $duplicated_keys[ SECRET_SALT ] ) ) {\n\t\t\t$values['salt'] = SECRET_SALT;\n\t\t}\n\n\t\tif ( in_array( $scheme, array( 'auth', 'secure_auth', 'logged_in', 'nonce' ) ) ) {\n\t\t\tforeach ( array( 'key', 'salt' ) as $type ) {\n\t\t\t\t$const = strtoupper( \"{$scheme}_{$type}\" );\n\t\t\t\tif ( defined( $const ) && constant( $const ) && empty( $duplicated_keys[ constant( $const ) ] ) ) {\n\t\t\t\t\t$values[ $type ] = constant( $const );\n\t\t\t\t} elseif ( ! $values[ $type ] ) {\n\t\t\t\t\t$values[ $type ] = get_site_option( \"{$scheme}_{$type}\" );\n\t\t\t\t\tif ( ! $values[ $type ] ) {\n\t\t\t\t\t\t$values[ $type ] = wp_generate_password( 64, true, true );\n\t\t\t\t\t\tupdate_site_option( \"{$scheme}_{$type}\", $values[ $type ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! $values['key'] ) {\n\t\t\t\t$values['key'] = get_site_option( 'secret_key' );\n\t\t\t\tif ( ! $values['key'] ) {\n\t\t\t\t\t$values['key'] = wp_generate_password( 64, true, true );\n\t\t\t\t\tupdate_site_option( 'secret_key', $values['key'] );\n\t\t\t\t}\n\t\t\t}\n\t\t\t$values['salt'] = hash_hmac( 'md5', $scheme, $values['key'] );\n\t\t}\n\n\t\t$cached_salts[ $scheme ] = $values['key'] . $values['salt'];\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_hash' ) ) :\n\t/**\n\t * Get hash of given string.\n\t *\n\t * @since 2.0.3\n\t *\n\t * @param string $data   Plain text to hash\n\t * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n\t * @return string Hash of $data\n\t */\n\tfunction wp_hash( $data, $scheme = 'auth' ) {\n\t\t$salt = wp_salt( $scheme );\n\n\t\treturn hash_hmac( 'md5', $data, $salt );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_hash_password' ) ) :\n\t/**\n\t * Create a hash (encrypt) of a plain text password.\n\t *\n\t * For integration with other applications, this function can be overwritten to\n\t * instead use the other package password checking algorithm.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global PasswordHash $wp_hasher PHPass object\n\t *\n\t * @param string $password Plain text user password to hash\n\t * @return string The hash string of the password\n\t */\n\tfunction wp_hash_password( $password ) {\n\t\tglobal $wp_hasher;\n\n\t\tif ( empty( $wp_hasher ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t\t\t// By default, use the portable hash from phpass.\n\t\t\t$wp_hasher = new PasswordHash( 8, true );\n\t\t}\n\n\t\treturn $wp_hasher->HashPassword( trim( $password ) );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_check_password' ) ) :\n\t/**\n\t * Checks the plaintext password against the encrypted Password.\n\t *\n\t * Maintains compatibility between old version and the new cookie authentication\n\t * protocol using PHPass library. The $hash parameter is the encrypted password\n\t * and the function compares the plain text password when encrypted similarly\n\t * against the already encrypted password to see if they match.\n\t *\n\t * For integration with other applications, this function can be overwritten to\n\t * instead use the other package password checking algorithm.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global PasswordHash $wp_hasher PHPass object used for checking the password\n\t *  against the $hash + $password\n\t * @uses PasswordHash::CheckPassword\n\t *\n\t * @param string     $password Plaintext user's password\n\t * @param string     $hash     Hash of the user's password to check against.\n\t * @param string|int $user_id  Optional. User ID.\n\t * @return bool False, if the $password does not match the hashed password\n\t */\n\tfunction wp_check_password( $password, $hash, $user_id = '' ) {\n\t\tglobal $wp_hasher;\n\n\t\t// If the hash is still md5...\n\t\tif ( strlen( $hash ) <= 32 ) {\n\t\t\t$check = hash_equals( $hash, md5( $password ) );\n\t\t\tif ( $check && $user_id ) {\n\t\t\t\t// Rehash using new hash.\n\t\t\t\twp_set_password( $password, $user_id );\n\t\t\t\t$hash = wp_hash_password( $password );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters whether the plaintext password matches the encrypted password.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param bool       $check    Whether the passwords match.\n\t\t\t * @param string     $password The plaintext password.\n\t\t\t * @param string     $hash     The hashed password.\n\t\t\t * @param string|int $user_id  User ID. Can be empty.\n\t\t\t */\n\t\t\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n\t\t}\n\n\t\t// If the stored hash is longer than an MD5,\n\t\t// presume the new style phpass portable hash.\n\t\tif ( empty( $wp_hasher ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t\t\t// By default, use the portable hash from phpass.\n\t\t\t$wp_hasher = new PasswordHash( 8, true );\n\t\t}\n\n\t\t$check = $wp_hasher->CheckPassword( $password, $hash );\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_generate_password' ) ) :\n\t/**\n\t * Generates a random password drawn from the defined set of characters.\n\t *\n\t * Uses wp_rand() is used to create passwords with far less predictability\n\t * than similar native PHP functions like `rand()` or `mt_rand()`.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param int  $length              Optional. The length of password to generate. Default 12.\n\t * @param bool $special_chars       Optional. Whether to include standard special characters.\n\t *                                  Default true.\n\t * @param bool $extra_special_chars Optional. Whether to include other special characters.\n\t *                                  Used when generating secret keys and salts. Default false.\n\t * @return string The random password.\n\t */\n\tfunction wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {\n\t\t$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\t\tif ( $special_chars ) {\n\t\t\t$chars .= '!@#$%^&*()';\n\t\t}\n\t\tif ( $extra_special_chars ) {\n\t\t\t$chars .= '-_ []{}<>~`+=,.;:/?|';\n\t\t}\n\n\t\t$password = '';\n\t\tfor ( $i = 0; $i < $length; $i++ ) {\n\t\t\t$password .= substr( $chars, wp_rand( 0, strlen( $chars ) - 1 ), 1 );\n\t\t}\n\n\t\t/**\n\t\t * Filters the randomly-generated password.\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @since 5.3.0 Added the `$length`, `$special_chars`, and `$extra_special_chars` parameters.\n\t\t *\n\t\t * @param string $password            The generated password.\n\t\t * @param int    $length              The length of password to generate.\n\t\t * @param bool   $special_chars       Whether to include standard special characters.\n\t\t * @param bool   $extra_special_chars Whether to include other special characters.\n\t\t */\n\t\treturn apply_filters( 'random_password', $password, $length, $special_chars, $extra_special_chars );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_rand' ) ) :\n\t/**\n\t * Generates a random number.\n\t *\n\t * @since 2.6.2\n\t * @since 4.4.0 Uses PHP7 random_int() or the random_compat library if available.\n\t *\n\t * @global string $rnd_value\n\t * @staticvar string $seed\n\t * @staticvar bool $use_random_int_functionality\n\t *\n\t * @param int $min Lower limit for the generated number\n\t * @param int $max Upper limit for the generated number\n\t * @return int A random number between min and max\n\t */\n\tfunction wp_rand( $min = 0, $max = 0 ) {\n\t\tglobal $rnd_value;\n\n\t\t// Some misconfigured 32-bit environments (Entropy PHP, for example)\n\t\t// truncate integers larger than PHP_INT_MAX to PHP_INT_MAX rather than overflowing them to floats.\n\t\t$max_random_number = 3000000000 === 2147483647 ? (float) '4294967295' : 4294967295; // 4294967295 = 0xffffffff\n\n\t\t// We only handle ints, floats are truncated to their integer value.\n\t\t$min = (int) $min;\n\t\t$max = (int) $max;\n\n\t\t// Use PHP's CSPRNG, or a compatible method.\n\t\tstatic $use_random_int_functionality = true;\n\t\tif ( $use_random_int_functionality ) {\n\t\t\ttry {\n\t\t\t\t$_max = ( 0 != $max ) ? $max : $max_random_number;\n\t\t\t\t// wp_rand() can accept arguments in either order, PHP cannot.\n\t\t\t\t$_max = max( $min, $_max );\n\t\t\t\t$_min = min( $min, $_max );\n\t\t\t\t$val  = random_int( $_min, $_max );\n\t\t\t\tif ( false !== $val ) {\n\t\t\t\t\treturn absint( $val );\n\t\t\t\t} else {\n\t\t\t\t\t$use_random_int_functionality = false;\n\t\t\t\t}\n\t\t\t} catch ( Error $e ) {\n\t\t\t\t$use_random_int_functionality = false;\n\t\t\t} catch ( Exception $e ) {\n\t\t\t\t$use_random_int_functionality = false;\n\t\t\t}\n\t\t}\n\n\t\t// Reset $rnd_value after 14 uses.\n\t\t// 32 (md5) + 40 (sha1) + 40 (sha1) / 8 = 14 random numbers from $rnd_value.\n\t\tif ( strlen( $rnd_value ) < 8 ) {\n\t\t\tif ( defined( 'WP_SETUP_CONFIG' ) ) {\n\t\t\t\tstatic $seed = '';\n\t\t\t} else {\n\t\t\t\t$seed = get_transient( 'random_seed' );\n\t\t\t}\n\t\t\t$rnd_value  = md5( uniqid( microtime() . mt_rand(), true ) . $seed );\n\t\t\t$rnd_value .= sha1( $rnd_value );\n\t\t\t$rnd_value .= sha1( $rnd_value . $seed );\n\t\t\t$seed       = md5( $seed . $rnd_value );\n\t\t\tif ( ! defined( 'WP_SETUP_CONFIG' ) && ! defined( 'WP_INSTALLING' ) ) {\n\t\t\t\tset_transient( 'random_seed', $seed );\n\t\t\t}\n\t\t}\n\n\t\t// Take the first 8 digits for our value.\n\t\t$value = substr( $rnd_value, 0, 8 );\n\n\t\t// Strip the first eight, leaving the remainder for the next call to wp_rand().\n\t\t$rnd_value = substr( $rnd_value, 8 );\n\n\t\t$value = abs( hexdec( $value ) );\n\n\t\t// Reduce the value to be within the min - max range.\n\t\tif ( 0 != $max ) {\n\t\t\t$value = $min + ( $max - $min + 1 ) * $value / ( $max_random_number + 1 );\n\t\t}\n\n\t\treturn abs( intval( $value ) );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_set_password' ) ) :\n\t/**\n\t * Updates the user's password with a new encrypted one.\n\t *\n\t * For integration with other applications, this function can be overwritten to\n\t * instead use the other package password checking algorithm.\n\t *\n\t * Please note: This function should be used sparingly and is really only meant for single-time\n\t * application. Leveraging this improperly in a plugin or theme could result in an endless loop\n\t * of password resets if precautions are not taken to ensure it does not execute on every page load.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global wpdb $wpdb WordPress database abstraction object.\n\t *\n\t * @param string $password The plaintext new user password\n\t * @param int    $user_id  User ID\n\t */\n\tfunction wp_set_password( $password, $user_id ) {\n\t\tglobal $wpdb;\n\n\t\t$hash = wp_hash_password( $password );\n\t\t$wpdb->update(\n\t\t\t$wpdb->users,\n\t\t\tarray(\n\t\t\t\t'user_pass'           => $hash,\n\t\t\t\t'user_activation_key' => '',\n\t\t\t),\n\t\t\tarray( 'ID' => $user_id )\n\t\t);\n\n\t\tclean_user_cache( $user_id );\n\t}\nendif;\n\nif ( ! function_exists( 'get_avatar' ) ) :\n\t/**\n\t * Retrieve the avatar `<img>` tag for a user, email address, MD5 hash, comment, or post.\n\t *\n\t * @since 2.5.0\n\t * @since 4.2.0 Optional `$args` parameter added.\n\t *\n\t * @param mixed $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t *                           user email, WP_User object, WP_Post object, or WP_Comment object.\n\t * @param int    $size       Optional. Height and width of the avatar image file in pixels. Default 96.\n\t * @param string $default    Optional. URL for the default image or a default type. Accepts '404'\n\t *                           (return a 404 instead of a default image), 'retro' (8bit), 'monsterid'\n\t *                           (monster), 'wavatar' (cartoon face), 'indenticon' (the \"quilt\"),\n\t *                           'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF),\n\t *                           or 'gravatar_default' (the Gravatar logo). Default is the value of the\n\t *                           'avatar_default' option, with a fallback of 'mystery'.\n\t * @param string $alt        Optional. Alternative text to use in &lt;img&gt; tag. Default empty.\n\t * @param array  $args       {\n\t *     Optional. Extra arguments to retrieve the avatar.\n\t *\n\t *     @type int          $height        Display height of the avatar in pixels. Defaults to $size.\n\t *     @type int          $width         Display width of the avatar in pixels. Defaults to $size.\n\t *     @type bool         $force_default Whether to always show the default image, never the Gravatar. Default false.\n\t *     @type string       $rating        What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are\n\t *                                       judged in that order. Default is the value of the 'avatar_rating' option.\n\t *     @type string       $scheme        URL scheme to use. See set_url_scheme() for accepted values.\n\t *                                       Default null.\n\t *     @type array|string $class         Array or string of additional classes to add to the &lt;img&gt; element.\n\t *                                       Default null.\n\t *     @type bool         $force_display Whether to always show the avatar - ignores the show_avatars option.\n\t *                                       Default false.\n\t *     @type string       $extra_attr    HTML attributes to insert in the IMG element. Is not sanitized. Default empty.\n\t * }\n\t * @return string|false `<img>` tag for the user's avatar. False on failure.\n\t */\n\tfunction get_avatar( $id_or_email, $size = 96, $default = '', $alt = '', $args = null ) {\n\t\t$defaults = array(\n\t\t\t// get_avatar_data() args.\n\t\t\t'size'          => 96,\n\t\t\t'height'        => null,\n\t\t\t'width'         => null,\n\t\t\t'default'       => get_option( 'avatar_default', 'mystery' ),\n\t\t\t'force_default' => false,\n\t\t\t'rating'        => get_option( 'avatar_rating' ),\n\t\t\t'scheme'        => null,\n\t\t\t'alt'           => '',\n\t\t\t'class'         => null,\n\t\t\t'force_display' => false,\n\t\t\t'extra_attr'    => '',\n\t\t);\n\n\t\tif ( empty( $args ) ) {\n\t\t\t$args = array();\n\t\t}\n\n\t\t$args['size']    = (int) $size;\n\t\t$args['default'] = $default;\n\t\t$args['alt']     = $alt;\n\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\tif ( empty( $args['height'] ) ) {\n\t\t\t$args['height'] = $args['size'];\n\t\t}\n\t\tif ( empty( $args['width'] ) ) {\n\t\t\t$args['width'] = $args['size'];\n\t\t}\n\n\t\tif ( is_object( $id_or_email ) && isset( $id_or_email->comment_ID ) ) {\n\t\t\t$id_or_email = get_comment( $id_or_email );\n\t\t}\n\n\t\t/**\n\t\t * Filters whether to retrieve the avatar URL early.\n\t\t *\n\t\t * Passing a non-null value will effectively short-circuit get_avatar(), passing\n\t\t * the value through the {@see 'get_avatar'} filter and returning early.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string|null $avatar      HTML for the user's avatar. Default null.\n\t\t * @param mixed       $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t\t *                                 user email, WP_User object, WP_Post object, or WP_Comment object.\n\t\t * @param array       $args        Arguments passed to get_avatar_url(), after processing.\n\t\t */\n\t\t$avatar = apply_filters( 'pre_get_avatar', null, $id_or_email, $args );\n\n\t\tif ( ! is_null( $avatar ) ) {\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n\t\t}\n\n\t\tif ( ! $args['force_display'] && ! get_option( 'show_avatars' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$url2x = get_avatar_url( $id_or_email, array_merge( $args, array( 'size' => $args['size'] * 2 ) ) );\n\n\t\t$args = get_avatar_data( $id_or_email, $args );\n\n\t\t$url = $args['url'];\n\n\t\tif ( ! $url || is_wp_error( $url ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$class = array( 'avatar', 'avatar-' . (int) $args['size'], 'photo' );\n\n\t\tif ( ! $args['found_avatar'] || $args['force_default'] ) {\n\t\t\t$class[] = 'avatar-default';\n\t\t}\n\n\t\tif ( $args['class'] ) {\n\t\t\tif ( is_array( $args['class'] ) ) {\n\t\t\t\t$class = array_merge( $class, $args['class'] );\n\t\t\t} else {\n\t\t\t\t$class[] = $args['class'];\n\t\t\t}\n\t\t}\n\n\t\t$avatar = sprintf(\n\t\t\t\"<img alt='%s' src='%s' srcset='%s' class='%s' height='%d' width='%d' %s/>\",\n\t\t\tesc_attr( $args['alt'] ),\n\t\t\tesc_url( $url ),\n\t\t\tesc_url( $url2x ) . ' 2x',\n\t\t\tesc_attr( join( ' ', $class ) ),\n\t\t\t(int) $args['height'],\n\t\t\t(int) $args['width'],\n\t\t\t$args['extra_attr']\n\t\t);\n\n\t\t/**\n\t\t * Filters the avatar to retrieve.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.2.0 The `$args` parameter was added.\n\t\t *\n\t\t * @param string $avatar      &lt;img&gt; tag for the user's avatar.\n\t\t * @param mixed  $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t\t *                            user email, WP_User object, WP_Post object, or WP_Comment object.\n\t\t * @param int    $size        Square avatar width and height in pixels to retrieve.\n\t\t * @param string $default     URL for the default image or a default type. Accepts '404', 'retro', 'monsterid',\n\t\t *                            'wavatar', 'indenticon','mystery' (or 'mm', or 'mysteryman'), 'blank', or 'gravatar_default'.\n\t\t *                            Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.\n\t\t * @param string $alt         Alternative text to use in the avatar image tag. Default empty.\n\t\t * @param array  $args        Arguments passed to get_avatar_data(), after processing.\n\t\t */\n\t\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_text_diff' ) ) :\n\t/**\n\t * Displays a human readable HTML representation of the difference between two strings.\n\t *\n\t * The Diff is available for getting the changes between versions. The output is\n\t * HTML, so the primary use is for displaying the changes. If the two strings\n\t * are equivalent, then an empty string will be returned.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @see wp_parse_args() Used to change defaults to user defined settings.\n\t * @uses Text_Diff\n\t * @uses WP_Text_Diff_Renderer_Table\n\t *\n\t * @param string       $left_string  \"old\" (left) version of string\n\t * @param string       $right_string \"new\" (right) version of string\n\t * @param string|array $args {\n\t *     Associative array of options to pass to WP_Text_Diff_Renderer_Table().\n\t *\n\t *     @type string $title           Titles the diff in a manner compatible\n\t *                                   with the output. Default empty.\n\t *     @type string $title_left      Change the HTML to the left of the title.\n\t *                                   Default empty.\n\t *     @type string $title_right     Change the HTML to the right of the title.\n\t *                                   Default empty.\n\t *     @type bool   $show_split_view True for split view (two columns), false for\n\t *                                   un-split view (single column). Default true.\n\t * }\n\t * @return string Empty string if strings are equivalent or HTML with differences.\n\t */\n\tfunction wp_text_diff( $left_string, $right_string, $args = null ) {\n\t\t$defaults = array(\n\t\t\t'title'           => '',\n\t\t\t'title_left'      => '',\n\t\t\t'title_right'     => '',\n\t\t\t'show_split_view' => true,\n\t\t);\n\t\t$args     = wp_parse_args( $args, $defaults );\n\n\t\tif ( ! class_exists( 'WP_Text_Diff_Renderer_Table', false ) ) {\n\t\t\trequire ABSPATH . WPINC . '/wp-diff.php';\n\t\t}\n\n\t\t$left_string  = normalize_whitespace( $left_string );\n\t\t$right_string = normalize_whitespace( $right_string );\n\n\t\t$left_lines  = explode( \"\\n\", $left_string );\n\t\t$right_lines = explode( \"\\n\", $right_string );\n\t\t$text_diff   = new Text_Diff( $left_lines, $right_lines );\n\t\t$renderer    = new WP_Text_Diff_Renderer_Table( $args );\n\t\t$diff        = $renderer->render( $text_diff );\n\n\t\tif ( ! $diff ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$r = \"<table class='diff'>\\n\";\n\n\t\tif ( ! empty( $args['show_split_view'] ) ) {\n\t\t\t$r .= \"<col class='content diffsplit left' /><col class='content diffsplit middle' /><col class='content diffsplit right' />\";\n\t\t} else {\n\t\t\t$r .= \"<col class='content' />\";\n\t\t}\n\n\t\tif ( $args['title'] || $args['title_left'] || $args['title_right'] ) {\n\t\t\t$r .= '<thead>';\n\t\t}\n\t\tif ( $args['title'] ) {\n\t\t\t$r .= \"<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\\n\";\n\t\t}\n\t\tif ( $args['title_left'] || $args['title_right'] ) {\n\t\t\t$r .= \"<tr class='diff-sub-title'>\\n\";\n\t\t\t$r .= \"\\t<td></td><th>$args[title_left]</th>\\n\";\n\t\t\t$r .= \"\\t<td></td><th>$args[title_right]</th>\\n\";\n\t\t\t$r .= \"</tr>\\n\";\n\t\t}\n\t\tif ( $args['title'] || $args['title_left'] || $args['title_right'] ) {\n\t\t\t$r .= \"</thead>\\n\";\n\t\t}\n\n\t\t$r .= \"<tbody>\\n$diff\\n</tbody>\\n\";\n\t\t$r .= '</table>';\n\n\t\treturn $r;\n\t}\nendif;\n\n"], "fixing_code": ["<?php\n/**\n * These functions can be replaced via plugins. If plugins do not redefine these\n * functions, then these will be used instead.\n *\n * @package WordPress\n */\n\nif ( ! function_exists( 'wp_set_current_user' ) ) :\n\t/**\n\t * Changes the current user by ID or name.\n\t *\n\t * Set $id to null and specify a name if you do not know a user's ID.\n\t *\n\t * Some WordPress functionality is based on the current user and not based on\n\t * the signed in user. Therefore, it opens the ability to edit and perform\n\t * actions on users who aren't signed in.\n\t *\n\t * @since 2.0.3\n\t * @global WP_User $current_user The current user object which holds the user data.\n\t *\n\t * @param int    $id   User ID\n\t * @param string $name User's username\n\t * @return WP_User Current user User object\n\t */\n\tfunction wp_set_current_user( $id, $name = '' ) {\n\t\tglobal $current_user;\n\n\t\t// If `$id` matches the current user, there is nothing to do.\n\t\tif ( isset( $current_user )\n\t\t&& ( $current_user instanceof WP_User )\n\t\t&& ( $id == $current_user->ID )\n\t\t&& ( null !== $id )\n\t\t) {\n\t\t\treturn $current_user;\n\t\t}\n\n\t\t$current_user = new WP_User( $id, $name );\n\n\t\tsetup_userdata( $current_user->ID );\n\n\t\t/**\n\t\t * Fires after the current user is set.\n\t\t *\n\t\t * @since 2.0.1\n\t\t */\n\t\tdo_action( 'set_current_user' );\n\n\t\treturn $current_user;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_get_current_user' ) ) :\n\t/**\n\t * Retrieve the current user object.\n\t *\n\t * Will set the current user, if the current user is not set. The current user\n\t * will be set to the logged-in person. If no user is logged-in, then it will\n\t * set the current user to 0, which is invalid and won't have any permissions.\n\t *\n\t * @since 2.0.3\n\t *\n\t * @see _wp_get_current_user()\n\t * @global WP_User $current_user Checks if the current user is set.\n\t *\n\t * @return WP_User Current WP_User instance.\n\t */\n\tfunction wp_get_current_user() {\n\t\treturn _wp_get_current_user();\n\t}\nendif;\n\nif ( ! function_exists( 'get_userdata' ) ) :\n\t/**\n\t * Retrieve user info by user ID.\n\t *\n\t * @since 0.71\n\t *\n\t * @param int $user_id User ID\n\t * @return WP_User|false WP_User object on success, false on failure.\n\t */\n\tfunction get_userdata( $user_id ) {\n\t\treturn get_user_by( 'id', $user_id );\n\t}\nendif;\n\nif ( ! function_exists( 'get_user_by' ) ) :\n\t/**\n\t * Retrieve user info by a given field\n\t *\n\t * @since 2.8.0\n\t * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.\n\t *\n\t * @param string     $field The field to retrieve the user with. id | ID | slug | email | login.\n\t * @param int|string $value A value for $field. A user ID, slug, email address, or login name.\n\t * @return WP_User|false WP_User object on success, false on failure.\n\t */\n\tfunction get_user_by( $field, $value ) {\n\t\t$userdata = WP_User::get_data_by( $field, $value );\n\n\t\tif ( ! $userdata ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$user = new WP_User;\n\t\t$user->init( $userdata );\n\n\t\treturn $user;\n\t}\nendif;\n\nif ( ! function_exists( 'cache_users' ) ) :\n\t/**\n\t * Retrieve info for user lists to prevent multiple queries by get_userdata()\n\t *\n\t * @since 3.0.0\n\t *\n\t * @global wpdb $wpdb WordPress database abstraction object.\n\t *\n\t * @param array $user_ids User ID numbers list\n\t */\n\tfunction cache_users( $user_ids ) {\n\t\tglobal $wpdb;\n\n\t\t$clean = _get_non_cached_ids( $user_ids, 'users' );\n\n\t\tif ( empty( $clean ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$list = implode( ',', $clean );\n\n\t\t$users = $wpdb->get_results( \"SELECT * FROM $wpdb->users WHERE ID IN ($list)\" );\n\n\t\t$ids = array();\n\t\tforeach ( $users as $user ) {\n\t\t\tupdate_user_caches( $user );\n\t\t\t$ids[] = $user->ID;\n\t\t}\n\t\tupdate_meta_cache( 'user', $ids );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_mail' ) ) :\n\t/**\n\t * Sends an email, similar to PHP's mail function.\n\t *\n\t * A true return value does not automatically mean that the user received the\n\t * email successfully. It just only means that the method used was able to\n\t * process the request without any errors.\n\t *\n\t * The default content type is `text/plain` which does not allow using HTML.\n\t * However, you can set the content type of the email by using the\n\t * {@see 'wp_mail_content_type'} filter.\n\t *\n\t * The default charset is based on the charset used on the blog. The charset can\n\t * be set using the {@see 'wp_mail_charset'} filter.\n\t *\n\t * @since 1.2.1\n\t *\n\t * @global PHPMailer $phpmailer\n\t *\n\t * @param string|array $to          Array or comma-separated list of email addresses to send message.\n\t * @param string       $subject     Email subject\n\t * @param string       $message     Message contents\n\t * @param string|array $headers     Optional. Additional headers.\n\t * @param string|array $attachments Optional. Files to attach.\n\t * @return bool Whether the email contents were sent successfully.\n\t */\n\tfunction wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {\n\t\t// Compact the input, apply the filters, and extract them back out.\n\n\t\t/**\n\t\t * Filters the wp_mail() arguments.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param array $args A compacted array of wp_mail() arguments, including the \"to\" email,\n\t\t *                    subject, message, headers, and attachments values.\n\t\t */\n\t\t$atts = apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) );\n\n\t\tif ( isset( $atts['to'] ) ) {\n\t\t\t$to = $atts['to'];\n\t\t}\n\n\t\tif ( ! is_array( $to ) ) {\n\t\t\t$to = explode( ',', $to );\n\t\t}\n\n\t\tif ( isset( $atts['subject'] ) ) {\n\t\t\t$subject = $atts['subject'];\n\t\t}\n\n\t\tif ( isset( $atts['message'] ) ) {\n\t\t\t$message = $atts['message'];\n\t\t}\n\n\t\tif ( isset( $atts['headers'] ) ) {\n\t\t\t$headers = $atts['headers'];\n\t\t}\n\n\t\tif ( isset( $atts['attachments'] ) ) {\n\t\t\t$attachments = $atts['attachments'];\n\t\t}\n\n\t\tif ( ! is_array( $attachments ) ) {\n\t\t\t$attachments = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $attachments ) );\n\t\t}\n\t\tglobal $phpmailer;\n\n\t\t// (Re)create it, if it's gone missing.\n\t\tif ( ! ( $phpmailer instanceof PHPMailer ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/class-phpmailer.php';\n\t\t\trequire_once ABSPATH . WPINC . '/class-smtp.php';\n\t\t\t$phpmailer = new PHPMailer( true );\n\t\t}\n\n\t\t// Headers.\n\t\t$cc       = array();\n\t\t$bcc      = array();\n\t\t$reply_to = array();\n\n\t\tif ( empty( $headers ) ) {\n\t\t\t$headers = array();\n\t\t} else {\n\t\t\tif ( ! is_array( $headers ) ) {\n\t\t\t\t// Explode the headers out, so this function can take\n\t\t\t\t// both string headers and an array of headers.\n\t\t\t\t$tempheaders = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $headers ) );\n\t\t\t} else {\n\t\t\t\t$tempheaders = $headers;\n\t\t\t}\n\t\t\t$headers = array();\n\n\t\t\t// If it's actually got contents.\n\t\t\tif ( ! empty( $tempheaders ) ) {\n\t\t\t\t// Iterate through the raw headers.\n\t\t\t\tforeach ( (array) $tempheaders as $header ) {\n\t\t\t\t\tif ( strpos( $header, ':' ) === false ) {\n\t\t\t\t\t\tif ( false !== stripos( $header, 'boundary=' ) ) {\n\t\t\t\t\t\t\t$parts    = preg_split( '/boundary=/i', trim( $header ) );\n\t\t\t\t\t\t\t$boundary = trim( str_replace( array( \"'\", '\"' ), '', $parts[1] ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// Explode them out.\n\t\t\t\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t\t\t\t// Cleanup crew.\n\t\t\t\t\t$name    = trim( $name );\n\t\t\t\t\t$content = trim( $content );\n\n\t\t\t\t\tswitch ( strtolower( $name ) ) {\n\t\t\t\t\t\t// Mainly for legacy -- process a \"From:\" header if it's there.\n\t\t\t\t\t\tcase 'from':\n\t\t\t\t\t\t\t$bracket_pos = strpos( $content, '<' );\n\t\t\t\t\t\t\tif ( false !== $bracket_pos ) {\n\t\t\t\t\t\t\t\t// Text before the bracketed email is the \"From\" name.\n\t\t\t\t\t\t\t\tif ( $bracket_pos > 0 ) {\n\t\t\t\t\t\t\t\t\t$from_name = substr( $content, 0, $bracket_pos - 1 );\n\t\t\t\t\t\t\t\t\t$from_name = str_replace( '\"', '', $from_name );\n\t\t\t\t\t\t\t\t\t$from_name = trim( $from_name );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$from_email = substr( $content, $bracket_pos + 1 );\n\t\t\t\t\t\t\t\t$from_email = str_replace( '>', '', $from_email );\n\t\t\t\t\t\t\t\t$from_email = trim( $from_email );\n\n\t\t\t\t\t\t\t\t// Avoid setting an empty $from_email.\n\t\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t\t$from_email = trim( $content );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'content-type':\n\t\t\t\t\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\t\t\t\t\tlist( $type, $charset_content ) = explode( ';', $content );\n\t\t\t\t\t\t\t\t$content_type                   = trim( $type );\n\t\t\t\t\t\t\t\tif ( false !== stripos( $charset_content, 'charset=' ) ) {\n\t\t\t\t\t\t\t\t\t$charset = trim( str_replace( array( 'charset=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t\t} elseif ( false !== stripos( $charset_content, 'boundary=' ) ) {\n\t\t\t\t\t\t\t\t\t$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t\t\t$charset  = '';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Avoid setting an empty $content_type.\n\t\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t\t$content_type = trim( $content );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t\t$cc = array_merge( (array) $cc, explode( ',', $content ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t\t$bcc = array_merge( (array) $bcc, explode( ',', $content ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'reply-to':\n\t\t\t\t\t\t\t$reply_to = array_merge( (array) $reply_to, explode( ',', $content ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// Add it to our grand headers array.\n\t\t\t\t\t\t\t$headers[ trim( $name ) ] = trim( $content );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Empty out the values that may be set.\n\t\t$phpmailer->clearAllRecipients();\n\t\t$phpmailer->clearAttachments();\n\t\t$phpmailer->clearCustomHeaders();\n\t\t$phpmailer->clearReplyTos();\n\n\t\t// Set \"From\" name and email.\n\n\t\t// If we don't have a name from the input headers.\n\t\tif ( ! isset( $from_name ) ) {\n\t\t\t$from_name = 'WordPress';\n\t\t}\n\n\t\t/*\n\t\t * If we don't have an email from the input headers, default to wordpress@$sitename\n\t\t * Some hosts will block outgoing mail from this address if it doesn't exist,\n\t\t * but there's no easy alternative. Defaulting to admin_email might appear to be\n\t\t * another option, but some hosts may refuse to relay mail from an unknown domain.\n\t\t * See https://core.trac.wordpress.org/ticket/5007.\n\t\t */\n\t\tif ( ! isset( $from_email ) ) {\n\t\t\t// Get the site domain and get rid of www.\n\t\t\t$sitename = strtolower( $_SERVER['SERVER_NAME'] );\n\t\t\tif ( substr( $sitename, 0, 4 ) == 'www.' ) {\n\t\t\t\t$sitename = substr( $sitename, 4 );\n\t\t\t}\n\n\t\t\t$from_email = 'wordpress@' . $sitename;\n\t\t}\n\n\t\t/**\n\t\t * Filters the email address to send from.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param string $from_email Email address to send from.\n\t\t */\n\t\t$from_email = apply_filters( 'wp_mail_from', $from_email );\n\n\t\t/**\n\t\t * Filters the name to associate with the \"from\" email address.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $from_name Name associated with the \"from\" email address.\n\t\t */\n\t\t$from_name = apply_filters( 'wp_mail_from_name', $from_name );\n\n\t\ttry {\n\t\t\t$phpmailer->setFrom( $from_email, $from_name, false );\n\t\t} catch ( phpmailerException $e ) {\n\t\t\t$mail_error_data                             = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Set mail's subject and body.\n\t\t$phpmailer->Subject = $subject;\n\t\t$phpmailer->Body    = $message;\n\n\t\t// Set destination addresses, using appropriate methods for handling addresses.\n\t\t$address_headers = compact( 'to', 'cc', 'bcc', 'reply_to' );\n\n\t\tforeach ( $address_headers as $address_header => $addresses ) {\n\t\t\tif ( empty( $addresses ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ( (array) $addresses as $address ) {\n\t\t\t\ttry {\n\t\t\t\t\t// Break $recipient into name and address parts if in the format \"Foo <bar@baz.com>\".\n\t\t\t\t\t$recipient_name = '';\n\n\t\t\t\t\tif ( preg_match( '/(.*)<(.+)>/', $address, $matches ) ) {\n\t\t\t\t\t\tif ( count( $matches ) == 3 ) {\n\t\t\t\t\t\t\t$recipient_name = $matches[1];\n\t\t\t\t\t\t\t$address        = $matches[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( $address_header ) {\n\t\t\t\t\t\tcase 'to':\n\t\t\t\t\t\t\t$phpmailer->addAddress( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t\t$phpmailer->addCc( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t\t$phpmailer->addBcc( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'reply_to':\n\t\t\t\t\t\t\t$phpmailer->addReplyTo( $address, $recipient_name );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set to use PHP's mail().\n\t\t$phpmailer->isMail();\n\n\t\t// Set Content-Type and charset.\n\n\t\t// If we don't have a content-type from the input headers.\n\t\tif ( ! isset( $content_type ) ) {\n\t\t\t$content_type = 'text/plain';\n\t\t}\n\n\t\t/**\n\t\t * Filters the wp_mail() content type.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $content_type Default wp_mail() content type.\n\t\t */\n\t\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\t\t$phpmailer->ContentType = $content_type;\n\n\t\t// Set whether it's plaintext, depending on $content_type.\n\t\tif ( 'text/html' == $content_type ) {\n\t\t\t$phpmailer->isHTML( true );\n\t\t}\n\n\t\t// If we don't have a charset from the input headers.\n\t\tif ( ! isset( $charset ) ) {\n\t\t\t$charset = get_bloginfo( 'charset' );\n\t\t}\n\n\t\t/**\n\t\t * Filters the default wp_mail() charset.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string $charset Default email charset.\n\t\t */\n\t\t$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );\n\n\t\t// Set custom headers.\n\t\tif ( ! empty( $headers ) ) {\n\t\t\tforeach ( (array) $headers as $name => $content ) {\n\t\t\t\t// Only add custom headers not added automatically by PHPMailer.\n\t\t\t\tif ( ! in_array( $name, array( 'MIME-Version', 'X-Mailer' ) ) ) {\n\t\t\t\t\t$phpmailer->addCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( false !== stripos( $content_type, 'multipart' ) && ! empty( $boundary ) ) {\n\t\t\t\t$phpmailer->addCustomHeader( sprintf( \"Content-Type: %s;\\n\\t boundary=\\\"%s\\\"\", $content_type, $boundary ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $attachments ) ) {\n\t\t\tforeach ( $attachments as $attachment ) {\n\t\t\t\ttry {\n\t\t\t\t\t$phpmailer->addAttachment( $attachment );\n\t\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fires after PHPMailer is initialized.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param PHPMailer $phpmailer The PHPMailer instance (passed by reference).\n\t\t */\n\t\tdo_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );\n\n\t\t// Send!\n\t\ttry {\n\t\t\treturn $phpmailer->send();\n\t\t} catch ( phpmailerException $e ) {\n\n\t\t\t$mail_error_data                             = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t\t/**\n\t\t\t * Fires after a phpmailerException is caught.\n\t\t\t *\n\t\t\t * @since 4.4.0\n\t\t\t *\n\t\t\t * @param WP_Error $error A WP_Error object with the phpmailerException message, and an array\n\t\t\t *                        containing the mail recipient, subject, message, headers, and attachments.\n\t\t\t */\n\t\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\t\treturn false;\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_authenticate' ) ) :\n\t/**\n\t * Authenticate a user, confirming the login credentials are valid.\n\t *\n\t * @since 2.5.0\n\t * @since 4.5.0 `$username` now accepts an email address.\n\t *\n\t * @param string $username User's username or email address.\n\t * @param string $password User's password.\n\t * @return WP_User|WP_Error WP_User object if the credentials are valid,\n\t *                          otherwise WP_Error.\n\t */\n\tfunction wp_authenticate( $username, $password ) {\n\t\t$username = sanitize_user( $username );\n\t\t$password = trim( $password );\n\n\t\t/**\n\t\t * Filters whether a set of user login credentials are valid.\n\t\t *\n\t\t * A WP_User object is returned if the credentials authenticate a user.\n\t\t * WP_Error or null otherwise.\n\t\t *\n\t\t * @since 2.8.0\n\t\t * @since 4.5.0 `$username` now accepts an email address.\n\t\t *\n\t\t * @param null|WP_User|WP_Error $user     WP_User if the user is authenticated.\n\t\t *                                        WP_Error or null otherwise.\n\t\t * @param string                $username Username or email address.\n\t\t * @param string                $password User password\n\t\t */\n\t\t$user = apply_filters( 'authenticate', null, $username, $password );\n\n\t\tif ( null == $user ) {\n\t\t\t// TODO: What should the error message be? (Or would these even happen?)\n\t\t\t// Only needed if all authentication handlers fail to return anything.\n\t\t\t$user = new WP_Error( 'authentication_failed', __( '<strong>Error</strong>: Invalid username, email address or incorrect password.' ) );\n\t\t}\n\n\t\t$ignore_codes = array( 'empty_username', 'empty_password' );\n\n\t\tif ( is_wp_error( $user ) && ! in_array( $user->get_error_code(), $ignore_codes ) ) {\n\t\t\t$error = $user;\n\n\t\t\t/**\n\t\t\t * Fires after a user login has failed.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t * @since 4.5.0 The value of `$username` can now be an email address.\n\t\t\t * @since 5.4.0 The `$error` parameter was added.\n\t\t\t *\n\t\t\t * @param string   $username Username or email address.\n\t\t\t * @param WP_Error $error    A WP_Error object with the authentication failure details.\n\t\t\t */\n\t\t\tdo_action( 'wp_login_failed', $username, $error );\n\t\t}\n\n\t\treturn $user;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_logout' ) ) :\n\t/**\n\t * Log the current user out.\n\t *\n\t * @since 2.5.0\n\t */\n\tfunction wp_logout() {\n\t\twp_destroy_current_session();\n\t\twp_clear_auth_cookie();\n\t\twp_set_current_user( 0 );\n\n\t\t/**\n\t\t * Fires after a user is logged-out.\n\t\t *\n\t\t * @since 1.5.0\n\t\t */\n\t\tdo_action( 'wp_logout' );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_validate_auth_cookie' ) ) :\n\t/**\n\t * Validates authentication cookie.\n\t *\n\t * The checks include making sure that the authentication cookie is set and\n\t * pulling in the contents (if $cookie is not used).\n\t *\n\t * Makes sure the cookie is not expired. Verifies the hash in cookie is what is\n\t * should be and compares the two.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global int $login_grace_period\n\t *\n\t * @param string $cookie Optional. If used, will validate contents instead of cookie's.\n\t * @param string $scheme Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.\n\t * @return int|false User ID if valid cookie, false if invalid.\n\t */\n\tfunction wp_validate_auth_cookie( $cookie = '', $scheme = '' ) {\n\t\t$cookie_elements = wp_parse_auth_cookie( $cookie, $scheme );\n\t\tif ( ! $cookie_elements ) {\n\t\t\t/**\n\t\t\t * Fires if an authentication cookie is malformed.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string $cookie Malformed auth cookie.\n\t\t\t * @param string $scheme Authentication scheme. Values include 'auth', 'secure_auth',\n\t\t\t *                       or 'logged_in'.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_malformed', $cookie, $scheme );\n\t\t\treturn false;\n\t\t}\n\n\t\t$scheme     = $cookie_elements['scheme'];\n\t\t$username   = $cookie_elements['username'];\n\t\t$hmac       = $cookie_elements['hmac'];\n\t\t$token      = $cookie_elements['token'];\n\t\t$expired    = $cookie_elements['expiration'];\n\t\t$expiration = $cookie_elements['expiration'];\n\n\t\t// Allow a grace period for POST and Ajax requests.\n\t\tif ( wp_doing_ajax() || 'POST' == $_SERVER['REQUEST_METHOD'] ) {\n\t\t\t$expired += HOUR_IN_SECONDS;\n\t\t}\n\n\t\t// Quick check to see if an honest cookie has expired.\n\t\tif ( $expired < time() ) {\n\t\t\t/**\n\t\t\t * Fires once an authentication cookie has expired.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_expired', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t$user = get_user_by( 'login', $username );\n\t\tif ( ! $user ) {\n\t\t\t/**\n\t\t\t * Fires if a bad username is entered in the user authentication process.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_bad_username', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t$pass_frag = substr( $user->user_pass, 8, 4 );\n\n\t\t$key = wp_hash( $username . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t\t$hash = hash_hmac( $algo, $username . '|' . $expiration . '|' . $token, $key );\n\n\t\tif ( ! hash_equals( $hash, $hmac ) ) {\n\t\t\t/**\n\t\t\t * Fires if a bad authentication cookie hash is encountered.\n\t\t\t *\n\t\t\t * @since 2.7.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_bad_hash', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t$manager = WP_Session_Tokens::get_instance( $user->ID );\n\t\tif ( ! $manager->verify( $token ) ) {\n\t\t\t/**\n\t\t\t * Fires if a bad session token is encountered.\n\t\t\t *\n\t\t\t * @since 4.0.0\n\t\t\t *\n\t\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t\t */\n\t\t\tdo_action( 'auth_cookie_bad_session_token', $cookie_elements );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ajax/POST grace period set above.\n\t\tif ( $expiration < time() ) {\n\t\t\t$GLOBALS['login_grace_period'] = 1;\n\t\t}\n\n\t\t/**\n\t\t * Fires once an authentication cookie has been validated.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param string[] $cookie_elements An array of data for the authentication cookie.\n\t\t * @param WP_User  $user            User object.\n\t\t */\n\t\tdo_action( 'auth_cookie_valid', $cookie_elements, $user );\n\n\t\treturn $user->ID;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_generate_auth_cookie' ) ) :\n\t/**\n\t * Generates authentication cookie contents.\n\t *\n\t * @since 2.5.0\n\t * @since 4.0.0 The `$token` parameter was added.\n\t *\n\t * @param int    $user_id    User ID.\n\t * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n\t * @param string $scheme     Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.\n\t *                           Default 'auth'.\n\t * @param string $token      User's session token to use for this cookie.\n\t * @return string Authentication cookie contents. Empty string if user does not exist.\n\t */\n\tfunction wp_generate_auth_cookie( $user_id, $expiration, $scheme = 'auth', $token = '' ) {\n\t\t$user = get_userdata( $user_id );\n\t\tif ( ! $user ) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif ( ! $token ) {\n\t\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t\t$token   = $manager->create( $expiration );\n\t\t}\n\n\t\t$pass_frag = substr( $user->user_pass, 8, 4 );\n\n\t\t$key = wp_hash( $user->user_login . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t\t$hash = hash_hmac( $algo, $user->user_login . '|' . $expiration . '|' . $token, $key );\n\n\t\t$cookie = $user->user_login . '|' . $expiration . '|' . $token . '|' . $hash;\n\n\t\t/**\n\t\t * Filters the authentication cookie.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.0.0 The `$token` parameter was added.\n\t\t *\n\t\t * @param string $cookie     Authentication cookie.\n\t\t * @param int    $user_id    User ID.\n\t\t * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n\t\t * @param string $scheme     Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'.\n\t\t * @param string $token      User's session token used.\n\t\t */\n\t\treturn apply_filters( 'auth_cookie', $cookie, $user_id, $expiration, $scheme, $token );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_parse_auth_cookie' ) ) :\n\t/**\n\t * Parses a cookie into its components.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param string $cookie Authentication cookie.\n\t * @param string $scheme Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.\n\t * @return string[]|false Authentication cookie components.\n\t */\n\tfunction wp_parse_auth_cookie( $cookie = '', $scheme = '' ) {\n\t\tif ( empty( $cookie ) ) {\n\t\t\tswitch ( $scheme ) {\n\t\t\t\tcase 'auth':\n\t\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'secure_auth':\n\t\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'logged_in':\n\t\t\t\t\t$cookie_name = LOGGED_IN_COOKIE;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif ( is_ssl() ) {\n\t\t\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\t\t\t$scheme      = 'secure_auth';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\t\t\t$scheme      = 'auth';\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $_COOKIE[ $cookie_name ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$cookie = $_COOKIE[ $cookie_name ];\n\t\t}\n\n\t\t$cookie_elements = explode( '|', $cookie );\n\t\tif ( count( $cookie_elements ) !== 4 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlist( $username, $expiration, $token, $hmac ) = $cookie_elements;\n\n\t\treturn compact( 'username', 'expiration', 'token', 'hmac', 'scheme' );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_set_auth_cookie' ) ) :\n\t/**\n\t * Sets the authentication cookies based on user ID.\n\t *\n\t * The $remember parameter increases the time that the cookie will be kept. The\n\t * default the cookie is kept without remembering is two days. When $remember is\n\t * set, the cookies will be kept for 14 days or two weeks.\n\t *\n\t * @since 2.5.0\n\t * @since 4.3.0 Added the `$token` parameter.\n\t *\n\t * @param int         $user_id  User ID.\n\t * @param bool        $remember Whether to remember the user.\n\t * @param bool|string $secure   Whether the auth cookie should only be sent over HTTPS. Default is an empty\n\t *                              string which means the value of `is_ssl()` will be used.\n\t * @param string      $token    Optional. User's session token to use for this cookie.\n\t */\n\tfunction wp_set_auth_cookie( $user_id, $remember = false, $secure = '', $token = '' ) {\n\t\tif ( $remember ) {\n\t\t\t/**\n\t\t\t * Filters the duration of the authentication cookie expiration period.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param int  $length   Duration of the expiration period in seconds.\n\t\t\t * @param int  $user_id  User ID.\n\t\t\t * @param bool $remember Whether to remember the user login. Default false.\n\t\t\t */\n\t\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 14 * DAY_IN_SECONDS, $user_id, $remember );\n\n\t\t\t/*\n\t\t\t * Ensure the browser will continue to send the cookie after the expiration time is reached.\n\t\t\t * Needed for the login grace period in wp_validate_auth_cookie().\n\t\t\t */\n\t\t\t$expire = $expiration + ( 12 * HOUR_IN_SECONDS );\n\t\t} else {\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 2 * DAY_IN_SECONDS, $user_id, $remember );\n\t\t\t$expire     = 0;\n\t\t}\n\n\t\tif ( '' === $secure ) {\n\t\t\t$secure = is_ssl();\n\t\t}\n\n\t\t// Front-end cookie is secure when the auth cookie is secure and the site's home URL uses HTTPS.\n\t\t$secure_logged_in_cookie = $secure && 'https' === parse_url( get_option( 'home' ), PHP_URL_SCHEME );\n\n\t\t/**\n\t\t * Filters whether the auth cookie should only be sent over HTTPS.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool $secure  Whether the cookie should only be sent over HTTPS.\n\t\t * @param int  $user_id User ID.\n\t\t */\n\t\t$secure = apply_filters( 'secure_auth_cookie', $secure, $user_id );\n\n\t\t/**\n\t\t * Filters whether the logged in cookie should only be sent over HTTPS.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool $secure_logged_in_cookie Whether the logged in cookie should only be sent over HTTPS.\n\t\t * @param int  $user_id                 User ID.\n\t\t * @param bool $secure                  Whether the auth cookie should only be sent over HTTPS.\n\t\t */\n\t\t$secure_logged_in_cookie = apply_filters( 'secure_logged_in_cookie', $secure_logged_in_cookie, $user_id, $secure );\n\n\t\tif ( $secure ) {\n\t\t\t$auth_cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t$scheme           = 'secure_auth';\n\t\t} else {\n\t\t\t$auth_cookie_name = AUTH_COOKIE;\n\t\t\t$scheme           = 'auth';\n\t\t}\n\n\t\tif ( '' === $token ) {\n\t\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t\t$token   = $manager->create( $expiration );\n\t\t}\n\n\t\t$auth_cookie      = wp_generate_auth_cookie( $user_id, $expiration, $scheme, $token );\n\t\t$logged_in_cookie = wp_generate_auth_cookie( $user_id, $expiration, 'logged_in', $token );\n\n\t\t/**\n\t\t * Fires immediately before the authentication cookie is set.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.9.0 The `$token` parameter was added.\n\t\t *\n\t\t * @param string $auth_cookie Authentication cookie value.\n\t\t * @param int    $expire      The time the login grace period expires as a UNIX timestamp.\n\t\t *                            Default is 12 hours past the cookie's expiration time.\n\t\t * @param int    $expiration  The time when the authentication cookie expires as a UNIX timestamp.\n\t\t *                            Default is 14 days from now.\n\t\t * @param int    $user_id     User ID.\n\t\t * @param string $scheme      Authentication scheme. Values include 'auth' or 'secure_auth'.\n\t\t * @param string $token       User's session token to use for this cookie.\n\t\t */\n\t\tdo_action( 'set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme, $token );\n\n\t\t/**\n\t\t * Fires immediately before the logged-in authentication cookie is set.\n\t\t *\n\t\t * @since 2.6.0\n\t\t * @since 4.9.0 The `$token` parameter was added.\n\t\t *\n\t\t * @param string $logged_in_cookie The logged-in cookie value.\n\t\t * @param int    $expire           The time the login grace period expires as a UNIX timestamp.\n\t\t *                                 Default is 12 hours past the cookie's expiration time.\n\t\t * @param int    $expiration       The time when the logged-in authentication cookie expires as a UNIX timestamp.\n\t\t *                                 Default is 14 days from now.\n\t\t * @param int    $user_id          User ID.\n\t\t * @param string $scheme           Authentication scheme. Default 'logged_in'.\n\t\t * @param string $token            User's session token to use for this cookie.\n\t\t */\n\t\tdo_action( 'set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in', $token );\n\n\t\t/**\n\t\t * Allows preventing auth cookies from actually being sent to the client.\n\t\t *\n\t\t * @since 4.7.4\n\t\t *\n\t\t * @param bool $send Whether to send auth cookies to the client.\n\t\t */\n\t\tif ( ! apply_filters( 'send_auth_cookies', true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetcookie( $auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true );\n\t\tsetcookie( $auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true );\n\t\tsetcookie( LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true );\n\t\tif ( COOKIEPATH != SITECOOKIEPATH ) {\n\t\t\tsetcookie( LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true );\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_clear_auth_cookie' ) ) :\n\t/**\n\t * Removes all of the cookies associated with authentication.\n\t *\n\t * @since 2.5.0\n\t */\n\tfunction wp_clear_auth_cookie() {\n\t\t/**\n\t\t * Fires just before the authentication cookies are cleared.\n\t\t *\n\t\t * @since 2.7.0\n\t\t */\n\t\tdo_action( 'clear_auth_cookie' );\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\tif ( ! apply_filters( 'send_auth_cookies', true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Auth cookies.\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\t\tsetcookie( LOGGED_IN_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( LOGGED_IN_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t\t// Settings cookies.\n\t\tsetcookie( 'wp-settings-' . get_current_user_id(), ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH );\n\t\tsetcookie( 'wp-settings-time-' . get_current_user_id(), ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH );\n\n\t\t// Old cookies.\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t\t// Even older cookies.\n\t\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\t\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t\t// Post password cookie.\n\t\tsetcookie( 'wp-postpass_' . COOKIEHASH, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );\n\t}\nendif;\n\nif ( ! function_exists( 'is_user_logged_in' ) ) :\n\t/**\n\t * Determines whether the current visitor is a logged in user.\n\t *\n\t * For more information on this and similar theme functions, check out\n\t * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/\n\t * Conditional Tags} article in the Theme Developer Handbook.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @return bool True if user is logged in, false if not logged in.\n\t */\n\tfunction is_user_logged_in() {\n\t\t$user = wp_get_current_user();\n\n\t\treturn $user->exists();\n\t}\nendif;\n\nif ( ! function_exists( 'auth_redirect' ) ) :\n\t/**\n\t * Checks if a user is logged in, if not it redirects them to the login page.\n\t *\n\t * When this code is called from a page, it checks to see if the user viewing the page is logged in.\n\t * If the user is not logged in, they are redirected to the login page. The user is redirected\n\t * in such a way that, upon logging in, they will be sent directly to the page they were originally\n\t * trying to access.\n\t *\n\t * @since 1.5.0\n\t */\n\tfunction auth_redirect() {\n\t\t$secure = ( is_ssl() || force_ssl_admin() );\n\n\t\t/**\n\t\t * Filters whether to use a secure authentication redirect.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool $secure Whether to use a secure authentication redirect. Default false.\n\t\t */\n\t\t$secure = apply_filters( 'secure_auth_redirect', $secure );\n\n\t\t// If https is required and request is http, redirect.\n\t\tif ( $secure && ! is_ssl() && false !== strpos( $_SERVER['REQUEST_URI'], 'wp-admin' ) ) {\n\t\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the authentication redirect scheme.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param string $scheme Authentication redirect scheme. Default empty.\n\t\t */\n\t\t$scheme = apply_filters( 'auth_redirect_scheme', '' );\n\n\t\t$user_id = wp_validate_auth_cookie( '', $scheme );\n\t\tif ( $user_id ) {\n\t\t\t/**\n\t\t\t * Fires before the authentication redirect.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param int $user_id User ID.\n\t\t\t */\n\t\t\tdo_action( 'auth_redirect', $user_id );\n\n\t\t\t// If the user wants ssl but the session is not ssl, redirect.\n\t\t\tif ( ! $secure && get_user_option( 'use_ssl', $user_id ) && false !== strpos( $_SERVER['REQUEST_URI'], 'wp-admin' ) ) {\n\t\t\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\t\t\texit();\n\t\t\t\t} else {\n\t\t\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn; // The cookie is good, so we're done.\n\t\t}\n\n\t\t// The cookie is no good, so force login.\n\t\tnocache_headers();\n\n\t\t$redirect = ( strpos( $_SERVER['REQUEST_URI'], '/options.php' ) && wp_get_referer() ) ? wp_get_referer() : set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\n\t\t$login_url = wp_login_url( $redirect, true );\n\n\t\twp_redirect( $login_url );\n\t\texit();\n\t}\nendif;\n\nif ( ! function_exists( 'check_admin_referer' ) ) :\n\t/**\n\t * Ensures intent by verifying that a user was referred from another admin page with the correct security nonce.\n\t *\n\t * This function ensures the user intends to perform a given action, which helps protect against clickjacking style\n\t * attacks. It verifies intent, not authorisation, therefore it does not verify the user's capabilities. This should\n\t * be performed with `current_user_can()` or similar.\n\t *\n\t * If the nonce value is invalid, the function will exit with an \"Are You Sure?\" style message.\n\t *\n\t * @since 1.2.0\n\t * @since 2.5.0 The `$query_arg` parameter was added.\n\t *\n\t * @param int|string $action    The nonce action.\n\t * @param string     $query_arg Optional. Key to check for nonce in `$_REQUEST`. Default '_wpnonce'.\n\t * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,\n\t *                   2 if the nonce is valid and generated between 12-24 hours ago.\n\t *                   False if the nonce is invalid.\n\t */\n\tfunction check_admin_referer( $action = -1, $query_arg = '_wpnonce' ) {\n\t\tif ( -1 === $action ) {\n\t\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '3.2.0' );\n\t\t}\n\n\t\t$adminurl = strtolower( admin_url() );\n\t\t$referer  = strtolower( wp_get_referer() );\n\t\t$result   = isset( $_REQUEST[ $query_arg ] ) ? wp_verify_nonce( $_REQUEST[ $query_arg ], $action ) : false;\n\n\t\t/**\n\t\t * Fires once the admin request has been validated or not.\n\t\t *\n\t\t * @since 1.5.1\n\t\t *\n\t\t * @param string    $action The nonce action.\n\t\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t\t */\n\t\tdo_action( 'check_admin_referer', $action, $result );\n\n\t\tif ( ! $result && ! ( -1 === $action && strpos( $referer, $adminurl ) === 0 ) ) {\n\t\t\twp_nonce_ays( $action );\n\t\t\tdie();\n\t\t}\n\n\t\treturn $result;\n\t}\nendif;\n\nif ( ! function_exists( 'check_ajax_referer' ) ) :\n\t/**\n\t * Verifies the Ajax request to prevent processing requests external of the blog.\n\t *\n\t * @since 2.0.3\n\t *\n\t * @param int|string   $action    Action nonce.\n\t * @param false|string $query_arg Optional. Key to check for the nonce in `$_REQUEST` (since 2.5). If false,\n\t *                                `$_REQUEST` values will be evaluated for '_ajax_nonce', and '_wpnonce'\n\t *                                (in that order). Default false.\n\t * @param bool         $die       Optional. Whether to die early when the nonce cannot be verified.\n\t *                                Default true.\n\t * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,\n\t *                   2 if the nonce is valid and generated between 12-24 hours ago.\n\t *                   False if the nonce is invalid.\n\t */\n\tfunction check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {\n\t\tif ( -1 == $action ) {\n\t\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '4.7' );\n\t\t}\n\n\t\t$nonce = '';\n\n\t\tif ( $query_arg && isset( $_REQUEST[ $query_arg ] ) ) {\n\t\t\t$nonce = $_REQUEST[ $query_arg ];\n\t\t} elseif ( isset( $_REQUEST['_ajax_nonce'] ) ) {\n\t\t\t$nonce = $_REQUEST['_ajax_nonce'];\n\t\t} elseif ( isset( $_REQUEST['_wpnonce'] ) ) {\n\t\t\t$nonce = $_REQUEST['_wpnonce'];\n\t\t}\n\n\t\t$result = wp_verify_nonce( $nonce, $action );\n\n\t\t/**\n\t\t * Fires once the Ajax request has been validated or not.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string    $action The Ajax nonce action.\n\t\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t\t */\n\t\tdo_action( 'check_ajax_referer', $action, $result );\n\n\t\tif ( $die && false === $result ) {\n\t\t\tif ( wp_doing_ajax() ) {\n\t\t\t\twp_die( -1, 403 );\n\t\t\t} else {\n\t\t\t\tdie( '-1' );\n\t\t\t}\n\t\t}\n\n\t\treturn $result;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_redirect' ) ) :\n\t/**\n\t * Redirects to another page.\n\t *\n\t * Note: wp_redirect() does not exit automatically, and should almost always be\n\t * followed by a call to `exit;`:\n\t *\n\t *     wp_redirect( $url );\n\t *     exit;\n\t *\n\t * Exiting can also be selectively manipulated by using wp_redirect() as a conditional\n\t * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} filters:\n\t *\n\t *     if ( wp_redirect( $url ) ) {\n\t *         exit;\n\t *     }\n\t *\n\t * @since 1.5.1\n\t * @since 5.1.0 The `$x_redirect_by` parameter was added.\n\t * @since 5.4.0 On invalid status codes, wp_die() is called.\n\t *\n\t * @global bool $is_IIS\n\t *\n\t * @param string $location      The path or URL to redirect to.\n\t * @param int    $status        Optional. HTTP response status code to use. Default '302' (Moved Temporarily).\n\t * @param string $x_redirect_by Optional. The application doing the redirect. Default 'WordPress'.\n\t * @return bool False if the redirect was cancelled, true otherwise.\n\t */\n\tfunction wp_redirect( $location, $status = 302, $x_redirect_by = 'WordPress' ) {\n\t\tglobal $is_IIS;\n\n\t\t/**\n\t\t * Filters the redirect location.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $location The path or URL to redirect to.\n\t\t * @param int    $status   The HTTP response status code to use.\n\t\t */\n\t\t$location = apply_filters( 'wp_redirect', $location, $status );\n\n\t\t/**\n\t\t * Filters the redirect HTTP response status code to use.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param int    $status   The HTTP response status code to use.\n\t\t * @param string $location The path or URL to redirect to.\n\t\t */\n\t\t$status = apply_filters( 'wp_redirect_status', $status, $location );\n\n\t\tif ( ! $location ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( $status < 300 || 399 < $status ) {\n\t\t\twp_die( __( 'HTTP redirect status code must be a redirection code, 3xx.' ) );\n\t\t}\n\n\t\t$location = wp_sanitize_redirect( $location );\n\n\t\tif ( ! $is_IIS && PHP_SAPI != 'cgi-fcgi' ) {\n\t\t\tstatus_header( $status ); // This causes problems on IIS and some FastCGI setups.\n\t\t}\n\n\t\t/**\n\t\t * Filters the X-Redirect-By header.\n\t\t *\n\t\t * Allows applications to identify themselves when they're doing a redirect.\n\t\t *\n\t\t * @since 5.1.0\n\t\t *\n\t\t * @param string $x_redirect_by The application doing the redirect.\n\t\t * @param int    $status        Status code to use.\n\t\t * @param string $location      The path to redirect to.\n\t\t */\n\t\t$x_redirect_by = apply_filters( 'x_redirect_by', $x_redirect_by, $status, $location );\n\t\tif ( is_string( $x_redirect_by ) ) {\n\t\t\theader( \"X-Redirect-By: $x_redirect_by\" );\n\t\t}\n\n\t\theader( \"Location: $location\", true, $status );\n\n\t\treturn true;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_sanitize_redirect' ) ) :\n\t/**\n\t * Sanitizes a URL for use in a redirect.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $location The path to redirect to.\n\t * @return string Redirect-sanitized URL.\n\t */\n\tfunction wp_sanitize_redirect( $location ) {\n\t\t// Encode spaces.\n\t\t$location = str_replace( ' ', '%20', $location );\n\n\t\t$regex    = '/\n\t\t(\n\t\t\t(?: [\\xC2-\\xDF][\\x80-\\xBF]        # double-byte sequences   110xxxxx 10xxxxxx\n\t\t\t|   \\xE0[\\xA0-\\xBF][\\x80-\\xBF]    # triple-byte sequences   1110xxxx 10xxxxxx * 2\n\t\t\t|   [\\xE1-\\xEC][\\x80-\\xBF]{2}\n\t\t\t|   \\xED[\\x80-\\x9F][\\x80-\\xBF]\n\t\t\t|   [\\xEE-\\xEF][\\x80-\\xBF]{2}\n\t\t\t|   \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3\n\t\t\t|   [\\xF1-\\xF3][\\x80-\\xBF]{3}\n\t\t\t|   \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}\n\t\t){1,40}                              # ...one or more times\n\t\t)/x';\n\t\t$location = preg_replace_callback( $regex, '_wp_sanitize_utf8_in_redirect', $location );\n\t\t$location = preg_replace( '|[^a-z0-9-~+_.?#=&;,/:%!*\\[\\]()@]|i', '', $location );\n\t\t$location = wp_kses_no_null( $location );\n\n\t\t// Remove %0D and %0A from location.\n\t\t$strip = array( '%0d', '%0a', '%0D', '%0A' );\n\t\treturn _deep_replace( $strip, $location );\n\t}\n\n\t/**\n\t * URL encode UTF-8 characters in a URL.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t * @access private\n\t *\n\t * @see wp_sanitize_redirect()\n\t *\n\t * @param array $matches RegEx matches against the redirect location.\n\t * @return string URL-encoded version of the first RegEx match.\n\t */\n\tfunction _wp_sanitize_utf8_in_redirect( $matches ) {\n\t\treturn urlencode( $matches[0] );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_safe_redirect' ) ) :\n\t/**\n\t * Performs a safe (local) redirect, using wp_redirect().\n\t *\n\t * Checks whether the $location is using an allowed host, if it has an absolute\n\t * path. A plugin can therefore set or remove allowed host(s) to or from the\n\t * list.\n\t *\n\t * If the host is not allowed, then the redirect defaults to wp-admin on the siteurl\n\t * instead. This prevents malicious redirects which redirect to another host,\n\t * but only used in a few places.\n\t *\n\t * Note: wp_safe_redirect() does not exit automatically, and should almost always be\n\t * followed by a call to `exit;`:\n\t *\n\t *     wp_safe_redirect( $url );\n\t *     exit;\n\t *\n\t * Exiting can also be selectively manipulated by using wp_safe_redirect() as a conditional\n\t * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} filters:\n\t *\n\t *     if ( wp_safe_redirect( $url ) ) {\n\t *         exit;\n\t *     }\n\t *\n\t * @since 2.3.0\n\t * @since 5.1.0 The return value from wp_redirect() is now passed on, and the `$x_redirect_by` parameter was added.\n\t *\n\t * @param string $location      The path or URL to redirect to.\n\t * @param int    $status        Optional. HTTP response status code to use. Default '302' (Moved Temporarily).\n\t * @param string $x_redirect_by Optional. The application doing the redirect. Default 'WordPress'.\n\t * @return bool  $redirect False if the redirect was cancelled, true otherwise.\n\t */\n\tfunction wp_safe_redirect( $location, $status = 302, $x_redirect_by = 'WordPress' ) {\n\n\t\t// Need to look at the URL the way it will end up in wp_redirect().\n\t\t$location = wp_sanitize_redirect( $location );\n\n\t\t/**\n\t\t * Filters the redirect fallback URL for when the provided redirect is not safe (local).\n\t\t *\n\t\t * @since 4.3.0\n\t\t *\n\t\t * @param string $fallback_url The fallback URL to use by default.\n\t\t * @param int    $status       The HTTP response status code to use.\n\t\t */\n\t\t$location = wp_validate_redirect( $location, apply_filters( 'wp_safe_redirect_fallback', admin_url(), $status ) );\n\n\t\treturn wp_redirect( $location, $status, $x_redirect_by );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_validate_redirect' ) ) :\n\t/**\n\t * Validates a URL for use in a redirect.\n\t *\n\t * Checks whether the $location is using an allowed host, if it has an absolute\n\t * path. A plugin can therefore set or remove allowed host(s) to or from the\n\t * list.\n\t *\n\t * If the host is not allowed, then the redirect is to $default supplied\n\t *\n\t * @since 2.8.1\n\t *\n\t * @param string $location The redirect to validate\n\t * @param string $default  The value to return if $location is not allowed\n\t * @return string redirect-sanitized URL\n\t */\n\tfunction wp_validate_redirect( $location, $default = '' ) {\n\t\t$location = wp_sanitize_redirect( trim( $location, \" \\t\\n\\r\\0\\x08\\x0B\" ) );\n\t\t// Browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'.\n\t\tif ( substr( $location, 0, 2 ) == '//' ) {\n\t\t\t$location = 'http:' . $location;\n\t\t}\n\n\t\t// In PHP 5 parse_url() may fail if the URL query part contains 'http://'.\n\t\t// See https://bugs.php.net/bug.php?id=38143\n\t\t$cut  = strpos( $location, '?' );\n\t\t$test = $cut ? substr( $location, 0, $cut ) : $location;\n\n\t\t// @-operator is used to prevent possible warnings in PHP < 5.3.3.\n\t\t$lp = @parse_url( $test );\n\n\t\t// Give up if malformed URL.\n\t\tif ( false === $lp ) {\n\t\t\treturn $default;\n\t\t}\n\n\t\t// Allow only 'http' and 'https' schemes. No 'data:', etc.\n\t\tif ( isset( $lp['scheme'] ) && ! ( 'http' == $lp['scheme'] || 'https' == $lp['scheme'] ) ) {\n\t\t\treturn $default;\n\t\t}\n\n\t\tif ( ! isset( $lp['host'] ) && ! empty( $lp['path'] ) && '/' !== $lp['path'][0] ) {\n\t\t\t$path = '';\n\t\t\tif ( ! empty( $_SERVER['REQUEST_URI'] ) ) {\n\t\t\t\t$path = dirname( parse_url( 'http://placeholder' . $_SERVER['REQUEST_URI'], PHP_URL_PATH ) . '?' );\n\t\t\t\t$path = wp_normalize_path( $path );\n\t\t\t}\n\t\t\t$location = '/' . ltrim( $path . '/', '/' ) . $location;\n\t\t}\n\n\t\t// Reject if certain components are set but host is not.\n\t\t// This catches URLs like https:host.com for which parse_url() does not set the host field.\n\t\tif ( ! isset( $lp['host'] ) && ( isset( $lp['scheme'] ) || isset( $lp['user'] ) || isset( $lp['pass'] ) || isset( $lp['port'] ) ) ) {\n\t\t\treturn $default;\n\t\t}\n\n\t\t// Reject malformed components parse_url() can return on odd inputs.\n\t\tforeach ( array( 'user', 'pass', 'host' ) as $component ) {\n\t\t\tif ( isset( $lp[ $component ] ) && strpbrk( $lp[ $component ], ':/?#@' ) ) {\n\t\t\t\treturn $default;\n\t\t\t}\n\t\t}\n\n\t\t$wpp = parse_url( home_url() );\n\n\t\t/**\n\t\t * Filters the whitelist of hosts to redirect to.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @param string[] $hosts An array of allowed host names.\n\t\t * @param string   $host  The host name of the redirect destination; empty string if not set.\n\t\t */\n\t\t$allowed_hosts = (array) apply_filters( 'allowed_redirect_hosts', array( $wpp['host'] ), isset( $lp['host'] ) ? $lp['host'] : '' );\n\n\t\tif ( isset( $lp['host'] ) && ( ! in_array( $lp['host'], $allowed_hosts ) && strtolower( $wpp['host'] ) !== $lp['host'] ) ) {\n\t\t\t$location = $default;\n\t\t}\n\n\t\treturn $location;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_notify_postauthor' ) ) :\n\t/**\n\t * Notify an author (and/or others) of a comment/trackback/pingback on a post.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param int|WP_Comment  $comment_id Comment ID or WP_Comment object.\n\t * @param string          $deprecated Not used\n\t * @return bool True on completion. False if no email addresses were specified.\n\t */\n\tfunction wp_notify_postauthor( $comment_id, $deprecated = null ) {\n\t\tif ( null !== $deprecated ) {\n\t\t\t_deprecated_argument( __FUNCTION__, '3.8.0' );\n\t\t}\n\n\t\t$comment = get_comment( $comment_id );\n\t\tif ( empty( $comment ) || empty( $comment->comment_post_ID ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$post   = get_post( $comment->comment_post_ID );\n\t\t$author = get_userdata( $post->post_author );\n\n\t\t// Who to notify? By default, just the post author, but others can be added.\n\t\t$emails = array();\n\t\tif ( $author ) {\n\t\t\t$emails[] = $author->user_email;\n\t\t}\n\n\t\t/**\n\t\t * Filters the list of email addresses to receive a comment notification.\n\t\t *\n\t\t * By default, only post authors are notified of comments. This filter allows\n\t\t * others to be added.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param string[] $emails     An array of email addresses to receive a comment notification.\n\t\t * @param int      $comment_id The comment ID.\n\t\t */\n\t\t$emails = apply_filters( 'comment_notification_recipients', $emails, $comment->comment_ID );\n\t\t$emails = array_filter( $emails );\n\n\t\t// If there are no addresses to send the comment to, bail.\n\t\tif ( ! count( $emails ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Facilitate unsetting below without knowing the keys.\n\t\t$emails = array_flip( $emails );\n\n\t\t/**\n\t\t * Filters whether to notify comment authors of their comments on their own posts.\n\t\t *\n\t\t * By default, comment authors aren't notified of their comments on their own\n\t\t * posts. This filter allows you to override that.\n\t\t *\n\t\t * @since 3.8.0\n\t\t *\n\t\t * @param bool $notify     Whether to notify the post author of their own comment.\n\t\t *                         Default false.\n\t\t * @param int  $comment_id The comment ID.\n\t\t */\n\t\t$notify_author = apply_filters( 'comment_notification_notify_author', false, $comment->comment_ID );\n\n\t\t// The comment was left by the author.\n\t\tif ( $author && ! $notify_author && $comment->user_id == $post->post_author ) {\n\t\t\tunset( $emails[ $author->user_email ] );\n\t\t}\n\n\t\t// The author moderated a comment on their own post.\n\t\tif ( $author && ! $notify_author && get_current_user_id() == $post->post_author ) {\n\t\t\tunset( $emails[ $author->user_email ] );\n\t\t}\n\n\t\t// The post author is no longer a member of the blog.\n\t\tif ( $author && ! $notify_author && ! user_can( $post->post_author, 'read_post', $post->ID ) ) {\n\t\t\tunset( $emails[ $author->user_email ] );\n\t\t}\n\n\t\t// If there's no email to send the comment to, bail, otherwise flip array back around for use below.\n\t\tif ( ! count( $emails ) ) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$emails = array_flip( $emails );\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_locale() );\n\n\t\t$comment_author_domain = '';\n\t\tif ( WP_Http::is_ip_address( $comment->comment_author_IP ) ) {\n\t\t\t$comment_author_domain = gethostbyaddr( $comment->comment_author_IP );\n\t\t}\n\n\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t// We want to reverse this for the plain text arena of emails.\n\t\t$blogname        = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\t\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\t\tswitch ( $comment->comment_type ) {\n\t\t\tcase 'trackback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message = sprintf( __( 'New trackback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\t$notify_message .= __( 'You can see all trackbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t\t/* translators: Trackback notification email subject. 1: Site title, 2: Post title. */\n\t\t\t\t$subject = sprintf( __( '[%1$s] Trackback: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t\t\tbreak;\n\n\t\t\tcase 'pingback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message = sprintf( __( 'New pingback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\t$notify_message .= __( 'You can see all pingbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t\t/* translators: Pingback notification email subject. 1: Site title, 2: Post title. */\n\t\t\t\t$subject = sprintf( __( '[%1$s] Pingback: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t\t\tbreak;\n\n\t\t\tdefault: // Comments.\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message = sprintf( __( 'New comment on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t/* translators: 1: Comment author's name, 2: Comment author's IP address, 3: Comment author's hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment author email. */\n\t\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\n\t\t\t\tif ( $comment->comment_parent && user_can( $post->post_author, 'edit_comment', $comment->comment_parent ) ) {\n\t\t\t\t\t/* translators: Comment moderation. %s: Parent comment edit URL. */\n\t\t\t\t\t$notify_message .= sprintf( __( 'In reply to: %s' ), admin_url( \"comment.php?action=editcomment&c={$comment->comment_parent}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t\t}\n\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\t$notify_message .= __( 'You can see all comments on this post here:' ) . \"\\r\\n\";\n\t\t\t\t/* translators: Comment notification email subject. 1: Site title, 2: Post title. */\n\t\t\t\t$subject = sprintf( __( '[%1$s] Comment: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"#comments\\r\\n\\r\\n\";\n\t\t/* translators: %s: Comment URL. */\n\t\t$notify_message .= sprintf( __( 'Permalink: %s' ), get_comment_link( $comment ) ) . \"\\r\\n\";\n\n\t\tif ( user_can( $post->post_author, 'edit_comment', $comment->comment_ID ) ) {\n\t\t\tif ( EMPTY_TRASH_DAYS ) {\n\t\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t} else {\n\t\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t}\n\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t}\n\n\t\t$wp_email = 'wordpress@' . preg_replace( '#^www\\.#', '', strtolower( $_SERVER['SERVER_NAME'] ) );\n\n\t\tif ( '' == $comment->comment_author ) {\n\t\t\t$from = \"From: \\\"$blogname\\\" <$wp_email>\";\n\t\t\tif ( '' != $comment->comment_author_email ) {\n\t\t\t\t$reply_to = \"Reply-To: $comment->comment_author_email\";\n\t\t\t}\n\t\t} else {\n\t\t\t$from = \"From: \\\"$comment->comment_author\\\" <$wp_email>\";\n\t\t\tif ( '' != $comment->comment_author_email ) {\n\t\t\t\t$reply_to = \"Reply-To: \\\"$comment->comment_author_email\\\" <$comment->comment_author_email>\";\n\t\t\t}\n\t\t}\n\n\t\t$message_headers = \"$from\\n\"\n\t\t. 'Content-Type: text/plain; charset=\"' . get_option( 'blog_charset' ) . \"\\\"\\n\";\n\n\t\tif ( isset( $reply_to ) ) {\n\t\t\t$message_headers .= $reply_to . \"\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Filters the comment notification email text.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $notify_message The comment notification email text.\n\t\t * @param int    $comment_id     Comment ID.\n\t\t */\n\t\t$notify_message = apply_filters( 'comment_notification_text', $notify_message, $comment->comment_ID );\n\n\t\t/**\n\t\t * Filters the comment notification email subject.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $subject    The comment notification email subject.\n\t\t * @param int    $comment_id Comment ID.\n\t\t */\n\t\t$subject = apply_filters( 'comment_notification_subject', $subject, $comment->comment_ID );\n\n\t\t/**\n\t\t * Filters the comment notification email headers.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $message_headers Headers for the comment notification email.\n\t\t * @param int    $comment_id      Comment ID.\n\t\t */\n\t\t$message_headers = apply_filters( 'comment_notification_headers', $message_headers, $comment->comment_ID );\n\n\t\tforeach ( $emails as $email ) {\n\t\t\twp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t\t}\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\treturn true;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_notify_moderator' ) ) :\n\t/**\n\t * Notifies the moderator of the site about a new comment that is awaiting approval.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @global wpdb $wpdb WordPress database abstraction object.\n\t *\n\t * Uses the {@see 'notify_moderator'} filter to determine whether the site moderator\n\t * should be notified, overriding the site setting.\n\t *\n\t * @param int $comment_id Comment ID.\n\t * @return true Always returns true.\n\t */\n\tfunction wp_notify_moderator( $comment_id ) {\n\t\tglobal $wpdb;\n\n\t\t$maybe_notify = get_option( 'moderation_notify' );\n\n\t\t/**\n\t\t * Filters whether to send the site moderator email notifications, overriding the site setting.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param bool $maybe_notify Whether to notify blog moderator.\n\t\t * @param int  $comment_ID   The id of the comment for the notification.\n\t\t */\n\t\t$maybe_notify = apply_filters( 'notify_moderator', $maybe_notify, $comment_id );\n\n\t\tif ( ! $maybe_notify ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$comment = get_comment( $comment_id );\n\t\t$post    = get_post( $comment->comment_post_ID );\n\t\t$user    = get_userdata( $post->post_author );\n\t\t// Send to the administration and to the post author if the author can modify the comment.\n\t\t$emails = array( get_option( 'admin_email' ) );\n\t\tif ( $user && user_can( $user->ID, 'edit_comment', $comment_id ) && ! empty( $user->user_email ) ) {\n\t\t\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) ) {\n\t\t\t\t$emails[] = $user->user_email;\n\t\t\t}\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_locale() );\n\n\t\t$comment_author_domain = '';\n\t\tif ( WP_Http::is_ip_address( $comment->comment_author_IP ) ) {\n\t\t\t$comment_author_domain = gethostbyaddr( $comment->comment_author_IP );\n\t\t}\n\n\t\t$comments_waiting = $wpdb->get_var( \"SELECT COUNT(*) FROM $wpdb->comments WHERE comment_approved = '0'\" );\n\n\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t// We want to reverse this for the plain text arena of emails.\n\t\t$blogname        = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\t\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\t\tswitch ( $comment->comment_type ) {\n\t\t\tcase 'trackback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message  = sprintf( __( 'A new trackback on the post \"%s\" is waiting for your approval' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"\\r\\n\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= __( 'Trackback excerpt: ' ) . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\t\tbreak;\n\n\t\t\tcase 'pingback':\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message  = sprintf( __( 'A new pingback on the post \"%s\" is waiting for your approval' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"\\r\\n\\r\\n\";\n\t\t\t\t/* translators: 1: Trackback/pingback website name, 2: Website IP address, 3: Website hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= __( 'Pingback excerpt: ' ) . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\t\tbreak;\n\n\t\t\tdefault: // Comments.\n\t\t\t\t/* translators: %s: Post title. */\n\t\t\t\t$notify_message  = sprintf( __( 'A new comment on the post \"%s\" is waiting for your approval' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t\t$notify_message .= get_permalink( $comment->comment_post_ID ) . \"\\r\\n\\r\\n\";\n\t\t\t\t/* translators: 1: Comment author's name, 2: Comment author's IP address, 3: Comment author's hostname. */\n\t\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP address: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Comment author email. */\n\t\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t\t/* translators: %s: Trackback/pingback/comment author URL. */\n\t\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\n\t\t\t\tif ( $comment->comment_parent ) {\n\t\t\t\t\t/* translators: Comment moderation. %s: Parent comment edit URL. */\n\t\t\t\t\t$notify_message .= sprintf( __( 'In reply to: %s' ), admin_url( \"comment.php?action=editcomment&c={$comment->comment_parent}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t\t\t}\n\n\t\t\t\t/* translators: %s: Comment text. */\n\t\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t$notify_message .= sprintf( __( 'Approve it: %s' ), admin_url( \"comment.php?action=approve&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\t\tif ( EMPTY_TRASH_DAYS ) {\n\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t} else {\n\t\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t}\n\n\t\t/* translators: Comment moderation. %s: Comment action URL. */\n\t\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\t\t$notify_message .= sprintf(\n\t\t\t/* translators: Comment moderation. %s: Number of comments awaiting approval. */\n\t\t\t_n(\n\t\t\t\t'Currently %s comment is waiting for approval. Please visit the moderation panel:',\n\t\t\t\t'Currently %s comments are waiting for approval. Please visit the moderation panel:',\n\t\t\t\t$comments_waiting\n\t\t\t),\n\t\t\tnumber_format_i18n( $comments_waiting )\n\t\t) . \"\\r\\n\";\n\t\t$notify_message .= admin_url( 'edit-comments.php?comment_status=moderated#wpbody-content' ) . \"\\r\\n\";\n\n\t\t/* translators: Comment moderation notification email subject. 1: Site title, 2: Post title. */\n\t\t$subject         = sprintf( __( '[%1$s] Please moderate: \"%2$s\"' ), $blogname, $post->post_title );\n\t\t$message_headers = '';\n\n\t\t/**\n\t\t * Filters the list of recipients for comment moderation emails.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param string[] $emails     List of email addresses to notify for comment moderation.\n\t\t * @param int      $comment_id Comment ID.\n\t\t */\n\t\t$emails = apply_filters( 'comment_moderation_recipients', $emails, $comment_id );\n\n\t\t/**\n\t\t * Filters the comment moderation email text.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $notify_message Text of the comment moderation email.\n\t\t * @param int    $comment_id     Comment ID.\n\t\t */\n\t\t$notify_message = apply_filters( 'comment_moderation_text', $notify_message, $comment_id );\n\n\t\t/**\n\t\t * Filters the comment moderation email subject.\n\t\t *\n\t\t * @since 1.5.2\n\t\t *\n\t\t * @param string $subject    Subject of the comment moderation email.\n\t\t * @param int    $comment_id Comment ID.\n\t\t */\n\t\t$subject = apply_filters( 'comment_moderation_subject', $subject, $comment_id );\n\n\t\t/**\n\t\t * Filters the comment moderation email headers.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $message_headers Headers for the comment moderation email.\n\t\t * @param int    $comment_id      Comment ID.\n\t\t */\n\t\t$message_headers = apply_filters( 'comment_moderation_headers', $message_headers, $comment_id );\n\n\t\tforeach ( $emails as $email ) {\n\t\t\twp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t\t}\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\n\t\treturn true;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_password_change_notification' ) ) :\n\t/**\n\t * Notify the blog admin of a user changing password, normally via email.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param WP_User $user User object.\n\t */\n\tfunction wp_password_change_notification( $user ) {\n\t\t// Send a copy of password change notification to the admin,\n\t\t// but check to see if it's the admin whose password we're changing, and skip this.\n\t\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) ) {\n\t\t\t/* translators: %s: User name. */\n\t\t\t$message = sprintf( __( 'Password changed for user: %s' ), $user->user_login ) . \"\\r\\n\";\n\t\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t\t// We want to reverse this for the plain text arena of emails.\n\t\t\t$blogname = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\n\t\t\t$wp_password_change_notification_email = array(\n\t\t\t\t'to'      => get_option( 'admin_email' ),\n\t\t\t\t/* translators: Password change notification email subject. %s: Site title. */\n\t\t\t\t'subject' => __( '[%s] Password Changed' ),\n\t\t\t\t'message' => $message,\n\t\t\t\t'headers' => '',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Filters the contents of the password change notification email sent to the site admin.\n\t\t\t *\n\t\t\t * @since 4.9.0\n\t\t\t *\n\t\t\t * @param array   $wp_password_change_notification_email {\n\t\t\t *     Used to build wp_mail().\n\t\t\t *\n\t\t\t *     @type string $to      The intended recipient - site admin email address.\n\t\t\t *     @type string $subject The subject of the email.\n\t\t\t *     @type string $message The body of the email.\n\t\t\t *     @type string $headers The headers of the email.\n\t\t\t * }\n\t\t\t * @param WP_User $user     User object for user whose password was changed.\n\t\t\t * @param string  $blogname The site title.\n\t\t\t */\n\t\t\t$wp_password_change_notification_email = apply_filters( 'wp_password_change_notification_email', $wp_password_change_notification_email, $user, $blogname );\n\n\t\t\twp_mail(\n\t\t\t\t$wp_password_change_notification_email['to'],\n\t\t\t\twp_specialchars_decode( sprintf( $wp_password_change_notification_email['subject'], $blogname ) ),\n\t\t\t\t$wp_password_change_notification_email['message'],\n\t\t\t\t$wp_password_change_notification_email['headers']\n\t\t\t);\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_new_user_notification' ) ) :\n\t/**\n\t * Email login credentials to a newly-registered user.\n\t *\n\t * A new user registration notification is also sent to admin email.\n\t *\n\t * @since 2.0.0\n\t * @since 4.3.0 The `$plaintext_pass` parameter was changed to `$notify`.\n\t * @since 4.3.1 The `$plaintext_pass` parameter was deprecated. `$notify` added as a third parameter.\n\t * @since 4.6.0 The `$notify` parameter accepts 'user' for sending notification only to the user created.\n\t *\n\t * @param int    $user_id    User ID.\n\t * @param null   $deprecated Not used (argument deprecated).\n\t * @param string $notify     Optional. Type of notification that should happen. Accepts 'admin' or an empty\n\t *                           string (admin only), 'user', or 'both' (admin and user). Default empty.\n\t */\n\tfunction wp_new_user_notification( $user_id, $deprecated = null, $notify = '' ) {\n\t\tif ( null !== $deprecated ) {\n\t\t\t_deprecated_argument( __FUNCTION__, '4.3.1' );\n\t\t}\n\n\t\t// Accepts only 'user', 'admin' , 'both' or default '' as $notify.\n\t\tif ( ! in_array( $notify, array( 'user', 'admin', 'both', '' ), true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$user = get_userdata( $user_id );\n\n\t\t// The blogname option is escaped with esc_html() on the way into the database in sanitize_option().\n\t\t// We want to reverse this for the plain text arena of emails.\n\t\t$blogname = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\n\t\tif ( 'user' !== $notify ) {\n\t\t\t$switched_locale = switch_to_locale( get_locale() );\n\n\t\t\t/* translators: %s: Site title. */\n\t\t\t$message = sprintf( __( 'New user registration on your site %s:' ), $blogname ) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: %s: User login. */\n\t\t\t$message .= sprintf( __( 'Username: %s' ), $user->user_login ) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: %s: User email address. */\n\t\t\t$message .= sprintf( __( 'Email: %s' ), $user->user_email ) . \"\\r\\n\";\n\n\t\t\t$wp_new_user_notification_email_admin = array(\n\t\t\t\t'to'      => get_option( 'admin_email' ),\n\t\t\t\t/* translators: New user registration notification email subject. %s: Site title. */\n\t\t\t\t'subject' => __( '[%s] New User Registration' ),\n\t\t\t\t'message' => $message,\n\t\t\t\t'headers' => '',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Filters the contents of the new user notification email sent to the site admin.\n\t\t\t *\n\t\t\t * @since 4.9.0\n\t\t\t *\n\t\t\t * @param array   $wp_new_user_notification_email_admin {\n\t\t\t *     Used to build wp_mail().\n\t\t\t *\n\t\t\t *     @type string $to      The intended recipient - site admin email address.\n\t\t\t *     @type string $subject The subject of the email.\n\t\t\t *     @type string $message The body of the email.\n\t\t\t *     @type string $headers The headers of the email.\n\t\t\t * }\n\t\t\t * @param WP_User $user     User object for new user.\n\t\t\t * @param string  $blogname The site title.\n\t\t\t */\n\t\t\t$wp_new_user_notification_email_admin = apply_filters( 'wp_new_user_notification_email_admin', $wp_new_user_notification_email_admin, $user, $blogname );\n\n\t\t\twp_mail(\n\t\t\t\t$wp_new_user_notification_email_admin['to'],\n\t\t\t\twp_specialchars_decode( sprintf( $wp_new_user_notification_email_admin['subject'], $blogname ) ),\n\t\t\t\t$wp_new_user_notification_email_admin['message'],\n\t\t\t\t$wp_new_user_notification_email_admin['headers']\n\t\t\t);\n\n\t\t\tif ( $switched_locale ) {\n\t\t\t\trestore_previous_locale();\n\t\t\t}\n\t\t}\n\n\t\t// `$deprecated` was pre-4.3 `$plaintext_pass`. An empty `$plaintext_pass` didn't sent a user notification.\n\t\tif ( 'admin' === $notify || ( empty( $deprecated ) && empty( $notify ) ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$key = get_password_reset_key( $user );\n\t\tif ( is_wp_error( $key ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$switched_locale = switch_to_locale( get_user_locale( $user ) );\n\n\t\t/* translators: %s: User login. */\n\t\t$message  = sprintf( __( 'Username: %s' ), $user->user_login ) . \"\\r\\n\\r\\n\";\n\t\t$message .= __( 'To set your password, visit the following address:' ) . \"\\r\\n\\r\\n\";\n\t\t$message .= network_site_url( \"wp-login.php?action=rp&key=$key&login=\" . rawurlencode( $user->user_login ), 'login' ) . \"\\r\\n\\r\\n\";\n\n\t\t$message .= wp_login_url() . \"\\r\\n\";\n\n\t\t$wp_new_user_notification_email = array(\n\t\t\t'to'      => $user->user_email,\n\t\t\t/* translators: Login details notification email subject. %s: Site title. */\n\t\t\t'subject' => __( '[%s] Login Details' ),\n\t\t\t'message' => $message,\n\t\t\t'headers' => '',\n\t\t);\n\n\t\t/**\n\t\t * Filters the contents of the new user notification email sent to the new user.\n\t\t *\n\t\t * @since 4.9.0\n\t\t *\n\t\t * @param array   $wp_new_user_notification_email {\n\t\t *     Used to build wp_mail().\n\t\t *\n\t\t *     @type string $to      The intended recipient - New user email address.\n\t\t *     @type string $subject The subject of the email.\n\t\t *     @type string $message The body of the email.\n\t\t *     @type string $headers The headers of the email.\n\t\t * }\n\t\t * @param WP_User $user     User object for new user.\n\t\t * @param string  $blogname The site title.\n\t\t */\n\t\t$wp_new_user_notification_email = apply_filters( 'wp_new_user_notification_email', $wp_new_user_notification_email, $user, $blogname );\n\n\t\twp_mail(\n\t\t\t$wp_new_user_notification_email['to'],\n\t\t\twp_specialchars_decode( sprintf( $wp_new_user_notification_email['subject'], $blogname ) ),\n\t\t\t$wp_new_user_notification_email['message'],\n\t\t\t$wp_new_user_notification_email['headers']\n\t\t);\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\t}\nendif;\n\nif ( ! function_exists( 'wp_nonce_tick' ) ) :\n\t/**\n\t * Returns the time-dependent variable for nonce creation.\n\t *\n\t * A nonce has a lifespan of two ticks. Nonces in their second tick may be\n\t * updated, e.g. by autosave.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @return float Float value rounded up to the next highest integer.\n\t */\n\tfunction wp_nonce_tick() {\n\t\t/**\n\t\t * Filters the lifespan of nonces in seconds.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param int $lifespan Lifespan of nonces in seconds. Default 86,400 seconds, or one day.\n\t\t */\n\t\t$nonce_life = apply_filters( 'nonce_life', DAY_IN_SECONDS );\n\n\t\treturn ceil( time() / ( $nonce_life / 2 ) );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_verify_nonce' ) ) :\n\t/**\n\t * Verifies that a correct security nonce was used with time limit.\n\t *\n\t * A nonce is valid for 24 hours (by default).\n\t *\n\t * @since 2.0.3\n\t *\n\t * @param string     $nonce  Nonce value that was used for verification, usually via a form field.\n\t * @param string|int $action Should give context to what is taking place and be the same when nonce was created.\n\t * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,\n\t *                   2 if the nonce is valid and generated between 12-24 hours ago.\n\t *                   False if the nonce is invalid.\n\t */\n\tfunction wp_verify_nonce( $nonce, $action = -1 ) {\n\t\t$nonce = (string) $nonce;\n\t\t$user  = wp_get_current_user();\n\t\t$uid   = (int) $user->ID;\n\t\tif ( ! $uid ) {\n\t\t\t/**\n\t\t\t * Filters whether the user who generated the nonce is logged out.\n\t\t\t *\n\t\t\t * @since 3.5.0\n\t\t\t *\n\t\t\t * @param int    $uid    ID of the nonce-owning user.\n\t\t\t * @param string $action The nonce action.\n\t\t\t */\n\t\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t\t}\n\n\t\tif ( empty( $nonce ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$token = wp_get_session_token();\n\t\t$i     = wp_nonce_tick();\n\n\t\t// Nonce generated 0-12 hours ago.\n\t\t$expected = substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\t\tif ( hash_equals( $expected, $nonce ) ) {\n\t\t\treturn 1;\n\t\t}\n\n\t\t// Nonce generated 12-24 hours ago.\n\t\t$expected = substr( wp_hash( ( $i - 1 ) . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\t\tif ( hash_equals( $expected, $nonce ) ) {\n\t\t\treturn 2;\n\t\t}\n\n\t\t/**\n\t\t * Fires when nonce verification fails.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string     $nonce  The invalid nonce.\n\t\t * @param string|int $action The nonce action.\n\t\t * @param WP_User    $user   The current user object.\n\t\t * @param string     $token  The user's session token.\n\t\t */\n\t\tdo_action( 'wp_verify_nonce_failed', $nonce, $action, $user, $token );\n\n\t\t// Invalid nonce.\n\t\treturn false;\n\t}\nendif;\n\nif ( ! function_exists( 'wp_create_nonce' ) ) :\n\t/**\n\t * Creates a cryptographic token tied to a specific action, user, user session,\n\t * and window of time.\n\t *\n\t * @since 2.0.3\n\t * @since 4.0.0 Session tokens were integrated with nonce creation\n\t *\n\t * @param string|int $action Scalar value to add context to the nonce.\n\t * @return string The token.\n\t */\n\tfunction wp_create_nonce( $action = -1 ) {\n\t\t$user = wp_get_current_user();\n\t\t$uid  = (int) $user->ID;\n\t\tif ( ! $uid ) {\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t\t}\n\n\t\t$token = wp_get_session_token();\n\t\t$i     = wp_nonce_tick();\n\n\t\treturn substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_salt' ) ) :\n\t/**\n\t * Returns a salt to add to hashes.\n\t *\n\t * Salts are created using secret keys. Secret keys are located in two places:\n\t * in the database and in the wp-config.php file. The secret key in the database\n\t * is randomly generated and will be appended to the secret keys in wp-config.php.\n\t *\n\t * The secret keys in wp-config.php should be updated to strong, random keys to maximize\n\t * security. Below is an example of how the secret key constants are defined.\n\t * Do not paste this example directly into wp-config.php. Instead, have a\n\t * {@link https://api.wordpress.org/secret-key/1.1/salt/ secret key created} just\n\t * for you.\n\t *\n\t *     define('AUTH_KEY',         ' Xakm<o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@< >M%G4Yt>f`z]MON');\n\t *     define('SECURE_AUTH_KEY',  'LzJ}op]mr|6+![P}Ak:uNdJCJZd>(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%/U^O~');\n\t *     define('LOGGED_IN_KEY',    '|i|Ux`9<p-h$aFf(qnT:sDO:D1P^wZ$$/Ra@miTJi9G;ddp_<q}6H1)o|a +&JCM');\n\t *     define('NONCE_KEY',        '%:R{[P|,s.KuMltH5}cI;/k<Gx~j!f0I)m_sIyu+&NJZ)-iO>z7X>QYR0Z_XnZ@|');\n\t *     define('AUTH_SALT',        'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW');\n\t *     define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9/^4-3 STz},T(w}W<I`.JjPi)<Bmf1v,HpGe}T1:Xt7n');\n\t *     define('LOGGED_IN_SALT',   '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n<+=uKR:>*c(u`g~EJBf#8u#R{mUEZrozmm');\n\t *     define('NONCE_SALT',       'h`GXHhD>SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&`+AycHcAV$+?@3q+rxV{%^VyKT');\n\t *\n\t * Salting passwords helps against tools which has stored hashed values of\n\t * common dictionary strings. The added values makes it harder to crack.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @link https://api.wordpress.org/secret-key/1.1/salt/ Create secrets for wp-config.php\n\t *\n\t * @staticvar array $cached_salts\n\t * @staticvar array $duplicated_keys\n\t *\n\t * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n\t * @return string Salt value\n\t */\n\tfunction wp_salt( $scheme = 'auth' ) {\n\t\tstatic $cached_salts = array();\n\t\tif ( isset( $cached_salts[ $scheme ] ) ) {\n\t\t\t/**\n\t\t\t * Filters the WordPress salt.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $cached_salt Cached salt for the given scheme.\n\t\t\t * @param string $scheme      Authentication scheme. Values include 'auth',\n\t\t\t *                            'secure_auth', 'logged_in', and 'nonce'.\n\t\t\t */\n\t\t\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n\t\t}\n\n\t\tstatic $duplicated_keys;\n\t\tif ( null === $duplicated_keys ) {\n\t\t\t$duplicated_keys = array( 'put your unique phrase here' => true );\n\t\t\tforeach ( array( 'AUTH', 'SECURE_AUTH', 'LOGGED_IN', 'NONCE', 'SECRET' ) as $first ) {\n\t\t\t\tforeach ( array( 'KEY', 'SALT' ) as $second ) {\n\t\t\t\t\tif ( ! defined( \"{$first}_{$second}\" ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$value                     = constant( \"{$first}_{$second}\" );\n\t\t\t\t\t$duplicated_keys[ $value ] = isset( $duplicated_keys[ $value ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$values = array(\n\t\t\t'key'  => '',\n\t\t\t'salt' => '',\n\t\t);\n\t\tif ( defined( 'SECRET_KEY' ) && SECRET_KEY && empty( $duplicated_keys[ SECRET_KEY ] ) ) {\n\t\t\t$values['key'] = SECRET_KEY;\n\t\t}\n\t\tif ( 'auth' == $scheme && defined( 'SECRET_SALT' ) && SECRET_SALT && empty( $duplicated_keys[ SECRET_SALT ] ) ) {\n\t\t\t$values['salt'] = SECRET_SALT;\n\t\t}\n\n\t\tif ( in_array( $scheme, array( 'auth', 'secure_auth', 'logged_in', 'nonce' ) ) ) {\n\t\t\tforeach ( array( 'key', 'salt' ) as $type ) {\n\t\t\t\t$const = strtoupper( \"{$scheme}_{$type}\" );\n\t\t\t\tif ( defined( $const ) && constant( $const ) && empty( $duplicated_keys[ constant( $const ) ] ) ) {\n\t\t\t\t\t$values[ $type ] = constant( $const );\n\t\t\t\t} elseif ( ! $values[ $type ] ) {\n\t\t\t\t\t$values[ $type ] = get_site_option( \"{$scheme}_{$type}\" );\n\t\t\t\t\tif ( ! $values[ $type ] ) {\n\t\t\t\t\t\t$values[ $type ] = wp_generate_password( 64, true, true );\n\t\t\t\t\t\tupdate_site_option( \"{$scheme}_{$type}\", $values[ $type ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! $values['key'] ) {\n\t\t\t\t$values['key'] = get_site_option( 'secret_key' );\n\t\t\t\tif ( ! $values['key'] ) {\n\t\t\t\t\t$values['key'] = wp_generate_password( 64, true, true );\n\t\t\t\t\tupdate_site_option( 'secret_key', $values['key'] );\n\t\t\t\t}\n\t\t\t}\n\t\t\t$values['salt'] = hash_hmac( 'md5', $scheme, $values['key'] );\n\t\t}\n\n\t\t$cached_salts[ $scheme ] = $values['key'] . $values['salt'];\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_hash' ) ) :\n\t/**\n\t * Get hash of given string.\n\t *\n\t * @since 2.0.3\n\t *\n\t * @param string $data   Plain text to hash\n\t * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n\t * @return string Hash of $data\n\t */\n\tfunction wp_hash( $data, $scheme = 'auth' ) {\n\t\t$salt = wp_salt( $scheme );\n\n\t\treturn hash_hmac( 'md5', $data, $salt );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_hash_password' ) ) :\n\t/**\n\t * Create a hash (encrypt) of a plain text password.\n\t *\n\t * For integration with other applications, this function can be overwritten to\n\t * instead use the other package password checking algorithm.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global PasswordHash $wp_hasher PHPass object\n\t *\n\t * @param string $password Plain text user password to hash\n\t * @return string The hash string of the password\n\t */\n\tfunction wp_hash_password( $password ) {\n\t\tglobal $wp_hasher;\n\n\t\tif ( empty( $wp_hasher ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t\t\t// By default, use the portable hash from phpass.\n\t\t\t$wp_hasher = new PasswordHash( 8, true );\n\t\t}\n\n\t\treturn $wp_hasher->HashPassword( trim( $password ) );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_check_password' ) ) :\n\t/**\n\t * Checks the plaintext password against the encrypted Password.\n\t *\n\t * Maintains compatibility between old version and the new cookie authentication\n\t * protocol using PHPass library. The $hash parameter is the encrypted password\n\t * and the function compares the plain text password when encrypted similarly\n\t * against the already encrypted password to see if they match.\n\t *\n\t * For integration with other applications, this function can be overwritten to\n\t * instead use the other package password checking algorithm.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global PasswordHash $wp_hasher PHPass object used for checking the password\n\t *  against the $hash + $password\n\t * @uses PasswordHash::CheckPassword\n\t *\n\t * @param string     $password Plaintext user's password\n\t * @param string     $hash     Hash of the user's password to check against.\n\t * @param string|int $user_id  Optional. User ID.\n\t * @return bool False, if the $password does not match the hashed password\n\t */\n\tfunction wp_check_password( $password, $hash, $user_id = '' ) {\n\t\tglobal $wp_hasher;\n\n\t\t// If the hash is still md5...\n\t\tif ( strlen( $hash ) <= 32 ) {\n\t\t\t$check = hash_equals( $hash, md5( $password ) );\n\t\t\tif ( $check && $user_id ) {\n\t\t\t\t// Rehash using new hash.\n\t\t\t\twp_set_password( $password, $user_id );\n\t\t\t\t$hash = wp_hash_password( $password );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters whether the plaintext password matches the encrypted password.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param bool       $check    Whether the passwords match.\n\t\t\t * @param string     $password The plaintext password.\n\t\t\t * @param string     $hash     The hashed password.\n\t\t\t * @param string|int $user_id  User ID. Can be empty.\n\t\t\t */\n\t\t\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n\t\t}\n\n\t\t// If the stored hash is longer than an MD5,\n\t\t// presume the new style phpass portable hash.\n\t\tif ( empty( $wp_hasher ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/class-phpass.php';\n\t\t\t// By default, use the portable hash from phpass.\n\t\t\t$wp_hasher = new PasswordHash( 8, true );\n\t\t}\n\n\t\t$check = $wp_hasher->CheckPassword( $password, $hash );\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_generate_password' ) ) :\n\t/**\n\t * Generates a random password drawn from the defined set of characters.\n\t *\n\t * Uses wp_rand() is used to create passwords with far less predictability\n\t * than similar native PHP functions like `rand()` or `mt_rand()`.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param int  $length              Optional. The length of password to generate. Default 12.\n\t * @param bool $special_chars       Optional. Whether to include standard special characters.\n\t *                                  Default true.\n\t * @param bool $extra_special_chars Optional. Whether to include other special characters.\n\t *                                  Used when generating secret keys and salts. Default false.\n\t * @return string The random password.\n\t */\n\tfunction wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {\n\t\t$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\t\tif ( $special_chars ) {\n\t\t\t$chars .= '!@#$%^&*()';\n\t\t}\n\t\tif ( $extra_special_chars ) {\n\t\t\t$chars .= '-_ []{}<>~`+=,.;:/?|';\n\t\t}\n\n\t\t$password = '';\n\t\tfor ( $i = 0; $i < $length; $i++ ) {\n\t\t\t$password .= substr( $chars, wp_rand( 0, strlen( $chars ) - 1 ), 1 );\n\t\t}\n\n\t\t/**\n\t\t * Filters the randomly-generated password.\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @since 5.3.0 Added the `$length`, `$special_chars`, and `$extra_special_chars` parameters.\n\t\t *\n\t\t * @param string $password            The generated password.\n\t\t * @param int    $length              The length of password to generate.\n\t\t * @param bool   $special_chars       Whether to include standard special characters.\n\t\t * @param bool   $extra_special_chars Whether to include other special characters.\n\t\t */\n\t\treturn apply_filters( 'random_password', $password, $length, $special_chars, $extra_special_chars );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_rand' ) ) :\n\t/**\n\t * Generates a random number.\n\t *\n\t * @since 2.6.2\n\t * @since 4.4.0 Uses PHP7 random_int() or the random_compat library if available.\n\t *\n\t * @global string $rnd_value\n\t * @staticvar string $seed\n\t * @staticvar bool $use_random_int_functionality\n\t *\n\t * @param int $min Lower limit for the generated number\n\t * @param int $max Upper limit for the generated number\n\t * @return int A random number between min and max\n\t */\n\tfunction wp_rand( $min = 0, $max = 0 ) {\n\t\tglobal $rnd_value;\n\n\t\t// Some misconfigured 32-bit environments (Entropy PHP, for example)\n\t\t// truncate integers larger than PHP_INT_MAX to PHP_INT_MAX rather than overflowing them to floats.\n\t\t$max_random_number = 3000000000 === 2147483647 ? (float) '4294967295' : 4294967295; // 4294967295 = 0xffffffff\n\n\t\t// We only handle ints, floats are truncated to their integer value.\n\t\t$min = (int) $min;\n\t\t$max = (int) $max;\n\n\t\t// Use PHP's CSPRNG, or a compatible method.\n\t\tstatic $use_random_int_functionality = true;\n\t\tif ( $use_random_int_functionality ) {\n\t\t\ttry {\n\t\t\t\t$_max = ( 0 != $max ) ? $max : $max_random_number;\n\t\t\t\t// wp_rand() can accept arguments in either order, PHP cannot.\n\t\t\t\t$_max = max( $min, $_max );\n\t\t\t\t$_min = min( $min, $_max );\n\t\t\t\t$val  = random_int( $_min, $_max );\n\t\t\t\tif ( false !== $val ) {\n\t\t\t\t\treturn absint( $val );\n\t\t\t\t} else {\n\t\t\t\t\t$use_random_int_functionality = false;\n\t\t\t\t}\n\t\t\t} catch ( Error $e ) {\n\t\t\t\t$use_random_int_functionality = false;\n\t\t\t} catch ( Exception $e ) {\n\t\t\t\t$use_random_int_functionality = false;\n\t\t\t}\n\t\t}\n\n\t\t// Reset $rnd_value after 14 uses.\n\t\t// 32 (md5) + 40 (sha1) + 40 (sha1) / 8 = 14 random numbers from $rnd_value.\n\t\tif ( strlen( $rnd_value ) < 8 ) {\n\t\t\tif ( defined( 'WP_SETUP_CONFIG' ) ) {\n\t\t\t\tstatic $seed = '';\n\t\t\t} else {\n\t\t\t\t$seed = get_transient( 'random_seed' );\n\t\t\t}\n\t\t\t$rnd_value  = md5( uniqid( microtime() . mt_rand(), true ) . $seed );\n\t\t\t$rnd_value .= sha1( $rnd_value );\n\t\t\t$rnd_value .= sha1( $rnd_value . $seed );\n\t\t\t$seed       = md5( $seed . $rnd_value );\n\t\t\tif ( ! defined( 'WP_SETUP_CONFIG' ) && ! defined( 'WP_INSTALLING' ) ) {\n\t\t\t\tset_transient( 'random_seed', $seed );\n\t\t\t}\n\t\t}\n\n\t\t// Take the first 8 digits for our value.\n\t\t$value = substr( $rnd_value, 0, 8 );\n\n\t\t// Strip the first eight, leaving the remainder for the next call to wp_rand().\n\t\t$rnd_value = substr( $rnd_value, 8 );\n\n\t\t$value = abs( hexdec( $value ) );\n\n\t\t// Reduce the value to be within the min - max range.\n\t\tif ( 0 != $max ) {\n\t\t\t$value = $min + ( $max - $min + 1 ) * $value / ( $max_random_number + 1 );\n\t\t}\n\n\t\treturn abs( intval( $value ) );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_set_password' ) ) :\n\t/**\n\t * Updates the user's password with a new encrypted one.\n\t *\n\t * For integration with other applications, this function can be overwritten to\n\t * instead use the other package password checking algorithm.\n\t *\n\t * Please note: This function should be used sparingly and is really only meant for single-time\n\t * application. Leveraging this improperly in a plugin or theme could result in an endless loop\n\t * of password resets if precautions are not taken to ensure it does not execute on every page load.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global wpdb $wpdb WordPress database abstraction object.\n\t *\n\t * @param string $password The plaintext new user password\n\t * @param int    $user_id  User ID\n\t */\n\tfunction wp_set_password( $password, $user_id ) {\n\t\tglobal $wpdb;\n\n\t\t$hash = wp_hash_password( $password );\n\t\t$wpdb->update(\n\t\t\t$wpdb->users,\n\t\t\tarray(\n\t\t\t\t'user_pass'           => $hash,\n\t\t\t\t'user_activation_key' => '',\n\t\t\t),\n\t\t\tarray( 'ID' => $user_id )\n\t\t);\n\n\t\tclean_user_cache( $user_id );\n\t}\nendif;\n\nif ( ! function_exists( 'get_avatar' ) ) :\n\t/**\n\t * Retrieve the avatar `<img>` tag for a user, email address, MD5 hash, comment, or post.\n\t *\n\t * @since 2.5.0\n\t * @since 4.2.0 Optional `$args` parameter added.\n\t *\n\t * @param mixed $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t *                           user email, WP_User object, WP_Post object, or WP_Comment object.\n\t * @param int    $size       Optional. Height and width of the avatar image file in pixels. Default 96.\n\t * @param string $default    Optional. URL for the default image or a default type. Accepts '404'\n\t *                           (return a 404 instead of a default image), 'retro' (8bit), 'monsterid'\n\t *                           (monster), 'wavatar' (cartoon face), 'indenticon' (the \"quilt\"),\n\t *                           'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF),\n\t *                           or 'gravatar_default' (the Gravatar logo). Default is the value of the\n\t *                           'avatar_default' option, with a fallback of 'mystery'.\n\t * @param string $alt        Optional. Alternative text to use in &lt;img&gt; tag. Default empty.\n\t * @param array  $args       {\n\t *     Optional. Extra arguments to retrieve the avatar.\n\t *\n\t *     @type int          $height        Display height of the avatar in pixels. Defaults to $size.\n\t *     @type int          $width         Display width of the avatar in pixels. Defaults to $size.\n\t *     @type bool         $force_default Whether to always show the default image, never the Gravatar. Default false.\n\t *     @type string       $rating        What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are\n\t *                                       judged in that order. Default is the value of the 'avatar_rating' option.\n\t *     @type string       $scheme        URL scheme to use. See set_url_scheme() for accepted values.\n\t *                                       Default null.\n\t *     @type array|string $class         Array or string of additional classes to add to the &lt;img&gt; element.\n\t *                                       Default null.\n\t *     @type bool         $force_display Whether to always show the avatar - ignores the show_avatars option.\n\t *                                       Default false.\n\t *     @type string       $extra_attr    HTML attributes to insert in the IMG element. Is not sanitized. Default empty.\n\t * }\n\t * @return string|false `<img>` tag for the user's avatar. False on failure.\n\t */\n\tfunction get_avatar( $id_or_email, $size = 96, $default = '', $alt = '', $args = null ) {\n\t\t$defaults = array(\n\t\t\t// get_avatar_data() args.\n\t\t\t'size'          => 96,\n\t\t\t'height'        => null,\n\t\t\t'width'         => null,\n\t\t\t'default'       => get_option( 'avatar_default', 'mystery' ),\n\t\t\t'force_default' => false,\n\t\t\t'rating'        => get_option( 'avatar_rating' ),\n\t\t\t'scheme'        => null,\n\t\t\t'alt'           => '',\n\t\t\t'class'         => null,\n\t\t\t'force_display' => false,\n\t\t\t'extra_attr'    => '',\n\t\t);\n\n\t\tif ( empty( $args ) ) {\n\t\t\t$args = array();\n\t\t}\n\n\t\t$args['size']    = (int) $size;\n\t\t$args['default'] = $default;\n\t\t$args['alt']     = $alt;\n\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\tif ( empty( $args['height'] ) ) {\n\t\t\t$args['height'] = $args['size'];\n\t\t}\n\t\tif ( empty( $args['width'] ) ) {\n\t\t\t$args['width'] = $args['size'];\n\t\t}\n\n\t\tif ( is_object( $id_or_email ) && isset( $id_or_email->comment_ID ) ) {\n\t\t\t$id_or_email = get_comment( $id_or_email );\n\t\t}\n\n\t\t/**\n\t\t * Filters whether to retrieve the avatar URL early.\n\t\t *\n\t\t * Passing a non-null value will effectively short-circuit get_avatar(), passing\n\t\t * the value through the {@see 'get_avatar'} filter and returning early.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string|null $avatar      HTML for the user's avatar. Default null.\n\t\t * @param mixed       $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t\t *                                 user email, WP_User object, WP_Post object, or WP_Comment object.\n\t\t * @param array       $args        Arguments passed to get_avatar_url(), after processing.\n\t\t */\n\t\t$avatar = apply_filters( 'pre_get_avatar', null, $id_or_email, $args );\n\n\t\tif ( ! is_null( $avatar ) ) {\n\t\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n\t\t}\n\n\t\tif ( ! $args['force_display'] && ! get_option( 'show_avatars' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$url2x = get_avatar_url( $id_or_email, array_merge( $args, array( 'size' => $args['size'] * 2 ) ) );\n\n\t\t$args = get_avatar_data( $id_or_email, $args );\n\n\t\t$url = $args['url'];\n\n\t\tif ( ! $url || is_wp_error( $url ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$class = array( 'avatar', 'avatar-' . (int) $args['size'], 'photo' );\n\n\t\tif ( ! $args['found_avatar'] || $args['force_default'] ) {\n\t\t\t$class[] = 'avatar-default';\n\t\t}\n\n\t\tif ( $args['class'] ) {\n\t\t\tif ( is_array( $args['class'] ) ) {\n\t\t\t\t$class = array_merge( $class, $args['class'] );\n\t\t\t} else {\n\t\t\t\t$class[] = $args['class'];\n\t\t\t}\n\t\t}\n\n\t\t$avatar = sprintf(\n\t\t\t\"<img alt='%s' src='%s' srcset='%s' class='%s' height='%d' width='%d' %s/>\",\n\t\t\tesc_attr( $args['alt'] ),\n\t\t\tesc_url( $url ),\n\t\t\tesc_url( $url2x ) . ' 2x',\n\t\t\tesc_attr( join( ' ', $class ) ),\n\t\t\t(int) $args['height'],\n\t\t\t(int) $args['width'],\n\t\t\t$args['extra_attr']\n\t\t);\n\n\t\t/**\n\t\t * Filters the avatar to retrieve.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.2.0 The `$args` parameter was added.\n\t\t *\n\t\t * @param string $avatar      &lt;img&gt; tag for the user's avatar.\n\t\t * @param mixed  $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t\t *                            user email, WP_User object, WP_Post object, or WP_Comment object.\n\t\t * @param int    $size        Square avatar width and height in pixels to retrieve.\n\t\t * @param string $default     URL for the default image or a default type. Accepts '404', 'retro', 'monsterid',\n\t\t *                            'wavatar', 'indenticon','mystery' (or 'mm', or 'mysteryman'), 'blank', or 'gravatar_default'.\n\t\t *                            Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.\n\t\t * @param string $alt         Alternative text to use in the avatar image tag. Default empty.\n\t\t * @param array  $args        Arguments passed to get_avatar_data(), after processing.\n\t\t */\n\t\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n\t}\nendif;\n\nif ( ! function_exists( 'wp_text_diff' ) ) :\n\t/**\n\t * Displays a human readable HTML representation of the difference between two strings.\n\t *\n\t * The Diff is available for getting the changes between versions. The output is\n\t * HTML, so the primary use is for displaying the changes. If the two strings\n\t * are equivalent, then an empty string will be returned.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @see wp_parse_args() Used to change defaults to user defined settings.\n\t * @uses Text_Diff\n\t * @uses WP_Text_Diff_Renderer_Table\n\t *\n\t * @param string       $left_string  \"old\" (left) version of string\n\t * @param string       $right_string \"new\" (right) version of string\n\t * @param string|array $args {\n\t *     Associative array of options to pass to WP_Text_Diff_Renderer_Table().\n\t *\n\t *     @type string $title           Titles the diff in a manner compatible\n\t *                                   with the output. Default empty.\n\t *     @type string $title_left      Change the HTML to the left of the title.\n\t *                                   Default empty.\n\t *     @type string $title_right     Change the HTML to the right of the title.\n\t *                                   Default empty.\n\t *     @type bool   $show_split_view True for split view (two columns), false for\n\t *                                   un-split view (single column). Default true.\n\t * }\n\t * @return string Empty string if strings are equivalent or HTML with differences.\n\t */\n\tfunction wp_text_diff( $left_string, $right_string, $args = null ) {\n\t\t$defaults = array(\n\t\t\t'title'           => '',\n\t\t\t'title_left'      => '',\n\t\t\t'title_right'     => '',\n\t\t\t'show_split_view' => true,\n\t\t);\n\t\t$args     = wp_parse_args( $args, $defaults );\n\n\t\tif ( ! class_exists( 'WP_Text_Diff_Renderer_Table', false ) ) {\n\t\t\trequire ABSPATH . WPINC . '/wp-diff.php';\n\t\t}\n\n\t\t$left_string  = normalize_whitespace( $left_string );\n\t\t$right_string = normalize_whitespace( $right_string );\n\n\t\t$left_lines  = explode( \"\\n\", $left_string );\n\t\t$right_lines = explode( \"\\n\", $right_string );\n\t\t$text_diff   = new Text_Diff( $left_lines, $right_lines );\n\t\t$renderer    = new WP_Text_Diff_Renderer_Table( $args );\n\t\t$diff        = $renderer->render( $text_diff );\n\n\t\tif ( ! $diff ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$r = \"<table class='diff'>\\n\";\n\n\t\tif ( ! empty( $args['show_split_view'] ) ) {\n\t\t\t$r .= \"<col class='content diffsplit left' /><col class='content diffsplit middle' /><col class='content diffsplit right' />\";\n\t\t} else {\n\t\t\t$r .= \"<col class='content' />\";\n\t\t}\n\n\t\tif ( $args['title'] || $args['title_left'] || $args['title_right'] ) {\n\t\t\t$r .= '<thead>';\n\t\t}\n\t\tif ( $args['title'] ) {\n\t\t\t$r .= \"<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\\n\";\n\t\t}\n\t\tif ( $args['title_left'] || $args['title_right'] ) {\n\t\t\t$r .= \"<tr class='diff-sub-title'>\\n\";\n\t\t\t$r .= \"\\t<td></td><th>$args[title_left]</th>\\n\";\n\t\t\t$r .= \"\\t<td></td><th>$args[title_right]</th>\\n\";\n\t\t\t$r .= \"</tr>\\n\";\n\t\t}\n\t\tif ( $args['title'] || $args['title_left'] || $args['title_right'] ) {\n\t\t\t$r .= \"</thead>\\n\";\n\t\t}\n\n\t\t$r .= \"<tbody>\\n$diff\\n</tbody>\\n\";\n\t\t$r .= '</table>';\n\n\t\treturn $r;\n\t}\nendif;\n\n"], "filenames": ["src/wp-includes/pluggable.php"], "buggy_code_start_loc": [1410], "buggy_code_end_loc": [1411], "fixing_code_start_loc": [1410], "fixing_code_end_loc": [1411], "type": "CWE-601", "message": "In affected versions of WordPress, due to an issue in wp_validate_redirect() and URL sanitization, an arbitrary external link can be crafted leading to unintended/open redirect when clicked. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).", "other": {"cve": {"id": "CVE-2020-4048", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-12T16:15:10.623", "lastModified": "2023-02-27T18:20:19.017", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In affected versions of WordPress, due to an issue in wp_validate_redirect() and URL sanitization, an arbitrary external link can be crafted leading to unintended/open redirect when clicked. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34)."}, {"lang": "es", "value": "En las versiones afectadas de WordPress, debido a un problema en la funci\u00f3n wp_validate_redirect() y el saneamiento de URL, se puede crear un enlace externo arbitrario que puede conllevar a una redireccionamiento abierto involuntario al hacer clic. Esto ha sido parcheado en la versi\u00f3n 5.4.2, junto con todas las versiones afectadas anteriormente por medio de una versi\u00f3n menor (versiones 5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.7", "versionEndExcluding": "3.7.34", "matchCriteriaId": "67D72FAA-7968-4A6C-AEEB-6E67B330C0F1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.8", "versionEndExcluding": "3.8.34", "matchCriteriaId": "160A1456-677B-42B1-9559-895571365DB2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.9", "versionEndExcluding": "3.9.32", "matchCriteriaId": "82A1A5C0-148F-4AFD-A806-8A972D1D5257"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0", "versionEndExcluding": "4.0.31", "matchCriteriaId": "6266BB9D-8266-4E86-9955-9A73E2E9F365"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.1", "versionEndExcluding": "4.1.31", "matchCriteriaId": "A34D6D45-363A-4426-8BED-A1850BCF658A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.2", "versionEndExcluding": "4.2.28", "matchCriteriaId": "5EAAF57C-586A-424A-8231-DCFB619829D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.3", "versionEndExcluding": "4.3.24", "matchCriteriaId": "24F9EBD8-A2F0-447C-A3A4-BEAE0BB7C1D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.4", "versionEndExcluding": "4.4.23", "matchCriteriaId": "19926F93-81E2-42CF-9367-3DECF5B3AB4B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.5", "versionEndExcluding": "4.5.22", "matchCriteriaId": "AAD6A986-8169-4B8A-9881-D7DA6B0F5E51"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.6", "versionEndExcluding": "4.6.19", "matchCriteriaId": "20CB8A83-705A-41CD-A6CF-0D2E90A076CD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.7", "versionEndExcluding": "4.7.18", "matchCriteriaId": "802504AF-67C7-4F98-8420-7F476CE13D71"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.8", "versionEndExcluding": "4.8.14", "matchCriteriaId": "021BC2EA-D165-47CA-B8A0-DA501086EC62"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.9", "versionEndExcluding": "4.9.15", "matchCriteriaId": "51132C16-BA57-4241-A577-768089CB4B6E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0", "versionEndExcluding": "5.0.10", "matchCriteriaId": "6C9006BA-CBAF-4688-97A4-0AD6FFAACB85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.1", "versionEndExcluding": "5.1.6", "matchCriteriaId": "61356333-054E-4931-AA63-40AA5FC67F48"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2", "versionEndExcluding": "5.2.7", "matchCriteriaId": "1F45140E-0E95-456B-ACB2-A01BB49485AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.3.0", "versionEndExcluding": "5.3.4", "matchCriteriaId": "FAB63ED5-4756-4EA3-8AEB-951A47BEBDD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.4", "versionEndExcluding": "5.4.2", "matchCriteriaId": "C9673216-8B08-4144-832B-E51D66C595B5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:32:*:*:*:*:*:*:*", "matchCriteriaId": "36D96259-24BD-44E2-96D9-78CE1D41F956"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/WordPress/wordpress-develop/commit/6ef777e9a022bee2a80fa671118e7e2657e52693", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-q6pw-gvf4-5fj5", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/07/msg00000.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/09/msg00011.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/773N2ZV7QEMBGKH6FBKI6Q5S3YJMW357/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ODNHXVJS25YVWYQHOCICXTLIN5UYJFDN/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2020/06/wordpress-5-4-2-security-and-maintenance-release/", "source": "security-advisories@github.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4709", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/wordpress-develop/commit/6ef777e9a022bee2a80fa671118e7e2657e52693"}}