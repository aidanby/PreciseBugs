{"buggy_code": ["<?php\n/**\n ***********************************************************************************************\n * PM list page\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// check for valid login\nif (!$gValidLogin) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n// check if the call of the page was allowed\nif (!$gSettingsManager->getBool('enable_pm_module') && !$gSettingsManager->getBool('enable_mail_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Initialize and check the parameters\n$getMsgUuid = admFuncVariableIsValid($_GET, 'msg_uuid', 'string');\n\nif ($getMsgUuid !== '') {\n    try {\n        // check the CSRF token of the form against the session token\n        SecurityUtils::validateCsrfToken($_POST['admidio-csrf-token']);\n    } catch (AdmException $exception) {\n        $exception->showText();\n        // => EXIT\n    }\n\n    $delMessage = new TableMessage($gDb);\n    $delMessage->readDataByUuid($getMsgUuid);\n\n    // Function to delete message\n    $returnCode = $delMessage->delete();\n\n    if ($returnCode) {\n        echo 'done';\n    } else {\n        echo 'delete not OK';\n    }\n    exit();\n}\n\n$headline = $gL10n->get('SYS_MESSAGES');\n\n// add current url to navigation stack\n$gNavigation->clear();\n$gNavigation->addUrl(CURRENT_URL, $headline, 'fa-envelope');\n\n// create html page object\n$page = new HtmlPage('admidio-messages', $headline);\n\n// link to write new email\nif ($gSettingsManager->getBool('enable_mail_module')) {\n    $page->addPageFunctionsMenuItem(\n        'menu_item_messages_new_email',\n        $gL10n->get('SYS_WRITE_EMAIL'),\n        ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_write.php',\n        'fa-envelope-open'\n    );\n}\n// link to write new PM\nif ($gSettingsManager->getBool('enable_pm_module')) {\n    $page->addPageFunctionsMenuItem(\n        'menu_item_messages_new_pm',\n        $gL10n->get('SYS_WRITE_PM'),\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_write.php', array('msg_type' => 'PM')),\n        'fa-comment-alt'\n    );\n}\n\n$table = new HtmlTable('adm_message_table', $page, true, true);\n$table->setServerSideProcessing(ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_data.php');\n\n$table->setColumnAlignByArray(array('left', 'left', 'left', 'left', 'left', 'right'));\n$table->addRowHeadingByArray(array(\n    '<i class=\"fas fa-envelope\" data-toggle=\"tooltip\" title=\"' . $gL10n->get('SYS_CATEGORY') . '\"></i>',\n    $gL10n->get('SYS_SUBJECT'),\n    $gL10n->get('SYS_CONVERSATION_PARTNER'),\n    '<i class=\"fas fa-paperclip\" data-toggle=\"tooltip\" title=\"' . $gL10n->get('SYS_ATTACHMENT') . '\"></i>',\n    $gL10n->get('SYS_DATE'),\n    ''\n));\n\n$table->disableDatatablesColumnsSort(array(3, 6));\n$table->setDatatablesColumnsNotHideResponsive(array(6));\n// special settings for the table\n$table->setDatatablesOrderColumns(array(array(5, 'desc')));\n\n// add table to the form\n$page->addHtml($table->show());\n\n// add form to html page and show page\n$page->show();\n"], "fixing_code": ["<?php\n/**\n ***********************************************************************************************\n * PM list page\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// check for valid login\nif (!$gValidLogin) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n// check if the call of the page was allowed\nif (!$gSettingsManager->getBool('enable_pm_module') && !$gSettingsManager->getBool('enable_mail_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Initialize and check the parameters\n$getMsgUuid = admFuncVariableIsValid($_GET, 'msg_uuid', 'string');\n\nif ($getMsgUuid !== '') {\n    try {\n        // check the CSRF token of the form against the session token\n        SecurityUtils::validateCsrfToken($_POST['admidio-csrf-token']);\n    } catch (AdmException $exception) {\n        $exception->showText();\n        // => EXIT\n    }\n\n    $delMessage = new TableMessage($gDb);\n    $delMessage->readDataByUuid($getMsgUuid);\n\n    // only delete messages of the current user is allowed\n    if ($delMessage->getValue('msg_usr_id_sender') === $gCurrentUserId) {\n        $returnCode = $delMessage->delete();\n\n        if ($returnCode) {\n            echo 'done';\n            exit();\n        }\n    }\n\n    echo 'delete not OK';\n    exit();\n}\n\n$headline = $gL10n->get('SYS_MESSAGES');\n\n// add current url to navigation stack\n$gNavigation->clear();\n$gNavigation->addUrl(CURRENT_URL, $headline, 'fa-envelope');\n\n// create html page object\n$page = new HtmlPage('admidio-messages', $headline);\n\n// link to write new email\nif ($gSettingsManager->getBool('enable_mail_module')) {\n    $page->addPageFunctionsMenuItem(\n        'menu_item_messages_new_email',\n        $gL10n->get('SYS_WRITE_EMAIL'),\n        ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_write.php',\n        'fa-envelope-open'\n    );\n}\n// link to write new PM\nif ($gSettingsManager->getBool('enable_pm_module')) {\n    $page->addPageFunctionsMenuItem(\n        'menu_item_messages_new_pm',\n        $gL10n->get('SYS_WRITE_PM'),\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_write.php', array('msg_type' => 'PM')),\n        'fa-comment-alt'\n    );\n}\n\n$table = new HtmlTable('adm_message_table', $page, true, true);\n$table->setServerSideProcessing(ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_data.php');\n\n$table->setColumnAlignByArray(array('left', 'left', 'left', 'left', 'left', 'right'));\n$table->addRowHeadingByArray(array(\n    '<i class=\"fas fa-envelope\" data-toggle=\"tooltip\" title=\"' . $gL10n->get('SYS_CATEGORY') . '\"></i>',\n    $gL10n->get('SYS_SUBJECT'),\n    $gL10n->get('SYS_CONVERSATION_PARTNER'),\n    '<i class=\"fas fa-paperclip\" data-toggle=\"tooltip\" title=\"' . $gL10n->get('SYS_ATTACHMENT') . '\"></i>',\n    $gL10n->get('SYS_DATE'),\n    ''\n));\n\n$table->disableDatatablesColumnsSort(array(3, 6));\n$table->setDatatablesColumnsNotHideResponsive(array(6));\n// special settings for the table\n$table->setDatatablesOrderColumns(array(array(5, 'desc')));\n\n// add table to the form\n$page->addHtml($table->show());\n\n// add form to html page and show page\n$page->show();\n"], "filenames": ["adm_program/modules/messages/messages.php"], "buggy_code_start_loc": [41], "buggy_code_end_loc": [48], "fixing_code_start_loc": [41], "fixing_code_end_loc": [52], "type": "NVD-CWE-Other", "message": "Improper Access Control in GitHub repository admidio/admidio prior to 4.2.9.", "other": {"cve": {"id": "CVE-2023-3304", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-23T13:15:10.663", "lastModified": "2023-06-28T15:21:27.977", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository admidio/admidio prior to 4.2.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:admidio:admidio:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.2.9", "matchCriteriaId": "E38D2EC2-B220-473C-ABD0-5CD26F447C2E"}]}]}], "references": [{"url": "https://github.com/admidio/admidio/commit/3b248b7d5e0e60a00ee2f9a6908d538d62a5837f", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/721fae61-3c8c-4e4b-8407-64321bc0ed17", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/admidio/admidio/commit/3b248b7d5e0e60a00ee2f9a6908d538d62a5837f"}}