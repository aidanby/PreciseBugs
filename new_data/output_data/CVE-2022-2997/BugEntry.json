{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Models\\Setting;\nuse Auth;\nuse Gate;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Image;\nuse Redirect;\nuse View;\n\n/**\n * This controller handles all actions related to User Profiles for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass ProfileController extends Controller\n{\n    /**\n     * Returns a view with the user's profile form for editing\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Contracts\\View\\View\n     */\n    public function getIndex()\n    {\n        $user = Auth::user();\n\n        return view('account/profile', compact('user'));\n    }\n\n    /**\n     * Validates and stores the user's update data.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function postIndex(ImageUploadRequest $request)\n    {\n        $user = Auth::user();\n        $user->first_name = $request->input('first_name');\n        $user->last_name = $request->input('last_name');\n        $user->website = $request->input('website');\n        $user->gravatar = $request->input('gravatar');\n        $user->skin = $request->input('skin');\n        $user->phone = $request->input('phone');\n\n        if (! config('app.lock_passwords')) {\n            $user->locale = $request->input('locale', 'en');\n        }\n\n        if ((Gate::allows('self.two_factor')) && ((Setting::getSettings()->two_factor_enabled == '1') && (! config('app.lock_passwords')))) {\n            $user->two_factor_optin = $request->input('two_factor_optin', '0');\n        }\n\n        if (Gate::allows('self.edit_location') && (! config('app.lock_passwords'))) {\n            $user->location_id = $request->input('location_id');\n        }\n\n\n        if ($request->input('avatar_delete') == 1) {\n            $user->avatar = null;\n        }\n\n\n        if ($request->hasFile('avatar')) {\n            $path = 'avatars';\n\n            if (! Storage::disk('public')->exists($path)) {\n                Storage::disk('public')->makeDirectory($path, 775);\n            }\n\n            $upload = $image = $request->file('avatar');\n            $ext = $image->getClientOriginalExtension();\n            $file_name = 'avatar-'.str_random(18).'.'.$ext;\n\n            if ($image->getClientOriginalExtension() != 'svg') {\n                $upload = Image::make($image->getRealPath())->resize(84, 84);\n            }\n\n            // This requires a string instead of an object, so we use ($string)\n            Storage::disk('public')->put($path.'/'.$file_name, (string) $upload->encode());\n\n            // Remove Current image if exists\n            if (($user->avatar) && (Storage::disk('public')->exists($path.'/'.$user->avatar))) {\n                Storage::disk('public')->delete($path.'/'.$user->avatar);\n            }\n\n            $user->avatar = $file_name;\n        }\n\n        if ($user->save()) {\n            return redirect()->route('profile')->with('success', 'Account successfully updated');\n        }\n\n        return redirect()->back()->withInput()->withErrors($user->getErrors());\n    }\n\n\n    /**\n     * Returns a page with the API token generation interface.\n     *\n     * We created a controller method for this because closures aren't allowed\n     * in the routes file if you want to be able to cache the routes.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return View\n     */\n    public function api()\n    {\n\n        // Make sure the self.api permission has been granted\n        if (!Gate::allows('self.api')) {\n            abort(403);\n        }\n\n        return view('account/api');\n    }\n\n    /**\n     * User change email page.\n     *\n     * @return View\n     */\n    public function password()\n    {\n        $user = Auth::user();\n\n        return view('account/change-password', compact('user'));\n    }\n\n    /**\n     * Users change password form processing page.\n     *\n     * @return Redirect\n     */\n    public function passwordSave(Request $request)\n    {\n        if (config('app.lock_passwords')) {\n            return redirect()->route('account.password.index')->with('error', trans('admin/users/table.lock_passwords'));\n        }\n\n        $user = Auth::user();\n        if ($user->ldap_import == '1') {\n            return redirect()->route('account.password.index')->with('error', trans('admin/users/message.error.password_ldap'));\n        }\n\n        $rules = [\n            'current_password'     => 'required',\n            'password'         => Setting::passwordComplexityRulesSaving('store').'|confirmed',\n        ];\n\n        $validator = \\Validator::make($request->all(), $rules);\n        $validator->after(function ($validator) use ($request, $user) {\n            if (! Hash::check($request->input('current_password'), $user->password)) {\n                $validator->errors()->add('current_password', trans('validation.hashed_pass'));\n            }\n\n            // This checks to make sure that the user's password isn't the same as their username,\n            // email address, first name or last name (see https://github.com/snipe/snipe-it/issues/8661)\n            // While this is handled via SaveUserRequest form request in other places, we have to do this manually\n            // here because we don't have the username, etc form fields available in the profile password change\n            // form.\n\n            // There may be a more elegant way to do this in the future.\n\n            // First let's see if that option is enabled in the settings\n            if (strpos(Setting::passwordComplexityRulesSaving('store'), 'disallow_same_pwd_as_user_fields') !== false) {\n                if (($request->input('password') == $user->username) ||\n                    ($request->input('password') == $user->email) ||\n                    ($request->input('password') == $user->first_name) ||\n                    ($request->input('password') == $user->last_name)) {\n                    $validator->errors()->add('password', trans('validation.disallow_same_pwd_as_user_fields'));\n                }\n            }\n        });\n\n        if (! $validator->fails()) {\n            $user->password = Hash::make($request->input('password'));\n            $user->save();\n            return redirect()->route('account.password.index')->with('success', 'Password updated!');\n\n        }\n        return redirect()->back()->withInput()->withErrors($validator);\n\n\n    }\n\n    /**\n     * Save the menu state of open/closed when the user clicks on the hamburger\n     * menu.\n     *\n     * This URL is triggered via jquery in\n     * resources/views/layouts/default.blade.php\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return View\n     */\n    public function getMenuState(Request $request)\n    {\n        if ($request->input('state') == 'open') {\n            $request->session()->put('menu_state', 'open');\n        } else {\n            $request->session()->put('menu_state', 'closed');\n        }\n    }\n}\n", "<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel\n{\n    /**\n     * The application's global HTTP middleware stack.\n     *\n     * These middleware are run during every request to your application.\n     *\n     * @var array\n     */\n    protected $middleware = [\n        \\App\\Http\\Middleware\\NoSessionStore::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\Fideloper\\Proxy\\TrustProxies::class,\n        \\App\\Http\\Middleware\\CheckForSetup::class,\n        \\App\\Http\\Middleware\\CheckForDebug::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n        \\App\\Http\\Middleware\\SecurityHeaders::class,\n        \\App\\Http\\Middleware\\PreventBackHistory::class,\n        \\Fruitcake\\Cors\\HandleCors::class,\n\n    ];\n\n    /**\n     * The application's route middleware groups.\n     *\n     * @var array\n     */\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n            \\App\\Http\\Middleware\\CheckLocale::class,\n            \\App\\Http\\Middleware\\CheckUserIsActivated::class,\n            \\App\\Http\\Middleware\\CheckForTwoFactor::class,\n            \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n            \\App\\Http\\Middleware\\AssetCountForSidebar::class,\n        ],\n\n        'api' => [\n            'auth:api',\n        ],\n    ];\n\n    /**\n     * The application's route middleware.\n     *\n     * These middleware may be assigned to groups or used individually.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'auth' => \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n        'authorize' => \\App\\Http\\Middleware\\CheckPermissions::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    ];\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Models\\Setting;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Gate;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Image;\nuse Redirect;\nuse View;\n\n/**\n * This controller handles all actions related to User Profiles for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass ProfileController extends Controller\n{\n    /**\n     * Returns a view with the user's profile form for editing\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Contracts\\View\\View\n     */\n    public function getIndex()\n    {\n        $user = Auth::user();\n\n        return view('account/profile', compact('user'));\n    }\n\n    /**\n     * Validates and stores the user's update data.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function postIndex(ImageUploadRequest $request)\n    {\n        $user = Auth::user();\n        $user->first_name = $request->input('first_name');\n        $user->last_name = $request->input('last_name');\n        $user->website = $request->input('website');\n        $user->gravatar = $request->input('gravatar');\n        $user->skin = $request->input('skin');\n        $user->phone = $request->input('phone');\n\n        if (! config('app.lock_passwords')) {\n            $user->locale = $request->input('locale', 'en');\n        }\n\n        if ((Gate::allows('self.two_factor')) && ((Setting::getSettings()->two_factor_enabled == '1') && (! config('app.lock_passwords')))) {\n            $user->two_factor_optin = $request->input('two_factor_optin', '0');\n        }\n\n        if (Gate::allows('self.edit_location') && (! config('app.lock_passwords'))) {\n            $user->location_id = $request->input('location_id');\n        }\n\n\n        if ($request->input('avatar_delete') == 1) {\n            $user->avatar = null;\n        }\n\n\n        if ($request->hasFile('avatar')) {\n            $path = 'avatars';\n\n            if (! Storage::disk('public')->exists($path)) {\n                Storage::disk('public')->makeDirectory($path, 775);\n            }\n\n            $upload = $image = $request->file('avatar');\n            $ext = $image->getClientOriginalExtension();\n            $file_name = 'avatar-'.str_random(18).'.'.$ext;\n\n            if ($image->getClientOriginalExtension() != 'svg') {\n                $upload = Image::make($image->getRealPath())->resize(84, 84);\n            }\n\n            // This requires a string instead of an object, so we use ($string)\n            Storage::disk('public')->put($path.'/'.$file_name, (string) $upload->encode());\n\n            // Remove Current image if exists\n            if (($user->avatar) && (Storage::disk('public')->exists($path.'/'.$user->avatar))) {\n                Storage::disk('public')->delete($path.'/'.$user->avatar);\n            }\n\n            $user->avatar = $file_name;\n        }\n\n        if ($user->save()) {\n            return redirect()->route('profile')->with('success', 'Account successfully updated');\n        }\n\n        return redirect()->back()->withInput()->withErrors($user->getErrors());\n    }\n\n\n    /**\n     * Returns a page with the API token generation interface.\n     *\n     * We created a controller method for this because closures aren't allowed\n     * in the routes file if you want to be able to cache the routes.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return View\n     */\n    public function api()\n    {\n\n        // Make sure the self.api permission has been granted\n        if (!Gate::allows('self.api')) {\n            abort(403);\n        }\n\n        return view('account/api');\n    }\n\n    /**\n     * User change email page.\n     *\n     * @return View\n     */\n    public function password()\n    {\n        $user = Auth::user();\n        \n        return view('account/change-password', compact('user'));\n    }\n\n    /**\n     * Users change password form processing page.\n     *\n     * @return Redirect\n     */\n    public function passwordSave(Request $request)\n    {\n        if (config('app.lock_passwords')) {\n            return redirect()->route('account.password.index')->with('error', trans('admin/users/table.lock_passwords'));\n        }\n\n        $user = Auth::user();\n        if ($user->ldap_import == '1') {\n            return redirect()->route('account.password.index')->with('error', trans('admin/users/message.error.password_ldap'));\n        }\n\n        $rules = [\n            'current_password'     => 'required',\n            'password'         => Setting::passwordComplexityRulesSaving('store').'|confirmed',\n        ];\n\n        $validator = \\Validator::make($request->all(), $rules);\n        $validator->after(function ($validator) use ($request, $user) {\n            if (! Hash::check($request->input('current_password'), $user->password)) {\n                $validator->errors()->add('current_password', trans('validation.hashed_pass'));\n            }\n\n            // This checks to make sure that the user's password isn't the same as their username,\n            // email address, first name or last name (see https://github.com/snipe/snipe-it/issues/8661)\n            // While this is handled via SaveUserRequest form request in other places, we have to do this manually\n            // here because we don't have the username, etc form fields available in the profile password change\n            // form.\n\n            // There may be a more elegant way to do this in the future.\n\n            // First let's see if that option is enabled in the settings\n            if (strpos(Setting::passwordComplexityRulesSaving('store'), 'disallow_same_pwd_as_user_fields') !== false) {\n                if (($request->input('password') == $user->username) ||\n                    ($request->input('password') == $user->email) ||\n                    ($request->input('password') == $user->first_name) ||\n                    ($request->input('password') == $user->last_name)) {\n                    $validator->errors()->add('password', trans('validation.disallow_same_pwd_as_user_fields'));\n                }\n            }\n        });\n\n        if (! $validator->fails()) {\n            $user->password = Hash::make($request->input('password'));\n            $user->save();\n\n            // Log the user out of other devices\n            Auth::logoutOtherDevices($request->input('password'));\n            return redirect()->route('account.password.index')->with('success', 'Password updated!');\n\n        }\n        return redirect()->back()->withInput()->withErrors($validator);\n\n\n    }\n\n    /**\n     * Save the menu state of open/closed when the user clicks on the hamburger\n     * menu.\n     *\n     * This URL is triggered via jquery in\n     * resources/views/layouts/default.blade.php\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return View\n     */\n    public function getMenuState(Request $request)\n    {\n        if ($request->input('state') == 'open') {\n            $request->session()->put('menu_state', 'open');\n        } else {\n            $request->session()->put('menu_state', 'closed');\n        }\n    }\n}\n", "<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel\n{\n    /**\n     * The application's global HTTP middleware stack.\n     *\n     * These middleware are run during every request to your application.\n     *\n     * @var array\n     */\n    protected $middleware = [\n        \\App\\Http\\Middleware\\NoSessionStore::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\Fideloper\\Proxy\\TrustProxies::class,\n        \\App\\Http\\Middleware\\CheckForSetup::class,\n        \\App\\Http\\Middleware\\CheckForDebug::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n        \\App\\Http\\Middleware\\SecurityHeaders::class,\n        \\App\\Http\\Middleware\\PreventBackHistory::class,\n        \\Fruitcake\\Cors\\HandleCors::class,\n\n    ];\n\n    /**\n     * The application's route middleware groups.\n     *\n     * @var array\n     */\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n            \\App\\Http\\Middleware\\CheckLocale::class,\n            \\App\\Http\\Middleware\\CheckUserIsActivated::class,\n            \\App\\Http\\Middleware\\CheckForTwoFactor::class,\n            \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n            \\App\\Http\\Middleware\\AssetCountForSidebar::class,\n            \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n        ],\n\n        'api' => [\n            'auth:api',\n        ],\n    ];\n\n    /**\n     * The application's route middleware.\n     *\n     * These middleware may be assigned to groups or used individually.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'auth' => \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n        'authorize' => \\App\\Http\\Middleware\\CheckPermissions::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    ];\n}\n"], "filenames": ["app/Http/Controllers/ProfileController.php", "app/Http/Kernel.php"], "buggy_code_start_loc": [7, 45], "buggy_code_end_loc": [188, 45], "fixing_code_start_loc": [7, 46], "fixing_code_end_loc": [192, 47], "type": "CWE-384", "message": "Session Fixation in GitHub repository snipe/snipe-it prior to 6.0.10.", "other": {"cve": {"id": "CVE-2022-2997", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-25T21:15:08.240", "lastModified": "2022-09-01T13:45:07.487", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Session Fixation in GitHub repository snipe/snipe-it prior to 6.0.10."}, {"lang": "es", "value": "Una Fijaci\u00f3n de Sesi\u00f3n en el repositorio de GitHub snipe/snipe-it versiones anteriores a 6.0.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-384"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.10", "matchCriteriaId": "244AAF46-E0CA-4BCD-A860-6E114FCD80DB"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/6fde72a69335c80079363b7d26aa94e7f67400e1", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/c09bf21b-50d2-49f0-8c92-49f6b3c358d8", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/6fde72a69335c80079363b7d26aa94e7f67400e1"}}