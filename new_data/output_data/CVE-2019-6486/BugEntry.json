{"buggy_code": ["// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package elliptic implements several standard elliptic curves over prime\n// fields.\npackage elliptic\n\n// This package operates, internally, on Jacobian coordinates. For a given\n// (x, y) position on the curve, the Jacobian coordinates are (x1, y1, z1)\n// where x = x1/z1\u00b2 and y = y1/z1\u00b3. The greatest speedups come when the whole\n// calculation can be performed within the transform (as in ScalarMult and\n// ScalarBaseMult). But even for Add and Double, it's faster to apply and\n// reverse the transform than to operate in affine coordinates.\n\nimport (\n\t\"io\"\n\t\"math/big\"\n\t\"sync\"\n)\n\n// A Curve represents a short-form Weierstrass curve with a=-3.\n// See https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html\ntype Curve interface {\n\t// Params returns the parameters for the curve.\n\tParams() *CurveParams\n\t// IsOnCurve reports whether the given (x,y) lies on the curve.\n\tIsOnCurve(x, y *big.Int) bool\n\t// Add returns the sum of (x1,y1) and (x2,y2)\n\tAdd(x1, y1, x2, y2 *big.Int) (x, y *big.Int)\n\t// Double returns 2*(x,y)\n\tDouble(x1, y1 *big.Int) (x, y *big.Int)\n\t// ScalarMult returns k*(Bx,By) where k is a number in big-endian form.\n\tScalarMult(x1, y1 *big.Int, k []byte) (x, y *big.Int)\n\t// ScalarBaseMult returns k*G, where G is the base point of the group\n\t// and k is an integer in big-endian form.\n\tScalarBaseMult(k []byte) (x, y *big.Int)\n}\n\n// CurveParams contains the parameters of an elliptic curve and also provides\n// a generic, non-constant time implementation of Curve.\ntype CurveParams struct {\n\tP       *big.Int // the order of the underlying field\n\tN       *big.Int // the order of the base point\n\tB       *big.Int // the constant of the curve equation\n\tGx, Gy  *big.Int // (x,y) of the base point\n\tBitSize int      // the size of the underlying field\n\tName    string   // the canonical name of the curve\n}\n\nfunc (curve *CurveParams) Params() *CurveParams {\n\treturn curve\n}\n\nfunc (curve *CurveParams) IsOnCurve(x, y *big.Int) bool {\n\t// y\u00b2 = x\u00b3 - 3x + b\n\ty2 := new(big.Int).Mul(y, y)\n\ty2.Mod(y2, curve.P)\n\n\tx3 := new(big.Int).Mul(x, x)\n\tx3.Mul(x3, x)\n\n\tthreeX := new(big.Int).Lsh(x, 1)\n\tthreeX.Add(threeX, x)\n\n\tx3.Sub(x3, threeX)\n\tx3.Add(x3, curve.B)\n\tx3.Mod(x3, curve.P)\n\n\treturn x3.Cmp(y2) == 0\n}\n\n// zForAffine returns a Jacobian Z value for the affine point (x, y). If x and\n// y are zero, it assumes that they represent the point at infinity because (0,\n// 0) is not on the any of the curves handled here.\nfunc zForAffine(x, y *big.Int) *big.Int {\n\tz := new(big.Int)\n\tif x.Sign() != 0 || y.Sign() != 0 {\n\t\tz.SetInt64(1)\n\t}\n\treturn z\n}\n\n// affineFromJacobian reverses the Jacobian transform. See the comment at the\n// top of the file. If the point is \u221e it returns 0, 0.\nfunc (curve *CurveParams) affineFromJacobian(x, y, z *big.Int) (xOut, yOut *big.Int) {\n\tif z.Sign() == 0 {\n\t\treturn new(big.Int), new(big.Int)\n\t}\n\n\tzinv := new(big.Int).ModInverse(z, curve.P)\n\tzinvsq := new(big.Int).Mul(zinv, zinv)\n\n\txOut = new(big.Int).Mul(x, zinvsq)\n\txOut.Mod(xOut, curve.P)\n\tzinvsq.Mul(zinvsq, zinv)\n\tyOut = new(big.Int).Mul(y, zinvsq)\n\tyOut.Mod(yOut, curve.P)\n\treturn\n}\n\nfunc (curve *CurveParams) Add(x1, y1, x2, y2 *big.Int) (*big.Int, *big.Int) {\n\tz1 := zForAffine(x1, y1)\n\tz2 := zForAffine(x2, y2)\n\treturn curve.affineFromJacobian(curve.addJacobian(x1, y1, z1, x2, y2, z2))\n}\n\n// addJacobian takes two points in Jacobian coordinates, (x1, y1, z1) and\n// (x2, y2, z2) and returns their sum, also in Jacobian form.\nfunc (curve *CurveParams) addJacobian(x1, y1, z1, x2, y2, z2 *big.Int) (*big.Int, *big.Int, *big.Int) {\n\t// See https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#addition-add-2007-bl\n\tx3, y3, z3 := new(big.Int), new(big.Int), new(big.Int)\n\tif z1.Sign() == 0 {\n\t\tx3.Set(x2)\n\t\ty3.Set(y2)\n\t\tz3.Set(z2)\n\t\treturn x3, y3, z3\n\t}\n\tif z2.Sign() == 0 {\n\t\tx3.Set(x1)\n\t\ty3.Set(y1)\n\t\tz3.Set(z1)\n\t\treturn x3, y3, z3\n\t}\n\n\tz1z1 := new(big.Int).Mul(z1, z1)\n\tz1z1.Mod(z1z1, curve.P)\n\tz2z2 := new(big.Int).Mul(z2, z2)\n\tz2z2.Mod(z2z2, curve.P)\n\n\tu1 := new(big.Int).Mul(x1, z2z2)\n\tu1.Mod(u1, curve.P)\n\tu2 := new(big.Int).Mul(x2, z1z1)\n\tu2.Mod(u2, curve.P)\n\th := new(big.Int).Sub(u2, u1)\n\txEqual := h.Sign() == 0\n\tif h.Sign() == -1 {\n\t\th.Add(h, curve.P)\n\t}\n\ti := new(big.Int).Lsh(h, 1)\n\ti.Mul(i, i)\n\tj := new(big.Int).Mul(h, i)\n\n\ts1 := new(big.Int).Mul(y1, z2)\n\ts1.Mul(s1, z2z2)\n\ts1.Mod(s1, curve.P)\n\ts2 := new(big.Int).Mul(y2, z1)\n\ts2.Mul(s2, z1z1)\n\ts2.Mod(s2, curve.P)\n\tr := new(big.Int).Sub(s2, s1)\n\tif r.Sign() == -1 {\n\t\tr.Add(r, curve.P)\n\t}\n\tyEqual := r.Sign() == 0\n\tif xEqual && yEqual {\n\t\treturn curve.doubleJacobian(x1, y1, z1)\n\t}\n\tr.Lsh(r, 1)\n\tv := new(big.Int).Mul(u1, i)\n\n\tx3.Set(r)\n\tx3.Mul(x3, x3)\n\tx3.Sub(x3, j)\n\tx3.Sub(x3, v)\n\tx3.Sub(x3, v)\n\tx3.Mod(x3, curve.P)\n\n\ty3.Set(r)\n\tv.Sub(v, x3)\n\ty3.Mul(y3, v)\n\ts1.Mul(s1, j)\n\ts1.Lsh(s1, 1)\n\ty3.Sub(y3, s1)\n\ty3.Mod(y3, curve.P)\n\n\tz3.Add(z1, z2)\n\tz3.Mul(z3, z3)\n\tz3.Sub(z3, z1z1)\n\tz3.Sub(z3, z2z2)\n\tz3.Mul(z3, h)\n\tz3.Mod(z3, curve.P)\n\n\treturn x3, y3, z3\n}\n\nfunc (curve *CurveParams) Double(x1, y1 *big.Int) (*big.Int, *big.Int) {\n\tz1 := zForAffine(x1, y1)\n\treturn curve.affineFromJacobian(curve.doubleJacobian(x1, y1, z1))\n}\n\n// doubleJacobian takes a point in Jacobian coordinates, (x, y, z), and\n// returns its double, also in Jacobian form.\nfunc (curve *CurveParams) doubleJacobian(x, y, z *big.Int) (*big.Int, *big.Int, *big.Int) {\n\t// See https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n\tdelta := new(big.Int).Mul(z, z)\n\tdelta.Mod(delta, curve.P)\n\tgamma := new(big.Int).Mul(y, y)\n\tgamma.Mod(gamma, curve.P)\n\talpha := new(big.Int).Sub(x, delta)\n\tif alpha.Sign() == -1 {\n\t\talpha.Add(alpha, curve.P)\n\t}\n\talpha2 := new(big.Int).Add(x, delta)\n\talpha.Mul(alpha, alpha2)\n\talpha2.Set(alpha)\n\talpha.Lsh(alpha, 1)\n\talpha.Add(alpha, alpha2)\n\n\tbeta := alpha2.Mul(x, gamma)\n\n\tx3 := new(big.Int).Mul(alpha, alpha)\n\tbeta8 := new(big.Int).Lsh(beta, 3)\n\tx3.Sub(x3, beta8)\n\tfor x3.Sign() == -1 {\n\t\tx3.Add(x3, curve.P)\n\t}\n\tx3.Mod(x3, curve.P)\n\n\tz3 := new(big.Int).Add(y, z)\n\tz3.Mul(z3, z3)\n\tz3.Sub(z3, gamma)\n\tif z3.Sign() == -1 {\n\t\tz3.Add(z3, curve.P)\n\t}\n\tz3.Sub(z3, delta)\n\tif z3.Sign() == -1 {\n\t\tz3.Add(z3, curve.P)\n\t}\n\tz3.Mod(z3, curve.P)\n\n\tbeta.Lsh(beta, 2)\n\tbeta.Sub(beta, x3)\n\tif beta.Sign() == -1 {\n\t\tbeta.Add(beta, curve.P)\n\t}\n\ty3 := alpha.Mul(alpha, beta)\n\n\tgamma.Mul(gamma, gamma)\n\tgamma.Lsh(gamma, 3)\n\tgamma.Mod(gamma, curve.P)\n\n\ty3.Sub(y3, gamma)\n\tif y3.Sign() == -1 {\n\t\ty3.Add(y3, curve.P)\n\t}\n\ty3.Mod(y3, curve.P)\n\n\treturn x3, y3, z3\n}\n\nfunc (curve *CurveParams) ScalarMult(Bx, By *big.Int, k []byte) (*big.Int, *big.Int) {\n\tBz := new(big.Int).SetInt64(1)\n\tx, y, z := new(big.Int), new(big.Int), new(big.Int)\n\n\tfor _, byte := range k {\n\t\tfor bitNum := 0; bitNum < 8; bitNum++ {\n\t\t\tx, y, z = curve.doubleJacobian(x, y, z)\n\t\t\tif byte&0x80 == 0x80 {\n\t\t\t\tx, y, z = curve.addJacobian(Bx, By, Bz, x, y, z)\n\t\t\t}\n\t\t\tbyte <<= 1\n\t\t}\n\t}\n\n\treturn curve.affineFromJacobian(x, y, z)\n}\n\nfunc (curve *CurveParams) ScalarBaseMult(k []byte) (*big.Int, *big.Int) {\n\treturn curve.ScalarMult(curve.Gx, curve.Gy, k)\n}\n\nvar mask = []byte{0xff, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f}\n\n// GenerateKey returns a public/private key pair. The private key is\n// generated using the given reader, which must return random data.\nfunc GenerateKey(curve Curve, rand io.Reader) (priv []byte, x, y *big.Int, err error) {\n\tN := curve.Params().N\n\tbitSize := N.BitLen()\n\tbyteLen := (bitSize + 7) >> 3\n\tpriv = make([]byte, byteLen)\n\n\tfor x == nil {\n\t\t_, err = io.ReadFull(rand, priv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\t// We have to mask off any excess bits in the case that the size of the\n\t\t// underlying field is not a whole number of bytes.\n\t\tpriv[0] &= mask[bitSize%8]\n\t\t// This is because, in tests, rand will return all zeros and we don't\n\t\t// want to get the point at infinity and loop forever.\n\t\tpriv[1] ^= 0x42\n\n\t\t// If the scalar is out of range, sample another random number.\n\t\tif new(big.Int).SetBytes(priv).Cmp(N) >= 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tx, y = curve.ScalarBaseMult(priv)\n\t}\n\treturn\n}\n\n// Marshal converts a point into the uncompressed form specified in section 4.3.6 of ANSI X9.62.\nfunc Marshal(curve Curve, x, y *big.Int) []byte {\n\tbyteLen := (curve.Params().BitSize + 7) >> 3\n\n\tret := make([]byte, 1+2*byteLen)\n\tret[0] = 4 // uncompressed point\n\n\txBytes := x.Bytes()\n\tcopy(ret[1+byteLen-len(xBytes):], xBytes)\n\tyBytes := y.Bytes()\n\tcopy(ret[1+2*byteLen-len(yBytes):], yBytes)\n\treturn ret\n}\n\n// Unmarshal converts a point, serialized by Marshal, into an x, y pair.\n// It is an error if the point is not in uncompressed form or is not on the curve.\n// On error, x = nil.\nfunc Unmarshal(curve Curve, data []byte) (x, y *big.Int) {\n\tbyteLen := (curve.Params().BitSize + 7) >> 3\n\tif len(data) != 1+2*byteLen {\n\t\treturn\n\t}\n\tif data[0] != 4 { // uncompressed form\n\t\treturn\n\t}\n\tp := curve.Params().P\n\tx = new(big.Int).SetBytes(data[1 : 1+byteLen])\n\ty = new(big.Int).SetBytes(data[1+byteLen:])\n\tif x.Cmp(p) >= 0 || y.Cmp(p) >= 0 {\n\t\treturn nil, nil\n\t}\n\tif !curve.IsOnCurve(x, y) {\n\t\treturn nil, nil\n\t}\n\treturn\n}\n\nvar initonce sync.Once\nvar p384 *CurveParams\nvar p521 *CurveParams\n\nfunc initAll() {\n\tinitP224()\n\tinitP256()\n\tinitP384()\n\tinitP521()\n}\n\nfunc initP384() {\n\t// See FIPS 186-3, section D.2.4\n\tp384 = &CurveParams{Name: \"P-384\"}\n\tp384.P, _ = new(big.Int).SetString(\"39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319\", 10)\n\tp384.N, _ = new(big.Int).SetString(\"39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643\", 10)\n\tp384.B, _ = new(big.Int).SetString(\"b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\", 16)\n\tp384.Gx, _ = new(big.Int).SetString(\"aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7\", 16)\n\tp384.Gy, _ = new(big.Int).SetString(\"3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\", 16)\n\tp384.BitSize = 384\n}\n\nfunc initP521() {\n\t// See FIPS 186-3, section D.2.5\n\tp521 = &CurveParams{Name: \"P-521\"}\n\tp521.P, _ = new(big.Int).SetString(\"6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151\", 10)\n\tp521.N, _ = new(big.Int).SetString(\"6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449\", 10)\n\tp521.B, _ = new(big.Int).SetString(\"051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00\", 16)\n\tp521.Gx, _ = new(big.Int).SetString(\"c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66\", 16)\n\tp521.Gy, _ = new(big.Int).SetString(\"11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650\", 16)\n\tp521.BitSize = 521\n}\n\n// P256 returns a Curve which implements P-256 (see FIPS 186-3, section D.2.3)\n//\n// The cryptographic operations are implemented using constant-time algorithms.\nfunc P256() Curve {\n\tinitonce.Do(initAll)\n\treturn p256\n}\n\n// P384 returns a Curve which implements P-384 (see FIPS 186-3, section D.2.4)\n//\n// The cryptographic operations do not use constant-time algorithms.\nfunc P384() Curve {\n\tinitonce.Do(initAll)\n\treturn p384\n}\n\n// P521 returns a Curve which implements P-521 (see FIPS 186-3, section D.2.5)\n//\n// The cryptographic operations do not use constant-time algorithms.\nfunc P521() Curve {\n\tinitonce.Do(initAll)\n\treturn p521\n}\n"], "fixing_code": ["// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package elliptic implements several standard elliptic curves over prime\n// fields.\npackage elliptic\n\n// This package operates, internally, on Jacobian coordinates. For a given\n// (x, y) position on the curve, the Jacobian coordinates are (x1, y1, z1)\n// where x = x1/z1\u00b2 and y = y1/z1\u00b3. The greatest speedups come when the whole\n// calculation can be performed within the transform (as in ScalarMult and\n// ScalarBaseMult). But even for Add and Double, it's faster to apply and\n// reverse the transform than to operate in affine coordinates.\n\nimport (\n\t\"io\"\n\t\"math/big\"\n\t\"sync\"\n)\n\n// A Curve represents a short-form Weierstrass curve with a=-3.\n// See https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html\ntype Curve interface {\n\t// Params returns the parameters for the curve.\n\tParams() *CurveParams\n\t// IsOnCurve reports whether the given (x,y) lies on the curve.\n\tIsOnCurve(x, y *big.Int) bool\n\t// Add returns the sum of (x1,y1) and (x2,y2)\n\tAdd(x1, y1, x2, y2 *big.Int) (x, y *big.Int)\n\t// Double returns 2*(x,y)\n\tDouble(x1, y1 *big.Int) (x, y *big.Int)\n\t// ScalarMult returns k*(Bx,By) where k is a number in big-endian form.\n\tScalarMult(x1, y1 *big.Int, k []byte) (x, y *big.Int)\n\t// ScalarBaseMult returns k*G, where G is the base point of the group\n\t// and k is an integer in big-endian form.\n\tScalarBaseMult(k []byte) (x, y *big.Int)\n}\n\n// CurveParams contains the parameters of an elliptic curve and also provides\n// a generic, non-constant time implementation of Curve.\ntype CurveParams struct {\n\tP       *big.Int // the order of the underlying field\n\tN       *big.Int // the order of the base point\n\tB       *big.Int // the constant of the curve equation\n\tGx, Gy  *big.Int // (x,y) of the base point\n\tBitSize int      // the size of the underlying field\n\tName    string   // the canonical name of the curve\n}\n\nfunc (curve *CurveParams) Params() *CurveParams {\n\treturn curve\n}\n\nfunc (curve *CurveParams) IsOnCurve(x, y *big.Int) bool {\n\t// y\u00b2 = x\u00b3 - 3x + b\n\ty2 := new(big.Int).Mul(y, y)\n\ty2.Mod(y2, curve.P)\n\n\tx3 := new(big.Int).Mul(x, x)\n\tx3.Mul(x3, x)\n\n\tthreeX := new(big.Int).Lsh(x, 1)\n\tthreeX.Add(threeX, x)\n\n\tx3.Sub(x3, threeX)\n\tx3.Add(x3, curve.B)\n\tx3.Mod(x3, curve.P)\n\n\treturn x3.Cmp(y2) == 0\n}\n\n// zForAffine returns a Jacobian Z value for the affine point (x, y). If x and\n// y are zero, it assumes that they represent the point at infinity because (0,\n// 0) is not on the any of the curves handled here.\nfunc zForAffine(x, y *big.Int) *big.Int {\n\tz := new(big.Int)\n\tif x.Sign() != 0 || y.Sign() != 0 {\n\t\tz.SetInt64(1)\n\t}\n\treturn z\n}\n\n// affineFromJacobian reverses the Jacobian transform. See the comment at the\n// top of the file. If the point is \u221e it returns 0, 0.\nfunc (curve *CurveParams) affineFromJacobian(x, y, z *big.Int) (xOut, yOut *big.Int) {\n\tif z.Sign() == 0 {\n\t\treturn new(big.Int), new(big.Int)\n\t}\n\n\tzinv := new(big.Int).ModInverse(z, curve.P)\n\tzinvsq := new(big.Int).Mul(zinv, zinv)\n\n\txOut = new(big.Int).Mul(x, zinvsq)\n\txOut.Mod(xOut, curve.P)\n\tzinvsq.Mul(zinvsq, zinv)\n\tyOut = new(big.Int).Mul(y, zinvsq)\n\tyOut.Mod(yOut, curve.P)\n\treturn\n}\n\nfunc (curve *CurveParams) Add(x1, y1, x2, y2 *big.Int) (*big.Int, *big.Int) {\n\tz1 := zForAffine(x1, y1)\n\tz2 := zForAffine(x2, y2)\n\treturn curve.affineFromJacobian(curve.addJacobian(x1, y1, z1, x2, y2, z2))\n}\n\n// addJacobian takes two points in Jacobian coordinates, (x1, y1, z1) and\n// (x2, y2, z2) and returns their sum, also in Jacobian form.\nfunc (curve *CurveParams) addJacobian(x1, y1, z1, x2, y2, z2 *big.Int) (*big.Int, *big.Int, *big.Int) {\n\t// See https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#addition-add-2007-bl\n\tx3, y3, z3 := new(big.Int), new(big.Int), new(big.Int)\n\tif z1.Sign() == 0 {\n\t\tx3.Set(x2)\n\t\ty3.Set(y2)\n\t\tz3.Set(z2)\n\t\treturn x3, y3, z3\n\t}\n\tif z2.Sign() == 0 {\n\t\tx3.Set(x1)\n\t\ty3.Set(y1)\n\t\tz3.Set(z1)\n\t\treturn x3, y3, z3\n\t}\n\n\tz1z1 := new(big.Int).Mul(z1, z1)\n\tz1z1.Mod(z1z1, curve.P)\n\tz2z2 := new(big.Int).Mul(z2, z2)\n\tz2z2.Mod(z2z2, curve.P)\n\n\tu1 := new(big.Int).Mul(x1, z2z2)\n\tu1.Mod(u1, curve.P)\n\tu2 := new(big.Int).Mul(x2, z1z1)\n\tu2.Mod(u2, curve.P)\n\th := new(big.Int).Sub(u2, u1)\n\txEqual := h.Sign() == 0\n\tif h.Sign() == -1 {\n\t\th.Add(h, curve.P)\n\t}\n\ti := new(big.Int).Lsh(h, 1)\n\ti.Mul(i, i)\n\tj := new(big.Int).Mul(h, i)\n\n\ts1 := new(big.Int).Mul(y1, z2)\n\ts1.Mul(s1, z2z2)\n\ts1.Mod(s1, curve.P)\n\ts2 := new(big.Int).Mul(y2, z1)\n\ts2.Mul(s2, z1z1)\n\ts2.Mod(s2, curve.P)\n\tr := new(big.Int).Sub(s2, s1)\n\tif r.Sign() == -1 {\n\t\tr.Add(r, curve.P)\n\t}\n\tyEqual := r.Sign() == 0\n\tif xEqual && yEqual {\n\t\treturn curve.doubleJacobian(x1, y1, z1)\n\t}\n\tr.Lsh(r, 1)\n\tv := new(big.Int).Mul(u1, i)\n\n\tx3.Set(r)\n\tx3.Mul(x3, x3)\n\tx3.Sub(x3, j)\n\tx3.Sub(x3, v)\n\tx3.Sub(x3, v)\n\tx3.Mod(x3, curve.P)\n\n\ty3.Set(r)\n\tv.Sub(v, x3)\n\ty3.Mul(y3, v)\n\ts1.Mul(s1, j)\n\ts1.Lsh(s1, 1)\n\ty3.Sub(y3, s1)\n\ty3.Mod(y3, curve.P)\n\n\tz3.Add(z1, z2)\n\tz3.Mul(z3, z3)\n\tz3.Sub(z3, z1z1)\n\tz3.Sub(z3, z2z2)\n\tz3.Mul(z3, h)\n\tz3.Mod(z3, curve.P)\n\n\treturn x3, y3, z3\n}\n\nfunc (curve *CurveParams) Double(x1, y1 *big.Int) (*big.Int, *big.Int) {\n\tz1 := zForAffine(x1, y1)\n\treturn curve.affineFromJacobian(curve.doubleJacobian(x1, y1, z1))\n}\n\n// doubleJacobian takes a point in Jacobian coordinates, (x, y, z), and\n// returns its double, also in Jacobian form.\nfunc (curve *CurveParams) doubleJacobian(x, y, z *big.Int) (*big.Int, *big.Int, *big.Int) {\n\t// See https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n\tdelta := new(big.Int).Mul(z, z)\n\tdelta.Mod(delta, curve.P)\n\tgamma := new(big.Int).Mul(y, y)\n\tgamma.Mod(gamma, curve.P)\n\talpha := new(big.Int).Sub(x, delta)\n\tif alpha.Sign() == -1 {\n\t\talpha.Add(alpha, curve.P)\n\t}\n\talpha2 := new(big.Int).Add(x, delta)\n\talpha.Mul(alpha, alpha2)\n\talpha2.Set(alpha)\n\talpha.Lsh(alpha, 1)\n\talpha.Add(alpha, alpha2)\n\n\tbeta := alpha2.Mul(x, gamma)\n\n\tx3 := new(big.Int).Mul(alpha, alpha)\n\tbeta8 := new(big.Int).Lsh(beta, 3)\n\tbeta8.Mod(beta8, curve.P)\n\tx3.Sub(x3, beta8)\n\tif x3.Sign() == -1 {\n\t\tx3.Add(x3, curve.P)\n\t}\n\tx3.Mod(x3, curve.P)\n\n\tz3 := new(big.Int).Add(y, z)\n\tz3.Mul(z3, z3)\n\tz3.Sub(z3, gamma)\n\tif z3.Sign() == -1 {\n\t\tz3.Add(z3, curve.P)\n\t}\n\tz3.Sub(z3, delta)\n\tif z3.Sign() == -1 {\n\t\tz3.Add(z3, curve.P)\n\t}\n\tz3.Mod(z3, curve.P)\n\n\tbeta.Lsh(beta, 2)\n\tbeta.Sub(beta, x3)\n\tif beta.Sign() == -1 {\n\t\tbeta.Add(beta, curve.P)\n\t}\n\ty3 := alpha.Mul(alpha, beta)\n\n\tgamma.Mul(gamma, gamma)\n\tgamma.Lsh(gamma, 3)\n\tgamma.Mod(gamma, curve.P)\n\n\ty3.Sub(y3, gamma)\n\tif y3.Sign() == -1 {\n\t\ty3.Add(y3, curve.P)\n\t}\n\ty3.Mod(y3, curve.P)\n\n\treturn x3, y3, z3\n}\n\nfunc (curve *CurveParams) ScalarMult(Bx, By *big.Int, k []byte) (*big.Int, *big.Int) {\n\tBz := new(big.Int).SetInt64(1)\n\tx, y, z := new(big.Int), new(big.Int), new(big.Int)\n\n\tfor _, byte := range k {\n\t\tfor bitNum := 0; bitNum < 8; bitNum++ {\n\t\t\tx, y, z = curve.doubleJacobian(x, y, z)\n\t\t\tif byte&0x80 == 0x80 {\n\t\t\t\tx, y, z = curve.addJacobian(Bx, By, Bz, x, y, z)\n\t\t\t}\n\t\t\tbyte <<= 1\n\t\t}\n\t}\n\n\treturn curve.affineFromJacobian(x, y, z)\n}\n\nfunc (curve *CurveParams) ScalarBaseMult(k []byte) (*big.Int, *big.Int) {\n\treturn curve.ScalarMult(curve.Gx, curve.Gy, k)\n}\n\nvar mask = []byte{0xff, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f}\n\n// GenerateKey returns a public/private key pair. The private key is\n// generated using the given reader, which must return random data.\nfunc GenerateKey(curve Curve, rand io.Reader) (priv []byte, x, y *big.Int, err error) {\n\tN := curve.Params().N\n\tbitSize := N.BitLen()\n\tbyteLen := (bitSize + 7) >> 3\n\tpriv = make([]byte, byteLen)\n\n\tfor x == nil {\n\t\t_, err = io.ReadFull(rand, priv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\t// We have to mask off any excess bits in the case that the size of the\n\t\t// underlying field is not a whole number of bytes.\n\t\tpriv[0] &= mask[bitSize%8]\n\t\t// This is because, in tests, rand will return all zeros and we don't\n\t\t// want to get the point at infinity and loop forever.\n\t\tpriv[1] ^= 0x42\n\n\t\t// If the scalar is out of range, sample another random number.\n\t\tif new(big.Int).SetBytes(priv).Cmp(N) >= 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tx, y = curve.ScalarBaseMult(priv)\n\t}\n\treturn\n}\n\n// Marshal converts a point into the uncompressed form specified in section 4.3.6 of ANSI X9.62.\nfunc Marshal(curve Curve, x, y *big.Int) []byte {\n\tbyteLen := (curve.Params().BitSize + 7) >> 3\n\n\tret := make([]byte, 1+2*byteLen)\n\tret[0] = 4 // uncompressed point\n\n\txBytes := x.Bytes()\n\tcopy(ret[1+byteLen-len(xBytes):], xBytes)\n\tyBytes := y.Bytes()\n\tcopy(ret[1+2*byteLen-len(yBytes):], yBytes)\n\treturn ret\n}\n\n// Unmarshal converts a point, serialized by Marshal, into an x, y pair.\n// It is an error if the point is not in uncompressed form or is not on the curve.\n// On error, x = nil.\nfunc Unmarshal(curve Curve, data []byte) (x, y *big.Int) {\n\tbyteLen := (curve.Params().BitSize + 7) >> 3\n\tif len(data) != 1+2*byteLen {\n\t\treturn\n\t}\n\tif data[0] != 4 { // uncompressed form\n\t\treturn\n\t}\n\tp := curve.Params().P\n\tx = new(big.Int).SetBytes(data[1 : 1+byteLen])\n\ty = new(big.Int).SetBytes(data[1+byteLen:])\n\tif x.Cmp(p) >= 0 || y.Cmp(p) >= 0 {\n\t\treturn nil, nil\n\t}\n\tif !curve.IsOnCurve(x, y) {\n\t\treturn nil, nil\n\t}\n\treturn\n}\n\nvar initonce sync.Once\nvar p384 *CurveParams\nvar p521 *CurveParams\n\nfunc initAll() {\n\tinitP224()\n\tinitP256()\n\tinitP384()\n\tinitP521()\n}\n\nfunc initP384() {\n\t// See FIPS 186-3, section D.2.4\n\tp384 = &CurveParams{Name: \"P-384\"}\n\tp384.P, _ = new(big.Int).SetString(\"39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319\", 10)\n\tp384.N, _ = new(big.Int).SetString(\"39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643\", 10)\n\tp384.B, _ = new(big.Int).SetString(\"b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\", 16)\n\tp384.Gx, _ = new(big.Int).SetString(\"aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7\", 16)\n\tp384.Gy, _ = new(big.Int).SetString(\"3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\", 16)\n\tp384.BitSize = 384\n}\n\nfunc initP521() {\n\t// See FIPS 186-3, section D.2.5\n\tp521 = &CurveParams{Name: \"P-521\"}\n\tp521.P, _ = new(big.Int).SetString(\"6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151\", 10)\n\tp521.N, _ = new(big.Int).SetString(\"6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449\", 10)\n\tp521.B, _ = new(big.Int).SetString(\"051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00\", 16)\n\tp521.Gx, _ = new(big.Int).SetString(\"c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66\", 16)\n\tp521.Gy, _ = new(big.Int).SetString(\"11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650\", 16)\n\tp521.BitSize = 521\n}\n\n// P256 returns a Curve which implements P-256 (see FIPS 186-3, section D.2.3)\n//\n// The cryptographic operations are implemented using constant-time algorithms.\nfunc P256() Curve {\n\tinitonce.Do(initAll)\n\treturn p256\n}\n\n// P384 returns a Curve which implements P-384 (see FIPS 186-3, section D.2.4)\n//\n// The cryptographic operations do not use constant-time algorithms.\nfunc P384() Curve {\n\tinitonce.Do(initAll)\n\treturn p384\n}\n\n// P521 returns a Curve which implements P-521 (see FIPS 186-3, section D.2.5)\n//\n// The cryptographic operations do not use constant-time algorithms.\nfunc P521() Curve {\n\tinitonce.Do(initAll)\n\treturn p521\n}\n"], "filenames": ["src/crypto/elliptic/elliptic.go"], "buggy_code_start_loc": [212], "buggy_code_end_loc": [215], "fixing_code_start_loc": [213], "fixing_code_end_loc": [216], "type": "CWE-770", "message": "Go before 1.10.8 and 1.11.x before 1.11.5 mishandles P-521 and P-384 elliptic curves, which allows attackers to cause a denial of service (CPU consumption) or possibly conduct ECDH private key recovery attacks.", "other": {"cve": {"id": "CVE-2019-6486", "sourceIdentifier": "cve@mitre.org", "published": "2019-01-24T05:29:00.907", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Go before 1.10.8 and 1.11.x before 1.11.5 mishandles P-521 and P-384 elliptic curves, which allows attackers to cause a denial of service (CPU consumption) or possibly conduct ECDH private key recovery attacks."}, {"lang": "es", "value": "Go, en versiones anteriores a la 1.10.8 y las versiones 1.11.x anteriores a la 1.11.5, gestionan de manera incorrecta las curvas el\u00edpticas P-521 y P-384, que permiten que los atacantes provoquen una denegaci\u00f3n de servicio (consumo de CPU) o lleven a cabo ataques de recuperaci\u00f3n de la clave privada ECDH."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:golang:go:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.10.8", "matchCriteriaId": "DC7FF63E-50BB-42D5-ACD6-1F5A9AD7E08D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:golang:go:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.1", "versionEndExcluding": "1.11.5", "matchCriteriaId": "9BBC54E7-EA22-4BE9-B1B7-92118786B8A5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "F1E78106-58E6-4D59-990F-75DA575BFAD9"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-04/msg00042.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-05/msg00060.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-06/msg00011.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-06/msg00015.html", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/106740", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/golang/go/commit/42b42f71cf8f5956c09e66230293dfb5db652360", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/golang/go/issues/29903", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/google/wycheproof", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://groups.google.com/forum/#!topic/golang-announce/mVeX35iXuSw", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/02/msg00009.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2019/dsa-4379", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2019/dsa-4380", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/golang/go/commit/42b42f71cf8f5956c09e66230293dfb5db652360"}}