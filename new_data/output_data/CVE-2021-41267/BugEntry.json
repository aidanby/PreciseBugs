{"buggy_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\HttpKernel\\HttpCache;\n\nuse Symfony\\Component\\HttpFoundation\\IpUtils;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\n/**\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @internal\n */\nclass SubRequestHandler\n{\n    public static function handle(HttpKernelInterface $kernel, Request $request, int $type, bool $catch): Response\n    {\n        // save global state related to trusted headers and proxies\n        $trustedProxies = Request::getTrustedProxies();\n        $trustedHeaderSet = Request::getTrustedHeaderSet();\n\n        // remove untrusted values\n        $remoteAddr = $request->server->get('REMOTE_ADDR');\n        if (!IpUtils::checkIp($remoteAddr, $trustedProxies)) {\n            $trustedHeaders = [\n                'FORWARDED' => $trustedHeaderSet & Request::HEADER_FORWARDED,\n                'X_FORWARDED_FOR' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_FOR,\n                'X_FORWARDED_HOST' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_HOST,\n                'X_FORWARDED_PROTO' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_PROTO,\n                'X_FORWARDED_PORT' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_PORT,\n            ];\n            foreach (array_filter($trustedHeaders) as $name => $key) {\n                $request->headers->remove($name);\n                $request->server->remove('HTTP_'.$name);\n            }\n        }\n\n        // compute trusted values, taking any trusted proxies into account\n        $trustedIps = [];\n        $trustedValues = [];\n        foreach (array_reverse($request->getClientIps()) as $ip) {\n            $trustedIps[] = $ip;\n            $trustedValues[] = sprintf('for=\"%s\"', $ip);\n        }\n        if ($ip !== $remoteAddr) {\n            $trustedIps[] = $remoteAddr;\n            $trustedValues[] = sprintf('for=\"%s\"', $remoteAddr);\n        }\n\n        // set trusted values, reusing as much as possible the global trusted settings\n        if (Request::HEADER_FORWARDED & $trustedHeaderSet) {\n            $trustedValues[0] .= sprintf(';host=\"%s\";proto=%s', $request->getHttpHost(), $request->getScheme());\n            $request->headers->set('Forwarded', $v = implode(', ', $trustedValues));\n            $request->server->set('HTTP_FORWARDED', $v);\n        }\n        if (Request::HEADER_X_FORWARDED_FOR & $trustedHeaderSet) {\n            $request->headers->set('X-Forwarded-For', $v = implode(', ', $trustedIps));\n            $request->server->set('HTTP_X_FORWARDED_FOR', $v);\n        } elseif (!(Request::HEADER_FORWARDED & $trustedHeaderSet)) {\n            Request::setTrustedProxies($trustedProxies, $trustedHeaderSet | Request::HEADER_X_FORWARDED_FOR);\n            $request->headers->set('X-Forwarded-For', $v = implode(', ', $trustedIps));\n            $request->server->set('HTTP_X_FORWARDED_FOR', $v);\n        }\n\n        // fix the client IP address by setting it to 127.0.0.1,\n        // which is the core responsibility of this method\n        $request->server->set('REMOTE_ADDR', '127.0.0.1');\n\n        // ensure 127.0.0.1 is set as trusted proxy\n        if (!IpUtils::checkIp('127.0.0.1', $trustedProxies)) {\n            Request::setTrustedProxies(array_merge($trustedProxies, ['127.0.0.1']), Request::getTrustedHeaderSet());\n        }\n\n        try {\n            return $kernel->handle($request, $type, $catch);\n        } finally {\n            // restore global state\n            Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);\n        }\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\HttpKernel\\Tests\\HttpCache;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\nclass SubRequestHandlerTest extends TestCase\n{\n    private static $globalState;\n\n    protected function setUp(): void\n    {\n        self::$globalState = $this->getGlobalState();\n    }\n\n    protected function tearDown(): void\n    {\n        Request::setTrustedProxies(self::$globalState[0], self::$globalState[1]);\n    }\n\n    public function testTrustedHeadersAreKept()\n    {\n        Request::setTrustedProxies(['10.0.0.1'], -1);\n        $globalState = $this->getGlobalState();\n\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('X-Forwarded-For', '10.0.0.2');\n        $request->headers->set('X-Forwarded-Host', 'Good');\n        $request->headers->set('X-Forwarded-Port', '1234');\n        $request->headers->set('X-Forwarded-Proto', 'https');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.2', $request->getClientIp());\n            $this->assertSame('Good', $request->headers->get('X-Forwarded-Host'));\n            $this->assertSame('1234', $request->headers->get('X-Forwarded-Port'));\n            $this->assertSame('https', $request->headers->get('X-Forwarded-Proto'));\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame($globalState, $this->getGlobalState());\n    }\n\n    public function testUntrustedHeadersAreRemoved()\n    {\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('X-Forwarded-For', '10.0.0.2');\n        $request->headers->set('X-Forwarded-Host', 'Evil');\n        $request->headers->set('X-Forwarded-Port', '1234');\n        $request->headers->set('X-Forwarded-Proto', 'http');\n        $request->headers->set('Forwarded', 'Evil2');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.1', $request->getClientIp());\n            $this->assertFalse($request->headers->has('X-Forwarded-Host'));\n            $this->assertFalse($request->headers->has('X-Forwarded-Port'));\n            $this->assertFalse($request->headers->has('X-Forwarded-Proto'));\n            $this->assertSame('for=\"10.0.0.1\";host=\"localhost\";proto=http', $request->headers->get('Forwarded'));\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame(self::$globalState, $this->getGlobalState());\n    }\n\n    public function testTrustedForwardedHeader()\n    {\n        Request::setTrustedProxies(['10.0.0.1'], -1);\n        $globalState = $this->getGlobalState();\n\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('Forwarded', 'for=\"10.0.0.2\";host=\"foo.bar:1234\";proto=https');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.2', $request->getClientIp());\n            $this->assertSame('foo.bar:1234', $request->getHttpHost());\n            $this->assertSame('https', $request->getScheme());\n            $this->assertSame(1234, $request->getPort());\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame($globalState, $this->getGlobalState());\n    }\n\n    public function testTrustedXForwardedForHeader()\n    {\n        Request::setTrustedProxies(['10.0.0.1'], -1);\n        $globalState = $this->getGlobalState();\n\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('X-Forwarded-For', '10.0.0.2');\n        $request->headers->set('X-Forwarded-Host', 'foo.bar');\n        $request->headers->set('X-Forwarded-Proto', 'https');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.2', $request->getClientIp());\n            $this->assertSame('foo.bar', $request->getHttpHost());\n            $this->assertSame('https', $request->getScheme());\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame($globalState, $this->getGlobalState());\n    }\n\n    private function getGlobalState()\n    {\n        return [\n            Request::getTrustedProxies(),\n            Request::getTrustedHeaderSet(),\n        ];\n    }\n}\n\nclass TestSubRequestHandlerKernel implements HttpKernelInterface\n{\n    private $assertCallback;\n\n    public function __construct(\\Closure $assertCallback)\n    {\n        $this->assertCallback = $assertCallback;\n    }\n\n    public function handle(Request $request, $type = self::MAIN_REQUEST, $catch = true): Response\n    {\n        $assertCallback = $this->assertCallback;\n        $assertCallback($request, $type, $catch);\n\n        return new Response();\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\HttpKernel\\HttpCache;\n\nuse Symfony\\Component\\HttpFoundation\\IpUtils;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\n/**\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @internal\n */\nclass SubRequestHandler\n{\n    public static function handle(HttpKernelInterface $kernel, Request $request, int $type, bool $catch): Response\n    {\n        // save global state related to trusted headers and proxies\n        $trustedProxies = Request::getTrustedProxies();\n        $trustedHeaderSet = Request::getTrustedHeaderSet();\n\n        // remove untrusted values\n        $remoteAddr = $request->server->get('REMOTE_ADDR');\n        if (!IpUtils::checkIp($remoteAddr, $trustedProxies)) {\n            $trustedHeaders = [\n                'FORWARDED' => $trustedHeaderSet & Request::HEADER_FORWARDED,\n                'X_FORWARDED_FOR' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_FOR,\n                'X_FORWARDED_HOST' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_HOST,\n                'X_FORWARDED_PROTO' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_PROTO,\n                'X_FORWARDED_PORT' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_PORT,\n                'X_FORWARDED_PREFIX' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_PREFIX,\n            ];\n            foreach (array_filter($trustedHeaders) as $name => $key) {\n                $request->headers->remove($name);\n                $request->server->remove('HTTP_'.$name);\n            }\n        }\n\n        // compute trusted values, taking any trusted proxies into account\n        $trustedIps = [];\n        $trustedValues = [];\n        foreach (array_reverse($request->getClientIps()) as $ip) {\n            $trustedIps[] = $ip;\n            $trustedValues[] = sprintf('for=\"%s\"', $ip);\n        }\n        if ($ip !== $remoteAddr) {\n            $trustedIps[] = $remoteAddr;\n            $trustedValues[] = sprintf('for=\"%s\"', $remoteAddr);\n        }\n\n        // set trusted values, reusing as much as possible the global trusted settings\n        if (Request::HEADER_FORWARDED & $trustedHeaderSet) {\n            $trustedValues[0] .= sprintf(';host=\"%s\";proto=%s', $request->getHttpHost(), $request->getScheme());\n            $request->headers->set('Forwarded', $v = implode(', ', $trustedValues));\n            $request->server->set('HTTP_FORWARDED', $v);\n        }\n        if (Request::HEADER_X_FORWARDED_FOR & $trustedHeaderSet) {\n            $request->headers->set('X-Forwarded-For', $v = implode(', ', $trustedIps));\n            $request->server->set('HTTP_X_FORWARDED_FOR', $v);\n        } elseif (!(Request::HEADER_FORWARDED & $trustedHeaderSet)) {\n            Request::setTrustedProxies($trustedProxies, $trustedHeaderSet | Request::HEADER_X_FORWARDED_FOR);\n            $request->headers->set('X-Forwarded-For', $v = implode(', ', $trustedIps));\n            $request->server->set('HTTP_X_FORWARDED_FOR', $v);\n        }\n\n        // fix the client IP address by setting it to 127.0.0.1,\n        // which is the core responsibility of this method\n        $request->server->set('REMOTE_ADDR', '127.0.0.1');\n\n        // ensure 127.0.0.1 is set as trusted proxy\n        if (!IpUtils::checkIp('127.0.0.1', $trustedProxies)) {\n            Request::setTrustedProxies(array_merge($trustedProxies, ['127.0.0.1']), Request::getTrustedHeaderSet());\n        }\n\n        try {\n            return $kernel->handle($request, $type, $catch);\n        } finally {\n            // restore global state\n            Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);\n        }\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\HttpKernel\\Tests\\HttpCache;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\nclass SubRequestHandlerTest extends TestCase\n{\n    private static $globalState;\n\n    protected function setUp(): void\n    {\n        self::$globalState = $this->getGlobalState();\n    }\n\n    protected function tearDown(): void\n    {\n        Request::setTrustedProxies(self::$globalState[0], self::$globalState[1]);\n    }\n\n    public function testTrustedHeadersAreKept()\n    {\n        Request::setTrustedProxies(['10.0.0.1'], -1);\n        $globalState = $this->getGlobalState();\n\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('X-Forwarded-For', '10.0.0.2');\n        $request->headers->set('X-Forwarded-Host', 'Good');\n        $request->headers->set('X-Forwarded-Port', '1234');\n        $request->headers->set('X-Forwarded-Proto', 'https');\n        $request->headers->set('X-Forwarded-Prefix', '/admin');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.2', $request->getClientIp());\n            $this->assertSame('Good', $request->headers->get('X-Forwarded-Host'));\n            $this->assertSame('1234', $request->headers->get('X-Forwarded-Port'));\n            $this->assertSame('https', $request->headers->get('X-Forwarded-Proto'));\n            $this->assertSame('/admin', $request->headers->get('X-Forwarded-Prefix'));\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame($globalState, $this->getGlobalState());\n    }\n\n    public function testUntrustedHeadersAreRemoved()\n    {\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('X-Forwarded-For', '10.0.0.2');\n        $request->headers->set('X-Forwarded-Host', 'Evil');\n        $request->headers->set('X-Forwarded-Port', '1234');\n        $request->headers->set('X-Forwarded-Proto', 'http');\n        $request->headers->set('X-Forwarded-Prefix', '/admin');\n        $request->headers->set('Forwarded', 'Evil2');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.1', $request->getClientIp());\n            $this->assertFalse($request->headers->has('X-Forwarded-Host'));\n            $this->assertFalse($request->headers->has('X-Forwarded-Port'));\n            $this->assertFalse($request->headers->has('X-Forwarded-Proto'));\n            $this->assertFalse($request->headers->has('X-Forwarded-Prefix'));\n            $this->assertSame('for=\"10.0.0.1\";host=\"localhost\";proto=http', $request->headers->get('Forwarded'));\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame(self::$globalState, $this->getGlobalState());\n    }\n\n    public function testTrustedForwardedHeader()\n    {\n        Request::setTrustedProxies(['10.0.0.1'], -1);\n        $globalState = $this->getGlobalState();\n\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('Forwarded', 'for=\"10.0.0.2\";host=\"foo.bar:1234\";proto=https');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.2', $request->getClientIp());\n            $this->assertSame('foo.bar:1234', $request->getHttpHost());\n            $this->assertSame('https', $request->getScheme());\n            $this->assertSame(1234, $request->getPort());\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame($globalState, $this->getGlobalState());\n    }\n\n    public function testTrustedXForwardedForHeader()\n    {\n        Request::setTrustedProxies(['10.0.0.1'], -1);\n        $globalState = $this->getGlobalState();\n\n        $request = Request::create('/');\n        $request->server->set('REMOTE_ADDR', '10.0.0.1');\n        $request->headers->set('X-Forwarded-For', '10.0.0.2');\n        $request->headers->set('X-Forwarded-Host', 'foo.bar');\n        $request->headers->set('X-Forwarded-Proto', 'https');\n        $request->headers->set('X-Forwarded-Prefix', '/admin');\n\n        $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {\n            $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));\n            $this->assertSame('10.0.0.2', $request->getClientIp());\n            $this->assertSame('foo.bar', $request->getHttpHost());\n            $this->assertSame('https', $request->getScheme());\n            $this->assertSame('/admin', $request->getBaseUrl());\n        });\n\n        SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MAIN_REQUEST, true);\n\n        $this->assertSame($globalState, $this->getGlobalState());\n    }\n\n    private function getGlobalState()\n    {\n        return [\n            Request::getTrustedProxies(),\n            Request::getTrustedHeaderSet(),\n        ];\n    }\n}\n\nclass TestSubRequestHandlerKernel implements HttpKernelInterface\n{\n    private $assertCallback;\n\n    public function __construct(\\Closure $assertCallback)\n    {\n        $this->assertCallback = $assertCallback;\n    }\n\n    public function handle(Request $request, $type = self::MAIN_REQUEST, $catch = true): Response\n    {\n        $assertCallback = $this->assertCallback;\n        $assertCallback($request, $type, $catch);\n\n        return new Response();\n    }\n}\n"], "filenames": ["src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php", "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php"], "buggy_code_start_loc": [40, 44], "buggy_code_end_loc": [40, 120], "fixing_code_start_loc": [41, 45], "fixing_code_end_loc": [42, 127], "type": "CWE-444", "message": "Symfony/Http-Kernel is the HTTP kernel component for Symfony, a PHP framework for web and console applications and a set of reusable PHP components. Headers that are not part of the \"trusted_headers\" allowed list are ignored and protect users from \"Cache poisoning\" attacks. In Symfony 5.2, maintainers added support for the `X-Forwarded-Prefix` headers, but this header was accessible in SubRequest, even if it was not part of the \"trusted_headers\" allowed list. An attacker could leverage this opportunity to forge requests containing a `X-Forwarded-Prefix` header, leading to a web cache poisoning issue. Versions 5.3.12 and later have a patch to ensure that the `X-Forwarded-Prefix` header is not forwarded to subrequests when it is not trusted.", "other": {"cve": {"id": "CVE-2021-41267", "sourceIdentifier": "security-advisories@github.com", "published": "2021-11-24T19:15:07.737", "lastModified": "2021-11-30T18:52:27.077", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Symfony/Http-Kernel is the HTTP kernel component for Symfony, a PHP framework for web and console applications and a set of reusable PHP components. Headers that are not part of the \"trusted_headers\" allowed list are ignored and protect users from \"Cache poisoning\" attacks. In Symfony 5.2, maintainers added support for the `X-Forwarded-Prefix` headers, but this header was accessible in SubRequest, even if it was not part of the \"trusted_headers\" allowed list. An attacker could leverage this opportunity to forge requests containing a `X-Forwarded-Prefix` header, leading to a web cache poisoning issue. Versions 5.3.12 and later have a patch to ensure that the `X-Forwarded-Prefix` header is not forwarded to subrequests when it is not trusted."}, {"lang": "es", "value": "Symfony/Http-Kernel es el componente del n\u00facleo HTTP de Symfony, un framework PHP para aplicaciones web y de consola y un conjunto de componentes PHP reusables. Los encabezados que no forman parte de la lista permitida \"trusted_headers\" son ignoradas y protegen a los usuarios de ataques de \"Cache poisoning\". En Symfony versi\u00f3n 5.2, los mantenedores a\u00f1adieron soporte para los encabezados \"X-Forwarded-Prefix\", pero este encabezado era accesible en SubRequest, incluso si no era parte de la lista permitida \"trusted_headers\". Un atacante podr\u00eda aprovechar esta oportunidad para falsificar peticiones que contengan un encabezado \"X-Forwarded-Prefix\", conllevando aun problema de envenenamiento de la cach\u00e9 web. Las versiones 5.3.12 y posteriores presentan un parche para asegurar que el encabezado \"X-Forwarded-Prefix\" no es reenviado a las subpeticiones cuando no es confiable"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-444"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2.0", "versionEndExcluding": "5.3.12", "matchCriteriaId": "03A20B5C-F577-4E27-90BD-CB0689E7C602"}]}]}], "references": [{"url": "https://github.com/symfony/symfony/commit/95dcf51682029e89450aee86267e3d553aa7c487", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/symfony/symfony/pull/44243", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/symfony/symfony/releases/tag/v5.3.12", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/symfony/symfony/security/advisories/GHSA-q3j3-w37x-hq2q", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/symfony/symfony/commit/95dcf51682029e89450aee86267e3d553aa7c487"}}