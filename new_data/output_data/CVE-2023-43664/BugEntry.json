{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nclass AdminModulesPositionsControllerCore extends AdminController\n{\n    protected $display_key = 0;\n\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        parent::__construct();\n    }\n\n    public function postProcess()\n    {\n        // Getting key value for display\n        if (Tools::getValue('show_modules') && (string) (Tools::getValue('show_modules')) != 'all') {\n            $this->display_key = (int) Tools::getValue('show_modules');\n        }\n\n        $this->addjQueryPlugin([\n            'select2',\n        ]);\n\n        $this->addJS([\n            _PS_JS_DIR_ . 'admin/modules-position.js',\n            _PS_JS_DIR_ . 'jquery/plugins/select2/select2_locale_' . $this->context->language->iso_code . '.js',\n        ]);\n\n        $baseUrl = $this->context->link->getAdminLink('AdminModulesPositions');\n        if (strpos($baseUrl, '?') === false) {\n            $baseUrl .= '?';\n        }\n\n        // Change position in hook\n        if (array_key_exists('changePosition', $_GET)) {\n            if ($this->access('edit')) {\n                $id_module = (int) Tools::getValue('id_module');\n                $id_hook = (int) Tools::getValue('id_hook');\n                $module = Module::getInstanceById($id_module);\n                if (Validate::isLoadedObject($module)) {\n                    $module->updatePosition($id_hook, (bool) Tools::getValue('direction'));\n                    Tools::redirectAdmin($baseUrl . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                } else {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitAddToHook')) {\n            // Add new module in hook\n            if ($this->access('add')) {\n                // Getting vars...\n                $id_module = (int) Tools::getValue('id_module');\n                $module = Module::getInstanceById($id_module);\n                $id_hook = (int) Tools::getValue('id_hook');\n                $hook = new Hook($id_hook);\n\n                if (!$id_module || !Validate::isLoadedObject($module)) {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                    $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (Hook::getModulesFromHook($id_hook, $id_module)) {\n                    $this->errors[] = $this->trans('This module has already been transplanted to this hook.', [], 'Admin.Modules.Notification');\n                } elseif (!$module->isHookableOn($hook->name)) {\n                    $this->errors[] = $this->trans('This module cannot be transplanted to this hook.', [], 'Admin.Modules.Notification');\n                } else {\n                    // Adding vars...\n                    if (!$module->registerHook($hook->name, Shop::getContextListShopID())) {\n                        $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                    } else {\n                        $exceptions = Tools::getValue('exceptions');\n                        $exceptions = (isset($exceptions[0])) ? $exceptions[0] : [];\n                        $exceptions = explode(',', str_replace(' ', '', $exceptions));\n                        $exceptions = array_unique($exceptions);\n\n                        foreach ($exceptions as $key => $except) {\n                            if (empty($except)) {\n                                unset($exceptions[$key]);\n                            } elseif (!Validate::isFileName($except)) {\n                                $this->errors[] = $this->trans('No valid value for field exceptions has been defined.', [], 'Admin.Notifications.Error');\n                            }\n                        }\n                        if (!$this->errors && !$module->registerExceptions($id_hook, $exceptions, Shop::getContextListShopID())) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Notifications.Error');\n                        }\n                    }\n                    if (!$this->errors) {\n                        Tools::redirectAdmin($baseUrl . '&conf=16' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitEditGraft')) {\n            // Edit module from hook\n            if ($this->access('add')) {\n                // Getting vars...\n                $id_module = (int) Tools::getValue('id_module');\n                $module = Module::getInstanceById($id_module);\n                $id_hook = (int) Tools::getValue('id_hook');\n                $new_hook = (int) Tools::getValue('new_hook');\n                $hook = new Hook($new_hook);\n\n                if (!$id_module || !Validate::isLoadedObject($module)) {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                    $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                } else {\n                    if ($new_hook !== $id_hook) {\n                        /* Connect module to a newer hook */\n                        if (!$module->registerHook($hook->name, Shop::getContextListShopID())) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                        }\n                        /* Unregister module from hook & exceptions linked to module */\n                        if (!$module->unregisterHook($id_hook, Shop::getContextListShopID())\n                            || !$module->unregisterExceptions($id_hook, Shop::getContextListShopID())) {\n                            $this->errors[] = $this->trans('An error occurred while deleting the module from its hook.', [], 'Admin.Modules.Notification');\n                        }\n                        $id_hook = $new_hook;\n                    }\n                    $exceptions = Tools::getValue('exceptions');\n                    if (is_array($exceptions)) {\n                        foreach ($exceptions as $id => $exception) {\n                            $exception = explode(',', str_replace(' ', '', $exception));\n                            $exception = array_unique($exception);\n                            // Check files name\n                            foreach ($exception as $except) {\n                                if (!empty($except) && !Validate::isFileName($except)) {\n                                    $this->errors[] = $this->trans('No valid value for field exceptions has been defined.', [], 'Admin.Notifications.Error');\n                                }\n                            }\n\n                            $exceptions[$id] = $exception;\n                        }\n\n                        // Add files exceptions\n                        if (!$module->editExceptions($id_hook, $exceptions)) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                        }\n\n                        if (!$this->errors) {\n                            Tools::redirectAdmin($baseUrl . '&conf=16' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                        }\n                    } else {\n                        $exceptions = explode(',', str_replace(' ', '', $exceptions));\n                        $exceptions = array_unique($exceptions);\n\n                        // Check files name\n                        foreach ($exceptions as $except) {\n                            if (!empty($except) && !Validate::isFileName($except)) {\n                                $this->errors[] = $this->trans('No valid value for field exceptions has been defined.', [], 'Admin.Notifications.Error');\n                            }\n                        }\n\n                        // Add files exceptions\n                        if (!$module->editExceptions($id_hook, $exceptions)) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                        } else {\n                            Tools::redirectAdmin($baseUrl . '&conf=16' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                        }\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (array_key_exists('deleteGraft', $_GET)) {\n            // Delete module from hook\n            if ($this->access('delete')) {\n                $id_module = (int) Tools::getValue('id_module');\n                $module = Module::getInstanceById($id_module);\n                $id_hook = (int) Tools::getValue('id_hook');\n                $hook = new Hook($id_hook);\n                if (!Validate::isLoadedObject($module)) {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                    $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                } else {\n                    if (!$module->unregisterHook($id_hook, Shop::getContextListShopID())\n                        || !$module->unregisterExceptions($id_hook, Shop::getContextListShopID())) {\n                        $this->errors[] = $this->trans('An error occurred while deleting the module from its hook.', [], 'Admin.Modules.Notification');\n                    } else {\n                        Tools::redirectAdmin($baseUrl . '&conf=17' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('unhookform')) {\n            if (!($unhooks = Tools::getValue('unhooks')) || !is_array($unhooks)) {\n                $this->errors[] = $this->trans('Please select a module to unhook.', [], 'Admin.Modules.Notification');\n            } else {\n                foreach ($unhooks as $unhook) {\n                    $explode = explode('_', $unhook);\n                    $id_hook = $explode[0];\n                    $id_module = $explode[1];\n                    $module = Module::getInstanceById((int) $id_module);\n                    $hook = new Hook((int) $id_hook);\n                    if (!Validate::isLoadedObject($module)) {\n                        $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                    } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                        $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                    } else {\n                        if (!$module->unregisterHook((int) $id_hook) || !$module->unregisterExceptions((int) $id_hook)) {\n                            $this->errors[] = $this->trans('An error occurred while deleting the module from its hook.', [], 'Admin.Modules.Notification');\n                        }\n                    }\n                }\n                if (!count($this->errors)) {\n                    Tools::redirectAdmin($baseUrl . '&conf=17' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                }\n            }\n        } else {\n            parent::postProcess();\n        }\n    }\n\n    public function initContent()\n    {\n        $this->addjqueryPlugin('sortable');\n\n        if (array_key_exists('addToHook', $_GET) || array_key_exists('editGraft', $_GET) || (Tools::isSubmit('submitAddToHook') && $this->errors)) {\n            $this->display = 'edit';\n\n            $this->content .= $this->renderForm();\n        }\n\n        $this->context->smarty->assign([\n            'content' => $this->content,\n        ]);\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        $this->page_header_toolbar_btn['save'] = [\n            'href' => self::$currentIndex . '&addToHook' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token,\n            'desc' => $this->trans('Transplant a module', [], 'Admin.Design.Feature'),\n            'icon' => 'process-icon-anchor',\n        ];\n\n        return parent::initPageHeaderToolbar();\n    }\n\n    public function renderForm()\n    {\n        // Init toolbar\n        $this->initToolbarTitle();\n        // toolbar (save, cancel, new, ..)\n        $this->initToolbar();\n        $id_module = (int) Tools::getValue('id_module');\n        $id_hook = (int) Tools::getValue('id_hook');\n        $show_modules = (int) Tools::getValue('show_modules');\n\n        if (Tools::isSubmit('editGraft')) {\n            // Check auth for this page\n            if (!$id_module || !$id_hook) {\n                Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token);\n            }\n\n            $sql = 'SELECT id_module\n\t\t\t\t\tFROM ' . _DB_PREFIX_ . 'hook_module\n\t\t\t\t\tWHERE id_module = ' . $id_module . '\n\t\t\t\t\t\tAND id_hook = ' . $id_hook . '\n\t\t\t\t\t\tAND id_shop IN(' . implode(', ', Shop::getContextListShopID()) . ')';\n            if (!Db::getInstance()->getValue($sql)) {\n                Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token);\n            }\n\n            $sl_module = Module::getInstanceById($id_module);\n            $excepts_list = $sl_module->getExceptions($id_hook, true);\n            $excepts_diff = false;\n            $excepts = '';\n            if ($excepts_list) {\n                $first = current($excepts_list);\n                foreach ($excepts_list as $k => $v) {\n                    if (array_diff($v, $first) || array_diff($first, $v)) {\n                        $excepts_diff = true;\n                    }\n                }\n\n                if (!$excepts_diff) {\n                    $excepts = implode(', ', $first);\n                }\n            }\n        } else {\n            $excepts_diff = false;\n            $excepts_list = Tools::getValue('exceptions', [[]]);\n        }\n        $modules = Module::getModulesInstalled(0);\n\n        $instances = [];\n        foreach ($modules as $module) {\n            if ($tmp_instance = Module::getInstanceById($module['id_module'])) {\n                $instances[$tmp_instance->displayName] = $tmp_instance;\n            }\n        }\n        ksort($instances);\n        $modules = $instances;\n\n        $hooks = [];\n        if ($show_modules || (Tools::getValue('id_hook') > 0)) {\n            $module_instance = Module::getInstanceById((int) Tools::getValue('id_module', $show_modules));\n            $hooks = $module_instance->getPossibleHooksList();\n        }\n\n        $exception_list_diff = [];\n        foreach ($excepts_list as $shop_id => $file_list) {\n            $exception_list_diff[] = $this->displayModuleExceptionList($file_list, $shop_id);\n        }\n\n        $tpl = $this->createTemplate('form.tpl');\n        $tpl->assign([\n            'url_submit' => self::$currentIndex . '&token=' . $this->token,\n            'edit_graft' => Tools::isSubmit('editGraft'),\n            'id_module' => (int) Tools::getValue('id_module'),\n            'id_hook' => (int) Tools::getValue('id_hook'),\n            'show_modules' => $show_modules,\n            'hooks' => $hooks,\n            'exception_list' => $this->displayModuleExceptionList(array_shift($excepts_list), 0),\n            'exception_list_diff' => $exception_list_diff,\n            'except_diff' => $excepts_diff,\n            'display_key' => $this->display_key,\n            'modules' => $modules,\n            'show_toolbar' => true,\n            'toolbar_btn' => $this->toolbar_btn,\n            'toolbar_scroll' => $this->toolbar_scroll,\n            'title' => $this->toolbar_title,\n            'table' => 'hook_module',\n        ]);\n\n        return $tpl->fetch();\n    }\n\n    public function displayModuleExceptionList($file_list, $shop_id)\n    {\n        if (!is_array($file_list)) {\n            $file_list = ($file_list) ? [$file_list] : [];\n        }\n\n        $content = '<p><input type=\"text\" name=\"exceptions[' . $shop_id . ']\" value=\"' . implode(', ', $file_list) . '\" id=\"em_text_' . $shop_id . '\" placeholder=\"' . $this->trans('E.g. address, addresses, attachment', [], 'Admin.Design.Help') . '\"/></p>';\n\n        if ($shop_id) {\n            $shop = new Shop($shop_id);\n            $content .= ' (' . $shop->name . ')';\n        }\n\n        $content .= '<p>\n\t\t\t\t\t<select size=\"25\" id=\"em_list_' . $shop_id . '\" multiple=\"multiple\">\n\t\t\t\t\t<option disabled=\"disabled\">'\n                    . $this->trans('___________ CUSTOM ___________', [], 'Admin.Design.Feature')\n                    . '</option>';\n\n        $controllers = Dispatcher::getControllersPhpselfList(_PS_FRONT_CONTROLLER_DIR_);\n        asort($controllers);\n\n        foreach ($file_list as $k => $v) {\n            if (!in_array($v, $controllers)) {\n                $content .= '<option value=\"' . $v . '\">' . $v . '</option>';\n            }\n        }\n\n        $content .= '<option disabled=\"disabled\">' . $this->trans('____________ CORE ____________', [], 'Admin.Design.Feature') . '</option>';\n\n        foreach ($controllers as $k => $v) {\n            $content .= '<option value=\"' . $v . '\">' . $v . '</option>';\n        }\n\n        $modules_controllers_type = ['admin' => $this->trans('Admin modules controller', [], 'Admin.Design.Feature'), 'front' => $this->trans('Front modules controller', [], 'Admin.Design.Feature')];\n        foreach ($modules_controllers_type as $type => $label) {\n            $content .= '<option disabled=\"disabled\">____________ ' . $label . ' ____________</option>';\n            $all_modules_controllers = Dispatcher::getModuleControllers($type);\n            foreach ($all_modules_controllers as $module => $modules_controllers) {\n                foreach ($modules_controllers as $cont) {\n                    $content .= '<option value=\"module-' . $module . '-' . $cont . '\">module-' . $module . '-' . $cont . '</option>';\n                }\n            }\n        }\n\n        $content .= '</select>\n\t\t\t\t\t</p>';\n\n        return $content;\n    }\n\n    public function ajaxProcessUpdatePositions()\n    {\n        if ($this->access('edit')) {\n            $id_module = (int) (Tools::getValue('id_module'));\n            $id_hook = (int) (Tools::getValue('id_hook'));\n            $way = (bool) (Tools::getValue('way'));\n            $positions = Tools::getValue((string) $id_hook);\n            $position = (is_array($positions)) ? array_search($id_hook . '_' . $id_module, $positions) : null;\n            $module = Module::getInstanceById($id_module);\n            if (Validate::isLoadedObject($module)) {\n                if ($module->updatePosition($id_hook, $way, $position)) {\n                    die(true);\n                } else {\n                    die('{\"hasError\" : true, \"errors\" : \"Cannot update module position.\"}');\n                }\n            } else {\n                die('{\"hasError\" : true, \"errors\" : \"This module cannot be loaded.\"}');\n            }\n        }\n    }\n\n    public function ajaxProcessGetHookableList()\n    {\n        if ($this->access('view')) {\n            /* PrestaShop demo mode */\n            if (_PS_MODE_DEMO_) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: This functionality has been disabled.\"]}');\n            }\n\n            if (!count(Tools::getValue('hooks_list'))) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: no module on this page.\"]}');\n            }\n\n            $modules_list = Tools::getValue('modules_list');\n            $hooks_list = Tools::getValue('hooks_list');\n            $hookableList = [];\n\n            foreach ($modules_list as $module) {\n                $module = trim($module);\n                if (!$module) {\n                    continue;\n                }\n\n                if (!Validate::isModuleName($module)) {\n                    die('{\"hasError\" : true, \"errors\" : [\"Live Edit: module is invalid.\"]}');\n                }\n\n                $moduleInstance = Module::getInstanceByName($module);\n                foreach ($hooks_list as $hook_name) {\n                    $hook_name = trim($hook_name);\n                    if (!$hook_name) {\n                        continue;\n                    }\n                    if (!array_key_exists($hook_name, $hookableList)) {\n                        $hookableList[$hook_name] = [];\n                    }\n                    if ($moduleInstance->isHookableOn($hook_name)) {\n                        $hookableList[$hook_name][] = str_replace('_', '-', $module);\n                    }\n                }\n            }\n            $hookableList['hasError'] = false;\n            die(json_encode($hookableList));\n        }\n    }\n\n    public function ajaxProcessGetHookableModuleList()\n    {\n        if ($this->access('view')) {\n            /* PrestaShop demo mode */\n            if (_PS_MODE_DEMO_) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: This functionality has been disabled.\"]}');\n            }\n            /* PrestaShop demo mode*/\n\n            $hook_name = Tools::getValue('hook');\n            $hookableModulesList = [];\n            $modules = Db::getInstance()->executeS('SELECT id_module, name FROM `' . _DB_PREFIX_ . 'module` ');\n            foreach ($modules as $module) {\n                if (!Validate::isModuleName($module['name'])) {\n                    continue;\n                }\n                if (file_exists(_PS_MODULE_DIR_ . $module['name'] . '/' . $module['name'] . '.php')) {\n                    include_once _PS_MODULE_DIR_ . $module['name'] . '/' . $module['name'] . '.php';\n\n                    /** @var Module $mod */\n                    $mod = new $module['name']();\n                    if ($mod->isHookableOn($hook_name)) {\n                        $hookableModulesList[] = ['id' => (int) $mod->id, 'name' => $mod->displayName, 'display' => Hook::exec($hook_name, [], (int) $mod->id)];\n                    }\n                }\n            }\n            die(json_encode($hookableModulesList));\n        }\n    }\n\n    public function ajaxProcessSaveHook()\n    {\n        if ($this->access('edit')) {\n            /* PrestaShop demo mode */\n            if (_PS_MODE_DEMO_) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: This functionality has been disabled.\"]}');\n            }\n\n            $hooks_list = explode(',', Tools::getValue('hooks_list'));\n            $id_shop = (int) Tools::getValue('id_shop');\n            if (!$id_shop) {\n                $id_shop = Context::getContext()->shop->id;\n            }\n\n            $res = true;\n            $hookableList = [];\n            // $_POST['hook'] is an array of id_module\n            $hooks_list = Tools::getValue('hook');\n\n            foreach ($hooks_list as $id_hook => $modules) {\n                // 1st, drop all previous hooked modules\n                $sql = 'DELETE FROM `' . _DB_PREFIX_ . 'hook_module` WHERE `id_hook` =  ' . (int) $id_hook . ' AND id_shop = ' . (int) $id_shop;\n                $res &= Db::getInstance()->execute($sql);\n\n                $i = 1;\n                $value = '';\n                $ids = [];\n                // then prepare sql query to rehook all chosen modules(id_module, id_shop, id_hook, position)\n                // position is i (autoincremented)\n                if (is_array($modules) && count($modules)) {\n                    foreach ($modules as $id_module) {\n                        if ($id_module && !in_array($id_module, $ids)) {\n                            $ids[] = (int) $id_module;\n                            $value .= '(' . (int) $id_module . ', ' . (int) $id_shop . ', ' . (int) $id_hook . ', ' . (int) $i . '),';\n                        }\n                        ++$i;\n                    }\n\n                    if ($value) {\n                        $value = rtrim($value, ',');\n                        $res &= Db::getInstance()->execute('INSERT INTO  `' . _DB_PREFIX_ . 'hook_module` (id_module, id_shop, id_hook, position) VALUES ' . $value);\n                    }\n                }\n            }\n            if ($res) {\n                $hasError = true;\n            } else {\n                $hasError = false;\n            }\n            die('{\"hasError\" : false, \"errors\" : \"\"}');\n        }\n    }\n\n    /**\n     * Return a json array containing the possible hooks for a module.\n     */\n    public function ajaxProcessGetPossibleHookingListForModule()\n    {\n        $module_id = (int) Tools::getValue('module_id');\n        if ($module_id == 0) {\n            die('{\"hasError\" : true, \"errors\" : [\"Wrong module ID.\"]}');\n        }\n\n        $module_instance = Module::getInstanceById($module_id);\n        die(json_encode($module_instance->getPossibleHooksList()));\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nclass AdminModulesPositionsControllerCore extends AdminController\n{\n    protected $display_key = 0;\n\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        parent::__construct();\n    }\n\n    public function postProcess()\n    {\n        // Getting key value for display\n        if (Tools::getValue('show_modules') && (string) (Tools::getValue('show_modules')) != 'all') {\n            $this->display_key = (int) Tools::getValue('show_modules');\n        }\n\n        $this->addjQueryPlugin([\n            'select2',\n        ]);\n\n        $this->addJS([\n            _PS_JS_DIR_ . 'admin/modules-position.js',\n            _PS_JS_DIR_ . 'jquery/plugins/select2/select2_locale_' . $this->context->language->iso_code . '.js',\n        ]);\n\n        $baseUrl = $this->context->link->getAdminLink('AdminModulesPositions');\n        if (strpos($baseUrl, '?') === false) {\n            $baseUrl .= '?';\n        }\n\n        // Change position in hook\n        if (array_key_exists('changePosition', $_GET)) {\n            if ($this->access('edit')) {\n                $id_module = (int) Tools::getValue('id_module');\n                $id_hook = (int) Tools::getValue('id_hook');\n                $module = Module::getInstanceById($id_module);\n                if (Validate::isLoadedObject($module)) {\n                    $module->updatePosition($id_hook, (bool) Tools::getValue('direction'));\n                    Tools::redirectAdmin($baseUrl . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                } else {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitAddToHook')) {\n            // Add new module in hook\n            if ($this->access('add')) {\n                // Getting vars...\n                $id_module = (int) Tools::getValue('id_module');\n                $module = Module::getInstanceById($id_module);\n                $id_hook = (int) Tools::getValue('id_hook');\n                $hook = new Hook($id_hook);\n\n                if (!$id_module || !Validate::isLoadedObject($module)) {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                    $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (Hook::getModulesFromHook($id_hook, $id_module)) {\n                    $this->errors[] = $this->trans('This module has already been transplanted to this hook.', [], 'Admin.Modules.Notification');\n                } elseif (!$module->isHookableOn($hook->name)) {\n                    $this->errors[] = $this->trans('This module cannot be transplanted to this hook.', [], 'Admin.Modules.Notification');\n                } else {\n                    // Adding vars...\n                    if (!$module->registerHook($hook->name, Shop::getContextListShopID())) {\n                        $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                    } else {\n                        $exceptions = Tools::getValue('exceptions');\n                        $exceptions = (isset($exceptions[0])) ? $exceptions[0] : [];\n                        $exceptions = explode(',', str_replace(' ', '', $exceptions));\n                        $exceptions = array_unique($exceptions);\n\n                        foreach ($exceptions as $key => $except) {\n                            if (empty($except)) {\n                                unset($exceptions[$key]);\n                            } elseif (!Validate::isFileName($except)) {\n                                $this->errors[] = $this->trans('No valid value for field exceptions has been defined.', [], 'Admin.Notifications.Error');\n                            }\n                        }\n                        if (!$this->errors && !$module->registerExceptions($id_hook, $exceptions, Shop::getContextListShopID())) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Notifications.Error');\n                        }\n                    }\n                    if (!$this->errors) {\n                        Tools::redirectAdmin($baseUrl . '&conf=16' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitEditGraft')) {\n            // Edit module from hook\n            if ($this->access('add')) {\n                // Getting vars...\n                $id_module = (int) Tools::getValue('id_module');\n                $module = Module::getInstanceById($id_module);\n                $id_hook = (int) Tools::getValue('id_hook');\n                $new_hook = (int) Tools::getValue('new_hook');\n                $hook = new Hook($new_hook);\n\n                if (!$id_module || !Validate::isLoadedObject($module)) {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                    $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                } else {\n                    if ($new_hook !== $id_hook) {\n                        /* Connect module to a newer hook */\n                        if (!$module->registerHook($hook->name, Shop::getContextListShopID())) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                        }\n                        /* Unregister module from hook & exceptions linked to module */\n                        if (!$module->unregisterHook($id_hook, Shop::getContextListShopID())\n                            || !$module->unregisterExceptions($id_hook, Shop::getContextListShopID())) {\n                            $this->errors[] = $this->trans('An error occurred while deleting the module from its hook.', [], 'Admin.Modules.Notification');\n                        }\n                        $id_hook = $new_hook;\n                    }\n                    $exceptions = Tools::getValue('exceptions');\n                    if (is_array($exceptions)) {\n                        foreach ($exceptions as $id => $exception) {\n                            $exception = explode(',', str_replace(' ', '', $exception));\n                            $exception = array_unique($exception);\n                            // Check files name\n                            foreach ($exception as $except) {\n                                if (!empty($except) && !Validate::isFileName($except)) {\n                                    $this->errors[] = $this->trans('No valid value for field exceptions has been defined.', [], 'Admin.Notifications.Error');\n                                }\n                            }\n\n                            $exceptions[$id] = $exception;\n                        }\n\n                        // Add files exceptions\n                        if (!$module->editExceptions($id_hook, $exceptions)) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                        }\n\n                        if (!$this->errors) {\n                            Tools::redirectAdmin($baseUrl . '&conf=16' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                        }\n                    } else {\n                        $exceptions = explode(',', str_replace(' ', '', $exceptions));\n                        $exceptions = array_unique($exceptions);\n\n                        // Check files name\n                        foreach ($exceptions as $except) {\n                            if (!empty($except) && !Validate::isFileName($except)) {\n                                $this->errors[] = $this->trans('No valid value for field exceptions has been defined.', [], 'Admin.Notifications.Error');\n                            }\n                        }\n\n                        // Add files exceptions\n                        if (!$module->editExceptions($id_hook, $exceptions)) {\n                            $this->errors[] = $this->trans('An error occurred while transplanting the module to its hook.', [], 'Admin.Modules.Notification');\n                        } else {\n                            Tools::redirectAdmin($baseUrl . '&conf=16' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                        }\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (array_key_exists('deleteGraft', $_GET)) {\n            // Delete module from hook\n            if ($this->access('delete')) {\n                $id_module = (int) Tools::getValue('id_module');\n                $module = Module::getInstanceById($id_module);\n                $id_hook = (int) Tools::getValue('id_hook');\n                $hook = new Hook($id_hook);\n                if (!Validate::isLoadedObject($module)) {\n                    $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                    $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                } else {\n                    if (!$module->unregisterHook($id_hook, Shop::getContextListShopID())\n                        || !$module->unregisterExceptions($id_hook, Shop::getContextListShopID())) {\n                        $this->errors[] = $this->trans('An error occurred while deleting the module from its hook.', [], 'Admin.Modules.Notification');\n                    } else {\n                        Tools::redirectAdmin($baseUrl . '&conf=17' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', [], 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('unhookform')) {\n            if (!($unhooks = Tools::getValue('unhooks')) || !is_array($unhooks)) {\n                $this->errors[] = $this->trans('Please select a module to unhook.', [], 'Admin.Modules.Notification');\n            } else {\n                foreach ($unhooks as $unhook) {\n                    $explode = explode('_', $unhook);\n                    $id_hook = $explode[0];\n                    $id_module = $explode[1];\n                    $module = Module::getInstanceById((int) $id_module);\n                    $hook = new Hook((int) $id_hook);\n                    if (!Validate::isLoadedObject($module)) {\n                        $this->errors[] = $this->trans('This module cannot be loaded.', [], 'Admin.Modules.Notification');\n                    } elseif (!$id_hook || !Validate::isLoadedObject($hook)) {\n                        $this->errors[] = $this->trans('Hook cannot be loaded.', [], 'Admin.Modules.Notification');\n                    } else {\n                        if (!$module->unregisterHook((int) $id_hook) || !$module->unregisterExceptions((int) $id_hook)) {\n                            $this->errors[] = $this->trans('An error occurred while deleting the module from its hook.', [], 'Admin.Modules.Notification');\n                        }\n                    }\n                }\n                if (!count($this->errors)) {\n                    Tools::redirectAdmin($baseUrl . '&conf=17' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token);\n                }\n            }\n        } else {\n            parent::postProcess();\n        }\n    }\n\n    public function initContent()\n    {\n        $this->addjqueryPlugin('sortable');\n\n        if (array_key_exists('addToHook', $_GET) || array_key_exists('editGraft', $_GET) || (Tools::isSubmit('submitAddToHook') && $this->errors)) {\n            $this->display = 'edit';\n\n            $this->content .= $this->renderForm();\n        }\n\n        $this->context->smarty->assign([\n            'content' => $this->content,\n        ]);\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        $this->page_header_toolbar_btn['save'] = [\n            'href' => self::$currentIndex . '&addToHook' . ($this->display_key ? '&show_modules=' . $this->display_key : '') . '&token=' . $this->token,\n            'desc' => $this->trans('Transplant a module', [], 'Admin.Design.Feature'),\n            'icon' => 'process-icon-anchor',\n        ];\n\n        return parent::initPageHeaderToolbar();\n    }\n\n    public function renderForm()\n    {\n        // Init toolbar\n        $this->initToolbarTitle();\n        // toolbar (save, cancel, new, ..)\n        $this->initToolbar();\n        $id_module = (int) Tools::getValue('id_module');\n        $id_hook = (int) Tools::getValue('id_hook');\n        $show_modules = (int) Tools::getValue('show_modules');\n\n        if (Tools::isSubmit('editGraft')) {\n            // Check auth for this page\n            if (!$id_module || !$id_hook) {\n                Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token);\n            }\n\n            $sql = 'SELECT id_module\n\t\t\t\t\tFROM ' . _DB_PREFIX_ . 'hook_module\n\t\t\t\t\tWHERE id_module = ' . $id_module . '\n\t\t\t\t\t\tAND id_hook = ' . $id_hook . '\n\t\t\t\t\t\tAND id_shop IN(' . implode(', ', Shop::getContextListShopID()) . ')';\n            if (!Db::getInstance()->getValue($sql)) {\n                Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token);\n            }\n\n            $sl_module = Module::getInstanceById($id_module);\n            $excepts_list = $sl_module->getExceptions($id_hook, true);\n            $excepts_diff = false;\n            $excepts = '';\n            if ($excepts_list) {\n                $first = current($excepts_list);\n                foreach ($excepts_list as $k => $v) {\n                    if (array_diff($v, $first) || array_diff($first, $v)) {\n                        $excepts_diff = true;\n                    }\n                }\n\n                if (!$excepts_diff) {\n                    $excepts = implode(', ', $first);\n                }\n            }\n        } else {\n            $excepts_diff = false;\n            $excepts_list = Tools::getValue('exceptions', [[]]);\n        }\n        $modules = Module::getModulesInstalled(0);\n\n        $instances = [];\n        foreach ($modules as $module) {\n            if ($tmp_instance = Module::getInstanceById($module['id_module'])) {\n                $instances[$tmp_instance->displayName] = $tmp_instance;\n            }\n        }\n        ksort($instances);\n        $modules = $instances;\n\n        $hooks = [];\n        if ($show_modules || (Tools::getValue('id_hook') > 0)) {\n            $module_instance = Module::getInstanceById((int) Tools::getValue('id_module', $show_modules));\n            $hooks = $module_instance->getPossibleHooksList();\n        }\n\n        $exception_list_diff = [];\n        foreach ($excepts_list as $shop_id => $file_list) {\n            $exception_list_diff[] = $this->displayModuleExceptionList($file_list, $shop_id);\n        }\n\n        $tpl = $this->createTemplate('form.tpl');\n        $tpl->assign([\n            'url_submit' => self::$currentIndex . '&token=' . $this->token,\n            'edit_graft' => Tools::isSubmit('editGraft'),\n            'id_module' => (int) Tools::getValue('id_module'),\n            'id_hook' => (int) Tools::getValue('id_hook'),\n            'show_modules' => $show_modules,\n            'hooks' => $hooks,\n            'exception_list' => $this->displayModuleExceptionList(array_shift($excepts_list), 0),\n            'exception_list_diff' => $exception_list_diff,\n            'except_diff' => $excepts_diff,\n            'display_key' => $this->display_key,\n            'modules' => $modules,\n            'show_toolbar' => true,\n            'toolbar_btn' => $this->toolbar_btn,\n            'toolbar_scroll' => $this->toolbar_scroll,\n            'title' => $this->toolbar_title,\n            'table' => 'hook_module',\n        ]);\n\n        return $tpl->fetch();\n    }\n\n    public function displayModuleExceptionList($file_list, $shop_id)\n    {\n        if (!is_array($file_list)) {\n            $file_list = ($file_list) ? [$file_list] : [];\n        }\n\n        $content = '<p><input type=\"text\" name=\"exceptions[' . $shop_id . ']\" value=\"' . implode(', ', $file_list) . '\" id=\"em_text_' . $shop_id . '\" placeholder=\"' . $this->trans('E.g. address, addresses, attachment', [], 'Admin.Design.Help') . '\"/></p>';\n\n        if ($shop_id) {\n            $shop = new Shop($shop_id);\n            $content .= ' (' . $shop->name . ')';\n        }\n\n        $content .= '<p>\n\t\t\t\t\t<select size=\"25\" id=\"em_list_' . $shop_id . '\" multiple=\"multiple\">\n\t\t\t\t\t<option disabled=\"disabled\">'\n                    . $this->trans('___________ CUSTOM ___________', [], 'Admin.Design.Feature')\n                    . '</option>';\n\n        $controllers = Dispatcher::getControllersPhpselfList(_PS_FRONT_CONTROLLER_DIR_);\n        asort($controllers);\n\n        foreach ($file_list as $k => $v) {\n            if (!in_array($v, $controllers)) {\n                $content .= '<option value=\"' . $v . '\">' . $v . '</option>';\n            }\n        }\n\n        $content .= '<option disabled=\"disabled\">' . $this->trans('____________ CORE ____________', [], 'Admin.Design.Feature') . '</option>';\n\n        foreach ($controllers as $k => $v) {\n            $content .= '<option value=\"' . $v . '\">' . $v . '</option>';\n        }\n\n        $modules_controllers_type = ['admin' => $this->trans('Admin modules controller', [], 'Admin.Design.Feature'), 'front' => $this->trans('Front modules controller', [], 'Admin.Design.Feature')];\n        foreach ($modules_controllers_type as $type => $label) {\n            $content .= '<option disabled=\"disabled\">____________ ' . $label . ' ____________</option>';\n            $all_modules_controllers = Dispatcher::getModuleControllers($type);\n            foreach ($all_modules_controllers as $module => $modules_controllers) {\n                foreach ($modules_controllers as $cont) {\n                    $content .= '<option value=\"module-' . $module . '-' . $cont . '\">module-' . $module . '-' . $cont . '</option>';\n                }\n            }\n        }\n\n        $content .= '</select>\n\t\t\t\t\t</p>';\n\n        return $content;\n    }\n\n    public function ajaxProcessUpdatePositions()\n    {\n        if ($this->access('edit')) {\n            $id_module = (int) (Tools::getValue('id_module'));\n            $id_hook = (int) (Tools::getValue('id_hook'));\n            $way = (bool) (Tools::getValue('way'));\n            $positions = Tools::getValue((string) $id_hook);\n            $position = (is_array($positions)) ? array_search($id_hook . '_' . $id_module, $positions) : null;\n            $module = Module::getInstanceById($id_module);\n            if (Validate::isLoadedObject($module)) {\n                if ($module->updatePosition($id_hook, $way, $position)) {\n                    die(true);\n                } else {\n                    die('{\"hasError\" : true, \"errors\" : \"Cannot update module position.\"}');\n                }\n            } else {\n                die('{\"hasError\" : true, \"errors\" : \"This module cannot be loaded.\"}');\n            }\n        }\n    }\n\n    public function ajaxProcessGetHookableList()\n    {\n        if ($this->access('view')) {\n            /* PrestaShop demo mode */\n            if (_PS_MODE_DEMO_) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: This functionality has been disabled.\"]}');\n            }\n\n            if (!count(Tools::getValue('hooks_list'))) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: no module on this page.\"]}');\n            }\n\n            $modules_list = Tools::getValue('modules_list');\n            $hooks_list = Tools::getValue('hooks_list');\n            $hookableList = [];\n\n            foreach ($modules_list as $module) {\n                $module = trim($module);\n                if (!$module) {\n                    continue;\n                }\n\n                if (!Validate::isModuleName($module)) {\n                    die('{\"hasError\" : true, \"errors\" : [\"Live Edit: module is invalid.\"]}');\n                }\n\n                $moduleInstance = Module::getInstanceByName($module);\n                foreach ($hooks_list as $hook_name) {\n                    $hook_name = trim($hook_name);\n                    if (!$hook_name) {\n                        continue;\n                    }\n                    if (!array_key_exists($hook_name, $hookableList)) {\n                        $hookableList[$hook_name] = [];\n                    }\n                    if ($moduleInstance->isHookableOn($hook_name)) {\n                        $hookableList[$hook_name][] = str_replace('_', '-', $module);\n                    }\n                }\n            }\n            $hookableList['hasError'] = false;\n            die(json_encode($hookableList));\n        }\n    }\n\n    public function ajaxProcessGetHookableModuleList()\n    {\n        if ($this->access('view')) {\n            /* PrestaShop demo mode */\n            if (_PS_MODE_DEMO_) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: This functionality has been disabled.\"]}');\n            }\n            /* PrestaShop demo mode*/\n\n            $hook_name = Tools::getValue('hook');\n            $hookableModulesList = [];\n            $modules = Db::getInstance()->executeS('SELECT id_module, name FROM `' . _DB_PREFIX_ . 'module` ');\n            foreach ($modules as $module) {\n                if (!Validate::isModuleName($module['name'])) {\n                    continue;\n                }\n                if (file_exists(_PS_MODULE_DIR_ . $module['name'] . '/' . $module['name'] . '.php')) {\n                    include_once _PS_MODULE_DIR_ . $module['name'] . '/' . $module['name'] . '.php';\n\n                    /** @var Module $mod */\n                    $mod = new $module['name']();\n                    if ($mod->isHookableOn($hook_name)) {\n                        $hookableModulesList[] = ['id' => (int) $mod->id, 'name' => $mod->displayName, 'display' => Hook::exec($hook_name, [], (int) $mod->id)];\n                    }\n                }\n            }\n            die(json_encode($hookableModulesList));\n        }\n    }\n\n    public function ajaxProcessSaveHook()\n    {\n        if ($this->access('edit')) {\n            /* PrestaShop demo mode */\n            if (_PS_MODE_DEMO_) {\n                die('{\"hasError\" : true, \"errors\" : [\"Live Edit: This functionality has been disabled.\"]}');\n            }\n\n            $hooks_list = explode(',', Tools::getValue('hooks_list'));\n            $id_shop = (int) Tools::getValue('id_shop');\n            if (!$id_shop) {\n                $id_shop = Context::getContext()->shop->id;\n            }\n\n            $res = true;\n            $hookableList = [];\n            // $_POST['hook'] is an array of id_module\n            $hooks_list = Tools::getValue('hook');\n\n            foreach ($hooks_list as $id_hook => $modules) {\n                // 1st, drop all previous hooked modules\n                $sql = 'DELETE FROM `' . _DB_PREFIX_ . 'hook_module` WHERE `id_hook` =  ' . (int) $id_hook . ' AND id_shop = ' . (int) $id_shop;\n                $res &= Db::getInstance()->execute($sql);\n\n                $i = 1;\n                $value = '';\n                $ids = [];\n                // then prepare sql query to rehook all chosen modules(id_module, id_shop, id_hook, position)\n                // position is i (autoincremented)\n                if (is_array($modules) && count($modules)) {\n                    foreach ($modules as $id_module) {\n                        if ($id_module && !in_array($id_module, $ids)) {\n                            $ids[] = (int) $id_module;\n                            $value .= '(' . (int) $id_module . ', ' . (int) $id_shop . ', ' . (int) $id_hook . ', ' . (int) $i . '),';\n                        }\n                        ++$i;\n                    }\n\n                    if ($value) {\n                        $value = rtrim($value, ',');\n                        $res &= Db::getInstance()->execute('INSERT INTO  `' . _DB_PREFIX_ . 'hook_module` (id_module, id_shop, id_hook, position) VALUES ' . $value);\n                    }\n                }\n            }\n            if ($res) {\n                $hasError = true;\n            } else {\n                $hasError = false;\n            }\n            die('{\"hasError\" : false, \"errors\" : \"\"}');\n        }\n    }\n\n    /**\n     * Return a json array containing the possible hooks for a module.\n     */\n    public function ajaxProcessGetPossibleHookingListForModule()\n    {\n        if ($this->access('view')) {\n            $module_id = (int) Tools::getValue('module_id');\n            if ($module_id == 0) {\n                die('{\"hasError\" : true, \"errors\" : [\"Wrong module ID.\"]}');\n            }\n\n            $module_instance = Module::getInstanceById($module_id);\n            die(json_encode($module_instance->getPossibleHooksList()));\n        }\n    }\n}\n"], "filenames": ["controllers/admin/AdminModulesPositionsController.php"], "buggy_code_start_loc": [561], "buggy_code_end_loc": [568], "fixing_code_start_loc": [561], "fixing_code_end_loc": [570], "type": "CWE-269", "message": "PrestaShop is an Open Source e-commerce web application. In the Prestashop Back office interface, an employee can list all modules without any access rights: method `ajaxProcessGetPossibleHookingListForModule` doesn't check access rights. This issue has been addressed in commit `15bd281c` which is included in version 8.1.2. Users are advised to upgrade. There are no known workaround for this issue.", "other": {"cve": {"id": "CVE-2023-43664", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-28T19:15:10.713", "lastModified": "2023-10-03T00:18:35.847", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop is an Open Source e-commerce web application. In the Prestashop Back office interface, an employee can list all modules without any access rights: method `ajaxProcessGetPossibleHookingListForModule` doesn't check access rights. This issue has been addressed in commit `15bd281c` which is included in version 8.1.2. Users are advised to upgrade. There are no known workaround for this issue."}, {"lang": "es", "value": "PrestaShop es una aplicaci\u00f3n web de comercio electr\u00f3nico de c\u00f3digo abierto. En la interfaz del Back office de Prestashop, un empleado puede enumerar todos los m\u00f3dulos sin ning\u00fan derecho de acceso: el m\u00e9todo `ajaxProcessGetPossibleHookingListForModule` no verifica los derechos de acceso. Este problema se solucion\u00f3 en el commit `15bd281c` que se incluye en la versi\u00f3n 8.1.2. Se recomienda a los usuarios que actualicen. No se conoce ning\u00fan workaround para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.1.2", "matchCriteriaId": "70A20382-47EA-477D-A6BE-0DDC760A3B02"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/15bd281c18f032a5134a8d213b44d24829d45762", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-gvrg-62jp-rf7j", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/15bd281c18f032a5134a8d213b44d24829d45762"}}