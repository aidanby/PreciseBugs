{"buggy_code": ["package {\n\timport flash.display.*;\n\timport flash.events.*;\n\timport flash.media.*;\n\timport flash.net.*;\n\timport flash.text.*;\n\timport flash.system.*;\n\n\timport flash.media.Video;\n\timport flash.net.NetConnection;\n\timport flash.net.NetStream;\n\n\timport flash.geom.ColorTransform;\n\n\timport flash.filters.DropShadowFilter;\n\timport flash.utils.Timer;\n\timport flash.external.ExternalInterface;\n\timport flash.geom.Rectangle;\n\n\timport htmlelements.IMediaElement;\n\timport htmlelements.VideoElement;\n\timport htmlelements.AudioElement;\n\timport htmlelements.YouTubeElement;\n\timport htmlelements.DailyMotionElement;\n\timport htmlelements.HLSMediaElement;\n\n\t[SWF(backgroundColor=\"0x000000\")] // Set SWF background color\n\n\n\tpublic class FlashMediaElement extends MovieClip {\n\n\t\tprivate var _mediaUrl:String;\n\t\tprivate var _jsInitFunction:String;\n\t\tprivate var _jsCallbackFunction:String;\n\t\tprivate var _autoplay:Boolean;\n\t\tprivate var _preload:String;\n\t\tprivate var _debug:Boolean = false;\n\t\tprivate var _isVideo:Boolean;\n\t\tprivate var _video:DisplayObject;\n\t\tprivate var _timerRate:Number;\n\t\tprivate var _enableSmoothing:Boolean;\n\t\tprivate var _allowedPluginDomain:String;\n\t\tprivate var _isFullScreen:Boolean = false;\n\t\tprivate var _startVolume:Number;\n\t\tprivate var _streamer:String = \"\";\n\t\tprivate var _enablePseudoStreaming:Boolean;\n\t\tprivate var _pseudoStreamingStartQueryParam:String;\n\t\tprivate var _fill:Boolean;\n\n\t\t// native video size (from meta data)\n\t\tprivate var _nativeVideoWidth:Number = 0;\n\t\tprivate var _nativeVideoHeight:Number = 0;\n\n\t\t// visual elements\n\t\tprivate var _mediaElementDisplay:FlashMediaElementDisplay = new FlashMediaElementDisplay();\n\t\tprivate var _output:TextField;\n\t\tprivate var _fullscreenButton:SimpleButton;\n\n\t\t// media\n\t\tprivate var _mediaElement:IMediaElement;\n\n\t\t// connection to fullscreen\n\t\tprivate var _connection:LocalConnection;\n\t\tprivate var _connectionName:String;\n\n\t\t// CONTROLS\n\t\tprivate var _alwaysShowControls:Boolean;\n\t\tprivate var _controlsStyle:String;\n\t\tprivate var _controlsAutoHide:Boolean = true;\n\t\tprivate var _controlBar:MovieClip;\n\t\tprivate var _controlBarBg:MovieClip;\n\t\tprivate var _scrubBar:MovieClip;\n\t\tprivate var _scrubTrack:MovieClip;\n\t\tprivate var _scrubOverlay:MovieClip;\n\t\tprivate var _scrubLoaded:MovieClip;\n\t\tprivate var _hoverTime:MovieClip;\n\t\tprivate var _hoverTimeText:TextField;\n\t\tprivate var _playButton:SimpleButton;\n\t\tprivate var _pauseButton:SimpleButton;\n\t\tprivate var _duration:TextField;\n\t\tprivate var _currentTime:TextField;\n\t\tprivate var _fullscreenIcon:SimpleButton;\n\t\tprivate var _volumeMuted:SimpleButton;\n\t\tprivate var _volumeUnMuted:SimpleButton;\n\t\tprivate var _scrubTrackColor:String;\n\t\tprivate var _scrubBarColor:String;\n\t\tprivate var _scrubLoadedColor:String;\n\n\t\t// IDLE Timer for mouse for showing/hiding controls\n\t\tprivate var _inactiveTime:int;\n\t\tprivate var _timer:Timer;\n\t\tprivate var _idleTime:int;\n\t\tprivate var _isMouseActive:Boolean\n\t\tprivate var _isOverStage:Boolean = false;\n\n\t\t// security checkes\n\t\tprivate var securityIssue:Boolean = false; // When SWF parameters contain illegal characters\n\t\tprivate var directAccess:Boolean = false; // When SWF visited directly with no parameters (or when security issue detected)\n\n\n\t\tpublic function FlashMediaElement() {\n\t\t\t// check for security issues (borrowed from jPLayer)\n\t\t\tcheckFlashVars(loaderInfo.parameters);\n\n\t\t\t// allows this player to be called from a different domain than the HTML page hosting the player\n\t\t\tCONFIG::cdnBuild {\n\t\t\t\tSecurity.allowDomain(\"*\");\n\t\t\t\tSecurity.allowInsecureDomain('*');\n\t\t\t}\n\n\t\t\tif (securityIssue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get parameters\n\t\t\t// Use only FlashVars, ignore QueryString\n\t\t\tvar params:Object, pos:int, query:Object;\n\n\t\t\tparams = LoaderInfo(this.root.loaderInfo).parameters;\n\t\t\tpos = root.loaderInfo.url.indexOf('?');\n\t\t\tif (pos !== -1) {\n\t\t\t\tquery = parseStr(root.loaderInfo.url.substr(pos + 1));\n\n\t\t\t\tfor (var key:String in params) {\n\t\t\t\t\tif (query.hasOwnProperty(trim(key))) {\n\t\t\t\t\t\tdelete params[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tCONFIG::debugBuild {\n\t\t\t\t_debug = (params['debug'] != undefined) ? (String(params['debug']) == \"true\") : false;\n\t\t\t}\n\t\t\tif (_debug) {\n\t\t\t\t// add debug output\n\t\t\t\tvar _outputFormat:TextFormat = new TextFormat();\n\t\t\t\t_outputFormat.size = 14;\n\t\t\t\t_outputFormat.bold = true;\n\t\t\t\t_output = new TextField();\n\t\t\t\t_output.defaultTextFormat = _outputFormat;\n\t\t\t\t_output.textColor = 0xeeeeee;\n\t\t\t\t_output.width = stage.stageWidth;\n\t\t\t\t_output.height = stage.stageHeight;\n\t\t\t\t_output.multiline = true;\n\t\t\t\t_output.wordWrap = true;\n\t\t\t\t_output.border = false;\n\t\t\t\t_output.filters = [new DropShadowFilter(1, 0x000000, 45, 1, 2, 2, 1)];\n\t\t\t\t_output.text = \"Initializing Flash...\\n\";\n\t\t\t\t_output.visible = _debug;\n\t\t\t\taddChild(_output);\n\t\t\t}\n\t\t\t_mediaUrl = (params['file'] != undefined) ? String(params['file']) : \"\";\n\t\t\t_jsInitFunction = (params['jsinitfunction'] != undefined) ? String(params['jsinitfunction']) : \"\";\n\t\t\t_jsCallbackFunction = (params['jscallbackfunction'] != undefined) ? String(params['jscallbackfunction']) : \"\";\n\t\t\t_autoplay = (params['autoplay'] != undefined) ? (String(params['autoplay']) == \"true\") : false;\n\t\t\t_isVideo = (params['isvideo'] != undefined) ? ((String(params['isvideo']) == \"false\") ? false : true  ) : true;\n\t\t\t_timerRate = (params['timerrate'] != undefined) ? (parseInt(params['timerrate'], 10)) : 250;\n\t\t\t_enableSmoothing = (params['smoothing'] != undefined) ? (String(params['smoothing']) == \"true\") : false;\n\t\t\t_startVolume = (params['startvolume'] != undefined) ? (parseFloat(params['startvolume'])) : 0.8;\n\t\t\t_preload = (params['preload'] != undefined) ? params['preload'] : \"none\";\n\t\t\t_alwaysShowControls = (params['controls'] != undefined) ? (String(params['controls']) == \"true\") : false;\n\t\t\t_controlsStyle = (params['controlstyle'] != undefined) ? (String(params['controlstyle'])) : \"\"; // blank or \"floating\"\n\t\t\t_controlsAutoHide = (params['autohide'] != undefined) ? (String(params['autohide']) == \"true\") : true;\n\t\t\t_scrubTrackColor = (params['scrubtrackcolor'] != undefined) ? (String(params['scrubtrackcolor'])) : \"0x333333\";\n\t\t\t_scrubBarColor = (params['scrubbarcolor'] != undefined) ? (String(params['scrubbarcolor'])) : \"0xefefef\";\n\t\t\t_scrubLoadedColor = (params['scrubloadedcolor'] != undefined) ? (String(params['scrubloadedcolor'])) : \"0x3CACC8\";\n\t\t\t_enablePseudoStreaming = (params['pseudostreaming'] != undefined) ? (String(params['pseudostreaming']) == \"true\") : false;\n\t\t\t_pseudoStreamingStartQueryParam = (params['pseudostreamstart'] != undefined) ? (String(params['pseudostreamstart'])) : \"start\";\n\t\t\t_streamer = (params['flashstreamer'] != undefined) ? (String(params['flashstreamer'])) : \"\";\n\t\t\t_fill = (params['fill'] != undefined) ? (String(params['fill']) == \"true\") : false;\n\n\t\t\t// always show controls for audio files\n\t\t\tif (!_isVideo && _alwaysShowControls)\n\t\t\t\t_controlsAutoHide = false;\n\n\t\t\tif (isNaN(_timerRate))\n\t\t\t\t_timerRate = 250;\n\n\t\t\t// setup stage and player sizes/scales\n\t\t\tstage.align = StageAlign.TOP_LEFT;\n\t\t\tstage.scaleMode = StageScaleMode.NO_SCALE;\n\t\t\tthis.addChild(_mediaElementDisplay);\n\t\t\tstage.addChild(this);\n\n\t\t\t//_autoplay = true;\n\t\t\t//_mediaUrl  = \"http://mediafiles.dts.edu/chapel/mp4/20100609.mp4\";\n\t\t\t//_alwaysShowControls = true;\n\t\t\t//_mediaUrl  = \"../media/Parades-PastLives.mp3\";\n\t\t\t//_mediaUrl  = \"../media/echo-hereweare.mp4\";\n\n\t\t\t//_mediaUrl = \"http://video.ted.com/talks/podcast/AlGore_2006_480.mp4\";\n\t\t\t//_mediaUrl = \"rtmp://stream2.france24.yacast.net/france24_live/en/f24_liveen\";\n\n\t\t\t//_mediaUrl = \"http://www.youtube.com/watch?feature=player_embedded&v=yyWWXSwtPP0\"; // hosea\n\t\t\t//_mediaUrl = \"http://www.youtube.com/watch?feature=player_embedded&v=m5VDDJlsD6I\"; // railer with notes\n\n\t\t\t//_alwaysShowControls = true;\n\n\t\t\t//_debug=true;\n\n\t\t\t// create media element\n\t\t\tif (_isVideo) {\n\t\t\t\tif (_mediaUrl.search(/(https?|file)\\:\\/\\/.*?\\.m3u8(\\?.*)?/i) !== -1) {\n\t\t\t\t\t_mediaElement = new HLSMediaElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t\t\t_video = (_mediaElement as HLSMediaElement).video;\n\t\t\t\t\t_video.width = stage.stageWidth;\n\t\t\t\t\t_video.height = stage.stageHeight;\n\t\t\t\t\t(_video as Video).smoothing = _enableSmoothing;\n\t\t\t\t\taddChild(_video);\n\n\t\t\t\t\t_paramVideoWidth = (params['width'] != undefined) ? (parseInt(params['width'], 10)) : 0;\n\t\t\t\t\t_paramVideoHeight = (params['height'] != undefined) ? (parseInt(params['height'], 10)) : 0;\n\n\t\t\t\t} else if (_mediaUrl.indexOf(\"youtube.com\") > -1 || _mediaUrl.indexOf(\"youtu.be\") > -1) {\n\t\t\t\t\t//Security.allowDomain(\"http://www.youtube.com\");\n\n\t\t\t\t\t_mediaElement = new YouTubeElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t\t\t_video = (_mediaElement as YouTubeElement).player;\n\n\t\t\t\t\t// these are set and then used once the player is loaded\n\t\t\t\t\t(_mediaElement as YouTubeElement).initWidth = stage.stageWidth;\n\t\t\t\t\t(_mediaElement as YouTubeElement).initHeight = stage.stageHeight;\n\n\t\t\t\t} else if (_mediaUrl.indexOf(\"dailymotion.com\") > -1 || _mediaUrl.indexOf(\"dai.ly\") > -1) {\n\t\t\t\t\tSecurity.allowDomain(\"http://www.dailymotion.com\");\n\n\t\t\t\t\t_mediaElement = new DailyMotionElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t\t\t_video = (_mediaElement as DailyMotionElement).player;\n\n\t\t\t\t\t// these are set and then used once the player is loaded\n\t\t\t\t\t(_mediaElement as DailyMotionElement).initWidth = stage.stageWidth;\n\t\t\t\t\t(_mediaElement as DailyMotionElement).initHeight = stage.stageHeight;\n\n\t\t\t\t} else {\n\t\t\t\t\t_mediaElement = new VideoElement(this, _autoplay, _preload, _timerRate, _startVolume, _streamer);\n\t\t\t\t\t_video = (_mediaElement as VideoElement).video;\n\t\t\t\t\t_video.width = stage.stageWidth;\n\t\t\t\t\t_video.height = stage.stageHeight;\n\t\t\t\t\t(_video as Video).smoothing = _enableSmoothing;\n\t\t\t\t\t(_mediaElement as VideoElement).setReference(this);\n\t\t\t\t\t(_mediaElement as VideoElement).setPseudoStreaming(_enablePseudoStreaming);\n\t\t\t\t\t(_mediaElement as VideoElement).setPseudoStreamingStartParam(_pseudoStreamingStartQueryParam);\n\t\t\t\t\t//_video.scaleMode = VideoScaleMode.MAINTAIN_ASPECT_RATIO;\n\t\t\t\t\taddChild(_video);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//var player2:AudioDecoder = new com.automatastudios.audio.audiodecoder.AudioDecoder();\n\t\t\t\t_mediaElement = new AudioElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t}\n\n\t\t\tbuildControls();\n\t\t\t\t\t\t\n\t\t\tlogMessage(\"stage: \" + stage.stageWidth + \"x\" + stage.stageHeight);\n\t\t\tlogMessage(\"file: \" + _mediaUrl);\n\t\t\tlogMessage(\"autoplay: \" + _autoplay.toString());\n\t\t\tlogMessage(\"preload: \" + _preload.toString());\n\t\t\tlogMessage(\"isvideo: \" + _isVideo.toString());\n\t\t\tlogMessage(\"smoothing: \" + _enableSmoothing.toString());\n\t\t\tlogMessage(\"timerrate: \" + _timerRate.toString());\n\t\t\tlogMessage(\"displayState: \" +(stage.hasOwnProperty(\"displayState\")).toString());\n\n\t\t\t// attach javascript\n\t\t\tlogMessage(\"ExternalInterface.available: \" + ExternalInterface.available.toString());\n\t\t\tlogMessage(\"ExternalInterface.objectID: \" + ((ExternalInterface.objectID != null) ? ExternalInterface.objectID.toString() : \"null\"));\n\n\t\t\tif (_mediaUrl != \"\") {\n\t\t\t\t_mediaElement.setSrc(_mediaUrl);\n\t\t\t}\n\n\t\t\tif (_output != null) {\n\t\t\t\taddChild(_output);\n\t\t\t}\n\t\t\tif (_alwaysShowControls) {\n\t\t\t\tpositionControls();\n\t\t\t\t// Fire this once just to set the width on some dynamically sized scrub bar items;\n\t\t\t\t_scrubBar.scaleX=0;\n\t\t\t\t_scrubLoaded.scaleX=0;\n\t\t\t}\n\n\t\t\tif (ExternalInterface.available) {\n\t\t\t\ttry {\n\t\t\t\t\tif (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != \"\") {\n\t\t\t\t\t\t// add HTML media methods\n\t\t\t\t\t\tExternalInterface.addCallback(\"playMedia\", playMedia);\n\t\t\t\t\t\tExternalInterface.addCallback(\"loadMedia\", loadMedia);\n\t\t\t\t\t\tExternalInterface.addCallback(\"pauseMedia\", pauseMedia);\n\t\t\t\t\t\tExternalInterface.addCallback(\"stopMedia\", stopMedia);\n\n\t\t\t\t\t\tExternalInterface.addCallback(\"setSrc\", setSrc);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setCurrentTime\", setCurrentTime);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setVolume\", setVolume);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setMuted\", setMuted);\n\n\t\t\t\t\t\tExternalInterface.addCallback(\"setFullscreen\", setFullscreen);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setVideoSize\", setVideoSize);\n\n\t\t\t\t\t\tExternalInterface.addCallback(\"positionFullscreenButton\", positionFullscreenButton);\n\t\t\t\t\t\tExternalInterface.addCallback(\"hideFullscreenButton\", hideFullscreenButton);\n\t\t\t\t\t\tlogMessage(\"Callbacks using js function \\\"\" + _jsCallbackFunction + \"\\\" bound.\");\n\n\t\t\t\t\t\t// fire init method\n\t\t\t\t\t\tExternalInterface.call(_jsInitFunction, ExternalInterface.objectID);\n\t\t\t\t\t\tlogMessage(\"Init js function \\\"\" + _jsInitFunction + \"\\\" successfully called.\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogMessage(\"ExternalInterface has no object id:\");\n\t\t\t\t\t\tlogMessage(\"    - Init function \\\"\" + _jsInitFunction + \"\\\" will not be called.\");\n\t\t\t\t\t\tlogMessage(\"    - Callback function \\\"\" + _jsCallbackFunction + \"\\\" will not be called.\");\n\t\t\t\t\t}\n\t\t\t\t} catch (error:SecurityError) {\n\t\t\t\t\tlogMessage(\"A SecurityError occurred: \" + error.message);\n\t\t\t\t} catch (error:Error) {\n\t\t\t\t\tlogMessage(\"An Error occurred: \" + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_preload != \"none\") {\n\t\t\t\t_mediaElement.load();\n\n\t\t\t\tif (_autoplay) {\n\t\t\t\t\t_mediaElement.play();\n\t\t\t\t}\n\t\t\t} else if (_autoplay) {\n\t\t\t\t_mediaElement.load();\n\t\t\t\t_mediaElement.play();\n\t\t\t}\n\n\t\t\t// listen for resize\n\t\t\tstage.addEventListener(Event.RESIZE, resizeHandler);\n\n\t\t\t// send click events up to javascript\n\t\t\tstage.addEventListener(MouseEvent.CLICK, stageClicked);\n\n\t\t\t// resize\n\t\t\tstage.addEventListener(FullScreenEvent.FULL_SCREEN, stageFullScreenChanged);\n\n\t\t\tstage.addEventListener(KeyboardEvent.KEY_DOWN, stageKeyDown);\n\t\t}\n\n\t\tprivate function removeControls():void {\n\t\t\ttry {\n\t\t\t\t_fullscreenButton = _mediaElementDisplay.getChildByName(\"fullscreen_btn\") as SimpleButton;\n\t\t\t\t_fullscreenButton.parent.removeChild(_fullscreenButton);\n\t\t\t\t_controlBar = _mediaElementDisplay.getChildByName(\"controls_mc\") as MovieClip;\n\t\t\t\t_controlBar.parent.removeChild(_controlBar);\n\t\t\t} catch (error:Error) {\n\t\t\t\tlogMessage(\"Failed to remove controls: \" + error.message);\n\t\t\t}\n\t\t}\n\n\t\tprivate function buildControls():void {\n\t\t\t_fullscreenButton = _mediaElementDisplay.getChildByName(\"fullscreen_btn\") as SimpleButton;\n\t\t\t_fullscreenButton.visible = _isVideo;\n\t\t\t_fullscreenButton.alpha = 0;\n\t\t\t_fullscreenButton.addEventListener(MouseEvent.CLICK, fullscreenClick, false);\n\t\t\t_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width;\n\t\t\t_fullscreenButton.y = 0;\n\n\t\t\t_controlBar = _mediaElementDisplay.getChildByName(\"controls_mc\") as MovieClip;\n\t\t\t_controlBarBg = _controlBar.getChildByName(\"controls_bg_mc\") as MovieClip;\n\t\t\t_scrubTrack = _controlBar.getChildByName(\"scrubTrack\") as MovieClip;\n\t\t\t_scrubBar = _controlBar.getChildByName(\"scrubBar\") as MovieClip;\n\t\t\t_scrubOverlay = _controlBar.getChildByName(\"scrubOverlay\") as MovieClip;\n\t\t\t_scrubLoaded = _controlBar.getChildByName(\"scrubLoaded\") as MovieClip;\n\n\t\t\t_scrubOverlay.buttonMode = true;\n\t\t\t_scrubOverlay.useHandCursor = true;\n\n\t\t\tapplyColor(_scrubTrack, _scrubTrackColor);\n\t\t\tapplyColor(_scrubBar, _scrubBarColor);\n\t\t\tapplyColor(_scrubLoaded, _scrubLoadedColor);\n\n\t\t\t_fullscreenIcon = _controlBar.getChildByName(\"fullscreenIcon\") as SimpleButton;\n\t\t\t_fullscreenIcon.visible = _isVideo;\n\t\t\t_fullscreenIcon.addEventListener(MouseEvent.CLICK, fullScreenIconClick, false);\n\n\t\t\t_volumeMuted = _controlBar.getChildByName(\"muted_mc\") as SimpleButton;\n\t\t\t_volumeUnMuted = _controlBar.getChildByName(\"unmuted_mc\") as SimpleButton;\n\n\t\t\t_volumeMuted.addEventListener(MouseEvent.CLICK, toggleVolume, false);\n\t\t\t_volumeUnMuted.addEventListener(MouseEvent.CLICK, toggleVolume, false);\n\n\t\t\t_playButton = _controlBar.getChildByName(\"play_btn\") as SimpleButton;\n\t\t\t_playButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {\n\t\t\t\t_mediaElement.play();\n\t\t\t});\n\t\t\t_pauseButton = _controlBar.getChildByName(\"pause_btn\") as SimpleButton;\n\t\t\t_pauseButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {\n\t\t\t\t_mediaElement.pause();\n\t\t\t});\n\t\t\t_pauseButton.visible = false;\n\t\t\t_duration = _controlBar.getChildByName(\"duration_txt\") as TextField;\n\t\t\t_currentTime = _controlBar.getChildByName(\"currentTime_txt\") as TextField;\n\t\t\t_hoverTime = _controlBar.getChildByName(\"hoverTime\") as MovieClip;\n\t\t\t_hoverTimeText = _hoverTime.getChildByName(\"hoverTime_txt\") as TextField;\n\t\t\t_hoverTime.visible=false;\n\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t_hoverTime.x=0;\n\n\t\t\t// Add new timeline scrubber events\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.MOUSE_MOVE, scrubMove);\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.CLICK, scrubClick);\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.MOUSE_OVER, scrubOver);\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.MOUSE_OUT, scrubOut);\n\n\t\t\tif (_controlsAutoHide) {\n\t\t\t\t// Add mouse activity for show/hide of controls\n\t\t\t\tstage.addEventListener(Event.MOUSE_LEAVE, mouseActivityLeave);\n\t\t\t\tstage.addEventListener(MouseEvent.MOUSE_MOVE, mouseActivityMove);\n\t\t\t\t_inactiveTime = 2500;\n\t\t\t\t_timer = new Timer(_inactiveTime)\n\t\t\t\t_timer.addEventListener(TimerEvent.TIMER, idleTimer);\n\t\t\t\t_timer.start();\n\t\t\t}\n\n\t\t\tif (_startVolume <= 0) {\n\t\t\t\tlogMessage(\"INITIAL VOLUME: \"+_startVolume+\" MUTED\");\n\t\t\t\t_volumeMuted.visible=true;\n\t\t\t\t_volumeUnMuted.visible=false;\n\t\t\t} else {\n\t\t\t\tlogMessage(\"INITIAL VOLUME: \"+_startVolume+\" UNMUTED\");\n\t\t\t\t_volumeMuted.visible=false;\n\t\t\t\t_volumeUnMuted.visible=true;\n\t\t\t}\n\n\t\t\t_controlBar.visible = _alwaysShowControls;\n\n\t\t\tsetControlDepth();\n\t\t}\n\n\t\tpublic function setControlDepth():void {\n\t\t\t//if (!_alwaysShowControls) {\n\t\t\t//\treturn;\n\t\t\t//}\n\t\t\t// put these on top\n\t\t\tif (_output != null) {\n\t\t\t\taddChild(_output);\n\t\t\t}\n\t\t\taddChild(_controlBar);\n\t\t\taddChild(_fullscreenButton);\n\t\t}\n\n\t\tpublic function logMessage(txt:String):void {\n\t\t\tif (!_debug) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tExternalInterface.call(\"console.log\", txt);\n\t\t\t\n\t\t\tif (_output != null) {\n\t\t\t\t_output.appendText(txt + \"\\n\");\n\t\t\t\tif (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != \"\") {\n\t\t\t\t\tvar pattern:RegExp = /'/g; //'\n\t\t\t\t\tExternalInterface.call(\"setTimeout\", _jsCallbackFunction + \"('\" + ExternalInterface.objectID + \"','message','\" + txt.replace(pattern, \"\u2019\") + \"')\", 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// borrowed from jPLayer\n\t\t// https://github.com/happyworm/jPlayer/blob/e8ca190f7f972a6a421cb95f09e138720e40ed6d/actionscript/Jplayer.as#L228\n\t\tprivate function checkFlashVars(p:Object):void {\n\t\t\tvar i:Number = 0;\n\t\t\tfor (var s:String in p) {\n\t\t\t\tif (isIllegalChar(p[s], s === 'file')) {\n\t\t\t\t\tsecurityIssue = true; // Illegal char found\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i === 0 || securityIssue) {\n\t\t\t\tdirectAccess = true;\n\t\t\t}\n\t\t}\n\n\t\tprivate static function parseStr (str:String) : Object {\n\t\t\tvar hash:Object = {},\n\t\t\t\tarr1:Array, arr2:Array;\n\n\t\t\tstr = unescape(str).replace(/\\+/g, \" \");\n\n\t\t\tarr1 = str.split('&');\n\t\t\tif (!arr1.length) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tfor (var i:uint = 0, length:uint = arr1.length; i < length; i++) {\n\t\t\t\tarr2 = arr1[i].split('=');\n\t\t\t\tif (!arr2.length) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\thash[trim(arr2[0])] = trim(arr2[1]);\n\t\t\t}\n\t\t\treturn hash;\n\t\t}\n\n\n\t\tprivate static function trim(str:String) : String {\n\t\t\tif (!str) {\n\t\t\t\treturn str;\n\t\t\t}\n\n\t\t\treturn str.toString().replace(/^\\s*/, '').replace(/\\s*$/, '');\n\t\t}\n\n\t\tprivate function isIllegalChar(s:String, isUrl:Boolean):Boolean {\n\t\t\tvar illegals:String = \"' \\\" ( ) { } * + \\\\ < >\";\n\t\t\tif (isUrl) {\n\t\t\t\tillegals = \"\\\" { } \\\\ < >\";\n\t\t\t}\n\t\t\tif (Boolean(s)) { // Otherwise exception if parameter null.\n\t\t\t\tfor each (var illegal:String in illegals.split(' ')) {\n\t\t\t\t\tif (s.indexOf(illegal) >= 0) {\n\t\t\t\t\t\treturn true; // Illegal char found\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// START: Controls and events\n\t\tprivate function mouseActivityMove(event:MouseEvent):void {\n\n\t\t\t// if mouse is in the video area\n\t\t\tif (_controlsAutoHide && (mouseX>=0 && mouseX<=stage.stageWidth) && (mouseY>=0 && mouseY<=stage.stageHeight)) {\n\t\t\t\t// This could be move to a nice fade at some point...\n\t\t\t\t_controlBar.visible = (_alwaysShowControls || _isFullScreen);\n\t\t\t\t_isMouseActive = true;\n\t\t\t\t_idleTime = 0;\n\t\t\t\t_timer.reset();\n\t\t\t\t_timer.start()\n\t\t\t}\n\t\t}\n\n\t\tprivate function mouseActivityLeave(event:Event):void {\n\t\t\tif (_controlsAutoHide) {\n\t\t\t\t_isOverStage = false;\n\t\t\t\t// This could be move to a nice fade at some point...\n\t\t\t\t_controlBar.visible = false;\n\t\t\t\t_isMouseActive = false;\n\t\t\t\t_idleTime = 0;\n\t\t\t\t_timer.reset();\n\t\t\t\t_timer.stop();\n\t\t\t}\n\t\t}\n\n\t\tprivate function idleTimer(event:TimerEvent):void    {\n\t\t\tif (_controlsAutoHide) {\n\t\t\t\t// This could be move to a nice fade at some point...\n\t\t\t\t_controlBar.visible = false;\n\t\t\t\t_isMouseActive = false;\n\t\t\t\t_idleTime += _inactiveTime;\n\t\t\t\t_idleTime = 0;\n\t\t\t\t_timer.reset();\n\t\t\t\t_timer.stop();\n\t\t\t}\n\t\t}\n\n\t\tprivate function scrubMove(event:MouseEvent):void {\n\t\t\tif (_hoverTime.visible) {\n\t\t\t\tvar seekBarPosition:Number =  ((event.localX / _scrubTrack.width) *_mediaElement.duration())*_scrubTrack.scaleX;\n\t\t\t\tvar hoverPos:Number = (seekBarPosition / _mediaElement.duration()) *_scrubTrack.scaleX;\n\n\t\t\t\tif (_isFullScreen) {\n\t\t\t\t\t_hoverTime.x=event.target.parent.mouseX;\n\t\t\t\t} else {\n\t\t\t\t\t_hoverTime.x=mouseX;\n\t\t\t\t}\n\t\t\t\t_hoverTime.y = _scrubBar.y - (_hoverTime.height/2);\n\t\t\t\t_hoverTimeText.text = secondsToTimeCode(seekBarPosition);\n\t\t\t}\n\t\t}\n\n\t\tprivate function scrubOver(event:MouseEvent):void {\n\t\t\t_hoverTime.y = _scrubBar.y-(_hoverTime.height/2)+1;\n\t\t\t_hoverTime.visible = true;\n\t\t\t//logMessage(event);\n\t\t}\n\n\t\tprivate function scrubOut(event:MouseEvent):void {\n\t\t\t_hoverTime.y = _scrubBar.y+(_hoverTime.height/2)+1;\n\t\t\t_hoverTime.visible = false;\n\t\t\t//_hoverTime.x=0;\n\t\t\t//logMessage(event);\n\t\t}\n\n\t\tprivate function scrubClick(event:MouseEvent):void {\n\t\t\t//logMessage(event);\n\t\t\tvar seekBarPosition:Number = ((event.localX / _scrubTrack.width) * _mediaElement.duration()) * _scrubTrack.scaleX;\n\n\t\t\tvar canSeekToPosition:Boolean = isNaN(_mediaElement.seekLimit()) ||  (seekBarPosition <= _mediaElement.duration() && seekBarPosition >= 0);\n\n\t\t\tif (canSeekToPosition) {\n\t\t\t\t_mediaElement.setCurrentTime(seekBarPosition);\n\t\t\t}\n\t\t}\n\n\t\tpublic function toggleVolume(event:MouseEvent):void {\n\t\t\t//logMessage(event.currentTarget.name);\n\t\t\tswitch(event.currentTarget.name) {\n\t\t\t\tcase \"muted_mc\":\n\t\t\t\t\tsetMuted(false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"unmuted_mc\":\n\t\t\t\t\tsetMuted(true);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tprivate function toggleVolumeIcons(volume:Number):void {\n\t\t\tif (volume <= 0) {\n\t\t\t\t_volumeMuted.visible = true;\n\t\t\t\t_volumeUnMuted.visible = false;\n\t\t\t} else {\n\t\t\t\t_volumeMuted.visible = false;\n\t\t\t\t_volumeUnMuted.visible = true;\n\t\t\t}\n\t\t}\n\n\t\tprivate function positionControls(forced:Boolean=false):void {\n\t\t\t//if (!_alwaysShowControls) {\n\t\t\t//\treturn;\n\t\t\t//}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvar contWidth:Number;\n\t\t\tvar contHeight:Number;\n\t\t\tif (_isFullScreen) {\n\t\t\t\tcontWidth = stage.fullScreenWidth;\n\t\t\t\tcontHeight = stage.fullScreenHeight;\n\t\t\t} else {\n\t\t\t\tcontWidth = stage.stageWidth;\n\t\t\t\tcontHeight = stage.stageHeight;\n\t\t\t}\n\n\t\t\tif (_controlsStyle.toUpperCase() == \"FLOATING\" && _isFullScreen) {\n\t\t\t\ttrace(\"CONTROLS: floating\");\n\t\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t\t_hoverTime.x=0;\n\t\t\t\t_controlBarBg.width = 300;\n\t\t\t\t_controlBarBg.height = 93;\n\t\t\t\t//_controlBarBg.x = (contWidth/2) - (_controlBarBg.width/2);\n\t\t\t\t//_controlBarBg.y  = contHeight - 300;\n\n\t\t\t\t_pauseButton.scaleX = _playButton.scaleX=3.5;\n\t\t\t\t_pauseButton.scaleY= _playButton.scaleY=3.5;\n\t\t\t\t// center the play button and make it big and at the top\n\t\t\t\t_pauseButton.x = _playButton.x = (_controlBarBg.width/2)-(_playButton.width/2)+7;\n\t\t\t\t_pauseButton.y = _playButton.y = _controlBarBg.height-_playButton.height-(14)\n\n\t\t\t\t_controlBar.x = (contWidth/2) -150;\n\t\t\t\t_controlBar.y = contHeight - _controlBar.height-100;\n\n\t\t\t\t// reposition the time and duration items\n\n\t\t\t\t_duration.x = _controlBarBg.width - _duration.width - 10;\n\t\t\t\t_duration.y = _controlBarBg.height - _duration.height -7;\n\t\t\t\t//_currentTime.x = _controlBarBg.width - _duration.width - 10 - _currentTime.width - 10;\n\t\t\t\t_currentTime.x = 5\n\t\t\t\t_currentTime.y= _controlBarBg.height - _currentTime.height-7;\n\n\t\t\t\t_fullscreenIcon.x = _controlBarBg.width - _fullscreenIcon.width - 7;\n\t\t\t\t_fullscreenIcon.y = 7;\n\n\t\t\t\t_volumeMuted.x = _volumeUnMuted.x = 7;\n\t\t\t\t_volumeMuted.y = _volumeUnMuted.y = 7;\n\n\t\t\t\t_scrubLoaded.x = _scrubBar.x = _scrubOverlay.x = _scrubTrack.x =_currentTime.x+_currentTime.width+7;\n\t\t\t\t_scrubLoaded.y = _scrubBar.y = _scrubOverlay.y = _scrubTrack.y=_controlBarBg.height-_scrubTrack.height-10;\n\n\t\t\t\t_scrubBar.width =  _scrubOverlay.width = _scrubTrack.width = (_duration.x-_duration.width-14);\n\n\t\t\t} else {\n\t\t\t\ttrace(\"CONTROLS: normal, original\");\n\t\t\t\t/*\n\t\t\t\t// Original style bottom display\n\t\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t\t_hoverTime.x=0;\n\t\t\t\t_controlBarBg.width = contWidth;\n\t\t\t\t_controlBar.y = contHeight - _controlBar.height;\n\t\t\t\t_duration.x = contWidth - _duration.width - 10;\n\t\t\t\t//_currentTime.x = contWidth - _duration.width - 10 - _currentTime.width - 10;\n\t\t\t\t_currentTime.x = _playButton.x+_playButton.width;\n\t\t\t\t_scrubTrack.width = (_duration.x-_duration.width-10)-_duration.width+10;\n\t\t\t\t_scrubOverlay.width = _scrubTrack.width;\n\t\t\t\t_scrubBar.width = _scrubTrack.width;\n\t\t\t\t*/\n\n\t\t\t\t// FLOATING MODE BOTTOM DISPLAY - similar to normal\n\t\t\t\ttrace(\"THAT WAY!\");\n\t\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t\t_hoverTime.x=0;\n\t\t\t\t_controlBarBg.width = contWidth;\n\t\t\t\t_controlBarBg.height = 30;\n\t\t\t\t_controlBarBg.y=0;\n\t\t\t\t_controlBarBg.x=0;\n\t\t\t\t// _controlBarBg.x = 0;\n\t\t\t\t// _controlBarBg.y  = contHeight - _controlBar.height;\n\n\t\t\t\t_pauseButton.scaleX = _playButton.scaleX=1;\n\t\t\t\t_pauseButton.scaleY = _playButton.scaleY=1;\n\n\t\t\t\t_pauseButton.x = _playButton.x = 7;\n\t\t\t\t_pauseButton.y = _playButton.y = _controlBarBg.height-_playButton.height-2;\n\n\n\t\t\t\t//_currentTime.x = contWidth - _duration.width - 10 - _currentTime.width - 10;\n\t\t\t\t_currentTime.x = _playButton.x+_playButton.width;\n\n\t\t\t\t_fullscreenIcon.x = _controlBarBg.width - _fullscreenIcon.width - 7;\n\t\t\t\t_fullscreenIcon.y = 8;\n\n\t\t\t\t_volumeMuted.x = _volumeUnMuted.x = (_isVideo ? _fullscreenIcon.x : _controlBarBg.width) - _volumeMuted.width - 10;\n\t\t\t\t_volumeMuted.y = _volumeUnMuted.y = 10;\n\n\t\t\t\t_duration.x = _volumeMuted.x - _volumeMuted.width - _duration.width + 5;\n\t\t\t\t_duration.y = _currentTime.y = _controlBarBg.height - _currentTime.height - 7;\n\n\t\t\t\t_scrubLoaded.x = _scrubBar.x = _scrubOverlay.x = _scrubTrack.x = _currentTime.x + _currentTime.width + 10;\n\t\t\t\t_scrubLoaded.y = _scrubBar.y = _scrubOverlay.y = _scrubTrack.y = _controlBarBg.height - _scrubTrack.height - 9;\n\n\t\t\t\t_scrubBar.width =  _scrubOverlay.width = _scrubTrack.width =  (_duration.x-_duration.width-10)-_duration.width+5;\n\t\t\t\t_controlBar.x = 0;\n\t\t\t\t_controlBar.y = contHeight - _controlBar.height;\n\t\t\t}\n\t\t}\n\t\t// END: Controls\n\n\t\tpublic function stageClicked(e:MouseEvent):void {\n\t\t\t//logMessage(\"click: \" + e.stageX.toString() +\",\"+e.stageY.toString() + \"\\n\");\n\t\t\tif (e.target == stage) {\n\t\t\t\tsendEvent(\"click\", \"\");\n\t\t\t}\n\t\t}\n\n\t\tpublic function stageKeyDown(e:KeyboardEvent):void {\n\t\t\tsendEvent(HtmlMediaEvent.KEYDOWN, \"keyCode:'\" + e.keyCode + \"'\");\n\t\t}\n\n\t\tpublic function resizeHandler(e:Event):void {\n\t\t\trepositionVideo();\n\t\t}\n\n\t\t// START: Fullscreen\n\t\tprivate function enterFullscreen():void {\n\t\t\tlogMessage(\"enterFullscreen()\");\n\n\t\t\tvar screenRectangle:Rectangle = new Rectangle(0, 0, stage.fullScreenWidth, stage.fullScreenHeight);\n\t\t\tstage.fullScreenSourceRect = screenRectangle;\n\n\t\t\tstage.displayState = StageDisplayState.FULL_SCREEN;\n\n\t\t\trepositionVideo();\n\n\t\t\t//if (_alwaysShowControls) {\n\t\t\t\t_controlBar.visible = true;\n\t\t\t\tupdateControls(HtmlMediaEvent.FULLSCREENCHANGE);\t\t\t\t\n\t\t\t//}\n\n\t\t\t_isFullScreen = true;\n\t\t}\n\n\t\tprivate function exitFullscreen():void {\n\t\t\tstage.displayState = StageDisplayState.NORMAL;\n\n\t\t\trepositionVideo();\n\n\t\t\tif (!_alwaysShowControls) {\n\t\t\t\t_controlBar.visible = false;\n\t\t\t}\n\n\t\t\t_isFullScreen = false;\n\t\t}\n\n\t\tpublic function setFullscreen(gofullscreen:Boolean):void {\n\n\t\t\tlogMessage(\"setFullscreen: \" + gofullscreen.toString());\n\n\t\t\ttry {\n\t\t\t\tif (gofullscreen) {\n\t\t\t\t\tenterFullscreen();\n\t\t\t\t} else {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t}\n\t\t\t} catch (error:Error) {\n\t\t\t\t// show the button when the security error doesn't let it work\n\t\t\t\tif (_fullscreenButton != null) {\n\t\t\t\t\t_fullscreenButton.alpha = 1;\n\t\t\t\t}\n\n\t\t\t\t_isFullScreen = false;\n\n\t\t\t\tlogMessage(\"error setting fullscreen: \" + error.message.toString());\n\t\t\t}\n\t\t}\n\n\t\t// control bar button/icon\n\t\tpublic function fullScreenIconClick(e:MouseEvent):void {\n\t\t\ttry {\n\t\t\t\t_controlBar.visible = true;\n\t\t\t\tsetFullscreen(!_isFullScreen);\n\t\t\t\trepositionVideo();\n\t\t\t} catch (error:Error) {\n\t\t\t}\n\t\t}\n\n\t\t// special floating fullscreen icon\n\t\tpublic function fullscreenClick(e:MouseEvent):void {\n\t\t\thideFullscreenButton();\n\n\t\t\ttry {\n\t\t\t\t//if (_alwaysShowControls) {\n\t\t\t\t\t_controlBar.visible = true;\n\t\t\t\t//}\n\t\t\t\tsetFullscreen(true);\n\t\t\t\trepositionVideo();\n\t\t\t\tpositionControls();\n\t\t\t} catch (error:Error) {\n\t\t\t}\n\t\t}\n\n\n\t\tpublic function stageFullScreenChanged(e:FullScreenEvent):void {\n\t\t\tlogMessage(\"fullscreen event: \" + e.fullScreen.toString());\n\n\t\t\t_isFullScreen = e.fullScreen;\n\t\t\t\n\t\t\tif (!_isFullScreen) {\n\t\t\t\t_controlBar.visible = _alwaysShowControls;\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\trepositionVideo();\t\t\t\n\t\t\thideFullscreenButton();\n\n\t\t\tsendEvent(HtmlMediaEvent.FULLSCREENCHANGE, \"isFullScreen:\" + e.fullScreen );\n\n\n\t\t}\n\t\t// END: Fullscreen\n\n\t\t// START: external interface\n\t\tpublic function playMedia():void {\n\t\t\tlogMessage(\"play\");\n\t\t\t_mediaElement.play();\n\t\t}\n\n\t\tpublic function loadMedia():void {\n\t\t\tlogMessage(\"load\");\n\t\t\t_mediaElement.load();\n\t\t}\n\n\t\tpublic function pauseMedia():void {\n\t\t\tlogMessage(\"pause\");\n\t\t\t_mediaElement.pause();\n\t\t}\n\n\t\tpublic function setSrc(url:String):void {\n\t\t\tlogMessage(\"setSrc: \" + url);\n\t\t\t_mediaElement.setSrc(url);\n\t\t}\n\n\t\tpublic function stopMedia():void {\n\t\t\tlogMessage(\"stop\");\n\t\t\t_mediaElement.stop();\n\t\t}\n\n\t\tpublic function setCurrentTime(time:Number):void {\n\t\t\tlogMessage(\"seek: \" + time.toString());\n\t\t\t_mediaElement.setCurrentTime(time);\n\t\t}\n\n\t\tpublic function setVolume(volume:Number):void {\n\t\t\tlogMessage(\"volume: \" + volume.toString());\n\t\t\t_mediaElement.setVolume(volume);\n\t\t\ttoggleVolumeIcons(volume);\n\t\t}\n\n\t\tpublic function setMuted(muted:Boolean):void {\n\t\t\tlogMessage(\"muted: \" + muted.toString());\n\t\t\t_mediaElement.setMuted(muted);\n\t\t\ttoggleVolumeIcons(_mediaElement.getVolume());\n\t\t}\n\n\t\tpublic function setVideoSize(width:Number, height:Number):void {\n\t\t\tlogMessage(\"setVideoSize: \" + width.toString() + \",\" + height.toString());\n\n\t\t\tif (_video != null) {\n\t\t\t\trepositionVideo();\n\t\t\t\tpositionControls();\n\t\t\t\tlogMessage(\"result: \" + _video.width.toString() + \",\" + _video.height.toString());\n\t\t\t}\n\t\t}\n\n\t\tpublic function positionFullscreenButton(x:Number, y:Number, visibleAndAbove:Boolean ):void {\n\t\t\tlogMessage(\"position FS: \" + x.toString() + \"x\" + y.toString());\n\t\t\t//if (!_fullscreenButton)\n\t\t\t//\treturn;\n\n\t\t\t// position just above\n\t\t\tif (visibleAndAbove) {\n\t\t\t\t_fullscreenButton.x = x+1;\n\t\t\t\t_fullscreenButton.y = y - _fullscreenButton.height+1;\n\t\t\t} else {\n\t\t\t\t_fullscreenButton.x = x;\n\t\t\t\t_fullscreenButton.y = y;\n\t\t\t}\n\n\t\t\t// check for oversizing\n\t\t\tif ((_fullscreenButton.x + _fullscreenButton.width) > stage.stageWidth)\n\t\t\t\t_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width;\n\n\t\t\t// show it!\n\t\t\tif (visibleAndAbove) {\n\t\t\t\t_fullscreenButton.alpha = 1;\n\t\t\t}\n\t\t}\n\n\t\tpublic function hideFullscreenButton():void {\n\t\t\tif (_fullscreenButton != null) {\n\t\t\t\t_fullscreenButton.alpha = 0;\n\t\t\t}\n\t\t}\n\t\t// END: external interface\n\n\t\tprivate function repositionVideo():void {\n\t\t\tvar fill:Boolean = _fill;\n\t\t\tvar contWidth:Number;\n\t\t\tvar contHeight:Number;\n\t\t\tif (_isFullScreen) {\n\t\t\t\tcontWidth = stage.fullScreenWidth;\n\t\t\t\tcontHeight = stage.fullScreenHeight;\n\t\t\t} else {\n\t\t\t\tcontWidth = stage.stageWidth;\n\t\t\t\tcontHeight = stage.stageHeight;\n\t\t\t}\n\n\t\t\tlogMessage(\"Positioning video (\"+stage.displayState+\"). Container size: \"+contWidth+\"x\"+contHeight+\".\");\n\n\t\t\tif (_mediaElement is VideoElement || _mediaElement is HLSMediaElement) {\n\t\t\t\tif (_isFullScreen && fill) {\n\t\t\t\t\tfill = false;\n\t\t\t\t}\n\t\t\t\tif (isNaN(_nativeVideoWidth) || isNaN(_nativeVideoHeight) || _nativeVideoWidth <= 0 || _nativeVideoHeight <= 0) {\n\t\t\t\t\tlogMessage(\"Positionning: video's native dimension not found, using stage size.\");\n\t\t\t\t\tfill = true;\n\t\t\t\t}\n\t\t\t\t// calculate ratios\n\t\t\t\tvar stageRatio:Number, nativeRatio:Number;\n\t\t\t\t_video.x = 0;\n\t\t\t\t_video.y = 0;\n\t\t\t\tif (fill) {\n\t\t\t\t\t_mediaElement.setSize(contWidth, contHeight);\n\t\t\t\t} else {\n\t\t\t\t\tstageRatio = contWidth/contHeight;\n\t\t\t\t\tnativeRatio = _nativeVideoWidth/_nativeVideoHeight;\n\t\t\t\t\t// adjust size and position\n\t\t\t\t\tif (nativeRatio > stageRatio) {\n\t\t\t\t\t\t_mediaElement.setSize(contWidth, _nativeVideoHeight * contWidth / _nativeVideoWidth);\n\t\t\t\t\t\t_video.y = contHeight/2 - _video.height/2;\n\t\t\t\t\t} else if (stageRatio > nativeRatio) {\n\t\t\t\t\t\t_mediaElement.setSize(_nativeVideoWidth * contHeight / _nativeVideoHeight, contHeight);\n\t\t\t\t\t\t_video.x = contWidth/2 - _video.width/2;\n\t\t\t\t\t} else if (stageRatio == nativeRatio) {\n\t\t\t\t\t\t_mediaElement.setSize(contWidth, contHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (_mediaElement is YouTubeElement || _mediaElement is DailyMotionElement) {\n\t\t\t\t_mediaElement.setSize(contWidth, contHeight);\n\t\t\t}\n\t\t\tpositionControls();\n\t\t}\n\n\t\t// SEND events to JavaScript\n\t\tpublic function sendEvent(eventName:String, eventValues:String):void {\n\n\t\t\t// special video event\n\t\t\tif (eventName == HtmlMediaEvent.LOADEDMETADATA && _isVideo) {\n\n\t\t\t\tlogMessage(\"Metadata received:\");\n\n\t\t\t\ttry {\n\t\t\t\t\tif (_mediaElement is VideoElement) {\n\t\t\t\t\t\t_nativeVideoWidth = (_mediaElement as VideoElement).videoWidth;\n\t\t\t\t\t\t_nativeVideoHeight = (_mediaElement as VideoElement).videoHeight;\n\t\t\t\t\t} else if (_mediaElement is HLSMediaElement) {\n\t\t\t\t\t\t_nativeVideoWidth = (_mediaElement as HLSMediaElement).videoWidth;\n\t\t\t\t\t\t_nativeVideoHeight = (_mediaElement as HLSMediaElement).videoHeight;\n\n\t\t\t\t\t\t// Can not get video dimensions from HLS stream, use parameters in FlashVars instead.\n\t\t\t\t\t\tif (isNaN(_nativeVideoWidth) || isNaN(_nativeVideoHeight) || _nativeVideoWidth <= 0 || _nativeVideoHeight <= 0) {\n\t\t\t\t\t\t\t_nativeVideoWidth = _paramVideoWidth;\n\t\t\t\t\t\t\t_nativeVideoHeight = _paramVideoHeight;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e:Error) {\n\t\t\t\t\tlogMessage(\"    No resolution: \" + e.toString());\n\t\t\t\t}\n\n\t\t\t\tlogMessage(\"    Resolution: \" + _nativeVideoWidth.toString() + \"x\" + _nativeVideoHeight.toString());\n\n\t\t\t\tif (_isFullScreen) {\n\t\t\t\t\tsetVideoSize(_nativeVideoWidth, _nativeVideoHeight);\n\t\t\t\t}\n\t\t\t\trepositionVideo();\n\t\t\t}\n\n\t\t\tupdateControls(eventName);\n\n\t\t\t//trace((_mediaElement.duration()*1).toString() + \" / \" + (_mediaElement.currentTime()*1).toString());\n\t\t\t//trace(\"CurrentProgress:\"+_mediaElement.currentProgress());\n\n\t\t\tif (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != \"\") {\n\t\t\t\t//logMessage(\"event:\" + eventName + \" : \" + eventValues);\n\t\t\t\t//trace(\"event\", eventName, eventValues);\n\n\t\t\t\tif (eventValues == null)\n\t\t\t\t\teventValues == \"\";\n\n\t\t\t\tif (_isVideo) {\n\t\t\t\t\teventValues += (eventValues != \"\" ? \",\" : \"\") + \"isFullScreen:\" + _isFullScreen;\n\t\t\t\t}\n\n\t\t\t\teventValues = \"{\" + eventValues + \"}\";\n\n\t\t\t\t// use set timeout for performance reasons\n\t\t\t\tExternalInterface.call(\"setTimeout\", _jsCallbackFunction + \"('\" + ExternalInterface.objectID + \"','\" + eventName + \"',\" + eventValues + \")\", 0);\n\t\t\t}\n\t\t}\n\n\n\t\tprivate function updateControls(eventName:String):void {\n\t\t\t//if (!_controls.visible) {\n\t\t\t//\treturn;\n\t\t\t//}\n\n\t\t\tlogMessage(\"updating controls\");\n\t\t\ttry {\n\t\t\t\tswitch (eventName) {\n\t\t\t\t\tcase \"pause\":\n\t\t\t\t\tcase \"paused\":\n\t\t\t\t\tcase \"ended\":\n\t\t\t\t\t\t_playButton.visible = true;\n\t\t\t\t\t\t_pauseButton.visible = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"play\":\n\t\t\t\t\tcase \"playing\":\n\t\t\t\t\t\t_playButton.visible = false;\n\t\t\t\t\t\t_pauseButton.visible = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (eventName == HtmlMediaEvent.TIMEUPDATE ||\n\t\t\t\t\teventName == HtmlMediaEvent.PROGRESS ||\n\t\t\t\t\teventName == HtmlMediaEvent.FULLSCREENCHANGE) {\n\n\t\t\t\t\t//_duration.text = (_mediaElement.duration()*1).toString();\n\t\t\t\t\t_duration.text =  secondsToTimeCode(_mediaElement.duration());\n\t\t\t\t\t//_currentTime.text = (_mediaElement.currentTime()*1).toString();\n\t\t\t\t\t_currentTime.text =  secondsToTimeCode(_mediaElement.currentTime());\n\n\t\t\t\t\tvar pct:Number =  (_mediaElement.currentTime() / _mediaElement.duration()) *_scrubTrack.scaleX;\n\n\t\t\t\t\t_scrubBar.scaleX = pct;\n\t\t\t\t\t_scrubLoaded.scaleX = (_mediaElement.currentProgress()*_scrubTrack.scaleX)/100;\n\t\t\t\t}\n\t\t\t} catch (error:Error) {\n\t\t\t\tlogMessage(\"Failed to update controls: \" + error.toString());\n\t\t\t}\n\t\t}\n\n\t\t// START: utility\n\t\tprivate function secondsToTimeCode(seconds:Number):String {\n\t\t\tvar timeCode:String = \"\";\n\t\t\tseconds = Math.round(seconds);\n\t\t\tvar minutes:Number = Math.floor(seconds / 60);\n\t\t\ttimeCode = (minutes >= 10) ? minutes.toString() : \"0\" + minutes.toString();\n\t\t\tseconds = Math.floor(seconds % 60);\n\t\t\ttimeCode += \":\" + ((seconds >= 10) ? seconds.toString() : \"0\" + seconds.toString());\n\t\t\treturn timeCode; //minutes.toString() + \":\" + seconds.toString();\n\t\t}\n\n\t\tprivate function applyColor(item:Object, color:String):void {\n\t\t\tvar myColor:ColorTransform = new ColorTransform(0, 0, 0, 1);\n\t\t\tvar components:Array = color.split(\",\");\n\t\t\tswitch (components.length) {\n\t\t\t\tcase 4:\n\t\t\t\t\tmyColor.redOffset = components[0];\n\t\t\t\t\tmyColor.greenOffset = components[1];\n\t\t\t\t\tmyColor.blueOffset = components[2];\n\t\t\t\t\tmyColor.alphaMultiplier = components[3];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tmyColor.redOffset = components[0];\n\t\t\t\t\tmyColor.greenOffset = components[1];\n\t\t\t\t\tmyColor.blueOffset = components[2];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmyColor.color = Number(color);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//trace(\"Length: \"+components.length+\" String: \"+color+\" transform: \"+myColor.toString());\n\t\t\titem.transform.colorTransform = myColor;\n\t\t}\n\t\t// END: utility\n\t}\n}\n", "// Handles calls from Flash/Silverlight and reports them as native <video/audio> events and properties\nmejs.MediaPluginBridge = {\n\n\tpluginMediaElements:{},\n\thtmlMediaElements:{},\n\n\tregisterPluginElement: function (id, pluginMediaElement, htmlMediaElement) {\n\t\tthis.pluginMediaElements[id] = pluginMediaElement;\n\t\tthis.htmlMediaElements[id] = htmlMediaElement;\n\t},\n\n\tunregisterPluginElement: function (id) {\n\t\tdelete this.pluginMediaElements[id];\n\t\tdelete this.htmlMediaElements[id];\n\t},\n\n\t// when Flash/Silverlight is ready, it calls out to this method\n\tinitPlugin: function (id) {\n\n\t\tvar pluginMediaElement = this.pluginMediaElements[id],\n\t\t\thtmlMediaElement = this.htmlMediaElements[id];\n\n\t\tif (pluginMediaElement) {\n\t\t\t// find the javascript bridge\n\t\t\tswitch (pluginMediaElement.pluginType) {\n\t\t\t\tcase \"flash\":\n\t\t\t\t\tpluginMediaElement.pluginElement = pluginMediaElement.pluginApi = document.getElementById(id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"silverlight\":\n\t\t\t\t\tpluginMediaElement.pluginElement = document.getElementById(pluginMediaElement.id);\n\t\t\t\t\tpluginMediaElement.pluginApi = pluginMediaElement.pluginElement.Content.MediaElementJS;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t\tif (pluginMediaElement.pluginApi != null && pluginMediaElement.success) {\n\t\t\t\tpluginMediaElement.success(pluginMediaElement, htmlMediaElement);\n\t\t\t}\n\t\t}\n\t},\n\n\t// receives events from Flash/Silverlight and sends them out as HTML5 media events\n\t// http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html\n\tfireEvent: function (id, eventName, values) {\n\n\t\tvar\n\t\t\te,\n\t\t\ti,\n\t\t\tbufferedTime,\n\t\t\tpluginMediaElement = this.pluginMediaElements[id];\n\n\t\tif(!pluginMediaElement){\n            return;\n        }\n        \n\t\t// fake event object to mimic real HTML media event.\n\t\te = {\n\t\t\ttype: eventName,\n\t\t\ttarget: pluginMediaElement\n\t\t};\n\n\t\t// attach all values to element and event object\n\t\tfor (i in values) {\n\t\t\tpluginMediaElement[i] = values[i];\n\t\t\te[i] = values[i];\n\t\t}\n\n\t\t// fake the newer W3C buffered TimeRange (loaded and total have been removed)\n\t\tbufferedTime = values.bufferedTime || 0;\n\n\t\te.target.buffered = e.buffered = {\n\t\t\tstart: function(index) {\n\t\t\t\treturn 0;\n\t\t\t},\n\t\t\tend: function (index) {\n\t\t\t\treturn bufferedTime;\n\t\t\t},\n\t\t\tlength: 1\n\t\t};\n\n\t\tpluginMediaElement.dispatchEvent(e);\n\t}\n};\n\n/*\nDefault options\n*/\nmejs.MediaElementDefaults = {\n\t// allows testing on HTML5, flash, silverlight\n\t// auto: attempts to detect what the browser can do\n\t// auto_plugin: prefer plugins and then attempt native HTML5\n\t// native: forces HTML5 playback\n\t// shim: disallows HTML5, will attempt either Flash or Silverlight\n\t// none: forces fallback view\n\tmode: 'auto',\n\t// remove or reorder to change plugin priority and availability\n\tplugins: ['flash','silverlight','youtube','vimeo'],\n\t// shows debug errors on screen\n\tenablePluginDebug: false,\n\t// use plugin for browsers that have trouble with Basic Authentication on HTTPS sites\n\thttpsBasicAuthSite: false,\n\t// overrides the type specified, useful for dynamic instantiation\n\ttype: '',\n\t// path to Flash and Silverlight plugins\n\tpluginPath: mejs.Utility.getScriptPath(['mediaelement.js','mediaelement.min.js','mediaelement-and-player.js','mediaelement-and-player.min.js']),\n\t// name of flash file\n\tflashName: 'flashmediaelement.swf',\n\t// streamer for RTMP streaming\n\tflashStreamer: '',\n\t// set to 'always' for CDN version\n\tflashScriptAccess: 'sameDomain',\t\n\t// turns on the smoothing filter in Flash\n\tenablePluginSmoothing: false,\n\t// enabled pseudo-streaming (seek) on .mp4 files\n\tenablePseudoStreaming: false,\n\t// start query parameter sent to server for pseudo-streaming\n\tpseudoStreamingStartQueryParam: 'start',\n\t// name of silverlight file\n\tsilverlightName: 'silverlightmediaelement.xap',\n\t// default if the <video width> is not specified\n\tdefaultVideoWidth: 480,\n\t// default if the <video height> is not specified\n\tdefaultVideoHeight: 270,\n\t// overrides <video width>\n\tpluginWidth: -1,\n\t// overrides <video height>\n\tpluginHeight: -1,\n\t// additional plugin variables in 'key=value' form\n\tpluginVars: [],\t\n\t// rate in milliseconds for Flash and Silverlight to fire the timeupdate event\n\t// larger number is less accurate, but less strain on plugin->JavaScript bridge\n\ttimerRate: 250,\n\t// initial volume for player\n\tstartVolume: 0.8,\n\tsuccess: function () { },\n\terror: function () { }\n};\n\n/*\nDetermines if a browser supports the <video> or <audio> element\nand returns either the native element or a Flash/Silverlight version that\nmimics HTML5 MediaElement\n*/\nmejs.MediaElement = function (el, o) {\n\treturn mejs.HtmlMediaElementShim.create(el,o);\n};\n\nmejs.HtmlMediaElementShim = {\n\n\tcreate: function(el, o) {\n\t\tvar\n\t\t\toptions = {},\n\t\t\thtmlMediaElement = (typeof(el) == 'string') ? document.getElementById(el) : el,\n\t\t\ttagName = htmlMediaElement.tagName.toLowerCase(),\n\t\t\tisMediaTag = (tagName === 'audio' || tagName === 'video'),\n\t\t\tsrc = (isMediaTag) ? htmlMediaElement.getAttribute('src') : htmlMediaElement.getAttribute('href'),\n\t\t\tposter = htmlMediaElement.getAttribute('poster'),\n\t\t\tautoplay =  htmlMediaElement.getAttribute('autoplay'),\n\t\t\tpreload =  htmlMediaElement.getAttribute('preload'),\n\t\t\tcontrols =  htmlMediaElement.getAttribute('controls'),\n\t\t\tplayback,\n\t\t\tprop;\n\n\t\t// extend options\n\t\tfor (prop in mejs.MediaElementDefaults) {\n\t\t\toptions[prop] = mejs.MediaElementDefaults[prop];\n\t\t}\n\t\tfor (prop in o) {\n\t\t\toptions[prop] = o[prop];\n\t\t}\t\t\n\t\t\n\n\t\t// clean up attributes\n\t\tsrc = \t\t(typeof src == 'undefined' \t|| src === null || src == '') ? null : src;\t\t\n\t\tposter =\t(typeof poster == 'undefined' \t|| poster === null) ? '' : poster;\n\t\tpreload = \t(typeof preload == 'undefined' \t|| preload === null || preload === 'false') ? 'none' : preload;\n\t\tautoplay = \t!(typeof autoplay == 'undefined' || autoplay === null || autoplay === 'false');\n\t\tcontrols = \t!(typeof controls == 'undefined' || controls === null || controls === 'false');\n\n\t\t// test for HTML5 and plugin capabilities\n\t\tplayback = this.determinePlayback(htmlMediaElement, options, mejs.MediaFeatures.supportsMediaTag, isMediaTag, src);\n\t\tplayback.url = (playback.url !== null) ? mejs.Utility.absolutizeUrl(playback.url) : '';\n        playback.scheme = mejs.Utility.determineScheme(playback.url);\n\n\t\tif (playback.method == 'native') {\n\t\t\t// second fix for android\n\t\t\tif (mejs.MediaFeatures.isBustedAndroid) {\n\t\t\t\thtmlMediaElement.src = playback.url;\n\t\t\t\thtmlMediaElement.addEventListener('click', function() {\n\t\t\t\t\thtmlMediaElement.play();\n\t\t\t\t}, false);\n\t\t\t}\n\t\t\n\t\t\t// add methods to native HTMLMediaElement\n\t\t\treturn this.updateNative(playback, options, autoplay, preload);\n\t\t} else if (playback.method !== '') {\n\t\t\t// create plugin to mimic HTMLMediaElement\n\t\t\t\n\t\t\treturn this.createPlugin( playback,  options, poster, autoplay, preload, controls);\n\t\t} else {\n\t\t\t// boo, no HTML5, no Flash, no Silverlight.\n\t\t\tthis.createErrorMessage( playback, options, poster );\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t},\n\t\n\tdeterminePlayback: function(htmlMediaElement, options, supportsMediaTag, isMediaTag, src) {\n\t\tvar\n\t\t\tmediaFiles = [],\n\t\t\ti,\n\t\t\tj,\n\t\t\tk,\n\t\t\tl,\n\t\t\tn,\n\t\t\ttype,\n\t\t\tresult = { method: '', url: '', htmlMediaElement: htmlMediaElement, isVideo: (htmlMediaElement.tagName.toLowerCase() != 'audio'), scheme: ''},\n\t\t\tpluginName,\n\t\t\tpluginVersions,\n\t\t\tpluginInfo,\n\t\t\tdummy,\n\t\t\tmedia;\n\t\t\t\n\t\t// STEP 1: Get URL and type from <video src> or <source src>\n\n\t\t// supplied type overrides <video type> and <source type>\n\t\tif (typeof options.type != 'undefined' && options.type !== '') {\n\t\t\t\n\t\t\t// accept either string or array of types\n\t\t\tif (typeof options.type == 'string') {\n\t\t\t\tmediaFiles.push({type:options.type, url:src});\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tfor (i=0; i<options.type.length; i++) {\n\t\t\t\t\tmediaFiles.push({type:options.type[i], url:src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t// test for src attribute first\n\t\t} else if (src !== null) {\n\t\t\ttype = this.formatType(src, htmlMediaElement.getAttribute('type'));\n\t\t\tmediaFiles.push({type:type, url:src});\n\n\t\t// then test for <source> elements\n\t\t} else {\n\t\t\t// test <source> types to see if they are usable\n\t\t\tfor (i = 0; i < htmlMediaElement.childNodes.length; i++) {\n\t\t\t\tn = htmlMediaElement.childNodes[i];\n\t\t\t\tif (n.nodeType == 1 && n.tagName.toLowerCase() == 'source') {\n\t\t\t\t\tsrc = n.getAttribute('src');\n\t\t\t\t\ttype = this.formatType(src, n.getAttribute('type'));\n\t\t\t\t\tmedia = n.getAttribute('media');\n\n\t\t\t\t\tif (!media || !window.matchMedia || (window.matchMedia && window.matchMedia(media).matches)) {\n\t\t\t\t\t\tmediaFiles.push({type:type, url:src});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// in the case of dynamicly created players\n\t\t// check for audio types\n\t\tif (!isMediaTag && mediaFiles.length > 0 && mediaFiles[0].url !== null && this.getTypeFromFile(mediaFiles[0].url).indexOf('audio') > -1) {\n\t\t\tresult.isVideo = false;\n\t\t}\n\t\t\n\n\t\t// STEP 2: Test for playback method\n\t\t\n\t\t// special case for Android which sadly doesn't implement the canPlayType function (always returns '')\n\t\tif (mejs.MediaFeatures.isBustedAndroid) {\n\t\t\thtmlMediaElement.canPlayType = function(type) {\n\t\t\t\treturn (type.match(/video\\/(mp4|m4v)/gi) !== null) ? 'maybe' : '';\n\t\t\t};\n\t\t}\t\t\n\t\t\n\t\t// special case for Chromium to specify natively supported video codecs (i.e. WebM and Theora) \n\t\tif (mejs.MediaFeatures.isChromium) { \n\t\t\thtmlMediaElement.canPlayType = function(type) { \n\t\t\t\treturn (type.match(/video\\/(webm|ogv|ogg)/gi) !== null) ? 'maybe' : ''; \n\t\t\t}; \n\t\t}\n\n\t\t// test for native playback first\n\t\tif (supportsMediaTag && (options.mode === 'auto' || options.mode === 'auto_plugin' || options.mode === 'native')  && !(mejs.MediaFeatures.isBustedNativeHTTPS && options.httpsBasicAuthSite === true)) {\n\t\t\t\t\t\t\n\t\t\tif (!isMediaTag) {\n\n\t\t\t\t// create a real HTML5 Media Element \n\t\t\t\tdummy = document.createElement( result.isVideo ? 'video' : 'audio');\t\t\t\n\t\t\t\thtmlMediaElement.parentNode.insertBefore(dummy, htmlMediaElement);\n\t\t\t\thtmlMediaElement.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// use this one from now on\n\t\t\t\tresult.htmlMediaElement = htmlMediaElement = dummy;\n\t\t\t}\n\t\t\t\t\n\t\t\tfor (i=0; i<mediaFiles.length; i++) {\n\t\t\t\t// normal check\n\t\t\t\tif (mediaFiles[i].type == \"video/m3u8\" || htmlMediaElement.canPlayType(mediaFiles[i].type).replace(/no/, '') !== ''\n\t\t\t\t\t// special case for Mac/Safari 5.0.3 which answers '' to canPlayType('audio/mp3') but 'maybe' to canPlayType('audio/mpeg')\n\t\t\t\t\t|| htmlMediaElement.canPlayType(mediaFiles[i].type.replace(/mp3/,'mpeg')).replace(/no/, '') !== ''\n\t\t\t\t\t// special case for m4a supported by detecting mp4 support\n\t\t\t\t\t|| htmlMediaElement.canPlayType(mediaFiles[i].type.replace(/m4a/,'mp4')).replace(/no/, '') !== '') {\n\t\t\t\t\tresult.method = 'native';\n\t\t\t\t\tresult.url = mediaFiles[i].url;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tif (result.method === 'native') {\n\t\t\t\tif (result.url !== null) {\n\t\t\t\t\thtmlMediaElement.src = result.url;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// if `auto_plugin` mode, then cache the native result but try plugins.\n\t\t\t\tif (options.mode !== 'auto_plugin') {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if native playback didn't work, then test plugins\n\t\tif (options.mode === 'auto' || options.mode === 'auto_plugin' || options.mode === 'shim') {\n\t\t\tfor (i=0; i<mediaFiles.length; i++) {\n\t\t\t\ttype = mediaFiles[i].type;\n\n\t\t\t\t// test all plugins in order of preference [silverlight, flash]\n\t\t\t\tfor (j=0; j<options.plugins.length; j++) {\n\n\t\t\t\t\tpluginName = options.plugins[j];\n\t\t\t\n\t\t\t\t\t// test version of plugin (for future features)\n\t\t\t\t\tpluginVersions = mejs.plugins[pluginName];\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (k=0; k<pluginVersions.length; k++) {\n\t\t\t\t\t\tpluginInfo = pluginVersions[k];\n\t\t\t\t\t\n\t\t\t\t\t\t// test if user has the correct plugin version\n\t\t\t\t\t\t\n\t\t\t\t\t\t// for youtube/vimeo\n\t\t\t\t\t\tif (pluginInfo.version == null || \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmejs.PluginDetector.hasPluginVersion(pluginName, pluginInfo.version)) {\n\n\t\t\t\t\t\t\t// test for plugin playback types\n\t\t\t\t\t\t\tfor (l=0; l<pluginInfo.types.length; l++) {\n\t\t\t\t\t\t\t\t// find plugin that can play the type\n\t\t\t\t\t\t\t\tif (type.toLowerCase() == pluginInfo.types[l].toLowerCase()) {\n\t\t\t\t\t\t\t\t\tresult.method = pluginName;\n\t\t\t\t\t\t\t\t\tresult.url = mediaFiles[i].url;\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// at this point, being in 'auto_plugin' mode implies that we tried plugins but failed.\n\t\t// if we have native support then return that.\n\t\tif (options.mode === 'auto_plugin' && result.method === 'native') {\n\t\t\treturn result;\n\t\t}\n\n\t\t// what if there's nothing to play? just grab the first available\n\t\tif (result.method === '' && mediaFiles.length > 0) {\n\t\t\tresult.url = mediaFiles[0].url;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tformatType: function(url, type) {\n\t\t// if no type is supplied, fake it with the extension\n\t\tif (url && !type) {\t\t\n\t\t\treturn this.getTypeFromFile(url);\n\t\t} else {\n\t\t\t// only return the mime part of the type in case the attribute contains the codec\n\t\t\t// see http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#the-source-element\n\t\t\t// `video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"` becomes `video/mp4`\n\t\t\t\n\t\t\tif (type && ~type.indexOf(';')) {\n\t\t\t\treturn type.substr(0, type.indexOf(';')); \n\t\t\t} else {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetTypeFromFile: function(url) {\n\t\turl = url.split('?')[0];\n\t\tvar\n\t\t\text = url.substring(url.lastIndexOf('.') + 1).toLowerCase(),\n\t\t\tav = /(mp4|m4v|ogg|ogv|m3u8|webm|webmv|flv|wmv|mpeg|mov)/gi.test(ext) ? 'video/' : 'audio/';\n\t\treturn this.getTypeFromExtension(ext, av);\n\t},\n\t\n\tgetTypeFromExtension: function(ext, av) {\n\t\tav = av || '';\n\t\t\n\t\tswitch (ext) {\n\t\t\tcase 'mp4':\n\t\t\tcase 'm4v':\n\t\t\tcase 'm4a':\n\t\t\tcase 'f4v':\n\t\t\tcase 'f4a':\n\t\t\t\treturn av + 'mp4';\n\t\t\tcase 'flv':\n\t\t\t\treturn av + 'x-flv';\n\t\t\tcase 'webm':\n\t\t\tcase 'webma':\n\t\t\tcase 'webmv':\t\n\t\t\t\treturn av + 'webm';\n\t\t\tcase 'ogg':\n\t\t\tcase 'oga':\n\t\t\tcase 'ogv':\t\n\t\t\t\treturn av + 'ogg';\n\t\t\tcase 'm3u8':\n\t\t\t\treturn 'application/x-mpegurl';\n\t\t\tcase 'ts':\n\t\t\t\treturn av + 'mp2t';\n\t\t\tdefault:\n\t\t\t\treturn av + ext;\n\t\t}\n\t},\n\n\tcreateErrorMessage: function(playback, options, poster) {\n\t\tvar \n\t\t\thtmlMediaElement = playback.htmlMediaElement,\n\t\t\terrorContainer = document.createElement('div'),\n\t\t\terrorContent = options.customError;\n\t\t\t\n\t\terrorContainer.className = 'me-cannotplay';\n\n\t\ttry {\n\t\t\terrorContainer.style.width = htmlMediaElement.width + 'px';\n\t\t\terrorContainer.style.height = htmlMediaElement.height + 'px';\n\t\t} catch (e) {}\n\n\t\tif (!errorContent) {\n\t\t\terrorContent = '<a href=\"' + playback.url + '\">';\n\n\t\t\tif (poster !== '') {\n\t\t\t\terrorContent += '<img src=\"' + poster + '\" width=\"100%\" height=\"100%\" alt=\"\" />';\n\t\t\t}\n\n\t\t\terrorContent += '<span>' + mejs.i18n.t('Download File') + '</span></a>';\n\t\t}\n\n\t\terrorContainer.innerHTML = errorContent;\n\n\t\thtmlMediaElement.parentNode.insertBefore(errorContainer, htmlMediaElement);\n\t\thtmlMediaElement.style.display = 'none';\n\n\t\toptions.error(htmlMediaElement);\n\t},\n\n\tcreatePlugin:function(playback, options, poster, autoplay, preload, controls) {\n\t\tvar \n\t\t\thtmlMediaElement = playback.htmlMediaElement,\n\t\t\twidth = 1,\n\t\t\theight = 1,\n\t\t\tpluginid = 'me_' + playback.method + '_' + (mejs.meIndex++),\n\t\t\tpluginMediaElement = new mejs.PluginMediaElement(pluginid, playback.method, playback.url),\n\t\t\tcontainer = document.createElement('div'),\n\t\t\tspecialIEContainer,\n\t\t\tnode,\n\t\t\tinitVars;\n\n\t\t// copy tagName from html media element\n\t\tpluginMediaElement.tagName = htmlMediaElement.tagName\n\n\t\t// copy attributes from html media element to plugin media element\n\t\tfor (var i = 0; i < htmlMediaElement.attributes.length; i++) {\n\t\t\tvar attribute = htmlMediaElement.attributes[i];\n\t\t\tif (attribute.specified) {\n\t\t\t\tpluginMediaElement.setAttribute(attribute.name, attribute.value);\n\t\t\t}\n\t\t}\n\n\t\t// check for placement inside a <p> tag (sometimes WYSIWYG editors do this)\n\t\tnode = htmlMediaElement.parentNode;\n\n\t\twhile (node !== null && node.tagName != null && node.tagName.toLowerCase() !== 'body' && \n\t\t\t\tnode.parentNode != null && node.parentNode.tagName != null && node.parentNode.constructor != null && node.parentNode.constructor.name === \"ShadowRoot\") {\n\t\t\tif (node.parentNode.tagName.toLowerCase() === 'p') {\n\t\t\t\tnode.parentNode.parentNode.insertBefore(node, node.parentNode);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnode = node.parentNode;\n\t\t}\n\n\t\tif (playback.isVideo) {\n\t\t\twidth = (options.pluginWidth > 0) ? options.pluginWidth : (options.videoWidth > 0) ? options.videoWidth : (htmlMediaElement.getAttribute('width') !== null) ? htmlMediaElement.getAttribute('width') : options.defaultVideoWidth;\n\t\t\theight = (options.pluginHeight > 0) ? options.pluginHeight : (options.videoHeight > 0) ? options.videoHeight : (htmlMediaElement.getAttribute('height') !== null) ? htmlMediaElement.getAttribute('height') : options.defaultVideoHeight;\n\t\t\n\t\t\t// in case of '%' make sure it's encoded\n\t\t\twidth = mejs.Utility.encodeUrl(width);\n\t\t\theight = mejs.Utility.encodeUrl(height);\n\t\t\n\t\t} else {\n\t\t\tif (options.enablePluginDebug) {\n\t\t\t\twidth = 320;\n\t\t\t\theight = 240;\n\t\t\t}\n\t\t}\n\n\t\t// register plugin\n\t\tpluginMediaElement.success = options.success;\n\t\tmejs.MediaPluginBridge.registerPluginElement(pluginid, pluginMediaElement, htmlMediaElement);\n\n\t\t// add container (must be added to DOM before inserting HTML for IE)\n\t\tcontainer.className = 'me-plugin';\n\t\tcontainer.id = pluginid + '_container';\n\t\t\n\t\tif (playback.isVideo) {\n\t\t\t\thtmlMediaElement.parentNode.insertBefore(container, htmlMediaElement);\n\t\t} else {\n\t\t\t\tdocument.body.insertBefore(container, document.body.childNodes[0]);\n\t\t}\n\n\t\t// flash/silverlight vars\n\t\tinitVars = [\n\t\t\t'id=' + pluginid,\n\t\t\t'jsinitfunction=' + \"mejs.MediaPluginBridge.initPlugin\",\n\t\t\t'jscallbackfunction=' + \"mejs.MediaPluginBridge.fireEvent\",\n\t\t\t'isvideo=' + ((playback.isVideo) ? \"true\" : \"false\"),\n\t\t\t'autoplay=' + ((autoplay) ? \"true\" : \"false\"),\n\t\t\t'preload=' + preload,\n\t\t\t'width=' + width,\n\t\t\t'startvolume=' + options.startVolume,\n\t\t\t'timerrate=' + options.timerRate,\n\t\t\t'flashstreamer=' + options.flashStreamer,\n\t\t\t'height=' + height,\n\t\t\t'pseudostreamstart=' + options.pseudoStreamingStartQueryParam];\n\n\t\tif (playback.url !== null) {\n\t\t\tif (playback.method == 'flash') {\n\t\t\t\tinitVars.push('file=' + mejs.Utility.encodeUrl(playback.url));\n\t\t\t} else {\n\t\t\t\tinitVars.push('file=' + playback.url);\n\t\t\t}\n\t\t}\n\t\tif (options.enablePluginDebug) {\n\t\t\tinitVars.push('debug=true');\n\t\t}\n\t\tif (options.enablePluginSmoothing) {\n\t\t\tinitVars.push('smoothing=true');\n\t\t}\n\t\tif (options.enablePseudoStreaming) {\n\t\t\tinitVars.push('pseudostreaming=true');\n\t\t}\n\t\tif (controls) {\n\t\t\tinitVars.push('controls=true'); // shows controls in the plugin if desired\n\t\t}\n\t\tif (options.pluginVars) {\n\t\t\tinitVars = initVars.concat(options.pluginVars);\n\t\t}\t\t\n\n\t\tswitch (playback.method) {\n\t\t\tcase 'silverlight':\n\t\t\t\tcontainer.innerHTML =\n'<object data=\"data:application/x-silverlight-2,\" type=\"application/x-silverlight-2\" id=\"' + pluginid + '\" name=\"' + pluginid + '\" width=\"' + width + '\" height=\"' + height + '\" class=\"mejs-shim\">' +\n'<param name=\"initParams\" value=\"' + initVars.join(',') + '\" />' +\n'<param name=\"windowless\" value=\"true\" />' +\n'<param name=\"background\" value=\"black\" />' +\n'<param name=\"minRuntimeVersion\" value=\"3.0.0.0\" />' +\n'<param name=\"autoUpgrade\" value=\"true\" />' +\n'<param name=\"source\" value=\"' + options.pluginPath + options.silverlightName + '\" />' +\n'</object>';\n\t\t\t\t\tbreak;\n\n\t\t\tcase 'flash':\n\n\t\t\t\tif (mejs.MediaFeatures.isIE) {\n\t\t\t\t\tspecialIEContainer = document.createElement('div');\n\t\t\t\t\tcontainer.appendChild(specialIEContainer);\n\t\t\t\t\tspecialIEContainer.outerHTML =\n'<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" ' +\n'id=\"' + pluginid + '\" width=\"' + width + '\" height=\"' + height + '\" class=\"mejs-shim\">' +\n'<param name=\"movie\" value=\"' + options.pluginPath + options.flashName + '?x=' + (new Date()) + '\" />' +\n'<param name=\"flashvars\" value=\"' + initVars.join('&amp;') + '\" />' +\n'<param name=\"quality\" value=\"high\" />' +\n'<param name=\"bgcolor\" value=\"#000000\" />' +\n'<param name=\"wmode\" value=\"transparent\" />' +\n'<param name=\"allowScriptAccess\" value=\"' + options.flashScriptAccess + '\" />' +\n'<param name=\"allowFullScreen\" value=\"true\" />' +\n'<param name=\"scale\" value=\"default\" />' + \n'</object>';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontainer.innerHTML =\n'<embed id=\"' + pluginid + '\" name=\"' + pluginid + '\" ' +\n'play=\"true\" ' +\n'loop=\"false\" ' +\n'quality=\"high\" ' +\n'bgcolor=\"#000000\" ' +\n'wmode=\"transparent\" ' +\n'allowScriptAccess=\"' + options.flashScriptAccess + '\" ' +\n'allowFullScreen=\"true\" ' +\n'type=\"application/x-shockwave-flash\" pluginspage=\"//www.macromedia.com/go/getflashplayer\" ' +\n'src=\"' + options.pluginPath + options.flashName + '\" ' +\n'flashvars=\"' + initVars.join('&') + '\" ' +\n'width=\"' + width + '\" ' +\n'height=\"' + height + '\" ' +\n'scale=\"default\"' + \n'class=\"mejs-shim\"></embed>';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'youtube':\n\t\t\t\n\t\t\t\t\n\t\t\t\tvar videoId;\n\t\t\t\t// youtu.be url from share button\n\t\t\t\tif (playback.url.lastIndexOf(\"youtu.be\") != -1) {\n\t\t\t\t\tvideoId = playback.url.substr(playback.url.lastIndexOf('/')+1);\n\t\t\t\t\tif (videoId.indexOf('?') != -1) {\n\t\t\t\t\t\tvideoId = videoId.substr(0, videoId.indexOf('?'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvideoId = playback.url.substr(playback.url.lastIndexOf('=')+1);\n\t\t\t\t}\n\t\t\t\tyoutubeSettings = {\n\t\t\t\t\t\tcontainer: container,\n\t\t\t\t\t\tcontainerId: container.id,\n\t\t\t\t\t\tpluginMediaElement: pluginMediaElement,\n\t\t\t\t\t\tpluginId: pluginid,\n\t\t\t\t\t\tvideoId: videoId,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\twidth: width,\n                        scheme: playback.scheme\n\t\t\t\t\t};\t\t\t\t\n\t\t\t\t\n\t\t\t\t// favor iframe version of YouTube\n\t\t\t\tif (window.postMessage) {\n\t\t\t\t\tmejs.YouTubeApi.enqueueIframe(youtubeSettings);\t\t\n\t\t\t\t} else if (mejs.PluginDetector.hasPluginVersion('flash', [10,0,0]) ) {\n\t\t\t\t\tmejs.YouTubeApi.createFlash(youtubeSettings, options);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\t// DEMO Code. Does NOT work.\n\t\t\tcase 'vimeo':\n\t\t\t\tvar player_id = pluginid + \"_player\";\n\t\t\t\tpluginMediaElement.vimeoid = playback.url.substr(playback.url.lastIndexOf('/')+1);\n\t\t\t\t\n\t\t\t\tcontainer.innerHTML ='<iframe src=\"' + playback.scheme + 'player.vimeo.com/video/' + pluginMediaElement.vimeoid + '?api=1&portrait=0&byline=0&title=0&player_id=' + player_id + '\" width=\"' + width +'\" height=\"' + height +'\" frameborder=\"0\" class=\"mejs-shim\" id=\"' + player_id + '\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';\n\t\t\t\tif (typeof($f) == 'function') { // froogaloop available\n\t\t\t\t\tvar player = $f(container.childNodes[0]);\n\t\t\t\t\t\n\t\t\t\t\tplayer.addEvent('ready', function() {\n\t\t\t\t\t\t\n\t\t\t\t\t\tplayer.playVideo = function() {\n\t\t\t\t\t\t\tplayer.api( 'play' );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tplayer.stopVideo = function() {\n\t\t\t\t\t\t\tplayer.api( 'unload' );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tplayer.pauseVideo = function() {\n\t\t\t\t\t\t\tplayer.api( 'pause' );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tplayer.seekTo = function( seconds ) {\n\t\t\t\t\t\t\tplayer.api( 'seekTo', seconds );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayer.setVolume = function( volume ) {\n\t\t\t\t\t\t\tplayer.api( 'setVolume', volume );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayer.setMuted = function( muted ) {\n\t\t\t\t\t\t\tif( muted ) {\n\t\t\t\t\t\t\t\tplayer.lastVolume = player.api( 'getVolume' );\n\t\t\t\t\t\t\t\tplayer.api( 'setVolume', 0 );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tplayer.api( 'setVolume', player.lastVolume );\n\t\t\t\t\t\t\t\tdelete player.lastVolume;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\n\t\t\t\t\t\tfunction createEvent(player, pluginMediaElement, eventName, e) {\n\t\t\t\t\t\t\tvar event = {\n\t\t\t\t\t\t\t\ttype: eventName,\n\t\t\t\t\t\t\t\ttarget: pluginMediaElement\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (eventName == 'timeupdate') {\n\t\t\t\t\t\t\t\tpluginMediaElement.currentTime = event.currentTime = e.seconds;\n\t\t\t\t\t\t\t\tpluginMediaElement.duration = event.duration = e.duration;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpluginMediaElement.dispatchEvent(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tplayer.addEvent('play', function() {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'play');\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'playing');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tplayer.addEvent('pause', function() {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'pause');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tplayer.addEvent('finish', function() {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'ended');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tplayer.addEvent('playProgress', function(e) {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'timeupdate', e);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tpluginMediaElement.pluginElement = container;\n\t\t\t\t\t\tpluginMediaElement.pluginApi = player;\n\n\t\t\t\t\t\t// init mejs\n\t\t\t\t\t\tmejs.MediaPluginBridge.initPlugin(pluginid);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.warn(\"You need to include froogaloop for vimeo to work\");\n\t\t\t\t}\n\t\t\t\tbreak;\t\t\t\n\t\t}\n\t\t// hide original element\n\t\thtmlMediaElement.style.display = 'none';\n\t\t// prevent browser from autoplaying when using a plugin\n\t\thtmlMediaElement.removeAttribute('autoplay');\n\n\t\t// FYI: options.success will be fired by the MediaPluginBridge\n\t\t\n\t\treturn pluginMediaElement;\n\t},\n\n\tupdateNative: function(playback, options, autoplay, preload) {\n\t\t\n\t\tvar htmlMediaElement = playback.htmlMediaElement,\n\t\t\tm;\n\t\t\n\t\t\n\t\t// add methods to video object to bring it into parity with Flash Object\n\t\tfor (m in mejs.HtmlMediaElement) {\n\t\t\thtmlMediaElement[m] = mejs.HtmlMediaElement[m];\n\t\t}\n\n\t\t/*\n\t\tChrome now supports preload=\"none\"\n\t\tif (mejs.MediaFeatures.isChrome) {\n\t\t\n\t\t\t// special case to enforce preload attribute (Chrome doesn't respect this)\n\t\t\tif (preload === 'none' && !autoplay) {\n\t\t\t\n\t\t\t\t// forces the browser to stop loading (note: fails in IE9)\n\t\t\t\thtmlMediaElement.src = '';\n\t\t\t\thtmlMediaElement.load();\n\t\t\t\thtmlMediaElement.canceledPreload = true;\n\n\t\t\t\thtmlMediaElement.addEventListener('play',function() {\n\t\t\t\t\tif (htmlMediaElement.canceledPreload) {\n\t\t\t\t\t\thtmlMediaElement.src = playback.url;\n\t\t\t\t\t\thtmlMediaElement.load();\n\t\t\t\t\t\thtmlMediaElement.play();\n\t\t\t\t\t\thtmlMediaElement.canceledPreload = false;\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t// for some reason Chrome forgets how to autoplay sometimes.\n\t\t\t} else if (autoplay) {\n\t\t\t\thtmlMediaElement.load();\n\t\t\t\thtmlMediaElement.play();\n\t\t\t}\n\t\t}\n\t\t*/\n\n\t\t// fire success code\n\t\toptions.success(htmlMediaElement, htmlMediaElement);\n\t\t\n\t\treturn htmlMediaElement;\n\t}\n};\n\n/*\n - test on IE (object vs. embed)\n - determine when to use iframe (Firefox, Safari, Mobile) vs. Flash (Chrome, IE)\n - fullscreen?\n*/\n\n// YouTube Flash and Iframe API\nmejs.YouTubeApi = {\n\tisIframeStarted: false,\n\tisIframeLoaded: false,\n\tloadIframeApi: function(yt) {\n\t\tif (!this.isIframeStarted) {\n\t\t\tvar tag = document.createElement('script');\n\t\t\ttag.src = yt.scheme + \"www.youtube.com/player_api\";\n\t\t\tvar firstScriptTag = document.getElementsByTagName('script')[0];\n\t\t\tfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\t\t\tthis.isIframeStarted = true;\n\t\t}\n\t},\n\tiframeQueue: [],\n\tenqueueIframe: function(yt) {\n\t\t\n\t\tif (this.isLoaded) {\n\t\t\tthis.createIframe(yt);\n\t\t} else {\n\t\t\tthis.loadIframeApi(yt);\n\t\t\tthis.iframeQueue.push(yt);\n\t\t}\n\t},\n\tcreateIframe: function(settings) {\n\t\t\n\t\tvar\n\t\tpluginMediaElement = settings.pluginMediaElement,\t\n\t\tplayer = new YT.Player(settings.containerId, {\n\t\t\theight: settings.height,\n\t\t\twidth: settings.width,\n\t\t\tvideoId: settings.videoId,\n\t\t\tplayerVars: {controls:0,wmode:'transparent'},\n\t\t\tevents: {\n\t\t\t\t'onReady': function() {\n\t\t\t\t\t\n\t\t\t\t\t// wrapper to match\n\t\t\t\t\tplayer.setVideoSize = function(width, height) {\n\t\t\t\t\t\tplayer.setSize(width, height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// hook up iframe object to MEjs\n\t\t\t\t\tsettings.pluginMediaElement.pluginApi = player;\n\t\t\t\t\tsettings.pluginMediaElement.pluginElement = document.getElementById(settings.containerId);\n\t\t\t\t\t\n\t\t\t\t\t// init mejs\n\t\t\t\t\tmejs.MediaPluginBridge.initPlugin(settings.pluginId);\n\t\t\t\t\t\n\t\t\t\t\t// create timer\n\t\t\t\t\tsetInterval(function() {\n\t\t\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'timeupdate');\n\t\t\t\t\t}, 250);\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t'onStateChange': function(e) {\n\t\t\t\t\t\n\t\t\t\t\tmejs.YouTubeApi.handleStateChange(e.data, player, pluginMediaElement);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\t\n\tcreateEvent: function (player, pluginMediaElement, eventName) {\n\t\tvar event = {\n\t\t\ttype: eventName,\n\t\t\ttarget: pluginMediaElement\n\t\t};\n\n\t\tif (player && player.getDuration) {\n\t\t\t\n\t\t\t// time \n\t\t\tpluginMediaElement.currentTime = event.currentTime = player.getCurrentTime();\n\t\t\tpluginMediaElement.duration = event.duration = player.getDuration();\n\t\t\t\n\t\t\t// state\n\t\t\tevent.paused = pluginMediaElement.paused;\n\t\t\tevent.ended = pluginMediaElement.ended;\t\t\t\n\t\t\t\n\t\t\t// sound\n\t\t\tevent.muted = player.isMuted();\n\t\t\tevent.volume = player.getVolume() / 100;\n\t\t\t\n\t\t\t// progress\n\t\t\tevent.bytesTotal = player.getVideoBytesTotal();\n\t\t\tevent.bufferedBytes = player.getVideoBytesLoaded();\n\t\t\t\n\t\t\t// fake the W3C buffered TimeRange\n\t\t\tvar bufferedTime = event.bufferedBytes / event.bytesTotal * event.duration;\n\t\t\t\n\t\t\tevent.target.buffered = event.buffered = {\n\t\t\t\tstart: function(index) {\n\t\t\t\t\treturn 0;\n\t\t\t\t},\n\t\t\t\tend: function (index) {\n\t\t\t\t\treturn bufferedTime;\n\t\t\t\t},\n\t\t\t\tlength: 1\n\t\t\t};\n\n\t\t}\n\t\t\n\t\t// send event up the chain\n\t\tpluginMediaElement.dispatchEvent(event);\n\t},\t\n\t\n\tiFrameReady: function() {\n\t\t\n\t\tthis.isLoaded = true;\n\t\tthis.isIframeLoaded = true;\n\t\t\n\t\twhile (this.iframeQueue.length > 0) {\n\t\t\tvar settings = this.iframeQueue.pop();\n\t\t\tthis.createIframe(settings);\n\t\t}\t\n\t},\n\t\n\t// FLASH!\n\tflashPlayers: {},\n\tcreateFlash: function(settings) {\n\t\t\n\t\tthis.flashPlayers[settings.pluginId] = settings;\n\t\t\n\t\t/*\n\t\tsettings.container.innerHTML =\n\t\t\t'<object type=\"application/x-shockwave-flash\" id=\"' + settings.pluginId + '\" data=\"' + settings.scheme + 'www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid=' + settings.pluginId  + '&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0\" ' +\n\t\t\t\t'width=\"' + settings.width + '\" height=\"' + settings.height + '\" style=\"visibility: visible; \" class=\"mejs-shim\">' +\n\t\t\t\t'<param name=\"allowScriptAccess\" value=\"sameDomain\">' +\n\t\t\t\t'<param name=\"wmode\" value=\"transparent\">' +\n\t\t\t'</object>';\n\t\t*/\n\n\t\tvar specialIEContainer,\n\t\t\tyoutubeUrl = settings.scheme + 'www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid=' + settings.pluginId  + '&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0';\n\t\t\t\n\t\tif (mejs.MediaFeatures.isIE) {\n\t\t\t\n\t\t\tspecialIEContainer = document.createElement('div');\n\t\t\tsettings.container.appendChild(specialIEContainer);\n\t\t\tspecialIEContainer.outerHTML = '<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"' + settings.scheme + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" ' +\n'id=\"' + settings.pluginId + '\" width=\"' + settings.width + '\" height=\"' + settings.height + '\" class=\"mejs-shim\">' +\n\t'<param name=\"movie\" value=\"' + youtubeUrl + '\" />' +\n\t'<param name=\"wmode\" value=\"transparent\" />' +\n\t'<param name=\"allowScriptAccess\" value=\"' + options.flashScriptAccess + '\" />' +\n\t'<param name=\"allowFullScreen\" value=\"true\" />' +\n'</object>';\n\t\t} else {\n\t\tsettings.container.innerHTML =\n\t\t\t'<object type=\"application/x-shockwave-flash\" id=\"' + settings.pluginId + '\" data=\"' + youtubeUrl + '\" ' +\n\t\t\t\t'width=\"' + settings.width + '\" height=\"' + settings.height + '\" style=\"visibility: visible; \" class=\"mejs-shim\">' +\n\t\t\t\t'<param name=\"allowScriptAccess\" value=\"' + options.flashScriptAccess + '\">' +\n\t\t\t\t'<param name=\"wmode\" value=\"transparent\">' +\n\t\t\t'</object>';\n\t\t}\t\t\n\t\t\n\t},\n\t\n\tflashReady: function(id) {\n\t\tvar\n\t\t\tsettings = this.flashPlayers[id],\n\t\t\tplayer = document.getElementById(id),\n\t\t\tpluginMediaElement = settings.pluginMediaElement;\n\t\t\n\t\t// hook up and return to MediaELementPlayer.success\t\n\t\tpluginMediaElement.pluginApi = \n\t\tpluginMediaElement.pluginElement = player;\n\t\tmejs.MediaPluginBridge.initPlugin(id);\n\t\t\n\t\t// load the youtube video\n\t\tplayer.cueVideoById(settings.videoId);\n\t\t\n\t\tvar callbackName = settings.containerId + '_callback';\n\t\t\n\t\twindow[callbackName] = function(e) {\n\t\t\tmejs.YouTubeApi.handleStateChange(e, player, pluginMediaElement);\n\t\t}\n\t\t\n\t\tplayer.addEventListener('onStateChange', callbackName);\n\t\t\n\t\tsetInterval(function() {\n\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'timeupdate');\n\t\t}, 250);\n\t\t\n\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'canplay');\n\t},\n\t\n\thandleStateChange: function(youTubeState, player, pluginMediaElement) {\n\t\tswitch (youTubeState) {\n\t\t\tcase -1: // not started\n\t\t\t\tpluginMediaElement.paused = true;\n\t\t\t\tpluginMediaElement.ended = true;\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'loadedmetadata');\n\t\t\t\t//createYouTubeEvent(player, pluginMediaElement, 'loadeddata');\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tpluginMediaElement.paused = false;\n\t\t\t\tpluginMediaElement.ended = true;\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'ended');\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tpluginMediaElement.paused = false;\n\t\t\t\tpluginMediaElement.ended = false;\t\t\t\t\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'play');\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'playing');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tpluginMediaElement.paused = true;\n\t\t\t\tpluginMediaElement.ended = false;\t\t\t\t\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'pause');\n\t\t\t\tbreak;\n\t\t\tcase 3: // buffering\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'progress');\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t// cued?\n\t\t\t\tbreak;\t\t\t\t\t\t\n\t\t\t\n\t\t}\t\t\t\n\t\t\n\t}\n}\n// IFRAME\nwindow.onYouTubePlayerAPIReady = function() {\n\tmejs.YouTubeApi.iFrameReady();\n};\n// FLASH\nwindow.onYouTubePlayerReady = function(id) {\n\tmejs.YouTubeApi.flashReady(id);\n};\n\nwindow.mejs = mejs;\nwindow.MediaElement = mejs.MediaElement;\n"], "fixing_code": ["package {\n\timport flash.display.*;\n\timport flash.events.*;\n\timport flash.media.*;\n\timport flash.net.*;\n\timport flash.text.*;\n\timport flash.system.*;\n\n\timport flash.media.Video;\n\timport flash.net.NetConnection;\n\timport flash.net.NetStream;\n\n\timport flash.geom.ColorTransform;\n\n\timport flash.filters.DropShadowFilter;\n\timport flash.utils.Timer;\n\timport flash.external.ExternalInterface;\n\timport flash.geom.Rectangle;\n\n\timport htmlelements.IMediaElement;\n\timport htmlelements.VideoElement;\n\timport htmlelements.AudioElement;\n\timport htmlelements.YouTubeElement;\n\timport htmlelements.DailyMotionElement;\n\timport htmlelements.HLSMediaElement;\n\n\t[SWF(backgroundColor=\"0x000000\")] // Set SWF background color\n\tpublic class FlashMediaElement extends MovieClip {\n\n\t\tprivate var _mediaUrl:String;\n\t\tprivate var _jsInitFunction:String;\n\t\tprivate var _jsCallbackFunction:String;\n\t\tprivate var _autoplay:Boolean;\n\t\tprivate var _preload:String;\n\t\tprivate var _debug:Boolean = false;\n\t\tprivate var _isVideo:Boolean;\n\t\tprivate var _video:DisplayObject;\n\t\tprivate var _timerRate:Number;\n\t\tprivate var _enableSmoothing:Boolean;\n\t\tprivate var _allowedPluginDomain:String;\n\t\tprivate var _isFullScreen:Boolean = false;\n\t\tprivate var _startVolume:Number;\n\t\tprivate var _streamer:String = \"\";\n\t\tprivate var _enablePseudoStreaming:Boolean;\n\t\tprivate var _pseudoStreamingStartQueryParam:String;\n\t\tprivate var _fill:Boolean;\n\n\t\t// native video size (from meta data)\n\t\tprivate var _nativeVideoWidth:Number = 0;\n\t\tprivate var _nativeVideoHeight:Number = 0;\n\n\t\t// visual elements\n\t\tprivate var _mediaElementDisplay:FlashMediaElementDisplay = new FlashMediaElementDisplay();\n\t\tprivate var _output:TextField;\n\t\tprivate var _fullscreenButton:SimpleButton;\n\n\t\t// media\n\t\tprivate var _mediaElement:IMediaElement;\n\n\t\t// connection to fullscreen\n\t\tprivate var _connection:LocalConnection;\n\t\tprivate var _connectionName:String;\n\n\t\t// CONTROLS\n\t\tprivate var _alwaysShowControls:Boolean;\n\t\tprivate var _controlsStyle:String;\n\t\tprivate var _controlsAutoHide:Boolean = true;\n\t\tprivate var _controlBar:MovieClip;\n\t\tprivate var _controlBarBg:MovieClip;\n\t\tprivate var _scrubBar:MovieClip;\n\t\tprivate var _scrubTrack:MovieClip;\n\t\tprivate var _scrubOverlay:MovieClip;\n\t\tprivate var _scrubLoaded:MovieClip;\n\t\tprivate var _hoverTime:MovieClip;\n\t\tprivate var _hoverTimeText:TextField;\n\t\tprivate var _playButton:SimpleButton;\n\t\tprivate var _pauseButton:SimpleButton;\n\t\tprivate var _duration:TextField;\n\t\tprivate var _currentTime:TextField;\n\t\tprivate var _fullscreenIcon:SimpleButton;\n\t\tprivate var _volumeMuted:SimpleButton;\n\t\tprivate var _volumeUnMuted:SimpleButton;\n\t\tprivate var _scrubTrackColor:String;\n\t\tprivate var _scrubBarColor:String;\n\t\tprivate var _scrubLoadedColor:String;\n\n\t\t// IDLE Timer for mouse for showing/hiding controls\n\t\tprivate var _inactiveTime:int;\n\t\tprivate var _timer:Timer;\n\t\tprivate var _idleTime:int;\n\t\tprivate var _isMouseActive:Boolean\n\t\tprivate var _isOverStage:Boolean = false;\n\n\t\t// security checkes\n\t\tprivate var securityIssue:Boolean = false; // When SWF parameters contain illegal characters\n\t\tprivate var directAccess:Boolean = false; // When SWF visited directly with no parameters (or when security issue detected)\n\n\n\t\tpublic function FlashMediaElement() {\n\n\t\t\tif (isIllegalQuerystring()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// allows this player to be called from a different domain than the HTML page hosting the player\n\t\t\tCONFIG::cdnBuild {\n\t\t\t\tSecurity.allowDomain(\"*\");\n\t\t\t\tSecurity.allowInsecureDomain('*');\n\t\t\t}\n\n\t\t\tvar params:Object = LoaderInfo(this.root.loaderInfo).parameters;\n\n\t\t\tCONFIG::debugBuild {\n\t\t\t\t_debug = (params['debug'] != undefined) ? (String(params['debug']) == \"true\") : false;\n\t\t\t}\n\t\t\tif (_debug) {\n\t\t\t\t// add debug output\n\t\t\t\tvar _outputFormat:TextFormat = new TextFormat();\n\t\t\t\t_outputFormat.size = 14;\n\t\t\t\t_outputFormat.bold = true;\n\t\t\t\t_output = new TextField();\n\t\t\t\t_output.defaultTextFormat = _outputFormat;\n\t\t\t\t_output.textColor = 0xeeeeee;\n\t\t\t\t_output.width = stage.stageWidth;\n\t\t\t\t_output.height = stage.stageHeight;\n\t\t\t\t_output.multiline = true;\n\t\t\t\t_output.wordWrap = true;\n\t\t\t\t_output.border = false;\n\t\t\t\t_output.filters = [new DropShadowFilter(1, 0x000000, 45, 1, 2, 2, 1)];\n\t\t\t\t_output.text = \"Initializing Flash...\\n\";\n\t\t\t\t_output.visible = _debug;\n\t\t\t\taddChild(_output);\n\t\t\t}\n\t\t\t_mediaUrl = (params['file'] != undefined) ? String(params['file']) : \"\";\n\t\t\t_jsInitFunction = (params['jsinitfunction'] != undefined) ? String(params['jsinitfunction']) : \"\";\n\t\t\t_jsCallbackFunction = (params['jscallbackfunction'] != undefined) ? String(params['jscallbackfunction']) : \"\";\n\t\t\t_autoplay = (params['autoplay'] != undefined) ? (String(params['autoplay']) == \"true\") : false;\n\t\t\t_isVideo = (params['isvideo'] != undefined) ? ((String(params['isvideo']) == \"false\") ? false : true  ) : true;\n\t\t\t_timerRate = (params['timerrate'] != undefined) ? (parseInt(params['timerrate'], 10)) : 250;\n\t\t\t_enableSmoothing = (params['smoothing'] != undefined) ? (String(params['smoothing']) == \"true\") : false;\n\t\t\t_startVolume = (params['startvolume'] != undefined) ? (parseFloat(params['startvolume'])) : 0.8;\n\t\t\t_preload = (params['preload'] != undefined) ? params['preload'] : \"none\";\n\t\t\t_alwaysShowControls = (params['controls'] != undefined) ? (String(params['controls']) == \"true\") : false;\n\t\t\t_controlsStyle = (params['controlstyle'] != undefined) ? (String(params['controlstyle'])) : \"\"; // blank or \"floating\"\n\t\t\t_controlsAutoHide = (params['autohide'] != undefined) ? (String(params['autohide']) == \"true\") : true;\n\t\t\t_scrubTrackColor = (params['scrubtrackcolor'] != undefined) ? (String(params['scrubtrackcolor'])) : \"0x333333\";\n\t\t\t_scrubBarColor = (params['scrubbarcolor'] != undefined) ? (String(params['scrubbarcolor'])) : \"0xefefef\";\n\t\t\t_scrubLoadedColor = (params['scrubloadedcolor'] != undefined) ? (String(params['scrubloadedcolor'])) : \"0x3CACC8\";\n\t\t\t_enablePseudoStreaming = (params['pseudostreaming'] != undefined) ? (String(params['pseudostreaming']) == \"true\") : false;\n\t\t\t_pseudoStreamingStartQueryParam = (params['pseudostreamstart'] != undefined) ? (String(params['pseudostreamstart'])) : \"start\";\n\t\t\t_streamer = (params['flashstreamer'] != undefined) ? (String(params['flashstreamer'])) : \"\";\n\t\t\t_fill = (params['fill'] != undefined) ? (String(params['fill']) == \"true\") : false;\n\n\t\t\t// always show controls for audio files\n\t\t\tif (!_isVideo && _alwaysShowControls)\n\t\t\t\t_controlsAutoHide = false;\n\n\t\t\tif (isNaN(_timerRate))\n\t\t\t\t_timerRate = 250;\n\n\t\t\t// setup stage and player sizes/scales\n\t\t\tstage.align = StageAlign.TOP_LEFT;\n\t\t\tstage.scaleMode = StageScaleMode.NO_SCALE;\n\t\t\tthis.addChild(_mediaElementDisplay);\n\t\t\tstage.addChild(this);\n\n\t\t\t//_autoplay = true;\n\t\t\t//_mediaUrl  = \"http://mediafiles.dts.edu/chapel/mp4/20100609.mp4\";\n\t\t\t//_alwaysShowControls = true;\n\t\t\t//_mediaUrl  = \"../media/Parades-PastLives.mp3\";\n\t\t\t//_mediaUrl  = \"../media/echo-hereweare.mp4\";\n\n\t\t\t//_mediaUrl = \"http://video.ted.com/talks/podcast/AlGore_2006_480.mp4\";\n\t\t\t//_mediaUrl = \"rtmp://stream2.france24.yacast.net/france24_live/en/f24_liveen\";\n\n\t\t\t//_mediaUrl = \"http://www.youtube.com/watch?feature=player_embedded&v=yyWWXSwtPP0\"; // hosea\n\t\t\t//_mediaUrl = \"http://www.youtube.com/watch?feature=player_embedded&v=m5VDDJlsD6I\"; // railer with notes\n\n\t\t\t//_alwaysShowControls = true;\n\n\t\t\t//_debug=true;\n\n\t\t\t// create media element\n\t\t\tif (_isVideo) {\n\t\t\t\tif (_mediaUrl.search(/(https?|file)\\:\\/\\/.*?\\.m3u8(\\?.*)?/i) !== -1) {\n\t\t\t\t\t_mediaElement = new HLSMediaElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t\t\t_video = (_mediaElement as HLSMediaElement).video;\n\t\t\t\t\t_video.width = stage.stageWidth;\n\t\t\t\t\t_video.height = stage.stageHeight;\n\t\t\t\t\t(_video as Video).smoothing = _enableSmoothing;\n\t\t\t\t\taddChild(_video);\n\n\t\t\t\t\t_paramVideoWidth = (params['width'] != undefined) ? (parseInt(params['width'], 10)) : 0;\n\t\t\t\t\t_paramVideoHeight = (params['height'] != undefined) ? (parseInt(params['height'], 10)) : 0;\n\n\t\t\t\t} else if (_mediaUrl.indexOf(\"youtube.com\") > -1 || _mediaUrl.indexOf(\"youtu.be\") > -1) {\n\t\t\t\t\t//Security.allowDomain(\"http://www.youtube.com\");\n\n\t\t\t\t\t_mediaElement = new YouTubeElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t\t\t_video = (_mediaElement as YouTubeElement).player;\n\n\t\t\t\t\t// these are set and then used once the player is loaded\n\t\t\t\t\t(_mediaElement as YouTubeElement).initWidth = stage.stageWidth;\n\t\t\t\t\t(_mediaElement as YouTubeElement).initHeight = stage.stageHeight;\n\n\t\t\t\t} else if (_mediaUrl.indexOf(\"dailymotion.com\") > -1 || _mediaUrl.indexOf(\"dai.ly\") > -1) {\n\t\t\t\t\tSecurity.allowDomain(\"http://www.dailymotion.com\");\n\n\t\t\t\t\t_mediaElement = new DailyMotionElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t\t\t_video = (_mediaElement as DailyMotionElement).player;\n\n\t\t\t\t\t// these are set and then used once the player is loaded\n\t\t\t\t\t(_mediaElement as DailyMotionElement).initWidth = stage.stageWidth;\n\t\t\t\t\t(_mediaElement as DailyMotionElement).initHeight = stage.stageHeight;\n\n\t\t\t\t} else {\n\t\t\t\t\t_mediaElement = new VideoElement(this, _autoplay, _preload, _timerRate, _startVolume, _streamer);\n\t\t\t\t\t_video = (_mediaElement as VideoElement).video;\n\t\t\t\t\t_video.width = stage.stageWidth;\n\t\t\t\t\t_video.height = stage.stageHeight;\n\t\t\t\t\t(_video as Video).smoothing = _enableSmoothing;\n\t\t\t\t\t(_mediaElement as VideoElement).setReference(this);\n\t\t\t\t\t(_mediaElement as VideoElement).setPseudoStreaming(_enablePseudoStreaming);\n\t\t\t\t\t(_mediaElement as VideoElement).setPseudoStreamingStartParam(_pseudoStreamingStartQueryParam);\n\t\t\t\t\t//_video.scaleMode = VideoScaleMode.MAINTAIN_ASPECT_RATIO;\n\t\t\t\t\taddChild(_video);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//var player2:AudioDecoder = new com.automatastudios.audio.audiodecoder.AudioDecoder();\n\t\t\t\t_mediaElement = new AudioElement(this, _autoplay, _preload, _timerRate, _startVolume);\n\t\t\t}\n\n\t\t\tbuildControls();\n\t\t\t\t\t\t\n\t\t\tlogMessage(\"stage: \" + stage.stageWidth + \"x\" + stage.stageHeight);\n\t\t\tlogMessage(\"file: \" + _mediaUrl);\n\t\t\tlogMessage(\"autoplay: \" + _autoplay.toString());\n\t\t\tlogMessage(\"preload: \" + _preload.toString());\n\t\t\tlogMessage(\"isvideo: \" + _isVideo.toString());\n\t\t\tlogMessage(\"smoothing: \" + _enableSmoothing.toString());\n\t\t\tlogMessage(\"timerrate: \" + _timerRate.toString());\n\t\t\tlogMessage(\"displayState: \" +(stage.hasOwnProperty(\"displayState\")).toString());\n\n\t\t\t// attach javascript\n\t\t\tlogMessage(\"ExternalInterface.available: \" + ExternalInterface.available.toString());\n\t\t\tlogMessage(\"ExternalInterface.objectID: \" + ((ExternalInterface.objectID != null) ? ExternalInterface.objectID.toString() : \"null\"));\n\n\t\t\tif (_mediaUrl != \"\") {\n\t\t\t\t_mediaElement.setSrc(_mediaUrl);\n\t\t\t}\n\n\t\t\tif (_output != null) {\n\t\t\t\taddChild(_output);\n\t\t\t}\n\t\t\tif (_alwaysShowControls) {\n\t\t\t\tpositionControls();\n\t\t\t\t// Fire this once just to set the width on some dynamically sized scrub bar items;\n\t\t\t\t_scrubBar.scaleX=0;\n\t\t\t\t_scrubLoaded.scaleX=0;\n\t\t\t}\n\n\t\t\tif (ExternalInterface.available) {\n\t\t\t\ttry {\n\t\t\t\t\tif (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != \"\") {\n\t\t\t\t\t\t// add HTML media methods\n\t\t\t\t\t\tExternalInterface.addCallback(\"playMedia\", playMedia);\n\t\t\t\t\t\tExternalInterface.addCallback(\"loadMedia\", loadMedia);\n\t\t\t\t\t\tExternalInterface.addCallback(\"pauseMedia\", pauseMedia);\n\t\t\t\t\t\tExternalInterface.addCallback(\"stopMedia\", stopMedia);\n\n\t\t\t\t\t\tExternalInterface.addCallback(\"setSrc\", setSrc);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setCurrentTime\", setCurrentTime);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setVolume\", setVolume);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setMuted\", setMuted);\n\n\t\t\t\t\t\tExternalInterface.addCallback(\"setFullscreen\", setFullscreen);\n\t\t\t\t\t\tExternalInterface.addCallback(\"setVideoSize\", setVideoSize);\n\n\t\t\t\t\t\tExternalInterface.addCallback(\"positionFullscreenButton\", positionFullscreenButton);\n\t\t\t\t\t\tExternalInterface.addCallback(\"hideFullscreenButton\", hideFullscreenButton);\n\t\t\t\t\t\tlogMessage(\"Callbacks using js function \\\"\" + _jsCallbackFunction + \"\\\" bound.\");\n\n\t\t\t\t\t\t// fire init method\n\t\t\t\t\t\tExternalInterface.call(_jsInitFunction, ExternalInterface.objectID);\n\t\t\t\t\t\tlogMessage(\"Init js function \\\"\" + _jsInitFunction + \"\\\" successfully called.\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogMessage(\"ExternalInterface has no object id:\");\n\t\t\t\t\t\tlogMessage(\"    - Init function \\\"\" + _jsInitFunction + \"\\\" will not be called.\");\n\t\t\t\t\t\tlogMessage(\"    - Callback function \\\"\" + _jsCallbackFunction + \"\\\" will not be called.\");\n\t\t\t\t\t}\n\t\t\t\t} catch (error:SecurityError) {\n\t\t\t\t\tlogMessage(\"A SecurityError occurred: \" + error.message);\n\t\t\t\t} catch (error:Error) {\n\t\t\t\t\tlogMessage(\"An Error occurred: \" + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (_preload != \"none\") {\n\t\t\t\t_mediaElement.load();\n\n\t\t\t\tif (_autoplay) {\n\t\t\t\t\t_mediaElement.play();\n\t\t\t\t}\n\t\t\t} else if (_autoplay) {\n\t\t\t\t_mediaElement.load();\n\t\t\t\t_mediaElement.play();\n\t\t\t}\n\n\t\t\t// listen for resize\n\t\t\tstage.addEventListener(Event.RESIZE, resizeHandler);\n\n\t\t\t// send click events up to javascript\n\t\t\tstage.addEventListener(MouseEvent.CLICK, stageClicked);\n\n\t\t\t// resize\n\t\t\tstage.addEventListener(FullScreenEvent.FULL_SCREEN, stageFullScreenChanged);\n\n\t\t\tstage.addEventListener(KeyboardEvent.KEY_DOWN, stageKeyDown);\n\t\t}\n\n\t\tprivate function removeControls():void {\n\t\t\ttry {\n\t\t\t\t_fullscreenButton = _mediaElementDisplay.getChildByName(\"fullscreen_btn\") as SimpleButton;\n\t\t\t\t_fullscreenButton.parent.removeChild(_fullscreenButton);\n\t\t\t\t_controlBar = _mediaElementDisplay.getChildByName(\"controls_mc\") as MovieClip;\n\t\t\t\t_controlBar.parent.removeChild(_controlBar);\n\t\t\t} catch (error:Error) {\n\t\t\t\tlogMessage(\"Failed to remove controls: \" + error.message);\n\t\t\t}\n\t\t}\n\n\t\tprivate function buildControls():void {\n\t\t\t_fullscreenButton = _mediaElementDisplay.getChildByName(\"fullscreen_btn\") as SimpleButton;\n\t\t\t_fullscreenButton.visible = _isVideo;\n\t\t\t_fullscreenButton.alpha = 0;\n\t\t\t_fullscreenButton.addEventListener(MouseEvent.CLICK, fullscreenClick, false);\n\t\t\t_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width;\n\t\t\t_fullscreenButton.y = 0;\n\n\t\t\t_controlBar = _mediaElementDisplay.getChildByName(\"controls_mc\") as MovieClip;\n\t\t\t_controlBarBg = _controlBar.getChildByName(\"controls_bg_mc\") as MovieClip;\n\t\t\t_scrubTrack = _controlBar.getChildByName(\"scrubTrack\") as MovieClip;\n\t\t\t_scrubBar = _controlBar.getChildByName(\"scrubBar\") as MovieClip;\n\t\t\t_scrubOverlay = _controlBar.getChildByName(\"scrubOverlay\") as MovieClip;\n\t\t\t_scrubLoaded = _controlBar.getChildByName(\"scrubLoaded\") as MovieClip;\n\n\t\t\t_scrubOverlay.buttonMode = true;\n\t\t\t_scrubOverlay.useHandCursor = true;\n\n\t\t\tapplyColor(_scrubTrack, _scrubTrackColor);\n\t\t\tapplyColor(_scrubBar, _scrubBarColor);\n\t\t\tapplyColor(_scrubLoaded, _scrubLoadedColor);\n\n\t\t\t_fullscreenIcon = _controlBar.getChildByName(\"fullscreenIcon\") as SimpleButton;\n\t\t\t_fullscreenIcon.visible = _isVideo;\n\t\t\t_fullscreenIcon.addEventListener(MouseEvent.CLICK, fullScreenIconClick, false);\n\n\t\t\t_volumeMuted = _controlBar.getChildByName(\"muted_mc\") as SimpleButton;\n\t\t\t_volumeUnMuted = _controlBar.getChildByName(\"unmuted_mc\") as SimpleButton;\n\n\t\t\t_volumeMuted.addEventListener(MouseEvent.CLICK, toggleVolume, false);\n\t\t\t_volumeUnMuted.addEventListener(MouseEvent.CLICK, toggleVolume, false);\n\n\t\t\t_playButton = _controlBar.getChildByName(\"play_btn\") as SimpleButton;\n\t\t\t_playButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {\n\t\t\t\t_mediaElement.play();\n\t\t\t});\n\t\t\t_pauseButton = _controlBar.getChildByName(\"pause_btn\") as SimpleButton;\n\t\t\t_pauseButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {\n\t\t\t\t_mediaElement.pause();\n\t\t\t});\n\t\t\t_pauseButton.visible = false;\n\t\t\t_duration = _controlBar.getChildByName(\"duration_txt\") as TextField;\n\t\t\t_currentTime = _controlBar.getChildByName(\"currentTime_txt\") as TextField;\n\t\t\t_hoverTime = _controlBar.getChildByName(\"hoverTime\") as MovieClip;\n\t\t\t_hoverTimeText = _hoverTime.getChildByName(\"hoverTime_txt\") as TextField;\n\t\t\t_hoverTime.visible=false;\n\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t_hoverTime.x=0;\n\n\t\t\t// Add new timeline scrubber events\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.MOUSE_MOVE, scrubMove);\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.CLICK, scrubClick);\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.MOUSE_OVER, scrubOver);\n\t\t\t_scrubOverlay.addEventListener(MouseEvent.MOUSE_OUT, scrubOut);\n\n\t\t\tif (_controlsAutoHide) {\n\t\t\t\t// Add mouse activity for show/hide of controls\n\t\t\t\tstage.addEventListener(Event.MOUSE_LEAVE, mouseActivityLeave);\n\t\t\t\tstage.addEventListener(MouseEvent.MOUSE_MOVE, mouseActivityMove);\n\t\t\t\t_inactiveTime = 2500;\n\t\t\t\t_timer = new Timer(_inactiveTime)\n\t\t\t\t_timer.addEventListener(TimerEvent.TIMER, idleTimer);\n\t\t\t\t_timer.start();\n\t\t\t}\n\n\t\t\tif (_startVolume <= 0) {\n\t\t\t\tlogMessage(\"INITIAL VOLUME: \"+_startVolume+\" MUTED\");\n\t\t\t\t_volumeMuted.visible=true;\n\t\t\t\t_volumeUnMuted.visible=false;\n\t\t\t} else {\n\t\t\t\tlogMessage(\"INITIAL VOLUME: \"+_startVolume+\" UNMUTED\");\n\t\t\t\t_volumeMuted.visible=false;\n\t\t\t\t_volumeUnMuted.visible=true;\n\t\t\t}\n\n\t\t\t_controlBar.visible = _alwaysShowControls;\n\n\t\t\tsetControlDepth();\n\t\t}\n\n\t\tpublic function setControlDepth():void {\n\t\t\t//if (!_alwaysShowControls) {\n\t\t\t//\treturn;\n\t\t\t//}\n\t\t\t// put these on top\n\t\t\tif (_output != null) {\n\t\t\t\taddChild(_output);\n\t\t\t}\n\t\t\taddChild(_controlBar);\n\t\t\taddChild(_fullscreenButton);\n\t\t}\n\n\t\tpublic function logMessage(txt:String):void {\n\t\t\tif (!_debug) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tExternalInterface.call(\"console.log\", txt);\n\t\t\t\n\t\t\tif (_output != null) {\n\t\t\t\t_output.appendText(txt + \"\\n\");\n\t\t\t\tif (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != \"\") {\n\t\t\t\t\tvar pattern:RegExp = /'/g; //'\n\t\t\t\t\tExternalInterface.call(\"setTimeout\", _jsCallbackFunction + \"('\" + ExternalInterface.objectID + \"','message','\" + txt.replace(pattern, \"\u2019\") + \"')\", 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate function isIllegalQuerystring():Boolean {\n\t\t\tvar query:String = '';\n\t\t\tvar pos:Number = root.loaderInfo.url.indexOf('?') ;\n\t\t\t\n\t\t\tif ( pos > -1 ) {\n\t\t\t    query = root.loaderInfo.url.substring( pos );\n\t\t\t    if ( ! /^\\?\\d+$/.test( query ) ) {\n\t\t\t        return true;\n\t\t\t    }\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate static function trim(str:String) : String {\n\t\t\tif (!str) {\n\t\t\t\treturn str;\n\t\t\t}\n\n\t\t\treturn str.toString().replace(/^\\s*/, '').replace(/\\s*$/, '');\n\t\t}\n\n\t\t// START: Controls and events\n\t\tprivate function mouseActivityMove(event:MouseEvent):void {\n\n\t\t\t// if mouse is in the video area\n\t\t\tif (_controlsAutoHide && (mouseX>=0 && mouseX<=stage.stageWidth) && (mouseY>=0 && mouseY<=stage.stageHeight)) {\n\t\t\t\t// This could be move to a nice fade at some point...\n\t\t\t\t_controlBar.visible = (_alwaysShowControls || _isFullScreen);\n\t\t\t\t_isMouseActive = true;\n\t\t\t\t_idleTime = 0;\n\t\t\t\t_timer.reset();\n\t\t\t\t_timer.start()\n\t\t\t}\n\t\t}\n\n\t\tprivate function mouseActivityLeave(event:Event):void {\n\t\t\tif (_controlsAutoHide) {\n\t\t\t\t_isOverStage = false;\n\t\t\t\t// This could be move to a nice fade at some point...\n\t\t\t\t_controlBar.visible = false;\n\t\t\t\t_isMouseActive = false;\n\t\t\t\t_idleTime = 0;\n\t\t\t\t_timer.reset();\n\t\t\t\t_timer.stop();\n\t\t\t}\n\t\t}\n\n\t\tprivate function idleTimer(event:TimerEvent):void    {\n\t\t\tif (_controlsAutoHide) {\n\t\t\t\t// This could be move to a nice fade at some point...\n\t\t\t\t_controlBar.visible = false;\n\t\t\t\t_isMouseActive = false;\n\t\t\t\t_idleTime += _inactiveTime;\n\t\t\t\t_idleTime = 0;\n\t\t\t\t_timer.reset();\n\t\t\t\t_timer.stop();\n\t\t\t}\n\t\t}\n\n\t\tprivate function scrubMove(event:MouseEvent):void {\n\t\t\tif (_hoverTime.visible) {\n\t\t\t\tvar seekBarPosition:Number =  ((event.localX / _scrubTrack.width) *_mediaElement.duration())*_scrubTrack.scaleX;\n\t\t\t\tvar hoverPos:Number = (seekBarPosition / _mediaElement.duration()) *_scrubTrack.scaleX;\n\n\t\t\t\tif (_isFullScreen) {\n\t\t\t\t\t_hoverTime.x=event.target.parent.mouseX;\n\t\t\t\t} else {\n\t\t\t\t\t_hoverTime.x=mouseX;\n\t\t\t\t}\n\t\t\t\t_hoverTime.y = _scrubBar.y - (_hoverTime.height/2);\n\t\t\t\t_hoverTimeText.text = secondsToTimeCode(seekBarPosition);\n\t\t\t}\n\t\t}\n\n\t\tprivate function scrubOver(event:MouseEvent):void {\n\t\t\t_hoverTime.y = _scrubBar.y-(_hoverTime.height/2)+1;\n\t\t\t_hoverTime.visible = true;\n\t\t\t//logMessage(event);\n\t\t}\n\n\t\tprivate function scrubOut(event:MouseEvent):void {\n\t\t\t_hoverTime.y = _scrubBar.y+(_hoverTime.height/2)+1;\n\t\t\t_hoverTime.visible = false;\n\t\t\t//_hoverTime.x=0;\n\t\t\t//logMessage(event);\n\t\t}\n\n\t\tprivate function scrubClick(event:MouseEvent):void {\n\t\t\t//logMessage(event);\n\t\t\tvar seekBarPosition:Number = ((event.localX / _scrubTrack.width) * _mediaElement.duration()) * _scrubTrack.scaleX;\n\n\t\t\tvar canSeekToPosition:Boolean = isNaN(_mediaElement.seekLimit()) ||  (seekBarPosition <= _mediaElement.duration() && seekBarPosition >= 0);\n\n\t\t\tif (canSeekToPosition) {\n\t\t\t\t_mediaElement.setCurrentTime(seekBarPosition);\n\t\t\t}\n\t\t}\n\n\t\tpublic function toggleVolume(event:MouseEvent):void {\n\t\t\t//logMessage(event.currentTarget.name);\n\t\t\tswitch(event.currentTarget.name) {\n\t\t\t\tcase \"muted_mc\":\n\t\t\t\t\tsetMuted(false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"unmuted_mc\":\n\t\t\t\t\tsetMuted(true);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tprivate function toggleVolumeIcons(volume:Number):void {\n\t\t\tif (volume <= 0) {\n\t\t\t\t_volumeMuted.visible = true;\n\t\t\t\t_volumeUnMuted.visible = false;\n\t\t\t} else {\n\t\t\t\t_volumeMuted.visible = false;\n\t\t\t\t_volumeUnMuted.visible = true;\n\t\t\t}\n\t\t}\n\n\t\tprivate function positionControls(forced:Boolean=false):void {\n\t\t\t//if (!_alwaysShowControls) {\n\t\t\t//\treturn;\n\t\t\t//}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvar contWidth:Number;\n\t\t\tvar contHeight:Number;\n\t\t\tif (_isFullScreen) {\n\t\t\t\tcontWidth = stage.fullScreenWidth;\n\t\t\t\tcontHeight = stage.fullScreenHeight;\n\t\t\t} else {\n\t\t\t\tcontWidth = stage.stageWidth;\n\t\t\t\tcontHeight = stage.stageHeight;\n\t\t\t}\n\n\t\t\tif (_controlsStyle.toUpperCase() == \"FLOATING\" && _isFullScreen) {\n\t\t\t\ttrace(\"CONTROLS: floating\");\n\t\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t\t_hoverTime.x=0;\n\t\t\t\t_controlBarBg.width = 300;\n\t\t\t\t_controlBarBg.height = 93;\n\t\t\t\t//_controlBarBg.x = (contWidth/2) - (_controlBarBg.width/2);\n\t\t\t\t//_controlBarBg.y  = contHeight - 300;\n\n\t\t\t\t_pauseButton.scaleX = _playButton.scaleX=3.5;\n\t\t\t\t_pauseButton.scaleY= _playButton.scaleY=3.5;\n\t\t\t\t// center the play button and make it big and at the top\n\t\t\t\t_pauseButton.x = _playButton.x = (_controlBarBg.width/2)-(_playButton.width/2)+7;\n\t\t\t\t_pauseButton.y = _playButton.y = _controlBarBg.height-_playButton.height-(14)\n\n\t\t\t\t_controlBar.x = (contWidth/2) -150;\n\t\t\t\t_controlBar.y = contHeight - _controlBar.height-100;\n\n\t\t\t\t// reposition the time and duration items\n\n\t\t\t\t_duration.x = _controlBarBg.width - _duration.width - 10;\n\t\t\t\t_duration.y = _controlBarBg.height - _duration.height -7;\n\t\t\t\t//_currentTime.x = _controlBarBg.width - _duration.width - 10 - _currentTime.width - 10;\n\t\t\t\t_currentTime.x = 5\n\t\t\t\t_currentTime.y= _controlBarBg.height - _currentTime.height-7;\n\n\t\t\t\t_fullscreenIcon.x = _controlBarBg.width - _fullscreenIcon.width - 7;\n\t\t\t\t_fullscreenIcon.y = 7;\n\n\t\t\t\t_volumeMuted.x = _volumeUnMuted.x = 7;\n\t\t\t\t_volumeMuted.y = _volumeUnMuted.y = 7;\n\n\t\t\t\t_scrubLoaded.x = _scrubBar.x = _scrubOverlay.x = _scrubTrack.x =_currentTime.x+_currentTime.width+7;\n\t\t\t\t_scrubLoaded.y = _scrubBar.y = _scrubOverlay.y = _scrubTrack.y=_controlBarBg.height-_scrubTrack.height-10;\n\n\t\t\t\t_scrubBar.width =  _scrubOverlay.width = _scrubTrack.width = (_duration.x-_duration.width-14);\n\n\t\t\t} else {\n\t\t\t\ttrace(\"CONTROLS: normal, original\");\n\t\t\t\t/*\n\t\t\t\t// Original style bottom display\n\t\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t\t_hoverTime.x=0;\n\t\t\t\t_controlBarBg.width = contWidth;\n\t\t\t\t_controlBar.y = contHeight - _controlBar.height;\n\t\t\t\t_duration.x = contWidth - _duration.width - 10;\n\t\t\t\t//_currentTime.x = contWidth - _duration.width - 10 - _currentTime.width - 10;\n\t\t\t\t_currentTime.x = _playButton.x+_playButton.width;\n\t\t\t\t_scrubTrack.width = (_duration.x-_duration.width-10)-_duration.width+10;\n\t\t\t\t_scrubOverlay.width = _scrubTrack.width;\n\t\t\t\t_scrubBar.width = _scrubTrack.width;\n\t\t\t\t*/\n\n\t\t\t\t// FLOATING MODE BOTTOM DISPLAY - similar to normal\n\t\t\t\ttrace(\"THAT WAY!\");\n\t\t\t\t_hoverTime.y=(_hoverTime.height/2)+1;\n\t\t\t\t_hoverTime.x=0;\n\t\t\t\t_controlBarBg.width = contWidth;\n\t\t\t\t_controlBarBg.height = 30;\n\t\t\t\t_controlBarBg.y=0;\n\t\t\t\t_controlBarBg.x=0;\n\t\t\t\t// _controlBarBg.x = 0;\n\t\t\t\t// _controlBarBg.y  = contHeight - _controlBar.height;\n\n\t\t\t\t_pauseButton.scaleX = _playButton.scaleX=1;\n\t\t\t\t_pauseButton.scaleY = _playButton.scaleY=1;\n\n\t\t\t\t_pauseButton.x = _playButton.x = 7;\n\t\t\t\t_pauseButton.y = _playButton.y = _controlBarBg.height-_playButton.height-2;\n\n\n\t\t\t\t//_currentTime.x = contWidth - _duration.width - 10 - _currentTime.width - 10;\n\t\t\t\t_currentTime.x = _playButton.x+_playButton.width;\n\n\t\t\t\t_fullscreenIcon.x = _controlBarBg.width - _fullscreenIcon.width - 7;\n\t\t\t\t_fullscreenIcon.y = 8;\n\n\t\t\t\t_volumeMuted.x = _volumeUnMuted.x = (_isVideo ? _fullscreenIcon.x : _controlBarBg.width) - _volumeMuted.width - 10;\n\t\t\t\t_volumeMuted.y = _volumeUnMuted.y = 10;\n\n\t\t\t\t_duration.x = _volumeMuted.x - _volumeMuted.width - _duration.width + 5;\n\t\t\t\t_duration.y = _currentTime.y = _controlBarBg.height - _currentTime.height - 7;\n\n\t\t\t\t_scrubLoaded.x = _scrubBar.x = _scrubOverlay.x = _scrubTrack.x = _currentTime.x + _currentTime.width + 10;\n\t\t\t\t_scrubLoaded.y = _scrubBar.y = _scrubOverlay.y = _scrubTrack.y = _controlBarBg.height - _scrubTrack.height - 9;\n\n\t\t\t\t_scrubBar.width =  _scrubOverlay.width = _scrubTrack.width =  (_duration.x-_duration.width-10)-_duration.width+5;\n\t\t\t\t_controlBar.x = 0;\n\t\t\t\t_controlBar.y = contHeight - _controlBar.height;\n\t\t\t}\n\t\t}\n\t\t// END: Controls\n\n\t\tpublic function stageClicked(e:MouseEvent):void {\n\t\t\t//logMessage(\"click: \" + e.stageX.toString() +\",\"+e.stageY.toString() + \"\\n\");\n\t\t\tif (e.target == stage) {\n\t\t\t\tsendEvent(\"click\", \"\");\n\t\t\t}\n\t\t}\n\n\t\tpublic function stageKeyDown(e:KeyboardEvent):void {\n\t\t\tsendEvent(HtmlMediaEvent.KEYDOWN, \"keyCode:'\" + e.keyCode + \"'\");\n\t\t}\n\n\t\tpublic function resizeHandler(e:Event):void {\n\t\t\trepositionVideo();\n\t\t}\n\n\t\t// START: Fullscreen\n\t\tprivate function enterFullscreen():void {\n\t\t\tlogMessage(\"enterFullscreen()\");\n\n\t\t\tvar screenRectangle:Rectangle = new Rectangle(0, 0, stage.fullScreenWidth, stage.fullScreenHeight);\n\t\t\tstage.fullScreenSourceRect = screenRectangle;\n\n\t\t\tstage.displayState = StageDisplayState.FULL_SCREEN;\n\n\t\t\trepositionVideo();\n\n\t\t\t//if (_alwaysShowControls) {\n\t\t\t\t_controlBar.visible = true;\n\t\t\t\tupdateControls(HtmlMediaEvent.FULLSCREENCHANGE);\t\t\t\t\n\t\t\t//}\n\n\t\t\t_isFullScreen = true;\n\t\t}\n\n\t\tprivate function exitFullscreen():void {\n\t\t\tstage.displayState = StageDisplayState.NORMAL;\n\n\t\t\trepositionVideo();\n\n\t\t\tif (!_alwaysShowControls) {\n\t\t\t\t_controlBar.visible = false;\n\t\t\t}\n\n\t\t\t_isFullScreen = false;\n\t\t}\n\n\t\tpublic function setFullscreen(gofullscreen:Boolean):void {\n\n\t\t\tlogMessage(\"setFullscreen: \" + gofullscreen.toString());\n\n\t\t\ttry {\n\t\t\t\tif (gofullscreen) {\n\t\t\t\t\tenterFullscreen();\n\t\t\t\t} else {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t}\n\t\t\t} catch (error:Error) {\n\t\t\t\t// show the button when the security error doesn't let it work\n\t\t\t\tif (_fullscreenButton != null) {\n\t\t\t\t\t_fullscreenButton.alpha = 1;\n\t\t\t\t}\n\n\t\t\t\t_isFullScreen = false;\n\n\t\t\t\tlogMessage(\"error setting fullscreen: \" + error.message.toString());\n\t\t\t}\n\t\t}\n\n\t\t// control bar button/icon\n\t\tpublic function fullScreenIconClick(e:MouseEvent):void {\n\t\t\ttry {\n\t\t\t\t_controlBar.visible = true;\n\t\t\t\tsetFullscreen(!_isFullScreen);\n\t\t\t\trepositionVideo();\n\t\t\t} catch (error:Error) {\n\t\t\t}\n\t\t}\n\n\t\t// special floating fullscreen icon\n\t\tpublic function fullscreenClick(e:MouseEvent):void {\n\t\t\thideFullscreenButton();\n\n\t\t\ttry {\n\t\t\t\t//if (_alwaysShowControls) {\n\t\t\t\t\t_controlBar.visible = true;\n\t\t\t\t//}\n\t\t\t\tsetFullscreen(true);\n\t\t\t\trepositionVideo();\n\t\t\t\tpositionControls();\n\t\t\t} catch (error:Error) {\n\t\t\t}\n\t\t}\n\n\n\t\tpublic function stageFullScreenChanged(e:FullScreenEvent):void {\n\t\t\tlogMessage(\"fullscreen event: \" + e.fullScreen.toString());\n\n\t\t\t_isFullScreen = e.fullScreen;\n\t\t\t\n\t\t\tif (!_isFullScreen) {\n\t\t\t\t_controlBar.visible = _alwaysShowControls;\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\trepositionVideo();\t\t\t\n\t\t\thideFullscreenButton();\n\n\t\t\tsendEvent(HtmlMediaEvent.FULLSCREENCHANGE, \"isFullScreen:\" + e.fullScreen );\n\n\n\t\t}\n\t\t// END: Fullscreen\n\n\t\t// START: external interface\n\t\tpublic function playMedia():void {\n\t\t\tlogMessage(\"play\");\n\t\t\t_mediaElement.play();\n\t\t}\n\n\t\tpublic function loadMedia():void {\n\t\t\tlogMessage(\"load\");\n\t\t\t_mediaElement.load();\n\t\t}\n\n\t\tpublic function pauseMedia():void {\n\t\t\tlogMessage(\"pause\");\n\t\t\t_mediaElement.pause();\n\t\t}\n\n\t\tpublic function setSrc(url:String):void {\n\t\t\tlogMessage(\"setSrc: \" + url);\n\t\t\t_mediaElement.setSrc(url);\n\t\t}\n\n\t\tpublic function stopMedia():void {\n\t\t\tlogMessage(\"stop\");\n\t\t\t_mediaElement.stop();\n\t\t}\n\n\t\tpublic function setCurrentTime(time:Number):void {\n\t\t\tlogMessage(\"seek: \" + time.toString());\n\t\t\t_mediaElement.setCurrentTime(time);\n\t\t}\n\n\t\tpublic function setVolume(volume:Number):void {\n\t\t\tlogMessage(\"volume: \" + volume.toString());\n\t\t\t_mediaElement.setVolume(volume);\n\t\t\ttoggleVolumeIcons(volume);\n\t\t}\n\n\t\tpublic function setMuted(muted:Boolean):void {\n\t\t\tlogMessage(\"muted: \" + muted.toString());\n\t\t\t_mediaElement.setMuted(muted);\n\t\t\ttoggleVolumeIcons(_mediaElement.getVolume());\n\t\t}\n\n\t\tpublic function setVideoSize(width:Number, height:Number):void {\n\t\t\tlogMessage(\"setVideoSize: \" + width.toString() + \",\" + height.toString());\n\n\t\t\tif (_video != null) {\n\t\t\t\trepositionVideo();\n\t\t\t\tpositionControls();\n\t\t\t\tlogMessage(\"result: \" + _video.width.toString() + \",\" + _video.height.toString());\n\t\t\t}\n\t\t}\n\n\t\tpublic function positionFullscreenButton(x:Number, y:Number, visibleAndAbove:Boolean ):void {\n\t\t\tlogMessage(\"position FS: \" + x.toString() + \"x\" + y.toString());\n\t\t\t//if (!_fullscreenButton)\n\t\t\t//\treturn;\n\n\t\t\t// position just above\n\t\t\tif (visibleAndAbove) {\n\t\t\t\t_fullscreenButton.x = x+1;\n\t\t\t\t_fullscreenButton.y = y - _fullscreenButton.height+1;\n\t\t\t} else {\n\t\t\t\t_fullscreenButton.x = x;\n\t\t\t\t_fullscreenButton.y = y;\n\t\t\t}\n\n\t\t\t// check for oversizing\n\t\t\tif ((_fullscreenButton.x + _fullscreenButton.width) > stage.stageWidth)\n\t\t\t\t_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width;\n\n\t\t\t// show it!\n\t\t\tif (visibleAndAbove) {\n\t\t\t\t_fullscreenButton.alpha = 1;\n\t\t\t}\n\t\t}\n\n\t\tpublic function hideFullscreenButton():void {\n\t\t\tif (_fullscreenButton != null) {\n\t\t\t\t_fullscreenButton.alpha = 0;\n\t\t\t}\n\t\t}\n\t\t// END: external interface\n\n\t\tprivate function repositionVideo():void {\n\t\t\tvar fill:Boolean = _fill;\n\t\t\tvar contWidth:Number;\n\t\t\tvar contHeight:Number;\n\t\t\tif (_isFullScreen) {\n\t\t\t\tcontWidth = stage.fullScreenWidth;\n\t\t\t\tcontHeight = stage.fullScreenHeight;\n\t\t\t} else {\n\t\t\t\tcontWidth = stage.stageWidth;\n\t\t\t\tcontHeight = stage.stageHeight;\n\t\t\t}\n\n\t\t\tlogMessage(\"Positioning video (\"+stage.displayState+\"). Container size: \"+contWidth+\"x\"+contHeight+\".\");\n\n\t\t\tif (_mediaElement is VideoElement || _mediaElement is HLSMediaElement) {\n\t\t\t\tif (_isFullScreen && fill) {\n\t\t\t\t\tfill = false;\n\t\t\t\t}\n\t\t\t\tif (isNaN(_nativeVideoWidth) || isNaN(_nativeVideoHeight) || _nativeVideoWidth <= 0 || _nativeVideoHeight <= 0) {\n\t\t\t\t\tlogMessage(\"Positionning: video's native dimension not found, using stage size.\");\n\t\t\t\t\tfill = true;\n\t\t\t\t}\n\t\t\t\t// calculate ratios\n\t\t\t\tvar stageRatio:Number, nativeRatio:Number;\n\t\t\t\t_video.x = 0;\n\t\t\t\t_video.y = 0;\n\t\t\t\tif (fill) {\n\t\t\t\t\t_mediaElement.setSize(contWidth, contHeight);\n\t\t\t\t} else {\n\t\t\t\t\tstageRatio = contWidth/contHeight;\n\t\t\t\t\tnativeRatio = _nativeVideoWidth/_nativeVideoHeight;\n\t\t\t\t\t// adjust size and position\n\t\t\t\t\tif (nativeRatio > stageRatio) {\n\t\t\t\t\t\t_mediaElement.setSize(contWidth, _nativeVideoHeight * contWidth / _nativeVideoWidth);\n\t\t\t\t\t\t_video.y = contHeight/2 - _video.height/2;\n\t\t\t\t\t} else if (stageRatio > nativeRatio) {\n\t\t\t\t\t\t_mediaElement.setSize(_nativeVideoWidth * contHeight / _nativeVideoHeight, contHeight);\n\t\t\t\t\t\t_video.x = contWidth/2 - _video.width/2;\n\t\t\t\t\t} else if (stageRatio == nativeRatio) {\n\t\t\t\t\t\t_mediaElement.setSize(contWidth, contHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (_mediaElement is YouTubeElement || _mediaElement is DailyMotionElement) {\n\t\t\t\t_mediaElement.setSize(contWidth, contHeight);\n\t\t\t}\n\t\t\tpositionControls();\n\t\t}\n\n\t\t// SEND events to JavaScript\n\t\tpublic function sendEvent(eventName:String, eventValues:String):void {\n\n\t\t\t// special video event\n\t\t\tif (eventName == HtmlMediaEvent.LOADEDMETADATA && _isVideo) {\n\n\t\t\t\tlogMessage(\"Metadata received:\");\n\n\t\t\t\ttry {\n\t\t\t\t\tif (_mediaElement is VideoElement) {\n\t\t\t\t\t\t_nativeVideoWidth = (_mediaElement as VideoElement).videoWidth;\n\t\t\t\t\t\t_nativeVideoHeight = (_mediaElement as VideoElement).videoHeight;\n\t\t\t\t\t} else if (_mediaElement is HLSMediaElement) {\n\t\t\t\t\t\t_nativeVideoWidth = (_mediaElement as HLSMediaElement).videoWidth;\n\t\t\t\t\t\t_nativeVideoHeight = (_mediaElement as HLSMediaElement).videoHeight;\n\n\t\t\t\t\t\t// Can not get video dimensions from HLS stream, use parameters in FlashVars instead.\n\t\t\t\t\t\tif (isNaN(_nativeVideoWidth) || isNaN(_nativeVideoHeight) || _nativeVideoWidth <= 0 || _nativeVideoHeight <= 0) {\n\t\t\t\t\t\t\t_nativeVideoWidth = _paramVideoWidth;\n\t\t\t\t\t\t\t_nativeVideoHeight = _paramVideoHeight;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e:Error) {\n\t\t\t\t\tlogMessage(\"    No resolution: \" + e.toString());\n\t\t\t\t}\n\n\t\t\t\tlogMessage(\"    Resolution: \" + _nativeVideoWidth.toString() + \"x\" + _nativeVideoHeight.toString());\n\n\t\t\t\tif (_isFullScreen) {\n\t\t\t\t\tsetVideoSize(_nativeVideoWidth, _nativeVideoHeight);\n\t\t\t\t}\n\t\t\t\trepositionVideo();\n\t\t\t}\n\n\t\t\tupdateControls(eventName);\n\n\t\t\t//trace((_mediaElement.duration()*1).toString() + \" / \" + (_mediaElement.currentTime()*1).toString());\n\t\t\t//trace(\"CurrentProgress:\"+_mediaElement.currentProgress());\n\n\t\t\tif (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != \"\") {\n\t\t\t\t//logMessage(\"event:\" + eventName + \" : \" + eventValues);\n\t\t\t\t//trace(\"event\", eventName, eventValues);\n\n\t\t\t\tif (eventValues == null)\n\t\t\t\t\teventValues == \"\";\n\n\t\t\t\tif (_isVideo) {\n\t\t\t\t\teventValues += (eventValues != \"\" ? \",\" : \"\") + \"isFullScreen:\" + _isFullScreen;\n\t\t\t\t}\n\n\t\t\t\teventValues = \"{\" + eventValues + \"}\";\n\n\t\t\t\t// use set timeout for performance reasons\n\t\t\t\tExternalInterface.call(\"setTimeout\", _jsCallbackFunction + \"('\" + ExternalInterface.objectID + \"','\" + eventName + \"',\" + eventValues + \")\", 0);\n\t\t\t}\n\t\t}\n\n\n\t\tprivate function updateControls(eventName:String):void {\n\t\t\t//if (!_controls.visible) {\n\t\t\t//\treturn;\n\t\t\t//}\n\n\t\t\tlogMessage(\"updating controls\");\n\t\t\ttry {\n\t\t\t\tswitch (eventName) {\n\t\t\t\t\tcase \"pause\":\n\t\t\t\t\tcase \"paused\":\n\t\t\t\t\tcase \"ended\":\n\t\t\t\t\t\t_playButton.visible = true;\n\t\t\t\t\t\t_pauseButton.visible = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"play\":\n\t\t\t\t\tcase \"playing\":\n\t\t\t\t\t\t_playButton.visible = false;\n\t\t\t\t\t\t_pauseButton.visible = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (eventName == HtmlMediaEvent.TIMEUPDATE ||\n\t\t\t\t\teventName == HtmlMediaEvent.PROGRESS ||\n\t\t\t\t\teventName == HtmlMediaEvent.FULLSCREENCHANGE) {\n\n\t\t\t\t\t//_duration.text = (_mediaElement.duration()*1).toString();\n\t\t\t\t\t_duration.text =  secondsToTimeCode(_mediaElement.duration());\n\t\t\t\t\t//_currentTime.text = (_mediaElement.currentTime()*1).toString();\n\t\t\t\t\t_currentTime.text =  secondsToTimeCode(_mediaElement.currentTime());\n\n\t\t\t\t\tvar pct:Number =  (_mediaElement.currentTime() / _mediaElement.duration()) *_scrubTrack.scaleX;\n\n\t\t\t\t\t_scrubBar.scaleX = pct;\n\t\t\t\t\t_scrubLoaded.scaleX = (_mediaElement.currentProgress()*_scrubTrack.scaleX)/100;\n\t\t\t\t}\n\t\t\t} catch (error:Error) {\n\t\t\t\tlogMessage(\"Failed to update controls: \" + error.toString());\n\t\t\t}\n\t\t}\n\n\t\t// START: utility\n\t\tprivate function secondsToTimeCode(seconds:Number):String {\n\t\t\tvar timeCode:String = \"\";\n\t\t\tseconds = Math.round(seconds);\n\t\t\tvar minutes:Number = Math.floor(seconds / 60);\n\t\t\ttimeCode = (minutes >= 10) ? minutes.toString() : \"0\" + minutes.toString();\n\t\t\tseconds = Math.floor(seconds % 60);\n\t\t\ttimeCode += \":\" + ((seconds >= 10) ? seconds.toString() : \"0\" + seconds.toString());\n\t\t\treturn timeCode; //minutes.toString() + \":\" + seconds.toString();\n\t\t}\n\n\t\tprivate function applyColor(item:Object, color:String):void {\n\t\t\tvar myColor:ColorTransform = new ColorTransform(0, 0, 0, 1);\n\t\t\tvar components:Array = color.split(\",\");\n\t\t\tswitch (components.length) {\n\t\t\t\tcase 4:\n\t\t\t\t\tmyColor.redOffset = components[0];\n\t\t\t\t\tmyColor.greenOffset = components[1];\n\t\t\t\t\tmyColor.blueOffset = components[2];\n\t\t\t\t\tmyColor.alphaMultiplier = components[3];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tmyColor.redOffset = components[0];\n\t\t\t\t\tmyColor.greenOffset = components[1];\n\t\t\t\t\tmyColor.blueOffset = components[2];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmyColor.color = Number(color);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//trace(\"Length: \"+components.length+\" String: \"+color+\" transform: \"+myColor.toString());\n\t\t\titem.transform.colorTransform = myColor;\n\t\t}\n\t\t// END: utility\n\t}\n}\n", "// Handles calls from Flash/Silverlight and reports them as native <video/audio> events and properties\nmejs.MediaPluginBridge = {\n\n\tpluginMediaElements:{},\n\thtmlMediaElements:{},\n\n\tregisterPluginElement: function (id, pluginMediaElement, htmlMediaElement) {\n\t\tthis.pluginMediaElements[id] = pluginMediaElement;\n\t\tthis.htmlMediaElements[id] = htmlMediaElement;\n\t},\n\n\tunregisterPluginElement: function (id) {\n\t\tdelete this.pluginMediaElements[id];\n\t\tdelete this.htmlMediaElements[id];\n\t},\n\n\t// when Flash/Silverlight is ready, it calls out to this method\n\tinitPlugin: function (id) {\n\n\t\tvar pluginMediaElement = this.pluginMediaElements[id],\n\t\t\thtmlMediaElement = this.htmlMediaElements[id];\n\n\t\tif (pluginMediaElement) {\n\t\t\t// find the javascript bridge\n\t\t\tswitch (pluginMediaElement.pluginType) {\n\t\t\t\tcase \"flash\":\n\t\t\t\t\tpluginMediaElement.pluginElement = pluginMediaElement.pluginApi = document.getElementById(id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"silverlight\":\n\t\t\t\t\tpluginMediaElement.pluginElement = document.getElementById(pluginMediaElement.id);\n\t\t\t\t\tpluginMediaElement.pluginApi = pluginMediaElement.pluginElement.Content.MediaElementJS;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t\tif (pluginMediaElement.pluginApi != null && pluginMediaElement.success) {\n\t\t\t\tpluginMediaElement.success(pluginMediaElement, htmlMediaElement);\n\t\t\t}\n\t\t}\n\t},\n\n\t// receives events from Flash/Silverlight and sends them out as HTML5 media events\n\t// http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html\n\tfireEvent: function (id, eventName, values) {\n\n\t\tvar\n\t\t\te,\n\t\t\ti,\n\t\t\tbufferedTime,\n\t\t\tpluginMediaElement = this.pluginMediaElements[id];\n\n\t\tif(!pluginMediaElement){\n            return;\n        }\n        \n\t\t// fake event object to mimic real HTML media event.\n\t\te = {\n\t\t\ttype: eventName,\n\t\t\ttarget: pluginMediaElement\n\t\t};\n\n\t\t// attach all values to element and event object\n\t\tfor (i in values) {\n\t\t\tpluginMediaElement[i] = values[i];\n\t\t\te[i] = values[i];\n\t\t}\n\n\t\t// fake the newer W3C buffered TimeRange (loaded and total have been removed)\n\t\tbufferedTime = values.bufferedTime || 0;\n\n\t\te.target.buffered = e.buffered = {\n\t\t\tstart: function(index) {\n\t\t\t\treturn 0;\n\t\t\t},\n\t\t\tend: function (index) {\n\t\t\t\treturn bufferedTime;\n\t\t\t},\n\t\t\tlength: 1\n\t\t};\n\n\t\tpluginMediaElement.dispatchEvent(e);\n\t}\n};\n\n/*\nDefault options\n*/\nmejs.MediaElementDefaults = {\n\t// allows testing on HTML5, flash, silverlight\n\t// auto: attempts to detect what the browser can do\n\t// auto_plugin: prefer plugins and then attempt native HTML5\n\t// native: forces HTML5 playback\n\t// shim: disallows HTML5, will attempt either Flash or Silverlight\n\t// none: forces fallback view\n\tmode: 'auto',\n\t// remove or reorder to change plugin priority and availability\n\tplugins: ['flash','silverlight','youtube','vimeo'],\n\t// shows debug errors on screen\n\tenablePluginDebug: false,\n\t// use plugin for browsers that have trouble with Basic Authentication on HTTPS sites\n\thttpsBasicAuthSite: false,\n\t// overrides the type specified, useful for dynamic instantiation\n\ttype: '',\n\t// path to Flash and Silverlight plugins\n\tpluginPath: mejs.Utility.getScriptPath(['mediaelement.js','mediaelement.min.js','mediaelement-and-player.js','mediaelement-and-player.min.js']),\n\t// name of flash file\n\tflashName: 'flashmediaelement.swf',\n\t// streamer for RTMP streaming\n\tflashStreamer: '',\n\t// set to 'always' for CDN version\n\tflashScriptAccess: 'sameDomain',\t\n\t// turns on the smoothing filter in Flash\n\tenablePluginSmoothing: false,\n\t// enabled pseudo-streaming (seek) on .mp4 files\n\tenablePseudoStreaming: false,\n\t// start query parameter sent to server for pseudo-streaming\n\tpseudoStreamingStartQueryParam: 'start',\n\t// name of silverlight file\n\tsilverlightName: 'silverlightmediaelement.xap',\n\t// default if the <video width> is not specified\n\tdefaultVideoWidth: 480,\n\t// default if the <video height> is not specified\n\tdefaultVideoHeight: 270,\n\t// overrides <video width>\n\tpluginWidth: -1,\n\t// overrides <video height>\n\tpluginHeight: -1,\n\t// additional plugin variables in 'key=value' form\n\tpluginVars: [],\t\n\t// rate in milliseconds for Flash and Silverlight to fire the timeupdate event\n\t// larger number is less accurate, but less strain on plugin->JavaScript bridge\n\ttimerRate: 250,\n\t// initial volume for player\n\tstartVolume: 0.8,\n\tsuccess: function () { },\n\terror: function () { }\n};\n\n/*\nDetermines if a browser supports the <video> or <audio> element\nand returns either the native element or a Flash/Silverlight version that\nmimics HTML5 MediaElement\n*/\nmejs.MediaElement = function (el, o) {\n\treturn mejs.HtmlMediaElementShim.create(el,o);\n};\n\nmejs.HtmlMediaElementShim = {\n\n\tcreate: function(el, o) {\n\t\tvar\n\t\t\toptions = {},\n\t\t\thtmlMediaElement = (typeof(el) == 'string') ? document.getElementById(el) : el,\n\t\t\ttagName = htmlMediaElement.tagName.toLowerCase(),\n\t\t\tisMediaTag = (tagName === 'audio' || tagName === 'video'),\n\t\t\tsrc = (isMediaTag) ? htmlMediaElement.getAttribute('src') : htmlMediaElement.getAttribute('href'),\n\t\t\tposter = htmlMediaElement.getAttribute('poster'),\n\t\t\tautoplay =  htmlMediaElement.getAttribute('autoplay'),\n\t\t\tpreload =  htmlMediaElement.getAttribute('preload'),\n\t\t\tcontrols =  htmlMediaElement.getAttribute('controls'),\n\t\t\tplayback,\n\t\t\tprop;\n\n\t\t// extend options\n\t\tfor (prop in mejs.MediaElementDefaults) {\n\t\t\toptions[prop] = mejs.MediaElementDefaults[prop];\n\t\t}\n\t\tfor (prop in o) {\n\t\t\toptions[prop] = o[prop];\n\t\t}\t\t\n\t\t\n\n\t\t// clean up attributes\n\t\tsrc = \t\t(typeof src == 'undefined' \t|| src === null || src == '') ? null : src;\t\t\n\t\tposter =\t(typeof poster == 'undefined' \t|| poster === null) ? '' : poster;\n\t\tpreload = \t(typeof preload == 'undefined' \t|| preload === null || preload === 'false') ? 'none' : preload;\n\t\tautoplay = \t!(typeof autoplay == 'undefined' || autoplay === null || autoplay === 'false');\n\t\tcontrols = \t!(typeof controls == 'undefined' || controls === null || controls === 'false');\n\n\t\t// test for HTML5 and plugin capabilities\n\t\tplayback = this.determinePlayback(htmlMediaElement, options, mejs.MediaFeatures.supportsMediaTag, isMediaTag, src);\n\t\tplayback.url = (playback.url !== null) ? mejs.Utility.absolutizeUrl(playback.url) : '';\n        playback.scheme = mejs.Utility.determineScheme(playback.url);\n\n\t\tif (playback.method == 'native') {\n\t\t\t// second fix for android\n\t\t\tif (mejs.MediaFeatures.isBustedAndroid) {\n\t\t\t\thtmlMediaElement.src = playback.url;\n\t\t\t\thtmlMediaElement.addEventListener('click', function() {\n\t\t\t\t\thtmlMediaElement.play();\n\t\t\t\t}, false);\n\t\t\t}\n\t\t\n\t\t\t// add methods to native HTMLMediaElement\n\t\t\treturn this.updateNative(playback, options, autoplay, preload);\n\t\t} else if (playback.method !== '') {\n\t\t\t// create plugin to mimic HTMLMediaElement\n\t\t\t\n\t\t\treturn this.createPlugin( playback,  options, poster, autoplay, preload, controls);\n\t\t} else {\n\t\t\t// boo, no HTML5, no Flash, no Silverlight.\n\t\t\tthis.createErrorMessage( playback, options, poster );\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t},\n\t\n\tdeterminePlayback: function(htmlMediaElement, options, supportsMediaTag, isMediaTag, src) {\n\t\tvar\n\t\t\tmediaFiles = [],\n\t\t\ti,\n\t\t\tj,\n\t\t\tk,\n\t\t\tl,\n\t\t\tn,\n\t\t\ttype,\n\t\t\tresult = { method: '', url: '', htmlMediaElement: htmlMediaElement, isVideo: (htmlMediaElement.tagName.toLowerCase() != 'audio'), scheme: ''},\n\t\t\tpluginName,\n\t\t\tpluginVersions,\n\t\t\tpluginInfo,\n\t\t\tdummy,\n\t\t\tmedia;\n\t\t\t\n\t\t// STEP 1: Get URL and type from <video src> or <source src>\n\n\t\t// supplied type overrides <video type> and <source type>\n\t\tif (typeof options.type != 'undefined' && options.type !== '') {\n\t\t\t\n\t\t\t// accept either string or array of types\n\t\t\tif (typeof options.type == 'string') {\n\t\t\t\tmediaFiles.push({type:options.type, url:src});\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tfor (i=0; i<options.type.length; i++) {\n\t\t\t\t\tmediaFiles.push({type:options.type[i], url:src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t// test for src attribute first\n\t\t} else if (src !== null) {\n\t\t\ttype = this.formatType(src, htmlMediaElement.getAttribute('type'));\n\t\t\tmediaFiles.push({type:type, url:src});\n\n\t\t// then test for <source> elements\n\t\t} else {\n\t\t\t// test <source> types to see if they are usable\n\t\t\tfor (i = 0; i < htmlMediaElement.childNodes.length; i++) {\n\t\t\t\tn = htmlMediaElement.childNodes[i];\n\t\t\t\tif (n.nodeType == 1 && n.tagName.toLowerCase() == 'source') {\n\t\t\t\t\tsrc = n.getAttribute('src');\n\t\t\t\t\ttype = this.formatType(src, n.getAttribute('type'));\n\t\t\t\t\tmedia = n.getAttribute('media');\n\n\t\t\t\t\tif (!media || !window.matchMedia || (window.matchMedia && window.matchMedia(media).matches)) {\n\t\t\t\t\t\tmediaFiles.push({type:type, url:src});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// in the case of dynamicly created players\n\t\t// check for audio types\n\t\tif (!isMediaTag && mediaFiles.length > 0 && mediaFiles[0].url !== null && this.getTypeFromFile(mediaFiles[0].url).indexOf('audio') > -1) {\n\t\t\tresult.isVideo = false;\n\t\t}\n\t\t\n\n\t\t// STEP 2: Test for playback method\n\t\t\n\t\t// special case for Android which sadly doesn't implement the canPlayType function (always returns '')\n\t\tif (mejs.MediaFeatures.isBustedAndroid) {\n\t\t\thtmlMediaElement.canPlayType = function(type) {\n\t\t\t\treturn (type.match(/video\\/(mp4|m4v)/gi) !== null) ? 'maybe' : '';\n\t\t\t};\n\t\t}\t\t\n\t\t\n\t\t// special case for Chromium to specify natively supported video codecs (i.e. WebM and Theora) \n\t\tif (mejs.MediaFeatures.isChromium) { \n\t\t\thtmlMediaElement.canPlayType = function(type) { \n\t\t\t\treturn (type.match(/video\\/(webm|ogv|ogg)/gi) !== null) ? 'maybe' : ''; \n\t\t\t}; \n\t\t}\n\n\t\t// test for native playback first\n\t\tif (supportsMediaTag && (options.mode === 'auto' || options.mode === 'auto_plugin' || options.mode === 'native')  && !(mejs.MediaFeatures.isBustedNativeHTTPS && options.httpsBasicAuthSite === true)) {\n\t\t\t\t\t\t\n\t\t\tif (!isMediaTag) {\n\n\t\t\t\t// create a real HTML5 Media Element \n\t\t\t\tdummy = document.createElement( result.isVideo ? 'video' : 'audio');\t\t\t\n\t\t\t\thtmlMediaElement.parentNode.insertBefore(dummy, htmlMediaElement);\n\t\t\t\thtmlMediaElement.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// use this one from now on\n\t\t\t\tresult.htmlMediaElement = htmlMediaElement = dummy;\n\t\t\t}\n\t\t\t\t\n\t\t\tfor (i=0; i<mediaFiles.length; i++) {\n\t\t\t\t// normal check\n\t\t\t\tif (mediaFiles[i].type == \"video/m3u8\" || htmlMediaElement.canPlayType(mediaFiles[i].type).replace(/no/, '') !== ''\n\t\t\t\t\t// special case for Mac/Safari 5.0.3 which answers '' to canPlayType('audio/mp3') but 'maybe' to canPlayType('audio/mpeg')\n\t\t\t\t\t|| htmlMediaElement.canPlayType(mediaFiles[i].type.replace(/mp3/,'mpeg')).replace(/no/, '') !== ''\n\t\t\t\t\t// special case for m4a supported by detecting mp4 support\n\t\t\t\t\t|| htmlMediaElement.canPlayType(mediaFiles[i].type.replace(/m4a/,'mp4')).replace(/no/, '') !== '') {\n\t\t\t\t\tresult.method = 'native';\n\t\t\t\t\tresult.url = mediaFiles[i].url;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tif (result.method === 'native') {\n\t\t\t\tif (result.url !== null) {\n\t\t\t\t\thtmlMediaElement.src = result.url;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// if `auto_plugin` mode, then cache the native result but try plugins.\n\t\t\t\tif (options.mode !== 'auto_plugin') {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if native playback didn't work, then test plugins\n\t\tif (options.mode === 'auto' || options.mode === 'auto_plugin' || options.mode === 'shim') {\n\t\t\tfor (i=0; i<mediaFiles.length; i++) {\n\t\t\t\ttype = mediaFiles[i].type;\n\n\t\t\t\t// test all plugins in order of preference [silverlight, flash]\n\t\t\t\tfor (j=0; j<options.plugins.length; j++) {\n\n\t\t\t\t\tpluginName = options.plugins[j];\n\t\t\t\n\t\t\t\t\t// test version of plugin (for future features)\n\t\t\t\t\tpluginVersions = mejs.plugins[pluginName];\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (k=0; k<pluginVersions.length; k++) {\n\t\t\t\t\t\tpluginInfo = pluginVersions[k];\n\t\t\t\t\t\n\t\t\t\t\t\t// test if user has the correct plugin version\n\t\t\t\t\t\t\n\t\t\t\t\t\t// for youtube/vimeo\n\t\t\t\t\t\tif (pluginInfo.version == null || \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmejs.PluginDetector.hasPluginVersion(pluginName, pluginInfo.version)) {\n\n\t\t\t\t\t\t\t// test for plugin playback types\n\t\t\t\t\t\t\tfor (l=0; l<pluginInfo.types.length; l++) {\n\t\t\t\t\t\t\t\t// find plugin that can play the type\n\t\t\t\t\t\t\t\tif (type.toLowerCase() == pluginInfo.types[l].toLowerCase()) {\n\t\t\t\t\t\t\t\t\tresult.method = pluginName;\n\t\t\t\t\t\t\t\t\tresult.url = mediaFiles[i].url;\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// at this point, being in 'auto_plugin' mode implies that we tried plugins but failed.\n\t\t// if we have native support then return that.\n\t\tif (options.mode === 'auto_plugin' && result.method === 'native') {\n\t\t\treturn result;\n\t\t}\n\n\t\t// what if there's nothing to play? just grab the first available\n\t\tif (result.method === '' && mediaFiles.length > 0) {\n\t\t\tresult.url = mediaFiles[0].url;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tformatType: function(url, type) {\n\t\t// if no type is supplied, fake it with the extension\n\t\tif (url && !type) {\t\t\n\t\t\treturn this.getTypeFromFile(url);\n\t\t} else {\n\t\t\t// only return the mime part of the type in case the attribute contains the codec\n\t\t\t// see http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#the-source-element\n\t\t\t// `video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"` becomes `video/mp4`\n\t\t\t\n\t\t\tif (type && ~type.indexOf(';')) {\n\t\t\t\treturn type.substr(0, type.indexOf(';')); \n\t\t\t} else {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetTypeFromFile: function(url) {\n\t\turl = url.split('?')[0];\n\t\tvar\n\t\t\text = url.substring(url.lastIndexOf('.') + 1).toLowerCase(),\n\t\t\tav = /(mp4|m4v|ogg|ogv|m3u8|webm|webmv|flv|wmv|mpeg|mov)/gi.test(ext) ? 'video/' : 'audio/';\n\t\treturn this.getTypeFromExtension(ext, av);\n\t},\n\t\n\tgetTypeFromExtension: function(ext, av) {\n\t\tav = av || '';\n\t\t\n\t\tswitch (ext) {\n\t\t\tcase 'mp4':\n\t\t\tcase 'm4v':\n\t\t\tcase 'm4a':\n\t\t\tcase 'f4v':\n\t\t\tcase 'f4a':\n\t\t\t\treturn av + 'mp4';\n\t\t\tcase 'flv':\n\t\t\t\treturn av + 'x-flv';\n\t\t\tcase 'webm':\n\t\t\tcase 'webma':\n\t\t\tcase 'webmv':\t\n\t\t\t\treturn av + 'webm';\n\t\t\tcase 'ogg':\n\t\t\tcase 'oga':\n\t\t\tcase 'ogv':\t\n\t\t\t\treturn av + 'ogg';\n\t\t\tcase 'm3u8':\n\t\t\t\treturn 'application/x-mpegurl';\n\t\t\tcase 'ts':\n\t\t\t\treturn av + 'mp2t';\n\t\t\tdefault:\n\t\t\t\treturn av + ext;\n\t\t}\n\t},\n\n\tcreateErrorMessage: function(playback, options, poster) {\n\t\tvar \n\t\t\thtmlMediaElement = playback.htmlMediaElement,\n\t\t\terrorContainer = document.createElement('div'),\n\t\t\terrorContent = options.customError;\n\t\t\t\n\t\terrorContainer.className = 'me-cannotplay';\n\n\t\ttry {\n\t\t\terrorContainer.style.width = htmlMediaElement.width + 'px';\n\t\t\terrorContainer.style.height = htmlMediaElement.height + 'px';\n\t\t} catch (e) {}\n\n\t\tif (!errorContent) {\n\t\t\terrorContent = '<a href=\"' + playback.url + '\">';\n\n\t\t\tif (poster !== '') {\n\t\t\t\terrorContent += '<img src=\"' + poster + '\" width=\"100%\" height=\"100%\" alt=\"\" />';\n\t\t\t}\n\n\t\t\terrorContent += '<span>' + mejs.i18n.t('Download File') + '</span></a>';\n\t\t}\n\n\t\terrorContainer.innerHTML = errorContent;\n\n\t\thtmlMediaElement.parentNode.insertBefore(errorContainer, htmlMediaElement);\n\t\thtmlMediaElement.style.display = 'none';\n\n\t\toptions.error(htmlMediaElement);\n\t},\n\n\tcreatePlugin:function(playback, options, poster, autoplay, preload, controls) {\n\t\tvar \n\t\t\thtmlMediaElement = playback.htmlMediaElement,\n\t\t\twidth = 1,\n\t\t\theight = 1,\n\t\t\tpluginid = 'me_' + playback.method + '_' + (mejs.meIndex++),\n\t\t\tpluginMediaElement = new mejs.PluginMediaElement(pluginid, playback.method, playback.url),\n\t\t\tcontainer = document.createElement('div'),\n\t\t\tspecialIEContainer,\n\t\t\tnode,\n\t\t\tinitVars;\n\n\t\t// copy tagName from html media element\n\t\tpluginMediaElement.tagName = htmlMediaElement.tagName\n\n\t\t// copy attributes from html media element to plugin media element\n\t\tfor (var i = 0; i < htmlMediaElement.attributes.length; i++) {\n\t\t\tvar attribute = htmlMediaElement.attributes[i];\n\t\t\tif (attribute.specified) {\n\t\t\t\tpluginMediaElement.setAttribute(attribute.name, attribute.value);\n\t\t\t}\n\t\t}\n\n\t\t// check for placement inside a <p> tag (sometimes WYSIWYG editors do this)\n\t\tnode = htmlMediaElement.parentNode;\n\n\t\twhile (node !== null && node.tagName != null && node.tagName.toLowerCase() !== 'body' && \n\t\t\t\tnode.parentNode != null && node.parentNode.tagName != null && node.parentNode.constructor != null && node.parentNode.constructor.name === \"ShadowRoot\") {\n\t\t\tif (node.parentNode.tagName.toLowerCase() === 'p') {\n\t\t\t\tnode.parentNode.parentNode.insertBefore(node, node.parentNode);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnode = node.parentNode;\n\t\t}\n\n\t\tif (playback.isVideo) {\n\t\t\twidth = (options.pluginWidth > 0) ? options.pluginWidth : (options.videoWidth > 0) ? options.videoWidth : (htmlMediaElement.getAttribute('width') !== null) ? htmlMediaElement.getAttribute('width') : options.defaultVideoWidth;\n\t\t\theight = (options.pluginHeight > 0) ? options.pluginHeight : (options.videoHeight > 0) ? options.videoHeight : (htmlMediaElement.getAttribute('height') !== null) ? htmlMediaElement.getAttribute('height') : options.defaultVideoHeight;\n\t\t\n\t\t\t// in case of '%' make sure it's encoded\n\t\t\twidth = mejs.Utility.encodeUrl(width);\n\t\t\theight = mejs.Utility.encodeUrl(height);\n\t\t\n\t\t} else {\n\t\t\tif (options.enablePluginDebug) {\n\t\t\t\twidth = 320;\n\t\t\t\theight = 240;\n\t\t\t}\n\t\t}\n\n\t\t// register plugin\n\t\tpluginMediaElement.success = options.success;\n\t\tmejs.MediaPluginBridge.registerPluginElement(pluginid, pluginMediaElement, htmlMediaElement);\n\n\t\t// add container (must be added to DOM before inserting HTML for IE)\n\t\tcontainer.className = 'me-plugin';\n\t\tcontainer.id = pluginid + '_container';\n\t\t\n\t\tif (playback.isVideo) {\n\t\t\t\thtmlMediaElement.parentNode.insertBefore(container, htmlMediaElement);\n\t\t} else {\n\t\t\t\tdocument.body.insertBefore(container, document.body.childNodes[0]);\n\t\t}\n\n\t\t// flash/silverlight vars\n\t\tinitVars = [\n\t\t\t'id=' + pluginid,\n\t\t\t'jsinitfunction=' + \"mejs.MediaPluginBridge.initPlugin\",\n\t\t\t'jscallbackfunction=' + \"mejs.MediaPluginBridge.fireEvent\",\n\t\t\t'isvideo=' + ((playback.isVideo) ? \"true\" : \"false\"),\n\t\t\t'autoplay=' + ((autoplay) ? \"true\" : \"false\"),\n\t\t\t'preload=' + preload,\n\t\t\t'width=' + width,\n\t\t\t'startvolume=' + options.startVolume,\n\t\t\t'timerrate=' + options.timerRate,\n\t\t\t'flashstreamer=' + options.flashStreamer,\n\t\t\t'height=' + height,\n\t\t\t'pseudostreamstart=' + options.pseudoStreamingStartQueryParam];\n\n\t\tif (playback.url !== null) {\n\t\t\tif (playback.method == 'flash') {\n\t\t\t\tinitVars.push('file=' + mejs.Utility.encodeUrl(playback.url));\n\t\t\t} else {\n\t\t\t\tinitVars.push('file=' + playback.url);\n\t\t\t}\n\t\t}\n\t\tif (options.enablePluginDebug) {\n\t\t\tinitVars.push('debug=true');\n\t\t}\n\t\tif (options.enablePluginSmoothing) {\n\t\t\tinitVars.push('smoothing=true');\n\t\t}\n\t\tif (options.enablePseudoStreaming) {\n\t\t\tinitVars.push('pseudostreaming=true');\n\t\t}\n\t\tif (controls) {\n\t\t\tinitVars.push('controls=true'); // shows controls in the plugin if desired\n\t\t}\n\t\tif (options.pluginVars) {\n\t\t\tinitVars = initVars.concat(options.pluginVars);\n\t\t}\t\t\n\n\t\tswitch (playback.method) {\n\t\t\tcase 'silverlight':\n\t\t\t\tcontainer.innerHTML =\n'<object data=\"data:application/x-silverlight-2,\" type=\"application/x-silverlight-2\" id=\"' + pluginid + '\" name=\"' + pluginid + '\" width=\"' + width + '\" height=\"' + height + '\" class=\"mejs-shim\">' +\n'<param name=\"initParams\" value=\"' + initVars.join(',') + '\" />' +\n'<param name=\"windowless\" value=\"true\" />' +\n'<param name=\"background\" value=\"black\" />' +\n'<param name=\"minRuntimeVersion\" value=\"3.0.0.0\" />' +\n'<param name=\"autoUpgrade\" value=\"true\" />' +\n'<param name=\"source\" value=\"' + options.pluginPath + options.silverlightName + '\" />' +\n'</object>';\n\t\t\t\t\tbreak;\n\n\t\t\tcase 'flash':\n\n\t\t\t\tif (mejs.MediaFeatures.isIE) {\n\t\t\t\t\tspecialIEContainer = document.createElement('div');\n\t\t\t\t\tcontainer.appendChild(specialIEContainer);\n\t\t\t\t\tspecialIEContainer.outerHTML =\n'<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" ' +\n'id=\"' + pluginid + '\" width=\"' + width + '\" height=\"' + height + '\" class=\"mejs-shim\">' +\n'<param name=\"movie\" value=\"' + options.pluginPath + options.flashName + '?x=' + (new Date().getTime()) + '\" />' +\n'<param name=\"flashvars\" value=\"' + initVars.join('&amp;') + '\" />' +\n'<param name=\"quality\" value=\"high\" />' +\n'<param name=\"bgcolor\" value=\"#000000\" />' +\n'<param name=\"wmode\" value=\"transparent\" />' +\n'<param name=\"allowScriptAccess\" value=\"' + options.flashScriptAccess + '\" />' +\n'<param name=\"allowFullScreen\" value=\"true\" />' +\n'<param name=\"scale\" value=\"default\" />' + \n'</object>';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontainer.innerHTML =\n'<embed id=\"' + pluginid + '\" name=\"' + pluginid + '\" ' +\n'play=\"true\" ' +\n'loop=\"false\" ' +\n'quality=\"high\" ' +\n'bgcolor=\"#000000\" ' +\n'wmode=\"transparent\" ' +\n'allowScriptAccess=\"' + options.flashScriptAccess + '\" ' +\n'allowFullScreen=\"true\" ' +\n'type=\"application/x-shockwave-flash\" pluginspage=\"//www.macromedia.com/go/getflashplayer\" ' +\n'src=\"' + options.pluginPath + options.flashName + '\" ' +\n'flashvars=\"' + initVars.join('&') + '\" ' +\n'width=\"' + width + '\" ' +\n'height=\"' + height + '\" ' +\n'scale=\"default\"' + \n'class=\"mejs-shim\"></embed>';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'youtube':\n\t\t\t\n\t\t\t\t\n\t\t\t\tvar videoId;\n\t\t\t\t// youtu.be url from share button\n\t\t\t\tif (playback.url.lastIndexOf(\"youtu.be\") != -1) {\n\t\t\t\t\tvideoId = playback.url.substr(playback.url.lastIndexOf('/')+1);\n\t\t\t\t\tif (videoId.indexOf('?') != -1) {\n\t\t\t\t\t\tvideoId = videoId.substr(0, videoId.indexOf('?'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvideoId = playback.url.substr(playback.url.lastIndexOf('=')+1);\n\t\t\t\t}\n\t\t\t\tyoutubeSettings = {\n\t\t\t\t\t\tcontainer: container,\n\t\t\t\t\t\tcontainerId: container.id,\n\t\t\t\t\t\tpluginMediaElement: pluginMediaElement,\n\t\t\t\t\t\tpluginId: pluginid,\n\t\t\t\t\t\tvideoId: videoId,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\twidth: width,\n                        scheme: playback.scheme\n\t\t\t\t\t};\t\t\t\t\n\t\t\t\t\n\t\t\t\t// favor iframe version of YouTube\n\t\t\t\tif (window.postMessage) {\n\t\t\t\t\tmejs.YouTubeApi.enqueueIframe(youtubeSettings);\t\t\n\t\t\t\t} else if (mejs.PluginDetector.hasPluginVersion('flash', [10,0,0]) ) {\n\t\t\t\t\tmejs.YouTubeApi.createFlash(youtubeSettings, options);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\t// DEMO Code. Does NOT work.\n\t\t\tcase 'vimeo':\n\t\t\t\tvar player_id = pluginid + \"_player\";\n\t\t\t\tpluginMediaElement.vimeoid = playback.url.substr(playback.url.lastIndexOf('/')+1);\n\t\t\t\t\n\t\t\t\tcontainer.innerHTML ='<iframe src=\"' + playback.scheme + 'player.vimeo.com/video/' + pluginMediaElement.vimeoid + '?api=1&portrait=0&byline=0&title=0&player_id=' + player_id + '\" width=\"' + width +'\" height=\"' + height +'\" frameborder=\"0\" class=\"mejs-shim\" id=\"' + player_id + '\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';\n\t\t\t\tif (typeof($f) == 'function') { // froogaloop available\n\t\t\t\t\tvar player = $f(container.childNodes[0]);\n\t\t\t\t\t\n\t\t\t\t\tplayer.addEvent('ready', function() {\n\t\t\t\t\t\t\n\t\t\t\t\t\tplayer.playVideo = function() {\n\t\t\t\t\t\t\tplayer.api( 'play' );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tplayer.stopVideo = function() {\n\t\t\t\t\t\t\tplayer.api( 'unload' );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tplayer.pauseVideo = function() {\n\t\t\t\t\t\t\tplayer.api( 'pause' );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tplayer.seekTo = function( seconds ) {\n\t\t\t\t\t\t\tplayer.api( 'seekTo', seconds );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayer.setVolume = function( volume ) {\n\t\t\t\t\t\t\tplayer.api( 'setVolume', volume );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayer.setMuted = function( muted ) {\n\t\t\t\t\t\t\tif( muted ) {\n\t\t\t\t\t\t\t\tplayer.lastVolume = player.api( 'getVolume' );\n\t\t\t\t\t\t\t\tplayer.api( 'setVolume', 0 );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tplayer.api( 'setVolume', player.lastVolume );\n\t\t\t\t\t\t\t\tdelete player.lastVolume;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\n\t\t\t\t\t\tfunction createEvent(player, pluginMediaElement, eventName, e) {\n\t\t\t\t\t\t\tvar event = {\n\t\t\t\t\t\t\t\ttype: eventName,\n\t\t\t\t\t\t\t\ttarget: pluginMediaElement\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (eventName == 'timeupdate') {\n\t\t\t\t\t\t\t\tpluginMediaElement.currentTime = event.currentTime = e.seconds;\n\t\t\t\t\t\t\t\tpluginMediaElement.duration = event.duration = e.duration;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpluginMediaElement.dispatchEvent(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tplayer.addEvent('play', function() {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'play');\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'playing');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tplayer.addEvent('pause', function() {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'pause');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tplayer.addEvent('finish', function() {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'ended');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tplayer.addEvent('playProgress', function(e) {\n\t\t\t\t\t\t\tcreateEvent(player, pluginMediaElement, 'timeupdate', e);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tpluginMediaElement.pluginElement = container;\n\t\t\t\t\t\tpluginMediaElement.pluginApi = player;\n\n\t\t\t\t\t\t// init mejs\n\t\t\t\t\t\tmejs.MediaPluginBridge.initPlugin(pluginid);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.warn(\"You need to include froogaloop for vimeo to work\");\n\t\t\t\t}\n\t\t\t\tbreak;\t\t\t\n\t\t}\n\t\t// hide original element\n\t\thtmlMediaElement.style.display = 'none';\n\t\t// prevent browser from autoplaying when using a plugin\n\t\thtmlMediaElement.removeAttribute('autoplay');\n\n\t\t// FYI: options.success will be fired by the MediaPluginBridge\n\t\t\n\t\treturn pluginMediaElement;\n\t},\n\n\tupdateNative: function(playback, options, autoplay, preload) {\n\t\t\n\t\tvar htmlMediaElement = playback.htmlMediaElement,\n\t\t\tm;\n\t\t\n\t\t\n\t\t// add methods to video object to bring it into parity with Flash Object\n\t\tfor (m in mejs.HtmlMediaElement) {\n\t\t\thtmlMediaElement[m] = mejs.HtmlMediaElement[m];\n\t\t}\n\n\t\t/*\n\t\tChrome now supports preload=\"none\"\n\t\tif (mejs.MediaFeatures.isChrome) {\n\t\t\n\t\t\t// special case to enforce preload attribute (Chrome doesn't respect this)\n\t\t\tif (preload === 'none' && !autoplay) {\n\t\t\t\n\t\t\t\t// forces the browser to stop loading (note: fails in IE9)\n\t\t\t\thtmlMediaElement.src = '';\n\t\t\t\thtmlMediaElement.load();\n\t\t\t\thtmlMediaElement.canceledPreload = true;\n\n\t\t\t\thtmlMediaElement.addEventListener('play',function() {\n\t\t\t\t\tif (htmlMediaElement.canceledPreload) {\n\t\t\t\t\t\thtmlMediaElement.src = playback.url;\n\t\t\t\t\t\thtmlMediaElement.load();\n\t\t\t\t\t\thtmlMediaElement.play();\n\t\t\t\t\t\thtmlMediaElement.canceledPreload = false;\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t// for some reason Chrome forgets how to autoplay sometimes.\n\t\t\t} else if (autoplay) {\n\t\t\t\thtmlMediaElement.load();\n\t\t\t\thtmlMediaElement.play();\n\t\t\t}\n\t\t}\n\t\t*/\n\n\t\t// fire success code\n\t\toptions.success(htmlMediaElement, htmlMediaElement);\n\t\t\n\t\treturn htmlMediaElement;\n\t}\n};\n\n/*\n - test on IE (object vs. embed)\n - determine when to use iframe (Firefox, Safari, Mobile) vs. Flash (Chrome, IE)\n - fullscreen?\n*/\n\n// YouTube Flash and Iframe API\nmejs.YouTubeApi = {\n\tisIframeStarted: false,\n\tisIframeLoaded: false,\n\tloadIframeApi: function(yt) {\n\t\tif (!this.isIframeStarted) {\n\t\t\tvar tag = document.createElement('script');\n\t\t\ttag.src = yt.scheme + \"www.youtube.com/player_api\";\n\t\t\tvar firstScriptTag = document.getElementsByTagName('script')[0];\n\t\t\tfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\t\t\tthis.isIframeStarted = true;\n\t\t}\n\t},\n\tiframeQueue: [],\n\tenqueueIframe: function(yt) {\n\t\t\n\t\tif (this.isLoaded) {\n\t\t\tthis.createIframe(yt);\n\t\t} else {\n\t\t\tthis.loadIframeApi(yt);\n\t\t\tthis.iframeQueue.push(yt);\n\t\t}\n\t},\n\tcreateIframe: function(settings) {\n\t\t\n\t\tvar\n\t\tpluginMediaElement = settings.pluginMediaElement,\t\n\t\tplayer = new YT.Player(settings.containerId, {\n\t\t\theight: settings.height,\n\t\t\twidth: settings.width,\n\t\t\tvideoId: settings.videoId,\n\t\t\tplayerVars: {controls:0,wmode:'transparent'},\n\t\t\tevents: {\n\t\t\t\t'onReady': function() {\n\t\t\t\t\t\n\t\t\t\t\t// wrapper to match\n\t\t\t\t\tplayer.setVideoSize = function(width, height) {\n\t\t\t\t\t\tplayer.setSize(width, height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// hook up iframe object to MEjs\n\t\t\t\t\tsettings.pluginMediaElement.pluginApi = player;\n\t\t\t\t\tsettings.pluginMediaElement.pluginElement = document.getElementById(settings.containerId);\n\t\t\t\t\t\n\t\t\t\t\t// init mejs\n\t\t\t\t\tmejs.MediaPluginBridge.initPlugin(settings.pluginId);\n\t\t\t\t\t\n\t\t\t\t\t// create timer\n\t\t\t\t\tsetInterval(function() {\n\t\t\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'timeupdate');\n\t\t\t\t\t}, 250);\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t'onStateChange': function(e) {\n\t\t\t\t\t\n\t\t\t\t\tmejs.YouTubeApi.handleStateChange(e.data, player, pluginMediaElement);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\t\n\tcreateEvent: function (player, pluginMediaElement, eventName) {\n\t\tvar event = {\n\t\t\ttype: eventName,\n\t\t\ttarget: pluginMediaElement\n\t\t};\n\n\t\tif (player && player.getDuration) {\n\t\t\t\n\t\t\t// time \n\t\t\tpluginMediaElement.currentTime = event.currentTime = player.getCurrentTime();\n\t\t\tpluginMediaElement.duration = event.duration = player.getDuration();\n\t\t\t\n\t\t\t// state\n\t\t\tevent.paused = pluginMediaElement.paused;\n\t\t\tevent.ended = pluginMediaElement.ended;\t\t\t\n\t\t\t\n\t\t\t// sound\n\t\t\tevent.muted = player.isMuted();\n\t\t\tevent.volume = player.getVolume() / 100;\n\t\t\t\n\t\t\t// progress\n\t\t\tevent.bytesTotal = player.getVideoBytesTotal();\n\t\t\tevent.bufferedBytes = player.getVideoBytesLoaded();\n\t\t\t\n\t\t\t// fake the W3C buffered TimeRange\n\t\t\tvar bufferedTime = event.bufferedBytes / event.bytesTotal * event.duration;\n\t\t\t\n\t\t\tevent.target.buffered = event.buffered = {\n\t\t\t\tstart: function(index) {\n\t\t\t\t\treturn 0;\n\t\t\t\t},\n\t\t\t\tend: function (index) {\n\t\t\t\t\treturn bufferedTime;\n\t\t\t\t},\n\t\t\t\tlength: 1\n\t\t\t};\n\n\t\t}\n\t\t\n\t\t// send event up the chain\n\t\tpluginMediaElement.dispatchEvent(event);\n\t},\t\n\t\n\tiFrameReady: function() {\n\t\t\n\t\tthis.isLoaded = true;\n\t\tthis.isIframeLoaded = true;\n\t\t\n\t\twhile (this.iframeQueue.length > 0) {\n\t\t\tvar settings = this.iframeQueue.pop();\n\t\t\tthis.createIframe(settings);\n\t\t}\t\n\t},\n\t\n\t// FLASH!\n\tflashPlayers: {},\n\tcreateFlash: function(settings) {\n\t\t\n\t\tthis.flashPlayers[settings.pluginId] = settings;\n\t\t\n\t\t/*\n\t\tsettings.container.innerHTML =\n\t\t\t'<object type=\"application/x-shockwave-flash\" id=\"' + settings.pluginId + '\" data=\"' + settings.scheme + 'www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid=' + settings.pluginId  + '&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0\" ' +\n\t\t\t\t'width=\"' + settings.width + '\" height=\"' + settings.height + '\" style=\"visibility: visible; \" class=\"mejs-shim\">' +\n\t\t\t\t'<param name=\"allowScriptAccess\" value=\"sameDomain\">' +\n\t\t\t\t'<param name=\"wmode\" value=\"transparent\">' +\n\t\t\t'</object>';\n\t\t*/\n\n\t\tvar specialIEContainer,\n\t\t\tyoutubeUrl = settings.scheme + 'www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid=' + settings.pluginId  + '&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0';\n\t\t\t\n\t\tif (mejs.MediaFeatures.isIE) {\n\t\t\t\n\t\t\tspecialIEContainer = document.createElement('div');\n\t\t\tsettings.container.appendChild(specialIEContainer);\n\t\t\tspecialIEContainer.outerHTML = '<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"' + settings.scheme + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab\" ' +\n'id=\"' + settings.pluginId + '\" width=\"' + settings.width + '\" height=\"' + settings.height + '\" class=\"mejs-shim\">' +\n\t'<param name=\"movie\" value=\"' + youtubeUrl + '\" />' +\n\t'<param name=\"wmode\" value=\"transparent\" />' +\n\t'<param name=\"allowScriptAccess\" value=\"' + options.flashScriptAccess + '\" />' +\n\t'<param name=\"allowFullScreen\" value=\"true\" />' +\n'</object>';\n\t\t} else {\n\t\tsettings.container.innerHTML =\n\t\t\t'<object type=\"application/x-shockwave-flash\" id=\"' + settings.pluginId + '\" data=\"' + youtubeUrl + '\" ' +\n\t\t\t\t'width=\"' + settings.width + '\" height=\"' + settings.height + '\" style=\"visibility: visible; \" class=\"mejs-shim\">' +\n\t\t\t\t'<param name=\"allowScriptAccess\" value=\"' + options.flashScriptAccess + '\">' +\n\t\t\t\t'<param name=\"wmode\" value=\"transparent\">' +\n\t\t\t'</object>';\n\t\t}\t\t\n\t\t\n\t},\n\t\n\tflashReady: function(id) {\n\t\tvar\n\t\t\tsettings = this.flashPlayers[id],\n\t\t\tplayer = document.getElementById(id),\n\t\t\tpluginMediaElement = settings.pluginMediaElement;\n\t\t\n\t\t// hook up and return to MediaELementPlayer.success\t\n\t\tpluginMediaElement.pluginApi = \n\t\tpluginMediaElement.pluginElement = player;\n\t\tmejs.MediaPluginBridge.initPlugin(id);\n\t\t\n\t\t// load the youtube video\n\t\tplayer.cueVideoById(settings.videoId);\n\t\t\n\t\tvar callbackName = settings.containerId + '_callback';\n\t\t\n\t\twindow[callbackName] = function(e) {\n\t\t\tmejs.YouTubeApi.handleStateChange(e, player, pluginMediaElement);\n\t\t}\n\t\t\n\t\tplayer.addEventListener('onStateChange', callbackName);\n\t\t\n\t\tsetInterval(function() {\n\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'timeupdate');\n\t\t}, 250);\n\t\t\n\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'canplay');\n\t},\n\t\n\thandleStateChange: function(youTubeState, player, pluginMediaElement) {\n\t\tswitch (youTubeState) {\n\t\t\tcase -1: // not started\n\t\t\t\tpluginMediaElement.paused = true;\n\t\t\t\tpluginMediaElement.ended = true;\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'loadedmetadata');\n\t\t\t\t//createYouTubeEvent(player, pluginMediaElement, 'loadeddata');\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tpluginMediaElement.paused = false;\n\t\t\t\tpluginMediaElement.ended = true;\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'ended');\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tpluginMediaElement.paused = false;\n\t\t\t\tpluginMediaElement.ended = false;\t\t\t\t\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'play');\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'playing');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tpluginMediaElement.paused = true;\n\t\t\t\tpluginMediaElement.ended = false;\t\t\t\t\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'pause');\n\t\t\t\tbreak;\n\t\t\tcase 3: // buffering\n\t\t\t\tmejs.YouTubeApi.createEvent(player, pluginMediaElement, 'progress');\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t// cued?\n\t\t\t\tbreak;\t\t\t\t\t\t\n\t\t\t\n\t\t}\t\t\t\n\t\t\n\t}\n}\n// IFRAME\nwindow.onYouTubePlayerAPIReady = function() {\n\tmejs.YouTubeApi.iFrameReady();\n};\n// FLASH\nwindow.onYouTubePlayerReady = function(id) {\n\tmejs.YouTubeApi.flashReady(id);\n};\n\nwindow.mejs = mejs;\nwindow.MediaElement = mejs.MediaElement;\n"], "filenames": ["src/flash/FlashMediaElement.as", "src/js/me-shim.js"], "buggy_code_start_loc": [28, 582], "buggy_code_end_loc": [517, 583], "fixing_code_start_loc": [27, 582], "fixing_code_end_loc": [460, 583], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in flash/FlashMediaElement.as in MediaElement.js before 2.21.0, as used in WordPress before 4.5.2, allows remote attackers to inject arbitrary web script or HTML via an obfuscated form of the jsinitfunction parameter, as demonstrated by \"jsinitfunctio%gn.\"", "other": {"cve": {"id": "CVE-2016-4567", "sourceIdentifier": "cve@mitre.org", "published": "2016-05-22T01:59:31.230", "lastModified": "2016-12-02T23:01:43.237", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in flash/FlashMediaElement.as in MediaElement.js before 2.21.0, as used in WordPress before 4.5.2, allows remote attackers to inject arbitrary web script or HTML via an obfuscated form of the jsinitfunction parameter, as demonstrated by \"jsinitfunctio%gn.\""}, {"lang": "es", "value": "Vulnerabilidad de XSS en flash/FlashMediaElement.as en MediaElement.js en versiones anteriores a 2.21.0, como se utiliza en WordPress en versiones anteriores a 4.5.2, permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de un formulario ofuscado del par\u00e1metro jsinitfunction, como es demostrado por \"jsinitfunctio%gn\"."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mediaelementjs:mediaelement.js:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.20.1", "matchCriteriaId": "7C1F3E4B-3818-4C0E-9BFA-B2183A8CE8D5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.5.1", "matchCriteriaId": "DE5AB579-3BD2-49C4-9260-E8FB37637360"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/05/07/2", "source": "cve@mitre.org"}, {"url": "http://www.securitytracker.com/id/1035818", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.5.2", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://core.trac.wordpress.org/changeset/37371", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://gist.github.com/cure53/df34ea68c26441f3ae98f821ba1feb9c", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/johndyer/mediaelement/blob/master/changelog.md", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/johndyer/mediaelement/commit/34834eef8ac830b9145df169ec22016a4350f06e", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wordpress.org/news/2016/05/wordpress-4-5-2/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8488", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/johndyer/mediaelement/commit/34834eef8ac830b9145df169ec22016a4350f06e"}}