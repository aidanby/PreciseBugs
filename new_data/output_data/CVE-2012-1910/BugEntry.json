{"buggy_code": ["TEMPLATE = app\nTARGET =\nVERSION = 0.6.0\nINCLUDEPATH += src src/json src/qt\nDEFINES += QT_GUI BOOST_THREAD_USE_LIB\nCONFIG += no_include_pwd\n\n# for boost 1.37, add -mt to the boost libraries \n# use: qmake BOOST_LIB_SUFFIX=-mt\n# for boost thread win32 with _win32 sufix\n# use: BOOST_THREAD_LIB_SUFFIX=_win32-...\n# or when linking against a specific BerkelyDB version: BDB_LIB_SUFFIX=-4.8\n\n# Dependency library locations can be customized with BOOST_INCLUDE_PATH, \n#    BOOST_LIB_PATH, BDB_INCLUDE_PATH, BDB_LIB_PATH\n#    OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively\n\nOBJECTS_DIR = build\nMOC_DIR = build\nUI_DIR = build\n\n# use: qmake \"RELEASE=1\"\ncontains(RELEASE, 1) {\n    # Mac: compile for maximum compatibility (10.5, 32-bit)\n    macx:QMAKE_CXXFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n\n    !windows:!macx {\n        # Linux: static link\n        LIBS += -Wl,-Bstatic\n    }\n}\n\n# use: qmake \"USE_QRCODE=1\"\n# libqrencode (http://fukuchi.org/works/qrencode/index.en.html) must be installed for support\ncontains(USE_QRCODE, 1) {\n    message(Building with QRCode support)\n    DEFINES += USE_QRCODE\n    LIBS += -lqrencode\n}\n\n# use: qmake \"USE_UPNP=1\" ( enabled by default; default)\n#  or: qmake \"USE_UPNP=0\" (disabled by default)\n#  or: qmake \"USE_UPNP=-\" (not supported)\n# miniupnpc (http://miniupnp.free.fr/files/) must be installed for support\ncontains(USE_UPNP, -) {\n    message(Building without UPNP support)\n} else {\n    message(Building with UPNP support)\n    count(USE_UPNP, 0) {\n        USE_UPNP=1\n    }\n    DEFINES += USE_UPNP=$$USE_UPNP STATICLIB\n    INCLUDEPATH += $$MINIUPNPC_INCLUDE_PATH\n    LIBS += $$join(MINIUPNPC_LIB_PATH,,-L,) -lminiupnpc\n    win32:LIBS += -liphlpapi\n}\n\n# use: qmake \"USE_DBUS=1\"\ncontains(USE_DBUS, 1) {\n    message(Building with DBUS (Freedesktop notifications) support)\n    DEFINES += USE_DBUS\n    QT += dbus\n}\n\n# use: qmake \"USE_SSL=1\"\ncontains(USE_SSL, 1) {\n    message(Building with SSL support for RPC)\n    DEFINES += USE_SSL\n}\n\n# use: qmake \"FIRST_CLASS_MESSAGING=1\"\ncontains(FIRST_CLASS_MESSAGING, 1) {\n    message(Building with first-class messaging)\n    DEFINES += FIRST_CLASS_MESSAGING\n}\n\ncontains(BITCOIN_NEED_QT_PLUGINS, 1) {\n    DEFINES += BITCOIN_NEED_QT_PLUGINS\n    QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets\n}\n\n!windows {\n    # for extra security against potential buffer overflows\n    QMAKE_CXXFLAGS += -fstack-protector\n    QMAKE_LFLAGS += -fstack-protector\n    # do not enable this on windows, as it will result in a non-working executable!\n}\n\n# disable quite some warnings because bitcoin core \"sins\" a lot\nQMAKE_CXXFLAGS_WARN_ON = -fdiagnostics-show-option -Wall -Wno-strict-aliasing -Wno-invalid-offsetof -Wno-unused-variable -Wno-unused-parameter -Wno-sign-compare -Wno-char-subscripts  -Wno-unused-value -Wno-sequence-point -Wno-parentheses -Wno-unknown-pragmas -Wno-switch\n\n# Input\nDEPENDPATH += src/qt src src json/include\nHEADERS += src/qt/bitcoingui.h \\\n    src/qt/transactiontablemodel.h \\\n    src/qt/addresstablemodel.h \\\n    src/qt/optionsdialog.h \\\n    src/qt/sendcoinsdialog.h \\\n    src/qt/addressbookpage.h \\\n    src/qt/messagepage.h \\\n    src/qt/aboutdialog.h \\\n    src/qt/editaddressdialog.h \\\n    src/qt/bitcoinaddressvalidator.h \\\n    src/base58.h \\\n    src/bignum.h \\\n    src/checkpoints.h \\\n    src/compat.h \\\n    src/util.h \\\n    src/uint256.h \\\n    src/serialize.h \\\n    src/strlcpy.h \\\n    src/main.h \\\n    src/net.h \\\n    src/key.h \\\n    src/db.h \\\n    src/script.h \\\n    src/noui.h \\\n    src/init.h \\\n    src/headers.h \\\n    src/irc.h \\\n    src/mruset.h \\\n    src/json/json_spirit_writer_template.h \\\n    src/json/json_spirit_writer.h \\\n    src/json/json_spirit_value.h \\\n    src/json/json_spirit_utils.h \\\n    src/json/json_spirit_stream_reader.h \\\n    src/json/json_spirit_reader_template.h \\\n    src/json/json_spirit_reader.h \\\n    src/json/json_spirit_error_position.h \\\n    src/json/json_spirit.h \\\n    src/qt/clientmodel.h \\\n    src/qt/guiutil.h \\\n    src/qt/transactionrecord.h \\\n    src/qt/guiconstants.h \\\n    src/qt/optionsmodel.h \\\n    src/qt/monitoreddatamapper.h \\\n    src/qtui.h \\\n    src/qt/transactiondesc.h \\\n    src/qt/transactiondescdialog.h \\\n    src/qt/bitcoinamountfield.h \\\n    src/wallet.h \\\n    src/keystore.h \\\n    src/qt/transactionfilterproxy.h \\\n    src/qt/transactionview.h \\\n    src/qt/walletmodel.h \\\n    src/bitcoinrpc.h \\\n    src/qt/overviewpage.h \\\n    src/qt/csvmodelwriter.h \\\n    src/crypter.h \\\n    src/qt/sendcoinsentry.h \\\n    src/qt/qvalidatedlineedit.h \\\n    src/qt/bitcoinunits.h \\\n    src/qt/qvaluecombobox.h \\\n    src/qt/askpassphrasedialog.h \\\n    src/protocol.h \\\n    src/qt/notificator.h \\\n    src/qt/qtipcserver.h\n\nSOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n    src/qt/transactiontablemodel.cpp \\\n    src/qt/addresstablemodel.cpp \\\n    src/qt/optionsdialog.cpp \\\n    src/qt/sendcoinsdialog.cpp \\\n    src/qt/addressbookpage.cpp \\\n    src/qt/messagepage.cpp \\\n    src/qt/aboutdialog.cpp \\\n    src/qt/editaddressdialog.cpp \\\n    src/qt/bitcoinaddressvalidator.cpp \\\n    src/util.cpp \\\n    src/netbase.cpp \\\n    src/key.cpp \\\n    src/script.cpp \\\n    src/main.cpp \\\n    src/init.cpp \\\n    src/net.cpp \\\n    src/irc.cpp \\\n    src/checkpoints.cpp \\\n    src/db.cpp \\\n    src/json/json_spirit_writer.cpp \\\n    src/json/json_spirit_value.cpp \\\n    src/json/json_spirit_reader.cpp \\\n    src/qt/clientmodel.cpp \\\n    src/qt/guiutil.cpp \\\n    src/qt/transactionrecord.cpp \\\n    src/qt/optionsmodel.cpp \\\n    src/qt/monitoreddatamapper.cpp \\\n    src/qt/transactiondesc.cpp \\\n    src/qt/transactiondescdialog.cpp \\\n    src/qt/bitcoinstrings.cpp \\\n    src/qt/bitcoinamountfield.cpp \\\n    src/wallet.cpp \\\n    src/keystore.cpp \\\n    src/qt/transactionfilterproxy.cpp \\\n    src/qt/transactionview.cpp \\\n    src/qt/walletmodel.cpp \\\n    src/bitcoinrpc.cpp \\\n    src/rpcdump.cpp \\\n    src/qt/overviewpage.cpp \\\n    src/qt/csvmodelwriter.cpp \\\n    src/crypter.cpp \\\n    src/qt/sendcoinsentry.cpp \\\n    src/qt/qvalidatedlineedit.cpp \\\n    src/qt/bitcoinunits.cpp \\\n    src/qt/qvaluecombobox.cpp \\\n    src/qt/askpassphrasedialog.cpp \\\n    src/protocol.cpp \\\n    src/qt/notificator.cpp \\\n    src/qt/qtipcserver.cpp\n\nRESOURCES += \\\n    src/qt/bitcoin.qrc\n\nFORMS += \\\n    src/qt/forms/sendcoinsdialog.ui \\\n    src/qt/forms/addressbookpage.ui \\\n    src/qt/forms/messagepage.ui \\\n    src/qt/forms/aboutdialog.ui \\\n    src/qt/forms/editaddressdialog.ui \\\n    src/qt/forms/transactiondescdialog.ui \\\n    src/qt/forms/overviewpage.ui \\\n    src/qt/forms/sendcoinsentry.ui \\\n    src/qt/forms/askpassphrasedialog.ui\n\ncontains(USE_QRCODE, 1) {\nHEADERS += src/qt/qrcodedialog.h\nSOURCES += src/qt/qrcodedialog.cpp\nFORMS += src/qt/forms/qrcodedialog.ui\n}\n\ncontains(BITCOIN_QT_TEST, 1) {\nSOURCES += src/qt/test/test_main.cpp \\\n    src/qt/test/urltests.cpp\nHEADERS += src/qt/test/urltests.h\nDEPENDPATH += src/qt/test\nQT += testlib\nTARGET = bitcoin-qt_test\nDEFINES += BITCOIN_QT_TEST\n}\n\nCODECFORTR = UTF-8\n\n# for lrelease/lupdate\n# also add new translations to src/qt/bitcoin.qrc under translations/\nTRANSLATIONS = $$files(src/qt/locale/bitcoin_*.ts)\n\nisEmpty(QMAKE_LRELEASE) {\n    win32:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]\\lrelease.exe\n    else:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]/lrelease\n}\nisEmpty(TS_DIR):TS_DIR = src/qt/locale\n# automatically build translations, so they can be included in resource file\nTSQM.name = lrelease ${QMAKE_FILE_IN}\nTSQM.input = TRANSLATIONS\nTSQM.output = $$TS_DIR/${QMAKE_FILE_BASE}.qm\nTSQM.commands = $$QMAKE_LRELEASE ${QMAKE_FILE_IN}\nTSQM.CONFIG = no_link\nQMAKE_EXTRA_COMPILERS += TSQM\nPRE_TARGETDEPS += compiler_TSQM_make_all\n\n# \"Other files\" to show in Qt Creator\nOTHER_FILES += \\\n    doc/*.rst doc/*.txt doc/README README.md\n\n# platform specific defaults, if not overridden on command line\nisEmpty(BOOST_LIB_SUFFIX) {\n    macx:BOOST_LIB_SUFFIX = -mt\n    windows:BOOST_LIB_SUFFIX = -mgw44-mt-1_43\n}\n\nisEmpty(BOOST_THREAD_LIB_SUFFIX) {\n    BOOST_THREAD_LIB_SUFFIX = $$BOOST_LIB_SUFFIX\n}\n\nisEmpty(BDB_LIB_PATH) {\n    macx:BDB_LIB_PATH = /opt/local/lib/db48\n}\n\nisEmpty(BDB_LIB_SUFFIX) {\n    macx:BDB_LIB_SUFFIX = -4.8\n}\n\nisEmpty(BDB_INCLUDE_PATH) {\n    macx:BDB_INCLUDE_PATH = /opt/local/include/db48\n}\n\nisEmpty(BOOST_LIB_PATH) {\n    macx:BOOST_LIB_PATH = /opt/local/lib\n}\n\nisEmpty(BOOST_INCLUDE_PATH) {\n    macx:BOOST_INCLUDE_PATH = /opt/local/include\n}\n\nwindows:LIBS += -lws2_32 -lshlwapi\nwindows:DEFINES += WIN32\nwindows:RC_FILE = src/qt/res/bitcoin-qt.rc\n\n!windows:!mac {\n    DEFINES += LINUX\n    LIBS += -lrt\n}\n\nmacx:HEADERS += src/qt/macdockiconhandler.h\nmacx:OBJECTIVE_SOURCES += src/qt/macdockiconhandler.mm\nmacx:LIBS += -framework Foundation -framework ApplicationServices -framework AppKit\nmacx:DEFINES += MAC_OSX MSG_NOSIGNAL=0\nmacx:ICON = src/qt/res/icons/bitcoin.icns\nmacx:TARGET = \"Bitcoin-Qt\"\n\n# Set libraries and includes at end, to use platform-defined defaults if not overridden\nINCLUDEPATH += $$BOOST_INCLUDE_PATH $$BDB_INCLUDE_PATH $$OPENSSL_INCLUDE_PATH $$QRENCODE_INCLUDE_PATH\nLIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,)\nLIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX\n# -lgdi32 has to happen after -lcrypto (see  #681)\nwindows:LIBS += -lole32 -luuid -lgdi32\nLIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX\n\ncontains(RELEASE, 1) {\n    !windows:!macx {\n        # Linux: turn dynamic linking back on for c/c++ runtime libraries\n        LIBS += -Wl,-Bdynamic\n    }\n}\n\nsystem($$QMAKE_LRELEASE -silent $$_PRO_FILE_)\n", "---\nname: \"qt\"\nsuites:\n- \"lucid\"\narchitectures:\n- \"i386\"\npackages: \n- \"mingw32\"\n- \"zip\"\n- \"faketime\"\nreference_datetime: \"2011-01-30 00:00:00\"\nremotes: []\nfiles:\n- \"qt-everywhere-opensource-src-4.7.4.tar.gz\"\nscript: |\n  INSTDIR=\"$HOME/qt/\"\n  mkdir $INSTDIR\n  SRCDIR=\"$INSTDIR/src/\"\n  mkdir $SRCDIR\n  #\n  tar xzf qt-everywhere-opensource-src-4.7.4.tar.gz\n  cd qt-everywhere-opensource-src-4.7.4\n  sed 's/$TODAY/2011-01-30/' -i configure\n  sed 's/i686-pc-mingw32-/i586-mingw32msvc-/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's|QMAKE_CFLAGS\\t\\t= -pipe|QMAKE_CFLAGS\\t\\t= -pipe -isystem /usr/i586-mingw32msvc/include/ -frandom-seed=qtbuild|' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed 's/QMAKE_CXXFLAGS_EXCEPTIONS_ON = -fexceptions -mthreads/QMAKE_CXXFLAGS_EXCEPTIONS_ON = -fexceptions/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed 's/QMAKE_LFLAGS_EXCEPTIONS_ON = -mthreads/QMAKE_LFLAGS_EXCEPTIONS_ON = -lmingwthrd/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's/QMAKE_MOC\\t\\t= i586-mingw32msvc-moc/QMAKE_MOC\\t\\t= moc/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's/QMAKE_RCC\\t\\t= i586-mingw32msvc-rcc/QMAKE_RCC\\t\\t= rcc/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's/QMAKE_UIC\\t\\t= i586-mingw32msvc-uic/QMAKE_UIC\\t\\t= uic/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  # ar adds timestamps to every object file included in the static library\n  # providing -D as ar argument is supposed to solve it, but doesn't work as qmake strips off the arguments and adds -M to pass a script...\n  # which somehow cannot be combined with other flags.\n  # use faketime only for ar, as it confuses make/qmake into hanging sometimes\n  sed --posix \"s|QMAKE_LIB\\t\\t= i586-mingw32msvc-ar -ru|QMAKE_LIB\\t\\t= $HOME/ar -Dr|\" -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  echo '#!/bin/bash' > $HOME/ar\n  echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> $HOME/ar\n  echo 'i586-mingw32msvc-ar \"$@\"' >> $HOME/ar\n  chmod +x $HOME/ar\n  #export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n  export FAKETIME=$REFERENCE_DATETIME\n  export TZ=UTC\n  ./configure -prefix $INSTDIR -confirm-license -release -opensource -static -no-qt3support -xplatform unsupported/win32-g++-cross -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -no-declarative -no-script -no-scripttools -no-javascript-jit  -no-webkit -no-svg -no-xmlpatterns -no-sql-sqlite -no-nis -no-cups -no-iconv -no-dbus -no-gif -no-libtiff -opengl no -nomake examples -nomake demos -nomake docs\n  find . -name *.prl | xargs -l sed 's|/\\.||' -i\n  find . -name *.prl | xargs -l sed 's|/$||' -i\n  make $MAKEOPTS install\n  cp -a bin $SRCDIR/\n  cd $INSTDIR\n  find . -name *.prl | xargs -l sed 's|/$||' -i\n  #sed 's|QMAKE_PRL_LIBS.*|QMAKE_PRL_LIBS = -lQtDeclarative -lQtScript -lQtSvg -lQtSql -lQtXmlPatterns -lQtGui -lgdi32 -lcomdlg32 -loleaut32 -limm32 -lwinmm -lwinspool -lmsimg32 -lQtNetwork -lQtCore -lole32 -luuid -lws2_32 -ladvapi32 -lshell32 -luser32 -lkernel32|' -i imports/Qt/labs/particles/qmlparticlesplugin.prl\n\n  # as zip stores file timestamps, use faketime to intercept stat calls to set dates for all files to reference date\n  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n  zip -r $OUTDIR/qt-win32-4.7.4-gitian.zip *\n"], "fixing_code": ["TEMPLATE = app\nTARGET =\nVERSION = 0.6.0\nINCLUDEPATH += src src/json src/qt\nDEFINES += QT_GUI BOOST_THREAD_USE_LIB\nCONFIG += no_include_pwd\n\n# for boost 1.37, add -mt to the boost libraries \n# use: qmake BOOST_LIB_SUFFIX=-mt\n# for boost thread win32 with _win32 sufix\n# use: BOOST_THREAD_LIB_SUFFIX=_win32-...\n# or when linking against a specific BerkelyDB version: BDB_LIB_SUFFIX=-4.8\n\n# Dependency library locations can be customized with BOOST_INCLUDE_PATH, \n#    BOOST_LIB_PATH, BDB_INCLUDE_PATH, BDB_LIB_PATH\n#    OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively\n\nOBJECTS_DIR = build\nMOC_DIR = build\nUI_DIR = build\n\n# use: qmake \"RELEASE=1\"\ncontains(RELEASE, 1) {\n    # Mac: compile for maximum compatibility (10.5, 32-bit)\n    macx:QMAKE_CXXFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n\n    !windows:!macx {\n        # Linux: static link\n        LIBS += -Wl,-Bstatic\n    }\n}\n\n# use: qmake \"USE_QRCODE=1\"\n# libqrencode (http://fukuchi.org/works/qrencode/index.en.html) must be installed for support\ncontains(USE_QRCODE, 1) {\n    message(Building with QRCode support)\n    DEFINES += USE_QRCODE\n    LIBS += -lqrencode\n}\n\n# use: qmake \"USE_UPNP=1\" ( enabled by default; default)\n#  or: qmake \"USE_UPNP=0\" (disabled by default)\n#  or: qmake \"USE_UPNP=-\" (not supported)\n# miniupnpc (http://miniupnp.free.fr/files/) must be installed for support\ncontains(USE_UPNP, -) {\n    message(Building without UPNP support)\n} else {\n    message(Building with UPNP support)\n    count(USE_UPNP, 0) {\n        USE_UPNP=1\n    }\n    DEFINES += USE_UPNP=$$USE_UPNP STATICLIB\n    INCLUDEPATH += $$MINIUPNPC_INCLUDE_PATH\n    LIBS += $$join(MINIUPNPC_LIB_PATH,,-L,) -lminiupnpc\n    win32:LIBS += -liphlpapi\n}\n\n# use: qmake \"USE_DBUS=1\"\ncontains(USE_DBUS, 1) {\n    message(Building with DBUS (Freedesktop notifications) support)\n    DEFINES += USE_DBUS\n    QT += dbus\n}\n\n# use: qmake \"USE_SSL=1\"\ncontains(USE_SSL, 1) {\n    message(Building with SSL support for RPC)\n    DEFINES += USE_SSL\n}\n\n# use: qmake \"FIRST_CLASS_MESSAGING=1\"\ncontains(FIRST_CLASS_MESSAGING, 1) {\n    message(Building with first-class messaging)\n    DEFINES += FIRST_CLASS_MESSAGING\n}\n\ncontains(BITCOIN_NEED_QT_PLUGINS, 1) {\n    DEFINES += BITCOIN_NEED_QT_PLUGINS\n    QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets\n}\n\n!windows {\n    # for extra security against potential buffer overflows\n    QMAKE_CXXFLAGS += -fstack-protector\n    QMAKE_LFLAGS += -fstack-protector\n    # do not enable this on windows, as it will result in a non-working executable!\n}\n\n# disable quite some warnings because bitcoin core \"sins\" a lot\nQMAKE_CXXFLAGS_WARN_ON = -fdiagnostics-show-option -Wall -Wno-strict-aliasing -Wno-invalid-offsetof -Wno-unused-variable -Wno-unused-parameter -Wno-sign-compare -Wno-char-subscripts  -Wno-unused-value -Wno-sequence-point -Wno-parentheses -Wno-unknown-pragmas -Wno-switch\n\n# Input\nDEPENDPATH += src/qt src src json/include\nHEADERS += src/qt/bitcoingui.h \\\n    src/qt/transactiontablemodel.h \\\n    src/qt/addresstablemodel.h \\\n    src/qt/optionsdialog.h \\\n    src/qt/sendcoinsdialog.h \\\n    src/qt/addressbookpage.h \\\n    src/qt/messagepage.h \\\n    src/qt/aboutdialog.h \\\n    src/qt/editaddressdialog.h \\\n    src/qt/bitcoinaddressvalidator.h \\\n    src/base58.h \\\n    src/bignum.h \\\n    src/checkpoints.h \\\n    src/compat.h \\\n    src/util.h \\\n    src/uint256.h \\\n    src/serialize.h \\\n    src/strlcpy.h \\\n    src/main.h \\\n    src/net.h \\\n    src/key.h \\\n    src/db.h \\\n    src/script.h \\\n    src/noui.h \\\n    src/init.h \\\n    src/headers.h \\\n    src/irc.h \\\n    src/mruset.h \\\n    src/json/json_spirit_writer_template.h \\\n    src/json/json_spirit_writer.h \\\n    src/json/json_spirit_value.h \\\n    src/json/json_spirit_utils.h \\\n    src/json/json_spirit_stream_reader.h \\\n    src/json/json_spirit_reader_template.h \\\n    src/json/json_spirit_reader.h \\\n    src/json/json_spirit_error_position.h \\\n    src/json/json_spirit.h \\\n    src/qt/clientmodel.h \\\n    src/qt/guiutil.h \\\n    src/qt/transactionrecord.h \\\n    src/qt/guiconstants.h \\\n    src/qt/optionsmodel.h \\\n    src/qt/monitoreddatamapper.h \\\n    src/qtui.h \\\n    src/qt/transactiondesc.h \\\n    src/qt/transactiondescdialog.h \\\n    src/qt/bitcoinamountfield.h \\\n    src/wallet.h \\\n    src/keystore.h \\\n    src/qt/transactionfilterproxy.h \\\n    src/qt/transactionview.h \\\n    src/qt/walletmodel.h \\\n    src/bitcoinrpc.h \\\n    src/qt/overviewpage.h \\\n    src/qt/csvmodelwriter.h \\\n    src/crypter.h \\\n    src/qt/sendcoinsentry.h \\\n    src/qt/qvalidatedlineedit.h \\\n    src/qt/bitcoinunits.h \\\n    src/qt/qvaluecombobox.h \\\n    src/qt/askpassphrasedialog.h \\\n    src/protocol.h \\\n    src/qt/notificator.h \\\n    src/qt/qtipcserver.h\n\nSOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n    src/qt/transactiontablemodel.cpp \\\n    src/qt/addresstablemodel.cpp \\\n    src/qt/optionsdialog.cpp \\\n    src/qt/sendcoinsdialog.cpp \\\n    src/qt/addressbookpage.cpp \\\n    src/qt/messagepage.cpp \\\n    src/qt/aboutdialog.cpp \\\n    src/qt/editaddressdialog.cpp \\\n    src/qt/bitcoinaddressvalidator.cpp \\\n    src/util.cpp \\\n    src/netbase.cpp \\\n    src/key.cpp \\\n    src/script.cpp \\\n    src/main.cpp \\\n    src/init.cpp \\\n    src/net.cpp \\\n    src/irc.cpp \\\n    src/checkpoints.cpp \\\n    src/db.cpp \\\n    src/json/json_spirit_writer.cpp \\\n    src/json/json_spirit_value.cpp \\\n    src/json/json_spirit_reader.cpp \\\n    src/qt/clientmodel.cpp \\\n    src/qt/guiutil.cpp \\\n    src/qt/transactionrecord.cpp \\\n    src/qt/optionsmodel.cpp \\\n    src/qt/monitoreddatamapper.cpp \\\n    src/qt/transactiondesc.cpp \\\n    src/qt/transactiondescdialog.cpp \\\n    src/qt/bitcoinstrings.cpp \\\n    src/qt/bitcoinamountfield.cpp \\\n    src/wallet.cpp \\\n    src/keystore.cpp \\\n    src/qt/transactionfilterproxy.cpp \\\n    src/qt/transactionview.cpp \\\n    src/qt/walletmodel.cpp \\\n    src/bitcoinrpc.cpp \\\n    src/rpcdump.cpp \\\n    src/qt/overviewpage.cpp \\\n    src/qt/csvmodelwriter.cpp \\\n    src/crypter.cpp \\\n    src/qt/sendcoinsentry.cpp \\\n    src/qt/qvalidatedlineedit.cpp \\\n    src/qt/bitcoinunits.cpp \\\n    src/qt/qvaluecombobox.cpp \\\n    src/qt/askpassphrasedialog.cpp \\\n    src/protocol.cpp \\\n    src/qt/notificator.cpp \\\n    src/qt/qtipcserver.cpp\n\nRESOURCES += \\\n    src/qt/bitcoin.qrc\n\nFORMS += \\\n    src/qt/forms/sendcoinsdialog.ui \\\n    src/qt/forms/addressbookpage.ui \\\n    src/qt/forms/messagepage.ui \\\n    src/qt/forms/aboutdialog.ui \\\n    src/qt/forms/editaddressdialog.ui \\\n    src/qt/forms/transactiondescdialog.ui \\\n    src/qt/forms/overviewpage.ui \\\n    src/qt/forms/sendcoinsentry.ui \\\n    src/qt/forms/askpassphrasedialog.ui\n\ncontains(USE_QRCODE, 1) {\nHEADERS += src/qt/qrcodedialog.h\nSOURCES += src/qt/qrcodedialog.cpp\nFORMS += src/qt/forms/qrcodedialog.ui\n}\n\ncontains(BITCOIN_QT_TEST, 1) {\nSOURCES += src/qt/test/test_main.cpp \\\n    src/qt/test/urltests.cpp\nHEADERS += src/qt/test/urltests.h\nDEPENDPATH += src/qt/test\nQT += testlib\nTARGET = bitcoin-qt_test\nDEFINES += BITCOIN_QT_TEST\n}\n\nCODECFORTR = UTF-8\n\n# for lrelease/lupdate\n# also add new translations to src/qt/bitcoin.qrc under translations/\nTRANSLATIONS = $$files(src/qt/locale/bitcoin_*.ts)\n\nisEmpty(QMAKE_LRELEASE) {\n    win32:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]\\lrelease.exe\n    else:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]/lrelease\n}\nisEmpty(TS_DIR):TS_DIR = src/qt/locale\n# automatically build translations, so they can be included in resource file\nTSQM.name = lrelease ${QMAKE_FILE_IN}\nTSQM.input = TRANSLATIONS\nTSQM.output = $$TS_DIR/${QMAKE_FILE_BASE}.qm\nTSQM.commands = $$QMAKE_LRELEASE ${QMAKE_FILE_IN}\nTSQM.CONFIG = no_link\nQMAKE_EXTRA_COMPILERS += TSQM\nPRE_TARGETDEPS += compiler_TSQM_make_all\n\n# \"Other files\" to show in Qt Creator\nOTHER_FILES += \\\n    doc/*.rst doc/*.txt doc/README README.md\n\n# platform specific defaults, if not overridden on command line\nisEmpty(BOOST_LIB_SUFFIX) {\n    macx:BOOST_LIB_SUFFIX = -mt\n    windows:BOOST_LIB_SUFFIX = -mgw44-mt-1_43\n}\n\nisEmpty(BOOST_THREAD_LIB_SUFFIX) {\n    BOOST_THREAD_LIB_SUFFIX = $$BOOST_LIB_SUFFIX\n}\n\nisEmpty(BDB_LIB_PATH) {\n    macx:BDB_LIB_PATH = /opt/local/lib/db48\n}\n\nisEmpty(BDB_LIB_SUFFIX) {\n    macx:BDB_LIB_SUFFIX = -4.8\n}\n\nisEmpty(BDB_INCLUDE_PATH) {\n    macx:BDB_INCLUDE_PATH = /opt/local/include/db48\n}\n\nisEmpty(BOOST_LIB_PATH) {\n    macx:BOOST_LIB_PATH = /opt/local/lib\n}\n\nisEmpty(BOOST_INCLUDE_PATH) {\n    macx:BOOST_INCLUDE_PATH = /opt/local/include\n}\n\nwindows:LIBS += -lmingwthrd -lws2_32 -lshlwapi\nwindows:DEFINES += _MT WIN32\nwindows:RC_FILE = src/qt/res/bitcoin-qt.rc\n\n!windows:!mac {\n    DEFINES += LINUX\n    LIBS += -lrt\n}\n\nmacx:HEADERS += src/qt/macdockiconhandler.h\nmacx:OBJECTIVE_SOURCES += src/qt/macdockiconhandler.mm\nmacx:LIBS += -framework Foundation -framework ApplicationServices -framework AppKit\nmacx:DEFINES += MAC_OSX MSG_NOSIGNAL=0\nmacx:ICON = src/qt/res/icons/bitcoin.icns\nmacx:TARGET = \"Bitcoin-Qt\"\n\n# Set libraries and includes at end, to use platform-defined defaults if not overridden\nINCLUDEPATH += $$BOOST_INCLUDE_PATH $$BDB_INCLUDE_PATH $$OPENSSL_INCLUDE_PATH $$QRENCODE_INCLUDE_PATH\nLIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,)\nLIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX\n# -lgdi32 has to happen after -lcrypto (see  #681)\nwindows:LIBS += -lole32 -luuid -lgdi32\nLIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX\n\ncontains(RELEASE, 1) {\n    !windows:!macx {\n        # Linux: turn dynamic linking back on for c/c++ runtime libraries\n        LIBS += -Wl,-Bdynamic\n    }\n}\n\nsystem($$QMAKE_LRELEASE -silent $$_PRO_FILE_)\n", "---\nname: \"qt\"\nsuites:\n- \"lucid\"\narchitectures:\n- \"i386\"\npackages: \n- \"mingw32\"\n- \"zip\"\n- \"faketime\"\nreference_datetime: \"2011-01-30 00:00:00\"\nremotes: []\nfiles:\n- \"qt-everywhere-opensource-src-4.7.4.tar.gz\"\nscript: |\n  INSTDIR=\"$HOME/qt/\"\n  mkdir $INSTDIR\n  SRCDIR=\"$INSTDIR/src/\"\n  mkdir $SRCDIR\n  #\n  tar xzf qt-everywhere-opensource-src-4.7.4.tar.gz\n  cd qt-everywhere-opensource-src-4.7.4\n  sed 's/$TODAY/2011-01-30/' -i configure\n  sed 's/i686-pc-mingw32-/i586-mingw32msvc-/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's|QMAKE_CFLAGS\\t\\t= -pipe|QMAKE_CFLAGS\\t\\t= -pipe -isystem /usr/i586-mingw32msvc/include/ -frandom-seed=qtbuild|' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed 's/QMAKE_CXXFLAGS_EXCEPTIONS_ON = -fexceptions -mthreads/QMAKE_CXXFLAGS_EXCEPTIONS_ON = -fexceptions/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed 's/QMAKE_LFLAGS_EXCEPTIONS_ON = -mthreads/QMAKE_LFLAGS_EXCEPTIONS_ON = -lmingwthrd/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's/QMAKE_MOC\\t\\t= i586-mingw32msvc-moc/QMAKE_MOC\\t\\t= moc/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's/QMAKE_RCC\\t\\t= i586-mingw32msvc-rcc/QMAKE_RCC\\t\\t= rcc/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  sed --posix 's/QMAKE_UIC\\t\\t= i586-mingw32msvc-uic/QMAKE_UIC\\t\\t= uic/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  # ar adds timestamps to every object file included in the static library\n  # providing -D as ar argument is supposed to solve it, but doesn't work as qmake strips off the arguments and adds -M to pass a script...\n  # which somehow cannot be combined with other flags.\n  # use faketime only for ar, as it confuses make/qmake into hanging sometimes\n  sed --posix \"s|QMAKE_LIB\\t\\t= i586-mingw32msvc-ar -ru|QMAKE_LIB\\t\\t= $HOME/ar -Dr|\" -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  echo '#!/bin/bash' > $HOME/ar\n  echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> $HOME/ar\n  echo 'i586-mingw32msvc-ar \"$@\"' >> $HOME/ar\n  chmod +x $HOME/ar\n  #export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n  export FAKETIME=$REFERENCE_DATETIME\n  export TZ=UTC\n  ./configure -prefix $INSTDIR -confirm-license -release -opensource -static -no-qt3support -xplatform unsupported/win32-g++-cross -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -no-declarative -no-script -no-scripttools -no-javascript-jit  -no-webkit -no-svg -no-xmlpatterns -no-sql-sqlite -no-nis -no-cups -no-iconv -no-dbus -no-gif -no-libtiff -opengl no -nomake examples -nomake demos -nomake docs\n  find . -name *.prl | xargs -l sed 's|/\\.||' -i\n  find . -name *.prl | xargs -l sed 's|/$||' -i\n  make $MAKEOPTS install\n  cp -a bin $SRCDIR/\n  cd $INSTDIR\n  find . -name *.prl | xargs -l sed 's|/$||' -i\n  sed 's/QMAKE_LIBS_QT_ENTRY     = -lmingw32 -lqtmain/QMAKE_LIBS_QT_ENTRY     = -lqtmain/' -i mkspecs/unsupported/win32-g++-cross/qmake.conf\n  #sed 's|QMAKE_PRL_LIBS.*|QMAKE_PRL_LIBS = -lQtDeclarative -lQtScript -lQtSvg -lQtSql -lQtXmlPatterns -lQtGui -lgdi32 -lcomdlg32 -loleaut32 -limm32 -lwinmm -lwinspool -lmsimg32 -lQtNetwork -lQtCore -lole32 -luuid -lws2_32 -ladvapi32 -lshell32 -luser32 -lkernel32|' -i imports/Qt/labs/particles/qmlparticlesplugin.prl\n\n  # as zip stores file timestamps, use faketime to intercept stat calls to set dates for all files to reference date\n  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n  zip -r $OUTDIR/qt-win32-4.7.4-gitian.zip *\n"], "filenames": ["bitcoin-qt.pro", "contrib/gitian-descriptors/qt-win32.yml"], "buggy_code_start_loc": [294, 49], "buggy_code_end_loc": [296, 49], "fixing_code_start_loc": [294, 50], "fixing_code_end_loc": [296, 51], "type": "NVD-CWE-Other", "message": "Bitcoin-Qt 0.5.0.x before 0.5.0.5; 0.5.1.x, 0.5.2.x, and 0.5.3.x before 0.5.3.1; and 0.6.x before 0.6.0rc4 on Windows does not use MinGW multithread-safe exception handling, which allows remote attackers to cause a denial of service (application crash) or possibly execute arbitrary code via crafted Bitcoin protocol messages.", "other": {"cve": {"id": "CVE-2012-1910", "sourceIdentifier": "cve@mitre.org", "published": "2012-08-06T16:55:01.773", "lastModified": "2020-03-18T17:31:05.473", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Bitcoin-Qt 0.5.0.x before 0.5.0.5; 0.5.1.x, 0.5.2.x, and 0.5.3.x before 0.5.3.1; and 0.6.x before 0.6.0rc4 on Windows does not use MinGW multithread-safe exception handling, which allows remote attackers to cause a denial of service (application crash) or possibly execute arbitrary code via crafted Bitcoin protocol messages."}, {"lang": "es", "value": "Bitcoin-Qt 0.5.0.x anterior a 0.5.0.5; 0.5.1.x, 0.5.2.x, y 0.5.3.x anterior a 0.5.3.1; y 0.6.x anterior a 0.6.0rc4 sobre Windows no utiliza ning\u00fan manejador de excepciones MinGW multithread-safe, lo que permite a atacantes remotos provocar una denegaci\u00f3n de servicio (ca\u00edda de aplicaci\u00f3n) o posiblemente la ejecuci\u00f3n arbitrario de c\u00f3digo a trav\u00e9s de mensajes del protocolo de Bitcoin."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin-qt:0.5.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "27CD6BDE-3732-4863-B855-A0FD022DD62F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin-qt:0.5.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "20635DAC-54CF-48C4-979A-7E909A985093"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin-qt:0.5.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "0264EBF9-C104-49C5-9F43-E0CCC73154B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin-qt:0.5.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "A2233FD0-6F87-4B8B-BDC9-C633F428BA62"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin_core:0.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "9B27520D-C703-4A15-8C8E-A6250C468ED2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin_core:0.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "8B4715C1-22BF-495B-BA99-B4D7D64B5BD0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin_core:0.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "D7E79FF3-C56B-4A19-8AE3-4DDA64AC7BCA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin_core:0.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "EDE5CA7E-C9F2-47ED-9F89-32AC8D664824"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin_core:0.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "A292912B-A5F1-4F90-81E6-0A3CA69166D3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bitcoin:bitcoin_core:0.6.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "7F27334D-1CD6-4002-A5E4-9DA9F21E6FF1"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:microsoft:windows:*:*:*:*:*:*:*:*", "matchCriteriaId": "2CF61F35-5905-4BA9-AD7E-7DB261D2F256"}]}]}], "references": [{"url": "http://gavintech.blogspot.com/2012/03/full-disclosure-bitcoin-qt-on-windows.html", "source": "cve@mitre.org"}, {"url": "https://bitcointalk.org/index.php?topic=69120.0", "source": "cve@mitre.org"}, {"url": "https://en.bitcoin.it/wiki/CVEs", "source": "cve@mitre.org"}, {"url": "https://github.com/bitcoin/bitcoin/commit/8864019f6d88b13d3442843d9e6ebeb8dd938831", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/bitcoin/bitcoin/commit/8864019f6d88b13d3442843d9e6ebeb8dd938831"}}