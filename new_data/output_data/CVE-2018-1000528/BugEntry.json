{"buggy_code": ["<?php\n/*\n * This code is part of GOsa (http://www.gosa-project.org)\n * Copyright (C) 2003-2008 GONICUS GmbH\n *\n * ID: $$Id$$\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nfunction displayPWchanger()\n{\n    global $smarty;\n\n    $smarty->assign (\"logo\", image(get_template_path(\"images/logo.png\")));\n    $smarty->assign (\"date\", date(\"l, dS F Y H:i:s O\"));\n    $smarty->display(get_template_path('password.tpl'));\n    exit();\n}\n\n/* Load required includes */\nrequire_once \"../include/php_setup.inc\";\nrequire_once \"functions.inc\";\n\nif (!class_exists(\"log\")) {\n    require_once(\"class_log.inc\");\n}\n\nheader(\"Content-type: text/html; charset=UTF-8\");\n\nsession::start();\n\n/* Destroy old session if exists.\nElse you will get your old session back, if you not logged out correctly. */\nif (is_array(session::get_all()) && count(session::get_all())) {\n    session::destroy();\n    session::start();\n}\n\n/* Reset errors */\nsession::global_set('js', true);\nsession::set('errors', \"\");\nsession::set('errorsAlreadyPosted', array());\nsession::set('LastError', \"\");\n\n/* Check if CONFIG_FILE is accessible */\nif (!is_readable(CONFIG_DIR.\"/\".CONFIG_FILE)) {\n    msg_dialog::display(\n        _(\"Fatal error\"),\n        sprintf(\n            _(\"GOsa configuration %s/%s is not readable. Aborted.\"),\n            CONFIG_DIR, CONFIG_FILE\n        ),\n        FATAL_ERROR_DIALOG\n    );\n    exit;\n}\n\n/* Parse configuration file */\n$config= new config(CONFIG_DIR.\"/\".CONFIG_FILE, $BASE_DIR);\n\n/* Generate server list */\n$servers= array();\nforeach ($config->data['LOCATIONS'] as $key => $ignored) {\n    $servers[$key]= $key;\n}\n\nif (isset($_POST['server'])) {\n    $directory= get_post('server');\n}elseif (isset($_GET['directory'])) {\n    $directory= $_GET['directory'];\n} else {\n    $directory= $config->data['MAIN']['DEFAULT'];\n    if (!isset($servers[$directory])) {\n        $directory = key($servers);\n    }\n    \n}\n\n// Set location and reload the configRegistry - we've now access to the ldap. \nif(isset($servers[$directory])){\n    $config->set_current($directory);\n    $config->check_and_reload();\n    $config->configRegistry->reload(TRUE);\n}\nsession::global_set('plist', new pluglist($config, $ui));\n\nsession::global_set('debugLevel', $config->get_cfg_value(\"core\",\"debugLevel\"));\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG(\n        DEBUG_CONFIG, __LINE__, __FUNCTION__, __FILE__, $config->data, \"config\"\n    );\n}\n\n/* Set template compile directory */\n$smarty->compile_dir= $config->get_cfg_value(\"core\", \"templateCompileDirectory\");\n\n/* Check for compile directory */\nif (!(is_dir($smarty->compile_dir) && is_writable($smarty->compile_dir))) {\n    msg_dialog::display(\n        _(\"Configuration error\"),\n        sprintf(\n            _(\"Compile directory %s is not accessible!\"),\n            bold($smarty->compile_dir)\n        ),\n        FATAL_ERROR_DIALOG\n    );\n    exit;\n}\n\n/* Check for old files in compile directory */\nclean_smarty_compile_dir($smarty->compile_dir);\n\n/* Language setup */\nif ($config->get_cfg_value(\"core\",\"language\") == \"\") {\n    $lang= get_browser_language();\n} else {\n    $lang= $config->get_cfg_value(\"core\",\"language\");\n}\n$lang.=\".UTF-8\";\nputenv(\"LANGUAGE=\");\nputenv(\"LANG=$lang\");\nsetlocale(LC_ALL, $lang);\n$GLOBALS['t_language']= $lang;\n$GLOBALS['t_gettext_message_dir'] = $BASE_DIR.'/locale/';\n\n/* Set the text domain as 'messages' */\n$domain = 'messages';\nbindtextdomain($domain, LOCALE_DIR);\ntextdomain($domain);\n\n$smarty->assign (\"title\",\"GOsa\");\nif (isset($_GET['directory']) && isset($servers[$_GET['directory']])) {\n    $smarty->assign(\"show_directory_chooser\", false);\n    $directory= validate($_GET['directory']);\n} else {\n    $smarty->assign(\"server_options\", $servers);\n    $smarty->assign(\"server_id\", $directory);\n    $smarty->assign(\"show_directory_chooser\", true);\n}\n\n/* Set config to selected one */\n$config->set_current($directory);\nsession::global_set('config', $config);\n\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG(\n        DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__,\n        $lang, \"Setting language to\"\n    );\n}\n\n\n/* Check for SSL connection */\n$ssl= \"\";\nif (!isset($_SERVER['HTTPS']) ||\n    !stristr($_SERVER['HTTPS'], \"on\")) {\n\n        if (empty($_SERVER['REQUEST_URI'])) {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['PATH_INFO'];\n        } else {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['REQUEST_URI'];\n        }\n}\n\n/* If SSL is forced, just forward to the SSL enabled site */\nif ($config->get_cfg_value(\"core\",\"forceSSL\") == 'true' && $ssl != '') {\n    header(\"Location: $ssl\");\n    exit;\n}\n\n/* Check for selected password method */\n$method= $config->get_cfg_value(\"core\",\"passwordDefaultHash\");\nif (isset($_GET['method'])) {\n    $method= validate($_GET['method']);\n    $tmp = new passwordMethod($config, \"dummy\");\n    $available = $tmp->get_available_methods();\n    if (!isset($available[$method])) {\n        msg_dialog::display(\n            _(\"Password method\"),\n            _(\"Error: Password method not available!\"),\n            FATAL_ERROR_DIALOG\n        );\n        exit;\n    }\n}\n\n\n/* Check for selected user... */\nif (isset($_GET['uid']) && $_GET['uid'] != \"\") {\n    $uid= validate($_GET['uid']);\n    $smarty->assign('display_username', false);\n} elseif (isset($_POST['uid'])) {\n    $uid= get_post('uid');\n    $smarty->assign('display_username', true);\n} else {\n    $uid= \"\";\n    $smarty->assign('display_username', true);\n}\n$current_password= \"\";\n$smarty->assign(\"changed\", false);\n\n/* Got a formular answer, validate and try to log in */\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST['apply'])) {\n\n    /* Destroy old sessions, they cause a successfull login to relog again ...*/\n    if (session::global_is_set('_LAST_PAGE_REQUEST')) {\n        session::global_set('_LAST_PAGE_REQUEST', time());\n    }\n\n    // Get posted values\n    $current_password = get_post('current_password');\n    $new_password = get_post('new_password');\n    $repeated_password = get_post('new_password_repeated');\n\n\n    // Get configuration flags for further input checks.\n    $check_differ = $config->get_cfg_value(\"core\",\"passwordMinDiffer\") != \"\";\n    $differ       = $config->get_cfg_value(\"core\",\"passwordMinDiffer\");\n    $check_length = $config->get_cfg_value(\"core\",\"passwordMinLength\") != \"\";\n    $length       = $config->get_cfg_value(\"core\",\"passwordMinLength\");\n\n    // Once an error has occured it is stored here.\n    $message = array();\n\n    // Perform GOsa password policy checks\n    if(!tests::is_uid($uid)) {\n        $message[]= msgPool::invalid(_(\"Login\"));\n    }elseif(empty($current_password)){\n        $message[] = _(\"You need to specify your current password in order to proceed.\");\n    }elseif($new_password  != $repeated_password){\n        $message[] = _(\"The passwords you've entered as 'New password' and 'Repeated new password' do not match.\");\n    }elseif($new_password == \"\"){\n        $message[] = _(\"The password you've entered as 'New password' is empty.\");\n    }elseif($check_differ && (substr($current_password, 0, $differ) == substr($new_password, 0, $differ))){\n        $message[] = _(\"The password used as new and current are too similar.\");\n    }elseif($check_length && (strlen($new_password) < $length)){\n        $message[] = _(\"The password used as new is to short.\");\n    }elseif(!passwordMethod::is_harmless($new_password)){\n        $message[] = _(\"The password contains possibly problematic Unicode characters!\");\n    }\n\n    // Connect as the given user and load its ACLs\n    if(!count($message)){\n        $ui= ldap_login_user($uid, $current_password);\n        if ($ui === NULL) {\n            $message[]= _(\"Please check the username/password combination!\");\n        } else {\n            $tmp= new acl($config, NULL, $ui->dn);\n            $ui->ocMapping= $tmp->ocMapping;\n            $ui->loadACL();\n            $acls = $ui->get_permissions($ui->dn, \"users/password\");\n            if (!preg_match(\"/w/i\", $acls)) {\n                $message[]= _(\"You have no permissions to change your password!\");\n            }\n        }\n    }\n\n    // Call external check hook to validate the password change\n    if(!count($message)){\n        $attrs = array();\n        $attrs['current_password'] = ($current_password);\n        $attrs['new_password'] = ($new_password);\n        $checkRes = password::callCheckHook($config,$ui->dn,$attrs);\n        if(count($checkRes)){\n            $message[] = sprintf(_(\"Check-hook reported a problem: %s. Password change canceled!\"),implode($checkRes));\n        }\n    }\n\n    // Display error messages\n    if (count($message) != 0) {\n        msg_dialog::displayChecks($message);\n    } else\n\n        // Try to change the password\n        if(!change_password($ui->dn, $_POST['new_password'], FALSE, $method,get_post('current_password'),$msg)){\n            msg_dialog::displayChecks(array($msg));\n        } else {\n            gosa_log(\"User/password has been changed\");\n            $smarty->assign(\"changed\", true);\n        }\n}\n\n/* Parameter fill up */\n$params= \"\";\nforeach (array('uid', 'method', 'directory') as $index) {\n    $params.= \"&amp;$index=\".urlencode($$index);\n}\n$params= preg_replace('/^&amp;/', '?', $params);\n$smarty->assign('params', $params);\n\n/* Fill template with required values */\n$smarty->assign('date', gmdate(\"D, d M Y H:i:s\"));\n$smarty->assign('uid', $uid);\n$smarty->assign('password_img', get_template_path('images/password.png'));\n\n/* Displasy SSL mode warning? */\nif ($ssl != \"\" && $config->get_cfg_value(\"core\",\"warnSSL\") == 'true') {\n    $smarty->assign(\n        \"ssl\",\n        \"<b>\"._(\"Warning\").\":</b> \"._(\"Session will not be encrypted.\").\n        \" <a style=\\\"color:red;\\\" href=\\\"\".htmlentities($ssl).\"\\\"><b>\".\n        _(\"Enter SSL session\").\"</b></a>!\"\n    );\n} else {\n    $smarty->assign(\"ssl\", \"\");\n}\n\n/* show login screen */\n$smarty->assign(\"JS\", session::global_get('js'));\n$smarty->assign(\"PHPSESSID\", session_id());\nif (session::is_set('errors')) {\n    $smarty->assign(\"errors\", session::get('errors'));;\n}\nif ($error_collector != \"\") {\n    $smarty->assign(\"php_errors\", $error_collector.\"</div>\");\n} else {\n    $smarty->assign(\"php_errors\", \"\");\n}\n\n$smarty->assign(\"msg_dialogs\", msg_dialog::get_dialogs());\ndisplayPWchanger();\n\n?>\n\n</body>\n</html>\n// vim:tabstop=2:expandtab:shiftwidth=2:filetype=php:syntax:ruler:\n"], "fixing_code": ["<?php\n/*\n * This code is part of GOsa (http://www.gosa-project.org)\n * Copyright (C) 2003-2008 GONICUS GmbH\n *\n * ID: $$Id$$\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nfunction displayPWchanger()\n{\n    global $smarty;\n\n    $smarty->assign (\"logo\", image(get_template_path(\"images/logo.png\")));\n    $smarty->assign (\"date\", date(\"l, dS F Y H:i:s O\"));\n    $smarty->display(get_template_path('password.tpl'));\n    exit();\n}\n\n/* Load required includes */\nrequire_once \"../include/php_setup.inc\";\nrequire_once \"functions.inc\";\n\nif (!class_exists(\"log\")) {\n    require_once(\"class_log.inc\");\n}\n\nheader(\"Content-type: text/html; charset=UTF-8\");\n\nsession::start();\n\n/* Destroy old session if exists.\nElse you will get your old session back, if you not logged out correctly. */\nif (is_array(session::get_all()) && count(session::get_all())) {\n    session::destroy();\n    session::start();\n}\n\n/* Reset errors */\nsession::global_set('js', true);\nsession::set('errors', \"\");\nsession::set('errorsAlreadyPosted', array());\nsession::set('LastError', \"\");\n\n/* Check if CONFIG_FILE is accessible */\nif (!is_readable(CONFIG_DIR.\"/\".CONFIG_FILE)) {\n    msg_dialog::display(\n        _(\"Fatal error\"),\n        sprintf(\n            _(\"GOsa configuration %s/%s is not readable. Aborted.\"),\n            CONFIG_DIR, CONFIG_FILE\n        ),\n        FATAL_ERROR_DIALOG\n    );\n    exit;\n}\n\n/* Parse configuration file */\n$config= new config(CONFIG_DIR.\"/\".CONFIG_FILE, $BASE_DIR);\n\n/* Generate server list */\n$servers= array();\nforeach ($config->data['LOCATIONS'] as $key => $ignored) {\n    $servers[$key]= $key;\n}\n\nif (isset($_POST['server'])) {\n    $directory= get_post('server');\n}elseif (isset($_GET['directory'])) {\n    $directory= $_GET['directory'];\n} else {\n    $directory= $config->data['MAIN']['DEFAULT'];\n    if (!isset($servers[$directory])) {\n        $directory = key($servers);\n    }\n    \n}\n\n// Set location and reload the configRegistry - we've now access to the ldap. \nif(isset($servers[$directory])){\n    $config->set_current($directory);\n    $config->check_and_reload();\n    $config->configRegistry->reload(TRUE);\n}\nsession::global_set('plist', new pluglist($config, $ui));\n\nsession::global_set('debugLevel', $config->get_cfg_value(\"core\",\"debugLevel\"));\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG(\n        DEBUG_CONFIG, __LINE__, __FUNCTION__, __FILE__, $config->data, \"config\"\n    );\n}\n\n/* Set template compile directory */\n$smarty->compile_dir= $config->get_cfg_value(\"core\", \"templateCompileDirectory\");\n\n/* Check for compile directory */\nif (!(is_dir($smarty->compile_dir) && is_writable($smarty->compile_dir))) {\n    msg_dialog::display(\n        _(\"Configuration error\"),\n        sprintf(\n            _(\"Compile directory %s is not accessible!\"),\n            bold($smarty->compile_dir)\n        ),\n        FATAL_ERROR_DIALOG\n    );\n    exit;\n}\n\n/* Check for old files in compile directory */\nclean_smarty_compile_dir($smarty->compile_dir);\n\n/* Language setup */\nif ($config->get_cfg_value(\"core\",\"language\") == \"\") {\n    $lang= get_browser_language();\n} else {\n    $lang= $config->get_cfg_value(\"core\",\"language\");\n}\n$lang.=\".UTF-8\";\nputenv(\"LANGUAGE=\");\nputenv(\"LANG=$lang\");\nsetlocale(LC_ALL, $lang);\n$GLOBALS['t_language']= $lang;\n$GLOBALS['t_gettext_message_dir'] = $BASE_DIR.'/locale/';\n\n/* Set the text domain as 'messages' */\n$domain = 'messages';\nbindtextdomain($domain, LOCALE_DIR);\ntextdomain($domain);\n\n$smarty->assign (\"title\",\"GOsa\");\nif (isset($_GET['directory']) && isset($servers[$_GET['directory']])) {\n    $smarty->assign(\"show_directory_chooser\", false);\n    $directory= validate($_GET['directory']);\n} else {\n    $smarty->assign(\"server_options\", $servers);\n    $smarty->assign(\"server_id\", $directory);\n    $smarty->assign(\"show_directory_chooser\", true);\n}\n\n/* Set config to selected one */\n$config->set_current($directory);\nsession::global_set('config', $config);\n\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG(\n        DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__,\n        $lang, \"Setting language to\"\n    );\n}\n\n\n/* Check for SSL connection */\n$ssl= \"\";\nif (!isset($_SERVER['HTTPS']) ||\n    !stristr($_SERVER['HTTPS'], \"on\")) {\n\n        if (empty($_SERVER['REQUEST_URI'])) {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['PATH_INFO'];\n        } else {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['REQUEST_URI'];\n        }\n}\n\n/* If SSL is forced, just forward to the SSL enabled site */\nif ($config->get_cfg_value(\"core\",\"forceSSL\") == 'true' && $ssl != '') {\n    header(\"Location: $ssl\");\n    exit;\n}\n\n/* Check for selected password method */\n$method= $config->get_cfg_value(\"core\",\"passwordDefaultHash\");\nif (isset($_GET['method'])) {\n    $method= validate($_GET['method']);\n    $tmp = new passwordMethod($config, \"dummy\");\n    $available = $tmp->get_available_methods();\n    if (!isset($available[$method])) {\n        msg_dialog::display(\n            _(\"Password method\"),\n            _(\"Error: Password method not available!\"),\n            FATAL_ERROR_DIALOG\n        );\n        exit;\n    }\n}\n\n\n/* Check for selected user... */\nif (isset($_GET['uid']) && $_GET['uid'] != \"\") {\n    $uid= validate($_GET['uid']);\n    $smarty->assign('display_username', false);\n} elseif (isset($_POST['uid'])) {\n    $uid= get_post('uid');\n    $smarty->assign('display_username', true);\n} else {\n    $uid= \"\";\n    $smarty->assign('display_username', true);\n}\n$current_password= \"\";\n$smarty->assign(\"changed\", false);\n\n/* Got a formular answer, validate and try to log in */\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST['apply'])) {\n\n    /* Destroy old sessions, they cause a successfull login to relog again ...*/\n    if (session::global_is_set('_LAST_PAGE_REQUEST')) {\n        session::global_set('_LAST_PAGE_REQUEST', time());\n    }\n\n    // Get posted values\n    $current_password = get_post('current_password');\n    $new_password = get_post('new_password');\n    $repeated_password = get_post('new_password_repeated');\n\n\n    // Get configuration flags for further input checks.\n    $check_differ = $config->get_cfg_value(\"core\",\"passwordMinDiffer\") != \"\";\n    $differ       = $config->get_cfg_value(\"core\",\"passwordMinDiffer\");\n    $check_length = $config->get_cfg_value(\"core\",\"passwordMinLength\") != \"\";\n    $length       = $config->get_cfg_value(\"core\",\"passwordMinLength\");\n\n    // Once an error has occured it is stored here.\n    $message = array();\n\n    // Perform GOsa password policy checks\n    if(!tests::is_uid($uid)) {\n        $message[]= msgPool::invalid(_(\"Login\"));\n    }elseif(empty($current_password)){\n        $message[] = _(\"You need to specify your current password in order to proceed.\");\n    }elseif($new_password  != $repeated_password){\n        $message[] = _(\"The passwords you've entered as 'New password' and 'Repeated new password' do not match.\");\n    }elseif($new_password == \"\"){\n        $message[] = _(\"The password you've entered as 'New password' is empty.\");\n    }elseif($check_differ && (substr($current_password, 0, $differ) == substr($new_password, 0, $differ))){\n        $message[] = _(\"The password used as new and current are too similar.\");\n    }elseif($check_length && (strlen($new_password) < $length)){\n        $message[] = _(\"The password used as new is to short.\");\n    }elseif(!passwordMethod::is_harmless($new_password)){\n        $message[] = _(\"The password contains possibly problematic Unicode characters!\");\n    }\n\n    // Connect as the given user and load its ACLs\n    if(!count($message)){\n        $ui= ldap_login_user($uid, $current_password);\n        if ($ui === NULL) {\n            $message[]= _(\"Please check the username/password combination!\");\n        } else {\n            $tmp= new acl($config, NULL, $ui->dn);\n            $ui->ocMapping= $tmp->ocMapping;\n            $ui->loadACL();\n            $acls = $ui->get_permissions($ui->dn, \"users/password\");\n            if (!preg_match(\"/w/i\", $acls)) {\n                $message[]= _(\"You have no permissions to change your password!\");\n            }\n        }\n    }\n\n    // Call external check hook to validate the password change\n    if(!count($message)){\n        $attrs = array();\n        $attrs['current_password'] = ($current_password);\n        $attrs['new_password'] = ($new_password);\n        $checkRes = password::callCheckHook($config,$ui->dn,$attrs);\n        if(count($checkRes)){\n            $message[] = sprintf(_(\"Check-hook reported a problem: %s. Password change canceled!\"),implode($checkRes));\n        }\n    }\n\n    // Display error messages\n    if (count($message) != 0) {\n        msg_dialog::displayChecks($message);\n    } else\n\n        // Try to change the password\n        if(!change_password($ui->dn, $_POST['new_password'], FALSE, $method,get_post('current_password'),$msg)){\n            msg_dialog::displayChecks(array($msg));\n        } else {\n            gosa_log(\"User/password has been changed\");\n            $smarty->assign(\"changed\", true);\n        }\n}\n\n/* Parameter fill up */\n$params= \"\";\nforeach (array('uid', 'method', 'directory') as $index) {\n    $params.= \"&amp;$index=\".urlencode($$index);\n}\n$params= preg_replace('/^&amp;/', '?', $params);\n$smarty->assign('params', $params);\n\n/* Fill template with required values */\n$smarty->assign('date', gmdate(\"D, d M Y H:i:s\"));\n$smarty->assign('uid', set_post($uid));\n$smarty->assign('password_img', get_template_path('images/password.png'));\n\n/* Displasy SSL mode warning? */\nif ($ssl != \"\" && $config->get_cfg_value(\"core\",\"warnSSL\") == 'true') {\n    $smarty->assign(\n        \"ssl\",\n        \"<b>\"._(\"Warning\").\":</b> \"._(\"Session will not be encrypted.\").\n        \" <a style=\\\"color:red;\\\" href=\\\"\".htmlentities($ssl).\"\\\"><b>\".\n        _(\"Enter SSL session\").\"</b></a>!\"\n    );\n} else {\n    $smarty->assign(\"ssl\", \"\");\n}\n\n/* show login screen */\n$smarty->assign(\"JS\", session::global_get('js'));\n$smarty->assign(\"PHPSESSID\", session_id());\nif (session::is_set('errors')) {\n    $smarty->assign(\"errors\", session::get('errors'));;\n}\nif ($error_collector != \"\") {\n    $smarty->assign(\"php_errors\", $error_collector.\"</div>\");\n} else {\n    $smarty->assign(\"php_errors\", \"\");\n}\n\n$smarty->assign(\"msg_dialogs\", msg_dialog::get_dialogs());\ndisplayPWchanger();\n\n?>\n\n</body>\n</html>\n// vim:tabstop=2:expandtab:shiftwidth=2:filetype=php:syntax:ruler:\n"], "filenames": ["html/password.php"], "buggy_code_start_loc": [308], "buggy_code_end_loc": [309], "fixing_code_start_loc": [308], "fixing_code_end_loc": [309], "type": "CWE-79", "message": "GONICUS GOsa version before commit 56070d6289d47ba3f5918885954dcceb75606001 contains a Cross Site Scripting (XSS) vulnerability in change password form (html/password.php, #308) that can result in injection of arbitrary web script or HTML. This attack appear to be exploitable via the victim must open a specially crafted web page. This vulnerability appears to have been fixed in after commit 56070d6289d47ba3f5918885954dcceb75606001.", "other": {"cve": {"id": "CVE-2018-1000528", "sourceIdentifier": "cve@mitre.org", "published": "2018-06-26T16:29:01.697", "lastModified": "2018-08-30T16:06:14.667", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GONICUS GOsa version before commit 56070d6289d47ba3f5918885954dcceb75606001 contains a Cross Site Scripting (XSS) vulnerability in change password form (html/password.php, #308) that can result in injection of arbitrary web script or HTML. This attack appear to be exploitable via the victim must open a specially crafted web page. This vulnerability appears to have been fixed in after commit 56070d6289d47ba3f5918885954dcceb75606001."}, {"lang": "es", "value": "GONICUS GOsa en versiones anteriores al commit con ID 56070d6289d47ba3f5918885954dcceb75606001 contiene una vulnerabilidad de Cross-Site Scripting (XSS) en el formulario de cambio de contrase\u00f1a (html/password.php, #308) que puede resultar en la inyecci\u00f3n de scripts web o HTML arbitrarios. El ataque parece ser explotable si una v\u00edctima abre una p\u00e1gina web especialmente manipulada. La vulnerabilidad parece haber sido solucionada tras el commit con ID 56070d6289d47ba3f5918885954dcceb75606001."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gonicus:gosa:-:*:*:*:*:*:*:*", "matchCriteriaId": "CB64A156-92F4-423F-A70D-EE9EDB6BCE60"}]}]}], "references": [{"url": "https://github.com/gosa-project/gosa-core/commit/56070d6289d47ba3f5918885954dcceb75606001", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gosa-project/gosa-core/issues/14", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/07/msg00028.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4239", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gosa-project/gosa-core/commit/56070d6289d47ba3f5918885954dcceb75606001"}}