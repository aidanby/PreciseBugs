{"buggy_code": ["<?php \n\nnamespace Kirby\\Panel\\Models\\Page;\n\nuse Error;\nuse Exception;\nuse F;\nuse Str;\nuse Kirby\\Panel\\Event;\nuse Kirby\\Panel\\Upload;\n\nclass Uploader {\n\n  public $kirby;\n  public $page;\n  public $file;\n  public $blueprint;\n  public $filename;\n\n  public function __construct($page, $file = null) {\n\n    $this->page      = $page;\n    $this->file      = $file;\n    $this->blueprint = $page->blueprint();\n    $this->filename  = $this->blueprint->files()->sanitize() ? '{safeFilename}' : '{filename}';\n\n    if($this->file) {\n      $this->replace();\n    } else {\n      $this->upload();      \n    }\n\n  }\n\n  public function upload() {\n\n    $upload = new Upload($this->page->root() . DS . $this->filename, array(\n      'overwrite' => true,\n      'accept'    => function($file) {\n\n        $callback = kirby()->option('panel.upload.accept');\n\n        if(is_callable($callback)) {\n          return call($callback, $file);\n        } else {\n          return true;\n        }\n\n      }\n    ));\n\n    $event = $this->page->event('upload:action');\n    $file  = $this->move($upload, $event);\n\n    // create the initial meta file\n    // without triggering the update hook\n    try {\n      $file->createMeta(false);      \n    } catch(Exception $e) {\n      // don't react on meta errors\n      // the meta file can still be generated later\n    }\n\n    // make sure that the file is being marked as updated\n    touch($file->root());\n\n    kirby()->trigger($event, $file);          \n\n  }\n\n  public function replace() {\n\n    $file   = $this->file;    \n    $upload = new Upload($file->root(), array(\n      'overwrite' => true,\n      'accept' => function($upload) use($file) {\n        if($upload->mime() != $file->mime()) {\n          throw new Error(l('files.replace.error.type'));\n        }\n      }\n    ));\n\n    // keep the old state of the file object\n    $old   = clone $file;\n    $event = $file->event('replace:action');\n    $file  = $this->move($upload, $event);\n\n    // make sure that the file is being marked as updated\n    touch($file->root());\n\n    // clean all thumbs of the file\n    $file->removeThumbs();\n\n    kirby()->trigger($event, [$file, $old]);\n\n  }\n\n  public function move($upload, $event) {\n\n    // flush all cached files\n    $this->page->reset();\n\n    // get the file object from the upload\n    $uploaded = $upload->file();\n\n    // check if the upload worked\n    if(!$uploaded) {\n      throw new Exception($upload->error()->getMessage());\n    }\n\n    // check if the page has such a file\n    $file = $this->page->file($uploaded->filename());\n\n    // delete the upload if something went wrong\n    if(!$file) {\n      $uploaded->delete();\n      throw new Exception(l('files.error.missing.file'));\n    }\n\n    try {\n      // add the uploaded file to the event target\n      $event->target->upload = $file;\n      // and check for permissions\n      $event->check();\n      // run additional file checks\n      $this->checkUpload($file);\n      return $file;\n    } catch(Exception $e) {\n      $file->delete(true);\n      throw $e;\n    }\n\n  }\n\n  public function checkUpload($file) {\n\n    $filesettings        = $this->blueprint->files();\n    $forbiddenExtensions = array('php', 'html', 'htm', 'exe', kirby()->option('content.file.extension', 'txt'));\n    $forbiddenMimes      = array_merge(f::$mimes['php'], array('text/html', 'application/x-msdownload'));\n    $extension           = strtolower($file->extension());\n\n    // files without extension are not allowed\n    if(empty($extension)) {\n      throw new Exception(l('files.add.error.extension.missing'));\n    }\n\n    // block forbidden extensions\n    if(in_array($extension, $forbiddenExtensions)) {\n      throw new Exception(l('files.add.error.extension.forbidden'));\n    }\n\n    // especially block any connection that contains php\n    if(str::contains($extension, 'php')) {\n      throw new Exception(l('files.add.error.extension.forbidden'));\n    }\n\n    // block forbidden mimes\n    if(in_array(strtolower($file->mime()), $forbiddenMimes)) {\n      throw new Exception(l('files.add.error.mime.forbidden'));\n    }\n\n    // Block htaccess files\n    if(strtolower($file->filename()) == '.htaccess') {\n      throw new Exception(l('files.add.error.htaccess'));\n    }\n\n    // Block invisible files\n    if(str::startsWith($file->filename(), '.')) {\n      throw new Exception(l('files.add.error.invisible'));\n    }\n\n    // Files blueprint option 'type'\n    if(count($filesettings->type()) > 0 and !in_array($file->type(), $filesettings->type())) {\n      throw new Exception(l('files.add.blueprint.type.error') . ' ' . implode(', ', $filesettings->type()));\n    }\n\n    // Files blueprint option 'size'\n    if($filesettings->size() and f::size($file->root()) > $filesettings->size()) {\n      throw new Exception(l('files.add.blueprint.size.error') . ' ' . f::niceSize($filesettings->size()));\n    }\n\n    // Files blueprint option 'width'\n    if($file->type() == 'image' and $filesettings->width() and $file->width() > $filesettings->width()) {\n      throw new Exception('Page only allows image width of ' . $filesettings->width().'px');\n    }\n\n    // Files blueprint option 'height'\n    if($file->type() == 'image' and $filesettings->height() and $file->height() > $filesettings->height()) {\n      throw new Exception('Page only allows image height of ' . $filesettings->height().'px');\n    } \n\n  }\n\n}"], "fixing_code": ["<?php\n\nnamespace Kirby\\Panel\\Models\\Page;\n\nuse Error;\nuse Exception;\nuse F;\nuse Str;\nuse Kirby\\Panel\\Event;\nuse Kirby\\Panel\\Upload;\n\nclass Uploader {\n\n  public $kirby;\n  public $page;\n  public $file;\n  public $blueprint;\n  public $filename;\n\n  public function __construct($page, $file = null) {\n\n    $this->page      = $page;\n    $this->file      = $file;\n    $this->blueprint = $page->blueprint();\n    $this->filename  = $this->blueprint->files()->sanitize() ? '{safeFilename}' : '{filename}';\n\n    if($this->file) {\n      $this->replace();\n    } else {\n      $this->upload();\n    }\n\n  }\n\n  public function upload() {\n\n    $upload = new Upload($this->page->root() . DS . $this->filename, array(\n      'overwrite' => true,\n      'accept'    => function($file) {\n\n        $callback = kirby()->option('panel.upload.accept');\n\n        if(is_callable($callback)) {\n          return call($callback, $file);\n        } else {\n          return true;\n        }\n\n      }\n    ));\n\n    $event = $this->page->event('upload:action');\n    $file  = $this->move($upload, $event);\n\n    // create the initial meta file\n    // without triggering the update hook\n    try {\n      $file->createMeta(false);\n    } catch(Exception $e) {\n      // don't react on meta errors\n      // the meta file can still be generated later\n    }\n\n    // make sure that the file is being marked as updated\n    touch($file->root());\n\n    kirby()->trigger($event, $file);\n\n  }\n\n  public function replace() {\n\n    $file   = $this->file;\n    $upload = new Upload($file->root(), array(\n      'overwrite' => true,\n      'accept' => function($upload) use($file) {\n        if($upload->mime() != $file->mime()) {\n          throw new Error(l('files.replace.error.type'));\n        }\n      }\n    ));\n\n    // keep the old state of the file object\n    $old   = clone $file;\n    $event = $file->event('replace:action');\n    $file  = $this->move($upload, $event);\n\n    // make sure that the file is being marked as updated\n    touch($file->root());\n\n    // clean all thumbs of the file\n    $file->removeThumbs();\n\n    kirby()->trigger($event, [$file, $old]);\n\n  }\n\n  public function move($upload, $event) {\n\n    // flush all cached files\n    $this->page->reset();\n\n    // get the file object from the upload\n    $uploaded = $upload->file();\n\n    // check if the upload worked\n    if(!$uploaded) {\n      throw new Exception($upload->error()->getMessage());\n    }\n\n    // check if the page has such a file\n    $file = $this->page->file($uploaded->filename());\n\n    // delete the upload if something went wrong\n    if(!$file) {\n      $uploaded->delete();\n      throw new Exception(l('files.error.missing.file'));\n    }\n\n    try {\n      // add the uploaded file to the event target\n      $event->target->upload = $file;\n      // and check for permissions\n      $event->check();\n      // run additional file checks\n      $this->checkUpload($file);\n      return $file;\n    } catch(Exception $e) {\n      $file->delete(true);\n      throw $e;\n    }\n\n  }\n\n  public function checkUpload($file) {\n\n    $filesettings        = $this->blueprint->files();\n    $forbiddenExtensions = array('php', 'phar', 'html', 'htm', 'exe', kirby()->option('content.file.extension', 'txt'));\n    $forbiddenMimes      = array_merge(f::$mimes['php'], array('text/html', 'application/x-msdownload'));\n    $extension           = strtolower($file->extension());\n\n    // files without extension are not allowed\n    if(empty($extension)) {\n      throw new Exception(l('files.add.error.extension.missing'));\n    }\n\n    // block forbidden extensions\n    if(in_array($extension, $forbiddenExtensions)) {\n      throw new Exception(l('files.add.error.extension.forbidden'));\n    }\n\n    // especially block any connection that contains php\n    if(str::contains($extension, 'php') || str::contains($extension, 'phar')) {\n      throw new Exception(l('files.add.error.extension.forbidden'));\n    }\n\n    // block forbidden mimes\n    if(in_array(strtolower($file->mime()), $forbiddenMimes)) {\n      throw new Exception(l('files.add.error.mime.forbidden'));\n    }\n\n    // Block htaccess files\n    if(strtolower($file->filename()) == '.htaccess') {\n      throw new Exception(l('files.add.error.htaccess'));\n    }\n\n    // Block invisible files\n    if(str::startsWith($file->filename(), '.')) {\n      throw new Exception(l('files.add.error.invisible'));\n    }\n\n    // Files blueprint option 'type'\n    if(count($filesettings->type()) > 0 and !in_array($file->type(), $filesettings->type())) {\n      throw new Exception(l('files.add.blueprint.type.error') . ' ' . implode(', ', $filesettings->type()));\n    }\n\n    // Files blueprint option 'size'\n    if($filesettings->size() and f::size($file->root()) > $filesettings->size()) {\n      throw new Exception(l('files.add.blueprint.size.error') . ' ' . f::niceSize($filesettings->size()));\n    }\n\n    // Files blueprint option 'width'\n    if($file->type() == 'image' and $filesettings->width() and $file->width() > $filesettings->width()) {\n      throw new Exception('Page only allows image width of ' . $filesettings->width().'px');\n    }\n\n    // Files blueprint option 'height'\n    if($file->type() == 'image' and $filesettings->height() and $file->height() > $filesettings->height()) {\n      throw new Exception('Page only allows image height of ' . $filesettings->height().'px');\n    }\n\n  }\n\n}\n"], "filenames": ["app/src/panel/models/page/uploader.php"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [195], "fixing_code_start_loc": [1], "fixing_code_end_loc": [195], "type": "CWE-434", "message": "Kirby is a CMS. In Kirby CMS (getkirby/cms) before version 3.4.5, and Kirby Panel before version 2.5.14 , an editor with full access to the Kirby Panel can upload a PHP .phar file and execute it on the server. This vulnerability is critical if you might have potential attackers in your group of authenticated Panel users, as they can gain access to the server with such a Phar file. Visitors without Panel access *cannot* use this attack vector. The problem has been patched in Kirby 2.5.14 and Kirby 3.4.5. Please update to one of these or a later version to fix the vulnerability. Note: Kirby 2 reaches end of life on December 31, 2020. We therefore recommend to upgrade your Kirby 2 sites to Kirby 3. If you cannot upgrade, we still recommend to update to Kirby 2.5.14.", "other": {"cve": {"id": "CVE-2020-26255", "sourceIdentifier": "security-advisories@github.com", "published": "2020-12-08T15:15:11.240", "lastModified": "2020-12-10T14:35:02.510", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Kirby is a CMS. In Kirby CMS (getkirby/cms) before version 3.4.5, and Kirby Panel before version 2.5.14 , an editor with full access to the Kirby Panel can upload a PHP .phar file and execute it on the server. This vulnerability is critical if you might have potential attackers in your group of authenticated Panel users, as they can gain access to the server with such a Phar file. Visitors without Panel access *cannot* use this attack vector. The problem has been patched in Kirby 2.5.14 and Kirby 3.4.5. Please update to one of these or a later version to fix the vulnerability. Note: Kirby 2 reaches end of life on December 31, 2020. We therefore recommend to upgrade your Kirby 2 sites to Kirby 3. If you cannot upgrade, we still recommend to update to Kirby 2.5.14."}, {"lang": "es", "value": "Kirby es un CMS.&#xa0;En Kirby CMS (getkirby/cms) anterior a la versi\u00f3n 3.4.5 y Kirby Panel anterior a la versi\u00f3n 2.5.14, un editor con acceso completo a Kirby Panel puede cargar un archivo PHP .phar y ejecutarlo en el servidor.&#xa0;Esta vulnerabilidad es cr\u00edtica si puede tener atacantes potenciales en su grupo de usuarios autenticados de Panel, ya que pueden conseguir acceso al servidor con dicho archivo Phar.&#xa0;Los visitantes sin acceso a Panel *cannot* usar este vector de ataque.&#xa0;El problema ha sido parcheado en Kirby versi\u00f3n 2.5.14 y Kirby versi\u00f3n 3.4.5.&#xa0;Actualice a uno de estas o una versi\u00f3n posterior para corregir la vulnerabilidad.&#xa0;Nota: Kirby versi\u00f3n 2 llega al final de su vida \u00fatil el 31 de diciembre de 2020. Por lo tanto, recomendamos actualizar sus sitios de Kirby versi\u00f3n 2 a Kirby versi\u00f3n 3. Si no puede actualizar, recomendamos actualizar a Kirby 2.5.14"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:getkirby:kirby:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.4.5", "matchCriteriaId": "59BA7977-68A2-4313-98F6-7070168C474B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:getkirby:panel:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.14", "matchCriteriaId": "33033A60-7661-4FFE-969A-3ECA22773648"}]}]}], "references": [{"url": "https://github.com/getkirby-v2/panel/commit/5a569d4e3ddaea2b6628d7ec1472a3e8bc410881", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/getkirby/kirby/commit/db8f371b13036861c9cc5ba3e85e27f73fce5e09", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/getkirby/kirby/releases/tag/3.4.5", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/getkirby/kirby/security/advisories/GHSA-g3h8-cg9x-47qw", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://packagist.org/packages/getkirby/cms", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://packagist.org/packages/getkirby/panel", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/getkirby-v2/panel/commit/5a569d4e3ddaea2b6628d7ec1472a3e8bc410881"}}