{"buggy_code": ["<?php\n/**\n*\n* @package phpBB3\n* @version $Id$\n* @copyright (c) 2005 phpBB Group\n* @license http://opensource.org/licenses/gpl-license.php GNU Public License\n*\n*/\n\n/**\n* @ignore\n*/\nif (!defined('IN_PHPBB'))\n{\n\texit;\n}\n\n// Common global functions\n\n/**\n* set_var\n*\n* Set variable, used by {@link request_var the request_var function}\n*\n* @access private\n*/\nfunction set_var(&$result, $var, $type, $multibyte = false)\n{\n\tsettype($var, $type);\n\t$result = $var;\n\n\tif ($type == 'string')\n\t{\n\t\t$result = trim(htmlspecialchars(str_replace(array(\"\\r\\n\", \"\\r\", \"\\0\"), array(\"\\n\", \"\\n\", ''), $result), ENT_COMPAT, 'UTF-8'));\n\n\t\tif (!empty($result))\n\t\t{\n\t\t\t// Make sure multibyte characters are wellformed\n\t\t\tif ($multibyte)\n\t\t\t{\n\t\t\t\tif (!preg_match('/^./u', $result))\n\t\t\t\t{\n\t\t\t\t\t$result = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// no multibyte, allow only ASCII (0-127)\n\t\t\t\t$result = preg_replace('/[\\x80-\\xFF]/', '?', $result);\n\t\t\t}\n\t\t}\n\n\t\t$result = (STRIP) ? stripslashes($result) : $result;\n\t}\n}\n\n/**\n* request_var\n*\n* Used to get passed variable\n*/\nfunction request_var($var_name, $default, $multibyte = false, $cookie = false)\n{\n\tif (!$cookie && isset($_COOKIE[$var_name]))\n\t{\n\t\tif (!isset($_GET[$var_name]) && !isset($_POST[$var_name]))\n\t\t{\n\t\t\treturn (is_array($default)) ? array() : $default;\n\t\t}\n\t\t$_REQUEST[$var_name] = isset($_POST[$var_name]) ? $_POST[$var_name] : $_GET[$var_name];\n\t}\n\n\t$super_global = ($cookie) ? '_COOKIE' : '_REQUEST';\n\tif (!isset($GLOBALS[$super_global][$var_name]) || is_array($GLOBALS[$super_global][$var_name]) != is_array($default))\n\t{\n\t\treturn (is_array($default)) ? array() : $default;\n\t}\n\n\t$var = $GLOBALS[$super_global][$var_name];\n\tif (!is_array($default))\n\t{\n\t\t$type = gettype($default);\n\t}\n\telse\n\t{\n\t\tlist($key_type, $type) = each($default);\n\t\t$type = gettype($type);\n\t\t$key_type = gettype($key_type);\n\t\tif ($type == 'array')\n\t\t{\n\t\t\treset($default);\n\t\t\t$default = current($default);\n\t\t\tlist($sub_key_type, $sub_type) = each($default);\n\t\t\t$sub_type = gettype($sub_type);\n\t\t\t$sub_type = ($sub_type == 'array') ? 'NULL' : $sub_type;\n\t\t\t$sub_key_type = gettype($sub_key_type);\n\t\t}\n\t}\n\n\tif (is_array($var))\n\t{\n\t\t$_var = $var;\n\t\t$var = array();\n\n\t\tforeach ($_var as $k => $v)\n\t\t{\n\t\t\tset_var($k, $k, $key_type);\n\t\t\tif ($type == 'array' && is_array($v))\n\t\t\t{\n\t\t\t\tforeach ($v as $_k => $_v)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($_v))\n\t\t\t\t\t{\n\t\t\t\t\t\t$_v = null;\n\t\t\t\t\t}\n\t\t\t\t\tset_var($_k, $_k, $sub_key_type, $multibyte);\n\t\t\t\t\tset_var($var[$k][$_k], $_v, $sub_type, $multibyte);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($type == 'array' || is_array($v))\n\t\t\t\t{\n\t\t\t\t\t$v = null;\n\t\t\t\t}\n\t\t\t\tset_var($var[$k], $v, $type, $multibyte);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tset_var($var, $var, $type, $multibyte);\n\t}\n\n\treturn $var;\n}\n\n/**\n* Sets a configuration option's value.\n*\n* Please note that this function does not update the is_dynamic value for\n* an already existing config option.\n*\n* @param string $config_name   The configuration option's name\n* @param string $config_value  New configuration value\n* @param bool   $is_dynamic    Whether this variable should be cached (false) or\n*                              if it changes too frequently (true) to be\n*                              efficiently cached.\n*\n* @return null\n*/\nfunction set_config($config_name, $config_value, $is_dynamic = false)\n{\n\tglobal $db, $cache, $config;\n\n\t$sql = 'UPDATE ' . CONFIG_TABLE . \"\n\t\tSET config_value = '\" . $db->sql_escape($config_value) . \"'\n\t\tWHERE config_name = '\" . $db->sql_escape($config_name) . \"'\";\n\t$db->sql_query($sql);\n\n\tif (!$db->sql_affectedrows() && !isset($config[$config_name]))\n\t{\n\t\t$sql = 'INSERT INTO ' . CONFIG_TABLE . ' ' . $db->sql_build_array('INSERT', array(\n\t\t\t'config_name'\t=> $config_name,\n\t\t\t'config_value'\t=> $config_value,\n\t\t\t'is_dynamic'\t=> ($is_dynamic) ? 1 : 0));\n\t\t$db->sql_query($sql);\n\t}\n\n\t$config[$config_name] = $config_value;\n\n\tif (!$is_dynamic)\n\t{\n\t\t$cache->destroy('config');\n\t}\n}\n\n/**\n* Increments an integer config value directly in the database.\n*\n* @param string $config_name   The configuration option's name\n* @param int    $increment     Amount to increment by\n* @param bool   $is_dynamic    Whether this variable should be cached (false) or\n*                              if it changes too frequently (true) to be\n*                              efficiently cached.\n*\n* @return null\n*/\nfunction set_config_count($config_name, $increment, $is_dynamic = false)\n{\n\tglobal $db, $cache;\n\n\tswitch ($db->sql_layer)\n\t{\n\t\tcase 'firebird':\n\t\t\t// Precision must be from 1 to 18\n\t\t\t$sql_update = 'CAST(CAST(config_value as DECIMAL(18, 0)) + ' . (int) $increment . ' as VARCHAR(255))';\n\t\tbreak;\n\n\t\tcase 'postgres':\n\t\t\t// Need to cast to text first for PostgreSQL 7.x\n\t\t\t$sql_update = 'CAST(CAST(config_value::text as DECIMAL(255, 0)) + ' . (int) $increment . ' as VARCHAR(255))';\n\t\tbreak;\n\n\t\t// MySQL, SQlite, mssql, mssql_odbc, oracle\n\t\tdefault:\n\t\t\t$sql_update = 'config_value + ' . (int) $increment;\n\t\tbreak;\n\t}\n\n\t$db->sql_query('UPDATE ' . CONFIG_TABLE . ' SET config_value = ' . $sql_update . \" WHERE config_name = '\" . $db->sql_escape($config_name) . \"'\");\n\n\tif (!$is_dynamic)\n\t{\n\t\t$cache->destroy('config');\n\t}\n}\n\n/**\n* Generates an alphanumeric random string of given length\n*\n* @return string\n*/\nfunction gen_rand_string($num_chars = 8)\n{\n\t// [a, z] + [0, 9] = 36\n\treturn substr(strtoupper(base_convert(unique_id(), 16, 36)), 0, $num_chars);\n}\n\n/**\n* Generates a user-friendly alphanumeric random string of given length\n* We remove 0 and O so users cannot confuse those in passwords etc.\n*\n* @return string\n*/\nfunction gen_rand_string_friendly($num_chars = 8)\n{\n\t$rand_str = unique_id();\n\n\t// Remove Z and Y from the base_convert(), replace 0 with Z and O with Y\n\t// [a, z] + [0, 9] - {z, y} = [a, z] + [0, 9] - {0, o} = 34\n\t$rand_str = str_replace(array('0', 'O'), array('Z', 'Y'), strtoupper(base_convert($rand_str, 16, 34)));\n\n\treturn substr($rand_str, 0, $num_chars);\n}\n\n/**\n* Return unique id\n* @param string $extra additional entropy\n*/\nfunction unique_id($extra = 'c')\n{\n\tstatic $dss_seeded = false;\n\tglobal $config;\n\n\t$val = $config['rand_seed'] . microtime();\n\t$val = md5($val);\n\t$config['rand_seed'] = md5($config['rand_seed'] . $val . $extra);\n\n\tif ($dss_seeded !== true && ($config['rand_seed_last_update'] < time() - rand(1,10)))\n\t{\n\t\tset_config('rand_seed_last_update', time(), true);\n\t\tset_config('rand_seed', $config['rand_seed'], true);\n\t\t$dss_seeded = true;\n\t}\n\n\treturn substr($val, 4, 16);\n}\n\n/**\n* Wrapper for mt_rand() which allows swapping $min and $max parameters.\n*\n* PHP does not allow us to swap the order of the arguments for mt_rand() anymore.\n* (since PHP 5.3.4, see http://bugs.php.net/46587)\n*\n* @param int $min\t\tLowest value to be returned\n* @param int $max\t\tHighest value to be returned\n*\n* @return int\t\t\tRandom integer between $min and $max (or $max and $min)\n*/\nfunction phpbb_mt_rand($min, $max)\n{\n\treturn ($min > $max) ? mt_rand($max, $min) : mt_rand($min, $max);\n}\n\n/**\n* Wrapper for getdate() which returns the equivalent array for UTC timestamps.\n*\n* @param int $time\t\tUnix timestamp (optional)\n*\n* @return array\t\t\tReturns an associative array of information related to the timestamp.\n*\t\t\t\t\t\tSee http://www.php.net/manual/en/function.getdate.php\n*/\nfunction phpbb_gmgetdate($time = false)\n{\n\tif ($time === false)\n\t{\n\t\t$time = time();\n\t}\n\n\t// getdate() interprets timestamps in local time.\n\t// What follows uses the fact that getdate() and\n\t// date('Z') balance each other out.\n\treturn getdate($time - date('Z'));\n}\n\n/**\n* Return formatted string for filesizes\n*\n* @param mixed\t$value\t\t\tfilesize in bytes\n*\t\t\t\t\t\t\t\t(non-negative number; int, float or string)\n* @param bool\t$string_only\ttrue if language string should be returned\n* @param array\t$allowed_units\tonly allow these units (data array indexes)\n*\n* @return mixed\t\t\t\t\tdata array if $string_only is false\n* @author bantu\n*/\nfunction get_formatted_filesize($value, $string_only = true, $allowed_units = false)\n{\n\tglobal $user;\n\n\t$available_units = array(\n\t\t'tb' => array(\n\t\t\t'min' \t\t=> 1099511627776, // pow(2, 40)\n\t\t\t'index'\t\t=> 4,\n\t\t\t'si_unit'\t=> 'TB',\n\t\t\t'iec_unit'\t=> 'TIB',\n\t\t),\n\t\t'gb' => array(\n\t\t\t'min' \t\t=> 1073741824, // pow(2, 30)\n\t\t\t'index'\t\t=> 3,\n\t\t\t'si_unit'\t=> 'GB',\n\t\t\t'iec_unit'\t=> 'GIB',\n\t\t),\n\t\t'mb' => array(\n\t\t\t'min'\t\t=> 1048576, // pow(2, 20)\n\t\t\t'index'\t\t=> 2,\n\t\t\t'si_unit'\t=> 'MB',\n\t\t\t'iec_unit'\t=> 'MIB',\n\t\t),\n\t\t'kb' => array(\n\t\t\t'min'\t\t=> 1024, // pow(2, 10)\n\t\t\t'index'\t\t=> 1,\n\t\t\t'si_unit'\t=> 'KB',\n\t\t\t'iec_unit'\t=> 'KIB',\n\t\t),\n\t\t'b' => array(\n\t\t\t'min'\t\t=> 0,\n\t\t\t'index'\t\t=> 0,\n\t\t\t'si_unit'\t=> 'BYTES', // Language index\n\t\t\t'iec_unit'\t=> 'BYTES',  // Language index\n\t\t),\n\t);\n\n\tforeach ($available_units as $si_identifier => $unit_info)\n\t{\n\t\tif (!empty($allowed_units) && $si_identifier != 'b' && !in_array($si_identifier, $allowed_units))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ($value >= $unit_info['min'])\n\t\t{\n\t\t\t$unit_info['si_identifier'] = $si_identifier;\n\n\t\t\tbreak;\n\t\t}\n\t}\n\tunset($available_units);\n\n\tfor ($i = 0; $i < $unit_info['index']; $i++)\n\t{\n\t\t$value /= 1024;\n\t}\n\t$value = round($value, 2);\n\n\t// Lookup units in language dictionary\n\t$unit_info['si_unit'] = (isset($user->lang[$unit_info['si_unit']])) ? $user->lang[$unit_info['si_unit']] : $unit_info['si_unit'];\n\t$unit_info['iec_unit'] = (isset($user->lang[$unit_info['iec_unit']])) ? $user->lang[$unit_info['iec_unit']] : $unit_info['iec_unit'];\n\n\t// Default to IEC\n\t$unit_info['unit'] = $unit_info['iec_unit'];\n\n\tif (!$string_only)\n\t{\n\t\t$unit_info['value'] = $value;\n\n\t\treturn $unit_info;\n\t}\n\n\treturn $value  . ' ' . $unit_info['unit'];\n}\n\n/**\n* Determine whether we are approaching the maximum execution time. Should be called once\n* at the beginning of the script in which it's used.\n* @return\tbool\tEither true if the maximum execution time is nearly reached, or false\n*\t\t\t\t\tif some time is still left.\n*/\nfunction still_on_time($extra_time = 15)\n{\n\tstatic $max_execution_time, $start_time;\n\n\t$time = explode(' ', microtime());\n\t$current_time = $time[0] + $time[1];\n\n\tif (empty($max_execution_time))\n\t{\n\t\t$max_execution_time = (function_exists('ini_get')) ? (int) @ini_get('max_execution_time') : (int) @get_cfg_var('max_execution_time');\n\n\t\t// If zero, then set to something higher to not let the user catch the ten seconds barrier.\n\t\tif ($max_execution_time === 0)\n\t\t{\n\t\t\t$max_execution_time = 50 + $extra_time;\n\t\t}\n\n\t\t$max_execution_time = min(max(10, ($max_execution_time - $extra_time)), 50);\n\n\t\t// For debugging purposes\n\t\t// $max_execution_time = 10;\n\n\t\tglobal $starttime;\n\t\t$start_time = (empty($starttime)) ? $current_time : $starttime;\n\t}\n\n\treturn (ceil($current_time - $start_time) < $max_execution_time) ? true : false;\n}\n\n/**\n*\n* @version Version 0.1 / slightly modified for phpBB 3.0.x (using $H$ as hash type identifier)\n*\n* Portable PHP password hashing framework.\n*\n* Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in\n* the public domain.\n*\n* There's absolutely no warranty.\n*\n* The homepage URL for this framework is:\n*\n*\thttp://www.openwall.com/phpass/\n*\n* Please be sure to update the Version line if you edit this file in any way.\n* It is suggested that you leave the main version number intact, but indicate\n* your project name (after the slash) and add your own revision information.\n*\n* Please do not change the \"private\" password hashing method implemented in\n* here, thereby making your hashes incompatible.  However, if you must, please\n* change the hash type identifier (the \"$P$\") to something different.\n*\n* Obviously, since this code is in the public domain, the above are not\n* requirements (there can be none), but merely suggestions.\n*\n*\n* Hash the password\n*/\nfunction phpbb_hash($password)\n{\n\t$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n\t$random_state = unique_id();\n\t$random = '';\n\t$count = 6;\n\n\tif (($fh = @fopen('/dev/urandom', 'rb')))\n\t{\n\t\t$random = fread($fh, $count);\n\t\tfclose($fh);\n\t}\n\n\tif (strlen($random) < $count)\n\t{\n\t\t$random = '';\n\n\t\tfor ($i = 0; $i < $count; $i += 16)\n\t\t{\n\t\t\t$random_state = md5(unique_id() . $random_state);\n\t\t\t$random .= pack('H*', md5($random_state));\n\t\t}\n\t\t$random = substr($random, 0, $count);\n\t}\n\n\t$hash = _hash_crypt_private($password, _hash_gensalt_private($random, $itoa64), $itoa64);\n\n\tif (strlen($hash) == 34)\n\t{\n\t\treturn $hash;\n\t}\n\n\treturn md5($password);\n}\n\n/**\n* Check for correct password\n*\n* @param string $password The password in plain text\n* @param string $hash The stored password hash\n*\n* @return bool Returns true if the password is correct, false if not.\n*/\nfunction phpbb_check_hash($password, $hash)\n{\n\tif (strlen($password) > 4096)\n\t{\n\t\t// If the password is too huge, we will simply reject it\n\t\t// and not let the server try to hash it.\n\t\treturn false;\n\t}\n\n\t$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\tif (strlen($hash) == 34)\n\t{\n\t\treturn (_hash_crypt_private($password, $hash, $itoa64) === $hash) ? true : false;\n\t}\n\n\treturn (md5($password) === $hash) ? true : false;\n}\n\n/**\n* Generate salt for hash generation\n*/\nfunction _hash_gensalt_private($input, &$itoa64, $iteration_count_log2 = 6)\n{\n\tif ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)\n\t{\n\t\t$iteration_count_log2 = 8;\n\t}\n\n\t$output = '$H$';\n\t$output .= $itoa64[min($iteration_count_log2 + ((PHP_VERSION >= 5) ? 5 : 3), 30)];\n\t$output .= _hash_encode64($input, 6, $itoa64);\n\n\treturn $output;\n}\n\n/**\n* Encode hash\n*/\nfunction _hash_encode64($input, $count, &$itoa64)\n{\n\t$output = '';\n\t$i = 0;\n\n\tdo\n\t{\n\t\t$value = ord($input[$i++]);\n\t\t$output .= $itoa64[$value & 0x3f];\n\n\t\tif ($i < $count)\n\t\t{\n\t\t\t$value |= ord($input[$i]) << 8;\n\t\t}\n\n\t\t$output .= $itoa64[($value >> 6) & 0x3f];\n\n\t\tif ($i++ >= $count)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\tif ($i < $count)\n\t\t{\n\t\t\t$value |= ord($input[$i]) << 16;\n\t\t}\n\n\t\t$output .= $itoa64[($value >> 12) & 0x3f];\n\n\t\tif ($i++ >= $count)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\t$output .= $itoa64[($value >> 18) & 0x3f];\n\t}\n\twhile ($i < $count);\n\n\treturn $output;\n}\n\n/**\n* The crypt function/replacement\n*/\nfunction _hash_crypt_private($password, $setting, &$itoa64)\n{\n\t$output = '*';\n\n\t// Check for correct hash\n\tif (substr($setting, 0, 3) != '$H$' && substr($setting, 0, 3) != '$P$')\n\t{\n\t\treturn $output;\n\t}\n\n\t$count_log2 = strpos($itoa64, $setting[3]);\n\n\tif ($count_log2 < 7 || $count_log2 > 30)\n\t{\n\t\treturn $output;\n\t}\n\n\t$count = 1 << $count_log2;\n\t$salt = substr($setting, 4, 8);\n\n\tif (strlen($salt) != 8)\n\t{\n\t\treturn $output;\n\t}\n\n\t/**\n\t* We're kind of forced to use MD5 here since it's the only\n\t* cryptographic primitive available in all versions of PHP\n\t* currently in use.  To implement our own low-level crypto\n\t* in PHP would result in much worse performance and\n\t* consequently in lower iteration counts and hashes that are\n\t* quicker to crack (by non-PHP code).\n\t*/\n\tif (PHP_VERSION >= 5)\n\t{\n\t\t$hash = md5($salt . $password, true);\n\t\tdo\n\t\t{\n\t\t\t$hash = md5($hash . $password, true);\n\t\t}\n\t\twhile (--$count);\n\t}\n\telse\n\t{\n\t\t$hash = pack('H*', md5($salt . $password));\n\t\tdo\n\t\t{\n\t\t\t$hash = pack('H*', md5($hash . $password));\n\t\t}\n\t\twhile (--$count);\n\t}\n\n\t$output = substr($setting, 0, 12);\n\t$output .= _hash_encode64($hash, 16, $itoa64);\n\n\treturn $output;\n}\n\n/**\n* Hashes an email address to a big integer\n*\n* @param string $email\t\tEmail address\n*\n* @return string\t\t\tUnsigned Big Integer\n*/\nfunction phpbb_email_hash($email)\n{\n\treturn sprintf('%u', crc32(strtolower($email))) . strlen($email);\n}\n\n/**\n* Wrapper for version_compare() that allows using uppercase A and B\n* for alpha and beta releases.\n*\n* See http://www.php.net/manual/en/function.version-compare.php\n*\n* @param string $version1\t\tFirst version number\n* @param string $version2\t\tSecond version number\n* @param string $operator\t\tComparison operator (optional)\n*\n* @return mixed\t\t\t\t\tBoolean (true, false) if comparison operator is specified.\n*\t\t\t\t\t\t\t\tInteger (-1, 0, 1) otherwise.\n*/\nfunction phpbb_version_compare($version1, $version2, $operator = null)\n{\n\t$version1 = strtolower($version1);\n\t$version2 = strtolower($version2);\n\n\tif (is_null($operator))\n\t{\n\t\treturn version_compare($version1, $version2);\n\t}\n\telse\n\t{\n\t\treturn version_compare($version1, $version2, $operator);\n\t}\n}\n\n/**\n* Global function for chmodding directories and files for internal use\n*\n* This function determines owner and group whom the file belongs to and user and group of PHP and then set safest possible file permissions.\n* The function determines owner and group from common.php file and sets the same to the provided file.\n* The function uses bit fields to build the permissions.\n* The function sets the appropiate execute bit on directories.\n*\n* Supported constants representing bit fields are:\n*\n* CHMOD_ALL - all permissions (7)\n* CHMOD_READ - read permission (4)\n* CHMOD_WRITE - write permission (2)\n* CHMOD_EXECUTE - execute permission (1)\n*\n* NOTE: The function uses POSIX extension and fileowner()/filegroup() functions. If any of them is disabled, this function tries to build proper permissions, by calling is_readable() and is_writable() functions.\n*\n* @param string\t$filename\tThe file/directory to be chmodded\n* @param int\t$perms\t\tPermissions to set\n*\n* @return bool\ttrue on success, otherwise false\n* @author faw, phpBB Group\n*/\nfunction phpbb_chmod($filename, $perms = CHMOD_READ)\n{\n\tstatic $_chmod_info;\n\n\t// Return if the file no longer exists.\n\tif (!file_exists($filename))\n\t{\n\t\treturn false;\n\t}\n\n\t// Determine some common vars\n\tif (empty($_chmod_info))\n\t{\n\t\tif (!function_exists('fileowner') || !function_exists('filegroup'))\n\t\t{\n\t\t\t// No need to further determine owner/group - it is unknown\n\t\t\t$_chmod_info['process'] = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tglobal $phpbb_root_path, $phpEx;\n\n\t\t\t// Determine owner/group of common.php file and the filename we want to change here\n\t\t\t$common_php_owner = @fileowner($phpbb_root_path . 'common.' . $phpEx);\n\t\t\t$common_php_group = @filegroup($phpbb_root_path . 'common.' . $phpEx);\n\n\t\t\t// And the owner and the groups PHP is running under.\n\t\t\t$php_uid = (function_exists('posix_getuid')) ? @posix_getuid() : false;\n\t\t\t$php_gids = (function_exists('posix_getgroups')) ? @posix_getgroups() : false;\n\n\t\t\t// If we are unable to get owner/group, then do not try to set them by guessing\n\t\t\tif (!$php_uid || empty($php_gids) || !$common_php_owner || !$common_php_group)\n\t\t\t{\n\t\t\t\t$_chmod_info['process'] = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$_chmod_info = array(\n\t\t\t\t\t'process'\t\t=> true,\n\t\t\t\t\t'common_owner'\t=> $common_php_owner,\n\t\t\t\t\t'common_group'\t=> $common_php_group,\n\t\t\t\t\t'php_uid'\t\t=> $php_uid,\n\t\t\t\t\t'php_gids'\t\t=> $php_gids,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($_chmod_info['process'])\n\t{\n\t\t$file_uid = @fileowner($filename);\n\t\t$file_gid = @filegroup($filename);\n\n\t\t// Change owner\n\t\tif (@chown($filename, $_chmod_info['common_owner']))\n\t\t{\n\t\t\tclearstatcache();\n\t\t\t$file_uid = @fileowner($filename);\n\t\t}\n\n\t\t// Change group\n\t\tif (@chgrp($filename, $_chmod_info['common_group']))\n\t\t{\n\t\t\tclearstatcache();\n\t\t\t$file_gid = @filegroup($filename);\n\t\t}\n\n\t\t// If the file_uid/gid now match the one from common.php we can process further, else we are not able to change something\n\t\tif ($file_uid != $_chmod_info['common_owner'] || $file_gid != $_chmod_info['common_group'])\n\t\t{\n\t\t\t$_chmod_info['process'] = false;\n\t\t}\n\t}\n\n\t// Still able to process?\n\tif ($_chmod_info['process'])\n\t{\n\t\tif ($file_uid == $_chmod_info['php_uid'])\n\t\t{\n\t\t\t$php = 'owner';\n\t\t}\n\t\telse if (in_array($file_gid, $_chmod_info['php_gids']))\n\t\t{\n\t\t\t$php = 'group';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Since we are setting the everyone bit anyway, no need to do expensive operations\n\t\t\t$_chmod_info['process'] = false;\n\t\t}\n\t}\n\n\t// We are not able to determine or change something\n\tif (!$_chmod_info['process'])\n\t{\n\t\t$php = 'other';\n\t}\n\n\t// Owner always has read/write permission\n\t$owner = CHMOD_READ | CHMOD_WRITE;\n\tif (is_dir($filename))\n\t{\n\t\t$owner |= CHMOD_EXECUTE;\n\n\t\t// Only add execute bit to the permission if the dir needs to be readable\n\t\tif ($perms & CHMOD_READ)\n\t\t{\n\t\t\t$perms |= CHMOD_EXECUTE;\n\t\t}\n\t}\n\n\tswitch ($php)\n\t{\n\t\tcase 'owner':\n\t\t\t$result = @chmod($filename, ($owner << 6) + (0 << 3) + (0 << 0));\n\n\t\t\tclearstatcache();\n\n\t\t\tif (is_readable($filename) && phpbb_is_writable($filename))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tcase 'group':\n\t\t\t$result = @chmod($filename, ($owner << 6) + ($perms << 3) + (0 << 0));\n\n\t\t\tclearstatcache();\n\n\t\t\tif ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tcase 'other':\n\t\t\t$result = @chmod($filename, ($owner << 6) + ($perms << 3) + ($perms << 0));\n\n\t\t\tclearstatcache();\n\n\t\t\tif ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn false;\n\t\tbreak;\n\t}\n\n\treturn $result;\n}\n\n/**\n* Test if a file/directory is writable\n*\n* This function calls the native is_writable() when not running under\n* Windows and it is not disabled.\n*\n* @param string $file Path to perform write test on\n* @return bool True when the path is writable, otherwise false.\n*/\nfunction phpbb_is_writable($file)\n{\n\tif (strtolower(substr(PHP_OS, 0, 3)) === 'win' || !function_exists('is_writable'))\n\t{\n\t\tif (file_exists($file))\n\t\t{\n\t\t\t// Canonicalise path to absolute path\n\t\t\t$file = phpbb_realpath($file);\n\n\t\t\tif (is_dir($file))\n\t\t\t{\n\t\t\t\t// Test directory by creating a file inside the directory\n\t\t\t\t$result = @tempnam($file, 'i_w');\n\n\t\t\t\tif (is_string($result) && file_exists($result))\n\t\t\t\t{\n\t\t\t\t\tunlink($result);\n\n\t\t\t\t\t// Ensure the file is actually in the directory (returned realpathed)\n\t\t\t\t\treturn (strpos($result, $file) === 0) ? true : false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$handle = @fopen($file, 'r+');\n\n\t\t\t\tif (is_resource($handle))\n\t\t\t\t{\n\t\t\t\t\tfclose($handle);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// file does not exist test if we can write to the directory\n\t\t\t$dir = dirname($file);\n\n\t\t\tif (file_exists($dir) && is_dir($dir) && phpbb_is_writable($dir))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn is_writable($file);\n\t}\n}\n\n// Compatibility functions\n\nif (!function_exists('array_combine'))\n{\n\t/**\n\t* A wrapper for the PHP5 function array_combine()\n\t* @param array $keys contains keys for the resulting array\n\t* @param array $values contains values for the resulting array\n\t*\n\t* @return Returns an array by using the values from the keys array as keys and the\n\t* \tvalues from the values array as the corresponding values. Returns false if the\n\t* \tnumber of elements for each array isn't equal or if the arrays are empty.\n\t*/\n\tfunction array_combine($keys, $values)\n\t{\n\t\t$keys = array_values($keys);\n\t\t$values = array_values($values);\n\n\t\t$n = sizeof($keys);\n\t\t$m = sizeof($values);\n\t\tif (!$n || !$m || ($n != $m))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$combined = array();\n\t\tfor ($i = 0; $i < $n; $i++)\n\t\t{\n\t\t\t$combined[$keys[$i]] = $values[$i];\n\t\t}\n\t\treturn $combined;\n\t}\n}\n\nif (!function_exists('str_split'))\n{\n\t/**\n\t* A wrapper for the PHP5 function str_split()\n\t* @param array $string contains the string to be converted\n\t* @param array $split_length contains the length of each chunk\n\t*\n\t* @return  Converts a string to an array. If the optional split_length parameter is specified,\n\t*  \tthe returned array will be broken down into chunks with each being split_length in length,\n\t*  \totherwise each chunk will be one character in length. FALSE is returned if split_length is\n\t*  \tless than 1. If the split_length length exceeds the length of string, the entire string is\n\t*  \treturned as the first (and only) array element.\n\t*/\n\tfunction str_split($string, $split_length = 1)\n\t{\n\t\tif ($split_length < 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if ($split_length >= strlen($string))\n\t\t{\n\t\t\treturn array($string);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpreg_match_all('#.{1,' . $split_length . '}#s', $string, $matches);\n\t\t\treturn $matches[0];\n\t\t}\n\t}\n}\n\nif (!function_exists('stripos'))\n{\n\t/**\n\t* A wrapper for the PHP5 function stripos\n\t* Find position of first occurrence of a case-insensitive string\n\t*\n\t* @param string $haystack is the string to search in\n\t* @param string $needle is the string to search for\n\t*\n\t* @return mixed Returns the numeric position of the first occurrence of needle in the haystack string. Unlike strpos(), stripos() is case-insensitive.\n\t* Note that the needle may be a string of one or more characters.\n\t* If needle is not found, stripos() will return boolean FALSE.\n\t*/\n\tfunction stripos($haystack, $needle)\n\t{\n\t\tif (preg_match('#' . preg_quote($needle, '#') . '#i', $haystack, $m))\n\t\t{\n\t\t\treturn strpos($haystack, $m[0]);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n* Checks if a path ($path) is absolute or relative\n*\n* @param string $path Path to check absoluteness of\n* @return boolean\n*/\nfunction is_absolute($path)\n{\n\treturn (isset($path[0]) && $path[0] == '/' || preg_match('#^[a-z]:[/\\\\\\]#i', $path)) ? true : false;\n}\n\n/**\n* @author Chris Smith <chris@project-minerva.org>\n* @copyright 2006 Project Minerva Team\n* @param string $path The path which we should attempt to resolve.\n* @return mixed\n*/\nfunction phpbb_own_realpath($path)\n{\n\t// Now to perform funky shizzle\n\n\t// Switch to use UNIX slashes\n\t$path = str_replace(DIRECTORY_SEPARATOR, '/', $path);\n\t$path_prefix = '';\n\n\t// Determine what sort of path we have\n\tif (is_absolute($path))\n\t{\n\t\t$absolute = true;\n\n\t\tif ($path[0] == '/')\n\t\t{\n\t\t\t// Absolute path, *NIX style\n\t\t\t$path_prefix = '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Absolute path, Windows style\n\t\t\t// Remove the drive letter and colon\n\t\t\t$path_prefix = $path[0] . ':';\n\t\t\t$path = substr($path, 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Relative Path\n\t\t// Prepend the current working directory\n\t\tif (function_exists('getcwd'))\n\t\t{\n\t\t\t// This is the best method, hopefully it is enabled!\n\t\t\t$path = str_replace(DIRECTORY_SEPARATOR, '/', getcwd()) . '/' . $path;\n\t\t\t$absolute = true;\n\t\t\tif (preg_match('#^[a-z]:#i', $path))\n\t\t\t{\n\t\t\t\t$path_prefix = $path[0] . ':';\n\t\t\t\t$path = substr($path, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$path_prefix = '';\n\t\t\t}\n\t\t}\n\t\telse if (isset($_SERVER['SCRIPT_FILENAME']) && !empty($_SERVER['SCRIPT_FILENAME']))\n\t\t{\n\t\t\t// Warning: If chdir() has been used this will lie!\n\t\t\t// Warning: This has some problems sometime (CLI can create them easily)\n\t\t\t$path = str_replace(DIRECTORY_SEPARATOR, '/', dirname($_SERVER['SCRIPT_FILENAME'])) . '/' . $path;\n\t\t\t$absolute = true;\n\t\t\t$path_prefix = '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// We have no way of getting the absolute path, just run on using relative ones.\n\t\t\t$absolute = false;\n\t\t\t$path_prefix = '.';\n\t\t}\n\t}\n\n\t// Remove any repeated slashes\n\t$path = preg_replace('#/{2,}#', '/', $path);\n\n\t// Remove the slashes from the start and end of the path\n\t$path = trim($path, '/');\n\n\t// Break the string into little bits for us to nibble on\n\t$bits = explode('/', $path);\n\n\t// Remove any . in the path, renumber array for the loop below\n\t$bits = array_values(array_diff($bits, array('.')));\n\n\t// Lets get looping, run over and resolve any .. (up directory)\n\tfor ($i = 0, $max = sizeof($bits); $i < $max; $i++)\n\t{\n\t\t// @todo Optimise\n\t\tif ($bits[$i] == '..' )\n\t\t{\n\t\t\tif (isset($bits[$i - 1]))\n\t\t\t{\n\t\t\t\tif ($bits[$i - 1] != '..')\n\t\t\t\t{\n\t\t\t\t\t// We found a .. and we are able to traverse upwards, lets do it!\n\t\t\t\t\tunset($bits[$i]);\n\t\t\t\t\tunset($bits[$i - 1]);\n\t\t\t\t\t$i -= 2;\n\t\t\t\t\t$max -= 2;\n\t\t\t\t\t$bits = array_values($bits);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($absolute) // ie. !isset($bits[$i - 1]) && $absolute\n\t\t\t{\n\t\t\t\t// We have an absolute path trying to descend above the root of the filesystem\n\t\t\t\t// ... Error!\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Prepend the path prefix\n\tarray_unshift($bits, $path_prefix);\n\n\t$resolved = '';\n\n\t$max = sizeof($bits) - 1;\n\n\t// Check if we are able to resolve symlinks, Windows cannot.\n\t$symlink_resolve = (function_exists('readlink')) ? true : false;\n\n\tforeach ($bits as $i => $bit)\n\t{\n\t\tif (@is_dir(\"$resolved/$bit\") || ($i == $max && @is_file(\"$resolved/$bit\")))\n\t\t{\n\t\t\t// Path Exists\n\t\t\tif ($symlink_resolve && is_link(\"$resolved/$bit\") && ($link = readlink(\"$resolved/$bit\")))\n\t\t\t{\n\t\t\t\t// Resolved a symlink.\n\t\t\t\t$resolved = $link . (($i == $max) ? '' : '/');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Something doesn't exist here!\n\t\t\t// This is correct realpath() behaviour but sadly open_basedir and safe_mode make this problematic\n\t\t\t// return false;\n\t\t}\n\t\t$resolved .= $bit . (($i == $max) ? '' : '/');\n\t}\n\n\t// @todo If the file exists fine and open_basedir only has one path we should be able to prepend it\n\t// because we must be inside that basedir, the question is where...\n\t// @internal The slash in is_dir() gets around an open_basedir restriction\n\tif (!@file_exists($resolved) || (!@is_dir($resolved . '/') && !is_file($resolved)))\n\t{\n\t\treturn false;\n\t}\n\n\t// Put the slashes back to the native operating systems slashes\n\t$resolved = str_replace('/', DIRECTORY_SEPARATOR, $resolved);\n\n\t// Check for DIRECTORY_SEPARATOR at the end (and remove it!)\n\tif (substr($resolved, -1) == DIRECTORY_SEPARATOR)\n\t{\n\t\treturn substr($resolved, 0, -1);\n\t}\n\n\treturn $resolved; // We got here, in the end!\n}\n\nif (!function_exists('realpath'))\n{\n\t/**\n\t* A wrapper for realpath\n\t* @ignore\n\t*/\n\tfunction phpbb_realpath($path)\n\t{\n\t\treturn phpbb_own_realpath($path);\n\t}\n}\nelse\n{\n\t/**\n\t* A wrapper for realpath\n\t*/\n\tfunction phpbb_realpath($path)\n\t{\n\t\t$realpath = realpath($path);\n\n\t\t// Strangely there are provider not disabling realpath but returning strange values. :o\n\t\t// We at least try to cope with them.\n\t\tif ($realpath === $path || $realpath === false)\n\t\t{\n\t\t\treturn phpbb_own_realpath($path);\n\t\t}\n\n\t\t// Check for DIRECTORY_SEPARATOR at the end (and remove it!)\n\t\tif (substr($realpath, -1) == DIRECTORY_SEPARATOR)\n\t\t{\n\t\t\t$realpath = substr($realpath, 0, -1);\n\t\t}\n\n\t\treturn $realpath;\n\t}\n}\n\n/**\n* Eliminates useless . and .. components from specified path.\n*\n* @param string $path Path to clean\n* @return string Cleaned path\n*/\nfunction phpbb_clean_path($path)\n{\n\t$exploded = explode('/', $path);\n\t$filtered = array();\n\tforeach ($exploded as $part)\n\t{\n\t\tif ($part === '.' && !empty($filtered))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ($part === '..' && !empty($filtered) && $filtered[sizeof($filtered) - 1] !== '..')\n\t\t{\n\t\t\tarray_pop($filtered);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$filtered[] = $part;\n\t\t}\n\t}\n\t$path = implode('/', $filtered);\n\treturn $path;\n}\n\nif (!function_exists('htmlspecialchars_decode'))\n{\n\t/**\n\t* A wrapper for htmlspecialchars_decode\n\t* @ignore\n\t*/\n\tfunction htmlspecialchars_decode($string, $quote_style = ENT_COMPAT)\n\t{\n\t\treturn strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));\n\t}\n}\n\n// functions used for building option fields\n\n/**\n* Pick a language, any language ...\n*/\nfunction language_select($default = '')\n{\n\tglobal $db;\n\n\t$sql = 'SELECT lang_iso, lang_local_name\n\t\tFROM ' . LANG_TABLE . '\n\t\tORDER BY lang_english_name';\n\t$result = $db->sql_query($sql);\n\n\t$lang_options = '';\n\twhile ($row = $db->sql_fetchrow($result))\n\t{\n\t\t$selected = ($row['lang_iso'] == $default) ? ' selected=\"selected\"' : '';\n\t\t$lang_options .= '<option value=\"' . $row['lang_iso'] . '\"' . $selected . '>' . $row['lang_local_name'] . '</option>';\n\t}\n\t$db->sql_freeresult($result);\n\n\treturn $lang_options;\n}\n\n/**\n* Pick a template/theme combo,\n*/\nfunction style_select($default = '', $all = false)\n{\n\tglobal $db;\n\n\t$sql_where = (!$all) ? 'WHERE style_active = 1 ' : '';\n\t$sql = 'SELECT style_id, style_name\n\t\tFROM ' . STYLES_TABLE . \"\n\t\t$sql_where\n\t\tORDER BY style_name\";\n\t$result = $db->sql_query($sql);\n\n\t$style_options = '';\n\twhile ($row = $db->sql_fetchrow($result))\n\t{\n\t\t$selected = ($row['style_id'] == $default) ? ' selected=\"selected\"' : '';\n\t\t$style_options .= '<option value=\"' . $row['style_id'] . '\"' . $selected . '>' . $row['style_name'] . '</option>';\n\t}\n\t$db->sql_freeresult($result);\n\n\treturn $style_options;\n}\n\n/**\n* Pick a timezone\n*/\nfunction tz_select($default = '', $truncate = false)\n{\n\tglobal $user;\n\n\t$tz_select = '';\n\tforeach ($user->lang['tz_zones'] as $offset => $zone)\n\t{\n\t\tif ($truncate)\n\t\t{\n\t\t\t$zone_trunc = truncate_string($zone, 50, 255, false, '...');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$zone_trunc = $zone;\n\t\t}\n\n\t\tif (is_numeric($offset))\n\t\t{\n\t\t\t$selected = ($offset == $default) ? ' selected=\"selected\"' : '';\n\t\t\t$tz_select .= '<option title=\"' . $zone . '\" value=\"' . $offset . '\"' . $selected . '>' . $zone_trunc . '</option>';\n\t\t}\n\t}\n\n\treturn $tz_select;\n}\n\n// Functions handling topic/post tracking/marking\n\n/**\n* Marks a topic/forum as read\n* Marks a topic as posted to\n*\n* @param int $user_id can only be used with $mode == 'post'\n*/\nfunction markread($mode, $forum_id = false, $topic_id = false, $post_time = 0, $user_id = 0)\n{\n\tglobal $db, $user, $config;\n\n\tif ($mode == 'all')\n\t{\n\t\tif ($forum_id === false || !sizeof($forum_id))\n\t\t{\n\t\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t\t{\n\t\t\t\t// Mark all forums read (index page)\n\t\t\t\t$db->sql_query('DELETE FROM ' . TOPICS_TRACK_TABLE . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t$db->sql_query('DELETE FROM ' . FORUMS_TRACK_TABLE . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t}\n\t\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t\t{\n\t\t\t\t$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\n\t\t\t\tunset($tracking_topics['tf']);\n\t\t\t\tunset($tracking_topics['t']);\n\t\t\t\tunset($tracking_topics['f']);\n\t\t\t\t$tracking_topics['l'] = base_convert(time() - $config['board_startdate'], 10, 36);\n\n\t\t\t\t$user->set_cookie('track', tracking_serialize($tracking_topics), time() + 31536000);\n\t\t\t\t$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking_topics)) : tracking_serialize($tracking_topics);\n\n\t\t\t\tunset($tracking_topics);\n\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\t$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\telse if ($mode == 'topics')\n\t{\n\t\t// Mark all topics in forums read\n\t\tif (!is_array($forum_id))\n\t\t{\n\t\t\t$forum_id = array($forum_id);\n\t\t}\n\n\t\t// Add 0 to forums array to mark global announcements correctly\n\t\t// $forum_id[] = 0;\n\n\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t{\n\t\t\t$sql = 'DELETE FROM ' . TOPICS_TRACK_TABLE . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND \" . $db->sql_in_set('forum_id', $forum_id);\n\t\t\t$db->sql_query($sql);\n\n\t\t\t$sql = 'SELECT forum_id\n\t\t\t\tFROM ' . FORUMS_TRACK_TABLE . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND \" . $db->sql_in_set('forum_id', $forum_id);\n\t\t\t$result = $db->sql_query($sql);\n\n\t\t\t$sql_update = array();\n\t\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t\t{\n\t\t\t\t$sql_update[] = (int) $row['forum_id'];\n\t\t\t}\n\t\t\t$db->sql_freeresult($result);\n\n\t\t\tif (sizeof($sql_update))\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . FORUMS_TRACK_TABLE . '\n\t\t\t\t\tSET mark_time = ' . time() . \"\n\t\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\t\tAND \" . $db->sql_in_set('forum_id', $sql_update);\n\t\t\t\t$db->sql_query($sql);\n\t\t\t}\n\n\t\t\tif ($sql_insert = array_diff($forum_id, $sql_update))\n\t\t\t{\n\t\t\t\t$sql_ary = array();\n\t\t\t\tforeach ($sql_insert as $f_id)\n\t\t\t\t{\n\t\t\t\t\t$sql_ary[] = array(\n\t\t\t\t\t\t'user_id'\t=> (int) $user->data['user_id'],\n\t\t\t\t\t\t'forum_id'\t=> (int) $f_id,\n\t\t\t\t\t\t'mark_time'\t=> time()\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$db->sql_multi_insert(FORUMS_TRACK_TABLE, $sql_ary);\n\t\t\t}\n\t\t}\n\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t{\n\t\t\t$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking = ($tracking) ? tracking_unserialize($tracking) : array();\n\n\t\t\tforeach ($forum_id as $f_id)\n\t\t\t{\n\t\t\t\t$topic_ids36 = (isset($tracking['tf'][$f_id])) ? $tracking['tf'][$f_id] : array();\n\n\t\t\t\tif (isset($tracking['tf'][$f_id]))\n\t\t\t\t{\n\t\t\t\t\tunset($tracking['tf'][$f_id]);\n\t\t\t\t}\n\n\t\t\t\tforeach ($topic_ids36 as $topic_id36)\n\t\t\t\t{\n\t\t\t\t\tunset($tracking['t'][$topic_id36]);\n\t\t\t\t}\n\n\t\t\t\tif (isset($tracking['f'][$f_id]))\n\t\t\t\t{\n\t\t\t\t\tunset($tracking['f'][$f_id]);\n\t\t\t\t}\n\n\t\t\t\t$tracking['f'][$f_id] = base_convert(time() - $config['board_startdate'], 10, 36);\n\t\t\t}\n\n\t\t\tif (isset($tracking['tf']) && empty($tracking['tf']))\n\t\t\t{\n\t\t\t\tunset($tracking['tf']);\n\t\t\t}\n\n\t\t\t$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);\n\t\t\t$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);\n\n\t\t\tunset($tracking);\n\t\t}\n\n\t\treturn;\n\t}\n\telse if ($mode == 'topic')\n\t{\n\t\tif ($topic_id === false || $forum_id === false)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t{\n\t\t\t$sql = 'UPDATE ' . TOPICS_TRACK_TABLE . '\n\t\t\t\tSET mark_time = ' . (($post_time) ? $post_time : time()) . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND topic_id = $topic_id\";\n\t\t\t$db->sql_query($sql);\n\n\t\t\t// insert row\n\t\t\tif (!$db->sql_affectedrows())\n\t\t\t{\n\t\t\t\t$db->sql_return_on_error(true);\n\n\t\t\t\t$sql_ary = array(\n\t\t\t\t\t'user_id'\t\t=> (int) $user->data['user_id'],\n\t\t\t\t\t'topic_id'\t\t=> (int) $topic_id,\n\t\t\t\t\t'forum_id'\t\t=> (int) $forum_id,\n\t\t\t\t\t'mark_time'\t\t=> ($post_time) ? (int) $post_time : time(),\n\t\t\t\t);\n\n\t\t\t\t$db->sql_query('INSERT INTO ' . TOPICS_TRACK_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\t\t\t\t$db->sql_return_on_error(false);\n\t\t\t}\n\t\t}\n\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t{\n\t\t\t$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking = ($tracking) ? tracking_unserialize($tracking) : array();\n\n\t\t\t$topic_id36 = base_convert($topic_id, 10, 36);\n\n\t\t\tif (!isset($tracking['t'][$topic_id36]))\n\t\t\t{\n\t\t\t\t$tracking['tf'][$forum_id][$topic_id36] = true;\n\t\t\t}\n\n\t\t\t$post_time = ($post_time) ? $post_time : time();\n\t\t\t$tracking['t'][$topic_id36] = base_convert($post_time - $config['board_startdate'], 10, 36);\n\n\t\t\t// If the cookie grows larger than 10000 characters we will remove the smallest value\n\t\t\t// This can result in old topics being unread - but most of the time it should be accurate...\n\t\t\tif (isset($_COOKIE[$config['cookie_name'] . '_track']) && strlen($_COOKIE[$config['cookie_name'] . '_track']) > 10000)\n\t\t\t{\n\t\t\t\t//echo 'Cookie grown too large' . print_r($tracking, true);\n\n\t\t\t\t// We get the ten most minimum stored time offsets and its associated topic ids\n\t\t\t\t$time_keys = array();\n\t\t\t\tfor ($i = 0; $i < 10 && sizeof($tracking['t']); $i++)\n\t\t\t\t{\n\t\t\t\t\t$min_value = min($tracking['t']);\n\t\t\t\t\t$m_tkey = array_search($min_value, $tracking['t']);\n\t\t\t\t\tunset($tracking['t'][$m_tkey]);\n\n\t\t\t\t\t$time_keys[$m_tkey] = $min_value;\n\t\t\t\t}\n\n\t\t\t\t// Now remove the topic ids from the array...\n\t\t\t\tforeach ($tracking['tf'] as $f_id => $topic_id_ary)\n\t\t\t\t{\n\t\t\t\t\tforeach ($time_keys as $m_tkey => $min_value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($topic_id_ary[$m_tkey]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tracking['f'][$f_id] = $min_value;\n\t\t\t\t\t\t\tunset($tracking['tf'][$f_id][$m_tkey]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\t$user->data['user_lastmark'] = intval(base_convert(max($time_keys) + $config['board_startdate'], 36, 10));\n\t\t\t\t\t$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . $user->data['user_lastmark'] . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$tracking['l'] = max($time_keys);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);\n\t\t\t$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);\n\t\t}\n\n\t\treturn;\n\t}\n\telse if ($mode == 'post')\n\t{\n\t\tif ($topic_id === false)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$use_user_id = (!$user_id) ? $user->data['user_id'] : $user_id;\n\n\t\tif ($config['load_db_track'] && $use_user_id != ANONYMOUS)\n\t\t{\n\t\t\t$db->sql_return_on_error(true);\n\n\t\t\t$sql_ary = array(\n\t\t\t\t'user_id'\t\t=> (int) $use_user_id,\n\t\t\t\t'topic_id'\t\t=> (int) $topic_id,\n\t\t\t\t'topic_posted'\t=> 1\n\t\t\t);\n\n\t\t\t$db->sql_query('INSERT INTO ' . TOPICS_POSTED_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\t\t\t$db->sql_return_on_error(false);\n\t\t}\n\n\t\treturn;\n\t}\n}\n\n/**\n* Get topic tracking info by using already fetched info\n*/\nfunction get_topic_tracking($forum_id, $topic_ids, &$rowset, $forum_mark_time, $global_announce_list = false)\n{\n\tglobal $config, $user;\n\n\t$last_read = array();\n\n\tif (!is_array($topic_ids))\n\t{\n\t\t$topic_ids = array($topic_ids);\n\t}\n\n\tforeach ($topic_ids as $topic_id)\n\t{\n\t\tif (!empty($rowset[$topic_id]['mark_time']))\n\t\t{\n\t\t\t$last_read[$topic_id] = $rowset[$topic_id]['mark_time'];\n\t\t}\n\t}\n\n\t$topic_ids = array_diff($topic_ids, array_keys($last_read));\n\n\tif (sizeof($topic_ids))\n\t{\n\t\t$mark_time = array();\n\n\t\t// Get global announcement info\n\t\tif ($global_announce_list && sizeof($global_announce_list))\n\t\t{\n\t\t\tif (!isset($forum_mark_time[0]))\n\t\t\t{\n\t\t\t\tglobal $db;\n\n\t\t\t\t$sql = 'SELECT mark_time\n\t\t\t\t\tFROM ' . FORUMS_TRACK_TABLE . \"\n\t\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\t\tAND forum_id = 0\";\n\t\t\t\t$result = $db->sql_query($sql);\n\t\t\t\t$row = $db->sql_fetchrow($result);\n\t\t\t\t$db->sql_freeresult($result);\n\n\t\t\t\tif ($row)\n\t\t\t\t{\n\t\t\t\t\t$mark_time[0] = $row['mark_time'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($forum_mark_time[0] !== false)\n\t\t\t\t{\n\t\t\t\t\t$mark_time[0] = $forum_mark_time[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($forum_mark_time[$forum_id]) && $forum_mark_time[$forum_id] !== false)\n\t\t{\n\t\t\t$mark_time[$forum_id] = $forum_mark_time[$forum_id];\n\t\t}\n\n\t\t$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];\n\n\t\tforeach ($topic_ids as $topic_id)\n\t\t{\n\t\t\tif ($global_announce_list && isset($global_announce_list[$topic_id]))\n\t\t\t{\n\t\t\t\t$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$last_read[$topic_id] = $user_lastmark;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $last_read;\n}\n\n/**\n* Get topic tracking info from db (for cookie based tracking only this function is used)\n*/\nfunction get_complete_topic_tracking($forum_id, $topic_ids, $global_announce_list = false)\n{\n\tglobal $config, $user;\n\n\t$last_read = array();\n\n\tif (!is_array($topic_ids))\n\t{\n\t\t$topic_ids = array($topic_ids);\n\t}\n\n\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t{\n\t\tglobal $db;\n\n\t\t$sql = 'SELECT topic_id, mark_time\n\t\t\tFROM ' . TOPICS_TRACK_TABLE . \"\n\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\tAND \" . $db->sql_in_set('topic_id', $topic_ids);\n\t\t$result = $db->sql_query($sql);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$last_read[$row['topic_id']] = $row['mark_time'];\n\t\t}\n\t\t$db->sql_freeresult($result);\n\n\t\t$topic_ids = array_diff($topic_ids, array_keys($last_read));\n\n\t\tif (sizeof($topic_ids))\n\t\t{\n\t\t\t$sql = 'SELECT forum_id, mark_time\n\t\t\t\tFROM ' . FORUMS_TRACK_TABLE . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND forum_id \" .\n\t\t\t\t\t(($global_announce_list && sizeof($global_announce_list)) ? \"IN (0, $forum_id)\" : \"= $forum_id\");\n\t\t\t$result = $db->sql_query($sql);\n\n\t\t\t$mark_time = array();\n\t\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t\t{\n\t\t\t\t$mark_time[$row['forum_id']] = $row['mark_time'];\n\t\t\t}\n\t\t\t$db->sql_freeresult($result);\n\n\t\t\t$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];\n\n\t\t\tforeach ($topic_ids as $topic_id)\n\t\t\t{\n\t\t\t\tif ($global_announce_list && isset($global_announce_list[$topic_id]))\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = $user_lastmark;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t{\n\t\tglobal $tracking_topics;\n\n\t\tif (!isset($tracking_topics) || !sizeof($tracking_topics))\n\t\t{\n\t\t\t$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\t\t}\n\n\t\tif (!$user->data['is_registered'])\n\t\t{\n\t\t\t$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$user_lastmark = $user->data['user_lastmark'];\n\t\t}\n\n\t\tforeach ($topic_ids as $topic_id)\n\t\t{\n\t\t\t$topic_id36 = base_convert($topic_id, 10, 36);\n\n\t\t\tif (isset($tracking_topics['t'][$topic_id36]))\n\t\t\t{\n\t\t\t\t$last_read[$topic_id] = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];\n\t\t\t}\n\t\t}\n\n\t\t$topic_ids = array_diff($topic_ids, array_keys($last_read));\n\n\t\tif (sizeof($topic_ids))\n\t\t{\n\t\t\t$mark_time = array();\n\t\t\tif ($global_announce_list && sizeof($global_announce_list))\n\t\t\t{\n\t\t\t\tif (isset($tracking_topics['f'][0]))\n\t\t\t\t{\n\t\t\t\t\t$mark_time[0] = base_convert($tracking_topics['f'][0], 36, 10) + $config['board_startdate'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isset($tracking_topics['f'][$forum_id]))\n\t\t\t{\n\t\t\t\t$mark_time[$forum_id] = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];\n\t\t\t}\n\n\t\t\t$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user_lastmark;\n\n\t\t\tforeach ($topic_ids as $topic_id)\n\t\t\t{\n\t\t\t\tif ($global_announce_list && isset($global_announce_list[$topic_id]))\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = $user_lastmark;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $last_read;\n}\n\n/**\n* Get list of unread topics\n*\n* @param int $user_id\t\t\tUser ID (or false for current user)\n* @param string $sql_extra\t\tExtra WHERE SQL statement\n* @param string $sql_sort\t\tORDER BY SQL sorting statement\n* @param string $sql_limit\t\tLimits the size of unread topics list, 0 for unlimited query\n* @param string $sql_limit_offset  Sets the offset of the first row to search, 0 to search from the start\n*\n* @return array[int][int]\t\tTopic ids as keys, mark_time of topic as value\n*/\nfunction get_unread_topics($user_id = false, $sql_extra = '', $sql_sort = '', $sql_limit = 1001, $sql_limit_offset = 0)\n{\n\tglobal $config, $db, $user;\n\n\t$user_id = ($user_id === false) ? (int) $user->data['user_id'] : (int) $user_id;\n\n\t// Data array we're going to return\n\t$unread_topics = array();\n\n\tif (empty($sql_sort))\n\t{\n\t\t$sql_sort = 'ORDER BY t.topic_last_post_time DESC';\n\t}\n\n\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t{\n\t\t// Get list of the unread topics\n\t\t$last_mark = (int) $user->data['user_lastmark'];\n\n\t\t$sql_array = array(\n\t\t\t'SELECT'\t\t=> 't.topic_id, t.topic_last_post_time, tt.mark_time as topic_mark_time, ft.mark_time as forum_mark_time',\n\n\t\t\t'FROM'\t\t\t=> array(TOPICS_TABLE => 't'),\n\n\t\t\t'LEFT_JOIN'\t\t=> array(\n\t\t\t\tarray(\n\t\t\t\t\t'FROM'\t=> array(TOPICS_TRACK_TABLE => 'tt'),\n\t\t\t\t\t'ON'\t=> \"tt.user_id = $user_id AND t.topic_id = tt.topic_id\",\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'FROM'\t=> array(FORUMS_TRACK_TABLE => 'ft'),\n\t\t\t\t\t'ON'\t=> \"ft.user_id = $user_id AND t.forum_id = ft.forum_id\",\n\t\t\t\t),\n\t\t\t),\n\n\t\t\t'WHERE'\t\t\t=> \"\n\t\t\t\t t.topic_last_post_time > $last_mark AND\n\t\t\t\t(\n\t\t\t\t(tt.mark_time IS NOT NULL AND t.topic_last_post_time > tt.mark_time) OR\n\t\t\t\t(tt.mark_time IS NULL AND ft.mark_time IS NOT NULL AND t.topic_last_post_time > ft.mark_time) OR\n\t\t\t\t(tt.mark_time IS NULL AND ft.mark_time IS NULL)\n\t\t\t\t)\n\t\t\t\t$sql_extra\n\t\t\t\t$sql_sort\",\n\t\t);\n\n\t\t$sql = $db->sql_build_query('SELECT', $sql_array);\n\t\t$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$topic_id = (int) $row['topic_id'];\n\t\t\t$unread_topics[$topic_id] = ($row['topic_mark_time']) ? (int) $row['topic_mark_time'] : (($row['forum_mark_time']) ? (int) $row['forum_mark_time'] : $last_mark);\n\t\t}\n\t\t$db->sql_freeresult($result);\n\t}\n\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t{\n\t\tglobal $tracking_topics;\n\n\t\tif (empty($tracking_topics))\n\t\t{\n\t\t\t$tracking_topics = request_var($config['cookie_name'] . '_track', '', false, true);\n\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\t\t}\n\n\t\tif (!$user->data['is_registered'])\n\t\t{\n\t\t\t$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$user_lastmark = (int) $user->data['user_lastmark'];\n\t\t}\n\n\t\t$sql = 'SELECT t.topic_id, t.forum_id, t.topic_last_post_time\n\t\t\tFROM ' . TOPICS_TABLE . ' t\n\t\t\tWHERE t.topic_last_post_time > ' . $user_lastmark . \"\n\t\t\t$sql_extra\n\t\t\t$sql_sort\";\n\t\t$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$forum_id = (int) $row['forum_id'];\n\t\t\t$topic_id = (int) $row['topic_id'];\n\t\t\t$topic_id36 = base_convert($topic_id, 10, 36);\n\n\t\t\tif (isset($tracking_topics['t'][$topic_id36]))\n\t\t\t{\n\t\t\t\t$last_read = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];\n\n\t\t\t\tif ($row['topic_last_post_time'] > $last_read)\n\t\t\t\t{\n\t\t\t\t\t$unread_topics[$topic_id] = $last_read;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($tracking_topics['f'][$forum_id]))\n\t\t\t{\n\t\t\t\t$mark_time = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];\n\n\t\t\t\tif ($row['topic_last_post_time'] > $mark_time)\n\t\t\t\t{\n\t\t\t\t\t$unread_topics[$topic_id] = $mark_time;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$unread_topics[$topic_id] = $user_lastmark;\n\t\t\t}\n\t\t}\n\t\t$db->sql_freeresult($result);\n\t}\n\n\treturn $unread_topics;\n}\n\n/**\n* Check for read forums and update topic tracking info accordingly\n*\n* @param int $forum_id the forum id to check\n* @param int $forum_last_post_time the forums last post time\n* @param int $f_mark_time the forums last mark time if user is registered and load_db_lastread enabled\n* @param int $mark_time_forum false if the mark time needs to be obtained, else the last users forum mark time\n*\n* @return true if complete forum got marked read, else false.\n*/\nfunction update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time = false, $mark_time_forum = false)\n{\n\tglobal $db, $tracking_topics, $user, $config, $auth;\n\n\t// Determine the users last forum mark time if not given.\n\tif ($mark_time_forum === false)\n\t{\n\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t{\n\t\t\t$mark_time_forum = (!empty($f_mark_time)) ? $f_mark_time : $user->data['user_lastmark'];\n\t\t}\n\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t{\n\t\t\t$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\n\t\t\tif (!$user->data['is_registered'])\n\t\t\t{\n\t\t\t\t$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;\n\t\t\t}\n\n\t\t\t$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];\n\t\t}\n\t}\n\n\t// Handle update of unapproved topics info.\n\t// Only update for moderators having m_approve permission for the forum.\n\t$sql_update_unapproved = ($auth->acl_get('m_approve', $forum_id)) ? '': 'AND t.topic_approved = 1';\n\n\t// Check the forum for any left unread topics.\n\t// If there are none, we mark the forum as read.\n\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t{\n\t\tif ($mark_time_forum >= $forum_last_post_time)\n\t\t{\n\t\t\t// We do not need to mark read, this happened before. Therefore setting this to true\n\t\t\t$row = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql = 'SELECT t.forum_id\n\t\t\t\tFROM ' . TOPICS_TABLE . ' t\n\t\t\t\tLEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt\n\t\t\t\t\tON (tt.topic_id = t.topic_id\n\t\t\t\t\t\tAND tt.user_id = ' . $user->data['user_id'] . ')\n\t\t\t\tWHERE t.forum_id = ' . $forum_id . '\n\t\t\t\t\tAND t.topic_last_post_time > ' . $mark_time_forum . '\n\t\t\t\t\tAND t.topic_moved_id = 0 ' .\n\t\t\t\t\t$sql_update_unapproved . '\n\t\t\t\t\tAND (tt.topic_id IS NULL\n\t\t\t\t\t\tOR tt.mark_time < t.topic_last_post_time)';\n\t\t\t$result = $db->sql_query_limit($sql, 1);\n\t\t\t$row = $db->sql_fetchrow($result);\n\t\t\t$db->sql_freeresult($result);\n\t\t}\n\t}\n\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t{\n\t\t// Get information from cookie\n\t\t$row = false;\n\n\t\tif (!isset($tracking_topics['tf'][$forum_id]))\n\t\t{\n\t\t\t// We do not need to mark read, this happened before. Therefore setting this to true\n\t\t\t$row = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql = 'SELECT t.topic_id\n\t\t\t\tFROM ' . TOPICS_TABLE . ' t\n\t\t\t\tWHERE t.forum_id = ' . $forum_id . '\n\t\t\t\t\tAND t.topic_last_post_time > ' . $mark_time_forum . '\n\t\t\t\t\tAND t.topic_moved_id = 0 ' .\n\t\t\t\t\t$sql_update_unapproved;\n\t\t\t$result = $db->sql_query($sql);\n\n\t\t\t$check_forum = $tracking_topics['tf'][$forum_id];\n\t\t\t$unread = false;\n\n\t\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t\t{\n\t\t\t\tif (!isset($check_forum[base_convert($row['topic_id'], 10, 36)]))\n\t\t\t\t{\n\t\t\t\t\t$unread = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$db->sql_freeresult($result);\n\n\t\t\t$row = $unread;\n\t\t}\n\t}\n\telse\n\t{\n\t\t$row = true;\n\t}\n\n\tif (!$row)\n\t{\n\t\tmarkread('topics', $forum_id);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n* Transform an array into a serialized format\n*/\nfunction tracking_serialize($input)\n{\n\t$out = '';\n\tforeach ($input as $key => $value)\n\t{\n\t\tif (is_array($value))\n\t\t{\n\t\t\t$out .= $key . ':(' . tracking_serialize($value) . ');';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$out .= $key . ':' . $value . ';';\n\t\t}\n\t}\n\treturn $out;\n}\n\n/**\n* Transform a serialized array into an actual array\n*/\nfunction tracking_unserialize($string, $max_depth = 3)\n{\n\t$n = strlen($string);\n\tif ($n > 10010)\n\t{\n\t\tdie('Invalid data supplied');\n\t}\n\t$data = $stack = array();\n\t$key = '';\n\t$mode = 0;\n\t$level = &$data;\n\tfor ($i = 0; $i < $n; ++$i)\n\t{\n\t\tswitch ($mode)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase ':':\n\t\t\t\t\t\t$level[$key] = 0;\n\t\t\t\t\t\t$mode = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ')':\n\t\t\t\t\t\tunset($level);\n\t\t\t\t\t\t$level = array_pop($stack);\n\t\t\t\t\t\t$mode = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$key .= $string[$i];\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase '(':\n\t\t\t\t\t\tif (sizeof($stack) >= $max_depth)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdie('Invalid data supplied');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$stack[] = &$level;\n\t\t\t\t\t\t$level[$key] = array();\n\t\t\t\t\t\t$level = &$level[$key];\n\t\t\t\t\t\t$key = '';\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$level[$key] = $string[$i];\n\t\t\t\t\t\t$mode = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase ')':\n\t\t\t\t\t\tunset($level);\n\t\t\t\t\t\t$level = array_pop($stack);\n\t\t\t\t\t\t$mode = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ';':\n\t\t\t\t\t\t$key = '';\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$level[$key] .= $string[$i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase ')':\n\t\t\t\t\t\tunset($level);\n\t\t\t\t\t\t$level = array_pop($stack);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ';':\n\t\t\t\t\t\t$key = '';\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdie('Invalid data supplied');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (sizeof($stack) != 0 || ($mode != 0 && $mode != 3))\n\t{\n\t\tdie('Invalid data supplied');\n\t}\n\n\treturn $level;\n}\n\n// Pagination functions\n\n/**\n* Pagination routine, generates page number sequence\n* tpl_prefix is for using different pagination blocks at one page\n*/\nfunction generate_pagination($base_url, $num_items, $per_page, $start_item, $add_prevnext_text = false, $tpl_prefix = '')\n{\n\tglobal $template, $user;\n\n\t// Make sure $per_page is a valid value\n\t$per_page = ($per_page <= 0) ? 1 : $per_page;\n\n\t$seperator = '<span class=\"page-sep\">' . $user->lang['COMMA_SEPARATOR'] . '</span>';\n\t$total_pages = ceil($num_items / $per_page);\n\n\tif ($total_pages == 1 || !$num_items)\n\t{\n\t\treturn false;\n\t}\n\n\t$on_page = floor($start_item / $per_page) + 1;\n\t$url_delim = (strpos($base_url, '?') === false) ? '?' : ((strpos($base_url, '?') === strlen($base_url) - 1) ? '' : '&amp;');\n\n\t$page_string = ($on_page == 1) ? '<strong>1</strong>' : '<a href=\"' . $base_url . '\">1</a>';\n\n\tif ($total_pages > 5)\n\t{\n\t\t$start_cnt = min(max(1, $on_page - 4), $total_pages - 5);\n\t\t$end_cnt = max(min($total_pages, $on_page + 4), 6);\n\n\t\t$page_string .= ($start_cnt > 1) ? '<span class=\"page-dots\"> ... </span>' : $seperator;\n\n\t\tfor ($i = $start_cnt + 1; $i < $end_cnt; $i++)\n\t\t{\n\t\t\t$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($i - 1) * $per_page) . '\">' . $i . '</a>';\n\t\t\tif ($i < $end_cnt - 1)\n\t\t\t{\n\t\t\t\t$page_string .= $seperator;\n\t\t\t}\n\t\t}\n\n\t\t$page_string .= ($end_cnt < $total_pages) ? '<span class=\"page-dots\"> ... </span>' : $seperator;\n\t}\n\telse\n\t{\n\t\t$page_string .= $seperator;\n\n\t\tfor ($i = 2; $i < $total_pages; $i++)\n\t\t{\n\t\t\t$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($i - 1) * $per_page) . '\">' . $i . '</a>';\n\t\t\tif ($i < $total_pages)\n\t\t\t{\n\t\t\t\t$page_string .= $seperator;\n\t\t\t}\n\t\t}\n\t}\n\n\t$page_string .= ($on_page == $total_pages) ? '<strong>' . $total_pages . '</strong>' : '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($total_pages - 1) * $per_page) . '\">' . $total_pages . '</a>';\n\n\tif ($add_prevnext_text)\n\t{\n\t\tif ($on_page != 1)\n\t\t{\n\t\t\t$page_string = '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($on_page - 2) * $per_page) . '\">' . $user->lang['PREVIOUS'] . '</a>&nbsp;&nbsp;' . $page_string;\n\t\t}\n\n\t\tif ($on_page != $total_pages)\n\t\t{\n\t\t\t$page_string .= '&nbsp;&nbsp;<a href=\"' . $base_url . \"{$url_delim}start=\" . ($on_page * $per_page) . '\">' . $user->lang['NEXT'] . '</a>';\n\t\t}\n\t}\n\n\t$template->assign_vars(array(\n\t\t$tpl_prefix . 'BASE_URL'\t\t=> $base_url,\n\t\t'A_' . $tpl_prefix . 'BASE_URL'\t=> addslashes($base_url),\n\t\t$tpl_prefix . 'PER_PAGE'\t\t=> $per_page,\n\n\t\t$tpl_prefix . 'PREVIOUS_PAGE'\t=> ($on_page == 1) ? '' : $base_url . \"{$url_delim}start=\" . (($on_page - 2) * $per_page),\n\t\t$tpl_prefix . 'NEXT_PAGE'\t\t=> ($on_page == $total_pages) ? '' : $base_url . \"{$url_delim}start=\" . ($on_page * $per_page),\n\t\t$tpl_prefix . 'TOTAL_PAGES'\t\t=> $total_pages,\n\t));\n\n\treturn $page_string;\n}\n\n/**\n* Return current page (pagination)\n*/\nfunction on_page($num_items, $per_page, $start)\n{\n\tglobal $template, $user;\n\n\t// Make sure $per_page is a valid value\n\t$per_page = ($per_page <= 0) ? 1 : $per_page;\n\n\t$on_page = floor($start / $per_page) + 1;\n\n\t$template->assign_vars(array(\n\t\t'ON_PAGE'\t\t=> $on_page)\n\t);\n\n\treturn sprintf($user->lang['PAGE_OF'], $on_page, max(ceil($num_items / $per_page), 1));\n}\n\n// Server functions (building urls, redirecting...)\n\n/**\n* Append session id to url.\n* This function supports hooks.\n*\n* @param string $url The url the session id needs to be appended to (can have params)\n* @param mixed $params String or array of additional url parameters\n* @param bool $is_amp Is url using &amp; (true) or & (false)\n* @param string $session_id Possibility to use a custom session id instead of the global one\n*\n* Examples:\n* <code>\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx?t=1&amp;f=2\");\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx\", 't=1&amp;f=2');\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx\", 't=1&f=2', false);\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx\", array('t' => 1, 'f' => 2));\n* </code>\n*\n*/\nfunction append_sid($url, $params = false, $is_amp = true, $session_id = false)\n{\n\tglobal $_SID, $_EXTRA_URL, $phpbb_hook;\n\n\tif ($params === '' || (is_array($params) && empty($params)))\n\t{\n\t\t// Do not append the ? if the param-list is empty anyway.\n\t\t$params = false;\n\t}\n\n\t// Developers using the hook function need to globalise the $_SID and $_EXTRA_URL on their own and also handle it appropriately.\n\t// They could mimic most of what is within this function\n\tif (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__, $url, $params, $is_amp, $session_id))\n\t{\n\t\tif ($phpbb_hook->hook_return(__FUNCTION__))\n\t\t{\n\t\t\treturn $phpbb_hook->hook_return_result(__FUNCTION__);\n\t\t}\n\t}\n\n\t$params_is_array = is_array($params);\n\n\t// Get anchor\n\t$anchor = '';\n\tif (strpos($url, '#') !== false)\n\t{\n\t\tlist($url, $anchor) = explode('#', $url, 2);\n\t\t$anchor = '#' . $anchor;\n\t}\n\telse if (!$params_is_array && strpos($params, '#') !== false)\n\t{\n\t\tlist($params, $anchor) = explode('#', $params, 2);\n\t\t$anchor = '#' . $anchor;\n\t}\n\n\t// Handle really simple cases quickly\n\tif ($_SID == '' && $session_id === false && empty($_EXTRA_URL) && !$params_is_array && !$anchor)\n\t{\n\t\tif ($params === false)\n\t\t{\n\t\t\treturn $url;\n\t\t}\n\n\t\t$url_delim = (strpos($url, '?') === false) ? '?' : (($is_amp) ? '&amp;' : '&');\n\t\treturn $url . ($params !== false ? $url_delim. $params : '');\n\t}\n\n\t// Assign sid if session id is not specified\n\tif ($session_id === false)\n\t{\n\t\t$session_id = $_SID;\n\t}\n\n\t$amp_delim = ($is_amp) ? '&amp;' : '&';\n\t$url_delim = (strpos($url, '?') === false) ? '?' : $amp_delim;\n\n\t// Appending custom url parameter?\n\t$append_url = (!empty($_EXTRA_URL)) ? implode($amp_delim, $_EXTRA_URL) : '';\n\n\t// Use the short variant if possible ;)\n\tif ($params === false)\n\t{\n\t\t// Append session id\n\t\tif (!$session_id)\n\t\t{\n\t\t\treturn $url . (($append_url) ? $url_delim . $append_url : '') . $anchor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . 'sid=' . $session_id . $anchor;\n\t\t}\n\t}\n\n\t// Build string if parameters are specified as array\n\tif (is_array($params))\n\t{\n\t\t$output = array();\n\n\t\tforeach ($params as $key => $item)\n\t\t{\n\t\t\tif ($item === NULL)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ($key == '#')\n\t\t\t{\n\t\t\t\t$anchor = '#' . $item;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$output[] = $key . '=' . $item;\n\t\t}\n\n\t\t$params = implode($amp_delim, $output);\n\t}\n\n\t// Append session id and parameters (even if they are empty)\n\t// If parameters are empty, the developer can still append his/her parameters without caring about the delimiter\n\treturn $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . $params . ((!$session_id) ? '' : $amp_delim . 'sid=' . $session_id) . $anchor;\n}\n\n/**\n* Generate board url (example: http://www.example.com/phpBB)\n*\n* @param bool $without_script_path if set to true the script path gets not appended (example: http://www.example.com)\n*\n* @return string the generated board url\n*/\nfunction generate_board_url($without_script_path = false)\n{\n\tglobal $config, $user;\n\n\t$server_name = $user->host;\n\t$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');\n\n\t// Forcing server vars is the only way to specify/override the protocol\n\tif ($config['force_server_vars'] || !$server_name)\n\t{\n\t\t$server_protocol = ($config['server_protocol']) ? $config['server_protocol'] : (($config['cookie_secure']) ? 'https://' : 'http://');\n\t\t$server_name = $config['server_name'];\n\t\t$server_port = (int) $config['server_port'];\n\t\t$script_path = $config['script_path'];\n\n\t\t$url = $server_protocol . $server_name;\n\t\t$cookie_secure = $config['cookie_secure'];\n\t}\n\telse\n\t{\n\t\t// Do not rely on cookie_secure, users seem to think that it means a secured cookie instead of an encrypted connection\n\t\t$cookie_secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;\n\t\t$url = (($cookie_secure) ? 'https://' : 'http://') . $server_name;\n\n\t\t$script_path = $user->page['root_script_path'];\n\t}\n\n\tif ($server_port && (($cookie_secure && $server_port <> 443) || (!$cookie_secure && $server_port <> 80)))\n\t{\n\t\t// HTTP HOST can carry a port number (we fetch $user->host, but for old versions this may be true)\n\t\tif (strpos($server_name, ':') === false)\n\t\t{\n\t\t\t$url .= ':' . $server_port;\n\t\t}\n\t}\n\n\tif (!$without_script_path)\n\t{\n\t\t$url .= $script_path;\n\t}\n\n\t// Strip / from the end\n\tif (substr($url, -1, 1) == '/')\n\t{\n\t\t$url = substr($url, 0, -1);\n\t}\n\n\treturn $url;\n}\n\n/**\n* Redirects the user to another page then exits the script nicely\n* This function is intended for urls within the board. It's not meant to redirect to cross-domains.\n*\n* @param string $url The url to redirect to\n* @param bool $return If true, do not redirect but return the sanitized URL. Default is no return.\n* @param bool $disable_cd_check If true, redirect() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.\n*/\nfunction redirect($url, $return = false, $disable_cd_check = false)\n{\n\tglobal $db, $cache, $config, $user, $phpbb_root_path;\n\n\t$failover_flag = false;\n\n\tif (empty($user->lang))\n\t{\n\t\t$user->add_lang('common');\n\t}\n\n\tif (!$return)\n\t{\n\t\tgarbage_collection();\n\t}\n\n\t// Make sure no &amp;'s are in, this will break the redirect\n\t$url = str_replace('&amp;', '&', $url);\n\n\t// Determine which type of redirect we need to handle...\n\t$url_parts = @parse_url($url);\n\n\tif ($url_parts === false)\n\t{\n\t\t// Malformed url, redirect to current page...\n\t\t$url = generate_board_url() . '/' . $user->page['page'];\n\t}\n\telse if (!empty($url_parts['scheme']) && !empty($url_parts['host']))\n\t{\n\t\t// Attention: only able to redirect within the same domain if $disable_cd_check is false (yourdomain.com -> www.yourdomain.com will not work)\n\t\tif (!$disable_cd_check && $url_parts['host'] !== $user->host)\n\t\t{\n\t\t\t$url = generate_board_url();\n\t\t}\n\t}\n\telse if ($url[0] == '/')\n\t{\n\t\t// Absolute uri, prepend direct url...\n\t\t$url = generate_board_url(true) . $url;\n\t}\n\telse\n\t{\n\t\t// Relative uri\n\t\t$pathinfo = pathinfo($url);\n\n\t\tif (!$disable_cd_check && !file_exists($pathinfo['dirname'] . '/'))\n\t\t{\n\t\t\t$url = str_replace('../', '', $url);\n\t\t\t$pathinfo = pathinfo($url);\n\n\t\t\tif (!file_exists($pathinfo['dirname'] . '/'))\n\t\t\t{\n\t\t\t\t// fallback to \"last known user page\"\n\t\t\t\t// at least this way we know the user does not leave the phpBB root\n\t\t\t\t$url = generate_board_url() . '/' . $user->page['page'];\n\t\t\t\t$failover_flag = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!$failover_flag)\n\t\t{\n\t\t\t// Is the uri pointing to the current directory?\n\t\t\tif ($pathinfo['dirname'] == '.')\n\t\t\t{\n\t\t\t\t$url = str_replace('./', '', $url);\n\n\t\t\t\t// Strip / from the beginning\n\t\t\t\tif ($url && substr($url, 0, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$url = substr($url, 1);\n\t\t\t\t}\n\n\t\t\t\tif ($user->page['page_dir'])\n\t\t\t\t{\n\t\t\t\t\t$url = generate_board_url() . '/' . $user->page['page_dir'] . '/' . $url;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$url = generate_board_url() . '/' . $url;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Used ./ before, but $phpbb_root_path is working better with urls within another root path\n\t\t\t\t$root_dirs = explode('/', str_replace('\\\\', '/', phpbb_realpath($phpbb_root_path)));\n\t\t\t\t$page_dirs = explode('/', str_replace('\\\\', '/', phpbb_realpath($pathinfo['dirname'])));\n\t\t\t\t$intersection = array_intersect_assoc($root_dirs, $page_dirs);\n\n\t\t\t\t$root_dirs = array_diff_assoc($root_dirs, $intersection);\n\t\t\t\t$page_dirs = array_diff_assoc($page_dirs, $intersection);\n\n\t\t\t\t$dir = str_repeat('../', sizeof($root_dirs)) . implode('/', $page_dirs);\n\n\t\t\t\t// Strip / from the end\n\t\t\t\tif ($dir && substr($dir, -1, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$dir = substr($dir, 0, -1);\n\t\t\t\t}\n\n\t\t\t\t// Strip / from the beginning\n\t\t\t\tif ($dir && substr($dir, 0, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$dir = substr($dir, 1);\n\t\t\t\t}\n\n\t\t\t\t$url = str_replace($pathinfo['dirname'] . '/', '', $url);\n\n\t\t\t\t// Strip / from the beginning\n\t\t\t\tif (substr($url, 0, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$url = substr($url, 1);\n\t\t\t\t}\n\n\t\t\t\t$url = (!empty($dir) ? $dir . '/' : '') . $url;\n\t\t\t\t$url = generate_board_url() . '/' . $url;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Make sure no linebreaks are there... to prevent http response splitting for PHP < 4.4.2\n\tif (strpos(urldecode($url), \"\\n\") !== false || strpos(urldecode($url), \"\\r\") !== false || strpos($url, ';') !== false)\n\t{\n\t\ttrigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);\n\t}\n\n\t// Now, also check the protocol and for a valid url the last time...\n\t$allowed_protocols = array('http', 'https', 'ftp', 'ftps');\n\t$url_parts = parse_url($url);\n\n\tif ($url_parts === false || empty($url_parts['scheme']) || !in_array($url_parts['scheme'], $allowed_protocols))\n\t{\n\t\ttrigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);\n\t}\n\n\tif ($return)\n\t{\n\t\treturn $url;\n\t}\n\n\t// Redirect via an HTML form for PITA webservers\n\tif (@preg_match('#Microsoft|WebSTAR|Xitami#', getenv('SERVER_SOFTWARE')))\n\t{\n\t\theader('Refresh: 0; URL=' . $url);\n\n\t\techo '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">';\n\t\techo '<html xmlns=\"http://www.w3.org/1999/xhtml\" dir=\"' . $user->lang['DIRECTION'] . '\" lang=\"' . $user->lang['USER_LANG'] . '\" xml:lang=\"' . $user->lang['USER_LANG'] . '\">';\n\t\techo '<head>';\n\t\techo '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />';\n\t\techo '<meta http-equiv=\"refresh\" content=\"0; url=' . str_replace('&', '&amp;', $url) . '\" />';\n\t\techo '<title>' . $user->lang['REDIRECT'] . '</title>';\n\t\techo '</head>';\n\t\techo '<body>';\n\t\techo '<div style=\"text-align: center;\">' . sprintf($user->lang['URL_REDIRECT'], '<a href=\"' . str_replace('&', '&amp;', $url) . '\">', '</a>') . '</div>';\n\t\techo '</body>';\n\t\techo '</html>';\n\n\t\texit;\n\t}\n\n\t// Behave as per HTTP/1.1 spec for others\n\theader('Location: ' . $url);\n\texit;\n}\n\n/**\n* Re-Apply session id after page reloads\n*/\nfunction reapply_sid($url)\n{\n\tglobal $phpEx, $phpbb_root_path;\n\n\tif ($url === \"index.$phpEx\")\n\t{\n\t\treturn append_sid(\"index.$phpEx\");\n\t}\n\telse if ($url === \"{$phpbb_root_path}index.$phpEx\")\n\t{\n\t\treturn append_sid(\"{$phpbb_root_path}index.$phpEx\");\n\t}\n\n\t// Remove previously added sid\n\tif (strpos($url, 'sid=') !== false)\n\t{\n\t\t// All kind of links\n\t\t$url = preg_replace('/(\\?)?(&amp;|&)?sid=[a-z0-9]+/', '', $url);\n\t\t// if the sid was the first param, make the old second as first ones\n\t\t$url = preg_replace(\"/$phpEx(&amp;|&)+?/\", \"$phpEx?\", $url);\n\t}\n\n\treturn append_sid($url);\n}\n\n/**\n* Returns url from the session/current page with an re-appended SID with optionally stripping vars from the url\n*/\nfunction build_url($strip_vars = false)\n{\n\tglobal $user, $phpbb_root_path;\n\n\t// Append SID\n\t$redirect = append_sid($user->page['page'], false, false);\n\n\t// Add delimiter if not there...\n\tif (strpos($redirect, '?') === false)\n\t{\n\t\t$redirect .= '?';\n\t}\n\n\t// Strip vars...\n\tif ($strip_vars !== false && strpos($redirect, '?') !== false)\n\t{\n\t\tif (!is_array($strip_vars))\n\t\t{\n\t\t\t$strip_vars = array($strip_vars);\n\t\t}\n\n\t\t$query = $_query = array();\n\n\t\t$args = substr($redirect, strpos($redirect, '?') + 1);\n\t\t$args = ($args) ? explode('&', $args) : array();\n\t\t$redirect = substr($redirect, 0, strpos($redirect, '?'));\n\n\t\tforeach ($args as $argument)\n\t\t{\n\t\t\t$arguments = explode('=', $argument);\n\t\t\t$key = $arguments[0];\n\t\t\tunset($arguments[0]);\n\n\t\t\tif ($key === '')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$query[$key] = implode('=', $arguments);\n\t\t}\n\n\t\t// Strip the vars off\n\t\tforeach ($strip_vars as $strip)\n\t\t{\n\t\t\tif (isset($query[$strip]))\n\t\t\t{\n\t\t\t\tunset($query[$strip]);\n\t\t\t}\n\t\t}\n\n\t\t// Glue the remaining parts together... already urlencoded\n\t\tforeach ($query as $key => $value)\n\t\t{\n\t\t\t$_query[] = $key . '=' . $value;\n\t\t}\n\t\t$query = implode('&', $_query);\n\n\t\t$redirect .= ($query) ? '?' . $query : '';\n\t}\n\n\t// We need to be cautious here.\n\t// On some situations, the redirect path is an absolute URL, sometimes a relative path\n\t// For a relative path, let's prefix it with $phpbb_root_path to point to the correct location,\n\t// else we use the URL directly.\n\t$url_parts = @parse_url($redirect);\n\n\t// URL\n\tif ($url_parts !== false && !empty($url_parts['scheme']) && !empty($url_parts['host']))\n\t{\n\t\treturn str_replace('&', '&amp;', $redirect);\n\t}\n\n\treturn $phpbb_root_path . str_replace('&', '&amp;', $redirect);\n}\n\n/**\n* Meta refresh assignment\n* Adds META template variable with meta http tag.\n*\n* @param int $time Time in seconds for meta refresh tag\n* @param string $url URL to redirect to. The url will go through redirect() first before the template variable is assigned\n* @param bool $disable_cd_check If true, meta_refresh() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.\n*/\nfunction meta_refresh($time, $url, $disable_cd_check = false)\n{\n\tglobal $template;\n\n\t$url = redirect($url, true, $disable_cd_check);\n\t$url = str_replace('&', '&amp;', $url);\n\n\t// For XHTML compatibility we change back & to &amp;\n\t$template->assign_vars(array(\n\t\t'META' => '<meta http-equiv=\"refresh\" content=\"' . $time . '; url=' . $url . '\" />')\n\t);\n\n\treturn $url;\n}\n\n/**\n* Outputs correct status line header.\n*\n* Depending on php sapi one of the two following forms is used:\n*\n* Status: 404 Not Found\n*\n* HTTP/1.x 404 Not Found\n*\n* HTTP version is taken from HTTP_VERSION environment variable,\n* and defaults to 1.0.\n*\n* Sample usage:\n*\n* send_status_line(404, 'Not Found');\n*\n* @param int $code HTTP status code\n* @param string $message Message for the status code\n* @return null\n*/\nfunction send_status_line($code, $message)\n{\n\tif (substr(strtolower(@php_sapi_name()), 0, 3) === 'cgi')\n\t{\n\t\t// in theory, we shouldn't need that due to php doing it. Reality offers a differing opinion, though\n\t\theader(\"Status: $code $message\", true, $code);\n\t}\n\telse\n\t{\n\t\tif (!empty($_SERVER['SERVER_PROTOCOL']) && is_string($_SERVER['SERVER_PROTOCOL']) && preg_match('#^HTTP/[0-9]\\.[0-9]$#', $_SERVER['SERVER_PROTOCOL']))\n\t\t{\n\t\t\t$version = $_SERVER['SERVER_PROTOCOL'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$version = 'HTTP/1.0';\n\t\t}\n\t\theader(\"$version $code $message\", true, $code);\n\t}\n}\n\n//Form validation\n\n\n/**\n* Add a secret hash   for use in links/GET requests\n* @param string  $link_name The name of the link; has to match the name used in check_link_hash, otherwise no restrictions apply\n* @return string the hash\n\n*/\nfunction generate_link_hash($link_name)\n{\n\tglobal $user;\n\n\tif (!isset($user->data[\"hash_$link_name\"]))\n\t{\n\t\t$user->data[\"hash_$link_name\"] = substr(sha1($user->data['user_form_salt'] . $link_name), 0, 8);\n\t}\n\n\treturn $user->data[\"hash_$link_name\"];\n}\n\n\n/**\n* checks a link hash - for GET requests\n* @param string $token the submitted token\n* @param string $link_name The name of the link\n* @return boolean true if all is fine\n*/\nfunction check_link_hash($token, $link_name)\n{\n\treturn $token === generate_link_hash($link_name);\n}\n\n/**\n* Add a secret token to the form (requires the S_FORM_TOKEN template variable)\n* @param string  $form_name The name of the form; has to match the name used in check_form_key, otherwise no restrictions apply\n*/\nfunction add_form_key($form_name)\n{\n\tglobal $config, $template, $user;\n\n\t$now = time();\n\t$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';\n\t$token = sha1($now . $user->data['user_form_salt'] . $form_name . $token_sid);\n\n\t$s_fields = build_hidden_fields(array(\n\t\t'creation_time' => $now,\n\t\t'form_token'\t=> $token,\n\t));\n\n\t$template->assign_vars(array(\n\t\t'S_FORM_TOKEN'\t=> $s_fields,\n\t));\n}\n\n/**\n* Check the form key. Required for all altering actions not secured by confirm_box\n* @param string  $form_name The name of the form; has to match the name used in add_form_key, otherwise no restrictions apply\n* @param int $timespan The maximum acceptable age for a submitted form in seconds. Defaults to the config setting.\n* @param string $return_page The address for the return link\n* @param bool $trigger If true, the function will triger an error when encountering an invalid form\n*/\nfunction check_form_key($form_name, $timespan = false, $return_page = '', $trigger = false)\n{\n\tglobal $config, $user;\n\n\tif ($timespan === false)\n\t{\n\t\t// we enforce a minimum value of half a minute here.\n\t\t$timespan = ($config['form_token_lifetime'] == -1) ? -1 : max(30, $config['form_token_lifetime']);\n\t}\n\n\tif (isset($_POST['creation_time']) && isset($_POST['form_token']))\n\t{\n\t\t$creation_time\t= abs(request_var('creation_time', 0));\n\t\t$token = request_var('form_token', '');\n\n\t\t$diff = time() - $creation_time;\n\n\t\t// If creation_time and the time() now is zero we can assume it was not a human doing this (the check for if ($diff)...\n\t\tif (defined('DEBUG_TEST') || $diff && ($diff <= $timespan || $timespan === -1))\n\t\t{\n\t\t\t$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';\n\t\t\t$key = sha1($creation_time . $user->data['user_form_salt'] . $form_name . $token_sid);\n\n\t\t\tif ($key === $token)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($trigger)\n\t{\n\t\ttrigger_error($user->lang['FORM_INVALID'] . $return_page);\n\t}\n\n\treturn false;\n}\n\n// Message/Login boxes\n\n/**\n* Build Confirm box\n* @param boolean $check True for checking if confirmed (without any additional parameters) and false for displaying the confirm box\n* @param string $title Title/Message used for confirm box.\n*\t\tmessage text is _CONFIRM appended to title.\n*\t\tIf title cannot be found in user->lang a default one is displayed\n*\t\tIf title_CONFIRM cannot be found in user->lang the text given is used.\n* @param string $hidden Hidden variables\n* @param string $html_body Template used for confirm box\n* @param string $u_action Custom form action\n*/\nfunction confirm_box($check, $title = '', $hidden = '', $html_body = 'confirm_body.html', $u_action = '')\n{\n\tglobal $user, $template, $db;\n\tglobal $phpEx, $phpbb_root_path;\n\n\tif (isset($_POST['cancel']))\n\t{\n\t\treturn false;\n\t}\n\n\t$confirm = false;\n\tif (isset($_POST['confirm']))\n\t{\n\t\t// language frontier\n\t\tif ($_POST['confirm'] === $user->lang['YES'])\n\t\t{\n\t\t\t$confirm = true;\n\t\t}\n\t}\n\n\tif ($check && $confirm)\n\t{\n\t\t$user_id = request_var('confirm_uid', 0);\n\t\t$session_id = request_var('sess', '');\n\t\t$confirm_key = request_var('confirm_key', '');\n\n\t\tif ($user_id != $user->data['user_id'] || $session_id != $user->session_id || !$confirm_key || !$user->data['user_last_confirm_key'] || $confirm_key != $user->data['user_last_confirm_key'])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// Reset user_last_confirm_key\n\t\t$sql = 'UPDATE ' . USERS_TABLE . \" SET user_last_confirm_key = ''\n\t\t\tWHERE user_id = \" . $user->data['user_id'];\n\t\t$db->sql_query($sql);\n\n\t\treturn true;\n\t}\n\telse if ($check)\n\t{\n\t\treturn false;\n\t}\n\n\t$s_hidden_fields = build_hidden_fields(array(\n\t\t'confirm_uid'\t=> $user->data['user_id'],\n\t\t'sess'\t\t\t=> $user->session_id,\n\t\t'sid'\t\t\t=> $user->session_id,\n\t));\n\n\t// generate activation key\n\t$confirm_key = gen_rand_string(10);\n\n\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t{\n\t\tadm_page_header((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]);\n\t}\n\telse\n\t{\n\t\tpage_header(((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]), false);\n\t}\n\n\t$template->set_filenames(array(\n\t\t'body' => $html_body)\n\t);\n\n\t// If activation key already exist, we better do not re-use the key (something very strange is going on...)\n\tif (request_var('confirm_key', ''))\n\t{\n\t\t// This should not occur, therefore we cancel the operation to safe the user\n\t\treturn false;\n\t}\n\n\t// re-add sid / transform & to &amp; for user->page (user->page is always using &)\n\t$use_page = ($u_action) ? $phpbb_root_path . $u_action : $phpbb_root_path . str_replace('&', '&amp;', $user->page['page']);\n\t$u_action = reapply_sid($use_page);\n\t$u_action .= ((strpos($u_action, '?') === false) ? '?' : '&amp;') . 'confirm_key=' . $confirm_key;\n\n\t$template->assign_vars(array(\n\t\t'MESSAGE_TITLE'\t\t=> (!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title],\n\t\t'MESSAGE_TEXT'\t\t=> (!isset($user->lang[$title . '_CONFIRM'])) ? $title : $user->lang[$title . '_CONFIRM'],\n\n\t\t'YES_VALUE'\t\t\t=> $user->lang['YES'],\n\t\t'S_CONFIRM_ACTION'\t=> $u_action,\n\t\t'S_HIDDEN_FIELDS'\t=> $hidden . $s_hidden_fields)\n\t);\n\n\t$sql = 'UPDATE ' . USERS_TABLE . \" SET user_last_confirm_key = '\" . $db->sql_escape($confirm_key) . \"'\n\t\tWHERE user_id = \" . $user->data['user_id'];\n\t$db->sql_query($sql);\n\n\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t{\n\t\tadm_page_footer();\n\t}\n\telse\n\t{\n\t\tpage_footer();\n\t}\n}\n\n/**\n* Generate login box or verify password\n*/\nfunction login_box($redirect = '', $l_explain = '', $l_success = '', $admin = false, $s_display = true)\n{\n\tglobal $db, $user, $template, $auth, $phpEx, $phpbb_root_path, $config;\n\n\tif (!class_exists('phpbb_captcha_factory'))\n\t{\n\t\tinclude($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);\n\t}\n\n\t$err = '';\n\n\t// Make sure user->setup() has been called\n\tif (empty($user->lang))\n\t{\n\t\t$user->setup();\n\t}\n\n\t// Print out error if user tries to authenticate as an administrator without having the privileges...\n\tif ($admin && !$auth->acl_get('a_'))\n\t{\n\t\t// Not authd\n\t\t// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions\n\t\tif ($user->data['is_registered'])\n\t\t{\n\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t}\n\t\ttrigger_error('NO_AUTH_ADMIN');\n\t}\n\n\tif (isset($_POST['login']))\n\t{\n\t\t// Get credential\n\t\tif ($admin)\n\t\t{\n\t\t\t$credential = request_var('credential', '');\n\n\t\t\tif (strspn($credential, 'abcdef0123456789') !== strlen($credential) || strlen($credential) != 32)\n\t\t\t{\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t\t\t}\n\t\t\t\ttrigger_error('NO_AUTH_ADMIN');\n\t\t\t}\n\n\t\t\t$password\t= request_var('password_' . $credential, '', true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$password\t= request_var('password', '', true);\n\t\t}\n\n\t\t$username\t= request_var('username', '', true);\n\t\t$autologin\t= (!empty($_POST['autologin'])) ? true : false;\n\t\t$viewonline = (!empty($_POST['viewonline'])) ? 0 : 1;\n\t\t$admin \t\t= ($admin) ? 1 : 0;\n\t\t$viewonline = ($admin) ? $user->data['session_viewonline'] : $viewonline;\n\n\t\t// Check if the supplied username is equal to the one stored within the database if re-authenticating\n\t\tif ($admin && utf8_clean_string($username) != utf8_clean_string($user->data['username']))\n\t\t{\n\t\t\t// We log the attempt to use a different username...\n\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t\ttrigger_error('NO_AUTH_ADMIN_USER_DIFFER');\n\t\t}\n\n\t\t// If authentication is successful we redirect user to previous page\n\t\t$result = $auth->login($username, $password, $autologin, $viewonline, $admin);\n\n\t\t// If admin authentication and login, we will log if it was a success or not...\n\t\t// We also break the operation on the first non-success login - it could be argued that the user already knows\n\t\tif ($admin)\n\t\t{\n\t\t\tif ($result['status'] == LOGIN_SUCCESS)\n\t\t\t{\n\t\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_SUCCESS');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Only log the failed attempt if a real user tried to.\n\t\t\t\t// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// The result parameter is always an array, holding the relevant information...\n\t\tif ($result['status'] == LOGIN_SUCCESS)\n\t\t{\n\t\t\t$redirect = request_var('redirect', \"{$phpbb_root_path}index.$phpEx\");\n\t\t\t$message = ($l_success) ? $l_success : $user->lang['LOGIN_REDIRECT'];\n\t\t\t$l_redirect = ($admin) ? $user->lang['PROCEED_TO_ACP'] : (($redirect === \"{$phpbb_root_path}index.$phpEx\" || $redirect === \"index.$phpEx\") ? $user->lang['RETURN_INDEX'] : $user->lang['RETURN_PAGE']);\n\n\t\t\t// append/replace SID (may change during the session for AOL users)\n\t\t\t$redirect = reapply_sid($redirect);\n\n\t\t\t// Special case... the user is effectively banned, but we allow founders to login\n\t\t\tif (defined('IN_CHECK_BAN') && $result['user_row']['user_type'] != USER_FOUNDER)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$redirect = meta_refresh(3, $redirect);\n\t\t\ttrigger_error($message . '<br /><br />' . sprintf($l_redirect, '<a href=\"' . $redirect . '\">', '</a>'));\n\t\t}\n\n\t\t// Something failed, determine what...\n\t\tif ($result['status'] == LOGIN_BREAK)\n\t\t{\n\t\t\ttrigger_error($result['error_msg']);\n\t\t}\n\n\t\t// Special cases... determine\n\t\tswitch ($result['status'])\n\t\t{\n\t\t\tcase LOGIN_ERROR_ATTEMPTS:\n\n\t\t\t\t$captcha = phpbb_captcha_factory::get_instance($config['captcha_plugin']);\n\t\t\t\t$captcha->init(CONFIRM_LOGIN);\n\t\t\t\t// $captcha->reset();\n\n\t\t\t\t$template->assign_vars(array(\n\t\t\t\t\t'CAPTCHA_TEMPLATE'\t\t\t=> $captcha->get_template(),\n\t\t\t\t));\n\n\t\t\t\t$err = $user->lang[$result['error_msg']];\n\t\t\tbreak;\n\n\t\t\tcase LOGIN_ERROR_PASSWORD_CONVERT:\n\t\t\t\t$err = sprintf(\n\t\t\t\t\t$user->lang[$result['error_msg']],\n\t\t\t\t\t($config['email_enable']) ? '<a href=\"' . append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=sendpassword') . '\">' : '',\n\t\t\t\t\t($config['email_enable']) ? '</a>' : '',\n\t\t\t\t\t($config['board_contact']) ? '<a href=\"mailto:' . htmlspecialchars($config['board_contact']) . '\">' : '',\n\t\t\t\t\t($config['board_contact']) ? '</a>' : ''\n\t\t\t\t);\n\t\t\tbreak;\n\n\t\t\t// Username, password, etc...\n\t\t\tdefault:\n\t\t\t\t$err = $user->lang[$result['error_msg']];\n\n\t\t\t\t// Assign admin contact to some error messages\n\t\t\t\tif ($result['error_msg'] == 'LOGIN_ERROR_USERNAME' || $result['error_msg'] == 'LOGIN_ERROR_PASSWORD')\n\t\t\t\t{\n\t\t\t\t\t$err = (!$config['board_contact']) ? sprintf($user->lang[$result['error_msg']], '', '') : sprintf($user->lang[$result['error_msg']], '<a href=\"mailto:' . htmlspecialchars($config['board_contact']) . '\">', '</a>');\n\t\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Assign credential for username/password pair\n\t$credential = ($admin) ? md5(unique_id()) : false;\n\n\t$s_hidden_fields = array(\n\t\t'sid'\t\t=> $user->session_id,\n\t);\n\n\tif ($redirect)\n\t{\n\t\t$s_hidden_fields['redirect'] = $redirect;\n\t}\n\n\tif ($admin)\n\t{\n\t\t$s_hidden_fields['credential'] = $credential;\n\t}\n\n\t$s_hidden_fields = build_hidden_fields($s_hidden_fields);\n\n\t$template->assign_vars(array(\n\t\t'LOGIN_ERROR'\t\t=> $err,\n\t\t'LOGIN_EXPLAIN'\t\t=> $l_explain,\n\n\t\t'U_SEND_PASSWORD' \t\t=> ($config['email_enable']) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=sendpassword') : '',\n\t\t'U_RESEND_ACTIVATION'\t=> ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable']) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=resend_act') : '',\n\t\t'U_TERMS_USE'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=terms'),\n\t\t'U_PRIVACY'\t\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=privacy'),\n\n\t\t'S_DISPLAY_FULL_LOGIN'\t=> ($s_display) ? true : false,\n\t\t'S_HIDDEN_FIELDS' \t\t=> $s_hidden_fields,\n\n\t\t'S_ADMIN_AUTH'\t\t\t=> $admin,\n\t\t'USERNAME'\t\t\t\t=> ($admin) ? $user->data['username'] : '',\n\n\t\t'USERNAME_CREDENTIAL'\t=> 'username',\n\t\t'PASSWORD_CREDENTIAL'\t=> ($admin) ? 'password_' . $credential : 'password',\n\t));\n\n\tpage_header($user->lang['LOGIN'], false);\n\n\t$template->set_filenames(array(\n\t\t'body' => 'login_body.html')\n\t);\n\tmake_jumpbox(append_sid(\"{$phpbb_root_path}viewforum.$phpEx\"));\n\n\tpage_footer();\n}\n\n/**\n* Generate forum login box\n*/\nfunction login_forum_box($forum_data)\n{\n\tglobal $db, $config, $user, $template, $phpEx;\n\n\t$password = request_var('password', '', true);\n\n\t$sql = 'SELECT forum_id\n\t\tFROM ' . FORUMS_ACCESS_TABLE . '\n\t\tWHERE forum_id = ' . $forum_data['forum_id'] . '\n\t\t\tAND user_id = ' . $user->data['user_id'] . \"\n\t\t\tAND session_id = '\" . $db->sql_escape($user->session_id) . \"'\";\n\t$result = $db->sql_query($sql);\n\t$row = $db->sql_fetchrow($result);\n\t$db->sql_freeresult($result);\n\n\tif ($row)\n\t{\n\t\treturn true;\n\t}\n\n\tif ($password)\n\t{\n\t\t// Remove expired authorised sessions\n\t\t$sql = 'SELECT f.session_id\n\t\t\tFROM ' . FORUMS_ACCESS_TABLE . ' f\n\t\t\tLEFT JOIN ' . SESSIONS_TABLE . ' s ON (f.session_id = s.session_id)\n\t\t\tWHERE s.session_id IS NULL';\n\t\t$result = $db->sql_query($sql);\n\n\t\tif ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$sql_in = array();\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$sql_in[] = (string) $row['session_id'];\n\t\t\t}\n\t\t\twhile ($row = $db->sql_fetchrow($result));\n\n\t\t\t// Remove expired sessions\n\t\t\t$sql = 'DELETE FROM ' . FORUMS_ACCESS_TABLE . '\n\t\t\t\tWHERE ' . $db->sql_in_set('session_id', $sql_in);\n\t\t\t$db->sql_query($sql);\n\t\t}\n\t\t$db->sql_freeresult($result);\n\n\t\tif (phpbb_check_hash($password, $forum_data['forum_password']))\n\t\t{\n\t\t\t$sql_ary = array(\n\t\t\t\t'forum_id'\t\t=> (int) $forum_data['forum_id'],\n\t\t\t\t'user_id'\t\t=> (int) $user->data['user_id'],\n\t\t\t\t'session_id'\t=> (string) $user->session_id,\n\t\t\t);\n\n\t\t\t$db->sql_query('INSERT INTO ' . FORUMS_ACCESS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\t\t\treturn true;\n\t\t}\n\n\t\t$template->assign_var('LOGIN_ERROR', $user->lang['WRONG_PASSWORD']);\n\t}\n\n\tpage_header($user->lang['LOGIN'], false);\n\n\t$template->assign_vars(array(\n\t\t'FORUM_NAME'\t\t\t=> isset($forum_data['forum_name']) ? $forum_data['forum_name'] : '',\n\t\t'S_LOGIN_ACTION'\t\t=> build_url(array('f')),\n\t\t'S_HIDDEN_FIELDS'\t\t=> build_hidden_fields(array('f' => $forum_data['forum_id'])))\n\t);\n\n\t$template->set_filenames(array(\n\t\t'body' => 'login_forum.html')\n\t);\n\n\tpage_footer();\n}\n\n// Little helpers\n\n/**\n* Little helper for the build_hidden_fields function\n*/\nfunction _build_hidden_fields($key, $value, $specialchar, $stripslashes)\n{\n\t$hidden_fields = '';\n\n\tif (!is_array($value))\n\t{\n\t\t$value = ($stripslashes) ? stripslashes($value) : $value;\n\t\t$value = ($specialchar) ? htmlspecialchars($value, ENT_COMPAT, 'UTF-8') : $value;\n\n\t\t$hidden_fields .= '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\telse\n\t{\n\t\tforeach ($value as $_key => $_value)\n\t\t{\n\t\t\t$_key = ($stripslashes) ? stripslashes($_key) : $_key;\n\t\t\t$_key = ($specialchar) ? htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') : $_key;\n\n\t\t\t$hidden_fields .= _build_hidden_fields($key . '[' . $_key . ']', $_value, $specialchar, $stripslashes);\n\t\t}\n\t}\n\n\treturn $hidden_fields;\n}\n\n/**\n* Build simple hidden fields from array\n*\n* @param array $field_ary an array of values to build the hidden field from\n* @param bool $specialchar if true, keys and values get specialchared\n* @param bool $stripslashes if true, keys and values get stripslashed\n*\n* @return string the hidden fields\n*/\nfunction build_hidden_fields($field_ary, $specialchar = false, $stripslashes = false)\n{\n\t$s_hidden_fields = '';\n\n\tforeach ($field_ary as $name => $vars)\n\t{\n\t\t$name = ($stripslashes) ? stripslashes($name) : $name;\n\t\t$name = ($specialchar) ? htmlspecialchars($name, ENT_COMPAT, 'UTF-8') : $name;\n\n\t\t$s_hidden_fields .= _build_hidden_fields($name, $vars, $specialchar, $stripslashes);\n\t}\n\n\treturn $s_hidden_fields;\n}\n\n/**\n* Parse cfg file\n*/\nfunction parse_cfg_file($filename, $lines = false)\n{\n\t$parsed_items = array();\n\n\tif ($lines === false)\n\t{\n\t\t$lines = file($filename);\n\t}\n\n\tforeach ($lines as $line)\n\t{\n\t\t$line = trim($line);\n\n\t\tif (!$line || $line[0] == '#' || ($delim_pos = strpos($line, '=')) === false)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Determine first occurrence, since in values the equal sign is allowed\n\t\t$key = htmlspecialchars(strtolower(trim(substr($line, 0, $delim_pos))));\n\t\t$value = trim(substr($line, $delim_pos + 1));\n\n\t\tif (in_array($value, array('off', 'false', '0')))\n\t\t{\n\t\t\t$value = false;\n\t\t}\n\t\telse if (in_array($value, array('on', 'true', '1')))\n\t\t{\n\t\t\t$value = true;\n\t\t}\n\t\telse if (!trim($value))\n\t\t{\n\t\t\t$value = '';\n\t\t}\n\t\telse if (($value[0] == \"'\" && $value[sizeof($value) - 1] == \"'\") || ($value[0] == '\"' && $value[sizeof($value) - 1] == '\"'))\n\t\t{\n\t\t\t$value = htmlspecialchars(substr($value, 1, sizeof($value)-2));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$value = htmlspecialchars($value);\n\t\t}\n\n\t\t$parsed_items[$key] = $value;\n\t}\n\t\n\tif (isset($parsed_items['inherit_from']) && isset($parsed_items['name']) && $parsed_items['inherit_from'] == $parsed_items['name'])\n\t{\n\t\tunset($parsed_items['inherit_from']);\n\t}\n\n\treturn $parsed_items;\n}\n\n/**\n* Add log event\n*/\nfunction add_log()\n{\n\tglobal $db, $user;\n\n\t// In phpBB 3.1.x i want to have logging in a class to be able to control it\n\t// For now, we need a quite hakish approach to circumvent logging for some actions\n\t// @todo implement cleanly\n\tif (!empty($GLOBALS['skip_add_log']))\n\t{\n\t\treturn false;\n\t}\n\n\t$args = func_get_args();\n\n\t$mode\t\t\t= array_shift($args);\n\t$reportee_id\t= ($mode == 'user') ? intval(array_shift($args)) : '';\n\t$forum_id\t\t= ($mode == 'mod') ? intval(array_shift($args)) : '';\n\t$topic_id\t\t= ($mode == 'mod') ? intval(array_shift($args)) : '';\n\t$action\t\t\t= array_shift($args);\n\t$data\t\t\t= (!sizeof($args)) ? '' : serialize($args);\n\n\t$sql_ary = array(\n\t\t'user_id'\t\t=> (empty($user->data)) ? ANONYMOUS : $user->data['user_id'],\n\t\t'log_ip'\t\t=> $user->ip,\n\t\t'log_time'\t\t=> time(),\n\t\t'log_operation'\t=> $action,\n\t\t'log_data'\t\t=> $data,\n\t);\n\n\tswitch ($mode)\n\t{\n\t\tcase 'admin':\n\t\t\t$sql_ary['log_type'] = LOG_ADMIN;\n\t\tbreak;\n\n\t\tcase 'mod':\n\t\t\t$sql_ary += array(\n\t\t\t\t'log_type'\t=> LOG_MOD,\n\t\t\t\t'forum_id'\t=> $forum_id,\n\t\t\t\t'topic_id'\t=> $topic_id\n\t\t\t);\n\t\tbreak;\n\n\t\tcase 'user':\n\t\t\t$sql_ary += array(\n\t\t\t\t'log_type'\t\t=> LOG_USERS,\n\t\t\t\t'reportee_id'\t=> $reportee_id\n\t\t\t);\n\t\tbreak;\n\n\t\tcase 'critical':\n\t\t\t$sql_ary['log_type'] = LOG_CRITICAL;\n\t\tbreak;\n\n\t\tdefault:\n\t\t\treturn false;\n\t}\n\n\t$db->sql_query('INSERT INTO ' . LOG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\treturn $db->sql_nextid();\n}\n\n/**\n* Return a nicely formatted backtrace.\n*\n* Turns the array returned by debug_backtrace() into HTML markup.\n* Also filters out absolute paths to phpBB root.\n*\n* @return string\tHTML markup\n*/\nfunction get_backtrace()\n{\n\t$output = '<div style=\"font-family: monospace;\">';\n\t$backtrace = debug_backtrace();\n\n\t// We skip the first one, because it only shows this file/function\n\tunset($backtrace[0]);\n\n\tforeach ($backtrace as $trace)\n\t{\n\t\t// Strip the current directory from path\n\t\t$trace['file'] = (empty($trace['file'])) ? '(not given by php)' : htmlspecialchars(phpbb_filter_root_path($trace['file']));\n\t\t$trace['line'] = (empty($trace['line'])) ? '(not given by php)' : $trace['line'];\n\n\t\t// Only show function arguments for include etc.\n\t\t// Other parameters may contain sensible information\n\t\t$argument = '';\n\t\tif (!empty($trace['args'][0]) && in_array($trace['function'], array('include', 'require', 'include_once', 'require_once')))\n\t\t{\n\t\t\t$argument = htmlspecialchars(phpbb_filter_root_path($trace['args'][0]));\n\t\t}\n\n\t\t$trace['class'] = (!isset($trace['class'])) ? '' : $trace['class'];\n\t\t$trace['type'] = (!isset($trace['type'])) ? '' : $trace['type'];\n\n\t\t$output .= '<br />';\n\t\t$output .= '<b>FILE:</b> ' . $trace['file'] . '<br />';\n\t\t$output .= '<b>LINE:</b> ' . ((!empty($trace['line'])) ? $trace['line'] : '') . '<br />';\n\n\t\t$output .= '<b>CALL:</b> ' . htmlspecialchars($trace['class'] . $trace['type'] . $trace['function']);\n\t\t$output .= '(' . (($argument !== '') ? \"'$argument'\" : '') . ')<br />';\n\t}\n\t$output .= '</div>';\n\treturn $output;\n}\n\n/**\n* This function returns a regular expression pattern for commonly used expressions\n* Use with / as delimiter for email mode and # for url modes\n* mode can be: email|bbcode_htm|url|url_inline|www_url|www_url_inline|relative_url|relative_url_inline|ipv4|ipv6\n*/\nfunction get_preg_expression($mode)\n{\n\tswitch ($mode)\n\t{\n\t\tcase 'email':\n\t\t\t// Regex written by James Watts and Francisco Jose Martin Moreno\n\t\t\t// http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n\t\t\treturn '([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*(?:[\\w\\!\\#$\\%\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]|&amp;)+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,63})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)';\n\t\tbreak;\n\n\t\tcase 'bbcode_htm':\n\t\t\treturn array(\n\t\t\t\t'#<!\\-\\- e \\-\\-><a href=\"mailto:(.*?)\">.*?</a><!\\-\\- e \\-\\->#',\n\t\t\t\t'#<!\\-\\- l \\-\\-><a (?:class=\"[\\w-]+\" )?href=\"(.*?)(?:(&amp;|\\?)sid=[0-9a-f]{32})?\">.*?</a><!\\-\\- l \\-\\->#',\n\t\t\t\t'#<!\\-\\- ([mw]) \\-\\-><a (?:class=\"[\\w-]+\" )?href=\"(.*?)\">.*?</a><!\\-\\- \\1 \\-\\->#',\n\t\t\t\t'#<!\\-\\- s(.*?) \\-\\-><img src=\"\\{SMILIES_PATH\\}\\/.*? \\/><!\\-\\- s\\1 \\-\\->#',\n\t\t\t\t'#<!\\-\\- .*? \\-\\->#s',\n\t\t\t\t'#<.*?>#s',\n\t\t\t);\n\t\tbreak;\n\n\t\t// Whoa these look impressive!\n\t\t// The code to generate the following two regular expressions which match valid IPv4/IPv6 addresses\n\t\t// can be found in the develop directory\n\t\tcase 'ipv4':\n\t\t\treturn '#^(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$#';\n\t\tbreak;\n\n\t\tcase 'ipv6':\n\t\t\treturn '#^(?:(?:(?:[\\dA-F]{1,4}:){6}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:::(?:[\\dA-F]{1,4}:){0,5}(?:[\\dA-F]{1,4}(?::[\\dA-F]{1,4})?|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:):(?:[\\dA-F]{1,4}:){4}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,2}:(?:[\\dA-F]{1,4}:){3}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,3}:(?:[\\dA-F]{1,4}:){2}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,4}:(?:[\\dA-F]{1,4}:)(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,5}:(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,6}:[\\dA-F]{1,4})|(?:(?:[\\dA-F]{1,4}:){1,7}:)|(?:::))$#i';\n\t\tbreak;\n\n\t\tcase 'url':\n\t\tcase 'url_inline':\n\t\t\t$inline = ($mode == 'url') ? ')' : '';\n\t\t\t$scheme = ($mode == 'url') ? '[a-z\\d+\\-.]' : '[a-z\\d+]'; // avoid automatic parsing of \"word\" in \"last word.http://...\"\n\t\t\t// generated with regex generation file in the develop folder\n\t\t\treturn \"[a-z]$scheme*:/{2}(?:(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})+|[0-9.]+|\\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\\])(?::\\d*)?(?:/(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*)*(?:\\?(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?(?:\\#(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?\";\n\t\tbreak;\n\n\t\tcase 'www_url':\n\t\tcase 'www_url_inline':\n\t\t\t$inline = ($mode == 'www_url') ? ')' : '';\n\t\t\treturn \"www\\.(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})+(?::\\d*)?(?:/(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*)*(?:\\?(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?(?:\\#(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?\";\n\t\tbreak;\n\n\t\tcase 'relative_url':\n\t\tcase 'relative_url_inline':\n\t\t\t$inline = ($mode == 'relative_url') ? ')' : '';\n\t\t\treturn \"(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*(?:/(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*)*(?:\\?(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?(?:\\#(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?\";\n\t\tbreak;\n\n\t\tcase 'table_prefix':\n\t\t\treturn '#^[a-zA-Z][a-zA-Z0-9_]*$#';\n\t\tbreak;\n\t}\n\n\treturn '';\n}\n\n/**\n* Generate regexp for naughty words censoring\n* Depends on whether installed PHP version supports unicode properties\n*\n* @param string\t$word\t\t\tword template to be replaced\n* @param bool\t$use_unicode\twhether or not to take advantage of PCRE supporting unicode\n*\n* @return string $preg_expr\t\tregex to use with word censor\n*/\nfunction get_censor_preg_expression($word, $use_unicode = true)\n{\n\tstatic $unicode_support = null;\n\n\t// Check whether PHP version supports unicode properties\n\tif (is_null($unicode_support))\n\t{\n\t\t$unicode_support = ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\\p{L}/u', 'a') !== false) ? true : false;\n\t}\n\n\t// Unescape the asterisk to simplify further conversions\n\t$word = str_replace('\\*', '*', preg_quote($word, '#'));\n\n\tif ($use_unicode && $unicode_support)\n\t{\n\t\t// Replace asterisk(s) inside the pattern, at the start and at the end of it with regexes\n\t\t$word = preg_replace(array('#(?<=[\\p{Nd}\\p{L}_])\\*+(?=[\\p{Nd}\\p{L}_])#iu', '#^\\*+#', '#\\*+$#'), array('([\\x20]*?|[\\p{Nd}\\p{L}_-]*?)', '[\\p{Nd}\\p{L}_-]*?', '[\\p{Nd}\\p{L}_-]*?'), $word);\n\n\t\t// Generate the final substitution\n\t\t$preg_expr = '#(?<![\\p{Nd}\\p{L}_-])(' . $word . ')(?![\\p{Nd}\\p{L}_-])#iu';\n\t}\n\telse\n\t{\n\t\t// Replace the asterisk inside the pattern, at the start and at the end of it with regexes\n\t\t$word = preg_replace(array('#(?<=\\S)\\*+(?=\\S)#iu', '#^\\*+#', '#\\*+$#'), array('(\\x20*?\\S*?)', '\\S*?', '\\S*?'), $word);\n\n\t\t// Generate the final substitution\n\t\t$preg_expr = '#(?<!\\S)(' . $word . ')(?!\\S)#iu';\n\t}\n\n\treturn $preg_expr;\n}\n\n/**\n* Returns the first block of the specified IPv6 address and as many additional\n* ones as specified in the length paramater.\n* If length is zero, then an empty string is returned.\n* If length is greater than 3 the complete IP will be returned\n*/\nfunction short_ipv6($ip, $length)\n{\n\tif ($length < 1)\n\t{\n\t\treturn '';\n\t}\n\n\t// extend IPv6 addresses\n\t$blocks = substr_count($ip, ':') + 1;\n\tif ($blocks < 9)\n\t{\n\t\t$ip = str_replace('::', ':' . str_repeat('0000:', 9 - $blocks), $ip);\n\t}\n\tif ($ip[0] == ':')\n\t{\n\t\t$ip = '0000' . $ip;\n\t}\n\tif ($length < 4)\n\t{\n\t\t$ip = implode(':', array_slice(explode(':', $ip), 0, 1 + $length));\n\t}\n\n\treturn $ip;\n}\n\n/**\n* Wrapper for php's checkdnsrr function.\n*\n* @param string $host\tFully-Qualified Domain Name\n* @param string $type\tResource record type to lookup\n*\t\t\t\t\t\tSupported types are: MX (default), A, AAAA, NS, TXT, CNAME\n*\t\t\t\t\t\tOther types may work or may not work\n*\n* @return mixed\t\ttrue if entry found,\n*\t\t\t\t\tfalse if entry not found,\n*\t\t\t\t\tnull if this function is not supported by this environment\n*\n* Since null can also be returned, you probably want to compare the result\n* with === true or === false,\n*\n* @author bantu\n*/\nfunction phpbb_checkdnsrr($host, $type = 'MX')\n{\n\t// The dot indicates to search the DNS root (helps those having DNS prefixes on the same domain)\n\tif (substr($host, -1) == '.')\n\t{\n\t\t$host_fqdn = $host;\n\t\t$host = substr($host, 0, -1);\n\t}\n\telse\n\t{\n\t\t$host_fqdn = $host . '.';\n\t}\n\t// $host\t\thas format\tsome.host.example.com\n\t// $host_fqdn\thas format\tsome.host.example.com.\n\n\t// If we're looking for an A record we can use gethostbyname()\n\tif ($type == 'A' && function_exists('gethostbyname'))\n\t{\n\t\treturn (@gethostbyname($host_fqdn) == $host_fqdn) ? false : true;\n\t}\n\n\t// checkdnsrr() is available on Windows since PHP 5.3,\n\t// but until 5.3.3 it only works for MX records\n\t// See: http://bugs.php.net/bug.php?id=51844\n\n\t// Call checkdnsrr() if\n\t// we're looking for an MX record or\n\t// we're not on Windows or\n\t// we're running a PHP version where #51844 has been fixed\n\n\t// checkdnsrr() supports AAAA since 5.0.0\n\t// checkdnsrr() supports TXT since 5.2.4\n\tif (\n\t\t($type == 'MX' || DIRECTORY_SEPARATOR != '\\\\' || version_compare(PHP_VERSION, '5.3.3', '>=')) &&\n\t\t($type != 'AAAA' || version_compare(PHP_VERSION, '5.0.0', '>=')) &&\n\t\t($type != 'TXT' || version_compare(PHP_VERSION, '5.2.4', '>=')) &&\n\t\tfunction_exists('checkdnsrr')\n\t)\n\t{\n\t\treturn checkdnsrr($host_fqdn, $type);\n\t}\n\n\t// dns_get_record() is available since PHP 5; since PHP 5.3 also on Windows,\n\t// but on Windows it does not work reliable for AAAA records before PHP 5.3.1\n\n\t// Call dns_get_record() if\n\t// we're not looking for an AAAA record or\n\t// we're not on Windows or\n\t// we're running a PHP version where AAAA lookups work reliable\n\tif (\n\t\t($type != 'AAAA' || DIRECTORY_SEPARATOR != '\\\\' || version_compare(PHP_VERSION, '5.3.1', '>=')) &&\n\t\tfunction_exists('dns_get_record')\n\t)\n\t{\n\t\t// dns_get_record() expects an integer as second parameter\n\t\t// We have to convert the string $type to the corresponding integer constant.\n\t\t$type_constant = 'DNS_' . $type;\n\t\t$type_param = (defined($type_constant)) ? constant($type_constant) : DNS_ANY;\n\n\t\t// dns_get_record() might throw E_WARNING and return false for records that do not exist\n\t\t$resultset = @dns_get_record($host_fqdn, $type_param);\n\n\t\tif (empty($resultset) || !is_array($resultset))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if ($type_param == DNS_ANY)\n\t\t{\n\t\t\t// $resultset is a non-empty array\n\t\t\treturn true;\n\t\t}\n\n\t\tforeach ($resultset as $result)\n\t\t{\n\t\t\tif (\n\t\t\t\tisset($result['host']) && $result['host'] == $host &&\n\t\t\t\tisset($result['type']) && $result['type'] == $type\n\t\t\t)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// If we're on Windows we can still try to call nslookup via exec() as a last resort\n\tif (DIRECTORY_SEPARATOR == '\\\\' && function_exists('exec'))\n\t{\n\t\t@exec('nslookup -type=' . escapeshellarg($type) . ' ' . escapeshellarg($host_fqdn), $output);\n\n\t\t// If output is empty, the nslookup failed\n\t\tif (empty($output))\n\t\t{\n\t\t\treturn NULL;\n\t\t}\n\n\t\tforeach ($output as $line)\n\t\t{\n\t\t\t$line = trim($line);\n\n\t\t\tif (empty($line))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Squash tabs and multiple whitespaces to a single whitespace.\n\t\t\t$line = preg_replace('/\\s+/', ' ', $line);\n\n\t\t\tswitch ($type)\n\t\t\t{\n\t\t\t\tcase 'MX':\n\t\t\t\t\tif (stripos($line, \"$host MX\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'NS':\n\t\t\t\t\tif (stripos($line, \"$host nameserver\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'TXT':\n\t\t\t\t\tif (stripos($line, \"$host text\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'CNAME':\n\t\t\t\t\tif (stripos($line, \"$host canonical name\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tcase 'AAAA':\n\t\t\t\t\t// AAAA records returned by nslookup on Windows XP/2003 have this format.\n\t\t\t\t\t// Later Windows versions use the A record format below for AAAA records.\n\t\t\t\t\tif (stripos($line, \"$host AAAA IPv6 address\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t// No break\n\n\t\t\t\tcase 'A':\n\t\t\t\t\tif (!empty($host_matches))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Second line\n\t\t\t\t\t\tif (stripos($line, \"Address: \") === 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$host_matches = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (stripos($line, \"Name: $host\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// First line\n\t\t\t\t\t\t$host_matches = true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\treturn NULL;\n}\n\n// Handler, header and footer\n\n/**\n* Error and message handler, call with trigger_error if reqd\n*/\nfunction msg_handler($errno, $msg_text, $errfile, $errline)\n{\n\tglobal $cache, $db, $auth, $template, $config, $user;\n\tglobal $phpEx, $phpbb_root_path, $msg_title, $msg_long_text;\n\n\t// Do not display notices if we suppress them via @\n\tif (error_reporting() == 0 && $errno != E_USER_ERROR && $errno != E_USER_WARNING && $errno != E_USER_NOTICE)\n\t{\n\t\treturn;\n\t}\n\n\t// Message handler is stripping text. In case we need it, we are possible to define long text...\n\tif (isset($msg_long_text) && $msg_long_text && !$msg_text)\n\t{\n\t\t$msg_text = $msg_long_text;\n\t}\n\n\tif (!defined('E_DEPRECATED'))\n\t{\n\t\tdefine('E_DEPRECATED', 8192);\n\t}\n\n\tswitch ($errno)\n\t{\n\t\tcase E_NOTICE:\n\t\tcase E_WARNING:\n\n\t\t\t// Check the error reporting level and return if the error level does not match\n\t\t\t// If DEBUG is defined the default level is E_ALL\n\t\t\tif (($errno & ((defined('DEBUG')) ? E_ALL : error_reporting())) == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (strpos($errfile, 'cache') === false && strpos($errfile, 'template.') === false)\n\t\t\t{\n\t\t\t\t$errfile = phpbb_filter_root_path($errfile);\n\t\t\t\t$msg_text = phpbb_filter_root_path($msg_text);\n\t\t\t\t$error_name = ($errno === E_WARNING) ? 'PHP Warning' : 'PHP Notice';\n\t\t\t\techo '<b>[phpBB Debug] ' . $error_name . '</b>: in file <b>' . $errfile . '</b> on line <b>' . $errline . '</b>: <b>' . $msg_text . '</b><br />' . \"\\n\";\n\n\t\t\t\t// we are writing an image - the user won't see the debug, so let's place it in the log\n\t\t\t\tif (defined('IMAGE_OUTPUT') || defined('IN_CRON'))\n\t\t\t\t{\n\t\t\t\t\tadd_log('critical', 'LOG_IMAGE_GENERATION_ERROR', $errfile, $errline, $msg_text);\n\t\t\t\t}\n\t\t\t\t// echo '<br /><br />BACKTRACE<br />' . get_backtrace() . '<br />' . \"\\n\";\n\t\t\t}\n\n\t\t\treturn;\n\n\t\tbreak;\n\n\t\tcase E_USER_ERROR:\n\n\t\t\tif (!empty($user) && !empty($user->lang))\n\t\t\t{\n\t\t\t\t$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;\n\t\t\t\t$msg_title = (!isset($msg_title)) ? $user->lang['GENERAL_ERROR'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);\n\n\t\t\t\t$l_return_index = sprintf($user->lang['RETURN_INDEX'], '<a href=\"' . $phpbb_root_path . '\">', '</a>');\n\t\t\t\t$l_notify = '';\n\n\t\t\t\tif (!empty($config['board_contact']))\n\t\t\t\t{\n\t\t\t\t\t$l_notify = '<p>' . sprintf($user->lang['NOTIFY_ADMIN_EMAIL'], $config['board_contact']) . '</p>';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$msg_title = 'General Error';\n\t\t\t\t$l_return_index = '<a href=\"' . $phpbb_root_path . '\">Return to index page</a>';\n\t\t\t\t$l_notify = '';\n\n\t\t\t\tif (!empty($config['board_contact']))\n\t\t\t\t{\n\t\t\t\t\t$l_notify = '<p>Please notify the board administrator or webmaster: <a href=\"mailto:' . $config['board_contact'] . '\">' . $config['board_contact'] . '</a></p>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$log_text = $msg_text;\n\t\t\t$backtrace = get_backtrace();\n\t\t\tif ($backtrace)\n\t\t\t{\n\t\t\t\t$log_text .= '<br /><br />BACKTRACE<br />' . $backtrace;\n\t\t\t}\n\n\t\t\tif (defined('IN_INSTALL') || defined('DEBUG_EXTRA') || isset($auth) && $auth->acl_get('a_'))\n\t\t\t{\n\t\t\t\t$msg_text = $log_text;\n\t\t\t}\n\n\t\t\tif ((defined('DEBUG') || defined('IN_CRON') || defined('IMAGE_OUTPUT')) && isset($db))\n\t\t\t{\n\t\t\t\t// let's avoid loops\n\t\t\t\t$db->sql_return_on_error(true);\n\t\t\t\tadd_log('critical', 'LOG_GENERAL_ERROR', $msg_title, $log_text);\n\t\t\t\t$db->sql_return_on_error(false);\n\t\t\t}\n\n\t\t\t// Do not send 200 OK, but service unavailable on errors\n\t\t\tsend_status_line(503, 'Service Unavailable');\n\n\t\t\tgarbage_collection();\n\n\t\t\t// Try to not call the adm page data...\n\n\t\t\techo '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">';\n\t\t\techo '<html xmlns=\"http://www.w3.org/1999/xhtml\" dir=\"ltr\">';\n\t\t\techo '<head>';\n\t\t\techo '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />';\n\t\t\techo '<title>' . $msg_title . '</title>';\n\t\t\techo '<style type=\"text/css\">' . \"\\n\" . '/* <![CDATA[ */' . \"\\n\";\n\t\t\techo '* { margin: 0; padding: 0; } html { font-size: 100%; height: 100%; margin-bottom: 1px; background-color: #E4EDF0; } body { font-family: \"Lucida Grande\", Verdana, Helvetica, Arial, sans-serif; color: #536482; background: #E4EDF0; font-size: 62.5%; margin: 0; } ';\n\t\t\techo 'a:link, a:active, a:visited { color: #006699; text-decoration: none; } a:hover { color: #DD6900; text-decoration: underline; } ';\n\t\t\techo '#wrap { padding: 0 20px 15px 20px; min-width: 615px; } #page-header { text-align: right; height: 40px; } #page-footer { clear: both; font-size: 1em; text-align: center; } ';\n\t\t\techo '.panel { margin: 4px 0; background-color: #FFFFFF; border: solid 1px  #A9B8C2; } ';\n\t\t\techo '#errorpage #page-header a { font-weight: bold; line-height: 6em; } #errorpage #content { padding: 10px; } #errorpage #content h1 { line-height: 1.2em; margin-bottom: 0; color: #DF075C; } ';\n\t\t\techo '#errorpage #content div { margin-top: 20px; margin-bottom: 5px; border-bottom: 1px solid #CCCCCC; padding-bottom: 5px; color: #333333; font: bold 1.2em \"Lucida Grande\", Arial, Helvetica, sans-serif; text-decoration: none; line-height: 120%; text-align: left; } ';\n\t\t\techo \"\\n\" . '/* ]]> */' . \"\\n\";\n\t\t\techo '</style>';\n\t\t\techo '</head>';\n\t\t\techo '<body id=\"errorpage\">';\n\t\t\techo '<div id=\"wrap\">';\n\t\t\techo '\t<div id=\"page-header\">';\n\t\t\techo '\t\t' . $l_return_index;\n\t\t\techo '\t</div>';\n\t\t\techo '\t<div id=\"acp\">';\n\t\t\techo '\t<div class=\"panel\">';\n\t\t\techo '\t\t<div id=\"content\">';\n\t\t\techo '\t\t\t<h1>' . $msg_title . '</h1>';\n\n\t\t\techo '\t\t\t<div>' . $msg_text . '</div>';\n\n\t\t\techo $l_notify;\n\n\t\t\techo '\t\t</div>';\n\t\t\techo '\t</div>';\n\t\t\techo '\t</div>';\n\t\t\techo '\t<div id=\"page-footer\">';\n\t\t\techo '\t\tPowered by <a href=\"https://www.phpbb.com/\">phpBB</a>&reg; Forum Software &copy; phpBB Group';\n\t\t\techo '\t</div>';\n\t\t\techo '</div>';\n\t\t\techo '</body>';\n\t\t\techo '</html>';\n\n\t\t\texit_handler();\n\n\t\t\t// On a fatal error (and E_USER_ERROR *is* fatal) we never want other scripts to continue and force an exit here.\n\t\t\texit;\n\t\tbreak;\n\n\t\tcase E_USER_WARNING:\n\t\tcase E_USER_NOTICE:\n\n\t\t\tdefine('IN_ERROR_HANDLER', true);\n\n\t\t\tif (empty($user->data))\n\t\t\t{\n\t\t\t\t$user->session_begin();\n\t\t\t}\n\n\t\t\t// We re-init the auth array to get correct results on login/logout\n\t\t\t$auth->acl($user->data);\n\n\t\t\tif (empty($user->lang))\n\t\t\t{\n\t\t\t\t$user->setup();\n\t\t\t}\n\n\t\t\tif ($msg_text == 'ERROR_NO_ATTACHMENT' || $msg_text == 'NO_FORUM' || $msg_text == 'NO_TOPIC' || $msg_text == 'NO_USER')\n\t\t\t{\n\t\t\t\tsend_status_line(404, 'Not Found');\n\t\t\t}\n\n\t\t\t$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;\n\t\t\t$msg_title = (!isset($msg_title)) ? $user->lang['INFORMATION'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);\n\n\t\t\tif (!defined('HEADER_INC'))\n\t\t\t{\n\t\t\t\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t\t\t\t{\n\t\t\t\t\tadm_page_header($msg_title);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpage_header($msg_title, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$template->set_filenames(array(\n\t\t\t\t'body' => 'message_body.html')\n\t\t\t);\n\n\t\t\t$template->assign_vars(array(\n\t\t\t\t'MESSAGE_TITLE'\t\t=> $msg_title,\n\t\t\t\t'MESSAGE_TEXT'\t\t=> $msg_text,\n\t\t\t\t'S_USER_WARNING'\t=> ($errno == E_USER_WARNING) ? true : false,\n\t\t\t\t'S_USER_NOTICE'\t\t=> ($errno == E_USER_NOTICE) ? true : false)\n\t\t\t);\n\n\t\t\t// We do not want the cron script to be called on error messages\n\t\t\tdefine('IN_CRON', true);\n\n\t\t\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t\t\t{\n\t\t\t\tadm_page_footer();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpage_footer();\n\t\t\t}\n\n\t\t\texit_handler();\n\t\tbreak;\n\n\t\t// PHP4 compatibility\n\t\tcase E_DEPRECATED:\n\t\t\treturn true;\n\t\tbreak;\n\t}\n\n\t// If we notice an error not handled here we pass this back to PHP by returning false\n\t// This may not work for all php versions\n\treturn false;\n}\n\n/**\n* Removes absolute path to phpBB root directory from error messages\n* and converts backslashes to forward slashes.\n*\n* @param string $errfile\tAbsolute file path\n*\t\t\t\t\t\t\t(e.g. /var/www/phpbb3/phpBB/includes/functions.php)\n*\t\t\t\t\t\t\tPlease note that if $errfile is outside of the phpBB root,\n*\t\t\t\t\t\t\tthe root path will not be found and can not be filtered.\n* @return string\t\t\tRelative file path\n*\t\t\t\t\t\t\t(e.g. /includes/functions.php)\n*/\nfunction phpbb_filter_root_path($errfile)\n{\n\tstatic $root_path;\n\n\tif (empty($root_path))\n\t{\n\t\t$root_path = phpbb_realpath(dirname(__FILE__) . '/../');\n\t}\n\n\treturn str_replace(array($root_path, '\\\\'), array('[ROOT]', '/'), $errfile);\n}\n\n/**\n* Queries the session table to get information about online guests\n* @param int $item_id Limits the search to the item with this id\n* @param string $item The name of the item which is stored in the session table as session_{$item}_id\n* @return int The number of active distinct guest sessions\n*/\nfunction obtain_guest_count($item_id = 0, $item = 'forum')\n{\n\tglobal $db, $config;\n\n\tif ($item_id)\n\t{\n\t\t$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;\n\t}\n\telse\n\t{\n\t\t$reading_sql = '';\n\t}\n\t$time = (time() - (intval($config['load_online_time']) * 60));\n\n\t// Get number of online guests\n\n\tif ($db->sql_layer === 'sqlite')\n\t{\n\t\t$sql = 'SELECT COUNT(session_ip) as num_guests\n\t\t\tFROM (\n\t\t\t\tSELECT DISTINCT s.session_ip\n\t\t\t\tFROM ' . SESSIONS_TABLE . ' s\n\t\t\t\tWHERE s.session_user_id = ' . ANONYMOUS . '\n\t\t\t\t\tAND s.session_time >= ' . ($time - ((int) ($time % 60))) .\n\t\t\t\t$reading_sql .\n\t\t\t')';\n\t}\n\telse\n\t{\n\t\t$sql = 'SELECT COUNT(DISTINCT s.session_ip) as num_guests\n\t\t\tFROM ' . SESSIONS_TABLE . ' s\n\t\t\tWHERE s.session_user_id = ' . ANONYMOUS . '\n\t\t\t\tAND s.session_time >= ' . ($time - ((int) ($time % 60))) .\n\t\t\t$reading_sql;\n\t}\n\t$result = $db->sql_query($sql);\n\t$guests_online = (int) $db->sql_fetchfield('num_guests');\n\t$db->sql_freeresult($result);\n\n\treturn $guests_online;\n}\n\n/**\n* Queries the session table to get information about online users\n* @param int $item_id Limits the search to the item with this id\n* @param string $item The name of the item which is stored in the session table as session_{$item}_id\n* @return array An array containing the ids of online, hidden and visible users, as well as statistical info\n*/\nfunction obtain_users_online($item_id = 0, $item = 'forum')\n{\n\tglobal $db, $config, $user;\n\n\t$reading_sql = '';\n\tif ($item_id !== 0)\n\t{\n\t\t$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;\n\t}\n\n\t$online_users = array(\n\t\t'online_users'\t\t\t=> array(),\n\t\t'hidden_users'\t\t\t=> array(),\n\t\t'total_online'\t\t\t=> 0,\n\t\t'visible_online'\t\t=> 0,\n\t\t'hidden_online'\t\t\t=> 0,\n\t\t'guests_online'\t\t\t=> 0,\n\t);\n\n\tif ($config['load_online_guests'])\n\t{\n\t\t$online_users['guests_online'] = obtain_guest_count($item_id, $item);\n\t}\n\n\t// a little discrete magic to cache this for 30 seconds\n\t$time = (time() - (intval($config['load_online_time']) * 60));\n\n\t$sql = 'SELECT s.session_user_id, s.session_ip, s.session_viewonline\n\t\tFROM ' . SESSIONS_TABLE . ' s\n\t\tWHERE s.session_time >= ' . ($time - ((int) ($time % 30))) .\n\t\t\t$reading_sql .\n\t\t' AND s.session_user_id <> ' . ANONYMOUS;\n\t$result = $db->sql_query($sql);\n\n\twhile ($row = $db->sql_fetchrow($result))\n\t{\n\t\t// Skip multiple sessions for one user\n\t\tif (!isset($online_users['online_users'][$row['session_user_id']]))\n\t\t{\n\t\t\t$online_users['online_users'][$row['session_user_id']] = (int) $row['session_user_id'];\n\t\t\tif ($row['session_viewonline'])\n\t\t\t{\n\t\t\t\t$online_users['visible_online']++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$online_users['hidden_users'][$row['session_user_id']] = (int) $row['session_user_id'];\n\t\t\t\t$online_users['hidden_online']++;\n\t\t\t}\n\t\t}\n\t}\n\t$online_users['total_online'] = $online_users['guests_online'] + $online_users['visible_online'] + $online_users['hidden_online'];\n\t$db->sql_freeresult($result);\n\n\treturn $online_users;\n}\n\n/**\n* Uses the result of obtain_users_online to generate a localized, readable representation.\n* @param mixed $online_users result of obtain_users_online - array with user_id lists for total, hidden and visible users, and statistics\n* @param int $item_id Indicate that the data is limited to one item and not global\n* @param string $item The name of the item which is stored in the session table as session_{$item}_id\n* @return array An array containing the string for output to the template\n*/\nfunction obtain_users_online_string($online_users, $item_id = 0, $item = 'forum')\n{\n\tglobal $config, $db, $user, $auth;\n\n\t$user_online_link = $online_userlist = '';\n\t// Need caps version of $item for language-strings\n\t$item_caps = strtoupper($item);\n\n\tif (sizeof($online_users['online_users']))\n\t{\n\t\t$sql = 'SELECT username, username_clean, user_id, user_type, user_allow_viewonline, user_colour\n\t\t\t\tFROM ' . USERS_TABLE . '\n\t\t\t\tWHERE ' . $db->sql_in_set('user_id', $online_users['online_users']) . '\n\t\t\t\tORDER BY username_clean ASC';\n\t\t$result = $db->sql_query($sql);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t// User is logged in and therefore not a guest\n\t\t\tif ($row['user_id'] != ANONYMOUS)\n\t\t\t{\n\t\t\t\tif (isset($online_users['hidden_users'][$row['user_id']]))\n\t\t\t\t{\n\t\t\t\t\t$row['username'] = '<em>' . $row['username'] . '</em>';\n\t\t\t\t}\n\n\t\t\t\tif (!isset($online_users['hidden_users'][$row['user_id']]) || $auth->acl_get('u_viewonline'))\n\t\t\t\t{\n\t\t\t\t\t$user_online_link = get_username_string(($row['user_type'] <> USER_IGNORE) ? 'full' : 'no_profile', $row['user_id'], $row['username'], $row['user_colour']);\n\t\t\t\t\t$online_userlist .= ($online_userlist != '') ? ', ' . $user_online_link : $user_online_link;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$db->sql_freeresult($result);\n\t}\n\n\tif (!$online_userlist)\n\t{\n\t\t$online_userlist = $user->lang['NO_ONLINE_USERS'];\n\t}\n\n\tif ($item_id === 0)\n\t{\n\t\t$online_userlist = $user->lang['REGISTERED_USERS'] . ' ' . $online_userlist;\n\t}\n\telse if ($config['load_online_guests'])\n\t{\n\t\t$l_online = ($online_users['guests_online'] === 1) ? $user->lang['BROWSING_' . $item_caps . '_GUEST'] : $user->lang['BROWSING_' . $item_caps . '_GUESTS'];\n\t\t$online_userlist = sprintf($l_online, $online_userlist, $online_users['guests_online']);\n\t}\n\telse\n\t{\n\t\t$online_userlist = sprintf($user->lang['BROWSING_' . $item_caps], $online_userlist);\n\t}\n\t// Build online listing\n\t$vars_online = array(\n\t\t'ONLINE'\t=> array('total_online', 'l_t_user_s', 0),\n\t\t'REG'\t\t=> array('visible_online', 'l_r_user_s', !$config['load_online_guests']),\n\t\t'HIDDEN'\t=> array('hidden_online', 'l_h_user_s', $config['load_online_guests']),\n\t\t'GUEST'\t\t=> array('guests_online', 'l_g_user_s', 0)\n\t);\n\n\tforeach ($vars_online as $l_prefix => $var_ary)\n\t{\n\t\tif ($var_ary[2])\n\t\t{\n\t\t\t$l_suffix = '_AND';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$l_suffix = '';\n\t\t}\n\t\tswitch ($online_users[$var_ary[0]])\n\t\t{\n\t\t\tcase 0:\n\t\t\t\t${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_ZERO_TOTAL' . $l_suffix];\n\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\t${$var_ary[1]} = $user->lang[$l_prefix . '_USER_TOTAL' . $l_suffix];\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_TOTAL' . $l_suffix];\n\t\t\tbreak;\n\t\t}\n\t}\n\tunset($vars_online);\n\n\t$l_online_users = sprintf($l_t_user_s, $online_users['total_online']);\n\t$l_online_users .= sprintf($l_r_user_s, $online_users['visible_online']);\n\t$l_online_users .= sprintf($l_h_user_s, $online_users['hidden_online']);\n\n\tif ($config['load_online_guests'])\n\t{\n\t\t$l_online_users .= sprintf($l_g_user_s, $online_users['guests_online']);\n\t}\n\n\n\n\treturn array(\n\t\t'online_userlist'\t=> $online_userlist,\n\t\t'l_online_users'\t=> $l_online_users,\n\t);\n}\n\n/**\n* Get option bitfield from custom data\n*\n* @param int\t$bit\t\tThe bit/value to get\n* @param int\t$data\t\tCurrent bitfield to check\n* @return bool\tReturns true if value of constant is set in bitfield, else false\n*/\nfunction phpbb_optionget($bit, $data)\n{\n\treturn ($data & 1 << (int) $bit) ? true : false;\n}\n\n/**\n* Set option bitfield\n*\n* @param int\t$bit\t\tThe bit/value to set/unset\n* @param bool\t$set\t\tTrue if option should be set, false if option should be unset.\n* @param int\t$data\t\tCurrent bitfield to change\n*\n* @return int\tThe new bitfield\n*/\nfunction phpbb_optionset($bit, $set, $data)\n{\n\tif ($set && !($data & 1 << $bit))\n\t{\n\t\t$data += 1 << $bit;\n\t}\n\telse if (!$set && ($data & 1 << $bit))\n\t{\n\t\t$data -= 1 << $bit;\n\t}\n\n\treturn $data;\n}\n\n/**\n* Login using http authenticate.\n*\n* @param array\t$param\t\tParameter array, see $param_defaults array.\n*\n* @return null\n*/\nfunction phpbb_http_login($param)\n{\n\tglobal $auth, $user;\n\tglobal $config;\n\n\t$param_defaults = array(\n\t\t'auth_message'\t=> '',\n\n\t\t'autologin'\t\t=> false,\n\t\t'viewonline'\t=> true,\n\t\t'admin'\t\t\t=> false,\n\t);\n\n\t// Overwrite default values with passed values\n\t$param = array_merge($param_defaults, $param);\n\n\t// User is already logged in\n\t// We will not overwrite his session\n\tif (!empty($user->data['is_registered']))\n\t{\n\t\treturn;\n\t}\n\n\t// $_SERVER keys to check\n\t$username_keys = array(\n\t\t'PHP_AUTH_USER',\n\t\t'Authorization',\n\t\t'REMOTE_USER', 'REDIRECT_REMOTE_USER',\n\t\t'HTTP_AUTHORIZATION', 'REDIRECT_HTTP_AUTHORIZATION',\n\t\t'REMOTE_AUTHORIZATION', 'REDIRECT_REMOTE_AUTHORIZATION',\n\t\t'AUTH_USER',\n\t);\n\n\t$password_keys = array(\n\t\t'PHP_AUTH_PW',\n\t\t'REMOTE_PASSWORD',\n\t\t'AUTH_PASSWORD',\n\t);\n\n\t$username = null;\n\tforeach ($username_keys as $k)\n\t{\n\t\tif (isset($_SERVER[$k]))\n\t\t{\n\t\t\t$username = $_SERVER[$k];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t$password = null;\n\tforeach ($password_keys as $k)\n\t{\n\t\tif (isset($_SERVER[$k]))\n\t\t{\n\t\t\t$password = $_SERVER[$k];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Decode encoded information (IIS, CGI, FastCGI etc.)\n\tif (!is_null($username) && is_null($password) && strpos($username, 'Basic ') === 0)\n\t{\n\t\tlist($username, $password) = explode(':', base64_decode(substr($username, 6)), 2);\n\t}\n\n\tif (!is_null($username) && !is_null($password))\n\t{\n\t\tset_var($username, $username, 'string', true);\n\t\tset_var($password, $password, 'string', true);\n\n\t\t$auth_result = $auth->login($username, $password, $param['autologin'], $param['viewonline'], $param['admin']);\n\n\t\tif ($auth_result['status'] == LOGIN_SUCCESS)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\telse if ($auth_result['status'] == LOGIN_ERROR_ATTEMPTS)\n\t\t{\n\t\t\tsend_status_line(401, 'Unauthorized');\n\n\t\t\ttrigger_error('NOT_AUTHORISED');\n\t\t}\n\t}\n\n\t// Prepend sitename to auth_message\n\t$param['auth_message'] = ($param['auth_message'] === '') ? $config['sitename'] : $config['sitename'] . ' - ' . $param['auth_message'];\n\n\t// We should probably filter out non-ASCII characters - RFC2616\n\t$param['auth_message'] = preg_replace('/[\\x80-\\xFF]/', '?', $param['auth_message']);\n\n\theader('WWW-Authenticate: Basic realm=\"' . $param['auth_message'] . '\"');\n\tsend_status_line(401, 'Unauthorized');\n\n\ttrigger_error('NOT_AUTHORISED');\n}\n\n/**\n* Generate page header\n*/\nfunction page_header($page_title = '', $display_online_list = true, $item_id = 0, $item = 'forum')\n{\n\tglobal $db, $config, $template, $SID, $_SID, $_EXTRA_URL, $user, $auth, $phpEx, $phpbb_root_path;\n\n\tif (defined('HEADER_INC'))\n\t{\n\t\treturn;\n\t}\n\n\tdefine('HEADER_INC', true);\n\n\t// gzip_compression\n\tif ($config['gzip_compress'])\n\t{\n\t\t// to avoid partially compressed output resulting in blank pages in\n\t\t// the browser or error messages, compression is disabled in a few cases:\n\t\t//\n\t\t// 1) if headers have already been sent, this indicates plaintext output\n\t\t//    has been started so further content must not be compressed\n\t\t// 2) the length of the current output buffer is non-zero. This means\n\t\t//    there is already some uncompressed content in this output buffer\n\t\t//    so further output must not be compressed\n\t\t// 3) if more than one level of output buffering is used because we\n\t\t//    cannot test all output buffer level content lengths. One level\n\t\t//    could be caused by php.ini output_buffering. Anything\n\t\t//    beyond that is manual, so the code wrapping phpBB in output buffering\n\t\t//    can easily compress the output itself.\n\t\t//\n\t\tif (@extension_loaded('zlib') && !headers_sent() && ob_get_level() <= 1 && ob_get_length() == 0)\n\t\t{\n\t\t\tob_start('ob_gzhandler');\n\t\t}\n\t}\n\n\t// Generate logged in/logged out status\n\tif ($user->data['user_id'] != ANONYMOUS)\n\t{\n\t\t$u_login_logout = append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=logout', true, $user->session_id);\n\t\t$l_login_logout = sprintf($user->lang['LOGOUT_USER'], $user->data['username']);\n\t}\n\telse\n\t{\n\t\t$u_login_logout = append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=login');\n\t\t$l_login_logout = $user->lang['LOGIN'];\n\t}\n\n\t// Last visit date/time\n\t$s_last_visit = ($user->data['user_id'] != ANONYMOUS) ? $user->format_date($user->data['session_last_visit']) : '';\n\n\t// Get users online list ... if required\n\t$l_online_users = $online_userlist = $l_online_record = $l_online_time = '';\n\n\tif ($config['load_online'] && $config['load_online_time'] && $display_online_list)\n\t{\n\t\t/**\n\t\t* Load online data:\n\t\t* For obtaining another session column use $item and $item_id in the function-parameter, whereby the column is session_{$item}_id.\n\t\t*/\n\t\t$item_id = max($item_id, 0);\n\n\t\t$online_users = obtain_users_online($item_id, $item);\n\t\t$user_online_strings = obtain_users_online_string($online_users, $item_id, $item);\n\n\t\t$l_online_users = $user_online_strings['l_online_users'];\n\t\t$online_userlist = $user_online_strings['online_userlist'];\n\t\t$total_online_users = $online_users['total_online'];\n\n\t\tif ($total_online_users > $config['record_online_users'])\n\t\t{\n\t\t\tset_config('record_online_users', $total_online_users, true);\n\t\t\tset_config('record_online_date', time(), true);\n\t\t}\n\n\t\t$l_online_record = sprintf($user->lang['RECORD_ONLINE_USERS'], $config['record_online_users'], $user->format_date($config['record_online_date'], false, true));\n\n\t\t$l_online_time = ($config['load_online_time'] == 1) ? 'VIEW_ONLINE_TIME' : 'VIEW_ONLINE_TIMES';\n\t\t$l_online_time = sprintf($user->lang[$l_online_time], $config['load_online_time']);\n\t}\n\n\t$l_privmsgs_text = $l_privmsgs_text_unread = '';\n\t$s_privmsg_new = false;\n\n\t// Obtain number of new private messages if user is logged in\n\tif (!empty($user->data['is_registered']))\n\t{\n\t\tif ($user->data['user_new_privmsg'])\n\t\t{\n\t\t\t$l_message_new = ($user->data['user_new_privmsg'] == 1) ? $user->lang['NEW_PM'] : $user->lang['NEW_PMS'];\n\t\t\t$l_privmsgs_text = sprintf($l_message_new, $user->data['user_new_privmsg']);\n\n\t\t\tif (!$user->data['user_last_privmsg'] || $user->data['user_last_privmsg'] > $user->data['session_last_visit'])\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . USERS_TABLE . '\n\t\t\t\t\tSET user_last_privmsg = ' . $user->data['session_last_visit'] . '\n\t\t\t\t\tWHERE user_id = ' . $user->data['user_id'];\n\t\t\t\t$db->sql_query($sql);\n\n\t\t\t\t$s_privmsg_new = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$s_privmsg_new = false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$l_privmsgs_text = $user->lang['NO_NEW_PM'];\n\t\t\t$s_privmsg_new = false;\n\t\t}\n\n\t\t$l_privmsgs_text_unread = '';\n\n\t\tif ($user->data['user_unread_privmsg'] && $user->data['user_unread_privmsg'] != $user->data['user_new_privmsg'])\n\t\t{\n\t\t\t$l_message_unread = ($user->data['user_unread_privmsg'] == 1) ? $user->lang['UNREAD_PM'] : $user->lang['UNREAD_PMS'];\n\t\t\t$l_privmsgs_text_unread = sprintf($l_message_unread, $user->data['user_unread_privmsg']);\n\t\t}\n\t}\n\n\t$forum_id = request_var('f', 0);\n\t$topic_id = request_var('t', 0);\n\n\t$s_feed_news = false;\n\n\t// Get option for news\n\tif ($config['feed_enable'])\n\t{\n\t\t$sql = 'SELECT forum_id\n\t\t\tFROM ' . FORUMS_TABLE . '\n\t\t\tWHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');\n\t\t$result = $db->sql_query_limit($sql, 1, 0, 600);\n\t\t$s_feed_news = (int) $db->sql_fetchfield('forum_id');\n\t\t$db->sql_freeresult($result);\n\t}\n\n\t// Determine board url - we may need it later\n\t$board_url = generate_board_url() . '/';\n\t$web_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? $board_url : $phpbb_root_path;\n\n\t// Which timezone?\n\t$tz = ($user->data['user_id'] != ANONYMOUS) ? strval(doubleval($user->data['user_timezone'])) : strval(doubleval($config['board_timezone']));\n\n\t// Send a proper content-language to the output\n\t$user_lang = $user->lang['USER_LANG'];\n\tif (strpos($user_lang, '-x-') !== false)\n\t{\n\t\t$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));\n\t}\n\n\t$s_search_hidden_fields = array();\n\tif ($_SID)\n\t{\n\t\t$s_search_hidden_fields['sid'] = $_SID;\n\t}\n\n\tif (!empty($_EXTRA_URL))\n\t{\n\t\tforeach ($_EXTRA_URL as $url_param)\n\t\t{\n\t\t\t$url_param = explode('=', $url_param, 2);\n\t\t\t$s_search_hidden_fields[$url_param[0]] = $url_param[1];\n\t\t}\n\t}\n\n\t// The following assigns all _common_ variables that may be used at any point in a template.\n\t$template->assign_vars(array(\n\t\t'SITENAME'\t\t\t\t\t\t=> $config['sitename'],\n\t\t'SITE_DESCRIPTION'\t\t\t\t=> $config['site_desc'],\n\t\t'PAGE_TITLE'\t\t\t\t\t=> $page_title,\n\t\t'SCRIPT_NAME'\t\t\t\t\t=> str_replace('.' . $phpEx, '', $user->page['page_name']),\n\t\t'LAST_VISIT_DATE'\t\t\t\t=> sprintf($user->lang['YOU_LAST_VISIT'], $s_last_visit),\n\t\t'LAST_VISIT_YOU'\t\t\t\t=> $s_last_visit,\n\t\t'CURRENT_TIME'\t\t\t\t\t=> sprintf($user->lang['CURRENT_TIME'], $user->format_date(time(), false, true)),\n\t\t'TOTAL_USERS_ONLINE'\t\t\t=> $l_online_users,\n\t\t'LOGGED_IN_USER_LIST'\t\t\t=> $online_userlist,\n\t\t'RECORD_USERS'\t\t\t\t\t=> $l_online_record,\n\t\t'PRIVATE_MESSAGE_INFO'\t\t\t=> $l_privmsgs_text,\n\t\t'PRIVATE_MESSAGE_INFO_UNREAD'\t=> $l_privmsgs_text_unread,\n\n\t\t'S_USER_NEW_PRIVMSG'\t\t\t=> $user->data['user_new_privmsg'],\n\t\t'S_USER_UNREAD_PRIVMSG'\t\t\t=> $user->data['user_unread_privmsg'],\n\t\t'S_USER_NEW'\t\t\t\t\t=> $user->data['user_new'],\n\n\t\t'SID'\t\t\t\t=> $SID,\n\t\t'_SID'\t\t\t\t=> $_SID,\n\t\t'SESSION_ID'\t\t=> $user->session_id,\n\t\t'ROOT_PATH'\t\t\t=> $phpbb_root_path,\n\t\t'BOARD_URL'\t\t\t=> $board_url,\n\n\t\t'L_LOGIN_LOGOUT'\t=> $l_login_logout,\n\t\t'L_INDEX'\t\t\t=> $user->lang['FORUM_INDEX'],\n\t\t'L_ONLINE_EXPLAIN'\t=> $l_online_time,\n\n\t\t'U_PRIVATEMSGS'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;folder=inbox'),\n\t\t'U_RETURN_INBOX'\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;folder=inbox'),\n\t\t'U_POPUP_PM'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;mode=popup'),\n\t\t'UA_POPUP_PM'\t\t\t=> addslashes(append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;mode=popup')),\n\t\t'U_MEMBERLIST'\t\t\t=> append_sid(\"{$phpbb_root_path}memberlist.$phpEx\"),\n\t\t'U_VIEWONLINE'\t\t\t=> ($auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')) ? append_sid(\"{$phpbb_root_path}viewonline.$phpEx\") : '',\n\t\t'U_LOGIN_LOGOUT'\t\t=> $u_login_logout,\n\t\t'U_INDEX'\t\t\t\t=> append_sid(\"{$phpbb_root_path}index.$phpEx\"),\n\t\t'U_SEARCH'\t\t\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\"),\n\t\t'U_REGISTER'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=register'),\n\t\t'U_PROFILE'\t\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\"),\n\t\t'U_MODCP'\t\t\t\t=> append_sid(\"{$phpbb_root_path}mcp.$phpEx\", false, true, $user->session_id),\n\t\t'U_FAQ'\t\t\t\t\t=> append_sid(\"{$phpbb_root_path}faq.$phpEx\"),\n\t\t'U_SEARCH_SELF'\t\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=egosearch'),\n\t\t'U_SEARCH_NEW'\t\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=newposts'),\n\t\t'U_SEARCH_UNANSWERED'\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=unanswered'),\n\t\t'U_SEARCH_UNREAD'\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=unreadposts'),\n\t\t'U_SEARCH_ACTIVE_TOPICS'=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=active_topics'),\n\t\t'U_DELETE_COOKIES'\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=delete_cookies'),\n\t\t'U_TEAM'\t\t\t\t=> ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')) ? '' : append_sid(\"{$phpbb_root_path}memberlist.$phpEx\", 'mode=leaders'),\n\t\t'U_TERMS_USE'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=terms'),\n\t\t'U_PRIVACY'\t\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=privacy'),\n\t\t'U_RESTORE_PERMISSIONS'\t=> ($user->data['user_perm_from'] && $auth->acl_get('a_switchperm')) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=restore_perm') : '',\n\t\t'U_FEED'\t\t\t\t=> generate_board_url() . \"/feed.$phpEx\",\n\n\t\t'S_USER_LOGGED_IN'\t\t=> ($user->data['user_id'] != ANONYMOUS) ? true : false,\n\t\t'S_AUTOLOGIN_ENABLED'\t=> ($config['allow_autologin']) ? true : false,\n\t\t'S_BOARD_DISABLED'\t\t=> ($config['board_disable']) ? true : false,\n\t\t'S_REGISTERED_USER'\t\t=> (!empty($user->data['is_registered'])) ? true : false,\n\t\t'S_IS_BOT'\t\t\t\t=> (!empty($user->data['is_bot'])) ? true : false,\n\t\t'S_USER_PM_POPUP'\t\t=> $user->optionget('popuppm'),\n\t\t'S_USER_LANG'\t\t\t=> $user_lang,\n\t\t'S_USER_BROWSER'\t\t=> (isset($user->data['session_browser'])) ? $user->data['session_browser'] : $user->lang['UNKNOWN_BROWSER'],\n\t\t'S_USERNAME'\t\t\t=> $user->data['username'],\n\t\t'S_CONTENT_DIRECTION'\t=> $user->lang['DIRECTION'],\n\t\t'S_CONTENT_FLOW_BEGIN'\t=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',\n\t\t'S_CONTENT_FLOW_END'\t=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',\n\t\t'S_CONTENT_ENCODING'\t=> 'UTF-8',\n\t\t'S_TIMEZONE'\t\t\t=> ($user->data['user_dst'] || ($user->data['user_id'] == ANONYMOUS && $config['board_dst'])) ? sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], $user->lang['tz']['dst']) : sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], ''),\n\t\t'S_DISPLAY_ONLINE_LIST'\t=> ($l_online_time) ? 1 : 0,\n\t\t'S_DISPLAY_SEARCH'\t\t=> (!$config['load_search']) ? 0 : (isset($auth) ? ($auth->acl_get('u_search') && $auth->acl_getf_global('f_search')) : 1),\n\t\t'S_DISPLAY_PM'\t\t\t=> ($config['allow_privmsg'] && !empty($user->data['is_registered']) && ($auth->acl_get('u_readpm') || $auth->acl_get('u_sendpm'))) ? true : false,\n\t\t'S_DISPLAY_MEMBERLIST'\t=> (isset($auth)) ? $auth->acl_get('u_viewprofile') : 0,\n\t\t'S_NEW_PM'\t\t\t\t=> ($s_privmsg_new) ? 1 : 0,\n\t\t'S_REGISTER_ENABLED'\t=> ($config['require_activation'] != USER_ACTIVATION_DISABLE) ? true : false,\n\t\t'S_FORUM_ID'\t\t\t=> $forum_id,\n\t\t'S_TOPIC_ID'\t\t\t=> $topic_id,\n\n\t\t'S_LOGIN_ACTION'\t\t=> ((!defined('ADMIN_START')) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=login') : append_sid(\"index.$phpEx\", false, true, $user->session_id)),\n\t\t'S_LOGIN_REDIRECT'\t\t=> build_hidden_fields(array('redirect' => build_url())),\n\n\t\t'S_ENABLE_FEEDS'\t\t\t=> ($config['feed_enable']) ? true : false,\n\t\t'S_ENABLE_FEEDS_OVERALL'\t=> ($config['feed_overall']) ? true : false,\n\t\t'S_ENABLE_FEEDS_FORUMS'\t\t=> ($config['feed_overall_forums']) ? true : false,\n\t\t'S_ENABLE_FEEDS_TOPICS'\t\t=> ($config['feed_topics_new']) ? true : false,\n\t\t'S_ENABLE_FEEDS_TOPICS_ACTIVE'\t=> ($config['feed_topics_active']) ? true : false,\n\t\t'S_ENABLE_FEEDS_NEWS'\t\t=> ($s_feed_news) ? true : false,\n\n\t\t'S_LOAD_UNREADS'\t\t\t=> ($config['load_unreads_search'] && ($config['load_anon_lastread'] || $user->data['is_registered'])) ? true : false,\n\n\t\t'S_SEARCH_HIDDEN_FIELDS'\t=> build_hidden_fields($s_search_hidden_fields),\n\n\t\t'T_THEME_PATH'\t\t\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['theme_path']) . '/theme',\n\t\t'T_TEMPLATE_PATH'\t\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['template_path']) . '/template',\n\t\t'T_SUPER_TEMPLATE_PATH'\t=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? \"{$web_path}styles/\" . rawurlencode($user->theme['template_inherit_path']) . '/template' : \"{$web_path}styles/\" . rawurlencode($user->theme['template_path']) . '/template',\n\t\t'T_IMAGESET_PATH'\t\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['imageset_path']) . '/imageset',\n\t\t'T_IMAGESET_LANG_PATH'\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['imageset_path']) . '/imageset/' . $user->lang_name,\n\t\t'T_IMAGES_PATH'\t\t\t=> \"{$web_path}images/\",\n\t\t'T_SMILIES_PATH'\t\t=> \"{$web_path}{$config['smilies_path']}/\",\n\t\t'T_AVATAR_PATH'\t\t\t=> \"{$web_path}{$config['avatar_path']}/\",\n\t\t'T_AVATAR_GALLERY_PATH'\t=> \"{$web_path}{$config['avatar_gallery_path']}/\",\n\t\t'T_ICONS_PATH'\t\t\t=> \"{$web_path}{$config['icons_path']}/\",\n\t\t'T_RANKS_PATH'\t\t\t=> \"{$web_path}{$config['ranks_path']}/\",\n\t\t'T_UPLOAD_PATH'\t\t\t=> \"{$web_path}{$config['upload_path']}/\",\n\t\t'T_STYLESHEET_LINK'\t\t=> (!$user->theme['theme_storedb']) ? \"{$web_path}styles/\" . rawurlencode($user->theme['theme_path']) . '/theme/stylesheet.css' : append_sid(\"{$phpbb_root_path}style.$phpEx\", 'id=' . $user->theme['style_id'] . '&amp;lang=' . $user->lang_name),\n\t\t'T_STYLESHEET_NAME'\t\t=> $user->theme['theme_name'],\n\n\t\t'T_THEME_NAME'\t\t\t=> rawurlencode($user->theme['theme_path']),\n\t\t'T_TEMPLATE_NAME'\t\t=> rawurlencode($user->theme['template_path']),\n\t\t'T_SUPER_TEMPLATE_NAME'\t=> rawurlencode((isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? $user->theme['template_inherit_path'] : $user->theme['template_path']),\n\t\t'T_IMAGESET_NAME'\t\t=> rawurlencode($user->theme['imageset_path']),\n\t\t'T_IMAGESET_LANG_NAME'\t=> $user->data['user_lang'],\n\t\t'T_IMAGES'\t\t\t\t=> 'images',\n\t\t'T_SMILIES'\t\t\t\t=> $config['smilies_path'],\n\t\t'T_AVATAR'\t\t\t\t=> $config['avatar_path'],\n\t\t'T_AVATAR_GALLERY'\t\t=> $config['avatar_gallery_path'],\n\t\t'T_ICONS'\t\t\t\t=> $config['icons_path'],\n\t\t'T_RANKS'\t\t\t\t=> $config['ranks_path'],\n\t\t'T_UPLOAD'\t\t\t\t=> $config['upload_path'],\n\n\t\t'SITE_LOGO_IMG'\t\t\t=> $user->img('site_logo'),\n\n\t\t'A_COOKIE_SETTINGS'\t\t=> addslashes('; path=' . $config['cookie_path'] . ((!$config['cookie_domain'] || $config['cookie_domain'] == 'localhost' || $config['cookie_domain'] == '127.0.0.1') ? '' : '; domain=' . $config['cookie_domain']) . ((!$config['cookie_secure']) ? '' : '; secure')),\n\t));\n\n\t// application/xhtml+xml not used because of IE\n\theader('Content-type: text/html; charset=UTF-8');\n\n\theader('Cache-Control: private, no-cache=\"set-cookie\"');\n\theader('Expires: 0');\n\theader('Pragma: no-cache');\n\n\tif (!empty($user->data['is_bot']))\n\t{\n\t\t// Let reverse proxies know we detected a bot.\n\t\theader('X-PHPBB-IS-BOT: yes');\n\t}\n\n\treturn;\n}\n\n/**\n* Generate page footer\n*/\nfunction page_footer($run_cron = true)\n{\n\tglobal $db, $config, $template, $user, $auth, $cache, $starttime, $phpbb_root_path, $phpEx;\n\n\t// Output page creation time\n\tif (defined('DEBUG'))\n\t{\n\t\t$mtime = explode(' ', microtime());\n\t\t$totaltime = $mtime[0] + $mtime[1] - $starttime;\n\n\t\tif (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))\n\t\t{\n\t\t\t$db->sql_report('display');\n\t\t}\n\n\t\t$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress'] && @extension_loaded('zlib')) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);\n\n\t\tif ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))\n\t\t{\n\t\t\tif (function_exists('memory_get_usage'))\n\t\t\t{\n\t\t\t\tif ($memory_usage = memory_get_usage())\n\t\t\t\t{\n\t\t\t\t\tglobal $base_memory_usage;\n\t\t\t\t\t$memory_usage -= $base_memory_usage;\n\t\t\t\t\t$memory_usage = get_formatted_filesize($memory_usage);\n\n\t\t\t\t\t$debug_output .= ' | Memory Usage: ' . $memory_usage;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$debug_output .= ' | <a href=\"' . build_url() . '&amp;explain=1\">Explain</a>';\n\t\t}\n\t}\n\n\t$template->assign_vars(array(\n\t\t'DEBUG_OUTPUT'\t\t\t=> (defined('DEBUG')) ? $debug_output : '',\n\t\t'TRANSLATION_INFO'\t\t=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',\n\t\t'CREDIT_LINE'\t\t\t=> $user->lang('POWERED_BY', '<a href=\"https://www.phpbb.com/\">phpBB</a>&reg; Forum Software &copy; phpBB Group'),\n\n\t\t'U_ACP' => ($auth->acl_get('a_') && !empty($user->data['is_registered'])) ? append_sid(\"{$phpbb_root_path}adm/index.$phpEx\", false, true, $user->session_id) : '')\n\t);\n\n\t// Call cron-type script\n\t$call_cron = false;\n\tif (!defined('IN_CRON') && $run_cron && !$config['board_disable'] && !$user->data['is_bot'])\n\t{\n\t\t$call_cron = true;\n\t\t$time_now = (!empty($user->time_now) && is_int($user->time_now)) ? $user->time_now : time();\n\n\t\t// Any old lock present?\n\t\tif (!empty($config['cron_lock']))\n\t\t{\n\t\t\t$cron_time = explode(' ', $config['cron_lock']);\n\n\t\t\t// If 1 hour lock is present we do not call cron.php\n\t\t\tif ($cron_time[0] + 3600 >= $time_now)\n\t\t\t{\n\t\t\t\t$call_cron = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Call cron job?\n\tif ($call_cron)\n\t{\n\t\t$cron_type = '';\n\n\t\tif ($time_now - $config['queue_interval'] > $config['last_queue_run'] && !defined('IN_ADMIN') && file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))\n\t\t{\n\t\t\t// Process email queue\n\t\t\t$cron_type = 'queue';\n\t\t}\n\t\telse if (method_exists($cache, 'tidy') && $time_now - $config['cache_gc'] > $config['cache_last_gc'])\n\t\t{\n\t\t\t// Tidy the cache\n\t\t\t$cron_type = 'tidy_cache';\n\t\t}\n\t\telse if ($config['warnings_expire_days'] && ($time_now - $config['warnings_gc'] > $config['warnings_last_gc']))\n\t\t{\n\t\t\t$cron_type = 'tidy_warnings';\n\t\t}\n\t\telse if ($time_now - $config['database_gc'] > $config['database_last_gc'])\n\t\t{\n\t\t\t// Tidy the database\n\t\t\t$cron_type = 'tidy_database';\n\t\t}\n\t\telse if ($time_now - $config['search_gc'] > $config['search_last_gc'])\n\t\t{\n\t\t\t// Tidy the search\n\t\t\t$cron_type = 'tidy_search';\n\t\t}\n\t\telse if ($time_now - $config['session_gc'] > $config['session_last_gc'])\n\t\t{\n\t\t\t$cron_type = 'tidy_sessions';\n\t\t}\n\n\t\tif ($cron_type)\n\t\t{\n\t\t\t$template->assign_var('RUN_CRON_TASK', '<img src=\"' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=' . $cron_type) . '\" width=\"1\" height=\"1\" alt=\"cron\" />');\n\t\t}\n\t}\n\n\t$template->display('body');\n\n\tgarbage_collection();\n\texit_handler();\n}\n\n/**\n* Closing the cache object and the database\n* Cool function name, eh? We might want to add operations to it later\n*/\nfunction garbage_collection()\n{\n\tglobal $cache, $db;\n\n\t// Unload cache, must be done before the DB connection if closed\n\tif (!empty($cache))\n\t{\n\t\t$cache->unload();\n\t}\n\n\t// Close our DB connection.\n\tif (!empty($db))\n\t{\n\t\t$db->sql_close();\n\t}\n}\n\n/**\n* Handler for exit calls in phpBB.\n* This function supports hooks.\n*\n* Note: This function is called after the template has been outputted.\n*/\nfunction exit_handler()\n{\n\tglobal $phpbb_hook, $config;\n\n\tif (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))\n\t{\n\t\tif ($phpbb_hook->hook_return(__FUNCTION__))\n\t\t{\n\t\t\treturn $phpbb_hook->hook_return_result(__FUNCTION__);\n\t\t}\n\t}\n\n\t// As a pre-caution... some setups display a blank page if the flush() is not there.\n\t(ob_get_level() > 0) ? @ob_flush() : @flush();\n\n\texit;\n}\n\n/**\n* Handler for init calls in phpBB. This function is called in user::setup();\n* This function supports hooks.\n*/\nfunction phpbb_user_session_handler()\n{\n\tglobal $phpbb_hook;\n\n\tif (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))\n\t{\n\t\tif ($phpbb_hook->hook_return(__FUNCTION__))\n\t\t{\n\t\t\treturn $phpbb_hook->hook_return_result(__FUNCTION__);\n\t\t}\n\t}\n\n\treturn;\n}\n\n?>", "<?php\n/**\n*\n* @package testing\n* @copyright (c) 2008 phpBB Group\n* @license http://opensource.org/licenses/gpl-2.0.php GNU General Public License v2\n*\n*/\n\nrequire_once dirname(__FILE__) . '/base.php';\n\nrequire_once dirname(__FILE__) . '/../../phpBB/includes/functions.php';\nrequire_once dirname(__FILE__) . '/../../phpBB/includes/session.php';\n\nclass phpbb_security_redirect_test extends phpbb_security_test_base\n{\n\tstatic public function provider()\n\t{\n\t\t// array(Input -> redirect(), expected triggered error (else false), expected returned result url (else false))\n\t\treturn array(\n\t\t\tarray('data://x', false, 'http://localhost/phpBB'),\n\t\t\tarray('bad://localhost/phpBB/index.php', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('http://www.otherdomain.com/somescript.php', false, 'http://localhost/phpBB'),\n\t\t\tarray(\"http://localhost/phpBB/memberlist.php\\n\\rConnection: close\", 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('javascript:test', false, 'http://localhost/phpBB/../javascript:test'),\n\t\t\tarray('http://localhost/phpBB/index.php;url=', 'Tried to redirect to potentially insecure url.', false),\n\t\t);\n\t}\n\n\tprotected function setUp()\n\t{\n\t\tparent::setUp();\n\t\t\n\t\t$GLOBALS['config'] = array(\n\t\t\t'force_server_vars'\t=> '0',\n\t\t);\n\t}\n\n\t/**\n\t* @dataProvider provider\n\t*/\n\tpublic function test_redirect($test, $expected_error, $expected_result)\n\t{\n\t\tglobal $user;\n\n\t\tif ($expected_error !== false)\n\t\t{\n\t\t\t$this->setExpectedTriggerError(E_USER_ERROR, $expected_error);\n\t\t}\n\n\t\t$result = redirect($test, true);\n\n\t\t// only verify result if we did not expect an error\n\t\tif ($expected_error === false)\n\t\t{\n\t\t\t$this->assertEquals($expected_result, $result);\n\t\t}\n\t}\n}\n\n"], "fixing_code": ["<?php\n/**\n*\n* @package phpBB3\n* @version $Id$\n* @copyright (c) 2005 phpBB Group\n* @license http://opensource.org/licenses/gpl-license.php GNU Public License\n*\n*/\n\n/**\n* @ignore\n*/\nif (!defined('IN_PHPBB'))\n{\n\texit;\n}\n\n// Common global functions\n\n/**\n* set_var\n*\n* Set variable, used by {@link request_var the request_var function}\n*\n* @access private\n*/\nfunction set_var(&$result, $var, $type, $multibyte = false)\n{\n\tsettype($var, $type);\n\t$result = $var;\n\n\tif ($type == 'string')\n\t{\n\t\t$result = trim(htmlspecialchars(str_replace(array(\"\\r\\n\", \"\\r\", \"\\0\"), array(\"\\n\", \"\\n\", ''), $result), ENT_COMPAT, 'UTF-8'));\n\n\t\tif (!empty($result))\n\t\t{\n\t\t\t// Make sure multibyte characters are wellformed\n\t\t\tif ($multibyte)\n\t\t\t{\n\t\t\t\tif (!preg_match('/^./u', $result))\n\t\t\t\t{\n\t\t\t\t\t$result = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// no multibyte, allow only ASCII (0-127)\n\t\t\t\t$result = preg_replace('/[\\x80-\\xFF]/', '?', $result);\n\t\t\t}\n\t\t}\n\n\t\t$result = (STRIP) ? stripslashes($result) : $result;\n\t}\n}\n\n/**\n* request_var\n*\n* Used to get passed variable\n*/\nfunction request_var($var_name, $default, $multibyte = false, $cookie = false)\n{\n\tif (!$cookie && isset($_COOKIE[$var_name]))\n\t{\n\t\tif (!isset($_GET[$var_name]) && !isset($_POST[$var_name]))\n\t\t{\n\t\t\treturn (is_array($default)) ? array() : $default;\n\t\t}\n\t\t$_REQUEST[$var_name] = isset($_POST[$var_name]) ? $_POST[$var_name] : $_GET[$var_name];\n\t}\n\n\t$super_global = ($cookie) ? '_COOKIE' : '_REQUEST';\n\tif (!isset($GLOBALS[$super_global][$var_name]) || is_array($GLOBALS[$super_global][$var_name]) != is_array($default))\n\t{\n\t\treturn (is_array($default)) ? array() : $default;\n\t}\n\n\t$var = $GLOBALS[$super_global][$var_name];\n\tif (!is_array($default))\n\t{\n\t\t$type = gettype($default);\n\t}\n\telse\n\t{\n\t\tlist($key_type, $type) = each($default);\n\t\t$type = gettype($type);\n\t\t$key_type = gettype($key_type);\n\t\tif ($type == 'array')\n\t\t{\n\t\t\treset($default);\n\t\t\t$default = current($default);\n\t\t\tlist($sub_key_type, $sub_type) = each($default);\n\t\t\t$sub_type = gettype($sub_type);\n\t\t\t$sub_type = ($sub_type == 'array') ? 'NULL' : $sub_type;\n\t\t\t$sub_key_type = gettype($sub_key_type);\n\t\t}\n\t}\n\n\tif (is_array($var))\n\t{\n\t\t$_var = $var;\n\t\t$var = array();\n\n\t\tforeach ($_var as $k => $v)\n\t\t{\n\t\t\tset_var($k, $k, $key_type);\n\t\t\tif ($type == 'array' && is_array($v))\n\t\t\t{\n\t\t\t\tforeach ($v as $_k => $_v)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($_v))\n\t\t\t\t\t{\n\t\t\t\t\t\t$_v = null;\n\t\t\t\t\t}\n\t\t\t\t\tset_var($_k, $_k, $sub_key_type, $multibyte);\n\t\t\t\t\tset_var($var[$k][$_k], $_v, $sub_type, $multibyte);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($type == 'array' || is_array($v))\n\t\t\t\t{\n\t\t\t\t\t$v = null;\n\t\t\t\t}\n\t\t\t\tset_var($var[$k], $v, $type, $multibyte);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tset_var($var, $var, $type, $multibyte);\n\t}\n\n\treturn $var;\n}\n\n/**\n* Sets a configuration option's value.\n*\n* Please note that this function does not update the is_dynamic value for\n* an already existing config option.\n*\n* @param string $config_name   The configuration option's name\n* @param string $config_value  New configuration value\n* @param bool   $is_dynamic    Whether this variable should be cached (false) or\n*                              if it changes too frequently (true) to be\n*                              efficiently cached.\n*\n* @return null\n*/\nfunction set_config($config_name, $config_value, $is_dynamic = false)\n{\n\tglobal $db, $cache, $config;\n\n\t$sql = 'UPDATE ' . CONFIG_TABLE . \"\n\t\tSET config_value = '\" . $db->sql_escape($config_value) . \"'\n\t\tWHERE config_name = '\" . $db->sql_escape($config_name) . \"'\";\n\t$db->sql_query($sql);\n\n\tif (!$db->sql_affectedrows() && !isset($config[$config_name]))\n\t{\n\t\t$sql = 'INSERT INTO ' . CONFIG_TABLE . ' ' . $db->sql_build_array('INSERT', array(\n\t\t\t'config_name'\t=> $config_name,\n\t\t\t'config_value'\t=> $config_value,\n\t\t\t'is_dynamic'\t=> ($is_dynamic) ? 1 : 0));\n\t\t$db->sql_query($sql);\n\t}\n\n\t$config[$config_name] = $config_value;\n\n\tif (!$is_dynamic)\n\t{\n\t\t$cache->destroy('config');\n\t}\n}\n\n/**\n* Increments an integer config value directly in the database.\n*\n* @param string $config_name   The configuration option's name\n* @param int    $increment     Amount to increment by\n* @param bool   $is_dynamic    Whether this variable should be cached (false) or\n*                              if it changes too frequently (true) to be\n*                              efficiently cached.\n*\n* @return null\n*/\nfunction set_config_count($config_name, $increment, $is_dynamic = false)\n{\n\tglobal $db, $cache;\n\n\tswitch ($db->sql_layer)\n\t{\n\t\tcase 'firebird':\n\t\t\t// Precision must be from 1 to 18\n\t\t\t$sql_update = 'CAST(CAST(config_value as DECIMAL(18, 0)) + ' . (int) $increment . ' as VARCHAR(255))';\n\t\tbreak;\n\n\t\tcase 'postgres':\n\t\t\t// Need to cast to text first for PostgreSQL 7.x\n\t\t\t$sql_update = 'CAST(CAST(config_value::text as DECIMAL(255, 0)) + ' . (int) $increment . ' as VARCHAR(255))';\n\t\tbreak;\n\n\t\t// MySQL, SQlite, mssql, mssql_odbc, oracle\n\t\tdefault:\n\t\t\t$sql_update = 'config_value + ' . (int) $increment;\n\t\tbreak;\n\t}\n\n\t$db->sql_query('UPDATE ' . CONFIG_TABLE . ' SET config_value = ' . $sql_update . \" WHERE config_name = '\" . $db->sql_escape($config_name) . \"'\");\n\n\tif (!$is_dynamic)\n\t{\n\t\t$cache->destroy('config');\n\t}\n}\n\n/**\n* Generates an alphanumeric random string of given length\n*\n* @return string\n*/\nfunction gen_rand_string($num_chars = 8)\n{\n\t// [a, z] + [0, 9] = 36\n\treturn substr(strtoupper(base_convert(unique_id(), 16, 36)), 0, $num_chars);\n}\n\n/**\n* Generates a user-friendly alphanumeric random string of given length\n* We remove 0 and O so users cannot confuse those in passwords etc.\n*\n* @return string\n*/\nfunction gen_rand_string_friendly($num_chars = 8)\n{\n\t$rand_str = unique_id();\n\n\t// Remove Z and Y from the base_convert(), replace 0 with Z and O with Y\n\t// [a, z] + [0, 9] - {z, y} = [a, z] + [0, 9] - {0, o} = 34\n\t$rand_str = str_replace(array('0', 'O'), array('Z', 'Y'), strtoupper(base_convert($rand_str, 16, 34)));\n\n\treturn substr($rand_str, 0, $num_chars);\n}\n\n/**\n* Return unique id\n* @param string $extra additional entropy\n*/\nfunction unique_id($extra = 'c')\n{\n\tstatic $dss_seeded = false;\n\tglobal $config;\n\n\t$val = $config['rand_seed'] . microtime();\n\t$val = md5($val);\n\t$config['rand_seed'] = md5($config['rand_seed'] . $val . $extra);\n\n\tif ($dss_seeded !== true && ($config['rand_seed_last_update'] < time() - rand(1,10)))\n\t{\n\t\tset_config('rand_seed_last_update', time(), true);\n\t\tset_config('rand_seed', $config['rand_seed'], true);\n\t\t$dss_seeded = true;\n\t}\n\n\treturn substr($val, 4, 16);\n}\n\n/**\n* Wrapper for mt_rand() which allows swapping $min and $max parameters.\n*\n* PHP does not allow us to swap the order of the arguments for mt_rand() anymore.\n* (since PHP 5.3.4, see http://bugs.php.net/46587)\n*\n* @param int $min\t\tLowest value to be returned\n* @param int $max\t\tHighest value to be returned\n*\n* @return int\t\t\tRandom integer between $min and $max (or $max and $min)\n*/\nfunction phpbb_mt_rand($min, $max)\n{\n\treturn ($min > $max) ? mt_rand($max, $min) : mt_rand($min, $max);\n}\n\n/**\n* Wrapper for getdate() which returns the equivalent array for UTC timestamps.\n*\n* @param int $time\t\tUnix timestamp (optional)\n*\n* @return array\t\t\tReturns an associative array of information related to the timestamp.\n*\t\t\t\t\t\tSee http://www.php.net/manual/en/function.getdate.php\n*/\nfunction phpbb_gmgetdate($time = false)\n{\n\tif ($time === false)\n\t{\n\t\t$time = time();\n\t}\n\n\t// getdate() interprets timestamps in local time.\n\t// What follows uses the fact that getdate() and\n\t// date('Z') balance each other out.\n\treturn getdate($time - date('Z'));\n}\n\n/**\n* Return formatted string for filesizes\n*\n* @param mixed\t$value\t\t\tfilesize in bytes\n*\t\t\t\t\t\t\t\t(non-negative number; int, float or string)\n* @param bool\t$string_only\ttrue if language string should be returned\n* @param array\t$allowed_units\tonly allow these units (data array indexes)\n*\n* @return mixed\t\t\t\t\tdata array if $string_only is false\n* @author bantu\n*/\nfunction get_formatted_filesize($value, $string_only = true, $allowed_units = false)\n{\n\tglobal $user;\n\n\t$available_units = array(\n\t\t'tb' => array(\n\t\t\t'min' \t\t=> 1099511627776, // pow(2, 40)\n\t\t\t'index'\t\t=> 4,\n\t\t\t'si_unit'\t=> 'TB',\n\t\t\t'iec_unit'\t=> 'TIB',\n\t\t),\n\t\t'gb' => array(\n\t\t\t'min' \t\t=> 1073741824, // pow(2, 30)\n\t\t\t'index'\t\t=> 3,\n\t\t\t'si_unit'\t=> 'GB',\n\t\t\t'iec_unit'\t=> 'GIB',\n\t\t),\n\t\t'mb' => array(\n\t\t\t'min'\t\t=> 1048576, // pow(2, 20)\n\t\t\t'index'\t\t=> 2,\n\t\t\t'si_unit'\t=> 'MB',\n\t\t\t'iec_unit'\t=> 'MIB',\n\t\t),\n\t\t'kb' => array(\n\t\t\t'min'\t\t=> 1024, // pow(2, 10)\n\t\t\t'index'\t\t=> 1,\n\t\t\t'si_unit'\t=> 'KB',\n\t\t\t'iec_unit'\t=> 'KIB',\n\t\t),\n\t\t'b' => array(\n\t\t\t'min'\t\t=> 0,\n\t\t\t'index'\t\t=> 0,\n\t\t\t'si_unit'\t=> 'BYTES', // Language index\n\t\t\t'iec_unit'\t=> 'BYTES',  // Language index\n\t\t),\n\t);\n\n\tforeach ($available_units as $si_identifier => $unit_info)\n\t{\n\t\tif (!empty($allowed_units) && $si_identifier != 'b' && !in_array($si_identifier, $allowed_units))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ($value >= $unit_info['min'])\n\t\t{\n\t\t\t$unit_info['si_identifier'] = $si_identifier;\n\n\t\t\tbreak;\n\t\t}\n\t}\n\tunset($available_units);\n\n\tfor ($i = 0; $i < $unit_info['index']; $i++)\n\t{\n\t\t$value /= 1024;\n\t}\n\t$value = round($value, 2);\n\n\t// Lookup units in language dictionary\n\t$unit_info['si_unit'] = (isset($user->lang[$unit_info['si_unit']])) ? $user->lang[$unit_info['si_unit']] : $unit_info['si_unit'];\n\t$unit_info['iec_unit'] = (isset($user->lang[$unit_info['iec_unit']])) ? $user->lang[$unit_info['iec_unit']] : $unit_info['iec_unit'];\n\n\t// Default to IEC\n\t$unit_info['unit'] = $unit_info['iec_unit'];\n\n\tif (!$string_only)\n\t{\n\t\t$unit_info['value'] = $value;\n\n\t\treturn $unit_info;\n\t}\n\n\treturn $value  . ' ' . $unit_info['unit'];\n}\n\n/**\n* Determine whether we are approaching the maximum execution time. Should be called once\n* at the beginning of the script in which it's used.\n* @return\tbool\tEither true if the maximum execution time is nearly reached, or false\n*\t\t\t\t\tif some time is still left.\n*/\nfunction still_on_time($extra_time = 15)\n{\n\tstatic $max_execution_time, $start_time;\n\n\t$time = explode(' ', microtime());\n\t$current_time = $time[0] + $time[1];\n\n\tif (empty($max_execution_time))\n\t{\n\t\t$max_execution_time = (function_exists('ini_get')) ? (int) @ini_get('max_execution_time') : (int) @get_cfg_var('max_execution_time');\n\n\t\t// If zero, then set to something higher to not let the user catch the ten seconds barrier.\n\t\tif ($max_execution_time === 0)\n\t\t{\n\t\t\t$max_execution_time = 50 + $extra_time;\n\t\t}\n\n\t\t$max_execution_time = min(max(10, ($max_execution_time - $extra_time)), 50);\n\n\t\t// For debugging purposes\n\t\t// $max_execution_time = 10;\n\n\t\tglobal $starttime;\n\t\t$start_time = (empty($starttime)) ? $current_time : $starttime;\n\t}\n\n\treturn (ceil($current_time - $start_time) < $max_execution_time) ? true : false;\n}\n\n/**\n*\n* @version Version 0.1 / slightly modified for phpBB 3.0.x (using $H$ as hash type identifier)\n*\n* Portable PHP password hashing framework.\n*\n* Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in\n* the public domain.\n*\n* There's absolutely no warranty.\n*\n* The homepage URL for this framework is:\n*\n*\thttp://www.openwall.com/phpass/\n*\n* Please be sure to update the Version line if you edit this file in any way.\n* It is suggested that you leave the main version number intact, but indicate\n* your project name (after the slash) and add your own revision information.\n*\n* Please do not change the \"private\" password hashing method implemented in\n* here, thereby making your hashes incompatible.  However, if you must, please\n* change the hash type identifier (the \"$P$\") to something different.\n*\n* Obviously, since this code is in the public domain, the above are not\n* requirements (there can be none), but merely suggestions.\n*\n*\n* Hash the password\n*/\nfunction phpbb_hash($password)\n{\n\t$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n\t$random_state = unique_id();\n\t$random = '';\n\t$count = 6;\n\n\tif (($fh = @fopen('/dev/urandom', 'rb')))\n\t{\n\t\t$random = fread($fh, $count);\n\t\tfclose($fh);\n\t}\n\n\tif (strlen($random) < $count)\n\t{\n\t\t$random = '';\n\n\t\tfor ($i = 0; $i < $count; $i += 16)\n\t\t{\n\t\t\t$random_state = md5(unique_id() . $random_state);\n\t\t\t$random .= pack('H*', md5($random_state));\n\t\t}\n\t\t$random = substr($random, 0, $count);\n\t}\n\n\t$hash = _hash_crypt_private($password, _hash_gensalt_private($random, $itoa64), $itoa64);\n\n\tif (strlen($hash) == 34)\n\t{\n\t\treturn $hash;\n\t}\n\n\treturn md5($password);\n}\n\n/**\n* Check for correct password\n*\n* @param string $password The password in plain text\n* @param string $hash The stored password hash\n*\n* @return bool Returns true if the password is correct, false if not.\n*/\nfunction phpbb_check_hash($password, $hash)\n{\n\tif (strlen($password) > 4096)\n\t{\n\t\t// If the password is too huge, we will simply reject it\n\t\t// and not let the server try to hash it.\n\t\treturn false;\n\t}\n\n\t$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\tif (strlen($hash) == 34)\n\t{\n\t\treturn (_hash_crypt_private($password, $hash, $itoa64) === $hash) ? true : false;\n\t}\n\n\treturn (md5($password) === $hash) ? true : false;\n}\n\n/**\n* Generate salt for hash generation\n*/\nfunction _hash_gensalt_private($input, &$itoa64, $iteration_count_log2 = 6)\n{\n\tif ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)\n\t{\n\t\t$iteration_count_log2 = 8;\n\t}\n\n\t$output = '$H$';\n\t$output .= $itoa64[min($iteration_count_log2 + ((PHP_VERSION >= 5) ? 5 : 3), 30)];\n\t$output .= _hash_encode64($input, 6, $itoa64);\n\n\treturn $output;\n}\n\n/**\n* Encode hash\n*/\nfunction _hash_encode64($input, $count, &$itoa64)\n{\n\t$output = '';\n\t$i = 0;\n\n\tdo\n\t{\n\t\t$value = ord($input[$i++]);\n\t\t$output .= $itoa64[$value & 0x3f];\n\n\t\tif ($i < $count)\n\t\t{\n\t\t\t$value |= ord($input[$i]) << 8;\n\t\t}\n\n\t\t$output .= $itoa64[($value >> 6) & 0x3f];\n\n\t\tif ($i++ >= $count)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\tif ($i < $count)\n\t\t{\n\t\t\t$value |= ord($input[$i]) << 16;\n\t\t}\n\n\t\t$output .= $itoa64[($value >> 12) & 0x3f];\n\n\t\tif ($i++ >= $count)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\t$output .= $itoa64[($value >> 18) & 0x3f];\n\t}\n\twhile ($i < $count);\n\n\treturn $output;\n}\n\n/**\n* The crypt function/replacement\n*/\nfunction _hash_crypt_private($password, $setting, &$itoa64)\n{\n\t$output = '*';\n\n\t// Check for correct hash\n\tif (substr($setting, 0, 3) != '$H$' && substr($setting, 0, 3) != '$P$')\n\t{\n\t\treturn $output;\n\t}\n\n\t$count_log2 = strpos($itoa64, $setting[3]);\n\n\tif ($count_log2 < 7 || $count_log2 > 30)\n\t{\n\t\treturn $output;\n\t}\n\n\t$count = 1 << $count_log2;\n\t$salt = substr($setting, 4, 8);\n\n\tif (strlen($salt) != 8)\n\t{\n\t\treturn $output;\n\t}\n\n\t/**\n\t* We're kind of forced to use MD5 here since it's the only\n\t* cryptographic primitive available in all versions of PHP\n\t* currently in use.  To implement our own low-level crypto\n\t* in PHP would result in much worse performance and\n\t* consequently in lower iteration counts and hashes that are\n\t* quicker to crack (by non-PHP code).\n\t*/\n\tif (PHP_VERSION >= 5)\n\t{\n\t\t$hash = md5($salt . $password, true);\n\t\tdo\n\t\t{\n\t\t\t$hash = md5($hash . $password, true);\n\t\t}\n\t\twhile (--$count);\n\t}\n\telse\n\t{\n\t\t$hash = pack('H*', md5($salt . $password));\n\t\tdo\n\t\t{\n\t\t\t$hash = pack('H*', md5($hash . $password));\n\t\t}\n\t\twhile (--$count);\n\t}\n\n\t$output = substr($setting, 0, 12);\n\t$output .= _hash_encode64($hash, 16, $itoa64);\n\n\treturn $output;\n}\n\n/**\n* Hashes an email address to a big integer\n*\n* @param string $email\t\tEmail address\n*\n* @return string\t\t\tUnsigned Big Integer\n*/\nfunction phpbb_email_hash($email)\n{\n\treturn sprintf('%u', crc32(strtolower($email))) . strlen($email);\n}\n\n/**\n* Wrapper for version_compare() that allows using uppercase A and B\n* for alpha and beta releases.\n*\n* See http://www.php.net/manual/en/function.version-compare.php\n*\n* @param string $version1\t\tFirst version number\n* @param string $version2\t\tSecond version number\n* @param string $operator\t\tComparison operator (optional)\n*\n* @return mixed\t\t\t\t\tBoolean (true, false) if comparison operator is specified.\n*\t\t\t\t\t\t\t\tInteger (-1, 0, 1) otherwise.\n*/\nfunction phpbb_version_compare($version1, $version2, $operator = null)\n{\n\t$version1 = strtolower($version1);\n\t$version2 = strtolower($version2);\n\n\tif (is_null($operator))\n\t{\n\t\treturn version_compare($version1, $version2);\n\t}\n\telse\n\t{\n\t\treturn version_compare($version1, $version2, $operator);\n\t}\n}\n\n/**\n* Global function for chmodding directories and files for internal use\n*\n* This function determines owner and group whom the file belongs to and user and group of PHP and then set safest possible file permissions.\n* The function determines owner and group from common.php file and sets the same to the provided file.\n* The function uses bit fields to build the permissions.\n* The function sets the appropiate execute bit on directories.\n*\n* Supported constants representing bit fields are:\n*\n* CHMOD_ALL - all permissions (7)\n* CHMOD_READ - read permission (4)\n* CHMOD_WRITE - write permission (2)\n* CHMOD_EXECUTE - execute permission (1)\n*\n* NOTE: The function uses POSIX extension and fileowner()/filegroup() functions. If any of them is disabled, this function tries to build proper permissions, by calling is_readable() and is_writable() functions.\n*\n* @param string\t$filename\tThe file/directory to be chmodded\n* @param int\t$perms\t\tPermissions to set\n*\n* @return bool\ttrue on success, otherwise false\n* @author faw, phpBB Group\n*/\nfunction phpbb_chmod($filename, $perms = CHMOD_READ)\n{\n\tstatic $_chmod_info;\n\n\t// Return if the file no longer exists.\n\tif (!file_exists($filename))\n\t{\n\t\treturn false;\n\t}\n\n\t// Determine some common vars\n\tif (empty($_chmod_info))\n\t{\n\t\tif (!function_exists('fileowner') || !function_exists('filegroup'))\n\t\t{\n\t\t\t// No need to further determine owner/group - it is unknown\n\t\t\t$_chmod_info['process'] = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tglobal $phpbb_root_path, $phpEx;\n\n\t\t\t// Determine owner/group of common.php file and the filename we want to change here\n\t\t\t$common_php_owner = @fileowner($phpbb_root_path . 'common.' . $phpEx);\n\t\t\t$common_php_group = @filegroup($phpbb_root_path . 'common.' . $phpEx);\n\n\t\t\t// And the owner and the groups PHP is running under.\n\t\t\t$php_uid = (function_exists('posix_getuid')) ? @posix_getuid() : false;\n\t\t\t$php_gids = (function_exists('posix_getgroups')) ? @posix_getgroups() : false;\n\n\t\t\t// If we are unable to get owner/group, then do not try to set them by guessing\n\t\t\tif (!$php_uid || empty($php_gids) || !$common_php_owner || !$common_php_group)\n\t\t\t{\n\t\t\t\t$_chmod_info['process'] = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$_chmod_info = array(\n\t\t\t\t\t'process'\t\t=> true,\n\t\t\t\t\t'common_owner'\t=> $common_php_owner,\n\t\t\t\t\t'common_group'\t=> $common_php_group,\n\t\t\t\t\t'php_uid'\t\t=> $php_uid,\n\t\t\t\t\t'php_gids'\t\t=> $php_gids,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($_chmod_info['process'])\n\t{\n\t\t$file_uid = @fileowner($filename);\n\t\t$file_gid = @filegroup($filename);\n\n\t\t// Change owner\n\t\tif (@chown($filename, $_chmod_info['common_owner']))\n\t\t{\n\t\t\tclearstatcache();\n\t\t\t$file_uid = @fileowner($filename);\n\t\t}\n\n\t\t// Change group\n\t\tif (@chgrp($filename, $_chmod_info['common_group']))\n\t\t{\n\t\t\tclearstatcache();\n\t\t\t$file_gid = @filegroup($filename);\n\t\t}\n\n\t\t// If the file_uid/gid now match the one from common.php we can process further, else we are not able to change something\n\t\tif ($file_uid != $_chmod_info['common_owner'] || $file_gid != $_chmod_info['common_group'])\n\t\t{\n\t\t\t$_chmod_info['process'] = false;\n\t\t}\n\t}\n\n\t// Still able to process?\n\tif ($_chmod_info['process'])\n\t{\n\t\tif ($file_uid == $_chmod_info['php_uid'])\n\t\t{\n\t\t\t$php = 'owner';\n\t\t}\n\t\telse if (in_array($file_gid, $_chmod_info['php_gids']))\n\t\t{\n\t\t\t$php = 'group';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Since we are setting the everyone bit anyway, no need to do expensive operations\n\t\t\t$_chmod_info['process'] = false;\n\t\t}\n\t}\n\n\t// We are not able to determine or change something\n\tif (!$_chmod_info['process'])\n\t{\n\t\t$php = 'other';\n\t}\n\n\t// Owner always has read/write permission\n\t$owner = CHMOD_READ | CHMOD_WRITE;\n\tif (is_dir($filename))\n\t{\n\t\t$owner |= CHMOD_EXECUTE;\n\n\t\t// Only add execute bit to the permission if the dir needs to be readable\n\t\tif ($perms & CHMOD_READ)\n\t\t{\n\t\t\t$perms |= CHMOD_EXECUTE;\n\t\t}\n\t}\n\n\tswitch ($php)\n\t{\n\t\tcase 'owner':\n\t\t\t$result = @chmod($filename, ($owner << 6) + (0 << 3) + (0 << 0));\n\n\t\t\tclearstatcache();\n\n\t\t\tif (is_readable($filename) && phpbb_is_writable($filename))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tcase 'group':\n\t\t\t$result = @chmod($filename, ($owner << 6) + ($perms << 3) + (0 << 0));\n\n\t\t\tclearstatcache();\n\n\t\t\tif ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tcase 'other':\n\t\t\t$result = @chmod($filename, ($owner << 6) + ($perms << 3) + ($perms << 0));\n\n\t\t\tclearstatcache();\n\n\t\t\tif ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn false;\n\t\tbreak;\n\t}\n\n\treturn $result;\n}\n\n/**\n* Test if a file/directory is writable\n*\n* This function calls the native is_writable() when not running under\n* Windows and it is not disabled.\n*\n* @param string $file Path to perform write test on\n* @return bool True when the path is writable, otherwise false.\n*/\nfunction phpbb_is_writable($file)\n{\n\tif (strtolower(substr(PHP_OS, 0, 3)) === 'win' || !function_exists('is_writable'))\n\t{\n\t\tif (file_exists($file))\n\t\t{\n\t\t\t// Canonicalise path to absolute path\n\t\t\t$file = phpbb_realpath($file);\n\n\t\t\tif (is_dir($file))\n\t\t\t{\n\t\t\t\t// Test directory by creating a file inside the directory\n\t\t\t\t$result = @tempnam($file, 'i_w');\n\n\t\t\t\tif (is_string($result) && file_exists($result))\n\t\t\t\t{\n\t\t\t\t\tunlink($result);\n\n\t\t\t\t\t// Ensure the file is actually in the directory (returned realpathed)\n\t\t\t\t\treturn (strpos($result, $file) === 0) ? true : false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$handle = @fopen($file, 'r+');\n\n\t\t\t\tif (is_resource($handle))\n\t\t\t\t{\n\t\t\t\t\tfclose($handle);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// file does not exist test if we can write to the directory\n\t\t\t$dir = dirname($file);\n\n\t\t\tif (file_exists($dir) && is_dir($dir) && phpbb_is_writable($dir))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn is_writable($file);\n\t}\n}\n\n// Compatibility functions\n\nif (!function_exists('array_combine'))\n{\n\t/**\n\t* A wrapper for the PHP5 function array_combine()\n\t* @param array $keys contains keys for the resulting array\n\t* @param array $values contains values for the resulting array\n\t*\n\t* @return Returns an array by using the values from the keys array as keys and the\n\t* \tvalues from the values array as the corresponding values. Returns false if the\n\t* \tnumber of elements for each array isn't equal or if the arrays are empty.\n\t*/\n\tfunction array_combine($keys, $values)\n\t{\n\t\t$keys = array_values($keys);\n\t\t$values = array_values($values);\n\n\t\t$n = sizeof($keys);\n\t\t$m = sizeof($values);\n\t\tif (!$n || !$m || ($n != $m))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$combined = array();\n\t\tfor ($i = 0; $i < $n; $i++)\n\t\t{\n\t\t\t$combined[$keys[$i]] = $values[$i];\n\t\t}\n\t\treturn $combined;\n\t}\n}\n\nif (!function_exists('str_split'))\n{\n\t/**\n\t* A wrapper for the PHP5 function str_split()\n\t* @param array $string contains the string to be converted\n\t* @param array $split_length contains the length of each chunk\n\t*\n\t* @return  Converts a string to an array. If the optional split_length parameter is specified,\n\t*  \tthe returned array will be broken down into chunks with each being split_length in length,\n\t*  \totherwise each chunk will be one character in length. FALSE is returned if split_length is\n\t*  \tless than 1. If the split_length length exceeds the length of string, the entire string is\n\t*  \treturned as the first (and only) array element.\n\t*/\n\tfunction str_split($string, $split_length = 1)\n\t{\n\t\tif ($split_length < 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if ($split_length >= strlen($string))\n\t\t{\n\t\t\treturn array($string);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpreg_match_all('#.{1,' . $split_length . '}#s', $string, $matches);\n\t\t\treturn $matches[0];\n\t\t}\n\t}\n}\n\nif (!function_exists('stripos'))\n{\n\t/**\n\t* A wrapper for the PHP5 function stripos\n\t* Find position of first occurrence of a case-insensitive string\n\t*\n\t* @param string $haystack is the string to search in\n\t* @param string $needle is the string to search for\n\t*\n\t* @return mixed Returns the numeric position of the first occurrence of needle in the haystack string. Unlike strpos(), stripos() is case-insensitive.\n\t* Note that the needle may be a string of one or more characters.\n\t* If needle is not found, stripos() will return boolean FALSE.\n\t*/\n\tfunction stripos($haystack, $needle)\n\t{\n\t\tif (preg_match('#' . preg_quote($needle, '#') . '#i', $haystack, $m))\n\t\t{\n\t\t\treturn strpos($haystack, $m[0]);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n* Checks if a path ($path) is absolute or relative\n*\n* @param string $path Path to check absoluteness of\n* @return boolean\n*/\nfunction is_absolute($path)\n{\n\treturn (isset($path[0]) && $path[0] == '/' || preg_match('#^[a-z]:[/\\\\\\]#i', $path)) ? true : false;\n}\n\n/**\n* @author Chris Smith <chris@project-minerva.org>\n* @copyright 2006 Project Minerva Team\n* @param string $path The path which we should attempt to resolve.\n* @return mixed\n*/\nfunction phpbb_own_realpath($path)\n{\n\t// Now to perform funky shizzle\n\n\t// Switch to use UNIX slashes\n\t$path = str_replace(DIRECTORY_SEPARATOR, '/', $path);\n\t$path_prefix = '';\n\n\t// Determine what sort of path we have\n\tif (is_absolute($path))\n\t{\n\t\t$absolute = true;\n\n\t\tif ($path[0] == '/')\n\t\t{\n\t\t\t// Absolute path, *NIX style\n\t\t\t$path_prefix = '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Absolute path, Windows style\n\t\t\t// Remove the drive letter and colon\n\t\t\t$path_prefix = $path[0] . ':';\n\t\t\t$path = substr($path, 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Relative Path\n\t\t// Prepend the current working directory\n\t\tif (function_exists('getcwd'))\n\t\t{\n\t\t\t// This is the best method, hopefully it is enabled!\n\t\t\t$path = str_replace(DIRECTORY_SEPARATOR, '/', getcwd()) . '/' . $path;\n\t\t\t$absolute = true;\n\t\t\tif (preg_match('#^[a-z]:#i', $path))\n\t\t\t{\n\t\t\t\t$path_prefix = $path[0] . ':';\n\t\t\t\t$path = substr($path, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$path_prefix = '';\n\t\t\t}\n\t\t}\n\t\telse if (isset($_SERVER['SCRIPT_FILENAME']) && !empty($_SERVER['SCRIPT_FILENAME']))\n\t\t{\n\t\t\t// Warning: If chdir() has been used this will lie!\n\t\t\t// Warning: This has some problems sometime (CLI can create them easily)\n\t\t\t$path = str_replace(DIRECTORY_SEPARATOR, '/', dirname($_SERVER['SCRIPT_FILENAME'])) . '/' . $path;\n\t\t\t$absolute = true;\n\t\t\t$path_prefix = '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// We have no way of getting the absolute path, just run on using relative ones.\n\t\t\t$absolute = false;\n\t\t\t$path_prefix = '.';\n\t\t}\n\t}\n\n\t// Remove any repeated slashes\n\t$path = preg_replace('#/{2,}#', '/', $path);\n\n\t// Remove the slashes from the start and end of the path\n\t$path = trim($path, '/');\n\n\t// Break the string into little bits for us to nibble on\n\t$bits = explode('/', $path);\n\n\t// Remove any . in the path, renumber array for the loop below\n\t$bits = array_values(array_diff($bits, array('.')));\n\n\t// Lets get looping, run over and resolve any .. (up directory)\n\tfor ($i = 0, $max = sizeof($bits); $i < $max; $i++)\n\t{\n\t\t// @todo Optimise\n\t\tif ($bits[$i] == '..' )\n\t\t{\n\t\t\tif (isset($bits[$i - 1]))\n\t\t\t{\n\t\t\t\tif ($bits[$i - 1] != '..')\n\t\t\t\t{\n\t\t\t\t\t// We found a .. and we are able to traverse upwards, lets do it!\n\t\t\t\t\tunset($bits[$i]);\n\t\t\t\t\tunset($bits[$i - 1]);\n\t\t\t\t\t$i -= 2;\n\t\t\t\t\t$max -= 2;\n\t\t\t\t\t$bits = array_values($bits);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($absolute) // ie. !isset($bits[$i - 1]) && $absolute\n\t\t\t{\n\t\t\t\t// We have an absolute path trying to descend above the root of the filesystem\n\t\t\t\t// ... Error!\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Prepend the path prefix\n\tarray_unshift($bits, $path_prefix);\n\n\t$resolved = '';\n\n\t$max = sizeof($bits) - 1;\n\n\t// Check if we are able to resolve symlinks, Windows cannot.\n\t$symlink_resolve = (function_exists('readlink')) ? true : false;\n\n\tforeach ($bits as $i => $bit)\n\t{\n\t\tif (@is_dir(\"$resolved/$bit\") || ($i == $max && @is_file(\"$resolved/$bit\")))\n\t\t{\n\t\t\t// Path Exists\n\t\t\tif ($symlink_resolve && is_link(\"$resolved/$bit\") && ($link = readlink(\"$resolved/$bit\")))\n\t\t\t{\n\t\t\t\t// Resolved a symlink.\n\t\t\t\t$resolved = $link . (($i == $max) ? '' : '/');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Something doesn't exist here!\n\t\t\t// This is correct realpath() behaviour but sadly open_basedir and safe_mode make this problematic\n\t\t\t// return false;\n\t\t}\n\t\t$resolved .= $bit . (($i == $max) ? '' : '/');\n\t}\n\n\t// @todo If the file exists fine and open_basedir only has one path we should be able to prepend it\n\t// because we must be inside that basedir, the question is where...\n\t// @internal The slash in is_dir() gets around an open_basedir restriction\n\tif (!@file_exists($resolved) || (!@is_dir($resolved . '/') && !is_file($resolved)))\n\t{\n\t\treturn false;\n\t}\n\n\t// Put the slashes back to the native operating systems slashes\n\t$resolved = str_replace('/', DIRECTORY_SEPARATOR, $resolved);\n\n\t// Check for DIRECTORY_SEPARATOR at the end (and remove it!)\n\tif (substr($resolved, -1) == DIRECTORY_SEPARATOR)\n\t{\n\t\treturn substr($resolved, 0, -1);\n\t}\n\n\treturn $resolved; // We got here, in the end!\n}\n\nif (!function_exists('realpath'))\n{\n\t/**\n\t* A wrapper for realpath\n\t* @ignore\n\t*/\n\tfunction phpbb_realpath($path)\n\t{\n\t\treturn phpbb_own_realpath($path);\n\t}\n}\nelse\n{\n\t/**\n\t* A wrapper for realpath\n\t*/\n\tfunction phpbb_realpath($path)\n\t{\n\t\t$realpath = realpath($path);\n\n\t\t// Strangely there are provider not disabling realpath but returning strange values. :o\n\t\t// We at least try to cope with them.\n\t\tif ($realpath === $path || $realpath === false)\n\t\t{\n\t\t\treturn phpbb_own_realpath($path);\n\t\t}\n\n\t\t// Check for DIRECTORY_SEPARATOR at the end (and remove it!)\n\t\tif (substr($realpath, -1) == DIRECTORY_SEPARATOR)\n\t\t{\n\t\t\t$realpath = substr($realpath, 0, -1);\n\t\t}\n\n\t\treturn $realpath;\n\t}\n}\n\n/**\n* Eliminates useless . and .. components from specified path.\n*\n* @param string $path Path to clean\n* @return string Cleaned path\n*/\nfunction phpbb_clean_path($path)\n{\n\t$exploded = explode('/', $path);\n\t$filtered = array();\n\tforeach ($exploded as $part)\n\t{\n\t\tif ($part === '.' && !empty($filtered))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ($part === '..' && !empty($filtered) && $filtered[sizeof($filtered) - 1] !== '..')\n\t\t{\n\t\t\tarray_pop($filtered);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$filtered[] = $part;\n\t\t}\n\t}\n\t$path = implode('/', $filtered);\n\treturn $path;\n}\n\nif (!function_exists('htmlspecialchars_decode'))\n{\n\t/**\n\t* A wrapper for htmlspecialchars_decode\n\t* @ignore\n\t*/\n\tfunction htmlspecialchars_decode($string, $quote_style = ENT_COMPAT)\n\t{\n\t\treturn strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));\n\t}\n}\n\n// functions used for building option fields\n\n/**\n* Pick a language, any language ...\n*/\nfunction language_select($default = '')\n{\n\tglobal $db;\n\n\t$sql = 'SELECT lang_iso, lang_local_name\n\t\tFROM ' . LANG_TABLE . '\n\t\tORDER BY lang_english_name';\n\t$result = $db->sql_query($sql);\n\n\t$lang_options = '';\n\twhile ($row = $db->sql_fetchrow($result))\n\t{\n\t\t$selected = ($row['lang_iso'] == $default) ? ' selected=\"selected\"' : '';\n\t\t$lang_options .= '<option value=\"' . $row['lang_iso'] . '\"' . $selected . '>' . $row['lang_local_name'] . '</option>';\n\t}\n\t$db->sql_freeresult($result);\n\n\treturn $lang_options;\n}\n\n/**\n* Pick a template/theme combo,\n*/\nfunction style_select($default = '', $all = false)\n{\n\tglobal $db;\n\n\t$sql_where = (!$all) ? 'WHERE style_active = 1 ' : '';\n\t$sql = 'SELECT style_id, style_name\n\t\tFROM ' . STYLES_TABLE . \"\n\t\t$sql_where\n\t\tORDER BY style_name\";\n\t$result = $db->sql_query($sql);\n\n\t$style_options = '';\n\twhile ($row = $db->sql_fetchrow($result))\n\t{\n\t\t$selected = ($row['style_id'] == $default) ? ' selected=\"selected\"' : '';\n\t\t$style_options .= '<option value=\"' . $row['style_id'] . '\"' . $selected . '>' . $row['style_name'] . '</option>';\n\t}\n\t$db->sql_freeresult($result);\n\n\treturn $style_options;\n}\n\n/**\n* Pick a timezone\n*/\nfunction tz_select($default = '', $truncate = false)\n{\n\tglobal $user;\n\n\t$tz_select = '';\n\tforeach ($user->lang['tz_zones'] as $offset => $zone)\n\t{\n\t\tif ($truncate)\n\t\t{\n\t\t\t$zone_trunc = truncate_string($zone, 50, 255, false, '...');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$zone_trunc = $zone;\n\t\t}\n\n\t\tif (is_numeric($offset))\n\t\t{\n\t\t\t$selected = ($offset == $default) ? ' selected=\"selected\"' : '';\n\t\t\t$tz_select .= '<option title=\"' . $zone . '\" value=\"' . $offset . '\"' . $selected . '>' . $zone_trunc . '</option>';\n\t\t}\n\t}\n\n\treturn $tz_select;\n}\n\n// Functions handling topic/post tracking/marking\n\n/**\n* Marks a topic/forum as read\n* Marks a topic as posted to\n*\n* @param int $user_id can only be used with $mode == 'post'\n*/\nfunction markread($mode, $forum_id = false, $topic_id = false, $post_time = 0, $user_id = 0)\n{\n\tglobal $db, $user, $config;\n\n\tif ($mode == 'all')\n\t{\n\t\tif ($forum_id === false || !sizeof($forum_id))\n\t\t{\n\t\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t\t{\n\t\t\t\t// Mark all forums read (index page)\n\t\t\t\t$db->sql_query('DELETE FROM ' . TOPICS_TRACK_TABLE . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t$db->sql_query('DELETE FROM ' . FORUMS_TRACK_TABLE . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t}\n\t\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t\t{\n\t\t\t\t$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\n\t\t\t\tunset($tracking_topics['tf']);\n\t\t\t\tunset($tracking_topics['t']);\n\t\t\t\tunset($tracking_topics['f']);\n\t\t\t\t$tracking_topics['l'] = base_convert(time() - $config['board_startdate'], 10, 36);\n\n\t\t\t\t$user->set_cookie('track', tracking_serialize($tracking_topics), time() + 31536000);\n\t\t\t\t$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking_topics)) : tracking_serialize($tracking_topics);\n\n\t\t\t\tunset($tracking_topics);\n\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\t$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\telse if ($mode == 'topics')\n\t{\n\t\t// Mark all topics in forums read\n\t\tif (!is_array($forum_id))\n\t\t{\n\t\t\t$forum_id = array($forum_id);\n\t\t}\n\n\t\t// Add 0 to forums array to mark global announcements correctly\n\t\t// $forum_id[] = 0;\n\n\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t{\n\t\t\t$sql = 'DELETE FROM ' . TOPICS_TRACK_TABLE . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND \" . $db->sql_in_set('forum_id', $forum_id);\n\t\t\t$db->sql_query($sql);\n\n\t\t\t$sql = 'SELECT forum_id\n\t\t\t\tFROM ' . FORUMS_TRACK_TABLE . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND \" . $db->sql_in_set('forum_id', $forum_id);\n\t\t\t$result = $db->sql_query($sql);\n\n\t\t\t$sql_update = array();\n\t\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t\t{\n\t\t\t\t$sql_update[] = (int) $row['forum_id'];\n\t\t\t}\n\t\t\t$db->sql_freeresult($result);\n\n\t\t\tif (sizeof($sql_update))\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . FORUMS_TRACK_TABLE . '\n\t\t\t\t\tSET mark_time = ' . time() . \"\n\t\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\t\tAND \" . $db->sql_in_set('forum_id', $sql_update);\n\t\t\t\t$db->sql_query($sql);\n\t\t\t}\n\n\t\t\tif ($sql_insert = array_diff($forum_id, $sql_update))\n\t\t\t{\n\t\t\t\t$sql_ary = array();\n\t\t\t\tforeach ($sql_insert as $f_id)\n\t\t\t\t{\n\t\t\t\t\t$sql_ary[] = array(\n\t\t\t\t\t\t'user_id'\t=> (int) $user->data['user_id'],\n\t\t\t\t\t\t'forum_id'\t=> (int) $f_id,\n\t\t\t\t\t\t'mark_time'\t=> time()\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$db->sql_multi_insert(FORUMS_TRACK_TABLE, $sql_ary);\n\t\t\t}\n\t\t}\n\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t{\n\t\t\t$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking = ($tracking) ? tracking_unserialize($tracking) : array();\n\n\t\t\tforeach ($forum_id as $f_id)\n\t\t\t{\n\t\t\t\t$topic_ids36 = (isset($tracking['tf'][$f_id])) ? $tracking['tf'][$f_id] : array();\n\n\t\t\t\tif (isset($tracking['tf'][$f_id]))\n\t\t\t\t{\n\t\t\t\t\tunset($tracking['tf'][$f_id]);\n\t\t\t\t}\n\n\t\t\t\tforeach ($topic_ids36 as $topic_id36)\n\t\t\t\t{\n\t\t\t\t\tunset($tracking['t'][$topic_id36]);\n\t\t\t\t}\n\n\t\t\t\tif (isset($tracking['f'][$f_id]))\n\t\t\t\t{\n\t\t\t\t\tunset($tracking['f'][$f_id]);\n\t\t\t\t}\n\n\t\t\t\t$tracking['f'][$f_id] = base_convert(time() - $config['board_startdate'], 10, 36);\n\t\t\t}\n\n\t\t\tif (isset($tracking['tf']) && empty($tracking['tf']))\n\t\t\t{\n\t\t\t\tunset($tracking['tf']);\n\t\t\t}\n\n\t\t\t$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);\n\t\t\t$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);\n\n\t\t\tunset($tracking);\n\t\t}\n\n\t\treturn;\n\t}\n\telse if ($mode == 'topic')\n\t{\n\t\tif ($topic_id === false || $forum_id === false)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t{\n\t\t\t$sql = 'UPDATE ' . TOPICS_TRACK_TABLE . '\n\t\t\t\tSET mark_time = ' . (($post_time) ? $post_time : time()) . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND topic_id = $topic_id\";\n\t\t\t$db->sql_query($sql);\n\n\t\t\t// insert row\n\t\t\tif (!$db->sql_affectedrows())\n\t\t\t{\n\t\t\t\t$db->sql_return_on_error(true);\n\n\t\t\t\t$sql_ary = array(\n\t\t\t\t\t'user_id'\t\t=> (int) $user->data['user_id'],\n\t\t\t\t\t'topic_id'\t\t=> (int) $topic_id,\n\t\t\t\t\t'forum_id'\t\t=> (int) $forum_id,\n\t\t\t\t\t'mark_time'\t\t=> ($post_time) ? (int) $post_time : time(),\n\t\t\t\t);\n\n\t\t\t\t$db->sql_query('INSERT INTO ' . TOPICS_TRACK_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\t\t\t\t$db->sql_return_on_error(false);\n\t\t\t}\n\t\t}\n\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t{\n\t\t\t$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking = ($tracking) ? tracking_unserialize($tracking) : array();\n\n\t\t\t$topic_id36 = base_convert($topic_id, 10, 36);\n\n\t\t\tif (!isset($tracking['t'][$topic_id36]))\n\t\t\t{\n\t\t\t\t$tracking['tf'][$forum_id][$topic_id36] = true;\n\t\t\t}\n\n\t\t\t$post_time = ($post_time) ? $post_time : time();\n\t\t\t$tracking['t'][$topic_id36] = base_convert($post_time - $config['board_startdate'], 10, 36);\n\n\t\t\t// If the cookie grows larger than 10000 characters we will remove the smallest value\n\t\t\t// This can result in old topics being unread - but most of the time it should be accurate...\n\t\t\tif (isset($_COOKIE[$config['cookie_name'] . '_track']) && strlen($_COOKIE[$config['cookie_name'] . '_track']) > 10000)\n\t\t\t{\n\t\t\t\t//echo 'Cookie grown too large' . print_r($tracking, true);\n\n\t\t\t\t// We get the ten most minimum stored time offsets and its associated topic ids\n\t\t\t\t$time_keys = array();\n\t\t\t\tfor ($i = 0; $i < 10 && sizeof($tracking['t']); $i++)\n\t\t\t\t{\n\t\t\t\t\t$min_value = min($tracking['t']);\n\t\t\t\t\t$m_tkey = array_search($min_value, $tracking['t']);\n\t\t\t\t\tunset($tracking['t'][$m_tkey]);\n\n\t\t\t\t\t$time_keys[$m_tkey] = $min_value;\n\t\t\t\t}\n\n\t\t\t\t// Now remove the topic ids from the array...\n\t\t\t\tforeach ($tracking['tf'] as $f_id => $topic_id_ary)\n\t\t\t\t{\n\t\t\t\t\tforeach ($time_keys as $m_tkey => $min_value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($topic_id_ary[$m_tkey]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tracking['f'][$f_id] = $min_value;\n\t\t\t\t\t\t\tunset($tracking['tf'][$f_id][$m_tkey]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\t$user->data['user_lastmark'] = intval(base_convert(max($time_keys) + $config['board_startdate'], 36, 10));\n\t\t\t\t\t$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . $user->data['user_lastmark'] . \" WHERE user_id = {$user->data['user_id']}\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$tracking['l'] = max($time_keys);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);\n\t\t\t$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);\n\t\t}\n\n\t\treturn;\n\t}\n\telse if ($mode == 'post')\n\t{\n\t\tif ($topic_id === false)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$use_user_id = (!$user_id) ? $user->data['user_id'] : $user_id;\n\n\t\tif ($config['load_db_track'] && $use_user_id != ANONYMOUS)\n\t\t{\n\t\t\t$db->sql_return_on_error(true);\n\n\t\t\t$sql_ary = array(\n\t\t\t\t'user_id'\t\t=> (int) $use_user_id,\n\t\t\t\t'topic_id'\t\t=> (int) $topic_id,\n\t\t\t\t'topic_posted'\t=> 1\n\t\t\t);\n\n\t\t\t$db->sql_query('INSERT INTO ' . TOPICS_POSTED_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\t\t\t$db->sql_return_on_error(false);\n\t\t}\n\n\t\treturn;\n\t}\n}\n\n/**\n* Get topic tracking info by using already fetched info\n*/\nfunction get_topic_tracking($forum_id, $topic_ids, &$rowset, $forum_mark_time, $global_announce_list = false)\n{\n\tglobal $config, $user;\n\n\t$last_read = array();\n\n\tif (!is_array($topic_ids))\n\t{\n\t\t$topic_ids = array($topic_ids);\n\t}\n\n\tforeach ($topic_ids as $topic_id)\n\t{\n\t\tif (!empty($rowset[$topic_id]['mark_time']))\n\t\t{\n\t\t\t$last_read[$topic_id] = $rowset[$topic_id]['mark_time'];\n\t\t}\n\t}\n\n\t$topic_ids = array_diff($topic_ids, array_keys($last_read));\n\n\tif (sizeof($topic_ids))\n\t{\n\t\t$mark_time = array();\n\n\t\t// Get global announcement info\n\t\tif ($global_announce_list && sizeof($global_announce_list))\n\t\t{\n\t\t\tif (!isset($forum_mark_time[0]))\n\t\t\t{\n\t\t\t\tglobal $db;\n\n\t\t\t\t$sql = 'SELECT mark_time\n\t\t\t\t\tFROM ' . FORUMS_TRACK_TABLE . \"\n\t\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\t\tAND forum_id = 0\";\n\t\t\t\t$result = $db->sql_query($sql);\n\t\t\t\t$row = $db->sql_fetchrow($result);\n\t\t\t\t$db->sql_freeresult($result);\n\n\t\t\t\tif ($row)\n\t\t\t\t{\n\t\t\t\t\t$mark_time[0] = $row['mark_time'];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($forum_mark_time[0] !== false)\n\t\t\t\t{\n\t\t\t\t\t$mark_time[0] = $forum_mark_time[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($forum_mark_time[$forum_id]) && $forum_mark_time[$forum_id] !== false)\n\t\t{\n\t\t\t$mark_time[$forum_id] = $forum_mark_time[$forum_id];\n\t\t}\n\n\t\t$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];\n\n\t\tforeach ($topic_ids as $topic_id)\n\t\t{\n\t\t\tif ($global_announce_list && isset($global_announce_list[$topic_id]))\n\t\t\t{\n\t\t\t\t$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$last_read[$topic_id] = $user_lastmark;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $last_read;\n}\n\n/**\n* Get topic tracking info from db (for cookie based tracking only this function is used)\n*/\nfunction get_complete_topic_tracking($forum_id, $topic_ids, $global_announce_list = false)\n{\n\tglobal $config, $user;\n\n\t$last_read = array();\n\n\tif (!is_array($topic_ids))\n\t{\n\t\t$topic_ids = array($topic_ids);\n\t}\n\n\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t{\n\t\tglobal $db;\n\n\t\t$sql = 'SELECT topic_id, mark_time\n\t\t\tFROM ' . TOPICS_TRACK_TABLE . \"\n\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\tAND \" . $db->sql_in_set('topic_id', $topic_ids);\n\t\t$result = $db->sql_query($sql);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$last_read[$row['topic_id']] = $row['mark_time'];\n\t\t}\n\t\t$db->sql_freeresult($result);\n\n\t\t$topic_ids = array_diff($topic_ids, array_keys($last_read));\n\n\t\tif (sizeof($topic_ids))\n\t\t{\n\t\t\t$sql = 'SELECT forum_id, mark_time\n\t\t\t\tFROM ' . FORUMS_TRACK_TABLE . \"\n\t\t\t\tWHERE user_id = {$user->data['user_id']}\n\t\t\t\t\tAND forum_id \" .\n\t\t\t\t\t(($global_announce_list && sizeof($global_announce_list)) ? \"IN (0, $forum_id)\" : \"= $forum_id\");\n\t\t\t$result = $db->sql_query($sql);\n\n\t\t\t$mark_time = array();\n\t\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t\t{\n\t\t\t\t$mark_time[$row['forum_id']] = $row['mark_time'];\n\t\t\t}\n\t\t\t$db->sql_freeresult($result);\n\n\t\t\t$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];\n\n\t\t\tforeach ($topic_ids as $topic_id)\n\t\t\t{\n\t\t\t\tif ($global_announce_list && isset($global_announce_list[$topic_id]))\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = $user_lastmark;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t{\n\t\tglobal $tracking_topics;\n\n\t\tif (!isset($tracking_topics) || !sizeof($tracking_topics))\n\t\t{\n\t\t\t$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\t\t}\n\n\t\tif (!$user->data['is_registered'])\n\t\t{\n\t\t\t$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$user_lastmark = $user->data['user_lastmark'];\n\t\t}\n\n\t\tforeach ($topic_ids as $topic_id)\n\t\t{\n\t\t\t$topic_id36 = base_convert($topic_id, 10, 36);\n\n\t\t\tif (isset($tracking_topics['t'][$topic_id36]))\n\t\t\t{\n\t\t\t\t$last_read[$topic_id] = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];\n\t\t\t}\n\t\t}\n\n\t\t$topic_ids = array_diff($topic_ids, array_keys($last_read));\n\n\t\tif (sizeof($topic_ids))\n\t\t{\n\t\t\t$mark_time = array();\n\t\t\tif ($global_announce_list && sizeof($global_announce_list))\n\t\t\t{\n\t\t\t\tif (isset($tracking_topics['f'][0]))\n\t\t\t\t{\n\t\t\t\t\t$mark_time[0] = base_convert($tracking_topics['f'][0], 36, 10) + $config['board_startdate'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isset($tracking_topics['f'][$forum_id]))\n\t\t\t{\n\t\t\t\t$mark_time[$forum_id] = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];\n\t\t\t}\n\n\t\t\t$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user_lastmark;\n\n\t\t\tforeach ($topic_ids as $topic_id)\n\t\t\t{\n\t\t\t\tif ($global_announce_list && isset($global_announce_list[$topic_id]))\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$last_read[$topic_id] = $user_lastmark;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $last_read;\n}\n\n/**\n* Get list of unread topics\n*\n* @param int $user_id\t\t\tUser ID (or false for current user)\n* @param string $sql_extra\t\tExtra WHERE SQL statement\n* @param string $sql_sort\t\tORDER BY SQL sorting statement\n* @param string $sql_limit\t\tLimits the size of unread topics list, 0 for unlimited query\n* @param string $sql_limit_offset  Sets the offset of the first row to search, 0 to search from the start\n*\n* @return array[int][int]\t\tTopic ids as keys, mark_time of topic as value\n*/\nfunction get_unread_topics($user_id = false, $sql_extra = '', $sql_sort = '', $sql_limit = 1001, $sql_limit_offset = 0)\n{\n\tglobal $config, $db, $user;\n\n\t$user_id = ($user_id === false) ? (int) $user->data['user_id'] : (int) $user_id;\n\n\t// Data array we're going to return\n\t$unread_topics = array();\n\n\tif (empty($sql_sort))\n\t{\n\t\t$sql_sort = 'ORDER BY t.topic_last_post_time DESC';\n\t}\n\n\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t{\n\t\t// Get list of the unread topics\n\t\t$last_mark = (int) $user->data['user_lastmark'];\n\n\t\t$sql_array = array(\n\t\t\t'SELECT'\t\t=> 't.topic_id, t.topic_last_post_time, tt.mark_time as topic_mark_time, ft.mark_time as forum_mark_time',\n\n\t\t\t'FROM'\t\t\t=> array(TOPICS_TABLE => 't'),\n\n\t\t\t'LEFT_JOIN'\t\t=> array(\n\t\t\t\tarray(\n\t\t\t\t\t'FROM'\t=> array(TOPICS_TRACK_TABLE => 'tt'),\n\t\t\t\t\t'ON'\t=> \"tt.user_id = $user_id AND t.topic_id = tt.topic_id\",\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'FROM'\t=> array(FORUMS_TRACK_TABLE => 'ft'),\n\t\t\t\t\t'ON'\t=> \"ft.user_id = $user_id AND t.forum_id = ft.forum_id\",\n\t\t\t\t),\n\t\t\t),\n\n\t\t\t'WHERE'\t\t\t=> \"\n\t\t\t\t t.topic_last_post_time > $last_mark AND\n\t\t\t\t(\n\t\t\t\t(tt.mark_time IS NOT NULL AND t.topic_last_post_time > tt.mark_time) OR\n\t\t\t\t(tt.mark_time IS NULL AND ft.mark_time IS NOT NULL AND t.topic_last_post_time > ft.mark_time) OR\n\t\t\t\t(tt.mark_time IS NULL AND ft.mark_time IS NULL)\n\t\t\t\t)\n\t\t\t\t$sql_extra\n\t\t\t\t$sql_sort\",\n\t\t);\n\n\t\t$sql = $db->sql_build_query('SELECT', $sql_array);\n\t\t$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$topic_id = (int) $row['topic_id'];\n\t\t\t$unread_topics[$topic_id] = ($row['topic_mark_time']) ? (int) $row['topic_mark_time'] : (($row['forum_mark_time']) ? (int) $row['forum_mark_time'] : $last_mark);\n\t\t}\n\t\t$db->sql_freeresult($result);\n\t}\n\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t{\n\t\tglobal $tracking_topics;\n\n\t\tif (empty($tracking_topics))\n\t\t{\n\t\t\t$tracking_topics = request_var($config['cookie_name'] . '_track', '', false, true);\n\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\t\t}\n\n\t\tif (!$user->data['is_registered'])\n\t\t{\n\t\t\t$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$user_lastmark = (int) $user->data['user_lastmark'];\n\t\t}\n\n\t\t$sql = 'SELECT t.topic_id, t.forum_id, t.topic_last_post_time\n\t\t\tFROM ' . TOPICS_TABLE . ' t\n\t\t\tWHERE t.topic_last_post_time > ' . $user_lastmark . \"\n\t\t\t$sql_extra\n\t\t\t$sql_sort\";\n\t\t$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$forum_id = (int) $row['forum_id'];\n\t\t\t$topic_id = (int) $row['topic_id'];\n\t\t\t$topic_id36 = base_convert($topic_id, 10, 36);\n\n\t\t\tif (isset($tracking_topics['t'][$topic_id36]))\n\t\t\t{\n\t\t\t\t$last_read = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];\n\n\t\t\t\tif ($row['topic_last_post_time'] > $last_read)\n\t\t\t\t{\n\t\t\t\t\t$unread_topics[$topic_id] = $last_read;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($tracking_topics['f'][$forum_id]))\n\t\t\t{\n\t\t\t\t$mark_time = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];\n\n\t\t\t\tif ($row['topic_last_post_time'] > $mark_time)\n\t\t\t\t{\n\t\t\t\t\t$unread_topics[$topic_id] = $mark_time;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$unread_topics[$topic_id] = $user_lastmark;\n\t\t\t}\n\t\t}\n\t\t$db->sql_freeresult($result);\n\t}\n\n\treturn $unread_topics;\n}\n\n/**\n* Check for read forums and update topic tracking info accordingly\n*\n* @param int $forum_id the forum id to check\n* @param int $forum_last_post_time the forums last post time\n* @param int $f_mark_time the forums last mark time if user is registered and load_db_lastread enabled\n* @param int $mark_time_forum false if the mark time needs to be obtained, else the last users forum mark time\n*\n* @return true if complete forum got marked read, else false.\n*/\nfunction update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time = false, $mark_time_forum = false)\n{\n\tglobal $db, $tracking_topics, $user, $config, $auth;\n\n\t// Determine the users last forum mark time if not given.\n\tif ($mark_time_forum === false)\n\t{\n\t\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t\t{\n\t\t\t$mark_time_forum = (!empty($f_mark_time)) ? $f_mark_time : $user->data['user_lastmark'];\n\t\t}\n\t\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t\t{\n\t\t\t$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';\n\t\t\t$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();\n\n\t\t\tif (!$user->data['is_registered'])\n\t\t\t{\n\t\t\t\t$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;\n\t\t\t}\n\n\t\t\t$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];\n\t\t}\n\t}\n\n\t// Handle update of unapproved topics info.\n\t// Only update for moderators having m_approve permission for the forum.\n\t$sql_update_unapproved = ($auth->acl_get('m_approve', $forum_id)) ? '': 'AND t.topic_approved = 1';\n\n\t// Check the forum for any left unread topics.\n\t// If there are none, we mark the forum as read.\n\tif ($config['load_db_lastread'] && $user->data['is_registered'])\n\t{\n\t\tif ($mark_time_forum >= $forum_last_post_time)\n\t\t{\n\t\t\t// We do not need to mark read, this happened before. Therefore setting this to true\n\t\t\t$row = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql = 'SELECT t.forum_id\n\t\t\t\tFROM ' . TOPICS_TABLE . ' t\n\t\t\t\tLEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt\n\t\t\t\t\tON (tt.topic_id = t.topic_id\n\t\t\t\t\t\tAND tt.user_id = ' . $user->data['user_id'] . ')\n\t\t\t\tWHERE t.forum_id = ' . $forum_id . '\n\t\t\t\t\tAND t.topic_last_post_time > ' . $mark_time_forum . '\n\t\t\t\t\tAND t.topic_moved_id = 0 ' .\n\t\t\t\t\t$sql_update_unapproved . '\n\t\t\t\t\tAND (tt.topic_id IS NULL\n\t\t\t\t\t\tOR tt.mark_time < t.topic_last_post_time)';\n\t\t\t$result = $db->sql_query_limit($sql, 1);\n\t\t\t$row = $db->sql_fetchrow($result);\n\t\t\t$db->sql_freeresult($result);\n\t\t}\n\t}\n\telse if ($config['load_anon_lastread'] || $user->data['is_registered'])\n\t{\n\t\t// Get information from cookie\n\t\t$row = false;\n\n\t\tif (!isset($tracking_topics['tf'][$forum_id]))\n\t\t{\n\t\t\t// We do not need to mark read, this happened before. Therefore setting this to true\n\t\t\t$row = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql = 'SELECT t.topic_id\n\t\t\t\tFROM ' . TOPICS_TABLE . ' t\n\t\t\t\tWHERE t.forum_id = ' . $forum_id . '\n\t\t\t\t\tAND t.topic_last_post_time > ' . $mark_time_forum . '\n\t\t\t\t\tAND t.topic_moved_id = 0 ' .\n\t\t\t\t\t$sql_update_unapproved;\n\t\t\t$result = $db->sql_query($sql);\n\n\t\t\t$check_forum = $tracking_topics['tf'][$forum_id];\n\t\t\t$unread = false;\n\n\t\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t\t{\n\t\t\t\tif (!isset($check_forum[base_convert($row['topic_id'], 10, 36)]))\n\t\t\t\t{\n\t\t\t\t\t$unread = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$db->sql_freeresult($result);\n\n\t\t\t$row = $unread;\n\t\t}\n\t}\n\telse\n\t{\n\t\t$row = true;\n\t}\n\n\tif (!$row)\n\t{\n\t\tmarkread('topics', $forum_id);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n* Transform an array into a serialized format\n*/\nfunction tracking_serialize($input)\n{\n\t$out = '';\n\tforeach ($input as $key => $value)\n\t{\n\t\tif (is_array($value))\n\t\t{\n\t\t\t$out .= $key . ':(' . tracking_serialize($value) . ');';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$out .= $key . ':' . $value . ';';\n\t\t}\n\t}\n\treturn $out;\n}\n\n/**\n* Transform a serialized array into an actual array\n*/\nfunction tracking_unserialize($string, $max_depth = 3)\n{\n\t$n = strlen($string);\n\tif ($n > 10010)\n\t{\n\t\tdie('Invalid data supplied');\n\t}\n\t$data = $stack = array();\n\t$key = '';\n\t$mode = 0;\n\t$level = &$data;\n\tfor ($i = 0; $i < $n; ++$i)\n\t{\n\t\tswitch ($mode)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase ':':\n\t\t\t\t\t\t$level[$key] = 0;\n\t\t\t\t\t\t$mode = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ')':\n\t\t\t\t\t\tunset($level);\n\t\t\t\t\t\t$level = array_pop($stack);\n\t\t\t\t\t\t$mode = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$key .= $string[$i];\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase '(':\n\t\t\t\t\t\tif (sizeof($stack) >= $max_depth)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdie('Invalid data supplied');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$stack[] = &$level;\n\t\t\t\t\t\t$level[$key] = array();\n\t\t\t\t\t\t$level = &$level[$key];\n\t\t\t\t\t\t$key = '';\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$level[$key] = $string[$i];\n\t\t\t\t\t\t$mode = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase ')':\n\t\t\t\t\t\tunset($level);\n\t\t\t\t\t\t$level = array_pop($stack);\n\t\t\t\t\t\t$mode = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ';':\n\t\t\t\t\t\t$key = '';\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$level[$key] .= $string[$i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tswitch ($string[$i])\n\t\t\t\t{\n\t\t\t\t\tcase ')':\n\t\t\t\t\t\tunset($level);\n\t\t\t\t\t\t$level = array_pop($stack);\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase ';':\n\t\t\t\t\t\t$key = '';\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdie('Invalid data supplied');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (sizeof($stack) != 0 || ($mode != 0 && $mode != 3))\n\t{\n\t\tdie('Invalid data supplied');\n\t}\n\n\treturn $level;\n}\n\n// Pagination functions\n\n/**\n* Pagination routine, generates page number sequence\n* tpl_prefix is for using different pagination blocks at one page\n*/\nfunction generate_pagination($base_url, $num_items, $per_page, $start_item, $add_prevnext_text = false, $tpl_prefix = '')\n{\n\tglobal $template, $user;\n\n\t// Make sure $per_page is a valid value\n\t$per_page = ($per_page <= 0) ? 1 : $per_page;\n\n\t$seperator = '<span class=\"page-sep\">' . $user->lang['COMMA_SEPARATOR'] . '</span>';\n\t$total_pages = ceil($num_items / $per_page);\n\n\tif ($total_pages == 1 || !$num_items)\n\t{\n\t\treturn false;\n\t}\n\n\t$on_page = floor($start_item / $per_page) + 1;\n\t$url_delim = (strpos($base_url, '?') === false) ? '?' : ((strpos($base_url, '?') === strlen($base_url) - 1) ? '' : '&amp;');\n\n\t$page_string = ($on_page == 1) ? '<strong>1</strong>' : '<a href=\"' . $base_url . '\">1</a>';\n\n\tif ($total_pages > 5)\n\t{\n\t\t$start_cnt = min(max(1, $on_page - 4), $total_pages - 5);\n\t\t$end_cnt = max(min($total_pages, $on_page + 4), 6);\n\n\t\t$page_string .= ($start_cnt > 1) ? '<span class=\"page-dots\"> ... </span>' : $seperator;\n\n\t\tfor ($i = $start_cnt + 1; $i < $end_cnt; $i++)\n\t\t{\n\t\t\t$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($i - 1) * $per_page) . '\">' . $i . '</a>';\n\t\t\tif ($i < $end_cnt - 1)\n\t\t\t{\n\t\t\t\t$page_string .= $seperator;\n\t\t\t}\n\t\t}\n\n\t\t$page_string .= ($end_cnt < $total_pages) ? '<span class=\"page-dots\"> ... </span>' : $seperator;\n\t}\n\telse\n\t{\n\t\t$page_string .= $seperator;\n\n\t\tfor ($i = 2; $i < $total_pages; $i++)\n\t\t{\n\t\t\t$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($i - 1) * $per_page) . '\">' . $i . '</a>';\n\t\t\tif ($i < $total_pages)\n\t\t\t{\n\t\t\t\t$page_string .= $seperator;\n\t\t\t}\n\t\t}\n\t}\n\n\t$page_string .= ($on_page == $total_pages) ? '<strong>' . $total_pages . '</strong>' : '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($total_pages - 1) * $per_page) . '\">' . $total_pages . '</a>';\n\n\tif ($add_prevnext_text)\n\t{\n\t\tif ($on_page != 1)\n\t\t{\n\t\t\t$page_string = '<a href=\"' . $base_url . \"{$url_delim}start=\" . (($on_page - 2) * $per_page) . '\">' . $user->lang['PREVIOUS'] . '</a>&nbsp;&nbsp;' . $page_string;\n\t\t}\n\n\t\tif ($on_page != $total_pages)\n\t\t{\n\t\t\t$page_string .= '&nbsp;&nbsp;<a href=\"' . $base_url . \"{$url_delim}start=\" . ($on_page * $per_page) . '\">' . $user->lang['NEXT'] . '</a>';\n\t\t}\n\t}\n\n\t$template->assign_vars(array(\n\t\t$tpl_prefix . 'BASE_URL'\t\t=> $base_url,\n\t\t'A_' . $tpl_prefix . 'BASE_URL'\t=> addslashes($base_url),\n\t\t$tpl_prefix . 'PER_PAGE'\t\t=> $per_page,\n\n\t\t$tpl_prefix . 'PREVIOUS_PAGE'\t=> ($on_page == 1) ? '' : $base_url . \"{$url_delim}start=\" . (($on_page - 2) * $per_page),\n\t\t$tpl_prefix . 'NEXT_PAGE'\t\t=> ($on_page == $total_pages) ? '' : $base_url . \"{$url_delim}start=\" . ($on_page * $per_page),\n\t\t$tpl_prefix . 'TOTAL_PAGES'\t\t=> $total_pages,\n\t));\n\n\treturn $page_string;\n}\n\n/**\n* Return current page (pagination)\n*/\nfunction on_page($num_items, $per_page, $start)\n{\n\tglobal $template, $user;\n\n\t// Make sure $per_page is a valid value\n\t$per_page = ($per_page <= 0) ? 1 : $per_page;\n\n\t$on_page = floor($start / $per_page) + 1;\n\n\t$template->assign_vars(array(\n\t\t'ON_PAGE'\t\t=> $on_page)\n\t);\n\n\treturn sprintf($user->lang['PAGE_OF'], $on_page, max(ceil($num_items / $per_page), 1));\n}\n\n// Server functions (building urls, redirecting...)\n\n/**\n* Append session id to url.\n* This function supports hooks.\n*\n* @param string $url The url the session id needs to be appended to (can have params)\n* @param mixed $params String or array of additional url parameters\n* @param bool $is_amp Is url using &amp; (true) or & (false)\n* @param string $session_id Possibility to use a custom session id instead of the global one\n*\n* Examples:\n* <code>\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx?t=1&amp;f=2\");\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx\", 't=1&amp;f=2');\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx\", 't=1&f=2', false);\n* append_sid(\"{$phpbb_root_path}viewtopic.$phpEx\", array('t' => 1, 'f' => 2));\n* </code>\n*\n*/\nfunction append_sid($url, $params = false, $is_amp = true, $session_id = false)\n{\n\tglobal $_SID, $_EXTRA_URL, $phpbb_hook;\n\n\tif ($params === '' || (is_array($params) && empty($params)))\n\t{\n\t\t// Do not append the ? if the param-list is empty anyway.\n\t\t$params = false;\n\t}\n\n\t// Developers using the hook function need to globalise the $_SID and $_EXTRA_URL on their own and also handle it appropriately.\n\t// They could mimic most of what is within this function\n\tif (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__, $url, $params, $is_amp, $session_id))\n\t{\n\t\tif ($phpbb_hook->hook_return(__FUNCTION__))\n\t\t{\n\t\t\treturn $phpbb_hook->hook_return_result(__FUNCTION__);\n\t\t}\n\t}\n\n\t$params_is_array = is_array($params);\n\n\t// Get anchor\n\t$anchor = '';\n\tif (strpos($url, '#') !== false)\n\t{\n\t\tlist($url, $anchor) = explode('#', $url, 2);\n\t\t$anchor = '#' . $anchor;\n\t}\n\telse if (!$params_is_array && strpos($params, '#') !== false)\n\t{\n\t\tlist($params, $anchor) = explode('#', $params, 2);\n\t\t$anchor = '#' . $anchor;\n\t}\n\n\t// Handle really simple cases quickly\n\tif ($_SID == '' && $session_id === false && empty($_EXTRA_URL) && !$params_is_array && !$anchor)\n\t{\n\t\tif ($params === false)\n\t\t{\n\t\t\treturn $url;\n\t\t}\n\n\t\t$url_delim = (strpos($url, '?') === false) ? '?' : (($is_amp) ? '&amp;' : '&');\n\t\treturn $url . ($params !== false ? $url_delim. $params : '');\n\t}\n\n\t// Assign sid if session id is not specified\n\tif ($session_id === false)\n\t{\n\t\t$session_id = $_SID;\n\t}\n\n\t$amp_delim = ($is_amp) ? '&amp;' : '&';\n\t$url_delim = (strpos($url, '?') === false) ? '?' : $amp_delim;\n\n\t// Appending custom url parameter?\n\t$append_url = (!empty($_EXTRA_URL)) ? implode($amp_delim, $_EXTRA_URL) : '';\n\n\t// Use the short variant if possible ;)\n\tif ($params === false)\n\t{\n\t\t// Append session id\n\t\tif (!$session_id)\n\t\t{\n\t\t\treturn $url . (($append_url) ? $url_delim . $append_url : '') . $anchor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . 'sid=' . $session_id . $anchor;\n\t\t}\n\t}\n\n\t// Build string if parameters are specified as array\n\tif (is_array($params))\n\t{\n\t\t$output = array();\n\n\t\tforeach ($params as $key => $item)\n\t\t{\n\t\t\tif ($item === NULL)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ($key == '#')\n\t\t\t{\n\t\t\t\t$anchor = '#' . $item;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$output[] = $key . '=' . $item;\n\t\t}\n\n\t\t$params = implode($amp_delim, $output);\n\t}\n\n\t// Append session id and parameters (even if they are empty)\n\t// If parameters are empty, the developer can still append his/her parameters without caring about the delimiter\n\treturn $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . $params . ((!$session_id) ? '' : $amp_delim . 'sid=' . $session_id) . $anchor;\n}\n\n/**\n* Generate board url (example: http://www.example.com/phpBB)\n*\n* @param bool $without_script_path if set to true the script path gets not appended (example: http://www.example.com)\n*\n* @return string the generated board url\n*/\nfunction generate_board_url($without_script_path = false)\n{\n\tglobal $config, $user;\n\n\t$server_name = $user->host;\n\t$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');\n\n\t// Forcing server vars is the only way to specify/override the protocol\n\tif ($config['force_server_vars'] || !$server_name)\n\t{\n\t\t$server_protocol = ($config['server_protocol']) ? $config['server_protocol'] : (($config['cookie_secure']) ? 'https://' : 'http://');\n\t\t$server_name = $config['server_name'];\n\t\t$server_port = (int) $config['server_port'];\n\t\t$script_path = $config['script_path'];\n\n\t\t$url = $server_protocol . $server_name;\n\t\t$cookie_secure = $config['cookie_secure'];\n\t}\n\telse\n\t{\n\t\t// Do not rely on cookie_secure, users seem to think that it means a secured cookie instead of an encrypted connection\n\t\t$cookie_secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;\n\t\t$url = (($cookie_secure) ? 'https://' : 'http://') . $server_name;\n\n\t\t$script_path = $user->page['root_script_path'];\n\t}\n\n\tif ($server_port && (($cookie_secure && $server_port <> 443) || (!$cookie_secure && $server_port <> 80)))\n\t{\n\t\t// HTTP HOST can carry a port number (we fetch $user->host, but for old versions this may be true)\n\t\tif (strpos($server_name, ':') === false)\n\t\t{\n\t\t\t$url .= ':' . $server_port;\n\t\t}\n\t}\n\n\tif (!$without_script_path)\n\t{\n\t\t$url .= $script_path;\n\t}\n\n\t// Strip / from the end\n\tif (substr($url, -1, 1) == '/')\n\t{\n\t\t$url = substr($url, 0, -1);\n\t}\n\n\treturn $url;\n}\n\n/**\n* Redirects the user to another page then exits the script nicely\n* This function is intended for urls within the board. It's not meant to redirect to cross-domains.\n*\n* @param string $url The url to redirect to\n* @param bool $return If true, do not redirect but return the sanitized URL. Default is no return.\n* @param bool $disable_cd_check If true, redirect() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.\n*/\nfunction redirect($url, $return = false, $disable_cd_check = false)\n{\n\tglobal $db, $cache, $config, $user, $phpbb_root_path;\n\n\t$failover_flag = false;\n\n\tif (empty($user->lang))\n\t{\n\t\t$user->add_lang('common');\n\t}\n\n\tif (!$return)\n\t{\n\t\tgarbage_collection();\n\t}\n\n\t// Make sure no &amp;'s are in, this will break the redirect\n\t$url = str_replace('&amp;', '&', $url);\n\n\t// Determine which type of redirect we need to handle...\n\t$url_parts = @parse_url($url);\n\n\tif ($url_parts === false)\n\t{\n\t\t// Malformed url, redirect to current page...\n\t\t$url = generate_board_url() . '/' . $user->page['page'];\n\t}\n\telse if (!empty($url_parts['scheme']) && !empty($url_parts['host']))\n\t{\n\t\t// Attention: only able to redirect within the same domain if $disable_cd_check is false (yourdomain.com -> www.yourdomain.com will not work)\n\t\tif (!$disable_cd_check && $url_parts['host'] !== $user->host)\n\t\t{\n\t\t\ttrigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);\n\t\t}\n\t}\n\telse if ($url[0] == '/')\n\t{\n\t\t// Absolute uri, prepend direct url...\n\t\t$url = generate_board_url(true) . $url;\n\t}\n\telse\n\t{\n\t\t// Relative uri\n\t\t$pathinfo = pathinfo($url);\n\n\t\tif (!$disable_cd_check && !file_exists($pathinfo['dirname'] . '/'))\n\t\t{\n\t\t\t$url = str_replace('../', '', $url);\n\t\t\t$pathinfo = pathinfo($url);\n\n\t\t\tif (!file_exists($pathinfo['dirname'] . '/'))\n\t\t\t{\n\t\t\t\t// fallback to \"last known user page\"\n\t\t\t\t// at least this way we know the user does not leave the phpBB root\n\t\t\t\t$url = generate_board_url() . '/' . $user->page['page'];\n\t\t\t\t$failover_flag = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!$failover_flag)\n\t\t{\n\t\t\t// Is the uri pointing to the current directory?\n\t\t\tif ($pathinfo['dirname'] == '.')\n\t\t\t{\n\t\t\t\t$url = str_replace('./', '', $url);\n\n\t\t\t\t// Strip / from the beginning\n\t\t\t\tif ($url && substr($url, 0, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$url = substr($url, 1);\n\t\t\t\t}\n\n\t\t\t\tif ($user->page['page_dir'])\n\t\t\t\t{\n\t\t\t\t\t$url = generate_board_url() . '/' . $user->page['page_dir'] . '/' . $url;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$url = generate_board_url() . '/' . $url;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Used ./ before, but $phpbb_root_path is working better with urls within another root path\n\t\t\t\t$root_dirs = explode('/', str_replace('\\\\', '/', phpbb_realpath($phpbb_root_path)));\n\t\t\t\t$page_dirs = explode('/', str_replace('\\\\', '/', phpbb_realpath($pathinfo['dirname'])));\n\t\t\t\t$intersection = array_intersect_assoc($root_dirs, $page_dirs);\n\n\t\t\t\t$root_dirs = array_diff_assoc($root_dirs, $intersection);\n\t\t\t\t$page_dirs = array_diff_assoc($page_dirs, $intersection);\n\n\t\t\t\t$dir = str_repeat('../', sizeof($root_dirs)) . implode('/', $page_dirs);\n\n\t\t\t\t// Strip / from the end\n\t\t\t\tif ($dir && substr($dir, -1, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$dir = substr($dir, 0, -1);\n\t\t\t\t}\n\n\t\t\t\t// Strip / from the beginning\n\t\t\t\tif ($dir && substr($dir, 0, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$dir = substr($dir, 1);\n\t\t\t\t}\n\n\t\t\t\t$url = str_replace($pathinfo['dirname'] . '/', '', $url);\n\n\t\t\t\t// Strip / from the beginning\n\t\t\t\tif (substr($url, 0, 1) == '/')\n\t\t\t\t{\n\t\t\t\t\t$url = substr($url, 1);\n\t\t\t\t}\n\n\t\t\t\t$url = (!empty($dir) ? $dir . '/' : '') . $url;\n\t\t\t\t$url = generate_board_url() . '/' . $url;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Make sure we don't redirect to external URLs\n\tif (!$disable_cd_check && strpos($url, generate_board_url(true) . '/') !== 0)\n\t{\n\t\ttrigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);\n\t}\n\n\t// Make sure no linebreaks are there... to prevent http response splitting for PHP < 4.4.2\n\tif (strpos(urldecode($url), \"\\n\") !== false || strpos(urldecode($url), \"\\r\") !== false || strpos($url, ';') !== false)\n\t{\n\t\ttrigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);\n\t}\n\n\t// Now, also check the protocol and for a valid url the last time...\n\t$allowed_protocols = array('http', 'https', 'ftp', 'ftps');\n\t$url_parts = parse_url($url);\n\n\tif ($url_parts === false || empty($url_parts['scheme']) || !in_array($url_parts['scheme'], $allowed_protocols))\n\t{\n\t\ttrigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);\n\t}\n\n\tif ($return)\n\t{\n\t\treturn $url;\n\t}\n\n\t// Redirect via an HTML form for PITA webservers\n\tif (@preg_match('#Microsoft|WebSTAR|Xitami#', getenv('SERVER_SOFTWARE')))\n\t{\n\t\theader('Refresh: 0; URL=' . $url);\n\n\t\techo '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">';\n\t\techo '<html xmlns=\"http://www.w3.org/1999/xhtml\" dir=\"' . $user->lang['DIRECTION'] . '\" lang=\"' . $user->lang['USER_LANG'] . '\" xml:lang=\"' . $user->lang['USER_LANG'] . '\">';\n\t\techo '<head>';\n\t\techo '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />';\n\t\techo '<meta http-equiv=\"refresh\" content=\"0; url=' . str_replace('&', '&amp;', $url) . '\" />';\n\t\techo '<title>' . $user->lang['REDIRECT'] . '</title>';\n\t\techo '</head>';\n\t\techo '<body>';\n\t\techo '<div style=\"text-align: center;\">' . sprintf($user->lang['URL_REDIRECT'], '<a href=\"' . str_replace('&', '&amp;', $url) . '\">', '</a>') . '</div>';\n\t\techo '</body>';\n\t\techo '</html>';\n\n\t\texit;\n\t}\n\n\t// Behave as per HTTP/1.1 spec for others\n\theader('Location: ' . $url);\n\texit;\n}\n\n/**\n* Re-Apply session id after page reloads\n*/\nfunction reapply_sid($url)\n{\n\tglobal $phpEx, $phpbb_root_path;\n\n\tif ($url === \"index.$phpEx\")\n\t{\n\t\treturn append_sid(\"index.$phpEx\");\n\t}\n\telse if ($url === \"{$phpbb_root_path}index.$phpEx\")\n\t{\n\t\treturn append_sid(\"{$phpbb_root_path}index.$phpEx\");\n\t}\n\n\t// Remove previously added sid\n\tif (strpos($url, 'sid=') !== false)\n\t{\n\t\t// All kind of links\n\t\t$url = preg_replace('/(\\?)?(&amp;|&)?sid=[a-z0-9]+/', '', $url);\n\t\t// if the sid was the first param, make the old second as first ones\n\t\t$url = preg_replace(\"/$phpEx(&amp;|&)+?/\", \"$phpEx?\", $url);\n\t}\n\n\treturn append_sid($url);\n}\n\n/**\n* Returns url from the session/current page with an re-appended SID with optionally stripping vars from the url\n*/\nfunction build_url($strip_vars = false)\n{\n\tglobal $user, $phpbb_root_path;\n\n\t// Append SID\n\t$redirect = append_sid($user->page['page'], false, false);\n\n\t// Add delimiter if not there...\n\tif (strpos($redirect, '?') === false)\n\t{\n\t\t$redirect .= '?';\n\t}\n\n\t// Strip vars...\n\tif ($strip_vars !== false && strpos($redirect, '?') !== false)\n\t{\n\t\tif (!is_array($strip_vars))\n\t\t{\n\t\t\t$strip_vars = array($strip_vars);\n\t\t}\n\n\t\t$query = $_query = array();\n\n\t\t$args = substr($redirect, strpos($redirect, '?') + 1);\n\t\t$args = ($args) ? explode('&', $args) : array();\n\t\t$redirect = substr($redirect, 0, strpos($redirect, '?'));\n\n\t\tforeach ($args as $argument)\n\t\t{\n\t\t\t$arguments = explode('=', $argument);\n\t\t\t$key = $arguments[0];\n\t\t\tunset($arguments[0]);\n\n\t\t\tif ($key === '')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$query[$key] = implode('=', $arguments);\n\t\t}\n\n\t\t// Strip the vars off\n\t\tforeach ($strip_vars as $strip)\n\t\t{\n\t\t\tif (isset($query[$strip]))\n\t\t\t{\n\t\t\t\tunset($query[$strip]);\n\t\t\t}\n\t\t}\n\n\t\t// Glue the remaining parts together... already urlencoded\n\t\tforeach ($query as $key => $value)\n\t\t{\n\t\t\t$_query[] = $key . '=' . $value;\n\t\t}\n\t\t$query = implode('&', $_query);\n\n\t\t$redirect .= ($query) ? '?' . $query : '';\n\t}\n\n\t// We need to be cautious here.\n\t// On some situations, the redirect path is an absolute URL, sometimes a relative path\n\t// For a relative path, let's prefix it with $phpbb_root_path to point to the correct location,\n\t// else we use the URL directly.\n\t$url_parts = @parse_url($redirect);\n\n\t// URL\n\tif ($url_parts !== false && !empty($url_parts['scheme']) && !empty($url_parts['host']))\n\t{\n\t\treturn str_replace('&', '&amp;', $redirect);\n\t}\n\n\treturn $phpbb_root_path . str_replace('&', '&amp;', $redirect);\n}\n\n/**\n* Meta refresh assignment\n* Adds META template variable with meta http tag.\n*\n* @param int $time Time in seconds for meta refresh tag\n* @param string $url URL to redirect to. The url will go through redirect() first before the template variable is assigned\n* @param bool $disable_cd_check If true, meta_refresh() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.\n*/\nfunction meta_refresh($time, $url, $disable_cd_check = false)\n{\n\tglobal $template;\n\n\t$url = redirect($url, true, $disable_cd_check);\n\t$url = str_replace('&', '&amp;', $url);\n\n\t// For XHTML compatibility we change back & to &amp;\n\t$template->assign_vars(array(\n\t\t'META' => '<meta http-equiv=\"refresh\" content=\"' . $time . '; url=' . $url . '\" />')\n\t);\n\n\treturn $url;\n}\n\n/**\n* Outputs correct status line header.\n*\n* Depending on php sapi one of the two following forms is used:\n*\n* Status: 404 Not Found\n*\n* HTTP/1.x 404 Not Found\n*\n* HTTP version is taken from HTTP_VERSION environment variable,\n* and defaults to 1.0.\n*\n* Sample usage:\n*\n* send_status_line(404, 'Not Found');\n*\n* @param int $code HTTP status code\n* @param string $message Message for the status code\n* @return null\n*/\nfunction send_status_line($code, $message)\n{\n\tif (substr(strtolower(@php_sapi_name()), 0, 3) === 'cgi')\n\t{\n\t\t// in theory, we shouldn't need that due to php doing it. Reality offers a differing opinion, though\n\t\theader(\"Status: $code $message\", true, $code);\n\t}\n\telse\n\t{\n\t\tif (!empty($_SERVER['SERVER_PROTOCOL']) && is_string($_SERVER['SERVER_PROTOCOL']) && preg_match('#^HTTP/[0-9]\\.[0-9]$#', $_SERVER['SERVER_PROTOCOL']))\n\t\t{\n\t\t\t$version = $_SERVER['SERVER_PROTOCOL'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$version = 'HTTP/1.0';\n\t\t}\n\t\theader(\"$version $code $message\", true, $code);\n\t}\n}\n\n//Form validation\n\n\n/**\n* Add a secret hash   for use in links/GET requests\n* @param string  $link_name The name of the link; has to match the name used in check_link_hash, otherwise no restrictions apply\n* @return string the hash\n\n*/\nfunction generate_link_hash($link_name)\n{\n\tglobal $user;\n\n\tif (!isset($user->data[\"hash_$link_name\"]))\n\t{\n\t\t$user->data[\"hash_$link_name\"] = substr(sha1($user->data['user_form_salt'] . $link_name), 0, 8);\n\t}\n\n\treturn $user->data[\"hash_$link_name\"];\n}\n\n\n/**\n* checks a link hash - for GET requests\n* @param string $token the submitted token\n* @param string $link_name The name of the link\n* @return boolean true if all is fine\n*/\nfunction check_link_hash($token, $link_name)\n{\n\treturn $token === generate_link_hash($link_name);\n}\n\n/**\n* Add a secret token to the form (requires the S_FORM_TOKEN template variable)\n* @param string  $form_name The name of the form; has to match the name used in check_form_key, otherwise no restrictions apply\n*/\nfunction add_form_key($form_name)\n{\n\tglobal $config, $template, $user;\n\n\t$now = time();\n\t$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';\n\t$token = sha1($now . $user->data['user_form_salt'] . $form_name . $token_sid);\n\n\t$s_fields = build_hidden_fields(array(\n\t\t'creation_time' => $now,\n\t\t'form_token'\t=> $token,\n\t));\n\n\t$template->assign_vars(array(\n\t\t'S_FORM_TOKEN'\t=> $s_fields,\n\t));\n}\n\n/**\n* Check the form key. Required for all altering actions not secured by confirm_box\n* @param string  $form_name The name of the form; has to match the name used in add_form_key, otherwise no restrictions apply\n* @param int $timespan The maximum acceptable age for a submitted form in seconds. Defaults to the config setting.\n* @param string $return_page The address for the return link\n* @param bool $trigger If true, the function will triger an error when encountering an invalid form\n*/\nfunction check_form_key($form_name, $timespan = false, $return_page = '', $trigger = false)\n{\n\tglobal $config, $user;\n\n\tif ($timespan === false)\n\t{\n\t\t// we enforce a minimum value of half a minute here.\n\t\t$timespan = ($config['form_token_lifetime'] == -1) ? -1 : max(30, $config['form_token_lifetime']);\n\t}\n\n\tif (isset($_POST['creation_time']) && isset($_POST['form_token']))\n\t{\n\t\t$creation_time\t= abs(request_var('creation_time', 0));\n\t\t$token = request_var('form_token', '');\n\n\t\t$diff = time() - $creation_time;\n\n\t\t// If creation_time and the time() now is zero we can assume it was not a human doing this (the check for if ($diff)...\n\t\tif (defined('DEBUG_TEST') || $diff && ($diff <= $timespan || $timespan === -1))\n\t\t{\n\t\t\t$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';\n\t\t\t$key = sha1($creation_time . $user->data['user_form_salt'] . $form_name . $token_sid);\n\n\t\t\tif ($key === $token)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($trigger)\n\t{\n\t\ttrigger_error($user->lang['FORM_INVALID'] . $return_page);\n\t}\n\n\treturn false;\n}\n\n// Message/Login boxes\n\n/**\n* Build Confirm box\n* @param boolean $check True for checking if confirmed (without any additional parameters) and false for displaying the confirm box\n* @param string $title Title/Message used for confirm box.\n*\t\tmessage text is _CONFIRM appended to title.\n*\t\tIf title cannot be found in user->lang a default one is displayed\n*\t\tIf title_CONFIRM cannot be found in user->lang the text given is used.\n* @param string $hidden Hidden variables\n* @param string $html_body Template used for confirm box\n* @param string $u_action Custom form action\n*/\nfunction confirm_box($check, $title = '', $hidden = '', $html_body = 'confirm_body.html', $u_action = '')\n{\n\tglobal $user, $template, $db;\n\tglobal $phpEx, $phpbb_root_path;\n\n\tif (isset($_POST['cancel']))\n\t{\n\t\treturn false;\n\t}\n\n\t$confirm = false;\n\tif (isset($_POST['confirm']))\n\t{\n\t\t// language frontier\n\t\tif ($_POST['confirm'] === $user->lang['YES'])\n\t\t{\n\t\t\t$confirm = true;\n\t\t}\n\t}\n\n\tif ($check && $confirm)\n\t{\n\t\t$user_id = request_var('confirm_uid', 0);\n\t\t$session_id = request_var('sess', '');\n\t\t$confirm_key = request_var('confirm_key', '');\n\n\t\tif ($user_id != $user->data['user_id'] || $session_id != $user->session_id || !$confirm_key || !$user->data['user_last_confirm_key'] || $confirm_key != $user->data['user_last_confirm_key'])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// Reset user_last_confirm_key\n\t\t$sql = 'UPDATE ' . USERS_TABLE . \" SET user_last_confirm_key = ''\n\t\t\tWHERE user_id = \" . $user->data['user_id'];\n\t\t$db->sql_query($sql);\n\n\t\treturn true;\n\t}\n\telse if ($check)\n\t{\n\t\treturn false;\n\t}\n\n\t$s_hidden_fields = build_hidden_fields(array(\n\t\t'confirm_uid'\t=> $user->data['user_id'],\n\t\t'sess'\t\t\t=> $user->session_id,\n\t\t'sid'\t\t\t=> $user->session_id,\n\t));\n\n\t// generate activation key\n\t$confirm_key = gen_rand_string(10);\n\n\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t{\n\t\tadm_page_header((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]);\n\t}\n\telse\n\t{\n\t\tpage_header(((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]), false);\n\t}\n\n\t$template->set_filenames(array(\n\t\t'body' => $html_body)\n\t);\n\n\t// If activation key already exist, we better do not re-use the key (something very strange is going on...)\n\tif (request_var('confirm_key', ''))\n\t{\n\t\t// This should not occur, therefore we cancel the operation to safe the user\n\t\treturn false;\n\t}\n\n\t// re-add sid / transform & to &amp; for user->page (user->page is always using &)\n\t$use_page = ($u_action) ? $phpbb_root_path . $u_action : $phpbb_root_path . str_replace('&', '&amp;', $user->page['page']);\n\t$u_action = reapply_sid($use_page);\n\t$u_action .= ((strpos($u_action, '?') === false) ? '?' : '&amp;') . 'confirm_key=' . $confirm_key;\n\n\t$template->assign_vars(array(\n\t\t'MESSAGE_TITLE'\t\t=> (!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title],\n\t\t'MESSAGE_TEXT'\t\t=> (!isset($user->lang[$title . '_CONFIRM'])) ? $title : $user->lang[$title . '_CONFIRM'],\n\n\t\t'YES_VALUE'\t\t\t=> $user->lang['YES'],\n\t\t'S_CONFIRM_ACTION'\t=> $u_action,\n\t\t'S_HIDDEN_FIELDS'\t=> $hidden . $s_hidden_fields)\n\t);\n\n\t$sql = 'UPDATE ' . USERS_TABLE . \" SET user_last_confirm_key = '\" . $db->sql_escape($confirm_key) . \"'\n\t\tWHERE user_id = \" . $user->data['user_id'];\n\t$db->sql_query($sql);\n\n\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t{\n\t\tadm_page_footer();\n\t}\n\telse\n\t{\n\t\tpage_footer();\n\t}\n}\n\n/**\n* Generate login box or verify password\n*/\nfunction login_box($redirect = '', $l_explain = '', $l_success = '', $admin = false, $s_display = true)\n{\n\tglobal $db, $user, $template, $auth, $phpEx, $phpbb_root_path, $config;\n\n\tif (!class_exists('phpbb_captcha_factory'))\n\t{\n\t\tinclude($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);\n\t}\n\n\t$err = '';\n\n\t// Make sure user->setup() has been called\n\tif (empty($user->lang))\n\t{\n\t\t$user->setup();\n\t}\n\n\t// Print out error if user tries to authenticate as an administrator without having the privileges...\n\tif ($admin && !$auth->acl_get('a_'))\n\t{\n\t\t// Not authd\n\t\t// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions\n\t\tif ($user->data['is_registered'])\n\t\t{\n\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t}\n\t\ttrigger_error('NO_AUTH_ADMIN');\n\t}\n\n\tif (isset($_POST['login']))\n\t{\n\t\t// Get credential\n\t\tif ($admin)\n\t\t{\n\t\t\t$credential = request_var('credential', '');\n\n\t\t\tif (strspn($credential, 'abcdef0123456789') !== strlen($credential) || strlen($credential) != 32)\n\t\t\t{\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t\t\t}\n\t\t\t\ttrigger_error('NO_AUTH_ADMIN');\n\t\t\t}\n\n\t\t\t$password\t= request_var('password_' . $credential, '', true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$password\t= request_var('password', '', true);\n\t\t}\n\n\t\t$username\t= request_var('username', '', true);\n\t\t$autologin\t= (!empty($_POST['autologin'])) ? true : false;\n\t\t$viewonline = (!empty($_POST['viewonline'])) ? 0 : 1;\n\t\t$admin \t\t= ($admin) ? 1 : 0;\n\t\t$viewonline = ($admin) ? $user->data['session_viewonline'] : $viewonline;\n\n\t\t// Check if the supplied username is equal to the one stored within the database if re-authenticating\n\t\tif ($admin && utf8_clean_string($username) != utf8_clean_string($user->data['username']))\n\t\t{\n\t\t\t// We log the attempt to use a different username...\n\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t\ttrigger_error('NO_AUTH_ADMIN_USER_DIFFER');\n\t\t}\n\n\t\t// If authentication is successful we redirect user to previous page\n\t\t$result = $auth->login($username, $password, $autologin, $viewonline, $admin);\n\n\t\t// If admin authentication and login, we will log if it was a success or not...\n\t\t// We also break the operation on the first non-success login - it could be argued that the user already knows\n\t\tif ($admin)\n\t\t{\n\t\t\tif ($result['status'] == LOGIN_SUCCESS)\n\t\t\t{\n\t\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_SUCCESS');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Only log the failed attempt if a real user tried to.\n\t\t\t\t// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions\n\t\t\t\tif ($user->data['is_registered'])\n\t\t\t\t{\n\t\t\t\t\tadd_log('admin', 'LOG_ADMIN_AUTH_FAIL');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// The result parameter is always an array, holding the relevant information...\n\t\tif ($result['status'] == LOGIN_SUCCESS)\n\t\t{\n\t\t\t$redirect = request_var('redirect', \"{$phpbb_root_path}index.$phpEx\");\n\t\t\t$message = ($l_success) ? $l_success : $user->lang['LOGIN_REDIRECT'];\n\t\t\t$l_redirect = ($admin) ? $user->lang['PROCEED_TO_ACP'] : (($redirect === \"{$phpbb_root_path}index.$phpEx\" || $redirect === \"index.$phpEx\") ? $user->lang['RETURN_INDEX'] : $user->lang['RETURN_PAGE']);\n\n\t\t\t// append/replace SID (may change during the session for AOL users)\n\t\t\t$redirect = reapply_sid($redirect);\n\n\t\t\t// Special case... the user is effectively banned, but we allow founders to login\n\t\t\tif (defined('IN_CHECK_BAN') && $result['user_row']['user_type'] != USER_FOUNDER)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$redirect = meta_refresh(3, $redirect);\n\t\t\ttrigger_error($message . '<br /><br />' . sprintf($l_redirect, '<a href=\"' . $redirect . '\">', '</a>'));\n\t\t}\n\n\t\t// Something failed, determine what...\n\t\tif ($result['status'] == LOGIN_BREAK)\n\t\t{\n\t\t\ttrigger_error($result['error_msg']);\n\t\t}\n\n\t\t// Special cases... determine\n\t\tswitch ($result['status'])\n\t\t{\n\t\t\tcase LOGIN_ERROR_ATTEMPTS:\n\n\t\t\t\t$captcha = phpbb_captcha_factory::get_instance($config['captcha_plugin']);\n\t\t\t\t$captcha->init(CONFIRM_LOGIN);\n\t\t\t\t// $captcha->reset();\n\n\t\t\t\t$template->assign_vars(array(\n\t\t\t\t\t'CAPTCHA_TEMPLATE'\t\t\t=> $captcha->get_template(),\n\t\t\t\t));\n\n\t\t\t\t$err = $user->lang[$result['error_msg']];\n\t\t\tbreak;\n\n\t\t\tcase LOGIN_ERROR_PASSWORD_CONVERT:\n\t\t\t\t$err = sprintf(\n\t\t\t\t\t$user->lang[$result['error_msg']],\n\t\t\t\t\t($config['email_enable']) ? '<a href=\"' . append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=sendpassword') . '\">' : '',\n\t\t\t\t\t($config['email_enable']) ? '</a>' : '',\n\t\t\t\t\t($config['board_contact']) ? '<a href=\"mailto:' . htmlspecialchars($config['board_contact']) . '\">' : '',\n\t\t\t\t\t($config['board_contact']) ? '</a>' : ''\n\t\t\t\t);\n\t\t\tbreak;\n\n\t\t\t// Username, password, etc...\n\t\t\tdefault:\n\t\t\t\t$err = $user->lang[$result['error_msg']];\n\n\t\t\t\t// Assign admin contact to some error messages\n\t\t\t\tif ($result['error_msg'] == 'LOGIN_ERROR_USERNAME' || $result['error_msg'] == 'LOGIN_ERROR_PASSWORD')\n\t\t\t\t{\n\t\t\t\t\t$err = (!$config['board_contact']) ? sprintf($user->lang[$result['error_msg']], '', '') : sprintf($user->lang[$result['error_msg']], '<a href=\"mailto:' . htmlspecialchars($config['board_contact']) . '\">', '</a>');\n\t\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Assign credential for username/password pair\n\t$credential = ($admin) ? md5(unique_id()) : false;\n\n\t$s_hidden_fields = array(\n\t\t'sid'\t\t=> $user->session_id,\n\t);\n\n\tif ($redirect)\n\t{\n\t\t$s_hidden_fields['redirect'] = $redirect;\n\t}\n\n\tif ($admin)\n\t{\n\t\t$s_hidden_fields['credential'] = $credential;\n\t}\n\n\t$s_hidden_fields = build_hidden_fields($s_hidden_fields);\n\n\t$template->assign_vars(array(\n\t\t'LOGIN_ERROR'\t\t=> $err,\n\t\t'LOGIN_EXPLAIN'\t\t=> $l_explain,\n\n\t\t'U_SEND_PASSWORD' \t\t=> ($config['email_enable']) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=sendpassword') : '',\n\t\t'U_RESEND_ACTIVATION'\t=> ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable']) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=resend_act') : '',\n\t\t'U_TERMS_USE'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=terms'),\n\t\t'U_PRIVACY'\t\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=privacy'),\n\n\t\t'S_DISPLAY_FULL_LOGIN'\t=> ($s_display) ? true : false,\n\t\t'S_HIDDEN_FIELDS' \t\t=> $s_hidden_fields,\n\n\t\t'S_ADMIN_AUTH'\t\t\t=> $admin,\n\t\t'USERNAME'\t\t\t\t=> ($admin) ? $user->data['username'] : '',\n\n\t\t'USERNAME_CREDENTIAL'\t=> 'username',\n\t\t'PASSWORD_CREDENTIAL'\t=> ($admin) ? 'password_' . $credential : 'password',\n\t));\n\n\tpage_header($user->lang['LOGIN'], false);\n\n\t$template->set_filenames(array(\n\t\t'body' => 'login_body.html')\n\t);\n\tmake_jumpbox(append_sid(\"{$phpbb_root_path}viewforum.$phpEx\"));\n\n\tpage_footer();\n}\n\n/**\n* Generate forum login box\n*/\nfunction login_forum_box($forum_data)\n{\n\tglobal $db, $config, $user, $template, $phpEx;\n\n\t$password = request_var('password', '', true);\n\n\t$sql = 'SELECT forum_id\n\t\tFROM ' . FORUMS_ACCESS_TABLE . '\n\t\tWHERE forum_id = ' . $forum_data['forum_id'] . '\n\t\t\tAND user_id = ' . $user->data['user_id'] . \"\n\t\t\tAND session_id = '\" . $db->sql_escape($user->session_id) . \"'\";\n\t$result = $db->sql_query($sql);\n\t$row = $db->sql_fetchrow($result);\n\t$db->sql_freeresult($result);\n\n\tif ($row)\n\t{\n\t\treturn true;\n\t}\n\n\tif ($password)\n\t{\n\t\t// Remove expired authorised sessions\n\t\t$sql = 'SELECT f.session_id\n\t\t\tFROM ' . FORUMS_ACCESS_TABLE . ' f\n\t\t\tLEFT JOIN ' . SESSIONS_TABLE . ' s ON (f.session_id = s.session_id)\n\t\t\tWHERE s.session_id IS NULL';\n\t\t$result = $db->sql_query($sql);\n\n\t\tif ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t$sql_in = array();\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$sql_in[] = (string) $row['session_id'];\n\t\t\t}\n\t\t\twhile ($row = $db->sql_fetchrow($result));\n\n\t\t\t// Remove expired sessions\n\t\t\t$sql = 'DELETE FROM ' . FORUMS_ACCESS_TABLE . '\n\t\t\t\tWHERE ' . $db->sql_in_set('session_id', $sql_in);\n\t\t\t$db->sql_query($sql);\n\t\t}\n\t\t$db->sql_freeresult($result);\n\n\t\tif (phpbb_check_hash($password, $forum_data['forum_password']))\n\t\t{\n\t\t\t$sql_ary = array(\n\t\t\t\t'forum_id'\t\t=> (int) $forum_data['forum_id'],\n\t\t\t\t'user_id'\t\t=> (int) $user->data['user_id'],\n\t\t\t\t'session_id'\t=> (string) $user->session_id,\n\t\t\t);\n\n\t\t\t$db->sql_query('INSERT INTO ' . FORUMS_ACCESS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\t\t\treturn true;\n\t\t}\n\n\t\t$template->assign_var('LOGIN_ERROR', $user->lang['WRONG_PASSWORD']);\n\t}\n\n\tpage_header($user->lang['LOGIN'], false);\n\n\t$template->assign_vars(array(\n\t\t'FORUM_NAME'\t\t\t=> isset($forum_data['forum_name']) ? $forum_data['forum_name'] : '',\n\t\t'S_LOGIN_ACTION'\t\t=> build_url(array('f')),\n\t\t'S_HIDDEN_FIELDS'\t\t=> build_hidden_fields(array('f' => $forum_data['forum_id'])))\n\t);\n\n\t$template->set_filenames(array(\n\t\t'body' => 'login_forum.html')\n\t);\n\n\tpage_footer();\n}\n\n// Little helpers\n\n/**\n* Little helper for the build_hidden_fields function\n*/\nfunction _build_hidden_fields($key, $value, $specialchar, $stripslashes)\n{\n\t$hidden_fields = '';\n\n\tif (!is_array($value))\n\t{\n\t\t$value = ($stripslashes) ? stripslashes($value) : $value;\n\t\t$value = ($specialchar) ? htmlspecialchars($value, ENT_COMPAT, 'UTF-8') : $value;\n\n\t\t$hidden_fields .= '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\telse\n\t{\n\t\tforeach ($value as $_key => $_value)\n\t\t{\n\t\t\t$_key = ($stripslashes) ? stripslashes($_key) : $_key;\n\t\t\t$_key = ($specialchar) ? htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') : $_key;\n\n\t\t\t$hidden_fields .= _build_hidden_fields($key . '[' . $_key . ']', $_value, $specialchar, $stripslashes);\n\t\t}\n\t}\n\n\treturn $hidden_fields;\n}\n\n/**\n* Build simple hidden fields from array\n*\n* @param array $field_ary an array of values to build the hidden field from\n* @param bool $specialchar if true, keys and values get specialchared\n* @param bool $stripslashes if true, keys and values get stripslashed\n*\n* @return string the hidden fields\n*/\nfunction build_hidden_fields($field_ary, $specialchar = false, $stripslashes = false)\n{\n\t$s_hidden_fields = '';\n\n\tforeach ($field_ary as $name => $vars)\n\t{\n\t\t$name = ($stripslashes) ? stripslashes($name) : $name;\n\t\t$name = ($specialchar) ? htmlspecialchars($name, ENT_COMPAT, 'UTF-8') : $name;\n\n\t\t$s_hidden_fields .= _build_hidden_fields($name, $vars, $specialchar, $stripslashes);\n\t}\n\n\treturn $s_hidden_fields;\n}\n\n/**\n* Parse cfg file\n*/\nfunction parse_cfg_file($filename, $lines = false)\n{\n\t$parsed_items = array();\n\n\tif ($lines === false)\n\t{\n\t\t$lines = file($filename);\n\t}\n\n\tforeach ($lines as $line)\n\t{\n\t\t$line = trim($line);\n\n\t\tif (!$line || $line[0] == '#' || ($delim_pos = strpos($line, '=')) === false)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Determine first occurrence, since in values the equal sign is allowed\n\t\t$key = htmlspecialchars(strtolower(trim(substr($line, 0, $delim_pos))));\n\t\t$value = trim(substr($line, $delim_pos + 1));\n\n\t\tif (in_array($value, array('off', 'false', '0')))\n\t\t{\n\t\t\t$value = false;\n\t\t}\n\t\telse if (in_array($value, array('on', 'true', '1')))\n\t\t{\n\t\t\t$value = true;\n\t\t}\n\t\telse if (!trim($value))\n\t\t{\n\t\t\t$value = '';\n\t\t}\n\t\telse if (($value[0] == \"'\" && $value[sizeof($value) - 1] == \"'\") || ($value[0] == '\"' && $value[sizeof($value) - 1] == '\"'))\n\t\t{\n\t\t\t$value = htmlspecialchars(substr($value, 1, sizeof($value)-2));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$value = htmlspecialchars($value);\n\t\t}\n\n\t\t$parsed_items[$key] = $value;\n\t}\n\t\n\tif (isset($parsed_items['inherit_from']) && isset($parsed_items['name']) && $parsed_items['inherit_from'] == $parsed_items['name'])\n\t{\n\t\tunset($parsed_items['inherit_from']);\n\t}\n\n\treturn $parsed_items;\n}\n\n/**\n* Add log event\n*/\nfunction add_log()\n{\n\tglobal $db, $user;\n\n\t// In phpBB 3.1.x i want to have logging in a class to be able to control it\n\t// For now, we need a quite hakish approach to circumvent logging for some actions\n\t// @todo implement cleanly\n\tif (!empty($GLOBALS['skip_add_log']))\n\t{\n\t\treturn false;\n\t}\n\n\t$args = func_get_args();\n\n\t$mode\t\t\t= array_shift($args);\n\t$reportee_id\t= ($mode == 'user') ? intval(array_shift($args)) : '';\n\t$forum_id\t\t= ($mode == 'mod') ? intval(array_shift($args)) : '';\n\t$topic_id\t\t= ($mode == 'mod') ? intval(array_shift($args)) : '';\n\t$action\t\t\t= array_shift($args);\n\t$data\t\t\t= (!sizeof($args)) ? '' : serialize($args);\n\n\t$sql_ary = array(\n\t\t'user_id'\t\t=> (empty($user->data)) ? ANONYMOUS : $user->data['user_id'],\n\t\t'log_ip'\t\t=> $user->ip,\n\t\t'log_time'\t\t=> time(),\n\t\t'log_operation'\t=> $action,\n\t\t'log_data'\t\t=> $data,\n\t);\n\n\tswitch ($mode)\n\t{\n\t\tcase 'admin':\n\t\t\t$sql_ary['log_type'] = LOG_ADMIN;\n\t\tbreak;\n\n\t\tcase 'mod':\n\t\t\t$sql_ary += array(\n\t\t\t\t'log_type'\t=> LOG_MOD,\n\t\t\t\t'forum_id'\t=> $forum_id,\n\t\t\t\t'topic_id'\t=> $topic_id\n\t\t\t);\n\t\tbreak;\n\n\t\tcase 'user':\n\t\t\t$sql_ary += array(\n\t\t\t\t'log_type'\t\t=> LOG_USERS,\n\t\t\t\t'reportee_id'\t=> $reportee_id\n\t\t\t);\n\t\tbreak;\n\n\t\tcase 'critical':\n\t\t\t$sql_ary['log_type'] = LOG_CRITICAL;\n\t\tbreak;\n\n\t\tdefault:\n\t\t\treturn false;\n\t}\n\n\t$db->sql_query('INSERT INTO ' . LOG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));\n\n\treturn $db->sql_nextid();\n}\n\n/**\n* Return a nicely formatted backtrace.\n*\n* Turns the array returned by debug_backtrace() into HTML markup.\n* Also filters out absolute paths to phpBB root.\n*\n* @return string\tHTML markup\n*/\nfunction get_backtrace()\n{\n\t$output = '<div style=\"font-family: monospace;\">';\n\t$backtrace = debug_backtrace();\n\n\t// We skip the first one, because it only shows this file/function\n\tunset($backtrace[0]);\n\n\tforeach ($backtrace as $trace)\n\t{\n\t\t// Strip the current directory from path\n\t\t$trace['file'] = (empty($trace['file'])) ? '(not given by php)' : htmlspecialchars(phpbb_filter_root_path($trace['file']));\n\t\t$trace['line'] = (empty($trace['line'])) ? '(not given by php)' : $trace['line'];\n\n\t\t// Only show function arguments for include etc.\n\t\t// Other parameters may contain sensible information\n\t\t$argument = '';\n\t\tif (!empty($trace['args'][0]) && in_array($trace['function'], array('include', 'require', 'include_once', 'require_once')))\n\t\t{\n\t\t\t$argument = htmlspecialchars(phpbb_filter_root_path($trace['args'][0]));\n\t\t}\n\n\t\t$trace['class'] = (!isset($trace['class'])) ? '' : $trace['class'];\n\t\t$trace['type'] = (!isset($trace['type'])) ? '' : $trace['type'];\n\n\t\t$output .= '<br />';\n\t\t$output .= '<b>FILE:</b> ' . $trace['file'] . '<br />';\n\t\t$output .= '<b>LINE:</b> ' . ((!empty($trace['line'])) ? $trace['line'] : '') . '<br />';\n\n\t\t$output .= '<b>CALL:</b> ' . htmlspecialchars($trace['class'] . $trace['type'] . $trace['function']);\n\t\t$output .= '(' . (($argument !== '') ? \"'$argument'\" : '') . ')<br />';\n\t}\n\t$output .= '</div>';\n\treturn $output;\n}\n\n/**\n* This function returns a regular expression pattern for commonly used expressions\n* Use with / as delimiter for email mode and # for url modes\n* mode can be: email|bbcode_htm|url|url_inline|www_url|www_url_inline|relative_url|relative_url_inline|ipv4|ipv6\n*/\nfunction get_preg_expression($mode)\n{\n\tswitch ($mode)\n\t{\n\t\tcase 'email':\n\t\t\t// Regex written by James Watts and Francisco Jose Martin Moreno\n\t\t\t// http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n\t\t\treturn '([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*(?:[\\w\\!\\#$\\%\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]|&amp;)+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,63})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)';\n\t\tbreak;\n\n\t\tcase 'bbcode_htm':\n\t\t\treturn array(\n\t\t\t\t'#<!\\-\\- e \\-\\-><a href=\"mailto:(.*?)\">.*?</a><!\\-\\- e \\-\\->#',\n\t\t\t\t'#<!\\-\\- l \\-\\-><a (?:class=\"[\\w-]+\" )?href=\"(.*?)(?:(&amp;|\\?)sid=[0-9a-f]{32})?\">.*?</a><!\\-\\- l \\-\\->#',\n\t\t\t\t'#<!\\-\\- ([mw]) \\-\\-><a (?:class=\"[\\w-]+\" )?href=\"(.*?)\">.*?</a><!\\-\\- \\1 \\-\\->#',\n\t\t\t\t'#<!\\-\\- s(.*?) \\-\\-><img src=\"\\{SMILIES_PATH\\}\\/.*? \\/><!\\-\\- s\\1 \\-\\->#',\n\t\t\t\t'#<!\\-\\- .*? \\-\\->#s',\n\t\t\t\t'#<.*?>#s',\n\t\t\t);\n\t\tbreak;\n\n\t\t// Whoa these look impressive!\n\t\t// The code to generate the following two regular expressions which match valid IPv4/IPv6 addresses\n\t\t// can be found in the develop directory\n\t\tcase 'ipv4':\n\t\t\treturn '#^(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$#';\n\t\tbreak;\n\n\t\tcase 'ipv6':\n\t\t\treturn '#^(?:(?:(?:[\\dA-F]{1,4}:){6}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:::(?:[\\dA-F]{1,4}:){0,5}(?:[\\dA-F]{1,4}(?::[\\dA-F]{1,4})?|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:):(?:[\\dA-F]{1,4}:){4}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,2}:(?:[\\dA-F]{1,4}:){3}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,3}:(?:[\\dA-F]{1,4}:){2}(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,4}:(?:[\\dA-F]{1,4}:)(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,5}:(?:[\\dA-F]{1,4}:[\\dA-F]{1,4}|(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])))|(?:(?:[\\dA-F]{1,4}:){1,6}:[\\dA-F]{1,4})|(?:(?:[\\dA-F]{1,4}:){1,7}:)|(?:::))$#i';\n\t\tbreak;\n\n\t\tcase 'url':\n\t\tcase 'url_inline':\n\t\t\t$inline = ($mode == 'url') ? ')' : '';\n\t\t\t$scheme = ($mode == 'url') ? '[a-z\\d+\\-.]' : '[a-z\\d+]'; // avoid automatic parsing of \"word\" in \"last word.http://...\"\n\t\t\t// generated with regex generation file in the develop folder\n\t\t\treturn \"[a-z]$scheme*:/{2}(?:(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})+|[0-9.]+|\\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\\])(?::\\d*)?(?:/(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*)*(?:\\?(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?(?:\\#(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?\";\n\t\tbreak;\n\n\t\tcase 'www_url':\n\t\tcase 'www_url_inline':\n\t\t\t$inline = ($mode == 'www_url') ? ')' : '';\n\t\t\treturn \"www\\.(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})+(?::\\d*)?(?:/(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*)*(?:\\?(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?(?:\\#(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?\";\n\t\tbreak;\n\n\t\tcase 'relative_url':\n\t\tcase 'relative_url_inline':\n\t\t\t$inline = ($mode == 'relative_url') ? ')' : '';\n\t\t\treturn \"(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*(?:/(?:[a-z0-9\\-._~!$&'($inline*+,;=:@|]+|%[\\dA-F]{2})*)*(?:\\?(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?(?:\\#(?:[a-z0-9\\-._~!$&'($inline*+,;=:@/?|]+|%[\\dA-F]{2})*)?\";\n\t\tbreak;\n\n\t\tcase 'table_prefix':\n\t\t\treturn '#^[a-zA-Z][a-zA-Z0-9_]*$#';\n\t\tbreak;\n\t}\n\n\treturn '';\n}\n\n/**\n* Generate regexp for naughty words censoring\n* Depends on whether installed PHP version supports unicode properties\n*\n* @param string\t$word\t\t\tword template to be replaced\n* @param bool\t$use_unicode\twhether or not to take advantage of PCRE supporting unicode\n*\n* @return string $preg_expr\t\tregex to use with word censor\n*/\nfunction get_censor_preg_expression($word, $use_unicode = true)\n{\n\tstatic $unicode_support = null;\n\n\t// Check whether PHP version supports unicode properties\n\tif (is_null($unicode_support))\n\t{\n\t\t$unicode_support = ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\\p{L}/u', 'a') !== false) ? true : false;\n\t}\n\n\t// Unescape the asterisk to simplify further conversions\n\t$word = str_replace('\\*', '*', preg_quote($word, '#'));\n\n\tif ($use_unicode && $unicode_support)\n\t{\n\t\t// Replace asterisk(s) inside the pattern, at the start and at the end of it with regexes\n\t\t$word = preg_replace(array('#(?<=[\\p{Nd}\\p{L}_])\\*+(?=[\\p{Nd}\\p{L}_])#iu', '#^\\*+#', '#\\*+$#'), array('([\\x20]*?|[\\p{Nd}\\p{L}_-]*?)', '[\\p{Nd}\\p{L}_-]*?', '[\\p{Nd}\\p{L}_-]*?'), $word);\n\n\t\t// Generate the final substitution\n\t\t$preg_expr = '#(?<![\\p{Nd}\\p{L}_-])(' . $word . ')(?![\\p{Nd}\\p{L}_-])#iu';\n\t}\n\telse\n\t{\n\t\t// Replace the asterisk inside the pattern, at the start and at the end of it with regexes\n\t\t$word = preg_replace(array('#(?<=\\S)\\*+(?=\\S)#iu', '#^\\*+#', '#\\*+$#'), array('(\\x20*?\\S*?)', '\\S*?', '\\S*?'), $word);\n\n\t\t// Generate the final substitution\n\t\t$preg_expr = '#(?<!\\S)(' . $word . ')(?!\\S)#iu';\n\t}\n\n\treturn $preg_expr;\n}\n\n/**\n* Returns the first block of the specified IPv6 address and as many additional\n* ones as specified in the length paramater.\n* If length is zero, then an empty string is returned.\n* If length is greater than 3 the complete IP will be returned\n*/\nfunction short_ipv6($ip, $length)\n{\n\tif ($length < 1)\n\t{\n\t\treturn '';\n\t}\n\n\t// extend IPv6 addresses\n\t$blocks = substr_count($ip, ':') + 1;\n\tif ($blocks < 9)\n\t{\n\t\t$ip = str_replace('::', ':' . str_repeat('0000:', 9 - $blocks), $ip);\n\t}\n\tif ($ip[0] == ':')\n\t{\n\t\t$ip = '0000' . $ip;\n\t}\n\tif ($length < 4)\n\t{\n\t\t$ip = implode(':', array_slice(explode(':', $ip), 0, 1 + $length));\n\t}\n\n\treturn $ip;\n}\n\n/**\n* Wrapper for php's checkdnsrr function.\n*\n* @param string $host\tFully-Qualified Domain Name\n* @param string $type\tResource record type to lookup\n*\t\t\t\t\t\tSupported types are: MX (default), A, AAAA, NS, TXT, CNAME\n*\t\t\t\t\t\tOther types may work or may not work\n*\n* @return mixed\t\ttrue if entry found,\n*\t\t\t\t\tfalse if entry not found,\n*\t\t\t\t\tnull if this function is not supported by this environment\n*\n* Since null can also be returned, you probably want to compare the result\n* with === true or === false,\n*\n* @author bantu\n*/\nfunction phpbb_checkdnsrr($host, $type = 'MX')\n{\n\t// The dot indicates to search the DNS root (helps those having DNS prefixes on the same domain)\n\tif (substr($host, -1) == '.')\n\t{\n\t\t$host_fqdn = $host;\n\t\t$host = substr($host, 0, -1);\n\t}\n\telse\n\t{\n\t\t$host_fqdn = $host . '.';\n\t}\n\t// $host\t\thas format\tsome.host.example.com\n\t// $host_fqdn\thas format\tsome.host.example.com.\n\n\t// If we're looking for an A record we can use gethostbyname()\n\tif ($type == 'A' && function_exists('gethostbyname'))\n\t{\n\t\treturn (@gethostbyname($host_fqdn) == $host_fqdn) ? false : true;\n\t}\n\n\t// checkdnsrr() is available on Windows since PHP 5.3,\n\t// but until 5.3.3 it only works for MX records\n\t// See: http://bugs.php.net/bug.php?id=51844\n\n\t// Call checkdnsrr() if\n\t// we're looking for an MX record or\n\t// we're not on Windows or\n\t// we're running a PHP version where #51844 has been fixed\n\n\t// checkdnsrr() supports AAAA since 5.0.0\n\t// checkdnsrr() supports TXT since 5.2.4\n\tif (\n\t\t($type == 'MX' || DIRECTORY_SEPARATOR != '\\\\' || version_compare(PHP_VERSION, '5.3.3', '>=')) &&\n\t\t($type != 'AAAA' || version_compare(PHP_VERSION, '5.0.0', '>=')) &&\n\t\t($type != 'TXT' || version_compare(PHP_VERSION, '5.2.4', '>=')) &&\n\t\tfunction_exists('checkdnsrr')\n\t)\n\t{\n\t\treturn checkdnsrr($host_fqdn, $type);\n\t}\n\n\t// dns_get_record() is available since PHP 5; since PHP 5.3 also on Windows,\n\t// but on Windows it does not work reliable for AAAA records before PHP 5.3.1\n\n\t// Call dns_get_record() if\n\t// we're not looking for an AAAA record or\n\t// we're not on Windows or\n\t// we're running a PHP version where AAAA lookups work reliable\n\tif (\n\t\t($type != 'AAAA' || DIRECTORY_SEPARATOR != '\\\\' || version_compare(PHP_VERSION, '5.3.1', '>=')) &&\n\t\tfunction_exists('dns_get_record')\n\t)\n\t{\n\t\t// dns_get_record() expects an integer as second parameter\n\t\t// We have to convert the string $type to the corresponding integer constant.\n\t\t$type_constant = 'DNS_' . $type;\n\t\t$type_param = (defined($type_constant)) ? constant($type_constant) : DNS_ANY;\n\n\t\t// dns_get_record() might throw E_WARNING and return false for records that do not exist\n\t\t$resultset = @dns_get_record($host_fqdn, $type_param);\n\n\t\tif (empty($resultset) || !is_array($resultset))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if ($type_param == DNS_ANY)\n\t\t{\n\t\t\t// $resultset is a non-empty array\n\t\t\treturn true;\n\t\t}\n\n\t\tforeach ($resultset as $result)\n\t\t{\n\t\t\tif (\n\t\t\t\tisset($result['host']) && $result['host'] == $host &&\n\t\t\t\tisset($result['type']) && $result['type'] == $type\n\t\t\t)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// If we're on Windows we can still try to call nslookup via exec() as a last resort\n\tif (DIRECTORY_SEPARATOR == '\\\\' && function_exists('exec'))\n\t{\n\t\t@exec('nslookup -type=' . escapeshellarg($type) . ' ' . escapeshellarg($host_fqdn), $output);\n\n\t\t// If output is empty, the nslookup failed\n\t\tif (empty($output))\n\t\t{\n\t\t\treturn NULL;\n\t\t}\n\n\t\tforeach ($output as $line)\n\t\t{\n\t\t\t$line = trim($line);\n\n\t\t\tif (empty($line))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Squash tabs and multiple whitespaces to a single whitespace.\n\t\t\t$line = preg_replace('/\\s+/', ' ', $line);\n\n\t\t\tswitch ($type)\n\t\t\t{\n\t\t\t\tcase 'MX':\n\t\t\t\t\tif (stripos($line, \"$host MX\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'NS':\n\t\t\t\t\tif (stripos($line, \"$host nameserver\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'TXT':\n\t\t\t\t\tif (stripos($line, \"$host text\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'CNAME':\n\t\t\t\t\tif (stripos($line, \"$host canonical name\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tcase 'AAAA':\n\t\t\t\t\t// AAAA records returned by nslookup on Windows XP/2003 have this format.\n\t\t\t\t\t// Later Windows versions use the A record format below for AAAA records.\n\t\t\t\t\tif (stripos($line, \"$host AAAA IPv6 address\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t// No break\n\n\t\t\t\tcase 'A':\n\t\t\t\t\tif (!empty($host_matches))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Second line\n\t\t\t\t\t\tif (stripos($line, \"Address: \") === 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$host_matches = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (stripos($line, \"Name: $host\") === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// First line\n\t\t\t\t\t\t$host_matches = true;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\treturn NULL;\n}\n\n// Handler, header and footer\n\n/**\n* Error and message handler, call with trigger_error if reqd\n*/\nfunction msg_handler($errno, $msg_text, $errfile, $errline)\n{\n\tglobal $cache, $db, $auth, $template, $config, $user;\n\tglobal $phpEx, $phpbb_root_path, $msg_title, $msg_long_text;\n\n\t// Do not display notices if we suppress them via @\n\tif (error_reporting() == 0 && $errno != E_USER_ERROR && $errno != E_USER_WARNING && $errno != E_USER_NOTICE)\n\t{\n\t\treturn;\n\t}\n\n\t// Message handler is stripping text. In case we need it, we are possible to define long text...\n\tif (isset($msg_long_text) && $msg_long_text && !$msg_text)\n\t{\n\t\t$msg_text = $msg_long_text;\n\t}\n\n\tif (!defined('E_DEPRECATED'))\n\t{\n\t\tdefine('E_DEPRECATED', 8192);\n\t}\n\n\tswitch ($errno)\n\t{\n\t\tcase E_NOTICE:\n\t\tcase E_WARNING:\n\n\t\t\t// Check the error reporting level and return if the error level does not match\n\t\t\t// If DEBUG is defined the default level is E_ALL\n\t\t\tif (($errno & ((defined('DEBUG')) ? E_ALL : error_reporting())) == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (strpos($errfile, 'cache') === false && strpos($errfile, 'template.') === false)\n\t\t\t{\n\t\t\t\t$errfile = phpbb_filter_root_path($errfile);\n\t\t\t\t$msg_text = phpbb_filter_root_path($msg_text);\n\t\t\t\t$error_name = ($errno === E_WARNING) ? 'PHP Warning' : 'PHP Notice';\n\t\t\t\techo '<b>[phpBB Debug] ' . $error_name . '</b>: in file <b>' . $errfile . '</b> on line <b>' . $errline . '</b>: <b>' . $msg_text . '</b><br />' . \"\\n\";\n\n\t\t\t\t// we are writing an image - the user won't see the debug, so let's place it in the log\n\t\t\t\tif (defined('IMAGE_OUTPUT') || defined('IN_CRON'))\n\t\t\t\t{\n\t\t\t\t\tadd_log('critical', 'LOG_IMAGE_GENERATION_ERROR', $errfile, $errline, $msg_text);\n\t\t\t\t}\n\t\t\t\t// echo '<br /><br />BACKTRACE<br />' . get_backtrace() . '<br />' . \"\\n\";\n\t\t\t}\n\n\t\t\treturn;\n\n\t\tbreak;\n\n\t\tcase E_USER_ERROR:\n\n\t\t\tif (!empty($user) && !empty($user->lang))\n\t\t\t{\n\t\t\t\t$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;\n\t\t\t\t$msg_title = (!isset($msg_title)) ? $user->lang['GENERAL_ERROR'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);\n\n\t\t\t\t$l_return_index = sprintf($user->lang['RETURN_INDEX'], '<a href=\"' . $phpbb_root_path . '\">', '</a>');\n\t\t\t\t$l_notify = '';\n\n\t\t\t\tif (!empty($config['board_contact']))\n\t\t\t\t{\n\t\t\t\t\t$l_notify = '<p>' . sprintf($user->lang['NOTIFY_ADMIN_EMAIL'], $config['board_contact']) . '</p>';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$msg_title = 'General Error';\n\t\t\t\t$l_return_index = '<a href=\"' . $phpbb_root_path . '\">Return to index page</a>';\n\t\t\t\t$l_notify = '';\n\n\t\t\t\tif (!empty($config['board_contact']))\n\t\t\t\t{\n\t\t\t\t\t$l_notify = '<p>Please notify the board administrator or webmaster: <a href=\"mailto:' . $config['board_contact'] . '\">' . $config['board_contact'] . '</a></p>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$log_text = $msg_text;\n\t\t\t$backtrace = get_backtrace();\n\t\t\tif ($backtrace)\n\t\t\t{\n\t\t\t\t$log_text .= '<br /><br />BACKTRACE<br />' . $backtrace;\n\t\t\t}\n\n\t\t\tif (defined('IN_INSTALL') || defined('DEBUG_EXTRA') || isset($auth) && $auth->acl_get('a_'))\n\t\t\t{\n\t\t\t\t$msg_text = $log_text;\n\t\t\t}\n\n\t\t\tif ((defined('DEBUG') || defined('IN_CRON') || defined('IMAGE_OUTPUT')) && isset($db))\n\t\t\t{\n\t\t\t\t// let's avoid loops\n\t\t\t\t$db->sql_return_on_error(true);\n\t\t\t\tadd_log('critical', 'LOG_GENERAL_ERROR', $msg_title, $log_text);\n\t\t\t\t$db->sql_return_on_error(false);\n\t\t\t}\n\n\t\t\t// Do not send 200 OK, but service unavailable on errors\n\t\t\tsend_status_line(503, 'Service Unavailable');\n\n\t\t\tgarbage_collection();\n\n\t\t\t// Try to not call the adm page data...\n\n\t\t\techo '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">';\n\t\t\techo '<html xmlns=\"http://www.w3.org/1999/xhtml\" dir=\"ltr\">';\n\t\t\techo '<head>';\n\t\t\techo '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />';\n\t\t\techo '<title>' . $msg_title . '</title>';\n\t\t\techo '<style type=\"text/css\">' . \"\\n\" . '/* <![CDATA[ */' . \"\\n\";\n\t\t\techo '* { margin: 0; padding: 0; } html { font-size: 100%; height: 100%; margin-bottom: 1px; background-color: #E4EDF0; } body { font-family: \"Lucida Grande\", Verdana, Helvetica, Arial, sans-serif; color: #536482; background: #E4EDF0; font-size: 62.5%; margin: 0; } ';\n\t\t\techo 'a:link, a:active, a:visited { color: #006699; text-decoration: none; } a:hover { color: #DD6900; text-decoration: underline; } ';\n\t\t\techo '#wrap { padding: 0 20px 15px 20px; min-width: 615px; } #page-header { text-align: right; height: 40px; } #page-footer { clear: both; font-size: 1em; text-align: center; } ';\n\t\t\techo '.panel { margin: 4px 0; background-color: #FFFFFF; border: solid 1px  #A9B8C2; } ';\n\t\t\techo '#errorpage #page-header a { font-weight: bold; line-height: 6em; } #errorpage #content { padding: 10px; } #errorpage #content h1 { line-height: 1.2em; margin-bottom: 0; color: #DF075C; } ';\n\t\t\techo '#errorpage #content div { margin-top: 20px; margin-bottom: 5px; border-bottom: 1px solid #CCCCCC; padding-bottom: 5px; color: #333333; font: bold 1.2em \"Lucida Grande\", Arial, Helvetica, sans-serif; text-decoration: none; line-height: 120%; text-align: left; } ';\n\t\t\techo \"\\n\" . '/* ]]> */' . \"\\n\";\n\t\t\techo '</style>';\n\t\t\techo '</head>';\n\t\t\techo '<body id=\"errorpage\">';\n\t\t\techo '<div id=\"wrap\">';\n\t\t\techo '\t<div id=\"page-header\">';\n\t\t\techo '\t\t' . $l_return_index;\n\t\t\techo '\t</div>';\n\t\t\techo '\t<div id=\"acp\">';\n\t\t\techo '\t<div class=\"panel\">';\n\t\t\techo '\t\t<div id=\"content\">';\n\t\t\techo '\t\t\t<h1>' . $msg_title . '</h1>';\n\n\t\t\techo '\t\t\t<div>' . $msg_text . '</div>';\n\n\t\t\techo $l_notify;\n\n\t\t\techo '\t\t</div>';\n\t\t\techo '\t</div>';\n\t\t\techo '\t</div>';\n\t\t\techo '\t<div id=\"page-footer\">';\n\t\t\techo '\t\tPowered by <a href=\"https://www.phpbb.com/\">phpBB</a>&reg; Forum Software &copy; phpBB Group';\n\t\t\techo '\t</div>';\n\t\t\techo '</div>';\n\t\t\techo '</body>';\n\t\t\techo '</html>';\n\n\t\t\texit_handler();\n\n\t\t\t// On a fatal error (and E_USER_ERROR *is* fatal) we never want other scripts to continue and force an exit here.\n\t\t\texit;\n\t\tbreak;\n\n\t\tcase E_USER_WARNING:\n\t\tcase E_USER_NOTICE:\n\n\t\t\tdefine('IN_ERROR_HANDLER', true);\n\n\t\t\tif (empty($user->data))\n\t\t\t{\n\t\t\t\t$user->session_begin();\n\t\t\t}\n\n\t\t\t// We re-init the auth array to get correct results on login/logout\n\t\t\t$auth->acl($user->data);\n\n\t\t\tif (empty($user->lang))\n\t\t\t{\n\t\t\t\t$user->setup();\n\t\t\t}\n\n\t\t\tif ($msg_text == 'ERROR_NO_ATTACHMENT' || $msg_text == 'NO_FORUM' || $msg_text == 'NO_TOPIC' || $msg_text == 'NO_USER')\n\t\t\t{\n\t\t\t\tsend_status_line(404, 'Not Found');\n\t\t\t}\n\n\t\t\t$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;\n\t\t\t$msg_title = (!isset($msg_title)) ? $user->lang['INFORMATION'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);\n\n\t\t\tif (!defined('HEADER_INC'))\n\t\t\t{\n\t\t\t\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t\t\t\t{\n\t\t\t\t\tadm_page_header($msg_title);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpage_header($msg_title, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$template->set_filenames(array(\n\t\t\t\t'body' => 'message_body.html')\n\t\t\t);\n\n\t\t\t$template->assign_vars(array(\n\t\t\t\t'MESSAGE_TITLE'\t\t=> $msg_title,\n\t\t\t\t'MESSAGE_TEXT'\t\t=> $msg_text,\n\t\t\t\t'S_USER_WARNING'\t=> ($errno == E_USER_WARNING) ? true : false,\n\t\t\t\t'S_USER_NOTICE'\t\t=> ($errno == E_USER_NOTICE) ? true : false)\n\t\t\t);\n\n\t\t\t// We do not want the cron script to be called on error messages\n\t\t\tdefine('IN_CRON', true);\n\n\t\t\tif (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])\n\t\t\t{\n\t\t\t\tadm_page_footer();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpage_footer();\n\t\t\t}\n\n\t\t\texit_handler();\n\t\tbreak;\n\n\t\t// PHP4 compatibility\n\t\tcase E_DEPRECATED:\n\t\t\treturn true;\n\t\tbreak;\n\t}\n\n\t// If we notice an error not handled here we pass this back to PHP by returning false\n\t// This may not work for all php versions\n\treturn false;\n}\n\n/**\n* Removes absolute path to phpBB root directory from error messages\n* and converts backslashes to forward slashes.\n*\n* @param string $errfile\tAbsolute file path\n*\t\t\t\t\t\t\t(e.g. /var/www/phpbb3/phpBB/includes/functions.php)\n*\t\t\t\t\t\t\tPlease note that if $errfile is outside of the phpBB root,\n*\t\t\t\t\t\t\tthe root path will not be found and can not be filtered.\n* @return string\t\t\tRelative file path\n*\t\t\t\t\t\t\t(e.g. /includes/functions.php)\n*/\nfunction phpbb_filter_root_path($errfile)\n{\n\tstatic $root_path;\n\n\tif (empty($root_path))\n\t{\n\t\t$root_path = phpbb_realpath(dirname(__FILE__) . '/../');\n\t}\n\n\treturn str_replace(array($root_path, '\\\\'), array('[ROOT]', '/'), $errfile);\n}\n\n/**\n* Queries the session table to get information about online guests\n* @param int $item_id Limits the search to the item with this id\n* @param string $item The name of the item which is stored in the session table as session_{$item}_id\n* @return int The number of active distinct guest sessions\n*/\nfunction obtain_guest_count($item_id = 0, $item = 'forum')\n{\n\tglobal $db, $config;\n\n\tif ($item_id)\n\t{\n\t\t$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;\n\t}\n\telse\n\t{\n\t\t$reading_sql = '';\n\t}\n\t$time = (time() - (intval($config['load_online_time']) * 60));\n\n\t// Get number of online guests\n\n\tif ($db->sql_layer === 'sqlite')\n\t{\n\t\t$sql = 'SELECT COUNT(session_ip) as num_guests\n\t\t\tFROM (\n\t\t\t\tSELECT DISTINCT s.session_ip\n\t\t\t\tFROM ' . SESSIONS_TABLE . ' s\n\t\t\t\tWHERE s.session_user_id = ' . ANONYMOUS . '\n\t\t\t\t\tAND s.session_time >= ' . ($time - ((int) ($time % 60))) .\n\t\t\t\t$reading_sql .\n\t\t\t')';\n\t}\n\telse\n\t{\n\t\t$sql = 'SELECT COUNT(DISTINCT s.session_ip) as num_guests\n\t\t\tFROM ' . SESSIONS_TABLE . ' s\n\t\t\tWHERE s.session_user_id = ' . ANONYMOUS . '\n\t\t\t\tAND s.session_time >= ' . ($time - ((int) ($time % 60))) .\n\t\t\t$reading_sql;\n\t}\n\t$result = $db->sql_query($sql);\n\t$guests_online = (int) $db->sql_fetchfield('num_guests');\n\t$db->sql_freeresult($result);\n\n\treturn $guests_online;\n}\n\n/**\n* Queries the session table to get information about online users\n* @param int $item_id Limits the search to the item with this id\n* @param string $item The name of the item which is stored in the session table as session_{$item}_id\n* @return array An array containing the ids of online, hidden and visible users, as well as statistical info\n*/\nfunction obtain_users_online($item_id = 0, $item = 'forum')\n{\n\tglobal $db, $config, $user;\n\n\t$reading_sql = '';\n\tif ($item_id !== 0)\n\t{\n\t\t$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;\n\t}\n\n\t$online_users = array(\n\t\t'online_users'\t\t\t=> array(),\n\t\t'hidden_users'\t\t\t=> array(),\n\t\t'total_online'\t\t\t=> 0,\n\t\t'visible_online'\t\t=> 0,\n\t\t'hidden_online'\t\t\t=> 0,\n\t\t'guests_online'\t\t\t=> 0,\n\t);\n\n\tif ($config['load_online_guests'])\n\t{\n\t\t$online_users['guests_online'] = obtain_guest_count($item_id, $item);\n\t}\n\n\t// a little discrete magic to cache this for 30 seconds\n\t$time = (time() - (intval($config['load_online_time']) * 60));\n\n\t$sql = 'SELECT s.session_user_id, s.session_ip, s.session_viewonline\n\t\tFROM ' . SESSIONS_TABLE . ' s\n\t\tWHERE s.session_time >= ' . ($time - ((int) ($time % 30))) .\n\t\t\t$reading_sql .\n\t\t' AND s.session_user_id <> ' . ANONYMOUS;\n\t$result = $db->sql_query($sql);\n\n\twhile ($row = $db->sql_fetchrow($result))\n\t{\n\t\t// Skip multiple sessions for one user\n\t\tif (!isset($online_users['online_users'][$row['session_user_id']]))\n\t\t{\n\t\t\t$online_users['online_users'][$row['session_user_id']] = (int) $row['session_user_id'];\n\t\t\tif ($row['session_viewonline'])\n\t\t\t{\n\t\t\t\t$online_users['visible_online']++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$online_users['hidden_users'][$row['session_user_id']] = (int) $row['session_user_id'];\n\t\t\t\t$online_users['hidden_online']++;\n\t\t\t}\n\t\t}\n\t}\n\t$online_users['total_online'] = $online_users['guests_online'] + $online_users['visible_online'] + $online_users['hidden_online'];\n\t$db->sql_freeresult($result);\n\n\treturn $online_users;\n}\n\n/**\n* Uses the result of obtain_users_online to generate a localized, readable representation.\n* @param mixed $online_users result of obtain_users_online - array with user_id lists for total, hidden and visible users, and statistics\n* @param int $item_id Indicate that the data is limited to one item and not global\n* @param string $item The name of the item which is stored in the session table as session_{$item}_id\n* @return array An array containing the string for output to the template\n*/\nfunction obtain_users_online_string($online_users, $item_id = 0, $item = 'forum')\n{\n\tglobal $config, $db, $user, $auth;\n\n\t$user_online_link = $online_userlist = '';\n\t// Need caps version of $item for language-strings\n\t$item_caps = strtoupper($item);\n\n\tif (sizeof($online_users['online_users']))\n\t{\n\t\t$sql = 'SELECT username, username_clean, user_id, user_type, user_allow_viewonline, user_colour\n\t\t\t\tFROM ' . USERS_TABLE . '\n\t\t\t\tWHERE ' . $db->sql_in_set('user_id', $online_users['online_users']) . '\n\t\t\t\tORDER BY username_clean ASC';\n\t\t$result = $db->sql_query($sql);\n\n\t\twhile ($row = $db->sql_fetchrow($result))\n\t\t{\n\t\t\t// User is logged in and therefore not a guest\n\t\t\tif ($row['user_id'] != ANONYMOUS)\n\t\t\t{\n\t\t\t\tif (isset($online_users['hidden_users'][$row['user_id']]))\n\t\t\t\t{\n\t\t\t\t\t$row['username'] = '<em>' . $row['username'] . '</em>';\n\t\t\t\t}\n\n\t\t\t\tif (!isset($online_users['hidden_users'][$row['user_id']]) || $auth->acl_get('u_viewonline'))\n\t\t\t\t{\n\t\t\t\t\t$user_online_link = get_username_string(($row['user_type'] <> USER_IGNORE) ? 'full' : 'no_profile', $row['user_id'], $row['username'], $row['user_colour']);\n\t\t\t\t\t$online_userlist .= ($online_userlist != '') ? ', ' . $user_online_link : $user_online_link;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$db->sql_freeresult($result);\n\t}\n\n\tif (!$online_userlist)\n\t{\n\t\t$online_userlist = $user->lang['NO_ONLINE_USERS'];\n\t}\n\n\tif ($item_id === 0)\n\t{\n\t\t$online_userlist = $user->lang['REGISTERED_USERS'] . ' ' . $online_userlist;\n\t}\n\telse if ($config['load_online_guests'])\n\t{\n\t\t$l_online = ($online_users['guests_online'] === 1) ? $user->lang['BROWSING_' . $item_caps . '_GUEST'] : $user->lang['BROWSING_' . $item_caps . '_GUESTS'];\n\t\t$online_userlist = sprintf($l_online, $online_userlist, $online_users['guests_online']);\n\t}\n\telse\n\t{\n\t\t$online_userlist = sprintf($user->lang['BROWSING_' . $item_caps], $online_userlist);\n\t}\n\t// Build online listing\n\t$vars_online = array(\n\t\t'ONLINE'\t=> array('total_online', 'l_t_user_s', 0),\n\t\t'REG'\t\t=> array('visible_online', 'l_r_user_s', !$config['load_online_guests']),\n\t\t'HIDDEN'\t=> array('hidden_online', 'l_h_user_s', $config['load_online_guests']),\n\t\t'GUEST'\t\t=> array('guests_online', 'l_g_user_s', 0)\n\t);\n\n\tforeach ($vars_online as $l_prefix => $var_ary)\n\t{\n\t\tif ($var_ary[2])\n\t\t{\n\t\t\t$l_suffix = '_AND';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$l_suffix = '';\n\t\t}\n\t\tswitch ($online_users[$var_ary[0]])\n\t\t{\n\t\t\tcase 0:\n\t\t\t\t${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_ZERO_TOTAL' . $l_suffix];\n\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\t${$var_ary[1]} = $user->lang[$l_prefix . '_USER_TOTAL' . $l_suffix];\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_TOTAL' . $l_suffix];\n\t\t\tbreak;\n\t\t}\n\t}\n\tunset($vars_online);\n\n\t$l_online_users = sprintf($l_t_user_s, $online_users['total_online']);\n\t$l_online_users .= sprintf($l_r_user_s, $online_users['visible_online']);\n\t$l_online_users .= sprintf($l_h_user_s, $online_users['hidden_online']);\n\n\tif ($config['load_online_guests'])\n\t{\n\t\t$l_online_users .= sprintf($l_g_user_s, $online_users['guests_online']);\n\t}\n\n\n\n\treturn array(\n\t\t'online_userlist'\t=> $online_userlist,\n\t\t'l_online_users'\t=> $l_online_users,\n\t);\n}\n\n/**\n* Get option bitfield from custom data\n*\n* @param int\t$bit\t\tThe bit/value to get\n* @param int\t$data\t\tCurrent bitfield to check\n* @return bool\tReturns true if value of constant is set in bitfield, else false\n*/\nfunction phpbb_optionget($bit, $data)\n{\n\treturn ($data & 1 << (int) $bit) ? true : false;\n}\n\n/**\n* Set option bitfield\n*\n* @param int\t$bit\t\tThe bit/value to set/unset\n* @param bool\t$set\t\tTrue if option should be set, false if option should be unset.\n* @param int\t$data\t\tCurrent bitfield to change\n*\n* @return int\tThe new bitfield\n*/\nfunction phpbb_optionset($bit, $set, $data)\n{\n\tif ($set && !($data & 1 << $bit))\n\t{\n\t\t$data += 1 << $bit;\n\t}\n\telse if (!$set && ($data & 1 << $bit))\n\t{\n\t\t$data -= 1 << $bit;\n\t}\n\n\treturn $data;\n}\n\n/**\n* Login using http authenticate.\n*\n* @param array\t$param\t\tParameter array, see $param_defaults array.\n*\n* @return null\n*/\nfunction phpbb_http_login($param)\n{\n\tglobal $auth, $user;\n\tglobal $config;\n\n\t$param_defaults = array(\n\t\t'auth_message'\t=> '',\n\n\t\t'autologin'\t\t=> false,\n\t\t'viewonline'\t=> true,\n\t\t'admin'\t\t\t=> false,\n\t);\n\n\t// Overwrite default values with passed values\n\t$param = array_merge($param_defaults, $param);\n\n\t// User is already logged in\n\t// We will not overwrite his session\n\tif (!empty($user->data['is_registered']))\n\t{\n\t\treturn;\n\t}\n\n\t// $_SERVER keys to check\n\t$username_keys = array(\n\t\t'PHP_AUTH_USER',\n\t\t'Authorization',\n\t\t'REMOTE_USER', 'REDIRECT_REMOTE_USER',\n\t\t'HTTP_AUTHORIZATION', 'REDIRECT_HTTP_AUTHORIZATION',\n\t\t'REMOTE_AUTHORIZATION', 'REDIRECT_REMOTE_AUTHORIZATION',\n\t\t'AUTH_USER',\n\t);\n\n\t$password_keys = array(\n\t\t'PHP_AUTH_PW',\n\t\t'REMOTE_PASSWORD',\n\t\t'AUTH_PASSWORD',\n\t);\n\n\t$username = null;\n\tforeach ($username_keys as $k)\n\t{\n\t\tif (isset($_SERVER[$k]))\n\t\t{\n\t\t\t$username = $_SERVER[$k];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t$password = null;\n\tforeach ($password_keys as $k)\n\t{\n\t\tif (isset($_SERVER[$k]))\n\t\t{\n\t\t\t$password = $_SERVER[$k];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Decode encoded information (IIS, CGI, FastCGI etc.)\n\tif (!is_null($username) && is_null($password) && strpos($username, 'Basic ') === 0)\n\t{\n\t\tlist($username, $password) = explode(':', base64_decode(substr($username, 6)), 2);\n\t}\n\n\tif (!is_null($username) && !is_null($password))\n\t{\n\t\tset_var($username, $username, 'string', true);\n\t\tset_var($password, $password, 'string', true);\n\n\t\t$auth_result = $auth->login($username, $password, $param['autologin'], $param['viewonline'], $param['admin']);\n\n\t\tif ($auth_result['status'] == LOGIN_SUCCESS)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\telse if ($auth_result['status'] == LOGIN_ERROR_ATTEMPTS)\n\t\t{\n\t\t\tsend_status_line(401, 'Unauthorized');\n\n\t\t\ttrigger_error('NOT_AUTHORISED');\n\t\t}\n\t}\n\n\t// Prepend sitename to auth_message\n\t$param['auth_message'] = ($param['auth_message'] === '') ? $config['sitename'] : $config['sitename'] . ' - ' . $param['auth_message'];\n\n\t// We should probably filter out non-ASCII characters - RFC2616\n\t$param['auth_message'] = preg_replace('/[\\x80-\\xFF]/', '?', $param['auth_message']);\n\n\theader('WWW-Authenticate: Basic realm=\"' . $param['auth_message'] . '\"');\n\tsend_status_line(401, 'Unauthorized');\n\n\ttrigger_error('NOT_AUTHORISED');\n}\n\n/**\n* Generate page header\n*/\nfunction page_header($page_title = '', $display_online_list = true, $item_id = 0, $item = 'forum')\n{\n\tglobal $db, $config, $template, $SID, $_SID, $_EXTRA_URL, $user, $auth, $phpEx, $phpbb_root_path;\n\n\tif (defined('HEADER_INC'))\n\t{\n\t\treturn;\n\t}\n\n\tdefine('HEADER_INC', true);\n\n\t// gzip_compression\n\tif ($config['gzip_compress'])\n\t{\n\t\t// to avoid partially compressed output resulting in blank pages in\n\t\t// the browser or error messages, compression is disabled in a few cases:\n\t\t//\n\t\t// 1) if headers have already been sent, this indicates plaintext output\n\t\t//    has been started so further content must not be compressed\n\t\t// 2) the length of the current output buffer is non-zero. This means\n\t\t//    there is already some uncompressed content in this output buffer\n\t\t//    so further output must not be compressed\n\t\t// 3) if more than one level of output buffering is used because we\n\t\t//    cannot test all output buffer level content lengths. One level\n\t\t//    could be caused by php.ini output_buffering. Anything\n\t\t//    beyond that is manual, so the code wrapping phpBB in output buffering\n\t\t//    can easily compress the output itself.\n\t\t//\n\t\tif (@extension_loaded('zlib') && !headers_sent() && ob_get_level() <= 1 && ob_get_length() == 0)\n\t\t{\n\t\t\tob_start('ob_gzhandler');\n\t\t}\n\t}\n\n\t// Generate logged in/logged out status\n\tif ($user->data['user_id'] != ANONYMOUS)\n\t{\n\t\t$u_login_logout = append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=logout', true, $user->session_id);\n\t\t$l_login_logout = sprintf($user->lang['LOGOUT_USER'], $user->data['username']);\n\t}\n\telse\n\t{\n\t\t$u_login_logout = append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=login');\n\t\t$l_login_logout = $user->lang['LOGIN'];\n\t}\n\n\t// Last visit date/time\n\t$s_last_visit = ($user->data['user_id'] != ANONYMOUS) ? $user->format_date($user->data['session_last_visit']) : '';\n\n\t// Get users online list ... if required\n\t$l_online_users = $online_userlist = $l_online_record = $l_online_time = '';\n\n\tif ($config['load_online'] && $config['load_online_time'] && $display_online_list)\n\t{\n\t\t/**\n\t\t* Load online data:\n\t\t* For obtaining another session column use $item and $item_id in the function-parameter, whereby the column is session_{$item}_id.\n\t\t*/\n\t\t$item_id = max($item_id, 0);\n\n\t\t$online_users = obtain_users_online($item_id, $item);\n\t\t$user_online_strings = obtain_users_online_string($online_users, $item_id, $item);\n\n\t\t$l_online_users = $user_online_strings['l_online_users'];\n\t\t$online_userlist = $user_online_strings['online_userlist'];\n\t\t$total_online_users = $online_users['total_online'];\n\n\t\tif ($total_online_users > $config['record_online_users'])\n\t\t{\n\t\t\tset_config('record_online_users', $total_online_users, true);\n\t\t\tset_config('record_online_date', time(), true);\n\t\t}\n\n\t\t$l_online_record = sprintf($user->lang['RECORD_ONLINE_USERS'], $config['record_online_users'], $user->format_date($config['record_online_date'], false, true));\n\n\t\t$l_online_time = ($config['load_online_time'] == 1) ? 'VIEW_ONLINE_TIME' : 'VIEW_ONLINE_TIMES';\n\t\t$l_online_time = sprintf($user->lang[$l_online_time], $config['load_online_time']);\n\t}\n\n\t$l_privmsgs_text = $l_privmsgs_text_unread = '';\n\t$s_privmsg_new = false;\n\n\t// Obtain number of new private messages if user is logged in\n\tif (!empty($user->data['is_registered']))\n\t{\n\t\tif ($user->data['user_new_privmsg'])\n\t\t{\n\t\t\t$l_message_new = ($user->data['user_new_privmsg'] == 1) ? $user->lang['NEW_PM'] : $user->lang['NEW_PMS'];\n\t\t\t$l_privmsgs_text = sprintf($l_message_new, $user->data['user_new_privmsg']);\n\n\t\t\tif (!$user->data['user_last_privmsg'] || $user->data['user_last_privmsg'] > $user->data['session_last_visit'])\n\t\t\t{\n\t\t\t\t$sql = 'UPDATE ' . USERS_TABLE . '\n\t\t\t\t\tSET user_last_privmsg = ' . $user->data['session_last_visit'] . '\n\t\t\t\t\tWHERE user_id = ' . $user->data['user_id'];\n\t\t\t\t$db->sql_query($sql);\n\n\t\t\t\t$s_privmsg_new = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$s_privmsg_new = false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$l_privmsgs_text = $user->lang['NO_NEW_PM'];\n\t\t\t$s_privmsg_new = false;\n\t\t}\n\n\t\t$l_privmsgs_text_unread = '';\n\n\t\tif ($user->data['user_unread_privmsg'] && $user->data['user_unread_privmsg'] != $user->data['user_new_privmsg'])\n\t\t{\n\t\t\t$l_message_unread = ($user->data['user_unread_privmsg'] == 1) ? $user->lang['UNREAD_PM'] : $user->lang['UNREAD_PMS'];\n\t\t\t$l_privmsgs_text_unread = sprintf($l_message_unread, $user->data['user_unread_privmsg']);\n\t\t}\n\t}\n\n\t$forum_id = request_var('f', 0);\n\t$topic_id = request_var('t', 0);\n\n\t$s_feed_news = false;\n\n\t// Get option for news\n\tif ($config['feed_enable'])\n\t{\n\t\t$sql = 'SELECT forum_id\n\t\t\tFROM ' . FORUMS_TABLE . '\n\t\t\tWHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');\n\t\t$result = $db->sql_query_limit($sql, 1, 0, 600);\n\t\t$s_feed_news = (int) $db->sql_fetchfield('forum_id');\n\t\t$db->sql_freeresult($result);\n\t}\n\n\t// Determine board url - we may need it later\n\t$board_url = generate_board_url() . '/';\n\t$web_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? $board_url : $phpbb_root_path;\n\n\t// Which timezone?\n\t$tz = ($user->data['user_id'] != ANONYMOUS) ? strval(doubleval($user->data['user_timezone'])) : strval(doubleval($config['board_timezone']));\n\n\t// Send a proper content-language to the output\n\t$user_lang = $user->lang['USER_LANG'];\n\tif (strpos($user_lang, '-x-') !== false)\n\t{\n\t\t$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));\n\t}\n\n\t$s_search_hidden_fields = array();\n\tif ($_SID)\n\t{\n\t\t$s_search_hidden_fields['sid'] = $_SID;\n\t}\n\n\tif (!empty($_EXTRA_URL))\n\t{\n\t\tforeach ($_EXTRA_URL as $url_param)\n\t\t{\n\t\t\t$url_param = explode('=', $url_param, 2);\n\t\t\t$s_search_hidden_fields[$url_param[0]] = $url_param[1];\n\t\t}\n\t}\n\n\t// The following assigns all _common_ variables that may be used at any point in a template.\n\t$template->assign_vars(array(\n\t\t'SITENAME'\t\t\t\t\t\t=> $config['sitename'],\n\t\t'SITE_DESCRIPTION'\t\t\t\t=> $config['site_desc'],\n\t\t'PAGE_TITLE'\t\t\t\t\t=> $page_title,\n\t\t'SCRIPT_NAME'\t\t\t\t\t=> str_replace('.' . $phpEx, '', $user->page['page_name']),\n\t\t'LAST_VISIT_DATE'\t\t\t\t=> sprintf($user->lang['YOU_LAST_VISIT'], $s_last_visit),\n\t\t'LAST_VISIT_YOU'\t\t\t\t=> $s_last_visit,\n\t\t'CURRENT_TIME'\t\t\t\t\t=> sprintf($user->lang['CURRENT_TIME'], $user->format_date(time(), false, true)),\n\t\t'TOTAL_USERS_ONLINE'\t\t\t=> $l_online_users,\n\t\t'LOGGED_IN_USER_LIST'\t\t\t=> $online_userlist,\n\t\t'RECORD_USERS'\t\t\t\t\t=> $l_online_record,\n\t\t'PRIVATE_MESSAGE_INFO'\t\t\t=> $l_privmsgs_text,\n\t\t'PRIVATE_MESSAGE_INFO_UNREAD'\t=> $l_privmsgs_text_unread,\n\n\t\t'S_USER_NEW_PRIVMSG'\t\t\t=> $user->data['user_new_privmsg'],\n\t\t'S_USER_UNREAD_PRIVMSG'\t\t\t=> $user->data['user_unread_privmsg'],\n\t\t'S_USER_NEW'\t\t\t\t\t=> $user->data['user_new'],\n\n\t\t'SID'\t\t\t\t=> $SID,\n\t\t'_SID'\t\t\t\t=> $_SID,\n\t\t'SESSION_ID'\t\t=> $user->session_id,\n\t\t'ROOT_PATH'\t\t\t=> $phpbb_root_path,\n\t\t'BOARD_URL'\t\t\t=> $board_url,\n\n\t\t'L_LOGIN_LOGOUT'\t=> $l_login_logout,\n\t\t'L_INDEX'\t\t\t=> $user->lang['FORUM_INDEX'],\n\t\t'L_ONLINE_EXPLAIN'\t=> $l_online_time,\n\n\t\t'U_PRIVATEMSGS'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;folder=inbox'),\n\t\t'U_RETURN_INBOX'\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;folder=inbox'),\n\t\t'U_POPUP_PM'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;mode=popup'),\n\t\t'UA_POPUP_PM'\t\t\t=> addslashes(append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'i=pm&amp;mode=popup')),\n\t\t'U_MEMBERLIST'\t\t\t=> append_sid(\"{$phpbb_root_path}memberlist.$phpEx\"),\n\t\t'U_VIEWONLINE'\t\t\t=> ($auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')) ? append_sid(\"{$phpbb_root_path}viewonline.$phpEx\") : '',\n\t\t'U_LOGIN_LOGOUT'\t\t=> $u_login_logout,\n\t\t'U_INDEX'\t\t\t\t=> append_sid(\"{$phpbb_root_path}index.$phpEx\"),\n\t\t'U_SEARCH'\t\t\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\"),\n\t\t'U_REGISTER'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=register'),\n\t\t'U_PROFILE'\t\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\"),\n\t\t'U_MODCP'\t\t\t\t=> append_sid(\"{$phpbb_root_path}mcp.$phpEx\", false, true, $user->session_id),\n\t\t'U_FAQ'\t\t\t\t\t=> append_sid(\"{$phpbb_root_path}faq.$phpEx\"),\n\t\t'U_SEARCH_SELF'\t\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=egosearch'),\n\t\t'U_SEARCH_NEW'\t\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=newposts'),\n\t\t'U_SEARCH_UNANSWERED'\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=unanswered'),\n\t\t'U_SEARCH_UNREAD'\t\t=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=unreadposts'),\n\t\t'U_SEARCH_ACTIVE_TOPICS'=> append_sid(\"{$phpbb_root_path}search.$phpEx\", 'search_id=active_topics'),\n\t\t'U_DELETE_COOKIES'\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=delete_cookies'),\n\t\t'U_TEAM'\t\t\t\t=> ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')) ? '' : append_sid(\"{$phpbb_root_path}memberlist.$phpEx\", 'mode=leaders'),\n\t\t'U_TERMS_USE'\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=terms'),\n\t\t'U_PRIVACY'\t\t\t\t=> append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=privacy'),\n\t\t'U_RESTORE_PERMISSIONS'\t=> ($user->data['user_perm_from'] && $auth->acl_get('a_switchperm')) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=restore_perm') : '',\n\t\t'U_FEED'\t\t\t\t=> generate_board_url() . \"/feed.$phpEx\",\n\n\t\t'S_USER_LOGGED_IN'\t\t=> ($user->data['user_id'] != ANONYMOUS) ? true : false,\n\t\t'S_AUTOLOGIN_ENABLED'\t=> ($config['allow_autologin']) ? true : false,\n\t\t'S_BOARD_DISABLED'\t\t=> ($config['board_disable']) ? true : false,\n\t\t'S_REGISTERED_USER'\t\t=> (!empty($user->data['is_registered'])) ? true : false,\n\t\t'S_IS_BOT'\t\t\t\t=> (!empty($user->data['is_bot'])) ? true : false,\n\t\t'S_USER_PM_POPUP'\t\t=> $user->optionget('popuppm'),\n\t\t'S_USER_LANG'\t\t\t=> $user_lang,\n\t\t'S_USER_BROWSER'\t\t=> (isset($user->data['session_browser'])) ? $user->data['session_browser'] : $user->lang['UNKNOWN_BROWSER'],\n\t\t'S_USERNAME'\t\t\t=> $user->data['username'],\n\t\t'S_CONTENT_DIRECTION'\t=> $user->lang['DIRECTION'],\n\t\t'S_CONTENT_FLOW_BEGIN'\t=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',\n\t\t'S_CONTENT_FLOW_END'\t=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',\n\t\t'S_CONTENT_ENCODING'\t=> 'UTF-8',\n\t\t'S_TIMEZONE'\t\t\t=> ($user->data['user_dst'] || ($user->data['user_id'] == ANONYMOUS && $config['board_dst'])) ? sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], $user->lang['tz']['dst']) : sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], ''),\n\t\t'S_DISPLAY_ONLINE_LIST'\t=> ($l_online_time) ? 1 : 0,\n\t\t'S_DISPLAY_SEARCH'\t\t=> (!$config['load_search']) ? 0 : (isset($auth) ? ($auth->acl_get('u_search') && $auth->acl_getf_global('f_search')) : 1),\n\t\t'S_DISPLAY_PM'\t\t\t=> ($config['allow_privmsg'] && !empty($user->data['is_registered']) && ($auth->acl_get('u_readpm') || $auth->acl_get('u_sendpm'))) ? true : false,\n\t\t'S_DISPLAY_MEMBERLIST'\t=> (isset($auth)) ? $auth->acl_get('u_viewprofile') : 0,\n\t\t'S_NEW_PM'\t\t\t\t=> ($s_privmsg_new) ? 1 : 0,\n\t\t'S_REGISTER_ENABLED'\t=> ($config['require_activation'] != USER_ACTIVATION_DISABLE) ? true : false,\n\t\t'S_FORUM_ID'\t\t\t=> $forum_id,\n\t\t'S_TOPIC_ID'\t\t\t=> $topic_id,\n\n\t\t'S_LOGIN_ACTION'\t\t=> ((!defined('ADMIN_START')) ? append_sid(\"{$phpbb_root_path}ucp.$phpEx\", 'mode=login') : append_sid(\"index.$phpEx\", false, true, $user->session_id)),\n\t\t'S_LOGIN_REDIRECT'\t\t=> build_hidden_fields(array('redirect' => build_url())),\n\n\t\t'S_ENABLE_FEEDS'\t\t\t=> ($config['feed_enable']) ? true : false,\n\t\t'S_ENABLE_FEEDS_OVERALL'\t=> ($config['feed_overall']) ? true : false,\n\t\t'S_ENABLE_FEEDS_FORUMS'\t\t=> ($config['feed_overall_forums']) ? true : false,\n\t\t'S_ENABLE_FEEDS_TOPICS'\t\t=> ($config['feed_topics_new']) ? true : false,\n\t\t'S_ENABLE_FEEDS_TOPICS_ACTIVE'\t=> ($config['feed_topics_active']) ? true : false,\n\t\t'S_ENABLE_FEEDS_NEWS'\t\t=> ($s_feed_news) ? true : false,\n\n\t\t'S_LOAD_UNREADS'\t\t\t=> ($config['load_unreads_search'] && ($config['load_anon_lastread'] || $user->data['is_registered'])) ? true : false,\n\n\t\t'S_SEARCH_HIDDEN_FIELDS'\t=> build_hidden_fields($s_search_hidden_fields),\n\n\t\t'T_THEME_PATH'\t\t\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['theme_path']) . '/theme',\n\t\t'T_TEMPLATE_PATH'\t\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['template_path']) . '/template',\n\t\t'T_SUPER_TEMPLATE_PATH'\t=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? \"{$web_path}styles/\" . rawurlencode($user->theme['template_inherit_path']) . '/template' : \"{$web_path}styles/\" . rawurlencode($user->theme['template_path']) . '/template',\n\t\t'T_IMAGESET_PATH'\t\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['imageset_path']) . '/imageset',\n\t\t'T_IMAGESET_LANG_PATH'\t=> \"{$web_path}styles/\" . rawurlencode($user->theme['imageset_path']) . '/imageset/' . $user->lang_name,\n\t\t'T_IMAGES_PATH'\t\t\t=> \"{$web_path}images/\",\n\t\t'T_SMILIES_PATH'\t\t=> \"{$web_path}{$config['smilies_path']}/\",\n\t\t'T_AVATAR_PATH'\t\t\t=> \"{$web_path}{$config['avatar_path']}/\",\n\t\t'T_AVATAR_GALLERY_PATH'\t=> \"{$web_path}{$config['avatar_gallery_path']}/\",\n\t\t'T_ICONS_PATH'\t\t\t=> \"{$web_path}{$config['icons_path']}/\",\n\t\t'T_RANKS_PATH'\t\t\t=> \"{$web_path}{$config['ranks_path']}/\",\n\t\t'T_UPLOAD_PATH'\t\t\t=> \"{$web_path}{$config['upload_path']}/\",\n\t\t'T_STYLESHEET_LINK'\t\t=> (!$user->theme['theme_storedb']) ? \"{$web_path}styles/\" . rawurlencode($user->theme['theme_path']) . '/theme/stylesheet.css' : append_sid(\"{$phpbb_root_path}style.$phpEx\", 'id=' . $user->theme['style_id'] . '&amp;lang=' . $user->lang_name),\n\t\t'T_STYLESHEET_NAME'\t\t=> $user->theme['theme_name'],\n\n\t\t'T_THEME_NAME'\t\t\t=> rawurlencode($user->theme['theme_path']),\n\t\t'T_TEMPLATE_NAME'\t\t=> rawurlencode($user->theme['template_path']),\n\t\t'T_SUPER_TEMPLATE_NAME'\t=> rawurlencode((isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? $user->theme['template_inherit_path'] : $user->theme['template_path']),\n\t\t'T_IMAGESET_NAME'\t\t=> rawurlencode($user->theme['imageset_path']),\n\t\t'T_IMAGESET_LANG_NAME'\t=> $user->data['user_lang'],\n\t\t'T_IMAGES'\t\t\t\t=> 'images',\n\t\t'T_SMILIES'\t\t\t\t=> $config['smilies_path'],\n\t\t'T_AVATAR'\t\t\t\t=> $config['avatar_path'],\n\t\t'T_AVATAR_GALLERY'\t\t=> $config['avatar_gallery_path'],\n\t\t'T_ICONS'\t\t\t\t=> $config['icons_path'],\n\t\t'T_RANKS'\t\t\t\t=> $config['ranks_path'],\n\t\t'T_UPLOAD'\t\t\t\t=> $config['upload_path'],\n\n\t\t'SITE_LOGO_IMG'\t\t\t=> $user->img('site_logo'),\n\n\t\t'A_COOKIE_SETTINGS'\t\t=> addslashes('; path=' . $config['cookie_path'] . ((!$config['cookie_domain'] || $config['cookie_domain'] == 'localhost' || $config['cookie_domain'] == '127.0.0.1') ? '' : '; domain=' . $config['cookie_domain']) . ((!$config['cookie_secure']) ? '' : '; secure')),\n\t));\n\n\t// application/xhtml+xml not used because of IE\n\theader('Content-type: text/html; charset=UTF-8');\n\n\theader('Cache-Control: private, no-cache=\"set-cookie\"');\n\theader('Expires: 0');\n\theader('Pragma: no-cache');\n\n\tif (!empty($user->data['is_bot']))\n\t{\n\t\t// Let reverse proxies know we detected a bot.\n\t\theader('X-PHPBB-IS-BOT: yes');\n\t}\n\n\treturn;\n}\n\n/**\n* Generate page footer\n*/\nfunction page_footer($run_cron = true)\n{\n\tglobal $db, $config, $template, $user, $auth, $cache, $starttime, $phpbb_root_path, $phpEx;\n\n\t// Output page creation time\n\tif (defined('DEBUG'))\n\t{\n\t\t$mtime = explode(' ', microtime());\n\t\t$totaltime = $mtime[0] + $mtime[1] - $starttime;\n\n\t\tif (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))\n\t\t{\n\t\t\t$db->sql_report('display');\n\t\t}\n\n\t\t$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress'] && @extension_loaded('zlib')) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);\n\n\t\tif ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))\n\t\t{\n\t\t\tif (function_exists('memory_get_usage'))\n\t\t\t{\n\t\t\t\tif ($memory_usage = memory_get_usage())\n\t\t\t\t{\n\t\t\t\t\tglobal $base_memory_usage;\n\t\t\t\t\t$memory_usage -= $base_memory_usage;\n\t\t\t\t\t$memory_usage = get_formatted_filesize($memory_usage);\n\n\t\t\t\t\t$debug_output .= ' | Memory Usage: ' . $memory_usage;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$debug_output .= ' | <a href=\"' . build_url() . '&amp;explain=1\">Explain</a>';\n\t\t}\n\t}\n\n\t$template->assign_vars(array(\n\t\t'DEBUG_OUTPUT'\t\t\t=> (defined('DEBUG')) ? $debug_output : '',\n\t\t'TRANSLATION_INFO'\t\t=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',\n\t\t'CREDIT_LINE'\t\t\t=> $user->lang('POWERED_BY', '<a href=\"https://www.phpbb.com/\">phpBB</a>&reg; Forum Software &copy; phpBB Group'),\n\n\t\t'U_ACP' => ($auth->acl_get('a_') && !empty($user->data['is_registered'])) ? append_sid(\"{$phpbb_root_path}adm/index.$phpEx\", false, true, $user->session_id) : '')\n\t);\n\n\t// Call cron-type script\n\t$call_cron = false;\n\tif (!defined('IN_CRON') && $run_cron && !$config['board_disable'] && !$user->data['is_bot'])\n\t{\n\t\t$call_cron = true;\n\t\t$time_now = (!empty($user->time_now) && is_int($user->time_now)) ? $user->time_now : time();\n\n\t\t// Any old lock present?\n\t\tif (!empty($config['cron_lock']))\n\t\t{\n\t\t\t$cron_time = explode(' ', $config['cron_lock']);\n\n\t\t\t// If 1 hour lock is present we do not call cron.php\n\t\t\tif ($cron_time[0] + 3600 >= $time_now)\n\t\t\t{\n\t\t\t\t$call_cron = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Call cron job?\n\tif ($call_cron)\n\t{\n\t\t$cron_type = '';\n\n\t\tif ($time_now - $config['queue_interval'] > $config['last_queue_run'] && !defined('IN_ADMIN') && file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))\n\t\t{\n\t\t\t// Process email queue\n\t\t\t$cron_type = 'queue';\n\t\t}\n\t\telse if (method_exists($cache, 'tidy') && $time_now - $config['cache_gc'] > $config['cache_last_gc'])\n\t\t{\n\t\t\t// Tidy the cache\n\t\t\t$cron_type = 'tidy_cache';\n\t\t}\n\t\telse if ($config['warnings_expire_days'] && ($time_now - $config['warnings_gc'] > $config['warnings_last_gc']))\n\t\t{\n\t\t\t$cron_type = 'tidy_warnings';\n\t\t}\n\t\telse if ($time_now - $config['database_gc'] > $config['database_last_gc'])\n\t\t{\n\t\t\t// Tidy the database\n\t\t\t$cron_type = 'tidy_database';\n\t\t}\n\t\telse if ($time_now - $config['search_gc'] > $config['search_last_gc'])\n\t\t{\n\t\t\t// Tidy the search\n\t\t\t$cron_type = 'tidy_search';\n\t\t}\n\t\telse if ($time_now - $config['session_gc'] > $config['session_last_gc'])\n\t\t{\n\t\t\t$cron_type = 'tidy_sessions';\n\t\t}\n\n\t\tif ($cron_type)\n\t\t{\n\t\t\t$template->assign_var('RUN_CRON_TASK', '<img src=\"' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=' . $cron_type) . '\" width=\"1\" height=\"1\" alt=\"cron\" />');\n\t\t}\n\t}\n\n\t$template->display('body');\n\n\tgarbage_collection();\n\texit_handler();\n}\n\n/**\n* Closing the cache object and the database\n* Cool function name, eh? We might want to add operations to it later\n*/\nfunction garbage_collection()\n{\n\tglobal $cache, $db;\n\n\t// Unload cache, must be done before the DB connection if closed\n\tif (!empty($cache))\n\t{\n\t\t$cache->unload();\n\t}\n\n\t// Close our DB connection.\n\tif (!empty($db))\n\t{\n\t\t$db->sql_close();\n\t}\n}\n\n/**\n* Handler for exit calls in phpBB.\n* This function supports hooks.\n*\n* Note: This function is called after the template has been outputted.\n*/\nfunction exit_handler()\n{\n\tglobal $phpbb_hook, $config;\n\n\tif (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))\n\t{\n\t\tif ($phpbb_hook->hook_return(__FUNCTION__))\n\t\t{\n\t\t\treturn $phpbb_hook->hook_return_result(__FUNCTION__);\n\t\t}\n\t}\n\n\t// As a pre-caution... some setups display a blank page if the flush() is not there.\n\t(ob_get_level() > 0) ? @ob_flush() : @flush();\n\n\texit;\n}\n\n/**\n* Handler for init calls in phpBB. This function is called in user::setup();\n* This function supports hooks.\n*/\nfunction phpbb_user_session_handler()\n{\n\tglobal $phpbb_hook;\n\n\tif (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))\n\t{\n\t\tif ($phpbb_hook->hook_return(__FUNCTION__))\n\t\t{\n\t\t\treturn $phpbb_hook->hook_return_result(__FUNCTION__);\n\t\t}\n\t}\n\n\treturn;\n}\n\n?>", "<?php\n/**\n*\n* @package testing\n* @copyright (c) 2008 phpBB Group\n* @license http://opensource.org/licenses/gpl-2.0.php GNU General Public License v2\n*\n*/\n\nrequire_once dirname(__FILE__) . '/base.php';\n\nrequire_once dirname(__FILE__) . '/../../phpBB/includes/functions.php';\nrequire_once dirname(__FILE__) . '/../../phpBB/includes/session.php';\n\nclass phpbb_security_redirect_test extends phpbb_security_test_base\n{\n\tstatic public function provider()\n\t{\n\t\t// array(Input -> redirect(), expected triggered error (else false), expected returned result url (else false))\n\t\treturn array(\n\t\t\tarray('data://x', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('bad://localhost/phpBB/index.php', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('http://www.otherdomain.com/somescript.php', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray(\"http://localhost/phpBB/memberlist.php\\n\\rConnection: close\", 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('javascript:test', false, 'http://localhost/phpBB/../javascript:test'),\n\t\t\tarray('http://localhost/phpBB/index.php;url=', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('https://foobar.com\\@http://localhost/phpBB', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('https://foobar.com\\@localhost/troll/http://localhost/', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('http://localhost.foobar.com\\@localhost/troll/http://localhost/', 'Tried to redirect to potentially insecure url.', false),\n\t\t\tarray('http://localhost/phpBB', false, 'http://localhost/phpBB'),\n\t\t\tarray('http://localhost/phpBB/', false, 'http://localhost/phpBB/'),\n\t\t);\n\t}\n\n\tprotected function setUp()\n\t{\n\t\tparent::setUp();\n\t\t\n\t\t$GLOBALS['config'] = array(\n\t\t\t'force_server_vars'\t=> '0',\n\t\t);\n\t}\n\n\t/**\n\t* @dataProvider provider\n\t*/\n\tpublic function test_redirect($test, $expected_error, $expected_result)\n\t{\n\t\tglobal $user;\n\n\t\tif ($expected_error !== false)\n\t\t{\n\t\t\t$this->setExpectedTriggerError(E_USER_ERROR, $expected_error);\n\t\t}\n\n\t\t$result = redirect($test, true);\n\n\t\t// only verify result if we did not expect an error\n\t\tif ($expected_error === false)\n\t\t{\n\t\t\t$this->assertEquals($expected_result, $result);\n\t\t}\n\t}\n}\n\n"], "filenames": ["phpBB/includes/functions.php", "tests/security/redirect_test.php"], "buggy_code_start_loc": [2495, 21], "buggy_code_end_loc": [2579, 26], "fixing_code_start_loc": [2495, 21], "fixing_code_end_loc": [2586, 32], "type": "CWE-601", "message": "Open redirect vulnerability in phpBB before 3.0.14 and 3.1.x before 3.1.4 allows remote attackers to redirect users of Google Chrome to arbitrary web sites and conduct phishing attacks via unspecified vectors.", "other": {"cve": {"id": "CVE-2015-3880", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-19T15:29:00.867", "lastModified": "2017-09-27T17:42:51.630", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Open redirect vulnerability in phpBB before 3.0.14 and 3.1.x before 3.1.4 allows remote attackers to redirect users of Google Chrome to arbitrary web sites and conduct phishing attacks via unspecified vectors."}, {"lang": "es", "value": "Una vulnerabilidad de redirecci\u00f3n abierta en phpBB en versiones anteriores a la 3.0.14 y 3.1.x anteriores a la 3.1.4 permite que los atacantes remotos redireccionen a los usuarios de Google Chrome a sitios web arbitrarios y lleven a cabo ataques de phishing mediante vectores sin especificar."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:*:rc1:*:*:*:*:*:*", "versionEndIncluding": "3.0.14", "matchCriteriaId": "879A6940-F390-46AE-895C-B9FAA5466107"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "777B75ED-200F-4B14-A153-00578F8411E6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:a1:*:*:*:*:*:*", "matchCriteriaId": "0D3CF54F-2C83-41FA-A85C-BB4DE0958FF2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:a2:*:*:*:*:*:*", "matchCriteriaId": "B0D8B5CC-5EFA-4EA0-A26A-BEF56B45C153"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:a3:*:*:*:*:*:*", "matchCriteriaId": "7FBE812A-136E-4F29-98D1-5130BC9D1774"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:b1:*:*:*:*:*:*", "matchCriteriaId": "1B863B2D-5F98-4ACD-A359-49FC87373156"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:b2:*:*:*:*:*:*", "matchCriteriaId": "30D8CE28-7599-4F31-908B-E43D562C51B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:b3:*:*:*:*:*:*", "matchCriteriaId": "547F3F0D-E518-4073-B53B-E2741AA8F332"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:b4:*:*:*:*:*:*", "matchCriteriaId": "1333D93A-911C-4658-A851-AF65B1DE3B94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "ACA9F03D-718F-45B3-881D-F6E8B89EA6B5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "C67751F3-3A75-4818-BBF1-CC961FD8B627"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "253272A0-48F4-4D91-A034-4E9A48C8A290"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:rc4:*:*:*:*:*:*", "matchCriteriaId": "8C779E37-388F-45E4-B3C4-11C608F02F68"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:rc5:*:*:*:*:*:*", "matchCriteriaId": "11E60CE4-6675-40DA-800A-092EE7B300AA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.0:rc6:*:*:*:*:*:*", "matchCriteriaId": "473BB97D-92A8-4BC1-852E-1846A0225201"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "E2E21370-A957-42FD-B15B-BC34D8570919"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "E33457D9-45DE-4E89-98E6-7E42EDF8C71D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.2:rc1:*:*:*:*:*:*", "matchCriteriaId": "816AC4AC-F7DC-4A9C-AA7D-B69602CFBB23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "72255A08-D10C-4649-B97A-37FD623C7E97"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.3:rc1:*:*:*:*:*:*", "matchCriteriaId": "8E62D0D5-1497-4046-B314-99E598150CF0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.3:rc2:*:*:*:*:*:*", "matchCriteriaId": "75B28F07-BF0D-43E9-93F6-C78D4080B3FE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.4:rc1:*:*:*:*:*:*", "matchCriteriaId": "5FD3875E-B71D-433E-8079-5E24980E59D4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpbb:phpbb:3.1.4:rc2:*:*:*:*:*:*", "matchCriteriaId": "5D2E7672-32D1-4564-AB72-5B0F885D00DA"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2015/05/12/10", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/74592", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/phpbb/phpbb/commit/1a3350619f428d9d69d196c52128727e27ef2f04", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wiki.phpbb.com/Release_Highlights/3.0.14", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://wiki.phpbb.com/Release_Highlights/3.1.4", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.phpbb.com/community/viewtopic.php?f=14&t=2313941", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/phpbb/phpbb/commit/1a3350619f428d9d69d196c52128727e27ef2f04"}}