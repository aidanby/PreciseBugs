{"buggy_code": ["<template>\n  <q-page class=\"q-pa-md\">\n    <q-table\n      :title=\"t('template.header')\"\n      :rows=\"templates\"\n      row-key=\"id\"\n      :pagination=\"pagination\"\n      :filter=\"filterQuery\"\n      :filter-method=\"filterData\"\n    >\n      <template #top-right>\n        <q-input\n          v-model=\"filterQuery\"\n          filled\n          borderless\n          dense\n          :placeholder=\"t('template.search')\"\n        >\n          <template #append>\n            <q-icon name=\"search\" class=\"cursor-pointer\" />\n          </template>\n        </q-input>\n        <q-btn\n          class=\"q-ml-sm\"\n          color=\"primary\"\n          icon=\"add\"\n          :label=\"t('template.add')\"\n          @click=\"addTemplate\"\n        />\n      </template>\n\n      <!-- eslint-disable-next-line vue/no-lone-template -->\n      <template v-slot:body-cell-#=\"props\">\n        <q-td :props=\"props\" width=\"80\">\n          {{ props.value }}\n        </q-td>\n      </template>\n      <template #body-cell-name=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <a\n            class=\"text-primary text-decoration-none\"\n            @click=\"previewTemplate(props)\"\n          >\n            {{ props.value }}\n          </a>\n        </q-td>\n      </template>\n      <template #body-cell-template=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <q-badge v-if=\"props.value.mappings\">\n            M <q-tooltip class=\"bg-black\">Mappings</q-tooltip>\n          </q-badge>\n          <q-badge v-if=\"props.value.settings\" class=\"q-ml-xs\">\n            S <q-tooltip class=\"bg-black\">Settings</q-tooltip>\n          </q-badge>\n          <q-badge\n            v-if=\"props.value.settings == null && props.value.mappings == null\"\n            color=\"transparent\"\n            text-color=\"black\"\n            class=\"q-pl-none\"\n          >\n            None\n          </q-badge>\n        </q-td>\n      </template>\n      <template #body-cell-actions=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"teal-5\"\n            class=\"action-button\"\n            icon=\"edit\"\n            @click=\"editTemplate(props)\"\n          />\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"red-5\"\n            class=\"action-button q-ml-sm\"\n            icon=\"delete\"\n            @click=\"deleteTemplate(props)\"\n          />\n        </q-td>\n      </template>\n    </q-table>\n\n    <q-dialog\n      v-model=\"showAddTemplateDialog\"\n      position=\"right\"\n      full-height\n      seamless\n      maximized\n    >\n      <add-update-template @updated=\"templateAdded\" />\n    </q-dialog>\n\n    <q-dialog\n      v-model=\"showUpdateTemplateDialog\"\n      position=\"right\"\n      full-height\n      seamless\n      maximized\n    >\n      <add-update-template v-model=\"template\" @updated=\"templateUpdated\" />\n    </q-dialog>\n\n    <q-dialog\n      v-model=\"showPreviewTemplateDialog\"\n      position=\"right\"\n      full-height\n      maximized\n    >\n      <preview-template v-model=\"template\" />\n    </q-dialog>\n  </q-page>\n</template>\n\n<script>\nimport { defineComponent, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useQuasar, date } from \"quasar\";\nimport { useI18n } from \"vue-i18n\";\n\nimport templateService from \"../services/template\";\nimport AddUpdateTemplate from \"../components/template/AddUpdateTemplate.vue\";\nimport PreviewTemplate from \"../components/template/PreviewTemplate.vue\";\n\nexport default defineComponent({\n  name: \"PageTemplate\",\n  components: {\n    AddUpdateTemplate,\n    PreviewTemplate,\n  },\n  setup() {\n    const store = useStore();\n    const $q = useQuasar();\n    const { t } = useI18n();\n\n    const templates = ref([]);\n    const getTemplates = () => {\n      templateService.list().then((res) => {\n        var counter = 1;\n        templates.value = res.data.map((data) => {\n          return {\n            \"#\": counter++,\n            name: data.name,\n            patterns: data.index_template.index_patterns.join(\", \"),\n            priority: data.index_template.priority || \"\",\n            template: data.index_template.template,\n            actions: \"\",\n          };\n        });\n      });\n    };\n\n    getTemplates();\n\n    const template = ref({});\n    const showAddTemplateDialog = ref(false);\n    const showUpdateTemplateDialog = ref(false);\n    const showPreviewTemplateDialog = ref(false);\n\n    const addTemplate = () => {\n      showAddTemplateDialog.value = true;\n    };\n    const editTemplate = (props) => {\n      template.value = props.row;\n      showUpdateTemplateDialog.value = true;\n    };\n    const deleteTemplate = (props) => {\n      $q.dialog({\n        title: \"Delete template\",\n        message:\n          \"You are about to delete this template: <ul><li>\" +\n          props.row.name +\n          \"</li></ul>\",\n        cancel: true,\n        persistent: true,\n        html: true,\n      }).onOk(() => {\n        templateService.delete(props.row.name).then(() => {\n          getTemplates();\n        });\n      });\n    };\n\n    const previewTemplate = (props) => {\n      template.value = props.row;\n      showPreviewTemplateDialog.value = true;\n    };\n\n    return {\n      t,\n      showAddTemplateDialog,\n      showUpdateTemplateDialog,\n      showPreviewTemplateDialog,\n      template,\n      templates,\n      pagination: {\n        rowsPerPage: 20,\n      },\n      filterQuery: ref(\"\"),\n      filterData(rows, terms) {\n        var filtered = [];\n        terms = terms.toLowerCase();\n        for (var i = 0; i < rows.length; i++) {\n          if (rows[i][\"name\"].toLowerCase().includes(terms)) {\n            filtered.push(rows[i]);\n          }\n        }\n        return filtered;\n      },\n      addTemplate,\n      editTemplate,\n      deleteTemplate,\n      previewTemplate,\n      templateAdded() {\n        showAddTemplateDialog.value = false;\n        getTemplates();\n      },\n      templateUpdated() {\n        showUpdateTemplateDialog.value = false;\n        getTemplates();\n      },\n    };\n  },\n});\n</script>\n", "<template>\n  <q-page class=\"q-pa-md\">\n    <q-table\n      :title=\"t('user.header')\"\n      :rows=\"users\"\n      row-key=\"id\"\n      :pagination=\"pagination\"\n      :filter=\"filterQuery\"\n      :filter-method=\"filterData\"\n    >\n      <template #top-right>\n        <q-input\n          v-model=\"filterQuery\"\n          filled\n          borderless\n          dense\n          :placeholder=\"t('user.search')\"\n        >\n          <template #append>\n            <q-icon name=\"search\" class=\"cursor-pointer\" />\n          </template>\n        </q-input>\n        <q-btn\n          class=\"q-ml-sm\"\n          color=\"primary\"\n          icon=\"add\"\n          :label=\"t(`user.add`)\"\n          @click=\"addUser\"\n        />\n      </template>\n\n      <!-- eslint-disable-next-line vue/no-lone-template -->\n      <template v-slot:body-cell-#=\"props\">\n        <q-td :props=\"props\" width=\"80\">\n          {{ props.value }}\n        </q-td>\n      </template>\n      <template #body-cell-actions=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"teal-5\"\n            class=\"action-button\"\n            icon=\"edit\"\n            @click=\"editUser(props)\"\n          />\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"red-5\"\n            class=\"action-button q-ml-sm\"\n            icon=\"delete\"\n            @click=\"deleteUser(props)\"\n          />\n        </q-td>\n      </template>\n    </q-table>\n\n    <q-dialog v-model=\"showAddUserDialog\">\n      <add-update-user @updated=\"userAdded\" />\n    </q-dialog>\n\n    <q-dialog v-model=\"showUpdateUserDialog\">\n      <add-update-user v-model=\"user\" @updated=\"userUpdated\" />\n    </q-dialog>\n  </q-page>\n</template>\n\n<script>\nimport { defineComponent, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useQuasar, date } from \"quasar\";\nimport { useI18n } from \"vue-i18n\";\n\nimport userService from \"../services/user\";\nimport AddUpdateUser from \"../components/user/AddUpdateUser.vue\";\n\nexport default defineComponent({\n  name: \"PageUser\",\n  components: {\n    AddUpdateUser,\n  },\n  setup() {\n    const store = useStore();\n    const $q = useQuasar();\n    const { t } = useI18n();\n\n    const user = ref({});\n    const users = ref([]);\n    const getUsers = () => {\n      userService.list().then((res) => {\n        var counter = 1;\n        users.value = res.data.map((data) => {\n          return {\n            \"#\": counter++,\n            id: data._id,\n            name: data.name || data._id,\n            role: data.role,\n            created: date.formatDate(data.created_at, \"YYYY-MM-DDTHH:mm:ssZ\"),\n            updated: date.formatDate(data.updated_at, \"YYYY-MM-DDTHH:mm:ssZ\"),\n            actions: \"\",\n          };\n        });\n      });\n    };\n\n    getUsers();\n\n    const showAddUserDialog = ref(false);\n    const showUpdateUserDialog = ref(false);\n\n    const addUser = () => {\n      showAddUserDialog.value = true;\n    };\n    const editUser = (props) => {\n      user.value = {\n        id: props.row.id,\n        name: props.row.name,\n        role: props.row.role,\n      };\n      showUpdateUserDialog.value = true;\n    };\n    const deleteUser = (props) => {\n      $q.dialog({\n        title: \"Delete user\",\n        message:\n          \"You are about to delete this user: <ul><li>\" +\n          props.row.id +\n          \"</li></ul>\",\n        cancel: true,\n        persistent: true,\n        html: true,\n      }).onOk(() => {\n        userService.delete(props.row.id).then(() => {\n          getUsers();\n        });\n      });\n    };\n\n    return {\n      t,\n      user,\n      showAddUserDialog,\n      showUpdateUserDialog,\n      users,\n      pagination: {\n        rowsPerPage: 20,\n      },\n      filterQuery: ref(\"\"),\n      filterData(rows, terms) {\n        var filtered = [];\n        terms = terms.toLowerCase();\n        for (var i = 0; i < rows.length; i++) {\n          if (rows[i][\"name\"].toLowerCase().includes(terms)) {\n            filtered.push(rows[i]);\n          }\n        }\n        return filtered;\n      },\n      addUser,\n      editUser,\n      deleteUser,\n      userAdded() {\n        showAddUserDialog.value = false;\n        getUsers();\n      },\n      userUpdated() {\n        showUpdateUserDialog.value = false;\n        getUsers();\n      },\n    };\n  },\n});\n</script>\n"], "fixing_code": ["<template>\n  <q-page class=\"q-pa-md\">\n    <q-table\n      :title=\"t('template.header')\"\n      :rows=\"templates\"\n      row-key=\"id\"\n      :pagination=\"pagination\"\n      :filter=\"filterQuery\"\n      :filter-method=\"filterData\"\n    >\n      <template #top-right>\n        <q-input\n          v-model=\"filterQuery\"\n          filled\n          borderless\n          dense\n          :placeholder=\"t('template.search')\"\n        >\n          <template #append>\n            <q-icon name=\"search\" class=\"cursor-pointer\" />\n          </template>\n        </q-input>\n        <q-btn\n          class=\"q-ml-sm\"\n          color=\"primary\"\n          icon=\"add\"\n          :label=\"t('template.add')\"\n          @click=\"addTemplate\"\n        />\n      </template>\n\n      <!-- eslint-disable-next-line vue/no-lone-template -->\n      <template v-slot:body-cell-#=\"props\">\n        <q-td :props=\"props\" width=\"80\">\n          {{ props.value }}\n        </q-td>\n      </template>\n      <template #body-cell-name=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <a\n            class=\"text-primary text-decoration-none\"\n            @click=\"previewTemplate(props)\"\n          >\n            {{ props.value }}\n          </a>\n        </q-td>\n      </template>\n      <template #body-cell-template=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <q-badge v-if=\"props.value.mappings\">\n            M <q-tooltip class=\"bg-black\">Mappings</q-tooltip>\n          </q-badge>\n          <q-badge v-if=\"props.value.settings\" class=\"q-ml-xs\">\n            S <q-tooltip class=\"bg-black\">Settings</q-tooltip>\n          </q-badge>\n          <q-badge\n            v-if=\"props.value.settings == null && props.value.mappings == null\"\n            color=\"transparent\"\n            text-color=\"black\"\n            class=\"q-pl-none\"\n          >\n            None\n          </q-badge>\n        </q-td>\n      </template>\n      <template #body-cell-actions=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"teal-5\"\n            class=\"action-button\"\n            icon=\"edit\"\n            @click=\"editTemplate(props)\"\n          />\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"red-5\"\n            class=\"action-button q-ml-sm\"\n            icon=\"delete\"\n            @click=\"deleteTemplate(props)\"\n          />\n        </q-td>\n      </template>\n    </q-table>\n\n    <q-dialog\n      v-model=\"showAddTemplateDialog\"\n      position=\"right\"\n      full-height\n      seamless\n      maximized\n    >\n      <add-update-template @updated=\"templateAdded\" />\n    </q-dialog>\n\n    <q-dialog\n      v-model=\"showUpdateTemplateDialog\"\n      position=\"right\"\n      full-height\n      seamless\n      maximized\n    >\n      <add-update-template v-model=\"template\" @updated=\"templateUpdated\" />\n    </q-dialog>\n\n    <q-dialog\n      v-model=\"showPreviewTemplateDialog\"\n      position=\"right\"\n      full-height\n      maximized\n    >\n      <preview-template v-model=\"template\" />\n    </q-dialog>\n  </q-page>\n</template>\n\n<script>\nimport { defineComponent, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useQuasar, date } from \"quasar\";\nimport { useI18n } from \"vue-i18n\";\n\nimport templateService from \"../services/template\";\nimport AddUpdateTemplate from \"../components/template/AddUpdateTemplate.vue\";\nimport PreviewTemplate from \"../components/template/PreviewTemplate.vue\";\n\nexport default defineComponent({\n  name: \"PageTemplate\",\n  components: {\n    AddUpdateTemplate,\n    PreviewTemplate,\n  },\n  setup() {\n    const store = useStore();\n    const $q = useQuasar();\n    const { t } = useI18n();\n\n    const templates = ref([]);\n    const getTemplates = () => {\n      templateService.list().then((res) => {\n        var counter = 1;\n        templates.value = res.data.map((data) => {\n          return {\n            \"#\": counter++,\n            name: data.name,\n            patterns: data.index_template.index_patterns.join(\", \"),\n            priority: data.index_template.priority || \"\",\n            template: data.index_template.template,\n            actions: \"\",\n          };\n        });\n      });\n    };\n\n    getTemplates();\n\n    const template = ref({});\n    const showAddTemplateDialog = ref(false);\n    const showUpdateTemplateDialog = ref(false);\n    const showPreviewTemplateDialog = ref(false);\n\n    const addTemplate = () => {\n      showAddTemplateDialog.value = true;\n    };\n    const editTemplate = (props) => {\n      template.value = props.row;\n      showUpdateTemplateDialog.value = true;\n    };\n    const deleteTemplate = (props) => {\n      $q.dialog({\n        title: \"Delete template\",\n        message:\n          \"You are about to delete this template: <ul><li>\" +\n          escape(props.row.name) +\n          \"</li></ul>\",\n        cancel: true,\n        persistent: true,\n        html: true,\n      }).onOk(() => {\n        templateService.delete(props.row.name).then(() => {\n          getTemplates();\n        });\n      });\n    };\n\n    const previewTemplate = (props) => {\n      template.value = props.row;\n      showPreviewTemplateDialog.value = true;\n    };\n\n    return {\n      t,\n      showAddTemplateDialog,\n      showUpdateTemplateDialog,\n      showPreviewTemplateDialog,\n      template,\n      templates,\n      pagination: {\n        rowsPerPage: 20,\n      },\n      filterQuery: ref(\"\"),\n      filterData(rows, terms) {\n        var filtered = [];\n        terms = terms.toLowerCase();\n        for (var i = 0; i < rows.length; i++) {\n          if (rows[i][\"name\"].toLowerCase().includes(terms)) {\n            filtered.push(rows[i]);\n          }\n        }\n        return filtered;\n      },\n      addTemplate,\n      editTemplate,\n      deleteTemplate,\n      previewTemplate,\n      templateAdded() {\n        showAddTemplateDialog.value = false;\n        getTemplates();\n      },\n      templateUpdated() {\n        showUpdateTemplateDialog.value = false;\n        getTemplates();\n      },\n    };\n  },\n});\n</script>\n", "<template>\n  <q-page class=\"q-pa-md\">\n    <q-table\n      :title=\"t('user.header')\"\n      :rows=\"users\"\n      row-key=\"id\"\n      :pagination=\"pagination\"\n      :filter=\"filterQuery\"\n      :filter-method=\"filterData\"\n    >\n      <template #top-right>\n        <q-input\n          v-model=\"filterQuery\"\n          filled\n          borderless\n          dense\n          :placeholder=\"t('user.search')\"\n        >\n          <template #append>\n            <q-icon name=\"search\" class=\"cursor-pointer\" />\n          </template>\n        </q-input>\n        <q-btn\n          class=\"q-ml-sm\"\n          color=\"primary\"\n          icon=\"add\"\n          :label=\"t(`user.add`)\"\n          @click=\"addUser\"\n        />\n      </template>\n\n      <!-- eslint-disable-next-line vue/no-lone-template -->\n      <template v-slot:body-cell-#=\"props\">\n        <q-td :props=\"props\" width=\"80\">\n          {{ props.value }}\n        </q-td>\n      </template>\n      <template #body-cell-actions=\"props\">\n        <q-td :props=\"props\" auto-width>\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"teal-5\"\n            class=\"action-button\"\n            icon=\"edit\"\n            @click=\"editUser(props)\"\n          />\n          <q-btn\n            dense\n            unelevated\n            size=\"sm\"\n            color=\"red-5\"\n            class=\"action-button q-ml-sm\"\n            icon=\"delete\"\n            @click=\"deleteUser(props)\"\n          />\n        </q-td>\n      </template>\n    </q-table>\n\n    <q-dialog v-model=\"showAddUserDialog\">\n      <add-update-user @updated=\"userAdded\" />\n    </q-dialog>\n\n    <q-dialog v-model=\"showUpdateUserDialog\">\n      <add-update-user v-model=\"user\" @updated=\"userUpdated\" />\n    </q-dialog>\n  </q-page>\n</template>\n\n<script>\nimport { defineComponent, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useQuasar, date } from \"quasar\";\nimport { useI18n } from \"vue-i18n\";\n\nimport userService from \"../services/user\";\nimport AddUpdateUser from \"../components/user/AddUpdateUser.vue\";\n\nexport default defineComponent({\n  name: \"PageUser\",\n  components: {\n    AddUpdateUser,\n  },\n  setup() {\n    const store = useStore();\n    const $q = useQuasar();\n    const { t } = useI18n();\n\n    const user = ref({});\n    const users = ref([]);\n    const getUsers = () => {\n      userService.list().then((res) => {\n        var counter = 1;\n        users.value = res.data.map((data) => {\n          return {\n            \"#\": counter++,\n            id: data._id,\n            name: data.name || data._id,\n            role: data.role,\n            created: date.formatDate(data.created_at, \"YYYY-MM-DDTHH:mm:ssZ\"),\n            updated: date.formatDate(data.updated_at, \"YYYY-MM-DDTHH:mm:ssZ\"),\n            actions: \"\",\n          };\n        });\n      });\n    };\n\n    getUsers();\n\n    const showAddUserDialog = ref(false);\n    const showUpdateUserDialog = ref(false);\n\n    const addUser = () => {\n      showAddUserDialog.value = true;\n    };\n    const editUser = (props) => {\n      user.value = {\n        id: props.row.id,\n        name: props.row.name,\n        role: props.row.role,\n      };\n      showUpdateUserDialog.value = true;\n    };\n    const deleteUser = (props) => {\n      $q.dialog({\n        title: \"Delete user\",\n        message:\n          \"You are about to delete this user: <ul><li>\" +\n          escape(props.row.id) +\n          \"</li></ul>\",\n        cancel: true,\n        persistent: true,\n        html: true,\n      }).onOk(() => {\n        userService.delete(props.row.id).then(() => {\n          getUsers();\n        });\n      });\n    };\n\n    return {\n      t,\n      user,\n      showAddUserDialog,\n      showUpdateUserDialog,\n      users,\n      pagination: {\n        rowsPerPage: 20,\n      },\n      filterQuery: ref(\"\"),\n      filterData(rows, terms) {\n        var filtered = [];\n        terms = terms.toLowerCase();\n        for (var i = 0; i < rows.length; i++) {\n          if (rows[i][\"name\"].toLowerCase().includes(terms)) {\n            filtered.push(rows[i]);\n          }\n        }\n        return filtered;\n      },\n      addUser,\n      editUser,\n      deleteUser,\n      userAdded() {\n        showAddUserDialog.value = false;\n        getUsers();\n      },\n      userUpdated() {\n        showUpdateUserDialog.value = false;\n        getUsers();\n      },\n    };\n  },\n});\n</script>\n"], "filenames": ["web/src/views/Template.vue", "web/src/views/User.vue"], "buggy_code_start_loc": [178, 131], "buggy_code_end_loc": [179, 132], "fixing_code_start_loc": [178, 131], "fixing_code_end_loc": [179, 132], "type": "CWE-79", "message": "In Zinc, versions v0.1.9 through v0.3.1 are vulnerable to Stored Cross-Site Scripting when using the delete user functionality. When an authenticated user deletes a user having a XSS payload in the user id field, the javascript payload will be executed and allow an attacker to access the user\u2019s credentials.", "other": {"cve": {"id": "CVE-2022-32171", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2022-10-06T18:16:02.610", "lastModified": "2022-11-07T20:20:27.907", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Zinc, versions v0.1.9 through v0.3.1 are vulnerable to Stored Cross-Site Scripting when using the delete user functionality. When an authenticated user deletes a user having a XSS payload in the user id field, the javascript payload will be executed and allow an attacker to access the user\u2019s credentials."}, {"lang": "es", "value": "En Zinc, versiones v0.1.9 hasta v0.3.1, son vulnerables a un ataque de tipo Cross-Site Scripting Almacenado cuando es usada la funcionalidad delete user. Cuando un usuario autenticado elimina un usuario que presenta una carga \u00fatil de tipo XSS en el campo user id, la carga \u00fatil javascript ser\u00e1 ejecutada y permitir\u00e1 a un atacante acceder a las credenciales del usuario"}], "metrics": {"cvssMetricV31": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zinclabs:zinc:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.1.9", "versionEndIncluding": "0.3.1", "matchCriteriaId": "A981E9CE-9302-4521-8705-DA42A2ADBF2F"}]}]}], "references": [{"url": "https://github.com/zinclabs/zinc/commit/3376c248bade163430f9347742428f0a82cd322d", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.mend.io/vulnerability-database/CVE-2022-32171", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/zinclabs/zinc/commit/3376c248bade163430f9347742428f0a82cd322d"}}