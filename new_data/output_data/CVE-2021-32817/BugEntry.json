{"buggy_code": ["# express-hbs\n\nExpress handlebars template engine with multiple layouts, blocks and cached partials.\n\n## v2.0.0\n\nVersion 2 was a rewrite and cleanup, with no known breaking changes. Lots of bugs were fixed which may have subtly changed behaviour.\n\nFull details: https://github.com/TryGhost/express-hbs/releases/tag/2.0.0\n\n## v1.0.0 Breaking Changes\n\nIf you're upgrading from v0.8.4 to v1.0.0 there are some potentially breaking changes to be aware of:\n\n1. Handlebars @v4.0.5 - please see the [handlebars v4.0 compatibility notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v400---september-1st-2015)\n2. The file extension for partial files must now match the extension configured in `extname` - please see [the PR](https://github.com/TryGhost/express-hbs/pull/88)\n\n## Usage\n\nTo use with express 4.\n```js\nvar hbs = require('express-hbs');\n\n// Use `.hbs` for extensions and find partials in `views/partials`.\napp.engine('hbs', hbs.express4({\n  partialsDir: __dirname + '/views/partials'\n}));\napp.set('view engine', 'hbs');\napp.set('views', __dirname + '/views');\n```\nTo use with express 3 is the same as above, except use hbs.express3\n\n```js\napp.engine('hbs', hbs.express3({\n  partialsDir: __dirname + '/views/partials'\n}));\n```\n\nOptions for `#express3` and `#express4`\n\n```js\nhbs.express4({\n  partialsDir: \"{String/Array} [Required] Path to partials templates, one or several directories\",\n\n  // OPTIONAL settings\n  blockHelperName: \"{String} Override 'block' helper name.\",\n  contentHelperName: \"{String} Override 'contentFor' helper name.\",\n  defaultLayout: \"{String} Absolute path to default layout template\",\n  extname: \"{String} Extension for templates & partials, defaults to `.hbs`\",\n  handlebars: \"{Module} Use external handlebars instead of express-hbs dependency\",\n  i18n: \"{Object} i18n object\",\n  layoutsDir: \"{String} Path to layout templates\",\n  templateOptions: \"{Object} options to pass to template()\",\n  beautify: \"{Boolean} whether to pretty print HTML, see github.com/einars/js-beautify .jsbeautifyrc\",\n\n  // override the default compile\n  onCompile: function(exhbs, source, filename) {\n    var options;\n    if (filename && filename.indexOf('partials') > -1) {\n      options = {preventIndent: true};\n    }\n    return exhbs.handlebars.compile(source, options);\n  }\n});\n```\n\n## Syntax\n\nTo mark where layout should insert page\n\n    {{{body}}}\n\nTo declare a block placeholder in layout\n\n    {{{block \"pageScripts\"}}}\n\nTo define block content in a page\n\n    {{#contentFor \"pageScripts\"}}\n      CONTENT HERE\n    {{/contentFor}}\n\n## Layouts\n\nThere are three ways to use a layout, listed in precedence order\n\n1.  Declarative within a page. Use handlebars comment\n\n        {{!< LAYOUT}}\n\n    Layout file resolution:\n\n        If path starts with '.'\n            LAYOUT is relative to template\n        Else If `layoutsDir` is set\n            LAYOUT is relative to `layoutsDir`\n        Else\n            LAYOUT from path.resolve(dirname(template), LAYOUT)\n\n2.  As an option to render\n\n    ```js\n    res.render('veggies', {\n      title: 'My favorite veggies',\n      veggies: veggies,\n      layout: 'layout/veggie'\n    });\n    ```\n\n    This option also allows for layout suppression (both the default layout and when specified declaratively in a page) by passing in a falsey Javascript value as the value of the `layout` property:\n\n    ```js\n    res.render('veggies', {\n      title: 'My favorite veggies',\n      veggies: veggies,\n      layout: null // render without using a layout template\n    });\n    ```\n\n    Layout file resolution:\n\n        If path starts with '.'\n            layout is relative to template\n        Else If `layoutsDir` is set\n            layout is relative to `layoutsDir`\n        Else\n            layout from path.resolve(viewsDir, layout)\n\n3.  Lastly, use `defaultLayout` if specified in hbs configuration options.\n\nLayouts can be nested: just include a declarative layout tag within any layout\ntemplate to have its content included in the declared \"parent\" layout.  Be\naware that too much nesting can impact performances, and stay away from\ninfinite loops!\n\n## Helpers\n\n### Synchronous helpers\n\n```js\nhbs.registerHelper('link', function(text, options) {\n  var attrs = [];\n  for(var prop in options.hash) {\n    attrs.push(prop + '=\"' + options.hash[prop] + '\"');\n  }\n  return new hbs.SafeString(\n    \"<a \" + attrs.join(\" \") + \">\" + text + \"</a>\"\n  );\n});\n```\n\nin markup\n```\n{{{link 'barc.com' href='http://barc.com'}}}\n```\n\n### Asynchronous helpers\n\n```js\nhbs.registerAsyncHelper('readFile', function(filename, cb) {\n  fs.readFile(path.join(viewsDir, filename), 'utf8', function(err, content) {\n    cb(new hbs.SafeString(content));\n  });\n});\n```\n\nin markup\n```\n{{{readFile 'tos.txt'}}}\n```\n\n\n## i18n support\n\nExpress-hbs supports [i18n](https://github.com/mashpie/i18n-node)\n\n```js\nvar i18n = require('i18n');\n\n// minimal config\ni18n.configure({\n    locales: ['en', 'fr'],\n    cookie: 'locale',\n    directory: __dirname + \"/locales\"\n});\n\napp.engine('hbs', hbs.express3({\n    // ... options from above\n    i18n: i18n,  // registers __ and __n helpers\n}));\napp.set('view engine', 'hbs');\napp.set('views', viewsDir);\n\n// cookies are needed\napp.use(express.cookieParser());\n\n// init i18n module\napp.use(i18n.init);\n```\n\n## Engine Instances\n\nCreate isolated engine instances with their own cache system and handlebars engine.\n\n```js\nvar hbs = require('express-hbs');\nvar instance1 = hbs.create();\nvar instance2 = hbs.create();\n```\n\n## Template options\n\nThe main use case for template options is setting the handlebars \"data\" object - this creates global template variables accessible with an `@` prefix.\n\nTemplate options can be set in 3 ways. When setting global template options they can be [passed as config on creation of an instance](https://github.com/barc/express-hbs#usage), and they can also be updated used the `updateTemplateOptions(templateOptions)` method of an instance. To set template options for an individual request they can be set on `res.locals` using the helper method `updateLocalTemplateOptions(locals, templateOptions)`.\n\nBoth of these methods have a companion method `getTemplateOptions()` and `getLocalTemplateOptions(locals)`, which should be used when extending or merging the current options.\n\n## Example\n\nin File `app.js`\n\n```js\n// http://expressjs.com/api.html#app.locals\napp.locals({\n    'PROD_MODE': 'production' === app.get('env')\n});\n\n```\n\nFile `views/layout/default.hbs`\n\n```html\n<html>\n  <head>\n    <title>{{title}}</title>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/css/style.css\"/>\n    {{{block \"pageStyles\"}}}\n  </head>\n  <body>\n    {{{body}}}\n\n    {{> scripts}}\n\n    {{#if PROD_MODE}}\n    {{{block 'googleAnalyticsScripts'}}}\n    {{/if}}\n\n  </body>\n</html>\n```\n\n\nFile `views/index.hbs`\n\n```html\n{{!< default}}\n\n{{#contentFor 'pageStyles'}}\n<style>\n  .clicker {\n    color: blue;\n  };\n</style>\n{{/contentFor}}\n\n<h1>{{title}}</h1>\n<p class=\"clicker\">Click me!</p>\n```\n\nTo run example project\n\n    npm install -d\n    node example/app.js\n\n\n## Testing\n\nThe test suite requires the `grunt-cli` package:\n\n    npm install -g grunt-cli\n    npm install -d\n\nOnce everything's installed, just run:\n\n    npm test\n\n\n## Credits\n\nInspiration and code from [donpark/hbs](https://github.com/donpark/hbs)\n\nBig thanks to all [CONTRIBUTORS](https://github.com/TryGhost/express-hbs/contributors)\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2012-2021 Barc, Inc., Ghost Foundation - Released under the [MIT license](LICENSE).\n"], "fixing_code": ["# express-hbs\n\nExpress handlebars template engine with multiple layouts, blocks and cached partials.\n\n## v2.0.0\n\nVersion 2 was a rewrite and cleanup, with no known breaking changes. Lots of bugs were fixed which may have subtly changed behaviour.\n\nFull details: https://github.com/TryGhost/express-hbs/releases/tag/2.0.0\n\n## v1.0.0 Breaking Changes\n\nIf you're upgrading from v0.8.4 to v1.0.0 there are some potentially breaking changes to be aware of:\n\n1. Handlebars @v4.0.5 - please see the [handlebars v4.0 compatibility notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v400---september-1st-2015)\n2. The file extension for partial files must now match the extension configured in `extname` - please see [the PR](https://github.com/TryGhost/express-hbs/pull/88)\n\n## Usage\n\nTo use with express 4.\n```js\nvar hbs = require('express-hbs');\n\n// Use `.hbs` for extensions and find partials in `views/partials`.\napp.engine('hbs', hbs.express4({\n  partialsDir: __dirname + '/views/partials'\n}));\napp.set('view engine', 'hbs');\napp.set('views', __dirname + '/views');\n```\nTo use with express 3 is the same as above, except use hbs.express3\n\n```js\napp.engine('hbs', hbs.express3({\n  partialsDir: __dirname + '/views/partials'\n}));\n```\n\nOptions for `#express3` and `#express4`\n\n```js\nhbs.express4({\n  partialsDir: \"{String/Array} [Required] Path to partials templates, one or several directories\",\n\n  // OPTIONAL settings\n  blockHelperName: \"{String} Override 'block' helper name.\",\n  contentHelperName: \"{String} Override 'contentFor' helper name.\",\n  defaultLayout: \"{String} Absolute path to default layout template\",\n  extname: \"{String} Extension for templates & partials, defaults to `.hbs`\",\n  handlebars: \"{Module} Use external handlebars instead of express-hbs dependency\",\n  i18n: \"{Object} i18n object\",\n  layoutsDir: \"{String} Path to layout templates\",\n  templateOptions: \"{Object} options to pass to template()\",\n  beautify: \"{Boolean} whether to pretty print HTML, see github.com/einars/js-beautify .jsbeautifyrc\",\n\n  // override the default compile\n  onCompile: function(exhbs, source, filename) {\n    var options;\n    if (filename && filename.indexOf('partials') > -1) {\n      options = {preventIndent: true};\n    }\n    return exhbs.handlebars.compile(source, options);\n  }\n});\n```\n\n## Syntax\n\nTo mark where layout should insert page\n\n    {{{body}}}\n\nTo declare a block placeholder in layout\n\n    {{{block \"pageScripts\"}}}\n\nTo define block content in a page\n\n    {{#contentFor \"pageScripts\"}}\n      CONTENT HERE\n    {{/contentFor}}\n\n## Layouts\n\nThere are three ways to use a layout, listed in precedence order\n\n1.  Declarative within a page. Use handlebars comment\n\n        {{!< LAYOUT}}\n\n    Layout file resolution:\n\n        If path starts with '.'\n            LAYOUT is relative to template\n        Else If `layoutsDir` is set\n            LAYOUT is relative to `layoutsDir`\n        Else\n            LAYOUT from path.resolve(dirname(template), LAYOUT)\n\n2.  As an option to render\n\n    ## \u26a0\ufe0f This creates a potential security vulnerability:\n\n    Do not use this option in conjunction with passing user submitted data to res.render e.g. `res.render('index', req.query)`. This allows users to read arbitrary files from your filesystem!\n\n    ```js\n    res.render('veggies', {\n      title: 'My favorite veggies',\n      veggies: veggies,\n      layout: 'layout/veggie'\n    });\n    ```\n\n    This option also allows for layout suppression (both the default layout and when specified declaratively in a page) by passing in a falsey Javascript value as the value of the `layout` property:\n\n    ```js\n    res.render('veggies', {\n      title: 'My favorite veggies',\n      veggies: veggies,\n      layout: null // render without using a layout template\n    });\n    ```\n\n    Layout file resolution:\n\n        If path starts with '.'\n            layout is relative to template\n        Else If `layoutsDir` is set\n            layout is relative to `layoutsDir`\n        Else\n            layout from path.resolve(viewsDir, layout)\n\n3.  Lastly, use `defaultLayout` if specified in hbs configuration options.\n\nLayouts can be nested: just include a declarative layout tag within any layout\ntemplate to have its content included in the declared \"parent\" layout.  Be\naware that too much nesting can impact performances, and stay away from\ninfinite loops!\n\n## Helpers\n\n### Synchronous helpers\n\n```js\nhbs.registerHelper('link', function(text, options) {\n  var attrs = [];\n  for(var prop in options.hash) {\n    attrs.push(prop + '=\"' + options.hash[prop] + '\"');\n  }\n  return new hbs.SafeString(\n    \"<a \" + attrs.join(\" \") + \">\" + text + \"</a>\"\n  );\n});\n```\n\nin markup\n```\n{{{link 'barc.com' href='http://barc.com'}}}\n```\n\n### Asynchronous helpers\n\n```js\nhbs.registerAsyncHelper('readFile', function(filename, cb) {\n  fs.readFile(path.join(viewsDir, filename), 'utf8', function(err, content) {\n    cb(new hbs.SafeString(content));\n  });\n});\n```\n\nin markup\n```\n{{{readFile 'tos.txt'}}}\n```\n\n\n## i18n support\n\nExpress-hbs supports [i18n](https://github.com/mashpie/i18n-node)\n\n```js\nvar i18n = require('i18n');\n\n// minimal config\ni18n.configure({\n    locales: ['en', 'fr'],\n    cookie: 'locale',\n    directory: __dirname + \"/locales\"\n});\n\napp.engine('hbs', hbs.express3({\n    // ... options from above\n    i18n: i18n,  // registers __ and __n helpers\n}));\napp.set('view engine', 'hbs');\napp.set('views', viewsDir);\n\n// cookies are needed\napp.use(express.cookieParser());\n\n// init i18n module\napp.use(i18n.init);\n```\n\n## Engine Instances\n\nCreate isolated engine instances with their own cache system and handlebars engine.\n\n```js\nvar hbs = require('express-hbs');\nvar instance1 = hbs.create();\nvar instance2 = hbs.create();\n```\n\n## Template options\n\nThe main use case for template options is setting the handlebars \"data\" object - this creates global template variables accessible with an `@` prefix.\n\nTemplate options can be set in 3 ways. When setting global template options they can be [passed as config on creation of an instance](https://github.com/barc/express-hbs#usage), and they can also be updated used the `updateTemplateOptions(templateOptions)` method of an instance. To set template options for an individual request they can be set on `res.locals` using the helper method `updateLocalTemplateOptions(locals, templateOptions)`.\n\nBoth of these methods have a companion method `getTemplateOptions()` and `getLocalTemplateOptions(locals)`, which should be used when extending or merging the current options.\n\n## Example\n\nin File `app.js`\n\n```js\n// http://expressjs.com/api.html#app.locals\napp.locals({\n    'PROD_MODE': 'production' === app.get('env')\n});\n\n```\n\nFile `views/layout/default.hbs`\n\n```html\n<html>\n  <head>\n    <title>{{title}}</title>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/css/style.css\"/>\n    {{{block \"pageStyles\"}}}\n  </head>\n  <body>\n    {{{body}}}\n\n    {{> scripts}}\n\n    {{#if PROD_MODE}}\n    {{{block 'googleAnalyticsScripts'}}}\n    {{/if}}\n\n  </body>\n</html>\n```\n\n\nFile `views/index.hbs`\n\n```html\n{{!< default}}\n\n{{#contentFor 'pageStyles'}}\n<style>\n  .clicker {\n    color: blue;\n  };\n</style>\n{{/contentFor}}\n\n<h1>{{title}}</h1>\n<p class=\"clicker\">Click me!</p>\n```\n\nTo run example project\n\n    npm install -d\n    node example/app.js\n\n\n## Testing\n\nThe test suite requires the `grunt-cli` package:\n\n    npm install -g grunt-cli\n    npm install -d\n\nOnce everything's installed, just run:\n\n    npm test\n\n\n## Credits\n\nInspiration and code from [donpark/hbs](https://github.com/donpark/hbs)\n\nBig thanks to all [CONTRIBUTORS](https://github.com/TryGhost/express-hbs/contributors)\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2012-2021 Barc, Inc., Ghost Foundation - Released under the [MIT license](LICENSE).\n"], "filenames": ["README.md"], "buggy_code_start_loc": [101], "buggy_code_end_loc": [101], "fixing_code_start_loc": [102], "fixing_code_end_loc": [106], "type": "CWE-94", "message": "express-hbs is an Express handlebars template engine. express-hbs mixes pure template data with engine configuration options through the Express render API. More specifically, the layout parameter may trigger file disclosure vulnerabilities in downstream applications. This potential vulnerability is somewhat restricted in that only files with existing extentions (i.e. file.extension) can be included, files that lack an extension will have .hbs appended to them. For complete details refer to the referenced GHSL-2021-019 report. Notes in documentation have been added to help users of express-hbs avoid this potential information exposure vulnerability.", "other": {"cve": {"id": "CVE-2021-32817", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T19:15:07.840", "lastModified": "2022-07-02T18:24:31.157", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "express-hbs is an Express handlebars template engine. express-hbs mixes pure template data with engine configuration options through the Express render API. More specifically, the layout parameter may trigger file disclosure vulnerabilities in downstream applications. This potential vulnerability is somewhat restricted in that only files with existing extentions (i.e. file.extension) can be included, files that lack an extension will have .hbs appended to them. For complete details refer to the referenced GHSL-2021-019 report. Notes in documentation have been added to help users of express-hbs avoid this potential information exposure vulnerability."}, {"lang": "es", "value": "express-hbs es un motor de plantilla handlebars Express.&#xa0;express-hbs mezcla datos de plantilla puros con opciones de configuraci\u00f3n del motor mediante la API de renderizado Express.&#xa0;M\u00e1s espec\u00edficamente, el par\u00e1metro de dise\u00f1o puede desencadenar vulnerabilidades de divulgaci\u00f3n de archivos en aplicaciones posteriores.&#xa0;Esta vulnerabilidad potencial est\u00e1 algo restringida en el sentido de que solo pueden ser incluidos archivos con extensiones existentes (es decir, file.extension); los archivos que carecen de extensi\u00f3n tendr\u00e1n .hbs adjunto a ellos.&#xa0;Para obtener detalles completos, consulte el reporte GHSL-2021-019 al que se hace referencia.&#xa0;Se han agregado notas en una documentaci\u00f3n para ayudar a usuarios de express-hbs a evitar esta potencial vulnerabilidad de exposici\u00f3n de informaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 4.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:express_handlebars_project:express_handlebars:*:*:*:*:*:node.js:*:*", "versionEndIncluding": "5.3.2", "matchCriteriaId": "068FB627-1A18-4647-ACAD-3C5EEFA3750B"}]}]}], "references": [{"url": "https://github.com/TryGhost/express-hbs#%EF%B8%8F-this-creates-a-potential-security-vulnerability", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/TryGhost/express-hbs/commit/ff6fad6e357699412d4e916273314e5e7af1500e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://securitylab.github.com/advisories/GHSL-2021-019-express-hbs/", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/express-hbs", "source": "security-advisories@github.com", "tags": ["Product"]}]}, "github_commit_url": "https://github.com/TryGhost/express-hbs/commit/ff6fad6e357699412d4e916273314e5e7af1500e"}}