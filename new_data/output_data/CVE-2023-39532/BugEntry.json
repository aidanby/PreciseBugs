{"buggy_code": ["User-visible changes in SES:\n\n# v0.18.5 (2023-07-14)\n\n- Adds `assert.bare` for embedding unquoted strings in details.\n- Permits new `dispose` symbols, other recent additions to JavaScript, and for\n  the anticipated iterator helpers.\n- Tames `Symbol` so symbols can be preserved in the start compartment and\n  denied to shared compartments.\n- Improves debugging in Safari.\n- Adds missing native function markers.\n  All native functions should have a `toString` that says `[native code]`, even\n  if emulated.\n\n# v0.18.4 (2023-04-20)\n\n- Pass through the start compartment's `globalThis.harden` if defined.\n\n# v0.18.3 (2023-04-14)\n\n- New `__hardenTaming__: 'unsafe'` lockdown option to fake harden unsafely,\n  which can be used to improve performance for applications that are known to be\n  safe even with a no-op `harden`.\n- Finite deep stacks, using LRU budgets for depth of stacks an well as the\n  maximum number of weakly-held errors to annotate.\n- Add `%AsyncGenerator%.length` and `%AsyncFunctionPrototype%.length` `number`\n  properties to allowlist.\n\n# v0.18.2 (2023-03-07)\n\n- Introduces the `__syncModuleFunctor__` property of static module record\n  to replace evauluation of `__syncModuleProgram__` for environments without eval.\n\n# v0.18.1 (2022-12-23)\n\n- Fixes a bug for SES initialization in a no-unsafe-eval\n  Content-Security-Policy.\n- Fixes a bug where reexport of multiple named exports of the same name was\n  causing them to be overridden by the last value. Now named exports are \n  handled in the same manner as `export *`.\n- Allows Compatment `importHook` implementations to return aliases: module\n  descriptors that refer to a module by its specifier in the same or a\n  specified compartment, without providing a static module record (module\n  source).\n\n# v0.18.0 (2022-11-14)\n\n- *BREAKING*: Removes support for `globalLexicals`.\n  To our knowledge, there are no production uses for `globalLexicals`.\n  They currently could leak because `moduleLexicals` and `globalLexicals`\n  used the same scope object, so properties of one would leak to the other\n  with crafted modules.\n  We had an opportunity to plug the leak at the cost of a fifth scope\n  in all evaluators, but elected to remove the unnecessary complexity instead.\n\n# v0.17.0 (2022-10-24)\n\n- Previous versions of SES would leak the proxy used to isolate evaluated\n  code to functions added to the global object by guest code.\n  The value of `this` in such functions should be `undefined`, but that is not\n  possible to emulate in this shim.\n  This version changes the value of `this` in such functions to be the same as\n  `globalThis` of the compartment, as would be correct in sloppy mode.\n- Removes experimental support for \"known scope proxies\".\n\n# v0.16.0 (2022-10-19)\n\n- When hardening a typed array, detects and locks down properties named as\n  number-coercible strings that are not index properties.\n\n# v0.15.23 (2022-09-27)\n\n- Fixes the unhandled promise rejection logic to report unhandled rejections\n  when the promise is collected. Because of a bug it previously only reported\n  at process exit.\n- Improves the fidelity of emulation for V8 `Error.prepareStackTrace`,\n  allowing more legacy code to work by default in isolation.\n\n# v0.15.18 (2022-08-23)\n\n- Removes the `__allowUnsafeMonkeyPatching__` option to lockdown. As the name\n  should indicate, this was always an unsafe temporary kludge. Its only known\n  use was in agoric-sdk, now gone at\n  https://github.com/Agoric/agoric-sdk/pull/5922 . Without this option, a\n  successful `lockdown` will now always harden the primordials.\n\n# v0.15.8 (2022-02-18)\n\n- Harden now gives special treatment to typed arrays.\n  Instead of freezing a typed array, harden will seal it and make all of its\n  non-integer properties non-writable.\n  All of their integer properties will remain writable and non-configurable.\n  TypedArrays are exceedingly unusual because their integer properties are\n  writable and neither freeze nor defineProperty can convert them from writable\n  to non-writable.\n\n# v0.15.3 (2022-01-21)\n\n- Fixes the type definition for assert.error so that the final options bag,\n  which may include `errorName`, checks correctly in TypeScript.\n- Lockdown will now throw an error if code running before SES initialization\n  replaced `eval`.\n\n# 0.15.2 (2021-12-08)\n\n- The `Removing...` messages that Lockdown emits when encountering unrecognized\n  properties on shared intrinsics are now logged as \"warnings\".\n  This has the material benefit of sending these messages to STDERR on Node.js.\n- Updates permits for all current TC39 stage 3 and 4 proposals, notably\n  suppressing the `Removing...` messages for `Object.hasOwn`; `findLast` and\n  `findLastIndex` on both `Array.prototype` and `TypedArray.prototype`; and the\n  properties `transfer`, `resize`, `resizable`, and `maxByteLength` of\n  `ArrayBuffer.prototype`.\n\n# 0.15.1 (2021-11-15)\n\n- The TypeScript definition of `lockdown` now allows for the option\n  `\"errorTrapping\": \"none\"`.\n- Fixes error trapping on the web, showing both the message (and stack) of any\n  error that throws out of the top of an event.\n\n# 0.15.0 (2021-11-02)\n\n- _BREAKING CHANGE_: The lockdown option `domainTaming` is now `safe` by\n  default, which will break any application that depends transtively on the\n  Node.js `domain` module.\n  Notably, [standard-things/esm](https://github.com/standard-things/esm)\n  uses domains and so SES will not support `node -r esm` going forward.\n\n  This protects against the unhardened `domain` property appearing on shared\n  objects like callbacks and promises.\n  This overcomes the last _known_ obstacle toward object capability containment.\n\n- Lockdown will now read options from the environment as defined by the Node.js\n  `process.env` parameter space.\n- _BREAKING CHANGE_: Lockdown may no longer be called more than once.\n  Lockdown no longer returns a boolean to indicate whether it was effective\n  (true) or redundant (false). Instead, Lockdown will return undefined for\n  its first invocation or throw an error otherwise.\n\n# 0.14.4 (2021-10-14)\n\n- Fixes a defect in the per-compartment `Function` and `eval` functions, such\n  that these environments did not have the compartment's `globalLexicals`.\n  There is no known environment depending on this invariant for security\n  reasons, but such a scenario would be a program arranging a translator that\n  introduces run-time security checks, like metering, that depend on the\n  existence of a named global lexical.\n  [#898](https://github.com/endojs/endo/issues/898)\n- The above fix incidentally improved the performance of compartment evaluation\n  for cases that do not require special global lexicals, by sharing a single\n  per-compartment evaluator.\n\n# 0.14.3 (2021-09-18)\n\n- Due to a peculiar bit of error handling code in Node 14, as explained at\n  [Hardened JavaScript interferes with Node.js 14 Error\n  construction](https://github.com/endojs/endo/issues/868),\n  we have added more overrides to the default `overrideTaming: 'moderate'`\n  setting. At this setting, assigning to the `name` property of a mutable error\n  instance should work. It will continue not to work at the `'min'` setting, so\n  use the default `'moderate'` setting if you need to.\n- Adds a lockdown option `domainTaming` to detect whether Node.js domains have\n  been initialized and prevents them from being initialized afterward.\n  Domains otherwise presented a hazard to the integrity of SES containment on\n  Node.js.\n  The option defaults to `\"unsafe\"` in this version and will be switched to\n  `\"safe\"` by default in the next release that allows for breaking-changes, to\n  afford a gradual migration.\n  Thank you to @dominictarr with [Least Authority](https://leastauthority.com/)\n  for devising this feature.\n- Fixes reflexive module imports. Previously, SES would fail to initialize a\n  module graph where a module imported an alias to itself.\n\n# 0.14.1 (2021-08-12)\n\n- Adds permits for `Array.prototype.at` and `String.prototype.at` which are\n  Stage 3 proposals for ECMA 262.\n\n# 0.14.0 (2021-07-22)\n\n- _BREAKING_: Any precompiled static module records from prior versions\n  will not load in this version of SES or beyond. The format of the preamble\n  has been changed to admit the possibility of a variable named `Map` declared\n  in the scope of a module.\n- Fixes the type assertions for `assert` and `assert.string`.\n- Reveals `harden` only after `lockdown`. Harden was never usable before\n  lockdown because it would render the environment irreparable.\n  Calling `harden` before `lockdown` previously threw an exception.\n  Now it is possible to write libraries that are usable both in JS and SES,\n  which can know whether to harden their API by the presence of harden in\n  global scope.\n- Adds `errorTrapping` lockdown option and by default traps uncaught exceptions\n  and logs them back with their original stack traces.\n  These would previously appear as mysterios `{}` lines in Node.js.\n\n# 0.13.4 (2021-06-19)\n\n- Adds more TypeScript definitions, importable with `/// <reference types=\"ses\"/>`, covering `harden`, `lockdown`, `assert`, and `Compartment`,\n  and many types importable with `import('ses')` notation.\n- Adds descriptive detail to module system link error messages and fixes the\n  reported exports for one.\n\n# 0.13.1 (2021-06-05)\n\n- Fixes type exports for `harden`.\n- Packaging fixes.\n\n# 0.13.0 (2021-06-01)\n\n- _BREAKING CHANGE_ The `ses/lockdown` module is again just `ses`.\n  Instead of having a light 43KB `ses/lockdown` and a heavy 3.1MB `ses`, there\n  is just a 52KB `ses` that has everything except `StaticModuleRecord`.\n  For this release, there remains a `ses/lockdown` alias to `ses`.\n- _BREAKING CHANGE_ Third-party static module interface implementations _must_\n  now explicitly list their exported names.\n  For CommonJS, this implies using a heuristic static analysis of `exports`\n  changes.\n  Consequently, third-party modules can now participate in linkage with ESM\n  including support for `export * from './spec.cjs'` and also named imports\n  like `import * from './spec.cjs'`.\n- _BREAKING CHANGE_ The `StaticModuleRecord` constructor has been removed in\n  favor of a duck-type for compiled static module records that is intrinsic to\n  the shim and may be emulated by a third-party `StaticModuleRecord`\n  constructor.\n  The constructor must perform the module analysis and transform the source,\n  and present this duck-type to the Compartment `importHook`.\n  This relieves SES of a dependency on Babel and simplifies its API.\n- _BREAKING CHANGE_ The UMD distribution of SES must have the UTF-8 charset.\n  The prior versions were accidentally ASCII, so SES would have worked\n  in any web page, regardless of the charset.\n  To remedy this, be sure to include `<head><meta charset=\"utf-8\"></head>` in\n  the containing page (a general best-practice for web pages) or specifically\n  use `<script charset=\"utf-8\" src=\"ses.umd.min.js\">` to address the single\n  file.\n- Relaxes the censorship of `import` and `eval` in programs evaluated\n  under SES to specifically allow the use of `something.import()` or\n  `something.eval()` methods.\n- Fix: `new Compartment(null, null, options)` no longer throws.\n- New lockdown option: `overrideDebug: [...props]` to detect where a property\n  assignment needs to be turned into a `defineProperty` to avoid the override\n  mistake. Most useful as `overrideTaming: 'severe', overrideDebug: ['constructor']`.\n- We reopened Safari bug\n  [Object.defineProperties triggering a setter](https://bugs.webkit.org/show_bug.cgi?id=222538#c17)\n  when we found that it was causing an infinite recursion initializing SES\n  on Safari.\n- We revised an error message to include the error tag of a new error\n  explanation page:\n  [SES_DEFINE_PROPERTY_FAILED_SILENTLY](error-codes/SES_DEFINE_PROPERTY_FAILED_SILENTLY.md).\n  We hope to add such explanations for more errors over time. Please let us\n  know as you encounter errors that strongly needs explaining.\n\n# 0.12.7 (2021-05-05)\n\n- Added to `assert.error` an optional options bag with an option named\n  `errorName`. The `assert.error` function makes error objects with detailed\n  error messages whose unredacted contents appear only in `console` output\n  and are otherwise unobservable. If `errorName` is provided, then\n  it is also used in the console output instead of the normal error name,\n  but is otherwise unobservable. This will rarely be used, but will be\n  used by the `@agoric/marshal` package to name an unserialized error\n  so that it can be traced back to the site that serialized it; and\n  ultimately to its origin.\n\n# 0.12.6 (2021-03-27)\n\n- Added a new temporary `__allowUnsafeMonkeyPatching__` option to `lockdown`.\n\n  Sometimes SES is used where SES's safety is not required. Some libraries\n  are not compatible with SES because they monkey patch the shared primordials\n  is ways SES cannot allow. We temporarily introduce this option to enable\n  some of these libraries to work in, approximately, a SES environment\n  whose safety was sacrificed in order to allow this monkey patching to\n  succeed. More at the\n  [\\_\\_allowUnsafeMonkeyPatching\\_\\_ Options](./lockdown-options.md#__allowUnsafeMonkeyPatching__-options)\n  section of [lockdown-options](./lockdown-options.md).\n\n# 0.12.5 (2021-03-25)\n\n- The 0.12.4 release was broken by https://github.com/endojs/endo/pull/552\n  since fixed by https://github.com/endojs/endo/pull/638\n- These merely remove a repair needed by an old v8 / Node version that\n  no one any longer supports.\n\n# 0.12.4 (2021-03-24)\n\n- Expand TypeScript definitions to include Compartment, StaticModuleRecord,\n  StaticModuleType, RedirectStaticModuleInterface, FinalStaticModuleType,\n  ThirdPartyStaticModuleInterface, Transform, ImportHook, and ModuleMapHook.\n- The previous took `Object.prototype.constructor` off of the default\n  [list of properties](src/enablements.js) we enable to be overridden by\n  assignment. This default is the `{overrideTaming: 'moderate'}` setting.\n  In this release, we stop enabling `'hasOwnProperty'` by default as\n  well. With both of these gone, we now have a reasonable debugging\n  experience.\n- Unfortunately, both rollup and webpack seem to turn exported names\n  into assignments to an `exports` object that inherits from\n  `Object.prototype`, thereby potentially stepping on any name.\n  To deal with this perverse case, the release also provides an\n  `{overrideTaming: 'severe'}` option which enables all properties on\n  at least `Object.prototype`. This is more compatible but makes the\n  vscode debugger's inspector unusable. At\n  [Tracking issue for getting 3rd party packages more SES friendly (#576)](https://github.com/endojs/endo/issues/576)\n  we track the incompatibilities we encounter and progress toward\n  getting them fixed.\n- Add utility function `Compartment.prototype.__isKnownScopeProxy__(value)` to\n  aid working around scopeProxy leakage. Returns true if `value` is one of the\n  scopeProxies created during calls to this Compartment instances's\n  `Compartment.prototype.evaluate`. See `test-compartment-known-scope-proxy.js`\n  for an example of performing a scopeProxy leak workaround.\n- Under the default `{errorTaming: 'safe'}` setting, the SES shim already redacts stack traces from error instances when it can (currently: v8, spiderMonkey, XS). The setting `{errorTaming: 'unsafe'}` suppresses that redaction, instead blabbing these stack traces on error instances via the expected `errorInstance.stack`.\n\n  The purpose of the `details` template literal tag (often spelled `X` or `d`) together with the `quote` function (often spelled `q`) is to redact data from the error messages carried by error instances. With this release, the same `{errorTaming: 'unsafe'}` would suppress that redaction as well, so that all substitution values would act like they've been quoted. IOW, with this setting\n\n  ```js\n  assert(false, X`literal part ${secretData} with ${q(publicData)}.`);\n  ```\n\n  acts like\n\n  ```js\n  assert(false, X`literal part ${q(secretData)} with ${q(publicData)}.`);\n  ```\n\n  Note that the information rendered by the SES shim `console` object always includes all the unredacted data independent of the setting of `errorTaming`.\n\n# 0.12.3 (2021-03-01)\n\n- The `assert.js` module in the `ses` package of this repository exports\n  a `makeAssert` function, to make other `assert` functions with a different\n  failure scope. Inadvertantly, this did not enable the `@agoric/assert`\n  package (currently defined in the agoric-sdk repository) to reexport\n  the same `makeAssert` function as originally intended, and now\n  [needed](https://github.com/Agoric/agoric-sdk/pull/2515).\n  As of this release the `assert` object exported by the `assert.js` module\n  now carries this function as a `makeAssert` property.\n- The `assert.quote` function re-exported by `@agoric/assert` as `q`\n  has always done only a best effort stringify, intended only to\n  be interpreted by a human under benign conditions. Within that constraint\n  its best effort is now better, providing informative though ambiguous\n  renderings of values problematic for `JSON.stringify`, still including\n  cycles, but now also functions, promises, `undefined`, `NaN`, `Infinity`,\n  bigints, and symbols. To distinguish this from\n  strings in the input, these synthesized strings always begin and\n  end with square brackets. To distinguish those strings from an\n  input string with square brackets, an input string that starts\n  with an open square bracket `[` is itself placed in square brackets.\n- The `q` function now has an optional second `spaces` parameter which is\n  passed through to the underlying `JSON.stringfiy`. Passing in a space or\n  two spaces makes the output much more readable using indentation and other\n  whitespace, but takes multiple lines.\n- The SES enhanced `console` had previously only produced meaningful stack\n  traces on v8-based browsers such as Brave, Chromium, or Chrome. It now\n  works on Firefox and Safari as well. It should work on all major browsers\n  but have not yet been tested on others.\n- On all platforms `Error.stackTrace` is now an assignable accessor property.\n  On v8-based platforms, for the `Error` constructor in the start compartment,\n  it has the same effect that it does outside SES. Outside the start\n  compartment, or outside v8-based platforms, the assignment succeeds silently\n  with no effect.\n  This accommodates a de facto standard idiom encouraged by Google.\n- The \"SES Demo Console\" and \"SES Challenge\" have been fixed to work with\n  modern SES. Both now run in browsers, though these are not yet hosted\n  for visiting as an external web page.\n- We no longer enable overriding `Object.prototype.constructor` by assigning\n  to the `constructor` property of a derived object. We were enabling it\n  due to a bug in acorn 7, since fixed in acorn 8. To enable it, we were\n  making `Object.prototype.constructor` into an accessor property, which\n  confused the Node debugger, causing annoying extra noise in the console\n  output. Now that we've worked around our acorn problem (currently with\n  a patch) we have stopped enabling this assignment, and so stopped\n  confusing the Node debugger.\n\n# 0.12.2 (2021-02-05)\n\n- fix non-standard regex range syntax that throws on XS (3877d72)\n- refine concise stack traces (cbbabeb)\n\n# 0.12.1 (2021-02-02)\n\n- Consolidated documentation of [`lockdown` options](./lockdown-options.md) into its\n  own page.\n- Added a `stackFiltering` option to `lockdown` with\n  two settings, `'concise'` and `'verbose'`. Stack traces are now filtered\n  `'concise'` by default, making them typically much easier to work with.\n  `'verbose'` shows complete stack traces, as sometimes it contains clues\n  needed to find your bug.\n  See [`stackFiltering` options](./lockdown-options.md#stackfiltering-options)\n  for an explanation.\n- Changed the meaning of the default `'moderate'` setting of the\n  `overrideTaming` options of `lockdown`. See\n  [`overrideTaming` options](./lockdown-options.md#overridetaming-options)\n  for an explanation of when to use which.\n\n:warning: This change of meaning of the `'moderate'` setting of the\n`overrideTaming` option of `lockdown` is not strictly compatible with its\nold meaning. The old `'moderate`' setting would enable all properties on a few\nwidely used prototype objects, including `Object.prototype`. Resulting in a\nmiserable debugging experience when using the VSCode debugger's object\ninspector.\n\n<details>\n  <summary>Expand to see the vscode inspector display if enabling all of Object.prototype</summary>\n\n![vscode inspector display if enabling all of Object.prototype](docs/images/override-taming-star-inspector.png)\n\n</details>\n\nThe new `'moderate'` setting only tames those properties we know or expect to\nbe problematic. If you run into an override mistake problem not addressed at\nthe `'moderate'` setting **_please file an issue._**\n\n<details>\n  <summary>Expand for { overrideTaming: 'moderate' } vscode inspector display</summary>\n\n![overrideTaming: 'moderate' vscode inspector display](docs/images/override-taming-moderate-inspector.png)\n\n</details>\n\nFor an even better debugging experience, try the `'min'` setting, which\nmakes the debugging experience even less noisy, but may not be compatible with\nall the code you're running under SES.\n\n<details>\n  <summary>Expand for { overrideTaming: 'min' } vscode inspector display</summary>\n\n![overrideTaming: 'min' vscode inspector display](docs/images/override-taming-min-inspector.png)\n\n</details>\n\n# 0.11.1 (2021-01-21)\n\n- Upgrades `harden` such that that it transitively freezes an object's\n  prototype chain, eliminating the notion of a \"fringe set\" and errors\n  that were previously thrown if an object's prototype was not already\n  in the fringe.\n- Added an `overrideTaming` option to `lockdown` with two settings,\n  `'min'` and `'moderate'`. See\n  [Enabling Override by Assignment](README.md#enabling-override-by-assignment)\n  for an explanation of when to use which. **_(This documentation has moved\n  to [`overrideTaming`\n  options](./lockdown-options.md#overridetaming-options))_**\n- Modules and evaluated code that contains the censored substrings\n  for dynamic eval, dynamic import, and HTML comments will now\n  throw errors that contain the `sourceURL` from any `//#sourceURL=` comment\n  toward the end of the source or merely `<unknown>`.\n\n# 0.11.0 (2020-11-03)\n\n- `lockdown()` adds new global `assert` and tames the global `console`. The\n  error taming hides error stacks, accumulating them in side tables. The\n  `assert` system generated other diagnostic information hidden in side\n  tables. The tamed console uses these side tables to output more informative\n  diagnostics. [Logging Errors](./src/error/README.md) explains the design.\n- Adds a non-standardizable `__shimTransforms__` option to the\n  Compartment constructor that allows a single transform to work\n  for both programs passed to `evaluate` and modules that the SES shim\n  compiles to programs.\n\n# 0.10.4 (2020-09-28)\n\n- When converting each of [these data properties](src/enablements.js) to\n  accessor properties, to suppress the\n  [override mistake](https://github.com/tc39/ecma262/pull/1320), we now\n  add to that accessor's getter an `originalValue` property to mark it\n  as alleging that it is emulating a data property whose original value\n  was that value.\n- Fixes an exception thrown when calling `lockdown` after just importing\n  `ses/lockdown` in all environments.\n\n# 0.10.3 (2020-09-08)\n\n- The `ses/lockdown` module and Rollup bundles now include a minimal\n  implementation of `Compartment` that supports `evaluate` but not loading\n  modules.\n  This is sufficient for containment of JavaScript programs, including\n  modules that have been pre-compiled to programs out-of-band, without\n  entraining a full JavaScript parser framework.\n- Allows a compartment's `importHook` to return an \"alias\" if the returned\n  static module record has a different specifier than requested.\n- Adds the `name` option to the `Compartment` constructor and `name` accessor\n  to the `Compartment` prototype.\n  Errors that propagate through the module loader will be rethrown anew with\n  the name of the module and compartment so they can be traced.\n  At this time, the intermediate stacks of the causal chain are lost.\n  https://github.com/Agoric/SES-shim/issues/440\n\n# 0.10.2 (2020-08-20)\n\n- Adds a `moduleMapHook` option to the `Compartment` constructor options.\n  The module map hook can return values for the `moduleMap` for\n  any given module specifier, or return `undefined` to fall back to the\n  `importHook`.\n  This allows for wildcard linkage to other compartments.\n- Fix dependency version for `@agoric/transform-module`.\n\n# 0.10.1 (2020-08-13)\n\n- Updates the whitelist to allow a `HandledPromise` global, which is provided\n  by `@agoric/eventual-send`, an early implementation of\n  https://github.com/tc39/proposal-eventual-send.\n- Corrects our fix for the override mistake, so that it correctly emulates\n  how assignment would work in the absence of the override mistake.\n  A property created by assignment will now be a writable, enumerable,\n  configurable data property, as it is for normal assignment.\n\n# 0.10.0 (2020-08-08)\n\n- Creates a `ses/lockdown` module that only introduces `lockdown` and `harden`\n  to global scope, for a much smaller payload than `ses`, which entrains a\n  JavaScript parser to support ECMAScript modules.\n- Adds the `load` method to `Compartment`.\n  Load allows a bundler or archiver to use the `Compartment` API to gather the\n  transitive dependencies of modules without executing them.\n- Adds support for third-party implementations of a `StaticModuleRecord`\n  interface (`{imports, execute}`).\n\n# 0.9.1 (2020-07-16)\n\n- The `*Locale*` methods removed in the previous release are now restored\n  by aliasing them to their non-locale equivalents. `localeCompare` had no builtin\n  non-locale equivalent, so we provide one.\n- Adds a TypeScript definition for `harden`.\n\n# 0.9.0 (2020-07-13)\n\n- BREAKING CHANGE: The compartment `evaluate` method no longer accepts an\n  `endowments` option.\n  Use `compartment.globalThis`, `endowments`, or `globalLexicals`.\n  If per-evaluation `globalLexicals` or `endowments` are necessary,\n  each evaluation will need a fresh `Compartment`.\n- BREAKING CHANGE: The `lockdown` function's deprecated `noTame*` options have\n  been removed in favor of the `*Taming` options introduced in version 0.8.0.\n- BREAKING CHANGE: The `.toLocale*` methods of\n  Object/Number/BigInt/Date/String/Array/%TypedArray% were removed from SES\n  environments. This includes methods named `toLocaleString`,\n  `toLocaleDateString`, `toLocaleTimeString`, `toLocaleLowerCase`,\n  `toLocaleUpperCase`, and `localeCompare`. These may be restored (in a\n  modified form) in a future release.\n- The way `lockdown()` tames the `Error` constructor now cooperates\n  with the V8 stack trace API to a degree that is permissible without\n  breaking the integrity of applications that use it.\n- The Compartment constructor now accepts a `globalLexicals` option.\n  The own enumerable properties of the global lexicals are captured\n  and presented as constants in the scope of all calls to `evaluate` and all\n  modules.\n  The global lexicals overshadow the global object.\n\n# 0.8.0 (2020-05-26)\n\n- Adds support for modules to Compartments.\n- SES no longer exports anything.\n  `Compartment`, `StaticModuleRecord`, `lockdown`, and `harden` are all\n  introduced as properties of `globalThis`.\n- The `Compartment` `global` getter is now named `globalThis`, consistent with\n  the specification proposal.\n- The `Compartment` `transforms` constructor option is now just an array of\n  transform functions that accept and return program strings.\n  Transforms can no longer introduce `endowments`.\n  The compartment constructor's `endowments` argument (first) and assigning\n  properties to `globalThis` are the remaining supported ways to introduce\n  endowments.\n- Repair `Function.apply` and `TypeError.message` (as well as `.message` on\n  all the other Error types), to tolerate what the npm `es-abstract` module\n  does. This allows `tape` (version 4.x) to be loaded in a locked-down SES\n  world, and also allows its `t.throws` assertion to work. `tape` (version\n  5.x) still has problems. [#293]\n\n- Replaces the old `noTame*` options to `lockdown` with new `*Taming` options.\n  The old style had boolean values defaulting to `false`. In the new style,\n  each option supports at least the options `'safe'` and `'unsafe'` defaulting\n  to `'safe'`. As a transitional matter, this release still supports the\n  old style as well, as another way to say the same thing. [#326]\n\n  [#293]: https://github.com/Agoric/SES-shim/issues/293\n  [#326]: https://github.com/Agoric/SES-shim/issues/326\n\n# 0.7.7 (2020-04-27)\n\n- This version decouples lockdown and the Compartment constructor.\n  The Compartment constructor is now exported by `ses` (was previously only\n  available as a property of `globalThis` _after_ lockdown).\n  The Compartment constructor will also create \"privileged\" compartments when\n  constructed before lockdown.\n\n# 0.7.6 (2020-03-31)\n\nBug fixes.\nThis release fixes issues in RegExp and Error taming.\n\n# 0.7.4-5 (2020-03-21)\n\nThis release adds Node.js ESM support by upgrading @agoric/make-hardener to a\nhybrid version for most modern module systems.\n\n- Newless calls to the RegExp constructor now work after lockdown.\n\n- upgrade @agoric/make-hardener v0.0.8\n\n# 0.7.2-3 (2020-03-13)\n\nBug fixes.\nThis release addresses an exception observed where locking down fails because\nSES cannot delete the prototype of the harden function.\nThis is addressed by upgrading @agoric/make-harden to version 0.0.7.\nThis release also restores fulls upport for importing SES as CommonJS, Node.js\nESM, and Node.js emulated ESM with the `esm` package.\n\n# 0.7.1 (2020-13-10)\n\nSECURITY UPDATE: This complete re-architecture which removes the realm-shim and\nresolve the associatd sandbox escapes related to leaking cross-realm\nintrinsics. All users should update to this version.\n\nSee [docs/ses-0.7.md].\n\n# 0.6.4 (2019-10-16)\n\nSECURITY UPDATE: This release upgrades realms-shim to fix multiple sandbox\nescapes. All users should update to this version.\n\n- upgrade to realms-shim v1.2.1\n\nNon-security fixes:\n\n- improve documentation\n\n# 0.6.3 (2019-10-02)\n\nSECURITY UPDATE: This release upgrades realms-shim to fix multiple sandbox\nescapes. All users should update to this version.\n\n- upgrade to realms-shim v1.2.0\n\nNon-security fixes:\n\n- add `SES.harden` to make hardening available from within the Realm. (#161)\n\n# 0.6.2 (2019-09-25)\n\nNo user-visible changes.\n\nUse realms-shim as a normal package, not a git-submodule. Update eslint\ndependencies.\n\n# 0.6.1 (2019-19-14)\n\n- SECURITY UPDATE: This release fixes a sandbox escape discovered in the\n  realms-shim by GitHub user \"XmiliaH\", which works by causing an infinite\n  loop and extracting the real function constructor from the RangeError\n  exception object. See https://github.com/Agoric/realms-shim/issues/48 for\n  more details.\n\n# 0.6.0 (2019-09-03)\n\n- Breaking change: `options.transforms` may no longer specify `endow()`\n  transforms. Instead, use `rewrite()`, which can now modify endowments.\n  See https://github.com/Agoric/realms-shim/pull/38 for details.\n- Repair the \"override mistake\", with optional repair plan in\n  `options.dataPropertiesToRepair`. See src/bundle/dataPropertiesToRepair.js\n  and https://github.com/Agoric/SES/pull/146 for details.\n- `options.sloppyGlobals` is rejected by `makeSESRootRealm()`, since all SES\n  root realms are frozen. `sloppyGlobals` can only be used in a new\n  \"Compartment\", made by calling `Realm.makeCompartment(options)`. See\n  https://github.com/Agoric/SES/issues/142\n  https://github.com/Agoric/realms-shim/pull/33\n  https://github.com/Agoric/realms-shim/pull/30 for details.\n- Add `options.whitelist` to override the set of properties that are retained\n  in the new realm. The default gives you SES, but it could be overridden to\n  e.g. enforce a Jessie-only environment.\n\n# 0.5.3 (2019-07-24)\n\n- Re-enable indirect eval. (#131)\n\n# 0.5.2 (2019-07-13)\n\nDependency updates only, no user-visible changes.\n\n# 0.5.1 (2019-07-10)\n\n- The 'realms-shim' module, upon which SES depends, has been split out of the\n  TC39 'proposal-realms' repository, and now lives in\n  https://github.com/Agoric/realms-shim. It has not been released to NPM,\n  rather SES incorporates it as a git submodule. (#110)\n- The documentation is now hosted on ReadTheDocs at\n  https://ses-secure-ecmascript.readthedocs.io/en/latest/ (#111, #117)\n- SES.makeRootRealm() now accepts a 'transforms' option. This is a list of `{ endow, rewrite }` functions which can add/modify endowments and/or rewrite\n  source code each time an `evaluate()` is performed. (#125)\n\nThanks to Kate Sills, Dan Connolly, Michael Fig, and the ever-dependable\nDependabot for additional fixes in this release.\n\n# 0.5.0 (2019-04-05)\n\nINCOMPATIBLE API CHANGE: Starting with this release, the SES package exports\na single default object (named `SES`, from which you can get the\n`SES.makeSESRootRealm()` function). Previously, it exported both a `SES`\nobject and the `makeSESRootRealm` function.\n\nCode which uses this package as an ES6 module must change its import from\n`import { SES } from 'ses';` to:\n\n```js\nimport SES from 'ses';\n```\n\nSimilarly, for code which uses CommonJS-style, it must change from `const { SES } = require('ses')` to:\n\n```js\nconst SES = require('ses');\n```\n\nThe package now exports bundles in various flavors: CommonJS, ES6 Module, and\nbrowser-based UMD.\n\nOther changes:\n\n- whitelist Symbol.matchAll, to fix Chrome-v73 (Issue #90)\n- change primary export #88\n- improve documentation #66 #67\n- add integration tests #85\n- packaging: remove ses-shim.js, add other generated bundles\n- update Realms shim to commit 0c00eb, to fix Browserify #79\n- test against node v10/v11, switch from travis to circleci #73\n- fix examples #102\n\nThanks to Matt Bell, Kate Sills, and Mark Miller for additional fixes in this\nrelease.\n\n# 0.4.0 (2019-02-20)\n\nImprove usability.\n\n- remove `Nat` and `def` from the global environment #45\n- provide a helper function named `s.makeRequire()` to build a `require`\n  endowment. This can be configured to enable `require('@agoric/nat')` or\n  `require('@agoric/harden')` (among others), so the same code can work\n  either inside or outside of a SES realm. For details of its configuration,\n  see the comments in the commit which landed it. #13\n- harden() comes from `@agoric/make-hardener`, which doesn't climb\n  prototype/inheritance chains, but does complain if the prototype wasn't\n  already known to harden(). This avoids the \"Ice-9\" freeze-the-world\n  problem, and also serves to signal when an object from one realm is passed\n  into the harden() of a different realm. #15\n- harden() now shares a WeakSet of previously-hardened objects #4\n- use harden() instead of def() #39\n- SES no longer depends upon Nat, but uses it during unit tests. Client code\n  that wants Nat should use `require('@agoric/nat')`. #45\n- Include AsyncIteratorPrototype in the set of anonIntrinsics #58\n- use eslint to format all SES code\n\n# 0.3.0 (2019-02-08)\n\nImproves security and functionality.\n\nThis fixes all known confinement leaks:\n\n- We now freeze AsyncGeneratorFunction and AsyncFunction, the last of the\n  \"anonymous\" intrinsics (which are reachable by syntax but not simple\n  property lookup). In the previous release, attacker code could modify their\n  behavior (which defender code might have been relying upon) or use them as\n  a communication channel. (#3, #41)\n- We now remove all unknown properties from the global object, using a\n  special list of ones that are safe to expose. This protects us from\n  surprising platform-specific objects, or newly-added standard JS objects\n  that have not yet been examined for safety. The 'Intl' object is currently\n  removed by this check (and `intlMode: \"allow\"` has been removed), but may\n  be brought back in a future release. (#26)\n- RegExp.prototype.compile is removed unconditionally (even if regexpMode:\n  \"allow\" is set), because it violates the semantics of Object.freeze\n\nIt also improves usability:\n\n- Uncaught exceptions in Node.js are now rendered correctly when the\n  `errorStackMode: \"allow\"` option is enabled. In the previous release, such\n  exceptions were always displayed as \"undefined\", which was particularly\n  unhelpful. If your program is abruptly exiting with \"undefined\", try\n  turning this option on while you're debugging. But don't leave it on,\n  because it probably enables a confinement breach.\n- SES is an ES6 module, but should now be importable with `require()` by\n  other code which is unaware of ES6 modules, because it now uses the `esm`\n  module internally. (#32)\n- `console.log` is now available within the confined code, if the\n  `consoleMode: \"allow\"` option is enabled. If this is disabled,\n  `console.log()` will throw a `TypeError` (since `console` is undefined, it\n  has no `log` property). Many other `console` methods (but not all) are\n  exposed too. (#35)\n\nSES now requires Node.js version 10 or later.\n\n# 0.2.0 (2019-01-18)\n\nImproves confinement, small API changes.\n\nThe options passed as `SES.makeSESRootRealm(options)` have changed:\n\n- `options.dateNowMode=\"allow\"` allows `Date.now()` and `new Date()` to\n  work normally, otherwise they return NaN\n- `options.mathRandomMode=\"allow\"` allows `Math.random()` to work\n  normally (nondeterministically), else it will throw an Error\n- `options.intlMode=\"allow\"` lets `Intl.DateTimeFormat()`, `Intl.NumberFormat()`,\n  and `Intl.getCanonicalLocales()` to work normally, else they throw Errors\n- `options.errorStackMode=\"allow\"` exposes `Error.prototype.stack` and\n  `Error.captureStackTrace` (on platforms that support them), otherwise they\n  are suppressed. Note that these could be used to break confinement, not\n  just access nondeterminism.\n\nPreviously the only option honored was `options.dateNowTrap = false`\n\nThe suppression of `Error.captureStackTrace` is new in this release. This\nrelease also suppresses `RegExp.prototype.compile` and properties like\n`RegExp.$1` which cause some surprising behavior.\n\n`SES.def` and `SES.Nat` are exported, so they can be used by non-confined\ncode (mostly in tests). `def(obj)` makes an object defensive, by freezing\nit's external API surface (anything reachable by property lookup and\nprototype traversal). `Nat(num)` throws an error unless its argument is a\nnatural number (a non-negative integer small enough to remain an integer\ninside a Javascript `Number` type). Both are important for defensive\nprogramming.\n\n# 0.1.3 (2018-08-24)\n\nAdds Nat and SES.confineExpr.\n\n- `Nat(val)` ensures the value is a natural (non-negative) integer\n- `SES.confineExpr(expr)` makes it easy to start with a function object, turn\n  it into a string, then into a new function inside the SES realm.\n\nThis also updates the challenge page to fix a demo vulnerability (#8).\n\n# 0.1.2 (2018-07-30)\n\n- npm name is now 'ses'\n- update to current proposal-realms\n\n# 0.0.1 (2018-07-28)\n\nfirst preliminary release\n", "// @ts-check\n\nimport {\n  FERAL_REG_EXP,\n  SyntaxError,\n  stringReplace,\n  stringSearch,\n  stringSlice,\n  stringSplit,\n  freeze,\n} from './commons.js';\nimport { getSourceURL } from './get-source-url.js';\n\n/**\n * Find the first occurence of the given pattern and return\n * the location as the approximate line number.\n *\n * @param {string} src\n * @param {RegExp} pattern\n * @returns {number}\n */\nfunction getLineNumber(src, pattern) {\n  const index = stringSearch(src, pattern);\n  if (index < 0) {\n    return -1;\n  }\n\n  // The importPattern incidentally captures an initial \\n in\n  // an attempt to reject a . prefix, so we need to offset\n  // the line number in that case.\n  const adjustment = src[index] === '\\n' ? 1 : 0;\n\n  return stringSplit(stringSlice(src, 0, index), '\\n').length + adjustment;\n}\n\n// /////////////////////////////////////////////////////////////////////////////\n\nconst htmlCommentPattern = new FERAL_REG_EXP(`(?:${'<'}!--|--${'>'})`, 'g');\n\n/**\n * Conservatively reject the source text if it may contain text that some\n * JavaScript parsers may treat as an html-like comment. To reject without\n * parsing, `rejectHtmlComments` will also reject some other text as well.\n *\n * https://www.ecma-international.org/ecma-262/9.0/index.html#sec-html-like-comments\n * explains that JavaScript parsers may or may not recognize html\n * comment tokens \"<\" immediately followed by \"!--\" and \"--\"\n * immediately followed by \">\" in non-module source text, and treat\n * them as a kind of line comment. Since otherwise both of these can\n * appear in normal JavaScript source code as a sequence of operators,\n * we have the terrifying possibility of the same source code parsing\n * one way on one correct JavaScript implementation, and another way\n * on another.\n *\n * This shim takes the conservative strategy of just rejecting source\n * text that contains these strings anywhere. Note that this very\n * source file is written strangely to avoid mentioning these\n * character strings explicitly.\n *\n * We do not write the regexp in a straightforward way, so that an\n * apparennt html comment does not appear in this file. Thus, we avoid\n * rejection by the overly eager rejectDangerousSources.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const rejectHtmlComments = src => {\n  const lineNumber = getLineNumber(src, htmlCommentPattern);\n  if (lineNumber < 0) {\n    return src;\n  }\n  const name = getSourceURL(src);\n  // See https://github.com/endojs/endo/blob/master/packages/ses/error-codes/SES_HTML_COMMENT_REJECTED.md\n  throw SyntaxError(\n    `Possible HTML comment rejected at ${name}:${lineNumber}. (SES_HTML_COMMENT_REJECTED)`,\n  );\n};\n\n/**\n * An optional transform to place ahead of `rejectHtmlComments` to evade *that*\n * rejection. However, it may change the meaning of the program.\n *\n * This evasion replaces each alleged html comment with the space-separated\n * JavaScript operator sequence that it may mean, assuming that it appears\n * outside of a comment or literal string, in source code where the JS\n * parser makes no special case for html comments (like module source code).\n * In that case, this evasion preserves the meaning of the program, though it\n * does change the souce column numbers on each effected line.\n *\n * If the html comment appeared in a literal (a string literal, regexp literal,\n * or a template literal), then this evasion will change the meaning of the\n * program by changing the text of that literal.\n *\n * If the html comment appeared in a JavaScript comment, then this evasion does\n * not change the meaning of the program because it only changes the contents of\n * those comments.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const evadeHtmlCommentTest = src => {\n  const replaceFn = match => (match[0] === '<' ? '< ! --' : '-- >');\n  return stringReplace(src, htmlCommentPattern, replaceFn);\n};\n\n// /////////////////////////////////////////////////////////////////////////////\n\nconst importPattern = new FERAL_REG_EXP(\n  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n  'g',\n);\n\n/**\n * Conservatively reject the source text if it may contain a dynamic\n * import expression. To reject without parsing, `rejectImportExpressions` will\n * also reject some other text as well.\n *\n * The proposed dynamic import expression is the only syntax currently\n * proposed, that can appear in non-module JavaScript code, that\n * enables direct access to the outside world that cannot be\n * suppressed or intercepted without parsing and rewriting. Instead,\n * this shim conservatively rejects any source text that seems to\n * contain such an expression. To do this safely without parsing, we\n * must also reject some valid programs, i.e., those containing\n * apparent import expressions in literal strings or comments.\n *\n * The current conservative rule looks for the identifier \"import\"\n * followed by either an open paren or something that looks like the\n * beginning of a comment. We assume that we do not need to worry\n * about html comment syntax because that was already rejected by\n * rejectHtmlComments.\n *\n * this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\n * U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\n * whitespace by the parser, but not matched by /\\s/, then this would admit\n * an attack like: import\\u2028('power.js') . We're trying to distinguish\n * something like that from something like importnotreally('power.js') which\n * is perfectly safe.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const rejectImportExpressions = src => {\n  const lineNumber = getLineNumber(src, importPattern);\n  if (lineNumber < 0) {\n    return src;\n  }\n  const name = getSourceURL(src);\n  // See https://github.com/endojs/endo/blob/master/packages/ses/error-codes/SES_IMPORT_REJECTED.md\n  throw SyntaxError(\n    `Possible import expression rejected at ${name}:${lineNumber}. (SES_IMPORT_REJECTED)`,\n  );\n};\n\n/**\n * An optional transform to place ahead of `rejectImportExpressions` to evade\n * *that* rejection. However, it may change the meaning of the program.\n *\n * This evasion replaces each suspicious `import` identifier with `__import__`.\n * If the alleged import expression appears in a JavaScript comment, this\n * evasion will not change the meaning of the program. If it appears in a\n * literal (string literal, regexp literal, or a template literal), then this\n * evasion will change the contents of that literal. If it appears as code\n * where it would be parsed as an expression, then it might or might not change\n * the meaning of the program, depending on the binding, if any, of the lexical\n * variable `__import__`.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const evadeImportExpressionTest = src => {\n  const replaceFn = (_, p1, p2) => `${p1}__import__${p2}`;\n  return stringReplace(src, importPattern, replaceFn);\n};\n\n// /////////////////////////////////////////////////////////////////////////////\n\nconst someDirectEvalPattern = new FERAL_REG_EXP(\n  '(^|[^.])\\\\beval(\\\\s*\\\\()',\n  'g',\n);\n\n/**\n * Heuristically reject some text that seems to contain a direct eval\n * expression, with both false positives and false negavives. To reject without\n * parsing, `rejectSomeDirectEvalExpressions` may will also reject some other\n * text as well. It may also accept source text that contains a direct eval\n * written oddly, such as `(eval)(src)`. This false negative is not a security\n * vulnerability. Rather it is a compat hazard because it will execute as\n * an indirect eval under the SES-shim but as a direct eval on platforms that\n * support SES directly (like XS).\n *\n * The shim cannot correctly emulate a direct eval as explained at\n * https://github.com/Agoric/realms-shim/issues/12\n * If we did not reject direct eval syntax, we would\n * accidentally evaluate these with an emulation of indirect eval. To\n * prevent future compatibility problems, in shifting from use of the\n * shim to genuine platform support for the proposal, we should\n * instead statically reject code that seems to contain a direct eval\n * expression.\n *\n * As with the dynamic import expression, to avoid a full parse, we do\n * this approximately with a regexp, that will also reject strings\n * that appear safely in comments or strings. Unlike dynamic import,\n * if we miss some, this only creates future compat problems, not\n * security problems. Thus, we are only trying to catch innocent\n * occurrences, not malicious one. In particular, `(eval)(...)` is\n * direct eval syntax that would not be caught by the following regexp.\n *\n * Exported for unit tests.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const rejectSomeDirectEvalExpressions = src => {\n  const lineNumber = getLineNumber(src, someDirectEvalPattern);\n  if (lineNumber < 0) {\n    return src;\n  }\n  const name = getSourceURL(src);\n  // See https://github.com/endojs/endo/blob/master/packages/ses/error-codes/SES_EVAL_REJECTED.md\n  throw SyntaxError(\n    `Possible direct eval expression rejected at ${name}:${lineNumber}. (SES_EVAL_REJECTED)`,\n  );\n};\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * A transform that bundles together the transforms that must unconditionally\n * happen last in order to ensure safe evaluation without parsing.\n *\n * @param {string} source\n * @returns {string}\n */\nexport const mandatoryTransforms = source => {\n  source = rejectHtmlComments(source);\n  source = rejectImportExpressions(source);\n  return source;\n};\n\n/**\n * Starting with `source`, apply each transform to the result of the\n * previous one, returning the result of the last transformation.\n *\n * @param {string} source\n * @param {((str: string) => string)[]} transforms\n * @returns {string}\n */\nexport const applyTransforms = (source, transforms) => {\n  for (const transform of transforms) {\n    source = transform(source);\n  }\n  return source;\n};\n\n// export all as a frozen object\nexport const transforms = freeze({\n  rejectHtmlComments: freeze(rejectHtmlComments),\n  evadeHtmlCommentTest: freeze(evadeHtmlCommentTest),\n  rejectImportExpressions: freeze(rejectImportExpressions),\n  evadeImportExpressionTest: freeze(evadeImportExpressionTest),\n  rejectSomeDirectEvalExpressions: freeze(rejectSomeDirectEvalExpressions),\n  mandatoryTransforms: freeze(mandatoryTransforms),\n  applyTransforms: freeze(applyTransforms),\n});\n", "import test from 'ava';\nimport {\n  rejectImportExpressions,\n  rejectHtmlComments,\n  rejectSomeDirectEvalExpressions,\n} from '../src/transforms.js';\n\ntest('no-import-expression regexp', t => {\n  t.plan(9);\n\n  // Note: we cannot define these as regular functions (and then stringify)\n  // because the 'esm' module loader that we use for running the tests (i.e.\n  // 'tape -r esm ./shim/test/**/*.js') sees the 'import' statements and\n  // rewrites them.\n\n  // Mentioning import() in a comment *should* be safe, but requires a full\n  // parser to check, and a cheap regexp test will conservatively reject it.\n  // So we don't assert that behavior one way or the other\n\n  const safe = 'const a = 1';\n  const safe2 = \"const a = notimport('evil')\";\n  const safe3 = \"const a = importnot('evil')\";\n\n  const obvious = \"const a = import('evil')\";\n  const whitespace = \"const a = import ('evil')\";\n  const comment = \"const a = import/*hah*/('evil')\";\n  const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n  const newline = \"const a = import\\n('evil')\";\n  const multiline = \"\\nimport('a')\\nimport('b')\";\n\n  t.is(rejectImportExpressions(safe), safe, 'safe');\n  t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n  t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n  t.throws(\n    () => rejectImportExpressions(obvious),\n    { instanceOf: SyntaxError },\n    'obvious',\n  );\n  t.throws(\n    () => rejectImportExpressions(whitespace),\n    { instanceOf: SyntaxError },\n    'whitespace',\n  );\n  t.throws(\n    () => rejectImportExpressions(comment),\n    { instanceOf: SyntaxError },\n    'comment',\n  );\n  t.throws(\n    () => rejectImportExpressions(doubleSlashComment),\n    { instanceOf: SyntaxError },\n    'doubleSlashComment',\n  );\n  t.throws(\n    () => rejectImportExpressions(newline),\n    { instanceOf: SyntaxError },\n    'newline',\n  );\n  t.throws(\n    () => rejectImportExpressions(multiline),\n    { instanceOf: SyntaxError },\n    'possible import expression rejected around line 2',\n    'multiline',\n  );\n});\n\ntest('no-html-comment-expression regexp', t => {\n  t.plan(6);\n\n  const htmlOpenComment1 = \"const a = foo <!-- hah\\n('evil')\";\n  const htmlCloseComment1 = \"const a = foo --> hah\\n('evil')\";\n  const htmlOpenComment2 = \"const a = eval <!-- hah\\n('evil')\";\n  const htmlCloseComment2 = \"const a = eval --> hah\\n('evil')\";\n  const htmlOpenComment3 = \"const a = import <!-- hah\\n('evil')\";\n  const htmlCloseComment3 = \"const a = import --> hah\\n('evil')\";\n\n  t.throws(\n    () => rejectHtmlComments(htmlOpenComment1),\n    { instanceOf: SyntaxError },\n    'htmlOpenComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlCloseComment1),\n    { instanceOf: SyntaxError },\n    'htmlCloseComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlOpenComment2),\n    { instanceOf: SyntaxError },\n    'htmlOpenComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlCloseComment2),\n    { instanceOf: SyntaxError },\n    'htmlCloseComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlOpenComment3),\n    { instanceOf: SyntaxError },\n    'htmlOpenComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlCloseComment3),\n    { instanceOf: SyntaxError },\n    'htmlCloseComment',\n  );\n});\n\ntest('no-eval-expression regexp', t => {\n  t.plan(10);\n\n  const safe = 'const a = 1';\n  const safe2 = \"const a = noteval('evil')\";\n  const safe3 = \"const a = evalnot('evil')\";\n\n  // \"bogus\" is actually direct eval syntax which ideally we could\n  // reject. However, it escapes our regexp, which we allow because\n  // accepting it is a future compat issue, not a security issue.\n  const bogus = \"const a = (eval)('evil')\";\n\n  const obvious = \"const a = eval('evil')\";\n  const whitespace = \"const a = eval ('evil')\";\n  const comment = \"const a = eval/*hah*/('evil')\";\n  const doubleSlashComment = \"const a = eval // hah\\n('evil')\";\n  const newline = \"const a = eval\\n('evil')\";\n  const multiline = \"\\neval('a')\\neval('b')\";\n\n  t.is(rejectSomeDirectEvalExpressions(safe), safe, 'safe');\n  t.is(rejectSomeDirectEvalExpressions(safe2), safe2, 'safe2');\n  t.is(rejectSomeDirectEvalExpressions(safe3), safe3, 'safe3');\n\n  t.is(rejectSomeDirectEvalExpressions(bogus), bogus, 'bogus');\n\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(obvious),\n    { instanceOf: SyntaxError },\n    'obvious',\n  );\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(whitespace),\n    { instanceOf: SyntaxError },\n    'whitespace',\n  );\n  t.notThrows(() => rejectSomeDirectEvalExpressions(comment), 'comment');\n  t.notThrows(\n    () => rejectSomeDirectEvalExpressions(doubleSlashComment),\n    'doubleSlashComment',\n  );\n  // t.throws(\n  //   () => rejectSomeDirectEvalExpressions(htmlOpenComment),\n  //   { instanceOf: SyntaxError },\n  //   'htmlOpenComment'\n  // );\n  // t.throws(\n  //   () => rejectSomeDirectEvalExpressions(htmlCloseComment),\n  //   { instanceOf: SyntaxError },\n  //   'htmlCloseComment'\n  // );\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(newline),\n    { instanceOf: SyntaxError },\n    'newline',\n  );\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(multiline),\n    { instanceOf: SyntaxError },\n    'possible direct eval expression rejected around line 2',\n    'multiline',\n  );\n\n  // mentioning eval() in a comment *should* be safe, but requires a full\n  // parser to check, and a cheap regexp test will conservatively reject it.\n  // So we don't assert that behavior one way or the other\n});\n"], "fixing_code": ["User-visible changes in SES:\n\n# Next\n\n- Censors the pattern `{...import(specifier)`}.\n  We previously censored `import(specifier)` and expressly allowed\n  `object.import(specifier)`.\n  The relaxation for the latter form in version 0.13.0 inadvertently allowed\n  import with the spread operator.\n\n# v0.18.5 (2023-07-14)\n\n- Adds `assert.bare` for embedding unquoted strings in details.\n- Permits new `dispose` symbols, other recent additions to JavaScript, and for\n  the anticipated iterator helpers.\n- Tames `Symbol` so symbols can be preserved in the start compartment and\n  denied to shared compartments.\n- Improves debugging in Safari.\n- Adds missing native function markers.\n  All native functions should have a `toString` that says `[native code]`, even\n  if emulated.\n\n# v0.18.4 (2023-04-20)\n\n- Pass through the start compartment's `globalThis.harden` if defined.\n\n# v0.18.3 (2023-04-14)\n\n- New `__hardenTaming__: 'unsafe'` lockdown option to fake harden unsafely,\n  which can be used to improve performance for applications that are known to be\n  safe even with a no-op `harden`.\n- Finite deep stacks, using LRU budgets for depth of stacks an well as the\n  maximum number of weakly-held errors to annotate.\n- Add `%AsyncGenerator%.length` and `%AsyncFunctionPrototype%.length` `number`\n  properties to allowlist.\n\n# v0.18.2 (2023-03-07)\n\n- Introduces the `__syncModuleFunctor__` property of static module record\n  to replace evauluation of `__syncModuleProgram__` for environments without eval.\n\n# v0.18.1 (2022-12-23)\n\n- Fixes a bug for SES initialization in a no-unsafe-eval\n  Content-Security-Policy.\n- Fixes a bug where reexport of multiple named exports of the same name was\n  causing them to be overridden by the last value. Now named exports are \n  handled in the same manner as `export *`.\n- Allows Compatment `importHook` implementations to return aliases: module\n  descriptors that refer to a module by its specifier in the same or a\n  specified compartment, without providing a static module record (module\n  source).\n\n# v0.18.0 (2022-11-14)\n\n- *BREAKING*: Removes support for `globalLexicals`.\n  To our knowledge, there are no production uses for `globalLexicals`.\n  They currently could leak because `moduleLexicals` and `globalLexicals`\n  used the same scope object, so properties of one would leak to the other\n  with crafted modules.\n  We had an opportunity to plug the leak at the cost of a fifth scope\n  in all evaluators, but elected to remove the unnecessary complexity instead.\n\n# v0.17.0 (2022-10-24)\n\n- Previous versions of SES would leak the proxy used to isolate evaluated\n  code to functions added to the global object by guest code.\n  The value of `this` in such functions should be `undefined`, but that is not\n  possible to emulate in this shim.\n  This version changes the value of `this` in such functions to be the same as\n  `globalThis` of the compartment, as would be correct in sloppy mode.\n- Removes experimental support for \"known scope proxies\".\n\n# v0.16.0 (2022-10-19)\n\n- When hardening a typed array, detects and locks down properties named as\n  number-coercible strings that are not index properties.\n\n# v0.15.23 (2022-09-27)\n\n- Fixes the unhandled promise rejection logic to report unhandled rejections\n  when the promise is collected. Because of a bug it previously only reported\n  at process exit.\n- Improves the fidelity of emulation for V8 `Error.prepareStackTrace`,\n  allowing more legacy code to work by default in isolation.\n\n# v0.15.18 (2022-08-23)\n\n- Removes the `__allowUnsafeMonkeyPatching__` option to lockdown. As the name\n  should indicate, this was always an unsafe temporary kludge. Its only known\n  use was in agoric-sdk, now gone at\n  https://github.com/Agoric/agoric-sdk/pull/5922 . Without this option, a\n  successful `lockdown` will now always harden the primordials.\n\n# v0.15.8 (2022-02-18)\n\n- Harden now gives special treatment to typed arrays.\n  Instead of freezing a typed array, harden will seal it and make all of its\n  non-integer properties non-writable.\n  All of their integer properties will remain writable and non-configurable.\n  TypedArrays are exceedingly unusual because their integer properties are\n  writable and neither freeze nor defineProperty can convert them from writable\n  to non-writable.\n\n# v0.15.3 (2022-01-21)\n\n- Fixes the type definition for assert.error so that the final options bag,\n  which may include `errorName`, checks correctly in TypeScript.\n- Lockdown will now throw an error if code running before SES initialization\n  replaced `eval`.\n\n# 0.15.2 (2021-12-08)\n\n- The `Removing...` messages that Lockdown emits when encountering unrecognized\n  properties on shared intrinsics are now logged as \"warnings\".\n  This has the material benefit of sending these messages to STDERR on Node.js.\n- Updates permits for all current TC39 stage 3 and 4 proposals, notably\n  suppressing the `Removing...` messages for `Object.hasOwn`; `findLast` and\n  `findLastIndex` on both `Array.prototype` and `TypedArray.prototype`; and the\n  properties `transfer`, `resize`, `resizable`, and `maxByteLength` of\n  `ArrayBuffer.prototype`.\n\n# 0.15.1 (2021-11-15)\n\n- The TypeScript definition of `lockdown` now allows for the option\n  `\"errorTrapping\": \"none\"`.\n- Fixes error trapping on the web, showing both the message (and stack) of any\n  error that throws out of the top of an event.\n\n# 0.15.0 (2021-11-02)\n\n- _BREAKING CHANGE_: The lockdown option `domainTaming` is now `safe` by\n  default, which will break any application that depends transtively on the\n  Node.js `domain` module.\n  Notably, [standard-things/esm](https://github.com/standard-things/esm)\n  uses domains and so SES will not support `node -r esm` going forward.\n\n  This protects against the unhardened `domain` property appearing on shared\n  objects like callbacks and promises.\n  This overcomes the last _known_ obstacle toward object capability containment.\n\n- Lockdown will now read options from the environment as defined by the Node.js\n  `process.env` parameter space.\n- _BREAKING CHANGE_: Lockdown may no longer be called more than once.\n  Lockdown no longer returns a boolean to indicate whether it was effective\n  (true) or redundant (false). Instead, Lockdown will return undefined for\n  its first invocation or throw an error otherwise.\n\n# 0.14.4 (2021-10-14)\n\n- Fixes a defect in the per-compartment `Function` and `eval` functions, such\n  that these environments did not have the compartment's `globalLexicals`.\n  There is no known environment depending on this invariant for security\n  reasons, but such a scenario would be a program arranging a translator that\n  introduces run-time security checks, like metering, that depend on the\n  existence of a named global lexical.\n  [#898](https://github.com/endojs/endo/issues/898)\n- The above fix incidentally improved the performance of compartment evaluation\n  for cases that do not require special global lexicals, by sharing a single\n  per-compartment evaluator.\n\n# 0.14.3 (2021-09-18)\n\n- Due to a peculiar bit of error handling code in Node 14, as explained at\n  [Hardened JavaScript interferes with Node.js 14 Error\n  construction](https://github.com/endojs/endo/issues/868),\n  we have added more overrides to the default `overrideTaming: 'moderate'`\n  setting. At this setting, assigning to the `name` property of a mutable error\n  instance should work. It will continue not to work at the `'min'` setting, so\n  use the default `'moderate'` setting if you need to.\n- Adds a lockdown option `domainTaming` to detect whether Node.js domains have\n  been initialized and prevents them from being initialized afterward.\n  Domains otherwise presented a hazard to the integrity of SES containment on\n  Node.js.\n  The option defaults to `\"unsafe\"` in this version and will be switched to\n  `\"safe\"` by default in the next release that allows for breaking-changes, to\n  afford a gradual migration.\n  Thank you to @dominictarr with [Least Authority](https://leastauthority.com/)\n  for devising this feature.\n- Fixes reflexive module imports. Previously, SES would fail to initialize a\n  module graph where a module imported an alias to itself.\n\n# 0.14.1 (2021-08-12)\n\n- Adds permits for `Array.prototype.at` and `String.prototype.at` which are\n  Stage 3 proposals for ECMA 262.\n\n# 0.14.0 (2021-07-22)\n\n- _BREAKING_: Any precompiled static module records from prior versions\n  will not load in this version of SES or beyond. The format of the preamble\n  has been changed to admit the possibility of a variable named `Map` declared\n  in the scope of a module.\n- Fixes the type assertions for `assert` and `assert.string`.\n- Reveals `harden` only after `lockdown`. Harden was never usable before\n  lockdown because it would render the environment irreparable.\n  Calling `harden` before `lockdown` previously threw an exception.\n  Now it is possible to write libraries that are usable both in JS and SES,\n  which can know whether to harden their API by the presence of harden in\n  global scope.\n- Adds `errorTrapping` lockdown option and by default traps uncaught exceptions\n  and logs them back with their original stack traces.\n  These would previously appear as mysterios `{}` lines in Node.js.\n\n# 0.13.4 (2021-06-19)\n\n- Adds more TypeScript definitions, importable with `/// <reference types=\"ses\"/>`, covering `harden`, `lockdown`, `assert`, and `Compartment`,\n  and many types importable with `import('ses')` notation.\n- Adds descriptive detail to module system link error messages and fixes the\n  reported exports for one.\n\n# 0.13.1 (2021-06-05)\n\n- Fixes type exports for `harden`.\n- Packaging fixes.\n\n# 0.13.0 (2021-06-01)\n\n- _BREAKING CHANGE_ The `ses/lockdown` module is again just `ses`.\n  Instead of having a light 43KB `ses/lockdown` and a heavy 3.1MB `ses`, there\n  is just a 52KB `ses` that has everything except `StaticModuleRecord`.\n  For this release, there remains a `ses/lockdown` alias to `ses`.\n- _BREAKING CHANGE_ Third-party static module interface implementations _must_\n  now explicitly list their exported names.\n  For CommonJS, this implies using a heuristic static analysis of `exports`\n  changes.\n  Consequently, third-party modules can now participate in linkage with ESM\n  including support for `export * from './spec.cjs'` and also named imports\n  like `import * from './spec.cjs'`.\n- _BREAKING CHANGE_ The `StaticModuleRecord` constructor has been removed in\n  favor of a duck-type for compiled static module records that is intrinsic to\n  the shim and may be emulated by a third-party `StaticModuleRecord`\n  constructor.\n  The constructor must perform the module analysis and transform the source,\n  and present this duck-type to the Compartment `importHook`.\n  This relieves SES of a dependency on Babel and simplifies its API.\n- _BREAKING CHANGE_ The UMD distribution of SES must have the UTF-8 charset.\n  The prior versions were accidentally ASCII, so SES would have worked\n  in any web page, regardless of the charset.\n  To remedy this, be sure to include `<head><meta charset=\"utf-8\"></head>` in\n  the containing page (a general best-practice for web pages) or specifically\n  use `<script charset=\"utf-8\" src=\"ses.umd.min.js\">` to address the single\n  file.\n- Relaxes the censorship of `import` and `eval` in programs evaluated\n  under SES to specifically allow the use of `something.import()` or\n  `something.eval()` methods.\n- Fix: `new Compartment(null, null, options)` no longer throws.\n- New lockdown option: `overrideDebug: [...props]` to detect where a property\n  assignment needs to be turned into a `defineProperty` to avoid the override\n  mistake. Most useful as `overrideTaming: 'severe', overrideDebug: ['constructor']`.\n- We reopened Safari bug\n  [Object.defineProperties triggering a setter](https://bugs.webkit.org/show_bug.cgi?id=222538#c17)\n  when we found that it was causing an infinite recursion initializing SES\n  on Safari.\n- We revised an error message to include the error tag of a new error\n  explanation page:\n  [SES_DEFINE_PROPERTY_FAILED_SILENTLY](error-codes/SES_DEFINE_PROPERTY_FAILED_SILENTLY.md).\n  We hope to add such explanations for more errors over time. Please let us\n  know as you encounter errors that strongly needs explaining.\n\n# 0.12.7 (2021-05-05)\n\n- Added to `assert.error` an optional options bag with an option named\n  `errorName`. The `assert.error` function makes error objects with detailed\n  error messages whose unredacted contents appear only in `console` output\n  and are otherwise unobservable. If `errorName` is provided, then\n  it is also used in the console output instead of the normal error name,\n  but is otherwise unobservable. This will rarely be used, but will be\n  used by the `@agoric/marshal` package to name an unserialized error\n  so that it can be traced back to the site that serialized it; and\n  ultimately to its origin.\n\n# 0.12.6 (2021-03-27)\n\n- Added a new temporary `__allowUnsafeMonkeyPatching__` option to `lockdown`.\n\n  Sometimes SES is used where SES's safety is not required. Some libraries\n  are not compatible with SES because they monkey patch the shared primordials\n  is ways SES cannot allow. We temporarily introduce this option to enable\n  some of these libraries to work in, approximately, a SES environment\n  whose safety was sacrificed in order to allow this monkey patching to\n  succeed. More at the\n  [\\_\\_allowUnsafeMonkeyPatching\\_\\_ Options](./lockdown-options.md#__allowUnsafeMonkeyPatching__-options)\n  section of [lockdown-options](./lockdown-options.md).\n\n# 0.12.5 (2021-03-25)\n\n- The 0.12.4 release was broken by https://github.com/endojs/endo/pull/552\n  since fixed by https://github.com/endojs/endo/pull/638\n- These merely remove a repair needed by an old v8 / Node version that\n  no one any longer supports.\n\n# 0.12.4 (2021-03-24)\n\n- Expand TypeScript definitions to include Compartment, StaticModuleRecord,\n  StaticModuleType, RedirectStaticModuleInterface, FinalStaticModuleType,\n  ThirdPartyStaticModuleInterface, Transform, ImportHook, and ModuleMapHook.\n- The previous took `Object.prototype.constructor` off of the default\n  [list of properties](src/enablements.js) we enable to be overridden by\n  assignment. This default is the `{overrideTaming: 'moderate'}` setting.\n  In this release, we stop enabling `'hasOwnProperty'` by default as\n  well. With both of these gone, we now have a reasonable debugging\n  experience.\n- Unfortunately, both rollup and webpack seem to turn exported names\n  into assignments to an `exports` object that inherits from\n  `Object.prototype`, thereby potentially stepping on any name.\n  To deal with this perverse case, the release also provides an\n  `{overrideTaming: 'severe'}` option which enables all properties on\n  at least `Object.prototype`. This is more compatible but makes the\n  vscode debugger's inspector unusable. At\n  [Tracking issue for getting 3rd party packages more SES friendly (#576)](https://github.com/endojs/endo/issues/576)\n  we track the incompatibilities we encounter and progress toward\n  getting them fixed.\n- Add utility function `Compartment.prototype.__isKnownScopeProxy__(value)` to\n  aid working around scopeProxy leakage. Returns true if `value` is one of the\n  scopeProxies created during calls to this Compartment instances's\n  `Compartment.prototype.evaluate`. See `test-compartment-known-scope-proxy.js`\n  for an example of performing a scopeProxy leak workaround.\n- Under the default `{errorTaming: 'safe'}` setting, the SES shim already redacts stack traces from error instances when it can (currently: v8, spiderMonkey, XS). The setting `{errorTaming: 'unsafe'}` suppresses that redaction, instead blabbing these stack traces on error instances via the expected `errorInstance.stack`.\n\n  The purpose of the `details` template literal tag (often spelled `X` or `d`) together with the `quote` function (often spelled `q`) is to redact data from the error messages carried by error instances. With this release, the same `{errorTaming: 'unsafe'}` would suppress that redaction as well, so that all substitution values would act like they've been quoted. IOW, with this setting\n\n  ```js\n  assert(false, X`literal part ${secretData} with ${q(publicData)}.`);\n  ```\n\n  acts like\n\n  ```js\n  assert(false, X`literal part ${q(secretData)} with ${q(publicData)}.`);\n  ```\n\n  Note that the information rendered by the SES shim `console` object always includes all the unredacted data independent of the setting of `errorTaming`.\n\n# 0.12.3 (2021-03-01)\n\n- The `assert.js` module in the `ses` package of this repository exports\n  a `makeAssert` function, to make other `assert` functions with a different\n  failure scope. Inadvertantly, this did not enable the `@agoric/assert`\n  package (currently defined in the agoric-sdk repository) to reexport\n  the same `makeAssert` function as originally intended, and now\n  [needed](https://github.com/Agoric/agoric-sdk/pull/2515).\n  As of this release the `assert` object exported by the `assert.js` module\n  now carries this function as a `makeAssert` property.\n- The `assert.quote` function re-exported by `@agoric/assert` as `q`\n  has always done only a best effort stringify, intended only to\n  be interpreted by a human under benign conditions. Within that constraint\n  its best effort is now better, providing informative though ambiguous\n  renderings of values problematic for `JSON.stringify`, still including\n  cycles, but now also functions, promises, `undefined`, `NaN`, `Infinity`,\n  bigints, and symbols. To distinguish this from\n  strings in the input, these synthesized strings always begin and\n  end with square brackets. To distinguish those strings from an\n  input string with square brackets, an input string that starts\n  with an open square bracket `[` is itself placed in square brackets.\n- The `q` function now has an optional second `spaces` parameter which is\n  passed through to the underlying `JSON.stringfiy`. Passing in a space or\n  two spaces makes the output much more readable using indentation and other\n  whitespace, but takes multiple lines.\n- The SES enhanced `console` had previously only produced meaningful stack\n  traces on v8-based browsers such as Brave, Chromium, or Chrome. It now\n  works on Firefox and Safari as well. It should work on all major browsers\n  but have not yet been tested on others.\n- On all platforms `Error.stackTrace` is now an assignable accessor property.\n  On v8-based platforms, for the `Error` constructor in the start compartment,\n  it has the same effect that it does outside SES. Outside the start\n  compartment, or outside v8-based platforms, the assignment succeeds silently\n  with no effect.\n  This accommodates a de facto standard idiom encouraged by Google.\n- The \"SES Demo Console\" and \"SES Challenge\" have been fixed to work with\n  modern SES. Both now run in browsers, though these are not yet hosted\n  for visiting as an external web page.\n- We no longer enable overriding `Object.prototype.constructor` by assigning\n  to the `constructor` property of a derived object. We were enabling it\n  due to a bug in acorn 7, since fixed in acorn 8. To enable it, we were\n  making `Object.prototype.constructor` into an accessor property, which\n  confused the Node debugger, causing annoying extra noise in the console\n  output. Now that we've worked around our acorn problem (currently with\n  a patch) we have stopped enabling this assignment, and so stopped\n  confusing the Node debugger.\n\n# 0.12.2 (2021-02-05)\n\n- fix non-standard regex range syntax that throws on XS (3877d72)\n- refine concise stack traces (cbbabeb)\n\n# 0.12.1 (2021-02-02)\n\n- Consolidated documentation of [`lockdown` options](./lockdown-options.md) into its\n  own page.\n- Added a `stackFiltering` option to `lockdown` with\n  two settings, `'concise'` and `'verbose'`. Stack traces are now filtered\n  `'concise'` by default, making them typically much easier to work with.\n  `'verbose'` shows complete stack traces, as sometimes it contains clues\n  needed to find your bug.\n  See [`stackFiltering` options](./lockdown-options.md#stackfiltering-options)\n  for an explanation.\n- Changed the meaning of the default `'moderate'` setting of the\n  `overrideTaming` options of `lockdown`. See\n  [`overrideTaming` options](./lockdown-options.md#overridetaming-options)\n  for an explanation of when to use which.\n\n:warning: This change of meaning of the `'moderate'` setting of the\n`overrideTaming` option of `lockdown` is not strictly compatible with its\nold meaning. The old `'moderate`' setting would enable all properties on a few\nwidely used prototype objects, including `Object.prototype`. Resulting in a\nmiserable debugging experience when using the VSCode debugger's object\ninspector.\n\n<details>\n  <summary>Expand to see the vscode inspector display if enabling all of Object.prototype</summary>\n\n![vscode inspector display if enabling all of Object.prototype](docs/images/override-taming-star-inspector.png)\n\n</details>\n\nThe new `'moderate'` setting only tames those properties we know or expect to\nbe problematic. If you run into an override mistake problem not addressed at\nthe `'moderate'` setting **_please file an issue._**\n\n<details>\n  <summary>Expand for { overrideTaming: 'moderate' } vscode inspector display</summary>\n\n![overrideTaming: 'moderate' vscode inspector display](docs/images/override-taming-moderate-inspector.png)\n\n</details>\n\nFor an even better debugging experience, try the `'min'` setting, which\nmakes the debugging experience even less noisy, but may not be compatible with\nall the code you're running under SES.\n\n<details>\n  <summary>Expand for { overrideTaming: 'min' } vscode inspector display</summary>\n\n![overrideTaming: 'min' vscode inspector display](docs/images/override-taming-min-inspector.png)\n\n</details>\n\n# 0.11.1 (2021-01-21)\n\n- Upgrades `harden` such that that it transitively freezes an object's\n  prototype chain, eliminating the notion of a \"fringe set\" and errors\n  that were previously thrown if an object's prototype was not already\n  in the fringe.\n- Added an `overrideTaming` option to `lockdown` with two settings,\n  `'min'` and `'moderate'`. See\n  [Enabling Override by Assignment](README.md#enabling-override-by-assignment)\n  for an explanation of when to use which. **_(This documentation has moved\n  to [`overrideTaming`\n  options](./lockdown-options.md#overridetaming-options))_**\n- Modules and evaluated code that contains the censored substrings\n  for dynamic eval, dynamic import, and HTML comments will now\n  throw errors that contain the `sourceURL` from any `//#sourceURL=` comment\n  toward the end of the source or merely `<unknown>`.\n\n# 0.11.0 (2020-11-03)\n\n- `lockdown()` adds new global `assert` and tames the global `console`. The\n  error taming hides error stacks, accumulating them in side tables. The\n  `assert` system generated other diagnostic information hidden in side\n  tables. The tamed console uses these side tables to output more informative\n  diagnostics. [Logging Errors](./src/error/README.md) explains the design.\n- Adds a non-standardizable `__shimTransforms__` option to the\n  Compartment constructor that allows a single transform to work\n  for both programs passed to `evaluate` and modules that the SES shim\n  compiles to programs.\n\n# 0.10.4 (2020-09-28)\n\n- When converting each of [these data properties](src/enablements.js) to\n  accessor properties, to suppress the\n  [override mistake](https://github.com/tc39/ecma262/pull/1320), we now\n  add to that accessor's getter an `originalValue` property to mark it\n  as alleging that it is emulating a data property whose original value\n  was that value.\n- Fixes an exception thrown when calling `lockdown` after just importing\n  `ses/lockdown` in all environments.\n\n# 0.10.3 (2020-09-08)\n\n- The `ses/lockdown` module and Rollup bundles now include a minimal\n  implementation of `Compartment` that supports `evaluate` but not loading\n  modules.\n  This is sufficient for containment of JavaScript programs, including\n  modules that have been pre-compiled to programs out-of-band, without\n  entraining a full JavaScript parser framework.\n- Allows a compartment's `importHook` to return an \"alias\" if the returned\n  static module record has a different specifier than requested.\n- Adds the `name` option to the `Compartment` constructor and `name` accessor\n  to the `Compartment` prototype.\n  Errors that propagate through the module loader will be rethrown anew with\n  the name of the module and compartment so they can be traced.\n  At this time, the intermediate stacks of the causal chain are lost.\n  https://github.com/Agoric/SES-shim/issues/440\n\n# 0.10.2 (2020-08-20)\n\n- Adds a `moduleMapHook` option to the `Compartment` constructor options.\n  The module map hook can return values for the `moduleMap` for\n  any given module specifier, or return `undefined` to fall back to the\n  `importHook`.\n  This allows for wildcard linkage to other compartments.\n- Fix dependency version for `@agoric/transform-module`.\n\n# 0.10.1 (2020-08-13)\n\n- Updates the whitelist to allow a `HandledPromise` global, which is provided\n  by `@agoric/eventual-send`, an early implementation of\n  https://github.com/tc39/proposal-eventual-send.\n- Corrects our fix for the override mistake, so that it correctly emulates\n  how assignment would work in the absence of the override mistake.\n  A property created by assignment will now be a writable, enumerable,\n  configurable data property, as it is for normal assignment.\n\n# 0.10.0 (2020-08-08)\n\n- Creates a `ses/lockdown` module that only introduces `lockdown` and `harden`\n  to global scope, for a much smaller payload than `ses`, which entrains a\n  JavaScript parser to support ECMAScript modules.\n- Adds the `load` method to `Compartment`.\n  Load allows a bundler or archiver to use the `Compartment` API to gather the\n  transitive dependencies of modules without executing them.\n- Adds support for third-party implementations of a `StaticModuleRecord`\n  interface (`{imports, execute}`).\n\n# 0.9.1 (2020-07-16)\n\n- The `*Locale*` methods removed in the previous release are now restored\n  by aliasing them to their non-locale equivalents. `localeCompare` had no builtin\n  non-locale equivalent, so we provide one.\n- Adds a TypeScript definition for `harden`.\n\n# 0.9.0 (2020-07-13)\n\n- BREAKING CHANGE: The compartment `evaluate` method no longer accepts an\n  `endowments` option.\n  Use `compartment.globalThis`, `endowments`, or `globalLexicals`.\n  If per-evaluation `globalLexicals` or `endowments` are necessary,\n  each evaluation will need a fresh `Compartment`.\n- BREAKING CHANGE: The `lockdown` function's deprecated `noTame*` options have\n  been removed in favor of the `*Taming` options introduced in version 0.8.0.\n- BREAKING CHANGE: The `.toLocale*` methods of\n  Object/Number/BigInt/Date/String/Array/%TypedArray% were removed from SES\n  environments. This includes methods named `toLocaleString`,\n  `toLocaleDateString`, `toLocaleTimeString`, `toLocaleLowerCase`,\n  `toLocaleUpperCase`, and `localeCompare`. These may be restored (in a\n  modified form) in a future release.\n- The way `lockdown()` tames the `Error` constructor now cooperates\n  with the V8 stack trace API to a degree that is permissible without\n  breaking the integrity of applications that use it.\n- The Compartment constructor now accepts a `globalLexicals` option.\n  The own enumerable properties of the global lexicals are captured\n  and presented as constants in the scope of all calls to `evaluate` and all\n  modules.\n  The global lexicals overshadow the global object.\n\n# 0.8.0 (2020-05-26)\n\n- Adds support for modules to Compartments.\n- SES no longer exports anything.\n  `Compartment`, `StaticModuleRecord`, `lockdown`, and `harden` are all\n  introduced as properties of `globalThis`.\n- The `Compartment` `global` getter is now named `globalThis`, consistent with\n  the specification proposal.\n- The `Compartment` `transforms` constructor option is now just an array of\n  transform functions that accept and return program strings.\n  Transforms can no longer introduce `endowments`.\n  The compartment constructor's `endowments` argument (first) and assigning\n  properties to `globalThis` are the remaining supported ways to introduce\n  endowments.\n- Repair `Function.apply` and `TypeError.message` (as well as `.message` on\n  all the other Error types), to tolerate what the npm `es-abstract` module\n  does. This allows `tape` (version 4.x) to be loaded in a locked-down SES\n  world, and also allows its `t.throws` assertion to work. `tape` (version\n  5.x) still has problems. [#293]\n\n- Replaces the old `noTame*` options to `lockdown` with new `*Taming` options.\n  The old style had boolean values defaulting to `false`. In the new style,\n  each option supports at least the options `'safe'` and `'unsafe'` defaulting\n  to `'safe'`. As a transitional matter, this release still supports the\n  old style as well, as another way to say the same thing. [#326]\n\n  [#293]: https://github.com/Agoric/SES-shim/issues/293\n  [#326]: https://github.com/Agoric/SES-shim/issues/326\n\n# 0.7.7 (2020-04-27)\n\n- This version decouples lockdown and the Compartment constructor.\n  The Compartment constructor is now exported by `ses` (was previously only\n  available as a property of `globalThis` _after_ lockdown).\n  The Compartment constructor will also create \"privileged\" compartments when\n  constructed before lockdown.\n\n# 0.7.6 (2020-03-31)\n\nBug fixes.\nThis release fixes issues in RegExp and Error taming.\n\n# 0.7.4-5 (2020-03-21)\n\nThis release adds Node.js ESM support by upgrading @agoric/make-hardener to a\nhybrid version for most modern module systems.\n\n- Newless calls to the RegExp constructor now work after lockdown.\n\n- upgrade @agoric/make-hardener v0.0.8\n\n# 0.7.2-3 (2020-03-13)\n\nBug fixes.\nThis release addresses an exception observed where locking down fails because\nSES cannot delete the prototype of the harden function.\nThis is addressed by upgrading @agoric/make-harden to version 0.0.7.\nThis release also restores fulls upport for importing SES as CommonJS, Node.js\nESM, and Node.js emulated ESM with the `esm` package.\n\n# 0.7.1 (2020-13-10)\n\nSECURITY UPDATE: This complete re-architecture which removes the realm-shim and\nresolve the associatd sandbox escapes related to leaking cross-realm\nintrinsics. All users should update to this version.\n\nSee [docs/ses-0.7.md].\n\n# 0.6.4 (2019-10-16)\n\nSECURITY UPDATE: This release upgrades realms-shim to fix multiple sandbox\nescapes. All users should update to this version.\n\n- upgrade to realms-shim v1.2.1\n\nNon-security fixes:\n\n- improve documentation\n\n# 0.6.3 (2019-10-02)\n\nSECURITY UPDATE: This release upgrades realms-shim to fix multiple sandbox\nescapes. All users should update to this version.\n\n- upgrade to realms-shim v1.2.0\n\nNon-security fixes:\n\n- add `SES.harden` to make hardening available from within the Realm. (#161)\n\n# 0.6.2 (2019-09-25)\n\nNo user-visible changes.\n\nUse realms-shim as a normal package, not a git-submodule. Update eslint\ndependencies.\n\n# 0.6.1 (2019-19-14)\n\n- SECURITY UPDATE: This release fixes a sandbox escape discovered in the\n  realms-shim by GitHub user \"XmiliaH\", which works by causing an infinite\n  loop and extracting the real function constructor from the RangeError\n  exception object. See https://github.com/Agoric/realms-shim/issues/48 for\n  more details.\n\n# 0.6.0 (2019-09-03)\n\n- Breaking change: `options.transforms` may no longer specify `endow()`\n  transforms. Instead, use `rewrite()`, which can now modify endowments.\n  See https://github.com/Agoric/realms-shim/pull/38 for details.\n- Repair the \"override mistake\", with optional repair plan in\n  `options.dataPropertiesToRepair`. See src/bundle/dataPropertiesToRepair.js\n  and https://github.com/Agoric/SES/pull/146 for details.\n- `options.sloppyGlobals` is rejected by `makeSESRootRealm()`, since all SES\n  root realms are frozen. `sloppyGlobals` can only be used in a new\n  \"Compartment\", made by calling `Realm.makeCompartment(options)`. See\n  https://github.com/Agoric/SES/issues/142\n  https://github.com/Agoric/realms-shim/pull/33\n  https://github.com/Agoric/realms-shim/pull/30 for details.\n- Add `options.whitelist` to override the set of properties that are retained\n  in the new realm. The default gives you SES, but it could be overridden to\n  e.g. enforce a Jessie-only environment.\n\n# 0.5.3 (2019-07-24)\n\n- Re-enable indirect eval. (#131)\n\n# 0.5.2 (2019-07-13)\n\nDependency updates only, no user-visible changes.\n\n# 0.5.1 (2019-07-10)\n\n- The 'realms-shim' module, upon which SES depends, has been split out of the\n  TC39 'proposal-realms' repository, and now lives in\n  https://github.com/Agoric/realms-shim. It has not been released to NPM,\n  rather SES incorporates it as a git submodule. (#110)\n- The documentation is now hosted on ReadTheDocs at\n  https://ses-secure-ecmascript.readthedocs.io/en/latest/ (#111, #117)\n- SES.makeRootRealm() now accepts a 'transforms' option. This is a list of `{ endow, rewrite }` functions which can add/modify endowments and/or rewrite\n  source code each time an `evaluate()` is performed. (#125)\n\nThanks to Kate Sills, Dan Connolly, Michael Fig, and the ever-dependable\nDependabot for additional fixes in this release.\n\n# 0.5.0 (2019-04-05)\n\nINCOMPATIBLE API CHANGE: Starting with this release, the SES package exports\na single default object (named `SES`, from which you can get the\n`SES.makeSESRootRealm()` function). Previously, it exported both a `SES`\nobject and the `makeSESRootRealm` function.\n\nCode which uses this package as an ES6 module must change its import from\n`import { SES } from 'ses';` to:\n\n```js\nimport SES from 'ses';\n```\n\nSimilarly, for code which uses CommonJS-style, it must change from `const { SES } = require('ses')` to:\n\n```js\nconst SES = require('ses');\n```\n\nThe package now exports bundles in various flavors: CommonJS, ES6 Module, and\nbrowser-based UMD.\n\nOther changes:\n\n- whitelist Symbol.matchAll, to fix Chrome-v73 (Issue #90)\n- change primary export #88\n- improve documentation #66 #67\n- add integration tests #85\n- packaging: remove ses-shim.js, add other generated bundles\n- update Realms shim to commit 0c00eb, to fix Browserify #79\n- test against node v10/v11, switch from travis to circleci #73\n- fix examples #102\n\nThanks to Matt Bell, Kate Sills, and Mark Miller for additional fixes in this\nrelease.\n\n# 0.4.0 (2019-02-20)\n\nImprove usability.\n\n- remove `Nat` and `def` from the global environment #45\n- provide a helper function named `s.makeRequire()` to build a `require`\n  endowment. This can be configured to enable `require('@agoric/nat')` or\n  `require('@agoric/harden')` (among others), so the same code can work\n  either inside or outside of a SES realm. For details of its configuration,\n  see the comments in the commit which landed it. #13\n- harden() comes from `@agoric/make-hardener`, which doesn't climb\n  prototype/inheritance chains, but does complain if the prototype wasn't\n  already known to harden(). This avoids the \"Ice-9\" freeze-the-world\n  problem, and also serves to signal when an object from one realm is passed\n  into the harden() of a different realm. #15\n- harden() now shares a WeakSet of previously-hardened objects #4\n- use harden() instead of def() #39\n- SES no longer depends upon Nat, but uses it during unit tests. Client code\n  that wants Nat should use `require('@agoric/nat')`. #45\n- Include AsyncIteratorPrototype in the set of anonIntrinsics #58\n- use eslint to format all SES code\n\n# 0.3.0 (2019-02-08)\n\nImproves security and functionality.\n\nThis fixes all known confinement leaks:\n\n- We now freeze AsyncGeneratorFunction and AsyncFunction, the last of the\n  \"anonymous\" intrinsics (which are reachable by syntax but not simple\n  property lookup). In the previous release, attacker code could modify their\n  behavior (which defender code might have been relying upon) or use them as\n  a communication channel. (#3, #41)\n- We now remove all unknown properties from the global object, using a\n  special list of ones that are safe to expose. This protects us from\n  surprising platform-specific objects, or newly-added standard JS objects\n  that have not yet been examined for safety. The 'Intl' object is currently\n  removed by this check (and `intlMode: \"allow\"` has been removed), but may\n  be brought back in a future release. (#26)\n- RegExp.prototype.compile is removed unconditionally (even if regexpMode:\n  \"allow\" is set), because it violates the semantics of Object.freeze\n\nIt also improves usability:\n\n- Uncaught exceptions in Node.js are now rendered correctly when the\n  `errorStackMode: \"allow\"` option is enabled. In the previous release, such\n  exceptions were always displayed as \"undefined\", which was particularly\n  unhelpful. If your program is abruptly exiting with \"undefined\", try\n  turning this option on while you're debugging. But don't leave it on,\n  because it probably enables a confinement breach.\n- SES is an ES6 module, but should now be importable with `require()` by\n  other code which is unaware of ES6 modules, because it now uses the `esm`\n  module internally. (#32)\n- `console.log` is now available within the confined code, if the\n  `consoleMode: \"allow\"` option is enabled. If this is disabled,\n  `console.log()` will throw a `TypeError` (since `console` is undefined, it\n  has no `log` property). Many other `console` methods (but not all) are\n  exposed too. (#35)\n\nSES now requires Node.js version 10 or later.\n\n# 0.2.0 (2019-01-18)\n\nImproves confinement, small API changes.\n\nThe options passed as `SES.makeSESRootRealm(options)` have changed:\n\n- `options.dateNowMode=\"allow\"` allows `Date.now()` and `new Date()` to\n  work normally, otherwise they return NaN\n- `options.mathRandomMode=\"allow\"` allows `Math.random()` to work\n  normally (nondeterministically), else it will throw an Error\n- `options.intlMode=\"allow\"` lets `Intl.DateTimeFormat()`, `Intl.NumberFormat()`,\n  and `Intl.getCanonicalLocales()` to work normally, else they throw Errors\n- `options.errorStackMode=\"allow\"` exposes `Error.prototype.stack` and\n  `Error.captureStackTrace` (on platforms that support them), otherwise they\n  are suppressed. Note that these could be used to break confinement, not\n  just access nondeterminism.\n\nPreviously the only option honored was `options.dateNowTrap = false`\n\nThe suppression of `Error.captureStackTrace` is new in this release. This\nrelease also suppresses `RegExp.prototype.compile` and properties like\n`RegExp.$1` which cause some surprising behavior.\n\n`SES.def` and `SES.Nat` are exported, so they can be used by non-confined\ncode (mostly in tests). `def(obj)` makes an object defensive, by freezing\nit's external API surface (anything reachable by property lookup and\nprototype traversal). `Nat(num)` throws an error unless its argument is a\nnatural number (a non-negative integer small enough to remain an integer\ninside a Javascript `Number` type). Both are important for defensive\nprogramming.\n\n# 0.1.3 (2018-08-24)\n\nAdds Nat and SES.confineExpr.\n\n- `Nat(val)` ensures the value is a natural (non-negative) integer\n- `SES.confineExpr(expr)` makes it easy to start with a function object, turn\n  it into a string, then into a new function inside the SES realm.\n\nThis also updates the challenge page to fix a demo vulnerability (#8).\n\n# 0.1.2 (2018-07-30)\n\n- npm name is now 'ses'\n- update to current proposal-realms\n\n# 0.0.1 (2018-07-28)\n\nfirst preliminary release\n", "// @ts-check\n\nimport {\n  FERAL_REG_EXP,\n  SyntaxError,\n  stringReplace,\n  stringSearch,\n  stringSlice,\n  stringSplit,\n  freeze,\n} from './commons.js';\nimport { getSourceURL } from './get-source-url.js';\n\n/**\n * Find the first occurence of the given pattern and return\n * the location as the approximate line number.\n *\n * @param {string} src\n * @param {RegExp} pattern\n * @returns {number}\n */\nfunction getLineNumber(src, pattern) {\n  const index = stringSearch(src, pattern);\n  if (index < 0) {\n    return -1;\n  }\n\n  // The importPattern incidentally captures an initial \\n in\n  // an attempt to reject a . prefix, so we need to offset\n  // the line number in that case.\n  const adjustment = src[index] === '\\n' ? 1 : 0;\n\n  return stringSplit(stringSlice(src, 0, index), '\\n').length + adjustment;\n}\n\n// /////////////////////////////////////////////////////////////////////////////\n\nconst htmlCommentPattern = new FERAL_REG_EXP(`(?:${'<'}!--|--${'>'})`, 'g');\n\n/**\n * Conservatively reject the source text if it may contain text that some\n * JavaScript parsers may treat as an html-like comment. To reject without\n * parsing, `rejectHtmlComments` will also reject some other text as well.\n *\n * https://www.ecma-international.org/ecma-262/9.0/index.html#sec-html-like-comments\n * explains that JavaScript parsers may or may not recognize html\n * comment tokens \"<\" immediately followed by \"!--\" and \"--\"\n * immediately followed by \">\" in non-module source text, and treat\n * them as a kind of line comment. Since otherwise both of these can\n * appear in normal JavaScript source code as a sequence of operators,\n * we have the terrifying possibility of the same source code parsing\n * one way on one correct JavaScript implementation, and another way\n * on another.\n *\n * This shim takes the conservative strategy of just rejecting source\n * text that contains these strings anywhere. Note that this very\n * source file is written strangely to avoid mentioning these\n * character strings explicitly.\n *\n * We do not write the regexp in a straightforward way, so that an\n * apparennt html comment does not appear in this file. Thus, we avoid\n * rejection by the overly eager rejectDangerousSources.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const rejectHtmlComments = src => {\n  const lineNumber = getLineNumber(src, htmlCommentPattern);\n  if (lineNumber < 0) {\n    return src;\n  }\n  const name = getSourceURL(src);\n  // See https://github.com/endojs/endo/blob/master/packages/ses/error-codes/SES_HTML_COMMENT_REJECTED.md\n  throw SyntaxError(\n    `Possible HTML comment rejected at ${name}:${lineNumber}. (SES_HTML_COMMENT_REJECTED)`,\n  );\n};\n\n/**\n * An optional transform to place ahead of `rejectHtmlComments` to evade *that*\n * rejection. However, it may change the meaning of the program.\n *\n * This evasion replaces each alleged html comment with the space-separated\n * JavaScript operator sequence that it may mean, assuming that it appears\n * outside of a comment or literal string, in source code where the JS\n * parser makes no special case for html comments (like module source code).\n * In that case, this evasion preserves the meaning of the program, though it\n * does change the souce column numbers on each effected line.\n *\n * If the html comment appeared in a literal (a string literal, regexp literal,\n * or a template literal), then this evasion will change the meaning of the\n * program by changing the text of that literal.\n *\n * If the html comment appeared in a JavaScript comment, then this evasion does\n * not change the meaning of the program because it only changes the contents of\n * those comments.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const evadeHtmlCommentTest = src => {\n  const replaceFn = match => (match[0] === '<' ? '< ! --' : '-- >');\n  return stringReplace(src, htmlCommentPattern, replaceFn);\n};\n\n// /////////////////////////////////////////////////////////////////////////////\n\nconst importPattern = new FERAL_REG_EXP(\n  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n  'g',\n);\n\n/**\n * Conservatively reject the source text if it may contain a dynamic\n * import expression. To reject without parsing, `rejectImportExpressions` will\n * also reject some other text as well.\n *\n * The proposed dynamic import expression is the only syntax currently\n * proposed, that can appear in non-module JavaScript code, that\n * enables direct access to the outside world that cannot be\n * suppressed or intercepted without parsing and rewriting. Instead,\n * this shim conservatively rejects any source text that seems to\n * contain such an expression. To do this safely without parsing, we\n * must also reject some valid programs, i.e., those containing\n * apparent import expressions in literal strings or comments.\n *\n * The current conservative rule looks for the identifier \"import\"\n * followed by either an open paren or something that looks like the\n * beginning of a comment. We assume that we do not need to worry\n * about html comment syntax because that was already rejected by\n * rejectHtmlComments.\n *\n * this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\n * U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\n * whitespace by the parser, but not matched by /\\s/, then this would admit\n * an attack like: import\\u2028('power.js') . We're trying to distinguish\n * something like that from something like importnotreally('power.js') which\n * is perfectly safe.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const rejectImportExpressions = src => {\n  const lineNumber = getLineNumber(src, importPattern);\n  if (lineNumber < 0) {\n    return src;\n  }\n  const name = getSourceURL(src);\n  // See https://github.com/endojs/endo/blob/master/packages/ses/error-codes/SES_IMPORT_REJECTED.md\n  throw SyntaxError(\n    `Possible import expression rejected at ${name}:${lineNumber}. (SES_IMPORT_REJECTED)`,\n  );\n};\n\n/**\n * An optional transform to place ahead of `rejectImportExpressions` to evade\n * *that* rejection. However, it may change the meaning of the program.\n *\n * This evasion replaces each suspicious `import` identifier with `__import__`.\n * If the alleged import expression appears in a JavaScript comment, this\n * evasion will not change the meaning of the program. If it appears in a\n * literal (string literal, regexp literal, or a template literal), then this\n * evasion will change the contents of that literal. If it appears as code\n * where it would be parsed as an expression, then it might or might not change\n * the meaning of the program, depending on the binding, if any, of the lexical\n * variable `__import__`.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const evadeImportExpressionTest = src => {\n  const replaceFn = (_, p1, p2) => `${p1}__import__${p2}`;\n  return stringReplace(src, importPattern, replaceFn);\n};\n\n// /////////////////////////////////////////////////////////////////////////////\n\nconst someDirectEvalPattern = new FERAL_REG_EXP(\n  '(^|[^.])\\\\beval(\\\\s*\\\\()',\n  'g',\n);\n\n/**\n * Heuristically reject some text that seems to contain a direct eval\n * expression, with both false positives and false negavives. To reject without\n * parsing, `rejectSomeDirectEvalExpressions` may will also reject some other\n * text as well. It may also accept source text that contains a direct eval\n * written oddly, such as `(eval)(src)`. This false negative is not a security\n * vulnerability. Rather it is a compat hazard because it will execute as\n * an indirect eval under the SES-shim but as a direct eval on platforms that\n * support SES directly (like XS).\n *\n * The shim cannot correctly emulate a direct eval as explained at\n * https://github.com/Agoric/realms-shim/issues/12\n * If we did not reject direct eval syntax, we would\n * accidentally evaluate these with an emulation of indirect eval. To\n * prevent future compatibility problems, in shifting from use of the\n * shim to genuine platform support for the proposal, we should\n * instead statically reject code that seems to contain a direct eval\n * expression.\n *\n * As with the dynamic import expression, to avoid a full parse, we do\n * this approximately with a regexp, that will also reject strings\n * that appear safely in comments or strings. Unlike dynamic import,\n * if we miss some, this only creates future compat problems, not\n * security problems. Thus, we are only trying to catch innocent\n * occurrences, not malicious one. In particular, `(eval)(...)` is\n * direct eval syntax that would not be caught by the following regexp.\n *\n * Exported for unit tests.\n *\n * @param {string} src\n * @returns {string}\n */\nexport const rejectSomeDirectEvalExpressions = src => {\n  const lineNumber = getLineNumber(src, someDirectEvalPattern);\n  if (lineNumber < 0) {\n    return src;\n  }\n  const name = getSourceURL(src);\n  // See https://github.com/endojs/endo/blob/master/packages/ses/error-codes/SES_EVAL_REJECTED.md\n  throw SyntaxError(\n    `Possible direct eval expression rejected at ${name}:${lineNumber}. (SES_EVAL_REJECTED)`,\n  );\n};\n\n// /////////////////////////////////////////////////////////////////////////////\n\n/**\n * A transform that bundles together the transforms that must unconditionally\n * happen last in order to ensure safe evaluation without parsing.\n *\n * @param {string} source\n * @returns {string}\n */\nexport const mandatoryTransforms = source => {\n  source = rejectHtmlComments(source);\n  source = rejectImportExpressions(source);\n  return source;\n};\n\n/**\n * Starting with `source`, apply each transform to the result of the\n * previous one, returning the result of the last transformation.\n *\n * @param {string} source\n * @param {((str: string) => string)[]} transforms\n * @returns {string}\n */\nexport const applyTransforms = (source, transforms) => {\n  for (const transform of transforms) {\n    source = transform(source);\n  }\n  return source;\n};\n\n// export all as a frozen object\nexport const transforms = freeze({\n  rejectHtmlComments: freeze(rejectHtmlComments),\n  evadeHtmlCommentTest: freeze(evadeHtmlCommentTest),\n  rejectImportExpressions: freeze(rejectImportExpressions),\n  evadeImportExpressionTest: freeze(evadeImportExpressionTest),\n  rejectSomeDirectEvalExpressions: freeze(rejectSomeDirectEvalExpressions),\n  mandatoryTransforms: freeze(mandatoryTransforms),\n  applyTransforms: freeze(applyTransforms),\n});\n", "import test from 'ava';\nimport {\n  rejectImportExpressions,\n  rejectHtmlComments,\n  rejectSomeDirectEvalExpressions,\n} from '../src/transforms.js';\n\ntest('no-import-expression regexp', t => {\n  t.plan(14);\n\n  // Note: we cannot define these as regular functions (and then stringify)\n  // because the 'esm' module loader that we use for running the tests (i.e.\n  // 'tape -r esm ./shim/test/**/*.js') sees the 'import' statements and\n  // rewrites them.\n\n  // Mentioning import() in a comment *should* be safe, but requires a full\n  // parser to check, and a cheap regexp test will conservatively reject it.\n  // So we don't assert that behavior one way or the other\n\n  const safe = 'const a = 1';\n  const safe2 = \"const a = notimport('evil')\";\n  const safe3 = \"const a = importnot('evil')\";\n  const safe4 = \"const a = compartment.import('name')\";\n\n  const obvious = \"const a = import('evil')\";\n  const whitespace = \"const a = import ('evil')\";\n  const comment = \"const a = import/*hah*/('evil')\";\n  const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n  const newline = \"const a = import\\n('evil')\";\n  const multiline = \"\\nimport('a')\\nimport('b')\";\n  const spread = \"{...import('exfil')}\";\n  const spread2 = \"{... import('exfil')}\";\n  const spread3 = \"{\\n...\\nimport\\n('exfil')}\";\n  const spread4 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n\n  t.is(rejectImportExpressions(safe), safe, 'safe');\n  t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n  t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n  t.throws(\n    () => rejectImportExpressions(obvious),\n    { instanceOf: SyntaxError },\n    'obvious',\n  );\n  t.throws(\n    () => rejectImportExpressions(whitespace),\n    { instanceOf: SyntaxError },\n    'whitespace',\n  );\n  t.throws(\n    () => rejectImportExpressions(comment),\n    { instanceOf: SyntaxError },\n    'comment',\n  );\n  t.throws(\n    () => rejectImportExpressions(doubleSlashComment),\n    { instanceOf: SyntaxError },\n    'doubleSlashComment',\n  );\n  t.throws(\n    () => rejectImportExpressions(newline),\n    { instanceOf: SyntaxError },\n    'newline',\n  );\n  t.throws(\n    () => rejectImportExpressions(multiline),\n    { instanceOf: SyntaxError },\n    'possible import expression rejected around line 2',\n    'multiline',\n  );\n  t.throws(\n    () => rejectImportExpressions(spread),\n    { instanceOf: SyntaxError },\n    'spread',\n  );\n  t.throws(\n    () => rejectImportExpressions(spread2),\n    { instanceOf: SyntaxError },\n    'spread2',\n  );\n  t.throws(\n    () => rejectImportExpressions(spread3),\n    { instanceOf: SyntaxError },\n    'spread3',\n  );\n  t.throws(\n    () => rejectImportExpressions(spread4),\n    { instanceOf: SyntaxError },\n    'spread4',\n  );\n});\n\ntest('no-html-comment-expression regexp', t => {\n  t.plan(6);\n\n  const htmlOpenComment1 = \"const a = foo <!-- hah\\n('evil')\";\n  const htmlCloseComment1 = \"const a = foo --> hah\\n('evil')\";\n  const htmlOpenComment2 = \"const a = eval <!-- hah\\n('evil')\";\n  const htmlCloseComment2 = \"const a = eval --> hah\\n('evil')\";\n  const htmlOpenComment3 = \"const a = import <!-- hah\\n('evil')\";\n  const htmlCloseComment3 = \"const a = import --> hah\\n('evil')\";\n\n  t.throws(\n    () => rejectHtmlComments(htmlOpenComment1),\n    { instanceOf: SyntaxError },\n    'htmlOpenComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlCloseComment1),\n    { instanceOf: SyntaxError },\n    'htmlCloseComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlOpenComment2),\n    { instanceOf: SyntaxError },\n    'htmlOpenComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlCloseComment2),\n    { instanceOf: SyntaxError },\n    'htmlCloseComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlOpenComment3),\n    { instanceOf: SyntaxError },\n    'htmlOpenComment',\n  );\n\n  t.throws(\n    () => rejectHtmlComments(htmlCloseComment3),\n    { instanceOf: SyntaxError },\n    'htmlCloseComment',\n  );\n});\n\ntest('no-eval-expression regexp', t => {\n  t.plan(10);\n\n  const safe = 'const a = 1';\n  const safe2 = \"const a = noteval('evil')\";\n  const safe3 = \"const a = evalnot('evil')\";\n\n  // \"bogus\" is actually direct eval syntax which ideally we could\n  // reject. However, it escapes our regexp, which we allow because\n  // accepting it is a future compat issue, not a security issue.\n  const bogus = \"const a = (eval)('evil')\";\n\n  const obvious = \"const a = eval('evil')\";\n  const whitespace = \"const a = eval ('evil')\";\n  const comment = \"const a = eval/*hah*/('evil')\";\n  const doubleSlashComment = \"const a = eval // hah\\n('evil')\";\n  const newline = \"const a = eval\\n('evil')\";\n  const multiline = \"\\neval('a')\\neval('b')\";\n\n  t.is(rejectSomeDirectEvalExpressions(safe), safe, 'safe');\n  t.is(rejectSomeDirectEvalExpressions(safe2), safe2, 'safe2');\n  t.is(rejectSomeDirectEvalExpressions(safe3), safe3, 'safe3');\n\n  t.is(rejectSomeDirectEvalExpressions(bogus), bogus, 'bogus');\n\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(obvious),\n    { instanceOf: SyntaxError },\n    'obvious',\n  );\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(whitespace),\n    { instanceOf: SyntaxError },\n    'whitespace',\n  );\n  t.notThrows(() => rejectSomeDirectEvalExpressions(comment), 'comment');\n  t.notThrows(\n    () => rejectSomeDirectEvalExpressions(doubleSlashComment),\n    'doubleSlashComment',\n  );\n  // t.throws(\n  //   () => rejectSomeDirectEvalExpressions(htmlOpenComment),\n  //   { instanceOf: SyntaxError },\n  //   'htmlOpenComment'\n  // );\n  // t.throws(\n  //   () => rejectSomeDirectEvalExpressions(htmlCloseComment),\n  //   { instanceOf: SyntaxError },\n  //   'htmlCloseComment'\n  // );\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(newline),\n    { instanceOf: SyntaxError },\n    'newline',\n  );\n  t.throws(\n    () => rejectSomeDirectEvalExpressions(multiline),\n    { instanceOf: SyntaxError },\n    'possible direct eval expression rejected around line 2',\n    'multiline',\n  );\n\n  // mentioning eval() in a comment *should* be safe, but requires a full\n  // parser to check, and a cheap regexp test will conservatively reject it.\n  // So we don't assert that behavior one way or the other\n});\n"], "filenames": ["packages/ses/NEWS.md", "packages/ses/src/transforms.js", "packages/ses/test/test-transforms.js"], "buggy_code_start_loc": [1, 109, 9], "buggy_code_end_loc": [1, 110, 63], "fixing_code_start_loc": [2, 109, 9], "fixing_code_end_loc": [10, 110, 90], "type": "NVD-CWE-noinfo", "message": "SES is a JavaScript environment that allows safe execution of arbitrary programs in Compartments. In version 0.18.0 prior to 0.18.7, 0.17.0 prior to 0.17.1, 0.16.0 prior to 0.16.1, 0.15.0 prior to 0.15.24, 0.14.0 prior to 0.14.5, an 0.13.0 prior to 0.13.5, there is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.\n\nGuest program running inside a Compartment with as few as no endowments can gain access to the surrounding host\u2019s dynamic import by using dynamic import after the spread operator, like `{...import(arbitraryModuleSpecifier)}`.\n\nOn the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.\n\nWithin an XS worker, an attacker can use the host\u2019s module system to the extent that the host has been configured. This typically only allows access to module code on the host\u2019s file system and is of limited use to an attacker.\n\nWithin Node.js, the attacker gains access to Node.js\u2019s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.\n\nVersions 0.18.7, 0.17.1, 0.16.1, 0.15.24, 0.14.5, and 0.13.5 contain a patch for this issue. Some workarounds are available. On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat. With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of `fxFindModule` in a file like `xsPlatform.c` that calls `fxRejectModuleFile`.", "other": {"cve": {"id": "CVE-2023-39532", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-08T17:15:09.607", "lastModified": "2023-08-15T17:55:07.667", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SES is a JavaScript environment that allows safe execution of arbitrary programs in Compartments. In version 0.18.0 prior to 0.18.7, 0.17.0 prior to 0.17.1, 0.16.0 prior to 0.16.1, 0.15.0 prior to 0.15.24, 0.14.0 prior to 0.14.5, an 0.13.0 prior to 0.13.5, there is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.\n\nGuest program running inside a Compartment with as few as no endowments can gain access to the surrounding host\u2019s dynamic import by using dynamic import after the spread operator, like `{...import(arbitraryModuleSpecifier)}`.\n\nOn the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.\n\nWithin an XS worker, an attacker can use the host\u2019s module system to the extent that the host has been configured. This typically only allows access to module code on the host\u2019s file system and is of limited use to an attacker.\n\nWithin Node.js, the attacker gains access to Node.js\u2019s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.\n\nVersions 0.18.7, 0.17.1, 0.16.1, 0.15.24, 0.14.5, and 0.13.5 contain a patch for this issue. Some workarounds are available. On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat. With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of `fxFindModule` in a file like `xsPlatform.c` that calls `fxRejectModuleFile`."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:agoric:ses:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "0.13.0", "versionEndExcluding": "0.13.5", "matchCriteriaId": "4E1EC633-C037-4C04-871D-8A99CC95341E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:agoric:ses:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "0.14.0", "versionEndExcluding": "0.14.5", "matchCriteriaId": "FE092E36-42AD-4ECB-9D1D-1F055255E807"}, {"vulnerable": true, "criteria": "cpe:2.3:a:agoric:ses:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "0.15.0", "versionEndExcluding": "0.15.24", "matchCriteriaId": "E5511281-9D66-439E-999A-EB5EEEA5C4C2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:agoric:ses:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "0.18.0", "versionEndExcluding": "0.18.7", "matchCriteriaId": "BABF5176-1760-461C-9B4F-C16D499C7F5F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:agoric:ses:0.16.0:*:*:*:*:node.js:*:*", "matchCriteriaId": "530B00E7-D900-4C6B-8078-C163041FF77A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:agoric:ses:0.17.0:*:*:*:*:node.js:*:*", "matchCriteriaId": "35FEBC71-1F8D-4B91-95CA-3FB5F051450D"}]}]}], "references": [{"url": "https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041"}}