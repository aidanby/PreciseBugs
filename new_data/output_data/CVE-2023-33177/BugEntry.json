{"buggy_code": ["<?php\n/*\n * Copyright (c) 2022 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Xibo\\Controller;\nuse Carbon\\Carbon;\nuse Slim\\Http\\Response as Response;\nuse Slim\\Http\\ServerRequest as Request;\nuse Slim\\Routing\\RouteContext;\nuse Slim\\Views\\Twig;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Twig\\Error\\LoaderError;\nuse Twig\\Error\\RuntimeError;\nuse Twig\\Error\\SyntaxError;\nuse Xibo\\Entity\\User;\nuse Xibo\\Helper\\ApplicationState;\nuse Xibo\\Helper\\HttpsDetect;\nuse Xibo\\Helper\\SanitizerService;\nuse Xibo\\Service\\BaseDependenciesService;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\HelpServiceInterface;\nuse Xibo\\Service\\LogServiceInterface;\nuse Xibo\\Support\\Exception\\ControllerNotImplemented;\nuse Xibo\\Support\\Exception\\GeneralException;\nuse Xibo\\Support\\Exception\\InvalidArgumentException;\n\n/**\n * Class Base\n * @package Xibo\\Controller\n *\n * Base for all Controllers.\n *\n */\nclass Base\n{\n    use DataTablesDotNetTrait;\n\n    /**\n     * @var LogServiceInterface\n     */\n    private $log;\n\n    /**\n     * @Inject\n     * @var  SanitizerService\n     */\n    private $sanitizerService;\n\n    /**\n     * @var ApplicationState\n     */\n    private $state;\n\n    /**\n     * @var HelpServiceInterface\n     */\n    private $helpService;\n\n    /**\n     * @var ConfigServiceInterface\n     */\n    private $configService;\n\n    /**\n     * @var User\n     */\n    private $user;\n\n    /**\n     * Automatically output a full page if non-ajax request arrives\n     * @var bool\n     */\n    private $fullPage = true;\n\n    /**\n     * Have we already rendered this controller.\n     * @var bool\n     */\n    private $rendered = false;\n\n    /**\n     * Is this controller expected to output anything?\n     * @var bool\n     */\n    private $noOutput = false;\n\n    /**\n     * @var Twig\n     */\n    private $view;\n\n    /** @var EventDispatcher */\n    private $dispatcher;\n\n    /** @var BaseDependenciesService */\n    private $baseDependenciesService;\n\n    public function useBaseDependenciesService(BaseDependenciesService $baseDependenciesService)\n    {\n        $this->baseDependenciesService = $baseDependenciesService;\n    }\n\n    /**\n     * Get User\n     * @return User\n     */\n    public function getUser()\n    {\n        return $this->baseDependenciesService->getUser();\n    }\n\n    /**\n     * Get the Application State\n     * @return ApplicationState\n     */\n    public function getState()\n    {\n        return $this->baseDependenciesService->getState();\n    }\n\n    /**\n     * Get Log\n     * @return LogServiceInterface\n     */\n    public function getLog()\n    {\n        return $this->baseDependenciesService->getLogger();\n    }\n\n    /**\n     * @param $array\n     * @return \\Xibo\\Support\\Sanitizer\\SanitizerInterface\n     */\n    protected function getSanitizer($array)\n    {\n        $sanitizerService = $this->getSanitizerService();\n        return $sanitizerService->getSanitizer($array);\n    }\n\n    public function getSanitizerService(): SanitizerService\n    {\n        return $this->baseDependenciesService->getSanitizer();\n    }\n\n    /**\n     * Get Help\n     * @return HelpServiceInterface\n     */\n    protected function getHelp()\n    {\n        return $this->baseDependenciesService->getHelp();\n    }\n\n    /**\n     * Get Config\n     * @return ConfigServiceInterface\n     */\n    public function getConfig()\n    {\n        return $this->baseDependenciesService->getConfig();\n    }\n\n    /**\n     * @return \\Slim\\Views\\Twig\n     */\n    public function getView()\n    {\n        return $this->baseDependenciesService->getView();\n    }\n\n    /**\n     * @return EventDispatcherInterface\n     */\n    public function getDispatcher(): EventDispatcherInterface\n    {\n        return $this->baseDependenciesService->getDispatcher();\n    }\n\n    /**\n     * Is this the Api?\n     * @param Request $request\n     * @return bool\n     */\n    protected function isApi(Request $request)\n    {\n        return ($request->getAttribute('name') != 'web');\n    }\n\n    /**\n     * Get Url For Route\n     * @param Request $request\n     * @param string $route\n     * @param array $data\n     * @param array $params\n     * @return string\n     */\n    protected function urlFor(Request $request, $route, $data = [], $params = [])\n    {\n        $routeParser = RouteContext::fromRequest($request)->getRouteParser();\n        return $routeParser->urlFor($route, $data, $params);\n    }\n\n    /**\n     * Set to not output a full page automatically\n     */\n    public function setNotAutomaticFullPage()\n    {\n        $this->fullPage = false;\n    }\n\n    /**\n     * Set No output\n     * @param bool $bool\n     */\n    public function setNoOutput($bool = true)\n    {\n        $this->noOutput = $bool;\n    }\n\n    /**\n     * End the controller execution, calling render\n     * @param Request $request\n     * @param Response $response\n     * @return \\Psr\\Http\\Message\\ResponseInterface|Response\n     * @throws ControllerNotImplemented if the controller is not implemented correctly\n     * @throws GeneralException\n     */\n    public function render(Request $request, Response $response)\n    {\n        if ($this->noOutput) {\n            return $response;\n        }\n\n        // State will contain the current ApplicationState, including a success flag that can be used to determine\n        // if we are in error or not.\n        $state = $this->getState();\n        $data = $state->getData();\n\n        // Grid requests require some extra info appended.\n        // they can come from any application, hence being dealt with first\n        $grid = ($state->template === 'grid');\n\n        if ($grid) {\n            $params = $this->getSanitizer($request->getParams());\n            $recordsTotal = ($state->recordsTotal == null) ? count($data) : $state->recordsTotal;\n            $recordsFiltered = ($state->recordsFiltered == null) ? $recordsTotal : $state->recordsFiltered;\n\n            $data = [\n                'draw' => intval($params->getInt('draw')),\n                'recordsTotal' => $recordsTotal,\n                'recordsFiltered' => $recordsFiltered,\n                'data' => $data\n            ];\n        }\n\n        // API Request\n        if ($this->isApi($request)) {\n            // Envelope by default - the APIView will un-pack if necessary\n            $this->getState()->setData( [\n                'grid' => $grid,\n                'success' => $state->success,\n                'status' => $state->httpStatus,\n                'message' => $state->message,\n                'id' => $state->id,\n                'data' => $data\n            ]);\n\n            return $this->renderApiResponse($request, $response->withStatus($state->httpStatus));\n\n        } else if ($request->isXhr()) {\n            // WEB Ajax\n            // --------\n            // Are we a template that should be rendered to HTML\n            // and then returned?\n            if ($state->template != '' && $state->template != 'grid') {\n                return $this->renderTwigAjaxReturn($request, $response);\n            }\n\n            // We always return 200's\n            // TODO: we might want to change this (we'd need to change the javascript to suit)\n            if ($grid) {\n                $json = $data;\n            } else {\n                $json = $state->asArray();\n            }\n\n           return $response->withJson($json, 200);\n        } else {\n            // WEB Normal\n            // ----------\n            if (empty($state->template)) {\n                $this->getLog()->debug(sprintf('Template Missing. State: %s', json_encode($state)));\n                throw new ControllerNotImplemented(__('Template Missing'));\n            }\n\n            // Append the side bar content\n            $data['clock'] = Carbon::now()->format('H:i T');\n            $data['currentUser'] = $this->getUser();\n\n            try {\n                $response = $this->getView()->render($response, $state->template . '.twig', $data);\n            } catch (LoaderError | RuntimeError | SyntaxError $e) {\n                throw new GeneralException(__('Twig Error ') . $e->getMessage());\n            }\n        }\n        $this->rendered = true;\n        return $response;\n    }\n\n    /**\n     * @param Request $request\n     * @param Response $response\n     * @return \\Psr\\Http\\Message\\ResponseInterface|Response\n     * @throws ControllerNotImplemented\n     * @throws GeneralException\n     */\n    public function renderTwigAjaxReturn(Request $request, Response $response)\n    {\n        $data = $this->getState()->getData();\n        $state = $this->getState();\n\n        // Supply the current user to the view\n        $data['currentUser'] = $this->getUser();\n\n        // Render the view manually with Twig, parse it and pull out various bits\n        try {\n            $view = $this->getView()->render($response, $state->template . '.twig', $data);\n        } catch (LoaderError | RuntimeError | SyntaxError $e) {\n            throw new GeneralException(__('Twig Error ') . $e->getMessage());\n        }\n\n        $view = $view->getBody();\n\n        // Log Rendered View\n        $this->getLog()->debug(sprintf('%s View: %s', $state->template, $view));\n\n        if (!$view = json_decode($view, true)) {\n            $this->getLog()->error(sprintf('Problem with Template: View = %s, Error = %s ', $state->template, json_last_error_msg()));\n            throw new ControllerNotImplemented(__('Problem with Form Template'));\n        }\n\n        $state->html = $view['html'];\n        $state->dialogTitle = trim($view['title']);\n        $state->callBack = $view['callBack'];\n        $state->extra = $view['extra'];\n\n        // Process the buttons\n        $state->buttons = [];\n        // Expect each button on a new line\n        if (trim($view['buttons']) != '') {\n\n            // Convert to an array\n            $view['buttons'] = str_replace(\"\\n\\r\", \"\\n\", $view['buttons']);\n            $buttons = explode(\"\\n\", $view['buttons']);\n\n            foreach ($buttons as $button) {\n                if ($button == '')\n                    continue;\n\n                $this->getLog()->debug('Button is ' . $button);\n\n                $button = explode(',', trim($button));\n\n                if (count($button) != 2) {\n                    $this->getLog()->error(sprintf('There is a problem with the buttons in the template: %s. Buttons: %s.', $state->template, var_export($view['buttons'], true)));\n                    throw new ControllerNotImplemented(__('Problem with Form Template'));\n                }\n\n                $state->buttons[trim($button[0])] = str_replace('|', ',', trim($button[1]));\n            }\n        }\n\n        // Process the fieldActions\n        if (trim($view['fieldActions']) == '') {\n            $state->fieldActions = [];\n        } else {\n            // Convert to an array\n            $state->fieldActions = json_decode($view['fieldActions']);\n        }\n\n        $json = json_decode($state->asJson());\n        return $response = $response->withJson($json, 200);\n    }\n\n    /**\n     * Render a template to string\n     * @param string $template\n     * @param array $data\n     * @return string\n     * @throws \\Twig\\Error\\LoaderError\n     * @throws \\Twig\\Error\\RuntimeError\n     * @throws \\Twig\\Error\\SyntaxError\n     */\n    public function renderTemplateToString($template, $data)\n    {\n        return $this->getView()->fetch($template . '.twig', $data);\n    }\n\n    /**\n     * @param Request $request\n     * @param Response $response\n     * @return \\Psr\\Http\\Message\\ResponseInterface|Response\n     */\n    public function renderApiResponse(Request $request, Response $response)\n    {\n        $data = $this->getState()->getData();\n\n        // Don't envelope unless requested\n        if ($request->getParam('envelope', 0) == 1\n            || $request->getAttribute('name') === 'test'\n        ) {\n            // Envelope\n            // append error bool\n            if (!$data['success']) {\n                $data['success'] = false;\n            }\n\n            // append status code\n            $data['status'] = $response->getStatusCode();\n\n            // Enveloped responses always return 200\n            $response = $response->withStatus(200);\n        } else {\n            // Don't envelope\n            // Set status\n            $response = $response->withStatus($data['status']);\n\n            // Are we successful?\n            if (!$data['success']) {\n                // Error condition\n                $data = [\n                    'error' => [\n                        'message' => $data['message'],\n                        'code' => $data['status'],\n                        'data' => $data['data']\n                    ]\n                ];\n            } else {\n                // Are we a grid?\n                if ($data['grid'] == true) {\n                    // Set the response to our data['data'] object\n                    $grid = $data['data'];\n                    $data = $grid['data'];\n\n                    // Total Number of Rows\n                    $totalRows = $grid['recordsTotal'];\n\n                    // Set some headers indicating our next/previous pages\n                    $sanitizedParams = $this->getSanitizer($request->getParams());\n                    $start = $sanitizedParams->getInt('start', ['default' => 0]);\n                    $size = $sanitizedParams->getInt('length', ['default' => 10]);\n\n                    $linkHeader = '';\n                    $url = (new HttpsDetect())->getUrl() . $request->getUri()->getPath();\n\n                    // Is there a next page?\n                    if ($start + $size < $totalRows) {\n                        $linkHeader .= '<' . $url . '?start=' . ($start + $size) . '&length=' . $size . '>; rel=\"next\", ';\n                    }\n\n                    // Is there a previous page?\n                    if ($start > 0) {\n                        $linkHeader .= '<' . $url . '?start=' . ($start - $size) . '&length=' . $size . '>; rel=\"prev\", ';\n                    }\n\n                    // The first page\n                    $linkHeader .= '<' . $url . '?start=0&length=' . $size . '>; rel=\"first\"';\n\n                    $response = $response\n                        ->withHeader('X-Total-Count', $totalRows)\n                        ->withHeader('Link', $linkHeader);\n                } else {\n                    // Set the response to our data object\n                    $data = $data['data'];\n                }\n            }\n        }\n\n        return $response->withJson($data);\n    }\n\n    /**\n     * @param string $form The form name\n     * @return bool\n     * @throws \\Xibo\\Support\\Exception\\NotFoundException\n     */\n    public function getAutoSubmit(string $form)\n    {\n        return $this->getUser()->getOptionValue('autoSubmit.' . $form, 'false') === 'true';\n    }\n\n    public function checkRootFolderAllowSave()\n    {\n        if ($this->getConfig()->getSetting('FOLDERS_ALLOW_SAVE_IN_ROOT') == 0\n            && !$this->getUser()->isSuperAdmin()\n        ) {\n            throw new InvalidArgumentException(\n                __('Saving into root folder is disabled, please select a different folder')\n            );\n        }\n    }\n}\n", "<?php\n/*\n * Copyright (C) 2023 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nnamespace Xibo\\Entity;\n\nuse Carbon\\Carbon;\nuse Carbon\\Factory;\nuse Respect\\Validation\\Validator as v;\nuse Stash\\Interfaces\\PoolInterface;\nuse Xibo\\Factory\\DataSetColumnFactory;\nuse Xibo\\Factory\\DataSetFactory;\nuse Xibo\\Factory\\PermissionFactory;\nuse Xibo\\Helper\\SanitizerService;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\DisplayNotifyServiceInterface;\nuse Xibo\\Service\\LogServiceInterface;\nuse Xibo\\Storage\\StorageServiceInterface;\nuse Xibo\\Support\\Exception\\ConfigurationException;\nuse Xibo\\Support\\Exception\\DuplicateEntityException;\nuse Xibo\\Support\\Exception\\GeneralException;\nuse Xibo\\Support\\Exception\\InvalidArgumentException;\nuse Xibo\\Support\\Exception\\NotFoundException;\n\n/**\n * Class DataSet\n * @package Xibo\\Entity\n *\n * @SWG\\Definition()\n */\nclass DataSet implements \\JsonSerializable\n{\n    use EntityTrait;\n\n    /**\n     * @SWG\\Property(description=\"The dataSetId\")\n     * @var int\n     */\n    public $dataSetId;\n\n    /**\n     * @SWG\\Property(description=\"The dataSet Name\")\n     * @var string\n     */\n    public $dataSet;\n\n    /**\n     * @SWG\\Property(description=\"The dataSet description\")\n     * @var string\n     */\n    public $description;\n\n    /**\n     * @SWG\\Property(description=\"The userId of the User that owns this DataSet\")\n     * @var int\n     */\n    public $userId;\n\n    /**\n     * @SWG\\Property(description=\"Timestamp indicating the date/time this DataSet was edited last\")\n     * @var int\n     */\n    public $lastDataEdit;\n\n    /**\n     * @SWG\\Property(description=\"The user name of the User that owns this DataSet\")\n     * @var string\n     */\n    public $owner;\n\n    /**\n     * @SWG\\Property(description=\"A comma separated list of Groups/Users that have permission to this DataSet\")\n     * @var string\n     */\n    public $groupsWithPermissions;\n\n    /**\n     * @SWG\\Property(description=\"A code for this Data Set\")\n     * @var string\n     */\n    public $code;\n\n    /**\n     * @SWG\\Property(description=\"Flag to indicate whether this DataSet is a lookup table\")\n     * @var int\n     */\n    public $isLookup = 0;\n\n    /**\n     * @SWG\\Property(description=\"Flag to indicate whether this DataSet is Remote\")\n     * @var int\n     */\n    public $isRemote = 0;\n\n    /**\n     * @SWG\\Property(description=\"Method to fetch the Data, can be GET or POST\")\n     * @var string\n     */\n    public $method;\n\n    /**\n     * @SWG\\Property(description=\"URI to call to fetch Data from. Replacements are {{DATE}}, {{TIME}} and, in case this is a sequencial used DataSet, {{COL.NAME}} where NAME is a ColumnName from the underlying DataSet.\")\n     * @var string\n     */\n    public $uri;\n\n    /**\n     * @SWG\\Property(description=\"Data to send as POST-Data to the remote host with the same Replacements as in the URI.\")\n     * @var string\n     */\n    public $postData;\n\n    /**\n     * @SWG\\Property(description=\"Authentication method, can be none, digest, basic\")\n     * @var string\n     */\n    public $authentication;\n\n    /**\n     * @SWG\\Property(description=\"Username to authenticate with\")\n     * @var string\n     */\n    public $username;\n\n    /**\n     * @SWG\\Property(description=\"Corresponding password\")\n     * @var string\n     */\n    public $password;\n\n    /**\n     * @SWG\\Property(description=\"Comma separated string of custom HTTP headers\")\n     * @var string\n     */\n    public $customHeaders;\n\n    /**\n     * @SWG\\Property(description=\"Custom User agent\")\n     * @var string\n     */\n    public $userAgent;\n\n    /**\n     * @SWG\\Property(description=\"Time in seconds this DataSet should fetch new Datas from the remote host\")\n     * @var int\n     */\n    public $refreshRate;\n\n    /**\n     * @SWG\\Property(description=\"Time in seconds when this Dataset should be cleared. If here is a lower value than in RefreshRate it will be cleared when the data is refreshed\")\n     * @var int\n     */\n    public $clearRate;\n\n    /**\n     * @SWG\\Property(description=\"Flag whether to truncate DataSet data if no new data is pulled from remote source\")\n     * @var int\n     */\n    public $truncateOnEmpty;\n\n    /**\n     * @SWG\\Property(description=\"DataSetID of the DataSet which should be fetched and present before the Data from this DataSet are fetched\")\n     * @var int\n     */\n    public $runsAfter;\n\n    /**\n     * @SWG\\Property(description=\"Last Synchronisation Timestamp\")\n     * @var int\n     */\n    public $lastSync = 0;\n\n    /**\n     * @SWG\\Property(description=\"Last Clear Timestamp\")\n     * @var int\n     */\n    public $lastClear = 0;\n\n    /**\n     * @SWG\\Property(description=\"Root-Element form JSON where the data are stored in\")\n     * @var String\n     */\n    public $dataRoot;\n\n    /**\n     * @SWG\\Property(description=\"Optional function to use for summarize or count unique fields in a remote request\")\n     * @var String\n     */\n    public $summarize;\n\n    /**\n     * @SWG\\Property(description=\"JSON-Element below the Root-Element on which the consolidation should be applied on\")\n     * @var String\n     */\n    public $summarizeField;\n\n    /**\n     * @SWG\\Property(description=\"The source id for remote dataSet, 1 - JSON, 2 - CSV\")\n     * @var integer\n     */\n    public $sourceId;\n\n    /**\n     * @SWG\\Property(description=\"A flag whether to ignore the first row, for CSV source remote dataSet\")\n     * @var integer\n     */\n    public $ignoreFirstRow;\n\n    /**\n     * @SWG\\Property(description=\"Soft limit on number of rows per DataSet, if left empty the global DataSet row limit will be used.\")\n     * @var integer\n     */\n    public $rowLimit = null;\n\n    /**\n     * @SWG\\Property(description=\"Type of action that should be taken on next remote DataSet sync - stop, fifo or truncate\")\n     * @var string\n     */\n    public $limitPolicy;\n\n    /**\n     * @SWG\\Property(description=\"Custom separator for CSV source, comma will be used by default\")\n     * @var string\n     */\n    public $csvSeparator;\n\n    /**\n     * @SWG\\Property(description=\"The id of the Folder this DataSet belongs to\")\n     * @var int\n     */\n    public $folderId;\n\n    /**\n     * @SWG\\Property(description=\"The id of the Folder responsible for providing permissions for this DataSet\")\n     * @var int\n     */\n    public $permissionsFolderId;\n\n    /** @var array Permissions */\n    private $permissions = [];\n\n    /**\n     * @var DataSetColumn[]\n     */\n    public $columns = [];\n\n    private $countLast = 0;\n\n    /** @var array Blacklist for SQL */\n    private $blackList = array(';', 'INSERT', 'UPDATE', 'SELECT', 'DELETE', 'TRUNCATE', 'TABLE', 'FROM', 'WHERE');\n\n    /** @var  \\Xibo\\Helper\\SanitizerService */\n    private $sanitizerService;\n\n    /** @var  ConfigServiceInterface */\n    private $config;\n\n    /** @var PoolInterface */\n    private $pool;\n\n    /** @var  DataSetFactory */\n    private $dataSetFactory;\n\n    /** @var  DataSetColumnFactory */\n    private $dataSetColumnFactory;\n\n    /** @var  PermissionFactory */\n    private $permissionFactory;\n\n    /** @var DisplayNotifyServiceInterface */\n    private $displayNotifyService;\n\n    /**\n     * Entity constructor.\n     * @param StorageServiceInterface $store\n     * @param LogServiceInterface $log\n     * @param \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface $dispatcher\n     * @param SanitizerService $sanitizerService\n     * @param ConfigServiceInterface $config\n     * @param PoolInterface $pool\n     * @param DataSetFactory $dataSetFactory\n     * @param DataSetColumnFactory $dataSetColumnFactory\n     * @param PermissionFactory $permissionFactory\n     * @param DisplayNotifyServiceInterface $displayNotifyService\n     */\n    public function __construct($store, $log, $dispatcher, $sanitizerService, $config, $pool, $dataSetFactory, $dataSetColumnFactory, $permissionFactory, $displayNotifyService)\n    {\n        $this->setCommonDependencies($store, $log, $dispatcher);\n        $this->sanitizerService = $sanitizerService;\n        $this->config = $config;\n        $this->pool = $pool;\n        $this->dataSetFactory = $dataSetFactory;\n        $this->dataSetColumnFactory = $dataSetColumnFactory;\n        $this->permissionFactory = $permissionFactory;\n        $this->displayNotifyService = $displayNotifyService;\n    }\n\n    /**\n     * @param $array\n     * @return \\Xibo\\Support\\Sanitizer\\SanitizerInterface\n     */\n    protected function getSanitizer($array)\n    {\n        return $this->sanitizerService->getSanitizer($array);\n    }\n\n    /**\n     * Clone\n     */\n    public function __clone()\n    {\n        $this->dataSetId = null;\n\n        $this->columns = array_map(function ($object) { return clone $object; }, $this->columns);\n    }\n\n    /**\n     * @return int\n     */\n    public function getId()\n    {\n        return $this->dataSetId;\n    }\n\n    public function getPermissionFolderId()\n    {\n        return $this->permissionsFolderId;\n    }\n\n    /**\n     * @return int\n     */\n    public function getOwnerId()\n    {\n        return $this->userId;\n    }\n\n    /**\n     * Set the owner of this DataSet\n     * @param $userId\n     */\n    public function setOwner($userId)\n    {\n        $this->userId = $userId;\n    }\n\n    /**\n     * Get the Count of Records in the last getData()\n     * @return int\n     */\n    public function countLast()\n    {\n        return $this->countLast;\n    }\n\n    /**\n     * Get the Display Notify Service\n     * @return DisplayNotifyServiceInterface\n     */\n    public function getDisplayNotifyService(): DisplayNotifyServiceInterface\n    {\n        return $this->displayNotifyService->init();\n    }\n\n    /**\n     * Get Column\n     * @param int[Optional] $dataSetColumnId\n     * @return DataSetColumn[]|DataSetColumn\n     * @throws NotFoundException when the heading is provided and the column cannot be found\n     */\n    public function getColumn($dataSetColumnId = 0)\n    {\n        $this->load();\n\n        if ($dataSetColumnId != 0) {\n\n            foreach ($this->columns as $column) {\n                /* @var DataSetColumn $column */\n                if ($column->dataSetColumnId == $dataSetColumnId)\n                    return $column;\n            }\n\n            throw new NotFoundException(sprintf(__('Column %s not found'), $dataSetColumnId));\n\n        } else {\n            return $this->columns;\n        }\n    }\n\n    /**\n     * Get Column\n     * @param string $dataSetColumn\n     * @return DataSetColumn[]|DataSetColumn\n     * @throws NotFoundException when the heading is provided and the column cannot be found\n     */\n    public function getColumnByName($dataSetColumn)\n    {\n        $this->load();\n\n        foreach ($this->columns as $column) {\n            /* @var DataSetColumn $column */\n            if ($column->heading == $dataSetColumn)\n                return $column;\n        }\n\n        throw new NotFoundException(sprintf(__('Column %s not found'), $dataSetColumn));\n    }\n\n    /**\n     * @param string[] $columns Column Names to select\n     * @return array\n     * @throws InvalidArgumentException\n     */\n    public function getUniqueColumnValues($columns)\n    {\n        $this->load();\n\n        $select = '';\n        foreach ($columns as $heading) {\n            // Check this exists\n            $found = false;\n            foreach ($this->columns as $column) {\n                if ($column->heading == $heading) {\n                    // Formula column?\n                    if ($column->dataSetColumnTypeId == 2) {\n                        $select .= str_replace($this->blackList, '', htmlspecialchars_decode($column->formula, ENT_QUOTES)) . ' AS `' . $column->heading . '`,';\n                    }\n                    else {\n                        $select .= '`' . $column->heading . '`,';\n                    }\n                    $found = true;\n                    break;\n                }\n            }\n\n            if (!$found) {\n                throw new InvalidArgumentException(__('Unknown Column ' . $heading));\n            }\n        }\n        $select = rtrim($select, ',');\n        // $select is safe\n\n        return $this->getStore()->select('SELECT DISTINCT ' . $select . ' FROM `dataset_' . $this->dataSetId . '`', []);\n    }\n\n    /**\n     * Get DataSet Data\n     * @param array $filterBy\n     * @param array $options\n     * @return array\n     * @throws NotFoundException\n     */\n    public function getData($filterBy = [], $options = [])\n    {\n\n        $sanitizer = $this->getSanitizer($filterBy);\n\n        $start = $sanitizer->getInt('start', ['default' => 0]);\n        $size = $sanitizer->getInt('size', ['default' => 0]);\n        $filter = $filterBy['filter'] ?? '';\n        $ordering = $sanitizer->getString('order');\n        $displayId = $sanitizer->getInt('displayId', ['default' => 0]);\n\n        $options = array_merge([\n            'includeFormulaColumns' => true,\n            'requireTotal' => true\n        ], $options);\n\n        // Params\n        $params = [];\n\n        // Sanitize the filter options provided\n        // Get the Latitude and Longitude ( might be used in a formula )\n        if ($displayId == 0) {\n            $displayGeoLocation = \"GEOMFROMTEXT('POINT(\" . $this->config->getSetting('DEFAULT_LAT') . \" \" . $this->config->getSetting('DEFAULT_LONG') . \")')\";\n        }\n        else {\n            $displayGeoLocation = '(SELECT GeoLocation FROM `display` WHERE DisplayID = :displayId)';\n            $params['displayId'] = $displayId;\n        }\n\n        // Build a SQL statement, based on the columns for this dataset\n        $this->load();\n\n        $select  = 'SELECT * FROM ( ';\n        $body = 'SELECT id';\n\n        // Keep track of the columns we are allowed to order by\n        $allowedOrderCols = ['id'];\n\n        // Are there any client side formulas\n        $clientSideFormula = [];\n\n        // Select (columns)\n        foreach ($this->getColumn() as $column) {\n            /* @var DataSetColumn $column */\n            if ($column->dataSetColumnTypeId == 2 && !$options['includeFormulaColumns']) {\n                continue;\n            }\n\n            // Formula column?\n            if ($column->dataSetColumnTypeId == 2) {\n                // Is this a client side column?\n                if (substr($column->formula, 0, 1) === '$') {\n                    $clientSideFormula[] = $column;\n                    continue;\n                }\n\n                $formula = str_replace($this->blackList, '', htmlspecialchars_decode($column->formula, ENT_QUOTES));\n                $formula = str_replace('[DisplayId]', $displayId, $formula);\n\n                $heading = str_replace('[DisplayGeoLocation]', $displayGeoLocation, $formula) . ' AS `' . $column->heading . '`';\n            } else {\n                $heading = '`' . $column->heading . '`';\n            }\n\n            $allowedOrderCols[] = $column->heading;\n\n            $body .= ', ' . $heading;\n        }\n\n        $body .= ' FROM `dataset_' . $this->dataSetId . '`) dataset WHERE 1 = 1 ';\n\n        // Filtering\n        if ($filter != '') {\n            // Support display filtering.\n            $filter = str_replace('[DisplayId]', $displayId, $filter);\n            $filter = str_replace($this->blackList, '', $filter);\n\n            $body .= ' AND ' . $filter;\n        }\n\n        // Filter by ID\n        if ($sanitizer->getInt('id') !== null) {\n            $body .= ' AND id = :id ';\n            $params['id'] = $sanitizer->getInt('id');\n        }\n\n        // Ordering\n        $order = '';\n        if ($ordering != '') {\n            $order = ' ORDER BY ';\n\n            $ordering = explode(',', $ordering);\n\n            foreach ($ordering as $orderPair) {\n                // Sanitize the clause\n                $sanitized = str_replace('`', '', str_replace(' ASC', '', str_replace(' DESC', '', $orderPair)));\n\n                // Check allowable\n                if (!in_array($sanitized, $allowedOrderCols)) {\n                    $found = false;\n                    $this->getLog()->info('Potentially disallowed column: ' . $sanitized);\n                    // the gridRenderSort will strip spaces on column names go through allowed order columns\n                    // and see if we can find a match by stripping spaces from the heading\n                    foreach ($allowedOrderCols as $allowedOrderCol) {\n                        $this->getLog()->info('Checking spaces in original name : ' . $sanitized);\n                        if (str_replace(' ', '', $allowedOrderCol) === $sanitized) {\n                            $found = true;\n                            // put the column heading with the space as sanitized to make sql happy.\n                            $sanitized = $allowedOrderCol;\n                        }\n                    }\n\n                    // we tried, but it was not found, omit this pair\n                    if (!$found) {\n                        continue;\n                    }\n                }\n\n                // Substitute\n                if (strripos($orderPair, ' DESC')) {\n                    $order .= sprintf(' `%s`  DESC,', $sanitized);\n                } else if (strripos($orderPair, ' ASC')) {\n                    $order .= sprintf(' `%s`  ASC,', $sanitized);\n                } else {\n                    $order .= sprintf(' `%s`,', $sanitized);\n                }\n            }\n\n            $order = trim($order, ',');\n\n            // if after all that we still do not have any column name to order by, default to order by id\n            if (trim($order) === 'ORDER BY') {\n                $order = ' ORDER BY id ';\n            }\n        } else {\n            $order = ' ORDER BY id ';\n        }\n\n        // Limit\n        $limit = '';\n        if ($start != 0 || $size != 0) {\n            // Substitute in\n\n            // handle case where lower limit is set to > 0 and upper limit to 0 https://github.com/xibosignage/xibo/issues/2187\n            // it is with <= 0 because in some Widgets we calculate the size as upper - lower, https://github.com/xibosignage/xibo/issues/2263.\n            if ($start != 0 && $size <= 0) {\n                $size = PHP_INT_MAX;\n            }\n\n            $limit = sprintf(' LIMIT %d, %d ', $start, $size);\n        }\n\n        $sql = $select . $body . $order . $limit;\n\n        $data = $this->getStore()->select($sql, $params);\n\n        // If there are limits run some SQL to work out the full payload of rows\n        if ($options['requireTotal']) {\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total FROM (' . $body, $params);\n            $this->countLast = intval($results[0]['total']);\n        }\n\n        // Are there any client side formulas?\n        if (count($clientSideFormula) > 0) {\n            $renderedData = [];\n            foreach ($data as $item) {\n                foreach ($clientSideFormula as $column) {\n                    // Run the formula and add the resulting value to the list\n                    $value = null;\n                    try {\n                        if (substr($column->formula, 0, strlen('$dateFormat(')) === '$dateFormat(') {\n                            // Pull out the column name and date format\n                            $details = explode(',', str_replace(')', '', str_replace('$dateFormat(', '', $column->formula)));\n\n                            if (isset($details[2])) {\n                                $language = str_replace(' ', '', $details[2]);\n                            } else {\n                                $language = $this->config->getSetting('DEFAULT_LANGUAGE', 'en_GB');\n                            }\n\n                            $carbonFactory = new Factory(['locale' => $language], Carbon::class);\n                            $value = $carbonFactory->parse($item[$details[0]])->translatedFormat($details[1]);\n                        }\n                    } catch (\\Exception $e) {\n                        $this->getLog()->error('DataSet client side formula error in dataSetId ' . $this->dataSetId . ' with column formula ' . $column->formula);\n                    }\n\n                    $item[$column->heading] = $value;\n                }\n\n                $renderedData[] = $item;\n            }\n        } else {\n            $renderedData = $data;\n        }\n\n        return $renderedData;\n    }\n\n    /**\n     * Assign a column\n     * @param DataSetColumn $column\n     */\n    public function assignColumn($column)\n    {\n        $this->load();\n\n        // Set the dataSetId\n        $column->dataSetId = $this->dataSetId;\n\n        // Set the column order if we need to\n        if ($column->columnOrder == 0)\n            $column->columnOrder = count($this->columns) + 1;\n\n        $this->columns[] = $column;\n    }\n\n    /**\n     * Has Data?\n     * @return bool\n     */\n    public function hasData()\n    {\n        return $this->getStore()->exists('SELECT id FROM `dataset_' . $this->dataSetId . '` LIMIT 1', []);\n    }\n\n    /**\n     * Returns a Timestamp for the next Synchronisation process.\n     * @return int Seconds\n     */\n    public function getNextSyncTime()\n    {\n        return $this->lastSync + $this->refreshRate;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isTruncateEnabled()\n    {\n        return $this->clearRate !== 0;\n    }\n\n    /**\n     * Returns a Timestamp for the next Clearing process.\n     * @return int Seconds\n     */\n    public function getNextClearTime()\n    {\n        return $this->lastClear + $this->clearRate;\n    }\n\n    /**\n     * Returns if there is a consolidation field and method present or not.\n     * @return boolean\n     */\n    public function doConsolidate()\n    {\n        return ($this->summarizeField != null) && ($this->summarizeField != '')\n            && ($this->summarize != null) && ($this->summarize != '');\n    }\n\n    /**\n     * Returns the last Part of the Fieldname on which the consolidation should be applied on\n     * @return String\n     */\n    public function getConsolidationField()\n    {\n        $pos = strrpos($this->summarizeField, '.');\n        if ($pos !== false) {\n            return substr($this->summarizeField, $pos + 1);\n        }\n        return $this->summarizeField;\n    }\n\n    /**\n     * Tests if this DataSet contains parameters for getting values on the dependant DataSet\n     * @return boolean\n     */\n    public function containsDependantFieldsInRequest()\n    {\n        return strpos($this->postData, '{{COL.') !== false || strpos($this->uri, '{{COL.') !== false;\n    }\n\n    /**\n     * Validate\n     * @throws InvalidArgumentException\n     * @throws DuplicateEntityException\n     */\n    public function validate()\n    {\n        if (!v::stringType()->notEmpty()->length(null, 50)->validate($this->dataSet)) {\n            throw new InvalidArgumentException(__('Name must be between 1 and 50 characters'), 'dataSet');\n        }\n\n        if ($this->description != null && !v::stringType()->length(null, 254)->validate($this->description)) {\n            throw new InvalidArgumentException(__('Description can not be longer than 254 characters'), 'description');\n        }\n\n        // If we are a remote dataset do some additional checks\n        if ($this->isRemote === 1) {\n            if (!v::stringType()->notEmpty()->validate($this->uri)) {\n                throw new InvalidArgumentException(__('A remote DataSet must have a URI.'), 'uri');\n            }\n\n            if ($this->rowLimit > $this->config->getSetting('DATASET_HARD_ROW_LIMIT')) {\n                throw new InvalidArgumentException(__('DataSet row limit cannot be larger than the CMS dataSet row limit'));\n            }\n        }\n\n        try {\n            $existing = $this->dataSetFactory->getByName($this->dataSet, $this->userId);\n\n            if ($this->dataSetId == 0 || $this->dataSetId != $existing->dataSetId) {\n                throw new DuplicateEntityException(sprintf(__('There is already dataSet called %s. Please choose another name.'), $this->dataSet));\n            }\n        }\n        catch (NotFoundException $e) {\n            // This is good\n        }\n    }\n\n    /**\n     * Load all known information\n     */\n    public function load()\n    {\n        if ($this->loaded || $this->dataSetId == 0)\n            return;\n\n        // Load Columns\n        $this->columns = $this->dataSetColumnFactory->getByDataSetId($this->dataSetId);\n\n        // Load Permissions\n        $this->permissions = $this->permissionFactory->getByObjectId(get_class($this), $this->getId());\n\n        $this->loaded = true;\n    }\n\n    /**\n     * Save this DataSet\n     * @param array $options\n     * @throws InvalidArgumentException\n     * @throws DuplicateEntityException\n     */\n    public function save($options = [])\n    {\n        $options = array_merge(['validate' => true, 'saveColumns' => true], $options);\n\n        if ($options['validate']) {\n            $this->validate();\n        }\n\n        if ($this->dataSetId == 0) {\n            $this->add();\n        } else {\n            $this->edit();\n        }\n\n        // Columns\n        if ($options['saveColumns']) {\n            foreach ($this->columns as $column) {\n                /* @var \\Xibo\\Entity\\DataSetColumn $column */\n                $column->dataSetId = $this->dataSetId;\n                $column->save();\n            }\n        }\n\n        // We've been touched\n        $this->setActive();\n\n        // Notify Displays?\n        $this->notify();\n    }\n\n    /**\n     * @param int $time\n     * @return $this\n     */\n    public function saveLastSync($time)\n    {\n        $this->lastSync = $time;\n\n        $this->getStore()->update('UPDATE `dataset` SET lastSync = :lastSync WHERE dataSetId = :dataSetId', [\n            'dataSetId' => $this->dataSetId,\n            'lastSync' => $this->lastSync\n        ]);\n\n        return $this;\n    }\n\n    /**\n     * @param int $time\n     * @return $this\n     */\n    public function saveLastClear($time)\n    {\n        $this->lastSync = $time;\n\n        $this->getStore()->update('UPDATE `dataset` SET lastClear = :lastClear WHERE dataSetId = :dataSetId', [\n            'dataSetId' => $this->dataSetId,\n            'lastClear' => $this->lastClear\n        ]);\n\n        return $this;\n    }\n\n    /**\n     * Is this DataSet active currently\n     * @return bool\n     */\n    public function isActive()\n    {\n        $cache = $this->pool->getItem('/dataset/accessed/' . $this->dataSetId);\n        return $cache->isHit();\n    }\n\n    /**\n     * Indicate that this DataSet has been accessed recently\n     * @return $this\n     */\n    public function setActive()\n    {\n        $this->getLog()->debug('Setting ' . $this->dataSetId . ' as active');\n\n        $cache = $this->pool->getItem('/dataset/accessed/' . $this->dataSetId);\n        $cache->set('true');\n        $cache->expiresAfter(intval($this->config->getSetting('REQUIRED_FILES_LOOKAHEAD')) * 1.5);\n        $this->pool->saveDeferred($cache);\n        return $this;\n    }\n\n    /**\n     * Delete DataSet\n     * @throws ConfigurationException\n     * @throws InvalidArgumentException\n     */\n    public function delete()\n    {\n        $this->load();\n\n        if ($this->isLookup) {\n            throw new ConfigurationException(__('Lookup Tables cannot be deleted'));\n        }\n\n        // check if any other DataSet depends on this DataSet\n        if ($this->getStore()->exists(\n            'SELECT dataSetId FROM dataset WHERE runsAfter = :runsAfter AND dataSetId <> :dataSetId',\n            [\n                'runsAfter' => $this->dataSetId,\n                'dataSetId' => $this->dataSetId\n            ])) {\n            throw new InvalidArgumentException(__('Cannot delete because this DataSet is set as dependent DataSet for another DataSet'), 'dataSetId');\n        }\n\n        // Make sure we're able to delete\n        if ($this->getStore()->exists('\n            SELECT widgetId \n              FROM `widgetoption`\n              WHERE `widgetoption`.type = \\'attrib\\'\n                AND `widgetoption`.option = \\'dataSetId\\'\n                AND `widgetoption`.value = :dataSetId\n        ', ['dataSetId' => $this->dataSetId])) {\n            throw new InvalidArgumentException(__('Cannot delete because DataSet is in use on one or more Layouts.'), 'dataSetId');\n        }\n\n        // Delete Permissions\n        foreach ($this->permissions as $permission) {\n            /* @var Permission $permission */\n            $permission->deleteAll();\n        }\n\n        // Delete Columns\n        foreach ($this->columns as $column) {\n            /* @var \\Xibo\\Entity\\DataSetColumn $column */\n            $column->delete();\n        }\n\n        // Delete any dataSet rss\n        $this->getStore()->update('DELETE FROM `datasetrss` WHERE dataSetId = :dataSetId', ['dataSetId' => $this->dataSetId]);\n\n        // Delete the data set\n        $this->getStore()->update('DELETE FROM `dataset` WHERE dataSetId = :dataSetId', ['dataSetId' => $this->dataSetId]);\n\n        // The last thing we do is drop the dataSet table\n        $this->dropTable();\n    }\n\n    /**\n     * Delete all data\n     */\n    public function deleteData()\n    {\n        // The last thing we do is drop the dataSet table\n        $this->getStore()->update('TRUNCATE TABLE `dataset_' . $this->dataSetId . '`', []);\n        $this->getStore()->update('ALTER TABLE `dataset_' . $this->dataSetId . '` AUTO_INCREMENT = 1', []);\n        $this->getStore()->commitIfNecessary();\n    }\n\n    /**\n     * Add\n     */\n    private function add()\n    {\n        $columns = 'DataSet, Description, UserID, `code`, `isLookup`, `isRemote`, `lastDataEdit`, `lastClear`, `folderId`, `permissionsFolderId`';\n        $values = ':dataSet, :description, :userId, :code, :isLookup, :isRemote, :lastDataEdit, :lastClear, :folderId, :permissionsFolderId';\n\n        $params = [\n            'dataSet' => $this->dataSet,\n            'description' => $this->description,\n            'userId' => $this->userId,\n            'code' => ($this->code == '') ? null : $this->code,\n            'isLookup' => $this->isLookup,\n            'isRemote' => $this->isRemote,\n            'lastDataEdit' => 0,\n            'lastClear' => 0,\n            'folderId' => ($this->folderId === null) ? 1 : $this->folderId,\n            'permissionsFolderId' => ($this->permissionsFolderId == null) ? 1 : $this-> permissionsFolderId\n        ];\n\n        // Insert the extra columns we expect for a remote DataSet\n        if ($this->isRemote === 1) {\n            $columns .= ', `method`, `uri`, `postData`, `authentication`, `username`, `password`, `customHeaders`, `userAgent`, `refreshRate`, `clearRate`, `truncateOnEmpty`, `runsAfter`, `dataRoot`, `lastSync`, `summarize`, `summarizeField`, `sourceId`, `ignoreFirstRow`, `rowLimit`, `limitPolicy`, `csvSeparator`';\n            $values .= ', :method, :uri, :postData, :authentication, :username, :password, :customHeaders, :userAgent, :refreshRate, :clearRate, :truncateOnEmpty, :runsAfter, :dataRoot, :lastSync, :summarize, :summarizeField, :sourceId, :ignoreFirstRow, :rowLimit, :limitPolicy, :csvSeparator';\n\n            $params['method'] = $this->method;\n            $params['uri'] = $this->uri;\n            $params['postData'] = $this->postData;\n            $params['authentication'] = $this->authentication;\n            $params['username'] = $this->username;\n            $params['password'] = $this->password;\n            $params['customHeaders'] = $this->customHeaders;\n            $params['userAgent'] = $this->userAgent;\n            $params['refreshRate'] = $this->refreshRate;\n            $params['clearRate'] = $this->clearRate;\n            $params['truncateOnEmpty'] = $this->truncateOnEmpty ?? 0;\n            $params['runsAfter'] = $this->runsAfter;\n            $params['dataRoot'] = $this->dataRoot;\n            $params['summarize'] = $this->summarize;\n            $params['summarizeField'] = $this->summarizeField;\n            $params['sourceId'] = $this->sourceId;\n            $params['ignoreFirstRow'] = $this->ignoreFirstRow;\n            $params['lastSync'] = 0;\n            $params['rowLimit'] = $this->rowLimit;\n            $params['limitPolicy'] = $this->limitPolicy;\n            $params['csvSeparator'] = $this->csvSeparator;\n        }\n\n        // Do the insert\n        $this->dataSetId = $this->getStore()->insert('INSERT INTO `dataset` (' . $columns . ') VALUES (' . $values . ')', $params);\n\n        // Create the data table for this dataSet\n        $this->createTable();\n    }\n\n    /**\n     * Edit\n     */\n    private function edit()\n    {\n        $sql = 'DataSet = :dataSet, Description = :description, userId = :userId, lastDataEdit = :lastDataEdit, `code` = :code, `isLookup` = :isLookup, `isRemote` = :isRemote, `folderId` = :folderId, `permissionsFolderId` = :permissionsFolderId ';\n        $params = [\n            'dataSetId' => $this->dataSetId,\n            'dataSet' => $this->dataSet,\n            'description' => $this->description,\n            'userId' => $this->userId,\n            'lastDataEdit' => $this->lastDataEdit,\n            'code' => $this->code,\n            'isLookup' => $this->isLookup,\n            'isRemote' => $this->isRemote,\n            'folderId' => $this->folderId,\n            'permissionsFolderId' => $this->permissionsFolderId\n        ];\n\n        if ($this->isRemote) {\n            $sql .= ', method = :method, uri = :uri, postData = :postData, authentication = :authentication, `username` = :username, `password` = :password, `customHeaders` = :customHeaders, `userAgent` = :userAgent, refreshRate = :refreshRate, clearRate = :clearRate, truncateOnEmpty = :truncateOnEmpty, runsAfter = :runsAfter, `dataRoot` = :dataRoot, `summarize` = :summarize, `summarizeField` = :summarizeField, `sourceId` = :sourceId, `ignoreFirstRow` = :ignoreFirstRow , `rowLimit` = :rowLimit, `limitPolicy` = :limitPolicy, `csvSeparator` = :csvSeparator ';\n\n            $params['method'] = $this->method;\n            $params['uri'] = $this->uri;\n            $params['postData'] = $this->postData;\n            $params['authentication'] = $this->authentication;\n            $params['username'] = $this->username;\n            $params['password'] = $this->password;\n            $params['customHeaders'] = $this->customHeaders;\n            $params['userAgent'] = $this->userAgent;\n            $params['refreshRate'] = $this->refreshRate;\n            $params['clearRate'] = $this->clearRate;\n            $params['truncateOnEmpty'] = $this->truncateOnEmpty ?? 0;\n            $params['runsAfter'] = $this->runsAfter;\n            $params['dataRoot'] = $this->dataRoot;\n            $params['summarize'] = $this->summarize;\n            $params['summarizeField'] = $this->summarizeField;\n            $params['sourceId'] = $this->sourceId;\n            $params['ignoreFirstRow'] = $this->ignoreFirstRow;\n            $params['rowLimit'] = $this->rowLimit;\n            $params['limitPolicy'] = $this->limitPolicy;\n            $params['csvSeparator'] = $this->csvSeparator;\n        }\n\n        $this->getStore()->update('UPDATE dataset SET ' . $sql . '  WHERE DataSetID = :dataSetId', $params);\n    }\n\n    /**\n     * Create the realised table structure for this DataSet\n     */\n    private function createTable()\n    {\n        // Create the data table for this dataset\n        $this->getStore()->update('\n          CREATE TABLE `dataset_' . $this->dataSetId . '` (\n            `id` int(11) NOT NULL AUTO_INCREMENT,\n            PRIMARY KEY (`id`)\n          ) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1\n        ', []);\n    }\n\n    private function dropTable()\n    {\n        $this->getStore()->update('DROP TABLE IF EXISTS dataset_' . $this->dataSetId, [], 'isolated', false, false, true);\n    }\n\n    /**\n     * Rebuild the dataSet table\n     * @throws GeneralException\n     */\n    public function rebuild()\n    {\n        $this->load();\n\n        // Drop the data table\n        $this->dropTable();\n\n        // Add the data table\n        $this->createTable();\n\n        foreach ($this->columns as $column) {\n            /* @var \\Xibo\\Entity\\DataSetColumn $column */\n            $column->dataSetId = $this->dataSetId;\n            $column->save(['rebuilding' => true]);\n        }\n    }\n\n    /**\n     * Notify displays of this campaign change\n     */\n    public function notify()\n    {\n        $this->getLog()->debug('DataSet ' . $this->dataSetId . ' wants to notify');\n\n        $this->getDisplayNotifyService()->collectNow()->notifyByDataSetId($this->dataSetId);\n    }\n\n    /**\n     * Add a row\n     * @param array $row\n     * @return int\n     */\n    public function addRow($row)\n    {\n        $this->getLog()->debug('Adding row ' . var_export($row, true));\n\n        // Update the last edit date on this dataSet\n        $this->lastDataEdit = Carbon::now()->format('U');\n\n        // Build a query to insert\n        $keys = array_keys($row);\n        $keys[] = 'id';\n\n        $values = array_values($row);\n        $values[] = NULL;\n\n        $sql = 'INSERT INTO `dataset_' . $this->dataSetId . '` (`' . implode('`, `', $keys) . '`) VALUES (' . implode(',', array_fill(0, count($values), '?')) . ')';\n\n        return $this->getStore()->insert($sql, $values);\n    }\n\n    /**\n     * Edit a row\n     * @param int $rowId\n     * @param array $row\n     */\n    public function editRow($rowId, $row)\n    {\n        $this->getLog()->debug(sprintf('Editing row %s', var_export($row, true)));\n\n        // Update the last edit date on this dataSet\n        $this->lastDataEdit = Carbon::now()->format('U');\n\n        // Params\n        $params = ['id' => $rowId];\n\n        // Generate a SQL statement\n        $sql = 'UPDATE `dataset_' . $this->dataSetId . '` SET';\n\n        $i = 0;\n        foreach ($row as $key => $value) {\n            $i++;\n            $sql .= ' `' . $key . '` = :value' . $i . ',';\n            $params['value' . $i] = $value;\n        }\n\n        $sql = rtrim($sql, ',');\n\n        $sql .= ' WHERE `id` = :id ';\n\n\n\n        $this->getStore()->update($sql, $params);\n    }\n\n    /**\n     * Delete Row\n     * @param $rowId\n     */\n    public function deleteRow($rowId)\n    {\n        $this->lastDataEdit = Carbon::now()->format('U');\n\n        $this->getStore()->update('DELETE FROM `dataset_' . $this->dataSetId . '` WHERE id = :id', [\n            'id' => $rowId\n        ]);\n    }\n\n    /**\n     * Copy Row\n     * @param int $dataSetIdSource\n     * @param int $dataSetIdTarget\n     */\n    public function copyRows($dataSetIdSource, $dataSetIdTarget)\n    {\n        $this->getStore()->insert('INSERT INTO `dataset_' . $dataSetIdTarget . '`  SELECT * FROM `dataset_' . $dataSetIdSource . '` ' ,[]);\n    }\n\n    /**\n     * Clear DataSet cache\n     */\n    public function clearCache()\n    {\n        $this->getLog()->debug('Force sync detected, clear cache for remote dataSet ID ' . $this->dataSetId);\n        $this->pool->deleteItem('/dataset/cache/' . $this->dataSetId);\n    }\n}\n", "<?php\n/*\n * Copyright (c) 2022 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nnamespace Xibo\\Factory;\n\n\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Xibo\\Entity\\User;\nuse Xibo\\Helper\\SanitizerService;\nuse Xibo\\Service\\BaseDependenciesService;\nuse Xibo\\Service\\LogServiceInterface;\nuse Xibo\\Storage\\StorageServiceInterface;\n\n/**\n * Class BaseFactory\n * @package Xibo\\Factory\n */\nclass BaseFactory\n{\n    /**\n     * Count records last query\n     * @var int\n     */\n    protected $_countLast = 0;\n\n    /**\n     * @var StorageServiceInterface\n     */\n    private $store;\n\n    /**\n     * @var LogServiceInterface\n     */\n    private $log;\n\n    /**\n     * @var SanitizerService\n     */\n    private $sanitizerService;\n\n    /**\n     * @var User\n     */\n    private $user;\n\n    /**\n     * @var UserFactory\n     */\n    private $userFactory;\n\n    /**\n     * @var BaseDependenciesService\n     */\n    private $baseDependenciesService;\n\n    /**\n     * @param BaseDependenciesService $baseDependenciesService\n     */\n    public function useBaseDependenciesService(BaseDependenciesService $baseDependenciesService)\n    {\n        $this->baseDependenciesService = $baseDependenciesService;\n    }\n\n    /**\n     * Set Acl Dependencies\n     * @param User $user\n     * @param UserFactory $userFactory\n     * @return $this\n     */\n    public function setAclDependencies($user, $userFactory)\n    {\n        $this->user = $user;\n        $this->userFactory = $userFactory;\n        return $this;\n    }\n\n    /**\n     * Get Store\n     * @return StorageServiceInterface\n     */\n    protected function getStore()\n    {\n        return $this->baseDependenciesService->getStore();\n    }\n\n    /**\n     * Get Log\n     * @return LogServiceInterface\n     */\n    protected function getLog()\n    {\n        return $this->baseDependenciesService->getLogger();\n    }\n\n    /**\n     * @return SanitizerService\n     */\n    protected function getSanitizerService()\n    {\n        return $this->baseDependenciesService->getSanitizer();\n    }\n\n    /**\n     * Get Sanitizer\n     * @param $array\n     * @return \\Xibo\\Support\\Sanitizer\\SanitizerInterface\n     */\n    protected function getSanitizer($array)\n    {\n        return $this->getSanitizerService()->getSanitizer($array);\n    }\n\n    /**\n     * @return \\Xibo\\Support\\Validator\\ValidatorInterface\n     */\n    protected function getValidator()\n    {\n        return $this->getSanitizerService()->getValidator();\n    }\n\n    /**\n     * Get User\n     * @return User\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * Get User Factory\n     * @return UserFactory\n     */\n    public function getUserFactory()\n    {\n        return $this->userFactory;\n    }\n\n    /**\n     * @return \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface\n     */\n    public function getDispatcher(): EventDispatcherInterface\n    {\n        return $this->baseDependenciesService->getDispatcher();\n    }\n\n    /**\n     * Count of records returned for the last query.\n     * @return int\n     */\n    public function countLast()\n    {\n        return $this->_countLast;\n    }\n\n    /**\n     * View Permission SQL\n     * @param $entity\n     * @param $sql\n     * @param $params\n     * @param $idColumn\n     * @param null $ownerColumn\n     * @param array $filterBy\n     * @throws \\Xibo\\Support\\Exception\\NotFoundException\n     */\n    public function viewPermissionSql(\n        $entity,\n        &$sql,\n        &$params,\n        $idColumn,\n        $ownerColumn = null,\n        $filterBy = [],\n        $permissionFolderIdColumn = null,\n        $isPerformDoohCheck = true\n    ) {\n        $parsedBody = $this->getSanitizer($filterBy);\n        $checkUserId = $parsedBody->getInt('userCheckUserId');\n\n        if ($checkUserId !== null) {\n            $this->getLog()->debug(sprintf('Checking permissions against a specific user: %d', $checkUserId));\n            $user = $this->getUserFactory()->getById($checkUserId);\n        }\n        else {\n            $user = $this->getUser();\n\n            if ($user !== null)\n                $this->getLog()->debug(sprintf('Checking permissions against the logged in user: ID: %d, Name: %s, UserType: %d', $user->userId, $user->userName, $user->userTypeId));\n        }\n\n        $permissionSql = '';\n\n        // Has the user check been disabled? 0 = no it hasn't\n        $performUserCheck = $parsedBody->getCheckbox('disableUserCheck') == 0;\n\n        // Check the whether we need to restrict to the DOOH user.\n        // we only do this for entities which have an owner, and only if the user check hasn't been disabled.\n        if ($ownerColumn !== null && $performUserCheck && $isPerformDoohCheck) {\n            if (($user->userTypeId == 1 && $user->showContentFrom == 2) || $user->userTypeId == 4) {\n                // DOOH only\n                $permissionSql .= ' AND ' . $ownerColumn . ' IN (SELECT userId FROM user WHERE userTypeId = 4) ';\n            } elseif ($user->showContentFrom != 3) {\n                // Standard only\n                $permissionSql .= ' AND ' . $ownerColumn . ' IN (SELECT userId FROM user WHERE userTypeId <> 4) ';\n            }\n        }\n\n        if ($performUserCheck && !$user->isSuperAdmin()) {\n            $permissionSql .= '\n              AND (' . $idColumn . ' IN (\n                SELECT `permission`.objectId\n                  FROM `permission`\n                    INNER JOIN `permissionentity`\n                        ON `permissionentity`.entityId = `permission`.entityId\n                    INNER JOIN `group`\n                        ON `group`.groupId = `permission`.groupId\n                    INNER JOIN `lkusergroup`\n                        ON `lkusergroup`.groupId = `group`.groupId\n                    INNER JOIN `user`\n                        ON lkusergroup.UserID = `user`.UserID\n                 WHERE `permissionentity`.entity = :permissionEntity\n                    AND `user`.userId = :currentUserId\n                    AND `permission`.view = 1\n                 UNION ALL   \n                 SELECT `permission`.objectId\n                    FROM `permission`\n                        INNER JOIN `permissionentity`\n                            ON `permissionentity`.entityId = `permission`.entityId\n                        INNER JOIN `group`\n                            ON `group`.groupId = `permission`.groupId\n                    WHERE `permissionentity`.entity = :permissionEntity\n                        AND `group`.isEveryone = 1\n                        AND `permission`.view = 1\n              )\n            ';\n\n            $params['permissionEntity'] = $entity;\n            $params['currentUserId'] = $user->userId;\n\n            if ($ownerColumn != null) {\n                $permissionSql .= ' OR ' . $ownerColumn . ' = :currentUserId2';\n                $params['currentUserId2'] = $user->userId;\n            }\n\n            // Home folders (only for folder entity)\n            if ($entity === 'Xibo\\Entity\\Folder') {\n                $permissionSql .= ' OR folder.folderId = :permissionsHomeFolderId';\n                $permissionSql .= ' OR folder.permissionsFolderId = :permissionsHomeFolderId';\n                $params['permissionsHomeFolderId'] = $this->getUser()->homeFolderId;\n            }\n\n            // Group Admin?\n            if ($user->userTypeId == 2 && $ownerColumn != null) {\n                // OR the group admin and the owner of the media are in the same group\n                $permissionSql .= '\n                    OR (\n                        SELECT COUNT(lkUserGroupId)\n                          FROM `lkusergroup`\n                         WHERE userId = ' . $ownerColumn . '\n                            AND groupId IN (\n                                SELECT groupId\n                                  FROM `lkusergroup`\n                                 WHERE userId = :currentUserId3\n                            )\n                    ) > 0\n                ';\n\n                $params['currentUserId3'] = $user->userId;\n            }\n\n            if ($permissionFolderIdColumn != null) {\n                $permissionSql .= '\n                    OR ' . $permissionFolderIdColumn . ' IN (\n                        SELECT `permission`.objectId\n                            FROM `permission`\n                               INNER JOIN `permissionentity`\n                                 ON `permissionentity`.entityId = `permission`.entityId\n                               INNER JOIN `group`\n                                 ON `group`.groupId = `permission`.groupId\n                               INNER JOIN `lkusergroup`\n                                 ON `lkusergroup`.groupId = `group`.groupId\n                               INNER JOIN `user`\n                                 ON lkusergroup.UserID = `user`.UserID\n                            WHERE `permissionentity`.entity = :folderEntity\n                              AND `permission`.view = 1\n                              AND `user`.userId = :currentUserId\n                        UNION ALL   \n                         SELECT `permission`.objectId\n                            FROM `permission`\n                                INNER JOIN `permissionentity`\n                                    ON `permissionentity`.entityId = `permission`.entityId\n                                INNER JOIN `group`\n                                    ON `group`.groupId = `permission`.groupId\n                            WHERE `permissionentity`.entity = :folderEntity\n                                AND `group`.isEveryone = 1\n                                AND `permission`.view = 1\n                    )\n                ';\n\n                $params['folderEntity'] = 'Xibo\\Entity\\Folder';\n            }\n\n            $permissionSql .= ' )';\n\n            //$this->getLog()->debug('Permission SQL = %s', $permissionSql);\n        }\n\n        // Set out params\n        $sql = $sql . $permissionSql;\n    }\n\n    /**\n     * @param $variable\n     * @return array\n     */\n    protected function parseComparisonOperator($variable)\n    {\n        $operator = '=';\n        $allowedOperators = [\n            'less-than' => '<',\n            'greater-than' => '>',\n            'less-than-equal' => '<=',\n            'greater-than-equal' => '>='\n        ];\n\n        if (stripos($variable, '|') !== false) {\n            $variable = explode('|', $variable);\n\n            if (array_key_exists($variable[0], $allowedOperators)) {\n                $operator = $allowedOperators[$variable[0]];\n            }\n\n            $variable = $variable[1];\n        }\n\n        return [\n            'operator' => $operator,\n            'variable' => $variable\n        ];\n    }\n\n    /**\n     * Sets the name filter for all factories to use.\n     *\n     * @param string $tableName Table name\n     * @param string $tableColumn Column with the name\n     * @param array $terms An Array exploded by \",\" of the search names\n     * @param string $body Current SQL body passed by reference\n     * @param array $params Array of parameters passed by reference\n     * @param bool $useRegex flag to match against a regex pattern\n     */\n    public function nameFilter($tableName, $tableColumn, $terms, &$body, &$params, $useRegex = false, $logicalOperator = 'OR')\n    {\n        $i = 0;\n\n        $tableAndColumn = $tableName . '.' . $tableColumn;\n        // filter empty array elements, in an attempt to better handle spaces after `,`.\n        $filteredNames = array_filter($terms, function ($element) {\n            return is_string($element) && '' !== trim($element);\n        });\n\n        foreach ($filteredNames as $searchName) {\n            $i++;\n\n            // Trim/Sanitise\n            $searchName = trim($searchName);\n\n            // Discard any incompatible\n            if ($searchName === '-' || empty($searchName)) {\n                continue;\n            }\n\n            // Not like, or like?\n            if (substr($searchName, 0, 1) == '-') {\n                if ($i === 1) {\n                    $body .= ' AND ( '.$tableAndColumn.' NOT RLIKE (:search'.$i.') ';\n                } else {\n                    $body .= ' ' . $logicalOperator . ' '.$tableAndColumn.' NOT RLIKE (:search'.$i.') ';\n                }\n                $params['search' . $i] = $useRegex ? ltrim(($searchName), '-') : preg_quote(ltrim(($searchName), '-'));\n            } else {\n                if ($i === 1) {\n                    $body .= ' AND ( '.$tableAndColumn.' RLIKE (:search'.$i.') ';\n                } else {\n                    $body .= ' ' . $logicalOperator . ' '.$tableAndColumn.' RLIKE (:search'.$i.') ';\n                }\n                $params['search' . $i] = $useRegex ? $searchName : preg_quote($searchName);\n            }\n        }\n\n        if (!empty($filteredNames)) {\n            $body .= ' ) ';\n        }\n    }\n\n    /**\n     * @param array $tags An array of tags\n     * @param string $lkTagTable name of the lktag table\n     * @param string $lkTagTableIdColumn name of the id column in the lktag table\n     * @param string $idColumn name of the id column in main table\n     * @param string $logicalOperator AND or OR logical operator passed from Factory\n     * @param string $operator exactTags passed from factory, determines if the search is LIKE or =\n     * @param string $body Current SQL body passed by reference\n     * @param array $params Array of parameters passed by reference\n     */\n    public function tagFilter($tags, $lkTagTable, $lkTagTableIdColumn, $idColumn, $logicalOperator, $operator, &$body, &$params)\n    {\n        $i = 0;\n\n        foreach ($tags as $tag) {\n            $i++;\n\n            $tagV = explode('|', $tag);\n\n            // search tag without value\n            if (!isset($tagV[1])) {\n                if ($i == 1) {\n                    $body .= ' WHERE `tag` ' . $operator . ' :tags' . $i;\n                } else {\n                    $body .= ' OR ' . ' `tag` ' . $operator . ' :tags' . $i;\n                }\n\n                if ($operator === '=') {\n                    $params['tags' . $i] = $tag;\n                } else {\n                    $params['tags' . $i] = '%' . $tag . '%';\n                }\n                // search tag only by value\n            } elseif ($tagV[0] == '') {\n                if ($i == 1) {\n                    $body .= ' WHERE `value` ' . $operator . ' :value' . $i;\n                } else {\n                    $body .= ' OR ' . ' `value` ' . $operator . ' :value' . $i;\n                }\n\n                if ($operator === '=') {\n                    $params['value' . $i] = $tagV[1];\n                } else {\n                    $params['value' . $i] = '%' . $tagV[1] . '%';\n                }\n                // search tag by both tag and value\n            } else {\n                if ($i == 1) {\n                    $body .= ' WHERE `tag` ' . $operator . ' :tags' . $i .\n                        ' AND value ' . $operator . ' :value' . $i;\n                } else {\n                    $body .= ' OR ' . ' `tag` ' . $operator . ' :tags' . $i .\n                        ' AND value ' . $operator . ' :value' . $i;\n                }\n\n                if ($operator === '=') {\n                    $params['tags' . $i] = $tagV[0];\n                    $params['value' . $i] = $tagV[1];\n                } else {\n                    $params['tags' . $i] = '%' . $tagV[0] . '%';\n                    $params['value' . $i] = '%' . $tagV[1] . '%';\n                }\n            }\n        }\n\n        if ($logicalOperator === 'AND' && count($tags) > 1) {\n            $body .= ' GROUP BY ' . $lkTagTable . '.' . $idColumn . ' HAVING count(' . $lkTagTable .'.'. $lkTagTableIdColumn .') = ' . count($tags);\n        }\n\n        $body .= ' ) ';\n    }\n}\n", "<?php\n/*\n * Copyright (C) 2022 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nnamespace Xibo\\Factory;\n\nuse Xibo\\Entity\\Display;\nuse Xibo\\Entity\\User;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\DisplayNotifyServiceInterface;\nuse Xibo\\Support\\Exception\\NotFoundException;\n\n/**\n * Class DisplayFactory\n * @package Xibo\\Factory\n */\nclass DisplayFactory extends BaseFactory\n{\n    /** @var  DisplayNotifyServiceInterface */\n    private $displayNotifyService;\n\n    /**\n     * @var ConfigServiceInterface\n     */\n    private $config;\n\n    /**\n     * @var DisplayGroupFactory\n     */\n    private $displayGroupFactory;\n\n    /**\n     * @var DisplayProfileFactory\n     */\n    private $displayProfileFactory;\n\n    /** @var FolderFactory */\n    private $folderFactory;\n\n    /**\n     * Construct a factory\n     * @param User $user\n     * @param UserFactory $userFactory\n     * @param DisplayNotifyServiceInterface $displayNotifyService\n     * @param ConfigServiceInterface $config\n     * @param DisplayGroupFactory $displayGroupFactory\n     * @param DisplayProfileFactory $displayProfileFactory\n     * @param FolderFactory $folderFactory\n     */\n    public function __construct($user, $userFactory, $displayNotifyService, $config, $displayGroupFactory, $displayProfileFactory, $folderFactory)\n    {\n        $this->setAclDependencies($user, $userFactory);\n\n        $this->displayNotifyService = $displayNotifyService;\n        $this->config = $config;\n        $this->displayGroupFactory = $displayGroupFactory;\n        $this->displayProfileFactory = $displayProfileFactory;\n        $this->folderFactory = $folderFactory;\n    }\n\n    /**\n     * Get the Display Notify Service\n     * @return DisplayNotifyServiceInterface\n     */\n    public function getDisplayNotifyService()\n    {\n        return $this->displayNotifyService->init();\n    }\n\n    /**\n     * Create Empty Display Object\n     * @return Display\n     */\n    public function createEmpty()\n    {\n        return new Display(\n            $this->getStore(),\n            $this->getLog(),\n            $this->getDispatcher(),\n            $this->config,\n            $this->displayGroupFactory,\n            $this->displayProfileFactory,\n            $this,\n            $this->folderFactory\n        );\n    }\n\n    /**\n     * @param int $displayId\n     * @param bool|false $showTags\n     * @return Display\n     * @throws NotFoundException\n     */\n    public function getById($displayId, $showTags = false)\n    {\n        $displays = $this->query(null, ['disableUserCheck' => 1, 'displayId' => $displayId, 'showTags' => $showTags]);\n\n        if (count($displays) <= 0) {\n            throw new NotFoundException();\n        }\n\n        return $displays[0];\n    }\n\n    /**\n     * @param string $licence\n     * @return Display\n     * @throws NotFoundException\n     */\n    public function getByLicence($licence)\n    {\n        if (empty($licence)) {\n            throw new NotFoundException(__('Hardware key cannot be empty'));\n        }\n\n        $displays = $this->query(null, ['disableUserCheck' => 1, 'license' => $licence]);\n\n        if (count($displays) <= 0) {\n            throw new NotFoundException();\n        }\n\n        return $displays[0];\n    }\n\n    /**\n     * @param int $displayGroupId\n     * @return Display[]\n     * @throws NotFoundException\n     */\n    public function getByDisplayGroupId($displayGroupId)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'displayGroupId' => $displayGroupId]);\n    }\n\n    /**\n     * @param array $displayGroupIds\n     * @return Display[]\n     * @throws NotFoundException\n     */\n    public function getByDisplayGroupIds(array $displayGroupIds)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'displayGroupIds' => $displayGroupIds]);\n    }\n\n    /**\n     * @param array $sortOrder\n     * @param array $filterBy\n     * @return Display[]\n     * @throws NotFoundException\n     */\n    public function query($sortOrder = null, $filterBy = [])\n    {\n        $parsedBody = $this->getSanitizer($filterBy);\n\n        if ($sortOrder === null) {\n            $sortOrder = ['display'];\n        }\n\n        $newSortOrder = [];\n        foreach ($sortOrder as $sort) {\n            if ($sort == '`clientSort`') {\n                $newSortOrder[] = '`clientType`';\n                $newSortOrder[] = '`clientCode`';\n                $newSortOrder[] = '`clientVersion`';\n                continue;\n            }\n\n            if ($sort == '`clientSort` DESC') {\n                $newSortOrder[] = '`clientType` DESC';\n                $newSortOrder[] = '`clientCode` DESC';\n                $newSortOrder[] = '`clientVersion` DESC';\n                continue;\n            }\n\n            if ($sort == '`isCmsTransferInProgress`') {\n                $newSortOrder[] = '`newCmsAddress`';\n                continue;\n            }\n\n            if ($sort == '`isCmsTransferInProgress` DESC') {\n                $newSortOrder[] = '`newCmsAddress` DESC';\n                continue;\n            }\n            $newSortOrder[] = $sort;\n        }\n        $sortOrder = $newSortOrder;\n\n        // SQL function for ST_X/X and ST_Y/Y dependent on MySQL version\n        $version = $this->getStore()->getVersion();\n\n        $functionPrefix = ($version === null || version_compare($version, '5.6.1', '>=')) ? 'ST_' : '';\n\n        $entries = [];\n        $params = [];\n        $select = '\n              SELECT display.displayId,\n                  display.display,\n                  display.defaultLayoutId,\n                  display.displayTypeId,\n                  display.venueId,\n                  display.address,\n                  display.isMobile,\n                  display.languages,\n                  `display_types`.displayType,\n                  display.screenSize,\n                  display.isOutdoor,\n                  display.customId,\n                  display.costPerPlay,\n                  display.impressionsPerPlay,\n                  layout.layout AS defaultLayout,\n                  display.license,\n                  display.licensed,\n                  display.licensed AS currentlyLicensed,\n                  display.loggedIn,\n                  display.lastAccessed,\n                  display.auditingUntil,\n                  display.inc_schedule AS incSchedule,\n                  display.email_alert AS emailAlert,\n                  display.alert_timeout AS alertTimeout,\n                  display.clientAddress,\n                  display.mediaInventoryStatus,\n                  display.macAddress,\n                  display.macAddress AS currentMacAddress,\n                  display.lastChanged,\n                  display.numberOfMacAddressChanges,\n                  display.lastWakeOnLanCommandSent,\n                  display.wakeOnLan AS wakeOnLanEnabled,\n                  display.wakeOnLanTime,\n                  display.broadCastAddress,\n                  display.secureOn,\n                  display.cidr,\n                  ' . $functionPrefix . 'X(display.GeoLocation) AS latitude,\n                  ' . $functionPrefix . 'Y(display.GeoLocation) AS longitude,\n                  display.client_type AS clientType,\n                  display.client_version AS clientVersion,\n                  display.client_code AS clientCode,\n                  display.displayProfileId,\n                  display.screenShotRequested,\n                  display.storageAvailableSpace,\n                  display.storageTotalSpace,\n                  displaygroup.displayGroupId,\n                  displaygroup.description,\n                  displaygroup.bandwidthLimit,\n                  displaygroup.createdDt,\n                  displaygroup.modifiedDt,\n                  displaygroup.folderId,\n                  displaygroup.permissionsFolderId,\n                  displaygroup.ref1,\n                  displaygroup.ref2,\n                  displaygroup.ref3,\n                  displaygroup.ref4,\n                  displaygroup.ref5,\n                  `display`.xmrChannel,\n                  `display`.xmrPubKey,\n                  `display`.lastCommandSuccess, \n                  `display`.deviceName, \n                  `display`.timeZone,\n                  `display`.overrideConfig,\n                  `display`.newCmsAddress,\n                  `display`.newCmsKey,\n                  `display`.orientation,\n                  `display`.resolution,\n                  `display`.commercialLicence,\n                  `display`.teamViewerSerial,\n                  `display`.webkeySerial,\n                  `display`.lanIpAddress,\n                  (SELECT COUNT(*) FROM player_faults WHERE player_faults.displayId = display.displayId) AS countFaults,\n                  (SELECT GROUP_CONCAT(DISTINCT `group`.group)\n                    FROM `permission`\n                        INNER JOIN `permissionentity`\n                            ON `permissionentity`.entityId = permission.entityId\n                        INNER JOIN `group`\n                            ON `group`.groupId = `permission`.groupId\n                        WHERE entity = :entity\n                            AND objectId = `displaygroup`.displayGroupId\n                            AND view = 1\n                  ) AS groupsWithPermissions\n              ';\n\n        $params['entity'] = 'Xibo\\\\Entity\\\\DisplayGroup';\n\n        if ($parsedBody->getCheckbox('showTags') === 1) {\n            $select .= ',\n                   (\n                     SELECT GROUP_CONCAT(CONCAT_WS(\\'|\\', tag, value))\n                       FROM tag\n                       INNER JOIN lktagdisplaygroup\n                       ON lktagdisplaygroup.tagId = tag.tagId\n                       WHERE lktagdisplaygroup.displayGroupId = displaygroup.displayGroupID\n                       GROUP BY lktagdisplaygroup.displayGroupId\n                   ) as tags\n            ';\n        }\n\n        $body = '\n                FROM `display`\n                    INNER JOIN `lkdisplaydg`\n                    ON lkdisplaydg.displayid = display.displayId\n                    INNER JOIN `displaygroup`\n                    ON displaygroup.displaygroupid = lkdisplaydg.displaygroupid\n                        AND `displaygroup`.isDisplaySpecific = 1\n                    LEFT OUTER JOIN layout \n                    ON layout.layoutid = display.defaultlayoutid\n                    LEFT OUTER JOIN `display_types`\n                    ON `display_types`.displayTypeId = `display`.displayTypeId\n            ';\n\n        // Restrict to members of a specific display group\n        if ($parsedBody->getInt('displayGroupId') !== null) {\n            $body .= '\n                INNER JOIN `lkdisplaydg` othergroups\n                ON othergroups.displayId = `display`.displayId\n                    AND othergroups.displayGroupId = :displayGroupId\n            ';\n\n            $params['displayGroupId'] = $parsedBody->getInt('displayGroupId');\n        }\n\n        // Restrict to members of display groups\n        if ($parsedBody->getIntArray('displayGroupIds') !== null) {\n            $body .= '\n                INNER JOIN `lkdisplaydg` othergroups\n                ON othergroups.displayId = `display`.displayId\n                    AND othergroups.displayGroupId IN (0 \n            ';\n\n            $i = 0;\n            foreach ($parsedBody->getIntArray('displayGroupIds') as $displayGroupId) {\n                $i++;\n                $body .= ',:displayGroupId' . $i;\n                $params['displayGroupId' . $i] = $displayGroupId;\n            }\n            $body .= ')';\n        }\n\n        $body .= ' WHERE 1 = 1 ';\n\n        // Filter by map bound?\n        if ($parsedBody->getString('bounds') !== null) {\n            $coordinates = explode(',', $parsedBody->getString('bounds'));\n            $body .= ' AND IFNULL( ' . $functionPrefix . 'X(display.GeoLocation), ' . $this->config->getSetting('DEFAULT_LAT'). ')  BETWEEN ' . $coordinates['1'] . ' AND ' . $coordinates['3'] .\n                ' AND IFNULL( ' . $functionPrefix . 'Y(display.GeoLocation), ' . $this->config->getSetting('DEFAULT_LONG'). ')  BETWEEN  ' . $coordinates['0'] . ' AND ' . $coordinates['2'] . ' ';\n        }\n\n        // Filter by Display ID?\n        if ($parsedBody->getInt('displayId') !== null) {\n            $body .= ' AND display.displayid = :displayId ';\n            $params['displayId'] = $parsedBody->getInt('displayId');\n        }\n\n        // Display Profile\n        if ($parsedBody->getInt('displayProfileId') !== null) {\n            if ($parsedBody->getInt('displayProfileId') == -1) {\n                $body .= ' AND IFNULL(displayProfileId, 0) = 0 ';\n            } else {\n                $displayProfileSelected = $this->displayProfileFactory->getById($parsedBody->getInt('displayProfileId'));\n                $displayProfileDefault = $this->displayProfileFactory->getDefaultByType($displayProfileSelected->type);\n\n                $body .= ' AND (`display`.displayProfileId = :displayProfileId OR (IFNULL(displayProfileId, :displayProfileDefaultId) = :displayProfileId AND display.client_type = :displayProfileType ) ) ';\n\n                $params['displayProfileId'] = $parsedBody->getInt('displayProfileId');\n                $params['displayProfileDefaultId'] = $displayProfileDefault->displayProfileId;\n                $params['displayProfileType'] = $displayProfileDefault->type;\n            }\n        }\n\n        // Filter by Wake On LAN\n        if ($parsedBody->getInt('wakeOnLan') !== null) {\n            $body .= ' AND display.wakeOnLan = :wakeOnLan ';\n            $params['wakeOnLan'] = $parsedBody->getInt('wakeOnLan');\n        }\n\n        // Filter by Licence?\n        if ($parsedBody->getString('license') !== null) {\n            $body .= ' AND display.license = :license ';\n            $params['license'] = $parsedBody->getString('license');\n        }\n\n        // Filter by authorised?\n        if ($parsedBody->getInt('authorised', ['default' => -1]) != -1) {\n            $body .= ' AND display.licensed = :authorised ';\n            $params['authorised'] = $parsedBody->getInt('authorised');\n        }\n\n        // Filter by Display Name?\n        if ($parsedBody->getString('display') != null) {\n            $terms = explode(',', $parsedBody->getString('display'));\n            $logicalOperator = $parsedBody->getString('logicalOperatorName', ['default' => 'OR']);\n            $this->nameFilter(\n                'display',\n                'display',\n                $terms,\n                $body,\n                $params,\n                ($parsedBody->getCheckbox('useRegexForName') == 1),\n                $logicalOperator\n            );\n        }\n\n        if ($parsedBody->getString('macAddress') != '') {\n            $body .= ' AND display.macaddress LIKE :macAddress ';\n            $params['macAddress'] = '%' . $parsedBody->getString('macAddress') . '%';\n        }\n\n        if ($parsedBody->getString('clientAddress') != '') {\n            $body .= ' AND display.clientaddress LIKE :clientAddress ';\n            $params['clientAddress'] = '%' . $parsedBody->getString('clientAddress') . '%';\n        }\n\n        if ($parsedBody->getString('clientVersion') != '') {\n            $body .= ' AND display.client_version LIKE :clientVersion ';\n            $params['clientVersion'] = '%' . $parsedBody->getString('clientVersion') . '%';\n        }\n\n        if ($parsedBody->getString('clientType') != '') {\n            $body .= ' AND display.client_type = :clientType ';\n            $params['clientType'] = $parsedBody->getString('clientType');\n        }\n\n        if ($parsedBody->getString('clientCode') != '') {\n            $body .= ' AND display.client_code LIKE :clientCode ';\n            $params['clientCode'] = '%' . $parsedBody->getString('clientCode') . '%';\n        }\n\n        if ($parsedBody->getString('customId') != '') {\n            $body .= ' AND display.customId LIKE :customId ';\n            $params['customId'] = '%' . $parsedBody->getString('customId') . '%';\n        }\n\n        if ($parsedBody->getString('orientation', $filterBy) != '') {\n            $body .= ' AND display.orientation = :orientation ';\n            $params['orientation'] = $parsedBody->getString('orientation', $filterBy);\n        }\n\n        if ($parsedBody->getInt('mediaInventoryStatus', $filterBy) != '') {\n            if ($parsedBody->getInt('mediaInventoryStatus', $filterBy) === -1) {\n                $body .= ' AND display.mediaInventoryStatus <> 1 ';\n            } else {\n                $body .= ' AND display.mediaInventoryStatus = :mediaInventoryStatus ';\n                $params['mediaInventoryStatus'] = $parsedBody->getInt('mediaInventoryStatus');\n            }\n        }\n\n        if ($parsedBody->getInt('loggedIn', ['default' => -1]) != -1) {\n            $body .= ' AND display.loggedIn = :loggedIn ';\n            $params['loggedIn'] = $parsedBody->getInt('loggedIn');\n        }\n\n        if ($parsedBody->getDate('lastAccessed', ['dateFormat' => 'U']) !== null) {\n            $body .= ' AND display.lastAccessed > :lastAccessed ';\n            $params['lastAccessed'] = $parsedBody->getDate('lastAccessed', ['dateFormat' => 'U'])->format('U');\n        }\n\n        // Exclude a group?\n        if ($parsedBody->getInt('exclude_displaygroupid') !== null) {\n            $body .= \" AND display.DisplayID NOT IN \";\n            $body .= \"       (SELECT display.DisplayID \";\n            $body .= \"       FROM    display \";\n            $body .= \"               INNER JOIN lkdisplaydg \";\n            $body .= \"               ON      lkdisplaydg.DisplayID = display.DisplayID \";\n            $body .= \"   WHERE  lkdisplaydg.DisplayGroupID   = :excludeDisplayGroupId \";\n            $body .= \"       )\";\n            $params['excludeDisplayGroupId'] = $parsedBody->getInt('exclude_displaygroupid');\n        }\n\n        // Media ID - direct assignment\n        if ($parsedBody->getInt('mediaId') !== null) {\n            $body .= '\n                AND display.displayId IN (\n                    SELECT `lkdisplaydg`.displayId\n                       FROM `lkmediadisplaygroup`\n                        INNER JOIN `lkdgdg`\n                        ON `lkdgdg`.parentId = `lkmediadisplaygroup`.displayGroupId\n                        INNER JOIN `lkdisplaydg`\n                        ON lkdisplaydg.DisplayGroupID = `lkdgdg`.childId\n                     WHERE `lkmediadisplaygroup`.mediaId = :mediaId\n                    UNION\n                    SELECT `lkdisplaydg`.displayId\n                      FROM `lklayoutdisplaygroup`\n                        INNER JOIN `lkdgdg`\n                        ON `lkdgdg`.parentId = `lklayoutdisplaygroup`.displayGroupId\n                        INNER JOIN `lkdisplaydg`\n                        ON lkdisplaydg.DisplayGroupID = `lkdgdg`.childId\n                     WHERE `lklayoutdisplaygroup`.layoutId IN (\n                         SELECT `region`.layoutId\n                              FROM `lkwidgetmedia`\n                               INNER JOIN `widget`\n                               ON `widget`.widgetId = `lkwidgetmedia`.widgetId\n                               INNER JOIN `playlist`\n                               ON `playlist`.playlistId = `widget`.playlistId\n                               INNER JOIN `region`\n                               ON `region`.regionId = `playlist`.regionId\n                               INNER JOIN layout\n                               ON layout.LayoutID = region.layoutId\n                             WHERE lkwidgetmedia.mediaId = :mediaId\n                            UNION\n                            SELECT `layout`.layoutId\n                              FROM `layout`\n                             WHERE `layout`.backgroundImageId = :mediaId\n                        )\n                )\n            ';\n\n            $params['mediaId'] = $parsedBody->getInt('mediaId');\n        }\n\n        // Tags\n        if ($parsedBody->getString('tags') != '') {\n            $tagFilter = $parsedBody->getString('tags');\n\n            if (trim($tagFilter) === '--no-tag') {\n                $body .= ' AND `displaygroup`.displaygroupId NOT IN (\n                    SELECT `lktagdisplaygroup`.displaygroupId\n                     FROM tag\n                        INNER JOIN `lktagdisplaygroup`\n                        ON `lktagdisplaygroup`.tagId = tag.tagId\n                    )\n                ';\n            } else {\n                $operator = $parsedBody->getCheckbox('exactTags') == 1 ? '=' : 'LIKE';\n                $logicalOperator = $parsedBody->getString('logicalOperator', ['default' => 'OR']);\n                $body .= ' AND `displaygroup`.displaygroupId IN (\n                SELECT `lktagdisplaygroup`.displaygroupId\n                  FROM tag\n                    INNER JOIN `lktagdisplaygroup`\n                    ON `lktagdisplaygroup`.tagId = tag.tagId\n                ';\n\n                $tags = explode(',', $tagFilter);\n                $this->tagFilter($tags, 'lktagdisplaygroup', 'lkTagDisplayGroupId', 'displayGroupId', $logicalOperator, $operator, $body, $params);\n            }\n        }\n\n        // run the special query to help sort by displays already assigned to this display group, we want to run it only if we're sorting by member column.\n        if ($parsedBody->getInt('displayGroupIdMembers') !== null && ($sortOrder == ['`member`'] || $sortOrder == ['`member` DESC'] )) {\n            $members = [];\n            $displayGroupId = $parsedBody->getInt('displayGroupIdMembers');\n\n            foreach ($this->getStore()->select($select . $body, $params) as $row) {\n                $displayId = $this->getSanitizer($row)->getInt('displayId');\n\n                if ($this->getStore()->exists(\n                    'SELECT display.display, display.displayId, displaygroup.displayGroupId\n                                                    FROM display\n                                                      INNER JOIN `lkdisplaydg` \n                                                          ON lkdisplaydg.displayId = `display`.displayId \n                                                          AND lkdisplaydg.displayGroupId = :displayGroupId \n                                                          AND lkdisplaydg.displayId = :displayId\n                                                      INNER JOIN `displaygroup` \n                                                          ON displaygroup.displaygroupid = lkdisplaydg.displaygroupid\n                                                          AND `displaygroup`.isDisplaySpecific = 0',\n                    [\n                        'displayGroupId' => $displayGroupId,\n                        'displayId' => $displayId\n                    ]\n                )) {\n                    $members[] = $displayId;\n                }\n            }\n        }\n\n        // filter by commercial licence\n        if ($parsedBody->getInt('commercialLicence') !== null) {\n            $body .= ' AND display.commercialLicence = :commercialLicence ';\n            $params['commercialLicence'] = $parsedBody->getInt('commercialLicence');\n        }\n\n        if ($parsedBody->getInt('folderId') !== null) {\n            $body .= ' AND displaygroup.folderId = :folderId ';\n            $params['folderId'] = $parsedBody->getInt('folderId');\n        }\n\n        $this->viewPermissionSql('Xibo\\Entity\\DisplayGroup', $body, $params, 'displaygroup.displayGroupId', null, $filterBy, '`displaygroup`.permissionsFolderId');\n\n        // Sorting?\n        $order = '';\n\n        if (isset($members) && $members != []) {\n            $sqlOrderMembers = 'ORDER BY FIELD(display.displayId,' . implode(',', $members) . ')';\n\n            foreach ($sortOrder as $sort) {\n                if ($sort == '`member`') {\n                    $order .= $sqlOrderMembers;\n                    continue;\n                }\n\n                if ($sort == '`member` DESC') {\n                    $order .= $sqlOrderMembers . ' DESC';\n                    continue;\n                }\n            }\n        }\n\n        if (is_array($sortOrder) && ($sortOrder != ['`member`'] && $sortOrder != ['`member` DESC'] )) {\n            $order .= 'ORDER BY ' . implode(',', $sortOrder);\n        }\n\n        $limit = '';\n        // Paging\n        if ($filterBy !== null && $parsedBody->getInt('start') !== null && $parsedBody->getInt('length') !== null) {\n            $limit = ' LIMIT ' . $parsedBody->getInt('start', ['default' => 0]) . ', ' . $parsedBody->getInt('length', ['default' => 10]);\n        }\n\n        $sql = $select . $body . $order . $limit;\n\n        foreach ($this->getStore()->select($sql, $params) as $row) {\n            $display = $this->createEmpty()->hydrate($row, [\n                'intProperties' => [\n                    'auditingUntil',\n                    'wakeOnLanEnabled',\n                    'numberOfMacAddressChanges',\n                    'loggedIn',\n                    'incSchedule',\n                    'licensed',\n                    'lastAccessed',\n                    'emailAlert',\n                    'alertTimeout',\n                    'mediaInventoryStatus',\n                    'clientCode',\n                    'screenShotRequested',\n                    'lastCommandSuccess',\n                    'bandwidthLimit',\n                    'countFaults',\n                    'isMobile',\n                    'isOutdoor'\n                ],\n                'stringProperties' => ['customId']\n            ]);\n            $display->overrideConfig = ($display->overrideConfig == '') ? [] : json_decode($display->overrideConfig, true);\n            $entries[] = $display;\n        }\n\n        // Paging\n        if ($limit != '' && count($entries) > 0) {\n            unset($params['entity']);\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total ' . $body, $params);\n            $this->_countLast = intval($results[0]['total']);\n        }\n\n        return $entries;\n    }\n}\n", "<?php\n/*\n * Copyright (C) 2023 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Xibo\\Factory;\n\nuse Carbon\\Carbon;\nuse Stash\\Invalidation;\nuse Stash\\Pool;\nuse Xibo\\Entity\\DataSet;\nuse Xibo\\Entity\\DataSetColumn;\nuse Xibo\\Entity\\Folder;\nuse Xibo\\Entity\\Layout;\nuse Xibo\\Entity\\Playlist;\nuse Xibo\\Entity\\Region;\nuse Xibo\\Entity\\User;\nuse Xibo\\Entity\\Widget;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\MediaServiceInterface;\nuse Xibo\\Support\\Exception\\DuplicateEntityException;\nuse Xibo\\Support\\Exception\\GeneralException;\nuse Xibo\\Support\\Exception\\InvalidArgumentException;\nuse Xibo\\Support\\Exception\\NotFoundException;\n\n/**\n * Class LayoutFactory\n * @package Xibo\\Factory\n */\nclass LayoutFactory extends BaseFactory\n{\n    /**\n     * @var ConfigServiceInterface\n     */\n    private $config;\n\n    /** @var \\Stash\\Interfaces\\PoolInterface */\n    private $pool;\n\n    /**\n     * @var PermissionFactory\n     */\n    private $permissionFactory;\n\n    /**\n     * @var RegionFactory\n     */\n    private $regionFactory;\n\n    /**\n     * @var TagFactory\n     */\n    private $tagFactory;\n\n    /**\n     * @var CampaignFactory\n     */\n    private $campaignFactory;\n\n    /**\n     * @var MediaFactory\n     */\n    private $mediaFactory;\n\n    /**\n     * @var ModuleFactory\n     */\n    private $moduleFactory;\n\n    /**\n     * @var ResolutionFactory\n     */\n    private $resolutionFactory;\n\n    /**\n     * @var WidgetFactory\n     */\n    private $widgetFactory;\n\n    /**\n     * @var WidgetOptionFactory\n     */\n    private $widgetOptionFactory;\n\n    /** @var  WidgetAudioFactory */\n    private $widgetAudioFactory;\n\n    /** @var  PlaylistFactory */\n    private $playlistFactory;\n\n    /** @var ActionFactory */\n    private $actionFactory;\n\n    /** @var FolderFactory */\n    private $folderFactory;\n\n    /**\n     * Construct a factory\n     * @param User $user\n     * @param UserFactory $userFactory\n     * @param ConfigServiceInterface $config\n     * @param PermissionFactory $permissionFactory\n     * @param RegionFactory $regionFactory\n     * @param TagFactory $tagFactory\n     * @param CampaignFactory $campaignFactory\n     * @param MediaFactory $mediaFactory\n     * @param ModuleFactory $moduleFactory\n     * @param ResolutionFactory $resolutionFactory\n     * @param WidgetFactory $widgetFactory\n     * @param WidgetOptionFactory $widgetOptionFactory\n     * @param PlaylistFactory $playlistFactory\n     * @param WidgetAudioFactory $widgetAudioFactory\n     * @param ActionFactory $actionFactory\n     * @param FolderFactory $folderFactory\n     */\n    public function __construct(\n        $user,\n        $userFactory,\n        $config,\n        $permissionFactory,\n        $regionFactory,\n        $tagFactory,\n        $campaignFactory,\n        $mediaFactory,\n        $moduleFactory,\n        $resolutionFactory,\n        $widgetFactory,\n        $widgetOptionFactory,\n        $playlistFactory,\n        $widgetAudioFactory,\n        $actionFactory,\n        $folderFactory\n    ) {\n        $this->setAclDependencies($user, $userFactory);\n        $this->config = $config;\n        $this->permissionFactory = $permissionFactory;\n        $this->regionFactory = $regionFactory;\n        $this->tagFactory = $tagFactory;\n        $this->campaignFactory = $campaignFactory;\n        $this->mediaFactory = $mediaFactory;\n        $this->moduleFactory = $moduleFactory;\n        $this->resolutionFactory = $resolutionFactory;\n        $this->widgetFactory = $widgetFactory;\n        $this->widgetOptionFactory = $widgetOptionFactory;\n        $this->playlistFactory = $playlistFactory;\n        $this->widgetAudioFactory = $widgetAudioFactory;\n        $this->actionFactory = $actionFactory;\n        $this->folderFactory = $folderFactory;\n    }\n\n    /**\n     * Create an empty layout\n     * @return Layout\n     */\n    public function createEmpty()\n    {\n        return new Layout(\n            $this->getStore(),\n            $this->getLog(),\n            $this->getDispatcher(),\n            $this->config,\n            $this->permissionFactory,\n            $this->regionFactory,\n            $this->tagFactory,\n            $this->campaignFactory,\n            $this,\n            $this->mediaFactory,\n            $this->moduleFactory,\n            $this->playlistFactory,\n            $this->actionFactory,\n            $this->folderFactory\n        );\n    }\n\n    /**\n     * Create Layout from Resolution\n     * @param int $resolutionId\n     * @param int $ownerId\n     * @param string $name\n     * @param string $description\n     * @param string|array $tags\n     * @param string $code\n     * @param bool $addRegion\n     * @return Layout\n     *\n     * @throws GeneralException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function createFromResolution($resolutionId, $ownerId, $name, $description, $tags, $code, $addRegion = true)\n    {\n        $resolution = $this->resolutionFactory->getById($resolutionId);\n\n        // Create a new Layout\n        $layout = $this->createEmpty();\n        $layout->width = $resolution->width;\n        $layout->height = $resolution->height;\n        $layout->orientation = ($layout->width >= $layout->height) ? 'landscape' : 'portrait';\n\n        // Set the properties\n        $layout->layout = $name;\n        $layout->description = $description;\n        $layout->backgroundzIndex = 0;\n        $layout->backgroundColor = '#000';\n        $layout->code = $code;\n\n        // Set the owner\n        $layout->setOwner($ownerId);\n\n        // Create some tags\n        if (is_array($tags)) {\n            $layout->tags = $tags;\n        } else {\n            $layout->tags = $this->tagFactory->tagsFromString($tags);\n        }\n\n        // Add a blank, full screen region\n        if ($addRegion) {\n            $layout->regions[] = $this->regionFactory->create(\n                $ownerId,\n                $name . '-1',\n                $layout->width,\n                $layout->height,\n                0,\n                0\n            );\n        }\n\n        return $layout;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Layout $layout\n     * @param int $width\n     * @param int $height\n     * @param int $top\n     * @param int $left\n     * @return \\Xibo\\Entity\\Layout\n     * @throws \\Xibo\\Support\\Exception\\InvalidArgumentException\n     */\n    public function addRegion(Layout $layout, int $width, int $height, int $top, int $left): Layout\n    {\n        $layout->regions[] = $this->regionFactory->create(\n            $layout->ownerId,\n            $layout->layout . '-' . count($layout->regions),\n            $width,\n            $height,\n            $top,\n            $left\n        );\n\n        return $layout;\n    }\n\n    /**\n     * Load a layout by its ID\n     * @param int $layoutId\n     * @return Layout The Layout\n     * @throws NotFoundException\n     */\n    public function loadById($layoutId)\n    {\n        // Get the layout\n        $layout = $this->getById($layoutId);\n        // Load the layout\n        $layout->load();\n\n        return $layout;\n    }\n\n    /**\n     * Loads only the layout information\n     * @param int $layoutId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getById($layoutId)\n    {\n        if ($layoutId == 0) {\n            throw new NotFoundException(__('LayoutId is 0'));\n        }\n\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'layoutId' => $layoutId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get CampaignId from layout history\n     * @param int $layoutId\n     * @return int campaignId\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function getCampaignIdFromLayoutHistory($layoutId)\n    {\n        if ($layoutId == null) {\n            throw new InvalidArgumentException(__('Invalid Input'), 'layoutId');\n        }\n\n        $row = $this->getStore()->select('SELECT campaignId FROM `layouthistory` WHERE layoutId = :layoutId LIMIT 1', ['layoutId' => $layoutId]);\n\n        if (count($row) <= 0) {\n            throw new NotFoundException(__('Layout does not exist'));\n        }\n\n        return intval($row[0]['campaignId']);\n    }\n\n\n    /**\n     * Get layout by layout history\n     * @param int $layoutId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByLayoutHistory($layoutId)\n    {\n        // Get a Layout by its Layout HistoryId\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'layoutHistoryId' => $layoutId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get latest layoutId by CampaignId from layout history\n     * @param int campaignId\n     * @return int layoutId\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function getLatestLayoutIdFromLayoutHistory($campaignId)\n    {\n        if ($campaignId == null) {\n            throw new InvalidArgumentException(__('Invalid Input'), 'campaignId');\n        }\n\n        $row = $this->getStore()->select('SELECT MAX(layoutId) AS layoutId FROM `layouthistory` WHERE campaignId = :campaignId  ', ['campaignId' => $campaignId]);\n\n        if (count($row) <= 0) {\n            throw new NotFoundException(__('Layout does not exist'));\n        }\n\n        // Set our Layout ID\n        return intval($row[0]['layoutId']);\n    }\n\n    /**\n     * Loads only the layout information\n     * @param int $layoutId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByParentId($layoutId)\n    {\n        if ($layoutId == 0) {\n            throw new NotFoundException();\n        }\n\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'parentId' => $layoutId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get a Layout by its Layout Specific Campaign OwnerId\n     * @param int $campaignId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByParentCampaignId($campaignId)\n    {\n        if ($campaignId == 0)\n            throw new NotFoundException();\n\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'ownerCampaignId' => $campaignId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get by OwnerId\n     * @param int $ownerId\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByOwnerId($ownerId)\n    {\n        return $this->query(null, array('userId' => $ownerId, 'excludeTemplates' => -1, 'retired' => -1, 'showDrafts' => 1));\n    }\n\n    /**\n     * Get by CampaignId\n     * @param int $campaignId\n     * @param bool $permissionsCheck Should we check permissions?\n     * @param bool $includeDrafts Should we include draft Layouts in the results?\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByCampaignId($campaignId, $permissionsCheck = true, $includeDrafts = false)\n    {\n        return $this->query(['displayOrder'], [\n            'campaignId' => $campaignId,\n            'excludeTemplates' => -1,\n            'retired' => -1,\n            'disableUserCheck' => $permissionsCheck ? 0 : 1,\n            'showDrafts' => $includeDrafts ? 1 : 0\n        ]);\n    }\n\n    /**\n     * Get by RegionId\n     * @param int $regionId\n     * @param bool $permissionsCheck Should we check permissions?\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByRegionId($regionId, $permissionsCheck = true)\n    {\n        $layouts = $this->query(['displayOrder'], [\n            'regionId' => $regionId,\n            'excludeTemplates' => -1,\n            'retired' => -1,\n            'disableUserCheck' => $permissionsCheck ? 0 : 1,\n            'showDrafts' => 1\n        ]);\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get by Display Group Id\n     * @param int $displayGroupId\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByDisplayGroupId($displayGroupId)\n    {\n        if ($displayGroupId == null) {\n            return [];\n        }\n\n        return $this->query(null, ['disableUserCheck' => 1, 'displayGroupId' => $displayGroupId]);\n    }\n\n    /**\n     * Get by Background Image Id\n     * @param int $backgroundImageId\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByBackgroundImageId($backgroundImageId)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'backgroundImageId' => $backgroundImageId, 'showDrafts' => 1]);\n    }\n\n    /**\n     * @param string $tag\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByTag($tag)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'tags' => $tag, 'exactTags' => 1]);\n    }\n\n    /**\n     * Get by Code identifier\n     * @param string $code\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByCode($code)\n    {\n        $layouts = $this->query(null, ['disableUserCheck' => 1, 'code' => $code, 'excludeTemplates' => -1, 'retired' => -1]);\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Load a layout by its XLF\n     * @param string $layoutXlf\n     * @param null $layout\n     * @return Layout\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function loadByXlf($layoutXlf, $layout = null)\n    {\n        $this->getLog()->debug('Loading Layout by XLF');\n\n        // New Layout\n        if ($layout == null) {\n            $layout = $this->createEmpty();\n        }\n\n        // Get a list of modules for us to use\n        $modules = $this->moduleFactory->get();\n\n        // Parse the XML and fill in the details for this layout\n        $document = new \\DOMDocument();\n        if ($document->loadXML($layoutXlf) === false) {\n            throw new InvalidArgumentException(__('Layout import failed, invalid xlf supplied'));\n        }\n\n        $layout->schemaVersion = (int)$document->documentElement->getAttribute('schemaVersion');\n        $layout->width = $document->documentElement->getAttribute('width');\n        $layout->height = $document->documentElement->getAttribute('height');\n        $layout->backgroundColor = $document->documentElement->getAttribute('bgcolor');\n        $layout->backgroundzIndex = (int)$document->documentElement->getAttribute('zindex');\n\n        // Xpath to use when getting media\n        $xpath = new \\DOMXPath($document);\n\n        // Populate Region Nodes\n        foreach ($document->getElementsByTagName('region') as $regionNode) {\n            /* @var \\DOMElement $regionNode */\n            $this->getLog()->debug('Found Region');\n\n            // Get the ownerId\n            $regionOwnerId = $regionNode->getAttribute('userId');\n            if ($regionOwnerId == null) {\n                $regionOwnerId = $layout->ownerId;\n            }\n            // Create the region\n            $region = $this->regionFactory->create(\n                $regionOwnerId,\n                $regionNode->getAttribute('name'),\n                (double)$regionNode->getAttribute('width'),\n                (double)$regionNode->getAttribute('height'),\n                (double)$regionNode->getAttribute('top'),\n                (double)$regionNode->getAttribute('left'),\n                (int)$regionNode->getAttribute('zindex')\n            );\n\n            // Use the regionId locally to parse the rest of the XLF\n            $region->tempId = $regionNode->getAttribute('id');\n\n            // Set the region name if empty\n            if ($region->name == '') {\n                $region->name = count($layout->regions) + 1;\n                // make sure we have a string as the region name, otherwise sanitizer will get confused.\n                $region->name = (string)$region->name;\n            }\n            // Populate Playlists (XLF doesn't contain any playlists)\n            $playlist = $this->playlistFactory->create($region->name, $regionOwnerId);\n\n            // Populate region options.\n            foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/options') as $regionOptionsNode) {\n                /* @var \\DOMElement $regionOptionsNode */\n                foreach ($regionOptionsNode->childNodes as $regionOption) {\n                    /* @var \\DOMElement $regionOption */\n                    $region->setOptionValue($regionOption->nodeName, $regionOption->textContent);\n                }\n            }\n\n            // Get all widgets\n            foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/media') as $mediaNode) {\n                /* @var \\DOMElement $mediaNode */\n\n                $mediaOwnerId = $mediaNode->getAttribute('userId');\n                if ($mediaOwnerId == null) {\n                    $mediaOwnerId = $regionOwnerId;\n                }\n                $widget = $this->widgetFactory->createEmpty();\n                $widget->type = $mediaNode->getAttribute('type');\n                $widget->ownerId = $mediaOwnerId;\n                $widget->duration = $mediaNode->getAttribute('duration');\n                $widget->useDuration = $mediaNode->getAttribute('useDuration');\n                // Additional check for importing layouts from 1.7 series, where the useDuration did not exist\n                $widget->useDuration = ($widget->useDuration === '') ? 1 : $widget->useDuration;\n                $widget->tempId = $mediaNode->getAttribute('fileId');\n                $widgetId = $mediaNode->getAttribute('id');\n\n                // Widget from/to dates.\n                $widget->fromDt = ($mediaNode->getAttribute('fromDt') === '') ? Widget::$DATE_MIN : $mediaNode->getAttribute('fromDt');\n                $widget->toDt = ($mediaNode->getAttribute('toDt') === '') ? Widget::$DATE_MAX : $mediaNode->getAttribute('toDt');\n\n                $this->setWidgetExpiryDatesOrDefault($widget);\n\n                $this->getLog()->debug('Adding Widget to object model. ' . $widget);\n\n                // Does this module type exist?\n                if (!array_key_exists($widget->type, $modules)) {\n                    $this->getLog()->error('Module Type [%s] in imported Layout does not exist. Allowable types: %s', $widget->type, json_encode(array_keys($modules)));\n                    continue;\n                }\n\n                $module = $modules[$widget->type];\n                /* @var \\Xibo\\Entity\\Module $module */\n\n                //\n                // Get all widget options\n                //\n                $xpathQuery = '//region[@id=\"' . $region->tempId . '\"]/media[@id=\"' . $widgetId . '\"]/options';\n                foreach ($xpath->query($xpathQuery) as $optionsNode) {\n                    /* @var \\DOMElement $optionsNode */\n                    foreach ($optionsNode->childNodes as $mediaOption) {\n                        /* @var \\DOMElement $mediaOption */\n                        $widgetOption = $this->widgetOptionFactory->createEmpty();\n                        $widgetOption->type = 'attrib';\n                        $widgetOption->option = $mediaOption->nodeName;\n                        $widgetOption->value = $mediaOption->textContent;\n\n                        $widget->widgetOptions[] = $widgetOption;\n\n                        // Convert the module type of known legacy widgets\n                        if ($widget->type == 'ticker' && $widgetOption->option == 'sourceId' && $widgetOption->value == '2') {\n                            $widget->type = 'datasetticker';\n                            $module = $modules[$widget->type];\n                        }\n                    }\n                }\n\n                $this->getLog()->debug('Added %d options with xPath query: %s', count($widget->widgetOptions), $xpathQuery);\n\n                //\n                // Get the MediaId associated with this widget (using the URI)\n                //\n                if ($module->regionSpecific == 0) {\n                    $this->getLog()->debug('Library Widget, getting mediaId');\n\n                    if (empty($widget->tempId)) {\n                        $this->getLog()->debug('FileId node is empty, setting tempId from uri option. Options: %s', json_encode($widget->widgetOptions));\n                        $mediaId = explode('.', $widget->getOptionValue('uri', '0.*'));\n                        $widget->tempId = $mediaId[0];\n                    }\n\n                    $this->getLog()->debug('Assigning mediaId %d', $widget->tempId);\n                    $widget->assignMedia($widget->tempId);\n                }\n\n                //\n                // Get all widget raw content\n                //\n                foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/media[@id=\"' . $widgetId . '\"]/raw') as $rawNode) {\n                    /* @var \\DOMElement $rawNode */\n                    // Get children\n                    foreach ($rawNode->childNodes as $mediaOption) {\n                        /* @var \\DOMElement $mediaOption */\n                        if ($mediaOption->textContent == null) {\n                            continue;\n                        }\n                        $widgetOption = $this->widgetOptionFactory->createEmpty();\n                        $widgetOption->type = 'cdata';\n                        $widgetOption->option = $mediaOption->nodeName;\n                        $widgetOption->value = $mediaOption->textContent;\n\n                        $widget->widgetOptions[] = $widgetOption;\n                    }\n                }\n\n                //\n                // Audio\n                //\n                foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/media[@id=\"' . $widgetId . '\"]/audio') as $rawNode) {\n                    /* @var \\DOMElement $rawNode */\n                    // Get children\n                    foreach ($rawNode->childNodes as $audioNode) {\n                        /* @var \\DOMElement $audioNode */\n                        if ($audioNode->textContent == null) {\n                            continue;\n                        }\n                        $audioMediaId = $audioNode->getAttribute('mediaId');\n\n                        if (empty($audioMediaId)) {\n                            // Try to parse it from the text content\n                            $audioMediaId = explode('.', $audioNode->textContent)[0];\n                        }\n\n                        $widgetAudio = $this->widgetAudioFactory->createEmpty();\n                        $widgetAudio->mediaId = $audioMediaId;\n                        $widgetAudio->volume = $audioNode->getAttribute('volume');\n                        $widgetAudio->loop = $audioNode->getAttribute('loop');\n\n                        $widget->assignAudio($widgetAudio);\n                    }\n                }\n\n                // Add the widget to the playlist\n                $playlist->assignWidget($widget);\n            }\n\n            // Assign Playlist to the Region\n            $region->regionPlaylist = $playlist;\n\n            // Assign the region to the Layout\n            $layout->regions[] = $region;\n        }\n\n        $this->getLog()->debug(sprintf('Finished loading layout - there are %d regions.', count($layout->regions)));\n\n        // Load any existing tags\n        if (!is_array($layout->tags)) {\n            $layout->tags = $this->tagFactory->tagsFromString($layout->tags);\n        }\n\n        foreach ($xpath->query('//tags/tag') as $tagNode) {\n            /* @var \\DOMElement $tagNode */\n            if (trim($tagNode->textContent) == '') {\n                continue;\n            }\n            $layout->tags[] = $this->tagFactory->tagFromString($tagNode->textContent);\n        }\n\n        // The parsed, finished layout\n        return $layout;\n    }\n\n    /**\n     * @param $layoutJson\n     * @param $playlistJson\n     * @param $nestedPlaylistJson\n     * @param Folder $folder\n     * @param null $layout\n     * @param bool $importTags\n     * @return array\n     * @throws DuplicateEntityException\n     * @throws GeneralException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function loadByJson($layoutJson, $playlistJson, $nestedPlaylistJson, Folder $folder, $layout = null, $importTags = false): array\n    {\n        $this->getLog()->debug('Loading Layout by JSON');\n\n        // New Layout\n        if ($layout == null) {\n            $layout = $this->createEmpty();\n        }\n\n        $playlists = [];\n        $oldIds = [];\n        $newIds = [];\n        $widgets = [];\n        // Get a list of modules for us to use\n        $modules = $this->moduleFactory->get();\n\n        $layout->schemaVersion = (int)$layoutJson['layoutDefinitions']['schemaVersion'];\n        $layout->width = $layoutJson['layoutDefinitions']['width'];\n        $layout->height = $layoutJson['layoutDefinitions']['height'];\n        $layout->backgroundColor = $layoutJson['layoutDefinitions']['backgroundColor'];\n        $layout->backgroundzIndex = (int)$layoutJson['layoutDefinitions']['backgroundzIndex'];\n        $layout->actions = [];\n        $layout->autoApplyTransitions = $layoutJson['layoutDefinitions']['autoApplyTransitions'] ?? 0;\n        $actions = $layoutJson['layoutDefinitions']['actions'] ?? [];\n\n        foreach ($actions as $action) {\n            $newAction = $this->actionFactory->create($action['triggerType'], $action['triggerCode'], $action['actionType'], 'importLayout', $action['sourceId'], $action['target'], $action['targetId'], $action['widgetId'], $action['layoutCode']);\n            $newAction->save(['validate' => false]);\n        }\n\n\n        // Nested Playlists are Playlists which exist below the first level of Playlists in Sub-Playlist Widgets\n        // we need to import and save them first.\n        if ($nestedPlaylistJson != null) {\n            $this->getLog()->debug('Layout import, creating nested Playlists from JSON, there are ' . count($nestedPlaylistJson) . ' Playlists to create');\n\n            // create all nested Playlists, save their widgets to key=>value array\n            foreach ($nestedPlaylistJson as $nestedPlaylist) {\n                $newPlaylist = $this->playlistFactory->createEmpty()->hydrate($nestedPlaylist);\n                $newPlaylist->tags = [];\n\n                // Populate tags\n                if ($nestedPlaylist['tags'] !== null && count($nestedPlaylist['tags']) > 0 && $importTags) {\n                    foreach ($nestedPlaylist['tags'] as $tag) {\n                        $newPlaylist->tags[] = $this->tagFactory->tagFromString(\n                            $tag['tag'] . (!empty($tag['value']) ? '|' . $tag['value'] : '')\n                        );\n                    }\n                }\n\n                $oldIds[] = $newPlaylist->playlistId;\n                $widgets[$newPlaylist->playlistId] = $newPlaylist->widgets;\n\n                $this->setOwnerAndSavePlaylist($newPlaylist, $folder);\n\n                $newIds[] = $newPlaylist->playlistId;\n            }\n\n            $combined = array_combine($oldIds, $newIds);\n\n            // this function will go through all widgets assigned to the nested Playlists, create the widgets, adjust the Ids and return an array of Playlists\n            // then the Playlists array is used later on to adjust mediaIds if needed\n            $playlists = $this->createNestedPlaylistWidgets($widgets, $combined, $playlists);\n\n            $this->getLog()->debug('Finished creating nested playlists there are ' . count($playlists) . ' Playlists created');\n        }\n\n        $drawers = (array_key_exists('drawers', $layoutJson['layoutDefinitions'])) ? $layoutJson['layoutDefinitions']['drawers'] : [];\n\n        // merge Layout Regions and Drawers into one array.\n        $allRegions = array_merge($layoutJson['layoutDefinitions']['regions'], $drawers);\n\n        // Populate Region Nodes\n        foreach ($allRegions as $regionJson) {\n            $this->getLog()->debug('Found Region ' . json_encode($regionJson));\n\n            // Get the ownerId\n            $regionOwnerId = $regionJson['ownerId'];\n            if ($regionOwnerId == null) {\n                $regionOwnerId = $layout->ownerId;\n            }\n\n            // Create the region\n            $region = $this->regionFactory->create(\n                $regionOwnerId,\n                $regionJson['name'],\n                (double)$regionJson['width'],\n                (double)$regionJson['height'],\n                (double)$regionJson['top'],\n                (double)$regionJson['left'],\n                (int)$regionJson['zIndex'],\n                isset($regionJson['isDrawer']) ? (int)$regionJson['isDrawer'] : 0\n            );\n\n            // Use the regionId locally to parse the rest of the JSON\n            $region->tempId = $regionJson['tempId'] ?? $regionJson['regionId'];\n\n            // Set the region name if empty\n            if ($region->name == '') {\n                $region->name = count($layout->regions) + 1;\n                // make sure we have a string as the region name, otherwise sanitizer will get confused.\n                $region->name = (string)$region->name;\n            }\n\n            // Populate Playlists\n            $playlist = $this->playlistFactory->create($region->name, $regionOwnerId);\n\n            // interactive Actions\n            $actions = $regionJson['actions'] ?? [];\n            foreach ($actions as $action) {\n                $newAction = $this->actionFactory->create($action['triggerType'], $action['triggerCode'], $action['actionType'], 'importRegion', $action['sourceId'], $action['target'], $action['targetId'], $action['widgetId'], $action['layoutCode']);\n                $newAction->save(['validate' => false]);\n            }\n\n            foreach ($regionJson['regionOptions'] as $regionOption) {\n                $region->setOptionValue($regionOption['option'], $regionOption['value']);\n            }\n\n            // Get all widgets\n            foreach ($regionJson['regionPlaylist']['widgets'] as $mediaNode) {\n                $mediaOwnerId = $mediaNode['ownerId'];\n                if ($mediaOwnerId == null) {\n                    $mediaOwnerId = $regionOwnerId;\n                }\n\n                $widget = $this->widgetFactory->createEmpty();\n                $widget->type = $mediaNode['type'];\n                $widget->ownerId = $mediaOwnerId;\n                $widget->duration = $mediaNode['duration'];\n                $widget->useDuration = $mediaNode['useDuration'];\n                $widget->tempId = (int)implode(',', $mediaNode['mediaIds']);\n                $widget->tempWidgetId = $mediaNode['widgetId'];\n\n                // Widget from/to dates.\n                $widget->fromDt = ($mediaNode['fromDt'] === '') ? Widget::$DATE_MIN : $mediaNode['fromDt'];\n                $widget->toDt = ($mediaNode['toDt'] === '') ? Widget::$DATE_MAX : $mediaNode['toDt'];\n\n                $this->setWidgetExpiryDatesOrDefault($widget);\n\n                $this->getLog()->debug('Adding Widget to object model. ' . $widget);\n\n                // Does this module type exist?\n                if (!array_key_exists($widget->type, $modules)) {\n                    $this->getLog()->error(sprintf('Module Type [%s] in imported Layout does not exist. Allowable types: %s', $widget->type, json_encode(array_keys($modules))));\n                    continue;\n                }\n\n                /* @var \\Xibo\\Entity\\Module $module */\n                $module = $modules[$widget->type];\n\n                //\n                // Get all widget options\n                //\n                $subPlaylistsOption = [];\n                foreach ($mediaNode['widgetOptions'] as $optionsNode) {\n                    // subPlaylistOptions and subPlaylistIds are no longer in use from 2.3\n                    // we need to capture these options to support Layout with sub-playlist import from older CMS\n                    // we use continue for those 2 options, as we do not need to create widgetOption for them\n                    if ($optionsNode['option'] == 'subPlaylistOptions') {\n                        $oldSubPlaylistOptions = json_decode($optionsNode['value'], true);\n                        continue;\n                    }\n\n                    if ($optionsNode['option'] == 'subPlaylistIds') {\n                        $oldSubPlaylistIds = json_decode($optionsNode['value'], true);\n                        continue;\n                    }\n\n                    if ($optionsNode['option'] == 'subPlaylists') {\n                        $subPlaylistsOption = json_decode($optionsNode['value'], true);\n                    }\n\n                    $widgetOption = $this->widgetOptionFactory->createEmpty();\n                    $widgetOption->type = $optionsNode['type'];\n                    $widgetOption->option = $optionsNode['option'];\n                    $widgetOption->value = $optionsNode['value'];\n\n                    $widget->widgetOptions[] = $widgetOption;\n\n                    // Convert the module type of known legacy widgets\n                    if ($widget->type == 'ticker' && $widgetOption->option == 'sourceId' && $widgetOption->value == '2') {\n                        $widget->type = 'datasetticker';\n                    }\n                }\n\n                // convert old sub-playlist Widget options to the new way we handle them\n                if (isset($oldSubPlaylistIds) && isset($oldSubPlaylistOptions)) {\n                    $subPlaylistsOption = $this->convertOldPlaylistOptions($oldSubPlaylistIds, $oldSubPlaylistOptions);\n                }\n\n                //\n                // Get the MediaId associated with this widget\n                //\n                if ($module->regionSpecific == 0) {\n                    $this->getLog()->debug('Library Widget, getting mediaId');\n\n                    $this->getLog()->debug(sprintf('Assigning mediaId %d', $widget->tempId));\n                    $widget->assignMedia($widget->tempId);\n                }\n\n                //\n                // Audio\n                //\n                foreach ($mediaNode['audio'] as $audioNode) {\n                    if ($audioNode == []) {\n                        continue;\n                    }\n\n                    $widgetAudio = $this->widgetAudioFactory->createEmpty();\n                    $widgetAudio->mediaId = $audioNode['mediaId'];\n                    $widgetAudio->volume = $audioNode['volume'];\n                    $widgetAudio->loop = $audioNode['loop'];\n                    $widget->assignAudio($widgetAudio);\n                }\n\n                // Sub-Playlist widgets with Playlists\n                if ($widget->type == 'subplaylist') {\n                    $widgets = [];\n                    $this->getLog()->debug('Layout import, creating layout Playlists from JSON, there are ' . count($playlistJson) . ' Playlists to create');\n\n                    foreach ($playlistJson as $playlistDetail) {\n                        $newPlaylist = $this->playlistFactory->createEmpty()->hydrate($playlistDetail);\n                        $newPlaylist->tags = [];\n\n                        // Populate tags\n                        if ($playlistDetail['tags'] !== null && count($playlistDetail['tags']) > 0 && $importTags) {\n                            foreach ($playlistDetail['tags'] as $tag) {\n                                $newPlaylist->tags[] = $this->tagFactory->tagFromString(\n                                    $tag['tag'] . (!empty($tag['value']) ? '|' . $tag['value'] : '')\n                                );\n                            }\n                        }\n\n                        // Check to see if it matches our Sub-Playlist widget config\n                        foreach ($subPlaylistsOption as $subPlaylistItem) {\n                            if ($newPlaylist->playlistId === $subPlaylistItem['playlistId']) {\n                                // Store the oldId to swap permissions later\n                                $oldIds[] = $newPlaylist->playlistId;\n\n                                // Store the Widgets on the Playlist\n                                $widgets[$newPlaylist->playlistId] = $newPlaylist->widgets;\n\n                                // Save a new Playlist and capture the Id\n                                $this->setOwnerAndSavePlaylist($newPlaylist, $folder);\n\n                                $newIds[] = $newPlaylist->playlistId;\n                            }\n                        }\n                    }\n                    \n                    $combined = array_combine($oldIds, $newIds);\n\n                    $playlists = $this->createNestedPlaylistWidgets($widgets, $combined, $playlists);\n                    $updatedSubPlaylists = [];\n                    foreach ($combined as $old => $new) {\n                        foreach ($subPlaylistsOption as $subPlaylistItem) {\n                            if ($subPlaylistItem['playlistId'] === $old) {\n                                $subPlaylistItem['playlistId'] = $new;\n                                $updatedSubPlaylists[] = $subPlaylistItem;\n                            }\n                        }\n                    }\n\n                    $widget->setOptionValue('subPlaylists', 'attrib', json_encode($updatedSubPlaylists));\n                }\n\n                // Add the widget to the regionPlaylist\n                $playlist->assignWidget($widget);\n\n                // interactive Actions\n                $actions = $mediaNode['actions'] ?? [];\n                foreach ($actions as $action) {\n                    $newAction = $this->actionFactory->create($action['triggerType'], $action['triggerCode'], $action['actionType'], 'importWidget', $action['sourceId'], $action['target'], $action['targetId'], $action['widgetId'], $action['layoutCode']);\n                    $newAction->save(['validate' => false]);\n                }\n            }\n\n            // Assign Playlist to the Region\n            $region->regionPlaylist = $playlist;\n\n            // Assign the region to the Layout\n            if ($region->isDrawer === 1) {\n                $layout->drawers[] = $region;\n            } else {\n                $layout->regions[] = $region;\n            }\n        }\n\n        $this->getLog()->debug(sprintf('Finished loading layout - there are %d regions.', count($layout->regions)));\n\n        $this->getLog()->debug(sprintf('Finished loading layout - there are %d drawer regions.', count($layout->drawers)));\n\n        if ($importTags) {\n            foreach ($layoutJson['layoutDefinitions']['tags'] as $tagNode) {\n                if ($tagNode == []) {\n                    continue;\n                }\n\n                $layout->tags[] = $this->tagFactory->tagFromString(\n                    $tagNode['tag'] . (!empty($tagNode['value']) ? '|' . $tagNode['value'] : '')\n                );\n            }\n        }\n\n        // The parsed, finished layout\n        return [$layout, $playlists];\n    }\n\n    /**\n     * Create Layout from ZIP File\n     * @param string $zipFile\n     * @param string $layoutName\n     * @param int $userId\n     * @param int $template\n     * @param int $replaceExisting\n     * @param int $importTags\n     * @param bool $useExistingDataSets\n     * @param bool $importDataSetData\n     * @param DataSetFactory $dataSetFactory\n     * @param string $tags\n     * @param \\Slim\\Interfaces\\RouteParserInterface $routeParser $routeParser\n     * @param MediaServiceInterface $mediaService\n     * @param int $folderId\n     * @return Layout\n     * @throws DuplicateEntityException\n     * @throws GeneralException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     * @throws \\Xibo\\Support\\Exception\\ConfigurationException\n     */\n    public function createFromZip($zipFile, $layoutName, $userId, $template, $replaceExisting, $importTags, $useExistingDataSets, $importDataSetData, $dataSetFactory, $tags, $routeParser, MediaServiceInterface $mediaService, int $folderId)\n    {\n        $this->getLog()->debug(sprintf('Create Layout from ZIP File: %s, imported name will be %s.', $zipFile, $layoutName));\n\n        $libraryLocation = $this->config->getSetting('LIBRARY_LOCATION') . 'temp/';\n\n        // Do some pre-checks on the arguments we have been provided\n        if (!file_exists($zipFile)) {\n            throw new InvalidArgumentException(__('File does not exist'));\n        }\n\n        // Open the Zip file\n        $zip = new \\ZipArchive();\n        if (!$zip->open($zipFile)) {\n            throw new InvalidArgumentException(__('Unable to open ZIP'));\n        }\n\n        // Get the layout details\n        $layoutDetails = json_decode($zip->getFromName('layout.json'), true);\n\n        // Get the Playlist details\n        $playlistDetails = $zip->getFromName('playlist.json');\n        $nestedPlaylistDetails = $zip->getFromName('nestedPlaylist.json');\n        $folder = $this->folderFactory->getById($folderId);\n\n        // for old imports it may not exist and would error out without this check.\n        if (array_key_exists('layoutDefinitions', $layoutDetails)) {\n            // Construct the Layout\n            if ($playlistDetails !== false) {\n                $playlistDetails = json_decode(($playlistDetails), true);\n            }\n\n            if ($nestedPlaylistDetails !== false) {\n                $nestedPlaylistDetails = json_decode($nestedPlaylistDetails, true);\n            }\n\n            $jsonResults = $this->loadByJson($layoutDetails, $playlistDetails, $nestedPlaylistDetails, $folder, null, $importTags);\n            $layout = $jsonResults[0];\n            $playlists = $jsonResults[1];\n\n            if (array_key_exists('code', $layoutDetails['layoutDefinitions'])) {\n                // Layout code, remove it if Layout with the same code already exists in the CMS, otherwise import would fail.\n                // if the code does not exist, then persist it on import.\n                try {\n                    $this->getByCode($layoutDetails['layoutDefinitions']['code']);\n                    $layout->code = null;\n                } catch (NotFoundException $exception) {\n                    $layout->code = $layoutDetails['layoutDefinitions']['code'];\n                }\n            }\n        } else {\n            $layout = $this->loadByXlf($zip->getFromName('layout.xml'));\n        }\n\n        $this->getLog()->debug('Layout Loaded: ' . $layout);\n\n        // Ensure width and height are integer type for resolution validation purpose xibosignage/xibo#1648\n        $layout->width = (int)$layout->width;\n        $layout->height = (int)$layout->height;\n\n        // Override the name/description\n        $layout->layout = (($layoutName != '') ? $layoutName : $layoutDetails['layout']);\n        $layout->description = (isset($layoutDetails['description']) ? $layoutDetails['description'] : '');\n\n        // Get global stat setting of layout to on/off proof of play statistics\n        $layout->enableStat = $this->config->getSetting('LAYOUT_STATS_ENABLED_DEFAULT');\n\n        $this->getLog()->debug('Layout Loaded: ' . $layout);\n\n        // Check that the resolution we have in this layout exists, and if not create it.\n        try {\n            if ($layout->schemaVersion < 2) {\n                $this->resolutionFactory->getByDesignerDimensions($layout->width, $layout->height);\n            } else {\n                $this->resolutionFactory->getByDimensions($layout->width, $layout->height);\n            }\n        } catch (NotFoundException $notFoundException) {\n            $this->getLog()->info('Import is for an unknown resolution, we will create it with name: ' . $layout->width . ' x ' . $layout->height);\n\n            $resolution = $this->resolutionFactory->create($layout->width . ' x ' . $layout->height, (int)$layout->width, (int)$layout->height);\n            $resolution->userId = $userId;\n            $resolution->save();\n        }\n\n        // Update region names\n        if (isset($layoutDetails['regions']) && count($layoutDetails['regions']) > 0) {\n            $this->getLog()->debug('Updating region names according to layout.json');\n            foreach ($layout->regions as $region) {\n                if (array_key_exists($region->tempId, $layoutDetails['regions']) && !empty($layoutDetails['regions'][$region->tempId])) {\n                    $region->name = $layoutDetails['regions'][$region->tempId];\n                    $region->regionPlaylist->name = $layoutDetails['regions'][$region->tempId];\n                }\n            }\n        }\n\n        // Update drawer region names\n        if (isset($layoutDetails['drawers']) && count($layoutDetails['drawers']) > 0) {\n            $this->getLog()->debug('Updating drawer region names according to layout.json');\n            foreach ($layout->drawers as $drawer) {\n                if (array_key_exists($drawer->tempId, $layoutDetails['drawers']) && !empty($layoutDetails['drawers'][$drawer->tempId])) {\n                    $drawer->name = $layoutDetails['drawers'][$drawer->tempId];\n                    $drawer->regionPlaylist->name = $layoutDetails['drawers'][$drawer->tempId];\n                }\n            }\n        }\n\n        // Remove the tags if necessary\n        if (!$importTags) {\n            $this->getLog()->debug('Removing tags from imported layout');\n            $layout->tags = [];\n        }\n\n        // Add the template tag if we are importing a template\n        if ($template) {\n            $layout->tags[] = $this->tagFactory->getByTag('template');\n        }\n\n        // Tag as imported\n        $layout->tags[] = $this->tagFactory->tagFromString('imported');\n\n        // Tag from the upload form\n        $tagsFromForm = (($tags != '') ? $this->tagFactory->tagsFromString($tags) : []);\n        foreach ($tagsFromForm as $tagFromForm) {\n            $layout->tags[] = $tagFromForm;\n        }\n\n        // Set the owner\n        $layout->setOwner($userId, true);\n\n        // Track if we've added any fonts\n        $fontsAdded = false;\n\n        $widgets = $layout->getAllWidgets();\n        $this->getLog()->debug('Layout has ' . count($widgets) . ' widgets');\n\n        $this->getLog()->debug('Process mapping.json file.');\n\n        // Go through each region and add the media (updating the media ids)\n        $mappings = json_decode($zip->getFromName('mapping.json'), true);\n        $oldMediaIds = [];\n        $newMediaIds = [];\n        foreach ($mappings as $file) {\n            // Import the Media File\n            $intendedMediaName = $file['name'];\n            $temporaryFileName = $libraryLocation . $file['file'];\n\n            // Get the file from the ZIP\n            $fileStream = $zip->getStream('library/' . $file['file']);\n\n            if ($fileStream === false) {\n                // Log out the entire ZIP file and all entries.\n                $log = 'Problem getting library/' . $file['file'] . '. Files: ';\n                for ($i = 0; $i < $zip->numFiles; $i++) {\n                    $log .= $zip->getNameIndex($i) . ', ';\n                }\n\n                $this->getLog()->error($log);\n\n                throw new InvalidArgumentException(__('Empty file in ZIP'));\n            }\n\n            // Open a file pointer to stream into\n            if (!$temporaryFileStream = fopen($temporaryFileName, 'w')) {\n                throw new InvalidArgumentException(__('Cannot save media file from ZIP file'), 'temp');\n            }\n\n            // Loop over the file and write into the stream\n            while (!feof($fileStream)) {\n                fwrite($temporaryFileStream, fread($fileStream, 8192));\n            }\n\n            fclose($fileStream);\n            fclose($temporaryFileStream);\n\n            // Check we don't already have one\n            $newMedia = false;\n            $isFont = (isset($file['font']) && $file['font'] == 1);\n\n            try {\n                $media = $this->mediaFactory->getByName($intendedMediaName);\n\n                $this->getLog()->debug('Media already exists with name: ' .  $intendedMediaName);\n\n                if ($replaceExisting && !$isFont) {\n                    // Media with this name already exists, but we don't want to use it.\n                    $intendedMediaName = 'import_' . $layout->layout . '_' . uniqid();\n                    throw new NotFoundException();\n                }\n            } catch (NotFoundException $e) {\n                // Create it instead\n                $this->getLog()->debug('Media does not exist in Library, add it ' .  $file['file']);\n\n                $media = $this->mediaFactory->create($intendedMediaName, $file['file'], $file['type'], $userId, $file['duration']);\n\n                if ($importTags && isset($file['tags'])) {\n                    foreach ($file['tags'] as $tagNode) {\n                        if ($tagNode == []) {\n                            continue;\n                        }\n\n                        $media->tags[] = $this->tagFactory->tagFromString(\n                            $tagNode['tag'] . (!empty($tagNode['value']) ? '|' . $tagNode['value'] : '')\n                        );\n                    }\n                }\n\n                $media->tags[] = $this->tagFactory->tagFromString('imported');\n                $media->folderId = $folder->id;\n                $media->permissionsFolderId =\n                    ($folder->permissionsFolderId == null) ? $folder->id : $folder->permissionsFolderId;\n                // Get global stat setting of media to set to on/off/inherit\n                $media->enableStat = $this->config->getSetting('MEDIA_STATS_ENABLED_DEFAULT');\n                $media->save();\n\n                $newMedia = true;\n            }\n\n            // Find where this is used and swap for the real mediaId\n            $oldMediaId = $file['mediaid'];\n            $newMediaId = $media->mediaId;\n            $oldMediaIds[] = $oldMediaId;\n            $newMediaIds[] = $newMediaId;\n\n            if ($file['background'] == 1) {\n                // Set the background image on the new layout\n                $layout->backgroundImageId = $newMediaId;\n            } else if ($isFont) {\n                // Just raise a flag to say that we've added some fonts to the library\n                if ($newMedia) {\n                    $fontsAdded = true;\n                }\n            } else {\n                // Go through all widgets and replace if necessary\n                // Keep the keys the same? Doesn't matter\n                foreach ($widgets as $widget) {\n                    /* @var Widget $widget */\n                    $audioIds = $widget->getAudioIds();\n\n                    $this->getLog()->debug(sprintf('Checking Widget for the old mediaID [%d] so we can replace it with the new mediaId [%d] and storedAs [%s]. Media assigned to widget %s.', $oldMediaId, $newMediaId, $media->storedAs, json_encode($widget->mediaIds)));\n\n                    if (in_array($oldMediaId, $widget->mediaIds)) {\n                        $this->getLog()->debug(sprintf('Removing %d and replacing with %d', $oldMediaId, $newMediaId));\n\n                        // Are we an audio record?\n                        if (in_array($oldMediaId, $audioIds)) {\n                            // Swap the mediaId on the audio record\n                            foreach ($widget->audio as $widgetAudio) {\n                                if ($widgetAudio->mediaId == $oldMediaId) {\n                                    $widgetAudio->mediaId = $newMediaId;\n                                    break;\n                                }\n                            }\n                        } else {\n                            // Non audio\n                            $widget->setOptionValue('uri', 'attrib', $media->storedAs);\n                        }\n\n                        // Always manage the assignments\n                        // Unassign the old ID\n                        $widget->unassignMedia($oldMediaId);\n\n                        // Assign the new ID\n                        $widget->assignMedia($newMediaId);\n                    }\n                    // change mediaId references in applicable widgets, outside of the if condition,\n                    // because if the Layout is loadByXLF we will not have mediaIds set on Widget at this point\n                    // the mediaIds array for Widgets with Library references will be correctly populated on getResource call from Player/CMS.\n                    // if the Layout was loadByJson then it will already have correct mediaIds array at this point.\n                    $this->handleWidgetMediaIdReferences($widget, $newMediaId, $oldMediaId);\n                }\n            }\n        }\n        $uploadedMediaIds = array_combine($oldMediaIds, $newMediaIds);\n\n        // Playlists with media widgets\n        // We will iterate through all Playlists we've created during layout import here and\n        // replace any mediaIds if needed\n        if (isset($playlists) && $playlistDetails !== false) {\n            foreach ($playlists as $playlist) {\n                /** @var $playlist Playlist */\n                foreach ($playlist->widgets as $widget) {\n                    $audioIds = $widget->getAudioIds();\n\n                    foreach ($widget->mediaIds as $mediaId) {\n                        foreach ($uploadedMediaIds as $old => $new) {\n                            if ($mediaId == $old) {\n                                $this->getLog()->debug(sprintf('Playlist import Removing %d and replacing with %d', $old, $new));\n                                // Are we an audio record?\n                                if (in_array($old, $audioIds)) {\n                                    // Swap the mediaId on the audio record\n                                    foreach ($widget->audio as $widgetAudio) {\n                                        if ($widgetAudio->mediaId == $old) {\n                                            $widgetAudio->mediaId = $new;\n                                            break;\n                                        }\n                                    }\n                                } else {\n                                    $addedMedia = $this->mediaFactory->getById($new);\n                                    // Non audio\n                                    $widget->setOptionValue('uri', 'attrib', $addedMedia->storedAs);\n                                }\n\n                                // Always manage the assignments\n                                // Unassign the old ID\n                                $widget->unassignMedia($old);\n\n                                // Assign the new ID\n                                $widget->assignMedia($new);\n\n                                // change mediaId references in applicable widgets in all Playlists we have created on this import.\n                                $this->handleWidgetMediaIdReferences($widget, $new, $old);\n                            }\n                        }\n                    }\n                    $widget->save();\n\n                    if (!in_array($widget, $playlist->widgets)) {\n                        $playlist->assignWidget($widget);\n                        $playlist->requiresDurationUpdate = 1;\n                        $playlist->save();\n                    }\n                    // add Playlist widgets to the $widgets (which already has all widgets from layout regionPlaylists)\n                    // this will be needed if any Playlist has widgets with dataSets\n                    if ($widget->type == 'datasetview' || $widget->type == 'datasetticker' || $widget->type == 'chart') {\n                        $widgets[] = $widget;\n                        $playlistWidgets[] = $widget;\n                    }\n                }\n            }\n        }\n\n        // Handle any datasets provided with the layout\n        $dataSets = $zip->getFromName('dataSet.json');\n\n        if ($dataSets !== false) {\n            $dataSets = json_decode($dataSets, true);\n\n            $this->getLog()->debug('There are ' . count($dataSets) . ' DataSets to import.');\n\n            foreach ($dataSets as $item) {\n                // Hydrate a new dataset object with this json object\n                $dataSet = $dataSetFactory->createEmpty()->hydrate($item);\n                $dataSet->columns = [];\n                $dataSetId = $dataSet->dataSetId;\n                $columnWithImages = [];\n                // We must null the ID so that we don't try to load the dataset when we assign columns\n                $dataSet->dataSetId = null;\n                \n                // Hydrate the columns\n                foreach ($item['columns'] as $columnItem) {\n                    $this->getLog()->debug(sprintf('Assigning column: %s', json_encode($columnItem)));\n                    if ($columnItem['dataTypeId'] === 5) {\n                        $columnWithImages[] = $columnItem['heading'];\n                    }\n                    $dataSet->assignColumn($dataSetFactory->getDataSetColumnFactory()->createEmpty()->hydrate($columnItem));\n                }\n\n                /** @var DataSet $existingDataSet */\n                $existingDataSet = null;\n\n                // Do we want to try and use a dataset that already exists?\n                if ($useExistingDataSets) {\n                    // Check to see if we already have a dataset with the same code/name, prefer code.\n                    if ($dataSet->code != '') {\n                        try {\n                            // try and get by code\n                            $existingDataSet = $dataSetFactory->getByCode($dataSet->code);\n                        } catch (NotFoundException $e) {\n                            $this->getLog()->debug(sprintf('Existing dataset not found with code %s', $dataSet->code));\n                        }\n                    }\n\n                    if ($existingDataSet === null) {\n                        // try by name\n                        try {\n                            $existingDataSet = $dataSetFactory->getByName($dataSet->dataSet);\n                        } catch (NotFoundException $e) {\n                            $this->getLog()->debug(sprintf('Existing dataset not found with name %s', $dataSet->code));\n                        }\n                    }\n                }\n\n                if ($existingDataSet === null) {\n                    $this->getLog()->debug(sprintf('Matching DataSet not found, will need to add one. useExistingDataSets = %s', $useExistingDataSets));\n\n                    // We want to add the dataset we have as a new dataset.\n                    // we will need to make sure we clear the ID's and save it\n                    $existingDataSet = clone $dataSet;\n                    $existingDataSet->userId = $this->getUser()->userId;\n                    $existingDataSet->folderId = $folder->id;\n                    $existingDataSet->permissionsFolderId =\n                        ($folder->permissionsFolderId == null) ? $folder->id : $folder->permissionsFolderId;\n                    $existingDataSet->save();\n\n                    // Do we need to add data\n                    if ($importDataSetData) {\n                        // Import the data here\n                        $this->getLog()->debug(sprintf('Importing data into new DataSet %d', $existingDataSet->dataSetId));\n\n                        foreach ($item['data'] as $itemData) {\n                            if (isset($itemData['id'])) {\n                                unset($itemData['id']);\n                            }\n\n                            foreach ($columnWithImages as $columnHeading) {\n                                foreach ($uploadedMediaIds as $old => $new) {\n                                    if ($itemData[$columnHeading] == $old) {\n                                        $itemData[$columnHeading] = $new;\n                                    }\n                                }\n                            }\n\n                            $existingDataSet->addRow($itemData);\n                        }\n                    }\n                } else {\n                    $this->getLog()->debug('Matching DataSet found, validating the columns');\n\n                    // Load the existing dataset\n                    $existingDataSet->load();\n\n                    // Validate that the columns are the same\n                    if (count($dataSet->columns) != count($existingDataSet->columns)) {\n                        $this->getLog()->debug(sprintf('Columns for Imported DataSet = %s', json_encode($dataSet->columns)));\n                        throw new InvalidArgumentException(sprintf(__('DataSets have different number of columns imported = %d, existing = %d'), count($dataSet->columns), count($existingDataSet->columns)));\n                    }\n\n                    // Check the column headings\n                    $diff = array_udiff($dataSet->columns, $existingDataSet->columns, function ($a, $b) {\n                        /** @var DataSetColumn $a */\n                        /** @var DataSetColumn $b */\n                        return $a->heading == $b->heading;\n                    });\n\n                    if (count($diff) > 0) {\n                        throw new InvalidArgumentException(__('DataSets have different column names'));\n                    }\n\n                    // Set the prior dataSetColumnId on each column.\n                    foreach ($existingDataSet->columns as $column) {\n                        // Lookup the matching column in the external dataSet definition.\n                        foreach ($dataSet->columns as $externalColumn) {\n                            if ($externalColumn->heading == $column->heading) {\n                                $column->priorDatasetColumnId = $externalColumn->dataSetColumnId;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                // Replace instances of this dataSetId with the existing dataSetId, which will either be the existing\n                // dataSet or one we've added above.\n                // Also make sure we replace the columnId's with the columnId's in the new \"existing\" DataSet.\n                foreach ($widgets as $widget) {\n                    /* @var Widget $widget */\n                    if ($widget->type == 'datasetview' || $widget->type == 'datasetticker' || $widget->type == 'chart') {\n                        $widgetDataSetId = $widget->getOptionValue('dataSetId', 0);\n\n                        if ($widgetDataSetId != 0 && $widgetDataSetId == $dataSetId) {\n                            // Widget has a dataSet and it matches the one we've just actioned.\n                            $widget->setOptionValue('dataSetId', 'attrib', $existingDataSet->dataSetId);\n\n                            // Check for and replace column references.\n                            // We are looking in the \"columns\" option for datasetview\n                            // and the \"template\" option for datasetticker\n                            // and the \"config\" option for chart\n                            if ($widget->type == 'datasetview') {\n                                // Get the columns option\n                                $columns = explode(',', $widget->getOptionValue('columns', ''));\n\n                                $this->getLog()->debug(sprintf('Looking to replace columns from %s', json_encode($columns)));\n\n                                foreach ($existingDataSet->columns as $column) {\n                                    foreach ($columns as $index => $col) {\n                                        if ($col == $column->priorDatasetColumnId) {\n                                            $columns[$index] = $column->dataSetColumnId;\n                                        }\n                                    }\n                                }\n\n                                $columns = implode(',', $columns);\n\n                                $widget->setOptionValue('columns', 'attrib', $columns);\n\n                                $this->getLog()->debug(sprintf('Replaced columns with %s', $columns));\n                            } else if ($widget->type == 'datasetticker') {\n                                // Get the template option\n                                $template = $widget->getOptionValue('template', '');\n\n                                $this->getLog()->debug(sprintf('Looking to replace columns from %s', $template));\n\n                                foreach ($existingDataSet->columns as $column) {\n                                    // We replace with the |%d] so that we dont experience double replacements\n                                    $template = str_replace('|' . $column->priorDatasetColumnId . ']', '|' . $column->dataSetColumnId . ']', $template);\n                                }\n\n                                $widget->setOptionValue('template', 'cdata', $template);\n\n                                $this->getLog()->debug(sprintf('Replaced columns with %s', $template));\n                            } else if ($widget->type == 'chart') {\n                                // get the config for the chart widget\n                                $oldConfig = json_decode($widget->getOptionValue('config', '[]'), true);\n                                $newConfig = [];\n                                $this->getLog()->debug(sprintf('Looking to replace config from %s', json_encode($oldConfig)));\n\n                                // go through the chart config and our dataSet\n                                foreach ($oldConfig as $config) {\n                                    foreach ($existingDataSet->columns as $column) {\n                                        // replace with this condition to avoid double replacements\n                                        if ($config['dataSetColumnId'] == $column->priorDatasetColumnId) {\n                                            // create our new config, with replaced dataSetColumnIds\n                                            $newConfig[] = [\n                                                'columnType' => $config['columnType'],\n                                                'dataSetColumnId' => $column->dataSetColumnId\n                                            ];\n                                        }\n                                    }\n                                }\n\n                                $this->getLog()->debug(sprintf('Replaced config with %s', json_encode($newConfig)));\n\n                                // json encode our newConfig and set it as config attribute in the imported chart widget.\n                                $widget->setOptionValue('config', 'attrib', json_encode($newConfig));\n                            }\n                        }\n\n                        // save widgets with dataSets on Playlists, widgets directly on the layout are saved later on.\n                        if (isset($playlistWidgets) && in_array($widget, $playlistWidgets)) {\n                            $widget->save();\n                        }\n                    }\n                }\n            }\n        }\n\n        $image_path = $zip->getFromName('library/thumbs/campaign_thumb.png');\n        if ($image_path !== false) {\n            $temporaryLayoutThumb = $libraryLocation . $layout->layout . '-campaign_thumb.png';\n            $layout->thumbnail = $temporaryLayoutThumb;\n            $image = imagecreatefromstring($image_path);\n            imagepng($image, $temporaryLayoutThumb);\n        }\n\n        $this->getLog()->debug('Finished creating from Zip');\n\n        // Finished\n        $zip->close();\n\n        // We need one final pass through all widgets on the layout so that we can set the durations properly.\n        foreach ($layout->getAllWidgets() as $widget) {\n            $module = $this->moduleFactory->createWithWidget($widget);\n            $widget->calculateDuration($module, true);\n\n            // Get global stat setting of widget to set to on/off/inherit\n            $widget->setOptionValue('enableStat', 'attrib', $this->config->getSetting('WIDGET_STATS_ENABLED_DEFAULT'));\n        }\n\n        if ($fontsAdded && $routeParser != null) {\n            $this->getLog()->debug('Fonts have been added');\n            $mediaService->setUser($this->getUser())->installFonts($routeParser);\n        }\n\n        return $layout;\n    }\n\n    /**\n     * Create widgets in nested Playlists and handle their closure table\n     *\n     * @param $widgets array An array of playlist widgets with old playlistId as key\n     * @param $combined array An array of key and value pairs with oldPlaylistId => newPlaylistId\n     * @param $playlists array An array of Playlist objects\n     * @return array An array of Playlist objects with widgets\n     * @throws NotFoundException\n     */\n    public function createNestedPlaylistWidgets($widgets, $combined, &$playlists)\n    {\n        foreach ($widgets as $playlistId => $widgetsDetails) {\n            foreach ($combined as $old => $new) {\n                if ($old == $playlistId) {\n                    $playlistId = $new;\n                }\n            }\n\n            $playlist = $this->playlistFactory->getById($playlistId);\n\n            foreach ($widgetsDetails as $widgetsDetail) {\n                $modules = $this->moduleFactory->get();\n                $playlistWidget = $this->widgetFactory->createEmpty();\n                $playlistWidget->playlistId = $playlistId;\n                $playlistWidget->widgetId = null;\n                $playlistWidget->type = $widgetsDetail['type'];\n                $playlistWidget->ownerId = $playlist->ownerId;\n                $playlistWidget->displayOrder = $widgetsDetail['displayOrder'];\n                $playlistWidget->duration = $widgetsDetail['duration'];\n                $playlistWidget->useDuration = $widgetsDetail['useDuration'];\n                $playlistWidget->calculatedDuration = $widgetsDetail['calculatedDuration'];\n                $playlistWidget->fromDt = $widgetsDetail['fromDt'];\n                $playlistWidget->toDt = $widgetsDetail['toDt'];\n                $playlistWidget->tempId = $widgetsDetail['tempId'];\n                $playlistWidget->mediaIds = $widgetsDetail['mediaIds'];\n                $playlistWidget->widgetOptions = [];\n\n                $nestedSubPlaylists = [];\n\n                foreach ($widgetsDetail['widgetOptions'] as $widgetOptionE) {\n                    if ($playlistWidget->type == 'subplaylist') {\n                        // subPlaylistOptions and subPlaylistIds are no longer in use from 2.3\n                        // we need to capture these options to support Layout with sub-playlist import from older CMS\n                        // we use continue for those 2 options, as we do not need to create widgetOption for them\n                        if ($widgetOptionE['option'] == 'subPlaylistOptions') {\n                            $oldNestedSubPlaylistOptions = json_decode($widgetOptionE['value'], true);\n                            continue;\n                        }\n\n                        if ($widgetOptionE['option'] == 'subPlaylistIds') {\n                            $oldNestedSubPlaylistIds = json_decode($widgetOptionE['value'], true);\n                            continue;\n                        }\n\n                        if ($widgetOptionE['option'] == 'subPlaylists') {\n                            $nestedSubPlaylists = json_decode($widgetOptionE['value'], true);\n                        }\n                    }\n\n                    $widgetOption = $this->widgetOptionFactory->createEmpty();\n                    $widgetOption->type = $widgetOptionE['type'];\n                    $widgetOption->option = $widgetOptionE['option'];\n                    $widgetOption->value = $widgetOptionE['value'];\n\n                    $playlistWidget->widgetOptions[] = $widgetOption;\n                }\n\n                // convert old sub-playlist Widget options to the new way we handle them\n                if (isset($oldNestedSubPlaylistIds) && isset($oldNestedSubPlaylistOptions)) {\n                    $nestedSubPlaylists = $this->convertOldPlaylistOptions($oldNestedSubPlaylistIds, $oldNestedSubPlaylistOptions);\n                }\n\n                $module = $modules[$playlistWidget->type];\n\n                if ($playlistWidget->type == 'subplaylist') {\n                    $updatedSubPlaylists = [];\n                    foreach ($combined as $old => $new) {\n                        foreach ($nestedSubPlaylists as $subPlaylistItem) {\n                            if ($subPlaylistItem['playlistId'] === $old) {\n                                $subPlaylistItem['playlistId'] = $new;\n                                $updatedSubPlaylists[] = $subPlaylistItem;\n                            }\n                        }\n                    }\n\n                    foreach ($updatedSubPlaylists as $updatedSubPlaylistItem) {\n                        $this->getStore()->insert('\n                            INSERT INTO `lkplaylistplaylist` (parentId, childId, depth)\n                            SELECT p.parentId, c.childId, p.depth + c.depth + 1\n                              FROM lkplaylistplaylist p, lkplaylistplaylist c\n                             WHERE p.childId = :parentId AND c.parentId = :childId\n                        ', [\n                            'parentId' => $playlist->playlistId,\n                            'childId' => $updatedSubPlaylistItem['playlistId']\n                        ]);\n                    }\n\n                    $playlistWidget->setOptionValue('subPlaylists', 'attrib', json_encode($updatedSubPlaylists));\n                }\n\n                $playlist->assignWidget($playlistWidget);\n                $playlist->requiresDurationUpdate = 1;\n\n                // save non-media based widget, we can't save media based widgets here as we don't have updated mediaId yet.\n                if ($module->regionSpecific == 1 && $playlistWidget->mediaIds == []) {\n                    $playlistWidget->save();\n                }\n            }\n\n            $playlists[] = $playlist;\n            $this->getLog()->debug('Finished creating Playlist added the following Playlist ' . json_encode($playlist));\n        }\n\n        return $playlists;\n    }\n\n    /**\n     * Get all Codes assigned to Layouts\n     * @param array $filterBy\n     * @return array\n     */\n    public function getLayoutCodes($filterBy = []): array\n    {\n        $parsedFilter = $this->getSanitizer($filterBy);\n        $params = [];\n        $select = 'SELECT DISTINCT code, `campaign`.CampaignID, `campaign`.permissionsFolderId ';\n        $body = ' FROM layout INNER JOIN `lkcampaignlayout` ON lkcampaignlayout.LayoutID = layout.LayoutID INNER JOIN `campaign` ON lkcampaignlayout.CampaignID = campaign.CampaignID AND campaign.IsLayoutSpecific = 1 WHERE code IS NOT NULL';\n\n        // get by Code\n        if ($parsedFilter->getString('code') != '') {\n            $body.= ' AND layout.code LIKE :code ';\n            $params['code'] = '%' . $parsedFilter->getString('code') . '%';\n        }\n\n        // Logged in user view permissions\n        $this->viewPermissionSql('Xibo\\Entity\\Campaign', $body, $params, 'campaign.campaignId', 'layout.userId', $filterBy, 'campaign.permissionsFolderId');\n\n        $order = ' ORDER BY code';\n\n        // Paging\n        $limit = '';\n        if ($filterBy !== null && $parsedFilter->getInt('start') !== null && $parsedFilter->getInt('length') !== null) {\n            $limit = ' LIMIT ' . $parsedFilter->getInt('start', ['default' => 0]) . ', ' . $parsedFilter->getInt('length', ['default' => 10]);\n        }\n\n        $sql = $select . $body . $order . $limit;\n        $entries = $this->getStore()->select($sql, $params);\n\n        // Paging\n        if ($limit != '' && count($entries) > 0) {\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total ' . $body, $params);\n            $this->_countLast = intval($results[0]['total']);\n        }\n\n        return $entries;\n    }\n\n    /**\n     * Query for all Layouts\n     * @param array $sortOrder\n     * @param array $filterBy\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function query($sortOrder = null, $filterBy = [])\n    {\n        $parsedFilter = $this->getSanitizer($filterBy);\n        $entries = [];\n        $params = [];\n\n        if ($sortOrder === null) {\n            $sortOrder = ['layout'];\n        }\n\n        $select  = 'SELECT `layout`.layoutID, \n                        `layout`.parentId,\n                        `layout`.layout,\n                        `layout`.description,\n                        `layout`.duration,\n                        `layout`.userID,\n                        `user`.userName as owner,\n                        `campaign`.CampaignID,\n                        `layout`.status,\n                        `layout`.statusMessage,\n                        `layout`.enableStat,\n                        `layout`.width,\n                        `layout`.height,\n                        `layout`.retired,\n                        `layout`.createdDt,\n                        `layout`.modifiedDt,\n                        ( SELECT GROUP_CONCAT(CONCAT_WS(\\'|\\', tag, value))\n                                    FROM tag\n                                    INNER JOIN lktaglayout\n                                        ON lktaglayout.tagId = tag.tagId\n                                        WHERE lktaglayout.layoutId = layout.layoutId\n                                    GROUP BY lktaglayout.layoutId\n                        ) as tags,\n                        `layout`.backgroundImageId,\n                        `layout`.backgroundColor,\n                        `layout`.backgroundzIndex,\n                        `layout`.schemaVersion,\n                        `layout`.publishedStatusId,\n                        `status`.status AS publishedStatus,\n                        `layout`.publishedDate,\n                        `layout`.autoApplyTransitions,\n                        `layout`.code,\n                        `campaign`.folderId,\n                        `campaign`.permissionsFolderId,\n                   ';\n\n        if ($parsedFilter->getInt('campaignId') !== null) {\n            $select .= ' lkcl.displayOrder, ';\n        } else {\n            $select .= ' NULL as displayOrder, ';\n        }\n\n        $select .= \"     (SELECT GROUP_CONCAT(DISTINCT `group`.group)\n                          FROM `permission`\n                            INNER JOIN `permissionentity`\n                            ON `permissionentity`.entityId = permission.entityId\n                            INNER JOIN `group`\n                            ON `group`.groupId = `permission`.groupId\n                         WHERE entity = :permissionEntityForGroup\n                            AND objectId = campaign.CampaignID\n                            AND view = 1\n                        ) AS groupsWithPermissions \";\n        $params['permissionEntityForGroup'] = 'Xibo\\\\Entity\\\\Campaign';\n\n        $body  = \"   FROM layout \";\n        $body .= '  INNER JOIN status ON status.id = layout.publishedStatusId ';\n        $body .= \"  INNER JOIN `lkcampaignlayout` \";\n        $body .= \"   ON lkcampaignlayout.LayoutID = layout.LayoutID \";\n        $body .= \"   INNER JOIN `campaign` \";\n        $body .= \"   ON lkcampaignlayout.CampaignID = campaign.CampaignID \";\n        $body .= \"       AND campaign.IsLayoutSpecific = 1\";\n        $body .= \"   INNER JOIN `user` ON `user`.userId = `campaign`.userId \";\n\n        if ($parsedFilter->getInt('campaignId') !== null) {\n            // Join Campaign back onto it again\n            $body .= \" \n                INNER JOIN `lkcampaignlayout` lkcl \n                ON lkcl.layoutid = layout.layoutid \n                    AND lkcl.CampaignID = :campaignId \n            \";\n            $params['campaignId'] = $parsedFilter->getInt('campaignId');\n        }\n\n        if ($parsedFilter->getInt('displayGroupId') !== null) {\n            $body .= '\n                INNER JOIN `lklayoutdisplaygroup`\n                ON lklayoutdisplaygroup.layoutId = `layout`.layoutId\n                    AND lklayoutdisplaygroup.displayGroupId = :displayGroupId\n            ';\n\n            $params['displayGroupId'] = $parsedFilter->getInt('displayGroupId');\n        }\n\n        if ($parsedFilter->getInt('activeDisplayGroupId') !== null) {\n            $displayGroupIds = [];\n            $displayId = null;\n\n            // get the displayId if we were provided with display specific displayGroup in the filter\n            $sql = 'SELECT display.displayId FROM display INNER JOIN lkdisplaydg ON lkdisplaydg.displayId = display.displayId INNER JOIN displaygroup ON displaygroup.displayGroupId = lkdisplaydg.displayGroupId WHERE displaygroup.displayGroupId = :displayGroupId AND displaygroup.isDisplaySpecific = 1';\n\n            foreach ($this->getStore()->select($sql, ['displayGroupId' => $parsedFilter->getInt('activeDisplayGroupId')]) as $row) {\n                $displayId = $this->getSanitizer($row)->getInt('displayId');\n            }\n\n            // if we have displayId, get all displayGroups to which the display is a member of\n            if ($displayId !== null) {\n                $sql = 'SELECT displayGroupId FROM lkdisplaydg WHERE displayId = :displayId';\n\n                foreach ($this->getStore()->select($sql, ['displayId' => $displayId]) as $row) {\n                    $displayGroupIds[] = $this->getSanitizer($row)->getInt('displayGroupId');\n                }\n            }\n\n            // if we are filtering by actual displayGroup, use just the displayGroupId in the param\n            if ($displayGroupIds == []) {\n                $displayGroupIds[] = $parsedFilter->getInt('activeDisplayGroupId');\n            }\n\n            // get events for the selected displayGroup / Display and all displayGroups the display is member of\n            $body .= '\n                      INNER JOIN `lkscheduledisplaygroup` \n                        ON lkscheduledisplaygroup.displayGroupId IN ( ' . implode(',', $displayGroupIds) . ' )\n                      INNER JOIN schedule \n                        ON schedule.eventId = lkscheduledisplaygroup.eventId\n             ';\n        }\n\n        // MediaID\n        if ($parsedFilter->getInt('mediaId', ['default' => 0]) != 0) {\n            $body .= ' INNER JOIN (\n                SELECT DISTINCT `region`.layoutId\n                  FROM `lkwidgetmedia`\n                    INNER JOIN `widget`\n                    ON `widget`.widgetId = `lkwidgetmedia`.widgetId\n                    INNER JOIN `lkplaylistplaylist`\n                    ON `widget`.playlistId = `lkplaylistplaylist`.childId\n                    INNER JOIN `playlist`\n                    ON `lkplaylistplaylist`.parentId = `playlist`.playlistId\n                    INNER JOIN `region`\n                    ON `region`.regionId = `playlist`.regionId\n                 WHERE `lkwidgetmedia`.mediaId = :mediaId\n                ) layoutsWithMedia\n                ON layoutsWithMedia.layoutId = `layout`.layoutId\n            ';\n\n            $params['mediaId'] = $parsedFilter->getInt('mediaId', ['default' => 0]);\n        }\n\n        // Media Like\n        if (!empty($parsedFilter->getString('mediaLike'))) {\n            $body .= ' INNER JOIN (\n                SELECT DISTINCT `region`.layoutId\n                  FROM `lkwidgetmedia`\n                    INNER JOIN `widget`\n                    ON `widget`.widgetId = `lkwidgetmedia`.widgetId\n                    INNER JOIN `lkplaylistplaylist`\n                    ON `widget`.playlistId = `lkplaylistplaylist`.childId\n                    INNER JOIN `playlist`\n                    ON `lkplaylistplaylist`.parentId = `playlist`.playlistId\n                    INNER JOIN `region`\n                    ON `region`.regionId = `playlist`.regionId\n                    INNER JOIN `media` \n                    ON `lkwidgetmedia`.mediaId = `media`.mediaId\n                 WHERE `media`.name LIKE :mediaLike\n                ) layoutsWithMediaLike\n                ON layoutsWithMediaLike.layoutId = `layout`.layoutId\n            ';\n\n            $params['mediaLike'] = '%' . $parsedFilter->getString('mediaLike') . '%';\n        }\n\n        $body .= \" WHERE 1 = 1 \";\n\n        // Layout Like\n        if ($parsedFilter->getString('layout') != '') {\n            $terms = explode(',', $parsedFilter->getString('layout'));\n            $logicalOperator = $parsedFilter->getString('logicalOperatorName', ['default' => 'OR']);\n            $this->nameFilter(\n                'layout',\n                'layout',\n                $terms,\n                $body,\n                $params,\n                ($parsedFilter->getCheckbox('useRegexForName') == 1),\n                $logicalOperator\n            );\n        }\n\n        if ($parsedFilter->getString('layoutExact') != '') {\n            $body.= \" AND layout.layout = :exact \";\n            $params['exact'] = $parsedFilter->getString('layoutExact');\n        }\n\n        // Layout\n        if ($parsedFilter->getInt('layoutId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.layoutId = :layoutId \";\n            $params['layoutId'] = $parsedFilter->getInt('layoutId', ['default' => 0]);\n        } else if ($parsedFilter->getInt('excludeTemplates', ['default' => 1]) != -1) {\n            // Exclude templates by default\n            if ($parsedFilter->getInt('excludeTemplates', ['default' => 1]) == 1) {\n                $body .= \" AND layout.layoutID NOT IN (SELECT layoutId FROM lktaglayout INNER JOIN tag ON lktaglayout.tagId = tag.tagId WHERE tag = 'template') \";\n            } else {\n                $body .= \" AND layout.layoutID IN (SELECT layoutId FROM lktaglayout INNER JOIN tag ON lktaglayout.tagId = tag.tagId WHERE tag = 'template') \";\n            }\n        }\n\n        // Layout Draft\n        if ($parsedFilter->getInt('parentId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.parentId = :parentId \";\n            $params['parentId'] = $parsedFilter->getInt('parentId', ['default' => 0]);\n        } else if ($parsedFilter->getInt('layoutId', ['default' => 0]) == 0\n            && $parsedFilter->getInt('showDrafts', ['default' => 0]) == 0) {\n            // If we're not searching for a parentId and we're not searching for a layoutId, then don't show any\n            // drafts (parentId will be empty on drafts)\n            $body .= ' AND layout.parentId IS NULL ';\n        }\n\n        // Layout Published Status\n        if ($parsedFilter->getInt('publishedStatusId') !== null) {\n            $body .= \" AND layout.publishedStatusId = :publishedStatusId \";\n            $params['publishedStatusId'] = $parsedFilter->getInt('publishedStatusId');\n        }\n\n        // Layout Status\n        if ($parsedFilter->getInt('status') !== null) {\n            $body .= \" AND layout.status = :status \";\n            $params['status'] = $parsedFilter->getInt('status');\n        }\n\n        // Background Image\n        if ($parsedFilter->getInt('backgroundImageId') !== null) {\n            $body .= \" AND layout.backgroundImageId = :backgroundImageId \";\n            $params['backgroundImageId'] = $parsedFilter->getInt('backgroundImageId', ['default' => 0]);\n        }\n        // Not Layout\n        if ($parsedFilter->getInt('notLayoutId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.layoutId <> :notLayoutId \";\n            $params['notLayoutId'] = $parsedFilter->getInt('notLayoutId', ['default' => 0]);\n        }\n\n        // Owner filter\n        if ($parsedFilter->getInt('userId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.userid = :userId \";\n            $params['userId'] = $parsedFilter->getInt('userId', ['default' => 0]);\n        }\n\n        if ($parsedFilter->getCheckbox('onlyMyLayouts') === 1) {\n            $body .= ' AND layout.userid = :userId ';\n            $params['userId'] = $this->getUser()->userId;\n        }\n\n        // User Group filter\n        if ($parsedFilter->getInt('ownerUserGroupId', ['default' => 0]) != 0) {\n            $body .= ' AND layout.userid IN (SELECT DISTINCT userId FROM `lkusergroup` WHERE groupId =  :ownerUserGroupId) ';\n            $params['ownerUserGroupId'] = $parsedFilter->getInt('ownerUserGroupId', ['default' => 0]);\n        }\n\n        // Retired options (provide -1 to return all)\n        if ($parsedFilter->getInt('retired', ['default' => -1]) != -1) {\n            $body .= \" AND layout.retired = :retired \";\n            $params['retired'] = $parsedFilter->getInt('retired',['default' => 0]);\n        }\n\n        if ($parsedFilter->getInt('ownerCampaignId') !== null) {\n            // Join Campaign back onto it again\n            $body .= \" AND `campaign`.campaignId = :ownerCampaignId \";\n            $params['ownerCampaignId'] = $parsedFilter->getInt('ownerCampaignId', ['default' => 0]);\n        }\n\n        if ($parsedFilter->getInt('layoutHistoryId') !== null) {\n            $body .= ' AND `campaign`.campaignId IN (\n                SELECT MAX(campaignId) \n                  FROM `layouthistory` \n                 WHERE `layouthistory`.layoutId = :layoutHistoryId\n                ) ';\n            $params['layoutHistoryId'] = $parsedFilter->getInt('layoutHistoryId');\n        }\n\n        // Get by regionId\n        if ($parsedFilter->getInt('regionId') !== null) {\n            // Join Campaign back onto it again\n            $body .= \" AND `layout`.layoutId IN (SELECT layoutId FROM `region` WHERE regionId = :regionId) \";\n            $params['regionId'] = $parsedFilter->getInt('regionId', ['default' => 0]);\n        }\n\n        // get by Code\n        if ($parsedFilter->getString('code') != '') {\n            $body.= \" AND layout.code = :code \";\n            $params['code'] = $parsedFilter->getString('code');\n        }\n\n        if ($parsedFilter->getString('codeLike') != '') {\n            $body.= ' AND layout.code LIKE :codeLike ';\n            $params['codeLike'] = '%' . $parsedFilter->getString('codeLike') . '%';\n        }\n\n        // Tags\n        if ($parsedFilter->getString('tags') != '') {\n            $tagFilter = $parsedFilter->getString('tags');\n\n            if (trim($tagFilter) === '--no-tag') {\n                $body .= ' AND `layout`.layoutID NOT IN (\n                    SELECT `lktaglayout`.layoutId\n                     FROM `tag`\n                        INNER JOIN `lktaglayout`\n                        ON `lktaglayout`.tagId = `tag`.tagId\n                    )\n                ';\n            } else {\n                $operator = $parsedFilter->getCheckbox('exactTags') == 1 ? '=' : 'LIKE';\n                $logicalOperator = $parsedFilter->getString('logicalOperator', ['default' => 'OR']);\n                $body .= ' AND layout.layoutID IN (\n                SELECT lktaglayout.layoutId\n                  FROM tag\n                    INNER JOIN lktaglayout\n                    ON lktaglayout.tagId = tag.tagId\n                ';\n\n                $tags = explode(',', $tagFilter);\n                $this->tagFilter($tags, 'lktaglayout', 'lkTagLayoutId', 'layoutId', $logicalOperator, $operator, $body, $params);\n            }\n        }\n\n        // Show All, Used or UnUsed\n        // Used - In active schedule, scheduled in the future, directly assigned to displayGroup, default Layout.\n        // Unused - Every layout NOT matching the Used ie not in active schedule, not scheduled in the future, not directly assigned to any displayGroup, not default layout.\n        if ($parsedFilter->getInt('filterLayoutStatusId', ['default' => 1]) != 1)  {\n            if ($parsedFilter->getInt('filterLayoutStatusId') == 2) {\n\n                // Only show used layouts\n                $now = Carbon::now()->format('U');\n                $sql = 'SELECT DISTINCT schedule.CampaignID FROM schedule WHERE ( ( schedule.fromDt < '. $now . ' OR schedule.fromDt = 0 ) ' . ' AND schedule.toDt > ' . $now . ') OR schedule.fromDt > ' . $now;\n                $campaignIds = [];\n                foreach ($this->getStore()->select($sql, []) as $row) {\n                    $campaignIds[] = $row['CampaignID'];\n                }\n                $body .= ' AND ('\n                    . '      campaign.CampaignID IN ( ' . implode(',', array_filter($campaignIds)) . ' ) \n                             OR layout.layoutID IN (SELECT DISTINCT defaultlayoutid FROM display) \n                             OR layout.layoutID IN (SELECT DISTINCT layoutId FROM lklayoutdisplaygroup)'\n                    . ' ) ';\n            }\n            else {\n                // Only show unused layouts\n                $now = Carbon::now()->format('U');\n                $sql = 'SELECT DISTINCT schedule.CampaignID FROM schedule WHERE ( ( schedule.fromDt < '. $now . ' OR schedule.fromDt = 0 ) ' . ' AND schedule.toDt > ' . $now . ') OR schedule.fromDt > ' . $now;\n                $campaignIds = [];\n                foreach ($this->getStore()->select($sql, []) as $row) {\n                    $campaignIds[] = $row['CampaignID'];\n                }\n\n                $body .= ' AND campaign.CampaignID NOT IN ( ' . implode(',', array_filter($campaignIds)) . ' )  \n                     AND layout.layoutID NOT IN (SELECT DISTINCT defaultlayoutid FROM display) \n                     AND layout.layoutID NOT IN (SELECT DISTINCT layoutId FROM lklayoutdisplaygroup) \n                     ';\n            }\n        }\n\n        // PlaylistID\n        if ($parsedFilter->getInt('playlistId', ['default' => 0]) != 0) {\n            $body .= ' AND layout.layoutId IN (SELECT DISTINCT `region`.layoutId\n                    FROM `lkplaylistplaylist`\n                      INNER JOIN `playlist`\n                      ON `playlist`.playlistId = `lkplaylistplaylist`.parentId\n                      INNER JOIN `region`\n                      ON `region`.regionId = `playlist`.regionId\n                   WHERE `lkplaylistplaylist`.childId = :playlistId )\n            ';\n\n            $params['playlistId'] = $parsedFilter->getInt('playlistId', ['default' => 0]);\n        }\n\n        // publishedDate\n        if ($parsedFilter->getInt('havePublishDate', ['default' => -1]) != -1) {\n            $body .= \" AND `layout`.publishedDate IS NOT NULL \";\n        }\n\n        if ($parsedFilter->getInt('activeDisplayGroupId') !== null) {\n\n            $date = Carbon::now()->format('U');\n\n            // for filter by displayGroup, we need to add some additional filters in WHERE clause to show only relevant Layouts at the time the Layout grid is viewed\n            $body .= ' AND campaign.campaignId = schedule.campaignId \n                       AND ( schedule.fromDt < '. $date . ' OR schedule.fromDt = 0 ) ' . ' AND schedule.toDt > ' . $date;\n        }\n\n        if ($parsedFilter->getInt('folderId') !== null) {\n            $body .= \" AND campaign.folderId = :folderId \";\n            $params['folderId'] = $parsedFilter->getInt('folderId');\n        }\n\n        if ($parsedFilter->getString('orientation') !== null) {\n            if ($parsedFilter->getString('orientation') === 'portrait') {\n                $body .= ' AND layout.width < layout.height ';\n            } else {\n                $body .= ' AND layout.width >= layout.height ';\n            }\n        }\n\n        // Logged in user view permissions\n        $this->viewPermissionSql('Xibo\\Entity\\Campaign', $body, $params, 'campaign.campaignId', 'layout.userId', $filterBy, 'campaign.permissionsFolderId');\n\n        // Sorting?\n        $order = '';\n\n        if (is_array($sortOrder)) {\n            $order .= ' ORDER BY ' . implode(',', $sortOrder);\n        }\n\n        $limit = '';\n        // Paging\n        if ($filterBy !== null && $parsedFilter->getInt('start') !== null && $parsedFilter->getInt('length') !== null) {\n            $limit = ' LIMIT ' . $parsedFilter->getInt('start', ['default' => 0]) . ', ' . $parsedFilter->getInt('length', ['default' => 10]);\n        }\n\n        // The final statements\n        $sql = $select . $body . $order . $limit;\n\n        foreach ($this->getStore()->select($sql, $params) as $row) {\n            $layout = $this->createEmpty();\n\n            $parsedRow = $this->getSanitizer($row);\n\n            // Validate each param and add it to the array.\n            $layout->layoutId = $parsedRow->getInt('layoutID');\n            $layout->parentId = $parsedRow->getInt('parentId');\n            $layout->schemaVersion = $parsedRow->getInt('schemaVersion');\n            $layout->layout = $parsedRow->getString('layout');\n            $layout->description = $parsedRow->getString('description');\n            $layout->duration = $parsedRow->getInt('duration');\n            $layout->tags = $parsedRow->getString('tags');\n            $layout->backgroundColor = $parsedRow->getString('backgroundColor');\n            $layout->owner = $parsedRow->getString('owner');\n            $layout->ownerId = $parsedRow->getInt('userID');\n            $layout->campaignId = $parsedRow->getInt('CampaignID');\n            $layout->retired = $parsedRow->getInt('retired');\n            $layout->status = $parsedRow->getInt('status');\n            $layout->backgroundImageId = $parsedRow->getInt('backgroundImageId');\n            $layout->backgroundzIndex = $parsedRow->getInt('backgroundzIndex');\n            $layout->width = $parsedRow->getDouble('width');\n            $layout->height = $parsedRow->getDouble('height');\n            $layout->orientation = $layout->width >= $layout->height ? 'landscape' : 'portrait';\n            $layout->createdDt = $parsedRow->getDate('createdDt');\n            $layout->modifiedDt = $parsedRow->getDate('modifiedDt');\n            $layout->displayOrder = $parsedRow->getInt('displayOrder');\n            $layout->statusMessage = $parsedRow->getString('statusMessage');\n            $layout->enableStat = $parsedRow->getInt('enableStat');\n            $layout->publishedStatusId = $parsedRow->getInt('publishedStatusId');\n            $layout->publishedStatus = $parsedRow->getString('publishedStatus');\n            $layout->publishedDate = $parsedRow->getString('publishedDate');\n            $layout->autoApplyTransitions = $parsedRow->getInt('autoApplyTransitions');\n            $layout->code = $parsedRow->getString('code');\n            $layout->folderId = $parsedRow->getInt('folderId');\n            $layout->permissionsFolderId = $parsedRow->getInt('permissionsFolderId');\n\n            $layout->groupsWithPermissions = $row['groupsWithPermissions'];\n            $layout->setOriginals();\n\n            $entries[] = $layout;\n        }\n\n        // Paging\n        if ($limit != '' && count($entries) > 0) {\n            unset($params['permissionEntityForGroup']);\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total ' . $body, $params);\n            $this->_countLast = intval($results[0]['total']);\n        }\n\n        return $entries;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Widget $widget\n     * @return \\Xibo\\Entity\\Widget\n     */\n    private function setWidgetExpiryDatesOrDefault($widget)\n    {\n        $minSubYear = Carbon::createFromTimestamp(Widget::$DATE_MIN)->subYear()->format('U');\n        $minAddYear = Carbon::createFromTimestamp(Widget::$DATE_MIN)->addYear()->format('U');\n        $maxSubYear = Carbon::createFromTimestamp(Widget::$DATE_MAX)->subYear()->format('U');\n        $maxAddYear = Carbon::createFromTimestamp(Widget::$DATE_MAX)->addYear()->format('U');\n\n        // if we are importing from layout.json the Widget from/to expiry dates are already timestamps\n        // for old Layouts when the Widget from/to dt are missing we set them to timestamps as well.\n        $timestampFromDt = is_integer($widget->fromDt) ? $widget->fromDt : Carbon::createFromTimeString($widget->fromDt)->format('U');\n        $timestampToDt =  is_integer($widget->toDt) ? $widget->toDt : Carbon::createFromTimeString($widget->toDt)->format('U');\n\n        // convert the date string to a unix timestamp, if the layout xlf does not contain dates, then set it to the $DATE_MIN / $DATE_MAX which are already unix timestamps, don't attempt to convert them\n        // we need to check if provided from and to dates are within $DATE_MIN +- year to avoid issues with CMS Instances in different timezones https://github.com/xibosignage/xibo/issues/1934\n        if ($widget->fromDt === Widget::$DATE_MIN || ($timestampFromDt > $minSubYear && $timestampFromDt < $minAddYear)) {\n            $widget->fromDt = Widget::$DATE_MIN;\n        } else {\n            $widget->fromDt = $timestampFromDt;\n        }\n\n        if ($widget->toDt === Widget::$DATE_MAX || ($timestampToDt > $maxSubYear && $timestampToDt < $maxAddYear)) {\n            $widget->toDt = Widget::$DATE_MAX;\n        } else {\n            $widget->toDt = $timestampToDt;\n        }\n\n        return $widget;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Playlist $newPlaylist\n     * @param Folder $folder\n     * @return \\Xibo\\Entity\\Playlist\n     * @throws DuplicateEntityException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    private function setOwnerAndSavePlaylist($newPlaylist, Folder $folder)\n    {\n        // try to save with the name from import, if it already exists add \"imported - \"  to the name\n        try {\n            // The new Playlist should be owned by the importing user\n            $newPlaylist->ownerId = $this->getUser()->getId();\n            $newPlaylist->playlistId = null;\n            $newPlaylist->widgets = [];\n            $newPlaylist->folderId = $folder->id;\n            $newPlaylist->permissionsFolderId =\n                ($folder->permissionsFolderId == null) ? $folder->id : $folder->permissionsFolderId;\n            $newPlaylist->save();\n        } catch (DuplicateEntityException $e) {\n            $newPlaylist->name = 'imported - ' . $newPlaylist->name;\n            $newPlaylist->save();\n        }\n\n        return $newPlaylist;\n    }\n\n    /**\n     * Checkout a Layout\n     * @param \\Xibo\\Entity\\Layout $layout\n     * @param bool $returnDraft Should we return the Draft or the pre-checkout Layout\n     * @return \\Xibo\\Entity\\Layout\n     * @throws \\Xibo\\Support\\Exception\\GeneralException\n     * @throws \\Xibo\\Support\\Exception\\InvalidArgumentException\n     * @throws \\Xibo\\Support\\Exception\\NotFoundException\n     */\n    public function checkoutLayout($layout, $returnDraft = true)\n    {\n        // Load the Layout\n        $layout->load();\n\n        // Make a skeleton copy of the Layout\n        $draft = clone $layout;\n        $draft->parentId = $layout->layoutId;\n        $draft->campaignId = $layout->campaignId;\n        $draft->publishedStatusId = 2; // Draft\n        $draft->publishedStatus = __('Draft');\n        $draft->autoApplyTransitions = $layout->autoApplyTransitions;\n        $draft->code = $layout->code;\n        $draft->folderId = $layout->folderId;\n\n        // Do not copy any of the tags, these will belong on the parent and are not editable from the draft.\n        $draft->tags = [];\n\n        // Save without validation or notification.\n        $draft->save([\n            'validate' => false,\n            'notify' => false\n        ]);\n\n        // Update the original\n        $layout->publishedStatusId = 2; // Draft\n        $layout->publishedStatus = __('Draft');\n        $layout->save([\n            'saveLayout' => true,\n            'saveRegions' => false,\n            'saveTags' => false,\n            'setBuildRequired' => false,\n            'validate' => false,\n            'notify' => false\n        ]);\n\n        /** @var Region[] $allRegions */\n        $allRegions = array_merge($draft->regions, $draft->drawers);\n        $draft->copyActions($draft, $layout);\n\n        // Permissions && Sub-Playlists\n        // Layout level permissions are managed on the Campaign entity, so we do not need to worry about that\n        // Regions/Widgets need to copy down our layout permissions\n        foreach ($allRegions as $region) {\n            // Match our original region id to the id in the parent layout\n            $original = $layout->getRegionOrDrawer($region->getOriginalValue('regionId'));\n\n            // Make sure Playlist closure table from the published one are copied over\n            $original->getPlaylist()->cloneClosureTable($region->getPlaylist()->playlistId);\n\n            // Copy over original permissions\n            foreach ($original->permissions as $permission) {\n                $new = clone $permission;\n                $new->objectId = $region->regionId;\n                $new->save();\n            }\n\n            // Playlist\n            foreach ($original->getPlaylist()->permissions as $permission) {\n                $new = clone $permission;\n                $new->objectId = $region->getPlaylist()->playlistId;\n                $new->save();\n            }\n\n            // Widgets\n            foreach ($region->getPlaylist()->widgets as $widget) {\n                $originalWidget = $original->getPlaylist()->getWidget($widget->getOriginalValue('widgetId'));\n                // Copy over original permissions\n                foreach ($originalWidget->permissions as $permission) {\n                    $new = clone $permission;\n                    $new->objectId = $widget->widgetId;\n                    $new->save();\n                }\n            }\n        }\n\n        return $returnDraft ? $draft : $layout;\n    }\n\n    /**\n     * Function called during Layout Import\n     * Check if provided Widget has options to have Library references\n     * if it does, then go through them find and replace old media references\n     *\n     * @param Widget $widget\n     * @param $newMediaId\n     * @param $oldMediaId\n     * @throws NotFoundException\n     */\n    public function handleWidgetMediaIdReferences($widget, $newMediaId, $oldMediaId)\n    {\n        $module = $this->moduleFactory->createWithWidget($widget);\n\n        if ($module->hasHtmlEditor()) {\n            foreach ($module->getHtmlWidgetOptions() as $option) {\n                $widget->setOptionValue($option, 'cdata', str_replace('[' . $oldMediaId . ']', '[' . $newMediaId . ']', $widget->getOptionValue($option, null)));\n            }\n        }\n    }\n\n    /**\n     * @param int $layoutId\n     * @param array $actionLayoutIds\n     * @param array $processedLayoutIds\n     * @return array\n     */\n    public function getActionPublishedLayoutIds(int $layoutId, array &$actionLayoutIds, array &$processedLayoutIds): array\n    {\n        // if Layout was already processed, do not attempt to do it again\n        // we should have all actionLayoutsIds from it at this point, there is no need to process it again\n        if (!in_array($layoutId, $processedLayoutIds)) {\n            // Get Layout Codes set in Actions on this Layout\n            // Actions directly on this Layout\n            $sql = '\n                SELECT DISTINCT `action`.layoutCode\n                  FROM `action`\n                    INNER JOIN `layout`\n                    ON `layout`.layoutId = `action`.sourceId\n                 WHERE `action`.actionType = :actionType\n                    AND `layout`.layoutId = :layoutId\n                    AND `layout`.parentId IS NULL\n            ';\n\n            // Actions on this Layout's Regions\n            $sql .= '\n                UNION\n                SELECT DISTINCT `action`.layoutCode\n                  FROM `action`\n                    INNER JOIN `region`\n                    ON `region`.regionId = `action`.sourceId\n                    INNER JOIN `layout`\n                    ON `layout`.layoutId = `region`.layoutId\n                 WHERE `action`.actionType = :actionType\n                    AND `layout`.layoutId = :layoutId\n                    AND `layout`.parentId IS NULL\n            ';\n\n            // Actions on this Layout's Widgets\n            $sql .= '\n                UNION\n                SELECT DISTINCT `action`.layoutCode\n                  FROM `action`\n                    INNER JOIN `widget`\n                    ON `widget`.widgetId = `action`.sourceId\n                    INNER JOIN `playlist`\n                    ON `playlist`.playlistId = `widget`.playlistId\n                    INNER JOIN `region`\n                    ON `region`.regionId = `playlist`.regionId\n                    INNER JOIN `layout`\n                    ON `layout`.layoutId = `region`.layoutId\n                 WHERE `action`.actionType = :actionType\n                    AND `layout`.layoutId = :layoutId\n                    AND `layout`.parentId IS NULL\n            ';\n\n            // Join them together and get the Layout's referenced by those codes\n            $actionLayoutCodes = $this->getStore()->select('\n                SELECT `layout`.layoutId\n                  FROM `layout`\n                 WHERE `layout`.code IN (\n                     ' . $sql . '\n                 )\n            ', [\n                'actionType' => 'navLayout',\n                'layoutId' => $layoutId,\n            ]);\n\n            $processedLayoutIds[] = $layoutId;\n\n            foreach ($actionLayoutCodes as $row) {\n                // if we have not processed this Layout yet, do it now\n                if (!in_array($row['layoutId'], $actionLayoutIds)) {\n                    $actionLayoutIds[] = $row['layoutId'];\n                    // check if this layout is linked with any further navLayout actions\n                    $this->getActionPublishedLayoutIds($row['layoutId'], $actionLayoutIds, $processedLayoutIds);\n                }\n            }\n        }\n\n        return $actionLayoutIds;\n    }\n\n    // <editor-fold desc=\"Concurrency Locking\">\n\n    /**\n     * @param \\Stash\\Interfaces\\PoolInterface|null $pool\n     * @return $this\n     */\n    public function usePool($pool)\n    {\n        $this->pool = $pool;\n        return $this;\n    }\n\n    /**\n     * @return \\Stash\\Interfaces\\PoolInterface|\\Stash\\Pool\n     */\n    private function getPool()\n    {\n        if ($this->pool === null) {\n            $this->pool = new Pool();\n        }\n        return $this->pool;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Layout $layout\n     * @return \\Xibo\\Entity\\Layout\n     */\n    public function decorateLockedProperties(Layout $layout): Layout\n    {\n        $locked = $this->pool->getItem('locks/layout/' . $layout->layoutId);\n        $layout->isLocked = $locked->isMiss() ? [] : $locked->get();\n        if (!empty($layout->isLocked)) {\n            $layout->isLocked->lockedUser = ($layout->isLocked->userId != $this->getUser()->userId);\n        }\n\n        return $layout;\n    }\n\n    /**\n     * Hold a lock on concurrent requests\n     *  blocks if the request is locked\n     * @param int $ttl seconds\n     * @param int $wait seconds\n     * @param int $tries\n     * @throws \\Xibo\\Support\\Exception\\GeneralException\n     */\n    public function concurrentRequestLock(Layout $layout, $force = false, $pass = 1, $ttl = 300, $wait = 6, $tries = 10): Layout\n    {\n        // Does this layout require building?\n        if (!$force && !$layout->isBuildRequired()) {\n            return $layout;\n        }\n\n        $lock = $this->getPool()->getItem('locks/layout_build/' . $layout->campaignId);\n\n        // Set the invalidation method to simply return the value (not that we use it, but it gets us a miss on expiry)\n        // isMiss() returns false if the item is missing or expired, no exceptions.\n        $lock->setInvalidationMethod(Invalidation::NONE);\n\n        // Get the lock\n        // other requests will wait here until we're done, or we've timed out\n        $locked = $lock->get();\n\n        // Did we get a lock?\n        // if we're a miss, then we're not already locked\n        if ($lock->isMiss() || $locked === false) {\n            $this->getLog()->debug('Lock miss or false. Locking for ' . $ttl . ' seconds. $locked is '. var_export($locked, true));\n\n            // so lock now\n            $lock->set(true);\n            $lock->expiresAfter($ttl);\n            $lock->save();\n\n            // If we have been locked previously, then reload our layout before passing back out.\n            if ($pass > 1) {\n                $layout = $this->getById($layout->layoutId);\n            }\n\n            return $layout;\n        } else {\n            // We are a hit - we must be locked\n            $this->getLog()->debug('LOCK hit for ' . $layout->campaignId . ' expires '\n                . $lock->getExpiration()->format('Y-m-d H:i:s') . ', created '\n                . $lock->getCreation()->format('Y-m-d H:i:s'));\n\n            // Try again?\n            $tries--;\n\n            if ($tries <= 0) {\n                // We've waited long enough\n                throw new GeneralException('Concurrent record locked, time out.');\n            } else {\n                $this->getLog()->debug('Unable to get a lock, trying again. Remaining retries: ' . $tries);\n\n                // Hang about waiting for the lock to be released.\n                sleep($wait);\n\n                // Recursive request (we've decremented the number of tries)\n                $pass++;\n                return $this->concurrentRequestLock($layout, $force, $pass, $ttl, $wait, $tries);\n            }\n        }\n    }\n\n    /**\n     * Release a lock on concurrent requests\n     */\n    public function concurrentRequestRelease(Layout $layout, bool $force = false)\n    {\n        if (!$force && !$layout->hasBuilt()) {\n            return;\n        }\n\n        $this->getLog()->debug('Releasing lock ' . $layout->campaignId);\n\n        $lock = $this->getPool()->getItem('locks/layout_build/' . $layout->campaignId);\n\n        // Release lock\n        $lock->set(false);\n        $lock->expiresAfter(10); // Expire straight away (but give it time to save the thing)\n\n        $this->getPool()->save($lock);\n    }\n\n    public function convertOldPlaylistOptions($playlistIds, $playlistOptions)\n    {\n        $convertedPlaylistOption = [];\n        $i = 0;\n        foreach ($playlistIds as $playlistId) {\n            $i++;\n            $convertedPlaylistOption[] = [\n                'rowNo' => $i,\n                'playlistId' => $playlistId,\n                'spotFill' => $playlistOptions[$playlistId]['subPlaylistIdSpotFill'] ?? null,\n                'spotLength' => $playlistOptions[$playlistId]['subPlaylistIdSpotLength'] ?? null,\n                'spots' => $playlistOptions[$playlistId]['subPlaylistIdSpots'] ?? null,\n            ];\n        }\n\n        return $convertedPlaylistOption;\n    }\n\n    // </editor-fold>\n}\n"], "fixing_code": ["<?php\n/*\n * Copyright (C) 2023 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Xibo\\Controller;\nuse Carbon\\Carbon;\nuse Slim\\Http\\Response as Response;\nuse Slim\\Http\\ServerRequest as Request;\nuse Slim\\Routing\\RouteContext;\nuse Slim\\Views\\Twig;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Twig\\Error\\LoaderError;\nuse Twig\\Error\\RuntimeError;\nuse Twig\\Error\\SyntaxError;\nuse Xibo\\Entity\\User;\nuse Xibo\\Helper\\ApplicationState;\nuse Xibo\\Helper\\HttpsDetect;\nuse Xibo\\Helper\\SanitizerService;\nuse Xibo\\Service\\BaseDependenciesService;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\HelpServiceInterface;\nuse Xibo\\Service\\LogServiceInterface;\nuse Xibo\\Support\\Exception\\ControllerNotImplemented;\nuse Xibo\\Support\\Exception\\GeneralException;\nuse Xibo\\Support\\Exception\\InvalidArgumentException;\n\n/**\n * Class Base\n * @package Xibo\\Controller\n *\n * Base for all Controllers.\n *\n */\nclass Base\n{\n    use DataTablesDotNetTrait;\n\n    /**\n     * @var LogServiceInterface\n     */\n    private $log;\n\n    /**\n     * @Inject\n     * @var  SanitizerService\n     */\n    private $sanitizerService;\n\n    /**\n     * @var ApplicationState\n     */\n    private $state;\n\n    /**\n     * @var HelpServiceInterface\n     */\n    private $helpService;\n\n    /**\n     * @var ConfigServiceInterface\n     */\n    private $configService;\n\n    /**\n     * @var User\n     */\n    private $user;\n\n    /**\n     * Automatically output a full page if non-ajax request arrives\n     * @var bool\n     */\n    private $fullPage = true;\n\n    /**\n     * Have we already rendered this controller.\n     * @var bool\n     */\n    private $rendered = false;\n\n    /**\n     * Is this controller expected to output anything?\n     * @var bool\n     */\n    private $noOutput = false;\n\n    /**\n     * @var Twig\n     */\n    private $view;\n\n    /** @var EventDispatcher */\n    private $dispatcher;\n\n    /** @var BaseDependenciesService */\n    private $baseDependenciesService;\n\n    public function useBaseDependenciesService(BaseDependenciesService $baseDependenciesService)\n    {\n        $this->baseDependenciesService = $baseDependenciesService;\n    }\n\n    /**\n     * Get User\n     * @return User\n     */\n    public function getUser()\n    {\n        return $this->baseDependenciesService->getUser();\n    }\n\n    /**\n     * Get the Application State\n     * @return ApplicationState\n     */\n    public function getState()\n    {\n        return $this->baseDependenciesService->getState();\n    }\n\n    /**\n     * Get Log\n     * @return LogServiceInterface\n     */\n    public function getLog()\n    {\n        return $this->baseDependenciesService->getLogger();\n    }\n\n    /**\n     * @param $array\n     * @return \\Xibo\\Support\\Sanitizer\\SanitizerInterface\n     */\n    protected function getSanitizer($array)\n    {\n        $sanitizerService = $this->getSanitizerService();\n        return $sanitizerService->getSanitizer($array);\n    }\n\n    public function getSanitizerService(): SanitizerService\n    {\n        return $this->baseDependenciesService->getSanitizer();\n    }\n\n    /**\n     * Get Help\n     * @return HelpServiceInterface\n     */\n    protected function getHelp()\n    {\n        return $this->baseDependenciesService->getHelp();\n    }\n\n    /**\n     * Get Config\n     * @return ConfigServiceInterface\n     */\n    public function getConfig()\n    {\n        return $this->baseDependenciesService->getConfig();\n    }\n\n    /**\n     * @return \\Slim\\Views\\Twig\n     */\n    public function getView()\n    {\n        return $this->baseDependenciesService->getView();\n    }\n\n    /**\n     * @return EventDispatcherInterface\n     */\n    public function getDispatcher(): EventDispatcherInterface\n    {\n        return $this->baseDependenciesService->getDispatcher();\n    }\n\n    /**\n     * Is this the Api?\n     * @param Request $request\n     * @return bool\n     */\n    protected function isApi(Request $request)\n    {\n        return ($request->getAttribute('name') != 'web');\n    }\n\n    /**\n     * Get Url For Route\n     * @param Request $request\n     * @param string $route\n     * @param array $data\n     * @param array $params\n     * @return string\n     */\n    protected function urlFor(Request $request, $route, $data = [], $params = [])\n    {\n        $routeParser = RouteContext::fromRequest($request)->getRouteParser();\n        return $routeParser->urlFor($route, $data, $params);\n    }\n\n    /**\n     * Set to not output a full page automatically\n     */\n    public function setNotAutomaticFullPage()\n    {\n        $this->fullPage = false;\n    }\n\n    /**\n     * Set No output\n     * @param bool $bool\n     */\n    public function setNoOutput($bool = true)\n    {\n        $this->noOutput = $bool;\n    }\n\n    /**\n     * End the controller execution, calling render\n     * @param Request $request\n     * @param Response $response\n     * @return \\Psr\\Http\\Message\\ResponseInterface|Response\n     * @throws ControllerNotImplemented if the controller is not implemented correctly\n     * @throws GeneralException\n     */\n    public function render(Request $request, Response $response)\n    {\n        if ($this->noOutput) {\n            return $response;\n        }\n\n        // State will contain the current ApplicationState, including a success flag that can be used to determine\n        // if we are in error or not.\n        $state = $this->getState();\n        $data = $state->getData();\n\n        // Grid requests require some extra info appended.\n        // they can come from any application, hence being dealt with first\n        $grid = ($state->template === 'grid');\n\n        if ($grid) {\n            $params = $this->getSanitizer($request->getParams());\n            $recordsTotal = ($state->recordsTotal == null) ? count($data) : $state->recordsTotal;\n            $recordsFiltered = ($state->recordsFiltered == null) ? $recordsTotal : $state->recordsFiltered;\n\n            $data = [\n                'draw' => intval($params->getInt('draw')),\n                'recordsTotal' => $recordsTotal,\n                'recordsFiltered' => $recordsFiltered,\n                'data' => $data\n            ];\n        }\n\n        // API Request\n        if ($this->isApi($request)) {\n            // Envelope by default - the APIView will un-pack if necessary\n            $this->getState()->setData( [\n                'grid' => $grid,\n                'success' => $state->success,\n                'status' => $state->httpStatus,\n                'message' => $state->message,\n                'id' => $state->id,\n                'data' => $data\n            ]);\n\n            return $this->renderApiResponse($request, $response->withStatus($state->httpStatus));\n\n        } else if ($request->isXhr()) {\n            // WEB Ajax\n            // --------\n            // Are we a template that should be rendered to HTML\n            // and then returned?\n            if ($state->template != '' && $state->template != 'grid') {\n                return $this->renderTwigAjaxReturn($request, $response);\n            }\n\n            // We always return 200's\n            // TODO: we might want to change this (we'd need to change the javascript to suit)\n            if ($grid) {\n                $json = $data;\n            } else {\n                $json = $state->asArray();\n            }\n\n           return $response->withJson($json, 200);\n        } else {\n            // WEB Normal\n            // ----------\n            if (empty($state->template)) {\n                $this->getLog()->debug(sprintf('Template Missing. State: %s', json_encode($state)));\n                throw new ControllerNotImplemented(__('Template Missing'));\n            }\n\n            // Append the side bar content\n            $data['clock'] = Carbon::now()->format('H:i T');\n            $data['currentUser'] = $this->getUser();\n\n            try {\n                $response = $this->getView()->render($response, $state->template . '.twig', $data);\n            } catch (LoaderError | RuntimeError | SyntaxError $e) {\n                $this->getLog()->error('Twig Error' . $e->getMessage());\n                throw new GeneralException(__('Unable to view this page'));\n            }\n        }\n        $this->rendered = true;\n        return $response;\n    }\n\n    /**\n     * @param Request $request\n     * @param Response $response\n     * @return \\Psr\\Http\\Message\\ResponseInterface|Response\n     * @throws ControllerNotImplemented\n     * @throws GeneralException\n     */\n    public function renderTwigAjaxReturn(Request $request, Response $response)\n    {\n        $data = $this->getState()->getData();\n        $state = $this->getState();\n\n        // Supply the current user to the view\n        $data['currentUser'] = $this->getUser();\n\n        // Render the view manually with Twig, parse it and pull out various bits\n        try {\n            $view = $this->getView()->render($response, $state->template . '.twig', $data);\n        } catch (LoaderError | RuntimeError | SyntaxError $e) {\n            $this->getLog()->error('Twig Error' . $e->getMessage());\n            throw new GeneralException(__('Unable to view this page'));\n        }\n\n        $view = $view->getBody();\n\n        // Log Rendered View\n        $this->getLog()->debug(sprintf('%s View: %s', $state->template, $view));\n\n        if (!$view = json_decode($view, true)) {\n            $this->getLog()->error(sprintf('Problem with Template: View = %s, Error = %s ', $state->template, json_last_error_msg()));\n            throw new ControllerNotImplemented(__('Problem with Form Template'));\n        }\n\n        $state->html = $view['html'];\n        $state->dialogTitle = trim($view['title']);\n        $state->callBack = $view['callBack'];\n        $state->extra = $view['extra'];\n\n        // Process the buttons\n        $state->buttons = [];\n        // Expect each button on a new line\n        if (trim($view['buttons']) != '') {\n\n            // Convert to an array\n            $view['buttons'] = str_replace(\"\\n\\r\", \"\\n\", $view['buttons']);\n            $buttons = explode(\"\\n\", $view['buttons']);\n\n            foreach ($buttons as $button) {\n                if ($button == '')\n                    continue;\n\n                $this->getLog()->debug('Button is ' . $button);\n\n                $button = explode(',', trim($button));\n\n                if (count($button) != 2) {\n                    $this->getLog()->error(sprintf('There is a problem with the buttons in the template: %s. Buttons: %s.', $state->template, var_export($view['buttons'], true)));\n                    throw new ControllerNotImplemented(__('Problem with Form Template'));\n                }\n\n                $state->buttons[trim($button[0])] = str_replace('|', ',', trim($button[1]));\n            }\n        }\n\n        // Process the fieldActions\n        if (trim($view['fieldActions']) == '') {\n            $state->fieldActions = [];\n        } else {\n            // Convert to an array\n            $state->fieldActions = json_decode($view['fieldActions']);\n        }\n\n        $json = json_decode($state->asJson());\n        return $response = $response->withJson($json, 200);\n    }\n\n    /**\n     * Render a template to string\n     * @param string $template\n     * @param array $data\n     * @return string\n     * @throws \\Twig\\Error\\LoaderError\n     * @throws \\Twig\\Error\\RuntimeError\n     * @throws \\Twig\\Error\\SyntaxError\n     */\n    public function renderTemplateToString($template, $data)\n    {\n        return $this->getView()->fetch($template . '.twig', $data);\n    }\n\n    /**\n     * @param Request $request\n     * @param Response $response\n     * @return \\Psr\\Http\\Message\\ResponseInterface|Response\n     */\n    public function renderApiResponse(Request $request, Response $response)\n    {\n        $data = $this->getState()->getData();\n\n        // Don't envelope unless requested\n        if ($request->getParam('envelope', 0) == 1\n            || $request->getAttribute('name') === 'test'\n        ) {\n            // Envelope\n            // append error bool\n            if (!$data['success']) {\n                $data['success'] = false;\n            }\n\n            // append status code\n            $data['status'] = $response->getStatusCode();\n\n            // Enveloped responses always return 200\n            $response = $response->withStatus(200);\n        } else {\n            // Don't envelope\n            // Set status\n            $response = $response->withStatus($data['status']);\n\n            // Are we successful?\n            if (!$data['success']) {\n                // Error condition\n                $data = [\n                    'error' => [\n                        'message' => $data['message'],\n                        'code' => $data['status'],\n                        'data' => $data['data']\n                    ]\n                ];\n            } else {\n                // Are we a grid?\n                if ($data['grid'] == true) {\n                    // Set the response to our data['data'] object\n                    $grid = $data['data'];\n                    $data = $grid['data'];\n\n                    // Total Number of Rows\n                    $totalRows = $grid['recordsTotal'];\n\n                    // Set some headers indicating our next/previous pages\n                    $sanitizedParams = $this->getSanitizer($request->getParams());\n                    $start = $sanitizedParams->getInt('start', ['default' => 0]);\n                    $size = $sanitizedParams->getInt('length', ['default' => 10]);\n\n                    $linkHeader = '';\n                    $url = (new HttpsDetect())->getUrl() . $request->getUri()->getPath();\n\n                    // Is there a next page?\n                    if ($start + $size < $totalRows) {\n                        $linkHeader .= '<' . $url . '?start=' . ($start + $size) . '&length=' . $size . '>; rel=\"next\", ';\n                    }\n\n                    // Is there a previous page?\n                    if ($start > 0) {\n                        $linkHeader .= '<' . $url . '?start=' . ($start - $size) . '&length=' . $size . '>; rel=\"prev\", ';\n                    }\n\n                    // The first page\n                    $linkHeader .= '<' . $url . '?start=0&length=' . $size . '>; rel=\"first\"';\n\n                    $response = $response\n                        ->withHeader('X-Total-Count', $totalRows)\n                        ->withHeader('Link', $linkHeader);\n                } else {\n                    // Set the response to our data object\n                    $data = $data['data'];\n                }\n            }\n        }\n\n        return $response->withJson($data);\n    }\n\n    /**\n     * @param string $form The form name\n     * @return bool\n     * @throws \\Xibo\\Support\\Exception\\NotFoundException\n     */\n    public function getAutoSubmit(string $form)\n    {\n        return $this->getUser()->getOptionValue('autoSubmit.' . $form, 'false') === 'true';\n    }\n\n    public function checkRootFolderAllowSave()\n    {\n        if ($this->getConfig()->getSetting('FOLDERS_ALLOW_SAVE_IN_ROOT') == 0\n            && !$this->getUser()->isSuperAdmin()\n        ) {\n            throw new InvalidArgumentException(\n                __('Saving into root folder is disabled, please select a different folder')\n            );\n        }\n    }\n}\n", "<?php\n/*\n * Copyright (C) 2023 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nnamespace Xibo\\Entity;\n\nuse Carbon\\Carbon;\nuse Carbon\\Factory;\nuse Respect\\Validation\\Validator as v;\nuse Stash\\Interfaces\\PoolInterface;\nuse Xibo\\Factory\\DataSetColumnFactory;\nuse Xibo\\Factory\\DataSetFactory;\nuse Xibo\\Factory\\PermissionFactory;\nuse Xibo\\Helper\\SanitizerService;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\DisplayNotifyServiceInterface;\nuse Xibo\\Service\\LogServiceInterface;\nuse Xibo\\Storage\\StorageServiceInterface;\nuse Xibo\\Support\\Exception\\ConfigurationException;\nuse Xibo\\Support\\Exception\\DuplicateEntityException;\nuse Xibo\\Support\\Exception\\GeneralException;\nuse Xibo\\Support\\Exception\\InvalidArgumentException;\nuse Xibo\\Support\\Exception\\NotFoundException;\n\n/**\n * Class DataSet\n * @package Xibo\\Entity\n *\n * @SWG\\Definition()\n */\nclass DataSet implements \\JsonSerializable\n{\n    use EntityTrait;\n\n    /**\n     * @SWG\\Property(description=\"The dataSetId\")\n     * @var int\n     */\n    public $dataSetId;\n\n    /**\n     * @SWG\\Property(description=\"The dataSet Name\")\n     * @var string\n     */\n    public $dataSet;\n\n    /**\n     * @SWG\\Property(description=\"The dataSet description\")\n     * @var string\n     */\n    public $description;\n\n    /**\n     * @SWG\\Property(description=\"The userId of the User that owns this DataSet\")\n     * @var int\n     */\n    public $userId;\n\n    /**\n     * @SWG\\Property(description=\"Timestamp indicating the date/time this DataSet was edited last\")\n     * @var int\n     */\n    public $lastDataEdit;\n\n    /**\n     * @SWG\\Property(description=\"The user name of the User that owns this DataSet\")\n     * @var string\n     */\n    public $owner;\n\n    /**\n     * @SWG\\Property(description=\"A comma separated list of Groups/Users that have permission to this DataSet\")\n     * @var string\n     */\n    public $groupsWithPermissions;\n\n    /**\n     * @SWG\\Property(description=\"A code for this Data Set\")\n     * @var string\n     */\n    public $code;\n\n    /**\n     * @SWG\\Property(description=\"Flag to indicate whether this DataSet is a lookup table\")\n     * @var int\n     */\n    public $isLookup = 0;\n\n    /**\n     * @SWG\\Property(description=\"Flag to indicate whether this DataSet is Remote\")\n     * @var int\n     */\n    public $isRemote = 0;\n\n    /**\n     * @SWG\\Property(description=\"Method to fetch the Data, can be GET or POST\")\n     * @var string\n     */\n    public $method;\n\n    /**\n     * @SWG\\Property(description=\"URI to call to fetch Data from. Replacements are {{DATE}}, {{TIME}} and, in case this is a sequencial used DataSet, {{COL.NAME}} where NAME is a ColumnName from the underlying DataSet.\")\n     * @var string\n     */\n    public $uri;\n\n    /**\n     * @SWG\\Property(description=\"Data to send as POST-Data to the remote host with the same Replacements as in the URI.\")\n     * @var string\n     */\n    public $postData;\n\n    /**\n     * @SWG\\Property(description=\"Authentication method, can be none, digest, basic\")\n     * @var string\n     */\n    public $authentication;\n\n    /**\n     * @SWG\\Property(description=\"Username to authenticate with\")\n     * @var string\n     */\n    public $username;\n\n    /**\n     * @SWG\\Property(description=\"Corresponding password\")\n     * @var string\n     */\n    public $password;\n\n    /**\n     * @SWG\\Property(description=\"Comma separated string of custom HTTP headers\")\n     * @var string\n     */\n    public $customHeaders;\n\n    /**\n     * @SWG\\Property(description=\"Custom User agent\")\n     * @var string\n     */\n    public $userAgent;\n\n    /**\n     * @SWG\\Property(description=\"Time in seconds this DataSet should fetch new Datas from the remote host\")\n     * @var int\n     */\n    public $refreshRate;\n\n    /**\n     * @SWG\\Property(description=\"Time in seconds when this Dataset should be cleared. If here is a lower value than in RefreshRate it will be cleared when the data is refreshed\")\n     * @var int\n     */\n    public $clearRate;\n\n    /**\n     * @SWG\\Property(description=\"Flag whether to truncate DataSet data if no new data is pulled from remote source\")\n     * @var int\n     */\n    public $truncateOnEmpty;\n\n    /**\n     * @SWG\\Property(description=\"DataSetID of the DataSet which should be fetched and present before the Data from this DataSet are fetched\")\n     * @var int\n     */\n    public $runsAfter;\n\n    /**\n     * @SWG\\Property(description=\"Last Synchronisation Timestamp\")\n     * @var int\n     */\n    public $lastSync = 0;\n\n    /**\n     * @SWG\\Property(description=\"Last Clear Timestamp\")\n     * @var int\n     */\n    public $lastClear = 0;\n\n    /**\n     * @SWG\\Property(description=\"Root-Element form JSON where the data are stored in\")\n     * @var String\n     */\n    public $dataRoot;\n\n    /**\n     * @SWG\\Property(description=\"Optional function to use for summarize or count unique fields in a remote request\")\n     * @var String\n     */\n    public $summarize;\n\n    /**\n     * @SWG\\Property(description=\"JSON-Element below the Root-Element on which the consolidation should be applied on\")\n     * @var String\n     */\n    public $summarizeField;\n\n    /**\n     * @SWG\\Property(description=\"The source id for remote dataSet, 1 - JSON, 2 - CSV\")\n     * @var integer\n     */\n    public $sourceId;\n\n    /**\n     * @SWG\\Property(description=\"A flag whether to ignore the first row, for CSV source remote dataSet\")\n     * @var integer\n     */\n    public $ignoreFirstRow;\n\n    /**\n     * @SWG\\Property(description=\"Soft limit on number of rows per DataSet, if left empty the global DataSet row limit will be used.\")\n     * @var integer\n     */\n    public $rowLimit = null;\n\n    /**\n     * @SWG\\Property(description=\"Type of action that should be taken on next remote DataSet sync - stop, fifo or truncate\")\n     * @var string\n     */\n    public $limitPolicy;\n\n    /**\n     * @SWG\\Property(description=\"Custom separator for CSV source, comma will be used by default\")\n     * @var string\n     */\n    public $csvSeparator;\n\n    /**\n     * @SWG\\Property(description=\"The id of the Folder this DataSet belongs to\")\n     * @var int\n     */\n    public $folderId;\n\n    /**\n     * @SWG\\Property(description=\"The id of the Folder responsible for providing permissions for this DataSet\")\n     * @var int\n     */\n    public $permissionsFolderId;\n\n    /** @var array Permissions */\n    private $permissions = [];\n\n    /**\n     * @var DataSetColumn[]\n     */\n    public $columns = [];\n\n    private $countLast = 0;\n\n    /** @var array Blacklist for SQL */\n    private $blackList = array(';', 'INSERT', 'UPDATE', 'SELECT', 'DELETE', 'TRUNCATE', 'TABLE', 'FROM', 'WHERE');\n\n    /** @var  \\Xibo\\Helper\\SanitizerService */\n    private $sanitizerService;\n\n    /** @var  ConfigServiceInterface */\n    private $config;\n\n    /** @var PoolInterface */\n    private $pool;\n\n    /** @var  DataSetFactory */\n    private $dataSetFactory;\n\n    /** @var  DataSetColumnFactory */\n    private $dataSetColumnFactory;\n\n    /** @var  PermissionFactory */\n    private $permissionFactory;\n\n    /** @var DisplayNotifyServiceInterface */\n    private $displayNotifyService;\n\n    /**\n     * Entity constructor.\n     * @param StorageServiceInterface $store\n     * @param LogServiceInterface $log\n     * @param \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface $dispatcher\n     * @param SanitizerService $sanitizerService\n     * @param ConfigServiceInterface $config\n     * @param PoolInterface $pool\n     * @param DataSetFactory $dataSetFactory\n     * @param DataSetColumnFactory $dataSetColumnFactory\n     * @param PermissionFactory $permissionFactory\n     * @param DisplayNotifyServiceInterface $displayNotifyService\n     */\n    public function __construct($store, $log, $dispatcher, $sanitizerService, $config, $pool, $dataSetFactory, $dataSetColumnFactory, $permissionFactory, $displayNotifyService)\n    {\n        $this->setCommonDependencies($store, $log, $dispatcher);\n        $this->sanitizerService = $sanitizerService;\n        $this->config = $config;\n        $this->pool = $pool;\n        $this->dataSetFactory = $dataSetFactory;\n        $this->dataSetColumnFactory = $dataSetColumnFactory;\n        $this->permissionFactory = $permissionFactory;\n        $this->displayNotifyService = $displayNotifyService;\n    }\n\n    /**\n     * @param $array\n     * @return \\Xibo\\Support\\Sanitizer\\SanitizerInterface\n     */\n    protected function getSanitizer($array)\n    {\n        return $this->sanitizerService->getSanitizer($array);\n    }\n\n    /**\n     * Clone\n     */\n    public function __clone()\n    {\n        $this->dataSetId = null;\n\n        $this->columns = array_map(function ($object) { return clone $object; }, $this->columns);\n    }\n\n    /**\n     * @return int\n     */\n    public function getId()\n    {\n        return $this->dataSetId;\n    }\n\n    public function getPermissionFolderId()\n    {\n        return $this->permissionsFolderId;\n    }\n\n    /**\n     * @return int\n     */\n    public function getOwnerId()\n    {\n        return $this->userId;\n    }\n\n    /**\n     * Set the owner of this DataSet\n     * @param $userId\n     */\n    public function setOwner($userId)\n    {\n        $this->userId = $userId;\n    }\n\n    /**\n     * Get the Count of Records in the last getData()\n     * @return int\n     */\n    public function countLast()\n    {\n        return $this->countLast;\n    }\n\n    /**\n     * Get the Display Notify Service\n     * @return DisplayNotifyServiceInterface\n     */\n    public function getDisplayNotifyService(): DisplayNotifyServiceInterface\n    {\n        return $this->displayNotifyService->init();\n    }\n\n    /**\n     * Get Column\n     * @param int[Optional] $dataSetColumnId\n     * @return DataSetColumn[]|DataSetColumn\n     * @throws NotFoundException when the heading is provided and the column cannot be found\n     */\n    public function getColumn($dataSetColumnId = 0)\n    {\n        $this->load();\n\n        if ($dataSetColumnId != 0) {\n\n            foreach ($this->columns as $column) {\n                /* @var DataSetColumn $column */\n                if ($column->dataSetColumnId == $dataSetColumnId)\n                    return $column;\n            }\n\n            throw new NotFoundException(sprintf(__('Column %s not found'), $dataSetColumnId));\n\n        } else {\n            return $this->columns;\n        }\n    }\n\n    /**\n     * Get Column\n     * @param string $dataSetColumn\n     * @return DataSetColumn[]|DataSetColumn\n     * @throws NotFoundException when the heading is provided and the column cannot be found\n     */\n    public function getColumnByName($dataSetColumn)\n    {\n        $this->load();\n\n        foreach ($this->columns as $column) {\n            /* @var DataSetColumn $column */\n            if ($column->heading == $dataSetColumn)\n                return $column;\n        }\n\n        throw new NotFoundException(sprintf(__('Column %s not found'), $dataSetColumn));\n    }\n\n    /**\n     * @param string[] $columns Column Names to select\n     * @return array\n     * @throws InvalidArgumentException\n     */\n    public function getUniqueColumnValues($columns)\n    {\n        $this->load();\n\n        $select = '';\n        foreach ($columns as $heading) {\n            // Check this exists\n            $found = false;\n            foreach ($this->columns as $column) {\n                if ($column->heading == $heading) {\n                    // Formula column?\n                    if ($column->dataSetColumnTypeId == 2) {\n                        $select .= str_replace($this->blackList, '', htmlspecialchars_decode($column->formula, ENT_QUOTES)) . ' AS `' . $column->heading . '`,';\n                    }\n                    else {\n                        $select .= '`' . $column->heading . '`,';\n                    }\n                    $found = true;\n                    break;\n                }\n            }\n\n            if (!$found) {\n                throw new InvalidArgumentException(__('Unknown Column ' . $heading));\n            }\n        }\n        $select = rtrim($select, ',');\n        // $select is safe\n\n        return $this->getStore()->select('SELECT DISTINCT ' . $select . ' FROM `dataset_' . $this->dataSetId . '`', []);\n    }\n\n    /**\n     * Get DataSet Data\n     * @param array $filterBy\n     * @param array $options\n     * @return array\n     * @throws NotFoundException\n     */\n    public function getData($filterBy = [], $options = [])\n    {\n\n        $sanitizer = $this->getSanitizer($filterBy);\n\n        $start = $sanitizer->getInt('start', ['default' => 0]);\n        $size = $sanitizer->getInt('size', ['default' => 0]);\n        $filter = $filterBy['filter'] ?? '';\n        $ordering = $sanitizer->getString('order');\n        $displayId = $sanitizer->getInt('displayId', ['default' => 0]);\n\n        $options = array_merge([\n            'includeFormulaColumns' => true,\n            'requireTotal' => true\n        ], $options);\n\n        // Params\n        $params = [];\n\n        // Sanitize the filter options provided\n        // Get the Latitude and Longitude ( might be used in a formula )\n        if ($displayId == 0) {\n            $displayGeoLocation = \"GEOMFROMTEXT('POINT(\" . $this->config->getSetting('DEFAULT_LAT') . \" \" . $this->config->getSetting('DEFAULT_LONG') . \")')\";\n        }\n        else {\n            $displayGeoLocation = '(SELECT GeoLocation FROM `display` WHERE DisplayID = :displayId)';\n            $params['displayId'] = $displayId;\n        }\n\n        // Build a SQL statement, based on the columns for this dataset\n        $this->load();\n\n        $select  = 'SELECT * FROM ( ';\n        $body = 'SELECT id';\n\n        // Keep track of the columns we are allowed to order by\n        $allowedOrderCols = ['id'];\n\n        // Are there any client side formulas\n        $clientSideFormula = [];\n\n        // Select (columns)\n        foreach ($this->getColumn() as $column) {\n            /* @var DataSetColumn $column */\n            if ($column->dataSetColumnTypeId == 2 && !$options['includeFormulaColumns']) {\n                continue;\n            }\n\n            // Formula column?\n            if ($column->dataSetColumnTypeId == 2) {\n                // Is this a client side column?\n                if (substr($column->formula, 0, 1) === '$') {\n                    $clientSideFormula[] = $column;\n                    continue;\n                }\n\n                $formula = str_ireplace($this->blackList, '', htmlspecialchars_decode($column->formula, ENT_QUOTES));\n                $formula = str_replace('[DisplayId]', $displayId, $formula);\n\n                $heading = str_replace('[DisplayGeoLocation]', $displayGeoLocation, $formula) . ' AS `' . $column->heading . '`';\n            } else {\n                $heading = '`' . $column->heading . '`';\n            }\n\n            $allowedOrderCols[] = $column->heading;\n\n            $body .= ', ' . $heading;\n        }\n\n        $body .= ' FROM `dataset_' . $this->dataSetId . '`) dataset WHERE 1 = 1 ';\n\n        // Filtering\n        if ($filter != '') {\n            // Support display filtering.\n            $filter = str_replace('[DisplayId]', $displayId, $filter);\n            $filter = str_ireplace($this->blackList, '', $filter);\n\n            $body .= ' AND ' . $filter;\n        }\n\n        // Filter by ID\n        if ($sanitizer->getInt('id') !== null) {\n            $body .= ' AND id = :id ';\n            $params['id'] = $sanitizer->getInt('id');\n        }\n\n        // Ordering\n        $order = '';\n        if ($ordering != '') {\n            $order = ' ORDER BY ';\n\n            $ordering = explode(',', $ordering);\n\n            foreach ($ordering as $orderPair) {\n                // Sanitize the clause\n                $sanitized = str_replace('`', '', str_replace(' ASC', '', str_replace(' DESC', '', $orderPair)));\n\n                // Check allowable\n                if (!in_array($sanitized, $allowedOrderCols)) {\n                    $found = false;\n                    $this->getLog()->info('Potentially disallowed column: ' . $sanitized);\n                    // the gridRenderSort will strip spaces on column names go through allowed order columns\n                    // and see if we can find a match by stripping spaces from the heading\n                    foreach ($allowedOrderCols as $allowedOrderCol) {\n                        $this->getLog()->info('Checking spaces in original name : ' . $sanitized);\n                        if (str_replace(' ', '', $allowedOrderCol) === $sanitized) {\n                            $found = true;\n                            // put the column heading with the space as sanitized to make sql happy.\n                            $sanitized = $allowedOrderCol;\n                        }\n                    }\n\n                    // we tried, but it was not found, omit this pair\n                    if (!$found) {\n                        continue;\n                    }\n                }\n\n                // Substitute\n                if (strripos($orderPair, ' DESC')) {\n                    $order .= sprintf(' `%s`  DESC,', $sanitized);\n                } else if (strripos($orderPair, ' ASC')) {\n                    $order .= sprintf(' `%s`  ASC,', $sanitized);\n                } else {\n                    $order .= sprintf(' `%s`,', $sanitized);\n                }\n            }\n\n            $order = trim($order, ',');\n\n            // if after all that we still do not have any column name to order by, default to order by id\n            if (trim($order) === 'ORDER BY') {\n                $order = ' ORDER BY id ';\n            }\n        } else {\n            $order = ' ORDER BY id ';\n        }\n\n        // Limit\n        $limit = '';\n        if ($start != 0 || $size != 0) {\n            // Substitute in\n\n            // handle case where lower limit is set to > 0 and upper limit to 0 https://github.com/xibosignage/xibo/issues/2187\n            // it is with <= 0 because in some Widgets we calculate the size as upper - lower, https://github.com/xibosignage/xibo/issues/2263.\n            if ($start != 0 && $size <= 0) {\n                $size = PHP_INT_MAX;\n            }\n\n            $limit = sprintf(' LIMIT %d, %d ', $start, $size);\n        }\n\n        $sql = $select . $body . $order . $limit;\n\n        $data = $this->getStore()->select($sql, $params);\n\n        // If there are limits run some SQL to work out the full payload of rows\n        if ($options['requireTotal']) {\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total FROM (' . $body, $params);\n            $this->countLast = intval($results[0]['total']);\n        }\n\n        // Are there any client side formulas?\n        if (count($clientSideFormula) > 0) {\n            $renderedData = [];\n            foreach ($data as $item) {\n                foreach ($clientSideFormula as $column) {\n                    // Run the formula and add the resulting value to the list\n                    $value = null;\n                    try {\n                        if (substr($column->formula, 0, strlen('$dateFormat(')) === '$dateFormat(') {\n                            // Pull out the column name and date format\n                            $details = explode(',', str_replace(')', '', str_replace('$dateFormat(', '', $column->formula)));\n\n                            if (isset($details[2])) {\n                                $language = str_replace(' ', '', $details[2]);\n                            } else {\n                                $language = $this->config->getSetting('DEFAULT_LANGUAGE', 'en_GB');\n                            }\n\n                            $carbonFactory = new Factory(['locale' => $language], Carbon::class);\n                            $value = $carbonFactory->parse($item[$details[0]])->translatedFormat($details[1]);\n                        }\n                    } catch (\\Exception $e) {\n                        $this->getLog()->error('DataSet client side formula error in dataSetId ' . $this->dataSetId . ' with column formula ' . $column->formula);\n                    }\n\n                    $item[$column->heading] = $value;\n                }\n\n                $renderedData[] = $item;\n            }\n        } else {\n            $renderedData = $data;\n        }\n\n        return $renderedData;\n    }\n\n    /**\n     * Assign a column\n     * @param DataSetColumn $column\n     */\n    public function assignColumn($column)\n    {\n        $this->load();\n\n        // Set the dataSetId\n        $column->dataSetId = $this->dataSetId;\n\n        // Set the column order if we need to\n        if ($column->columnOrder == 0)\n            $column->columnOrder = count($this->columns) + 1;\n\n        $this->columns[] = $column;\n    }\n\n    /**\n     * Has Data?\n     * @return bool\n     */\n    public function hasData()\n    {\n        return $this->getStore()->exists('SELECT id FROM `dataset_' . $this->dataSetId . '` LIMIT 1', []);\n    }\n\n    /**\n     * Returns a Timestamp for the next Synchronisation process.\n     * @return int Seconds\n     */\n    public function getNextSyncTime()\n    {\n        return $this->lastSync + $this->refreshRate;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isTruncateEnabled()\n    {\n        return $this->clearRate !== 0;\n    }\n\n    /**\n     * Returns a Timestamp for the next Clearing process.\n     * @return int Seconds\n     */\n    public function getNextClearTime()\n    {\n        return $this->lastClear + $this->clearRate;\n    }\n\n    /**\n     * Returns if there is a consolidation field and method present or not.\n     * @return boolean\n     */\n    public function doConsolidate()\n    {\n        return ($this->summarizeField != null) && ($this->summarizeField != '')\n            && ($this->summarize != null) && ($this->summarize != '');\n    }\n\n    /**\n     * Returns the last Part of the Fieldname on which the consolidation should be applied on\n     * @return String\n     */\n    public function getConsolidationField()\n    {\n        $pos = strrpos($this->summarizeField, '.');\n        if ($pos !== false) {\n            return substr($this->summarizeField, $pos + 1);\n        }\n        return $this->summarizeField;\n    }\n\n    /**\n     * Tests if this DataSet contains parameters for getting values on the dependant DataSet\n     * @return boolean\n     */\n    public function containsDependantFieldsInRequest()\n    {\n        return strpos($this->postData, '{{COL.') !== false || strpos($this->uri, '{{COL.') !== false;\n    }\n\n    /**\n     * Validate\n     * @throws InvalidArgumentException\n     * @throws DuplicateEntityException\n     */\n    public function validate()\n    {\n        if (!v::stringType()->notEmpty()->length(null, 50)->validate($this->dataSet)) {\n            throw new InvalidArgumentException(__('Name must be between 1 and 50 characters'), 'dataSet');\n        }\n\n        if ($this->description != null && !v::stringType()->length(null, 254)->validate($this->description)) {\n            throw new InvalidArgumentException(__('Description can not be longer than 254 characters'), 'description');\n        }\n\n        // If we are a remote dataset do some additional checks\n        if ($this->isRemote === 1) {\n            if (!v::stringType()->notEmpty()->validate($this->uri)) {\n                throw new InvalidArgumentException(__('A remote DataSet must have a URI.'), 'uri');\n            }\n\n            if ($this->rowLimit > $this->config->getSetting('DATASET_HARD_ROW_LIMIT')) {\n                throw new InvalidArgumentException(__('DataSet row limit cannot be larger than the CMS dataSet row limit'));\n            }\n        }\n\n        try {\n            $existing = $this->dataSetFactory->getByName($this->dataSet, $this->userId);\n\n            if ($this->dataSetId == 0 || $this->dataSetId != $existing->dataSetId) {\n                throw new DuplicateEntityException(sprintf(__('There is already dataSet called %s. Please choose another name.'), $this->dataSet));\n            }\n        }\n        catch (NotFoundException $e) {\n            // This is good\n        }\n    }\n\n    /**\n     * Load all known information\n     */\n    public function load()\n    {\n        if ($this->loaded || $this->dataSetId == 0)\n            return;\n\n        // Load Columns\n        $this->columns = $this->dataSetColumnFactory->getByDataSetId($this->dataSetId);\n\n        // Load Permissions\n        $this->permissions = $this->permissionFactory->getByObjectId(get_class($this), $this->getId());\n\n        $this->loaded = true;\n    }\n\n    /**\n     * Save this DataSet\n     * @param array $options\n     * @throws InvalidArgumentException\n     * @throws DuplicateEntityException\n     */\n    public function save($options = [])\n    {\n        $options = array_merge(['validate' => true, 'saveColumns' => true], $options);\n\n        if ($options['validate']) {\n            $this->validate();\n        }\n\n        if ($this->dataSetId == 0) {\n            $this->add();\n        } else {\n            $this->edit();\n        }\n\n        // Columns\n        if ($options['saveColumns']) {\n            foreach ($this->columns as $column) {\n                /* @var \\Xibo\\Entity\\DataSetColumn $column */\n                $column->dataSetId = $this->dataSetId;\n                $column->save();\n            }\n        }\n\n        // We've been touched\n        $this->setActive();\n\n        // Notify Displays?\n        $this->notify();\n    }\n\n    /**\n     * @param int $time\n     * @return $this\n     */\n    public function saveLastSync($time)\n    {\n        $this->lastSync = $time;\n\n        $this->getStore()->update('UPDATE `dataset` SET lastSync = :lastSync WHERE dataSetId = :dataSetId', [\n            'dataSetId' => $this->dataSetId,\n            'lastSync' => $this->lastSync\n        ]);\n\n        return $this;\n    }\n\n    /**\n     * @param int $time\n     * @return $this\n     */\n    public function saveLastClear($time)\n    {\n        $this->lastSync = $time;\n\n        $this->getStore()->update('UPDATE `dataset` SET lastClear = :lastClear WHERE dataSetId = :dataSetId', [\n            'dataSetId' => $this->dataSetId,\n            'lastClear' => $this->lastClear\n        ]);\n\n        return $this;\n    }\n\n    /**\n     * Is this DataSet active currently\n     * @return bool\n     */\n    public function isActive()\n    {\n        $cache = $this->pool->getItem('/dataset/accessed/' . $this->dataSetId);\n        return $cache->isHit();\n    }\n\n    /**\n     * Indicate that this DataSet has been accessed recently\n     * @return $this\n     */\n    public function setActive()\n    {\n        $this->getLog()->debug('Setting ' . $this->dataSetId . ' as active');\n\n        $cache = $this->pool->getItem('/dataset/accessed/' . $this->dataSetId);\n        $cache->set('true');\n        $cache->expiresAfter(intval($this->config->getSetting('REQUIRED_FILES_LOOKAHEAD')) * 1.5);\n        $this->pool->saveDeferred($cache);\n        return $this;\n    }\n\n    /**\n     * Delete DataSet\n     * @throws ConfigurationException\n     * @throws InvalidArgumentException\n     */\n    public function delete()\n    {\n        $this->load();\n\n        if ($this->isLookup) {\n            throw new ConfigurationException(__('Lookup Tables cannot be deleted'));\n        }\n\n        // check if any other DataSet depends on this DataSet\n        if ($this->getStore()->exists(\n            'SELECT dataSetId FROM dataset WHERE runsAfter = :runsAfter AND dataSetId <> :dataSetId',\n            [\n                'runsAfter' => $this->dataSetId,\n                'dataSetId' => $this->dataSetId\n            ])) {\n            throw new InvalidArgumentException(__('Cannot delete because this DataSet is set as dependent DataSet for another DataSet'), 'dataSetId');\n        }\n\n        // Make sure we're able to delete\n        if ($this->getStore()->exists('\n            SELECT widgetId \n              FROM `widgetoption`\n              WHERE `widgetoption`.type = \\'attrib\\'\n                AND `widgetoption`.option = \\'dataSetId\\'\n                AND `widgetoption`.value = :dataSetId\n        ', ['dataSetId' => $this->dataSetId])) {\n            throw new InvalidArgumentException(__('Cannot delete because DataSet is in use on one or more Layouts.'), 'dataSetId');\n        }\n\n        // Delete Permissions\n        foreach ($this->permissions as $permission) {\n            /* @var Permission $permission */\n            $permission->deleteAll();\n        }\n\n        // Delete Columns\n        foreach ($this->columns as $column) {\n            /* @var \\Xibo\\Entity\\DataSetColumn $column */\n            $column->delete();\n        }\n\n        // Delete any dataSet rss\n        $this->getStore()->update('DELETE FROM `datasetrss` WHERE dataSetId = :dataSetId', ['dataSetId' => $this->dataSetId]);\n\n        // Delete the data set\n        $this->getStore()->update('DELETE FROM `dataset` WHERE dataSetId = :dataSetId', ['dataSetId' => $this->dataSetId]);\n\n        // The last thing we do is drop the dataSet table\n        $this->dropTable();\n    }\n\n    /**\n     * Delete all data\n     */\n    public function deleteData()\n    {\n        // The last thing we do is drop the dataSet table\n        $this->getStore()->update('TRUNCATE TABLE `dataset_' . $this->dataSetId . '`', []);\n        $this->getStore()->update('ALTER TABLE `dataset_' . $this->dataSetId . '` AUTO_INCREMENT = 1', []);\n        $this->getStore()->commitIfNecessary();\n    }\n\n    /**\n     * Add\n     */\n    private function add()\n    {\n        $columns = 'DataSet, Description, UserID, `code`, `isLookup`, `isRemote`, `lastDataEdit`, `lastClear`, `folderId`, `permissionsFolderId`';\n        $values = ':dataSet, :description, :userId, :code, :isLookup, :isRemote, :lastDataEdit, :lastClear, :folderId, :permissionsFolderId';\n\n        $params = [\n            'dataSet' => $this->dataSet,\n            'description' => $this->description,\n            'userId' => $this->userId,\n            'code' => ($this->code == '') ? null : $this->code,\n            'isLookup' => $this->isLookup,\n            'isRemote' => $this->isRemote,\n            'lastDataEdit' => 0,\n            'lastClear' => 0,\n            'folderId' => ($this->folderId === null) ? 1 : $this->folderId,\n            'permissionsFolderId' => ($this->permissionsFolderId == null) ? 1 : $this-> permissionsFolderId\n        ];\n\n        // Insert the extra columns we expect for a remote DataSet\n        if ($this->isRemote === 1) {\n            $columns .= ', `method`, `uri`, `postData`, `authentication`, `username`, `password`, `customHeaders`, `userAgent`, `refreshRate`, `clearRate`, `truncateOnEmpty`, `runsAfter`, `dataRoot`, `lastSync`, `summarize`, `summarizeField`, `sourceId`, `ignoreFirstRow`, `rowLimit`, `limitPolicy`, `csvSeparator`';\n            $values .= ', :method, :uri, :postData, :authentication, :username, :password, :customHeaders, :userAgent, :refreshRate, :clearRate, :truncateOnEmpty, :runsAfter, :dataRoot, :lastSync, :summarize, :summarizeField, :sourceId, :ignoreFirstRow, :rowLimit, :limitPolicy, :csvSeparator';\n\n            $params['method'] = $this->method;\n            $params['uri'] = $this->uri;\n            $params['postData'] = $this->postData;\n            $params['authentication'] = $this->authentication;\n            $params['username'] = $this->username;\n            $params['password'] = $this->password;\n            $params['customHeaders'] = $this->customHeaders;\n            $params['userAgent'] = $this->userAgent;\n            $params['refreshRate'] = $this->refreshRate;\n            $params['clearRate'] = $this->clearRate;\n            $params['truncateOnEmpty'] = $this->truncateOnEmpty ?? 0;\n            $params['runsAfter'] = $this->runsAfter;\n            $params['dataRoot'] = $this->dataRoot;\n            $params['summarize'] = $this->summarize;\n            $params['summarizeField'] = $this->summarizeField;\n            $params['sourceId'] = $this->sourceId;\n            $params['ignoreFirstRow'] = $this->ignoreFirstRow;\n            $params['lastSync'] = 0;\n            $params['rowLimit'] = $this->rowLimit;\n            $params['limitPolicy'] = $this->limitPolicy;\n            $params['csvSeparator'] = $this->csvSeparator;\n        }\n\n        // Do the insert\n        $this->dataSetId = $this->getStore()->insert('INSERT INTO `dataset` (' . $columns . ') VALUES (' . $values . ')', $params);\n\n        // Create the data table for this dataSet\n        $this->createTable();\n    }\n\n    /**\n     * Edit\n     */\n    private function edit()\n    {\n        $sql = 'DataSet = :dataSet, Description = :description, userId = :userId, lastDataEdit = :lastDataEdit, `code` = :code, `isLookup` = :isLookup, `isRemote` = :isRemote, `folderId` = :folderId, `permissionsFolderId` = :permissionsFolderId ';\n        $params = [\n            'dataSetId' => $this->dataSetId,\n            'dataSet' => $this->dataSet,\n            'description' => $this->description,\n            'userId' => $this->userId,\n            'lastDataEdit' => $this->lastDataEdit,\n            'code' => $this->code,\n            'isLookup' => $this->isLookup,\n            'isRemote' => $this->isRemote,\n            'folderId' => $this->folderId,\n            'permissionsFolderId' => $this->permissionsFolderId\n        ];\n\n        if ($this->isRemote) {\n            $sql .= ', method = :method, uri = :uri, postData = :postData, authentication = :authentication, `username` = :username, `password` = :password, `customHeaders` = :customHeaders, `userAgent` = :userAgent, refreshRate = :refreshRate, clearRate = :clearRate, truncateOnEmpty = :truncateOnEmpty, runsAfter = :runsAfter, `dataRoot` = :dataRoot, `summarize` = :summarize, `summarizeField` = :summarizeField, `sourceId` = :sourceId, `ignoreFirstRow` = :ignoreFirstRow , `rowLimit` = :rowLimit, `limitPolicy` = :limitPolicy, `csvSeparator` = :csvSeparator ';\n\n            $params['method'] = $this->method;\n            $params['uri'] = $this->uri;\n            $params['postData'] = $this->postData;\n            $params['authentication'] = $this->authentication;\n            $params['username'] = $this->username;\n            $params['password'] = $this->password;\n            $params['customHeaders'] = $this->customHeaders;\n            $params['userAgent'] = $this->userAgent;\n            $params['refreshRate'] = $this->refreshRate;\n            $params['clearRate'] = $this->clearRate;\n            $params['truncateOnEmpty'] = $this->truncateOnEmpty ?? 0;\n            $params['runsAfter'] = $this->runsAfter;\n            $params['dataRoot'] = $this->dataRoot;\n            $params['summarize'] = $this->summarize;\n            $params['summarizeField'] = $this->summarizeField;\n            $params['sourceId'] = $this->sourceId;\n            $params['ignoreFirstRow'] = $this->ignoreFirstRow;\n            $params['rowLimit'] = $this->rowLimit;\n            $params['limitPolicy'] = $this->limitPolicy;\n            $params['csvSeparator'] = $this->csvSeparator;\n        }\n\n        $this->getStore()->update('UPDATE dataset SET ' . $sql . '  WHERE DataSetID = :dataSetId', $params);\n    }\n\n    /**\n     * Create the realised table structure for this DataSet\n     */\n    private function createTable()\n    {\n        // Create the data table for this dataset\n        $this->getStore()->update('\n          CREATE TABLE `dataset_' . $this->dataSetId . '` (\n            `id` int(11) NOT NULL AUTO_INCREMENT,\n            PRIMARY KEY (`id`)\n          ) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1\n        ', []);\n    }\n\n    private function dropTable()\n    {\n        $this->getStore()->update('DROP TABLE IF EXISTS dataset_' . $this->dataSetId, [], 'isolated', false, false, true);\n    }\n\n    /**\n     * Rebuild the dataSet table\n     * @throws GeneralException\n     */\n    public function rebuild()\n    {\n        $this->load();\n\n        // Drop the data table\n        $this->dropTable();\n\n        // Add the data table\n        $this->createTable();\n\n        foreach ($this->columns as $column) {\n            /* @var \\Xibo\\Entity\\DataSetColumn $column */\n            $column->dataSetId = $this->dataSetId;\n            $column->save(['rebuilding' => true]);\n        }\n    }\n\n    /**\n     * Notify displays of this campaign change\n     */\n    public function notify()\n    {\n        $this->getLog()->debug('DataSet ' . $this->dataSetId . ' wants to notify');\n\n        $this->getDisplayNotifyService()->collectNow()->notifyByDataSetId($this->dataSetId);\n    }\n\n    /**\n     * Add a row\n     * @param array $row\n     * @return int\n     */\n    public function addRow($row)\n    {\n        $this->getLog()->debug('Adding row ' . var_export($row, true));\n\n        // Update the last edit date on this dataSet\n        $this->lastDataEdit = Carbon::now()->format('U');\n\n        // Build a query to insert\n        $keys = array_keys($row);\n        $keys[] = 'id';\n\n        $values = array_values($row);\n        $values[] = NULL;\n\n        $sql = 'INSERT INTO `dataset_' . $this->dataSetId . '` (`' . implode('`, `', $keys) . '`) VALUES (' . implode(',', array_fill(0, count($values), '?')) . ')';\n\n        return $this->getStore()->insert($sql, $values);\n    }\n\n    /**\n     * Edit a row\n     * @param int $rowId\n     * @param array $row\n     */\n    public function editRow($rowId, $row)\n    {\n        $this->getLog()->debug(sprintf('Editing row %s', var_export($row, true)));\n\n        // Update the last edit date on this dataSet\n        $this->lastDataEdit = Carbon::now()->format('U');\n\n        // Params\n        $params = ['id' => $rowId];\n\n        // Generate a SQL statement\n        $sql = 'UPDATE `dataset_' . $this->dataSetId . '` SET';\n\n        $i = 0;\n        foreach ($row as $key => $value) {\n            $i++;\n            $sql .= ' `' . $key . '` = :value' . $i . ',';\n            $params['value' . $i] = $value;\n        }\n\n        $sql = rtrim($sql, ',');\n\n        $sql .= ' WHERE `id` = :id ';\n\n\n\n        $this->getStore()->update($sql, $params);\n    }\n\n    /**\n     * Delete Row\n     * @param $rowId\n     */\n    public function deleteRow($rowId)\n    {\n        $this->lastDataEdit = Carbon::now()->format('U');\n\n        $this->getStore()->update('DELETE FROM `dataset_' . $this->dataSetId . '` WHERE id = :id', [\n            'id' => $rowId\n        ]);\n    }\n\n    /**\n     * Copy Row\n     * @param int $dataSetIdSource\n     * @param int $dataSetIdTarget\n     */\n    public function copyRows($dataSetIdSource, $dataSetIdTarget)\n    {\n        $this->getStore()->insert('INSERT INTO `dataset_' . $dataSetIdTarget . '`  SELECT * FROM `dataset_' . $dataSetIdSource . '` ' ,[]);\n    }\n\n    /**\n     * Clear DataSet cache\n     */\n    public function clearCache()\n    {\n        $this->getLog()->debug('Force sync detected, clear cache for remote dataSet ID ' . $this->dataSetId);\n        $this->pool->deleteItem('/dataset/cache/' . $this->dataSetId);\n    }\n}\n", "<?php\n/*\n * Copyright (C) 2023 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nnamespace Xibo\\Factory;\n\n\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Xibo\\Entity\\User;\nuse Xibo\\Helper\\SanitizerService;\nuse Xibo\\Service\\BaseDependenciesService;\nuse Xibo\\Service\\LogServiceInterface;\nuse Xibo\\Storage\\StorageServiceInterface;\n\n/**\n * Class BaseFactory\n * @package Xibo\\Factory\n */\nclass BaseFactory\n{\n    /**\n     * Count records last query\n     * @var int\n     */\n    protected $_countLast = 0;\n\n    /**\n     * @var StorageServiceInterface\n     */\n    private $store;\n\n    /**\n     * @var LogServiceInterface\n     */\n    private $log;\n\n    /**\n     * @var SanitizerService\n     */\n    private $sanitizerService;\n\n    /**\n     * @var User\n     */\n    private $user;\n\n    /**\n     * @var UserFactory\n     */\n    private $userFactory;\n\n    /**\n     * @var BaseDependenciesService\n     */\n    private $baseDependenciesService;\n\n    /**\n     * @param BaseDependenciesService $baseDependenciesService\n     */\n    public function useBaseDependenciesService(BaseDependenciesService $baseDependenciesService)\n    {\n        $this->baseDependenciesService = $baseDependenciesService;\n    }\n\n    /**\n     * Set Acl Dependencies\n     * @param User $user\n     * @param UserFactory $userFactory\n     * @return $this\n     */\n    public function setAclDependencies($user, $userFactory)\n    {\n        $this->user = $user;\n        $this->userFactory = $userFactory;\n        return $this;\n    }\n\n    /**\n     * Get Store\n     * @return StorageServiceInterface\n     */\n    protected function getStore()\n    {\n        return $this->baseDependenciesService->getStore();\n    }\n\n    /**\n     * Get Log\n     * @return LogServiceInterface\n     */\n    protected function getLog()\n    {\n        return $this->baseDependenciesService->getLogger();\n    }\n\n    /**\n     * @return SanitizerService\n     */\n    protected function getSanitizerService()\n    {\n        return $this->baseDependenciesService->getSanitizer();\n    }\n\n    /**\n     * Get Sanitizer\n     * @param $array\n     * @return \\Xibo\\Support\\Sanitizer\\SanitizerInterface\n     */\n    protected function getSanitizer($array)\n    {\n        return $this->getSanitizerService()->getSanitizer($array);\n    }\n\n    /**\n     * @return \\Xibo\\Support\\Validator\\ValidatorInterface\n     */\n    protected function getValidator()\n    {\n        return $this->getSanitizerService()->getValidator();\n    }\n\n    /**\n     * Get User\n     * @return User\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * Get User Factory\n     * @return UserFactory\n     */\n    public function getUserFactory()\n    {\n        return $this->userFactory;\n    }\n\n    /**\n     * @return \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface\n     */\n    public function getDispatcher(): EventDispatcherInterface\n    {\n        return $this->baseDependenciesService->getDispatcher();\n    }\n\n    /**\n     * Count of records returned for the last query.\n     * @return int\n     */\n    public function countLast()\n    {\n        return $this->_countLast;\n    }\n\n    /**\n     * View Permission SQL\n     * @param $entity\n     * @param $sql\n     * @param $params\n     * @param $idColumn\n     * @param null $ownerColumn\n     * @param array $filterBy\n     * @throws \\Xibo\\Support\\Exception\\NotFoundException\n     */\n    public function viewPermissionSql(\n        $entity,\n        &$sql,\n        &$params,\n        $idColumn,\n        $ownerColumn = null,\n        $filterBy = [],\n        $permissionFolderIdColumn = null,\n        $isPerformDoohCheck = true\n    ) {\n        $parsedBody = $this->getSanitizer($filterBy);\n        $checkUserId = $parsedBody->getInt('userCheckUserId');\n\n        if ($checkUserId !== null) {\n            $this->getLog()->debug(sprintf('Checking permissions against a specific user: %d', $checkUserId));\n            $user = $this->getUserFactory()->getById($checkUserId);\n        }\n        else {\n            $user = $this->getUser();\n\n            if ($user !== null)\n                $this->getLog()->debug(sprintf('Checking permissions against the logged in user: ID: %d, Name: %s, UserType: %d', $user->userId, $user->userName, $user->userTypeId));\n        }\n\n        $permissionSql = '';\n\n        // Has the user check been disabled? 0 = no it hasn't\n        $performUserCheck = $parsedBody->getCheckbox('disableUserCheck') == 0;\n\n        // Check the whether we need to restrict to the DOOH user.\n        // we only do this for entities which have an owner, and only if the user check hasn't been disabled.\n        if ($ownerColumn !== null && $performUserCheck && $isPerformDoohCheck) {\n            if (($user->userTypeId == 1 && $user->showContentFrom == 2) || $user->userTypeId == 4) {\n                // DOOH only\n                $permissionSql .= ' AND ' . $ownerColumn . ' IN (SELECT userId FROM user WHERE userTypeId = 4) ';\n            } elseif ($user->showContentFrom != 3) {\n                // Standard only\n                $permissionSql .= ' AND ' . $ownerColumn . ' IN (SELECT userId FROM user WHERE userTypeId <> 4) ';\n            }\n        }\n\n        if ($performUserCheck && !$user->isSuperAdmin()) {\n            $permissionSql .= '\n              AND (' . $idColumn . ' IN (\n                SELECT `permission`.objectId\n                  FROM `permission`\n                    INNER JOIN `permissionentity`\n                        ON `permissionentity`.entityId = `permission`.entityId\n                    INNER JOIN `group`\n                        ON `group`.groupId = `permission`.groupId\n                    INNER JOIN `lkusergroup`\n                        ON `lkusergroup`.groupId = `group`.groupId\n                    INNER JOIN `user`\n                        ON lkusergroup.UserID = `user`.UserID\n                 WHERE `permissionentity`.entity = :permissionEntity\n                    AND `user`.userId = :currentUserId\n                    AND `permission`.view = 1\n                 UNION ALL   \n                 SELECT `permission`.objectId\n                    FROM `permission`\n                        INNER JOIN `permissionentity`\n                            ON `permissionentity`.entityId = `permission`.entityId\n                        INNER JOIN `group`\n                            ON `group`.groupId = `permission`.groupId\n                    WHERE `permissionentity`.entity = :permissionEntity\n                        AND `group`.isEveryone = 1\n                        AND `permission`.view = 1\n              )\n            ';\n\n            $params['permissionEntity'] = $entity;\n            $params['currentUserId'] = $user->userId;\n\n            if ($ownerColumn != null) {\n                $permissionSql .= ' OR ' . $ownerColumn . ' = :currentUserId2';\n                $params['currentUserId2'] = $user->userId;\n            }\n\n            // Home folders (only for folder entity)\n            if ($entity === 'Xibo\\Entity\\Folder') {\n                $permissionSql .= ' OR folder.folderId = :permissionsHomeFolderId';\n                $permissionSql .= ' OR folder.permissionsFolderId = :permissionsHomeFolderId';\n                $params['permissionsHomeFolderId'] = $this->getUser()->homeFolderId;\n            }\n\n            // Group Admin?\n            if ($user->userTypeId == 2 && $ownerColumn != null) {\n                // OR the group admin and the owner of the media are in the same group\n                $permissionSql .= '\n                    OR (\n                        SELECT COUNT(lkUserGroupId)\n                          FROM `lkusergroup`\n                         WHERE userId = ' . $ownerColumn . '\n                            AND groupId IN (\n                                SELECT groupId\n                                  FROM `lkusergroup`\n                                 WHERE userId = :currentUserId3\n                            )\n                    ) > 0\n                ';\n\n                $params['currentUserId3'] = $user->userId;\n            }\n\n            if ($permissionFolderIdColumn != null) {\n                $permissionSql .= '\n                    OR ' . $permissionFolderIdColumn . ' IN (\n                        SELECT `permission`.objectId\n                            FROM `permission`\n                               INNER JOIN `permissionentity`\n                                 ON `permissionentity`.entityId = `permission`.entityId\n                               INNER JOIN `group`\n                                 ON `group`.groupId = `permission`.groupId\n                               INNER JOIN `lkusergroup`\n                                 ON `lkusergroup`.groupId = `group`.groupId\n                               INNER JOIN `user`\n                                 ON lkusergroup.UserID = `user`.UserID\n                            WHERE `permissionentity`.entity = :folderEntity\n                              AND `permission`.view = 1\n                              AND `user`.userId = :currentUserId\n                        UNION ALL   \n                         SELECT `permission`.objectId\n                            FROM `permission`\n                                INNER JOIN `permissionentity`\n                                    ON `permissionentity`.entityId = `permission`.entityId\n                                INNER JOIN `group`\n                                    ON `group`.groupId = `permission`.groupId\n                            WHERE `permissionentity`.entity = :folderEntity\n                                AND `group`.isEveryone = 1\n                                AND `permission`.view = 1\n                    )\n                ';\n\n                $params['folderEntity'] = 'Xibo\\Entity\\Folder';\n            }\n\n            $permissionSql .= ' )';\n\n            //$this->getLog()->debug('Permission SQL = %s', $permissionSql);\n        }\n\n        // Set out params\n        $sql = $sql . $permissionSql;\n    }\n\n    /**\n     * @param $variable\n     * @return array\n     */\n    protected function parseComparisonOperator($variable)\n    {\n        $operator = '=';\n        $allowedOperators = [\n            'less-than' => '<',\n            'greater-than' => '>',\n            'less-than-equal' => '<=',\n            'greater-than-equal' => '>='\n        ];\n\n        if (stripos($variable, '|') !== false) {\n            $variable = explode('|', $variable);\n\n            if (array_key_exists($variable[0], $allowedOperators)) {\n                $operator = $allowedOperators[$variable[0]];\n            }\n\n            $variable = $variable[1];\n        }\n\n        return [\n            'operator' => $operator,\n            'variable' => $variable\n        ];\n    }\n\n    /**\n     * Sets the name filter for all factories to use.\n     *\n     * @param string $tableName Table name\n     * @param string $tableColumn Column with the name\n     * @param array $terms An Array exploded by \",\" of the search names\n     * @param string $body Current SQL body passed by reference\n     * @param array $params Array of parameters passed by reference\n     * @param bool $useRegex flag to match against a regex pattern\n     */\n    public function nameFilter($tableName, $tableColumn, $terms, &$body, &$params, $useRegex = false, $logicalOperator = 'OR')\n    {\n        $i = 0;\n\n        $tableAndColumn = $tableName . '.' . $tableColumn;\n        // filter empty array elements, in an attempt to better handle spaces after `,`.\n        $filteredNames = array_filter($terms, function ($element) {\n            return is_string($element) && '' !== trim($element);\n        });\n\n        foreach ($filteredNames as $searchName) {\n            $i++;\n\n            // Trim/Sanitise\n            $searchName = trim($searchName);\n\n            // Discard any incompatible\n            if ($searchName === '-' || empty($searchName)) {\n                continue;\n            }\n\n            // Validate the logical operator\n            if (!in_array($logicalOperator, ['AND', 'OR'])) {\n                $this->getLog()->error('Invalid logical operator ' . $logicalOperator);\n                return;\n            }\n\n            // Not like, or like?\n            if (substr($searchName, 0, 1) == '-') {\n                if ($i === 1) {\n                    $body .= ' AND ( '.$tableAndColumn.' NOT RLIKE (:search'.$i.') ';\n                } else {\n                    $body .= ' ' . $logicalOperator . ' '.$tableAndColumn.' NOT RLIKE (:search'.$i.') ';\n                }\n                $params['search' . $i] = $useRegex ? ltrim(($searchName), '-') : preg_quote(ltrim(($searchName), '-'));\n            } else {\n                if ($i === 1) {\n                    $body .= ' AND ( '.$tableAndColumn.' RLIKE (:search'.$i.') ';\n                } else {\n                    $body .= ' ' . $logicalOperator . ' '.$tableAndColumn.' RLIKE (:search'.$i.') ';\n                }\n                $params['search' . $i] = $useRegex ? $searchName : preg_quote($searchName);\n            }\n        }\n\n        if (!empty($filteredNames)) {\n            $body .= ' ) ';\n        }\n    }\n\n    /**\n     * @param array $tags An array of tags\n     * @param string $lkTagTable name of the lktag table\n     * @param string $lkTagTableIdColumn name of the id column in the lktag table\n     * @param string $idColumn name of the id column in main table\n     * @param string $logicalOperator AND or OR logical operator passed from Factory\n     * @param string $operator exactTags passed from factory, determines if the search is LIKE or =\n     * @param string $body Current SQL body passed by reference\n     * @param array $params Array of parameters passed by reference\n     */\n    public function tagFilter($tags, $lkTagTable, $lkTagTableIdColumn, $idColumn, $logicalOperator, $operator, &$body, &$params)\n    {\n        $i = 0;\n\n        foreach ($tags as $tag) {\n            $i++;\n\n            $tagV = explode('|', $tag);\n\n            // search tag without value\n            if (!isset($tagV[1])) {\n                if ($i == 1) {\n                    $body .= ' WHERE `tag` ' . $operator . ' :tags' . $i;\n                } else {\n                    $body .= ' OR ' . ' `tag` ' . $operator . ' :tags' . $i;\n                }\n\n                if ($operator === '=') {\n                    $params['tags' . $i] = $tag;\n                } else {\n                    $params['tags' . $i] = '%' . $tag . '%';\n                }\n                // search tag only by value\n            } elseif ($tagV[0] == '') {\n                if ($i == 1) {\n                    $body .= ' WHERE `value` ' . $operator . ' :value' . $i;\n                } else {\n                    $body .= ' OR ' . ' `value` ' . $operator . ' :value' . $i;\n                }\n\n                if ($operator === '=') {\n                    $params['value' . $i] = $tagV[1];\n                } else {\n                    $params['value' . $i] = '%' . $tagV[1] . '%';\n                }\n                // search tag by both tag and value\n            } else {\n                if ($i == 1) {\n                    $body .= ' WHERE `tag` ' . $operator . ' :tags' . $i .\n                        ' AND value ' . $operator . ' :value' . $i;\n                } else {\n                    $body .= ' OR ' . ' `tag` ' . $operator . ' :tags' . $i .\n                        ' AND value ' . $operator . ' :value' . $i;\n                }\n\n                if ($operator === '=') {\n                    $params['tags' . $i] = $tagV[0];\n                    $params['value' . $i] = $tagV[1];\n                } else {\n                    $params['tags' . $i] = '%' . $tagV[0] . '%';\n                    $params['value' . $i] = '%' . $tagV[1] . '%';\n                }\n            }\n        }\n\n        if ($logicalOperator === 'AND' && count($tags) > 1) {\n            $body .= ' GROUP BY ' . $lkTagTable . '.' . $idColumn . ' HAVING count(' . $lkTagTable .'.'. $lkTagTableIdColumn .') = ' . count($tags);\n        }\n\n        $body .= ' ) ';\n    }\n}\n", "<?php\n/*\n * Copyright (C) 2023 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nnamespace Xibo\\Factory;\n\nuse Xibo\\Entity\\Display;\nuse Xibo\\Entity\\User;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\DisplayNotifyServiceInterface;\nuse Xibo\\Support\\Exception\\NotFoundException;\n\n/**\n * Class DisplayFactory\n * @package Xibo\\Factory\n */\nclass DisplayFactory extends BaseFactory\n{\n    /** @var  DisplayNotifyServiceInterface */\n    private $displayNotifyService;\n\n    /**\n     * @var ConfigServiceInterface\n     */\n    private $config;\n\n    /**\n     * @var DisplayGroupFactory\n     */\n    private $displayGroupFactory;\n\n    /**\n     * @var DisplayProfileFactory\n     */\n    private $displayProfileFactory;\n\n    /** @var FolderFactory */\n    private $folderFactory;\n\n    /**\n     * Construct a factory\n     * @param User $user\n     * @param UserFactory $userFactory\n     * @param DisplayNotifyServiceInterface $displayNotifyService\n     * @param ConfigServiceInterface $config\n     * @param DisplayGroupFactory $displayGroupFactory\n     * @param DisplayProfileFactory $displayProfileFactory\n     * @param FolderFactory $folderFactory\n     */\n    public function __construct($user, $userFactory, $displayNotifyService, $config, $displayGroupFactory, $displayProfileFactory, $folderFactory)\n    {\n        $this->setAclDependencies($user, $userFactory);\n\n        $this->displayNotifyService = $displayNotifyService;\n        $this->config = $config;\n        $this->displayGroupFactory = $displayGroupFactory;\n        $this->displayProfileFactory = $displayProfileFactory;\n        $this->folderFactory = $folderFactory;\n    }\n\n    /**\n     * Get the Display Notify Service\n     * @return DisplayNotifyServiceInterface\n     */\n    public function getDisplayNotifyService()\n    {\n        return $this->displayNotifyService->init();\n    }\n\n    /**\n     * Create Empty Display Object\n     * @return Display\n     */\n    public function createEmpty()\n    {\n        return new Display(\n            $this->getStore(),\n            $this->getLog(),\n            $this->getDispatcher(),\n            $this->config,\n            $this->displayGroupFactory,\n            $this->displayProfileFactory,\n            $this,\n            $this->folderFactory\n        );\n    }\n\n    /**\n     * @param int $displayId\n     * @param bool|false $showTags\n     * @return Display\n     * @throws NotFoundException\n     */\n    public function getById($displayId, $showTags = false)\n    {\n        $displays = $this->query(null, ['disableUserCheck' => 1, 'displayId' => $displayId, 'showTags' => $showTags]);\n\n        if (count($displays) <= 0) {\n            throw new NotFoundException();\n        }\n\n        return $displays[0];\n    }\n\n    /**\n     * @param string $licence\n     * @return Display\n     * @throws NotFoundException\n     */\n    public function getByLicence($licence)\n    {\n        if (empty($licence)) {\n            throw new NotFoundException(__('Hardware key cannot be empty'));\n        }\n\n        $displays = $this->query(null, ['disableUserCheck' => 1, 'license' => $licence]);\n\n        if (count($displays) <= 0) {\n            throw new NotFoundException();\n        }\n\n        return $displays[0];\n    }\n\n    /**\n     * @param int $displayGroupId\n     * @return Display[]\n     * @throws NotFoundException\n     */\n    public function getByDisplayGroupId($displayGroupId)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'displayGroupId' => $displayGroupId]);\n    }\n\n    /**\n     * @param array $displayGroupIds\n     * @return Display[]\n     * @throws NotFoundException\n     */\n    public function getByDisplayGroupIds(array $displayGroupIds)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'displayGroupIds' => $displayGroupIds]);\n    }\n\n    /**\n     * @param array $sortOrder\n     * @param array $filterBy\n     * @return Display[]\n     * @throws NotFoundException\n     */\n    public function query($sortOrder = null, $filterBy = [])\n    {\n        $parsedBody = $this->getSanitizer($filterBy);\n\n        if ($sortOrder === null) {\n            $sortOrder = ['display'];\n        }\n\n        $newSortOrder = [];\n        foreach ($sortOrder as $sort) {\n            if ($sort == '`clientSort`') {\n                $newSortOrder[] = '`clientType`';\n                $newSortOrder[] = '`clientCode`';\n                $newSortOrder[] = '`clientVersion`';\n                continue;\n            }\n\n            if ($sort == '`clientSort` DESC') {\n                $newSortOrder[] = '`clientType` DESC';\n                $newSortOrder[] = '`clientCode` DESC';\n                $newSortOrder[] = '`clientVersion` DESC';\n                continue;\n            }\n\n            if ($sort == '`isCmsTransferInProgress`') {\n                $newSortOrder[] = '`newCmsAddress`';\n                continue;\n            }\n\n            if ($sort == '`isCmsTransferInProgress` DESC') {\n                $newSortOrder[] = '`newCmsAddress` DESC';\n                continue;\n            }\n            $newSortOrder[] = $sort;\n        }\n        $sortOrder = $newSortOrder;\n\n        // SQL function for ST_X/X and ST_Y/Y dependent on MySQL version\n        $version = $this->getStore()->getVersion();\n\n        $functionPrefix = ($version === null || version_compare($version, '5.6.1', '>=')) ? 'ST_' : '';\n\n        $entries = [];\n        $params = [];\n        $select = '\n              SELECT display.displayId,\n                  display.display,\n                  display.defaultLayoutId,\n                  display.displayTypeId,\n                  display.venueId,\n                  display.address,\n                  display.isMobile,\n                  display.languages,\n                  `display_types`.displayType,\n                  display.screenSize,\n                  display.isOutdoor,\n                  display.customId,\n                  display.costPerPlay,\n                  display.impressionsPerPlay,\n                  layout.layout AS defaultLayout,\n                  display.license,\n                  display.licensed,\n                  display.licensed AS currentlyLicensed,\n                  display.loggedIn,\n                  display.lastAccessed,\n                  display.auditingUntil,\n                  display.inc_schedule AS incSchedule,\n                  display.email_alert AS emailAlert,\n                  display.alert_timeout AS alertTimeout,\n                  display.clientAddress,\n                  display.mediaInventoryStatus,\n                  display.macAddress,\n                  display.macAddress AS currentMacAddress,\n                  display.lastChanged,\n                  display.numberOfMacAddressChanges,\n                  display.lastWakeOnLanCommandSent,\n                  display.wakeOnLan AS wakeOnLanEnabled,\n                  display.wakeOnLanTime,\n                  display.broadCastAddress,\n                  display.secureOn,\n                  display.cidr,\n                  ' . $functionPrefix . 'X(display.GeoLocation) AS latitude,\n                  ' . $functionPrefix . 'Y(display.GeoLocation) AS longitude,\n                  display.client_type AS clientType,\n                  display.client_version AS clientVersion,\n                  display.client_code AS clientCode,\n                  display.displayProfileId,\n                  display.screenShotRequested,\n                  display.storageAvailableSpace,\n                  display.storageTotalSpace,\n                  displaygroup.displayGroupId,\n                  displaygroup.description,\n                  displaygroup.bandwidthLimit,\n                  displaygroup.createdDt,\n                  displaygroup.modifiedDt,\n                  displaygroup.folderId,\n                  displaygroup.permissionsFolderId,\n                  displaygroup.ref1,\n                  displaygroup.ref2,\n                  displaygroup.ref3,\n                  displaygroup.ref4,\n                  displaygroup.ref5,\n                  `display`.xmrChannel,\n                  `display`.xmrPubKey,\n                  `display`.lastCommandSuccess, \n                  `display`.deviceName, \n                  `display`.timeZone,\n                  `display`.overrideConfig,\n                  `display`.newCmsAddress,\n                  `display`.newCmsKey,\n                  `display`.orientation,\n                  `display`.resolution,\n                  `display`.commercialLicence,\n                  `display`.teamViewerSerial,\n                  `display`.webkeySerial,\n                  `display`.lanIpAddress,\n                  (SELECT COUNT(*) FROM player_faults WHERE player_faults.displayId = display.displayId) AS countFaults,\n                  (SELECT GROUP_CONCAT(DISTINCT `group`.group)\n                    FROM `permission`\n                        INNER JOIN `permissionentity`\n                            ON `permissionentity`.entityId = permission.entityId\n                        INNER JOIN `group`\n                            ON `group`.groupId = `permission`.groupId\n                        WHERE entity = :entity\n                            AND objectId = `displaygroup`.displayGroupId\n                            AND view = 1\n                  ) AS groupsWithPermissions\n              ';\n\n        $params['entity'] = 'Xibo\\\\Entity\\\\DisplayGroup';\n\n        if ($parsedBody->getCheckbox('showTags') === 1) {\n            $select .= ',\n                   (\n                     SELECT GROUP_CONCAT(CONCAT_WS(\\'|\\', tag, value))\n                       FROM tag\n                       INNER JOIN lktagdisplaygroup\n                       ON lktagdisplaygroup.tagId = tag.tagId\n                       WHERE lktagdisplaygroup.displayGroupId = displaygroup.displayGroupID\n                       GROUP BY lktagdisplaygroup.displayGroupId\n                   ) as tags\n            ';\n        }\n\n        $body = '\n                FROM `display`\n                    INNER JOIN `lkdisplaydg`\n                    ON lkdisplaydg.displayid = display.displayId\n                    INNER JOIN `displaygroup`\n                    ON displaygroup.displaygroupid = lkdisplaydg.displaygroupid\n                        AND `displaygroup`.isDisplaySpecific = 1\n                    LEFT OUTER JOIN layout \n                    ON layout.layoutid = display.defaultlayoutid\n                    LEFT OUTER JOIN `display_types`\n                    ON `display_types`.displayTypeId = `display`.displayTypeId\n            ';\n\n        // Restrict to members of a specific display group\n        if ($parsedBody->getInt('displayGroupId') !== null) {\n            $body .= '\n                INNER JOIN `lkdisplaydg` othergroups\n                ON othergroups.displayId = `display`.displayId\n                    AND othergroups.displayGroupId = :displayGroupId\n            ';\n\n            $params['displayGroupId'] = $parsedBody->getInt('displayGroupId');\n        }\n\n        // Restrict to members of display groups\n        if ($parsedBody->getIntArray('displayGroupIds') !== null) {\n            $body .= '\n                INNER JOIN `lkdisplaydg` othergroups\n                ON othergroups.displayId = `display`.displayId\n                    AND othergroups.displayGroupId IN (0 \n            ';\n\n            $i = 0;\n            foreach ($parsedBody->getIntArray('displayGroupIds') as $displayGroupId) {\n                $i++;\n                $body .= ',:displayGroupId' . $i;\n                $params['displayGroupId' . $i] = $displayGroupId;\n            }\n            $body .= ')';\n        }\n\n        $body .= ' WHERE 1 = 1 ';\n\n        // Filter by map bound?\n        if ($parsedBody->getString('bounds') !== null) {\n            $coordinates = explode(',', $parsedBody->getString('bounds'));\n            $defaultLat = $this->config->getSetting('DEFAULT_LAT');\n            $defaultLng = $this->config->getSetting('DEFAULT_LONG');\n\n            $body .= ' AND IFNULL( ' . $functionPrefix . 'X(display.GeoLocation), ' . $defaultLat\n                . ')  BETWEEN :coordinates_1 AND :coordinates_3 '\n                . ' AND IFNULL( ' . $functionPrefix . 'Y(display.GeoLocation), ' . $defaultLng\n                . ')  BETWEEN :coordinates_0 AND :coordinates_2 ';\n\n            $params['coordinates_0'] = $coordinates[0];\n            $params['coordinates_1'] = $coordinates[1];\n            $params['coordinates_2'] = $coordinates[2];\n            $params['coordinates_3'] = $coordinates[3];\n        }\n\n        // Filter by Display ID?\n        if ($parsedBody->getInt('displayId') !== null) {\n            $body .= ' AND display.displayid = :displayId ';\n            $params['displayId'] = $parsedBody->getInt('displayId');\n        }\n\n        // Display Profile\n        if ($parsedBody->getInt('displayProfileId') !== null) {\n            if ($parsedBody->getInt('displayProfileId') == -1) {\n                $body .= ' AND IFNULL(displayProfileId, 0) = 0 ';\n            } else {\n                $displayProfileSelected = $this->displayProfileFactory->getById($parsedBody->getInt('displayProfileId'));\n                $displayProfileDefault = $this->displayProfileFactory->getDefaultByType($displayProfileSelected->type);\n\n                $body .= ' AND (`display`.displayProfileId = :displayProfileId OR (IFNULL(displayProfileId, :displayProfileDefaultId) = :displayProfileId AND display.client_type = :displayProfileType ) ) ';\n\n                $params['displayProfileId'] = $parsedBody->getInt('displayProfileId');\n                $params['displayProfileDefaultId'] = $displayProfileDefault->displayProfileId;\n                $params['displayProfileType'] = $displayProfileDefault->type;\n            }\n        }\n\n        // Filter by Wake On LAN\n        if ($parsedBody->getInt('wakeOnLan') !== null) {\n            $body .= ' AND display.wakeOnLan = :wakeOnLan ';\n            $params['wakeOnLan'] = $parsedBody->getInt('wakeOnLan');\n        }\n\n        // Filter by Licence?\n        if ($parsedBody->getString('license') !== null) {\n            $body .= ' AND display.license = :license ';\n            $params['license'] = $parsedBody->getString('license');\n        }\n\n        // Filter by authorised?\n        if ($parsedBody->getInt('authorised', ['default' => -1]) != -1) {\n            $body .= ' AND display.licensed = :authorised ';\n            $params['authorised'] = $parsedBody->getInt('authorised');\n        }\n\n        // Filter by Display Name?\n        if ($parsedBody->getString('display') != null) {\n            $terms = explode(',', $parsedBody->getString('display'));\n            $logicalOperator = $parsedBody->getString('logicalOperatorName', ['default' => 'OR']);\n            $this->nameFilter(\n                'display',\n                'display',\n                $terms,\n                $body,\n                $params,\n                ($parsedBody->getCheckbox('useRegexForName') == 1),\n                $logicalOperator\n            );\n        }\n\n        if ($parsedBody->getString('macAddress') != '') {\n            $body .= ' AND display.macaddress LIKE :macAddress ';\n            $params['macAddress'] = '%' . $parsedBody->getString('macAddress') . '%';\n        }\n\n        if ($parsedBody->getString('clientAddress') != '') {\n            $body .= ' AND display.clientaddress LIKE :clientAddress ';\n            $params['clientAddress'] = '%' . $parsedBody->getString('clientAddress') . '%';\n        }\n\n        if ($parsedBody->getString('clientVersion') != '') {\n            $body .= ' AND display.client_version LIKE :clientVersion ';\n            $params['clientVersion'] = '%' . $parsedBody->getString('clientVersion') . '%';\n        }\n\n        if ($parsedBody->getString('clientType') != '') {\n            $body .= ' AND display.client_type = :clientType ';\n            $params['clientType'] = $parsedBody->getString('clientType');\n        }\n\n        if ($parsedBody->getString('clientCode') != '') {\n            $body .= ' AND display.client_code LIKE :clientCode ';\n            $params['clientCode'] = '%' . $parsedBody->getString('clientCode') . '%';\n        }\n\n        if ($parsedBody->getString('customId') != '') {\n            $body .= ' AND display.customId LIKE :customId ';\n            $params['customId'] = '%' . $parsedBody->getString('customId') . '%';\n        }\n\n        if ($parsedBody->getString('orientation', $filterBy) != '') {\n            $body .= ' AND display.orientation = :orientation ';\n            $params['orientation'] = $parsedBody->getString('orientation', $filterBy);\n        }\n\n        if ($parsedBody->getInt('mediaInventoryStatus', $filterBy) != '') {\n            if ($parsedBody->getInt('mediaInventoryStatus', $filterBy) === -1) {\n                $body .= ' AND display.mediaInventoryStatus <> 1 ';\n            } else {\n                $body .= ' AND display.mediaInventoryStatus = :mediaInventoryStatus ';\n                $params['mediaInventoryStatus'] = $parsedBody->getInt('mediaInventoryStatus');\n            }\n        }\n\n        if ($parsedBody->getInt('loggedIn', ['default' => -1]) != -1) {\n            $body .= ' AND display.loggedIn = :loggedIn ';\n            $params['loggedIn'] = $parsedBody->getInt('loggedIn');\n        }\n\n        if ($parsedBody->getDate('lastAccessed', ['dateFormat' => 'U']) !== null) {\n            $body .= ' AND display.lastAccessed > :lastAccessed ';\n            $params['lastAccessed'] = $parsedBody->getDate('lastAccessed', ['dateFormat' => 'U'])->format('U');\n        }\n\n        // Exclude a group?\n        if ($parsedBody->getInt('exclude_displaygroupid') !== null) {\n            $body .= \" AND display.DisplayID NOT IN \";\n            $body .= \"       (SELECT display.DisplayID \";\n            $body .= \"       FROM    display \";\n            $body .= \"               INNER JOIN lkdisplaydg \";\n            $body .= \"               ON      lkdisplaydg.DisplayID = display.DisplayID \";\n            $body .= \"   WHERE  lkdisplaydg.DisplayGroupID   = :excludeDisplayGroupId \";\n            $body .= \"       )\";\n            $params['excludeDisplayGroupId'] = $parsedBody->getInt('exclude_displaygroupid');\n        }\n\n        // Media ID - direct assignment\n        if ($parsedBody->getInt('mediaId') !== null) {\n            $body .= '\n                AND display.displayId IN (\n                    SELECT `lkdisplaydg`.displayId\n                       FROM `lkmediadisplaygroup`\n                        INNER JOIN `lkdgdg`\n                        ON `lkdgdg`.parentId = `lkmediadisplaygroup`.displayGroupId\n                        INNER JOIN `lkdisplaydg`\n                        ON lkdisplaydg.DisplayGroupID = `lkdgdg`.childId\n                     WHERE `lkmediadisplaygroup`.mediaId = :mediaId\n                    UNION\n                    SELECT `lkdisplaydg`.displayId\n                      FROM `lklayoutdisplaygroup`\n                        INNER JOIN `lkdgdg`\n                        ON `lkdgdg`.parentId = `lklayoutdisplaygroup`.displayGroupId\n                        INNER JOIN `lkdisplaydg`\n                        ON lkdisplaydg.DisplayGroupID = `lkdgdg`.childId\n                     WHERE `lklayoutdisplaygroup`.layoutId IN (\n                         SELECT `region`.layoutId\n                              FROM `lkwidgetmedia`\n                               INNER JOIN `widget`\n                               ON `widget`.widgetId = `lkwidgetmedia`.widgetId\n                               INNER JOIN `playlist`\n                               ON `playlist`.playlistId = `widget`.playlistId\n                               INNER JOIN `region`\n                               ON `region`.regionId = `playlist`.regionId\n                               INNER JOIN layout\n                               ON layout.LayoutID = region.layoutId\n                             WHERE lkwidgetmedia.mediaId = :mediaId\n                            UNION\n                            SELECT `layout`.layoutId\n                              FROM `layout`\n                             WHERE `layout`.backgroundImageId = :mediaId\n                        )\n                )\n            ';\n\n            $params['mediaId'] = $parsedBody->getInt('mediaId');\n        }\n\n        // Tags\n        if ($parsedBody->getString('tags') != '') {\n            $tagFilter = $parsedBody->getString('tags');\n\n            if (trim($tagFilter) === '--no-tag') {\n                $body .= ' AND `displaygroup`.displaygroupId NOT IN (\n                    SELECT `lktagdisplaygroup`.displaygroupId\n                     FROM tag\n                        INNER JOIN `lktagdisplaygroup`\n                        ON `lktagdisplaygroup`.tagId = tag.tagId\n                    )\n                ';\n            } else {\n                $operator = $parsedBody->getCheckbox('exactTags') == 1 ? '=' : 'LIKE';\n                $logicalOperator = $parsedBody->getString('logicalOperator', ['default' => 'OR']);\n                $body .= ' AND `displaygroup`.displaygroupId IN (\n                SELECT `lktagdisplaygroup`.displaygroupId\n                  FROM tag\n                    INNER JOIN `lktagdisplaygroup`\n                    ON `lktagdisplaygroup`.tagId = tag.tagId\n                ';\n\n                $tags = explode(',', $tagFilter);\n                $this->tagFilter($tags, 'lktagdisplaygroup', 'lkTagDisplayGroupId', 'displayGroupId', $logicalOperator, $operator, $body, $params);\n            }\n        }\n\n        // run the special query to help sort by displays already assigned to this display group, we want to run it only if we're sorting by member column.\n        if ($parsedBody->getInt('displayGroupIdMembers') !== null && ($sortOrder == ['`member`'] || $sortOrder == ['`member` DESC'] )) {\n            $members = [];\n            $displayGroupId = $parsedBody->getInt('displayGroupIdMembers');\n\n            foreach ($this->getStore()->select($select . $body, $params) as $row) {\n                $displayId = $this->getSanitizer($row)->getInt('displayId');\n\n                if ($this->getStore()->exists(\n                    'SELECT display.display, display.displayId, displaygroup.displayGroupId\n                                                    FROM display\n                                                      INNER JOIN `lkdisplaydg` \n                                                          ON lkdisplaydg.displayId = `display`.displayId \n                                                          AND lkdisplaydg.displayGroupId = :displayGroupId \n                                                          AND lkdisplaydg.displayId = :displayId\n                                                      INNER JOIN `displaygroup` \n                                                          ON displaygroup.displaygroupid = lkdisplaydg.displaygroupid\n                                                          AND `displaygroup`.isDisplaySpecific = 0',\n                    [\n                        'displayGroupId' => $displayGroupId,\n                        'displayId' => $displayId\n                    ]\n                )) {\n                    $members[] = $displayId;\n                }\n            }\n        }\n\n        // filter by commercial licence\n        if ($parsedBody->getInt('commercialLicence') !== null) {\n            $body .= ' AND display.commercialLicence = :commercialLicence ';\n            $params['commercialLicence'] = $parsedBody->getInt('commercialLicence');\n        }\n\n        if ($parsedBody->getInt('folderId') !== null) {\n            $body .= ' AND displaygroup.folderId = :folderId ';\n            $params['folderId'] = $parsedBody->getInt('folderId');\n        }\n\n        $this->viewPermissionSql('Xibo\\Entity\\DisplayGroup', $body, $params, 'displaygroup.displayGroupId', null, $filterBy, '`displaygroup`.permissionsFolderId');\n\n        // Sorting?\n        $order = '';\n\n        if (isset($members) && $members != []) {\n            $sqlOrderMembers = 'ORDER BY FIELD(display.displayId,' . implode(',', $members) . ')';\n\n            foreach ($sortOrder as $sort) {\n                if ($sort == '`member`') {\n                    $order .= $sqlOrderMembers;\n                    continue;\n                }\n\n                if ($sort == '`member` DESC') {\n                    $order .= $sqlOrderMembers . ' DESC';\n                    continue;\n                }\n            }\n        }\n\n        if (is_array($sortOrder) && ($sortOrder != ['`member`'] && $sortOrder != ['`member` DESC'] )) {\n            $order .= 'ORDER BY ' . implode(',', $sortOrder);\n        }\n\n        $limit = '';\n        // Paging\n        if ($filterBy !== null && $parsedBody->getInt('start') !== null && $parsedBody->getInt('length') !== null) {\n            $limit = ' LIMIT ' . $parsedBody->getInt('start', ['default' => 0]) . ', ' . $parsedBody->getInt('length', ['default' => 10]);\n        }\n\n        $sql = $select . $body . $order . $limit;\n\n        foreach ($this->getStore()->select($sql, $params) as $row) {\n            $display = $this->createEmpty()->hydrate($row, [\n                'intProperties' => [\n                    'auditingUntil',\n                    'wakeOnLanEnabled',\n                    'numberOfMacAddressChanges',\n                    'loggedIn',\n                    'incSchedule',\n                    'licensed',\n                    'lastAccessed',\n                    'emailAlert',\n                    'alertTimeout',\n                    'mediaInventoryStatus',\n                    'clientCode',\n                    'screenShotRequested',\n                    'lastCommandSuccess',\n                    'bandwidthLimit',\n                    'countFaults',\n                    'isMobile',\n                    'isOutdoor'\n                ],\n                'stringProperties' => ['customId']\n            ]);\n            $display->overrideConfig = ($display->overrideConfig == '') ? [] : json_decode($display->overrideConfig, true);\n            $entries[] = $display;\n        }\n\n        // Paging\n        if ($limit != '' && count($entries) > 0) {\n            unset($params['entity']);\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total ' . $body, $params);\n            $this->_countLast = intval($results[0]['total']);\n        }\n\n        return $entries;\n    }\n}\n", "<?php\n/*\n * Copyright (C) 2023 Xibo Signage Ltd\n *\n * Xibo - Digital Signage - http://www.xibo.org.uk\n *\n * This file is part of Xibo.\n *\n * Xibo is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * Xibo is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Xibo\\Factory;\n\nuse Carbon\\Carbon;\nuse Stash\\Invalidation;\nuse Stash\\Pool;\nuse Xibo\\Entity\\DataSet;\nuse Xibo\\Entity\\DataSetColumn;\nuse Xibo\\Entity\\Folder;\nuse Xibo\\Entity\\Layout;\nuse Xibo\\Entity\\Playlist;\nuse Xibo\\Entity\\Region;\nuse Xibo\\Entity\\User;\nuse Xibo\\Entity\\Widget;\nuse Xibo\\Service\\ConfigServiceInterface;\nuse Xibo\\Service\\MediaServiceInterface;\nuse Xibo\\Support\\Exception\\DuplicateEntityException;\nuse Xibo\\Support\\Exception\\GeneralException;\nuse Xibo\\Support\\Exception\\InvalidArgumentException;\nuse Xibo\\Support\\Exception\\NotFoundException;\n\n/**\n * Class LayoutFactory\n * @package Xibo\\Factory\n */\nclass LayoutFactory extends BaseFactory\n{\n    /**\n     * @var ConfigServiceInterface\n     */\n    private $config;\n\n    /** @var \\Stash\\Interfaces\\PoolInterface */\n    private $pool;\n\n    /**\n     * @var PermissionFactory\n     */\n    private $permissionFactory;\n\n    /**\n     * @var RegionFactory\n     */\n    private $regionFactory;\n\n    /**\n     * @var TagFactory\n     */\n    private $tagFactory;\n\n    /**\n     * @var CampaignFactory\n     */\n    private $campaignFactory;\n\n    /**\n     * @var MediaFactory\n     */\n    private $mediaFactory;\n\n    /**\n     * @var ModuleFactory\n     */\n    private $moduleFactory;\n\n    /**\n     * @var ResolutionFactory\n     */\n    private $resolutionFactory;\n\n    /**\n     * @var WidgetFactory\n     */\n    private $widgetFactory;\n\n    /**\n     * @var WidgetOptionFactory\n     */\n    private $widgetOptionFactory;\n\n    /** @var  WidgetAudioFactory */\n    private $widgetAudioFactory;\n\n    /** @var  PlaylistFactory */\n    private $playlistFactory;\n\n    /** @var ActionFactory */\n    private $actionFactory;\n\n    /** @var FolderFactory */\n    private $folderFactory;\n\n    /**\n     * Construct a factory\n     * @param User $user\n     * @param UserFactory $userFactory\n     * @param ConfigServiceInterface $config\n     * @param PermissionFactory $permissionFactory\n     * @param RegionFactory $regionFactory\n     * @param TagFactory $tagFactory\n     * @param CampaignFactory $campaignFactory\n     * @param MediaFactory $mediaFactory\n     * @param ModuleFactory $moduleFactory\n     * @param ResolutionFactory $resolutionFactory\n     * @param WidgetFactory $widgetFactory\n     * @param WidgetOptionFactory $widgetOptionFactory\n     * @param PlaylistFactory $playlistFactory\n     * @param WidgetAudioFactory $widgetAudioFactory\n     * @param ActionFactory $actionFactory\n     * @param FolderFactory $folderFactory\n     */\n    public function __construct(\n        $user,\n        $userFactory,\n        $config,\n        $permissionFactory,\n        $regionFactory,\n        $tagFactory,\n        $campaignFactory,\n        $mediaFactory,\n        $moduleFactory,\n        $resolutionFactory,\n        $widgetFactory,\n        $widgetOptionFactory,\n        $playlistFactory,\n        $widgetAudioFactory,\n        $actionFactory,\n        $folderFactory\n    ) {\n        $this->setAclDependencies($user, $userFactory);\n        $this->config = $config;\n        $this->permissionFactory = $permissionFactory;\n        $this->regionFactory = $regionFactory;\n        $this->tagFactory = $tagFactory;\n        $this->campaignFactory = $campaignFactory;\n        $this->mediaFactory = $mediaFactory;\n        $this->moduleFactory = $moduleFactory;\n        $this->resolutionFactory = $resolutionFactory;\n        $this->widgetFactory = $widgetFactory;\n        $this->widgetOptionFactory = $widgetOptionFactory;\n        $this->playlistFactory = $playlistFactory;\n        $this->widgetAudioFactory = $widgetAudioFactory;\n        $this->actionFactory = $actionFactory;\n        $this->folderFactory = $folderFactory;\n    }\n\n    /**\n     * Create an empty layout\n     * @return Layout\n     */\n    public function createEmpty()\n    {\n        return new Layout(\n            $this->getStore(),\n            $this->getLog(),\n            $this->getDispatcher(),\n            $this->config,\n            $this->permissionFactory,\n            $this->regionFactory,\n            $this->tagFactory,\n            $this->campaignFactory,\n            $this,\n            $this->mediaFactory,\n            $this->moduleFactory,\n            $this->playlistFactory,\n            $this->actionFactory,\n            $this->folderFactory\n        );\n    }\n\n    /**\n     * Create Layout from Resolution\n     * @param int $resolutionId\n     * @param int $ownerId\n     * @param string $name\n     * @param string $description\n     * @param string|array $tags\n     * @param string $code\n     * @param bool $addRegion\n     * @return Layout\n     *\n     * @throws GeneralException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function createFromResolution($resolutionId, $ownerId, $name, $description, $tags, $code, $addRegion = true)\n    {\n        $resolution = $this->resolutionFactory->getById($resolutionId);\n\n        // Create a new Layout\n        $layout = $this->createEmpty();\n        $layout->width = $resolution->width;\n        $layout->height = $resolution->height;\n        $layout->orientation = ($layout->width >= $layout->height) ? 'landscape' : 'portrait';\n\n        // Set the properties\n        $layout->layout = $name;\n        $layout->description = $description;\n        $layout->backgroundzIndex = 0;\n        $layout->backgroundColor = '#000';\n        $layout->code = $code;\n\n        // Set the owner\n        $layout->setOwner($ownerId);\n\n        // Create some tags\n        if (is_array($tags)) {\n            $layout->tags = $tags;\n        } else {\n            $layout->tags = $this->tagFactory->tagsFromString($tags);\n        }\n\n        // Add a blank, full screen region\n        if ($addRegion) {\n            $layout->regions[] = $this->regionFactory->create(\n                $ownerId,\n                $name . '-1',\n                $layout->width,\n                $layout->height,\n                0,\n                0\n            );\n        }\n\n        return $layout;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Layout $layout\n     * @param int $width\n     * @param int $height\n     * @param int $top\n     * @param int $left\n     * @return \\Xibo\\Entity\\Layout\n     * @throws \\Xibo\\Support\\Exception\\InvalidArgumentException\n     */\n    public function addRegion(Layout $layout, int $width, int $height, int $top, int $left): Layout\n    {\n        $layout->regions[] = $this->regionFactory->create(\n            $layout->ownerId,\n            $layout->layout . '-' . count($layout->regions),\n            $width,\n            $height,\n            $top,\n            $left\n        );\n\n        return $layout;\n    }\n\n    /**\n     * Load a layout by its ID\n     * @param int $layoutId\n     * @return Layout The Layout\n     * @throws NotFoundException\n     */\n    public function loadById($layoutId)\n    {\n        // Get the layout\n        $layout = $this->getById($layoutId);\n        // Load the layout\n        $layout->load();\n\n        return $layout;\n    }\n\n    /**\n     * Loads only the layout information\n     * @param int $layoutId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getById($layoutId)\n    {\n        if ($layoutId == 0) {\n            throw new NotFoundException(__('LayoutId is 0'));\n        }\n\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'layoutId' => $layoutId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get CampaignId from layout history\n     * @param int $layoutId\n     * @return int campaignId\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function getCampaignIdFromLayoutHistory($layoutId)\n    {\n        if ($layoutId == null) {\n            throw new InvalidArgumentException(__('Invalid Input'), 'layoutId');\n        }\n\n        $row = $this->getStore()->select('SELECT campaignId FROM `layouthistory` WHERE layoutId = :layoutId LIMIT 1', ['layoutId' => $layoutId]);\n\n        if (count($row) <= 0) {\n            throw new NotFoundException(__('Layout does not exist'));\n        }\n\n        return intval($row[0]['campaignId']);\n    }\n\n\n    /**\n     * Get layout by layout history\n     * @param int $layoutId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByLayoutHistory($layoutId)\n    {\n        // Get a Layout by its Layout HistoryId\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'layoutHistoryId' => $layoutId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get latest layoutId by CampaignId from layout history\n     * @param int campaignId\n     * @return int layoutId\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function getLatestLayoutIdFromLayoutHistory($campaignId)\n    {\n        if ($campaignId == null) {\n            throw new InvalidArgumentException(__('Invalid Input'), 'campaignId');\n        }\n\n        $row = $this->getStore()->select('SELECT MAX(layoutId) AS layoutId FROM `layouthistory` WHERE campaignId = :campaignId  ', ['campaignId' => $campaignId]);\n\n        if (count($row) <= 0) {\n            throw new NotFoundException(__('Layout does not exist'));\n        }\n\n        // Set our Layout ID\n        return intval($row[0]['layoutId']);\n    }\n\n    /**\n     * Loads only the layout information\n     * @param int $layoutId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByParentId($layoutId)\n    {\n        if ($layoutId == 0) {\n            throw new NotFoundException();\n        }\n\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'parentId' => $layoutId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get a Layout by its Layout Specific Campaign OwnerId\n     * @param int $campaignId\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByParentCampaignId($campaignId)\n    {\n        if ($campaignId == 0)\n            throw new NotFoundException();\n\n        $layouts = $this->query(null, array('disableUserCheck' => 1, 'ownerCampaignId' => $campaignId, 'excludeTemplates' => -1, 'retired' => -1));\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get by OwnerId\n     * @param int $ownerId\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByOwnerId($ownerId)\n    {\n        return $this->query(null, array('userId' => $ownerId, 'excludeTemplates' => -1, 'retired' => -1, 'showDrafts' => 1));\n    }\n\n    /**\n     * Get by CampaignId\n     * @param int $campaignId\n     * @param bool $permissionsCheck Should we check permissions?\n     * @param bool $includeDrafts Should we include draft Layouts in the results?\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByCampaignId($campaignId, $permissionsCheck = true, $includeDrafts = false)\n    {\n        return $this->query(['displayOrder'], [\n            'campaignId' => $campaignId,\n            'excludeTemplates' => -1,\n            'retired' => -1,\n            'disableUserCheck' => $permissionsCheck ? 0 : 1,\n            'showDrafts' => $includeDrafts ? 1 : 0\n        ]);\n    }\n\n    /**\n     * Get by RegionId\n     * @param int $regionId\n     * @param bool $permissionsCheck Should we check permissions?\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByRegionId($regionId, $permissionsCheck = true)\n    {\n        $layouts = $this->query(['displayOrder'], [\n            'regionId' => $regionId,\n            'excludeTemplates' => -1,\n            'retired' => -1,\n            'disableUserCheck' => $permissionsCheck ? 0 : 1,\n            'showDrafts' => 1\n        ]);\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Get by Display Group Id\n     * @param int $displayGroupId\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByDisplayGroupId($displayGroupId)\n    {\n        if ($displayGroupId == null) {\n            return [];\n        }\n\n        return $this->query(null, ['disableUserCheck' => 1, 'displayGroupId' => $displayGroupId]);\n    }\n\n    /**\n     * Get by Background Image Id\n     * @param int $backgroundImageId\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByBackgroundImageId($backgroundImageId)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'backgroundImageId' => $backgroundImageId, 'showDrafts' => 1]);\n    }\n\n    /**\n     * @param string $tag\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function getByTag($tag)\n    {\n        return $this->query(null, ['disableUserCheck' => 1, 'tags' => $tag, 'exactTags' => 1]);\n    }\n\n    /**\n     * Get by Code identifier\n     * @param string $code\n     * @return Layout\n     * @throws NotFoundException\n     */\n    public function getByCode($code)\n    {\n        $layouts = $this->query(null, ['disableUserCheck' => 1, 'code' => $code, 'excludeTemplates' => -1, 'retired' => -1]);\n\n        if (count($layouts) <= 0) {\n            throw new NotFoundException(__('Layout not found'));\n        }\n\n        // Set our layout\n        return $layouts[0];\n    }\n\n    /**\n     * Load a layout by its XLF\n     * @param string $layoutXlf\n     * @param null $layout\n     * @return Layout\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function loadByXlf($layoutXlf, $layout = null)\n    {\n        $this->getLog()->debug('Loading Layout by XLF');\n\n        // New Layout\n        if ($layout == null) {\n            $layout = $this->createEmpty();\n        }\n\n        // Get a list of modules for us to use\n        $modules = $this->moduleFactory->get();\n\n        // Parse the XML and fill in the details for this layout\n        $document = new \\DOMDocument();\n        if ($document->loadXML($layoutXlf) === false) {\n            throw new InvalidArgumentException(__('Layout import failed, invalid xlf supplied'));\n        }\n\n        $layout->schemaVersion = (int)$document->documentElement->getAttribute('schemaVersion');\n        $layout->width = $document->documentElement->getAttribute('width');\n        $layout->height = $document->documentElement->getAttribute('height');\n        $layout->backgroundColor = $document->documentElement->getAttribute('bgcolor');\n        $layout->backgroundzIndex = (int)$document->documentElement->getAttribute('zindex');\n\n        // Xpath to use when getting media\n        $xpath = new \\DOMXPath($document);\n\n        // Populate Region Nodes\n        foreach ($document->getElementsByTagName('region') as $regionNode) {\n            /* @var \\DOMElement $regionNode */\n            $this->getLog()->debug('Found Region');\n\n            // Get the ownerId\n            $regionOwnerId = $regionNode->getAttribute('userId');\n            if ($regionOwnerId == null) {\n                $regionOwnerId = $layout->ownerId;\n            }\n            // Create the region\n            $region = $this->regionFactory->create(\n                $regionOwnerId,\n                $regionNode->getAttribute('name'),\n                (double)$regionNode->getAttribute('width'),\n                (double)$regionNode->getAttribute('height'),\n                (double)$regionNode->getAttribute('top'),\n                (double)$regionNode->getAttribute('left'),\n                (int)$regionNode->getAttribute('zindex')\n            );\n\n            // Use the regionId locally to parse the rest of the XLF\n            $region->tempId = $regionNode->getAttribute('id');\n\n            // Set the region name if empty\n            if ($region->name == '') {\n                $region->name = count($layout->regions) + 1;\n                // make sure we have a string as the region name, otherwise sanitizer will get confused.\n                $region->name = (string)$region->name;\n            }\n            // Populate Playlists (XLF doesn't contain any playlists)\n            $playlist = $this->playlistFactory->create($region->name, $regionOwnerId);\n\n            // Populate region options.\n            foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/options') as $regionOptionsNode) {\n                /* @var \\DOMElement $regionOptionsNode */\n                foreach ($regionOptionsNode->childNodes as $regionOption) {\n                    /* @var \\DOMElement $regionOption */\n                    $region->setOptionValue($regionOption->nodeName, $regionOption->textContent);\n                }\n            }\n\n            // Get all widgets\n            foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/media') as $mediaNode) {\n                /* @var \\DOMElement $mediaNode */\n\n                $mediaOwnerId = $mediaNode->getAttribute('userId');\n                if ($mediaOwnerId == null) {\n                    $mediaOwnerId = $regionOwnerId;\n                }\n                $widget = $this->widgetFactory->createEmpty();\n                $widget->type = $mediaNode->getAttribute('type');\n                $widget->ownerId = $mediaOwnerId;\n                $widget->duration = $mediaNode->getAttribute('duration');\n                $widget->useDuration = $mediaNode->getAttribute('useDuration');\n                // Additional check for importing layouts from 1.7 series, where the useDuration did not exist\n                $widget->useDuration = ($widget->useDuration === '') ? 1 : $widget->useDuration;\n                $widget->tempId = $mediaNode->getAttribute('fileId');\n                $widgetId = $mediaNode->getAttribute('id');\n\n                // Widget from/to dates.\n                $widget->fromDt = ($mediaNode->getAttribute('fromDt') === '') ? Widget::$DATE_MIN : $mediaNode->getAttribute('fromDt');\n                $widget->toDt = ($mediaNode->getAttribute('toDt') === '') ? Widget::$DATE_MAX : $mediaNode->getAttribute('toDt');\n\n                $this->setWidgetExpiryDatesOrDefault($widget);\n\n                $this->getLog()->debug('Adding Widget to object model. ' . $widget);\n\n                // Does this module type exist?\n                if (!array_key_exists($widget->type, $modules)) {\n                    $this->getLog()->error('Module Type [%s] in imported Layout does not exist. Allowable types: %s', $widget->type, json_encode(array_keys($modules)));\n                    continue;\n                }\n\n                $module = $modules[$widget->type];\n                /* @var \\Xibo\\Entity\\Module $module */\n\n                //\n                // Get all widget options\n                //\n                $xpathQuery = '//region[@id=\"' . $region->tempId . '\"]/media[@id=\"' . $widgetId . '\"]/options';\n                foreach ($xpath->query($xpathQuery) as $optionsNode) {\n                    /* @var \\DOMElement $optionsNode */\n                    foreach ($optionsNode->childNodes as $mediaOption) {\n                        /* @var \\DOMElement $mediaOption */\n                        $widgetOption = $this->widgetOptionFactory->createEmpty();\n                        $widgetOption->type = 'attrib';\n                        $widgetOption->option = $mediaOption->nodeName;\n                        $widgetOption->value = $mediaOption->textContent;\n\n                        $widget->widgetOptions[] = $widgetOption;\n\n                        // Convert the module type of known legacy widgets\n                        if ($widget->type == 'ticker' && $widgetOption->option == 'sourceId' && $widgetOption->value == '2') {\n                            $widget->type = 'datasetticker';\n                            $module = $modules[$widget->type];\n                        }\n                    }\n                }\n\n                $this->getLog()->debug('Added %d options with xPath query: %s', count($widget->widgetOptions), $xpathQuery);\n\n                //\n                // Get the MediaId associated with this widget (using the URI)\n                //\n                if ($module->regionSpecific == 0) {\n                    $this->getLog()->debug('Library Widget, getting mediaId');\n\n                    if (empty($widget->tempId)) {\n                        $this->getLog()->debug('FileId node is empty, setting tempId from uri option. Options: %s', json_encode($widget->widgetOptions));\n                        $mediaId = explode('.', $widget->getOptionValue('uri', '0.*'));\n                        $widget->tempId = $mediaId[0];\n                    }\n\n                    $this->getLog()->debug('Assigning mediaId %d', $widget->tempId);\n                    $widget->assignMedia($widget->tempId);\n                }\n\n                //\n                // Get all widget raw content\n                //\n                foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/media[@id=\"' . $widgetId . '\"]/raw') as $rawNode) {\n                    /* @var \\DOMElement $rawNode */\n                    // Get children\n                    foreach ($rawNode->childNodes as $mediaOption) {\n                        /* @var \\DOMElement $mediaOption */\n                        if ($mediaOption->textContent == null) {\n                            continue;\n                        }\n                        $widgetOption = $this->widgetOptionFactory->createEmpty();\n                        $widgetOption->type = 'cdata';\n                        $widgetOption->option = $mediaOption->nodeName;\n                        $widgetOption->value = $mediaOption->textContent;\n\n                        $widget->widgetOptions[] = $widgetOption;\n                    }\n                }\n\n                //\n                // Audio\n                //\n                foreach ($xpath->query('//region[@id=\"' . $region->tempId . '\"]/media[@id=\"' . $widgetId . '\"]/audio') as $rawNode) {\n                    /* @var \\DOMElement $rawNode */\n                    // Get children\n                    foreach ($rawNode->childNodes as $audioNode) {\n                        /* @var \\DOMElement $audioNode */\n                        if ($audioNode->textContent == null) {\n                            continue;\n                        }\n                        $audioMediaId = $audioNode->getAttribute('mediaId');\n\n                        if (empty($audioMediaId)) {\n                            // Try to parse it from the text content\n                            $audioMediaId = explode('.', $audioNode->textContent)[0];\n                        }\n\n                        $widgetAudio = $this->widgetAudioFactory->createEmpty();\n                        $widgetAudio->mediaId = $audioMediaId;\n                        $widgetAudio->volume = $audioNode->getAttribute('volume');\n                        $widgetAudio->loop = $audioNode->getAttribute('loop');\n\n                        $widget->assignAudio($widgetAudio);\n                    }\n                }\n\n                // Add the widget to the playlist\n                $playlist->assignWidget($widget);\n            }\n\n            // Assign Playlist to the Region\n            $region->regionPlaylist = $playlist;\n\n            // Assign the region to the Layout\n            $layout->regions[] = $region;\n        }\n\n        $this->getLog()->debug(sprintf('Finished loading layout - there are %d regions.', count($layout->regions)));\n\n        // Load any existing tags\n        if (!is_array($layout->tags)) {\n            $layout->tags = $this->tagFactory->tagsFromString($layout->tags);\n        }\n\n        foreach ($xpath->query('//tags/tag') as $tagNode) {\n            /* @var \\DOMElement $tagNode */\n            if (trim($tagNode->textContent) == '') {\n                continue;\n            }\n            $layout->tags[] = $this->tagFactory->tagFromString($tagNode->textContent);\n        }\n\n        // The parsed, finished layout\n        return $layout;\n    }\n\n    /**\n     * @param $layoutJson\n     * @param $playlistJson\n     * @param $nestedPlaylistJson\n     * @param Folder $folder\n     * @param null $layout\n     * @param bool $importTags\n     * @return array\n     * @throws DuplicateEntityException\n     * @throws GeneralException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    public function loadByJson($layoutJson, $playlistJson, $nestedPlaylistJson, Folder $folder, $layout = null, $importTags = false): array\n    {\n        $this->getLog()->debug('Loading Layout by JSON');\n\n        // New Layout\n        if ($layout == null) {\n            $layout = $this->createEmpty();\n        }\n\n        $playlists = [];\n        $oldIds = [];\n        $newIds = [];\n        $widgets = [];\n        // Get a list of modules for us to use\n        $modules = $this->moduleFactory->get();\n\n        $layout->schemaVersion = (int)$layoutJson['layoutDefinitions']['schemaVersion'];\n        $layout->width = $layoutJson['layoutDefinitions']['width'];\n        $layout->height = $layoutJson['layoutDefinitions']['height'];\n        $layout->backgroundColor = $layoutJson['layoutDefinitions']['backgroundColor'];\n        $layout->backgroundzIndex = (int)$layoutJson['layoutDefinitions']['backgroundzIndex'];\n        $layout->actions = [];\n        $layout->autoApplyTransitions = $layoutJson['layoutDefinitions']['autoApplyTransitions'] ?? 0;\n        $actions = $layoutJson['layoutDefinitions']['actions'] ?? [];\n\n        foreach ($actions as $action) {\n            $newAction = $this->actionFactory->create($action['triggerType'], $action['triggerCode'], $action['actionType'], 'importLayout', $action['sourceId'], $action['target'], $action['targetId'], $action['widgetId'], $action['layoutCode']);\n            $newAction->save(['validate' => false]);\n        }\n\n\n        // Nested Playlists are Playlists which exist below the first level of Playlists in Sub-Playlist Widgets\n        // we need to import and save them first.\n        if ($nestedPlaylistJson != null) {\n            $this->getLog()->debug('Layout import, creating nested Playlists from JSON, there are ' . count($nestedPlaylistJson) . ' Playlists to create');\n\n            // create all nested Playlists, save their widgets to key=>value array\n            foreach ($nestedPlaylistJson as $nestedPlaylist) {\n                $newPlaylist = $this->playlistFactory->createEmpty()->hydrate($nestedPlaylist);\n                $newPlaylist->tags = [];\n\n                // Populate tags\n                if ($nestedPlaylist['tags'] !== null && count($nestedPlaylist['tags']) > 0 && $importTags) {\n                    foreach ($nestedPlaylist['tags'] as $tag) {\n                        $newPlaylist->tags[] = $this->tagFactory->tagFromString(\n                            $tag['tag'] . (!empty($tag['value']) ? '|' . $tag['value'] : '')\n                        );\n                    }\n                }\n\n                $oldIds[] = $newPlaylist->playlistId;\n                $widgets[$newPlaylist->playlistId] = $newPlaylist->widgets;\n\n                $this->setOwnerAndSavePlaylist($newPlaylist, $folder);\n\n                $newIds[] = $newPlaylist->playlistId;\n            }\n\n            $combined = array_combine($oldIds, $newIds);\n\n            // this function will go through all widgets assigned to the nested Playlists, create the widgets, adjust the Ids and return an array of Playlists\n            // then the Playlists array is used later on to adjust mediaIds if needed\n            $playlists = $this->createNestedPlaylistWidgets($widgets, $combined, $playlists);\n\n            $this->getLog()->debug('Finished creating nested playlists there are ' . count($playlists) . ' Playlists created');\n        }\n\n        $drawers = (array_key_exists('drawers', $layoutJson['layoutDefinitions'])) ? $layoutJson['layoutDefinitions']['drawers'] : [];\n\n        // merge Layout Regions and Drawers into one array.\n        $allRegions = array_merge($layoutJson['layoutDefinitions']['regions'], $drawers);\n\n        // Populate Region Nodes\n        foreach ($allRegions as $regionJson) {\n            $this->getLog()->debug('Found Region ' . json_encode($regionJson));\n\n            // Get the ownerId\n            $regionOwnerId = $regionJson['ownerId'];\n            if ($regionOwnerId == null) {\n                $regionOwnerId = $layout->ownerId;\n            }\n\n            // Create the region\n            $region = $this->regionFactory->create(\n                $regionOwnerId,\n                $regionJson['name'],\n                (double)$regionJson['width'],\n                (double)$regionJson['height'],\n                (double)$regionJson['top'],\n                (double)$regionJson['left'],\n                (int)$regionJson['zIndex'],\n                isset($regionJson['isDrawer']) ? (int)$regionJson['isDrawer'] : 0\n            );\n\n            // Use the regionId locally to parse the rest of the JSON\n            $region->tempId = $regionJson['tempId'] ?? $regionJson['regionId'];\n\n            // Set the region name if empty\n            if ($region->name == '') {\n                $region->name = count($layout->regions) + 1;\n                // make sure we have a string as the region name, otherwise sanitizer will get confused.\n                $region->name = (string)$region->name;\n            }\n\n            // Populate Playlists\n            $playlist = $this->playlistFactory->create($region->name, $regionOwnerId);\n\n            // interactive Actions\n            $actions = $regionJson['actions'] ?? [];\n            foreach ($actions as $action) {\n                $newAction = $this->actionFactory->create($action['triggerType'], $action['triggerCode'], $action['actionType'], 'importRegion', $action['sourceId'], $action['target'], $action['targetId'], $action['widgetId'], $action['layoutCode']);\n                $newAction->save(['validate' => false]);\n            }\n\n            foreach ($regionJson['regionOptions'] as $regionOption) {\n                $region->setOptionValue($regionOption['option'], $regionOption['value']);\n            }\n\n            // Get all widgets\n            foreach ($regionJson['regionPlaylist']['widgets'] as $mediaNode) {\n                $mediaOwnerId = $mediaNode['ownerId'];\n                if ($mediaOwnerId == null) {\n                    $mediaOwnerId = $regionOwnerId;\n                }\n\n                $widget = $this->widgetFactory->createEmpty();\n                $widget->type = $mediaNode['type'];\n                $widget->ownerId = $mediaOwnerId;\n                $widget->duration = $mediaNode['duration'];\n                $widget->useDuration = $mediaNode['useDuration'];\n                $widget->tempId = (int)implode(',', $mediaNode['mediaIds']);\n                $widget->tempWidgetId = $mediaNode['widgetId'];\n\n                // Widget from/to dates.\n                $widget->fromDt = ($mediaNode['fromDt'] === '') ? Widget::$DATE_MIN : $mediaNode['fromDt'];\n                $widget->toDt = ($mediaNode['toDt'] === '') ? Widget::$DATE_MAX : $mediaNode['toDt'];\n\n                $this->setWidgetExpiryDatesOrDefault($widget);\n\n                $this->getLog()->debug('Adding Widget to object model. ' . $widget);\n\n                // Does this module type exist?\n                if (!array_key_exists($widget->type, $modules)) {\n                    $this->getLog()->error(sprintf('Module Type [%s] in imported Layout does not exist. Allowable types: %s', $widget->type, json_encode(array_keys($modules))));\n                    continue;\n                }\n\n                /* @var \\Xibo\\Entity\\Module $module */\n                $module = $modules[$widget->type];\n\n                //\n                // Get all widget options\n                //\n                $subPlaylistsOption = [];\n                foreach ($mediaNode['widgetOptions'] as $optionsNode) {\n                    // subPlaylistOptions and subPlaylistIds are no longer in use from 2.3\n                    // we need to capture these options to support Layout with sub-playlist import from older CMS\n                    // we use continue for those 2 options, as we do not need to create widgetOption for them\n                    if ($optionsNode['option'] == 'subPlaylistOptions') {\n                        $oldSubPlaylistOptions = json_decode($optionsNode['value'], true);\n                        continue;\n                    }\n\n                    if ($optionsNode['option'] == 'subPlaylistIds') {\n                        $oldSubPlaylistIds = json_decode($optionsNode['value'], true);\n                        continue;\n                    }\n\n                    if ($optionsNode['option'] == 'subPlaylists') {\n                        $subPlaylistsOption = json_decode($optionsNode['value'], true);\n                    }\n\n                    $widgetOption = $this->widgetOptionFactory->createEmpty();\n                    $widgetOption->type = $optionsNode['type'];\n                    $widgetOption->option = $optionsNode['option'];\n                    $widgetOption->value = $optionsNode['value'];\n\n                    $widget->widgetOptions[] = $widgetOption;\n\n                    // Convert the module type of known legacy widgets\n                    if ($widget->type == 'ticker' && $widgetOption->option == 'sourceId' && $widgetOption->value == '2') {\n                        $widget->type = 'datasetticker';\n                    }\n                }\n\n                // convert old sub-playlist Widget options to the new way we handle them\n                if (isset($oldSubPlaylistIds) && isset($oldSubPlaylistOptions)) {\n                    $subPlaylistsOption = $this->convertOldPlaylistOptions($oldSubPlaylistIds, $oldSubPlaylistOptions);\n                }\n\n                //\n                // Get the MediaId associated with this widget\n                //\n                if ($module->regionSpecific == 0) {\n                    $this->getLog()->debug('Library Widget, getting mediaId');\n\n                    $this->getLog()->debug(sprintf('Assigning mediaId %d', $widget->tempId));\n                    $widget->assignMedia($widget->tempId);\n                }\n\n                //\n                // Audio\n                //\n                foreach ($mediaNode['audio'] as $audioNode) {\n                    if ($audioNode == []) {\n                        continue;\n                    }\n\n                    $widgetAudio = $this->widgetAudioFactory->createEmpty();\n                    $widgetAudio->mediaId = $audioNode['mediaId'];\n                    $widgetAudio->volume = $audioNode['volume'];\n                    $widgetAudio->loop = $audioNode['loop'];\n                    $widget->assignAudio($widgetAudio);\n                }\n\n                // Sub-Playlist widgets with Playlists\n                if ($widget->type == 'subplaylist') {\n                    $widgets = [];\n                    $this->getLog()->debug('Layout import, creating layout Playlists from JSON, there are ' . count($playlistJson) . ' Playlists to create');\n\n                    foreach ($playlistJson as $playlistDetail) {\n                        $newPlaylist = $this->playlistFactory->createEmpty()->hydrate($playlistDetail);\n                        $newPlaylist->tags = [];\n\n                        // Populate tags\n                        if ($playlistDetail['tags'] !== null && count($playlistDetail['tags']) > 0 && $importTags) {\n                            foreach ($playlistDetail['tags'] as $tag) {\n                                $newPlaylist->tags[] = $this->tagFactory->tagFromString(\n                                    $tag['tag'] . (!empty($tag['value']) ? '|' . $tag['value'] : '')\n                                );\n                            }\n                        }\n\n                        // Check to see if it matches our Sub-Playlist widget config\n                        foreach ($subPlaylistsOption as $subPlaylistItem) {\n                            if ($newPlaylist->playlistId === $subPlaylistItem['playlistId']) {\n                                // Store the oldId to swap permissions later\n                                $oldIds[] = $newPlaylist->playlistId;\n\n                                // Store the Widgets on the Playlist\n                                $widgets[$newPlaylist->playlistId] = $newPlaylist->widgets;\n\n                                // Save a new Playlist and capture the Id\n                                $this->setOwnerAndSavePlaylist($newPlaylist, $folder);\n\n                                $newIds[] = $newPlaylist->playlistId;\n                            }\n                        }\n                    }\n\n                    $combined = array_combine($oldIds, $newIds);\n\n                    $playlists = $this->createNestedPlaylistWidgets($widgets, $combined, $playlists);\n                    $updatedSubPlaylists = [];\n                    foreach ($combined as $old => $new) {\n                        foreach ($subPlaylistsOption as $subPlaylistItem) {\n                            if ($subPlaylistItem['playlistId'] === $old) {\n                                $subPlaylistItem['playlistId'] = $new;\n                                $updatedSubPlaylists[] = $subPlaylistItem;\n                            }\n                        }\n                    }\n\n                    $widget->setOptionValue('subPlaylists', 'attrib', json_encode($updatedSubPlaylists));\n                }\n\n                // Add the widget to the regionPlaylist\n                $playlist->assignWidget($widget);\n\n                // interactive Actions\n                $actions = $mediaNode['actions'] ?? [];\n                foreach ($actions as $action) {\n                    $newAction = $this->actionFactory->create($action['triggerType'], $action['triggerCode'], $action['actionType'], 'importWidget', $action['sourceId'], $action['target'], $action['targetId'], $action['widgetId'], $action['layoutCode']);\n                    $newAction->save(['validate' => false]);\n                }\n            }\n\n            // Assign Playlist to the Region\n            $region->regionPlaylist = $playlist;\n\n            // Assign the region to the Layout\n            if ($region->isDrawer === 1) {\n                $layout->drawers[] = $region;\n            } else {\n                $layout->regions[] = $region;\n            }\n        }\n\n        $this->getLog()->debug(sprintf('Finished loading layout - there are %d regions.', count($layout->regions)));\n\n        $this->getLog()->debug(sprintf('Finished loading layout - there are %d drawer regions.', count($layout->drawers)));\n\n        if ($importTags) {\n            foreach ($layoutJson['layoutDefinitions']['tags'] as $tagNode) {\n                if ($tagNode == []) {\n                    continue;\n                }\n\n                $layout->tags[] = $this->tagFactory->tagFromString(\n                    $tagNode['tag'] . (!empty($tagNode['value']) ? '|' . $tagNode['value'] : '')\n                );\n            }\n        }\n\n        // The parsed, finished layout\n        return [$layout, $playlists];\n    }\n\n    /**\n     * Create Layout from ZIP File\n     * @param string $zipFile\n     * @param string $layoutName\n     * @param int $userId\n     * @param int $template\n     * @param int $replaceExisting\n     * @param int $importTags\n     * @param bool $useExistingDataSets\n     * @param bool $importDataSetData\n     * @param DataSetFactory $dataSetFactory\n     * @param string $tags\n     * @param \\Slim\\Interfaces\\RouteParserInterface $routeParser $routeParser\n     * @param MediaServiceInterface $mediaService\n     * @param int $folderId\n     * @return Layout\n     * @throws DuplicateEntityException\n     * @throws GeneralException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     * @throws \\Xibo\\Support\\Exception\\ConfigurationException\n     */\n    public function createFromZip($zipFile, $layoutName, $userId, $template, $replaceExisting, $importTags, $useExistingDataSets, $importDataSetData, $dataSetFactory, $tags, $routeParser, MediaServiceInterface $mediaService, int $folderId)\n    {\n        $this->getLog()->debug(sprintf('Create Layout from ZIP File: %s, imported name will be %s.', $zipFile, $layoutName));\n\n        $libraryLocation = $this->config->getSetting('LIBRARY_LOCATION') . 'temp/';\n\n        // Do some pre-checks on the arguments we have been provided\n        if (!file_exists($zipFile)) {\n            throw new InvalidArgumentException(__('File does not exist'));\n        }\n\n        // Open the Zip file\n        $zip = new \\ZipArchive();\n        if (!$zip->open($zipFile)) {\n            throw new InvalidArgumentException(__('Unable to open ZIP'));\n        }\n\n        // Get the layout details\n        $layoutDetails = json_decode($zip->getFromName('layout.json'), true);\n\n        // Get the Playlist details\n        $playlistDetails = $zip->getFromName('playlist.json');\n        $nestedPlaylistDetails = $zip->getFromName('nestedPlaylist.json');\n        $folder = $this->folderFactory->getById($folderId);\n\n        // for old imports it may not exist and would error out without this check.\n        if (array_key_exists('layoutDefinitions', $layoutDetails)) {\n            // Construct the Layout\n            if ($playlistDetails !== false) {\n                $playlistDetails = json_decode(($playlistDetails), true);\n            }\n\n            if ($nestedPlaylistDetails !== false) {\n                $nestedPlaylistDetails = json_decode($nestedPlaylistDetails, true);\n            }\n\n            $jsonResults = $this->loadByJson($layoutDetails, $playlistDetails, $nestedPlaylistDetails, $folder, null, $importTags);\n            $layout = $jsonResults[0];\n            $playlists = $jsonResults[1];\n\n            if (array_key_exists('code', $layoutDetails['layoutDefinitions'])) {\n                // Layout code, remove it if Layout with the same code already exists in the CMS, otherwise import would fail.\n                // if the code does not exist, then persist it on import.\n                try {\n                    $this->getByCode($layoutDetails['layoutDefinitions']['code']);\n                    $layout->code = null;\n                } catch (NotFoundException $exception) {\n                    $layout->code = $layoutDetails['layoutDefinitions']['code'];\n                }\n            }\n        } else {\n            $layout = $this->loadByXlf($zip->getFromName('layout.xml'));\n        }\n\n        $this->getLog()->debug('Layout Loaded: ' . $layout);\n\n        // Ensure width and height are integer type for resolution validation purpose xibosignage/xibo#1648\n        $layout->width = (int)$layout->width;\n        $layout->height = (int)$layout->height;\n\n        // Override the name/description\n        $layout->layout = (($layoutName != '') ? $layoutName : $layoutDetails['layout']);\n        $layout->description = (isset($layoutDetails['description']) ? $layoutDetails['description'] : '');\n\n        // Get global stat setting of layout to on/off proof of play statistics\n        $layout->enableStat = $this->config->getSetting('LAYOUT_STATS_ENABLED_DEFAULT');\n\n        $this->getLog()->debug('Layout Loaded: ' . $layout);\n\n        // Check that the resolution we have in this layout exists, and if not create it.\n        try {\n            if ($layout->schemaVersion < 2) {\n                $this->resolutionFactory->getByDesignerDimensions($layout->width, $layout->height);\n            } else {\n                $this->resolutionFactory->getByDimensions($layout->width, $layout->height);\n            }\n        } catch (NotFoundException $notFoundException) {\n            $this->getLog()->info('Import is for an unknown resolution, we will create it with name: ' . $layout->width . ' x ' . $layout->height);\n\n            $resolution = $this->resolutionFactory->create($layout->width . ' x ' . $layout->height, (int)$layout->width, (int)$layout->height);\n            $resolution->userId = $userId;\n            $resolution->save();\n        }\n\n        // Update region names\n        if (isset($layoutDetails['regions']) && count($layoutDetails['regions']) > 0) {\n            $this->getLog()->debug('Updating region names according to layout.json');\n            foreach ($layout->regions as $region) {\n                if (array_key_exists($region->tempId, $layoutDetails['regions']) && !empty($layoutDetails['regions'][$region->tempId])) {\n                    $region->name = $layoutDetails['regions'][$region->tempId];\n                    $region->regionPlaylist->name = $layoutDetails['regions'][$region->tempId];\n                }\n            }\n        }\n\n        // Update drawer region names\n        if (isset($layoutDetails['drawers']) && count($layoutDetails['drawers']) > 0) {\n            $this->getLog()->debug('Updating drawer region names according to layout.json');\n            foreach ($layout->drawers as $drawer) {\n                if (array_key_exists($drawer->tempId, $layoutDetails['drawers']) && !empty($layoutDetails['drawers'][$drawer->tempId])) {\n                    $drawer->name = $layoutDetails['drawers'][$drawer->tempId];\n                    $drawer->regionPlaylist->name = $layoutDetails['drawers'][$drawer->tempId];\n                }\n            }\n        }\n\n        // Remove the tags if necessary\n        if (!$importTags) {\n            $this->getLog()->debug('Removing tags from imported layout');\n            $layout->tags = [];\n        }\n\n        // Add the template tag if we are importing a template\n        if ($template) {\n            $layout->tags[] = $this->tagFactory->getByTag('template');\n        }\n\n        // Tag as imported\n        $layout->tags[] = $this->tagFactory->tagFromString('imported');\n\n        // Tag from the upload form\n        $tagsFromForm = (($tags != '') ? $this->tagFactory->tagsFromString($tags) : []);\n        foreach ($tagsFromForm as $tagFromForm) {\n            $layout->tags[] = $tagFromForm;\n        }\n\n        // Set the owner\n        $layout->setOwner($userId, true);\n\n        // Track if we've added any fonts\n        $fontsAdded = false;\n\n        $widgets = $layout->getAllWidgets();\n        $this->getLog()->debug('Layout has ' . count($widgets) . ' widgets');\n\n        $this->getLog()->debug('Process mapping.json file.');\n\n        // Go through each region and add the media (updating the media ids)\n        $mappings = json_decode($zip->getFromName('mapping.json'), true);\n        $oldMediaIds = [];\n        $newMediaIds = [];\n        foreach ($mappings as $file) {\n            // Import the Media File\n            $intendedMediaName = $file['name'];\n\n            // Validate the file name\n            $fileName = basename($file['file']);\n            if (empty($fileName) || $fileName == '.') {\n                $this->getLog()->error('Skipping file on import due to invalid filename. ' . $fileName);\n                continue;\n            }\n\n            $temporaryFileName = $libraryLocation . $fileName;\n\n            // Get the file from the ZIP\n            $fileStream = $zip->getStream('library/' . $fileName);\n\n            if ($fileStream === false) {\n                // Log out the entire ZIP file and all entries.\n                $log = 'Problem getting library/' . $fileName . '. Files: ';\n                for ($i = 0; $i < $zip->numFiles; $i++) {\n                    $log .= $zip->getNameIndex($i) . ', ';\n                }\n\n                $this->getLog()->error($log);\n\n                throw new InvalidArgumentException(__('Empty file in ZIP'));\n            }\n\n            // Open a file pointer to stream into\n            if (!$temporaryFileStream = fopen($temporaryFileName, 'w')) {\n                throw new InvalidArgumentException(__('Cannot save media file from ZIP file'), 'temp');\n            }\n\n            // Loop over the file and write into the stream\n            while (!feof($fileStream)) {\n                fwrite($temporaryFileStream, fread($fileStream, 8192));\n            }\n\n            fclose($fileStream);\n            fclose($temporaryFileStream);\n\n            // Check we don't already have one\n            $newMedia = false;\n            $isFont = (isset($file['font']) && $file['font'] == 1);\n\n            try {\n                $media = $this->mediaFactory->getByName($intendedMediaName);\n\n                $this->getLog()->debug('Media already exists with name: ' .  $intendedMediaName);\n\n                if ($replaceExisting && !$isFont) {\n                    // Media with this name already exists, but we don't want to use it.\n                    $intendedMediaName = 'import_' . $layout->layout . '_' . uniqid();\n                    throw new NotFoundException();\n                }\n            } catch (NotFoundException $e) {\n                // Create it instead\n                $this->getLog()->debug('Media does not exist in Library, add it ' .  $fileName);\n\n                $media = $this->mediaFactory->create($intendedMediaName, $fileName, $file['type'], $userId, $file['duration']);\n\n                if ($importTags && isset($file['tags'])) {\n                    foreach ($file['tags'] as $tagNode) {\n                        if ($tagNode == []) {\n                            continue;\n                        }\n\n                        $media->tags[] = $this->tagFactory->tagFromString(\n                            $tagNode['tag'] . (!empty($tagNode['value']) ? '|' . $tagNode['value'] : '')\n                        );\n                    }\n                }\n\n                $media->tags[] = $this->tagFactory->tagFromString('imported');\n                $media->folderId = $folder->id;\n                $media->permissionsFolderId =\n                    ($folder->permissionsFolderId == null) ? $folder->id : $folder->permissionsFolderId;\n                // Get global stat setting of media to set to on/off/inherit\n                $media->enableStat = $this->config->getSetting('MEDIA_STATS_ENABLED_DEFAULT');\n                $media->save();\n\n                $newMedia = true;\n            }\n\n            // Find where this is used and swap for the real mediaId\n            $oldMediaId = $file['mediaid'];\n            $newMediaId = $media->mediaId;\n            $oldMediaIds[] = $oldMediaId;\n            $newMediaIds[] = $newMediaId;\n\n            if ($file['background'] == 1) {\n                // Set the background image on the new layout\n                $layout->backgroundImageId = $newMediaId;\n            } else if ($isFont) {\n                // Just raise a flag to say that we've added some fonts to the library\n                if ($newMedia) {\n                    $fontsAdded = true;\n                }\n            } else {\n                // Go through all widgets and replace if necessary\n                // Keep the keys the same? Doesn't matter\n                foreach ($widgets as $widget) {\n                    /* @var Widget $widget */\n                    $audioIds = $widget->getAudioIds();\n\n                    $this->getLog()->debug(sprintf('Checking Widget for the old mediaID [%d] so we can replace it with the new mediaId [%d] and storedAs [%s]. Media assigned to widget %s.', $oldMediaId, $newMediaId, $media->storedAs, json_encode($widget->mediaIds)));\n\n                    if (in_array($oldMediaId, $widget->mediaIds)) {\n                        $this->getLog()->debug(sprintf('Removing %d and replacing with %d', $oldMediaId, $newMediaId));\n\n                        // Are we an audio record?\n                        if (in_array($oldMediaId, $audioIds)) {\n                            // Swap the mediaId on the audio record\n                            foreach ($widget->audio as $widgetAudio) {\n                                if ($widgetAudio->mediaId == $oldMediaId) {\n                                    $widgetAudio->mediaId = $newMediaId;\n                                    break;\n                                }\n                            }\n                        } else {\n                            // Non audio\n                            $widget->setOptionValue('uri', 'attrib', $media->storedAs);\n                        }\n\n                        // Always manage the assignments\n                        // Unassign the old ID\n                        $widget->unassignMedia($oldMediaId);\n\n                        // Assign the new ID\n                        $widget->assignMedia($newMediaId);\n                    }\n                    // change mediaId references in applicable widgets, outside of the if condition,\n                    // because if the Layout is loadByXLF we will not have mediaIds set on Widget at this point\n                    // the mediaIds array for Widgets with Library references will be correctly populated on getResource call from Player/CMS.\n                    // if the Layout was loadByJson then it will already have correct mediaIds array at this point.\n                    $this->handleWidgetMediaIdReferences($widget, $newMediaId, $oldMediaId);\n                }\n            }\n        }\n        $uploadedMediaIds = array_combine($oldMediaIds, $newMediaIds);\n\n        // Playlists with media widgets\n        // We will iterate through all Playlists we've created during layout import here and\n        // replace any mediaIds if needed\n        if (isset($playlists) && $playlistDetails !== false) {\n            foreach ($playlists as $playlist) {\n                /** @var $playlist Playlist */\n                foreach ($playlist->widgets as $widget) {\n                    $audioIds = $widget->getAudioIds();\n\n                    foreach ($widget->mediaIds as $mediaId) {\n                        foreach ($uploadedMediaIds as $old => $new) {\n                            if ($mediaId == $old) {\n                                $this->getLog()->debug(sprintf('Playlist import Removing %d and replacing with %d', $old, $new));\n                                // Are we an audio record?\n                                if (in_array($old, $audioIds)) {\n                                    // Swap the mediaId on the audio record\n                                    foreach ($widget->audio as $widgetAudio) {\n                                        if ($widgetAudio->mediaId == $old) {\n                                            $widgetAudio->mediaId = $new;\n                                            break;\n                                        }\n                                    }\n                                } else {\n                                    $addedMedia = $this->mediaFactory->getById($new);\n                                    // Non audio\n                                    $widget->setOptionValue('uri', 'attrib', $addedMedia->storedAs);\n                                }\n\n                                // Always manage the assignments\n                                // Unassign the old ID\n                                $widget->unassignMedia($old);\n\n                                // Assign the new ID\n                                $widget->assignMedia($new);\n\n                                // change mediaId references in applicable widgets in all Playlists we have created on this import.\n                                $this->handleWidgetMediaIdReferences($widget, $new, $old);\n                            }\n                        }\n                    }\n                    $widget->save();\n\n                    if (!in_array($widget, $playlist->widgets)) {\n                        $playlist->assignWidget($widget);\n                        $playlist->requiresDurationUpdate = 1;\n                        $playlist->save();\n                    }\n                    // add Playlist widgets to the $widgets (which already has all widgets from layout regionPlaylists)\n                    // this will be needed if any Playlist has widgets with dataSets\n                    if ($widget->type == 'datasetview' || $widget->type == 'datasetticker' || $widget->type == 'chart') {\n                        $widgets[] = $widget;\n                        $playlistWidgets[] = $widget;\n                    }\n                }\n            }\n        }\n\n        // Handle any datasets provided with the layout\n        $dataSets = $zip->getFromName('dataSet.json');\n\n        if ($dataSets !== false) {\n            $dataSets = json_decode($dataSets, true);\n\n            $this->getLog()->debug('There are ' . count($dataSets) . ' DataSets to import.');\n\n            foreach ($dataSets as $item) {\n                // Hydrate a new dataset object with this json object\n                $dataSet = $dataSetFactory->createEmpty()->hydrate($item);\n                $dataSet->columns = [];\n                $dataSetId = $dataSet->dataSetId;\n                $columnWithImages = [];\n                // We must null the ID so that we don't try to load the dataset when we assign columns\n                $dataSet->dataSetId = null;\n\n                // Hydrate the columns\n                foreach ($item['columns'] as $columnItem) {\n                    $this->getLog()->debug(sprintf('Assigning column: %s', json_encode($columnItem)));\n                    if ($columnItem['dataTypeId'] === 5) {\n                        $columnWithImages[] = $columnItem['heading'];\n                    }\n                    $dataSet->assignColumn($dataSetFactory->getDataSetColumnFactory()->createEmpty()->hydrate($columnItem));\n                }\n\n                /** @var DataSet $existingDataSet */\n                $existingDataSet = null;\n\n                // Do we want to try and use a dataset that already exists?\n                if ($useExistingDataSets) {\n                    // Check to see if we already have a dataset with the same code/name, prefer code.\n                    if ($dataSet->code != '') {\n                        try {\n                            // try and get by code\n                            $existingDataSet = $dataSetFactory->getByCode($dataSet->code);\n                        } catch (NotFoundException $e) {\n                            $this->getLog()->debug(sprintf('Existing dataset not found with code %s', $dataSet->code));\n                        }\n                    }\n\n                    if ($existingDataSet === null) {\n                        // try by name\n                        try {\n                            $existingDataSet = $dataSetFactory->getByName($dataSet->dataSet);\n                        } catch (NotFoundException $e) {\n                            $this->getLog()->debug(sprintf('Existing dataset not found with name %s', $dataSet->code));\n                        }\n                    }\n                }\n\n                if ($existingDataSet === null) {\n                    $this->getLog()->debug(sprintf('Matching DataSet not found, will need to add one. useExistingDataSets = %s', $useExistingDataSets));\n\n                    // We want to add the dataset we have as a new dataset.\n                    // we will need to make sure we clear the ID's and save it\n                    $existingDataSet = clone $dataSet;\n                    $existingDataSet->userId = $this->getUser()->userId;\n                    $existingDataSet->folderId = $folder->id;\n                    $existingDataSet->permissionsFolderId =\n                        ($folder->permissionsFolderId == null) ? $folder->id : $folder->permissionsFolderId;\n                    $existingDataSet->save();\n\n                    // Do we need to add data\n                    if ($importDataSetData) {\n                        // Import the data here\n                        $this->getLog()->debug(sprintf('Importing data into new DataSet %d', $existingDataSet->dataSetId));\n\n                        foreach ($item['data'] as $itemData) {\n                            if (isset($itemData['id'])) {\n                                unset($itemData['id']);\n                            }\n\n                            foreach ($columnWithImages as $columnHeading) {\n                                foreach ($uploadedMediaIds as $old => $new) {\n                                    if ($itemData[$columnHeading] == $old) {\n                                        $itemData[$columnHeading] = $new;\n                                    }\n                                }\n                            }\n\n                            $existingDataSet->addRow($itemData);\n                        }\n                    }\n                } else {\n                    $this->getLog()->debug('Matching DataSet found, validating the columns');\n\n                    // Load the existing dataset\n                    $existingDataSet->load();\n\n                    // Validate that the columns are the same\n                    if (count($dataSet->columns) != count($existingDataSet->columns)) {\n                        $this->getLog()->debug(sprintf('Columns for Imported DataSet = %s', json_encode($dataSet->columns)));\n                        throw new InvalidArgumentException(sprintf(__('DataSets have different number of columns imported = %d, existing = %d'), count($dataSet->columns), count($existingDataSet->columns)));\n                    }\n\n                    // Check the column headings\n                    $diff = array_udiff($dataSet->columns, $existingDataSet->columns, function ($a, $b) {\n                        /** @var DataSetColumn $a */\n                        /** @var DataSetColumn $b */\n                        return $a->heading == $b->heading;\n                    });\n\n                    if (count($diff) > 0) {\n                        throw new InvalidArgumentException(__('DataSets have different column names'));\n                    }\n\n                    // Set the prior dataSetColumnId on each column.\n                    foreach ($existingDataSet->columns as $column) {\n                        // Lookup the matching column in the external dataSet definition.\n                        foreach ($dataSet->columns as $externalColumn) {\n                            if ($externalColumn->heading == $column->heading) {\n                                $column->priorDatasetColumnId = $externalColumn->dataSetColumnId;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                // Replace instances of this dataSetId with the existing dataSetId, which will either be the existing\n                // dataSet or one we've added above.\n                // Also make sure we replace the columnId's with the columnId's in the new \"existing\" DataSet.\n                foreach ($widgets as $widget) {\n                    /* @var Widget $widget */\n                    if ($widget->type == 'datasetview' || $widget->type == 'datasetticker' || $widget->type == 'chart') {\n                        $widgetDataSetId = $widget->getOptionValue('dataSetId', 0);\n\n                        if ($widgetDataSetId != 0 && $widgetDataSetId == $dataSetId) {\n                            // Widget has a dataSet and it matches the one we've just actioned.\n                            $widget->setOptionValue('dataSetId', 'attrib', $existingDataSet->dataSetId);\n\n                            // Check for and replace column references.\n                            // We are looking in the \"columns\" option for datasetview\n                            // and the \"template\" option for datasetticker\n                            // and the \"config\" option for chart\n                            if ($widget->type == 'datasetview') {\n                                // Get the columns option\n                                $columns = explode(',', $widget->getOptionValue('columns', ''));\n\n                                $this->getLog()->debug(sprintf('Looking to replace columns from %s', json_encode($columns)));\n\n                                foreach ($existingDataSet->columns as $column) {\n                                    foreach ($columns as $index => $col) {\n                                        if ($col == $column->priorDatasetColumnId) {\n                                            $columns[$index] = $column->dataSetColumnId;\n                                        }\n                                    }\n                                }\n\n                                $columns = implode(',', $columns);\n\n                                $widget->setOptionValue('columns', 'attrib', $columns);\n\n                                $this->getLog()->debug(sprintf('Replaced columns with %s', $columns));\n                            } else if ($widget->type == 'datasetticker') {\n                                // Get the template option\n                                $template = $widget->getOptionValue('template', '');\n\n                                $this->getLog()->debug(sprintf('Looking to replace columns from %s', $template));\n\n                                foreach ($existingDataSet->columns as $column) {\n                                    // We replace with the |%d] so that we dont experience double replacements\n                                    $template = str_replace('|' . $column->priorDatasetColumnId . ']', '|' . $column->dataSetColumnId . ']', $template);\n                                }\n\n                                $widget->setOptionValue('template', 'cdata', $template);\n\n                                $this->getLog()->debug(sprintf('Replaced columns with %s', $template));\n                            } else if ($widget->type == 'chart') {\n                                // get the config for the chart widget\n                                $oldConfig = json_decode($widget->getOptionValue('config', '[]'), true);\n                                $newConfig = [];\n                                $this->getLog()->debug(sprintf('Looking to replace config from %s', json_encode($oldConfig)));\n\n                                // go through the chart config and our dataSet\n                                foreach ($oldConfig as $config) {\n                                    foreach ($existingDataSet->columns as $column) {\n                                        // replace with this condition to avoid double replacements\n                                        if ($config['dataSetColumnId'] == $column->priorDatasetColumnId) {\n                                            // create our new config, with replaced dataSetColumnIds\n                                            $newConfig[] = [\n                                                'columnType' => $config['columnType'],\n                                                'dataSetColumnId' => $column->dataSetColumnId\n                                            ];\n                                        }\n                                    }\n                                }\n\n                                $this->getLog()->debug(sprintf('Replaced config with %s', json_encode($newConfig)));\n\n                                // json encode our newConfig and set it as config attribute in the imported chart widget.\n                                $widget->setOptionValue('config', 'attrib', json_encode($newConfig));\n                            }\n                        }\n\n                        // save widgets with dataSets on Playlists, widgets directly on the layout are saved later on.\n                        if (isset($playlistWidgets) && in_array($widget, $playlistWidgets)) {\n                            $widget->save();\n                        }\n                    }\n                }\n            }\n        }\n\n        $image_path = $zip->getFromName('library/thumbs/campaign_thumb.png');\n        if ($image_path !== false) {\n            $temporaryLayoutThumb = $libraryLocation . $layout->layout . '-campaign_thumb.png';\n            $layout->thumbnail = $temporaryLayoutThumb;\n            $image = imagecreatefromstring($image_path);\n            imagepng($image, $temporaryLayoutThumb);\n        }\n\n        $this->getLog()->debug('Finished creating from Zip');\n\n        // Finished\n        $zip->close();\n\n        // We need one final pass through all widgets on the layout so that we can set the durations properly.\n        foreach ($layout->getAllWidgets() as $widget) {\n            $module = $this->moduleFactory->createWithWidget($widget);\n            $widget->calculateDuration($module, true);\n\n            // Get global stat setting of widget to set to on/off/inherit\n            $widget->setOptionValue('enableStat', 'attrib', $this->config->getSetting('WIDGET_STATS_ENABLED_DEFAULT'));\n        }\n\n        if ($fontsAdded && $routeParser != null) {\n            $this->getLog()->debug('Fonts have been added');\n            $mediaService->setUser($this->getUser())->installFonts($routeParser);\n        }\n\n        return $layout;\n    }\n\n    /**\n     * Create widgets in nested Playlists and handle their closure table\n     *\n     * @param $widgets array An array of playlist widgets with old playlistId as key\n     * @param $combined array An array of key and value pairs with oldPlaylistId => newPlaylistId\n     * @param $playlists array An array of Playlist objects\n     * @return array An array of Playlist objects with widgets\n     * @throws NotFoundException\n     */\n    public function createNestedPlaylistWidgets($widgets, $combined, &$playlists)\n    {\n        foreach ($widgets as $playlistId => $widgetsDetails) {\n            foreach ($combined as $old => $new) {\n                if ($old == $playlistId) {\n                    $playlistId = $new;\n                }\n            }\n\n            $playlist = $this->playlistFactory->getById($playlistId);\n\n            foreach ($widgetsDetails as $widgetsDetail) {\n                $modules = $this->moduleFactory->get();\n                $playlistWidget = $this->widgetFactory->createEmpty();\n                $playlistWidget->playlistId = $playlistId;\n                $playlistWidget->widgetId = null;\n                $playlistWidget->type = $widgetsDetail['type'];\n                $playlistWidget->ownerId = $playlist->ownerId;\n                $playlistWidget->displayOrder = $widgetsDetail['displayOrder'];\n                $playlistWidget->duration = $widgetsDetail['duration'];\n                $playlistWidget->useDuration = $widgetsDetail['useDuration'];\n                $playlistWidget->calculatedDuration = $widgetsDetail['calculatedDuration'];\n                $playlistWidget->fromDt = $widgetsDetail['fromDt'];\n                $playlistWidget->toDt = $widgetsDetail['toDt'];\n                $playlistWidget->tempId = $widgetsDetail['tempId'];\n                $playlistWidget->mediaIds = $widgetsDetail['mediaIds'];\n                $playlistWidget->widgetOptions = [];\n\n                $nestedSubPlaylists = [];\n\n                foreach ($widgetsDetail['widgetOptions'] as $widgetOptionE) {\n                    if ($playlistWidget->type == 'subplaylist') {\n                        // subPlaylistOptions and subPlaylistIds are no longer in use from 2.3\n                        // we need to capture these options to support Layout with sub-playlist import from older CMS\n                        // we use continue for those 2 options, as we do not need to create widgetOption for them\n                        if ($widgetOptionE['option'] == 'subPlaylistOptions') {\n                            $oldNestedSubPlaylistOptions = json_decode($widgetOptionE['value'], true);\n                            continue;\n                        }\n\n                        if ($widgetOptionE['option'] == 'subPlaylistIds') {\n                            $oldNestedSubPlaylistIds = json_decode($widgetOptionE['value'], true);\n                            continue;\n                        }\n\n                        if ($widgetOptionE['option'] == 'subPlaylists') {\n                            $nestedSubPlaylists = json_decode($widgetOptionE['value'], true);\n                        }\n                    }\n\n                    $widgetOption = $this->widgetOptionFactory->createEmpty();\n                    $widgetOption->type = $widgetOptionE['type'];\n                    $widgetOption->option = $widgetOptionE['option'];\n                    $widgetOption->value = $widgetOptionE['value'];\n\n                    $playlistWidget->widgetOptions[] = $widgetOption;\n                }\n\n                // convert old sub-playlist Widget options to the new way we handle them\n                if (isset($oldNestedSubPlaylistIds) && isset($oldNestedSubPlaylistOptions)) {\n                    $nestedSubPlaylists = $this->convertOldPlaylistOptions($oldNestedSubPlaylistIds, $oldNestedSubPlaylistOptions);\n                }\n\n                $module = $modules[$playlistWidget->type];\n\n                if ($playlistWidget->type == 'subplaylist') {\n                    $updatedSubPlaylists = [];\n                    foreach ($combined as $old => $new) {\n                        foreach ($nestedSubPlaylists as $subPlaylistItem) {\n                            if ($subPlaylistItem['playlistId'] === $old) {\n                                $subPlaylistItem['playlistId'] = $new;\n                                $updatedSubPlaylists[] = $subPlaylistItem;\n                            }\n                        }\n                    }\n\n                    foreach ($updatedSubPlaylists as $updatedSubPlaylistItem) {\n                        $this->getStore()->insert('\n                            INSERT INTO `lkplaylistplaylist` (parentId, childId, depth)\n                            SELECT p.parentId, c.childId, p.depth + c.depth + 1\n                              FROM lkplaylistplaylist p, lkplaylistplaylist c\n                             WHERE p.childId = :parentId AND c.parentId = :childId\n                        ', [\n                            'parentId' => $playlist->playlistId,\n                            'childId' => $updatedSubPlaylistItem['playlistId']\n                        ]);\n                    }\n\n                    $playlistWidget->setOptionValue('subPlaylists', 'attrib', json_encode($updatedSubPlaylists));\n                }\n\n                $playlist->assignWidget($playlistWidget);\n                $playlist->requiresDurationUpdate = 1;\n\n                // save non-media based widget, we can't save media based widgets here as we don't have updated mediaId yet.\n                if ($module->regionSpecific == 1 && $playlistWidget->mediaIds == []) {\n                    $playlistWidget->save();\n                }\n            }\n\n            $playlists[] = $playlist;\n            $this->getLog()->debug('Finished creating Playlist added the following Playlist ' . json_encode($playlist));\n        }\n\n        return $playlists;\n    }\n\n    /**\n     * Get all Codes assigned to Layouts\n     * @param array $filterBy\n     * @return array\n     */\n    public function getLayoutCodes($filterBy = []): array\n    {\n        $parsedFilter = $this->getSanitizer($filterBy);\n        $params = [];\n        $select = 'SELECT DISTINCT code, `campaign`.CampaignID, `campaign`.permissionsFolderId ';\n        $body = ' FROM layout INNER JOIN `lkcampaignlayout` ON lkcampaignlayout.LayoutID = layout.LayoutID INNER JOIN `campaign` ON lkcampaignlayout.CampaignID = campaign.CampaignID AND campaign.IsLayoutSpecific = 1 WHERE code IS NOT NULL';\n\n        // get by Code\n        if ($parsedFilter->getString('code') != '') {\n            $body.= ' AND layout.code LIKE :code ';\n            $params['code'] = '%' . $parsedFilter->getString('code') . '%';\n        }\n\n        // Logged in user view permissions\n        $this->viewPermissionSql('Xibo\\Entity\\Campaign', $body, $params, 'campaign.campaignId', 'layout.userId', $filterBy, 'campaign.permissionsFolderId');\n\n        $order = ' ORDER BY code';\n\n        // Paging\n        $limit = '';\n        if ($filterBy !== null && $parsedFilter->getInt('start') !== null && $parsedFilter->getInt('length') !== null) {\n            $limit = ' LIMIT ' . $parsedFilter->getInt('start', ['default' => 0]) . ', ' . $parsedFilter->getInt('length', ['default' => 10]);\n        }\n\n        $sql = $select . $body . $order . $limit;\n        $entries = $this->getStore()->select($sql, $params);\n\n        // Paging\n        if ($limit != '' && count($entries) > 0) {\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total ' . $body, $params);\n            $this->_countLast = intval($results[0]['total']);\n        }\n\n        return $entries;\n    }\n\n    /**\n     * Query for all Layouts\n     * @param array $sortOrder\n     * @param array $filterBy\n     * @return Layout[]\n     * @throws NotFoundException\n     */\n    public function query($sortOrder = null, $filterBy = [])\n    {\n        $parsedFilter = $this->getSanitizer($filterBy);\n        $entries = [];\n        $params = [];\n\n        if ($sortOrder === null) {\n            $sortOrder = ['layout'];\n        }\n\n        $select  = 'SELECT `layout`.layoutID, \n                        `layout`.parentId,\n                        `layout`.layout,\n                        `layout`.description,\n                        `layout`.duration,\n                        `layout`.userID,\n                        `user`.userName as owner,\n                        `campaign`.CampaignID,\n                        `layout`.status,\n                        `layout`.statusMessage,\n                        `layout`.enableStat,\n                        `layout`.width,\n                        `layout`.height,\n                        `layout`.retired,\n                        `layout`.createdDt,\n                        `layout`.modifiedDt,\n                        ( SELECT GROUP_CONCAT(CONCAT_WS(\\'|\\', tag, value))\n                                    FROM tag\n                                    INNER JOIN lktaglayout\n                                        ON lktaglayout.tagId = tag.tagId\n                                        WHERE lktaglayout.layoutId = layout.layoutId\n                                    GROUP BY lktaglayout.layoutId\n                        ) as tags,\n                        `layout`.backgroundImageId,\n                        `layout`.backgroundColor,\n                        `layout`.backgroundzIndex,\n                        `layout`.schemaVersion,\n                        `layout`.publishedStatusId,\n                        `status`.status AS publishedStatus,\n                        `layout`.publishedDate,\n                        `layout`.autoApplyTransitions,\n                        `layout`.code,\n                        `campaign`.folderId,\n                        `campaign`.permissionsFolderId,\n                   ';\n\n        if ($parsedFilter->getInt('campaignId') !== null) {\n            $select .= ' lkcl.displayOrder, ';\n        } else {\n            $select .= ' NULL as displayOrder, ';\n        }\n\n        $select .= \"     (SELECT GROUP_CONCAT(DISTINCT `group`.group)\n                          FROM `permission`\n                            INNER JOIN `permissionentity`\n                            ON `permissionentity`.entityId = permission.entityId\n                            INNER JOIN `group`\n                            ON `group`.groupId = `permission`.groupId\n                         WHERE entity = :permissionEntityForGroup\n                            AND objectId = campaign.CampaignID\n                            AND view = 1\n                        ) AS groupsWithPermissions \";\n        $params['permissionEntityForGroup'] = 'Xibo\\\\Entity\\\\Campaign';\n\n        $body  = \"   FROM layout \";\n        $body .= '  INNER JOIN status ON status.id = layout.publishedStatusId ';\n        $body .= \"  INNER JOIN `lkcampaignlayout` \";\n        $body .= \"   ON lkcampaignlayout.LayoutID = layout.LayoutID \";\n        $body .= \"   INNER JOIN `campaign` \";\n        $body .= \"   ON lkcampaignlayout.CampaignID = campaign.CampaignID \";\n        $body .= \"       AND campaign.IsLayoutSpecific = 1\";\n        $body .= \"   INNER JOIN `user` ON `user`.userId = `campaign`.userId \";\n\n        if ($parsedFilter->getInt('campaignId') !== null) {\n            // Join Campaign back onto it again\n            $body .= \" \n                INNER JOIN `lkcampaignlayout` lkcl \n                ON lkcl.layoutid = layout.layoutid \n                    AND lkcl.CampaignID = :campaignId \n            \";\n            $params['campaignId'] = $parsedFilter->getInt('campaignId');\n        }\n\n        if ($parsedFilter->getInt('displayGroupId') !== null) {\n            $body .= '\n                INNER JOIN `lklayoutdisplaygroup`\n                ON lklayoutdisplaygroup.layoutId = `layout`.layoutId\n                    AND lklayoutdisplaygroup.displayGroupId = :displayGroupId\n            ';\n\n            $params['displayGroupId'] = $parsedFilter->getInt('displayGroupId');\n        }\n\n        if ($parsedFilter->getInt('activeDisplayGroupId') !== null) {\n            $displayGroupIds = [];\n            $displayId = null;\n\n            // get the displayId if we were provided with display specific displayGroup in the filter\n            $sql = 'SELECT display.displayId FROM display INNER JOIN lkdisplaydg ON lkdisplaydg.displayId = display.displayId INNER JOIN displaygroup ON displaygroup.displayGroupId = lkdisplaydg.displayGroupId WHERE displaygroup.displayGroupId = :displayGroupId AND displaygroup.isDisplaySpecific = 1';\n\n            foreach ($this->getStore()->select($sql, ['displayGroupId' => $parsedFilter->getInt('activeDisplayGroupId')]) as $row) {\n                $displayId = $this->getSanitizer($row)->getInt('displayId');\n            }\n\n            // if we have displayId, get all displayGroups to which the display is a member of\n            if ($displayId !== null) {\n                $sql = 'SELECT displayGroupId FROM lkdisplaydg WHERE displayId = :displayId';\n\n                foreach ($this->getStore()->select($sql, ['displayId' => $displayId]) as $row) {\n                    $displayGroupIds[] = $this->getSanitizer($row)->getInt('displayGroupId');\n                }\n            }\n\n            // if we are filtering by actual displayGroup, use just the displayGroupId in the param\n            if ($displayGroupIds == []) {\n                $displayGroupIds[] = $parsedFilter->getInt('activeDisplayGroupId');\n            }\n\n            // get events for the selected displayGroup / Display and all displayGroups the display is member of\n            $body .= '\n                      INNER JOIN `lkscheduledisplaygroup` \n                        ON lkscheduledisplaygroup.displayGroupId IN ( ' . implode(',', $displayGroupIds) . ' )\n                      INNER JOIN schedule \n                        ON schedule.eventId = lkscheduledisplaygroup.eventId\n             ';\n        }\n\n        // MediaID\n        if ($parsedFilter->getInt('mediaId', ['default' => 0]) != 0) {\n            $body .= ' INNER JOIN (\n                SELECT DISTINCT `region`.layoutId\n                  FROM `lkwidgetmedia`\n                    INNER JOIN `widget`\n                    ON `widget`.widgetId = `lkwidgetmedia`.widgetId\n                    INNER JOIN `lkplaylistplaylist`\n                    ON `widget`.playlistId = `lkplaylistplaylist`.childId\n                    INNER JOIN `playlist`\n                    ON `lkplaylistplaylist`.parentId = `playlist`.playlistId\n                    INNER JOIN `region`\n                    ON `region`.regionId = `playlist`.regionId\n                 WHERE `lkwidgetmedia`.mediaId = :mediaId\n                ) layoutsWithMedia\n                ON layoutsWithMedia.layoutId = `layout`.layoutId\n            ';\n\n            $params['mediaId'] = $parsedFilter->getInt('mediaId', ['default' => 0]);\n        }\n\n        // Media Like\n        if (!empty($parsedFilter->getString('mediaLike'))) {\n            $body .= ' INNER JOIN (\n                SELECT DISTINCT `region`.layoutId\n                  FROM `lkwidgetmedia`\n                    INNER JOIN `widget`\n                    ON `widget`.widgetId = `lkwidgetmedia`.widgetId\n                    INNER JOIN `lkplaylistplaylist`\n                    ON `widget`.playlistId = `lkplaylistplaylist`.childId\n                    INNER JOIN `playlist`\n                    ON `lkplaylistplaylist`.parentId = `playlist`.playlistId\n                    INNER JOIN `region`\n                    ON `region`.regionId = `playlist`.regionId\n                    INNER JOIN `media` \n                    ON `lkwidgetmedia`.mediaId = `media`.mediaId\n                 WHERE `media`.name LIKE :mediaLike\n                ) layoutsWithMediaLike\n                ON layoutsWithMediaLike.layoutId = `layout`.layoutId\n            ';\n\n            $params['mediaLike'] = '%' . $parsedFilter->getString('mediaLike') . '%';\n        }\n\n        $body .= \" WHERE 1 = 1 \";\n\n        // Layout Like\n        if ($parsedFilter->getString('layout') != '') {\n            $terms = explode(',', $parsedFilter->getString('layout'));\n            $logicalOperator = $parsedFilter->getString('logicalOperatorName', ['default' => 'OR']);\n            $this->nameFilter(\n                'layout',\n                'layout',\n                $terms,\n                $body,\n                $params,\n                ($parsedFilter->getCheckbox('useRegexForName') == 1),\n                $logicalOperator\n            );\n        }\n\n        if ($parsedFilter->getString('layoutExact') != '') {\n            $body.= \" AND layout.layout = :exact \";\n            $params['exact'] = $parsedFilter->getString('layoutExact');\n        }\n\n        // Layout\n        if ($parsedFilter->getInt('layoutId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.layoutId = :layoutId \";\n            $params['layoutId'] = $parsedFilter->getInt('layoutId', ['default' => 0]);\n        } else if ($parsedFilter->getInt('excludeTemplates', ['default' => 1]) != -1) {\n            // Exclude templates by default\n            if ($parsedFilter->getInt('excludeTemplates', ['default' => 1]) == 1) {\n                $body .= \" AND layout.layoutID NOT IN (SELECT layoutId FROM lktaglayout INNER JOIN tag ON lktaglayout.tagId = tag.tagId WHERE tag = 'template') \";\n            } else {\n                $body .= \" AND layout.layoutID IN (SELECT layoutId FROM lktaglayout INNER JOIN tag ON lktaglayout.tagId = tag.tagId WHERE tag = 'template') \";\n            }\n        }\n\n        // Layout Draft\n        if ($parsedFilter->getInt('parentId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.parentId = :parentId \";\n            $params['parentId'] = $parsedFilter->getInt('parentId', ['default' => 0]);\n        } else if ($parsedFilter->getInt('layoutId', ['default' => 0]) == 0\n            && $parsedFilter->getInt('showDrafts', ['default' => 0]) == 0) {\n            // If we're not searching for a parentId and we're not searching for a layoutId, then don't show any\n            // drafts (parentId will be empty on drafts)\n            $body .= ' AND layout.parentId IS NULL ';\n        }\n\n        // Layout Published Status\n        if ($parsedFilter->getInt('publishedStatusId') !== null) {\n            $body .= \" AND layout.publishedStatusId = :publishedStatusId \";\n            $params['publishedStatusId'] = $parsedFilter->getInt('publishedStatusId');\n        }\n\n        // Layout Status\n        if ($parsedFilter->getInt('status') !== null) {\n            $body .= \" AND layout.status = :status \";\n            $params['status'] = $parsedFilter->getInt('status');\n        }\n\n        // Background Image\n        if ($parsedFilter->getInt('backgroundImageId') !== null) {\n            $body .= \" AND layout.backgroundImageId = :backgroundImageId \";\n            $params['backgroundImageId'] = $parsedFilter->getInt('backgroundImageId', ['default' => 0]);\n        }\n        // Not Layout\n        if ($parsedFilter->getInt('notLayoutId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.layoutId <> :notLayoutId \";\n            $params['notLayoutId'] = $parsedFilter->getInt('notLayoutId', ['default' => 0]);\n        }\n\n        // Owner filter\n        if ($parsedFilter->getInt('userId', ['default' => 0]) != 0) {\n            $body .= \" AND layout.userid = :userId \";\n            $params['userId'] = $parsedFilter->getInt('userId', ['default' => 0]);\n        }\n\n        if ($parsedFilter->getCheckbox('onlyMyLayouts') === 1) {\n            $body .= ' AND layout.userid = :userId ';\n            $params['userId'] = $this->getUser()->userId;\n        }\n\n        // User Group filter\n        if ($parsedFilter->getInt('ownerUserGroupId', ['default' => 0]) != 0) {\n            $body .= ' AND layout.userid IN (SELECT DISTINCT userId FROM `lkusergroup` WHERE groupId =  :ownerUserGroupId) ';\n            $params['ownerUserGroupId'] = $parsedFilter->getInt('ownerUserGroupId', ['default' => 0]);\n        }\n\n        // Retired options (provide -1 to return all)\n        if ($parsedFilter->getInt('retired', ['default' => -1]) != -1) {\n            $body .= \" AND layout.retired = :retired \";\n            $params['retired'] = $parsedFilter->getInt('retired',['default' => 0]);\n        }\n\n        if ($parsedFilter->getInt('ownerCampaignId') !== null) {\n            // Join Campaign back onto it again\n            $body .= \" AND `campaign`.campaignId = :ownerCampaignId \";\n            $params['ownerCampaignId'] = $parsedFilter->getInt('ownerCampaignId', ['default' => 0]);\n        }\n\n        if ($parsedFilter->getInt('layoutHistoryId') !== null) {\n            $body .= ' AND `campaign`.campaignId IN (\n                SELECT MAX(campaignId) \n                  FROM `layouthistory` \n                 WHERE `layouthistory`.layoutId = :layoutHistoryId\n                ) ';\n            $params['layoutHistoryId'] = $parsedFilter->getInt('layoutHistoryId');\n        }\n\n        // Get by regionId\n        if ($parsedFilter->getInt('regionId') !== null) {\n            // Join Campaign back onto it again\n            $body .= \" AND `layout`.layoutId IN (SELECT layoutId FROM `region` WHERE regionId = :regionId) \";\n            $params['regionId'] = $parsedFilter->getInt('regionId', ['default' => 0]);\n        }\n\n        // get by Code\n        if ($parsedFilter->getString('code') != '') {\n            $body.= \" AND layout.code = :code \";\n            $params['code'] = $parsedFilter->getString('code');\n        }\n\n        if ($parsedFilter->getString('codeLike') != '') {\n            $body.= ' AND layout.code LIKE :codeLike ';\n            $params['codeLike'] = '%' . $parsedFilter->getString('codeLike') . '%';\n        }\n\n        // Tags\n        if ($parsedFilter->getString('tags') != '') {\n            $tagFilter = $parsedFilter->getString('tags');\n\n            if (trim($tagFilter) === '--no-tag') {\n                $body .= ' AND `layout`.layoutID NOT IN (\n                    SELECT `lktaglayout`.layoutId\n                     FROM `tag`\n                        INNER JOIN `lktaglayout`\n                        ON `lktaglayout`.tagId = `tag`.tagId\n                    )\n                ';\n            } else {\n                $operator = $parsedFilter->getCheckbox('exactTags') == 1 ? '=' : 'LIKE';\n                $logicalOperator = $parsedFilter->getString('logicalOperator', ['default' => 'OR']);\n                $body .= ' AND layout.layoutID IN (\n                SELECT lktaglayout.layoutId\n                  FROM tag\n                    INNER JOIN lktaglayout\n                    ON lktaglayout.tagId = tag.tagId\n                ';\n\n                $tags = explode(',', $tagFilter);\n                $this->tagFilter($tags, 'lktaglayout', 'lkTagLayoutId', 'layoutId', $logicalOperator, $operator, $body, $params);\n            }\n        }\n\n        // Show All, Used or UnUsed\n        // Used - In active schedule, scheduled in the future, directly assigned to displayGroup, default Layout.\n        // Unused - Every layout NOT matching the Used ie not in active schedule, not scheduled in the future, not directly assigned to any displayGroup, not default layout.\n        if ($parsedFilter->getInt('filterLayoutStatusId', ['default' => 1]) != 1)  {\n            if ($parsedFilter->getInt('filterLayoutStatusId') == 2) {\n\n                // Only show used layouts\n                $now = Carbon::now()->format('U');\n                $sql = 'SELECT DISTINCT schedule.CampaignID FROM schedule WHERE ( ( schedule.fromDt < '. $now . ' OR schedule.fromDt = 0 ) ' . ' AND schedule.toDt > ' . $now . ') OR schedule.fromDt > ' . $now;\n                $campaignIds = [];\n                foreach ($this->getStore()->select($sql, []) as $row) {\n                    $campaignIds[] = $row['CampaignID'];\n                }\n                $body .= ' AND ('\n                    . '      campaign.CampaignID IN ( ' . implode(',', array_filter($campaignIds)) . ' ) \n                             OR layout.layoutID IN (SELECT DISTINCT defaultlayoutid FROM display) \n                             OR layout.layoutID IN (SELECT DISTINCT layoutId FROM lklayoutdisplaygroup)'\n                    . ' ) ';\n            }\n            else {\n                // Only show unused layouts\n                $now = Carbon::now()->format('U');\n                $sql = 'SELECT DISTINCT schedule.CampaignID FROM schedule WHERE ( ( schedule.fromDt < '. $now . ' OR schedule.fromDt = 0 ) ' . ' AND schedule.toDt > ' . $now . ') OR schedule.fromDt > ' . $now;\n                $campaignIds = [];\n                foreach ($this->getStore()->select($sql, []) as $row) {\n                    $campaignIds[] = $row['CampaignID'];\n                }\n\n                $body .= ' AND campaign.CampaignID NOT IN ( ' . implode(',', array_filter($campaignIds)) . ' )  \n                     AND layout.layoutID NOT IN (SELECT DISTINCT defaultlayoutid FROM display) \n                     AND layout.layoutID NOT IN (SELECT DISTINCT layoutId FROM lklayoutdisplaygroup) \n                     ';\n            }\n        }\n\n        // PlaylistID\n        if ($parsedFilter->getInt('playlistId', ['default' => 0]) != 0) {\n            $body .= ' AND layout.layoutId IN (SELECT DISTINCT `region`.layoutId\n                    FROM `lkplaylistplaylist`\n                      INNER JOIN `playlist`\n                      ON `playlist`.playlistId = `lkplaylistplaylist`.parentId\n                      INNER JOIN `region`\n                      ON `region`.regionId = `playlist`.regionId\n                   WHERE `lkplaylistplaylist`.childId = :playlistId )\n            ';\n\n            $params['playlistId'] = $parsedFilter->getInt('playlistId', ['default' => 0]);\n        }\n\n        // publishedDate\n        if ($parsedFilter->getInt('havePublishDate', ['default' => -1]) != -1) {\n            $body .= \" AND `layout`.publishedDate IS NOT NULL \";\n        }\n\n        if ($parsedFilter->getInt('activeDisplayGroupId') !== null) {\n\n            $date = Carbon::now()->format('U');\n\n            // for filter by displayGroup, we need to add some additional filters in WHERE clause to show only relevant Layouts at the time the Layout grid is viewed\n            $body .= ' AND campaign.campaignId = schedule.campaignId \n                       AND ( schedule.fromDt < '. $date . ' OR schedule.fromDt = 0 ) ' . ' AND schedule.toDt > ' . $date;\n        }\n\n        if ($parsedFilter->getInt('folderId') !== null) {\n            $body .= \" AND campaign.folderId = :folderId \";\n            $params['folderId'] = $parsedFilter->getInt('folderId');\n        }\n\n        if ($parsedFilter->getString('orientation') !== null) {\n            if ($parsedFilter->getString('orientation') === 'portrait') {\n                $body .= ' AND layout.width < layout.height ';\n            } else {\n                $body .= ' AND layout.width >= layout.height ';\n            }\n        }\n\n        // Logged in user view permissions\n        $this->viewPermissionSql('Xibo\\Entity\\Campaign', $body, $params, 'campaign.campaignId', 'layout.userId', $filterBy, 'campaign.permissionsFolderId');\n\n        // Sorting?\n        $order = '';\n\n        if (is_array($sortOrder)) {\n            $order .= ' ORDER BY ' . implode(',', $sortOrder);\n        }\n\n        $limit = '';\n        // Paging\n        if ($filterBy !== null && $parsedFilter->getInt('start') !== null && $parsedFilter->getInt('length') !== null) {\n            $limit = ' LIMIT ' . $parsedFilter->getInt('start', ['default' => 0]) . ', ' . $parsedFilter->getInt('length', ['default' => 10]);\n        }\n\n        // The final statements\n        $sql = $select . $body . $order . $limit;\n\n        foreach ($this->getStore()->select($sql, $params) as $row) {\n            $layout = $this->createEmpty();\n\n            $parsedRow = $this->getSanitizer($row);\n\n            // Validate each param and add it to the array.\n            $layout->layoutId = $parsedRow->getInt('layoutID');\n            $layout->parentId = $parsedRow->getInt('parentId');\n            $layout->schemaVersion = $parsedRow->getInt('schemaVersion');\n            $layout->layout = $parsedRow->getString('layout');\n            $layout->description = $parsedRow->getString('description');\n            $layout->duration = $parsedRow->getInt('duration');\n            $layout->tags = $parsedRow->getString('tags');\n            $layout->backgroundColor = $parsedRow->getString('backgroundColor');\n            $layout->owner = $parsedRow->getString('owner');\n            $layout->ownerId = $parsedRow->getInt('userID');\n            $layout->campaignId = $parsedRow->getInt('CampaignID');\n            $layout->retired = $parsedRow->getInt('retired');\n            $layout->status = $parsedRow->getInt('status');\n            $layout->backgroundImageId = $parsedRow->getInt('backgroundImageId');\n            $layout->backgroundzIndex = $parsedRow->getInt('backgroundzIndex');\n            $layout->width = $parsedRow->getDouble('width');\n            $layout->height = $parsedRow->getDouble('height');\n            $layout->orientation = $layout->width >= $layout->height ? 'landscape' : 'portrait';\n            $layout->createdDt = $parsedRow->getDate('createdDt');\n            $layout->modifiedDt = $parsedRow->getDate('modifiedDt');\n            $layout->displayOrder = $parsedRow->getInt('displayOrder');\n            $layout->statusMessage = $parsedRow->getString('statusMessage');\n            $layout->enableStat = $parsedRow->getInt('enableStat');\n            $layout->publishedStatusId = $parsedRow->getInt('publishedStatusId');\n            $layout->publishedStatus = $parsedRow->getString('publishedStatus');\n            $layout->publishedDate = $parsedRow->getString('publishedDate');\n            $layout->autoApplyTransitions = $parsedRow->getInt('autoApplyTransitions');\n            $layout->code = $parsedRow->getString('code');\n            $layout->folderId = $parsedRow->getInt('folderId');\n            $layout->permissionsFolderId = $parsedRow->getInt('permissionsFolderId');\n\n            $layout->groupsWithPermissions = $row['groupsWithPermissions'];\n            $layout->setOriginals();\n\n            $entries[] = $layout;\n        }\n\n        // Paging\n        if ($limit != '' && count($entries) > 0) {\n            unset($params['permissionEntityForGroup']);\n            $results = $this->getStore()->select('SELECT COUNT(*) AS total ' . $body, $params);\n            $this->_countLast = intval($results[0]['total']);\n        }\n\n        return $entries;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Widget $widget\n     * @return \\Xibo\\Entity\\Widget\n     */\n    private function setWidgetExpiryDatesOrDefault($widget)\n    {\n        $minSubYear = Carbon::createFromTimestamp(Widget::$DATE_MIN)->subYear()->format('U');\n        $minAddYear = Carbon::createFromTimestamp(Widget::$DATE_MIN)->addYear()->format('U');\n        $maxSubYear = Carbon::createFromTimestamp(Widget::$DATE_MAX)->subYear()->format('U');\n        $maxAddYear = Carbon::createFromTimestamp(Widget::$DATE_MAX)->addYear()->format('U');\n\n        // if we are importing from layout.json the Widget from/to expiry dates are already timestamps\n        // for old Layouts when the Widget from/to dt are missing we set them to timestamps as well.\n        $timestampFromDt = is_integer($widget->fromDt) ? $widget->fromDt : Carbon::createFromTimeString($widget->fromDt)->format('U');\n        $timestampToDt =  is_integer($widget->toDt) ? $widget->toDt : Carbon::createFromTimeString($widget->toDt)->format('U');\n\n        // convert the date string to a unix timestamp, if the layout xlf does not contain dates, then set it to the $DATE_MIN / $DATE_MAX which are already unix timestamps, don't attempt to convert them\n        // we need to check if provided from and to dates are within $DATE_MIN +- year to avoid issues with CMS Instances in different timezones https://github.com/xibosignage/xibo/issues/1934\n        if ($widget->fromDt === Widget::$DATE_MIN || ($timestampFromDt > $minSubYear && $timestampFromDt < $minAddYear)) {\n            $widget->fromDt = Widget::$DATE_MIN;\n        } else {\n            $widget->fromDt = $timestampFromDt;\n        }\n\n        if ($widget->toDt === Widget::$DATE_MAX || ($timestampToDt > $maxSubYear && $timestampToDt < $maxAddYear)) {\n            $widget->toDt = Widget::$DATE_MAX;\n        } else {\n            $widget->toDt = $timestampToDt;\n        }\n\n        return $widget;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Playlist $newPlaylist\n     * @param Folder $folder\n     * @return \\Xibo\\Entity\\Playlist\n     * @throws DuplicateEntityException\n     * @throws InvalidArgumentException\n     * @throws NotFoundException\n     */\n    private function setOwnerAndSavePlaylist($newPlaylist, Folder $folder)\n    {\n        // try to save with the name from import, if it already exists add \"imported - \"  to the name\n        try {\n            // The new Playlist should be owned by the importing user\n            $newPlaylist->ownerId = $this->getUser()->getId();\n            $newPlaylist->playlistId = null;\n            $newPlaylist->widgets = [];\n            $newPlaylist->folderId = $folder->id;\n            $newPlaylist->permissionsFolderId =\n                ($folder->permissionsFolderId == null) ? $folder->id : $folder->permissionsFolderId;\n            $newPlaylist->save();\n        } catch (DuplicateEntityException $e) {\n            $newPlaylist->name = 'imported - ' . $newPlaylist->name;\n            $newPlaylist->save();\n        }\n\n        return $newPlaylist;\n    }\n\n    /**\n     * Checkout a Layout\n     * @param \\Xibo\\Entity\\Layout $layout\n     * @param bool $returnDraft Should we return the Draft or the pre-checkout Layout\n     * @return \\Xibo\\Entity\\Layout\n     * @throws \\Xibo\\Support\\Exception\\GeneralException\n     * @throws \\Xibo\\Support\\Exception\\InvalidArgumentException\n     * @throws \\Xibo\\Support\\Exception\\NotFoundException\n     */\n    public function checkoutLayout($layout, $returnDraft = true)\n    {\n        // Load the Layout\n        $layout->load();\n\n        // Make a skeleton copy of the Layout\n        $draft = clone $layout;\n        $draft->parentId = $layout->layoutId;\n        $draft->campaignId = $layout->campaignId;\n        $draft->publishedStatusId = 2; // Draft\n        $draft->publishedStatus = __('Draft');\n        $draft->autoApplyTransitions = $layout->autoApplyTransitions;\n        $draft->code = $layout->code;\n        $draft->folderId = $layout->folderId;\n\n        // Do not copy any of the tags, these will belong on the parent and are not editable from the draft.\n        $draft->tags = [];\n\n        // Save without validation or notification.\n        $draft->save([\n            'validate' => false,\n            'notify' => false\n        ]);\n\n        // Update the original\n        $layout->publishedStatusId = 2; // Draft\n        $layout->publishedStatus = __('Draft');\n        $layout->save([\n            'saveLayout' => true,\n            'saveRegions' => false,\n            'saveTags' => false,\n            'setBuildRequired' => false,\n            'validate' => false,\n            'notify' => false\n        ]);\n\n        /** @var Region[] $allRegions */\n        $allRegions = array_merge($draft->regions, $draft->drawers);\n        $draft->copyActions($draft, $layout);\n\n        // Permissions && Sub-Playlists\n        // Layout level permissions are managed on the Campaign entity, so we do not need to worry about that\n        // Regions/Widgets need to copy down our layout permissions\n        foreach ($allRegions as $region) {\n            // Match our original region id to the id in the parent layout\n            $original = $layout->getRegionOrDrawer($region->getOriginalValue('regionId'));\n\n            // Make sure Playlist closure table from the published one are copied over\n            $original->getPlaylist()->cloneClosureTable($region->getPlaylist()->playlistId);\n\n            // Copy over original permissions\n            foreach ($original->permissions as $permission) {\n                $new = clone $permission;\n                $new->objectId = $region->regionId;\n                $new->save();\n            }\n\n            // Playlist\n            foreach ($original->getPlaylist()->permissions as $permission) {\n                $new = clone $permission;\n                $new->objectId = $region->getPlaylist()->playlistId;\n                $new->save();\n            }\n\n            // Widgets\n            foreach ($region->getPlaylist()->widgets as $widget) {\n                $originalWidget = $original->getPlaylist()->getWidget($widget->getOriginalValue('widgetId'));\n                // Copy over original permissions\n                foreach ($originalWidget->permissions as $permission) {\n                    $new = clone $permission;\n                    $new->objectId = $widget->widgetId;\n                    $new->save();\n                }\n            }\n        }\n\n        return $returnDraft ? $draft : $layout;\n    }\n\n    /**\n     * Function called during Layout Import\n     * Check if provided Widget has options to have Library references\n     * if it does, then go through them find and replace old media references\n     *\n     * @param Widget $widget\n     * @param $newMediaId\n     * @param $oldMediaId\n     * @throws NotFoundException\n     */\n    public function handleWidgetMediaIdReferences($widget, $newMediaId, $oldMediaId)\n    {\n        $module = $this->moduleFactory->createWithWidget($widget);\n\n        if ($module->hasHtmlEditor()) {\n            foreach ($module->getHtmlWidgetOptions() as $option) {\n                $widget->setOptionValue($option, 'cdata', str_replace('[' . $oldMediaId . ']', '[' . $newMediaId . ']', $widget->getOptionValue($option, null)));\n            }\n        }\n    }\n\n    /**\n     * @param int $layoutId\n     * @param array $actionLayoutIds\n     * @param array $processedLayoutIds\n     * @return array\n     */\n    public function getActionPublishedLayoutIds(int $layoutId, array &$actionLayoutIds, array &$processedLayoutIds): array\n    {\n        // if Layout was already processed, do not attempt to do it again\n        // we should have all actionLayoutsIds from it at this point, there is no need to process it again\n        if (!in_array($layoutId, $processedLayoutIds)) {\n            // Get Layout Codes set in Actions on this Layout\n            // Actions directly on this Layout\n            $sql = '\n                SELECT DISTINCT `action`.layoutCode\n                  FROM `action`\n                    INNER JOIN `layout`\n                    ON `layout`.layoutId = `action`.sourceId\n                 WHERE `action`.actionType = :actionType\n                    AND `layout`.layoutId = :layoutId\n                    AND `layout`.parentId IS NULL\n            ';\n\n            // Actions on this Layout's Regions\n            $sql .= '\n                UNION\n                SELECT DISTINCT `action`.layoutCode\n                  FROM `action`\n                    INNER JOIN `region`\n                    ON `region`.regionId = `action`.sourceId\n                    INNER JOIN `layout`\n                    ON `layout`.layoutId = `region`.layoutId\n                 WHERE `action`.actionType = :actionType\n                    AND `layout`.layoutId = :layoutId\n                    AND `layout`.parentId IS NULL\n            ';\n\n            // Actions on this Layout's Widgets\n            $sql .= '\n                UNION\n                SELECT DISTINCT `action`.layoutCode\n                  FROM `action`\n                    INNER JOIN `widget`\n                    ON `widget`.widgetId = `action`.sourceId\n                    INNER JOIN `playlist`\n                    ON `playlist`.playlistId = `widget`.playlistId\n                    INNER JOIN `region`\n                    ON `region`.regionId = `playlist`.regionId\n                    INNER JOIN `layout`\n                    ON `layout`.layoutId = `region`.layoutId\n                 WHERE `action`.actionType = :actionType\n                    AND `layout`.layoutId = :layoutId\n                    AND `layout`.parentId IS NULL\n            ';\n\n            // Join them together and get the Layout's referenced by those codes\n            $actionLayoutCodes = $this->getStore()->select('\n                SELECT `layout`.layoutId\n                  FROM `layout`\n                 WHERE `layout`.code IN (\n                     ' . $sql . '\n                 )\n            ', [\n                'actionType' => 'navLayout',\n                'layoutId' => $layoutId,\n            ]);\n\n            $processedLayoutIds[] = $layoutId;\n\n            foreach ($actionLayoutCodes as $row) {\n                // if we have not processed this Layout yet, do it now\n                if (!in_array($row['layoutId'], $actionLayoutIds)) {\n                    $actionLayoutIds[] = $row['layoutId'];\n                    // check if this layout is linked with any further navLayout actions\n                    $this->getActionPublishedLayoutIds($row['layoutId'], $actionLayoutIds, $processedLayoutIds);\n                }\n            }\n        }\n\n        return $actionLayoutIds;\n    }\n\n    // <editor-fold desc=\"Concurrency Locking\">\n\n    /**\n     * @param \\Stash\\Interfaces\\PoolInterface|null $pool\n     * @return $this\n     */\n    public function usePool($pool)\n    {\n        $this->pool = $pool;\n        return $this;\n    }\n\n    /**\n     * @return \\Stash\\Interfaces\\PoolInterface|\\Stash\\Pool\n     */\n    private function getPool()\n    {\n        if ($this->pool === null) {\n            $this->pool = new Pool();\n        }\n        return $this->pool;\n    }\n\n    /**\n     * @param \\Xibo\\Entity\\Layout $layout\n     * @return \\Xibo\\Entity\\Layout\n     */\n    public function decorateLockedProperties(Layout $layout): Layout\n    {\n        $locked = $this->pool->getItem('locks/layout/' . $layout->layoutId);\n        $layout->isLocked = $locked->isMiss() ? [] : $locked->get();\n        if (!empty($layout->isLocked)) {\n            $layout->isLocked->lockedUser = ($layout->isLocked->userId != $this->getUser()->userId);\n        }\n\n        return $layout;\n    }\n\n    /**\n     * Hold a lock on concurrent requests\n     *  blocks if the request is locked\n     * @param int $ttl seconds\n     * @param int $wait seconds\n     * @param int $tries\n     * @throws \\Xibo\\Support\\Exception\\GeneralException\n     */\n    public function concurrentRequestLock(Layout $layout, $force = false, $pass = 1, $ttl = 300, $wait = 6, $tries = 10): Layout\n    {\n        // Does this layout require building?\n        if (!$force && !$layout->isBuildRequired()) {\n            return $layout;\n        }\n\n        $lock = $this->getPool()->getItem('locks/layout_build/' . $layout->campaignId);\n\n        // Set the invalidation method to simply return the value (not that we use it, but it gets us a miss on expiry)\n        // isMiss() returns false if the item is missing or expired, no exceptions.\n        $lock->setInvalidationMethod(Invalidation::NONE);\n\n        // Get the lock\n        // other requests will wait here until we're done, or we've timed out\n        $locked = $lock->get();\n\n        // Did we get a lock?\n        // if we're a miss, then we're not already locked\n        if ($lock->isMiss() || $locked === false) {\n            $this->getLog()->debug('Lock miss or false. Locking for ' . $ttl . ' seconds. $locked is '. var_export($locked, true));\n\n            // so lock now\n            $lock->set(true);\n            $lock->expiresAfter($ttl);\n            $lock->save();\n\n            // If we have been locked previously, then reload our layout before passing back out.\n            if ($pass > 1) {\n                $layout = $this->getById($layout->layoutId);\n            }\n\n            return $layout;\n        } else {\n            // We are a hit - we must be locked\n            $this->getLog()->debug('LOCK hit for ' . $layout->campaignId . ' expires '\n                . $lock->getExpiration()->format('Y-m-d H:i:s') . ', created '\n                . $lock->getCreation()->format('Y-m-d H:i:s'));\n\n            // Try again?\n            $tries--;\n\n            if ($tries <= 0) {\n                // We've waited long enough\n                throw new GeneralException('Concurrent record locked, time out.');\n            } else {\n                $this->getLog()->debug('Unable to get a lock, trying again. Remaining retries: ' . $tries);\n\n                // Hang about waiting for the lock to be released.\n                sleep($wait);\n\n                // Recursive request (we've decremented the number of tries)\n                $pass++;\n                return $this->concurrentRequestLock($layout, $force, $pass, $ttl, $wait, $tries);\n            }\n        }\n    }\n\n    /**\n     * Release a lock on concurrent requests\n     */\n    public function concurrentRequestRelease(Layout $layout, bool $force = false)\n    {\n        if (!$force && !$layout->hasBuilt()) {\n            return;\n        }\n\n        $this->getLog()->debug('Releasing lock ' . $layout->campaignId);\n\n        $lock = $this->getPool()->getItem('locks/layout_build/' . $layout->campaignId);\n\n        // Release lock\n        $lock->set(false);\n        $lock->expiresAfter(10); // Expire straight away (but give it time to save the thing)\n\n        $this->getPool()->save($lock);\n    }\n\n    public function convertOldPlaylistOptions($playlistIds, $playlistOptions)\n    {\n        $convertedPlaylistOption = [];\n        $i = 0;\n        foreach ($playlistIds as $playlistId) {\n            $i++;\n            $convertedPlaylistOption[] = [\n                'rowNo' => $i,\n                'playlistId' => $playlistId,\n                'spotFill' => $playlistOptions[$playlistId]['subPlaylistIdSpotFill'] ?? null,\n                'spotLength' => $playlistOptions[$playlistId]['subPlaylistIdSpotLength'] ?? null,\n                'spots' => $playlistOptions[$playlistId]['subPlaylistIdSpots'] ?? null,\n            ];\n        }\n\n        return $convertedPlaylistOption;\n    }\n\n    // </editor-fold>\n}\n"], "filenames": ["lib/Controller/Base.php", "lib/Entity/DataSet.php", "lib/Factory/BaseFactory.php", "lib/Factory/DisplayFactory.php", "lib/Factory/LayoutFactory.php"], "buggy_code_start_loc": [3, 528, 3, 3, 1019], "buggy_code_end_loc": [349, 548, 391, 362, 1448], "fixing_code_start_loc": [3, 528, 3, 3, 1019], "fixing_code_end_loc": [351, 548, 398, 372, 1456], "type": "CWE-22", "message": "Xibo is a content management system (CMS). A path traversal vulnerability exists in the Xibo CMS whereby a specially crafted zip file can be uploaded to the CMS via the layout import function by an authenticated user which would allow creation of files outside of the CMS library directory as the webserver user. This can be used to upload a PHP webshell inside the web root directory and achieve remote code execution as the webserver user. Users should upgrade to version 2.3.17 or 3.3.5, which fix this issue. Customers who host their CMS with Xibo Signage have already received an upgrade or patch to resolve this issue regardless of the CMS version that they are running.", "other": {"cve": {"id": "CVE-2023-33177", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-30T20:15:10.837", "lastModified": "2023-06-06T01:06:39.687", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Xibo is a content management system (CMS). A path traversal vulnerability exists in the Xibo CMS whereby a specially crafted zip file can be uploaded to the CMS via the layout import function by an authenticated user which would allow creation of files outside of the CMS library directory as the webserver user. This can be used to upload a PHP webshell inside the web root directory and achieve remote code execution as the webserver user. Users should upgrade to version 2.3.17 or 3.3.5, which fix this issue. Customers who host their CMS with Xibo Signage have already received an upgrade or patch to resolve this issue regardless of the CMS version that they are running."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xibosignage:xibo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.8.0", "versionEndExcluding": "2.3.17", "matchCriteriaId": "8C5BA7B5-A641-4549-A091-5FD03BB571B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xibosignage:xibo:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.3.5", "matchCriteriaId": "A9A69FAF-8979-43F9-AA38-10568026EFE4"}]}]}], "references": [{"url": "https://claroty.com/team82/disclosure-dashboard", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/xibosignage/xibo-cms/commit/1cbba380fa751a00756e70d7b08b5c6646092658", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xibosignage/xibo-cms/commit/45c6b53c3978639db03b63270a56f4397f49b2c9", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xibosignage/xibo-cms/security/advisories/GHSA-jj27-x85q-crqv", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://xibosignage.com/blog/security-advisory-2023-05/", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xibosignage/xibo-cms/commit/1cbba380fa751a00756e70d7b08b5c6646092658"}}