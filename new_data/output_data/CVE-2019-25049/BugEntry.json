{"buggy_code": ["/*\n * Public domain\n * pthread.h compatibility shim\n */\n\n#ifndef LIBCRYPTOCOMPAT_PTHREAD_H\n#define LIBCRYPTOCOMPAT_PTHREAD_H\n\n#ifdef _WIN32\n\n#include <windows.h>\n\n/*\n * Static once initialization values.\n */\n#define PTHREAD_ONCE_INIT   { INIT_ONCE_STATIC_INIT }\n\n/*\n * Static mutex initialization values.\n */\n#define PTHREAD_MUTEX_INITIALIZER\t{ 0, 0, 0, 0, 0, 0 }\n\n/*\n * Once definitions.\n */\nstruct pthread_once {\n\tINIT_ONCE once;\n};\ntypedef struct pthread_once pthread_once_t;\n\nstatic inline BOOL CALLBACK\n_pthread_once_win32_cb(PINIT_ONCE once, PVOID param, PVOID *context)\n{\n\tvoid (*cb) (void) = param;\n\tcb();\n\treturn TRUE;\n}\n\nstatic inline int\npthread_once(pthread_once_t *once, void (*cb) (void))\n{\n\tBOOL rc = InitOnceExecuteOnce(&once->once, _pthread_once_win32_cb, cb, NULL);\n\tif (rc == 0)\n\t\treturn -1;\n\telse\n\t\treturn 0;\n}\n\ntypedef DWORD pthread_t;\n\nstatic inline pthread_t\npthread_self(void)\n{\n\treturn GetCurrentThreadId();\n}\n\nstatic inline int\npthread_equal(pthread_t t1, pthread_t t2)\n{\n\treturn t1 == t2;\n}\n\ntypedef CRITICAL_SECTION pthread_mutex_t;\ntypedef void pthread_mutexattr_t;\n\nstatic inline int\npthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr)\n{\n\tInitializeCriticalSection(mutex);\n\treturn 0;\n}\n\nstatic inline int\npthread_mutex_lock(pthread_mutex_t *mutex)\n{\n\tEnterCriticalSection(mutex);\n\treturn 0;\n}\n\nstatic inline int\npthread_mutex_unlock(pthread_mutex_t *mutex)\n{\n\tLeaveCriticalSection(mutex);\n\treturn 0;\n}\n\n#else\n#include_next <pthread.h>\n#endif\n\n#endif\n"], "fixing_code": ["/*\n * Public domain\n * pthread.h compatibility shim\n */\n\n#ifndef LIBCRYPTOCOMPAT_PTHREAD_H\n#define LIBCRYPTOCOMPAT_PTHREAD_H\n\n#ifdef _WIN32\n\n#include <malloc.h>\n#include <stdlib.h>\n#include <windows.h>\n\n/*\n * Static once initialization values.\n */\n#define PTHREAD_ONCE_INIT   { INIT_ONCE_STATIC_INIT }\n\n/*\n * Static mutex initialization values.\n */\n#define PTHREAD_MUTEX_INITIALIZER\t{ .lock = NULL }\n\n/*\n * Once definitions.\n */\nstruct pthread_once {\n\tINIT_ONCE once;\n};\ntypedef struct pthread_once pthread_once_t;\n\nstatic inline BOOL CALLBACK\n_pthread_once_win32_cb(PINIT_ONCE once, PVOID param, PVOID *context)\n{\n\tvoid (*cb) (void) = param;\n\tcb();\n\treturn TRUE;\n}\n\nstatic inline int\npthread_once(pthread_once_t *once, void (*cb) (void))\n{\n\tBOOL rc = InitOnceExecuteOnce(&once->once, _pthread_once_win32_cb, cb, NULL);\n\tif (rc == 0)\n\t\treturn -1;\n\telse\n\t\treturn 0;\n}\n\ntypedef DWORD pthread_t;\n\nstatic inline pthread_t\npthread_self(void)\n{\n\treturn GetCurrentThreadId();\n}\n\nstatic inline int\npthread_equal(pthread_t t1, pthread_t t2)\n{\n\treturn t1 == t2;\n}\n\nstruct pthread_mutex {\n\tvolatile LPCRITICAL_SECTION lock;\n};\ntypedef struct pthread_mutex pthread_mutex_t;\ntypedef void pthread_mutexattr_t;\n\nstatic inline int\npthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr)\n{\n\tif ((mutex->lock = malloc(sizeof(CRITICAL_SECTION))) == NULL)\n\t\texit(ENOMEM);\n\tInitializeCriticalSection(mutex->lock);\n\treturn 0;\n}\n\nstatic inline int\npthread_mutex_lock(pthread_mutex_t *mutex)\n{\n\tif (mutex->lock == NULL) {\n\t\tLPCRITICAL_SECTION lcs;\n\n\t\tif ((lcs = malloc(sizeof(CRITICAL_SECTION))) == NULL)\n\t\t\texit(ENOMEM);\n\t\tInitializeCriticalSection(lcs);\n\t\tif (InterlockedCompareExchangePointer((PVOID*)&mutex->lock, (PVOID)lcs, NULL) != NULL) {\n\t\t\tDeleteCriticalSection(lcs);\n\t\t\tfree(lcs);\n\t\t}\n\t}\n\tEnterCriticalSection(mutex->lock);\n\treturn 0;\n}\n\nstatic inline int\npthread_mutex_unlock(pthread_mutex_t *mutex)\n{\n\tLeaveCriticalSection(mutex->lock);\n\treturn 0;\n}\n\n#else\n#include_next <pthread.h>\n#endif\n\n#endif\n"], "filenames": ["include/compat/pthread.h"], "buggy_code_start_loc": [10], "buggy_code_end_loc": [84], "fixing_code_start_loc": [11], "fixing_code_end_loc": [102], "type": "CWE-125", "message": "LibreSSL 2.9.1 through 3.2.1 has an out-of-bounds read in asn1_item_print_ctx (called from asn1_template_print_ctx).", "other": {"cve": {"id": "CVE-2019-25049", "sourceIdentifier": "cve@mitre.org", "published": "2021-07-01T03:15:07.600", "lastModified": "2021-07-08T17:03:14.050", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LibreSSL 2.9.1 through 3.2.1 has an out-of-bounds read in asn1_item_print_ctx (called from asn1_template_print_ctx)."}, {"lang": "es", "value": "LibreSSL versiones 2.9.1 hasta 3.2.1, presenta una lectura fuera de l\u00edmites en la funci\u00f3n asn1_item_print_ctx (llamada desde asn1_template_print_ctx)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openbsd:libressl:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.9.1", "versionEndIncluding": "3.2.1", "matchCriteriaId": "A290BD5C-999D-46CE-BA41-5BBDEE1907CC"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:linux:linux_kernel:-:*:*:*:*:*:*:*", "matchCriteriaId": "703AF700-7A70-47E2-BC3A-7FD03B3CA9C1"}]}]}], "references": [{"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13920", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/google/oss-fuzz-vulns/blob/main/vulns/libressl/OSV-2020-1965.yaml", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/libressl-portable/portable/commit/17c88164016df821df2dff4b2b1291291ec4f28a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/libressl-portable/portable/commit/17c88164016df821df2dff4b2b1291291ec4f28a"}}