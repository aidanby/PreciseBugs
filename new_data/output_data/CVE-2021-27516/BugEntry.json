{"buggy_code": ["/*!\n * URI.js - Mutating URLs\n *\n * Version: 1.19.5\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);\n  } else {\n    // Browser globals (root is window)\n    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);\n  }\n}(this, function (punycode, IPv6, SLD, root) {\n  'use strict';\n  /*global location, escape, unescape */\n  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase\n  /*jshint camelcase: false */\n\n  // save current URI variable, if any\n  var _URI = root && root.URI;\n\n  function URI(url, base) {\n    var _urlSupplied = arguments.length >= 1;\n    var _baseSupplied = arguments.length >= 2;\n\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof URI)) {\n      if (_urlSupplied) {\n        if (_baseSupplied) {\n          return new URI(url, base);\n        }\n\n        return new URI(url);\n      }\n\n      return new URI();\n    }\n\n    if (url === undefined) {\n      if (_urlSupplied) {\n        throw new TypeError('undefined is not a valid argument for URI');\n      }\n\n      if (typeof location !== 'undefined') {\n        url = location.href + '';\n      } else {\n        url = '';\n      }\n    }\n\n    if (url === null) {\n      if (_urlSupplied) {\n        throw new TypeError('null is not a valid argument for URI');\n      }\n    }\n\n    this.href(url);\n\n    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor\n    if (base !== undefined) {\n      return this.absoluteTo(base);\n    }\n\n    return this;\n  }\n\n  function isInteger(value) {\n    return /^[0-9]+$/.test(value);\n  }\n\n  URI.version = '1.19.5';\n\n  var p = URI.prototype;\n  var hasOwn = Object.prototype.hasOwnProperty;\n\n  function escapeRegEx(string) {\n    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963\n    return string.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n  }\n\n  function getType(value) {\n    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value\n    if (value === undefined) {\n      return 'Undefined';\n    }\n\n    return String(Object.prototype.toString.call(value)).slice(8, -1);\n  }\n\n  function isArray(obj) {\n    return getType(obj) === 'Array';\n  }\n\n  function filterArrayValues(data, value) {\n    var lookup = {};\n    var i, length;\n\n    if (getType(value) === 'RegExp') {\n      lookup = null;\n    } else if (isArray(value)) {\n      for (i = 0, length = value.length; i < length; i++) {\n        lookup[value[i]] = true;\n      }\n    } else {\n      lookup[value] = true;\n    }\n\n    for (i = 0, length = data.length; i < length; i++) {\n      /*jshint laxbreak: true */\n      var _match = lookup && lookup[data[i]] !== undefined\n        || !lookup && value.test(data[i]);\n      /*jshint laxbreak: false */\n      if (_match) {\n        data.splice(i, 1);\n        length--;\n        i--;\n      }\n    }\n\n    return data;\n  }\n\n  function arrayContains(list, value) {\n    var i, length;\n\n    // value may be string, number, array, regexp\n    if (isArray(value)) {\n      // Note: this can be optimized to O(n) (instead of current O(m * n))\n      for (i = 0, length = value.length; i < length; i++) {\n        if (!arrayContains(list, value[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    var _type = getType(value);\n    for (i = 0, length = list.length; i < length; i++) {\n      if (_type === 'RegExp') {\n        if (typeof list[i] === 'string' && list[i].match(value)) {\n          return true;\n        }\n      } else if (list[i] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function arraysEqual(one, two) {\n    if (!isArray(one) || !isArray(two)) {\n      return false;\n    }\n\n    // arrays can't be equal if they have different amount of content\n    if (one.length !== two.length) {\n      return false;\n    }\n\n    one.sort();\n    two.sort();\n\n    for (var i = 0, l = one.length; i < l; i++) {\n      if (one[i] !== two[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function trimSlashes(text) {\n    var trim_expression = /^\\/+|\\/+$/g;\n    return text.replace(trim_expression, '');\n  }\n\n  URI._parts = function() {\n    return {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      urn: null,\n      port: null,\n      path: null,\n      query: null,\n      fragment: null,\n      // state\n      preventInvalidHostname: URI.preventInvalidHostname,\n      duplicateQueryParameters: URI.duplicateQueryParameters,\n      escapeQuerySpace: URI.escapeQuerySpace\n    };\n  };\n  // state: throw on invalid hostname\n  // see https://github.com/medialize/URI.js/pull/345\n  // and https://github.com/medialize/URI.js/issues/354\n  URI.preventInvalidHostname = false;\n  // state: allow duplicate query parameters (a=1&a=1)\n  URI.duplicateQueryParameters = false;\n  // state: replaces + with %20 (space in query strings)\n  URI.escapeQuerySpace = true;\n  // static properties\n  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;\n  URI.idn_expression = /[^a-z0-9\\._-]/i;\n  URI.punycode_expression = /(xn--)/i;\n  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?\n  URI.ip4_expression = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n  // credits to Rich Brown\n  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096\n  // specification: http://www.ietf.org/rfc/rfc4291.txt\n  URI.ip6_expression = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/;\n  // expression used is \"gruber revised\" (@gruber v2) determined to be the\n  // best solution in a regex-golf we did a couple of ages ago at\n  // * http://mathiasbynens.be/demo/url-regex\n  // * http://rodneyrehm.de/t/url-regex.html\n  URI.find_uri_expression = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))/ig;\n  URI.findUri = {\n    // valid \"scheme://\" or \"www.\"\n    start: /\\b(?:([a-z][a-z0-9.+-]*:\\/\\/)|www\\.)/gi,\n    // everything up to the next whitespace\n    end: /[\\s\\r\\n]|$/,\n    // trim trailing punctuation captured by end RegExp\n    trim: /[`!()\\[\\]{};:'\".,<>?\u00ab\u00bb\u201c\u201d\u201e\u2018\u2019]+$/,\n    // balanced parens inclusion (), [], {}, <>\n    parens: /(\\([^\\)]*\\)|\\[[^\\]]*\\]|\\{[^}]*\\}|<[^>]*>)/g,\n  };\n  // http://www.iana.org/assignments/uri-schemes.html\n  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports\n  URI.defaultPorts = {\n    http: '80',\n    https: '443',\n    ftp: '21',\n    gopher: '70',\n    ws: '80',\n    wss: '443'\n  };\n  // list of protocols which always require a hostname\n  URI.hostProtocols = [\n    'http',\n    'https'\n  ];\n\n  // allowed hostname characters according to RFC 3986\n  // ALPHA DIGIT \"-\" \".\" \"_\" \"~\" \"!\" \"$\" \"&\" \"'\" \"(\" \")\" \"*\" \"+\" \",\" \";\" \"=\" %encoded\n  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _\n  URI.invalid_hostname_characters = /[^a-zA-Z0-9\\.\\-:_]/;\n  // map DOM Elements to their URI attribute\n  URI.domAttributes = {\n    'a': 'href',\n    'blockquote': 'cite',\n    'link': 'href',\n    'base': 'href',\n    'script': 'src',\n    'form': 'action',\n    'img': 'src',\n    'area': 'href',\n    'iframe': 'src',\n    'embed': 'src',\n    'source': 'src',\n    'track': 'src',\n    'input': 'src', // but only if type=\"image\"\n    'audio': 'src',\n    'video': 'src'\n  };\n  URI.getDomAttribute = function(node) {\n    if (!node || !node.nodeName) {\n      return undefined;\n    }\n\n    var nodeName = node.nodeName.toLowerCase();\n    // <input> should only expose src for type=\"image\"\n    if (nodeName === 'input' && node.type !== 'image') {\n      return undefined;\n    }\n\n    return URI.domAttributes[nodeName];\n  };\n\n  function escapeForDumbFirefox36(value) {\n    // https://github.com/medialize/URI.js/issues/91\n    return escape(value);\n  }\n\n  // encoding / decoding according to RFC3986\n  function strictEncodeURIComponent(string) {\n    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent\n    return encodeURIComponent(string)\n      .replace(/[!'()*]/g, escapeForDumbFirefox36)\n      .replace(/\\*/g, '%2A');\n  }\n  URI.encode = strictEncodeURIComponent;\n  URI.decode = decodeURIComponent;\n  URI.iso8859 = function() {\n    URI.encode = escape;\n    URI.decode = unescape;\n  };\n  URI.unicode = function() {\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = decodeURIComponent;\n  };\n  URI.characters = {\n    pathname: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,\n        map: {\n          // -._~!'()*\n          '%24': '$',\n          '%26': '&',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%3A': ':',\n          '%40': '@'\n        }\n      },\n      decode: {\n        expression: /[\\/\\?#]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23'\n        }\n      }\n    },\n    reserved: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,\n        map: {\n          // gen-delims\n          '%3A': ':',\n          '%2F': '/',\n          '%3F': '?',\n          '%23': '#',\n          '%5B': '[',\n          '%5D': ']',\n          '%40': '@',\n          // sub-delims\n          '%21': '!',\n          '%24': '$',\n          '%26': '&',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '='\n        }\n      }\n    },\n    urnpath: {\n      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable\n      // for usage in a URN. RFC2141 also calls out \"-\", \".\", and \"_\" as acceptable characters, but\n      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also\n      // note that the colon character is not featured in the encoding map; this is because URI.js\n      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it\n      // should not appear unencoded in a segment itself.\n      // See also the note above about RFC3986 and capitalalized hex digits.\n      encode: {\n        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,\n        map: {\n          '%21': '!',\n          '%24': '$',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%40': '@'\n        }\n      },\n      // These characters are the characters called out by RFC2141 as \"reserved\" characters that\n      // should never appear in a URN, plus the colon character (see note above).\n      decode: {\n        expression: /[\\/\\?#:]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23',\n          ':': '%3A'\n        }\n      }\n    }\n  };\n  URI.encodeQuery = function(string, escapeQuerySpace) {\n    var escaped = URI.encode(string + '');\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;\n  };\n  URI.decodeQuery = function(string, escapeQuerySpace) {\n    string += '';\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    try {\n      return URI.decode(escapeQuerySpace ? string.replace(/\\+/g, '%20') : string);\n    } catch(e) {\n      // we're not going to mess with weird encodings,\n      // give up and return the undecoded original string\n      // see https://github.com/medialize/URI.js/issues/87\n      // see https://github.com/medialize/URI.js/issues/92\n      return string;\n    }\n  };\n  // generate encode/decode path functions\n  var _parts = {'encode':'encode', 'decode':'decode'};\n  var _part;\n  var generateAccessor = function(_group, _part) {\n    return function(string) {\n      try {\n        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {\n          return URI.characters[_group][_part].map[c];\n        });\n      } catch (e) {\n        // we're not going to mess with weird encodings,\n        // give up and return the undecoded original string\n        // see https://github.com/medialize/URI.js/issues/87\n        // see https://github.com/medialize/URI.js/issues/92\n        return string;\n      }\n    };\n  };\n\n  for (_part in _parts) {\n    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);\n    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);\n  }\n\n  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {\n    return function(string) {\n      // Why pass in names of functions, rather than the function objects themselves? The\n      // definitions of some functions (but in particular, URI.decode) will occasionally change due\n      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure\n      // that the functions we use here are \"fresh\".\n      var actualCodingFunc;\n      if (!_innerCodingFuncName) {\n        actualCodingFunc = URI[_codingFuncName];\n      } else {\n        actualCodingFunc = function(string) {\n          return URI[_codingFuncName](URI[_innerCodingFuncName](string));\n        };\n      }\n\n      var segments = (string + '').split(_sep);\n\n      for (var i = 0, length = segments.length; i < length; i++) {\n        segments[i] = actualCodingFunc(segments[i]);\n      }\n\n      return segments.join(_sep);\n    };\n  };\n\n  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.\n  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');\n  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');\n  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');\n  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');\n\n  URI.encodeReserved = generateAccessor('reserved', 'encode');\n\n  URI.parse = function(string, parts) {\n    var pos;\n    if (!parts) {\n      parts = {\n        preventInvalidHostname: URI.preventInvalidHostname\n      };\n    }\n    // [protocol\"://\"[username[\":\"password]\"@\"]hostname[\":\"port]\"/\"?][path][\"?\"querystring][\"#\"fragment]\n\n    // extract fragment\n    pos = string.indexOf('#');\n    if (pos > -1) {\n      // escaping?\n      parts.fragment = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract query\n    pos = string.indexOf('?');\n    if (pos > -1) {\n      // escaping?\n      parts.query = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract protocol\n    if (string.substring(0, 2) === '//') {\n      // relative-scheme\n      parts.protocol = null;\n      string = string.substring(2);\n      // extract \"user:pass@host:port\"\n      string = URI.parseAuthority(string, parts);\n    } else {\n      pos = string.indexOf(':');\n      if (pos > -1) {\n        parts.protocol = string.substring(0, pos) || null;\n        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {\n          // : may be within the path\n          parts.protocol = undefined;\n        } else if (string.substring(pos + 1, pos + 3) === '//') {\n          string = string.substring(pos + 3);\n\n          // extract \"user:pass@host:port\"\n          string = URI.parseAuthority(string, parts);\n        } else {\n          string = string.substring(pos + 1);\n          parts.urn = true;\n        }\n      }\n    }\n\n    // what's left must be the path\n    parts.path = string;\n\n    // and we're done\n    return parts;\n  };\n  URI.parseHost = function(string, parts) {\n    if (!string) {\n      string = '';\n    }\n\n    // Copy chrome, IE, opera backslash-handling behavior.\n    // Back slashes before the query string get converted to forward slashes\n    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\n    // https://github.com/medialize/URI.js/pull/233\n    string = string.replace(/\\\\/g, '/');\n\n    // extract host:port\n    var pos = string.indexOf('/');\n    var bracketPos;\n    var t;\n\n    if (pos === -1) {\n      pos = string.length;\n    }\n\n    if (string.charAt(0) === '[') {\n      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6\n      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts\n      // IPv6+port in the format [2001:db8::1]:80 (for the time being)\n      bracketPos = string.indexOf(']');\n      parts.hostname = string.substring(1, bracketPos) || null;\n      parts.port = string.substring(bracketPos + 2, pos) || null;\n      if (parts.port === '/') {\n        parts.port = null;\n      }\n    } else {\n      var firstColon = string.indexOf(':');\n      var firstSlash = string.indexOf('/');\n      var nextColon = string.indexOf(':', firstColon + 1);\n      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {\n        // IPv6 host contains multiple colons - but no port\n        // this notation is actually not allowed by RFC 3986, but we're a liberal parser\n        parts.hostname = string.substring(0, pos) || null;\n        parts.port = null;\n      } else {\n        t = string.substring(0, pos).split(':');\n        parts.hostname = t[0] || null;\n        parts.port = t[1] || null;\n      }\n    }\n\n    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {\n      pos++;\n      string = '/' + string;\n    }\n\n    if (parts.preventInvalidHostname) {\n      URI.ensureValidHostname(parts.hostname, parts.protocol);\n    }\n\n    if (parts.port) {\n      URI.ensureValidPort(parts.port);\n    }\n\n    return string.substring(pos) || '/';\n  };\n  URI.parseAuthority = function(string, parts) {\n    string = URI.parseUserinfo(string, parts);\n    return URI.parseHost(string, parts);\n  };\n  URI.parseUserinfo = function(string, parts) {\n    // extract username:password\n    var _string = string\n    var firstBackSlash = string.indexOf('\\\\');\n    if (firstBackSlash !== -1) {\n      string = string.replace(/\\\\/g, '/')\n    }\n    var firstSlash = string.indexOf('/');\n    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);\n    var t;\n\n    // authority@ must come before /path or \\path\n    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {\n      t = string.substring(0, pos).split(':');\n      parts.username = t[0] ? URI.decode(t[0]) : null;\n      t.shift();\n      parts.password = t[0] ? URI.decode(t.join(':')) : null;\n      string = _string.substring(pos + 1);\n    } else {\n      parts.username = null;\n      parts.password = null;\n    }\n\n    return string;\n  };\n  URI.parseQuery = function(string, escapeQuerySpace) {\n    if (!string) {\n      return {};\n    }\n\n    // throw out the funky business - \"?\"[name\"=\"value\"&\"]+\n    string = string.replace(/&+/g, '&').replace(/^\\?*&*|&+$/g, '');\n\n    if (!string) {\n      return {};\n    }\n\n    var items = {};\n    var splits = string.split('&');\n    var length = splits.length;\n    var v, name, value;\n\n    for (var i = 0; i < length; i++) {\n      v = splits[i].split('=');\n      name = URI.decodeQuery(v.shift(), escapeQuerySpace);\n      // no \"=\" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters\n      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;\n\n      if (hasOwn.call(items, name)) {\n        if (typeof items[name] === 'string' || items[name] === null) {\n          items[name] = [items[name]];\n        }\n\n        items[name].push(value);\n      } else {\n        items[name] = value;\n      }\n    }\n\n    return items;\n  };\n\n  URI.build = function(parts) {\n    var t = '';\n    var requireAbsolutePath = false\n\n    if (parts.protocol) {\n      t += parts.protocol + ':';\n    }\n\n    if (!parts.urn && (t || parts.hostname)) {\n      t += '//';\n      requireAbsolutePath = true\n    }\n\n    t += (URI.buildAuthority(parts) || '');\n\n    if (typeof parts.path === 'string') {\n      if (parts.path.charAt(0) !== '/' && requireAbsolutePath) {\n        t += '/';\n      }\n\n      t += parts.path;\n    }\n\n    if (typeof parts.query === 'string' && parts.query) {\n      t += '?' + parts.query;\n    }\n\n    if (typeof parts.fragment === 'string' && parts.fragment) {\n      t += '#' + parts.fragment;\n    }\n    return t;\n  };\n  URI.buildHost = function(parts) {\n    var t = '';\n\n    if (!parts.hostname) {\n      return '';\n    } else if (URI.ip6_expression.test(parts.hostname)) {\n      t += '[' + parts.hostname + ']';\n    } else {\n      t += parts.hostname;\n    }\n\n    if (parts.port) {\n      t += ':' + parts.port;\n    }\n\n    return t;\n  };\n  URI.buildAuthority = function(parts) {\n    return URI.buildUserinfo(parts) + URI.buildHost(parts);\n  };\n  URI.buildUserinfo = function(parts) {\n    var t = '';\n\n    if (parts.username) {\n      t += URI.encode(parts.username);\n    }\n\n    if (parts.password) {\n      t += ':' + URI.encode(parts.password);\n    }\n\n    if (t) {\n      t += '@';\n    }\n\n    return t;\n  };\n  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {\n    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html\n    // being \u00bb-._~!$&'()*+,;=:@/?\u00ab %HEX and alnum are allowed\n    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!\n    // URI.js treats the query string as being application/x-www-form-urlencoded\n    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type\n\n    var t = '';\n    var unique, key, i, length;\n    for (key in data) {\n      if (hasOwn.call(data, key)) {\n        if (isArray(data[key])) {\n          unique = {};\n          for (i = 0, length = data[key].length; i < length; i++) {\n            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {\n              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);\n              if (duplicateQueryParameters !== true) {\n                unique[data[key][i] + ''] = true;\n              }\n            }\n          }\n        } else if (data[key] !== undefined) {\n          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);\n        }\n      }\n    }\n\n    return t.substring(1);\n  };\n  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {\n    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded\n    // don't append \"=\" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization\n    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');\n  };\n\n  URI.addQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.addQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (data[name] === undefined) {\n        data[name] = value;\n        return;\n      } else if (typeof data[name] === 'string') {\n        data[name] = [data[name]];\n      }\n\n      if (!isArray(value)) {\n        value = [value];\n      }\n\n      data[name] = (data[name] || []).concat(value);\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.setQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.setQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      data[name] = value === undefined ? null : value;\n    } else {\n      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.removeQuery = function(data, name, value) {\n    var i, length, key;\n\n    if (isArray(name)) {\n      for (i = 0, length = name.length; i < length; i++) {\n        data[name[i]] = undefined;\n      }\n    } else if (getType(name) === 'RegExp') {\n      for (key in data) {\n        if (name.test(key)) {\n          data[key] = undefined;\n        }\n      }\n    } else if (typeof name === 'object') {\n      for (key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.removeQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (value !== undefined) {\n        if (getType(value) === 'RegExp') {\n          if (!isArray(data[name]) && value.test(data[name])) {\n            data[name] = undefined;\n          } else {\n            data[name] = filterArrayValues(data[name], value);\n          }\n        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {\n          data[name] = undefined;\n        } else if (isArray(data[name])) {\n          data[name] = filterArrayValues(data[name], value);\n        }\n      } else {\n        data[name] = undefined;\n      }\n    } else {\n      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');\n    }\n  };\n  URI.hasQuery = function(data, name, value, withinArray) {\n    switch (getType(name)) {\n      case 'String':\n        // Nothing to do here\n        break;\n\n      case 'RegExp':\n        for (var key in data) {\n          if (hasOwn.call(data, key)) {\n            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n\n      case 'Object':\n        for (var _key in name) {\n          if (hasOwn.call(name, _key)) {\n            if (!URI.hasQuery(data, _key, name[_key])) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');\n    }\n\n    switch (getType(value)) {\n      case 'Undefined':\n        // true if exists (but may be empty)\n        return name in data; // data[name] !== undefined;\n\n      case 'Boolean':\n        // true if exists and non-empty\n        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);\n        return value === _booly;\n\n      case 'Function':\n        // allow complex comparison\n        return !!value(data[name], name, data);\n\n      case 'Array':\n        if (!isArray(data[name])) {\n          return false;\n        }\n\n        var op = withinArray ? arrayContains : arraysEqual;\n        return op(data[name], value);\n\n      case 'RegExp':\n        if (!isArray(data[name])) {\n          return Boolean(data[name] && data[name].match(value));\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      case 'Number':\n        value = String(value);\n        /* falls through */\n      case 'String':\n        if (!isArray(data[name])) {\n          return data[name] === value;\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');\n    }\n  };\n\n\n  URI.joinPaths = function() {\n    var input = [];\n    var segments = [];\n    var nonEmptySegments = 0;\n\n    for (var i = 0; i < arguments.length; i++) {\n      var url = new URI(arguments[i]);\n      input.push(url);\n      var _segments = url.segment();\n      for (var s = 0; s < _segments.length; s++) {\n        if (typeof _segments[s] === 'string') {\n          segments.push(_segments[s]);\n        }\n\n        if (_segments[s]) {\n          nonEmptySegments++;\n        }\n      }\n    }\n\n    if (!segments.length || !nonEmptySegments) {\n      return new URI('');\n    }\n\n    var uri = new URI('').segment(segments);\n\n    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {\n      uri.path('/' + uri.path());\n    }\n\n    return uri.normalize();\n  };\n\n  URI.commonPath = function(one, two) {\n    var length = Math.min(one.length, two.length);\n    var pos;\n\n    // find first non-matching character\n    for (pos = 0; pos < length; pos++) {\n      if (one.charAt(pos) !== two.charAt(pos)) {\n        pos--;\n        break;\n      }\n    }\n\n    if (pos < 1) {\n      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';\n    }\n\n    // revert to last /\n    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {\n      pos = one.substring(0, pos).lastIndexOf('/');\n    }\n\n    return one.substring(0, pos + 1);\n  };\n\n  URI.withinString = function(string, callback, options) {\n    options || (options = {});\n    var _start = options.start || URI.findUri.start;\n    var _end = options.end || URI.findUri.end;\n    var _trim = options.trim || URI.findUri.trim;\n    var _parens = options.parens || URI.findUri.parens;\n    var _attributeOpen = /[a-z0-9-]=[\"']?$/i;\n\n    _start.lastIndex = 0;\n    while (true) {\n      var match = _start.exec(string);\n      if (!match) {\n        break;\n      }\n\n      var start = match.index;\n      if (options.ignoreHtml) {\n        // attribut(e=[\"']?$)\n        var attributeOpen = string.slice(Math.max(start - 3, 0), start);\n        if (attributeOpen && _attributeOpen.test(attributeOpen)) {\n          continue;\n        }\n      }\n\n      var end = start + string.slice(start).search(_end);\n      var slice = string.slice(start, end);\n      // make sure we include well balanced parens\n      var parensEnd = -1;\n      while (true) {\n        var parensMatch = _parens.exec(slice);\n        if (!parensMatch) {\n          break;\n        }\n\n        var parensMatchEnd = parensMatch.index + parensMatch[0].length;\n        parensEnd = Math.max(parensEnd, parensMatchEnd);\n      }\n\n      if (parensEnd > -1) {\n        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');\n      } else {\n        slice = slice.replace(_trim, '');\n      }\n\n      if (slice.length <= match[0].length) {\n        // the extract only contains the starting marker of a URI,\n        // e.g. \"www\" or \"http://\"\n        continue;\n      }\n\n      if (options.ignore && options.ignore.test(slice)) {\n        continue;\n      }\n\n      end = start + slice.length;\n      var result = callback(slice, start, end, string);\n      if (result === undefined) {\n        _start.lastIndex = end;\n        continue;\n      }\n\n      result = String(result);\n      string = string.slice(0, start) + result + string.slice(end);\n      _start.lastIndex = start + result.length;\n    }\n\n    _start.lastIndex = 0;\n    return string;\n  };\n\n  URI.ensureValidHostname = function(v, protocol) {\n    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)\n    // they are not part of DNS and therefore ignored by URI.js\n\n    var hasHostname = !!v; // not null and not an empty string\n    var hasProtocol = !!protocol;\n    var rejectEmptyHostname = false;\n\n    if (hasProtocol) {\n      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);\n    }\n\n    if (rejectEmptyHostname && !hasHostname) {\n      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);\n    } else if (v && v.match(URI.invalid_hostname_characters)) {\n      // test punycode\n      if (!punycode) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');\n      }\n      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_]');\n      }\n    }\n  };\n\n  URI.ensureValidPort = function (v) {\n    if (!v) {\n      return;\n    }\n\n    var port = Number(v);\n    if (isInteger(port) && (port > 0) && (port < 65536)) {\n      return;\n    }\n\n    throw new TypeError('Port \"' + v + '\" is not a valid port');\n  };\n\n  // noConflict\n  URI.noConflict = function(removeAll) {\n    if (removeAll) {\n      var unconflicted = {\n        URI: this.noConflict()\n      };\n\n      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {\n        unconflicted.URITemplate = root.URITemplate.noConflict();\n      }\n\n      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {\n        unconflicted.IPv6 = root.IPv6.noConflict();\n      }\n\n      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {\n        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();\n      }\n\n      return unconflicted;\n    } else if (root.URI === this) {\n      root.URI = _URI;\n    }\n\n    return this;\n  };\n\n  p.build = function(deferBuild) {\n    if (deferBuild === true) {\n      this._deferred_build = true;\n    } else if (deferBuild === undefined || this._deferred_build) {\n      this._string = URI.build(this._parts);\n      this._deferred_build = false;\n    }\n\n    return this;\n  };\n\n  p.clone = function() {\n    return new URI(this);\n  };\n\n  p.valueOf = p.toString = function() {\n    return this.build(false)._string;\n  };\n\n\n  function generateSimpleAccessor(_part){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        this._parts[_part] = v || null;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  function generatePrefixAccessor(_part, _key){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        if (v !== null) {\n          v = v + '';\n          if (v.charAt(0) === _key) {\n            v = v.substring(1);\n          }\n        }\n\n        this._parts[_part] = v;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  p.protocol = generateSimpleAccessor('protocol');\n  p.username = generateSimpleAccessor('username');\n  p.password = generateSimpleAccessor('password');\n  p.hostname = generateSimpleAccessor('hostname');\n  p.port = generateSimpleAccessor('port');\n  p.query = generatePrefixAccessor('query', '?');\n  p.fragment = generatePrefixAccessor('fragment', '#');\n\n  p.search = function(v, build) {\n    var t = this.query(v, build);\n    return typeof t === 'string' && t.length ? ('?' + t) : t;\n  };\n  p.hash = function(v, build) {\n    var t = this.fragment(v, build);\n    return typeof t === 'string' && t.length ? ('#' + t) : t;\n  };\n\n  p.pathname = function(v, build) {\n    if (v === undefined || v === true) {\n      var res = this._parts.path || (this._parts.hostname ? '/' : '');\n      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;\n    } else {\n      if (this._parts.urn) {\n        this._parts.path = v ? URI.recodeUrnPath(v) : '';\n      } else {\n        this._parts.path = v ? URI.recodePath(v) : '/';\n      }\n      this.build(!build);\n      return this;\n    }\n  };\n  p.path = p.pathname;\n  p.href = function(href, build) {\n    var key;\n\n    if (href === undefined) {\n      return this.toString();\n    }\n\n    this._string = '';\n    this._parts = URI._parts();\n\n    var _URI = href instanceof URI;\n    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);\n    if (href.nodeName) {\n      var attribute = URI.getDomAttribute(href);\n      href = href[attribute] || '';\n      _object = false;\n    }\n\n    // window.location is reported to be an object, but it's not the sort\n    // of object we're looking for:\n    // * location.protocol ends with a colon\n    // * location.query != object.search\n    // * location.hash != object.fragment\n    // simply serializing the unknown object should do the trick\n    // (for location, not for everything...)\n    if (!_URI && _object && href.pathname !== undefined) {\n      href = href.toString();\n    }\n\n    if (typeof href === 'string' || href instanceof String) {\n      this._parts = URI.parse(String(href), this._parts);\n    } else if (_URI || _object) {\n      var src = _URI ? href._parts : href;\n      for (key in src) {\n        if (key === 'query') { continue; }\n        if (hasOwn.call(this._parts, key)) {\n          this._parts[key] = src[key];\n        }\n      }\n      if (src.query) {\n        this.query(src.query, false);\n      }\n    } else {\n      throw new TypeError('invalid input');\n    }\n\n    this.build(!build);\n    return this;\n  };\n\n  // identification accessors\n  p.is = function(what) {\n    var ip = false;\n    var ip4 = false;\n    var ip6 = false;\n    var name = false;\n    var sld = false;\n    var idn = false;\n    var punycode = false;\n    var relative = !this._parts.urn;\n\n    if (this._parts.hostname) {\n      relative = false;\n      ip4 = URI.ip4_expression.test(this._parts.hostname);\n      ip6 = URI.ip6_expression.test(this._parts.hostname);\n      ip = ip4 || ip6;\n      name = !ip;\n      sld = name && SLD && SLD.has(this._parts.hostname);\n      idn = name && URI.idn_expression.test(this._parts.hostname);\n      punycode = name && URI.punycode_expression.test(this._parts.hostname);\n    }\n\n    switch (what.toLowerCase()) {\n      case 'relative':\n        return relative;\n\n      case 'absolute':\n        return !relative;\n\n      // hostname identification\n      case 'domain':\n      case 'name':\n        return name;\n\n      case 'sld':\n        return sld;\n\n      case 'ip':\n        return ip;\n\n      case 'ip4':\n      case 'ipv4':\n      case 'inet4':\n        return ip4;\n\n      case 'ip6':\n      case 'ipv6':\n      case 'inet6':\n        return ip6;\n\n      case 'idn':\n        return idn;\n\n      case 'url':\n        return !this._parts.urn;\n\n      case 'urn':\n        return !!this._parts.urn;\n\n      case 'punycode':\n        return punycode;\n    }\n\n    return null;\n  };\n\n  // component specific input validation\n  var _protocol = p.protocol;\n  var _port = p.port;\n  var _hostname = p.hostname;\n\n  p.protocol = function(v, build) {\n    if (v) {\n      // accept trailing ://\n      v = v.replace(/:(\\/\\/)?$/, '');\n\n      if (!v.match(URI.protocol_expression)) {\n        throw new TypeError('Protocol \"' + v + '\" contains characters other than [A-Z0-9.+-] or doesn\\'t start with [A-Z]');\n      }\n    }\n\n    return _protocol.call(this, v, build);\n  };\n  p.scheme = p.protocol;\n  p.port = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      if (v === 0) {\n        v = null;\n      }\n\n      if (v) {\n        v += '';\n        if (v.charAt(0) === ':') {\n          v = v.substring(1);\n        }\n\n        URI.ensureValidPort(v);\n      }\n    }\n    return _port.call(this, v, build);\n  };\n  p.hostname = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      var x = { preventInvalidHostname: this._parts.preventInvalidHostname };\n      var res = URI.parseHost(v, x);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      v = x.hostname;\n      if (this._parts.preventInvalidHostname) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n    }\n\n    return _hostname.call(this, v, build);\n  };\n\n  // compound accessors\n  p.origin = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var protocol = this.protocol();\n      var authority = this.authority();\n      if (!authority) {\n        return '';\n      }\n\n      return (protocol ? protocol + '://' : '') + this.authority();\n    } else {\n      var origin = URI(v);\n      this\n        .protocol(origin.protocol())\n        .authority(origin.authority())\n        .build(!build);\n      return this;\n    }\n  };\n  p.host = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildHost(this._parts) : '';\n    } else {\n      var res = URI.parseHost(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.authority = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';\n    } else {\n      var res = URI.parseAuthority(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.userinfo = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var t = URI.buildUserinfo(this._parts);\n      return t ? t.substring(0, t.length -1) : t;\n    } else {\n      if (v[v.length-1] !== '@') {\n        v += '@';\n      }\n\n      URI.parseUserinfo(v, this._parts);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.resource = function(v, build) {\n    var parts;\n\n    if (v === undefined) {\n      return this.path() + this.search() + this.hash();\n    }\n\n    parts = URI.parse(v);\n    this._parts.path = parts.path;\n    this._parts.query = parts.query;\n    this._parts.fragment = parts.fragment;\n    this.build(!build);\n    return this;\n  };\n\n  // fraction accessors\n  p.subdomain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    // convenience, return \"www\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // grab domain and add another segment\n      var end = this._parts.hostname.length - this.domain().length - 1;\n      return this._parts.hostname.substring(0, end) || '';\n    } else {\n      var e = this._parts.hostname.length - this.domain().length;\n      var sub = this._parts.hostname.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(sub));\n\n      if (v && v.charAt(v.length - 1) !== '.') {\n        v += '.';\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      if (v) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n\n      this._parts.hostname = this._parts.hostname.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.domain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // convenience, return \"example.org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // if hostname consists of 1 or 2 segments, it must be the domain\n      var t = this._parts.hostname.match(/\\./g);\n      if (t && t.length < 2) {\n        return this._parts.hostname;\n      }\n\n      // grab tld and add another segment\n      var end = this._parts.hostname.length - this.tld(build).length - 1;\n      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;\n      return this._parts.hostname.substring(end) || '';\n    } else {\n      if (!v) {\n        throw new TypeError('cannot set domain empty');\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      URI.ensureValidHostname(v, this._parts.protocol);\n\n      if (!this._parts.hostname || this.is('IP')) {\n        this._parts.hostname = v;\n      } else {\n        var replace = new RegExp(escapeRegEx(this.domain()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.tld = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // return \"org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      var pos = this._parts.hostname.lastIndexOf('.');\n      var tld = this._parts.hostname.substring(pos + 1);\n\n      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {\n        return SLD.get(this._parts.hostname) || tld;\n      }\n\n      return tld;\n    } else {\n      var replace;\n\n      if (!v) {\n        throw new TypeError('cannot set TLD empty');\n      } else if (v.match(/[^a-zA-Z0-9-]/)) {\n        if (SLD && SLD.is(v)) {\n          replace = new RegExp(escapeRegEx(this.tld()) + '$');\n          this._parts.hostname = this._parts.hostname.replace(replace, v);\n        } else {\n          throw new TypeError('TLD \"' + v + '\" contains characters other than [A-Z0-9]');\n        }\n      } else if (!this._parts.hostname || this.is('IP')) {\n        throw new ReferenceError('cannot set TLD on non-domain host');\n      } else {\n        replace = new RegExp(escapeRegEx(this.tld()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.directory = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path && !this._parts.hostname) {\n        return '';\n      }\n\n      if (this._parts.path === '/') {\n        return '/';\n      }\n\n      var end = this._parts.path.length - this.filename().length - 1;\n      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');\n\n      return v ? URI.decodePath(res) : res;\n\n    } else {\n      var e = this._parts.path.length - this.filename().length;\n      var directory = this._parts.path.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(directory));\n\n      // fully qualifier directories begin with a slash\n      if (!this.is('relative')) {\n        if (!v) {\n          v = '/';\n        }\n\n        if (v.charAt(0) !== '/') {\n          v = '/' + v;\n        }\n      }\n\n      // directories always end with a slash\n      if (v && v.charAt(v.length - 1) !== '/') {\n        v += '/';\n      }\n\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.filename = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v !== 'string') {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var pos = this._parts.path.lastIndexOf('/');\n      var res = this._parts.path.substring(pos+1);\n\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      var mutatedDirectory = false;\n\n      if (v.charAt(0) === '/') {\n        v = v.substring(1);\n      }\n\n      if (v.match(/\\.?\\//)) {\n        mutatedDirectory = true;\n      }\n\n      var replace = new RegExp(escapeRegEx(this.filename()) + '$');\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n\n      if (mutatedDirectory) {\n        this.normalizePath(build);\n      } else {\n        this.build(!build);\n      }\n\n      return this;\n    }\n  };\n  p.suffix = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var filename = this.filename();\n      var pos = filename.lastIndexOf('.');\n      var s, res;\n\n      if (pos === -1) {\n        return '';\n      }\n\n      // suffix may only contain alnum characters (yup, I made this up.)\n      s = filename.substring(pos+1);\n      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      if (v.charAt(0) === '.') {\n        v = v.substring(1);\n      }\n\n      var suffix = this.suffix();\n      var replace;\n\n      if (!suffix) {\n        if (!v) {\n          return this;\n        }\n\n        this._parts.path += '.' + URI.recodePath(v);\n      } else if (!v) {\n        replace = new RegExp(escapeRegEx('.' + suffix) + '$');\n      } else {\n        replace = new RegExp(escapeRegEx(suffix) + '$');\n      }\n\n      if (replace) {\n        v = URI.recodePath(v);\n        this._parts.path = this._parts.path.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.segment = function(segment, v, build) {\n    var separator = this._parts.urn ? ':' : '/';\n    var path = this.path();\n    var absolute = path.substring(0, 1) === '/';\n    var segments = path.split(separator);\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      throw new Error('Bad segment \"' + segment + '\", must be 0-based integer');\n    }\n\n    if (absolute) {\n      segments.shift();\n    }\n\n    if (segment < 0) {\n      // allow negative indexes to address from the end\n      segment = Math.max(segments.length + segment, 0);\n    }\n\n    if (v === undefined) {\n      /*jshint laxbreak: true */\n      return segment === undefined\n        ? segments\n        : segments[segment];\n      /*jshint laxbreak: false */\n    } else if (segment === null || segments[segment] === undefined) {\n      if (isArray(v)) {\n        segments = [];\n        // collapse empty elements within array\n        for (var i=0, l=v.length; i < l; i++) {\n          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {\n            continue;\n          }\n\n          if (segments.length && !segments[segments.length -1].length) {\n            segments.pop();\n          }\n\n          segments.push(trimSlashes(v[i]));\n        }\n      } else if (v || typeof v === 'string') {\n        v = trimSlashes(v);\n        if (segments[segments.length -1] === '') {\n          // empty trailing elements have to be overwritten\n          // to prevent results such as /foo//bar\n          segments[segments.length -1] = v;\n        } else {\n          segments.push(v);\n        }\n      }\n    } else {\n      if (v) {\n        segments[segment] = trimSlashes(v);\n      } else {\n        segments.splice(segment, 1);\n      }\n    }\n\n    if (absolute) {\n      segments.unshift('');\n    }\n\n    return this.path(segments.join(separator), build);\n  };\n  p.segmentCoded = function(segment, v, build) {\n    var segments, i, l;\n\n    if (typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (v === undefined) {\n      segments = this.segment(segment, v, build);\n      if (!isArray(segments)) {\n        segments = segments !== undefined ? URI.decode(segments) : undefined;\n      } else {\n        for (i = 0, l = segments.length; i < l; i++) {\n          segments[i] = URI.decode(segments[i]);\n        }\n      }\n\n      return segments;\n    }\n\n    if (!isArray(v)) {\n      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;\n    } else {\n      for (i = 0, l = v.length; i < l; i++) {\n        v[i] = URI.encode(v[i]);\n      }\n    }\n\n    return this.segment(segment, v, build);\n  };\n\n  // mutating query string\n  var q = p.query;\n  p.query = function(v, build) {\n    if (v === true) {\n      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    } else if (typeof v === 'function') {\n      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n      var result = v.call(this, data);\n      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else if (v !== undefined && typeof v !== 'string') {\n      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else {\n      return q.call(this, v, build);\n    }\n  };\n  p.setQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n\n    if (typeof name === 'string' || name instanceof String) {\n      data[name] = value !== undefined ? value : null;\n    } else if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          data[key] = name[key];\n        }\n      }\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.addQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.addQuery(data, name, value === undefined ? null : value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.removeQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.removeQuery(data, name, value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.hasQuery = function(name, value, withinArray) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    return URI.hasQuery(data, name, value, withinArray);\n  };\n  p.setSearch = p.setQuery;\n  p.addSearch = p.addQuery;\n  p.removeSearch = p.removeQuery;\n  p.hasSearch = p.hasQuery;\n\n  // sanitizing URLs\n  p.normalize = function() {\n    if (this._parts.urn) {\n      return this\n        .normalizeProtocol(false)\n        .normalizePath(false)\n        .normalizeQuery(false)\n        .normalizeFragment(false)\n        .build();\n    }\n\n    return this\n      .normalizeProtocol(false)\n      .normalizeHostname(false)\n      .normalizePort(false)\n      .normalizePath(false)\n      .normalizeQuery(false)\n      .normalizeFragment(false)\n      .build();\n  };\n  p.normalizeProtocol = function(build) {\n    if (typeof this._parts.protocol === 'string') {\n      this._parts.protocol = this._parts.protocol.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeHostname = function(build) {\n    if (this._parts.hostname) {\n      if (this.is('IDN') && punycode) {\n        this._parts.hostname = punycode.toASCII(this._parts.hostname);\n      } else if (this.is('IPv6') && IPv6) {\n        this._parts.hostname = IPv6.best(this._parts.hostname);\n      }\n\n      this._parts.hostname = this._parts.hostname.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePort = function(build) {\n    // remove port of it's the protocol's default\n    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {\n      this._parts.port = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePath = function(build) {\n    var _path = this._parts.path;\n    if (!_path) {\n      return this;\n    }\n\n    if (this._parts.urn) {\n      this._parts.path = URI.recodeUrnPath(this._parts.path);\n      this.build(!build);\n      return this;\n    }\n\n    if (this._parts.path === '/') {\n      return this;\n    }\n\n    _path = URI.recodePath(_path);\n\n    var _was_relative;\n    var _leadingParents = '';\n    var _parent, _pos;\n\n    // handle relative paths\n    if (_path.charAt(0) !== '/') {\n      _was_relative = true;\n      _path = '/' + _path;\n    }\n\n    // handle relative files (as opposed to directories)\n    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {\n      _path += '/';\n    }\n\n    // resolve simples\n    _path = _path\n      .replace(/(\\/(\\.\\/)+)|(\\/\\.$)/g, '/')\n      .replace(/\\/{2,}/g, '/');\n\n    // remember leading parents\n    if (_was_relative) {\n      _leadingParents = _path.substring(1).match(/^(\\.\\.\\/)+/) || '';\n      if (_leadingParents) {\n        _leadingParents = _leadingParents[0];\n      }\n    }\n\n    // resolve parents\n    while (true) {\n      _parent = _path.search(/\\/\\.\\.(\\/|$)/);\n      if (_parent === -1) {\n        // no more ../ to resolve\n        break;\n      } else if (_parent === 0) {\n        // top level cannot be relative, skip it\n        _path = _path.substring(3);\n        continue;\n      }\n\n      _pos = _path.substring(0, _parent).lastIndexOf('/');\n      if (_pos === -1) {\n        _pos = _parent;\n      }\n      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);\n    }\n\n    // revert to relative\n    if (_was_relative && this.is('relative')) {\n      _path = _leadingParents + _path.substring(1);\n    }\n\n    this._parts.path = _path;\n    this.build(!build);\n    return this;\n  };\n  p.normalizePathname = p.normalizePath;\n  p.normalizeQuery = function(build) {\n    if (typeof this._parts.query === 'string') {\n      if (!this._parts.query.length) {\n        this._parts.query = null;\n      } else {\n        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));\n      }\n\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeFragment = function(build) {\n    if (!this._parts.fragment) {\n      this._parts.fragment = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeSearch = p.normalizeQuery;\n  p.normalizeHash = p.normalizeFragment;\n\n  p.iso8859 = function() {\n    // expect unicode input, iso8859 output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = escape;\n    URI.decode = decodeURIComponent;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.unicode = function() {\n    // expect iso8859 input, unicode output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = unescape;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.readable = function() {\n    var uri = this.clone();\n    // removing username, password, because they shouldn't be displayed according to RFC 3986\n    uri.username('').password('').normalize();\n    var t = '';\n    if (uri._parts.protocol) {\n      t += uri._parts.protocol + '://';\n    }\n\n    if (uri._parts.hostname) {\n      if (uri.is('punycode') && punycode) {\n        t += punycode.toUnicode(uri._parts.hostname);\n        if (uri._parts.port) {\n          t += ':' + uri._parts.port;\n        }\n      } else {\n        t += uri.host();\n      }\n    }\n\n    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {\n      t += '/';\n    }\n\n    t += uri.path(true);\n    if (uri._parts.query) {\n      var q = '';\n      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {\n        var kv = (qp[i] || '').split('=');\n        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)\n          .replace(/&/g, '%26');\n\n        if (kv[1] !== undefined) {\n          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)\n            .replace(/&/g, '%26');\n        }\n      }\n      t += '?' + q.substring(1);\n    }\n\n    t += URI.decodeQuery(uri.hash(), true);\n    return t;\n  };\n\n  // resolving relative and absolute URLs\n  p.absoluteTo = function(base) {\n    var resolved = this.clone();\n    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];\n    var basedir, i, p;\n\n    if (this._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    if (!(base instanceof URI)) {\n      base = new URI(base);\n    }\n\n    if (resolved._parts.protocol) {\n      // Directly returns even if this._parts.hostname is empty.\n      return resolved;\n    } else {\n      resolved._parts.protocol = base._parts.protocol;\n    }\n\n    if (this._parts.hostname) {\n      return resolved;\n    }\n\n    for (i = 0; (p = properties[i]); i++) {\n      resolved._parts[p] = base._parts[p];\n    }\n\n    if (!resolved._parts.path) {\n      resolved._parts.path = base._parts.path;\n      if (!resolved._parts.query) {\n        resolved._parts.query = base._parts.query;\n      }\n    } else {\n      if (resolved._parts.path.substring(-2) === '..') {\n        resolved._parts.path += '/';\n      }\n\n      if (resolved.path().charAt(0) !== '/') {\n        basedir = base.directory();\n        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';\n        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;\n        resolved.normalizePath();\n      }\n    }\n\n    resolved.build();\n    return resolved;\n  };\n  p.relativeTo = function(base) {\n    var relative = this.clone().normalize();\n    var relativeParts, baseParts, common, relativePath, basePath;\n\n    if (relative._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    base = new URI(base).normalize();\n    relativeParts = relative._parts;\n    baseParts = base._parts;\n    relativePath = relative.path();\n    basePath = base.path();\n\n    if (relativePath.charAt(0) !== '/') {\n      throw new Error('URI is already relative');\n    }\n\n    if (basePath.charAt(0) !== '/') {\n      throw new Error('Cannot calculate a URI relative to another relative URI');\n    }\n\n    if (relativeParts.protocol === baseParts.protocol) {\n      relativeParts.protocol = null;\n    }\n\n    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {\n      return relative.build();\n    }\n\n    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {\n      return relative.build();\n    }\n\n    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {\n      relativeParts.hostname = null;\n      relativeParts.port = null;\n    } else {\n      return relative.build();\n    }\n\n    if (relativePath === basePath) {\n      relativeParts.path = '';\n      return relative.build();\n    }\n\n    // determine common sub path\n    common = URI.commonPath(relativePath, basePath);\n\n    // If the paths have nothing in common, return a relative URL with the absolute path.\n    if (!common) {\n      return relative.build();\n    }\n\n    var parents = baseParts.path\n      .substring(common.length)\n      .replace(/[^\\/]*$/, '')\n      .replace(/.*?\\//g, '../');\n\n    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';\n\n    return relative.build();\n  };\n\n  // comparing URIs\n  p.equals = function(uri) {\n    var one = this.clone();\n    var two = new URI(uri);\n    var one_map = {};\n    var two_map = {};\n    var checked = {};\n    var one_query, two_query, key;\n\n    one.normalize();\n    two.normalize();\n\n    // exact match\n    if (one.toString() === two.toString()) {\n      return true;\n    }\n\n    // extract query string\n    one_query = one.query();\n    two_query = two.query();\n    one.query('');\n    two.query('');\n\n    // definitely not equal if not even non-query parts match\n    if (one.toString() !== two.toString()) {\n      return false;\n    }\n\n    // query parameters have the same length, even if they're permuted\n    if (one_query.length !== two_query.length) {\n      return false;\n    }\n\n    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);\n    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);\n\n    for (key in one_map) {\n      if (hasOwn.call(one_map, key)) {\n        if (!isArray(one_map[key])) {\n          if (one_map[key] !== two_map[key]) {\n            return false;\n          }\n        } else if (!arraysEqual(one_map[key], two_map[key])) {\n          return false;\n        }\n\n        checked[key] = true;\n      }\n    }\n\n    for (key in two_map) {\n      if (hasOwn.call(two_map, key)) {\n        if (!checked[key]) {\n          // two contains a parameter not present in one\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  // state\n  p.preventInvalidHostname = function(v) {\n    this._parts.preventInvalidHostname = !!v;\n    return this;\n  };\n\n  p.duplicateQueryParameters = function(v) {\n    this._parts.duplicateQueryParameters = !!v;\n    return this;\n  };\n\n  p.escapeQuerySpace = function(v) {\n    this._parts.escapeQuerySpace = !!v;\n    return this;\n  };\n\n  return URI;\n}));\n", "/*jshint unused:false, scripturl:true */\nvar urls = [{\n    name: 'scheme and domain',\n    url: 'http://www.example.org',\n    _url: 'http://www.example.org/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '', // location.hash style\n      search: '', // location.search style\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'second level domain',\n    url: 'http://www.example.co.uk',\n    _url: 'http://www.example.co.uk/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.co.uk',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'www.example.co.uk',\n      origin: 'http://www.example.co.uk',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.co.uk',\n      tld: 'co.uk',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '', // location.hash style\n      search: '', // location.search style\n      host: 'www.example.co.uk',\n      hostname: 'www.example.co.uk'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: true,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  },{\n    name: 'qualified HTTP',\n    url: 'http://www.example.org/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'funky suffix',\n    url: 'http://www.example.org/some/directory/file.html-is-awesome?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/some/directory/file.html-is-awesome',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/some/directory/file.html-is-awesome',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html-is-awesome?query=string#fragment',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html-is-awesome',\n      suffix: '',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'complete URL',\n    url: 'scheme://user:pass@www.example.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass',\n      hostname: 'www.example.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@www.example.org:123',\n      origin: 'scheme://user:pass@www.example.org:123',\n      userinfo: 'user:pass',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'www.example.org:123',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'badly encoded userinfo',\n    url: 'scheme://user:pass:word@www.example.org/',\n    _url: 'scheme://user:pass%3Aword@www.example.org/',\n    parts: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass:word',\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass:word',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'user:pass%3Aword@www.example.org',\n      origin: 'scheme://user:pass%3Aword@www.example.org',\n      userinfo: 'user:pass%3Aword',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'empty username with non-empty password',\n    url: 'scheme://:password@www.example.org/',\n    _url: 'scheme://:password@www.example.org/',\n    parts: {\n      protocol: 'scheme',\n      username: null,\n      password: 'password',\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: '',\n      password: 'password',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: ':password@www.example.org',\n      origin: 'scheme://:password@www.example.org',\n      userinfo: ':password',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'malformed email in userinfo',\n    url: 'scheme://john@doe.com:pass:word@www.example.org/',\n    _url: 'scheme://john%40doe.com:pass%3Aword@www.example.org/',\n    parts: {\n      protocol: 'scheme',\n      username: 'john@doe.com',\n      password: 'pass:word',\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: 'john@doe.com',\n      password: 'pass:word',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'john%40doe.com:pass%3Aword@www.example.org',\n      origin: 'scheme://john%40doe.com:pass%3Aword@www.example.org',\n      userinfo: 'john%40doe.com:pass%3Aword',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'host-relative: URL',\n    url: '/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'path-relative: URL',\n    url: '../some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '../some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '../some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '../some/directory/file.html?query=string#fragment',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '../some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'missing scheme',\n    url: 'user:pass@www.example.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'user',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: 'pass@www.example.org:123/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'user',\n      username: '',\n      password: '',\n      port: '',\n      path: 'pass@www.example.org:123/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: 'pass@www.example.org:123/some/directory/file.html?query=string#fragment',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'ignoring scheme',\n    url: '://user:pass@example.org:123/some/directory/file.html?query=string#fragment',\n    _url: '//user:pass@example.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: null,\n      username: 'user',\n      password: 'pass',\n      hostname: 'example.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: '',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@example.org:123',\n      origin: 'user:pass@example.org:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'example.org:123',\n      hostname: 'example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'scheme-relative URL',\n    url: '//www.example.org/',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'www.example.org',\n      origin: 'www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'missing authority',\n    url: 'food:///test/file.csv',\n    parts: {\n      protocol: 'food',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/test/file.csv',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'food',\n      username: '',\n      password: '',\n      port: '',\n      path: '/test/file.csv',\n      query: '',\n      fragment: '',\n      resource: '/test/file.csv',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/test',\n      filename: 'file.csv',\n      suffix: 'csv',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv4',\n    url: 'http://user:pass@123.123.123.123:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: '123.123.123.123',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@123.123.123.123:123',\n      origin: 'http://user:pass@123.123.123.123:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '123.123.123.123:123',\n      hostname: '123.123.123.123'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: true,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6',\n    url: 'http://user:pass@fe80:0000:0000:0000:0204:61ff:fe9d:f156/some/directory/file.html?query=string#fragment',\n    _url: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156',\n      port: null,\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]',\n      origin: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '[fe80:0000:0000:0000:0204:61ff:fe9d:f156]',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 with port',\n    url: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123',\n      origin: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets, port, file.ext',\n    url: 'http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210',\n      port: '80',\n      path: '/index.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '80',\n      path: '/index.html',\n      query: '',\n      fragment: '',\n      resource: '/index.html',\n      authority: '[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80',\n      origin: 'http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'index.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80',\n      hostname: 'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets, file.ext',\n    url: 'http://[1080:0:0:0:8:800:200C:417A]/index.html',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '1080:0:0:0:8:800:200C:417A',\n      port: null,\n      path: '/index.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/index.html',\n      query: '',\n      fragment: '',\n      resource: '/index.html',\n      authority: '[1080:0:0:0:8:800:200C:417A]',\n      origin: 'http://[1080:0:0:0:8:800:200C:417A]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'index.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '[1080:0:0:0:8:800:200C:417A]',\n      hostname: '1080:0:0:0:8:800:200C:417A'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets ::1',\n    url: 'http://[3ffe:2a00:100:7031::1]',\n    _url: 'http://[3ffe:2a00:100:7031::1]/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '3ffe:2a00:100:7031::1',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: '[3ffe:2a00:100:7031::1]',\n      origin: 'http://[3ffe:2a00:100:7031::1]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[3ffe:2a00:100:7031::1]',\n      hostname: '3ffe:2a00:100:7031::1'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets, file',\n    url: 'http://[1080::8:800:200C:417A]/foo',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '1080::8:800:200C:417A',\n      port: null,\n      path: '/foo',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/foo',\n      query: '',\n      fragment: '',\n      resource: '/foo',\n      authority: '[1080::8:800:200C:417A]',\n      origin: 'http://[1080::8:800:200C:417A]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'foo',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[1080::8:800:200C:417A]',\n      hostname: '1080::8:800:200C:417A'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 IPv4 brackets, path',\n    url: 'http://[::192.9.5.5]/ipng',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '::192.9.5.5',\n      port: null,\n      path: '/ipng',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/ipng',\n      query: '',\n      fragment: '',\n      resource: '/ipng',\n      authority: '[::192.9.5.5]',\n      origin: 'http://[::192.9.5.5]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'ipng',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[::192.9.5.5]',\n      hostname: '::192.9.5.5'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 mask IPv4 brackets, port, file.ext',\n    url: 'http://[::FFFF:129.144.52.38]:80/index.html',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '::FFFF:129.144.52.38',\n      port: '80',\n      path: '/index.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '80',\n      path: '/index.html',\n      query: '',\n      fragment: '',\n      resource: '/index.html',\n      authority: '[::FFFF:129.144.52.38]:80',\n      origin: 'http://[::FFFF:129.144.52.38]:80',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'index.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '[::FFFF:129.144.52.38]:80',\n      hostname: '::FFFF:129.144.52.38'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets',\n    url: 'http://[2010:836B:4179::836B:4179]',\n    _url: 'http://[2010:836B:4179::836B:4179]/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '2010:836B:4179::836B:4179',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: '[2010:836B:4179::836B:4179]',\n      origin: 'http://[2010:836B:4179::836B:4179]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[2010:836B:4179::836B:4179]',\n      hostname: '2010:836B:4179::836B:4179'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    // https://github.com/medialize/URI.js/issues/347\n    name: 'Underscore in domain',\n    url: 'http://user:pass@some_where.exa_mple.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'some_where.exa_mple.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@some_where.exa_mple.org:123',\n      origin: 'http://user:pass@some_where.exa_mple.org:123',\n      userinfo: 'user:pass',\n      subdomain: 'some_where',\n      domain: 'exa_mple.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'some_where.exa_mple.org:123',\n      hostname: 'some_where.exa_mple.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IDN (punycode)',\n    url: 'http://user:pass@xn--exmple-cua.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'xn--exmple-cua.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@xn--exmple-cua.org:123',\n      origin: 'http://user:pass@xn--exmple-cua.org:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: 'xn--exmple-cua.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'xn--exmple-cua.org:123',\n      hostname: 'xn--exmple-cua.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: true\n    }\n  }, {\n    name: 'IDN',\n    url: 'http://user:pass@ex\u00e4mple.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'ex\u00e4mple.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@ex\u00e4mple.org:123',\n      origin: 'http://user:pass@ex\u00e4mple.org:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: 'ex\u00e4mple.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'ex\u00e4mple.org:123',\n      hostname: 'ex\u00e4mple.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: true,\n      punycode: false\n    }\n  }, {\n    name: 'file://',\n    url: 'file:///foo/bar/baz.html',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/foo/bar/baz.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/foo/bar/baz.html',\n      query: '',\n      fragment: '',\n      resource: '/foo/bar/baz.html',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/foo/bar',\n      filename: 'baz.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file://example.org:123',\n    url: 'file://example.org:123/foo/bar/baz.html',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: 'example.org',\n      port: '123',\n      path: '/foo/bar/baz.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '123',\n      path: '/foo/bar/baz.html',\n      query: '',\n      fragment: '',\n      resource: '/foo/bar/baz.html',\n      authority: 'example.org:123',\n      origin: 'file://example.org:123',\n      userinfo: '',\n      subdomain: '',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/foo/bar',\n      filename: 'baz.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: 'example.org:123',\n      hostname: 'example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file:// Windows-Drive-Letter',\n    url: 'file:///C:/WINDOWS/foo.txt',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/C:/WINDOWS/foo.txt',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/C:/WINDOWS/foo.txt',\n      query: '',\n      fragment: '',\n      resource: '/C:/WINDOWS/foo.txt',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/C:/WINDOWS',\n      filename: 'foo.txt',\n      suffix: 'txt',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file://example.org/ Windows-Drive-Letter',\n    url: 'file://example.org/C:/WINDOWS/foo.txt',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: 'example.org',\n      port: null,\n      path: '/C:/WINDOWS/foo.txt',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/C:/WINDOWS/foo.txt',\n      query: '',\n      fragment: '',\n      resource: '/C:/WINDOWS/foo.txt',\n      authority: 'example.org',\n      origin: 'file://example.org',\n      userinfo: '',\n      subdomain: '',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/C:/WINDOWS',\n      filename: 'foo.txt',\n      suffix: 'txt',\n      hash: '',\n      search: '',\n      host: 'example.org',\n      hostname: 'example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file://localhost/ Windows-Drive-Letter with pipe',\n    url: 'file://localhost/C|/WINDOWS/foo.txt',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: 'localhost',\n      port: null,\n      path: '/C|/WINDOWS/foo.txt',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/C|/WINDOWS/foo.txt',\n      query: '',\n      fragment: '',\n      resource: '/C|/WINDOWS/foo.txt',\n      authority: 'localhost',\n      origin: 'file://localhost',\n      userinfo: '',\n      subdomain: '',\n      domain: 'localhost',\n      tld: 'localhost',\n      directory: '/C|/WINDOWS',\n      filename: 'foo.txt',\n      suffix: 'txt',\n      hash: '',\n      search: '',\n      host: 'localhost',\n      hostname: 'localhost'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'Path containing @',\n    url: 'http://www.example.org/@foobar',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/@foobar',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/@foobar',\n      query: '',\n      fragment: '',\n      resource: '/@foobar',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '@foobar',\n      suffix: '',\n      hash: '', // location.hash style\n      search: '', // location.search style\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'mailto:',\n    url: 'mailto:hello@example.org?subject=hello',\n    _url: 'mailto:hello@example.org?subject=hello',\n    parts: {\n      protocol: 'mailto',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: 'hello@example.org',\n      query: 'subject=hello',\n      fragment: null\n    },\n    accessors: {\n      protocol: 'mailto',\n      username: '',\n      password: '',\n      port: '',\n      path: 'hello@example.org',\n      query: 'subject=hello',\n      fragment: '',\n      resource: 'hello@example.org?subject=hello',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '?subject=hello',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'magnet:',\n    url: 'magnet:?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n    _url: 'magnet:?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n    parts: {\n      protocol: 'magnet',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '',\n      query: 'xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      fragment: null\n    },\n    accessors: {\n      protocol: 'magnet',\n      username: '',\n      password: '',\n      port: '',\n      path: '',\n      query: 'xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      fragment: '',\n      resource: '?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'javascript:',\n    url: 'javascript:alert(\"hello world\");',\n    _url: 'javascript:alert(\"hello world\");',\n    parts: {\n      protocol: 'javascript',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: 'alert(\"hello world\");',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'javascript',\n      username: '',\n      password: '',\n      port: '',\n      path: 'alert(\"hello world\");',\n      query: '',\n      fragment: '',\n      resource: 'alert(\"hello world\");',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'colon in path',\n    url: 'http://en.wikipedia.org/wiki/Help:IPA',\n    _url: 'http://en.wikipedia.org/wiki/Help:IPA',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'en.wikipedia.org',\n      port: null,\n      path: '/wiki/Help:IPA',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/wiki/Help:IPA',\n      query: '',\n      fragment: '',\n      resource: '/wiki/Help:IPA',\n      authority: 'en.wikipedia.org',\n      origin: 'http://en.wikipedia.org',\n      userinfo: '',\n      subdomain: 'en',\n      domain: 'wikipedia.org',\n      tld: 'org',\n      directory: '/wiki',\n      filename: 'Help:IPA',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'en.wikipedia.org',\n      hostname: 'en.wikipedia.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'colon in path without protocol',\n    url: '/wiki/Help:IPA',\n    _url: '/wiki/Help:IPA',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/wiki/Help:IPA',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/wiki/Help:IPA',\n      query: '',\n      fragment: '',\n      resource: '/wiki/Help:IPA',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/wiki',\n      filename: 'Help:IPA',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'colon dash dash in path without protocol',\n    url: '/foo/xy://bar',\n    _url: '/foo/xy://bar',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/foo/xy://bar',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/foo/xy://bar',\n      query: '',\n      fragment: '',\n      resource: '/foo/xy://bar',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/foo/xy:/', // sanitized empty directory!\n      filename: 'bar',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n      name: 'colon in path',\n      url: 'http://www.example.org:8080/hello:world',\n      parts: {\n        protocol: 'http',\n        username: null,\n        password: null,\n        hostname: 'www.example.org',\n        port: '8080',\n        path: '/hello:world',\n        query: null,\n        fragment: null\n      },\n      accessors: {\n        protocol: 'http',\n        username: '',\n        password: '',\n        port: '8080',\n        path: '/hello:world',\n        query: '',\n        fragment: '',\n        resource: '/hello:world',\n        authority: 'www.example.org:8080',\n        origin: 'http://www.example.org:8080',\n        userinfo: '',\n        subdomain: 'www',\n        domain: 'example.org',\n        tld: 'org',\n        directory: '/',\n        filename: 'hello:world',\n        suffix: '',\n        hash: '', // location.hash style\n        search: '', // location.search style\n        host: 'www.example.org:8080',\n        hostname: 'www.example.org'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }, {\n      name: 'backslashes',\n      url: 'http://i.xss.com\\\\www.example.org/some/directory/file.html?query=string#fragment',\n      _url: 'http://i.xss.com/www.example.org/some/directory/file.html?query=string#fragment',\n      parts: {\n        protocol: 'http',\n        username: null,\n        password: null,\n        hostname: 'i.xss.com',\n        port: null,\n        path: '/www.example.org/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment'\n      },\n      accessors: {\n        protocol: 'http',\n        username: '',\n        password: '',\n        port: '',\n        path: '/www.example.org/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment',\n        resource: '/www.example.org/some/directory/file.html?query=string#fragment',\n        authority: 'i.xss.com',\n        origin: 'http://i.xss.com',\n        userinfo: '',\n        subdomain: 'i',\n        domain: 'xss.com',\n        tld: 'com',\n        directory: '/www.example.org/some/directory',\n        filename: 'file.html',\n        suffix: 'html',\n        hash: '#fragment',\n        search: '?query=string',\n        host: 'i.xss.com',\n        hostname: 'i.xss.com'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }, {\n      name: 'backslashes authority',\n      url: 'https://attacker.com\\\\@example.com/some/directory/file.html?query=string#fragment',\n      _url: 'https://attacker.com/@example.com/some/directory/file.html?query=string#fragment',\n      parts: {\n        protocol: 'https',\n        username: null,\n        password: null,\n        hostname: 'attacker.com',\n        port: null,\n        path: '/@example.com/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment'\n      },\n      accessors: {\n        protocol: 'https',\n        username: '',\n        password: '',\n        port: '',\n        path: '/@example.com/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment',\n        resource: '/@example.com/some/directory/file.html?query=string#fragment',\n        authority: 'attacker.com',\n        origin: 'https://attacker.com',\n        userinfo: '',\n        subdomain: '',\n        domain: 'attacker.com',\n        tld: 'com',\n        directory: '/@example.com/some/directory',\n        filename: 'file.html',\n        suffix: 'html',\n        hash: '#fragment',\n        search: '?query=string',\n        host: 'attacker.com',\n        hostname: 'attacker.com'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }, {\n      name: 'backslashes authority, no ending slash',\n      url: 'https://attacker.com\\\\@example.com',\n      _url: 'https://attacker.com/@example.com',\n      parts: {\n        protocol: 'https',\n        username: null,\n        password: null,\n        hostname: 'attacker.com',\n        port: null,\n        path: '/@example.com',\n        query: null,\n        fragment: null\n      },\n      accessors: {\n        protocol: 'https',\n        username: '',\n        password: '',\n        port: '',\n        path: '/@example.com',\n        query: '',\n        fragment: '',\n        resource: '/@example.com',\n        authority: 'attacker.com',\n        origin: 'https://attacker.com',\n        userinfo: '',\n        subdomain: '',\n        domain: 'attacker.com',\n        tld: 'com',\n        directory: '/',\n        filename: '@example.com',\n        suffix: 'com',\n        hash: '',\n        search: '',\n        host: 'attacker.com',\n        hostname: 'attacker.com'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }\n];\n\n"], "fixing_code": ["/*!\n * URI.js - Mutating URLs\n *\n * Version: 1.19.5\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);\n  } else {\n    // Browser globals (root is window)\n    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);\n  }\n}(this, function (punycode, IPv6, SLD, root) {\n  'use strict';\n  /*global location, escape, unescape */\n  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase\n  /*jshint camelcase: false */\n\n  // save current URI variable, if any\n  var _URI = root && root.URI;\n\n  function URI(url, base) {\n    var _urlSupplied = arguments.length >= 1;\n    var _baseSupplied = arguments.length >= 2;\n\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof URI)) {\n      if (_urlSupplied) {\n        if (_baseSupplied) {\n          return new URI(url, base);\n        }\n\n        return new URI(url);\n      }\n\n      return new URI();\n    }\n\n    if (url === undefined) {\n      if (_urlSupplied) {\n        throw new TypeError('undefined is not a valid argument for URI');\n      }\n\n      if (typeof location !== 'undefined') {\n        url = location.href + '';\n      } else {\n        url = '';\n      }\n    }\n\n    if (url === null) {\n      if (_urlSupplied) {\n        throw new TypeError('null is not a valid argument for URI');\n      }\n    }\n\n    this.href(url);\n\n    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor\n    if (base !== undefined) {\n      return this.absoluteTo(base);\n    }\n\n    return this;\n  }\n\n  function isInteger(value) {\n    return /^[0-9]+$/.test(value);\n  }\n\n  URI.version = '1.19.5';\n\n  var p = URI.prototype;\n  var hasOwn = Object.prototype.hasOwnProperty;\n\n  function escapeRegEx(string) {\n    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963\n    return string.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n  }\n\n  function getType(value) {\n    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value\n    if (value === undefined) {\n      return 'Undefined';\n    }\n\n    return String(Object.prototype.toString.call(value)).slice(8, -1);\n  }\n\n  function isArray(obj) {\n    return getType(obj) === 'Array';\n  }\n\n  function filterArrayValues(data, value) {\n    var lookup = {};\n    var i, length;\n\n    if (getType(value) === 'RegExp') {\n      lookup = null;\n    } else if (isArray(value)) {\n      for (i = 0, length = value.length; i < length; i++) {\n        lookup[value[i]] = true;\n      }\n    } else {\n      lookup[value] = true;\n    }\n\n    for (i = 0, length = data.length; i < length; i++) {\n      /*jshint laxbreak: true */\n      var _match = lookup && lookup[data[i]] !== undefined\n        || !lookup && value.test(data[i]);\n      /*jshint laxbreak: false */\n      if (_match) {\n        data.splice(i, 1);\n        length--;\n        i--;\n      }\n    }\n\n    return data;\n  }\n\n  function arrayContains(list, value) {\n    var i, length;\n\n    // value may be string, number, array, regexp\n    if (isArray(value)) {\n      // Note: this can be optimized to O(n) (instead of current O(m * n))\n      for (i = 0, length = value.length; i < length; i++) {\n        if (!arrayContains(list, value[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    var _type = getType(value);\n    for (i = 0, length = list.length; i < length; i++) {\n      if (_type === 'RegExp') {\n        if (typeof list[i] === 'string' && list[i].match(value)) {\n          return true;\n        }\n      } else if (list[i] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function arraysEqual(one, two) {\n    if (!isArray(one) || !isArray(two)) {\n      return false;\n    }\n\n    // arrays can't be equal if they have different amount of content\n    if (one.length !== two.length) {\n      return false;\n    }\n\n    one.sort();\n    two.sort();\n\n    for (var i = 0, l = one.length; i < l; i++) {\n      if (one[i] !== two[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function trimSlashes(text) {\n    var trim_expression = /^\\/+|\\/+$/g;\n    return text.replace(trim_expression, '');\n  }\n\n  URI._parts = function() {\n    return {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      urn: null,\n      port: null,\n      path: null,\n      query: null,\n      fragment: null,\n      // state\n      preventInvalidHostname: URI.preventInvalidHostname,\n      duplicateQueryParameters: URI.duplicateQueryParameters,\n      escapeQuerySpace: URI.escapeQuerySpace\n    };\n  };\n  // state: throw on invalid hostname\n  // see https://github.com/medialize/URI.js/pull/345\n  // and https://github.com/medialize/URI.js/issues/354\n  URI.preventInvalidHostname = false;\n  // state: allow duplicate query parameters (a=1&a=1)\n  URI.duplicateQueryParameters = false;\n  // state: replaces + with %20 (space in query strings)\n  URI.escapeQuerySpace = true;\n  // static properties\n  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;\n  URI.idn_expression = /[^a-z0-9\\._-]/i;\n  URI.punycode_expression = /(xn--)/i;\n  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?\n  URI.ip4_expression = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n  // credits to Rich Brown\n  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096\n  // specification: http://www.ietf.org/rfc/rfc4291.txt\n  URI.ip6_expression = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/;\n  // expression used is \"gruber revised\" (@gruber v2) determined to be the\n  // best solution in a regex-golf we did a couple of ages ago at\n  // * http://mathiasbynens.be/demo/url-regex\n  // * http://rodneyrehm.de/t/url-regex.html\n  URI.find_uri_expression = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))/ig;\n  URI.findUri = {\n    // valid \"scheme://\" or \"www.\"\n    start: /\\b(?:([a-z][a-z0-9.+-]*:\\/\\/)|www\\.)/gi,\n    // everything up to the next whitespace\n    end: /[\\s\\r\\n]|$/,\n    // trim trailing punctuation captured by end RegExp\n    trim: /[`!()\\[\\]{};:'\".,<>?\u00ab\u00bb\u201c\u201d\u201e\u2018\u2019]+$/,\n    // balanced parens inclusion (), [], {}, <>\n    parens: /(\\([^\\)]*\\)|\\[[^\\]]*\\]|\\{[^}]*\\}|<[^>]*>)/g,\n  };\n  // http://www.iana.org/assignments/uri-schemes.html\n  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports\n  URI.defaultPorts = {\n    http: '80',\n    https: '443',\n    ftp: '21',\n    gopher: '70',\n    ws: '80',\n    wss: '443'\n  };\n  // list of protocols which always require a hostname\n  URI.hostProtocols = [\n    'http',\n    'https'\n  ];\n\n  // allowed hostname characters according to RFC 3986\n  // ALPHA DIGIT \"-\" \".\" \"_\" \"~\" \"!\" \"$\" \"&\" \"'\" \"(\" \")\" \"*\" \"+\" \",\" \";\" \"=\" %encoded\n  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _\n  URI.invalid_hostname_characters = /[^a-zA-Z0-9\\.\\-:_]/;\n  // map DOM Elements to their URI attribute\n  URI.domAttributes = {\n    'a': 'href',\n    'blockquote': 'cite',\n    'link': 'href',\n    'base': 'href',\n    'script': 'src',\n    'form': 'action',\n    'img': 'src',\n    'area': 'href',\n    'iframe': 'src',\n    'embed': 'src',\n    'source': 'src',\n    'track': 'src',\n    'input': 'src', // but only if type=\"image\"\n    'audio': 'src',\n    'video': 'src'\n  };\n  URI.getDomAttribute = function(node) {\n    if (!node || !node.nodeName) {\n      return undefined;\n    }\n\n    var nodeName = node.nodeName.toLowerCase();\n    // <input> should only expose src for type=\"image\"\n    if (nodeName === 'input' && node.type !== 'image') {\n      return undefined;\n    }\n\n    return URI.domAttributes[nodeName];\n  };\n\n  function escapeForDumbFirefox36(value) {\n    // https://github.com/medialize/URI.js/issues/91\n    return escape(value);\n  }\n\n  // encoding / decoding according to RFC3986\n  function strictEncodeURIComponent(string) {\n    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent\n    return encodeURIComponent(string)\n      .replace(/[!'()*]/g, escapeForDumbFirefox36)\n      .replace(/\\*/g, '%2A');\n  }\n  URI.encode = strictEncodeURIComponent;\n  URI.decode = decodeURIComponent;\n  URI.iso8859 = function() {\n    URI.encode = escape;\n    URI.decode = unescape;\n  };\n  URI.unicode = function() {\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = decodeURIComponent;\n  };\n  URI.characters = {\n    pathname: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,\n        map: {\n          // -._~!'()*\n          '%24': '$',\n          '%26': '&',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%3A': ':',\n          '%40': '@'\n        }\n      },\n      decode: {\n        expression: /[\\/\\?#]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23'\n        }\n      }\n    },\n    reserved: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,\n        map: {\n          // gen-delims\n          '%3A': ':',\n          '%2F': '/',\n          '%3F': '?',\n          '%23': '#',\n          '%5B': '[',\n          '%5D': ']',\n          '%40': '@',\n          // sub-delims\n          '%21': '!',\n          '%24': '$',\n          '%26': '&',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '='\n        }\n      }\n    },\n    urnpath: {\n      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable\n      // for usage in a URN. RFC2141 also calls out \"-\", \".\", and \"_\" as acceptable characters, but\n      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also\n      // note that the colon character is not featured in the encoding map; this is because URI.js\n      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it\n      // should not appear unencoded in a segment itself.\n      // See also the note above about RFC3986 and capitalalized hex digits.\n      encode: {\n        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,\n        map: {\n          '%21': '!',\n          '%24': '$',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%40': '@'\n        }\n      },\n      // These characters are the characters called out by RFC2141 as \"reserved\" characters that\n      // should never appear in a URN, plus the colon character (see note above).\n      decode: {\n        expression: /[\\/\\?#:]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23',\n          ':': '%3A'\n        }\n      }\n    }\n  };\n  URI.encodeQuery = function(string, escapeQuerySpace) {\n    var escaped = URI.encode(string + '');\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;\n  };\n  URI.decodeQuery = function(string, escapeQuerySpace) {\n    string += '';\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    try {\n      return URI.decode(escapeQuerySpace ? string.replace(/\\+/g, '%20') : string);\n    } catch(e) {\n      // we're not going to mess with weird encodings,\n      // give up and return the undecoded original string\n      // see https://github.com/medialize/URI.js/issues/87\n      // see https://github.com/medialize/URI.js/issues/92\n      return string;\n    }\n  };\n  // generate encode/decode path functions\n  var _parts = {'encode':'encode', 'decode':'decode'};\n  var _part;\n  var generateAccessor = function(_group, _part) {\n    return function(string) {\n      try {\n        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {\n          return URI.characters[_group][_part].map[c];\n        });\n      } catch (e) {\n        // we're not going to mess with weird encodings,\n        // give up and return the undecoded original string\n        // see https://github.com/medialize/URI.js/issues/87\n        // see https://github.com/medialize/URI.js/issues/92\n        return string;\n      }\n    };\n  };\n\n  for (_part in _parts) {\n    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);\n    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);\n  }\n\n  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {\n    return function(string) {\n      // Why pass in names of functions, rather than the function objects themselves? The\n      // definitions of some functions (but in particular, URI.decode) will occasionally change due\n      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure\n      // that the functions we use here are \"fresh\".\n      var actualCodingFunc;\n      if (!_innerCodingFuncName) {\n        actualCodingFunc = URI[_codingFuncName];\n      } else {\n        actualCodingFunc = function(string) {\n          return URI[_codingFuncName](URI[_innerCodingFuncName](string));\n        };\n      }\n\n      var segments = (string + '').split(_sep);\n\n      for (var i = 0, length = segments.length; i < length; i++) {\n        segments[i] = actualCodingFunc(segments[i]);\n      }\n\n      return segments.join(_sep);\n    };\n  };\n\n  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.\n  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');\n  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');\n  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');\n  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');\n\n  URI.encodeReserved = generateAccessor('reserved', 'encode');\n\n  URI.parse = function(string, parts) {\n    var pos;\n    if (!parts) {\n      parts = {\n        preventInvalidHostname: URI.preventInvalidHostname\n      };\n    }\n    // [protocol\"://\"[username[\":\"password]\"@\"]hostname[\":\"port]\"/\"?][path][\"?\"querystring][\"#\"fragment]\n\n    // extract fragment\n    pos = string.indexOf('#');\n    if (pos > -1) {\n      // escaping?\n      parts.fragment = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract query\n    pos = string.indexOf('?');\n    if (pos > -1) {\n      // escaping?\n      parts.query = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract protocol\n    if (string.substring(0, 2) === '//') {\n      // relative-scheme\n      parts.protocol = null;\n      string = string.substring(2);\n      // extract \"user:pass@host:port\"\n      string = URI.parseAuthority(string, parts);\n    } else {\n      pos = string.indexOf(':');\n      if (pos > -1) {\n        parts.protocol = string.substring(0, pos) || null;\n        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {\n          // : may be within the path\n          parts.protocol = undefined;\n        } else if (string.substring(pos + 1, pos + 3).replace(/\\\\/g, '/') === '//') {\n          string = string.substring(pos + 3);\n\n          // extract \"user:pass@host:port\"\n          string = URI.parseAuthority(string, parts);\n        } else {\n          string = string.substring(pos + 1);\n          parts.urn = true;\n        }\n      }\n    }\n\n    // what's left must be the path\n    parts.path = string;\n\n    // and we're done\n    return parts;\n  };\n  URI.parseHost = function(string, parts) {\n    if (!string) {\n      string = '';\n    }\n\n    // Copy chrome, IE, opera backslash-handling behavior.\n    // Back slashes before the query string get converted to forward slashes\n    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\n    // https://github.com/medialize/URI.js/pull/233\n    string = string.replace(/\\\\/g, '/');\n\n    // extract host:port\n    var pos = string.indexOf('/');\n    var bracketPos;\n    var t;\n\n    if (pos === -1) {\n      pos = string.length;\n    }\n\n    if (string.charAt(0) === '[') {\n      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6\n      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts\n      // IPv6+port in the format [2001:db8::1]:80 (for the time being)\n      bracketPos = string.indexOf(']');\n      parts.hostname = string.substring(1, bracketPos) || null;\n      parts.port = string.substring(bracketPos + 2, pos) || null;\n      if (parts.port === '/') {\n        parts.port = null;\n      }\n    } else {\n      var firstColon = string.indexOf(':');\n      var firstSlash = string.indexOf('/');\n      var nextColon = string.indexOf(':', firstColon + 1);\n      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {\n        // IPv6 host contains multiple colons - but no port\n        // this notation is actually not allowed by RFC 3986, but we're a liberal parser\n        parts.hostname = string.substring(0, pos) || null;\n        parts.port = null;\n      } else {\n        t = string.substring(0, pos).split(':');\n        parts.hostname = t[0] || null;\n        parts.port = t[1] || null;\n      }\n    }\n\n    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {\n      pos++;\n      string = '/' + string;\n    }\n\n    if (parts.preventInvalidHostname) {\n      URI.ensureValidHostname(parts.hostname, parts.protocol);\n    }\n\n    if (parts.port) {\n      URI.ensureValidPort(parts.port);\n    }\n\n    return string.substring(pos) || '/';\n  };\n  URI.parseAuthority = function(string, parts) {\n    string = URI.parseUserinfo(string, parts);\n    return URI.parseHost(string, parts);\n  };\n  URI.parseUserinfo = function(string, parts) {\n    // extract username:password\n    var _string = string\n    var firstBackSlash = string.indexOf('\\\\');\n    if (firstBackSlash !== -1) {\n      string = string.replace(/\\\\/g, '/')\n    }\n    var firstSlash = string.indexOf('/');\n    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);\n    var t;\n\n    // authority@ must come before /path or \\path\n    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {\n      t = string.substring(0, pos).split(':');\n      parts.username = t[0] ? URI.decode(t[0]) : null;\n      t.shift();\n      parts.password = t[0] ? URI.decode(t.join(':')) : null;\n      string = _string.substring(pos + 1);\n    } else {\n      parts.username = null;\n      parts.password = null;\n    }\n\n    return string;\n  };\n  URI.parseQuery = function(string, escapeQuerySpace) {\n    if (!string) {\n      return {};\n    }\n\n    // throw out the funky business - \"?\"[name\"=\"value\"&\"]+\n    string = string.replace(/&+/g, '&').replace(/^\\?*&*|&+$/g, '');\n\n    if (!string) {\n      return {};\n    }\n\n    var items = {};\n    var splits = string.split('&');\n    var length = splits.length;\n    var v, name, value;\n\n    for (var i = 0; i < length; i++) {\n      v = splits[i].split('=');\n      name = URI.decodeQuery(v.shift(), escapeQuerySpace);\n      // no \"=\" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters\n      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;\n\n      if (hasOwn.call(items, name)) {\n        if (typeof items[name] === 'string' || items[name] === null) {\n          items[name] = [items[name]];\n        }\n\n        items[name].push(value);\n      } else {\n        items[name] = value;\n      }\n    }\n\n    return items;\n  };\n\n  URI.build = function(parts) {\n    var t = '';\n    var requireAbsolutePath = false\n\n    if (parts.protocol) {\n      t += parts.protocol + ':';\n    }\n\n    if (!parts.urn && (t || parts.hostname)) {\n      t += '//';\n      requireAbsolutePath = true\n    }\n\n    t += (URI.buildAuthority(parts) || '');\n\n    if (typeof parts.path === 'string') {\n      if (parts.path.charAt(0) !== '/' && requireAbsolutePath) {\n        t += '/';\n      }\n\n      t += parts.path;\n    }\n\n    if (typeof parts.query === 'string' && parts.query) {\n      t += '?' + parts.query;\n    }\n\n    if (typeof parts.fragment === 'string' && parts.fragment) {\n      t += '#' + parts.fragment;\n    }\n    return t;\n  };\n  URI.buildHost = function(parts) {\n    var t = '';\n\n    if (!parts.hostname) {\n      return '';\n    } else if (URI.ip6_expression.test(parts.hostname)) {\n      t += '[' + parts.hostname + ']';\n    } else {\n      t += parts.hostname;\n    }\n\n    if (parts.port) {\n      t += ':' + parts.port;\n    }\n\n    return t;\n  };\n  URI.buildAuthority = function(parts) {\n    return URI.buildUserinfo(parts) + URI.buildHost(parts);\n  };\n  URI.buildUserinfo = function(parts) {\n    var t = '';\n\n    if (parts.username) {\n      t += URI.encode(parts.username);\n    }\n\n    if (parts.password) {\n      t += ':' + URI.encode(parts.password);\n    }\n\n    if (t) {\n      t += '@';\n    }\n\n    return t;\n  };\n  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {\n    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html\n    // being \u00bb-._~!$&'()*+,;=:@/?\u00ab %HEX and alnum are allowed\n    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!\n    // URI.js treats the query string as being application/x-www-form-urlencoded\n    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type\n\n    var t = '';\n    var unique, key, i, length;\n    for (key in data) {\n      if (hasOwn.call(data, key)) {\n        if (isArray(data[key])) {\n          unique = {};\n          for (i = 0, length = data[key].length; i < length; i++) {\n            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {\n              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);\n              if (duplicateQueryParameters !== true) {\n                unique[data[key][i] + ''] = true;\n              }\n            }\n          }\n        } else if (data[key] !== undefined) {\n          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);\n        }\n      }\n    }\n\n    return t.substring(1);\n  };\n  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {\n    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded\n    // don't append \"=\" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization\n    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');\n  };\n\n  URI.addQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.addQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (data[name] === undefined) {\n        data[name] = value;\n        return;\n      } else if (typeof data[name] === 'string') {\n        data[name] = [data[name]];\n      }\n\n      if (!isArray(value)) {\n        value = [value];\n      }\n\n      data[name] = (data[name] || []).concat(value);\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.setQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.setQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      data[name] = value === undefined ? null : value;\n    } else {\n      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.removeQuery = function(data, name, value) {\n    var i, length, key;\n\n    if (isArray(name)) {\n      for (i = 0, length = name.length; i < length; i++) {\n        data[name[i]] = undefined;\n      }\n    } else if (getType(name) === 'RegExp') {\n      for (key in data) {\n        if (name.test(key)) {\n          data[key] = undefined;\n        }\n      }\n    } else if (typeof name === 'object') {\n      for (key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.removeQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (value !== undefined) {\n        if (getType(value) === 'RegExp') {\n          if (!isArray(data[name]) && value.test(data[name])) {\n            data[name] = undefined;\n          } else {\n            data[name] = filterArrayValues(data[name], value);\n          }\n        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {\n          data[name] = undefined;\n        } else if (isArray(data[name])) {\n          data[name] = filterArrayValues(data[name], value);\n        }\n      } else {\n        data[name] = undefined;\n      }\n    } else {\n      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');\n    }\n  };\n  URI.hasQuery = function(data, name, value, withinArray) {\n    switch (getType(name)) {\n      case 'String':\n        // Nothing to do here\n        break;\n\n      case 'RegExp':\n        for (var key in data) {\n          if (hasOwn.call(data, key)) {\n            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n\n      case 'Object':\n        for (var _key in name) {\n          if (hasOwn.call(name, _key)) {\n            if (!URI.hasQuery(data, _key, name[_key])) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');\n    }\n\n    switch (getType(value)) {\n      case 'Undefined':\n        // true if exists (but may be empty)\n        return name in data; // data[name] !== undefined;\n\n      case 'Boolean':\n        // true if exists and non-empty\n        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);\n        return value === _booly;\n\n      case 'Function':\n        // allow complex comparison\n        return !!value(data[name], name, data);\n\n      case 'Array':\n        if (!isArray(data[name])) {\n          return false;\n        }\n\n        var op = withinArray ? arrayContains : arraysEqual;\n        return op(data[name], value);\n\n      case 'RegExp':\n        if (!isArray(data[name])) {\n          return Boolean(data[name] && data[name].match(value));\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      case 'Number':\n        value = String(value);\n        /* falls through */\n      case 'String':\n        if (!isArray(data[name])) {\n          return data[name] === value;\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');\n    }\n  };\n\n\n  URI.joinPaths = function() {\n    var input = [];\n    var segments = [];\n    var nonEmptySegments = 0;\n\n    for (var i = 0; i < arguments.length; i++) {\n      var url = new URI(arguments[i]);\n      input.push(url);\n      var _segments = url.segment();\n      for (var s = 0; s < _segments.length; s++) {\n        if (typeof _segments[s] === 'string') {\n          segments.push(_segments[s]);\n        }\n\n        if (_segments[s]) {\n          nonEmptySegments++;\n        }\n      }\n    }\n\n    if (!segments.length || !nonEmptySegments) {\n      return new URI('');\n    }\n\n    var uri = new URI('').segment(segments);\n\n    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {\n      uri.path('/' + uri.path());\n    }\n\n    return uri.normalize();\n  };\n\n  URI.commonPath = function(one, two) {\n    var length = Math.min(one.length, two.length);\n    var pos;\n\n    // find first non-matching character\n    for (pos = 0; pos < length; pos++) {\n      if (one.charAt(pos) !== two.charAt(pos)) {\n        pos--;\n        break;\n      }\n    }\n\n    if (pos < 1) {\n      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';\n    }\n\n    // revert to last /\n    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {\n      pos = one.substring(0, pos).lastIndexOf('/');\n    }\n\n    return one.substring(0, pos + 1);\n  };\n\n  URI.withinString = function(string, callback, options) {\n    options || (options = {});\n    var _start = options.start || URI.findUri.start;\n    var _end = options.end || URI.findUri.end;\n    var _trim = options.trim || URI.findUri.trim;\n    var _parens = options.parens || URI.findUri.parens;\n    var _attributeOpen = /[a-z0-9-]=[\"']?$/i;\n\n    _start.lastIndex = 0;\n    while (true) {\n      var match = _start.exec(string);\n      if (!match) {\n        break;\n      }\n\n      var start = match.index;\n      if (options.ignoreHtml) {\n        // attribut(e=[\"']?$)\n        var attributeOpen = string.slice(Math.max(start - 3, 0), start);\n        if (attributeOpen && _attributeOpen.test(attributeOpen)) {\n          continue;\n        }\n      }\n\n      var end = start + string.slice(start).search(_end);\n      var slice = string.slice(start, end);\n      // make sure we include well balanced parens\n      var parensEnd = -1;\n      while (true) {\n        var parensMatch = _parens.exec(slice);\n        if (!parensMatch) {\n          break;\n        }\n\n        var parensMatchEnd = parensMatch.index + parensMatch[0].length;\n        parensEnd = Math.max(parensEnd, parensMatchEnd);\n      }\n\n      if (parensEnd > -1) {\n        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');\n      } else {\n        slice = slice.replace(_trim, '');\n      }\n\n      if (slice.length <= match[0].length) {\n        // the extract only contains the starting marker of a URI,\n        // e.g. \"www\" or \"http://\"\n        continue;\n      }\n\n      if (options.ignore && options.ignore.test(slice)) {\n        continue;\n      }\n\n      end = start + slice.length;\n      var result = callback(slice, start, end, string);\n      if (result === undefined) {\n        _start.lastIndex = end;\n        continue;\n      }\n\n      result = String(result);\n      string = string.slice(0, start) + result + string.slice(end);\n      _start.lastIndex = start + result.length;\n    }\n\n    _start.lastIndex = 0;\n    return string;\n  };\n\n  URI.ensureValidHostname = function(v, protocol) {\n    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)\n    // they are not part of DNS and therefore ignored by URI.js\n\n    var hasHostname = !!v; // not null and not an empty string\n    var hasProtocol = !!protocol;\n    var rejectEmptyHostname = false;\n\n    if (hasProtocol) {\n      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);\n    }\n\n    if (rejectEmptyHostname && !hasHostname) {\n      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);\n    } else if (v && v.match(URI.invalid_hostname_characters)) {\n      // test punycode\n      if (!punycode) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');\n      }\n      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_]');\n      }\n    }\n  };\n\n  URI.ensureValidPort = function (v) {\n    if (!v) {\n      return;\n    }\n\n    var port = Number(v);\n    if (isInteger(port) && (port > 0) && (port < 65536)) {\n      return;\n    }\n\n    throw new TypeError('Port \"' + v + '\" is not a valid port');\n  };\n\n  // noConflict\n  URI.noConflict = function(removeAll) {\n    if (removeAll) {\n      var unconflicted = {\n        URI: this.noConflict()\n      };\n\n      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {\n        unconflicted.URITemplate = root.URITemplate.noConflict();\n      }\n\n      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {\n        unconflicted.IPv6 = root.IPv6.noConflict();\n      }\n\n      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {\n        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();\n      }\n\n      return unconflicted;\n    } else if (root.URI === this) {\n      root.URI = _URI;\n    }\n\n    return this;\n  };\n\n  p.build = function(deferBuild) {\n    if (deferBuild === true) {\n      this._deferred_build = true;\n    } else if (deferBuild === undefined || this._deferred_build) {\n      this._string = URI.build(this._parts);\n      this._deferred_build = false;\n    }\n\n    return this;\n  };\n\n  p.clone = function() {\n    return new URI(this);\n  };\n\n  p.valueOf = p.toString = function() {\n    return this.build(false)._string;\n  };\n\n\n  function generateSimpleAccessor(_part){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        this._parts[_part] = v || null;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  function generatePrefixAccessor(_part, _key){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        if (v !== null) {\n          v = v + '';\n          if (v.charAt(0) === _key) {\n            v = v.substring(1);\n          }\n        }\n\n        this._parts[_part] = v;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  p.protocol = generateSimpleAccessor('protocol');\n  p.username = generateSimpleAccessor('username');\n  p.password = generateSimpleAccessor('password');\n  p.hostname = generateSimpleAccessor('hostname');\n  p.port = generateSimpleAccessor('port');\n  p.query = generatePrefixAccessor('query', '?');\n  p.fragment = generatePrefixAccessor('fragment', '#');\n\n  p.search = function(v, build) {\n    var t = this.query(v, build);\n    return typeof t === 'string' && t.length ? ('?' + t) : t;\n  };\n  p.hash = function(v, build) {\n    var t = this.fragment(v, build);\n    return typeof t === 'string' && t.length ? ('#' + t) : t;\n  };\n\n  p.pathname = function(v, build) {\n    if (v === undefined || v === true) {\n      var res = this._parts.path || (this._parts.hostname ? '/' : '');\n      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;\n    } else {\n      if (this._parts.urn) {\n        this._parts.path = v ? URI.recodeUrnPath(v) : '';\n      } else {\n        this._parts.path = v ? URI.recodePath(v) : '/';\n      }\n      this.build(!build);\n      return this;\n    }\n  };\n  p.path = p.pathname;\n  p.href = function(href, build) {\n    var key;\n\n    if (href === undefined) {\n      return this.toString();\n    }\n\n    this._string = '';\n    this._parts = URI._parts();\n\n    var _URI = href instanceof URI;\n    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);\n    if (href.nodeName) {\n      var attribute = URI.getDomAttribute(href);\n      href = href[attribute] || '';\n      _object = false;\n    }\n\n    // window.location is reported to be an object, but it's not the sort\n    // of object we're looking for:\n    // * location.protocol ends with a colon\n    // * location.query != object.search\n    // * location.hash != object.fragment\n    // simply serializing the unknown object should do the trick\n    // (for location, not for everything...)\n    if (!_URI && _object && href.pathname !== undefined) {\n      href = href.toString();\n    }\n\n    if (typeof href === 'string' || href instanceof String) {\n      this._parts = URI.parse(String(href), this._parts);\n    } else if (_URI || _object) {\n      var src = _URI ? href._parts : href;\n      for (key in src) {\n        if (key === 'query') { continue; }\n        if (hasOwn.call(this._parts, key)) {\n          this._parts[key] = src[key];\n        }\n      }\n      if (src.query) {\n        this.query(src.query, false);\n      }\n    } else {\n      throw new TypeError('invalid input');\n    }\n\n    this.build(!build);\n    return this;\n  };\n\n  // identification accessors\n  p.is = function(what) {\n    var ip = false;\n    var ip4 = false;\n    var ip6 = false;\n    var name = false;\n    var sld = false;\n    var idn = false;\n    var punycode = false;\n    var relative = !this._parts.urn;\n\n    if (this._parts.hostname) {\n      relative = false;\n      ip4 = URI.ip4_expression.test(this._parts.hostname);\n      ip6 = URI.ip6_expression.test(this._parts.hostname);\n      ip = ip4 || ip6;\n      name = !ip;\n      sld = name && SLD && SLD.has(this._parts.hostname);\n      idn = name && URI.idn_expression.test(this._parts.hostname);\n      punycode = name && URI.punycode_expression.test(this._parts.hostname);\n    }\n\n    switch (what.toLowerCase()) {\n      case 'relative':\n        return relative;\n\n      case 'absolute':\n        return !relative;\n\n      // hostname identification\n      case 'domain':\n      case 'name':\n        return name;\n\n      case 'sld':\n        return sld;\n\n      case 'ip':\n        return ip;\n\n      case 'ip4':\n      case 'ipv4':\n      case 'inet4':\n        return ip4;\n\n      case 'ip6':\n      case 'ipv6':\n      case 'inet6':\n        return ip6;\n\n      case 'idn':\n        return idn;\n\n      case 'url':\n        return !this._parts.urn;\n\n      case 'urn':\n        return !!this._parts.urn;\n\n      case 'punycode':\n        return punycode;\n    }\n\n    return null;\n  };\n\n  // component specific input validation\n  var _protocol = p.protocol;\n  var _port = p.port;\n  var _hostname = p.hostname;\n\n  p.protocol = function(v, build) {\n    if (v) {\n      // accept trailing ://\n      v = v.replace(/:(\\/\\/)?$/, '');\n\n      if (!v.match(URI.protocol_expression)) {\n        throw new TypeError('Protocol \"' + v + '\" contains characters other than [A-Z0-9.+-] or doesn\\'t start with [A-Z]');\n      }\n    }\n\n    return _protocol.call(this, v, build);\n  };\n  p.scheme = p.protocol;\n  p.port = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      if (v === 0) {\n        v = null;\n      }\n\n      if (v) {\n        v += '';\n        if (v.charAt(0) === ':') {\n          v = v.substring(1);\n        }\n\n        URI.ensureValidPort(v);\n      }\n    }\n    return _port.call(this, v, build);\n  };\n  p.hostname = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      var x = { preventInvalidHostname: this._parts.preventInvalidHostname };\n      var res = URI.parseHost(v, x);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      v = x.hostname;\n      if (this._parts.preventInvalidHostname) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n    }\n\n    return _hostname.call(this, v, build);\n  };\n\n  // compound accessors\n  p.origin = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var protocol = this.protocol();\n      var authority = this.authority();\n      if (!authority) {\n        return '';\n      }\n\n      return (protocol ? protocol + '://' : '') + this.authority();\n    } else {\n      var origin = URI(v);\n      this\n        .protocol(origin.protocol())\n        .authority(origin.authority())\n        .build(!build);\n      return this;\n    }\n  };\n  p.host = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildHost(this._parts) : '';\n    } else {\n      var res = URI.parseHost(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.authority = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';\n    } else {\n      var res = URI.parseAuthority(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.userinfo = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var t = URI.buildUserinfo(this._parts);\n      return t ? t.substring(0, t.length -1) : t;\n    } else {\n      if (v[v.length-1] !== '@') {\n        v += '@';\n      }\n\n      URI.parseUserinfo(v, this._parts);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.resource = function(v, build) {\n    var parts;\n\n    if (v === undefined) {\n      return this.path() + this.search() + this.hash();\n    }\n\n    parts = URI.parse(v);\n    this._parts.path = parts.path;\n    this._parts.query = parts.query;\n    this._parts.fragment = parts.fragment;\n    this.build(!build);\n    return this;\n  };\n\n  // fraction accessors\n  p.subdomain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    // convenience, return \"www\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // grab domain and add another segment\n      var end = this._parts.hostname.length - this.domain().length - 1;\n      return this._parts.hostname.substring(0, end) || '';\n    } else {\n      var e = this._parts.hostname.length - this.domain().length;\n      var sub = this._parts.hostname.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(sub));\n\n      if (v && v.charAt(v.length - 1) !== '.') {\n        v += '.';\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      if (v) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n\n      this._parts.hostname = this._parts.hostname.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.domain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // convenience, return \"example.org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // if hostname consists of 1 or 2 segments, it must be the domain\n      var t = this._parts.hostname.match(/\\./g);\n      if (t && t.length < 2) {\n        return this._parts.hostname;\n      }\n\n      // grab tld and add another segment\n      var end = this._parts.hostname.length - this.tld(build).length - 1;\n      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;\n      return this._parts.hostname.substring(end) || '';\n    } else {\n      if (!v) {\n        throw new TypeError('cannot set domain empty');\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      URI.ensureValidHostname(v, this._parts.protocol);\n\n      if (!this._parts.hostname || this.is('IP')) {\n        this._parts.hostname = v;\n      } else {\n        var replace = new RegExp(escapeRegEx(this.domain()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.tld = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // return \"org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      var pos = this._parts.hostname.lastIndexOf('.');\n      var tld = this._parts.hostname.substring(pos + 1);\n\n      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {\n        return SLD.get(this._parts.hostname) || tld;\n      }\n\n      return tld;\n    } else {\n      var replace;\n\n      if (!v) {\n        throw new TypeError('cannot set TLD empty');\n      } else if (v.match(/[^a-zA-Z0-9-]/)) {\n        if (SLD && SLD.is(v)) {\n          replace = new RegExp(escapeRegEx(this.tld()) + '$');\n          this._parts.hostname = this._parts.hostname.replace(replace, v);\n        } else {\n          throw new TypeError('TLD \"' + v + '\" contains characters other than [A-Z0-9]');\n        }\n      } else if (!this._parts.hostname || this.is('IP')) {\n        throw new ReferenceError('cannot set TLD on non-domain host');\n      } else {\n        replace = new RegExp(escapeRegEx(this.tld()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.directory = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path && !this._parts.hostname) {\n        return '';\n      }\n\n      if (this._parts.path === '/') {\n        return '/';\n      }\n\n      var end = this._parts.path.length - this.filename().length - 1;\n      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');\n\n      return v ? URI.decodePath(res) : res;\n\n    } else {\n      var e = this._parts.path.length - this.filename().length;\n      var directory = this._parts.path.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(directory));\n\n      // fully qualifier directories begin with a slash\n      if (!this.is('relative')) {\n        if (!v) {\n          v = '/';\n        }\n\n        if (v.charAt(0) !== '/') {\n          v = '/' + v;\n        }\n      }\n\n      // directories always end with a slash\n      if (v && v.charAt(v.length - 1) !== '/') {\n        v += '/';\n      }\n\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.filename = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v !== 'string') {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var pos = this._parts.path.lastIndexOf('/');\n      var res = this._parts.path.substring(pos+1);\n\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      var mutatedDirectory = false;\n\n      if (v.charAt(0) === '/') {\n        v = v.substring(1);\n      }\n\n      if (v.match(/\\.?\\//)) {\n        mutatedDirectory = true;\n      }\n\n      var replace = new RegExp(escapeRegEx(this.filename()) + '$');\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n\n      if (mutatedDirectory) {\n        this.normalizePath(build);\n      } else {\n        this.build(!build);\n      }\n\n      return this;\n    }\n  };\n  p.suffix = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var filename = this.filename();\n      var pos = filename.lastIndexOf('.');\n      var s, res;\n\n      if (pos === -1) {\n        return '';\n      }\n\n      // suffix may only contain alnum characters (yup, I made this up.)\n      s = filename.substring(pos+1);\n      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      if (v.charAt(0) === '.') {\n        v = v.substring(1);\n      }\n\n      var suffix = this.suffix();\n      var replace;\n\n      if (!suffix) {\n        if (!v) {\n          return this;\n        }\n\n        this._parts.path += '.' + URI.recodePath(v);\n      } else if (!v) {\n        replace = new RegExp(escapeRegEx('.' + suffix) + '$');\n      } else {\n        replace = new RegExp(escapeRegEx(suffix) + '$');\n      }\n\n      if (replace) {\n        v = URI.recodePath(v);\n        this._parts.path = this._parts.path.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.segment = function(segment, v, build) {\n    var separator = this._parts.urn ? ':' : '/';\n    var path = this.path();\n    var absolute = path.substring(0, 1) === '/';\n    var segments = path.split(separator);\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      throw new Error('Bad segment \"' + segment + '\", must be 0-based integer');\n    }\n\n    if (absolute) {\n      segments.shift();\n    }\n\n    if (segment < 0) {\n      // allow negative indexes to address from the end\n      segment = Math.max(segments.length + segment, 0);\n    }\n\n    if (v === undefined) {\n      /*jshint laxbreak: true */\n      return segment === undefined\n        ? segments\n        : segments[segment];\n      /*jshint laxbreak: false */\n    } else if (segment === null || segments[segment] === undefined) {\n      if (isArray(v)) {\n        segments = [];\n        // collapse empty elements within array\n        for (var i=0, l=v.length; i < l; i++) {\n          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {\n            continue;\n          }\n\n          if (segments.length && !segments[segments.length -1].length) {\n            segments.pop();\n          }\n\n          segments.push(trimSlashes(v[i]));\n        }\n      } else if (v || typeof v === 'string') {\n        v = trimSlashes(v);\n        if (segments[segments.length -1] === '') {\n          // empty trailing elements have to be overwritten\n          // to prevent results such as /foo//bar\n          segments[segments.length -1] = v;\n        } else {\n          segments.push(v);\n        }\n      }\n    } else {\n      if (v) {\n        segments[segment] = trimSlashes(v);\n      } else {\n        segments.splice(segment, 1);\n      }\n    }\n\n    if (absolute) {\n      segments.unshift('');\n    }\n\n    return this.path(segments.join(separator), build);\n  };\n  p.segmentCoded = function(segment, v, build) {\n    var segments, i, l;\n\n    if (typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (v === undefined) {\n      segments = this.segment(segment, v, build);\n      if (!isArray(segments)) {\n        segments = segments !== undefined ? URI.decode(segments) : undefined;\n      } else {\n        for (i = 0, l = segments.length; i < l; i++) {\n          segments[i] = URI.decode(segments[i]);\n        }\n      }\n\n      return segments;\n    }\n\n    if (!isArray(v)) {\n      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;\n    } else {\n      for (i = 0, l = v.length; i < l; i++) {\n        v[i] = URI.encode(v[i]);\n      }\n    }\n\n    return this.segment(segment, v, build);\n  };\n\n  // mutating query string\n  var q = p.query;\n  p.query = function(v, build) {\n    if (v === true) {\n      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    } else if (typeof v === 'function') {\n      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n      var result = v.call(this, data);\n      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else if (v !== undefined && typeof v !== 'string') {\n      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else {\n      return q.call(this, v, build);\n    }\n  };\n  p.setQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n\n    if (typeof name === 'string' || name instanceof String) {\n      data[name] = value !== undefined ? value : null;\n    } else if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          data[key] = name[key];\n        }\n      }\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.addQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.addQuery(data, name, value === undefined ? null : value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.removeQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.removeQuery(data, name, value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.hasQuery = function(name, value, withinArray) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    return URI.hasQuery(data, name, value, withinArray);\n  };\n  p.setSearch = p.setQuery;\n  p.addSearch = p.addQuery;\n  p.removeSearch = p.removeQuery;\n  p.hasSearch = p.hasQuery;\n\n  // sanitizing URLs\n  p.normalize = function() {\n    if (this._parts.urn) {\n      return this\n        .normalizeProtocol(false)\n        .normalizePath(false)\n        .normalizeQuery(false)\n        .normalizeFragment(false)\n        .build();\n    }\n\n    return this\n      .normalizeProtocol(false)\n      .normalizeHostname(false)\n      .normalizePort(false)\n      .normalizePath(false)\n      .normalizeQuery(false)\n      .normalizeFragment(false)\n      .build();\n  };\n  p.normalizeProtocol = function(build) {\n    if (typeof this._parts.protocol === 'string') {\n      this._parts.protocol = this._parts.protocol.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeHostname = function(build) {\n    if (this._parts.hostname) {\n      if (this.is('IDN') && punycode) {\n        this._parts.hostname = punycode.toASCII(this._parts.hostname);\n      } else if (this.is('IPv6') && IPv6) {\n        this._parts.hostname = IPv6.best(this._parts.hostname);\n      }\n\n      this._parts.hostname = this._parts.hostname.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePort = function(build) {\n    // remove port of it's the protocol's default\n    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {\n      this._parts.port = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePath = function(build) {\n    var _path = this._parts.path;\n    if (!_path) {\n      return this;\n    }\n\n    if (this._parts.urn) {\n      this._parts.path = URI.recodeUrnPath(this._parts.path);\n      this.build(!build);\n      return this;\n    }\n\n    if (this._parts.path === '/') {\n      return this;\n    }\n\n    _path = URI.recodePath(_path);\n\n    var _was_relative;\n    var _leadingParents = '';\n    var _parent, _pos;\n\n    // handle relative paths\n    if (_path.charAt(0) !== '/') {\n      _was_relative = true;\n      _path = '/' + _path;\n    }\n\n    // handle relative files (as opposed to directories)\n    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {\n      _path += '/';\n    }\n\n    // resolve simples\n    _path = _path\n      .replace(/(\\/(\\.\\/)+)|(\\/\\.$)/g, '/')\n      .replace(/\\/{2,}/g, '/');\n\n    // remember leading parents\n    if (_was_relative) {\n      _leadingParents = _path.substring(1).match(/^(\\.\\.\\/)+/) || '';\n      if (_leadingParents) {\n        _leadingParents = _leadingParents[0];\n      }\n    }\n\n    // resolve parents\n    while (true) {\n      _parent = _path.search(/\\/\\.\\.(\\/|$)/);\n      if (_parent === -1) {\n        // no more ../ to resolve\n        break;\n      } else if (_parent === 0) {\n        // top level cannot be relative, skip it\n        _path = _path.substring(3);\n        continue;\n      }\n\n      _pos = _path.substring(0, _parent).lastIndexOf('/');\n      if (_pos === -1) {\n        _pos = _parent;\n      }\n      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);\n    }\n\n    // revert to relative\n    if (_was_relative && this.is('relative')) {\n      _path = _leadingParents + _path.substring(1);\n    }\n\n    this._parts.path = _path;\n    this.build(!build);\n    return this;\n  };\n  p.normalizePathname = p.normalizePath;\n  p.normalizeQuery = function(build) {\n    if (typeof this._parts.query === 'string') {\n      if (!this._parts.query.length) {\n        this._parts.query = null;\n      } else {\n        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));\n      }\n\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeFragment = function(build) {\n    if (!this._parts.fragment) {\n      this._parts.fragment = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeSearch = p.normalizeQuery;\n  p.normalizeHash = p.normalizeFragment;\n\n  p.iso8859 = function() {\n    // expect unicode input, iso8859 output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = escape;\n    URI.decode = decodeURIComponent;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.unicode = function() {\n    // expect iso8859 input, unicode output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = unescape;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.readable = function() {\n    var uri = this.clone();\n    // removing username, password, because they shouldn't be displayed according to RFC 3986\n    uri.username('').password('').normalize();\n    var t = '';\n    if (uri._parts.protocol) {\n      t += uri._parts.protocol + '://';\n    }\n\n    if (uri._parts.hostname) {\n      if (uri.is('punycode') && punycode) {\n        t += punycode.toUnicode(uri._parts.hostname);\n        if (uri._parts.port) {\n          t += ':' + uri._parts.port;\n        }\n      } else {\n        t += uri.host();\n      }\n    }\n\n    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {\n      t += '/';\n    }\n\n    t += uri.path(true);\n    if (uri._parts.query) {\n      var q = '';\n      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {\n        var kv = (qp[i] || '').split('=');\n        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)\n          .replace(/&/g, '%26');\n\n        if (kv[1] !== undefined) {\n          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)\n            .replace(/&/g, '%26');\n        }\n      }\n      t += '?' + q.substring(1);\n    }\n\n    t += URI.decodeQuery(uri.hash(), true);\n    return t;\n  };\n\n  // resolving relative and absolute URLs\n  p.absoluteTo = function(base) {\n    var resolved = this.clone();\n    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];\n    var basedir, i, p;\n\n    if (this._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    if (!(base instanceof URI)) {\n      base = new URI(base);\n    }\n\n    if (resolved._parts.protocol) {\n      // Directly returns even if this._parts.hostname is empty.\n      return resolved;\n    } else {\n      resolved._parts.protocol = base._parts.protocol;\n    }\n\n    if (this._parts.hostname) {\n      return resolved;\n    }\n\n    for (i = 0; (p = properties[i]); i++) {\n      resolved._parts[p] = base._parts[p];\n    }\n\n    if (!resolved._parts.path) {\n      resolved._parts.path = base._parts.path;\n      if (!resolved._parts.query) {\n        resolved._parts.query = base._parts.query;\n      }\n    } else {\n      if (resolved._parts.path.substring(-2) === '..') {\n        resolved._parts.path += '/';\n      }\n\n      if (resolved.path().charAt(0) !== '/') {\n        basedir = base.directory();\n        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';\n        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;\n        resolved.normalizePath();\n      }\n    }\n\n    resolved.build();\n    return resolved;\n  };\n  p.relativeTo = function(base) {\n    var relative = this.clone().normalize();\n    var relativeParts, baseParts, common, relativePath, basePath;\n\n    if (relative._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    base = new URI(base).normalize();\n    relativeParts = relative._parts;\n    baseParts = base._parts;\n    relativePath = relative.path();\n    basePath = base.path();\n\n    if (relativePath.charAt(0) !== '/') {\n      throw new Error('URI is already relative');\n    }\n\n    if (basePath.charAt(0) !== '/') {\n      throw new Error('Cannot calculate a URI relative to another relative URI');\n    }\n\n    if (relativeParts.protocol === baseParts.protocol) {\n      relativeParts.protocol = null;\n    }\n\n    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {\n      return relative.build();\n    }\n\n    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {\n      return relative.build();\n    }\n\n    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {\n      relativeParts.hostname = null;\n      relativeParts.port = null;\n    } else {\n      return relative.build();\n    }\n\n    if (relativePath === basePath) {\n      relativeParts.path = '';\n      return relative.build();\n    }\n\n    // determine common sub path\n    common = URI.commonPath(relativePath, basePath);\n\n    // If the paths have nothing in common, return a relative URL with the absolute path.\n    if (!common) {\n      return relative.build();\n    }\n\n    var parents = baseParts.path\n      .substring(common.length)\n      .replace(/[^\\/]*$/, '')\n      .replace(/.*?\\//g, '../');\n\n    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';\n\n    return relative.build();\n  };\n\n  // comparing URIs\n  p.equals = function(uri) {\n    var one = this.clone();\n    var two = new URI(uri);\n    var one_map = {};\n    var two_map = {};\n    var checked = {};\n    var one_query, two_query, key;\n\n    one.normalize();\n    two.normalize();\n\n    // exact match\n    if (one.toString() === two.toString()) {\n      return true;\n    }\n\n    // extract query string\n    one_query = one.query();\n    two_query = two.query();\n    one.query('');\n    two.query('');\n\n    // definitely not equal if not even non-query parts match\n    if (one.toString() !== two.toString()) {\n      return false;\n    }\n\n    // query parameters have the same length, even if they're permuted\n    if (one_query.length !== two_query.length) {\n      return false;\n    }\n\n    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);\n    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);\n\n    for (key in one_map) {\n      if (hasOwn.call(one_map, key)) {\n        if (!isArray(one_map[key])) {\n          if (one_map[key] !== two_map[key]) {\n            return false;\n          }\n        } else if (!arraysEqual(one_map[key], two_map[key])) {\n          return false;\n        }\n\n        checked[key] = true;\n      }\n    }\n\n    for (key in two_map) {\n      if (hasOwn.call(two_map, key)) {\n        if (!checked[key]) {\n          // two contains a parameter not present in one\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  // state\n  p.preventInvalidHostname = function(v) {\n    this._parts.preventInvalidHostname = !!v;\n    return this;\n  };\n\n  p.duplicateQueryParameters = function(v) {\n    this._parts.duplicateQueryParameters = !!v;\n    return this;\n  };\n\n  p.escapeQuerySpace = function(v) {\n    this._parts.escapeQuerySpace = !!v;\n    return this;\n  };\n\n  return URI;\n}));\n", "/*jshint unused:false, scripturl:true */\nvar urls = [{\n    name: 'scheme and domain',\n    url: 'http://www.example.org',\n    _url: 'http://www.example.org/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '', // location.hash style\n      search: '', // location.search style\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'second level domain',\n    url: 'http://www.example.co.uk',\n    _url: 'http://www.example.co.uk/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.co.uk',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'www.example.co.uk',\n      origin: 'http://www.example.co.uk',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.co.uk',\n      tld: 'co.uk',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '', // location.hash style\n      search: '', // location.search style\n      host: 'www.example.co.uk',\n      hostname: 'www.example.co.uk'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: true,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  },{\n    name: 'qualified HTTP',\n    url: 'http://www.example.org/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'funky suffix',\n    url: 'http://www.example.org/some/directory/file.html-is-awesome?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/some/directory/file.html-is-awesome',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/some/directory/file.html-is-awesome',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html-is-awesome?query=string#fragment',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html-is-awesome',\n      suffix: '',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'complete URL',\n    url: 'scheme://user:pass@www.example.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass',\n      hostname: 'www.example.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@www.example.org:123',\n      origin: 'scheme://user:pass@www.example.org:123',\n      userinfo: 'user:pass',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'www.example.org:123',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'badly encoded userinfo',\n    url: 'scheme://user:pass:word@www.example.org/',\n    _url: 'scheme://user:pass%3Aword@www.example.org/',\n    parts: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass:word',\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: 'user',\n      password: 'pass:word',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'user:pass%3Aword@www.example.org',\n      origin: 'scheme://user:pass%3Aword@www.example.org',\n      userinfo: 'user:pass%3Aword',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'empty username with non-empty password',\n    url: 'scheme://:password@www.example.org/',\n    _url: 'scheme://:password@www.example.org/',\n    parts: {\n      protocol: 'scheme',\n      username: null,\n      password: 'password',\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: '',\n      password: 'password',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: ':password@www.example.org',\n      origin: 'scheme://:password@www.example.org',\n      userinfo: ':password',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'malformed email in userinfo',\n    url: 'scheme://john@doe.com:pass:word@www.example.org/',\n    _url: 'scheme://john%40doe.com:pass%3Aword@www.example.org/',\n    parts: {\n      protocol: 'scheme',\n      username: 'john@doe.com',\n      password: 'pass:word',\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'scheme',\n      username: 'john@doe.com',\n      password: 'pass:word',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'john%40doe.com:pass%3Aword@www.example.org',\n      origin: 'scheme://john%40doe.com:pass%3Aword@www.example.org',\n      userinfo: 'john%40doe.com:pass%3Aword',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'host-relative: URL',\n    url: '/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'path-relative: URL',\n    url: '../some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '../some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '../some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '../some/directory/file.html?query=string#fragment',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '../some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'missing scheme',\n    url: 'user:pass@www.example.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'user',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: 'pass@www.example.org:123/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'user',\n      username: '',\n      password: '',\n      port: '',\n      path: 'pass@www.example.org:123/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: 'pass@www.example.org:123/some/directory/file.html?query=string#fragment',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'ignoring scheme',\n    url: '://user:pass@example.org:123/some/directory/file.html?query=string#fragment',\n    _url: '//user:pass@example.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: null,\n      username: 'user',\n      password: 'pass',\n      hostname: 'example.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: '',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@example.org:123',\n      origin: 'user:pass@example.org:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'example.org:123',\n      hostname: 'example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'scheme-relative URL',\n    url: '//www.example.org/',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: 'www.example.org',\n      origin: 'www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'missing authority',\n    url: 'food:///test/file.csv',\n    parts: {\n      protocol: 'food',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/test/file.csv',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'food',\n      username: '',\n      password: '',\n      port: '',\n      path: '/test/file.csv',\n      query: '',\n      fragment: '',\n      resource: '/test/file.csv',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/test',\n      filename: 'file.csv',\n      suffix: 'csv',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv4',\n    url: 'http://user:pass@123.123.123.123:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: '123.123.123.123',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@123.123.123.123:123',\n      origin: 'http://user:pass@123.123.123.123:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '123.123.123.123:123',\n      hostname: '123.123.123.123'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: true,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6',\n    url: 'http://user:pass@fe80:0000:0000:0000:0204:61ff:fe9d:f156/some/directory/file.html?query=string#fragment',\n    _url: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156',\n      port: null,\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]',\n      origin: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '[fe80:0000:0000:0000:0204:61ff:fe9d:f156]',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 with port',\n    url: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123',\n      origin: 'http://user:pass@[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: '[fe80:0000:0000:0000:0204:61ff:fe9d:f156]:123',\n      hostname: 'fe80:0000:0000:0000:0204:61ff:fe9d:f156'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets, port, file.ext',\n    url: 'http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210',\n      port: '80',\n      path: '/index.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '80',\n      path: '/index.html',\n      query: '',\n      fragment: '',\n      resource: '/index.html',\n      authority: '[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80',\n      origin: 'http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'index.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80',\n      hostname: 'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets, file.ext',\n    url: 'http://[1080:0:0:0:8:800:200C:417A]/index.html',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '1080:0:0:0:8:800:200C:417A',\n      port: null,\n      path: '/index.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/index.html',\n      query: '',\n      fragment: '',\n      resource: '/index.html',\n      authority: '[1080:0:0:0:8:800:200C:417A]',\n      origin: 'http://[1080:0:0:0:8:800:200C:417A]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'index.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '[1080:0:0:0:8:800:200C:417A]',\n      hostname: '1080:0:0:0:8:800:200C:417A'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets ::1',\n    url: 'http://[3ffe:2a00:100:7031::1]',\n    _url: 'http://[3ffe:2a00:100:7031::1]/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '3ffe:2a00:100:7031::1',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: '[3ffe:2a00:100:7031::1]',\n      origin: 'http://[3ffe:2a00:100:7031::1]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[3ffe:2a00:100:7031::1]',\n      hostname: '3ffe:2a00:100:7031::1'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets, file',\n    url: 'http://[1080::8:800:200C:417A]/foo',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '1080::8:800:200C:417A',\n      port: null,\n      path: '/foo',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/foo',\n      query: '',\n      fragment: '',\n      resource: '/foo',\n      authority: '[1080::8:800:200C:417A]',\n      origin: 'http://[1080::8:800:200C:417A]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'foo',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[1080::8:800:200C:417A]',\n      hostname: '1080::8:800:200C:417A'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 IPv4 brackets, path',\n    url: 'http://[::192.9.5.5]/ipng',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '::192.9.5.5',\n      port: null,\n      path: '/ipng',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/ipng',\n      query: '',\n      fragment: '',\n      resource: '/ipng',\n      authority: '[::192.9.5.5]',\n      origin: 'http://[::192.9.5.5]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'ipng',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[::192.9.5.5]',\n      hostname: '::192.9.5.5'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 mask IPv4 brackets, port, file.ext',\n    url: 'http://[::FFFF:129.144.52.38]:80/index.html',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '::FFFF:129.144.52.38',\n      port: '80',\n      path: '/index.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '80',\n      path: '/index.html',\n      query: '',\n      fragment: '',\n      resource: '/index.html',\n      authority: '[::FFFF:129.144.52.38]:80',\n      origin: 'http://[::FFFF:129.144.52.38]:80',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: 'index.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '[::FFFF:129.144.52.38]:80',\n      hostname: '::FFFF:129.144.52.38'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IPv6 brackets',\n    url: 'http://[2010:836B:4179::836B:4179]',\n    _url: 'http://[2010:836B:4179::836B:4179]/',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: '2010:836B:4179::836B:4179',\n      port: null,\n      path: '/',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/',\n      query: '',\n      fragment: '',\n      resource: '/',\n      authority: '[2010:836B:4179::836B:4179]',\n      origin: 'http://[2010:836B:4179::836B:4179]',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '[2010:836B:4179::836B:4179]',\n      hostname: '2010:836B:4179::836B:4179'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: true,\n      ip4: false,\n      ip6: true,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    // https://github.com/medialize/URI.js/issues/347\n    name: 'Underscore in domain',\n    url: 'http://user:pass@some_where.exa_mple.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'some_where.exa_mple.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@some_where.exa_mple.org:123',\n      origin: 'http://user:pass@some_where.exa_mple.org:123',\n      userinfo: 'user:pass',\n      subdomain: 'some_where',\n      domain: 'exa_mple.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'some_where.exa_mple.org:123',\n      hostname: 'some_where.exa_mple.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'IDN (punycode)',\n    url: 'http://user:pass@xn--exmple-cua.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'xn--exmple-cua.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@xn--exmple-cua.org:123',\n      origin: 'http://user:pass@xn--exmple-cua.org:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: 'xn--exmple-cua.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'xn--exmple-cua.org:123',\n      hostname: 'xn--exmple-cua.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: true\n    }\n  }, {\n    name: 'IDN',\n    url: 'http://user:pass@ex\u00e4mple.org:123/some/directory/file.html?query=string#fragment',\n    parts: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      hostname: 'ex\u00e4mple.org',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment'\n    },\n    accessors: {\n      protocol: 'http',\n      username: 'user',\n      password: 'pass',\n      port: '123',\n      path: '/some/directory/file.html',\n      query: 'query=string',\n      fragment: 'fragment',\n      resource: '/some/directory/file.html?query=string#fragment',\n      authority: 'user:pass@ex\u00e4mple.org:123',\n      origin: 'http://user:pass@ex\u00e4mple.org:123',\n      userinfo: 'user:pass',\n      subdomain: '',\n      domain: 'ex\u00e4mple.org',\n      tld: 'org',\n      directory: '/some/directory',\n      filename: 'file.html',\n      suffix: 'html',\n      hash: '#fragment',\n      search: '?query=string',\n      host: 'ex\u00e4mple.org:123',\n      hostname: 'ex\u00e4mple.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: true,\n      punycode: false\n    }\n  }, {\n    name: 'file://',\n    url: 'file:///foo/bar/baz.html',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/foo/bar/baz.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/foo/bar/baz.html',\n      query: '',\n      fragment: '',\n      resource: '/foo/bar/baz.html',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/foo/bar',\n      filename: 'baz.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file://example.org:123',\n    url: 'file://example.org:123/foo/bar/baz.html',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: 'example.org',\n      port: '123',\n      path: '/foo/bar/baz.html',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '123',\n      path: '/foo/bar/baz.html',\n      query: '',\n      fragment: '',\n      resource: '/foo/bar/baz.html',\n      authority: 'example.org:123',\n      origin: 'file://example.org:123',\n      userinfo: '',\n      subdomain: '',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/foo/bar',\n      filename: 'baz.html',\n      suffix: 'html',\n      hash: '',\n      search: '',\n      host: 'example.org:123',\n      hostname: 'example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file:// Windows-Drive-Letter',\n    url: 'file:///C:/WINDOWS/foo.txt',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/C:/WINDOWS/foo.txt',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/C:/WINDOWS/foo.txt',\n      query: '',\n      fragment: '',\n      resource: '/C:/WINDOWS/foo.txt',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/C:/WINDOWS',\n      filename: 'foo.txt',\n      suffix: 'txt',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file://example.org/ Windows-Drive-Letter',\n    url: 'file://example.org/C:/WINDOWS/foo.txt',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: 'example.org',\n      port: null,\n      path: '/C:/WINDOWS/foo.txt',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/C:/WINDOWS/foo.txt',\n      query: '',\n      fragment: '',\n      resource: '/C:/WINDOWS/foo.txt',\n      authority: 'example.org',\n      origin: 'file://example.org',\n      userinfo: '',\n      subdomain: '',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/C:/WINDOWS',\n      filename: 'foo.txt',\n      suffix: 'txt',\n      hash: '',\n      search: '',\n      host: 'example.org',\n      hostname: 'example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'file://localhost/ Windows-Drive-Letter with pipe',\n    url: 'file://localhost/C|/WINDOWS/foo.txt',\n    parts: {\n      protocol: 'file',\n      username: null,\n      password: null,\n      hostname: 'localhost',\n      port: null,\n      path: '/C|/WINDOWS/foo.txt',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'file',\n      username: '',\n      password: '',\n      port: '',\n      path: '/C|/WINDOWS/foo.txt',\n      query: '',\n      fragment: '',\n      resource: '/C|/WINDOWS/foo.txt',\n      authority: 'localhost',\n      origin: 'file://localhost',\n      userinfo: '',\n      subdomain: '',\n      domain: 'localhost',\n      tld: 'localhost',\n      directory: '/C|/WINDOWS',\n      filename: 'foo.txt',\n      suffix: 'txt',\n      hash: '',\n      search: '',\n      host: 'localhost',\n      hostname: 'localhost'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'Path containing @',\n    url: 'http://www.example.org/@foobar',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'www.example.org',\n      port: null,\n      path: '/@foobar',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/@foobar',\n      query: '',\n      fragment: '',\n      resource: '/@foobar',\n      authority: 'www.example.org',\n      origin: 'http://www.example.org',\n      userinfo: '',\n      subdomain: 'www',\n      domain: 'example.org',\n      tld: 'org',\n      directory: '/',\n      filename: '@foobar',\n      suffix: '',\n      hash: '', // location.hash style\n      search: '', // location.search style\n      host: 'www.example.org',\n      hostname: 'www.example.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'mailto:',\n    url: 'mailto:hello@example.org?subject=hello',\n    _url: 'mailto:hello@example.org?subject=hello',\n    parts: {\n      protocol: 'mailto',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: 'hello@example.org',\n      query: 'subject=hello',\n      fragment: null\n    },\n    accessors: {\n      protocol: 'mailto',\n      username: '',\n      password: '',\n      port: '',\n      path: 'hello@example.org',\n      query: 'subject=hello',\n      fragment: '',\n      resource: 'hello@example.org?subject=hello',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '?subject=hello',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'magnet:',\n    url: 'magnet:?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n    _url: 'magnet:?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n    parts: {\n      protocol: 'magnet',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '',\n      query: 'xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      fragment: null\n    },\n    accessors: {\n      protocol: 'magnet',\n      username: '',\n      password: '',\n      port: '',\n      path: '',\n      query: 'xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      fragment: '',\n      resource: '?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '?xt=urn:btih:f8c020dac7a083defda1769a1196a13facc38ef6&dn=Linux+64x+server+11.10+Pt+Pt&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'javascript:',\n    url: 'javascript:alert(\"hello world\");',\n    _url: 'javascript:alert(\"hello world\");',\n    parts: {\n      protocol: 'javascript',\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: 'alert(\"hello world\");',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'javascript',\n      username: '',\n      password: '',\n      port: '',\n      path: 'alert(\"hello world\");',\n      query: '',\n      fragment: '',\n      resource: 'alert(\"hello world\");',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '',\n      filename: '',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: true,\n      url: false,\n      relative: false,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'colon in path',\n    url: 'http://en.wikipedia.org/wiki/Help:IPA',\n    _url: 'http://en.wikipedia.org/wiki/Help:IPA',\n    parts: {\n      protocol: 'http',\n      username: null,\n      password: null,\n      hostname: 'en.wikipedia.org',\n      port: null,\n      path: '/wiki/Help:IPA',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: 'http',\n      username: '',\n      password: '',\n      port: '',\n      path: '/wiki/Help:IPA',\n      query: '',\n      fragment: '',\n      resource: '/wiki/Help:IPA',\n      authority: 'en.wikipedia.org',\n      origin: 'http://en.wikipedia.org',\n      userinfo: '',\n      subdomain: 'en',\n      domain: 'wikipedia.org',\n      tld: 'org',\n      directory: '/wiki',\n      filename: 'Help:IPA',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: 'en.wikipedia.org',\n      hostname: 'en.wikipedia.org'\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: false,\n      name: true,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'colon in path without protocol',\n    url: '/wiki/Help:IPA',\n    _url: '/wiki/Help:IPA',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/wiki/Help:IPA',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/wiki/Help:IPA',\n      query: '',\n      fragment: '',\n      resource: '/wiki/Help:IPA',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/wiki',\n      filename: 'Help:IPA',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n    name: 'colon dash dash in path without protocol',\n    url: '/foo/xy://bar',\n    _url: '/foo/xy://bar',\n    parts: {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      port: null,\n      path: '/foo/xy://bar',\n      query: null,\n      fragment: null\n    },\n    accessors: {\n      protocol: '',\n      username: '',\n      password: '',\n      port: '',\n      path: '/foo/xy://bar',\n      query: '',\n      fragment: '',\n      resource: '/foo/xy://bar',\n      authority: '',\n      origin: '',\n      userinfo: '',\n      subdomain: '',\n      domain: '',\n      tld: '',\n      directory: '/foo/xy:/', // sanitized empty directory!\n      filename: 'bar',\n      suffix: '',\n      hash: '',\n      search: '',\n      host: '',\n      hostname: ''\n    },\n    is: {\n      urn: false,\n      url: true,\n      relative: true,\n      name: false,\n      sld: false,\n      ip: false,\n      ip4: false,\n      ip6: false,\n      idn: false,\n      punycode: false\n    }\n  }, {\n      name: 'colon in path',\n      url: 'http://www.example.org:8080/hello:world',\n      parts: {\n        protocol: 'http',\n        username: null,\n        password: null,\n        hostname: 'www.example.org',\n        port: '8080',\n        path: '/hello:world',\n        query: null,\n        fragment: null\n      },\n      accessors: {\n        protocol: 'http',\n        username: '',\n        password: '',\n        port: '8080',\n        path: '/hello:world',\n        query: '',\n        fragment: '',\n        resource: '/hello:world',\n        authority: 'www.example.org:8080',\n        origin: 'http://www.example.org:8080',\n        userinfo: '',\n        subdomain: 'www',\n        domain: 'example.org',\n        tld: 'org',\n        directory: '/',\n        filename: 'hello:world',\n        suffix: '',\n        hash: '', // location.hash style\n        search: '', // location.search style\n        host: 'www.example.org:8080',\n        hostname: 'www.example.org'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }, {\n      name: 'backslashes',\n      url: 'http://i.xss.com\\\\www.example.org/some/directory/file.html?query=string#fragment',\n      _url: 'http://i.xss.com/www.example.org/some/directory/file.html?query=string#fragment',\n      parts: {\n        protocol: 'http',\n        username: null,\n        password: null,\n        hostname: 'i.xss.com',\n        port: null,\n        path: '/www.example.org/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment'\n      },\n      accessors: {\n        protocol: 'http',\n        username: '',\n        password: '',\n        port: '',\n        path: '/www.example.org/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment',\n        resource: '/www.example.org/some/directory/file.html?query=string#fragment',\n        authority: 'i.xss.com',\n        origin: 'http://i.xss.com',\n        userinfo: '',\n        subdomain: 'i',\n        domain: 'xss.com',\n        tld: 'com',\n        directory: '/www.example.org/some/directory',\n        filename: 'file.html',\n        suffix: 'html',\n        hash: '#fragment',\n        search: '?query=string',\n        host: 'i.xss.com',\n        hostname: 'i.xss.com'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }, {\n      name: 'backslashes authority',\n      url: 'https://attacker.com\\\\@example.com/some/directory/file.html?query=string#fragment',\n      _url: 'https://attacker.com/@example.com/some/directory/file.html?query=string#fragment',\n      parts: {\n        protocol: 'https',\n        username: null,\n        password: null,\n        hostname: 'attacker.com',\n        port: null,\n        path: '/@example.com/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment'\n      },\n      accessors: {\n        protocol: 'https',\n        username: '',\n        password: '',\n        port: '',\n        path: '/@example.com/some/directory/file.html',\n        query: 'query=string',\n        fragment: 'fragment',\n        resource: '/@example.com/some/directory/file.html?query=string#fragment',\n        authority: 'attacker.com',\n        origin: 'https://attacker.com',\n        userinfo: '',\n        subdomain: '',\n        domain: 'attacker.com',\n        tld: 'com',\n        directory: '/@example.com/some/directory',\n        filename: 'file.html',\n        suffix: 'html',\n        hash: '#fragment',\n        search: '?query=string',\n        host: 'attacker.com',\n        hostname: 'attacker.com'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }, {\n      name: 'backslashes authority, no ending slash',\n      url: 'https://attacker.com\\\\@example.com',\n      _url: 'https://attacker.com/@example.com',\n      parts: {\n        protocol: 'https',\n        username: null,\n        password: null,\n        hostname: 'attacker.com',\n        port: null,\n        path: '/@example.com',\n        query: null,\n        fragment: null\n      },\n      accessors: {\n        protocol: 'https',\n        username: '',\n        password: '',\n        port: '',\n        path: '/@example.com',\n        query: '',\n        fragment: '',\n        resource: '/@example.com',\n        authority: 'attacker.com',\n        origin: 'https://attacker.com',\n        userinfo: '',\n        subdomain: '',\n        domain: 'attacker.com',\n        tld: 'com',\n        directory: '/',\n        filename: '@example.com',\n        suffix: 'com',\n        hash: '',\n        search: '',\n        host: 'attacker.com',\n        hostname: 'attacker.com'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }, {\n      name: 'backslashes protocol',\n      url: 'https:/\\\\attacker.com',\n      _url: 'https://attacker.com/',\n      parts: {\n        protocol: 'https',\n        username: null,\n        password: null,\n        hostname: 'attacker.com',\n        port: null,\n        path: '/',\n        query: null,\n        fragment: null\n      },\n      accessors: {\n        protocol: 'https',\n        username: '',\n        password: '',\n        port: '',\n        path: '/',\n        query: '',\n        fragment: '',\n        resource: '/',\n        authority: 'attacker.com',\n        origin: 'https://attacker.com',\n        userinfo: '',\n        subdomain: '',\n        domain: 'attacker.com',\n        tld: 'com',\n        directory: '/',\n        filename: '',\n        suffix: '',\n        hash: '',\n        search: '',\n        host: 'attacker.com',\n        hostname: 'attacker.com'\n      },\n      is: {\n        urn: false,\n        url: true,\n        relative: false,\n        name: true,\n        sld: false,\n        ip: false,\n        ip4: false,\n        ip6: false,\n        idn: false,\n        punycode: false\n      }\n    }\n];\n\n"], "filenames": ["src/URI.js", "test/urls.js"], "buggy_code_start_loc": [529, 2084], "buggy_code_end_loc": [530, 2084], "fixing_code_start_loc": [529, 2085], "fixing_code_end_loc": [530, 2134], "type": "NVD-CWE-noinfo", "message": "URI.js (aka urijs) before 1.19.6 mishandles certain uses of backslash such as http:\\/ and interprets the URI as a relative path.", "other": {"cve": {"id": "CVE-2021-27516", "sourceIdentifier": "cve@mitre.org", "published": "2021-02-22T00:15:12.620", "lastModified": "2022-11-29T15:01:10.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "URI.js (aka urijs) before 1.19.6 mishandles certain uses of backslash such as http:\\/ and interprets the URI as a relative path."}, {"lang": "es", "value": "URI.js (tambi\u00e9n se conoce como urijs) versiones anteriores a 1.19.6, maneja inapropiadamente determinados usos de barra invertida como http:\\/ e interpreta el URI como una ruta relativa"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:uri.js_project:uri.js:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.19.6", "matchCriteriaId": "36DFF109-A827-4D9A-9790-55C2564E83EB"}]}]}], "references": [{"url": "https://advisory.checkmarx.net/advisory/CX-2021-4305", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/medialize/URI.js/commit/a1ad8bcbc39a4d136d7e252e76e957f3ece70839", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/medialize/URI.js/releases/tag/v1.19.6", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/medialize/URI.js/commit/a1ad8bcbc39a4d136d7e252e76e957f3ece70839"}}