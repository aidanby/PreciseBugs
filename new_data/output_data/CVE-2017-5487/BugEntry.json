{"buggy_code": ["<?php\n/**\n * REST API: WP_REST_Users_Controller class\n *\n * @package WordPress\n * @subpackage REST_API\n * @since 4.7.0\n */\n\n/**\n * Core class used to manage users via the REST API.\n *\n * @since 4.7.0\n *\n * @see WP_REST_Controller\n */\nclass WP_REST_Users_Controller extends WP_REST_Controller {\n\n\t/**\n\t * Instance of a user meta fields object.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t * @var WP_REST_User_Meta_Fields\n\t */\n\tprotected $meta;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t */\n\tpublic function __construct() {\n\t\t$this->namespace = 'wp/v2';\n\t\t$this->rest_base = 'users';\n\n\t\t$this->meta = new WP_REST_User_Meta_Fields();\n\t}\n\n\t/**\n\t * Registers the routes for the objects of the controller.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @see register_rest_route()\n\t */\n\tpublic function register_routes() {\n\n\t\tregister_rest_route( $this->namespace, '/' . $this->rest_base, array(\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t'callback'            => array( $this, 'get_items' ),\n\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t),\n\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t) );\n\n\t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<id>[\\d]+)', array(\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'context' => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::EDITABLE,\n\t\t\t\t'callback'            => array( $this, 'update_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'update_item_permissions_check' ),\n\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t'callback'            => array( $this, 'delete_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'delete_item_permissions_check' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'force'    => array(\n\t\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t\t'default'     => false,\n\t\t\t\t\t\t'description' => __( 'Required to be true, as users do not support trashing.' ),\n\t\t\t\t\t),\n\t\t\t\t\t'reassign' => array(\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t\t'description' => __( 'Reassign the deleted user\\'s posts and links to this user ID.' ),\n\t\t\t\t\t\t'required'    => true,\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_reassign' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t) );\n\n\t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/me', array(\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t'callback'            => array( $this, 'get_current_item' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'context' => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::EDITABLE,\n\t\t\t\t'callback'            => array( $this, 'update_current_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'update_current_item_permissions_check' ),\n\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t'callback'            => array( $this, 'delete_current_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'delete_current_item_permissions_check' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'force'    => array(\n\t\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t\t'default'     => false,\n\t\t\t\t\t\t'description' => __( 'Required to be true, as users do not support trashing.' ),\n\t\t\t\t\t),\n\t\t\t\t\t'reassign' => array(\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t\t'description' => __( 'Reassign the deleted user\\'s posts and links to this user ID.' ),\n\t\t\t\t\t\t'required'    => true,\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_reassign' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t));\n\t}\n\n\t/**\n\t * Checks for a valid value for the reassign parameter when deleting users.\n\t *\n\t * The value can be an integer, 'false', false, or ''.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param int|bool        $value   The value passed to the reassign parameter.\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @param string          $param   The parameter that is being sanitized.\n\t *\n\t * @return int|bool|WP_Error\n\t */\n\tpublic function check_reassign( $value, $request, $param ) {\n\t\tif ( is_numeric( $value ) ) {\n\t\t\treturn $value;\n\t\t}\n\n\t\tif ( empty( $value ) || false === $value || 'false' === $value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn new WP_Error( 'rest_invalid_param', __( 'Invalid user parameter(s).' ), array( 'status' => 400 ) );\n\t}\n\n\t/**\n\t * Permissions check for getting all users.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has read access, otherwise WP_Error object.\n\t */\n\tpublic function get_items_permissions_check( $request ) {\n\t\t// Check if roles is specified in GET request and if user can list users.\n\t\tif ( ! empty( $request['roles'] ) && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to filter users by role.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\tif ( 'edit' === $request['context'] && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_forbidden_context', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\tif ( in_array( $request['orderby'], array( 'email', 'registered_date' ), true ) && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_forbidden_orderby', __( 'Sorry, you are not allowed to order users by this parameter.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Retrieves all users.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_items( $request ) {\n\n\t\t// Retrieve the list of registered collection query parameters.\n\t\t$registered = $this->get_collection_params();\n\n\t\t/*\n\t\t * This array defines mappings between public API query parameters whose\n\t\t * values are accepted as-passed, and their internal WP_Query parameter\n\t\t * name equivalents (some are the same). Only values which are also\n\t\t * present in $registered will be set.\n\t\t */\n\t\t$parameter_mappings = array(\n\t\t\t'exclude'  => 'exclude',\n\t\t\t'include'  => 'include',\n\t\t\t'order'    => 'order',\n\t\t\t'per_page' => 'number',\n\t\t\t'search'   => 'search',\n\t\t\t'roles'    => 'role__in',\n\t\t);\n\n\t\t$prepared_args = array();\n\n\t\t/*\n\t\t * For each known parameter which is both registered and present in the request,\n\t\t * set the parameter's value on the query $prepared_args.\n\t\t */\n\t\tforeach ( $parameter_mappings as $api_param => $wp_param ) {\n\t\t\tif ( isset( $registered[ $api_param ], $request[ $api_param ] ) ) {\n\t\t\t\t$prepared_args[ $wp_param ] = $request[ $api_param ];\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $registered['offset'] ) && ! empty( $request['offset'] ) ) {\n\t\t\t$prepared_args['offset'] = $request['offset'];\n\t\t} else {\n\t\t\t$prepared_args['offset']  = ( $request['page'] - 1 ) * $prepared_args['number'];\n\t\t}\n\n\t\tif ( isset( $registered['orderby'] ) ) {\n\t\t\t$orderby_possibles = array(\n\t\t\t\t'id'              => 'ID',\n\t\t\t\t'include'         => 'include',\n\t\t\t\t'name'            => 'display_name',\n\t\t\t\t'registered_date' => 'registered',\n\t\t\t\t'slug'            => 'user_nicename',\n\t\t\t\t'email'           => 'user_email',\n\t\t\t\t'url'             => 'user_url',\n\t\t\t);\n\t\t\t$prepared_args['orderby'] = $orderby_possibles[ $request['orderby'] ];\n\t\t}\n\n\t\tif ( ! current_user_can( 'list_users' ) ) {\n\t\t\t$prepared_args['has_published_posts'] = true;\n\t\t}\n\n\t\tif ( ! empty( $prepared_args['search'] ) ) {\n\t\t\t$prepared_args['search'] = '*' . $prepared_args['search'] . '*';\n\t\t}\n\n\t\tif ( isset( $registered['slug'] ) && ! empty( $request['slug'] ) ) {\n\t\t\t$prepared_args['search'] = $request['slug'];\n\t\t\t$prepared_args['search_columns'] = array( 'user_nicename' );\n\t\t}\n\n\t\t/**\n\t\t * Filters WP_User_Query arguments when querying users via the REST API.\n\t\t *\n\t\t * @link https://developer.wordpress.org/reference/classes/wp_user_query/\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param array           $prepared_args Array of arguments for WP_User_Query.\n\t\t * @param WP_REST_Request $request       The current request.\n\t\t */\n\t\t$prepared_args = apply_filters( 'rest_user_query', $prepared_args, $request );\n\n\t\t$query = new WP_User_Query( $prepared_args );\n\n\t\t$users = array();\n\n\t\tforeach ( $query->results as $user ) {\n\t\t\t$data = $this->prepare_item_for_response( $user, $request );\n\t\t\t$users[] = $this->prepare_response_for_collection( $data );\n\t\t}\n\n\t\t$response = rest_ensure_response( $users );\n\n\t\t// Store pagination values for headers then unset for count query.\n\t\t$per_page = (int) $prepared_args['number'];\n\t\t$page     = ceil( ( ( (int) $prepared_args['offset'] ) / $per_page ) + 1 );\n\n\t\t$prepared_args['fields'] = 'ID';\n\n\t\t$total_users = $query->get_total();\n\n\t\tif ( $total_users < 1 ) {\n\t\t\t// Out-of-bounds, run the query again without LIMIT for total count.\n\t\t\tunset( $prepared_args['number'], $prepared_args['offset'] );\n\t\t\t$count_query = new WP_User_Query( $prepared_args );\n\t\t\t$total_users = $count_query->get_total();\n\t\t}\n\n\t\t$response->header( 'X-WP-Total', (int) $total_users );\n\n\t\t$max_pages = ceil( $total_users / $per_page );\n\n\t\t$response->header( 'X-WP-TotalPages', (int) $max_pages );\n\n\t\t$base = add_query_arg( $request->get_query_params(), rest_url( sprintf( '%s/%s', $this->namespace, $this->rest_base ) ) );\n\t\tif ( $page > 1 ) {\n\t\t\t$prev_page = $page - 1;\n\n\t\t\tif ( $prev_page > $max_pages ) {\n\t\t\t\t$prev_page = $max_pages;\n\t\t\t}\n\n\t\t\t$prev_link = add_query_arg( 'page', $prev_page, $base );\n\t\t\t$response->link_header( 'prev', $prev_link );\n\t\t}\n\t\tif ( $max_pages > $page ) {\n\t\t\t$next_page = $page + 1;\n\t\t\t$next_link = add_query_arg( 'page', $next_page, $base );\n\n\t\t\t$response->link_header( 'next', $next_link );\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to read a user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has read access for the item, otherwise WP_Error object.\n\t */\n\tpublic function get_item_permissions_check( $request ) {\n\n\t\t$id = (int) $request['id'];\n\t\t$user = get_userdata( $id );\n\t\t$types = get_post_types( array( 'show_in_rest' => true ), 'names' );\n\n\t\tif ( empty( $id ) || empty( $user->ID ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\tif ( get_current_user_id() === $id ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( 'edit' === $request['context'] && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t} elseif ( ! count_user_posts( $id, $types ) && ! current_user_can( 'edit_user', $id ) && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Retrieves a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_item( $request ) {\n\t\t$id   = (int) $request['id'];\n\t\t$user = get_userdata( $id );\n\n\t\tif ( empty( $id ) || empty( $user->ID ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\t$user = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $user );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Retrieves the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_current_item( $request ) {\n\t\t$current_user_id = get_current_user_id();\n\n\t\tif ( empty( $current_user_id ) ) {\n\t\t\treturn new WP_Error( 'rest_not_logged_in', __( 'You are not currently logged in.' ), array( 'status' => 401 ) );\n\t\t}\n\n\t\t$user     = wp_get_current_user();\n\t\t$response = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $response );\n\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access create users.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.\n\t */\n\tpublic function create_item_permissions_check( $request ) {\n\n\t\tif ( ! current_user_can( 'create_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_cannot_create_user', __( 'Sorry, you are not allowed to create new users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function create_item( $request ) {\n\t\tif ( ! empty( $request['id'] ) ) {\n\t\t\treturn new WP_Error( 'rest_user_exists', __( 'Cannot create existing user.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\t$schema = $this->get_item_schema();\n\n\t\tif ( ! empty( $request['roles'] ) && ! empty( $schema['properties']['roles'] ) ) {\n\t\t\t$check_permission = $this->check_role_update( $request['id'], $request['roles'] );\n\n\t\t\tif ( is_wp_error( $check_permission ) ) {\n\t\t\t\treturn $check_permission;\n\t\t\t}\n\t\t}\n\n\t\t$user = $this->prepare_item_for_database( $request );\n\n\t\tif ( is_multisite() ) {\n\t\t\t$ret = wpmu_validate_user_signup( $user->user_login, $user->user_email );\n\n\t\t\tif ( is_wp_error( $ret['errors'] ) && ! empty( $ret['errors']->errors ) ) {\n\t\t\t\t$error = new WP_Error( 'rest_invalid_param', __( 'Invalid user parameter(s).' ), array( 'status' => 400 ) );\n\t\t\t\tforeach ( $ret['errors']->errors as $code => $messages ) {\n\t\t\t\t\tforeach ( $messages as $message ) {\n\t\t\t\t\t\t$error->add( $code, $message );\n\t\t\t\t\t}\n\t\t\t\t\tif ( $error_data = $error->get_error_data( $code ) ) {\n\t\t\t\t\t\t$error->add_data( $error_data, $code );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $error;\n\t\t\t}\n\t\t}\n\n\t\tif ( is_multisite() ) {\n\t\t\t$user_id = wpmu_create_user( $user->user_login, $user->user_pass, $user->user_email );\n\n\t\t\tif ( ! $user_id ) {\n\t\t\t\treturn new WP_Error( 'rest_user_create', __( 'Error creating new user.' ), array( 'status' => 500 ) );\n\t\t\t}\n\n\t\t\t$user->ID = $user_id;\n\t\t\t$user_id  = wp_update_user( wp_slash( (array) $user ) );\n\n\t\t\tif ( is_wp_error( $user_id ) ) {\n\t\t\t\treturn $user_id;\n\t\t\t}\n\n\t\t\tadd_user_to_blog( get_site()->id, $user_id, '' );\n\t\t} else {\n\t\t\t$user_id = wp_insert_user( wp_slash( (array) $user ) );\n\n\t\t\tif ( is_wp_error( $user_id ) ) {\n\t\t\t\treturn $user_id;\n\t\t\t}\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\n\t\t/**\n\t\t * Fires immediately after a user is created or updated via the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param WP_User         $user     Inserted or updated user object.\n\t\t * @param WP_REST_Request $request  Request object.\n\t\t * @param bool            $creating True when creating a user, false when updating.\n\t\t */\n\t\tdo_action( 'rest_insert_user', $user, $request, true );\n\n\t\tif ( ! empty( $request['roles'] ) && ! empty( $schema['properties']['roles'] ) ) {\n\t\t\tarray_map( array( $user, 'add_role' ), $request['roles'] );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['meta'] ) && isset( $request['meta'] ) ) {\n\t\t\t$meta_update = $this->meta->update_value( $request['meta'], $user_id );\n\n\t\t\tif ( is_wp_error( $meta_update ) ) {\n\t\t\t\treturn $meta_update;\n\t\t\t}\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\t\t$fields_update = $this->update_additional_fields_for_object( $user, $request );\n\n\t\tif ( is_wp_error( $fields_update ) ) {\n\t\t\treturn $fields_update;\n\t\t}\n\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$response = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $response );\n\n\t\t$response->set_status( 201 );\n\t\t$response->header( 'Location', rest_url( sprintf( '%s/%s/%d', $this->namespace, $this->rest_base, $user_id ) ) );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to update a user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.\n\t */\n\tpublic function update_item_permissions_check( $request ) {\n\n\t\t$id = (int) $request['id'];\n\n\t\tif ( ! current_user_can( 'edit_user', $id ) ) {\n\t\t\treturn new WP_Error( 'rest_cannot_edit', __( 'Sorry, you are not allowed to edit this user.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\tif ( ! empty( $request['roles'] ) && ! current_user_can( 'edit_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_cannot_edit_roles', __( 'Sorry, you are not allowed to edit roles of this user.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Updates a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function update_item( $request ) {\n\t\t$id   = (int) $request['id'];\n\t\t$user = get_userdata( $id );\n\n\t\tif ( ! $user ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\tif ( email_exists( $request['email'] ) && $request['email'] !== $user->user_email ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_email', __( 'Invalid email address.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( ! empty( $request['username'] ) && $request['username'] !== $user->user_login ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_argument', __( \"Username isn't editable.\" ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( ! empty( $request['slug'] ) && $request['slug'] !== $user->user_nicename && get_user_by( 'slug', $request['slug'] ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_slug', __( 'Invalid slug.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( ! empty( $request['roles'] ) ) {\n\t\t\t$check_permission = $this->check_role_update( $id, $request['roles'] );\n\n\t\t\tif ( is_wp_error( $check_permission ) ) {\n\t\t\t\treturn $check_permission;\n\t\t\t}\n\t\t}\n\n\t\t$user = $this->prepare_item_for_database( $request );\n\n\t\t// Ensure we're operating on the same user we already checked.\n\t\t$user->ID = $id;\n\n\t\t$user_id = wp_update_user( wp_slash( (array) $user ) );\n\n\t\tif ( is_wp_error( $user_id ) ) {\n\t\t\treturn $user_id;\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\n\t\t/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php */\n\t\tdo_action( 'rest_insert_user', $user, $request, false );\n\n\t\tif ( is_multisite() && ! is_user_member_of_blog( $id ) ) {\n\t\t\tadd_user_to_blog( get_current_blog_id(), $id, '' );\n\t\t}\n\n\t\tif ( ! empty( $request['roles'] ) ) {\n\t\t\tarray_map( array( $user, 'add_role' ), $request['roles'] );\n\t\t}\n\n\t\t$schema = $this->get_item_schema();\n\n\t\tif ( ! empty( $schema['properties']['meta'] ) && isset( $request['meta'] ) ) {\n\t\t\t$meta_update = $this->meta->update_value( $request['meta'], $id );\n\n\t\t\tif ( is_wp_error( $meta_update ) ) {\n\t\t\t\treturn $meta_update;\n\t\t\t}\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\t\t$fields_update = $this->update_additional_fields_for_object( $user, $request );\n\n\t\tif ( is_wp_error( $fields_update ) ) {\n\t\t\treturn $fields_update;\n\t\t}\n\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$response = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $response );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to update the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.\n\t */\n\tpublic function update_current_item_permissions_check( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->update_item_permissions_check( $request );\n\t}\n\n\t/**\n\t * Updates the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tfunction update_current_item( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->update_item( $request );\n\t}\n\n\t/**\n\t * Checks if a given request has access delete a user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.\n\t */\n\tpublic function delete_item_permissions_check( $request ) {\n\n\t\t$id = (int) $request['id'];\n\n\t\tif ( ! current_user_can( 'delete_user', $id ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_delete', __( 'Sorry, you are not allowed to delete this user.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Deletes a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function delete_item( $request ) {\n\t\t// We don't support delete requests in multisite.\n\t\tif ( is_multisite() ) {\n\t\t\treturn new WP_Error( 'rest_cannot_delete', __( 'The user cannot be deleted.' ), array( 'status' => 501 ) );\n\t\t}\n\n\t\t$id       = (int) $request['id'];\n\t\t$reassign = false === $request['reassign'] ? null : absint( $request['reassign'] );\n\t\t$force    = isset( $request['force'] ) ? (bool) $request['force'] : false;\n\n\t\t// We don't support trashing for users.\n\t\tif ( ! $force ) {\n\t\t\treturn new WP_Error( 'rest_trash_not_supported', __( 'Users do not support trashing. Set force=true to delete.' ), array( 'status' => 501 ) );\n\t\t}\n\n\t\t$user = get_userdata( $id );\n\n\t\tif ( ! $user ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\tif ( ! empty( $reassign ) ) {\n\t\t\tif ( $reassign === $id || ! get_userdata( $reassign ) ) {\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_reassign', __( 'Invalid user ID for reassignment.' ), array( 'status' => 400 ) );\n\t\t\t}\n\t\t}\n\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$previous = $this->prepare_item_for_response( $user, $request );\n\n\t\t/** Include admin user functions to get access to wp_delete_user() */\n\t\trequire_once ABSPATH . 'wp-admin/includes/user.php';\n\n\t\t$result = wp_delete_user( $id, $reassign );\n\n\t\tif ( ! $result ) {\n\t\t\treturn new WP_Error( 'rest_cannot_delete', __( 'The user cannot be deleted.' ), array( 'status' => 500 ) );\n\t\t}\n\n\t\t$response = new WP_REST_Response();\n\t\t$response->set_data( array( 'deleted' => true, 'previous' => $previous->get_data() ) );\n\n\t\t/**\n\t\t * Fires immediately after a user is deleted via the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param WP_User          $user     The user data.\n\t\t * @param WP_REST_Response $response The response returned from the API.\n\t\t * @param WP_REST_Request  $request  The request sent to the API.\n\t\t */\n\t\tdo_action( 'rest_delete_user', $user, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to delete the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.\n\t */\n\tpublic function delete_current_item_permissions_check( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->delete_item_permissions_check( $request );\n\t}\n\n\t/**\n\t * Deletes the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tfunction delete_current_item( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->delete_item( $request );\n\t}\n\n\t/**\n\t * Prepares a single user output for response.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_User         $user    User object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return WP_REST_Response Response object.\n\t */\n\tpublic function prepare_item_for_response( $user, $request ) {\n\n\t\t$data   = array();\n\t\t$schema = $this->get_item_schema();\n\n\t\tif ( ! empty( $schema['properties']['id'] ) ) {\n\t\t\t$data['id'] = $user->ID;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['username'] ) ) {\n\t\t\t$data['username'] = $user->user_login;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['name'] ) ) {\n\t\t\t$data['name'] = $user->display_name;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['first_name'] ) ) {\n\t\t\t$data['first_name'] = $user->first_name;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['last_name'] ) ) {\n\t\t\t$data['last_name'] = $user->last_name;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['email'] ) ) {\n\t\t\t$data['email'] = $user->user_email;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['url'] ) ) {\n\t\t\t$data['url'] = $user->user_url;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['description'] ) ) {\n\t\t\t$data['description'] = $user->description;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['link'] ) ) {\n\t\t\t$data['link'] = get_author_posts_url( $user->ID, $user->user_nicename );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['locale'] ) ) {\n\t\t\t$data['locale'] = get_user_locale( $user );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['nickname'] ) ) {\n\t\t\t$data['nickname'] = $user->nickname;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['slug'] ) ) {\n\t\t\t$data['slug'] = $user->user_nicename;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['roles'] ) ) {\n\t\t\t// Defensively call array_values() to ensure an array is returned.\n\t\t\t$data['roles'] = array_values( $user->roles );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['registered_date'] ) ) {\n\t\t\t$data['registered_date'] = date( 'c', strtotime( $user->user_registered ) );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['capabilities'] ) ) {\n\t\t\t$data['capabilities'] = (object) $user->allcaps;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['extra_capabilities'] ) ) {\n\t\t\t$data['extra_capabilities'] = (object) $user->caps;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['avatar_urls'] ) ) {\n\t\t\t$data['avatar_urls'] = rest_get_avatar_urls( $user->user_email );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['meta'] ) ) {\n\t\t\t$data['meta'] = $this->meta->get_value( $user->ID, $request );\n\t\t}\n\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'embed';\n\n\t\t$data = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data = $this->filter_response_by_context( $data, $context );\n\n\t\t// Wrap the data in a response object.\n\t\t$response = rest_ensure_response( $data );\n\n\t\t$response->add_links( $this->prepare_links( $user ) );\n\n\t\t/**\n\t\t * Filters user data returned from the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param WP_REST_Response $response The response object.\n\t\t * @param object           $user     User object used to create response.\n\t\t * @param WP_REST_Request  $request  Request object.\n\t\t */\n\t\treturn apply_filters( 'rest_prepare_user', $response, $user, $request );\n\t}\n\n\t/**\n\t * Prepares links for the user request.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param WP_Post $user User object.\n\t * @return array Links for the given user.\n\t */\n\tprotected function prepare_links( $user ) {\n\t\t$links = array(\n\t\t\t'self' => array(\n\t\t\t\t'href' => rest_url( sprintf( '%s/%s/%d', $this->namespace, $this->rest_base, $user->ID ) ),\n\t\t\t),\n\t\t\t'collection' => array(\n\t\t\t\t'href' => rest_url( sprintf( '%s/%s', $this->namespace, $this->rest_base ) ),\n\t\t\t),\n\t\t);\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Prepares a single user for creation or update.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param WP_REST_Request $request Request object.\n\t * @return object $prepared_user User object.\n\t */\n\tprotected function prepare_item_for_database( $request ) {\n\t\t$prepared_user = new stdClass;\n\n\t\t$schema = $this->get_item_schema();\n\n\t\t// required arguments.\n\t\tif ( isset( $request['email'] ) && ! empty( $schema['properties']['email'] ) ) {\n\t\t\t$prepared_user->user_email = $request['email'];\n\t\t}\n\n\t\tif ( isset( $request['username'] ) && ! empty( $schema['properties']['username'] ) ) {\n\t\t\t$prepared_user->user_login = $request['username'];\n\t\t}\n\n\t\tif ( isset( $request['password'] ) && ! empty( $schema['properties']['password'] ) ) {\n\t\t\t$prepared_user->user_pass = $request['password'];\n\t\t}\n\n\t\t// optional arguments.\n\t\tif ( isset( $request['id'] ) ) {\n\t\t\t$prepared_user->ID = absint( $request['id'] );\n\t\t}\n\n\t\tif ( isset( $request['name'] ) && ! empty( $schema['properties']['name'] ) ) {\n\t\t\t$prepared_user->display_name = $request['name'];\n\t\t}\n\n\t\tif ( isset( $request['first_name'] ) && ! empty( $schema['properties']['first_name'] ) ) {\n\t\t\t$prepared_user->first_name = $request['first_name'];\n\t\t}\n\n\t\tif ( isset( $request['last_name'] ) && ! empty( $schema['properties']['last_name'] ) ) {\n\t\t\t$prepared_user->last_name = $request['last_name'];\n\t\t}\n\n\t\tif ( isset( $request['nickname'] ) && ! empty( $schema['properties']['nickname'] ) ) {\n\t\t\t$prepared_user->nickname = $request['nickname'];\n\t\t}\n\n\t\tif ( isset( $request['slug'] ) && ! empty( $schema['properties']['slug'] ) ) {\n\t\t\t$prepared_user->user_nicename = $request['slug'];\n\t\t}\n\n\t\tif ( isset( $request['description'] ) && ! empty( $schema['properties']['description'] ) ) {\n\t\t\t$prepared_user->description = $request['description'];\n\t\t}\n\n\t\tif ( isset( $request['url'] ) && ! empty( $schema['properties']['url'] ) ) {\n\t\t\t$prepared_user->user_url = $request['url'];\n\t\t}\n\n\t\tif ( isset( $request['locale'] ) && ! empty( $schema['properties']['locale'] ) ) {\n\t\t\t$prepared_user->locale = $request['locale'];\n\t\t}\n\n\t\t// setting roles will be handled outside of this function.\n\t\tif ( isset( $request['roles'] ) ) {\n\t\t\t$prepared_user->role = false;\n\t\t}\n\n\t\t/**\n\t\t * Filters user data before insertion via the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param object          $prepared_user User object.\n\t\t * @param WP_REST_Request $request       Request object.\n\t\t */\n\t\treturn apply_filters( 'rest_pre_insert_user', $prepared_user, $request );\n\t}\n\n\t/**\n\t * Determines if the current user is allowed to make the desired roles change.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param integer $user_id User ID.\n\t * @param array   $roles   New user roles.\n\t * @return true|WP_Error True if the current user is allowed to make the role change,\n\t *                       otherwise a WP_Error object.\n\t */\n\tprotected function check_role_update( $user_id, $roles ) {\n\t\tglobal $wp_roles;\n\n\t\tforeach ( $roles as $role ) {\n\n\t\t\tif ( ! isset( $wp_roles->role_objects[ $role ] ) ) {\n\t\t\t\t/* translators: %s: role key */\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_role', sprintf( __( 'The role %s does not exist.' ), $role ), array( 'status' => 400 ) );\n\t\t\t}\n\n\t\t\t$potential_role = $wp_roles->role_objects[ $role ];\n\n\t\t\t/*\n\t\t\t * Don't let anyone with 'edit_users' (admins) edit their own role to something without it.\n\t\t\t * Multisite super admins can freely edit their blog roles -- they possess all caps.\n\t\t\t */\n\t\t\tif ( ! ( is_multisite()\n\t\t\t\t&& current_user_can( 'manage_sites' ) )\n\t\t\t\t&& get_current_user_id() === $user_id\n\t\t\t\t&& ! $potential_role->has_cap( 'edit_users' )\n\t\t\t) {\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_role', __( 'Sorry, you are not allowed to give users that role.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t\t}\n\n\t\t\t/** Include admin functions to get access to get_editable_roles() */\n\t\t\trequire_once ABSPATH . 'wp-admin/includes/admin.php';\n\n\t\t\t// The new role must be editable by the logged-in user.\n\t\t\t$editable_roles = get_editable_roles();\n\n\t\t\tif ( empty( $editable_roles[ $role ] ) ) {\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_role', __( 'Sorry, you are not allowed to give users that role.' ), array( 'status' => 403 ) );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check a username for the REST API.\n\t *\n\t * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param  mixed            $value   The username submitted in the request.\n\t * @param  WP_REST_Request  $request Full details about the request.\n\t * @param  string           $param   The parameter name.\n\t * @return WP_Error|string The sanitized username, if valid, otherwise an error.\n\t */\n\tpublic function check_username( $value, $request, $param ) {\n\t\t$username = (string) $value;\n\n\t\tif ( ! validate_username( $username ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_username', __( 'Username contains invalid characters.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\t/** This filter is documented in wp-includes/user.php */\n\t\t$illegal_logins = (array) apply_filters( 'illegal_user_logins', array() );\n\n\t\tif ( in_array( strtolower( $username ), array_map( 'strtolower', $illegal_logins ) ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_username', __( 'Sorry, that username is not allowed.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\treturn $username;\n\t}\n\n\t/**\n\t * Check a user password for the REST API.\n\t *\n\t * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param  mixed            $value   The password submitted in the request.\n\t * @param  WP_REST_Request  $request Full details about the request.\n\t * @param  string           $param   The parameter name.\n\t * @return WP_Error|string The sanitized password, if valid, otherwise an error.\n\t */\n\tpublic function check_user_password( $value, $request, $param ) {\n\t\t$password = (string) $value;\n\n\t\tif ( empty( $password ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_password', __( 'Passwords cannot be empty.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( false !== strpos( $password, \"\\\\\" ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_password', __( 'Passwords cannot contain the \"\\\\\" character.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\treturn $password;\n\t}\n\n\t/**\n\t * Retrieves the user's schema, conforming to JSON Schema.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return array Item schema data.\n\t */\n\tpublic function get_item_schema() {\n\t\t$schema = array(\n\t\t\t'$schema'    => 'http://json-schema.org/schema#',\n\t\t\t'title'      => 'user',\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'id'          => array(\n\t\t\t\t\t'description' => __( 'Unique identifier for the user.' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'username'    => array(\n\t\t\t\t\t'description' => __( 'Login name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'required'    => true,\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_username' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'name'        => array(\n\t\t\t\t\t'description' => __( 'Display name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'first_name'  => array(\n\t\t\t\t\t'description' => __( 'First name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'last_name'   => array(\n\t\t\t\t\t'description' => __( 'Last name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'email'       => array(\n\t\t\t\t\t'description' => __( 'The email address for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'email',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'required'    => true,\n\t\t\t\t),\n\t\t\t\t'url'         => array(\n\t\t\t\t\t'description' => __( 'URL of the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'description' => array(\n\t\t\t\t\t'description' => __( 'Description of the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'link'        => array(\n\t\t\t\t\t'description' => __( 'Author URL of the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'locale'    => array(\n\t\t\t\t\t'description' => __( 'Locale for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'enum'        => array_merge( array( '', 'en_US' ), get_available_languages() ),\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t),\n\t\t\t\t'nickname'    => array(\n\t\t\t\t\t'description' => __( 'The nickname for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'slug'        => array(\n\t\t\t\t\t'description' => __( 'An alphanumeric identifier for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'sanitize_slug' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'registered_date' => array(\n\t\t\t\t\t'description' => __( 'Registration date for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'date-time',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'roles'           => array(\n\t\t\t\t\t'description' => __( 'Roles assigned to the user.' ),\n\t\t\t\t\t'type'        => 'array',\n\t\t\t\t\t'items'       => array(\n\t\t\t\t\t\t'type'    => 'string',\n\t\t\t\t\t),\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t),\n\t\t\t\t'password'        => array(\n\t\t\t\t\t'description' => __( 'Password for the user (never included).' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array(), // Password is never displayed.\n\t\t\t\t\t'required'    => true,\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_user_password' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'capabilities'    => array(\n\t\t\t\t\t'description' => __( 'All capabilities assigned to the user.' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'extra_capabilities' => array(\n\t\t\t\t\t'description' => __( 'Any extra capabilities assigned to the user.' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tif ( get_option( 'show_avatars' ) ) {\n\t\t\t$avatar_properties = array();\n\n\t\t\t$avatar_sizes = rest_get_avatar_sizes();\n\n\t\t\tforeach ( $avatar_sizes as $size ) {\n\t\t\t\t$avatar_properties[ $size ] = array(\n\t\t\t\t\t/* translators: %d: avatar image size in pixels */\n\t\t\t\t\t'description' => sprintf( __( 'Avatar URL with image size of %d pixels.' ), $size ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$schema['properties']['avatar_urls']  = array(\n\t\t\t\t'description' => __( 'Avatar URLs for the user.' ),\n\t\t\t\t'type'        => 'object',\n\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t\t'properties'  => $avatar_properties,\n\t\t\t);\n\t\t}\n\n\t\t$schema['properties']['meta'] = $this->meta->get_field_schema();\n\n\t\treturn $this->add_additional_fields_schema( $schema );\n\t}\n\n\t/**\n\t * Retrieves the query params for collections.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return array Collection parameters.\n\t */\n\tpublic function get_collection_params() {\n\t\t$query_params = parent::get_collection_params();\n\n\t\t$query_params['context']['default'] = 'view';\n\n\t\t$query_params['exclude'] = array(\n\t\t\t'description'        => __( 'Ensure result set excludes specific IDs.' ),\n\t\t\t'type'               => 'array',\n\t\t\t'items'              => array(\n\t\t\t\t'type'           => 'integer',\n\t\t\t),\n\t\t\t'default'            => array(),\n\t\t);\n\n\t\t$query_params['include'] = array(\n\t\t\t'description'        => __( 'Limit result set to specific IDs.' ),\n\t\t\t'type'               => 'array',\n\t\t\t'items'              => array(\n\t\t\t\t'type'           => 'integer',\n\t\t\t),\n\t\t\t'default'            => array(),\n\t\t);\n\n\t\t$query_params['offset'] = array(\n\t\t\t'description'        => __( 'Offset the result set by a specific number of items.' ),\n\t\t\t'type'               => 'integer',\n\t\t);\n\n\t\t$query_params['order'] = array(\n\t\t\t'default'            => 'asc',\n\t\t\t'description'        => __( 'Order sort attribute ascending or descending.' ),\n\t\t\t'enum'               => array( 'asc', 'desc' ),\n\t\t\t'type'               => 'string',\n\t\t);\n\n\t\t$query_params['orderby'] = array(\n\t\t\t'default'            => 'name',\n\t\t\t'description'        => __( 'Sort collection by object attribute.' ),\n\t\t\t'enum'               => array(\n\t\t\t\t'id',\n\t\t\t\t'include',\n\t\t\t\t'name',\n\t\t\t\t'registered_date',\n\t\t\t\t'slug',\n\t\t\t\t'email',\n\t\t\t\t'url',\n\t\t\t),\n\t\t\t'type'               => 'string',\n\t\t);\n\n\t\t$query_params['slug']    = array(\n\t\t\t'description'        => __( 'Limit result set to users with a specific slug.' ),\n\t\t\t'type'               => 'string',\n\t\t);\n\n\t\t$query_params['roles']   = array(\n\t\t\t'description'        => __( 'Limit result set to users matching at least one specific role provided. Accepts csv list or single role.' ),\n\t\t\t'type'               => 'array',\n\t\t\t'items'              => array(\n\t\t\t\t'type'           => 'string',\n\t\t\t),\n\t\t);\n\n\t\t/**\n\t\t * Filter collection parameters for the users controller.\n\t\t *\n\t\t * This filter registers the collection parameter, but does not map the\n\t\t * collection parameter to an internal WP_User_Query parameter.  Use the\n\t\t * `rest_user_query` filter to set WP_User_Query arguments.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param array $query_params JSON Schema-formatted collection parameters.\n\t\t */\n\t\treturn apply_filters( 'rest_user_collection_params', $query_params );\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39831';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * REST API: WP_REST_Users_Controller class\n *\n * @package WordPress\n * @subpackage REST_API\n * @since 4.7.0\n */\n\n/**\n * Core class used to manage users via the REST API.\n *\n * @since 4.7.0\n *\n * @see WP_REST_Controller\n */\nclass WP_REST_Users_Controller extends WP_REST_Controller {\n\n\t/**\n\t * Instance of a user meta fields object.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t * @var WP_REST_User_Meta_Fields\n\t */\n\tprotected $meta;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t */\n\tpublic function __construct() {\n\t\t$this->namespace = 'wp/v2';\n\t\t$this->rest_base = 'users';\n\n\t\t$this->meta = new WP_REST_User_Meta_Fields();\n\t}\n\n\t/**\n\t * Registers the routes for the objects of the controller.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @see register_rest_route()\n\t */\n\tpublic function register_routes() {\n\n\t\tregister_rest_route( $this->namespace, '/' . $this->rest_base, array(\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t'callback'            => array( $this, 'get_items' ),\n\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t),\n\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t) );\n\n\t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<id>[\\d]+)', array(\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'context' => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::EDITABLE,\n\t\t\t\t'callback'            => array( $this, 'update_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'update_item_permissions_check' ),\n\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t'callback'            => array( $this, 'delete_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'delete_item_permissions_check' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'force'    => array(\n\t\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t\t'default'     => false,\n\t\t\t\t\t\t'description' => __( 'Required to be true, as users do not support trashing.' ),\n\t\t\t\t\t),\n\t\t\t\t\t'reassign' => array(\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t\t'description' => __( 'Reassign the deleted user\\'s posts and links to this user ID.' ),\n\t\t\t\t\t\t'required'    => true,\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_reassign' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t) );\n\n\t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/me', array(\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t'callback'            => array( $this, 'get_current_item' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'context' => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::EDITABLE,\n\t\t\t\t'callback'            => array( $this, 'update_current_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'update_current_item_permissions_check' ),\n\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t'callback'            => array( $this, 'delete_current_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'delete_current_item_permissions_check' ),\n\t\t\t\t'args'                => array(\n\t\t\t\t\t'force'    => array(\n\t\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t\t'default'     => false,\n\t\t\t\t\t\t'description' => __( 'Required to be true, as users do not support trashing.' ),\n\t\t\t\t\t),\n\t\t\t\t\t'reassign' => array(\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t\t'description' => __( 'Reassign the deleted user\\'s posts and links to this user ID.' ),\n\t\t\t\t\t\t'required'    => true,\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_reassign' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t));\n\t}\n\n\t/**\n\t * Checks for a valid value for the reassign parameter when deleting users.\n\t *\n\t * The value can be an integer, 'false', false, or ''.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param int|bool        $value   The value passed to the reassign parameter.\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @param string          $param   The parameter that is being sanitized.\n\t *\n\t * @return int|bool|WP_Error\n\t */\n\tpublic function check_reassign( $value, $request, $param ) {\n\t\tif ( is_numeric( $value ) ) {\n\t\t\treturn $value;\n\t\t}\n\n\t\tif ( empty( $value ) || false === $value || 'false' === $value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn new WP_Error( 'rest_invalid_param', __( 'Invalid user parameter(s).' ), array( 'status' => 400 ) );\n\t}\n\n\t/**\n\t * Permissions check for getting all users.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has read access, otherwise WP_Error object.\n\t */\n\tpublic function get_items_permissions_check( $request ) {\n\t\t// Check if roles is specified in GET request and if user can list users.\n\t\tif ( ! empty( $request['roles'] ) && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to filter users by role.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\tif ( 'edit' === $request['context'] && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_forbidden_context', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\tif ( in_array( $request['orderby'], array( 'email', 'registered_date' ), true ) && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_forbidden_orderby', __( 'Sorry, you are not allowed to order users by this parameter.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Retrieves all users.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_items( $request ) {\n\n\t\t// Retrieve the list of registered collection query parameters.\n\t\t$registered = $this->get_collection_params();\n\n\t\t/*\n\t\t * This array defines mappings between public API query parameters whose\n\t\t * values are accepted as-passed, and their internal WP_Query parameter\n\t\t * name equivalents (some are the same). Only values which are also\n\t\t * present in $registered will be set.\n\t\t */\n\t\t$parameter_mappings = array(\n\t\t\t'exclude'  => 'exclude',\n\t\t\t'include'  => 'include',\n\t\t\t'order'    => 'order',\n\t\t\t'per_page' => 'number',\n\t\t\t'search'   => 'search',\n\t\t\t'roles'    => 'role__in',\n\t\t);\n\n\t\t$prepared_args = array();\n\n\t\t/*\n\t\t * For each known parameter which is both registered and present in the request,\n\t\t * set the parameter's value on the query $prepared_args.\n\t\t */\n\t\tforeach ( $parameter_mappings as $api_param => $wp_param ) {\n\t\t\tif ( isset( $registered[ $api_param ], $request[ $api_param ] ) ) {\n\t\t\t\t$prepared_args[ $wp_param ] = $request[ $api_param ];\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $registered['offset'] ) && ! empty( $request['offset'] ) ) {\n\t\t\t$prepared_args['offset'] = $request['offset'];\n\t\t} else {\n\t\t\t$prepared_args['offset']  = ( $request['page'] - 1 ) * $prepared_args['number'];\n\t\t}\n\n\t\tif ( isset( $registered['orderby'] ) ) {\n\t\t\t$orderby_possibles = array(\n\t\t\t\t'id'              => 'ID',\n\t\t\t\t'include'         => 'include',\n\t\t\t\t'name'            => 'display_name',\n\t\t\t\t'registered_date' => 'registered',\n\t\t\t\t'slug'            => 'user_nicename',\n\t\t\t\t'email'           => 'user_email',\n\t\t\t\t'url'             => 'user_url',\n\t\t\t);\n\t\t\t$prepared_args['orderby'] = $orderby_possibles[ $request['orderby'] ];\n\t\t}\n\n\t\tif ( ! current_user_can( 'list_users' ) ) {\n\t\t\t$prepared_args['has_published_posts'] = get_post_types( array( 'show_in_rest' => true ), 'names' );\n\t\t}\n\n\t\tif ( ! empty( $prepared_args['search'] ) ) {\n\t\t\t$prepared_args['search'] = '*' . $prepared_args['search'] . '*';\n\t\t}\n\n\t\tif ( isset( $registered['slug'] ) && ! empty( $request['slug'] ) ) {\n\t\t\t$prepared_args['search'] = $request['slug'];\n\t\t\t$prepared_args['search_columns'] = array( 'user_nicename' );\n\t\t}\n\n\t\t/**\n\t\t * Filters WP_User_Query arguments when querying users via the REST API.\n\t\t *\n\t\t * @link https://developer.wordpress.org/reference/classes/wp_user_query/\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param array           $prepared_args Array of arguments for WP_User_Query.\n\t\t * @param WP_REST_Request $request       The current request.\n\t\t */\n\t\t$prepared_args = apply_filters( 'rest_user_query', $prepared_args, $request );\n\n\t\t$query = new WP_User_Query( $prepared_args );\n\n\t\t$users = array();\n\n\t\tforeach ( $query->results as $user ) {\n\t\t\t$data = $this->prepare_item_for_response( $user, $request );\n\t\t\t$users[] = $this->prepare_response_for_collection( $data );\n\t\t}\n\n\t\t$response = rest_ensure_response( $users );\n\n\t\t// Store pagination values for headers then unset for count query.\n\t\t$per_page = (int) $prepared_args['number'];\n\t\t$page     = ceil( ( ( (int) $prepared_args['offset'] ) / $per_page ) + 1 );\n\n\t\t$prepared_args['fields'] = 'ID';\n\n\t\t$total_users = $query->get_total();\n\n\t\tif ( $total_users < 1 ) {\n\t\t\t// Out-of-bounds, run the query again without LIMIT for total count.\n\t\t\tunset( $prepared_args['number'], $prepared_args['offset'] );\n\t\t\t$count_query = new WP_User_Query( $prepared_args );\n\t\t\t$total_users = $count_query->get_total();\n\t\t}\n\n\t\t$response->header( 'X-WP-Total', (int) $total_users );\n\n\t\t$max_pages = ceil( $total_users / $per_page );\n\n\t\t$response->header( 'X-WP-TotalPages', (int) $max_pages );\n\n\t\t$base = add_query_arg( $request->get_query_params(), rest_url( sprintf( '%s/%s', $this->namespace, $this->rest_base ) ) );\n\t\tif ( $page > 1 ) {\n\t\t\t$prev_page = $page - 1;\n\n\t\t\tif ( $prev_page > $max_pages ) {\n\t\t\t\t$prev_page = $max_pages;\n\t\t\t}\n\n\t\t\t$prev_link = add_query_arg( 'page', $prev_page, $base );\n\t\t\t$response->link_header( 'prev', $prev_link );\n\t\t}\n\t\tif ( $max_pages > $page ) {\n\t\t\t$next_page = $page + 1;\n\t\t\t$next_link = add_query_arg( 'page', $next_page, $base );\n\n\t\t\t$response->link_header( 'next', $next_link );\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to read a user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has read access for the item, otherwise WP_Error object.\n\t */\n\tpublic function get_item_permissions_check( $request ) {\n\n\t\t$id = (int) $request['id'];\n\t\t$user = get_userdata( $id );\n\t\t$types = get_post_types( array( 'show_in_rest' => true ), 'names' );\n\n\t\tif ( empty( $id ) || empty( $user->ID ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\tif ( get_current_user_id() === $id ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( 'edit' === $request['context'] && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t} elseif ( ! count_user_posts( $id, $types ) && ! current_user_can( 'edit_user', $id ) && ! current_user_can( 'list_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Retrieves a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_item( $request ) {\n\t\t$id   = (int) $request['id'];\n\t\t$user = get_userdata( $id );\n\n\t\tif ( empty( $id ) || empty( $user->ID ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\t$user = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $user );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Retrieves the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_current_item( $request ) {\n\t\t$current_user_id = get_current_user_id();\n\n\t\tif ( empty( $current_user_id ) ) {\n\t\t\treturn new WP_Error( 'rest_not_logged_in', __( 'You are not currently logged in.' ), array( 'status' => 401 ) );\n\t\t}\n\n\t\t$user     = wp_get_current_user();\n\t\t$response = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $response );\n\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access create users.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.\n\t */\n\tpublic function create_item_permissions_check( $request ) {\n\n\t\tif ( ! current_user_can( 'create_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_cannot_create_user', __( 'Sorry, you are not allowed to create new users.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function create_item( $request ) {\n\t\tif ( ! empty( $request['id'] ) ) {\n\t\t\treturn new WP_Error( 'rest_user_exists', __( 'Cannot create existing user.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\t$schema = $this->get_item_schema();\n\n\t\tif ( ! empty( $request['roles'] ) && ! empty( $schema['properties']['roles'] ) ) {\n\t\t\t$check_permission = $this->check_role_update( $request['id'], $request['roles'] );\n\n\t\t\tif ( is_wp_error( $check_permission ) ) {\n\t\t\t\treturn $check_permission;\n\t\t\t}\n\t\t}\n\n\t\t$user = $this->prepare_item_for_database( $request );\n\n\t\tif ( is_multisite() ) {\n\t\t\t$ret = wpmu_validate_user_signup( $user->user_login, $user->user_email );\n\n\t\t\tif ( is_wp_error( $ret['errors'] ) && ! empty( $ret['errors']->errors ) ) {\n\t\t\t\t$error = new WP_Error( 'rest_invalid_param', __( 'Invalid user parameter(s).' ), array( 'status' => 400 ) );\n\t\t\t\tforeach ( $ret['errors']->errors as $code => $messages ) {\n\t\t\t\t\tforeach ( $messages as $message ) {\n\t\t\t\t\t\t$error->add( $code, $message );\n\t\t\t\t\t}\n\t\t\t\t\tif ( $error_data = $error->get_error_data( $code ) ) {\n\t\t\t\t\t\t$error->add_data( $error_data, $code );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $error;\n\t\t\t}\n\t\t}\n\n\t\tif ( is_multisite() ) {\n\t\t\t$user_id = wpmu_create_user( $user->user_login, $user->user_pass, $user->user_email );\n\n\t\t\tif ( ! $user_id ) {\n\t\t\t\treturn new WP_Error( 'rest_user_create', __( 'Error creating new user.' ), array( 'status' => 500 ) );\n\t\t\t}\n\n\t\t\t$user->ID = $user_id;\n\t\t\t$user_id  = wp_update_user( wp_slash( (array) $user ) );\n\n\t\t\tif ( is_wp_error( $user_id ) ) {\n\t\t\t\treturn $user_id;\n\t\t\t}\n\n\t\t\tadd_user_to_blog( get_site()->id, $user_id, '' );\n\t\t} else {\n\t\t\t$user_id = wp_insert_user( wp_slash( (array) $user ) );\n\n\t\t\tif ( is_wp_error( $user_id ) ) {\n\t\t\t\treturn $user_id;\n\t\t\t}\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\n\t\t/**\n\t\t * Fires immediately after a user is created or updated via the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param WP_User         $user     Inserted or updated user object.\n\t\t * @param WP_REST_Request $request  Request object.\n\t\t * @param bool            $creating True when creating a user, false when updating.\n\t\t */\n\t\tdo_action( 'rest_insert_user', $user, $request, true );\n\n\t\tif ( ! empty( $request['roles'] ) && ! empty( $schema['properties']['roles'] ) ) {\n\t\t\tarray_map( array( $user, 'add_role' ), $request['roles'] );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['meta'] ) && isset( $request['meta'] ) ) {\n\t\t\t$meta_update = $this->meta->update_value( $request['meta'], $user_id );\n\n\t\t\tif ( is_wp_error( $meta_update ) ) {\n\t\t\t\treturn $meta_update;\n\t\t\t}\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\t\t$fields_update = $this->update_additional_fields_for_object( $user, $request );\n\n\t\tif ( is_wp_error( $fields_update ) ) {\n\t\t\treturn $fields_update;\n\t\t}\n\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$response = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $response );\n\n\t\t$response->set_status( 201 );\n\t\t$response->header( 'Location', rest_url( sprintf( '%s/%s/%d', $this->namespace, $this->rest_base, $user_id ) ) );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to update a user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.\n\t */\n\tpublic function update_item_permissions_check( $request ) {\n\n\t\t$id = (int) $request['id'];\n\n\t\tif ( ! current_user_can( 'edit_user', $id ) ) {\n\t\t\treturn new WP_Error( 'rest_cannot_edit', __( 'Sorry, you are not allowed to edit this user.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\tif ( ! empty( $request['roles'] ) && ! current_user_can( 'edit_users' ) ) {\n\t\t\treturn new WP_Error( 'rest_cannot_edit_roles', __( 'Sorry, you are not allowed to edit roles of this user.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Updates a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function update_item( $request ) {\n\t\t$id   = (int) $request['id'];\n\t\t$user = get_userdata( $id );\n\n\t\tif ( ! $user ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\tif ( email_exists( $request['email'] ) && $request['email'] !== $user->user_email ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_email', __( 'Invalid email address.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( ! empty( $request['username'] ) && $request['username'] !== $user->user_login ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_argument', __( \"Username isn't editable.\" ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( ! empty( $request['slug'] ) && $request['slug'] !== $user->user_nicename && get_user_by( 'slug', $request['slug'] ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_slug', __( 'Invalid slug.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( ! empty( $request['roles'] ) ) {\n\t\t\t$check_permission = $this->check_role_update( $id, $request['roles'] );\n\n\t\t\tif ( is_wp_error( $check_permission ) ) {\n\t\t\t\treturn $check_permission;\n\t\t\t}\n\t\t}\n\n\t\t$user = $this->prepare_item_for_database( $request );\n\n\t\t// Ensure we're operating on the same user we already checked.\n\t\t$user->ID = $id;\n\n\t\t$user_id = wp_update_user( wp_slash( (array) $user ) );\n\n\t\tif ( is_wp_error( $user_id ) ) {\n\t\t\treturn $user_id;\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\n\t\t/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php */\n\t\tdo_action( 'rest_insert_user', $user, $request, false );\n\n\t\tif ( is_multisite() && ! is_user_member_of_blog( $id ) ) {\n\t\t\tadd_user_to_blog( get_current_blog_id(), $id, '' );\n\t\t}\n\n\t\tif ( ! empty( $request['roles'] ) ) {\n\t\t\tarray_map( array( $user, 'add_role' ), $request['roles'] );\n\t\t}\n\n\t\t$schema = $this->get_item_schema();\n\n\t\tif ( ! empty( $schema['properties']['meta'] ) && isset( $request['meta'] ) ) {\n\t\t\t$meta_update = $this->meta->update_value( $request['meta'], $id );\n\n\t\t\tif ( is_wp_error( $meta_update ) ) {\n\t\t\t\treturn $meta_update;\n\t\t\t}\n\t\t}\n\n\t\t$user = get_user_by( 'id', $user_id );\n\t\t$fields_update = $this->update_additional_fields_for_object( $user, $request );\n\n\t\tif ( is_wp_error( $fields_update ) ) {\n\t\t\treturn $fields_update;\n\t\t}\n\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$response = $this->prepare_item_for_response( $user, $request );\n\t\t$response = rest_ensure_response( $response );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to update the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.\n\t */\n\tpublic function update_current_item_permissions_check( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->update_item_permissions_check( $request );\n\t}\n\n\t/**\n\t * Updates the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tfunction update_current_item( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->update_item( $request );\n\t}\n\n\t/**\n\t * Checks if a given request has access delete a user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.\n\t */\n\tpublic function delete_item_permissions_check( $request ) {\n\n\t\t$id = (int) $request['id'];\n\n\t\tif ( ! current_user_can( 'delete_user', $id ) ) {\n\t\t\treturn new WP_Error( 'rest_user_cannot_delete', __( 'Sorry, you are not allowed to delete this user.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Deletes a single user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function delete_item( $request ) {\n\t\t// We don't support delete requests in multisite.\n\t\tif ( is_multisite() ) {\n\t\t\treturn new WP_Error( 'rest_cannot_delete', __( 'The user cannot be deleted.' ), array( 'status' => 501 ) );\n\t\t}\n\n\t\t$id       = (int) $request['id'];\n\t\t$reassign = false === $request['reassign'] ? null : absint( $request['reassign'] );\n\t\t$force    = isset( $request['force'] ) ? (bool) $request['force'] : false;\n\n\t\t// We don't support trashing for users.\n\t\tif ( ! $force ) {\n\t\t\treturn new WP_Error( 'rest_trash_not_supported', __( 'Users do not support trashing. Set force=true to delete.' ), array( 'status' => 501 ) );\n\t\t}\n\n\t\t$user = get_userdata( $id );\n\n\t\tif ( ! $user ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n\t\t}\n\n\t\tif ( ! empty( $reassign ) ) {\n\t\t\tif ( $reassign === $id || ! get_userdata( $reassign ) ) {\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_reassign', __( 'Invalid user ID for reassignment.' ), array( 'status' => 400 ) );\n\t\t\t}\n\t\t}\n\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$previous = $this->prepare_item_for_response( $user, $request );\n\n\t\t/** Include admin user functions to get access to wp_delete_user() */\n\t\trequire_once ABSPATH . 'wp-admin/includes/user.php';\n\n\t\t$result = wp_delete_user( $id, $reassign );\n\n\t\tif ( ! $result ) {\n\t\t\treturn new WP_Error( 'rest_cannot_delete', __( 'The user cannot be deleted.' ), array( 'status' => 500 ) );\n\t\t}\n\n\t\t$response = new WP_REST_Response();\n\t\t$response->set_data( array( 'deleted' => true, 'previous' => $previous->get_data() ) );\n\n\t\t/**\n\t\t * Fires immediately after a user is deleted via the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param WP_User          $user     The user data.\n\t\t * @param WP_REST_Response $response The response returned from the API.\n\t\t * @param WP_REST_Request  $request  The request sent to the API.\n\t\t */\n\t\tdo_action( 'rest_delete_user', $user, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Checks if a given request has access to delete the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.\n\t */\n\tpublic function delete_current_item_permissions_check( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->delete_item_permissions_check( $request );\n\t}\n\n\t/**\n\t * Deletes the current user.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tfunction delete_current_item( $request ) {\n\t\t$request['id'] = get_current_user_id();\n\n\t\treturn $this->delete_item( $request );\n\t}\n\n\t/**\n\t * Prepares a single user output for response.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param WP_User         $user    User object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return WP_REST_Response Response object.\n\t */\n\tpublic function prepare_item_for_response( $user, $request ) {\n\n\t\t$data   = array();\n\t\t$schema = $this->get_item_schema();\n\n\t\tif ( ! empty( $schema['properties']['id'] ) ) {\n\t\t\t$data['id'] = $user->ID;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['username'] ) ) {\n\t\t\t$data['username'] = $user->user_login;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['name'] ) ) {\n\t\t\t$data['name'] = $user->display_name;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['first_name'] ) ) {\n\t\t\t$data['first_name'] = $user->first_name;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['last_name'] ) ) {\n\t\t\t$data['last_name'] = $user->last_name;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['email'] ) ) {\n\t\t\t$data['email'] = $user->user_email;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['url'] ) ) {\n\t\t\t$data['url'] = $user->user_url;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['description'] ) ) {\n\t\t\t$data['description'] = $user->description;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['link'] ) ) {\n\t\t\t$data['link'] = get_author_posts_url( $user->ID, $user->user_nicename );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['locale'] ) ) {\n\t\t\t$data['locale'] = get_user_locale( $user );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['nickname'] ) ) {\n\t\t\t$data['nickname'] = $user->nickname;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['slug'] ) ) {\n\t\t\t$data['slug'] = $user->user_nicename;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['roles'] ) ) {\n\t\t\t// Defensively call array_values() to ensure an array is returned.\n\t\t\t$data['roles'] = array_values( $user->roles );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['registered_date'] ) ) {\n\t\t\t$data['registered_date'] = date( 'c', strtotime( $user->user_registered ) );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['capabilities'] ) ) {\n\t\t\t$data['capabilities'] = (object) $user->allcaps;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['extra_capabilities'] ) ) {\n\t\t\t$data['extra_capabilities'] = (object) $user->caps;\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['avatar_urls'] ) ) {\n\t\t\t$data['avatar_urls'] = rest_get_avatar_urls( $user->user_email );\n\t\t}\n\n\t\tif ( ! empty( $schema['properties']['meta'] ) ) {\n\t\t\t$data['meta'] = $this->meta->get_value( $user->ID, $request );\n\t\t}\n\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'embed';\n\n\t\t$data = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data = $this->filter_response_by_context( $data, $context );\n\n\t\t// Wrap the data in a response object.\n\t\t$response = rest_ensure_response( $data );\n\n\t\t$response->add_links( $this->prepare_links( $user ) );\n\n\t\t/**\n\t\t * Filters user data returned from the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param WP_REST_Response $response The response object.\n\t\t * @param object           $user     User object used to create response.\n\t\t * @param WP_REST_Request  $request  Request object.\n\t\t */\n\t\treturn apply_filters( 'rest_prepare_user', $response, $user, $request );\n\t}\n\n\t/**\n\t * Prepares links for the user request.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param WP_Post $user User object.\n\t * @return array Links for the given user.\n\t */\n\tprotected function prepare_links( $user ) {\n\t\t$links = array(\n\t\t\t'self' => array(\n\t\t\t\t'href' => rest_url( sprintf( '%s/%s/%d', $this->namespace, $this->rest_base, $user->ID ) ),\n\t\t\t),\n\t\t\t'collection' => array(\n\t\t\t\t'href' => rest_url( sprintf( '%s/%s', $this->namespace, $this->rest_base ) ),\n\t\t\t),\n\t\t);\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Prepares a single user for creation or update.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param WP_REST_Request $request Request object.\n\t * @return object $prepared_user User object.\n\t */\n\tprotected function prepare_item_for_database( $request ) {\n\t\t$prepared_user = new stdClass;\n\n\t\t$schema = $this->get_item_schema();\n\n\t\t// required arguments.\n\t\tif ( isset( $request['email'] ) && ! empty( $schema['properties']['email'] ) ) {\n\t\t\t$prepared_user->user_email = $request['email'];\n\t\t}\n\n\t\tif ( isset( $request['username'] ) && ! empty( $schema['properties']['username'] ) ) {\n\t\t\t$prepared_user->user_login = $request['username'];\n\t\t}\n\n\t\tif ( isset( $request['password'] ) && ! empty( $schema['properties']['password'] ) ) {\n\t\t\t$prepared_user->user_pass = $request['password'];\n\t\t}\n\n\t\t// optional arguments.\n\t\tif ( isset( $request['id'] ) ) {\n\t\t\t$prepared_user->ID = absint( $request['id'] );\n\t\t}\n\n\t\tif ( isset( $request['name'] ) && ! empty( $schema['properties']['name'] ) ) {\n\t\t\t$prepared_user->display_name = $request['name'];\n\t\t}\n\n\t\tif ( isset( $request['first_name'] ) && ! empty( $schema['properties']['first_name'] ) ) {\n\t\t\t$prepared_user->first_name = $request['first_name'];\n\t\t}\n\n\t\tif ( isset( $request['last_name'] ) && ! empty( $schema['properties']['last_name'] ) ) {\n\t\t\t$prepared_user->last_name = $request['last_name'];\n\t\t}\n\n\t\tif ( isset( $request['nickname'] ) && ! empty( $schema['properties']['nickname'] ) ) {\n\t\t\t$prepared_user->nickname = $request['nickname'];\n\t\t}\n\n\t\tif ( isset( $request['slug'] ) && ! empty( $schema['properties']['slug'] ) ) {\n\t\t\t$prepared_user->user_nicename = $request['slug'];\n\t\t}\n\n\t\tif ( isset( $request['description'] ) && ! empty( $schema['properties']['description'] ) ) {\n\t\t\t$prepared_user->description = $request['description'];\n\t\t}\n\n\t\tif ( isset( $request['url'] ) && ! empty( $schema['properties']['url'] ) ) {\n\t\t\t$prepared_user->user_url = $request['url'];\n\t\t}\n\n\t\tif ( isset( $request['locale'] ) && ! empty( $schema['properties']['locale'] ) ) {\n\t\t\t$prepared_user->locale = $request['locale'];\n\t\t}\n\n\t\t// setting roles will be handled outside of this function.\n\t\tif ( isset( $request['roles'] ) ) {\n\t\t\t$prepared_user->role = false;\n\t\t}\n\n\t\t/**\n\t\t * Filters user data before insertion via the REST API.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param object          $prepared_user User object.\n\t\t * @param WP_REST_Request $request       Request object.\n\t\t */\n\t\treturn apply_filters( 'rest_pre_insert_user', $prepared_user, $request );\n\t}\n\n\t/**\n\t * Determines if the current user is allowed to make the desired roles change.\n\t *\n\t * @since 4.7.0\n\t * @access protected\n\t *\n\t * @param integer $user_id User ID.\n\t * @param array   $roles   New user roles.\n\t * @return true|WP_Error True if the current user is allowed to make the role change,\n\t *                       otherwise a WP_Error object.\n\t */\n\tprotected function check_role_update( $user_id, $roles ) {\n\t\tglobal $wp_roles;\n\n\t\tforeach ( $roles as $role ) {\n\n\t\t\tif ( ! isset( $wp_roles->role_objects[ $role ] ) ) {\n\t\t\t\t/* translators: %s: role key */\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_role', sprintf( __( 'The role %s does not exist.' ), $role ), array( 'status' => 400 ) );\n\t\t\t}\n\n\t\t\t$potential_role = $wp_roles->role_objects[ $role ];\n\n\t\t\t/*\n\t\t\t * Don't let anyone with 'edit_users' (admins) edit their own role to something without it.\n\t\t\t * Multisite super admins can freely edit their blog roles -- they possess all caps.\n\t\t\t */\n\t\t\tif ( ! ( is_multisite()\n\t\t\t\t&& current_user_can( 'manage_sites' ) )\n\t\t\t\t&& get_current_user_id() === $user_id\n\t\t\t\t&& ! $potential_role->has_cap( 'edit_users' )\n\t\t\t) {\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_role', __( 'Sorry, you are not allowed to give users that role.' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t\t}\n\n\t\t\t/** Include admin functions to get access to get_editable_roles() */\n\t\t\trequire_once ABSPATH . 'wp-admin/includes/admin.php';\n\n\t\t\t// The new role must be editable by the logged-in user.\n\t\t\t$editable_roles = get_editable_roles();\n\n\t\t\tif ( empty( $editable_roles[ $role ] ) ) {\n\t\t\t\treturn new WP_Error( 'rest_user_invalid_role', __( 'Sorry, you are not allowed to give users that role.' ), array( 'status' => 403 ) );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check a username for the REST API.\n\t *\n\t * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param  mixed            $value   The username submitted in the request.\n\t * @param  WP_REST_Request  $request Full details about the request.\n\t * @param  string           $param   The parameter name.\n\t * @return WP_Error|string The sanitized username, if valid, otherwise an error.\n\t */\n\tpublic function check_username( $value, $request, $param ) {\n\t\t$username = (string) $value;\n\n\t\tif ( ! validate_username( $username ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_username', __( 'Username contains invalid characters.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\t/** This filter is documented in wp-includes/user.php */\n\t\t$illegal_logins = (array) apply_filters( 'illegal_user_logins', array() );\n\n\t\tif ( in_array( strtolower( $username ), array_map( 'strtolower', $illegal_logins ) ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_username', __( 'Sorry, that username is not allowed.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\treturn $username;\n\t}\n\n\t/**\n\t * Check a user password for the REST API.\n\t *\n\t * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @param  mixed            $value   The password submitted in the request.\n\t * @param  WP_REST_Request  $request Full details about the request.\n\t * @param  string           $param   The parameter name.\n\t * @return WP_Error|string The sanitized password, if valid, otherwise an error.\n\t */\n\tpublic function check_user_password( $value, $request, $param ) {\n\t\t$password = (string) $value;\n\n\t\tif ( empty( $password ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_password', __( 'Passwords cannot be empty.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( false !== strpos( $password, \"\\\\\" ) ) {\n\t\t\treturn new WP_Error( 'rest_user_invalid_password', __( 'Passwords cannot contain the \"\\\\\" character.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\treturn $password;\n\t}\n\n\t/**\n\t * Retrieves the user's schema, conforming to JSON Schema.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return array Item schema data.\n\t */\n\tpublic function get_item_schema() {\n\t\t$schema = array(\n\t\t\t'$schema'    => 'http://json-schema.org/schema#',\n\t\t\t'title'      => 'user',\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'id'          => array(\n\t\t\t\t\t'description' => __( 'Unique identifier for the user.' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'username'    => array(\n\t\t\t\t\t'description' => __( 'Login name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'required'    => true,\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_username' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'name'        => array(\n\t\t\t\t\t'description' => __( 'Display name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'first_name'  => array(\n\t\t\t\t\t'description' => __( 'First name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'last_name'   => array(\n\t\t\t\t\t'description' => __( 'Last name for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'email'       => array(\n\t\t\t\t\t'description' => __( 'The email address for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'email',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'required'    => true,\n\t\t\t\t),\n\t\t\t\t'url'         => array(\n\t\t\t\t\t'description' => __( 'URL of the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'description' => array(\n\t\t\t\t\t'description' => __( 'Description of the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'link'        => array(\n\t\t\t\t\t'description' => __( 'Author URL of the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'locale'    => array(\n\t\t\t\t\t'description' => __( 'Locale for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'enum'        => array_merge( array( '', 'en_US' ), get_available_languages() ),\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t),\n\t\t\t\t'nickname'    => array(\n\t\t\t\t\t'description' => __( 'The nickname for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'slug'        => array(\n\t\t\t\t\t'description' => __( 'An alphanumeric identifier for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'sanitize_slug' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'registered_date' => array(\n\t\t\t\t\t'description' => __( 'Registration date for the user.' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'date-time',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'roles'           => array(\n\t\t\t\t\t'description' => __( 'Roles assigned to the user.' ),\n\t\t\t\t\t'type'        => 'array',\n\t\t\t\t\t'items'       => array(\n\t\t\t\t\t\t'type'    => 'string',\n\t\t\t\t\t),\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t),\n\t\t\t\t'password'        => array(\n\t\t\t\t\t'description' => __( 'Password for the user (never included).' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array(), // Password is never displayed.\n\t\t\t\t\t'required'    => true,\n\t\t\t\t\t'arg_options' => array(\n\t\t\t\t\t\t'sanitize_callback' => array( $this, 'check_user_password' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'capabilities'    => array(\n\t\t\t\t\t'description' => __( 'All capabilities assigned to the user.' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'extra_capabilities' => array(\n\t\t\t\t\t'description' => __( 'Any extra capabilities assigned to the user.' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tif ( get_option( 'show_avatars' ) ) {\n\t\t\t$avatar_properties = array();\n\n\t\t\t$avatar_sizes = rest_get_avatar_sizes();\n\n\t\t\tforeach ( $avatar_sizes as $size ) {\n\t\t\t\t$avatar_properties[ $size ] = array(\n\t\t\t\t\t/* translators: %d: avatar image size in pixels */\n\t\t\t\t\t'description' => sprintf( __( 'Avatar URL with image size of %d pixels.' ), $size ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$schema['properties']['avatar_urls']  = array(\n\t\t\t\t'description' => __( 'Avatar URLs for the user.' ),\n\t\t\t\t'type'        => 'object',\n\t\t\t\t'context'     => array( 'embed', 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t\t'properties'  => $avatar_properties,\n\t\t\t);\n\t\t}\n\n\t\t$schema['properties']['meta'] = $this->meta->get_field_schema();\n\n\t\treturn $this->add_additional_fields_schema( $schema );\n\t}\n\n\t/**\n\t * Retrieves the query params for collections.\n\t *\n\t * @since 4.7.0\n\t * @access public\n\t *\n\t * @return array Collection parameters.\n\t */\n\tpublic function get_collection_params() {\n\t\t$query_params = parent::get_collection_params();\n\n\t\t$query_params['context']['default'] = 'view';\n\n\t\t$query_params['exclude'] = array(\n\t\t\t'description'        => __( 'Ensure result set excludes specific IDs.' ),\n\t\t\t'type'               => 'array',\n\t\t\t'items'              => array(\n\t\t\t\t'type'           => 'integer',\n\t\t\t),\n\t\t\t'default'            => array(),\n\t\t);\n\n\t\t$query_params['include'] = array(\n\t\t\t'description'        => __( 'Limit result set to specific IDs.' ),\n\t\t\t'type'               => 'array',\n\t\t\t'items'              => array(\n\t\t\t\t'type'           => 'integer',\n\t\t\t),\n\t\t\t'default'            => array(),\n\t\t);\n\n\t\t$query_params['offset'] = array(\n\t\t\t'description'        => __( 'Offset the result set by a specific number of items.' ),\n\t\t\t'type'               => 'integer',\n\t\t);\n\n\t\t$query_params['order'] = array(\n\t\t\t'default'            => 'asc',\n\t\t\t'description'        => __( 'Order sort attribute ascending or descending.' ),\n\t\t\t'enum'               => array( 'asc', 'desc' ),\n\t\t\t'type'               => 'string',\n\t\t);\n\n\t\t$query_params['orderby'] = array(\n\t\t\t'default'            => 'name',\n\t\t\t'description'        => __( 'Sort collection by object attribute.' ),\n\t\t\t'enum'               => array(\n\t\t\t\t'id',\n\t\t\t\t'include',\n\t\t\t\t'name',\n\t\t\t\t'registered_date',\n\t\t\t\t'slug',\n\t\t\t\t'email',\n\t\t\t\t'url',\n\t\t\t),\n\t\t\t'type'               => 'string',\n\t\t);\n\n\t\t$query_params['slug']    = array(\n\t\t\t'description'        => __( 'Limit result set to users with a specific slug.' ),\n\t\t\t'type'               => 'string',\n\t\t);\n\n\t\t$query_params['roles']   = array(\n\t\t\t'description'        => __( 'Limit result set to users matching at least one specific role provided. Accepts csv list or single role.' ),\n\t\t\t'type'               => 'array',\n\t\t\t'items'              => array(\n\t\t\t\t'type'           => 'string',\n\t\t\t),\n\t\t);\n\n\t\t/**\n\t\t * Filter collection parameters for the users controller.\n\t\t *\n\t\t * This filter registers the collection parameter, but does not map the\n\t\t * collection parameter to an internal WP_User_Query parameter.  Use the\n\t\t * `rest_user_query` filter to set WP_User_Query arguments.\n\t\t *\n\t\t * @since 4.7.0\n\t\t *\n\t\t * @param array $query_params JSON Schema-formatted collection parameters.\n\t\t */\n\t\treturn apply_filters( 'rest_user_collection_params', $query_params );\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39843';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php", "wp-includes/version.php"], "buggy_code_start_loc": [252, 7], "buggy_code_end_loc": [253, 8], "fixing_code_start_loc": [252, 7], "fixing_code_end_loc": [253, 8], "type": "CWE-200", "message": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php in the REST API implementation in WordPress 4.7 before 4.7.1 does not properly restrict listings of post authors, which allows remote attackers to obtain sensitive information via a wp-json/wp/v2/users request.", "other": {"cve": {"id": "CVE-2017-5487", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-15T02:59:02.797", "lastModified": "2017-09-01T01:29:35.507", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php in the REST API implementation in WordPress 4.7 before 4.7.1 does not properly restrict listings of post authors, which allows remote attackers to obtain sensitive information via a wp-json/wp/v2/users request."}, {"lang": "es", "value": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php en la implementaci\u00f3n REST API en WordPress 4.7 en versiones anteriores a 4.7.1 no restringe adecuadamente los listados de autores de publicaci\u00f3n, lo que permite a atacantes remotos obtener informaci\u00f3n sensible a trav\u00e9s de una petici\u00f3n wp-json/wp/v2/users."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7", "matchCriteriaId": "5C55F44C-4A71-4C47-9908-071A23D46939"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2017/01/14/6", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/95391", "source": "cve@mitre.org"}, {"url": "http://www.securitytracker.com/id/1037591", "source": "cve@mitre.org"}, {"url": "https://codex.wordpress.org/Version_4.7.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/daf358983cc1ce0c77bf6d2de2ebbb43df2add60", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://wordpress.org/news/2017/01/wordpress-4-7-1-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8715", "source": "cve@mitre.org"}, {"url": "https://www.exploit-db.com/exploits/41497/", "source": "cve@mitre.org"}, {"url": "https://www.wordfence.com/blog/2016/12/wordfence-blocks-username-harvesting-via-new-rest-api-wp-4-7/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/daf358983cc1ce0c77bf6d2de2ebbb43df2add60"}}