{"buggy_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst path = require('path')\nconst async = require('async')\nconst express = require('express')\nconst mongoose = require('mongoose')\nconst APC = require('@handlebars/allow-prototype-access')\nconst HandleBars = require('handlebars')\nconst insecureHandlebars = APC.allowInsecurePrototypeAccess(HandleBars)\nconst hbs = require('express-hbs')\nconst hbsHelpers = require('../helpers/hbs/helpers')\nconst winston = require('../logger')\nconst flash = require('connect-flash')\nconst bodyParser = require('body-parser')\nconst cookieParser = require('cookie-parser')\nconst session = require('express-session')\nconst MongoStore = require('connect-mongo')\nconst passportConfig = require('../passport')()\n\nlet middleware = {}\n\nmodule.exports = function (app, db, callback) {\n  middleware = require('./middleware')(app)\n  app.disable('x-powered-by')\n\n  app.set('views', path.join(__dirname, '../views/'))\n\n  app.engine(\n    'hbs',\n    hbs.express4({\n      handlebars: insecureHandlebars,\n      defaultLayout: path.join(__dirname, '../views/layout/main.hbs'),\n      partialsDir: [path.join(__dirname, '../views/partials/'), path.join(__dirname, '../views/subviews/reports')]\n    })\n  )\n  app.set('view engine', 'hbs')\n  hbsHelpers.register(hbs.handlebars)\n  // Required to access handlebars in mail templates\n  global.Handlebars = hbs.handlebars\n\n  app.use(bodyParser.urlencoded({ limit: '2mb', extended: false }))\n  app.use(bodyParser.json({ limit: '2mb' }))\n  app.use(cookieParser())\n\n  app.use(express.static(path.join(__dirname, '../../public')))\n\n  app.use(function (req, res, next) {\n    if (mongoose.connection.readyState !== 1) {\n      const err = new Error('MongoDb Connection Error')\n      err.status = 503\n\n      return res.render('503', { layout: false })\n    }\n\n    return next()\n  })\n\n  const cookie = {\n    httpOnly: true,\n    maxAge: 1000 * 60 * 60 * 24 * 365 // 1 year\n  }\n\n  const sessionSecret = 'trudesk$123#SessionKeY!2387'\n  async.waterfall(\n    [\n      function (next) {\n        const sessionStore = MongoStore.create({\n          client: db.connection.getClient(),\n          autoReconnect: true\n        })\n        app.use(\n          session({\n            secret: sessionSecret,\n            cookie: cookie,\n            store: sessionStore,\n            saveUninitialized: false,\n            resave: false\n          })\n        )\n\n        next(null, sessionStore)\n      },\n      function (store, next) {\n        app.use(passportConfig.initialize())\n        app.use(passportConfig.session())\n        app.use(flash())\n\n        // CORS\n        app.use(allowCrossDomain)\n        const csrf = require('../dependencies/csrf-td')\n        csrf.init()\n        app.use(csrf.generateToken)\n\n        // Maintenance Mode\n        app.use(function (req, res, next) {\n          var settings = require('../settings/settingsUtil')\n          settings.getSettings(function (err, setting) {\n            if (err) return winston.warn(err)\n            var maintenanceMode = setting.data.settings.maintenanceMode\n\n            if (req.user) {\n              if (maintenanceMode.value === true && !req.user.role.isAdmin) {\n                return res.render('maintenance', { layout: false })\n              }\n            }\n\n            return next()\n          })\n        })\n\n        // Mobile\n        app.use('/mobile', express.static(path.join(__dirname, '../../', 'mobile')))\n\n        app.use('/assets', express.static(path.join(__dirname, '../../public/uploads/assets')))\n        app.use('/uploads/users', express.static(path.join(__dirname, '../../public/uploads/users')))\n        app.use('/uploads', middleware.hasAuth, express.static(path.join(__dirname, '../../public/uploads')))\n        app.use(\n          '/backups',\n          middleware.hasAuth,\n          middleware.isAdmin,\n          express.static(path.join(__dirname, '../../backups'))\n        )\n\n        // Uncomment to enable plugins\n        return next(null, store)\n        // global.plugins = [];\n        // var dive = require('dive');\n        // dive(path.join(__dirname, '../../plugins'), {directories: true, files: false, recursive: false}, function(err, dir) {\n        //    if (err) throw err;\n        //    var fs = require('fs');\n        //    if (fs.existsSync(path.join(dir, 'plugin.json'))) {\n        //        var plugin = require(path.join(dir, 'plugin.json'));\n        //        if (!_.isUndefined(_.find(global.plugins, {'name': plugin.name})))\n        //            throw new Error('Unable to load plugin with duplicate name: ' + plugin.name);\n        //\n        //        global.plugins.push({name: plugin.name.toLowerCase(), version: plugin.version});\n        //        var pluginPublic = path.join(dir, '/public');\n        //        app.use('/plugins/' + plugin.name, express.static(pluginPublic));\n        //        winston.debug('Detected Plugin: ' + plugin.name.toLowerCase() + '-' + plugin.version);\n        //    }\n        // }, function() {\n        //     next(null, store);\n        // });\n      }\n    ],\n    function (err, s) {\n      if (err) {\n        winston.error(err)\n        throw new Error(err)\n      }\n\n      callback(middleware, s)\n    }\n  )\n}\n\nfunction allowCrossDomain (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*')\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS')\n  res.setHeader(\n    'Access-Control-Allow-Headers',\n    'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,accesstoken,X-RToken,X-Token'\n  )\n\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200)\n  } else {\n    next()\n  }\n}\n"], "fixing_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst path = require('path')\nconst async = require('async')\nconst express = require('express')\nconst mongoose = require('mongoose')\nconst APC = require('@handlebars/allow-prototype-access')\nconst HandleBars = require('handlebars')\nconst insecureHandlebars = APC.allowInsecurePrototypeAccess(HandleBars)\nconst hbs = require('express-hbs')\nconst hbsHelpers = require('../helpers/hbs/helpers')\nconst winston = require('../logger')\nconst flash = require('connect-flash')\nconst bodyParser = require('body-parser')\nconst cookieParser = require('cookie-parser')\nconst session = require('express-session')\nconst MongoStore = require('connect-mongo')\nconst passportConfig = require('../passport')()\n\nlet middleware = {}\n\nmodule.exports = function (app, db, callback) {\n  middleware = require('./middleware')(app)\n  app.disable('x-powered-by')\n\n  app.set('views', path.join(__dirname, '../views/'))\n\n  app.engine(\n    'hbs',\n    hbs.express4({\n      handlebars: insecureHandlebars,\n      defaultLayout: path.join(__dirname, '../views/layout/main.hbs'),\n      partialsDir: [path.join(__dirname, '../views/partials/'), path.join(__dirname, '../views/subviews/reports')]\n    })\n  )\n  app.set('view engine', 'hbs')\n  hbsHelpers.register(hbs.handlebars)\n  // Required to access handlebars in mail templates\n  global.Handlebars = hbs.handlebars\n\n  app.use(bodyParser.urlencoded({ limit: '2mb', extended: false }))\n  app.use(bodyParser.json({ limit: '2mb' }))\n  app.use(cookieParser())\n\n  app.use(express.static(path.join(__dirname, '../../public')))\n\n  app.use(function (req, res, next) {\n    if (mongoose.connection.readyState !== 1) {\n      const err = new Error('MongoDb Connection Error')\n      err.status = 503\n\n      return res.render('503', { layout: false })\n    }\n\n    return next()\n  })\n\n  const cookie = {\n    httpOnly: true,\n    maxAge: 1000 * 60 * 60 * 24 * 365 // 1 year\n  }\n\n  const sessionSecret = 'trudesk$123#SessionKeY!2387'\n  async.waterfall(\n    [\n      function (next) {\n        const sessionStore = MongoStore.create({\n          client: db.connection.getClient(),\n          autoReconnect: true\n        })\n        app.use(\n          session({\n            secret: sessionSecret,\n            cookie: cookie,\n            store: sessionStore,\n            saveUninitialized: false,\n            resave: false\n          })\n        )\n\n        next(null, sessionStore)\n      },\n      function (store, next) {\n        app.use(passportConfig.initialize())\n        app.use(passportConfig.session())\n        app.use(flash())\n\n        // CORS\n        app.use(allowCrossDomain)\n        const csrf = require('../dependencies/csrf-td')\n        csrf.init()\n        app.use(csrf.generateToken)\n\n        // Maintenance Mode\n        app.use(function (req, res, next) {\n          var settings = require('../settings/settingsUtil')\n          settings.getSettings(function (err, setting) {\n            if (err) return winston.warn(err)\n            var maintenanceMode = setting.data.settings.maintenanceMode\n\n            if (req.user) {\n              if (maintenanceMode.value === true && !req.user.role.isAdmin) {\n                return res.render('maintenance', { layout: false })\n              }\n            }\n\n            return next()\n          })\n        })\n\n        // Mobile\n        app.use('/mobile', express.static(path.join(__dirname, '../../', 'mobile')))\n\n        app.use('/assets', express.static(path.join(__dirname, '../../public/uploads/assets')))\n        app.use('/uploads/users', express.static(path.join(__dirname, '../../public/uploads/users')))\n        app.use('/uploads', middleware.hasAuth, express.static(path.join(__dirname, '../../public/uploads')))\n        app.use(\n          '/backups',\n          middleware.hasAuth,\n          middleware.isAdmin,\n          express.static(path.join(__dirname, '../../backups'))\n        )\n\n        // Uncomment to enable plugins\n        return next(null, store)\n        // global.plugins = [];\n        // var dive = require('dive');\n        // dive(path.join(__dirname, '../../plugins'), {directories: true, files: false, recursive: false}, function(err, dir) {\n        //    if (err) throw err;\n        //    var fs = require('fs');\n        //    if (fs.existsSync(path.join(dir, 'plugin.json'))) {\n        //        var plugin = require(path.join(dir, 'plugin.json'));\n        //        if (!_.isUndefined(_.find(global.plugins, {'name': plugin.name})))\n        //            throw new Error('Unable to load plugin with duplicate name: ' + plugin.name);\n        //\n        //        global.plugins.push({name: plugin.name.toLowerCase(), version: plugin.version});\n        //        var pluginPublic = path.join(dir, '/public');\n        //        app.use('/plugins/' + plugin.name, express.static(pluginPublic));\n        //        winston.debug('Detected Plugin: ' + plugin.name.toLowerCase() + '-' + plugin.version);\n        //    }\n        // }, function() {\n        //     next(null, store);\n        // });\n      }\n    ],\n    function (err, s) {\n      if (err) {\n        winston.error(err)\n        throw new Error(err)\n      }\n\n      callback(middleware, s)\n    }\n  )\n}\n\nfunction allowCrossDomain (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*')\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS')\n  res.setHeader(\n    'Access-Control-Allow-Headers',\n    'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,accesstoken,X-RToken,X-Token'\n  )\n  res.setHeader('Content-Security-Policy', \"frame-ancestors 'none';\")\n\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200)\n  } else {\n    next()\n  }\n}\n"], "filenames": ["src/middleware/index.js"], "buggy_code_start_loc": [175], "buggy_code_end_loc": [175], "fixing_code_start_loc": [176], "fixing_code_end_loc": [177], "type": "CWE-1021", "message": "Improper Restriction of Rendered UI Layers or Frames in GitHub repository polonel/trudesk prior to 1.2.2.", "other": {"cve": {"id": "CVE-2022-1803", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-20T22:16:40.427", "lastModified": "2022-06-01T18:35:10.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Restriction of Rendered UI Layers or Frames in GitHub repository polonel/trudesk prior to 1.2.2."}, {"lang": "es", "value": "Una Restricci\u00f3n Inapropiada de Capas o Marcos de Interfaz de Usuario Renderizados en el repositorio de GitHub polonel/trudesk versiones anteriores a 1.2.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:N/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 4.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.7, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1021"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1021"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trudesk_project:trudesk:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.2", "matchCriteriaId": "129D9FED-E43F-47B1-8FB3-012D00E93181"}]}]}], "references": [{"url": "https://github.com/polonel/trudesk/commit/6ea9db7a5cf300e3cbf0eab7e1d6da1155a2f7f8", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/47cc6621-2474-40f9-ab68-3cf62389a124", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/polonel/trudesk/commit/6ea9db7a5cf300e3cbf0eab7e1d6da1155a2f7f8"}}