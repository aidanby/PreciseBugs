{"buggy_code": ["1.12.0\nAdd flag ACCEPT_NULL_DATES\n\n1.11.0\nTweaks to make it possible to use an arbitrary transport\nFix potential race condition\n\n1.10.0\nFix serialization of the sequence ']]>'\n\n1.9.0\nAdd FLAGS_DEBUG to display the xml returned by the server\n\n1.8.3\nFix compatibility with Android\n\n1.8.2\n\nForking from timroes project. The only purpose of this version is to have\nthe fix from 1.8.1 in maven central\n", "package de.timroes.axmlrpc;\n\nimport de.timroes.axmlrpc.serializer.SerializerHandler;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.util.Map;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\n/**\n * The ResponseParser parses the response of an XMLRPC server to an object.\n *\n * @author Tim Roes\n */\npublic class ResponseParser {\n\n\tprivate static final String FAULT_CODE = \"faultCode\";\n\tprivate static final String FAULT_STRING = \"faultString\";\n\n\t/**\n\t * The given InputStream must contain the xml response from an xmlrpc server.\n\t * This method extract the content of it as an object.\n\t *\n\t * @param serializerHandler You can inject an arbitrary one if you want to use your own transport protocol.\n\t *     See the README (section \"Using an arbitrary transport\") for more info on this feature.\n\t * @param response The InputStream of the server response.\n\t * @param debugMode This prints data on System.out to make it easy to debug\n\t * @return The returned object.\n\t * @throws XMLRPCException Will be thrown whenever something fails.\n\t * @throws XMLRPCServerException Will be thrown, if the server returns an error.\n\t */\n\tpublic Object parse(SerializerHandler serializerHandler, InputStream response, boolean debugMode) throws XMLRPCException {\n\n\t\ttry {\n\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\tfactory.setNamespaceAware(true);\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tDocument dom = builder.parse(response);\n\t\t\tif (debugMode ){\n\t\t\t\tprintDocument(dom, System.out);\n\t\t\t}\n\t\t\tElement e = dom.getDocumentElement();\n\n\n\t\t\t// Check for root tag\n\t\t\tif(!e.getNodeName().equals(XMLRPCClient.METHOD_RESPONSE)) {\n\t\t\t\tthrow new XMLRPCException(\"MethodResponse root tag is missing.\");\n\t\t\t}\n\n\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\tif(e.getNodeName().equals(XMLRPCClient.PARAMS)) {\n\n\t\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\t\tif(!e.getNodeName().equals(XMLRPCClient.PARAM)) {\n\t\t\t\t\tthrow new XMLRPCException(\"The params tag must contain a param tag.\");\n\t\t\t\t}\n\n\t\t\t\treturn getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t} else if(e.getNodeName().equals(XMLRPCClient.FAULT)) {\n\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tMap<String,Object> o = (Map<String,Object>)getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t\tthrow new XMLRPCServerException((String)o.get(FAULT_STRING), (Integer)o.get(FAULT_CODE));\n\n\t\t\t}\n\n\t\t\tthrow new XMLRPCException(\"The methodResponse tag must contain a fault or params tag.\");\n\n\t\t} catch(XMLRPCServerException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception ex) {\n\t\t\tthrow new XMLRPCException(\"Error getting result from server.\", ex);\n\t\t}\n\n\t}\n\n\tpublic static void printDocument(Document doc, OutputStream out) throws IOException, TransformerException {\n\t\tTransformerFactory tf = TransformerFactory.newInstance();\n\t\tTransformer transformer = tf.newTransformer();\n\t\ttransformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");\n\t\ttransformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n\t\ttransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\t\ttransformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n\t\ttransformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n\n\t\ttransformer.transform(new DOMSource(doc),\n\t\t\t\tnew StreamResult(new OutputStreamWriter(out, \"UTF-8\")));\n\t}\n\n\t/**\n\t * This method takes an element (must be a param or fault element) and\n\t * returns the deserialized object of this param tag.\n\t *\n\t * @param element An param element.\n\t * @return The deserialized object within the given param element.\n\t * @throws XMLRPCException Will be thrown when the structure of the document\n\t *\t\tdoesn't match the XML-RPC specification.\n\t */\n\tprivate Object getReturnValueFromElement(SerializerHandler serializerHandler, Element element) throws XMLRPCException {\n\n\t\tElement childElement = XMLUtil.getOnlyChildElement(element.getChildNodes());\n\n\t\treturn serializerHandler.deserialize(childElement);\n\t}\n\n}\n"], "fixing_code": ["Fix security issue CWE-611\n\n1.12.0\nAdd flag ACCEPT_NULL_DATES\n\n1.11.0\nTweaks to make it possible to use an arbitrary transport\nFix potential race condition\n\n1.10.0\nFix serialization of the sequence ']]>'\n\n1.9.0\nAdd FLAGS_DEBUG to display the xml returned by the server\n\n1.8.3\nFix compatibility with Android\n\n1.8.2\n\nForking from timroes project. The only purpose of this version is to have\nthe fix from 1.8.1 in maven central\n", "package de.timroes.axmlrpc;\n\nimport de.timroes.axmlrpc.serializer.SerializerHandler;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.util.Map;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\n/**\n * The ResponseParser parses the response of an XMLRPC server to an object.\n *\n * @author Tim Roes\n */\npublic class ResponseParser {\n\n\tprivate static final String FAULT_CODE = \"faultCode\";\n\tprivate static final String FAULT_STRING = \"faultString\";\n\n\t/**\n\t * The given InputStream must contain the xml response from an xmlrpc server.\n\t * This method extract the content of it as an object.\n\t *\n\t * @param serializerHandler You can inject an arbitrary one if you want to use your own transport protocol.\n\t *     See the README (section \"Using an arbitrary transport\") for more info on this feature.\n\t * @param response The InputStream of the server response.\n\t * @param debugMode This prints data on System.out to make it easy to debug\n\t * @return The returned object.\n\t * @throws XMLRPCException Will be thrown whenever something fails.\n\t * @throws XMLRPCServerException Will be thrown, if the server returns an error.\n\t */\n\tpublic Object parse(SerializerHandler serializerHandler, InputStream response, boolean debugMode) throws XMLRPCException {\n\n\t\ttry {\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\n\t\t\t// Ensure the xml parser won't allow exploitation of the vuln CWE-611\n\t\t\t// (described on https://cwe.mitre.org/data/definitions/611.html )\n\t\t\tfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\t\tfactory.setExpandEntityReferences(false);\n\t\t\tfactory.setNamespaceAware(true);\n\t\t\tfactory.setXIncludeAware(false);\n\t\t\tfactory.setExpandEntityReferences(false);\n\t\t\t// End of the configuration of the parser for CWE-611\n\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tDocument dom = builder.parse(response);\n\t\t\tif (debugMode ){\n\t\t\t\tprintDocument(dom, System.out);\n\t\t\t}\n\t\t\tElement e = dom.getDocumentElement();\n\n\n\t\t\t// Check for root tag\n\t\t\tif(!e.getNodeName().equals(XMLRPCClient.METHOD_RESPONSE)) {\n\t\t\t\tthrow new XMLRPCException(\"MethodResponse root tag is missing.\");\n\t\t\t}\n\n\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\tif(e.getNodeName().equals(XMLRPCClient.PARAMS)) {\n\n\t\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\t\tif(!e.getNodeName().equals(XMLRPCClient.PARAM)) {\n\t\t\t\t\tthrow new XMLRPCException(\"The params tag must contain a param tag.\");\n\t\t\t\t}\n\n\t\t\t\treturn getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t} else if(e.getNodeName().equals(XMLRPCClient.FAULT)) {\n\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tMap<String,Object> o = (Map<String,Object>)getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t\tthrow new XMLRPCServerException((String)o.get(FAULT_STRING), (Integer)o.get(FAULT_CODE));\n\n\t\t\t}\n\n\t\t\tthrow new XMLRPCException(\"The methodResponse tag must contain a fault or params tag.\");\n\n\t\t} catch(XMLRPCServerException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception ex) {\n\t\t\tthrow new XMLRPCException(\"Error getting result from server.\", ex);\n\t\t}\n\n\t}\n\n\tpublic static void printDocument(Document doc, OutputStream out) throws IOException, TransformerException {\n\t\tTransformerFactory tf = TransformerFactory.newInstance();\n\t\tTransformer transformer = tf.newTransformer();\n\t\ttransformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");\n\t\ttransformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n\t\ttransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\t\ttransformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n\t\ttransformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n\n\t\ttransformer.transform(new DOMSource(doc),\n\t\t\t\tnew StreamResult(new OutputStreamWriter(out, \"UTF-8\")));\n\t}\n\n\t/**\n\t * This method takes an element (must be a param or fault element) and\n\t * returns the deserialized object of this param tag.\n\t *\n\t * @param element An param element.\n\t * @return The deserialized object within the given param element.\n\t * @throws XMLRPCException Will be thrown when the structure of the document\n\t *\t\tdoesn't match the XML-RPC specification.\n\t */\n\tprivate Object getReturnValueFromElement(SerializerHandler serializerHandler, Element element) throws XMLRPCException {\n\n\t\tElement childElement = XMLUtil.getOnlyChildElement(element.getChildNodes());\n\n\t\treturn serializerHandler.deserialize(childElement);\n\t}\n\n}\n"], "filenames": ["Changelog", "src/main/java/de/timroes/axmlrpc/ResponseParser.java"], "buggy_code_start_loc": [0, 12], "buggy_code_end_loc": [0, 50], "fixing_code_start_loc": [1, 13], "fixing_code_end_loc": [3, 60], "type": "CWE-611", "message": "A vulnerability classified as problematic was found in gturri aXMLRPC up to 1.12.0. This vulnerability affects the function ResponseParser of the file src/main/java/de/timroes/axmlrpc/ResponseParser.java. The manipulation leads to xml external entity reference. Upgrading to version 1.12.1 is able to address this issue. The name of the patch is ad6615b3ec41353e614f6ea5fdd5b046442a832b. It is recommended to upgrade the affected component. VDB-217450 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2020-36641", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-05T12:15:09.287", "lastModified": "2023-01-11T19:33:44.993", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in gturri aXMLRPC up to 1.12.0. This vulnerability affects the function ResponseParser of the file src/main/java/de/timroes/axmlrpc/ResponseParser.java. The manipulation leads to xml external entity reference. Upgrading to version 1.12.1 is able to address this issue. The name of the patch is ad6615b3ec41353e614f6ea5fdd5b046442a832b. It is recommended to upgrade the affected component. VDB-217450 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.4, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:axmlrpc_project:axmlrpc:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.12.1", "matchCriteriaId": "1D4F01CD-473F-48FC-9B62-1130D803A6EB"}]}]}], "references": [{"url": "https://github.com/gturri/aXMLRPC/commit/ad6615b3ec41353e614f6ea5fdd5b046442a832b", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gturri/aXMLRPC/releases/tag/aXMLRPC-1.12.1", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217450", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217450", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gturri/aXMLRPC/commit/ad6615b3ec41353e614f6ea5fdd5b046442a832b"}}