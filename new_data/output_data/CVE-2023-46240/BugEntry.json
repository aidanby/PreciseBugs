{"buggy_code": ["<?php\n\n/*\n |--------------------------------------------------------------------------\n | ERROR DISPLAY\n |--------------------------------------------------------------------------\n | In development, we want to show as many errors as possible to help\n | make sure they don't make it to production. And save us hours of\n | painful debugging.\n */\nerror_reporting(-1);\nini_set('display_errors', '1');\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG BACKTRACES\n |--------------------------------------------------------------------------\n | If true, this constant will tell the error screens to display debug\n | backtraces along with the other error information. If you would\n | prefer to not see this, set this value to false.\n */\ndefined('SHOW_DEBUG_BACKTRACE') || define('SHOW_DEBUG_BACKTRACE', true);\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG MODE\n |--------------------------------------------------------------------------\n | Debug mode is an experimental flag that can allow changes throughout\n | the system. This will control whether Kint is loaded, and a few other\n | items. It can always be used within your own application too.\n */\ndefined('CI_DEBUG') || define('CI_DEBUG', true);\n", "<?php\n\n/*\n |--------------------------------------------------------------------------\n | ERROR DISPLAY\n |--------------------------------------------------------------------------\n | Don't show ANY in production environments. Instead, let the system catch\n | it and display a generic error message.\n */\nini_set('display_errors', '0');\nerror_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_USER_NOTICE & ~E_USER_DEPRECATED);\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG MODE\n |--------------------------------------------------------------------------\n | Debug mode is an experimental flag that can allow changes throughout\n | the system. It's not widely used currently, and may not survive\n | release of the framework.\n */\ndefined('CI_DEBUG') || define('CI_DEBUG', false);\n", "<?php\n\n/*\n |--------------------------------------------------------------------------\n | ERROR DISPLAY\n |--------------------------------------------------------------------------\n | In development, we want to show as many errors as possible to help\n | make sure they don't make it to production. And save us hours of\n | painful debugging.\n */\nerror_reporting(-1);\nini_set('display_errors', '1');\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG BACKTRACES\n |--------------------------------------------------------------------------\n | If true, this constant will tell the error screens to display debug\n | backtraces along with the other error information. If you would\n | prefer to not see this, set this value to false.\n */\ndefined('SHOW_DEBUG_BACKTRACE') || define('SHOW_DEBUG_BACKTRACE', true);\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG MODE\n |--------------------------------------------------------------------------\n | Debug mode is an experimental flag that can allow changes throughout\n | the system. It's not widely used currently, and may not survive\n | release of the framework.\n */\ndefined('CI_DEBUG') || define('CI_DEBUG', true);\n", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title><?= lang('Errors.pageNotFound') ?></title>\n\n    <style>\n        div.logo {\n            height: 200px;\n            width: 155px;\n            display: inline-block;\n            opacity: 0.08;\n            position: absolute;\n            top: 2rem;\n            left: 50%;\n            margin-left: -73px;\n        }\n        body {\n            height: 100%;\n            background: #fafafa;\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            color: #777;\n            font-weight: 300;\n        }\n        h1 {\n            font-weight: lighter;\n            letter-spacing: normal;\n            font-size: 3rem;\n            margin-top: 0;\n            margin-bottom: 0;\n            color: #222;\n        }\n        .wrap {\n            max-width: 1024px;\n            margin: 5rem auto;\n            padding: 2rem;\n            background: #fff;\n            text-align: center;\n            border: 1px solid #efefef;\n            border-radius: 0.5rem;\n            position: relative;\n        }\n        pre {\n            white-space: normal;\n            margin-top: 1.5rem;\n        }\n        code {\n            background: #fafafa;\n            border: 1px solid #efefef;\n            padding: 0.5rem 1rem;\n            border-radius: 5px;\n            display: block;\n        }\n        p {\n            margin-top: 1.5rem;\n        }\n        .footer {\n            margin-top: 2rem;\n            border-top: 1px solid #efefef;\n            padding: 1em 2em 0 2em;\n            font-size: 85%;\n            color: #999;\n        }\n        a:active,\n        a:link,\n        a:visited {\n            color: #dd4814;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"wrap\">\n        <h1>404</h1>\n\n        <p>\n            <?php if (ENVIRONMENT !== 'production') : ?>\n                <?= nl2br(esc($message)) ?>\n            <?php else : ?>\n                <?= lang('Errors.sorryCannotFind') ?>\n            <?php endif ?>\n        </p>\n    </div>\n</body>\n</html>\n", "<?php\nuse Config\\Services;\nuse CodeIgniter\\CodeIgniter;\n\n$errorId = uniqid('error', true);\n?>\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"robots\" content=\"noindex\">\n\n    <title><?= esc($title) ?></title>\n    <style>\n        <?= preg_replace('#[\\r\\n\\t ]+#', ' ', file_get_contents(__DIR__ . DIRECTORY_SEPARATOR . 'debug.css')) ?>\n    </style>\n\n    <script>\n        <?= file_get_contents(__DIR__ . DIRECTORY_SEPARATOR . 'debug.js') ?>\n    </script>\n</head>\n<body onload=\"init()\">\n\n    <!-- Header -->\n    <div class=\"header\">\n        <div class=\"container\">\n            <h1><?= esc($title), esc($exception->getCode() ? ' #' . $exception->getCode() : '') ?></h1>\n            <p>\n                <?= nl2br(esc($exception->getMessage())) ?>\n                <a href=\"https://www.duckduckgo.com/?q=<?= urlencode($title . ' ' . preg_replace('#\\'.*\\'|\".*\"#Us', '', $exception->getMessage())) ?>\"\n                   rel=\"noreferrer\" target=\"_blank\">search &rarr;</a>\n            </p>\n        </div>\n    </div>\n\n    <!-- Source -->\n    <div class=\"container\">\n        <p><b><?= esc(clean_path($file)) ?></b> at line <b><?= esc($line) ?></b></p>\n\n        <?php if (is_file($file)) : ?>\n            <div class=\"source\">\n                <?= static::highlightFile($file, $line, 15); ?>\n            </div>\n        <?php endif; ?>\n    </div>\n\n    <div class=\"container\">\n\n        <ul class=\"tabs\" id=\"tabs\">\n            <li><a href=\"#backtrace\">Backtrace</a></li>\n            <li><a href=\"#server\">Server</a></li>\n            <li><a href=\"#request\">Request</a></li>\n            <li><a href=\"#response\">Response</a></li>\n            <li><a href=\"#files\">Files</a></li>\n            <li><a href=\"#memory\">Memory</a></li>\n        </ul>\n\n        <div class=\"tab-content\">\n\n            <!-- Backtrace -->\n            <div class=\"content\" id=\"backtrace\">\n\n                <ol class=\"trace\">\n                <?php foreach ($trace as $index => $row) : ?>\n\n                    <li>\n                        <p>\n                            <!-- Trace info -->\n                            <?php if (isset($row['file']) && is_file($row['file'])) :?>\n                                <?php\n                                if (isset($row['function']) && in_array($row['function'], ['include', 'include_once', 'require', 'require_once'], true)) {\n                                    echo esc($row['function'] . ' ' . clean_path($row['file']));\n                                } else {\n                                    echo esc(clean_path($row['file']) . ' : ' . $row['line']);\n                                }\n                                ?>\n                            <?php else: ?>\n                                {PHP internal code}\n                            <?php endif; ?>\n\n                            <!-- Class/Method -->\n                            <?php if (isset($row['class'])) : ?>\n                                &nbsp;&nbsp;&mdash;&nbsp;&nbsp;<?= esc($row['class'] . $row['type'] . $row['function']) ?>\n                                <?php if (! empty($row['args'])) : ?>\n                                    <?php $argsId = $errorId . 'args' . $index ?>\n                                    ( <a href=\"#\" onclick=\"return toggle('<?= esc($argsId, 'attr') ?>');\">arguments</a> )\n                                    <div class=\"args\" id=\"<?= esc($argsId, 'attr') ?>\">\n                                        <table cellspacing=\"0\">\n\n                                        <?php\n                                        $params = null;\n                                        // Reflection by name is not available for closure function\n                                        if (substr($row['function'], -1) !== '}') {\n                                            $mirror = isset($row['class']) ? new ReflectionMethod($row['class'], $row['function']) : new ReflectionFunction($row['function']);\n                                            $params = $mirror->getParameters();\n                                        }\n\n                                        foreach ($row['args'] as $key => $value) : ?>\n                                            <tr>\n                                                <td><code><?= esc(isset($params[$key]) ? '$' . $params[$key]->name : \"#{$key}\") ?></code></td>\n                                                <td><pre><?= esc(print_r($value, true)) ?></pre></td>\n                                            </tr>\n                                        <?php endforeach ?>\n\n                                        </table>\n                                    </div>\n                                <?php else : ?>\n                                    ()\n                                <?php endif; ?>\n                            <?php endif; ?>\n\n                            <?php if (! isset($row['class']) && isset($row['function'])) : ?>\n                                &nbsp;&nbsp;&mdash;&nbsp;&nbsp;    <?= esc($row['function']) ?>()\n                            <?php endif; ?>\n                        </p>\n\n                        <!-- Source? -->\n                        <?php if (isset($row['file']) && is_file($row['file']) && isset($row['class'])) : ?>\n                            <div class=\"source\">\n                                <?= static::highlightFile($row['file'], $row['line']) ?>\n                            </div>\n                        <?php endif; ?>\n                    </li>\n\n                <?php endforeach; ?>\n                </ol>\n\n            </div>\n\n            <!-- Server -->\n            <div class=\"content\" id=\"server\">\n                <?php foreach (['_SERVER', '_SESSION'] as $var) : ?>\n                    <?php\n                    if (empty($GLOBALS[$var]) || ! is_array($GLOBALS[$var])) {\n                        continue;\n                    } ?>\n\n                    <h3>$<?= esc($var) ?></h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Key</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($GLOBALS[$var] as $key => $value) : ?>\n                            <tr>\n                                <td><?= esc($key) ?></td>\n                                <td>\n                                    <?php if (is_string($value)) : ?>\n                                        <?= esc($value) ?>\n                                    <?php else: ?>\n                                        <pre><?= esc(print_r($value, true)) ?></pre>\n                                    <?php endif; ?>\n                                </td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endforeach ?>\n\n                <!-- Constants -->\n                <?php $constants = get_defined_constants(true); ?>\n                <?php if (! empty($constants['user'])) : ?>\n                    <h3>Constants</h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Key</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($constants['user'] as $key => $value) : ?>\n                            <tr>\n                                <td><?= esc($key) ?></td>\n                                <td>\n                                    <?php if (is_string($value)) : ?>\n                                        <?= esc($value) ?>\n                                    <?php else: ?>\n                                        <pre><?= esc(print_r($value, true)) ?></pre>\n                                    <?php endif; ?>\n                                </td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n                <?php endif; ?>\n            </div>\n\n            <!-- Request -->\n            <div class=\"content\" id=\"request\">\n                <?php $request = Services::request(); ?>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td style=\"width: 10em\">Path</td>\n                            <td><?= esc($request->getUri()) ?></td>\n                        </tr>\n                        <tr>\n                            <td>HTTP Method</td>\n                            <td><?= esc(strtoupper($request->getMethod())) ?></td>\n                        </tr>\n                        <tr>\n                            <td>IP Address</td>\n                            <td><?= esc($request->getIPAddress()) ?></td>\n                        </tr>\n                        <tr>\n                            <td style=\"width: 10em\">Is AJAX Request?</td>\n                            <td><?= $request->isAJAX() ? 'yes' : 'no' ?></td>\n                        </tr>\n                        <tr>\n                            <td>Is CLI Request?</td>\n                            <td><?= $request->isCLI() ? 'yes' : 'no' ?></td>\n                        </tr>\n                        <tr>\n                            <td>Is Secure Request?</td>\n                            <td><?= $request->isSecure() ? 'yes' : 'no' ?></td>\n                        </tr>\n                        <tr>\n                            <td>User Agent</td>\n                            <td><?= esc($request->getUserAgent()->getAgentString()) ?></td>\n                        </tr>\n\n                    </tbody>\n                </table>\n\n\n                <?php $empty = true; ?>\n                <?php foreach (['_GET', '_POST', '_COOKIE'] as $var) : ?>\n                    <?php\n                    if (empty($GLOBALS[$var]) || ! is_array($GLOBALS[$var])) {\n                        continue;\n                    } ?>\n\n                    <?php $empty = false; ?>\n\n                    <h3>$<?= esc($var) ?></h3>\n\n                    <table style=\"width: 100%\">\n                        <thead>\n                            <tr>\n                                <th>Key</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($GLOBALS[$var] as $key => $value) : ?>\n                            <tr>\n                                <td><?= esc($key) ?></td>\n                                <td>\n                                    <?php if (is_string($value)) : ?>\n                                        <?= esc($value) ?>\n                                    <?php else: ?>\n                                        <pre><?= esc(print_r($value, true)) ?></pre>\n                                    <?php endif; ?>\n                                </td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endforeach ?>\n\n                <?php if ($empty) : ?>\n\n                    <div class=\"alert\">\n                        No $_GET, $_POST, or $_COOKIE Information to show.\n                    </div>\n\n                <?php endif; ?>\n\n                <?php $headers = $request->headers(); ?>\n                <?php if (! empty($headers)) : ?>\n\n                    <h3>Headers</h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Header</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($headers as $header) : ?>\n                            <tr>\n                                <td><?= esc($header->getName(), 'html') ?></td>\n                                <td><?= esc($header->getValueLine(), 'html') ?></td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endif; ?>\n            </div>\n\n            <!-- Response -->\n            <?php\n                $response = Services::response();\n                $response->setStatusCode(http_response_code());\n            ?>\n            <div class=\"content\" id=\"response\">\n                <table>\n                    <tr>\n                        <td style=\"width: 15em\">Response Status</td>\n                        <td><?= esc($response->getStatusCode() . ' - ' . $response->getReasonPhrase()) ?></td>\n                    </tr>\n                </table>\n\n                <?php $headers = $response->headers(); ?>\n                <?php if (! empty($headers)) : ?>\n                    <?php natsort($headers) ?>\n\n                    <h3>Headers</h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Header</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach (array_keys($headers) as $name) : ?>\n                            <tr>\n                                <td><?= esc($name, 'html') ?></td>\n                                <td><?= esc($response->getHeaderLine($name), 'html') ?></td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endif; ?>\n            </div>\n\n            <!-- Files -->\n            <div class=\"content\" id=\"files\">\n                <?php $files = get_included_files(); ?>\n\n                <ol>\n                <?php foreach ($files as $file) :?>\n                    <li><?= esc(clean_path($file)) ?></li>\n                <?php endforeach ?>\n                </ol>\n            </div>\n\n            <!-- Memory -->\n            <div class=\"content\" id=\"memory\">\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>Memory Usage</td>\n                            <td><?= esc(static::describeMemory(memory_get_usage(true))) ?></td>\n                        </tr>\n                        <tr>\n                            <td style=\"width: 12em\">Peak Memory Usage:</td>\n                            <td><?= esc(static::describeMemory(memory_get_peak_usage(true))) ?></td>\n                        </tr>\n                        <tr>\n                            <td>Memory Limit:</td>\n                            <td><?= esc(ini_get('memory_limit')) ?></td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </div>\n\n        </div>  <!-- /tab-content -->\n\n    </div> <!-- /container -->\n\n    <div class=\"footer\">\n        <div class=\"container\">\n\n            <p>\n                Displayed at <?= esc(date('H:i:sa')) ?> &mdash;\n                PHP: <?= esc(PHP_VERSION) ?>  &mdash;\n                CodeIgniter: <?= esc(CodeIgniter::CI_VERSION) ?>\n            </p>\n\n        </div>\n    </div>\n\n</body>\n</html>\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Debug;\n\nuse CodeIgniter\\API\\ResponseTrait;\nuse CodeIgniter\\Exceptions\\PageNotFoundException;\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\IncomingRequest;\nuse CodeIgniter\\HTTP\\RequestInterface;\nuse CodeIgniter\\HTTP\\ResponseInterface;\nuse Config\\Paths;\nuse Throwable;\n\n/**\n * @see \\CodeIgniter\\Debug\\ExceptionHandlerTest\n */\nfinal class ExceptionHandler extends BaseExceptionHandler implements ExceptionHandlerInterface\n{\n    use ResponseTrait;\n\n    /**\n     * ResponseTrait needs this.\n     */\n    private ?RequestInterface $request = null;\n\n    /**\n     * ResponseTrait needs this.\n     */\n    private ?ResponseInterface $response = null;\n\n    /**\n     * Determines the correct way to display the error.\n     */\n    public function handle(\n        Throwable $exception,\n        RequestInterface $request,\n        ResponseInterface $response,\n        int $statusCode,\n        int $exitCode\n    ): void {\n        // ResponseTrait needs these properties.\n        $this->request  = $request;\n        $this->response = $response;\n\n        if ($request instanceof IncomingRequest) {\n            try {\n                $response->setStatusCode($statusCode);\n            } catch (HTTPException $e) {\n                // Workaround for invalid HTTP status code.\n                $statusCode = 500;\n                $response->setStatusCode($statusCode);\n            }\n\n            if (! headers_sent()) {\n                header(\n                    sprintf(\n                        'HTTP/%s %s %s',\n                        $request->getProtocolVersion(),\n                        $response->getStatusCode(),\n                        $response->getReasonPhrase()\n                    ),\n                    true,\n                    $statusCode\n                );\n            }\n\n            if (strpos($request->getHeaderLine('accept'), 'text/html') === false) {\n                $data = (ENVIRONMENT === 'development' || ENVIRONMENT === 'testing')\n                    ? $this->collectVars($exception, $statusCode)\n                    : '';\n\n                $this->respond($data, $statusCode)->send();\n\n                if (ENVIRONMENT !== 'testing') {\n                    // @codeCoverageIgnoreStart\n                    exit($exitCode);\n                    // @codeCoverageIgnoreEnd\n                }\n\n                return;\n            }\n        }\n\n        // Determine possible directories of error views\n        $addPath = ($request instanceof IncomingRequest ? 'html' : 'cli') . DIRECTORY_SEPARATOR;\n        $path    = $this->viewPath . $addPath;\n        $altPath = rtrim((new Paths())->viewDirectory, '\\\\/ ')\n            . DIRECTORY_SEPARATOR . 'errors' . DIRECTORY_SEPARATOR . $addPath;\n\n        // Determine the views\n        $view    = $this->determineView($exception, $path);\n        $altView = $this->determineView($exception, $altPath);\n\n        // Check if the view exists\n        $viewFile = null;\n        if (is_file($path . $view)) {\n            $viewFile = $path . $view;\n        } elseif (is_file($altPath . $altView)) {\n            $viewFile = $altPath . $altView;\n        }\n\n        // Displays the HTML or CLI error code.\n        $this->render($exception, $statusCode, $viewFile);\n\n        if (ENVIRONMENT !== 'testing') {\n            // @codeCoverageIgnoreStart\n            exit($exitCode);\n            // @codeCoverageIgnoreEnd\n        }\n    }\n\n    /**\n     * Determines the view to display based on the exception thrown,\n     * whether an HTTP or CLI request, etc.\n     *\n     * @return string The filename of the view file to use\n     */\n    protected function determineView(Throwable $exception, string $templatePath): string\n    {\n        // Production environments should have a custom exception file.\n        $view = 'production.php';\n\n        if (str_ireplace(['off', 'none', 'no', 'false', 'null'], '', ini_get('display_errors')) !== '') {\n            $view = 'error_exception.php';\n        }\n\n        // 404 Errors\n        if ($exception instanceof PageNotFoundException) {\n            return 'error_404.php';\n        }\n\n        $templatePath = rtrim($templatePath, '\\\\/ ') . DIRECTORY_SEPARATOR;\n\n        // Allow for custom views based upon the status code\n        if (is_file($templatePath . 'error_' . $exception->getCode() . '.php')) {\n            return 'error_' . $exception->getCode() . '.php';\n        }\n\n        return $view;\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Debug;\n\nuse CodeIgniter\\API\\ResponseTrait;\nuse CodeIgniter\\Exceptions\\HasExitCodeInterface;\nuse CodeIgniter\\Exceptions\\HTTPExceptionInterface;\nuse CodeIgniter\\Exceptions\\PageNotFoundException;\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\RequestInterface;\nuse CodeIgniter\\HTTP\\ResponseInterface;\nuse Config\\Exceptions as ExceptionsConfig;\nuse Config\\Paths;\nuse Config\\Services;\nuse ErrorException;\nuse Psr\\Log\\LogLevel;\nuse Throwable;\n\n/**\n * Exceptions manager\n *\n * @see \\CodeIgniter\\Debug\\ExceptionsTest\n */\nclass Exceptions\n{\n    use ResponseTrait;\n\n    /**\n     * Nesting level of the output buffering mechanism\n     *\n     * @var int\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    public $ob_level;\n\n    /**\n     * The path to the directory containing the\n     * cli and html error view directories.\n     *\n     * @var string\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected $viewPath;\n\n    /**\n     * Config for debug exceptions.\n     *\n     * @var ExceptionsConfig\n     */\n    protected $config;\n\n    /**\n     * The request.\n     *\n     * @var RequestInterface|null\n     */\n    protected $request;\n\n    /**\n     * The outgoing response.\n     *\n     * @var ResponseInterface\n     */\n    protected $response;\n\n    private ?Throwable $exceptionCaughtByExceptionHandler = null;\n\n    public function __construct(ExceptionsConfig $config)\n    {\n        // For backward compatibility\n        $this->ob_level = ob_get_level();\n        $this->viewPath = rtrim($config->errorViewPath, '\\\\/ ') . DIRECTORY_SEPARATOR;\n\n        $this->config = $config;\n\n        // workaround for upgraded users\n        // This causes \"Deprecated: Creation of dynamic property\" in PHP 8.2.\n        // @TODO remove this after dropping PHP 8.1 support.\n        if (! isset($this->config->sensitiveDataInTrace)) {\n            $this->config->sensitiveDataInTrace = [];\n        }\n        if (! isset($this->config->logDeprecations, $this->config->deprecationLogLevel)) {\n            $this->config->logDeprecations     = false;\n            $this->config->deprecationLogLevel = LogLevel::WARNING;\n        }\n    }\n\n    /**\n     * Responsible for registering the error, exception and shutdown\n     * handling of our application.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    public function initialize()\n    {\n        set_exception_handler([$this, 'exceptionHandler']);\n        set_error_handler([$this, 'errorHandler']);\n        register_shutdown_function([$this, 'shutdownHandler']);\n    }\n\n    /**\n     * Catches any uncaught errors and exceptions, including most Fatal errors\n     * (Yay PHP7!). Will log the error, display it if display_errors is on,\n     * and fire an event that allows custom actions to be taken at this point.\n     *\n     * @return void\n     * @phpstan-return never|void\n     */\n    public function exceptionHandler(Throwable $exception)\n    {\n        $this->exceptionCaughtByExceptionHandler = $exception;\n\n        [$statusCode, $exitCode] = $this->determineCodes($exception);\n\n        if ($this->config->log === true && ! in_array($statusCode, $this->config->ignoreCodes, true)) {\n            log_message('critical', \"{message}\\nin {exFile} on line {exLine}.\\n{trace}\", [\n                'message' => $exception->getMessage(),\n                'exFile'  => clean_path($exception->getFile()), // {file} refers to THIS file\n                'exLine'  => $exception->getLine(), // {line} refers to THIS line\n                'trace'   => self::renderBacktrace($exception->getTrace()),\n            ]);\n        }\n\n        $this->request  = Services::request();\n        $this->response = Services::response();\n\n        // Get the first exception.\n        while ($prevException = $exception->getPrevious()) {\n            $exception = $prevException;\n        }\n\n        if (method_exists($this->config, 'handler')) {\n            // Use new ExceptionHandler\n            $handler = $this->config->handler($statusCode, $exception);\n            $handler->handle(\n                $exception,\n                $this->request,\n                $this->response,\n                $statusCode,\n                $exitCode\n            );\n\n            return;\n        }\n\n        // For backward compatibility\n        if (! is_cli()) {\n            try {\n                $this->response->setStatusCode($statusCode);\n            } catch (HTTPException $e) {\n                // Workaround for invalid HTTP status code.\n                $statusCode = 500;\n                $this->response->setStatusCode($statusCode);\n            }\n\n            if (! headers_sent()) {\n                header(sprintf('HTTP/%s %s %s', $this->request->getProtocolVersion(), $this->response->getStatusCode(), $this->response->getReasonPhrase()), true, $statusCode);\n            }\n\n            if (strpos($this->request->getHeaderLine('accept'), 'text/html') === false) {\n                $this->respond(ENVIRONMENT === 'development' ? $this->collectVars($exception, $statusCode) : '', $statusCode)->send();\n\n                exit($exitCode);\n            }\n        }\n\n        $this->render($exception, $statusCode);\n\n        exit($exitCode);\n    }\n\n    /**\n     * The callback to be registered to `set_error_handler()`.\n     *\n     * @return bool\n     *\n     * @throws ErrorException\n     *\n     * @codeCoverageIgnore\n     */\n    public function errorHandler(int $severity, string $message, ?string $file = null, ?int $line = null)\n    {\n        if ($this->isDeprecationError($severity)) {\n            if (! $this->config->logDeprecations || (bool) env('CODEIGNITER_SCREAM_DEPRECATIONS')) {\n                throw new ErrorException($message, 0, $severity, $file, $line);\n            }\n\n            return $this->handleDeprecationError($message, $file, $line);\n        }\n\n        if ((error_reporting() & $severity) !== 0) {\n            throw new ErrorException($message, 0, $severity, $file, $line);\n        }\n\n        return false; // return false to propagate the error to PHP standard error handler\n    }\n\n    /**\n     * Checks to see if any errors have happened during shutdown that\n     * need to be caught and handle them.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     * @phpstan-return never|void\n     */\n    public function shutdownHandler()\n    {\n        $error = error_get_last();\n\n        if ($error === null) {\n            return;\n        }\n\n        ['type' => $type, 'message' => $message, 'file' => $file, 'line' => $line] = $error;\n\n        if ($this->exceptionCaughtByExceptionHandler instanceof Throwable) {\n            $message .= \"\\n\u3010Previous Exception\u3011\\n\"\n                . get_class($this->exceptionCaughtByExceptionHandler) . \"\\n\"\n                . $this->exceptionCaughtByExceptionHandler->getMessage() . \"\\n\"\n                . $this->exceptionCaughtByExceptionHandler->getTraceAsString();\n        }\n\n        if (in_array($type, [E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_PARSE], true)) {\n            $this->exceptionHandler(new ErrorException($message, 0, $type, $file, $line));\n        }\n    }\n\n    /**\n     * Determines the view to display based on the exception thrown,\n     * whether an HTTP or CLI request, etc.\n     *\n     * @return string The path and filename of the view file to use\n     *\n     * @deprecated 4.4.0 No longer used. Moved to ExceptionHandler.\n     */\n    protected function determineView(Throwable $exception, string $templatePath): string\n    {\n        // Production environments should have a custom exception file.\n        $view         = 'production.php';\n        $templatePath = rtrim($templatePath, '\\\\/ ') . DIRECTORY_SEPARATOR;\n\n        if (str_ireplace(['off', 'none', 'no', 'false', 'null'], '', ini_get('display_errors')) !== '') {\n            $view = 'error_exception.php';\n        }\n\n        // 404 Errors\n        if ($exception instanceof PageNotFoundException) {\n            return 'error_404.php';\n        }\n\n        // Allow for custom views based upon the status code\n        if (is_file($templatePath . 'error_' . $exception->getCode() . '.php')) {\n            return 'error_' . $exception->getCode() . '.php';\n        }\n\n        return $view;\n    }\n\n    /**\n     * Given an exception and status code will display the error to the client.\n     *\n     * @return void\n     * @phpstan-return never|void\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected function render(Throwable $exception, int $statusCode)\n    {\n        // Determine possible directories of error views\n        $path    = $this->viewPath;\n        $altPath = rtrim((new Paths())->viewDirectory, '\\\\/ ') . DIRECTORY_SEPARATOR . 'errors' . DIRECTORY_SEPARATOR;\n\n        $path    .= (is_cli() ? 'cli' : 'html') . DIRECTORY_SEPARATOR;\n        $altPath .= (is_cli() ? 'cli' : 'html') . DIRECTORY_SEPARATOR;\n\n        // Determine the views\n        $view    = $this->determineView($exception, $path);\n        $altView = $this->determineView($exception, $altPath);\n\n        // Check if the view exists\n        if (is_file($path . $view)) {\n            $viewFile = $path . $view;\n        } elseif (is_file($altPath . $altView)) {\n            $viewFile = $altPath . $altView;\n        }\n\n        if (! isset($viewFile)) {\n            echo 'The error view files were not found. Cannot render exception trace.';\n\n            exit(1);\n        }\n\n        echo(function () use ($exception, $statusCode, $viewFile): string {\n            $vars = $this->collectVars($exception, $statusCode);\n            extract($vars, EXTR_SKIP);\n\n            ob_start();\n            include $viewFile;\n\n            return ob_get_clean();\n        })();\n    }\n\n    /**\n     * Gathers the variables that will be made available to the view.\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected function collectVars(Throwable $exception, int $statusCode): array\n    {\n        $trace = $exception->getTrace();\n\n        if ($this->config->sensitiveDataInTrace !== []) {\n            $trace = $this->maskSensitiveData($trace, $this->config->sensitiveDataInTrace);\n        }\n\n        return [\n            'title'   => get_class($exception),\n            'type'    => get_class($exception),\n            'code'    => $statusCode,\n            'message' => $exception->getMessage(),\n            'file'    => $exception->getFile(),\n            'line'    => $exception->getLine(),\n            'trace'   => $trace,\n        ];\n    }\n\n    /**\n     * Mask sensitive data in the trace.\n     *\n     * @param array $trace\n     *\n     * @return array\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected function maskSensitiveData($trace, array $keysToMask, string $path = '')\n    {\n        foreach ($trace as $i => $line) {\n            $trace[$i]['args'] = $this->maskData($line['args'], $keysToMask);\n        }\n\n        return $trace;\n    }\n\n    /**\n     * @param array|object $args\n     *\n     * @return array|object\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    private function maskData($args, array $keysToMask, string $path = '')\n    {\n        foreach ($keysToMask as $keyToMask) {\n            $explode = explode('/', $keyToMask);\n            $index   = end($explode);\n\n            if (strpos(strrev($path . '/' . $index), strrev($keyToMask)) === 0) {\n                if (is_array($args) && array_key_exists($index, $args)) {\n                    $args[$index] = '******************';\n                } elseif (\n                    is_object($args) && property_exists($args, $index)\n                    && isset($args->{$index}) && is_scalar($args->{$index})\n                ) {\n                    $args->{$index} = '******************';\n                }\n            }\n        }\n\n        if (is_array($args)) {\n            foreach ($args as $pathKey => $subarray) {\n                $args[$pathKey] = $this->maskData($subarray, $keysToMask, $path . '/' . $pathKey);\n            }\n        } elseif (is_object($args)) {\n            foreach ($args as $pathKey => $subarray) {\n                $args->{$pathKey} = $this->maskData($subarray, $keysToMask, $path . '/' . $pathKey);\n            }\n        }\n\n        return $args;\n    }\n\n    /**\n     * Determines the HTTP status code and the exit status code for this request.\n     */\n    protected function determineCodes(Throwable $exception): array\n    {\n        $statusCode = 500;\n        $exitStatus = EXIT_ERROR;\n\n        if ($exception instanceof HTTPExceptionInterface) {\n            $statusCode = $exception->getCode();\n        }\n\n        if ($exception instanceof HasExitCodeInterface) {\n            $exitStatus = $exception->getExitCode();\n        }\n\n        return [$statusCode, $exitStatus];\n    }\n\n    private function isDeprecationError(int $error): bool\n    {\n        $deprecations = E_DEPRECATED | E_USER_DEPRECATED;\n\n        return ($error & $deprecations) !== 0;\n    }\n\n    /**\n     * @return true\n     */\n    private function handleDeprecationError(string $message, ?string $file = null, ?int $line = null): bool\n    {\n        // Remove the trace of the error handler.\n        $trace = array_slice(debug_backtrace(), 2);\n\n        log_message(\n            $this->config->deprecationLogLevel,\n            \"[DEPRECATED] {message} in {errFile} on line {errLine}.\\n{trace}\",\n            [\n                'message' => $message,\n                'errFile' => clean_path($file ?? ''),\n                'errLine' => $line ?? 0,\n                'trace'   => self::renderBacktrace($trace),\n            ]\n        );\n\n        return true;\n    }\n\n    // --------------------------------------------------------------------\n    // Display Methods\n    // --------------------------------------------------------------------\n\n    /**\n     * This makes nicer looking paths for the error output.\n     *\n     * @deprecated Use dedicated `clean_path()` function.\n     */\n    public static function cleanPath(string $file): string\n    {\n        switch (true) {\n            case strpos($file, APPPATH) === 0:\n                $file = 'APPPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(APPPATH));\n                break;\n\n            case strpos($file, SYSTEMPATH) === 0:\n                $file = 'SYSTEMPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(SYSTEMPATH));\n                break;\n\n            case strpos($file, FCPATH) === 0:\n                $file = 'FCPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(FCPATH));\n                break;\n\n            case defined('VENDORPATH') && strpos($file, VENDORPATH) === 0:\n                $file = 'VENDORPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(VENDORPATH));\n                break;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Describes memory usage in real-world units. Intended for use\n     * with memory_get_usage, etc.\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    public static function describeMemory(int $bytes): string\n    {\n        if ($bytes < 1024) {\n            return $bytes . 'B';\n        }\n\n        if ($bytes < 1_048_576) {\n            return round($bytes / 1024, 2) . 'KB';\n        }\n\n        return round($bytes / 1_048_576, 2) . 'MB';\n    }\n\n    /**\n     * Creates a syntax-highlighted version of a PHP file.\n     *\n     * @return bool|string\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    public static function highlightFile(string $file, int $lineNumber, int $lines = 15)\n    {\n        if (empty($file) || ! is_readable($file)) {\n            return false;\n        }\n\n        // Set our highlight colors:\n        if (function_exists('ini_set')) {\n            ini_set('highlight.comment', '#767a7e; font-style: italic');\n            ini_set('highlight.default', '#c7c7c7');\n            ini_set('highlight.html', '#06B');\n            ini_set('highlight.keyword', '#f1ce61;');\n            ini_set('highlight.string', '#869d6a');\n        }\n\n        try {\n            $source = file_get_contents($file);\n        } catch (Throwable $e) {\n            return false;\n        }\n\n        $source = str_replace([\"\\r\\n\", \"\\r\"], \"\\n\", $source);\n        $source = explode(\"\\n\", highlight_string($source, true));\n        $source = str_replace('<br />', \"\\n\", $source[1]);\n        $source = explode(\"\\n\", str_replace(\"\\r\\n\", \"\\n\", $source));\n\n        // Get just the part to show\n        $start = max($lineNumber - (int) round($lines / 2), 0);\n\n        // Get just the lines we need to display, while keeping line numbers...\n        $source = array_splice($source, $start, $lines, true);\n\n        // Used to format the line number in the source\n        $format = '% ' . strlen((string) ($start + $lines)) . 'd';\n\n        $out = '';\n        // Because the highlighting may have an uneven number\n        // of open and close span tags on one line, we need\n        // to ensure we can close them all to get the lines\n        // showing correctly.\n        $spans = 1;\n\n        foreach ($source as $n => $row) {\n            $spans += substr_count($row, '<span') - substr_count($row, '</span');\n            $row = str_replace([\"\\r\", \"\\n\"], ['', ''], $row);\n\n            if (($n + $start + 1) === $lineNumber) {\n                preg_match_all('#<[^>]+>#', $row, $tags);\n\n                $out .= sprintf(\n                    \"<span class='line highlight'><span class='number'>{$format}</span> %s\\n</span>%s\",\n                    $n + $start + 1,\n                    strip_tags($row),\n                    implode('', $tags[0])\n                );\n            } else {\n                $out .= sprintf('<span class=\"line\"><span class=\"number\">' . $format . '</span> %s', $n + $start + 1, $row) . \"\\n\";\n            }\n        }\n\n        if ($spans > 0) {\n            $out .= str_repeat('</span>', $spans);\n        }\n\n        return '<pre><code>' . $out . '</code></pre>';\n    }\n\n    private static function renderBacktrace(array $backtrace): string\n    {\n        $backtraces = [];\n\n        foreach ($backtrace as $index => $trace) {\n            $frame = $trace + ['file' => '[internal function]', 'line' => '', 'class' => '', 'type' => '', 'args' => []];\n\n            if ($frame['file'] !== '[internal function]') {\n                $frame['file'] = sprintf('%s(%s)', $frame['file'], $frame['line']);\n            }\n\n            unset($frame['line']);\n            $idx = $index;\n            $idx = str_pad((string) ++$idx, 2, ' ', STR_PAD_LEFT);\n\n            $args = implode(', ', array_map(static function ($value): string {\n                switch (true) {\n                    case is_object($value):\n                        return sprintf('Object(%s)', get_class($value));\n\n                    case is_array($value):\n                        return $value !== [] ? '[...]' : '[]';\n\n                    case $value === null:\n                        return 'null';\n\n                    case is_resource($value):\n                        return sprintf('resource (%s)', get_resource_type($value));\n\n                    default:\n                        return var_export($value, true);\n                }\n            }, $frame['args']));\n\n            $backtraces[] = sprintf(\n                '%s %s: %s%s%s(%s)',\n                $idx,\n                clean_path($frame['file']),\n                $frame['class'],\n                $frame['type'],\n                $frame['function'],\n                $args\n            );\n        }\n\n        return implode(\"\\n\", $backtraces);\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Debug;\n\nuse App\\Controllers\\Home;\nuse CodeIgniter\\Exceptions\\PageNotFoundException;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse CodeIgniter\\Test\\StreamFilterTrait;\nuse Config\\Exceptions as ExceptionsConfig;\nuse Config\\Services;\nuse RuntimeException;\n\n/**\n * @internal\n *\n * @group Others\n */\nfinal class ExceptionHandlerTest extends CIUnitTestCase\n{\n    use StreamFilterTrait;\n\n    private ExceptionHandler $handler;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->handler = new ExceptionHandler(new ExceptionsConfig());\n    }\n\n    public function testDetermineViewsPageNotFoundException(): void\n    {\n        $determineView = $this->getPrivateMethodInvoker($this->handler, 'determineView');\n\n        $exception    = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n        $templatePath = APPPATH . 'Views/errors/html';\n        $viewFile     = $determineView($exception, $templatePath);\n\n        $this->assertSame('error_404.php', $viewFile);\n    }\n\n    public function testDetermineViewsRuntimeException(): void\n    {\n        $determineView = $this->getPrivateMethodInvoker($this->handler, 'determineView');\n\n        $exception    = new RuntimeException('Exception');\n        $templatePath = APPPATH . 'Views/errors/html';\n        $viewFile     = $determineView($exception, $templatePath);\n\n        $this->assertSame('error_exception.php', $viewFile);\n    }\n\n    public function testDetermineViewsRuntimeExceptionCode404(): void\n    {\n        $determineView = $this->getPrivateMethodInvoker($this->handler, 'determineView');\n\n        $exception    = new RuntimeException('foo', 404);\n        $templatePath = APPPATH . 'Views/errors/html';\n        $viewFile     = $determineView($exception, $templatePath);\n\n        $this->assertSame('error_404.php', $viewFile);\n    }\n\n    public function testCollectVars(): void\n    {\n        $collectVars = $this->getPrivateMethodInvoker($this->handler, 'collectVars');\n\n        $vars = $collectVars(new RuntimeException('This.'), 404);\n\n        $this->assertIsArray($vars);\n        $this->assertCount(7, $vars);\n\n        foreach (['title', 'type', 'code', 'message', 'file', 'line', 'trace'] as $key) {\n            $this->assertArrayHasKey($key, $vars);\n        }\n    }\n\n    public function testHandleWebPageNotFoundExceptionDoNotAcceptHTML(): void\n    {\n        $exception = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n\n        $request  = Services::incomingrequest(null, false);\n        $response = Services::response(null, false);\n        $response->pretend();\n\n        ob_start();\n        $this->handler->handle($exception, $request, $response, 404, EXIT_ERROR);\n        $output = ob_get_clean();\n\n        $json = json_decode($output);\n        $this->assertSame(PageNotFoundException::class, $json->title);\n        $this->assertSame(PageNotFoundException::class, $json->type);\n        $this->assertSame(404, $json->code);\n        $this->assertSame('Controller or its method is not found: Foo::bar', $json->message);\n    }\n\n    public function testHandleWebPageNotFoundExceptionAcceptHTML(): void\n    {\n        $exception = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n\n        $request = Services::incomingrequest(null, false);\n        $request->setHeader('accept', 'text/html');\n        $response = Services::response(null, false);\n        $response->pretend();\n\n        ob_start();\n        $this->handler->handle($exception, $request, $response, 404, EXIT_ERROR);\n        $output = ob_get_clean();\n\n        $this->assertStringContainsString('<title>404 - Page Not Found</title>', $output);\n    }\n\n    public function testHandleCLIPageNotFoundException(): void\n    {\n        $exception = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n\n        $request = Services::clirequest(null, false);\n        $request->setHeader('accept', 'text/html');\n        $response = Services::response(null, false);\n        $response->pretend();\n\n        $this->handler->handle($exception, $request, $response, 404, EXIT_ERROR);\n\n        $this->assertStringContainsString(\n            'ERROR: 404',\n            $this->getStreamFilterBuffer()\n        );\n        $this->assertStringContainsString(\n            'Controller or its method is not found: Foo::bar',\n            $this->getStreamFilterBuffer()\n        );\n\n        $this->resetStreamFilterBuffer();\n    }\n\n    public function testMaskSensitiveData(): void\n    {\n        $maskSensitiveData = $this->getPrivateMethodInvoker($this->handler, 'maskSensitiveData');\n\n        $trace = [\n            0 => [\n                'file'     => '/var/www/CodeIgniter4/app/Controllers/Home.php',\n                'line'     => 15,\n                'function' => 'f',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                    0 => (object) [\n                        'password' => 'secret1',\n                    ],\n                    1 => (object) [\n                        'default' => [\n                            'password' => 'secret2',\n                        ],\n                    ],\n                    2 => [\n                        'password' => 'secret3',\n                    ],\n                    3 => [\n                        'default' => ['password' => 'secret4'],\n                    ],\n                ],\n            ],\n            1 => [\n                'file'     => '/var/www/CodeIgniter4/system/CodeIgniter.php',\n                'line'     => 932,\n                'function' => 'index',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                ],\n            ],\n        ];\n        $keysToMask = ['password'];\n        $path       = '';\n\n        $newTrace = $maskSensitiveData($trace, $keysToMask, $path);\n\n        $this->assertSame(['password' => '******************'], (array) $newTrace[0]['args'][0]);\n        $this->assertSame(['password' => '******************'], $newTrace[0]['args'][1]->default);\n        $this->assertSame(['password' => '******************'], $newTrace[0]['args'][2]);\n        $this->assertSame(['password' => '******************'], $newTrace[0]['args'][3]['default']);\n    }\n\n    public function testMaskSensitiveDataTraceDataKey(): void\n    {\n        $maskSensitiveData = $this->getPrivateMethodInvoker($this->handler, 'maskSensitiveData');\n\n        $trace = [\n            0 => [\n                'file'     => '/var/www/CodeIgniter4/app/Controllers/Home.php',\n                'line'     => 15,\n                'function' => 'f',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                ],\n            ],\n            1 => [\n                'file'     => '/var/www/CodeIgniter4/system/CodeIgniter.php',\n                'line'     => 932,\n                'function' => 'index',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                ],\n            ],\n        ];\n        $keysToMask = ['file'];\n        $path       = '';\n\n        $newTrace = $maskSensitiveData($trace, $keysToMask, $path);\n\n        $this->assertSame('/var/www/CodeIgniter4/app/Controllers/Home.php', $newTrace[0]['file']);\n    }\n}\n", "Version 4.4.3\n#############\n\nRelease Date: Unreleased\n\n**4.4.3 release of CodeIgniter4**\n\n.. contents::\n    :local:\n    :depth: 3\n\nBREAKING\n********\n\nMessage Changes\n***************\n\nChanges\n*******\n\nDeprecations\n************\n\nBugs Fixed\n**********\n\n- **UserGuide:** Fixed the descriptions for ``pre_system`` and ``post_system``\n  in :ref:`event-points`.\n\nSee the repo's\n`CHANGELOG.md <https://github.com/codeigniter4/CodeIgniter4/blob/develop/CHANGELOG.md>`_\nfor a complete list of bugs fixed.\n", "##############################\nHandling Multiple Environments\n##############################\n\nDevelopers often desire different system behavior depending on whether\nan application is running in a development or production environment.\nFor example, verbose error output is something that would be useful\nwhile developing an application, but it may also pose a security issue\nwhen \"live\". In development environments, you might want additional\ntools loaded that you don't in production environments, etc.\n\n.. contents::\n    :local:\n    :depth: 3\n\n************************\nThe Defined Environments\n************************\n\nBy default, CodeIgniter has three environments defined.\n\n- ``production`` for production\n- ``development`` for development\n- ``testing`` for PHPUnit testing\n\n.. important:: The environment ``testing`` is reserved for PHPUnit testing. It\n    has special conditions built into the framework at various places to assist\n    with that. You can't use it for your development.\n\nIf you want another environment, e.g., for staging, you can add custom environments.\nSee `Adding Environments`_.\n\n*******************\nSetting Environment\n*******************\n\n.. _environment-constant:\n\nThe ENVIRONMENT Constant\n========================\n\nTo set your environment, CodeIgniter comes with the ``ENVIRONMENT`` constant.\nIf you set ``$_SERVER['CI_ENVIRONMENT']``, the value will be used,\notherwise defaulting to ``production``.\n\nThis can be set in several ways depending on your server setup.\n\n.env\n----\n\nThe simplest method to set the variable is in your :ref:`.env file <dotenv-file>`.\n\n.. code-block:: ini\n\n    CI_ENVIRONMENT = development\n\n.. note:: You can change the ``CI_ENVIRONMENT`` value in **.env** file by ``spark env`` command:\n\n    .. code-block:: console\n\n        php spark env production\n\n.. _environment-apache:\n\nApache\n------\n\nThis server variable can be set in your **.htaccess** file or Apache\nconfig using `SetEnv <https://httpd.apache.org/docs/2.4/mod/mod_env.html#setenv>`_.\n\n.. code-block:: apache\n\n    SetEnv CI_ENVIRONMENT development\n\n\n.. _environment-nginx:\n\nnginx\n-----\n\nUnder nginx, you must pass the environment variable through the ``fastcgi_params``\nin order for it to show up under the ``$_SERVER`` variable. This allows it to work on the\nvirtual-host level, instead of using `env` to set it for the entire server, though that\nwould work fine on a dedicated server. You would then modify your server config to something\nlike:\n\n.. code-block:: nginx\n\n    server {\n        server_name localhost;\n        include     conf/defaults.conf;\n        root        /var/www;\n\n        location    ~* \\.php$ {\n            fastcgi_param CI_ENVIRONMENT \"production\";\n            include conf/fastcgi-php.conf;\n        }\n    }\n\nAlternative methods are available for nginx and other servers, or you can\nremove this logic entirely and set the constant based on the server's IP address\n(for instance).\n\nIn addition to affecting some basic framework behavior (see the next\nsection), you may use this constant in your own development to\ndifferentiate between which environment you are running in.\n\n*******************\nAdding Environments\n*******************\n\nTo add custom environments, you just need to add boot files for them.\n\nBoot Files\n==========\n\nCodeIgniter requires that a PHP script matching the environment's name is located\nunder **APPPATH/Config/Boot**. These files can contain any customizations that\nyou would like to make for your environment, whether it's updating the error display\nsettings, loading additional developer tools, or anything else. These are\nautomatically loaded by the system. The following files are already created in\na fresh install:\n\n* development.php\n* production.php\n* testing.php\n\nFor example, if you want to add ``staging`` environment for staging, all you need\nto do is:\n\n1. copy **APPPATH/Config/Boot/production.php** to **staging.php**.\n2. customize settings in **staging.php** if you want.\n\n**********************************\nConfirming the Current Environment\n**********************************\n\nTo confirm the current environment, simply echo the constant ``ENVIRONMENT``.\n\nYou can also check the current environment by ``spark env`` command:\n\n.. code-block:: console\n\n    php spark env\n\n*************************************\nEffects on Default Framework Behavior\n*************************************\n\nThere are some places in the CodeIgniter system where the ``ENVIRONMENT``\nconstant is used. This section describes how default framework behavior\nis affected.\n\nError Reporting\n===============\n\nSetting the ``ENVIRONMENT`` constant to a value of ``development`` will cause\nall PHP errors to be rendered to the browser when they occur.\nConversely, setting the constant to ``production`` will disable all error\noutput. Disabling error reporting in production is a\n:doc:`good security practice </concepts/security>`.\n", "##############\nError Handling\n##############\n\nCodeIgniter builds error reporting into your system through Exceptions, both the `SPL collection <https://www.php.net/manual/en/spl.exceptions.php>`_, as\nwell as a few exceptions that are provided by the framework.\n\nDepending on your environment's setup,\nthe default action when an error or exception is thrown is to display a detailed error report unless the application\nis running under the ``production`` environment. In the ``production`` environment, a more generic message is displayed to\nkeep the best user experience for your users.\n\n.. contents::\n    :local:\n    :depth: 2\n\nUsing Exceptions\n================\n\nThis section is a quick overview for newer programmers, or for developers who are not experienced with using exceptions.\n\nExceptions are simply events that happen when the exception is \"thrown\". This halts the current flow of the script, and\nexecution is then sent to the error handler which displays the appropriate error page:\n\n.. literalinclude:: errors/001.php\n\nIf you are calling a method that might throw an exception, you can catch that exception using a ``try/catch`` block:\n\n.. literalinclude:: errors/002.php\n\nIf the ``$userModel`` throws an exception, it is caught and the code within the catch block is executed. In this example,\nthe scripts dies, echoing the error message that the ``UserModel`` defined.\n\nIn the example above, we catch any type of Exception. If we only want to watch for specific types of exceptions, like\na ``UnknownFileException``, we can specify that in the catch parameter. Any other exceptions that are thrown and are\nnot child classes of the caught exception will be passed on to the error handler:\n\n.. literalinclude:: errors/003.php\n\nThis can be handy for handling the error yourself, or for performing cleanup before the script ends. If you want\nthe error handler to function as normal, you can throw a new exception within the catch block:\n\n.. literalinclude:: errors/004.php\n\nConfiguration\n=============\n\nError Reporting\n---------------\n\nBy default, CodeIgniter will display a detailed error report with all errors in the ``development`` and ``testing`` environments, and will not\ndisplay any errors in the ``production`` environment. You can change this by setting the ``CI_ENVIRONMENT`` variable\nin the :ref:`.env <dotenv-file>` file.\n\n.. important:: Disabling error reporting DOES NOT stop logs from being written if there are errors.\n\n.. warning:: Note that your settings from the **.env** file are added to ``$_SERVER``\n    and ``$_ENV``. As a side effect, this means that if the detailed error report\n    is displayed, **your secure credentials are publicly exposed**.\n\nLogging Exceptions\n------------------\n\nBy default, all Exceptions other than 404 - Page Not Found exceptions are logged. This can be turned on and off\nby setting the ``$log`` value of **app/Config/Exceptions.php**:\n\n.. literalinclude:: errors/005.php\n\nTo ignore logging on other status codes, you can set the status code to ignore in the same file:\n\n.. literalinclude:: errors/006.php\n\n.. note:: It is possible that logging still will not happen for exceptions if your current Log settings\n    are not set up to log **critical** errors, which all exceptions are logged as.\n\nFramework Exceptions\n====================\n\nThe following framework exceptions are available:\n\nPageNotFoundException\n---------------------\n\nThis is used to signal a 404, Page Not Found error. When thrown, the system will show the view found at\n**app/Views/errors/html/error_404.php**. You should customize all of the error views for your site.\nIf, in **app/Config/Routes.php**, you have specified a 404 Override, that will be called instead of the standard\n404 page:\n\n.. literalinclude:: errors/007.php\n\nYou can pass a message into the exception that will be displayed in place of the default message on the 404 page.\n\nConfigException\n---------------\n\nThis exception should be used when the values from the configuration class are invalid, or when the config class\nis not the right type, etc:\n\n.. literalinclude:: errors/008.php\n\nThis provides an exit code of 3.\n\nDatabaseException\n-----------------\n\nThis exception is thrown for database errors, such as when the database connection cannot be created,\nor when it is temporarily lost:\n\n.. literalinclude:: errors/009.php\n\nThis provides an exit code of 8.\n\nRedirectException\n-----------------\n\n.. note:: Since v4.4.0, the namespace of ``RedirectException`` has been changed.\n    Previously it was ``CodeIgniter\\Router\\Exceptions\\RedirectException``. The\n    previous class is deprecated.\n\nThis exception is a special case allowing for overriding of all other response routing and\nforcing a redirect to a specific URI:\n\n.. literalinclude:: errors/010.php\n\n``$uri`` is a URI path relative to baseURL. You can also supply a\nredirect code to use instead of the default (``302``, \"temporary redirect\"):\n\n.. literalinclude:: errors/011.php\n\nAlso, since v4.4.0 an object of a class that implements ResponseInterface can be used as the first argument.\nThis solution is suitable for cases where you need to add additional headers or cookies in the response.\n\n.. literalinclude:: errors/018.php\n\n.. _error-specify-http-status-code:\n\nSpecify HTTP Status Code in Your Exception\n==========================================\n\n.. versionadded:: 4.3.0\n\nSince v4.3.0, you can specify the HTTP status code for your Exception class to implement\n``HTTPExceptionInterface``.\n\nWhen an exception implementing ``HTTPExceptionInterface`` is caught by CodeIgniter's exception handler, the Exception code will become the HTTP status code.\n\n.. _error-specify-exit-code:\n\nSpecify Exit Code in Your Exception\n===================================\n\n.. versionadded:: 4.3.0\n\nSince v4.3.0, you can specify the exit code for your Exception class to implement\n``HasExitCodeInterface``.\n\nWhen an exception implementing ``HasExitCodeInterface`` is caught by CodeIgniter's exception handler, the code returned from the ``getExitCode()`` method will become the exit code.\n\n.. _logging_deprecation_warnings:\n\nLogging Deprecation Warnings\n============================\n\n.. versionadded:: 4.3.0\n\nBy default, all errors reported by ``error_reporting()`` will be thrown as an ``ErrorException`` object. These\ninclude both ``E_DEPRECATED`` and ``E_USER_DEPRECATED`` errors. With the surge in use of PHP 8.1+, many users\nmay see exceptions thrown for `passing null to non-nullable arguments of internal functions <https://wiki.php.net/rfc/deprecate_null_to_scalar_internal_arg>`_.\nTo ease the migration to PHP 8.1, you can instruct CodeIgniter to log the deprecations instead of throwing them.\n\nFirst, make sure your copy of ``Config\\Exceptions`` is updated with the two new properties and set as follows:\n\n.. literalinclude:: errors/012.php\n\nNext, depending on the log level you set in ``Config\\Exceptions::$deprecationLogLevel``, check whether the\nlogger threshold defined in ``Config\\Logger::$threshold`` covers the deprecation log level. If not, adjust\nit accordingly.\n\n.. literalinclude:: errors/013.php\n\nAfter that, subsequent deprecations will be logged instead of thrown.\n\nThis feature also works with user deprecations:\n\n.. literalinclude:: errors/014.php\n\nFor testing your application you may want to always throw on deprecations. You may configure this by\nsetting the environment variable ``CODEIGNITER_SCREAM_DEPRECATIONS`` to a truthy value.\n\n.. _custom-exception-handlers:\n\nCustom Exception Handlers\n=========================\n\n.. versionadded:: 4.4.0\n\nIf you need more control over how exceptions are displayed you can now define your own handlers and\nspecify when they apply.\n\nDefining the New Handler\n------------------------\n\nThe first step is to create a new class which implements ``CodeIgniter\\Debug\\ExceptionHandlerInterface``.\nYou can also extend ``CodeIgniter\\Debug\\BaseExceptionHandler``.\nThis class includes a number of utility methods that are used by the default exception handler.\nThe new handler must implement a single method: ``handle()``:\n\n.. literalinclude:: errors/015.php\n\nThis example defines the minimum amount of code typically needed - display a view and exit with the proper\nexit code. However, the ``BaseExceptionHandler`` provides a number of other helper functions and objects.\n\nConfiguring the New Handler\n---------------------------\n\nTelling CodeIgniter to use your new exception handler class is done in the **app/Config/Exceptions.php**\nconfiguration file's ``handler()`` method:\n\n.. literalinclude:: errors/016.php\n\nYou can use any logic your application needs to determine whether it should handle the exception, but the\ntwo most common are checking on the HTTP status code or the type of exception. If your class should handle\nit then return a new instance of that class:\n\n.. literalinclude:: errors/017.php\n", "#############################\nUpgrading from 4.4.2 to 4.4.3\n#############################\n\nPlease refer to the upgrade instructions corresponding to your installation method.\n\n- :ref:`Composer Installation App Starter Upgrading <app-starter-upgrading>`\n- :ref:`Composer Installation Adding CodeIgniter4 to an Existing Project Upgrading <adding-codeigniter4-upgrading>`\n- :ref:`Manual Installation Upgrading <installing-manual-upgrading>`\n\n.. contents::\n    :local:\n    :depth: 2\n\nMandatory File Changes\n**********************\n\nBreaking Changes\n****************\n\nBreaking Enhancements\n*********************\n\nProject Files\n*************\n\nSome files in the **project space** (root, app, public, writable) received updates. Due to\nthese files being outside of the **system** scope they will not be changed without your intervention.\n\nThere are some third-party CodeIgniter modules available to assist with merging changes to\nthe project space: `Explore on Packagist <https://packagist.org/explore/?query=codeigniter4%20updates>`_.\n\nContent Changes\n===============\n\nThe following files received significant changes (including deprecations or visual adjustments)\nand it is recommended that you merge the updated versions with your application:\n\nConfig\n------\n\n- @TODO\n\nAll Changes\n===========\n\nThis is a list of all files in the **project space** that received changes;\nmany will be simple comments or formatting that have no effect on the runtime:\n\n- @TODO\n"], "fixing_code": ["<?php\n\n/*\n |--------------------------------------------------------------------------\n | ERROR DISPLAY\n |--------------------------------------------------------------------------\n | In development, we want to show as many errors as possible to help\n | make sure they don't make it to production. And save us hours of\n | painful debugging.\n |\n | If you set 'display_errors' to '1', CI4's detailed error report will show.\n */\nerror_reporting(-1);\nini_set('display_errors', '1');\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG BACKTRACES\n |--------------------------------------------------------------------------\n | If true, this constant will tell the error screens to display debug\n | backtraces along with the other error information. If you would\n | prefer to not see this, set this value to false.\n */\ndefined('SHOW_DEBUG_BACKTRACE') || define('SHOW_DEBUG_BACKTRACE', true);\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG MODE\n |--------------------------------------------------------------------------\n | Debug mode is an experimental flag that can allow changes throughout\n | the system. This will control whether Kint is loaded, and a few other\n | items. It can always be used within your own application too.\n */\ndefined('CI_DEBUG') || define('CI_DEBUG', true);\n", "<?php\n\n/*\n |--------------------------------------------------------------------------\n | ERROR DISPLAY\n |--------------------------------------------------------------------------\n | Don't show ANY in production environments. Instead, let the system catch\n | it and display a generic error message.\n |\n | If you set 'display_errors' to '1', CI4's detailed error report will show.\n */\nini_set('display_errors', '0');\nerror_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_USER_NOTICE & ~E_USER_DEPRECATED);\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG MODE\n |--------------------------------------------------------------------------\n | Debug mode is an experimental flag that can allow changes throughout\n | the system. It's not widely used currently, and may not survive\n | release of the framework.\n */\ndefined('CI_DEBUG') || define('CI_DEBUG', false);\n", "<?php\n\n/*\n * The environment testing is reserved for PHPUnit testing. It has special\n * conditions built into the framework at various places to assist with that.\n * You can\u2019t use it for your development.\n */\n\n/*\n |--------------------------------------------------------------------------\n | ERROR DISPLAY\n |--------------------------------------------------------------------------\n | In development, we want to show as many errors as possible to help\n | make sure they don't make it to production. And save us hours of\n | painful debugging.\n */\nerror_reporting(-1);\nini_set('display_errors', '1');\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG BACKTRACES\n |--------------------------------------------------------------------------\n | If true, this constant will tell the error screens to display debug\n | backtraces along with the other error information. If you would\n | prefer to not see this, set this value to false.\n */\ndefined('SHOW_DEBUG_BACKTRACE') || define('SHOW_DEBUG_BACKTRACE', true);\n\n/*\n |--------------------------------------------------------------------------\n | DEBUG MODE\n |--------------------------------------------------------------------------\n | Debug mode is an experimental flag that can allow changes throughout\n | the system. It's not widely used currently, and may not survive\n | release of the framework.\n */\ndefined('CI_DEBUG') || define('CI_DEBUG', true);\n", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title><?= lang('Errors.pageNotFound') ?></title>\n\n    <style>\n        div.logo {\n            height: 200px;\n            width: 155px;\n            display: inline-block;\n            opacity: 0.08;\n            position: absolute;\n            top: 2rem;\n            left: 50%;\n            margin-left: -73px;\n        }\n        body {\n            height: 100%;\n            background: #fafafa;\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            color: #777;\n            font-weight: 300;\n        }\n        h1 {\n            font-weight: lighter;\n            letter-spacing: normal;\n            font-size: 3rem;\n            margin-top: 0;\n            margin-bottom: 0;\n            color: #222;\n        }\n        .wrap {\n            max-width: 1024px;\n            margin: 5rem auto;\n            padding: 2rem;\n            background: #fff;\n            text-align: center;\n            border: 1px solid #efefef;\n            border-radius: 0.5rem;\n            position: relative;\n        }\n        pre {\n            white-space: normal;\n            margin-top: 1.5rem;\n        }\n        code {\n            background: #fafafa;\n            border: 1px solid #efefef;\n            padding: 0.5rem 1rem;\n            border-radius: 5px;\n            display: block;\n        }\n        p {\n            margin-top: 1.5rem;\n        }\n        .footer {\n            margin-top: 2rem;\n            border-top: 1px solid #efefef;\n            padding: 1em 2em 0 2em;\n            font-size: 85%;\n            color: #999;\n        }\n        a:active,\n        a:link,\n        a:visited {\n            color: #dd4814;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"wrap\">\n        <h1>404</h1>\n\n        <p>\n            <?php if (ENVIRONMENT !== 'production') : ?>\n                <?= nl2br(esc($message)) ?>\n            <?php else : ?>\n                <?= lang('Errors.sorryCannotFind') ?>\n            <?php endif; ?>\n        </p>\n    </div>\n</body>\n</html>\n", "<?php\nuse Config\\Services;\nuse CodeIgniter\\CodeIgniter;\n\n$errorId = uniqid('error', true);\n?>\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"robots\" content=\"noindex\">\n\n    <title><?= esc($title) ?></title>\n    <style>\n        <?= preg_replace('#[\\r\\n\\t ]+#', ' ', file_get_contents(__DIR__ . DIRECTORY_SEPARATOR . 'debug.css')) ?>\n    </style>\n\n    <script>\n        <?= file_get_contents(__DIR__ . DIRECTORY_SEPARATOR . 'debug.js') ?>\n    </script>\n</head>\n<body onload=\"init()\">\n\n    <!-- Header -->\n    <div class=\"header\">\n        <div class=\"container\">\n            <h1><?= esc($title), esc($exception->getCode() ? ' #' . $exception->getCode() : '') ?></h1>\n            <p>\n                <?= nl2br(esc($exception->getMessage())) ?>\n                <a href=\"https://www.duckduckgo.com/?q=<?= urlencode($title . ' ' . preg_replace('#\\'.*\\'|\".*\"#Us', '', $exception->getMessage())) ?>\"\n                   rel=\"noreferrer\" target=\"_blank\">search &rarr;</a>\n            </p>\n        </div>\n    </div>\n\n    <!-- Source -->\n    <div class=\"container\">\n        <p><b><?= esc(clean_path($file)) ?></b> at line <b><?= esc($line) ?></b></p>\n\n        <?php if (is_file($file)) : ?>\n            <div class=\"source\">\n                <?= static::highlightFile($file, $line, 15); ?>\n            </div>\n        <?php endif; ?>\n    </div>\n\n    <?php if (defined('SHOW_DEBUG_BACKTRACE') && SHOW_DEBUG_BACKTRACE) : ?>\n    <div class=\"container\">\n\n        <ul class=\"tabs\" id=\"tabs\">\n            <li><a href=\"#backtrace\">Backtrace</a></li>\n            <li><a href=\"#server\">Server</a></li>\n            <li><a href=\"#request\">Request</a></li>\n            <li><a href=\"#response\">Response</a></li>\n            <li><a href=\"#files\">Files</a></li>\n            <li><a href=\"#memory\">Memory</a></li>\n        </ul>\n\n        <div class=\"tab-content\">\n\n            <!-- Backtrace -->\n            <div class=\"content\" id=\"backtrace\">\n\n                <ol class=\"trace\">\n                <?php foreach ($trace as $index => $row) : ?>\n\n                    <li>\n                        <p>\n                            <!-- Trace info -->\n                            <?php if (isset($row['file']) && is_file($row['file'])) : ?>\n                                <?php\n                                if (isset($row['function']) && in_array($row['function'], ['include', 'include_once', 'require', 'require_once'], true)) {\n                                    echo esc($row['function'] . ' ' . clean_path($row['file']));\n                                } else {\n                                    echo esc(clean_path($row['file']) . ' : ' . $row['line']);\n                                }\n                                ?>\n                            <?php else: ?>\n                                {PHP internal code}\n                            <?php endif; ?>\n\n                            <!-- Class/Method -->\n                            <?php if (isset($row['class'])) : ?>\n                                &nbsp;&nbsp;&mdash;&nbsp;&nbsp;<?= esc($row['class'] . $row['type'] . $row['function']) ?>\n                                <?php if (! empty($row['args'])) : ?>\n                                    <?php $argsId = $errorId . 'args' . $index ?>\n                                    ( <a href=\"#\" onclick=\"return toggle('<?= esc($argsId, 'attr') ?>');\">arguments</a> )\n                                    <div class=\"args\" id=\"<?= esc($argsId, 'attr') ?>\">\n                                        <table cellspacing=\"0\">\n\n                                        <?php\n                                        $params = null;\n                                        // Reflection by name is not available for closure function\n                                        if (substr($row['function'], -1) !== '}') {\n                                            $mirror = isset($row['class']) ? new ReflectionMethod($row['class'], $row['function']) : new ReflectionFunction($row['function']);\n                                            $params = $mirror->getParameters();\n                                        }\n\n                                        foreach ($row['args'] as $key => $value) : ?>\n                                            <tr>\n                                                <td><code><?= esc(isset($params[$key]) ? '$' . $params[$key]->name : \"#{$key}\") ?></code></td>\n                                                <td><pre><?= esc(print_r($value, true)) ?></pre></td>\n                                            </tr>\n                                        <?php endforeach ?>\n\n                                        </table>\n                                    </div>\n                                <?php else : ?>\n                                    ()\n                                <?php endif; ?>\n                            <?php endif; ?>\n\n                            <?php if (! isset($row['class']) && isset($row['function'])) : ?>\n                                &nbsp;&nbsp;&mdash;&nbsp;&nbsp;    <?= esc($row['function']) ?>()\n                            <?php endif; ?>\n                        </p>\n\n                        <!-- Source? -->\n                        <?php if (isset($row['file']) && is_file($row['file']) && isset($row['class'])) : ?>\n                            <div class=\"source\">\n                                <?= static::highlightFile($row['file'], $row['line']) ?>\n                            </div>\n                        <?php endif; ?>\n                    </li>\n\n                <?php endforeach; ?>\n                </ol>\n\n            </div>\n\n            <!-- Server -->\n            <div class=\"content\" id=\"server\">\n                <?php foreach (['_SERVER', '_SESSION'] as $var) : ?>\n                    <?php\n                    if (empty($GLOBALS[$var]) || ! is_array($GLOBALS[$var])) {\n                        continue;\n                    } ?>\n\n                    <h3>$<?= esc($var) ?></h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Key</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($GLOBALS[$var] as $key => $value) : ?>\n                            <tr>\n                                <td><?= esc($key) ?></td>\n                                <td>\n                                    <?php if (is_string($value)) : ?>\n                                        <?= esc($value) ?>\n                                    <?php else: ?>\n                                        <pre><?= esc(print_r($value, true)) ?></pre>\n                                    <?php endif; ?>\n                                </td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endforeach ?>\n\n                <!-- Constants -->\n                <?php $constants = get_defined_constants(true); ?>\n                <?php if (! empty($constants['user'])) : ?>\n                    <h3>Constants</h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Key</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($constants['user'] as $key => $value) : ?>\n                            <tr>\n                                <td><?= esc($key) ?></td>\n                                <td>\n                                    <?php if (is_string($value)) : ?>\n                                        <?= esc($value) ?>\n                                    <?php else: ?>\n                                        <pre><?= esc(print_r($value, true)) ?></pre>\n                                    <?php endif; ?>\n                                </td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n                <?php endif; ?>\n            </div>\n\n            <!-- Request -->\n            <div class=\"content\" id=\"request\">\n                <?php $request = Services::request(); ?>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td style=\"width: 10em\">Path</td>\n                            <td><?= esc($request->getUri()) ?></td>\n                        </tr>\n                        <tr>\n                            <td>HTTP Method</td>\n                            <td><?= esc(strtoupper($request->getMethod())) ?></td>\n                        </tr>\n                        <tr>\n                            <td>IP Address</td>\n                            <td><?= esc($request->getIPAddress()) ?></td>\n                        </tr>\n                        <tr>\n                            <td style=\"width: 10em\">Is AJAX Request?</td>\n                            <td><?= $request->isAJAX() ? 'yes' : 'no' ?></td>\n                        </tr>\n                        <tr>\n                            <td>Is CLI Request?</td>\n                            <td><?= $request->isCLI() ? 'yes' : 'no' ?></td>\n                        </tr>\n                        <tr>\n                            <td>Is Secure Request?</td>\n                            <td><?= $request->isSecure() ? 'yes' : 'no' ?></td>\n                        </tr>\n                        <tr>\n                            <td>User Agent</td>\n                            <td><?= esc($request->getUserAgent()->getAgentString()) ?></td>\n                        </tr>\n\n                    </tbody>\n                </table>\n\n\n                <?php $empty = true; ?>\n                <?php foreach (['_GET', '_POST', '_COOKIE'] as $var) : ?>\n                    <?php\n                    if (empty($GLOBALS[$var]) || ! is_array($GLOBALS[$var])) {\n                        continue;\n                    } ?>\n\n                    <?php $empty = false; ?>\n\n                    <h3>$<?= esc($var) ?></h3>\n\n                    <table style=\"width: 100%\">\n                        <thead>\n                            <tr>\n                                <th>Key</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($GLOBALS[$var] as $key => $value) : ?>\n                            <tr>\n                                <td><?= esc($key) ?></td>\n                                <td>\n                                    <?php if (is_string($value)) : ?>\n                                        <?= esc($value) ?>\n                                    <?php else: ?>\n                                        <pre><?= esc(print_r($value, true)) ?></pre>\n                                    <?php endif; ?>\n                                </td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endforeach ?>\n\n                <?php if ($empty) : ?>\n\n                    <div class=\"alert\">\n                        No $_GET, $_POST, or $_COOKIE Information to show.\n                    </div>\n\n                <?php endif; ?>\n\n                <?php $headers = $request->headers(); ?>\n                <?php if (! empty($headers)) : ?>\n\n                    <h3>Headers</h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Header</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach ($headers as $header) : ?>\n                            <tr>\n                                <td><?= esc($header->getName(), 'html') ?></td>\n                                <td><?= esc($header->getValueLine(), 'html') ?></td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endif; ?>\n            </div>\n\n            <!-- Response -->\n            <?php\n                $response = Services::response();\n                $response->setStatusCode(http_response_code());\n            ?>\n            <div class=\"content\" id=\"response\">\n                <table>\n                    <tr>\n                        <td style=\"width: 15em\">Response Status</td>\n                        <td><?= esc($response->getStatusCode() . ' - ' . $response->getReasonPhrase()) ?></td>\n                    </tr>\n                </table>\n\n                <?php $headers = $response->headers(); ?>\n                <?php if (! empty($headers)) : ?>\n                    <?php natsort($headers) ?>\n\n                    <h3>Headers</h3>\n\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Header</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        <?php foreach (array_keys($headers) as $name) : ?>\n                            <tr>\n                                <td><?= esc($name, 'html') ?></td>\n                                <td><?= esc($response->getHeaderLine($name), 'html') ?></td>\n                            </tr>\n                        <?php endforeach; ?>\n                        </tbody>\n                    </table>\n\n                <?php endif; ?>\n            </div>\n\n            <!-- Files -->\n            <div class=\"content\" id=\"files\">\n                <?php $files = get_included_files(); ?>\n\n                <ol>\n                <?php foreach ($files as $file) :?>\n                    <li><?= esc(clean_path($file)) ?></li>\n                <?php endforeach ?>\n                </ol>\n            </div>\n\n            <!-- Memory -->\n            <div class=\"content\" id=\"memory\">\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>Memory Usage</td>\n                            <td><?= esc(static::describeMemory(memory_get_usage(true))) ?></td>\n                        </tr>\n                        <tr>\n                            <td style=\"width: 12em\">Peak Memory Usage:</td>\n                            <td><?= esc(static::describeMemory(memory_get_peak_usage(true))) ?></td>\n                        </tr>\n                        <tr>\n                            <td>Memory Limit:</td>\n                            <td><?= esc(ini_get('memory_limit')) ?></td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </div>\n\n        </div>  <!-- /tab-content -->\n\n    </div> <!-- /container -->\n    <?php endif; ?>\n\n    <div class=\"footer\">\n        <div class=\"container\">\n\n            <p>\n                Displayed at <?= esc(date('H:i:sa')) ?> &mdash;\n                PHP: <?= esc(PHP_VERSION) ?>  &mdash;\n                CodeIgniter: <?= esc(CodeIgniter::CI_VERSION) ?> --\n                Environment: <?= ENVIRONMENT ?>\n            </p>\n\n        </div>\n    </div>\n\n</body>\n</html>\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Debug;\n\nuse CodeIgniter\\API\\ResponseTrait;\nuse CodeIgniter\\Exceptions\\PageNotFoundException;\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\IncomingRequest;\nuse CodeIgniter\\HTTP\\RequestInterface;\nuse CodeIgniter\\HTTP\\ResponseInterface;\nuse Config\\Paths;\nuse Throwable;\n\n/**\n * @see \\CodeIgniter\\Debug\\ExceptionHandlerTest\n */\nfinal class ExceptionHandler extends BaseExceptionHandler implements ExceptionHandlerInterface\n{\n    use ResponseTrait;\n\n    /**\n     * ResponseTrait needs this.\n     */\n    private ?RequestInterface $request = null;\n\n    /**\n     * ResponseTrait needs this.\n     */\n    private ?ResponseInterface $response = null;\n\n    /**\n     * Determines the correct way to display the error.\n     */\n    public function handle(\n        Throwable $exception,\n        RequestInterface $request,\n        ResponseInterface $response,\n        int $statusCode,\n        int $exitCode\n    ): void {\n        // ResponseTrait needs these properties.\n        $this->request  = $request;\n        $this->response = $response;\n\n        if ($request instanceof IncomingRequest) {\n            try {\n                $response->setStatusCode($statusCode);\n            } catch (HTTPException $e) {\n                // Workaround for invalid HTTP status code.\n                $statusCode = 500;\n                $response->setStatusCode($statusCode);\n            }\n\n            if (! headers_sent()) {\n                header(\n                    sprintf(\n                        'HTTP/%s %s %s',\n                        $request->getProtocolVersion(),\n                        $response->getStatusCode(),\n                        $response->getReasonPhrase()\n                    ),\n                    true,\n                    $statusCode\n                );\n            }\n\n            if (strpos($request->getHeaderLine('accept'), 'text/html') === false) {\n                $data = (ENVIRONMENT === 'development' || ENVIRONMENT === 'testing')\n                    ? $this->collectVars($exception, $statusCode)\n                    : '';\n\n                $this->respond($data, $statusCode)->send();\n\n                if (ENVIRONMENT !== 'testing') {\n                    // @codeCoverageIgnoreStart\n                    exit($exitCode);\n                    // @codeCoverageIgnoreEnd\n                }\n\n                return;\n            }\n        }\n\n        // Determine possible directories of error views\n        $addPath = ($request instanceof IncomingRequest ? 'html' : 'cli') . DIRECTORY_SEPARATOR;\n        $path    = $this->viewPath . $addPath;\n        $altPath = rtrim((new Paths())->viewDirectory, '\\\\/ ')\n            . DIRECTORY_SEPARATOR . 'errors' . DIRECTORY_SEPARATOR . $addPath;\n\n        // Determine the views\n        $view    = $this->determineView($exception, $path);\n        $altView = $this->determineView($exception, $altPath);\n\n        // Check if the view exists\n        $viewFile = null;\n        if (is_file($path . $view)) {\n            $viewFile = $path . $view;\n        } elseif (is_file($altPath . $altView)) {\n            $viewFile = $altPath . $altView;\n        }\n\n        // Displays the HTML or CLI error code.\n        $this->render($exception, $statusCode, $viewFile);\n\n        if (ENVIRONMENT !== 'testing') {\n            // @codeCoverageIgnoreStart\n            exit($exitCode);\n            // @codeCoverageIgnoreEnd\n        }\n    }\n\n    /**\n     * Determines the view to display based on the exception thrown,\n     * whether an HTTP or CLI request, etc.\n     *\n     * @return string The filename of the view file to use\n     */\n    protected function determineView(Throwable $exception, string $templatePath): string\n    {\n        // Production environments should have a custom exception file.\n        $view = 'production.php';\n\n        if (\n            in_array(\n                strtolower(ini_get('display_errors')),\n                ['1', 'true', 'on', 'yes'],\n                true\n            )\n        ) {\n            $view = 'error_exception.php';\n        }\n\n        // 404 Errors\n        if ($exception instanceof PageNotFoundException) {\n            return 'error_404.php';\n        }\n\n        $templatePath = rtrim($templatePath, '\\\\/ ') . DIRECTORY_SEPARATOR;\n\n        // Allow for custom views based upon the status code\n        if (is_file($templatePath . 'error_' . $exception->getCode() . '.php')) {\n            return 'error_' . $exception->getCode() . '.php';\n        }\n\n        return $view;\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Debug;\n\nuse CodeIgniter\\API\\ResponseTrait;\nuse CodeIgniter\\Exceptions\\HasExitCodeInterface;\nuse CodeIgniter\\Exceptions\\HTTPExceptionInterface;\nuse CodeIgniter\\Exceptions\\PageNotFoundException;\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\RequestInterface;\nuse CodeIgniter\\HTTP\\ResponseInterface;\nuse Config\\Exceptions as ExceptionsConfig;\nuse Config\\Paths;\nuse Config\\Services;\nuse ErrorException;\nuse Psr\\Log\\LogLevel;\nuse Throwable;\n\n/**\n * Exceptions manager\n *\n * @see \\CodeIgniter\\Debug\\ExceptionsTest\n */\nclass Exceptions\n{\n    use ResponseTrait;\n\n    /**\n     * Nesting level of the output buffering mechanism\n     *\n     * @var int\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    public $ob_level;\n\n    /**\n     * The path to the directory containing the\n     * cli and html error view directories.\n     *\n     * @var string\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected $viewPath;\n\n    /**\n     * Config for debug exceptions.\n     *\n     * @var ExceptionsConfig\n     */\n    protected $config;\n\n    /**\n     * The request.\n     *\n     * @var RequestInterface|null\n     */\n    protected $request;\n\n    /**\n     * The outgoing response.\n     *\n     * @var ResponseInterface\n     */\n    protected $response;\n\n    private ?Throwable $exceptionCaughtByExceptionHandler = null;\n\n    public function __construct(ExceptionsConfig $config)\n    {\n        // For backward compatibility\n        $this->ob_level = ob_get_level();\n        $this->viewPath = rtrim($config->errorViewPath, '\\\\/ ') . DIRECTORY_SEPARATOR;\n\n        $this->config = $config;\n\n        // workaround for upgraded users\n        // This causes \"Deprecated: Creation of dynamic property\" in PHP 8.2.\n        // @TODO remove this after dropping PHP 8.1 support.\n        if (! isset($this->config->sensitiveDataInTrace)) {\n            $this->config->sensitiveDataInTrace = [];\n        }\n        if (! isset($this->config->logDeprecations, $this->config->deprecationLogLevel)) {\n            $this->config->logDeprecations     = false;\n            $this->config->deprecationLogLevel = LogLevel::WARNING;\n        }\n    }\n\n    /**\n     * Responsible for registering the error, exception and shutdown\n     * handling of our application.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    public function initialize()\n    {\n        set_exception_handler([$this, 'exceptionHandler']);\n        set_error_handler([$this, 'errorHandler']);\n        register_shutdown_function([$this, 'shutdownHandler']);\n    }\n\n    /**\n     * Catches any uncaught errors and exceptions, including most Fatal errors\n     * (Yay PHP7!). Will log the error, display it if display_errors is on,\n     * and fire an event that allows custom actions to be taken at this point.\n     *\n     * @return void\n     * @phpstan-return never|void\n     */\n    public function exceptionHandler(Throwable $exception)\n    {\n        $this->exceptionCaughtByExceptionHandler = $exception;\n\n        [$statusCode, $exitCode] = $this->determineCodes($exception);\n\n        if ($this->config->log === true && ! in_array($statusCode, $this->config->ignoreCodes, true)) {\n            log_message('critical', \"{message}\\nin {exFile} on line {exLine}.\\n{trace}\", [\n                'message' => $exception->getMessage(),\n                'exFile'  => clean_path($exception->getFile()), // {file} refers to THIS file\n                'exLine'  => $exception->getLine(), // {line} refers to THIS line\n                'trace'   => self::renderBacktrace($exception->getTrace()),\n            ]);\n        }\n\n        $this->request  = Services::request();\n        $this->response = Services::response();\n\n        // Get the first exception.\n        while ($prevException = $exception->getPrevious()) {\n            $exception = $prevException;\n        }\n\n        if (method_exists($this->config, 'handler')) {\n            // Use new ExceptionHandler\n            $handler = $this->config->handler($statusCode, $exception);\n            $handler->handle(\n                $exception,\n                $this->request,\n                $this->response,\n                $statusCode,\n                $exitCode\n            );\n\n            return;\n        }\n\n        // For backward compatibility\n        if (! is_cli()) {\n            try {\n                $this->response->setStatusCode($statusCode);\n            } catch (HTTPException $e) {\n                // Workaround for invalid HTTP status code.\n                $statusCode = 500;\n                $this->response->setStatusCode($statusCode);\n            }\n\n            if (! headers_sent()) {\n                header(sprintf('HTTP/%s %s %s', $this->request->getProtocolVersion(), $this->response->getStatusCode(), $this->response->getReasonPhrase()), true, $statusCode);\n            }\n\n            if (strpos($this->request->getHeaderLine('accept'), 'text/html') === false) {\n                $this->respond(ENVIRONMENT === 'development' ? $this->collectVars($exception, $statusCode) : '', $statusCode)->send();\n\n                exit($exitCode);\n            }\n        }\n\n        $this->render($exception, $statusCode);\n\n        exit($exitCode);\n    }\n\n    /**\n     * The callback to be registered to `set_error_handler()`.\n     *\n     * @return bool\n     *\n     * @throws ErrorException\n     *\n     * @codeCoverageIgnore\n     */\n    public function errorHandler(int $severity, string $message, ?string $file = null, ?int $line = null)\n    {\n        if ($this->isDeprecationError($severity)) {\n            if (! $this->config->logDeprecations || (bool) env('CODEIGNITER_SCREAM_DEPRECATIONS')) {\n                throw new ErrorException($message, 0, $severity, $file, $line);\n            }\n\n            return $this->handleDeprecationError($message, $file, $line);\n        }\n\n        if ((error_reporting() & $severity) !== 0) {\n            throw new ErrorException($message, 0, $severity, $file, $line);\n        }\n\n        return false; // return false to propagate the error to PHP standard error handler\n    }\n\n    /**\n     * Checks to see if any errors have happened during shutdown that\n     * need to be caught and handle them.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     * @phpstan-return never|void\n     */\n    public function shutdownHandler()\n    {\n        $error = error_get_last();\n\n        if ($error === null) {\n            return;\n        }\n\n        ['type' => $type, 'message' => $message, 'file' => $file, 'line' => $line] = $error;\n\n        if ($this->exceptionCaughtByExceptionHandler instanceof Throwable) {\n            $message .= \"\\n\u3010Previous Exception\u3011\\n\"\n                . get_class($this->exceptionCaughtByExceptionHandler) . \"\\n\"\n                . $this->exceptionCaughtByExceptionHandler->getMessage() . \"\\n\"\n                . $this->exceptionCaughtByExceptionHandler->getTraceAsString();\n        }\n\n        if (in_array($type, [E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_PARSE], true)) {\n            $this->exceptionHandler(new ErrorException($message, 0, $type, $file, $line));\n        }\n    }\n\n    /**\n     * Determines the view to display based on the exception thrown,\n     * whether an HTTP or CLI request, etc.\n     *\n     * @return string The path and filename of the view file to use\n     *\n     * @deprecated 4.4.0 No longer used. Moved to ExceptionHandler.\n     */\n    protected function determineView(Throwable $exception, string $templatePath): string\n    {\n        // Production environments should have a custom exception file.\n        $view         = 'production.php';\n        $templatePath = rtrim($templatePath, '\\\\/ ') . DIRECTORY_SEPARATOR;\n\n        if (\n            in_array(\n                strtolower(ini_get('display_errors')),\n                ['1', 'true', 'on', 'yes'],\n                true\n            )\n        ) {\n            $view = 'error_exception.php';\n        }\n\n        // 404 Errors\n        if ($exception instanceof PageNotFoundException) {\n            return 'error_404.php';\n        }\n\n        // Allow for custom views based upon the status code\n        if (is_file($templatePath . 'error_' . $exception->getCode() . '.php')) {\n            return 'error_' . $exception->getCode() . '.php';\n        }\n\n        return $view;\n    }\n\n    /**\n     * Given an exception and status code will display the error to the client.\n     *\n     * @return void\n     * @phpstan-return never|void\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected function render(Throwable $exception, int $statusCode)\n    {\n        // Determine possible directories of error views\n        $path    = $this->viewPath;\n        $altPath = rtrim((new Paths())->viewDirectory, '\\\\/ ') . DIRECTORY_SEPARATOR . 'errors' . DIRECTORY_SEPARATOR;\n\n        $path    .= (is_cli() ? 'cli' : 'html') . DIRECTORY_SEPARATOR;\n        $altPath .= (is_cli() ? 'cli' : 'html') . DIRECTORY_SEPARATOR;\n\n        // Determine the views\n        $view    = $this->determineView($exception, $path);\n        $altView = $this->determineView($exception, $altPath);\n\n        // Check if the view exists\n        if (is_file($path . $view)) {\n            $viewFile = $path . $view;\n        } elseif (is_file($altPath . $altView)) {\n            $viewFile = $altPath . $altView;\n        }\n\n        if (! isset($viewFile)) {\n            echo 'The error view files were not found. Cannot render exception trace.';\n\n            exit(1);\n        }\n\n        echo(function () use ($exception, $statusCode, $viewFile): string {\n            $vars = $this->collectVars($exception, $statusCode);\n            extract($vars, EXTR_SKIP);\n\n            ob_start();\n            include $viewFile;\n\n            return ob_get_clean();\n        })();\n    }\n\n    /**\n     * Gathers the variables that will be made available to the view.\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected function collectVars(Throwable $exception, int $statusCode): array\n    {\n        $trace = $exception->getTrace();\n\n        if ($this->config->sensitiveDataInTrace !== []) {\n            $trace = $this->maskSensitiveData($trace, $this->config->sensitiveDataInTrace);\n        }\n\n        return [\n            'title'   => get_class($exception),\n            'type'    => get_class($exception),\n            'code'    => $statusCode,\n            'message' => $exception->getMessage(),\n            'file'    => $exception->getFile(),\n            'line'    => $exception->getLine(),\n            'trace'   => $trace,\n        ];\n    }\n\n    /**\n     * Mask sensitive data in the trace.\n     *\n     * @param array $trace\n     *\n     * @return array\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    protected function maskSensitiveData($trace, array $keysToMask, string $path = '')\n    {\n        foreach ($trace as $i => $line) {\n            $trace[$i]['args'] = $this->maskData($line['args'], $keysToMask);\n        }\n\n        return $trace;\n    }\n\n    /**\n     * @param array|object $args\n     *\n     * @return array|object\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    private function maskData($args, array $keysToMask, string $path = '')\n    {\n        foreach ($keysToMask as $keyToMask) {\n            $explode = explode('/', $keyToMask);\n            $index   = end($explode);\n\n            if (strpos(strrev($path . '/' . $index), strrev($keyToMask)) === 0) {\n                if (is_array($args) && array_key_exists($index, $args)) {\n                    $args[$index] = '******************';\n                } elseif (\n                    is_object($args) && property_exists($args, $index)\n                    && isset($args->{$index}) && is_scalar($args->{$index})\n                ) {\n                    $args->{$index} = '******************';\n                }\n            }\n        }\n\n        if (is_array($args)) {\n            foreach ($args as $pathKey => $subarray) {\n                $args[$pathKey] = $this->maskData($subarray, $keysToMask, $path . '/' . $pathKey);\n            }\n        } elseif (is_object($args)) {\n            foreach ($args as $pathKey => $subarray) {\n                $args->{$pathKey} = $this->maskData($subarray, $keysToMask, $path . '/' . $pathKey);\n            }\n        }\n\n        return $args;\n    }\n\n    /**\n     * Determines the HTTP status code and the exit status code for this request.\n     */\n    protected function determineCodes(Throwable $exception): array\n    {\n        $statusCode = 500;\n        $exitStatus = EXIT_ERROR;\n\n        if ($exception instanceof HTTPExceptionInterface) {\n            $statusCode = $exception->getCode();\n        }\n\n        if ($exception instanceof HasExitCodeInterface) {\n            $exitStatus = $exception->getExitCode();\n        }\n\n        return [$statusCode, $exitStatus];\n    }\n\n    private function isDeprecationError(int $error): bool\n    {\n        $deprecations = E_DEPRECATED | E_USER_DEPRECATED;\n\n        return ($error & $deprecations) !== 0;\n    }\n\n    /**\n     * @return true\n     */\n    private function handleDeprecationError(string $message, ?string $file = null, ?int $line = null): bool\n    {\n        // Remove the trace of the error handler.\n        $trace = array_slice(debug_backtrace(), 2);\n\n        log_message(\n            $this->config->deprecationLogLevel,\n            \"[DEPRECATED] {message} in {errFile} on line {errLine}.\\n{trace}\",\n            [\n                'message' => $message,\n                'errFile' => clean_path($file ?? ''),\n                'errLine' => $line ?? 0,\n                'trace'   => self::renderBacktrace($trace),\n            ]\n        );\n\n        return true;\n    }\n\n    // --------------------------------------------------------------------\n    // Display Methods\n    // --------------------------------------------------------------------\n\n    /**\n     * This makes nicer looking paths for the error output.\n     *\n     * @deprecated Use dedicated `clean_path()` function.\n     */\n    public static function cleanPath(string $file): string\n    {\n        switch (true) {\n            case strpos($file, APPPATH) === 0:\n                $file = 'APPPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(APPPATH));\n                break;\n\n            case strpos($file, SYSTEMPATH) === 0:\n                $file = 'SYSTEMPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(SYSTEMPATH));\n                break;\n\n            case strpos($file, FCPATH) === 0:\n                $file = 'FCPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(FCPATH));\n                break;\n\n            case defined('VENDORPATH') && strpos($file, VENDORPATH) === 0:\n                $file = 'VENDORPATH' . DIRECTORY_SEPARATOR . substr($file, strlen(VENDORPATH));\n                break;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Describes memory usage in real-world units. Intended for use\n     * with memory_get_usage, etc.\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    public static function describeMemory(int $bytes): string\n    {\n        if ($bytes < 1024) {\n            return $bytes . 'B';\n        }\n\n        if ($bytes < 1_048_576) {\n            return round($bytes / 1024, 2) . 'KB';\n        }\n\n        return round($bytes / 1_048_576, 2) . 'MB';\n    }\n\n    /**\n     * Creates a syntax-highlighted version of a PHP file.\n     *\n     * @return bool|string\n     *\n     * @deprecated 4.4.0 No longer used. Moved to BaseExceptionHandler.\n     */\n    public static function highlightFile(string $file, int $lineNumber, int $lines = 15)\n    {\n        if (empty($file) || ! is_readable($file)) {\n            return false;\n        }\n\n        // Set our highlight colors:\n        if (function_exists('ini_set')) {\n            ini_set('highlight.comment', '#767a7e; font-style: italic');\n            ini_set('highlight.default', '#c7c7c7');\n            ini_set('highlight.html', '#06B');\n            ini_set('highlight.keyword', '#f1ce61;');\n            ini_set('highlight.string', '#869d6a');\n        }\n\n        try {\n            $source = file_get_contents($file);\n        } catch (Throwable $e) {\n            return false;\n        }\n\n        $source = str_replace([\"\\r\\n\", \"\\r\"], \"\\n\", $source);\n        $source = explode(\"\\n\", highlight_string($source, true));\n        $source = str_replace('<br />', \"\\n\", $source[1]);\n        $source = explode(\"\\n\", str_replace(\"\\r\\n\", \"\\n\", $source));\n\n        // Get just the part to show\n        $start = max($lineNumber - (int) round($lines / 2), 0);\n\n        // Get just the lines we need to display, while keeping line numbers...\n        $source = array_splice($source, $start, $lines, true);\n\n        // Used to format the line number in the source\n        $format = '% ' . strlen((string) ($start + $lines)) . 'd';\n\n        $out = '';\n        // Because the highlighting may have an uneven number\n        // of open and close span tags on one line, we need\n        // to ensure we can close them all to get the lines\n        // showing correctly.\n        $spans = 1;\n\n        foreach ($source as $n => $row) {\n            $spans += substr_count($row, '<span') - substr_count($row, '</span');\n            $row = str_replace([\"\\r\", \"\\n\"], ['', ''], $row);\n\n            if (($n + $start + 1) === $lineNumber) {\n                preg_match_all('#<[^>]+>#', $row, $tags);\n\n                $out .= sprintf(\n                    \"<span class='line highlight'><span class='number'>{$format}</span> %s\\n</span>%s\",\n                    $n + $start + 1,\n                    strip_tags($row),\n                    implode('', $tags[0])\n                );\n            } else {\n                $out .= sprintf('<span class=\"line\"><span class=\"number\">' . $format . '</span> %s', $n + $start + 1, $row) . \"\\n\";\n            }\n        }\n\n        if ($spans > 0) {\n            $out .= str_repeat('</span>', $spans);\n        }\n\n        return '<pre><code>' . $out . '</code></pre>';\n    }\n\n    private static function renderBacktrace(array $backtrace): string\n    {\n        $backtraces = [];\n\n        foreach ($backtrace as $index => $trace) {\n            $frame = $trace + ['file' => '[internal function]', 'line' => '', 'class' => '', 'type' => '', 'args' => []];\n\n            if ($frame['file'] !== '[internal function]') {\n                $frame['file'] = sprintf('%s(%s)', $frame['file'], $frame['line']);\n            }\n\n            unset($frame['line']);\n            $idx = $index;\n            $idx = str_pad((string) ++$idx, 2, ' ', STR_PAD_LEFT);\n\n            $args = implode(', ', array_map(static function ($value): string {\n                switch (true) {\n                    case is_object($value):\n                        return sprintf('Object(%s)', get_class($value));\n\n                    case is_array($value):\n                        return $value !== [] ? '[...]' : '[]';\n\n                    case $value === null:\n                        return 'null';\n\n                    case is_resource($value):\n                        return sprintf('resource (%s)', get_resource_type($value));\n\n                    default:\n                        return var_export($value, true);\n                }\n            }, $frame['args']));\n\n            $backtraces[] = sprintf(\n                '%s %s: %s%s%s(%s)',\n                $idx,\n                clean_path($frame['file']),\n                $frame['class'],\n                $frame['type'],\n                $frame['function'],\n                $args\n            );\n        }\n\n        return implode(\"\\n\", $backtraces);\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\Debug;\n\nuse App\\Controllers\\Home;\nuse CodeIgniter\\Exceptions\\PageNotFoundException;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse CodeIgniter\\Test\\StreamFilterTrait;\nuse Config\\Exceptions as ExceptionsConfig;\nuse Config\\Services;\nuse RuntimeException;\n\n/**\n * @internal\n *\n * @group Others\n */\nfinal class ExceptionHandlerTest extends CIUnitTestCase\n{\n    use StreamFilterTrait;\n\n    private ExceptionHandler $handler;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->handler = new ExceptionHandler(new ExceptionsConfig());\n    }\n\n    public function testDetermineViewsPageNotFoundException(): void\n    {\n        $determineView = $this->getPrivateMethodInvoker($this->handler, 'determineView');\n\n        $exception    = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n        $templatePath = APPPATH . 'Views/errors/html';\n        $viewFile     = $determineView($exception, $templatePath);\n\n        $this->assertSame('error_404.php', $viewFile);\n    }\n\n    public function testDetermineViewsRuntimeException(): void\n    {\n        $determineView = $this->getPrivateMethodInvoker($this->handler, 'determineView');\n\n        $exception    = new RuntimeException('Exception');\n        $templatePath = APPPATH . 'Views/errors/html';\n        $viewFile     = $determineView($exception, $templatePath);\n\n        $this->assertSame('error_exception.php', $viewFile);\n    }\n\n    public function testDetermineViewsRuntimeExceptionCode404(): void\n    {\n        $determineView = $this->getPrivateMethodInvoker($this->handler, 'determineView');\n\n        $exception    = new RuntimeException('foo', 404);\n        $templatePath = APPPATH . 'Views/errors/html';\n        $viewFile     = $determineView($exception, $templatePath);\n\n        $this->assertSame('error_404.php', $viewFile);\n    }\n\n    public function testDetermineViewsDisplayErrorsOffRuntimeException(): void\n    {\n        ini_set('display_errors', '0');\n\n        $determineView = $this->getPrivateMethodInvoker($this->handler, 'determineView');\n\n        $exception    = new RuntimeException('Exception');\n        $templatePath = APPPATH . 'Views/errors/html';\n        $viewFile     = $determineView($exception, $templatePath);\n\n        $this->assertSame('production.php', $viewFile);\n\n        ini_set('display_errors', '1');\n    }\n\n    public function testCollectVars(): void\n    {\n        $collectVars = $this->getPrivateMethodInvoker($this->handler, 'collectVars');\n\n        $vars = $collectVars(new RuntimeException('This.'), 404);\n\n        $this->assertIsArray($vars);\n        $this->assertCount(7, $vars);\n\n        foreach (['title', 'type', 'code', 'message', 'file', 'line', 'trace'] as $key) {\n            $this->assertArrayHasKey($key, $vars);\n        }\n    }\n\n    public function testHandleWebPageNotFoundExceptionDoNotAcceptHTML(): void\n    {\n        $exception = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n\n        $request  = Services::incomingrequest(null, false);\n        $response = Services::response(null, false);\n        $response->pretend();\n\n        ob_start();\n        $this->handler->handle($exception, $request, $response, 404, EXIT_ERROR);\n        $output = ob_get_clean();\n\n        $json = json_decode($output);\n        $this->assertSame(PageNotFoundException::class, $json->title);\n        $this->assertSame(PageNotFoundException::class, $json->type);\n        $this->assertSame(404, $json->code);\n        $this->assertSame('Controller or its method is not found: Foo::bar', $json->message);\n    }\n\n    public function testHandleWebPageNotFoundExceptionAcceptHTML(): void\n    {\n        $exception = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n\n        $request = Services::incomingrequest(null, false);\n        $request->setHeader('accept', 'text/html');\n        $response = Services::response(null, false);\n        $response->pretend();\n\n        ob_start();\n        $this->handler->handle($exception, $request, $response, 404, EXIT_ERROR);\n        $output = ob_get_clean();\n\n        $this->assertStringContainsString('<title>404 - Page Not Found</title>', $output);\n    }\n\n    public function testHandleCLIPageNotFoundException(): void\n    {\n        $exception = PageNotFoundException::forControllerNotFound('Foo', 'bar');\n\n        $request = Services::clirequest(null, false);\n        $request->setHeader('accept', 'text/html');\n        $response = Services::response(null, false);\n        $response->pretend();\n\n        $this->handler->handle($exception, $request, $response, 404, EXIT_ERROR);\n\n        $this->assertStringContainsString(\n            'ERROR: 404',\n            $this->getStreamFilterBuffer()\n        );\n        $this->assertStringContainsString(\n            'Controller or its method is not found: Foo::bar',\n            $this->getStreamFilterBuffer()\n        );\n\n        $this->resetStreamFilterBuffer();\n    }\n\n    public function testMaskSensitiveData(): void\n    {\n        $maskSensitiveData = $this->getPrivateMethodInvoker($this->handler, 'maskSensitiveData');\n\n        $trace = [\n            0 => [\n                'file'     => '/var/www/CodeIgniter4/app/Controllers/Home.php',\n                'line'     => 15,\n                'function' => 'f',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                    0 => (object) [\n                        'password' => 'secret1',\n                    ],\n                    1 => (object) [\n                        'default' => [\n                            'password' => 'secret2',\n                        ],\n                    ],\n                    2 => [\n                        'password' => 'secret3',\n                    ],\n                    3 => [\n                        'default' => ['password' => 'secret4'],\n                    ],\n                ],\n            ],\n            1 => [\n                'file'     => '/var/www/CodeIgniter4/system/CodeIgniter.php',\n                'line'     => 932,\n                'function' => 'index',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                ],\n            ],\n        ];\n        $keysToMask = ['password'];\n        $path       = '';\n\n        $newTrace = $maskSensitiveData($trace, $keysToMask, $path);\n\n        $this->assertSame(['password' => '******************'], (array) $newTrace[0]['args'][0]);\n        $this->assertSame(['password' => '******************'], $newTrace[0]['args'][1]->default);\n        $this->assertSame(['password' => '******************'], $newTrace[0]['args'][2]);\n        $this->assertSame(['password' => '******************'], $newTrace[0]['args'][3]['default']);\n    }\n\n    public function testMaskSensitiveDataTraceDataKey(): void\n    {\n        $maskSensitiveData = $this->getPrivateMethodInvoker($this->handler, 'maskSensitiveData');\n\n        $trace = [\n            0 => [\n                'file'     => '/var/www/CodeIgniter4/app/Controllers/Home.php',\n                'line'     => 15,\n                'function' => 'f',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                ],\n            ],\n            1 => [\n                'file'     => '/var/www/CodeIgniter4/system/CodeIgniter.php',\n                'line'     => 932,\n                'function' => 'index',\n                'class'    => Home::class,\n                'type'     => '->',\n                'args'     => [\n                ],\n            ],\n        ];\n        $keysToMask = ['file'];\n        $path       = '';\n\n        $newTrace = $maskSensitiveData($trace, $keysToMask, $path);\n\n        $this->assertSame('/var/www/CodeIgniter4/app/Controllers/Home.php', $newTrace[0]['file']);\n    }\n}\n", "Version 4.4.3\n#############\n\nRelease Date: Unreleased\n\n**4.4.3 release of CodeIgniter4**\n\n.. contents::\n    :local:\n    :depth: 3\n\nSECURITY\n********\n\n- *Detailed Error Report is Displayed in Production Environment* was fixed.\n  See the `Security advisory GHSA-hwxf-qxj7-7rfj <https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-hwxf-qxj7-7rfj>`_\n  for more information.\n\nBREAKING\n********\n\nMessage Changes\n***************\n\nChanges\n*******\n\nDeprecations\n************\n\nBugs Fixed\n**********\n\n- **UserGuide:** Fixed the descriptions for ``pre_system`` and ``post_system``\n  in :ref:`event-points`.\n\nSee the repo's\n`CHANGELOG.md <https://github.com/codeigniter4/CodeIgniter4/blob/develop/CHANGELOG.md>`_\nfor a complete list of bugs fixed.\n", "##############################\nHandling Multiple Environments\n##############################\n\nDevelopers often desire different system behavior depending on whether\nan application is running in a development or production environment.\nFor example, verbose error output is something that would be useful\nwhile developing an application, but it may also pose a security issue\nwhen \"live\". In development environments, you might want additional\ntools loaded that you don't in production environments, etc.\n\n.. contents::\n    :local:\n    :depth: 3\n\n************************\nThe Defined Environments\n************************\n\nBy default, CodeIgniter has three environments defined.\n\n- ``production`` for production\n- ``development`` for development\n- ``testing`` for PHPUnit testing\n\n.. important:: The environment ``testing`` is reserved for PHPUnit testing. It\n    has special conditions built into the framework at various places to assist\n    with that. You can't use it for your development.\n\nIf you want another environment, e.g., for staging, you can add custom environments.\nSee `Adding Environments`_.\n\n.. _setting-environment:\n\n*******************\nSetting Environment\n*******************\n\n.. _environment-constant:\n\nThe ENVIRONMENT Constant\n========================\n\nTo set your environment, CodeIgniter comes with the ``ENVIRONMENT`` constant.\nIf you set ``$_SERVER['CI_ENVIRONMENT']``, the value will be used,\notherwise defaulting to ``production``.\n\nThis can be set in several ways depending on your server setup.\n\n.env\n----\n\nThe simplest method to set the variable is in your :ref:`.env file <dotenv-file>`.\n\n.. code-block:: ini\n\n    CI_ENVIRONMENT = development\n\n.. note:: You can change the ``CI_ENVIRONMENT`` value in **.env** file by ``spark env`` command:\n\n    .. code-block:: console\n\n        php spark env production\n\n.. _environment-apache:\n\nApache\n------\n\nThis server variable can be set in your **.htaccess** file or Apache\nconfig using `SetEnv <https://httpd.apache.org/docs/2.4/mod/mod_env.html#setenv>`_.\n\n.. code-block:: apache\n\n    SetEnv CI_ENVIRONMENT development\n\n\n.. _environment-nginx:\n\nnginx\n-----\n\nUnder nginx, you must pass the environment variable through the ``fastcgi_params``\nin order for it to show up under the ``$_SERVER`` variable. This allows it to work on the\nvirtual-host level, instead of using `env` to set it for the entire server, though that\nwould work fine on a dedicated server. You would then modify your server config to something\nlike:\n\n.. code-block:: nginx\n\n    server {\n        server_name localhost;\n        include     conf/defaults.conf;\n        root        /var/www;\n\n        location    ~* \\.php$ {\n            fastcgi_param CI_ENVIRONMENT \"production\";\n            include conf/fastcgi-php.conf;\n        }\n    }\n\nAlternative methods are available for nginx and other servers, or you can\nremove this logic entirely and set the constant based on the server's IP address\n(for instance).\n\nIn addition to affecting some basic framework behavior (see the next\nsection), you may use this constant in your own development to\ndifferentiate between which environment you are running in.\n\n*******************\nAdding Environments\n*******************\n\nTo add custom environments, you just need to add boot files for them.\n\nBoot Files\n==========\n\nCodeIgniter requires that a PHP script matching the environment's name is located\nunder **APPPATH/Config/Boot**. These files can contain any customizations that\nyou would like to make for your environment, whether it's updating the error display\nsettings, loading additional developer tools, or anything else. These are\nautomatically loaded by the system. The following files are already created in\na fresh install:\n\n* development.php\n* production.php\n* testing.php\n\nFor example, if you want to add ``staging`` environment for staging, all you need\nto do is:\n\n1. copy **APPPATH/Config/Boot/production.php** to **staging.php**.\n2. customize settings in **staging.php** if you want.\n\n**********************************\nConfirming the Current Environment\n**********************************\n\nTo confirm the current environment, simply echo the constant ``ENVIRONMENT``.\n\nYou can also check the current environment by ``spark env`` command:\n\n.. code-block:: console\n\n    php spark env\n\n*************************************\nEffects on Default Framework Behavior\n*************************************\n\nThere are some places in the CodeIgniter system where the ``ENVIRONMENT``\nconstant is used. This section describes how default framework behavior\nis affected.\n\nError Reporting\n===============\n\nSetting the ``ENVIRONMENT`` constant to a value of ``development`` will cause\nall PHP errors to be rendered to the browser when they occur.\nConversely, setting the constant to ``production`` will disable all error\noutput. Disabling error reporting in production is a\n:doc:`good security practice </concepts/security>`.\n", "##############\nError Handling\n##############\n\nCodeIgniter builds error reporting into your system through Exceptions, both the `SPL collection <https://www.php.net/manual/en/spl.exceptions.php>`_, as\nwell as a few exceptions that are provided by the framework.\n\nDepending on your environment's setup,\nthe default action when an error or exception is thrown is to display a detailed error report unless the application\nis running under the ``production`` environment. In the ``production`` environment, a more generic message is displayed to\nkeep the best user experience for your users.\n\n.. contents::\n    :local:\n    :depth: 2\n\nUsing Exceptions\n================\n\nThis section is a quick overview for newer programmers, or for developers who are not experienced with using exceptions.\n\nExceptions are simply events that happen when the exception is \"thrown\". This halts the current flow of the script, and\nexecution is then sent to the error handler which displays the appropriate error page:\n\n.. literalinclude:: errors/001.php\n\nIf you are calling a method that might throw an exception, you can catch that exception using a ``try/catch`` block:\n\n.. literalinclude:: errors/002.php\n\nIf the ``$userModel`` throws an exception, it is caught and the code within the catch block is executed. In this example,\nthe scripts dies, echoing the error message that the ``UserModel`` defined.\n\nIn the example above, we catch any type of Exception. If we only want to watch for specific types of exceptions, like\na ``UnknownFileException``, we can specify that in the catch parameter. Any other exceptions that are thrown and are\nnot child classes of the caught exception will be passed on to the error handler:\n\n.. literalinclude:: errors/003.php\n\nThis can be handy for handling the error yourself, or for performing cleanup before the script ends. If you want\nthe error handler to function as normal, you can throw a new exception within the catch block:\n\n.. literalinclude:: errors/004.php\n\nConfiguration\n=============\n\nError Reporting\n---------------\n\nBy default, CodeIgniter will display a detailed error report with all errors in the ``development`` and ``testing`` environments, and will not\ndisplay any errors in the ``production`` environment.\n\n.. image:: ../images/error.png\n\nYou can change your environment by setting the ``CI_ENVIRONMENT`` variable.\nSee :ref:`setting-environment`.\n\n.. important:: Disabling error reporting DOES NOT stop logs from being written if there are errors.\n\n.. warning:: Note that your settings from the **.env** file are added to ``$_SERVER``\n    and ``$_ENV``. As a side effect, this means that if the detailed error report\n    is displayed, **your secure credentials are publicly exposed**.\n\nLogging Exceptions\n------------------\n\nBy default, all Exceptions other than 404 - Page Not Found exceptions are logged. This can be turned on and off\nby setting the ``$log`` value of **app/Config/Exceptions.php**:\n\n.. literalinclude:: errors/005.php\n\nTo ignore logging on other status codes, you can set the status code to ignore in the same file:\n\n.. literalinclude:: errors/006.php\n\n.. note:: It is possible that logging still will not happen for exceptions if your current Log settings\n    are not set up to log **critical** errors, which all exceptions are logged as.\n\nFramework Exceptions\n====================\n\nThe following framework exceptions are available:\n\nPageNotFoundException\n---------------------\n\nThis is used to signal a 404, Page Not Found error. When thrown, the system will show the view found at\n**app/Views/errors/html/error_404.php**. You should customize all of the error views for your site.\nIf, in **app/Config/Routes.php**, you have specified a 404 Override, that will be called instead of the standard\n404 page:\n\n.. literalinclude:: errors/007.php\n\nYou can pass a message into the exception that will be displayed in place of the default message on the 404 page.\n\nConfigException\n---------------\n\nThis exception should be used when the values from the configuration class are invalid, or when the config class\nis not the right type, etc:\n\n.. literalinclude:: errors/008.php\n\nThis provides an exit code of 3.\n\nDatabaseException\n-----------------\n\nThis exception is thrown for database errors, such as when the database connection cannot be created,\nor when it is temporarily lost:\n\n.. literalinclude:: errors/009.php\n\nThis provides an exit code of 8.\n\nRedirectException\n-----------------\n\n.. note:: Since v4.4.0, the namespace of ``RedirectException`` has been changed.\n    Previously it was ``CodeIgniter\\Router\\Exceptions\\RedirectException``. The\n    previous class is deprecated.\n\nThis exception is a special case allowing for overriding of all other response routing and\nforcing a redirect to a specific URI:\n\n.. literalinclude:: errors/010.php\n\n``$uri`` is a URI path relative to baseURL. You can also supply a\nredirect code to use instead of the default (``302``, \"temporary redirect\"):\n\n.. literalinclude:: errors/011.php\n\nAlso, since v4.4.0 an object of a class that implements ResponseInterface can be used as the first argument.\nThis solution is suitable for cases where you need to add additional headers or cookies in the response.\n\n.. literalinclude:: errors/018.php\n\n.. _error-specify-http-status-code:\n\nSpecify HTTP Status Code in Your Exception\n==========================================\n\n.. versionadded:: 4.3.0\n\nSince v4.3.0, you can specify the HTTP status code for your Exception class to implement\n``HTTPExceptionInterface``.\n\nWhen an exception implementing ``HTTPExceptionInterface`` is caught by CodeIgniter's exception handler, the Exception code will become the HTTP status code.\n\n.. _error-specify-exit-code:\n\nSpecify Exit Code in Your Exception\n===================================\n\n.. versionadded:: 4.3.0\n\nSince v4.3.0, you can specify the exit code for your Exception class to implement\n``HasExitCodeInterface``.\n\nWhen an exception implementing ``HasExitCodeInterface`` is caught by CodeIgniter's exception handler, the code returned from the ``getExitCode()`` method will become the exit code.\n\n.. _logging_deprecation_warnings:\n\nLogging Deprecation Warnings\n============================\n\n.. versionadded:: 4.3.0\n\nBy default, all errors reported by ``error_reporting()`` will be thrown as an ``ErrorException`` object. These\ninclude both ``E_DEPRECATED`` and ``E_USER_DEPRECATED`` errors. With the surge in use of PHP 8.1+, many users\nmay see exceptions thrown for `passing null to non-nullable arguments of internal functions <https://wiki.php.net/rfc/deprecate_null_to_scalar_internal_arg>`_.\nTo ease the migration to PHP 8.1, you can instruct CodeIgniter to log the deprecations instead of throwing them.\n\nFirst, make sure your copy of ``Config\\Exceptions`` is updated with the two new properties and set as follows:\n\n.. literalinclude:: errors/012.php\n\nNext, depending on the log level you set in ``Config\\Exceptions::$deprecationLogLevel``, check whether the\nlogger threshold defined in ``Config\\Logger::$threshold`` covers the deprecation log level. If not, adjust\nit accordingly.\n\n.. literalinclude:: errors/013.php\n\nAfter that, subsequent deprecations will be logged instead of thrown.\n\nThis feature also works with user deprecations:\n\n.. literalinclude:: errors/014.php\n\nFor testing your application you may want to always throw on deprecations. You may configure this by\nsetting the environment variable ``CODEIGNITER_SCREAM_DEPRECATIONS`` to a truthy value.\n\n.. _custom-exception-handlers:\n\nCustom Exception Handlers\n=========================\n\n.. versionadded:: 4.4.0\n\nIf you need more control over how exceptions are displayed you can now define your own handlers and\nspecify when they apply.\n\nDefining the New Handler\n------------------------\n\nThe first step is to create a new class which implements ``CodeIgniter\\Debug\\ExceptionHandlerInterface``.\nYou can also extend ``CodeIgniter\\Debug\\BaseExceptionHandler``.\nThis class includes a number of utility methods that are used by the default exception handler.\nThe new handler must implement a single method: ``handle()``:\n\n.. literalinclude:: errors/015.php\n\nThis example defines the minimum amount of code typically needed - display a view and exit with the proper\nexit code. However, the ``BaseExceptionHandler`` provides a number of other helper functions and objects.\n\nConfiguring the New Handler\n---------------------------\n\nTelling CodeIgniter to use your new exception handler class is done in the **app/Config/Exceptions.php**\nconfiguration file's ``handler()`` method:\n\n.. literalinclude:: errors/016.php\n\nYou can use any logic your application needs to determine whether it should handle the exception, but the\ntwo most common are checking on the HTTP status code or the type of exception. If your class should handle\nit then return a new instance of that class:\n\n.. literalinclude:: errors/017.php\n", "#############################\nUpgrading from 4.4.2 to 4.4.3\n#############################\n\nPlease refer to the upgrade instructions corresponding to your installation method.\n\n- :ref:`Composer Installation App Starter Upgrading <app-starter-upgrading>`\n- :ref:`Composer Installation Adding CodeIgniter4 to an Existing Project Upgrading <adding-codeigniter4-upgrading>`\n- :ref:`Manual Installation Upgrading <installing-manual-upgrading>`\n\n.. contents::\n    :local:\n    :depth: 2\n\nMandatory File Changes\n**********************\n\nerror_exception.php\n===================\n\nThe following file received significant changes and\n**you must merge the updated versions** with your application:\n\n- app/Views/errors/html/error_exception.php\n\nBreaking Changes\n****************\n\nBreaking Enhancements\n*********************\n\nProject Files\n*************\n\nSome files in the **project space** (root, app, public, writable) received updates. Due to\nthese files being outside of the **system** scope they will not be changed without your intervention.\n\nThere are some third-party CodeIgniter modules available to assist with merging changes to\nthe project space: `Explore on Packagist <https://packagist.org/explore/?query=codeigniter4%20updates>`_.\n\nContent Changes\n===============\n\nThe following files received significant changes (including deprecations or visual adjustments)\nand it is recommended that you merge the updated versions with your application:\n\nConfig\n------\n\n- @TODO\n\nAll Changes\n===========\n\nThis is a list of all files in the **project space** that received changes;\nmany will be simple comments or formatting that have no effect on the runtime:\n\n- @TODO\n- app/Config/Boot/development.php\n- app/Config/Boot/production.php\n- app/Config/Boot/testing.php\n- app/Config/Filters.php\n- app/Views/errors/html/error_404.php\n- app/Views/errors/html/error_exception.php\n"], "filenames": ["app/Config/Boot/development.php", "app/Config/Boot/production.php", "app/Config/Boot/testing.php", "app/Views/errors/html/error_404.php", "app/Views/errors/html/error_exception.php", "system/Debug/ExceptionHandler.php", "system/Debug/Exceptions.php", "tests/system/Debug/ExceptionHandlerTest.php", "user_guide_src/source/changelogs/v4.4.3.rst", "user_guide_src/source/general/environments.rst", "user_guide_src/source/general/errors.rst", "user_guide_src/source/installation/upgrade_443.rst"], "buggy_code_start_loc": [9, 8, 1, 80, 46, 132, 256, 72, 10, 31, 52, 16], "buggy_code_end_loc": [9, 8, 1, 81, 386, 133, 257, 72, 10, 31, 54, 50], "fixing_code_start_loc": [10, 9, 2, 80, 47, 132, 256, 73, 11, 32, 52, 17], "fixing_code_end_loc": [12, 11, 8, 81, 389, 139, 263, 88, 18, 34, 58, 65], "type": "CWE-209", "message": "CodeIgniter is a PHP full-stack web framework. Prior to CodeIgniter4 version 4.4.3, if an error or exception occurs, a detailed error report is displayed even if in the production environment. As a result, confidential information may be leaked. Version 4.4.3 contains a patch. As a workaround, replace `ini_set('display_errors', '0')` with `ini_set('display_errors', 'Off')` in `app/Config/Boot/production.php`.", "other": {"cve": {"id": "CVE-2023-46240", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-31T16:15:09.617", "lastModified": "2023-11-08T23:43:22.447", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "CodeIgniter is a PHP full-stack web framework. Prior to CodeIgniter4 version 4.4.3, if an error or exception occurs, a detailed error report is displayed even if in the production environment. As a result, confidential information may be leaked. Version 4.4.3 contains a patch. As a workaround, replace `ini_set('display_errors', '0')` with `ini_set('display_errors', 'Off')` in `app/Config/Boot/production.php`."}, {"lang": "es", "value": "CodeIgniter es un framework web PHP de pila completa. Antes de CodeIgniter4 versi\u00f3n 4.4.3, si se produc\u00eda un error o una excepci\u00f3n, se mostraba un informe de error detallado incluso en el entorno de producci\u00f3n. Como resultado, se puede filtrar informaci\u00f3n confidencial. La versi\u00f3n 4.4.3 contiene un parche. Como workaround, reemplace `ini_set('display_errors', '0')` con `ini_set('display_errors', 'Off')` en `app/Config/Boot/production.php`."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-209"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:codeigniter:codeigniter:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.4.3", "matchCriteriaId": "04B25A7E-3363-492A-A24A-B7D0087E9DAA"}]}]}], "references": [{"url": "https://codeigniter4.github.io/userguide/general/errors.html#error-reporting", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/codeigniter4/CodeIgniter4/commit/423569fc31e29f51635a2e59c89770333f0e7563", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-hwxf-qxj7-7rfj", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/423569fc31e29f51635a2e59c89770333f0e7563"}}