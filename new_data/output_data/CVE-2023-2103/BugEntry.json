{"buggy_code": ["<?php\n/**\n * Local variables.\n * \n * @var array $available_services\n */\n?>\n\n<div id=\"wizard-frame-1\" class=\"wizard-frame\" style=\"visibility: hidden;\">\n    <div class=\"frame-container\">\n        <h2 class=\"frame-title\"><?= lang('service_and_provider') ?></h2>\n\n        <div class=\"row frame-content\">\n            <div class=\"col\">\n                <div class=\"mb-3\">\n                    <label for=\"select-service\">\n                        <strong><?= lang('service') ?></strong>\n                    </label>\n\n                    <select id=\"select-service\" class=\"form-control\">\n                        <?php\n                        // Group services by category, only if there is at least one service with a parent category.\n                        $has_category = FALSE;\n                        foreach ($available_services as $service)\n                        {\n                            if ( ! empty($service['category_id']))\n                            {\n                                $has_category = TRUE;\n                                break;\n                            }\n                        }\n\n                        if ($has_category)\n                        {\n                            $grouped_services = [];\n\n                            foreach ($available_services as $service)\n                            {\n                                if ( ! empty($service['category_id']))\n                                {\n                                    if ( ! isset($grouped_services[$service['category_name']]))\n                                    {\n                                        $grouped_services[$service['category_name']] = [];\n                                    }\n\n                                    $grouped_services[$service['category_name']][] = $service;\n                                }\n                            }\n\n                            // We need the uncategorized services at the end of the list, so we will use another\n                            // iteration only for the uncategorized services.\n                            $grouped_services['uncategorized'] = [];\n                            foreach ($available_services as $service)\n                            {\n                                if ($service['category_id'] == NULL)\n                                {\n                                    $grouped_services['uncategorized'][] = $service;\n                                }\n                            }\n\n                            foreach ($grouped_services as $key => $group)\n                            {\n                                $group_label = $key !== 'uncategorized'\n                                    ? $group[0]['category_name']\n                                    : 'Uncategorized';\n\n                                if (count($group) > 0)\n                                {\n                                    echo '<optgroup label=\"' . $group_label . '\">';\n                                    foreach ($group as $service)\n                                    {\n                                        echo '<option value=\"' . $service['id'] . '\">'\n                                            . $service['name'] . '</option>';\n                                    }\n                                    echo '</optgroup>';\n                                }\n                            }\n                        }\n                        else\n                        {\n                            foreach ($available_services as $service)\n                            {\n                                echo '<option value=\"' . $service['id'] . '\">' . $service['name'] . '</option>';\n                            }\n                        }\n                        ?>\n                    </select>\n                </div>\n\n                <div class=\"mb-3\">\n                    <label for=\"select-provider\">\n                        <strong><?= lang('provider') ?></strong>\n                    </label>\n\n                    <select id=\"select-provider\" class=\"form-control\"></select>\n                </div>\n\n                <div id=\"service-description\"></div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"command-buttons\">\n        <span>&nbsp;</span>\n\n        <button type=\"button\" id=\"button-next-1\" class=\"btn button-next btn-dark\"\n                data-step_index=\"1\">\n            <?= lang('next') ?>\n            <i class=\"fas fa-chevron-right ms-2\"></i>\n        </button>\n    </div>\n</div>\n", "<?php\n/**\n * Local variables.\n * \n * @var string $cookie_notice_content\n */\n?>\n<div id=\"cookie-notice-modal\" class=\"modal fade\">\n    <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?= lang('cookie_notice') ?></h4>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n            </div>\n            <div class=\"modal-body\">\n                <p><?= $cookie_notice_content ?></p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                    <?= lang('close') ?>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n", "<?php\n/**\n * Local variables.\n * \n * @var string $privacy_policy_content\n */\n?>\n\n<div id=\"privacy-policy-modal\" class=\"modal fade\">\n    <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?= lang('privacy_policy') ?></h4>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"><span aria-hidden=\"true\"></span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <p><?= $privacy_policy_content ?></p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                    <?= lang('close') ?>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n", "<?php\n/**\n * Local variables.\n * \n * @var string $terms_and_conditions_content\n */\n?>\n\n<div id=\"terms-and-conditions-modal\" class=\"modal fade\">\n    <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?= lang('terms_and_conditions') ?></h4>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n            </div>\n            <div class=\"modal-body\">\n                <p><?= $terms_and_conditions_content ?></p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                    <?= lang('close') ?>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n", "/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.5.0\n * ---------------------------------------------------------------------------- */\n\n/**\n * Booking page.\n *\n * This module implements the functionality of the booking page\n *\n * Old Name: FrontendBook\n */\nApp.Pages.Booking = (function () {\n    const $cookieNoticeLink = $('.cc-link');\n    const $selectDate = $('#select-date');\n    const $selectService = $('#select-service');\n    const $selectProvider = $('#select-provider');\n    const $selectTimezone = $('#select-timezone');\n    const $firstName = $('#first-name');\n    const $lastName = $('#last-name');\n    const $email = $('#email');\n    const $phoneNumber = $('#phone-number');\n    const $address = $('#address');\n    const $city = $('#city');\n    const $zipCode = $('#zip-code');\n    const $notes = $('#notes');\n    const $captchaTitle = $('.captcha-title');\n    const $availableHours = $('#available-hours');\n    const $bookAppointmentSubmit = $('#book-appointment-submit');\n    const $deletePersonalInformation = $('#delete-personal-information');\n    const tippy = window.tippy;\n    const moment = window.moment;\n\n    /**\n     * Determines the functionality of the page.\n     *\n     * @type {Boolean}\n     */\n    let manageMode = vars('manage_mode') || false;\n\n    /**\n     * Initialize the module.\n     */\n    function initialize() {\n        if (Boolean(Number(vars('display_cookie_notice')))) {\n            cookieconsent.initialise({\n                palette: {\n                    popup: {\n                        background: '#ffffffbd',\n                        text: '#666666'\n                    },\n                    button: {\n                        background: '#429a82',\n                        text: '#ffffff'\n                    }\n                },\n                content: {\n                    message: lang('website_using_cookies_to_ensure_best_experience'),\n                    dismiss: 'OK'\n                }\n            });\n\n            $cookieNoticeLink.replaceWith(\n                $('<a/>', {\n                    'data-toggle': 'modal',\n                    'data-target': '#cookie-notice-modal',\n                    'href': '#',\n                    'class': 'cc-link',\n                    'text': $cookieNoticeLink.text()\n                })\n            );\n        }\n\n        manageMode = vars('manage_mode');\n\n        // Initialize page's components (tooltips, date pickers etc).\n        tippy('[data-tippy-content]');\n\n        App.Utils.UI.initializeDatepicker($selectDate, {\n            inline: true,\n            minDate: new Date(),\n            maxDate: moment().add(vars('future_booking_limit'), 'days').toDate(),\n            onChange: (selectedDates) => {\n                App.Http.Booking.getAvailableHours(moment(selectedDates[0]).format('YYYY-MM-DD'));\n                updateConfirmFrame();\n            },\n\n            onMonthChange: (selectedDates, dateStr, instance) => {\n                setTimeout(() => {\n                    const displayedMonthMoment = moment(instance.currentYearElement.value + '-' + (Number(instance.monthsDropdownContainer.value) + 1) + '-01');\n\n                    App.Http.Booking.getUnavailableDates(\n                        $selectProvider.val(),\n                        $selectService.val(),\n                        displayedMonthMoment.format('YYYY-MM-DD')\n                    );\n                }, 500);\n            },\n\n            onYearChange: (selectedDates, dateStr, instance) => {\n                setTimeout(() => {\n                    const displayedMonthMoment = moment(instance.currentYearElement.value + '-' + (Number(instance.monthsDropdownContainer.value) + 1) + '-01');\n\n                    App.Http.Booking.getUnavailableDates(\n                        $selectProvider.val(),\n                        $selectService.val(),\n                        displayedMonthMoment.format('YYYY-MM-DD')\n                    );\n                }, 500);\n            },\n        });\n\n        const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        const isTimezoneSupported = $selectTimezone.find(`option[value=\"${browserTimezone}\"]`).length > 0;\n        $selectTimezone.val(isTimezoneSupported ? browserTimezone : 'UTC');\n\n        // Bind the event handlers (might not be necessary every time we use this class).\n        addEventListeners();\n\n        optimizeContactInfoDisplay();\n\n        // If the manage mode is true, the appointment data should be loaded by default.\n        if (manageMode) {\n            applyAppointmentData(vars('appointment_data'), vars('provider_data'), vars('customer_data'));\n            $('#wizard-frame-1').css({\n                'visibility': 'visible',\n                'display': 'none'\n            }).fadeIn();\n        } else {\n            // Check if a specific service was selected (via URL parameter).\n            const selectedServiceId = App.Utils.Url.queryParam('service');\n\n            if (selectedServiceId && $selectService.find('option[value=\"' + selectedServiceId + '\"]').length > 0) {\n                $selectService.val(selectedServiceId);\n            }\n\n            $selectService.trigger('change'); // Load the available hours.\n\n            // Check if a specific provider was selected.\n            const selectedProviderId = App.Utils.Url.queryParam('provider');\n\n            if (selectedProviderId && $selectProvider.find('option[value=\"' + selectedProviderId + '\"]').length === 0) {\n                // Select a service of this provider in order to make the provider available in the select box.\n                for (const index in vars('available_providers')) {\n                    const provider = vars('available_providers')[index];\n\n                    if (provider.id === selectedProviderId && provider.services.length > 0) {\n                        $selectService.val(provider.services[0]).trigger('change');\n                    }\n                }\n            }\n\n            if (selectedProviderId && $selectProvider.find('option[value=\"' + selectedProviderId + '\"]').length > 0) {\n                $selectProvider.val(selectedProviderId).trigger('change');\n            }\n\n            if (\n                (selectedServiceId && selectedProviderId) ||\n                (vars('available_services').length === 1 && vars('available_providers').length === 1)\n            ) {\n                $('.active-step').removeClass('active-step');\n                $('#step-2').addClass('active-step');\n                $('#wizard-frame-1').hide();\n                $('#wizard-frame-2').fadeIn();\n\n                $selectService.closest('.wizard-frame').find('.button-next').trigger('click');\n\n                $(document).find('.book-step:first').hide();\n\n                $(document).find('.button-back:first').css('visibility', 'hidden');\n\n                $(document)\n                    .find('.book-step:not(:first)')\n                    .each((index, bookStepEl) =>\n                        $(bookStepEl)\n                            .find('strong')\n                            .text(index + 1)\n                    );\n            } else {\n                $('#wizard-frame-1').css({\n                    'visibility': 'visible',\n                    'display': 'none'\n                }).fadeIn();\n            }\n\n            prefillFromQueryParam('#first-name', 'first_name');\n            prefillFromQueryParam('#last-name', 'last_name');\n            prefillFromQueryParam('#email', 'email');\n            prefillFromQueryParam('#phone-number', 'phone');\n            prefillFromQueryParam('#address', 'address');\n            prefillFromQueryParam('#city', 'city');\n            prefillFromQueryParam('#zip-code', 'zip');\n        }\n    }\n\n    function prefillFromQueryParam(field, param) {\n        const $target = $(field);\n\n        if (!$target.length) {\n            return;\n        }\n\n        $target.val(App.Utils.Url.queryParam(param));\n    }\n\n    /**\n     * Remove empty columns and center elements if needed.\n     */\n    function optimizeContactInfoDisplay() {\n        const $fieldCols = $(document).find('#wizard-frame-3 .field-col');\n\n        $fieldCols.each((index, fieldColEl) => {\n            const $fieldCol = $(fieldColEl);\n\n            if (!$fieldCol.find('.form-control').length) {\n                $fieldCol.hide();\n            }\n        });\n    }\n\n    /**\n     * Add the page event listeners.\n     */\n    function addEventListeners() {\n        /**\n         * Event: Timezone \"Changed\"\n         */\n        $selectTimezone.on('change', () => {\n            const date = $selectDate[0]._flatpickr.selectedDates[0];\n\n            if (!date) {\n                return;\n            }\n\n            App.Http.Booking.getAvailableHours(moment(date).format('YYYY-MM-DD'));\n\n            updateConfirmFrame();\n        });\n\n        /**\n         * Event: Selected Provider \"Changed\"\n         *\n         * Whenever the provider changes the available appointment date - time periods must be updated.\n         */\n        $selectProvider.on('change', (event) => {\n            const $target = $(event.target);\n\n            App.Http.Booking.getUnavailableDates(\n                $target.val(),\n                $selectService.val(),\n                moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD')\n            );\n            updateConfirmFrame();\n        });\n\n        /**\n         * Event: Selected Service \"Changed\"\n         *\n         * When the user clicks on a service, its available providers should\n         * become visible.\n         */\n        $selectService.on('change', (event) => {\n            const $target = $(event.target);\n            const serviceId = $selectService.val();\n\n            $selectProvider.empty();\n\n            vars('available_providers').forEach((provider) => {\n                // If the current provider is able to provide the selected service, add him to the list box.\n                const canServeService =\n                    provider.services.filter((providerServiceId) => Number(providerServiceId) === Number(serviceId))\n                        .length > 0;\n\n                if (canServeService) {\n                    $selectProvider.append(new Option(provider.first_name + ' ' + provider.last_name, provider.id));\n                }\n            });\n\n            // Add the \"Any Provider\" entry.\n            if ($selectProvider.find('option').length >= 1 && vars('display_any_provider') === '1') {\n                $selectProvider.prepend(new Option(lang('any_provider'), 'any-provider', true, true));\n            }\n\n            App.Http.Booking.getUnavailableDates(\n                $selectProvider.val(),\n                $target.val(),\n                moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD')\n            );\n\n            updateConfirmFrame();\n\n            updateServiceDescription(serviceId);\n        });\n\n        /**\n         * Event: Next Step Button \"Clicked\"\n         *\n         * This handler is triggered every time the user pressed the \"next\" button on the book wizard.\n         * Some special tasks might be performed, depending on the current wizard step.\n         */\n        $('.button-next').on('click', (event) => {\n            const $target = $(event.currentTarget);\n\n            // If we are on the first step and there is no provider selected do not continue with the next step.\n            if ($target.attr('data-step_index') === '1' && !$selectProvider.val()) {\n                return;\n            }\n\n            // If we are on the 2nd tab then the user should have an appointment hour selected.\n            if ($target.attr('data-step_index') === '2') {\n                if (!$('.selected-hour').length) {\n                    if (!$('#select-hour-prompt').length) {\n                        $('<div/>', {\n                            'id': 'select-hour-prompt',\n                            'class': 'text-danger mb-4',\n                            'text': lang('appointment_hour_missing')\n                        }).prependTo('#available-hours');\n                    }\n                    return;\n                }\n            }\n\n            // If we are on the 3rd tab then we will need to validate the user's input before proceeding to the next\n            // step.\n            if ($target.attr('data-step_index') === '3') {\n                if (!validateCustomerForm()) {\n                    return; // Validation failed, do not continue.\n                } else {\n                    updateConfirmFrame();\n                }\n            }\n\n            // Display the next step tab (uses jquery animation effect).\n            const nextTabIndex = parseInt($target.attr('data-step_index')) + 1;\n\n            $target\n                .parents()\n                .eq(1)\n                .fadeOut(() => {\n                    $('.active-step').removeClass('active-step');\n                    $('#step-' + nextTabIndex).addClass('active-step');\n                    $('#wizard-frame-' + nextTabIndex).fadeIn();\n                });\n        });\n\n        /**\n         * Event: Back Step Button \"Clicked\"\n         *\n         * This handler is triggered every time the user pressed the \"back\" button on the\n         * book wizard.\n         */\n        $('.button-back').on('click', (event) => {\n            const prevTabIndex = parseInt($(event.currentTarget).attr('data-step_index')) - 1;\n\n            $(event.currentTarget)\n                .parents()\n                .eq(1)\n                .fadeOut(() => {\n                    $('.active-step').removeClass('active-step');\n                    $('#step-' + prevTabIndex).addClass('active-step');\n                    $('#wizard-frame-' + prevTabIndex).fadeIn();\n                });\n        });\n\n        /**\n         * Event: Available Hour \"Click\"\n         *\n         * Triggered whenever the user clicks on an available hour for his appointment.\n         */\n        $availableHours.on('click', '.available-hour', (event) => {\n            $availableHours.find('.selected-hour').removeClass('selected-hour');\n            $(event.target).addClass('selected-hour');\n            updateConfirmFrame();\n        });\n\n        if (manageMode) {\n            /**\n             * Event: Cancel Appointment Button \"Click\"\n             *\n             * When the user clicks the \"Cancel\" button this form is going to be submitted. We need\n             * the user to confirm this action because once the appointment is cancelled, it will be\n             * deleted from the database.\n             *\n             * @param {jQuery.Event} event\n             */\n            $('#cancel-appointment').on('click', () => {\n                const $cancelAppointmentForm = $('#cancel-appointment-form');\n\n                let $cancellationReason;\n\n                const buttons = [\n                    {\n                        text: lang('close'),\n                        click: (event, messageModal) => {\n                            messageModal.dispose();\n                        }\n                    },\n                    {\n                        text: lang('confirm'),\n                        click: () => {\n                            if ($cancellationReason.val() === '') {\n                                $cancellationReason.css('border', '2px solid #DC3545');\n                                return;\n                            }\n                            $cancelAppointmentForm.find('#hidden-cancellation-reason').val($cancellationReason.val());\n                            $cancelAppointmentForm.submit();\n                        }\n                    }\n                ];\n\n                App.Utils.Message.show(\n                    lang('cancel_appointment_title'),\n                    lang('write_appointment_removal_reason'),\n                    buttons\n                );\n\n                $cancellationReason = $('<textarea/>', {\n                    'class': 'form-control',\n                    'id': 'cancellation-reason',\n                    'rows': '3',\n                    'css': {\n                        'width': '100%'\n                    }\n                }).appendTo('#message-modal .modal-body');\n\n                return false;\n            });\n\n            $deletePersonalInformation.on('click', () => {\n                const buttons = [\n                    {\n                        text: lang('cancel'),\n                        click: (event, messageModal) => {\n                            messageModal.dispose();\n                        }\n                    },\n                    {\n                        text: lang('delete'),\n                        click: () => {\n                            App.Http.Booking.deletePersonalInformation(vars('customer_token'));\n                        }\n                    }\n                ];\n\n                App.Utils.Message.show(\n                    lang('delete_personal_information'),\n                    lang('delete_personal_information_prompt'),\n                    buttons\n                );\n            });\n        }\n\n        /**\n         * Event: Book Appointment Form \"Submit\"\n         *\n         * Before the form is submitted to the server we need to make sure that in the meantime the selected appointment\n         * date/time wasn't reserved by another customer or event.\n         *\n         * @param {jQuery.Event} event\n         */\n        $bookAppointmentSubmit.on('click', () => {\n            const $acceptToTermsAndConditions = $('#accept-to-terms-and-conditions');\n\n            $acceptToTermsAndConditions.removeClass('is-invalid');\n\n            if ($acceptToTermsAndConditions.length && !$acceptToTermsAndConditions.prop('checked')) {\n                $acceptToTermsAndConditions.addClass('is-invalid');\n                return;\n            }\n\n            const $acceptToPrivacyPolicy = $('#accept-to-privacy-policy');\n\n            $acceptToPrivacyPolicy.removeClass('is-invalid');\n\n            if ($acceptToPrivacyPolicy.length && !$acceptToPrivacyPolicy.prop('checked')) {\n                $acceptToPrivacyPolicy.addClass('is-invalid');\n                return;\n            }\n\n            App.Http.Booking.registerAppointment();\n        });\n\n        /**\n         * Event: Refresh captcha image.\n         */\n        $captchaTitle.on('click', 'button', () => {\n            $('.captcha-image').attr('src', App.Utils.Url.siteUrl('captcha?' + Date.now()));\n        });\n\n        $selectDate.on('mousedown', '.ui-datepicker-calendar td', () => {\n            setTimeout(() => {\n                App.Http.Booking.applyPreviousUnavailableDates();\n            }, 300);\n        });\n    }\n\n    /**\n     * This function validates the customer's data input. The user cannot continue without passing all the validation\n     * checks.\n     *\n     * @return {Boolean} Returns the validation result.\n     */\n    function validateCustomerForm() {\n        $('#wizard-frame-3 .is-invalid').removeClass('is-invalid');\n        $('#wizard-frame-3 label.text-danger').removeClass('text-danger');\n\n        // Validate required fields.\n        let missingRequiredField = false;\n\n        $('.required').each((index, requiredField) => {\n            if (!$(requiredField).val()) {\n                $(requiredField).addClass('is-invalid');\n                missingRequiredField = true;\n            }\n        });\n\n        if (missingRequiredField) {\n            $('#form-message').text(lang('fields_are_required'));\n            return false;\n        }\n\n        // Validate email address.\n        if ($email.val() && !App.Utils.Validation.email($email.val())) {\n            $email.addClass('is-invalid');\n            $('#form-message').text(lang('invalid_email'));\n            return false;\n        }\n\n        // Validate phone number.\n        const phoneNumber = $phoneNumber.val();\n\n        if (phoneNumber && !App.Utils.Validation.phone(phoneNumber)) {\n            $phoneNumber.addClass('is-invalid');\n            $('#form-message').text(lang('invalid_phone'));\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Every time this function is executed, it updates the confirmation page with the latest\n     * customer settings and input for the appointment booking.\n     */\n    function updateConfirmFrame() {\n        if ($availableHours.find('.selected-hour').text() === '') {\n            return;\n        }\n\n        // Appointment Details\n        let selectedDate = $selectDate[0]._flatpickr.selectedDates[0];\n\n        if (selectedDate !== null) {\n            selectedDate = App.Utils.Date.format(selectedDate, vars('date_format'), vars('time_format'));\n        }\n\n        const serviceId = $selectService.val();\n        let servicePrice = '';\n        let serviceCurrency = '';\n\n        vars('available_services').forEach((service) => {\n            if (Number(service.id) === Number(serviceId) && Number(service.price) > 0) {\n                servicePrice = service.price;\n                serviceCurrency = service.currency;\n                return false; // Break loop\n            }\n        });\n\n        $(document)\n            .find('.display-selected-service')\n            .text($selectService.find('option:selected').text())\n            .removeClass('invisible');\n\n        $(document)\n            .find('.display-selected-provider')\n            .text($selectProvider.find('option:selected').text())\n            .removeClass('invisible');\n\n        $('#appointment-details').empty();\n\n        $('<div/>', {\n            'html': [\n                $('<h4/>', {\n                    'text': lang('appointment')\n                }),\n                $('<p/>', {\n                    'html': [\n                        $('<span/>', {\n                            'text': lang('service') + ': ' + $selectService.find('option:selected').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('provider') + ': ' + $selectProvider.find('option:selected').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text':\n                                lang('start') +\n                                ': ' +\n                                selectedDate +\n                                ' ' +\n                                $availableHours.find('.selected-hour').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('timezone') + ': ' + $selectTimezone.find('option:selected').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('price') + ': ' + servicePrice + ' ' + serviceCurrency,\n                            'prop': {\n                                'hidden': !servicePrice\n                            }\n                        })\n                    ]\n                })\n            ]\n        }).appendTo('#appointment-details');\n\n        // Customer Details\n        const firstName = App.Utils.String.escapeHtml($firstName.val());\n        const lastName = App.Utils.String.escapeHtml($lastName.val());\n        const phoneNumber = App.Utils.String.escapeHtml($phoneNumber.val());\n        const email = App.Utils.String.escapeHtml($email.val());\n        const address = App.Utils.String.escapeHtml($address.val());\n        const city = App.Utils.String.escapeHtml($city.val());\n        const zipCode = App.Utils.String.escapeHtml($zipCode.val());\n\n        $('#customer-details').empty();\n\n        $('<div/>', {\n            'html': [\n                $('<h4/>)', {\n                    'text': lang('customer')\n                }),\n                $('<p/>', {\n                    'html': [\n                        $('<span/>', {\n                            'text': lang('customer') + ': ' + firstName + ' ' + lastName\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('phone_number') + ': ' + phoneNumber\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('email') + ': ' + email\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': address ? lang('address') + ': ' + address : ''\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': city ? lang('city') + ': ' + city : ''\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': zipCode ? lang('zip_code') + ': ' + zipCode : ''\n                        }),\n                        $('<br/>')\n                    ]\n                })\n            ]\n        }).appendTo('#customer-details');\n\n        // Update appointment form data for submission to server when the user confirms the appointment.\n        const data = {};\n\n        data.customer = {\n            last_name: $lastName.val(),\n            first_name: $firstName.val(),\n            email: $email.val(),\n            phone_number: $phoneNumber.val(),\n            address: $address.val(),\n            city: $city.val(),\n            zip_code: $zipCode.val(),\n            timezone: $selectTimezone.val()\n        };\n\n        data.appointment = {\n            start_datetime:\n                moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD') +\n                ' ' +\n                moment($('.selected-hour').data('value'), 'HH:mm').format('HH:mm') +\n                ':00',\n            end_datetime: calculateEndDatetime(),\n            notes: $notes.val(),\n            is_unavailability: false,\n            id_users_provider: $selectProvider.val(),\n            id_services: $selectService.val()\n        };\n\n        data.manage_mode = Number(manageMode);\n\n        if (manageMode) {\n            data.appointment.id = vars('appointment_data').id;\n            data.customer.id = vars('customer_data').id;\n        }\n        $('input[name=\"post_data\"]').val(JSON.stringify(data));\n    }\n\n    /**\n     * This method calculates the end datetime of the current appointment.\n     *\n     * End datetime is depending on the service and start datetime fields.\n     *\n     * @return {String} Returns the end datetime in string format.\n     */\n    function calculateEndDatetime() {\n        // Find selected service duration.\n        const serviceId = $selectService.val();\n\n        const service = vars('available_services').find(\n            (availableService) => Number(availableService.id) === Number(serviceId)\n        );\n\n        // Add the duration to the start datetime.\n        const selectedDate = moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD');\n\n        const selectedHour = $('.selected-hour').data('value'); // HH:mm\n\n        const startMoment = moment(selectedDate + ' ' + selectedHour);\n\n        let endMoment;\n\n        if (service.duration && startMoment) {\n            endMoment = startMoment.clone().add({'minutes': parseInt(service.duration)});\n        } else {\n            endMoment = moment();\n        }\n\n        return endMoment.format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    /**\n     * This method applies the appointment's data to the wizard so\n     * that the user can start making changes on an existing record.\n     *\n     * @param {Object} appointment Selected appointment's data.\n     * @param {Object} provider Selected provider's data.\n     * @param {Object} customer Selected customer's data.\n     *\n     * @return {Boolean} Returns the operation result.\n     */\n    function applyAppointmentData(appointment, provider, customer) {\n        try {\n            // Select Service & Provider\n            $selectService.val(appointment.id_services).trigger('change');\n            $selectProvider.val(appointment.id_users_provider);\n\n            // Set Appointment Date\n            const startMoment = moment(appointment.start_datetime);\n            $selectDate[0]._flatpickr.setDate(startMoment.toDate());\n            App.Http.Booking.getAvailableHours(startMoment.format('YYYY-MM-DD'));\n\n            // Apply Customer's Data\n            $lastName.val(customer.last_name);\n            $firstName.val(customer.first_name);\n            $email.val(customer.email);\n            $phoneNumber.val(customer.phone_number);\n            $address.val(customer.address);\n            $city.val(customer.city);\n            $zipCode.val(customer.zip_code);\n            if (customer.timezone) {\n                $selectTimezone.val(customer.timezone);\n            }\n            const appointmentNotes = appointment.notes !== null ? appointment.notes : '';\n            $notes.val(appointmentNotes);\n\n            updateConfirmFrame();\n\n            return true;\n        } catch (exc) {\n            return false;\n        }\n    }\n\n    /**\n     * This method updates the HTML content with a brief description of the\n     * user selected service (only if available in db). This is useful for the\n     * customers upon selecting the correct service.\n     *\n     * @param {Number} serviceId The selected service record id.\n     */\n    function updateServiceDescription(serviceId) {\n        const $serviceDescription = $('#service-description');\n\n        $serviceDescription.empty();\n\n        const service = vars('available_services').find(\n            (availableService) => Number(availableService.id) === Number(serviceId)\n        );\n\n        if (!service) {\n            return;\n        }\n\n        $('<strong/>', {\n            'text': service.name\n        }).appendTo($serviceDescription);\n\n        if (service.description) {\n            $('<br/>').appendTo($serviceDescription);\n\n            $('<span/>', {\n                'html': App.Utils.String.escapeHtml(service.description).replaceAll('\\n', '<br/>')\n            }).appendTo($serviceDescription);\n        }\n\n        if (service.duration || Number(service.price) > 0 || service.location) {\n            $('<br/>').appendTo($serviceDescription);\n        }\n\n        if (service.duration) {\n            $('<span/>', {\n                'text': '[' + lang('duration') + ' ' + service.duration + ' ' + lang('minutes') + ']'\n            }).appendTo($serviceDescription);\n        }\n\n        if (Number(service.price) > 0) {\n            $('<span/>', {\n                'text': '[' + lang('price') + ' ' + service.price + ' ' + service.currency + ']'\n            }).appendTo($serviceDescription);\n        }\n\n        if (service.location) {\n            $('<span/>', {\n                'text': '[' + lang('location') + ' ' + service.location + ']'\n            }).appendTo($serviceDescription);\n        }\n    }\n\n    document.addEventListener('DOMContentLoaded', initialize);\n\n    return {\n        manageMode,\n        initialize,\n        updateConfirmFrame\n    };\n})();\n"], "fixing_code": ["<?php\n/**\n * Local variables.\n *\n * @var array $available_services\n */\n?>\n\n<div id=\"wizard-frame-1\" class=\"wizard-frame\" style=\"visibility: hidden;\">\n    <div class=\"frame-container\">\n        <h2 class=\"frame-title\"><?= lang('service_and_provider') ?></h2>\n\n        <div class=\"row frame-content\">\n            <div class=\"col\">\n                <div class=\"mb-3\">\n                    <label for=\"select-service\">\n                        <strong><?= lang('service') ?></strong>\n                    </label>\n\n                    <select id=\"select-service\" class=\"form-control\">\n                        <?php\n                        // Group services by category, only if there is at least one service with a parent category.\n                        $has_category = FALSE;\n                        foreach ($available_services as $service)\n                        {\n                            if ( ! empty($service['category_id']))\n                            {\n                                $has_category = TRUE;\n                                break;\n                            }\n                        }\n\n                        if ($has_category)\n                        {\n                            $grouped_services = [];\n\n                            foreach ($available_services as $service)\n                            {\n                                if ( ! empty($service['category_id']))\n                                {\n                                    if ( ! isset($grouped_services[$service['category_name']]))\n                                    {\n                                        $grouped_services[$service['category_name']] = [];\n                                    }\n\n                                    $grouped_services[$service['category_name']][] = $service;\n                                }\n                            }\n\n                            // We need the uncategorized services at the end of the list, so we will use another\n                            // iteration only for the uncategorized services.\n                            $grouped_services['uncategorized'] = [];\n                            foreach ($available_services as $service)\n                            {\n                                if ($service['category_id'] == NULL)\n                                {\n                                    $grouped_services['uncategorized'][] = $service;\n                                }\n                            }\n\n                            foreach ($grouped_services as $key => $group)\n                            {\n                                $group_label = $key !== 'uncategorized'\n                                    ? $group[0]['category_name']\n                                    : 'Uncategorized';\n\n                                if (count($group) > 0)\n                                {\n                                    echo '<optgroup label=\"' . e($group_label) . '\">';\n                                    foreach ($group as $service)\n                                    {\n                                        echo '<option value=\"' . $service['id'] . '\">'\n                                            . e($service['name']) . '</option>';\n                                    }\n                                    echo '</optgroup>';\n                                }\n                            }\n                        }\n                        else\n                        {\n                            foreach ($available_services as $service)\n                            {\n                                echo '<option value=\"' . $service['id'] . '\">' . e($service['name']) . '</option>';\n                            }\n                        }\n                        ?>\n                    </select>\n                </div>\n\n                <div class=\"mb-3\">\n                    <label for=\"select-provider\">\n                        <strong><?= lang('provider') ?></strong>\n                    </label>\n\n                    <select id=\"select-provider\" class=\"form-control\"></select>\n                </div>\n\n                <div id=\"service-description\"></div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"command-buttons\">\n        <span>&nbsp;</span>\n\n        <button type=\"button\" id=\"button-next-1\" class=\"btn button-next btn-dark\"\n                data-step_index=\"1\">\n            <?= lang('next') ?>\n            <i class=\"fas fa-chevron-right ms-2\"></i>\n        </button>\n    </div>\n</div>\n", "<?php\n/**\n * Local variables.\n * \n * @var string $cookie_notice_content\n */\n?>\n<div id=\"cookie-notice-modal\" class=\"modal fade\">\n    <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?= lang('cookie_notice') ?></h4>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n            </div>\n            <div class=\"modal-body\">\n                <p><?= e($cookie_notice_content) ?></p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                    <?= lang('close') ?>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n", "<?php\n/**\n * Local variables.\n * \n * @var string $privacy_policy_content\n */\n?>\n\n<div id=\"privacy-policy-modal\" class=\"modal fade\">\n    <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?= lang('privacy_policy') ?></h4>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"><span aria-hidden=\"true\"></span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <p><?= e($privacy_policy_content) ?></p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                    <?= lang('close') ?>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n", "<?php\n/**\n * Local variables.\n * \n * @var string $terms_and_conditions_content\n */\n?>\n\n<div id=\"terms-and-conditions-modal\" class=\"modal fade\">\n    <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?= lang('terms_and_conditions') ?></h4>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n            </div>\n            <div class=\"modal-body\">\n                <p><?= e($terms_and_conditions_content) ?></p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                    <?= lang('close') ?>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n", "/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.5.0\n * ---------------------------------------------------------------------------- */\n\n/**\n * Booking page.\n *\n * This module implements the functionality of the booking page\n *\n * Old Name: FrontendBook\n */\nApp.Pages.Booking = (function () {\n    const $cookieNoticeLink = $('.cc-link');\n    const $selectDate = $('#select-date');\n    const $selectService = $('#select-service');\n    const $selectProvider = $('#select-provider');\n    const $selectTimezone = $('#select-timezone');\n    const $firstName = $('#first-name');\n    const $lastName = $('#last-name');\n    const $email = $('#email');\n    const $phoneNumber = $('#phone-number');\n    const $address = $('#address');\n    const $city = $('#city');\n    const $zipCode = $('#zip-code');\n    const $notes = $('#notes');\n    const $captchaTitle = $('.captcha-title');\n    const $availableHours = $('#available-hours');\n    const $bookAppointmentSubmit = $('#book-appointment-submit');\n    const $deletePersonalInformation = $('#delete-personal-information');\n    const tippy = window.tippy;\n    const moment = window.moment;\n\n    /**\n     * Determines the functionality of the page.\n     *\n     * @type {Boolean}\n     */\n    let manageMode = vars('manage_mode') || false;\n\n    /**\n     * Initialize the module.\n     */\n    function initialize() {\n        if (Boolean(Number(vars('display_cookie_notice')))) {\n            cookieconsent.initialise({\n                palette: {\n                    popup: {\n                        background: '#ffffffbd',\n                        text: '#666666'\n                    },\n                    button: {\n                        background: '#429a82',\n                        text: '#ffffff'\n                    }\n                },\n                content: {\n                    message: lang('website_using_cookies_to_ensure_best_experience'),\n                    dismiss: 'OK'\n                }\n            });\n\n            $cookieNoticeLink.replaceWith(\n                $('<a/>', {\n                    'data-toggle': 'modal',\n                    'data-target': '#cookie-notice-modal',\n                    'href': '#',\n                    'class': 'cc-link',\n                    'text': $cookieNoticeLink.text()\n                })\n            );\n        }\n\n        manageMode = vars('manage_mode');\n\n        // Initialize page's components (tooltips, date pickers etc).\n        tippy('[data-tippy-content]');\n\n        App.Utils.UI.initializeDatepicker($selectDate, {\n            inline: true,\n            minDate: new Date(),\n            maxDate: moment().add(vars('future_booking_limit'), 'days').toDate(),\n            onChange: (selectedDates) => {\n                App.Http.Booking.getAvailableHours(moment(selectedDates[0]).format('YYYY-MM-DD'));\n                updateConfirmFrame();\n            },\n\n            onMonthChange: (selectedDates, dateStr, instance) => {\n                setTimeout(() => {\n                    const displayedMonthMoment = moment(instance.currentYearElement.value + '-' + (Number(instance.monthsDropdownContainer.value) + 1) + '-01');\n\n                    App.Http.Booking.getUnavailableDates(\n                        $selectProvider.val(),\n                        $selectService.val(),\n                        displayedMonthMoment.format('YYYY-MM-DD')\n                    );\n                }, 500);\n            },\n\n            onYearChange: (selectedDates, dateStr, instance) => {\n                setTimeout(() => {\n                    const displayedMonthMoment = moment(instance.currentYearElement.value + '-' + (Number(instance.monthsDropdownContainer.value) + 1) + '-01');\n\n                    App.Http.Booking.getUnavailableDates(\n                        $selectProvider.val(),\n                        $selectService.val(),\n                        displayedMonthMoment.format('YYYY-MM-DD')\n                    );\n                }, 500);\n            },\n        });\n\n        const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        const isTimezoneSupported = $selectTimezone.find(`option[value=\"${browserTimezone}\"]`).length > 0;\n        $selectTimezone.val(isTimezoneSupported ? browserTimezone : 'UTC');\n\n        // Bind the event handlers (might not be necessary every time we use this class).\n        addEventListeners();\n\n        optimizeContactInfoDisplay();\n\n        // If the manage mode is true, the appointment data should be loaded by default.\n        if (manageMode) {\n            applyAppointmentData(vars('appointment_data'), vars('provider_data'), vars('customer_data'));\n            $('#wizard-frame-1').css({\n                'visibility': 'visible',\n                'display': 'none'\n            }).fadeIn();\n        } else {\n            // Check if a specific service was selected (via URL parameter).\n            const selectedServiceId = App.Utils.Url.queryParam('service');\n\n            if (selectedServiceId && $selectService.find('option[value=\"' + selectedServiceId + '\"]').length > 0) {\n                $selectService.val(selectedServiceId);\n            }\n\n            $selectService.trigger('change'); // Load the available hours.\n\n            // Check if a specific provider was selected.\n            const selectedProviderId = App.Utils.Url.queryParam('provider');\n\n            if (selectedProviderId && $selectProvider.find('option[value=\"' + selectedProviderId + '\"]').length === 0) {\n                // Select a service of this provider in order to make the provider available in the select box.\n                for (const index in vars('available_providers')) {\n                    const provider = vars('available_providers')[index];\n\n                    if (provider.id === selectedProviderId && provider.services.length > 0) {\n                        $selectService.val(provider.services[0]).trigger('change');\n                    }\n                }\n            }\n\n            if (selectedProviderId && $selectProvider.find('option[value=\"' + selectedProviderId + '\"]').length > 0) {\n                $selectProvider.val(selectedProviderId).trigger('change');\n            }\n\n            if (\n                (selectedServiceId && selectedProviderId) ||\n                (vars('available_services').length === 1 && vars('available_providers').length === 1)\n            ) {\n                $('.active-step').removeClass('active-step');\n                $('#step-2').addClass('active-step');\n                $('#wizard-frame-1').hide();\n                $('#wizard-frame-2').fadeIn();\n\n                $selectService.closest('.wizard-frame').find('.button-next').trigger('click');\n\n                $(document).find('.book-step:first').hide();\n\n                $(document).find('.button-back:first').css('visibility', 'hidden');\n\n                $(document)\n                    .find('.book-step:not(:first)')\n                    .each((index, bookStepEl) =>\n                        $(bookStepEl)\n                            .find('strong')\n                            .text(index + 1)\n                    );\n            } else {\n                $('#wizard-frame-1').css({\n                    'visibility': 'visible',\n                    'display': 'none'\n                }).fadeIn();\n            }\n\n            prefillFromQueryParam('#first-name', 'first_name');\n            prefillFromQueryParam('#last-name', 'last_name');\n            prefillFromQueryParam('#email', 'email');\n            prefillFromQueryParam('#phone-number', 'phone');\n            prefillFromQueryParam('#address', 'address');\n            prefillFromQueryParam('#city', 'city');\n            prefillFromQueryParam('#zip-code', 'zip');\n        }\n    }\n\n    function prefillFromQueryParam(field, param) {\n        const $target = $(field);\n\n        if (!$target.length) {\n            return;\n        }\n\n        $target.val(App.Utils.Url.queryParam(param));\n    }\n\n    /**\n     * Remove empty columns and center elements if needed.\n     */\n    function optimizeContactInfoDisplay() {\n        const $fieldCols = $(document).find('#wizard-frame-3 .field-col');\n\n        $fieldCols.each((index, fieldColEl) => {\n            const $fieldCol = $(fieldColEl);\n\n            if (!$fieldCol.find('.form-control').length) {\n                $fieldCol.hide();\n            }\n        });\n    }\n\n    /**\n     * Add the page event listeners.\n     */\n    function addEventListeners() {\n        /**\n         * Event: Timezone \"Changed\"\n         */\n        $selectTimezone.on('change', () => {\n            const date = $selectDate[0]._flatpickr.selectedDates[0];\n\n            if (!date) {\n                return;\n            }\n\n            App.Http.Booking.getAvailableHours(moment(date).format('YYYY-MM-DD'));\n\n            updateConfirmFrame();\n        });\n\n        /**\n         * Event: Selected Provider \"Changed\"\n         *\n         * Whenever the provider changes the available appointment date - time periods must be updated.\n         */\n        $selectProvider.on('change', (event) => {\n            const $target = $(event.target);\n\n            App.Http.Booking.getUnavailableDates(\n                $target.val(),\n                $selectService.val(),\n                moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD')\n            );\n            updateConfirmFrame();\n        });\n\n        /**\n         * Event: Selected Service \"Changed\"\n         *\n         * When the user clicks on a service, its available providers should\n         * become visible.\n         */\n        $selectService.on('change', (event) => {\n            const $target = $(event.target);\n            const serviceId = $selectService.val();\n\n            $selectProvider.empty();\n\n            vars('available_providers').forEach((provider) => {\n                // If the current provider is able to provide the selected service, add him to the list box.\n                const canServeService =\n                    provider.services.filter((providerServiceId) => Number(providerServiceId) === Number(serviceId))\n                        .length > 0;\n\n                if (canServeService) {\n                    $selectProvider.append(new Option(provider.first_name + ' ' + provider.last_name, provider.id));\n                }\n            });\n\n            // Add the \"Any Provider\" entry.\n            if ($selectProvider.find('option').length >= 1 && vars('display_any_provider') === '1') {\n                $selectProvider.prepend(new Option(lang('any_provider'), 'any-provider', true, true));\n            }\n\n            App.Http.Booking.getUnavailableDates(\n                $selectProvider.val(),\n                $target.val(),\n                moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD')\n            );\n\n            updateConfirmFrame();\n\n            updateServiceDescription(serviceId);\n        });\n\n        /**\n         * Event: Next Step Button \"Clicked\"\n         *\n         * This handler is triggered every time the user pressed the \"next\" button on the book wizard.\n         * Some special tasks might be performed, depending on the current wizard step.\n         */\n        $('.button-next').on('click', (event) => {\n            const $target = $(event.currentTarget);\n\n            // If we are on the first step and there is no provider selected do not continue with the next step.\n            if ($target.attr('data-step_index') === '1' && !$selectProvider.val()) {\n                return;\n            }\n\n            // If we are on the 2nd tab then the user should have an appointment hour selected.\n            if ($target.attr('data-step_index') === '2') {\n                if (!$('.selected-hour').length) {\n                    if (!$('#select-hour-prompt').length) {\n                        $('<div/>', {\n                            'id': 'select-hour-prompt',\n                            'class': 'text-danger mb-4',\n                            'text': lang('appointment_hour_missing')\n                        }).prependTo('#available-hours');\n                    }\n                    return;\n                }\n            }\n\n            // If we are on the 3rd tab then we will need to validate the user's input before proceeding to the next\n            // step.\n            if ($target.attr('data-step_index') === '3') {\n                if (!validateCustomerForm()) {\n                    return; // Validation failed, do not continue.\n                } else {\n                    updateConfirmFrame();\n                }\n            }\n\n            // Display the next step tab (uses jquery animation effect).\n            const nextTabIndex = parseInt($target.attr('data-step_index')) + 1;\n\n            $target\n                .parents()\n                .eq(1)\n                .fadeOut(() => {\n                    $('.active-step').removeClass('active-step');\n                    $('#step-' + nextTabIndex).addClass('active-step');\n                    $('#wizard-frame-' + nextTabIndex).fadeIn();\n                });\n        });\n\n        /**\n         * Event: Back Step Button \"Clicked\"\n         *\n         * This handler is triggered every time the user pressed the \"back\" button on the\n         * book wizard.\n         */\n        $('.button-back').on('click', (event) => {\n            const prevTabIndex = parseInt($(event.currentTarget).attr('data-step_index')) - 1;\n\n            $(event.currentTarget)\n                .parents()\n                .eq(1)\n                .fadeOut(() => {\n                    $('.active-step').removeClass('active-step');\n                    $('#step-' + prevTabIndex).addClass('active-step');\n                    $('#wizard-frame-' + prevTabIndex).fadeIn();\n                });\n        });\n\n        /**\n         * Event: Available Hour \"Click\"\n         *\n         * Triggered whenever the user clicks on an available hour for his appointment.\n         */\n        $availableHours.on('click', '.available-hour', (event) => {\n            $availableHours.find('.selected-hour').removeClass('selected-hour');\n            $(event.target).addClass('selected-hour');\n            updateConfirmFrame();\n        });\n\n        if (manageMode) {\n            /**\n             * Event: Cancel Appointment Button \"Click\"\n             *\n             * When the user clicks the \"Cancel\" button this form is going to be submitted. We need\n             * the user to confirm this action because once the appointment is cancelled, it will be\n             * deleted from the database.\n             *\n             * @param {jQuery.Event} event\n             */\n            $('#cancel-appointment').on('click', () => {\n                const $cancelAppointmentForm = $('#cancel-appointment-form');\n\n                let $cancellationReason;\n\n                const buttons = [\n                    {\n                        text: lang('close'),\n                        click: (event, messageModal) => {\n                            messageModal.dispose();\n                        }\n                    },\n                    {\n                        text: lang('confirm'),\n                        click: () => {\n                            if ($cancellationReason.val() === '') {\n                                $cancellationReason.css('border', '2px solid #DC3545');\n                                return;\n                            }\n                            $cancelAppointmentForm.find('#hidden-cancellation-reason').val($cancellationReason.val());\n                            $cancelAppointmentForm.submit();\n                        }\n                    }\n                ];\n\n                App.Utils.Message.show(\n                    lang('cancel_appointment_title'),\n                    lang('write_appointment_removal_reason'),\n                    buttons\n                );\n\n                $cancellationReason = $('<textarea/>', {\n                    'class': 'form-control',\n                    'id': 'cancellation-reason',\n                    'rows': '3',\n                    'css': {\n                        'width': '100%'\n                    }\n                }).appendTo('#message-modal .modal-body');\n\n                return false;\n            });\n\n            $deletePersonalInformation.on('click', () => {\n                const buttons = [\n                    {\n                        text: lang('cancel'),\n                        click: (event, messageModal) => {\n                            messageModal.dispose();\n                        }\n                    },\n                    {\n                        text: lang('delete'),\n                        click: () => {\n                            App.Http.Booking.deletePersonalInformation(vars('customer_token'));\n                        }\n                    }\n                ];\n\n                App.Utils.Message.show(\n                    lang('delete_personal_information'),\n                    lang('delete_personal_information_prompt'),\n                    buttons\n                );\n            });\n        }\n\n        /**\n         * Event: Book Appointment Form \"Submit\"\n         *\n         * Before the form is submitted to the server we need to make sure that in the meantime the selected appointment\n         * date/time wasn't reserved by another customer or event.\n         *\n         * @param {jQuery.Event} event\n         */\n        $bookAppointmentSubmit.on('click', () => {\n            const $acceptToTermsAndConditions = $('#accept-to-terms-and-conditions');\n\n            $acceptToTermsAndConditions.removeClass('is-invalid');\n\n            if ($acceptToTermsAndConditions.length && !$acceptToTermsAndConditions.prop('checked')) {\n                $acceptToTermsAndConditions.addClass('is-invalid');\n                return;\n            }\n\n            const $acceptToPrivacyPolicy = $('#accept-to-privacy-policy');\n\n            $acceptToPrivacyPolicy.removeClass('is-invalid');\n\n            if ($acceptToPrivacyPolicy.length && !$acceptToPrivacyPolicy.prop('checked')) {\n                $acceptToPrivacyPolicy.addClass('is-invalid');\n                return;\n            }\n\n            App.Http.Booking.registerAppointment();\n        });\n\n        /**\n         * Event: Refresh captcha image.\n         */\n        $captchaTitle.on('click', 'button', () => {\n            $('.captcha-image').attr('src', App.Utils.Url.siteUrl('captcha?' + Date.now()));\n        });\n\n        $selectDate.on('mousedown', '.ui-datepicker-calendar td', () => {\n            setTimeout(() => {\n                App.Http.Booking.applyPreviousUnavailableDates();\n            }, 300);\n        });\n    }\n\n    /**\n     * This function validates the customer's data input. The user cannot continue without passing all the validation\n     * checks.\n     *\n     * @return {Boolean} Returns the validation result.\n     */\n    function validateCustomerForm() {\n        $('#wizard-frame-3 .is-invalid').removeClass('is-invalid');\n        $('#wizard-frame-3 label.text-danger').removeClass('text-danger');\n\n        // Validate required fields.\n        let missingRequiredField = false;\n\n        $('.required').each((index, requiredField) => {\n            if (!$(requiredField).val()) {\n                $(requiredField).addClass('is-invalid');\n                missingRequiredField = true;\n            }\n        });\n\n        if (missingRequiredField) {\n            $('#form-message').text(lang('fields_are_required'));\n            return false;\n        }\n\n        // Validate email address.\n        if ($email.val() && !App.Utils.Validation.email($email.val())) {\n            $email.addClass('is-invalid');\n            $('#form-message').text(lang('invalid_email'));\n            return false;\n        }\n\n        // Validate phone number.\n        const phoneNumber = $phoneNumber.val();\n\n        if (phoneNumber && !App.Utils.Validation.phone(phoneNumber)) {\n            $phoneNumber.addClass('is-invalid');\n            $('#form-message').text(lang('invalid_phone'));\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Every time this function is executed, it updates the confirmation page with the latest\n     * customer settings and input for the appointment booking.\n     */\n    function updateConfirmFrame() {\n        if ($availableHours.find('.selected-hour').text() === '') {\n            return;\n        }\n\n        // Appointment Details\n        let selectedDate = $selectDate[0]._flatpickr.selectedDates[0];\n\n        if (selectedDate !== null) {\n            selectedDate = App.Utils.Date.format(selectedDate, vars('date_format'), vars('time_format'));\n        }\n\n        const serviceId = $selectService.val();\n        let servicePrice = '';\n        let serviceCurrency = '';\n\n        vars('available_services').forEach((service) => {\n            if (Number(service.id) === Number(serviceId) && Number(service.price) > 0) {\n                servicePrice = service.price;\n                serviceCurrency = service.currency;\n                return false; // Break loop\n            }\n        });\n\n        $(document)\n            .find('.display-selected-service')\n            .text($selectService.find('option:selected').text())\n            .removeClass('invisible');\n\n        $(document)\n            .find('.display-selected-provider')\n            .text($selectProvider.find('option:selected').text())\n            .removeClass('invisible');\n\n        $('#appointment-details').empty();\n\n        $('<div/>', {\n            'html': [\n                $('<h4/>', {\n                    'text': lang('appointment')\n                }),\n                $('<p/>', {\n                    'html': [\n                        $('<span/>', {\n                            'text': lang('service') + ': ' + $selectService.find('option:selected').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('provider') + ': ' + $selectProvider.find('option:selected').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text':\n                                lang('start') +\n                                ': ' +\n                                selectedDate +\n                                ' ' +\n                                $availableHours.find('.selected-hour').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('timezone') + ': ' + $selectTimezone.find('option:selected').text()\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('price') + ': ' + servicePrice + ' ' + serviceCurrency,\n                            'prop': {\n                                'hidden': !servicePrice\n                            }\n                        })\n                    ]\n                })\n            ]\n        }).appendTo('#appointment-details');\n\n        // Customer Details\n        const firstName = App.Utils.String.escapeHtml($firstName.val());\n        const lastName = App.Utils.String.escapeHtml($lastName.val());\n        const phoneNumber = App.Utils.String.escapeHtml($phoneNumber.val());\n        const email = App.Utils.String.escapeHtml($email.val());\n        const address = App.Utils.String.escapeHtml($address.val());\n        const city = App.Utils.String.escapeHtml($city.val());\n        const zipCode = App.Utils.String.escapeHtml($zipCode.val());\n\n        $('#customer-details').empty();\n\n        $('<div/>', {\n            'html': [\n                $('<h4/>)', {\n                    'text': lang('customer')\n                }),\n                $('<p/>', {\n                    'html': [\n                        $('<span/>', {\n                            'text': lang('customer') + ': ' + firstName + ' ' + lastName\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('phone_number') + ': ' + phoneNumber\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': lang('email') + ': ' + email\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': address ? lang('address') + ': ' + address : ''\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': city ? lang('city') + ': ' + city : ''\n                        }),\n                        $('<br/>'),\n                        $('<span/>', {\n                            'text': zipCode ? lang('zip_code') + ': ' + zipCode : ''\n                        }),\n                        $('<br/>')\n                    ]\n                })\n            ]\n        }).appendTo('#customer-details');\n\n        // Update appointment form data for submission to server when the user confirms the appointment.\n        const data = {};\n\n        data.customer = {\n            last_name: $lastName.val(),\n            first_name: $firstName.val(),\n            email: $email.val(),\n            phone_number: $phoneNumber.val(),\n            address: $address.val(),\n            city: $city.val(),\n            zip_code: $zipCode.val(),\n            timezone: $selectTimezone.val()\n        };\n\n        data.appointment = {\n            start_datetime:\n                moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD') +\n                ' ' +\n                moment($('.selected-hour').data('value'), 'HH:mm').format('HH:mm') +\n                ':00',\n            end_datetime: calculateEndDatetime(),\n            notes: $notes.val(),\n            is_unavailability: false,\n            id_users_provider: $selectProvider.val(),\n            id_services: $selectService.val()\n        };\n\n        data.manage_mode = Number(manageMode);\n\n        if (manageMode) {\n            data.appointment.id = vars('appointment_data').id;\n            data.customer.id = vars('customer_data').id;\n        }\n        $('input[name=\"post_data\"]').val(JSON.stringify(data));\n    }\n\n    /**\n     * This method calculates the end datetime of the current appointment.\n     *\n     * End datetime is depending on the service and start datetime fields.\n     *\n     * @return {String} Returns the end datetime in string format.\n     */\n    function calculateEndDatetime() {\n        // Find selected service duration.\n        const serviceId = $selectService.val();\n\n        const service = vars('available_services').find(\n            (availableService) => Number(availableService.id) === Number(serviceId)\n        );\n\n        // Add the duration to the start datetime.\n        const selectedDate = moment($selectDate[0]._flatpickr.selectedDates[0]).format('YYYY-MM-DD');\n\n        const selectedHour = $('.selected-hour').data('value'); // HH:mm\n\n        const startMoment = moment(selectedDate + ' ' + selectedHour);\n\n        let endMoment;\n\n        if (service.duration && startMoment) {\n            endMoment = startMoment.clone().add({'minutes': parseInt(service.duration)});\n        } else {\n            endMoment = moment();\n        }\n\n        return endMoment.format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    /**\n     * This method applies the appointment's data to the wizard so\n     * that the user can start making changes on an existing record.\n     *\n     * @param {Object} appointment Selected appointment's data.\n     * @param {Object} provider Selected provider's data.\n     * @param {Object} customer Selected customer's data.\n     *\n     * @return {Boolean} Returns the operation result.\n     */\n    function applyAppointmentData(appointment, provider, customer) {\n        try {\n            // Select Service & Provider\n            $selectService.val(appointment.id_services).trigger('change');\n            $selectProvider.val(appointment.id_users_provider);\n\n            // Set Appointment Date\n            const startMoment = moment(appointment.start_datetime);\n            $selectDate[0]._flatpickr.setDate(startMoment.toDate());\n            App.Http.Booking.getAvailableHours(startMoment.format('YYYY-MM-DD'));\n\n            // Apply Customer's Data\n            $lastName.val(customer.last_name);\n            $firstName.val(customer.first_name);\n            $email.val(customer.email);\n            $phoneNumber.val(customer.phone_number);\n            $address.val(customer.address);\n            $city.val(customer.city);\n            $zipCode.val(customer.zip_code);\n            if (customer.timezone) {\n                $selectTimezone.val(customer.timezone);\n            }\n            const appointmentNotes = appointment.notes !== null ? appointment.notes : '';\n            $notes.val(appointmentNotes);\n\n            updateConfirmFrame();\n\n            return true;\n        } catch (exc) {\n            return false;\n        }\n    }\n\n    /**\n     * This method updates the HTML content with a brief description of the\n     * user selected service (only if available in db). This is useful for the\n     * customers upon selecting the correct service.\n     *\n     * @param {Number} serviceId The selected service record id.\n     */\n    function updateServiceDescription(serviceId) {\n        const $serviceDescription = $('#service-description');\n\n        $serviceDescription.empty();\n\n        const service = vars('available_services').find(\n            (availableService) => Number(availableService.id) === Number(serviceId)\n        );\n\n        if (!service) {\n            return;\n        }\n\n        $('<strong/>', {\n            'text': App.Utils.String.escapeHtml(service.name),\n        }).appendTo($serviceDescription);\n\n        if (service.description) {\n            $('<br/>').appendTo($serviceDescription);\n\n            $('<span/>', {\n                'html': App.Utils.String.escapeHtml(service.description).replaceAll('\\n', '<br/>')\n            }).appendTo($serviceDescription);\n        }\n\n        if (service.duration || Number(service.price) > 0 || service.location) {\n            $('<br/>').appendTo($serviceDescription);\n        }\n\n        if (service.duration) {\n            $('<span/>', {\n                'text': '[' + lang('duration') + ' ' + service.duration + ' ' + lang('minutes') + ']'\n            }).appendTo($serviceDescription);\n        }\n\n        if (Number(service.price) > 0) {\n            $('<span/>', {\n                'text': '[' + lang('price') + ' ' + service.price + ' ' + service.currency + ']'\n            }).appendTo($serviceDescription);\n        }\n\n        if (service.location) {\n            $('<span/>', {\n                'text': '[' + lang('location') + ' ' + service.location + ']'\n            }).appendTo($serviceDescription);\n        }\n    }\n\n    document.addEventListener('DOMContentLoaded', initialize);\n\n    return {\n        manageMode,\n        initialize,\n        updateConfirmFrame\n    };\n})();\n"], "filenames": ["application/views/components/booking_type_step.php", "application/views/components/cookie_notice_modal.php", "application/views/components/privacy_policy_modal.php", "application/views/components/terms_and_conditions_modal.php", "assets/js/pages/booking.js"], "buggy_code_start_loc": [4, 16, 18, 17, 806], "buggy_code_end_loc": [84, 17, 19, 18, 807], "fixing_code_start_loc": [4, 16, 18, 17, 806], "fixing_code_end_loc": [84, 17, 19, 18, 807], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository alextselegidis/easyappointments prior to 1.5.0.", "other": {"cve": {"id": "CVE-2023-2103", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-15T14:15:07.587", "lastModified": "2023-04-21T01:30:31.803", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository alextselegidis/easyappointments prior to 1.5.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:easyappointments:easyappointments:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.0", "matchCriteriaId": "063BC3E9-AA71-49D6-9CEE-F2E7E7B9D687"}]}]}], "references": [{"url": "https://github.com/alextselegidis/easyappointments/commit/46a865300e94c7031cc0e315d95d3e3e56768498", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/1df09505-9923-43b9-82ef-15d94bc3f9dc", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/alextselegidis/easyappointments/commit/46a865300e94c7031cc0e315d95d3e3e56768498"}}