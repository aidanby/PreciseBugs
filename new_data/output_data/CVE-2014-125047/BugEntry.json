{"buggy_code": ["package com.bezman.background;\n\nimport com.bezman.servlet.IndexServlet;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\n\n/**\n * Created by Terence on 11/10/2014.\n */\npublic class DailySubmission {\n\n    public double startOnes = 0;\n    public double startFives = 0;\n    public double startTens = 0;\n    public double startTwenties = 0;\n    public double startPennies = 0;\n    public double startNickels = 0;\n    public double startDimes = 0;\n    public double startQuarters = 0;\n\n    public double endOnes = 0;\n    public double endFives = 0;\n    public double endTens = 0;\n    public double endTwenties = 0;\n    public double endPennies = 0;\n    public double endNickels = 0;\n    public double endDimes = 0;\n    public double endQuarters = 0;\n\n    public double startSum = 0;\n    public double endSum = 0;\n\n    public double startChecks = 0;\n    public double endChecks = 0;\n\n    public String[] names;\n    public int period;\n\n    public Timestamp date;\n\n    public ArrayList<Sale> sales = new ArrayList<>();\n\n    public DailySubmission(double startOnes, double startFives, double startTens, double startTwenties, double startPennies, double startNickels, double startDimes, double startQuarters, double endOnes, double endFives, double endTens, double endTwenties, double endPennies, double endNickels, double endDimes, double endQuarters, double startSum, double endSum, String names, int period, String sales, Timestamp date, double startChecks, double endChecks) {\n        this.startOnes = startOnes;\n        this.startFives = startFives;\n        this.startTens = startTens;\n        this.startTwenties = startTwenties;\n        this.startPennies = startPennies;\n        this.startNickels = startNickels;\n        this.startDimes = startDimes;\n        this.startQuarters = startQuarters;\n        this.endOnes = endOnes;\n        this.endFives = endFives;\n        this.endTens = endTens;\n        this.endTwenties = endTwenties;\n        this.endPennies = endPennies;\n        this.endNickels = endNickels;\n        this.endDimes = endDimes;\n        this.endQuarters = endQuarters;\n        this.startSum = startSum;\n        this.endSum = endSum;\n        this.names = names.split(\",\");\n        this.period = period;\n        this.date = date;\n\n        this.startChecks = startChecks;\n        this.endChecks = endChecks;\n\n        String[] salesArray = sales.split(\",\");\n\n        for(String sale : salesArray){\n            if(sale.split(\";\").length == 3) {\n                String nameOfItem = sale.split(\";\")[0];\n                int numOfItems = Integer.parseInt(sale.split(\";\")[1]);\n                double price = Double.parseDouble(sale.split(\";\")[2]);\n\n                this.sales.add(new Sale(nameOfItem, numOfItems, price));\n            }\n        }\n    }\n\n    public static DailySubmission submissionFromRow(ResultSet resultSet) throws SQLException {\n        double startOnes = resultSet.getDouble(\"startOnes\");\n        double startFives = resultSet.getDouble(\"startFives\");\n        double startTens = resultSet.getDouble(\"startTens\");\n        double startTwenties = resultSet.getDouble(\"startTwenties\");\n        double startPennies = resultSet.getDouble(\"startPennies\");\n        double startNickels = resultSet.getDouble(\"startNickels\");\n        double startDimes = resultSet.getDouble(\"startDimes\");\n        double startQuarters = resultSet.getDouble(\"startQuarters\");\n\n        double endOnes = resultSet.getDouble(\"endOnes\");\n        double endFives = resultSet.getDouble(\"endFives\");\n        double endTens = resultSet.getDouble(\"endTens\");\n        double endTwenties = resultSet.getDouble(\"endTwenties\");\n        double endPennies = resultSet.getDouble(\"endPennies\");\n        double endNickels = resultSet.getDouble(\"endNickels\");\n        double endDimes = resultSet.getDouble(\"endDimes\");\n        double endQuarters = resultSet.getDouble(\"endQuarters\");\n\n        double startSum = resultSet.getDouble(\"startSum\");\n        double endSum = resultSet.getDouble(\"endSum\");\n\n        double startChecks = resultSet.getDouble(\"startChecks\");\n        double endChecks = resultSet.getDouble(\"endChecks\");\n\n        int period = resultSet.getInt(\"period\");\n        String names = resultSet.getString(\"names\");\n\n        Timestamp date = resultSet.getTimestamp(\"date\");\n\n        String sales = \"\";\n\n        ResultSet salesSet = IndexServlet.execQuery(\"select * from sales where date='\" + date + \"'\");\n        while(salesSet.next()){\n            sales += salesSet.getString(\"sale\") + \",\";\n        }\n\n        return new DailySubmission(startOnes, startFives, startTens, startTwenties, startPennies, startNickels, startDimes, startQuarters, endOnes, endFives, endTens, endTwenties, endPennies, endNickels, endDimes, endQuarters, startSum, endSum, names, period, sales, date, startChecks, endChecks);\n    }\n\n    public JSONObject toJson(){\n        JSONObject jsonObject = new JSONObject();\n\n        jsonObject.put(\"startOnes\", startOnes);\n        jsonObject.put(\"startFives\", startFives);\n        jsonObject.put(\"startTens\", startTens);\n        jsonObject.put(\"startTwenties\", startTwenties);\n        jsonObject.put(\"startPennies\", startPennies);\n        jsonObject.put(\"startNickels\", startNickels);\n        jsonObject.put(\"startDimes\", startDimes);\n        jsonObject.put(\"startQuarters\", startQuarters);\n\n        jsonObject.put(\"endOnes\", endOnes);\n        jsonObject.put(\"endFives\", endFives);\n        jsonObject.put(\"endTens\", endTens);\n        jsonObject.put(\"endTwenties\", endTwenties);\n        jsonObject.put(\"endPennies\", endPennies);\n        jsonObject.put(\"endNickels\", endNickels);\n        jsonObject.put(\"endDimes\", endDimes);\n        jsonObject.put(\"endQuarters\", endQuarters);\n\n        jsonObject.put(\"startSum\", startSum);\n        jsonObject.put(\"endSum\", endSum);\n\n        jsonObject.put(\"startChecks\", startChecks);\n        jsonObject.put(\"endChecks\", endChecks);\n\n        jsonObject.put(\"period\", period);\n\n        jsonObject.put(\"date\", date.toString());\n\n        JSONArray sales = new JSONArray();\n        for(Sale sale : this.sales){\n            JSONObject saleJSON = new JSONObject();\n\n            saleJSON.put(\"itemName\", sale.item);\n            saleJSON.put(\"numOfItems\", sale.numOfItems);\n            saleJSON.put(\"priceOfItem\", sale.price);\n\n            sales.add(saleJSON);\n        }\n\n        jsonObject.put(\"sales\", sales);\n\n        JSONArray names = new JSONArray();\n        for(String name : this.names){\n            JSONObject nameObject = new JSONObject();\n\n            nameObject.put(\"name\", name);\n\n            names.add(nameObject);\n        }\n\n        jsonObject.put(\"names\", names);\n\n        return  jsonObject;\n    }\n}\n", "package com.bezman.servlet;\n\nimport org.json.simple.JSONArray;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.List;\n\n/**\n * Created by Terence on 11/11/2014.\n */\n@Controller\n@RequestMapping\npublic class Attendance {\n\n    @RequestMapping(value = \"/attendancejson\", method = {RequestMethod.GET})\n    @ResponseBody\n    public String getAttendanceJSON(Model model, HttpServletRequest request, @RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam(value = \"year\", required = false) String year){\n\n        List<String> list = new ArrayList<>();\n\n        Calendar calendar = Calendar.getInstance();\n\n        if(month == null)\n            month = String.valueOf(calendar.get(Calendar.MONTH) + 1);\n\n        if(day == null)\n            day = String.valueOf(calendar.get(Calendar.DAY_OF_MONTH));\n\n        if (year == null)\n            year = String.valueOf(calendar.get(Calendar.YEAR));\n\n        JSONArray jsonArray = new JSONArray();\n\n        System.out.println(month + \"/ \" + day + \"/ \" + year);\n\n        try {\n            ResultSet resultSet = IndexServlet.execQuery(\"select * from daily where MONTH(date)='\" + month + \"' and DAY(date)='\" + day + \"' and YEAR(date)='\" + year + \"' order by period\");\n\n            while(resultSet.next()){\n                jsonArray.add(resultSet.getString(\"names\") + \";\" + resultSet.getString(\"period\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return jsonArray.toJSONString();\n    }\n\n\n    @RequestMapping(value = \"/attendance\", method = {RequestMethod.GET})\n    public String getAttendance(Model model, HttpServletRequest request, @RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam(value = \"year\", required = false) String year) {\n\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                System.out.println(\"Username : \" + username);\n                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        model.addAttribute(\"namesJSON\", getAttendanceJSON(model, request, month, day, year));\n\n        return \"attendance\";\n    }\n\n\n}\n", "package com.bezman.servlet;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Comparator;\n\n/**\n * Created by Terence on 11/9/2014.\n */\n@Controller\n@RequestMapping\npublic class DailyServlet {\n\n    @RequestMapping(value = \"/daily\", method = RequestMethod.GET)\n    public String getDaily(Model model, HttpServletRequest request){\n\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                System.out.println(\"Username : \" + username);\n                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n\n                ResultSet itemSet = IndexServlet.execQuery(\"select * from items\");\n                JSONArray jsonArray = new JSONArray();\n\n                while(itemSet.next()){\n                    JSONObject jsonObject = new JSONObject();\n\n                    jsonObject.put(\"itemName\", itemSet.getString(\"name\"));\n                    jsonObject.put(\"priceOfItem\", itemSet.getDouble(\"price\"));\n\n                    jsonArray.add(jsonObject);\n                }\n\n                model.addAttribute(\"itemNames\", StringEscapeUtils.escapeJavaScript(jsonArray.toJSONString()));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return \"daily\";\n    }\n\n    @RequestMapping(value = \"/getstudents\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String getStudents(Model model, @RequestParam(value = \"period\", required = false) String period){\n\n        JSONArray jsonArray = new JSONArray();\n\n        try {\n            String query = period == null ? \"select * from students\" : \"select * from students where period='\" + period + \"' ORDER BY period ASC\";\n            ResultSet resultSet = IndexServlet.execQuery(query);\n\n            while(resultSet.next()){\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"name\", resultSet.getString(\"name\"));\n                jsonObject.put(\"period\", resultSet.getString(\"period\"));\n\n                jsonArray.add(jsonObject);\n            }\n\n            jsonArray.sort(new Comparator() {\n                @Override\n                public int compare(Object o1, Object o2) {\n                    JSONObject jsonObject1 = (JSONObject) o1;\n                    JSONObject jsonObject2 = (JSONObject) o2;\n\n                    return String.valueOf(jsonObject1.get(\"period\")).compareTo(String.valueOf(jsonObject2.get(\"period\")));\n                }\n            });\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return  jsonArray.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport com.bezman.reference.Reference;\nimport com.bezman.json.JSON;\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.*;\n\n/**\n * Created by Terence on 11/8/2014.\n */\n@Controller\n@RequestMapping\npublic class IndexServlet {\n\n    public static Statement statement;\n    public static Connection connection;\n\n    @RequestMapping(value = \"/\",method = RequestMethod.GET)\n    public String processWelcome(Model model, HttpServletRequest request){\n\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        model.addAttribute(\"motd\", StringEscapeUtils.escapeHtml(Reference.motd).replace(\"\\n\", \"<br/>\"));\n\n        return \"main\";\n    }\n\n    public static ResultSet execQuery(String query) throws SQLException {\n        return connection.createStatement().executeQuery(query);\n    }\n\n    public static int execUpdate(String update) throws SQLException {\n        return connection.createStatement().executeUpdate(update);\n    }\n\n    public boolean queryDoesReturn(String query) throws SQLException {\n        ResultSet resultSet = execQuery(query);\n\n        while(resultSet.next()){\n            return true;\n        }\n\n        return false;\n    }\n\n    public static boolean isSessionAdmin(String sessionID){\n        try {\n            ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + sessionID + \"'\");\n\n            String username = null;\n\n            while(resultSet.next()){\n                username = resultSet.getString(\"username\");\n            }\n\n            if(username == null)\n                return false;\n\n            ResultSet accountsSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n            while(accountsSet.next()){\n                if (accountsSet.getString(\"role\").equals(\"admin\"))\n                    return true;\n            }\n\n            return false;\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return false;\n    }\n\n    @PostConstruct\n    public void startup(){\n        System.out.println(\"THIS IS A STARTUP MESSAGE\");\n\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n            connection = DriverManager.getConnection(Reference.dbLink, Reference.dbUsername, Reference.dbPass);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        JSONObject motdJSON = JSON.pullJSONObjectFromFile(\"motd.json\");\n\n        if(motdJSON == null){\n            Reference.motd = \"No messages today\";\n        }else{\n            Reference.motd = (String) motdJSON.get(\"message\");\n        }\n    }\n\n    @PreDestroy\n    public void preDestroy(){\n\n        try {\n            this.connection.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        JSONObject jsonObject = new JSONObject();\n\n        jsonObject.put(\"message\", Reference.motd);\n\n        JSON.putJSONObjectToFile(jsonObject, \"motd.json\");\n    }\n\n    public static Cookie getCookie(Cookie[] cookies, String name){\n        if(cookies != null) {\n            for (Cookie cookie : cookies) {\n                if (cookie.getName().equals(name)) {\n                    return cookie;\n                }\n            }\n        }\n\n        return new Cookie(\"12\", \"12\");\n    }\n}\n", "package com.bezman.servlet;\n\nimport com.bezman.background.ItemSale;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.stream.Collectors;\n\n/**\n * Created by Terence on 11/16/2014.\n */\n@Controller\n@RequestMapping\npublic class ItemRecapServlet {\n\n    @RequestMapping(value = \"/itemrecap\", method = {RequestMethod.GET, RequestMethod.POST})\n    public String getItemRecap(Model model, HttpServletRequest request){\n\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return \"itemrecap\";\n    }\n\n    @RequestMapping(value = \"/itemrecapjson\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String itemRecapJSON(@RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam (value = \"year\", required = false) String year, @RequestParam(value = \"order\", required = false) String order) {\n        JSONArray jsonArray = new JSONArray();\n\n        String query = \"select * from sales where \";\n\n        ArrayList params = new ArrayList();\n        ArrayList<ItemSale> items = new ArrayList<>();\n\n        if (month != null)\n            params.add(\"MONTH(date)='\" + month + \"' \");\n\n        if (day != null)\n            params.add(\"DAY(date)='\" + day + \"' \");\n\n        if (year != null)\n            params.add(\"YEAR(date)='\" + year + \"' \");\n\n        if (month == null && day == null && year == null)\n            query = \"select * from sales\";\n        else query += params.stream().collect(Collectors.joining(\" and \"));\n\n        if (order == null)\n            order = \"\";\n\n        System.out.println(query);\n\n        try {\n            ResultSet resultSet = IndexServlet.execQuery(query);\n\n            while(resultSet.next()){\n                String sale = resultSet.getString(\"sale\");\n                String[] saleSplit = sale.split(\";\");\n\n                Timestamp timestamp = resultSet.getTimestamp(\"date\");\n\n                if (saleSplit.length == 3){\n                    String itemName = saleSplit[0];\n                    Integer numOfItems = Integer.valueOf(saleSplit[1]);\n                    Double priceOfItem = Double.valueOf(saleSplit[2]);\n\n                    System.out.println(\"Item name : \" + itemName + \", numOfItems : \" + numOfItems + \", Price : \" + priceOfItem);\n\n                    if (itemName != null && numOfItems != null && priceOfItem != null) {\n                        ItemSale itemSale = new ItemSale(itemName, numOfItems);\n                        itemSale.setDate(timestamp);\n\n                        boolean foundOne = false;\n\n                        for(ItemSale item : items){\n                            if (item.itemName.equals(itemSale.itemName)){\n                                item.numOfItems += itemSale.numOfItems;\n                                item.totalCash += (numOfItems.doubleValue() * priceOfItem.doubleValue());\n\n                                System.out.println(\"Num of Items : \" + numOfItems + \", price: \" + priceOfItem);\n                                System.out.println(numOfItems * priceOfItem);\n\n                                foundOne = true;\n                            }\n                        }\n\n                        if(!foundOne) {\n                            itemSale.totalCash = numOfItems * priceOfItem;\n                            items.add(itemSale);\n                        }\n\n                    }\n                }\n            }\n\n            for (ItemSale item : items){\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"itemName\", item.itemName);\n                jsonObject.put(\"numOfItems\", item.numOfItems);\n                jsonObject.put(\"totalCash\", item.totalCash);\n                jsonObject.put(\"date\", item.timestamp.getTime());\n\n                jsonArray.add(jsonObject);;\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        int ascdesc = order.equals(\"desc\") ? -1 : 1;\n\n        jsonArray.sort(new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                JSONObject jsonObject1 = (JSONObject) o1;\n                JSONObject jsonObject2 = (JSONObject) o2;\n\n                return String.valueOf(jsonObject1.get(\"itemName\")).compareTo(String.valueOf(jsonObject2.get(\"itemName\"))) * ascdesc;\n            }\n        });\n\n\n        return jsonArray.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n * Created by Terence on 11/11/2014.\n */\n@Controller\n@RequestMapping\npublic class ItemSettings {\n\n    @RequestMapping(value = \"/itemsettings\", method = {RequestMethod.GET})\n    public String ItemSettings(Model model, HttpServletRequest request){\n\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                System.out.println(\"Username : \" + username);\n                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        JSONArray jsonArray = new JSONArray();\n\n        try {\n            ResultSet itemSet = IndexServlet.execQuery(\"select * from items\");\n\n            while(itemSet.next()){\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"itemName\", itemSet.getString(\"name\"));\n                jsonObject.put(\"priceOfItem\", itemSet.getString(\"price\"));\n\n                jsonArray.add(jsonObject);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        model.addAttribute(\"itemNames\", StringEscapeUtils.escapeJavaScript(jsonArray.toJSONString()));\n\n        return \"itemsettings\";\n    }\n\n    @RequestMapping(value = \"/changeitemname\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String changeItemName(Model model, HttpServletRequest request, @RequestParam(\"name\") String name, @RequestParam(\"oldName\") String oldName, @RequestParam(\"price\") String price){\n        JSONObject jsonObject = new JSONObject();\n\n        if(IndexServlet.isSessionAdmin(IndexServlet.getCookie(request.getCookies(), \"sessionID\").getValue())){\n            try {\n                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"update items set name=?,price=? where name=?\");\n                statement.setString(1, name);\n                statement.setDouble(2, Double.valueOf(price));\n                statement.setString(3, oldName);\n\n                statement.executeUpdate();\n                jsonObject.put(\"success\", \"true\");\n            } catch (SQLException e) {\n                jsonObject.put(\"success\", \"false\");\n            }\n        }else{\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/deleteitem\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String deleteItem(Model model, HttpServletRequest request, @RequestParam(\"name\") String name){\n        JSONObject jsonObject = new JSONObject();\n\n        if(IndexServlet.isSessionAdmin(IndexServlet.getCookie(request.getCookies(), \"sessionID\").getValue())){\n            try {\n                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"delete from items where name=?\");\n                statement.setString(1, name);\n\n                statement.executeUpdate();\n                jsonObject.put(\"success\", \"true\");\n            } catch (SQLException e) {\n                jsonObject.put(\"success\", \"false\");\n            }\n        }else{\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/additem\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String addItem(Model model, HttpServletRequest request, @RequestParam(\"name\") String name, @RequestParam(\"price\") String price){\n        JSONObject jsonObject = new JSONObject();\n\n        if(IndexServlet.isSessionAdmin(IndexServlet.getCookie(request.getCookies(), \"sessionID\").getValue())){\n            try {\n                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"insert into items values(?, ?)\");\n                statement.setString(1, StringEscapeUtils.escapeHtml(name));\n                statement.setDouble(2, Double.valueOf(price));\n\n                statement.executeUpdate();\n\n                jsonObject.put(\"success\", \"true\");\n            } catch (SQLException e) {\n                jsonObject.put(\"success\", \"false\");\n            }\n        }else{\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletResponse;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Random;\n\n/**\n * Created by Terence on 11/11/2014.\n */\n@Controller\n@RequestMapping\npublic class Login {\n\n    @RequestMapping(value = \"/login\", method = {RequestMethod.POST, RequestMethod.GET})\n    @ResponseBody\n    public String login(@RequestParam(\"username\") String username, @RequestParam(\"password\") String password, HttpServletResponse response){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            ResultSet resultSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"' and password='\" + password + \"'\");\n\n            boolean foundAccount = false;\n\n            while(resultSet.next()){\n                foundAccount = true;\n            }\n\n            if (foundAccount){\n                String sessionID = getRandomSessionID();\n\n                IndexServlet.execUpdate(\"delete from sessions where username='\" + username + \"'\");\n                IndexServlet.execUpdate(\"insert into sessions values('\" + username + \"', '\" + sessionID + \"')\");\n\n                jsonObject.put(\"success\", sessionID);\n                response.addCookie(new Cookie(\"sessionID\", sessionID));\n            }else jsonObject.put(\"success\", \"false\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n           jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    public String getRandomSessionID(){\n        String chars = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n        String returnString = \"\";\n\n        for(int i = 0; i < 16; i++){\n            returnString += chars.charAt(new Random().nextInt(chars.length()));\n        }\n\n        return returnString;\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport com.bezman.background.DailySubmission;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.stream.Collectors;\n\n/**\n * Created by Terence on 11/10/2014.\n */\n@Controller\n@RequestMapping\npublic class MonthlyRecapServlet {\n\n    @RequestMapping(value = \"/monthlyrecap\", method = {RequestMethod.GET})\n    public String getMonthlyPage(Model model, HttpServletRequest request){\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                System.out.println(\"Username : \" + username);\n                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return \"monthlyrecap\";\n    }\n\n    @RequestMapping(value = \"/monthlyrecapjson\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String getMonthly(@RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam (value = \"year\", required = false) String year, @RequestParam(value = \"order\", required = false) String order){\n        JSONArray jsonArray = new JSONArray();\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(new Date());\n\n        String query = \"select * from daily where \";\n\n        ArrayList params = new ArrayList();\n\n        if(month != null)\n            params.add(\"MONTH(date)='\" + month + \"' \");\n\n        if(day != null)\n            params.add(\"DAY(date)='\" + day + \"' \");\n\n        if(year != null)\n           params.add(\"YEAR(date)='\" + year +\"' \");\n\n        if (month == null && day == null && year == null)\n            query = \"select * from daily\";\n        else query += params.stream().collect(Collectors.joining(\" and \"));\n\n        if(order == null)\n            order = \"\";\n\n        query += (\" order by date \" + order);\n\n        System.out.println(query);\n\n        ResultSet resultSet = null;\n\n        try {\n            resultSet = IndexServlet.execQuery(query);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            while(resultSet.next()){\n                DailySubmission submission = DailySubmission.submissionFromRow(resultSet);\n\n                jsonArray.add(submission.toJson());\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return jsonArray.toJSONString();\n    }\n\n    @RequestMapping(value = \"/deleteperiod\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String deletePeriodFromDate(@RequestParam(\"date\") String date){\n        JSONObject returnJSON = new JSONObject();\n        try {\n            IndexServlet.execUpdate(\"delete from daily where date='\" + date + \"'\");\n            IndexServlet.execUpdate(\"delete from sales where date='\" + date + \"'\");\n            returnJSON.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            returnJSON.put(\"success\", \"false\");\n        }\n\n        return returnJSON.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n * Created by Terence on 11/13/2014.\n */\n@Controller\n@RequestMapping\npublic class StudentSettingsServlet {\n\n    @RequestMapping(value = \"/studentsettings\", method = {RequestMethod.GET, RequestMethod.POST})\n    public String studentSettings(Model model, HttpServletRequest request){\n\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                System.out.println(\"Username : \" + username);\n                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return \"studentsettings\";\n    }\n\n    @RequestMapping(value = \"/removestudent\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String removeStudent(@RequestParam(\"name\") String name){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            IndexServlet.execUpdate(\"delete from students where name='\" + name + \"'\");\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/addstudent\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String addStudent(@RequestParam(\"name\") String name, @RequestParam(\"period\") String period){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            IndexServlet.execUpdate(\"insert into students values('\" + StringEscapeUtils.escapeHtml(name) + \"', '\" + StringEscapeUtils.escapeHtml(period) + \"')\");\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/editstudent\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String editStudent(@RequestParam(\"oldName\") String oldName, @RequestParam(\"newName\") String newName, @RequestParam(\"oldPeriod\") String oldPeriod, @RequestParam(\"newPeriod\") String newPeriod){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            IndexServlet.execUpdate(\"update students set name='\" + StringEscapeUtils.escapeHtml(newName) + \"',period='\" + StringEscapeUtils.escapeHtml(newPeriod) + \"' where name='\" + oldName + \"' and period='\" + oldPeriod + \"'\");\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.Calendar;\nimport java.util.Map;\nimport java.util.TimeZone;\nimport java.util.stream.Collectors;\n\n/**\n * Created by Terence on 11/9/2014.\n */\n@Controller\n@RequestMapping\npublic class SubmitDaily {\n\n    @RequestMapping(value = \"/dailysubmit\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String submit(@RequestParam Map allParams, Model model){\n        String query = \"insert into daily (date, \";\n\n        JSONObject jsonObject = new JSONObject();\n\n        String sales = (String) allParams.get(\"sale\");\n        allParams.remove(\"sale\");\n\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"America/New_York\"));\n        Timestamp timestamp = new Timestamp(calendar.getTime().getTime());\n\n        String columnsNames = (String) allParams.keySet().stream().collect(Collectors.joining(\", \"));\n        query += columnsNames;\n        query += \") values('\" + timestamp + \"', \" + (String) allParams.keySet().stream().map(a -> allParams.get(a)).collect(Collectors.joining(\"', '\", \"'\", \"'\")) + \")\";\n\n        System.out.println(\"query : \" + query);\n\n        try {\n            IndexServlet.execUpdate(query);\n\n            System.out.println(sales);\n            for(String currentSale : sales.split(\",\")) {\n                query = \"insert into sales values('\" + timestamp + \"', '\" + currentSale + \"')\";\n                System.out.println(query);\n                IndexServlet.execUpdate(query);\n            }\n\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            jsonObject.put(\"success\", \"false\");\n            e.printStackTrace();\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n}\n"], "fixing_code": ["package com.bezman.background;\n\nimport com.bezman.servlet.IndexServlet;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\n\n/**\n * Created by Terence on 11/10/2014.\n */\npublic class DailySubmission {\n\n    public double startOnes = 0;\n    public double startFives = 0;\n    public double startTens = 0;\n    public double startTwenties = 0;\n    public double startPennies = 0;\n    public double startNickels = 0;\n    public double startDimes = 0;\n    public double startQuarters = 0;\n\n    public double endOnes = 0;\n    public double endFives = 0;\n    public double endTens = 0;\n    public double endTwenties = 0;\n    public double endPennies = 0;\n    public double endNickels = 0;\n    public double endDimes = 0;\n    public double endQuarters = 0;\n\n    public double startSum = 0;\n    public double endSum = 0;\n\n    public double startChecks = 0;\n    public double endChecks = 0;\n\n    public String[] names;\n    public int period;\n\n    public Timestamp date;\n\n    public ArrayList<Sale> sales = new ArrayList<>();\n\n    public DailySubmission(double startOnes, double startFives, double startTens, double startTwenties, double startPennies, double startNickels, double startDimes, double startQuarters, double endOnes, double endFives, double endTens, double endTwenties, double endPennies, double endNickels, double endDimes, double endQuarters, double startSum, double endSum, String names, int period, String sales, Timestamp date, double startChecks, double endChecks) {\n        this.startOnes = startOnes;\n        this.startFives = startFives;\n        this.startTens = startTens;\n        this.startTwenties = startTwenties;\n        this.startPennies = startPennies;\n        this.startNickels = startNickels;\n        this.startDimes = startDimes;\n        this.startQuarters = startQuarters;\n        this.endOnes = endOnes;\n        this.endFives = endFives;\n        this.endTens = endTens;\n        this.endTwenties = endTwenties;\n        this.endPennies = endPennies;\n        this.endNickels = endNickels;\n        this.endDimes = endDimes;\n        this.endQuarters = endQuarters;\n        this.startSum = startSum;\n        this.endSum = endSum;\n        this.names = names.split(\",\");\n        this.period = period;\n        this.date = date;\n\n        this.startChecks = startChecks;\n        this.endChecks = endChecks;\n\n        String[] salesArray = sales.split(\",\");\n\n        for(String sale : salesArray){\n            if(sale.split(\";\").length == 3) {\n                String nameOfItem = sale.split(\";\")[0];\n                int numOfItems = Integer.parseInt(sale.split(\";\")[1]);\n                double price = Double.parseDouble(sale.split(\";\")[2]);\n\n                this.sales.add(new Sale(nameOfItem, numOfItems, price));\n            }\n        }\n    }\n\n    public static DailySubmission submissionFromRow(ResultSet resultSet) throws SQLException {\n        double startOnes = resultSet.getDouble(\"startOnes\");\n        double startFives = resultSet.getDouble(\"startFives\");\n        double startTens = resultSet.getDouble(\"startTens\");\n        double startTwenties = resultSet.getDouble(\"startTwenties\");\n        double startPennies = resultSet.getDouble(\"startPennies\");\n        double startNickels = resultSet.getDouble(\"startNickels\");\n        double startDimes = resultSet.getDouble(\"startDimes\");\n        double startQuarters = resultSet.getDouble(\"startQuarters\");\n\n        double endOnes = resultSet.getDouble(\"endOnes\");\n        double endFives = resultSet.getDouble(\"endFives\");\n        double endTens = resultSet.getDouble(\"endTens\");\n        double endTwenties = resultSet.getDouble(\"endTwenties\");\n        double endPennies = resultSet.getDouble(\"endPennies\");\n        double endNickels = resultSet.getDouble(\"endNickels\");\n        double endDimes = resultSet.getDouble(\"endDimes\");\n        double endQuarters = resultSet.getDouble(\"endQuarters\");\n\n        double startSum = resultSet.getDouble(\"startSum\");\n        double endSum = resultSet.getDouble(\"endSum\");\n\n        double startChecks = resultSet.getDouble(\"startChecks\");\n        double endChecks = resultSet.getDouble(\"endChecks\");\n\n        int period = resultSet.getInt(\"period\");\n        String names = resultSet.getString(\"names\");\n\n        Timestamp date = resultSet.getTimestamp(\"date\");\n\n        String sales = \"\";\n\n        PreparedStatement statement = IndexServlet.connection.prepareStatement(\"select * from sales where date=?\");\n        statement.setTimestamp(1, date);\n\n        ResultSet salesSet = statement.executeQuery();\n\n        while(salesSet.next()){\n            sales += salesSet.getString(\"sale\") + \",\";\n        }\n\n        return new DailySubmission(startOnes, startFives, startTens, startTwenties, startPennies, startNickels, startDimes, startQuarters, endOnes, endFives, endTens, endTwenties, endPennies, endNickels, endDimes, endQuarters, startSum, endSum, names, period, sales, date, startChecks, endChecks);\n    }\n\n    public JSONObject toJson(){\n        JSONObject jsonObject = new JSONObject();\n\n        jsonObject.put(\"startOnes\", startOnes);\n        jsonObject.put(\"startFives\", startFives);\n        jsonObject.put(\"startTens\", startTens);\n        jsonObject.put(\"startTwenties\", startTwenties);\n        jsonObject.put(\"startPennies\", startPennies);\n        jsonObject.put(\"startNickels\", startNickels);\n        jsonObject.put(\"startDimes\", startDimes);\n        jsonObject.put(\"startQuarters\", startQuarters);\n\n        jsonObject.put(\"endOnes\", endOnes);\n        jsonObject.put(\"endFives\", endFives);\n        jsonObject.put(\"endTens\", endTens);\n        jsonObject.put(\"endTwenties\", endTwenties);\n        jsonObject.put(\"endPennies\", endPennies);\n        jsonObject.put(\"endNickels\", endNickels);\n        jsonObject.put(\"endDimes\", endDimes);\n        jsonObject.put(\"endQuarters\", endQuarters);\n\n        jsonObject.put(\"startSum\", startSum);\n        jsonObject.put(\"endSum\", endSum);\n\n        jsonObject.put(\"startChecks\", startChecks);\n        jsonObject.put(\"endChecks\", endChecks);\n\n        jsonObject.put(\"period\", period);\n\n        jsonObject.put(\"date\", date.toString());\n\n        JSONArray sales = new JSONArray();\n        for(Sale sale : this.sales){\n            JSONObject saleJSON = new JSONObject();\n\n            saleJSON.put(\"itemName\", sale.item);\n            saleJSON.put(\"numOfItems\", sale.numOfItems);\n            saleJSON.put(\"priceOfItem\", sale.price);\n\n            sales.add(saleJSON);\n        }\n\n        jsonObject.put(\"sales\", sales);\n\n        JSONArray names = new JSONArray();\n        for(String name : this.names){\n            JSONObject nameObject = new JSONObject();\n\n            nameObject.put(\"name\", name);\n\n            names.add(nameObject);\n        }\n\n        jsonObject.put(\"names\", names);\n\n        return  jsonObject;\n    }\n}\n", "package com.bezman.servlet;\n\nimport org.json.simple.JSONArray;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.List;\n\n/**\n * Created by Terence on 11/11/2014.\n */\n@Controller\n@RequestMapping\npublic class Attendance {\n\n    @RequestMapping(value = \"/attendancejson\", method = {RequestMethod.GET})\n    @ResponseBody\n    public String getAttendanceJSON(Model model, HttpServletRequest request, @RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam(value = \"year\", required = false) String year){\n\n        List<String> list = new ArrayList<>();\n\n        Calendar calendar = Calendar.getInstance();\n\n        if(month == null)\n            month = String.valueOf(calendar.get(Calendar.MONTH) + 1);\n\n        if(day == null)\n            day = String.valueOf(calendar.get(Calendar.DAY_OF_MONTH));\n\n        if (year == null)\n            year = String.valueOf(calendar.get(Calendar.YEAR));\n\n        JSONArray jsonArray = new JSONArray();\n\n        System.out.println(month + \"/ \" + day + \"/ \" + year);\n\n        try {\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"select * from daily where MONTH(date)=? and DAY(date)=? and YEAR(date)=? order by period\");\n            statement.setString(1, month);\n            statement.setString(2, day);\n            statement.setString(3, year);\n\n            ResultSet resultSet = statement.executeQuery();\n\n            while(resultSet.next()){\n                jsonArray.add(resultSet.getString(\"names\") + \";\" + resultSet.getString(\"period\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return jsonArray.toJSONString();\n    }\n\n\n    @RequestMapping(value = \"/attendance\", method = {RequestMethod.GET})\n    public String getAttendance(Model model, HttpServletRequest request, @RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam(value = \"year\", required = false) String year) {\n\n        IndexServlet.servletLoginCheck(model, request);\n\n        model.addAttribute(\"namesJSON\", getAttendanceJSON(model, request, month, day, year));\n\n        return \"attendance\";\n    }\n\n\n}\n", "package com.bezman.servlet;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Comparator;\n\n/**\n * Created by Terence on 11/9/2014.\n */\n@Controller\n@RequestMapping\npublic class DailyServlet {\n\n    @RequestMapping(value = \"/daily\", method = RequestMethod.GET)\n    public String getDaily(Model model, HttpServletRequest request){\n\n        IndexServlet.servletLoginCheck(model, request);\n\n        try {\n            ResultSet itemSet = IndexServlet.execQuery(\"select * from items\");\n            JSONArray jsonArray = new JSONArray();\n\n            while (itemSet.next()) {\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"itemName\", itemSet.getString(\"name\"));\n                jsonObject.put(\"priceOfItem\", itemSet.getDouble(\"price\"));\n\n                jsonArray.add(jsonObject);\n            }\n\n            model.addAttribute(\"itemNames\", StringEscapeUtils.escapeJavaScript(jsonArray.toJSONString()));\n        }catch (SQLException e){\n            e.printStackTrace();\n        }\n\n        return \"daily\";\n    }\n\n    @RequestMapping(value = \"/getstudents\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String getStudents(Model model, @RequestParam(value = \"period\", required = false) String period){\n\n        JSONArray jsonArray = new JSONArray();\n\n        try {\n            PreparedStatement statement;\n\n            if (period == null){\n                statement = IndexServlet.connection.prepareStatement(\"SELECT * FROM students\");\n            }else{\n                statement = IndexServlet.connection.prepareStatement(\"SELECT * FROM students WHERE period=? ORDER BY period ASC\");\n                statement.setString(1, period);\n            }\n\n            ResultSet resultSet = statement.executeQuery();\n\n            while(resultSet.next()){\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"name\", resultSet.getString(\"name\"));\n                jsonObject.put(\"period\", resultSet.getString(\"period\"));\n\n                jsonArray.add(jsonObject);\n            }\n\n            jsonArray.sort(new Comparator() {\n                @Override\n                public int compare(Object o1, Object o2) {\n                    JSONObject jsonObject1 = (JSONObject) o1;\n                    JSONObject jsonObject2 = (JSONObject) o2;\n\n                    return String.valueOf(jsonObject1.get(\"period\")).compareTo(String.valueOf(jsonObject2.get(\"period\")));\n                }\n            });\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return  jsonArray.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport com.bezman.reference.Reference;\nimport com.bezman.json.JSON;\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.*;\n\n/**\n * Created by Terence on 11/8/2014.\n */\n@Controller\n@RequestMapping\npublic class IndexServlet {\n\n    public static Statement statement;\n    public static Connection connection;\n\n    @RequestMapping(value = \"/\",method = RequestMethod.GET)\n    public String processWelcome(Model model, HttpServletRequest request){\n\n        IndexServlet.servletLoginCheck(model, request);\n\n        model.addAttribute(\"motd\", StringEscapeUtils.escapeHtml(Reference.motd).replace(\"\\n\", \"<br/>\"));\n\n        return \"main\";\n    }\n\n    public static ResultSet execQuery(String query) throws SQLException {\n        return connection.createStatement().executeQuery(query);\n    }\n\n    public static int execUpdate(String update) throws SQLException {\n        return connection.createStatement().executeUpdate(update);\n    }\n\n    public boolean queryDoesReturn(String query) throws SQLException {\n        ResultSet resultSet = execQuery(query);\n\n        while(resultSet.next()){\n            return true;\n        }\n\n        return false;\n    }\n\n    public static boolean isSessionAdmin(String sessionID){\n        try {\n            PreparedStatement sessionStatement = IndexServlet.connection.prepareStatement(\"SELECT * from sessions WHERE sessionID=?\");\n            sessionStatement.setString(1, sessionID);\n\n            ResultSet resultSet = sessionStatement.executeQuery();\n\n            String username = null;\n\n            while(resultSet.next()){\n                username = resultSet.getString(\"username\");\n            }\n\n            if(username == null)\n                return false;\n\n            PreparedStatement roleStatement = IndexServlet.connection.prepareStatement(\"SELECT  * from accounts where username=?\");\n            roleStatement.setString(1, username);\n\n            ResultSet accountsSet = roleStatement.executeQuery();\n\n            while(accountsSet.next()){\n                if (accountsSet.getString(\"role\").equals(\"admin\"))\n                    return true;\n            }\n\n            return false;\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return false;\n    }\n\n    @PostConstruct\n    public void startup(){\n        System.out.println(\"THIS IS A STARTUP MESSAGE\");\n\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n            connection = DriverManager.getConnection(Reference.dbLink, Reference.dbUsername, Reference.dbPass);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        JSONObject motdJSON = JSON.pullJSONObjectFromFile(\"motd.json\");\n\n        if(motdJSON == null){\n            Reference.motd = \"No messages today\";\n        }else{\n            Reference.motd = (String) motdJSON.get(\"message\");\n        }\n    }\n\n    @PreDestroy\n    public void preDestroy(){\n\n        try {\n            this.connection.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        JSONObject jsonObject = new JSONObject();\n\n        jsonObject.put(\"message\", Reference.motd);\n\n        JSON.putJSONObjectToFile(jsonObject, \"motd.json\");\n    }\n\n    public static Cookie getCookie(Cookie[] cookies, String name){\n        if(cookies != null) {\n            for (Cookie cookie : cookies) {\n                if (cookie.getName().equals(name)) {\n                    return cookie;\n                }\n            }\n        }\n\n        return new Cookie(\"12\", \"12\");\n    }\n\n    public static void servletLoginCheck(Model model, HttpServletRequest request){\n        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n        if (cookie != null){\n            try {\n                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"SELECT  * from sessions where sessionID=?\");\n                statement.setString(1, cookie.getValue());\n\n                ResultSet resultSet = statement.executeQuery();\n                String username = null;\n\n                while(resultSet.next()){\n                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n                    username = resultSet.getString(\"username\");\n                }\n\n                PreparedStatement roleStatement = IndexServlet.connection.prepareStatement(\"SELECT * from accounts where username=?\");\n                roleStatement.setString(1, username);\n\n                ResultSet accountSet = roleStatement.executeQuery();\n\n                while(accountSet.next()){\n                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n", "package com.bezman.servlet;\n\nimport com.bezman.background.ItemSale;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.*;\n\n/**\n * Created by Terence on 11/16/2014.\n */\n@Controller\n@RequestMapping\npublic class ItemRecapServlet {\n\n    @RequestMapping(value = \"/itemrecap\", method = {RequestMethod.GET, RequestMethod.POST})\n    public String getItemRecap(Model model, HttpServletRequest request){\n\n        IndexServlet.servletLoginCheck(model, request);\n\n        return \"itemrecap\";\n    }\n\n    @RequestMapping(value = \"/itemrecapjson\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String itemRecapJSON(@RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam (value = \"year\", required = false) String year, @RequestParam(value = \"order\", required = false) String order) {\n        JSONArray jsonArray = new JSONArray();\n\n        String query = \"select * from sales where \";\n\n        ArrayList params = new ArrayList();\n        ArrayList<ItemSale> items = new ArrayList<>();\n\n        HashMap<Integer, String> valueMap = new HashMap<>();\n\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"America/New_York\"));\n\n        int predCount = 1;\n\n        if (month != null) {\n            query += \"MONTH(date)=?\";\n\n            valueMap.put(predCount, month);\n\n            predCount++;\n        }\n\n        if (day != null) {\n\n            if (predCount > 1)\n                query += \" and \";\n\n            query += \"DAY(date)=?\";\n\n            valueMap.put(predCount, day);\n\n            predCount++;\n        }\n\n        if (year != null) {\n\n            if (predCount > 1)\n                query += \" and \";\n\n            query += \"YEAR(date)=?\";\n\n            valueMap.put(predCount, year);\n\n            predCount++;\n        }\n\n        if (month == null && day == null && year == null)\n            query = \"SELECT * from sales\";\n\n        System.out.println(query);\n\n        try {\n\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(query);\n\n            for(Integer integer : valueMap.keySet()){\n                statement.setString(integer, valueMap.get(integer));\n            }\n\n            System.out.println(statement.toString());\n\n\n            ResultSet resultSet = statement.executeQuery();\n\n            while(resultSet.next()){\n                String sale = resultSet.getString(\"sale\");\n                String[] saleSplit = sale.split(\";\");\n\n                Timestamp timestamp = resultSet.getTimestamp(\"date\");\n\n                if (saleSplit.length == 3){\n                    String itemName = saleSplit[0];\n                    Integer numOfItems = Integer.valueOf(saleSplit[1]);\n                    Double priceOfItem = Double.valueOf(saleSplit[2]);\n\n                    System.out.println(\"Item name : \" + itemName + \", numOfItems : \" + numOfItems + \", Price : \" + priceOfItem);\n\n                    if (itemName != null && numOfItems != null && priceOfItem != null) {\n                        ItemSale itemSale = new ItemSale(itemName, numOfItems);\n                        itemSale.setDate(timestamp);\n\n                        boolean foundOne = false;\n\n                        for(ItemSale item : items){\n                            if (item.itemName.equals(itemSale.itemName)){\n                                item.numOfItems += itemSale.numOfItems;\n                                item.totalCash += (numOfItems.doubleValue() * priceOfItem.doubleValue());\n\n                                System.out.println(\"Num of Items : \" + numOfItems + \", price: \" + priceOfItem);\n                                System.out.println(numOfItems * priceOfItem);\n\n                                foundOne = true;\n                            }\n                        }\n\n                        if(!foundOne) {\n                            itemSale.totalCash = numOfItems * priceOfItem;\n                            items.add(itemSale);\n                        }\n\n                    }\n                }\n            }\n\n            for (ItemSale item : items){\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"itemName\", item.itemName);\n                jsonObject.put(\"numOfItems\", item.numOfItems);\n                jsonObject.put(\"totalCash\", item.totalCash);\n                jsonObject.put(\"date\", item.timestamp.getTime());\n\n                jsonArray.add(jsonObject);;\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        int ascdesc = order.equals(\"desc\") ? -1 : 1;\n\n        jsonArray.sort(new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                JSONObject jsonObject1 = (JSONObject) o1;\n                JSONObject jsonObject2 = (JSONObject) o2;\n\n                return String.valueOf(jsonObject1.get(\"itemName\")).compareTo(String.valueOf(jsonObject2.get(\"itemName\"))) * ascdesc;\n            }\n        });\n\n\n        return jsonArray.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n * Created by Terence on 11/11/2014.\n */\n@Controller\n@RequestMapping\npublic class ItemSettings {\n\n    @RequestMapping(value = \"/itemsettings\", method = {RequestMethod.GET})\n    public String ItemSettings(Model model, HttpServletRequest request){\n\n        IndexServlet.servletLoginCheck(model, request);\n\n        JSONArray jsonArray = new JSONArray();\n\n        try {\n            ResultSet itemSet = IndexServlet.execQuery(\"select * from items\");\n\n            while(itemSet.next()){\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"itemName\", itemSet.getString(\"name\"));\n                jsonObject.put(\"priceOfItem\", itemSet.getString(\"price\"));\n\n                jsonArray.add(jsonObject);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        model.addAttribute(\"itemNames\", StringEscapeUtils.escapeJavaScript(jsonArray.toJSONString()));\n\n        return \"itemsettings\";\n    }\n\n    @RequestMapping(value = \"/changeitemname\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String changeItemName(Model model, HttpServletRequest request, @RequestParam(\"name\") String name, @RequestParam(\"oldName\") String oldName, @RequestParam(\"price\") String price){\n        JSONObject jsonObject = new JSONObject();\n\n        if(IndexServlet.isSessionAdmin(IndexServlet.getCookie(request.getCookies(), \"sessionID\").getValue())){\n            try {\n                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"update items set name=?,price=? where name=?\");\n                statement.setString(1, name);\n                statement.setDouble(2, Double.valueOf(price));\n                statement.setString(3, oldName);\n\n                statement.executeUpdate();\n                jsonObject.put(\"success\", \"true\");\n            } catch (SQLException e) {\n                jsonObject.put(\"success\", \"false\");\n            }\n        }else{\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/deleteitem\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String deleteItem(Model model, HttpServletRequest request, @RequestParam(\"name\") String name){\n        JSONObject jsonObject = new JSONObject();\n\n        if(IndexServlet.isSessionAdmin(IndexServlet.getCookie(request.getCookies(), \"sessionID\").getValue())){\n            try {\n                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"delete from items where name=?\");\n                statement.setString(1, name);\n\n                statement.executeUpdate();\n                jsonObject.put(\"success\", \"true\");\n            } catch (SQLException e) {\n                jsonObject.put(\"success\", \"false\");\n            }\n        }else{\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/additem\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String addItem(Model model, HttpServletRequest request, @RequestParam(\"name\") String name, @RequestParam(\"price\") String price){\n        JSONObject jsonObject = new JSONObject();\n\n        if(IndexServlet.isSessionAdmin(IndexServlet.getCookie(request.getCookies(), \"sessionID\").getValue())){\n            try {\n                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"insert into items values(?, ?)\");\n                statement.setString(1, StringEscapeUtils.escapeHtml(name));\n                statement.setDouble(2, Double.valueOf(price));\n\n                statement.executeUpdate();\n\n                jsonObject.put(\"success\", \"true\");\n            } catch (SQLException e) {\n                jsonObject.put(\"success\", \"false\");\n            }\n        }else{\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletResponse;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Random;\n\n/**\n * Created by Terence on 11/11/2014.\n */\n@Controller\n@RequestMapping\npublic class Login {\n\n    @RequestMapping(value = \"/login\", method = {RequestMethod.POST, RequestMethod.GET})\n    @ResponseBody\n    public String login(@RequestParam(\"username\") String username, @RequestParam(\"password\") String password, HttpServletResponse response){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"select * from accounts where username=? and password=?\");\n            statement.setString(1, username);\n            statement.setString(2, password);\n\n            ResultSet resultSet = statement.executeQuery();\n\n            boolean foundAccount = false;\n\n            while(resultSet.next()){\n                foundAccount = true;\n            }\n\n            if (foundAccount){\n                String sessionID = getRandomSessionID();\n\n                PreparedStatement deleteSessions = IndexServlet.connection.prepareStatement(\"DELETE from sessions WHERE username=?\");\n                deleteSessions.setString(1, username);\n\n                deleteSessions.executeUpdate();\n\n                PreparedStatement insertSession = IndexServlet.connection.prepareStatement(\"insert into sessions VALUES(?, ?)\");\n                insertSession.setString(1, username);\n                insertSession.setString(2, sessionID);\n\n                insertSession.executeUpdate();\n\n                jsonObject.put(\"success\", sessionID);\n                response.addCookie(new Cookie(\"sessionID\", sessionID));\n            }else jsonObject.put(\"success\", \"false\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n           jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    public String getRandomSessionID(){\n        String chars = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n        String returnString = \"\";\n\n        for(int i = 0; i < 16; i++){\n            returnString += chars.charAt(new Random().nextInt(chars.length()));\n        }\n\n        return returnString;\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport com.bezman.background.DailySubmission;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.stream.Collectors;\n\n/**\n * Created by Terence on 11/10/2014.\n */\n@Controller\n@RequestMapping\npublic class MonthlyRecapServlet {\n\n    @RequestMapping(value = \"/monthlyrecap\", method = {RequestMethod.GET})\n    public String getMonthlyPage(Model model, HttpServletRequest request){\n        IndexServlet.servletLoginCheck(model, request);\n\n        return \"monthlyrecap\";\n    }\n\n    @RequestMapping(value = \"/monthlyrecapjson\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String getMonthly(@RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam (value = \"year\", required = false) String year, @RequestParam(value = \"order\", required = false) String order){\n        JSONArray jsonArray = new JSONArray();\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(new Date());\n\n        HashMap<Integer, String> valueMap = new HashMap<>();\n\n        String query = \"select * from daily where \";\n\n        ArrayList params = new ArrayList();\n\n        int predCount = 1;\n\n        if (month != null) {\n            query += \"MONTH(date)=?\";\n\n            valueMap.put(predCount, month);\n\n            predCount++;\n        }\n\n        if (day != null) {\n\n            if (predCount > 1)\n                query += \" and \";\n\n            query += \"DAY(date)=?\";\n\n            valueMap.put(predCount, day);\n\n            predCount++;\n        }\n\n        if (year != null) {\n\n            if (predCount > 1)\n                query += \" and \";\n\n            query += \"YEAR(date)=?\";\n\n            valueMap.put(predCount, year);\n\n            predCount++;\n        }\n\n        if (month == null && day == null && year == null)\n            query = \"select * from daily\";\n        else query += params.stream().collect(Collectors.joining(\" and \"));\n\n        if(order == null)\n            order = \"\";\n\n        query += (\" order by date \" + order);\n\n        try {\n\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(query);\n\n            for(Integer integer : valueMap.keySet()){\n                statement.setString(integer, valueMap.get(integer));\n            }\n\n            System.out.println(statement);\n\n            ResultSet resultSet = statement.executeQuery();\n\n            while(resultSet.next()){\n                DailySubmission submission = DailySubmission.submissionFromRow(resultSet);\n\n                jsonArray.add(submission.toJson());\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        return jsonArray.toJSONString();\n    }\n\n    @RequestMapping(value = \"/deleteperiod\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String deletePeriodFromDate(@RequestParam(\"date\") String date){\n        JSONObject returnJSON = new JSONObject();\n        try {\n            PreparedStatement deleteDaily = IndexServlet.connection.prepareStatement(\"DELETE from daily where date=?\");\n            deleteDaily.setString(1, date);\n\n            deleteDaily.executeUpdate();\n\n            PreparedStatement deleteSales = IndexServlet.connection.prepareStatement(\"DELETE from sales where date=?\");\n            deleteSales.setString(1, date);\n\n            deleteSales.executeUpdate();\n            returnJSON.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            returnJSON.put(\"success\", \"false\");\n        }\n\n        return returnJSON.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * Created by Terence on 11/13/2014.\n */\n@Controller\n@RequestMapping\npublic class StudentSettingsServlet {\n\n    @RequestMapping(value = \"/studentsettings\", method = {RequestMethod.GET, RequestMethod.POST})\n    public String studentSettings(Model model, HttpServletRequest request){\n\n        IndexServlet.servletLoginCheck(model, request);\n\n        return \"studentsettings\";\n    }\n\n    @RequestMapping(value = \"/removestudent\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String removeStudent(@RequestParam(\"name\") String name){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"DELETE  from students where name=?\");\n            statement.setString(1, name);\n\n            statement.executeUpdate();\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/addstudent\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String addStudent(@RequestParam(\"name\") String name, @RequestParam(\"period\") String period){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"insert into students VALUES(?, ?)\");\n            statement.setString(1, StringEscapeUtils.escapeHtml(name));\n            statement.setString(2, StringEscapeUtils.escapeHtml(period));\n\n            statement.executeUpdate();\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n    @RequestMapping(value = \"/editstudent\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String editStudent(@RequestParam(\"oldName\") String oldName, @RequestParam(\"newName\") String newName, @RequestParam(\"oldPeriod\") String oldPeriod, @RequestParam(\"newPeriod\") String newPeriod){\n\n        JSONObject jsonObject = new JSONObject();\n\n        try {\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"update students set name=?, period=? where name=? and period=?\");\n            statement.setString(1, newName);\n            statement.setString(2, newPeriod);\n            statement.setString(3, oldName);\n            statement.setString(4, oldPeriod);\n\n            statement.executeUpdate();\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            jsonObject.put(\"success\", \"false\");\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n}\n", "package com.bezman.servlet;\n\nimport org.json.simple.JSONObject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\n/**\n * Created by Terence on 11/9/2014.\n */\n@Controller\n@RequestMapping\npublic class SubmitDaily {\n\n    @RequestMapping(value = \"/dailysubmit\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public String submit(@RequestParam Map allParams, Model model){\n        JSONObject jsonObject = new JSONObject();\n\n        String sales = (String) allParams.get(\"sale\");\n        allParams.remove(\"sale\");\n\n        HashMap<Integer, String> keyMap = new HashMap<>();\n        HashMap<Integer, String> valueMap = new HashMap<>();\n\n        int i = 1;\n        for(Object obj : allParams.keySet()){\n            keyMap.put(i, (String) obj);\n            valueMap.put(i, (String) allParams.get(obj));\n            i++;\n        }\n\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"America/New_York\"));\n        Timestamp timestamp = new Timestamp(calendar.getTime().getTime());\n\n        String columnNames = (String) keyMap.values().stream().collect(Collectors.joining(\", \"));\n\n        ArrayList questionMarks = new ArrayList();\n        IntStream.range(0, allParams.size()).forEach(a -> questionMarks.add(\"?\"));\n\n        String query = \"insert into daily (date, \" + columnNames + \") VALUES('\" + timestamp + \"', \" + questionMarks.stream().collect(Collectors.joining(\", \")) + \")\";\n\n        System.out.println(\"query : \" + query);\n\n        try {\n            PreparedStatement statement = IndexServlet.connection.prepareStatement(query);\n\n            for(Integer integer: valueMap.keySet()){\n                statement.setString(integer, valueMap.get(integer));\n            }\n\n            System.out.println(statement);\n\n            statement.executeUpdate();\n\n            System.out.println(sales);\n            for(String currentSale : sales.split(\",\")) {\n                query = \"insert into sales values(?, ?)\";\n\n                PreparedStatement salesStatement = IndexServlet.connection.prepareStatement(query);\n                salesStatement.setTimestamp(1, timestamp);\n                salesStatement.setString(2, currentSale);\n\n                salesStatement.executeUpdate();\n            }\n\n            jsonObject.put(\"success\", \"true\");\n        } catch (SQLException e) {\n            jsonObject.put(\"success\", \"false\");\n            e.printStackTrace();\n        }\n\n        return jsonObject.toJSONString();\n    }\n\n}\n"], "filenames": ["src/com/bezman/background/DailySubmission.java", "src/com/bezman/servlet/Attendance.java", "src/com/bezman/servlet/DailyServlet.java", "src/com/bezman/servlet/IndexServlet.java", "src/com/bezman/servlet/ItemRecapServlet.java", "src/com/bezman/servlet/ItemSettings.java", "src/com/bezman/servlet/Login.java", "src/com/bezman/servlet/MonthlyRecapServlet.java", "src/com/bezman/servlet/StudentSettingsServlet.java", "src/com/bezman/servlet/SubmitDaily.java"], "buggy_code_start_loc": [6, 11, 13, 31, 13, 13, 11, 14, 12, 10], "buggy_code_end_loc": [120, 85, 77, 150, 86, 50, 43, 116, 94, 52], "fixing_code_start_loc": [7, 10, 12, 31, 12, 12, 12, 15, 11, 11], "fixing_code_end_loc": [125, 70, 69, 167, 100, 29, 56, 133, 86, 75], "type": "CWE-89", "message": "A vulnerability classified as critical has been found in tbezman school-store. This affects an unknown part. The manipulation leads to sql injection. The name of the patch is 2957fc97054216d3a393f1775efd01ae2b072001. It is recommended to apply a patch to fix this issue. The identifier VDB-217557 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125047", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T12:15:08.657", "lastModified": "2023-01-12T14:43:17.777", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical has been found in tbezman school-store. This affects an unknown part. The manipulation leads to sql injection. The name of the patch is 2957fc97054216d3a393f1775efd01ae2b072001. It is recommended to apply a patch to fix this issue. The identifier VDB-217557 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:school-store_project:school-store:*:*:*:*:*:*:*:*", "versionEndExcluding": "11-23-2014", "matchCriteriaId": "55E27206-5C3C-4D74-81B7-932D505BF73B"}]}]}], "references": [{"url": "https://github.com/tbezman/school-store/commit/2957fc97054216d3a393f1775efd01ae2b072001", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217557", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217557", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tbezman/school-store/commit/2957fc97054216d3a393f1775efd01ae2b072001"}}