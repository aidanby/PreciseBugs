{"buggy_code": ["-- Copyright 2008 Steven Barth <steven@midlink.org>\n-- Copyright 2010-2012 Jo-Philipp Wich <jow@openwrt.org>\n-- Licensed to the public under the Apache License 2.0.\n\nlocal sys = require \"luci.sys\"\nlocal utl = require \"luci.util\"\nlocal dsp = require \"luci.dispatcher\"\nlocal nxo = require \"nixio\"\n\nlocal ft = require \"luci.tools.firewall\"\nlocal nw = require \"luci.model.network\"\nlocal m, s, o, k, v\n\narg[1] = arg[1] or \"\"\n\nm = Map(\"firewall\",\n\ttranslate(\"Firewall - Traffic Rules\"),\n\ttranslate(\"This page allows you to change advanced properties of the \\\n\t           traffic rule entry, such as matched source and destination \\\n\t\t\t   hosts.\"))\n\nm.redirect = dsp.build_url(\"admin/network/firewall/rules\")\n\nnw.init(m.uci)\n\nlocal rule_type = m.uci:get(\"firewall\", arg[1])\nif rule_type == \"redirect\" and m:get(arg[1], \"target\") ~= \"SNAT\" then\n\trule_type = nil\nend\n\nif not rule_type then\n\tluci.http.redirect(m.redirect)\n\treturn\n\n--\n-- SNAT\n--\nelseif rule_type == \"redirect\" then\n\n\tlocal name = m:get(arg[1], \"name\") or m:get(arg[1], \"_name\")\n\tif not name or #name == 0 then\n\t\tname = translate(\"(Unnamed SNAT)\")\n\telse\n\t\tname = \"SNAT %s\" % name\n\tend\n\n\tm.title = \"%s - %s\" %{ translate(\"Firewall - Traffic Rules\"), luci.util.pcdata(name) }\n\n\tlocal wan_zone = nil\n\n\tm.uci:foreach(\"firewall\", \"zone\",\n\t\tfunction(s)\n\t\t\tlocal n = s.network or s.name\n\t\t\tif n then\n\t\t\t\tlocal i\n\t\t\t\tfor i in utl.imatch(n) do\n\t\t\t\t\tif i == \"wan\" then\n\t\t\t\t\t\twan_zone = s.name\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend)\n\n\ts = m:section(NamedSection, arg[1], \"redirect\", \"\")\n\ts.anonymous = true\n\ts.addremove = false\n\n\n\tft.opt_enabled(s, Button)\n\tft.opt_name(s, Value, translate(\"Name\"))\n\n\n\to = s:option(Value, \"proto\",\n\t\ttranslate(\"Protocol\"),\n\t\ttranslate(\"You may specify multiple by selecting \\\"-- custom --\\\" and \\\n\t\t           then entering protocols separated by space.\"))\n\n\to:value(\"all\", \"All protocols\")\n\to:value(\"tcp udp\", \"TCP+UDP\")\n\to:value(\"tcp\", \"TCP\")\n\to:value(\"udp\", \"UDP\")\n\to:value(\"icmp\", \"ICMP\")\n\n\tfunction o.cfgvalue(...)\n\t\tlocal v = Value.cfgvalue(...)\n\t\tif not v or v == \"tcpudp\" then\n\t\t\treturn \"tcp udp\"\n\t\tend\n\t\treturn v\n\tend\n\n\n\to = s:option(Value, \"src\", translate(\"Source zone\"))\n\to.nocreate = true\n\to.default = \"wan\"\n\to.template = \"cbi/firewall_zonelist\"\n\n\n\to = s:option(Value, \"src_ip\", translate(\"Source IP address\"))\n\to.rmempty = true\n\to.datatype = \"neg(ipmask4)\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"src_port\",\n\t\ttranslate(\"Source port\"),\n\t\ttranslate(\"Match incoming traffic originating from the given source \\\n\t\t\tport or port range on the client host.\"))\n\to.rmempty = true\n\to.datatype = \"neg(portrange)\"\n\to.placeholder = translate(\"any\")\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(Value, \"dest\", translate(\"Destination zone\"))\n\to.nocreate = true\n\to.default = \"lan\"\n\to.template = \"cbi/firewall_zonelist\"\n\n\n\to = s:option(Value, \"dest_ip\", translate(\"Destination IP address\"))\n\to.datatype = \"neg(ipmask4)\"\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"dest_port\",\n\t\ttranslate(\"Destination port\"),\n\t\ttranslate(\"Match forwarded traffic to the given destination port or \\\n\t\t\tport range.\"))\n\n\to.rmempty = true\n\to.placeholder = translate(\"any\")\n\to.datatype = \"neg(portrange)\"\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(Value, \"src_dip\",\n\t\ttranslate(\"SNAT IP address\"),\n\t\ttranslate(\"Rewrite matched traffic to the given address.\"))\n\to.rmempty = false\n\to.datatype = \"ip4addr\"\n\n\tfor k, v in ipairs(nw:get_interfaces()) do\n\t\tlocal a\n\t\tfor k, a in ipairs(v:ipaddrs()) do\n\t\t\to:value(a:host():string(), '%s (%s)' %{\n\t\t\t\ta:host():string(), v:shortname()\n\t\t\t})\n\t\tend\n\tend\n\n\n\to = s:option(Value, \"src_dport\", translate(\"SNAT port\"),\n\t\ttranslate(\"Rewrite matched traffic to the given source port. May be \\\n\t\t\tleft empty to only rewrite the IP address.\"))\n\to.datatype = \"portrange\"\n\to.rmempty = true\n\to.placeholder = translate('Do not rewrite')\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\ts:option(Value, \"extra\",\n\t\ttranslate(\"Extra arguments\"),\n\t\ttranslate(\"Passes additional arguments to iptables. Use with care!\"))\n\n\n--\n-- Rule\n--\nelse\n\tlocal name = m:get(arg[1], \"name\") or m:get(arg[1], \"_name\")\n\tif not name or #name == 0 then\n\t\tname = translate(\"(Unnamed Rule)\")\n\tend\n\n\tm.title = \"%s - %s\" %{ translate(\"Firewall - Traffic Rules\"), name }\n\n\n\ts = m:section(NamedSection, arg[1], \"rule\", \"\")\n\ts.anonymous = true\n\ts.addremove = false\n\n\tft.opt_enabled(s, Button)\n\tft.opt_name(s, Value, translate(\"Name\"))\n\n\n\to = s:option(ListValue, \"family\", translate(\"Restrict to address family\"))\n\to.rmempty = true\n\to:value(\"\", translate(\"IPv4 and IPv6\"))\n\to:value(\"ipv4\", translate(\"IPv4 only\"))\n\to:value(\"ipv6\", translate(\"IPv6 only\"))\n\n\n\to = s:option(Value, \"proto\", translate(\"Protocol\"))\n\to:value(\"all\", translate(\"Any\"))\n\to:value(\"tcp udp\", \"TCP+UDP\")\n\to:value(\"tcp\", \"TCP\")\n\to:value(\"udp\", \"UDP\")\n\to:value(\"icmp\", \"ICMP\")\n\n\tfunction o.cfgvalue(...)\n\t\tlocal v = Value.cfgvalue(...)\n\t\tif not v or v == \"tcpudp\" then\n\t\t\treturn \"tcp udp\"\n\t\tend\n\t\treturn v\n\tend\n\n\n\to = s:option(DropDown, \"icmp_type\", translate(\"Match ICMP type\"))\n\to.multiple = true\n\to.display = 10\n\to.dropdown = 10\n\to.custom = true\n\to.cast = \"table\"\n\n\to:value(\"\", \"any\")\n\to:value(\"echo-reply\")\n\to:value(\"destination-unreachable\")\n\to:value(\"network-unreachable\")\n\to:value(\"host-unreachable\")\n\to:value(\"protocol-unreachable\")\n\to:value(\"port-unreachable\")\n\to:value(\"fragmentation-needed\")\n\to:value(\"source-route-failed\")\n\to:value(\"network-unknown\")\n\to:value(\"host-unknown\")\n\to:value(\"network-prohibited\")\n\to:value(\"host-prohibited\")\n\to:value(\"TOS-network-unreachable\")\n\to:value(\"TOS-host-unreachable\")\n\to:value(\"communication-prohibited\")\n\to:value(\"host-precedence-violation\")\n\to:value(\"precedence-cutoff\")\n\to:value(\"source-quench\")\n\to:value(\"redirect\")\n\to:value(\"network-redirect\")\n\to:value(\"host-redirect\")\n\to:value(\"TOS-network-redirect\")\n\to:value(\"TOS-host-redirect\")\n\to:value(\"echo-request\")\n\to:value(\"router-advertisement\")\n\to:value(\"router-solicitation\")\n\to:value(\"time-exceeded\")\n\to:value(\"ttl-zero-during-transit\")\n\to:value(\"ttl-zero-during-reassembly\")\n\to:value(\"parameter-problem\")\n\to:value(\"ip-header-bad\")\n\to:value(\"required-option-missing\")\n\to:value(\"timestamp-request\")\n\to:value(\"timestamp-reply\")\n\to:value(\"address-mask-request\")\n\to:value(\"address-mask-reply\")\n\n\to:depends(\"proto\", \"icmp\")\n\n\n\to = s:option(Value, \"src\", translate(\"Source zone\"))\n\to.nocreate = true\n\to.allowany = true\n\to.allowlocal = \"src\"\n\to.template = \"cbi/firewall_zonelist\"\n\n\n\to = s:option(Value, \"src_mac\", translate(\"Source MAC address\"))\n\to.datatype = \"list(macaddr)\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.mac_hints(function(mac, name)\n\t\to:value(mac, \"%s (%s)\" %{ mac, name })\n\tend)\n\n\n\to = s:option(Value, \"src_ip\", translate(\"Source address\"))\n\to.datatype = \"list(neg(ipmask))\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"src_port\", translate(\"Source port\"))\n\to.datatype = \"list(neg(portrange))\"\n\to.placeholder = translate(\"any\")\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(Value, \"dest_local\", translate(\"Output zone\"))\n\to.nocreate = true\n\to.allowany = true\n\to.template = \"cbi/firewall_zonelist\"\n\to.alias = \"dest\"\n\to:depends(\"src\", \"\")\n\n\to = s:option(Value, \"dest_remote\", translate(\"Destination zone\"))\n\to.nocreate = true\n\to.allowany = true\n\to.allowlocal = true\n\to.template = \"cbi/firewall_zonelist\"\n\to.alias = \"dest\"\n\to:depends({[\"src\"] = \"\", [\"!reverse\"] = true})\n\n\n\to = s:option(Value, \"dest_ip\", translate(\"Destination address\"))\n\to.datatype = \"list(neg(ipmask))\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"dest_port\", translate(\"Destination port\"))\n\to.datatype = \"list(neg(portrange))\"\n\to.placeholder = translate(\"any\")\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(ListValue, \"target\", translate(\"Action\"))\n\to.default = \"ACCEPT\"\n\to:value(\"DROP\", translate(\"drop\"))\n\to:value(\"ACCEPT\", translate(\"accept\"))\n\to:value(\"REJECT\", translate(\"reject\"))\n\to:value(\"NOTRACK\", translate(\"don't track\"))\n\n\n\ts:option(Value, \"extra\",\n\t\ttranslate(\"Extra arguments\"),\n\t\ttranslate(\"Passes additional arguments to iptables. Use with care!\"))\nend\n\no = s:option(DropDown, \"weekdays\", translate(\"Week Days\"))\no.multiple = true\no.display = 5\no:value(\"Sun\", translate(\"Sunday\"))\no:value(\"Mon\", translate(\"Monday\"))\no:value(\"Tue\", translate(\"Tuesday\"))\no:value(\"Wed\", translate(\"Wednesday\"))\no:value(\"Thu\", translate(\"Thursday\"))\no:value(\"Fri\", translate(\"Friday\"))\no:value(\"Sat\", translate(\"Saturday\"))\n\no = s:option(DropDown, \"monthdays\", translate(\"Month Days\"))\no.multiple = true\no.display = 15\nfor i = 1,31 do\n\to:value(translate(i))\nend\n\no = s:option(Value, \"start_time\", translate(\"Start Time (hh:mm:ss)\"))\no.datatype = \"timehhmmss\"\no = s:option(Value, \"stop_time\", translate(\"Stop Time (hh:mm:ss)\"))\no.datatype = \"timehhmmss\"\no = s:option(Value, \"start_date\", translate(\"Start Date (yyyy-mm-dd)\"))\no.datatype = \"dateyyyymmdd\"\no = s:option(Value, \"stop_date\", translate(\"Stop Date (yyyy-mm-dd)\"))\no.datatype = \"dateyyyymmdd\"\n\no = s:option(Flag, \"utc_time\", translate(\"Time in UTC\"))\no.default = o.disabled\n\nreturn m\n"], "fixing_code": ["-- Copyright 2008 Steven Barth <steven@midlink.org>\n-- Copyright 2010-2012 Jo-Philipp Wich <jow@openwrt.org>\n-- Licensed to the public under the Apache License 2.0.\n\nlocal sys = require \"luci.sys\"\nlocal utl = require \"luci.util\"\nlocal dsp = require \"luci.dispatcher\"\nlocal nxo = require \"nixio\"\n\nlocal ft = require \"luci.tools.firewall\"\nlocal nw = require \"luci.model.network\"\nlocal m, s, o, k, v\n\narg[1] = arg[1] or \"\"\n\nm = Map(\"firewall\",\n\ttranslate(\"Firewall - Traffic Rules\"),\n\ttranslate(\"This page allows you to change advanced properties of the \\\n\t           traffic rule entry, such as matched source and destination \\\n\t\t\t   hosts.\"))\n\nm.redirect = dsp.build_url(\"admin/network/firewall/rules\")\n\nnw.init(m.uci)\n\nlocal rule_type = m.uci:get(\"firewall\", arg[1])\nif rule_type == \"redirect\" and m:get(arg[1], \"target\") ~= \"SNAT\" then\n\trule_type = nil\nend\n\nif not rule_type then\n\tluci.http.redirect(m.redirect)\n\treturn\n\n--\n-- SNAT\n--\nelseif rule_type == \"redirect\" then\n\n\tlocal name = m:get(arg[1], \"name\") or m:get(arg[1], \"_name\")\n\tif not name or #name == 0 then\n\t\tname = translate(\"(Unnamed SNAT)\")\n\telse\n\t\tname = \"SNAT %s\" % name\n\tend\n\n\tm.title = \"%s - %s\" %{ translate(\"Firewall - Traffic Rules\"), luci.util.pcdata(name) }\n\n\tlocal wan_zone = nil\n\n\tm.uci:foreach(\"firewall\", \"zone\",\n\t\tfunction(s)\n\t\t\tlocal n = s.network or s.name\n\t\t\tif n then\n\t\t\t\tlocal i\n\t\t\t\tfor i in utl.imatch(n) do\n\t\t\t\t\tif i == \"wan\" then\n\t\t\t\t\t\twan_zone = s.name\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend)\n\n\ts = m:section(NamedSection, arg[1], \"redirect\", \"\")\n\ts.anonymous = true\n\ts.addremove = false\n\n\n\tft.opt_enabled(s, Button)\n\tft.opt_name(s, Value, translate(\"Name\"))\n\n\n\to = s:option(Value, \"proto\",\n\t\ttranslate(\"Protocol\"),\n\t\ttranslate(\"You may specify multiple by selecting \\\"-- custom --\\\" and \\\n\t\t           then entering protocols separated by space.\"))\n\n\to:value(\"all\", \"All protocols\")\n\to:value(\"tcp udp\", \"TCP+UDP\")\n\to:value(\"tcp\", \"TCP\")\n\to:value(\"udp\", \"UDP\")\n\to:value(\"icmp\", \"ICMP\")\n\n\tfunction o.cfgvalue(...)\n\t\tlocal v = Value.cfgvalue(...)\n\t\tif not v or v == \"tcpudp\" then\n\t\t\treturn \"tcp udp\"\n\t\tend\n\t\treturn v\n\tend\n\n\n\to = s:option(Value, \"src\", translate(\"Source zone\"))\n\to.nocreate = true\n\to.default = \"wan\"\n\to.template = \"cbi/firewall_zonelist\"\n\n\n\to = s:option(Value, \"src_ip\", translate(\"Source IP address\"))\n\to.rmempty = true\n\to.datatype = \"neg(ipmask4)\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"src_port\",\n\t\ttranslate(\"Source port\"),\n\t\ttranslate(\"Match incoming traffic originating from the given source \\\n\t\t\tport or port range on the client host.\"))\n\to.rmempty = true\n\to.datatype = \"neg(portrange)\"\n\to.placeholder = translate(\"any\")\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(Value, \"dest\", translate(\"Destination zone\"))\n\to.nocreate = true\n\to.default = \"lan\"\n\to.template = \"cbi/firewall_zonelist\"\n\n\n\to = s:option(Value, \"dest_ip\", translate(\"Destination IP address\"))\n\to.datatype = \"neg(ipmask4)\"\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"dest_port\",\n\t\ttranslate(\"Destination port\"),\n\t\ttranslate(\"Match forwarded traffic to the given destination port or \\\n\t\t\tport range.\"))\n\n\to.rmempty = true\n\to.placeholder = translate(\"any\")\n\to.datatype = \"neg(portrange)\"\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(Value, \"src_dip\",\n\t\ttranslate(\"SNAT IP address\"),\n\t\ttranslate(\"Rewrite matched traffic to the given address.\"))\n\to.rmempty = false\n\to.datatype = \"ip4addr\"\n\n\tfor k, v in ipairs(nw:get_interfaces()) do\n\t\tlocal a\n\t\tfor k, a in ipairs(v:ipaddrs()) do\n\t\t\to:value(a:host():string(), '%s (%s)' %{\n\t\t\t\ta:host():string(), v:shortname()\n\t\t\t})\n\t\tend\n\tend\n\n\n\to = s:option(Value, \"src_dport\", translate(\"SNAT port\"),\n\t\ttranslate(\"Rewrite matched traffic to the given source port. May be \\\n\t\t\tleft empty to only rewrite the IP address.\"))\n\to.datatype = \"portrange\"\n\to.rmempty = true\n\to.placeholder = translate('Do not rewrite')\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\ts:option(Value, \"extra\",\n\t\ttranslate(\"Extra arguments\"),\n\t\ttranslate(\"Passes additional arguments to iptables. Use with care!\"))\n\n\n--\n-- Rule\n--\nelse\n\tlocal name = m:get(arg[1], \"name\") or m:get(arg[1], \"_name\")\n\tif not name or #name == 0 then\n\t\tname = translate(\"(Unnamed Rule)\")\n\tend\n\n\tm.title = \"%s - %s\" %{ translate(\"Firewall - Traffic Rules\"), luci.util.pcdata(name) }\n\n\n\ts = m:section(NamedSection, arg[1], \"rule\", \"\")\n\ts.anonymous = true\n\ts.addremove = false\n\n\tft.opt_enabled(s, Button)\n\tft.opt_name(s, Value, translate(\"Name\"))\n\n\n\to = s:option(ListValue, \"family\", translate(\"Restrict to address family\"))\n\to.rmempty = true\n\to:value(\"\", translate(\"IPv4 and IPv6\"))\n\to:value(\"ipv4\", translate(\"IPv4 only\"))\n\to:value(\"ipv6\", translate(\"IPv6 only\"))\n\n\n\to = s:option(Value, \"proto\", translate(\"Protocol\"))\n\to:value(\"all\", translate(\"Any\"))\n\to:value(\"tcp udp\", \"TCP+UDP\")\n\to:value(\"tcp\", \"TCP\")\n\to:value(\"udp\", \"UDP\")\n\to:value(\"icmp\", \"ICMP\")\n\n\tfunction o.cfgvalue(...)\n\t\tlocal v = Value.cfgvalue(...)\n\t\tif not v or v == \"tcpudp\" then\n\t\t\treturn \"tcp udp\"\n\t\tend\n\t\treturn v\n\tend\n\n\n\to = s:option(DropDown, \"icmp_type\", translate(\"Match ICMP type\"))\n\to.multiple = true\n\to.display = 10\n\to.dropdown = 10\n\to.custom = true\n\to.cast = \"table\"\n\n\to:value(\"\", \"any\")\n\to:value(\"echo-reply\")\n\to:value(\"destination-unreachable\")\n\to:value(\"network-unreachable\")\n\to:value(\"host-unreachable\")\n\to:value(\"protocol-unreachable\")\n\to:value(\"port-unreachable\")\n\to:value(\"fragmentation-needed\")\n\to:value(\"source-route-failed\")\n\to:value(\"network-unknown\")\n\to:value(\"host-unknown\")\n\to:value(\"network-prohibited\")\n\to:value(\"host-prohibited\")\n\to:value(\"TOS-network-unreachable\")\n\to:value(\"TOS-host-unreachable\")\n\to:value(\"communication-prohibited\")\n\to:value(\"host-precedence-violation\")\n\to:value(\"precedence-cutoff\")\n\to:value(\"source-quench\")\n\to:value(\"redirect\")\n\to:value(\"network-redirect\")\n\to:value(\"host-redirect\")\n\to:value(\"TOS-network-redirect\")\n\to:value(\"TOS-host-redirect\")\n\to:value(\"echo-request\")\n\to:value(\"router-advertisement\")\n\to:value(\"router-solicitation\")\n\to:value(\"time-exceeded\")\n\to:value(\"ttl-zero-during-transit\")\n\to:value(\"ttl-zero-during-reassembly\")\n\to:value(\"parameter-problem\")\n\to:value(\"ip-header-bad\")\n\to:value(\"required-option-missing\")\n\to:value(\"timestamp-request\")\n\to:value(\"timestamp-reply\")\n\to:value(\"address-mask-request\")\n\to:value(\"address-mask-reply\")\n\n\to:depends(\"proto\", \"icmp\")\n\n\n\to = s:option(Value, \"src\", translate(\"Source zone\"))\n\to.nocreate = true\n\to.allowany = true\n\to.allowlocal = \"src\"\n\to.template = \"cbi/firewall_zonelist\"\n\n\n\to = s:option(Value, \"src_mac\", translate(\"Source MAC address\"))\n\to.datatype = \"list(macaddr)\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.mac_hints(function(mac, name)\n\t\to:value(mac, \"%s (%s)\" %{ mac, name })\n\tend)\n\n\n\to = s:option(Value, \"src_ip\", translate(\"Source address\"))\n\to.datatype = \"list(neg(ipmask))\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"src_port\", translate(\"Source port\"))\n\to.datatype = \"list(neg(portrange))\"\n\to.placeholder = translate(\"any\")\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(Value, \"dest_local\", translate(\"Output zone\"))\n\to.nocreate = true\n\to.allowany = true\n\to.template = \"cbi/firewall_zonelist\"\n\to.alias = \"dest\"\n\to:depends(\"src\", \"\")\n\n\to = s:option(Value, \"dest_remote\", translate(\"Destination zone\"))\n\to.nocreate = true\n\to.allowany = true\n\to.allowlocal = true\n\to.template = \"cbi/firewall_zonelist\"\n\to.alias = \"dest\"\n\to:depends({[\"src\"] = \"\", [\"!reverse\"] = true})\n\n\n\to = s:option(Value, \"dest_ip\", translate(\"Destination address\"))\n\to.datatype = \"list(neg(ipmask))\"\n\to.placeholder = translate(\"any\")\n\n\tluci.sys.net.ipv4_hints(function(ip, name)\n\t\to:value(ip, \"%s (%s)\" %{ ip, name })\n\tend)\n\n\n\to = s:option(Value, \"dest_port\", translate(\"Destination port\"))\n\to.datatype = \"list(neg(portrange))\"\n\to.placeholder = translate(\"any\")\n\n\to:depends(\"proto\", \"tcp\")\n\to:depends(\"proto\", \"udp\")\n\to:depends(\"proto\", \"tcp udp\")\n\to:depends(\"proto\", \"tcpudp\")\n\n\to = s:option(ListValue, \"target\", translate(\"Action\"))\n\to.default = \"ACCEPT\"\n\to:value(\"DROP\", translate(\"drop\"))\n\to:value(\"ACCEPT\", translate(\"accept\"))\n\to:value(\"REJECT\", translate(\"reject\"))\n\to:value(\"NOTRACK\", translate(\"don't track\"))\n\n\n\ts:option(Value, \"extra\",\n\t\ttranslate(\"Extra arguments\"),\n\t\ttranslate(\"Passes additional arguments to iptables. Use with care!\"))\nend\n\no = s:option(DropDown, \"weekdays\", translate(\"Week Days\"))\no.multiple = true\no.display = 5\no:value(\"Sun\", translate(\"Sunday\"))\no:value(\"Mon\", translate(\"Monday\"))\no:value(\"Tue\", translate(\"Tuesday\"))\no:value(\"Wed\", translate(\"Wednesday\"))\no:value(\"Thu\", translate(\"Thursday\"))\no:value(\"Fri\", translate(\"Friday\"))\no:value(\"Sat\", translate(\"Saturday\"))\n\no = s:option(DropDown, \"monthdays\", translate(\"Month Days\"))\no.multiple = true\no.display = 15\nfor i = 1,31 do\n\to:value(translate(i))\nend\n\no = s:option(Value, \"start_time\", translate(\"Start Time (hh:mm:ss)\"))\no.datatype = \"timehhmmss\"\no = s:option(Value, \"stop_time\", translate(\"Stop Time (hh:mm:ss)\"))\no.datatype = \"timehhmmss\"\no = s:option(Value, \"start_date\", translate(\"Start Date (yyyy-mm-dd)\"))\no.datatype = \"dateyyyymmdd\"\no = s:option(Value, \"stop_date\", translate(\"Stop Date (yyyy-mm-dd)\"))\no.datatype = \"dateyyyymmdd\"\n\no = s:option(Flag, \"utc_time\", translate(\"Time in UTC\"))\no.default = o.disabled\n\nreturn m\n"], "filenames": ["applications/luci-app-firewall/luasrc/model/cbi/firewall/rule-details.lua"], "buggy_code_start_loc": [193], "buggy_code_end_loc": [194], "fixing_code_start_loc": [193], "fixing_code_end_loc": [194], "type": "CWE-79", "message": "OpenWrt 18.06.4 allows XSS via these Name fields to the cgi-bin/luci/admin/network/firewall/rules URI: \"Open ports on router\" and \"New forward rule\" and \"New Source NAT\" (this can occur, for example, on a TP-Link Archer C7 device).", "other": {"cve": {"id": "CVE-2019-18992", "sourceIdentifier": "cve@mitre.org", "published": "2019-12-03T20:15:11.137", "lastModified": "2023-05-24T15:01:02.763", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenWrt 18.06.4 allows XSS via these Name fields to the cgi-bin/luci/admin/network/firewall/rules URI: \"Open ports on router\" and \"New forward rule\" and \"New Source NAT\" (this can occur, for example, on a TP-Link Archer C7 device)."}, {"lang": "es", "value": "OpenWrt versiones 18.06.4, permite un ataque de tipo XSS por medio de estos campos de Nombre en el URI cgi-bin/luci/admin/network/firewall/rules: \"Open ports on router\" y \"New forward rule\" y \"New Source NAT\" (esto puede ocurrir, por ejemplo, en un dispositivo TP-Link Archer C7)."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:openwrt:openwrt:18.06.4:*:*:*:*:*:*:*", "matchCriteriaId": "12476A0C-9F25-4BAC-8C37-6C40D4C9CD93"}]}]}], "references": [{"url": "https://github.com/openwrt/luci/commit/3961268597abba4c2b231790cb4aa7936e73cdf8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openwrt/luci/commit/3961268597abba4c2b231790cb4aa7936e73cdf8"}}