{"buggy_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later. \n *\n * create or update TestLink database \n * \n * @filesource  installNewDB.php\n * @package     TestLink\n * @author      Francisco Mancardi\n * @copyright   2008,2017 TestLink community\n * @copyright   inspired by Etomite Content Management System\n *              2003, 2004 Alexander Andrew Butter \n *\n **/\n\nrequire_once(\"../config.inc.php\");\nrequire_once( dirname(__FILE__). '/../lib/functions/database.class.php' );\nrequire_once(\"installUtils.php\");\nrequire_once(\"sqlParser.class.php\");\nrequire_once(\"../lib/functions/common.php\");\nrequire_once(\"../lib/functions/object.class.php\");\nrequire_once(\"../lib/functions/metastring.class.php\");\n\nrequire_once(\"../third_party/dBug/dBug.php\");\n\n// Better to avoid use of logger during installation\n// because we do not have control on what kind of logger (db, file) to create.\n// This produce the situation:dog eats dog, i.e.:\n// I do not have db created, but an error rise, then logger try to write on events table\n// but this table do not still yet !!.\nrequire_once(\"../lib/functions/logger.class.php\");\n\nif( !isset($_SESSION) )\n{ \n  session_start();\n}\n\n// catch DB input data\nforeach($_POST as $key => $val) {\n  $_SESSION[$key] = $val;\n}\n\n//assure that no timeout happens for large data\nset_time_limit(0);\n$tl_and_version = \"TestLink {$_SESSION['testlink_version']} \";\n\ndefine('LEN_PWD_TL_1_0_4',15);\ndefine('ADD_DIR',1);\n\n$migration_process = '';\n$sql_update_schema = array();\n$sql_update_data   = array();\n\n// get db info from session\n$san = '/[^A-Za-z0-9\\-]/';\n$db_name = trim($_SESSION['databasename']);\n$db_name = preg_replace($san,'',$db_name);\n\n$db_table_prefix = trim($_SESSION['tableprefix']);\n$db_table_prefix = preg_replace($san,'',$db_table_prefix);\n\n$db_server = trim($_SESSION['databasehost']);\n$db_server = preg_replace($san,'',$db_server);\n\n$db_admin_name = trim($_SESSION['databaseloginname']);\n$db_admin_name = preg_replace($san,'',$db_admin_name);\n\n$db_admin_pass = trim($_SESSION['databaseloginpassword']);\n$db_admin_pass = preg_replace($san,'',$db_admin_pass);\n\n$db_type = trim($_SESSION['databasetype']);\n$db_type = preg_replace($san,'',$db_type);\n\n$tl_db_login = trim($_SESSION['tl_loginname']);\n$tl_db_login = preg_replace($san,'',$tl_db_login);\n\n$tl_db_passwd = trim($_SESSION['tl_loginpassword']);\n$tl_db_passwd = preg_replace($san,'',$tl_db_passwd);\n\n\n\n$sql_create_schema = array();\n$sql_create_schema[] = \"sql/{$db_type}/testlink_create_tables.sql\";\n$a_sql_schema = array();\n$a_sql_schema[] = $sql_create_schema;\n\n$sql_default_data = array();\n$sql_default_data [] = \"sql/{$db_type}/testlink_create_default_data.sql\";\n$a_sql_data = array();\n$a_sql_data[]   = $sql_default_data;\n\n\nglobal $g_tlLogger;\n$g_tlLogger->disableLogging('db');\n$inst_type_verbose=\" Installation \";\n\n$install = $_SESSION['isNew'];\n$upgrade = !$install;\nif ($upgrade)\n{\n  $inst_type_verbose=\" Upgrade \";\n  $a_sql_data   = array();\n}\n$the_title = $_SESSION['title'];\n?>\n\n\n<!DOCTYPE html>\n<head>\n  <title><?php echo $the_title; ?></title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n        <style type=\"text/css\">\n             @import url('./css/style.css');\n       \n     ul li { margin-top: 7px; }\n        </style>\n</head> \n\n<body>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"mainTable\">\n  <tr class=\"fancyRow\">\n    <td><span class=\"headers\">&nbsp;<img src=\"./img/dot.gif\" alt=\"\" style=\"margin-top: 1px;\" />&nbsp;<?php echo $tl_and_version?></span></td>\n    <td align=\"right\"><span class=\"headers\"><?php echo $the_title ?> </span></td>\n  </tr>\n  <tr class=\"fancyRow2\">\n    <td colspan=\"2\" class=\"border-top-bottom smallText\" align=\"right\">&nbsp;</td>\n  </tr>\n  <tr align=\"left\" valign=\"top\">\n    <td colspan=\"2\"><table width=\"100%\"  border=\"0\" cellspacing=\"0\" cellpadding=\"1\">\n      <tr align=\"left\" valign=\"top\">\n        <td class=\"pad\" id=\"content\" colspan=\"2\">\n\n<?php\n$check = check_db_loaded_extension($db_type);\nif( $check['errors'] > 0 )\n{\n   echo $check['msg'];\n   close_html_and_exit();\n}\n?>\nTestLink setup will now attempt to setup the database:<br />\n\n<?php\n\n$update_pwd=0;\n$create = false;\n$errors = 0;\n$table_prefix ='';\n$adminname = '';\n$adminpass = '';\n\n\n// do some database checks\necho \"<br /><b>Creating connection to Database Server:</b>\";\n\n// ------------------------------------------------------------------------------------------------\n// Connect to DB Server without choosing an specific database\n$db = new database($db_type);\ndefine('NO_DSN',FALSE);\n//var_dump($db);\n//die();\n@$conn_result = $db->connect(NO_DSN,$db_server, $db_admin_name, $db_admin_pass); \n\nif( $conn_result['status'] == 0 ) \n{\n  echo '<span class=\"notok\">Failed!</span><p />Please check the database login details and try again.';\n  echo '<br>Database Error Message: ' . $db->error_msg() . \"<br>\";\n  close_html_and_exit();\n} \nelse \n{\n  echo \"<span class='ok'>OK!</span><p />\";\n}\n$db->close();\n$db=null;\n\n\n// --------------------------------------------------------------------------------------\n// Connect to the Database (if Succesful -> database exists)\n$db = new database($db_type);\n@$conn_result = $db->connect(NO_DSN,$db_server, $db_admin_name, $db_admin_pass,$db_name); \n\nif( $conn_result['status'] == 0 ) \n{\n  $db->close();\n  echo \"<br>Database $db_name does not exist. <br>\";\n  \n  if( $upgrade )\n  {\n    echo \"Can't Upgrade\";\n    close_html_and_exit();     \n    \n    $errors += 1;\n  }\n  else\n  {\n    echo \"Will attempt to create:\";\n    $create = true;\n  } \n} \nelse \n{\n  echo \"<br />Connecting to database `\" . $db_name . \"`:\";\n  echo \"<span class='ok'>OK!</span>\";\n}\n// ------------------------------------------------------------------------------------------------\n\n\n// ------------------------------------------------------------------------------------------------\nif($create) \n{\n  // check database name for invalid characters (now only for MySQL)\n  $db->close();\n  $db = null;\n  \n  $db = New database($db_type);\n  $conn_result=$db->connect(NO_DSN,$db_server, $db_admin_name, $db_admin_pass);\n  echo \"<br /><b>Creating database `\" . $db_name . \"`</b>:\";\n  \n  // 20060214 - franciscom - from MySQL Manual\n  // 9.2. Database, Table, Index, Column, and Alias Names\n  //\n  // Identifier            : Database\n  // Maximum Length (bytes): 64\n  // Allowed Characters    : Any character that is allowed in a directory name, except '/', '\\', or '.'  \n  // \n  // An identifier may be quoted or unquoted. \n  // If an identifier is a reserved word or contains special characters, you must quote it whenever you refer to it. \n  // For a list of reserved words, see Section 9.6, \u00ef\u00bf\u00bdTreatment of Reserved Words in MySQL\u00ef\u00bf\u00bd. \n  // Special characters are those outside the set of alphanumeric characters from the current character set, \n  // '_', and '$'. \n  // The identifier quote character is the backtick ('`'): \n  //\n  //\n  // Postgres uses as identifier quote character \" (double quotes):\n  $sql_create_db =$db->build_sql_create_db($db_name);\n  \n  if(!$db->exec_query($sql_create_db)) \n  {\n    echo \"<span class='notok'>Failed!</span></b> - Could not create database: $db! \" .\n    $db->error_msg();\n    $errors += 1;\n    \n    echo \"<p> TestLink setup could not create the database, \" .\n    \"and no existing database with the same name was found. <br />\" .\n    \"Please create a database by different way (e.g. from command line),\" . \n    \" or with different DB root account. Run setup again then.\";\n    close_html_and_exit();     \n  } \n  else \n  {\n    echo \"<span class='ok'>OK!</span>\";\n  }\n}\n\n// in upgrade mode we detect the lenght of user password field\n// to identify a version with uncrypted passwords\n$tables = tlObject::getDBTables();\n$my_ado=$db->get_dbmgr_object();\nif ($upgrade)\n{\n  $user_table=$my_ado->MetaTables('TABLES',false,'user');\n  if( count($user_table) == 1 )\n  {\n    $the_cols=$my_ado->MetaColumns('user');\n    $pwd_field_len =$the_cols['PASSWORD']->max_length;\n    if ( $pwd_field_len == LEN_PWD_TL_1_0_4 )\n    {\n      $update_pwd=1;\n      echo \"<p>You are trying to upgrade from a pre-release of TestLink 1.5\" .\n      \"<br />this kind of upgrade is supported by this script. Use upgrade to supported version \" .\n      \"at first.</p>\";  \n      close_html_and_exit();          \n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n  \n  $a_sql_upd_dir=array();\n  $a_sql_data_dir=array();\n  \n  $the_version_table=$my_ado->MetaTables('TABLES',false,$db_table_prefix . 'db_version');\n  if( count($the_version_table) == 0 )\n  {\n    echo \"<p>You are trying to upgrade from a pre-release of TestLink 1.7\" .\n    \"<br />this kind of upgrade is supported by this script. Use upgrade to supported version \" .\n    \"at first.</p>\";  \n    close_html_and_exit();          \n  }\n  else\n  {\n    $migration_functions_file = '';\n        $migration_process = ''; \n\n    // try to know what db version is installed\n    // check if we need to use prefix but for some reason tlObjectWithDB::getDBTables\n    // have not returned prefix.\n    //\n    $dbVersionTable = $tables['db_version'];\n    if($dbVersionTable == 'db_version' &&  trim($db_table_prefix) != '')\n    {\n      $dbVersionTable = $db_table_prefix . $dbVersionTable;\n    }\n    $sql = \"SELECT * FROM {$dbVersionTable} ORDER BY upgrade_ts DESC\";\n    $res = $db->exec_query($sql);  \n    if (!$res)\n    {\n      echo \"Database ERROR:\" . $db->error_msg();\n      exit(); \n    }\n    \n    $myrow = $db->fetch_array($res);\n    $schema_version=trim($myrow['version']);\n    \n    switch ($schema_version)\n    {\n      // case 'DB 1.1':\n      //  $a_sql_upd_dir[] = \"sql/alter_tables/1.8/{$db_type}/DB.1.2/\";       \n      //  $a_sql_upd_dir[] = \"sql/alter_tables/1.9/{$db_type}/DB.1.3/\";       \n            //     $migration_process = 'migrate_18_to_19'; \n            //     $migration_functions_file = '.\\migration\\migrate_18\\migrate_18_to_19.php';\n      //  break;\n        \n      case 'DB 1.2':\n        $a_sql_upd_dir[] = \"sql/alter_tables/1.9/{$db_type}/DB.1.3/step1/\";       \n        $a_sql_data_dir[] = \"sql/alter_tables/1.9/{$db_type}/DB.1.3/stepZ/\";\n                \n                $migration_process = 'migrate_18_to_19'; \n                $migration_functions_file = './migration/migrate_18/migrate_18_to_19.php';\n        break;\n        \n      case 'DB 1.3':\n        echo \"<p>Your DB Schema {$schema_version} NEED TO BE upgraded, but you have to do \";\n        echo \" this MANUALLY using a SQL client and scripts you will find on \";\n        echo \" directory install/sql/alter_tables/1.9.1 \";\n        echo \"<br /></p>\";\n        close_html_and_exit();          \n        break;\n\n      case 'DB 1.4':\n        echo \"<p>Your DB Schema {$schema_version} NEED TO BE upgraded, but you have to do \";\n        echo \" this MANUALLY using a SQL client and scripts you will find on \";\n        echo \" directory install/sql/alter_tables/1.9.4 \";\n        echo \"<br /></p>\";\n        close_html_and_exit();          \n        break;\n\n      case 'DB 1.5':\n        echo \"<p>Your DB Schema {$schema_version} is the last available, then you don't need to do any upgrade.\";\n        echo \"<br />Script is finished.</p>\";\n        close_html_and_exit();          \n        break;\n        \n      default:\n        if( strlen($schema_version) == 0 )\n        {\n          echo \"<p class='notok'>Information of DB schema version is missing. Don't know how to upgrade.</p>\";\n        }\n        else\n        {\n          echo \"<p class='notok'>This script doesn't recognize your schema version: \" . $schema_version . \"</p>\";\n        }\n        echo \"<p>Upgrade is not possible. Check your input data (Go back in page history).</p>\";\n        close_html_and_exit();          \n        break;  \n    }\n  }\n  \n  $a_sql_schema = getDirSqlFiles($a_sql_upd_dir,ADD_DIR);\n  $a_sql_data = getDirSqlFiles($a_sql_data_dir,ADD_DIR);\n}\n\n\n// ------------------------------------------------------------------------------------------------\n// Now proceed with user checks and user creation (if needed)\n//\n// Added support for different types of architecture/installations:\n// webserver and dbserver on same machines      => user will be created as user\n// webserver and dbserver on DIFFERENT machines => user must be created as user@webserver\n//  \n// if @ in tl_db_login (username) -> get the hostname using splitting, and use it\n//                                   during user creation on db. \n$db->close();\n$db=null;\n$user_host = explode('@',$tl_db_login);\n$msg = create_user_for_db($db_type,$db_name, $db_server, $db_admin_name, $db_admin_pass, \n                          $tl_db_login, $tl_db_passwd);\n  \necho \"<br /><b>Creating Testlink DB user `\" . $user_host[0] . \"`</b>:\";\nif ( strpos($msg,'ok -') === FALSE )\n{\n  echo \"<span class='notok'>Failed!</span></b> - Could not create user: $tl_db_login!\";\n  $errors += 1;\n}\nelse\n{\n  echo \"<span class='ok'>OK! ($msg) </span>\";\n}\n\n\n// ------------------------------------------------------------------------------------------------\n// Schema Operations (CREATE, ALTER, ecc).\n// Important: \n//           Postgres: do it as tl_login NOT as db_admin\n//           MySQL   : do it as db_admin NOT as tl_login \nif( !is_null($db) )\n{\n  $db->close();\n  $db=null;\n}\n\n$db = new database($db_type);\nswitch($db_type)\n{\n    case 'mssql':\n    @$conn_result = $db->connect(NO_DSN, $db_server, $db_admin_name, $db_admin_pass, $db_name); \n    break;\n\n    case 'mysql':\n    @$conn_result = $db->connect(NO_DSN, $db_server, $db_admin_name, $db_admin_pass, $db_name); \n    break;\n        \n    case 'postgres':\n    @$conn_result = $db->connect(NO_DSN, $db_server, $tl_db_login, $tl_db_passwd, $db_name); \n    break;\n}\n// --------------------------------------------------------------------------------------------\nif( $install && $conn_result['status'] != 0 )\n{\n  drop_views($db,$db_table_prefix,$db_type);\n  drop_tables($db,$db_table_prefix,$db_type);\n}  \n\n\n// -------------------------------------------------------------------------------\n$sqlParser = new SqlParser($db,$db_type,$db_table_prefix);\nforeach($a_sql_schema as $sql_schema)\n{\n  foreach ($sql_schema as $sql_file) \n  {\n    echo \"<br />Processing:\" . $sql_file;\n    $sqlParser->process($sql_file);\n  }\n  echo \"<br />\";\n}\n\n// Now data migration must be done if needed\nif( $migration_process != '' )\n{\n  require_once($migration_functions_file);\n  $migration_process($db,$tables);\n}\n\n// -------------------------------------------------\n// Data Operations\nif ( count($a_sql_data > 0) )\n{\n  foreach($a_sql_data as $sql_data )\n  {\n    if ( count($sql_data > 0) )\n    {\n      foreach ($sql_data as $sql_file) \n      {\n        $sqlParser->process($sql_file);\n      }\n    }\n  }  \n}\n\n\n// -------------------------------------------------\nif ($update_pwd)\n{\n  echo \"Password Conversion ...\";\n  // @author Francisco Mancardi - 20050918\n  // Found error upgrading from 1.0.4 to 1.6 on RH\n  // due to case sensitive on table name. (USER)\n  \n  $user_pwd = \"UPDATE user SET password=MD5(password)\";\n  $result = $db->exec_query($user_pwd);\n}\n\n\nif($sqlParser->install_failed==true) \n{\n  echo \"<span class='notok'>Failed!</span></b> - {$inst_type_verbose} failed!\";\n  $errors += 1;\n  \n  echo \"<p />\" .\n  \"TestLink setup couldn't install the default site into the selected database. \" .\n  \"The last error to occur was <i>\" . $sqlParser->sql_errors[count($sqlParser->sql_errors)-1][\"error\"] .\n  '</i> during the execution of SQL statement <span class=\"mono\">' .\n  strip_tags($sqlParser->sql_errors[count($sqlParser->sql_errors)-1][\"sql\"]). \"</span>\";\n  \n  close_html_and_exit();     \n} \nelse \n{\n  echo \"<span class='ok'>OK!</span>\";\n}\n\n// -----------------------------------------------------------------------------\necho \"<br />Writing configuration file:\";\n$data['db_host']=$db_server;\n$data['db_login'] = $user_host[0];\n$data['db_passwd'] = $tl_db_passwd;\n$data['db_name'] = $db_name;\n$data['db_type'] = $db_type;\n$data['db_table_prefix'] = $db_table_prefix;\n\n\n$cfg_file = \"../config_db.inc.php\";\n$yy = write_config_db($cfg_file,$data);\n// -----------------------------------------------------------------------------\n\n\nif(strcasecmp('ko', $yy['status']) == 0)\n{\n  echo \"<span class='notok'>Failed!</span></b>\";\n  $errors += 1;\n  \n  echo \"<p />\" .\n  \"TestLink couldn't write the config file. Please copy the following into the \" .\n  '<span class=\"mono\"> ' . $cfg_file . '</span> file:<br />' .\n  '<textarea style=\"width:400px; height:160px;\">' . $yy['cfg_string'] . \"</textarea>\";\n  \n  echo \"Once that's been done, you can log into TestLink by pointing your browser at your TestLink site.\";\n  \n  close_html_and_exit();     \n} \nelse \n{\n  echo \"<span class='ok'>OK!</span>\";\n}\n\n\nmanual_operations($db_type);\n\nimportant_reminder();\n\n// When testlink is updated do not show login data admin/admin \n// as they might not exist\n$successfull_message = '</b><p /><br><div><span class=\"headers\">' . \"{$inst_type_verbose} was successful!\" . '</span><br>' .\n                     'You can now log in to <a href=\"../index.php\"> Testlink';\nif($create) \n{\n  $successfull_message .= ' (using login name:admin / password:admin - Please Click Me!)';\n}\n$successfull_message .= '</a>.</div>';\n\necho $successfull_message;\n\n$db->close();\nclose_html_and_exit();\n\n\n\n/**\n *\n *\n */\nfunction manual_operations($dbType)\n{\n  echo '<br><br><span class=\"headers\">';\n  echo 'IMPORTANT NOTICE - IMPORTANT NOTICE - IMPORTANT NOTICE - IMPORTANT NOTICE';\n  echo '</span>';\n\n  echo '<br><span class=\"headers\">';\n  echo 'YOU NEED TO RUN MANUALLY Following Script on your DB CLIENT Application';\n  echo '</span><br>';\n  echo dirname(__FILE__) . '/sql/'. $dbType . '/testlink_create_udf0.sql';\n  echo '<br> THANKS A LOT </b>';\n}\n\n// -----------------------------------------------------------\nfunction write_config_db($filename, $data)\n{\n  $ret = array('status'     => 'ok', 'cfg_string' => '');\n  \n  $db_host  = $data['db_host'];\n  $db_login = $data['db_login'];\n  // if @ present in db_login, explode an take user name WITHOUT HOST\n  $user_host = explode('@',$db_login);\n  \n  if (count($user_host) > 1 )\n  {\n    $db_login = $user_host[0];    \n  }\n  \n  $db_passwd = $data['db_passwd'];\n  $db_name = $data['db_name'];\n  $db_type = $data['db_type'];\n  $db_table_prefix = $data['db_table_prefix'];\n  \n  // write config.inc.php\n  $configString = \"<?php\" . \"\\n\" . \"// Automatically Generated by TestLink Installer - \" . date(DATE_RFC822) . \"\\n\";\n  $configString .= \"define('DB_TYPE', '\" . $db_type . \"');\\n\";\n  $configString .= \"define('DB_USER', '\" . $db_login . \"');\\n\";\n  $configString .= \"define('DB_PASS', '\" . $db_passwd . \"');\\n\";\n  $configString .= \"define('DB_HOST', '\" . $db_host . \"');\\n\";\n  $configString .= \"define('DB_NAME', '\" . $db_name . \"');\\n\";\n  $configString .= \"define('DB_TABLE_PREFIX', '\" . $db_table_prefix . \"');\\n\";\n  //\n  // PHP CLOSING TAG Ommited, following several internet documents indications\n  // example:\n  // http://ellislab.com/codeigniter/user-guide/general/styleguide.html#php_closing_tag\n  \n  if (@!$handle = fopen($filename, 'w')) \n  {\n    $ret['status'] = 'ko';\n  }\n  \n  // Write $somecontent to our opened file.\n  if (@fwrite($handle, $configString) === FALSE) \n  {\n    $ret['status'] = 'ko';\n  }\n  @fclose($handle); \n  \n  $ret['cfg_string'] = $configString;\n  \n  return($ret);\n}\n\n\n\n// Drop tables to allow re-run Installation\nfunction drop_tables(&$dbHandler,$dbTablePrefix,$dbType)\n{\n  // From 1.9 and up we have detail of tables.\n  $schema = tlObjectWithDB::getDBTables();\n  \n  // tables present on target db\n  $my_ado=$dbHandler->get_dbmgr_object();\n  $tablesOnDB =$my_ado->MetaTables('TABLES');  \n  if( count($tablesOnDB) > 0 && isset($tablesOnDB[0]))\n  {\n    echo \"<br /><b>Dropping all TL existent tables:</b><br />\";\n    foreach($schema as $tablePlainName => $tableFullName)\n    {\n      $targetTable = $dbTablePrefix . $tablePlainName;\n      if( in_array($targetTable,$tablesOnDB) )\n      {\n        // Need to add option (CASCADE ?) to delete dependent object\n        echo \"Droping $targetTable\" . \"<br />\";\n        $sql=\"DROP TABLE $targetTable\";\n        $sql .= (($dbType != 'mssql') && ($dbType != 'sqlsrv')) ? \" CASCADE \" : ' ';\n        $dbHandler->exec_query($sql);\n      }   \n    }\n    echo \"<span class='ok'>Done!</span>\";\n  }\n}\n\nfunction drop_views(&$dbHandler,$dbItemPrefix,$dbType)\n{\n  $schema = tlObjectWithDB::getDBViews();\n  \n  // views present on target db\n  $my_ado = $dbHandler->get_dbmgr_object();\n  $itemsOnDB =$my_ado->MetaTables('VIEWS');  \n  if( count($itemsOnDB) > 0 && isset($itemsOnDB[0]))\n  {\n    echo \"<br /><b>Dropping all TL existent views:</b><br />\";\n    foreach($schema as $itemPlainName => $itemFullName)\n    {\n      $target = $dbItemPrefix . $itemPlainName;\n      if( in_array($target,$itemsOnDB) )\n      {\n        // Need to add option (CASCADE ?) to delete dependent object\n        echo \"Droping $target\" . \"<br />\";\n        $sql=\"DROP VIEW $target\";\n        $sql .= (($dbType != 'mssql') && ($dbType != 'sqlsrv')) ? \" CASCADE \" : ' ';\n        $dbHandler->exec_query($sql);\n      }   \n    }\n    echo \"<span class='ok'>Done!</span>\";\n  }\n}\n"], "fixing_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later. \n *\n * create or update TestLink database \n * \n * @filesource  installNewDB.php\n * @package     TestLink\n * @author      Francisco Mancardi\n * @copyright   2008,2017 TestLink community\n * @copyright   inspired by Etomite Content Management System\n *              2003, 2004 Alexander Andrew Butter \n *\n **/\n\nrequire_once(\"../config.inc.php\");\nrequire_once( dirname(__FILE__). '/../lib/functions/database.class.php' );\nrequire_once(\"installUtils.php\");\nrequire_once(\"sqlParser.class.php\");\nrequire_once(\"../lib/functions/common.php\");\nrequire_once(\"../lib/functions/object.class.php\");\nrequire_once(\"../lib/functions/metastring.class.php\");\n\nrequire_once(\"../third_party/dBug/dBug.php\");\n\n// Better to avoid use of logger during installation\n// because we do not have control on what kind of logger (db, file) to create.\n// This produce the situation:dog eats dog, i.e.:\n// I do not have db created, but an error rise, then logger try to write on events table\n// but this table do not still yet !!.\nrequire_once(\"../lib/functions/logger.class.php\");\n\nif( !isset($_SESSION) )\n{ \n  session_start();\n}\n\n// catch DB input data\nforeach($_POST as $key => $val) {\n  $_SESSION[$key] = $val;\n}\n\n//assure that no timeout happens for large data\nset_time_limit(0);\n$tl_and_version = \"TestLink {$_SESSION['testlink_version']} \";\n\ndefine('LEN_PWD_TL_1_0_4',15);\ndefine('ADD_DIR',1);\n\n$migration_process = '';\n$sql_update_schema = array();\n$sql_update_data   = array();\n\n// get db info from session\n$san = '/[^A-Za-z0-9\\-]/';\n$db_name = trim($_SESSION['databasename']);\n$db_name = preg_replace($san,'',$db_name);\n\n$db_table_prefix = trim($_SESSION['tableprefix']);\n$db_table_prefix = preg_replace($san,'',$db_table_prefix);\n\n$db_server = trim($_SESSION['databasehost']);\n$db_server = preg_replace($san,'',$db_server);\n\n$db_admin_pass = trim($_SESSION['databaseloginpassword']);\n$db_admin_pass = preg_replace($san,'',$db_admin_pass);\n\n$db_type = trim($_SESSION['databasetype']);\n$db_type = preg_replace($san,'',$db_type);\n\n$tl_db_passwd = trim($_SESSION['tl_loginpassword']);\n$tl_db_passwd = preg_replace($san,'',$tl_db_passwd);\n\n\n// will limit length to avoi some kind of injection\n// Choice: 32 \n$tl_db_login = trim($_SESSION['tl_loginname']);\n$tl_db_login = substr(preg_replace($san,'',$tl_db_login),0,32);\n\n$db_admin_name = trim($_SESSION['databaseloginname']);\n$db_admin_name = substr(preg_replace($san,'',$db_admin_name),0,32);\n\n\n\n$sql_create_schema = array();\n$sql_create_schema[] = \"sql/{$db_type}/testlink_create_tables.sql\";\n$a_sql_schema = array();\n$a_sql_schema[] = $sql_create_schema;\n\n$sql_default_data = array();\n$sql_default_data [] = \"sql/{$db_type}/testlink_create_default_data.sql\";\n$a_sql_data = array();\n$a_sql_data[]   = $sql_default_data;\n\n\nglobal $g_tlLogger;\n$g_tlLogger->disableLogging('db');\n$inst_type_verbose=\" Installation \";\n\n$install = $_SESSION['isNew'];\n$upgrade = !$install;\nif ($upgrade)\n{\n  $inst_type_verbose=\" Upgrade \";\n  $a_sql_data   = array();\n}\n$the_title = $_SESSION['title'];\n?>\n\n\n<!DOCTYPE html>\n<head>\n  <title><?php echo $the_title; ?></title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n        <style type=\"text/css\">\n             @import url('./css/style.css');\n       \n     ul li { margin-top: 7px; }\n        </style>\n</head> \n\n<body>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"mainTable\">\n  <tr class=\"fancyRow\">\n    <td><span class=\"headers\">&nbsp;<img src=\"./img/dot.gif\" alt=\"\" style=\"margin-top: 1px;\" />&nbsp;<?php echo $tl_and_version?></span></td>\n    <td align=\"right\"><span class=\"headers\"><?php echo $the_title ?> </span></td>\n  </tr>\n  <tr class=\"fancyRow2\">\n    <td colspan=\"2\" class=\"border-top-bottom smallText\" align=\"right\">&nbsp;</td>\n  </tr>\n  <tr align=\"left\" valign=\"top\">\n    <td colspan=\"2\"><table width=\"100%\"  border=\"0\" cellspacing=\"0\" cellpadding=\"1\">\n      <tr align=\"left\" valign=\"top\">\n        <td class=\"pad\" id=\"content\" colspan=\"2\">\n\n<?php\n$check = check_db_loaded_extension($db_type);\nif( $check['errors'] > 0 )\n{\n   echo $check['msg'];\n   close_html_and_exit();\n}\n?>\nTestLink setup will now attempt to setup the database:<br />\n\n<?php\n\n$update_pwd=0;\n$create = false;\n$errors = 0;\n$table_prefix ='';\n$adminname = '';\n$adminpass = '';\n\n\n// do some database checks\necho \"<br /><b>Creating connection to Database Server:</b>\";\n\n// ------------------------------------------------------------------------------------------------\n// Connect to DB Server without choosing an specific database\n$db = new database($db_type);\ndefine('NO_DSN',FALSE);\n//var_dump($db);\n//die();\n@$conn_result = $db->connect(NO_DSN,$db_server, $db_admin_name, $db_admin_pass); \n\nif( $conn_result['status'] == 0 ) \n{\n  echo '<span class=\"notok\">Failed!</span><p />Please check the database login details and try again.';\n  echo '<br>Database Error Message: ' . $db->error_msg() . \"<br>\";\n  close_html_and_exit();\n} \nelse \n{\n  echo \"<span class='ok'>OK!</span><p />\";\n}\n$db->close();\n$db=null;\n\n\n// --------------------------------------------------------------------------------------\n// Connect to the Database (if Succesful -> database exists)\n$db = new database($db_type);\n@$conn_result = $db->connect(NO_DSN,$db_server, $db_admin_name, $db_admin_pass,$db_name); \n\nif( $conn_result['status'] == 0 ) \n{\n  $db->close();\n  echo \"<br>Database $db_name does not exist. <br>\";\n  \n  if( $upgrade )\n  {\n    echo \"Can't Upgrade\";\n    close_html_and_exit();     \n    \n    $errors += 1;\n  }\n  else\n  {\n    echo \"Will attempt to create:\";\n    $create = true;\n  } \n} \nelse \n{\n  echo \"<br />Connecting to database `\" . $db_name . \"`:\";\n  echo \"<span class='ok'>OK!</span>\";\n}\n// ------------------------------------------------------------------------------------------------\n\n\n// ------------------------------------------------------------------------------------------------\nif($create) \n{\n  // check database name for invalid characters (now only for MySQL)\n  $db->close();\n  $db = null;\n  \n  $db = New database($db_type);\n  $conn_result=$db->connect(NO_DSN,$db_server, $db_admin_name, $db_admin_pass);\n  echo \"<br /><b>Creating database `\" . $db_name . \"`</b>:\";\n  \n  // 20060214 - franciscom - from MySQL Manual\n  // 9.2. Database, Table, Index, Column, and Alias Names\n  //\n  // Identifier            : Database\n  // Maximum Length (bytes): 64\n  // Allowed Characters    : Any character that is allowed in a directory name, except '/', '\\', or '.'  \n  // \n  // An identifier may be quoted or unquoted. \n  // If an identifier is a reserved word or contains special characters, you must quote it whenever you refer to it. \n  // For a list of reserved words, see Section 9.6, \u00ef\u00bf\u00bdTreatment of Reserved Words in MySQL\u00ef\u00bf\u00bd. \n  // Special characters are those outside the set of alphanumeric characters from the current character set, \n  // '_', and '$'. \n  // The identifier quote character is the backtick ('`'): \n  //\n  //\n  // Postgres uses as identifier quote character \" (double quotes):\n  $sql_create_db =$db->build_sql_create_db($db_name);\n  \n  if(!$db->exec_query($sql_create_db)) \n  {\n    echo \"<span class='notok'>Failed!</span></b> - Could not create database: $db! \" .\n    $db->error_msg();\n    $errors += 1;\n    \n    echo \"<p> TestLink setup could not create the database, \" .\n    \"and no existing database with the same name was found. <br />\" .\n    \"Please create a database by different way (e.g. from command line),\" . \n    \" or with different DB root account. Run setup again then.\";\n    close_html_and_exit();     \n  } \n  else \n  {\n    echo \"<span class='ok'>OK!</span>\";\n  }\n}\n\n// in upgrade mode we detect the lenght of user password field\n// to identify a version with uncrypted passwords\n$tables = tlObject::getDBTables();\n$my_ado=$db->get_dbmgr_object();\nif ($upgrade)\n{\n  $user_table=$my_ado->MetaTables('TABLES',false,'user');\n  if( count($user_table) == 1 )\n  {\n    $the_cols=$my_ado->MetaColumns('user');\n    $pwd_field_len =$the_cols['PASSWORD']->max_length;\n    if ( $pwd_field_len == LEN_PWD_TL_1_0_4 )\n    {\n      $update_pwd=1;\n      echo \"<p>You are trying to upgrade from a pre-release of TestLink 1.5\" .\n      \"<br />this kind of upgrade is supported by this script. Use upgrade to supported version \" .\n      \"at first.</p>\";  \n      close_html_and_exit();          \n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n  \n  $a_sql_upd_dir=array();\n  $a_sql_data_dir=array();\n  \n  $the_version_table=$my_ado->MetaTables('TABLES',false,$db_table_prefix . 'db_version');\n  if( count($the_version_table) == 0 )\n  {\n    echo \"<p>You are trying to upgrade from a pre-release of TestLink 1.7\" .\n    \"<br />this kind of upgrade is supported by this script. Use upgrade to supported version \" .\n    \"at first.</p>\";  \n    close_html_and_exit();          \n  }\n  else\n  {\n    $migration_functions_file = '';\n        $migration_process = ''; \n\n    // try to know what db version is installed\n    // check if we need to use prefix but for some reason tlObjectWithDB::getDBTables\n    // have not returned prefix.\n    //\n    $dbVersionTable = $tables['db_version'];\n    if($dbVersionTable == 'db_version' &&  trim($db_table_prefix) != '')\n    {\n      $dbVersionTable = $db_table_prefix . $dbVersionTable;\n    }\n    $sql = \"SELECT * FROM {$dbVersionTable} ORDER BY upgrade_ts DESC\";\n    $res = $db->exec_query($sql);  \n    if (!$res)\n    {\n      echo \"Database ERROR:\" . $db->error_msg();\n      exit(); \n    }\n    \n    $myrow = $db->fetch_array($res);\n    $schema_version=trim($myrow['version']);\n    \n    switch ($schema_version)\n    {\n      // case 'DB 1.1':\n      //  $a_sql_upd_dir[] = \"sql/alter_tables/1.8/{$db_type}/DB.1.2/\";       \n      //  $a_sql_upd_dir[] = \"sql/alter_tables/1.9/{$db_type}/DB.1.3/\";       \n            //     $migration_process = 'migrate_18_to_19'; \n            //     $migration_functions_file = '.\\migration\\migrate_18\\migrate_18_to_19.php';\n      //  break;\n        \n      case 'DB 1.2':\n        $a_sql_upd_dir[] = \"sql/alter_tables/1.9/{$db_type}/DB.1.3/step1/\";       \n        $a_sql_data_dir[] = \"sql/alter_tables/1.9/{$db_type}/DB.1.3/stepZ/\";\n                \n                $migration_process = 'migrate_18_to_19'; \n                $migration_functions_file = './migration/migrate_18/migrate_18_to_19.php';\n        break;\n        \n      case 'DB 1.3':\n        echo \"<p>Your DB Schema {$schema_version} NEED TO BE upgraded, but you have to do \";\n        echo \" this MANUALLY using a SQL client and scripts you will find on \";\n        echo \" directory install/sql/alter_tables/1.9.1 \";\n        echo \"<br /></p>\";\n        close_html_and_exit();          \n        break;\n\n      case 'DB 1.4':\n        echo \"<p>Your DB Schema {$schema_version} NEED TO BE upgraded, but you have to do \";\n        echo \" this MANUALLY using a SQL client and scripts you will find on \";\n        echo \" directory install/sql/alter_tables/1.9.4 \";\n        echo \"<br /></p>\";\n        close_html_and_exit();          \n        break;\n\n      case 'DB 1.5':\n        echo \"<p>Your DB Schema {$schema_version} is the last available, then you don't need to do any upgrade.\";\n        echo \"<br />Script is finished.</p>\";\n        close_html_and_exit();          \n        break;\n        \n      default:\n        if( strlen($schema_version) == 0 )\n        {\n          echo \"<p class='notok'>Information of DB schema version is missing. Don't know how to upgrade.</p>\";\n        }\n        else\n        {\n          echo \"<p class='notok'>This script doesn't recognize your schema version: \" . $schema_version . \"</p>\";\n        }\n        echo \"<p>Upgrade is not possible. Check your input data (Go back in page history).</p>\";\n        close_html_and_exit();          \n        break;  \n    }\n  }\n  \n  $a_sql_schema = getDirSqlFiles($a_sql_upd_dir,ADD_DIR);\n  $a_sql_data = getDirSqlFiles($a_sql_data_dir,ADD_DIR);\n}\n\n\n// ------------------------------------------------------------------------------------------------\n// Now proceed with user checks and user creation (if needed)\n//\n// Added support for different types of architecture/installations:\n// webserver and dbserver on same machines      => user will be created as user\n// webserver and dbserver on DIFFERENT machines => user must be created as user@webserver\n//  \n// if @ in tl_db_login (username) -> get the hostname using splitting, and use it\n//                                   during user creation on db. \n$db->close();\n$db=null;\n$user_host = explode('@',$tl_db_login);\n$msg = create_user_for_db($db_type,$db_name, $db_server, $db_admin_name, $db_admin_pass, \n                          $tl_db_login, $tl_db_passwd);\n  \necho \"<br /><b>Creating Testlink DB user `\" . $user_host[0] . \"`</b>:\";\nif ( strpos($msg,'ok -') === FALSE )\n{\n  echo \"<span class='notok'>Failed!</span></b> - Could not create user: $tl_db_login!\";\n  $errors += 1;\n}\nelse\n{\n  echo \"<span class='ok'>OK! ($msg) </span>\";\n}\n\n\n// ------------------------------------------------------------------------------------------------\n// Schema Operations (CREATE, ALTER, ecc).\n// Important: \n//           Postgres: do it as tl_login NOT as db_admin\n//           MySQL   : do it as db_admin NOT as tl_login \nif( !is_null($db) )\n{\n  $db->close();\n  $db=null;\n}\n\n$db = new database($db_type);\nswitch($db_type)\n{\n    case 'mssql':\n    @$conn_result = $db->connect(NO_DSN, $db_server, $db_admin_name, $db_admin_pass, $db_name); \n    break;\n\n    case 'mysql':\n    @$conn_result = $db->connect(NO_DSN, $db_server, $db_admin_name, $db_admin_pass, $db_name); \n    break;\n        \n    case 'postgres':\n    @$conn_result = $db->connect(NO_DSN, $db_server, $tl_db_login, $tl_db_passwd, $db_name); \n    break;\n}\n// --------------------------------------------------------------------------------------------\nif( $install && $conn_result['status'] != 0 )\n{\n  drop_views($db,$db_table_prefix,$db_type);\n  drop_tables($db,$db_table_prefix,$db_type);\n}  \n\n\n// -------------------------------------------------------------------------------\n$sqlParser = new SqlParser($db,$db_type,$db_table_prefix);\nforeach($a_sql_schema as $sql_schema)\n{\n  foreach ($sql_schema as $sql_file) \n  {\n    echo \"<br />Processing:\" . $sql_file;\n    $sqlParser->process($sql_file);\n  }\n  echo \"<br />\";\n}\n\n// Now data migration must be done if needed\nif( $migration_process != '' )\n{\n  require_once($migration_functions_file);\n  $migration_process($db,$tables);\n}\n\n// -------------------------------------------------\n// Data Operations\nif ( count($a_sql_data > 0) )\n{\n  foreach($a_sql_data as $sql_data )\n  {\n    if ( count($sql_data > 0) )\n    {\n      foreach ($sql_data as $sql_file) \n      {\n        $sqlParser->process($sql_file);\n      }\n    }\n  }  \n}\n\n\n// -------------------------------------------------\nif ($update_pwd)\n{\n  echo \"Password Conversion ...\";\n  // @author Francisco Mancardi - 20050918\n  // Found error upgrading from 1.0.4 to 1.6 on RH\n  // due to case sensitive on table name. (USER)\n  \n  $user_pwd = \"UPDATE user SET password=MD5(password)\";\n  $result = $db->exec_query($user_pwd);\n}\n\n\nif($sqlParser->install_failed==true) \n{\n  echo \"<span class='notok'>Failed!</span></b> - {$inst_type_verbose} failed!\";\n  $errors += 1;\n  \n  echo \"<p />\" .\n  \"TestLink setup couldn't install the default site into the selected database. \" .\n  \"The last error to occur was <i>\" . $sqlParser->sql_errors[count($sqlParser->sql_errors)-1][\"error\"] .\n  '</i> during the execution of SQL statement <span class=\"mono\">' .\n  strip_tags($sqlParser->sql_errors[count($sqlParser->sql_errors)-1][\"sql\"]). \"</span>\";\n  \n  close_html_and_exit();     \n} \nelse \n{\n  echo \"<span class='ok'>OK!</span>\";\n}\n\n// -----------------------------------------------------------------------------\necho \"<br />Writing configuration file:\";\n$data['db_host']=$db_server;\n$data['db_login'] = $user_host[0];\n$data['db_passwd'] = $tl_db_passwd;\n$data['db_name'] = $db_name;\n$data['db_type'] = $db_type;\n$data['db_table_prefix'] = $db_table_prefix;\n\n\n$cfg_file = \"../config_db.inc.php\";\n$yy = write_config_db($cfg_file,$data);\n// -----------------------------------------------------------------------------\n\n\nif(strcasecmp('ko', $yy['status']) == 0)\n{\n  echo \"<span class='notok'>Failed!</span></b>\";\n  $errors += 1;\n  \n  echo \"<p />\" .\n  \"TestLink couldn't write the config file. Please copy the following into the \" .\n  '<span class=\"mono\"> ' . $cfg_file . '</span> file:<br />' .\n  '<textarea style=\"width:400px; height:160px;\">' . $yy['cfg_string'] . \"</textarea>\";\n  \n  echo \"Once that's been done, you can log into TestLink by pointing your browser at your TestLink site.\";\n  \n  close_html_and_exit();     \n} \nelse \n{\n  echo \"<span class='ok'>OK!</span>\";\n}\n\n\nmanual_operations($db_type);\n\nimportant_reminder();\n\n// When testlink is updated do not show login data admin/admin \n// as they might not exist\n$successfull_message = '</b><p /><br><div><span class=\"headers\">' . \"{$inst_type_verbose} was successful!\" . '</span><br>' .\n                     'You can now log in to <a href=\"../index.php\"> Testlink';\nif($create) \n{\n  $successfull_message .= ' (using login name:admin / password:admin - Please Click Me!)';\n}\n$successfull_message .= '</a>.</div>';\n\necho $successfull_message;\n\n$db->close();\nclose_html_and_exit();\n\n\n\n/**\n *\n *\n */\nfunction manual_operations($dbType)\n{\n  echo '<br><br><span class=\"headers\">';\n  echo 'IMPORTANT NOTICE - IMPORTANT NOTICE - IMPORTANT NOTICE - IMPORTANT NOTICE';\n  echo '</span>';\n\n  echo '<br><span class=\"headers\">';\n  echo 'YOU NEED TO RUN MANUALLY Following Script on your DB CLIENT Application';\n  echo '</span><br>';\n  echo dirname(__FILE__) . '/sql/'. $dbType . '/testlink_create_udf0.sql';\n  echo '<br> THANKS A LOT </b>';\n}\n\n// -----------------------------------------------------------\nfunction write_config_db($filename, $data)\n{\n  $ret = array('status'     => 'ok', 'cfg_string' => '');\n  \n  $db_host  = $data['db_host'];\n  $db_login = $data['db_login'];\n  // if @ present in db_login, explode an take user name WITHOUT HOST\n  $user_host = explode('@',$db_login);\n  \n  if (count($user_host) > 1 )\n  {\n    $db_login = $user_host[0];    \n  }\n  \n  $db_passwd = $data['db_passwd'];\n  $db_name = $data['db_name'];\n  $db_type = $data['db_type'];\n  $db_table_prefix = $data['db_table_prefix'];\n  \n  // write config.inc.php\n  $configString = \"<?php\" . \"\\n\" . \"// Automatically Generated by TestLink Installer - \" . date(DATE_RFC822) . \"\\n\";\n  $configString .= \"define('DB_TYPE', '\" . $db_type . \"');\\n\";\n  $configString .= \"define('DB_USER', '\" . $db_login . \"');\\n\";\n  $configString .= \"define('DB_PASS', '\" . $db_passwd . \"');\\n\";\n  $configString .= \"define('DB_HOST', '\" . $db_host . \"');\\n\";\n  $configString .= \"define('DB_NAME', '\" . $db_name . \"');\\n\";\n  $configString .= \"define('DB_TABLE_PREFIX', '\" . $db_table_prefix . \"');\\n\";\n  //\n  // PHP CLOSING TAG Ommited, following several internet documents indications\n  // example:\n  // http://ellislab.com/codeigniter/user-guide/general/styleguide.html#php_closing_tag\n  \n  if (@!$handle = fopen($filename, 'w')) \n  {\n    $ret['status'] = 'ko';\n  }\n  \n  // Write $somecontent to our opened file.\n  if (@fwrite($handle, $configString) === FALSE) \n  {\n    $ret['status'] = 'ko';\n  }\n  @fclose($handle); \n  \n  $ret['cfg_string'] = $configString;\n  \n  return($ret);\n}\n\n\n\n// Drop tables to allow re-run Installation\nfunction drop_tables(&$dbHandler,$dbTablePrefix,$dbType)\n{\n  // From 1.9 and up we have detail of tables.\n  $schema = tlObjectWithDB::getDBTables();\n  \n  // tables present on target db\n  $my_ado=$dbHandler->get_dbmgr_object();\n  $tablesOnDB =$my_ado->MetaTables('TABLES');  \n  if( count($tablesOnDB) > 0 && isset($tablesOnDB[0]))\n  {\n    echo \"<br /><b>Dropping all TL existent tables:</b><br />\";\n    foreach($schema as $tablePlainName => $tableFullName)\n    {\n      $targetTable = $dbTablePrefix . $tablePlainName;\n      if( in_array($targetTable,$tablesOnDB) )\n      {\n        // Need to add option (CASCADE ?) to delete dependent object\n        echo \"Droping $targetTable\" . \"<br />\";\n        $sql=\"DROP TABLE $targetTable\";\n        $sql .= (($dbType != 'mssql') && ($dbType != 'sqlsrv')) ? \" CASCADE \" : ' ';\n        $dbHandler->exec_query($sql);\n      }   \n    }\n    echo \"<span class='ok'>Done!</span>\";\n  }\n}\n\nfunction drop_views(&$dbHandler,$dbItemPrefix,$dbType)\n{\n  $schema = tlObjectWithDB::getDBViews();\n  \n  // views present on target db\n  $my_ado = $dbHandler->get_dbmgr_object();\n  $itemsOnDB =$my_ado->MetaTables('VIEWS');  \n  if( count($itemsOnDB) > 0 && isset($itemsOnDB[0]))\n  {\n    echo \"<br /><b>Dropping all TL existent views:</b><br />\";\n    foreach($schema as $itemPlainName => $itemFullName)\n    {\n      $target = $dbItemPrefix . $itemPlainName;\n      if( in_array($target,$itemsOnDB) )\n      {\n        // Need to add option (CASCADE ?) to delete dependent object\n        echo \"Droping $target\" . \"<br />\";\n        $sql=\"DROP VIEW $target\";\n        $sql .= (($dbType != 'mssql') && ($dbType != 'sqlsrv')) ? \" CASCADE \" : ' ';\n        $dbHandler->exec_query($sql);\n      }   \n    }\n    echo \"<span class='ok'>Done!</span>\";\n  }\n}\n"], "filenames": ["install/installNewDB.php"], "buggy_code_start_loc": [66], "buggy_code_end_loc": [79], "fixing_code_start_loc": [65], "fixing_code_end_loc": [83], "type": "CWE-94", "message": "install/installNewDB.php in TestLink through 1.9.16 allows remote attackers to conduct injection attacks by leveraging control over DB LOGIN NAMES data during installation to provide a long, crafted value.", "other": {"cve": {"id": "CVE-2018-7466", "sourceIdentifier": "cve@mitre.org", "published": "2018-02-25T07:29:00.210", "lastModified": "2019-03-05T13:21:12.377", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "install/installNewDB.php in TestLink through 1.9.16 allows remote attackers to conduct injection attacks by leveraging control over DB LOGIN NAMES data during installation to provide a long, crafted value."}, {"lang": "es", "value": "install/installNewDB.php en TestLink, hasta la versi\u00f3n 1.9.16, permite que atacantes remotos lleven a cabo ataques de inyecci\u00f3n aprovechando el control sobre los datos DB LOGIN NAMES durante la instalaci\u00f3n para proporcionar un valor largo y manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:testlink:testlink:*:*:*:*:*:*:.:*", "versionEndIncluding": "1.9.16", "matchCriteriaId": "C2E5CFAD-4E68-40E7-B7CE-DD9C85870A6A"}]}]}], "references": [{"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/9696012eecbafb0aa21cc346234512c29b474679", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/44226/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://www.exploit-db.com/exploits/44349/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/9696012eecbafb0aa21cc346234512c29b474679"}}