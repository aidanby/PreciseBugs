{"buggy_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Adminhtml\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Base adminhtml controller\n *\n * @category    Mage\n * @package     Mage_Adminhtml\n * @author      Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Adminhtml_Controller_Action extends Mage_Core_Controller_Varien_Action\n{\n    /**\n     * Name of \"is URLs checked\" flag\n     */\n    const FLAG_IS_URLS_CHECKED = 'check_url_settings';\n\n    /**\n     * Session namespace to refer in other places\n     */\n    const SESSION_NAMESPACE = 'adminhtml';\n\n    /**\n     * Array of actions which can be processed without secret key validation\n     *\n     * @var array\n     */\n    protected $_publicActions = array();\n\n    /**\n     *Array of actions which can't be processed without form key validation\n     *\n     * @var array\n     */\n    protected $_forcedFormKeyActions = array();\n\n    /**\n     * Used module name in current adminhtml controller\n     */\n    protected $_usedModuleName = 'adminhtml';\n\n    /**\n     * Currently used area\n     *\n     * @var string\n     */\n    protected $_currentArea = 'adminhtml';\n\n    /**\n     * Namespace for session.\n     *\n     * @var string\n     */\n    protected $_sessionNamespace = self::SESSION_NAMESPACE;\n\n    protected function _isAllowed()\n    {\n        return Mage::getSingleton('admin/session')->isAllowed('admin');\n    }\n\n    /**\n     * Retrieve adminhtml session model object\n     *\n     * @return Mage_Adminhtml_Model_Session\n     */\n    protected function _getSession()\n    {\n        return Mage::getSingleton('adminhtml/session');\n    }\n\n    /**\n     * Retrieve base admihtml helper\n     *\n     * @return Mage_Adminhtml_Helper_Data\n     */\n    protected function _getHelper()\n    {\n        return Mage::helper('adminhtml');\n    }\n\n    /**\n     * Define active menu item in menu block\n     *\n     * @return $this\n     */\n    protected function _setActiveMenu($menuPath)\n    {\n        $this->getLayout()->getBlock('menu')->setActive($menuPath);\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    protected function _addBreadcrumb($label, $title, $link=null)\n    {\n        $this->getLayout()->getBlock('breadcrumbs')->addLink($label, $title, $link);\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    protected function _addContent(Mage_Core_Block_Abstract $block)\n    {\n        $this->getLayout()->getBlock('content')->append($block);\n        return $this;\n    }\n\n    protected function _addLeft(Mage_Core_Block_Abstract $block)\n    {\n        $this->getLayout()->getBlock('left')->append($block);\n        return $this;\n    }\n\n    protected function _addJs(Mage_Core_Block_Abstract $block)\n    {\n        $this->getLayout()->getBlock('js')->append($block);\n        return $this;\n    }\n\n    /**\n     * Controller predispatch method\n     *\n     * @return $this\n     */\n    public function preDispatch()\n    {\n        // override admin store design settings via stores section\n        Mage::getDesign()\n            ->setArea($this->_currentArea)\n            ->setPackageName((string)Mage::getConfig()->getNode('stores/admin/design/package/name'))\n            ->setTheme((string)Mage::getConfig()->getNode('stores/admin/design/theme/default'))\n        ;\n        foreach (array('layout', 'template', 'skin', 'locale') as $type) {\n            if ($value = (string)Mage::getConfig()->getNode(\"stores/admin/design/theme/{$type}\")) {\n                Mage::getDesign()->setTheme($type, $value);\n            }\n        }\n\n        $this->getLayout()->setArea($this->_currentArea);\n\n        Mage::dispatchEvent('adminhtml_controller_action_predispatch_start', array());\n        parent::preDispatch();\n        $_isValidFormKey = true;\n        $_isValidSecretKey = true;\n        $_keyErrorMsg = '';\n        if (Mage::getSingleton('admin/session')->isLoggedIn()) {\n            if ($this->getRequest()->isPost() || $this->_checkIsForcedFormKeyAction()) {\n                $_isValidFormKey = $this->_validateFormKey();\n                $_keyErrorMsg = Mage::helper('adminhtml')->__('Invalid Form Key. Please refresh the page.');\n            } elseif (Mage::getSingleton('adminhtml/url')->useSecretKey()) {\n                $_isValidSecretKey = $this->_validateSecretKey();\n                $_keyErrorMsg = Mage::helper('adminhtml')->__('Invalid Secret Key. Please refresh the page.');\n            }\n        }\n        if (!$_isValidFormKey || !$_isValidSecretKey) {\n            $this->setFlag('', self::FLAG_NO_DISPATCH, true);\n            $this->setFlag('', self::FLAG_NO_POST_DISPATCH, true);\n            if ($this->getRequest()->getQuery('isAjax', false) || $this->getRequest()->getQuery('ajax', false)) {\n                $this->getResponse()->setBody(Mage::helper('core')->jsonEncode(array(\n                    'error' => true,\n                    'message' => $_keyErrorMsg\n                )));\n            } else {\n                if (!$_isValidFormKey){\n                    Mage::getSingleton('adminhtml/session')->addError($_keyErrorMsg);\n                }\n                $this->_redirect( Mage::getSingleton('admin/session')->getUser()->getStartupPageUrl() );\n            }\n            return $this;\n        }\n\n        if ($this->getRequest()->isDispatched()\n            && $this->getRequest()->getActionName() !== 'denied'\n            && !$this->_isAllowed()) {\n            $this->_forward('denied');\n            $this->setFlag('', self::FLAG_NO_DISPATCH, true);\n            return $this;\n        }\n\n        if (!$this->getFlag('', self::FLAG_IS_URLS_CHECKED)\n            && !$this->getRequest()->getParam('forwarded')\n            && !$this->_getSession()->getIsUrlNotice(true)\n            && !Mage::getConfig()->getNode('global/can_use_base_url')) {\n            //$this->_checkUrlSettings();\n            $this->setFlag('', self::FLAG_IS_URLS_CHECKED, true);\n        }\n        if (is_null(Mage::getSingleton('adminhtml/session')->getLocale())) {\n            Mage::getSingleton('adminhtml/session')->setLocale(Mage::app()->getLocale()->getLocaleCode());\n        }\n\n        return $this;\n    }\n\n    /**\n     * @deprecated after 1.4.0.0 alpha, logic moved to Mage_Adminhtml_Block_Notification_Baseurl\n     * @return $this\n     */\n    protected function _checkUrlSettings()\n    {\n        /**\n         * Don't check for data saving actions\n         */\n        if ($this->getRequest()->getPost() || $this->getRequest()->getQuery('isAjax')) {\n            return $this;\n        }\n\n        $configData = Mage::getModel('core/config_data');\n\n        $defaultUnsecure = (string)Mage::getConfig()->getNode(\n            'default/' . Mage_Core_Model_Store::XML_PATH_UNSECURE_BASE_URL\n        );\n        $defaultSecure = (string)Mage::getConfig()->getNode(\n            'default/' . Mage_Core_Model_Store::XML_PATH_SECURE_BASE_URL\n        );\n\n        if ($defaultSecure == '{{base_url}}' || $defaultUnsecure == '{{base_url}}') {\n            $this->_getSession()->addNotice(\n                $this->__('{{base_url}} is not recommended to use in a production environment to declare the Base Unsecure URL / Base Secure URL. It is highly recommended to change this value in your Magento <a href=\"%s\">configuration</a>.', $this->getUrl('adminhtml/system_config/edit', array('section'=>'web')))\n            );\n            return $this;\n        }\n\n        $dataCollection = $configData->getCollection()\n            ->addValueFilter('{{base_url}}');\n\n        $url = false;\n        foreach ($dataCollection as $data) {\n            if ($data->getScope() == 'stores') {\n                $code = Mage::app()->getStore($data->getScopeId())->getCode();\n                $url = $this->getUrl('adminhtml/system_config/edit', array('section'=>'web', 'store'=>$code));\n            }\n            if ($data->getScope() == 'websites') {\n                $code = Mage::app()->getWebsite($data->getScopeId())->getCode();\n                $url = $this->getUrl('adminhtml/system_config/edit', array('section'=>'web', 'website'=>$code));\n            }\n\n            if ($url) {\n                $this->_getSession()->addNotice(\n                    $this->__('{{base_url}} is not recommended to use in a production environment to declare the Base Unsecure URL / Base Secure URL. It is highly recommended to change this value in your Magento <a href=\"%s\">configuration</a>.', $url)\n                );\n                return $this;\n            }\n        }\n        return $this;\n    }\n\n    public function deniedAction()\n    {\n        $this->getResponse()->setHeader('HTTP/1.1','403 Forbidden');\n        if (!Mage::getSingleton('admin/session')->isLoggedIn()) {\n            $this->_redirect('*/index/login');\n            return;\n        }\n        $this->loadLayout(array('default', 'adminhtml_denied'));\n        $this->renderLayout();\n    }\n\n    public function loadLayout($ids=null, $generateBlocks=true, $generateXml=true)\n    {\n        parent::loadLayout($ids, $generateBlocks, $generateXml);\n        $this->_initLayoutMessages('adminhtml/session');\n        return $this;\n    }\n\n    public function norouteAction($coreRoute = null)\n    {\n        $this->getResponse()->setHeader('HTTP/1.1','404 Not Found');\n        $this->getResponse()->setHeader('Status','404 File not found');\n        $this->loadLayout(array('default', 'adminhtml_noroute'));\n        $this->renderLayout();\n    }\n\n\n    /**\n     * Retrieve currently used module name\n     *\n     * @return string\n     */\n    public function getUsedModuleName()\n    {\n        return $this->_usedModuleName;\n    }\n\n    /**\n     * Set currently used module name\n     *\n     * @param string $moduleName\n     * @return $this\n     */\n    public function setUsedModuleName($moduleName)\n    {\n        $this->_usedModuleName = $moduleName;\n        return $this;\n    }\n\n    /**\n     * Translate a phrase\n     *\n     * @return string\n     */\n    public function __()\n    {\n        $args = func_get_args();\n        $expr = new Mage_Core_Model_Translate_Expr(array_shift($args), $this->getUsedModuleName());\n        array_unshift($args, $expr);\n        return Mage::app()->getTranslator()->translate($args);\n    }\n\n    /**\n     * Set referer url for redirect in responce\n     *\n     * Is overriden here to set defaultUrl to admin url\n     *\n     * @param   string $defaultUrl\n     * @return  Mage_Adminhtml_Controller_Action\n     */\n    protected function _redirectReferer($defaultUrl=null)\n    {\n        $defaultUrl = empty($defaultUrl) ? $this->getUrl('*') : $defaultUrl;\n        parent::_redirectReferer($defaultUrl);\n        return $this;\n    }\n\n    /**\n     * Set redirect into responce\n     *\n     * @param   string $path\n     * @param   array $arguments\n     */\n    protected function _redirect($path, $arguments=array())\n    {\n        $this->_getSession()->setIsUrlNotice($this->getFlag('', self::FLAG_IS_URLS_CHECKED));\n        $this->getResponse()->setRedirect($this->getUrl($path, $arguments));\n        return $this;\n    }\n\n    protected function _forward($action, $controller = null, $module = null, array $params = null)\n    {\n        $this->_getSession()->setIsUrlNotice($this->getFlag('', self::FLAG_IS_URLS_CHECKED));\n        return parent::_forward($action, $controller, $module, $params);\n    }\n\n    /**\n     * Generate url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrl($route='', $params=array())\n    {\n        return Mage::helper('adminhtml')->getUrl($route, $params);\n    }\n\n    /**\n     * Validate Secret Key\n     *\n     * @return bool\n     */\n    protected function _validateSecretKey()\n    {\n        if (is_array($this->_publicActions) && in_array($this->getRequest()->getActionName(), $this->_publicActions)) {\n            return true;\n        }\n\n        if (!($secretKey = $this->getRequest()->getParam(Mage_Adminhtml_Model_Url::SECRET_KEY_PARAM_NAME, null))\n            || $secretKey != Mage::getSingleton('adminhtml/url')->getSecretKey()) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Validate password for current admin user\n     *\n     * @param string $password - current password\n     *\n     * @return mixed - returns true or array of errors\n     */\n    protected function _validateCurrentPassword($password)\n    {\n        $user = Mage::getSingleton('admin/session')->getUser();\n        return $user->validateCurrentPassword($password);\n    }\n\n    /**\n     * Check forced use form key for action\n     *\n     *  @return bool\n     */\n    protected function _checkIsForcedFormKeyAction()\n    {\n        return in_array(\n            strtolower($this->getRequest()->getActionName()),\n            array_map('strtolower', $this->_forcedFormKeyActions)\n        );\n    }\n\n    /**\n     * Set actions name for forced use form key if \"Secret Key to URLs\" disabled\n     *\n     * @param array | string $actionNames - action names for forced use form key\n     */\n    protected function _setForcedFormKeyActions($actionNames)\n    {\n        if (!Mage::helper('adminhtml')->isEnabledSecurityKeyUrl()) {\n            $actionNames = (is_array($actionNames)) ? $actionNames: (array)$actionNames;\n            $actionNames = array_merge($this->_forcedFormKeyActions, $actionNames);\n            $actionNames = array_unique($actionNames);\n            $this->_forcedFormKeyActions = $actionNames;\n        }\n    }\n\n    /**\n     * Validate request parameter\n     *\n     * @param string $param - request parameter\n     * @param string $pattern - pattern that should be contained in parameter\n     *\n     * @return bool\n     */\n    protected function _validateRequestParam($param, $pattern = '')\n    {\n        $pattern = empty($pattern) ? '/^[a-z0-9\\-\\_\\/]*$/si' : $pattern;\n        if (preg_match($pattern, $param)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Validate request parameters\n     *\n     * @param array $params - array of request parameters\n     * @param string $pattern - pattern that should be contained in parameter\n     *\n     * @return bool\n     */\n    protected function _validateRequestParams($params, $pattern = '')\n    {\n        foreach ($params as $param) {\n            if (!$this->_validateRequestParam($param, $pattern)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Adminhtml\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Base adminhtml controller\n *\n * @category    Mage\n * @package     Mage_Adminhtml\n * @author      Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Adminhtml_Controller_Action extends Mage_Core_Controller_Varien_Action\n{\n    /**\n     * Name of \"is URLs checked\" flag\n     */\n    const FLAG_IS_URLS_CHECKED = 'check_url_settings';\n\n    /**\n     * Session namespace to refer in other places\n     */\n    const SESSION_NAMESPACE = 'adminhtml';\n\n    /**\n     * Array of actions which can be processed without secret key validation\n     *\n     * @var array\n     */\n    protected $_publicActions = array();\n\n    /**\n     *Array of actions which can't be processed without form key validation\n     *\n     * @var array\n     */\n    protected $_forcedFormKeyActions = array();\n\n    /**\n     * Used module name in current adminhtml controller\n     */\n    protected $_usedModuleName = 'adminhtml';\n\n    /**\n     * Currently used area\n     *\n     * @var string\n     */\n    protected $_currentArea = 'adminhtml';\n\n    /**\n     * Namespace for session.\n     *\n     * @var string\n     */\n    protected $_sessionNamespace = self::SESSION_NAMESPACE;\n\n    protected function _isAllowed()\n    {\n        return Mage::getSingleton('admin/session')->isAllowed('admin');\n    }\n\n    /**\n     * Retrieve adminhtml session model object\n     *\n     * @return Mage_Adminhtml_Model_Session\n     */\n    protected function _getSession()\n    {\n        return Mage::getSingleton('adminhtml/session');\n    }\n\n    /**\n     * Retrieve base admihtml helper\n     *\n     * @return Mage_Adminhtml_Helper_Data\n     */\n    protected function _getHelper()\n    {\n        return Mage::helper('adminhtml');\n    }\n\n    /**\n     * Define active menu item in menu block\n     *\n     * @return $this\n     */\n    protected function _setActiveMenu($menuPath)\n    {\n        $this->getLayout()->getBlock('menu')->setActive($menuPath);\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    protected function _addBreadcrumb($label, $title, $link=null)\n    {\n        $this->getLayout()->getBlock('breadcrumbs')->addLink($label, $title, $link);\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    protected function _addContent(Mage_Core_Block_Abstract $block)\n    {\n        $this->getLayout()->getBlock('content')->append($block);\n        return $this;\n    }\n\n    protected function _addLeft(Mage_Core_Block_Abstract $block)\n    {\n        $this->getLayout()->getBlock('left')->append($block);\n        return $this;\n    }\n\n    protected function _addJs(Mage_Core_Block_Abstract $block)\n    {\n        $this->getLayout()->getBlock('js')->append($block);\n        return $this;\n    }\n\n    /**\n     * Controller predispatch method\n     *\n     * @return $this\n     */\n    public function preDispatch()\n    {\n        // override admin store design settings via stores section\n        Mage::getDesign()\n            ->setArea($this->_currentArea)\n            ->setPackageName((string)Mage::getConfig()->getNode('stores/admin/design/package/name'))\n            ->setTheme((string)Mage::getConfig()->getNode('stores/admin/design/theme/default'))\n        ;\n        foreach (array('layout', 'template', 'skin', 'locale') as $type) {\n            if ($value = (string)Mage::getConfig()->getNode(\"stores/admin/design/theme/{$type}\")) {\n                Mage::getDesign()->setTheme($type, $value);\n            }\n        }\n\n        $this->getLayout()->setArea($this->_currentArea);\n\n        Mage::dispatchEvent('adminhtml_controller_action_predispatch_start', array());\n        parent::preDispatch();\n        $_isValidFormKey = true;\n        $_isValidSecretKey = true;\n        $_keyErrorMsg = '';\n        if (Mage::getSingleton('admin/session')->isLoggedIn()) {\n            if ($this->getRequest()->isPost() || $this->_checkIsForcedFormKeyAction()) {\n                $_isValidFormKey = $this->_validateFormKey();\n                $_keyErrorMsg = Mage::helper('adminhtml')->__('Invalid Form Key. Please refresh the page.');\n            } elseif (Mage::getSingleton('adminhtml/url')->useSecretKey()) {\n                $_isValidSecretKey = $this->_validateSecretKey();\n                $_keyErrorMsg = Mage::helper('adminhtml')->__('Invalid Secret Key. Please refresh the page.');\n            }\n        }\n        if (!$_isValidFormKey || !$_isValidSecretKey) {\n            $this->setFlag('', self::FLAG_NO_DISPATCH, true);\n            $this->setFlag('', self::FLAG_NO_POST_DISPATCH, true);\n            if ($this->getRequest()->getQuery('isAjax', false) || $this->getRequest()->getQuery('ajax', false)) {\n                $this->getResponse()->setBody(Mage::helper('core')->jsonEncode(array(\n                    'error' => true,\n                    'message' => $_keyErrorMsg\n                )));\n            } else {\n                if (!$_isValidFormKey){\n                    Mage::getSingleton('adminhtml/session')->addError($_keyErrorMsg);\n                }\n                $this->_redirect( Mage::getSingleton('admin/session')->getUser()->getStartupPageUrl() );\n            }\n            return $this;\n        }\n\n        if ($this->getRequest()->isDispatched()\n            && $this->getRequest()->getActionName() !== 'denied'\n            && !$this->_isAllowed()) {\n            $this->_forward('denied');\n            $this->setFlag('', self::FLAG_NO_DISPATCH, true);\n            return $this;\n        }\n\n        if (!$this->getFlag('', self::FLAG_IS_URLS_CHECKED)\n            && !$this->getRequest()->getParam('forwarded')\n            && !$this->_getSession()->getIsUrlNotice(true)\n            && !Mage::getConfig()->getNode('global/can_use_base_url')) {\n            //$this->_checkUrlSettings();\n            $this->setFlag('', self::FLAG_IS_URLS_CHECKED, true);\n        }\n        if (is_null(Mage::getSingleton('adminhtml/session')->getLocale())) {\n            Mage::getSingleton('adminhtml/session')->setLocale(Mage::app()->getLocale()->getLocaleCode());\n        }\n\n        return $this;\n    }\n\n    /**\n     * @deprecated after 1.4.0.0 alpha, logic moved to Mage_Adminhtml_Block_Notification_Baseurl\n     * @return $this\n     */\n    protected function _checkUrlSettings()\n    {\n        /**\n         * Don't check for data saving actions\n         */\n        if ($this->getRequest()->getPost() || $this->getRequest()->getQuery('isAjax')) {\n            return $this;\n        }\n\n        $configData = Mage::getModel('core/config_data');\n\n        $defaultUnsecure = (string)Mage::getConfig()->getNode(\n            'default/' . Mage_Core_Model_Store::XML_PATH_UNSECURE_BASE_URL\n        );\n        $defaultSecure = (string)Mage::getConfig()->getNode(\n            'default/' . Mage_Core_Model_Store::XML_PATH_SECURE_BASE_URL\n        );\n\n        if ($defaultSecure == '{{base_url}}' || $defaultUnsecure == '{{base_url}}') {\n            $this->_getSession()->addNotice(\n                $this->__('{{base_url}} is not recommended to use in a production environment to declare the Base Unsecure URL / Base Secure URL. It is highly recommended to change this value in your Magento <a href=\"%s\">configuration</a>.', $this->getUrl('adminhtml/system_config/edit', array('section'=>'web')))\n            );\n            return $this;\n        }\n\n        $dataCollection = $configData->getCollection()\n            ->addValueFilter('{{base_url}}');\n\n        $url = false;\n        foreach ($dataCollection as $data) {\n            if ($data->getScope() == 'stores') {\n                $code = Mage::app()->getStore($data->getScopeId())->getCode();\n                $url = $this->getUrl('adminhtml/system_config/edit', array('section'=>'web', 'store'=>$code));\n            }\n            if ($data->getScope() == 'websites') {\n                $code = Mage::app()->getWebsite($data->getScopeId())->getCode();\n                $url = $this->getUrl('adminhtml/system_config/edit', array('section'=>'web', 'website'=>$code));\n            }\n\n            if ($url) {\n                $this->_getSession()->addNotice(\n                    $this->__('{{base_url}} is not recommended to use in a production environment to declare the Base Unsecure URL / Base Secure URL. It is highly recommended to change this value in your Magento <a href=\"%s\">configuration</a>.', $url)\n                );\n                return $this;\n            }\n        }\n        return $this;\n    }\n\n    public function deniedAction()\n    {\n        $this->getResponse()->setHeader('HTTP/1.1','403 Forbidden');\n        if (!Mage::getSingleton('admin/session')->isLoggedIn()) {\n            $this->_redirect('*/index/login');\n            return;\n        }\n        $this->loadLayout(array('default', 'adminhtml_denied'));\n        $this->renderLayout();\n    }\n\n    public function loadLayout($ids=null, $generateBlocks=true, $generateXml=true)\n    {\n        parent::loadLayout($ids, $generateBlocks, $generateXml);\n        $this->_initLayoutMessages('adminhtml/session');\n        return $this;\n    }\n\n    public function norouteAction($coreRoute = null)\n    {\n        $this->getResponse()->setHeader('HTTP/1.1','404 Not Found');\n        $this->getResponse()->setHeader('Status','404 File not found');\n        $this->loadLayout(array('default', 'adminhtml_noroute'));\n        $this->renderLayout();\n    }\n\n\n    /**\n     * Retrieve currently used module name\n     *\n     * @return string\n     */\n    public function getUsedModuleName()\n    {\n        return $this->_usedModuleName;\n    }\n\n    /**\n     * Set currently used module name\n     *\n     * @param string $moduleName\n     * @return $this\n     */\n    public function setUsedModuleName($moduleName)\n    {\n        $this->_usedModuleName = $moduleName;\n        return $this;\n    }\n\n    /**\n     * Translate a phrase\n     *\n     * @return string\n     */\n    public function __()\n    {\n        $args = func_get_args();\n        $expr = new Mage_Core_Model_Translate_Expr(array_shift($args), $this->getUsedModuleName());\n        array_unshift($args, $expr);\n        return Mage::app()->getTranslator()->translate($args);\n    }\n\n    /**\n     * Set referer url for redirect in responce\n     *\n     * Is overriden here to set defaultUrl to admin url\n     *\n     * @param   string $defaultUrl\n     * @return  Mage_Adminhtml_Controller_Action\n     */\n    protected function _redirectReferer($defaultUrl=null)\n    {\n        $defaultUrl = empty($defaultUrl) ? $this->getUrl('*') : $defaultUrl;\n        parent::_redirectReferer($defaultUrl);\n        return $this;\n    }\n\n    /**\n     * Set redirect into responce\n     *\n     * @param   string $path\n     * @param   array $arguments\n     */\n    protected function _redirect($path, $arguments=array())\n    {\n        $this->_getSession()->setIsUrlNotice($this->getFlag('', self::FLAG_IS_URLS_CHECKED));\n        $this->getResponse()->setRedirect($this->getUrl($path, $arguments));\n        return $this;\n    }\n\n    protected function _forward($action, $controller = null, $module = null, array $params = null)\n    {\n        $this->_getSession()->setIsUrlNotice($this->getFlag('', self::FLAG_IS_URLS_CHECKED));\n        return parent::_forward($action, $controller, $module, $params);\n    }\n\n    /**\n     * Generate url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrl($route='', $params=array())\n    {\n        return Mage::helper('adminhtml')->getUrl($route, $params);\n    }\n\n    /**\n     * Validate Secret Key\n     *\n     * @return bool\n     */\n    protected function _validateSecretKey()\n    {\n        if (is_array($this->_publicActions) && in_array($this->getRequest()->getActionName(), $this->_publicActions)) {\n            return true;\n        }\n\n        if (!($secretKey = $this->getRequest()->getParam(Mage_Adminhtml_Model_Url::SECRET_KEY_PARAM_NAME, null))\n            || !hash_equals(Mage::getSingleton('adminhtml/url')->getSecretKey(), $secretKey)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Validate password for current admin user\n     *\n     * @param string $password - current password\n     *\n     * @return mixed - returns true or array of errors\n     */\n    protected function _validateCurrentPassword($password)\n    {\n        $user = Mage::getSingleton('admin/session')->getUser();\n        return $user->validateCurrentPassword($password);\n    }\n\n    /**\n     * Check forced use form key for action\n     *\n     *  @return bool\n     */\n    protected function _checkIsForcedFormKeyAction()\n    {\n        return in_array(\n            strtolower($this->getRequest()->getActionName()),\n            array_map('strtolower', $this->_forcedFormKeyActions)\n        );\n    }\n\n    /**\n     * Set actions name for forced use form key if \"Secret Key to URLs\" disabled\n     *\n     * @param array | string $actionNames - action names for forced use form key\n     */\n    protected function _setForcedFormKeyActions($actionNames)\n    {\n        if (!Mage::helper('adminhtml')->isEnabledSecurityKeyUrl()) {\n            $actionNames = (is_array($actionNames)) ? $actionNames: (array)$actionNames;\n            $actionNames = array_merge($this->_forcedFormKeyActions, $actionNames);\n            $actionNames = array_unique($actionNames);\n            $this->_forcedFormKeyActions = $actionNames;\n        }\n    }\n\n    /**\n     * Validate request parameter\n     *\n     * @param string $param - request parameter\n     * @param string $pattern - pattern that should be contained in parameter\n     *\n     * @return bool\n     */\n    protected function _validateRequestParam($param, $pattern = '')\n    {\n        $pattern = empty($pattern) ? '/^[a-z0-9\\-\\_\\/]*$/si' : $pattern;\n        if (preg_match($pattern, $param)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Validate request parameters\n     *\n     * @param array $params - array of request parameters\n     * @param string $pattern - pattern that should be contained in parameter\n     *\n     * @return bool\n     */\n    protected function _validateRequestParams($params, $pattern = '')\n    {\n        foreach ($params as $param) {\n            if (!$this->_validateRequestParam($param, $pattern)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"], "filenames": ["app/code/core/Mage/Adminhtml/Controller/Action.php"], "buggy_code_start_loc": [392], "buggy_code_end_loc": [393], "fixing_code_start_loc": [392], "fixing_code_end_loc": [393], "type": "CWE-352", "message": "OpenMage LTS before versions 19.4.6 and 20.0.2 allows attackers to circumvent the `fromkey protection` in the Admin Interface and increases the attack surface for Cross Site Request Forgery attacks. This issue is related to Adobe's CVE-2020-9690. It is patched in versions 19.4.6 and 20.0.2.", "other": {"cve": {"id": "CVE-2020-15151", "sourceIdentifier": "security-advisories@github.com", "published": "2020-08-20T01:17:12.507", "lastModified": "2021-11-18T18:38:35.300", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenMage LTS before versions 19.4.6 and 20.0.2 allows attackers to circumvent the `fromkey protection` in the Admin Interface and increases the attack surface for Cross Site Request Forgery attacks. This issue is related to Adobe's CVE-2020-9690. It is patched in versions 19.4.6 and 20.0.2."}, {"lang": "es", "value": "OpenMage LTS versiones anteriores a 19.4.6 y 20.0.2, permite a atacantes evitar la \"fromkey protection\" en la interfaz de Administraci\u00f3n y aumenta la superficie de ataque para ataques de tipo Cross Site Request Forgery. Este problema est\u00e1 relacionado con el CVE-2020-9690 de Adobe. Est\u00e1 parcheado en las versiones 19.4.6 y 20.0.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.9, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-203"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmage:openmage_long_term_support:*:*:*:*:*:*:*:*", "versionEndExcluding": "19.4.6", "matchCriteriaId": "FD418F71-88E9-49D3-82DD-AAB9D9A8AD8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmage:openmage_long_term_support:*:*:*:*:*:*:*:*", "versionStartIncluding": "20.0.0", "versionEndExcluding": "20.0.2", "matchCriteriaId": "8F470AF6-63CE-423B-AC8A-EB5D86B4A9F8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:magento:magento:*:*:*:*:commerce:*:*:*", "versionEndIncluding": "2.3.5", "matchCriteriaId": "6433B1A2-8285-4EB4-B16F-E4184A86D7EC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:magento:magento:*:*:*:*:open_source:*:*:*", "versionEndIncluding": "2.3.5", "matchCriteriaId": "8F944DD0-FCDC-4519-AD77-6C1348C439D4"}]}]}], "references": [{"url": "https://github.com/OpenMage/magento-lts/commit/7c526bc6a6a51b57a1bab4c60f104dc36cde347a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/security/advisories/GHSA-crf2-xm6x-46p6", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://helpx.adobe.com/security/products/magento/apsb20-47.html", "source": "security-advisories@github.com", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/OpenMage/magento-lts/commit/7c526bc6a6a51b57a1bab4c60f104dc36cde347a"}}