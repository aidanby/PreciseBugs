{"buggy_code": ["<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\ORM\\AbstractQuery;\nuse Shopware\\Bundle\\AccountBundle\\Service\\CustomerUnlockServiceInterface;\nuse Shopware\\Components\\CSRFWhitelistAware;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Components\\Model\\ModelRepository;\nuse Shopware\\Components\\NumberRangeIncrementerInterface;\nuse Shopware\\Components\\OptinServiceInterface;\nuse Shopware\\Components\\Random;\nuse Shopware\\Components\\ShopRegistrationServiceInterface;\nuse Shopware\\Components\\StateTranslatorService;\nuse Shopware\\Components\\StateTranslatorServiceInterface;\nuse Shopware\\Components\\Validator\\EmailValidator;\nuse Shopware\\Components\\Validator\\EmailValidatorInterface;\nuse Shopware\\Models\\Country\\Country;\nuse Shopware\\Models\\Country\\Repository as CountryRepository;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Customer\\Group;\nuse Shopware\\Models\\Customer\\PaymentData;\nuse Shopware\\Models\\Customer\\PriceGroup;\nuse Shopware\\Models\\Customer\\Repository as CustomerRepository;\nuse Shopware\\Models\\Dispatch\\Dispatch;\nuse Shopware\\Models\\Dispatch\\Repository as DispatchRepository;\nuse Shopware\\Models\\Order\\Order;\nuse Shopware\\Models\\Order\\Repository as OrderRepository;\nuse Shopware\\Models\\Payment\\Payment;\nuse Shopware\\Models\\Payment\\Repository as PaymentRepository;\nuse Shopware\\Models\\Shop\\Repository as ShopRepository;\nuse Shopware\\Models\\Shop\\Shop;\nuse Symfony\\Component\\HttpFoundation\\Cookie;\n\nclass Shopware_Controllers_Backend_Customer extends Shopware_Controllers_Backend_ExtJs implements CSRFWhitelistAware\n{\n    /**\n     * Customer repository. Declared for an fast access to the customer repository.\n     * Initialed in the init() function.\n     *\n     * @var CustomerRepository|null\n     */\n    public static $repository;\n\n    /**\n     * Contains the shopware model manager\n     *\n     * @var ModelManager\n     */\n    public static $manager;\n\n    /**\n     * @var ModelRepository<Group>\n     */\n    protected $groupRepository;\n\n    /**\n     * @var ShopRepository\n     */\n    protected $shopRepository;\n\n    /**\n     * @var OrderRepository\n     */\n    protected $orderRepository;\n\n    /**\n     * @var PaymentRepository\n     */\n    protected $paymentRepository;\n\n    /**\n     * @var DispatchRepository\n     */\n    protected $dispatchRepository;\n\n    /**\n     * @var CountryRepository\n     */\n    protected $countryRepository;\n\n    /**\n     * Deactivates the authentication for the performOrderRedirect action\n     * This is used in the performOrder action\n     */\n    public function init()\n    {\n        if ($this->Request()->getActionName() === 'performOrderRedirect') {\n            Shopware()->Plugins()->Backend()->Auth()->setNoAuth();\n        }\n        $currency = Shopware()->Db()->fetchRow(\n            'SELECT templatechar as sign, (symbol_position = 16) currencyAtEnd\n            FROM s_core_currencies\n            WHERE standard = 1'\n        );\n\n        $this->View()->assign('currency', $currency);\n\n        parent::init();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getWhitelistedCSRFActions()\n    {\n        return [\n            'performOrderRedirect',\n        ];\n    }\n\n    /**\n     * Disable template engine for all actions\n     *\n     * @codeCoverageIgnore\n     */\n    public function preDispatch()\n    {\n        if (!\\in_array($this->Request()->getActionName(), ['index', 'load', 'validateEmail'])) {\n            $this->Front()->Plugins()->Json()->setRenderer(true);\n        }\n    }\n\n    public function loadStoresAction()\n    {\n        $orderStatus = $this->getOrderRepository()->getOrderStatusQuery()->getArrayResult();\n        $paymentStatus = $this->getOrderRepository()->getPaymentStatusQuery()->getArrayResult();\n        $payment = $this->getPaymentRepository()->getAllPaymentsQuery()->getArrayResult();\n        $dispatch = $this->getDispatchRepository()->getDispatchesQuery()->getArrayResult();\n        $shop = $this->getShopRepository()->getBaseListQuery()->getArrayResult();\n        $country = $this->getCountryRepository()->getCountriesQuery()->getArrayResult();\n        $customerGroups = $this->getRepository()->getCustomerGroupsQuery()->getArrayResult();\n\n        /** @var StateTranslatorServiceInterface $stateTranslator */\n        $stateTranslator = $this->get('shopware.components.state_translator');\n        $orderStatus = array_map(function ($orderStateItem) use ($stateTranslator) {\n            return $stateTranslator->translateState(StateTranslatorService::STATE_ORDER, $orderStateItem);\n        }, $orderStatus);\n\n        $paymentStatus = array_map(function ($paymentStateItem) use ($stateTranslator) {\n            return $stateTranslator->translateState(StateTranslatorService::STATE_PAYMENT, $paymentStateItem);\n        }, $paymentStatus);\n\n        // Translate payment and dispatch method names.\n        $translationComponent = $this->get(Shopware_Components_Translation::class);\n        $payment = $translationComponent->translatePaymentMethods($payment);\n        $dispatch = $translationComponent->translateDispatchMethods($dispatch);\n\n        $this->View()->assign([\n            'success' => true,\n            'data' => [\n                'orderStatus' => $orderStatus,\n                'paymentStatus' => $paymentStatus,\n                'payment' => $payment,\n                'dispatch' => $dispatch,\n                'shop' => $shop,\n                'country' => $country,\n                'customerGroup' => $customerGroups,\n            ],\n        ]);\n    }\n\n    /**\n     * Event listener method which fires when the customer detail\n     * store is loaded. Returns an array with all data about one customer.\n     * Expects an customer id as parameter to read the detail data\n     * only for one customer.\n     */\n    public function getDetailAction()\n    {\n        $customerId = $this->Request()->getParam('customerID');\n        if ($customerId === null || $customerId === 0) {\n            $this->View()->assign(['success' => false, 'message' => 'No customer id passed']);\n\n            return;\n        }\n\n        $data = $this->getCustomer($customerId);\n        $data['serverTime'] = new DateTime($this->get(Connection::class)->fetchColumn('SELECT NOW()'));\n\n        $this->View()->assign(['success' => true, 'data' => $data, 'total' => 1]);\n    }\n\n    /**\n     * Event listener method which fires when the customer order store is loaded.\n     * Returns an array of all customer orders to display them in an Ext.grid.Panel.\n     * Grants by the limit and start parameter a paging for the customer order data.\n     * The filter parameter allows the user a full text search\n     * over the displayed fields.\n     */\n    public function getOrdersAction()\n    {\n        if (!$this->_isAllowed('read', 'order')) {\n            /** @var Enlight_Components_Snippet_Namespace $namespace */\n            $namespace = Shopware()->Snippets()->getNamespace('backend/customer');\n\n            $this->View()->assign([\n                'success' => false,\n                'data' => $this->Request()->getParams(),\n                'message' => $namespace->get('no_order_rights', 'You do not have sufficient rights to view customer orders.'),\n            ]);\n\n            return;\n        }\n\n        $customerId = $this->Request()->getParam('customerID');\n        if ($customerId === null || $customerId === 0) {\n            $this->View()->assign(['success' => false, 'message' => 'No customer id passed']);\n\n            return;\n        }\n\n        $defaultSort = ['0' => ['property' => 'orderTime', 'direction' => 'DESC']];\n\n        $limit = (int) $this->Request()->getParam('limit', 20);\n        $offset = (int) $this->Request()->getParam('start', 0);\n        $sort = $this->Request()->getParam('sort', $defaultSort);\n        $filter = $this->Request()->getParam('filter');\n        $filter = $filter[0]['value'];\n\n        // Get access on the customer getRepository()\n        $query = $this->getRepository()->getOrdersQuery($customerId, $filter, $sort, $limit, $offset);\n\n        // Returns the total count of the query\n        $totalResult = $this->getManager()->getQueryCount($query);\n\n        // Returns the customer data\n        $orders = $query->getArrayResult();\n\n        $this->View()->assign(['success' => true, 'data' => $orders, 'total' => $totalResult]);\n    }\n\n    /**\n     * Event listener method which fires when the detail page of a customer is loaded.\n     * Returns an array of grouped order data to display them in a line chart.\n     */\n    public function getOrderChartAction()\n    {\n        if (!$this->_isAllowed('read', 'order')) {\n            $namespace = Shopware()->Snippets()->getNamespace('backend/customer');\n\n            $this->View()->assign([\n                'success' => false,\n                'data' => $this->Request()->getParams(),\n                'message' => $namespace->get('no_order_rights', 'You do not have sufficient rights to view customer orders.'),\n            ]);\n\n            return;\n        }\n\n        // Customer id passed?\n        $customerId = (int) $this->Request()->getParam('customerID');\n        if ($customerId === 0) {\n            $this->View()->assign(['success' => false, 'message' => 'No customer id passed']);\n\n            return;\n        }\n        $orders = $this->getChartData($customerId);\n\n        $this->View()->assign(['success' => true, 'data' => $orders]);\n    }\n\n    /**\n     * Saves a single customer. If no customer id passed,\n     * the save function creates a new customer model and persist\n     * it by the shopware model manager.\n     * The sub models billing, shipping and debit will be filled\n     * by the passed parameter arrays billing, shipping and debit.\n     */\n    public function saveAction()\n    {\n        $id = $this->Request()->getParam('id');\n        $paymentId = $this->Request()->getParam('paymentId');\n        $params = $this->Request()->getParams();\n        $paymentData = null;\n\n        /** @var Enlight_Components_Snippet_Namespace $namespace */\n        $namespace = Shopware()->Snippets()->getNamespace('backend/customer');\n\n        // Customer id passed? If this is the case the customer was edited\n        if (!empty($id)) {\n            // Check if the user has the rights to update an existing customer\n            if (!$this->_isAllowed('update', 'customer')) {\n                $this->View()->assign([\n                    'success' => false,\n                    'data' => $this->Request()->getParams(),\n                    'message' => $namespace->get('no_edit_rights', 'You do not have sufficient rights to edit a customer.'),\n                ]);\n\n                return;\n            }\n\n            /** @var Customer $customer */\n            $customer = $this->getRepository()->find((int) $id);\n            /** @var PaymentData $paymentData */\n            $paymentData = $this->getManager()->getRepository(PaymentData::class)->findOneBy(\n                ['customer' => $customer, 'paymentMean' => (int) $paymentId]\n            );\n\n            if ($customer->getChanged() !== null) {\n                // Check whether the customer has been modified in the meantime\n                try {\n                    $changed = new DateTime($params['changed']);\n                } catch (Exception $e) {\n                    // If we have a invalid date caused by imports\n                    $changed = $customer->getChanged();\n                }\n\n                if ($changed->getTimestamp() < 0 && $customer->getChanged()->getTimestamp() < 0) {\n                    $changed = $customer->getChanged();\n                }\n\n                $diff = abs($customer->getChanged()->getTimestamp() - $changed->getTimestamp());\n\n                // We have timestamp conversion issues on Windows Users\n                if ($diff > 1) {\n                    $namespace = Shopware()->Snippets()->getNamespace('backend/customer/controller/main');\n\n                    $this->View()->assign([\n                        'success' => false,\n                        'data' => $this->getCustomer($customer->getId()),\n                        'overwriteAble' => true,\n                        'message' => $namespace->get('customer_has_been_changed', 'The customer has been changed in the meantime. To prevent overwriting these changes, saving the customer was aborted. Please close the customer and re-open it.'),\n                    ]);\n\n                    return;\n                }\n            }\n        } else {\n            // Check if the user has the rights to create a new customer\n            if (!$this->_isAllowed('create', 'customer')) {\n                $this->View()->assign([\n                    'success' => false,\n                    'data' => $this->Request()->getParams(),\n                    'message' => $namespace->get('no_create_rights', 'You do not have sufficient rights to view create a customer.'),\n                ]);\n\n                return;\n            }\n            $customer = new Customer();\n        }\n\n        if (!($paymentData instanceof PaymentData) && !empty($params['paymentData']) && !empty(array_filter($params['paymentData'][0]))) {\n            $paymentData = new PaymentData();\n            $customer->addPaymentData($paymentData);\n\n            /** @var Payment $payment */\n            $payment = $this->getManager()\n                ->getRepository(Payment::class)\n                ->find($paymentId);\n            $paymentData->setPaymentMean($payment);\n        }\n\n        $params = $this->prepareCustomerData($params, $customer, $paymentData);\n\n        // Set parameter to the customer model.\n        $customer->fromArray($params);\n\n        // If user will be activated, but the first login is still 0, because he was in doi-process\n        if ($customer->getActive() && (!$customer->getFirstLogin() || $customer->getFirstLogin()->getTimestamp() === 0)) {\n            $customer->setFirstLogin(new DateTime());\n        }\n\n        $password = $this->Request()->getParam('newPassword');\n\n        // Encode the password with md5\n        if (!empty($password)) {\n            $customer->setPassword($password);\n        }\n\n        if (!$customer->getNumber() && Shopware()->Config()->get('shopwareManagedCustomerNumbers')) {\n            /** @var NumberRangeIncrementerInterface $incrementer */\n            $incrementer = Shopware()->Container()->get(NumberRangeIncrementerInterface::class);\n            $customer->setNumber((string) $incrementer->increment('user'));\n        }\n\n        $this->getManager()->persist($customer);\n        $this->getManager()->flush();\n\n        $this->View()->assign([\n            'success' => true,\n            'data' => $this->getCustomer($customer->getId()),\n        ]);\n    }\n\n    /**\n     * Deletes a single customer or an array of customers from the database.\n     * Expects a single customer id or an array of customer ids which placed in the parameter customers\n     */\n    public function deleteAction()\n    {\n        // get posted customers\n        $customers = $this->Request()->getParam('customers', [['id' => $this->Request()->getParam('id')]]);\n\n        // iterate the customers and add the remove action\n        foreach ($customers as $customer) {\n            $entity = $this->getRepository()->find($customer['id']);\n            if ($entity === null) {\n                continue;\n            }\n            $this->getManager()->remove($entity);\n        }\n        // Performs all of the collected actions.\n        $this->getManager()->flush();\n\n        $this->View()->assign([\n            'success' => true,\n            'data' => $this->Request()->getParams(),\n        ]);\n    }\n\n    /**\n     * Validates the inserted email address\n     */\n    public function validateEmailAction()\n    {\n        Shopware()->Front()->Plugins()->ViewRenderer()->setNoRender();\n\n        $mail = $this->Request()->get('value');\n\n        $query = $this->getRepository()->getValidateEmailQuery(\n            $mail,\n            $this->Request()->get('param'),\n            $this->Request()->get('subshopId')\n        );\n\n        $customer = $query->getArrayResult();\n\n        /** @var EmailValidatorInterface $emailValidator */\n        $emailValidator = $this->container->get(EmailValidator::class);\n\n        if (empty($customer) && $emailValidator->isValid($mail)) {\n            $this->Response()->setContent(1);\n        } else {\n            $this->Response()->setContent('');\n        }\n    }\n\n    /**\n     * Redirect the backend user to the frontend, impersonating a customer\n     */\n    public function performOrderAction()\n    {\n        $userId = $this->Request()->getParam('id');\n        $user = $this->get(Connection::class)->fetchAssoc(\n            'SELECT id, email, password, subshopID, language FROM s_user WHERE id = :userId',\n            [\n                ':userId' => $userId,\n            ]\n        );\n\n        if (empty($user['email'])) {\n            return;\n        }\n\n        $shop = $this->getShopRepository()->getActiveById($user['language']);\n        if ($shop === null) {\n            return;\n        }\n\n        session_write_close();\n\n        $this->get(ShopRegistrationServiceInterface::class)->registerShop($shop);\n\n        $session = $this->get('session');\n        $session->clear();\n        $session->migrate(true);\n\n        Shopware()->Session()->offsetSet('sessionId', $session->getId());\n        Shopware()->Container()->set('sessionid', $session->getId());\n\n        Shopware()->Session()->set('Admin', true);\n        Shopware()->System()->_POST = [\n            'email' => $user['email'],\n            'passwordMD5' => $user['password'],\n        ];\n        Shopware()->Modules()->Admin()->sLogin(true);\n\n        $hash = $this->container->get(OptinServiceInterface::class)->add(OptinServiceInterface::TYPE_CUSTOMER_LOGIN_FROM_BACKEND, 300, [\n            'sessionId' => Shopware()->Session()->get('sessionId'),\n            'shopId' => $shop->getId(),\n        ]);\n\n        $url = $this->Front()->Router()->assemble([\n            'action' => 'performOrderRedirect',\n            'hash' => $hash,\n            'fullPath' => true,\n        ]);\n\n        if ($shop->getHost()) {\n            // change the url to the subshop url\n            $url = str_replace('://' . $this->Request()->getHttpHost(), '://' . $shop->getHost(), $url);\n        }\n\n        $this->redirect($url);\n    }\n\n    /**\n     * This Action can be called with a different domain.\n     * So domain depending cookies can be changed.\n     * This is needed when the users want's to perform an order on a different domain.\n     * For example in a different Subshop\n     */\n    public function performOrderRedirectAction()\n    {\n        $hash = $this->Request()->getQuery('hash');\n\n        $optinService = $this->container->get(OptinServiceInterface::class);\n\n        $data = $optinService->get(OptinServiceInterface::TYPE_CUSTOMER_LOGIN_FROM_BACKEND, $hash);\n\n        if ($data === null) {\n            $this->redirect(['module' => 'backend', 'controller' => 'index', 'action' => 'index']);\n        }\n\n        $optinService->delete(OptinServiceInterface::TYPE_CUSTOMER_LOGIN_FROM_BACKEND, $hash);\n\n        $shop = $this->getShopRepository()->getActiveById($data['shopId']);\n        if ($shop === null) {\n            throw new RuntimeException('Shop not found');\n        }\n\n        $path = $shop->getBasePath();\n        if ($path === null || $path === '') {\n            $path = '/';\n        }\n\n        // Update right domain cookies\n        $this->Response()->headers->setCookie(new Cookie('shop', $data['shopId'], 0, $path));\n        $this->Response()->headers->setCookie(new Cookie('sUniqueID', Random::getString(20), 0, $path));\n        $this->Response()->headers->setCookie(new Cookie('session-' . $data['shopId'], $data['sessionId'], 0, $path));\n\n        $this->redirect($shop->getBaseUrl());\n    }\n\n    public function unlockCustomerAction()\n    {\n        $customerId = (int) $this->Request()->getParam('customerId');\n\n        try {\n            /** @var CustomerUnlockServiceInterface $unlockService */\n            $unlockService = $this->get('shopware_account.customer_unlock_service');\n\n            $unlockService->unlock($customerId);\n        } catch (Exception $e) {\n            $this->View()->assign('success', false);\n\n            return;\n        }\n\n        $this->View()->assign('success', true);\n    }\n\n    /**\n     * Returns the shopware model manager\n     *\n     * @return ModelManager\n     */\n    protected function getManager()\n    {\n        if (self::$manager === null) {\n            self::$manager = $this->get('models');\n        }\n\n        return self::$manager;\n    }\n\n    /**\n     * Helper function to get access on the static declared repository\n     *\n     * @return CustomerRepository\n     */\n    protected function getRepository()\n    {\n        if (self::$repository === null) {\n            $repo = $this->getManager()->getRepository(Customer::class);\n            self::$repository = $repo;\n        }\n\n        return self::$repository;\n    }\n\n    /**\n     * Registers the different acl permission for the different controller actions.\n     */\n    protected function initAcl()\n    {\n        $this->addAclPermission('getList', 'read', 'You do not have sufficient rights to view the list of customers.');\n        $this->addAclPermission('getDetail', 'detail', 'You do not have sufficient rights to view the customer detail page.');\n        $this->addAclPermission('getOrders', 'read', 'You do not have sufficient rights to view customer orders.');\n        $this->addAclPermission('getOrderChart', 'read', 'You do not have sufficient rights to view customer orders.');\n        $this->addAclPermission('delete', 'delete', 'You do not have sufficient rights to delete a customers.');\n    }\n\n    /**\n     * Helper function to get access to the shop repository.\n     */\n    private function getShopRepository(): ShopRepository\n    {\n        if ($this->shopRepository === null) {\n            $this->shopRepository = $this->getManager()->getRepository(Shop::class);\n        }\n\n        return $this->shopRepository;\n    }\n\n    /**\n     * Helper function to get access to the group repository.\n     *\n     * @return ModelRepository<Group>\n     */\n    private function getGroupRepository(): ModelRepository\n    {\n        if ($this->groupRepository === null) {\n            $this->groupRepository = $this->getManager()->getRepository(Group::class);\n        }\n\n        return $this->groupRepository;\n    }\n\n    /**\n     * Helper function to get access to the country repository.\n     */\n    private function getCountryRepository(): CountryRepository\n    {\n        if ($this->countryRepository === null) {\n            $this->countryRepository = $this->getManager()->getRepository(Country::class);\n        }\n\n        return $this->countryRepository;\n    }\n\n    /**\n     * Helper function to get access to the order repository.\n     */\n    private function getOrderRepository(): OrderRepository\n    {\n        if ($this->orderRepository === null) {\n            $this->orderRepository = $this->getManager()->getRepository(Order::class);\n        }\n\n        return $this->orderRepository;\n    }\n\n    /**\n     * Helper function to get access to the payment repository.\n     */\n    private function getPaymentRepository(): PaymentRepository\n    {\n        if ($this->paymentRepository === null) {\n            $this->paymentRepository = $this->getManager()->getRepository(Payment::class);\n        }\n\n        return $this->paymentRepository;\n    }\n\n    /**\n     * Helper function to get access to the dispatch repository.\n     */\n    private function getDispatchRepository(): DispatchRepository\n    {\n        if ($this->dispatchRepository === null) {\n            $this->dispatchRepository = $this->getManager()->getRepository(Dispatch::class);\n        }\n\n        return $this->dispatchRepository;\n    }\n\n    /**\n     * Select the customer orders grouped by year and month. Can be filtered over the fromDate and toDate parameter.\n     * If the date of the first founded order not equals with the fromDate, an empty row will be prepend.\n     * If the date of the last founded order  not equals with the fromDate, an empty row will be append.\n     *\n     * @return array[]\n     */\n    private function getChartData(int $customerId): array\n    {\n        // If a from date passed, format it over the \\DateTime object. Otherwise create a new date with today - 1 year\n        $fromDate = $this->Request()->getParam('fromDate');\n        if (empty($fromDate)) {\n            $fromDate = new DateTime();\n            $fromDate->setDate((int) $fromDate->format('Y') - 1, (int) $fromDate->format('m'), (int) $fromDate->format('d'));\n        } else {\n            $fromDate = new DateTime($fromDate);\n        }\n        $fromDateFilter = $fromDate->format('Y-m-d');\n\n        // If a to date passed, format it over the \\DateTime object. Otherwise create a new date with today\n        $toDate = $this->Request()->getParam('toDate');\n        if (empty($toDate)) {\n            $toDate = new DateTime();\n        } else {\n            $toDate = new DateTime($toDate);\n        }\n        $toDateFilter = $toDate->format('Y-m-d');\n\n        $sql = \"\n            SELECT\n                SUM(invoice_amount) as amount,\n                DATE_FORMAT(ordertime, '%Y-%m-01') as `date`\n            FROM s_order\n            WHERE userID = ?\n            AND s_order.status NOT IN (-1, 4)\n            AND ordertime >= ?\n            AND ordertime <= ?\n            GROUP by YEAR(ordertime), MONTH(ordertime)\n        \";\n\n        // Select the orders from the database\n        $orders = $this->get('dbal_connection')->fetchAllAssociative($sql, [$customerId, $fromDateFilter, $toDateFilter]);\n\n        $first = new DateTime($orders[0]['date']);\n        $last = new DateTime($orders[\\count($orders) - 1]['date']);\n\n        // To display the whole time range the user inserted, check if the date of the first order equals the fromDate parameter\n        if ($fromDate->format('Y-m') !== $first->format('Y-m')) {\n            // Create a new dummy order with amount 0 and the date the user inserted.\n            $fromDate->setDate((int) $fromDate->format('Y'), (int) $fromDate->format('m'), 1);\n            $emptyOrder = ['amount' => '0.00', 'date' => $fromDate->format('Y-m-d')];\n            array_unshift($orders, $emptyOrder);\n        }\n\n        // To display the whole time range the user inserted, check if the date of the last order equals the toDate parameter\n        if ($toDate->format('Y-m') !== $last->format('Y-m')) {\n            $toDate->setDate((int) $toDate->format('Y'), (int) $toDate->format('m'), 1);\n            $orders[] = ['amount' => '0.00', 'date' => $toDate->format('Y-m-d')];\n        }\n\n        return $orders;\n    }\n\n    /**\n     * Internal helper function to get a single customer\n     *\n     * @return array<string, mixed>\n     */\n    private function getCustomer(int $id): array\n    {\n        $query = $this->getRepository()->getCustomerDetailQuery($id);\n\n        $data = $query->getOneOrNullResult(AbstractQuery::HYDRATE_ARRAY);\n\n        $orderInfo = [\n            'orderCount' => $data['orderCount'],\n            'amount' => $data['amount'],\n            'shopName' => $data['shopName'],\n            'language' => $data['language'],\n            'canceledOrderAmount' => $data['canceledOrderAmount'],\n            'default_billing_address_id' => $data['default_billing_address_id'],\n            'default_shipping_address_id' => $data['default_shipping_address_id'],\n        ];\n\n        $data = array_merge($orderInfo, $data[0]);\n        $birthday = $data['birthday'];\n\n        if ($birthday instanceof DateTimeInterface) {\n            $data['birthday'] = $birthday->format('d.m.Y');\n        }\n\n        $namespace = Shopware()->Container()->get('snippets')->getNamespace('frontend/salutation');\n        $data['defaultBillingAddress']['salutationSnippet'] = $namespace->get($data['defaultBillingAddress']['salutation']);\n        $data['defaultShippingAddress']['salutationSnippet'] = $namespace->get($data['defaultShippingAddress']['salutation']);\n        $data['customerStreamIds'] = $this->fetchCustomerStreams($id);\n\n        if ($data['firstLogin'] instanceof DateTimeInterface && $data['firstLogin']->getTimestamp() < 0) {\n            $data['firstLogin'] = new DateTime('@0');\n        }\n\n        if ($data['lastLogin'] instanceof DateTimeInterface && $data['lastLogin']->getTimestamp() < 0) {\n            $data['lastLogin'] = new DateTime('@0');\n        }\n\n        return $data;\n    }\n\n    /**\n     * Helper method to prepare the customer for saving\n     *\n     * @param array<string, mixed> $params\n     */\n    private function prepareCustomerData(array $params, Customer $customer, ?PaymentData $paymentData): array\n    {\n        if (!empty($params['groupKey'])) {\n            $params['group'] = $this->getGroupRepository()->findOneBy(['key' => $params['groupKey']]);\n        } else {\n            unset($params['group']);\n        }\n\n        if (!empty($params['languageId'])) {\n            $params['languageSubShop'] = $this->getShopRepository()->find($params['languageId']);\n        } else {\n            unset($params['languageSubShop'], $params['shop']);\n        }\n\n        if (!empty($params['priceGroupId'])) {\n            $params['priceGroup'] = $this->getManager()->find(PriceGroup::class, $params['priceGroupId']);\n        } else {\n            $params['priceGroup'] = null;\n        }\n\n        // If a different payment method is selected, it must also be placed in the \"paymentPreset\" so that the risk management that does not reset.\n        if ($customer->getPaymentId() !== $params['paymentId']) {\n            $params['paymentPreset'] = $params['paymentId'];\n        }\n\n        if (empty($params['shipping'][0]['firstName']) && empty($params['shipping'][0]['lastName'])) {\n            // Shipping params are empty use the billing ones\n            $params['shipping'][0] = $params['billing'][0];\n        }\n\n        if ($paymentData && !empty($params['paymentData'])) {\n            $paymentData->fromArray(array_shift($params['paymentData']));\n        }\n\n        unset($params['paymentData'], $params['attribute']);\n\n        if (isset($params['billing'])) {\n            $params['billing'] = $params['billing'][0];\n        }\n        if (isset($params['shipping'])) {\n            $params['shipping'] = $params['shipping'][0];\n        }\n\n        if (!isset($params['birthday'])) {\n            $params['birthday'] = null;\n        }\n\n        return $params;\n    }\n\n    private function fetchCustomerStreams(int $id): string\n    {\n        $query = $this->container->get(Connection::class)->createQueryBuilder();\n\n        $ids = $query->select(['mapping.stream_id'])\n            ->from('s_customer_streams_mapping', 'mapping')\n            ->innerJoin('mapping', 's_customer_streams', 'streams', 'streams.id = mapping.stream_id')\n            ->where('mapping.customer_id = :id')\n            ->addOrderBy('streams.name', 'ASC')\n            ->setParameter(':id', $id)\n            ->execute()\n            ->fetchAll(PDO::FETCH_COLUMN);\n\n        return implode('|', $ids);\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nnamespace Shopware\\Tests\\Functional\\Controllers\\Backend;\n\nuse Enlight_Components_Test_Controller_TestCase;\nuse Enlight_Controller_Response_Response;\nuse Enlight_Controller_Response_ResponseTestCase;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Models\\Country\\Country;\nuse Shopware\\Models\\Customer\\Address;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Customer\\Group;\nuse Shopware\\Models\\Customer\\PaymentData;\nuse Shopware\\Models\\Customer\\Repository;\nuse Shopware\\Models\\Payment\\Payment;\n\nclass CustomerTest extends Enlight_Components_Test_Controller_TestCase\n{\n    /**\n     * @var Repository\n     */\n    protected $repository;\n\n    private ModelManager $manager;\n\n    /**\n     * Standard set up for every test - just disable auth\n     */\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->manager = Shopware()->Models();\n        $this->repository = Shopware()->Models()->getRepository(Customer::class);\n\n        // Disable auth and acl\n        Shopware()->Plugins()->Backend()->Auth()->setNoAuth();\n        Shopware()->Plugins()->Backend()->Auth()->setNoAcl();\n    }\n\n    /**\n     * Test saveAction controller action - change payment mean\n     *\n     * Get a random customer. Change payment method to debit\n     */\n    public function testChangeCustomerPaymentMean(): void\n    {\n        $customer = $this->createDummyCustomer();\n\n        static::assertEquals(0, $customer->getPaymentId());\n\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        static::assertNotNull($customer->getChanged());\n        $params = [\n            'id' => $customer->getId(),\n            'paymentId' => $debit->getId(),\n            'changed' => $customer->getChanged()->format('c'),\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($debit->getId(), $jsonBody['data']['paymentId']);\n\n        $this->manager->refresh($customer);\n        static::assertEquals($debit->getId(), $customer->getPaymentId());\n\n        $this->manager->remove($customer);\n        $this->manager->flush();\n    }\n\n    /**\n     * Test saveAction controller action - new customer with debit payment data\n     */\n    public function testAddCustomerPaymentDataWithDebit(): int\n    {\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        $params = [\n            'paymentId' => $debit->getId(),\n            'email' => 'test@shopware.de',\n            'newPassword' => '222',\n            'paymentData' => [[\n                'accountHolder' => 'Account Holder Name',\n                'accountNumber' => '1234567890',\n                'bankCode' => '2345678901',\n                'bankName' => 'Bank name',\n                'bic' => '',\n                'iban' => '',\n                'useBillingData' => false,\n            ]],\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($debit->getId(), $jsonBody['data']['paymentId']);\n\n        $dummyData = $this->repository->find($this->View()->data['id']);\n        static::assertNotNull($dummyData);\n\n        static::assertEquals($debit->getId(), $dummyData->getPaymentId());\n        static::assertCount(1, $dummyData->getPaymentData()->toArray());\n\n        $paymentDataArray = $dummyData->getPaymentData()->toArray();\n        $paymentData = array_shift($paymentDataArray);\n        static::assertInstanceOf(PaymentData::class, $paymentData);\n        static::assertEquals('Account Holder Name', $paymentData->getAccountHolder());\n        static::assertEquals('1234567890', $paymentData->getAccountNumber());\n        static::assertEquals('2345678901', $paymentData->getBankCode());\n        static::assertEquals('Bank name', $paymentData->getBankName());\n        static::assertEmpty($paymentData->getBic());\n        static::assertEmpty($paymentData->getIban());\n        static::assertFalse($paymentData->getUseBillingData());\n\n        return $dummyData->getId();\n    }\n\n    /**\n     * Test create customer with address\n     */\n    public function testAddCustomerWithAddress(): void\n    {\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        $params = [\n            'paymentId' => $debit->getId(),\n            'email' => 'debit@shopware.de',\n            'newPassword' => '222',\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($debit->getId(), $jsonBody['data']['paymentId']);\n\n        $params = [\n            'id' => null,\n            'defaultAddress' => '',\n            'setDefaultBillingAddress' => true,\n            'setDefaultShippingAddress' => true,\n            'user_id' => $this->View()->data['id'],\n            'company' => 'company',\n            'department' => 'department',\n            'vatId' => 'vatId',\n            'salutation' => 'mr',\n            'salutationSnippet' => '',\n            'title' => 'title',\n            'firstname' => 'firstname',\n            'lastname' => 'lastname',\n            'street' => 'street',\n            'zipcode' => 'zipcode',\n            'city' => 'city',\n            'additionalAddressLine1' => 'additionalAddressLine1',\n            'additionalAddressLine2' => 'additionalAddressLine2',\n            'countryId' => 3,\n            'stateId' => null,\n            'phone' => '',\n            'customer' => [],\n            'country' => [],\n            'state' => [],\n        ];\n\n        $this->reset();\n\n        Shopware()->Plugins()->Backend()->Auth()->setNoAuth();\n        Shopware()->Plugins()->Backend()->Auth()->setNoAcl();\n\n        $this->Request()->setMethod('POST')->setPost($params);\n\n        $this->dispatch('/backend/Address/create');\n\n        /** @var Customer $dummyData */\n        $dummyData = $this->repository->find($params['user_id']);\n\n        static::assertEquals('firstname', $dummyData->getDefaultBillingAddress()->getFirstname());\n        static::assertEquals('lastname', $dummyData->getDefaultBillingAddress()->getLastname());\n        static::assertEquals('department', $dummyData->getDefaultBillingAddress()->getDepartment());\n        static::assertEquals('vatId', $dummyData->getDefaultBillingAddress()->getVatId());\n        static::assertEquals('title', $dummyData->getDefaultBillingAddress()->getTitle());\n        static::assertEquals('zipcode', $dummyData->getDefaultBillingAddress()->getZipcode());\n        static::assertEquals('city', $dummyData->getDefaultBillingAddress()->getCity());\n        static::assertEquals('street', $dummyData->getDefaultBillingAddress()->getStreet());\n        static::assertEquals('additionalAddressLine1', $dummyData->getDefaultBillingAddress()->getAdditionalAddressLine1());\n        static::assertEquals('additionalAddressLine2', $dummyData->getDefaultBillingAddress()->getAdditionalAddressLine2());\n\n        static::assertEquals('firstname', $dummyData->getDefaultShippingAddress()->getFirstname());\n        static::assertEquals('lastname', $dummyData->getDefaultShippingAddress()->getLastname());\n        static::assertEquals('department', $dummyData->getDefaultShippingAddress()->getDepartment());\n        static::assertEquals('vatId', $dummyData->getDefaultShippingAddress()->getVatId());\n        static::assertEquals('title', $dummyData->getDefaultShippingAddress()->getTitle());\n        static::assertEquals('zipcode', $dummyData->getDefaultShippingAddress()->getZipcode());\n        static::assertEquals('city', $dummyData->getDefaultShippingAddress()->getCity());\n        static::assertEquals('street', $dummyData->getDefaultShippingAddress()->getStreet());\n        static::assertEquals('additionalAddressLine1', $dummyData->getDefaultShippingAddress()->getAdditionalAddressLine1());\n        static::assertEquals('additionalAddressLine2', $dummyData->getDefaultShippingAddress()->getAdditionalAddressLine2());\n    }\n\n    /**\n     * Test saveAction controller action - Update an existing customer\n     *\n     * @depends testAddCustomerPaymentDataWithDebit\n     */\n    public function testUpdateCustomerPaymentDataWithSepa($dummyDataId): void\n    {\n        /** @var Customer $dummyData */\n        $dummyData = $this->repository->find($dummyDataId);\n        $sepa = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'sepa']);\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        static::assertEquals($debit->getId(), $dummyData->getPaymentId());\n        static::assertCount(1, $dummyData->getPaymentData()->toArray());\n        static::assertNotNull($dummyData->getChanged());\n\n        $params = [\n            'id' => $dummyData->getId(),\n            'paymentId' => $sepa->getId(),\n            'paymentData' => [[\n                'accountHolder' => '',\n                'accountNumber' => '',\n                'bankCode' => '',\n                'bankName' => 'European bank name',\n                'bic' => '123bic312',\n                'iban' => '456iban654',\n                'useBillingData' => true,\n            ]],\n            'changed' => $dummyData->getChanged()->format('c'),\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($sepa->getId(), $jsonBody['data']['paymentId']);\n\n        $this->manager->refresh($dummyData);\n\n        static::assertEquals($sepa->getId(), $dummyData->getPaymentId());\n        $paymentDataArray = $dummyData->getPaymentData()->toArray();\n        static::assertCount(2, $paymentDataArray);\n\n        // Old debit payment data is still there, it's just not used currently\n        /** @var PaymentData $paymentData */\n        $paymentData = array_shift($paymentDataArray);\n        static::assertInstanceOf(PaymentData::class, $paymentData);\n        static::assertEquals('Account Holder Name', $paymentData->getAccountHolder());\n        static::assertEquals('1234567890', $paymentData->getAccountNumber());\n        static::assertEquals('2345678901', $paymentData->getBankCode());\n        static::assertEquals('Bank name', $paymentData->getBankName());\n        static::assertEmpty($paymentData->getBic());\n        static::assertEmpty($paymentData->getIban());\n        static::assertFalse($paymentData->getUseBillingData());\n\n        // New SEPA data\n        /** @var PaymentData $paymentData */\n        $paymentData = array_shift($paymentDataArray);\n        static::assertInstanceOf(PaymentData::class, $paymentData);\n        static::assertEmpty($paymentData->getAccountHolder());\n        static::assertEmpty($paymentData->getAccountNumber());\n        static::assertEmpty($paymentData->getBankCode());\n        static::assertEquals('European bank name', $paymentData->getBankName());\n        static::assertEquals('123bic312', $paymentData->getBic());\n        static::assertEquals('456iban654', $paymentData->getIban());\n        static::assertTrue($paymentData->getUseBillingData());\n\n        $this->manager->remove($dummyData);\n        $this->manager->flush();\n    }\n\n    /**\n     * Test that performOrderAction() sets the correct cookie settings\n     */\n    public function testPerformOrderAction(): void\n    {\n        $customer = $this->createDummyCustomer();\n\n        $this->Request()->setParams(['id' => $customer->getId()]);\n\n        /** @var Enlight_Controller_Response_ResponseTestCase $response */\n        $response = $this->dispatch('backend/Customer/performOrder');\n\n        $headerLocation = $response->getHeader('Location');\n        $this->reset();\n        static::assertNotEmpty($headerLocation);\n        $newLocation = explode('/backend/', $headerLocation);\n        $response = $this->dispatch('backend/' . $newLocation[1]);\n\n        $cookie = $this->getCookie($response, 'session-1');\n        static::assertIsArray($cookie);\n        static::assertNotEmpty($cookie);\n        static::assertEquals(0, $cookie['expire']);\n    }\n\n    /**\n     * Tests whether a customer cannot be overwritten by a save request that bases on outdated data. (The customer in the\n     * database is newer than that one the request body is based on.)\n     */\n    public function testSaveCustomerOverwriteProtection(): void\n    {\n        // Prepare data for the test\n        $customer = $this->createDummyCustomer();\n        static::assertNotNull($customer->getChanged());\n\n        // Prepare post data for request\n        $postData = [\n            'id' => $customer->getId(),\n            'changed' => $customer->getChanged()->format('c'),\n        ];\n\n        // Try to change the entity with the correct timestamp. This should work\n        $this->Request()\n            ->setMethod('POST')\n            ->setPost($postData);\n        $this->dispatch('backend/Customer/save');\n        static::assertTrue($this->View()->success);\n\n        // Now use an outdated timestamp. The controller should detect this and fail.\n        $postData['changed'] = '2008-08-07 18:11:31';\n        $this->Request()\n            ->setMethod('POST')\n            ->setPost($postData);\n        $this->dispatch('backend/Customer/save');\n        static::assertFalse($this->View()->success);\n    }\n\n    /**\n     * SW-6667 Tests if the customer has an id to check if lazy loading was fetching the data\n     */\n    public function testCustomerId(): void\n    {\n        $dummy = $this->createDummyCustomer();\n\n        $customer = Shopware()->Models()->find(Customer::class, $dummy->getId());\n\n        static::assertInstanceOf(Customer::class, $customer);\n        static::assertEquals('1', $customer->getGroup()->getId());\n    }\n\n    /**\n     * @return array<string, mixed>|null\n     */\n    private function getCookie(Enlight_Controller_Response_Response $response, string $name): ?array\n    {\n        foreach ($response->getCookies() as $cookie) {\n            if ($cookie['name'] === $name) {\n                return $cookie;\n            }\n        }\n\n        return null;\n    }\n\n    private function createDummyCustomer(): Customer\n    {\n        $dummyData = new Customer();\n        $dummyData->setEmail('test@phpunit.org');\n        $dummyData->setGroup($this->manager->find(Group::class, 1));\n        $this->manager->persist($dummyData);\n        $this->manager->flush();\n\n        $address = new Address();\n        $address->fromArray([\n            'firstname' => 'test',\n            'lastname' => 'test',\n            'zipcode' => 'test',\n            'city' => 'test',\n            'customer' => $dummyData,\n            'country' => $this->manager->find(Country::class, 2),\n        ]);\n        $this->manager->persist($address);\n        $this->manager->flush();\n\n        $dummyData->setDefaultBillingAddress($address);\n\n        $this->manager->persist($dummyData);\n        $this->manager->flush();\n\n        return $dummyData;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\ORM\\AbstractQuery;\nuse Shopware\\Bundle\\AccountBundle\\Service\\CustomerUnlockServiceInterface;\nuse Shopware\\Components\\CSRFWhitelistAware;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Components\\Model\\ModelRepository;\nuse Shopware\\Components\\NumberRangeIncrementerInterface;\nuse Shopware\\Components\\OptinServiceInterface;\nuse Shopware\\Components\\Random;\nuse Shopware\\Components\\ShopRegistrationServiceInterface;\nuse Shopware\\Components\\StateTranslatorService;\nuse Shopware\\Components\\StateTranslatorServiceInterface;\nuse Shopware\\Components\\Validator\\EmailValidator;\nuse Shopware\\Components\\Validator\\EmailValidatorInterface;\nuse Shopware\\Models\\Country\\Country;\nuse Shopware\\Models\\Country\\Repository as CountryRepository;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Customer\\Group;\nuse Shopware\\Models\\Customer\\PaymentData;\nuse Shopware\\Models\\Customer\\PriceGroup;\nuse Shopware\\Models\\Customer\\Repository as CustomerRepository;\nuse Shopware\\Models\\Dispatch\\Dispatch;\nuse Shopware\\Models\\Dispatch\\Repository as DispatchRepository;\nuse Shopware\\Models\\Order\\Order;\nuse Shopware\\Models\\Order\\Repository as OrderRepository;\nuse Shopware\\Models\\Payment\\Payment;\nuse Shopware\\Models\\Payment\\Repository as PaymentRepository;\nuse Shopware\\Models\\Shop\\Repository as ShopRepository;\nuse Shopware\\Models\\Shop\\Shop;\nuse Symfony\\Component\\HttpFoundation\\Cookie;\n\nclass Shopware_Controllers_Backend_Customer extends Shopware_Controllers_Backend_ExtJs implements CSRFWhitelistAware\n{\n    /**\n     * Customer repository. Declared for an fast access to the customer repository.\n     * Initialed in the init() function.\n     *\n     * @var CustomerRepository|null\n     */\n    public static $repository;\n\n    /**\n     * Contains the shopware model manager\n     *\n     * @var ModelManager\n     */\n    public static $manager;\n\n    /**\n     * @var ModelRepository<Group>\n     */\n    protected $groupRepository;\n\n    /**\n     * @var ShopRepository\n     */\n    protected $shopRepository;\n\n    /**\n     * @var OrderRepository\n     */\n    protected $orderRepository;\n\n    /**\n     * @var PaymentRepository\n     */\n    protected $paymentRepository;\n\n    /**\n     * @var DispatchRepository\n     */\n    protected $dispatchRepository;\n\n    /**\n     * @var CountryRepository\n     */\n    protected $countryRepository;\n\n    /**\n     * Deactivates the authentication for the performOrderRedirect action\n     * This is used in the performOrder action\n     */\n    public function init()\n    {\n        if ($this->Request()->getActionName() === 'performOrderRedirect') {\n            Shopware()->Plugins()->Backend()->Auth()->setNoAuth();\n        }\n        $currency = Shopware()->Db()->fetchRow(\n            'SELECT templatechar as sign, (symbol_position = 16) currencyAtEnd\n            FROM s_core_currencies\n            WHERE standard = 1'\n        );\n\n        $this->View()->assign('currency', $currency);\n\n        parent::init();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getWhitelistedCSRFActions()\n    {\n        return [\n            'performOrderRedirect',\n        ];\n    }\n\n    /**\n     * Disable template engine for all actions\n     *\n     * @codeCoverageIgnore\n     */\n    public function preDispatch()\n    {\n        if (!\\in_array($this->Request()->getActionName(), ['index', 'load', 'validateEmail'])) {\n            $this->Front()->Plugins()->Json()->setRenderer(true);\n        }\n    }\n\n    public function loadStoresAction()\n    {\n        $orderStatus = $this->getOrderRepository()->getOrderStatusQuery()->getArrayResult();\n        $paymentStatus = $this->getOrderRepository()->getPaymentStatusQuery()->getArrayResult();\n        $payment = $this->getPaymentRepository()->getAllPaymentsQuery()->getArrayResult();\n        $dispatch = $this->getDispatchRepository()->getDispatchesQuery()->getArrayResult();\n        $shop = $this->getShopRepository()->getBaseListQuery()->getArrayResult();\n        $country = $this->getCountryRepository()->getCountriesQuery()->getArrayResult();\n        $customerGroups = $this->getRepository()->getCustomerGroupsQuery()->getArrayResult();\n\n        /** @var StateTranslatorServiceInterface $stateTranslator */\n        $stateTranslator = $this->get('shopware.components.state_translator');\n        $orderStatus = array_map(function ($orderStateItem) use ($stateTranslator) {\n            return $stateTranslator->translateState(StateTranslatorService::STATE_ORDER, $orderStateItem);\n        }, $orderStatus);\n\n        $paymentStatus = array_map(function ($paymentStateItem) use ($stateTranslator) {\n            return $stateTranslator->translateState(StateTranslatorService::STATE_PAYMENT, $paymentStateItem);\n        }, $paymentStatus);\n\n        // Translate payment and dispatch method names.\n        $translationComponent = $this->get(Shopware_Components_Translation::class);\n        $payment = $translationComponent->translatePaymentMethods($payment);\n        $dispatch = $translationComponent->translateDispatchMethods($dispatch);\n\n        $this->View()->assign([\n            'success' => true,\n            'data' => [\n                'orderStatus' => $orderStatus,\n                'paymentStatus' => $paymentStatus,\n                'payment' => $payment,\n                'dispatch' => $dispatch,\n                'shop' => $shop,\n                'country' => $country,\n                'customerGroup' => $customerGroups,\n            ],\n        ]);\n    }\n\n    /**\n     * Event listener method which fires when the customer detail\n     * store is loaded. Returns an array with all data about one customer.\n     * Expects an customer id as parameter to read the detail data\n     * only for one customer.\n     */\n    public function getDetailAction()\n    {\n        $customerId = $this->Request()->getParam('customerID');\n        if ($customerId === null || $customerId === 0) {\n            $this->View()->assign(['success' => false, 'message' => 'No customer id passed']);\n\n            return;\n        }\n\n        $data = $this->getCustomer($customerId);\n        $data['serverTime'] = new DateTime($this->get(Connection::class)->fetchColumn('SELECT NOW()'));\n\n        $this->View()->assign(['success' => true, 'data' => $data, 'total' => 1]);\n    }\n\n    /**\n     * Event listener method which fires when the customer order store is loaded.\n     * Returns an array of all customer orders to display them in an Ext.grid.Panel.\n     * Grants by the limit and start parameter a paging for the customer order data.\n     * The filter parameter allows the user a full text search\n     * over the displayed fields.\n     */\n    public function getOrdersAction()\n    {\n        if (!$this->_isAllowed('read', 'order')) {\n            /** @var Enlight_Components_Snippet_Namespace $namespace */\n            $namespace = Shopware()->Snippets()->getNamespace('backend/customer');\n\n            $this->View()->assign([\n                'success' => false,\n                'data' => $this->Request()->getParams(),\n                'message' => $namespace->get('no_order_rights', 'You do not have sufficient rights to view customer orders.'),\n            ]);\n\n            return;\n        }\n\n        $customerId = $this->Request()->getParam('customerID');\n        if ($customerId === null || $customerId === 0) {\n            $this->View()->assign(['success' => false, 'message' => 'No customer id passed']);\n\n            return;\n        }\n\n        $defaultSort = ['0' => ['property' => 'orderTime', 'direction' => 'DESC']];\n\n        $limit = (int) $this->Request()->getParam('limit', 20);\n        $offset = (int) $this->Request()->getParam('start', 0);\n        $sort = $this->Request()->getParam('sort', $defaultSort);\n        $filter = $this->Request()->getParam('filter');\n        $filter = $filter[0]['value'];\n\n        // Get access on the customer getRepository()\n        $query = $this->getRepository()->getOrdersQuery($customerId, $filter, $sort, $limit, $offset);\n\n        // Returns the total count of the query\n        $totalResult = $this->getManager()->getQueryCount($query);\n\n        // Returns the customer data\n        $orders = $query->getArrayResult();\n\n        $this->View()->assign(['success' => true, 'data' => $orders, 'total' => $totalResult]);\n    }\n\n    /**\n     * Event listener method which fires when the detail page of a customer is loaded.\n     * Returns an array of grouped order data to display them in a line chart.\n     */\n    public function getOrderChartAction()\n    {\n        if (!$this->_isAllowed('read', 'order')) {\n            $namespace = Shopware()->Snippets()->getNamespace('backend/customer');\n\n            $this->View()->assign([\n                'success' => false,\n                'data' => $this->Request()->getParams(),\n                'message' => $namespace->get('no_order_rights', 'You do not have sufficient rights to view customer orders.'),\n            ]);\n\n            return;\n        }\n\n        // Customer id passed?\n        $customerId = (int) $this->Request()->getParam('customerID');\n        if ($customerId === 0) {\n            $this->View()->assign(['success' => false, 'message' => 'No customer id passed']);\n\n            return;\n        }\n        $orders = $this->getChartData($customerId);\n\n        $this->View()->assign(['success' => true, 'data' => $orders]);\n    }\n\n    /**\n     * Saves a single customer. If no customer id passed,\n     * the save function creates a new customer model and persist\n     * it by the shopware model manager.\n     * The sub models billing, shipping and debit will be filled\n     * by the passed parameter arrays billing, shipping and debit.\n     */\n    public function saveAction()\n    {\n        $id = $this->Request()->getParam('id');\n        $paymentId = $this->Request()->getParam('paymentId');\n        $params = $this->Request()->getParams();\n        $paymentData = null;\n\n        /** @var Enlight_Components_Snippet_Namespace $namespace */\n        $namespace = Shopware()->Snippets()->getNamespace('backend/customer');\n\n        // Customer id passed? If this is the case the customer was edited\n        if (!empty($id)) {\n            // Check if the user has the rights to update an existing customer\n            if (!$this->_isAllowed('update', 'customer')) {\n                $this->View()->assign([\n                    'success' => false,\n                    'data' => $this->Request()->getParams(),\n                    'message' => $namespace->get('no_edit_rights', 'You do not have sufficient rights to edit a customer.'),\n                ]);\n\n                return;\n            }\n\n            /** @var Customer $customer */\n            $customer = $this->getRepository()->find((int) $id);\n            /** @var PaymentData $paymentData */\n            $paymentData = $this->getManager()->getRepository(PaymentData::class)->findOneBy(\n                ['customer' => $customer, 'paymentMean' => (int) $paymentId]\n            );\n\n            if ($customer->getChanged() !== null) {\n                // Check whether the customer has been modified in the meantime\n                try {\n                    $changed = new DateTime($params['changed']);\n                } catch (Exception $e) {\n                    // If we have a invalid date caused by imports\n                    $changed = $customer->getChanged();\n                }\n\n                if ($changed->getTimestamp() < 0 && $customer->getChanged()->getTimestamp() < 0) {\n                    $changed = $customer->getChanged();\n                }\n\n                $diff = abs($customer->getChanged()->getTimestamp() - $changed->getTimestamp());\n\n                // We have timestamp conversion issues on Windows Users\n                if ($diff > 1) {\n                    $namespace = Shopware()->Snippets()->getNamespace('backend/customer/controller/main');\n\n                    $this->View()->assign([\n                        'success' => false,\n                        'data' => $this->getCustomer($customer->getId()),\n                        'overwriteAble' => true,\n                        'message' => $namespace->get('customer_has_been_changed', 'The customer has been changed in the meantime. To prevent overwriting these changes, saving the customer was aborted. Please close the customer and re-open it.'),\n                    ]);\n\n                    return;\n                }\n            }\n        } else {\n            // Check if the user has the rights to create a new customer\n            if (!$this->_isAllowed('create', 'customer')) {\n                $this->View()->assign([\n                    'success' => false,\n                    'data' => $this->Request()->getParams(),\n                    'message' => $namespace->get('no_create_rights', 'You do not have sufficient rights to view create a customer.'),\n                ]);\n\n                return;\n            }\n            $customer = new Customer();\n        }\n\n        if (!($paymentData instanceof PaymentData) && !empty($params['paymentData']) && !empty(array_filter($params['paymentData'][0]))) {\n            $paymentData = new PaymentData();\n            $customer->addPaymentData($paymentData);\n\n            /** @var Payment $payment */\n            $payment = $this->getManager()\n                ->getRepository(Payment::class)\n                ->find($paymentId);\n            $paymentData->setPaymentMean($payment);\n        }\n\n        $params = $this->prepareCustomerData($params, $customer, $paymentData);\n\n        // Set parameter to the customer model.\n        $customer->fromArray($params);\n\n        // If user will be activated, but the first login is still 0, because he was in doi-process\n        if ($customer->getActive() && (!$customer->getFirstLogin() || $customer->getFirstLogin()->getTimestamp() === 0)) {\n            $customer->setFirstLogin(new DateTime());\n        }\n\n        $password = $this->Request()->getParam('newPassword');\n\n        // Encode the password with md5\n        if (!empty($password)) {\n            $customer->setPassword($password);\n        }\n\n        if (!$customer->getNumber() && Shopware()->Config()->get('shopwareManagedCustomerNumbers')) {\n            /** @var NumberRangeIncrementerInterface $incrementer */\n            $incrementer = Shopware()->Container()->get(NumberRangeIncrementerInterface::class);\n            $customer->setNumber((string) $incrementer->increment('user'));\n        }\n\n        $this->getManager()->persist($customer);\n        $this->getManager()->flush();\n\n        $this->View()->assign([\n            'success' => true,\n            'data' => $this->getCustomer($customer->getId()),\n        ]);\n    }\n\n    /**\n     * Deletes a single customer or an array of customers from the database.\n     * Expects a single customer id or an array of customer ids which placed in the parameter customers\n     */\n    public function deleteAction()\n    {\n        // get posted customers\n        $customers = $this->Request()->getParam('customers', [['id' => $this->Request()->getParam('id')]]);\n\n        // iterate the customers and add the remove action\n        foreach ($customers as $customer) {\n            $entity = $this->getRepository()->find($customer['id']);\n            if ($entity === null) {\n                continue;\n            }\n            $this->getManager()->remove($entity);\n        }\n        // Performs all of the collected actions.\n        $this->getManager()->flush();\n\n        $this->View()->assign([\n            'success' => true,\n            'data' => $this->Request()->getParams(),\n        ]);\n    }\n\n    /**\n     * Validates the inserted email address\n     */\n    public function validateEmailAction()\n    {\n        Shopware()->Front()->Plugins()->ViewRenderer()->setNoRender();\n\n        $mail = $this->Request()->get('value');\n\n        $query = $this->getRepository()->getValidateEmailQuery(\n            $mail,\n            $this->Request()->get('param'),\n            $this->Request()->get('subshopId')\n        );\n\n        $customer = $query->getArrayResult();\n\n        /** @var EmailValidatorInterface $emailValidator */\n        $emailValidator = $this->container->get(EmailValidator::class);\n\n        if (empty($customer) && $emailValidator->isValid($mail)) {\n            $this->Response()->setContent(1);\n        } else {\n            $this->Response()->setContent('');\n        }\n    }\n\n    /**\n     * Redirect the backend user to the frontend, impersonating a customer\n     */\n    public function performOrderAction()\n    {\n        $userId = $this->Request()->getParam('id');\n        $user = $this->get(Connection::class)->fetchAssoc(\n            'SELECT id, email, password, subshopID, language FROM s_user WHERE id = :userId',\n            [\n                ':userId' => $userId,\n            ]\n        );\n\n        if (empty($user['email'])) {\n            return;\n        }\n\n        $shop = $this->getShopRepository()->getActiveById($user['language']);\n        if ($shop === null) {\n            return;\n        }\n\n        session_write_close();\n\n        $this->get(ShopRegistrationServiceInterface::class)->registerShop($shop);\n\n        $session = $this->get('session');\n        $session->clear();\n        $session->migrate(true);\n\n        Shopware()->Session()->offsetSet('sessionId', $session->getId());\n        Shopware()->Container()->set('sessionid', $session->getId());\n\n        Shopware()->Session()->set('Admin', true);\n        Shopware()->System()->_POST = [\n            'email' => $user['email'],\n            'passwordMD5' => $user['password'],\n        ];\n        Shopware()->Modules()->Admin()->sLogin(true);\n\n        $hash = $this->container->get(OptinServiceInterface::class)->add(OptinServiceInterface::TYPE_CUSTOMER_LOGIN_FROM_BACKEND, 300, [\n            'sessionId' => Shopware()->Session()->get('sessionId'),\n            'shopId' => $shop->getId(),\n        ]);\n\n        $url = $this->Front()->Router()->assemble([\n            'action' => 'performOrderRedirect',\n            'hash' => $hash,\n            'fullPath' => true,\n        ]);\n\n        if ($shop->getHost()) {\n            // change the url to the subshop url\n            $url = str_replace('://' . $this->Request()->getHttpHost(), '://' . $shop->getHost(), $url);\n        }\n\n        $this->redirect($url);\n    }\n\n    /**\n     * This Action can be called with a different domain.\n     * So domain depending cookies can be changed.\n     * This is needed when the users want's to perform an order on a different domain.\n     * For example in a different Subshop\n     */\n    public function performOrderRedirectAction()\n    {\n        $hash = $this->Request()->getQuery('hash');\n\n        $optinService = $this->container->get(OptinServiceInterface::class);\n\n        $data = $optinService->get(OptinServiceInterface::TYPE_CUSTOMER_LOGIN_FROM_BACKEND, $hash);\n\n        if ($data === null) {\n            $this->redirect(['module' => 'backend', 'controller' => 'index', 'action' => 'index']);\n        }\n\n        $optinService->delete(OptinServiceInterface::TYPE_CUSTOMER_LOGIN_FROM_BACKEND, $hash);\n\n        $shop = $this->getShopRepository()->getActiveById($data['shopId']);\n        if ($shop === null) {\n            throw new RuntimeException('Shop not found');\n        }\n\n        $path = $shop->getBasePath();\n        if ($path === null || $path === '') {\n            $path = '/';\n        }\n\n        // Update right domain cookies\n        $this->Response()->headers->setCookie(new Cookie('shop', $data['shopId'], 0, $path));\n        $this->Response()->headers->setCookie(new Cookie('sUniqueID', Random::getString(20), 0, $path));\n        $this->Response()->headers->setCookie(new Cookie('session-' . $data['shopId'], $data['sessionId'], 0, $path));\n\n        $this->redirect($shop->getBaseUrl());\n    }\n\n    public function unlockCustomerAction()\n    {\n        $customerId = (int) $this->Request()->getParam('customerId');\n\n        try {\n            /** @var CustomerUnlockServiceInterface $unlockService */\n            $unlockService = $this->get('shopware_account.customer_unlock_service');\n\n            $unlockService->unlock($customerId);\n        } catch (Exception $e) {\n            $this->View()->assign('success', false);\n\n            return;\n        }\n\n        $this->View()->assign('success', true);\n    }\n\n    /**\n     * Returns the shopware model manager\n     *\n     * @return ModelManager\n     */\n    protected function getManager()\n    {\n        if (self::$manager === null) {\n            self::$manager = $this->get('models');\n        }\n\n        return self::$manager;\n    }\n\n    /**\n     * Helper function to get access on the static declared repository\n     *\n     * @return CustomerRepository\n     */\n    protected function getRepository()\n    {\n        if (self::$repository === null) {\n            $repo = $this->getManager()->getRepository(Customer::class);\n            self::$repository = $repo;\n        }\n\n        return self::$repository;\n    }\n\n    /**\n     * Registers the different acl permission for the different controller actions.\n     */\n    protected function initAcl()\n    {\n        $this->addAclPermission('getList', 'read', 'You do not have sufficient rights to view the list of customers.');\n        $this->addAclPermission('getDetail', 'detail', 'You do not have sufficient rights to view the customer detail page.');\n        $this->addAclPermission('getOrders', 'read', 'You do not have sufficient rights to view customer orders.');\n        $this->addAclPermission('getOrderChart', 'read', 'You do not have sufficient rights to view customer orders.');\n        $this->addAclPermission('delete', 'delete', 'You do not have sufficient rights to delete a customers.');\n    }\n\n    /**\n     * Helper function to get access to the shop repository.\n     */\n    private function getShopRepository(): ShopRepository\n    {\n        if ($this->shopRepository === null) {\n            $this->shopRepository = $this->getManager()->getRepository(Shop::class);\n        }\n\n        return $this->shopRepository;\n    }\n\n    /**\n     * Helper function to get access to the group repository.\n     *\n     * @return ModelRepository<Group>\n     */\n    private function getGroupRepository(): ModelRepository\n    {\n        if ($this->groupRepository === null) {\n            $this->groupRepository = $this->getManager()->getRepository(Group::class);\n        }\n\n        return $this->groupRepository;\n    }\n\n    /**\n     * Helper function to get access to the country repository.\n     */\n    private function getCountryRepository(): CountryRepository\n    {\n        if ($this->countryRepository === null) {\n            $this->countryRepository = $this->getManager()->getRepository(Country::class);\n        }\n\n        return $this->countryRepository;\n    }\n\n    /**\n     * Helper function to get access to the order repository.\n     */\n    private function getOrderRepository(): OrderRepository\n    {\n        if ($this->orderRepository === null) {\n            $this->orderRepository = $this->getManager()->getRepository(Order::class);\n        }\n\n        return $this->orderRepository;\n    }\n\n    /**\n     * Helper function to get access to the payment repository.\n     */\n    private function getPaymentRepository(): PaymentRepository\n    {\n        if ($this->paymentRepository === null) {\n            $this->paymentRepository = $this->getManager()->getRepository(Payment::class);\n        }\n\n        return $this->paymentRepository;\n    }\n\n    /**\n     * Helper function to get access to the dispatch repository.\n     */\n    private function getDispatchRepository(): DispatchRepository\n    {\n        if ($this->dispatchRepository === null) {\n            $this->dispatchRepository = $this->getManager()->getRepository(Dispatch::class);\n        }\n\n        return $this->dispatchRepository;\n    }\n\n    /**\n     * Select the customer orders grouped by year and month. Can be filtered over the fromDate and toDate parameter.\n     * If the date of the first founded order not equals with the fromDate, an empty row will be prepend.\n     * If the date of the last founded order  not equals with the fromDate, an empty row will be append.\n     *\n     * @return array[]\n     */\n    private function getChartData(int $customerId): array\n    {\n        // If a from date passed, format it over the \\DateTime object. Otherwise create a new date with today - 1 year\n        $fromDate = $this->Request()->getParam('fromDate');\n        if (empty($fromDate)) {\n            $fromDate = new DateTime();\n            $fromDate->setDate((int) $fromDate->format('Y') - 1, (int) $fromDate->format('m'), (int) $fromDate->format('d'));\n        } else {\n            $fromDate = new DateTime($fromDate);\n        }\n        $fromDateFilter = $fromDate->format('Y-m-d');\n\n        // If a to date passed, format it over the \\DateTime object. Otherwise create a new date with today\n        $toDate = $this->Request()->getParam('toDate');\n        if (empty($toDate)) {\n            $toDate = new DateTime();\n        } else {\n            $toDate = new DateTime($toDate);\n        }\n        $toDateFilter = $toDate->format('Y-m-d');\n\n        $sql = \"\n            SELECT\n                SUM(invoice_amount) as amount,\n                DATE_FORMAT(ordertime, '%Y-%m-01') as `date`\n            FROM s_order\n            WHERE userID = ?\n            AND s_order.status NOT IN (-1, 4)\n            AND ordertime >= ?\n            AND ordertime <= ?\n            GROUP by YEAR(ordertime), MONTH(ordertime)\n        \";\n\n        // Select the orders from the database\n        $orders = $this->get('dbal_connection')->fetchAllAssociative($sql, [$customerId, $fromDateFilter, $toDateFilter]);\n\n        $first = new DateTime($orders[0]['date']);\n        $last = new DateTime($orders[\\count($orders) - 1]['date']);\n\n        // To display the whole time range the user inserted, check if the date of the first order equals the fromDate parameter\n        if ($fromDate->format('Y-m') !== $first->format('Y-m')) {\n            // Create a new dummy order with amount 0 and the date the user inserted.\n            $fromDate->setDate((int) $fromDate->format('Y'), (int) $fromDate->format('m'), 1);\n            $emptyOrder = ['amount' => '0.00', 'date' => $fromDate->format('Y-m-d')];\n            array_unshift($orders, $emptyOrder);\n        }\n\n        // To display the whole time range the user inserted, check if the date of the last order equals the toDate parameter\n        if ($toDate->format('Y-m') !== $last->format('Y-m')) {\n            $toDate->setDate((int) $toDate->format('Y'), (int) $toDate->format('m'), 1);\n            $orders[] = ['amount' => '0.00', 'date' => $toDate->format('Y-m-d')];\n        }\n\n        return $orders;\n    }\n\n    /**\n     * Internal helper function to get a single customer\n     *\n     * @return array<string, mixed>\n     */\n    private function getCustomer(int $id): array\n    {\n        $query = $this->getRepository()->getCustomerDetailQuery($id);\n\n        $data = $query->getOneOrNullResult(AbstractQuery::HYDRATE_ARRAY);\n\n        $orderInfo = [\n            'orderCount' => $data['orderCount'],\n            'amount' => $data['amount'],\n            'shopName' => $data['shopName'],\n            'language' => $data['language'],\n            'canceledOrderAmount' => $data['canceledOrderAmount'],\n            'default_billing_address_id' => $data['default_billing_address_id'],\n            'default_shipping_address_id' => $data['default_shipping_address_id'],\n        ];\n\n        $data = array_merge($orderInfo, $data[0]);\n        $birthday = $data['birthday'];\n\n        if ($birthday instanceof DateTimeInterface) {\n            $data['birthday'] = $birthday->format('d.m.Y');\n        }\n\n        $namespace = Shopware()->Container()->get('snippets')->getNamespace('frontend/salutation');\n        $data['defaultBillingAddress']['salutationSnippet'] = $namespace->get($data['defaultBillingAddress']['salutation']);\n        $data['defaultShippingAddress']['salutationSnippet'] = $namespace->get($data['defaultShippingAddress']['salutation']);\n        $data['customerStreamIds'] = $this->fetchCustomerStreams($id);\n\n        if ($data['firstLogin'] instanceof DateTimeInterface && $data['firstLogin']->getTimestamp() < 0) {\n            $data['firstLogin'] = new DateTime('@0');\n        }\n\n        if ($data['lastLogin'] instanceof DateTimeInterface && $data['lastLogin']->getTimestamp() < 0) {\n            $data['lastLogin'] = new DateTime('@0');\n        }\n\n        unset($data['sessionId']);\n        unset($data['hashPassword']);\n\n        return $data;\n    }\n\n    /**\n     * Helper method to prepare the customer for saving\n     *\n     * @param array<string, mixed> $params\n     */\n    private function prepareCustomerData(array $params, Customer $customer, ?PaymentData $paymentData): array\n    {\n        if (!empty($params['groupKey'])) {\n            $params['group'] = $this->getGroupRepository()->findOneBy(['key' => $params['groupKey']]);\n        } else {\n            unset($params['group']);\n        }\n\n        if (!empty($params['languageId'])) {\n            $params['languageSubShop'] = $this->getShopRepository()->find($params['languageId']);\n        } else {\n            unset($params['languageSubShop'], $params['shop']);\n        }\n\n        if (!empty($params['priceGroupId'])) {\n            $params['priceGroup'] = $this->getManager()->find(PriceGroup::class, $params['priceGroupId']);\n        } else {\n            $params['priceGroup'] = null;\n        }\n\n        // If a different payment method is selected, it must also be placed in the \"paymentPreset\" so that the risk management that does not reset.\n        if ($customer->getPaymentId() !== $params['paymentId']) {\n            $params['paymentPreset'] = $params['paymentId'];\n        }\n\n        if (empty($params['shipping'][0]['firstName']) && empty($params['shipping'][0]['lastName'])) {\n            // Shipping params are empty use the billing ones\n            $params['shipping'][0] = $params['billing'][0];\n        }\n\n        if ($paymentData && !empty($params['paymentData'])) {\n            $paymentData->fromArray(array_shift($params['paymentData']));\n        }\n\n        unset($params['paymentData'], $params['attribute']);\n\n        if (isset($params['billing'])) {\n            $params['billing'] = $params['billing'][0];\n        }\n        if (isset($params['shipping'])) {\n            $params['shipping'] = $params['shipping'][0];\n        }\n\n        if (!isset($params['birthday'])) {\n            $params['birthday'] = null;\n        }\n\n        return $params;\n    }\n\n    private function fetchCustomerStreams(int $id): string\n    {\n        $query = $this->container->get(Connection::class)->createQueryBuilder();\n\n        $ids = $query->select(['mapping.stream_id'])\n            ->from('s_customer_streams_mapping', 'mapping')\n            ->innerJoin('mapping', 's_customer_streams', 'streams', 'streams.id = mapping.stream_id')\n            ->where('mapping.customer_id = :id')\n            ->addOrderBy('streams.name', 'ASC')\n            ->setParameter(':id', $id)\n            ->execute()\n            ->fetchAll(PDO::FETCH_COLUMN);\n\n        return implode('|', $ids);\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nnamespace Shopware\\Tests\\Functional\\Controllers\\Backend;\n\nuse Enlight_Components_Test_Controller_TestCase;\nuse Enlight_Controller_Response_Response;\nuse Enlight_Controller_Response_ResponseTestCase;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Models\\Country\\Country;\nuse Shopware\\Models\\Customer\\Address;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Customer\\Group;\nuse Shopware\\Models\\Customer\\PaymentData;\nuse Shopware\\Models\\Customer\\Repository;\nuse Shopware\\Models\\Payment\\Payment;\n\nclass CustomerTest extends Enlight_Components_Test_Controller_TestCase\n{\n    /**\n     * @var Repository\n     */\n    protected $repository;\n\n    private ModelManager $manager;\n\n    /**\n     * Standard set up for every test - just disable auth\n     */\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->manager = Shopware()->Models();\n        $this->repository = Shopware()->Models()->getRepository(Customer::class);\n\n        // Disable auth and acl\n        Shopware()->Plugins()->Backend()->Auth()->setNoAuth();\n        Shopware()->Plugins()->Backend()->Auth()->setNoAcl();\n    }\n\n    public function testSensitiveDataIsNotSend(): void\n    {\n        $customer = $this->createDummyCustomer();\n\n        $params = [\n            'customerID' => $customer->getId(),\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/getDetail');\n\n        $body = $this->View()->getAssign();\n        static::assertTrue($body['success']);\n        static::assertArrayNotHasKey('hashPassword', $body['data']);\n        static::assertArrayNotHasKey('sessionId', $body['data']);\n        static::assertEquals('test@phpunit.org', $body['data']['email']);\n    }\n\n    /**\n     * Test saveAction controller action - change payment mean\n     *\n     * Get a random customer. Change payment method to debit\n     */\n    public function testChangeCustomerPaymentMean(): void\n    {\n        $customer = $this->createDummyCustomer();\n\n        static::assertEquals(0, $customer->getPaymentId());\n\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        static::assertNotNull($customer->getChanged());\n        $params = [\n            'id' => $customer->getId(),\n            'paymentId' => $debit->getId(),\n            'changed' => $customer->getChanged()->format('c'),\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($debit->getId(), $jsonBody['data']['paymentId']);\n\n        $this->manager->refresh($customer);\n        static::assertEquals($debit->getId(), $customer->getPaymentId());\n\n        $this->manager->remove($customer);\n        $this->manager->flush();\n    }\n\n    /**\n     * Test saveAction controller action - new customer with debit payment data\n     */\n    public function testAddCustomerPaymentDataWithDebit(): int\n    {\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        $params = [\n            'paymentId' => $debit->getId(),\n            'email' => 'test@shopware.de',\n            'newPassword' => '222',\n            'paymentData' => [[\n                'accountHolder' => 'Account Holder Name',\n                'accountNumber' => '1234567890',\n                'bankCode' => '2345678901',\n                'bankName' => 'Bank name',\n                'bic' => '',\n                'iban' => '',\n                'useBillingData' => false,\n            ]],\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($debit->getId(), $jsonBody['data']['paymentId']);\n\n        $dummyData = $this->repository->find($this->View()->data['id']);\n        static::assertNotNull($dummyData);\n\n        static::assertEquals($debit->getId(), $dummyData->getPaymentId());\n        static::assertCount(1, $dummyData->getPaymentData()->toArray());\n\n        $paymentDataArray = $dummyData->getPaymentData()->toArray();\n        $paymentData = array_shift($paymentDataArray);\n        static::assertInstanceOf(PaymentData::class, $paymentData);\n        static::assertEquals('Account Holder Name', $paymentData->getAccountHolder());\n        static::assertEquals('1234567890', $paymentData->getAccountNumber());\n        static::assertEquals('2345678901', $paymentData->getBankCode());\n        static::assertEquals('Bank name', $paymentData->getBankName());\n        static::assertEmpty($paymentData->getBic());\n        static::assertEmpty($paymentData->getIban());\n        static::assertFalse($paymentData->getUseBillingData());\n\n        return $dummyData->getId();\n    }\n\n    /**\n     * Test create customer with address\n     */\n    public function testAddCustomerWithAddress(): void\n    {\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        $params = [\n            'paymentId' => $debit->getId(),\n            'email' => 'debit@shopware.de',\n            'newPassword' => '222',\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($debit->getId(), $jsonBody['data']['paymentId']);\n\n        $params = [\n            'id' => null,\n            'defaultAddress' => '',\n            'setDefaultBillingAddress' => true,\n            'setDefaultShippingAddress' => true,\n            'user_id' => $this->View()->data['id'],\n            'company' => 'company',\n            'department' => 'department',\n            'vatId' => 'vatId',\n            'salutation' => 'mr',\n            'salutationSnippet' => '',\n            'title' => 'title',\n            'firstname' => 'firstname',\n            'lastname' => 'lastname',\n            'street' => 'street',\n            'zipcode' => 'zipcode',\n            'city' => 'city',\n            'additionalAddressLine1' => 'additionalAddressLine1',\n            'additionalAddressLine2' => 'additionalAddressLine2',\n            'countryId' => 3,\n            'stateId' => null,\n            'phone' => '',\n            'customer' => [],\n            'country' => [],\n            'state' => [],\n        ];\n\n        $this->reset();\n\n        Shopware()->Plugins()->Backend()->Auth()->setNoAuth();\n        Shopware()->Plugins()->Backend()->Auth()->setNoAcl();\n\n        $this->Request()->setMethod('POST')->setPost($params);\n\n        $this->dispatch('/backend/Address/create');\n\n        /** @var Customer $dummyData */\n        $dummyData = $this->repository->find($params['user_id']);\n\n        static::assertEquals('firstname', $dummyData->getDefaultBillingAddress()->getFirstname());\n        static::assertEquals('lastname', $dummyData->getDefaultBillingAddress()->getLastname());\n        static::assertEquals('department', $dummyData->getDefaultBillingAddress()->getDepartment());\n        static::assertEquals('vatId', $dummyData->getDefaultBillingAddress()->getVatId());\n        static::assertEquals('title', $dummyData->getDefaultBillingAddress()->getTitle());\n        static::assertEquals('zipcode', $dummyData->getDefaultBillingAddress()->getZipcode());\n        static::assertEquals('city', $dummyData->getDefaultBillingAddress()->getCity());\n        static::assertEquals('street', $dummyData->getDefaultBillingAddress()->getStreet());\n        static::assertEquals('additionalAddressLine1', $dummyData->getDefaultBillingAddress()->getAdditionalAddressLine1());\n        static::assertEquals('additionalAddressLine2', $dummyData->getDefaultBillingAddress()->getAdditionalAddressLine2());\n\n        static::assertEquals('firstname', $dummyData->getDefaultShippingAddress()->getFirstname());\n        static::assertEquals('lastname', $dummyData->getDefaultShippingAddress()->getLastname());\n        static::assertEquals('department', $dummyData->getDefaultShippingAddress()->getDepartment());\n        static::assertEquals('vatId', $dummyData->getDefaultShippingAddress()->getVatId());\n        static::assertEquals('title', $dummyData->getDefaultShippingAddress()->getTitle());\n        static::assertEquals('zipcode', $dummyData->getDefaultShippingAddress()->getZipcode());\n        static::assertEquals('city', $dummyData->getDefaultShippingAddress()->getCity());\n        static::assertEquals('street', $dummyData->getDefaultShippingAddress()->getStreet());\n        static::assertEquals('additionalAddressLine1', $dummyData->getDefaultShippingAddress()->getAdditionalAddressLine1());\n        static::assertEquals('additionalAddressLine2', $dummyData->getDefaultShippingAddress()->getAdditionalAddressLine2());\n    }\n\n    /**\n     * Test saveAction controller action - Update an existing customer\n     *\n     * @depends testAddCustomerPaymentDataWithDebit\n     */\n    public function testUpdateCustomerPaymentDataWithSepa($dummyDataId): void\n    {\n        /** @var Customer $dummyData */\n        $dummyData = $this->repository->find($dummyDataId);\n        $sepa = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'sepa']);\n        $debit = $this->manager\n            ->getRepository(Payment::class)\n            ->findOneBy(['name' => 'debit']);\n\n        static::assertEquals($debit->getId(), $dummyData->getPaymentId());\n        static::assertCount(1, $dummyData->getPaymentData()->toArray());\n        static::assertNotNull($dummyData->getChanged());\n\n        $params = [\n            'id' => $dummyData->getId(),\n            'paymentId' => $sepa->getId(),\n            'paymentData' => [[\n                'accountHolder' => '',\n                'accountNumber' => '',\n                'bankCode' => '',\n                'bankName' => 'European bank name',\n                'bic' => '123bic312',\n                'iban' => '456iban654',\n                'useBillingData' => true,\n            ]],\n            'changed' => $dummyData->getChanged()->format('c'),\n        ];\n        $this->Request()->setMethod('POST')->setPost($params);\n        $this->dispatch('/backend/Customer/save');\n        $jsonBody = $this->View()->getAssign();\n\n        static::assertTrue($this->View()->success);\n        static::assertEquals($sepa->getId(), $jsonBody['data']['paymentId']);\n\n        $this->manager->refresh($dummyData);\n\n        static::assertEquals($sepa->getId(), $dummyData->getPaymentId());\n        $paymentDataArray = $dummyData->getPaymentData()->toArray();\n        static::assertCount(2, $paymentDataArray);\n\n        // Old debit payment data is still there, it's just not used currently\n        /** @var PaymentData $paymentData */\n        $paymentData = array_shift($paymentDataArray);\n        static::assertInstanceOf(PaymentData::class, $paymentData);\n        static::assertEquals('Account Holder Name', $paymentData->getAccountHolder());\n        static::assertEquals('1234567890', $paymentData->getAccountNumber());\n        static::assertEquals('2345678901', $paymentData->getBankCode());\n        static::assertEquals('Bank name', $paymentData->getBankName());\n        static::assertEmpty($paymentData->getBic());\n        static::assertEmpty($paymentData->getIban());\n        static::assertFalse($paymentData->getUseBillingData());\n\n        // New SEPA data\n        /** @var PaymentData $paymentData */\n        $paymentData = array_shift($paymentDataArray);\n        static::assertInstanceOf(PaymentData::class, $paymentData);\n        static::assertEmpty($paymentData->getAccountHolder());\n        static::assertEmpty($paymentData->getAccountNumber());\n        static::assertEmpty($paymentData->getBankCode());\n        static::assertEquals('European bank name', $paymentData->getBankName());\n        static::assertEquals('123bic312', $paymentData->getBic());\n        static::assertEquals('456iban654', $paymentData->getIban());\n        static::assertTrue($paymentData->getUseBillingData());\n\n        $this->manager->remove($dummyData);\n        $this->manager->flush();\n    }\n\n    /**\n     * Test that performOrderAction() sets the correct cookie settings\n     */\n    public function testPerformOrderAction(): void\n    {\n        $customer = $this->createDummyCustomer();\n\n        $this->Request()->setParams(['id' => $customer->getId()]);\n\n        /** @var Enlight_Controller_Response_ResponseTestCase $response */\n        $response = $this->dispatch('backend/Customer/performOrder');\n\n        $headerLocation = $response->getHeader('Location');\n        $this->reset();\n        static::assertNotEmpty($headerLocation);\n        $newLocation = explode('/backend/', $headerLocation);\n        $response = $this->dispatch('backend/' . $newLocation[1]);\n\n        $cookie = $this->getCookie($response, 'session-1');\n        static::assertIsArray($cookie);\n        static::assertNotEmpty($cookie);\n        static::assertEquals(0, $cookie['expire']);\n    }\n\n    /**\n     * Tests whether a customer cannot be overwritten by a save request that bases on outdated data. (The customer in the\n     * database is newer than that one the request body is based on.)\n     */\n    public function testSaveCustomerOverwriteProtection(): void\n    {\n        // Prepare data for the test\n        $customer = $this->createDummyCustomer();\n        static::assertNotNull($customer->getChanged());\n\n        // Prepare post data for request\n        $postData = [\n            'id' => $customer->getId(),\n            'changed' => $customer->getChanged()->format('c'),\n        ];\n\n        // Try to change the entity with the correct timestamp. This should work\n        $this->Request()\n            ->setMethod('POST')\n            ->setPost($postData);\n        $this->dispatch('backend/Customer/save');\n        static::assertTrue($this->View()->success);\n\n        // Now use an outdated timestamp. The controller should detect this and fail.\n        $postData['changed'] = '2008-08-07 18:11:31';\n        $this->Request()\n            ->setMethod('POST')\n            ->setPost($postData);\n        $this->dispatch('backend/Customer/save');\n        static::assertFalse($this->View()->success);\n    }\n\n    /**\n     * SW-6667 Tests if the customer has an id to check if lazy loading was fetching the data\n     */\n    public function testCustomerId(): void\n    {\n        $dummy = $this->createDummyCustomer();\n\n        $customer = Shopware()->Models()->find(Customer::class, $dummy->getId());\n\n        static::assertInstanceOf(Customer::class, $customer);\n        static::assertEquals('1', $customer->getGroup()->getId());\n    }\n\n    /**\n     * @return array<string, mixed>|null\n     */\n    private function getCookie(Enlight_Controller_Response_Response $response, string $name): ?array\n    {\n        foreach ($response->getCookies() as $cookie) {\n            if ($cookie['name'] === $name) {\n                return $cookie;\n            }\n        }\n\n        return null;\n    }\n\n    private function createDummyCustomer(): Customer\n    {\n        $dummyData = new Customer();\n        $dummyData->setEmail('test@phpunit.org');\n        $dummyData->setGroup($this->manager->find(Group::class, 1));\n        $this->manager->persist($dummyData);\n        $this->manager->flush();\n\n        $address = new Address();\n        $address->fromArray([\n            'firstname' => 'test',\n            'lastname' => 'test',\n            'zipcode' => 'test',\n            'city' => 'test',\n            'customer' => $dummyData,\n            'country' => $this->manager->find(Country::class, 2),\n        ]);\n        $this->manager->persist($address);\n        $this->manager->flush();\n\n        $dummyData->setDefaultBillingAddress($address);\n\n        $this->manager->persist($dummyData);\n        $this->manager->flush();\n\n        return $dummyData;\n    }\n}\n"], "filenames": ["engine/Shopware/Controllers/Backend/Customer.php", "tests/Functional/Controllers/Backend/CustomerTest.php"], "buggy_code_start_loc": [793, 60], "buggy_code_end_loc": [793, 60], "fixing_code_start_loc": [794, 61], "fixing_code_end_loc": [797, 78], "type": "CWE-312", "message": "Shopware is an open source e-commerce software. In affected versions the request for the customer detail view in the backend administration contained sensitive data like the hashed password and the session ID. These fields are now explicitly unset in version 5.7.15. Users are advised to update and may get the update either via the Auto-Updater or directly via the download overview. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-36101", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-12T20:15:12.803", "lastModified": "2022-09-15T18:32:23.620", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shopware is an open source e-commerce software. In affected versions the request for the customer detail view in the backend administration contained sensitive data like the hashed password and the session ID. These fields are now explicitly unset in version 5.7.15. Users are advised to update and may get the update either via the Auto-Updater or directly via the download overview. There are no known workarounds for this issue."}, {"lang": "es", "value": "Shopware es un software de comercio electr\u00f3nico de c\u00f3digo abierto. En las versiones afectadas, la petici\u00f3n de la visualizaci\u00f3n detallada del cliente en la administraci\u00f3n del backend conten\u00eda datos confidenciales como la contrase\u00f1a cifrada y el ID de sesi\u00f3n. Estos campos est\u00e1n ahora expl\u00edcitamente deshabilitados en versi\u00f3n 5.7.15. Es recomendado a usuarios actualizar y que lo hagan por medio del Auto-Updater o directamente por medio del resumen de descargas. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-312"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.7.15", "matchCriteriaId": "8F0E1832-C54F-4482-879F-36B6FABDD9AD"}]}]}], "references": [{"url": "https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-09-2022", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/shopware/shopware/commit/af5cdbc81d60f21b728e1433aeb8837f25938d2a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopware/shopware/security/advisories/GHSA-6vfq-jmxg-g58r", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://packagist.org/packages/shopware/shopware", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/shopware/commit/af5cdbc81d60f21b728e1433aeb8837f25938d2a"}}