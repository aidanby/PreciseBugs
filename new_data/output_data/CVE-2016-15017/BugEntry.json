{"buggy_code": ["<?php\nnamespace Fab\\MediaUpload\\Service;\n\n/*\n * This file is part of the Fab/MediaUpload project under GPLv2 or later.\n *\n * For the full copyright and license information, please read the\n * LICENSE.md file that was distributed with this source code.\n */\n\nuse Fab\\MediaUpload\\FileUpload\\UploadManager;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse Fab\\MediaUpload\\UploadedFile;\n\n/**\n * Uploaded files service.\n */\nclass UploadFileService\n{\n\n    /**\n     * Return the list of uploaded files.\n     *\n     * @param string $property\n     * @return string\n     */\n    public function getUploadedFileList($property = '')\n    {\n        $parameters = GeneralUtility::_GPmerged('tx_mediaupload_pi1');\n        return empty($parameters['uploadedFiles'][$property]) ? '' : $parameters['uploadedFiles'][$property];\n    }\n\n    /**\n     * Return an array of uploaded files, done in a previous step.\n     *\n     * @param string $property\n     * @throws \\Exception\n     * @return UploadedFile[]\n     */\n    public function getUploadedFiles($property = '')\n    {\n\n        $files = array();\n        $uploadedFiles = GeneralUtility::trimExplode(',', $this->getUploadedFileList($property), TRUE);\n\n        // Convert uploaded files into array\n        foreach ($uploadedFiles as $uploadedFileName) {\n\n            $temporaryFileNameAndPath = UploadManager::UPLOAD_FOLDER . '/' . $uploadedFileName;\n\n            if (!file_exists($temporaryFileNameAndPath)) {\n                $message = sprintf(\n                    'I could not find file \"%s\". Something went wrong during the upload? Or is it some cache effect?',\n                    $temporaryFileNameAndPath\n                );\n                throw new \\Exception($message, 1389550006);\n            }\n            $fileSize = round(filesize($temporaryFileNameAndPath) / 1000);\n\n            /** @var UploadedFile $uploadedFile */\n            $uploadedFile = GeneralUtility::makeInstance(UploadedFile::class);\n            $uploadedFile->setTemporaryFileNameAndPath($temporaryFileNameAndPath)\n                ->setFileName($uploadedFileName)\n                ->setSize($fileSize);\n\n            $files[] = $uploadedFile;\n        }\n\n        return $files;\n    }\n\n    /**\n     * Return the first uploaded files, done in a previous step.\n     *\n     * @param string $property\n     * @return array\n     */\n    public function getUploadedFile($property = '')\n    {\n        $uploadedFile = array();\n\n        $uploadedFiles = $this->getUploadedFiles($property);\n        if (!empty($uploadedFiles)) {\n            $uploadedFile = current($uploadedFiles);\n        }\n\n        return $uploadedFile;\n    }\n\n    /**\n     * Count uploaded files.\n     *\n     * @param string $property\n     * @return array\n     */\n    public function countUploadedFiles($property = '')\n    {\n        return count(GeneralUtility::trimExplode(',', $this->getUploadedFileList($property), TRUE));\n    }\n\n}\n"], "fixing_code": ["<?php\nnamespace Fab\\MediaUpload\\Service;\n\n/*\n * This file is part of the Fab/MediaUpload project under GPLv2 or later.\n *\n * For the full copyright and license information, please read the\n * LICENSE.md file that was distributed with this source code.\n */\n\nuse Fab\\MediaUpload\\FileUpload\\UploadManager;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse Fab\\MediaUpload\\UploadedFile;\n\n/**\n * Uploaded files service.\n */\nclass UploadFileService\n{\n\n    /**\n     * Return the list of uploaded files.\n     *\n     * @param string $property\n     * @return string\n     */\n    public function getUploadedFileList($property = '')\n    {\n        $parameters = GeneralUtility::_GPmerged('tx_mediaupload_pi1');\n        return empty($parameters['uploadedFiles'][$property]) ? '' : $parameters['uploadedFiles'][$property];\n    }\n\n    /**\n     * Return an array of uploaded files, done in a previous step.\n     *\n     * @param string $property\n     * @return UploadedFile[]\n     * @throws \\InvalidArgumentException\n     * @throws \\RuntimeException\n     */\n    public function getUploadedFiles($property = '')\n    {\n        $files = array();\n        $uploadedFiles = GeneralUtility::trimExplode(',', $this->getUploadedFileList($property), TRUE);\n\n        // Convert uploaded files into array\n        foreach ($uploadedFiles as $uploadedFileName) {\n\n            // Protection against directory traversal\n            $uploadedFileName = str_replace('..' . DIRECTORY_SEPARATOR, '', $uploadedFileName);\n            $temporaryFileNameAndPath = UploadManager::UPLOAD_FOLDER . DIRECTORY_SEPARATOR . $uploadedFileName;\n\n            if (!file_exists($temporaryFileNameAndPath)) {\n                $message = sprintf(\n                    'I could not find file \"%s\". Something went wrong during the upload? Or is it some cache effect?',\n                    $temporaryFileNameAndPath\n                );\n                throw new \\RuntimeException($message, 1389550006);\n            }\n            $fileSize = round(filesize($temporaryFileNameAndPath) / 1000);\n\n            /** @var UploadedFile $uploadedFile */\n            $uploadedFile = GeneralUtility::makeInstance(UploadedFile::class);\n            $uploadedFile->setTemporaryFileNameAndPath($temporaryFileNameAndPath)\n                ->setFileName(basename($uploadedFileName))\n                ->setSize($fileSize);\n\n            $files[] = $uploadedFile;\n        }\n\n        return $files;\n    }\n\n    /**\n     * Return the first uploaded files, done in a previous step.\n     *\n     * @param string $property\n     * @return array\n     */\n    public function getUploadedFile($property = '')\n    {\n        $uploadedFile = array();\n\n        $uploadedFiles = $this->getUploadedFiles($property);\n        if (!empty($uploadedFiles)) {\n            $uploadedFile = current($uploadedFiles);\n        }\n\n        return $uploadedFile;\n    }\n\n    /**\n     * Count uploaded files.\n     *\n     * @param string $property\n     * @return array\n     */\n    public function countUploadedFiles($property = '')\n    {\n        return count(GeneralUtility::trimExplode(',', $this->getUploadedFileList($property), TRUE));\n    }\n\n}\n"], "filenames": ["Classes/Service/UploadFileService.php"], "buggy_code_start_loc": [37], "buggy_code_end_loc": [64], "fixing_code_start_loc": [36], "fixing_code_end_loc": [66], "type": "CWE-22", "message": "A vulnerability has been found in fabarea media_upload and classified as critical. This vulnerability affects the function getUploadedFileList of the file Classes/Service/UploadFileService.php. The manipulation leads to pathname traversal. Upgrading to version 0.9.0 is able to address this issue. The name of the patch is b25d42a4981072321c1a363311d8ea2a4ac8763a. It is recommended to upgrade the affected component. VDB-217786 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2016-15017", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-10T15:15:11.100", "lastModified": "2023-01-14T21:45:53.393", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in fabarea media_upload and classified as critical. This vulnerability affects the function getUploadedFileList of the file Classes/Service/UploadFileService.php. The manipulation leads to pathname traversal. Upgrading to version 0.9.0 is able to address this issue. The name of the patch is b25d42a4981072321c1a363311d8ea2a4ac8763a. It is recommended to upgrade the affected component. VDB-217786 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-21"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ecodev:media_upload:*:*:*:*:*:typo3:*:*", "versionEndExcluding": "0.9.0", "matchCriteriaId": "9CB8D046-6849-415F-BAED-77F7C226FDE2"}]}]}], "references": [{"url": "https://github.com/fabarea/media_upload/commit/b25d42a4981072321c1a363311d8ea2a4ac8763a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fabarea/media_upload/issues/6", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/fabarea/media_upload/releases/tag/0.9.0", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217786", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217786", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fabarea/media_upload/commit/b25d42a4981072321c1a363311d8ea2a4ac8763a"}}