{"buggy_code": ["import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\nimport icon from '../../common/helpers/icon';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Button from '../../common/components/Button';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\n\n/**\n * The `AvatarEditor` component displays a user's avatar along with a dropdown\n * menu which allows the user to upload/remove the avatar.\n *\n * ### Attrs\n *\n * - `className`\n * - `user`\n */\nexport default class AvatarEditor extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Whether or not an avatar upload is in progress.\n     *\n     * @type {Boolean}\n     */\n    this.loading = false;\n\n    /**\n     * Whether or not an image has been dragged over the dropzone.\n     *\n     * @type {Boolean}\n     */\n    this.isDraggedOver = false;\n  }\n\n  view() {\n    const user = this.attrs.user;\n\n    return (\n      <div className={classList(['AvatarEditor', 'Dropdown', this.attrs.className, this.loading && 'loading', this.isDraggedOver && 'dragover'])}>\n        {avatar(user, { loading: 'eager' })}\n        <a\n          className={user.avatarUrl() ? 'Dropdown-toggle' : 'Dropdown-toggle AvatarEditor--noAvatar'}\n          title={app.translator.trans('core.forum.user.avatar_upload_tooltip')}\n          data-toggle=\"dropdown\"\n          onclick={this.quickUpload.bind(this)}\n          ondragover={this.enableDragover.bind(this)}\n          ondragenter={this.enableDragover.bind(this)}\n          ondragleave={this.disableDragover.bind(this)}\n          ondragend={this.disableDragover.bind(this)}\n          ondrop={this.dropUpload.bind(this)}\n        >\n          {this.loading ? (\n            <LoadingIndicator display=\"unset\" size=\"large\" />\n          ) : user.avatarUrl() ? (\n            icon('fas fa-pencil-alt')\n          ) : (\n            icon('fas fa-plus-circle')\n          )}\n        </a>\n        <ul className=\"Dropdown-menu Menu\">{listItems(this.controlItems().toArray())}</ul>\n      </div>\n    );\n  }\n\n  /**\n   * Get the items in the edit avatar dropdown menu.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  controlItems() {\n    const items = new ItemList();\n\n    items.add(\n      'upload',\n      <Button icon=\"fas fa-upload\" onclick={this.openPicker.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_upload_button')}\n      </Button>\n    );\n\n    items.add(\n      'remove',\n      <Button icon=\"fas fa-times\" onclick={this.remove.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_remove_button')}\n      </Button>\n    );\n\n    return items;\n  }\n\n  /**\n   * Enable dragover style\n   *\n   * @param {DragEvent} e\n   */\n  enableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = true;\n  }\n\n  /**\n   * Disable dragover style\n   *\n   * @param {DragEvent} e\n   */\n  disableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n  }\n\n  /**\n   * Upload avatar when file is dropped into dropzone.\n   *\n   * @param {DragEvent} e\n   */\n  dropUpload(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n    this.upload(e.dataTransfer.files[0]);\n  }\n\n  /**\n   * If the user doesn't have an avatar, there's no point in showing the\n   * controls dropdown, because only one option would be viable: uploading.\n   * Thus, when the avatar editor's dropdown toggle button is clicked, we prompt\n   * the user to upload an avatar immediately.\n   *\n   * @param {MouseEvent} e\n   */\n  quickUpload(e) {\n    if (!this.attrs.user.avatarUrl()) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.openPicker();\n    }\n  }\n\n  /**\n   * Upload avatar using file picker\n   */\n  openPicker() {\n    if (this.loading) return;\n\n    // Create a hidden HTML input element and click on it so the user can select\n    // an avatar file. Once they have, we will upload it via the API.\n    const $input = $('<input type=\"file\" accept=\".jpg, .jpeg, .png, .bmp, .gif\">');\n\n    $input\n      .appendTo('body')\n      .hide()\n      .click()\n      .on('input', (e) => {\n        this.upload($(e.target)[0].files[0]);\n      });\n  }\n\n  /**\n   * Upload avatar\n   *\n   * @param {File} file\n   */\n  upload(file) {\n    if (this.loading) return;\n\n    const user = this.attrs.user;\n    const data = new FormData();\n    data.append('avatar', file);\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'POST',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n        serialize: (raw) => raw,\n        body: data,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * Remove the user's avatar.\n   */\n  remove() {\n    const user = this.attrs.user;\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'DELETE',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * After a successful upload/removal, push the updated user data into the\n   * store, and force a recomputation of the user's avatar color.\n   *\n   * @param {object} response\n   * @protected\n   */\n  success(response) {\n    app.store.pushPayload(response);\n    delete this.attrs.user.avatarColor;\n\n    this.loading = false;\n    m.redraw();\n  }\n\n  /**\n   * If avatar upload/removal fails, stop loading.\n   *\n   * @param {object} response\n   * @protected\n   */\n  failure(response) {\n    this.loading = false;\n    m.redraw();\n  }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Foundation\\ValidationException;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Intervention\\Image\\Image;\nuse Intervention\\Image\\ImageManager;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass UploadFaviconController extends UploadImageController\n{\n    protected $filePathSettingKey = 'favicon_path';\n\n    protected $filenamePrefix = 'favicon';\n\n    /**\n     * @var TranslatorInterface\n     */\n    protected $translator;\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory, TranslatorInterface $translator, ImageManager $imageManager)\n    {\n        parent::__construct($settings, $filesystemFactory);\n\n        $this->translator = $translator;\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function makeImage(UploadedFileInterface $file): Image\n    {\n        $this->fileExtension = pathinfo($file->getClientFilename(), PATHINFO_EXTENSION);\n\n        if ($this->fileExtension === 'ico') {\n            // @todo remove in 2.0\n            throw new ValidationException([\n                'message' => strtr($this->translator->trans('validation.mimes'), [\n                    ':attribute' => 'favicon',\n                    ':values' => 'jpeg,png,gif,webp',\n                ])\n            ]);\n        }\n\n        $encodedImage = $this->imageManager->make($file->getStream())->resize(64, 64, function ($constraint) {\n            $constraint->aspectRatio();\n            $constraint->upsize();\n        })->encode('png');\n\n        $this->fileExtension = 'png';\n\n        return $encodedImage;\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Intervention\\Image\\Image;\nuse Intervention\\Image\\ImageManager;\nuse Psr\\Http\\Message\\UploadedFileInterface;\n\nclass UploadLogoController extends UploadImageController\n{\n    protected $filePathSettingKey = 'logo_path';\n\n    protected $filenamePrefix = 'logo';\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory, ImageManager $imageManager)\n    {\n        parent::__construct($settings, $filesystemFactory);\n\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function makeImage(UploadedFileInterface $file): Image\n    {\n        $encodedImage = $this->imageManager->make($file->getStream())->heighten(60, function ($constraint) {\n            $constraint->upsize();\n        })->encode('png');\n\n        return $encodedImage;\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\User;\n\nuse Flarum\\Foundation\\AbstractValidator;\nuse Flarum\\Foundation\\ValidationException;\nuse Illuminate\\Validation\\Factory;\nuse Intervention\\Image\\Exception\\NotReadableException;\nuse Intervention\\Image\\ImageManager;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Symfony\\Component\\Mime\\MimeTypes;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass AvatarValidator extends AbstractValidator\n{\n    /**\n     * @var \\Illuminate\\Validation\\Validator\n     */\n    protected $laravelValidator;\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    public function __construct(Factory $validator, TranslatorInterface $translator, ImageManager $imageManager)\n    {\n        parent::__construct($validator, $translator);\n\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * Throw an exception if a model is not valid.\n     *\n     * @param array $attributes\n     */\n    public function assertValid(array $attributes)\n    {\n        $this->laravelValidator = $this->makeValidator($attributes);\n\n        $this->assertFileRequired($attributes['avatar']);\n        $this->assertFileMimes($attributes['avatar']);\n        $this->assertFileSize($attributes['avatar']);\n    }\n\n    protected function assertFileRequired(UploadedFileInterface $file)\n    {\n        $error = $file->getError();\n\n        if ($error !== UPLOAD_ERR_OK) {\n            if ($error === UPLOAD_ERR_INI_SIZE || $error === UPLOAD_ERR_FORM_SIZE) {\n                $this->raise('file_too_large');\n            }\n\n            if ($error === UPLOAD_ERR_NO_FILE) {\n                $this->raise('required');\n            }\n\n            $this->raise('file_upload_failed');\n        }\n    }\n\n    protected function assertFileMimes(UploadedFileInterface $file)\n    {\n        $allowedTypes = $this->getAllowedTypes();\n\n        // Block PHP files masquerading as images\n        $phpExtensions = ['php', 'php3', 'php4', 'php5', 'phtml'];\n        $fileExtension = pathinfo($file->getClientFilename(), PATHINFO_EXTENSION);\n\n        if (in_array(trim(strtolower($fileExtension)), $phpExtensions)) {\n            $this->raise('mimes', [':values' => implode(', ', $allowedTypes)]);\n        }\n\n        $guessedExtension = MimeTypes::getDefault()->getExtensions($file->getClientMediaType())[0] ?? null;\n\n        if (! in_array($guessedExtension, $allowedTypes)) {\n            $this->raise('mimes', [':values' => implode(', ', $allowedTypes)]);\n        }\n\n        try {\n            $this->imageManager->make($file->getStream());\n        } catch (NotReadableException $_e) {\n            $this->raise('image');\n        }\n    }\n\n    protected function assertFileSize(UploadedFileInterface $file)\n    {\n        $maxSize = $this->getMaxSize();\n\n        if ($file->getSize() / 1024 > $maxSize) {\n            $this->raise('max.file', [':max' => $maxSize], 'max');\n        }\n    }\n\n    protected function raise($error, array $parameters = [], $rule = null)\n    {\n        // When we switched to intl ICU message format, the translation parameters\n        // have become required to be in the format `{param}`.\n        // Therefore we cannot use the translator to replace the string params.\n        // We use the laravel validator to make the replacements instead.\n        $message = $this->laravelValidator->makeReplacements(\n            $this->translator->trans(\"validation.$error\"),\n            'avatar',\n            $rule ?? $error,\n            array_values($parameters)\n        );\n\n        throw new ValidationException(['avatar' => $message]);\n    }\n\n    protected function getMaxSize()\n    {\n        return 2048;\n    }\n\n    protected function getAllowedTypes()\n    {\n        return ['jpeg', 'jpg', 'png', 'bmp', 'gif'];\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\User\\Command;\n\nuse Flarum\\Foundation\\DispatchEventsTrait;\nuse Flarum\\User\\AvatarUploader;\nuse Flarum\\User\\AvatarValidator;\nuse Flarum\\User\\Event\\AvatarSaving;\nuse Flarum\\User\\UserRepository;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\nuse Intervention\\Image\\ImageManager;\n\nclass UploadAvatarHandler\n{\n    use DispatchEventsTrait;\n\n    /**\n     * @var \\Flarum\\User\\UserRepository\n     */\n    protected $users;\n\n    /**\n     * @var AvatarUploader\n     */\n    protected $uploader;\n\n    /**\n     * @var \\Flarum\\User\\AvatarValidator\n     */\n    protected $validator;\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    /**\n     * @param Dispatcher $events\n     * @param UserRepository $users\n     * @param AvatarUploader $uploader\n     * @param AvatarValidator $validator\n     */\n    public function __construct(Dispatcher $events, UserRepository $users, AvatarUploader $uploader, AvatarValidator $validator, ImageManager $imageManager)\n    {\n        $this->events = $events;\n        $this->users = $users;\n        $this->uploader = $uploader;\n        $this->validator = $validator;\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * @param UploadAvatar $command\n     * @return \\Flarum\\User\\User\n     * @throws \\Flarum\\User\\Exception\\PermissionDeniedException\n     * @throws \\Flarum\\Foundation\\ValidationException\n     */\n    public function handle(UploadAvatar $command)\n    {\n        $actor = $command->actor;\n\n        $user = $this->users->findOrFail($command->userId);\n\n        if ($actor->id !== $user->id) {\n            $actor->assertCan('edit', $user);\n        }\n\n        $this->validator->assertValid(['avatar' => $command->file]);\n\n        $image = $this->imageManager->make($command->file->getStream());\n\n        $this->events->dispatch(\n            new AvatarSaving($user, $actor, $image)\n        );\n\n        $this->uploader->upload($user, $image);\n\n        $user->save();\n\n        $this->dispatchEventsFor($user, $actor);\n\n        return $user;\n    }\n}\n"], "fixing_code": ["import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\nimport icon from '../../common/helpers/icon';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Button from '../../common/components/Button';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\n\n/**\n * The `AvatarEditor` component displays a user's avatar along with a dropdown\n * menu which allows the user to upload/remove the avatar.\n *\n * ### Attrs\n *\n * - `className`\n * - `user`\n */\nexport default class AvatarEditor extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Whether or not an avatar upload is in progress.\n     *\n     * @type {Boolean}\n     */\n    this.loading = false;\n\n    /**\n     * Whether or not an image has been dragged over the dropzone.\n     *\n     * @type {Boolean}\n     */\n    this.isDraggedOver = false;\n  }\n\n  view() {\n    const user = this.attrs.user;\n\n    return (\n      <div className={classList(['AvatarEditor', 'Dropdown', this.attrs.className, this.loading && 'loading', this.isDraggedOver && 'dragover'])}>\n        {avatar(user, { loading: 'eager' })}\n        <a\n          className={user.avatarUrl() ? 'Dropdown-toggle' : 'Dropdown-toggle AvatarEditor--noAvatar'}\n          title={app.translator.trans('core.forum.user.avatar_upload_tooltip')}\n          data-toggle=\"dropdown\"\n          onclick={this.quickUpload.bind(this)}\n          ondragover={this.enableDragover.bind(this)}\n          ondragenter={this.enableDragover.bind(this)}\n          ondragleave={this.disableDragover.bind(this)}\n          ondragend={this.disableDragover.bind(this)}\n          ondrop={this.dropUpload.bind(this)}\n        >\n          {this.loading ? (\n            <LoadingIndicator display=\"unset\" size=\"large\" />\n          ) : user.avatarUrl() ? (\n            icon('fas fa-pencil-alt')\n          ) : (\n            icon('fas fa-plus-circle')\n          )}\n        </a>\n        <ul className=\"Dropdown-menu Menu\">{listItems(this.controlItems().toArray())}</ul>\n      </div>\n    );\n  }\n\n  /**\n   * Get the items in the edit avatar dropdown menu.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  controlItems() {\n    const items = new ItemList();\n\n    items.add(\n      'upload',\n      <Button icon=\"fas fa-upload\" onclick={this.openPicker.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_upload_button')}\n      </Button>\n    );\n\n    items.add(\n      'remove',\n      <Button icon=\"fas fa-times\" onclick={this.remove.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_remove_button')}\n      </Button>\n    );\n\n    return items;\n  }\n\n  /**\n   * Enable dragover style\n   *\n   * @param {DragEvent} e\n   */\n  enableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = true;\n  }\n\n  /**\n   * Disable dragover style\n   *\n   * @param {DragEvent} e\n   */\n  disableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n  }\n\n  /**\n   * Upload avatar when file is dropped into dropzone.\n   *\n   * @param {DragEvent} e\n   */\n  dropUpload(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n    this.upload(e.dataTransfer.files[0]);\n  }\n\n  /**\n   * If the user doesn't have an avatar, there's no point in showing the\n   * controls dropdown, because only one option would be viable: uploading.\n   * Thus, when the avatar editor's dropdown toggle button is clicked, we prompt\n   * the user to upload an avatar immediately.\n   *\n   * @param {MouseEvent} e\n   */\n  quickUpload(e) {\n    if (!this.attrs.user.avatarUrl()) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.openPicker();\n    }\n  }\n\n  /**\n   * Upload avatar using file picker\n   */\n  openPicker() {\n    if (this.loading) return;\n\n    // Create a hidden HTML input element and click on it so the user can select\n    // an avatar file. Once they have, we will upload it via the API.\n    const $input = $('<input type=\"file\" accept=\".jpg, .jpeg, .png, .bmp, .gif\">');\n\n    $input\n      .appendTo('body')\n      .hide()\n      .click()\n      .on('input', (e) => {\n        this.upload($(e.target)[0].files[0]);\n      });\n  }\n\n  /**\n   * Upload avatar\n   *\n   * @param {File} file\n   */\n  upload(file) {\n    if (this.loading) return;\n\n    const user = this.attrs.user;\n    const data = new FormData();\n    data.append('avatar', file);\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'POST',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n        serialize: (raw) => raw,\n        body: data,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * Remove the user's avatar.\n   */\n  remove() {\n    const user = this.attrs.user;\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'DELETE',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * After a successful upload/removal, push the updated user data into the\n   * store, and force a re-computation of the user's avatar color.\n   *\n   * @param {object} response\n   * @protected\n   */\n  success(response) {\n    app.store.pushPayload(response);\n    delete this.attrs.user.avatarColor;\n\n    this.loading = false;\n    m.redraw();\n  }\n\n  /**\n   * If avatar upload/removal fails, stop loading.\n   *\n   * @param {object} response\n   * @protected\n   */\n  failure(response) {\n    this.loading = false;\n    m.redraw();\n  }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Foundation\\ValidationException;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Intervention\\Image\\Image;\nuse Intervention\\Image\\ImageManager;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass UploadFaviconController extends UploadImageController\n{\n    protected $filePathSettingKey = 'favicon_path';\n\n    protected $filenamePrefix = 'favicon';\n\n    /**\n     * @var TranslatorInterface\n     */\n    protected $translator;\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory, TranslatorInterface $translator, ImageManager $imageManager)\n    {\n        parent::__construct($settings, $filesystemFactory);\n\n        $this->translator = $translator;\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function makeImage(UploadedFileInterface $file): Image\n    {\n        $this->fileExtension = pathinfo($file->getClientFilename(), PATHINFO_EXTENSION);\n\n        if ($this->fileExtension === 'ico') {\n            // @todo remove in 2.0\n            throw new ValidationException([\n                'message' => strtr($this->translator->trans('validation.mimes'), [\n                    ':attribute' => 'favicon',\n                    ':values' => 'jpeg,png,gif,webp',\n                ])\n            ]);\n        }\n\n        $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->resize(64, 64, function ($constraint) {\n            $constraint->aspectRatio();\n            $constraint->upsize();\n        })->encode('png');\n\n        $this->fileExtension = 'png';\n\n        return $encodedImage;\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Intervention\\Image\\Image;\nuse Intervention\\Image\\ImageManager;\nuse Psr\\Http\\Message\\UploadedFileInterface;\n\nclass UploadLogoController extends UploadImageController\n{\n    protected $filePathSettingKey = 'logo_path';\n\n    protected $filenamePrefix = 'logo';\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory, ImageManager $imageManager)\n    {\n        parent::__construct($settings, $filesystemFactory);\n\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function makeImage(UploadedFileInterface $file): Image\n    {\n        $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->heighten(60, function ($constraint) {\n            $constraint->upsize();\n        })->encode('png');\n\n        return $encodedImage;\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\User;\n\nuse Flarum\\Foundation\\AbstractValidator;\nuse Flarum\\Foundation\\ValidationException;\nuse Illuminate\\Validation\\Factory;\nuse Intervention\\Image\\Exception\\NotReadableException;\nuse Intervention\\Image\\ImageManager;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Symfony\\Component\\Mime\\MimeTypes;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass AvatarValidator extends AbstractValidator\n{\n    /**\n     * @var \\Illuminate\\Validation\\Validator\n     */\n    protected $laravelValidator;\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    public function __construct(Factory $validator, TranslatorInterface $translator, ImageManager $imageManager)\n    {\n        parent::__construct($validator, $translator);\n\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * Throw an exception if a model is not valid.\n     *\n     * @param array $attributes\n     */\n    public function assertValid(array $attributes)\n    {\n        $this->laravelValidator = $this->makeValidator($attributes);\n\n        $this->assertFileRequired($attributes['avatar']);\n        $this->assertFileMimes($attributes['avatar']);\n        $this->assertFileSize($attributes['avatar']);\n    }\n\n    protected function assertFileRequired(UploadedFileInterface $file)\n    {\n        $error = $file->getError();\n\n        if ($error !== UPLOAD_ERR_OK) {\n            if ($error === UPLOAD_ERR_INI_SIZE || $error === UPLOAD_ERR_FORM_SIZE) {\n                $this->raise('file_too_large');\n            }\n\n            if ($error === UPLOAD_ERR_NO_FILE) {\n                $this->raise('required');\n            }\n\n            $this->raise('file_upload_failed');\n        }\n    }\n\n    protected function assertFileMimes(UploadedFileInterface $file)\n    {\n        $allowedTypes = $this->getAllowedTypes();\n\n        // Block PHP files masquerading as images\n        $phpExtensions = ['php', 'php3', 'php4', 'php5', 'phtml'];\n        $fileExtension = pathinfo($file->getClientFilename(), PATHINFO_EXTENSION);\n\n        if (in_array(trim(strtolower($fileExtension)), $phpExtensions)) {\n            $this->raise('mimes', [':values' => implode(', ', $allowedTypes)]);\n        }\n\n        $guessedExtension = MimeTypes::getDefault()->getExtensions($file->getClientMediaType())[0] ?? null;\n\n        if (! in_array($guessedExtension, $allowedTypes)) {\n            $this->raise('mimes', [':values' => implode(', ', $allowedTypes)]);\n        }\n\n        try {\n            $this->imageManager->make($file->getStream()->getMetadata('uri'));\n        } catch (NotReadableException $_e) {\n            $this->raise('image');\n        }\n    }\n\n    protected function assertFileSize(UploadedFileInterface $file)\n    {\n        $maxSize = $this->getMaxSize();\n\n        if ($file->getSize() / 1024 > $maxSize) {\n            $this->raise('max.file', [':max' => $maxSize], 'max');\n        }\n    }\n\n    protected function raise($error, array $parameters = [], $rule = null)\n    {\n        // When we switched to intl ICU message format, the translation parameters\n        // have become required to be in the format `{param}`.\n        // Therefore we cannot use the translator to replace the string params.\n        // We use the laravel validator to make the replacements instead.\n        $message = $this->laravelValidator->makeReplacements(\n            $this->translator->trans(\"validation.$error\"),\n            'avatar',\n            $rule ?? $error,\n            array_values($parameters)\n        );\n\n        throw new ValidationException(['avatar' => $message]);\n    }\n\n    protected function getMaxSize()\n    {\n        return 2048;\n    }\n\n    protected function getAllowedTypes()\n    {\n        return ['jpeg', 'jpg', 'png', 'bmp', 'gif'];\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\User\\Command;\n\nuse Flarum\\Foundation\\DispatchEventsTrait;\nuse Flarum\\User\\AvatarUploader;\nuse Flarum\\User\\AvatarValidator;\nuse Flarum\\User\\Event\\AvatarSaving;\nuse Flarum\\User\\UserRepository;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\nuse Intervention\\Image\\ImageManager;\n\nclass UploadAvatarHandler\n{\n    use DispatchEventsTrait;\n\n    /**\n     * @var \\Flarum\\User\\UserRepository\n     */\n    protected $users;\n\n    /**\n     * @var AvatarUploader\n     */\n    protected $uploader;\n\n    /**\n     * @var \\Flarum\\User\\AvatarValidator\n     */\n    protected $validator;\n\n    /**\n     * @var ImageManager\n     */\n    protected $imageManager;\n\n    /**\n     * @param Dispatcher $events\n     * @param UserRepository $users\n     * @param AvatarUploader $uploader\n     * @param AvatarValidator $validator\n     */\n    public function __construct(Dispatcher $events, UserRepository $users, AvatarUploader $uploader, AvatarValidator $validator, ImageManager $imageManager)\n    {\n        $this->events = $events;\n        $this->users = $users;\n        $this->uploader = $uploader;\n        $this->validator = $validator;\n        $this->imageManager = $imageManager;\n    }\n\n    /**\n     * @param UploadAvatar $command\n     * @return \\Flarum\\User\\User\n     * @throws \\Flarum\\User\\Exception\\PermissionDeniedException\n     * @throws \\Flarum\\Foundation\\ValidationException\n     */\n    public function handle(UploadAvatar $command)\n    {\n        $actor = $command->actor;\n\n        $user = $this->users->findOrFail($command->userId);\n\n        if ($actor->id !== $user->id) {\n            $actor->assertCan('edit', $user);\n        }\n\n        $this->validator->assertValid(['avatar' => $command->file]);\n\n        $image = $this->imageManager->make($command->file->getStream()->getMetadata('uri'));\n\n        $this->events->dispatch(\n            new AvatarSaving($user, $actor, $image)\n        );\n\n        $this->uploader->upload($user, $image);\n\n        $user->save();\n\n        $this->dispatchEventsFor($user, $actor);\n\n        return $user;\n    }\n}\n"], "filenames": ["framework/core/js/src/forum/components/AvatarEditor.js", "framework/core/src/Api/Controller/UploadFaviconController.php", "framework/core/src/Api/Controller/UploadLogoController.php", "framework/core/src/User/AvatarValidator.php", "framework/core/src/User/Command/UploadAvatarHandler.php"], "buggy_code_start_loc": [207, 65, 41, 90, 77], "buggy_code_end_loc": [208, 66, 42, 91, 78], "fixing_code_start_loc": [207, 65, 41, 90, 77], "fixing_code_end_loc": [208, 66, 42, 91, 78], "type": "CWE-918", "message": "Flarum is an open source forum software. Flarum is affected by a vulnerability that allows an attacker to conduct a Blind Server-Side Request Forgery (SSRF) attack or disclose any file on the server, even with a basic user account on any Flarum forum. By uploading a file containing a URL and spoofing the MIME type, an attacker can manipulate the application to execute unintended actions. The vulnerability is due to the behavior of the `intervention/image` package, which attempts to interpret the supplied file contents as a URL, which then fetches its contents. This allows an attacker to exploit the vulnerability to perform SSRF attacks, disclose local file contents, or conduct a blind oracle attack. This has been patched in Flarum version 1.8.0. Users are advised to upgrade. Users unable to upgrade may disable PHP's `allow_url_fopen` which will prevent the fetching of external files via URLs as a temporary workaround for the SSRF aspect of the vulnerability.", "other": {"cve": {"id": "CVE-2023-40033", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-16T21:15:09.987", "lastModified": "2023-08-25T18:10:15.893", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Flarum is an open source forum software. Flarum is affected by a vulnerability that allows an attacker to conduct a Blind Server-Side Request Forgery (SSRF) attack or disclose any file on the server, even with a basic user account on any Flarum forum. By uploading a file containing a URL and spoofing the MIME type, an attacker can manipulate the application to execute unintended actions. The vulnerability is due to the behavior of the `intervention/image` package, which attempts to interpret the supplied file contents as a URL, which then fetches its contents. This allows an attacker to exploit the vulnerability to perform SSRF attacks, disclose local file contents, or conduct a blind oracle attack. This has been patched in Flarum version 1.8.0. Users are advised to upgrade. Users unable to upgrade may disable PHP's `allow_url_fopen` which will prevent the fetching of external files via URLs as a temporary workaround for the SSRF aspect of the vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:flarum:flarum:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8.0", "matchCriteriaId": "A2171054-A339-41DC-9280-C90AD2727BBC"}]}]}], "references": [{"url": "https://github.com/flarum/framework/commit/d1059c1cc79fe61f9538f3da55e8f42abbede570", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/flarum/framework/security/advisories/GHSA-67c6-q4j4-hccg", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/flarum/framework/commit/d1059c1cc79fe61f9538f3da55e8f42abbede570"}}