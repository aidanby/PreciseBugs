{"buggy_code": ["<?php\n/**\n * Change-Interwikilinks Plugin\n *\n * @license    GPL 2 (http://www.gnu.org/licenses/gpl.html)\n * @author     Florian Schmitz floele at gmail dot com\n */\n \nif(!defined('DOKU_INC')) define('DOKU_INC',realpath(dirname(__FILE__).'/../../').'/');\nif(!defined('DOKU_PLUGIN')) define('DOKU_PLUGIN',DOKU_INC.'lib/plugins/');\nrequire_once(DOKU_PLUGIN.'syntax.php');\n \n/**\n * All DokuWiki plugins to extend the parser/rendering mechanism\n * need to inherit from this class\n */\nclass syntax_plugin_changelinks extends DokuWiki_Syntax_Plugin {\n \n    /**\n     * return some info\n     */\n    function getInfo(){\n        return array(\n            'author' => 'Florian Schmitz',\n            'email'  => 'floele@gmail.com',\n            'date'   => '2005-12-18',\n            'name'   => 'Change-Interwikilinks Plugin',\n            'desc'   => 'Changes the functionality of interwikilinks',\n            'url'    => 'http://flyspray.org/',\n        );\n    }\n \n    /**\n     * What kind of syntax are we?\n     */\n    function getType(){\n        return 'substition';\n    }\n \n    /**\n     * Where to sort in?\n     */\n    function getSort(){\n        return 299;\n    }\n \n    /**\n     * Connect pattern to lexer\n     */\n     \n    function connectTo($mode) {\n        // Word boundaries?\n        $this->Lexer->addSpecialPattern(\"\\[\\[.+?\\]\\]\",$mode,'plugin_changelinks');\n    }\n \n    /**\n     * Handle the match\n     */\n    function handle($match, $state, $pos, &$handler){\n        // Strip the opening and closing markup\n        $link = preg_replace(array('/^\\[\\[/','/\\]\\]$/u'),'',$match);\n        \n        // Split title from URL\n        $link = preg_split('/\\|/u',$link,2);\n        if ( !isset($link[1]) ) {\n            $link[1] = NULL;\n        } else if ( preg_match('/^\\{\\{[^\\}]+\\}\\}$/',$link[1]) ) {\n            // If the title is an image, convert it to an array containing the image details\n            $link[1] = Doku_Handler_Parse_Media($link[1]);\n        }\n        $link[0] = trim($link[0]);\n\n        //decide which kind of link it is\n\n        if ( preg_match('/^[a-zA-Z]+>{1}.*$/u',$link[0]) ) {\n        // Interwiki\n            $interwiki = preg_split('/>/u',$link[0]);\n            $handler->_addCall(\n                'interwikilink',\n                array($link[0],$link[1],strtolower($interwiki[0]),$interwiki[1]),\n                $pos\n                );\n        } elseif ( preg_match('/^\\\\\\\\\\\\\\\\[\\w.:?\\-;,]+?\\\\\\\\/u',$link[0]) ) {\n        // Windows Share\n            $handler->_addCall(\n                'windowssharelink',\n                array($link[0],$link[1]),\n                $pos\n                );\n        } elseif ( preg_match('#^([a-z0-9\\-\\.+]+?)://#i',$link[0]) ) {\n        // external link (accepts all protocols)\n            $handler->_addCall(\n                    'externallink',\n                    array($link[0],$link[1]),\n                    $pos\n                    );\n        } elseif ( preg_match('#([a-z0-9\\-_.]+?)@([\\w\\-]+\\.([\\w\\-\\.]+\\.)*[\\w]+)#i',$link[0]) ) {\n        // E-Mail\n            $handler->_addCall(\n                'emaillink',\n                array($link[0],$link[1]),\n                $pos\n                );\n        } elseif ( preg_match('!^#.+!',$link[0]) ){\n        // local link\n            $handler->_addCall(\n                'locallink',\n                array(substr($link[0],1),$link[1]),\n                $pos\n                );\n        } else {\n            return array($link[0],$link[1]);\n        }\n    }            \n \n    /**\n     * Create output\n     */\n    function render($mode, &$renderer, $data) {\n        if($mode == 'xhtml') {\n            global $conf;\n            $id = $data[0];\n            $name = $data[1];\n           \n            //prepare for formating\n            $link['target'] = $conf['target']['wiki'];\n            $link['style']  = '';\n            $link['pre']    = '';\n            $link['suf']    = '';\n            $link['more']   = '';\n            $link['class']  = 'internallink';\n            $link['url']    = DOKU_INTERNAL_LINK . $id;\n            $link['name']   = ($name) ? $name : $id;\n            $link['title']  = ($name) ? $name : $id;\n            //add search string\n            if($search){\n                ($conf['userewrite']) ? $link['url'].='?s=' : $link['url'].='&amp;s=';\n                $link['url'] .= urlencode($search);\n            }\n    \n            //output formatted\n            $renderer->doc .= $renderer->_formatLink($link);\n        }\n        return true;\n    }\n     \n}\n \n//Setup VIM: ex: et ts=4 enc=utf-8 :\n?>"], "fixing_code": ["<?php\n/**\n * Change-Interwikilinks Plugin\n *\n * @license    GPL 2 (http://www.gnu.org/licenses/gpl.html)\n * @author     Florian Schmitz floele at gmail dot com\n */\n \nif(!defined('DOKU_INC')) define('DOKU_INC',realpath(dirname(__FILE__).'/../../').'/');\nif(!defined('DOKU_PLUGIN')) define('DOKU_PLUGIN',DOKU_INC.'lib/plugins/');\nrequire_once(DOKU_PLUGIN.'syntax.php');\n \n/**\n * All DokuWiki plugins to extend the parser/rendering mechanism\n * need to inherit from this class\n */\nclass syntax_plugin_changelinks extends DokuWiki_Syntax_Plugin {\n \n    /**\n     * return some info\n     */\n    function getInfo(){\n        return array(\n            'author' => 'Florian Schmitz',\n            'email'  => 'floele@gmail.com',\n            'date'   => '2005-12-18',\n            'name'   => 'Change-Interwikilinks Plugin',\n            'desc'   => 'Changes the functionality of interwikilinks',\n            'url'    => 'http://flyspray.org/',\n        );\n    }\n \n    /**\n     * What kind of syntax are we?\n     */\n    function getType(){\n        return 'substition';\n    }\n \n    /**\n     * Where to sort in?\n     */\n    function getSort(){\n        return 299;\n    }\n \n    /**\n     * Connect pattern to lexer\n     */\n     \n    function connectTo($mode) {\n        // Word boundaries?\n        $this->Lexer->addSpecialPattern(\"\\[\\[.+?\\]\\]\",$mode,'plugin_changelinks');\n    }\n \n    /**\n     * Handle the match\n     */\n    function handle($match, $state, $pos, &$handler){\n        // Strip the opening and closing markup\n        $link = preg_replace(array('/^\\[\\[/','/\\]\\]$/u'),'',$match);\n        \n        // Split title from URL\n        $link = preg_split('/\\|/u',$link,2);\n        if ( !isset($link[1]) ) {\n            $link[1] = NULL;\n        } else if ( preg_match('/^\\{\\{[^\\}]+\\}\\}$/',$link[1]) ) {\n            // If the title is an image, convert it to an array containing the image details\n            $link[1] = Doku_Handler_Parse_Media($link[1]);\n        }\n        $link[0] = trim($link[0]);\n\n        //decide which kind of link it is\n\n        if ( preg_match('/^[a-zA-Z]+>{1}.*$/u',$link[0]) ) {\n        // Interwiki\n            $interwiki = preg_split('/>/u',$link[0]);\n            $handler->_addCall(\n                'interwikilink',\n                array($link[0],$link[1],strtolower($interwiki[0]),$interwiki[1]),\n                $pos\n                );\n        } elseif ( preg_match('/^\\\\\\\\\\\\\\\\[\\w.:?\\-;,]+?\\\\\\\\/u',$link[0]) ) {\n        // Windows Share\n            $handler->_addCall(\n                'windowssharelink',\n                array($link[0],$link[1]),\n                $pos\n                );\n        } elseif ( preg_match('#^([a-z0-9\\-\\.+]+?)://#i',$link[0]) ) {\n        // external link (accepts all protocols)\n            $handler->_addCall(\n                    'externallink',\n                    array($link[0],$link[1]),\n                    $pos\n                    );\n        } elseif ( preg_match('#([a-z0-9\\-_.]+?)@([\\w\\-]+\\.([\\w\\-\\.]+\\.)*[\\w]+)#i',$link[0]) ) {\n        // E-Mail\n            $handler->_addCall(\n                'emaillink',\n                array($link[0],$link[1]),\n                $pos\n                );\n        } elseif ( preg_match('!^#.+!',$link[0]) ){\n        // local link\n            $handler->_addCall(\n                'locallink',\n                array(substr($link[0],1),$link[1]),\n                $pos\n                );\n        } else {\n            return array($link[0],$link[1]);\n        }\n    }            \n \n    /**\n     * Create output\n     */\n    function render($mode, &$renderer, $data) {\n        if($mode == 'xhtml') {\n            global $conf;\n            $id = $data[0];\n            $name = $data[1];\n           \n            //prepare for formating\n            $link['target'] = $conf['target']['wiki'];\n            $link['style']  = '';\n            $link['pre']    = '';\n            $link['suf']    = '';\n            $link['more']   = '';\n            $link['class']  = 'internallink';\n            $link['url']    = DOKU_INTERNAL_LINK . $id;\n         \n            if(is_array($name)){\n               $link['name']   = (isset($name['title'])) ? hsc($name['title']) : hsc($id);\n               $link['title'] = $id;\n            } else{\n               $link['name']   = ($name) ? hsc($name) : hsc($id);\n               $link['title'] = ($name) ? $name : $id;\n            }\n\n            //add search string\n            if($search){\n                ($conf['userewrite']) ? $link['url'].='?s=' : $link['url'].='&amp;s=';\n                $link['url'] .= urlencode($search);\n            }\n    \n            //output formatted\n            $renderer->doc .= $renderer->_formatLink($link);\n        }\n        return true;\n    }\n     \n}\n \n//Setup VIM: ex: et ts=4 enc=utf-8 :\n?>\n"], "filenames": ["plugins/dokuwiki/lib/plugins/changelinks/syntax.php"], "buggy_code_start_loc": [133], "buggy_code_end_loc": [151], "fixing_code_start_loc": [133], "fixing_code_end_loc": [158], "type": "CWE-79", "message": "Stored XSS vulnerability in Flyspray 1.0-rc4 before 1.0-rc6 allows an authenticated user to inject JavaScript to gain administrator privileges and also to execute JavaScript against other users (including unauthenticated users), via the name, title, or id parameter to plugins/dokuwiki/lib/plugins/changelinks/syntax.php.", "other": {"cve": {"id": "CVE-2017-15214", "sourceIdentifier": "cve@mitre.org", "published": "2017-10-11T01:32:55.287", "lastModified": "2017-10-27T18:54:31.137", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Stored XSS vulnerability in Flyspray 1.0-rc4 before 1.0-rc6 allows an authenticated user to inject JavaScript to gain administrator privileges and also to execute JavaScript against other users (including unauthenticated users), via the name, title, or id parameter to plugins/dokuwiki/lib/plugins/changelinks/syntax.php."}, {"lang": "es", "value": "Cross-Site Scripting (XSS) persistente en Flyspray en versiones anteriores a 1.0-rc6 permite que un usuario autenticado inyecte JavaScript para obtener privilegios de administrador y tambi\u00e9n ejecute JavaScript contra otros usuarios (incluyendo a los que no se hayan autenticado) mediante los par\u00e1metros name, title o id en plugins/dokuwiki/lib/plugins/changelinks/syntax.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:flyspray:flyspray:1.0:rc4:*:*:*:*:*:*", "matchCriteriaId": "26A4FBFF-F162-49A9-9373-6DE517B6264E"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/10/07/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/Flyspray/flyspray/commit/00cfae5661124f9d67ac6733db61b2bfee34dccc", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Flyspray/flyspray/releases/tag/v1.0-rc6", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Flyspray/flyspray/commit/00cfae5661124f9d67ac6733db61b2bfee34dccc"}}