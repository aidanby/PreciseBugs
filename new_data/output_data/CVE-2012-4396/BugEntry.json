{"buggy_code": ["<?php\n/**\n * Copyright (c) 2011 Jakob Sack <mail@jakobsack.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n/**\n * This class manages our calendar objects\n */\nclass OC_Calendar_Object{\n\t/**\n\t * @brief Returns all objects of a calendar\n\t * @param integer $id\n\t * @return array\n\t *\n\t * The objects are associative arrays. You'll find the original vObject in\n\t * ['calendardata']\n\t */\n\tpublic static function all($id){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE calendarid = ?' );\n\t\t$result = $stmt->execute(array($id));\n\n\t\t$calendarobjects = array();\n\t\twhile( $row = $result->fetchRow()){\n\t\t\t$calendarobjects[] = $row;\n\t\t}\n\n\t\treturn $calendarobjects;\n\t}\n\n\t/**\n\t * @brief Returns all objects of a calendar between $start and $end\n\t * @param integer $id\n\t * @param DateTime $start\n\t * @param DateTime $end\n\t * @return array\n\t *\n\t * The objects are associative arrays. You'll find the original vObject\n\t * in ['calendardata']\n\t */\n\tpublic static function allInPeriod($id, $start, $end){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE calendarid = ?'\n\t\t.' AND ((startdate >= ? AND startdate <= ? AND repeating = 0)'\n\t\t.' OR (enddate >= ? AND enddate <= ? AND repeating = 0)'\n\t\t.' OR (startdate <= ? AND repeating = 1))' );\n\t\t$start = self::getUTCforMDB($start);\n\t\t$end = self::getUTCforMDB($end);\n\t\t$result = $stmt->execute(array($id,\n\t\t\t\t\t$start, $end,\n\t\t\t\t\t$start, $end,\n\t\t\t\t\t$end));\n\n\t\t$calendarobjects = array();\n\t\twhile( $row = $result->fetchRow()){\n\t\t\t$calendarobjects[] = $row;\n\t\t}\n\n\t\treturn $calendarobjects;\n\t}\n\n\t/**\n\t * @brief Returns an object\n\t * @param integer $id\n\t * @return associative array\n\t */\n\tpublic static function find($id){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE id = ?' );\n\t\t$result = $stmt->execute(array($id));\n\n\t\treturn $result->fetchRow();\n\t}\n\n\t/**\n\t * @brief finds an object by its DAV Data\n\t * @param integer $cid Calendar id\n\t * @param string $uri the uri ('filename')\n\t * @return associative array\n\t */\n\tpublic static function findWhereDAVDataIs($cid,$uri){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE calendarid = ? AND uri = ?' );\n\t\t$result = $stmt->execute(array($cid,$uri));\n\n\t\treturn $result->fetchRow();\n\t}\n\n\t/**\n\t * @brief Adds an object\n\t * @param integer $id Calendar id\n\t * @param string $data  object\n\t * @return insertid\n\t */\n\tpublic static function add($id,$data){\n\t\t$object = OC_VObject::parse($data);\n\t\tOC_Calendar_App::loadCategoriesFromVCalendar($object);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\tif(is_null($uid)){\n\t\t\t$object->setUID();\n\t\t\t$data = $object->serialize();\n\t\t}\n\n\t\t$uri = 'owncloud-'.md5($data.rand().time()).'.ics';\n\n\t\t$stmt = OCP\\DB::prepare( 'INSERT INTO *PREFIX*calendar_objects (calendarid,objecttype,startdate,enddate,repeating,summary,calendardata,uri,lastmodified) VALUES(?,?,?,?,?,?,?,?,?)' );\n\t\t$stmt->execute(array($id,$type,$startdate,$enddate,$repeating,$summary,$data,$uri,time()));\n\t\t$object_id = OCP\\DB::insertid('*PREFIX*calendar_objects');\n\n\t\tOC_Calendar_Calendar::touchCalendar($id);\n\n\t\treturn $object_id;\n\t}\n\n\t/**\n\t * @brief Adds an object with the data provided by sabredav\n\t * @param integer $id Calendar id\n\t * @param string $uri   the uri the card will have\n\t * @param string $data  object\n\t * @return insertid\n\t */\n\tpublic static function addFromDAVData($id,$uri,$data){\n\t\t$object = OC_VObject::parse($data);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\t$stmt = OCP\\DB::prepare( 'INSERT INTO *PREFIX*calendar_objects (calendarid,objecttype,startdate,enddate,repeating,summary,calendardata,uri,lastmodified) VALUES(?,?,?,?,?,?,?,?,?)' );\n\t\t$stmt->execute(array($id,$type,$startdate,$enddate,$repeating,$summary,$data,$uri,time()));\n\t\t$object_id = OCP\\DB::insertid('*PREFIX*calendar_objects');\n\n\t\tOC_Calendar_Calendar::touchCalendar($id);\n\n\t\treturn $object_id;\n\t}\n\n\t/**\n\t * @brief edits an object\n\t * @param integer $id id of object\n\t * @param string $data  object\n\t * @return boolean\n\t */\n\tpublic static function edit($id, $data){\n\t\t$oldobject = self::find($id);\n\n\t\t$object = OC_VObject::parse($data);\n\t\tOC_Calendar_App::loadCategoriesFromVCalendar($object);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\t$stmt = OCP\\DB::prepare( 'UPDATE *PREFIX*calendar_objects SET objecttype=?,startdate=?,enddate=?,repeating=?,summary=?,calendardata=?, lastmodified = ? WHERE id = ?' );\n\t\t$stmt->execute(array($type,$startdate,$enddate,$repeating,$summary,$data,time(),$id));\n\n\t\tOC_Calendar_Calendar::touchCalendar($oldobject['calendarid']);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief edits an object with the data provided by sabredav\n\t * @param integer $id calendar id\n\t * @param string $uri   the uri of the object\n\t * @param string $data  object\n\t * @return boolean\n\t */\n\tpublic static function editFromDAVData($cid,$uri,$data){\n\t\t$oldobject = self::findWhereDAVDataIs($cid,$uri);\n\n\t\t$object = OC_VObject::parse($data);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\t$stmt = OCP\\DB::prepare( 'UPDATE *PREFIX*calendar_objects SET objecttype=?,startdate=?,enddate=?,repeating=?,summary=?,calendardata=?, lastmodified = ? WHERE id = ?' );\n\t\t$stmt->execute(array($type,$startdate,$enddate,$repeating,$summary,$data,time(),$oldobject['id']));\n\n\t\tOC_Calendar_Calendar::touchCalendar($oldobject['calendarid']);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief deletes an object\n\t * @param integer $id id of object\n\t * @return boolean\n\t */\n\tpublic static function delete($id){\n\t\t$oldobject = self::find($id);\n\t\t$stmt = OCP\\DB::prepare( 'DELETE FROM *PREFIX*calendar_objects WHERE id = ?' );\n\t\t$stmt->execute(array($id));\n\t\tOC_Calendar_Calendar::touchCalendar($oldobject['calendarid']);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief deletes an  object with the data provided by sabredav\n\t * @param integer $cid calendar id\n\t * @param string $uri the uri of the object\n\t * @return boolean\n\t */\n\tpublic static function deleteFromDAVData($cid,$uri){\n\t\t$stmt = OCP\\DB::prepare( 'DELETE FROM *PREFIX*calendar_objects WHERE calendarid = ? AND uri=?' );\n\t\t$stmt->execute(array($cid,$uri));\n\t\tOC_Calendar_Calendar::touchCalendar($cid);\n\n\t\treturn true;\n\t}\n\n\tpublic static function moveToCalendar($id, $calendarid){\n\t\t$stmt = OCP\\DB::prepare( 'UPDATE *PREFIX*calendar_objects SET calendarid=? WHERE id = ?' );\n\t\t$stmt->execute(array($calendarid,$id));\n\n\t\tOC_Calendar_Calendar::touchCalendar($id);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief Extracts data from a vObject-Object\n\t * @param Sabre_VObject $object\n\t * @return array\n\t *\n\t * [type, start, end, summary, repeating, uid]\n\t */\n\tprotected static function extractData($object){\n\t\t$return = array('',null,null,'',0,null);\n\n\t\t// Child to use\n\t\t$children = 0;\n\t\t$use = null;\n\t\tforeach($object->children as $property){\n\t\t\tif($property->name == 'VEVENT'){\n\t\t\t\t$children++;\n\t\t\t\t$thisone = true;\n\n\t\t\t\tforeach($property->children as &$element){\n\t\t\t\t\tif($element->name == 'RECURRENCE-ID'){\n\t\t\t\t\t\t$thisone = false;\n\t\t\t\t\t}\n\t\t\t\t} unset($element);\n\n\t\t\t\tif($thisone){\n\t\t\t\t\t$use = $property;\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif($property->name == 'VTODO' || $property->name == 'VJOURNAL'){\n\t\t\t\t$return[0] = $property->name;\n\t\t\t\tforeach($property->children as &$element){\n\t\t\t\t\tif($element->name == 'SUMMARY'){\n\t\t\t\t\t\t$return[3] = $element->value;\n\t\t\t\t\t}\n\t\t\t\t\telseif($element->name == 'UID'){\n\t\t\t\t\t\t$return[5] = $element->value;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Only one VTODO or VJOURNAL per object\n\t\t\t\t// (only one UID per object but a UID is required by a VTODO =>\n\t\t\t\t//    one VTODO per object)\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// find the data\n\t\tif(!is_null($use)){\n\t\t\t$return[0] = $use->name;\n\t\t\tforeach($use->children as $property){\n\t\t\t\tif($property->name == 'DTSTART'){\n\t\t\t\t\t$return[1] = self::getUTCforMDB($property->getDateTime());\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'DTEND'){\n\t\t\t\t\t$return[2] = self::getUTCforMDB($property->getDateTime());\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'SUMMARY'){\n\t\t\t\t\t$return[3] = $property->value;\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'RRULE'){\n\t\t\t\t\t$return[4] = 1;\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'UID'){\n\t\t\t\t\t$return[5] = $property->value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More than one child means reoccuring!\n\t\tif($children > 1){\n\t\t\t$return[4] = 1;\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * @brief DateTime to UTC string\n\t * @param DateTime $datetime The date to convert\n\t * @returns date as YYYY-MM-DD hh:mm\n\t *\n\t * This function creates a date string that can be used by MDB2.\n\t * Furthermore it converts the time to UTC.\n\t */\n\tprotected static function getUTCforMDB($datetime){\n\t\treturn date('Y-m-d H:i', $datetime->format('U') - $datetime->getOffset());\n\t}\n\n\tpublic static function getDTEndFromVEvent($vevent)\n\t{\n\t\tif ($vevent->DTEND) {\n\t\t\t$dtend = $vevent->DTEND;\n\t\t}else{\n\t\t\t$dtend = clone $vevent->DTSTART;\n\t\t\t// clone creates a shallow copy, also clone DateTime\n\t\t\t$dtend->setDateTime(clone $dtend->getDateTime(), $dtend->getDateType());\n\t\t\tif ($vevent->DURATION){\n\t\t\t\t$duration = strval($vevent->DURATION);\n\t\t\t\t$invert = 0;\n\t\t\t\tif ($duration[0] == '-'){\n\t\t\t\t\t$duration = substr($duration, 1);\n\t\t\t\t\t$invert = 1;\n\t\t\t\t}\n\t\t\t\tif ($duration[0] == '+'){\n\t\t\t\t\t$duration = substr($duration, 1);\n\t\t\t\t}\n\t\t\t\t$interval = new DateInterval($duration);\n\t\t\t\t$interval->invert = $invert;\n\t\t\t\t$dtend->getDateTime()->add($interval);\n\t\t\t}\n\t\t}\n\t\treturn $dtend;\n\t}\n\n\tpublic static function getRepeatOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'doesnotrepeat' => $l10n->t('Does not repeat'),\n\t\t\t'daily'         => $l10n->t('Daily'),\n\t\t\t'weekly'        => $l10n->t('Weekly'),\n\t\t\t'weekday'       => $l10n->t('Every Weekday'),\n\t\t\t'biweekly'      => $l10n->t('Bi-Weekly'),\n\t\t\t'monthly'       => $l10n->t('Monthly'),\n\t\t\t'yearly'        => $l10n->t('Yearly')\n\t\t);\n\t}\n\n\tpublic static function getEndOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'never' => $l10n->t('never'),\n\t\t\t'count' => $l10n->t('by occurrences'),\n\t\t\t'date'  => $l10n->t('by date')\n\t\t);\n\t}\n\n\tpublic static function getMonthOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'monthday' => $l10n->t('by monthday'),\n\t\t\t'weekday'  => $l10n->t('by weekday')\n\t\t);\n\t}\n\n\tpublic static function getWeeklyOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'MO' => $l10n->t('Monday'),\n\t\t\t'TU' => $l10n->t('Tuesday'),\n\t\t\t'WE' => $l10n->t('Wednesday'),\n\t\t\t'TH' => $l10n->t('Thursday'),\n\t\t\t'FR' => $l10n->t('Friday'),\n\t\t\t'SA' => $l10n->t('Saturday'),\n\t\t\t'SU' => $l10n->t('Sunday')\n\t\t);\n\t}\n\n\tpublic static function getWeekofMonth($l10n)\n\t{\n\t\treturn array(\n\t\t\t'auto' => $l10n->t('events week of month'),\n\t\t\t'1' => $l10n->t('first'),\n\t\t\t'2' => $l10n->t('second'),\n\t\t\t'3' => $l10n->t('third'),\n\t\t\t'4' => $l10n->t('fourth'),\n\t\t\t'5' => $l10n->t('fifth'),\n\t\t\t'-1' => $l10n->t('last')\n\t\t);\n\t}\n\n\tpublic static function getByYearDayOptions(){\n\t\t$return = array();\n\t\tforeach(range(1,366) as $num){\n\t\t\t$return[(string) $num] = (string) $num;\n\t\t}\n\t\treturn $return;\n\t}\n\n\tpublic static function getByMonthDayOptions(){\n\t\t$return = array();\n\t\tforeach(range(1,31) as $num){\n\t\t\t$return[(string) $num] = (string) $num;\n\t\t}\n\t\treturn $return;\n\t}\n\n\tpublic static function getByMonthOptions($l10n){\n\t\treturn array(\n\t\t\t'1'  => $l10n->t('January'),\n\t\t\t'2'  => $l10n->t('February'),\n\t\t\t'3'  => $l10n->t('March'),\n\t\t\t'4'  => $l10n->t('April'),\n\t\t\t'5'  => $l10n->t('May'),\n\t\t\t'6'  => $l10n->t('June'),\n\t\t\t'7'  => $l10n->t('July'),\n\t\t\t'8'  => $l10n->t('August'),\n\t\t\t'9'  => $l10n->t('September'),\n\t\t\t'10' => $l10n->t('October'),\n\t\t\t'11' => $l10n->t('November'),\n\t\t\t'12' => $l10n->t('December')\n\t\t);\n\t}\n\n\tpublic static function getYearOptions($l10n){\n\t\treturn array(\n\t\t\t'bydate' => $l10n->t('by events date'),\n\t\t\t'byyearday' => $l10n->t('by yearday(s)'),\n\t\t\t'byweekno'  => $l10n->t('by weeknumber(s)'),\n\t\t\t'bydaymonth'  => $l10n->t('by day and month')\n\t\t);\n\t}\n\n\tpublic static function getByWeekNoOptions(){\n\t\treturn range(1, 52);\n\t}\n\n\tpublic static function validateRequest($request)\n\t{\n\t\t$errnum = 0;\n\t\t$errarr = array('title'=>'false', 'cal'=>'false', 'from'=>'false', 'fromtime'=>'false', 'to'=>'false', 'totime'=>'false', 'endbeforestart'=>'false');\n\t\tif($request['title'] == ''){\n\t\t\t$errarr['title'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\n\t\t$fromday = substr($request['from'], 0, 2);\n\t\t$frommonth = substr($request['from'], 3, 2);\n\t\t$fromyear = substr($request['from'], 6, 4);\n\t\tif(!checkdate($frommonth, $fromday, $fromyear)){\n\t\t\t$errarr['from'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\t$allday = isset($request['allday']);\n\t\tif(!$allday && self::checkTime(urldecode($request['fromtime']))) {\n\t\t\t$errarr['fromtime'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\n\t\t$today = substr($request['to'], 0, 2);\n\t\t$tomonth = substr($request['to'], 3, 2);\n\t\t$toyear = substr($request['to'], 6, 4);\n\t\tif(!checkdate($tomonth, $today, $toyear)){\n\t\t\t$errarr['to'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($request['repeat'] != 'doesnotrepeat'){\n\t\t\tif(is_nan($request['interval']) && $request['interval'] != ''){\n\t\t\t\t$errarr['interval'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('repeat', $request) && !array_key_exists($request['repeat'], self::getRepeatOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['repeat'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('advanced_month_select', $request) && !array_key_exists($request['advanced_month_select'], self::getMonthOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['advanced_month_select'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('advanced_year_select', $request) && !array_key_exists($request['advanced_year_select'], self::getYearOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['advanced_year_select'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('weekofmonthoptions', $request) && !array_key_exists($request['weekofmonthoptions'], self::getWeekofMonth(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['weekofmonthoptions'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif($request['end'] != 'never'){\n\t\t\t\tif(!array_key_exists($request['end'], self::getEndOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t\t$errarr['end'] = 'true';\n\t\t\t\t\t$errnum++;\n\t\t\t\t}\n\t\t\t\tif($request['end'] == 'count' && is_nan($request['byoccurrences'])){\n\t\t\t\t\t$errarr['byoccurrences'] = 'true';\n\t\t\t\t\t$errnum++;\n\t\t\t\t}\n\t\t\t\tif($request['end'] == 'date'){\n\t\t\t\t\tlist($bydate_day, $bydate_month, $bydate_year) = explode('-', $request['bydate']);\n\t\t\t\t\tif(!checkdate($bydate_month, $bydate_day, $bydate_year)){\n\t\t\t\t\t\t$errarr['bydate'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('weeklyoptions', $request)){\n\t\t\t\tforeach($request['weeklyoptions'] as $option){\n\t\t\t\t\tif(!in_array($option, self::getWeeklyOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t\t\t$errarr['weeklyoptions'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('byyearday', $request)){\n\t\t\t\tforeach($request['byyearday'] as $option){\n\t\t\t\t\tif(!array_key_exists($option, self::getByYearDayOptions())){\n\t\t\t\t\t\t$errarr['byyearday'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('weekofmonthoptions', $request)){\n\t\t\t\tif(is_nan((double)$request['weekofmonthoptions'])){\n\t\t\t\t\t$errarr['weekofmonthoptions'] = 'true';\n\t\t\t\t\t$errnum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('bymonth', $request)){\n\t\t\t\tforeach($request['bymonth'] as $option){\n\t\t\t\t\tif(!in_array($option, self::getByMonthOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t\t\t$errarr['bymonth'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('byweekno', $request)){\n\t\t\t\tforeach($request['byweekno'] as $option){\n\t\t\t\t\tif(!array_key_exists($option, self::getByWeekNoOptions())){\n\t\t\t\t\t\t$errarr['byweekno'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('bymonthday', $request)){\n\t\t\t\tforeach($request['bymonthday'] as $option){\n\t\t\t\t\tif(!array_key_exists($option, self::getByMonthDayOptions())){\n\t\t\t\t\t\t$errarr['bymonthday'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!$allday && self::checkTime(urldecode($request['totime']))) {\n\t\t\t$errarr['totime'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($today < $fromday && $frommonth == $tomonth && $fromyear == $toyear){\n\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($today == $fromday && $frommonth > $tomonth && $fromyear == $toyear){\n\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($today == $fromday && $frommonth == $tomonth && $fromyear > $toyear){\n\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif(!$allday && $fromday == $today && $frommonth == $tomonth && $fromyear == $toyear){\n\t\t\tlist($tohours, $tominutes) = explode(':', $request['totime']);\n\t\t\tlist($fromhours, $fromminutes) = explode(':', $request['fromtime']);\n\t\t\tif($tohours < $fromhours){\n\t\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif($tohours == $fromhours && $tominutes < $fromminutes){\n\t\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t}\n\t\tif ($errnum)\n\t\t{\n\t\t\treturn $errarr;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected static function checkTime($time)\n\t{\n\t\tlist($hours, $minutes) = explode(':', $time);\n\t\treturn empty($time)\n\t\t\t|| $hours < 0 || $hours > 24\n\t\t\t|| $minutes < 0 || $minutes > 60;\n\t}\n\n\tpublic static function createVCalendarFromRequest($request)\n\t{\n\t\t$vcalendar = new OC_VObject('VCALENDAR');\n\t\t$vcalendar->add('PRODID', 'ownCloud Calendar');\n\t\t$vcalendar->add('VERSION', '2.0');\n\n\t\t$vevent = new OC_VObject('VEVENT');\n\t\t$vcalendar->add($vevent);\n\n\t\t$vevent->setDateTime('CREATED', 'now', Sabre_VObject_Property_DateTime::UTC);\n\n\t\t$vevent->setUID();\n\t\treturn self::updateVCalendarFromRequest($request, $vcalendar);\n\t}\n\n\tpublic static function updateVCalendarFromRequest($request, $vcalendar)\n\t{\n\t\t$title = $request[\"title\"];\n\t\t$location = $request[\"location\"];\n\t\t$categories = $request[\"categories\"];\n\t\t$allday = isset($request[\"allday\"]);\n\t\t$from = $request[\"from\"];\n\t\t$to  = $request[\"to\"];\n\t\tif (!$allday){\n\t\t\t$fromtime = $request['fromtime'];\n\t\t\t$totime = $request['totime'];\n\t\t}\n\t\t$vevent = $vcalendar->VEVENT;\n\t\t$description = $request[\"description\"];\n\t\t$repeat = $request[\"repeat\"];\n\t\tif($repeat != 'doesnotrepeat'){\n\t\t\t$rrule = '';\n\t\t\t$interval = $request['interval'];\n\t\t\t$end = $request['end'];\n\t\t\t$byoccurrences = $request['byoccurrences'];\n\t\t\tswitch($repeat){\n\t\t\t\tcase 'daily':\n\t\t\t\t\t$rrule .= 'FREQ=DAILY';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'weekly':\n\t\t\t\t\t$rrule .= 'FREQ=WEEKLY';\n\t\t\t\t\tif(array_key_exists('weeklyoptions', $request)){\n\t\t\t\t\t\t$byday = '';\n\t\t\t\t\t\t$daystrings = array_flip(self::getWeeklyOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\tforeach($request['weeklyoptions'] as $days){\n\t\t\t\t\t\t\tif($byday == ''){\n\t\t\t\t\t\t\t\t$byday .= $daystrings[$days];\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t$byday .= ',' .$daystrings[$days];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYDAY=' . $byday;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'weekday':\n\t\t\t\t\t$rrule .= 'FREQ=WEEKLY';\n\t\t\t\t\t$rrule .= ';BYDAY=MO,TU,WE,TH,FR';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'biweekly':\n\t\t\t\t\t$rrule .= 'FREQ=WEEKLY';\n\t\t\t\t\t$interval = $interval * 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'monthly':\n\t\t\t\t\t$rrule .= 'FREQ=MONTHLY';\n\t\t\t\t\tif($request['advanced_month_select'] == 'monthday'){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}elseif($request['advanced_month_select'] == 'weekday'){\n\t\t\t\t\t\tif($request['weekofmonthoptions'] == 'auto'){\n\t\t\t\t\t\t\tlist($_day, $_month, $_year) = explode('-', $from);\n\t\t\t\t\t\t\t$weekofmonth = floor($_day/7);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t$weekofmonth = $request['weekofmonthoptions'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$days = array_flip(self::getWeeklyOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\t$byday = '';\n\t\t\t\t\t\tforeach($request['weeklyoptions'] as $day){\n\t\t\t\t\t\t\tif($byday == ''){\n\t\t\t\t\t\t\t\t$byday .= $weekofmonth . $days[$day];\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t$byday .= ',' . $weekofmonth . $days[$day];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYDAY=' . $byday;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yearly':\n\t\t\t\t\t$rrule .= 'FREQ=YEARLY';\n\t\t\t\t\tif($request['advanced_year_select'] == 'bydate'){\n\t\t\t\t\t\t\n\t\t\t\t\t}elseif($request['advanced_year_select'] == 'byyearday'){\n\t\t\t\t\t\tlist($_day, $_month, $_year) = explode('-', $from);\n\t\t\t\t\t\t$byyearday = date('z', mktime(0,0,0, $_month, $_day, $_year)) + 1;\n\t\t\t\t\t\tif(array_key_exists('byyearday', $request)){\n\t\t\t\t\t\t\tforeach($request['byyearday'] as $yearday){\n\t\t\t\t\t\t\t\t$byyearday .= ',' . $yearday;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYYEARDAY=' . $byyearday;\n\t\t\t\t\t}elseif($request['advanced_year_select'] == 'byweekno'){\n\t\t\t\t\t\tlist($_day, $_month, $_year) = explode('-', $from);\n\t\t\t\t\t\t$rrule .= ';BYDAY=' . strtoupper(substr(date('l', mktime(0,0,0, $_month, $_day, $_year)), 0, 2));\n\t\t\t\t\t\t$byweekno = '';\n\t\t\t\t\t\tforeach($request['byweekno'] as $weekno){\n\t\t\t\t\t\t\tif($byweekno == ''){\n\t\t\t\t\t\t\t\t$byweekno = $weekno;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t$byweekno .= ',' . $weekno;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYWEEKNO=' . $byweekno;\n\t\t\t\t\t}elseif($request['advanced_year_select'] == 'bydaymonth'){\n\t\t\t\t\t\tif(array_key_exists('weeklyoptions', $request)){\n\t\t\t\t\t\t\t$days = array_flip(self::getWeeklyOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\t\t$byday = '';\n\t\t\t\t\t\t\tforeach($request['weeklyoptions'] as $day){\n\t\t\t\t\t\t\t\tif($byday == ''){\n\t\t\t\t\t\t\t\t      $byday .= $days[$day];\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t      $byday .= ',' . $days[$day];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$rrule .= ';BYDAY=' . $byday;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(array_key_exists('bymonth', $request)){\n\t\t\t\t\t\t\t$monthes = array_flip(self::getByMonthOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\t\t$bymonth = '';\n\t\t\t\t\t\t\tforeach($request['bymonth'] as $month){\n\t\t\t\t\t\t\t\tif($bymonth == ''){\n\t\t\t\t\t\t\t\t      $bymonth .= $monthes[$month];\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t      $bymonth .= ',' . $monthes[$month];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$rrule .= ';BYMONTH=' . $bymonth;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(array_key_exists('bymonthday', $request)){\n\t\t\t\t\t\t\t$bymonthday = '';\n\t\t\t\t\t\t\tforeach($request['bymonthday'] as $monthday){\n\t\t\t\t\t\t\t\tif($bymonthday == ''){\n\t\t\t\t\t\t\t\t      $bymonthday .= $monthday;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t      $bymonthday .= ',' . $monthday;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$rrule .= ';BYMONTHDAY=' . $bymonthday;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif($interval != ''){\n\t\t\t\t$rrule .= ';INTERVAL=' . $interval;\n\t\t\t}\n\t\t\tif($end == 'count'){\n\t\t\t\t$rrule .= ';COUNT=' . $byoccurrences;\n\t\t\t}\n\t\t\tif($end == 'date'){\n\t\t\t\tlist($bydate_day, $bydate_month, $bydate_year) = explode('-', $request['bydate']);\n\t\t\t\t$rrule .= ';UNTIL=' . $bydate_year . $bydate_month . $bydate_day;\n\t\t\t}\n\t\t\t$vevent->setString('RRULE', $rrule);\n\t\t\t$repeat = \"true\";\n\t\t}else{\n\t\t\t$repeat = \"false\";\n\t\t}\n\n\n\t\t$vevent->setDateTime('LAST-MODIFIED', 'now', Sabre_VObject_Property_DateTime::UTC);\n\t\t$vevent->setDateTime('DTSTAMP', 'now', Sabre_VObject_Property_DateTime::UTC);\n\t\t$vevent->setString('SUMMARY', $title);\n\n\t\tif($allday){\n\t\t\t$start = new DateTime($from);\n\t\t\t$end = new DateTime($to.' +1 day');\n\t\t\t$vevent->setDateTime('DTSTART', $start, Sabre_VObject_Property_DateTime::DATE);\n\t\t\t$vevent->setDateTime('DTEND', $end, Sabre_VObject_Property_DateTime::DATE);\n\t\t}else{\n\t\t\t$timezone = OCP\\Config::getUserValue(OCP\\USER::getUser(), 'calendar', 'timezone', date_default_timezone_get());\n\t\t\t$timezone = new DateTimeZone($timezone);\n\t\t\t$start = new DateTime($from.' '.$fromtime, $timezone);\n\t\t\t$end = new DateTime($to.' '.$totime, $timezone);\n\t\t\t$vevent->setDateTime('DTSTART', $start, Sabre_VObject_Property_DateTime::LOCALTZ);\n\t\t\t$vevent->setDateTime('DTEND', $end, Sabre_VObject_Property_DateTime::LOCALTZ);\n\t\t}\n\t\tunset($vevent->DURATION);\n\n\t\t$vevent->setString('LOCATION', $location);\n\t\t$vevent->setString('DESCRIPTION', $description);\n\t\t$vevent->setString('CATEGORIES', $categories);\n\n\t\t/*if($repeat == \"true\"){\n\t\t\t$vevent->RRULE = $repeat;\n\t\t}*/\n\n\t\treturn $vcalendar;\n\t}\n\n\tpublic static function getowner($id){\n\t\t$event = self::find($id);\n\t\t$cal = OC_Calendar_Calendar::find($event['calendarid']);\n\t\treturn $cal['userid'];\n\t}\n\t\n\tpublic static function getCalendarid($id){\n\t\t$event = self::find($id);\n\t\treturn $event['calendarid'];\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) 2011 Jakob Sack <mail@jakobsack.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n/**\n * This class manages our calendar objects\n */\nclass OC_Calendar_Object{\n\t/**\n\t * @brief Returns all objects of a calendar\n\t * @param integer $id\n\t * @return array\n\t *\n\t * The objects are associative arrays. You'll find the original vObject in\n\t * ['calendardata']\n\t */\n\tpublic static function all($id){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE calendarid = ?' );\n\t\t$result = $stmt->execute(array($id));\n\n\t\t$calendarobjects = array();\n\t\twhile( $row = $result->fetchRow()){\n\t\t\t$calendarobjects[] = $row;\n\t\t}\n\n\t\treturn $calendarobjects;\n\t}\n\n\t/**\n\t * @brief Returns all objects of a calendar between $start and $end\n\t * @param integer $id\n\t * @param DateTime $start\n\t * @param DateTime $end\n\t * @return array\n\t *\n\t * The objects are associative arrays. You'll find the original vObject\n\t * in ['calendardata']\n\t */\n\tpublic static function allInPeriod($id, $start, $end){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE calendarid = ?'\n\t\t.' AND ((startdate >= ? AND startdate <= ? AND repeating = 0)'\n\t\t.' OR (enddate >= ? AND enddate <= ? AND repeating = 0)'\n\t\t.' OR (startdate <= ? AND repeating = 1))' );\n\t\t$start = self::getUTCforMDB($start);\n\t\t$end = self::getUTCforMDB($end);\n\t\t$result = $stmt->execute(array($id,\n\t\t\t\t\t$start, $end,\n\t\t\t\t\t$start, $end,\n\t\t\t\t\t$end));\n\n\t\t$calendarobjects = array();\n\t\twhile( $row = $result->fetchRow()){\n\t\t\t$calendarobjects[] = $row;\n\t\t}\n\n\t\treturn $calendarobjects;\n\t}\n\n\t/**\n\t * @brief Returns an object\n\t * @param integer $id\n\t * @return associative array\n\t */\n\tpublic static function find($id){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE id = ?' );\n\t\t$result = $stmt->execute(array($id));\n\n\t\treturn $result->fetchRow();\n\t}\n\n\t/**\n\t * @brief finds an object by its DAV Data\n\t * @param integer $cid Calendar id\n\t * @param string $uri the uri ('filename')\n\t * @return associative array\n\t */\n\tpublic static function findWhereDAVDataIs($cid,$uri){\n\t\t$stmt = OCP\\DB::prepare( 'SELECT * FROM *PREFIX*calendar_objects WHERE calendarid = ? AND uri = ?' );\n\t\t$result = $stmt->execute(array($cid,$uri));\n\n\t\treturn $result->fetchRow();\n\t}\n\n\t/**\n\t * @brief Adds an object\n\t * @param integer $id Calendar id\n\t * @param string $data  object\n\t * @return insertid\n\t */\n\tpublic static function add($id,$data){\n\t\t$object = OC_VObject::parse($data);\n\t\tOC_Calendar_App::loadCategoriesFromVCalendar($object);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\tif(is_null($uid)){\n\t\t\t$object->setUID();\n\t\t\t$data = $object->serialize();\n\t\t}\n\n\t\t$uri = 'owncloud-'.md5($data.rand().time()).'.ics';\n\n\t\t$stmt = OCP\\DB::prepare( 'INSERT INTO *PREFIX*calendar_objects (calendarid,objecttype,startdate,enddate,repeating,summary,calendardata,uri,lastmodified) VALUES(?,?,?,?,?,?,?,?,?)' );\n\t\t$stmt->execute(array($id,$type,$startdate,$enddate,$repeating,$summary,$data,$uri,time()));\n\t\t$object_id = OCP\\DB::insertid('*PREFIX*calendar_objects');\n\n\t\tOC_Calendar_Calendar::touchCalendar($id);\n\n\t\treturn $object_id;\n\t}\n\n\t/**\n\t * @brief Adds an object with the data provided by sabredav\n\t * @param integer $id Calendar id\n\t * @param string $uri   the uri the card will have\n\t * @param string $data  object\n\t * @return insertid\n\t */\n\tpublic static function addFromDAVData($id,$uri,$data){\n\t\t$object = OC_VObject::parse($data);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\t$stmt = OCP\\DB::prepare( 'INSERT INTO *PREFIX*calendar_objects (calendarid,objecttype,startdate,enddate,repeating,summary,calendardata,uri,lastmodified) VALUES(?,?,?,?,?,?,?,?,?)' );\n\t\t$stmt->execute(array($id,$type,$startdate,$enddate,$repeating,$summary,$data,$uri,time()));\n\t\t$object_id = OCP\\DB::insertid('*PREFIX*calendar_objects');\n\n\t\tOC_Calendar_Calendar::touchCalendar($id);\n\n\t\treturn $object_id;\n\t}\n\n\t/**\n\t * @brief edits an object\n\t * @param integer $id id of object\n\t * @param string $data  object\n\t * @return boolean\n\t */\n\tpublic static function edit($id, $data){\n\t\t$oldobject = self::find($id);\n\n\t\t$object = OC_VObject::parse($data);\n\t\tOC_Calendar_App::loadCategoriesFromVCalendar($object);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\t$stmt = OCP\\DB::prepare( 'UPDATE *PREFIX*calendar_objects SET objecttype=?,startdate=?,enddate=?,repeating=?,summary=?,calendardata=?, lastmodified = ? WHERE id = ?' );\n\t\t$stmt->execute(array($type,$startdate,$enddate,$repeating,$summary,$data,time(),$id));\n\n\t\tOC_Calendar_Calendar::touchCalendar($oldobject['calendarid']);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief edits an object with the data provided by sabredav\n\t * @param integer $id calendar id\n\t * @param string $uri   the uri of the object\n\t * @param string $data  object\n\t * @return boolean\n\t */\n\tpublic static function editFromDAVData($cid,$uri,$data){\n\t\t$oldobject = self::findWhereDAVDataIs($cid,$uri);\n\n\t\t$object = OC_VObject::parse($data);\n\t\tlist($type,$startdate,$enddate,$summary,$repeating,$uid) = self::extractData($object);\n\n\t\t$stmt = OCP\\DB::prepare( 'UPDATE *PREFIX*calendar_objects SET objecttype=?,startdate=?,enddate=?,repeating=?,summary=?,calendardata=?, lastmodified = ? WHERE id = ?' );\n\t\t$stmt->execute(array($type,$startdate,$enddate,$repeating,$summary,$data,time(),$oldobject['id']));\n\n\t\tOC_Calendar_Calendar::touchCalendar($oldobject['calendarid']);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief deletes an object\n\t * @param integer $id id of object\n\t * @return boolean\n\t */\n\tpublic static function delete($id){\n\t\t$oldobject = self::find($id);\n\t\t$stmt = OCP\\DB::prepare( 'DELETE FROM *PREFIX*calendar_objects WHERE id = ?' );\n\t\t$stmt->execute(array($id));\n\t\tOC_Calendar_Calendar::touchCalendar($oldobject['calendarid']);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief deletes an  object with the data provided by sabredav\n\t * @param integer $cid calendar id\n\t * @param string $uri the uri of the object\n\t * @return boolean\n\t */\n\tpublic static function deleteFromDAVData($cid,$uri){\n\t\t$stmt = OCP\\DB::prepare( 'DELETE FROM *PREFIX*calendar_objects WHERE calendarid = ? AND uri=?' );\n\t\t$stmt->execute(array($cid,$uri));\n\t\tOC_Calendar_Calendar::touchCalendar($cid);\n\n\t\treturn true;\n\t}\n\n\tpublic static function moveToCalendar($id, $calendarid){\n\t\t$stmt = OCP\\DB::prepare( 'UPDATE *PREFIX*calendar_objects SET calendarid=? WHERE id = ?' );\n\t\t$stmt->execute(array($calendarid,$id));\n\n\t\tOC_Calendar_Calendar::touchCalendar($id);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @brief Extracts data from a vObject-Object\n\t * @param Sabre_VObject $object\n\t * @return array\n\t *\n\t * [type, start, end, summary, repeating, uid]\n\t */\n\tprotected static function extractData($object){\n\t\t$return = array('',null,null,'',0,null);\n\n\t\t// Child to use\n\t\t$children = 0;\n\t\t$use = null;\n\t\tforeach($object->children as $property){\n\t\t\tif($property->name == 'VEVENT'){\n\t\t\t\t$children++;\n\t\t\t\t$thisone = true;\n\n\t\t\t\tforeach($property->children as &$element){\n\t\t\t\t\tif($element->name == 'RECURRENCE-ID'){\n\t\t\t\t\t\t$thisone = false;\n\t\t\t\t\t}\n\t\t\t\t} unset($element);\n\n\t\t\t\tif($thisone){\n\t\t\t\t\t$use = $property;\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif($property->name == 'VTODO' || $property->name == 'VJOURNAL'){\n\t\t\t\t$return[0] = $property->name;\n\t\t\t\tforeach($property->children as &$element){\n\t\t\t\t\tif($element->name == 'SUMMARY'){\n\t\t\t\t\t\t$return[3] = $element->value;\n\t\t\t\t\t}\n\t\t\t\t\telseif($element->name == 'UID'){\n\t\t\t\t\t\t$return[5] = $element->value;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Only one VTODO or VJOURNAL per object\n\t\t\t\t// (only one UID per object but a UID is required by a VTODO =>\n\t\t\t\t//    one VTODO per object)\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// find the data\n\t\tif(!is_null($use)){\n\t\t\t$return[0] = $use->name;\n\t\t\tforeach($use->children as $property){\n\t\t\t\tif($property->name == 'DTSTART'){\n\t\t\t\t\t$return[1] = self::getUTCforMDB($property->getDateTime());\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'DTEND'){\n\t\t\t\t\t$return[2] = self::getUTCforMDB($property->getDateTime());\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'SUMMARY'){\n\t\t\t\t\t$return[3] = $property->value;\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'RRULE'){\n\t\t\t\t\t$return[4] = 1;\n\t\t\t\t}\n\t\t\t\telseif($property->name == 'UID'){\n\t\t\t\t\t$return[5] = $property->value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More than one child means reoccuring!\n\t\tif($children > 1){\n\t\t\t$return[4] = 1;\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * @brief DateTime to UTC string\n\t * @param DateTime $datetime The date to convert\n\t * @returns date as YYYY-MM-DD hh:mm\n\t *\n\t * This function creates a date string that can be used by MDB2.\n\t * Furthermore it converts the time to UTC.\n\t */\n\tprotected static function getUTCforMDB($datetime){\n\t\treturn date('Y-m-d H:i', $datetime->format('U') - $datetime->getOffset());\n\t}\n\n\tpublic static function getDTEndFromVEvent($vevent)\n\t{\n\t\tif ($vevent->DTEND) {\n\t\t\t$dtend = $vevent->DTEND;\n\t\t}else{\n\t\t\t$dtend = clone $vevent->DTSTART;\n\t\t\t// clone creates a shallow copy, also clone DateTime\n\t\t\t$dtend->setDateTime(clone $dtend->getDateTime(), $dtend->getDateType());\n\t\t\tif ($vevent->DURATION){\n\t\t\t\t$duration = strval($vevent->DURATION);\n\t\t\t\t$invert = 0;\n\t\t\t\tif ($duration[0] == '-'){\n\t\t\t\t\t$duration = substr($duration, 1);\n\t\t\t\t\t$invert = 1;\n\t\t\t\t}\n\t\t\t\tif ($duration[0] == '+'){\n\t\t\t\t\t$duration = substr($duration, 1);\n\t\t\t\t}\n\t\t\t\t$interval = new DateInterval($duration);\n\t\t\t\t$interval->invert = $invert;\n\t\t\t\t$dtend->getDateTime()->add($interval);\n\t\t\t}\n\t\t}\n\t\treturn $dtend;\n\t}\n\n\tpublic static function getRepeatOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'doesnotrepeat' => $l10n->t('Does not repeat'),\n\t\t\t'daily'         => $l10n->t('Daily'),\n\t\t\t'weekly'        => $l10n->t('Weekly'),\n\t\t\t'weekday'       => $l10n->t('Every Weekday'),\n\t\t\t'biweekly'      => $l10n->t('Bi-Weekly'),\n\t\t\t'monthly'       => $l10n->t('Monthly'),\n\t\t\t'yearly'        => $l10n->t('Yearly')\n\t\t);\n\t}\n\n\tpublic static function getEndOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'never' => $l10n->t('never'),\n\t\t\t'count' => $l10n->t('by occurrences'),\n\t\t\t'date'  => $l10n->t('by date')\n\t\t);\n\t}\n\n\tpublic static function getMonthOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'monthday' => $l10n->t('by monthday'),\n\t\t\t'weekday'  => $l10n->t('by weekday')\n\t\t);\n\t}\n\n\tpublic static function getWeeklyOptions($l10n)\n\t{\n\t\treturn array(\n\t\t\t'MO' => $l10n->t('Monday'),\n\t\t\t'TU' => $l10n->t('Tuesday'),\n\t\t\t'WE' => $l10n->t('Wednesday'),\n\t\t\t'TH' => $l10n->t('Thursday'),\n\t\t\t'FR' => $l10n->t('Friday'),\n\t\t\t'SA' => $l10n->t('Saturday'),\n\t\t\t'SU' => $l10n->t('Sunday')\n\t\t);\n\t}\n\n\tpublic static function getWeekofMonth($l10n)\n\t{\n\t\treturn array(\n\t\t\t'auto' => $l10n->t('events week of month'),\n\t\t\t'1' => $l10n->t('first'),\n\t\t\t'2' => $l10n->t('second'),\n\t\t\t'3' => $l10n->t('third'),\n\t\t\t'4' => $l10n->t('fourth'),\n\t\t\t'5' => $l10n->t('fifth'),\n\t\t\t'-1' => $l10n->t('last')\n\t\t);\n\t}\n\n\tpublic static function getByYearDayOptions(){\n\t\t$return = array();\n\t\tforeach(range(1,366) as $num){\n\t\t\t$return[(string) $num] = (string) $num;\n\t\t}\n\t\treturn $return;\n\t}\n\n\tpublic static function getByMonthDayOptions(){\n\t\t$return = array();\n\t\tforeach(range(1,31) as $num){\n\t\t\t$return[(string) $num] = (string) $num;\n\t\t}\n\t\treturn $return;\n\t}\n\n\tpublic static function getByMonthOptions($l10n){\n\t\treturn array(\n\t\t\t'1'  => $l10n->t('January'),\n\t\t\t'2'  => $l10n->t('February'),\n\t\t\t'3'  => $l10n->t('March'),\n\t\t\t'4'  => $l10n->t('April'),\n\t\t\t'5'  => $l10n->t('May'),\n\t\t\t'6'  => $l10n->t('June'),\n\t\t\t'7'  => $l10n->t('July'),\n\t\t\t'8'  => $l10n->t('August'),\n\t\t\t'9'  => $l10n->t('September'),\n\t\t\t'10' => $l10n->t('October'),\n\t\t\t'11' => $l10n->t('November'),\n\t\t\t'12' => $l10n->t('December')\n\t\t);\n\t}\n\n\tpublic static function getYearOptions($l10n){\n\t\treturn array(\n\t\t\t'bydate' => $l10n->t('by events date'),\n\t\t\t'byyearday' => $l10n->t('by yearday(s)'),\n\t\t\t'byweekno'  => $l10n->t('by weeknumber(s)'),\n\t\t\t'bydaymonth'  => $l10n->t('by day and month')\n\t\t);\n\t}\n\n\tpublic static function getByWeekNoOptions(){\n\t\treturn range(1, 52);\n\t}\n\n\tpublic static function validateRequest($request)\n\t{\n\t\t$errnum = 0;\n\t\t$errarr = array('title'=>'false', 'cal'=>'false', 'from'=>'false', 'fromtime'=>'false', 'to'=>'false', 'totime'=>'false', 'endbeforestart'=>'false');\n\t\tif($request['title'] == ''){\n\t\t\t$errarr['title'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\n\t\t$fromday = substr($request['from'], 0, 2);\n\t\t$frommonth = substr($request['from'], 3, 2);\n\t\t$fromyear = substr($request['from'], 6, 4);\n\t\tif(!checkdate($frommonth, $fromday, $fromyear)){\n\t\t\t$errarr['from'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\t$allday = isset($request['allday']);\n\t\tif(!$allday && self::checkTime(urldecode($request['fromtime']))) {\n\t\t\t$errarr['fromtime'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\n\t\t$today = substr($request['to'], 0, 2);\n\t\t$tomonth = substr($request['to'], 3, 2);\n\t\t$toyear = substr($request['to'], 6, 4);\n\t\tif(!checkdate($tomonth, $today, $toyear)){\n\t\t\t$errarr['to'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($request['repeat'] != 'doesnotrepeat'){\n\t\t\tif(is_nan($request['interval']) && $request['interval'] != ''){\n\t\t\t\t$errarr['interval'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('repeat', $request) && !array_key_exists($request['repeat'], self::getRepeatOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['repeat'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('advanced_month_select', $request) && !array_key_exists($request['advanced_month_select'], self::getMonthOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['advanced_month_select'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('advanced_year_select', $request) && !array_key_exists($request['advanced_year_select'], self::getYearOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['advanced_year_select'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif(array_key_exists('weekofmonthoptions', $request) && !array_key_exists($request['weekofmonthoptions'], self::getWeekofMonth(OC_Calendar_App::$l10n))){\n\t\t\t\t$errarr['weekofmonthoptions'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif($request['end'] != 'never'){\n\t\t\t\tif(!array_key_exists($request['end'], self::getEndOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t\t$errarr['end'] = 'true';\n\t\t\t\t\t$errnum++;\n\t\t\t\t}\n\t\t\t\tif($request['end'] == 'count' && is_nan($request['byoccurrences'])){\n\t\t\t\t\t$errarr['byoccurrences'] = 'true';\n\t\t\t\t\t$errnum++;\n\t\t\t\t}\n\t\t\t\tif($request['end'] == 'date'){\n\t\t\t\t\tlist($bydate_day, $bydate_month, $bydate_year) = explode('-', $request['bydate']);\n\t\t\t\t\tif(!checkdate($bydate_month, $bydate_day, $bydate_year)){\n\t\t\t\t\t\t$errarr['bydate'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('weeklyoptions', $request)){\n\t\t\t\tforeach($request['weeklyoptions'] as $option){\n\t\t\t\t\tif(!in_array($option, self::getWeeklyOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t\t\t$errarr['weeklyoptions'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('byyearday', $request)){\n\t\t\t\tforeach($request['byyearday'] as $option){\n\t\t\t\t\tif(!array_key_exists($option, self::getByYearDayOptions())){\n\t\t\t\t\t\t$errarr['byyearday'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('weekofmonthoptions', $request)){\n\t\t\t\tif(is_nan((double)$request['weekofmonthoptions'])){\n\t\t\t\t\t$errarr['weekofmonthoptions'] = 'true';\n\t\t\t\t\t$errnum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('bymonth', $request)){\n\t\t\t\tforeach($request['bymonth'] as $option){\n\t\t\t\t\tif(!in_array($option, self::getByMonthOptions(OC_Calendar_App::$l10n))){\n\t\t\t\t\t\t$errarr['bymonth'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('byweekno', $request)){\n\t\t\t\tforeach($request['byweekno'] as $option){\n\t\t\t\t\tif(!array_key_exists($option, self::getByWeekNoOptions())){\n\t\t\t\t\t\t$errarr['byweekno'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array_key_exists('bymonthday', $request)){\n\t\t\t\tforeach($request['bymonthday'] as $option){\n\t\t\t\t\tif(!array_key_exists($option, self::getByMonthDayOptions())){\n\t\t\t\t\t\t$errarr['bymonthday'] = 'true';\n\t\t\t\t\t\t$errnum++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!$allday && self::checkTime(urldecode($request['totime']))) {\n\t\t\t$errarr['totime'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($today < $fromday && $frommonth == $tomonth && $fromyear == $toyear){\n\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($today == $fromday && $frommonth > $tomonth && $fromyear == $toyear){\n\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif($today == $fromday && $frommonth == $tomonth && $fromyear > $toyear){\n\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t$errnum++;\n\t\t}\n\t\tif(!$allday && $fromday == $today && $frommonth == $tomonth && $fromyear == $toyear){\n\t\t\tlist($tohours, $tominutes) = explode(':', $request['totime']);\n\t\t\tlist($fromhours, $fromminutes) = explode(':', $request['fromtime']);\n\t\t\tif($tohours < $fromhours){\n\t\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t\tif($tohours == $fromhours && $tominutes < $fromminutes){\n\t\t\t\t$errarr['endbeforestart'] = 'true';\n\t\t\t\t$errnum++;\n\t\t\t}\n\t\t}\n\t\tif ($errnum)\n\t\t{\n\t\t\treturn $errarr;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected static function checkTime($time)\n\t{\n\t\tlist($hours, $minutes) = explode(':', $time);\n\t\treturn empty($time)\n\t\t\t|| $hours < 0 || $hours > 24\n\t\t\t|| $minutes < 0 || $minutes > 60;\n\t}\n\n\tpublic static function createVCalendarFromRequest($request)\n\t{\n\t\t$vcalendar = new OC_VObject('VCALENDAR');\n\t\t$vcalendar->add('PRODID', 'ownCloud Calendar');\n\t\t$vcalendar->add('VERSION', '2.0');\n\n\t\t$vevent = new OC_VObject('VEVENT');\n\t\t$vcalendar->add($vevent);\n\n\t\t$vevent->setDateTime('CREATED', 'now', Sabre_VObject_Property_DateTime::UTC);\n\n\t\t$vevent->setUID();\n\t\treturn self::updateVCalendarFromRequest($request, $vcalendar);\n\t}\n\n\tpublic static function updateVCalendarFromRequest($request, $vcalendar)\n\t{\n\t\t$title = strip_tags($request[\"title\"]);\n\t\t$location = strip_tags($request[\"location\"]);\n\t\t$categories = $request[\"categories\"];\n\t\t$allday = isset($request[\"allday\"]);\n\t\t$from = $request[\"from\"];\n\t\t$to  = $request[\"to\"];\n\t\tif (!$allday){\n\t\t\t$fromtime = $request['fromtime'];\n\t\t\t$totime = $request['totime'];\n\t\t}\n\t\t$vevent = $vcalendar->VEVENT;\n\t\t$description = strip_tags($request[\"description\"]);\n\t\t$repeat = $request[\"repeat\"];\n\t\tif($repeat != 'doesnotrepeat'){\n\t\t\t$rrule = '';\n\t\t\t$interval = $request['interval'];\n\t\t\t$end = $request['end'];\n\t\t\t$byoccurrences = $request['byoccurrences'];\n\t\t\tswitch($repeat){\n\t\t\t\tcase 'daily':\n\t\t\t\t\t$rrule .= 'FREQ=DAILY';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'weekly':\n\t\t\t\t\t$rrule .= 'FREQ=WEEKLY';\n\t\t\t\t\tif(array_key_exists('weeklyoptions', $request)){\n\t\t\t\t\t\t$byday = '';\n\t\t\t\t\t\t$daystrings = array_flip(self::getWeeklyOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\tforeach($request['weeklyoptions'] as $days){\n\t\t\t\t\t\t\tif($byday == ''){\n\t\t\t\t\t\t\t\t$byday .= $daystrings[$days];\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t$byday .= ',' .$daystrings[$days];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYDAY=' . $byday;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'weekday':\n\t\t\t\t\t$rrule .= 'FREQ=WEEKLY';\n\t\t\t\t\t$rrule .= ';BYDAY=MO,TU,WE,TH,FR';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'biweekly':\n\t\t\t\t\t$rrule .= 'FREQ=WEEKLY';\n\t\t\t\t\t$interval = $interval * 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'monthly':\n\t\t\t\t\t$rrule .= 'FREQ=MONTHLY';\n\t\t\t\t\tif($request['advanced_month_select'] == 'monthday'){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}elseif($request['advanced_month_select'] == 'weekday'){\n\t\t\t\t\t\tif($request['weekofmonthoptions'] == 'auto'){\n\t\t\t\t\t\t\tlist($_day, $_month, $_year) = explode('-', $from);\n\t\t\t\t\t\t\t$weekofmonth = floor($_day/7);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t$weekofmonth = $request['weekofmonthoptions'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$days = array_flip(self::getWeeklyOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\t$byday = '';\n\t\t\t\t\t\tforeach($request['weeklyoptions'] as $day){\n\t\t\t\t\t\t\tif($byday == ''){\n\t\t\t\t\t\t\t\t$byday .= $weekofmonth . $days[$day];\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t$byday .= ',' . $weekofmonth . $days[$day];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYDAY=' . $byday;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yearly':\n\t\t\t\t\t$rrule .= 'FREQ=YEARLY';\n\t\t\t\t\tif($request['advanced_year_select'] == 'bydate'){\n\t\t\t\t\t\t\n\t\t\t\t\t}elseif($request['advanced_year_select'] == 'byyearday'){\n\t\t\t\t\t\tlist($_day, $_month, $_year) = explode('-', $from);\n\t\t\t\t\t\t$byyearday = date('z', mktime(0,0,0, $_month, $_day, $_year)) + 1;\n\t\t\t\t\t\tif(array_key_exists('byyearday', $request)){\n\t\t\t\t\t\t\tforeach($request['byyearday'] as $yearday){\n\t\t\t\t\t\t\t\t$byyearday .= ',' . $yearday;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYYEARDAY=' . $byyearday;\n\t\t\t\t\t}elseif($request['advanced_year_select'] == 'byweekno'){\n\t\t\t\t\t\tlist($_day, $_month, $_year) = explode('-', $from);\n\t\t\t\t\t\t$rrule .= ';BYDAY=' . strtoupper(substr(date('l', mktime(0,0,0, $_month, $_day, $_year)), 0, 2));\n\t\t\t\t\t\t$byweekno = '';\n\t\t\t\t\t\tforeach($request['byweekno'] as $weekno){\n\t\t\t\t\t\t\tif($byweekno == ''){\n\t\t\t\t\t\t\t\t$byweekno = $weekno;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t$byweekno .= ',' . $weekno;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rrule .= ';BYWEEKNO=' . $byweekno;\n\t\t\t\t\t}elseif($request['advanced_year_select'] == 'bydaymonth'){\n\t\t\t\t\t\tif(array_key_exists('weeklyoptions', $request)){\n\t\t\t\t\t\t\t$days = array_flip(self::getWeeklyOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\t\t$byday = '';\n\t\t\t\t\t\t\tforeach($request['weeklyoptions'] as $day){\n\t\t\t\t\t\t\t\tif($byday == ''){\n\t\t\t\t\t\t\t\t      $byday .= $days[$day];\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t      $byday .= ',' . $days[$day];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$rrule .= ';BYDAY=' . $byday;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(array_key_exists('bymonth', $request)){\n\t\t\t\t\t\t\t$monthes = array_flip(self::getByMonthOptions(OC_Calendar_App::$l10n));\n\t\t\t\t\t\t\t$bymonth = '';\n\t\t\t\t\t\t\tforeach($request['bymonth'] as $month){\n\t\t\t\t\t\t\t\tif($bymonth == ''){\n\t\t\t\t\t\t\t\t      $bymonth .= $monthes[$month];\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t      $bymonth .= ',' . $monthes[$month];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$rrule .= ';BYMONTH=' . $bymonth;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(array_key_exists('bymonthday', $request)){\n\t\t\t\t\t\t\t$bymonthday = '';\n\t\t\t\t\t\t\tforeach($request['bymonthday'] as $monthday){\n\t\t\t\t\t\t\t\tif($bymonthday == ''){\n\t\t\t\t\t\t\t\t      $bymonthday .= $monthday;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t      $bymonthday .= ',' . $monthday;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$rrule .= ';BYMONTHDAY=' . $bymonthday;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif($interval != ''){\n\t\t\t\t$rrule .= ';INTERVAL=' . $interval;\n\t\t\t}\n\t\t\tif($end == 'count'){\n\t\t\t\t$rrule .= ';COUNT=' . $byoccurrences;\n\t\t\t}\n\t\t\tif($end == 'date'){\n\t\t\t\tlist($bydate_day, $bydate_month, $bydate_year) = explode('-', $request['bydate']);\n\t\t\t\t$rrule .= ';UNTIL=' . $bydate_year . $bydate_month . $bydate_day;\n\t\t\t}\n\t\t\t$vevent->setString('RRULE', $rrule);\n\t\t\t$repeat = \"true\";\n\t\t}else{\n\t\t\t$repeat = \"false\";\n\t\t}\n\n\n\t\t$vevent->setDateTime('LAST-MODIFIED', 'now', Sabre_VObject_Property_DateTime::UTC);\n\t\t$vevent->setDateTime('DTSTAMP', 'now', Sabre_VObject_Property_DateTime::UTC);\n\t\t$vevent->setString('SUMMARY', $title);\n\n\t\tif($allday){\n\t\t\t$start = new DateTime($from);\n\t\t\t$end = new DateTime($to.' +1 day');\n\t\t\t$vevent->setDateTime('DTSTART', $start, Sabre_VObject_Property_DateTime::DATE);\n\t\t\t$vevent->setDateTime('DTEND', $end, Sabre_VObject_Property_DateTime::DATE);\n\t\t}else{\n\t\t\t$timezone = OCP\\Config::getUserValue(OCP\\USER::getUser(), 'calendar', 'timezone', date_default_timezone_get());\n\t\t\t$timezone = new DateTimeZone($timezone);\n\t\t\t$start = new DateTime($from.' '.$fromtime, $timezone);\n\t\t\t$end = new DateTime($to.' '.$totime, $timezone);\n\t\t\t$vevent->setDateTime('DTSTART', $start, Sabre_VObject_Property_DateTime::LOCALTZ);\n\t\t\t$vevent->setDateTime('DTEND', $end, Sabre_VObject_Property_DateTime::LOCALTZ);\n\t\t}\n\t\tunset($vevent->DURATION);\n\n\t\t$vevent->setString('LOCATION', $location);\n\t\t$vevent->setString('DESCRIPTION', $description);\n\t\t$vevent->setString('CATEGORIES', $categories);\n\n\t\t/*if($repeat == \"true\"){\n\t\t\t$vevent->RRULE = $repeat;\n\t\t}*/\n\n\t\treturn $vcalendar;\n\t}\n\n\tpublic static function getowner($id){\n\t\t$event = self::find($id);\n\t\t$cal = OC_Calendar_Calendar::find($event['calendarid']);\n\t\treturn $cal['userid'];\n\t}\n\t\n\tpublic static function getCalendarid($id){\n\t\t$event = self::find($id);\n\t\treturn $event['calendarid'];\n\t}\n}\n"], "filenames": ["apps/calendar/lib/object.php"], "buggy_code_start_loc": [603], "buggy_code_end_loc": [615], "fixing_code_start_loc": [603], "fixing_code_end_loc": [615], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in ownCloud before 4.0.2 allow remote attackers to inject arbitrary web script or HTML via the (1) file names to apps/user_ldap/settings.php; (2) url or (3) title parameter to apps/bookmarks/ajax/editBookmark.php; (4) tag or (5) page parameter to apps/bookmarks/ajax/updateList.php; (6) identity to apps/user_openid/settings.php; (7) stack name in apps/gallery/lib/tiles.php; (8) root parameter to apps/gallery/templates/index.php; (9) calendar displayname in apps/calendar/templates/part.import.php; (10) calendar uri in apps/calendar/templates/part.choosecalendar.rowfields.php; (11) title, (12) location, or (13) description parameter in apps/calendar/lib/object.php; (14) certain vectors in core/js/multiselect.js; or (15) artist, (16) album, or (17) title comments parameter in apps/media/lib_scanner.php.", "other": {"cve": {"id": "CVE-2012-4396", "sourceIdentifier": "secalert@redhat.com", "published": "2012-09-05T23:55:03.053", "lastModified": "2012-09-06T15:43:16.940", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in ownCloud before 4.0.2 allow remote attackers to inject arbitrary web script or HTML via the (1) file names to apps/user_ldap/settings.php; (2) url or (3) title parameter to apps/bookmarks/ajax/editBookmark.php; (4) tag or (5) page parameter to apps/bookmarks/ajax/updateList.php; (6) identity to apps/user_openid/settings.php; (7) stack name in apps/gallery/lib/tiles.php; (8) root parameter to apps/gallery/templates/index.php; (9) calendar displayname in apps/calendar/templates/part.import.php; (10) calendar uri in apps/calendar/templates/part.choosecalendar.rowfields.php; (11) title, (12) location, or (13) description parameter in apps/calendar/lib/object.php; (14) certain vectors in core/js/multiselect.js; or (15) artist, (16) album, or (17) title comments parameter in apps/media/lib_scanner.php."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de ejecuci\u00f3n de secuencias de comandos en sitios cruzados (XSS) en ownCloud anterior a v4.0.2, permite a atacantes remotos inyectar secuencias de comandos web o HTML a trav\u00e9s de (1) nombre de ficheros para apps/user_ldap/settings.php; (2) url o (3) par\u00e1metro t\u00edtulo para apps/bookmarks/ajax/editBookmark.php; (4) etiqueta o (5) par\u00e1metro page para apps/bookmarks/ajax/updateList.php; (6) identity para apps/user_openid/settings.php; (7) nombre stack  en apps/gallery/lib/tiles.php; (8) par\u00e1metro root para apps/gallery/templates/index.php; (9) calendar displayname en apps/calendar/templates/part.import.php; (10) calendar uri en apps/calendar/templates/part.choosecalendar.rowfields.php; (11) t\u00edtulo, (12) localizaci\u00f3n, o (13) par\u00e1metro descripci\u00f3n en apps/calendar/lib/object.php; (14) ciertos vectores en core/js/multiselect.js; o (15) artist, (16) album, o (17) title comments par\u00e1metros en apps/media/lib_scanner.php."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.0.1", "matchCriteriaId": "5C3FA1AD-BCD5-4DA7-BB06-24E6023EC33A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "0A1021FF-2A5A-49AA-A376-09C98FECC519"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "3F6C12F7-5897-4DBB-A9AB-8180101F37C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "E9CC055C-CFA3-4A23-AF91-83F7F087F282"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "AA5445B4-9115-4D31-9DF9-E7E30CAF1FFD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "8FAE7D90-6190-44E2-B4EA-F47FF3263BE6"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2012/08/11/1", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/09/02/2", "source": "secalert@redhat.com"}, {"url": "https://github.com/owncloud/core/commit/44260a552cd4ee50ee11eee45164c725f56f7027", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/642e7ce110cb8c320072532c29abe003385d50f5", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/owncloud/core/commit/8f09299e2468dfc4f9ec72b05acf47de3ef9d1d7", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/8f616ecf76aac4a8b554fbf5a90b1645d0f25438", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/cc653a8a408adfb4d0cd532145668aacd85ad96c", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/d294373f476c795aaee7dc2444e7edfdea01a606", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/e817504569dce49fd7a677fa510e500394af0c48", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/f8337c9d723039760eecccf68bcb02752551e254", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/f955f6a6857754826af8903475688ba54f72c1bb", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/owncloud/core/commit/44260a552cd4ee50ee11eee45164c725f56f7027"}}