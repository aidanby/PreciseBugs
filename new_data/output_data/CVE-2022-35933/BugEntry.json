{"buggy_code": ["<?php\n\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentCriterionRepository;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass ProductComments extends Module implements WidgetInterface\n{\n    const INSTALL_SQL_FILE = 'install.sql';\n\n    private $_html = '';\n\n    private $_productCommentsCriterionTypes = [];\n    private $_baseUrl;\n\n    public function __construct()\n    {\n        $this->name = 'productcomments';\n        $this->tab = 'front_office_features';\n        $this->version = '5.0.2';\n        $this->author = 'PrestaShop';\n        $this->need_instance = 0;\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Product Comments', [], 'Modules.Productcomments.Admin');\n        $this->description = $this->trans('Allow users to post reviews on your products and/or rate them based on specific criteria.', [], 'Modules.Productcomments.Admin');\n\n        $this->ps_versions_compliancy = ['min' => '1.7.6', 'max' => _PS_VERSION_];\n    }\n\n    public function install($keep = true)\n    {\n        if (Shop::isFeatureActive()) {\n            Shop::setContext(Shop::CONTEXT_ALL);\n        }\n\n        if ($keep) {\n            if (!file_exists(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            } elseif (!$sql = file_get_contents(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            }\n            $sql = str_replace(['PREFIX_', 'ENGINE_TYPE'], [_DB_PREFIX_, _MYSQL_ENGINE_], $sql);\n            $sql = preg_split(\"/;\\s*[\\r\\n]+/\", trim($sql));\n\n            foreach ($sql as $query) {\n                if (!Db::getInstance()->execute(trim($query))) {\n                    return false;\n                }\n            }\n        }\n\n        if (\n            parent::install() == false ||\n            !$this->registerHook('displayFooterProduct') || //Product page footer\n            !$this->registerHook('displayHeader') || //Adds css and javascript on front\n            !$this->registerHook('displayProductListReviews') || //Product list miniature\n            !$this->registerHook('displayProductAdditionalInfo') || //Display info in checkout column\n            !$this->registerHook('filterProductContent') || // Add infos to Product page\n            !$this->registerHook('registerGDPRConsent') ||\n            !$this->registerHook('actionDeleteGDPRCustomer') ||\n            !$this->registerHook('actionExportGDPRData') ||\n\n            !Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', 30) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', 1) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', 5) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', 1)\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function uninstall($keep = true)\n    {\n        if (\n            !parent::uninstall() || ($keep && !$this->deleteTables()) ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MODERATE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_COMMENTS_PER_PAGE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ANONYMISATION') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ALLOW_GUESTS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_USEFULNESS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MINIMAL_TIME') ||\n\n            !$this->unregisterHook('registerGDPRConsent') ||\n            !$this->unregisterHook('actionDeleteGDPRCustomer') ||\n            !$this->unregisterHook('actionExportGDPRData') ||\n\n            !$this->unregisterHook('displayProductAdditionalInfo') ||\n            !$this->unregisterHook('displayHeader') ||\n            !$this->unregisterHook('displayFooterProduct') ||\n            !$this->unregisterHook('displayProductListReviews')\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function reset()\n    {\n        if (!$this->uninstall(false)) {\n            return false;\n        }\n        if (!$this->install(false)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function deleteTables()\n    {\n        return Db::getInstance()->execute('\n\t\t\tDROP TABLE IF EXISTS\n\t\t\t`' . _DB_PREFIX_ . 'product_comment`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_product`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_lang`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_category`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_grade`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_usefulness`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_report`');\n    }\n\n    public function getCacheId($id_product = null)\n    {\n        return parent::getCacheId() . '|' . (int) $id_product;\n    }\n\n    protected function _postProcess()\n    {\n        if (Tools::isSubmit('submitModerate')) {\n            Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', (int) Tools::getValue('PRODUCT_COMMENTS_MODERATE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', (int) Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', (int) Tools::getValue('PRODUCT_COMMENTS_USEFULNESS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', (int) Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', (int) Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION'));\n            Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', (int) Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME'));\n            $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Settings updated', [], 'Modules.Productcomments.Admin') . '</div>';\n        } elseif (Tools::isSubmit('productcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n            ProductComment::deleteReports($id_product_comment);\n        } elseif (Tools::isSubmit('deleteproductcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->delete();\n        } elseif (Tools::isSubmit('submitEditCriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            $criterion->id_product_comment_criterion_type = (int) Tools::getValue('id_product_comment_criterion_type');\n            $criterion->active = Tools::getValue('active');\n\n            $languages = Language::getLanguages();\n            $name = [];\n            foreach ($languages as $key => $value) {\n                $name[$value['id_lang']] = Tools::getValue('name_' . $value['id_lang']);\n            }\n            $criterion->name = $name;\n\n            if (!$criterion->validateFields(false) || !$criterion->validateFieldsLang(false)) {\n                $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n            } else {\n                $criterion->save();\n\n                // Clear before reinserting data\n                $criterion->deleteCategories();\n                $criterion->deleteProducts();\n                if ($criterion->id_product_comment_criterion_type == 2) {\n                    if ($categories = Tools::getValue('categoryBox')) {\n                        if (count($categories)) {\n                            foreach ($categories as $id_category) {\n                                $criterion->addCategory((int) $id_category);\n                            }\n                        }\n                    }\n                } elseif ($criterion->id_product_comment_criterion_type == 3) {\n                    if ($products = Tools::getValue('ids_product')) {\n                        if (count($products)) {\n                            foreach ($products as $product) {\n                                $criterion->addProduct((int) $product);\n                            }\n                        }\n                    }\n                }\n                if ($criterion->save()) {\n                    Tools::redirectAdmin(Context::getContext()->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'conf' => 4]));\n                } else {\n                    $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('deleteproductcommentscriterion')) {\n            $productCommentCriterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($productCommentCriterion->id) {\n                if ($productCommentCriterion->delete()) {\n                    $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Criterion deleted', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('statusproductcommentscriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($criterion->id) {\n                $criterion->active = (int) (!$criterion->active);\n                $criterion->save();\n            }\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'conf' => 4, 'module_name' => $this->name]));\n        } elseif ($id_product_comment = (int) Tools::getValue('approveComment')) {\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n        } elseif ($id_product_comment = (int) Tools::getValue('noabuseComment')) {\n            ProductComment::deleteReports($id_product_comment);\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name]));\n        }\n\n        $this->_clearcache('productcomments_reviews.tpl');\n    }\n\n    public function getContent()\n    {\n        include_once dirname(__FILE__) . '/ProductComment.php';\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $this->_html = '';\n        if (Tools::isSubmit('updateproductcommentscriterion')) {\n            $this->_html .= $this->renderCriterionForm((int) Tools::getValue('id_product_comment_criterion'));\n        } else {\n            $this->_postProcess();\n            $this->_html .= $this->renderConfigForm();\n            $this->_html .= $this->renderModerateLists();\n            $this->_html .= $this->renderCriterionList();\n            $this->_html .= $this->renderCommentsList();\n        }\n\n        $this->_setBaseUrl();\n        $this->_productCommentsCriterionTypes = ProductCommentCriterion::getTypes();\n\n        $this->context->controller->addJs($this->_path . 'js/moderate.js');\n\n        return $this->_html;\n    }\n\n    private function _setBaseUrl()\n    {\n        $this->_baseUrl = 'index.php?';\n        foreach ($_GET as $k => $value) {\n            if (!in_array($k, ['deleteCriterion', 'editCriterion'])) {\n                $this->_baseUrl .= $k . '=' . $value . '&';\n            }\n        }\n        $this->_baseUrl = rtrim($this->_baseUrl, '&');\n    }\n\n    public function renderConfigForm()\n    {\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Configuration', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('All reviews must be validated by an employee', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MODERATE',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Allow guest reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ALLOW_GUESTS',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Enable upvotes / downvotes on reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_USEFULNESS',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Anonymize the user\\'s last name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ANONYMISATION',\n                        'desc' => $this->trans('Display only initials, e.g. John D.', [], 'Modules.Productcomments.Admin'),\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Minimum time between 2 reviews from the same user', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MINIMAL_TIME',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'seconds',\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Number of comments per page', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_COMMENTS_PER_PAGE',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'comments',\n                    ],\n                ],\n                'submit' => [\n                    'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                    'class' => 'btn btn-default pull-right',\n                    'name' => 'submitModerate',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitProducCommentsConfiguration';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function renderModerateLists()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n        $return = null;\n\n        if (Configuration::get('PRODUCT_COMMENTS_MODERATE')) {\n            $comments = ProductComment::getByValidate(0, false);\n\n            $fields_list = $this->getStandardFieldList();\n\n            if (version_compare(_PS_VERSION_, '1.6', '<')) {\n                $return .= '<h1>' . $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin') . '</h1>';\n                $actions = ['enable', 'delete'];\n            } else {\n                $actions = ['approve', 'delete'];\n            }\n\n            $helper = new HelperList();\n            $helper->list_id = 'form-productcomments-moderate-list';\n            $helper->shopLinkType = '';\n            $helper->simple_header = true;\n            $helper->actions = $actions;\n            $helper->show_toolbar = false;\n            $helper->module = $this;\n            $helper->listTotal = count($comments);\n            $helper->identifier = 'id_product_comment';\n            $helper->title = $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin');\n            $helper->table = $this->name;\n            $helper->table_id = 'waiting-approval-productcomments-list';\n            $helper->token = Tools::getAdminTokenLite('AdminModules');\n            $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n            $helper->no_link = true;\n\n            $return .= $helper->generateList($comments, $fields_list);\n        }\n\n        $comments = ProductComment::getReportedComments();\n\n        $fields_list = $this->getStandardFieldList();\n\n        $actions = ['delete', 'noabuse'];\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-reported-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = true;\n        $helper->actions = $actions;\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->listTotal = count($comments);\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Reported Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->table_id = 'reported-productcomments-list';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $return .= $helper->generateList($comments, $fields_list);\n\n        return $return;\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayApproveLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'approveComment' => $id]),\n            'action' => $this->trans('Approve', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_approve.tpl');\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayNoabuseLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'noabuseComment' => $id]),\n            'action' => $this->trans('Not abusive', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_noabuse.tpl');\n    }\n\n    public function renderCriterionList()\n    {\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $criterions = ProductCommentCriterion::getCriterions($this->context->language->id, false, false);\n\n        $fields_list = [\n            'id_product_comment_criterion' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'name' => [\n                'title' => $this->trans('Name', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'type_name' => [\n                'title' => $this->trans('Type', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'active' => [\n                'title' => $this->trans('Status', [], 'Modules.Productcomments.Admin'),\n                'active' => 'status',\n                'type' => 'bool',\n            ],\n        ];\n\n        $helper = new HelperList();\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['edit', 'delete'];\n        $helper->show_toolbar = true;\n        $helper->toolbar_btn['new'] = [\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'updateproductcommentscriterion' => '']),\n            'desc' => $this->trans('Add New Criterion', [], 'Modules.Productcomments.Admin'),\n        ];\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment_criterion';\n        $helper->title = $this->trans('Review Criteria', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name . 'criterion';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n\n        return $helper->generateList($criterions, $fields_list);\n    }\n\n    public function renderCommentsList()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n\n        $fields_list = $this->getStandardFieldList();\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['delete'];\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Approved Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->table_id = 'approved-productcomments-list';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $page = ($page = Tools::getValue('submitFilter' . $helper->list_id)) ? $page : 1;\n        $pagination = ($pagination = Tools::getValue($helper->list_id . '_pagination')) ? $pagination : 50;\n\n        $moderate = Configuration::get('PRODUCT_COMMENTS_MODERATE');\n        if (empty($moderate)) {\n            $comments = ProductComment::getByValidate(0, false, (int) $page, (int) $pagination, true);\n            $count = (int) ProductComment::getCountByValidate(0, true);\n        } else {\n            $comments = ProductComment::getByValidate(1, false, (int) $page, (int) $pagination);\n            $count = (int) ProductComment::getCountByValidate(1);\n        }\n\n        $helper->listTotal = $count;\n\n        return $helper->generateList($comments, $fields_list);\n    }\n\n    public function getConfigFieldsValues()\n    {\n        return [\n            'PRODUCT_COMMENTS_MODERATE' => Tools::getValue('PRODUCT_COMMENTS_MODERATE', Configuration::get('PRODUCT_COMMENTS_MODERATE')),\n            'PRODUCT_COMMENTS_ALLOW_GUESTS' => Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS', Configuration::get('PRODUCT_COMMENTS_ALLOW_GUESTS')),\n            'PRODUCT_COMMENTS_USEFULNESS' => Tools::getValue('PRODUCT_COMMENTS_USEFULNESS', Configuration::get('PRODUCT_COMMENTS_USEFULNESS')),\n            'PRODUCT_COMMENTS_MINIMAL_TIME' => Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME', Configuration::get('PRODUCT_COMMENTS_MINIMAL_TIME')),\n            'PRODUCT_COMMENTS_COMMENTS_PER_PAGE' => Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE')),\n            'PRODUCT_COMMENTS_ANONYMISATION' => Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION', Configuration::get('PRODUCT_COMMENTS_ANONYMISATION')),\n        ];\n    }\n\n    public function getCriterionFieldsValues($id = 0)\n    {\n        $criterion = new ProductCommentCriterion($id);\n\n        return [\n            'name' => $criterion->name,\n            'id_product_comment_criterion_type' => $criterion->id_product_comment_criterion_type,\n            'active' => $criterion->active,\n            'id_product_comment_criterion' => $criterion->id,\n        ];\n    }\n\n    public function getStandardFieldList()\n    {\n        return [\n            'id_product_comment' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-id',\n            ],\n            'title' => [\n                'title' => $this->trans('Review title', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-title',\n            ],\n            'content' => [\n                'title' => $this->trans('Review', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-content',\n            ],\n            'grade' => [\n                'title' => $this->trans('Rating', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'suffix' => '/5',\n                'search' => false,\n                'class' => 'product-comment-rating',\n            ],\n            'customer_name' => [\n                'title' => $this->trans('Author', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-author',\n                'callback' => 'renderAuthorName',\n                'callback_object' => $this,\n            ],\n            'name' => [\n                'title' => $this->trans('Product', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-product-name',\n            ],\n            'date_add' => [\n                'title' => $this->trans('Time of publication', [], 'Modules.Productcomments.Admin'),\n                'type' => 'date',\n                'search' => false,\n                'class' => 'product-comment-date',\n            ],\n        ];\n    }\n\n    /**\n     * Renders author name for the list, with the link if the author is a customer.\n     *\n     * @param string $value\n     * @param array $row\n     *\n     * @return string\n     */\n    public function renderAuthorName($value, $row)\n    {\n        if (!empty($row['customer_id'])) {\n            $linkToCustomerProfile = $this->context->link->getAdminLink('AdminCustomers', false, [], [\n                'id_customer' => $row['customer_id'],\n                'viewcustomer' => 1,\n            ]);\n\n            return '<a href=\"' . $linkToCustomerProfile . '\">' . $value . '</a>';\n        }\n\n        return $value;\n    }\n\n    public function renderCriterionForm($id_criterion = 0)\n    {\n        $types = ProductCommentCriterion::getTypes();\n        $query = [];\n        foreach ($types as $key => $value) {\n            $query[] = [\n                'id' => $key,\n                'label' => $value,\n            ];\n        }\n\n        $criterion = new ProductCommentCriterion((int) $id_criterion);\n        $selected_categories = $criterion->getCategories();\n\n        $product_table_values = Product::getSimpleProducts($this->context->language->id);\n        $selected_products = $criterion->getProducts();\n        foreach ($product_table_values as $key => $product) {\n            if (false !== array_search($product['id_product'], $selected_products)) {\n                $product_table_values[$key]['selected'] = 1;\n            }\n        }\n\n        if (version_compare(_PS_VERSION_, '1.6', '<')) {\n            $field_category_tree = [\n                'type' => 'categories_select',\n                'name' => 'categoryBox',\n                'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                'category_tree' => $this->initCategoriesAssociation(null, $id_criterion),\n            ];\n        } else {\n            $field_category_tree = [\n                'type' => 'categories',\n                'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                'name' => 'categoryBox',\n                'desc' => $this->trans('Mark the boxes of categories to which this criterion applies.', [], 'Modules.Productcomments.Admin'),\n                'tree' => [\n                    'use_search' => false,\n                    'id' => 'categoryBox',\n                    'use_checkbox' => true,\n                    'selected_categories' => $selected_categories,\n                ],\n                //retro compat 1.5 for category tree\n                'values' => [\n                    'trads' => [\n                        'Root' => Category::getTopCategory(),\n                        'selected' => $this->trans('Selected', [], 'Modules.Productcomments.Admin'),\n                        'Collapse All' => $this->trans('Collapse All', [], 'Modules.Productcomments.Admin'),\n                        'Expand All' => $this->trans('Expand All', [], 'Modules.Productcomments.Admin'),\n                        'Check All' => $this->trans('Check All', [], 'Modules.Productcomments.Admin'),\n                        'Uncheck All' => $this->trans('Uncheck All', [], 'Modules.Productcomments.Admin'),\n                    ],\n                    'selected_cat' => $selected_categories,\n                    'input_name' => 'categoryBox[]',\n                    'use_radio' => false,\n                    'use_search' => false,\n                    'disabled_categories' => [],\n                    'top_category' => Category::getTopCategory(),\n                    'use_context' => true,\n                ],\n            ];\n        }\n\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Add new criterion', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'hidden',\n                        'name' => 'id_product_comment_criterion',\n                    ],\n                    [\n                        'type' => 'text',\n                        'lang' => true,\n                        'label' => $this->trans('Criterion name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'name',\n                        'desc' => $this->trans('Maximum length: %s characters', [ProductCommentCriterion::NAME_MAX_LENGTH], 'Modules.Productcomments.Admin'),\n                    ],\n                    [\n                        'type' => 'select',\n                        'name' => 'id_product_comment_criterion_type',\n                        'label' => $this->trans('Application scope of the criterion', [], 'Modules.Productcomments.Admin'),\n                        'options' => [\n                            'query' => $query,\n                            'id' => 'id',\n                            'name' => 'label',\n                        ],\n                    ],\n                    $field_category_tree,\n                    [\n                        'type' => 'products',\n                        'label' => $this->trans('The criterion will be restricted to the following products', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'ids_product',\n                        'values' => $product_table_values,\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Active', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'active',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                ],\n                'submit' => [\n                    'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                    'class' => 'btn btn-default pull-right',\n                    'name' => 'submitEditCriterion',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitEditCriterion';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getCriterionFieldsValues($id_criterion),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function initCategoriesAssociation($id_root = null, $id_criterion = 0)\n    {\n        if (is_null($id_root)) {\n            $id_root = Configuration::get('PS_ROOT_CATEGORY');\n        }\n        $id_shop = (int) Tools::getValue('id_shop');\n        $shop = new Shop($id_shop);\n        if ($id_criterion == 0) {\n            $selected_cat = [];\n        } else {\n            $pdc_object = new ProductCommentCriterion($id_criterion);\n            $selected_cat = $pdc_object->getCategories();\n        }\n\n        if (Shop::getContext() == Shop::CONTEXT_SHOP && Tools::isSubmit('id_shop')) {\n            $root_category = new Category($shop->id_category);\n        } else {\n            $root_category = new Category($id_root);\n        }\n        $root_category = ['id_category' => $root_category->id, 'name' => $root_category->name[$this->context->language->id]];\n\n        $helper = new Helper();\n\n        return $helper->renderCategoryTree($root_category, $selected_cat, 'categoryBox', false, true);\n    }\n\n    public function hookActionDeleteGDPRCustomer($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $productCommentRepository->cleanCustomerData($customer['id']);\n        }\n\n        return true;\n    }\n\n    public function hookActionExportGDPRData($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $langId = isset($customer['id_lang']) ? $customer['id_lang'] : $this->context->language->id;\n\n            return json_encode($productCommentRepository->getCustomerData($customer['id'], $langId));\n        }\n    }\n\n    /**\n     *  Inject the needed javascript and css files in the appropriate pages\n     */\n    public function hookDisplayHeader()\n    {\n        $jsList = [];\n        $cssList = [];\n\n        $cssList[] = '/modules/productcomments/views/css/productcomments.css';\n        $jsList[] = '/modules/productcomments/views/js/jquery.rating.plugin.js';\n        $jsList[] = '/modules/productcomments/views/js/productListingComments.js';\n        if ($this->context->controller instanceof ProductControllerCore) {\n            $jsList[] = '/modules/productcomments/views/js/post-comment.js';\n            $jsList[] = '/modules/productcomments/views/js/list-comments.js';\n            $jsList[] = '/modules/productcomments/views/js/jquery.simplePagination.js';\n        }\n        foreach ($cssList as $cssUrl) {\n            $this->context->controller->registerStylesheet(sha1($cssUrl), $cssUrl, ['media' => 'all', 'priority' => 80]);\n        }\n        foreach ($jsList as $jsUrl) {\n            $this->context->controller->registerJavascript(sha1($jsUrl), $jsUrl, ['position' => 'bottom', 'priority' => 80]);\n        }\n    }\n\n    /**\n     * Display the comment list with the post modal at the bottom of the page\n     *\n     * @param array $params\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function hookDisplayFooterProduct($params)\n    {\n        return $this->renderProductCommentsList($params['product']) . $this->renderProductCommentModal($params['product']);\n    }\n\n    /**\n     * Inject data about productcomments in the product object for frontoffice\n     *\n     * @param array $params\n     *\n     * @return array\n     */\n    public function hookFilterProductContent(array $params)\n    {\n        if (empty($params['object']->id)) {\n            return $params;\n        }\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $averageRating = $productCommentRepository->getAverageGrade($params['object']->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $nbComments = $productCommentRepository->getCommentsNumber($params['object']->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        /* @phpstan-ignore-next-line */\n        $params['object']->productComments = [\n            'averageRating' => $averageRating,\n            'nbComments' => $nbComments,\n        ];\n\n        return $params;\n    }\n\n    /**\n     * Used to render the product comments list\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentsList($product)\n    {\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $averageGrade = $productCommentRepository->getAverageGrade($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($product->id, (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        $this->context->smarty->assign([\n            'post_allowed' => $isPostAllowed,\n            'usefulness_enabled' => Configuration::get('PRODUCT_COMMENTS_USEFULNESS'),\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'list_comments_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ListComments',\n                ['id_product' => $product->id]\n            ),\n            'update_comment_usefulness_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'UpdateCommentUsefulness'\n            ),\n            'report_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ReportComment'\n            ),\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/product-comments-list.tpl');\n    }\n\n    /**\n     * Used to render the product modal\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentModal($product)\n    {\n        /** @var ProductCommentCriterionRepository $criterionRepository */\n        $criterionRepository = $this->context->controller->getContainer()->get('product_comment_criterion_repository');\n        $criterions = $criterionRepository->getByProduct($product->id, $this->context->language->id);\n\n        $this->context->smarty->assign([\n            'logged' => (bool) $this->context->cookie->id_customer,\n            'post_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'PostComment',\n                ['id_product' => $product->id]\n            ),\n            'moderation_active' => (int) Configuration::get('PRODUCT_COMMENTS_MODERATE'),\n            'criterions' => $criterions,\n            'product' => $product,\n            'id_module' => $this->id,\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/post-comment-modal.tpl');\n    }\n\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $averageGrade = $productCommentRepository->getAverageGrade($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($configuration['id_product'], (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        return [\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'post_allowed' => $isPostAllowed,\n        ];\n    }\n\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        $variables = [];\n        $tplHookPath = 'module:productcomments/views/templates/hook/';\n\n        if ('displayProductListReviews' === $hookName || isset($configuration['type']) && 'product_list' === $configuration['type']) {\n            $product = $configuration['product'];\n            $idProduct = $product['id_product'];\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $variables = array_merge($variables, [\n                'product' => $product,\n                'product_comment_grade_url' => $this->context->link->getModuleLink('productcomments', 'CommentGrade'),\n            ]);\n\n            $filePath = $tplHookPath . 'product-list-reviews.tpl';\n        } elseif ($this->context->controller instanceof ProductControllerCore) {\n            $idProduct = $this->context->controller->getProduct()->id;\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $filePath = 'quickview' === Tools::getValue('action')\n                ? $tplHookPath . 'product-additional-info-quickview.tpl'\n                : $tplHookPath . 'product-additional-info.tpl';\n        }\n\n        if (empty($variables) || empty($filePath)) {\n            return false;\n        }\n\n        $this->smarty->assign($variables);\n\n        return $this->fetch($filePath);\n    }\n\n    /**\n     * empty listener for registerGDPRConsent hook\n     */\n    public function hookRegisterGDPRConsent()\n    {\n        /* registerGDPRConsent is a special kind of hook that doesn't need a listener, see :\n           https://build.prestashop.com/howtos/module/how-to-make-your-module-compliant-with-prestashop-official-gdpr-compliance-module/\n          However since Prestashop 1.7.8, modules must implement a listener for all the hooks they register: a check is made\n          at module installation.\n        */\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentCriterionRepository;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass ProductComments extends Module implements WidgetInterface\n{\n    const INSTALL_SQL_FILE = 'install.sql';\n\n    private $_html = '';\n\n    private $_productCommentsCriterionTypes = [];\n    private $_baseUrl;\n\n    public function __construct()\n    {\n        $this->name = 'productcomments';\n        $this->tab = 'front_office_features';\n        $this->version = '5.0.2';\n        $this->author = 'PrestaShop';\n        $this->need_instance = 0;\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Product Comments', [], 'Modules.Productcomments.Admin');\n        $this->description = $this->trans('Allow users to post reviews on your products and/or rate them based on specific criteria.', [], 'Modules.Productcomments.Admin');\n\n        $this->ps_versions_compliancy = ['min' => '1.7.6', 'max' => _PS_VERSION_];\n    }\n\n    public function install($keep = true)\n    {\n        if (Shop::isFeatureActive()) {\n            Shop::setContext(Shop::CONTEXT_ALL);\n        }\n\n        if ($keep) {\n            if (!file_exists(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            } elseif (!$sql = file_get_contents(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            }\n            $sql = str_replace(['PREFIX_', 'ENGINE_TYPE'], [_DB_PREFIX_, _MYSQL_ENGINE_], $sql);\n            $sql = preg_split(\"/;\\s*[\\r\\n]+/\", trim($sql));\n\n            foreach ($sql as $query) {\n                if (!Db::getInstance()->execute(trim($query))) {\n                    return false;\n                }\n            }\n        }\n\n        if (\n            parent::install() == false ||\n            !$this->registerHook('displayFooterProduct') || //Product page footer\n            !$this->registerHook('displayHeader') || //Adds css and javascript on front\n            !$this->registerHook('displayProductListReviews') || //Product list miniature\n            !$this->registerHook('displayProductAdditionalInfo') || //Display info in checkout column\n            !$this->registerHook('filterProductContent') || // Add infos to Product page\n            !$this->registerHook('registerGDPRConsent') ||\n            !$this->registerHook('actionDeleteGDPRCustomer') ||\n            !$this->registerHook('actionExportGDPRData') ||\n\n            !Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', 30) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', 1) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', 5) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', 1)\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function uninstall($keep = true)\n    {\n        if (\n            !parent::uninstall() || ($keep && !$this->deleteTables()) ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MODERATE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_COMMENTS_PER_PAGE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ANONYMISATION') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ALLOW_GUESTS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_USEFULNESS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MINIMAL_TIME') ||\n\n            !$this->unregisterHook('registerGDPRConsent') ||\n            !$this->unregisterHook('actionDeleteGDPRCustomer') ||\n            !$this->unregisterHook('actionExportGDPRData') ||\n\n            !$this->unregisterHook('displayProductAdditionalInfo') ||\n            !$this->unregisterHook('displayHeader') ||\n            !$this->unregisterHook('displayFooterProduct') ||\n            !$this->unregisterHook('displayProductListReviews')\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function reset()\n    {\n        if (!$this->uninstall(false)) {\n            return false;\n        }\n        if (!$this->install(false)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function deleteTables()\n    {\n        return Db::getInstance()->execute('\n\t\t\tDROP TABLE IF EXISTS\n\t\t\t`' . _DB_PREFIX_ . 'product_comment`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_product`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_lang`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_category`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_grade`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_usefulness`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_report`');\n    }\n\n    public function getCacheId($id_product = null)\n    {\n        return parent::getCacheId() . '|' . (int) $id_product;\n    }\n\n    protected function _postProcess()\n    {\n        if (Tools::isSubmit('submitModerate')) {\n            Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', (int) Tools::getValue('PRODUCT_COMMENTS_MODERATE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', (int) Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', (int) Tools::getValue('PRODUCT_COMMENTS_USEFULNESS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', (int) Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', (int) Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION'));\n            Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', (int) Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME'));\n            $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Settings updated', [], 'Modules.Productcomments.Admin') . '</div>';\n        } elseif (Tools::isSubmit('productcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n            ProductComment::deleteReports($id_product_comment);\n        } elseif (Tools::isSubmit('deleteproductcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->delete();\n        } elseif (Tools::isSubmit('submitEditCriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            $criterion->id_product_comment_criterion_type = (int) Tools::getValue('id_product_comment_criterion_type');\n            $criterion->active = Tools::getValue('active');\n\n            $languages = Language::getLanguages();\n            $name = [];\n            foreach ($languages as $key => $value) {\n                $name[$value['id_lang']] = Tools::getValue('name_' . $value['id_lang']);\n            }\n            $criterion->name = $name;\n\n            if (!$criterion->validateFields(false) || !$criterion->validateFieldsLang(false)) {\n                $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n            } else {\n                $criterion->save();\n\n                // Clear before reinserting data\n                $criterion->deleteCategories();\n                $criterion->deleteProducts();\n                if ($criterion->id_product_comment_criterion_type == 2) {\n                    if ($categories = Tools::getValue('categoryBox')) {\n                        if (count($categories)) {\n                            foreach ($categories as $id_category) {\n                                $criterion->addCategory((int) $id_category);\n                            }\n                        }\n                    }\n                } elseif ($criterion->id_product_comment_criterion_type == 3) {\n                    if ($products = Tools::getValue('ids_product')) {\n                        if (count($products)) {\n                            foreach ($products as $product) {\n                                $criterion->addProduct((int) $product);\n                            }\n                        }\n                    }\n                }\n                if ($criterion->save()) {\n                    Tools::redirectAdmin(Context::getContext()->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'conf' => 4]));\n                } else {\n                    $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('deleteproductcommentscriterion')) {\n            $productCommentCriterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($productCommentCriterion->id) {\n                if ($productCommentCriterion->delete()) {\n                    $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Criterion deleted', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('statusproductcommentscriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($criterion->id) {\n                $criterion->active = (int) (!$criterion->active);\n                $criterion->save();\n            }\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'conf' => 4, 'module_name' => $this->name]));\n        } elseif ($id_product_comment = (int) Tools::getValue('approveComment')) {\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n        } elseif ($id_product_comment = (int) Tools::getValue('noabuseComment')) {\n            ProductComment::deleteReports($id_product_comment);\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name]));\n        }\n\n        $this->_clearcache('productcomments_reviews.tpl');\n    }\n\n    public function getContent()\n    {\n        include_once dirname(__FILE__) . '/ProductComment.php';\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $this->_html = '';\n        if (Tools::isSubmit('updateproductcommentscriterion')) {\n            $this->_html .= $this->renderCriterionForm((int) Tools::getValue('id_product_comment_criterion'));\n        } else {\n            $this->_postProcess();\n            $this->_html .= $this->renderConfigForm();\n            $this->_html .= $this->renderModerateLists();\n            $this->_html .= $this->renderCriterionList();\n            $this->_html .= $this->renderCommentsList();\n        }\n\n        $this->_setBaseUrl();\n        $this->_productCommentsCriterionTypes = ProductCommentCriterion::getTypes();\n\n        $this->context->controller->addJs($this->_path . 'js/moderate.js');\n\n        return $this->_html;\n    }\n\n    private function _setBaseUrl()\n    {\n        $this->_baseUrl = 'index.php?';\n        foreach ($_GET as $k => $value) {\n            if (!in_array($k, ['deleteCriterion', 'editCriterion'])) {\n                $this->_baseUrl .= $k . '=' . $value . '&';\n            }\n        }\n        $this->_baseUrl = rtrim($this->_baseUrl, '&');\n    }\n\n    public function renderConfigForm()\n    {\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Configuration', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('All reviews must be validated by an employee', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MODERATE',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Allow guest reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ALLOW_GUESTS',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Enable upvotes / downvotes on reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_USEFULNESS',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Anonymize the user\\'s last name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ANONYMISATION',\n                        'desc' => $this->trans('Display only initials, e.g. John D.', [], 'Modules.Productcomments.Admin'),\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Minimum time between 2 reviews from the same user', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MINIMAL_TIME',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'seconds',\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Number of comments per page', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_COMMENTS_PER_PAGE',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'comments',\n                    ],\n                ],\n                'submit' => [\n                    'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                    'class' => 'btn btn-default pull-right',\n                    'name' => 'submitModerate',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitProducCommentsConfiguration';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function renderModerateLists()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n        $return = null;\n\n        if (Configuration::get('PRODUCT_COMMENTS_MODERATE')) {\n            $comments = ProductComment::getByValidate(0, false);\n\n            $fields_list = $this->getStandardFieldList();\n\n            if (version_compare(_PS_VERSION_, '1.6', '<')) {\n                $return .= '<h1>' . $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin') . '</h1>';\n                $actions = ['enable', 'delete'];\n            } else {\n                $actions = ['approve', 'delete'];\n            }\n\n            $helper = new HelperList();\n            $helper->list_id = 'form-productcomments-moderate-list';\n            $helper->shopLinkType = '';\n            $helper->simple_header = true;\n            $helper->actions = $actions;\n            $helper->show_toolbar = false;\n            $helper->module = $this;\n            $helper->listTotal = count($comments);\n            $helper->identifier = 'id_product_comment';\n            $helper->title = $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin');\n            $helper->table = $this->name;\n            $helper->table_id = 'waiting-approval-productcomments-list';\n            $helper->token = Tools::getAdminTokenLite('AdminModules');\n            $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n            $helper->no_link = true;\n\n            $return .= $helper->generateList($comments, $fields_list);\n        }\n\n        $comments = ProductComment::getReportedComments();\n\n        $fields_list = $this->getStandardFieldList();\n\n        $actions = ['delete', 'noabuse'];\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-reported-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = true;\n        $helper->actions = $actions;\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->listTotal = count($comments);\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Reported Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->table_id = 'reported-productcomments-list';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $return .= $helper->generateList($comments, $fields_list);\n\n        return $return;\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayApproveLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'approveComment' => $id]),\n            'action' => $this->trans('Approve', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_approve.tpl');\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayNoabuseLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'noabuseComment' => $id]),\n            'action' => $this->trans('Not abusive', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_noabuse.tpl');\n    }\n\n    public function renderCriterionList()\n    {\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $criterions = ProductCommentCriterion::getCriterions($this->context->language->id, false, false);\n\n        $fields_list = [\n            'id_product_comment_criterion' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'name' => [\n                'title' => $this->trans('Name', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'type_name' => [\n                'title' => $this->trans('Type', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'active' => [\n                'title' => $this->trans('Status', [], 'Modules.Productcomments.Admin'),\n                'active' => 'status',\n                'type' => 'bool',\n            ],\n        ];\n\n        $helper = new HelperList();\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['edit', 'delete'];\n        $helper->show_toolbar = true;\n        $helper->toolbar_btn['new'] = [\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'updateproductcommentscriterion' => '']),\n            'desc' => $this->trans('Add New Criterion', [], 'Modules.Productcomments.Admin'),\n        ];\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment_criterion';\n        $helper->title = $this->trans('Review Criteria', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name . 'criterion';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n\n        return $helper->generateList($criterions, $fields_list);\n    }\n\n    public function renderCommentsList()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n\n        $fields_list = $this->getStandardFieldList();\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['delete'];\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Approved Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->table_id = 'approved-productcomments-list';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $page = ($page = Tools::getValue('submitFilter' . $helper->list_id)) ? $page : 1;\n        $pagination = ($pagination = Tools::getValue($helper->list_id . '_pagination')) ? $pagination : 50;\n\n        $moderate = Configuration::get('PRODUCT_COMMENTS_MODERATE');\n        if (empty($moderate)) {\n            $comments = ProductComment::getByValidate(0, false, (int) $page, (int) $pagination, true);\n            $count = (int) ProductComment::getCountByValidate(0, true);\n        } else {\n            $comments = ProductComment::getByValidate(1, false, (int) $page, (int) $pagination);\n            $count = (int) ProductComment::getCountByValidate(1);\n        }\n\n        $helper->listTotal = $count;\n\n        return $helper->generateList($comments, $fields_list);\n    }\n\n    public function getConfigFieldsValues()\n    {\n        return [\n            'PRODUCT_COMMENTS_MODERATE' => Tools::getValue('PRODUCT_COMMENTS_MODERATE', Configuration::get('PRODUCT_COMMENTS_MODERATE')),\n            'PRODUCT_COMMENTS_ALLOW_GUESTS' => Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS', Configuration::get('PRODUCT_COMMENTS_ALLOW_GUESTS')),\n            'PRODUCT_COMMENTS_USEFULNESS' => Tools::getValue('PRODUCT_COMMENTS_USEFULNESS', Configuration::get('PRODUCT_COMMENTS_USEFULNESS')),\n            'PRODUCT_COMMENTS_MINIMAL_TIME' => Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME', Configuration::get('PRODUCT_COMMENTS_MINIMAL_TIME')),\n            'PRODUCT_COMMENTS_COMMENTS_PER_PAGE' => Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE')),\n            'PRODUCT_COMMENTS_ANONYMISATION' => Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION', Configuration::get('PRODUCT_COMMENTS_ANONYMISATION')),\n        ];\n    }\n\n    public function getCriterionFieldsValues($id = 0)\n    {\n        $criterion = new ProductCommentCriterion($id);\n\n        return [\n            'name' => $criterion->name,\n            'id_product_comment_criterion_type' => $criterion->id_product_comment_criterion_type,\n            'active' => $criterion->active,\n            'id_product_comment_criterion' => $criterion->id,\n        ];\n    }\n\n    public function getStandardFieldList()\n    {\n        return [\n            'id_product_comment' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-id',\n            ],\n            'title' => [\n                'title' => $this->trans('Review title', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-title',\n            ],\n            'content' => [\n                'title' => $this->trans('Review', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-content',\n            ],\n            'grade' => [\n                'title' => $this->trans('Rating', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'suffix' => '/5',\n                'search' => false,\n                'class' => 'product-comment-rating',\n            ],\n            'customer_name' => [\n                'title' => $this->trans('Author', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-author',\n                'callback' => 'renderAuthorName',\n                'callback_object' => $this,\n            ],\n            'name' => [\n                'title' => $this->trans('Product', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n                'class' => 'product-comment-product-name',\n            ],\n            'date_add' => [\n                'title' => $this->trans('Time of publication', [], 'Modules.Productcomments.Admin'),\n                'type' => 'date',\n                'search' => false,\n                'class' => 'product-comment-date',\n            ],\n        ];\n    }\n\n    /**\n     * Renders author name for the list, with the link if the author is a customer.\n     *\n     * @param string $value\n     * @param array $row\n     *\n     * @return string\n     */\n    public function renderAuthorName($value, $row)\n    {\n        $value = htmlentities($value);\n        if (!empty($row['customer_id'])) {\n            $linkToCustomerProfile = $this->context->link->getAdminLink('AdminCustomers', false, [], [\n                'id_customer' => $row['customer_id'],\n                'viewcustomer' => 1,\n            ]);\n\n            return '<a href=\"' . $linkToCustomerProfile . '\">' . $value . '</a>';\n        }\n\n        return $value;\n    }\n\n    public function renderCriterionForm($id_criterion = 0)\n    {\n        $types = ProductCommentCriterion::getTypes();\n        $query = [];\n        foreach ($types as $key => $value) {\n            $query[] = [\n                'id' => $key,\n                'label' => $value,\n            ];\n        }\n\n        $criterion = new ProductCommentCriterion((int) $id_criterion);\n        $selected_categories = $criterion->getCategories();\n\n        $product_table_values = Product::getSimpleProducts($this->context->language->id);\n        $selected_products = $criterion->getProducts();\n        foreach ($product_table_values as $key => $product) {\n            if (false !== array_search($product['id_product'], $selected_products)) {\n                $product_table_values[$key]['selected'] = 1;\n            }\n        }\n\n        if (version_compare(_PS_VERSION_, '1.6', '<')) {\n            $field_category_tree = [\n                'type' => 'categories_select',\n                'name' => 'categoryBox',\n                'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                'category_tree' => $this->initCategoriesAssociation(null, $id_criterion),\n            ];\n        } else {\n            $field_category_tree = [\n                'type' => 'categories',\n                'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                'name' => 'categoryBox',\n                'desc' => $this->trans('Mark the boxes of categories to which this criterion applies.', [], 'Modules.Productcomments.Admin'),\n                'tree' => [\n                    'use_search' => false,\n                    'id' => 'categoryBox',\n                    'use_checkbox' => true,\n                    'selected_categories' => $selected_categories,\n                ],\n                //retro compat 1.5 for category tree\n                'values' => [\n                    'trads' => [\n                        'Root' => Category::getTopCategory(),\n                        'selected' => $this->trans('Selected', [], 'Modules.Productcomments.Admin'),\n                        'Collapse All' => $this->trans('Collapse All', [], 'Modules.Productcomments.Admin'),\n                        'Expand All' => $this->trans('Expand All', [], 'Modules.Productcomments.Admin'),\n                        'Check All' => $this->trans('Check All', [], 'Modules.Productcomments.Admin'),\n                        'Uncheck All' => $this->trans('Uncheck All', [], 'Modules.Productcomments.Admin'),\n                    ],\n                    'selected_cat' => $selected_categories,\n                    'input_name' => 'categoryBox[]',\n                    'use_radio' => false,\n                    'use_search' => false,\n                    'disabled_categories' => [],\n                    'top_category' => Category::getTopCategory(),\n                    'use_context' => true,\n                ],\n            ];\n        }\n\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Add new criterion', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'hidden',\n                        'name' => 'id_product_comment_criterion',\n                    ],\n                    [\n                        'type' => 'text',\n                        'lang' => true,\n                        'label' => $this->trans('Criterion name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'name',\n                        'desc' => $this->trans('Maximum length: %s characters', [ProductCommentCriterion::NAME_MAX_LENGTH], 'Modules.Productcomments.Admin'),\n                    ],\n                    [\n                        'type' => 'select',\n                        'name' => 'id_product_comment_criterion_type',\n                        'label' => $this->trans('Application scope of the criterion', [], 'Modules.Productcomments.Admin'),\n                        'options' => [\n                            'query' => $query,\n                            'id' => 'id',\n                            'name' => 'label',\n                        ],\n                    ],\n                    $field_category_tree,\n                    [\n                        'type' => 'products',\n                        'label' => $this->trans('The criterion will be restricted to the following products', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'ids_product',\n                        'values' => $product_table_values,\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Active', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'active',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                ],\n                'submit' => [\n                    'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                    'class' => 'btn btn-default pull-right',\n                    'name' => 'submitEditCriterion',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitEditCriterion';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getCriterionFieldsValues($id_criterion),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function initCategoriesAssociation($id_root = null, $id_criterion = 0)\n    {\n        if (is_null($id_root)) {\n            $id_root = Configuration::get('PS_ROOT_CATEGORY');\n        }\n        $id_shop = (int) Tools::getValue('id_shop');\n        $shop = new Shop($id_shop);\n        if ($id_criterion == 0) {\n            $selected_cat = [];\n        } else {\n            $pdc_object = new ProductCommentCriterion($id_criterion);\n            $selected_cat = $pdc_object->getCategories();\n        }\n\n        if (Shop::getContext() == Shop::CONTEXT_SHOP && Tools::isSubmit('id_shop')) {\n            $root_category = new Category($shop->id_category);\n        } else {\n            $root_category = new Category($id_root);\n        }\n        $root_category = ['id_category' => $root_category->id, 'name' => $root_category->name[$this->context->language->id]];\n\n        $helper = new Helper();\n\n        return $helper->renderCategoryTree($root_category, $selected_cat, 'categoryBox', false, true);\n    }\n\n    public function hookActionDeleteGDPRCustomer($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $productCommentRepository->cleanCustomerData($customer['id']);\n        }\n\n        return true;\n    }\n\n    public function hookActionExportGDPRData($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $langId = isset($customer['id_lang']) ? $customer['id_lang'] : $this->context->language->id;\n\n            return json_encode($productCommentRepository->getCustomerData($customer['id'], $langId));\n        }\n    }\n\n    /**\n     *  Inject the needed javascript and css files in the appropriate pages\n     */\n    public function hookDisplayHeader()\n    {\n        $jsList = [];\n        $cssList = [];\n\n        $cssList[] = '/modules/productcomments/views/css/productcomments.css';\n        $jsList[] = '/modules/productcomments/views/js/jquery.rating.plugin.js';\n        $jsList[] = '/modules/productcomments/views/js/productListingComments.js';\n        if ($this->context->controller instanceof ProductControllerCore) {\n            $jsList[] = '/modules/productcomments/views/js/post-comment.js';\n            $jsList[] = '/modules/productcomments/views/js/list-comments.js';\n            $jsList[] = '/modules/productcomments/views/js/jquery.simplePagination.js';\n        }\n        foreach ($cssList as $cssUrl) {\n            $this->context->controller->registerStylesheet(sha1($cssUrl), $cssUrl, ['media' => 'all', 'priority' => 80]);\n        }\n        foreach ($jsList as $jsUrl) {\n            $this->context->controller->registerJavascript(sha1($jsUrl), $jsUrl, ['position' => 'bottom', 'priority' => 80]);\n        }\n    }\n\n    /**\n     * Display the comment list with the post modal at the bottom of the page\n     *\n     * @param array $params\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function hookDisplayFooterProduct($params)\n    {\n        return $this->renderProductCommentsList($params['product']) . $this->renderProductCommentModal($params['product']);\n    }\n\n    /**\n     * Inject data about productcomments in the product object for frontoffice\n     *\n     * @param array $params\n     *\n     * @return array\n     */\n    public function hookFilterProductContent(array $params)\n    {\n        if (empty($params['object']->id)) {\n            return $params;\n        }\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $averageRating = $productCommentRepository->getAverageGrade($params['object']->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $nbComments = $productCommentRepository->getCommentsNumber($params['object']->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        /* @phpstan-ignore-next-line */\n        $params['object']->productComments = [\n            'averageRating' => $averageRating,\n            'nbComments' => $nbComments,\n        ];\n\n        return $params;\n    }\n\n    /**\n     * Used to render the product comments list\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentsList($product)\n    {\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $averageGrade = $productCommentRepository->getAverageGrade($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($product->id, (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        $this->context->smarty->assign([\n            'post_allowed' => $isPostAllowed,\n            'usefulness_enabled' => Configuration::get('PRODUCT_COMMENTS_USEFULNESS'),\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'list_comments_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ListComments',\n                ['id_product' => $product->id]\n            ),\n            'update_comment_usefulness_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'UpdateCommentUsefulness'\n            ),\n            'report_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ReportComment'\n            ),\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/product-comments-list.tpl');\n    }\n\n    /**\n     * Used to render the product modal\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentModal($product)\n    {\n        /** @var ProductCommentCriterionRepository $criterionRepository */\n        $criterionRepository = $this->context->controller->getContainer()->get('product_comment_criterion_repository');\n        $criterions = $criterionRepository->getByProduct($product->id, $this->context->language->id);\n\n        $this->context->smarty->assign([\n            'logged' => (bool) $this->context->cookie->id_customer,\n            'post_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'PostComment',\n                ['id_product' => $product->id]\n            ),\n            'moderation_active' => (int) Configuration::get('PRODUCT_COMMENTS_MODERATE'),\n            'criterions' => $criterions,\n            'product' => $product,\n            'id_module' => $this->id,\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/post-comment-modal.tpl');\n    }\n\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $averageGrade = $productCommentRepository->getAverageGrade($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($configuration['id_product'], (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        return [\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'post_allowed' => $isPostAllowed,\n        ];\n    }\n\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        $variables = [];\n        $tplHookPath = 'module:productcomments/views/templates/hook/';\n\n        if ('displayProductListReviews' === $hookName || isset($configuration['type']) && 'product_list' === $configuration['type']) {\n            $product = $configuration['product'];\n            $idProduct = $product['id_product'];\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $variables = array_merge($variables, [\n                'product' => $product,\n                'product_comment_grade_url' => $this->context->link->getModuleLink('productcomments', 'CommentGrade'),\n            ]);\n\n            $filePath = $tplHookPath . 'product-list-reviews.tpl';\n        } elseif ($this->context->controller instanceof ProductControllerCore) {\n            $idProduct = $this->context->controller->getProduct()->id;\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $filePath = 'quickview' === Tools::getValue('action')\n                ? $tplHookPath . 'product-additional-info-quickview.tpl'\n                : $tplHookPath . 'product-additional-info.tpl';\n        }\n\n        if (empty($variables) || empty($filePath)) {\n            return false;\n        }\n\n        $this->smarty->assign($variables);\n\n        return $this->fetch($filePath);\n    }\n\n    /**\n     * empty listener for registerGDPRConsent hook\n     */\n    public function hookRegisterGDPRConsent()\n    {\n        /* registerGDPRConsent is a special kind of hook that doesn't need a listener, see :\n           https://build.prestashop.com/howtos/module/how-to-make-your-module-compliant-with-prestashop-official-gdpr-compliance-module/\n          However since Prestashop 1.7.8, modules must implement a listener for all the hooks they register: a check is made\n          at module installation.\n        */\n    }\n}\n"], "filenames": ["productcomments.php"], "buggy_code_start_loc": [679], "buggy_code_end_loc": [679], "fixing_code_start_loc": [680], "fixing_code_end_loc": [681], "type": "CWE-79", "message": "This package is a PrestaShop module that allows users to post reviews and rate products. There is a vulnerability where the attacker could steal an administrator's cookie. The issue is fixed in version 5.0.2.", "other": {"cve": {"id": "CVE-2022-35933", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-02T20:15:08.510", "lastModified": "2022-09-08T03:31:02.197", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This package is a PrestaShop module that allows users to post reviews and rate products. There is a vulnerability where the attacker could steal an administrator's cookie. The issue is fixed in version 5.0.2."}, {"lang": "es", "value": "Este paquete es un m\u00f3dulo de PrestaShop que permite a usuarios publicar rese\u00f1as y calificar productos. Se presenta una vulnerabilidad por la que el atacante podr\u00eda robar la cookie de un administrador. El problema ha sido corregido en versi\u00f3n 5.0.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:productcomments:*:*:*:*:*:prestashop:*:*", "versionEndExcluding": "5.0.2", "matchCriteriaId": "FE01B49A-50C3-4A51-9FEF-EECE90AB7140"}]}]}], "references": [{"url": "https://github.com/PrestaShop/productcomments/commit/314456d739155aa71f0b235827e8e0f24b97c26b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/productcomments/security/advisories/GHSA-prrh-qvhf-x788", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/productcomments/commit/314456d739155aa71f0b235827e8e0f24b97c26b"}}