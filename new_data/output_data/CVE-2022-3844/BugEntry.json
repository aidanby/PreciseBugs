{"buggy_code": ["#!/usr/local/bin/perl\n# Show a terminal that is connected to a Websockets server via Webmin proxying\n\nuse lib (\"$ENV{'DOCUMENT_ROOT'}/xterm/lib\");\n\nrequire './xterm-lib.pl';\n&ReadParse();\n\n# Get Webmin current version for links serial\nmy $wver = &get_webmin_version();\n$wver =~ s/\\.//;\n\n# Check for needed modules\nmy $modname = \"Net::WebSocket::Server\";\neval \"use ${modname};\";\nif ($@) {\n\t&ui_print_header(undef, $text{'index_title'}, \"\", undef, 1, 1, 0);\n\tprint &text('index_cpan', \"<tt>$modname</tt>\",\n\t\t    \"../cpan/download.cgi?source=3&cpan=$modname&mode=2&return=/$module_name/&returndesc=\".&urlize($module_info{'desc'})),\"<p>\\n\";\n\t&ui_print_footer(\"/\", $text{'index'});\n\treturn;\n\t}\n\n# Build Xterm dependency links\nmy $termlinks = \n\t{ 'css' => ['xterm.css?$wver'],\n\t  'js'  => ['xterm.js?$wver',\n\t            'xterm-addon-attach.js?$wver'] };\n\n# Pre-process options\nmy $conf_size_str = $config{'size'};\nmy $def_cols_n = 80;\nmy $def_rows_n = 24;\nmy $rcvd_cnt_w = int($ENV{'HTTP_X_AGENT_WIDTH'}) || int($in{'w'});\nmy $rcvd_cnt_h = int($ENV{'HTTP_X_AGENT_HEIGHT'}) || int($in{'h'});\nmy $rcvd_or_def_col_w = &is_float($in{'f'}) ? $in{'f'} : 9;\nmy $rcvd_or_def_row_h = &is_float($in{'l'}) ? $in{'l'} : 18;\nmy $rcvd_or_def_col_o = int($in{'g'}) || 1;\nmy $rcvd_or_def_row_o = int($in{'o'}) || 0;\nmy $resize_call = $in{'r'};\nmy $xmlhr = $ENV{'HTTP_X_REQUESTED_WITH'} eq \"XMLHttpRequest\";\nmy %term_opts;\n\n# Parse module config\nmy ($conf_cols_n, $conf_rows_n) = ($conf_size_str =~ /([\\d]+)X([\\d]+)/i);\n$conf_cols_n = int($conf_cols_n);\n$conf_rows_n = int($conf_rows_n);\nif ($conf_cols_n && $conf_rows_n) {\n\t$termjs_opts{'ContainerStyle'} = \"style='width: fit-content; margin: 0 auto;'\";\n\t}\nelse {\n\t$termjs_opts{'ContainerStyle'} = \"style='height: 97%;'\";\n\t}\n\n# Set default container size in fixel depending on the mode\nmy $calc_cols_abs = ($rcvd_cnt_w || int($conf_cols_n * $rcvd_or_def_col_w) || 720) . \"px\";\nmy $calc_rows_abs = ($rcvd_cnt_h || int($conf_rows_n * $rcvd_or_def_row_h) || 432) . \"px\";\n$calc_cols_abs = \"auto\" if (!$conf_cols_n);\n$calc_rows_abs = \"88vh\" if (!$conf_rows_n);\n\n# Set pixel to columns conversion\nmy $cols_num_user = int($rcvd_cnt_w / $rcvd_or_def_col_w);\n\n# Set pixel to rows (lines) conversion\nmy $rows_num_user = int($rcvd_cnt_h / $rcvd_or_def_row_h);\n\n# Set columns and rows environment vars\nmy $env_cols = $ENV{'COLUMNS'} = $conf_cols_n || $cols_num_user || $def_cols_n;\nmy $env_rows = $ENV{'LINES'} = $conf_rows_n || $rows_num_user || $def_rows_n;\n\n# Define columns and rows\n$termjs_opts{'Options'} = \"{ cols: $env_cols, rows: $env_rows }\";\n\n# Adjust columns and rows offset for env vars, which\n# should be always a tiny bit smaller than Xterm.js\n$ENV{'COLUMNS'} -= $rcvd_or_def_col_o;\n$ENV{'LINES'} -= $rcvd_or_def_row_o;\n\n# Tweak old themes inline\nmy $styles_inline = <<EOF;\n\nbody[style='height:100%'] {\n\theight: 97% !important; \n}\n#terminal {\n\tborder: 1px solid #000;\n\tbackground-color: #000;\n\tmin-width: $calc_cols_abs;\n\tmin-height: $calc_rows_abs;\n\theight: $calc_rows_abs;\n\tpadding: 2px;\n}\n#terminal:empty:after {\n\tdisplay: block;\n\tcontent: \" \";\n\toverflow: hidden;\n\t\n\twidth: 24px;\n\theight: 24px;\n\tmargin: 2% auto;\n\tborder-radius: 50%;\n\tbox-sizing: border-box;\n\tborder: 1px solid transparent;\n\tborder-top-color: rgba(255, 255, 255, 0.8);\n\tborder-bottom-color: rgba(255, 255, 255, 0.8);\n\tanimation: jumping-spinner 1s ease infinite;\n}\n\\@keyframes jumping-spinner {\n    to {\n        transform: rotate(360deg);\n    }\n}\n#terminal + script ~ * {\n\tdisplay: none\n}\n\nEOF\n\n# Print header\n&ui_print_header(undef, $text{'index_title'}, \"\", undef, 1, 1, 0, undef,\n\t\t \"<link rel=stylesheet href=\\\"$termlinks->{'css'}[0]\\\">\\n\".\n\t\t \"<script src=\\\"$termlinks->{'js'}[0]\\\"></script>\\n\".\n\t\t \"<script src=\\\"$termlinks->{'js'}[1]\\\"></script>\\n\".\n\t\t \"<style>$styles_inline</style>\\n\"\n\t\t);\n\n# Print main container\nprint \"<div id=\\\"terminal\\\" $termjs_opts{'ContainerStyle'}></div>\\n\";\n\n# Detect terminal width and height for regular themes \nif (!$xmlhr) {\n\t# Set column size depending on the browser window\n\t# size unless defined in config (non-auto mode)\n\tif (!$conf_cols_n && !$conf_rows_n) {\n\t\tif ((!$rcvd_cnt_w ||\n\t\t     !$rcvd_cnt_h) || $resize_call) {\n\t\t\tprint \"<script>location.href = location.pathname + '?w=' + document.querySelector('#terminal').clientWidth + '&h=' + document.querySelector('#terminal').clientHeight;</script>\";\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t# Clear URL to make sure resized and\n\t# reloaded page will work properly\n\tprint \"<script>history.replaceState(null, String(), location.pathname);</script>\";\n\t}\n\n# Find ports already in use\n&lock_file(&get_miniserv_config_file());\nmy %miniserv;\n&get_miniserv_config(\\%miniserv);\nmy %inuse;\nforeach my $k (keys %miniserv) {\n\tif ($k =~ /^websockets_/ && $miniserv{$k} =~ /port=(\\d+)/) {\n\t\t$inuse{$1} = 1;\n\t\t}\n\t}\n\n# Pick a port and configure Webmin to proxy it\nmy $port = $config{'base_port'} || 555;\nwhile(1) {\n\tif (!$inuse{$port}) {\n\t\t&open_socket(\"127.0.0.1\", $port, my $fh, \\$err);\n\t\tlast if ($err);\n\t\tclose($fh);\n\t\t}\n\t$port++;\n\t}\nmy $wspath = \"/$module_name/ws-\".$port;\n$miniserv{'websockets_'.$wspath} = \"host=127.0.0.1 port=$port wspath=/ user=$remote_user\";\n&put_miniserv_config(\\%miniserv);\n&unlock_file(&get_miniserv_config_file());\n&reload_miniserv();\n\n# Launch the shell server on that port\n&foreign_require(\"cron\");\nmy $shellserver_cmd = \"$module_config_directory/shellserver.pl\";\nif (!-r $shellserver_cmd) {\n\t&cron::create_wrapper($shellserver_cmd, $module_name, \"shellserver.pl\");\n\t}\nmy $user = $access{'user'};\nif ($user eq \"*\") {\n\t$user = $remote_user;\n\t}\n\n# Switch to given user\nif ($user eq \"root\") {\n\tmy $username = $in{'user'};\n\tif ($username) {\n\tmy @uinfo = getpwnam($username);\n\t\tif (@uinfo) {\n\t\t\t$user = $username;\n\t\t\t}\n\t\telse {\n\t\t\t&error(&text('index_euser', $username));\n\t\t\t}\n\t\t}\n\t}\n\ndefined(getpwnam($user)) || &error(&text('index_euser', $user));\nmy $tmpdir = &tempname_dir();\n$ENV{'SESSION_ID'} = $main::session_id;\n&system_logged(\"$shellserver_cmd $port $user >$tmpdir/ws-$port.out 2>&1 </dev/null\");\n\n# Open the terminal\nmy $url = \"wss://\".$ENV{'HTTP_HOST'}.$wspath;\nmy $term_script = <<EOF;\n\n(function() {\n\tvar socket = new WebSocket('$url', 'binary'),\n\t    termcont = document.getElementById('terminal'),\n\t    err_conn_cannot = 'Cannot connect to the socket $url',\n\t    err_conn_lost = 'Connection to the socket $url lost';\n\tsocket.onopen = function() {\n\t\tvar term = new Terminal($termjs_opts{'Options'}),\n\t\t    attachAddon = new AttachAddon.AttachAddon(this);\n\t\tterm.loadAddon(attachAddon);\n\t\tterm.open(termcont);\n\t\tterm.focus();\n\t\tsocket.send('clear\\\\r');\n\t};\n\tsocket.onerror = function() {\n\t\ttermcont.innerHTML = '<tt style=\"color: \\#ff0000\">Error: ' +\n\t\t\terr_conn_cannot + '</tt>';\n\t};\n\tsocket.onclose = function() {\n\t\ttermcont.innerHTML = '<tt style=\"color: \\#ff0000\">Error: ' +\n\t\t\terr_conn_lost + '</tt>';\n\t};\n})();\n\nEOF\n\n# Return inline script data depending on type\nprint \"<script>\\n\";\nif ($xmlhr) {\n\tprint \"var xterm_argv = \".\n\t      &convert_to_json(\n\t\t\t{ 'files' => $termlinks,\n\t\t\t  'cols' => $env_cols,\n\t\t\t  'rows' => $env_rows,\n\t\t\t  'port' => $port,\n\t\t\t  'socket_url' => $url });\n\t}\nelse {\n\tprint $term_script;\n\t}\nprint \"</script>\\n\";\n&ui_print_footer();\n\n"], "fixing_code": ["#!/usr/local/bin/perl\n# Show a terminal that is connected to a Websockets server via Webmin proxying\n\nuse lib (\"$ENV{'DOCUMENT_ROOT'}/xterm/lib\");\n\nrequire './xterm-lib.pl';\n&ReadParse();\n\n# Get Webmin current version for links serial\nmy $wver = &get_webmin_version();\n$wver =~ s/\\.//;\n\n# Check for needed modules\nmy $modname = \"Net::WebSocket::Server\";\neval \"use ${modname};\";\nif ($@) {\n\t&ui_print_header(undef, $text{'index_title'}, \"\", undef, 1, 1, 0);\n\tprint &text('index_cpan', \"<tt>$modname</tt>\",\n\t\t    \"../cpan/download.cgi?source=3&cpan=$modname&mode=2&return=/$module_name/&returndesc=\".&urlize($module_info{'desc'})),\"<p>\\n\";\n\t&ui_print_footer(\"/\", $text{'index'});\n\treturn;\n\t}\n\n# Build Xterm dependency links\nmy $termlinks = \n\t{ 'css' => ['xterm.css?$wver'],\n\t  'js'  => ['xterm.js?$wver',\n\t            'xterm-addon-attach.js?$wver'] };\n\n# Pre-process options\nmy $conf_size_str = $config{'size'};\nmy $def_cols_n = 80;\nmy $def_rows_n = 24;\nmy $rcvd_cnt_w = int($ENV{'HTTP_X_AGENT_WIDTH'}) || int($in{'w'});\nmy $rcvd_cnt_h = int($ENV{'HTTP_X_AGENT_HEIGHT'}) || int($in{'h'});\nmy $rcvd_or_def_col_w = &is_float($in{'f'}) ? $in{'f'} : 9;\nmy $rcvd_or_def_row_h = &is_float($in{'l'}) ? $in{'l'} : 18;\nmy $rcvd_or_def_col_o = int($in{'g'}) || 1;\nmy $rcvd_or_def_row_o = int($in{'o'}) || 0;\nmy $resize_call = $in{'r'};\nmy $xmlhr = $ENV{'HTTP_X_REQUESTED_WITH'} eq \"XMLHttpRequest\";\nmy %term_opts;\n\n# Parse module config\nmy ($conf_cols_n, $conf_rows_n) = ($conf_size_str =~ /([\\d]+)X([\\d]+)/i);\n$conf_cols_n = int($conf_cols_n);\n$conf_rows_n = int($conf_rows_n);\nif ($conf_cols_n && $conf_rows_n) {\n\t$termjs_opts{'ContainerStyle'} = \"style='width: fit-content; margin: 0 auto;'\";\n\t}\nelse {\n\t$termjs_opts{'ContainerStyle'} = \"style='height: 97%;'\";\n\t}\n\n# Set default container size in fixel depending on the mode\nmy $calc_cols_abs = ($rcvd_cnt_w || int($conf_cols_n * $rcvd_or_def_col_w) || 720) . \"px\";\nmy $calc_rows_abs = ($rcvd_cnt_h || int($conf_rows_n * $rcvd_or_def_row_h) || 432) . \"px\";\n$calc_cols_abs = \"auto\" if (!$conf_cols_n);\n$calc_rows_abs = \"88vh\" if (!$conf_rows_n);\n\n# Set pixel to columns conversion\nmy $cols_num_user = int($rcvd_cnt_w / $rcvd_or_def_col_w);\n\n# Set pixel to rows (lines) conversion\nmy $rows_num_user = int($rcvd_cnt_h / $rcvd_or_def_row_h);\n\n# Set columns and rows environment vars\nmy $env_cols = $ENV{'COLUMNS'} = $conf_cols_n || $cols_num_user || $def_cols_n;\nmy $env_rows = $ENV{'LINES'} = $conf_rows_n || $rows_num_user || $def_rows_n;\n\n# Define columns and rows\n$termjs_opts{'Options'} = \"{ cols: $env_cols, rows: $env_rows }\";\n\n# Adjust columns and rows offset for env vars, which\n# should be always a tiny bit smaller than Xterm.js\n$ENV{'COLUMNS'} -= $rcvd_or_def_col_o;\n$ENV{'LINES'} -= $rcvd_or_def_row_o;\n\n# Tweak old themes inline\nmy $styles_inline = <<EOF;\n\nbody[style='height:100%'] {\n\theight: 97% !important; \n}\n#terminal {\n\tborder: 1px solid #000;\n\tbackground-color: #000;\n\tmin-width: $calc_cols_abs;\n\tmin-height: $calc_rows_abs;\n\theight: $calc_rows_abs;\n\tpadding: 2px;\n}\n#terminal:empty:after {\n\tdisplay: block;\n\tcontent: \" \";\n\toverflow: hidden;\n\t\n\twidth: 24px;\n\theight: 24px;\n\tmargin: 2% auto;\n\tborder-radius: 50%;\n\tbox-sizing: border-box;\n\tborder: 1px solid transparent;\n\tborder-top-color: rgba(255, 255, 255, 0.8);\n\tborder-bottom-color: rgba(255, 255, 255, 0.8);\n\tanimation: jumping-spinner 1s ease infinite;\n}\n\\@keyframes jumping-spinner {\n    to {\n        transform: rotate(360deg);\n    }\n}\n#terminal + script ~ * {\n\tdisplay: none\n}\n\nEOF\n\n# Print header\n&ui_print_header(undef, $text{'index_title'}, \"\", undef, 1, 1, 0, undef,\n\t\t \"<link rel=stylesheet href=\\\"$termlinks->{'css'}[0]\\\">\\n\".\n\t\t \"<script src=\\\"$termlinks->{'js'}[0]\\\"></script>\\n\".\n\t\t \"<script src=\\\"$termlinks->{'js'}[1]\\\"></script>\\n\".\n\t\t \"<style>$styles_inline</style>\\n\"\n\t\t);\n\n# Print main container\nprint \"<div id=\\\"terminal\\\" $termjs_opts{'ContainerStyle'}></div>\\n\";\n\n# Detect terminal width and height for regular themes \nif (!$xmlhr) {\n\t# Set column size depending on the browser window\n\t# size unless defined in config (non-auto mode)\n\tif (!$conf_cols_n && !$conf_rows_n) {\n\t\tif ((!$rcvd_cnt_w ||\n\t\t     !$rcvd_cnt_h) || $resize_call) {\n\t\t\tprint \"<script>location.href = location.pathname + '?w=' + document.querySelector('#terminal').clientWidth + '&h=' + document.querySelector('#terminal').clientHeight;</script>\";\n\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t# Clear URL to make sure resized and\n\t# reloaded page will work properly\n\tprint \"<script>history.replaceState(null, String(), location.pathname);</script>\";\n\t}\n\n# Find ports already in use\n&lock_file(&get_miniserv_config_file());\nmy %miniserv;\n&get_miniserv_config(\\%miniserv);\nmy %inuse;\nforeach my $k (keys %miniserv) {\n\tif ($k =~ /^websockets_/ && $miniserv{$k} =~ /port=(\\d+)/) {\n\t\t$inuse{$1} = 1;\n\t\t}\n\t}\n\n# Pick a port and configure Webmin to proxy it\nmy $port = $config{'base_port'} || 555;\nwhile(1) {\n\tif (!$inuse{$port}) {\n\t\t&open_socket(\"127.0.0.1\", $port, my $fh, \\$err);\n\t\tlast if ($err);\n\t\tclose($fh);\n\t\t}\n\t$port++;\n\t}\nmy $wspath = \"/$module_name/ws-\".$port;\n$miniserv{'websockets_'.$wspath} = \"host=127.0.0.1 port=$port wspath=/ user=$remote_user\";\n&put_miniserv_config(\\%miniserv);\n&unlock_file(&get_miniserv_config_file());\n&reload_miniserv();\n\n# Check permissions for user to run as\nmy $user = $access{'user'};\nif ($user eq \"*\") {\n\t$user = $remote_user;\n\t}\n\n# Switch to given user\nif ($user eq \"root\" && $in{'user'}) {\n\tdefined(getpwnam($in{'user'})) ||\n\t\t&error(&text('index_euser', &html_escape($in{'user'})));\n\t$user = $in{'user'};\n\t}\n\n# Launch the shell server on the allocated port\n&foreign_require(\"cron\");\nmy $shellserver_cmd = \"$module_config_directory/shellserver.pl\";\nif (!-r $shellserver_cmd) {\n\t&cron::create_wrapper($shellserver_cmd, $module_name, \"shellserver.pl\");\n\t}\ndefined(getpwnam($user)) || &error(&text('index_euser', &html_escape($user)));\nmy $tmpdir = &tempname_dir();\n$ENV{'SESSION_ID'} = $main::session_id;\n&system_logged(\"$shellserver_cmd $port $user >$tmpdir/ws-$port.out 2>&1 </dev/null\");\n\n# Open the terminal\nmy $url = \"wss://\".$ENV{'HTTP_HOST'}.$wspath;\nmy $term_script = <<EOF;\n\n(function() {\n\tvar socket = new WebSocket('$url', 'binary'),\n\t    termcont = document.getElementById('terminal'),\n\t    err_conn_cannot = 'Cannot connect to the socket $url',\n\t    err_conn_lost = 'Connection to the socket $url lost';\n\tsocket.onopen = function() {\n\t\tvar term = new Terminal($termjs_opts{'Options'}),\n\t\t    attachAddon = new AttachAddon.AttachAddon(this);\n\t\tterm.loadAddon(attachAddon);\n\t\tterm.open(termcont);\n\t\tterm.focus();\n\t\tsocket.send('clear\\\\r');\n\t};\n\tsocket.onerror = function() {\n\t\ttermcont.innerHTML = '<tt style=\"color: \\#ff0000\">Error: ' +\n\t\t\terr_conn_cannot + '</tt>';\n\t};\n\tsocket.onclose = function() {\n\t\ttermcont.innerHTML = '<tt style=\"color: \\#ff0000\">Error: ' +\n\t\t\terr_conn_lost + '</tt>';\n\t};\n})();\n\nEOF\n\n# Return inline script data depending on type\nprint \"<script>\\n\";\nif ($xmlhr) {\n\tprint \"var xterm_argv = \".\n\t      &convert_to_json(\n\t\t\t{ 'files' => $termlinks,\n\t\t\t  'cols' => $env_cols,\n\t\t\t  'rows' => $env_rows,\n\t\t\t  'port' => $port,\n\t\t\t  'socket_url' => $url });\n\t}\nelse {\n\tprint $term_script;\n\t}\nprint \"</script>\\n\";\n&ui_print_footer();\n\n"], "filenames": ["xterm/index.cgi"], "buggy_code_start_loc": [174], "buggy_code_end_loc": [200], "fixing_code_start_loc": [174], "fixing_code_end_loc": [194], "type": "CWE-80", "message": "A vulnerability, which was classified as problematic, was found in Webmin 2.001. Affected is an unknown function of the file xterm/index.cgi. The manipulation leads to basic cross site scripting. It is possible to launch the attack remotely. Upgrading to version 2.003 is able to address this issue. The name of the patch is d3d33af3c0c3fd3a889c84e287a038b7a457d811. It is recommended to upgrade the affected component. VDB-212862 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-3844", "sourceIdentifier": "cna@vuldb.com", "published": "2022-11-02T20:15:11.023", "lastModified": "2023-03-01T18:16:13.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in Webmin 2.001. Affected is an unknown function of the file xterm/index.cgi. The manipulation leads to basic cross site scripting. It is possible to launch the attack remotely. Upgrading to version 2.003 is able to address this issue. The name of the patch is d3d33af3c0c3fd3a889c84e287a038b7a457d811. It is recommended to upgrade the affected component. VDB-212862 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-80"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:webmin:webmin:2.001:*:*:*:*:*:*:*", "matchCriteriaId": "21C2886F-985F-41E4-9503-D775AFA80A40"}]}]}], "references": [{"url": "https://github.com/webmin/webmin/commit/d3d33af3c0c3fd3a889c84e287a038b7a457d811", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/webmin/webmin/releases/tag/2.003", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.212862", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.212862", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/webmin/webmin/commit/d3d33af3c0c3fd3a889c84e287a038b7a457d811"}}