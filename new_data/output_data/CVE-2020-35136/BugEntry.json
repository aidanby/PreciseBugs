{"buggy_code": ["<?php\n/* Copyright (C) 2006-2014  Laurent Destailleur <eldy@users.sourceforge.net>\n * Copyright (C) 2011       Juanjo Menent       <jmenent@2byte.es>\n * Copyright (C) 2015       Rapha\u00ebl Doursenaud  <rdoursenaud@gpcsolutions.fr>\n *\n* This program is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation; either version 3 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/**\n *\t\t\\file \t\thtdocs/admin/tools/export_files.php\n *\t\t\\brief      Page to export documents into a compressed file\n */\n\nrequire '../../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/utils.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\n\n$langs->load(\"admin\");\n\n$action = GETPOST('action', 'alpha');\n$what = GETPOST('what', 'alpha');\n$export_type = GETPOST('export_type', 'alpha');\n$file = trim(GETPOST('zipfilename_template', 'alpha'));\n$compression = GETPOST('compression');\n\n$file = dol_sanitizeFileName($file);\n$file = preg_replace('/(\\.zip|\\.tar|\\.tgz|\\.gz|\\.tar\\.gz|\\.bz2)$/i', '', $file);\n\n$sortfield = GETPOST('sortfield', 'alpha');\n$sortorder = GETPOST('sortorder', 'alpha');\n$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST(\"page\", 'int');\nif (!$sortorder) $sortorder = \"DESC\";\nif (!$sortfield) $sortfield = \"date\";\nif ($page < 0) { $page = 0; }\nelseif (empty($page)) $page = 0;\n$limit = GETPOST('limit', 'int') ?GETPOST('limit', 'int') : $conf->liste_limit;\n$offset = $limit * $page;\n\nif (!$user->admin) accessforbidden();\n\n$errormsg = '';\n\n\n/*\n * Actions\n */\n\nif ($action == 'delete')\n{\n    $filerelative = dol_sanitizeFileName(GETPOST('urlfile', 'alpha'));\n    $filepath = $conf->admin->dir_output.'/'.$filerelative;\n\t$ret = dol_delete_file($filepath, 1);\n\tif ($ret) setEventMessages($langs->trans(\"FileWasRemoved\", $filerelative), null, 'mesgs');\n\telse setEventMessages($langs->trans(\"ErrorFailToDeleteFile\", $filerelative), null, 'errors');\n\t$action = '';\n}\n\n\n/*\n * View\n */\n\n// Increase limit of time. Works only if we are not in safe mode\n$ExecTimeLimit = 1800; // 30mn\nif (!empty($ExecTimeLimit))\n{\n    $err = error_reporting();\n    error_reporting(0); // Disable all errors\n    //error_reporting(E_ALL);\n    @set_time_limit($ExecTimeLimit); // Need more than 240 on Windows 7/64\n    error_reporting($err);\n}\n$MemoryLimit = 0;\nif (!empty($MemoryLimit))\n{\n    @ini_set('memory_limit', $MemoryLimit);\n}\n\n$form = new Form($db);\n$formfile = new FormFile($db);\n\n//$help_url='EN:Backups|FR:Sauvegardes|ES:Copias_de_seguridad';\n//llxHeader('','',$help_url);\n\n//print load_fiche_titre($langs->trans(\"Backup\"),'','title_setup');\n\n\n// Start with empty buffer\n$dump_buffer = '';\n$dump_buffer_len = 0;\n\n// We will send fake headers to avoid browser timeout when buffering\n$time_start = time();\n\n\n$outputdir  = $conf->admin->dir_output.'/documents';\n$result = dol_mkdir($outputdir);\n\n$utils = new Utils($db);\n\nif ($compression == 'zip')\n{\n\t$file .= '.zip';\n    $ret = dol_compress_dir(DOL_DATA_ROOT, $outputdir.\"/\".$file, $compression, '/(\\.log|\\/temp\\/|documents\\/admin\\/documents\\/)/');\n    if ($ret < 0)\n    {\n    \tif ($ret == -2) {\n    \t\t$langs->load(\"errors\");\n    \t\t$errormsg = $langs->trans(\"ErrNoZipEngine\");\n    \t}\n    \telse {\n    \t\t$langs->load(\"errors\");\n    \t\t$errormsg = $langs->trans(\"ErrorFailedToWriteInDir\", $outputdir);\n    \t}\n    }\n}\nelseif (in_array($compression, array('gz', 'bz')))\n{\n\t$userlogin = ($user->login ? $user->login : 'unknown');\n\n\t$outputfile = $conf->admin->dir_temp.'/export_files.'.$userlogin.'.out'; // File used with popen method\n\n    $file .= '.tar';\n    // We also exclude '/temp/' dir and 'documents/admin/documents'\n    $cmd = \"tar -cf \".$outputdir.\"/\".$file.\" --exclude-vcs --exclude 'temp' --exclude 'dolibarr.log' --exclude 'dolibarr_*.log' --exclude 'documents/admin/documents' -C \".dirname(DOL_DATA_ROOT).\" \".basename(DOL_DATA_ROOT);\n\n    $result = $utils->executeCLI($cmd, $outputfile);\n\n    $retval = $result['error'];\n    if ($result['result'] || !empty($retval))\n    {\n        $langs->load(\"errors\");\n        dol_syslog(\"Documents tar retval after exec=\".$retval, LOG_ERR);\n        $errormsg = 'Error tar generation return '.$retval;\n    }\n    else\n    {\n        if ($compression == 'gz')\n        {\n            $cmd = \"gzip -f \".$outputdir.\"/\".$file;\n        }\n        if ($compression == 'bz')\n        {\n            $cmd = \"bzip2 -f \".$outputdir.\"/\".$file;\n        }\n\n        $result = $utils->executeCLI($cmd, $outputfile);\n\n        $retval = $result['error'];\n        if ($result['result'] || !empty($retval))\n        {\n            $errormsg = 'Error '.$compression.' generation return '.$retval;\n            unlink($outputdir.\"/\".$file);\n        }\n    }\n}\n\nif ($errormsg)\n{\n\tsetEventMessages($langs->trans(\"Error\").\" : \".$errormsg, null, 'errors');\n}\n\n// Redirect t backup page\nheader(\"Location: dolibarr_export.php\");\n\n$time_end = time();\n\n$db->close();\n", "<?php\n/* Copyright (C) 2000-2007\tRodolphe Quiedeville\t\t<rodolphe@quiedeville.org>\n * Copyright (C) 2003\t\tJean-Louis Bergamo\t\t\t<jlb@j1b.org>\n * Copyright (C) 2004-2018\tLaurent Destailleur\t\t\t<eldy@users.sourceforge.net>\n * Copyright (C) 2004\t\tSebastien Di Cintio\t\t\t<sdicintio@ressource-toi.org>\n * Copyright (C) 2004\t\tBenoit Mortier\t\t\t\t<benoit.mortier@opensides.be>\n * Copyright (C) 2004\t\tChristophe Combelles\t\t<ccomb@free.fr>\n * Copyright (C) 2005-2019\tRegis Houssin\t\t\t\t<regis.houssin@inodbox.com>\n * Copyright (C) 2008\t\tRaphael Bertrand (Resultic)\t<raphael.bertrand@resultic.fr>\n * Copyright (C) 2010-2018\tJuanjo Menent\t\t\t\t<jmenent@2byte.es>\n * Copyright (C) 2013\t\tC\u00e9dric Salvador\t\t\t\t<csalvador@gpcsolutions.fr>\n * Copyright (C) 2013-2017\tAlexandre Spangaro\t\t\t<aspangaro@open-dsi.fr>\n * Copyright (C) 2014\t\tC\u00e9dric GROSS\t\t\t\t<c.gross@kreiz-it.fr>\n * Copyright (C) 2014-2015\tMarcos Garc\u00eda\t\t\t\t<marcosgdf@gmail.com>\n * Copyright (C) 2015\t\tJean-Fran\u00e7ois Ferry\t\t\t<jfefe@aternatik.fr>\n * Copyright (C) 2018-2020  Fr\u00e9d\u00e9ric France             <frederic.france@netlogic.fr>\n * Copyright (C) 2019       Thibault Foucart            <support@ptibogxiv.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *\t\\file\t\t\thtdocs/core/lib/functions.lib.php\n *\t\\brief\t\t\tA set of functions for Dolibarr\n *\t\t\t\t\tThis file contains all frequently used functions.\n */\n\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/json.lib.php';\n\n\n/**\n * Return a DoliDB instance (database handler).\n *\n * @param   string\t$type\t\tType of database (mysql, pgsql...)\n * @param\tstring\t$host\t\tAddress of database server\n * @param\tstring\t$user\t\tAuthorized username\n * @param\tstring\t$pass\t\tPassword\n * @param\tstring\t$name\t\tName of database\n * @param\tint\t\t$port\t\tPort of database server\n * @return\tDoliDB\t\t\t\tA DoliDB instance\n */\nfunction getDoliDBInstance($type, $host, $user, $pass, $name, $port)\n{\n\trequire_once DOL_DOCUMENT_ROOT.\"/core/db/\".$type.'.class.php';\n\n\t$class = 'DoliDB'.ucfirst($type);\n\t$dolidb = new $class($type, $host, $user, $pass, $name, $port);\n\treturn $dolidb;\n}\n\n/**\n * \tGet list of entity id to use.\n *\n * \t@param\tstring\t$element\t\tCurrent element\n *\t\t\t\t\t\t\t\t\t'societe', 'socpeople', 'actioncomm', 'agenda', 'resource',\n *\t\t\t\t\t\t\t\t\t'product', 'productprice', 'stock', 'bom', 'mo',\n *\t\t\t\t\t\t\t\t\t'propal', 'supplier_proposal', 'invoice', 'supplier_invoice', 'payment_various',\n *\t\t\t\t\t\t\t\t\t'categorie', 'bank_account', 'bank_account', 'adherent', 'user',\n *\t\t\t\t\t\t\t\t\t'commande', 'supplier_order', 'expedition', 'intervention', 'survey',\n *\t\t\t\t\t\t\t\t\t'contract', 'tax', 'expensereport', 'holiday', 'multicurrency', 'project',\n *\t\t\t\t\t\t\t\t\t'email_template', 'event', 'donation'\n *\t\t\t\t\t\t\t\t\t'c_paiement', 'c_payment_term', ...\n * \t@param\tint\t\t$shared\t\t\t0=Return id of current entity only,\n * \t\t\t\t\t\t\t\t\t1=Return id of current entity + shared entities (default)\n *  @param\tobject\t$currentobject\tCurrent object if needed\n * \t@return\tmixed\t\t\t\t\tEntity id(s) to use ( eg. entity IN ('.getEntity(elementname).')' )\n */\nfunction getEntity($element, $shared = 1, $currentobject = null)\n{\n\tglobal $conf, $mc;\n\n\tif (is_object($mc))\n\t{\n\t\treturn $mc->getEntity($element, $shared, $currentobject);\n\t}\n\telse\n\t{\n\t\t$out = '';\n\t\t$addzero = array('user', 'usergroup', 'c_email_templates', 'email_template', 'default_values');\n\t\tif (in_array($element, $addzero)) $out .= '0,';\n\t\t$out .= $conf->entity;\n\t\treturn $out;\n\t}\n}\n\n/**\n * \tSet entity id to use when to create an object\n *\n * \t@param\tobject\t$currentobject\tCurrent object\n * \t@return\tmixed\t\t\t\t\tEntity id to use ( eg. entity = '.setEntity($object) )\n */\nfunction setEntity($currentobject)\n{\n\tglobal $conf, $mc;\n\n\tif (is_object($mc) && method_exists($mc, 'setEntity'))\n\t{\n\t\treturn $mc->setEntity($currentobject);\n\t}\n\telse\n\t{\n\t\treturn ((is_object($currentobject) && $currentobject->id > 0 && $currentobject->entity > 0) ? $currentobject->entity : $conf->entity);\n\t}\n}\n\n/**\n * Return information about user browser\n *\n * Returns array with the following format:\n * array(\n *  'browsername' => Browser name (firefox|chrome|iceweasel|epiphany|safari|opera|ie|unknown)\n *  'browserversion' => Browser version. Empty if unknown\n *  'browseros' => Set with mobile OS (android|blackberry|ios|palm|symbian|webos|maemo|windows|unknown)\n *  'layout' => (tablet|phone|classic)\n *  'phone' => empty if not mobile, (android|blackberry|ios|palm|unknown) if mobile\n *  'tablet' => true/false\n * )\n *\n * @param string $user_agent Content of $_SERVER[\"HTTP_USER_AGENT\"] variable\n * @return\tarray Check function documentation\n */\nfunction getBrowserInfo($user_agent)\n{\n\tinclude_once DOL_DOCUMENT_ROOT.'/includes/mobiledetect/mobiledetectlib/Mobile_Detect.php';\n\n\t$name = 'unknown';\n\t$version = '';\n\t$os = 'unknown';\n\t$phone = '';\n\n\t$detectmobile = new Mobile_Detect(null, $user_agent);\n\t$tablet = $detectmobile->isTablet();\n\n\tif ($detectmobile->isMobile()) {\n\t\t$phone = 'unknown';\n\n\t\t// If phone/smartphone, we set phone os name.\n\t\tif ($detectmobile->is('AndroidOS')) {\n\t\t\t$os = $phone = 'android';\n\t\t} elseif ($detectmobile->is('BlackBerryOS')) {\n\t\t\t$os = $phone = 'blackberry';\n\t\t} elseif ($detectmobile->is('iOS')) {\n\t\t\t$os = 'ios';\n\t\t\t$phone = 'iphone';\n\t\t} elseif ($detectmobile->is('PalmOS')) {\n\t\t\t$os = $phone = 'palm';\n\t\t} elseif ($detectmobile->is('SymbianOS')) {\n\t\t\t$os = 'symbian';\n\t\t} elseif ($detectmobile->is('webOS')) {\n\t\t\t$os = 'webos';\n\t\t} elseif ($detectmobile->is('MaemoOS')) {\n\t\t\t$os = 'maemo';\n\t\t} elseif ($detectmobile->is('WindowsMobileOS') || $detectmobile->is('WindowsPhoneOS')) {\n\t\t\t$os = 'windows';\n\t\t}\n\t}\n\n\t// OS\n\tif (preg_match('/linux/i', $user_agent)) { $os = 'linux'; }\n\telseif (preg_match('/macintosh/i', $user_agent)) { $os = 'macintosh'; }\n\telseif (preg_match('/windows/i', $user_agent)) { $os = 'windows'; }\n\n\t// Name\n\tif (preg_match('/firefox(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'firefox'; $version = $reg[2]; }\n\telseif (preg_match('/edge(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'edge'; $version = $reg[2]; }\n\telseif (preg_match('/chrome(\\/|\\s)([\\d\\.]+)/i', $user_agent, $reg)) { $name = 'chrome'; $version = $reg[2]; }    // we can have 'chrome (Mozilla...) chrome x.y' in one string\n\telseif (preg_match('/chrome/i', $user_agent, $reg)) { $name = 'chrome'; }\n\telseif (preg_match('/iceweasel/i', $user_agent)) { $name = 'iceweasel'; }\n\telseif (preg_match('/epiphany/i', $user_agent)) { $name = 'epiphany'; }\n\telseif (preg_match('/safari(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'safari'; $version = $reg[2]; }\t// Safari is often present in string for mobile but its not.\n\telseif (preg_match('/opera(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'opera'; $version = $reg[2]; }\n\telseif (preg_match('/(MSIE\\s([0-9]+\\.[0-9]))|.*(Trident\\/[0-9]+.[0-9];.*rv:([0-9]+\\.[0-9]+))/i', $user_agent, $reg)) { $name = 'ie'; $version = end($reg); }    // MS products at end\n\telseif (preg_match('/(Windows NT\\s([0-9]+\\.[0-9])).*(Trident\\/[0-9]+.[0-9];.*rv:([0-9]+\\.[0-9]+))/i', $user_agent, $reg)) { $name = 'ie'; $version = end($reg); }    // MS products at end\n\telseif (preg_match('/l(i|y)n(x|ks)(\\(|\\/|\\s)*([\\d\\.]+)/i', $user_agent, $reg)) { $name = 'lynxlinks'; $version = $reg[4]; }\n\n\tif ($tablet) {\n\t\t$layout = 'tablet';\n\t} elseif ($phone) {\n\t\t$layout = 'phone';\n\t} else {\n\t\t$layout = 'classic';\n\t}\n\n\treturn array(\n\t\t'browsername' => $name,\n\t\t'browserversion' => $version,\n\t\t'browseros' => $os,\n\t\t'layout' => $layout,\n\t\t'phone' => $phone,\n\t\t'tablet' => $tablet\n\t);\n}\n\n/**\n *  Function called at end of web php process\n *\n *  @return\tvoid\n */\nfunction dol_shutdown()\n{\n\tglobal $conf, $user, $langs, $db;\n\t$disconnectdone = false; $depth = 0;\n\tif (is_object($db) && !empty($db->connected)) { $depth = $db->transaction_opened; $disconnectdone = $db->close(); }\n\tdol_syslog(\"--- End access to \".$_SERVER[\"PHP_SELF\"].(($disconnectdone && $depth) ? ' (Warn: db disconnection forced, transaction depth was '.$depth.')' : ''), (($disconnectdone && $depth) ?LOG_WARNING:LOG_INFO));\n}\n\n/**\n * Return true if we are in a context of submitting a parameter\n *\n * @param \tstring\t$paramname\t\tName or parameter to test\n * @return \tboolean\t\t\t\t\tTrue if we have just submit a POST or GET request with the parameter provided (even if param is empty)\n */\nfunction GETPOSTISSET($paramname)\n{\n\t$isset = 0;\n\n\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t// Clean $relativepathstring\n\tif (constant('DOL_URL_ROOT')) $relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t//var_dump($relativepathstring);\n\t//var_dump($user->default_values);\n\n\t// Code for search criteria persistence.\n\t// Retrieve values if restore_lastsearch_values\n\tif (!empty($_GET['restore_lastsearch_values']))        // Use $_GET here and not GETPOST\n\t{\n\t\tif (!empty($_SESSION['lastsearch_values_'.$relativepathstring]))\t// If there is saved values\n\t\t{\n\t\t\t$tmp = json_decode($_SESSION['lastsearch_values_'.$relativepathstring], true);\n\t\t\tif (is_array($tmp))\n\t\t\t{\n\t\t\t\tforeach ($tmp as $key => $val)\n\t\t\t\t{\n\t\t\t\t\tif ($key == $paramname)\t// We are on the requested parameter\n\t\t\t\t\t{\n\t\t\t\t\t\t$isset = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If there is saved contextpage, page or limit\n\t\tif ($paramname == 'contextpage' && !empty($_SESSION['lastsearch_contextpage_'.$relativepathstring]))\n\t\t{\n\t\t\t$isset = 1;\n\t\t}\n\t\telseif ($paramname == 'page' && !empty($_SESSION['lastsearch_page_'.$relativepathstring]))\n\t\t{\n\t\t\t$isset = 1;\n\t\t}\n\t\telseif ($paramname == 'limit' && !empty($_SESSION['lastsearch_limit_'.$relativepathstring]))\n\t\t{\n\t\t\t$isset = 1;\n\t\t}\n\t}\n\telse {\n\t\t$isset = (isset($_POST[$paramname]) || isset($_GET[$paramname]));\n\t}\n\n\treturn $isset;\n}\n\n/**\n *  Return value of a param into GET or POST supervariable.\n *  Use the property $user->default_values[path]['creatform'] and/or $user->default_values[path]['filters'] and/or $user->default_values[path]['sortorder']\n *  Note: The property $user->default_values is loaded by main.php when loading the user.\n *\n *  @param  string  $paramname   Name of parameter to found\n *  @param  string  $check\t     Type of check\n *                               ''=no check (deprecated)\n *                               'none'=no check (only for param that should have very rich content)\n *                               'int'=check it's numeric (integer or float)\n *                               'intcomma'=check it's integer+comma ('1,2,3,4...')\n *                               'alpha'=check it's text and sign\n *                               'aZ'=check it's a-z only\n *                               'aZ09'=check it's simple alpha string (recommended for keys)\n *                               'array'=check it's array\n *                               'san_alpha'=Use filter_var with FILTER_SANITIZE_STRING (do not use this for free text string)\n *                               'nohtml', 'alphanohtml'=check there is no html content\n *                               'restricthtml'=check html content is restricted to some tags only\n *                               'custom'= custom filter specify $filter and $options)\n *  @param\tint\t\t$method\t     Type of method (0 = get then post, 1 = only get, 2 = only post, 3 = post then get)\n *  @param  int     $filter      Filter to apply when $check is set to 'custom'. (See http://php.net/manual/en/filter.filters.php for d\u00e9tails)\n *  @param  mixed   $options     Options to pass to filter_var when $check is set to 'custom'\n *  @param\tstring\t$noreplace\t Force disable of replacement of __xxx__ strings.\n *  @return string|array         Value found (string or array), or '' if check fails\n */\nfunction GETPOST($paramname, $check = 'alphanohtml', $method = 0, $filter = null, $options = null, $noreplace = 0)\n{\n\tglobal $mysoc, $user, $conf;\n\n\tif (empty($paramname)) return 'BadFirstParameterForGETPOST';\n\tif (empty($check))\n\t{\n\t\tdol_syslog(\"Deprecated use of GETPOST, called with 1st param = \".$paramname.\" and 2nd param is '', when calling page \".$_SERVER[\"PHP_SELF\"], LOG_WARNING);\n\t\t// Enable this line to know who call the GETPOST with '' $check parameter.\n\t\t//var_dump(debug_backtrace()[0]);\n\t}\n\n\tif (empty($method)) $out = isset($_GET[$paramname]) ? $_GET[$paramname] : (isset($_POST[$paramname]) ? $_POST[$paramname] : '');\n\telseif ($method == 1) $out = isset($_GET[$paramname]) ? $_GET[$paramname] : '';\n\telseif ($method == 2) $out = isset($_POST[$paramname]) ? $_POST[$paramname] : '';\n\telseif ($method == 3) $out = isset($_POST[$paramname]) ? $_POST[$paramname] : (isset($_GET[$paramname]) ? $_GET[$paramname] : '');\n\telse return 'BadThirdParameterForGETPOST';\n\n\tif (empty($method) || $method == 3 || $method == 4)\n\t{\n\t\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t\t// Clean $relativepathstring\n\t\tif (constant('DOL_URL_ROOT')) $relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\t//var_dump($relativepathstring);\n\t\t//var_dump($user->default_values);\n\n\t\t// Code for search criteria persistence.\n\t\t// Retrieve values if restore_lastsearch_values\n\t\tif (!empty($_GET['restore_lastsearch_values']))        // Use $_GET here and not GETPOST\n\t\t{\n\t\t\tif (!empty($_SESSION['lastsearch_values_'.$relativepathstring]))\t// If there is saved values\n\t\t\t{\n\t\t\t\t$tmp = json_decode($_SESSION['lastsearch_values_'.$relativepathstring], true);\n\t\t\t\tif (is_array($tmp))\n\t\t\t\t{\n\t\t\t\t\tforeach ($tmp as $key => $val)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($key == $paramname)\t// We are on the requested parameter\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$out = $val;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If there is saved contextpage, page or limit\n\t\t\tif ($paramname == 'contextpage' && !empty($_SESSION['lastsearch_contextpage_'.$relativepathstring]))\n\t\t\t{\n\t\t\t\t$out = $_SESSION['lastsearch_contextpage_'.$relativepathstring];\n\t\t\t}\n\t\t\telseif ($paramname == 'page' && !empty($_SESSION['lastsearch_page_'.$relativepathstring]))\n\t\t\t{\n\t\t\t\t$out = $_SESSION['lastsearch_page_'.$relativepathstring];\n\t\t\t}\n\t\t\telseif ($paramname == 'limit' && !empty($_SESSION['lastsearch_limit_'.$relativepathstring]))\n\t\t\t{\n\t\t\t\t$out = $_SESSION['lastsearch_limit_'.$relativepathstring];\n\t\t\t}\n\t\t}\n\t\t// Else, retreive default values if we are not doing a sort\n\t\telseif (!isset($_GET['sortfield']))\t// If we did a click on a field to sort, we do no apply default values. Same if option MAIN_ENABLE_DEFAULT_VALUES is not set\n\t\t{\n\t\t\tif (!empty($_GET['action']) && $_GET['action'] == 'create' && !isset($_GET[$paramname]) && !isset($_POST[$paramname]))\n\t\t\t{\n\t\t\t\t// Search default value from $object->field\n\t\t\t\tglobal $object;\n\t\t\t\tif (is_object($object) && isset($object->fields[$paramname]['default']))\n\t\t\t\t{\n\t\t\t\t\t$out = $object->fields[$paramname]['default'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!empty($conf->global->MAIN_ENABLE_DEFAULT_VALUES))\n\t\t\t{\n\t\t\t    if (!empty($_GET['action']) && (preg_match('/^create/', $_GET['action']) || preg_match('/^presend/', $_GET['action'])) && !isset($_GET[$paramname]) && !isset($_POST[$paramname]))\n\t\t\t\t{\n\t\t\t\t\t// Now search in setup to overwrite default values\n\t\t\t\t\tif (!empty($user->default_values))\t\t// $user->default_values defined from menu 'Setup - Default values'\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($user->default_values[$relativepathstring]['createform']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['createform'] as $defkey => $defval)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t\t\t$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (!in_array($tmpquerytohave, $tmpqueryarraywehave)) $foundintru = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//var_dump($user->default_values[$relativepathstring][$defkey]['createform']);\n\t\t\t\t\t\t\t\t\tif (isset($user->default_values[$relativepathstring]['createform'][$defkey][$paramname]))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$out = $user->default_values[$relativepathstring]['createform'][$defkey][$paramname];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Management of default search_filters and sort order\n\t\t\t\t//elseif (preg_match('/list.php$/', $_SERVER[\"PHP_SELF\"]) && ! empty($paramname) && ! isset($_GET[$paramname]) && ! isset($_POST[$paramname]))\n\t\t\t\telseif (!empty($paramname) && !isset($_GET[$paramname]) && !isset($_POST[$paramname]))\n\t\t\t\t{\n\t\t\t\t\tif (!empty($user->default_values))\t\t// $user->default_values defined from menu 'Setup - Default values'\n\t\t\t\t\t{\n\t\t\t\t\t\t//var_dump($user->default_values[$relativepathstring]);\n\t\t\t\t\t\tif ($paramname == 'sortfield' || $paramname == 'sortorder')\t\t\t// Sorted on which fields ? ASC or DESC ?\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (isset($user->default_values[$relativepathstring]['sortorder']))\t// Even if paramname is sortfield, data are stored into ['sortorder...']\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['sortorder'] as $defkey => $defval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t\t\t\t$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (!in_array($tmpquerytohave, $tmpqueryarraywehave)) $foundintru = 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \";\", \"=\"); // we accept _, -, . and ,\n\t\t\t\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['sortorder'][$defkey] as $key => $val)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif ($out) $out .= ', ';\n\t\t\t\t\t\t\t\t\t\t\tif ($paramname == 'sortfield')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$out .= dol_string_nospecial($key, '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif ($paramname == 'sortorder')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$out .= dol_string_nospecial($val, '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t//break;\t// No break for sortfield and sortorder so we can cumulate fields (is it realy usefull ?)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (isset($user->default_values[$relativepathstring]['filters']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['filters'] as $defkey => $defval)\t// $defkey is a querystring like 'a=b&c=d', $defval is key of user\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t\t\t$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (!in_array($tmpquerytohave, $tmpqueryarraywehave)) $foundintru = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (isset($_POST['sall']) || isset($_POST['search_all']) || isset($_GET['sall']) || isset($_GET['search_all']))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// We made a search from quick search menu, do we still use default filter ?\n\t\t\t\t\t\t\t\t\t\tif (empty($conf->global->MAIN_DISABLE_DEFAULT_FILTER_FOR_QUICK_SEARCH))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \";\", \"=\"); // we accept _, -, . and ,\n\t\t\t\t\t\t\t\t\t\t\t$out = dol_string_nospecial($user->default_values[$relativepathstring]['filters'][$defkey][$paramname], '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \";\", \"=\"); // we accept _, -, . and ,\n\t\t\t\t\t\t\t\t\t\t$out = dol_string_nospecial($user->default_values[$relativepathstring]['filters'][$defkey][$paramname], '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Substitution variables for GETPOST (used to get final url with variable parameters or final default value with variable parameters)\n\t// Example of variables: __DAY__, __MONTH__, __YEAR__, __MYCOMPANY_COUNTRY_ID__, __USER_ID__, ...\n\t// We do this only if var is a GET. If it is a POST, may be we want to post the text with vars as the setup text.\n\tif (!is_array($out) && empty($_POST[$paramname]) && empty($noreplace))\n\t{\n\t\t$reg = array();\n\t\t$maxloop = 20; $loopnb = 0; // Protection against infinite loop\n\t\twhile (preg_match('/__([A-Z0-9]+_?[A-Z0-9]+)__/i', $out, $reg) && ($loopnb < $maxloop))    // Detect '__ABCDEF__' as key 'ABCDEF' and '__ABC_DEF__' as key 'ABC_DEF'. Detection is also correct when 2 vars are side by side.\n\t\t{\n\t\t\t$loopnb++; $newout = '';\n\n\t\t\tif ($reg[1] == 'DAY') { $tmp = dol_getdate(dol_now(), true); $newout = $tmp['mday']; }\n\t\t\telseif ($reg[1] == 'MONTH') { $tmp = dol_getdate(dol_now(), true); $newout = $tmp['mon']; }\n\t\t\telseif ($reg[1] == 'YEAR') { $tmp = dol_getdate(dol_now(), true); $newout = $tmp['year']; }\n\t\t\telseif ($reg[1] == 'PREVIOUS_DAY') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_prev_day($tmp['mday'], $tmp['mon'], $tmp['year']); $newout = $tmp2['day']; }\n\t\t\telseif ($reg[1] == 'PREVIOUS_MONTH') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_prev_month($tmp['mon'], $tmp['year']); $newout = $tmp2['month']; }\n\t\t\telseif ($reg[1] == 'PREVIOUS_YEAR') { $tmp = dol_getdate(dol_now(), true); $newout = ($tmp['year'] - 1); }\n\t\t\telseif ($reg[1] == 'NEXT_DAY') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_next_day($tmp['mday'], $tmp['mon'], $tmp['year']); $newout = $tmp2['day']; }\n\t\t\telseif ($reg[1] == 'NEXT_MONTH') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_next_month($tmp['mon'], $tmp['year']); $newout = $tmp2['month']; }\n\t\t\telseif ($reg[1] == 'NEXT_YEAR') { $tmp = dol_getdate(dol_now(), true); $newout = ($tmp['year'] + 1); }\n\t\t\telseif ($reg[1] == 'MYCOMPANY_COUNTRY_ID' || $reg[1] == 'MYCOUNTRY_ID' || $reg[1] == 'MYCOUNTRYID')\n\t\t\t{\n\t\t\t\t$newout = $mysoc->country_id;\n\t\t\t}\n\t\t\telseif ($reg[1] == 'USER_ID' || $reg[1] == 'USERID')\n\t\t\t{\n\t\t\t\t$newout = $user->id;\n\t\t\t}\n\t\t\telseif ($reg[1] == 'USER_SUPERVISOR_ID' || $reg[1] == 'SUPERVISOR_ID' || $reg[1] == 'SUPERVISORID')\n\t\t\t{\n\t\t\t\t$newout = $user->fk_user;\n\t\t\t}\n\t\t\telseif ($reg[1] == 'ENTITY_ID' || $reg[1] == 'ENTITYID')\n\t\t\t{\n\t\t\t\t$newout = $conf->entity;\n\t\t\t}\n\t\t\telse $newout = ''; // Key not found, we replace with empty string\n\t\t\t//var_dump('__'.$reg[1].'__ -> '.$newout);\n\t\t\t$out = preg_replace('/__'.preg_quote($reg[1], '/').'__/', $newout, $out);\n\t\t}\n\t}\n\n\t// Check is done after replacement\n\tswitch ($check)\n\t{\n\t\tcase 'none':\n\t\t\tbreak;\n\t\tcase 'int':    // Check param is a numeric value (integer but also float or hexadecimal)\n\t\t\tif (!is_numeric($out)) { $out = ''; }\n\t\t\tbreak;\n\t\tcase 'intcomma':\n\t\t\tif (preg_match('/[^0-9,-]+/i', $out)) $out = '';\n\t\t\tbreak;\n\t\tcase 'alpha':\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t// '\"' is dangerous because param in url can close the href= or src= and add javascript functions.\n\t\t\t\t// '../' is dangerous because it allows dir transversals\n\t\t\t\t$out = str_replace(array('\"', '../'), '', trim($out));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'san_alpha':\n\t\t\t$out = filter_var($out, FILTER_SANITIZE_STRING);\n\t\t\tbreak;\n\t\tcase 'aZ':\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t$out = trim($out);\n\t\t\t\tif (preg_match('/[^a-z]+/i', $out)) $out = '';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'aZ09':\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t$out = trim($out);\n\t\t\t\tif (preg_match('/[^a-z0-9_\\-\\.]+/i', $out)) $out = '';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'aZ09comma':\t\t// great to sanitize sortfield or sortorder params that can be t.abc,t.def_gh\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t$out = trim($out);\n\t\t\t\tif (preg_match('/[^a-z0-9_\\-\\.,]+/i', $out)) $out = '';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'array':\n\t\t\tif (!is_array($out) || empty($out)) $out = array();\n\t\t\tbreak;\n\t\tcase 'nohtml':\n\t\t\t$out = dol_string_nohtmltag($out, 0);\n\t\t\tbreak;\n\t\tcase 'alphanohtml':\t// Recommended for most scalar parameters and search parameters\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t// '\"' is dangerous because param in url can close the href= or src= and add javascript functions.\n\t\t\t\t// '../' is dangerous because it allows dir transversals\n\t\t\t\t$out = str_replace(array('\"', '../'), '', trim($out));\n\t\t\t\t$out = dol_string_nohtmltag($out, 0);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'restricthtml':\t\t// Recommended for most html textarea\n\t\t\t$out = dol_string_onlythesehtmltags($out, 0);\n\t\t\tbreak;\n\t\tcase 'custom':\n\t\t\tif (empty($filter)) return 'BadFourthParameterForGETPOST';\n\t\t\t$out = filter_var($out, $filter, $options);\n\t\t\tbreak;\n\t}\n\n\t// Code for search criteria persistence.\n\t// Save data into session if key start with 'search_' or is 'smonth', 'syear', 'month', 'year'\n\tif (empty($method) || $method == 3 || $method == 4)\n\t{\n\t\tif (preg_match('/^search_/', $paramname) || in_array($paramname, array('sortorder', 'sortfield')))\n\t\t{\n\t\t\t//var_dump($paramname.' - '.$out.' '.$user->default_values[$relativepathstring]['filters'][$paramname]);\n\n\t\t\t// We save search key only if $out not empty that means:\n\t\t\t// - posted value not empty, or\n\t\t\t// - if posted value is empty and a default value exists that is not empty (it means we did a filter to an empty value when default was not).\n\n\t\t\tif ($out != '')\t\t// $out = '0' or 'abc', it is a search criteria to keep\n\t\t\t{\n\t\t\t\t$user->lastsearch_values_tmp[$relativepathstring][$paramname] = $out;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $out;\n}\n\n\nif (!function_exists('dol_getprefix'))\n{\n    /**\n     *  Return a prefix to use for this Dolibarr instance, for session/cookie names or email id.\n     *  The prefix is unique for instance and avoid conflict between multi-instances, even when having two instances with same root dir\n     *  or two instances in same virtual servers.\n     *\n     *  @param  string  $mode                   '' (prefix for session name) or 'email' (prefix for email id)\n     *  @return\tstring                          A calculated prefix\n     */\n    function dol_getprefix($mode = '')\n    {\n        global $conf;\n\n\t\t// If prefix is for email\n\t\tif ($mode == 'email')\n\t\t{\n\t\t    if (!empty($conf->global->MAIL_PREFIX_FOR_EMAIL_ID))\t// If MAIL_PREFIX_FOR_EMAIL_ID is set (a value initialized with a random value is recommended)\n\t\t\t{\n\t\t\t\tif ($conf->global->MAIL_PREFIX_FOR_EMAIL_ID != 'SERVER_NAME') return $conf->global->MAIL_PREFIX_FOR_EMAIL_ID;\n\t\t\t\telseif (isset($_SERVER[\"SERVER_NAME\"])) return $_SERVER[\"SERVER_NAME\"];\n\t\t\t}\n\n\t\t\t// The recommended value (may be not defined for old versions)\n\t\t\tif (!empty($conf->file->instance_unique_id)) return $conf->file->instance_unique_id;\n\n\t\t\t// For backward compatibility\n\t\t\treturn dol_hash(DOL_DOCUMENT_ROOT.DOL_URL_ROOT, '3');\n\t\t}\n\n\t\t// The recommended value (may be not defined for old versions)\n\t\tif (!empty($conf->file->instance_unique_id)) return $conf->file->instance_unique_id;\n\n\t\t// For backward compatibility\n\t\tif (isset($_SERVER[\"SERVER_NAME\"]) && isset($_SERVER[\"DOCUMENT_ROOT\"]))\n\t\t{\n\t\t\treturn dol_hash($_SERVER[\"SERVER_NAME\"].$_SERVER[\"DOCUMENT_ROOT\"].DOL_DOCUMENT_ROOT.DOL_URL_ROOT, '3');\n\t\t}\n\n\t\treturn dol_hash(DOL_DOCUMENT_ROOT.DOL_URL_ROOT, '3');\n\t}\n}\n\n/**\n *\tMake an include_once using default root and alternate root if it fails.\n *  To link to a core file, use include(DOL_DOCUMENT_ROOT.'/pathtofile')\n *  To link to a module file from a module file, use include './mymodulefile';\n *  To link to a module file from a core file, then this function can be used (call by hook / trigger / speciales pages)\n *\n * \t@param\tstring\t$relpath\tRelative path to file (Ie: mydir/myfile, ../myfile, ...)\n * \t@param\tstring\t$classname\tClass name (deprecated)\n *  @return bool                True if load is a success, False if it fails\n */\nfunction dol_include_once($relpath, $classname = '')\n{\n\tglobal $conf, $langs, $user, $mysoc; // Do not remove this. They must be defined for files we include. Other globals var must be retreived with $GLOBALS['var']\n\n\t$fullpath = dol_buildpath($relpath);\n\n\tif (!file_exists($fullpath)) {\n\t\tdol_syslog('functions::dol_include_once Tried to load unexisting file: '.$relpath, LOG_WARNING);\n\t\treturn false;\n\t}\n\n\tif (!empty($classname) && !class_exists($classname)) {\n\t\treturn include $fullpath;\n\t} else {\n\t\treturn include_once $fullpath;\n\t}\n}\n\n\n/**\n *\tReturn path of url or filesystem. Can check into alternate dir or alternate dir + main dir depending on value of $returnemptyifnotfound.\n *\n * \t@param\tstring\t$path\t\t\t\t\t\tRelative path to file (if mode=0) or relative url (if mode=1). Ie: mydir/myfile, ../myfile\n *  @param\tint\t\t$type\t\t\t\t\t\t0=Used for a Filesystem path, 1=Used for an URL path (output relative), 2=Used for an URL path (output full path using same host that current url), 3=Used for an URL path (output full path using host defined into $dolibarr_main_url_root of conf file)\n *  @param\tint\t\t$returnemptyifnotfound\t\t0:If $type==0 and if file was not found into alternate dir, return default path into main dir (no test on it)\n *  \t\t\t\t\t\t\t\t\t\t\t1:If $type==0 and if file was not found into alternate dir, return empty string\n *  \t\t\t\t\t\t\t\t\t\t\t2:If $type==0 and if file was not found into alternate dir, test into main dir, return default path if found, empty string if not found\n *  @return string\t\t\t\t\t\t\t\tFull filesystem path (if path=0) or '' if file not found, Full url path (if mode=1)\n */\nfunction dol_buildpath($path, $type = 0, $returnemptyifnotfound = 0)\n{\n\tglobal $conf;\n\n\t$path = preg_replace('/^\\//', '', $path);\n\n\tif (empty($type))\t// For a filesystem path\n\t{\n\t\t$res = DOL_DOCUMENT_ROOT.'/'.$path; // Standard default path\n\t\tif (is_array($conf->file->dol_document_root))\n\t\t{\n\t\t\tforeach ($conf->file->dol_document_root as $key => $dirroot)\t// ex: array(\"main\"=>\"/home/main/htdocs\", \"alt0\"=>\"/home/dirmod/htdocs\", ...)\n\t\t\t{\n\t\t\t\tif ($key == 'main')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (file_exists($dirroot.'/'.$path))\n\t\t\t\t{\n\t\t\t\t\t$res = $dirroot.'/'.$path;\n\t\t\t\t\treturn $res;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($returnemptyifnotfound)\t\t\t\t\t\t\t\t// Not found into alternate dir\n\t\t{\n\t\t\tif ($returnemptyifnotfound == 1 || !file_exists($res)) return '';\n\t\t}\n\t}\n\telse\t\t\t\t// For an url path\n\t{\n\t\t// We try to get local path of file on filesystem from url\n\t\t// Note that trying to know if a file on disk exist by forging path on disk from url\n\t\t// works only for some web server and some setup. This is bugged when\n\t\t// using proxy, rewriting, virtual path, etc...\n\t\t$res = '';\n\t\tif ($type == 1) $res = DOL_URL_ROOT.'/'.$path; // Standard value\n\t\tif ($type == 2) $res = DOL_MAIN_URL_ROOT.'/'.$path; // Standard value\n\t\tif ($type == 3) $res = DOL_URL_ROOT.'/'.$path;\n\n\t\tforeach ($conf->file->dol_document_root as $key => $dirroot)\t// ex: array([\"main\"]=>\"/home/main/htdocs\", [\"alt0\"]=>\"/home/dirmod/htdocs\", ...)\n\t\t{\n\t\t\tif ($key == 'main')\n\t\t\t{\n\t\t\t\tif ($type == 3)\n\t\t\t\t{\n\t\t\t\t\tglobal $dolibarr_main_url_root;\n\n\t\t\t\t\t// Define $urlwithroot\n\t\t\t\t\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t\t\t\t\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\t\t\t\t\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : $urlwithroot).'/'.$path; // Test on start with http is for old conf syntax\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpreg_match('/^([^\\?]+(\\.css\\.php|\\.css|\\.js\\.php|\\.js|\\.png|\\.jpg|\\.php)?)/i', $path, $regs); // Take part before '?'\n\t\t\tif (!empty($regs[1]))\n\t\t\t{\n\t\t\t\t//print $key.'-'.$dirroot.'/'.$path.'-'.$conf->file->dol_url_root[$type].'<br>'.\"\\n\";\n\t\t\t\tif (file_exists($dirroot.'/'.$regs[1]))\n\t\t\t\t{\n\t\t\t\t\tif ($type == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : DOL_URL_ROOT).$conf->file->dol_url_root[$key].'/'.$path;\n\t\t\t\t\t}\n\t\t\t\t\tif ($type == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : DOL_MAIN_URL_ROOT).$conf->file->dol_url_root[$key].'/'.$path;\n\t\t\t\t\t}\n\t\t\t\t\tif ($type == 3)\n\t\t\t\t\t{\n\t\t\t\t\t\tglobal $dolibarr_main_url_root;\n\n\t\t\t\t\t\t// Define $urlwithroot\n\t\t\t\t\t\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t\t\t\t\t\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\t\t\t\t\t\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\t\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : $urlwithroot).$conf->file->dol_url_root[$key].'/'.$path; // Test on start with http is for old conf syntax\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $res;\n}\n\n/**\n *\tCreate a clone of instance of object (new instance with same value for properties)\n *  With native = 0: Property that are reference are also new object (full isolation clone). This means $this->db of new object is not valid.\n *  With native = 1: Use PHP clone. Property that are reference are same pointer. This means $this->db of new object is still valid but point to same this->db than original object.\n *\n * \t@param\tobject\t$object\t\tObject to clone\n *  @param\tint\t\t$native\t\t0=Full isolation method, 1=Native PHP method\n *\t@return object\t\t\t\tClone object\n *  @see https://php.net/manual/language.oop5.cloning.php\n */\nfunction dol_clone($object, $native = 0)\n{\n\tif (empty($native))\n\t{\n\t\t$myclone = unserialize(serialize($object));\n\t}\n\telse\n\t{\n\t\t$myclone = clone $object; // PHP clone is a shallow copy only, not a real clone, so properties of references will keep references (refer to the same target/variable)\n\t}\n\n\treturn $myclone;\n}\n\n/**\n *\tOptimize a size for some browsers (phone, smarphone, ...)\n *\n * \t@param\tint\t\t$size\t\tSize we want\n * \t@param\tstring\t$type\t\tType of optimizing:\n * \t\t\t\t\t\t\t\t'' = function used to define a size for truncation\n * \t\t\t\t\t\t\t\t'width' = function is used to define a width\n *\t@return int\t\t\t\t\tNew size after optimizing\n */\nfunction dol_size($size, $type = '')\n{\n\tglobal $conf;\n\tif (empty($conf->dol_optimize_smallscreen)) return $size;\n\tif ($type == 'width' && $size > 250) return 250;\n\telse return 10;\n}\n\n\n/**\n *\tClean a string to use it as a file name\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace bad chars with\n *  @param\tint\t    $unaccent\t\t1=Remove also accent (default), 0 do not remove them\n *\t@return string          \t\tString cleaned (a-zA-Z_)\n *\n * \t@see        \tdol_string_nospecial(), dol_string_unaccent(), dol_sanitizePathName()\n */\nfunction dol_sanitizeFileName($str, $newstr = '_', $unaccent = 1)\n{\n\t// List of special chars for filenames in windows are defined on page https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\n\t// Char '>' '<' '|' '$' and ';' are special chars for shells.\n\t// Char '/' and '\\' are file delimiters.\n\t$filesystem_forbidden_chars = array('<', '>', '/', '\\\\', '?', '*', '|', '\"', ':', '\u00b0', '$', ';');\n\treturn dol_string_nospecial($unaccent ?dol_string_unaccent($str) : $str, $newstr, $filesystem_forbidden_chars);\n}\n\n/**\n *\tClean a string to use it as a path name\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace bad chars with\n *  @param\tint\t    $unaccent\t\t1=Remove also accent (default), 0 do not remove them\n *\t@return string          \t\tString cleaned (a-zA-Z_)\n *\n * \t@see        \tdol_string_nospecial(), dol_string_unaccent(), dol_sanitizeFileName()\n */\nfunction dol_sanitizePathName($str, $newstr = '_', $unaccent = 1)\n{\n\t$filesystem_forbidden_chars = array('<', '>', '?', '*', '|', '\"', '\u00b0');\n\treturn dol_string_nospecial($unaccent ? dol_string_unaccent($str) : $str, $newstr, $filesystem_forbidden_chars);\n}\n\n/**\n *\tClean a string from all accent characters to be used as ref, login or by dol_sanitizeFileName\n *\n *\t@param\tstring\t$str\t\t\tString to clean\n *\t@return string   \t       \t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename(), dol_string_nospecial()\n */\nfunction dol_string_unaccent($str)\n{\n\tif (utf8_check($str))\n\t{\n\t\t// See http://www.utf8-chartable.de/\n\t\t$string = rawurlencode($str);\n\t\t$replacements = array(\n\t\t'%C3%80' => 'A', '%C3%81' => 'A', '%C3%82' => 'A', '%C3%83' => 'A', '%C3%84' => 'A', '%C3%85' => 'A',\n\t\t'%C3%88' => 'E', '%C3%89' => 'E', '%C3%8A' => 'E', '%C3%8B' => 'E',\n\t\t'%C3%8C' => 'I', '%C3%8D' => 'I', '%C3%8E' => 'I', '%C3%8F' => 'I',\n\t\t'%C3%92' => 'O', '%C3%93' => 'O', '%C3%94' => 'O', '%C3%95' => 'O', '%C3%96' => 'O',\n\t\t'%C3%99' => 'U', '%C3%9A' => 'U', '%C3%9B' => 'U', '%C3%9C' => 'U',\n\t\t'%C3%A0' => 'a', '%C3%A1' => 'a', '%C3%A2' => 'a', '%C3%A3' => 'a', '%C3%A4' => 'a', '%C3%A5' => 'a',\n\t\t'%C3%A7' => 'c',\n\t\t'%C3%A8' => 'e', '%C3%A9' => 'e', '%C3%AA' => 'e', '%C3%AB' => 'e',\n\t\t'%C3%AC' => 'i', '%C3%AD' => 'i', '%C3%AE' => 'i', '%C3%AF' => 'i',\n\t\t'%C3%B1' => 'n',\n\t\t'%C3%B2' => 'o', '%C3%B3' => 'o', '%C3%B4' => 'o', '%C3%B5' => 'o', '%C3%B6' => 'o',\n\t\t'%C3%B9' => 'u', '%C3%BA' => 'u', '%C3%BB' => 'u', '%C3%BC' => 'u',\n\t\t'%C3%BF' => 'y'\n\t\t);\n\t\t$string = strtr($string, $replacements);\n\t\treturn rawurldecode($string);\n\t}\n\telse\n\t{\n\t\t// See http://www.ascii-code.com/\n        $string = strtr(\n\t\t\t$str,\n\t\t\t\"\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC7\n\t\t\t\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\n\t\t\t\\xD2\\xD3\\xD4\\xD5\\xD8\\xD9\\xDA\\xDB\\xDD\n\t\t\t\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE7\\xE8\\xE9\\xEA\\xEB\n\t\t\t\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF8\n\t\t\t\\xF9\\xFA\\xFB\\xFC\\xFD\\xFF\",\n\t\t\t\"AAAAAAC\n\t\t\tEEEEIIIIDN\n\t\t\tOOOOOUUUY\n\t\t\taaaaaaceeee\n\t\t\tiiiidnooooo\n\t\t\tuuuuyy\"\n\t\t);\n\t\t$string = strtr($string, array(\"\\xC4\"=>\"Ae\", \"\\xC6\"=>\"AE\", \"\\xD6\"=>\"Oe\", \"\\xDC\"=>\"Ue\", \"\\xDE\"=>\"TH\", \"\\xDF\"=>\"ss\", \"\\xE4\"=>\"ae\", \"\\xE6\"=>\"ae\", \"\\xF6\"=>\"oe\", \"\\xFC\"=>\"ue\", \"\\xFE\"=>\"th\"));\n\t\treturn $string;\n\t}\n}\n\n/**\n *\tClean a string from all punctuation characters to use it as a ref or login.\n *  This is a more complete function than dol_sanitizeFileName.\n *\n *\t@param\tstring\t$str            \tString to clean\n * \t@param\tstring\t$newstr\t\t\t\tString to replace forbidden chars with\n *  @param  array\t$badcharstoreplace  List of forbidden characters\n * \t@return string          \t\t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename(), dol_string_unaccent()\n */\nfunction dol_string_nospecial($str, $newstr = '_', $badcharstoreplace = '')\n{\n\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \",\", \";\", \"=\", '\u00b0'); // more complete than dol_sanitizeFileName\n\t$forbidden_chars_to_remove = array();\n\tif (is_array($badcharstoreplace)) $forbidden_chars_to_replace = $badcharstoreplace;\n\t//$forbidden_chars_to_remove=array(\"(\",\")\");\n\n\treturn str_replace($forbidden_chars_to_replace, $newstr, str_replace($forbidden_chars_to_remove, \"\", $str));\n}\n\n\n/**\n *  Returns text escaped for inclusion into javascript code\n *\n *  @param      string\t\t$stringtoescape\t\tString to escape\n *  @param\t\tint\t\t$mode\t\t\t\t0=Escape also ' and \" into ', 1=Escape ' but not \" for usage into 'string', 2=Escape \" but not ' for usage into \"string\", 3=Escape ' and \" with \\\n *  @param\t\tint\t\t$noescapebackslashn\t0=Escape also \\n. 1=Do not escape \\n.\n *  @return     string     \t\t \t\t\t\tEscaped string. Both ' and \" are escaped into ' if they are escaped.\n */\nfunction dol_escape_js($stringtoescape, $mode = 0, $noescapebackslashn = 0)\n{\n\t// escape quotes and backslashes, newlines, etc.\n\t$substitjs = array(\"&#039;\"=>\"\\\\'\", \"\\r\"=>'\\\\r');\n\t//$substitjs['</']='<\\/';\t// We removed this. Should be useless.\n\tif (empty($noescapebackslashn)) { $substitjs[\"\\n\"] = '\\\\n'; $substitjs['\\\\'] = '\\\\\\\\'; }\n\tif (empty($mode)) { $substitjs[\"'\"] = \"\\\\'\"; $substitjs['\"'] = \"\\\\'\"; }\n\telseif ($mode == 1) $substitjs[\"'\"] = \"\\\\'\";\n\telseif ($mode == 2) { $substitjs['\"'] = '\\\\\"'; }\n\telseif ($mode == 3) { $substitjs[\"'\"] = \"\\\\'\"; $substitjs['\"'] = \"\\\\\\\"\"; }\n\treturn strtr($stringtoescape, $substitjs);\n}\n\n/**\n *  Returns text escaped for inclusion into javascript code\n *\n *  @param      string\t\t$stringtoescape\t\tString to escape\n *  @return     string     \t\t \t\t\t\tEscaped string for json content.\n */\nfunction dol_escape_json($stringtoescape)\n{\n\treturn str_replace('\"', '\\\"', $stringtoescape);\n}\n\n/**\n *  Returns text escaped for inclusion in HTML alt or title tags, or into values of HTML input fields.\n *\n *  @param      string\t\t$stringtoescape\t\t\tString to escape\n *  @param\t\tint\t\t\t$keepb\t\t\t\t\t1=Preserve b tags (otherwise, remove them)\n *  @param      int         $keepn              \t1=Preserve \\r\\n strings (otherwise, replace them with escaped value). Set to 1 when escaping for a <textarea>.\n *  @param\t\tstring\t\t$keepmoretags\t\t\t'' or 'common' or list of tags\n *  @param\t\tint\t\t\t$escapeonlyhtmltags\t\t1=Escape only html tags, not the special chars like accents.\n *  @return     string     \t\t\t\t \t\t\tEscaped string\n *  @see\t\tdol_string_nohtmltag(), dol_string_nospecial(), dol_string_unaccent()\n */\nfunction dol_escape_htmltag($stringtoescape, $keepb = 0, $keepn = 0, $keepmoretags = '', $escapeonlyhtmltags = 0)\n{\n\tif ($keepmoretags == 'common') $keepmoretags = 'html,body,a,em,i,u,ul,li,br,div,img,font,p,span,strong,table,tr,td,th,tbody';\n\t// TODO Implement $keepmoretags\n\n\t// escape quotes and backslashes, newlines, etc.\n\tif ($escapeonlyhtmltags) {\n\t\t$tmp = htmlspecialchars_decode($stringtoescape, ENT_COMPAT);\n\t} else {\n\t\t$tmp = html_entity_decode($stringtoescape, ENT_COMPAT, 'UTF-8');\n\t}\n\tif (!$keepb) $tmp = strtr($tmp, array(\"<b>\"=>'', '</b>'=>''));\n\tif (!$keepn) $tmp = strtr($tmp, array(\"\\r\"=>'\\\\r', \"\\n\"=>'\\\\n'));\n\tif ($escapeonlyhtmltags) {\n\t\treturn htmlspecialchars($tmp, ENT_COMPAT, 'UTF-8');\n\t} else {\n\t\treturn htmlentities($tmp, ENT_COMPAT, 'UTF-8');\n\t}\n}\n\n\n/**\n * Convert a string to lower. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtolower($utf8_string)\n{\n\treturn mb_strtolower($utf8_string, \"UTF-8\");\n}\n\n/**\n * Convert a string to upper. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtoupper($utf8_string)\n{\n\treturn mb_strtoupper($utf8_string, \"UTF-8\");\n}\n\n\n/**\n *\tWrite log message into outputs. Possible outputs can be:\n *\tSYSLOG_HANDLERS = [\"mod_syslog_file\"]  \t\tfile name is then defined by SYSLOG_FILE\n *\tSYSLOG_HANDLERS = [\"mod_syslog_syslog\"]  \tfacility is then defined by SYSLOG_FACILITY\n *  Warning, syslog functions are bugged on Windows, generating memory protection faults. To solve\n *  this, use logging to files instead of syslog (see setup of module).\n *  Note: If constant 'SYSLOG_FILE_NO_ERROR' defined, we never output any error message when writing to log fails.\n *  Note: You can get log message into html sources by adding parameter &logtohtml=1 (constant MAIN_LOGTOHTML must be set)\n *  This function works only if syslog module is enabled.\n * \tThis must not use any call to other function calling dol_syslog (avoid infinite loop).\n *\n * \t@param  string\t\t$message\t\t\t\tLine to log. ''=Show nothing\n *  @param  int\t\t\t$level\t\t\t\t\tLog level\n *\t\t\t\t\t\t\t\t\t\t\t\tOn Windows LOG_ERR=4, LOG_WARNING=5, LOG_NOTICE=LOG_INFO=6, LOG_DEBUG=6 si define_syslog_variables ou PHP 5.3+, 7 si dolibarr\n *\t\t\t\t\t\t\t\t\t\t\t\tOn Linux   LOG_ERR=3, LOG_WARNING=4, LOG_INFO=6, LOG_DEBUG=7\n *  @param\tint\t\t\t$ident\t\t\t\t\t1=Increase ident of 1, -1=Decrease ident of 1\n *  @param\tstring\t\t$suffixinfilename\t\tWhen output is a file, append this suffix into default log filename.\n *  @param\tstring\t\t$restricttologhandler\tForce output of log only to this log handler\n *  @param\tarray|null\t$logcontext\t\t\t\tIf defined, an array with extra informations (can be used by some log handlers)\n *  @return\tvoid\n */\nfunction dol_syslog($message, $level = LOG_INFO, $ident = 0, $suffixinfilename = '', $restricttologhandler = '', $logcontext = null)\n{\n    global $conf, $user, $debugbar;\n\n\t// If syslog module enabled\n\tif (empty($conf->syslog->enabled)) return;\n\n\t// Check if we are into execution of code of a website\n\tif (defined('USEEXTERNALSERVER') && ! defined('USEDOLIBARRSERVER') && ! defined('USEDOLIBARREDITOR')) {\n\t\tglobal $website, $websitekey;\n\t\tif (is_object($website) && ! empty($website->ref)) $suffixinfilename.='_website_'.$website->ref;\n\t\telseif (! empty($websitekey)) $suffixinfilename.='_website_'.$websitekey;\n\t}\n\n\tif ($ident < 0)\n\t{\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->setIdent($ident);\n\t\t}\n\t}\n\n\tif (!empty($message))\n\t{\n\t\t// Test log level\n\t\t$logLevels = array(LOG_EMERG=>'EMERG', LOG_ALERT=>'ALERT', LOG_CRIT=>'CRITICAL', LOG_ERR=>'ERR', LOG_WARNING=>'WARN', LOG_NOTICE=>'NOTICE', LOG_INFO=>'INFO', LOG_DEBUG=>'DEBUG');\n\t\tif (!array_key_exists($level, $logLevels))\n\t\t{\n\t\t\tthrow new Exception('Incorrect log level');\n\t\t}\n\t\tif ($level > $conf->global->SYSLOG_LEVEL) return;\n\n\t\t$message = preg_replace('/password=\\'[^\\']*\\'/', 'password=\\'hidden\\'', $message); // protection to avoid to have value of password in log\n\n\t\t// If adding log inside HTML page is required\n\t\tif ((!empty($_REQUEST['logtohtml']) && !empty($conf->global->MAIN_ENABLE_LOG_TO_HTML))\n\t\t    || (!empty($user->rights->debugbar->read) && is_object($debugbar)))\n\t\t{\n\t\t    $conf->logbuffer[] = dol_print_date(time(), \"%Y-%m-%d %H:%M:%S\").\" \".$logLevels[$level].\" \".$message;\n\t\t}\n\n\t\t//TODO: Remove this. MAIN_ENABLE_LOG_INLINE_HTML should be deprecated and use a log handler dedicated to HTML output\n\t\t// If html log tag enabled and url parameter log defined, we show output log on HTML comments\n\t\tif (!empty($conf->global->MAIN_ENABLE_LOG_INLINE_HTML) && !empty($_GET[\"log\"]))\n\t\t{\n\t\t\tprint \"\\n\\n<!-- Log start\\n\";\n\t\t\tprint $message.\"\\n\";\n\t\t\tprint \"Log end -->\\n\";\n\t\t}\n\n\t\t$data = array(\n\t\t\t'message' => $message,\n\t\t\t'script' => (isset($_SERVER['PHP_SELF']) ? basename($_SERVER['PHP_SELF'], '.php') : false),\n\t\t\t'level' => $level,\n\t\t\t'user' => ((is_object($user) && $user->id) ? $user->login : false),\n\t\t\t'ip' => false\n\t\t);\n\n\t\t$remoteip = getUserRemoteIP(); // Get ip when page run on a web server\n\t\tif (!empty($remoteip)) {\n\t\t\t$data['ip'] = $remoteip;\n\t\t\t// This is when server run behind a reverse proxy\n\t\t\tif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR'] != $remoteip) $data['ip'] = $_SERVER['HTTP_X_FORWARDED_FOR'].' -> '.$data['ip'];\n\t\t\telseif (!empty($_SERVER['HTTP_CLIENT_IP']) && $_SERVER['HTTP_CLIENT_IP'] != $remoteip) $data['ip'] = $_SERVER['HTTP_CLIENT_IP'].' -> '.$data['ip'];\n\t\t}\n\t\t// This is when PHP session is ran inside a web server but not inside a client request (example: init code of apache)\n\t\telseif (!empty($_SERVER['SERVER_ADDR'])) $data['ip'] = $_SERVER['SERVER_ADDR'];\n\t\t// This is when PHP session is ran outside a web server, like from Windows command line (Not always defined, but useful if OS defined it).\n\t\telseif (!empty($_SERVER['COMPUTERNAME'])) $data['ip'] = $_SERVER['COMPUTERNAME'].(empty($_SERVER['USERNAME']) ? '' : '@'.$_SERVER['USERNAME']);\n\t\t// This is when PHP session is ran outside a web server, like from Linux command line (Not always defined, but usefull if OS defined it).\n\t\telseif (!empty($_SERVER['LOGNAME'])) $data['ip'] = '???@'.$_SERVER['LOGNAME'];\n\t\t// Loop on each log handler and send output\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\tif ($restricttologhandler && $loghandlerinstance->code != $restricttologhandler) continue;\n\t\t\t$loghandlerinstance->export($data, $suffixinfilename);\n\t\t}\n\t\tunset($data);\n\t}\n\n\tif ($ident > 0)\n\t{\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->setIdent($ident);\n\t\t}\n\t}\n}\n\n\n/**\n *\tShow tab header of a card\n *\n *\t@param\tarray\t$links\t\t\t\tArray of tabs. Currently initialized by calling a function xxx_admin_prepare_head\n *\t@param\tstring\t$active     \t\tActive tab name (document', 'info', 'ldap', ....)\n *\t@param  string\t$title      \t\tTitle\n *\t@param  int\t\t$notab\t\t\t\t-1 or 0=Add tab header, 1=no tab header (if you set this to 1, using dol_fiche_end() to close tab is not required), -2=Add tab header with no seaparation under tab (to start a tab just after)\n * \t@param\tstring\t$picto\t\t\t\tAdd a picto on tab title\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path. If you set this to 1, you can use url returned by dol_buildpath('/mymodyle/img/myimg.png',1) for $picto.\n *  @param\tstring\t$morehtmlright\t\tAdd more html content on right of tabs title\n *  @param\tstring\t$morecss\t\t\tMore Css\n *  @param\tint\t\t$limittoshow\t\tLimit number of tabs to show. Use 0 to use automatic default value.\n * \t@return\tvoid\n */\nfunction dol_fiche_head($links = array(), $active = '0', $title = '', $notab = 0, $picto = '', $pictoisfullpath = 0, $morehtmlright = '', $morecss = '', $limittoshow = 0)\n{\n\tprint dol_get_fiche_head($links, $active, $title, $notab, $picto, $pictoisfullpath, $morehtmlright, $morecss, $limittoshow);\n}\n\n/**\n *  Show tabs of a record\n *\n *\t@param\tarray\t$links\t\t\t\tArray of tabs\n *\t@param\tstring\t$active     \t\tActive tab name\n *\t@param  string\t$title      \t\tTitle\n *\t@param  int\t\t$notab\t\t\t\t-1 or 0=Add tab header, 1=no tab header (if you set this to 1, using dol_fiche_end() to close tab is not required), -2=Add tab header with no seaparation under tab (to start a tab just after)\n * \t@param\tstring\t$picto\t\t\t\tAdd a picto on tab title\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path. If you set this to 1, you can use url returned by dol_buildpath('/mymodyle/img/myimg.png',1) for $picto.\n *  @param\tstring\t$morehtmlright\t\tAdd more html content on right of tabs title\n *  @param\tstring\t$morecss\t\t\tMore Css\n *  @param\tint\t\t$limittoshow\t\tLimit number of tabs to show. Use 0 to use automatic default value.\n * \t@return\tstring\n */\nfunction dol_get_fiche_head($links = array(), $active = '', $title = '', $notab = 0, $picto = '', $pictoisfullpath = 0, $morehtmlright = '', $morecss = '', $limittoshow = 0)\n{\n\tglobal $conf, $langs, $hookmanager;\n\n\t// Show title\n\t$showtitle = 1;\n\tif (!empty($conf->dol_optimize_smallscreen)) $showtitle = 0;\n\n\t$out = \"\\n\".'<!-- dol_get_fiche_head -->';\n\n\tif ((!empty($title) && $showtitle) || $morehtmlright || !empty($links)) {\n\t\t$out .= '<div class=\"tabs'.($picto ? '' : ' nopaddingleft').'\" data-role=\"controlgroup\" data-type=\"horizontal\">'.\"\\n\";\n\t}\n\n\t// Show right part\n\tif ($morehtmlright) $out .= '<div class=\"inline-block floatright tabsElem\">'.$morehtmlright.'</div>'; // Output right area first so when space is missing, text is in front of tabs and not under.\n\n\t// Show title\n\tif (!empty($title) && $showtitle && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n\t{\n\t\t$limittitle = 30;\n\t\t$out .= '<a class=\"tabTitle\">';\n\t\tif ($picto) $out .= img_picto($title, ($pictoisfullpath ? '' : 'object_').$picto, '', $pictoisfullpath, 0, 0, '', 'imgTabTitle').' ';\n\t\t$out .= '<span class=\"tabTitleText\">'.dol_trunc($title, $limittitle).'</span>';\n\t\t$out .= '</a>';\n\t}\n\n\t// Show tabs\n\n\t// Define max of key (max may be higher than sizeof because of hole due to module disabling some tabs).\n\t$maxkey = -1;\n\tif (is_array($links) && !empty($links))\n\t{\n\t\t$keys = array_keys($links);\n\t\tif (count($keys)) $maxkey = max($keys);\n\t}\n\n\t// Show tabs\n\t// if =0 we don't use the feature\n\tif (empty($limittoshow)) {\n\t\t$limittoshow = (empty($conf->global->MAIN_MAXTABS_IN_CARD) ? 99 : $conf->global->MAIN_MAXTABS_IN_CARD);\n\t}\n\tif (!empty($conf->dol_optimize_smallscreen)) $limittoshow = 2;\n\n\t$displaytab = 0;\n\t$nbintab = 0;\n\t$popuptab = 0;\n\t$outmore = '';\n\tfor ($i = 0; $i <= $maxkey; $i++)\n\t{\n\t\tif ((is_numeric($active) && $i == $active) || (!empty($links[$i][2]) && !is_numeric($active) && $active == $links[$i][2])) {\n\t\t\t// If active tab is already present\n\t\t\tif ($i >= $limittoshow) $limittoshow--;\n\t\t}\n\t}\n\n\tfor ($i = 0; $i <= $maxkey; $i++)\n\t{\n\t\tif ((is_numeric($active) && $i == $active) || (!empty($links[$i][2]) && !is_numeric($active) && $active == $links[$i][2])) {\n\t\t\t$isactive = true;\n\t\t}\n\t\telse {\n\t\t\t$isactive = false;\n\t\t}\n\n\t\tif ($i < $limittoshow || $isactive)\n\t\t{\n\t\t\t$out .= '<div class=\"inline-block tabsElem'.($isactive ? ' tabsElemActive' : '').((!$isactive && !empty($conf->global->MAIN_HIDE_INACTIVETAB_ON_PRINT)) ? ' hideonprint' : '').'\"><!-- id tab = '.(empty($links[$i][2]) ? '' : $links[$i][2]).' -->';\n\t\t\tif (isset($links[$i][2]) && $links[$i][2] == 'image')\n\t\t\t{\n\t\t\t\tif (!empty($links[$i][0]))\n\t\t\t\t{\n\t\t\t\t\t$out .= '<a class=\"tabimage'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$out .= '<span class=\"tabspan\">'.$links[$i][1].'</span>'.\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (!empty($links[$i][1]))\n\t\t\t{\n\t\t\t\t//print \"x $i $active \".$links[$i][2].\" z\";\n\t\t\t\tif ($isactive)\n\t\t\t\t{\n\t\t\t\t\t$out .= '<a'.(!empty($links[$i][2]) ? ' id=\"'.$links[$i][2].'\"' : '').' class=\"tabactive tab inline-block'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">';\n\t\t\t\t\t$out .= $links[$i][1];\n\t\t\t\t\t$out .= '</a>'.\"\\n\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$out .= '<a'.(!empty($links[$i][2]) ? ' id=\"'.$links[$i][2].'\"' : '').' class=\"tabunactive tab inline-block'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">';\n\t\t\t\t\t$out .= $links[$i][1];\n\t\t\t\t\t$out .= '</a>'.\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$out .= '</div>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// The popup with the other tabs\n\t\t\tif (!$popuptab)\n\t\t\t{\n\t\t\t\t$popuptab = 1;\n\t\t\t\t$outmore .= '<div class=\"popuptabset wordwrap\">'; // The css used to hide/show popup\n\t\t\t}\n\t\t\t$outmore .= '<div class=\"popuptab wordwrap\" style=\"display:inherit;\">';\n\t\t\tif (isset($links[$i][2]) && $links[$i][2] == 'image')\n\t\t\t{\n\t\t\t\tif (!empty($links[$i][0]))\n\t\t\t\t\t$outmore .= '<a class=\"tabimage'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t\telse\n\t\t\t\t\t$outmore .= '<span class=\"tabspan\">'.$links[$i][1].'</span>'.\"\\n\";\n\t\t\t}\n\t\t\telseif (!empty($links[$i][1]))\n\t\t\t{\n\t\t\t\t$outmore .= '<a'.(!empty($links[$i][2]) ? ' id=\"'.$links[$i][2].'\"' : '').' class=\"wordwrap inline-block'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">';\n\t\t\t\t$outmore .= preg_replace('/([a-z])\\/([a-z])/i', '\\\\1 / \\\\2', $links[$i][1]); // Replace x/y with x / y to allow wrap on long composed texts.\n\t\t\t\t$outmore .= '</a>'.\"\\n\";\n\t\t\t}\n\t\t\t$outmore .= '</div>';\n\n\t\t\t$nbintab++;\n\t\t}\n\t\t$displaytab = $i;\n\t}\n\tif ($popuptab) $outmore .= '</div>';\n\n\tif ($popuptab)\t// If there is some tabs not shown\n\t{\n\t\t$left = ($langs->trans(\"DIRECTION\") == 'rtl' ? 'right' : 'left');\n\t\t$right = ($langs->trans(\"DIRECTION\") == 'rtl' ? 'left' : 'right');\n\n\t\t$tabsname = str_replace(\"@\", \"\", $picto);\n\t\t$out .= '<div id=\"moretabs'.$tabsname.'\" class=\"inline-block tabsElem\">';\n\t\t$out .= '<a href=\"#\" class=\"tab moretab inline-block tabunactive reposition\">'.$langs->trans(\"More\").'... ('.$nbintab.')</a>';\n\t\t$out .= '<div id=\"moretabsList'.$tabsname.'\" style=\"position: absolute; '.$left.': -999em; text-align: '.$left.'; margin:0px; padding:2px; z-index:10;\">';\n\t\t$out .= $outmore;\n\t\t$out .= '</div>';\n\t\t$out .= '<div></div>';\n\t\t$out .= \"</div>\\n\";\n\n\t\t$out .= \"<script>\";\n\t\t$out .= \"$('#moretabs\".$tabsname.\"').mouseenter( function() { console.log('mouseenter \".$left.\"'); $('#moretabsList\".$tabsname.\"').css('\".$left.\"','auto');});\";\n\t\t$out .= \"$('#moretabs\".$tabsname.\"').mouseleave( function() { console.log('mouseleave \".$left.\"'); $('#moretabsList\".$tabsname.\"').css('\".$left.\"','-999em');});\";\n\t\t$out .= \"</script>\";\n\t}\n\n\tif ((!empty($title) && $showtitle) || $morehtmlright || !empty($links)) {\n\t\t$out .= \"</div>\\n\";\n\t}\n\n\tif (!$notab || $notab == -1 || $notab == -2) $out .= \"\\n\".'<div class=\"tabBar'.($notab == -1 ? '' : ($notab == -2 ? ' tabBarNoTop' : ' tabBarWithBottom')).'\">'.\"\\n\";\n\n\t$parameters = array('tabname' => $active, 'out' => $out);\n\t$reshook = $hookmanager->executeHooks('printTabsHead', $parameters); // This hook usage is called just before output the head of tabs. Take also a look at \"completeTabsHead\"\n\tif ($reshook > 0)\n\t{\n\t\t$out = $hookmanager->resPrint;\n\t}\n\n\treturn $out;\n}\n\n/**\n *  Show tab footer of a card\n *\n *  @param\tint\t\t$notab       -1 or 0=Add tab footer, 1=no tab footer\n *  @return\tvoid\n */\nfunction dol_fiche_end($notab = 0)\n{\n\tprint dol_get_fiche_end($notab);\n}\n\n/**\n *\tReturn tab footer of a card\n *\n *\t@param  int\t\t$notab\t\t-1 or 0=Add tab footer, 1=no tab footer\n *  @return\tstring\n */\nfunction dol_get_fiche_end($notab = 0)\n{\n\tif (!$notab || $notab == -1) return \"\\n</div>\\n\";\n\telse return '';\n}\n\n/**\n *  Show tab footer of a card.\n *  Note: $object->next_prev_filter can be set to restrict select to find next or previous record by $form->showrefnav.\n *\n *  @param\tObject\t$object\t\t\tObject to show\n *  @param\tstring\t$paramid   \t\tName of parameter to use to name the id into the URL next/previous link\n *  @param\tstring\t$morehtml  \t\tMore html content to output just before the nav bar\n *  @param\tint\t\t$shownav\t  \tShow Condition (navigation is shown if value is 1)\n *  @param\tstring\t$fieldid   \t\tNom du champ en base a utiliser pour select next et previous (we make the select max and min on this field). Use 'none' for no prev/next search.\n *  @param\tstring\t$fieldref   \tNom du champ objet ref (object->ref) a utiliser pour select next et previous\n *  @param\tstring\t$morehtmlref  \tMore html to show after ref\n *  @param\tstring\t$moreparam  \tMore param to add in nav link url.\n *\t@param\tint\t\t$nodbprefix\t\tDo not include DB prefix to forge table name\n *\t@param\tstring\t$morehtmlleft\tMore html code to show before ref\n *\t@param\tstring\t$morehtmlstatus\tMore html code to show under navigation arrows\n *  @param  int     $onlybanner     Put this to 1, if the card will contains only a banner (this add css 'arearefnobottom' on div)\n *\t@param\tstring\t$morehtmlright\tMore html code to show before navigation arrows\n *  @return\tvoid\n */\nfunction dol_banner_tab($object, $paramid, $morehtml = '', $shownav = 1, $fieldid = 'rowid', $fieldref = 'ref', $morehtmlref = '', $moreparam = '', $nodbprefix = 0, $morehtmlleft = '', $morehtmlstatus = '', $onlybanner = 0, $morehtmlright = '')\n{\n\tglobal $conf, $form, $user, $langs;\n\n\t$error = 0;\n\n\t$maxvisiblephotos = 1;\n\t$showimage = 1;\n\t$entity = (empty($object->entity) ? $conf->entity : $object->entity);\n\t$showbarcode = empty($conf->barcode->enabled) ? 0 : ($object->barcode ? 1 : 0);\n\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) $showbarcode = 0;\n\t$modulepart = 'unknown';\n\n\tif ($object->element == 'societe')         $modulepart = 'societe';\n\tif ($object->element == 'contact')         $modulepart = 'contact';\n\tif ($object->element == 'member')          $modulepart = 'memberphoto';\n\tif ($object->element == 'user')            $modulepart = 'userphoto';\n\tif ($object->element == 'product')         $modulepart = 'product';\n\tif ($object->element == 'ticket')          $modulepart = 'ticket';\n\n\tif (class_exists(\"Imagick\"))\n\t{\n\t\tif ($object->element == 'propal')            $modulepart = 'propal';\n\t\tif ($object->element == 'commande')          $modulepart = 'commande';\n\t\tif ($object->element == 'facture')           $modulepart = 'facture';\n\t\tif ($object->element == 'fichinter')         $modulepart = 'ficheinter';\n\t\tif ($object->element == 'contrat')           $modulepart = 'contract';\n\t\tif ($object->element == 'supplier_proposal') $modulepart = 'supplier_proposal';\n\t\tif ($object->element == 'order_supplier')    $modulepart = 'supplier_order';\n\t\tif ($object->element == 'invoice_supplier')  $modulepart = 'supplier_invoice';\n\t\tif ($object->element == 'expensereport')     $modulepart = 'expensereport';\n\t}\n\n\tif ($object->element == 'product')\n\t{\n\t\t$width = 80; $cssclass = 'photoref';\n\t\t$showimage = $object->is_photo_available($conf->product->multidir_output[$entity]);\n\t\t$maxvisiblephotos = (isset($conf->global->PRODUCT_MAX_VISIBLE_PHOTO) ? $conf->global->PRODUCT_MAX_VISIBLE_PHOTO : 5);\n\t\tif ($conf->browser->layout == 'phone') $maxvisiblephotos = 1;\n\t\tif ($showimage) $morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">'.$object->show_photos('product', $conf->product->multidir_output[$entity], 'small', $maxvisiblephotos, 0, 0, 0, $width, 0).'</div>';\n\t\telse\n\t\t{\n\t\t\tif (!empty($conf->global->PRODUCT_NODISPLAYIFNOPHOTO)) {\n\t\t\t\t$nophoto = '';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"></div>';\n\t\t\t}\n\t\t\telse {    // Show no photo link\n\t\t\t\t$nophoto = '/public/theme/common/nophoto.png';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"><img class=\"photo'.$modulepart.($cssclass ? ' '.$cssclass : '').'\" alt=\"No photo\"'.($width ? ' style=\"width: '.$width.'px\"' : '').' src=\"'.DOL_URL_ROOT.$nophoto.'\"></div>';\n\t\t\t}\n\t\t}\n\t}\n\telseif ($object->element == 'ticket')\n\t{\n\t\t$width = 80; $cssclass = 'photoref';\n\t\t$showimage = $object->is_photo_available($conf->ticket->multidir_output[$entity].'/'.$object->ref);\n\t\t$maxvisiblephotos = (isset($conf->global->TICKET_MAX_VISIBLE_PHOTO) ? $conf->global->TICKET_MAX_VISIBLE_PHOTO : 2);\n\t\tif ($conf->browser->layout == 'phone') $maxvisiblephotos = 1;\n\t\tif ($showimage)\n\t\t{\n\t\t\t$showphoto = $object->show_photos('ticket', $conf->ticket->multidir_output[$entity], 'small', $maxvisiblephotos, 0, 0, 0, $width, 0);\n\t\t\tif ($object->nbphoto > 0)\n\t\t\t{\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">'.$showphoto.'</div>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$showimage = 0;\n\t\t\t}\n\t\t}\n\t\tif (!$showimage)\n\t\t{\n\t\t\tif (!empty($conf->global->TICKET_NODISPLAYIFNOPHOTO)) {\n\t\t\t\t$nophoto = '';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"></div>';\n\t\t\t}\n\t\t\telse {    // Show no photo link\n\t\t\t\t$nophoto = '/public/theme/common/nophoto.png';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"><img class=\"photo'.$modulepart.($cssclass ? ' '.$cssclass : '').'\" alt=\"No photo\" border=\"0\"'.($width ? ' style=\"width: '.$width.'px\"' : '').' src=\"'.DOL_URL_ROOT.$nophoto.'\"></div>';\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($showimage)\n\t\t{\n\t\t\tif ($modulepart != 'unknown')\n\t\t\t{\n\t\t\t\t$phototoshow = '';\n\t\t\t\t// Check if a preview file is available\n\t\t\t\tif (in_array($modulepart, array('propal', 'commande', 'facture', 'ficheinter', 'contract', 'supplier_order', 'supplier_proposal', 'supplier_invoice', 'expensereport')) && class_exists(\"Imagick\"))\n\t\t\t\t{\n\t\t\t\t\t$objectref = dol_sanitizeFileName($object->ref);\n\t\t\t\t\t$dir_output = (empty($conf->$modulepart->multidir_output[$entity]) ? $conf->$modulepart->dir_output : $conf->$modulepart->multidir_output[$entity]).\"/\";\n\t\t\t\t\tif (in_array($modulepart, array('invoice_supplier', 'supplier_invoice')))\n\t\t\t\t\t{\n\t\t\t\t\t\t$subdir = get_exdir($object->id, 2, 0, 1, $object, $modulepart);\n\t\t\t\t\t\t$subdir .= ((!empty($subdir) && !preg_match('/\\/$/', $subdir)) ? '/' : '').$objectref; // the objectref dir is not included into get_exdir when used with level=2, so we add it at end\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$subdir = get_exdir($object->id, 0, 0, 1, $object, $modulepart);\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($subdir)) $subdir = 'errorgettingsubdirofobject'; // Protection to avoid to return empty path\n\n\t\t\t\t\t$filepath = $dir_output.$subdir.\"/\";\n\n\t\t\t\t\t$filepdf = $filepath.$objectref.\".pdf\";\n\t\t\t\t\t$relativepath = $subdir.'/'.$objectref.'.pdf';\n\n\t\t\t\t\t// Define path to preview pdf file (preview precompiled \"file.ext\" are \"file.ext_preview.png\")\n\t\t\t\t\t$fileimage = $filepdf.'_preview.png';\n\t\t\t\t\t$relativepathimage = $relativepath.'_preview.png';\n\n\t\t\t\t\t$pdfexists = file_exists($filepdf);\n\n\t\t\t\t\t// If PDF file exists\n\t\t\t\t\tif ($pdfexists)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Conversion du PDF en image png si fichier png non existant\n\t\t\t\t\t\tif (!file_exists($fileimage) || (filemtime($fileimage) < filemtime($filepdf)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (empty($conf->global->MAIN_DISABLE_PDF_THUMBS))\t\t// If you experience trouble with pdf thumb generation and imagick, you can disable here.\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\t\t\t\t\t\t\t$ret = dol_convert_file($filepdf, 'png', $fileimage, '0'); // Convert first page of PDF into a file _preview.png\n\t\t\t\t\t\t\t\tif ($ret < 0) $error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($pdfexists && !$error)\n\t\t\t\t\t{\n\t\t\t\t\t\t$heightforphotref = 70;\n\t\t\t\t\t\tif (!empty($conf->dol_optimize_smallscreen)) $heightforphotref = 60;\n\t\t\t\t\t\t// If the preview file is found\n\t\t\t\t\t\tif (file_exists($fileimage))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$phototoshow = '<div class=\"floatleft inline-block valignmiddle divphotoref\"><div class=\"photoref\">';\n\t\t\t\t\t\t\t$phototoshow .= '<img height=\"'.$heightforphotref.'\" class=\"photo photowithmargin photowithborder\" src=\"'.DOL_URL_ROOT.'/viewimage.php?modulepart=apercu'.$modulepart.'&amp;file='.urlencode($relativepathimage).'\">';\n\t\t\t\t\t\t\t$phototoshow .= '</div></div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (!$phototoshow)\n\t\t\t\t{\n\t\t\t\t\t$phototoshow .= $form->showphoto($modulepart, $object, 0, 0, 0, 'photoref', 'small', 1, 0, $maxvisiblephotos);\n\t\t\t\t}\n\n\t\t\t\tif ($phototoshow)\n\t\t\t\t{\n\t\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">';\n\t\t\t\t\t$morehtmlleft .= $phototoshow;\n\t\t\t\t\t$morehtmlleft .= '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$phototoshow)      // Show No photo link (picto of object)\n\t\t\t{\n\t\t\t    $morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">';\n\t\t\t\tif ($object->element == 'action')\n\t\t\t\t{\n\t\t\t\t\t$width = 80;\n\t\t\t\t\t$cssclass = 'photorefcenter';\n\t\t\t\t\t$nophoto = img_picto('No photo', 'title_agenda');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$width = 14; $cssclass = 'photorefcenter';\n\t\t\t\t\t$picto = $object->picto;\n\t\t\t\t\tif ($object->element == 'project' && !$object->public) $picto = 'project'; // instead of projectpub\n\t\t\t\t\t$nophoto = img_picto('No photo', 'object_'.$picto);\n\t\t\t\t}\n\t\t\t\t$morehtmlleft .= '<!-- No photo to show -->';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"><div class=\"photoref\">';\n\t\t\t\t$morehtmlleft .= $nophoto;\n\t\t\t\t$morehtmlleft .= '</div></div>';\n\n\t\t\t\t$morehtmlleft .= '</div>';\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($showbarcode) $morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">'.$form->showbarcode($object).'</div>';\n\n\tif ($object->element == 'societe')\n\t{\n\t\tif (!empty($conf->use_javascript_ajax) && $user->rights->societe->creer && !empty($conf->global->MAIN_DIRECT_STATUS_UPDATE))\n\t\t{\n\t\t   \t$morehtmlstatus .= ajax_object_onoff($object, 'status', 'status', 'InActivity', 'ActivityCeased');\n\t\t}\n\t\telse {\n\t\t\t$morehtmlstatus .= $object->getLibStatut(6);\n\t\t}\n\t}\n\telseif ($object->element == 'product')\n\t{\n\t\t//$morehtmlstatus.=$langs->trans(\"Status\").' ('.$langs->trans(\"Sell\").') ';\n\t\tif (!empty($conf->use_javascript_ajax) && $user->rights->produit->creer && !empty($conf->global->MAIN_DIRECT_STATUS_UPDATE)) {\n\t\t\t$morehtmlstatus .= ajax_object_onoff($object, 'status', 'tosell', 'ProductStatusOnSell', 'ProductStatusNotOnSell');\n\t\t} else {\n\t\t\t$morehtmlstatus .= '<span class=\"statusrefsell\">'.$object->getLibStatut(6, 0).'</span>';\n\t\t}\n\t\t$morehtmlstatus .= ' &nbsp; ';\n\t\t//$morehtmlstatus.=$langs->trans(\"Status\").' ('.$langs->trans(\"Buy\").') ';\n\t\tif (!empty($conf->use_javascript_ajax) && $user->rights->produit->creer && !empty($conf->global->MAIN_DIRECT_STATUS_UPDATE)) {\n\t\t\t$morehtmlstatus .= ajax_object_onoff($object, 'status_buy', 'tobuy', 'ProductStatusOnBuy', 'ProductStatusNotOnBuy');\n\t\t} else {\n\t\t\t$morehtmlstatus .= '<span class=\"statusrefbuy\">'.$object->getLibStatut(6, 1).'</span>';\n\t\t}\n\t}\n\telseif (in_array($object->element, array('facture', 'invoice', 'invoice_supplier', 'chargesociales', 'loan')))\n\t{\n\t\t$tmptxt = $object->getLibStatut(6, $object->totalpaye);\n\t\tif (empty($tmptxt) || $tmptxt == $object->getLibStatut(3)) $tmptxt = $object->getLibStatut(5, $object->totalpaye);\n\t\t$morehtmlstatus .= $tmptxt;\n\t}\n\telseif ($object->element == 'contrat' || $object->element == 'contract')\n\t{\n\t\tif ($object->statut == 0) $morehtmlstatus .= $object->getLibStatut(5);\n\t\telse $morehtmlstatus .= $object->getLibStatut(4);\n\t}\n\telseif ($object->element == 'facturerec')\n\t{\n\t\tif ($object->frequency == 0) $morehtmlstatus .= $object->getLibStatut(2);\n\t\telse $morehtmlstatus .= $object->getLibStatut(5);\n\t}\n\telseif ($object->element == 'project_task')\n\t{\n\t\t$object->fk_statut = 1;\n\t\tif ($object->progress > 0) $object->fk_statut = 2;\n\t\tif ($object->progress >= 100) $object->fk_statut = 3;\n\t\t$tmptxt = $object->getLibStatut(5);\n\t\t$morehtmlstatus .= $tmptxt; // No status on task\n\t}\n\telse { // Generic case\n\t\t$tmptxt = $object->getLibStatut(6);\n\t\tif (empty($tmptxt) || $tmptxt == $object->getLibStatut(3)) $tmptxt = $object->getLibStatut(5);\n\t\t$morehtmlstatus .= $tmptxt;\n\t}\n\n\t// Add if object was dispatched \"into accountancy\"\n\tif (!empty($conf->accounting->enabled) && in_array($object->element, array('bank', 'facture', 'invoice', 'invoice_supplier', 'expensereport', 'payment_various')))\n\t{\n\t\tif (method_exists($object, 'getVentilExportCompta'))\n\t\t{\n\t\t\t$accounted = $object->getVentilExportCompta();\n\t\t\t$langs->load(\"accountancy\");\n\t\t\t$morehtmlstatus .= '</div><div class=\"statusref statusrefbis\"><span class=\"opacitymedium\">'.($accounted > 0 ? $langs->trans(\"Accounted\") : $langs->trans(\"NotYetAccounted\")).'</span>';\n\t\t}\n\t}\n\n\t// Add alias for thirdparty\n\tif (!empty($object->name_alias)) $morehtmlref .= '<div class=\"refidno\">'.$object->name_alias.'</div>';\n\n\t// Add label\n\tif (in_array($object->element, array('product', 'bank_account', 'project_task')))\n\t{\n\t\tif (!empty($object->label)) $morehtmlref .= '<div class=\"refidno\">'.$object->label.'</div>';\n\t}\n\n\tif (method_exists($object, 'getBannerAddress') && !in_array($object->element, array('product', 'bookmark', 'ecm_directories', 'ecm_files')))\n\t{\n\t\t$moreaddress = $object->getBannerAddress('refaddress', $object);\n\t\tif ($moreaddress) {\n\t\t\t$morehtmlref .= '<div class=\"refidno\">';\n\t\t\t$morehtmlref .= $moreaddress;\n\t\t\t$morehtmlref .= '</div>';\n\t\t}\n\t}\n\tif (!empty($conf->global->MAIN_SHOW_TECHNICAL_ID) && ($conf->global->MAIN_SHOW_TECHNICAL_ID == '1' || preg_match('/'.preg_quote($object->element, '/').'/i', $conf->global->MAIN_SHOW_TECHNICAL_ID)) && !empty($object->id))\n\t{\n\t\t$morehtmlref .= '<div style=\"clear: both;\"></div><div class=\"refidno\">';\n\t\t$morehtmlref .= $langs->trans(\"TechnicalID\").': '.$object->id;\n\t\t$morehtmlref .= '</div>';\n\t}\n\n\tprint '<div class=\"'.($onlybanner ? 'arearefnobottom ' : 'arearef ').'heightref valignmiddle centpercent\">';\n\tprint $form->showrefnav($object, $paramid, $morehtml, $shownav, $fieldid, $fieldref, $morehtmlref, $moreparam, $nodbprefix, $morehtmlleft, $morehtmlstatus, $morehtmlright);\n\tprint '</div>';\n\tprint '<div class=\"underrefbanner clearboth\"></div>';\n}\n\n/**\n * Show a string with the label tag dedicated to the HTML edit field.\n *\n * @param\tstring\t$langkey\t\tTranslation key\n * @param \tstring\t$fieldkey\t\tKey of the html select field the text refers to\n * @param\tint\t\t$fieldrequired\t1=Field is mandatory\n * @return string\n * @deprecated Form::editfieldkey\n */\nfunction fieldLabel($langkey, $fieldkey, $fieldrequired = 0)\n{\n\tglobal $langs;\n\t$ret = '';\n\tif ($fieldrequired) $ret .= '<span class=\"fieldrequired\">';\n\t$ret .= '<label for=\"'.$fieldkey.'\">';\n\t$ret .= $langs->trans($langkey);\n\t$ret .= '</label>';\n\tif ($fieldrequired) $ret .= '</span>';\n\treturn $ret;\n}\n\n/**\n * Return string to add class property on html element with pair/impair.\n *\n * @param\tstring\t$var\t\t\t0 or 1\n * @param\tstring\t$moreclass\t\tMore class to add\n * @return\tstring\t\t\t\t\tString to add class onto HTML element\n */\nfunction dol_bc($var, $moreclass = '')\n{\n\tglobal $bc;\n\t$ret = ' '.$bc[$var];\n\tif ($moreclass) $ret = preg_replace('/class=\\\"/', 'class=\"'.$moreclass.' ', $ret);\n\treturn $ret;\n}\n\n/**\n *      Return a formated address (part address/zip/town/state) according to country rules.\n *      See https://en.wikipedia.org/wiki/Address\n *\n *      @param  Object\t\t$object\t\t\tA company or contact object\n * \t    @param\tint\t\t\t$withcountry\t1=Add country into address string\n *      @param\tstring\t\t$sep\t\t\tSeparator to use to build string\n *      @param\tTranslate\t$outputlangs\tObject lang that contains language for text translation.\n *      @param\tint\t\t\t$mode\t\t\t0=Standard output, 1=Remove address\n *  \t@param\tstring\t\t$extralangcode\tUser extralanguage $langcode as values for address, town\n *      @return string\t\t\t\t\t\tFormated string\n *      @see dol_print_address()\n */\nfunction dol_format_address($object, $withcountry = 0, $sep = \"\\n\", $outputlangs = '', $mode = 0, $extralangcode = '')\n{\n\tglobal $conf, $langs;\n\n\t$ret = '';\n\t$countriesusingstate = array('AU', 'CA', 'US', 'IN', 'GB', 'ES', 'UK', 'TR'); // See also MAIN_FORCE_STATE_INTO_ADDRESS\n\n\t// See format of addresses on https://en.wikipedia.org/wiki/Address\n\t// Address\n\tif (empty($mode)) {\n\t\t$ret .= ($extralangcode ? $object->array_languages['address'][$extralangcode] : $object->address);\n\t}\n\t// Zip/Town/State\n\tif (in_array($object->country_code, array('AU', 'CA', 'US')) || !empty($conf->global->MAIN_FORCE_STATE_INTO_ADDRESS))   \t// US: title firstname name \\n address lines \\n town, state, zip \\n country\n\t{\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($ret ? $sep : '').$town;\n\t\tif ($object->state)\n\t\t{\n\t\t\t$ret .= ($ret ? \", \" : '').$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ($ret ? \", \" : '').$object->zip;\n\t}\n\telseif (in_array($object->country_code, array('GB', 'UK'))) // UK: title firstname name \\n address lines \\n town state \\n zip \\n country\n\t{\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($ret ? $sep : '').$town;\n\t\tif ($object->state)\n\t\t{\n\t\t\t$ret .= ($ret ? \", \" : '').$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ($ret ? $sep : '').$object->zip;\n\t}\n\telseif (in_array($object->country_code, array('ES', 'TR'))) // ES: title firstname name \\n address lines \\n zip town \\n state \\n country\n\t{\n\t\t$ret .= ($ret ? $sep : '').$object->zip;\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($town ? (($object->zip ? ' ' : '').$town) : '');\n\t\tif ($object->state)\n\t\t{\n\t\t\t$ret .= \"\\n\".$object->state;\n\t\t}\n\t}\n\telseif (in_array($object->country_code, array('IT'))) // IT: tile firstname name\\n address lines \\n zip (Code Departement) \\n country\n\t{\n\t\t$ret .= ($ret ? $sep : '').$object->zip;\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($town ? (($object->zip ? ' ' : '').$town) : '');\n\t\t$ret .= ($object->state_code ? (' '.($object->state_code)) : '');\n\t}\n\telse                                        \t\t// Other: title firstname name \\n address lines \\n zip town \\n country\n\t{\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= $object->zip ? (($ret ? $sep : '').$object->zip) : '';\n\t\t$ret .= ($town ? (($object->zip ? ' ' : ($ret ? $sep : '')).$town) : '');\n\t\tif ($object->state && in_array($object->country_code, $countriesusingstate))\n\t\t{\n\t\t\t$ret .= ($ret ? \", \" : '').$object->state;\n\t\t}\n\t}\n\tif (!is_object($outputlangs)) $outputlangs = $langs;\n\tif ($withcountry)\n\t{\n\t\t$langs->load(\"dict\");\n\t\t$ret .= ($object->country_code ? ($ret ? $sep : '').$outputlangs->convToOutputCharset($outputlangs->transnoentitiesnoconv(\"Country\".$object->country_code)) : '');\n\t}\n\n\treturn $ret;\n}\n\n\n\n/**\n *\tFormat a string.\n *\n *\t@param\tstring\t$fmt\t\tFormat of strftime function (http://php.net/manual/fr/function.strftime.php)\n *  @param\tint\t\t$ts\t\t\tTimesamp (If is_gmt is true, timestamp is already includes timezone and daylight saving offset, if is_gmt is false, timestamp is a GMT timestamp and we must compensate with server PHP TZ)\n *  @param\tint\t\t$is_gmt\t\tSee comment of timestamp parameter\n *\t@return\tstring\t\t\t\tA formatted string\n */\nfunction dol_strftime($fmt, $ts = false, $is_gmt = false)\n{\n\tif ((abs($ts) <= 0x7FFFFFFF)) { // check if number in 32-bit signed range\n\t\treturn ($is_gmt) ? @gmstrftime($fmt, $ts) : @strftime($fmt, $ts);\n\t}\n\telse return 'Error date into a not supported range';\n}\n\n/**\n *\tOutput date in a string format according to outputlangs (or langs if not defined).\n * \tReturn charset is always UTF-8, except if encodetoouput is defined. In this case charset is output charset\n *\n *\t@param\tint\t\t\t$time\t\t\tGM Timestamps date\n *\t@param\tstring\t\t$format      \tOutput date format (tag of strftime function)\n *\t\t\t\t\t\t\t\t\t\t\"%d %b %Y\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M:%S\",\n *                                      \"%B\"=Long text of month, \"%A\"=Long text of day, \"%b\"=Short text of month, \"%a\"=Short text of day\n *\t\t\t\t\t\t\t\t\t\t\"day\", \"daytext\", \"dayhour\", \"dayhourldap\", \"dayhourtext\", \"dayrfc\", \"dayhourrfc\", \"...reduceformat\"\n * \t@param\tstring\t\t$tzoutput\t\ttrue or 'gmt' => string is for Greenwich location\n * \t\t\t\t\t\t\t\t\t\tfalse or 'tzserver' => output string is for local PHP server TZ usage\n * \t\t\t\t\t\t\t\t\t\t'tzuser' => output string is for user TZ (current browser TZ with current dst) => In a future, we should have same behaviour than 'tzuserrel'\n *                                      'tzuserrel' => output string is for user TZ (current browser TZ with dst or not, depending on date position) (TODO not implemented yet)\n *\t@param\tTranslate\t$outputlangs\tObject lang that contains language for text translation.\n *  @param  boolean\t\t$encodetooutput false=no convert into output pagecode\n * \t@return string      \t\t\t\tFormated date or '' if time is null\n *\n *  @see        dol_mktime(), dol_stringtotime(), dol_getdate()\n */\nfunction dol_print_date($time, $format = '', $tzoutput = 'tzserver', $outputlangs = '', $encodetooutput = false)\n{\n\tglobal $conf, $langs;\n\n\t// Clean parameters\n\t$to_gmt = false;\n\t$offsettz = $offsetdst = 0;\n\tif ($tzoutput)\n\t{\n\t\t$to_gmt = true; // For backward compatibility\n\t\tif (is_string($tzoutput))\n\t\t{\n\t\t\tif ($tzoutput == 'tzserver')\n\t\t\t{\n\t\t\t\t$to_gmt = false;\n\t\t\t\t$offsettzstring = @date_default_timezone_get(); // Example 'Europe/Berlin' or 'Indian/Reunion'\n\t\t\t\t$offsettz = 0;\n\t\t\t\t$offsetdst = 0;\n\t\t\t}\n\t\t\telseif ($tzoutput == 'tzuser' || $tzoutput == 'tzuserrel')\n\t\t\t{\n\t\t\t\t$to_gmt = true;\n\t\t\t\t$offsettzstring = (empty($_SESSION['dol_tz_string']) ? 'UTC' : $_SESSION['dol_tz_string']); // Example 'Europe/Berlin' or 'Indian/Reunion'\n\t\t\t\t$offsettz = (empty($_SESSION['dol_tz']) ? 0 : $_SESSION['dol_tz']) * 60 * 60; // Will not be used anymore\n\t\t\t\t$offsetdst = (empty($_SESSION['dol_dst']) ? 0 : $_SESSION['dol_dst']) * 60 * 60; // Will not be used anymore\n\t\t\t}\n\t\t}\n\t}\n\tif (!is_object($outputlangs)) $outputlangs = $langs;\n\tif (!$format) $format = 'daytextshort';\n\t$reduceformat = (!empty($conf->dol_optimize_smallscreen) && in_array($format, array('day', 'dayhour'))) ? 1 : 0;\n\t$formatwithoutreduce = preg_replace('/reduceformat/', '', $format);\n\tif ($formatwithoutreduce != $format) { $format = $formatwithoutreduce; $reduceformat = 1; }  // so format 'dayreduceformat' is processed like day\n\n\t// Change predefined format into computer format. If found translation in lang file we use it, otherwise we use default.\n\t// TODO Add format daysmallyear and dayhoursmallyear\n\tif ($format == 'day')\t\t\t\t$format = ($outputlangs->trans(\"FormatDateShort\") != \"FormatDateShort\" ? $outputlangs->trans(\"FormatDateShort\") : $conf->format_date_short);\n\telseif ($format == 'hour')\t\t\t$format = ($outputlangs->trans(\"FormatHourShort\") != \"FormatHourShort\" ? $outputlangs->trans(\"FormatHourShort\") : $conf->format_hour_short);\n\telseif ($format == 'hourduration')\t$format = ($outputlangs->trans(\"FormatHourShortDuration\") != \"FormatHourShortDuration\" ? $outputlangs->trans(\"FormatHourShortDuration\") : $conf->format_hour_short_duration);\n\telseif ($format == 'daytext')\t\t\t $format = ($outputlangs->trans(\"FormatDateText\") != \"FormatDateText\" ? $outputlangs->trans(\"FormatDateText\") : $conf->format_date_text);\n\telseif ($format == 'daytextshort')\t$format = ($outputlangs->trans(\"FormatDateTextShort\") != \"FormatDateTextShort\" ? $outputlangs->trans(\"FormatDateTextShort\") : $conf->format_date_text_short);\n\telseif ($format == 'dayhour')\t\t\t $format = ($outputlangs->trans(\"FormatDateHourShort\") != \"FormatDateHourShort\" ? $outputlangs->trans(\"FormatDateHourShort\") : $conf->format_date_hour_short);\n\telseif ($format == 'dayhoursec')\t\t $format = ($outputlangs->trans(\"FormatDateHourSecShort\") != \"FormatDateHourSecShort\" ? $outputlangs->trans(\"FormatDateHourSecShort\") : $conf->format_date_hour_sec_short);\n\telseif ($format == 'dayhourtext')\t\t $format = ($outputlangs->trans(\"FormatDateHourText\") != \"FormatDateHourText\" ? $outputlangs->trans(\"FormatDateHourText\") : $conf->format_date_hour_text);\n\telseif ($format == 'dayhourtextshort') $format = ($outputlangs->trans(\"FormatDateHourTextShort\") != \"FormatDateHourTextShort\" ? $outputlangs->trans(\"FormatDateHourTextShort\") : $conf->format_date_hour_text_short);\n\t// Format not sensitive to language\n\telseif ($format == 'dayhourlog')\t\t $format = '%Y%m%d%H%M%S';\n\telseif ($format == 'dayhourldap')\t\t $format = '%Y%m%d%H%M%SZ';\n\telseif ($format == 'dayhourxcard')\t$format = '%Y%m%dT%H%M%SZ';\n\telseif ($format == 'dayxcard')\t \t$format = '%Y%m%d';\n\telseif ($format == 'dayrfc')\t\t\t $format = '%Y-%m-%d'; // DATE_RFC3339\n\telseif ($format == 'dayhourrfc')\t\t $format = '%Y-%m-%dT%H:%M:%SZ'; // DATETIME RFC3339\n\telseif ($format == 'standard')\t\t$format = '%Y-%m-%d %H:%M:%S';\n\n\tif ($reduceformat)\n\t{\n\t\t$format = str_replace('%Y', '%y', $format);\n\t\t$format = str_replace('yyyy', 'yy', $format);\n\t}\n\n\t// If date undefined or \"\", we return \"\"\n\tif (dol_strlen($time) == 0) return ''; // $time=0 allowed (it means 01/01/1970 00:00:00)\n\n\t// Clean format\n\tif (preg_match('/%b/i', $format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format = str_replace('%b', '__b__', $format);\n\t\t$format = str_replace('%B', '__B__', $format);\n\t}\n\tif (preg_match('/%a/i', $format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format = str_replace('%a', '__a__', $format);\n\t\t$format = str_replace('%A', '__A__', $format);\n\t}\n\n\n\t// Analyze date\n\t$reg = array();\n\tif (preg_match('/^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])$/i', $time, $reg))\t// Deprecated. Ex: 1970-01-01, 1970-01-01 01:00:00, 19700101010000\n\t{\n\t    dol_print_error(\"Functions.lib::dol_print_date function called with a bad value from page \".$_SERVER[\"PHP_SELF\"]);\n\t    return '';\n\t}\n\telseif (preg_match('/^([0-9]+)\\-([0-9]+)\\-([0-9]+) ?([0-9]+)?:?([0-9]+)?:?([0-9]+)?/i', $time, $reg))    // Still available to solve problems in extrafields of type date\n\t{\n\t    // This part of code should not be used.\n\t    dol_syslog(\"Functions.lib::dol_print_date function called with a bad value from page \".$_SERVER[\"PHP_SELF\"], LOG_WARNING);\n\t    //if (function_exists('debug_print_backtrace')) debug_print_backtrace();\n\t    // Date has format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS'\n\t    $syear\t= (!empty($reg[1]) ? $reg[1] : '');\n\t    $smonth = (!empty($reg[2]) ? $reg[2] : '');\n\t    $sday\t= (!empty($reg[3]) ? $reg[3] : '');\n\t    $shour\t= (!empty($reg[4]) ? $reg[4] : '');\n\t    $smin\t= (!empty($reg[5]) ? $reg[5] : '');\n\t    $ssec\t= (!empty($reg[6]) ? $reg[6] : '');\n\n\t    $time = dol_mktime($shour, $smin, $ssec, $smonth, $sday, $syear, true);\n\t    $ret = adodb_strftime($format, $time + $offsettz + $offsetdst, $to_gmt);\n\t}\n\telse\n\t{\n\t\t// Date is a timestamps\n\t\tif ($time < 100000000000)\t// Protection against bad date values\n\t\t{\n\t\t\t$timetouse = $time + $offsettz + $offsetdst; // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\n\t\t\t$ret = adodb_strftime($format, $timetouse, $to_gmt);\n\t\t}\n\t\telse $ret = 'Bad value '.$time.' for date';\n\t}\n\n\tif (preg_match('/__b__/i', $format))\n\t{\n\t\t$timetouse = $time + $offsettz + $offsetdst; // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\n\t\t// Here ret is string in PHP setup language (strftime was used). Now we convert to $outputlangs.\n\t\t$month = adodb_strftime('%m', $timetouse);\n\t\t$month = sprintf(\"%02d\", $month); // $month may be return with format '06' on some installation and '6' on other, so we force it to '06'.\n\t\tif ($encodetooutput)\n\t\t{\n\t\t\t$monthtext = $outputlangs->transnoentities('Month'.$month);\n\t\t\t$monthtextshort = $outputlangs->transnoentities('MonthShort'.$month);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$monthtext = $outputlangs->transnoentitiesnoconv('Month'.$month);\n\t\t\t$monthtextshort = $outputlangs->transnoentitiesnoconv('MonthShort'.$month);\n\t\t}\n\t\t//print 'monthtext='.$monthtext.' monthtextshort='.$monthtextshort;\n\t\t$ret = str_replace('__b__', $monthtextshort, $ret);\n\t\t$ret = str_replace('__B__', $monthtext, $ret);\n\t\t//print 'x'.$outputlangs->charset_output.'-'.$ret.'x';\n\t\t//return $ret;\n\t}\n\tif (preg_match('/__a__/i', $format))\n\t{\n\t\t$timetouse = $time + $offsettz + $offsetdst; // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\n\t\t$w = adodb_strftime('%w', $timetouse); // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\t\t$dayweek = $outputlangs->transnoentitiesnoconv('Day'.$w);\n\t\t$ret = str_replace('__A__', $dayweek, $ret);\n\t\t$ret = str_replace('__a__', dol_substr($dayweek, 0, 3), $ret);\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n *  Return an array with locale date info.\n *  PHP getdate is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *  WARNING: This function always use PHP server timezone to return locale informations !!!\n *  Usage must be avoid.\n *  FIXME: Replace this with PHP date function and a parameter $gm\n *\n *\t@param\tint\t\t\t$timestamp      Timestamp\n *\t@param\tboolean\t\t$fast           Fast mode\n *\t@return\tarray\t\t\t\t\t\tArray of informations\n *\t\t\t\t\t\t\t\t\t\tIf no fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'wday' => $dow,\t\t0=sunday, 6=saturday\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'weekday' => gmdate('l',$_day_power*(3+$dow)),\n *\t\t\t\t\t\t\t\t\t\t'month' => gmdate('F',mktime(0,0,0,$month,2,1971)),\n *\t\t\t\t\t\t\t\t\t\tIf fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'leap' => $leaf,\n *\t\t\t\t\t\t\t\t\t\t'ndays' => $ndays\n * \t@see \t\t\t\t\t\t\t\tdol_print_date(), dol_stringtotime(), dol_mktime()\n */\nfunction dol_getdate($timestamp, $fast = false)\n{\n\tglobal $conf;\n\n\t$usealternatemethod = false;\n\tif ($timestamp <= 0) $usealternatemethod = true; // <= 1970\n\tif ($timestamp >= 2145913200) $usealternatemethod = true; // >= 2038\n\n\tif ($usealternatemethod)\n\t{\n\t\t$arrayinfo = adodb_getdate($timestamp, $fast);\n\t}\n\telse\n\t{\n\t\t$arrayinfo = getdate($timestamp);\n\t}\n\n\treturn $arrayinfo;\n}\n\n/**\n *\tReturn a timestamp date built from detailed informations (by default a local PHP server timestamp)\n * \tReplace function mktime not available under Windows if year < 1970\n *\tPHP mktime is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *\n * \t@param\tint\t\t\t$hour\t\t\tHour\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$minute\t\t\tMinute\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$second\t\t\tSecond\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$month\t\t\tMonth (1 to 12)\n *\t@param\tint\t\t\t$day\t\t\tDay (1 to 31)\n *\t@param\tint\t\t\t$year\t\t\tYear\n *\t@param\tmixed\t\t$gm\t\t\t\tTrue or 1 or 'gmt'=Input informations are GMT values\n *\t\t\t\t\t\t\t\t\t\tFalse or 0 or 'server' = local to server TZ\n *\t\t\t\t\t\t\t\t\t\t'user' = local to user TZ\n *\t\t\t\t\t\t\t\t\t\t'tz,TimeZone' = use specified timezone\n *\t@param\tint\t\t\t$check\t\t\t0=No check on parameters (Can use day 32, etc...)\n *\t@return\tint|string\t\t\t\t\tDate as a timestamp, '' or false if error\n * \t@see \t\t\t\t\t\t\t\tdol_print_date(), dol_stringtotime(), dol_getdate()\n */\nfunction dol_mktime($hour, $minute, $second, $month, $day, $year, $gm = false, $check = 1)\n{\n\tglobal $conf;\n\t//print \"- \".$hour.\",\".$minute.\",\".$second.\",\".$month.\",\".$day.\",\".$year.\",\".$_SERVER[\"WINDIR\"].\" -\";\n\n\t// Clean parameters\n\tif ($hour == -1 || empty($hour)) $hour = 0;\n\tif ($minute == -1 || empty($minute)) $minute = 0;\n\tif ($second == -1 || empty($second)) $second = 0;\n\n\t// Check parameters\n\tif ($check)\n\t{\n\t\tif (!$month || !$day)  return '';\n\t\tif ($day > 31) return '';\n\t\tif ($month > 12) return '';\n\t\tif ($hour < 0 || $hour > 24) return '';\n\t\tif ($minute < 0 || $minute > 60) return '';\n\t\tif ($second < 0 || $second > 60) return '';\n\t}\n\n\tif (empty($gm) || $gm === 'server')\n\t{\n\t\t$default_timezone = @date_default_timezone_get(); // Example 'Europe/Berlin'\n\t\t$localtz = new DateTimeZone($default_timezone);\n\t}\n\telseif ($gm === 'user')\n\t{\n\t\t// We use dol_tz_string first because it is more reliable.\n\t\t$default_timezone = (empty($_SESSION[\"dol_tz_string\"]) ? @date_default_timezone_get() : $_SESSION[\"dol_tz_string\"]); // Example 'Europe/Berlin'\n\t\ttry {\n\t\t\t$localtz = new DateTimeZone($default_timezone);\n\t\t}\n\t\tcatch (Exception $e)\n\t\t{\n\t\t\tdol_syslog(\"Warning dol_tz_string contains an invalid value \".$_SESSION[\"dol_tz_string\"], LOG_WARNING);\n\t\t\t$default_timezone = @date_default_timezone_get();\n\t\t}\n\t}\n\telseif (strrpos($gm, \"tz,\") !== false)\n\t{\n\t\t$timezone = str_replace(\"tz,\", \"\", $gm); // Example 'tz,Europe/Berlin'\n\t\ttry\n\t\t{\n\t\t\t$localtz = new DateTimeZone($timezone);\n\t\t}\n\t\tcatch (Exception $e)\n\t\t{\n\t\t\tdol_syslog(\"Warning passed timezone contains an invalid value \".$timezone, LOG_WARNING);\n\t\t}\n\t}\n\n\tif (empty($localtz)) {\n\t\t$localtz = new DateTimeZone('UTC');\n\t}\n\t//var_dump($localtz);\n\t//var_dump($year.'-'.$month.'-'.$day.'-'.$hour.'-'.$minute);\n\t$dt = new DateTime(null, $localtz);\n\t$dt->setDate((int) $year, (int) $month, (int) $day);\n\t$dt->setTime((int) $hour, (int) $minute, (int) $second);\n\t$date = $dt->getTimestamp(); // should include daylight saving time\n\t//var_dump($date);\n\treturn $date;\n}\n\n\n/**\n *  Return date for now. In most cases, we use this function without parameters (that means GMT time).\n *\n *  @param\tstring\t\t$mode\t'gmt' => we return GMT timestamp,\n * \t\t\t\t\t\t\t\t'tzserver' => we add the PHP server timezone\n *  \t\t\t\t\t\t\t'tzref' => we add the company timezone\n * \t\t\t\t\t\t\t\t'tzuser' => we add the user timezone\n *\t@return int   $date\tTimestamp\n */\nfunction dol_now($mode = 'gmt')\n{\n\t$ret = 0;\n\n\tif ($mode == 'gmt') $ret = time(); // Time for now at greenwich.\n\telseif ($mode == 'tzserver')\t\t// Time for now with PHP server timezone added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond = getServerTimeZoneInt('now'); // Contains tz+dayling saving time\n\t\t$ret = (int) (dol_now('gmt') + ($tzsecond * 3600));\n\t}\n\t/*elseif ($mode == 'tzref')\t\t\t\t// Time for now with parent company timezone is added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond=getParentCompanyTimeZoneInt();    // Contains tz+dayling saving time\n\t\t$ret=dol_now('gmt')+($tzsecond*3600);\n\t}*/\n\telseif ($mode == 'tzuser')\t\t\t\t// Time for now with user timezone added\n\t{\n\t\t//print 'time: '.time();\n\t\t$offsettz = (empty($_SESSION['dol_tz']) ? 0 : $_SESSION['dol_tz']) * 60 * 60;\n\t\t$offsetdst = (empty($_SESSION['dol_dst']) ? 0 : $_SESSION['dol_dst']) * 60 * 60;\n\t\t$ret = (int) (dol_now('gmt') + ($offsettz + $offsetdst));\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n * Return string with formated size\n *\n * @param\tint\t\t$size\t\tSize to print\n * @param\tint\t\t$shortvalue\tTell if we want long value to use another unit (Ex: 1.5Kb instead of 1500b)\n * @param\tint\t\t$shortunit\tUse short label of size unit (for example 'b' instead of 'bytes')\n * @return\tstring\t\t\t\tLink\n */\nfunction dol_print_size($size, $shortvalue = 0, $shortunit = 0)\n{\n\tglobal $conf, $langs;\n\t$level = 1024;\n\n\tif (!empty($conf->dol_optimize_smallscreen)) $shortunit = 1;\n\n\t// Set value text\n\tif (empty($shortvalue) || $size < ($level * 10))\n\t{\n\t\t$ret = $size;\n\t\t$textunitshort = $langs->trans(\"b\");\n\t\t$textunitlong = $langs->trans(\"Bytes\");\n\t}\n\telse\n\t{\n\t\t$ret = round($size / $level, 0);\n\t\t$textunitshort = $langs->trans(\"Kb\");\n\t\t$textunitlong = $langs->trans(\"KiloBytes\");\n\t}\n\t// Use long or short text unit\n\tif (empty($shortunit)) { $ret .= ' '.$textunitlong; }\n\telse { $ret .= ' '.$textunitshort; }\n\n\treturn $ret;\n}\n\n/**\n * Show Url link\n *\n * @param\tstring\t\t$url\t\tUrl to show\n * @param\tstring\t\t$target\t\tTarget for link\n * @param\tint\t\t\t$max\t\tMax number of characters to show\n * @param\tint\t\t\t$withpicto\tWith picto\n * @return\tstring\t\t\t\t\tHTML Link\n */\nfunction dol_print_url($url, $target = '_blank', $max = 32, $withpicto = 0)\n{\n\tglobal $langs;\n\n\tif (empty($url)) return '';\n\n\t$link = '<a href=\"';\n\tif (!preg_match('/^http/i', $url)) $link .= 'http://';\n\t$link .= $url;\n\t$link .= '\"';\n\tif ($target) $link .= ' target=\"'.$target.'\"';\n\t$link .= '>';\n\tif (!preg_match('/^http/i', $url)) $link .= 'http://';\n\t$link .= dol_trunc($url, $max);\n\t$link .= '</a>';\n\treturn '<div class=\"nospan float\" style=\"margin-right: 10px\">'.($withpicto ?img_picto($langs->trans(\"Url\"), 'globe').' ' : '').$link.'</div>';\n}\n\n/**\n * Show EMail link\n *\n * @param\tstring\t\t$email\t\t\tEMail to show (only email, without 'Name of recipient' before)\n * @param \tint\t\t\t$cid \t\t\tId of contact if known\n * @param \tint\t\t\t$socid \t\t\tId of third party if known\n * @param \tint\t\t\t$addlink\t\t0=no link, 1=email has a html email link (+ link to create action if constant AGENDA_ADDACTIONFOREMAIL is on)\n * @param\tint\t\t\t$max\t\t\tMax number of characters to show\n * @param\tint\t\t\t$showinvalid\t1=Show warning if syntax email is wrong\n * @param\tint\t\t\t$withpicto\t\tShow picto\n * @return\tstring\t\t\t\t\t\tHTML Link\n */\nfunction dol_print_email($email, $cid = 0, $socid = 0, $addlink = 0, $max = 64, $showinvalid = 1, $withpicto = 0)\n{\n\tglobal $conf, $user, $langs, $hookmanager;\n\n\t$newemail = $email;\n\n\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && $withpicto) $withpicto = 0;\n\n\tif (empty($email)) return '&nbsp;';\n\n\tif (!empty($addlink))\n\t{\n\t\t$newemail = '<a style=\"text-overflow: ellipsis;\" href=\"';\n\t\tif (!preg_match('/^mailto:/i', $email)) $newemail .= 'mailto:';\n\t\t$newemail .= $email;\n\t\t$newemail .= '\">';\n\t\t$newemail .= dol_trunc($email, $max);\n\t\t$newemail .= '</a>';\n\t\tif ($showinvalid && !isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail .= img_warning($langs->trans(\"ErrorBadEMail\", $email));\n\t\t}\n\n\t\tif (($cid || $socid) && !empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type = 'AC_EMAIL'; $link = '';\n\t\t\tif (!empty($conf->global->AGENDA_ADDACTIONFOREMAIL)) $link = '<a href=\"'.DOL_URL_ROOT.'/comm/action/card.php?action=create&amp;backtopage=1&amp;actioncode='.$type.'&amp;contactid='.$cid.'&amp;socid='.$socid.'\">'.img_object($langs->trans(\"AddAction\"), \"calendar\").'</a>';\n\t\t\tif ($link) $newemail = '<div>'.$newemail.' '.$link.'</div>';\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($showinvalid && !isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail .= img_warning($langs->trans(\"ErrorBadEMail\", $email));\n\t\t}\n\t}\n\n\t//$rep = '<div class=\"nospan\" style=\"margin-right: 10px\">';\n\t$rep = ($withpicto ? img_picto($langs->trans(\"EMail\").' : '.$email, 'object_email.png').' ' : '').$newemail;\n\t//$rep .= '</div>';\n\tif ($hookmanager) {\n\t\t$parameters = array('cid' => $cid, 'socid' => $socid, 'addlink' => $addlink, 'picto' => $withpicto);\n\t\t$reshook = $hookmanager->executeHooks('printEmail', $parameters, $email);\n\t\tif ($reshook > 0) {\n\t\t\t$rep = '';\n\t\t}\n\t\t$rep .= $hookmanager->resPrint;\n\t}\n\n\treturn $rep;\n}\n\n/**\n * Get array of social network dictionary\n *\n * @return  array       Array of Social Networks Dictionary\n */\nfunction getArrayOfSocialNetworks()\n{\n    global $conf, $db;\n    $sql = \"SELECT rowid, code, label, url, icon, active FROM \".MAIN_DB_PREFIX.\"c_socialnetworks\";\n    $sql .= \" WHERE entity=\".$conf->entity;\n    $socialnetworks = array();\n    $resql = $db->query($sql);\n    if ($resql) {\n        while ($obj = $db->fetch_object($resql)) {\n            $socialnetworks[$obj->code] = array(\n                'rowid' => $obj->rowid,\n                'label' => $obj->label,\n                'url' => $obj->url,\n                'icon' => $obj->icon,\n                'active' => $obj->active,\n            );\n        }\n    }\n    return $socialnetworks;\n}\n\n/**\n * Show social network link\n *\n * @param\tstring\t\t$value\t\t\tSkype to show (only skype, without 'Name of recipient' before)\n * @param\tint \t\t$cid \t\t\tId of contact if known\n * @param\tint \t\t$socid \t\t\tId of third party if known\n * @param\tstring \t\t$type\t\t\t'skype','facebook',...\n * @return\tstring\t\t\t\t\t\tHTML Link\n */\nfunction dol_print_socialnetworks($value, $cid, $socid, $type)\n{\n\tglobal $conf, $user, $langs;\n\n\t$htmllink = $value;\n\n\tif (empty($value)) return '&nbsp;';\n\n\tif (!empty($type))\n\t{\n\t\t$htmllink = '<div class=\"divsocialnetwork inline-block valignmiddle\">';\n\t\t$htmllink .= img_picto($langs->trans(strtoupper($type)), $type.'.png', '', false, 0, 0, '', 'paddingright', 0);\n\t\t$htmllink .= $value;\n\t\tif ($type == 'skype')\n\t\t{\n\t\t\t$htmllink .= '&nbsp;';\n\t\t\t$htmllink .= '<a href=\"skype:';\n\t\t\t$htmllink .= $value;\n\t\t\t$htmllink .= '?call\" alt=\"'.$langs->trans(\"Call\").'&nbsp;'.$value.'\" title=\"'.$langs->trans(\"Call\").'&nbsp;'.$value.'\">';\n\t\t\t$htmllink .= '<img src=\"'.DOL_URL_ROOT.'/theme/common/skype_callbutton.png\" border=\"0\">';\n\t\t\t$htmllink .= '</a><a href=\"skype:';\n\t\t\t$htmllink .= $value;\n\t\t\t$htmllink .= '?chat\" alt=\"'.$langs->trans(\"Chat\").'&nbsp;'.$value.'\" title=\"'.$langs->trans(\"Chat\").'&nbsp;'.$value.'\">';\n\t\t\t$htmllink .= '<img class=\"paddingleft\" src=\"'.DOL_URL_ROOT.'/theme/common/skype_chatbutton.png\" border=\"0\">';\n\t\t\t$htmllink .= '</a>';\n\t\t}\n\t\tif (($cid || $socid) && !empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create && $type == 'skype')\n\t\t{\n\t\t\t$addlink = 'AC_SKYPE';\n\t\t\t$link = '';\n\t\t\tif (!empty($conf->global->AGENDA_ADDACTIONFORSKYPE)) $link = '<a href=\"'.DOL_URL_ROOT.'/comm/action/card.php?action=create&amp;backtopage=1&amp;actioncode='.$addlink.'&amp;contactid='.$cid.'&amp;socid='.$socid.'\">'.img_object($langs->trans(\"AddAction\"), \"calendar\").'</a>';\n\t\t\t$htmllink .= ($link ? ' '.$link : '');\n\t\t}\n\t\t$htmllink .= '</div>';\n\t}\n\telse\n\t{\n\t\t$langs->load(\"errors\");\n\t\t$htmllink .= img_warning($langs->trans(\"ErrorBadSocialNetworkValue\", $value));\n\t}\n\treturn $htmllink;\n}\n\n/**\n * \tFormat phone numbers according to country\n *\n * \t@param  string  $phone          Phone number to format\n * \t@param  string  $countrycode    Country code to use for formatting\n * \t@param \tint\t\t$cid \t\t    Id of contact if known\n * \t@param \tint\t\t$socid          Id of third party if known\n * \t@param \tstring\t$addlink\t    ''=no link to create action, 'AC_TEL'=add link to clicktodial (if module enabled) and add link to create event (if conf->global->AGENDA_ADDACTIONFORPHONE set)\n * \t@param \tstring\t$separ \t\t    Separation between numbers for a better visibility example : xx.xx.xx.xx.xx\n *  @param\tstring  $withpicto      Show picto\n *  @param\tstring\t$titlealt\t    Text to show on alt\n *  @param  int     $adddivfloat    Add div float around phone.\n * \t@return string \t\t\t\t    Formated phone number\n */\nfunction dol_print_phone($phone, $countrycode = '', $cid = 0, $socid = 0, $addlink = '', $separ = \"&nbsp;\", $withpicto = '', $titlealt = '', $adddivfloat = 0)\n{\n\tglobal $conf, $user, $langs, $mysoc, $hookmanager;\n\n\t// Clean phone parameter\n\t$phone = preg_replace(\"/[\\s.-]/\", \"\", trim($phone));\n\tif (empty($phone)) { return ''; }\n\tif ($conf->global->MAIN_PHONE_SEPAR) $separ = $conf->global->MAIN_PHONE_SEPAR;\n\tif (empty($countrycode)) $countrycode = $mysoc->country_code;\n\n\t// Short format for small screens\n\tif ($conf->dol_optimize_smallscreen) $separ = '';\n\n\t$newphone = $phone;\n\tif (strtoupper($countrycode) == \"FR\")\n\t{\n\t\t// France\n\t\tif (dol_strlen($phone) == 10) {\n\t\t\t$newphone = substr($newphone, 0, 2).$separ.substr($newphone, 2, 2).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 7)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 9)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 2).$separ.substr($newphone, 2, 3).$separ.substr($newphone, 5, 2).$separ.substr($newphone, 7, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 11)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 2).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\n\telseif (strtoupper($countrycode) == \"CA\")\n\t{\n\t\tif (dol_strlen($phone) == 10) {\n\t\t\t$newphone = ($separ != '' ? '(' : '').substr($newphone, 0, 3).($separ != '' ? ')' : '').$separ.substr($newphone, 3, 3).($separ != '' ? '-' : '').substr($newphone, 6, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"PT\")\n\t{//Portugal\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +351_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"SR\")\n\t{//Suriname\n\t\tif (dol_strlen($phone) == 10)\n\t\t{//ex: +597_ABC_DEF\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 11)\n\t\t{//ex: +597_ABC_DEFG\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"DE\")\n\t{//Allemagne\n\t\tif (dol_strlen($phone) == 14)\n\t\t{//ex:  +49_ABCD_EFGH_IJK\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 4).$separ.substr($newphone, 7, 4).$separ.substr($newphone, 11, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +49_ABC_DEFG_HIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 4).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"ES\")\n\t{//Espagne\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex:  +34_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"BF\")\n\t{// Burkina Faso\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex :  +22 A BC_DE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 1).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"RO\")\n\t{// Roumanie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex :  +40 AB_CDE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"TR\")\n\t{//Turquie\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex :  +90 ABC_DEF_GHIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"US\")\n\t{//Etat-Unis\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +1 ABC_DEF_GHIJ\n\t\t\t$newphone = substr($newphone, 0, 2).$separ.substr($newphone, 2, 3).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MX\")\n\t{//Mexique\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +52 ABCD_EFG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 4).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 11)\n\t\t{//ex: +52 AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 2).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +52 ABC_DEF_GHIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"ML\")\n\t{//Mali\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +223 AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"TH\")\n\t{//Tha\u00eflande\n\t\tif (dol_strlen($phone) == 11)\n\t\t{//ex: +66_ABC_DE_FGH\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{//ex: +66_A_BCD_EF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 1).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MU\")\n\t{\n        //Maurice\n\t\tif (dol_strlen($phone) == 11)\n\t\t{//ex: +230_ABC_DE_FG\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{//ex: +230_ABCD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 4).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"ZA\")\n\t{//Afrique du sud\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +27_AB_CDE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"SY\")\n\t{//Syrie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +963_AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +963_AB_CD_EF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"AE\")\n\t{//Emirats Arabes Unis\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +971_ABC_DEF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +971_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 14)\n\t\t{//ex: +971_ABC_DEF_GHIK\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"DZ\")\n\t{//Alg\u00e9rie\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +213_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"BE\")\n\t{//Belgique\n\t\tif (dol_strlen($phone) == 11)\n\t\t{//ex: +32_ABC_DE_FGH\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{//ex: +32_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"PF\")\n\t{//Polyn\u00e9sie fran\u00e7aise\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +689_AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"CO\")\n\t{//Colombie\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +57_ABC_DEF_GH_IJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"JO\")\n\t{//Jordanie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +962_A_BCD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 1).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"JM\")\n\t{//Jama\u00efque\n\t\tif (dol_strlen($newphone) == 12)\n\t\t{//ex: +1867_ABC_DEFG\n\t\t\t$newphone = substr($newphone, 0, 5).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MG\")\n\t{//Madagascar\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +261_AB_CD_EF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"GB\")\n\t{//Royaume uni\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +44_ABCD_EFG_HIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 4).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"CH\")\n\t{//Suisse\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +41_AB_CDE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 15)\n\t\t{// +41_AB_CDE_FGH_IJKL\n\t\t\t$newphone = $newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 3).$separ.substr($newphone, 11, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"TN\")\n\t{//Tunisie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +216_AB_CDE_FGH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"GF\")\n\t{//Guyane francaise\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +594_ABC_DE_FG_HI  (ABC=594 de nouveau)\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"GP\")\n\t{//Guadeloupe\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +590_ABC_DE_FG_HI  (ABC=590 de nouveau)\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MQ\")\n\t{//Martinique\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +596_ABC_DE_FG_HI  (ABC=596 de nouveau)\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"IT\")\n\t{//Italie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +39_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +39_ABC_DEF_GH_IJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"AU\")\n\t{\n        //Australie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{\n            //ex: +61_A_BCDE_FGHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 1).$separ.substr($newphone, 4, 4).$separ.substr($newphone, 8, 4);\n\t\t}\n\t}\n\tif (!empty($addlink))\t// Link on phone number (+ link to add action if conf->global->AGENDA_ADDACTIONFORPHONE set)\n\t{\n\t\tif ($conf->browser->layout == 'phone' || (!empty($conf->clicktodial->enabled) && !empty($conf->global->CLICKTODIAL_USE_TEL_LINK_ON_PHONE_NUMBERS)))\t// If phone or option for, we use link of phone\n\t\t{\n\t\t\t$newphoneform = $newphone;\n\t\t\t$newphone = '<a href=\"tel:'.$phone.'\"';\n\t\t\t$newphone .= '>'.$newphoneform.'</a>';\n\t\t}\n\t\telseif (!empty($conf->clicktodial->enabled) && $addlink == 'AC_TEL')\t\t// If click to dial, we use click to dial url\n\t\t{\n\t\t\tif (empty($user->clicktodial_loaded)) $user->fetch_clicktodial();\n\n\t\t\t// Define urlmask\n\t\t\t$urlmask = 'ErrorClickToDialModuleNotConfigured';\n\t\t\tif (!empty($conf->global->CLICKTODIAL_URL)) $urlmask = $conf->global->CLICKTODIAL_URL;\n\t\t\tif (!empty($user->clicktodial_url)) $urlmask = $user->clicktodial_url;\n\n\t\t\t$clicktodial_poste = (!empty($user->clicktodial_poste) ?urlencode($user->clicktodial_poste) : '');\n\t\t\t$clicktodial_login = (!empty($user->clicktodial_login) ?urlencode($user->clicktodial_login) : '');\n\t\t\t$clicktodial_password = (!empty($user->clicktodial_password) ?urlencode($user->clicktodial_password) : '');\n\t\t\t// This line is for backward compatibility\n\t\t\t$url = sprintf($urlmask, urlencode($phone), $clicktodial_poste, $clicktodial_login, $clicktodial_password);\n\t\t\t// Thoose lines are for substitution\n\t\t\t$substitarray = array('__PHONEFROM__'=>$clicktodial_poste,\n\t\t\t\t\t\t\t\t'__PHONETO__'=>urlencode($phone),\n\t\t\t\t\t\t\t\t'__LOGIN__'=>$clicktodial_login,\n\t\t\t\t\t\t\t\t'__PASS__'=>$clicktodial_password);\n\t\t\t$url = make_substitutions($url, $substitarray);\n\t\t\t$newphonesav = $newphone;\n\t\t\t$newphone = '<a href=\"'.$url.'\"';\n\t\t\tif (!empty($conf->global->CLICKTODIAL_FORCENEWTARGET)) $newphone .= ' target=\"_blank\"';\n\t\t\t$newphone .= '>'.$newphonesav.'</a>';\n\t\t}\n\n\t\t//if (($cid || $socid) && ! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\tif (!empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type = 'AC_TEL'; $link = '';\n\t\t\tif ($addlink == 'AC_FAX') $type = 'AC_FAX';\n\t\t\tif (!empty($conf->global->AGENDA_ADDACTIONFORPHONE)) $link = '<a href=\"'.DOL_URL_ROOT.'/comm/action/card.php?action=create&amp;backtopage=1&amp;actioncode='.$type.($cid ? '&amp;contactid='.$cid : '').($socid ? '&amp;socid='.$socid : '').'\">'.img_object($langs->trans(\"AddAction\"), \"calendar\").'</a>';\n\t\t\tif ($link) $newphone = '<div>'.$newphone.' '.$link.'</div>';\n\t\t}\n\t}\n\n\tif (empty($titlealt))\n\t{\n\t\t$titlealt = ($withpicto == 'fax' ? $langs->trans(\"Fax\") : $langs->trans(\"Phone\"));\n\t}\n\t$rep = '';\n\n\tif ($hookmanager) {\n\t\t$parameters = array('countrycode' => $countrycode, 'cid' => $cid, 'socid' => $socid, 'titlealt' => $titlealt, 'picto' => $withpicto);\n\t\t$reshook = $hookmanager->executeHooks('printPhone', $parameters, $phone);\n\t\t$rep .= $hookmanager->resPrint;\n\t}\n\tif (empty($reshook))\n\t{\n\t\t$picto = '';\n\t\tif ($withpicto) {\n\t\t\tif ($withpicto == 'fax') {\n\t\t\t\t$picto = 'phoning_fax';\n\t\t\t}elseif ($withpicto == 'phone') {\n\t\t\t\t$picto = 'phoning';\n\t\t\t}elseif ($withpicto == 'mobile') {\n\t\t\t\t$picto = 'phoning_mobile';\n\t\t\t} else {\n\t\t\t\t$picto = '';\n\t\t\t}\n\t\t}\n\t\tif ($adddivfloat) $rep .= '<div class=\"nospan float\" style=\"margin-right: 10px\">';\n\t\telse $rep .= '<span style=\"margin-right: 10px;\">';\n\t\t$rep .= ($withpicto ?img_picto($titlealt, 'object_'.$picto.'.png').' ' : '').$newphone;\n\t\tif ($adddivfloat) $rep .= '</div>';\n\t\telse $rep .= '</span>';\n\t}\n\n\treturn $rep;\n}\n\n/**\n * \tReturn an IP formated to be shown on screen\n *\n * \t@param\tstring\t$ip\t\t\tIP\n * \t@param\tint\t\t$mode\t\t0=return IP + country/flag, 1=return only country/flag, 2=return only IP\n * \t@return string \t\t\t\tFormated IP, with country if GeoIP module is enabled\n */\nfunction dol_print_ip($ip, $mode = 0)\n{\n\tglobal $conf, $langs;\n\n\t$ret = '';\n\n\tif (empty($mode)) $ret .= $ip;\n\n\tif ($mode != 2)\n\t{\n\t\t$countrycode = dolGetCountryCodeFromIp($ip);\n\t\tif ($countrycode)\t// If success, countrycode is us, fr, ...\n\t\t{\n\t\t\tif (file_exists(DOL_DOCUMENT_ROOT.'/theme/common/flags/'.$countrycode.'.png'))\n\t\t\t{\n\t\t\t\t$ret .= ' '.img_picto($countrycode.' '.$langs->trans(\"AccordingToGeoIPDatabase\"), DOL_URL_ROOT.'/theme/common/flags/'.$countrycode.'.png', '', 1);\n\t\t\t}\n\t\t\telse $ret .= ' ('.$countrycode.')';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nothing\n\t\t}\n\t}\n\n\treturn $ret;\n}\n\n/**\n * Return the IP of remote user.\n * Take HTTP_X_FORWARDED_FOR (defined when using proxy)\n * Then HTTP_CLIENT_IP if defined (rare)\n * Then REMOTE_ADDR (no way to be modified by user but may be wrong if user is using a proxy)\n *\n * @return\tstring\t\tIp of remote user.\n */\nfunction getUserRemoteIP()\n{\n\t$ip = empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? (empty($_SERVER['HTTP_CLIENT_IP']) ? (empty($_SERVER['REMOTE_ADDR']) ? '' : $_SERVER['REMOTE_ADDR']) : $_SERVER['HTTP_CLIENT_IP']) : $_SERVER['HTTP_X_FORWARDED_FOR'];\n\treturn $ip;\n}\n\n/**\n * \tReturn a country code from IP. Empty string if not found.\n *\n * \t@param\tstring\t$ip\t\t\tIP\n * \t@return string \t\t\t\tCountry code ('us', 'fr', ...)\n */\nfunction dolGetCountryCodeFromIp($ip)\n{\n\tglobal $conf;\n\n\t$countrycode = '';\n\n\tif (!empty($conf->geoipmaxmind->enabled))\n\t{\n\t\t$datafile = $conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='/usr/share/GeoIP/GeoIP.dat';    Note that this must be downloaded datafile (not same than datafile provided with ubuntu packages)\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip = new DolGeoIP('country', $datafile);\n\t\t//print 'ip='.$ip.' databaseType='.$geoip->gi->databaseType.\" GEOIP_CITY_EDITION_REV1=\".GEOIP_CITY_EDITION_REV1.\"\\n\";\n\t\t$countrycode = $geoip->getCountryCodeFromIP($ip);\n\t}\n\n\treturn $countrycode;\n}\n\n\n/**\n *  Return country code for current user.\n *  If software is used inside a local network, detection may fails (we need a public ip)\n *\n *  @return     string      Country code (fr, es, it, us, ...)\n */\nfunction dol_user_country()\n{\n\tglobal $conf, $langs, $user;\n\n\t//$ret=$user->xxx;\n\t$ret = '';\n\tif (!empty($conf->geoipmaxmind->enabled))\n\t{\n\t\t$ip = getUserRemoteIP();\n\t\t$datafile = $conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='E:\\Mes Sites\\Web\\Admin1\\awstats\\maxmind\\GeoIP.dat';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip = new DolGeoIP('country', $datafile);\n\t\t$countrycode = $geoip->getCountryCodeFromIP($ip);\n\t\t$ret = $countrycode;\n\t}\n\treturn $ret;\n}\n\n/**\n *  Format address string\n *\n *  @param\tstring\t$address    Address string, already formatted with dol_format_address()\n *  @param  int\t\t$htmlid     Html ID (for example 'gmap')\n *  @param  int\t\t$element    'thirdparty'|'contact'|'member'|'other'\n *  @param  int\t\t$id         Id of object\n *  @param\tint\t\t$noprint\tNo output. Result is the function return\n *  @param  string  $charfornl  Char to use instead of nl2br. '' means we use a standad nl2br.\n *  @return string|void\t\t\tNothing if noprint is 0, formatted address if noprint is 1\n *  @see dol_format_address()\n */\nfunction dol_print_address($address, $htmlid, $element, $id, $noprint = 0, $charfornl = '')\n{\n\tglobal $conf, $user, $langs, $hookmanager;\n\n\t$out = '';\n\n\tif ($address)\n\t{\n\t\tif ($hookmanager) {\n\t\t\t$parameters = array('element' => $element, 'id' => $id);\n\t\t\t$reshook = $hookmanager->executeHooks('printAddress', $parameters, $address);\n\t\t\t$out .= $hookmanager->resPrint;\n\t\t}\n\t\tif (empty($reshook))\n\t\t{\n\t\t\tif (empty($charfornl)) $out .= nl2br($address);\n\t\t\telse $out .= preg_replace('/[\\r\\n]+/', $charfornl, $address);\n\n\t\t\t// TODO Remove this block, we can add this using the hook now\n\t\t\t$showgmap = $showomap = 0;\n\t\t\tif (($element == 'thirdparty' || $element == 'societe') && !empty($conf->google->enabled) && !empty($conf->global->GOOGLE_ENABLE_GMAPS)) $showgmap = 1;\n\t\t\tif ($element == 'contact' && !empty($conf->google->enabled) && !empty($conf->global->GOOGLE_ENABLE_GMAPS_CONTACTS)) $showgmap = 1;\n\t\t\tif ($element == 'member' && !empty($conf->google->enabled) && !empty($conf->global->GOOGLE_ENABLE_GMAPS_MEMBERS)) $showgmap = 1;\n\t\t\tif (($element == 'thirdparty' || $element == 'societe') && !empty($conf->openstreetmap->enabled) && !empty($conf->global->OPENSTREETMAP_ENABLE_MAPS)) $showomap = 1;\n\t\t\tif ($element == 'contact' && !empty($conf->openstreetmap->enabled) && !empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_CONTACTS)) $showomap = 1;\n\t\t\tif ($element == 'member' && !empty($conf->openstreetmap->enabled) && !empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_MEMBERS)) $showomap = 1;\n\t\t\tif ($showgmap)\n\t\t\t{\n\t\t\t\t$url = dol_buildpath('/google/gmaps.php?mode='.$element.'&id='.$id, 1);\n\t\t\t\t$out .= ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'\" class=\"valigntextbottom\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t\t}\n\t\t\tif ($showomap)\n\t\t\t{\n\t\t\t\t$url = dol_buildpath('/openstreetmap/maps.php?mode='.$element.'&id='.$id, 1);\n\t\t\t\t$out .= ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'_openstreetmap\" class=\"valigntextbottom\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t\t}\n\t\t}\n\t}\n\tif ($noprint) return $out;\n\telse print $out;\n}\n\n\n/**\n *\tReturn true if email syntax is ok\n *\n *\t@param\t    string\t\t$address    \t\t\temail (Ex: \"toto@examle.com\", \"John Do <johndo@example.com>\")\n *  @param\t\tint\t\t\t$acceptsupervisorkey\tIf 1, the special string '__SUPERVISOREMAIL__' is also accepted as valid\n *\t@return     boolean     \t\t\t\t\t\ttrue if email syntax is OK, false if KO or empty string\n */\nfunction isValidEmail($address, $acceptsupervisorkey = 0)\n{\n\tif ($acceptsupervisorkey && $address == '__SUPERVISOREMAIL__') return true;\n\tif (filter_var($address, FILTER_VALIDATE_EMAIL)) return true;\n\n\treturn false;\n}\n\n/**\n *\tReturn if the domain name has a valid MX record.\n *  WARNING: This need function idn_to_ascii, checkdnsrr and getmxrr\n *\n *\t@param\t    string\t\t$domain\t    \t\t\tDomain name (Ex: \"yahoo.com\", \"yhaoo.com\", \"dolibarr.fr\")\n *\t@return     int     \t\t\t\t\t\t\t-1 if error (function not available), 0=Not valid, 1=Valid\n */\nfunction isValidMXRecord($domain)\n{\n\tif (function_exists('idn_to_ascii') && function_exists('checkdnsrr'))\n\t{\n\t\tif (!checkdnsrr(idn_to_ascii($domain), 'MX'))\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tif (function_exists('getmxrr'))\n\t\t{\n\t\t\t$mxhosts = array();\n\t\t\t$weight = array();\n\t\t\tgetmxrr(idn_to_ascii($domain), $mxhosts, $weight);\n\t\t\tif (count($mxhosts) > 1) return 1;\n\t\t\tif (count($mxhosts) == 1 && !empty($mxhosts[0])) return 1;\n\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n *  Return true if phone number syntax is ok\n *  TODO Decide what to do with this\n *\n *  @param\tstring\t\t$phone\t\tphone (Ex: \"0601010101\")\n *  @return boolean     \t\t\ttrue if phone syntax is OK, false if KO or empty string\n */\nfunction isValidPhone($phone)\n{\n\treturn true;\n}\n\n\n/**\n * Make a strlen call. Works even if mbstring module not enabled\n *\n * @param   string\t\t$string\t\t\t\tString to calculate length\n * @param   string\t\t$stringencoding\t\tEncoding of string\n * @return  int\t\t\t\t\t\t\t\tLength of string\n */\nfunction dol_strlen($string, $stringencoding = 'UTF-8')\n{\n\tif (function_exists('mb_strlen')) return mb_strlen($string, $stringencoding);\n\telse return strlen($string);\n}\n\n/**\n * Make a substring. Works even if mbstring module is not enabled for better compatibility.\n *\n * @param\tstring\t$string\t\t\t\tString to scan\n * @param\tstring\t$start\t\t\t\tStart position\n * @param\tint\t\t$length\t\t\t\tLength (in nb of characters or nb of bytes depending on trunconbytes param)\n * @param   string\t$stringencoding\t\tPage code used for input string encoding\n * @param\tint\t\t$trunconbytes\t\t1=Length is max of bytes instead of max of characters\n * @return  string\t\t\t\t\t\tsubstring\n */\nfunction dol_substr($string, $start, $length, $stringencoding = '', $trunconbytes = 0)\n{\n\tglobal $langs;\n\n\tif (empty($stringencoding)) $stringencoding = $langs->charset_output;\n\n\t$ret = '';\n\tif (empty($trunconbytes))\n\t{\n\t\tif (function_exists('mb_substr'))\n\t\t{\n\t\t\t$ret = mb_substr($string, $start, $length, $stringencoding);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = substr($string, $start, $length);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (function_exists('mb_strcut'))\n\t\t{\n\t\t\t$ret = mb_strcut($string, $start, $length, $stringencoding);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = substr($string, $start, $length);\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\n/**\n *\tTruncate a string to a particular length adding '...' if string larger than length.\n * \tIf length = max length+1, we do no truncate to avoid having just 1 char replaced with '...'.\n *  MAIN_DISABLE_TRUNC=1 can disable all truncings\n *\n *\t@param\tstring\t$string\t\t\t\tString to truncate\n *\t@param  int\t\t$size\t\t\t\tMax string size visible (excluding ...). 0 for no limit. WARNING: Final string size can have 3 more chars (if we added ..., or if size was max+1 or max+2 or max+3 so it does not worse to replace with ...)\n *\t@param\tstring\t$trunc\t\t\t\tWhere to trunc: right, left, middle (size must be a 2 power), wrap\n * \t@param\tstring\t$stringencoding\t\tTell what is source string encoding\n *  @param\tint\t\t$nodot\t\t\t\tTruncation do not add ... after truncation. So it's an exact truncation.\n *  @param  int     $display            Trunc is used to display data and can be changed for small screen. TODO Remove this param (must be dealt with CSS)\n *\t@return string\t\t\t\t\t\tTruncated string. WARNING: length is never higher than $size if $nodot is set, but can be 3 chars higher otherwise.\n */\nfunction dol_trunc($string, $size = 40, $trunc = 'right', $stringencoding = 'UTF-8', $nodot = 0, $display = 0)\n{\n\tglobal $conf;\n\n\tif ($size == 0 || !empty($conf->global->MAIN_DISABLE_TRUNC)) return $string;\n\n\tif (empty($stringencoding)) $stringencoding = 'UTF-8';\n\t// reduce for small screen\n\tif ($conf->dol_optimize_smallscreen == 1 && $display == 1) $size = round($size / 3);\n\n\t// We go always here\n\tif ($trunc == 'right')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > ($size + ($nodot ? 0 : 3)))    // If nodot is 0 and size is 1,2 or 3 chars more, we don't trunc and don't add ...\n\t\treturn dol_substr($newstring, 0, $size, $stringencoding).($nodot ? '' : '...');\n\t\telse\n\t\t//return 'u'.$size.'-'.$newstring.'-'.dol_strlen($newstring,$stringencoding).'-'.$string;\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'middle')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > 2 && dol_strlen($newstring, $stringencoding) > ($size + 1))\n\t\t{\n\t\t\t$size1 = round($size / 2);\n\t\t\t$size2 = round($size / 2);\n\t\t\treturn dol_substr($newstring, 0, $size1, $stringencoding).'...'.dol_substr($newstring, dol_strlen($newstring, $stringencoding) - $size2, $size2, $stringencoding);\n\t\t}\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'left')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > ($size + ($nodot ? 0 : 3)))    // If nodot is 0 and size is 1,2 or 3 chars more, we don't trunc and don't add ...\n\t\treturn '...'.dol_substr($newstring, dol_strlen($newstring, $stringencoding) - $size, $size, $stringencoding);\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'wrap')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > ($size + 1))\n\t\treturn dol_substr($newstring, 0, $size, $stringencoding).\"\\n\".dol_trunc(dol_substr($newstring, $size, dol_strlen($newstring, $stringencoding) - $size, $stringencoding), $size, $trunc);\n\t\telse\n\t\treturn $string;\n\t}\n\telse return 'BadParam3CallingDolTrunc';\n}\n\n/**\n *\tShow picto whatever it's its name (generic function)\n *\n *\t@param      string\t\t$titlealt         \t\tText on title tag for tooltip. Not used if param notitle is set to 1.\n *\t@param      string\t\t$picto       \t\t\tName of image file to show ('filenew', ...)\n *\t\t\t\t\t\t\t\t\t\t\t\t\tIf no extension provided, we use '.png'. Image must be stored into theme/xxx/img directory.\n *                                  \t\t\t\tExample: picto.png                  if picto.png is stored into htdocs/theme/mytheme/img\n *                                  \t\t\t\tExample: picto.png@mymodule         if picto.png is stored into htdocs/mymodule/img\n *                                  \t\t\t\tExample: /mydir/mysubdir/picto.png  if picto.png is stored into htdocs/mydir/mysubdir (pictoisfullpath must be set to 1)\n *\t@param\t\tstring\t\t$moreatt\t\t\t\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@param\t\tboolean|int\t$pictoisfullpath\t\tIf true or 1, image path is a full path\n *\t@param\t\tint\t\t\t$srconly\t\t\t\tReturn only content of the src attribute of img.\n *  @param\t\tint\t\t\t$notitle\t\t\t\t1=Disable tag title. Use it if you add js tooltip, to avoid duplicate tooltip.\n *  @param\t\tstring\t\t$alt\t\t\t\t\tForce alt for bind people\n *  @param\t\tstring\t\t$morecss\t\t\t\tAdd more class css on img tag (For example 'myclascss').\n *  @param\t\tstring\t\t$marginleftonlyshort\t1 = Add a short left margin on picto, 2 = Add a larger left margin on picto, 0 = No margin left. Works for fontawesome picto only.\n *  @return     string       \t\t\t\t    \tReturn img tag\n *  @see        img_object(), img_picto_common()\n */\nfunction img_picto($titlealt, $picto, $moreatt = '', $pictoisfullpath = false, $srconly = 0, $notitle = 0, $alt = '', $morecss = '', $marginleftonlyshort = 2)\n{\n\tglobal $conf, $langs;\n\n\t// We forge fullpathpicto for image to $path/img/$picto. By default, we take DOL_URL_ROOT/theme/$conf->theme/img/$picto\n\t$url = DOL_URL_ROOT;\n\t$theme = $conf->theme;\n\t$path = 'theme/'.$theme;\n\n\t// Define fullpathpicto to use into src\n\tif ($pictoisfullpath) {\n\t\t// Clean parameters\n\t\tif (!preg_match('/(\\.png|\\.gif|\\.svg)$/i', $picto)) {\n\t\t\t$picto .= '.png';\n\t\t}\n\t\t$fullpathpicto = $picto;\n\t\t$reg = array();\n\t\tif (preg_match('/class=\"([^\"]+)\"/', $moreatt, $reg)) {\n\t\t    $morecss .= ($morecss ? ' ' : '').$reg[1];\n\t\t    $moreatt = str_replace('class=\"'.$reg[1].'\"', '', $moreatt);\n\t\t}\n\t} else {\n\t\t$pictowithouttext = preg_replace('/(\\.png|\\.gif|\\.svg)$/', '', $picto);\n\n        if (empty($srconly) && in_array($pictowithouttext, array(\n        \t\t'1downarrow', '1uparrow', '1leftarrow', '1rightarrow', '1uparrow_selected', '1downarrow_selected', '1leftarrow_selected', '1rightarrow_selected',\n        \t\t'accountancy', 'address', 'bank_account', 'barcode', 'bank', 'bill', 'bookmark', 'bom', 'building',\n        \t\t'cash-register', 'category', 'check', 'close_title', 'company', 'contact', 'contract', 'cubes',\n        \t\t'delete', 'dolly', 'dollyrevert', 'edit', 'ellipsis-h', 'external-link-alt', 'external-link-square-alt',\n        \t\t'filter', 'file-code', 'file-export', 'file-import', 'file-upload', 'folder', 'folder-open', 'globe', 'globe-americas', 'grip', 'grip_title', 'help',\n        \t\t'intervention', 'label', 'language', 'list', 'listlight', 'lot',\n        \t\t'map-marker-alt', 'money-bill-alt', 'mrp', 'note',\n        \t\t'object_accounting', 'object_action', 'object_account', 'object_barcode', 'object_bill', 'object_billa', 'object_billd', 'object_bom',\n\t        \t'object_category', 'object_conversation', 'object_bookmark', 'object_bug', 'object_dolly', 'object_dollyrevert', 'object_generic', 'object_folder',\n        \t\t'object_list-alt', 'object_calendar', 'object_calendarweek', 'object_calendarmonth', 'object_calendarday', 'object_calendarperuser',\n        \t\t'object_cash-register', 'object_company', 'object_contact', 'object_contract', 'object_donation', 'object_dynamicprice',\n        \t\t'object_globe', 'object_holiday', 'object_hrm', 'object_invoice', 'object_intervention', 'object_label',\n        \t\t'object_margin', 'object_money-bill-alt', 'object_multicurrency', 'object_order', 'object_payment',\n        \t\t'object_lot', 'object_mrp', 'object_payment', 'object_product', 'object_propal',\n        \t\t'object_other', 'object_paragraph', 'object_poll', 'object_printer', 'object_project', 'object_projectpub', 'object_propal', 'object_resource', 'object_rss', 'object_projecttask',\n        \t\t'object_shipment', 'object_supplier_invoice', 'object_supplier_invoicea', 'object_supplier_invoiced', 'object_supplier_order', 'object_supplier_proposal', 'object_service', 'object_stock',\n        \t\t'object_technic', 'object_ticket', 'object_trip', 'object_user', 'object_group', 'object_member',\n        \t\t'object_phoning', 'object_phoning_mobile', 'object_phoning_fax', 'object_email', 'object_website',\n        \t\t'off', 'on', 'order',\n        \t\t'paiment', 'play', 'playdisabled', 'poll', 'printer', 'product', 'propal', 'projecttask', 'stock', 'resize', 'service', 'stats', 'trip',\n\t\t\t\t'setup', 'sign-out', 'split', 'stripe-s', 'switch_off', 'switch_on', 'tools', 'unlink', 'uparrow', 'user', 'vcard', 'wrench',\n\t\t\t\t'jabber', 'skype', 'twitter', 'facebook', 'linkedin', 'instagram', 'snapchat', 'youtube', 'google-plus-g', 'whatsapp',\n\t\t\t\t'chevron-left', 'chevron-right', 'chevron-down', 'chevron-top',\n        \t\t'home', 'hrm', 'companies', 'products', 'commercial', 'invoicing', 'pencil-ruler', 'preview', 'project', 'projectpub', 'supplier_invoice', 'members', 'ticket', 'generic',\n        \t\t'error', 'warning', 'supplier_proposal', 'supplier_order', 'supplier_invoice',\n        \t\t'title_setup', 'title_accountancy', 'title_bank', 'title_hrm', 'title_agenda'\n\t\t\t)\n\t\t)) {\n\t\t\t$fakey = $pictowithouttext;\n\t\t\t$facolor = ''; $fasize = '';\n\t\t\t$fa = 'fas';\n\t\t\tif (in_array($pictowithouttext, array('object_generic', 'note', 'off', 'on', 'object_bookmark', 'bookmark', 'vcard'))) {\n\t\t\t\t$fa = 'far';\n\t\t\t}\n\t\t\tif (in_array($pictowithouttext, array('skype', 'twitter', 'facebook', 'linkedin', 'instagram', 'snapchat', 'stripe-s', 'youtube', 'google-plus-g', 'whatsapp'))) {\n\t\t\t\t$fa = 'fab';\n\t\t\t}\n\n\t\t\t$pictowithouttext = str_replace('object_', '', $pictowithouttext);\n\n\t\t    $arrayconvpictotofa = array(\n\t\t    \t'account'=>'university', 'accountancy'=>'money-check-alt', 'action'=>'calendar-alt', 'address'=> 'address-book',\n\t\t    \t'bank_account'=>'university', 'bill'=>'file-invoice-dollar', 'billa'=>'file-excel', 'supplier_invoicea'=>'file-excel', 'billd'=>'file-medical', 'supplier_invoiced'=>'file-medical', 'bom'=>'cubes',\n\t\t    \t'company'=>'building', 'contact'=>'address-book', 'contract'=>'suitcase', 'conversation'=>'comments', 'donation'=>'file-alt', 'dynamicprice'=>'hand-holding-usd',\n\t\t    \t'setup'=>'cog', 'companies'=>'building', 'products'=>'cube', 'commercial'=>'suitcase', 'invoicing'=>'coins',\n\t\t    \t'accounting'=>'chart-line', 'category'=>'tag', 'dollyrevert'=>'dolly',\n\t\t    \t'hrm'=>'user-tie', 'margin'=>'calculator', 'members'=>'users', 'ticket'=>'ticket-alt', 'globe'=>'external-link-alt', 'lot'=>'barcode',\n\t\t    \t'email'=>'at',\n\t\t    \t'edit'=>'pencil-alt', 'grip_title'=>'arrows-alt', 'grip'=>'arrows-alt', 'help'=>'info-circle',\n\t\t    \t'generic'=>'file', 'holiday'=>'umbrella-beach', 'label'=>'layer-group',\n\t\t    \t'member'=>'users', 'mrp'=>'cubes', 'trip'=>'wallet', 'group'=>'users',\n\t\t    \t'sign-out'=>'sign-out-alt',\n\t\t    \t'switch_off'=>'toggle-off', 'switch_on'=>'toggle-on', 'check'=>'check', 'bookmark'=>'star', 'bookmark'=>'star',\n\t\t    \t'bank'=>'university', 'close_title'=>'window-close', 'delete'=>'trash', 'edit'=>'pencil-alt', 'filter'=>'filter',\n\t\t    \t'list-alt'=>'list-alt', 'calendar'=>'calendar-alt', 'calendarweek'=>'calendar-week', 'calendarmonth'=>'calendar-alt', 'calendarday'=>'calendar-day', 'calendarperuser'=>'table',\n\t\t    \t'intervention'=>'ambulance', 'invoice'=>'file-invoice-dollar', 'multicurrency'=>'dollar-sign', 'order'=>'file-invoice',\n\t\t    \t'error'=>'exclamation-triangle', 'warning'=>'exclamation-triangle',\n\t\t    \t'other'=>'square',\n\t\t    \t'playdisabled'=>'play', 'poll'=>'check-double', 'preview'=>'binoculars', 'project'=>'sitemap', 'projectpub'=>'sitemap', 'projecttask'=>'tasks', 'propal'=>'file-signature',\n\t\t\t\t'resize'=>'crop', 'supplier_order'=>'dol-order_supplier', 'supplier_proposal'=>'file-signature',\n\t\t    \t'payment'=>'money-check-alt', 'phoning'=>'phone', 'phoning_mobile'=>'mobile-alt', 'phoning_fax'=>'fax', 'printer'=>'print', 'product'=>'cube', 'service'=>'concierge-bell',\n\t\t    \t'resource'=>'laptop-house',\n\t\t    \t'shipment'=>'dolly', 'stock'=>'box-open', 'stats' => 'chart-bar', 'split'=>'code-branch', 'supplier_invoice'=>'file-invoice-dollar', 'technic'=>'cogs', 'ticket'=>'ticket-alt',\n\t\t    \t'title_setup'=>'tools', 'title_accountancy'=>'money-check-alt', 'title_bank'=>'university', 'title_hrm'=>'umbrella-beach',\n\t\t    \t'title_agenda'=>'calendar-alt',\n\t\t    \t'uparrow'=>'mail-forward', 'vcard'=>'address-card',\n\t\t    \t'jabber'=>'comment-o',\n\t\t    \t'website'=>'globe-americas'\n\t\t    );\n\t\t\tif ($pictowithouttext == 'off') {\n\t\t\t    $fakey = 'fa-square';\n\t\t\t\t$fasize = '1.3em';\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'on') {\n\t\t\t    $fakey = 'fa-check-square';\n\t\t\t\t$fasize = '1.3em';\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'listlight') {\n\t\t\t\t$fakey = 'fa-download';\n\t\t\t\t$marginleftonlyshort = 1;\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'printer') {\n\t\t\t\t$fakey = 'fa-print';\n\t\t\t\t$fasize = '1.2em';\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'note') {\n\t\t\t    $fakey = 'fa-sticky-note';\n\t\t\t\t$marginleftonlyshort = 1;\n\t\t\t}\n\t\t\telseif (in_array($pictowithouttext, array('1uparrow', '1downarrow', '1leftarrow', '1rightarrow', '1uparrow_selected', '1downarrow_selected', '1leftarrow_selected', '1rightarrow_selected'))) {\n\t\t\t    $convertarray = array('1uparrow'=>'caret-up', '1downarrow'=>'caret-down', '1leftarrow'=>'caret-left', '1rightarrow'=>'caret-right', '1uparrow_selected'=>'caret-up', '1downarrow_selected'=>'caret-down', '1leftarrow_selected'=>'caret-left', '1rightarrow_selected'=>'caret-right');\n\t\t\t    $fakey = 'fa-'.$convertarray[$pictowithouttext];\n\t\t\t    if (preg_match('/selected/', $pictowithouttext)) $facolor = '#888';\n\t\t\t\t$marginleftonlyshort = 1;\n\t\t\t}\n\t\t\telseif (!empty($arrayconvpictotofa[$pictowithouttext]))\n\t\t\t{\n\t\t\t\t$fakey = 'fa-'.$arrayconvpictotofa[$pictowithouttext];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$fakey = 'fa-'.$pictowithouttext;\n\t\t\t}\n\n\t\t\t// Define $marginleftonlyshort\n\t\t\t$arrayconvpictotomarginleftonly = array(\n\t\t\t\t'bank', 'check', 'delete', 'generic', 'grip', 'grip_title', 'jabber',\n\t\t\t\t'grip_title', 'grip', 'listlight', 'note', 'on', 'off', 'playdisabled', 'printer', 'resize', 'sign-out', 'stats', 'switch_on', 'switch_off',\n\t\t\t\t'uparrow', '1uparrow', '1downarrow', '1leftarrow', '1rightarrow', '1uparrow_selected', '1downarrow_selected', '1leftarrow_selected', '1rightarrow_selected'\n\t\t\t);\n\t\t\tif (!isset($arrayconvpictotomarginleftonly[$pictowithouttext])) {\n\t\t\t\t$marginleftonlyshort = 0;\n\t\t\t}\n\n\t\t\t// Add CSS\n\t\t\t$arrayconvpictotomorcess = array(\n\t\t\t\t'action'=>'infobox-action', 'account'=>'infobox-bank_account', 'accountancy'=>'infobox-bank_account',\n\t\t\t\t'bank_account'=>'bg-infobox-bank_account',\n\t\t\t\t'bill'=>'infobox-commande', 'billa'=>'infobox-commande', 'billd'=>'infobox-commande',\n\t\t\t\t'cash-register'=>'infobox-bank_account', 'contract'=>'infobox-contrat', 'check'=>'font-status4', 'conversation'=>'infobox-contrat',\n\t\t\t\t'donation'=>'infobox-commande', 'dollyrevert'=>'flip', 'ecm'=>'infobox-action',\n\t\t\t\t'hrm'=>'infobox-adherent', 'group'=>'infobox-adherent', 'intervention'=>'infobox-contrat',\n\t\t\t\t'multicurrency'=>'infobox-bank_account',\n\t\t\t\t'members'=>'infobox-adherent', 'member'=>'infobox-adherent', 'money-bill-alt'=>'infobox-bank_account',\n\t\t\t\t'order'=>'infobox-commande',\n\t\t\t\t'user'=>'infobox-adherent', 'users'=>'infobox-adherent',\n\t\t\t\t'error'=>'pictoerror', 'warning'=>'pictowarning', 'switch_on'=>'font-status4',\n\t\t\t\t'holiday'=>'infobox-holiday', 'invoice'=>'infobox-commande',\n\t\t\t\t'payment'=>'infobox-bank_account', 'poll'=>'infobox-adherent', 'project'=>'infobox-project', 'projecttask'=>'infobox-project', 'propal'=>'infobox-propal',\n\t\t\t\t'resource'=>'infobox-action',\n\t\t\t\t'supplier_invoice'=>'infobox-order_supplier', 'supplier_invoicea'=>'infobox-order_supplier', 'supplier_invoiced'=>'infobox-order_supplier',\n\t\t\t\t'supplier_order'=>'infobox-order_supplier', 'supplier_proposal'=>'infobox-supplier_proposal',\n\t\t\t\t'ticket'=>'infobox-contrat', 'title_accountancy'=>'infobox-bank_account', 'title_hrm'=>'infobox-holiday', 'trip'=>'infobox-expensereport', 'title_agenda'=>'infobox-action',\n\t\t\t\t//'title_setup'=>'infobox-action', 'tools'=>'infobox-action',\n\t\t\t\t'list-alt'=>'imgforviewmode', 'calendar'=>'imgforviewmode', 'calendarweek'=>'imgforviewmode', 'calendarmonth'=>'imgforviewmode', 'calendarday'=>'imgforviewmode', 'calendarperuser'=>'imgforviewmode'\n\t\t\t);\n\t\t\tif (!empty($arrayconvpictotomorcess[$pictowithouttext])) {\n\t\t\t\t$morecss .= ($morecss ? ' ' : '').$arrayconvpictotomorcess[$pictowithouttext];\n\t\t\t}\n\n\t\t\t// Define $color\n\t\t\t$arrayconvpictotocolor = array(\n\t\t\t\t'address'=>'#37a', 'building'=>'#37a', 'bom'=>'#a69944',\n\t\t\t\t'companies'=>'#37a', 'company'=>'#37a', 'contact'=>'#37a', 'dynamicprice'=>'#a69944',\n\t\t\t\t'edit'=>'#444', 'note'=>'#999', 'error'=>'', 'listlight'=>'#999',\n\t\t\t\t'dolly'=>'#a69944', 'dollyrevert'=>'#a69944', 'lot'=>'#a69944',\n\t\t\t\t'map-marker-alt'=>'#aaa', 'mrp'=>'#a69944', 'product'=>'#a69944', 'service'=>'#a69944', 'stock'=>'#a69944',\n\t\t\t\t'other'=>'#ddd',\n\t\t\t\t'playdisabled'=>'#ccc', 'printer'=>'#444', 'projectpub'=>'#986c6a', 'resize'=>'#444', 'rss'=>'#cba',\n\t\t\t\t'shipment'=>'#a69944', 'stats'=>'#444', 'switch_off'=>'#999', 'uparrow'=>'#555', 'globe-americas'=>'#aaa',\n\t\t\t\t'website'=>'#304'\n\t\t\t);\n\t\t\tif (isset($arrayconvpictotocolor[$pictowithouttext])) {\n\t\t\t\t$facolor = $arrayconvpictotocolor[$pictowithouttext];\n\t\t\t}\n\n\t\t\t// This snippet only needed since function img_edit accepts only one additional parameter: no separate one for css only.\n            // class/style need to be extracted to avoid duplicate class/style validation errors when $moreatt is added to the end of the attributes.\n            $reg = array();\n\t\t\tif (preg_match('/class=\"([^\"]+)\"/', $moreatt, $reg)) {\n                $morecss .= ($morecss ? ' ' : '').$reg[1];\n                $moreatt = str_replace('class=\"'.$reg[1].'\"', '', $moreatt);\n            }\n            if (preg_match('/style=\"([^\"]+)\"/', $moreatt, $reg)) {\n                $morestyle = ' '.$reg[1];\n                $moreatt = str_replace('style=\"'.$reg[1].'\"', '', $moreatt);\n            }\n            $moreatt = trim($moreatt);\n\n            $enabledisablehtml = '<span class=\"'.$fa.' '.$fakey.($marginleftonlyshort ? ($marginleftonlyshort == 1 ? ' marginleftonlyshort' : ' marginleftonly') : '');\n            $enabledisablehtml .= ($morecss ? ' '.$morecss : '').'\" style=\"'.($fasize ? ('font-size: '.$fasize.';') : '').($facolor ? (' color: '.$facolor.';') : '').($morestyle ? ' '.$morestyle : '').'\"'.(($notitle || empty($titlealt)) ? '' : ' title=\"'.dol_escape_htmltag($titlealt).'\"').($moreatt ? ' '.$moreatt : '').'>';\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$enabledisablehtml .= $titlealt;\n\t\t\t}\n\t\t\t$enabledisablehtml .= '</span>';\n\n\t\t\treturn $enabledisablehtml;\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_OVERWRITE_THEME_PATH)) {\n\t\t\t$path = $conf->global->MAIN_OVERWRITE_THEME_PATH.'/theme/'.$theme; // If the theme does not have the same name as the module\n\t\t}\n\t\telseif (!empty($conf->global->MAIN_OVERWRITE_THEME_RES)) {\n\t\t\t$path = $conf->global->MAIN_OVERWRITE_THEME_RES.'/theme/'.$conf->global->MAIN_OVERWRITE_THEME_RES; // To allow an external module to overwrite image resources whatever is activated theme\n\t\t}\n\t\telseif (!empty($conf->modules_parts['theme']) && array_key_exists($theme, $conf->modules_parts['theme'])) {\n\t\t\t$path = $theme.'/theme/'.$theme; // If the theme have the same name as the module\n\t\t}\n\n\t\t// If we ask an image into $url/$mymodule/img (instead of default path)\n\t\t$regs = array();\n\t\tif (preg_match('/^([^@]+)@([^@]+)$/i', $picto, $regs)) {\n\t\t\t$picto = $regs[1];\n\t\t\t$path = $regs[2]; // $path is $mymodule\n\t\t}\n\n\t\t// Clean parameters\n\t\tif (!preg_match('/(\\.png|\\.gif|\\.svg)$/i', $picto)) {\n\t\t\t$picto .= '.png';\n\t\t}\n\t\t// If alt path are defined, define url where img file is, according to physical path\n\t\t// ex: array([\"main\"]=>\"/home/maindir/htdocs\", [\"alt0\"]=>\"/home/moddir0/htdocs\", ...)\n\t\tforeach ($conf->file->dol_document_root as $type => $dirroot) {\n\t\t\tif ($type == 'main') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// This need a lot of time, that's why enabling alternative dir like \"custom\" dir is not recommanded\n\t\t\tif (file_exists($dirroot.'/'.$path.'/img/'.$picto)) {\n\t\t\t\t$url = DOL_URL_ROOT.$conf->file->dol_url_root[$type];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// $url is '' or '/custom', $path is current theme or\n\t\t$fullpathpicto = $url.'/'.$path.'/img/'.$picto;\n\t}\n\n\tif ($srconly) {\n\t\treturn $fullpathpicto;\n\t}\n\t\t// tag title is used for tooltip on <a>, tag alt can be used with very simple text on image for blind people\n    return '<img src=\"'.$fullpathpicto.'\" alt=\"'.dol_escape_htmltag($alt).'\"'.(($notitle || empty($titlealt)) ? '' : ' title=\"'.dol_escape_htmltag($titlealt).'\"').($moreatt ? ' '.$moreatt.($morecss ? ' class=\"'.$morecss.'\"' : '') : ' class=\"inline-block'.($morecss ? ' '.$morecss : '').'\"').'>'; // Alt is used for accessibility, title for popup\n}\n\n/**\n *\tShow a picto called object_picto (generic function)\n *\n *\t@param\tstring\t$titlealt\t\t\tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param\tstring\t$picto\t\t\t\tName of image to show object_picto (example: user, group, action, bill, contract, propal, product, ...)\n *\t\t\t\t\t\t\t\t\t\tFor external modules use imagename@mymodule to search into directory \"img\" of module.\n *\t@param\tstring\t$moreatt\t\t\tAdd more attribute on img tag (ie: class=\"datecallink\")\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@param\tint\t\t$srconly\t\t\tReturn only content of the src attribute of img.\n *  @param\tint\t\t$notitle\t\t\t1=Disable tag title. Use it if you add js tooltip, to avoid duplicate tooltip.\n *\t@return\tstring\t\t\t\t\t\tReturn img tag\n *\t@see\timg_picto(), img_picto_common()\n */\nfunction img_object($titlealt, $picto, $moreatt = '', $pictoisfullpath = false, $srconly = 0, $notitle = 0)\n{\n\tif (strpos($picto, '^') === 0) return img_picto($titlealt, str_replace('^', '', $picto), $moreatt, $pictoisfullpath, $srconly, $notitle);\n\telse return img_picto($titlealt, 'object_'.$picto, $moreatt, $pictoisfullpath, $srconly, $notitle);\n}\n\n/**\n *\tShow weather picto\n *\n *\t@param      string\t\t$titlealt         \tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param      string|int\t$picto       \t\tName of image file to show (If no extension provided, we use '.png'). Image must be stored into htdocs/theme/common directory. Or level of meteo image (0-4).\n *\t@param\t\tstring\t\t$moreatt\t\t\tAdd more attribute on img tag\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *  @param      string      $morecss            More CSS\n *\t@return     string      \t\t\t\t\tReturn img tag\n *  @see        img_object(), img_picto()\n */\nfunction img_weather($titlealt, $picto, $moreatt = '', $pictoisfullpath = 0, $morecss = '')\n{\n\tglobal $conf;\n\n\tif (is_numeric($picto))\n\t{\n\t\t$leveltopicto = array(0=>'weather-clear.png', 1=>'weather-few-clouds.png', 2=>'weather-clouds.png', 3=>'weather-many-clouds.png', 4=>'weather-storm.png');\n\t\t//return '<i class=\"fa fa-weather-level'.$picto.'\"></i>';\n\t\t$picto = $leveltopicto[$picto];\n\t}\n\telseif (!preg_match('/(\\.png|\\.gif)$/i', $picto)) $picto .= '.png';\n\n\t$path = DOL_URL_ROOT.'/theme/'.$conf->theme.'/img/weather/'.$picto;\n\n\treturn img_picto($titlealt, $path, $moreatt, 1, 0, 0, '', $morecss);\n}\n\n/**\n *\tShow picto (generic function)\n *\n *\t@param      string\t\t$titlealt         \tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param      string\t\t$picto       \t\tName of image file to show (If no extension provided, we use '.png'). Image must be stored into htdocs/theme/common directory.\n *\t@param\t\tstring\t\t$moreatt\t\t\tAdd more attribute on img tag\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@return     string      \t\t\t\t\tReturn img tag\n *  @see        img_object(), img_picto()\n */\nfunction img_picto_common($titlealt, $picto, $moreatt = '', $pictoisfullpath = 0)\n{\n\tglobal $conf;\n\n\tif (!preg_match('/(\\.png|\\.gif)$/i', $picto)) $picto .= '.png';\n\n\tif ($pictoisfullpath) $path = $picto;\n\telse\n\t{\n\t\t$path = DOL_URL_ROOT.'/theme/common/'.$picto;\n\n\t\tif (!empty($conf->global->MAIN_MODULE_CAN_OVERWRITE_COMMONICONS))\n\t\t{\n\t\t\t$themepath = DOL_DOCUMENT_ROOT.'/theme/'.$conf->theme.'/img/'.$picto;\n\n\t\t\tif (file_exists($themepath)) $path = $themepath;\n\t\t}\n\t}\n\n\treturn img_picto($titlealt, $path, $moreatt, 1);\n}\n\n/**\n *\tShow logo action\n *\n *\t@param\tstring\t\t$titlealt       Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t\t$numaction   \tAction id or code to show\n *\t@return string      \t\t\t\tReturn an img tag\n */\nfunction img_action($titlealt, $numaction)\n{\n\tglobal $langs;\n\n\tif (empty($titlealt) || $titlealt == 'default')\n\t{\n\t\tif ($numaction == '-1' || $numaction == 'ST_NO') { $numaction = -1; $titlealt = $langs->transnoentitiesnoconv('ChangeDoNotContact'); }\n\t\telseif ($numaction == '0' || $numaction == 'ST_NEVER') { $numaction = 0; $titlealt = $langs->transnoentitiesnoconv('ChangeNeverContacted'); }\n\t\telseif ($numaction == '1' || $numaction == 'ST_TODO') { $numaction = 1; $titlealt = $langs->transnoentitiesnoconv('ChangeToContact'); }\n\t\telseif ($numaction == '2' || $numaction == 'ST_PEND') { $numaction = 2; $titlealt = $langs->transnoentitiesnoconv('ChangeContactInProcess'); }\n\t\telseif ($numaction == '3' || $numaction == 'ST_DONE') { $numaction = 3; $titlealt = $langs->transnoentitiesnoconv('ChangeContactDone'); }\n\t\telse { $titlealt = $langs->transnoentitiesnoconv('ChangeStatus '.$numaction); $numaction = 0; }\n\t}\n\tif (!is_numeric($numaction)) $numaction = 0;\n\n\treturn img_picto($titlealt, 'stcomm'.$numaction.'.png');\n}\n\n/**\n *  Show pdf logo\n *\n *  @param\tstring\t\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *  @param  int\t\t    $size       Taille de l'icone : 3 = 16x16px , 2 = 14x14px\n *  @return string      \t\t\tRetourne tag img\n */\nfunction img_pdf($titlealt = 'default', $size = 3)\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Show');\n\n\treturn img_picto($titlealt, 'pdf'.$size.'.png');\n}\n\n/**\n *\tShow logo +\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit_add($titlealt = 'default', $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Add');\n\n\treturn img_picto($titlealt, 'edit_add.png', $other);\n}\n/**\n *\tShow logo -\n *\n *\t@param\tstring\t$titlealt\tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit_remove($titlealt = 'default', $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Remove');\n\n\treturn img_picto($titlealt, 'edit_remove.png', $other);\n}\n\n/**\n *\tShow logo editer/modifier fiche\n *\n *\t@param  string\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  integer\t$float      If you have to put the style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit($titlealt = 'default', $float = 0, $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Modify');\n\n\treturn img_picto($titlealt, 'edit.png', ($float ? 'style=\"float: '.($langs->tab_translate[\"DIRECTION\"] == 'rtl' ? 'left' : 'right').'\"' : \"\").($other ? ' '.$other : ''));\n}\n\n/**\n *\tShow logo view card\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  integer\t$float      If you have to put the style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_view($titlealt = 'default', $float = 0, $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('View');\n\n\t$moreatt = ($float ? 'style=\"float: right\" ' : '').$other;\n\n\treturn img_picto($titlealt, 'view.png', $moreatt);\n}\n\n/**\n *  Show delete logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @param\tstring\t$morecss\tMore CSS\n *  @return string      \t\tRetourne tag img\n */\nfunction img_delete($titlealt = 'default', $other = 'class=\"pictodelete\"', $morecss = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Delete');\n\n\treturn img_picto($titlealt, 'delete.png', $other, false, 0, 0, '', $morecss);\n}\n\n/**\n *  Show printer logo\n *\n *  @param  string  $titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *  @param  string  $other      Add more attributes on img\n *  @return string              Retourne tag img\n */\nfunction img_printer($titlealt = \"default\", $other = '')\n{\n\tglobal $langs;\n\tif ($titlealt == \"default\") $titlealt = $langs->trans(\"Print\");\n\treturn img_picto($titlealt, 'printer.png', $other);\n}\n\n/**\n *  Show split logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_split($titlealt = 'default', $other = 'class=\"pictosplit\"')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Split');\n\n\treturn img_picto($titlealt, 'split.png', $other);\n}\n\n/**\n *\tShow help logo with cursor \"?\"\n *\n * \t@param\tint              \t$usehelpcursor\t\t1=Use help cursor, 2=Use click pointer cursor, 0=No specific cursor\n * \t@param\tint|string\t        $usealttitle\t\tText to use as alt title\n * \t@return string            \t           \t\t\tReturn tag img\n */\nfunction img_help($usehelpcursor = 1, $usealttitle = 1)\n{\n\tglobal $langs;\n\n\tif ($usealttitle)\n\t{\n\t\tif (is_string($usealttitle)) $usealttitle = dol_escape_htmltag($usealttitle);\n\t\telse $usealttitle = $langs->trans('Info');\n\t}\n\n\treturn img_picto($usealttitle, 'info.png', 'style=\"vertical-align: middle;'.($usehelpcursor == 1 ? ' cursor: help' : ($usehelpcursor == 2 ? ' cursor: pointer' : '')).'\"');\n}\n\n/**\n *\tShow info logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@return string      \t\tReturn img tag\n */\nfunction img_info($titlealt = 'default')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Informations');\n\n\treturn img_picto($titlealt, 'info.png', 'style=\"vertical-align: middle;\"');\n}\n\n/**\n *\tShow warning logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"'). If 1, add float: right. Can't be \"class\" attribute.\n *  @param\tstring  $morecss\tAdd more CSS\n *\t@return string      \t\tReturn img tag\n */\nfunction img_warning($titlealt = 'default', $moreatt = '', $morecss = 'pictowarning')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Warning');\n\n\t//return '<div class=\"imglatecoin\">'.img_picto($titlealt, 'warning_white.png', 'class=\"pictowarning valignmiddle\"'.($moreatt ? ($moreatt == '1' ? ' style=\"float: right\"' : ' '.$moreatt): '')).'</div>';\n\treturn img_picto($titlealt, 'warning.png', 'class=\"'.$morecss.'\"'.($moreatt ? ($moreatt == '1' ? ' style=\"float: right\"' : ' '.$moreatt) : ''));\n}\n\n/**\n *  Show error logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@return string      \t\tReturn img tag\n */\nfunction img_error($titlealt = 'default')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Error');\n\n\treturn img_picto($titlealt, 'error.png');\n}\n\n/**\n *\tShow next logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n*\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_next($titlealt = 'default', $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Next');\n\n\t//return img_picto($titlealt, 'next.png', $moreatt);\n\treturn '<span class=\"fa fa-chevron-right paddingright paddingleft\" title=\"'.dol_escape_htmltag($titlealt).'\"></span>';\n}\n\n/**\n *\tShow previous logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_previous($titlealt = 'default', $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Previous');\n\n\t//return img_picto($titlealt, 'previous.png', $moreatt);\n\treturn '<span class=\"fa fa-chevron-left paddingright paddingleft\" title=\"'.dol_escape_htmltag($titlealt).'\"></span>';\n}\n\n/**\n *\tShow down arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected   Selected\n *  @param\tstring\t$moreclass\tAdd more CSS classes\n *\t@return string      \t\tReturn img tag\n */\nfunction img_down($titlealt = 'default', $selected = 0, $moreclass = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Down');\n\n\treturn img_picto($titlealt, ($selected ? '1downarrow_selected.png' : '1downarrow.png'), 'class=\"imgdown'.($moreclass ? \" \".$moreclass : \"\").'\"');\n}\n\n/**\n *\tShow top arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected\tSelected\n *  @param\tstring\t$moreclass\tAdd more CSS classes\n *\t@return string      \t\tReturn img tag\n */\nfunction img_up($titlealt = 'default', $selected = 0, $moreclass = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Up');\n\n\treturn img_picto($titlealt, ($selected ? '1uparrow_selected.png' : '1uparrow.png'), 'class=\"imgup'.($moreclass ? \" \".$moreclass : \"\").'\"');\n}\n\n/**\n *\tShow left arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected\tSelected\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_left($titlealt = 'default', $selected = 0, $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Left');\n\n\treturn img_picto($titlealt, ($selected ? '1leftarrow_selected.png' : '1leftarrow.png'), $moreatt);\n}\n\n/**\n *\tShow right arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected\tSelected\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_right($titlealt = 'default', $selected = 0, $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Right');\n\n\treturn img_picto($titlealt, ($selected ? '1rightarrow_selected.png' : '1rightarrow.png'), $moreatt);\n}\n\n/**\n *\tShow tick logo if allowed\n *\n *\t@param\tstring\t$allow\t\tAllow\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@return string      \t\tReturn img tag\n */\nfunction img_allow($allow, $titlealt = 'default')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Active');\n\n\tif ($allow == 1) return img_picto($titlealt, 'tick.png');\n\n\treturn '-';\n}\n\n/**\n *\tReturn image of a credit card according to its brand name\n *\n *\t@param\tstring\t$brand\t\tBrand name of credit card\n *  @param\tstring\t$morecss\tMore CSS\n *\t@return string     \t\t\tReturn img tag\n */\nfunction img_credit_card($brand, $morecss = null)\n{\n\tif (is_null($morecss)) $morecss = 'fa-2x';\n\n\tif ($brand == 'visa' || $brand == 'Visa') {$brand = 'cc-visa'; }\n\telseif ($brand == 'mastercard' || $brand == 'MasterCard') {$brand = 'cc-mastercard'; }\n\telseif ($brand == 'amex' || $brand == 'American Express') {$brand = 'cc-amex'; }\n\telseif ($brand == 'discover' || $brand == 'Discover') {$brand = 'cc-discover'; }\n\telseif ($brand == 'jcb' || $brand == 'JCB') {$brand = 'cc-jcb'; }\n\telseif ($brand == 'diners' || $brand == 'Diners club') {$brand = 'cc-diners-club'; }\n\telseif (!in_array($brand, array('cc-visa', 'cc-mastercard', 'cc-amex', 'cc-discover', 'cc-jcb', 'cc-diners-club'))) {$brand = 'credit-card'; }\n\n\treturn '<span class=\"fa fa-'.$brand.' fa-fw'.($morecss ? ' '.$morecss : '').'\"></span>';\n}\n\n/**\n *\tShow MIME img of a file\n *\n *\t@param\tstring\t$file\t\tFilename\n * \t@param\tstring\t$titlealt\tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *  @param\tstring\t$morecss\tMore css\n *\t@return string     \t\t\tReturn img tag\n */\nfunction img_mime($file, $titlealt = '', $morecss = '')\n{\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t$mimetype = dol_mimetype($file, '', 1);\n\t$mimeimg = dol_mimetype($file, '', 2);\n\t$mimefa = dol_mimetype($file, '', 4);\n\n\tif (empty($titlealt)) $titlealt = 'Mime type: '.$mimetype;\n\n\t//return img_picto_common($titlealt, 'mime/'.$mimeimg, 'class=\"'.$morecss.'\"');\n\treturn '<i class=\"fa fa-'.$mimefa.' paddingright\"'.($titlealt ? ' title=\"'.$titlealt.'\"' : '').'></i>';\n}\n\n\n/**\n *  Show search logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_search($titlealt = 'default', $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Search');\n\n\t$img = img_picto($titlealt, 'search.png', $other, false, 1);\n\n\t$input = '<input type=\"image\" class=\"liste_titre\" name=\"button_search\" src=\"'.$img.'\" ';\n\t$input .= 'value=\"'.dol_escape_htmltag($titlealt).'\" title=\"'.dol_escape_htmltag($titlealt).'\" >';\n\n\treturn $input;\n}\n\n/**\n *  Show search logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_searchclear($titlealt = 'default', $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Search');\n\n\t$img = img_picto($titlealt, 'searchclear.png', $other, false, 1);\n\n\t$input = '<input type=\"image\" class=\"liste_titre\" name=\"button_removefilter\" src=\"'.$img.'\" ';\n\t$input .= 'value=\"'.dol_escape_htmltag($titlealt).'\" title=\"'.dol_escape_htmltag($titlealt).'\" >';\n\n\treturn $input;\n}\n\n/**\n *\tShow information for admin users or standard users\n *\n *\t@param\tstring\t$text\t\t\t\tText info\n *\t@param  integer\t$infoonimgalt\t\tInfo is shown only on alt of star picto, otherwise it is show on output after the star picto\n *\t@param\tint\t\t$nodiv\t\t\t\tNo div\n *  @param  string  $admin      \t    '1'=Info for admin users. '0'=Info for standard users (change only the look), 'error','xxx'=Other\n *  @param\tstring\t$morecss\t\t\tMore CSS ('', 'warning', 'error')\n *  @param\tstring\t$textfordropdown\tShow a text to click to dropdown the info box.\n *\t@return\tstring\t\t\t\t\t\tString with info text\n */\nfunction info_admin($text, $infoonimgalt = 0, $nodiv = 0, $admin = '1', $morecss = '', $textfordropdown = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($infoonimgalt)\n\t{\n\t\t$result = img_picto($text, 'info', 'class=\"hideonsmartphone'.($morecss ? ' '.$morecss : '').'\"');\n\t}\n\telse {\n\t\tif (empty($conf->use_javascript_ajax)) $textfordropdown = '';\n\n\t\t$class = (empty($admin) ? 'undefined' : ($admin == '1' ? 'info' : $admin));\n\t\t$result = ($nodiv ? '' : '<div class=\"'.$class.' hideonsmartphone'.($morecss ? ' '.$morecss : '').($textfordropdown ? ' hidden' : '').'\">').'<span class=\"fa fa-info-circle\" title=\"'.dol_escape_htmltag($admin ? $langs->trans('InfoAdmin') : $langs->trans('Note')).'\"></span> '.$text.($nodiv ? '' : '</div>');\n\n\t\tif ($textfordropdown) {\n\t\t\t$tmpresult .= '<span class=\"'.$class.'text opacitymedium\">'.$langs->trans($textfordropdown).' '.img_picto($langs->trans($textfordropdown), '1downarrow').'</span>';\n\t\t\t$tmpresult .= '<script type=\"text/javascript\" language=\"javascript\">\n\t\t\t\tjQuery(document).ready(function() {\n\t\t\t\t\tjQuery(\".'.$class.'text\").click(function() {\n\t\t\t\t\t\tconsole.log(\"toggle text\");\n\t\t\t\t\t\tjQuery(\".'.$class.'\").toggle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>';\n\n\t\t\t$result = $tmpresult.$result;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n *  Displays error message system with all the information to facilitate the diagnosis and the escalation of the bugs.\n *  This function must be called when a blocking technical error is encountered.\n *  However, one must try to call it only within php pages, classes must return their error through their property \"error\".\n *\n *\t@param\t \tDoliDB\t$db      \tDatabase handler\n *\t@param  \tmixed\t$error\t\tString or array of errors strings to show\n *  @param\t\tarray\t$errors\t\tArray of errors\n *\t@return \tvoid\n *  @see    \tdol_htmloutput_errors()\n */\nfunction dol_print_error($db = '', $error = '', $errors = null)\n{\n\tglobal $conf, $langs, $argv;\n\tglobal $dolibarr_main_prod;\n\n\t$out = '';\n\t$syslog = '';\n\n\t// Si erreur intervenue avant chargement langue\n\tif (!$langs)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/translate.class.php';\n\t\t$langs = new Translate('', $conf);\n\t\t$langs->load(\"main\");\n\t}\n\t// Load translation files required by the page\n    $langs->loadLangs(array('main', 'errors'));\n\n\tif ($_SERVER['DOCUMENT_ROOT'])    // Mode web\n\t{\n\t\t$out .= $langs->trans(\"DolibarrHasDetectedError\").\".<br>\\n\";\n\t\tif (!empty($conf->global->MAIN_FEATURES_LEVEL)) $out .= \"You use an experimental or develop level of features, so please do NOT report any bugs, except if problem is confirmed moving option MAIN_FEATURES_LEVEL back to 0.<br>\\n\";\n\t\t$out .= $langs->trans(\"InformationToHelpDiagnose\").\":<br>\\n\";\n\n\t\t$out .= \"<b>\".$langs->trans(\"Date\").\":</b> \".dol_print_date(time(), 'dayhourlog').\"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"Dolibarr\").\":</b> \".DOL_VERSION.\" - https://www.dolibarr.org<br>\\n\";\n\t\tif (isset($conf->global->MAIN_FEATURES_LEVEL)) $out .= \"<b>\".$langs->trans(\"LevelOfFeature\").\":</b> \".$conf->global->MAIN_FEATURES_LEVEL.\"<br>\\n\";\n\t\tif (function_exists(\"phpversion\"))\n\t\t{\n\t\t\t$out .= \"<b>\".$langs->trans(\"PHP\").\":</b> \".phpversion().\"<br>\\n\";\n\t\t}\n\t\t$out .= \"<b>\".$langs->trans(\"Server\").\":</b> \".$_SERVER[\"SERVER_SOFTWARE\"].\"<br>\\n\";\n\t\tif (function_exists(\"php_uname\"))\n\t\t{\n\t\t\t$out .= \"<b>\".$langs->trans(\"OS\").\":</b> \".php_uname().\"<br>\\n\";\n\t\t}\n\t\t$out .= \"<b>\".$langs->trans(\"UserAgent\").\":</b> \".$_SERVER[\"HTTP_USER_AGENT\"].\"<br>\\n\";\n\t\t$out .= \"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"RequestedUrl\").\":</b> \".dol_htmlentities($_SERVER[\"REQUEST_URI\"], ENT_COMPAT, 'UTF-8').\"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"Referer\").\":</b> \".(isset($_SERVER[\"HTTP_REFERER\"]) ?dol_htmlentities($_SERVER[\"HTTP_REFERER\"], ENT_COMPAT, 'UTF-8') : '').\"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"MenuManager\").\":</b> \".(isset($conf->standard_menu) ? $conf->standard_menu : '').\"<br>\\n\";\n\t\t$out .= \"<br>\\n\";\n\t\t$syslog .= \"url=\".dol_escape_htmltag($_SERVER[\"REQUEST_URI\"]);\n\t\t$syslog .= \", query_string=\".dol_escape_htmltag($_SERVER[\"QUERY_STRING\"]);\n\t}\n\telse                              // Mode CLI\n\t{\n\t\t$out .= '> '.$langs->transnoentities(\"ErrorInternalErrorDetected\").\":\\n\".$argv[0].\"\\n\";\n\t\t$syslog .= \"pid=\".dol_getmypid();\n\t}\n\n\tif (!empty($conf->modules))\n\t{\n\t    $out .= \"<b>\".$langs->trans(\"Modules\").\":</b> \".join(', ', $conf->modules).\"<br>\\n\";\n\t}\n\n\tif (is_object($db))\n\t{\n\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t{\n\t\t\t$out .= \"<b>\".$langs->trans(\"DatabaseTypeManager\").\":</b> \".$db->type.\"<br>\\n\";\n\t\t\t$out .= \"<b>\".$langs->trans(\"RequestLastAccessInError\").\":</b> \".($db->lastqueryerror() ?dol_escape_htmltag($db->lastqueryerror()) : $langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out .= \"<b>\".$langs->trans(\"ReturnCodeLastAccessInError\").\":</b> \".($db->lasterrno() ?dol_escape_htmltag($db->lasterrno()) : $langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out .= \"<b>\".$langs->trans(\"InformationLastAccessInError\").\":</b> \".($db->lasterror() ?dol_escape_htmltag($db->lasterror()) : $langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out .= \"<br>\\n\";\n\t\t}\n\t\telse                            // Mode CLI\n\t\t{\n\t\t\t// No dol_escape_htmltag for output, we are in CLI mode\n\t\t\t$out .= '> '.$langs->transnoentities(\"DatabaseTypeManager\").\":\\n\".$db->type.\"\\n\";\n\t\t\t$out .= '> '.$langs->transnoentities(\"RequestLastAccessInError\").\":\\n\".($db->lastqueryerror() ? $db->lastqueryerror() : $langs->transnoentities(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out .= '> '.$langs->transnoentities(\"ReturnCodeLastAccessInError\").\":\\n\".($db->lasterrno() ? $db->lasterrno() : $langs->transnoentities(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out .= '> '.$langs->transnoentities(\"InformationLastAccessInError\").\":\\n\".($db->lasterror() ? $db->lasterror() : $langs->transnoentities(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t}\n\t\t$syslog .= \", sql=\".$db->lastquery();\n\t\t$syslog .= \", db_error=\".$db->lasterror();\n\t}\n\n\tif ($error || $errors)\n\t{\n\t\t$langs->load(\"errors\");\n\n\t\t// Merge all into $errors array\n\t\tif (is_array($error) && is_array($errors)) $errors = array_merge($error, $errors);\n\t\telseif (is_array($error)) $errors = $error;\n\t\telseif (is_array($errors)) $errors = array_merge(array($error), $errors);\n\t\telse $errors = array_merge(array($error));\n\n\t\tforeach ($errors as $msg)\n\t\t{\n\t\t\tif (empty($msg)) continue;\n\t\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t\t{\n\t\t\t\t$out .= \"<b>\".$langs->trans(\"Message\").\":</b> \".dol_escape_htmltag($msg).\"<br>\\n\";\n\t\t\t}\n\t\t\telse                        // Mode CLI\n\t\t\t{\n\t\t\t\t$out .= '> '.$langs->transnoentities(\"Message\").\":\\n\".$msg.\"\\n\";\n\t\t\t}\n\t\t\t$syslog .= \", msg=\".$msg;\n\t\t}\n\t}\n\tif (empty($dolibarr_main_prod) && $_SERVER['DOCUMENT_ROOT'] && function_exists('xdebug_print_function_stack') && function_exists('xdebug_call_file'))\n\t{\n\t\txdebug_print_function_stack();\n\t\t$out .= '<b>XDebug informations:</b>'.\"<br>\\n\";\n\t\t$out .= 'File: '.xdebug_call_file().\"<br>\\n\";\n\t\t$out .= 'Line: '.xdebug_call_line().\"<br>\\n\";\n\t\t$out .= 'Function: '.xdebug_call_function().\"<br>\\n\";\n\t\t$out .= \"<br>\\n\";\n\t}\n\n\tif (empty($dolibarr_main_prod)) print $out;\n\telse\t// This should not happen, except if there is a bug somewhere. Enabled and check log in such case.\n\t{\n\t\tprint 'This website or feature is currently temporarly not available or failed after a technical error.<br><br>This may be due to a maintenance operation. Current status of operation are on next line...<br><br>'.\"\\n\";\n\t\t$langs->load(\"errors\");\n\t\tprint $langs->trans(\"DolibarrHasDetectedError\").'. ';\n\t\tprint $langs->trans(\"YouCanSetOptionDolibarrMainProdToZero\");\n\t\tdefine(\"MAIN_CORE_ERROR\", 1);\n\t}\n\t//else print 'Sorry, an error occured but the parameter $dolibarr_main_prod is defined in conf file so no message is reported to your browser. Please read the log file for error message.';\n\tdol_syslog(\"Error \".$syslog, LOG_ERR);\n}\n\n/**\n * Show a public email and error code to contact if technical error\n *\n * @param\tstring\t$prefixcode\t\tPrefix of public error code\n * @param   string  $errormessage   Complete error message\n * @param\tarray\t$errormessages\tArray of error messages\n * @param\tstring\t$morecss\t\tMore css\n * @param\tstring\t$email\t\t\tEmail\n * @return\tvoid\n */\nfunction dol_print_error_email($prefixcode, $errormessage = '', $errormessages = array(), $morecss = 'error', $email = '')\n{\n\tglobal $langs, $conf;\n\n\tif (empty($email)) $email = $conf->global->MAIN_INFO_SOCIETE_MAIL;\n\n\t$langs->load(\"errors\");\n\t$now = dol_now();\n\n\tprint '<br><div class=\"center login_main_message\"><div class=\"'.$morecss.'\">';\n\tprint $langs->trans(\"ErrorContactEMail\", $email, $prefixcode.dol_print_date($now, '%Y%m%d%H%M%S'));\n\tif ($errormessage) print '<br><br>'.$errormessage;\n\tif (is_array($errormessages) && count($errormessages))\n\t{\n\t\tforeach ($errormessages as $mesgtoshow)\n\t\t{\n\t\t\tprint '<br><br>'.$mesgtoshow;\n\t\t}\n\t}\n\tprint '</div></div>';\n}\n\n/**\n *\tShow title line of an array\n *\n *\t@param\tstring\t$name        Label of field\n *\t@param\tstring\t$file        Url used when we click on sort picto\n *\t@param\tstring\t$field       Field to use for new sorting\n *\t@param\tstring\t$begin       (\"\" by defaut)\n *\t@param\tstring\t$moreparam   Add more parameters on sort url links (\"\" by default)\n *\t@param  string\t$moreattrib  Options of attribute td (\"\" by defaut, example: 'align=\"center\"')\n *\t@param  string\t$sortfield   Current field used to sort\n *\t@param  string\t$sortorder   Current sort order\n *  @param\tstring\t$prefix\t\t Prefix for css. Use space after prefix to add your own CSS tag.\n *  @param\tstring\t$tooltip\t Tooltip\n *\t@return\tvoid\n */\nfunction print_liste_field_titre($name, $file = \"\", $field = \"\", $begin = \"\", $moreparam = \"\", $moreattrib = \"\", $sortfield = \"\", $sortorder = \"\", $prefix = \"\", $tooltip = \"\")\n{\n\tprint getTitleFieldOfList($name, 0, $file, $field, $begin, $moreparam, $moreattrib, $sortfield, $sortorder, $prefix, 0, $tooltip);\n}\n\n/**\n *\tGet title line of an array\n *\n *\t@param\tstring\t$name        \t\tTranslation key of field\n *\t@param\tint\t\t$thead\t\t \t\t0=To use with standard table format, 1=To use inside <thead><tr>, 2=To use with <div>\n *\t@param\tstring\t$file        \t\tUrl used when we click on sort picto\n *\t@param\tstring\t$field       \t\tField to use for new sorting. Empty if this field is not sortable. Example \"t.abc\" or \"t.abc,t.def\"\n *\t@param\tstring\t$begin       \t\t(\"\" by defaut)\n *\t@param\tstring\t$moreparam   \t\tAdd more parameters on sort url links (\"\" by default)\n *\t@param  string\t$moreattrib  \t\tAdd more attributes on th (\"\" by defaut, example: 'align=\"center\"'). To add more css class, use param $prefix.\n *\t@param  string\t$sortfield   \t\tCurrent field used to sort (Ex: 'd.datep,d.id')\n *\t@param  string\t$sortorder   \t\tCurrent sort order (Ex: 'asc,desc')\n *  @param\tstring\t$prefix\t\t \t\tPrefix for css. Use space after prefix to add your own CSS tag, for example 'mycss '.\n *  @param\tstring\t$disablesortlink\t1=Disable sort link\n *  @param\tstring\t$tooltip\t \t\tTooltip\n *\t@return\tstring\n */\nfunction getTitleFieldOfList($name, $thead = 0, $file = \"\", $field = \"\", $begin = \"\", $moreparam = \"\", $moreattrib = \"\", $sortfield = \"\", $sortorder = \"\", $prefix = \"\", $disablesortlink = 0, $tooltip = '')\n{\n\tglobal $conf, $langs, $form;\n\t//print \"$name, $file, $field, $begin, $options, $moreattrib, $sortfield, $sortorder<br>\\n\";\n\n\tif ($moreattrib == 'class=\"right\"') $prefix .= 'right '; // For backward compatibility\n\n\t$sortorder = strtoupper($sortorder);\n\t$out = '';\n\t$sortimg = '';\n\n\t$tag = 'th';\n\tif ($thead == 2) $tag = 'div';\n\n\t$tmpsortfield = explode(',', $sortfield);\n\t$sortfield1 = trim($tmpsortfield[0]); // If $sortfield is 'd.datep,d.id', it becomes 'd.datep'\n\t$tmpfield = explode(',', $field);\n\t$field1 = trim($tmpfield[0]); // If $field is 'd.datep,d.id', it becomes 'd.datep'\n\n\tif (empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE)) {\n\t\t$prefix = 'wrapcolumntitle '.$prefix;\n\t}\n\t//var_dump('field='.$field.' field1='.$field1.' sortfield='.$sortfield.' sortfield1='.$sortfield1);\n\t// If field is used as sort criteria we use a specific css class liste_titre_sel\n\t// Example if (sortfield,field)=(\"nom\",\"xxx.nom\") or (sortfield,field)=(\"nom\",\"nom\")\n\tif ($field1 && ($sortfield1 == $field1 || $sortfield1 == preg_replace(\"/^[^\\.]+\\./\", \"\", $field1))) {\n\t\t$out .= '<'.$tag.' class=\"'.$prefix.'liste_titre_sel\" '.$moreattrib;\n\t\t$out .= (($field && empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE) && preg_match('/^[a-zA-Z_0-9\\s\\.\\-:]*$/', $name)) ? ' title=\"'.dol_escape_htmltag($langs->trans($name)).'\"' : '');\n\t\t$out .= '>';\n\t}\n\telse {\n\t\t$out .= '<'.$tag.' class=\"'.$prefix.'liste_titre\" '.$moreattrib;\n\t\t$out .= (($field && empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE) && preg_match('/^[a-zA-Z_0-9\\s\\.\\-:]*$/', $name)) ? ' title=\"'.dol_escape_htmltag($langs->trans($name)).'\"' : '');\n\t\t$out .= '>';\n\t}\n\n\tif (empty($thead) && $field && empty($disablesortlink))    // If this is a sort field\n\t{\n\t\t$options = preg_replace('/sortfield=([a-zA-Z0-9,\\s\\.]+)/i', '', $moreparam);\n\t\t$options = preg_replace('/sortorder=([a-zA-Z0-9,\\s\\.]+)/i', '', $options);\n\t\t$options = preg_replace('/&+/i', '&', $options);\n\t\tif (!preg_match('/^&/', $options)) $options = '&'.$options;\n\n\t\t$sortordertouseinlink = '';\n\t\tif ($field1 != $sortfield1) // We are on another field than current sorted field\n\t\t{\n\t\t\tif (preg_match('/^DESC/i', $sortorder))\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('desc,', count(explode(',', $field)));\n\t\t\t}\n\t\t\telse\t\t// We reverse the var $sortordertouseinlink\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('asc,', count(explode(',', $field)));\n\t\t\t}\n\t\t}\n\t\telse                        // We are on field that is the first current sorting criteria\n\t\t{\n\t\t\tif (preg_match('/^ASC/i', $sortorder))\t// We reverse the var $sortordertouseinlink\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('desc,', count(explode(',', $field)));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('asc,', count(explode(',', $field)));\n\t\t\t}\n\t\t}\n\t\t$sortordertouseinlink = preg_replace('/,$/', '', $sortordertouseinlink);\n\t\t$out .= '<a class=\"reposition\" href=\"'.$file.'?sortfield='.$field.'&sortorder='.$sortordertouseinlink.'&begin='.$begin.$options.'\"';\n\t\t//$out .= (empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE) ? ' title=\"'.dol_escape_htmltag($langs->trans($name)).'\"' : '');\n\t\t$out .= '>';\n\t}\n\n\tif ($tooltip) $out .= $form->textwithpicto($langs->trans($name), $langs->trans($tooltip));\n\telse $out .= $langs->trans($name);\n\n\tif (empty($thead) && $field && empty($disablesortlink))    // If this is a sort field\n\t{\n\t\t$out .= '</a>';\n\t}\n\n\tif (empty($thead) && $field)    // If this is a sort field\n\t{\n\t\t$options = preg_replace('/sortfield=([a-zA-Z0-9,\\s\\.]+)/i', '', $moreparam);\n\t\t$options = preg_replace('/sortorder=([a-zA-Z0-9,\\s\\.]+)/i', '', $options);\n\t\t$options = preg_replace('/&+/i', '&', $options);\n\t\tif (!preg_match('/^&/', $options)) $options = '&'.$options;\n\n\t\tif (!$sortorder || $field1 != $sortfield1)\n\t\t{\n\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (preg_match('/^DESC/', $sortorder)) {\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",1).'</a>';\n\t\t\t\t$sortimg .= '<span class=\"nowrap\">'.img_up(\"Z-A\", 0, 'paddingleft').'</span>';\n\t\t\t}\n\t\t\tif (preg_match('/^ASC/', $sortorder)) {\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",1).'</a>';\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t\t\t$sortimg .= '<span class=\"nowrap\">'.img_down(\"A-Z\", 0, 'paddingleft').'</span>';\n\t\t\t}\n\t\t}\n\t}\n\n\t$out .= $sortimg;\n\n\t$out .= '</'.$tag.'>';\n\n\treturn $out;\n}\n\n/**\n *\tShow a title.\n *\n *\t@param\tstring\t$title\t\t\tTitle to show\n *\t@return\tstring\t\t\t\t\tTitle to show\n *  @deprecated\t\t\t\t\t\tUse load_fiche_titre instead\n *  @see load_fiche_titre()\n */\nfunction print_titre($title)\n{\n\tdol_syslog(__FUNCTION__.\" is deprecated\", LOG_WARNING);\n\n\tprint '<div class=\"titre\">'.$title.'</div>';\n}\n\n/**\n *\tShow a title with picto\n *\n *\t@param\tstring\t$title\t\t\t\tTitle to show\n *\t@param\tstring\t$mesg\t\t\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tint\t\t$id\t\t\t\t\tTo force an id on html objects\n * \t@return\tvoid\n *  @deprecated Use print load_fiche_titre instead\n */\nfunction print_fiche_titre($title, $mesg = '', $picto = 'generic', $pictoisfullpath = 0, $id = '')\n{\n\tprint load_fiche_titre($title, $mesg, $picto, $pictoisfullpath, $id);\n}\n\n/**\n *\tLoad a title with picto\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show\n *\t@param\tstring\t$morehtmlright\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tstring\t$id\t\t\t\t\tTo force an id on html objects\n *  @param  string  $morecssontable     More css on table\n *\t@param\tstring\t$morehtmlcenter\t\tAdded message to show on center\n * \t@return\tstring\n *  @see print_barre_liste()\n */\nfunction load_fiche_titre($titre, $morehtmlright = '', $picto = 'generic', $pictoisfullpath = 0, $id = '', $morecssontable = '', $morehtmlcenter = '')\n{\n\tglobal $conf;\n\n\t$return = '';\n\n\tif ($picto == 'setup') $picto = 'generic';\n\n\t$return .= \"\\n\";\n\t$return .= '<table '.($id ? 'id=\"'.$id.'\" ' : '').'class=\"centpercent notopnoleftnoright table-fiche-title'.($morecssontable ? ' '.$morecssontable : '').'\">'; // maring bottom must be same than into print_barre_list\n\t$return .= '<tr class=\"titre\">';\n\tif ($picto) $return .= '<td class=\"nobordernopadding widthpictotitle valignmiddle col-picto\">'.img_picto('', $picto, 'class=\"valignmiddle widthpictotitle pictotitle\"', $pictoisfullpath).'</td>';\n\t$return .= '<td class=\"nobordernopadding valignmiddle col-title\">';\n\t$return .= '<div class=\"titre inline-block\">'.$titre.'</div>';\n\t$return .= '</td>';\n\tif (dol_strlen($morehtmlcenter))\n\t{\n\t\t$return .= '<td class=\"nobordernopadding center valignmiddle\">'.$morehtmlcenter.'</td>';\n\t}\n\tif (dol_strlen($morehtmlright))\n\t{\n\t\t$return .= '<td class=\"nobordernopadding titre_right wordbreakimp right valignmiddle\">'.$morehtmlright.'</td>';\n\t}\n\t$return .= '</tr></table>'.\"\\n\";\n\n\treturn $return;\n}\n\n/**\n *\tPrint a title with navigation controls for pagination\n *\n *\t@param\tstring\t    $titre\t\t\t\tTitle to show (required)\n *\t@param\tint   \t    $page\t\t\t\tNumero of page to show in navigation links (required)\n *\t@param\tstring\t    $file\t\t\t\tUrl of page (required)\n *\t@param\tstring\t    $options         \tMore parameters for links ('' by default, does not include sortfield neither sortorder). Value must be 'urlencoded' before calling function.\n *\t@param\tstring    \t$sortfield       \tField to sort on ('' by default)\n *\t@param\tstring\t    $sortorder       \tOrder to sort ('' by default)\n *\t@param\tstring\t    $morehtmlcenter     String in the middle ('' by default). We often find here string $massaction comming from $form->selectMassAction()\n *\t@param\tint\t\t    $num\t\t\t\tNumber of records found by select with limit+1\n *\t@param\tint|string  $totalnboflines\t\tTotal number of records/lines for all pages (if known). Use a negative value of number to not show number. Use '' if unknown.\n *\t@param\tstring\t    $picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t    $pictoisfullpath\t1=Icon name is a full absolute url of image\n *  @param\tstring\t    $morehtmlright\t\tMore html to show\n *  @param  string      $morecss            More css to the table\n *  @param  int         $limit              Max number of lines (-1 = use default, 0 = no limit, > 0 = limit).\n *  @param  int         $hideselectlimit    Force to hide select limit\n *  @param  int         $hidenavigation     Force to hide all navigation tools\n *  @param  int\t\t\t$pagenavastextinput 1=Do not suggest list of pages to navigate but suggest the page number into an input field.\n *\t@return\tvoid\n */\nfunction print_barre_liste($titre, $page, $file, $options = '', $sortfield = '', $sortorder = '', $morehtmlcenter = '', $num = -1, $totalnboflines = '', $picto = 'generic', $pictoisfullpath = 0, $morehtmlright = '', $morecss = '', $limit = -1, $hideselectlimit = 0, $hidenavigation = 0, $pagenavastextinput = 0)\n{\n\tglobal $conf, $langs;\n\n\t$savlimit = $limit;\n\t$savtotalnboflines = $totalnboflines;\n\t$totalnboflines = abs($totalnboflines);\n\n\tif ($picto == 'setup') $picto = 'title_setup.png';\n\tif (($conf->browser->name == 'ie') && $picto == 'generic') $picto = 'title.gif';\n\tif ($limit < 0) $limit = $conf->liste_limit;\n\tif ($savlimit != 0 && (($num > $limit) || ($num == -1) || ($limit == 0)))\n\t{\n\t\t$nextpage = 1;\n\t}\n\telse\n\t{\n\t\t$nextpage = 0;\n\t}\n\t//print 'totalnboflines='.$totalnboflines.'-savlimit='.$savlimit.'-limit='.$limit.'-num='.$num.'-nextpage='.$nextpage;\n\n\tprint \"\\n\";\n\tprint \"<!-- Begin title '\".$titre.\"' -->\\n\";\n\tprint '<table class=\"centpercent notopnoleftnoright table-fiche-title'.($morecss ? ' '.$morecss : '').'\"><tr>'; // maring bottom must be same than into load_fiche_tire\n\n\t// Left\n\n\tif ($picto && $titre) print '<td class=\"nobordernopadding widthpictotitle valignmiddle col-picto\">'.img_picto('', $picto, 'class=\"valignmiddle pictotitle widthpictotitle\"', $pictoisfullpath).'</td>';\n\tprint '<td class=\"nobordernopadding valignmiddle col-title\">';\n\tprint '<div class=\"titre inline-block\">'.$titre;\n\tif (!empty($titre) && $savtotalnboflines >= 0 && (string) $savtotalnboflines != '') print '<span class=\"opacitymedium colorblack paddingleft\">('.$totalnboflines.')</span>';\n\tprint '</div></td>';\n\n\t// Center\n\tif ($morehtmlcenter)\n\t{\n\t\tprint '<td class=\"nobordernopadding center valignmiddle\">'.$morehtmlcenter.'</td>';\n\t}\n\n\t// Right\n\tprint '<td class=\"nobordernopadding valignmiddle right\">';\n\tif ($sortfield) $options .= \"&sortfield=\".urlencode($sortfield);\n\tif ($sortorder) $options .= \"&sortorder=\".urlencode($sortorder);\n\t// Show navigation bar\n\t$pagelist = '';\n\tif ($savlimit != 0 && ($page > 0 || $num > $limit))\n\t{\n\t\tif ($totalnboflines)\t// If we know total nb of lines\n\t\t{\n\t\t\t// Define nb of extra page links before and after selected page + ... + first or last\n\t\t\t$maxnbofpage = (empty($conf->dol_optimize_smallscreen) ? 4 : 0);\n\n\t\t\tif ($limit > 0) $nbpages = ceil($totalnboflines / $limit);\n\t\t\telse $nbpages = 1;\n\t\t\t$cpt = ($page - $maxnbofpage);\n\t\t\tif ($cpt < 0) { $cpt = 0; }\n\n\t\t\tif ($cpt >= 1)\n\t\t\t{\n\t\t\t\tif (empty($pagenavastextinput)) {\n\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page=0'.$options.'\">1</a></li>';\n\t\t\t\t\tif ($cpt > 2) $pagelist .= '<li class=\"pagination\"><span class=\"inactive\">...</span></li>';\n\t\t\t\t\telseif ($cpt == 2) $pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page=1'.$options.'\">2</a></li>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif ($pagenavastextinput) {\n\t\t\t\t\tif ($cpt == $page)\n\t\t\t\t\t{\n\t\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><input type=\"text\" class=\"width25 center pageplusone\" name=\"pageplusone\" value=\"'.($page + 1).'\"></li>';\n\t\t\t\t\t\t$pagelist .= '/';\n\t\t\t\t\t\t//if (($cpt + 1) < $nbpages) $pagelist .= '/';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($cpt == $page)\n\t\t\t\t\t{\n\t\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><span class=\"active\">'.($page + 1).'</span></li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.$cpt.$options.'\">'.($cpt + 1).'</a></li>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t\twhile ($cpt < $nbpages && $cpt <= ($page + $maxnbofpage));\n\n\t\t\tif (empty($pagenavastextinput)) {\n\t\t\t\tif ($cpt < $nbpages)\n\t\t\t\t{\n\t\t\t\t\tif ($cpt < $nbpages - 2) $pagelist .= '<li class=\"pagination\"><span class=\"inactive\">...</span></li>';\n\t\t\t\t\telseif ($cpt == $nbpages - 2) $pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.($nbpages - 2).$options.'\">'.($nbpages - 1).'</a></li>';\n\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.($nbpages - 1).$options.'\">'.$nbpages.'</a></li>';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//var_dump($page.' '.$cpt.' '.$nbpages);\n\t\t\t\t//if (($page + 1) < $nbpages) {\n\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.($nbpages - 1).$options.'\">'.$nbpages.'</a></li>';\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$pagelist .= '<li class=\"pagination\"><span class=\"active\">'.($page + 1).\"</li>\";\n\t\t}\n\t}\n\n\tif ($savlimit || $morehtmlright) {\n\t\tprint_fleche_navigation($page, $file, $options, $nextpage, $pagelist, $morehtmlright, $savlimit, $totalnboflines, $hideselectlimit); // output the div and ul for previous/last completed with page numbers into $pagelist\n\t}\n\n\t// js to autoselect page field on focus\n\tif ($pagenavastextinput) {\n\t\tprint ajax_autoselect('.pageplusone');\n\t}\n\n\tprint '</td>';\n\n\tprint '</tr></table>'.\"\\n\";\n\tprint \"<!-- End title -->\\n\\n\";\n}\n\n/**\n *\tFunction to show navigation arrows into lists\n *\n *\t@param\tint\t\t\t\t$page\t\t\t\tNumber of page\n *\t@param\tstring\t\t\t$file\t\t\t\tPage URL (in most cases provided with $_SERVER[\"PHP_SELF\"])\n *\t@param\tstring\t\t\t$options         \tOther url parameters to propagate (\"\" by default, may include sortfield and sortorder)\n *\t@param\tinteger\t\t\t$nextpage\t    \tDo we show a next page button\n *\t@param\tstring\t\t\t$betweenarrows\t\tHTML content to show between arrows. MUST contains '<li> </li>' tags or '<li><span> </span></li>'.\n *  @param\tstring\t\t\t$afterarrows\t\tHTML content to show after arrows. Must NOT contains '<li> </li>' tags.\n *  @param  int             $limit              Max nb of record to show  (-1 = no combo with limit, 0 = no limit, > 0 = limit)\n *\t@param\tint\t\t        $totalnboflines\t\tTotal number of records/lines for all pages (if known)\n *  @param  int             $hideselectlimit    Force to hide select limit\n *\t@return\tvoid\n */\nfunction print_fleche_navigation($page, $file, $options = '', $nextpage = 0, $betweenarrows = '', $afterarrows = '', $limit = -1, $totalnboflines = 0, $hideselectlimit = 0)\n{\n\tglobal $conf, $langs;\n\n\tprint '<div class=\"pagination\"><ul>';\n\tif ((int) $limit > 0 && empty($hideselectlimit))\n\t{\n\t\t$pagesizechoices = '10:10,15:15,20:20,30:30,40:40,50:50,100:100,250:250,500:500,1000:1000,5000:5000';\n\t\t//$pagesizechoices.=',0:'.$langs->trans(\"All\");     // Not yet supported\n\t\t//$pagesizechoices.=',2:2';\n\t\tif (!empty($conf->global->MAIN_PAGESIZE_CHOICES)) $pagesizechoices = $conf->global->MAIN_PAGESIZE_CHOICES;\n\n\t\tprint '<li class=\"pagination\">';\n\t\tprint '<select class=\"flat selectlimit\" name=\"limit\" title=\"'.dol_escape_htmltag($langs->trans(\"MaxNbOfRecordPerPage\")).'\">';\n\t\t$tmpchoice = explode(',', $pagesizechoices);\n\t\t$tmpkey = $limit.':'.$limit;\n\t\tif (!in_array($tmpkey, $tmpchoice)) $tmpchoice[] = $tmpkey;\n\t\t$tmpkey = $conf->liste_limit.':'.$conf->liste_limit;\n\t\tif (!in_array($tmpkey, $tmpchoice)) $tmpchoice[] = $tmpkey;\n\t\tasort($tmpchoice, SORT_NUMERIC);\n\t\tforeach ($tmpchoice as $val)\n\t\t{\n\t\t\t$selected = '';\n\t\t\t$tmp = explode(':', $val);\n\t\t\t$key = $tmp[0];\n\t\t\t$val = $tmp[1];\n\t\t\tif ($key != '' && $val != '')\n\t\t\t{\n\t\t\t\tif ((int) $key == (int) $limit)\n\t\t\t\t{\n\t\t\t\t\t$selected = ' selected=\"selected\"';\n\t\t\t\t}\n\t\t\t\tprint '<option name=\"'.$key.'\"'.$selected.'>'.dol_escape_htmltag($val).'</option>'.\"\\n\";\n\t\t\t}\n\t\t}\n\t\tprint '</select>';\n\t\tif ($conf->use_javascript_ajax)\n\t\t{\n\t\t\tprint '<!-- JS CODE TO ENABLE select limit to launch submit of page -->\n            \t\t<script>\n                \tjQuery(document).ready(function () {\n            \t  \t\tjQuery(\".selectlimit\").change(function() {\n                            console.log(\"Change limit. Send submit\");\n                            $(this).parents(\\'form:first\\').submit();\n            \t  \t\t});\n                \t});\n            \t\t</script>\n                ';\n\t\t}\n\t\tprint '</li>';\n\t}\n\tif ($page > 0)\n\t{\n\t\tprint '<li class=\"pagination paginationpage\"><a class=\"paginationprevious\" href=\"'.$file.'?page='.($page - 1).$options.'\"><i class=\"fa fa-chevron-left\" title=\"'.dol_escape_htmltag($langs->trans(\"Previous\")).'\"></i></a></li>';\n\t}\n\tif ($betweenarrows)\n\t{\n\t\tprint '<!--<div class=\"betweenarrows nowraponall inline-block\">-->';\n\t\tprint $betweenarrows;\n\t\tprint '<!--</div>-->';\n\t}\n\tif ($nextpage > 0)\n\t{\n\t\tprint '<li class=\"pagination paginationpage\"><a class=\"paginationnext\" href=\"'.$file.'?page='.($page + 1).$options.'\"><i class=\"fa fa-chevron-right\" title=\"'.dol_escape_htmltag($langs->trans(\"Next\")).'\"></i></a></li>';\n\t}\n\tif ($afterarrows)\n\t{\n\t\tprint '<li class=\"paginationafterarrows\">';\n\t\tprint $afterarrows;\n\t\tprint '</li>';\n\t}\n\tprint '</ul></div>'.\"\\n\";\n}\n\n\n/**\n *\tReturn a string with VAT rate label formated for view output\n *\tUsed into pdf and HTML pages\n *\n *\t@param\tstring\t$rate\t\t\tRate value to format ('19.6', '19,6', '19.6%', '19,6%', '19.6 (CODEX)', ...)\n *  @param\tboolean\t$addpercent\t\tAdd a percent % sign in output\n *\t@param\tint\t\t$info_bits\t\tMiscellaneous information on vat (0=Default, 1=French NPR vat)\n *\t@param\tint\t\t$usestarfornpr\t-1=Never show, 0 or 1=Use '*' for NPR vat rates\n *  @return\tstring\t\t\t\t\tString with formated amounts ('19,6' or '19,6%' or '8.5% (NPR)' or '8.5% *' or '19,6 (CODEX)')\n */\nfunction vatrate($rate, $addpercent = false, $info_bits = 0, $usestarfornpr = 0)\n{\n\t$morelabel = '';\n\n\tif (preg_match('/%/', $rate))\n\t{\n\t\t$rate = str_replace('%', '', $rate);\n\t\t$addpercent = true;\n\t}\n\tif (preg_match('/\\((.*)\\)/', $rate, $reg))\n\t{\n\t\t$morelabel = ' ('.$reg[1].')';\n\t\t$rate = preg_replace('/\\s*'.preg_quote($morelabel, '/').'/', '', $rate);\n\t}\n\tif (preg_match('/\\*/', $rate))\n\t{\n\t\t$rate = str_replace('*', '', $rate);\n\t\t$info_bits |= 1;\n\t}\n\n\t// If rate is '9/9/9' we don't change it.  If rate is '9.000' we apply price()\n\tif (!preg_match('/\\//', $rate)) $ret = price($rate, 0, '', 0, 0).($addpercent ? '%' : '');\n\telse\n\t{\n\t\t// TODO Split on / and output with a price2num to have clean numbers without ton of 000.\n\t\t$ret = $rate.($addpercent ? '%' : '');\n\t}\n\tif (($info_bits & 1) && $usestarfornpr >= 0) $ret .= ' *';\n\t$ret .= $morelabel;\n\treturn $ret;\n}\n\n\n/**\n *\t\tFunction to format a value into an amount for visual output\n *\t\tFunction used into PDF and HTML pages\n *\n *\t\t@param\tfloat\t\t$amount\t\t\tAmount to format\n *\t\t@param\tinteger\t\t$form\t\t\tType of format, HTML or not (not by default)\n *\t\t@param\tTranslate\t$outlangs\t\tObject langs for output\n *\t\t@param\tint\t\t\t$trunc\t\t\t1=Truncate if there is more decimals than MAIN_MAX_DECIMALS_SHOWN (default), 0=Does not truncate. Deprecated because amount are rounded (to unit or total amount accurancy) before beeing inserted into database or after a computation, so this parameter should be useless.\n *\t\t@param\tint\t\t\t$rounding\t\tMinimum number of decimal to show. If 0, no change, if -1, we use min($conf->global->MAIN_MAX_DECIMALS_UNIT,$conf->global->MAIN_MAX_DECIMALS_TOT)\n *\t\t@param\tint\t\t\t$forcerounding\tForce the number of decimal to forcerounding decimal (-1=do not force)\n *\t\t@param\tstring\t\t$currency_code\tTo add currency symbol (''=add nothing, 'auto'=Use default currency, 'XXX'=add currency symbols for XXX currency)\n *\t\t@return\tstring\t\t\t\t\t\tChaine avec montant formate\n *\n *\t\t@see\tprice2num()\t\t\t\t\tRevert function of price\n */\nfunction price($amount, $form = 0, $outlangs = '', $trunc = 1, $rounding = -1, $forcerounding = -1, $currency_code = '')\n{\n\tglobal $langs, $conf;\n\n\t// Clean parameters\n\tif (empty($amount)) $amount = 0; // To have a numeric value if amount not defined or = ''\n\t$amount = (is_numeric($amount) ? $amount : 0); // Check if amount is numeric, for example, an error occured when amount value = o (letter) instead 0 (number)\n\tif ($rounding < 0) $rounding = min($conf->global->MAIN_MAX_DECIMALS_UNIT, $conf->global->MAIN_MAX_DECIMALS_TOT);\n\t$nbdecimal = $rounding;\n\n\t// Output separators by default (french)\n\t$dec = ','; $thousand = ' ';\n\n\t// If $outlangs not forced, we use use language\n\tif (!is_object($outlangs)) $outlangs = $langs;\n\n\tif ($outlangs->transnoentitiesnoconv(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec = $outlangs->transnoentitiesnoconv(\"SeparatorDecimal\");\n\tif ($outlangs->transnoentitiesnoconv(\"SeparatorThousand\") != \"SeparatorThousand\") $thousand = $outlangs->transnoentitiesnoconv(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand = '';\n\telseif ($thousand == 'Space') $thousand = ' ';\n\t//print \"outlangs=\".$outlangs->defaultlang.\" amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t//print \"amount=\".$amount.\"-\";\n\t$amount = str_replace(',', '.', $amount); // should be useless\n\t//print $amount.\"-\";\n\t$datas = explode('.', $amount);\n\t$decpart = isset($datas[1]) ? $datas[1] : '';\n\t$decpart = preg_replace('/0+$/i', '', $decpart); // Supprime les 0 de fin de partie decimale\n\t//print \"decpart=\".$decpart.\"<br>\";\n\t$end = '';\n\n\t// We increase nbdecimal if there is more decimal than asked (to not loose information)\n\tif (dol_strlen($decpart) > $nbdecimal) $nbdecimal = dol_strlen($decpart);\n\t// Si on depasse max\n\tif ($trunc && $nbdecimal > $conf->global->MAIN_MAX_DECIMALS_SHOWN)\n\t{\n\t\t$nbdecimal = $conf->global->MAIN_MAX_DECIMALS_SHOWN;\n\t\tif (preg_match('/\\.\\.\\./i', $conf->global->MAIN_MAX_DECIMALS_SHOWN))\n\t\t{\n\t\t\t// Si un affichage est tronque, on montre des ...\n\t\t\t$end = '...';\n\t\t}\n\t}\n\n\t// If force rounding\n\tif ($forcerounding >= 0) $nbdecimal = $forcerounding;\n\n\t// Format number\n\t$output = number_format($amount, $nbdecimal, $dec, $thousand);\n\tif ($form)\n\t{\n\t\t$output = preg_replace('/\\s/', '&nbsp;', $output);\n\t\t$output = preg_replace('/\\'/', '&#039;', $output);\n\t}\n\t// Add symbol of currency if requested\n\t$cursymbolbefore = $cursymbolafter = '';\n\tif ($currency_code)\n\t{\n\t\tif ($currency_code == 'auto') $currency_code = $conf->currency;\n\n\t\t$listofcurrenciesbefore = array('AUD', 'CAD', 'CNY', 'COP', 'CLP', 'GBP', 'HKD', 'MXN', 'PEN', 'USD');\n\t\t$listoflanguagesbefore = array('nl_NL');\n\t\tif (in_array($currency_code, $listofcurrenciesbefore) || in_array($outlangs->defaultlang, $listoflanguagesbefore))\n\t\t{\n\t\t    $cursymbolbefore .= $outlangs->getCurrencySymbol($currency_code);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$tmpcur = $outlangs->getCurrencySymbol($currency_code);\n\t\t\t$cursymbolafter .= ($tmpcur == $currency_code ? ' '.$tmpcur : $tmpcur);\n\t\t}\n\t}\n\t$output = $cursymbolbefore.$output.$end.($cursymbolafter ? ' ' : '').$cursymbolafter;\n\n\treturn $output;\n}\n\n/**\n *\tFunction that return a number with universal decimal format (decimal separator is '.') from an amount typed by a user.\n *\tFunction to use on each input amount before any numeric test or database insert. A better name for this function\n *  should be roundtext2num().\n *\n *\t@param\tstring|float\t$amount\t\t\tAmount to convert/clean or round\n *\t@param\tstring\t\t\t$rounding\t\t''=No rounding\n * \t\t\t\t\t\t\t\t\t\t\t'MU'=Round to Max unit price (MAIN_MAX_DECIMALS_UNIT)\n *\t\t\t\t\t\t\t\t\t\t\t'MT'=Round to Max for totals with Tax (MAIN_MAX_DECIMALS_TOT)\n *\t\t\t\t\t\t\t\t\t\t\t'MS'=Round to Max for stock quantity (MAIN_MAX_DECIMALS_STOCK)\n *      \t\t                            'CR'=Currency rate\n *\t\t\t\t\t\t\t\t\t\t\tNumeric = Nb of digits for rounding\n * \t@param\tint\t\t\t\t$option\t\t\tPut 1 if you know that content is already universal format number (so no correction on decimal will be done)\n * \t\t\t\t\t\t\t\t\t\t\tPut 2 if you know that number is a user input (so we know we don't have to fix decimal separator).\n *\t@return\tstring\t\t\t\t\t\t\tAmount with universal numeric format (Example: '99.99999').\n *\t\t\t\t\t\t\t\t\t\t\tIf conversion fails, it return text unchanged if $rounding = '' or '0' if $rounding is defined.\n *\t\t\t\t\t\t\t\t\t\t\tIf amount is null or '', it returns '' if $rounding = '' or '0' if $rounding is defined..\n *\n *\t@see    price()\t\t\t\t\t\t\tOpposite function of price2num\n */\nfunction price2num($amount, $rounding = '', $option = 0)\n{\n\tglobal $langs, $conf;\n\n\t// Round PHP function does not allow number like '1,234.56' nor '1.234,56' nor '1 234,56'\n\t// Numbers must be '1234.56'\n\t// Decimal delimiter for PHP and database SQL requests must be '.'\n\t$dec = ','; $thousand = ' ';\n\tif ($langs->transnoentitiesnoconv(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec = $langs->transnoentitiesnoconv(\"SeparatorDecimal\");\n\tif ($langs->transnoentitiesnoconv(\"SeparatorThousand\") != \"SeparatorThousand\") $thousand = $langs->transnoentitiesnoconv(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand = '';\n\telseif ($thousand == 'Space') $thousand = ' ';\n\t//print \"amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t// Convert value to universal number format (no thousand separator, '.' as decimal separator)\n\tif ($option != 1) {\t// If not a PHP number or unknown, we change or clean format\n\t\t//print 'PP'.$amount.' - '.$dec.' - '.$thousand.' - '.intval($amount).'<br>';\n\t\tif (!is_numeric($amount)) {\n\t\t\t$amount = preg_replace('/[a-zA-Z\\/\\\\\\*\\(\\)\\<\\>]/', '', $amount);\n\t\t}\n\n\t\tif ($option == 2 && $thousand == '.' && preg_match('/\\.(\\d\\d\\d)$/', (string) $amount)) {\t// It means the . is used as a thousand separator and string come frominput data, so 1.123 is 1123\n\t\t\t$amount = str_replace($thousand, '', $amount);\n\t\t}\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be like defined by Dolibarr setup.\n\t\t// So if number was already a good number, it is converted into local Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps = sprintf(\"%0.10F\", $amount - intval($amount)); // temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps = preg_replace('/([\\.1-9])0+$/', '\\\\1', $temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec = max(0, dol_strlen($temps) - 2); // -2 to remove \"0.\"\n\t\t\t$amount = number_format($amount, $nbofdec, $dec, $thousand);\n\t\t}\n\t\t//print \"QQ\".$amount.\"<br>\\n\";\n\n\t\t// Now make replace (the main goal of function)\n\t\tif ($thousand != ',' && $thousand != '.') {\n\t\t\t$amount = str_replace(',', '.', $amount); // To accept 2 notations for french users\n\t\t}\n\t\t$amount = str_replace(' ', '', $amount); // To avoid spaces\n\t\t$amount = str_replace($thousand, '', $amount); // Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount = str_replace($dec, '.', $amount);\n\t}\n\n\t// Now, make a rounding if required\n\tif ($rounding)\n\t{\n\t\t$nbofdectoround = '';\n\t\tif ($rounding == 'MU')     $nbofdectoround = $conf->global->MAIN_MAX_DECIMALS_UNIT;\n\t\telseif ($rounding == 'MT') $nbofdectoround = $conf->global->MAIN_MAX_DECIMALS_TOT;\n\t\telseif ($rounding == 'MS') $nbofdectoround = empty($conf->global->MAIN_MAX_DECIMALS_STOCK) ? 5 : $conf->global->MAIN_MAX_DECIMALS_STOCK;\n\t\telseif ($rounding == 'CR') $nbofdectoround = 8;\n\t\telseif (is_numeric($rounding))  $nbofdectoround = $rounding;\n\t\t//print \"RR\".$amount.' - '.$nbofdectoround.'<br>';\n\t\tif (dol_strlen($nbofdectoround)) $amount = round($amount, $nbofdectoround); // $nbofdectoround can be 0.\n\t\telse return 'ErrorBadParameterProvidedToFunction';\n\t\t//print 'SS'.$amount.' - '.$nbofdec.' - '.$dec.' - '.$thousand.' - '.$nbofdectoround.'<br>';\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be defined by Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps = sprintf(\"%0.10F\", $amount - intval($amount)); // temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps = preg_replace('/([\\.1-9])0+$/', '\\\\1', $temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec = max(0, dol_strlen($temps) - 2); // -2 to remove \"0.\"\n\t\t\t$amount = number_format($amount, min($nbofdec, $nbofdectoround), $dec, $thousand); // Convert amount to format with dolibarr dec and thousand\n\t\t}\n\t\t//print \"TT\".$amount.'<br>';\n\n\t\t// Always make replace because each math function (like round) replace\n\t\t// with local values and we want a number that has a SQL string format x.y\n\t\tif ($thousand != ',' && $thousand != '.') $amount = str_replace(',', '.', $amount); // To accept 2 notations for french users\n\t\t$amount = str_replace(' ', '', $amount); // To avoid spaces\n\t\t$amount = str_replace($thousand, '', $amount); // Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount = str_replace($dec, '.', $amount);\n\t}\n\n\treturn $amount;\n}\n\n/**\n * Output a dimension with best unit\n *\n * @param   float       $dimension      Dimension\n * @param   int         $unit           Unit scale of dimension (Example: 0=kg, -3=g, -6=mg, 98=ounce, 99=pound, ...)\n * @param   string      $type           'weight', 'volume', ...\n * @param   Translate   $outputlangs    Translate language object\n * @param   int         $round          -1 = non rounding, x = number of decimal\n * @param   string      $forceunitoutput    'no' or numeric (-3, -6, ...) compared to $unit (In most case, this value is value defined into $conf->global->MAIN_WEIGHT_DEFAULT_UNIT)\n * @return  string                      String to show dimensions\n */\nfunction showDimensionInBestUnit($dimension, $unit, $type, $outputlangs, $round = -1, $forceunitoutput = 'no')\n{\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\n\n\tif (($forceunitoutput == 'no' && $dimension < 1 / 10000 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == -6))\n\t{\n\t\t$dimension = $dimension * 1000000;\n\t\t$unit = $unit - 6;\n\t}\n\telseif (($forceunitoutput == 'no' && $dimension < 1 / 10 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == -3))\n\t{\n\t\t$dimension = $dimension * 1000;\n\t\t$unit = $unit - 3;\n\t}\n\telseif (($forceunitoutput == 'no' && $dimension > 100000000 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == 6))\n\t{\n\t\t$dimension = $dimension / 1000000;\n\t\t$unit = $unit + 6;\n\t}\n\telseif (($forceunitoutput == 'no' && $dimension > 100000 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == 3))\n\t{\n\t\t$dimension = $dimension / 1000;\n\t\t$unit = $unit + 3;\n\t}\n\t// Special case when we want output unit into pound or ounce\n\t/* TODO\n\tif ($unit < 90 && $type == 'weight' && is_numeric($forceunitoutput) && (($forceunitoutput == 98) || ($forceunitoutput == 99))\n\t{\n\t    $dimension = // convert dimension from standard unit into ounce or pound\n\t    $unit = $forceunitoutput;\n\t}\n\tif ($unit > 90 && $type == 'weight' && is_numeric($forceunitoutput) && $forceunitoutput < 90)\n\t{\n\t    $dimension = // convert dimension from standard unit into ounce or pound\n\t    $unit = $forceunitoutput;\n\t}*/\n\n\t$ret = price($dimension, 0, $outputlangs, 0, 0, $round).' '.measuringUnitString(0, $type, $unit);\n\n\treturn $ret;\n}\n\n\n/**\n *\tReturn localtax rate for a particular vat, when selling a product with vat $vatrate, from a $thirdparty_buyer to a $thirdparty_seller\n *  Note: This function applies same rules than get_default_tva\n *\n * \t@param\tfloat\t\t$vatrate\t\t        Vat rate. Can be '8.5' or '8.5 (VATCODEX)' for example\n * \t@param  int\t\t\t$local\t\t         \tLocal tax to search and return (1 or 2 return only tax rate 1 or tax rate 2)\n *  @param  Societe\t\t$thirdparty_buyer    \tObject of buying third party\n *  @param\tSociete\t\t$thirdparty_seller\t\tObject of selling third party ($mysoc if not defined)\n *  @param\tint\t\t\t$vatnpr\t\t\t\t\tIf vat rate is NPR or not\n * \t@return\tmixed\t\t\t   \t\t\t\t\t0 if not found, localtax rate if found\n *  @see get_default_tva()\n */\nfunction get_localtax($vatrate, $local, $thirdparty_buyer = \"\", $thirdparty_seller = \"\", $vatnpr = 0)\n{\n\tglobal $db, $conf, $mysoc;\n\n\tif (empty($thirdparty_seller) || !is_object($thirdparty_seller)) $thirdparty_seller = $mysoc;\n\n\tdol_syslog(\"get_localtax tva=\".$vatrate.\" local=\".$local.\" thirdparty_buyer id=\".(is_object($thirdparty_buyer) ? $thirdparty_buyer->id : '').\"/country_code=\".(is_object($thirdparty_buyer) ? $thirdparty_buyer->country_code : '').\" thirdparty_seller id=\".$thirdparty_seller->id.\"/country_code=\".$thirdparty_seller->country_code.\" thirdparty_seller localtax1_assuj=\".$thirdparty_seller->localtax1_assuj.\"  thirdparty_seller localtax2_assuj=\".$thirdparty_seller->localtax2_assuj);\n\n\t$vatratecleaned = $vatrate;\n\t$reg = array();\n\tif (preg_match('/^(.*)\\s*\\((.*)\\)$/', $vatrate, $reg))      // If vat is \"xx (yy)\"\n\t{\n\t\t$vatratecleaned = trim($reg[1]);\n\t\t$vatratecode = $reg[2];\n\t}\n\n\t/*if ($thirdparty_buyer->country_code != $thirdparty_seller->country_code)\n\t{\n\t\treturn 0;\n\t}*/\n\n\t// Some test to guess with no need to make database access\n\tif ($mysoc->country_code == 'ES') // For spain localtaxes 1 and 2, tax is qualified if buyer use local tax\n\t{\n\t\tif ($local == 1)\n\t\t{\n\t\t\tif (!$mysoc->localtax1_assuj || (string) $vatratecleaned == \"0\") return 0;\n\t\t\tif ($thirdparty_seller->id == $mysoc->id)\n\t\t\t{\n\t\t\t\tif (!$thirdparty_buyer->localtax1_assuj) return 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!$thirdparty_seller->localtax1_assuj) return 0;\n\t\t\t}\n\t\t}\n\n\t\tif ($local == 2)\n\t\t{\n\t\t\t//if (! $mysoc->localtax2_assuj || (string) $vatratecleaned == \"0\") return 0;\n\t\t\tif (!$mysoc->localtax2_assuj) return 0; // If main vat is 0, IRPF may be different than 0.\n\t\t\tif ($thirdparty_seller->id == $mysoc->id)\n\t\t\t{\n\t\t\t\tif (!$thirdparty_buyer->localtax2_assuj) return 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!$thirdparty_seller->localtax2_assuj) return 0;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($local == 1 && !$thirdparty_seller->localtax1_assuj) return 0;\n\t\tif ($local == 2 && !$thirdparty_seller->localtax2_assuj) return 0;\n\t}\n\n\t// For some country MAIN_GET_LOCALTAXES_VALUES_FROM_THIRDPARTY is forced to on.\n\tif (in_array($mysoc->country_code, array('ES')))\n\t{\n\t\t$conf->global->MAIN_GET_LOCALTAXES_VALUES_FROM_THIRDPARTY = 1;\n\t}\n\n\t// Search local taxes\n\tif (!empty($conf->global->MAIN_GET_LOCALTAXES_VALUES_FROM_THIRDPARTY))\n\t{\n\t\tif ($local == 1)\n\t\t{\n\t\t\tif ($thirdparty_seller != $mysoc)\n\t\t\t{\n\t\t\t\tif (!isOnlyOneLocalTax($local))  // TODO We should provide $vatrate to search on correct line and not always on line with highest vat rate\n\t\t\t\t{\n\t\t\t\t\treturn $thirdparty_seller->localtax1_value;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse  // i am the seller\n\t\t\t{\n\t\t\t\tif (!isOnlyOneLocalTax($local))  // TODO If seller is me, why not always returning this, even if there is only one locatax vat.\n\t\t\t\t{\n\t\t\t\t\treturn $conf->global->MAIN_INFO_VALUE_LOCALTAX1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($local == 2)\n\t\t{\n\t\t\tif ($thirdparty_seller != $mysoc)\n\t\t\t{\n\t\t\t\tif (!isOnlyOneLocalTax($local))  // TODO We should provide $vatrate to search on correct line and not always on line with highest vat rate\n\t\t\t\t// TODO We should also return value defined on thirdparty only if defined\n\t\t\t\t{\n\t\t\t\t\treturn $thirdparty_seller->localtax2_value;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse  // i am the seller\n\t\t\t{\n\t\t\t\tif (in_array($mysoc->country_code, array('ES')))\n\t\t\t\t{\n\t\t\t\t\treturn $thirdparty_buyer->localtax2_value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn $conf->global->MAIN_INFO_VALUE_LOCALTAX2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// By default, search value of local tax on line of common tax\n\t$sql = \"SELECT t.localtax1, t.localtax2, t.localtax1_type, t.localtax2_type\";\n   \t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n   \t$sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($thirdparty_seller->country_code).\"'\";\n   \t$sql .= \" AND t.taux = \".((float) $vatratecleaned).\" AND t.active = 1\";\n   \tif ($vatratecode) $sql .= \" AND t.code ='\".$db->escape($vatratecode).\"'\"; // If we have the code, we use it in priority\n   \telse $sql .= \" AND t.recuperableonly ='\".$db->escape($vatnpr).\"'\";\n   \tdol_syslog(\"get_localtax\", LOG_DEBUG);\n   \t$resql = $db->query($sql);\n\n   \tif ($resql)\n   \t{\n   \t\t$obj = $db->fetch_object($resql);\n   \t\tif ($local == 1) return $obj->localtax1;\n   \t\telseif ($local == 2) return $obj->localtax2;\n\t}\n\n\treturn 0;\n}\n\n\n/**\n * Return true if LocalTax (1 or 2) is unique.\n * Example: If localtax1 is 5 on line with highest common vat rate, return true\n * Example: If localtax1 is 5:8:15 on line with highest common vat rate, return false\n *\n * @param   int \t$local\tLocal tax to test (1 or 2)\n * @return  boolean \t\tTrue if LocalTax have multiple values, False if not\n */\nfunction isOnlyOneLocalTax($local)\n{\n\t$tax = get_localtax_by_third($local);\n\n\t$valors = explode(\":\", $tax);\n\n\tif (count($valors) > 1)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\n/**\n * Get values of localtaxes (1 or 2) for company country for the common vat with the highest value\n *\n * @param\tint\t\t$local \tLocalTax to get\n * @return\tnumber\t\t\tValues of localtax\n */\nfunction get_localtax_by_third($local)\n{\n\tglobal $db, $mysoc;\n\t$sql = \"SELECT t.localtax1, t.localtax2 \";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t inner join \".MAIN_DB_PREFIX.\"c_country as c ON c.rowid=t.fk_pays\";\n\t$sql .= \" WHERE c.code = '\".$mysoc->country_code.\"' AND t.active = 1 AND t.taux=(\";\n\t$sql .= \"  SELECT max(tt.taux) FROM \".MAIN_DB_PREFIX.\"c_tva as tt inner join \".MAIN_DB_PREFIX.\"c_country as c ON c.rowid=tt.fk_pays\";\n\t$sql .= \"  WHERE c.code = '\".$mysoc->country_code.\"' AND tt.active = 1\";\n\t$sql .= \"  )\";\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($local == 1) return $obj->localtax1;\n\t\telseif ($local == 2) return $obj->localtax2;\n\t}\n\n\treturn 0;\n}\n\n\n/**\n *  Get vat main information from Id.\n *  You can call getLocalTaxesFromRate after to get other fields.\n *\n *  @param\tint|string  $vatrate\t\t    VAT ID or Rate. Value can be value or the string with code into parenthesis or rowid if $firstparamisid is 1. Example: '8.5' or '8.5 (8.5NPR)' or 123.\n *  @param\tSociete\t    $buyer         \t\tCompany object\n *  @param\tSociete\t    $seller        \t\tCompany object\n *  @param  int         $firstparamisid     1 if first param is id into table (use this if you can)\n *  @return\tarray       \t  \t\t\t\tarray('rowid'=> , 'code'=> ...)\n *  @see getLocalTaxesFromRate()\n */\nfunction getTaxesFromId($vatrate, $buyer = null, $seller = null, $firstparamisid = 1)\n{\n\tglobal $db, $mysoc;\n\n\tdol_syslog(\"getTaxesFromId vat id or rate = \".$vatrate);\n\n\t// Search local taxes\n\t$sql = \"SELECT t.rowid, t.code, t.taux as rate, t.recuperableonly as npr, t.accountancy_code_sell, t.accountancy_code_buy\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t\";\n\tif ($firstparamisid) $sql .= \" WHERE t.rowid = \".(int) $vatrate;\n\telse\n\t{\n\t\t$vatratecleaned = $vatrate;\n\t\t$vatratecode = '';\n\t\tif (preg_match('/^(.*)\\s*\\((.*)\\)$/', $vatrate, $reg))      // If vat is \"xx (yy)\"\n\t\t{\n\t\t\t$vatratecleaned = $reg[1];\n\t\t\t$vatratecode = $reg[2];\n\t\t}\n\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t/*if ($mysoc->country_code == 'ES') $sql.= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$buyer->country_code.\"'\";    // vat in spain use the buyer country ??\n\t\telse $sql.= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$seller->country_code.\"'\";*/\n\t\t$sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$seller->country_code.\"'\";\n\t\t$sql .= \" AND t.taux = \".((float) $vatratecleaned).\" AND t.active = 1\";\n\t\tif ($vatratecode) $sql .= \" AND t.code = '\".$vatratecode.\"'\";\n\t}\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($obj) return array('rowid'=>$obj->rowid, 'code'=>$obj->code, 'rate'=>$obj->rate, 'npr'=>$obj->npr, 'accountancy_code_sell'=>$obj->accountancy_code_sell, 'accountancy_code_buy'=>$obj->accountancy_code_buy);\n\t\telse return array();\n\t}\n\telse dol_print_error($db);\n\n\treturn array();\n}\n\n/**\n *  Get type and rate of localtaxes for a particular vat rate/country of a thirdparty.\n *  This does not take into account the seller setup if subject to vat or not, only country.\n *  TODO\n *  This function is ALSO called to retrieve type for building PDF. Such call of function must be removed.\n *  Instead this function must be called when adding a line to get the array of localtax and type, and then\n *  provide it to the function calcul_price_total.\n *\n *  @param\tint|string  $vatrate\t\t\tVAT ID or Rate+Code. Value can be value or the string with code into parenthesis or rowid if $firstparamisid is 1. Example: '8.5' or '8.5 (8.5NPR)' or 123.\n *  @param\tint\t\t    $local              Number of localtax (1 or 2, or 0 to return 1 & 2)\n *  @param\tSociete\t    $buyer         \t\tCompany object\n *  @param\tSociete\t    $seller        \t\tCompany object\n *  @param  int         $firstparamisid     1 if first param is ID into table instead of Rate+code (use this if you can)\n *  @return\tarray    \t    \t\t\t\tarray(localtax_type1(1-6/0 if not found), rate localtax1, localtax_type2, rate localtax2, accountancycodecust, accountancycodesupp)\n *  @see getTaxesFromId()\n */\nfunction getLocalTaxesFromRate($vatrate, $local, $buyer, $seller, $firstparamisid = 0)\n{\n\tglobal $db, $mysoc;\n\n\tdol_syslog(\"getLocalTaxesFromRate vatrate=\".$vatrate.\" local=\".$local);\n\n\t// Search local taxes\n\t$sql  = \"SELECT t.taux as rate, t.code, t.localtax1, t.localtax1_type, t.localtax2, t.localtax2_type, t.accountancy_code_sell, t.accountancy_code_buy\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t\";\n\tif ($firstparamisid) $sql .= \" WHERE t.rowid = \".(int) $vatrate;\n\telse\n\t{\n\t\t$vatratecleaned = $vatrate;\n\t\t$vatratecode = '';\n\t\t$reg = array();\n\t\tif (preg_match('/^(.*)\\s*\\((.*)\\)$/', $vatrate, $reg))      // If vat is \"x.x (yy)\"\n\t\t{\n\t\t\t$vatratecleaned = $reg[1];\n\t\t\t$vatratecode = $reg[2];\n\t\t}\n\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\tif ($mysoc->country_code == 'ES') $sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($buyer->country_code).\"'\"; // local tax in spain use the buyer country ??\n\t\telse $sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($seller->country_code).\"'\";\n\t\t$sql .= \" AND t.taux = \".((float) $vatratecleaned).\" AND t.active = 1\";\n\t\tif ($vatratecode) $sql .= \" AND t.code = '\".$db->escape($vatratecode).\"'\";\n\t}\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\n\t\t$vateratestring = $obj->rate.($obj->code ? ' ('.$obj->code.')' : '');\n\n\t\tif ($local == 1)\n\t\t{\n\t\t\treturn array($obj->localtax1_type, get_localtax($vateratestring, $local, $buyer, $seller), $obj->accountancy_code_sell, $obj->accountancy_code_buy);\n\t\t}\n\t\telseif ($local == 2)\n\t\t{\n\t\t\treturn array($obj->localtax2_type, get_localtax($vateratestring, $local, $buyer, $seller), $obj->accountancy_code_sell, $obj->accountancy_code_buy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn array($obj->localtax1_type, get_localtax($vateratestring, 1, $buyer, $seller), $obj->localtax2_type, get_localtax($vateratestring, 2, $buyer, $seller), $obj->accountancy_code_sell, $obj->accountancy_code_buy);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tReturn vat rate of a product in a particular selling country or default country vat if product is unknown\n *  Function called by get_default_tva\n *\n *  @param\tint\t\t\t$idprod          \tId of product or 0 if not a predefined product\n *  @param  Societe\t\t$thirdparty_seller  Thirdparty with a ->country_code defined (FR, US, IT, ...)\n *\t@param\tint\t\t\t$idprodfournprice\tId product_fournisseur_price (for \"supplier\" proposal/order/invoice)\n *  @return float|string   \t\t\t\t    Vat rate to use with format 5.0 or '5.0 (XXX)'\n *  @see get_product_localtax_for_country()\n */\nfunction get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice = 0)\n{\n\tglobal $db, $conf, $mysoc;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n\n\t$ret = 0;\n\t$found = 0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product = new Product($db);\n\t\t$result = $product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\tif ($idprodfournprice > 0)     // We want vat for product for a \"supplier\" object\n\t\t\t{\n\t\t\t\t$product->get_buyprice($idprodfournprice, 0, 0, 0);\n\t\t\t\t$ret = $product->vatrate_supplier;\n\t\t\t\tif ($product->default_vat_code) $ret .= ' ('.$product->default_vat_code.')';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ret = $product->tva_tx; // Default vat of product we defined\n\t\t\t\tif ($product->default_vat_code) $ret .= ' ('.$product->default_vat_code.')';\n\t\t\t}\n\t\t\t$found = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product. Vat for couple countrycode/product is a feature not implemeted yet.\n\t\t\t// May be usefull/required if hidden option SERVICE_ARE_ECOMMERCE_200238EC is on\n\t\t}\n\t}\n\n\tif (!$found)\n\t{\n\t\tif (empty($conf->global->MAIN_VAT_DEFAULT_IF_AUTODETECT_FAILS))\n\t\t{\n\t\t\t// If vat of product for the country not found or not defined, we return the first higher vat of country.\n\t\t\t$sql = \"SELECT t.taux as vat_rate, t.code as default_vat_code\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t\t$sql .= \" WHERE t.active=1 AND t.fk_pays = c.rowid AND c.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t\t$sql .= \" ORDER BY t.taux DESC, t.code ASC, t.recuperableonly ASC\";\n\t\t\t$sql .= $db->plimit(1);\n\n\t\t\t$resql = $db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$obj = $db->fetch_object($resql);\n\t\t\t\tif ($obj)\n\t\t\t\t{\n\t\t\t\t\t$ret = $obj->vat_rate;\n\t\t\t\t\tif ($obj->default_vat_code) $ret .= ' ('.$obj->default_vat_code.')';\n\t\t\t\t}\n\t\t\t\t$db->free($sql);\n\t\t\t}\n\t\t\telse dol_print_error($db);\n\t\t}\n\t\telse $ret = $conf->global->MAIN_VAT_DEFAULT_IF_AUTODETECT_FAILS; // Forced value if autodetect fails\n\t}\n\n\tdol_syslog(\"get_product_vat_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tReturn localtax vat rate of a product in a particular selling country or default country vat if product is unknown\n *\n *  @param\tint\t\t$idprod         \t\tId of product\n *  @param  int\t\t$local          \t\t1 for localtax1, 2 for localtax 2\n *  @param  Societe\t$thirdparty_seller    \tThirdparty with a ->country_code defined (FR, US, IT, ...)\n *  @return int             \t\t\t\t<0 if KO, Vat rate if OK\n *  @see get_product_vat_for_country()\n */\nfunction get_product_localtax_for_country($idprod, $local, $thirdparty_seller)\n{\n\tglobal $db, $mysoc;\n\n\tif (!class_exists('Product')) {\n\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n\t}\n\n\t$ret = 0;\n\t$found = 0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product = new Product($db);\n\t\t$result = $product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\t/* Not defined yet, so we don't use this\n\t\t\tif ($local==1) $ret=$product->localtax1_tx;\n\t\t\telseif ($local==2) $ret=$product->localtax2_tx;\n\t\t\t$found=1;\n\t\t\t*/\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product\n\t\t}\n\t}\n\n\tif (!$found)\n\t{\n\t\t// If vat of product for the country not found or not defined, we return higher vat of country.\n\t\t$sql = \"SELECT taux as vat_rate, localtax1, localtax2\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t$sql .= \" WHERE t.active=1 AND t.fk_pays = c.rowid AND c.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t$sql .= \" ORDER BY t.taux DESC, t.recuperableonly ASC\";\n\t\t$sql .= $db->plimit(1);\n\n\t\t$resql = $db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $db->fetch_object($resql);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\tif ($local == 1) $ret = $obj->localtax1;\n\t\t\t\telseif ($local == 2) $ret = $obj->localtax2;\n\t\t\t}\n\t\t}\n\t\telse dol_print_error($db);\n\t}\n\n\tdol_syslog(\"get_product_localtax_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tFunction that return vat rate of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier ou entreprise sans num TVA intra) alors TVA par defaut=TVA du produit vendu. Fin de regle\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise avec num TVA) intra alors TVA par defaut=0. Fin de regle\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@param\tint\t\t\t$idprodfournprice\t\tId product_fournisseur_price (for supplier order/invoice)\n *\t@return float|string   \t\t\t\t      \tVat rate to use with format 5.0 or '5.0 (XXX)', -1 if we can't guess it\n *  @see get_default_npr(), get_default_localtax()\n */\nfunction get_default_tva(Societe $thirdparty_seller, Societe $thirdparty_buyer, $idprod = 0, $idprodfournprice = 0)\n{\n\tglobal $conf;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\n\n\t// Note: possible values for tva_assuj are 0/1 or franchise/reel\n\t$seller_use_vat = ((is_numeric($thirdparty_seller->tva_assuj) && !$thirdparty_seller->tva_assuj) || (!is_numeric($thirdparty_seller->tva_assuj) && $thirdparty_seller->tva_assuj == 'franchise')) ? 0 : 1;\n\n\t$seller_country_code = $thirdparty_seller->country_code;\n\t$seller_in_cee = isInEEC($thirdparty_seller);\n\n\t$buyer_country_code = $thirdparty_buyer->country_code;\n\t$buyer_in_cee = isInEEC($thirdparty_buyer);\n\n\tdol_syslog(\"get_default_tva: seller use vat=\".$seller_use_vat.\", seller country=\".$seller_country_code.\", seller in cee=\".$seller_in_cee.\", buyer vat number=\".$thirdparty_buyer->tva_intra.\" buyer country=\".$buyer_country_code.\", buyer in cee=\".$buyer_in_cee.\", idprod=\".$idprod.\", idprodfournprice=\".$idprodfournprice.\", SERVICE_ARE_ECOMMERCE_200238EC=\".(!empty($conf->global->SERVICES_ARE_ECOMMERCE_200238EC) ? $conf->global->SERVICES_ARE_ECOMMERCE_200238EC : ''));\n\n\t// If services are eServices according to EU Council Directive 2002/38/EC (http://ec.europa.eu/taxation_customs/taxation/vat/traders/e-commerce/article_1610_en.htm)\n\t// we use the buyer VAT.\n\tif (!empty($conf->global->SERVICE_ARE_ECOMMERCE_200238EC))\n\t{\n\t\tif ($seller_in_cee && $buyer_in_cee && !$thirdparty_buyer->isACompany())\n\t\t{\n\t\t\t//print 'VATRULE 0';\n\t\t\treturn get_product_vat_for_country($idprod, $thirdparty_buyer, $idprodfournprice);\n\t\t}\n\t}\n\n\t// If seller does not use VAT\n\tif (!$seller_use_vat)\n\t{\n\t\t//print 'VATRULE 1';\n\t\treturn 0;\n\t}\n\n\t// Le test ci-dessus ne devrait pas etre necessaire. Me signaler l'exemple du cas juridique concerne si le test suivant n'est pas suffisant.\n\n\t// Si le (pays vendeur = pays acheteur) alors la TVA par defaut=TVA du produit vendu. Fin de regle.\n\tif (($seller_country_code == $buyer_country_code)\n\t|| (in_array($seller_country_code, array('FR,MC')) && in_array($buyer_country_code, array('FR', 'MC')))) // Warning ->country_code not always defined\n\t{\n\t\t//print 'VATRULE 2';\n\t\treturn get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice);\n\t}\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par l'acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n\t// Not supported\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise) alors TVA par defaut=0. Fin de regle\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier) alors TVA par defaut=TVA du produit vendu. Fin de regle\n\tif (($seller_in_cee && $buyer_in_cee))\n\t{\n\t\t$isacompany = $thirdparty_buyer->isACompany();\n\t\tif ($isacompany)\n\t\t{\n\t\t\t//print 'VATRULE 3';\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//print 'VATRULE 4';\n\t\t\treturn get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice);\n\t\t}\n\t}\n\n\t// Si (vendeur en France et acheteur hors Communaute europeenne et acheteur particulier) alors TVA par defaut=TVA du produit vendu. Fin de regle\n\tif (!empty($conf->global->MAIN_USE_VAT_OF_PRODUCT_FOR_INDIVIDUAL_CUSTOMER_OUT_OF_EEC) && empty($buyer_in_cee) && !$thirdparty_buyer->isACompany()) {\n\t\treturn get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice);\n\t}\n\n\t// Sinon la TVA proposee par defaut=0. Fin de regle.\n\t// Rem: Cela signifie qu'au moins un des 2 est hors Communaute europeenne et que le pays differe\n\t//print 'VATRULE 5';\n\treturn 0;\n}\n\n\n/**\n *\tFonction qui renvoie si tva doit etre tva percue recuperable\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tThirdparty seller\n *\t@param  Societe\t\t$thirdparty_buyer   \tThirdparty buyer\n *  @param  int\t\t\t$idprod                 Id product\n *  @param\tint\t\t\t$idprodfournprice\t\tId supplier price for product\n *\t@return float       \t\t\t        \t0 or 1\n *  @see get_default_tva(), get_default_localtax()\n */\nfunction get_default_npr(Societe $thirdparty_seller, Societe $thirdparty_buyer, $idprod = 0, $idprodfournprice = 0)\n{\n\tglobal $db;\n\n\tif ($idprodfournprice > 0)\n\t{\n\t\tif (!class_exists('ProductFournisseur')) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/fourn/class/fournisseur.product.class.php';\n\t\t}\n\t\t$prodprice = new ProductFournisseur($db);\n\t\t$prodprice->fetch_product_fournisseur_price($idprodfournprice);\n\t\treturn $prodprice->fourn_tva_npr;\n\t}\n\telseif ($idprod > 0)\n\t{\n\t\tif (!class_exists('Product')) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n\t\t}\n\t\t$prod = new Product($db);\n\t\t$prod->fetch($idprod);\n\t\treturn $prod->tva_npr;\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tFunction that return localtax of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tThirdparty seller\n *\t@param  Societe\t\t$thirdparty_buyer   \tThirdparty buyer\n *  @param\tint\t\t\t$local\t\t\t\t\tLocaltax to process (1 or 2)\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@return integer        \t\t\t\t       \tlocaltax, -1 si ne peut etre determine\n *  @see get_default_tva(), get_default_npr()\n */\nfunction get_default_localtax($thirdparty_seller, $thirdparty_buyer, $local, $idprod = 0)\n{\n\tglobal $mysoc;\n\n\tif (!is_object($thirdparty_seller)) return -1;\n\tif (!is_object($thirdparty_buyer)) return -1;\n\n\tif ($local == 1) // Localtax 1\n\t{\n\t\tif ($mysoc->country_code == 'ES')\n\t\t{\n\t\t\tif (is_numeric($thirdparty_buyer->localtax1_assuj) && !$thirdparty_buyer->localtax1_assuj) return 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Si vendeur non assujeti a Localtax1, localtax1 par default=0\n\t\t\tif (is_numeric($thirdparty_seller->localtax1_assuj) && !$thirdparty_seller->localtax1_assuj) return 0;\n\t\t\tif (!is_numeric($thirdparty_seller->localtax1_assuj) && $thirdparty_seller->localtax1_assuj == 'localtax1off') return 0;\n\t\t}\n\t}\n\telseif ($local == 2) //I Localtax 2\n\t{\n\t\t// Si vendeur non assujeti a Localtax2, localtax2 par default=0\n\t\tif (is_numeric($thirdparty_seller->localtax2_assuj) && !$thirdparty_seller->localtax2_assuj) return 0;\n\t\tif (!is_numeric($thirdparty_seller->localtax2_assuj) && $thirdparty_seller->localtax2_assuj == 'localtax2off') return 0;\n\t}\n\n\tif ($thirdparty_seller->country_code == $thirdparty_buyer->country_code)\n\t{\n\t\treturn get_product_localtax_for_country($idprod, $local, $thirdparty_seller);\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tReturn yes or no in current language\n *\n *\t@param\tstring|int\t$yesno\t\t\tValue to test (1, 'yes', 'true' or 0, 'no', 'false')\n *\t@param\tinteger\t\t$case\t\t\t1=Yes/No, 0=yes/no, 2=Disabled checkbox, 3=Disabled checkbox + Yes/No\n *\t@param\tint\t\t\t$color\t\t\t0=texte only, 1=Text is formated with a color font style ('ok' or 'error'), 2=Text is formated with 'ok' color.\n *\t@return\tstring\t\t\t\t\t\tHTML string\n */\nfunction yn($yesno, $case = 1, $color = 0)\n{\n\tglobal $langs;\n\t$result = 'unknown'; $classname = '';\n\tif ($yesno == 1 || strtolower($yesno) == 'yes' || strtolower($yesno) == 'true') \t// A mettre avant test sur no a cause du == 0\n\t{\n\t\t$result = $langs->trans('yes');\n\t\tif ($case == 1 || $case == 3) $result = $langs->trans(\"Yes\");\n\t\tif ($case == 2) $result = '<input type=\"checkbox\" value=\"1\" checked disabled>';\n\t\tif ($case == 3) $result = '<input type=\"checkbox\" value=\"1\" checked disabled> '.$result;\n\n\t\t$classname = 'ok';\n\t}\n\telseif ($yesno == 0 || strtolower($yesno) == 'no' || strtolower($yesno) == 'false')\n\t{\n\t\t$result = $langs->trans(\"no\");\n\t\tif ($case == 1 || $case == 3) $result = $langs->trans(\"No\");\n\t\tif ($case == 2) $result = '<input type=\"checkbox\" value=\"0\" disabled>';\n\t\tif ($case == 3) $result = '<input type=\"checkbox\" value=\"0\" disabled> '.$result;\n\n\t\tif ($color == 2) $classname = 'ok';\n\t\telse $classname = 'error';\n\t}\n\tif ($color) return '<font class=\"'.$classname.'\">'.$result.'</font>';\n\treturn $result;\n}\n\n/**\n *\tReturn a path to have a the directory according to object where files are stored.\n *  New usage:       $conf->module->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 1, $object, $modulepart)\n *         or:       $conf->module->dir_output.'/'.get_exdir(0, 0, 0, 1, $object, $modulepart)     if multidir_output not defined.\n *  Example our with new usage:       $object is invoice -> 'INYYMM-ABCD'\n *  Example our with old usage:       '015' with level 3->\"0/1/5/\", '015' with level 1->\"5/\", 'ABC-1' with level 3 ->\"0/0/1/\"\n *\n *\t@param\tstring\t$num            Id of object (deprecated, $object will be used in future)\n *\t@param  int\t\t$level\t\t    Level of subdirs to return (1, 2 or 3 levels). (deprecated, global option will be used in future)\n * \t@param\tint\t\t$alpha\t\t    0=Keep number only to forge path, 1=Use alpha part afer the - (By default, use 0). (deprecated, global option will be used in future)\n *  @param  int\t\t$withoutslash   0=With slash at end (except if '/', we return ''), 1=without slash at end\n *  @param\tObject\t$object\t\t\tObject\n *  @param\tstring\t$modulepart\t\tType of object ('invoice_supplier, 'donation', 'invoice', ...')\n *  @return\tstring\t\t\t\t\tDir to use ending. Example '' or '1/' or '1/2/'\n */\nfunction get_exdir($num, $level, $alpha, $withoutslash, $object, $modulepart)\n{\n\tglobal $conf;\n\n\t$path = '';\n\n\t$arrayforoldpath = array('cheque', 'user', 'category', 'holiday', 'supplier_invoice', 'invoice_supplier', 'mailing', 'supplier_payment');\n\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) $arrayforoldpath[] = 'product';\n\tif (!empty($level) && in_array($modulepart, $arrayforoldpath))\n\t{\n\t\t// This part should be removed once all code is using \"get_exdir\" to forge path, with all parameters provided.\n\t\tif (empty($alpha)) $num = preg_replace('/([^0-9])/i', '', $num);\n\t\telse $num = preg_replace('/^.*\\-/i', '', $num);\n\t\t$num = substr(\"000\".$num, -$level);\n\t\tif ($level == 1) $path = substr($num, 0, 1);\n\t\tif ($level == 2) $path = substr($num, 1, 1).'/'.substr($num, 0, 1);\n\t\tif ($level == 3) $path = substr($num, 2, 1).'/'.substr($num, 1, 1).'/'.substr($num, 0, 1);\n\t}\n\telse\n\t{\n\t\t// TODO\n\t\t// We will enhance here a common way of forging path for document storage\n\t\t// Here, object->id, object->ref and modulepart are required.\n\t\t//var_dump($modulepart);\n        if (in_array($modulepart, array('thirdparty', 'contact', 'member', 'propal', 'proposal', 'commande', 'order', 'facture', 'invoice',\n\t\t\t'supplier_order', 'supplier_proposal', 'shipment', 'contract', 'expensereport', 'ficheinter')))\n\t\t{\n\t\t\t$path = ($object->ref ? $object->ref : $object->id);\n\t\t}\n\t}\n\n\tif (empty($withoutslash) && !empty($path)) $path .= '/';\n\n\treturn $path;\n}\n\n/**\n *\tCreation of a directory (this can create recursive subdir)\n *\n *\t@param\tstring\t\t$dir\t\tDirectory to create (Separator must be '/'. Example: '/mydir/mysubdir')\n *\t@param\tstring\t\t$dataroot\tData root directory (To avoid having the data root in the loop. Using this will also lost the warning on first dir PHP has no permission when open_basedir is used)\n *  @param\tstring|null\t$newmask\tMask for new file (Defaults to $conf->global->MAIN_UMASK or 0755 if unavailable). Example: '0444'\n *\t@return int         \t\t\t< 0 if KO, 0 = already exists, > 0 if OK\n */\nfunction dol_mkdir($dir, $dataroot = '', $newmask = null)\n{\n\tglobal $conf;\n\n\tdol_syslog(\"functions.lib::dol_mkdir: dir=\".$dir, LOG_INFO);\n\n\t$dir_osencoded = dol_osencode($dir);\n\tif (@is_dir($dir_osencoded)) return 0;\n\n\t$nberr = 0;\n\t$nbcreated = 0;\n\n\t$ccdir = '';\n\tif (!empty($dataroot)) {\n\t\t// Remove data root from loop\n\t\t$dir = str_replace($dataroot.'/', '', $dir);\n\t\t$ccdir = $dataroot.'/';\n\t}\n\n\t$cdir = explode(\"/\", $dir);\n\t$num = count($cdir);\n\tfor ($i = 0; $i < $num; $i++)\n\t{\n\t\tif ($i > 0) $ccdir .= '/'.$cdir[$i];\n\t\telse $ccdir .= $cdir[$i];\n\t\tif (preg_match(\"/^.:$/\", $ccdir, $regs)) continue; // Si chemin Windows incomplet, on poursuit par rep suivant\n\n\t\t// Attention, le is_dir() peut echouer bien que le rep existe.\n\t\t// (ex selon config de open_basedir)\n\t\tif ($ccdir)\n\t\t{\n\t\t\t$ccdir_osencoded = dol_osencode($ccdir);\n\t\t\tif (!@is_dir($ccdir_osencoded))\n\t\t\t{\n\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' does not exists or is outside open_basedir PHP setting.\", LOG_DEBUG);\n\n\t\t\t\tumask(0);\n\t\t\t\t$dirmaskdec = octdec($newmask);\n\t\t\t\tif (empty($newmask)) {\n\t\t\t\t\t$dirmaskdec = empty($conf->global->MAIN_UMASK) ? octdec('0755') : octdec($conf->global->MAIN_UMASK);\n\t\t\t\t}\n\t\t\t\t$dirmaskdec |= octdec('0111'); // Set x bit required for directories\n\t\t\t\tif (!@mkdir($ccdir_osencoded, $dirmaskdec))\n\t\t\t\t{\n\t\t\t\t\t// Si le is_dir a renvoye une fausse info, alors on passe ici.\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Fails to create directory '\".$ccdir.\"' or directory already exists.\", LOG_WARNING);\n\t\t\t\t\t$nberr++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' created\", LOG_DEBUG);\n\t\t\t\t\t$nberr = 0; // On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignore\n\t\t\t\t\t$nbcreated++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$nberr = 0; // On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignores\n\t\t\t}\n\t\t}\n\t}\n\treturn ($nberr ? -$nberr : $nbcreated);\n}\n\n\n/**\n *\tReturn picto saying a field is required\n *\n *\t@return  string\t\tChaine avec picto obligatoire\n */\nfunction picto_required()\n{\n\treturn '<span class=\"fieldrequired\">*</span>';\n}\n\n\n/**\n *\tClean a string from all HTML tags and entities.\n *  This function differs from strip_tags because:\n *  - <br> are replaced with \\n if removelinefeed=0 or 1\n *  - if entities are found, they are decoded BEFORE the strip\n *  - you can decide to convert line feed into a space\n *\n *\t@param\tstring\t$stringtoclean\t\tString to clean\n *\t@param\tinteger\t$removelinefeed\t\t1=Replace all new lines by 1 space, 0=Only ending new lines are removed others are replaced with \\n, 2=Ending new lines are removed but others are kept with a same number of \\n than nb of <br> when there is both \"...<br>\\n...\"\n *  @param  string\t$pagecodeto      \tEncoding of input/output string\n *  @param\tinteger\t$strip_tags\t\t\t0=Use internal strip, 1=Use strip_tags() php function (bugged when text contains a < char that is not for a html tag)\n *  @param\tinteger\t$removedoublespaces\tReplace double space into one space\n *\t@return string\t    \t\t\t\tString cleaned\n *\n * \t@see\tdol_escape_htmltag() strip_tags() dol_string_onlythesehtmltags() dol_string_neverthesehtmltags()\n */\nfunction dol_string_nohtmltag($stringtoclean, $removelinefeed = 1, $pagecodeto = 'UTF-8', $strip_tags = 0, $removedoublespaces = 1)\n{\n\tif ($removelinefeed == 2) $stringtoclean = preg_replace('/<br[^>]*>(\\n|\\r)+/ims', '<br>', $stringtoclean);\n\t$temp = preg_replace('/<br[^>]*>/i', \"\\n\", $stringtoclean);\n\n\tif ($strip_tags) {\n\t\t$temp = strip_tags($temp);\n\t} else {\n\t\t$pattern = \"/<[^<>]+>/\";\n\t\t// Exemple of $temp: <a href=\"/myurl\" title=\"<u>A title</u>\">0000-021</a>\n\t\t$temp = preg_replace($pattern, \"\", $temp); // pass 1\n\t\t// $temp after pass 1: <a href=\"/myurl\" title=\"A title\">0000-021\n\t\t$temp = preg_replace($pattern, \"\", $temp); // pass 2\n\t\t// $temp after pass 2: 0000-021\n\t}\n\n\t$temp = dol_html_entity_decode($temp, ENT_COMPAT, $pagecodeto);\n\n\t// Remove also carriage returns\n\tif ($removelinefeed == 1) $temp = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \" \", $temp);\n\n\t// And double quotes\n\tif ($removedoublespaces) {\n\t\twhile (strpos($temp, \"  \")) {\n\t\t\t$temp = str_replace(\"  \", \" \", $temp);\n\t\t}\n\t}\n\n\treturn trim($temp);\n}\n\n/**\n *\tClean a string to keep only desirable HTML tags.\n *\n *\t@param\tstring\t$stringtoclean\t\t\tString to clean\n *  @param\tstring\t$cleanalsosomestyles\tClean also some tags\n *\t@return string\t    \t\t\t\t\tString cleaned\n *\n * \t@see\tdol_escape_htmltag() strip_tags() dol_string_nohtmltag() dol_string_neverthesehtmltags()\n */\nfunction dol_string_onlythesehtmltags($stringtoclean, $cleanalsosomestyles = 1)\n{\n\t$allowed_tags = array(\n\t\t\"html\", \"head\", \"meta\", \"body\", \"article\", \"a\", \"abbr\", \"b\", \"blockquote\", \"br\", \"cite\", \"div\", \"dl\", \"dd\", \"dt\", \"em\", \"font\", \"img\", \"ins\", \"hr\", \"i\", \"li\", \"link\",\n\t\t\"ol\", \"p\", \"q\", \"s\", \"section\", \"span\", \"strike\", \"strong\", \"title\", \"table\", \"tr\", \"th\", \"td\", \"u\", \"ul\", \"sup\", \"sub\", \"blockquote\", \"pre\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"\n\t);\n\t$allowed_tags_string = join(\"><\", $allowed_tags);\n\t$allowed_tags_string = preg_replace('/^>/', '', $allowed_tags_string);\n\t$allowed_tags_string = preg_replace('/<$/', '', $allowed_tags_string);\n\t$allowed_tags_string = '<'.$allowed_tags_string.'>';\n\n\tif ($cleanalsosomestyles) {\n\t\t$stringtoclean = preg_replace('/position\\s*:\\s*(absolute|fixed)\\s*!\\s*important/', '', $stringtoclean); // Note: If hacker try to introduce css comment into string to bypass this regex, the string must also be encoded by the dol_htmlentitiesbr during output so it become harmless\n\t}\n\n\t$temp = strip_tags($stringtoclean, $allowed_tags_string);\n\n\treturn $temp;\n}\n\n/**\n *\tClean a string from some undesirable HTML tags.\n *  Note. Not enough secured as dol_string_onlythesehtmltags().\n *\n *\t@param\tstring\t$stringtoclean\t\t\tString to clean\n *  @param\tarray\t$disallowed_tags\t\tArray of tags not allowed\n *  @param\tstring\t$cleanalsosomestyles\tClean also some tags\n *\t@return string\t    \t\t\t\t\tString cleaned\n *\n * \t@see\tdol_escape_htmltag() strip_tags() dol_string_nohtmltag() dol_string_onlythesehtmltags()\n */\nfunction dol_string_neverthesehtmltags($stringtoclean, $disallowed_tags = array('textarea'), $cleanalsosomestyles = 0)\n{\n\t$temp = $stringtoclean;\n\tforeach ($disallowed_tags as $tagtoremove)\n\t{\n\t\t$temp = preg_replace('/<\\/?'.$tagtoremove.'>/', '', $temp);\n\t\t$temp = preg_replace('/<\\/?'.$tagtoremove.'\\s+[^>]*>/', '', $temp);\n\t}\n\n\tif ($cleanalsosomestyles) {\n\t\t$temp = preg_replace('/position\\s*:\\s*(absolute|fixed)\\s*!\\s*important/', '', $temp); // Note: If hacker try to introduce css comment into string to avoid this, string should be encoded by the dol_htmlentitiesbr so be harmless\n\t}\n\n\treturn $temp;\n}\n\n\n/**\n * Return first line of text. Cut will depends if content is HTML or not.\n *\n * @param \tstring\t$text\t\tInput text\n * @param\tint\t\t$nboflines  Nb of lines to get (default is 1 = first line only)\n * @param   string  $charset    Charset of $text string (UTF-8 by default)\n * @return\tstring\t\t\t\tOutput text\n * @see dol_nboflines_bis(), dol_string_nohtmltag(), dol_escape_htmltag()\n */\nfunction dolGetFirstLineOfText($text, $nboflines = 1, $charset = 'UTF-8')\n{\n\tif ($nboflines == 1)\n\t{\n\t\tif (dol_textishtml($text))\n\t\t{\n\t\t\t$firstline = preg_replace('/<br[^>]*>.*$/s', '', $text); // The s pattern modifier means the . can match newline characters\n\t\t\t$firstline = preg_replace('/<div[^>]*>.*$/s', '', $firstline); // The s pattern modifier means the . can match newline characters\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$firstline = preg_replace('/[\\n\\r].*/', '', $text);\n\t\t}\n\t\treturn $firstline.((strlen($firstline) != strlen($text)) ? '...' : '');\n\t}\n\telse\n\t{\n\t\t$ishtml = 0;\n\t\tif (dol_textishtml($text))\n\t\t{\n\t\t\t$text = preg_replace('/\\n/', '', $text);\n\t\t\t$ishtml = 1;\n\t\t\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \" \", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \"<br>\", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\t\t}\n\n\t\t$text = strtr($text, $repTable);\n\t\tif ($charset == 'UTF-8') { $pattern = '/(<br[^>]*>)/Uu'; }\t// /U is to have UNGREEDY regex to limit to one html tag. /u is for UTF8 support\n\t\telse $pattern = '/(<br[^>]*>)/U'; // /U is to have UNGREEDY regex to limit to one html tag.\n\t\t$a = preg_split($pattern, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\n\t\t$firstline = '';\n\t\t$i = 0;\n\t\t$nba = count($a); // 2x nb of lines in $a because $a contains also a line for each new line separator\n\t\twhile (($i < $nba) && ($i < ($nboflines * 2)))\n\t\t{\n\t\t\tif ($i % 2 == 0) $firstline .= $a[$i];\n\t\t\telseif (($i < (($nboflines * 2) - 1)) && ($i < ($nba - 1))) $firstline .= ($ishtml ? \"<br>\\n\" : \"\\n\");\n\t\t\t$i++;\n\t\t}\n\t\tunset($a);\n\t\treturn $firstline.(($i < $nba) ? '...' : '');\n\t}\n}\n\n\n/**\n * Replace CRLF in string with a HTML BR tag.\n * WARNING: The content after operation contains some HTML tags (the <br>) so be sure to also have encode the special chars of stringtoencode into HTML before.\n *\n * @param\tstring\t$stringtoencode\t\tString to encode\n * @param\tint     $nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br\n * @param   bool\t$forxml             false=Use <br>, true=Use <br />\n * @return\tstring\t\t\t\t\t\tString encoded\n * @see dol_nboflines(), dolGetFirstLineOfText()\n */\nfunction dol_nl2br($stringtoencode, $nl2brmode = 0, $forxml = false)\n{\n\tif (!$nl2brmode) {\n\t\treturn nl2br($stringtoencode, $forxml);\n\t} else {\n\t\t$ret = preg_replace('/(\\r\\n|\\r|\\n)/i', ($forxml ? '<br />' : '<br>'), $stringtoencode);\n\t\treturn $ret;\n\t}\n}\n\n\n/**\n *\tThis function is called to encode a string into a HTML string but differs from htmlentities because\n * \ta detection is done before to see if text is already HTML or not. Also, all entities but &,<,>,\" are converted.\n *  This permits to encode special chars to entities with no double encoding for already encoded HTML strings.\n * \tThis function also remove last EOL or BR if $removelasteolbr=1 (default).\n *  For PDF usage, you can show text by 2 ways:\n *              - writeHTMLCell -> param must be encoded into HTML.\n *              - MultiCell -> param must not be encoded into HTML.\n *              Because writeHTMLCell convert also \\n into <br>, if function\n *              is used to build PDF, nl2brmode must be 1.\n *\n *\t@param\tstring\t$stringtoencode\t\tString to encode\n *\t@param\tint\t\t$nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br (for use with FPDF writeHTMLCell function for example)\n *  @param  string\t$pagecodefrom       Pagecode stringtoencode is encoded\n *  @param\tint\t\t$removelasteolbr\t1=Remove last br or lasts \\n (default), 0=Do nothing\n *  @return\tstring\t\t\t\t\t\tString encoded\n */\nfunction dol_htmlentitiesbr($stringtoencode, $nl2brmode = 0, $pagecodefrom = 'UTF-8', $removelasteolbr = 1)\n{\n\t$newstring = $stringtoencode;\n\tif (dol_textishtml($stringtoencode))\t// Check if text is already HTML or not\n\t{\n\t\t$newstring = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i', '<br>', $newstring); // Replace \"<br type=\"_moz\" />\" by \"<br>\". It's same and avoid pb with FPDF.\n\t\tif ($removelasteolbr) $newstring = preg_replace('/<br>$/i', '', $newstring); // Remove last <br> (remove only last one)\n\t\t$newstring = strtr($newstring, array('&'=>'__and__', '<'=>'__lt__', '>'=>'__gt__', '\"'=>'__dquot__'));\n\t\t$newstring = dol_htmlentities($newstring, ENT_COMPAT, $pagecodefrom); // Make entity encoding\n\t\t$newstring = strtr($newstring, array('__and__'=>'&', '__lt__'=>'<', '__gt__'=>'>', '__dquot__'=>'\"'));\n\t}\n\telse\n\t{\n\t\tif ($removelasteolbr) $newstring = preg_replace('/(\\r\\n|\\r|\\n)$/i', '', $newstring); // Remove last \\n (may remove several)\n\t\t$newstring = dol_nl2br(dol_htmlentities($newstring, ENT_COMPAT, $pagecodefrom), $nl2brmode);\n\t}\n\t// Other substitutions that htmlentities does not do\n\t//$newstring=str_replace(chr(128),'&euro;',$newstring);\t// 128 = 0x80. Not in html entity table.     // Seems useles with TCPDF. Make bug with UTF8 languages\n\treturn $newstring;\n}\n\n/**\n *\tThis function is called to decode a HTML string (it decodes entities and br tags)\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@param\tstring\t$pagecodeto\t\t\tPage code for result\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlentitiesbr_decode($stringtodecode, $pagecodeto = 'UTF-8')\n{\n\t$ret = dol_html_entity_decode($stringtodecode, ENT_COMPAT, $pagecodeto);\n\t$ret = preg_replace('/'.\"\\r\\n\".'<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i', \"<br>\", $ret);\n\t$ret = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\r\\n\".'/i', \"\\r\\n\", $ret);\n\t$ret = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\n\".'/i', \"\\n\", $ret);\n\t$ret = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i', \"\\n\", $ret);\n\treturn $ret;\n}\n\n/**\n *\tThis function remove all ending \\n and br at end\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlcleanlastbr($stringtodecode)\n{\n\t$ret = preg_replace('/(<br>|<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>|'.\"\\n\".'|'.\"\\r\".')+$/i', \"\", $stringtodecode);\n\treturn $ret;\n}\n\n/**\n * Replace html_entity_decode functions to manage errors\n *\n * @param   string\t$a\t\t\t\t\tOperand a\n * @param   string\t$b\t\t\t\t\tOperand b (ENT_QUOTES=convert simple and double quotes)\n * @param   string\t$c\t\t\t\t\tOperand c\n * @param\tstring\t$keepsomeentities\tEntities but &amp;, <, >, \" are not converted.\n * @return  string\t\t\t\t\t\tString decoded\n */\nfunction dol_html_entity_decode($a, $b, $c = 'UTF-8', $keepsomeentities = 0)\n{\n\t$newstring = $a;\n\tif ($keepsomeentities) $newstring = strtr($newstring, array('&amp;'=>'__andamp__', '&lt;'=>'__andlt__', '&gt;'=>'__andgt__', '\"'=>'__dquot__'));\n\t$newstring = html_entity_decode($newstring, $b, $c);\n\tif ($keepsomeentities) $newstring = strtr($newstring, array('__andamp__'=>'&amp;', '__andlt__'=>'&lt;', '__andgt__'=>'&gt;', '__dquot__'=>'\"'));\n\treturn $newstring;\n}\n\n/**\n * Replace htmlentities functions.\n * Goal of this function is to be sure to have default values of htmlentities that match what we need.\n *\n * @param   string  $string         The input string to encode\n * @param   int     $flags          Flags (see PHP doc above)\n * @param   string  $encoding       Encoding page code\n * @param   bool    $double_encode  When double_encode is turned off, PHP will not encode existing html entities\n * @return  string  $ret            Encoded string\n */\nfunction dol_htmlentities($string, $flags = null, $encoding = 'UTF-8', $double_encode = false)\n{\n\treturn htmlentities($string, $flags, $encoding, $double_encode);\n}\n\n/**\n *\tCheck if a string is a correct iso string\n *\tIf not, it will we considered not HTML encoded even if it is by FPDF.\n *\tExample, if string contains euro symbol that has ascii code 128\n *\n *\t@param\tstring\t\t$s      \tString to check\n *  @param\tstring\t\t$clean\t\tClean if it is not an ISO. Warning, if file is utf8, you will get a bad formated file.\n *\t@return\tint|string  \t   \t\t0 if bad iso, 1 if good iso, Or the clean string if $clean is 1\n */\nfunction dol_string_is_good_iso($s, $clean = 0)\n{\n\t$len = dol_strlen($s);\n\t$out = '';\n\t$ok = 1;\n\tfor ($scursor = 0; $scursor < $len; $scursor++)\n\t{\n\t\t$ordchar = ord($s[$scursor]);\n\t\t//print $scursor.'-'.$ordchar.'<br>';\n\t\tif ($ordchar < 32 && $ordchar != 13 && $ordchar != 10) { $ok = 0; break; }\n\t\telseif ($ordchar > 126 && $ordchar < 160) { $ok = 0; break; }\n\t\telseif ($clean) {\n\t\t\t$out .= $s[$scursor];\n\t\t}\n\t}\n\tif ($clean) return $out;\n\treturn $ok;\n}\n\n/**\n *\tReturn nb of lines of a clear text\n *\n *\t@param\tstring\t$s\t\t\tString to check\n * \t@param\tint     $maxchar\tNot yet used\n *\t@return\tint\t\t\t\t\tNumber of lines\n *  @see\tdol_nboflines_bis(), dolGetFirstLineOfText()\n */\nfunction dol_nboflines($s, $maxchar = 0)\n{\n\tif ($s == '') return 0;\n\t$arraystring = explode(\"\\n\", $s);\n\t$nb = count($arraystring);\n\n\treturn $nb;\n}\n\n\n/**\n *\tReturn nb of lines of a formated text with \\n and <br> (WARNING: string must not have mixed \\n and br separators)\n *\n *\t@param\tstring\t$text      \t\tText\n *\t@param\tint\t\t$maxlinesize  \tLargeur de ligne en caracteres (ou 0 si pas de limite - defaut)\n * \t@param\tstring\t$charset\t\tGive the charset used to encode the $text variable in memory.\n *\t@return int\t\t\t\t\t\tNumber of lines\n *\t@see\tdol_nboflines(), dolGetFirstLineOfText()\n */\nfunction dol_nboflines_bis($text, $maxlinesize = 0, $charset = 'UTF-8')\n{\n\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \"<br>\", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\tif (dol_textishtml($text)) $repTable = array(\"\\t\" => \" \", \"\\n\" => \" \", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\n\t$text = strtr($text, $repTable);\n\tif ($charset == 'UTF-8') { $pattern = '/(<br[^>]*>)/Uu'; }\t// /U is to have UNGREEDY regex to limit to one html tag. /u is for UTF8 support\n\telse $pattern = '/(<br[^>]*>)/U'; // /U is to have UNGREEDY regex to limit to one html tag.\n\t$a = preg_split($pattern, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\n\t$nblines = (int) floor((count($a) + 1) / 2);\n\t// count possible auto line breaks\n\tif ($maxlinesize)\n\t{\n\t\tforeach ($a as $line)\n\t\t{\n\t\t\tif (dol_strlen($line) > $maxlinesize)\n\t\t\t{\n\t\t\t\t//$line_dec = html_entity_decode(strip_tags($line));\n\t\t\t\t$line_dec = html_entity_decode($line);\n\t\t\t\tif (dol_strlen($line_dec) > $maxlinesize)\n\t\t\t\t{\n\t\t\t\t\t$line_dec = wordwrap($line_dec, $maxlinesize, '\\n', true);\n\t\t\t\t\t$nblines += substr_count($line_dec, '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tunset($a);\n\treturn $nblines;\n}\n\n/**\n *\tReturn if a text is a html content\n *\n *\t@param\tstring\t$msg\t\tContent to check\n *\t@param\tint\t\t$option\t\t0=Full detection, 1=Fast check\n *\t@return\tboolean\t\t\t\ttrue/false\n *\t@see\tdol_concatdesc()\n */\nfunction dol_textishtml($msg, $option = 0)\n{\n\tif ($option == 1)\n\t{\n\t\tif (preg_match('/<html/i', $msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i', $msg))\t\t\treturn true;\n\t\telseif (preg_match('/<\\/textarea/i', $msg))\t  return true;\n\t\telseif (preg_match('/<br/i', $msg))\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tif (preg_match('/<html/i', $msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i', $msg))\t\t\treturn true;\n\t\telseif (preg_match('/<\\/textarea/i', $msg))\t  return true;\n\t\telseif (preg_match('/<(b|em|i|u)>/i', $msg))\t\treturn true;\n\t\telseif (preg_match('/<br\\/>/i', $msg))\t  return true;\n\t\telseif (preg_match('/<(br|div|font|li|p|span|strong|table)>/i', $msg)) \t  return true;\n\t\telseif (preg_match('/<(br|div|font|li|p|span|strong|table)\\s+[^<>\\/]*>/i', $msg)) return true;\n\t\telseif (preg_match('/<(br|div|font|li|p|span|strong|table)\\s+[^<>\\/]*\\/>/i', $msg)) return true;\n\t\telseif (preg_match('/<img\\s+[^<>]*src[^<>]*>/i', $msg)) return true; // must accept <img src=\"http://example.com/aaa.png\" />\n\t\telseif (preg_match('/<a\\s+[^<>]*href[^<>]*>/i', $msg)) return true; // must accept <a href=\"http://example.com/aaa.png\" />\n\t\telseif (preg_match('/<h[0-9]>/i', $msg))\t\t\treturn true;\n\t\telseif (preg_match('/&[A-Z0-9]{1,6};/i', $msg))\treturn true; // Html entities names (http://www.w3schools.com/tags/ref_entities.asp)\n\t\telseif (preg_match('/&#[0-9]{2,3};/i', $msg))\treturn true; // Html entities numbers (http://www.w3schools.com/tags/ref_entities.asp)\n\n\t\treturn false;\n\t}\n}\n\n/**\n *  Concat 2 descriptions with a new line between them (second operand after first one with appropriate new line separator)\n *  text1 html + text2 html => text1 + '<br>' + text2\n *  text1 html + text2 txt  => text1 + '<br>' + dol_nl2br(text2)\n *  text1 txt  + text2 html => dol_nl2br(text1) + '<br>' + text2\n *  text1 txt  + text2 txt  => text1 + '\\n' + text2\n *\n *  @param  string  $text1          Text 1\n *  @param  string  $text2          Text 2\n *  @param  bool    $forxml         true=Use <br /> instead of <br> if we have to add a br tag\n *  @param  bool    $invert         invert order of description lines (we often use config MAIN_CHANGE_ORDER_CONCAT_DESCRIPTION in this parameter)\n *  @return string                  Text 1 + new line + Text2\n *  @see    dol_textishtml()\n */\nfunction dol_concatdesc($text1, $text2, $forxml = false, $invert = false)\n{\n    if (!empty($invert))\n    {\n            $tmp = $text1;\n            $text1 = $text2;\n            $text2 = $tmp;\n    }\n\n    $ret = '';\n    $ret .= (!dol_textishtml($text1) && dol_textishtml($text2)) ? dol_nl2br(dol_escape_htmltag($text1, 0, 1, '', 1), 0, $forxml) : $text1;\n    $ret .= (!empty($text1) && !empty($text2)) ? ((dol_textishtml($text1) || dol_textishtml($text2)) ? ($forxml ? \"<br \\>\\n\" : \"<br>\\n\") : \"\\n\") : \"\";\n    $ret .= (dol_textishtml($text1) && !dol_textishtml($text2)) ? dol_nl2br(dol_escape_htmltag($text2, 0, 1, '', 1), 0, $forxml) : $text2;\n    return $ret;\n}\n\n\n\n/**\n * Return array of possible common substitutions. This includes several families like: 'system', 'mycompany', 'object', 'objectamount', 'date', 'user'\n *\n * @param\tTranslate\t$outputlangs\tOutput language\n * @param   int         $onlykey        1=Do not calculate some heavy values of keys (performance enhancement when we need only the keys), 2=Values are trunc and html sanitized (to use for help tooltip)\n * @param   array       $exclude        Array of family keys we want to exclude. For example array('system', 'mycompany', 'object', 'objectamount', 'date', 'user', ...)\n * @param   Object      $object         Object for keys on object\n * @return\tarray\t\t\t\t\t\tArray of substitutions\n * @see setSubstitFromObject()\n */\nfunction getCommonSubstitutionArray($outputlangs, $onlykey = 0, $exclude = null, $object = null)\n{\n\tglobal $db, $conf, $mysoc, $user, $extrafields;\n\n\t$substitutionarray = array();\n\n\tif (empty($exclude) || !in_array('user', $exclude))\n\t{\n\t\t// Add SIGNATURE into substitutionarray first, so, when we will make the substitution,\n\t\t// this will include signature content first and then replace var found into content of signature\n\t\t$signature = $user->signature;\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t'__USER_SIGNATURE__' => (string) (($signature && empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN)) ? ($onlykey == 2 ? dol_trunc(dol_string_nohtmltag($signature), 30) : $signature) : '')\n\t\t)\n\t\t\t);\n\t\t// For backward compatibility\n\t\tif ($onlykey != 2)\n\t\t{\n\t\t\t$substitutionarray['__SIGNATURE__'] = (string) (($signature && empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN)) ? ($onlykey == 2 ? dol_trunc(dol_string_nohtmltag($signature), 30) : $signature) : '');\n\t\t}\n\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t'__USER_ID__' => (string) $user->id,\n\t\t'__USER_LOGIN__' => (string) $user->login,\n        '__USER_EMAIL__' => (string) $user->email,\n        '__USER_LASTNAME__' => (string) $user->lastname,\n\t\t'__USER_FIRSTNAME__' => (string) $user->firstname,\n\t\t'__USER_FULLNAME__' => (string) $user->getFullName($outputlangs),\n\t\t'__USER_SUPERVISOR_ID__' => (string) ($user->fk_user ? $user->fk_user : '0'),\n\t\t'__USER_REMOTE_IP__' => (string) getUserRemoteIP()\n\t\t)\n\t\t\t);\n\t}\n\tif ((empty($exclude) || !in_array('mycompany', $exclude)) && is_object($mysoc))\n\t{\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t\t'__MYCOMPANY_NAME__'    => $mysoc->name,\n\t\t\t'__MYCOMPANY_EMAIL__'   => $mysoc->email,\n\t\t\t'__MYCOMPANY_PROFID1__' => $mysoc->idprof1,\n\t\t\t'__MYCOMPANY_PROFID2__' => $mysoc->idprof2,\n\t\t\t'__MYCOMPANY_PROFID3__' => $mysoc->idprof3,\n\t\t\t'__MYCOMPANY_PROFID4__' => $mysoc->idprof4,\n\t\t\t'__MYCOMPANY_PROFID5__' => $mysoc->idprof5,\n\t\t\t'__MYCOMPANY_PROFID6__' => $mysoc->idprof6,\n\t\t\t'__MYCOMPANY_CAPITAL__' => $mysoc->capital,\n\t\t\t'__MYCOMPANY_FULLADDRESS__' => $mysoc->getFullAddress(1, ', '),\n\t\t\t'__MYCOMPANY_ADDRESS__' => $mysoc->address,\n\t\t\t'__MYCOMPANY_ZIP__'     => $mysoc->zip,\n\t\t\t'__MYCOMPANY_TOWN__'    => $mysoc->town,\n\t\t\t'__MYCOMPANY_COUNTRY__'    => $mysoc->country,\n\t\t\t'__MYCOMPANY_COUNTRY_ID__' => $mysoc->country_id,\n        \t'__MYCOMPANY_COUNTRY_CODE__' => $mysoc->country_code,\n        \t'__MYCOMPANY_CURRENCY_CODE__' => $conf->currency\n\t\t));\n\t}\n\n\tif (($onlykey || is_object($object)) && (empty($exclude) || !in_array('object', $exclude)))\n\t{\n\t\tif ($onlykey)\n\t\t{\n\t\t\t$substitutionarray['__ID__'] = '__ID__';\n\t\t\t$substitutionarray['__REF__'] = '__REF__';\n\t\t\t$substitutionarray['__REF_CLIENT__'] = '__REF_CLIENT__';\n\t\t\t$substitutionarray['__REF_SUPPLIER__'] = '__REF_SUPPLIER__';\n\t\t\t$substitutionarray['__NOTE_PUBLIC__'] = '__NOTE_PUBLIC__';\n\t\t\t$substitutionarray['__NOTE_PRIVATE__'] = '__NOTE_PRIVATE__';\n\t\t\t$substitutionarray['__EXTRAFIELD_XXX__'] = '__EXTRAFIELD_XXX__';\n\n\t\t\tif (!empty($conf->societe->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__THIRDPARTY_ID__'] = '__THIRDPARTY_ID__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME__'] = '__THIRDPARTY_NAME__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME_ALIAS__'] = '__THIRDPARTY_NAME_ALIAS__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_CLIENT__'] = '__THIRDPARTY_CODE_CLIENT__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_FOURNISSEUR__'] = '__THIRDPARTY_CODE_FOURNISSEUR__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_EMAIL__'] = '__THIRDPARTY_EMAIL__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_PHONE__'] = '__THIRDPARTY_PHONE__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_FAX__'] = '__THIRDPARTY_FAX__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_ADDRESS__'] = '__THIRDPARTY_ADDRESS__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_ZIP__'] = '__THIRDPARTY_ZIP__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_TOWN__'] = '__THIRDPARTY_TOWN__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF1__'] = '__THIRDPARTY_IDPROF1__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF2__'] = '__THIRDPARTY_IDPROF2__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF3__'] = '__THIRDPARTY_IDPROF3__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF4__'] = '__THIRDPARTY_IDPROF4__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF5__'] = '__THIRDPARTY_IDPROF5__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF6__'] = '__THIRDPARTY_IDPROF6__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_TVAINTRA__'] = '__THIRDPARTY_TVAINTRA__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PUBLIC__'] = '__THIRDPARTY_NOTE_PUBLIC__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PRIVATE__'] = '__THIRDPARTY_NOTE_PRIVATE__';\n\t\t\t}\n\t\t\tif (!empty($conf->adherent->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__MEMBER_ID__'] = '__MEMBER_ID__';\n\t\t\t\t$substitutionarray['__MEMBER_CIVILITY__'] = '__MEMBER_CIVILITY__';\n\t\t\t\t$substitutionarray['__MEMBER_FIRSTNAME__'] = '__MEMBER_FIRSTNAME__';\n\t\t\t\t$substitutionarray['__MEMBER_LASTNAME__'] = '__MEMBER_LASTNAME__';\n\t\t\t\t/*$substitutionarray['__MEMBER_NOTE_PUBLIC__'] = '__MEMBER_NOTE_PUBLIC__';\n\t\t\t\t$substitutionarray['__MEMBER_NOTE_PRIVATE__'] = '__MEMBER_NOTE_PRIVATE__';*/\n\t\t\t}\n\t\t\tif (!empty($conf->projet->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__PROJECT_ID__'] = '__PROJECT_ID__';\n\t\t\t\t$substitutionarray['__PROJECT_REF__'] = '__PROJECT_REF__';\n\t\t\t\t$substitutionarray['__PROJECT_NAME__'] = '__PROJECT_NAME__';\n\t\t\t\t/*$substitutionarray['__PROJECT_NOTE_PUBLIC__'] = '__PROJECT_NOTE_PUBLIC__';\n\t\t\t\t$substitutionarray['__PROJECT_NOTE_PRIVATE__'] = '__PROJECT_NOTE_PRIVATE__';*/\n\t\t\t}\n\t\t\tif (!empty($conf->contrat->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATE__'] = 'Highest date planned for a service start';\n\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATETIME__'] = 'Highest date and hour planned for service start';\n\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATE__'] = 'Lowest data for planned expiration of service';\n\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATETIME__'] = 'Lowest date and hour for planned expiration of service';\n\t\t\t}\n\t\t\t$substitutionarray['__ONLINE_PAYMENT_URL__'] = 'UrlToPayOnlineIfApplicable';\n\t\t\t$substitutionarray['__ONLINE_PAYMENT_TEXT_AND_URL__'] = 'TextAndUrlToPayOnlineIfApplicable';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT__'] = 'Security key (if key is not unique per record)';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_MEMBER__'] = 'Security key for payment on a member subscription (one key per member)';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_ORDER__'] = 'Security key for payment on an order';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_INVOICE__'] = 'Security key for payment on an invoice';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_CONTRACTLINE__'] = 'Security key for payment on a a service';\n\n\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_PROPOSAL__'] = 'Direct download url of a proposal';\n\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_ORDER__'] = 'Direct download url of an order';\n\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_INVOICE__'] = 'Direct download url of an invoice';\n\n\t\t\tif (!empty($conf->expedition->enabled))\n\t\t\t{\n\t\t\t    $substitutionarray['__SHIPPINGTRACKNUM__'] = 'Shipping tacking number';\n\t\t\t\t$substitutionarray['__SHIPPINGTRACKNUMURL__'] = 'Shipping tracking url';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$substitutionarray['__ID__'] = $object->id;\n\t\t\t$substitutionarray['__REF__'] = $object->ref;\n\t\t\t$substitutionarray['__REF_CLIENT__'] = (isset($object->ref_client) ? $object->ref_client : (isset($object->ref_customer) ? $object->ref_customer : null));\n\t\t\t$substitutionarray['__REF_SUPPLIER__'] = (isset($object->ref_supplier) ? $object->ref_supplier : null);\n\t\t\t$substitutionarray['__NOTE_PUBLIC__'] = (isset($object->note_public) ? $object->note_public : null);\n\t\t\t$substitutionarray['__NOTE_PRIVATE__'] = (isset($object->note_private) ? $object->note_private : null);\n\n\t\t\t$substitutionarray['__DATE_DELIVERY__'] = (isset($object->date_livraison) ? dol_print_date($object->date_livraison, 'day', 0, $outputlangs) : '');\n\n\t\t\t// For backward compatibility\n\t\t\t$substitutionarray['__REFCLIENT__'] = (isset($object->ref_client) ? $object->ref_client : (isset($object->ref_customer) ? $object->ref_customer : null));\n\t\t\t$substitutionarray['__REFSUPPLIER__'] = (isset($object->ref_supplier) ? $object->ref_supplier : null);\n\t\t\t$substitutionarray['__REFCLIENT__'] = (isset($object->ref_client) ? $object->ref_client : (isset($object->ref_customer) ? $object->ref_customer : null));\n\t\t\t$substitutionarray['__REFSUPPLIER__'] = (isset($object->ref_supplier) ? $object->ref_supplier : null);\n\t\t\t$substitutionarray['__SUPPLIER_ORDER_DATE_DELIVERY__'] = (isset($object->date_livraison) ? dol_print_date($object->date_livraison, 'day', 0, $outputlangs) : '');\n\t\t\t$substitutionarray['__SUPPLIER_ORDER_DELAY_DELIVERY__'] = $outputlangs->transnoentities(\"AvailabilityType\".$object->availability_code) != ('AvailabilityType'.$object->availability_code) ? $outputlangs->transnoentities(\"AvailabilityType\".$object->availability_code) : $outputlangs->convToOutputCharset(isset($object->availability) ? $object->availability : '');\n\n\t\t\t$birthday = dol_print_date($object->birth, 'day');\n\n\t\t\tif ($object->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__MEMBER_ID__'] = $object->id;\n\t\t\t\tif (method_exists($object, 'getCivilityLabel')) $substitutionarray['__MEMBER_CIVILITY__'] = $object->getCivilityLabel();\n\t\t\t\t$substitutionarray['__MEMBER_FIRSTNAME__'] = $object->firstname;\n\t\t\t\t$substitutionarray['__MEMBER_LASTNAME__'] = $object->lastname;\n\t\t\t\tif (method_exists($object, 'getFullName')) $substitutionarray['__MEMBER_FULLNAME__'] = $object->getFullName($outputlangs);\n\t\t\t\t$substitutionarray['__MEMBER_COMPANY__'] = $object->societe;\n\t\t\t\t$substitutionarray['__MEMBER_ADDRESS__'] = $object->address;\n\t\t\t\t$substitutionarray['__MEMBER_ZIP__'] = $object->zip;\n\t\t\t\t$substitutionarray['__MEMBER_TOWN__'] = $object->town;\n\t\t\t\t$substitutionarray['__MEMBER_COUNTRY__'] = $object->country;\n\t\t\t\t$substitutionarray['__MEMBER_EMAIL__'] = $object->email;\n\t\t\t\t$substitutionarray['__MEMBER_BIRTH__'] = $birthday;\n\t\t\t\t$substitutionarray['__MEMBER_PHOTO__'] = $object->photo;\n\t\t\t\t$substitutionarray['__MEMBER_LOGIN__'] = $object->login;\n\t\t\t\t$substitutionarray['__MEMBER_PASSWORD__'] = $object->pass;\n\t\t\t\t$substitutionarray['__MEMBER_PHONE__'] = $object->phone;\n\t\t\t\t$substitutionarray['__MEMBER_PHONEPRO__'] = $object->phone_perso;\n\t\t\t\t$substitutionarray['__MEMBER_PHONEMOBILE__'] = $object->phone_mobile;\n\t\t\t\t$substitutionarray['__MEMBER_FIRST_SUBSCRIPTION_DATE__']       = dol_print_date($object->first_subscription_date, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_FIRST_SUBSCRIPTION_DATE_START__'] = dol_print_date($object->first_subscription_date_start, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_FIRST_SUBSCRIPTION_DATE_END__']   = dol_print_date($object->first_subscription_date_end, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_LAST_SUBSCRIPTION_DATE__']        = dol_print_date($object->last_subscription_date, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_LAST_SUBSCRIPTION_DATE_START__']  = dol_print_date($object->last_subscription_date_start, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_LAST_SUBSCRIPTION_DATE_END__']    = dol_print_date($object->last_subscription_date_end, 'dayrfc');\n\t\t\t}\n\n\t\t\tif (is_object($object) && $object->element == 'societe')\n\t\t\t{\n\t\t\t\t$substitutionarray['__THIRDPARTY_ID__'] = (is_object($object) ? $object->id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME__'] = (is_object($object) ? $object->name : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME_ALIAS__'] = (is_object($object) ? $object->name_alias : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_CLIENT__'] = (is_object($object) ? $object->code_client : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_FOURNISSEUR__'] = (is_object($object) ? $object->code_fournisseur : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_EMAIL__'] = (is_object($object) ? $object->email : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_PHONE__'] = (is_object($object) ? $object->phone : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_FAX__'] = (is_object($object) ? $object->fax : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ADDRESS__'] = (is_object($object) ? $object->address : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ZIP__'] = (is_object($object) ? $object->zip : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TOWN__'] = (is_object($object) ? $object->town : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_ID__'] = (is_object($object) ? $object->country_id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_CODE__'] = (is_object($object) ? $object->country_code : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF1__'] = (is_object($object) ? $object->idprof1 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF2__'] = (is_object($object) ? $object->idprof2 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF3__'] = (is_object($object) ? $object->idprof3 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF4__'] = (is_object($object) ? $object->idprof4 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF5__'] = (is_object($object) ? $object->idprof5 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF6__'] = (is_object($object) ? $object->idprof6 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TVAINTRA__'] = (is_object($object) ? $object->tva_intra : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PUBLIC__'] = (is_object($object) ?dol_htmlentitiesbr($object->note_public) : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PRIVATE__'] = (is_object($object) ?dol_htmlentitiesbr($object->note_private) : '');\n\t\t\t}\n\t\t\telseif (is_object($object->thirdparty) && $object->thirdparty->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__THIRDPARTY_ID__'] = (is_object($object->thirdparty) ? $object->thirdparty->id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME__'] = (is_object($object->thirdparty) ? $object->thirdparty->name : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME_ALIAS__'] = (is_object($object->thirdparty) ? $object->thirdparty->name_alias : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_CLIENT__'] = (is_object($object->thirdparty) ? $object->thirdparty->code_client : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_FOURNISSEUR__'] = (is_object($object->thirdparty) ? $object->thirdparty->code_fournisseur : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_EMAIL__'] = (is_object($object->thirdparty) ? $object->thirdparty->email : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_PHONE__'] = (is_object($object->thirdparty) ? $object->thirdparty->phone : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_FAX__'] = (is_object($object->thirdparty) ? $object->thirdparty->fax : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ADDRESS__'] = (is_object($object->thirdparty) ? $object->thirdparty->address : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ZIP__'] = (is_object($object->thirdparty) ? $object->thirdparty->zip : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TOWN__'] = (is_object($object->thirdparty) ? $object->thirdparty->town : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_ID__'] = (is_object($object->thirdparty) ? $object->thirdparty->country_id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_CODE__'] = (is_object($object->thirdparty) ? $object->thirdparty->country_code : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF1__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof1 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF2__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof2 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF3__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof3 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF4__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof4 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF5__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof5 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF6__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof6 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TVAINTRA__'] = (is_object($object->thirdparty) ? $object->thirdparty->tva_intra : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PUBLIC__'] = (is_object($object->thirdparty) ?dol_htmlentitiesbr($object->thirdparty->note_public) : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PRIVATE__'] = (is_object($object->thirdparty) ?dol_htmlentitiesbr($object->thirdparty->note_private) : '');\n\t\t\t}\n\n\t\t\tif (is_object($object->project) && $object->project->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__PROJECT_ID__'] = (is_object($object->project) ? $object->project->id : '');\n\t\t\t\t$substitutionarray['__PROJECT_REF__'] = (is_object($object->project) ? $object->project->ref : '');\n\t\t\t\t$substitutionarray['__PROJECT_NAME__'] = (is_object($object->project) ? $object->project->title : '');\n\t\t\t}\n\t\t\tif (is_object($object->projet) && $object->projet->id > 0)\t// Deprecated, for backward compatibility\n\t\t\t{\n\t\t\t\t$substitutionarray['__PROJECT_ID__'] = (is_object($object->projet) ? $object->projet->id : '');\n\t\t\t\t$substitutionarray['__PROJECT_REF__'] = (is_object($object->projet) ? $object->projet->ref : '');\n\t\t\t\t$substitutionarray['__PROJECT_NAME__'] = (is_object($object->projet) ? $object->projet->title : '');\n\t\t\t}\n\n\t\t\tif (is_object($object) && $object->element == 'shipping')\n\t\t\t{\n\t\t\t\t$substitutionarray['__SHIPPINGTRACKNUM__'] = $object->tracking_number;\n\t\t\t\t$substitutionarray['__SHIPPINGTRACKNUMURL__'] = $object->tracking_url;\n\t\t\t}\n\n\t\t\tif (is_object($object) && $object->element == 'contrat' && is_array($object->lines))\n\t\t\t{\n\t\t\t\tif ($object->id > 0)\n\t\t\t\t{\n\t\t\t\t\t$dateplannedstart = '';\n\t\t\t\t\t$datenextexpiration = '';\n\t\t\t\t\tforeach ($object->lines as $line)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($line->date_ouverture_prevue > $dateplannedstart) $dateplannedstart = $line->date_ouverture_prevue;\n\t\t\t\t\t\tif ($line->statut == 4 && $line->date_fin_prevue && (!$datenextexpiration || $line->date_fin_prevue < $datenextexpiration)) $datenextexpiration = $line->date_fin_prevue;\n\t\t\t\t\t}\n\t\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATE__'] = dol_print_date($dateplannedstart, 'dayrfc');\n\t\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATETIME__'] = dol_print_date($dateplannedstart, 'standard');\n\t\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATE__'] = dol_print_date($datenextexpiration, 'dayrfc');\n\t\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATETIME__'] = dol_print_date($datenextexpiration, 'standard');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create dynamic tags for __EXTRAFIELD_FIELD__\n\t\t\tif ($object->table_element && $object->id > 0)\n\t\t\t{\n\t\t\t\tif (!is_object($extrafields)) $extrafields = new ExtraFields($db);\n\t\t\t\t$extrafields->fetch_name_optionals_label($object->table_element, true);\n\n\t\t\t\tif ($object->fetch_optionals() > 0)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($extrafields->attributes[$object->table_element]['label']) && count($extrafields->attributes[$object->table_element]['label']) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($extrafields->attributes[$object->table_element]['label'] as $key => $label) {\n\t\t\t\t\t\t\t$substitutionarray['__EXTRAFIELD_'.strtoupper($key).'__'] = $object->array_options['options_'.$key];\n                            if ($extrafields->attribute_type[$key] == 'date') {\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '__'] = dol_print_date($object->array_options['options_' . $key], 'day');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_LOCALE__'] = dol_print_date($object->array_options['options_' . $key], 'day', 'tzserver', $outputlangs);\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_RFC__'] = dol_print_date($object->array_options['options_' . $key], 'dayrfc');\n                            } elseif ($extrafields->attribute_type[$key] == 'datetime') {\n                                $datetime = $object->array_options['options_'.$key];\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'dayhour') : '');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_LOCALE__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'dayhour', 'tzserver', $outputlangs) : '');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_DAY_LOCALE__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'day', 'tzserver', $outputlangs) : '');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_RFC__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'dayhourrfc') : '');\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Complete substitution array with the url to make online payment\n\t\t\t$paymenturl = '';\n\t\t\tif (empty($substitutionarray['__REF__']))\n\t\t\t{\n\t\t\t\t$paymenturl = '';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Set the online payment url link into __ONLINE_PAYMENT_URL__ key\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/payments.lib.php';\n\t\t\t\t$outputlangs->loadLangs(array('paypal', 'other'));\n\t\t\t\t$typeforonlinepayment = 'free';\n\t\t\t\tif (is_object($object) && $object->element == 'commande') $typeforonlinepayment = 'order';\n\t\t\t\tif (is_object($object) && $object->element == 'facture')  $typeforonlinepayment = 'invoice';\n\t\t\t\tif (is_object($object) && $object->element == 'member')   $typeforonlinepayment = 'member';\n\t\t\t\t$url = getOnlinePaymentUrl(0, $typeforonlinepayment, $substitutionarray['__REF__']);\n\t\t\t\t$paymenturl = $url;\n\t\t\t}\n\n\t\t\tif ($object->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__ONLINE_PAYMENT_TEXT_AND_URL__'] = ($paymenturl ?str_replace('\\n', \"\\n\", $outputlangs->trans(\"PredefinedMailContentLink\", $paymenturl)) : '');\n\t\t\t\t$substitutionarray['__ONLINE_PAYMENT_URL__'] = $paymenturl;\n\n\t\t\t\tif (!empty($conf->global->PROPOSAL_ALLOW_EXTERNAL_DOWNLOAD) && is_object($object) && $object->element == 'propal')\n\t\t\t\t{\n\t\t\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_PROPOSAL__'] = $object->getLastMainDocLink($object->element);\n\t\t\t\t}\n\t\t\t\telse $substitutionarray['__DIRECTDOWNLOAD_URL_PROPOSAL__'] = '';\n\t\t\t\tif (!empty($conf->global->ORDER_ALLOW_EXTERNAL_DOWNLOAD) && is_object($object) && $object->element == 'commande')\n\t\t\t\t{\n\t\t\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_ORDER__'] = $object->getLastMainDocLink($object->element);\n\t\t\t\t}\n\t\t\t\telse $substitutionarray['__DIRECTDOWNLOAD_URL_ORDER__'] = '';\n\t\t\t\tif (!empty($conf->global->INVOICE_ALLOW_EXTERNAL_DOWNLOAD) && is_object($object) && $object->element == 'facture')\n\t\t\t\t{\n\t\t\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_INVOICE__'] = $object->getLastMainDocLink($object->element);\n\t\t\t\t}\n\t\t\t\telse $substitutionarray['__DIRECTDOWNLOAD_URL_INVOICE__'] = '';\n\n\t\t\t\tif (is_object($object) && $object->element == 'propal') $substitutionarray['__URL_PROPOSAL__'] = DOL_MAIN_URL_ROOT.\"/comm/propal/card.php?id=\".$object->id;\n\t\t\t\tif (is_object($object) && $object->element == 'commande') $substitutionarray['__URL_ORDER__'] = DOL_MAIN_URL_ROOT.\"/commande/card.php?id=\".$object->id;\n\t\t\t\tif (is_object($object) && $object->element == 'facture') $substitutionarray['__URL_INVOICE__'] = DOL_MAIN_URL_ROOT.\"/compta/facture/card.php?id=\".$object->id;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($exclude) || !in_array('objectamount', $exclude))\n\t{\n\t\t$substitutionarray['__DATE_YMD__']        = is_object($object) ? (isset($object->date) ? dol_print_date($object->date, 'day', 0, $outputlangs) : null) : '';\n\t\t$substitutionarray['__DATE_DUE_YMD__']    = is_object($object) ? (isset($object->date_lim_reglement) ? dol_print_date($object->date_lim_reglement, 'day', 0, $outputlangs) : null) : '';\n\n\t\t$substitutionarray['__AMOUNT__']          = is_object($object) ? $object->total_ttc : '';\n\t\t$substitutionarray['__AMOUNT_EXCL_TAX__'] = is_object($object) ? $object->total_ht : '';\n\t\t$substitutionarray['__AMOUNT_VAT__']      = is_object($object) ? ($object->total_vat ? $object->total_vat : $object->total_tva) : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(1)) $substitutionarray['__AMOUNT_TAX2__']     = is_object($object) ? $object->total_localtax1 : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(2)) $substitutionarray['__AMOUNT_TAX3__']     = is_object($object) ? $object->total_localtax2 : '';\n\n\t\t$substitutionarray['__AMOUNT_FORMATED__']          = is_object($object) ? ($object->total_ttc ? price($object->total_ttc, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\t\t$substitutionarray['__AMOUNT_EXCL_TAX_FORMATED__'] = is_object($object) ? ($object->total_ht ? price($object->total_ht, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\t\t$substitutionarray['__AMOUNT_VAT_FORMATED__']      = is_object($object) ? ($object->total_vat ? price($object->total_vat, 0, $outputlangs, 0, 0, -1, $conf->currency) : ($object->total_tva ? price($object->total_tva, 0, $outputlangs, 0, 0, -1, $conf->currency) : null)) : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(1)) $substitutionarray['__AMOUNT_TAX2_FORMATED__']     = is_object($object) ? ($object->total_localtax1 ? price($object->total_localtax1, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(2)) $substitutionarray['__AMOUNT_TAX3_FORMATED__']     = is_object($object) ? ($object->total_localtax2 ? price($object->total_localtax2, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\n\t\t// TODO Add keys for foreign multicurrency\n\n\t\t// For backward compatibility\n\t\tif ($onlykey != 2)\n\t\t{\n\t\t\t$substitutionarray['__TOTAL_TTC__']    = is_object($object) ? $object->total_ttc : '';\n\t\t\t$substitutionarray['__TOTAL_HT__']     = is_object($object) ? $object->total_ht : '';\n\t\t\t$substitutionarray['__TOTAL_VAT__']    = is_object($object) ? ($object->total_vat ? $object->total_vat : $object->total_tva) : '';\n\t\t}\n\t}\n\n\t//var_dump($substitutionarray['__AMOUNT_FORMATED__']);\n\tif (empty($exclude) || !in_array('date', $exclude))\n\t{\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\n\t\t$tmp = dol_getdate(dol_now(), true);\n\t\t$tmp2 = dol_get_prev_day($tmp['mday'], $tmp['mon'], $tmp['year']);\n\t\t$tmp3 = dol_get_prev_month($tmp['mon'], $tmp['year']);\n\t\t$tmp4 = dol_get_next_day($tmp['mday'], $tmp['mon'], $tmp['year']);\n\t\t$tmp5 = dol_get_next_month($tmp['mon'], $tmp['year']);\n\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t\t'__DAY__' => (string) $tmp['mday'],\n\t\t\t'__DAY_TEXT__' => $outputlangs->trans('Day'.$tmp['wday']), // Monday\n\t\t\t'__DAY_TEXT_SHORT__' => $outputlangs->trans($tmp['weekday'].'Min'), // Mon\n\t\t\t'__DAY_TEXT_MIN__' => $outputlangs->trans('Short'.$tmp['weekday']), // M\n\t\t\t'__MONTH__' => (string) $tmp['mon'],\n\t\t\t'__MONTH_TEXT__' => $outputlangs->trans('Month'.sprintf(\"%02d\", $tmp['mon'])),\n\t\t\t'__MONTH_TEXT_SHORT__' => $outputlangs->trans('MonthShort'.sprintf(\"%02d\", $tmp['mon'])),\n\t\t\t'__MONTH_TEXT_MIN__' => $outputlangs->trans('MonthVeryShort'.sprintf(\"%02d\", $tmp['mon'])),\n\t\t\t'__YEAR__' => (string) $tmp['year'],\n\t\t\t'__PREVIOUS_DAY__' => (string) $tmp2['day'],\n\t\t\t'__PREVIOUS_MONTH__' => (string) $tmp3['month'],\n\t\t\t'__PREVIOUS_YEAR__' => (string) ($tmp['year'] - 1),\n\t\t\t'__NEXT_DAY__' => (string) $tmp4['day'],\n\t\t\t'__NEXT_MONTH__' => (string) $tmp5['month'],\n\t\t\t'__NEXT_YEAR__' => (string) ($tmp['year'] + 1),\n\t\t));\n\t}\n\n\tif (!empty($conf->multicompany->enabled))\n\t{\n\t\t$substitutionarray = array_merge($substitutionarray, array('__ENTITY_ID__' => $conf->entity));\n\t}\n\tif (empty($exclude) || !in_array('system', $exclude))\n\t{\n\t\t$substitutionarray['__DOL_MAIN_URL_ROOT__'] = DOL_MAIN_URL_ROOT;\n\t\t$substitutionarray['__(AnyTranslationKey)__'] = $outputlangs->trans('TranslationOfKey');\n\t\t$substitutionarray['__(AnyTranslationKey|langfile)__'] = $outputlangs->trans('TranslationOfKey').' (load also language file before)';\n\t\t$substitutionarray['__[AnyConstantKey]__'] = $outputlangs->trans('ValueOfConstantKey');\n\t}\n\n\treturn $substitutionarray;\n}\n\n/**\n *  Make substitution into a text string, replacing keys with vals from $substitutionarray (oldval=>newval),\n *  and texts like __(TranslationKey|langfile)__ and __[ConstantKey]__ are also replaced.\n *  Example of usage:\n *  $substitutionarray = getCommonSubstitutionArray($langs, 0, null, $thirdparty);\n *  complete_substitutions_array($substitutionarray, $langs, $thirdparty);\n *  $mesg = make_substitutions($mesg, $substitutionarray, $langs);\n *\n *  @param\tstring\t\t$text\t      \t\t\tSource string in which we must do substitution\n *  @param  array\t\t$substitutionarray\t\tArray with key->val to substitute. Example: array('__MYKEY__' => 'MyVal', ...)\n *  @param\tTranslate\t$outputlangs\t\t\tOutput language\n * \t@return string  \t\t    \t\t\t\tOutput string after substitutions\n *  @see\tcomplete_substitutions_array(), getCommonSubstitutionArray()\n */\nfunction make_substitutions($text, $substitutionarray, $outputlangs = null)\n{\n\tglobal $conf, $langs;\n\n\tif (!is_array($substitutionarray)) return 'ErrorBadParameterSubstitutionArrayWhenCalling_make_substitutions';\n\n\tif (empty($outputlangs)) $outputlangs = $langs;\n\n\t// Make substitution for language keys: __(AnyTranslationKey)__ or __(AnyTranslationKey|langfile)__\n\tif (is_object($outputlangs))\n\t{\n\t\t$reg = array();\n\t\twhile (preg_match('/__\\(([^\\)]+)\\)__/', $text, $reg))\n\t\t{\n\t\t\t$msgishtml = 0;\n\t\t\tif (dol_textishtml($text, 1)) $msgishtml = 1;\n\n\t\t\t// If key is __(TranslationKey|langfile)__, then force load of langfile.lang\n\t\t\t$tmp = explode('|', $reg[1]);\n\t\t\tif (!empty($tmp[1])) $outputlangs->load($tmp[1]);\n\n\t\t\t$text = preg_replace('/__\\('.preg_quote($reg[1], '/').'\\)__/', $msgishtml ?dol_htmlentitiesbr($outputlangs->transnoentitiesnoconv($reg[1])) : $outputlangs->transnoentitiesnoconv($reg[1]), $text);\n\t\t}\n\t}\n\n\t// Make substitution for constant keys.\n\t// Must be after the substitution of translation, so if the text of translation contains a string __[xxx]__, it is also converted.\n\t$reg = array();\n\twhile (preg_match('/__\\[([^\\]]+)\\]__/', $text, $reg))\n\t{\n\t\t$msgishtml = 0;\n\t\tif (dol_textishtml($text, 1)) $msgishtml = 1;\n\n\t\t$keyfound = $reg[1];\n\t\tif (preg_match('/(_pass|_pw|password|secret|_key|key$)/i', $keyfound)) $newval = '*****forbidden*****';\n\t\telse $newval = empty($conf->global->$keyfound) ? '' : $conf->global->$keyfound;\n\t\t$text = preg_replace('/__\\['.preg_quote($keyfound, '/').'\\]__/', $msgishtml ?dol_htmlentitiesbr($newval) : $newval, $text);\n\t}\n\n\t// Make substitition for array $substitutionarray\n\tforeach ($substitutionarray as $key => $value)\n\t{\n\t\tif (!isset($value)) continue; // If value is null, it same than not having substitution key at all into array, we do not replace.\n\n\t\tif ($key == '__SIGNATURE__' && (!empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN))) $value = ''; // Protection\n\t\tif ($key == '__USER_SIGNATURE__' && (!empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN))) $value = ''; // Protection\n\n\t\t$text = str_replace(\"$key\", \"$value\", $text); // We must keep the \" to work when value is 123.5 for example\n\t}\n\n\treturn $text;\n}\n\n/**\n *  Complete the $substitutionarray with more entries coming from external module that had set the \"substitutions=1\" into module_part array.\n *  In this case, method completesubstitutionarray provided by module is called.\n *\n *  @param  array\t\t$substitutionarray\t\tArray substitution old value => new value value\n *  @param  Translate\t$outputlangs            Output language\n *  @param  Object\t\t$object                 Source object\n *  @param  mixed\t\t$parameters       \t\tAdd more parameters (useful to pass product lines)\n *  @param  string      $callfunc               What is the name of the custom function that will be called? (default: completesubstitutionarray)\n *  @return\tvoid\n *  @see \tmake_substitutions()\n */\nfunction complete_substitutions_array(&$substitutionarray, $outputlangs, $object = null, $parameters = null, $callfunc = \"completesubstitutionarray\")\n{\n\tglobal $conf, $user;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t// Add a substitution key for each extrafields, using key __EXTRA_XXX__\n\t// TODO Remove this. Already available into the getCommonSubstitutionArray used to build the substitution array.\n\t/*if (is_object($object) && is_array($object->array_options))\n\t{\n\t\tforeach($object->array_options as $key => $val)\n\t\t{\n\t\t\t$keyshort=preg_replace('/^(options|extra)_/','',$key);\n\t\t\t$substitutionarray['__EXTRAFIELD_'.$keyshort.'__']=$val;\n\t\t\t// For backward compatibiliy\n\t\t\t$substitutionarray['%EXTRA_'.$keyshort.'%']=$val;\n\t\t}\n\t}*/\n\n\t// Check if there is external substitution to do, requested by plugins\n\t$dirsubstitutions = array_merge(array(), (array) $conf->modules_parts['substitutions']);\n\n\tforeach ($dirsubstitutions as $reldir)\n\t{\n\t\t$dir = dol_buildpath($reldir, 0);\n\n\t\t// Check if directory exists\n\t\tif (!dol_is_dir($dir)) continue;\n\n\t\t$substitfiles = dol_dir_list($dir, 'files', 0, 'functions_');\n\t\tforeach ($substitfiles as $substitfile)\n\t\t{\n\t\t\tif (preg_match('/functions_(.*)\\.lib\\.php/i', $substitfile['name'], $reg))\n\t\t\t{\n\t\t\t\t$module = $reg[1];\n\n\t\t\t\tdol_syslog(\"Library \".$substitfile['name'].\" found into \".$dir);\n\t\t\t\t// Include the user's functions file\n\t\t\t\trequire_once $dir.$substitfile['name'];\n\t\t\t\t// Call the user's function, and only if it is defined\n\t\t\t\t$function_name = $module.\"_\".$callfunc;\n\t\t\t\tif (function_exists($function_name)) $function_name($substitutionarray, $outputlangs, $object, $parameters);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\tint\t$date_start    Start date\n *    @param    int\t$date_end      End date\n *    @param    string\t\t$format        Output format\n *    @param\tTranslate\t$outputlangs   Output language\n *    @return\tvoid\n */\nfunction print_date_range($date_start, $date_end, $format = '', $outputlangs = '')\n{\n\tprint get_date_range($date_start, $date_end, $format, $outputlangs);\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\tint\t\t\t$date_start    \t\tStart date\n *    @param    int\t\t\t$date_end      \t\tEnd date\n *    @param    string\t\t$format        \t\tOutput format\n *    @param\tTranslate\t$outputlangs   \t\tOutput language\n *    @param\tinteger\t\t$withparenthesis\t1=Add parenthesis, 0=non parenthesis\n *    @return\tstring\t\t\t\t\t\t\tString\n */\nfunction get_date_range($date_start, $date_end, $format = '', $outputlangs = '', $withparenthesis = 1)\n{\n\tglobal $langs;\n\n\t$out = '';\n\n\tif (!is_object($outputlangs)) $outputlangs = $langs;\n\n\tif ($date_start && $date_end)\n\t{\n\t\t$out .= ($withparenthesis ? ' (' : '').$outputlangs->transnoentitiesnoconv('DateFromTo', dol_print_date($date_start, $format, false, $outputlangs), dol_print_date($date_end, $format, false, $outputlangs)).($withparenthesis ? ')' : '');\n\t}\n\tif ($date_start && !$date_end)\n\t{\n\t\t$out .= ($withparenthesis ? ' (' : '').$outputlangs->transnoentitiesnoconv('DateFrom', dol_print_date($date_start, $format, false, $outputlangs)).($withparenthesis ? ')' : '');\n\t}\n\tif (!$date_start && $date_end)\n\t{\n\t\t$out .= ($withparenthesis ? ' (' : '').$outputlangs->transnoentitiesnoconv('DateUntil', dol_print_date($date_end, $format, false, $outputlangs)).($withparenthesis ? ')' : '');\n\t}\n\n\treturn $out;\n}\n\n/**\n * Return firstname and lastname in correct order\n *\n * @param\tstring\t$firstname\t\tFirstname\n * @param\tstring\t$lastname\t\tLastname\n * @param\tint\t\t$nameorder\t\t-1=Auto, 0=Lastname+Firstname, 1=Firstname+Lastname, 2=Firstname, 3=Firstname if defined else lastname\n * @return\tstring\t\t\t\t\tFirstname + lastname or Lastname + firstname\n */\nfunction dolGetFirstLastname($firstname, $lastname, $nameorder = -1)\n{\n\tglobal $conf;\n\n\t$ret = '';\n\t// If order not defined, we use the setup\n\tif ($nameorder < 0) $nameorder = (empty($conf->global->MAIN_FIRSTNAME_NAME_POSITION) ? 1 : 0);\n\tif ($nameorder && $nameorder != 2 && $nameorder != 3)\n\t{\n\t\t$ret .= $firstname;\n\t\tif ($firstname && $lastname) $ret .= ' ';\n\t\t$ret .= $lastname;\n\t}\n\telseif ($nameorder == 2 || $nameorder == 3)\n\t{\n\t    $ret .= $firstname;\n\t    if (empty($ret) && $nameorder == 3)\n\t    {\n\t    \t$ret .= $lastname;\n\t    }\n\t}\n\telse\n\t{\n\t\t$ret .= $lastname;\n\t\tif ($firstname && $lastname) $ret .= ' ';\n\t\t$ret .= $firstname;\n\t}\n\treturn $ret;\n}\n\n\n/**\n *\tSet event message in dol_events session object. Will be output by calling dol_htmloutput_events.\n *  Note: Calling dol_htmloutput_events is done into pages by standard llxFooter() function.\n *  Note: Prefer to use setEventMessages instead.\n *\n *\t@param\tmixed\t$mesgs\t\t\tMessage string or array\n *  @param  string\t$style      \tWhich style to use ('mesgs' by default, 'warnings', 'errors')\n *  @return\tvoid\n *  @see\tdol_htmloutput_events()\n */\nfunction setEventMessage($mesgs, $style = 'mesgs')\n{\n\t//dol_syslog(__FUNCTION__ . \" is deprecated\", LOG_WARNING);\t\tThis is not deprecated, it is used by setEventMessages function\n\tif (!is_array($mesgs))\t\t// If mesgs is a string\n\t{\n\t\tif ($mesgs) $_SESSION['dol_events'][$style][] = $mesgs;\n\t}\n\telse\t\t\t\t\t\t// If mesgs is an array\n\t{\n\t\tforeach ($mesgs as $mesg)\n\t\t{\n\t\t\tif ($mesg) $_SESSION['dol_events'][$style][] = $mesg;\n\t\t}\n\t}\n}\n\n/**\n *\tSet event messages in dol_events session object. Will be output by calling dol_htmloutput_events.\n *  Note: Calling dol_htmloutput_events is done into pages by standard llxFooter() function.\n *\n *\t@param\tstring\t$mesg\t\t\tMessage string\n *\t@param\tarray\t$mesgs\t\t\tMessage array\n *  @param  string\t$style      \tWhich style to use ('mesgs' by default, 'warnings', 'errors')\n *  @param\tstring\t$messagekey\t\tA key to be used to allow the feature \"Never show this message again\"\n *  @return\tvoid\n *  @see\tdol_htmloutput_events()\n */\nfunction setEventMessages($mesg, $mesgs, $style = 'mesgs', $messagekey = '')\n{\n\tif (empty($mesg) && empty($mesgs))\n\t{\n\t\tdol_syslog(\"Try to add a message in stack with empty message\", LOG_WARNING);\n\t}\n\telse\n\t{\n\t\tif ($messagekey)\n\t\t{\n\t\t\t// Complete message with a js link to set a cookie \"DOLHIDEMESSAGE\".$messagekey;\n\t\t\t// TODO\n\t\t\t$mesg .= '';\n\t\t}\n\t\tif (empty($messagekey) || empty($_COOKIE[\"DOLHIDEMESSAGE\".$messagekey]))\n\t\t{\n\t\t\tif (!in_array((string) $style, array('mesgs', 'warnings', 'errors'))) dol_print_error('', 'Bad parameter style='.$style.' for setEventMessages');\n\t\t\tif (empty($mesgs)) setEventMessage($mesg, $style);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!empty($mesg) && !in_array($mesg, $mesgs)) setEventMessage($mesg, $style); // Add message string if not already into array\n\t\t\t\tsetEventMessage($mesgs, $style);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *  Note: Calling dol_htmloutput_events is done into pages by standard llxFooter() function, so there is\n *  no need to call it explicitely.\n *\n *  @param\tint\t\t$disabledoutputofmessages\tClear all messages stored into session without diplaying them\n *  @return\tvoid\n *  @see    \t\t\t\t\t\t\t\t\tdol_htmloutput_mesg()\n */\nfunction dol_htmloutput_events($disabledoutputofmessages = 0)\n{\n\t// Show mesgs\n\tif (isset($_SESSION['dol_events']['mesgs'])) {\n\t\tif (empty($disabledoutputofmessages)) dol_htmloutput_mesg('', $_SESSION['dol_events']['mesgs']);\n\t\tunset($_SESSION['dol_events']['mesgs']);\n\t}\n\n\t// Show errors\n\tif (isset($_SESSION['dol_events']['errors'])) {\n\t\tif (empty($disabledoutputofmessages)) dol_htmloutput_mesg('', $_SESSION['dol_events']['errors'], 'error');\n\t\tunset($_SESSION['dol_events']['errors']);\n\t}\n\n\t// Show warnings\n\tif (isset($_SESSION['dol_events']['warnings'])) {\n\t\tif (empty($disabledoutputofmessages)) dol_htmloutput_mesg('', $_SESSION['dol_events']['warnings'], 'warning');\n\t\tunset($_SESSION['dol_events']['warnings']);\n\t}\n}\n\n/**\n *\tGet formated messages to output (Used to show messages on html output).\n *  This include also the translation of the message key.\n *\n *\t@param\tstring\t\t$mesgstring\t\tMessage string or message key\n *\t@param\tstring[]\t$mesgarray      Array of message strings or message keys\n *  @param  string\t\t$style          Style of message output ('ok' or 'error')\n *  @param  int\t\t\t$keepembedded   Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *\t@return\tstring\t\t\t\t\t\tReturn html output\n *\n *  @see    dol_print_error()\n *  @see    dol_htmloutput_errors()\n *  @see    setEventMessages()\n */\nfunction get_htmloutput_mesg($mesgstring = '', $mesgarray = '', $style = 'ok', $keepembedded = 0)\n{\n\tglobal $conf, $langs;\n\n\t$ret = 0; $return = '';\n\t$out = '';\n\t$divstart = $divend = '';\n\n\t// If inline message with no format, we add it.\n\tif ((empty($conf->use_javascript_ajax) || !empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) || $keepembedded) && !preg_match('/<div class=\".*\">/i', $out))\n\t{\n\t\t$divstart = '<div class=\"'.$style.' clearboth\">';\n\t\t$divend = '</div>';\n\t}\n\n\tif ((is_array($mesgarray) && count($mesgarray)) || $mesgstring)\n\t{\n\t\t$langs->load(\"errors\");\n\t\t$out .= $divstart;\n\t\tif (is_array($mesgarray) && count($mesgarray))\n\t\t{\n\t\t\tforeach ($mesgarray as $message)\n\t\t\t{\n\t\t\t\t$ret++;\n\t\t\t\t$out .= $langs->trans($message);\n\t\t\t\tif ($ret < count($mesgarray)) $out .= \"<br>\\n\";\n\t\t\t}\n\t\t}\n\t\tif ($mesgstring)\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$ret++;\n\t\t\t$out .= $langs->trans($mesgstring);\n\t\t}\n\t\t$out .= $divend;\n\t}\n\n\tif ($out)\n\t{\n\t\tif (!empty($conf->use_javascript_ajax) && empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) && empty($keepembedded))\n\t\t{\n\t\t\t$return = '<script>\n\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\tvar block = '.(!empty($conf->global->MAIN_USE_JQUERY_BLOCKUI) ? \"true\" : \"false\").'\n\t\t\t\t\t\tif (block) {\n\t\t\t\t\t\t\t$.dolEventValid(\"\",\"'.dol_escape_js($out).'\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* jnotify(message, preset of message type, keepmessage) */\n\t\t\t\t\t\t\t$.jnotify(\"'.dol_escape_js($out).'\",\n\t\t\t\t\t\t\t\"'.($style == \"ok\" ? 3000 : $style).'\",\n\t\t\t\t\t\t\t'.($style == \"ok\" ? \"false\" : \"true\").',\n\t\t\t\t\t\t\t{ remove: function (){} } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t</script>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$return = $out;\n\t\t}\n\t}\n\n\treturn $return;\n}\n\n/**\n *  Get formated error messages to output (Used to show messages on html output).\n *\n *  @param  string\t$mesgstring         Error message\n *  @param  array\t$mesgarray          Error messages array\n *  @param  int\t\t$keepembedded       Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return string                \t\tReturn html output\n *\n *  @see    dol_print_error()\n *  @see    dol_htmloutput_mesg()\n */\nfunction get_htmloutput_errors($mesgstring = '', $mesgarray = array(), $keepembedded = 0)\n{\n\treturn get_htmloutput_mesg($mesgstring, $mesgarray, 'error', $keepembedded);\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *\n *\t@param\tstring\t\t$mesgstring\t\tMessage string or message key\n *\t@param\tstring[]\t$mesgarray      Array of message strings or message keys\n *\t@param  string      $style          Which style to use ('ok', 'warning', 'error')\n *\t@param  int         $keepembedded   Set to 1 if message must be kept embedded into its html place (this disable jnotify)\n *\t@return\tvoid\n *\n *\t@see    dol_print_error()\n *\t@see    dol_htmloutput_errors()\n *\t@see    setEventMessages()\n */\nfunction dol_htmloutput_mesg($mesgstring = '', $mesgarray = array(), $style = 'ok', $keepembedded = 0)\n{\n\tif (empty($mesgstring) && (!is_array($mesgarray) || count($mesgarray) == 0)) return;\n\n\t$iserror = 0;\n\t$iswarning = 0;\n\tif (is_array($mesgarray))\n\t{\n\t\tforeach ($mesgarray as $val)\n\t\t{\n\t\t\tif ($val && preg_match('/class=\"error\"/i', $val)) { $iserror++; break; }\n\t\t\tif ($val && preg_match('/class=\"warning\"/i', $val)) { $iswarning++; break; }\n\t\t}\n\t}\n\telseif ($mesgstring && preg_match('/class=\"error\"/i', $mesgstring)) $iserror++;\n\telseif ($mesgstring && preg_match('/class=\"warning\"/i', $mesgstring)) $iswarning++;\n\tif ($style == 'error') $iserror++;\n\tif ($style == 'warning') $iswarning++;\n\n\tif ($iserror || $iswarning)\n\t{\n\t\t// Remove div from texts\n\t\t$mesgstring = preg_replace('/<\\/div><div class=\"(error|warning)\">/', '<br>', $mesgstring);\n\t\t$mesgstring = preg_replace('/<div class=\"(error|warning)\">/', '', $mesgstring);\n\t\t$mesgstring = preg_replace('/<\\/div>/', '', $mesgstring);\n\t\t// Remove div from texts array\n\t\tif (is_array($mesgarray))\n\t\t{\n\t\t\t$newmesgarray = array();\n\t\t\tforeach ($mesgarray as $val)\n\t\t\t{\n\t\t\t\tif (is_string($val))\n\t\t\t\t{\n\t\t\t\t\t$tmpmesgstring = preg_replace('/<\\/div><div class=\"(error|warning)\">/', '<br>', $val);\n\t\t\t\t\t$tmpmesgstring = preg_replace('/<div class=\"(error|warning)\">/', '', $tmpmesgstring);\n\t\t\t\t\t$tmpmesgstring = preg_replace('/<\\/div>/', '', $tmpmesgstring);\n\t\t\t\t\t$newmesgarray[] = $tmpmesgstring;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(\"Error call of dol_htmloutput_mesg with an array with a value that is not a string\", LOG_WARNING);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$mesgarray = $newmesgarray;\n\t\t}\n\t\tprint get_htmloutput_mesg($mesgstring, $mesgarray, ($iserror ? 'error' : 'warning'), $keepembedded);\n\t}\n\telse print get_htmloutput_mesg($mesgstring, $mesgarray, 'ok', $keepembedded);\n}\n\n/**\n *  Print formated error messages to output (Used to show messages on html output).\n *\n *  @param\tstring\t$mesgstring          Error message\n *  @param  array\t$mesgarray           Error messages array\n *  @param  int\t\t$keepembedded        Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return\tvoid\n *\n *  @see    dol_print_error()\n *  @see    dol_htmloutput_mesg()\n */\nfunction dol_htmloutput_errors($mesgstring = '', $mesgarray = array(), $keepembedded = 0)\n{\n\tdol_htmloutput_mesg($mesgstring, $mesgarray, 'error', $keepembedded);\n}\n\n/**\n * \tAdvanced sort array by second index function, which produces ascending (default)\n *  or descending output and uses optionally natural case insensitive sorting (which\n *  can be optionally case sensitive as well).\n *\n *  @param      array\t\t$array      \t\tArray to sort (array of array('key1'=>val1,'key2'=>val2,'key3'...) or array of objects)\n *  @param      string\t\t$index\t\t\t\tKey in array to use for sorting criteria\n *  @param      int\t\t\t$order\t\t\t\tSort order ('asc' or 'desc')\n *  @param      int\t\t\t$natsort\t\t\t1=use \"natural\" sort (natsort), 0=use \"standard\" sort (asort)\n *  @param      int\t\t\t$case_sensitive\t\t1=sort is case sensitive, 0=not case sensitive\n *  @param\t\tint\t\t\t$keepindex\t\t\tIf 0 and index key of array to sort is a numeric, than index will be rewrote. If 1 or index key is not numeric, key for index is kept after sorting.\n *  @return     array\t\t\t\t\t\t\tSorted array\n */\nfunction dol_sort_array(&$array, $index, $order = 'asc', $natsort = 0, $case_sensitive = 0, $keepindex = 0)\n{\n\t// Clean parameters\n\t$order = strtolower($order);\n\n\tif (is_array($array))\n\t{\n\t\t$sizearray = count($array);\n\t\tif ($sizearray > 0)\n\t\t{\n\t\t\t$temp = array();\n\t\t\tforeach (array_keys($array) as $key)\n\t\t\t{\n\t\t\t\tif (is_object($array[$key]))\n\t\t\t\t{\n\t\t\t\t\t$temp[$key] = $array[$key]->$index;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$temp[$key] = $array[$key][$index];\n\t\t\t\t}\n\t\t\t}\n\n            if (!$natsort) {\n                ($order == 'asc') ? asort($temp) : arsort($temp);\n            } else {\n                ($case_sensitive) ? natsort($temp) : natcasesort($temp);\n                if ($order != 'asc') $temp = array_reverse($temp, true);\n            }\n\n\t\t\t$sorted = array();\n\n\t\t\tforeach (array_keys($temp) as $key)\n\t\t\t{\n\t\t\t\t(is_numeric($key) && empty($keepindex)) ? $sorted[] = $array[$key] : $sorted[$key] = $array[$key];\n\t\t\t}\n\n\t\t\treturn $sorted;\n\t\t}\n\t}\n\treturn $array;\n}\n\n\n/**\n *      Check if a string is in UTF8\n *\n *      @param\tstring\t$str        String to check\n * \t\t@return\tboolean\t\t\t\tTrue if string is UTF8 or ISO compatible with UTF8, False if not (ISO with special char or Binary)\n */\nfunction utf8_check($str)\n{\n\t// We must use here a binary strlen function (so not dol_strlen)\n\t$strLength = dol_strlen($str);\n\tfor ($i = 0; $i < $strLength; $i++)\n\t{\n\t\tif (ord($str[$i]) < 0x80) continue; // 0bbbbbbb\n\t\telseif ((ord($str[$i]) & 0xE0) == 0xC0) $n = 1; // 110bbbbb\n\t\telseif ((ord($str[$i]) & 0xF0) == 0xE0) $n = 2; // 1110bbbb\n\t\telseif ((ord($str[$i]) & 0xF8) == 0xF0) $n = 3; // 11110bbb\n\t\telseif ((ord($str[$i]) & 0xFC) == 0xF8) $n = 4; // 111110bb\n\t\telseif ((ord($str[$i]) & 0xFE) == 0xFC) $n = 5; // 1111110b\n\t\telse return false; // Does not match any model\n\t\tfor ($j = 0; $j < $n; $j++) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ((++$i == strlen($str)) || ((ord($str[$i]) & 0xC0) != 0x80))\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n *      Check if a string is in ASCII\n *\n *      @param\tstring\t$str        String to check\n * \t\t@return\tboolean\t\t\t\tTrue if string is ASCII, False if not (byte value > 0x7F)\n */\nfunction ascii_check($str)\n{\n\tif (function_exists('mb_check_encoding')) {\n\t\t//if (mb_detect_encoding($str, 'ASCII', true) return false;\n\t\tif (!mb_check_encoding($str, 'ASCII')) return false;\n\t} else {\n\t\tif (preg_match('/[^\\x00-\\x7f]/', $str)) return false; // Contains a byte > 7f\n\t}\n\n\treturn true;\n}\n\n\n/**\n *      Return a string encoded into OS filesystem encoding. This function is used to define\n * \t    value to pass to filesystem PHP functions.\n *\n *      @param\tstring\t$str        String to encode (UTF-8)\n * \t\t@return\tstring\t\t\t\tEncoded string (UTF-8, ISO-8859-1)\n */\nfunction dol_osencode($str)\n{\n\tglobal $conf;\n\n\t$tmp = ini_get(\"unicode.filesystem_encoding\"); // Disponible avec PHP 6.0\n\tif (empty($tmp) && !empty($_SERVER[\"WINDIR\"])) $tmp = 'iso-8859-1'; // By default for windows\n\tif (empty($tmp)) $tmp = 'utf-8'; // By default for other\n\tif (!empty($conf->global->MAIN_FILESYSTEM_ENCODING)) $tmp = $conf->global->MAIN_FILESYSTEM_ENCODING;\n\n\tif ($tmp == 'iso-8859-1') return utf8_decode($str);\n\treturn $str;\n}\n\n\n/**\n *      Return an id or code from a code or id.\n *      Store also Code-Id into a cache to speed up next request on same key.\n *\n * \t\t@param\tDoliDB\t$db\t\t\t\tDatabase handler\n * \t\t@param\tstring\t$key\t\t\tCode or Id to get Id or Code\n * \t\t@param\tstring\t$tablename\t\tTable name without prefix\n * \t\t@param\tstring\t$fieldkey\t\tField to search the key into\n * \t\t@param\tstring\t$fieldid\t\tField to get\n *      @param  int\t\t$entityfilter\tFilter by entity\n *      @return int\t\t\t\t\t\t<0 if KO, Id of code if OK\n *      @see $langs->getLabelFromKey\n */\nfunction dol_getIdFromCode($db, $key, $tablename, $fieldkey = 'code', $fieldid = 'id', $entityfilter = 0)\n{\n\tglobal $cache_codes;\n\n\t// If key empty\n\tif ($key == '') return '';\n\n\t// Check in cache\n\tif (isset($cache_codes[$tablename][$key][$fieldid]))\t// Can be defined to 0 or ''\n\t{\n\t\treturn $cache_codes[$tablename][$key][$fieldid]; // Found in cache\n\t}\n\n\tdol_syslog('dol_getIdFromCode (value for field '.$fieldid.' from key '.$key.' not found into cache)', LOG_DEBUG);\n\n\t$sql = \"SELECT \".$fieldid.\" as valuetoget\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.$tablename;\n\t$sql .= \" WHERE \".$fieldkey.\" = '\".$db->escape($key).\"'\";\n\tif (!empty($entityfilter))\n\t\t$sql .= \" AND entity IN (\".getEntity($tablename).\")\";\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($obj) $cache_codes[$tablename][$key][$fieldid] = $obj->valuetoget;\n\t\telse $cache_codes[$tablename][$key][$fieldid] = '';\n\t\t$db->free($resql);\n\t\treturn $cache_codes[$tablename][$key][$fieldid];\n\t}\n\telse\n\t{\n\t\treturn -1;\n\t}\n}\n\n/**\n * Verify if condition in string is ok or not\n *\n * @param \tstring\t\t$strRights\t\tString with condition to check\n * @return \tboolean\t\t\t\t\t\tTrue or False. Return True if strRights is ''\n */\nfunction verifCond($strRights)\n{\n\tglobal $user, $conf, $langs;\n\tglobal $leftmenu;\n\tglobal $rights; // To export to dol_eval function\n\n\t//print $strRights.\"<br>\\n\";\n\t$rights = true;\n\tif ($strRights != '')\n\t{\n\t\t$str = 'if(!('.$strRights.')) { $rights = false; }';\n\t\tdol_eval($str); // The dol_eval must contains all the global $xxx used into a condition\n\t}\n\treturn $rights;\n}\n\n/**\n * Replace eval function to add more security.\n * This function is called by verifCond() or trans() and transnoentitiesnoconv().\n *\n * @param \tstring\t$s\t\t\t\tString to evaluate\n * @param\tint\t\t$returnvalue\t0=No return (used to execute eval($a=something)). 1=Value of eval is returned (used to eval($something)).\n * @param   int     $hideerrors     1=Hide errors\n * @return\tmixed\t\t\t\t\tNothing or return of eval\n */\nfunction dol_eval($s, $returnvalue = 0, $hideerrors = 1)\n{\n\t// Only global variables can be changed by eval function and returned to caller\n\tglobal $db, $langs, $user, $conf, $website, $websitepage;\n\tglobal $action, $mainmenu, $leftmenu;\n\tglobal $rights;\n\tglobal $object;\n\tglobal $mysoc;\n\n\tglobal $obj; // To get $obj used into list when dol_eval is used for computed fields and $obj is not yet $object\n\tglobal $soc; // For backward compatibility\n\n\t//print $s.\"<br>\\n\";\n\tif ($returnvalue)\n\t{\n\t\tif ($hideerrors) return @eval('return '.$s.';');\n\t\telse return eval('return '.$s.';');\n\t}\n\telse\n\t{\n\t\tif ($hideerrors) @eval($s);\n\t\telse eval($s);\n\t}\n}\n\n/**\n * Return if var element is ok\n *\n * @param   string      $element    Variable to check\n * @return  boolean                 Return true of variable is not empty\n */\nfunction dol_validElement($element)\n{\n\treturn (trim($element) != '');\n}\n\n/**\n * \tReturn img flag of country for a language code or country code\n *\n * \t@param\tstring\t$codelang\tLanguage code (en_IN, fr_CA...) or Country code (IN, FR)\n *  @param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n * \t@return\tstring\t\t\t\tHTML img string with flag.\n */\nfunction picto_from_langcode($codelang, $moreatt = '')\n{\n\tglobal $langs;\n\n\tif (empty($codelang)) return '';\n\n\tif ($codelang == 'auto')\n\t{\n\t\treturn '<span class=\"fa fa-globe\"></span>';\n\t}\n\n\t$langtocountryflag = array(\n\t\t'ar_AR' => '',\n\t\t'ca_ES' => 'catalonia',\n\t\t'da_DA' => 'dk',\n\t\t'fr_CA' => 'mq',\n\t\t'sv_SV' => 'se'\n\t);\n\n\tif (isset($langtocountryflag[$codelang])) $flagImage = $langtocountryflag[$codelang];\n\telse\n\t{\n\t\t$tmparray = explode('_', $codelang);\n\t\t$flagImage = empty($tmparray[1]) ? $tmparray[0] : $tmparray[1];\n\t}\n\n\treturn img_picto_common($codelang, 'flags/'.strtolower($flagImage).'.png', $moreatt);\n}\n\n/**\n * Return default language from country code.\n * Return null if not found.\n *\n * @param \tstring \t$countrycode\tCountry code like 'US', 'FR', 'CA', ...\n * @return\tstring\t\t\t\t\tValue of locale like 'en_US', 'fr_FR', ...\n */\nfunction getLanguageCodeFromCountryCode($countrycode)\n{\n\tglobal $mysoc;\n\n\tif (empty($countrycode)) return null;\n\n\tif (strtoupper($countrycode) == 'MQ') return 'fr_CA';\n\tif (strtoupper($countrycode) == 'SE') return 'sv_SE'; // se_SE is Sami/Sweden, and we want in priority sv_SE for SE country\n\tif (strtoupper($countrycode) == 'CH')\n\t{\n\t\tif ($mysoc->country_code == 'FR') return 'fr_CH';\n\t\tif ($mysoc->country_code == 'DE') return 'de_CH';\n\t}\n\n\t// Locale list taken from:\n\t// http://stackoverflow.com/questions/3191664/\n\t// list-of-all-locales-and-their-short-codes\n\t$locales = array(\n\t\t'af-ZA',\n\t\t'am-ET',\n\t\t'ar-AE',\n\t\t'ar-BH',\n\t\t'ar-DZ',\n\t\t'ar-EG',\n\t\t'ar-IQ',\n\t\t'ar-JO',\n\t\t'ar-KW',\n\t\t'ar-LB',\n\t\t'ar-LY',\n\t\t'ar-MA',\n\t\t'ar-OM',\n\t\t'ar-QA',\n\t\t'ar-SA',\n\t\t'ar-SY',\n\t\t'ar-TN',\n\t\t'ar-YE',\n\t\t'as-IN',\n\t\t'ba-RU',\n\t\t'be-BY',\n\t\t'bg-BG',\n\t\t'bn-BD',\n\t\t'bn-IN',\n\t\t'bo-CN',\n\t\t'br-FR',\n\t\t'ca-ES',\n\t\t'co-FR',\n\t\t'cs-CZ',\n\t\t'cy-GB',\n\t\t'da-DK',\n\t\t'de-AT',\n\t\t'de-CH',\n\t\t'de-DE',\n\t\t'de-LI',\n\t\t'de-LU',\n\t\t'dv-MV',\n\t\t'el-GR',\n\t\t'en-AU',\n\t\t'en-BZ',\n\t\t'en-CA',\n\t\t'en-GB',\n\t\t'en-IE',\n\t\t'en-IN',\n\t\t'en-JM',\n\t\t'en-MY',\n\t\t'en-NZ',\n\t\t'en-PH',\n\t\t'en-SG',\n\t\t'en-TT',\n\t\t'en-US',\n\t\t'en-ZA',\n\t\t'en-ZW',\n\t\t'es-AR',\n\t\t'es-BO',\n\t\t'es-CL',\n\t\t'es-CO',\n\t\t'es-CR',\n\t\t'es-DO',\n\t\t'es-EC',\n\t\t'es-ES',\n\t\t'es-GT',\n\t\t'es-HN',\n\t\t'es-MX',\n\t\t'es-NI',\n\t\t'es-PA',\n\t\t'es-PE',\n\t\t'es-PR',\n\t\t'es-PY',\n\t\t'es-SV',\n\t\t'es-US',\n\t\t'es-UY',\n\t\t'es-VE',\n\t\t'et-EE',\n\t\t'eu-ES',\n\t\t'fa-IR',\n\t\t'fi-FI',\n\t\t'fo-FO',\n\t\t'fr-BE',\n\t\t'fr-CA',\n\t\t'fr-CH',\n\t\t'fr-FR',\n\t\t'fr-LU',\n\t\t'fr-MC',\n\t\t'fy-NL',\n\t\t'ga-IE',\n\t\t'gd-GB',\n\t\t'gl-ES',\n\t\t'gu-IN',\n\t\t'he-IL',\n\t\t'hi-IN',\n\t\t'hr-BA',\n\t\t'hr-HR',\n\t\t'hu-HU',\n\t\t'hy-AM',\n\t\t'id-ID',\n\t\t'ig-NG',\n\t\t'ii-CN',\n\t\t'is-IS',\n\t\t'it-CH',\n\t\t'it-IT',\n\t\t'ja-JP',\n\t\t'ka-GE',\n\t\t'kk-KZ',\n\t\t'kl-GL',\n\t\t'km-KH',\n\t\t'kn-IN',\n\t\t'ko-KR',\n\t\t'ky-KG',\n\t\t'lb-LU',\n\t\t'lo-LA',\n\t\t'lt-LT',\n\t\t'lv-LV',\n\t\t'mi-NZ',\n\t\t'mk-MK',\n\t\t'ml-IN',\n\t\t'mn-MN',\n\t\t'mr-IN',\n\t\t'ms-BN',\n\t\t'ms-MY',\n\t\t'mt-MT',\n\t\t'nb-NO',\n\t\t'ne-NP',\n\t\t'nl-BE',\n\t\t'nl-NL',\n\t\t'nn-NO',\n\t\t'oc-FR',\n\t\t'or-IN',\n\t\t'pa-IN',\n\t\t'pl-PL',\n\t\t'ps-AF',\n\t\t'pt-BR',\n\t\t'pt-PT',\n\t\t'rm-CH',\n\t\t'ro-RO',\n\t\t'ru-RU',\n\t\t'rw-RW',\n\t\t'sa-IN',\n\t\t'se-FI',\n\t\t'se-NO',\n\t\t'se-SE',\n\t\t'si-LK',\n\t\t'sk-SK',\n\t\t'sl-SI',\n\t\t'sq-AL',\n\t\t'sv-FI',\n\t\t'sv-SE',\n\t\t'sw-KE',\n\t\t'ta-IN',\n\t\t'te-IN',\n\t\t'th-TH',\n\t\t'tk-TM',\n\t\t'tn-ZA',\n\t\t'tr-TR',\n\t\t'tt-RU',\n\t\t'ug-CN',\n\t\t'uk-UA',\n\t\t'ur-PK',\n\t\t'vi-VN',\n\t\t'wo-SN',\n\t\t'xh-ZA',\n\t\t'yo-NG',\n\t\t'zh-CN',\n\t\t'zh-HK',\n\t\t'zh-MO',\n\t\t'zh-SG',\n\t\t'zh-TW',\n\t\t'zu-ZA',\n\t);\n\n\t$buildprimarykeytotest = strtolower($countrycode).'-'.strtoupper($countrycode);\n\tif (in_array($buildprimarykeytotest, $locales)) return strtolower($countrycode).'_'.strtoupper($countrycode);\n\n\tif (function_exists('locale_get_primary_language') && function_exists('locale_get_region'))    // Need extension php-intl\n\t{\n\t    foreach ($locales as $locale)\n    \t{\n    \t\t$locale_language = locale_get_primary_language($locale);\n    \t\t$locale_region = locale_get_region($locale);\n    \t\tif (strtoupper($countrycode) == $locale_region)\n    \t\t{\n    \t\t\t//var_dump($locale.'-'.$locale_language.'-'.$locale_region);\n    \t\t\treturn strtolower($locale_language).'_'.strtoupper($locale_region);\n    \t\t}\n    \t}\n\t}\n\telse\n\t{\n        dol_syslog(\"Warning Exention php-intl is not available\", LOG_WARNING);\n\t}\n\n\treturn null;\n}\n\n/**\n *  Complete or removed entries into a head array (used to build tabs).\n *  For example, with value added by external modules. Such values are declared into $conf->modules_parts['tab'].\n *  Or by change using hook completeTabsHead\n *\n *  @param\tConf\t\t\t$conf           Object conf\n *  @param  Translate\t\t$langs          Object langs\n *  @param  object|null\t\t$object         Object object\n *  @param  array\t\t\t$head          \tObject head\n *  @param  int\t\t\t\t$h\t\t\t\tNew position to fill\n *  @param  string\t\t\t$type           Value for object where objectvalue can be\n *                              \t\t\t'thirdparty'       to add a tab in third party view\n *\t\t                        \t      \t'intervention'     to add a tab in intervention view\n *     \t\t                    \t     \t'supplier_order'   to add a tab in supplier order view\n *          \t\t            \t        'supplier_invoice' to add a tab in supplier invoice view\n *                  \t\t    \t        'invoice'          to add a tab in customer invoice view\n *                          \t\t\t    'order'            to add a tab in customer order view\n *                          \t\t\t\t'contract'\t\t   to add a tabl in contract view\n *                      \t\t\t        'product'          to add a tab in product view\n *                              \t\t\t'propal'           to add a tab in propal view\n *                              \t\t\t'user'             to add a tab in user view\n *                              \t\t\t'group'            to add a tab in group view\n * \t\t        \t               \t     \t'member'           to add a tab in fundation member view\n *      \t\t                        \t'categories_x'\t   to add a tab in category view ('x': type of category (0=product, 1=supplier, 2=customer, 3=member)\n *      \t\t\t\t\t\t\t\t\t'ecm'\t\t\t   to add a tab for another ecm view\n *                                          'stock'            to add a tab for warehouse view\n *  @param  string\t\t$mode  \t        \t'add' to complete head, 'remove' to remove entries\n *\t@return\tvoid\n */\nfunction complete_head_from_modules($conf, $langs, $object, &$head, &$h, $type, $mode = 'add')\n{\n\tglobal $hookmanager;\n\n\tif (isset($conf->modules_parts['tabs'][$type]) && is_array($conf->modules_parts['tabs'][$type]))\n\t{\n\t\tforeach ($conf->modules_parts['tabs'][$type] as $value)\n\t\t{\n\t\t\t$values = explode(':', $value);\n\n\t\t\tif ($mode == 'add' && !preg_match('/^\\-/', $values[1]))\n\t\t\t{\n\t\t\t\tif (count($values) == 6)       // new declaration with permissions:  $value='objecttype:+tabname1:Title1:langfile@mymodule:$user->rights->mymodule->read:/mymodule/mynewtab1.php?id=__ID__'\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\n\t\t\t\t\tif (verifCond($values[4]))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\t\tif (preg_match('/SUBSTITUTION_([^_]+)/i', $values[2], $reg))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$substitutionarray = array();\n\t\t\t\t\t\t\tcomplete_substitutions_array($substitutionarray, $langs, $object, array('needforkey'=>$values[2]));\n\t\t\t\t\t\t\t$label = make_substitutions($reg[1], $substitutionarray);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse $label = $langs->trans($values[2]);\n\n\t\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', ((is_object($object) && !empty($object->id)) ? $object->id : ''), $values[5]), 1);\n\t\t\t\t\t\t$head[$h][1] = $label;\n\t\t\t\t\t\t$head[$h][2] = str_replace('+', '', $values[1]);\n\t\t\t\t\t\t$h++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (count($values) == 5)       // deprecated\n\t\t\t\t{\n\t\t\t\t\tdol_syslog('Passing 5 values in tabs module_parts is deprecated. Please update to 6 with permissions.', LOG_WARNING);\n\n\t\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\tif (preg_match('/SUBSTITUTION_([^_]+)/i', $values[2], $reg))\n\t\t\t\t\t{\n\t\t\t\t\t\t$substitutionarray = array();\n\t\t\t\t\t\tcomplete_substitutions_array($substitutionarray, $langs, $object, array('needforkey'=>$values[2]));\n\t\t\t\t\t\t$label = make_substitutions($reg[1], $substitutionarray);\n\t\t\t\t\t}\n\t\t\t\t\telse $label = $langs->trans($values[2]);\n\n\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', ((is_object($object) && !empty($object->id)) ? $object->id : ''), $values[4]), 1);\n\t\t\t\t\t$head[$h][1] = $label;\n\t\t\t\t\t$head[$h][2] = str_replace('+', '', $values[1]);\n\t\t\t\t\t$h++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($mode == 'remove' && preg_match('/^\\-/', $values[1]))\n\t\t\t{\n\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t$tabname = str_replace('-', '', $values[1]);\n\t\t\t\tforeach ($head as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$condition = (!empty($values[3]) ? verifCond($values[3]) : 1);\n\t\t\t\t\t//var_dump($key.' - '.$tabname.' - '.$head[$key][2].' - '.$values[3].' - '.$condition);\n\t\t\t\t\tif ($head[$key][2] == $tabname && $condition)\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($head[$key]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// No need to make a return $head. Var is modified as a reference\n\tif (!empty($hookmanager))\n\t{\n\t\t$parameters = array('object' => $object, 'mode' => $mode, 'head' => $head);\n\t\t$reshook = $hookmanager->executeHooks('completeTabsHead', $parameters);\n\t\tif ($reshook > 0)\n\t\t{\n\t\t\t$head = $hookmanager->resArray;\n            $h = count($head);\n\t\t}\n\t}\n}\n\n/**\n * Print common footer :\n * \t\tconf->global->MAIN_HTML_FOOTER\n *      js for switch of menu hider\n * \t\tjs for conf->global->MAIN_GOOGLE_AN_ID\n * \t\tjs for conf->global->MAIN_SHOW_TUNING_INFO or $_SERVER[\"MAIN_SHOW_TUNING_INFO\"]\n * \t\tjs for conf->logbuffer\n *\n * @param\tstring\t$zone\t'private' (for private pages) or 'public' (for public pages)\n * @return\tvoid\n */\nfunction printCommonFooter($zone = 'private')\n{\n\tglobal $conf, $hookmanager, $user, $debugbar;\n\tglobal $action;\n\tglobal $micro_start_time;\n\n\tif ($zone == 'private') print \"\\n\".'<!-- Common footer for private page -->'.\"\\n\";\n\telse print \"\\n\".'<!-- Common footer for public page -->'.\"\\n\";\n\n\t// A div to store page_y POST parameter so we can read it using javascript\n\tprint \"\\n<!-- A div to store page_y POST parameter -->\\n\";\n\tprint '<div id=\"page_y\" style=\"display: none;\">'.$_POST['page_y'].'</div>'.\"\\n\";\n\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('printCommonFooter', $parameters); // Note that $action and $object may have been modified by some hooks\n\tif (empty($reshook))\n\t{\n\t\tif (!empty($conf->global->MAIN_HTML_FOOTER)) print $conf->global->MAIN_HTML_FOOTER.\"\\n\";\n\n\t\tprint \"\\n\";\n\t\tif (!empty($conf->use_javascript_ajax))\n\t\t{\n\t\t\tprint '<script>'.\"\\n\";\n\t\t\tprint 'jQuery(document).ready(function() {'.\"\\n\";\n\n\t\t\tif ($zone == 'private' && empty($conf->dol_use_jmobile))\n\t\t\t{\n\t\t\t\tprint \"\\n\";\n\t\t\t\tprint '/* JS CODE TO ENABLE to manage handler to switch left menu page (menuhider) */'.\"\\n\";\n\t\t\t\tprint 'jQuery(\"li.menuhider\").click(function(event) {';\n\t\t\t\tprint '  if (!$( \"body\" ).hasClass( \"sidebar-collapse\" )){ event.preventDefault(); }'.\"\\n\";\n\t\t\t\tprint '  console.log(\"We click on .menuhider\");'.\"\\n\";\n\t\t\t\tprint '  $(\"body\").toggleClass(\"sidebar-collapse\")'.\"\\n\";\n\t\t\t\tprint '});'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Management of focus and mandatory for fields\n\t\t\tif ($action == 'create' || $action == 'edit' || (empty($action) && (preg_match('/new\\.php/', $_SERVER[\"PHP_SELF\"]))))\n\t\t\t{\n\t\t\t\tprint '/* JS CODE TO ENABLE to manage focus and mandatory form fields */'.\"\\n\";\n\t\t\t\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t\t\t\t// Clean $relativepathstring\n\t\t\t\tif (constant('DOL_URL_ROOT')) $relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\t\t\t//$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\tif (!empty($user->default_values[$relativepathstring]['focus']))\n\t\t\t\t{\n\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['focus'] as $defkey => $defval)\n\t\t\t\t\t{\n\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$tmpquerytohaveparam = explode('=', $tmpquerytohave);\n\t\t\t\t\t\t\t\t//print \"console.log('\".$tmpquerytohaveparam[0].\" \".$tmpquerytohaveparam[1].\" \".GETPOST($tmpquerytohaveparam[0]).\"');\";\n\t\t\t\t\t\t\t\tif (!GETPOSTISSET($tmpquerytohaveparam[0]) || ($tmpquerytohaveparam[1] != GETPOST($tmpquerytohaveparam[0]))) $foundintru = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($defval as $paramkey => $paramval)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Set focus on field\n\t\t\t\t\t\t\t\tprint 'jQuery(\"input[name=\\''.$paramkey.'\\']\").focus();'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"textarea[name=\\''.$paramkey.'\\']\").focus();'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"select[name=\\''.$paramkey.'\\']\").focus();'.\"\\n\"; // Not really usefull, but we keep it in case of.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!empty($user->default_values[$relativepathstring]['mandatory']))\n\t\t\t\t{\n\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['mandatory'] as $defkey => $defval)\n\t\t\t\t\t{\n\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$tmpquerytohaveparam = explode('=', $tmpquerytohave);\n\t\t\t\t\t\t\t\t//print \"console.log('\".$tmpquerytohaveparam[0].\" \".$tmpquerytohaveparam[1].\" \".GETPOST($tmpquerytohaveparam[0]).\"');\";\n\t\t\t\t\t\t\t\tif (!GETPOSTISSET($tmpquerytohaveparam[0]) || ($tmpquerytohaveparam[1] != GETPOST($tmpquerytohaveparam[0]))) $foundintru = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($defval as $paramkey => $paramval)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Add property 'required' on input\n\t\t\t\t\t\t\t\tprint 'jQuery(\"input[name=\\''.$paramkey.'\\']\").prop(\\'required\\',true);'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"textarea[name=\\''.$paramkey.'\\']\").prop(\\'required\\',true);'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"select[name=\\''.$paramkey.'\\']\").prop(\\'required\\',true);'.\"\\n\"; // required on a select works only if key is \"\", this does not happen in Dolibarr\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint '});'.\"\\n\";\n\n\t\t\t// End of tuning\n\t\t\tif (!empty($_SERVER['MAIN_SHOW_TUNING_INFO']) || !empty($conf->global->MAIN_SHOW_TUNING_INFO))\n\t\t\t{\n\t\t\t\tprint \"\\n\";\n\t\t\t\tprint \"/* JS CODE TO ENABLE to add memory info */\\n\";\n\t\t\t\tprint 'window.console && console.log(\"';\n\t\t\t\tif (!empty($conf->global->MEMCACHED_SERVER)) print 'MEMCACHED_SERVER='.$conf->global->MEMCACHED_SERVER.' - ';\n\t\t\t\tprint 'MAIN_OPTIMIZE_SPEED='.(isset($conf->global->MAIN_OPTIMIZE_SPEED) ? $conf->global->MAIN_OPTIMIZE_SPEED : 'off');\n\t\t\t\tif (!empty($micro_start_time))   // Works only if MAIN_SHOW_TUNING_INFO is defined at $_SERVER level. Not in global variable.\n\t\t\t\t{\n\t\t\t\t\t$micro_end_time = microtime(true);\n\t\t\t\t\tprint ' - Build time: '.ceil(1000 * ($micro_end_time - $micro_start_time)).' ms';\n\t\t\t\t}\n\n\t\t\t\tif (function_exists(\"memory_get_usage\")) {\n\t\t\t\t\tprint ' - Mem: '.memory_get_usage(); // Do not use true here, it seems it takes the peak amount\n\t\t\t\t}\n\t\t\t\tif (function_exists(\"memory_get_peak_usage\")) {\n\t\t\t\t\tprint ' - Real mem peak: '.memory_get_peak_usage(true);\n\t\t\t\t}\n\t\t\t\tif (function_exists(\"zend_loader_file_encoded\"))\n\t\t\t\t{\n\t\t\t\t\tprint ' - Zend encoded file: '.(zend_loader_file_encoded() ? 'yes' : 'no');\n\t\t\t\t}\n\t\t\t\tprint '\");'.\"\\n\";\n\t\t\t}\n\n\t\t\tprint \"\\n\".'</script>'.\"\\n\";\n\n\t\t\t// Google Analytics\n\t\t\t// TODO Add a hook here\n\t\t\tif (!empty($conf->google->enabled) && !empty($conf->global->MAIN_GOOGLE_AN_ID))\n\t\t\t{\n\t\t\t\t$tmptagarray = explode(',', $conf->global->MAIN_GOOGLE_AN_ID);\n\t\t\t\tforeach($tmptagarray as $tmptag) {\n\t\t\t\t\tprint \"\\n\";\n\t\t\t\t\tprint \"<!-- JS CODE TO ENABLE for google analtics tag -->\\n\";\n\t\t\t\t\tprint \"\n\t\t\t\t\t<!-- Global site tag (gtag.js) - Google Analytics -->\n\t\t\t\t\t<script async src=\\\"https://www.googletagmanager.com/gtag/js?id=\".trim($tmptag).\"\\\"></script>\n\t\t\t\t\t<script>\n\t\t\t\t\twindow.dataLayer = window.dataLayer || [];\n\t\t\t\t\tfunction gtag(){dataLayer.push(arguments);}\n\t\t\t\t\tgtag('js', new Date());\n\n\t\t\t\t\tgtag('config', '\".trim($tmptag).\"');\n\t\t\t\t\t</script>\";\n\t\t\t\t\tprint \"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add Xdebug coverage of code\n\t\tif (defined('XDEBUGCOVERAGE'))\n\t\t{\n\t\t    print_r(xdebug_get_code_coverage());\n\t\t}\n\n\t\t// Add DebugBar data\n\t    if (!empty($user->rights->debugbar->read) && is_object($debugbar))\n\t    {\n\t        $debugbar['time']->stopMeasure('pageaftermaster');\n\t        print '<!-- Output debugbar data -->'.\"\\n\";\n\t\t    print $debugbar->getRenderer()->render();\n\t\t}\n\t\telseif (count($conf->logbuffer))    // If there is some logs in buffer to show\n\t\t{\n\t\t\tprint \"\\n\";\n\t\t\tprint \"<!-- Start of log output\\n\";\n\t\t\t//print '<div class=\"hidden\">'.\"\\n\";\n\t\t\tforeach ($conf->logbuffer as $logline)\n\t\t\t{\n\t\t\t\tprint $logline.\"<br>\\n\";\n\t\t\t}\n\t\t\t//print '</div>'.\"\\n\";\n\t\t\tprint \"End of log output -->\\n\";\n\t\t}\n\t}\n}\n\n/**\n * Split a string with 2 keys into key array.\n * For example: \"A=1;B=2;C=2\" is exploded into array('A'=>1,'B'=>2,'C'=>3)\n *\n * @param \tstring\t$string\t\tString to explode\n * @param \tstring\t$delimiter\tDelimiter between each couple of data\n * @param \tstring\t$kv\t\t\tDelimiter between key and value\n * @return\tarray\t\t\t\tArray of data exploded\n */\nfunction dolExplodeIntoArray($string, $delimiter = ';', $kv = '=')\n{\n\tif ($a = explode($delimiter, $string))\n\t{\n\t\t$ka = array();\n\t\tforeach ($a as $s) { // each part\n\t\t\tif ($s) {\n\t\t\t\tif ($pos = strpos($s, $kv)) { // key/value delimiter\n\t\t\t\t\t$ka[trim(substr($s, 0, $pos))] = trim(substr($s, $pos + strlen($kv)));\n\t\t\t\t} else { // key delimiter not found\n\t\t\t\t\t$ka[] = trim($s);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $ka;\n\t}\n\treturn array();\n}\n\n\n/**\n * Set focus onto field with selector (similar behaviour of 'autofocus' HTML5 tag)\n *\n * @param \tstring\t$selector\tSelector ('#id' or 'input[name=\"ref\"]') to use to find the HTML input field that must get the autofocus. You must use a CSS selector, so unique id preceding with the '#' char.\n * @return\tstring\t\t\t\tHTML code to set focus\n */\nfunction dol_set_focus($selector)\n{\n\tprint \"\\n\".'<!-- Set focus onto a specific field -->'.\"\\n\";\n\tprint '<script>jQuery(document).ready(function() { jQuery(\"'.dol_escape_js($selector).'\").focus(); });</script>'.\"\\n\";\n}\n\n\n/**\n * Return getmypid() or random PID when function is disabled\n * Some web hosts disable this php function for security reasons\n * and sometimes we can't redeclare function\n *\n * @return\tint\n */\nfunction dol_getmypid()\n{\n\tif (!function_exists('getmypid')) {\n\t\treturn mt_rand(1, 32768);\n\t} else {\n\t\treturn getmypid();\n\t}\n}\n\n\n/**\n * Generate natural SQL search string for a criteria (this criteria can be tested on one or several fields)\n *\n * @param   string|string[]\t$fields \tString or array of strings, filled with the name of all fields in the SQL query we must check (combined with a OR). Example: array(\"p.field1\",\"p.field2\")\n * @param   string \t\t\t$value \t\tThe value to look for.\n *                          \t\t    If param $mode is 0, can contains several keywords separated with a space or |\n *                                      like \"keyword1 keyword2\" = We want record field like keyword1 AND field like keyword2\n *                                      or like \"keyword1|keyword2\" = We want record field like keyword1 OR field like keyword2\n *                             \t\t\tIf param $mode is 1, can contains an operator <, > or = like \"<10\" or \">=100.5 < 1000\"\n *                             \t\t\tIf param $mode is 2, can contains a list of int id separated by comma like \"1,3,4\"\n *                             \t\t\tIf param $mode is 3, can contains a list of string separated by comma like \"a,b,c\"\n * @param\tinteger\t\t\t$mode\t\t0=value is list of keyword strings, 1=value is a numeric test (Example \">5.5 <10\"), 2=value is a list of ID separated with comma (Example '1,3,4')\n * \t\t\t\t\t\t\t\t\t\t3=value is list of string separated with comma (Example 'text 1,text 2'), 4=value is a list of ID separated with comma (Example '1,3,4') for search into a multiselect string ('1,2')\n * @param\tinteger\t\t\t$nofirstand\t1=Do not output the first 'AND'\n * @return \tstring \t\t\t$res \t\tThe statement to append to the SQL query\n */\nfunction natural_search($fields, $value, $mode = 0, $nofirstand = 0)\n{\n\tglobal $db, $langs;\n\n\t$value = trim($value);\n\n\tif ($mode == 0)\n\t{\n\t\t$value = preg_replace('/\\*/', '%', $value); // Replace * with %\n\t}\n\tif ($mode == 1)\n\t{\n\t\t$value = preg_replace('/([<>=]+)\\s+([0-9'.preg_quote($langs->trans(\"DecimalSeparator\"), '/').'\\-])/', '\\1\\2', $value); // Clean string '< 10' into '<10' so we can the explode on space to get all tests to do\n\t}\n\n\t$value = preg_replace('/\\s*\\|\\s*/', '|', $value);\n\n\t$crits = explode(' ', $value);\n\t$res = '';\n\tif (!is_array($fields)) $fields = array($fields);\n\n\t$nboffields = count($fields);\n\t$end2 = count($crits);\n\t$j = 0;\n\tforeach ($crits as $crit)\n\t{\n\t\t$i = 0; $i2 = 0;\n\t\t$newres = '';\n\t\tforeach ($fields as $field)\n\t\t{\n\t\t\tif ($mode == 1)\n\t\t\t{\n\t\t\t\t$operator = '=';\n\t\t\t\t$newcrit = preg_replace('/([<>=]+)/', '', trim($crit));\n\n\t\t\t\t$reg = array();\n\t\t\t\tpreg_match('/([<>=]+)/', trim($crit), $reg);\n\t\t\t\tif ($reg[1])\n\t\t\t\t{\n\t\t\t\t\t$operator = $reg[1];\n\t\t\t\t}\n\t\t\t\tif ($newcrit != '')\n\t\t\t\t{\n\t\t\t\t\t$numnewcrit = price2num($newcrit);\n\t\t\t\t\tif (is_numeric($numnewcrit))\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').$field.' '.$operator.' '.$numnewcrit;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').'1 = 2'; // force false\n\t\t\t\t\t}\n\t\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($mode == 2 || $mode == -2)\n\t\t\t{\n\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').$field.\" \".($mode == -2 ? 'NOT ' : '').\"IN (\".$db->escape(trim($crit)).\")\";\n\t\t\t\tif ($mode == -2) $newres .= ' OR '.$field.' IS NULL';\n\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t}\n\t\t\telseif ($mode == 3 || $mode == -3)\n\t\t\t{\n\t\t\t\t$tmparray = explode(',', trim($crit));\n\t\t\t\tif (count($tmparray))\n\t\t\t\t{\n\t\t\t\t\t$listofcodes = '';\n\t\t\t\t\tforeach ($tmparray as $val)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($val)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$listofcodes .= ($listofcodes ? ',' : '');\n\t\t\t\t\t\t\t$listofcodes .= \"'\".$db->escape(trim($val)).\"'\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').$field.\" \".($mode == -3 ? 'NOT ' : '').\"IN (\".$listofcodes.\")\";\n\t\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t\t}\n\t\t\t\tif ($mode == -3) $newres .= ' OR '.$field.' IS NULL';\n\t\t\t}\n\t\t\telseif ($mode == 4)\n\t\t\t{\n\t\t\t    $tmparray = explode(',', trim($crit));\n\t\t\t    if (count($tmparray))\n\t\t\t    {\n\t\t\t        $listofcodes = '';\n\t\t\t        foreach ($tmparray as $val)\n\t\t\t        {\n\t\t\t            if ($val)\n\t\t\t            {\n\t\t\t                $newres .= ($i2 > 0 ? ' OR (' : '(').$field.' LIKE \\''.$db->escape(trim($val)).',%\\'';\n\t\t\t                $newres .= ' OR '.$field.' = \\''.$db->escape(trim($val)).'\\'';\n\t\t\t                $newres .= ' OR '.$field.' LIKE \\'%,'.$db->escape(trim($val)).'\\'';\n\t\t\t                $newres .= ' OR '.$field.' LIKE \\'%,'.$db->escape(trim($val)).',%\\'';\n\t\t\t                $newres .= ')';\n\t\t\t                $i2++;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\telse    // $mode=0\n\t\t\t{\n\t\t\t\t$tmpcrits = explode('|', $crit);\n\t\t\t\t$i3 = 0;\n\t\t\t\tforeach ($tmpcrits as $tmpcrit)\n\t\t\t\t{\n                    if ($tmpcrit !== '0' && empty($tmpcrit)) continue;\n\n\t\t\t\t\t$newres .= (($i2 > 0 || $i3 > 0) ? ' OR ' : '');\n\n\t\t\t\t\tif (preg_match('/\\.(id|rowid)$/', $field))\t// Special case for rowid that is sometimes a ref so used as a search field\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= $field.\" = \".(is_numeric(trim($tmpcrit)) ?trim($tmpcrit) : '0');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= $field.\" LIKE '\";\n\n\t\t\t\t\t\t$tmpcrit = trim($tmpcrit);\n\t\t\t\t\t\t$tmpcrit2 = $tmpcrit;\n\t\t\t\t\t\t$tmpbefore = '%'; $tmpafter = '%';\n\t\t\t\t\t\tif (preg_match('/^[\\^\\$]/', $tmpcrit))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpbefore = '';\n\t\t\t\t\t\t\t$tmpcrit2 = preg_replace('/^[\\^\\$]/', '', $tmpcrit2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (preg_match('/[\\^\\$]$/', $tmpcrit))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpafter = '';\n\t\t\t\t\t\t\t$tmpcrit2 = preg_replace('/[\\^\\$]$/', '', $tmpcrit2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$newres .= $tmpbefore;\n\t\t\t\t\t\t$newres .= $db->escape($tmpcrit2);\n\t\t\t\t\t\t$newres .= $tmpafter;\n\t\t\t\t\t\t$newres .= \"'\";\n\t\t\t\t\t\tif ($tmpcrit2 == '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$newres .= ' OR '.$field.\" IS NULL\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$i3++;\n\t\t\t\t}\n\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\tif ($newres) $res = $res.($res ? ' AND ' : '').($i2 > 1 ? '(' : '').$newres.($i2 > 1 ? ')' : '');\n\t\t$j++;\n\t}\n\t$res = ($nofirstand ? \"\" : \" AND \").\"(\".$res.\")\";\n\t//print 'xx'.$res.'yy';\n\treturn $res;\n}\n\n/**\n * Return string with full Url. The file qualified is the one defined by relative path in $object->last_main_doc\n *\n * @param   Object\t$object\t\t\t\tObject\n * @return\tstring\t\t\t\t\t\tUrl string\n */\nfunction showDirectDownloadLink($object)\n{\n\tglobal $conf, $langs;\n\n\t$out = '';\n\t$url = $object->getLastMainDocLink($object->element);\n\n\tif ($url)\n\t{\n\t\t$out .= img_picto('', 'globe').' '.$langs->trans(\"DirectDownloadLink\").'<br>';\n\t\t$out .= '<input type=\"text\" id=\"directdownloadlink\" class=\"quatrevingtpercent\" value=\"'.$url.'\">';\n\t\t$out .= ajax_autoselect(\"directdownloadlink\", 0);\n\t}\n\treturn $out;\n}\n\n/**\n * Return the filename of file to get the thumbs\n *\n * @param   string  $file           Original filename (full or relative path)\n * @param   string  $extName        Extension to differenciate thumb file name ('', '_small', '_mini')\n * @param   string  $extImgTarget   Force image extension for thumbs. Use '' to keep same extension than original image (default).\n * @return  string                  New file name (full or relative path, including the thumbs/)\n */\nfunction getImageFileNameForSize($file, $extName, $extImgTarget = '')\n{\n\t$dirName = dirname($file);\n\tif ($dirName == '.') $dirName = '';\n\n\t$fileName = preg_replace('/(\\.gif|\\.jpeg|\\.jpg|\\.png|\\.bmp|\\.webp)$/i', '', $file); // We remove extension, whatever is its case\n\t$fileName = basename($fileName);\n\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.jpg$/i', $file) ? '.jpg' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.jpeg$/i', $file) ? '.jpeg' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.gif$/i', $file) ? '.gif' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.png$/i', $file) ? '.png' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.bmp$/i', $file) ? '.bmp' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.webp$/i', $file) ? '.webp' : '');\n\n\tif (!$extImgTarget) return $file;\n\n\t$subdir = '';\n\tif ($extName) $subdir = 'thumbs/';\n\n\treturn ($dirName ? $dirName.'/' : '').$subdir.$fileName.$extName.$extImgTarget; // New filename for thumb\n}\n\n\n/**\n * Return URL we can use for advanced preview links\n *\n * @param   string    $modulepart     propal, facture, facture_fourn, ...\n * @param   string    $relativepath   Relative path of docs.\n * @param\tint\t\t  $alldata\t\t  Return array with all components (1 is recommended, then use a simple a href link with the class, target and mime attribute added. 'documentpreview' css class is handled by jquery code into main.inc.php)\n * @param\tstring\t  $param\t\t  More param on http links\n * @return  string|array              Output string with href link or array with all components of link\n */\nfunction getAdvancedPreviewUrl($modulepart, $relativepath, $alldata = 0, $param = '')\n{\n\tglobal $conf, $langs;\n\n\tif (empty($conf->use_javascript_ajax)) return '';\n\n\t$isAllowedForPreview = dolIsAllowedForPreview($relativepath);\n\n\tif ($alldata == 1)\n\t{\n\t\tif ($isAllowedForPreview) return array('target'=>'_blank', 'css'=>'documentpreview', 'url'=>DOL_URL_ROOT.'/document.php?modulepart='.$modulepart.'&attachment=0&file='.urlencode($relativepath).($param ? '&'.$param : ''), 'mime'=>dol_mimetype($relativepath));\n\t\telse return array();\n\t}\n\n\t// old behavior, return a string\n\tif ($isAllowedForPreview) return 'javascript:document_preview(\\''.dol_escape_js(DOL_URL_ROOT.'/document.php?modulepart='.$modulepart.'&attachment=0&file='.urlencode($relativepath).($param ? '&'.$param : '')).'\\', \\''.dol_mimetype($relativepath).'\\', \\''.dol_escape_js($langs->trans('Preview')).'\\')';\n\telse return '';\n}\n\n\n/**\n * Make content of an input box selected when we click into input field.\n *\n * @param string\t$htmlname\tId of html object ('#idvalue' or '.classvalue')\n * @param string\t$addlink\tAdd a 'link to' after\n * @return string\n */\nfunction ajax_autoselect($htmlname, $addlink = '')\n{\n\tglobal $langs;\n\t$out = '<script>\n               jQuery(document).ready(function () {\n\t\t\t\t    jQuery(\"'.((strpos($htmlname, '.') === 0 ? '' : '#').$htmlname).'\").click(function() { jQuery(this).select(); } );\n\t\t\t\t});\n\t\t    </script>';\n\tif ($addlink) $out .= ' <a href=\"'.$addlink.'\" target=\"_blank\">'.$langs->trans(\"Link\").'</a>';\n\treturn $out;\n}\n\n/**\n *\tReturn if a file is qualified for preview\n *\n *\t@param\tstring\t$file\t\tFilename we looking for information\n *\t@return int\t\t\t\t\t1 If allowed, 0 otherwise\n *  @see    dol_mimetype(), image_format_supported() from images.lib.php\n */\nfunction dolIsAllowedForPreview($file)\n{\n\tglobal $conf;\n\n\t// Check .noexe extension in filename\n\tif (preg_match('/\\.noexe$/i', $file)) return 0;\n\n\t// Check mime types\n\t$mime_preview = array('bmp', 'jpeg', 'png', 'gif', 'tiff', 'pdf', 'plain', 'css', 'webp');\n\tif (!empty($conf->global->MAIN_ALLOW_SVG_FILES_AS_IMAGES)) $mime_preview[] = 'svg+xml';\n\t//$mime_preview[]='vnd.oasis.opendocument.presentation';\n\t//$mime_preview[]='archive';\n\t$num_mime = array_search(dol_mimetype($file, '', 1), $mime_preview);\n\tif ($num_mime !== false) return 1;\n\n\t// By default, not allowed for preview\n\treturn 0;\n}\n\n/**\n *\tReturn mime type of a file\n *\n *\t@param\tstring\t$file\t\tFilename we looking for MIME type\n *  @param  string\t$default    Default mime type if extension not found in known list\n * \t@param\tint\t\t$mode    \t0=Return full mime, 1=otherwise short mime string, 2=image for mime type, 3=source language, 4=css of font fa\n *\t@return string \t\t    \tReturn a mime type family (text/xxx, application/xxx, image/xxx, audio, video, archive)\n *  @see    dolIsAllowedForPreview(), image_format_supported() from images.lib.php\n */\nfunction dol_mimetype($file, $default = 'application/octet-stream', $mode = 0)\n{\n\t$mime = $default;\n\t$imgmime = 'other.png';\n\t$famime = 'file-o';\n\t$srclang = '';\n\n\t$tmpfile = preg_replace('/\\.noexe$/', '', $file);\n\n\t// Plain text files\n\tif (preg_match('/\\.txt$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.rtx$/i', $tmpfile)) { $mime = 'text/richtext'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.csv$/i', $tmpfile)) { $mime = 'text/csv'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.tsv$/i', $tmpfile)) { $mime = 'text/tab-separated-values'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.(cf|conf|log)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.ini$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'ini'; $famime = 'file-text-o'; }\n    if (preg_match('/\\.md$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'md'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.css$/i', $tmpfile)) { $mime = 'text/css'; $imgmime = 'css.png'; $srclang = 'css'; $famime = 'file-text-o'; }\n\t// Certificate files\n\tif (preg_match('/\\.(crt|cer|key|pub)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\t// XML based (HTML/XML/XAML)\n\tif (preg_match('/\\.(html|htm|shtml)$/i', $tmpfile)) { $mime = 'text/html'; $imgmime = 'html.png'; $srclang = 'html'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.(xml|xhtml)$/i', $tmpfile)) { $mime = 'text/xml'; $imgmime = 'other.png'; $srclang = 'xml'; $famime = 'file-text-o'; }\n    if (preg_match('/\\.xaml$/i', $tmpfile)) { $mime = 'text/xml'; $imgmime = 'other.png'; $srclang = 'xaml'; $famime = 'file-text-o'; }\n\t// Languages\n\tif (preg_match('/\\.bas$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'bas'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(c)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'c'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(cpp)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'cpp'; $famime = 'file-code-o'; }\n    if (preg_match('/\\.cs$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'cs'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(h)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'h'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(java|jsp)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'java'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.php([0-9]{1})?$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'php.png'; $srclang = 'php'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.phtml$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'php.png'; $srclang = 'php'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(pl|pm)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'pl.png'; $srclang = 'perl'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.sql$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'sql'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.js$/i', $tmpfile)) { $mime = 'text/x-javascript'; $imgmime = 'jscript.png'; $srclang = 'js'; $famime = 'file-code-o'; }\n\t// Open office\n\tif (preg_match('/\\.odp$/i', $tmpfile)) { $mime = 'application/vnd.oasis.opendocument.presentation'; $imgmime = 'ooffice.png'; $famime = 'file-powerpoint-o'; }\n\tif (preg_match('/\\.ods$/i', $tmpfile)) { $mime = 'application/vnd.oasis.opendocument.spreadsheet'; $imgmime = 'ooffice.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.odt$/i', $tmpfile)) { $mime = 'application/vnd.oasis.opendocument.text'; $imgmime = 'ooffice.png'; $famime = 'file-word-o'; }\n\t// MS Office\n\tif (preg_match('/\\.mdb$/i', $tmpfile)) { $mime = 'application/msaccess'; $imgmime = 'mdb.png'; $famime = 'file-o'; }\n\tif (preg_match('/\\.doc(x|m)?$/i', $tmpfile)) { $mime = 'application/msword'; $imgmime = 'doc.png'; $famime = 'file-word-o'; }\n\tif (preg_match('/\\.dot(x|m)?$/i', $tmpfile)) { $mime = 'application/msword'; $imgmime = 'doc.png'; $famime = 'file-word-o'; }\n\tif (preg_match('/\\.xlt(x)?$/i', $tmpfile)) { $mime = 'application/vnd.ms-excel'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.xla(m)?$/i', $tmpfile)) { $mime = 'application/vnd.ms-excel'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.xls$/i', $tmpfile)) { $mime = 'application/vnd.ms-excel'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.xls(b|m|x)$/i', $tmpfile)) { $mime = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.pps(m|x)?$/i', $tmpfile)) { $mime = 'application/vnd.ms-powerpoint'; $imgmime = 'ppt.png'; $famime = 'file-powerpoint-o'; }\n\tif (preg_match('/\\.ppt(m|x)?$/i', $tmpfile)) { $mime = 'application/x-mspowerpoint'; $imgmime = 'ppt.png'; $famime = 'file-powerpoint-o'; }\n\t// Other\n\tif (preg_match('/\\.pdf$/i', $tmpfile)) { $mime = 'application/pdf'; $imgmime = 'pdf.png'; $famime = 'file-pdf-o'; }\n\t// Scripts\n\tif (preg_match('/\\.bat$/i', $tmpfile)) { $mime = 'text/x-bat'; $imgmime = 'script.png'; $srclang = 'dos'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.sh$/i', $tmpfile)) { $mime = 'text/x-sh'; $imgmime = 'script.png'; $srclang = 'bash'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.ksh$/i', $tmpfile)) { $mime = 'text/x-ksh'; $imgmime = 'script.png'; $srclang = 'bash'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.bash$/i', $tmpfile)) { $mime = 'text/x-bash'; $imgmime = 'script.png'; $srclang = 'bash'; $famime = 'file-code-o'; }\n\t// Images\n\tif (preg_match('/\\.ico$/i', $tmpfile)) { $mime = 'image/x-icon'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.(jpg|jpeg)$/i', $tmpfile)) { $mime = 'image/jpeg'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.png$/i', $tmpfile)) { $mime = 'image/png'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.gif$/i', $tmpfile)) { $mime = 'image/gif'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.bmp$/i', $tmpfile)) { $mime = 'image/bmp'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.(tif|tiff)$/i', $tmpfile)) { $mime = 'image/tiff'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.svg$/i', $tmpfile)) { $mime = 'image/svg+xml'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.webp$/i', $tmpfile)) { $mime = 'image/webp'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\t// Calendar\n\tif (preg_match('/\\.vcs$/i', $tmpfile)) { $mime = 'text/calendar'; $imgmime = 'other.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.ics$/i', $tmpfile)) { $mime = 'text/calendar'; $imgmime = 'other.png'; $famime = 'file-text-o'; }\n\t// Other\n\tif (preg_match('/\\.torrent$/i', $tmpfile)) { $mime = 'application/x-bittorrent'; $imgmime = 'other.png'; $famime = 'file-o'; }\n\t// Audio\n\tif (preg_match('/\\.(mp3|ogg|au|wav|wma|mid)$/i', $tmpfile)) { $mime = 'audio'; $imgmime = 'audio.png'; $famime = 'file-audio-o'; }\n\t// Video\n\tif (preg_match('/\\.ogv$/i', $tmpfile)) { $mime = 'video/ogg'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.webm$/i', $tmpfile)) { $mime = 'video/webm'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.avi$/i', $tmpfile)) { $mime = 'video/x-msvideo'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.divx$/i', $tmpfile)) { $mime = 'video/divx'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.xvid$/i', $tmpfile)) { $mime = 'video/xvid'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.(wmv|mpg|mpeg)$/i', $tmpfile)) { $mime = 'video'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\t// Archive\n\tif (preg_match('/\\.(zip|rar|gz|tgz|z|cab|bz2|7z|tar|lzh)$/i', $tmpfile)) { $mime = 'archive'; $imgmime = 'archive.png'; $famime = 'file-archive-o'; }    // application/xxx where zzz is zip, ...\n\t// Exe\n\tif (preg_match('/\\.(exe|com)$/i', $tmpfile)) { $mime = 'application/octet-stream'; $imgmime = 'other.png'; $famime = 'file-o'; }\n\t// Lib\n\tif (preg_match('/\\.(dll|lib|o|so|a)$/i', $tmpfile)) { $mime = 'library'; $imgmime = 'library.png'; $famime = 'file-o'; }\n\t// Err\n\tif (preg_match('/\\.err$/i', $tmpfile)) { $mime = 'error'; $imgmime = 'error.png'; $famime = 'file-text-o'; }\n\n\t// Return string\n\tif ($mode == 1)\n\t{\n\t\t$tmp = explode('/', $mime);\n\t\treturn (!empty($tmp[1]) ? $tmp[1] : $tmp[0]);\n\t}\n\tif ($mode == 2)\n\t{\n\t\treturn $imgmime;\n\t}\n\tif ($mode == 3)\n\t{\n\t\treturn $srclang;\n\t}\n\tif ($mode == 4)\n\t{\n\t\treturn $famime;\n\t}\n\treturn $mime;\n}\n\n/**\n * Return value from dictionary\n *\n * @param string\t$tablename\t\tname of dictionary\n * @param string\t$field\t\t\tthe value to return\n * @param int\t\t$id\t\t\t\tid of line\n * @param bool\t\t$checkentity\tadd filter on entity\n * @param string\t$rowidfield\t\tname of the column rowid\n * @return string\n */\nfunction getDictvalue($tablename, $field, $id, $checkentity = false, $rowidfield = 'rowid')\n{\n\tglobal $dictvalues, $db, $langs;\n\n\tif (!isset($dictvalues[$tablename]))\n\t{\n\t\t$dictvalues[$tablename] = array();\n\t\t$sql = 'SELECT * FROM '.$tablename.' WHERE 1'; // Here select * is allowed as it is generic code and we don't have list of fields\n\t\tif ($checkentity) $sql .= ' AND entity IN (0,'.getEntity($tablename).')';\n\n\t\t$resql = $db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj = $db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$dictvalues[$tablename][$obj->{$rowidfield}] = $obj;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($db);\n\t\t}\n\t}\n\n\tif (!empty($dictvalues[$tablename][$id])) return $dictvalues[$tablename][$id]->{$field}; // Found\n\telse // Not found\n\t{\n\t\tif ($id > 0) return $id;\n\t\treturn '';\n\t}\n}\n\n/**\n *\tReturn true if the color is light\n *\n *  @param\tstring\t$stringcolor\t\tString with hex (FFFFFF) or comma RGB ('255,255,255')\n *  @return\tint\t\t\t\t\t\t\t-1 : Error with argument passed |0 : color is dark | 1 : color is light\n */\nfunction colorIsLight($stringcolor)\n{\n    $stringcolor = str_replace('#', '', $stringcolor);\n\t$res = -1;\n\tif (!empty($stringcolor))\n\t{\n\t\t$res = 0;\n\t\t$tmp = explode(',', $stringcolor);\n\t\tif (count($tmp) > 1)   // This is a comma RGB ('255','255','255')\n\t\t{\n\t\t\t$r = $tmp[0];\n\t\t\t$g = $tmp[1];\n\t\t\t$b = $tmp[2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$hexr = $stringcolor[0].$stringcolor[1];\n\t\t\t$hexg = $stringcolor[2].$stringcolor[3];\n\t\t\t$hexb = $stringcolor[4].$stringcolor[5];\n\t\t\t$r = hexdec($hexr);\n\t\t\t$g = hexdec($hexg);\n\t\t\t$b = hexdec($hexb);\n\t\t}\n\t\t$bright = (max($r, $g, $b) + min($r, $g, $b)) / 510.0; // HSL algorithm\n\t\tif ($bright > 0.6) $res = 1;\n\t}\n\treturn $res;\n}\n\n/**\n * Function to test if an entry is enabled or not\n *\n * @param\tstring\t\t$type_user\t\t\t\t\t0=We test for internal user, 1=We test for external user\n * @param\tarray\t\t$menuentry\t\t\t\t\tArray for feature entry to test\n * @param\tarray\t\t$listofmodulesforexternal\tArray with list of modules allowed to external users\n * @return\tint\t\t\t\t\t\t\t\t\t\t0=Hide, 1=Show, 2=Show gray\n */\nfunction isVisibleToUserType($type_user, &$menuentry, &$listofmodulesforexternal)\n{\n\tglobal $conf;\n\n\t//print 'type_user='.$type_user.' module='.$menuentry['module'].' enabled='.$menuentry['enabled'].' perms='.$menuentry['perms'];\n\t//print 'ok='.in_array($menuentry['module'], $listofmodulesforexternal);\n\tif (empty($menuentry['enabled'])) return 0; // Entry disabled by condition\n\tif ($type_user && $menuentry['module'])\n\t{\n\t\t$tmploops = explode('|', $menuentry['module']);\n\t\t$found = 0;\n\t\tforeach ($tmploops as $tmploop)\n\t\t{\n\t\t\tif (in_array($tmploop, $listofmodulesforexternal)) {\n\t\t\t\t$found++; break;\n\t\t\t}\n\t\t}\n\t\tif (!$found) return 0; // Entry is for menus all excluded to external users\n\t}\n\tif (!$menuentry['perms'] && $type_user) return 0; // No permissions and user is external\n\tif (!$menuentry['perms'] && !empty($conf->global->MAIN_MENU_HIDE_UNAUTHORIZED))\treturn 0; // No permissions and option to hide when not allowed, even for internal user, is on\n\tif (!$menuentry['perms']) return 2; // No permissions and user is external\n\treturn 1;\n}\n\n/**\n * Round to next multiple.\n *\n * @param \tdouble\t\t$n\t\tNumber to round up\n * @param \tinteger\t\t$x\t\tMultiple. For example 60 to round up to nearest exact minute for a date with seconds.\n * @return \tinteger\t\t\t\tValue rounded.\n */\nfunction roundUpToNextMultiple($n, $x = 5)\n{\n\treturn (ceil($n) % $x === 0) ? ceil($n) : round(($n + $x / 2) / $x) * $x;\n}\n\n/**\n * Function dolGetBadge\n *\n * @param   string  $label      label of badge no html : use in alt attribute for accessibility\n * @param   string  $html       optional : label of badge with html\n * @param   string  $type       type of badge : Primary Secondary Success Danger Warning Info Light Dark status0 status1 status2 status3 status4 status5 status6 status7 status8 status9\n * @param   string  $mode       default '' , 'pill', 'dot'\n * @param   string  $url        the url for link\n * @param   array   $params     various params for future : recommended rather than adding more fuction arguments. array('attr'=>array('title'=>'abc'))\n * @return  string              Html badge\n */\nfunction dolGetBadge($label, $html = '', $type = 'primary', $mode = '', $url = '', $params = array())\n{\n    $attr = array(\n    \t'class'=>'badge '.(!empty($mode) ? ' badge-'.$mode : '').(!empty($type) ? ' badge-'.$type : '').(empty($params['css']) ? '' : ' '.$params['css'])\n    );\n\n    if (empty($html)) {\n        $html = $label;\n    }\n\n    if (!empty($url)) {\n        $attr['href'] = $url;\n    }\n\n    if ($mode === 'dot') {\n        $attr['class'] .= ' classfortooltip';\n        $attr['title'] = $html;\n        $attr['aria-label'] = $label;\n        $html = '';\n    }\n\n    // Override attr\n    if (!empty($params['attr']) && is_array($params['attr'])) {\n        foreach ($params['attr']as $key => $value) {\n\t\t\tif ($key == 'class') {\n\t\t\t\t$attr['class'] .= ' '.$value;\n\t\t\t}\n\t\t\telseif ($key == 'classOverride') {\n\t\t\t\t$attr['class'] = $value;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$attr[$key] = $value;\n\t\t\t}\n        }\n    }\n\n    // TODO: add hook\n\n    // escape all attribute\n    $attr = array_map('dol_escape_htmltag', $attr);\n\n    $TCompiledAttr = array();\n    foreach ($attr as $key => $value) {\n        $TCompiledAttr[] = $key.'=\"'.$value.'\"';\n    }\n\n    $compiledAttributes = !empty($TCompiledAttr) ?implode(' ', $TCompiledAttr) : '';\n\n    $tag = !empty($url) ? 'a' : 'span';\n\n    return '<'.$tag.' '.$compiledAttributes.'>'.$html.'</'.$tag.'>';\n}\n\n\n/**\n * Function dolGetStatus\n *\n * @param   string  $statusLabel       Label of badge no html : use in alt attribute for accessibility\n * @param   string  $statusLabelShort  Short label of badge no html\n * @param   string  $html              Optional : label of badge with html\n * @param   string  $statusType        status0 status1 status2 status3 status4 status5 status6 status7 status8 status9 : image name or badge name\n * @param   int\t    $displayMode       0=Long label, 1=Short label, 2=Picto + Short label, 3=Picto, 4=Picto + Long label, 5=Short label + Picto, 6=Long label + Picto\n * @param   string  $url               The url for link\n * @param   array   $params            Various params for future : recommended rather than adding more function arguments\n * @return  string                     Html status string\n */\nfunction dolGetStatus($statusLabel = '', $statusLabelShort = '', $html = '', $statusType = 'status0', $displayMode = 0, $url = '', $params = array())\n{\n    global $conf;\n\n    $return = '';\n    $dolGetBadgeParams = array();\n\n    if (!empty($params['badgeParams'])) {\n        $dolGetBadgeParams = $params['badgeParams'];\n    }\n\n    // TODO : add a hook\n\n    if ($displayMode == 0) {\n        $return = !empty($html) ? $html : $statusLabel;\n    }\n    elseif ($displayMode == 1) {\n        $return = !empty($html) ? $html : (!empty($statusLabelShort) ? $statusLabelShort : $statusLabel);\n    }\n    // Use status with images (for backward compatibility)\n    elseif (!empty($conf->global->MAIN_STATUS_USES_IMAGES)) {\n        $return = '';\n        $htmlLabel      = (in_array($displayMode, array(1, 2, 5)) ? '<span class=\"hideonsmartphone\">' : '').(!empty($html) ? $html : $statusLabel).(in_array($displayMode, array(1, 2, 5)) ? '</span>' : '');\n        $htmlLabelShort = (in_array($displayMode, array(1, 2, 5)) ? '<span class=\"hideonsmartphone\">' : '').(!empty($html) ? $html : (!empty($statusLabelShort) ? $statusLabelShort : $statusLabel)).(in_array($displayMode, array(1, 2, 5)) ? '</span>' : '');\n\n        // For small screen, we always use the short label instead of long label.\n        if (!empty($conf->dol_optimize_smallscreen))\n        {\n        \tif ($displayMode == 0) $displayMode = 1;\n        \telseif ($displayMode == 4) $displayMode = 2;\n        \telseif ($displayMode == 6) $displayMode = 5;\n        }\n\n        // For backward compatibility. Image's filename are still in French, so we use this array to convert\n        $statusImg = array(\n        \t'status0' => 'statut0',\n        \t'status1' => 'statut1',\n        \t'status2' => 'statut2',\n        \t'status3' => 'statut3',\n        \t'status4' => 'statut4',\n        \t'status5' => 'statut5',\n        \t'status6' => 'statut6',\n        \t'status7' => 'statut7',\n        \t'status8' => 'statut8',\n        \t'status9' => 'statut9'\n        );\n\n        if (!empty($statusImg[$statusType])) {\n            $htmlImg = img_picto($statusLabel, $statusImg[$statusType]);\n        } else {\n            $htmlImg = img_picto($statusLabel, $statusType);\n        }\n\n        if ($displayMode === 2) {\n            $return = $htmlImg.' '.$htmlLabelShort;\n        }\n        elseif ($displayMode === 3) {\n            $return = $htmlImg;\n        }\n        elseif ($displayMode === 4) {\n            $return = $htmlImg.' '.$htmlLabel;\n        }\n        elseif ($displayMode === 5) {\n            $return = $htmlLabelShort.' '.$htmlImg;\n        }\n        else { // $displayMode >= 6\n            $return = $htmlLabel.' '.$htmlImg;\n        }\n    }\n    // Use new badge\n    elseif (empty($conf->global->MAIN_STATUS_USES_IMAGES) && !empty($displayMode)) {\n        $statusLabelShort = !empty($statusLabelShort) ? $statusLabelShort : $statusLabel;\n\n\t\t$dolGetBadgeParams['attr']['class'] = 'badge-status';\n\t\t$dolGetBadgeParams['attr']['title'] = $statusLabel;\n\n        if ($displayMode == 3) {\n            $return = dolGetBadge($statusLabel, '', $statusType, 'dot', $url, $dolGetBadgeParams);\n        }\n        elseif ($displayMode === 5) {\n            $return = dolGetBadge($statusLabelShort, $html, $statusType, '', $url, $dolGetBadgeParams);\n        }\n        else {\n            $return = dolGetBadge($statusLabel, $html, $statusType, '', $url, $dolGetBadgeParams);\n        }\n    }\n\n    return $return;\n}\n\n\n/**\n * Function dolGetButtonAction\n *\n * @param string    $label      label of button no html : use in alt attribute for accessibility $html is not empty\n * @param string    $html       optional : content with html\n * @param string    $actionType default, delete, danger\n * @param string    $url        the url for link\n * @param string    $id         attribute id of button\n * @param int       $userRight  user action right\n * @param array     $params     various params for future : recommended rather than adding more function arguments\n * @return string               html button\n */\nfunction dolGetButtonAction($label, $html = '', $actionType = 'default', $url = '', $id = '', $userRight = 1, $params = array())\n{\n    $class = 'butAction';\n    if ($actionType == 'danger' || $actionType == 'delete') {\n        $class = 'butActionDelete';\n    }\n\n    $attr = array(\n        'class' => $class\n        ,'href' => empty($url) ? '' : $url\n    );\n\n    if (empty($html)) {\n        $html = $label;\n    } else {\n        $attr['aria-label'] = $label;\n    }\n\n    if (empty($userRight)) {\n        $attr['class'] = 'butActionRefused';\n        $attr['href'] = '';\n    }\n\n    if (!empty($id)) {\n        $attr['id'] = $id;\n    }\n\n    // Override attr\n    if (!empty($params['attr']) && is_array($params['attr'])) {\n        foreach ($params['attr'] as $key => $value) {\n            if ($key == 'class') {\n                $attr['class'] .= ' '.$value;\n            }\n            elseif ($key == 'classOverride') {\n                $attr['class'] = $value;\n            }\n            else {\n                $attr[$key] = $value;\n            }\n        }\n    }\n\n    if (isset($attr['href']) && empty($attr['href'])) {\n        unset($attr['href']);\n    }\n\n    // TODO : add a hook\n\n    // escape all attribute\n    $attr = array_map('dol_escape_htmltag', $attr);\n\n    $TCompiledAttr = array();\n    foreach ($attr as $key => $value) {\n        $TCompiledAttr[] = $key.'=\"'.$value.'\"';\n    }\n\n    $compiledAttributes = !empty($TCompiledAttr) ?implode(' ', $TCompiledAttr) : '';\n\n    $tag = !empty($attr['href']) ? 'a' : 'span';\n\n    return '<div class=\"inline-block divButAction\"><'.$tag.' '.$compiledAttributes.'>'.$html.'</'.$tag.'></div>';\n}\n\n/**\n * Function dolGetButtonTitle : this kind of buttons are used in title in list\n *\n * @param string    $label      label of button\n * @param string    $helpText   optional : content for help tooltip\n * @param string    $iconClass  class for icon element (Example: 'fa fa-file')\n * @param string    $url        the url for link\n * @param string    $id         attribute id of button\n * @param int       $status     0 no user rights, 1 active, -1 Feature Disabled, -2 disable Other reason use helpText as tooltip\n * @param array     $params     various params for future : recommended rather than adding more function arguments\n * @return string               html button\n */\nfunction dolGetButtonTitle($label, $helpText = '', $iconClass = 'fa fa-file', $url = '', $id = '', $status = 1, $params = array())\n{\n    global $langs, $conf, $user;\n\n    // Actually this conf is used in css too for external module compatibility and smooth transition to this function\n    if (!empty($conf->global->MAIN_BUTTON_HIDE_UNAUTHORIZED) && (!$user->admin) && $status <= 0) {\n        return '';\n    }\n\n    $class = 'btnTitle';\n    if ($iconClass == 'fa fa-plus-circle') $class .= ' btnTitlePlus';\n\n    if (!empty($params['morecss'])) $class .= ' '.$params['morecss'];\n\n    $attr = array(\n        'class' => $class\n        ,'href' => empty($url) ? '' : $url\n    );\n\n    if (!empty($helpText)) {\n        $attr['title'] = dol_escape_htmltag($helpText);\n    }\n\n    if ($status <= 0) {\n        $attr['class'] .= ' refused';\n\n        $attr['href'] = '';\n\n        if ($status == -1) { // disable\n            $attr['title'] = dol_escape_htmltag($langs->transnoentitiesnoconv(\"FeatureDisabled\"));\n        }\n        elseif ($status == 0) { // Not enough permissions\n            $attr['title'] = dol_escape_htmltag($langs->transnoentitiesnoconv(\"NotEnoughPermissions\"));\n        }\n    }\n\n    if (!empty($attr['title'])) {\n        $attr['class'] .= ' classfortooltip';\n    }\n\n    if (!empty($id)) {\n        $attr['id'] = $id;\n    }\n\n    // Override attr\n    if (!empty($params['attr']) && is_array($params['attr'])) {\n        foreach ($params['attr'] as $key => $value) {\n            if ($key == 'class') {\n                $attr['class'] .= ' '.$value;\n            }\n            elseif ($key == 'classOverride') {\n                $attr['class'] = $value;\n            }\n            else {\n                $attr[$key] = $value;\n            }\n        }\n    }\n\n    if (isset($attr['href']) && empty($attr['href'])) {\n        unset($attr['href']);\n    }\n\n    // TODO : add a hook\n\n    // escape all attribute\n    $attr = array_map('dol_escape_htmltag', $attr);\n\n    $TCompiledAttr = array();\n    foreach ($attr as $key => $value) {\n        $TCompiledAttr[] = $key.'=\"'.$value.'\"';\n    }\n\n    $compiledAttributes = (empty($TCompiledAttr) ? '' : implode(' ', $TCompiledAttr));\n\n    $tag = (empty($attr['href']) ? 'span' : 'a');\n\n    $button = '';\n    $button .= '<'.$tag.' '.$compiledAttributes.' >';\n    $button .= '<span class=\"'.$iconClass.' valignmiddle btnTitle-icon\"></span>';\n    $button .= '<span class=\"valignmiddle text-plus-circle btnTitle-label'.(empty($params['forcenohideoftext']) ? ' hideonsmartphone' : '').'\">'.$label.'</span>';\n    $button .= '</'.$tag.'>';\n\n    return $button;\n}\n\n/**\n * Get an array with properties of an element.\n * Called by fetchObjectByElement.\n *\n * @param   string \t$element_type \tElement type (Value of $object->element). Example: 'action', 'facture', 'project_task' or 'object@mymodule'...\n * @return  array\t\t\t\t\t(module, classpath, element, subelement, classfile, classname)\n */\nfunction getElementProperties($element_type)\n{\n\t$regs = array();\n\n\t$classfile = $classname = $classpath = '';\n\n\t// Parse element/subelement (ex: project_task)\n\t$module = $element_type;\n\t$element = $element_type;\n\t$subelement = $element_type;\n\n\t// If we ask an resource form external module (instead of default path)\n\tif (preg_match('/^([^@]+)@([^@]+)$/i', $element_type, $regs)) {\n\t\t$element = $subelement = $regs[1];\n\t\t$module = $regs[2];\n\t}\n\n\t//print '<br>1. element : '.$element.' - module : '.$module .'<br>';\n\tif (preg_match('/^([^_]+)_([^_]+)/i', $element, $regs)) {\n\t\t$module = $element = $regs[1];\n\t\t$subelement = $regs[2];\n\t}\n\n\t// For compat\n\tif ($element_type == \"action\") {\n\t\t$classpath = 'comm/action/class';\n\t\t$subelement = 'Actioncomm';\n\t\t$module = 'agenda';\n\t}\n\n\t// To work with non standard path\n\tif ($element_type == 'facture' || $element_type == 'invoice') {\n\t\t$classpath = 'compta/facture/class';\n\t\t$module = 'facture';\n\t\t$subelement = 'facture';\n\t}\n\tif ($element_type == 'commande' || $element_type == 'order') {\n\t\t$classpath = 'commande/class';\n\t\t$module = 'commande';\n\t\t$subelement = 'commande';\n\t}\n\tif ($element_type == 'propal') {\n\t\t$classpath = 'comm/propal/class';\n\t}\n\tif ($element_type == 'supplier_proposal') {\n\t\t$classpath = 'supplier_proposal/class';\n\t}\n\tif ($element_type == 'shipping') {\n\t\t$classpath = 'expedition/class';\n\t\t$subelement = 'expedition';\n\t\t$module = 'expedition_bon';\n\t}\n\tif ($element_type == 'delivery') {\n\t\t$classpath = 'livraison/class';\n\t\t$subelement = 'livraison';\n\t\t$module = 'livraison_bon';\n\t}\n\tif ($element_type == 'contract') {\n\t\t$classpath = 'contrat/class';\n\t\t$module = 'contrat';\n\t\t$subelement = 'contrat';\n\t}\n\tif ($element_type == 'member') {\n\t\t$classpath = 'adherents/class';\n\t\t$module = 'adherent';\n\t\t$subelement = 'adherent';\n\t}\n\tif ($element_type == 'cabinetmed_cons') {\n\t\t$classpath = 'cabinetmed/class';\n\t\t$module = 'cabinetmed';\n\t\t$subelement = 'cabinetmedcons';\n\t}\n\tif ($element_type == 'fichinter') {\n\t\t$classpath = 'fichinter/class';\n\t\t$module = 'ficheinter';\n\t\t$subelement = 'fichinter';\n\t}\n\tif ($element_type == 'dolresource' || $element_type == 'resource') {\n\t\t$classpath = 'resource/class';\n\t\t$module = 'resource';\n\t\t$subelement = 'dolresource';\n\t}\n\tif ($element_type == 'propaldet') {\n\t\t$classpath = 'comm/propal/class';\n\t\t$module = 'propal';\n\t\t$subelement = 'propaleligne';\n\t}\n\tif ($element_type == 'order_supplier') {\n\t\t$classpath = 'fourn/class';\n\t\t$module = 'fournisseur';\n\t\t$subelement = 'commandefournisseur';\n\t\t$classfile = 'fournisseur.commande';\n\t}\n\tif ($element_type == 'invoice_supplier') {\n\t\t$classpath = 'fourn/class';\n\t\t$module = 'fournisseur';\n\t\t$subelement = 'facturefournisseur';\n\t\t$classfile = 'fournisseur.facture';\n\t}\n\tif ($element_type == \"service\") {\n\t\t$classpath = 'product/class';\n\t\t$subelement = 'product';\n\t}\n\n\tif (empty($classfile)) $classfile = strtolower($subelement);\n\tif (empty($classname)) $classname = ucfirst($subelement);\n\tif (empty($classpath)) $classpath = $module.'/class';\n\n\t$element_properties = array(\n\t\t'module' => $module,\n\t\t'classpath' => $classpath,\n\t\t'element' => $element,\n\t\t'subelement' => $subelement,\n\t\t'classfile' => $classfile,\n\t\t'classname' => $classname\n\t);\n\treturn $element_properties;\n}\n\n/**\n * Fetch an object from its id and element_type\n * Inclusion of classes is automatic\n *\n * @param\tint     \t$element_id \tElement id\n * @param\tstring  \t$element_type \tElement type\n * @param\tstring     \t$element_ref \tElement ref (Use this or element_id but not both)\n * @return \tint|object \t\t\t\t\tobject || 0 || -1 if error\n */\nfunction fetchObjectByElement($element_id, $element_type, $element_ref = '')\n{\n\tglobal $conf, $db;\n\n\t$element_prop = getElementProperties($element_type);\n\tif (is_array($element_prop) && $conf->{$element_prop['module']}->enabled)\n\t{\n\t\tdol_include_once('/'.$element_prop['classpath'].'/'.$element_prop['classfile'].'.class.php');\n\n\t\t$objecttmp = new $element_prop['classname']($db);\n\t\t$ret = $objecttmp->fetch($element_id, $element_ref);\n\t\tif ($ret >= 0)\n\t\t{\n\t\t\treturn $objecttmp;\n\t\t}\n\t}\n\treturn 0;\n}\n\n/**\n * Return if a file can contains executable content\n *\n * @param   string  $filename       File name to test\n * @return  boolean                 True if yes, False if no\n */\nfunction isAFileWithExecutableContent($filename)\n{\n    if (preg_match('/\\.(htm|html|js|phar|php|php\\d+|phtml|pht|pl|py|cgi|ksh|sh|shtml|bash|bat|cmd|wpk|exe|dmg)$/i', $filename))\n    {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Return the value of token currently saved into session with name 'newtoken'.\n * This token must be send by any POST as it will be used by next page for comparison with value in session.\n *\n * @return  string\n */\nfunction newToken()\n{\n\treturn $_SESSION['newtoken'];\n}\n\n/**\n * Return the value of token currently saved into session with name 'token'.\n *\n * @return  string\n */\nfunction currentToken()\n{\n\treturn $_SESSION['token'];\n}\n", "<?php\n/* Copyright (C) 2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *      \\file       test/phpunit/SecurityTest.php\n *\t\t\\ingroup    test\n *      \\brief      PHPUnit test\n *\t\t\\remarks\tTo run this script as CLI:  phpunit filename.php\n */\n\nglobal $conf,$user,$langs,$db;\n//define('TEST_DB_FORCE_TYPE','mysql');\t// This is to force using mysql driver\n//require_once 'PHPUnit/Autoload.php';\nrequire_once dirname(__FILE__).'/../../htdocs/master.inc.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security2.lib.php';\n\nif (! defined('NOREQUIREUSER'))  define('NOREQUIREUSER', '1');\nif (! defined('NOREQUIREDB'))    define('NOREQUIREDB', '1');\nif (! defined('NOREQUIRESOC'))   define('NOREQUIRESOC', '1');\nif (! defined('NOREQUIRETRAN'))  define('NOREQUIRETRAN', '1');\nif (! defined('NOCSRFCHECK'))    define('NOCSRFCHECK', '1');\nif (! defined('NOTOKENRENEWAL')) define('NOTOKENRENEWAL', '1');\nif (! defined('NOREQUIREMENU'))  define('NOREQUIREMENU', '1'); // If there is no menu to show\nif (! defined('NOREQUIREHTML'))  define('NOREQUIREHTML', '1'); // If we don't need to load the html.form.class.php\nif (! defined('NOREQUIREAJAX'))  define('NOREQUIREAJAX', '1');\nif (! defined(\"NOLOGIN\"))        define(\"NOLOGIN\", '1');       // If this page is public (can be called outside logged session)\n\nif (empty($user->id))\n{\n    print \"Load permissions for admin user nb 1\\n\";\n    $user->fetch(1);\n    $user->getrights();\n}\n$conf->global->MAIN_DISABLE_ALL_MAILS=1;\n\n\n/**\n * Class for PHPUnit tests\n *\n * @backupGlobals disabled\n * @backupStaticAttributes enabled\n * @remarks\tbackupGlobals must be disabled to have db,conf,user and lang not erased.\n */\nclass SecurityTest extends PHPUnit\\Framework\\TestCase\n{\n\tprotected $savconf;\n\tprotected $savuser;\n\tprotected $savlangs;\n\tprotected $savdb;\n\n\t/**\n\t * Constructor\n\t * We save global variables into local variables\n\t *\n\t * @return SecurityTest\n\t */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\n\t\t//$this->sharedFixture\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$this->savconf=$conf;\n\t\t$this->savuser=$user;\n\t\t$this->savlangs=$langs;\n\t\t$this->savdb=$db;\n\n\t\tprint __METHOD__.\" db->type=\".$db->type.\" user->id=\".$user->id;\n\t\t//print \" - db \".$db->db;\n\t\tprint \"\\n\";\n\t}\n\n    /**\n     * setUpBeforeClass\n     *\n     * @return void\n     */\n    public static function setUpBeforeClass()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$db->begin();\t// This is to have all actions inside a transaction even if test launched without suite.\n\n    \tprint __METHOD__.\"\\n\";\n    }\n\n    /**\n     * tearDownAfterClass\n     *\n     * @return\tvoid\n     */\n    public static function tearDownAfterClass()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$db->rollback();\n\n\t\tprint __METHOD__.\"\\n\";\n    }\n\n\t/**\n\t * Init phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n    protected function setUp()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tprint __METHOD__.\"\\n\";\n    }\n\n\t/**\n\t * End phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n    protected function tearDown()\n    {\n    \tprint __METHOD__.\"\\n\";\n    }\n\n    /**\n     * testSetLang\n     *\n     * @return string\n     */\n    public function testSetLang()\n    {\n    \tglobal $conf;\n    \t$conf=$this->savconf;\n\n    \t$tmplangs = new Translate('', $conf);\n\n    \t$_SERVER['HTTP_ACCEPT_LANGUAGE'] = \"' malicious text with quote\";\n    \t$tmplangs->setDefaultLang('auto');\n    \tprint __METHOD__.' $tmplangs->defaultlang='.$tmplangs->defaultlang.\"\\n\";\n    \t$this->assertEquals($tmplangs->defaultlang, 'malicioustextwithquote_MALICIOUSTEXTWITHQUOTE');\n    }\n\n    /**\n     * testGETPOST\n     *\n     * @return string\n     */\n    public function testGETPOST()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n        $_COOKIE[\"id\"]=111;\n\t\t$_GET[\"param1\"]=\"222\";\n        $_POST[\"param1\"]=\"333\";\n\t\t$_GET[\"param2\"]='a/b#e(pr)qq-rr\\cc';\n        $_GET[\"param3\"]='\"a/b#e(pr)qq-rr\\cc';    // Same than param2 + \"\n        $_GET[\"param4\"]='../dir';\n        $_GET[\"param5\"]=\"a_1-b\";\n\n        // Test int\n        $result=GETPOST('id', 'int');              // Must return nothing\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param1\", 'int');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 222);\n\n        $result=GETPOST(\"param1\", 'int', 2);\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 333);\n\n        // Test alpha\n        $result=GETPOST(\"param2\", 'alpha');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, $_GET[\"param2\"]);\n\n        $result=GETPOST(\"param3\", 'alpha');  // Must return string sanitized from char \"\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 'a/b#e(pr)qq-rr\\cc');\n\n        $result=GETPOST(\"param4\", 'alpha');  // Must return string sanitized from ../\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 'dir');\n\n        // Test aZ09\n        $result=GETPOST(\"param1\", 'aZ09');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, $_GET[\"param1\"]);\n\n        $result=GETPOST(\"param2\", 'aZ09');  // Must return '' as string contains car not in aZ09 definition\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param3\", 'aZ09');  // Must return '' as string contains car not in aZ09 definition\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param4\", 'aZ09');  // Must return '' as string contains car not in aZ09 definition\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param5\", 'aZ09');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, $_GET[\"param5\"]);\n\n        return $result;\n    }\n\n    /**\n     * testCheckLoginPassEntity\n     *\n     * @return\tvoid\n     */\n    public function testCheckLoginPassEntity()\n    {\n        $login=checkLoginPassEntity('loginbidon', 'passwordbidon', 1, array('dolibarr'));\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, '');\n\n        $login=checkLoginPassEntity('admin', 'passwordbidon', 1, array('dolibarr'));\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, '');\n\n        $login=checkLoginPassEntity('admin', 'admin', 1, array('dolibarr'));            // Should works because admin/admin exists\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, 'admin');\n\n        $login=checkLoginPassEntity('admin', 'admin', 1, array('http','dolibarr'));    // Should work because of second authetntication method\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, 'admin');\n\n        $login=checkLoginPassEntity('admin', 'admin', 1, array('forceuser'));\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, '');    // Expected '' because should failed because login 'auto' does not exists\n    }\n\n    /**\n     * testEncodeDecode\n     *\n     * @return number\n     */\n    public function testEncodeDecode()\n    {\n        $stringtotest=\"This is a string to test encode/decode. This is a string to test encode/decode. This is a string to test encode/decode.\";\n\n        $encodedstring=dol_encode($stringtotest);\n        $decodedstring=dol_decode($encodedstring);\n        print __METHOD__.\" encodedstring=\".$encodedstring.\" \".base64_encode($stringtotest).\"\\n\";\n        $this->assertEquals($stringtotest, $decodedstring, 'Use dol_encode/decode with no parameter');\n\n        $encodedstring=dol_encode($stringtotest, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n        $decodedstring=dol_decode($encodedstring, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n        print __METHOD__.\" encodedstring=\".$encodedstring.\" \".base64_encode($stringtotest).\"\\n\";\n        $this->assertEquals($stringtotest, $decodedstring, 'Use dol_encode/decode with a key parameter');\n\n        return 0;\n    }\n\n    /**\n     * testGetRandomPassword\n     *\n     * @return number\n     */\n    public function testGetRandomPassword()\n    {\n        global $conf;\n\n        $genpass1=getRandomPassword(true);\t\t\t\t// Should be a string return by dol_hash (if no option set, will be md5)\n        print __METHOD__.\" genpass1=\".$genpass1.\"\\n\";\n        $this->assertEquals(strlen($genpass1), 32);\n\n        $genpass1=getRandomPassword(true, array('I'));\t// Should be a string return by dol_hash (if no option set, will be md5)\n        print __METHOD__.\" genpass1=\".$genpass1.\"\\n\";\n        $this->assertEquals(strlen($genpass1), 32);\n\n        $conf->global->USER_PASSWORD_GENERATED='None';\n        $genpass2=getRandomPassword(false);\t\t\t\t// Should return an empty string\n        print __METHOD__.\" genpass2=\".$genpass2.\"\\n\";\n        $this->assertEquals($genpass2, '');\n\n        $conf->global->USER_PASSWORD_GENERATED='Standard';\n        $genpass3=getRandomPassword(false);\t\t\t\t// Should return a password of 8 chars\n        print __METHOD__.\" genpass3=\".$genpass3.\"\\n\";\n        $this->assertEquals(strlen($genpass3), 8);\n\n        return 0;\n    }\n\n    /**\n     * testRestrictedArea\n     *\n     * @return void\n     */\n    public function testRestrictedArea()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\t//$dummyuser=new User($db);\n\t\t//$result=restrictedArea($dummyuser,'societe');\n\n\t\t$result=restrictedArea($user, 'societe');\n\t\t$this->assertEquals(1, $result);\n    }\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2006-2014  Laurent Destailleur <eldy@users.sourceforge.net>\n * Copyright (C) 2011       Juanjo Menent       <jmenent@2byte.es>\n * Copyright (C) 2015       Rapha\u00ebl Doursenaud  <rdoursenaud@gpcsolutions.fr>\n *\n* This program is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation; either version 3 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/**\n *\t\t\\file \t\thtdocs/admin/tools/export_files.php\n *\t\t\\brief      Page to export documents into a compressed file\n */\n\nrequire '../../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/utils.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\n\n$langs->load(\"admin\");\n\n$action = GETPOST('action', 'alpha');\n$what = GETPOST('what', 'alpha');\n$export_type = GETPOST('export_type', 'alpha');\n$file = trim(GETPOST('zipfilename_template', 'alpha'));\n$compression = GETPOST('compression', 'aZ09');\n\n$file = dol_sanitizeFileName($file);\n$file = preg_replace('/(\\.zip|\\.tar|\\.tgz|\\.gz|\\.tar\\.gz|\\.bz2)$/i', '', $file);\n\n$sortfield = GETPOST('sortfield', 'alpha');\n$sortorder = GETPOST('sortorder', 'alpha');\n$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST(\"page\", 'int');\nif (!$sortorder) $sortorder = \"DESC\";\nif (!$sortfield) $sortfield = \"date\";\nif ($page < 0) { $page = 0; }\nelseif (empty($page)) $page = 0;\n$limit = GETPOST('limit', 'int') ?GETPOST('limit', 'int') : $conf->liste_limit;\n$offset = $limit * $page;\n\nif (!$user->admin) accessforbidden();\n\n$errormsg = '';\n\n\n/*\n * Actions\n */\n\nif ($action == 'delete')\n{\n    $filerelative = dol_sanitizeFileName(GETPOST('urlfile', 'alpha'));\n    $filepath = $conf->admin->dir_output.'/'.$filerelative;\n\t$ret = dol_delete_file($filepath, 1);\n\tif ($ret) setEventMessages($langs->trans(\"FileWasRemoved\", $filerelative), null, 'mesgs');\n\telse setEventMessages($langs->trans(\"ErrorFailToDeleteFile\", $filerelative), null, 'errors');\n\t$action = '';\n}\n\n\n/*\n * View\n */\n\n// Increase limit of time. Works only if we are not in safe mode\n$ExecTimeLimit = 1800; // 30mn\nif (!empty($ExecTimeLimit))\n{\n    $err = error_reporting();\n    error_reporting(0); // Disable all errors\n    //error_reporting(E_ALL);\n    @set_time_limit($ExecTimeLimit); // Need more than 240 on Windows 7/64\n    error_reporting($err);\n}\n$MemoryLimit = 0;\nif (!empty($MemoryLimit))\n{\n    @ini_set('memory_limit', $MemoryLimit);\n}\n\n$form = new Form($db);\n$formfile = new FormFile($db);\n\n//$help_url='EN:Backups|FR:Sauvegardes|ES:Copias_de_seguridad';\n//llxHeader('','',$help_url);\n\n//print load_fiche_titre($langs->trans(\"Backup\"),'','title_setup');\n\n\n// Start with empty buffer\n$dump_buffer = '';\n$dump_buffer_len = 0;\n\n// We will send fake headers to avoid browser timeout when buffering\n$time_start = time();\n\n\n$outputdir  = $conf->admin->dir_output.'/documents';\n$result = dol_mkdir($outputdir);\n\n$utils = new Utils($db);\n\nif ($compression == 'zip')\n{\n\t$file .= '.zip';\n    $ret = dol_compress_dir(DOL_DATA_ROOT, $outputdir.\"/\".$file, $compression, '/(\\.log|\\/temp\\/|documents\\/admin\\/documents\\/)/');\n    if ($ret < 0)\n    {\n    \tif ($ret == -2) {\n    \t\t$langs->load(\"errors\");\n    \t\t$errormsg = $langs->trans(\"ErrNoZipEngine\");\n    \t}\n    \telse {\n    \t\t$langs->load(\"errors\");\n    \t\t$errormsg = $langs->trans(\"ErrorFailedToWriteInDir\", $outputdir);\n    \t}\n    }\n}\nelseif (in_array($compression, array('gz', 'bz')))\n{\n\t$userlogin = ($user->login ? $user->login : 'unknown');\n\n\t$outputfile = $conf->admin->dir_temp.'/export_files.'.$userlogin.'.out'; // File used with popen method\n\n    $file .= '.tar';\n    // We also exclude '/temp/' dir and 'documents/admin/documents'\n    $cmd = \"tar -cf \".$outputdir.\"/\".$file.\" --exclude-vcs --exclude 'temp' --exclude 'dolibarr.log' --exclude 'dolibarr_*.log' --exclude 'documents/admin/documents' -C \".dirname(DOL_DATA_ROOT).\" \".basename(DOL_DATA_ROOT);\n\n    $result = $utils->executeCLI($cmd, $outputfile);\n\n    $retval = $result['error'];\n    if ($result['result'] || !empty($retval))\n    {\n        $langs->load(\"errors\");\n        dol_syslog(\"Documents tar retval after exec=\".$retval, LOG_ERR);\n        $errormsg = 'Error tar generation return '.$retval;\n    }\n    else\n    {\n        if ($compression == 'gz')\n        {\n            $cmd = \"gzip -f \".$outputdir.\"/\".$file;\n        }\n        if ($compression == 'bz')\n        {\n            $cmd = \"bzip2 -f \".$outputdir.\"/\".$file;\n        }\n\n        $result = $utils->executeCLI($cmd, $outputfile);\n\n        $retval = $result['error'];\n        if ($result['result'] || !empty($retval))\n        {\n            $errormsg = 'Error '.$compression.' generation return '.$retval;\n            unlink($outputdir.\"/\".$file);\n        }\n    }\n}\n\nif ($errormsg)\n{\n\tsetEventMessages($langs->trans(\"Error\").\" : \".$errormsg, null, 'errors');\n}\n\n// Redirect t backup page\nheader(\"Location: dolibarr_export.php\");\n\n$time_end = time();\n\n$db->close();\n", "<?php\n/* Copyright (C) 2000-2007\tRodolphe Quiedeville\t\t<rodolphe@quiedeville.org>\n * Copyright (C) 2003\t\tJean-Louis Bergamo\t\t\t<jlb@j1b.org>\n * Copyright (C) 2004-2018\tLaurent Destailleur\t\t\t<eldy@users.sourceforge.net>\n * Copyright (C) 2004\t\tSebastien Di Cintio\t\t\t<sdicintio@ressource-toi.org>\n * Copyright (C) 2004\t\tBenoit Mortier\t\t\t\t<benoit.mortier@opensides.be>\n * Copyright (C) 2004\t\tChristophe Combelles\t\t<ccomb@free.fr>\n * Copyright (C) 2005-2019\tRegis Houssin\t\t\t\t<regis.houssin@inodbox.com>\n * Copyright (C) 2008\t\tRaphael Bertrand (Resultic)\t<raphael.bertrand@resultic.fr>\n * Copyright (C) 2010-2018\tJuanjo Menent\t\t\t\t<jmenent@2byte.es>\n * Copyright (C) 2013\t\tC\u00e9dric Salvador\t\t\t\t<csalvador@gpcsolutions.fr>\n * Copyright (C) 2013-2017\tAlexandre Spangaro\t\t\t<aspangaro@open-dsi.fr>\n * Copyright (C) 2014\t\tC\u00e9dric GROSS\t\t\t\t<c.gross@kreiz-it.fr>\n * Copyright (C) 2014-2015\tMarcos Garc\u00eda\t\t\t\t<marcosgdf@gmail.com>\n * Copyright (C) 2015\t\tJean-Fran\u00e7ois Ferry\t\t\t<jfefe@aternatik.fr>\n * Copyright (C) 2018-2020  Fr\u00e9d\u00e9ric France             <frederic.france@netlogic.fr>\n * Copyright (C) 2019       Thibault Foucart            <support@ptibogxiv.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *\t\\file\t\t\thtdocs/core/lib/functions.lib.php\n *\t\\brief\t\t\tA set of functions for Dolibarr\n *\t\t\t\t\tThis file contains all frequently used functions.\n */\n\ninclude_once DOL_DOCUMENT_ROOT.'/core/lib/json.lib.php';\n\n\n/**\n * Return a DoliDB instance (database handler).\n *\n * @param   string\t$type\t\tType of database (mysql, pgsql...)\n * @param\tstring\t$host\t\tAddress of database server\n * @param\tstring\t$user\t\tAuthorized username\n * @param\tstring\t$pass\t\tPassword\n * @param\tstring\t$name\t\tName of database\n * @param\tint\t\t$port\t\tPort of database server\n * @return\tDoliDB\t\t\t\tA DoliDB instance\n */\nfunction getDoliDBInstance($type, $host, $user, $pass, $name, $port)\n{\n\trequire_once DOL_DOCUMENT_ROOT.\"/core/db/\".$type.'.class.php';\n\n\t$class = 'DoliDB'.ucfirst($type);\n\t$dolidb = new $class($type, $host, $user, $pass, $name, $port);\n\treturn $dolidb;\n}\n\n/**\n * \tGet list of entity id to use.\n *\n * \t@param\tstring\t$element\t\tCurrent element\n *\t\t\t\t\t\t\t\t\t'societe', 'socpeople', 'actioncomm', 'agenda', 'resource',\n *\t\t\t\t\t\t\t\t\t'product', 'productprice', 'stock', 'bom', 'mo',\n *\t\t\t\t\t\t\t\t\t'propal', 'supplier_proposal', 'invoice', 'supplier_invoice', 'payment_various',\n *\t\t\t\t\t\t\t\t\t'categorie', 'bank_account', 'bank_account', 'adherent', 'user',\n *\t\t\t\t\t\t\t\t\t'commande', 'supplier_order', 'expedition', 'intervention', 'survey',\n *\t\t\t\t\t\t\t\t\t'contract', 'tax', 'expensereport', 'holiday', 'multicurrency', 'project',\n *\t\t\t\t\t\t\t\t\t'email_template', 'event', 'donation'\n *\t\t\t\t\t\t\t\t\t'c_paiement', 'c_payment_term', ...\n * \t@param\tint\t\t$shared\t\t\t0=Return id of current entity only,\n * \t\t\t\t\t\t\t\t\t1=Return id of current entity + shared entities (default)\n *  @param\tobject\t$currentobject\tCurrent object if needed\n * \t@return\tmixed\t\t\t\t\tEntity id(s) to use ( eg. entity IN ('.getEntity(elementname).')' )\n */\nfunction getEntity($element, $shared = 1, $currentobject = null)\n{\n\tglobal $conf, $mc;\n\n\tif (is_object($mc))\n\t{\n\t\treturn $mc->getEntity($element, $shared, $currentobject);\n\t}\n\telse\n\t{\n\t\t$out = '';\n\t\t$addzero = array('user', 'usergroup', 'c_email_templates', 'email_template', 'default_values');\n\t\tif (in_array($element, $addzero)) $out .= '0,';\n\t\t$out .= $conf->entity;\n\t\treturn $out;\n\t}\n}\n\n/**\n * \tSet entity id to use when to create an object\n *\n * \t@param\tobject\t$currentobject\tCurrent object\n * \t@return\tmixed\t\t\t\t\tEntity id to use ( eg. entity = '.setEntity($object) )\n */\nfunction setEntity($currentobject)\n{\n\tglobal $conf, $mc;\n\n\tif (is_object($mc) && method_exists($mc, 'setEntity'))\n\t{\n\t\treturn $mc->setEntity($currentobject);\n\t}\n\telse\n\t{\n\t\treturn ((is_object($currentobject) && $currentobject->id > 0 && $currentobject->entity > 0) ? $currentobject->entity : $conf->entity);\n\t}\n}\n\n/**\n * Return information about user browser\n *\n * Returns array with the following format:\n * array(\n *  'browsername' => Browser name (firefox|chrome|iceweasel|epiphany|safari|opera|ie|unknown)\n *  'browserversion' => Browser version. Empty if unknown\n *  'browseros' => Set with mobile OS (android|blackberry|ios|palm|symbian|webos|maemo|windows|unknown)\n *  'layout' => (tablet|phone|classic)\n *  'phone' => empty if not mobile, (android|blackberry|ios|palm|unknown) if mobile\n *  'tablet' => true/false\n * )\n *\n * @param string $user_agent Content of $_SERVER[\"HTTP_USER_AGENT\"] variable\n * @return\tarray Check function documentation\n */\nfunction getBrowserInfo($user_agent)\n{\n\tinclude_once DOL_DOCUMENT_ROOT.'/includes/mobiledetect/mobiledetectlib/Mobile_Detect.php';\n\n\t$name = 'unknown';\n\t$version = '';\n\t$os = 'unknown';\n\t$phone = '';\n\n\t$detectmobile = new Mobile_Detect(null, $user_agent);\n\t$tablet = $detectmobile->isTablet();\n\n\tif ($detectmobile->isMobile()) {\n\t\t$phone = 'unknown';\n\n\t\t// If phone/smartphone, we set phone os name.\n\t\tif ($detectmobile->is('AndroidOS')) {\n\t\t\t$os = $phone = 'android';\n\t\t} elseif ($detectmobile->is('BlackBerryOS')) {\n\t\t\t$os = $phone = 'blackberry';\n\t\t} elseif ($detectmobile->is('iOS')) {\n\t\t\t$os = 'ios';\n\t\t\t$phone = 'iphone';\n\t\t} elseif ($detectmobile->is('PalmOS')) {\n\t\t\t$os = $phone = 'palm';\n\t\t} elseif ($detectmobile->is('SymbianOS')) {\n\t\t\t$os = 'symbian';\n\t\t} elseif ($detectmobile->is('webOS')) {\n\t\t\t$os = 'webos';\n\t\t} elseif ($detectmobile->is('MaemoOS')) {\n\t\t\t$os = 'maemo';\n\t\t} elseif ($detectmobile->is('WindowsMobileOS') || $detectmobile->is('WindowsPhoneOS')) {\n\t\t\t$os = 'windows';\n\t\t}\n\t}\n\n\t// OS\n\tif (preg_match('/linux/i', $user_agent)) { $os = 'linux'; }\n\telseif (preg_match('/macintosh/i', $user_agent)) { $os = 'macintosh'; }\n\telseif (preg_match('/windows/i', $user_agent)) { $os = 'windows'; }\n\n\t// Name\n\tif (preg_match('/firefox(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'firefox'; $version = $reg[2]; }\n\telseif (preg_match('/edge(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'edge'; $version = $reg[2]; }\n\telseif (preg_match('/chrome(\\/|\\s)([\\d\\.]+)/i', $user_agent, $reg)) { $name = 'chrome'; $version = $reg[2]; }    // we can have 'chrome (Mozilla...) chrome x.y' in one string\n\telseif (preg_match('/chrome/i', $user_agent, $reg)) { $name = 'chrome'; }\n\telseif (preg_match('/iceweasel/i', $user_agent)) { $name = 'iceweasel'; }\n\telseif (preg_match('/epiphany/i', $user_agent)) { $name = 'epiphany'; }\n\telseif (preg_match('/safari(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'safari'; $version = $reg[2]; }\t// Safari is often present in string for mobile but its not.\n\telseif (preg_match('/opera(\\/|\\s)([\\d\\.]*)/i', $user_agent, $reg)) { $name = 'opera'; $version = $reg[2]; }\n\telseif (preg_match('/(MSIE\\s([0-9]+\\.[0-9]))|.*(Trident\\/[0-9]+.[0-9];.*rv:([0-9]+\\.[0-9]+))/i', $user_agent, $reg)) { $name = 'ie'; $version = end($reg); }    // MS products at end\n\telseif (preg_match('/(Windows NT\\s([0-9]+\\.[0-9])).*(Trident\\/[0-9]+.[0-9];.*rv:([0-9]+\\.[0-9]+))/i', $user_agent, $reg)) { $name = 'ie'; $version = end($reg); }    // MS products at end\n\telseif (preg_match('/l(i|y)n(x|ks)(\\(|\\/|\\s)*([\\d\\.]+)/i', $user_agent, $reg)) { $name = 'lynxlinks'; $version = $reg[4]; }\n\n\tif ($tablet) {\n\t\t$layout = 'tablet';\n\t} elseif ($phone) {\n\t\t$layout = 'phone';\n\t} else {\n\t\t$layout = 'classic';\n\t}\n\n\treturn array(\n\t\t'browsername' => $name,\n\t\t'browserversion' => $version,\n\t\t'browseros' => $os,\n\t\t'layout' => $layout,\n\t\t'phone' => $phone,\n\t\t'tablet' => $tablet\n\t);\n}\n\n/**\n *  Function called at end of web php process\n *\n *  @return\tvoid\n */\nfunction dol_shutdown()\n{\n\tglobal $conf, $user, $langs, $db;\n\t$disconnectdone = false; $depth = 0;\n\tif (is_object($db) && !empty($db->connected)) { $depth = $db->transaction_opened; $disconnectdone = $db->close(); }\n\tdol_syslog(\"--- End access to \".$_SERVER[\"PHP_SELF\"].(($disconnectdone && $depth) ? ' (Warn: db disconnection forced, transaction depth was '.$depth.')' : ''), (($disconnectdone && $depth) ?LOG_WARNING:LOG_INFO));\n}\n\n/**\n * Return true if we are in a context of submitting a parameter\n *\n * @param \tstring\t$paramname\t\tName or parameter to test\n * @return \tboolean\t\t\t\t\tTrue if we have just submit a POST or GET request with the parameter provided (even if param is empty)\n */\nfunction GETPOSTISSET($paramname)\n{\n\t$isset = 0;\n\n\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t// Clean $relativepathstring\n\tif (constant('DOL_URL_ROOT')) $relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t//var_dump($relativepathstring);\n\t//var_dump($user->default_values);\n\n\t// Code for search criteria persistence.\n\t// Retrieve values if restore_lastsearch_values\n\tif (!empty($_GET['restore_lastsearch_values']))        // Use $_GET here and not GETPOST\n\t{\n\t\tif (!empty($_SESSION['lastsearch_values_'.$relativepathstring]))\t// If there is saved values\n\t\t{\n\t\t\t$tmp = json_decode($_SESSION['lastsearch_values_'.$relativepathstring], true);\n\t\t\tif (is_array($tmp))\n\t\t\t{\n\t\t\t\tforeach ($tmp as $key => $val)\n\t\t\t\t{\n\t\t\t\t\tif ($key == $paramname)\t// We are on the requested parameter\n\t\t\t\t\t{\n\t\t\t\t\t\t$isset = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If there is saved contextpage, page or limit\n\t\tif ($paramname == 'contextpage' && !empty($_SESSION['lastsearch_contextpage_'.$relativepathstring]))\n\t\t{\n\t\t\t$isset = 1;\n\t\t}\n\t\telseif ($paramname == 'page' && !empty($_SESSION['lastsearch_page_'.$relativepathstring]))\n\t\t{\n\t\t\t$isset = 1;\n\t\t}\n\t\telseif ($paramname == 'limit' && !empty($_SESSION['lastsearch_limit_'.$relativepathstring]))\n\t\t{\n\t\t\t$isset = 1;\n\t\t}\n\t}\n\telse {\n\t\t$isset = (isset($_POST[$paramname]) || isset($_GET[$paramname]));\n\t}\n\n\treturn $isset;\n}\n\n/**\n *  Return value of a param into GET or POST supervariable.\n *  Use the property $user->default_values[path]['creatform'] and/or $user->default_values[path]['filters'] and/or $user->default_values[path]['sortorder']\n *  Note: The property $user->default_values is loaded by main.php when loading the user.\n *\n *  @param  string  $paramname   Name of parameter to found\n *  @param  string  $check\t     Type of check\n *                               ''=no check (deprecated)\n *                               'none'=no check (only for param that should have very rich content)\n *                               'int'=check it's numeric (integer or float)\n *                               'intcomma'=check it's integer+comma ('1,2,3,4...')\n *                               'alpha'=check it's text and sign\n *                               'aZ'=check it's a-z only\n *                               'aZ09'=check it's simple alpha string (recommended for keys)\n *                               'array'=check it's array\n *                               'san_alpha'=Use filter_var with FILTER_SANITIZE_STRING (do not use this for free text string)\n *                               'nohtml', 'alphanohtml'=check there is no html content\n *                               'restricthtml'=check html content is restricted to some tags only\n *                               'custom'= custom filter specify $filter and $options)\n *  @param\tint\t\t$method\t     Type of method (0 = get then post, 1 = only get, 2 = only post, 3 = post then get)\n *  @param  int     $filter      Filter to apply when $check is set to 'custom'. (See http://php.net/manual/en/filter.filters.php for d\u00e9tails)\n *  @param  mixed   $options     Options to pass to filter_var when $check is set to 'custom'\n *  @param\tstring\t$noreplace\t Force disable of replacement of __xxx__ strings.\n *  @return string|array         Value found (string or array), or '' if check fails\n */\nfunction GETPOST($paramname, $check = 'alphanohtml', $method = 0, $filter = null, $options = null, $noreplace = 0)\n{\n\tglobal $mysoc, $user, $conf;\n\n\tif (empty($paramname)) return 'BadFirstParameterForGETPOST';\n\tif (empty($check))\n\t{\n\t\tdol_syslog(\"Deprecated use of GETPOST, called with 1st param = \".$paramname.\" and 2nd param is '', when calling page \".$_SERVER[\"PHP_SELF\"], LOG_WARNING);\n\t\t// Enable this line to know who call the GETPOST with '' $check parameter.\n\t\t//var_dump(debug_backtrace()[0]);\n\t}\n\n\tif (empty($method)) $out = isset($_GET[$paramname]) ? $_GET[$paramname] : (isset($_POST[$paramname]) ? $_POST[$paramname] : '');\n\telseif ($method == 1) $out = isset($_GET[$paramname]) ? $_GET[$paramname] : '';\n\telseif ($method == 2) $out = isset($_POST[$paramname]) ? $_POST[$paramname] : '';\n\telseif ($method == 3) $out = isset($_POST[$paramname]) ? $_POST[$paramname] : (isset($_GET[$paramname]) ? $_GET[$paramname] : '');\n\telse return 'BadThirdParameterForGETPOST';\n\n\tif (empty($method) || $method == 3 || $method == 4)\n\t{\n\t\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t\t// Clean $relativepathstring\n\t\tif (constant('DOL_URL_ROOT')) $relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\t//var_dump($relativepathstring);\n\t\t//var_dump($user->default_values);\n\n\t\t// Code for search criteria persistence.\n\t\t// Retrieve values if restore_lastsearch_values\n\t\tif (!empty($_GET['restore_lastsearch_values']))        // Use $_GET here and not GETPOST\n\t\t{\n\t\t\tif (!empty($_SESSION['lastsearch_values_'.$relativepathstring]))\t// If there is saved values\n\t\t\t{\n\t\t\t\t$tmp = json_decode($_SESSION['lastsearch_values_'.$relativepathstring], true);\n\t\t\t\tif (is_array($tmp))\n\t\t\t\t{\n\t\t\t\t\tforeach ($tmp as $key => $val)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($key == $paramname)\t// We are on the requested parameter\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$out = $val;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If there is saved contextpage, page or limit\n\t\t\tif ($paramname == 'contextpage' && !empty($_SESSION['lastsearch_contextpage_'.$relativepathstring]))\n\t\t\t{\n\t\t\t\t$out = $_SESSION['lastsearch_contextpage_'.$relativepathstring];\n\t\t\t}\n\t\t\telseif ($paramname == 'page' && !empty($_SESSION['lastsearch_page_'.$relativepathstring]))\n\t\t\t{\n\t\t\t\t$out = $_SESSION['lastsearch_page_'.$relativepathstring];\n\t\t\t}\n\t\t\telseif ($paramname == 'limit' && !empty($_SESSION['lastsearch_limit_'.$relativepathstring]))\n\t\t\t{\n\t\t\t\t$out = $_SESSION['lastsearch_limit_'.$relativepathstring];\n\t\t\t}\n\t\t}\n\t\t// Else, retreive default values if we are not doing a sort\n\t\telseif (!isset($_GET['sortfield']))\t// If we did a click on a field to sort, we do no apply default values. Same if option MAIN_ENABLE_DEFAULT_VALUES is not set\n\t\t{\n\t\t\tif (!empty($_GET['action']) && $_GET['action'] == 'create' && !isset($_GET[$paramname]) && !isset($_POST[$paramname]))\n\t\t\t{\n\t\t\t\t// Search default value from $object->field\n\t\t\t\tglobal $object;\n\t\t\t\tif (is_object($object) && isset($object->fields[$paramname]['default']))\n\t\t\t\t{\n\t\t\t\t\t$out = $object->fields[$paramname]['default'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!empty($conf->global->MAIN_ENABLE_DEFAULT_VALUES))\n\t\t\t{\n\t\t\t    if (!empty($_GET['action']) && (preg_match('/^create/', $_GET['action']) || preg_match('/^presend/', $_GET['action'])) && !isset($_GET[$paramname]) && !isset($_POST[$paramname]))\n\t\t\t\t{\n\t\t\t\t\t// Now search in setup to overwrite default values\n\t\t\t\t\tif (!empty($user->default_values))\t\t// $user->default_values defined from menu 'Setup - Default values'\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($user->default_values[$relativepathstring]['createform']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['createform'] as $defkey => $defval)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t\t\t$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (!in_array($tmpquerytohave, $tmpqueryarraywehave)) $foundintru = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//var_dump($user->default_values[$relativepathstring][$defkey]['createform']);\n\t\t\t\t\t\t\t\t\tif (isset($user->default_values[$relativepathstring]['createform'][$defkey][$paramname]))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$out = $user->default_values[$relativepathstring]['createform'][$defkey][$paramname];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Management of default search_filters and sort order\n\t\t\t\t//elseif (preg_match('/list.php$/', $_SERVER[\"PHP_SELF\"]) && ! empty($paramname) && ! isset($_GET[$paramname]) && ! isset($_POST[$paramname]))\n\t\t\t\telseif (!empty($paramname) && !isset($_GET[$paramname]) && !isset($_POST[$paramname]))\n\t\t\t\t{\n\t\t\t\t\tif (!empty($user->default_values))\t\t// $user->default_values defined from menu 'Setup - Default values'\n\t\t\t\t\t{\n\t\t\t\t\t\t//var_dump($user->default_values[$relativepathstring]);\n\t\t\t\t\t\tif ($paramname == 'sortfield' || $paramname == 'sortorder')\t\t\t// Sorted on which fields ? ASC or DESC ?\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (isset($user->default_values[$relativepathstring]['sortorder']))\t// Even if paramname is sortfield, data are stored into ['sortorder...']\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['sortorder'] as $defkey => $defval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t\t\t\t$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (!in_array($tmpquerytohave, $tmpqueryarraywehave)) $foundintru = 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \";\", \"=\"); // we accept _, -, . and ,\n\t\t\t\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['sortorder'][$defkey] as $key => $val)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif ($out) $out .= ', ';\n\t\t\t\t\t\t\t\t\t\t\tif ($paramname == 'sortfield')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$out .= dol_string_nospecial($key, '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif ($paramname == 'sortorder')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$out .= dol_string_nospecial($val, '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t//break;\t// No break for sortfield and sortorder so we can cumulate fields (is it realy usefull ?)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif (isset($user->default_values[$relativepathstring]['filters']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['filters'] as $defkey => $defval)\t// $defkey is a querystring like 'a=b&c=d', $defval is key of user\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t\t\t$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (!in_array($tmpquerytohave, $tmpqueryarraywehave)) $foundintru = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (isset($_POST['sall']) || isset($_POST['search_all']) || isset($_GET['sall']) || isset($_GET['search_all']))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// We made a search from quick search menu, do we still use default filter ?\n\t\t\t\t\t\t\t\t\t\tif (empty($conf->global->MAIN_DISABLE_DEFAULT_FILTER_FOR_QUICK_SEARCH))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \";\", \"=\"); // we accept _, -, . and ,\n\t\t\t\t\t\t\t\t\t\t\t$out = dol_string_nospecial($user->default_values[$relativepathstring]['filters'][$defkey][$paramname], '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \";\", \"=\"); // we accept _, -, . and ,\n\t\t\t\t\t\t\t\t\t\t$out = dol_string_nospecial($user->default_values[$relativepathstring]['filters'][$defkey][$paramname], '', $forbidden_chars_to_replace);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Substitution variables for GETPOST (used to get final url with variable parameters or final default value with variable parameters)\n\t// Example of variables: __DAY__, __MONTH__, __YEAR__, __MYCOMPANY_COUNTRY_ID__, __USER_ID__, ...\n\t// We do this only if var is a GET. If it is a POST, may be we want to post the text with vars as the setup text.\n\tif (!is_array($out) && empty($_POST[$paramname]) && empty($noreplace))\n\t{\n\t\t$reg = array();\n\t\t$maxloop = 20; $loopnb = 0; // Protection against infinite loop\n\t\twhile (preg_match('/__([A-Z0-9]+_?[A-Z0-9]+)__/i', $out, $reg) && ($loopnb < $maxloop))    // Detect '__ABCDEF__' as key 'ABCDEF' and '__ABC_DEF__' as key 'ABC_DEF'. Detection is also correct when 2 vars are side by side.\n\t\t{\n\t\t\t$loopnb++; $newout = '';\n\n\t\t\tif ($reg[1] == 'DAY') { $tmp = dol_getdate(dol_now(), true); $newout = $tmp['mday']; }\n\t\t\telseif ($reg[1] == 'MONTH') { $tmp = dol_getdate(dol_now(), true); $newout = $tmp['mon']; }\n\t\t\telseif ($reg[1] == 'YEAR') { $tmp = dol_getdate(dol_now(), true); $newout = $tmp['year']; }\n\t\t\telseif ($reg[1] == 'PREVIOUS_DAY') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_prev_day($tmp['mday'], $tmp['mon'], $tmp['year']); $newout = $tmp2['day']; }\n\t\t\telseif ($reg[1] == 'PREVIOUS_MONTH') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_prev_month($tmp['mon'], $tmp['year']); $newout = $tmp2['month']; }\n\t\t\telseif ($reg[1] == 'PREVIOUS_YEAR') { $tmp = dol_getdate(dol_now(), true); $newout = ($tmp['year'] - 1); }\n\t\t\telseif ($reg[1] == 'NEXT_DAY') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_next_day($tmp['mday'], $tmp['mon'], $tmp['year']); $newout = $tmp2['day']; }\n\t\t\telseif ($reg[1] == 'NEXT_MONTH') { $tmp = dol_getdate(dol_now(), true); $tmp2 = dol_get_next_month($tmp['mon'], $tmp['year']); $newout = $tmp2['month']; }\n\t\t\telseif ($reg[1] == 'NEXT_YEAR') { $tmp = dol_getdate(dol_now(), true); $newout = ($tmp['year'] + 1); }\n\t\t\telseif ($reg[1] == 'MYCOMPANY_COUNTRY_ID' || $reg[1] == 'MYCOUNTRY_ID' || $reg[1] == 'MYCOUNTRYID')\n\t\t\t{\n\t\t\t\t$newout = $mysoc->country_id;\n\t\t\t}\n\t\t\telseif ($reg[1] == 'USER_ID' || $reg[1] == 'USERID')\n\t\t\t{\n\t\t\t\t$newout = $user->id;\n\t\t\t}\n\t\t\telseif ($reg[1] == 'USER_SUPERVISOR_ID' || $reg[1] == 'SUPERVISOR_ID' || $reg[1] == 'SUPERVISORID')\n\t\t\t{\n\t\t\t\t$newout = $user->fk_user;\n\t\t\t}\n\t\t\telseif ($reg[1] == 'ENTITY_ID' || $reg[1] == 'ENTITYID')\n\t\t\t{\n\t\t\t\t$newout = $conf->entity;\n\t\t\t}\n\t\t\telse $newout = ''; // Key not found, we replace with empty string\n\t\t\t//var_dump('__'.$reg[1].'__ -> '.$newout);\n\t\t\t$out = preg_replace('/__'.preg_quote($reg[1], '/').'__/', $newout, $out);\n\t\t}\n\t}\n\n\t// Check is done after replacement\n\tswitch ($check)\n\t{\n\t\tcase 'none':\n\t\t\tbreak;\n\t\tcase 'int':    // Check param is a numeric value (integer but also float or hexadecimal)\n\t\t\tif (!is_numeric($out)) { $out = ''; }\n\t\t\tbreak;\n\t\tcase 'intcomma':\n\t\t\tif (preg_match('/[^0-9,-]+/i', $out)) $out = '';\n\t\t\tbreak;\n\t\tcase 'alpha':\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t// '\"' is dangerous because param in url can close the href= or src= and add javascript functions.\n\t\t\t\t// '../' is dangerous because it allows dir transversals\n\t\t\t\t$out = str_replace(array('\"', '../'), '', trim($out));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'san_alpha':\n\t\t\t$out = filter_var($out, FILTER_SANITIZE_STRING);\n\t\t\tbreak;\n\t\tcase 'aZ':\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t$out = trim($out);\n\t\t\t\tif (preg_match('/[^a-z]+/i', $out)) $out = '';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'aZ09':\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t$out = trim($out);\n\t\t\t\tif (preg_match('/[^a-z0-9_\\-\\.]+/i', $out)) $out = '';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'aZ09comma':\t\t// great to sanitize sortfield or sortorder params that can be t.abc,t.def_gh\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t$out = trim($out);\n\t\t\t\tif (preg_match('/[^a-z0-9_\\-\\.,]+/i', $out)) $out = '';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'array':\n\t\t\tif (!is_array($out) || empty($out)) $out = array();\n\t\t\tbreak;\n\t\tcase 'nohtml':\n\t\t\t$out = dol_string_nohtmltag($out, 0);\n\t\t\tbreak;\n\t\tcase 'alphanohtml':\t// Recommended for most scalar parameters and search parameters\n\t\t\tif (!is_array($out))\n\t\t\t{\n\t\t\t\t// '\"' is dangerous because param in url can close the href= or src= and add javascript functions.\n\t\t\t\t// '../' is dangerous because it allows dir transversals\n\t\t\t\t$out = str_replace(array('\"', '../'), '', trim($out));\n\t\t\t\t$out = dol_string_nohtmltag($out, 0);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'restricthtml':\t\t// Recommended for most html textarea\n\t\t\t$out = dol_string_onlythesehtmltags($out, 0);\n\t\t\tbreak;\n\t\tcase 'custom':\n\t\t\tif (empty($filter)) return 'BadFourthParameterForGETPOST';\n\t\t\t$out = filter_var($out, $filter, $options);\n\t\t\tbreak;\n\t}\n\n\t// Code for search criteria persistence.\n\t// Save data into session if key start with 'search_' or is 'smonth', 'syear', 'month', 'year'\n\tif (empty($method) || $method == 3 || $method == 4)\n\t{\n\t\tif (preg_match('/^search_/', $paramname) || in_array($paramname, array('sortorder', 'sortfield')))\n\t\t{\n\t\t\t//var_dump($paramname.' - '.$out.' '.$user->default_values[$relativepathstring]['filters'][$paramname]);\n\n\t\t\t// We save search key only if $out not empty that means:\n\t\t\t// - posted value not empty, or\n\t\t\t// - if posted value is empty and a default value exists that is not empty (it means we did a filter to an empty value when default was not).\n\n\t\t\tif ($out != '')\t\t// $out = '0' or 'abc', it is a search criteria to keep\n\t\t\t{\n\t\t\t\t$user->lastsearch_values_tmp[$relativepathstring][$paramname] = $out;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $out;\n}\n\n\nif (!function_exists('dol_getprefix'))\n{\n    /**\n     *  Return a prefix to use for this Dolibarr instance, for session/cookie names or email id.\n     *  The prefix is unique for instance and avoid conflict between multi-instances, even when having two instances with same root dir\n     *  or two instances in same virtual servers.\n     *\n     *  @param  string  $mode                   '' (prefix for session name) or 'email' (prefix for email id)\n     *  @return\tstring                          A calculated prefix\n     */\n    function dol_getprefix($mode = '')\n    {\n        global $conf;\n\n\t\t// If prefix is for email\n\t\tif ($mode == 'email')\n\t\t{\n\t\t    if (!empty($conf->global->MAIL_PREFIX_FOR_EMAIL_ID))\t// If MAIL_PREFIX_FOR_EMAIL_ID is set (a value initialized with a random value is recommended)\n\t\t\t{\n\t\t\t\tif ($conf->global->MAIL_PREFIX_FOR_EMAIL_ID != 'SERVER_NAME') return $conf->global->MAIL_PREFIX_FOR_EMAIL_ID;\n\t\t\t\telseif (isset($_SERVER[\"SERVER_NAME\"])) return $_SERVER[\"SERVER_NAME\"];\n\t\t\t}\n\n\t\t\t// The recommended value (may be not defined for old versions)\n\t\t\tif (!empty($conf->file->instance_unique_id)) return $conf->file->instance_unique_id;\n\n\t\t\t// For backward compatibility\n\t\t\treturn dol_hash(DOL_DOCUMENT_ROOT.DOL_URL_ROOT, '3');\n\t\t}\n\n\t\t// The recommended value (may be not defined for old versions)\n\t\tif (!empty($conf->file->instance_unique_id)) return $conf->file->instance_unique_id;\n\n\t\t// For backward compatibility\n\t\tif (isset($_SERVER[\"SERVER_NAME\"]) && isset($_SERVER[\"DOCUMENT_ROOT\"]))\n\t\t{\n\t\t\treturn dol_hash($_SERVER[\"SERVER_NAME\"].$_SERVER[\"DOCUMENT_ROOT\"].DOL_DOCUMENT_ROOT.DOL_URL_ROOT, '3');\n\t\t}\n\n\t\treturn dol_hash(DOL_DOCUMENT_ROOT.DOL_URL_ROOT, '3');\n\t}\n}\n\n/**\n *\tMake an include_once using default root and alternate root if it fails.\n *  To link to a core file, use include(DOL_DOCUMENT_ROOT.'/pathtofile')\n *  To link to a module file from a module file, use include './mymodulefile';\n *  To link to a module file from a core file, then this function can be used (call by hook / trigger / speciales pages)\n *\n * \t@param\tstring\t$relpath\tRelative path to file (Ie: mydir/myfile, ../myfile, ...)\n * \t@param\tstring\t$classname\tClass name (deprecated)\n *  @return bool                True if load is a success, False if it fails\n */\nfunction dol_include_once($relpath, $classname = '')\n{\n\tglobal $conf, $langs, $user, $mysoc; // Do not remove this. They must be defined for files we include. Other globals var must be retreived with $GLOBALS['var']\n\n\t$fullpath = dol_buildpath($relpath);\n\n\tif (!file_exists($fullpath)) {\n\t\tdol_syslog('functions::dol_include_once Tried to load unexisting file: '.$relpath, LOG_WARNING);\n\t\treturn false;\n\t}\n\n\tif (!empty($classname) && !class_exists($classname)) {\n\t\treturn include $fullpath;\n\t} else {\n\t\treturn include_once $fullpath;\n\t}\n}\n\n\n/**\n *\tReturn path of url or filesystem. Can check into alternate dir or alternate dir + main dir depending on value of $returnemptyifnotfound.\n *\n * \t@param\tstring\t$path\t\t\t\t\t\tRelative path to file (if mode=0) or relative url (if mode=1). Ie: mydir/myfile, ../myfile\n *  @param\tint\t\t$type\t\t\t\t\t\t0=Used for a Filesystem path, 1=Used for an URL path (output relative), 2=Used for an URL path (output full path using same host that current url), 3=Used for an URL path (output full path using host defined into $dolibarr_main_url_root of conf file)\n *  @param\tint\t\t$returnemptyifnotfound\t\t0:If $type==0 and if file was not found into alternate dir, return default path into main dir (no test on it)\n *  \t\t\t\t\t\t\t\t\t\t\t1:If $type==0 and if file was not found into alternate dir, return empty string\n *  \t\t\t\t\t\t\t\t\t\t\t2:If $type==0 and if file was not found into alternate dir, test into main dir, return default path if found, empty string if not found\n *  @return string\t\t\t\t\t\t\t\tFull filesystem path (if path=0) or '' if file not found, Full url path (if mode=1)\n */\nfunction dol_buildpath($path, $type = 0, $returnemptyifnotfound = 0)\n{\n\tglobal $conf;\n\n\t$path = preg_replace('/^\\//', '', $path);\n\n\tif (empty($type))\t// For a filesystem path\n\t{\n\t\t$res = DOL_DOCUMENT_ROOT.'/'.$path; // Standard default path\n\t\tif (is_array($conf->file->dol_document_root))\n\t\t{\n\t\t\tforeach ($conf->file->dol_document_root as $key => $dirroot)\t// ex: array(\"main\"=>\"/home/main/htdocs\", \"alt0\"=>\"/home/dirmod/htdocs\", ...)\n\t\t\t{\n\t\t\t\tif ($key == 'main')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (file_exists($dirroot.'/'.$path))\n\t\t\t\t{\n\t\t\t\t\t$res = $dirroot.'/'.$path;\n\t\t\t\t\treturn $res;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($returnemptyifnotfound)\t\t\t\t\t\t\t\t// Not found into alternate dir\n\t\t{\n\t\t\tif ($returnemptyifnotfound == 1 || !file_exists($res)) return '';\n\t\t}\n\t}\n\telse\t\t\t\t// For an url path\n\t{\n\t\t// We try to get local path of file on filesystem from url\n\t\t// Note that trying to know if a file on disk exist by forging path on disk from url\n\t\t// works only for some web server and some setup. This is bugged when\n\t\t// using proxy, rewriting, virtual path, etc...\n\t\t$res = '';\n\t\tif ($type == 1) $res = DOL_URL_ROOT.'/'.$path; // Standard value\n\t\tif ($type == 2) $res = DOL_MAIN_URL_ROOT.'/'.$path; // Standard value\n\t\tif ($type == 3) $res = DOL_URL_ROOT.'/'.$path;\n\n\t\tforeach ($conf->file->dol_document_root as $key => $dirroot)\t// ex: array([\"main\"]=>\"/home/main/htdocs\", [\"alt0\"]=>\"/home/dirmod/htdocs\", ...)\n\t\t{\n\t\t\tif ($key == 'main')\n\t\t\t{\n\t\t\t\tif ($type == 3)\n\t\t\t\t{\n\t\t\t\t\tglobal $dolibarr_main_url_root;\n\n\t\t\t\t\t// Define $urlwithroot\n\t\t\t\t\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t\t\t\t\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\t\t\t\t\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : $urlwithroot).'/'.$path; // Test on start with http is for old conf syntax\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpreg_match('/^([^\\?]+(\\.css\\.php|\\.css|\\.js\\.php|\\.js|\\.png|\\.jpg|\\.php)?)/i', $path, $regs); // Take part before '?'\n\t\t\tif (!empty($regs[1]))\n\t\t\t{\n\t\t\t\t//print $key.'-'.$dirroot.'/'.$path.'-'.$conf->file->dol_url_root[$type].'<br>'.\"\\n\";\n\t\t\t\tif (file_exists($dirroot.'/'.$regs[1]))\n\t\t\t\t{\n\t\t\t\t\tif ($type == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : DOL_URL_ROOT).$conf->file->dol_url_root[$key].'/'.$path;\n\t\t\t\t\t}\n\t\t\t\t\tif ($type == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : DOL_MAIN_URL_ROOT).$conf->file->dol_url_root[$key].'/'.$path;\n\t\t\t\t\t}\n\t\t\t\t\tif ($type == 3)\n\t\t\t\t\t{\n\t\t\t\t\t\tglobal $dolibarr_main_url_root;\n\n\t\t\t\t\t\t// Define $urlwithroot\n\t\t\t\t\t\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t\t\t\t\t\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\t\t\t\t\t\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\t\t\t\t\t\t$res = (preg_match('/^http/i', $conf->file->dol_url_root[$key]) ? '' : $urlwithroot).$conf->file->dol_url_root[$key].'/'.$path; // Test on start with http is for old conf syntax\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $res;\n}\n\n/**\n *\tCreate a clone of instance of object (new instance with same value for properties)\n *  With native = 0: Property that are reference are also new object (full isolation clone). This means $this->db of new object is not valid.\n *  With native = 1: Use PHP clone. Property that are reference are same pointer. This means $this->db of new object is still valid but point to same this->db than original object.\n *\n * \t@param\tobject\t$object\t\tObject to clone\n *  @param\tint\t\t$native\t\t0=Full isolation method, 1=Native PHP method\n *\t@return object\t\t\t\tClone object\n *  @see https://php.net/manual/language.oop5.cloning.php\n */\nfunction dol_clone($object, $native = 0)\n{\n\tif (empty($native))\n\t{\n\t\t$myclone = unserialize(serialize($object));\n\t}\n\telse\n\t{\n\t\t$myclone = clone $object; // PHP clone is a shallow copy only, not a real clone, so properties of references will keep references (refer to the same target/variable)\n\t}\n\n\treturn $myclone;\n}\n\n/**\n *\tOptimize a size for some browsers (phone, smarphone, ...)\n *\n * \t@param\tint\t\t$size\t\tSize we want\n * \t@param\tstring\t$type\t\tType of optimizing:\n * \t\t\t\t\t\t\t\t'' = function used to define a size for truncation\n * \t\t\t\t\t\t\t\t'width' = function is used to define a width\n *\t@return int\t\t\t\t\tNew size after optimizing\n */\nfunction dol_size($size, $type = '')\n{\n\tglobal $conf;\n\tif (empty($conf->dol_optimize_smallscreen)) return $size;\n\tif ($type == 'width' && $size > 250) return 250;\n\telse return 10;\n}\n\n\n/**\n *\tClean a string to use it as a file name\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace bad chars with\n *  @param\tint\t    $unaccent\t\t1=Remove also accent (default), 0 do not remove them\n *\t@return string          \t\tString cleaned (a-zA-Z_)\n *\n * \t@see        \tdol_string_nospecial(), dol_string_unaccent(), dol_sanitizePathName()\n */\nfunction dol_sanitizeFileName($str, $newstr = '_', $unaccent = 1)\n{\n\t// List of special chars for filenames in windows are defined on page https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\n\t// Char '>' '<' '|' '$' and ';' are special chars for shells.\n\t// Char '/' and '\\' are file delimiters.\n\t// -- car can be used into filename to inject special paramaters like --use-compress-program to make command with file as parameter making remote execution of command\n\t$filesystem_forbidden_chars = array('<', '>', '/', '\\\\', '?', '*', '|', '\"', ':', '\u00b0', '$', ';', '--');\n\treturn dol_string_nospecial($unaccent ? dol_string_unaccent($str) : $str, $newstr, $filesystem_forbidden_chars);\n}\n\n/**\n *\tClean a string to use it as a path name\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace bad chars with\n *  @param\tint\t    $unaccent\t\t1=Remove also accent (default), 0 do not remove them\n *\t@return string          \t\tString cleaned (a-zA-Z_)\n *\n * \t@see        \tdol_string_nospecial(), dol_string_unaccent(), dol_sanitizeFileName()\n */\nfunction dol_sanitizePathName($str, $newstr = '_', $unaccent = 1)\n{\n\t$filesystem_forbidden_chars = array('<', '>', '?', '*', '|', '\"', '\u00b0');\n\treturn dol_string_nospecial($unaccent ? dol_string_unaccent($str) : $str, $newstr, $filesystem_forbidden_chars);\n}\n\n/**\n *\tClean a string from all accent characters to be used as ref, login or by dol_sanitizeFileName\n *\n *\t@param\tstring\t$str\t\t\tString to clean\n *\t@return string   \t       \t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename(), dol_string_nospecial()\n */\nfunction dol_string_unaccent($str)\n{\n\tif (utf8_check($str))\n\t{\n\t\t// See http://www.utf8-chartable.de/\n\t\t$string = rawurlencode($str);\n\t\t$replacements = array(\n\t\t'%C3%80' => 'A', '%C3%81' => 'A', '%C3%82' => 'A', '%C3%83' => 'A', '%C3%84' => 'A', '%C3%85' => 'A',\n\t\t'%C3%88' => 'E', '%C3%89' => 'E', '%C3%8A' => 'E', '%C3%8B' => 'E',\n\t\t'%C3%8C' => 'I', '%C3%8D' => 'I', '%C3%8E' => 'I', '%C3%8F' => 'I',\n\t\t'%C3%92' => 'O', '%C3%93' => 'O', '%C3%94' => 'O', '%C3%95' => 'O', '%C3%96' => 'O',\n\t\t'%C3%99' => 'U', '%C3%9A' => 'U', '%C3%9B' => 'U', '%C3%9C' => 'U',\n\t\t'%C3%A0' => 'a', '%C3%A1' => 'a', '%C3%A2' => 'a', '%C3%A3' => 'a', '%C3%A4' => 'a', '%C3%A5' => 'a',\n\t\t'%C3%A7' => 'c',\n\t\t'%C3%A8' => 'e', '%C3%A9' => 'e', '%C3%AA' => 'e', '%C3%AB' => 'e',\n\t\t'%C3%AC' => 'i', '%C3%AD' => 'i', '%C3%AE' => 'i', '%C3%AF' => 'i',\n\t\t'%C3%B1' => 'n',\n\t\t'%C3%B2' => 'o', '%C3%B3' => 'o', '%C3%B4' => 'o', '%C3%B5' => 'o', '%C3%B6' => 'o',\n\t\t'%C3%B9' => 'u', '%C3%BA' => 'u', '%C3%BB' => 'u', '%C3%BC' => 'u',\n\t\t'%C3%BF' => 'y'\n\t\t);\n\t\t$string = strtr($string, $replacements);\n\t\treturn rawurldecode($string);\n\t}\n\telse\n\t{\n\t\t// See http://www.ascii-code.com/\n        $string = strtr(\n\t\t\t$str,\n\t\t\t\"\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC7\n\t\t\t\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\n\t\t\t\\xD2\\xD3\\xD4\\xD5\\xD8\\xD9\\xDA\\xDB\\xDD\n\t\t\t\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE7\\xE8\\xE9\\xEA\\xEB\n\t\t\t\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF8\n\t\t\t\\xF9\\xFA\\xFB\\xFC\\xFD\\xFF\",\n\t\t\t\"AAAAAAC\n\t\t\tEEEEIIIIDN\n\t\t\tOOOOOUUUY\n\t\t\taaaaaaceeee\n\t\t\tiiiidnooooo\n\t\t\tuuuuyy\"\n\t\t);\n\t\t$string = strtr($string, array(\"\\xC4\"=>\"Ae\", \"\\xC6\"=>\"AE\", \"\\xD6\"=>\"Oe\", \"\\xDC\"=>\"Ue\", \"\\xDE\"=>\"TH\", \"\\xDF\"=>\"ss\", \"\\xE4\"=>\"ae\", \"\\xE6\"=>\"ae\", \"\\xF6\"=>\"oe\", \"\\xFC\"=>\"ue\", \"\\xFE\"=>\"th\"));\n\t\treturn $string;\n\t}\n}\n\n/**\n *\tClean a string from all punctuation characters to use it as a ref or login.\n *  This is a more complete function than dol_sanitizeFileName.\n *\n *\t@param\tstring\t$str            \tString to clean\n * \t@param\tstring\t$newstr\t\t\t\tString to replace forbidden chars with\n *  @param  array\t$badcharstoreplace  List of forbidden characters\n * \t@return string          \t\t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename(), dol_string_unaccent()\n */\nfunction dol_string_nospecial($str, $newstr = '_', $badcharstoreplace = '')\n{\n\t$forbidden_chars_to_replace = array(\" \", \"'\", \"/\", \"\\\\\", \":\", \"*\", \"?\", \"\\\"\", \"<\", \">\", \"|\", \"[\", \"]\", \",\", \";\", \"=\", '\u00b0'); // more complete than dol_sanitizeFileName\n\t$forbidden_chars_to_remove = array();\n\tif (is_array($badcharstoreplace)) $forbidden_chars_to_replace = $badcharstoreplace;\n\t//$forbidden_chars_to_remove=array(\"(\",\")\");\n\n\treturn str_replace($forbidden_chars_to_replace, $newstr, str_replace($forbidden_chars_to_remove, \"\", $str));\n}\n\n\n/**\n *  Returns text escaped for inclusion into javascript code\n *\n *  @param      string\t\t$stringtoescape\t\tString to escape\n *  @param\t\tint\t\t$mode\t\t\t\t0=Escape also ' and \" into ', 1=Escape ' but not \" for usage into 'string', 2=Escape \" but not ' for usage into \"string\", 3=Escape ' and \" with \\\n *  @param\t\tint\t\t$noescapebackslashn\t0=Escape also \\n. 1=Do not escape \\n.\n *  @return     string     \t\t \t\t\t\tEscaped string. Both ' and \" are escaped into ' if they are escaped.\n */\nfunction dol_escape_js($stringtoescape, $mode = 0, $noescapebackslashn = 0)\n{\n\t// escape quotes and backslashes, newlines, etc.\n\t$substitjs = array(\"&#039;\"=>\"\\\\'\", \"\\r\"=>'\\\\r');\n\t//$substitjs['</']='<\\/';\t// We removed this. Should be useless.\n\tif (empty($noescapebackslashn)) { $substitjs[\"\\n\"] = '\\\\n'; $substitjs['\\\\'] = '\\\\\\\\'; }\n\tif (empty($mode)) { $substitjs[\"'\"] = \"\\\\'\"; $substitjs['\"'] = \"\\\\'\"; }\n\telseif ($mode == 1) $substitjs[\"'\"] = \"\\\\'\";\n\telseif ($mode == 2) { $substitjs['\"'] = '\\\\\"'; }\n\telseif ($mode == 3) { $substitjs[\"'\"] = \"\\\\'\"; $substitjs['\"'] = \"\\\\\\\"\"; }\n\treturn strtr($stringtoescape, $substitjs);\n}\n\n/**\n *  Returns text escaped for inclusion into javascript code\n *\n *  @param      string\t\t$stringtoescape\t\tString to escape\n *  @return     string     \t\t \t\t\t\tEscaped string for json content.\n */\nfunction dol_escape_json($stringtoescape)\n{\n\treturn str_replace('\"', '\\\"', $stringtoescape);\n}\n\n/**\n *  Returns text escaped for inclusion in HTML alt or title tags, or into values of HTML input fields.\n *\n *  @param      string\t\t$stringtoescape\t\t\tString to escape\n *  @param\t\tint\t\t\t$keepb\t\t\t\t\t1=Preserve b tags (otherwise, remove them)\n *  @param      int         $keepn              \t1=Preserve \\r\\n strings (otherwise, replace them with escaped value). Set to 1 when escaping for a <textarea>.\n *  @param\t\tstring\t\t$keepmoretags\t\t\t'' or 'common' or list of tags\n *  @param\t\tint\t\t\t$escapeonlyhtmltags\t\t1=Escape only html tags, not the special chars like accents.\n *  @return     string     \t\t\t\t \t\t\tEscaped string\n *  @see\t\tdol_string_nohtmltag(), dol_string_nospecial(), dol_string_unaccent()\n */\nfunction dol_escape_htmltag($stringtoescape, $keepb = 0, $keepn = 0, $keepmoretags = '', $escapeonlyhtmltags = 0)\n{\n\tif ($keepmoretags == 'common') $keepmoretags = 'html,body,a,em,i,u,ul,li,br,div,img,font,p,span,strong,table,tr,td,th,tbody';\n\t// TODO Implement $keepmoretags\n\n\t// escape quotes and backslashes, newlines, etc.\n\tif ($escapeonlyhtmltags) {\n\t\t$tmp = htmlspecialchars_decode($stringtoescape, ENT_COMPAT);\n\t} else {\n\t\t$tmp = html_entity_decode($stringtoescape, ENT_COMPAT, 'UTF-8');\n\t}\n\tif (!$keepb) $tmp = strtr($tmp, array(\"<b>\"=>'', '</b>'=>''));\n\tif (!$keepn) $tmp = strtr($tmp, array(\"\\r\"=>'\\\\r', \"\\n\"=>'\\\\n'));\n\tif ($escapeonlyhtmltags) {\n\t\treturn htmlspecialchars($tmp, ENT_COMPAT, 'UTF-8');\n\t} else {\n\t\treturn htmlentities($tmp, ENT_COMPAT, 'UTF-8');\n\t}\n}\n\n\n/**\n * Convert a string to lower. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtolower($utf8_string)\n{\n\treturn mb_strtolower($utf8_string, \"UTF-8\");\n}\n\n/**\n * Convert a string to upper. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtoupper($utf8_string)\n{\n\treturn mb_strtoupper($utf8_string, \"UTF-8\");\n}\n\n\n/**\n *\tWrite log message into outputs. Possible outputs can be:\n *\tSYSLOG_HANDLERS = [\"mod_syslog_file\"]  \t\tfile name is then defined by SYSLOG_FILE\n *\tSYSLOG_HANDLERS = [\"mod_syslog_syslog\"]  \tfacility is then defined by SYSLOG_FACILITY\n *  Warning, syslog functions are bugged on Windows, generating memory protection faults. To solve\n *  this, use logging to files instead of syslog (see setup of module).\n *  Note: If constant 'SYSLOG_FILE_NO_ERROR' defined, we never output any error message when writing to log fails.\n *  Note: You can get log message into html sources by adding parameter &logtohtml=1 (constant MAIN_LOGTOHTML must be set)\n *  This function works only if syslog module is enabled.\n * \tThis must not use any call to other function calling dol_syslog (avoid infinite loop).\n *\n * \t@param  string\t\t$message\t\t\t\tLine to log. ''=Show nothing\n *  @param  int\t\t\t$level\t\t\t\t\tLog level\n *\t\t\t\t\t\t\t\t\t\t\t\tOn Windows LOG_ERR=4, LOG_WARNING=5, LOG_NOTICE=LOG_INFO=6, LOG_DEBUG=6 si define_syslog_variables ou PHP 5.3+, 7 si dolibarr\n *\t\t\t\t\t\t\t\t\t\t\t\tOn Linux   LOG_ERR=3, LOG_WARNING=4, LOG_INFO=6, LOG_DEBUG=7\n *  @param\tint\t\t\t$ident\t\t\t\t\t1=Increase ident of 1, -1=Decrease ident of 1\n *  @param\tstring\t\t$suffixinfilename\t\tWhen output is a file, append this suffix into default log filename.\n *  @param\tstring\t\t$restricttologhandler\tForce output of log only to this log handler\n *  @param\tarray|null\t$logcontext\t\t\t\tIf defined, an array with extra informations (can be used by some log handlers)\n *  @return\tvoid\n */\nfunction dol_syslog($message, $level = LOG_INFO, $ident = 0, $suffixinfilename = '', $restricttologhandler = '', $logcontext = null)\n{\n    global $conf, $user, $debugbar;\n\n\t// If syslog module enabled\n\tif (empty($conf->syslog->enabled)) return;\n\n\t// Check if we are into execution of code of a website\n\tif (defined('USEEXTERNALSERVER') && ! defined('USEDOLIBARRSERVER') && ! defined('USEDOLIBARREDITOR')) {\n\t\tglobal $website, $websitekey;\n\t\tif (is_object($website) && ! empty($website->ref)) $suffixinfilename.='_website_'.$website->ref;\n\t\telseif (! empty($websitekey)) $suffixinfilename.='_website_'.$websitekey;\n\t}\n\n\tif ($ident < 0)\n\t{\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->setIdent($ident);\n\t\t}\n\t}\n\n\tif (!empty($message))\n\t{\n\t\t// Test log level\n\t\t$logLevels = array(LOG_EMERG=>'EMERG', LOG_ALERT=>'ALERT', LOG_CRIT=>'CRITICAL', LOG_ERR=>'ERR', LOG_WARNING=>'WARN', LOG_NOTICE=>'NOTICE', LOG_INFO=>'INFO', LOG_DEBUG=>'DEBUG');\n\t\tif (!array_key_exists($level, $logLevels))\n\t\t{\n\t\t\tthrow new Exception('Incorrect log level');\n\t\t}\n\t\tif ($level > $conf->global->SYSLOG_LEVEL) return;\n\n\t\t$message = preg_replace('/password=\\'[^\\']*\\'/', 'password=\\'hidden\\'', $message); // protection to avoid to have value of password in log\n\n\t\t// If adding log inside HTML page is required\n\t\tif ((!empty($_REQUEST['logtohtml']) && !empty($conf->global->MAIN_ENABLE_LOG_TO_HTML))\n\t\t    || (!empty($user->rights->debugbar->read) && is_object($debugbar)))\n\t\t{\n\t\t    $conf->logbuffer[] = dol_print_date(time(), \"%Y-%m-%d %H:%M:%S\").\" \".$logLevels[$level].\" \".$message;\n\t\t}\n\n\t\t//TODO: Remove this. MAIN_ENABLE_LOG_INLINE_HTML should be deprecated and use a log handler dedicated to HTML output\n\t\t// If html log tag enabled and url parameter log defined, we show output log on HTML comments\n\t\tif (!empty($conf->global->MAIN_ENABLE_LOG_INLINE_HTML) && !empty($_GET[\"log\"]))\n\t\t{\n\t\t\tprint \"\\n\\n<!-- Log start\\n\";\n\t\t\tprint $message.\"\\n\";\n\t\t\tprint \"Log end -->\\n\";\n\t\t}\n\n\t\t$data = array(\n\t\t\t'message' => $message,\n\t\t\t'script' => (isset($_SERVER['PHP_SELF']) ? basename($_SERVER['PHP_SELF'], '.php') : false),\n\t\t\t'level' => $level,\n\t\t\t'user' => ((is_object($user) && $user->id) ? $user->login : false),\n\t\t\t'ip' => false\n\t\t);\n\n\t\t$remoteip = getUserRemoteIP(); // Get ip when page run on a web server\n\t\tif (!empty($remoteip)) {\n\t\t\t$data['ip'] = $remoteip;\n\t\t\t// This is when server run behind a reverse proxy\n\t\t\tif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR'] != $remoteip) $data['ip'] = $_SERVER['HTTP_X_FORWARDED_FOR'].' -> '.$data['ip'];\n\t\t\telseif (!empty($_SERVER['HTTP_CLIENT_IP']) && $_SERVER['HTTP_CLIENT_IP'] != $remoteip) $data['ip'] = $_SERVER['HTTP_CLIENT_IP'].' -> '.$data['ip'];\n\t\t}\n\t\t// This is when PHP session is ran inside a web server but not inside a client request (example: init code of apache)\n\t\telseif (!empty($_SERVER['SERVER_ADDR'])) $data['ip'] = $_SERVER['SERVER_ADDR'];\n\t\t// This is when PHP session is ran outside a web server, like from Windows command line (Not always defined, but useful if OS defined it).\n\t\telseif (!empty($_SERVER['COMPUTERNAME'])) $data['ip'] = $_SERVER['COMPUTERNAME'].(empty($_SERVER['USERNAME']) ? '' : '@'.$_SERVER['USERNAME']);\n\t\t// This is when PHP session is ran outside a web server, like from Linux command line (Not always defined, but usefull if OS defined it).\n\t\telseif (!empty($_SERVER['LOGNAME'])) $data['ip'] = '???@'.$_SERVER['LOGNAME'];\n\t\t// Loop on each log handler and send output\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\tif ($restricttologhandler && $loghandlerinstance->code != $restricttologhandler) continue;\n\t\t\t$loghandlerinstance->export($data, $suffixinfilename);\n\t\t}\n\t\tunset($data);\n\t}\n\n\tif ($ident > 0)\n\t{\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->setIdent($ident);\n\t\t}\n\t}\n}\n\n\n/**\n *\tShow tab header of a card\n *\n *\t@param\tarray\t$links\t\t\t\tArray of tabs. Currently initialized by calling a function xxx_admin_prepare_head\n *\t@param\tstring\t$active     \t\tActive tab name (document', 'info', 'ldap', ....)\n *\t@param  string\t$title      \t\tTitle\n *\t@param  int\t\t$notab\t\t\t\t-1 or 0=Add tab header, 1=no tab header (if you set this to 1, using dol_fiche_end() to close tab is not required), -2=Add tab header with no seaparation under tab (to start a tab just after)\n * \t@param\tstring\t$picto\t\t\t\tAdd a picto on tab title\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path. If you set this to 1, you can use url returned by dol_buildpath('/mymodyle/img/myimg.png',1) for $picto.\n *  @param\tstring\t$morehtmlright\t\tAdd more html content on right of tabs title\n *  @param\tstring\t$morecss\t\t\tMore Css\n *  @param\tint\t\t$limittoshow\t\tLimit number of tabs to show. Use 0 to use automatic default value.\n * \t@return\tvoid\n */\nfunction dol_fiche_head($links = array(), $active = '0', $title = '', $notab = 0, $picto = '', $pictoisfullpath = 0, $morehtmlright = '', $morecss = '', $limittoshow = 0)\n{\n\tprint dol_get_fiche_head($links, $active, $title, $notab, $picto, $pictoisfullpath, $morehtmlright, $morecss, $limittoshow);\n}\n\n/**\n *  Show tabs of a record\n *\n *\t@param\tarray\t$links\t\t\t\tArray of tabs\n *\t@param\tstring\t$active     \t\tActive tab name\n *\t@param  string\t$title      \t\tTitle\n *\t@param  int\t\t$notab\t\t\t\t-1 or 0=Add tab header, 1=no tab header (if you set this to 1, using dol_fiche_end() to close tab is not required), -2=Add tab header with no seaparation under tab (to start a tab just after)\n * \t@param\tstring\t$picto\t\t\t\tAdd a picto on tab title\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path. If you set this to 1, you can use url returned by dol_buildpath('/mymodyle/img/myimg.png',1) for $picto.\n *  @param\tstring\t$morehtmlright\t\tAdd more html content on right of tabs title\n *  @param\tstring\t$morecss\t\t\tMore Css\n *  @param\tint\t\t$limittoshow\t\tLimit number of tabs to show. Use 0 to use automatic default value.\n * \t@return\tstring\n */\nfunction dol_get_fiche_head($links = array(), $active = '', $title = '', $notab = 0, $picto = '', $pictoisfullpath = 0, $morehtmlright = '', $morecss = '', $limittoshow = 0)\n{\n\tglobal $conf, $langs, $hookmanager;\n\n\t// Show title\n\t$showtitle = 1;\n\tif (!empty($conf->dol_optimize_smallscreen)) $showtitle = 0;\n\n\t$out = \"\\n\".'<!-- dol_get_fiche_head -->';\n\n\tif ((!empty($title) && $showtitle) || $morehtmlright || !empty($links)) {\n\t\t$out .= '<div class=\"tabs'.($picto ? '' : ' nopaddingleft').'\" data-role=\"controlgroup\" data-type=\"horizontal\">'.\"\\n\";\n\t}\n\n\t// Show right part\n\tif ($morehtmlright) $out .= '<div class=\"inline-block floatright tabsElem\">'.$morehtmlright.'</div>'; // Output right area first so when space is missing, text is in front of tabs and not under.\n\n\t// Show title\n\tif (!empty($title) && $showtitle && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n\t{\n\t\t$limittitle = 30;\n\t\t$out .= '<a class=\"tabTitle\">';\n\t\tif ($picto) $out .= img_picto($title, ($pictoisfullpath ? '' : 'object_').$picto, '', $pictoisfullpath, 0, 0, '', 'imgTabTitle').' ';\n\t\t$out .= '<span class=\"tabTitleText\">'.dol_trunc($title, $limittitle).'</span>';\n\t\t$out .= '</a>';\n\t}\n\n\t// Show tabs\n\n\t// Define max of key (max may be higher than sizeof because of hole due to module disabling some tabs).\n\t$maxkey = -1;\n\tif (is_array($links) && !empty($links))\n\t{\n\t\t$keys = array_keys($links);\n\t\tif (count($keys)) $maxkey = max($keys);\n\t}\n\n\t// Show tabs\n\t// if =0 we don't use the feature\n\tif (empty($limittoshow)) {\n\t\t$limittoshow = (empty($conf->global->MAIN_MAXTABS_IN_CARD) ? 99 : $conf->global->MAIN_MAXTABS_IN_CARD);\n\t}\n\tif (!empty($conf->dol_optimize_smallscreen)) $limittoshow = 2;\n\n\t$displaytab = 0;\n\t$nbintab = 0;\n\t$popuptab = 0;\n\t$outmore = '';\n\tfor ($i = 0; $i <= $maxkey; $i++)\n\t{\n\t\tif ((is_numeric($active) && $i == $active) || (!empty($links[$i][2]) && !is_numeric($active) && $active == $links[$i][2])) {\n\t\t\t// If active tab is already present\n\t\t\tif ($i >= $limittoshow) $limittoshow--;\n\t\t}\n\t}\n\n\tfor ($i = 0; $i <= $maxkey; $i++)\n\t{\n\t\tif ((is_numeric($active) && $i == $active) || (!empty($links[$i][2]) && !is_numeric($active) && $active == $links[$i][2])) {\n\t\t\t$isactive = true;\n\t\t}\n\t\telse {\n\t\t\t$isactive = false;\n\t\t}\n\n\t\tif ($i < $limittoshow || $isactive)\n\t\t{\n\t\t\t$out .= '<div class=\"inline-block tabsElem'.($isactive ? ' tabsElemActive' : '').((!$isactive && !empty($conf->global->MAIN_HIDE_INACTIVETAB_ON_PRINT)) ? ' hideonprint' : '').'\"><!-- id tab = '.(empty($links[$i][2]) ? '' : $links[$i][2]).' -->';\n\t\t\tif (isset($links[$i][2]) && $links[$i][2] == 'image')\n\t\t\t{\n\t\t\t\tif (!empty($links[$i][0]))\n\t\t\t\t{\n\t\t\t\t\t$out .= '<a class=\"tabimage'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$out .= '<span class=\"tabspan\">'.$links[$i][1].'</span>'.\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif (!empty($links[$i][1]))\n\t\t\t{\n\t\t\t\t//print \"x $i $active \".$links[$i][2].\" z\";\n\t\t\t\tif ($isactive)\n\t\t\t\t{\n\t\t\t\t\t$out .= '<a'.(!empty($links[$i][2]) ? ' id=\"'.$links[$i][2].'\"' : '').' class=\"tabactive tab inline-block'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">';\n\t\t\t\t\t$out .= $links[$i][1];\n\t\t\t\t\t$out .= '</a>'.\"\\n\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$out .= '<a'.(!empty($links[$i][2]) ? ' id=\"'.$links[$i][2].'\"' : '').' class=\"tabunactive tab inline-block'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">';\n\t\t\t\t\t$out .= $links[$i][1];\n\t\t\t\t\t$out .= '</a>'.\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$out .= '</div>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// The popup with the other tabs\n\t\t\tif (!$popuptab)\n\t\t\t{\n\t\t\t\t$popuptab = 1;\n\t\t\t\t$outmore .= '<div class=\"popuptabset wordwrap\">'; // The css used to hide/show popup\n\t\t\t}\n\t\t\t$outmore .= '<div class=\"popuptab wordwrap\" style=\"display:inherit;\">';\n\t\t\tif (isset($links[$i][2]) && $links[$i][2] == 'image')\n\t\t\t{\n\t\t\t\tif (!empty($links[$i][0]))\n\t\t\t\t\t$outmore .= '<a class=\"tabimage'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t\telse\n\t\t\t\t\t$outmore .= '<span class=\"tabspan\">'.$links[$i][1].'</span>'.\"\\n\";\n\t\t\t}\n\t\t\telseif (!empty($links[$i][1]))\n\t\t\t{\n\t\t\t\t$outmore .= '<a'.(!empty($links[$i][2]) ? ' id=\"'.$links[$i][2].'\"' : '').' class=\"wordwrap inline-block'.($morecss ? ' '.$morecss : '').'\" href=\"'.$links[$i][0].'\">';\n\t\t\t\t$outmore .= preg_replace('/([a-z])\\/([a-z])/i', '\\\\1 / \\\\2', $links[$i][1]); // Replace x/y with x / y to allow wrap on long composed texts.\n\t\t\t\t$outmore .= '</a>'.\"\\n\";\n\t\t\t}\n\t\t\t$outmore .= '</div>';\n\n\t\t\t$nbintab++;\n\t\t}\n\t\t$displaytab = $i;\n\t}\n\tif ($popuptab) $outmore .= '</div>';\n\n\tif ($popuptab)\t// If there is some tabs not shown\n\t{\n\t\t$left = ($langs->trans(\"DIRECTION\") == 'rtl' ? 'right' : 'left');\n\t\t$right = ($langs->trans(\"DIRECTION\") == 'rtl' ? 'left' : 'right');\n\n\t\t$tabsname = str_replace(\"@\", \"\", $picto);\n\t\t$out .= '<div id=\"moretabs'.$tabsname.'\" class=\"inline-block tabsElem\">';\n\t\t$out .= '<a href=\"#\" class=\"tab moretab inline-block tabunactive reposition\">'.$langs->trans(\"More\").'... ('.$nbintab.')</a>';\n\t\t$out .= '<div id=\"moretabsList'.$tabsname.'\" style=\"position: absolute; '.$left.': -999em; text-align: '.$left.'; margin:0px; padding:2px; z-index:10;\">';\n\t\t$out .= $outmore;\n\t\t$out .= '</div>';\n\t\t$out .= '<div></div>';\n\t\t$out .= \"</div>\\n\";\n\n\t\t$out .= \"<script>\";\n\t\t$out .= \"$('#moretabs\".$tabsname.\"').mouseenter( function() { console.log('mouseenter \".$left.\"'); $('#moretabsList\".$tabsname.\"').css('\".$left.\"','auto');});\";\n\t\t$out .= \"$('#moretabs\".$tabsname.\"').mouseleave( function() { console.log('mouseleave \".$left.\"'); $('#moretabsList\".$tabsname.\"').css('\".$left.\"','-999em');});\";\n\t\t$out .= \"</script>\";\n\t}\n\n\tif ((!empty($title) && $showtitle) || $morehtmlright || !empty($links)) {\n\t\t$out .= \"</div>\\n\";\n\t}\n\n\tif (!$notab || $notab == -1 || $notab == -2) $out .= \"\\n\".'<div class=\"tabBar'.($notab == -1 ? '' : ($notab == -2 ? ' tabBarNoTop' : ' tabBarWithBottom')).'\">'.\"\\n\";\n\n\t$parameters = array('tabname' => $active, 'out' => $out);\n\t$reshook = $hookmanager->executeHooks('printTabsHead', $parameters); // This hook usage is called just before output the head of tabs. Take also a look at \"completeTabsHead\"\n\tif ($reshook > 0)\n\t{\n\t\t$out = $hookmanager->resPrint;\n\t}\n\n\treturn $out;\n}\n\n/**\n *  Show tab footer of a card\n *\n *  @param\tint\t\t$notab       -1 or 0=Add tab footer, 1=no tab footer\n *  @return\tvoid\n */\nfunction dol_fiche_end($notab = 0)\n{\n\tprint dol_get_fiche_end($notab);\n}\n\n/**\n *\tReturn tab footer of a card\n *\n *\t@param  int\t\t$notab\t\t-1 or 0=Add tab footer, 1=no tab footer\n *  @return\tstring\n */\nfunction dol_get_fiche_end($notab = 0)\n{\n\tif (!$notab || $notab == -1) return \"\\n</div>\\n\";\n\telse return '';\n}\n\n/**\n *  Show tab footer of a card.\n *  Note: $object->next_prev_filter can be set to restrict select to find next or previous record by $form->showrefnav.\n *\n *  @param\tObject\t$object\t\t\tObject to show\n *  @param\tstring\t$paramid   \t\tName of parameter to use to name the id into the URL next/previous link\n *  @param\tstring\t$morehtml  \t\tMore html content to output just before the nav bar\n *  @param\tint\t\t$shownav\t  \tShow Condition (navigation is shown if value is 1)\n *  @param\tstring\t$fieldid   \t\tNom du champ en base a utiliser pour select next et previous (we make the select max and min on this field). Use 'none' for no prev/next search.\n *  @param\tstring\t$fieldref   \tNom du champ objet ref (object->ref) a utiliser pour select next et previous\n *  @param\tstring\t$morehtmlref  \tMore html to show after ref\n *  @param\tstring\t$moreparam  \tMore param to add in nav link url.\n *\t@param\tint\t\t$nodbprefix\t\tDo not include DB prefix to forge table name\n *\t@param\tstring\t$morehtmlleft\tMore html code to show before ref\n *\t@param\tstring\t$morehtmlstatus\tMore html code to show under navigation arrows\n *  @param  int     $onlybanner     Put this to 1, if the card will contains only a banner (this add css 'arearefnobottom' on div)\n *\t@param\tstring\t$morehtmlright\tMore html code to show before navigation arrows\n *  @return\tvoid\n */\nfunction dol_banner_tab($object, $paramid, $morehtml = '', $shownav = 1, $fieldid = 'rowid', $fieldref = 'ref', $morehtmlref = '', $moreparam = '', $nodbprefix = 0, $morehtmlleft = '', $morehtmlstatus = '', $onlybanner = 0, $morehtmlright = '')\n{\n\tglobal $conf, $form, $user, $langs;\n\n\t$error = 0;\n\n\t$maxvisiblephotos = 1;\n\t$showimage = 1;\n\t$entity = (empty($object->entity) ? $conf->entity : $object->entity);\n\t$showbarcode = empty($conf->barcode->enabled) ? 0 : ($object->barcode ? 1 : 0);\n\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) $showbarcode = 0;\n\t$modulepart = 'unknown';\n\n\tif ($object->element == 'societe')         $modulepart = 'societe';\n\tif ($object->element == 'contact')         $modulepart = 'contact';\n\tif ($object->element == 'member')          $modulepart = 'memberphoto';\n\tif ($object->element == 'user')            $modulepart = 'userphoto';\n\tif ($object->element == 'product')         $modulepart = 'product';\n\tif ($object->element == 'ticket')          $modulepart = 'ticket';\n\n\tif (class_exists(\"Imagick\"))\n\t{\n\t\tif ($object->element == 'propal')            $modulepart = 'propal';\n\t\tif ($object->element == 'commande')          $modulepart = 'commande';\n\t\tif ($object->element == 'facture')           $modulepart = 'facture';\n\t\tif ($object->element == 'fichinter')         $modulepart = 'ficheinter';\n\t\tif ($object->element == 'contrat')           $modulepart = 'contract';\n\t\tif ($object->element == 'supplier_proposal') $modulepart = 'supplier_proposal';\n\t\tif ($object->element == 'order_supplier')    $modulepart = 'supplier_order';\n\t\tif ($object->element == 'invoice_supplier')  $modulepart = 'supplier_invoice';\n\t\tif ($object->element == 'expensereport')     $modulepart = 'expensereport';\n\t}\n\n\tif ($object->element == 'product')\n\t{\n\t\t$width = 80; $cssclass = 'photoref';\n\t\t$showimage = $object->is_photo_available($conf->product->multidir_output[$entity]);\n\t\t$maxvisiblephotos = (isset($conf->global->PRODUCT_MAX_VISIBLE_PHOTO) ? $conf->global->PRODUCT_MAX_VISIBLE_PHOTO : 5);\n\t\tif ($conf->browser->layout == 'phone') $maxvisiblephotos = 1;\n\t\tif ($showimage) $morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">'.$object->show_photos('product', $conf->product->multidir_output[$entity], 'small', $maxvisiblephotos, 0, 0, 0, $width, 0).'</div>';\n\t\telse\n\t\t{\n\t\t\tif (!empty($conf->global->PRODUCT_NODISPLAYIFNOPHOTO)) {\n\t\t\t\t$nophoto = '';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"></div>';\n\t\t\t}\n\t\t\telse {    // Show no photo link\n\t\t\t\t$nophoto = '/public/theme/common/nophoto.png';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"><img class=\"photo'.$modulepart.($cssclass ? ' '.$cssclass : '').'\" alt=\"No photo\"'.($width ? ' style=\"width: '.$width.'px\"' : '').' src=\"'.DOL_URL_ROOT.$nophoto.'\"></div>';\n\t\t\t}\n\t\t}\n\t}\n\telseif ($object->element == 'ticket')\n\t{\n\t\t$width = 80; $cssclass = 'photoref';\n\t\t$showimage = $object->is_photo_available($conf->ticket->multidir_output[$entity].'/'.$object->ref);\n\t\t$maxvisiblephotos = (isset($conf->global->TICKET_MAX_VISIBLE_PHOTO) ? $conf->global->TICKET_MAX_VISIBLE_PHOTO : 2);\n\t\tif ($conf->browser->layout == 'phone') $maxvisiblephotos = 1;\n\t\tif ($showimage)\n\t\t{\n\t\t\t$showphoto = $object->show_photos('ticket', $conf->ticket->multidir_output[$entity], 'small', $maxvisiblephotos, 0, 0, 0, $width, 0);\n\t\t\tif ($object->nbphoto > 0)\n\t\t\t{\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">'.$showphoto.'</div>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$showimage = 0;\n\t\t\t}\n\t\t}\n\t\tif (!$showimage)\n\t\t{\n\t\t\tif (!empty($conf->global->TICKET_NODISPLAYIFNOPHOTO)) {\n\t\t\t\t$nophoto = '';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"></div>';\n\t\t\t}\n\t\t\telse {    // Show no photo link\n\t\t\t\t$nophoto = '/public/theme/common/nophoto.png';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"><img class=\"photo'.$modulepart.($cssclass ? ' '.$cssclass : '').'\" alt=\"No photo\" border=\"0\"'.($width ? ' style=\"width: '.$width.'px\"' : '').' src=\"'.DOL_URL_ROOT.$nophoto.'\"></div>';\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($showimage)\n\t\t{\n\t\t\tif ($modulepart != 'unknown')\n\t\t\t{\n\t\t\t\t$phototoshow = '';\n\t\t\t\t// Check if a preview file is available\n\t\t\t\tif (in_array($modulepart, array('propal', 'commande', 'facture', 'ficheinter', 'contract', 'supplier_order', 'supplier_proposal', 'supplier_invoice', 'expensereport')) && class_exists(\"Imagick\"))\n\t\t\t\t{\n\t\t\t\t\t$objectref = dol_sanitizeFileName($object->ref);\n\t\t\t\t\t$dir_output = (empty($conf->$modulepart->multidir_output[$entity]) ? $conf->$modulepart->dir_output : $conf->$modulepart->multidir_output[$entity]).\"/\";\n\t\t\t\t\tif (in_array($modulepart, array('invoice_supplier', 'supplier_invoice')))\n\t\t\t\t\t{\n\t\t\t\t\t\t$subdir = get_exdir($object->id, 2, 0, 1, $object, $modulepart);\n\t\t\t\t\t\t$subdir .= ((!empty($subdir) && !preg_match('/\\/$/', $subdir)) ? '/' : '').$objectref; // the objectref dir is not included into get_exdir when used with level=2, so we add it at end\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$subdir = get_exdir($object->id, 0, 0, 1, $object, $modulepart);\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($subdir)) $subdir = 'errorgettingsubdirofobject'; // Protection to avoid to return empty path\n\n\t\t\t\t\t$filepath = $dir_output.$subdir.\"/\";\n\n\t\t\t\t\t$filepdf = $filepath.$objectref.\".pdf\";\n\t\t\t\t\t$relativepath = $subdir.'/'.$objectref.'.pdf';\n\n\t\t\t\t\t// Define path to preview pdf file (preview precompiled \"file.ext\" are \"file.ext_preview.png\")\n\t\t\t\t\t$fileimage = $filepdf.'_preview.png';\n\t\t\t\t\t$relativepathimage = $relativepath.'_preview.png';\n\n\t\t\t\t\t$pdfexists = file_exists($filepdf);\n\n\t\t\t\t\t// If PDF file exists\n\t\t\t\t\tif ($pdfexists)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Conversion du PDF en image png si fichier png non existant\n\t\t\t\t\t\tif (!file_exists($fileimage) || (filemtime($fileimage) < filemtime($filepdf)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (empty($conf->global->MAIN_DISABLE_PDF_THUMBS))\t\t// If you experience trouble with pdf thumb generation and imagick, you can disable here.\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\t\t\t\t\t\t\t$ret = dol_convert_file($filepdf, 'png', $fileimage, '0'); // Convert first page of PDF into a file _preview.png\n\t\t\t\t\t\t\t\tif ($ret < 0) $error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($pdfexists && !$error)\n\t\t\t\t\t{\n\t\t\t\t\t\t$heightforphotref = 70;\n\t\t\t\t\t\tif (!empty($conf->dol_optimize_smallscreen)) $heightforphotref = 60;\n\t\t\t\t\t\t// If the preview file is found\n\t\t\t\t\t\tif (file_exists($fileimage))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$phototoshow = '<div class=\"floatleft inline-block valignmiddle divphotoref\"><div class=\"photoref\">';\n\t\t\t\t\t\t\t$phototoshow .= '<img height=\"'.$heightforphotref.'\" class=\"photo photowithmargin photowithborder\" src=\"'.DOL_URL_ROOT.'/viewimage.php?modulepart=apercu'.$modulepart.'&amp;file='.urlencode($relativepathimage).'\">';\n\t\t\t\t\t\t\t$phototoshow .= '</div></div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (!$phototoshow)\n\t\t\t\t{\n\t\t\t\t\t$phototoshow .= $form->showphoto($modulepart, $object, 0, 0, 0, 'photoref', 'small', 1, 0, $maxvisiblephotos);\n\t\t\t\t}\n\n\t\t\t\tif ($phototoshow)\n\t\t\t\t{\n\t\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">';\n\t\t\t\t\t$morehtmlleft .= $phototoshow;\n\t\t\t\t\t$morehtmlleft .= '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$phototoshow)      // Show No photo link (picto of object)\n\t\t\t{\n\t\t\t    $morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">';\n\t\t\t\tif ($object->element == 'action')\n\t\t\t\t{\n\t\t\t\t\t$width = 80;\n\t\t\t\t\t$cssclass = 'photorefcenter';\n\t\t\t\t\t$nophoto = img_picto('No photo', 'title_agenda');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$width = 14; $cssclass = 'photorefcenter';\n\t\t\t\t\t$picto = $object->picto;\n\t\t\t\t\tif ($object->element == 'project' && !$object->public) $picto = 'project'; // instead of projectpub\n\t\t\t\t\t$nophoto = img_picto('No photo', 'object_'.$picto);\n\t\t\t\t}\n\t\t\t\t$morehtmlleft .= '<!-- No photo to show -->';\n\t\t\t\t$morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\"><div class=\"photoref\">';\n\t\t\t\t$morehtmlleft .= $nophoto;\n\t\t\t\t$morehtmlleft .= '</div></div>';\n\n\t\t\t\t$morehtmlleft .= '</div>';\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($showbarcode) $morehtmlleft .= '<div class=\"floatleft inline-block valignmiddle divphotoref\">'.$form->showbarcode($object).'</div>';\n\n\tif ($object->element == 'societe')\n\t{\n\t\tif (!empty($conf->use_javascript_ajax) && $user->rights->societe->creer && !empty($conf->global->MAIN_DIRECT_STATUS_UPDATE))\n\t\t{\n\t\t   \t$morehtmlstatus .= ajax_object_onoff($object, 'status', 'status', 'InActivity', 'ActivityCeased');\n\t\t}\n\t\telse {\n\t\t\t$morehtmlstatus .= $object->getLibStatut(6);\n\t\t}\n\t}\n\telseif ($object->element == 'product')\n\t{\n\t\t//$morehtmlstatus.=$langs->trans(\"Status\").' ('.$langs->trans(\"Sell\").') ';\n\t\tif (!empty($conf->use_javascript_ajax) && $user->rights->produit->creer && !empty($conf->global->MAIN_DIRECT_STATUS_UPDATE)) {\n\t\t\t$morehtmlstatus .= ajax_object_onoff($object, 'status', 'tosell', 'ProductStatusOnSell', 'ProductStatusNotOnSell');\n\t\t} else {\n\t\t\t$morehtmlstatus .= '<span class=\"statusrefsell\">'.$object->getLibStatut(6, 0).'</span>';\n\t\t}\n\t\t$morehtmlstatus .= ' &nbsp; ';\n\t\t//$morehtmlstatus.=$langs->trans(\"Status\").' ('.$langs->trans(\"Buy\").') ';\n\t\tif (!empty($conf->use_javascript_ajax) && $user->rights->produit->creer && !empty($conf->global->MAIN_DIRECT_STATUS_UPDATE)) {\n\t\t\t$morehtmlstatus .= ajax_object_onoff($object, 'status_buy', 'tobuy', 'ProductStatusOnBuy', 'ProductStatusNotOnBuy');\n\t\t} else {\n\t\t\t$morehtmlstatus .= '<span class=\"statusrefbuy\">'.$object->getLibStatut(6, 1).'</span>';\n\t\t}\n\t}\n\telseif (in_array($object->element, array('facture', 'invoice', 'invoice_supplier', 'chargesociales', 'loan')))\n\t{\n\t\t$tmptxt = $object->getLibStatut(6, $object->totalpaye);\n\t\tif (empty($tmptxt) || $tmptxt == $object->getLibStatut(3)) $tmptxt = $object->getLibStatut(5, $object->totalpaye);\n\t\t$morehtmlstatus .= $tmptxt;\n\t}\n\telseif ($object->element == 'contrat' || $object->element == 'contract')\n\t{\n\t\tif ($object->statut == 0) $morehtmlstatus .= $object->getLibStatut(5);\n\t\telse $morehtmlstatus .= $object->getLibStatut(4);\n\t}\n\telseif ($object->element == 'facturerec')\n\t{\n\t\tif ($object->frequency == 0) $morehtmlstatus .= $object->getLibStatut(2);\n\t\telse $morehtmlstatus .= $object->getLibStatut(5);\n\t}\n\telseif ($object->element == 'project_task')\n\t{\n\t\t$object->fk_statut = 1;\n\t\tif ($object->progress > 0) $object->fk_statut = 2;\n\t\tif ($object->progress >= 100) $object->fk_statut = 3;\n\t\t$tmptxt = $object->getLibStatut(5);\n\t\t$morehtmlstatus .= $tmptxt; // No status on task\n\t}\n\telse { // Generic case\n\t\t$tmptxt = $object->getLibStatut(6);\n\t\tif (empty($tmptxt) || $tmptxt == $object->getLibStatut(3)) $tmptxt = $object->getLibStatut(5);\n\t\t$morehtmlstatus .= $tmptxt;\n\t}\n\n\t// Add if object was dispatched \"into accountancy\"\n\tif (!empty($conf->accounting->enabled) && in_array($object->element, array('bank', 'facture', 'invoice', 'invoice_supplier', 'expensereport', 'payment_various')))\n\t{\n\t\tif (method_exists($object, 'getVentilExportCompta'))\n\t\t{\n\t\t\t$accounted = $object->getVentilExportCompta();\n\t\t\t$langs->load(\"accountancy\");\n\t\t\t$morehtmlstatus .= '</div><div class=\"statusref statusrefbis\"><span class=\"opacitymedium\">'.($accounted > 0 ? $langs->trans(\"Accounted\") : $langs->trans(\"NotYetAccounted\")).'</span>';\n\t\t}\n\t}\n\n\t// Add alias for thirdparty\n\tif (!empty($object->name_alias)) $morehtmlref .= '<div class=\"refidno\">'.$object->name_alias.'</div>';\n\n\t// Add label\n\tif (in_array($object->element, array('product', 'bank_account', 'project_task')))\n\t{\n\t\tif (!empty($object->label)) $morehtmlref .= '<div class=\"refidno\">'.$object->label.'</div>';\n\t}\n\n\tif (method_exists($object, 'getBannerAddress') && !in_array($object->element, array('product', 'bookmark', 'ecm_directories', 'ecm_files')))\n\t{\n\t\t$moreaddress = $object->getBannerAddress('refaddress', $object);\n\t\tif ($moreaddress) {\n\t\t\t$morehtmlref .= '<div class=\"refidno\">';\n\t\t\t$morehtmlref .= $moreaddress;\n\t\t\t$morehtmlref .= '</div>';\n\t\t}\n\t}\n\tif (!empty($conf->global->MAIN_SHOW_TECHNICAL_ID) && ($conf->global->MAIN_SHOW_TECHNICAL_ID == '1' || preg_match('/'.preg_quote($object->element, '/').'/i', $conf->global->MAIN_SHOW_TECHNICAL_ID)) && !empty($object->id))\n\t{\n\t\t$morehtmlref .= '<div style=\"clear: both;\"></div><div class=\"refidno\">';\n\t\t$morehtmlref .= $langs->trans(\"TechnicalID\").': '.$object->id;\n\t\t$morehtmlref .= '</div>';\n\t}\n\n\tprint '<div class=\"'.($onlybanner ? 'arearefnobottom ' : 'arearef ').'heightref valignmiddle centpercent\">';\n\tprint $form->showrefnav($object, $paramid, $morehtml, $shownav, $fieldid, $fieldref, $morehtmlref, $moreparam, $nodbprefix, $morehtmlleft, $morehtmlstatus, $morehtmlright);\n\tprint '</div>';\n\tprint '<div class=\"underrefbanner clearboth\"></div>';\n}\n\n/**\n * Show a string with the label tag dedicated to the HTML edit field.\n *\n * @param\tstring\t$langkey\t\tTranslation key\n * @param \tstring\t$fieldkey\t\tKey of the html select field the text refers to\n * @param\tint\t\t$fieldrequired\t1=Field is mandatory\n * @return string\n * @deprecated Form::editfieldkey\n */\nfunction fieldLabel($langkey, $fieldkey, $fieldrequired = 0)\n{\n\tglobal $langs;\n\t$ret = '';\n\tif ($fieldrequired) $ret .= '<span class=\"fieldrequired\">';\n\t$ret .= '<label for=\"'.$fieldkey.'\">';\n\t$ret .= $langs->trans($langkey);\n\t$ret .= '</label>';\n\tif ($fieldrequired) $ret .= '</span>';\n\treturn $ret;\n}\n\n/**\n * Return string to add class property on html element with pair/impair.\n *\n * @param\tstring\t$var\t\t\t0 or 1\n * @param\tstring\t$moreclass\t\tMore class to add\n * @return\tstring\t\t\t\t\tString to add class onto HTML element\n */\nfunction dol_bc($var, $moreclass = '')\n{\n\tglobal $bc;\n\t$ret = ' '.$bc[$var];\n\tif ($moreclass) $ret = preg_replace('/class=\\\"/', 'class=\"'.$moreclass.' ', $ret);\n\treturn $ret;\n}\n\n/**\n *      Return a formated address (part address/zip/town/state) according to country rules.\n *      See https://en.wikipedia.org/wiki/Address\n *\n *      @param  Object\t\t$object\t\t\tA company or contact object\n * \t    @param\tint\t\t\t$withcountry\t1=Add country into address string\n *      @param\tstring\t\t$sep\t\t\tSeparator to use to build string\n *      @param\tTranslate\t$outputlangs\tObject lang that contains language for text translation.\n *      @param\tint\t\t\t$mode\t\t\t0=Standard output, 1=Remove address\n *  \t@param\tstring\t\t$extralangcode\tUser extralanguage $langcode as values for address, town\n *      @return string\t\t\t\t\t\tFormated string\n *      @see dol_print_address()\n */\nfunction dol_format_address($object, $withcountry = 0, $sep = \"\\n\", $outputlangs = '', $mode = 0, $extralangcode = '')\n{\n\tglobal $conf, $langs;\n\n\t$ret = '';\n\t$countriesusingstate = array('AU', 'CA', 'US', 'IN', 'GB', 'ES', 'UK', 'TR'); // See also MAIN_FORCE_STATE_INTO_ADDRESS\n\n\t// See format of addresses on https://en.wikipedia.org/wiki/Address\n\t// Address\n\tif (empty($mode)) {\n\t\t$ret .= ($extralangcode ? $object->array_languages['address'][$extralangcode] : $object->address);\n\t}\n\t// Zip/Town/State\n\tif (in_array($object->country_code, array('AU', 'CA', 'US')) || !empty($conf->global->MAIN_FORCE_STATE_INTO_ADDRESS))   \t// US: title firstname name \\n address lines \\n town, state, zip \\n country\n\t{\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($ret ? $sep : '').$town;\n\t\tif ($object->state)\n\t\t{\n\t\t\t$ret .= ($ret ? \", \" : '').$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ($ret ? \", \" : '').$object->zip;\n\t}\n\telseif (in_array($object->country_code, array('GB', 'UK'))) // UK: title firstname name \\n address lines \\n town state \\n zip \\n country\n\t{\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($ret ? $sep : '').$town;\n\t\tif ($object->state)\n\t\t{\n\t\t\t$ret .= ($ret ? \", \" : '').$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ($ret ? $sep : '').$object->zip;\n\t}\n\telseif (in_array($object->country_code, array('ES', 'TR'))) // ES: title firstname name \\n address lines \\n zip town \\n state \\n country\n\t{\n\t\t$ret .= ($ret ? $sep : '').$object->zip;\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($town ? (($object->zip ? ' ' : '').$town) : '');\n\t\tif ($object->state)\n\t\t{\n\t\t\t$ret .= \"\\n\".$object->state;\n\t\t}\n\t}\n\telseif (in_array($object->country_code, array('IT'))) // IT: tile firstname name\\n address lines \\n zip (Code Departement) \\n country\n\t{\n\t\t$ret .= ($ret ? $sep : '').$object->zip;\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= ($town ? (($object->zip ? ' ' : '').$town) : '');\n\t\t$ret .= ($object->state_code ? (' '.($object->state_code)) : '');\n\t}\n\telse                                        \t\t// Other: title firstname name \\n address lines \\n zip town \\n country\n\t{\n\t\t$town = ($extralangcode ? $object->array_languages['town'][$extralangcode] : $object->town);\n\t\t$ret .= $object->zip ? (($ret ? $sep : '').$object->zip) : '';\n\t\t$ret .= ($town ? (($object->zip ? ' ' : ($ret ? $sep : '')).$town) : '');\n\t\tif ($object->state && in_array($object->country_code, $countriesusingstate))\n\t\t{\n\t\t\t$ret .= ($ret ? \", \" : '').$object->state;\n\t\t}\n\t}\n\tif (!is_object($outputlangs)) $outputlangs = $langs;\n\tif ($withcountry)\n\t{\n\t\t$langs->load(\"dict\");\n\t\t$ret .= ($object->country_code ? ($ret ? $sep : '').$outputlangs->convToOutputCharset($outputlangs->transnoentitiesnoconv(\"Country\".$object->country_code)) : '');\n\t}\n\n\treturn $ret;\n}\n\n\n\n/**\n *\tFormat a string.\n *\n *\t@param\tstring\t$fmt\t\tFormat of strftime function (http://php.net/manual/fr/function.strftime.php)\n *  @param\tint\t\t$ts\t\t\tTimesamp (If is_gmt is true, timestamp is already includes timezone and daylight saving offset, if is_gmt is false, timestamp is a GMT timestamp and we must compensate with server PHP TZ)\n *  @param\tint\t\t$is_gmt\t\tSee comment of timestamp parameter\n *\t@return\tstring\t\t\t\tA formatted string\n */\nfunction dol_strftime($fmt, $ts = false, $is_gmt = false)\n{\n\tif ((abs($ts) <= 0x7FFFFFFF)) { // check if number in 32-bit signed range\n\t\treturn ($is_gmt) ? @gmstrftime($fmt, $ts) : @strftime($fmt, $ts);\n\t}\n\telse return 'Error date into a not supported range';\n}\n\n/**\n *\tOutput date in a string format according to outputlangs (or langs if not defined).\n * \tReturn charset is always UTF-8, except if encodetoouput is defined. In this case charset is output charset\n *\n *\t@param\tint\t\t\t$time\t\t\tGM Timestamps date\n *\t@param\tstring\t\t$format      \tOutput date format (tag of strftime function)\n *\t\t\t\t\t\t\t\t\t\t\"%d %b %Y\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M:%S\",\n *                                      \"%B\"=Long text of month, \"%A\"=Long text of day, \"%b\"=Short text of month, \"%a\"=Short text of day\n *\t\t\t\t\t\t\t\t\t\t\"day\", \"daytext\", \"dayhour\", \"dayhourldap\", \"dayhourtext\", \"dayrfc\", \"dayhourrfc\", \"...reduceformat\"\n * \t@param\tstring\t\t$tzoutput\t\ttrue or 'gmt' => string is for Greenwich location\n * \t\t\t\t\t\t\t\t\t\tfalse or 'tzserver' => output string is for local PHP server TZ usage\n * \t\t\t\t\t\t\t\t\t\t'tzuser' => output string is for user TZ (current browser TZ with current dst) => In a future, we should have same behaviour than 'tzuserrel'\n *                                      'tzuserrel' => output string is for user TZ (current browser TZ with dst or not, depending on date position) (TODO not implemented yet)\n *\t@param\tTranslate\t$outputlangs\tObject lang that contains language for text translation.\n *  @param  boolean\t\t$encodetooutput false=no convert into output pagecode\n * \t@return string      \t\t\t\tFormated date or '' if time is null\n *\n *  @see        dol_mktime(), dol_stringtotime(), dol_getdate()\n */\nfunction dol_print_date($time, $format = '', $tzoutput = 'tzserver', $outputlangs = '', $encodetooutput = false)\n{\n\tglobal $conf, $langs;\n\n\t// Clean parameters\n\t$to_gmt = false;\n\t$offsettz = $offsetdst = 0;\n\tif ($tzoutput)\n\t{\n\t\t$to_gmt = true; // For backward compatibility\n\t\tif (is_string($tzoutput))\n\t\t{\n\t\t\tif ($tzoutput == 'tzserver')\n\t\t\t{\n\t\t\t\t$to_gmt = false;\n\t\t\t\t$offsettzstring = @date_default_timezone_get(); // Example 'Europe/Berlin' or 'Indian/Reunion'\n\t\t\t\t$offsettz = 0;\n\t\t\t\t$offsetdst = 0;\n\t\t\t}\n\t\t\telseif ($tzoutput == 'tzuser' || $tzoutput == 'tzuserrel')\n\t\t\t{\n\t\t\t\t$to_gmt = true;\n\t\t\t\t$offsettzstring = (empty($_SESSION['dol_tz_string']) ? 'UTC' : $_SESSION['dol_tz_string']); // Example 'Europe/Berlin' or 'Indian/Reunion'\n\t\t\t\t$offsettz = (empty($_SESSION['dol_tz']) ? 0 : $_SESSION['dol_tz']) * 60 * 60; // Will not be used anymore\n\t\t\t\t$offsetdst = (empty($_SESSION['dol_dst']) ? 0 : $_SESSION['dol_dst']) * 60 * 60; // Will not be used anymore\n\t\t\t}\n\t\t}\n\t}\n\tif (!is_object($outputlangs)) $outputlangs = $langs;\n\tif (!$format) $format = 'daytextshort';\n\t$reduceformat = (!empty($conf->dol_optimize_smallscreen) && in_array($format, array('day', 'dayhour'))) ? 1 : 0;\n\t$formatwithoutreduce = preg_replace('/reduceformat/', '', $format);\n\tif ($formatwithoutreduce != $format) { $format = $formatwithoutreduce; $reduceformat = 1; }  // so format 'dayreduceformat' is processed like day\n\n\t// Change predefined format into computer format. If found translation in lang file we use it, otherwise we use default.\n\t// TODO Add format daysmallyear and dayhoursmallyear\n\tif ($format == 'day')\t\t\t\t$format = ($outputlangs->trans(\"FormatDateShort\") != \"FormatDateShort\" ? $outputlangs->trans(\"FormatDateShort\") : $conf->format_date_short);\n\telseif ($format == 'hour')\t\t\t$format = ($outputlangs->trans(\"FormatHourShort\") != \"FormatHourShort\" ? $outputlangs->trans(\"FormatHourShort\") : $conf->format_hour_short);\n\telseif ($format == 'hourduration')\t$format = ($outputlangs->trans(\"FormatHourShortDuration\") != \"FormatHourShortDuration\" ? $outputlangs->trans(\"FormatHourShortDuration\") : $conf->format_hour_short_duration);\n\telseif ($format == 'daytext')\t\t\t $format = ($outputlangs->trans(\"FormatDateText\") != \"FormatDateText\" ? $outputlangs->trans(\"FormatDateText\") : $conf->format_date_text);\n\telseif ($format == 'daytextshort')\t$format = ($outputlangs->trans(\"FormatDateTextShort\") != \"FormatDateTextShort\" ? $outputlangs->trans(\"FormatDateTextShort\") : $conf->format_date_text_short);\n\telseif ($format == 'dayhour')\t\t\t $format = ($outputlangs->trans(\"FormatDateHourShort\") != \"FormatDateHourShort\" ? $outputlangs->trans(\"FormatDateHourShort\") : $conf->format_date_hour_short);\n\telseif ($format == 'dayhoursec')\t\t $format = ($outputlangs->trans(\"FormatDateHourSecShort\") != \"FormatDateHourSecShort\" ? $outputlangs->trans(\"FormatDateHourSecShort\") : $conf->format_date_hour_sec_short);\n\telseif ($format == 'dayhourtext')\t\t $format = ($outputlangs->trans(\"FormatDateHourText\") != \"FormatDateHourText\" ? $outputlangs->trans(\"FormatDateHourText\") : $conf->format_date_hour_text);\n\telseif ($format == 'dayhourtextshort') $format = ($outputlangs->trans(\"FormatDateHourTextShort\") != \"FormatDateHourTextShort\" ? $outputlangs->trans(\"FormatDateHourTextShort\") : $conf->format_date_hour_text_short);\n\t// Format not sensitive to language\n\telseif ($format == 'dayhourlog')\t\t $format = '%Y%m%d%H%M%S';\n\telseif ($format == 'dayhourldap')\t\t $format = '%Y%m%d%H%M%SZ';\n\telseif ($format == 'dayhourxcard')\t$format = '%Y%m%dT%H%M%SZ';\n\telseif ($format == 'dayxcard')\t \t$format = '%Y%m%d';\n\telseif ($format == 'dayrfc')\t\t\t $format = '%Y-%m-%d'; // DATE_RFC3339\n\telseif ($format == 'dayhourrfc')\t\t $format = '%Y-%m-%dT%H:%M:%SZ'; // DATETIME RFC3339\n\telseif ($format == 'standard')\t\t$format = '%Y-%m-%d %H:%M:%S';\n\n\tif ($reduceformat)\n\t{\n\t\t$format = str_replace('%Y', '%y', $format);\n\t\t$format = str_replace('yyyy', 'yy', $format);\n\t}\n\n\t// If date undefined or \"\", we return \"\"\n\tif (dol_strlen($time) == 0) return ''; // $time=0 allowed (it means 01/01/1970 00:00:00)\n\n\t// Clean format\n\tif (preg_match('/%b/i', $format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format = str_replace('%b', '__b__', $format);\n\t\t$format = str_replace('%B', '__B__', $format);\n\t}\n\tif (preg_match('/%a/i', $format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format = str_replace('%a', '__a__', $format);\n\t\t$format = str_replace('%A', '__A__', $format);\n\t}\n\n\n\t// Analyze date\n\t$reg = array();\n\tif (preg_match('/^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])$/i', $time, $reg))\t// Deprecated. Ex: 1970-01-01, 1970-01-01 01:00:00, 19700101010000\n\t{\n\t    dol_print_error(\"Functions.lib::dol_print_date function called with a bad value from page \".$_SERVER[\"PHP_SELF\"]);\n\t    return '';\n\t}\n\telseif (preg_match('/^([0-9]+)\\-([0-9]+)\\-([0-9]+) ?([0-9]+)?:?([0-9]+)?:?([0-9]+)?/i', $time, $reg))    // Still available to solve problems in extrafields of type date\n\t{\n\t    // This part of code should not be used.\n\t    dol_syslog(\"Functions.lib::dol_print_date function called with a bad value from page \".$_SERVER[\"PHP_SELF\"], LOG_WARNING);\n\t    //if (function_exists('debug_print_backtrace')) debug_print_backtrace();\n\t    // Date has format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS'\n\t    $syear\t= (!empty($reg[1]) ? $reg[1] : '');\n\t    $smonth = (!empty($reg[2]) ? $reg[2] : '');\n\t    $sday\t= (!empty($reg[3]) ? $reg[3] : '');\n\t    $shour\t= (!empty($reg[4]) ? $reg[4] : '');\n\t    $smin\t= (!empty($reg[5]) ? $reg[5] : '');\n\t    $ssec\t= (!empty($reg[6]) ? $reg[6] : '');\n\n\t    $time = dol_mktime($shour, $smin, $ssec, $smonth, $sday, $syear, true);\n\t    $ret = adodb_strftime($format, $time + $offsettz + $offsetdst, $to_gmt);\n\t}\n\telse\n\t{\n\t\t// Date is a timestamps\n\t\tif ($time < 100000000000)\t// Protection against bad date values\n\t\t{\n\t\t\t$timetouse = $time + $offsettz + $offsetdst; // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\n\t\t\t$ret = adodb_strftime($format, $timetouse, $to_gmt);\n\t\t}\n\t\telse $ret = 'Bad value '.$time.' for date';\n\t}\n\n\tif (preg_match('/__b__/i', $format))\n\t{\n\t\t$timetouse = $time + $offsettz + $offsetdst; // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\n\t\t// Here ret is string in PHP setup language (strftime was used). Now we convert to $outputlangs.\n\t\t$month = adodb_strftime('%m', $timetouse);\n\t\t$month = sprintf(\"%02d\", $month); // $month may be return with format '06' on some installation and '6' on other, so we force it to '06'.\n\t\tif ($encodetooutput)\n\t\t{\n\t\t\t$monthtext = $outputlangs->transnoentities('Month'.$month);\n\t\t\t$monthtextshort = $outputlangs->transnoentities('MonthShort'.$month);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$monthtext = $outputlangs->transnoentitiesnoconv('Month'.$month);\n\t\t\t$monthtextshort = $outputlangs->transnoentitiesnoconv('MonthShort'.$month);\n\t\t}\n\t\t//print 'monthtext='.$monthtext.' monthtextshort='.$monthtextshort;\n\t\t$ret = str_replace('__b__', $monthtextshort, $ret);\n\t\t$ret = str_replace('__B__', $monthtext, $ret);\n\t\t//print 'x'.$outputlangs->charset_output.'-'.$ret.'x';\n\t\t//return $ret;\n\t}\n\tif (preg_match('/__a__/i', $format))\n\t{\n\t\t$timetouse = $time + $offsettz + $offsetdst; // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\n\t\t$w = adodb_strftime('%w', $timetouse); // TODO Replace this with function Date PHP. We also should not use anymore offsettz and offsetdst but only offsettzstring.\n\t\t$dayweek = $outputlangs->transnoentitiesnoconv('Day'.$w);\n\t\t$ret = str_replace('__A__', $dayweek, $ret);\n\t\t$ret = str_replace('__a__', dol_substr($dayweek, 0, 3), $ret);\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n *  Return an array with locale date info.\n *  PHP getdate is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *  WARNING: This function always use PHP server timezone to return locale informations !!!\n *  Usage must be avoid.\n *  FIXME: Replace this with PHP date function and a parameter $gm\n *\n *\t@param\tint\t\t\t$timestamp      Timestamp\n *\t@param\tboolean\t\t$fast           Fast mode\n *\t@return\tarray\t\t\t\t\t\tArray of informations\n *\t\t\t\t\t\t\t\t\t\tIf no fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'wday' => $dow,\t\t0=sunday, 6=saturday\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'weekday' => gmdate('l',$_day_power*(3+$dow)),\n *\t\t\t\t\t\t\t\t\t\t'month' => gmdate('F',mktime(0,0,0,$month,2,1971)),\n *\t\t\t\t\t\t\t\t\t\tIf fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'leap' => $leaf,\n *\t\t\t\t\t\t\t\t\t\t'ndays' => $ndays\n * \t@see \t\t\t\t\t\t\t\tdol_print_date(), dol_stringtotime(), dol_mktime()\n */\nfunction dol_getdate($timestamp, $fast = false)\n{\n\tglobal $conf;\n\n\t$usealternatemethod = false;\n\tif ($timestamp <= 0) $usealternatemethod = true; // <= 1970\n\tif ($timestamp >= 2145913200) $usealternatemethod = true; // >= 2038\n\n\tif ($usealternatemethod)\n\t{\n\t\t$arrayinfo = adodb_getdate($timestamp, $fast);\n\t}\n\telse\n\t{\n\t\t$arrayinfo = getdate($timestamp);\n\t}\n\n\treturn $arrayinfo;\n}\n\n/**\n *\tReturn a timestamp date built from detailed informations (by default a local PHP server timestamp)\n * \tReplace function mktime not available under Windows if year < 1970\n *\tPHP mktime is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *\n * \t@param\tint\t\t\t$hour\t\t\tHour\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$minute\t\t\tMinute\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$second\t\t\tSecond\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$month\t\t\tMonth (1 to 12)\n *\t@param\tint\t\t\t$day\t\t\tDay (1 to 31)\n *\t@param\tint\t\t\t$year\t\t\tYear\n *\t@param\tmixed\t\t$gm\t\t\t\tTrue or 1 or 'gmt'=Input informations are GMT values\n *\t\t\t\t\t\t\t\t\t\tFalse or 0 or 'server' = local to server TZ\n *\t\t\t\t\t\t\t\t\t\t'user' = local to user TZ\n *\t\t\t\t\t\t\t\t\t\t'tz,TimeZone' = use specified timezone\n *\t@param\tint\t\t\t$check\t\t\t0=No check on parameters (Can use day 32, etc...)\n *\t@return\tint|string\t\t\t\t\tDate as a timestamp, '' or false if error\n * \t@see \t\t\t\t\t\t\t\tdol_print_date(), dol_stringtotime(), dol_getdate()\n */\nfunction dol_mktime($hour, $minute, $second, $month, $day, $year, $gm = false, $check = 1)\n{\n\tglobal $conf;\n\t//print \"- \".$hour.\",\".$minute.\",\".$second.\",\".$month.\",\".$day.\",\".$year.\",\".$_SERVER[\"WINDIR\"].\" -\";\n\n\t// Clean parameters\n\tif ($hour == -1 || empty($hour)) $hour = 0;\n\tif ($minute == -1 || empty($minute)) $minute = 0;\n\tif ($second == -1 || empty($second)) $second = 0;\n\n\t// Check parameters\n\tif ($check)\n\t{\n\t\tif (!$month || !$day)  return '';\n\t\tif ($day > 31) return '';\n\t\tif ($month > 12) return '';\n\t\tif ($hour < 0 || $hour > 24) return '';\n\t\tif ($minute < 0 || $minute > 60) return '';\n\t\tif ($second < 0 || $second > 60) return '';\n\t}\n\n\tif (empty($gm) || $gm === 'server')\n\t{\n\t\t$default_timezone = @date_default_timezone_get(); // Example 'Europe/Berlin'\n\t\t$localtz = new DateTimeZone($default_timezone);\n\t}\n\telseif ($gm === 'user')\n\t{\n\t\t// We use dol_tz_string first because it is more reliable.\n\t\t$default_timezone = (empty($_SESSION[\"dol_tz_string\"]) ? @date_default_timezone_get() : $_SESSION[\"dol_tz_string\"]); // Example 'Europe/Berlin'\n\t\ttry {\n\t\t\t$localtz = new DateTimeZone($default_timezone);\n\t\t}\n\t\tcatch (Exception $e)\n\t\t{\n\t\t\tdol_syslog(\"Warning dol_tz_string contains an invalid value \".$_SESSION[\"dol_tz_string\"], LOG_WARNING);\n\t\t\t$default_timezone = @date_default_timezone_get();\n\t\t}\n\t}\n\telseif (strrpos($gm, \"tz,\") !== false)\n\t{\n\t\t$timezone = str_replace(\"tz,\", \"\", $gm); // Example 'tz,Europe/Berlin'\n\t\ttry\n\t\t{\n\t\t\t$localtz = new DateTimeZone($timezone);\n\t\t}\n\t\tcatch (Exception $e)\n\t\t{\n\t\t\tdol_syslog(\"Warning passed timezone contains an invalid value \".$timezone, LOG_WARNING);\n\t\t}\n\t}\n\n\tif (empty($localtz)) {\n\t\t$localtz = new DateTimeZone('UTC');\n\t}\n\t//var_dump($localtz);\n\t//var_dump($year.'-'.$month.'-'.$day.'-'.$hour.'-'.$minute);\n\t$dt = new DateTime(null, $localtz);\n\t$dt->setDate((int) $year, (int) $month, (int) $day);\n\t$dt->setTime((int) $hour, (int) $minute, (int) $second);\n\t$date = $dt->getTimestamp(); // should include daylight saving time\n\t//var_dump($date);\n\treturn $date;\n}\n\n\n/**\n *  Return date for now. In most cases, we use this function without parameters (that means GMT time).\n *\n *  @param\tstring\t\t$mode\t'gmt' => we return GMT timestamp,\n * \t\t\t\t\t\t\t\t'tzserver' => we add the PHP server timezone\n *  \t\t\t\t\t\t\t'tzref' => we add the company timezone\n * \t\t\t\t\t\t\t\t'tzuser' => we add the user timezone\n *\t@return int   $date\tTimestamp\n */\nfunction dol_now($mode = 'gmt')\n{\n\t$ret = 0;\n\n\tif ($mode == 'gmt') $ret = time(); // Time for now at greenwich.\n\telseif ($mode == 'tzserver')\t\t// Time for now with PHP server timezone added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond = getServerTimeZoneInt('now'); // Contains tz+dayling saving time\n\t\t$ret = (int) (dol_now('gmt') + ($tzsecond * 3600));\n\t}\n\t/*elseif ($mode == 'tzref')\t\t\t\t// Time for now with parent company timezone is added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond=getParentCompanyTimeZoneInt();    // Contains tz+dayling saving time\n\t\t$ret=dol_now('gmt')+($tzsecond*3600);\n\t}*/\n\telseif ($mode == 'tzuser')\t\t\t\t// Time for now with user timezone added\n\t{\n\t\t//print 'time: '.time();\n\t\t$offsettz = (empty($_SESSION['dol_tz']) ? 0 : $_SESSION['dol_tz']) * 60 * 60;\n\t\t$offsetdst = (empty($_SESSION['dol_dst']) ? 0 : $_SESSION['dol_dst']) * 60 * 60;\n\t\t$ret = (int) (dol_now('gmt') + ($offsettz + $offsetdst));\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n * Return string with formated size\n *\n * @param\tint\t\t$size\t\tSize to print\n * @param\tint\t\t$shortvalue\tTell if we want long value to use another unit (Ex: 1.5Kb instead of 1500b)\n * @param\tint\t\t$shortunit\tUse short label of size unit (for example 'b' instead of 'bytes')\n * @return\tstring\t\t\t\tLink\n */\nfunction dol_print_size($size, $shortvalue = 0, $shortunit = 0)\n{\n\tglobal $conf, $langs;\n\t$level = 1024;\n\n\tif (!empty($conf->dol_optimize_smallscreen)) $shortunit = 1;\n\n\t// Set value text\n\tif (empty($shortvalue) || $size < ($level * 10))\n\t{\n\t\t$ret = $size;\n\t\t$textunitshort = $langs->trans(\"b\");\n\t\t$textunitlong = $langs->trans(\"Bytes\");\n\t}\n\telse\n\t{\n\t\t$ret = round($size / $level, 0);\n\t\t$textunitshort = $langs->trans(\"Kb\");\n\t\t$textunitlong = $langs->trans(\"KiloBytes\");\n\t}\n\t// Use long or short text unit\n\tif (empty($shortunit)) { $ret .= ' '.$textunitlong; }\n\telse { $ret .= ' '.$textunitshort; }\n\n\treturn $ret;\n}\n\n/**\n * Show Url link\n *\n * @param\tstring\t\t$url\t\tUrl to show\n * @param\tstring\t\t$target\t\tTarget for link\n * @param\tint\t\t\t$max\t\tMax number of characters to show\n * @param\tint\t\t\t$withpicto\tWith picto\n * @return\tstring\t\t\t\t\tHTML Link\n */\nfunction dol_print_url($url, $target = '_blank', $max = 32, $withpicto = 0)\n{\n\tglobal $langs;\n\n\tif (empty($url)) return '';\n\n\t$link = '<a href=\"';\n\tif (!preg_match('/^http/i', $url)) $link .= 'http://';\n\t$link .= $url;\n\t$link .= '\"';\n\tif ($target) $link .= ' target=\"'.$target.'\"';\n\t$link .= '>';\n\tif (!preg_match('/^http/i', $url)) $link .= 'http://';\n\t$link .= dol_trunc($url, $max);\n\t$link .= '</a>';\n\treturn '<div class=\"nospan float\" style=\"margin-right: 10px\">'.($withpicto ?img_picto($langs->trans(\"Url\"), 'globe').' ' : '').$link.'</div>';\n}\n\n/**\n * Show EMail link\n *\n * @param\tstring\t\t$email\t\t\tEMail to show (only email, without 'Name of recipient' before)\n * @param \tint\t\t\t$cid \t\t\tId of contact if known\n * @param \tint\t\t\t$socid \t\t\tId of third party if known\n * @param \tint\t\t\t$addlink\t\t0=no link, 1=email has a html email link (+ link to create action if constant AGENDA_ADDACTIONFOREMAIL is on)\n * @param\tint\t\t\t$max\t\t\tMax number of characters to show\n * @param\tint\t\t\t$showinvalid\t1=Show warning if syntax email is wrong\n * @param\tint\t\t\t$withpicto\t\tShow picto\n * @return\tstring\t\t\t\t\t\tHTML Link\n */\nfunction dol_print_email($email, $cid = 0, $socid = 0, $addlink = 0, $max = 64, $showinvalid = 1, $withpicto = 0)\n{\n\tglobal $conf, $user, $langs, $hookmanager;\n\n\t$newemail = $email;\n\n\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && $withpicto) $withpicto = 0;\n\n\tif (empty($email)) return '&nbsp;';\n\n\tif (!empty($addlink))\n\t{\n\t\t$newemail = '<a style=\"text-overflow: ellipsis;\" href=\"';\n\t\tif (!preg_match('/^mailto:/i', $email)) $newemail .= 'mailto:';\n\t\t$newemail .= $email;\n\t\t$newemail .= '\">';\n\t\t$newemail .= dol_trunc($email, $max);\n\t\t$newemail .= '</a>';\n\t\tif ($showinvalid && !isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail .= img_warning($langs->trans(\"ErrorBadEMail\", $email));\n\t\t}\n\n\t\tif (($cid || $socid) && !empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type = 'AC_EMAIL'; $link = '';\n\t\t\tif (!empty($conf->global->AGENDA_ADDACTIONFOREMAIL)) $link = '<a href=\"'.DOL_URL_ROOT.'/comm/action/card.php?action=create&amp;backtopage=1&amp;actioncode='.$type.'&amp;contactid='.$cid.'&amp;socid='.$socid.'\">'.img_object($langs->trans(\"AddAction\"), \"calendar\").'</a>';\n\t\t\tif ($link) $newemail = '<div>'.$newemail.' '.$link.'</div>';\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($showinvalid && !isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail .= img_warning($langs->trans(\"ErrorBadEMail\", $email));\n\t\t}\n\t}\n\n\t//$rep = '<div class=\"nospan\" style=\"margin-right: 10px\">';\n\t$rep = ($withpicto ? img_picto($langs->trans(\"EMail\").' : '.$email, 'object_email.png').' ' : '').$newemail;\n\t//$rep .= '</div>';\n\tif ($hookmanager) {\n\t\t$parameters = array('cid' => $cid, 'socid' => $socid, 'addlink' => $addlink, 'picto' => $withpicto);\n\t\t$reshook = $hookmanager->executeHooks('printEmail', $parameters, $email);\n\t\tif ($reshook > 0) {\n\t\t\t$rep = '';\n\t\t}\n\t\t$rep .= $hookmanager->resPrint;\n\t}\n\n\treturn $rep;\n}\n\n/**\n * Get array of social network dictionary\n *\n * @return  array       Array of Social Networks Dictionary\n */\nfunction getArrayOfSocialNetworks()\n{\n    global $conf, $db;\n    $sql = \"SELECT rowid, code, label, url, icon, active FROM \".MAIN_DB_PREFIX.\"c_socialnetworks\";\n    $sql .= \" WHERE entity=\".$conf->entity;\n    $socialnetworks = array();\n    $resql = $db->query($sql);\n    if ($resql) {\n        while ($obj = $db->fetch_object($resql)) {\n            $socialnetworks[$obj->code] = array(\n                'rowid' => $obj->rowid,\n                'label' => $obj->label,\n                'url' => $obj->url,\n                'icon' => $obj->icon,\n                'active' => $obj->active,\n            );\n        }\n    }\n    return $socialnetworks;\n}\n\n/**\n * Show social network link\n *\n * @param\tstring\t\t$value\t\t\tSkype to show (only skype, without 'Name of recipient' before)\n * @param\tint \t\t$cid \t\t\tId of contact if known\n * @param\tint \t\t$socid \t\t\tId of third party if known\n * @param\tstring \t\t$type\t\t\t'skype','facebook',...\n * @return\tstring\t\t\t\t\t\tHTML Link\n */\nfunction dol_print_socialnetworks($value, $cid, $socid, $type)\n{\n\tglobal $conf, $user, $langs;\n\n\t$htmllink = $value;\n\n\tif (empty($value)) return '&nbsp;';\n\n\tif (!empty($type))\n\t{\n\t\t$htmllink = '<div class=\"divsocialnetwork inline-block valignmiddle\">';\n\t\t$htmllink .= img_picto($langs->trans(strtoupper($type)), $type.'.png', '', false, 0, 0, '', 'paddingright', 0);\n\t\t$htmllink .= $value;\n\t\tif ($type == 'skype')\n\t\t{\n\t\t\t$htmllink .= '&nbsp;';\n\t\t\t$htmllink .= '<a href=\"skype:';\n\t\t\t$htmllink .= $value;\n\t\t\t$htmllink .= '?call\" alt=\"'.$langs->trans(\"Call\").'&nbsp;'.$value.'\" title=\"'.$langs->trans(\"Call\").'&nbsp;'.$value.'\">';\n\t\t\t$htmllink .= '<img src=\"'.DOL_URL_ROOT.'/theme/common/skype_callbutton.png\" border=\"0\">';\n\t\t\t$htmllink .= '</a><a href=\"skype:';\n\t\t\t$htmllink .= $value;\n\t\t\t$htmllink .= '?chat\" alt=\"'.$langs->trans(\"Chat\").'&nbsp;'.$value.'\" title=\"'.$langs->trans(\"Chat\").'&nbsp;'.$value.'\">';\n\t\t\t$htmllink .= '<img class=\"paddingleft\" src=\"'.DOL_URL_ROOT.'/theme/common/skype_chatbutton.png\" border=\"0\">';\n\t\t\t$htmllink .= '</a>';\n\t\t}\n\t\tif (($cid || $socid) && !empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create && $type == 'skype')\n\t\t{\n\t\t\t$addlink = 'AC_SKYPE';\n\t\t\t$link = '';\n\t\t\tif (!empty($conf->global->AGENDA_ADDACTIONFORSKYPE)) $link = '<a href=\"'.DOL_URL_ROOT.'/comm/action/card.php?action=create&amp;backtopage=1&amp;actioncode='.$addlink.'&amp;contactid='.$cid.'&amp;socid='.$socid.'\">'.img_object($langs->trans(\"AddAction\"), \"calendar\").'</a>';\n\t\t\t$htmllink .= ($link ? ' '.$link : '');\n\t\t}\n\t\t$htmllink .= '</div>';\n\t}\n\telse\n\t{\n\t\t$langs->load(\"errors\");\n\t\t$htmllink .= img_warning($langs->trans(\"ErrorBadSocialNetworkValue\", $value));\n\t}\n\treturn $htmllink;\n}\n\n/**\n * \tFormat phone numbers according to country\n *\n * \t@param  string  $phone          Phone number to format\n * \t@param  string  $countrycode    Country code to use for formatting\n * \t@param \tint\t\t$cid \t\t    Id of contact if known\n * \t@param \tint\t\t$socid          Id of third party if known\n * \t@param \tstring\t$addlink\t    ''=no link to create action, 'AC_TEL'=add link to clicktodial (if module enabled) and add link to create event (if conf->global->AGENDA_ADDACTIONFORPHONE set)\n * \t@param \tstring\t$separ \t\t    Separation between numbers for a better visibility example : xx.xx.xx.xx.xx\n *  @param\tstring  $withpicto      Show picto\n *  @param\tstring\t$titlealt\t    Text to show on alt\n *  @param  int     $adddivfloat    Add div float around phone.\n * \t@return string \t\t\t\t    Formated phone number\n */\nfunction dol_print_phone($phone, $countrycode = '', $cid = 0, $socid = 0, $addlink = '', $separ = \"&nbsp;\", $withpicto = '', $titlealt = '', $adddivfloat = 0)\n{\n\tglobal $conf, $user, $langs, $mysoc, $hookmanager;\n\n\t// Clean phone parameter\n\t$phone = preg_replace(\"/[\\s.-]/\", \"\", trim($phone));\n\tif (empty($phone)) { return ''; }\n\tif ($conf->global->MAIN_PHONE_SEPAR) $separ = $conf->global->MAIN_PHONE_SEPAR;\n\tif (empty($countrycode)) $countrycode = $mysoc->country_code;\n\n\t// Short format for small screens\n\tif ($conf->dol_optimize_smallscreen) $separ = '';\n\n\t$newphone = $phone;\n\tif (strtoupper($countrycode) == \"FR\")\n\t{\n\t\t// France\n\t\tif (dol_strlen($phone) == 10) {\n\t\t\t$newphone = substr($newphone, 0, 2).$separ.substr($newphone, 2, 2).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 7)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 9)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 2).$separ.substr($newphone, 2, 3).$separ.substr($newphone, 5, 2).$separ.substr($newphone, 7, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 11)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 2).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\n\telseif (strtoupper($countrycode) == \"CA\")\n\t{\n\t\tif (dol_strlen($phone) == 10) {\n\t\t\t$newphone = ($separ != '' ? '(' : '').substr($newphone, 0, 3).($separ != '' ? ')' : '').$separ.substr($newphone, 3, 3).($separ != '' ? '-' : '').substr($newphone, 6, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"PT\")\n\t{//Portugal\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +351_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"SR\")\n\t{//Suriname\n\t\tif (dol_strlen($phone) == 10)\n\t\t{//ex: +597_ABC_DEF\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 11)\n\t\t{//ex: +597_ABC_DEFG\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"DE\")\n\t{//Allemagne\n\t\tif (dol_strlen($phone) == 14)\n\t\t{//ex:  +49_ABCD_EFGH_IJK\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 4).$separ.substr($newphone, 7, 4).$separ.substr($newphone, 11, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +49_ABC_DEFG_HIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 4).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"ES\")\n\t{//Espagne\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex:  +34_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"BF\")\n\t{// Burkina Faso\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex :  +22 A BC_DE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 1).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"RO\")\n\t{// Roumanie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex :  +40 AB_CDE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"TR\")\n\t{//Turquie\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex :  +90 ABC_DEF_GHIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"US\")\n\t{//Etat-Unis\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +1 ABC_DEF_GHIJ\n\t\t\t$newphone = substr($newphone, 0, 2).$separ.substr($newphone, 2, 3).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MX\")\n\t{//Mexique\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +52 ABCD_EFG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 4).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 11)\n\t\t{//ex: +52 AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 2).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +52 ABC_DEF_GHIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"ML\")\n\t{//Mali\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +223 AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"TH\")\n\t{//Tha\u00eflande\n\t\tif (dol_strlen($phone) == 11)\n\t\t{//ex: +66_ABC_DE_FGH\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{//ex: +66_A_BCD_EF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 1).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MU\")\n\t{\n        //Maurice\n\t\tif (dol_strlen($phone) == 11)\n\t\t{//ex: +230_ABC_DE_FG\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{//ex: +230_ABCD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 4).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"ZA\")\n\t{//Afrique du sud\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +27_AB_CDE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"SY\")\n\t{//Syrie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +963_AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +963_AB_CD_EF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"AE\")\n\t{//Emirats Arabes Unis\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +971_ABC_DEF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +971_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 14)\n\t\t{//ex: +971_ABC_DEF_GHIK\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"DZ\")\n\t{//Alg\u00e9rie\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +213_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"BE\")\n\t{//Belgique\n\t\tif (dol_strlen($phone) == 11)\n\t\t{//ex: +32_ABC_DE_FGH\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 12)\n\t\t{//ex: +32_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"PF\")\n\t{//Polyn\u00e9sie fran\u00e7aise\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +689_AB_CD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"CO\")\n\t{//Colombie\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +57_ABC_DEF_GH_IJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"JO\")\n\t{//Jordanie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +962_A_BCD_EF_GH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 1).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"JM\")\n\t{//Jama\u00efque\n\t\tif (dol_strlen($newphone) == 12)\n\t\t{//ex: +1867_ABC_DEFG\n\t\t\t$newphone = substr($newphone, 0, 5).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MG\")\n\t{//Madagascar\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +261_AB_CD_EF_GHI\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 2).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"GB\")\n\t{//Royaume uni\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +44_ABCD_EFG_HIJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 4).$separ.substr($newphone, 7, 3).$separ.substr($newphone, 10, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"CH\")\n\t{//Suisse\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +41_AB_CDE_FG_HI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 2).$separ.substr($newphone, 10, 2);\n\t\t}\n\t\telseif (dol_strlen($phone) == 15)\n\t\t{// +41_AB_CDE_FGH_IJKL\n\t\t\t$newphone = $newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 2).$separ.substr($newphone, 5, 3).$separ.substr($newphone, 8, 3).$separ.substr($newphone, 11, 4);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"TN\")\n\t{//Tunisie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +216_AB_CDE_FGH\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 2).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"GF\")\n\t{//Guyane francaise\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +594_ABC_DE_FG_HI  (ABC=594 de nouveau)\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"GP\")\n\t{//Guadeloupe\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +590_ABC_DE_FG_HI  (ABC=590 de nouveau)\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"MQ\")\n\t{//Martinique\n\t\tif (dol_strlen($phone) == 13)\n\t\t{//ex: +596_ABC_DE_FG_HI  (ABC=596 de nouveau)\n\t\t\t$newphone = substr($newphone, 0, 4).$separ.substr($newphone, 4, 3).$separ.substr($newphone, 7, 2).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"IT\")\n\t{//Italie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{//ex: +39_ABC_DEF_GHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 3);\n\t\t}\n\t\telseif (dol_strlen($phone) == 13)\n\t\t{//ex: +39_ABC_DEF_GH_IJ\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 3).$separ.substr($newphone, 6, 3).$separ.substr($newphone, 9, 2).$separ.substr($newphone, 11, 2);\n\t\t}\n\t}\n\telseif (strtoupper($countrycode) == \"AU\")\n\t{\n        //Australie\n\t\tif (dol_strlen($phone) == 12)\n\t\t{\n            //ex: +61_A_BCDE_FGHI\n\t\t\t$newphone = substr($newphone, 0, 3).$separ.substr($newphone, 3, 1).$separ.substr($newphone, 4, 4).$separ.substr($newphone, 8, 4);\n\t\t}\n\t}\n\tif (!empty($addlink))\t// Link on phone number (+ link to add action if conf->global->AGENDA_ADDACTIONFORPHONE set)\n\t{\n\t\tif ($conf->browser->layout == 'phone' || (!empty($conf->clicktodial->enabled) && !empty($conf->global->CLICKTODIAL_USE_TEL_LINK_ON_PHONE_NUMBERS)))\t// If phone or option for, we use link of phone\n\t\t{\n\t\t\t$newphoneform = $newphone;\n\t\t\t$newphone = '<a href=\"tel:'.$phone.'\"';\n\t\t\t$newphone .= '>'.$newphoneform.'</a>';\n\t\t}\n\t\telseif (!empty($conf->clicktodial->enabled) && $addlink == 'AC_TEL')\t\t// If click to dial, we use click to dial url\n\t\t{\n\t\t\tif (empty($user->clicktodial_loaded)) $user->fetch_clicktodial();\n\n\t\t\t// Define urlmask\n\t\t\t$urlmask = 'ErrorClickToDialModuleNotConfigured';\n\t\t\tif (!empty($conf->global->CLICKTODIAL_URL)) $urlmask = $conf->global->CLICKTODIAL_URL;\n\t\t\tif (!empty($user->clicktodial_url)) $urlmask = $user->clicktodial_url;\n\n\t\t\t$clicktodial_poste = (!empty($user->clicktodial_poste) ?urlencode($user->clicktodial_poste) : '');\n\t\t\t$clicktodial_login = (!empty($user->clicktodial_login) ?urlencode($user->clicktodial_login) : '');\n\t\t\t$clicktodial_password = (!empty($user->clicktodial_password) ?urlencode($user->clicktodial_password) : '');\n\t\t\t// This line is for backward compatibility\n\t\t\t$url = sprintf($urlmask, urlencode($phone), $clicktodial_poste, $clicktodial_login, $clicktodial_password);\n\t\t\t// Thoose lines are for substitution\n\t\t\t$substitarray = array('__PHONEFROM__'=>$clicktodial_poste,\n\t\t\t\t\t\t\t\t'__PHONETO__'=>urlencode($phone),\n\t\t\t\t\t\t\t\t'__LOGIN__'=>$clicktodial_login,\n\t\t\t\t\t\t\t\t'__PASS__'=>$clicktodial_password);\n\t\t\t$url = make_substitutions($url, $substitarray);\n\t\t\t$newphonesav = $newphone;\n\t\t\t$newphone = '<a href=\"'.$url.'\"';\n\t\t\tif (!empty($conf->global->CLICKTODIAL_FORCENEWTARGET)) $newphone .= ' target=\"_blank\"';\n\t\t\t$newphone .= '>'.$newphonesav.'</a>';\n\t\t}\n\n\t\t//if (($cid || $socid) && ! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\tif (!empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type = 'AC_TEL'; $link = '';\n\t\t\tif ($addlink == 'AC_FAX') $type = 'AC_FAX';\n\t\t\tif (!empty($conf->global->AGENDA_ADDACTIONFORPHONE)) $link = '<a href=\"'.DOL_URL_ROOT.'/comm/action/card.php?action=create&amp;backtopage=1&amp;actioncode='.$type.($cid ? '&amp;contactid='.$cid : '').($socid ? '&amp;socid='.$socid : '').'\">'.img_object($langs->trans(\"AddAction\"), \"calendar\").'</a>';\n\t\t\tif ($link) $newphone = '<div>'.$newphone.' '.$link.'</div>';\n\t\t}\n\t}\n\n\tif (empty($titlealt))\n\t{\n\t\t$titlealt = ($withpicto == 'fax' ? $langs->trans(\"Fax\") : $langs->trans(\"Phone\"));\n\t}\n\t$rep = '';\n\n\tif ($hookmanager) {\n\t\t$parameters = array('countrycode' => $countrycode, 'cid' => $cid, 'socid' => $socid, 'titlealt' => $titlealt, 'picto' => $withpicto);\n\t\t$reshook = $hookmanager->executeHooks('printPhone', $parameters, $phone);\n\t\t$rep .= $hookmanager->resPrint;\n\t}\n\tif (empty($reshook))\n\t{\n\t\t$picto = '';\n\t\tif ($withpicto) {\n\t\t\tif ($withpicto == 'fax') {\n\t\t\t\t$picto = 'phoning_fax';\n\t\t\t}elseif ($withpicto == 'phone') {\n\t\t\t\t$picto = 'phoning';\n\t\t\t}elseif ($withpicto == 'mobile') {\n\t\t\t\t$picto = 'phoning_mobile';\n\t\t\t} else {\n\t\t\t\t$picto = '';\n\t\t\t}\n\t\t}\n\t\tif ($adddivfloat) $rep .= '<div class=\"nospan float\" style=\"margin-right: 10px\">';\n\t\telse $rep .= '<span style=\"margin-right: 10px;\">';\n\t\t$rep .= ($withpicto ?img_picto($titlealt, 'object_'.$picto.'.png').' ' : '').$newphone;\n\t\tif ($adddivfloat) $rep .= '</div>';\n\t\telse $rep .= '</span>';\n\t}\n\n\treturn $rep;\n}\n\n/**\n * \tReturn an IP formated to be shown on screen\n *\n * \t@param\tstring\t$ip\t\t\tIP\n * \t@param\tint\t\t$mode\t\t0=return IP + country/flag, 1=return only country/flag, 2=return only IP\n * \t@return string \t\t\t\tFormated IP, with country if GeoIP module is enabled\n */\nfunction dol_print_ip($ip, $mode = 0)\n{\n\tglobal $conf, $langs;\n\n\t$ret = '';\n\n\tif (empty($mode)) $ret .= $ip;\n\n\tif ($mode != 2)\n\t{\n\t\t$countrycode = dolGetCountryCodeFromIp($ip);\n\t\tif ($countrycode)\t// If success, countrycode is us, fr, ...\n\t\t{\n\t\t\tif (file_exists(DOL_DOCUMENT_ROOT.'/theme/common/flags/'.$countrycode.'.png'))\n\t\t\t{\n\t\t\t\t$ret .= ' '.img_picto($countrycode.' '.$langs->trans(\"AccordingToGeoIPDatabase\"), DOL_URL_ROOT.'/theme/common/flags/'.$countrycode.'.png', '', 1);\n\t\t\t}\n\t\t\telse $ret .= ' ('.$countrycode.')';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nothing\n\t\t}\n\t}\n\n\treturn $ret;\n}\n\n/**\n * Return the IP of remote user.\n * Take HTTP_X_FORWARDED_FOR (defined when using proxy)\n * Then HTTP_CLIENT_IP if defined (rare)\n * Then REMOTE_ADDR (no way to be modified by user but may be wrong if user is using a proxy)\n *\n * @return\tstring\t\tIp of remote user.\n */\nfunction getUserRemoteIP()\n{\n\t$ip = empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? (empty($_SERVER['HTTP_CLIENT_IP']) ? (empty($_SERVER['REMOTE_ADDR']) ? '' : $_SERVER['REMOTE_ADDR']) : $_SERVER['HTTP_CLIENT_IP']) : $_SERVER['HTTP_X_FORWARDED_FOR'];\n\treturn $ip;\n}\n\n/**\n * \tReturn a country code from IP. Empty string if not found.\n *\n * \t@param\tstring\t$ip\t\t\tIP\n * \t@return string \t\t\t\tCountry code ('us', 'fr', ...)\n */\nfunction dolGetCountryCodeFromIp($ip)\n{\n\tglobal $conf;\n\n\t$countrycode = '';\n\n\tif (!empty($conf->geoipmaxmind->enabled))\n\t{\n\t\t$datafile = $conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='/usr/share/GeoIP/GeoIP.dat';    Note that this must be downloaded datafile (not same than datafile provided with ubuntu packages)\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip = new DolGeoIP('country', $datafile);\n\t\t//print 'ip='.$ip.' databaseType='.$geoip->gi->databaseType.\" GEOIP_CITY_EDITION_REV1=\".GEOIP_CITY_EDITION_REV1.\"\\n\";\n\t\t$countrycode = $geoip->getCountryCodeFromIP($ip);\n\t}\n\n\treturn $countrycode;\n}\n\n\n/**\n *  Return country code for current user.\n *  If software is used inside a local network, detection may fails (we need a public ip)\n *\n *  @return     string      Country code (fr, es, it, us, ...)\n */\nfunction dol_user_country()\n{\n\tglobal $conf, $langs, $user;\n\n\t//$ret=$user->xxx;\n\t$ret = '';\n\tif (!empty($conf->geoipmaxmind->enabled))\n\t{\n\t\t$ip = getUserRemoteIP();\n\t\t$datafile = $conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='E:\\Mes Sites\\Web\\Admin1\\awstats\\maxmind\\GeoIP.dat';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip = new DolGeoIP('country', $datafile);\n\t\t$countrycode = $geoip->getCountryCodeFromIP($ip);\n\t\t$ret = $countrycode;\n\t}\n\treturn $ret;\n}\n\n/**\n *  Format address string\n *\n *  @param\tstring\t$address    Address string, already formatted with dol_format_address()\n *  @param  int\t\t$htmlid     Html ID (for example 'gmap')\n *  @param  int\t\t$element    'thirdparty'|'contact'|'member'|'other'\n *  @param  int\t\t$id         Id of object\n *  @param\tint\t\t$noprint\tNo output. Result is the function return\n *  @param  string  $charfornl  Char to use instead of nl2br. '' means we use a standad nl2br.\n *  @return string|void\t\t\tNothing if noprint is 0, formatted address if noprint is 1\n *  @see dol_format_address()\n */\nfunction dol_print_address($address, $htmlid, $element, $id, $noprint = 0, $charfornl = '')\n{\n\tglobal $conf, $user, $langs, $hookmanager;\n\n\t$out = '';\n\n\tif ($address)\n\t{\n\t\tif ($hookmanager) {\n\t\t\t$parameters = array('element' => $element, 'id' => $id);\n\t\t\t$reshook = $hookmanager->executeHooks('printAddress', $parameters, $address);\n\t\t\t$out .= $hookmanager->resPrint;\n\t\t}\n\t\tif (empty($reshook))\n\t\t{\n\t\t\tif (empty($charfornl)) $out .= nl2br($address);\n\t\t\telse $out .= preg_replace('/[\\r\\n]+/', $charfornl, $address);\n\n\t\t\t// TODO Remove this block, we can add this using the hook now\n\t\t\t$showgmap = $showomap = 0;\n\t\t\tif (($element == 'thirdparty' || $element == 'societe') && !empty($conf->google->enabled) && !empty($conf->global->GOOGLE_ENABLE_GMAPS)) $showgmap = 1;\n\t\t\tif ($element == 'contact' && !empty($conf->google->enabled) && !empty($conf->global->GOOGLE_ENABLE_GMAPS_CONTACTS)) $showgmap = 1;\n\t\t\tif ($element == 'member' && !empty($conf->google->enabled) && !empty($conf->global->GOOGLE_ENABLE_GMAPS_MEMBERS)) $showgmap = 1;\n\t\t\tif (($element == 'thirdparty' || $element == 'societe') && !empty($conf->openstreetmap->enabled) && !empty($conf->global->OPENSTREETMAP_ENABLE_MAPS)) $showomap = 1;\n\t\t\tif ($element == 'contact' && !empty($conf->openstreetmap->enabled) && !empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_CONTACTS)) $showomap = 1;\n\t\t\tif ($element == 'member' && !empty($conf->openstreetmap->enabled) && !empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_MEMBERS)) $showomap = 1;\n\t\t\tif ($showgmap)\n\t\t\t{\n\t\t\t\t$url = dol_buildpath('/google/gmaps.php?mode='.$element.'&id='.$id, 1);\n\t\t\t\t$out .= ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'\" class=\"valigntextbottom\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t\t}\n\t\t\tif ($showomap)\n\t\t\t{\n\t\t\t\t$url = dol_buildpath('/openstreetmap/maps.php?mode='.$element.'&id='.$id, 1);\n\t\t\t\t$out .= ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'_openstreetmap\" class=\"valigntextbottom\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t\t}\n\t\t}\n\t}\n\tif ($noprint) return $out;\n\telse print $out;\n}\n\n\n/**\n *\tReturn true if email syntax is ok\n *\n *\t@param\t    string\t\t$address    \t\t\temail (Ex: \"toto@examle.com\", \"John Do <johndo@example.com>\")\n *  @param\t\tint\t\t\t$acceptsupervisorkey\tIf 1, the special string '__SUPERVISOREMAIL__' is also accepted as valid\n *\t@return     boolean     \t\t\t\t\t\ttrue if email syntax is OK, false if KO or empty string\n */\nfunction isValidEmail($address, $acceptsupervisorkey = 0)\n{\n\tif ($acceptsupervisorkey && $address == '__SUPERVISOREMAIL__') return true;\n\tif (filter_var($address, FILTER_VALIDATE_EMAIL)) return true;\n\n\treturn false;\n}\n\n/**\n *\tReturn if the domain name has a valid MX record.\n *  WARNING: This need function idn_to_ascii, checkdnsrr and getmxrr\n *\n *\t@param\t    string\t\t$domain\t    \t\t\tDomain name (Ex: \"yahoo.com\", \"yhaoo.com\", \"dolibarr.fr\")\n *\t@return     int     \t\t\t\t\t\t\t-1 if error (function not available), 0=Not valid, 1=Valid\n */\nfunction isValidMXRecord($domain)\n{\n\tif (function_exists('idn_to_ascii') && function_exists('checkdnsrr'))\n\t{\n\t\tif (!checkdnsrr(idn_to_ascii($domain), 'MX'))\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tif (function_exists('getmxrr'))\n\t\t{\n\t\t\t$mxhosts = array();\n\t\t\t$weight = array();\n\t\t\tgetmxrr(idn_to_ascii($domain), $mxhosts, $weight);\n\t\t\tif (count($mxhosts) > 1) return 1;\n\t\t\tif (count($mxhosts) == 1 && !empty($mxhosts[0])) return 1;\n\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n *  Return true if phone number syntax is ok\n *  TODO Decide what to do with this\n *\n *  @param\tstring\t\t$phone\t\tphone (Ex: \"0601010101\")\n *  @return boolean     \t\t\ttrue if phone syntax is OK, false if KO or empty string\n */\nfunction isValidPhone($phone)\n{\n\treturn true;\n}\n\n\n/**\n * Make a strlen call. Works even if mbstring module not enabled\n *\n * @param   string\t\t$string\t\t\t\tString to calculate length\n * @param   string\t\t$stringencoding\t\tEncoding of string\n * @return  int\t\t\t\t\t\t\t\tLength of string\n */\nfunction dol_strlen($string, $stringencoding = 'UTF-8')\n{\n\tif (function_exists('mb_strlen')) return mb_strlen($string, $stringencoding);\n\telse return strlen($string);\n}\n\n/**\n * Make a substring. Works even if mbstring module is not enabled for better compatibility.\n *\n * @param\tstring\t$string\t\t\t\tString to scan\n * @param\tstring\t$start\t\t\t\tStart position\n * @param\tint\t\t$length\t\t\t\tLength (in nb of characters or nb of bytes depending on trunconbytes param)\n * @param   string\t$stringencoding\t\tPage code used for input string encoding\n * @param\tint\t\t$trunconbytes\t\t1=Length is max of bytes instead of max of characters\n * @return  string\t\t\t\t\t\tsubstring\n */\nfunction dol_substr($string, $start, $length, $stringencoding = '', $trunconbytes = 0)\n{\n\tglobal $langs;\n\n\tif (empty($stringencoding)) $stringencoding = $langs->charset_output;\n\n\t$ret = '';\n\tif (empty($trunconbytes))\n\t{\n\t\tif (function_exists('mb_substr'))\n\t\t{\n\t\t\t$ret = mb_substr($string, $start, $length, $stringencoding);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = substr($string, $start, $length);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (function_exists('mb_strcut'))\n\t\t{\n\t\t\t$ret = mb_strcut($string, $start, $length, $stringencoding);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = substr($string, $start, $length);\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\n/**\n *\tTruncate a string to a particular length adding '...' if string larger than length.\n * \tIf length = max length+1, we do no truncate to avoid having just 1 char replaced with '...'.\n *  MAIN_DISABLE_TRUNC=1 can disable all truncings\n *\n *\t@param\tstring\t$string\t\t\t\tString to truncate\n *\t@param  int\t\t$size\t\t\t\tMax string size visible (excluding ...). 0 for no limit. WARNING: Final string size can have 3 more chars (if we added ..., or if size was max+1 or max+2 or max+3 so it does not worse to replace with ...)\n *\t@param\tstring\t$trunc\t\t\t\tWhere to trunc: right, left, middle (size must be a 2 power), wrap\n * \t@param\tstring\t$stringencoding\t\tTell what is source string encoding\n *  @param\tint\t\t$nodot\t\t\t\tTruncation do not add ... after truncation. So it's an exact truncation.\n *  @param  int     $display            Trunc is used to display data and can be changed for small screen. TODO Remove this param (must be dealt with CSS)\n *\t@return string\t\t\t\t\t\tTruncated string. WARNING: length is never higher than $size if $nodot is set, but can be 3 chars higher otherwise.\n */\nfunction dol_trunc($string, $size = 40, $trunc = 'right', $stringencoding = 'UTF-8', $nodot = 0, $display = 0)\n{\n\tglobal $conf;\n\n\tif ($size == 0 || !empty($conf->global->MAIN_DISABLE_TRUNC)) return $string;\n\n\tif (empty($stringencoding)) $stringencoding = 'UTF-8';\n\t// reduce for small screen\n\tif ($conf->dol_optimize_smallscreen == 1 && $display == 1) $size = round($size / 3);\n\n\t// We go always here\n\tif ($trunc == 'right')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > ($size + ($nodot ? 0 : 3)))    // If nodot is 0 and size is 1,2 or 3 chars more, we don't trunc and don't add ...\n\t\treturn dol_substr($newstring, 0, $size, $stringencoding).($nodot ? '' : '...');\n\t\telse\n\t\t//return 'u'.$size.'-'.$newstring.'-'.dol_strlen($newstring,$stringencoding).'-'.$string;\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'middle')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > 2 && dol_strlen($newstring, $stringencoding) > ($size + 1))\n\t\t{\n\t\t\t$size1 = round($size / 2);\n\t\t\t$size2 = round($size / 2);\n\t\t\treturn dol_substr($newstring, 0, $size1, $stringencoding).'...'.dol_substr($newstring, dol_strlen($newstring, $stringencoding) - $size2, $size2, $stringencoding);\n\t\t}\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'left')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > ($size + ($nodot ? 0 : 3)))    // If nodot is 0 and size is 1,2 or 3 chars more, we don't trunc and don't add ...\n\t\treturn '...'.dol_substr($newstring, dol_strlen($newstring, $stringencoding) - $size, $size, $stringencoding);\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'wrap')\n\t{\n\t\t$newstring = dol_textishtml($string) ?dol_string_nohtmltag($string, 1) : $string;\n\t\tif (dol_strlen($newstring, $stringencoding) > ($size + 1))\n\t\treturn dol_substr($newstring, 0, $size, $stringencoding).\"\\n\".dol_trunc(dol_substr($newstring, $size, dol_strlen($newstring, $stringencoding) - $size, $stringencoding), $size, $trunc);\n\t\telse\n\t\treturn $string;\n\t}\n\telse return 'BadParam3CallingDolTrunc';\n}\n\n/**\n *\tShow picto whatever it's its name (generic function)\n *\n *\t@param      string\t\t$titlealt         \t\tText on title tag for tooltip. Not used if param notitle is set to 1.\n *\t@param      string\t\t$picto       \t\t\tName of image file to show ('filenew', ...)\n *\t\t\t\t\t\t\t\t\t\t\t\t\tIf no extension provided, we use '.png'. Image must be stored into theme/xxx/img directory.\n *                                  \t\t\t\tExample: picto.png                  if picto.png is stored into htdocs/theme/mytheme/img\n *                                  \t\t\t\tExample: picto.png@mymodule         if picto.png is stored into htdocs/mymodule/img\n *                                  \t\t\t\tExample: /mydir/mysubdir/picto.png  if picto.png is stored into htdocs/mydir/mysubdir (pictoisfullpath must be set to 1)\n *\t@param\t\tstring\t\t$moreatt\t\t\t\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@param\t\tboolean|int\t$pictoisfullpath\t\tIf true or 1, image path is a full path\n *\t@param\t\tint\t\t\t$srconly\t\t\t\tReturn only content of the src attribute of img.\n *  @param\t\tint\t\t\t$notitle\t\t\t\t1=Disable tag title. Use it if you add js tooltip, to avoid duplicate tooltip.\n *  @param\t\tstring\t\t$alt\t\t\t\t\tForce alt for bind people\n *  @param\t\tstring\t\t$morecss\t\t\t\tAdd more class css on img tag (For example 'myclascss').\n *  @param\t\tstring\t\t$marginleftonlyshort\t1 = Add a short left margin on picto, 2 = Add a larger left margin on picto, 0 = No margin left. Works for fontawesome picto only.\n *  @return     string       \t\t\t\t    \tReturn img tag\n *  @see        img_object(), img_picto_common()\n */\nfunction img_picto($titlealt, $picto, $moreatt = '', $pictoisfullpath = false, $srconly = 0, $notitle = 0, $alt = '', $morecss = '', $marginleftonlyshort = 2)\n{\n\tglobal $conf, $langs;\n\n\t// We forge fullpathpicto for image to $path/img/$picto. By default, we take DOL_URL_ROOT/theme/$conf->theme/img/$picto\n\t$url = DOL_URL_ROOT;\n\t$theme = $conf->theme;\n\t$path = 'theme/'.$theme;\n\n\t// Define fullpathpicto to use into src\n\tif ($pictoisfullpath) {\n\t\t// Clean parameters\n\t\tif (!preg_match('/(\\.png|\\.gif|\\.svg)$/i', $picto)) {\n\t\t\t$picto .= '.png';\n\t\t}\n\t\t$fullpathpicto = $picto;\n\t\t$reg = array();\n\t\tif (preg_match('/class=\"([^\"]+)\"/', $moreatt, $reg)) {\n\t\t    $morecss .= ($morecss ? ' ' : '').$reg[1];\n\t\t    $moreatt = str_replace('class=\"'.$reg[1].'\"', '', $moreatt);\n\t\t}\n\t} else {\n\t\t$pictowithouttext = preg_replace('/(\\.png|\\.gif|\\.svg)$/', '', $picto);\n\n        if (empty($srconly) && in_array($pictowithouttext, array(\n        \t\t'1downarrow', '1uparrow', '1leftarrow', '1rightarrow', '1uparrow_selected', '1downarrow_selected', '1leftarrow_selected', '1rightarrow_selected',\n        \t\t'accountancy', 'address', 'bank_account', 'barcode', 'bank', 'bill', 'bookmark', 'bom', 'building',\n        \t\t'cash-register', 'category', 'check', 'close_title', 'company', 'contact', 'contract', 'cubes',\n        \t\t'delete', 'dolly', 'dollyrevert', 'edit', 'ellipsis-h', 'external-link-alt', 'external-link-square-alt',\n        \t\t'filter', 'file-code', 'file-export', 'file-import', 'file-upload', 'folder', 'folder-open', 'globe', 'globe-americas', 'grip', 'grip_title', 'help',\n        \t\t'intervention', 'label', 'language', 'list', 'listlight', 'lot',\n        \t\t'map-marker-alt', 'money-bill-alt', 'mrp', 'note',\n        \t\t'object_accounting', 'object_action', 'object_account', 'object_barcode', 'object_bill', 'object_billa', 'object_billd', 'object_bom',\n\t        \t'object_category', 'object_conversation', 'object_bookmark', 'object_bug', 'object_dolly', 'object_dollyrevert', 'object_generic', 'object_folder',\n        \t\t'object_list-alt', 'object_calendar', 'object_calendarweek', 'object_calendarmonth', 'object_calendarday', 'object_calendarperuser',\n        \t\t'object_cash-register', 'object_company', 'object_contact', 'object_contract', 'object_donation', 'object_dynamicprice',\n        \t\t'object_globe', 'object_holiday', 'object_hrm', 'object_invoice', 'object_intervention', 'object_label',\n        \t\t'object_margin', 'object_money-bill-alt', 'object_multicurrency', 'object_order', 'object_payment',\n        \t\t'object_lot', 'object_mrp', 'object_payment', 'object_product', 'object_propal',\n        \t\t'object_other', 'object_paragraph', 'object_poll', 'object_printer', 'object_project', 'object_projectpub', 'object_propal', 'object_resource', 'object_rss', 'object_projecttask',\n        \t\t'object_shipment', 'object_supplier_invoice', 'object_supplier_invoicea', 'object_supplier_invoiced', 'object_supplier_order', 'object_supplier_proposal', 'object_service', 'object_stock',\n        \t\t'object_technic', 'object_ticket', 'object_trip', 'object_user', 'object_group', 'object_member',\n        \t\t'object_phoning', 'object_phoning_mobile', 'object_phoning_fax', 'object_email', 'object_website',\n        \t\t'off', 'on', 'order',\n        \t\t'paiment', 'play', 'playdisabled', 'poll', 'printer', 'product', 'propal', 'projecttask', 'stock', 'resize', 'service', 'stats', 'trip',\n\t\t\t\t'setup', 'sign-out', 'split', 'stripe-s', 'switch_off', 'switch_on', 'tools', 'unlink', 'uparrow', 'user', 'vcard', 'wrench',\n\t\t\t\t'jabber', 'skype', 'twitter', 'facebook', 'linkedin', 'instagram', 'snapchat', 'youtube', 'google-plus-g', 'whatsapp',\n\t\t\t\t'chevron-left', 'chevron-right', 'chevron-down', 'chevron-top',\n        \t\t'home', 'hrm', 'companies', 'products', 'commercial', 'invoicing', 'pencil-ruler', 'preview', 'project', 'projectpub', 'supplier_invoice', 'members', 'ticket', 'generic',\n        \t\t'error', 'warning', 'supplier_proposal', 'supplier_order', 'supplier_invoice',\n        \t\t'title_setup', 'title_accountancy', 'title_bank', 'title_hrm', 'title_agenda'\n\t\t\t)\n\t\t)) {\n\t\t\t$fakey = $pictowithouttext;\n\t\t\t$facolor = ''; $fasize = '';\n\t\t\t$fa = 'fas';\n\t\t\tif (in_array($pictowithouttext, array('object_generic', 'note', 'off', 'on', 'object_bookmark', 'bookmark', 'vcard'))) {\n\t\t\t\t$fa = 'far';\n\t\t\t}\n\t\t\tif (in_array($pictowithouttext, array('skype', 'twitter', 'facebook', 'linkedin', 'instagram', 'snapchat', 'stripe-s', 'youtube', 'google-plus-g', 'whatsapp'))) {\n\t\t\t\t$fa = 'fab';\n\t\t\t}\n\n\t\t\t$pictowithouttext = str_replace('object_', '', $pictowithouttext);\n\n\t\t    $arrayconvpictotofa = array(\n\t\t    \t'account'=>'university', 'accountancy'=>'money-check-alt', 'action'=>'calendar-alt', 'address'=> 'address-book',\n\t\t    \t'bank_account'=>'university', 'bill'=>'file-invoice-dollar', 'billa'=>'file-excel', 'supplier_invoicea'=>'file-excel', 'billd'=>'file-medical', 'supplier_invoiced'=>'file-medical', 'bom'=>'cubes',\n\t\t    \t'company'=>'building', 'contact'=>'address-book', 'contract'=>'suitcase', 'conversation'=>'comments', 'donation'=>'file-alt', 'dynamicprice'=>'hand-holding-usd',\n\t\t    \t'setup'=>'cog', 'companies'=>'building', 'products'=>'cube', 'commercial'=>'suitcase', 'invoicing'=>'coins',\n\t\t    \t'accounting'=>'chart-line', 'category'=>'tag', 'dollyrevert'=>'dolly',\n\t\t    \t'hrm'=>'user-tie', 'margin'=>'calculator', 'members'=>'users', 'ticket'=>'ticket-alt', 'globe'=>'external-link-alt', 'lot'=>'barcode',\n\t\t    \t'email'=>'at',\n\t\t    \t'edit'=>'pencil-alt', 'grip_title'=>'arrows-alt', 'grip'=>'arrows-alt', 'help'=>'info-circle',\n\t\t    \t'generic'=>'file', 'holiday'=>'umbrella-beach', 'label'=>'layer-group',\n\t\t    \t'member'=>'users', 'mrp'=>'cubes', 'trip'=>'wallet', 'group'=>'users',\n\t\t    \t'sign-out'=>'sign-out-alt',\n\t\t    \t'switch_off'=>'toggle-off', 'switch_on'=>'toggle-on', 'check'=>'check', 'bookmark'=>'star', 'bookmark'=>'star',\n\t\t    \t'bank'=>'university', 'close_title'=>'window-close', 'delete'=>'trash', 'edit'=>'pencil-alt', 'filter'=>'filter',\n\t\t    \t'list-alt'=>'list-alt', 'calendar'=>'calendar-alt', 'calendarweek'=>'calendar-week', 'calendarmonth'=>'calendar-alt', 'calendarday'=>'calendar-day', 'calendarperuser'=>'table',\n\t\t    \t'intervention'=>'ambulance', 'invoice'=>'file-invoice-dollar', 'multicurrency'=>'dollar-sign', 'order'=>'file-invoice',\n\t\t    \t'error'=>'exclamation-triangle', 'warning'=>'exclamation-triangle',\n\t\t    \t'other'=>'square',\n\t\t    \t'playdisabled'=>'play', 'poll'=>'check-double', 'preview'=>'binoculars', 'project'=>'sitemap', 'projectpub'=>'sitemap', 'projecttask'=>'tasks', 'propal'=>'file-signature',\n\t\t\t\t'resize'=>'crop', 'supplier_order'=>'dol-order_supplier', 'supplier_proposal'=>'file-signature',\n\t\t    \t'payment'=>'money-check-alt', 'phoning'=>'phone', 'phoning_mobile'=>'mobile-alt', 'phoning_fax'=>'fax', 'printer'=>'print', 'product'=>'cube', 'service'=>'concierge-bell',\n\t\t    \t'resource'=>'laptop-house',\n\t\t    \t'shipment'=>'dolly', 'stock'=>'box-open', 'stats' => 'chart-bar', 'split'=>'code-branch', 'supplier_invoice'=>'file-invoice-dollar', 'technic'=>'cogs', 'ticket'=>'ticket-alt',\n\t\t    \t'title_setup'=>'tools', 'title_accountancy'=>'money-check-alt', 'title_bank'=>'university', 'title_hrm'=>'umbrella-beach',\n\t\t    \t'title_agenda'=>'calendar-alt',\n\t\t    \t'uparrow'=>'mail-forward', 'vcard'=>'address-card',\n\t\t    \t'jabber'=>'comment-o',\n\t\t    \t'website'=>'globe-americas'\n\t\t    );\n\t\t\tif ($pictowithouttext == 'off') {\n\t\t\t    $fakey = 'fa-square';\n\t\t\t\t$fasize = '1.3em';\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'on') {\n\t\t\t    $fakey = 'fa-check-square';\n\t\t\t\t$fasize = '1.3em';\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'listlight') {\n\t\t\t\t$fakey = 'fa-download';\n\t\t\t\t$marginleftonlyshort = 1;\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'printer') {\n\t\t\t\t$fakey = 'fa-print';\n\t\t\t\t$fasize = '1.2em';\n\t\t\t}\n\t\t\telseif ($pictowithouttext == 'note') {\n\t\t\t    $fakey = 'fa-sticky-note';\n\t\t\t\t$marginleftonlyshort = 1;\n\t\t\t}\n\t\t\telseif (in_array($pictowithouttext, array('1uparrow', '1downarrow', '1leftarrow', '1rightarrow', '1uparrow_selected', '1downarrow_selected', '1leftarrow_selected', '1rightarrow_selected'))) {\n\t\t\t    $convertarray = array('1uparrow'=>'caret-up', '1downarrow'=>'caret-down', '1leftarrow'=>'caret-left', '1rightarrow'=>'caret-right', '1uparrow_selected'=>'caret-up', '1downarrow_selected'=>'caret-down', '1leftarrow_selected'=>'caret-left', '1rightarrow_selected'=>'caret-right');\n\t\t\t    $fakey = 'fa-'.$convertarray[$pictowithouttext];\n\t\t\t    if (preg_match('/selected/', $pictowithouttext)) $facolor = '#888';\n\t\t\t\t$marginleftonlyshort = 1;\n\t\t\t}\n\t\t\telseif (!empty($arrayconvpictotofa[$pictowithouttext]))\n\t\t\t{\n\t\t\t\t$fakey = 'fa-'.$arrayconvpictotofa[$pictowithouttext];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$fakey = 'fa-'.$pictowithouttext;\n\t\t\t}\n\n\t\t\t// Define $marginleftonlyshort\n\t\t\t$arrayconvpictotomarginleftonly = array(\n\t\t\t\t'bank', 'check', 'delete', 'generic', 'grip', 'grip_title', 'jabber',\n\t\t\t\t'grip_title', 'grip', 'listlight', 'note', 'on', 'off', 'playdisabled', 'printer', 'resize', 'sign-out', 'stats', 'switch_on', 'switch_off',\n\t\t\t\t'uparrow', '1uparrow', '1downarrow', '1leftarrow', '1rightarrow', '1uparrow_selected', '1downarrow_selected', '1leftarrow_selected', '1rightarrow_selected'\n\t\t\t);\n\t\t\tif (!isset($arrayconvpictotomarginleftonly[$pictowithouttext])) {\n\t\t\t\t$marginleftonlyshort = 0;\n\t\t\t}\n\n\t\t\t// Add CSS\n\t\t\t$arrayconvpictotomorcess = array(\n\t\t\t\t'action'=>'infobox-action', 'account'=>'infobox-bank_account', 'accountancy'=>'infobox-bank_account',\n\t\t\t\t'bank_account'=>'bg-infobox-bank_account',\n\t\t\t\t'bill'=>'infobox-commande', 'billa'=>'infobox-commande', 'billd'=>'infobox-commande',\n\t\t\t\t'cash-register'=>'infobox-bank_account', 'contract'=>'infobox-contrat', 'check'=>'font-status4', 'conversation'=>'infobox-contrat',\n\t\t\t\t'donation'=>'infobox-commande', 'dollyrevert'=>'flip', 'ecm'=>'infobox-action',\n\t\t\t\t'hrm'=>'infobox-adherent', 'group'=>'infobox-adherent', 'intervention'=>'infobox-contrat',\n\t\t\t\t'multicurrency'=>'infobox-bank_account',\n\t\t\t\t'members'=>'infobox-adherent', 'member'=>'infobox-adherent', 'money-bill-alt'=>'infobox-bank_account',\n\t\t\t\t'order'=>'infobox-commande',\n\t\t\t\t'user'=>'infobox-adherent', 'users'=>'infobox-adherent',\n\t\t\t\t'error'=>'pictoerror', 'warning'=>'pictowarning', 'switch_on'=>'font-status4',\n\t\t\t\t'holiday'=>'infobox-holiday', 'invoice'=>'infobox-commande',\n\t\t\t\t'payment'=>'infobox-bank_account', 'poll'=>'infobox-adherent', 'project'=>'infobox-project', 'projecttask'=>'infobox-project', 'propal'=>'infobox-propal',\n\t\t\t\t'resource'=>'infobox-action',\n\t\t\t\t'supplier_invoice'=>'infobox-order_supplier', 'supplier_invoicea'=>'infobox-order_supplier', 'supplier_invoiced'=>'infobox-order_supplier',\n\t\t\t\t'supplier_order'=>'infobox-order_supplier', 'supplier_proposal'=>'infobox-supplier_proposal',\n\t\t\t\t'ticket'=>'infobox-contrat', 'title_accountancy'=>'infobox-bank_account', 'title_hrm'=>'infobox-holiday', 'trip'=>'infobox-expensereport', 'title_agenda'=>'infobox-action',\n\t\t\t\t//'title_setup'=>'infobox-action', 'tools'=>'infobox-action',\n\t\t\t\t'list-alt'=>'imgforviewmode', 'calendar'=>'imgforviewmode', 'calendarweek'=>'imgforviewmode', 'calendarmonth'=>'imgforviewmode', 'calendarday'=>'imgforviewmode', 'calendarperuser'=>'imgforviewmode'\n\t\t\t);\n\t\t\tif (!empty($arrayconvpictotomorcess[$pictowithouttext])) {\n\t\t\t\t$morecss .= ($morecss ? ' ' : '').$arrayconvpictotomorcess[$pictowithouttext];\n\t\t\t}\n\n\t\t\t// Define $color\n\t\t\t$arrayconvpictotocolor = array(\n\t\t\t\t'address'=>'#37a', 'building'=>'#37a', 'bom'=>'#a69944',\n\t\t\t\t'companies'=>'#37a', 'company'=>'#37a', 'contact'=>'#37a', 'dynamicprice'=>'#a69944',\n\t\t\t\t'edit'=>'#444', 'note'=>'#999', 'error'=>'', 'listlight'=>'#999',\n\t\t\t\t'dolly'=>'#a69944', 'dollyrevert'=>'#a69944', 'lot'=>'#a69944',\n\t\t\t\t'map-marker-alt'=>'#aaa', 'mrp'=>'#a69944', 'product'=>'#a69944', 'service'=>'#a69944', 'stock'=>'#a69944',\n\t\t\t\t'other'=>'#ddd',\n\t\t\t\t'playdisabled'=>'#ccc', 'printer'=>'#444', 'projectpub'=>'#986c6a', 'resize'=>'#444', 'rss'=>'#cba',\n\t\t\t\t'shipment'=>'#a69944', 'stats'=>'#444', 'switch_off'=>'#999', 'uparrow'=>'#555', 'globe-americas'=>'#aaa',\n\t\t\t\t'website'=>'#304'\n\t\t\t);\n\t\t\tif (isset($arrayconvpictotocolor[$pictowithouttext])) {\n\t\t\t\t$facolor = $arrayconvpictotocolor[$pictowithouttext];\n\t\t\t}\n\n\t\t\t// This snippet only needed since function img_edit accepts only one additional parameter: no separate one for css only.\n            // class/style need to be extracted to avoid duplicate class/style validation errors when $moreatt is added to the end of the attributes.\n            $reg = array();\n\t\t\tif (preg_match('/class=\"([^\"]+)\"/', $moreatt, $reg)) {\n                $morecss .= ($morecss ? ' ' : '').$reg[1];\n                $moreatt = str_replace('class=\"'.$reg[1].'\"', '', $moreatt);\n            }\n            if (preg_match('/style=\"([^\"]+)\"/', $moreatt, $reg)) {\n                $morestyle = ' '.$reg[1];\n                $moreatt = str_replace('style=\"'.$reg[1].'\"', '', $moreatt);\n            }\n            $moreatt = trim($moreatt);\n\n            $enabledisablehtml = '<span class=\"'.$fa.' '.$fakey.($marginleftonlyshort ? ($marginleftonlyshort == 1 ? ' marginleftonlyshort' : ' marginleftonly') : '');\n            $enabledisablehtml .= ($morecss ? ' '.$morecss : '').'\" style=\"'.($fasize ? ('font-size: '.$fasize.';') : '').($facolor ? (' color: '.$facolor.';') : '').($morestyle ? ' '.$morestyle : '').'\"'.(($notitle || empty($titlealt)) ? '' : ' title=\"'.dol_escape_htmltag($titlealt).'\"').($moreatt ? ' '.$moreatt : '').'>';\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$enabledisablehtml .= $titlealt;\n\t\t\t}\n\t\t\t$enabledisablehtml .= '</span>';\n\n\t\t\treturn $enabledisablehtml;\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_OVERWRITE_THEME_PATH)) {\n\t\t\t$path = $conf->global->MAIN_OVERWRITE_THEME_PATH.'/theme/'.$theme; // If the theme does not have the same name as the module\n\t\t}\n\t\telseif (!empty($conf->global->MAIN_OVERWRITE_THEME_RES)) {\n\t\t\t$path = $conf->global->MAIN_OVERWRITE_THEME_RES.'/theme/'.$conf->global->MAIN_OVERWRITE_THEME_RES; // To allow an external module to overwrite image resources whatever is activated theme\n\t\t}\n\t\telseif (!empty($conf->modules_parts['theme']) && array_key_exists($theme, $conf->modules_parts['theme'])) {\n\t\t\t$path = $theme.'/theme/'.$theme; // If the theme have the same name as the module\n\t\t}\n\n\t\t// If we ask an image into $url/$mymodule/img (instead of default path)\n\t\t$regs = array();\n\t\tif (preg_match('/^([^@]+)@([^@]+)$/i', $picto, $regs)) {\n\t\t\t$picto = $regs[1];\n\t\t\t$path = $regs[2]; // $path is $mymodule\n\t\t}\n\n\t\t// Clean parameters\n\t\tif (!preg_match('/(\\.png|\\.gif|\\.svg)$/i', $picto)) {\n\t\t\t$picto .= '.png';\n\t\t}\n\t\t// If alt path are defined, define url where img file is, according to physical path\n\t\t// ex: array([\"main\"]=>\"/home/maindir/htdocs\", [\"alt0\"]=>\"/home/moddir0/htdocs\", ...)\n\t\tforeach ($conf->file->dol_document_root as $type => $dirroot) {\n\t\t\tif ($type == 'main') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// This need a lot of time, that's why enabling alternative dir like \"custom\" dir is not recommanded\n\t\t\tif (file_exists($dirroot.'/'.$path.'/img/'.$picto)) {\n\t\t\t\t$url = DOL_URL_ROOT.$conf->file->dol_url_root[$type];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// $url is '' or '/custom', $path is current theme or\n\t\t$fullpathpicto = $url.'/'.$path.'/img/'.$picto;\n\t}\n\n\tif ($srconly) {\n\t\treturn $fullpathpicto;\n\t}\n\t\t// tag title is used for tooltip on <a>, tag alt can be used with very simple text on image for blind people\n    return '<img src=\"'.$fullpathpicto.'\" alt=\"'.dol_escape_htmltag($alt).'\"'.(($notitle || empty($titlealt)) ? '' : ' title=\"'.dol_escape_htmltag($titlealt).'\"').($moreatt ? ' '.$moreatt.($morecss ? ' class=\"'.$morecss.'\"' : '') : ' class=\"inline-block'.($morecss ? ' '.$morecss : '').'\"').'>'; // Alt is used for accessibility, title for popup\n}\n\n/**\n *\tShow a picto called object_picto (generic function)\n *\n *\t@param\tstring\t$titlealt\t\t\tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param\tstring\t$picto\t\t\t\tName of image to show object_picto (example: user, group, action, bill, contract, propal, product, ...)\n *\t\t\t\t\t\t\t\t\t\tFor external modules use imagename@mymodule to search into directory \"img\" of module.\n *\t@param\tstring\t$moreatt\t\t\tAdd more attribute on img tag (ie: class=\"datecallink\")\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@param\tint\t\t$srconly\t\t\tReturn only content of the src attribute of img.\n *  @param\tint\t\t$notitle\t\t\t1=Disable tag title. Use it if you add js tooltip, to avoid duplicate tooltip.\n *\t@return\tstring\t\t\t\t\t\tReturn img tag\n *\t@see\timg_picto(), img_picto_common()\n */\nfunction img_object($titlealt, $picto, $moreatt = '', $pictoisfullpath = false, $srconly = 0, $notitle = 0)\n{\n\tif (strpos($picto, '^') === 0) return img_picto($titlealt, str_replace('^', '', $picto), $moreatt, $pictoisfullpath, $srconly, $notitle);\n\telse return img_picto($titlealt, 'object_'.$picto, $moreatt, $pictoisfullpath, $srconly, $notitle);\n}\n\n/**\n *\tShow weather picto\n *\n *\t@param      string\t\t$titlealt         \tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param      string|int\t$picto       \t\tName of image file to show (If no extension provided, we use '.png'). Image must be stored into htdocs/theme/common directory. Or level of meteo image (0-4).\n *\t@param\t\tstring\t\t$moreatt\t\t\tAdd more attribute on img tag\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *  @param      string      $morecss            More CSS\n *\t@return     string      \t\t\t\t\tReturn img tag\n *  @see        img_object(), img_picto()\n */\nfunction img_weather($titlealt, $picto, $moreatt = '', $pictoisfullpath = 0, $morecss = '')\n{\n\tglobal $conf;\n\n\tif (is_numeric($picto))\n\t{\n\t\t$leveltopicto = array(0=>'weather-clear.png', 1=>'weather-few-clouds.png', 2=>'weather-clouds.png', 3=>'weather-many-clouds.png', 4=>'weather-storm.png');\n\t\t//return '<i class=\"fa fa-weather-level'.$picto.'\"></i>';\n\t\t$picto = $leveltopicto[$picto];\n\t}\n\telseif (!preg_match('/(\\.png|\\.gif)$/i', $picto)) $picto .= '.png';\n\n\t$path = DOL_URL_ROOT.'/theme/'.$conf->theme.'/img/weather/'.$picto;\n\n\treturn img_picto($titlealt, $path, $moreatt, 1, 0, 0, '', $morecss);\n}\n\n/**\n *\tShow picto (generic function)\n *\n *\t@param      string\t\t$titlealt         \tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param      string\t\t$picto       \t\tName of image file to show (If no extension provided, we use '.png'). Image must be stored into htdocs/theme/common directory.\n *\t@param\t\tstring\t\t$moreatt\t\t\tAdd more attribute on img tag\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@return     string      \t\t\t\t\tReturn img tag\n *  @see        img_object(), img_picto()\n */\nfunction img_picto_common($titlealt, $picto, $moreatt = '', $pictoisfullpath = 0)\n{\n\tglobal $conf;\n\n\tif (!preg_match('/(\\.png|\\.gif)$/i', $picto)) $picto .= '.png';\n\n\tif ($pictoisfullpath) $path = $picto;\n\telse\n\t{\n\t\t$path = DOL_URL_ROOT.'/theme/common/'.$picto;\n\n\t\tif (!empty($conf->global->MAIN_MODULE_CAN_OVERWRITE_COMMONICONS))\n\t\t{\n\t\t\t$themepath = DOL_DOCUMENT_ROOT.'/theme/'.$conf->theme.'/img/'.$picto;\n\n\t\t\tif (file_exists($themepath)) $path = $themepath;\n\t\t}\n\t}\n\n\treturn img_picto($titlealt, $path, $moreatt, 1);\n}\n\n/**\n *\tShow logo action\n *\n *\t@param\tstring\t\t$titlealt       Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t\t$numaction   \tAction id or code to show\n *\t@return string      \t\t\t\tReturn an img tag\n */\nfunction img_action($titlealt, $numaction)\n{\n\tglobal $langs;\n\n\tif (empty($titlealt) || $titlealt == 'default')\n\t{\n\t\tif ($numaction == '-1' || $numaction == 'ST_NO') { $numaction = -1; $titlealt = $langs->transnoentitiesnoconv('ChangeDoNotContact'); }\n\t\telseif ($numaction == '0' || $numaction == 'ST_NEVER') { $numaction = 0; $titlealt = $langs->transnoentitiesnoconv('ChangeNeverContacted'); }\n\t\telseif ($numaction == '1' || $numaction == 'ST_TODO') { $numaction = 1; $titlealt = $langs->transnoentitiesnoconv('ChangeToContact'); }\n\t\telseif ($numaction == '2' || $numaction == 'ST_PEND') { $numaction = 2; $titlealt = $langs->transnoentitiesnoconv('ChangeContactInProcess'); }\n\t\telseif ($numaction == '3' || $numaction == 'ST_DONE') { $numaction = 3; $titlealt = $langs->transnoentitiesnoconv('ChangeContactDone'); }\n\t\telse { $titlealt = $langs->transnoentitiesnoconv('ChangeStatus '.$numaction); $numaction = 0; }\n\t}\n\tif (!is_numeric($numaction)) $numaction = 0;\n\n\treturn img_picto($titlealt, 'stcomm'.$numaction.'.png');\n}\n\n/**\n *  Show pdf logo\n *\n *  @param\tstring\t\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *  @param  int\t\t    $size       Taille de l'icone : 3 = 16x16px , 2 = 14x14px\n *  @return string      \t\t\tRetourne tag img\n */\nfunction img_pdf($titlealt = 'default', $size = 3)\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Show');\n\n\treturn img_picto($titlealt, 'pdf'.$size.'.png');\n}\n\n/**\n *\tShow logo +\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit_add($titlealt = 'default', $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Add');\n\n\treturn img_picto($titlealt, 'edit_add.png', $other);\n}\n/**\n *\tShow logo -\n *\n *\t@param\tstring\t$titlealt\tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit_remove($titlealt = 'default', $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Remove');\n\n\treturn img_picto($titlealt, 'edit_remove.png', $other);\n}\n\n/**\n *\tShow logo editer/modifier fiche\n *\n *\t@param  string\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  integer\t$float      If you have to put the style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit($titlealt = 'default', $float = 0, $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Modify');\n\n\treturn img_picto($titlealt, 'edit.png', ($float ? 'style=\"float: '.($langs->tab_translate[\"DIRECTION\"] == 'rtl' ? 'left' : 'right').'\"' : \"\").($other ? ' '.$other : ''));\n}\n\n/**\n *\tShow logo view card\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  integer\t$float      If you have to put the style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      \t\tReturn tag img\n */\nfunction img_view($titlealt = 'default', $float = 0, $other = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('View');\n\n\t$moreatt = ($float ? 'style=\"float: right\" ' : '').$other;\n\n\treturn img_picto($titlealt, 'view.png', $moreatt);\n}\n\n/**\n *  Show delete logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @param\tstring\t$morecss\tMore CSS\n *  @return string      \t\tRetourne tag img\n */\nfunction img_delete($titlealt = 'default', $other = 'class=\"pictodelete\"', $morecss = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Delete');\n\n\treturn img_picto($titlealt, 'delete.png', $other, false, 0, 0, '', $morecss);\n}\n\n/**\n *  Show printer logo\n *\n *  @param  string  $titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *  @param  string  $other      Add more attributes on img\n *  @return string              Retourne tag img\n */\nfunction img_printer($titlealt = \"default\", $other = '')\n{\n\tglobal $langs;\n\tif ($titlealt == \"default\") $titlealt = $langs->trans(\"Print\");\n\treturn img_picto($titlealt, 'printer.png', $other);\n}\n\n/**\n *  Show split logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_split($titlealt = 'default', $other = 'class=\"pictosplit\"')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Split');\n\n\treturn img_picto($titlealt, 'split.png', $other);\n}\n\n/**\n *\tShow help logo with cursor \"?\"\n *\n * \t@param\tint              \t$usehelpcursor\t\t1=Use help cursor, 2=Use click pointer cursor, 0=No specific cursor\n * \t@param\tint|string\t        $usealttitle\t\tText to use as alt title\n * \t@return string            \t           \t\t\tReturn tag img\n */\nfunction img_help($usehelpcursor = 1, $usealttitle = 1)\n{\n\tglobal $langs;\n\n\tif ($usealttitle)\n\t{\n\t\tif (is_string($usealttitle)) $usealttitle = dol_escape_htmltag($usealttitle);\n\t\telse $usealttitle = $langs->trans('Info');\n\t}\n\n\treturn img_picto($usealttitle, 'info.png', 'style=\"vertical-align: middle;'.($usehelpcursor == 1 ? ' cursor: help' : ($usehelpcursor == 2 ? ' cursor: pointer' : '')).'\"');\n}\n\n/**\n *\tShow info logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@return string      \t\tReturn img tag\n */\nfunction img_info($titlealt = 'default')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Informations');\n\n\treturn img_picto($titlealt, 'info.png', 'style=\"vertical-align: middle;\"');\n}\n\n/**\n *\tShow warning logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"'). If 1, add float: right. Can't be \"class\" attribute.\n *  @param\tstring  $morecss\tAdd more CSS\n *\t@return string      \t\tReturn img tag\n */\nfunction img_warning($titlealt = 'default', $moreatt = '', $morecss = 'pictowarning')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Warning');\n\n\t//return '<div class=\"imglatecoin\">'.img_picto($titlealt, 'warning_white.png', 'class=\"pictowarning valignmiddle\"'.($moreatt ? ($moreatt == '1' ? ' style=\"float: right\"' : ' '.$moreatt): '')).'</div>';\n\treturn img_picto($titlealt, 'warning.png', 'class=\"'.$morecss.'\"'.($moreatt ? ($moreatt == '1' ? ' style=\"float: right\"' : ' '.$moreatt) : ''));\n}\n\n/**\n *  Show error logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@return string      \t\tReturn img tag\n */\nfunction img_error($titlealt = 'default')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Error');\n\n\treturn img_picto($titlealt, 'error.png');\n}\n\n/**\n *\tShow next logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n*\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_next($titlealt = 'default', $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Next');\n\n\t//return img_picto($titlealt, 'next.png', $moreatt);\n\treturn '<span class=\"fa fa-chevron-right paddingright paddingleft\" title=\"'.dol_escape_htmltag($titlealt).'\"></span>';\n}\n\n/**\n *\tShow previous logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_previous($titlealt = 'default', $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Previous');\n\n\t//return img_picto($titlealt, 'previous.png', $moreatt);\n\treturn '<span class=\"fa fa-chevron-left paddingright paddingleft\" title=\"'.dol_escape_htmltag($titlealt).'\"></span>';\n}\n\n/**\n *\tShow down arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected   Selected\n *  @param\tstring\t$moreclass\tAdd more CSS classes\n *\t@return string      \t\tReturn img tag\n */\nfunction img_down($titlealt = 'default', $selected = 0, $moreclass = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Down');\n\n\treturn img_picto($titlealt, ($selected ? '1downarrow_selected.png' : '1downarrow.png'), 'class=\"imgdown'.($moreclass ? \" \".$moreclass : \"\").'\"');\n}\n\n/**\n *\tShow top arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected\tSelected\n *  @param\tstring\t$moreclass\tAdd more CSS classes\n *\t@return string      \t\tReturn img tag\n */\nfunction img_up($titlealt = 'default', $selected = 0, $moreclass = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Up');\n\n\treturn img_picto($titlealt, ($selected ? '1uparrow_selected.png' : '1uparrow.png'), 'class=\"imgup'.($moreclass ? \" \".$moreclass : \"\").'\"');\n}\n\n/**\n *\tShow left arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected\tSelected\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_left($titlealt = 'default', $selected = 0, $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Left');\n\n\treturn img_picto($titlealt, ($selected ? '1leftarrow_selected.png' : '1leftarrow.png'), $moreatt);\n}\n\n/**\n *\tShow right arrow logo\n *\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  int\t\t$selected\tSelected\n *\t@param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@return string      \t\tReturn img tag\n */\nfunction img_right($titlealt = 'default', $selected = 0, $moreatt = '')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Right');\n\n\treturn img_picto($titlealt, ($selected ? '1rightarrow_selected.png' : '1rightarrow.png'), $moreatt);\n}\n\n/**\n *\tShow tick logo if allowed\n *\n *\t@param\tstring\t$allow\t\tAllow\n *\t@param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@return string      \t\tReturn img tag\n */\nfunction img_allow($allow, $titlealt = 'default')\n{\n\tglobal $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Active');\n\n\tif ($allow == 1) return img_picto($titlealt, 'tick.png');\n\n\treturn '-';\n}\n\n/**\n *\tReturn image of a credit card according to its brand name\n *\n *\t@param\tstring\t$brand\t\tBrand name of credit card\n *  @param\tstring\t$morecss\tMore CSS\n *\t@return string     \t\t\tReturn img tag\n */\nfunction img_credit_card($brand, $morecss = null)\n{\n\tif (is_null($morecss)) $morecss = 'fa-2x';\n\n\tif ($brand == 'visa' || $brand == 'Visa') {$brand = 'cc-visa'; }\n\telseif ($brand == 'mastercard' || $brand == 'MasterCard') {$brand = 'cc-mastercard'; }\n\telseif ($brand == 'amex' || $brand == 'American Express') {$brand = 'cc-amex'; }\n\telseif ($brand == 'discover' || $brand == 'Discover') {$brand = 'cc-discover'; }\n\telseif ($brand == 'jcb' || $brand == 'JCB') {$brand = 'cc-jcb'; }\n\telseif ($brand == 'diners' || $brand == 'Diners club') {$brand = 'cc-diners-club'; }\n\telseif (!in_array($brand, array('cc-visa', 'cc-mastercard', 'cc-amex', 'cc-discover', 'cc-jcb', 'cc-diners-club'))) {$brand = 'credit-card'; }\n\n\treturn '<span class=\"fa fa-'.$brand.' fa-fw'.($morecss ? ' '.$morecss : '').'\"></span>';\n}\n\n/**\n *\tShow MIME img of a file\n *\n *\t@param\tstring\t$file\t\tFilename\n * \t@param\tstring\t$titlealt\tText on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *  @param\tstring\t$morecss\tMore css\n *\t@return string     \t\t\tReturn img tag\n */\nfunction img_mime($file, $titlealt = '', $morecss = '')\n{\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t$mimetype = dol_mimetype($file, '', 1);\n\t$mimeimg = dol_mimetype($file, '', 2);\n\t$mimefa = dol_mimetype($file, '', 4);\n\n\tif (empty($titlealt)) $titlealt = 'Mime type: '.$mimetype;\n\n\t//return img_picto_common($titlealt, 'mime/'.$mimeimg, 'class=\"'.$morecss.'\"');\n\treturn '<i class=\"fa fa-'.$mimefa.' paddingright\"'.($titlealt ? ' title=\"'.$titlealt.'\"' : '').'></i>';\n}\n\n\n/**\n *  Show search logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_search($titlealt = 'default', $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Search');\n\n\t$img = img_picto($titlealt, 'search.png', $other, false, 1);\n\n\t$input = '<input type=\"image\" class=\"liste_titre\" name=\"button_search\" src=\"'.$img.'\" ';\n\t$input .= 'value=\"'.dol_escape_htmltag($titlealt).'\" title=\"'.dol_escape_htmltag($titlealt).'\" >';\n\n\treturn $input;\n}\n\n/**\n *  Show search logo\n *\n *  @param\tstring\t$titlealt   Text on alt and title of image. Alt only if param notitle is set to 1. If text is \"TextA:TextB\", use Text A on alt and Text B on title.\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_searchclear($titlealt = 'default', $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($titlealt == 'default') $titlealt = $langs->trans('Search');\n\n\t$img = img_picto($titlealt, 'searchclear.png', $other, false, 1);\n\n\t$input = '<input type=\"image\" class=\"liste_titre\" name=\"button_removefilter\" src=\"'.$img.'\" ';\n\t$input .= 'value=\"'.dol_escape_htmltag($titlealt).'\" title=\"'.dol_escape_htmltag($titlealt).'\" >';\n\n\treturn $input;\n}\n\n/**\n *\tShow information for admin users or standard users\n *\n *\t@param\tstring\t$text\t\t\t\tText info\n *\t@param  integer\t$infoonimgalt\t\tInfo is shown only on alt of star picto, otherwise it is show on output after the star picto\n *\t@param\tint\t\t$nodiv\t\t\t\tNo div\n *  @param  string  $admin      \t    '1'=Info for admin users. '0'=Info for standard users (change only the look), 'error','xxx'=Other\n *  @param\tstring\t$morecss\t\t\tMore CSS ('', 'warning', 'error')\n *  @param\tstring\t$textfordropdown\tShow a text to click to dropdown the info box.\n *\t@return\tstring\t\t\t\t\t\tString with info text\n */\nfunction info_admin($text, $infoonimgalt = 0, $nodiv = 0, $admin = '1', $morecss = '', $textfordropdown = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($infoonimgalt)\n\t{\n\t\t$result = img_picto($text, 'info', 'class=\"hideonsmartphone'.($morecss ? ' '.$morecss : '').'\"');\n\t}\n\telse {\n\t\tif (empty($conf->use_javascript_ajax)) $textfordropdown = '';\n\n\t\t$class = (empty($admin) ? 'undefined' : ($admin == '1' ? 'info' : $admin));\n\t\t$result = ($nodiv ? '' : '<div class=\"'.$class.' hideonsmartphone'.($morecss ? ' '.$morecss : '').($textfordropdown ? ' hidden' : '').'\">').'<span class=\"fa fa-info-circle\" title=\"'.dol_escape_htmltag($admin ? $langs->trans('InfoAdmin') : $langs->trans('Note')).'\"></span> '.$text.($nodiv ? '' : '</div>');\n\n\t\tif ($textfordropdown) {\n\t\t\t$tmpresult .= '<span class=\"'.$class.'text opacitymedium\">'.$langs->trans($textfordropdown).' '.img_picto($langs->trans($textfordropdown), '1downarrow').'</span>';\n\t\t\t$tmpresult .= '<script type=\"text/javascript\" language=\"javascript\">\n\t\t\t\tjQuery(document).ready(function() {\n\t\t\t\t\tjQuery(\".'.$class.'text\").click(function() {\n\t\t\t\t\t\tconsole.log(\"toggle text\");\n\t\t\t\t\t\tjQuery(\".'.$class.'\").toggle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>';\n\n\t\t\t$result = $tmpresult.$result;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n *  Displays error message system with all the information to facilitate the diagnosis and the escalation of the bugs.\n *  This function must be called when a blocking technical error is encountered.\n *  However, one must try to call it only within php pages, classes must return their error through their property \"error\".\n *\n *\t@param\t \tDoliDB\t$db      \tDatabase handler\n *\t@param  \tmixed\t$error\t\tString or array of errors strings to show\n *  @param\t\tarray\t$errors\t\tArray of errors\n *\t@return \tvoid\n *  @see    \tdol_htmloutput_errors()\n */\nfunction dol_print_error($db = '', $error = '', $errors = null)\n{\n\tglobal $conf, $langs, $argv;\n\tglobal $dolibarr_main_prod;\n\n\t$out = '';\n\t$syslog = '';\n\n\t// Si erreur intervenue avant chargement langue\n\tif (!$langs)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/translate.class.php';\n\t\t$langs = new Translate('', $conf);\n\t\t$langs->load(\"main\");\n\t}\n\t// Load translation files required by the page\n    $langs->loadLangs(array('main', 'errors'));\n\n\tif ($_SERVER['DOCUMENT_ROOT'])    // Mode web\n\t{\n\t\t$out .= $langs->trans(\"DolibarrHasDetectedError\").\".<br>\\n\";\n\t\tif (!empty($conf->global->MAIN_FEATURES_LEVEL)) $out .= \"You use an experimental or develop level of features, so please do NOT report any bugs, except if problem is confirmed moving option MAIN_FEATURES_LEVEL back to 0.<br>\\n\";\n\t\t$out .= $langs->trans(\"InformationToHelpDiagnose\").\":<br>\\n\";\n\n\t\t$out .= \"<b>\".$langs->trans(\"Date\").\":</b> \".dol_print_date(time(), 'dayhourlog').\"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"Dolibarr\").\":</b> \".DOL_VERSION.\" - https://www.dolibarr.org<br>\\n\";\n\t\tif (isset($conf->global->MAIN_FEATURES_LEVEL)) $out .= \"<b>\".$langs->trans(\"LevelOfFeature\").\":</b> \".$conf->global->MAIN_FEATURES_LEVEL.\"<br>\\n\";\n\t\tif (function_exists(\"phpversion\"))\n\t\t{\n\t\t\t$out .= \"<b>\".$langs->trans(\"PHP\").\":</b> \".phpversion().\"<br>\\n\";\n\t\t}\n\t\t$out .= \"<b>\".$langs->trans(\"Server\").\":</b> \".$_SERVER[\"SERVER_SOFTWARE\"].\"<br>\\n\";\n\t\tif (function_exists(\"php_uname\"))\n\t\t{\n\t\t\t$out .= \"<b>\".$langs->trans(\"OS\").\":</b> \".php_uname().\"<br>\\n\";\n\t\t}\n\t\t$out .= \"<b>\".$langs->trans(\"UserAgent\").\":</b> \".$_SERVER[\"HTTP_USER_AGENT\"].\"<br>\\n\";\n\t\t$out .= \"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"RequestedUrl\").\":</b> \".dol_htmlentities($_SERVER[\"REQUEST_URI\"], ENT_COMPAT, 'UTF-8').\"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"Referer\").\":</b> \".(isset($_SERVER[\"HTTP_REFERER\"]) ?dol_htmlentities($_SERVER[\"HTTP_REFERER\"], ENT_COMPAT, 'UTF-8') : '').\"<br>\\n\";\n\t\t$out .= \"<b>\".$langs->trans(\"MenuManager\").\":</b> \".(isset($conf->standard_menu) ? $conf->standard_menu : '').\"<br>\\n\";\n\t\t$out .= \"<br>\\n\";\n\t\t$syslog .= \"url=\".dol_escape_htmltag($_SERVER[\"REQUEST_URI\"]);\n\t\t$syslog .= \", query_string=\".dol_escape_htmltag($_SERVER[\"QUERY_STRING\"]);\n\t}\n\telse                              // Mode CLI\n\t{\n\t\t$out .= '> '.$langs->transnoentities(\"ErrorInternalErrorDetected\").\":\\n\".$argv[0].\"\\n\";\n\t\t$syslog .= \"pid=\".dol_getmypid();\n\t}\n\n\tif (!empty($conf->modules))\n\t{\n\t    $out .= \"<b>\".$langs->trans(\"Modules\").\":</b> \".join(', ', $conf->modules).\"<br>\\n\";\n\t}\n\n\tif (is_object($db))\n\t{\n\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t{\n\t\t\t$out .= \"<b>\".$langs->trans(\"DatabaseTypeManager\").\":</b> \".$db->type.\"<br>\\n\";\n\t\t\t$out .= \"<b>\".$langs->trans(\"RequestLastAccessInError\").\":</b> \".($db->lastqueryerror() ?dol_escape_htmltag($db->lastqueryerror()) : $langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out .= \"<b>\".$langs->trans(\"ReturnCodeLastAccessInError\").\":</b> \".($db->lasterrno() ?dol_escape_htmltag($db->lasterrno()) : $langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out .= \"<b>\".$langs->trans(\"InformationLastAccessInError\").\":</b> \".($db->lasterror() ?dol_escape_htmltag($db->lasterror()) : $langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out .= \"<br>\\n\";\n\t\t}\n\t\telse                            // Mode CLI\n\t\t{\n\t\t\t// No dol_escape_htmltag for output, we are in CLI mode\n\t\t\t$out .= '> '.$langs->transnoentities(\"DatabaseTypeManager\").\":\\n\".$db->type.\"\\n\";\n\t\t\t$out .= '> '.$langs->transnoentities(\"RequestLastAccessInError\").\":\\n\".($db->lastqueryerror() ? $db->lastqueryerror() : $langs->transnoentities(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out .= '> '.$langs->transnoentities(\"ReturnCodeLastAccessInError\").\":\\n\".($db->lasterrno() ? $db->lasterrno() : $langs->transnoentities(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out .= '> '.$langs->transnoentities(\"InformationLastAccessInError\").\":\\n\".($db->lasterror() ? $db->lasterror() : $langs->transnoentities(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t}\n\t\t$syslog .= \", sql=\".$db->lastquery();\n\t\t$syslog .= \", db_error=\".$db->lasterror();\n\t}\n\n\tif ($error || $errors)\n\t{\n\t\t$langs->load(\"errors\");\n\n\t\t// Merge all into $errors array\n\t\tif (is_array($error) && is_array($errors)) $errors = array_merge($error, $errors);\n\t\telseif (is_array($error)) $errors = $error;\n\t\telseif (is_array($errors)) $errors = array_merge(array($error), $errors);\n\t\telse $errors = array_merge(array($error));\n\n\t\tforeach ($errors as $msg)\n\t\t{\n\t\t\tif (empty($msg)) continue;\n\t\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t\t{\n\t\t\t\t$out .= \"<b>\".$langs->trans(\"Message\").\":</b> \".dol_escape_htmltag($msg).\"<br>\\n\";\n\t\t\t}\n\t\t\telse                        // Mode CLI\n\t\t\t{\n\t\t\t\t$out .= '> '.$langs->transnoentities(\"Message\").\":\\n\".$msg.\"\\n\";\n\t\t\t}\n\t\t\t$syslog .= \", msg=\".$msg;\n\t\t}\n\t}\n\tif (empty($dolibarr_main_prod) && $_SERVER['DOCUMENT_ROOT'] && function_exists('xdebug_print_function_stack') && function_exists('xdebug_call_file'))\n\t{\n\t\txdebug_print_function_stack();\n\t\t$out .= '<b>XDebug informations:</b>'.\"<br>\\n\";\n\t\t$out .= 'File: '.xdebug_call_file().\"<br>\\n\";\n\t\t$out .= 'Line: '.xdebug_call_line().\"<br>\\n\";\n\t\t$out .= 'Function: '.xdebug_call_function().\"<br>\\n\";\n\t\t$out .= \"<br>\\n\";\n\t}\n\n\tif (empty($dolibarr_main_prod)) print $out;\n\telse\t// This should not happen, except if there is a bug somewhere. Enabled and check log in such case.\n\t{\n\t\tprint 'This website or feature is currently temporarly not available or failed after a technical error.<br><br>This may be due to a maintenance operation. Current status of operation are on next line...<br><br>'.\"\\n\";\n\t\t$langs->load(\"errors\");\n\t\tprint $langs->trans(\"DolibarrHasDetectedError\").'. ';\n\t\tprint $langs->trans(\"YouCanSetOptionDolibarrMainProdToZero\");\n\t\tdefine(\"MAIN_CORE_ERROR\", 1);\n\t}\n\t//else print 'Sorry, an error occured but the parameter $dolibarr_main_prod is defined in conf file so no message is reported to your browser. Please read the log file for error message.';\n\tdol_syslog(\"Error \".$syslog, LOG_ERR);\n}\n\n/**\n * Show a public email and error code to contact if technical error\n *\n * @param\tstring\t$prefixcode\t\tPrefix of public error code\n * @param   string  $errormessage   Complete error message\n * @param\tarray\t$errormessages\tArray of error messages\n * @param\tstring\t$morecss\t\tMore css\n * @param\tstring\t$email\t\t\tEmail\n * @return\tvoid\n */\nfunction dol_print_error_email($prefixcode, $errormessage = '', $errormessages = array(), $morecss = 'error', $email = '')\n{\n\tglobal $langs, $conf;\n\n\tif (empty($email)) $email = $conf->global->MAIN_INFO_SOCIETE_MAIL;\n\n\t$langs->load(\"errors\");\n\t$now = dol_now();\n\n\tprint '<br><div class=\"center login_main_message\"><div class=\"'.$morecss.'\">';\n\tprint $langs->trans(\"ErrorContactEMail\", $email, $prefixcode.dol_print_date($now, '%Y%m%d%H%M%S'));\n\tif ($errormessage) print '<br><br>'.$errormessage;\n\tif (is_array($errormessages) && count($errormessages))\n\t{\n\t\tforeach ($errormessages as $mesgtoshow)\n\t\t{\n\t\t\tprint '<br><br>'.$mesgtoshow;\n\t\t}\n\t}\n\tprint '</div></div>';\n}\n\n/**\n *\tShow title line of an array\n *\n *\t@param\tstring\t$name        Label of field\n *\t@param\tstring\t$file        Url used when we click on sort picto\n *\t@param\tstring\t$field       Field to use for new sorting\n *\t@param\tstring\t$begin       (\"\" by defaut)\n *\t@param\tstring\t$moreparam   Add more parameters on sort url links (\"\" by default)\n *\t@param  string\t$moreattrib  Options of attribute td (\"\" by defaut, example: 'align=\"center\"')\n *\t@param  string\t$sortfield   Current field used to sort\n *\t@param  string\t$sortorder   Current sort order\n *  @param\tstring\t$prefix\t\t Prefix for css. Use space after prefix to add your own CSS tag.\n *  @param\tstring\t$tooltip\t Tooltip\n *\t@return\tvoid\n */\nfunction print_liste_field_titre($name, $file = \"\", $field = \"\", $begin = \"\", $moreparam = \"\", $moreattrib = \"\", $sortfield = \"\", $sortorder = \"\", $prefix = \"\", $tooltip = \"\")\n{\n\tprint getTitleFieldOfList($name, 0, $file, $field, $begin, $moreparam, $moreattrib, $sortfield, $sortorder, $prefix, 0, $tooltip);\n}\n\n/**\n *\tGet title line of an array\n *\n *\t@param\tstring\t$name        \t\tTranslation key of field\n *\t@param\tint\t\t$thead\t\t \t\t0=To use with standard table format, 1=To use inside <thead><tr>, 2=To use with <div>\n *\t@param\tstring\t$file        \t\tUrl used when we click on sort picto\n *\t@param\tstring\t$field       \t\tField to use for new sorting. Empty if this field is not sortable. Example \"t.abc\" or \"t.abc,t.def\"\n *\t@param\tstring\t$begin       \t\t(\"\" by defaut)\n *\t@param\tstring\t$moreparam   \t\tAdd more parameters on sort url links (\"\" by default)\n *\t@param  string\t$moreattrib  \t\tAdd more attributes on th (\"\" by defaut, example: 'align=\"center\"'). To add more css class, use param $prefix.\n *\t@param  string\t$sortfield   \t\tCurrent field used to sort (Ex: 'd.datep,d.id')\n *\t@param  string\t$sortorder   \t\tCurrent sort order (Ex: 'asc,desc')\n *  @param\tstring\t$prefix\t\t \t\tPrefix for css. Use space after prefix to add your own CSS tag, for example 'mycss '.\n *  @param\tstring\t$disablesortlink\t1=Disable sort link\n *  @param\tstring\t$tooltip\t \t\tTooltip\n *\t@return\tstring\n */\nfunction getTitleFieldOfList($name, $thead = 0, $file = \"\", $field = \"\", $begin = \"\", $moreparam = \"\", $moreattrib = \"\", $sortfield = \"\", $sortorder = \"\", $prefix = \"\", $disablesortlink = 0, $tooltip = '')\n{\n\tglobal $conf, $langs, $form;\n\t//print \"$name, $file, $field, $begin, $options, $moreattrib, $sortfield, $sortorder<br>\\n\";\n\n\tif ($moreattrib == 'class=\"right\"') $prefix .= 'right '; // For backward compatibility\n\n\t$sortorder = strtoupper($sortorder);\n\t$out = '';\n\t$sortimg = '';\n\n\t$tag = 'th';\n\tif ($thead == 2) $tag = 'div';\n\n\t$tmpsortfield = explode(',', $sortfield);\n\t$sortfield1 = trim($tmpsortfield[0]); // If $sortfield is 'd.datep,d.id', it becomes 'd.datep'\n\t$tmpfield = explode(',', $field);\n\t$field1 = trim($tmpfield[0]); // If $field is 'd.datep,d.id', it becomes 'd.datep'\n\n\tif (empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE)) {\n\t\t$prefix = 'wrapcolumntitle '.$prefix;\n\t}\n\t//var_dump('field='.$field.' field1='.$field1.' sortfield='.$sortfield.' sortfield1='.$sortfield1);\n\t// If field is used as sort criteria we use a specific css class liste_titre_sel\n\t// Example if (sortfield,field)=(\"nom\",\"xxx.nom\") or (sortfield,field)=(\"nom\",\"nom\")\n\tif ($field1 && ($sortfield1 == $field1 || $sortfield1 == preg_replace(\"/^[^\\.]+\\./\", \"\", $field1))) {\n\t\t$out .= '<'.$tag.' class=\"'.$prefix.'liste_titre_sel\" '.$moreattrib;\n\t\t$out .= (($field && empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE) && preg_match('/^[a-zA-Z_0-9\\s\\.\\-:]*$/', $name)) ? ' title=\"'.dol_escape_htmltag($langs->trans($name)).'\"' : '');\n\t\t$out .= '>';\n\t}\n\telse {\n\t\t$out .= '<'.$tag.' class=\"'.$prefix.'liste_titre\" '.$moreattrib;\n\t\t$out .= (($field && empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE) && preg_match('/^[a-zA-Z_0-9\\s\\.\\-:]*$/', $name)) ? ' title=\"'.dol_escape_htmltag($langs->trans($name)).'\"' : '');\n\t\t$out .= '>';\n\t}\n\n\tif (empty($thead) && $field && empty($disablesortlink))    // If this is a sort field\n\t{\n\t\t$options = preg_replace('/sortfield=([a-zA-Z0-9,\\s\\.]+)/i', '', $moreparam);\n\t\t$options = preg_replace('/sortorder=([a-zA-Z0-9,\\s\\.]+)/i', '', $options);\n\t\t$options = preg_replace('/&+/i', '&', $options);\n\t\tif (!preg_match('/^&/', $options)) $options = '&'.$options;\n\n\t\t$sortordertouseinlink = '';\n\t\tif ($field1 != $sortfield1) // We are on another field than current sorted field\n\t\t{\n\t\t\tif (preg_match('/^DESC/i', $sortorder))\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('desc,', count(explode(',', $field)));\n\t\t\t}\n\t\t\telse\t\t// We reverse the var $sortordertouseinlink\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('asc,', count(explode(',', $field)));\n\t\t\t}\n\t\t}\n\t\telse                        // We are on field that is the first current sorting criteria\n\t\t{\n\t\t\tif (preg_match('/^ASC/i', $sortorder))\t// We reverse the var $sortordertouseinlink\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('desc,', count(explode(',', $field)));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sortordertouseinlink .= str_repeat('asc,', count(explode(',', $field)));\n\t\t\t}\n\t\t}\n\t\t$sortordertouseinlink = preg_replace('/,$/', '', $sortordertouseinlink);\n\t\t$out .= '<a class=\"reposition\" href=\"'.$file.'?sortfield='.$field.'&sortorder='.$sortordertouseinlink.'&begin='.$begin.$options.'\"';\n\t\t//$out .= (empty($conf->global->MAIN_DISABLE_WRAPPING_ON_COLUMN_TITLE) ? ' title=\"'.dol_escape_htmltag($langs->trans($name)).'\"' : '');\n\t\t$out .= '>';\n\t}\n\n\tif ($tooltip) $out .= $form->textwithpicto($langs->trans($name), $langs->trans($tooltip));\n\telse $out .= $langs->trans($name);\n\n\tif (empty($thead) && $field && empty($disablesortlink))    // If this is a sort field\n\t{\n\t\t$out .= '</a>';\n\t}\n\n\tif (empty($thead) && $field)    // If this is a sort field\n\t{\n\t\t$options = preg_replace('/sortfield=([a-zA-Z0-9,\\s\\.]+)/i', '', $moreparam);\n\t\t$options = preg_replace('/sortorder=([a-zA-Z0-9,\\s\\.]+)/i', '', $options);\n\t\t$options = preg_replace('/&+/i', '&', $options);\n\t\tif (!preg_match('/^&/', $options)) $options = '&'.$options;\n\n\t\tif (!$sortorder || $field1 != $sortfield1)\n\t\t{\n\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (preg_match('/^DESC/', $sortorder)) {\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",1).'</a>';\n\t\t\t\t$sortimg .= '<span class=\"nowrap\">'.img_up(\"Z-A\", 0, 'paddingleft').'</span>';\n\t\t\t}\n\t\t\tif (preg_match('/^ASC/', $sortorder)) {\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",1).'</a>';\n\t\t\t\t//$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t\t\t$sortimg .= '<span class=\"nowrap\">'.img_down(\"A-Z\", 0, 'paddingleft').'</span>';\n\t\t\t}\n\t\t}\n\t}\n\n\t$out .= $sortimg;\n\n\t$out .= '</'.$tag.'>';\n\n\treturn $out;\n}\n\n/**\n *\tShow a title.\n *\n *\t@param\tstring\t$title\t\t\tTitle to show\n *\t@return\tstring\t\t\t\t\tTitle to show\n *  @deprecated\t\t\t\t\t\tUse load_fiche_titre instead\n *  @see load_fiche_titre()\n */\nfunction print_titre($title)\n{\n\tdol_syslog(__FUNCTION__.\" is deprecated\", LOG_WARNING);\n\n\tprint '<div class=\"titre\">'.$title.'</div>';\n}\n\n/**\n *\tShow a title with picto\n *\n *\t@param\tstring\t$title\t\t\t\tTitle to show\n *\t@param\tstring\t$mesg\t\t\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tint\t\t$id\t\t\t\t\tTo force an id on html objects\n * \t@return\tvoid\n *  @deprecated Use print load_fiche_titre instead\n */\nfunction print_fiche_titre($title, $mesg = '', $picto = 'generic', $pictoisfullpath = 0, $id = '')\n{\n\tprint load_fiche_titre($title, $mesg, $picto, $pictoisfullpath, $id);\n}\n\n/**\n *\tLoad a title with picto\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show\n *\t@param\tstring\t$morehtmlright\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tstring\t$id\t\t\t\t\tTo force an id on html objects\n *  @param  string  $morecssontable     More css on table\n *\t@param\tstring\t$morehtmlcenter\t\tAdded message to show on center\n * \t@return\tstring\n *  @see print_barre_liste()\n */\nfunction load_fiche_titre($titre, $morehtmlright = '', $picto = 'generic', $pictoisfullpath = 0, $id = '', $morecssontable = '', $morehtmlcenter = '')\n{\n\tglobal $conf;\n\n\t$return = '';\n\n\tif ($picto == 'setup') $picto = 'generic';\n\n\t$return .= \"\\n\";\n\t$return .= '<table '.($id ? 'id=\"'.$id.'\" ' : '').'class=\"centpercent notopnoleftnoright table-fiche-title'.($morecssontable ? ' '.$morecssontable : '').'\">'; // maring bottom must be same than into print_barre_list\n\t$return .= '<tr class=\"titre\">';\n\tif ($picto) $return .= '<td class=\"nobordernopadding widthpictotitle valignmiddle col-picto\">'.img_picto('', $picto, 'class=\"valignmiddle widthpictotitle pictotitle\"', $pictoisfullpath).'</td>';\n\t$return .= '<td class=\"nobordernopadding valignmiddle col-title\">';\n\t$return .= '<div class=\"titre inline-block\">'.$titre.'</div>';\n\t$return .= '</td>';\n\tif (dol_strlen($morehtmlcenter))\n\t{\n\t\t$return .= '<td class=\"nobordernopadding center valignmiddle\">'.$morehtmlcenter.'</td>';\n\t}\n\tif (dol_strlen($morehtmlright))\n\t{\n\t\t$return .= '<td class=\"nobordernopadding titre_right wordbreakimp right valignmiddle\">'.$morehtmlright.'</td>';\n\t}\n\t$return .= '</tr></table>'.\"\\n\";\n\n\treturn $return;\n}\n\n/**\n *\tPrint a title with navigation controls for pagination\n *\n *\t@param\tstring\t    $titre\t\t\t\tTitle to show (required)\n *\t@param\tint   \t    $page\t\t\t\tNumero of page to show in navigation links (required)\n *\t@param\tstring\t    $file\t\t\t\tUrl of page (required)\n *\t@param\tstring\t    $options         \tMore parameters for links ('' by default, does not include sortfield neither sortorder). Value must be 'urlencoded' before calling function.\n *\t@param\tstring    \t$sortfield       \tField to sort on ('' by default)\n *\t@param\tstring\t    $sortorder       \tOrder to sort ('' by default)\n *\t@param\tstring\t    $morehtmlcenter     String in the middle ('' by default). We often find here string $massaction comming from $form->selectMassAction()\n *\t@param\tint\t\t    $num\t\t\t\tNumber of records found by select with limit+1\n *\t@param\tint|string  $totalnboflines\t\tTotal number of records/lines for all pages (if known). Use a negative value of number to not show number. Use '' if unknown.\n *\t@param\tstring\t    $picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t    $pictoisfullpath\t1=Icon name is a full absolute url of image\n *  @param\tstring\t    $morehtmlright\t\tMore html to show\n *  @param  string      $morecss            More css to the table\n *  @param  int         $limit              Max number of lines (-1 = use default, 0 = no limit, > 0 = limit).\n *  @param  int         $hideselectlimit    Force to hide select limit\n *  @param  int         $hidenavigation     Force to hide all navigation tools\n *  @param  int\t\t\t$pagenavastextinput 1=Do not suggest list of pages to navigate but suggest the page number into an input field.\n *\t@return\tvoid\n */\nfunction print_barre_liste($titre, $page, $file, $options = '', $sortfield = '', $sortorder = '', $morehtmlcenter = '', $num = -1, $totalnboflines = '', $picto = 'generic', $pictoisfullpath = 0, $morehtmlright = '', $morecss = '', $limit = -1, $hideselectlimit = 0, $hidenavigation = 0, $pagenavastextinput = 0)\n{\n\tglobal $conf, $langs;\n\n\t$savlimit = $limit;\n\t$savtotalnboflines = $totalnboflines;\n\t$totalnboflines = abs($totalnboflines);\n\n\tif ($picto == 'setup') $picto = 'title_setup.png';\n\tif (($conf->browser->name == 'ie') && $picto == 'generic') $picto = 'title.gif';\n\tif ($limit < 0) $limit = $conf->liste_limit;\n\tif ($savlimit != 0 && (($num > $limit) || ($num == -1) || ($limit == 0)))\n\t{\n\t\t$nextpage = 1;\n\t}\n\telse\n\t{\n\t\t$nextpage = 0;\n\t}\n\t//print 'totalnboflines='.$totalnboflines.'-savlimit='.$savlimit.'-limit='.$limit.'-num='.$num.'-nextpage='.$nextpage;\n\n\tprint \"\\n\";\n\tprint \"<!-- Begin title '\".$titre.\"' -->\\n\";\n\tprint '<table class=\"centpercent notopnoleftnoright table-fiche-title'.($morecss ? ' '.$morecss : '').'\"><tr>'; // maring bottom must be same than into load_fiche_tire\n\n\t// Left\n\n\tif ($picto && $titre) print '<td class=\"nobordernopadding widthpictotitle valignmiddle col-picto\">'.img_picto('', $picto, 'class=\"valignmiddle pictotitle widthpictotitle\"', $pictoisfullpath).'</td>';\n\tprint '<td class=\"nobordernopadding valignmiddle col-title\">';\n\tprint '<div class=\"titre inline-block\">'.$titre;\n\tif (!empty($titre) && $savtotalnboflines >= 0 && (string) $savtotalnboflines != '') print '<span class=\"opacitymedium colorblack paddingleft\">('.$totalnboflines.')</span>';\n\tprint '</div></td>';\n\n\t// Center\n\tif ($morehtmlcenter)\n\t{\n\t\tprint '<td class=\"nobordernopadding center valignmiddle\">'.$morehtmlcenter.'</td>';\n\t}\n\n\t// Right\n\tprint '<td class=\"nobordernopadding valignmiddle right\">';\n\tif ($sortfield) $options .= \"&sortfield=\".urlencode($sortfield);\n\tif ($sortorder) $options .= \"&sortorder=\".urlencode($sortorder);\n\t// Show navigation bar\n\t$pagelist = '';\n\tif ($savlimit != 0 && ($page > 0 || $num > $limit))\n\t{\n\t\tif ($totalnboflines)\t// If we know total nb of lines\n\t\t{\n\t\t\t// Define nb of extra page links before and after selected page + ... + first or last\n\t\t\t$maxnbofpage = (empty($conf->dol_optimize_smallscreen) ? 4 : 0);\n\n\t\t\tif ($limit > 0) $nbpages = ceil($totalnboflines / $limit);\n\t\t\telse $nbpages = 1;\n\t\t\t$cpt = ($page - $maxnbofpage);\n\t\t\tif ($cpt < 0) { $cpt = 0; }\n\n\t\t\tif ($cpt >= 1)\n\t\t\t{\n\t\t\t\tif (empty($pagenavastextinput)) {\n\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page=0'.$options.'\">1</a></li>';\n\t\t\t\t\tif ($cpt > 2) $pagelist .= '<li class=\"pagination\"><span class=\"inactive\">...</span></li>';\n\t\t\t\t\telseif ($cpt == 2) $pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page=1'.$options.'\">2</a></li>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif ($pagenavastextinput) {\n\t\t\t\t\tif ($cpt == $page)\n\t\t\t\t\t{\n\t\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><input type=\"text\" class=\"width25 center pageplusone\" name=\"pageplusone\" value=\"'.($page + 1).'\"></li>';\n\t\t\t\t\t\t$pagelist .= '/';\n\t\t\t\t\t\t//if (($cpt + 1) < $nbpages) $pagelist .= '/';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($cpt == $page)\n\t\t\t\t\t{\n\t\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><span class=\"active\">'.($page + 1).'</span></li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.$cpt.$options.'\">'.($cpt + 1).'</a></li>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t\twhile ($cpt < $nbpages && $cpt <= ($page + $maxnbofpage));\n\n\t\t\tif (empty($pagenavastextinput)) {\n\t\t\t\tif ($cpt < $nbpages)\n\t\t\t\t{\n\t\t\t\t\tif ($cpt < $nbpages - 2) $pagelist .= '<li class=\"pagination\"><span class=\"inactive\">...</span></li>';\n\t\t\t\t\telseif ($cpt == $nbpages - 2) $pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.($nbpages - 2).$options.'\">'.($nbpages - 1).'</a></li>';\n\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.($nbpages - 1).$options.'\">'.$nbpages.'</a></li>';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//var_dump($page.' '.$cpt.' '.$nbpages);\n\t\t\t\t//if (($page + 1) < $nbpages) {\n\t\t\t\t\t$pagelist .= '<li class=\"pagination\"><a href=\"'.$file.'?page='.($nbpages - 1).$options.'\">'.$nbpages.'</a></li>';\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$pagelist .= '<li class=\"pagination\"><span class=\"active\">'.($page + 1).\"</li>\";\n\t\t}\n\t}\n\n\tif ($savlimit || $morehtmlright) {\n\t\tprint_fleche_navigation($page, $file, $options, $nextpage, $pagelist, $morehtmlright, $savlimit, $totalnboflines, $hideselectlimit); // output the div and ul for previous/last completed with page numbers into $pagelist\n\t}\n\n\t// js to autoselect page field on focus\n\tif ($pagenavastextinput) {\n\t\tprint ajax_autoselect('.pageplusone');\n\t}\n\n\tprint '</td>';\n\n\tprint '</tr></table>'.\"\\n\";\n\tprint \"<!-- End title -->\\n\\n\";\n}\n\n/**\n *\tFunction to show navigation arrows into lists\n *\n *\t@param\tint\t\t\t\t$page\t\t\t\tNumber of page\n *\t@param\tstring\t\t\t$file\t\t\t\tPage URL (in most cases provided with $_SERVER[\"PHP_SELF\"])\n *\t@param\tstring\t\t\t$options         \tOther url parameters to propagate (\"\" by default, may include sortfield and sortorder)\n *\t@param\tinteger\t\t\t$nextpage\t    \tDo we show a next page button\n *\t@param\tstring\t\t\t$betweenarrows\t\tHTML content to show between arrows. MUST contains '<li> </li>' tags or '<li><span> </span></li>'.\n *  @param\tstring\t\t\t$afterarrows\t\tHTML content to show after arrows. Must NOT contains '<li> </li>' tags.\n *  @param  int             $limit              Max nb of record to show  (-1 = no combo with limit, 0 = no limit, > 0 = limit)\n *\t@param\tint\t\t        $totalnboflines\t\tTotal number of records/lines for all pages (if known)\n *  @param  int             $hideselectlimit    Force to hide select limit\n *\t@return\tvoid\n */\nfunction print_fleche_navigation($page, $file, $options = '', $nextpage = 0, $betweenarrows = '', $afterarrows = '', $limit = -1, $totalnboflines = 0, $hideselectlimit = 0)\n{\n\tglobal $conf, $langs;\n\n\tprint '<div class=\"pagination\"><ul>';\n\tif ((int) $limit > 0 && empty($hideselectlimit))\n\t{\n\t\t$pagesizechoices = '10:10,15:15,20:20,30:30,40:40,50:50,100:100,250:250,500:500,1000:1000,5000:5000';\n\t\t//$pagesizechoices.=',0:'.$langs->trans(\"All\");     // Not yet supported\n\t\t//$pagesizechoices.=',2:2';\n\t\tif (!empty($conf->global->MAIN_PAGESIZE_CHOICES)) $pagesizechoices = $conf->global->MAIN_PAGESIZE_CHOICES;\n\n\t\tprint '<li class=\"pagination\">';\n\t\tprint '<select class=\"flat selectlimit\" name=\"limit\" title=\"'.dol_escape_htmltag($langs->trans(\"MaxNbOfRecordPerPage\")).'\">';\n\t\t$tmpchoice = explode(',', $pagesizechoices);\n\t\t$tmpkey = $limit.':'.$limit;\n\t\tif (!in_array($tmpkey, $tmpchoice)) $tmpchoice[] = $tmpkey;\n\t\t$tmpkey = $conf->liste_limit.':'.$conf->liste_limit;\n\t\tif (!in_array($tmpkey, $tmpchoice)) $tmpchoice[] = $tmpkey;\n\t\tasort($tmpchoice, SORT_NUMERIC);\n\t\tforeach ($tmpchoice as $val)\n\t\t{\n\t\t\t$selected = '';\n\t\t\t$tmp = explode(':', $val);\n\t\t\t$key = $tmp[0];\n\t\t\t$val = $tmp[1];\n\t\t\tif ($key != '' && $val != '')\n\t\t\t{\n\t\t\t\tif ((int) $key == (int) $limit)\n\t\t\t\t{\n\t\t\t\t\t$selected = ' selected=\"selected\"';\n\t\t\t\t}\n\t\t\t\tprint '<option name=\"'.$key.'\"'.$selected.'>'.dol_escape_htmltag($val).'</option>'.\"\\n\";\n\t\t\t}\n\t\t}\n\t\tprint '</select>';\n\t\tif ($conf->use_javascript_ajax)\n\t\t{\n\t\t\tprint '<!-- JS CODE TO ENABLE select limit to launch submit of page -->\n            \t\t<script>\n                \tjQuery(document).ready(function () {\n            \t  \t\tjQuery(\".selectlimit\").change(function() {\n                            console.log(\"Change limit. Send submit\");\n                            $(this).parents(\\'form:first\\').submit();\n            \t  \t\t});\n                \t});\n            \t\t</script>\n                ';\n\t\t}\n\t\tprint '</li>';\n\t}\n\tif ($page > 0)\n\t{\n\t\tprint '<li class=\"pagination paginationpage\"><a class=\"paginationprevious\" href=\"'.$file.'?page='.($page - 1).$options.'\"><i class=\"fa fa-chevron-left\" title=\"'.dol_escape_htmltag($langs->trans(\"Previous\")).'\"></i></a></li>';\n\t}\n\tif ($betweenarrows)\n\t{\n\t\tprint '<!--<div class=\"betweenarrows nowraponall inline-block\">-->';\n\t\tprint $betweenarrows;\n\t\tprint '<!--</div>-->';\n\t}\n\tif ($nextpage > 0)\n\t{\n\t\tprint '<li class=\"pagination paginationpage\"><a class=\"paginationnext\" href=\"'.$file.'?page='.($page + 1).$options.'\"><i class=\"fa fa-chevron-right\" title=\"'.dol_escape_htmltag($langs->trans(\"Next\")).'\"></i></a></li>';\n\t}\n\tif ($afterarrows)\n\t{\n\t\tprint '<li class=\"paginationafterarrows\">';\n\t\tprint $afterarrows;\n\t\tprint '</li>';\n\t}\n\tprint '</ul></div>'.\"\\n\";\n}\n\n\n/**\n *\tReturn a string with VAT rate label formated for view output\n *\tUsed into pdf and HTML pages\n *\n *\t@param\tstring\t$rate\t\t\tRate value to format ('19.6', '19,6', '19.6%', '19,6%', '19.6 (CODEX)', ...)\n *  @param\tboolean\t$addpercent\t\tAdd a percent % sign in output\n *\t@param\tint\t\t$info_bits\t\tMiscellaneous information on vat (0=Default, 1=French NPR vat)\n *\t@param\tint\t\t$usestarfornpr\t-1=Never show, 0 or 1=Use '*' for NPR vat rates\n *  @return\tstring\t\t\t\t\tString with formated amounts ('19,6' or '19,6%' or '8.5% (NPR)' or '8.5% *' or '19,6 (CODEX)')\n */\nfunction vatrate($rate, $addpercent = false, $info_bits = 0, $usestarfornpr = 0)\n{\n\t$morelabel = '';\n\n\tif (preg_match('/%/', $rate))\n\t{\n\t\t$rate = str_replace('%', '', $rate);\n\t\t$addpercent = true;\n\t}\n\tif (preg_match('/\\((.*)\\)/', $rate, $reg))\n\t{\n\t\t$morelabel = ' ('.$reg[1].')';\n\t\t$rate = preg_replace('/\\s*'.preg_quote($morelabel, '/').'/', '', $rate);\n\t}\n\tif (preg_match('/\\*/', $rate))\n\t{\n\t\t$rate = str_replace('*', '', $rate);\n\t\t$info_bits |= 1;\n\t}\n\n\t// If rate is '9/9/9' we don't change it.  If rate is '9.000' we apply price()\n\tif (!preg_match('/\\//', $rate)) $ret = price($rate, 0, '', 0, 0).($addpercent ? '%' : '');\n\telse\n\t{\n\t\t// TODO Split on / and output with a price2num to have clean numbers without ton of 000.\n\t\t$ret = $rate.($addpercent ? '%' : '');\n\t}\n\tif (($info_bits & 1) && $usestarfornpr >= 0) $ret .= ' *';\n\t$ret .= $morelabel;\n\treturn $ret;\n}\n\n\n/**\n *\t\tFunction to format a value into an amount for visual output\n *\t\tFunction used into PDF and HTML pages\n *\n *\t\t@param\tfloat\t\t$amount\t\t\tAmount to format\n *\t\t@param\tinteger\t\t$form\t\t\tType of format, HTML or not (not by default)\n *\t\t@param\tTranslate\t$outlangs\t\tObject langs for output\n *\t\t@param\tint\t\t\t$trunc\t\t\t1=Truncate if there is more decimals than MAIN_MAX_DECIMALS_SHOWN (default), 0=Does not truncate. Deprecated because amount are rounded (to unit or total amount accurancy) before beeing inserted into database or after a computation, so this parameter should be useless.\n *\t\t@param\tint\t\t\t$rounding\t\tMinimum number of decimal to show. If 0, no change, if -1, we use min($conf->global->MAIN_MAX_DECIMALS_UNIT,$conf->global->MAIN_MAX_DECIMALS_TOT)\n *\t\t@param\tint\t\t\t$forcerounding\tForce the number of decimal to forcerounding decimal (-1=do not force)\n *\t\t@param\tstring\t\t$currency_code\tTo add currency symbol (''=add nothing, 'auto'=Use default currency, 'XXX'=add currency symbols for XXX currency)\n *\t\t@return\tstring\t\t\t\t\t\tChaine avec montant formate\n *\n *\t\t@see\tprice2num()\t\t\t\t\tRevert function of price\n */\nfunction price($amount, $form = 0, $outlangs = '', $trunc = 1, $rounding = -1, $forcerounding = -1, $currency_code = '')\n{\n\tglobal $langs, $conf;\n\n\t// Clean parameters\n\tif (empty($amount)) $amount = 0; // To have a numeric value if amount not defined or = ''\n\t$amount = (is_numeric($amount) ? $amount : 0); // Check if amount is numeric, for example, an error occured when amount value = o (letter) instead 0 (number)\n\tif ($rounding < 0) $rounding = min($conf->global->MAIN_MAX_DECIMALS_UNIT, $conf->global->MAIN_MAX_DECIMALS_TOT);\n\t$nbdecimal = $rounding;\n\n\t// Output separators by default (french)\n\t$dec = ','; $thousand = ' ';\n\n\t// If $outlangs not forced, we use use language\n\tif (!is_object($outlangs)) $outlangs = $langs;\n\n\tif ($outlangs->transnoentitiesnoconv(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec = $outlangs->transnoentitiesnoconv(\"SeparatorDecimal\");\n\tif ($outlangs->transnoentitiesnoconv(\"SeparatorThousand\") != \"SeparatorThousand\") $thousand = $outlangs->transnoentitiesnoconv(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand = '';\n\telseif ($thousand == 'Space') $thousand = ' ';\n\t//print \"outlangs=\".$outlangs->defaultlang.\" amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t//print \"amount=\".$amount.\"-\";\n\t$amount = str_replace(',', '.', $amount); // should be useless\n\t//print $amount.\"-\";\n\t$datas = explode('.', $amount);\n\t$decpart = isset($datas[1]) ? $datas[1] : '';\n\t$decpart = preg_replace('/0+$/i', '', $decpart); // Supprime les 0 de fin de partie decimale\n\t//print \"decpart=\".$decpart.\"<br>\";\n\t$end = '';\n\n\t// We increase nbdecimal if there is more decimal than asked (to not loose information)\n\tif (dol_strlen($decpart) > $nbdecimal) $nbdecimal = dol_strlen($decpart);\n\t// Si on depasse max\n\tif ($trunc && $nbdecimal > $conf->global->MAIN_MAX_DECIMALS_SHOWN)\n\t{\n\t\t$nbdecimal = $conf->global->MAIN_MAX_DECIMALS_SHOWN;\n\t\tif (preg_match('/\\.\\.\\./i', $conf->global->MAIN_MAX_DECIMALS_SHOWN))\n\t\t{\n\t\t\t// Si un affichage est tronque, on montre des ...\n\t\t\t$end = '...';\n\t\t}\n\t}\n\n\t// If force rounding\n\tif ($forcerounding >= 0) $nbdecimal = $forcerounding;\n\n\t// Format number\n\t$output = number_format($amount, $nbdecimal, $dec, $thousand);\n\tif ($form)\n\t{\n\t\t$output = preg_replace('/\\s/', '&nbsp;', $output);\n\t\t$output = preg_replace('/\\'/', '&#039;', $output);\n\t}\n\t// Add symbol of currency if requested\n\t$cursymbolbefore = $cursymbolafter = '';\n\tif ($currency_code)\n\t{\n\t\tif ($currency_code == 'auto') $currency_code = $conf->currency;\n\n\t\t$listofcurrenciesbefore = array('AUD', 'CAD', 'CNY', 'COP', 'CLP', 'GBP', 'HKD', 'MXN', 'PEN', 'USD');\n\t\t$listoflanguagesbefore = array('nl_NL');\n\t\tif (in_array($currency_code, $listofcurrenciesbefore) || in_array($outlangs->defaultlang, $listoflanguagesbefore))\n\t\t{\n\t\t    $cursymbolbefore .= $outlangs->getCurrencySymbol($currency_code);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$tmpcur = $outlangs->getCurrencySymbol($currency_code);\n\t\t\t$cursymbolafter .= ($tmpcur == $currency_code ? ' '.$tmpcur : $tmpcur);\n\t\t}\n\t}\n\t$output = $cursymbolbefore.$output.$end.($cursymbolafter ? ' ' : '').$cursymbolafter;\n\n\treturn $output;\n}\n\n/**\n *\tFunction that return a number with universal decimal format (decimal separator is '.') from an amount typed by a user.\n *\tFunction to use on each input amount before any numeric test or database insert. A better name for this function\n *  should be roundtext2num().\n *\n *\t@param\tstring|float\t$amount\t\t\tAmount to convert/clean or round\n *\t@param\tstring\t\t\t$rounding\t\t''=No rounding\n * \t\t\t\t\t\t\t\t\t\t\t'MU'=Round to Max unit price (MAIN_MAX_DECIMALS_UNIT)\n *\t\t\t\t\t\t\t\t\t\t\t'MT'=Round to Max for totals with Tax (MAIN_MAX_DECIMALS_TOT)\n *\t\t\t\t\t\t\t\t\t\t\t'MS'=Round to Max for stock quantity (MAIN_MAX_DECIMALS_STOCK)\n *      \t\t                            'CR'=Currency rate\n *\t\t\t\t\t\t\t\t\t\t\tNumeric = Nb of digits for rounding\n * \t@param\tint\t\t\t\t$option\t\t\tPut 1 if you know that content is already universal format number (so no correction on decimal will be done)\n * \t\t\t\t\t\t\t\t\t\t\tPut 2 if you know that number is a user input (so we know we don't have to fix decimal separator).\n *\t@return\tstring\t\t\t\t\t\t\tAmount with universal numeric format (Example: '99.99999').\n *\t\t\t\t\t\t\t\t\t\t\tIf conversion fails, it return text unchanged if $rounding = '' or '0' if $rounding is defined.\n *\t\t\t\t\t\t\t\t\t\t\tIf amount is null or '', it returns '' if $rounding = '' or '0' if $rounding is defined..\n *\n *\t@see    price()\t\t\t\t\t\t\tOpposite function of price2num\n */\nfunction price2num($amount, $rounding = '', $option = 0)\n{\n\tglobal $langs, $conf;\n\n\t// Round PHP function does not allow number like '1,234.56' nor '1.234,56' nor '1 234,56'\n\t// Numbers must be '1234.56'\n\t// Decimal delimiter for PHP and database SQL requests must be '.'\n\t$dec = ','; $thousand = ' ';\n\tif ($langs->transnoentitiesnoconv(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec = $langs->transnoentitiesnoconv(\"SeparatorDecimal\");\n\tif ($langs->transnoentitiesnoconv(\"SeparatorThousand\") != \"SeparatorThousand\") $thousand = $langs->transnoentitiesnoconv(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand = '';\n\telseif ($thousand == 'Space') $thousand = ' ';\n\t//print \"amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t// Convert value to universal number format (no thousand separator, '.' as decimal separator)\n\tif ($option != 1) {\t// If not a PHP number or unknown, we change or clean format\n\t\t//print 'PP'.$amount.' - '.$dec.' - '.$thousand.' - '.intval($amount).'<br>';\n\t\tif (!is_numeric($amount)) {\n\t\t\t$amount = preg_replace('/[a-zA-Z\\/\\\\\\*\\(\\)\\<\\>]/', '', $amount);\n\t\t}\n\n\t\tif ($option == 2 && $thousand == '.' && preg_match('/\\.(\\d\\d\\d)$/', (string) $amount)) {\t// It means the . is used as a thousand separator and string come frominput data, so 1.123 is 1123\n\t\t\t$amount = str_replace($thousand, '', $amount);\n\t\t}\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be like defined by Dolibarr setup.\n\t\t// So if number was already a good number, it is converted into local Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps = sprintf(\"%0.10F\", $amount - intval($amount)); // temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps = preg_replace('/([\\.1-9])0+$/', '\\\\1', $temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec = max(0, dol_strlen($temps) - 2); // -2 to remove \"0.\"\n\t\t\t$amount = number_format($amount, $nbofdec, $dec, $thousand);\n\t\t}\n\t\t//print \"QQ\".$amount.\"<br>\\n\";\n\n\t\t// Now make replace (the main goal of function)\n\t\tif ($thousand != ',' && $thousand != '.') {\n\t\t\t$amount = str_replace(',', '.', $amount); // To accept 2 notations for french users\n\t\t}\n\t\t$amount = str_replace(' ', '', $amount); // To avoid spaces\n\t\t$amount = str_replace($thousand, '', $amount); // Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount = str_replace($dec, '.', $amount);\n\t}\n\n\t// Now, make a rounding if required\n\tif ($rounding)\n\t{\n\t\t$nbofdectoround = '';\n\t\tif ($rounding == 'MU')     $nbofdectoround = $conf->global->MAIN_MAX_DECIMALS_UNIT;\n\t\telseif ($rounding == 'MT') $nbofdectoround = $conf->global->MAIN_MAX_DECIMALS_TOT;\n\t\telseif ($rounding == 'MS') $nbofdectoround = empty($conf->global->MAIN_MAX_DECIMALS_STOCK) ? 5 : $conf->global->MAIN_MAX_DECIMALS_STOCK;\n\t\telseif ($rounding == 'CR') $nbofdectoround = 8;\n\t\telseif (is_numeric($rounding))  $nbofdectoround = $rounding;\n\t\t//print \"RR\".$amount.' - '.$nbofdectoround.'<br>';\n\t\tif (dol_strlen($nbofdectoround)) $amount = round($amount, $nbofdectoround); // $nbofdectoround can be 0.\n\t\telse return 'ErrorBadParameterProvidedToFunction';\n\t\t//print 'SS'.$amount.' - '.$nbofdec.' - '.$dec.' - '.$thousand.' - '.$nbofdectoround.'<br>';\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be defined by Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps = sprintf(\"%0.10F\", $amount - intval($amount)); // temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps = preg_replace('/([\\.1-9])0+$/', '\\\\1', $temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec = max(0, dol_strlen($temps) - 2); // -2 to remove \"0.\"\n\t\t\t$amount = number_format($amount, min($nbofdec, $nbofdectoround), $dec, $thousand); // Convert amount to format with dolibarr dec and thousand\n\t\t}\n\t\t//print \"TT\".$amount.'<br>';\n\n\t\t// Always make replace because each math function (like round) replace\n\t\t// with local values and we want a number that has a SQL string format x.y\n\t\tif ($thousand != ',' && $thousand != '.') $amount = str_replace(',', '.', $amount); // To accept 2 notations for french users\n\t\t$amount = str_replace(' ', '', $amount); // To avoid spaces\n\t\t$amount = str_replace($thousand, '', $amount); // Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount = str_replace($dec, '.', $amount);\n\t}\n\n\treturn $amount;\n}\n\n/**\n * Output a dimension with best unit\n *\n * @param   float       $dimension      Dimension\n * @param   int         $unit           Unit scale of dimension (Example: 0=kg, -3=g, -6=mg, 98=ounce, 99=pound, ...)\n * @param   string      $type           'weight', 'volume', ...\n * @param   Translate   $outputlangs    Translate language object\n * @param   int         $round          -1 = non rounding, x = number of decimal\n * @param   string      $forceunitoutput    'no' or numeric (-3, -6, ...) compared to $unit (In most case, this value is value defined into $conf->global->MAIN_WEIGHT_DEFAULT_UNIT)\n * @return  string                      String to show dimensions\n */\nfunction showDimensionInBestUnit($dimension, $unit, $type, $outputlangs, $round = -1, $forceunitoutput = 'no')\n{\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\n\n\tif (($forceunitoutput == 'no' && $dimension < 1 / 10000 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == -6))\n\t{\n\t\t$dimension = $dimension * 1000000;\n\t\t$unit = $unit - 6;\n\t}\n\telseif (($forceunitoutput == 'no' && $dimension < 1 / 10 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == -3))\n\t{\n\t\t$dimension = $dimension * 1000;\n\t\t$unit = $unit - 3;\n\t}\n\telseif (($forceunitoutput == 'no' && $dimension > 100000000 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == 6))\n\t{\n\t\t$dimension = $dimension / 1000000;\n\t\t$unit = $unit + 6;\n\t}\n\telseif (($forceunitoutput == 'no' && $dimension > 100000 && $unit < 90) || (is_numeric($forceunitoutput) && $forceunitoutput == 3))\n\t{\n\t\t$dimension = $dimension / 1000;\n\t\t$unit = $unit + 3;\n\t}\n\t// Special case when we want output unit into pound or ounce\n\t/* TODO\n\tif ($unit < 90 && $type == 'weight' && is_numeric($forceunitoutput) && (($forceunitoutput == 98) || ($forceunitoutput == 99))\n\t{\n\t    $dimension = // convert dimension from standard unit into ounce or pound\n\t    $unit = $forceunitoutput;\n\t}\n\tif ($unit > 90 && $type == 'weight' && is_numeric($forceunitoutput) && $forceunitoutput < 90)\n\t{\n\t    $dimension = // convert dimension from standard unit into ounce or pound\n\t    $unit = $forceunitoutput;\n\t}*/\n\n\t$ret = price($dimension, 0, $outputlangs, 0, 0, $round).' '.measuringUnitString(0, $type, $unit);\n\n\treturn $ret;\n}\n\n\n/**\n *\tReturn localtax rate for a particular vat, when selling a product with vat $vatrate, from a $thirdparty_buyer to a $thirdparty_seller\n *  Note: This function applies same rules than get_default_tva\n *\n * \t@param\tfloat\t\t$vatrate\t\t        Vat rate. Can be '8.5' or '8.5 (VATCODEX)' for example\n * \t@param  int\t\t\t$local\t\t         \tLocal tax to search and return (1 or 2 return only tax rate 1 or tax rate 2)\n *  @param  Societe\t\t$thirdparty_buyer    \tObject of buying third party\n *  @param\tSociete\t\t$thirdparty_seller\t\tObject of selling third party ($mysoc if not defined)\n *  @param\tint\t\t\t$vatnpr\t\t\t\t\tIf vat rate is NPR or not\n * \t@return\tmixed\t\t\t   \t\t\t\t\t0 if not found, localtax rate if found\n *  @see get_default_tva()\n */\nfunction get_localtax($vatrate, $local, $thirdparty_buyer = \"\", $thirdparty_seller = \"\", $vatnpr = 0)\n{\n\tglobal $db, $conf, $mysoc;\n\n\tif (empty($thirdparty_seller) || !is_object($thirdparty_seller)) $thirdparty_seller = $mysoc;\n\n\tdol_syslog(\"get_localtax tva=\".$vatrate.\" local=\".$local.\" thirdparty_buyer id=\".(is_object($thirdparty_buyer) ? $thirdparty_buyer->id : '').\"/country_code=\".(is_object($thirdparty_buyer) ? $thirdparty_buyer->country_code : '').\" thirdparty_seller id=\".$thirdparty_seller->id.\"/country_code=\".$thirdparty_seller->country_code.\" thirdparty_seller localtax1_assuj=\".$thirdparty_seller->localtax1_assuj.\"  thirdparty_seller localtax2_assuj=\".$thirdparty_seller->localtax2_assuj);\n\n\t$vatratecleaned = $vatrate;\n\t$reg = array();\n\tif (preg_match('/^(.*)\\s*\\((.*)\\)$/', $vatrate, $reg))      // If vat is \"xx (yy)\"\n\t{\n\t\t$vatratecleaned = trim($reg[1]);\n\t\t$vatratecode = $reg[2];\n\t}\n\n\t/*if ($thirdparty_buyer->country_code != $thirdparty_seller->country_code)\n\t{\n\t\treturn 0;\n\t}*/\n\n\t// Some test to guess with no need to make database access\n\tif ($mysoc->country_code == 'ES') // For spain localtaxes 1 and 2, tax is qualified if buyer use local tax\n\t{\n\t\tif ($local == 1)\n\t\t{\n\t\t\tif (!$mysoc->localtax1_assuj || (string) $vatratecleaned == \"0\") return 0;\n\t\t\tif ($thirdparty_seller->id == $mysoc->id)\n\t\t\t{\n\t\t\t\tif (!$thirdparty_buyer->localtax1_assuj) return 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!$thirdparty_seller->localtax1_assuj) return 0;\n\t\t\t}\n\t\t}\n\n\t\tif ($local == 2)\n\t\t{\n\t\t\t//if (! $mysoc->localtax2_assuj || (string) $vatratecleaned == \"0\") return 0;\n\t\t\tif (!$mysoc->localtax2_assuj) return 0; // If main vat is 0, IRPF may be different than 0.\n\t\t\tif ($thirdparty_seller->id == $mysoc->id)\n\t\t\t{\n\t\t\t\tif (!$thirdparty_buyer->localtax2_assuj) return 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!$thirdparty_seller->localtax2_assuj) return 0;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($local == 1 && !$thirdparty_seller->localtax1_assuj) return 0;\n\t\tif ($local == 2 && !$thirdparty_seller->localtax2_assuj) return 0;\n\t}\n\n\t// For some country MAIN_GET_LOCALTAXES_VALUES_FROM_THIRDPARTY is forced to on.\n\tif (in_array($mysoc->country_code, array('ES')))\n\t{\n\t\t$conf->global->MAIN_GET_LOCALTAXES_VALUES_FROM_THIRDPARTY = 1;\n\t}\n\n\t// Search local taxes\n\tif (!empty($conf->global->MAIN_GET_LOCALTAXES_VALUES_FROM_THIRDPARTY))\n\t{\n\t\tif ($local == 1)\n\t\t{\n\t\t\tif ($thirdparty_seller != $mysoc)\n\t\t\t{\n\t\t\t\tif (!isOnlyOneLocalTax($local))  // TODO We should provide $vatrate to search on correct line and not always on line with highest vat rate\n\t\t\t\t{\n\t\t\t\t\treturn $thirdparty_seller->localtax1_value;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse  // i am the seller\n\t\t\t{\n\t\t\t\tif (!isOnlyOneLocalTax($local))  // TODO If seller is me, why not always returning this, even if there is only one locatax vat.\n\t\t\t\t{\n\t\t\t\t\treturn $conf->global->MAIN_INFO_VALUE_LOCALTAX1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($local == 2)\n\t\t{\n\t\t\tif ($thirdparty_seller != $mysoc)\n\t\t\t{\n\t\t\t\tif (!isOnlyOneLocalTax($local))  // TODO We should provide $vatrate to search on correct line and not always on line with highest vat rate\n\t\t\t\t// TODO We should also return value defined on thirdparty only if defined\n\t\t\t\t{\n\t\t\t\t\treturn $thirdparty_seller->localtax2_value;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse  // i am the seller\n\t\t\t{\n\t\t\t\tif (in_array($mysoc->country_code, array('ES')))\n\t\t\t\t{\n\t\t\t\t\treturn $thirdparty_buyer->localtax2_value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn $conf->global->MAIN_INFO_VALUE_LOCALTAX2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// By default, search value of local tax on line of common tax\n\t$sql = \"SELECT t.localtax1, t.localtax2, t.localtax1_type, t.localtax2_type\";\n   \t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n   \t$sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($thirdparty_seller->country_code).\"'\";\n   \t$sql .= \" AND t.taux = \".((float) $vatratecleaned).\" AND t.active = 1\";\n   \tif ($vatratecode) $sql .= \" AND t.code ='\".$db->escape($vatratecode).\"'\"; // If we have the code, we use it in priority\n   \telse $sql .= \" AND t.recuperableonly ='\".$db->escape($vatnpr).\"'\";\n   \tdol_syslog(\"get_localtax\", LOG_DEBUG);\n   \t$resql = $db->query($sql);\n\n   \tif ($resql)\n   \t{\n   \t\t$obj = $db->fetch_object($resql);\n   \t\tif ($local == 1) return $obj->localtax1;\n   \t\telseif ($local == 2) return $obj->localtax2;\n\t}\n\n\treturn 0;\n}\n\n\n/**\n * Return true if LocalTax (1 or 2) is unique.\n * Example: If localtax1 is 5 on line with highest common vat rate, return true\n * Example: If localtax1 is 5:8:15 on line with highest common vat rate, return false\n *\n * @param   int \t$local\tLocal tax to test (1 or 2)\n * @return  boolean \t\tTrue if LocalTax have multiple values, False if not\n */\nfunction isOnlyOneLocalTax($local)\n{\n\t$tax = get_localtax_by_third($local);\n\n\t$valors = explode(\":\", $tax);\n\n\tif (count($valors) > 1)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\n/**\n * Get values of localtaxes (1 or 2) for company country for the common vat with the highest value\n *\n * @param\tint\t\t$local \tLocalTax to get\n * @return\tnumber\t\t\tValues of localtax\n */\nfunction get_localtax_by_third($local)\n{\n\tglobal $db, $mysoc;\n\t$sql = \"SELECT t.localtax1, t.localtax2 \";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t inner join \".MAIN_DB_PREFIX.\"c_country as c ON c.rowid=t.fk_pays\";\n\t$sql .= \" WHERE c.code = '\".$mysoc->country_code.\"' AND t.active = 1 AND t.taux=(\";\n\t$sql .= \"  SELECT max(tt.taux) FROM \".MAIN_DB_PREFIX.\"c_tva as tt inner join \".MAIN_DB_PREFIX.\"c_country as c ON c.rowid=tt.fk_pays\";\n\t$sql .= \"  WHERE c.code = '\".$mysoc->country_code.\"' AND tt.active = 1\";\n\t$sql .= \"  )\";\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($local == 1) return $obj->localtax1;\n\t\telseif ($local == 2) return $obj->localtax2;\n\t}\n\n\treturn 0;\n}\n\n\n/**\n *  Get vat main information from Id.\n *  You can call getLocalTaxesFromRate after to get other fields.\n *\n *  @param\tint|string  $vatrate\t\t    VAT ID or Rate. Value can be value or the string with code into parenthesis or rowid if $firstparamisid is 1. Example: '8.5' or '8.5 (8.5NPR)' or 123.\n *  @param\tSociete\t    $buyer         \t\tCompany object\n *  @param\tSociete\t    $seller        \t\tCompany object\n *  @param  int         $firstparamisid     1 if first param is id into table (use this if you can)\n *  @return\tarray       \t  \t\t\t\tarray('rowid'=> , 'code'=> ...)\n *  @see getLocalTaxesFromRate()\n */\nfunction getTaxesFromId($vatrate, $buyer = null, $seller = null, $firstparamisid = 1)\n{\n\tglobal $db, $mysoc;\n\n\tdol_syslog(\"getTaxesFromId vat id or rate = \".$vatrate);\n\n\t// Search local taxes\n\t$sql = \"SELECT t.rowid, t.code, t.taux as rate, t.recuperableonly as npr, t.accountancy_code_sell, t.accountancy_code_buy\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t\";\n\tif ($firstparamisid) $sql .= \" WHERE t.rowid = \".(int) $vatrate;\n\telse\n\t{\n\t\t$vatratecleaned = $vatrate;\n\t\t$vatratecode = '';\n\t\tif (preg_match('/^(.*)\\s*\\((.*)\\)$/', $vatrate, $reg))      // If vat is \"xx (yy)\"\n\t\t{\n\t\t\t$vatratecleaned = $reg[1];\n\t\t\t$vatratecode = $reg[2];\n\t\t}\n\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t/*if ($mysoc->country_code == 'ES') $sql.= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$buyer->country_code.\"'\";    // vat in spain use the buyer country ??\n\t\telse $sql.= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$seller->country_code.\"'\";*/\n\t\t$sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$seller->country_code.\"'\";\n\t\t$sql .= \" AND t.taux = \".((float) $vatratecleaned).\" AND t.active = 1\";\n\t\tif ($vatratecode) $sql .= \" AND t.code = '\".$vatratecode.\"'\";\n\t}\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($obj) return array('rowid'=>$obj->rowid, 'code'=>$obj->code, 'rate'=>$obj->rate, 'npr'=>$obj->npr, 'accountancy_code_sell'=>$obj->accountancy_code_sell, 'accountancy_code_buy'=>$obj->accountancy_code_buy);\n\t\telse return array();\n\t}\n\telse dol_print_error($db);\n\n\treturn array();\n}\n\n/**\n *  Get type and rate of localtaxes for a particular vat rate/country of a thirdparty.\n *  This does not take into account the seller setup if subject to vat or not, only country.\n *  TODO\n *  This function is ALSO called to retrieve type for building PDF. Such call of function must be removed.\n *  Instead this function must be called when adding a line to get the array of localtax and type, and then\n *  provide it to the function calcul_price_total.\n *\n *  @param\tint|string  $vatrate\t\t\tVAT ID or Rate+Code. Value can be value or the string with code into parenthesis or rowid if $firstparamisid is 1. Example: '8.5' or '8.5 (8.5NPR)' or 123.\n *  @param\tint\t\t    $local              Number of localtax (1 or 2, or 0 to return 1 & 2)\n *  @param\tSociete\t    $buyer         \t\tCompany object\n *  @param\tSociete\t    $seller        \t\tCompany object\n *  @param  int         $firstparamisid     1 if first param is ID into table instead of Rate+code (use this if you can)\n *  @return\tarray    \t    \t\t\t\tarray(localtax_type1(1-6/0 if not found), rate localtax1, localtax_type2, rate localtax2, accountancycodecust, accountancycodesupp)\n *  @see getTaxesFromId()\n */\nfunction getLocalTaxesFromRate($vatrate, $local, $buyer, $seller, $firstparamisid = 0)\n{\n\tglobal $db, $mysoc;\n\n\tdol_syslog(\"getLocalTaxesFromRate vatrate=\".$vatrate.\" local=\".$local);\n\n\t// Search local taxes\n\t$sql  = \"SELECT t.taux as rate, t.code, t.localtax1, t.localtax1_type, t.localtax2, t.localtax2_type, t.accountancy_code_sell, t.accountancy_code_buy\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t\";\n\tif ($firstparamisid) $sql .= \" WHERE t.rowid = \".(int) $vatrate;\n\telse\n\t{\n\t\t$vatratecleaned = $vatrate;\n\t\t$vatratecode = '';\n\t\t$reg = array();\n\t\tif (preg_match('/^(.*)\\s*\\((.*)\\)$/', $vatrate, $reg))      // If vat is \"x.x (yy)\"\n\t\t{\n\t\t\t$vatratecleaned = $reg[1];\n\t\t\t$vatratecode = $reg[2];\n\t\t}\n\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\tif ($mysoc->country_code == 'ES') $sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($buyer->country_code).\"'\"; // local tax in spain use the buyer country ??\n\t\telse $sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($seller->country_code).\"'\";\n\t\t$sql .= \" AND t.taux = \".((float) $vatratecleaned).\" AND t.active = 1\";\n\t\tif ($vatratecode) $sql .= \" AND t.code = '\".$db->escape($vatratecode).\"'\";\n\t}\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\n\t\t$vateratestring = $obj->rate.($obj->code ? ' ('.$obj->code.')' : '');\n\n\t\tif ($local == 1)\n\t\t{\n\t\t\treturn array($obj->localtax1_type, get_localtax($vateratestring, $local, $buyer, $seller), $obj->accountancy_code_sell, $obj->accountancy_code_buy);\n\t\t}\n\t\telseif ($local == 2)\n\t\t{\n\t\t\treturn array($obj->localtax2_type, get_localtax($vateratestring, $local, $buyer, $seller), $obj->accountancy_code_sell, $obj->accountancy_code_buy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn array($obj->localtax1_type, get_localtax($vateratestring, 1, $buyer, $seller), $obj->localtax2_type, get_localtax($vateratestring, 2, $buyer, $seller), $obj->accountancy_code_sell, $obj->accountancy_code_buy);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tReturn vat rate of a product in a particular selling country or default country vat if product is unknown\n *  Function called by get_default_tva\n *\n *  @param\tint\t\t\t$idprod          \tId of product or 0 if not a predefined product\n *  @param  Societe\t\t$thirdparty_seller  Thirdparty with a ->country_code defined (FR, US, IT, ...)\n *\t@param\tint\t\t\t$idprodfournprice\tId product_fournisseur_price (for \"supplier\" proposal/order/invoice)\n *  @return float|string   \t\t\t\t    Vat rate to use with format 5.0 or '5.0 (XXX)'\n *  @see get_product_localtax_for_country()\n */\nfunction get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice = 0)\n{\n\tglobal $db, $conf, $mysoc;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n\n\t$ret = 0;\n\t$found = 0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product = new Product($db);\n\t\t$result = $product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\tif ($idprodfournprice > 0)     // We want vat for product for a \"supplier\" object\n\t\t\t{\n\t\t\t\t$product->get_buyprice($idprodfournprice, 0, 0, 0);\n\t\t\t\t$ret = $product->vatrate_supplier;\n\t\t\t\tif ($product->default_vat_code) $ret .= ' ('.$product->default_vat_code.')';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ret = $product->tva_tx; // Default vat of product we defined\n\t\t\t\tif ($product->default_vat_code) $ret .= ' ('.$product->default_vat_code.')';\n\t\t\t}\n\t\t\t$found = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product. Vat for couple countrycode/product is a feature not implemeted yet.\n\t\t\t// May be usefull/required if hidden option SERVICE_ARE_ECOMMERCE_200238EC is on\n\t\t}\n\t}\n\n\tif (!$found)\n\t{\n\t\tif (empty($conf->global->MAIN_VAT_DEFAULT_IF_AUTODETECT_FAILS))\n\t\t{\n\t\t\t// If vat of product for the country not found or not defined, we return the first higher vat of country.\n\t\t\t$sql = \"SELECT t.taux as vat_rate, t.code as default_vat_code\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t\t$sql .= \" WHERE t.active=1 AND t.fk_pays = c.rowid AND c.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t\t$sql .= \" ORDER BY t.taux DESC, t.code ASC, t.recuperableonly ASC\";\n\t\t\t$sql .= $db->plimit(1);\n\n\t\t\t$resql = $db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$obj = $db->fetch_object($resql);\n\t\t\t\tif ($obj)\n\t\t\t\t{\n\t\t\t\t\t$ret = $obj->vat_rate;\n\t\t\t\t\tif ($obj->default_vat_code) $ret .= ' ('.$obj->default_vat_code.')';\n\t\t\t\t}\n\t\t\t\t$db->free($sql);\n\t\t\t}\n\t\t\telse dol_print_error($db);\n\t\t}\n\t\telse $ret = $conf->global->MAIN_VAT_DEFAULT_IF_AUTODETECT_FAILS; // Forced value if autodetect fails\n\t}\n\n\tdol_syslog(\"get_product_vat_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tReturn localtax vat rate of a product in a particular selling country or default country vat if product is unknown\n *\n *  @param\tint\t\t$idprod         \t\tId of product\n *  @param  int\t\t$local          \t\t1 for localtax1, 2 for localtax 2\n *  @param  Societe\t$thirdparty_seller    \tThirdparty with a ->country_code defined (FR, US, IT, ...)\n *  @return int             \t\t\t\t<0 if KO, Vat rate if OK\n *  @see get_product_vat_for_country()\n */\nfunction get_product_localtax_for_country($idprod, $local, $thirdparty_seller)\n{\n\tglobal $db, $mysoc;\n\n\tif (!class_exists('Product')) {\n\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n\t}\n\n\t$ret = 0;\n\t$found = 0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product = new Product($db);\n\t\t$result = $product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\t/* Not defined yet, so we don't use this\n\t\t\tif ($local==1) $ret=$product->localtax1_tx;\n\t\t\telseif ($local==2) $ret=$product->localtax2_tx;\n\t\t\t$found=1;\n\t\t\t*/\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product\n\t\t}\n\t}\n\n\tif (!$found)\n\t{\n\t\t// If vat of product for the country not found or not defined, we return higher vat of country.\n\t\t$sql = \"SELECT taux as vat_rate, localtax1, localtax2\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t$sql .= \" WHERE t.active=1 AND t.fk_pays = c.rowid AND c.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t$sql .= \" ORDER BY t.taux DESC, t.recuperableonly ASC\";\n\t\t$sql .= $db->plimit(1);\n\n\t\t$resql = $db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $db->fetch_object($resql);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\tif ($local == 1) $ret = $obj->localtax1;\n\t\t\t\telseif ($local == 2) $ret = $obj->localtax2;\n\t\t\t}\n\t\t}\n\t\telse dol_print_error($db);\n\t}\n\n\tdol_syslog(\"get_product_localtax_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tFunction that return vat rate of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier ou entreprise sans num TVA intra) alors TVA par defaut=TVA du produit vendu. Fin de regle\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise avec num TVA) intra alors TVA par defaut=0. Fin de regle\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@param\tint\t\t\t$idprodfournprice\t\tId product_fournisseur_price (for supplier order/invoice)\n *\t@return float|string   \t\t\t\t      \tVat rate to use with format 5.0 or '5.0 (XXX)', -1 if we can't guess it\n *  @see get_default_npr(), get_default_localtax()\n */\nfunction get_default_tva(Societe $thirdparty_seller, Societe $thirdparty_buyer, $idprod = 0, $idprodfournprice = 0)\n{\n\tglobal $conf;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\n\n\t// Note: possible values for tva_assuj are 0/1 or franchise/reel\n\t$seller_use_vat = ((is_numeric($thirdparty_seller->tva_assuj) && !$thirdparty_seller->tva_assuj) || (!is_numeric($thirdparty_seller->tva_assuj) && $thirdparty_seller->tva_assuj == 'franchise')) ? 0 : 1;\n\n\t$seller_country_code = $thirdparty_seller->country_code;\n\t$seller_in_cee = isInEEC($thirdparty_seller);\n\n\t$buyer_country_code = $thirdparty_buyer->country_code;\n\t$buyer_in_cee = isInEEC($thirdparty_buyer);\n\n\tdol_syslog(\"get_default_tva: seller use vat=\".$seller_use_vat.\", seller country=\".$seller_country_code.\", seller in cee=\".$seller_in_cee.\", buyer vat number=\".$thirdparty_buyer->tva_intra.\" buyer country=\".$buyer_country_code.\", buyer in cee=\".$buyer_in_cee.\", idprod=\".$idprod.\", idprodfournprice=\".$idprodfournprice.\", SERVICE_ARE_ECOMMERCE_200238EC=\".(!empty($conf->global->SERVICES_ARE_ECOMMERCE_200238EC) ? $conf->global->SERVICES_ARE_ECOMMERCE_200238EC : ''));\n\n\t// If services are eServices according to EU Council Directive 2002/38/EC (http://ec.europa.eu/taxation_customs/taxation/vat/traders/e-commerce/article_1610_en.htm)\n\t// we use the buyer VAT.\n\tif (!empty($conf->global->SERVICE_ARE_ECOMMERCE_200238EC))\n\t{\n\t\tif ($seller_in_cee && $buyer_in_cee && !$thirdparty_buyer->isACompany())\n\t\t{\n\t\t\t//print 'VATRULE 0';\n\t\t\treturn get_product_vat_for_country($idprod, $thirdparty_buyer, $idprodfournprice);\n\t\t}\n\t}\n\n\t// If seller does not use VAT\n\tif (!$seller_use_vat)\n\t{\n\t\t//print 'VATRULE 1';\n\t\treturn 0;\n\t}\n\n\t// Le test ci-dessus ne devrait pas etre necessaire. Me signaler l'exemple du cas juridique concerne si le test suivant n'est pas suffisant.\n\n\t// Si le (pays vendeur = pays acheteur) alors la TVA par defaut=TVA du produit vendu. Fin de regle.\n\tif (($seller_country_code == $buyer_country_code)\n\t|| (in_array($seller_country_code, array('FR,MC')) && in_array($buyer_country_code, array('FR', 'MC')))) // Warning ->country_code not always defined\n\t{\n\t\t//print 'VATRULE 2';\n\t\treturn get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice);\n\t}\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par l'acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n\t// Not supported\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise) alors TVA par defaut=0. Fin de regle\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier) alors TVA par defaut=TVA du produit vendu. Fin de regle\n\tif (($seller_in_cee && $buyer_in_cee))\n\t{\n\t\t$isacompany = $thirdparty_buyer->isACompany();\n\t\tif ($isacompany)\n\t\t{\n\t\t\t//print 'VATRULE 3';\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//print 'VATRULE 4';\n\t\t\treturn get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice);\n\t\t}\n\t}\n\n\t// Si (vendeur en France et acheteur hors Communaute europeenne et acheteur particulier) alors TVA par defaut=TVA du produit vendu. Fin de regle\n\tif (!empty($conf->global->MAIN_USE_VAT_OF_PRODUCT_FOR_INDIVIDUAL_CUSTOMER_OUT_OF_EEC) && empty($buyer_in_cee) && !$thirdparty_buyer->isACompany()) {\n\t\treturn get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice);\n\t}\n\n\t// Sinon la TVA proposee par defaut=0. Fin de regle.\n\t// Rem: Cela signifie qu'au moins un des 2 est hors Communaute europeenne et que le pays differe\n\t//print 'VATRULE 5';\n\treturn 0;\n}\n\n\n/**\n *\tFonction qui renvoie si tva doit etre tva percue recuperable\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tThirdparty seller\n *\t@param  Societe\t\t$thirdparty_buyer   \tThirdparty buyer\n *  @param  int\t\t\t$idprod                 Id product\n *  @param\tint\t\t\t$idprodfournprice\t\tId supplier price for product\n *\t@return float       \t\t\t        \t0 or 1\n *  @see get_default_tva(), get_default_localtax()\n */\nfunction get_default_npr(Societe $thirdparty_seller, Societe $thirdparty_buyer, $idprod = 0, $idprodfournprice = 0)\n{\n\tglobal $db;\n\n\tif ($idprodfournprice > 0)\n\t{\n\t\tif (!class_exists('ProductFournisseur')) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/fourn/class/fournisseur.product.class.php';\n\t\t}\n\t\t$prodprice = new ProductFournisseur($db);\n\t\t$prodprice->fetch_product_fournisseur_price($idprodfournprice);\n\t\treturn $prodprice->fourn_tva_npr;\n\t}\n\telseif ($idprod > 0)\n\t{\n\t\tif (!class_exists('Product')) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\n\t\t}\n\t\t$prod = new Product($db);\n\t\t$prod->fetch($idprod);\n\t\treturn $prod->tva_npr;\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tFunction that return localtax of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tThirdparty seller\n *\t@param  Societe\t\t$thirdparty_buyer   \tThirdparty buyer\n *  @param\tint\t\t\t$local\t\t\t\t\tLocaltax to process (1 or 2)\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@return integer        \t\t\t\t       \tlocaltax, -1 si ne peut etre determine\n *  @see get_default_tva(), get_default_npr()\n */\nfunction get_default_localtax($thirdparty_seller, $thirdparty_buyer, $local, $idprod = 0)\n{\n\tglobal $mysoc;\n\n\tif (!is_object($thirdparty_seller)) return -1;\n\tif (!is_object($thirdparty_buyer)) return -1;\n\n\tif ($local == 1) // Localtax 1\n\t{\n\t\tif ($mysoc->country_code == 'ES')\n\t\t{\n\t\t\tif (is_numeric($thirdparty_buyer->localtax1_assuj) && !$thirdparty_buyer->localtax1_assuj) return 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Si vendeur non assujeti a Localtax1, localtax1 par default=0\n\t\t\tif (is_numeric($thirdparty_seller->localtax1_assuj) && !$thirdparty_seller->localtax1_assuj) return 0;\n\t\t\tif (!is_numeric($thirdparty_seller->localtax1_assuj) && $thirdparty_seller->localtax1_assuj == 'localtax1off') return 0;\n\t\t}\n\t}\n\telseif ($local == 2) //I Localtax 2\n\t{\n\t\t// Si vendeur non assujeti a Localtax2, localtax2 par default=0\n\t\tif (is_numeric($thirdparty_seller->localtax2_assuj) && !$thirdparty_seller->localtax2_assuj) return 0;\n\t\tif (!is_numeric($thirdparty_seller->localtax2_assuj) && $thirdparty_seller->localtax2_assuj == 'localtax2off') return 0;\n\t}\n\n\tif ($thirdparty_seller->country_code == $thirdparty_buyer->country_code)\n\t{\n\t\treturn get_product_localtax_for_country($idprod, $local, $thirdparty_seller);\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tReturn yes or no in current language\n *\n *\t@param\tstring|int\t$yesno\t\t\tValue to test (1, 'yes', 'true' or 0, 'no', 'false')\n *\t@param\tinteger\t\t$case\t\t\t1=Yes/No, 0=yes/no, 2=Disabled checkbox, 3=Disabled checkbox + Yes/No\n *\t@param\tint\t\t\t$color\t\t\t0=texte only, 1=Text is formated with a color font style ('ok' or 'error'), 2=Text is formated with 'ok' color.\n *\t@return\tstring\t\t\t\t\t\tHTML string\n */\nfunction yn($yesno, $case = 1, $color = 0)\n{\n\tglobal $langs;\n\t$result = 'unknown'; $classname = '';\n\tif ($yesno == 1 || strtolower($yesno) == 'yes' || strtolower($yesno) == 'true') \t// A mettre avant test sur no a cause du == 0\n\t{\n\t\t$result = $langs->trans('yes');\n\t\tif ($case == 1 || $case == 3) $result = $langs->trans(\"Yes\");\n\t\tif ($case == 2) $result = '<input type=\"checkbox\" value=\"1\" checked disabled>';\n\t\tif ($case == 3) $result = '<input type=\"checkbox\" value=\"1\" checked disabled> '.$result;\n\n\t\t$classname = 'ok';\n\t}\n\telseif ($yesno == 0 || strtolower($yesno) == 'no' || strtolower($yesno) == 'false')\n\t{\n\t\t$result = $langs->trans(\"no\");\n\t\tif ($case == 1 || $case == 3) $result = $langs->trans(\"No\");\n\t\tif ($case == 2) $result = '<input type=\"checkbox\" value=\"0\" disabled>';\n\t\tif ($case == 3) $result = '<input type=\"checkbox\" value=\"0\" disabled> '.$result;\n\n\t\tif ($color == 2) $classname = 'ok';\n\t\telse $classname = 'error';\n\t}\n\tif ($color) return '<font class=\"'.$classname.'\">'.$result.'</font>';\n\treturn $result;\n}\n\n/**\n *\tReturn a path to have a the directory according to object where files are stored.\n *  New usage:       $conf->module->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 1, $object, $modulepart)\n *         or:       $conf->module->dir_output.'/'.get_exdir(0, 0, 0, 1, $object, $modulepart)     if multidir_output not defined.\n *  Example our with new usage:       $object is invoice -> 'INYYMM-ABCD'\n *  Example our with old usage:       '015' with level 3->\"0/1/5/\", '015' with level 1->\"5/\", 'ABC-1' with level 3 ->\"0/0/1/\"\n *\n *\t@param\tstring\t$num            Id of object (deprecated, $object will be used in future)\n *\t@param  int\t\t$level\t\t    Level of subdirs to return (1, 2 or 3 levels). (deprecated, global option will be used in future)\n * \t@param\tint\t\t$alpha\t\t    0=Keep number only to forge path, 1=Use alpha part afer the - (By default, use 0). (deprecated, global option will be used in future)\n *  @param  int\t\t$withoutslash   0=With slash at end (except if '/', we return ''), 1=without slash at end\n *  @param\tObject\t$object\t\t\tObject\n *  @param\tstring\t$modulepart\t\tType of object ('invoice_supplier, 'donation', 'invoice', ...')\n *  @return\tstring\t\t\t\t\tDir to use ending. Example '' or '1/' or '1/2/'\n */\nfunction get_exdir($num, $level, $alpha, $withoutslash, $object, $modulepart)\n{\n\tglobal $conf;\n\n\t$path = '';\n\n\t$arrayforoldpath = array('cheque', 'user', 'category', 'holiday', 'supplier_invoice', 'invoice_supplier', 'mailing', 'supplier_payment');\n\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) $arrayforoldpath[] = 'product';\n\tif (!empty($level) && in_array($modulepart, $arrayforoldpath))\n\t{\n\t\t// This part should be removed once all code is using \"get_exdir\" to forge path, with all parameters provided.\n\t\tif (empty($alpha)) $num = preg_replace('/([^0-9])/i', '', $num);\n\t\telse $num = preg_replace('/^.*\\-/i', '', $num);\n\t\t$num = substr(\"000\".$num, -$level);\n\t\tif ($level == 1) $path = substr($num, 0, 1);\n\t\tif ($level == 2) $path = substr($num, 1, 1).'/'.substr($num, 0, 1);\n\t\tif ($level == 3) $path = substr($num, 2, 1).'/'.substr($num, 1, 1).'/'.substr($num, 0, 1);\n\t}\n\telse\n\t{\n\t\t// TODO\n\t\t// We will enhance here a common way of forging path for document storage\n\t\t// Here, object->id, object->ref and modulepart are required.\n\t\t//var_dump($modulepart);\n        if (in_array($modulepart, array('thirdparty', 'contact', 'member', 'propal', 'proposal', 'commande', 'order', 'facture', 'invoice',\n\t\t\t'supplier_order', 'supplier_proposal', 'shipment', 'contract', 'expensereport', 'ficheinter')))\n\t\t{\n\t\t\t$path = ($object->ref ? $object->ref : $object->id);\n\t\t}\n\t}\n\n\tif (empty($withoutslash) && !empty($path)) $path .= '/';\n\n\treturn $path;\n}\n\n/**\n *\tCreation of a directory (this can create recursive subdir)\n *\n *\t@param\tstring\t\t$dir\t\tDirectory to create (Separator must be '/'. Example: '/mydir/mysubdir')\n *\t@param\tstring\t\t$dataroot\tData root directory (To avoid having the data root in the loop. Using this will also lost the warning on first dir PHP has no permission when open_basedir is used)\n *  @param\tstring|null\t$newmask\tMask for new file (Defaults to $conf->global->MAIN_UMASK or 0755 if unavailable). Example: '0444'\n *\t@return int         \t\t\t< 0 if KO, 0 = already exists, > 0 if OK\n */\nfunction dol_mkdir($dir, $dataroot = '', $newmask = null)\n{\n\tglobal $conf;\n\n\tdol_syslog(\"functions.lib::dol_mkdir: dir=\".$dir, LOG_INFO);\n\n\t$dir_osencoded = dol_osencode($dir);\n\tif (@is_dir($dir_osencoded)) return 0;\n\n\t$nberr = 0;\n\t$nbcreated = 0;\n\n\t$ccdir = '';\n\tif (!empty($dataroot)) {\n\t\t// Remove data root from loop\n\t\t$dir = str_replace($dataroot.'/', '', $dir);\n\t\t$ccdir = $dataroot.'/';\n\t}\n\n\t$cdir = explode(\"/\", $dir);\n\t$num = count($cdir);\n\tfor ($i = 0; $i < $num; $i++)\n\t{\n\t\tif ($i > 0) $ccdir .= '/'.$cdir[$i];\n\t\telse $ccdir .= $cdir[$i];\n\t\tif (preg_match(\"/^.:$/\", $ccdir, $regs)) continue; // Si chemin Windows incomplet, on poursuit par rep suivant\n\n\t\t// Attention, le is_dir() peut echouer bien que le rep existe.\n\t\t// (ex selon config de open_basedir)\n\t\tif ($ccdir)\n\t\t{\n\t\t\t$ccdir_osencoded = dol_osencode($ccdir);\n\t\t\tif (!@is_dir($ccdir_osencoded))\n\t\t\t{\n\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' does not exists or is outside open_basedir PHP setting.\", LOG_DEBUG);\n\n\t\t\t\tumask(0);\n\t\t\t\t$dirmaskdec = octdec($newmask);\n\t\t\t\tif (empty($newmask)) {\n\t\t\t\t\t$dirmaskdec = empty($conf->global->MAIN_UMASK) ? octdec('0755') : octdec($conf->global->MAIN_UMASK);\n\t\t\t\t}\n\t\t\t\t$dirmaskdec |= octdec('0111'); // Set x bit required for directories\n\t\t\t\tif (!@mkdir($ccdir_osencoded, $dirmaskdec))\n\t\t\t\t{\n\t\t\t\t\t// Si le is_dir a renvoye une fausse info, alors on passe ici.\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Fails to create directory '\".$ccdir.\"' or directory already exists.\", LOG_WARNING);\n\t\t\t\t\t$nberr++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' created\", LOG_DEBUG);\n\t\t\t\t\t$nberr = 0; // On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignore\n\t\t\t\t\t$nbcreated++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$nberr = 0; // On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignores\n\t\t\t}\n\t\t}\n\t}\n\treturn ($nberr ? -$nberr : $nbcreated);\n}\n\n\n/**\n *\tReturn picto saying a field is required\n *\n *\t@return  string\t\tChaine avec picto obligatoire\n */\nfunction picto_required()\n{\n\treturn '<span class=\"fieldrequired\">*</span>';\n}\n\n\n/**\n *\tClean a string from all HTML tags and entities.\n *  This function differs from strip_tags because:\n *  - <br> are replaced with \\n if removelinefeed=0 or 1\n *  - if entities are found, they are decoded BEFORE the strip\n *  - you can decide to convert line feed into a space\n *\n *\t@param\tstring\t$stringtoclean\t\tString to clean\n *\t@param\tinteger\t$removelinefeed\t\t1=Replace all new lines by 1 space, 0=Only ending new lines are removed others are replaced with \\n, 2=Ending new lines are removed but others are kept with a same number of \\n than nb of <br> when there is both \"...<br>\\n...\"\n *  @param  string\t$pagecodeto      \tEncoding of input/output string\n *  @param\tinteger\t$strip_tags\t\t\t0=Use internal strip, 1=Use strip_tags() php function (bugged when text contains a < char that is not for a html tag)\n *  @param\tinteger\t$removedoublespaces\tReplace double space into one space\n *\t@return string\t    \t\t\t\tString cleaned\n *\n * \t@see\tdol_escape_htmltag() strip_tags() dol_string_onlythesehtmltags() dol_string_neverthesehtmltags()\n */\nfunction dol_string_nohtmltag($stringtoclean, $removelinefeed = 1, $pagecodeto = 'UTF-8', $strip_tags = 0, $removedoublespaces = 1)\n{\n\tif ($removelinefeed == 2) $stringtoclean = preg_replace('/<br[^>]*>(\\n|\\r)+/ims', '<br>', $stringtoclean);\n\t$temp = preg_replace('/<br[^>]*>/i', \"\\n\", $stringtoclean);\n\n\tif ($strip_tags) {\n\t\t$temp = strip_tags($temp);\n\t} else {\n\t\t$pattern = \"/<[^<>]+>/\";\n\t\t// Exemple of $temp: <a href=\"/myurl\" title=\"<u>A title</u>\">0000-021</a>\n\t\t$temp = preg_replace($pattern, \"\", $temp); // pass 1\n\t\t// $temp after pass 1: <a href=\"/myurl\" title=\"A title\">0000-021\n\t\t$temp = preg_replace($pattern, \"\", $temp); // pass 2\n\t\t// $temp after pass 2: 0000-021\n\t}\n\n\t$temp = dol_html_entity_decode($temp, ENT_COMPAT, $pagecodeto);\n\n\t// Remove also carriage returns\n\tif ($removelinefeed == 1) $temp = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \" \", $temp);\n\n\t// And double quotes\n\tif ($removedoublespaces) {\n\t\twhile (strpos($temp, \"  \")) {\n\t\t\t$temp = str_replace(\"  \", \" \", $temp);\n\t\t}\n\t}\n\n\treturn trim($temp);\n}\n\n/**\n *\tClean a string to keep only desirable HTML tags.\n *\n *\t@param\tstring\t$stringtoclean\t\t\tString to clean\n *  @param\tstring\t$cleanalsosomestyles\tClean also some tags\n *\t@return string\t    \t\t\t\t\tString cleaned\n *\n * \t@see\tdol_escape_htmltag() strip_tags() dol_string_nohtmltag() dol_string_neverthesehtmltags()\n */\nfunction dol_string_onlythesehtmltags($stringtoclean, $cleanalsosomestyles = 1)\n{\n\t$allowed_tags = array(\n\t\t\"html\", \"head\", \"meta\", \"body\", \"article\", \"a\", \"abbr\", \"b\", \"blockquote\", \"br\", \"cite\", \"div\", \"dl\", \"dd\", \"dt\", \"em\", \"font\", \"img\", \"ins\", \"hr\", \"i\", \"li\", \"link\",\n\t\t\"ol\", \"p\", \"q\", \"s\", \"section\", \"span\", \"strike\", \"strong\", \"title\", \"table\", \"tr\", \"th\", \"td\", \"u\", \"ul\", \"sup\", \"sub\", \"blockquote\", \"pre\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"\n\t);\n\t$allowed_tags_string = join(\"><\", $allowed_tags);\n\t$allowed_tags_string = preg_replace('/^>/', '', $allowed_tags_string);\n\t$allowed_tags_string = preg_replace('/<$/', '', $allowed_tags_string);\n\t$allowed_tags_string = '<'.$allowed_tags_string.'>';\n\n\tif ($cleanalsosomestyles) {\n\t\t$stringtoclean = preg_replace('/position\\s*:\\s*(absolute|fixed)\\s*!\\s*important/', '', $stringtoclean); // Note: If hacker try to introduce css comment into string to bypass this regex, the string must also be encoded by the dol_htmlentitiesbr during output so it become harmless\n\t}\n\n\t$temp = strip_tags($stringtoclean, $allowed_tags_string);\n\n\treturn $temp;\n}\n\n/**\n *\tClean a string from some undesirable HTML tags.\n *  Note. Not enough secured as dol_string_onlythesehtmltags().\n *\n *\t@param\tstring\t$stringtoclean\t\t\tString to clean\n *  @param\tarray\t$disallowed_tags\t\tArray of tags not allowed\n *  @param\tstring\t$cleanalsosomestyles\tClean also some tags\n *\t@return string\t    \t\t\t\t\tString cleaned\n *\n * \t@see\tdol_escape_htmltag() strip_tags() dol_string_nohtmltag() dol_string_onlythesehtmltags()\n */\nfunction dol_string_neverthesehtmltags($stringtoclean, $disallowed_tags = array('textarea'), $cleanalsosomestyles = 0)\n{\n\t$temp = $stringtoclean;\n\tforeach ($disallowed_tags as $tagtoremove)\n\t{\n\t\t$temp = preg_replace('/<\\/?'.$tagtoremove.'>/', '', $temp);\n\t\t$temp = preg_replace('/<\\/?'.$tagtoremove.'\\s+[^>]*>/', '', $temp);\n\t}\n\n\tif ($cleanalsosomestyles) {\n\t\t$temp = preg_replace('/position\\s*:\\s*(absolute|fixed)\\s*!\\s*important/', '', $temp); // Note: If hacker try to introduce css comment into string to avoid this, string should be encoded by the dol_htmlentitiesbr so be harmless\n\t}\n\n\treturn $temp;\n}\n\n\n/**\n * Return first line of text. Cut will depends if content is HTML or not.\n *\n * @param \tstring\t$text\t\tInput text\n * @param\tint\t\t$nboflines  Nb of lines to get (default is 1 = first line only)\n * @param   string  $charset    Charset of $text string (UTF-8 by default)\n * @return\tstring\t\t\t\tOutput text\n * @see dol_nboflines_bis(), dol_string_nohtmltag(), dol_escape_htmltag()\n */\nfunction dolGetFirstLineOfText($text, $nboflines = 1, $charset = 'UTF-8')\n{\n\tif ($nboflines == 1)\n\t{\n\t\tif (dol_textishtml($text))\n\t\t{\n\t\t\t$firstline = preg_replace('/<br[^>]*>.*$/s', '', $text); // The s pattern modifier means the . can match newline characters\n\t\t\t$firstline = preg_replace('/<div[^>]*>.*$/s', '', $firstline); // The s pattern modifier means the . can match newline characters\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$firstline = preg_replace('/[\\n\\r].*/', '', $text);\n\t\t}\n\t\treturn $firstline.((strlen($firstline) != strlen($text)) ? '...' : '');\n\t}\n\telse\n\t{\n\t\t$ishtml = 0;\n\t\tif (dol_textishtml($text))\n\t\t{\n\t\t\t$text = preg_replace('/\\n/', '', $text);\n\t\t\t$ishtml = 1;\n\t\t\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \" \", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \"<br>\", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\t\t}\n\n\t\t$text = strtr($text, $repTable);\n\t\tif ($charset == 'UTF-8') { $pattern = '/(<br[^>]*>)/Uu'; }\t// /U is to have UNGREEDY regex to limit to one html tag. /u is for UTF8 support\n\t\telse $pattern = '/(<br[^>]*>)/U'; // /U is to have UNGREEDY regex to limit to one html tag.\n\t\t$a = preg_split($pattern, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\n\t\t$firstline = '';\n\t\t$i = 0;\n\t\t$nba = count($a); // 2x nb of lines in $a because $a contains also a line for each new line separator\n\t\twhile (($i < $nba) && ($i < ($nboflines * 2)))\n\t\t{\n\t\t\tif ($i % 2 == 0) $firstline .= $a[$i];\n\t\t\telseif (($i < (($nboflines * 2) - 1)) && ($i < ($nba - 1))) $firstline .= ($ishtml ? \"<br>\\n\" : \"\\n\");\n\t\t\t$i++;\n\t\t}\n\t\tunset($a);\n\t\treturn $firstline.(($i < $nba) ? '...' : '');\n\t}\n}\n\n\n/**\n * Replace CRLF in string with a HTML BR tag.\n * WARNING: The content after operation contains some HTML tags (the <br>) so be sure to also have encode the special chars of stringtoencode into HTML before.\n *\n * @param\tstring\t$stringtoencode\t\tString to encode\n * @param\tint     $nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br\n * @param   bool\t$forxml             false=Use <br>, true=Use <br />\n * @return\tstring\t\t\t\t\t\tString encoded\n * @see dol_nboflines(), dolGetFirstLineOfText()\n */\nfunction dol_nl2br($stringtoencode, $nl2brmode = 0, $forxml = false)\n{\n\tif (!$nl2brmode) {\n\t\treturn nl2br($stringtoencode, $forxml);\n\t} else {\n\t\t$ret = preg_replace('/(\\r\\n|\\r|\\n)/i', ($forxml ? '<br />' : '<br>'), $stringtoencode);\n\t\treturn $ret;\n\t}\n}\n\n\n/**\n *\tThis function is called to encode a string into a HTML string but differs from htmlentities because\n * \ta detection is done before to see if text is already HTML or not. Also, all entities but &,<,>,\" are converted.\n *  This permits to encode special chars to entities with no double encoding for already encoded HTML strings.\n * \tThis function also remove last EOL or BR if $removelasteolbr=1 (default).\n *  For PDF usage, you can show text by 2 ways:\n *              - writeHTMLCell -> param must be encoded into HTML.\n *              - MultiCell -> param must not be encoded into HTML.\n *              Because writeHTMLCell convert also \\n into <br>, if function\n *              is used to build PDF, nl2brmode must be 1.\n *\n *\t@param\tstring\t$stringtoencode\t\tString to encode\n *\t@param\tint\t\t$nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br (for use with FPDF writeHTMLCell function for example)\n *  @param  string\t$pagecodefrom       Pagecode stringtoencode is encoded\n *  @param\tint\t\t$removelasteolbr\t1=Remove last br or lasts \\n (default), 0=Do nothing\n *  @return\tstring\t\t\t\t\t\tString encoded\n */\nfunction dol_htmlentitiesbr($stringtoencode, $nl2brmode = 0, $pagecodefrom = 'UTF-8', $removelasteolbr = 1)\n{\n\t$newstring = $stringtoencode;\n\tif (dol_textishtml($stringtoencode))\t// Check if text is already HTML or not\n\t{\n\t\t$newstring = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i', '<br>', $newstring); // Replace \"<br type=\"_moz\" />\" by \"<br>\". It's same and avoid pb with FPDF.\n\t\tif ($removelasteolbr) $newstring = preg_replace('/<br>$/i', '', $newstring); // Remove last <br> (remove only last one)\n\t\t$newstring = strtr($newstring, array('&'=>'__and__', '<'=>'__lt__', '>'=>'__gt__', '\"'=>'__dquot__'));\n\t\t$newstring = dol_htmlentities($newstring, ENT_COMPAT, $pagecodefrom); // Make entity encoding\n\t\t$newstring = strtr($newstring, array('__and__'=>'&', '__lt__'=>'<', '__gt__'=>'>', '__dquot__'=>'\"'));\n\t}\n\telse\n\t{\n\t\tif ($removelasteolbr) $newstring = preg_replace('/(\\r\\n|\\r|\\n)$/i', '', $newstring); // Remove last \\n (may remove several)\n\t\t$newstring = dol_nl2br(dol_htmlentities($newstring, ENT_COMPAT, $pagecodefrom), $nl2brmode);\n\t}\n\t// Other substitutions that htmlentities does not do\n\t//$newstring=str_replace(chr(128),'&euro;',$newstring);\t// 128 = 0x80. Not in html entity table.     // Seems useles with TCPDF. Make bug with UTF8 languages\n\treturn $newstring;\n}\n\n/**\n *\tThis function is called to decode a HTML string (it decodes entities and br tags)\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@param\tstring\t$pagecodeto\t\t\tPage code for result\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlentitiesbr_decode($stringtodecode, $pagecodeto = 'UTF-8')\n{\n\t$ret = dol_html_entity_decode($stringtodecode, ENT_COMPAT, $pagecodeto);\n\t$ret = preg_replace('/'.\"\\r\\n\".'<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i', \"<br>\", $ret);\n\t$ret = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\r\\n\".'/i', \"\\r\\n\", $ret);\n\t$ret = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\n\".'/i', \"\\n\", $ret);\n\t$ret = preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i', \"\\n\", $ret);\n\treturn $ret;\n}\n\n/**\n *\tThis function remove all ending \\n and br at end\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlcleanlastbr($stringtodecode)\n{\n\t$ret = preg_replace('/(<br>|<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>|'.\"\\n\".'|'.\"\\r\".')+$/i', \"\", $stringtodecode);\n\treturn $ret;\n}\n\n/**\n * Replace html_entity_decode functions to manage errors\n *\n * @param   string\t$a\t\t\t\t\tOperand a\n * @param   string\t$b\t\t\t\t\tOperand b (ENT_QUOTES=convert simple and double quotes)\n * @param   string\t$c\t\t\t\t\tOperand c\n * @param\tstring\t$keepsomeentities\tEntities but &amp;, <, >, \" are not converted.\n * @return  string\t\t\t\t\t\tString decoded\n */\nfunction dol_html_entity_decode($a, $b, $c = 'UTF-8', $keepsomeentities = 0)\n{\n\t$newstring = $a;\n\tif ($keepsomeentities) $newstring = strtr($newstring, array('&amp;'=>'__andamp__', '&lt;'=>'__andlt__', '&gt;'=>'__andgt__', '\"'=>'__dquot__'));\n\t$newstring = html_entity_decode($newstring, $b, $c);\n\tif ($keepsomeentities) $newstring = strtr($newstring, array('__andamp__'=>'&amp;', '__andlt__'=>'&lt;', '__andgt__'=>'&gt;', '__dquot__'=>'\"'));\n\treturn $newstring;\n}\n\n/**\n * Replace htmlentities functions.\n * Goal of this function is to be sure to have default values of htmlentities that match what we need.\n *\n * @param   string  $string         The input string to encode\n * @param   int     $flags          Flags (see PHP doc above)\n * @param   string  $encoding       Encoding page code\n * @param   bool    $double_encode  When double_encode is turned off, PHP will not encode existing html entities\n * @return  string  $ret            Encoded string\n */\nfunction dol_htmlentities($string, $flags = null, $encoding = 'UTF-8', $double_encode = false)\n{\n\treturn htmlentities($string, $flags, $encoding, $double_encode);\n}\n\n/**\n *\tCheck if a string is a correct iso string\n *\tIf not, it will we considered not HTML encoded even if it is by FPDF.\n *\tExample, if string contains euro symbol that has ascii code 128\n *\n *\t@param\tstring\t\t$s      \tString to check\n *  @param\tstring\t\t$clean\t\tClean if it is not an ISO. Warning, if file is utf8, you will get a bad formated file.\n *\t@return\tint|string  \t   \t\t0 if bad iso, 1 if good iso, Or the clean string if $clean is 1\n */\nfunction dol_string_is_good_iso($s, $clean = 0)\n{\n\t$len = dol_strlen($s);\n\t$out = '';\n\t$ok = 1;\n\tfor ($scursor = 0; $scursor < $len; $scursor++)\n\t{\n\t\t$ordchar = ord($s[$scursor]);\n\t\t//print $scursor.'-'.$ordchar.'<br>';\n\t\tif ($ordchar < 32 && $ordchar != 13 && $ordchar != 10) { $ok = 0; break; }\n\t\telseif ($ordchar > 126 && $ordchar < 160) { $ok = 0; break; }\n\t\telseif ($clean) {\n\t\t\t$out .= $s[$scursor];\n\t\t}\n\t}\n\tif ($clean) return $out;\n\treturn $ok;\n}\n\n/**\n *\tReturn nb of lines of a clear text\n *\n *\t@param\tstring\t$s\t\t\tString to check\n * \t@param\tint     $maxchar\tNot yet used\n *\t@return\tint\t\t\t\t\tNumber of lines\n *  @see\tdol_nboflines_bis(), dolGetFirstLineOfText()\n */\nfunction dol_nboflines($s, $maxchar = 0)\n{\n\tif ($s == '') return 0;\n\t$arraystring = explode(\"\\n\", $s);\n\t$nb = count($arraystring);\n\n\treturn $nb;\n}\n\n\n/**\n *\tReturn nb of lines of a formated text with \\n and <br> (WARNING: string must not have mixed \\n and br separators)\n *\n *\t@param\tstring\t$text      \t\tText\n *\t@param\tint\t\t$maxlinesize  \tLargeur de ligne en caracteres (ou 0 si pas de limite - defaut)\n * \t@param\tstring\t$charset\t\tGive the charset used to encode the $text variable in memory.\n *\t@return int\t\t\t\t\t\tNumber of lines\n *\t@see\tdol_nboflines(), dolGetFirstLineOfText()\n */\nfunction dol_nboflines_bis($text, $maxlinesize = 0, $charset = 'UTF-8')\n{\n\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \"<br>\", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\tif (dol_textishtml($text)) $repTable = array(\"\\t\" => \" \", \"\\n\" => \" \", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\n\t$text = strtr($text, $repTable);\n\tif ($charset == 'UTF-8') { $pattern = '/(<br[^>]*>)/Uu'; }\t// /U is to have UNGREEDY regex to limit to one html tag. /u is for UTF8 support\n\telse $pattern = '/(<br[^>]*>)/U'; // /U is to have UNGREEDY regex to limit to one html tag.\n\t$a = preg_split($pattern, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\n\t$nblines = (int) floor((count($a) + 1) / 2);\n\t// count possible auto line breaks\n\tif ($maxlinesize)\n\t{\n\t\tforeach ($a as $line)\n\t\t{\n\t\t\tif (dol_strlen($line) > $maxlinesize)\n\t\t\t{\n\t\t\t\t//$line_dec = html_entity_decode(strip_tags($line));\n\t\t\t\t$line_dec = html_entity_decode($line);\n\t\t\t\tif (dol_strlen($line_dec) > $maxlinesize)\n\t\t\t\t{\n\t\t\t\t\t$line_dec = wordwrap($line_dec, $maxlinesize, '\\n', true);\n\t\t\t\t\t$nblines += substr_count($line_dec, '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tunset($a);\n\treturn $nblines;\n}\n\n/**\n *\tReturn if a text is a html content\n *\n *\t@param\tstring\t$msg\t\tContent to check\n *\t@param\tint\t\t$option\t\t0=Full detection, 1=Fast check\n *\t@return\tboolean\t\t\t\ttrue/false\n *\t@see\tdol_concatdesc()\n */\nfunction dol_textishtml($msg, $option = 0)\n{\n\tif ($option == 1)\n\t{\n\t\tif (preg_match('/<html/i', $msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i', $msg))\t\t\treturn true;\n\t\telseif (preg_match('/<\\/textarea/i', $msg))\t  return true;\n\t\telseif (preg_match('/<br/i', $msg))\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tif (preg_match('/<html/i', $msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i', $msg))\t\t\treturn true;\n\t\telseif (preg_match('/<\\/textarea/i', $msg))\t  return true;\n\t\telseif (preg_match('/<(b|em|i|u)>/i', $msg))\t\treturn true;\n\t\telseif (preg_match('/<br\\/>/i', $msg))\t  return true;\n\t\telseif (preg_match('/<(br|div|font|li|p|span|strong|table)>/i', $msg)) \t  return true;\n\t\telseif (preg_match('/<(br|div|font|li|p|span|strong|table)\\s+[^<>\\/]*>/i', $msg)) return true;\n\t\telseif (preg_match('/<(br|div|font|li|p|span|strong|table)\\s+[^<>\\/]*\\/>/i', $msg)) return true;\n\t\telseif (preg_match('/<img\\s+[^<>]*src[^<>]*>/i', $msg)) return true; // must accept <img src=\"http://example.com/aaa.png\" />\n\t\telseif (preg_match('/<a\\s+[^<>]*href[^<>]*>/i', $msg)) return true; // must accept <a href=\"http://example.com/aaa.png\" />\n\t\telseif (preg_match('/<h[0-9]>/i', $msg))\t\t\treturn true;\n\t\telseif (preg_match('/&[A-Z0-9]{1,6};/i', $msg))\treturn true; // Html entities names (http://www.w3schools.com/tags/ref_entities.asp)\n\t\telseif (preg_match('/&#[0-9]{2,3};/i', $msg))\treturn true; // Html entities numbers (http://www.w3schools.com/tags/ref_entities.asp)\n\n\t\treturn false;\n\t}\n}\n\n/**\n *  Concat 2 descriptions with a new line between them (second operand after first one with appropriate new line separator)\n *  text1 html + text2 html => text1 + '<br>' + text2\n *  text1 html + text2 txt  => text1 + '<br>' + dol_nl2br(text2)\n *  text1 txt  + text2 html => dol_nl2br(text1) + '<br>' + text2\n *  text1 txt  + text2 txt  => text1 + '\\n' + text2\n *\n *  @param  string  $text1          Text 1\n *  @param  string  $text2          Text 2\n *  @param  bool    $forxml         true=Use <br /> instead of <br> if we have to add a br tag\n *  @param  bool    $invert         invert order of description lines (we often use config MAIN_CHANGE_ORDER_CONCAT_DESCRIPTION in this parameter)\n *  @return string                  Text 1 + new line + Text2\n *  @see    dol_textishtml()\n */\nfunction dol_concatdesc($text1, $text2, $forxml = false, $invert = false)\n{\n    if (!empty($invert))\n    {\n            $tmp = $text1;\n            $text1 = $text2;\n            $text2 = $tmp;\n    }\n\n    $ret = '';\n    $ret .= (!dol_textishtml($text1) && dol_textishtml($text2)) ? dol_nl2br(dol_escape_htmltag($text1, 0, 1, '', 1), 0, $forxml) : $text1;\n    $ret .= (!empty($text1) && !empty($text2)) ? ((dol_textishtml($text1) || dol_textishtml($text2)) ? ($forxml ? \"<br \\>\\n\" : \"<br>\\n\") : \"\\n\") : \"\";\n    $ret .= (dol_textishtml($text1) && !dol_textishtml($text2)) ? dol_nl2br(dol_escape_htmltag($text2, 0, 1, '', 1), 0, $forxml) : $text2;\n    return $ret;\n}\n\n\n\n/**\n * Return array of possible common substitutions. This includes several families like: 'system', 'mycompany', 'object', 'objectamount', 'date', 'user'\n *\n * @param\tTranslate\t$outputlangs\tOutput language\n * @param   int         $onlykey        1=Do not calculate some heavy values of keys (performance enhancement when we need only the keys), 2=Values are trunc and html sanitized (to use for help tooltip)\n * @param   array       $exclude        Array of family keys we want to exclude. For example array('system', 'mycompany', 'object', 'objectamount', 'date', 'user', ...)\n * @param   Object      $object         Object for keys on object\n * @return\tarray\t\t\t\t\t\tArray of substitutions\n * @see setSubstitFromObject()\n */\nfunction getCommonSubstitutionArray($outputlangs, $onlykey = 0, $exclude = null, $object = null)\n{\n\tglobal $db, $conf, $mysoc, $user, $extrafields;\n\n\t$substitutionarray = array();\n\n\tif (empty($exclude) || !in_array('user', $exclude))\n\t{\n\t\t// Add SIGNATURE into substitutionarray first, so, when we will make the substitution,\n\t\t// this will include signature content first and then replace var found into content of signature\n\t\t$signature = $user->signature;\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t'__USER_SIGNATURE__' => (string) (($signature && empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN)) ? ($onlykey == 2 ? dol_trunc(dol_string_nohtmltag($signature), 30) : $signature) : '')\n\t\t)\n\t\t\t);\n\t\t// For backward compatibility\n\t\tif ($onlykey != 2)\n\t\t{\n\t\t\t$substitutionarray['__SIGNATURE__'] = (string) (($signature && empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN)) ? ($onlykey == 2 ? dol_trunc(dol_string_nohtmltag($signature), 30) : $signature) : '');\n\t\t}\n\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t'__USER_ID__' => (string) $user->id,\n\t\t'__USER_LOGIN__' => (string) $user->login,\n        '__USER_EMAIL__' => (string) $user->email,\n        '__USER_LASTNAME__' => (string) $user->lastname,\n\t\t'__USER_FIRSTNAME__' => (string) $user->firstname,\n\t\t'__USER_FULLNAME__' => (string) $user->getFullName($outputlangs),\n\t\t'__USER_SUPERVISOR_ID__' => (string) ($user->fk_user ? $user->fk_user : '0'),\n\t\t'__USER_REMOTE_IP__' => (string) getUserRemoteIP()\n\t\t)\n\t\t\t);\n\t}\n\tif ((empty($exclude) || !in_array('mycompany', $exclude)) && is_object($mysoc))\n\t{\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t\t'__MYCOMPANY_NAME__'    => $mysoc->name,\n\t\t\t'__MYCOMPANY_EMAIL__'   => $mysoc->email,\n\t\t\t'__MYCOMPANY_PROFID1__' => $mysoc->idprof1,\n\t\t\t'__MYCOMPANY_PROFID2__' => $mysoc->idprof2,\n\t\t\t'__MYCOMPANY_PROFID3__' => $mysoc->idprof3,\n\t\t\t'__MYCOMPANY_PROFID4__' => $mysoc->idprof4,\n\t\t\t'__MYCOMPANY_PROFID5__' => $mysoc->idprof5,\n\t\t\t'__MYCOMPANY_PROFID6__' => $mysoc->idprof6,\n\t\t\t'__MYCOMPANY_CAPITAL__' => $mysoc->capital,\n\t\t\t'__MYCOMPANY_FULLADDRESS__' => $mysoc->getFullAddress(1, ', '),\n\t\t\t'__MYCOMPANY_ADDRESS__' => $mysoc->address,\n\t\t\t'__MYCOMPANY_ZIP__'     => $mysoc->zip,\n\t\t\t'__MYCOMPANY_TOWN__'    => $mysoc->town,\n\t\t\t'__MYCOMPANY_COUNTRY__'    => $mysoc->country,\n\t\t\t'__MYCOMPANY_COUNTRY_ID__' => $mysoc->country_id,\n        \t'__MYCOMPANY_COUNTRY_CODE__' => $mysoc->country_code,\n        \t'__MYCOMPANY_CURRENCY_CODE__' => $conf->currency\n\t\t));\n\t}\n\n\tif (($onlykey || is_object($object)) && (empty($exclude) || !in_array('object', $exclude)))\n\t{\n\t\tif ($onlykey)\n\t\t{\n\t\t\t$substitutionarray['__ID__'] = '__ID__';\n\t\t\t$substitutionarray['__REF__'] = '__REF__';\n\t\t\t$substitutionarray['__REF_CLIENT__'] = '__REF_CLIENT__';\n\t\t\t$substitutionarray['__REF_SUPPLIER__'] = '__REF_SUPPLIER__';\n\t\t\t$substitutionarray['__NOTE_PUBLIC__'] = '__NOTE_PUBLIC__';\n\t\t\t$substitutionarray['__NOTE_PRIVATE__'] = '__NOTE_PRIVATE__';\n\t\t\t$substitutionarray['__EXTRAFIELD_XXX__'] = '__EXTRAFIELD_XXX__';\n\n\t\t\tif (!empty($conf->societe->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__THIRDPARTY_ID__'] = '__THIRDPARTY_ID__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME__'] = '__THIRDPARTY_NAME__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME_ALIAS__'] = '__THIRDPARTY_NAME_ALIAS__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_CLIENT__'] = '__THIRDPARTY_CODE_CLIENT__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_FOURNISSEUR__'] = '__THIRDPARTY_CODE_FOURNISSEUR__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_EMAIL__'] = '__THIRDPARTY_EMAIL__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_PHONE__'] = '__THIRDPARTY_PHONE__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_FAX__'] = '__THIRDPARTY_FAX__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_ADDRESS__'] = '__THIRDPARTY_ADDRESS__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_ZIP__'] = '__THIRDPARTY_ZIP__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_TOWN__'] = '__THIRDPARTY_TOWN__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF1__'] = '__THIRDPARTY_IDPROF1__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF2__'] = '__THIRDPARTY_IDPROF2__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF3__'] = '__THIRDPARTY_IDPROF3__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF4__'] = '__THIRDPARTY_IDPROF4__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF5__'] = '__THIRDPARTY_IDPROF5__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF6__'] = '__THIRDPARTY_IDPROF6__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_TVAINTRA__'] = '__THIRDPARTY_TVAINTRA__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PUBLIC__'] = '__THIRDPARTY_NOTE_PUBLIC__';\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PRIVATE__'] = '__THIRDPARTY_NOTE_PRIVATE__';\n\t\t\t}\n\t\t\tif (!empty($conf->adherent->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__MEMBER_ID__'] = '__MEMBER_ID__';\n\t\t\t\t$substitutionarray['__MEMBER_CIVILITY__'] = '__MEMBER_CIVILITY__';\n\t\t\t\t$substitutionarray['__MEMBER_FIRSTNAME__'] = '__MEMBER_FIRSTNAME__';\n\t\t\t\t$substitutionarray['__MEMBER_LASTNAME__'] = '__MEMBER_LASTNAME__';\n\t\t\t\t/*$substitutionarray['__MEMBER_NOTE_PUBLIC__'] = '__MEMBER_NOTE_PUBLIC__';\n\t\t\t\t$substitutionarray['__MEMBER_NOTE_PRIVATE__'] = '__MEMBER_NOTE_PRIVATE__';*/\n\t\t\t}\n\t\t\tif (!empty($conf->projet->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__PROJECT_ID__'] = '__PROJECT_ID__';\n\t\t\t\t$substitutionarray['__PROJECT_REF__'] = '__PROJECT_REF__';\n\t\t\t\t$substitutionarray['__PROJECT_NAME__'] = '__PROJECT_NAME__';\n\t\t\t\t/*$substitutionarray['__PROJECT_NOTE_PUBLIC__'] = '__PROJECT_NOTE_PUBLIC__';\n\t\t\t\t$substitutionarray['__PROJECT_NOTE_PRIVATE__'] = '__PROJECT_NOTE_PRIVATE__';*/\n\t\t\t}\n\t\t\tif (!empty($conf->contrat->enabled))\n\t\t\t{\n\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATE__'] = 'Highest date planned for a service start';\n\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATETIME__'] = 'Highest date and hour planned for service start';\n\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATE__'] = 'Lowest data for planned expiration of service';\n\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATETIME__'] = 'Lowest date and hour for planned expiration of service';\n\t\t\t}\n\t\t\t$substitutionarray['__ONLINE_PAYMENT_URL__'] = 'UrlToPayOnlineIfApplicable';\n\t\t\t$substitutionarray['__ONLINE_PAYMENT_TEXT_AND_URL__'] = 'TextAndUrlToPayOnlineIfApplicable';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT__'] = 'Security key (if key is not unique per record)';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_MEMBER__'] = 'Security key for payment on a member subscription (one key per member)';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_ORDER__'] = 'Security key for payment on an order';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_INVOICE__'] = 'Security key for payment on an invoice';\n\t\t\t$substitutionarray['__SECUREKEYPAYMENT_CONTRACTLINE__'] = 'Security key for payment on a a service';\n\n\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_PROPOSAL__'] = 'Direct download url of a proposal';\n\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_ORDER__'] = 'Direct download url of an order';\n\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_INVOICE__'] = 'Direct download url of an invoice';\n\n\t\t\tif (!empty($conf->expedition->enabled))\n\t\t\t{\n\t\t\t    $substitutionarray['__SHIPPINGTRACKNUM__'] = 'Shipping tacking number';\n\t\t\t\t$substitutionarray['__SHIPPINGTRACKNUMURL__'] = 'Shipping tracking url';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$substitutionarray['__ID__'] = $object->id;\n\t\t\t$substitutionarray['__REF__'] = $object->ref;\n\t\t\t$substitutionarray['__REF_CLIENT__'] = (isset($object->ref_client) ? $object->ref_client : (isset($object->ref_customer) ? $object->ref_customer : null));\n\t\t\t$substitutionarray['__REF_SUPPLIER__'] = (isset($object->ref_supplier) ? $object->ref_supplier : null);\n\t\t\t$substitutionarray['__NOTE_PUBLIC__'] = (isset($object->note_public) ? $object->note_public : null);\n\t\t\t$substitutionarray['__NOTE_PRIVATE__'] = (isset($object->note_private) ? $object->note_private : null);\n\n\t\t\t$substitutionarray['__DATE_DELIVERY__'] = (isset($object->date_livraison) ? dol_print_date($object->date_livraison, 'day', 0, $outputlangs) : '');\n\n\t\t\t// For backward compatibility\n\t\t\t$substitutionarray['__REFCLIENT__'] = (isset($object->ref_client) ? $object->ref_client : (isset($object->ref_customer) ? $object->ref_customer : null));\n\t\t\t$substitutionarray['__REFSUPPLIER__'] = (isset($object->ref_supplier) ? $object->ref_supplier : null);\n\t\t\t$substitutionarray['__REFCLIENT__'] = (isset($object->ref_client) ? $object->ref_client : (isset($object->ref_customer) ? $object->ref_customer : null));\n\t\t\t$substitutionarray['__REFSUPPLIER__'] = (isset($object->ref_supplier) ? $object->ref_supplier : null);\n\t\t\t$substitutionarray['__SUPPLIER_ORDER_DATE_DELIVERY__'] = (isset($object->date_livraison) ? dol_print_date($object->date_livraison, 'day', 0, $outputlangs) : '');\n\t\t\t$substitutionarray['__SUPPLIER_ORDER_DELAY_DELIVERY__'] = $outputlangs->transnoentities(\"AvailabilityType\".$object->availability_code) != ('AvailabilityType'.$object->availability_code) ? $outputlangs->transnoentities(\"AvailabilityType\".$object->availability_code) : $outputlangs->convToOutputCharset(isset($object->availability) ? $object->availability : '');\n\n\t\t\t$birthday = dol_print_date($object->birth, 'day');\n\n\t\t\tif ($object->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__MEMBER_ID__'] = $object->id;\n\t\t\t\tif (method_exists($object, 'getCivilityLabel')) $substitutionarray['__MEMBER_CIVILITY__'] = $object->getCivilityLabel();\n\t\t\t\t$substitutionarray['__MEMBER_FIRSTNAME__'] = $object->firstname;\n\t\t\t\t$substitutionarray['__MEMBER_LASTNAME__'] = $object->lastname;\n\t\t\t\tif (method_exists($object, 'getFullName')) $substitutionarray['__MEMBER_FULLNAME__'] = $object->getFullName($outputlangs);\n\t\t\t\t$substitutionarray['__MEMBER_COMPANY__'] = $object->societe;\n\t\t\t\t$substitutionarray['__MEMBER_ADDRESS__'] = $object->address;\n\t\t\t\t$substitutionarray['__MEMBER_ZIP__'] = $object->zip;\n\t\t\t\t$substitutionarray['__MEMBER_TOWN__'] = $object->town;\n\t\t\t\t$substitutionarray['__MEMBER_COUNTRY__'] = $object->country;\n\t\t\t\t$substitutionarray['__MEMBER_EMAIL__'] = $object->email;\n\t\t\t\t$substitutionarray['__MEMBER_BIRTH__'] = $birthday;\n\t\t\t\t$substitutionarray['__MEMBER_PHOTO__'] = $object->photo;\n\t\t\t\t$substitutionarray['__MEMBER_LOGIN__'] = $object->login;\n\t\t\t\t$substitutionarray['__MEMBER_PASSWORD__'] = $object->pass;\n\t\t\t\t$substitutionarray['__MEMBER_PHONE__'] = $object->phone;\n\t\t\t\t$substitutionarray['__MEMBER_PHONEPRO__'] = $object->phone_perso;\n\t\t\t\t$substitutionarray['__MEMBER_PHONEMOBILE__'] = $object->phone_mobile;\n\t\t\t\t$substitutionarray['__MEMBER_FIRST_SUBSCRIPTION_DATE__']       = dol_print_date($object->first_subscription_date, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_FIRST_SUBSCRIPTION_DATE_START__'] = dol_print_date($object->first_subscription_date_start, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_FIRST_SUBSCRIPTION_DATE_END__']   = dol_print_date($object->first_subscription_date_end, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_LAST_SUBSCRIPTION_DATE__']        = dol_print_date($object->last_subscription_date, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_LAST_SUBSCRIPTION_DATE_START__']  = dol_print_date($object->last_subscription_date_start, 'dayrfc');\n\t\t\t\t$substitutionarray['__MEMBER_LAST_SUBSCRIPTION_DATE_END__']    = dol_print_date($object->last_subscription_date_end, 'dayrfc');\n\t\t\t}\n\n\t\t\tif (is_object($object) && $object->element == 'societe')\n\t\t\t{\n\t\t\t\t$substitutionarray['__THIRDPARTY_ID__'] = (is_object($object) ? $object->id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME__'] = (is_object($object) ? $object->name : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME_ALIAS__'] = (is_object($object) ? $object->name_alias : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_CLIENT__'] = (is_object($object) ? $object->code_client : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_FOURNISSEUR__'] = (is_object($object) ? $object->code_fournisseur : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_EMAIL__'] = (is_object($object) ? $object->email : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_PHONE__'] = (is_object($object) ? $object->phone : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_FAX__'] = (is_object($object) ? $object->fax : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ADDRESS__'] = (is_object($object) ? $object->address : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ZIP__'] = (is_object($object) ? $object->zip : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TOWN__'] = (is_object($object) ? $object->town : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_ID__'] = (is_object($object) ? $object->country_id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_CODE__'] = (is_object($object) ? $object->country_code : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF1__'] = (is_object($object) ? $object->idprof1 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF2__'] = (is_object($object) ? $object->idprof2 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF3__'] = (is_object($object) ? $object->idprof3 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF4__'] = (is_object($object) ? $object->idprof4 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF5__'] = (is_object($object) ? $object->idprof5 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF6__'] = (is_object($object) ? $object->idprof6 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TVAINTRA__'] = (is_object($object) ? $object->tva_intra : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PUBLIC__'] = (is_object($object) ?dol_htmlentitiesbr($object->note_public) : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PRIVATE__'] = (is_object($object) ?dol_htmlentitiesbr($object->note_private) : '');\n\t\t\t}\n\t\t\telseif (is_object($object->thirdparty) && $object->thirdparty->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__THIRDPARTY_ID__'] = (is_object($object->thirdparty) ? $object->thirdparty->id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME__'] = (is_object($object->thirdparty) ? $object->thirdparty->name : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NAME_ALIAS__'] = (is_object($object->thirdparty) ? $object->thirdparty->name_alias : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_CLIENT__'] = (is_object($object->thirdparty) ? $object->thirdparty->code_client : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_CODE_FOURNISSEUR__'] = (is_object($object->thirdparty) ? $object->thirdparty->code_fournisseur : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_EMAIL__'] = (is_object($object->thirdparty) ? $object->thirdparty->email : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_PHONE__'] = (is_object($object->thirdparty) ? $object->thirdparty->phone : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_FAX__'] = (is_object($object->thirdparty) ? $object->thirdparty->fax : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ADDRESS__'] = (is_object($object->thirdparty) ? $object->thirdparty->address : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_ZIP__'] = (is_object($object->thirdparty) ? $object->thirdparty->zip : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TOWN__'] = (is_object($object->thirdparty) ? $object->thirdparty->town : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_ID__'] = (is_object($object->thirdparty) ? $object->thirdparty->country_id : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_COUNTRY_CODE__'] = (is_object($object->thirdparty) ? $object->thirdparty->country_code : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF1__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof1 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF2__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof2 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF3__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof3 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF4__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof4 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF5__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof5 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_IDPROF6__'] = (is_object($object->thirdparty) ? $object->thirdparty->idprof6 : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_TVAINTRA__'] = (is_object($object->thirdparty) ? $object->thirdparty->tva_intra : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PUBLIC__'] = (is_object($object->thirdparty) ?dol_htmlentitiesbr($object->thirdparty->note_public) : '');\n\t\t\t\t$substitutionarray['__THIRDPARTY_NOTE_PRIVATE__'] = (is_object($object->thirdparty) ?dol_htmlentitiesbr($object->thirdparty->note_private) : '');\n\t\t\t}\n\n\t\t\tif (is_object($object->project) && $object->project->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__PROJECT_ID__'] = (is_object($object->project) ? $object->project->id : '');\n\t\t\t\t$substitutionarray['__PROJECT_REF__'] = (is_object($object->project) ? $object->project->ref : '');\n\t\t\t\t$substitutionarray['__PROJECT_NAME__'] = (is_object($object->project) ? $object->project->title : '');\n\t\t\t}\n\t\t\tif (is_object($object->projet) && $object->projet->id > 0)\t// Deprecated, for backward compatibility\n\t\t\t{\n\t\t\t\t$substitutionarray['__PROJECT_ID__'] = (is_object($object->projet) ? $object->projet->id : '');\n\t\t\t\t$substitutionarray['__PROJECT_REF__'] = (is_object($object->projet) ? $object->projet->ref : '');\n\t\t\t\t$substitutionarray['__PROJECT_NAME__'] = (is_object($object->projet) ? $object->projet->title : '');\n\t\t\t}\n\n\t\t\tif (is_object($object) && $object->element == 'shipping')\n\t\t\t{\n\t\t\t\t$substitutionarray['__SHIPPINGTRACKNUM__'] = $object->tracking_number;\n\t\t\t\t$substitutionarray['__SHIPPINGTRACKNUMURL__'] = $object->tracking_url;\n\t\t\t}\n\n\t\t\tif (is_object($object) && $object->element == 'contrat' && is_array($object->lines))\n\t\t\t{\n\t\t\t\tif ($object->id > 0)\n\t\t\t\t{\n\t\t\t\t\t$dateplannedstart = '';\n\t\t\t\t\t$datenextexpiration = '';\n\t\t\t\t\tforeach ($object->lines as $line)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($line->date_ouverture_prevue > $dateplannedstart) $dateplannedstart = $line->date_ouverture_prevue;\n\t\t\t\t\t\tif ($line->statut == 4 && $line->date_fin_prevue && (!$datenextexpiration || $line->date_fin_prevue < $datenextexpiration)) $datenextexpiration = $line->date_fin_prevue;\n\t\t\t\t\t}\n\t\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATE__'] = dol_print_date($dateplannedstart, 'dayrfc');\n\t\t\t\t\t$substitutionarray['__CONTRACT_HIGHEST_PLANNED_START_DATETIME__'] = dol_print_date($dateplannedstart, 'standard');\n\t\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATE__'] = dol_print_date($datenextexpiration, 'dayrfc');\n\t\t\t\t\t$substitutionarray['__CONTRACT_LOWEST_EXPIRATION_DATETIME__'] = dol_print_date($datenextexpiration, 'standard');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create dynamic tags for __EXTRAFIELD_FIELD__\n\t\t\tif ($object->table_element && $object->id > 0)\n\t\t\t{\n\t\t\t\tif (!is_object($extrafields)) $extrafields = new ExtraFields($db);\n\t\t\t\t$extrafields->fetch_name_optionals_label($object->table_element, true);\n\n\t\t\t\tif ($object->fetch_optionals() > 0)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($extrafields->attributes[$object->table_element]['label']) && count($extrafields->attributes[$object->table_element]['label']) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach ($extrafields->attributes[$object->table_element]['label'] as $key => $label) {\n\t\t\t\t\t\t\t$substitutionarray['__EXTRAFIELD_'.strtoupper($key).'__'] = $object->array_options['options_'.$key];\n                            if ($extrafields->attribute_type[$key] == 'date') {\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '__'] = dol_print_date($object->array_options['options_' . $key], 'day');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_LOCALE__'] = dol_print_date($object->array_options['options_' . $key], 'day', 'tzserver', $outputlangs);\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_RFC__'] = dol_print_date($object->array_options['options_' . $key], 'dayrfc');\n                            } elseif ($extrafields->attribute_type[$key] == 'datetime') {\n                                $datetime = $object->array_options['options_'.$key];\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'dayhour') : '');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_LOCALE__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'dayhour', 'tzserver', $outputlangs) : '');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_DAY_LOCALE__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'day', 'tzserver', $outputlangs) : '');\n                                $substitutionarray['__EXTRAFIELD_' . strtoupper($key) . '_RFC__'] = ($datetime != \"0000-00-00 00:00:00\" ? dol_print_date($datetime, 'dayhourrfc') : '');\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Complete substitution array with the url to make online payment\n\t\t\t$paymenturl = '';\n\t\t\tif (empty($substitutionarray['__REF__']))\n\t\t\t{\n\t\t\t\t$paymenturl = '';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Set the online payment url link into __ONLINE_PAYMENT_URL__ key\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/payments.lib.php';\n\t\t\t\t$outputlangs->loadLangs(array('paypal', 'other'));\n\t\t\t\t$typeforonlinepayment = 'free';\n\t\t\t\tif (is_object($object) && $object->element == 'commande') $typeforonlinepayment = 'order';\n\t\t\t\tif (is_object($object) && $object->element == 'facture')  $typeforonlinepayment = 'invoice';\n\t\t\t\tif (is_object($object) && $object->element == 'member')   $typeforonlinepayment = 'member';\n\t\t\t\t$url = getOnlinePaymentUrl(0, $typeforonlinepayment, $substitutionarray['__REF__']);\n\t\t\t\t$paymenturl = $url;\n\t\t\t}\n\n\t\t\tif ($object->id > 0)\n\t\t\t{\n\t\t\t\t$substitutionarray['__ONLINE_PAYMENT_TEXT_AND_URL__'] = ($paymenturl ?str_replace('\\n', \"\\n\", $outputlangs->trans(\"PredefinedMailContentLink\", $paymenturl)) : '');\n\t\t\t\t$substitutionarray['__ONLINE_PAYMENT_URL__'] = $paymenturl;\n\n\t\t\t\tif (!empty($conf->global->PROPOSAL_ALLOW_EXTERNAL_DOWNLOAD) && is_object($object) && $object->element == 'propal')\n\t\t\t\t{\n\t\t\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_PROPOSAL__'] = $object->getLastMainDocLink($object->element);\n\t\t\t\t}\n\t\t\t\telse $substitutionarray['__DIRECTDOWNLOAD_URL_PROPOSAL__'] = '';\n\t\t\t\tif (!empty($conf->global->ORDER_ALLOW_EXTERNAL_DOWNLOAD) && is_object($object) && $object->element == 'commande')\n\t\t\t\t{\n\t\t\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_ORDER__'] = $object->getLastMainDocLink($object->element);\n\t\t\t\t}\n\t\t\t\telse $substitutionarray['__DIRECTDOWNLOAD_URL_ORDER__'] = '';\n\t\t\t\tif (!empty($conf->global->INVOICE_ALLOW_EXTERNAL_DOWNLOAD) && is_object($object) && $object->element == 'facture')\n\t\t\t\t{\n\t\t\t\t\t$substitutionarray['__DIRECTDOWNLOAD_URL_INVOICE__'] = $object->getLastMainDocLink($object->element);\n\t\t\t\t}\n\t\t\t\telse $substitutionarray['__DIRECTDOWNLOAD_URL_INVOICE__'] = '';\n\n\t\t\t\tif (is_object($object) && $object->element == 'propal') $substitutionarray['__URL_PROPOSAL__'] = DOL_MAIN_URL_ROOT.\"/comm/propal/card.php?id=\".$object->id;\n\t\t\t\tif (is_object($object) && $object->element == 'commande') $substitutionarray['__URL_ORDER__'] = DOL_MAIN_URL_ROOT.\"/commande/card.php?id=\".$object->id;\n\t\t\t\tif (is_object($object) && $object->element == 'facture') $substitutionarray['__URL_INVOICE__'] = DOL_MAIN_URL_ROOT.\"/compta/facture/card.php?id=\".$object->id;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($exclude) || !in_array('objectamount', $exclude))\n\t{\n\t\t$substitutionarray['__DATE_YMD__']        = is_object($object) ? (isset($object->date) ? dol_print_date($object->date, 'day', 0, $outputlangs) : null) : '';\n\t\t$substitutionarray['__DATE_DUE_YMD__']    = is_object($object) ? (isset($object->date_lim_reglement) ? dol_print_date($object->date_lim_reglement, 'day', 0, $outputlangs) : null) : '';\n\n\t\t$substitutionarray['__AMOUNT__']          = is_object($object) ? $object->total_ttc : '';\n\t\t$substitutionarray['__AMOUNT_EXCL_TAX__'] = is_object($object) ? $object->total_ht : '';\n\t\t$substitutionarray['__AMOUNT_VAT__']      = is_object($object) ? ($object->total_vat ? $object->total_vat : $object->total_tva) : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(1)) $substitutionarray['__AMOUNT_TAX2__']     = is_object($object) ? $object->total_localtax1 : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(2)) $substitutionarray['__AMOUNT_TAX3__']     = is_object($object) ? $object->total_localtax2 : '';\n\n\t\t$substitutionarray['__AMOUNT_FORMATED__']          = is_object($object) ? ($object->total_ttc ? price($object->total_ttc, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\t\t$substitutionarray['__AMOUNT_EXCL_TAX_FORMATED__'] = is_object($object) ? ($object->total_ht ? price($object->total_ht, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\t\t$substitutionarray['__AMOUNT_VAT_FORMATED__']      = is_object($object) ? ($object->total_vat ? price($object->total_vat, 0, $outputlangs, 0, 0, -1, $conf->currency) : ($object->total_tva ? price($object->total_tva, 0, $outputlangs, 0, 0, -1, $conf->currency) : null)) : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(1)) $substitutionarray['__AMOUNT_TAX2_FORMATED__']     = is_object($object) ? ($object->total_localtax1 ? price($object->total_localtax1, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\t\tif ($onlykey != 2 || $mysoc->useLocalTax(2)) $substitutionarray['__AMOUNT_TAX3_FORMATED__']     = is_object($object) ? ($object->total_localtax2 ? price($object->total_localtax2, 0, $outputlangs, 0, 0, -1, $conf->currency) : null) : '';\n\n\t\t// TODO Add keys for foreign multicurrency\n\n\t\t// For backward compatibility\n\t\tif ($onlykey != 2)\n\t\t{\n\t\t\t$substitutionarray['__TOTAL_TTC__']    = is_object($object) ? $object->total_ttc : '';\n\t\t\t$substitutionarray['__TOTAL_HT__']     = is_object($object) ? $object->total_ht : '';\n\t\t\t$substitutionarray['__TOTAL_VAT__']    = is_object($object) ? ($object->total_vat ? $object->total_vat : $object->total_tva) : '';\n\t\t}\n\t}\n\n\t//var_dump($substitutionarray['__AMOUNT_FORMATED__']);\n\tif (empty($exclude) || !in_array('date', $exclude))\n\t{\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\n\t\t$tmp = dol_getdate(dol_now(), true);\n\t\t$tmp2 = dol_get_prev_day($tmp['mday'], $tmp['mon'], $tmp['year']);\n\t\t$tmp3 = dol_get_prev_month($tmp['mon'], $tmp['year']);\n\t\t$tmp4 = dol_get_next_day($tmp['mday'], $tmp['mon'], $tmp['year']);\n\t\t$tmp5 = dol_get_next_month($tmp['mon'], $tmp['year']);\n\n        $substitutionarray = array_merge($substitutionarray, array(\n\t\t\t'__DAY__' => (string) $tmp['mday'],\n\t\t\t'__DAY_TEXT__' => $outputlangs->trans('Day'.$tmp['wday']), // Monday\n\t\t\t'__DAY_TEXT_SHORT__' => $outputlangs->trans($tmp['weekday'].'Min'), // Mon\n\t\t\t'__DAY_TEXT_MIN__' => $outputlangs->trans('Short'.$tmp['weekday']), // M\n\t\t\t'__MONTH__' => (string) $tmp['mon'],\n\t\t\t'__MONTH_TEXT__' => $outputlangs->trans('Month'.sprintf(\"%02d\", $tmp['mon'])),\n\t\t\t'__MONTH_TEXT_SHORT__' => $outputlangs->trans('MonthShort'.sprintf(\"%02d\", $tmp['mon'])),\n\t\t\t'__MONTH_TEXT_MIN__' => $outputlangs->trans('MonthVeryShort'.sprintf(\"%02d\", $tmp['mon'])),\n\t\t\t'__YEAR__' => (string) $tmp['year'],\n\t\t\t'__PREVIOUS_DAY__' => (string) $tmp2['day'],\n\t\t\t'__PREVIOUS_MONTH__' => (string) $tmp3['month'],\n\t\t\t'__PREVIOUS_YEAR__' => (string) ($tmp['year'] - 1),\n\t\t\t'__NEXT_DAY__' => (string) $tmp4['day'],\n\t\t\t'__NEXT_MONTH__' => (string) $tmp5['month'],\n\t\t\t'__NEXT_YEAR__' => (string) ($tmp['year'] + 1),\n\t\t));\n\t}\n\n\tif (!empty($conf->multicompany->enabled))\n\t{\n\t\t$substitutionarray = array_merge($substitutionarray, array('__ENTITY_ID__' => $conf->entity));\n\t}\n\tif (empty($exclude) || !in_array('system', $exclude))\n\t{\n\t\t$substitutionarray['__DOL_MAIN_URL_ROOT__'] = DOL_MAIN_URL_ROOT;\n\t\t$substitutionarray['__(AnyTranslationKey)__'] = $outputlangs->trans('TranslationOfKey');\n\t\t$substitutionarray['__(AnyTranslationKey|langfile)__'] = $outputlangs->trans('TranslationOfKey').' (load also language file before)';\n\t\t$substitutionarray['__[AnyConstantKey]__'] = $outputlangs->trans('ValueOfConstantKey');\n\t}\n\n\treturn $substitutionarray;\n}\n\n/**\n *  Make substitution into a text string, replacing keys with vals from $substitutionarray (oldval=>newval),\n *  and texts like __(TranslationKey|langfile)__ and __[ConstantKey]__ are also replaced.\n *  Example of usage:\n *  $substitutionarray = getCommonSubstitutionArray($langs, 0, null, $thirdparty);\n *  complete_substitutions_array($substitutionarray, $langs, $thirdparty);\n *  $mesg = make_substitutions($mesg, $substitutionarray, $langs);\n *\n *  @param\tstring\t\t$text\t      \t\t\tSource string in which we must do substitution\n *  @param  array\t\t$substitutionarray\t\tArray with key->val to substitute. Example: array('__MYKEY__' => 'MyVal', ...)\n *  @param\tTranslate\t$outputlangs\t\t\tOutput language\n * \t@return string  \t\t    \t\t\t\tOutput string after substitutions\n *  @see\tcomplete_substitutions_array(), getCommonSubstitutionArray()\n */\nfunction make_substitutions($text, $substitutionarray, $outputlangs = null)\n{\n\tglobal $conf, $langs;\n\n\tif (!is_array($substitutionarray)) return 'ErrorBadParameterSubstitutionArrayWhenCalling_make_substitutions';\n\n\tif (empty($outputlangs)) $outputlangs = $langs;\n\n\t// Make substitution for language keys: __(AnyTranslationKey)__ or __(AnyTranslationKey|langfile)__\n\tif (is_object($outputlangs))\n\t{\n\t\t$reg = array();\n\t\twhile (preg_match('/__\\(([^\\)]+)\\)__/', $text, $reg))\n\t\t{\n\t\t\t$msgishtml = 0;\n\t\t\tif (dol_textishtml($text, 1)) $msgishtml = 1;\n\n\t\t\t// If key is __(TranslationKey|langfile)__, then force load of langfile.lang\n\t\t\t$tmp = explode('|', $reg[1]);\n\t\t\tif (!empty($tmp[1])) $outputlangs->load($tmp[1]);\n\n\t\t\t$text = preg_replace('/__\\('.preg_quote($reg[1], '/').'\\)__/', $msgishtml ?dol_htmlentitiesbr($outputlangs->transnoentitiesnoconv($reg[1])) : $outputlangs->transnoentitiesnoconv($reg[1]), $text);\n\t\t}\n\t}\n\n\t// Make substitution for constant keys.\n\t// Must be after the substitution of translation, so if the text of translation contains a string __[xxx]__, it is also converted.\n\t$reg = array();\n\twhile (preg_match('/__\\[([^\\]]+)\\]__/', $text, $reg))\n\t{\n\t\t$msgishtml = 0;\n\t\tif (dol_textishtml($text, 1)) $msgishtml = 1;\n\n\t\t$keyfound = $reg[1];\n\t\tif (preg_match('/(_pass|_pw|password|secret|_key|key$)/i', $keyfound)) $newval = '*****forbidden*****';\n\t\telse $newval = empty($conf->global->$keyfound) ? '' : $conf->global->$keyfound;\n\t\t$text = preg_replace('/__\\['.preg_quote($keyfound, '/').'\\]__/', $msgishtml ?dol_htmlentitiesbr($newval) : $newval, $text);\n\t}\n\n\t// Make substitition for array $substitutionarray\n\tforeach ($substitutionarray as $key => $value)\n\t{\n\t\tif (!isset($value)) continue; // If value is null, it same than not having substitution key at all into array, we do not replace.\n\n\t\tif ($key == '__SIGNATURE__' && (!empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN))) $value = ''; // Protection\n\t\tif ($key == '__USER_SIGNATURE__' && (!empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN))) $value = ''; // Protection\n\n\t\t$text = str_replace(\"$key\", \"$value\", $text); // We must keep the \" to work when value is 123.5 for example\n\t}\n\n\treturn $text;\n}\n\n/**\n *  Complete the $substitutionarray with more entries coming from external module that had set the \"substitutions=1\" into module_part array.\n *  In this case, method completesubstitutionarray provided by module is called.\n *\n *  @param  array\t\t$substitutionarray\t\tArray substitution old value => new value value\n *  @param  Translate\t$outputlangs            Output language\n *  @param  Object\t\t$object                 Source object\n *  @param  mixed\t\t$parameters       \t\tAdd more parameters (useful to pass product lines)\n *  @param  string      $callfunc               What is the name of the custom function that will be called? (default: completesubstitutionarray)\n *  @return\tvoid\n *  @see \tmake_substitutions()\n */\nfunction complete_substitutions_array(&$substitutionarray, $outputlangs, $object = null, $parameters = null, $callfunc = \"completesubstitutionarray\")\n{\n\tglobal $conf, $user;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t// Add a substitution key for each extrafields, using key __EXTRA_XXX__\n\t// TODO Remove this. Already available into the getCommonSubstitutionArray used to build the substitution array.\n\t/*if (is_object($object) && is_array($object->array_options))\n\t{\n\t\tforeach($object->array_options as $key => $val)\n\t\t{\n\t\t\t$keyshort=preg_replace('/^(options|extra)_/','',$key);\n\t\t\t$substitutionarray['__EXTRAFIELD_'.$keyshort.'__']=$val;\n\t\t\t// For backward compatibiliy\n\t\t\t$substitutionarray['%EXTRA_'.$keyshort.'%']=$val;\n\t\t}\n\t}*/\n\n\t// Check if there is external substitution to do, requested by plugins\n\t$dirsubstitutions = array_merge(array(), (array) $conf->modules_parts['substitutions']);\n\n\tforeach ($dirsubstitutions as $reldir)\n\t{\n\t\t$dir = dol_buildpath($reldir, 0);\n\n\t\t// Check if directory exists\n\t\tif (!dol_is_dir($dir)) continue;\n\n\t\t$substitfiles = dol_dir_list($dir, 'files', 0, 'functions_');\n\t\tforeach ($substitfiles as $substitfile)\n\t\t{\n\t\t\tif (preg_match('/functions_(.*)\\.lib\\.php/i', $substitfile['name'], $reg))\n\t\t\t{\n\t\t\t\t$module = $reg[1];\n\n\t\t\t\tdol_syslog(\"Library \".$substitfile['name'].\" found into \".$dir);\n\t\t\t\t// Include the user's functions file\n\t\t\t\trequire_once $dir.$substitfile['name'];\n\t\t\t\t// Call the user's function, and only if it is defined\n\t\t\t\t$function_name = $module.\"_\".$callfunc;\n\t\t\t\tif (function_exists($function_name)) $function_name($substitutionarray, $outputlangs, $object, $parameters);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\tint\t$date_start    Start date\n *    @param    int\t$date_end      End date\n *    @param    string\t\t$format        Output format\n *    @param\tTranslate\t$outputlangs   Output language\n *    @return\tvoid\n */\nfunction print_date_range($date_start, $date_end, $format = '', $outputlangs = '')\n{\n\tprint get_date_range($date_start, $date_end, $format, $outputlangs);\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\tint\t\t\t$date_start    \t\tStart date\n *    @param    int\t\t\t$date_end      \t\tEnd date\n *    @param    string\t\t$format        \t\tOutput format\n *    @param\tTranslate\t$outputlangs   \t\tOutput language\n *    @param\tinteger\t\t$withparenthesis\t1=Add parenthesis, 0=non parenthesis\n *    @return\tstring\t\t\t\t\t\t\tString\n */\nfunction get_date_range($date_start, $date_end, $format = '', $outputlangs = '', $withparenthesis = 1)\n{\n\tglobal $langs;\n\n\t$out = '';\n\n\tif (!is_object($outputlangs)) $outputlangs = $langs;\n\n\tif ($date_start && $date_end)\n\t{\n\t\t$out .= ($withparenthesis ? ' (' : '').$outputlangs->transnoentitiesnoconv('DateFromTo', dol_print_date($date_start, $format, false, $outputlangs), dol_print_date($date_end, $format, false, $outputlangs)).($withparenthesis ? ')' : '');\n\t}\n\tif ($date_start && !$date_end)\n\t{\n\t\t$out .= ($withparenthesis ? ' (' : '').$outputlangs->transnoentitiesnoconv('DateFrom', dol_print_date($date_start, $format, false, $outputlangs)).($withparenthesis ? ')' : '');\n\t}\n\tif (!$date_start && $date_end)\n\t{\n\t\t$out .= ($withparenthesis ? ' (' : '').$outputlangs->transnoentitiesnoconv('DateUntil', dol_print_date($date_end, $format, false, $outputlangs)).($withparenthesis ? ')' : '');\n\t}\n\n\treturn $out;\n}\n\n/**\n * Return firstname and lastname in correct order\n *\n * @param\tstring\t$firstname\t\tFirstname\n * @param\tstring\t$lastname\t\tLastname\n * @param\tint\t\t$nameorder\t\t-1=Auto, 0=Lastname+Firstname, 1=Firstname+Lastname, 2=Firstname, 3=Firstname if defined else lastname\n * @return\tstring\t\t\t\t\tFirstname + lastname or Lastname + firstname\n */\nfunction dolGetFirstLastname($firstname, $lastname, $nameorder = -1)\n{\n\tglobal $conf;\n\n\t$ret = '';\n\t// If order not defined, we use the setup\n\tif ($nameorder < 0) $nameorder = (empty($conf->global->MAIN_FIRSTNAME_NAME_POSITION) ? 1 : 0);\n\tif ($nameorder && $nameorder != 2 && $nameorder != 3)\n\t{\n\t\t$ret .= $firstname;\n\t\tif ($firstname && $lastname) $ret .= ' ';\n\t\t$ret .= $lastname;\n\t}\n\telseif ($nameorder == 2 || $nameorder == 3)\n\t{\n\t    $ret .= $firstname;\n\t    if (empty($ret) && $nameorder == 3)\n\t    {\n\t    \t$ret .= $lastname;\n\t    }\n\t}\n\telse\n\t{\n\t\t$ret .= $lastname;\n\t\tif ($firstname && $lastname) $ret .= ' ';\n\t\t$ret .= $firstname;\n\t}\n\treturn $ret;\n}\n\n\n/**\n *\tSet event message in dol_events session object. Will be output by calling dol_htmloutput_events.\n *  Note: Calling dol_htmloutput_events is done into pages by standard llxFooter() function.\n *  Note: Prefer to use setEventMessages instead.\n *\n *\t@param\tmixed\t$mesgs\t\t\tMessage string or array\n *  @param  string\t$style      \tWhich style to use ('mesgs' by default, 'warnings', 'errors')\n *  @return\tvoid\n *  @see\tdol_htmloutput_events()\n */\nfunction setEventMessage($mesgs, $style = 'mesgs')\n{\n\t//dol_syslog(__FUNCTION__ . \" is deprecated\", LOG_WARNING);\t\tThis is not deprecated, it is used by setEventMessages function\n\tif (!is_array($mesgs))\t\t// If mesgs is a string\n\t{\n\t\tif ($mesgs) $_SESSION['dol_events'][$style][] = $mesgs;\n\t}\n\telse\t\t\t\t\t\t// If mesgs is an array\n\t{\n\t\tforeach ($mesgs as $mesg)\n\t\t{\n\t\t\tif ($mesg) $_SESSION['dol_events'][$style][] = $mesg;\n\t\t}\n\t}\n}\n\n/**\n *\tSet event messages in dol_events session object. Will be output by calling dol_htmloutput_events.\n *  Note: Calling dol_htmloutput_events is done into pages by standard llxFooter() function.\n *\n *\t@param\tstring\t$mesg\t\t\tMessage string\n *\t@param\tarray\t$mesgs\t\t\tMessage array\n *  @param  string\t$style      \tWhich style to use ('mesgs' by default, 'warnings', 'errors')\n *  @param\tstring\t$messagekey\t\tA key to be used to allow the feature \"Never show this message again\"\n *  @return\tvoid\n *  @see\tdol_htmloutput_events()\n */\nfunction setEventMessages($mesg, $mesgs, $style = 'mesgs', $messagekey = '')\n{\n\tif (empty($mesg) && empty($mesgs))\n\t{\n\t\tdol_syslog(\"Try to add a message in stack with empty message\", LOG_WARNING);\n\t}\n\telse\n\t{\n\t\tif ($messagekey)\n\t\t{\n\t\t\t// Complete message with a js link to set a cookie \"DOLHIDEMESSAGE\".$messagekey;\n\t\t\t// TODO\n\t\t\t$mesg .= '';\n\t\t}\n\t\tif (empty($messagekey) || empty($_COOKIE[\"DOLHIDEMESSAGE\".$messagekey]))\n\t\t{\n\t\t\tif (!in_array((string) $style, array('mesgs', 'warnings', 'errors'))) dol_print_error('', 'Bad parameter style='.$style.' for setEventMessages');\n\t\t\tif (empty($mesgs)) setEventMessage($mesg, $style);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!empty($mesg) && !in_array($mesg, $mesgs)) setEventMessage($mesg, $style); // Add message string if not already into array\n\t\t\t\tsetEventMessage($mesgs, $style);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *  Note: Calling dol_htmloutput_events is done into pages by standard llxFooter() function, so there is\n *  no need to call it explicitely.\n *\n *  @param\tint\t\t$disabledoutputofmessages\tClear all messages stored into session without diplaying them\n *  @return\tvoid\n *  @see    \t\t\t\t\t\t\t\t\tdol_htmloutput_mesg()\n */\nfunction dol_htmloutput_events($disabledoutputofmessages = 0)\n{\n\t// Show mesgs\n\tif (isset($_SESSION['dol_events']['mesgs'])) {\n\t\tif (empty($disabledoutputofmessages)) dol_htmloutput_mesg('', $_SESSION['dol_events']['mesgs']);\n\t\tunset($_SESSION['dol_events']['mesgs']);\n\t}\n\n\t// Show errors\n\tif (isset($_SESSION['dol_events']['errors'])) {\n\t\tif (empty($disabledoutputofmessages)) dol_htmloutput_mesg('', $_SESSION['dol_events']['errors'], 'error');\n\t\tunset($_SESSION['dol_events']['errors']);\n\t}\n\n\t// Show warnings\n\tif (isset($_SESSION['dol_events']['warnings'])) {\n\t\tif (empty($disabledoutputofmessages)) dol_htmloutput_mesg('', $_SESSION['dol_events']['warnings'], 'warning');\n\t\tunset($_SESSION['dol_events']['warnings']);\n\t}\n}\n\n/**\n *\tGet formated messages to output (Used to show messages on html output).\n *  This include also the translation of the message key.\n *\n *\t@param\tstring\t\t$mesgstring\t\tMessage string or message key\n *\t@param\tstring[]\t$mesgarray      Array of message strings or message keys\n *  @param  string\t\t$style          Style of message output ('ok' or 'error')\n *  @param  int\t\t\t$keepembedded   Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *\t@return\tstring\t\t\t\t\t\tReturn html output\n *\n *  @see    dol_print_error()\n *  @see    dol_htmloutput_errors()\n *  @see    setEventMessages()\n */\nfunction get_htmloutput_mesg($mesgstring = '', $mesgarray = '', $style = 'ok', $keepembedded = 0)\n{\n\tglobal $conf, $langs;\n\n\t$ret = 0; $return = '';\n\t$out = '';\n\t$divstart = $divend = '';\n\n\t// If inline message with no format, we add it.\n\tif ((empty($conf->use_javascript_ajax) || !empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) || $keepembedded) && !preg_match('/<div class=\".*\">/i', $out))\n\t{\n\t\t$divstart = '<div class=\"'.$style.' clearboth\">';\n\t\t$divend = '</div>';\n\t}\n\n\tif ((is_array($mesgarray) && count($mesgarray)) || $mesgstring)\n\t{\n\t\t$langs->load(\"errors\");\n\t\t$out .= $divstart;\n\t\tif (is_array($mesgarray) && count($mesgarray))\n\t\t{\n\t\t\tforeach ($mesgarray as $message)\n\t\t\t{\n\t\t\t\t$ret++;\n\t\t\t\t$out .= $langs->trans($message);\n\t\t\t\tif ($ret < count($mesgarray)) $out .= \"<br>\\n\";\n\t\t\t}\n\t\t}\n\t\tif ($mesgstring)\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$ret++;\n\t\t\t$out .= $langs->trans($mesgstring);\n\t\t}\n\t\t$out .= $divend;\n\t}\n\n\tif ($out)\n\t{\n\t\tif (!empty($conf->use_javascript_ajax) && empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) && empty($keepembedded))\n\t\t{\n\t\t\t$return = '<script>\n\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\tvar block = '.(!empty($conf->global->MAIN_USE_JQUERY_BLOCKUI) ? \"true\" : \"false\").'\n\t\t\t\t\t\tif (block) {\n\t\t\t\t\t\t\t$.dolEventValid(\"\",\"'.dol_escape_js($out).'\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* jnotify(message, preset of message type, keepmessage) */\n\t\t\t\t\t\t\t$.jnotify(\"'.dol_escape_js($out).'\",\n\t\t\t\t\t\t\t\"'.($style == \"ok\" ? 3000 : $style).'\",\n\t\t\t\t\t\t\t'.($style == \"ok\" ? \"false\" : \"true\").',\n\t\t\t\t\t\t\t{ remove: function (){} } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t</script>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$return = $out;\n\t\t}\n\t}\n\n\treturn $return;\n}\n\n/**\n *  Get formated error messages to output (Used to show messages on html output).\n *\n *  @param  string\t$mesgstring         Error message\n *  @param  array\t$mesgarray          Error messages array\n *  @param  int\t\t$keepembedded       Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return string                \t\tReturn html output\n *\n *  @see    dol_print_error()\n *  @see    dol_htmloutput_mesg()\n */\nfunction get_htmloutput_errors($mesgstring = '', $mesgarray = array(), $keepembedded = 0)\n{\n\treturn get_htmloutput_mesg($mesgstring, $mesgarray, 'error', $keepembedded);\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *\n *\t@param\tstring\t\t$mesgstring\t\tMessage string or message key\n *\t@param\tstring[]\t$mesgarray      Array of message strings or message keys\n *\t@param  string      $style          Which style to use ('ok', 'warning', 'error')\n *\t@param  int         $keepembedded   Set to 1 if message must be kept embedded into its html place (this disable jnotify)\n *\t@return\tvoid\n *\n *\t@see    dol_print_error()\n *\t@see    dol_htmloutput_errors()\n *\t@see    setEventMessages()\n */\nfunction dol_htmloutput_mesg($mesgstring = '', $mesgarray = array(), $style = 'ok', $keepembedded = 0)\n{\n\tif (empty($mesgstring) && (!is_array($mesgarray) || count($mesgarray) == 0)) return;\n\n\t$iserror = 0;\n\t$iswarning = 0;\n\tif (is_array($mesgarray))\n\t{\n\t\tforeach ($mesgarray as $val)\n\t\t{\n\t\t\tif ($val && preg_match('/class=\"error\"/i', $val)) { $iserror++; break; }\n\t\t\tif ($val && preg_match('/class=\"warning\"/i', $val)) { $iswarning++; break; }\n\t\t}\n\t}\n\telseif ($mesgstring && preg_match('/class=\"error\"/i', $mesgstring)) $iserror++;\n\telseif ($mesgstring && preg_match('/class=\"warning\"/i', $mesgstring)) $iswarning++;\n\tif ($style == 'error') $iserror++;\n\tif ($style == 'warning') $iswarning++;\n\n\tif ($iserror || $iswarning)\n\t{\n\t\t// Remove div from texts\n\t\t$mesgstring = preg_replace('/<\\/div><div class=\"(error|warning)\">/', '<br>', $mesgstring);\n\t\t$mesgstring = preg_replace('/<div class=\"(error|warning)\">/', '', $mesgstring);\n\t\t$mesgstring = preg_replace('/<\\/div>/', '', $mesgstring);\n\t\t// Remove div from texts array\n\t\tif (is_array($mesgarray))\n\t\t{\n\t\t\t$newmesgarray = array();\n\t\t\tforeach ($mesgarray as $val)\n\t\t\t{\n\t\t\t\tif (is_string($val))\n\t\t\t\t{\n\t\t\t\t\t$tmpmesgstring = preg_replace('/<\\/div><div class=\"(error|warning)\">/', '<br>', $val);\n\t\t\t\t\t$tmpmesgstring = preg_replace('/<div class=\"(error|warning)\">/', '', $tmpmesgstring);\n\t\t\t\t\t$tmpmesgstring = preg_replace('/<\\/div>/', '', $tmpmesgstring);\n\t\t\t\t\t$newmesgarray[] = $tmpmesgstring;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(\"Error call of dol_htmloutput_mesg with an array with a value that is not a string\", LOG_WARNING);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$mesgarray = $newmesgarray;\n\t\t}\n\t\tprint get_htmloutput_mesg($mesgstring, $mesgarray, ($iserror ? 'error' : 'warning'), $keepembedded);\n\t}\n\telse print get_htmloutput_mesg($mesgstring, $mesgarray, 'ok', $keepembedded);\n}\n\n/**\n *  Print formated error messages to output (Used to show messages on html output).\n *\n *  @param\tstring\t$mesgstring          Error message\n *  @param  array\t$mesgarray           Error messages array\n *  @param  int\t\t$keepembedded        Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return\tvoid\n *\n *  @see    dol_print_error()\n *  @see    dol_htmloutput_mesg()\n */\nfunction dol_htmloutput_errors($mesgstring = '', $mesgarray = array(), $keepembedded = 0)\n{\n\tdol_htmloutput_mesg($mesgstring, $mesgarray, 'error', $keepembedded);\n}\n\n/**\n * \tAdvanced sort array by second index function, which produces ascending (default)\n *  or descending output and uses optionally natural case insensitive sorting (which\n *  can be optionally case sensitive as well).\n *\n *  @param      array\t\t$array      \t\tArray to sort (array of array('key1'=>val1,'key2'=>val2,'key3'...) or array of objects)\n *  @param      string\t\t$index\t\t\t\tKey in array to use for sorting criteria\n *  @param      int\t\t\t$order\t\t\t\tSort order ('asc' or 'desc')\n *  @param      int\t\t\t$natsort\t\t\t1=use \"natural\" sort (natsort), 0=use \"standard\" sort (asort)\n *  @param      int\t\t\t$case_sensitive\t\t1=sort is case sensitive, 0=not case sensitive\n *  @param\t\tint\t\t\t$keepindex\t\t\tIf 0 and index key of array to sort is a numeric, than index will be rewrote. If 1 or index key is not numeric, key for index is kept after sorting.\n *  @return     array\t\t\t\t\t\t\tSorted array\n */\nfunction dol_sort_array(&$array, $index, $order = 'asc', $natsort = 0, $case_sensitive = 0, $keepindex = 0)\n{\n\t// Clean parameters\n\t$order = strtolower($order);\n\n\tif (is_array($array))\n\t{\n\t\t$sizearray = count($array);\n\t\tif ($sizearray > 0)\n\t\t{\n\t\t\t$temp = array();\n\t\t\tforeach (array_keys($array) as $key)\n\t\t\t{\n\t\t\t\tif (is_object($array[$key]))\n\t\t\t\t{\n\t\t\t\t\t$temp[$key] = $array[$key]->$index;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$temp[$key] = $array[$key][$index];\n\t\t\t\t}\n\t\t\t}\n\n            if (!$natsort) {\n                ($order == 'asc') ? asort($temp) : arsort($temp);\n            } else {\n                ($case_sensitive) ? natsort($temp) : natcasesort($temp);\n                if ($order != 'asc') $temp = array_reverse($temp, true);\n            }\n\n\t\t\t$sorted = array();\n\n\t\t\tforeach (array_keys($temp) as $key)\n\t\t\t{\n\t\t\t\t(is_numeric($key) && empty($keepindex)) ? $sorted[] = $array[$key] : $sorted[$key] = $array[$key];\n\t\t\t}\n\n\t\t\treturn $sorted;\n\t\t}\n\t}\n\treturn $array;\n}\n\n\n/**\n *      Check if a string is in UTF8\n *\n *      @param\tstring\t$str        String to check\n * \t\t@return\tboolean\t\t\t\tTrue if string is UTF8 or ISO compatible with UTF8, False if not (ISO with special char or Binary)\n */\nfunction utf8_check($str)\n{\n\t// We must use here a binary strlen function (so not dol_strlen)\n\t$strLength = dol_strlen($str);\n\tfor ($i = 0; $i < $strLength; $i++)\n\t{\n\t\tif (ord($str[$i]) < 0x80) continue; // 0bbbbbbb\n\t\telseif ((ord($str[$i]) & 0xE0) == 0xC0) $n = 1; // 110bbbbb\n\t\telseif ((ord($str[$i]) & 0xF0) == 0xE0) $n = 2; // 1110bbbb\n\t\telseif ((ord($str[$i]) & 0xF8) == 0xF0) $n = 3; // 11110bbb\n\t\telseif ((ord($str[$i]) & 0xFC) == 0xF8) $n = 4; // 111110bb\n\t\telseif ((ord($str[$i]) & 0xFE) == 0xFC) $n = 5; // 1111110b\n\t\telse return false; // Does not match any model\n\t\tfor ($j = 0; $j < $n; $j++) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ((++$i == strlen($str)) || ((ord($str[$i]) & 0xC0) != 0x80))\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n *      Check if a string is in ASCII\n *\n *      @param\tstring\t$str        String to check\n * \t\t@return\tboolean\t\t\t\tTrue if string is ASCII, False if not (byte value > 0x7F)\n */\nfunction ascii_check($str)\n{\n\tif (function_exists('mb_check_encoding')) {\n\t\t//if (mb_detect_encoding($str, 'ASCII', true) return false;\n\t\tif (!mb_check_encoding($str, 'ASCII')) return false;\n\t} else {\n\t\tif (preg_match('/[^\\x00-\\x7f]/', $str)) return false; // Contains a byte > 7f\n\t}\n\n\treturn true;\n}\n\n\n/**\n *      Return a string encoded into OS filesystem encoding. This function is used to define\n * \t    value to pass to filesystem PHP functions.\n *\n *      @param\tstring\t$str        String to encode (UTF-8)\n * \t\t@return\tstring\t\t\t\tEncoded string (UTF-8, ISO-8859-1)\n */\nfunction dol_osencode($str)\n{\n\tglobal $conf;\n\n\t$tmp = ini_get(\"unicode.filesystem_encoding\"); // Disponible avec PHP 6.0\n\tif (empty($tmp) && !empty($_SERVER[\"WINDIR\"])) $tmp = 'iso-8859-1'; // By default for windows\n\tif (empty($tmp)) $tmp = 'utf-8'; // By default for other\n\tif (!empty($conf->global->MAIN_FILESYSTEM_ENCODING)) $tmp = $conf->global->MAIN_FILESYSTEM_ENCODING;\n\n\tif ($tmp == 'iso-8859-1') return utf8_decode($str);\n\treturn $str;\n}\n\n\n/**\n *      Return an id or code from a code or id.\n *      Store also Code-Id into a cache to speed up next request on same key.\n *\n * \t\t@param\tDoliDB\t$db\t\t\t\tDatabase handler\n * \t\t@param\tstring\t$key\t\t\tCode or Id to get Id or Code\n * \t\t@param\tstring\t$tablename\t\tTable name without prefix\n * \t\t@param\tstring\t$fieldkey\t\tField to search the key into\n * \t\t@param\tstring\t$fieldid\t\tField to get\n *      @param  int\t\t$entityfilter\tFilter by entity\n *      @return int\t\t\t\t\t\t<0 if KO, Id of code if OK\n *      @see $langs->getLabelFromKey\n */\nfunction dol_getIdFromCode($db, $key, $tablename, $fieldkey = 'code', $fieldid = 'id', $entityfilter = 0)\n{\n\tglobal $cache_codes;\n\n\t// If key empty\n\tif ($key == '') return '';\n\n\t// Check in cache\n\tif (isset($cache_codes[$tablename][$key][$fieldid]))\t// Can be defined to 0 or ''\n\t{\n\t\treturn $cache_codes[$tablename][$key][$fieldid]; // Found in cache\n\t}\n\n\tdol_syslog('dol_getIdFromCode (value for field '.$fieldid.' from key '.$key.' not found into cache)', LOG_DEBUG);\n\n\t$sql = \"SELECT \".$fieldid.\" as valuetoget\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.$tablename;\n\t$sql .= \" WHERE \".$fieldkey.\" = '\".$db->escape($key).\"'\";\n\tif (!empty($entityfilter))\n\t\t$sql .= \" AND entity IN (\".getEntity($tablename).\")\";\n\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($obj) $cache_codes[$tablename][$key][$fieldid] = $obj->valuetoget;\n\t\telse $cache_codes[$tablename][$key][$fieldid] = '';\n\t\t$db->free($resql);\n\t\treturn $cache_codes[$tablename][$key][$fieldid];\n\t}\n\telse\n\t{\n\t\treturn -1;\n\t}\n}\n\n/**\n * Verify if condition in string is ok or not\n *\n * @param \tstring\t\t$strRights\t\tString with condition to check\n * @return \tboolean\t\t\t\t\t\tTrue or False. Return True if strRights is ''\n */\nfunction verifCond($strRights)\n{\n\tglobal $user, $conf, $langs;\n\tglobal $leftmenu;\n\tglobal $rights; // To export to dol_eval function\n\n\t//print $strRights.\"<br>\\n\";\n\t$rights = true;\n\tif ($strRights != '')\n\t{\n\t\t$str = 'if(!('.$strRights.')) { $rights = false; }';\n\t\tdol_eval($str); // The dol_eval must contains all the global $xxx used into a condition\n\t}\n\treturn $rights;\n}\n\n/**\n * Replace eval function to add more security.\n * This function is called by verifCond() or trans() and transnoentitiesnoconv().\n *\n * @param \tstring\t$s\t\t\t\tString to evaluate\n * @param\tint\t\t$returnvalue\t0=No return (used to execute eval($a=something)). 1=Value of eval is returned (used to eval($something)).\n * @param   int     $hideerrors     1=Hide errors\n * @return\tmixed\t\t\t\t\tNothing or return of eval\n */\nfunction dol_eval($s, $returnvalue = 0, $hideerrors = 1)\n{\n\t// Only global variables can be changed by eval function and returned to caller\n\tglobal $db, $langs, $user, $conf, $website, $websitepage;\n\tglobal $action, $mainmenu, $leftmenu;\n\tglobal $rights;\n\tglobal $object;\n\tglobal $mysoc;\n\n\tglobal $obj; // To get $obj used into list when dol_eval is used for computed fields and $obj is not yet $object\n\tglobal $soc; // For backward compatibility\n\n\t//print $s.\"<br>\\n\";\n\tif ($returnvalue)\n\t{\n\t\tif ($hideerrors) return @eval('return '.$s.';');\n\t\telse return eval('return '.$s.';');\n\t}\n\telse\n\t{\n\t\tif ($hideerrors) @eval($s);\n\t\telse eval($s);\n\t}\n}\n\n/**\n * Return if var element is ok\n *\n * @param   string      $element    Variable to check\n * @return  boolean                 Return true of variable is not empty\n */\nfunction dol_validElement($element)\n{\n\treturn (trim($element) != '');\n}\n\n/**\n * \tReturn img flag of country for a language code or country code\n *\n * \t@param\tstring\t$codelang\tLanguage code (en_IN, fr_CA...) or Country code (IN, FR)\n *  @param\tstring\t$moreatt\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n * \t@return\tstring\t\t\t\tHTML img string with flag.\n */\nfunction picto_from_langcode($codelang, $moreatt = '')\n{\n\tglobal $langs;\n\n\tif (empty($codelang)) return '';\n\n\tif ($codelang == 'auto')\n\t{\n\t\treturn '<span class=\"fa fa-globe\"></span>';\n\t}\n\n\t$langtocountryflag = array(\n\t\t'ar_AR' => '',\n\t\t'ca_ES' => 'catalonia',\n\t\t'da_DA' => 'dk',\n\t\t'fr_CA' => 'mq',\n\t\t'sv_SV' => 'se'\n\t);\n\n\tif (isset($langtocountryflag[$codelang])) $flagImage = $langtocountryflag[$codelang];\n\telse\n\t{\n\t\t$tmparray = explode('_', $codelang);\n\t\t$flagImage = empty($tmparray[1]) ? $tmparray[0] : $tmparray[1];\n\t}\n\n\treturn img_picto_common($codelang, 'flags/'.strtolower($flagImage).'.png', $moreatt);\n}\n\n/**\n * Return default language from country code.\n * Return null if not found.\n *\n * @param \tstring \t$countrycode\tCountry code like 'US', 'FR', 'CA', ...\n * @return\tstring\t\t\t\t\tValue of locale like 'en_US', 'fr_FR', ...\n */\nfunction getLanguageCodeFromCountryCode($countrycode)\n{\n\tglobal $mysoc;\n\n\tif (empty($countrycode)) return null;\n\n\tif (strtoupper($countrycode) == 'MQ') return 'fr_CA';\n\tif (strtoupper($countrycode) == 'SE') return 'sv_SE'; // se_SE is Sami/Sweden, and we want in priority sv_SE for SE country\n\tif (strtoupper($countrycode) == 'CH')\n\t{\n\t\tif ($mysoc->country_code == 'FR') return 'fr_CH';\n\t\tif ($mysoc->country_code == 'DE') return 'de_CH';\n\t}\n\n\t// Locale list taken from:\n\t// http://stackoverflow.com/questions/3191664/\n\t// list-of-all-locales-and-their-short-codes\n\t$locales = array(\n\t\t'af-ZA',\n\t\t'am-ET',\n\t\t'ar-AE',\n\t\t'ar-BH',\n\t\t'ar-DZ',\n\t\t'ar-EG',\n\t\t'ar-IQ',\n\t\t'ar-JO',\n\t\t'ar-KW',\n\t\t'ar-LB',\n\t\t'ar-LY',\n\t\t'ar-MA',\n\t\t'ar-OM',\n\t\t'ar-QA',\n\t\t'ar-SA',\n\t\t'ar-SY',\n\t\t'ar-TN',\n\t\t'ar-YE',\n\t\t'as-IN',\n\t\t'ba-RU',\n\t\t'be-BY',\n\t\t'bg-BG',\n\t\t'bn-BD',\n\t\t'bn-IN',\n\t\t'bo-CN',\n\t\t'br-FR',\n\t\t'ca-ES',\n\t\t'co-FR',\n\t\t'cs-CZ',\n\t\t'cy-GB',\n\t\t'da-DK',\n\t\t'de-AT',\n\t\t'de-CH',\n\t\t'de-DE',\n\t\t'de-LI',\n\t\t'de-LU',\n\t\t'dv-MV',\n\t\t'el-GR',\n\t\t'en-AU',\n\t\t'en-BZ',\n\t\t'en-CA',\n\t\t'en-GB',\n\t\t'en-IE',\n\t\t'en-IN',\n\t\t'en-JM',\n\t\t'en-MY',\n\t\t'en-NZ',\n\t\t'en-PH',\n\t\t'en-SG',\n\t\t'en-TT',\n\t\t'en-US',\n\t\t'en-ZA',\n\t\t'en-ZW',\n\t\t'es-AR',\n\t\t'es-BO',\n\t\t'es-CL',\n\t\t'es-CO',\n\t\t'es-CR',\n\t\t'es-DO',\n\t\t'es-EC',\n\t\t'es-ES',\n\t\t'es-GT',\n\t\t'es-HN',\n\t\t'es-MX',\n\t\t'es-NI',\n\t\t'es-PA',\n\t\t'es-PE',\n\t\t'es-PR',\n\t\t'es-PY',\n\t\t'es-SV',\n\t\t'es-US',\n\t\t'es-UY',\n\t\t'es-VE',\n\t\t'et-EE',\n\t\t'eu-ES',\n\t\t'fa-IR',\n\t\t'fi-FI',\n\t\t'fo-FO',\n\t\t'fr-BE',\n\t\t'fr-CA',\n\t\t'fr-CH',\n\t\t'fr-FR',\n\t\t'fr-LU',\n\t\t'fr-MC',\n\t\t'fy-NL',\n\t\t'ga-IE',\n\t\t'gd-GB',\n\t\t'gl-ES',\n\t\t'gu-IN',\n\t\t'he-IL',\n\t\t'hi-IN',\n\t\t'hr-BA',\n\t\t'hr-HR',\n\t\t'hu-HU',\n\t\t'hy-AM',\n\t\t'id-ID',\n\t\t'ig-NG',\n\t\t'ii-CN',\n\t\t'is-IS',\n\t\t'it-CH',\n\t\t'it-IT',\n\t\t'ja-JP',\n\t\t'ka-GE',\n\t\t'kk-KZ',\n\t\t'kl-GL',\n\t\t'km-KH',\n\t\t'kn-IN',\n\t\t'ko-KR',\n\t\t'ky-KG',\n\t\t'lb-LU',\n\t\t'lo-LA',\n\t\t'lt-LT',\n\t\t'lv-LV',\n\t\t'mi-NZ',\n\t\t'mk-MK',\n\t\t'ml-IN',\n\t\t'mn-MN',\n\t\t'mr-IN',\n\t\t'ms-BN',\n\t\t'ms-MY',\n\t\t'mt-MT',\n\t\t'nb-NO',\n\t\t'ne-NP',\n\t\t'nl-BE',\n\t\t'nl-NL',\n\t\t'nn-NO',\n\t\t'oc-FR',\n\t\t'or-IN',\n\t\t'pa-IN',\n\t\t'pl-PL',\n\t\t'ps-AF',\n\t\t'pt-BR',\n\t\t'pt-PT',\n\t\t'rm-CH',\n\t\t'ro-RO',\n\t\t'ru-RU',\n\t\t'rw-RW',\n\t\t'sa-IN',\n\t\t'se-FI',\n\t\t'se-NO',\n\t\t'se-SE',\n\t\t'si-LK',\n\t\t'sk-SK',\n\t\t'sl-SI',\n\t\t'sq-AL',\n\t\t'sv-FI',\n\t\t'sv-SE',\n\t\t'sw-KE',\n\t\t'ta-IN',\n\t\t'te-IN',\n\t\t'th-TH',\n\t\t'tk-TM',\n\t\t'tn-ZA',\n\t\t'tr-TR',\n\t\t'tt-RU',\n\t\t'ug-CN',\n\t\t'uk-UA',\n\t\t'ur-PK',\n\t\t'vi-VN',\n\t\t'wo-SN',\n\t\t'xh-ZA',\n\t\t'yo-NG',\n\t\t'zh-CN',\n\t\t'zh-HK',\n\t\t'zh-MO',\n\t\t'zh-SG',\n\t\t'zh-TW',\n\t\t'zu-ZA',\n\t);\n\n\t$buildprimarykeytotest = strtolower($countrycode).'-'.strtoupper($countrycode);\n\tif (in_array($buildprimarykeytotest, $locales)) return strtolower($countrycode).'_'.strtoupper($countrycode);\n\n\tif (function_exists('locale_get_primary_language') && function_exists('locale_get_region'))    // Need extension php-intl\n\t{\n\t    foreach ($locales as $locale)\n    \t{\n    \t\t$locale_language = locale_get_primary_language($locale);\n    \t\t$locale_region = locale_get_region($locale);\n    \t\tif (strtoupper($countrycode) == $locale_region)\n    \t\t{\n    \t\t\t//var_dump($locale.'-'.$locale_language.'-'.$locale_region);\n    \t\t\treturn strtolower($locale_language).'_'.strtoupper($locale_region);\n    \t\t}\n    \t}\n\t}\n\telse\n\t{\n        dol_syslog(\"Warning Exention php-intl is not available\", LOG_WARNING);\n\t}\n\n\treturn null;\n}\n\n/**\n *  Complete or removed entries into a head array (used to build tabs).\n *  For example, with value added by external modules. Such values are declared into $conf->modules_parts['tab'].\n *  Or by change using hook completeTabsHead\n *\n *  @param\tConf\t\t\t$conf           Object conf\n *  @param  Translate\t\t$langs          Object langs\n *  @param  object|null\t\t$object         Object object\n *  @param  array\t\t\t$head          \tObject head\n *  @param  int\t\t\t\t$h\t\t\t\tNew position to fill\n *  @param  string\t\t\t$type           Value for object where objectvalue can be\n *                              \t\t\t'thirdparty'       to add a tab in third party view\n *\t\t                        \t      \t'intervention'     to add a tab in intervention view\n *     \t\t                    \t     \t'supplier_order'   to add a tab in supplier order view\n *          \t\t            \t        'supplier_invoice' to add a tab in supplier invoice view\n *                  \t\t    \t        'invoice'          to add a tab in customer invoice view\n *                          \t\t\t    'order'            to add a tab in customer order view\n *                          \t\t\t\t'contract'\t\t   to add a tabl in contract view\n *                      \t\t\t        'product'          to add a tab in product view\n *                              \t\t\t'propal'           to add a tab in propal view\n *                              \t\t\t'user'             to add a tab in user view\n *                              \t\t\t'group'            to add a tab in group view\n * \t\t        \t               \t     \t'member'           to add a tab in fundation member view\n *      \t\t                        \t'categories_x'\t   to add a tab in category view ('x': type of category (0=product, 1=supplier, 2=customer, 3=member)\n *      \t\t\t\t\t\t\t\t\t'ecm'\t\t\t   to add a tab for another ecm view\n *                                          'stock'            to add a tab for warehouse view\n *  @param  string\t\t$mode  \t        \t'add' to complete head, 'remove' to remove entries\n *\t@return\tvoid\n */\nfunction complete_head_from_modules($conf, $langs, $object, &$head, &$h, $type, $mode = 'add')\n{\n\tglobal $hookmanager;\n\n\tif (isset($conf->modules_parts['tabs'][$type]) && is_array($conf->modules_parts['tabs'][$type]))\n\t{\n\t\tforeach ($conf->modules_parts['tabs'][$type] as $value)\n\t\t{\n\t\t\t$values = explode(':', $value);\n\n\t\t\tif ($mode == 'add' && !preg_match('/^\\-/', $values[1]))\n\t\t\t{\n\t\t\t\tif (count($values) == 6)       // new declaration with permissions:  $value='objecttype:+tabname1:Title1:langfile@mymodule:$user->rights->mymodule->read:/mymodule/mynewtab1.php?id=__ID__'\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\n\t\t\t\t\tif (verifCond($values[4]))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\t\tif (preg_match('/SUBSTITUTION_([^_]+)/i', $values[2], $reg))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$substitutionarray = array();\n\t\t\t\t\t\t\tcomplete_substitutions_array($substitutionarray, $langs, $object, array('needforkey'=>$values[2]));\n\t\t\t\t\t\t\t$label = make_substitutions($reg[1], $substitutionarray);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse $label = $langs->trans($values[2]);\n\n\t\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', ((is_object($object) && !empty($object->id)) ? $object->id : ''), $values[5]), 1);\n\t\t\t\t\t\t$head[$h][1] = $label;\n\t\t\t\t\t\t$head[$h][2] = str_replace('+', '', $values[1]);\n\t\t\t\t\t\t$h++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (count($values) == 5)       // deprecated\n\t\t\t\t{\n\t\t\t\t\tdol_syslog('Passing 5 values in tabs module_parts is deprecated. Please update to 6 with permissions.', LOG_WARNING);\n\n\t\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\tif (preg_match('/SUBSTITUTION_([^_]+)/i', $values[2], $reg))\n\t\t\t\t\t{\n\t\t\t\t\t\t$substitutionarray = array();\n\t\t\t\t\t\tcomplete_substitutions_array($substitutionarray, $langs, $object, array('needforkey'=>$values[2]));\n\t\t\t\t\t\t$label = make_substitutions($reg[1], $substitutionarray);\n\t\t\t\t\t}\n\t\t\t\t\telse $label = $langs->trans($values[2]);\n\n\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', ((is_object($object) && !empty($object->id)) ? $object->id : ''), $values[4]), 1);\n\t\t\t\t\t$head[$h][1] = $label;\n\t\t\t\t\t$head[$h][2] = str_replace('+', '', $values[1]);\n\t\t\t\t\t$h++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($mode == 'remove' && preg_match('/^\\-/', $values[1]))\n\t\t\t{\n\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t$tabname = str_replace('-', '', $values[1]);\n\t\t\t\tforeach ($head as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$condition = (!empty($values[3]) ? verifCond($values[3]) : 1);\n\t\t\t\t\t//var_dump($key.' - '.$tabname.' - '.$head[$key][2].' - '.$values[3].' - '.$condition);\n\t\t\t\t\tif ($head[$key][2] == $tabname && $condition)\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($head[$key]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// No need to make a return $head. Var is modified as a reference\n\tif (!empty($hookmanager))\n\t{\n\t\t$parameters = array('object' => $object, 'mode' => $mode, 'head' => $head);\n\t\t$reshook = $hookmanager->executeHooks('completeTabsHead', $parameters);\n\t\tif ($reshook > 0)\n\t\t{\n\t\t\t$head = $hookmanager->resArray;\n            $h = count($head);\n\t\t}\n\t}\n}\n\n/**\n * Print common footer :\n * \t\tconf->global->MAIN_HTML_FOOTER\n *      js for switch of menu hider\n * \t\tjs for conf->global->MAIN_GOOGLE_AN_ID\n * \t\tjs for conf->global->MAIN_SHOW_TUNING_INFO or $_SERVER[\"MAIN_SHOW_TUNING_INFO\"]\n * \t\tjs for conf->logbuffer\n *\n * @param\tstring\t$zone\t'private' (for private pages) or 'public' (for public pages)\n * @return\tvoid\n */\nfunction printCommonFooter($zone = 'private')\n{\n\tglobal $conf, $hookmanager, $user, $debugbar;\n\tglobal $action;\n\tglobal $micro_start_time;\n\n\tif ($zone == 'private') print \"\\n\".'<!-- Common footer for private page -->'.\"\\n\";\n\telse print \"\\n\".'<!-- Common footer for public page -->'.\"\\n\";\n\n\t// A div to store page_y POST parameter so we can read it using javascript\n\tprint \"\\n<!-- A div to store page_y POST parameter -->\\n\";\n\tprint '<div id=\"page_y\" style=\"display: none;\">'.$_POST['page_y'].'</div>'.\"\\n\";\n\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('printCommonFooter', $parameters); // Note that $action and $object may have been modified by some hooks\n\tif (empty($reshook))\n\t{\n\t\tif (!empty($conf->global->MAIN_HTML_FOOTER)) print $conf->global->MAIN_HTML_FOOTER.\"\\n\";\n\n\t\tprint \"\\n\";\n\t\tif (!empty($conf->use_javascript_ajax))\n\t\t{\n\t\t\tprint '<script>'.\"\\n\";\n\t\t\tprint 'jQuery(document).ready(function() {'.\"\\n\";\n\n\t\t\tif ($zone == 'private' && empty($conf->dol_use_jmobile))\n\t\t\t{\n\t\t\t\tprint \"\\n\";\n\t\t\t\tprint '/* JS CODE TO ENABLE to manage handler to switch left menu page (menuhider) */'.\"\\n\";\n\t\t\t\tprint 'jQuery(\"li.menuhider\").click(function(event) {';\n\t\t\t\tprint '  if (!$( \"body\" ).hasClass( \"sidebar-collapse\" )){ event.preventDefault(); }'.\"\\n\";\n\t\t\t\tprint '  console.log(\"We click on .menuhider\");'.\"\\n\";\n\t\t\t\tprint '  $(\"body\").toggleClass(\"sidebar-collapse\")'.\"\\n\";\n\t\t\t\tprint '});'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Management of focus and mandatory for fields\n\t\t\tif ($action == 'create' || $action == 'edit' || (empty($action) && (preg_match('/new\\.php/', $_SERVER[\"PHP_SELF\"]))))\n\t\t\t{\n\t\t\t\tprint '/* JS CODE TO ENABLE to manage focus and mandatory form fields */'.\"\\n\";\n\t\t\t\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t\t\t\t// Clean $relativepathstring\n\t\t\t\tif (constant('DOL_URL_ROOT')) $relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\t\t\t//$tmpqueryarraywehave = explode('&', dol_string_nohtmltag($_SERVER['QUERY_STRING']));\n\t\t\t\tif (!empty($user->default_values[$relativepathstring]['focus']))\n\t\t\t\t{\n\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['focus'] as $defkey => $defval)\n\t\t\t\t\t{\n\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$tmpquerytohaveparam = explode('=', $tmpquerytohave);\n\t\t\t\t\t\t\t\t//print \"console.log('\".$tmpquerytohaveparam[0].\" \".$tmpquerytohaveparam[1].\" \".GETPOST($tmpquerytohaveparam[0]).\"');\";\n\t\t\t\t\t\t\t\tif (!GETPOSTISSET($tmpquerytohaveparam[0]) || ($tmpquerytohaveparam[1] != GETPOST($tmpquerytohaveparam[0]))) $foundintru = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($defval as $paramkey => $paramval)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Set focus on field\n\t\t\t\t\t\t\t\tprint 'jQuery(\"input[name=\\''.$paramkey.'\\']\").focus();'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"textarea[name=\\''.$paramkey.'\\']\").focus();'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"select[name=\\''.$paramkey.'\\']\").focus();'.\"\\n\"; // Not really usefull, but we keep it in case of.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!empty($user->default_values[$relativepathstring]['mandatory']))\n\t\t\t\t{\n\t\t\t\t\tforeach ($user->default_values[$relativepathstring]['mandatory'] as $defkey => $defval)\n\t\t\t\t\t{\n\t\t\t\t\t\t$qualified = 0;\n\t\t\t\t\t\tif ($defkey != '_noquery_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpqueryarraytohave = explode('&', $defkey);\n\t\t\t\t\t\t\t$foundintru = 0;\n\t\t\t\t\t\t\tforeach ($tmpqueryarraytohave as $tmpquerytohave)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$tmpquerytohaveparam = explode('=', $tmpquerytohave);\n\t\t\t\t\t\t\t\t//print \"console.log('\".$tmpquerytohaveparam[0].\" \".$tmpquerytohaveparam[1].\" \".GETPOST($tmpquerytohaveparam[0]).\"');\";\n\t\t\t\t\t\t\t\tif (!GETPOSTISSET($tmpquerytohaveparam[0]) || ($tmpquerytohaveparam[1] != GETPOST($tmpquerytohaveparam[0]))) $foundintru = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!$foundintru) $qualified = 1;\n\t\t\t\t\t\t\t//var_dump($defkey.'-'.$qualified);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse $qualified = 1;\n\n\t\t\t\t\t\tif ($qualified)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($defval as $paramkey => $paramval)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Add property 'required' on input\n\t\t\t\t\t\t\t\tprint 'jQuery(\"input[name=\\''.$paramkey.'\\']\").prop(\\'required\\',true);'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"textarea[name=\\''.$paramkey.'\\']\").prop(\\'required\\',true);'.\"\\n\";\n\t\t\t\t\t\t\t\tprint 'jQuery(\"select[name=\\''.$paramkey.'\\']\").prop(\\'required\\',true);'.\"\\n\"; // required on a select works only if key is \"\", this does not happen in Dolibarr\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint '});'.\"\\n\";\n\n\t\t\t// End of tuning\n\t\t\tif (!empty($_SERVER['MAIN_SHOW_TUNING_INFO']) || !empty($conf->global->MAIN_SHOW_TUNING_INFO))\n\t\t\t{\n\t\t\t\tprint \"\\n\";\n\t\t\t\tprint \"/* JS CODE TO ENABLE to add memory info */\\n\";\n\t\t\t\tprint 'window.console && console.log(\"';\n\t\t\t\tif (!empty($conf->global->MEMCACHED_SERVER)) print 'MEMCACHED_SERVER='.$conf->global->MEMCACHED_SERVER.' - ';\n\t\t\t\tprint 'MAIN_OPTIMIZE_SPEED='.(isset($conf->global->MAIN_OPTIMIZE_SPEED) ? $conf->global->MAIN_OPTIMIZE_SPEED : 'off');\n\t\t\t\tif (!empty($micro_start_time))   // Works only if MAIN_SHOW_TUNING_INFO is defined at $_SERVER level. Not in global variable.\n\t\t\t\t{\n\t\t\t\t\t$micro_end_time = microtime(true);\n\t\t\t\t\tprint ' - Build time: '.ceil(1000 * ($micro_end_time - $micro_start_time)).' ms';\n\t\t\t\t}\n\n\t\t\t\tif (function_exists(\"memory_get_usage\")) {\n\t\t\t\t\tprint ' - Mem: '.memory_get_usage(); // Do not use true here, it seems it takes the peak amount\n\t\t\t\t}\n\t\t\t\tif (function_exists(\"memory_get_peak_usage\")) {\n\t\t\t\t\tprint ' - Real mem peak: '.memory_get_peak_usage(true);\n\t\t\t\t}\n\t\t\t\tif (function_exists(\"zend_loader_file_encoded\"))\n\t\t\t\t{\n\t\t\t\t\tprint ' - Zend encoded file: '.(zend_loader_file_encoded() ? 'yes' : 'no');\n\t\t\t\t}\n\t\t\t\tprint '\");'.\"\\n\";\n\t\t\t}\n\n\t\t\tprint \"\\n\".'</script>'.\"\\n\";\n\n\t\t\t// Google Analytics\n\t\t\t// TODO Add a hook here\n\t\t\tif (!empty($conf->google->enabled) && !empty($conf->global->MAIN_GOOGLE_AN_ID))\n\t\t\t{\n\t\t\t\t$tmptagarray = explode(',', $conf->global->MAIN_GOOGLE_AN_ID);\n\t\t\t\tforeach($tmptagarray as $tmptag) {\n\t\t\t\t\tprint \"\\n\";\n\t\t\t\t\tprint \"<!-- JS CODE TO ENABLE for google analtics tag -->\\n\";\n\t\t\t\t\tprint \"\n\t\t\t\t\t<!-- Global site tag (gtag.js) - Google Analytics -->\n\t\t\t\t\t<script async src=\\\"https://www.googletagmanager.com/gtag/js?id=\".trim($tmptag).\"\\\"></script>\n\t\t\t\t\t<script>\n\t\t\t\t\twindow.dataLayer = window.dataLayer || [];\n\t\t\t\t\tfunction gtag(){dataLayer.push(arguments);}\n\t\t\t\t\tgtag('js', new Date());\n\n\t\t\t\t\tgtag('config', '\".trim($tmptag).\"');\n\t\t\t\t\t</script>\";\n\t\t\t\t\tprint \"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add Xdebug coverage of code\n\t\tif (defined('XDEBUGCOVERAGE'))\n\t\t{\n\t\t    print_r(xdebug_get_code_coverage());\n\t\t}\n\n\t\t// Add DebugBar data\n\t    if (!empty($user->rights->debugbar->read) && is_object($debugbar))\n\t    {\n\t        $debugbar['time']->stopMeasure('pageaftermaster');\n\t        print '<!-- Output debugbar data -->'.\"\\n\";\n\t\t    print $debugbar->getRenderer()->render();\n\t\t}\n\t\telseif (count($conf->logbuffer))    // If there is some logs in buffer to show\n\t\t{\n\t\t\tprint \"\\n\";\n\t\t\tprint \"<!-- Start of log output\\n\";\n\t\t\t//print '<div class=\"hidden\">'.\"\\n\";\n\t\t\tforeach ($conf->logbuffer as $logline)\n\t\t\t{\n\t\t\t\tprint $logline.\"<br>\\n\";\n\t\t\t}\n\t\t\t//print '</div>'.\"\\n\";\n\t\t\tprint \"End of log output -->\\n\";\n\t\t}\n\t}\n}\n\n/**\n * Split a string with 2 keys into key array.\n * For example: \"A=1;B=2;C=2\" is exploded into array('A'=>1,'B'=>2,'C'=>3)\n *\n * @param \tstring\t$string\t\tString to explode\n * @param \tstring\t$delimiter\tDelimiter between each couple of data\n * @param \tstring\t$kv\t\t\tDelimiter between key and value\n * @return\tarray\t\t\t\tArray of data exploded\n */\nfunction dolExplodeIntoArray($string, $delimiter = ';', $kv = '=')\n{\n\tif ($a = explode($delimiter, $string))\n\t{\n\t\t$ka = array();\n\t\tforeach ($a as $s) { // each part\n\t\t\tif ($s) {\n\t\t\t\tif ($pos = strpos($s, $kv)) { // key/value delimiter\n\t\t\t\t\t$ka[trim(substr($s, 0, $pos))] = trim(substr($s, $pos + strlen($kv)));\n\t\t\t\t} else { // key delimiter not found\n\t\t\t\t\t$ka[] = trim($s);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $ka;\n\t}\n\treturn array();\n}\n\n\n/**\n * Set focus onto field with selector (similar behaviour of 'autofocus' HTML5 tag)\n *\n * @param \tstring\t$selector\tSelector ('#id' or 'input[name=\"ref\"]') to use to find the HTML input field that must get the autofocus. You must use a CSS selector, so unique id preceding with the '#' char.\n * @return\tstring\t\t\t\tHTML code to set focus\n */\nfunction dol_set_focus($selector)\n{\n\tprint \"\\n\".'<!-- Set focus onto a specific field -->'.\"\\n\";\n\tprint '<script>jQuery(document).ready(function() { jQuery(\"'.dol_escape_js($selector).'\").focus(); });</script>'.\"\\n\";\n}\n\n\n/**\n * Return getmypid() or random PID when function is disabled\n * Some web hosts disable this php function for security reasons\n * and sometimes we can't redeclare function\n *\n * @return\tint\n */\nfunction dol_getmypid()\n{\n\tif (!function_exists('getmypid')) {\n\t\treturn mt_rand(1, 32768);\n\t} else {\n\t\treturn getmypid();\n\t}\n}\n\n\n/**\n * Generate natural SQL search string for a criteria (this criteria can be tested on one or several fields)\n *\n * @param   string|string[]\t$fields \tString or array of strings, filled with the name of all fields in the SQL query we must check (combined with a OR). Example: array(\"p.field1\",\"p.field2\")\n * @param   string \t\t\t$value \t\tThe value to look for.\n *                          \t\t    If param $mode is 0, can contains several keywords separated with a space or |\n *                                      like \"keyword1 keyword2\" = We want record field like keyword1 AND field like keyword2\n *                                      or like \"keyword1|keyword2\" = We want record field like keyword1 OR field like keyword2\n *                             \t\t\tIf param $mode is 1, can contains an operator <, > or = like \"<10\" or \">=100.5 < 1000\"\n *                             \t\t\tIf param $mode is 2, can contains a list of int id separated by comma like \"1,3,4\"\n *                             \t\t\tIf param $mode is 3, can contains a list of string separated by comma like \"a,b,c\"\n * @param\tinteger\t\t\t$mode\t\t0=value is list of keyword strings, 1=value is a numeric test (Example \">5.5 <10\"), 2=value is a list of ID separated with comma (Example '1,3,4')\n * \t\t\t\t\t\t\t\t\t\t3=value is list of string separated with comma (Example 'text 1,text 2'), 4=value is a list of ID separated with comma (Example '1,3,4') for search into a multiselect string ('1,2')\n * @param\tinteger\t\t\t$nofirstand\t1=Do not output the first 'AND'\n * @return \tstring \t\t\t$res \t\tThe statement to append to the SQL query\n */\nfunction natural_search($fields, $value, $mode = 0, $nofirstand = 0)\n{\n\tglobal $db, $langs;\n\n\t$value = trim($value);\n\n\tif ($mode == 0)\n\t{\n\t\t$value = preg_replace('/\\*/', '%', $value); // Replace * with %\n\t}\n\tif ($mode == 1)\n\t{\n\t\t$value = preg_replace('/([<>=]+)\\s+([0-9'.preg_quote($langs->trans(\"DecimalSeparator\"), '/').'\\-])/', '\\1\\2', $value); // Clean string '< 10' into '<10' so we can the explode on space to get all tests to do\n\t}\n\n\t$value = preg_replace('/\\s*\\|\\s*/', '|', $value);\n\n\t$crits = explode(' ', $value);\n\t$res = '';\n\tif (!is_array($fields)) $fields = array($fields);\n\n\t$nboffields = count($fields);\n\t$end2 = count($crits);\n\t$j = 0;\n\tforeach ($crits as $crit)\n\t{\n\t\t$i = 0; $i2 = 0;\n\t\t$newres = '';\n\t\tforeach ($fields as $field)\n\t\t{\n\t\t\tif ($mode == 1)\n\t\t\t{\n\t\t\t\t$operator = '=';\n\t\t\t\t$newcrit = preg_replace('/([<>=]+)/', '', trim($crit));\n\n\t\t\t\t$reg = array();\n\t\t\t\tpreg_match('/([<>=]+)/', trim($crit), $reg);\n\t\t\t\tif ($reg[1])\n\t\t\t\t{\n\t\t\t\t\t$operator = $reg[1];\n\t\t\t\t}\n\t\t\t\tif ($newcrit != '')\n\t\t\t\t{\n\t\t\t\t\t$numnewcrit = price2num($newcrit);\n\t\t\t\t\tif (is_numeric($numnewcrit))\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').$field.' '.$operator.' '.$numnewcrit;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').'1 = 2'; // force false\n\t\t\t\t\t}\n\t\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($mode == 2 || $mode == -2)\n\t\t\t{\n\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').$field.\" \".($mode == -2 ? 'NOT ' : '').\"IN (\".$db->escape(trim($crit)).\")\";\n\t\t\t\tif ($mode == -2) $newres .= ' OR '.$field.' IS NULL';\n\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t}\n\t\t\telseif ($mode == 3 || $mode == -3)\n\t\t\t{\n\t\t\t\t$tmparray = explode(',', trim($crit));\n\t\t\t\tif (count($tmparray))\n\t\t\t\t{\n\t\t\t\t\t$listofcodes = '';\n\t\t\t\t\tforeach ($tmparray as $val)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($val)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$listofcodes .= ($listofcodes ? ',' : '');\n\t\t\t\t\t\t\t$listofcodes .= \"'\".$db->escape(trim($val)).\"'\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$newres .= ($i2 > 0 ? ' OR ' : '').$field.\" \".($mode == -3 ? 'NOT ' : '').\"IN (\".$listofcodes.\")\";\n\t\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t\t}\n\t\t\t\tif ($mode == -3) $newres .= ' OR '.$field.' IS NULL';\n\t\t\t}\n\t\t\telseif ($mode == 4)\n\t\t\t{\n\t\t\t    $tmparray = explode(',', trim($crit));\n\t\t\t    if (count($tmparray))\n\t\t\t    {\n\t\t\t        $listofcodes = '';\n\t\t\t        foreach ($tmparray as $val)\n\t\t\t        {\n\t\t\t            if ($val)\n\t\t\t            {\n\t\t\t                $newres .= ($i2 > 0 ? ' OR (' : '(').$field.' LIKE \\''.$db->escape(trim($val)).',%\\'';\n\t\t\t                $newres .= ' OR '.$field.' = \\''.$db->escape(trim($val)).'\\'';\n\t\t\t                $newres .= ' OR '.$field.' LIKE \\'%,'.$db->escape(trim($val)).'\\'';\n\t\t\t                $newres .= ' OR '.$field.' LIKE \\'%,'.$db->escape(trim($val)).',%\\'';\n\t\t\t                $newres .= ')';\n\t\t\t                $i2++;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\telse    // $mode=0\n\t\t\t{\n\t\t\t\t$tmpcrits = explode('|', $crit);\n\t\t\t\t$i3 = 0;\n\t\t\t\tforeach ($tmpcrits as $tmpcrit)\n\t\t\t\t{\n                    if ($tmpcrit !== '0' && empty($tmpcrit)) continue;\n\n\t\t\t\t\t$newres .= (($i2 > 0 || $i3 > 0) ? ' OR ' : '');\n\n\t\t\t\t\tif (preg_match('/\\.(id|rowid)$/', $field))\t// Special case for rowid that is sometimes a ref so used as a search field\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= $field.\" = \".(is_numeric(trim($tmpcrit)) ?trim($tmpcrit) : '0');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$newres .= $field.\" LIKE '\";\n\n\t\t\t\t\t\t$tmpcrit = trim($tmpcrit);\n\t\t\t\t\t\t$tmpcrit2 = $tmpcrit;\n\t\t\t\t\t\t$tmpbefore = '%'; $tmpafter = '%';\n\t\t\t\t\t\tif (preg_match('/^[\\^\\$]/', $tmpcrit))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpbefore = '';\n\t\t\t\t\t\t\t$tmpcrit2 = preg_replace('/^[\\^\\$]/', '', $tmpcrit2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (preg_match('/[\\^\\$]$/', $tmpcrit))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tmpafter = '';\n\t\t\t\t\t\t\t$tmpcrit2 = preg_replace('/[\\^\\$]$/', '', $tmpcrit2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$newres .= $tmpbefore;\n\t\t\t\t\t\t$newres .= $db->escape($tmpcrit2);\n\t\t\t\t\t\t$newres .= $tmpafter;\n\t\t\t\t\t\t$newres .= \"'\";\n\t\t\t\t\t\tif ($tmpcrit2 == '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$newres .= ' OR '.$field.\" IS NULL\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$i3++;\n\t\t\t\t}\n\t\t\t\t$i2++; // a criteria was added to string\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\tif ($newres) $res = $res.($res ? ' AND ' : '').($i2 > 1 ? '(' : '').$newres.($i2 > 1 ? ')' : '');\n\t\t$j++;\n\t}\n\t$res = ($nofirstand ? \"\" : \" AND \").\"(\".$res.\")\";\n\t//print 'xx'.$res.'yy';\n\treturn $res;\n}\n\n/**\n * Return string with full Url. The file qualified is the one defined by relative path in $object->last_main_doc\n *\n * @param   Object\t$object\t\t\t\tObject\n * @return\tstring\t\t\t\t\t\tUrl string\n */\nfunction showDirectDownloadLink($object)\n{\n\tglobal $conf, $langs;\n\n\t$out = '';\n\t$url = $object->getLastMainDocLink($object->element);\n\n\tif ($url)\n\t{\n\t\t$out .= img_picto('', 'globe').' '.$langs->trans(\"DirectDownloadLink\").'<br>';\n\t\t$out .= '<input type=\"text\" id=\"directdownloadlink\" class=\"quatrevingtpercent\" value=\"'.$url.'\">';\n\t\t$out .= ajax_autoselect(\"directdownloadlink\", 0);\n\t}\n\treturn $out;\n}\n\n/**\n * Return the filename of file to get the thumbs\n *\n * @param   string  $file           Original filename (full or relative path)\n * @param   string  $extName        Extension to differenciate thumb file name ('', '_small', '_mini')\n * @param   string  $extImgTarget   Force image extension for thumbs. Use '' to keep same extension than original image (default).\n * @return  string                  New file name (full or relative path, including the thumbs/)\n */\nfunction getImageFileNameForSize($file, $extName, $extImgTarget = '')\n{\n\t$dirName = dirname($file);\n\tif ($dirName == '.') $dirName = '';\n\n\t$fileName = preg_replace('/(\\.gif|\\.jpeg|\\.jpg|\\.png|\\.bmp|\\.webp)$/i', '', $file); // We remove extension, whatever is its case\n\t$fileName = basename($fileName);\n\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.jpg$/i', $file) ? '.jpg' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.jpeg$/i', $file) ? '.jpeg' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.gif$/i', $file) ? '.gif' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.png$/i', $file) ? '.png' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.bmp$/i', $file) ? '.bmp' : '');\n\tif (empty($extImgTarget)) $extImgTarget = (preg_match('/\\.webp$/i', $file) ? '.webp' : '');\n\n\tif (!$extImgTarget) return $file;\n\n\t$subdir = '';\n\tif ($extName) $subdir = 'thumbs/';\n\n\treturn ($dirName ? $dirName.'/' : '').$subdir.$fileName.$extName.$extImgTarget; // New filename for thumb\n}\n\n\n/**\n * Return URL we can use for advanced preview links\n *\n * @param   string    $modulepart     propal, facture, facture_fourn, ...\n * @param   string    $relativepath   Relative path of docs.\n * @param\tint\t\t  $alldata\t\t  Return array with all components (1 is recommended, then use a simple a href link with the class, target and mime attribute added. 'documentpreview' css class is handled by jquery code into main.inc.php)\n * @param\tstring\t  $param\t\t  More param on http links\n * @return  string|array              Output string with href link or array with all components of link\n */\nfunction getAdvancedPreviewUrl($modulepart, $relativepath, $alldata = 0, $param = '')\n{\n\tglobal $conf, $langs;\n\n\tif (empty($conf->use_javascript_ajax)) return '';\n\n\t$isAllowedForPreview = dolIsAllowedForPreview($relativepath);\n\n\tif ($alldata == 1)\n\t{\n\t\tif ($isAllowedForPreview) return array('target'=>'_blank', 'css'=>'documentpreview', 'url'=>DOL_URL_ROOT.'/document.php?modulepart='.$modulepart.'&attachment=0&file='.urlencode($relativepath).($param ? '&'.$param : ''), 'mime'=>dol_mimetype($relativepath));\n\t\telse return array();\n\t}\n\n\t// old behavior, return a string\n\tif ($isAllowedForPreview) return 'javascript:document_preview(\\''.dol_escape_js(DOL_URL_ROOT.'/document.php?modulepart='.$modulepart.'&attachment=0&file='.urlencode($relativepath).($param ? '&'.$param : '')).'\\', \\''.dol_mimetype($relativepath).'\\', \\''.dol_escape_js($langs->trans('Preview')).'\\')';\n\telse return '';\n}\n\n\n/**\n * Make content of an input box selected when we click into input field.\n *\n * @param string\t$htmlname\tId of html object ('#idvalue' or '.classvalue')\n * @param string\t$addlink\tAdd a 'link to' after\n * @return string\n */\nfunction ajax_autoselect($htmlname, $addlink = '')\n{\n\tglobal $langs;\n\t$out = '<script>\n               jQuery(document).ready(function () {\n\t\t\t\t    jQuery(\"'.((strpos($htmlname, '.') === 0 ? '' : '#').$htmlname).'\").click(function() { jQuery(this).select(); } );\n\t\t\t\t});\n\t\t    </script>';\n\tif ($addlink) $out .= ' <a href=\"'.$addlink.'\" target=\"_blank\">'.$langs->trans(\"Link\").'</a>';\n\treturn $out;\n}\n\n/**\n *\tReturn if a file is qualified for preview\n *\n *\t@param\tstring\t$file\t\tFilename we looking for information\n *\t@return int\t\t\t\t\t1 If allowed, 0 otherwise\n *  @see    dol_mimetype(), image_format_supported() from images.lib.php\n */\nfunction dolIsAllowedForPreview($file)\n{\n\tglobal $conf;\n\n\t// Check .noexe extension in filename\n\tif (preg_match('/\\.noexe$/i', $file)) return 0;\n\n\t// Check mime types\n\t$mime_preview = array('bmp', 'jpeg', 'png', 'gif', 'tiff', 'pdf', 'plain', 'css', 'webp');\n\tif (!empty($conf->global->MAIN_ALLOW_SVG_FILES_AS_IMAGES)) $mime_preview[] = 'svg+xml';\n\t//$mime_preview[]='vnd.oasis.opendocument.presentation';\n\t//$mime_preview[]='archive';\n\t$num_mime = array_search(dol_mimetype($file, '', 1), $mime_preview);\n\tif ($num_mime !== false) return 1;\n\n\t// By default, not allowed for preview\n\treturn 0;\n}\n\n/**\n *\tReturn mime type of a file\n *\n *\t@param\tstring\t$file\t\tFilename we looking for MIME type\n *  @param  string\t$default    Default mime type if extension not found in known list\n * \t@param\tint\t\t$mode    \t0=Return full mime, 1=otherwise short mime string, 2=image for mime type, 3=source language, 4=css of font fa\n *\t@return string \t\t    \tReturn a mime type family (text/xxx, application/xxx, image/xxx, audio, video, archive)\n *  @see    dolIsAllowedForPreview(), image_format_supported() from images.lib.php\n */\nfunction dol_mimetype($file, $default = 'application/octet-stream', $mode = 0)\n{\n\t$mime = $default;\n\t$imgmime = 'other.png';\n\t$famime = 'file-o';\n\t$srclang = '';\n\n\t$tmpfile = preg_replace('/\\.noexe$/', '', $file);\n\n\t// Plain text files\n\tif (preg_match('/\\.txt$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.rtx$/i', $tmpfile)) { $mime = 'text/richtext'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.csv$/i', $tmpfile)) { $mime = 'text/csv'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.tsv$/i', $tmpfile)) { $mime = 'text/tab-separated-values'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.(cf|conf|log)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.ini$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'ini'; $famime = 'file-text-o'; }\n    if (preg_match('/\\.md$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'md'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.css$/i', $tmpfile)) { $mime = 'text/css'; $imgmime = 'css.png'; $srclang = 'css'; $famime = 'file-text-o'; }\n\t// Certificate files\n\tif (preg_match('/\\.(crt|cer|key|pub)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $famime = 'file-text-o'; }\n\t// XML based (HTML/XML/XAML)\n\tif (preg_match('/\\.(html|htm|shtml)$/i', $tmpfile)) { $mime = 'text/html'; $imgmime = 'html.png'; $srclang = 'html'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.(xml|xhtml)$/i', $tmpfile)) { $mime = 'text/xml'; $imgmime = 'other.png'; $srclang = 'xml'; $famime = 'file-text-o'; }\n    if (preg_match('/\\.xaml$/i', $tmpfile)) { $mime = 'text/xml'; $imgmime = 'other.png'; $srclang = 'xaml'; $famime = 'file-text-o'; }\n\t// Languages\n\tif (preg_match('/\\.bas$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'bas'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(c)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'c'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(cpp)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'cpp'; $famime = 'file-code-o'; }\n    if (preg_match('/\\.cs$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'cs'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(h)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'h'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(java|jsp)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'java'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.php([0-9]{1})?$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'php.png'; $srclang = 'php'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.phtml$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'php.png'; $srclang = 'php'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.(pl|pm)$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'pl.png'; $srclang = 'perl'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.sql$/i', $tmpfile)) { $mime = 'text/plain'; $imgmime = 'text.png'; $srclang = 'sql'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.js$/i', $tmpfile)) { $mime = 'text/x-javascript'; $imgmime = 'jscript.png'; $srclang = 'js'; $famime = 'file-code-o'; }\n\t// Open office\n\tif (preg_match('/\\.odp$/i', $tmpfile)) { $mime = 'application/vnd.oasis.opendocument.presentation'; $imgmime = 'ooffice.png'; $famime = 'file-powerpoint-o'; }\n\tif (preg_match('/\\.ods$/i', $tmpfile)) { $mime = 'application/vnd.oasis.opendocument.spreadsheet'; $imgmime = 'ooffice.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.odt$/i', $tmpfile)) { $mime = 'application/vnd.oasis.opendocument.text'; $imgmime = 'ooffice.png'; $famime = 'file-word-o'; }\n\t// MS Office\n\tif (preg_match('/\\.mdb$/i', $tmpfile)) { $mime = 'application/msaccess'; $imgmime = 'mdb.png'; $famime = 'file-o'; }\n\tif (preg_match('/\\.doc(x|m)?$/i', $tmpfile)) { $mime = 'application/msword'; $imgmime = 'doc.png'; $famime = 'file-word-o'; }\n\tif (preg_match('/\\.dot(x|m)?$/i', $tmpfile)) { $mime = 'application/msword'; $imgmime = 'doc.png'; $famime = 'file-word-o'; }\n\tif (preg_match('/\\.xlt(x)?$/i', $tmpfile)) { $mime = 'application/vnd.ms-excel'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.xla(m)?$/i', $tmpfile)) { $mime = 'application/vnd.ms-excel'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.xls$/i', $tmpfile)) { $mime = 'application/vnd.ms-excel'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.xls(b|m|x)$/i', $tmpfile)) { $mime = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'; $imgmime = 'xls.png'; $famime = 'file-excel-o'; }\n\tif (preg_match('/\\.pps(m|x)?$/i', $tmpfile)) { $mime = 'application/vnd.ms-powerpoint'; $imgmime = 'ppt.png'; $famime = 'file-powerpoint-o'; }\n\tif (preg_match('/\\.ppt(m|x)?$/i', $tmpfile)) { $mime = 'application/x-mspowerpoint'; $imgmime = 'ppt.png'; $famime = 'file-powerpoint-o'; }\n\t// Other\n\tif (preg_match('/\\.pdf$/i', $tmpfile)) { $mime = 'application/pdf'; $imgmime = 'pdf.png'; $famime = 'file-pdf-o'; }\n\t// Scripts\n\tif (preg_match('/\\.bat$/i', $tmpfile)) { $mime = 'text/x-bat'; $imgmime = 'script.png'; $srclang = 'dos'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.sh$/i', $tmpfile)) { $mime = 'text/x-sh'; $imgmime = 'script.png'; $srclang = 'bash'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.ksh$/i', $tmpfile)) { $mime = 'text/x-ksh'; $imgmime = 'script.png'; $srclang = 'bash'; $famime = 'file-code-o'; }\n\tif (preg_match('/\\.bash$/i', $tmpfile)) { $mime = 'text/x-bash'; $imgmime = 'script.png'; $srclang = 'bash'; $famime = 'file-code-o'; }\n\t// Images\n\tif (preg_match('/\\.ico$/i', $tmpfile)) { $mime = 'image/x-icon'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.(jpg|jpeg)$/i', $tmpfile)) { $mime = 'image/jpeg'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.png$/i', $tmpfile)) { $mime = 'image/png'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.gif$/i', $tmpfile)) { $mime = 'image/gif'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.bmp$/i', $tmpfile)) { $mime = 'image/bmp'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.(tif|tiff)$/i', $tmpfile)) { $mime = 'image/tiff'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.svg$/i', $tmpfile)) { $mime = 'image/svg+xml'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\tif (preg_match('/\\.webp$/i', $tmpfile)) { $mime = 'image/webp'; $imgmime = 'image.png'; $famime = 'file-image-o'; }\n\t// Calendar\n\tif (preg_match('/\\.vcs$/i', $tmpfile)) { $mime = 'text/calendar'; $imgmime = 'other.png'; $famime = 'file-text-o'; }\n\tif (preg_match('/\\.ics$/i', $tmpfile)) { $mime = 'text/calendar'; $imgmime = 'other.png'; $famime = 'file-text-o'; }\n\t// Other\n\tif (preg_match('/\\.torrent$/i', $tmpfile)) { $mime = 'application/x-bittorrent'; $imgmime = 'other.png'; $famime = 'file-o'; }\n\t// Audio\n\tif (preg_match('/\\.(mp3|ogg|au|wav|wma|mid)$/i', $tmpfile)) { $mime = 'audio'; $imgmime = 'audio.png'; $famime = 'file-audio-o'; }\n\t// Video\n\tif (preg_match('/\\.ogv$/i', $tmpfile)) { $mime = 'video/ogg'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.webm$/i', $tmpfile)) { $mime = 'video/webm'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.avi$/i', $tmpfile)) { $mime = 'video/x-msvideo'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.divx$/i', $tmpfile)) { $mime = 'video/divx'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.xvid$/i', $tmpfile)) { $mime = 'video/xvid'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\tif (preg_match('/\\.(wmv|mpg|mpeg)$/i', $tmpfile)) { $mime = 'video'; $imgmime = 'video.png'; $famime = 'file-video-o'; }\n\t// Archive\n\tif (preg_match('/\\.(zip|rar|gz|tgz|z|cab|bz2|7z|tar|lzh)$/i', $tmpfile)) { $mime = 'archive'; $imgmime = 'archive.png'; $famime = 'file-archive-o'; }    // application/xxx where zzz is zip, ...\n\t// Exe\n\tif (preg_match('/\\.(exe|com)$/i', $tmpfile)) { $mime = 'application/octet-stream'; $imgmime = 'other.png'; $famime = 'file-o'; }\n\t// Lib\n\tif (preg_match('/\\.(dll|lib|o|so|a)$/i', $tmpfile)) { $mime = 'library'; $imgmime = 'library.png'; $famime = 'file-o'; }\n\t// Err\n\tif (preg_match('/\\.err$/i', $tmpfile)) { $mime = 'error'; $imgmime = 'error.png'; $famime = 'file-text-o'; }\n\n\t// Return string\n\tif ($mode == 1)\n\t{\n\t\t$tmp = explode('/', $mime);\n\t\treturn (!empty($tmp[1]) ? $tmp[1] : $tmp[0]);\n\t}\n\tif ($mode == 2)\n\t{\n\t\treturn $imgmime;\n\t}\n\tif ($mode == 3)\n\t{\n\t\treturn $srclang;\n\t}\n\tif ($mode == 4)\n\t{\n\t\treturn $famime;\n\t}\n\treturn $mime;\n}\n\n/**\n * Return value from dictionary\n *\n * @param string\t$tablename\t\tname of dictionary\n * @param string\t$field\t\t\tthe value to return\n * @param int\t\t$id\t\t\t\tid of line\n * @param bool\t\t$checkentity\tadd filter on entity\n * @param string\t$rowidfield\t\tname of the column rowid\n * @return string\n */\nfunction getDictvalue($tablename, $field, $id, $checkentity = false, $rowidfield = 'rowid')\n{\n\tglobal $dictvalues, $db, $langs;\n\n\tif (!isset($dictvalues[$tablename]))\n\t{\n\t\t$dictvalues[$tablename] = array();\n\t\t$sql = 'SELECT * FROM '.$tablename.' WHERE 1'; // Here select * is allowed as it is generic code and we don't have list of fields\n\t\tif ($checkentity) $sql .= ' AND entity IN (0,'.getEntity($tablename).')';\n\n\t\t$resql = $db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj = $db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$dictvalues[$tablename][$obj->{$rowidfield}] = $obj;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($db);\n\t\t}\n\t}\n\n\tif (!empty($dictvalues[$tablename][$id])) return $dictvalues[$tablename][$id]->{$field}; // Found\n\telse // Not found\n\t{\n\t\tif ($id > 0) return $id;\n\t\treturn '';\n\t}\n}\n\n/**\n *\tReturn true if the color is light\n *\n *  @param\tstring\t$stringcolor\t\tString with hex (FFFFFF) or comma RGB ('255,255,255')\n *  @return\tint\t\t\t\t\t\t\t-1 : Error with argument passed |0 : color is dark | 1 : color is light\n */\nfunction colorIsLight($stringcolor)\n{\n    $stringcolor = str_replace('#', '', $stringcolor);\n\t$res = -1;\n\tif (!empty($stringcolor))\n\t{\n\t\t$res = 0;\n\t\t$tmp = explode(',', $stringcolor);\n\t\tif (count($tmp) > 1)   // This is a comma RGB ('255','255','255')\n\t\t{\n\t\t\t$r = $tmp[0];\n\t\t\t$g = $tmp[1];\n\t\t\t$b = $tmp[2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$hexr = $stringcolor[0].$stringcolor[1];\n\t\t\t$hexg = $stringcolor[2].$stringcolor[3];\n\t\t\t$hexb = $stringcolor[4].$stringcolor[5];\n\t\t\t$r = hexdec($hexr);\n\t\t\t$g = hexdec($hexg);\n\t\t\t$b = hexdec($hexb);\n\t\t}\n\t\t$bright = (max($r, $g, $b) + min($r, $g, $b)) / 510.0; // HSL algorithm\n\t\tif ($bright > 0.6) $res = 1;\n\t}\n\treturn $res;\n}\n\n/**\n * Function to test if an entry is enabled or not\n *\n * @param\tstring\t\t$type_user\t\t\t\t\t0=We test for internal user, 1=We test for external user\n * @param\tarray\t\t$menuentry\t\t\t\t\tArray for feature entry to test\n * @param\tarray\t\t$listofmodulesforexternal\tArray with list of modules allowed to external users\n * @return\tint\t\t\t\t\t\t\t\t\t\t0=Hide, 1=Show, 2=Show gray\n */\nfunction isVisibleToUserType($type_user, &$menuentry, &$listofmodulesforexternal)\n{\n\tglobal $conf;\n\n\t//print 'type_user='.$type_user.' module='.$menuentry['module'].' enabled='.$menuentry['enabled'].' perms='.$menuentry['perms'];\n\t//print 'ok='.in_array($menuentry['module'], $listofmodulesforexternal);\n\tif (empty($menuentry['enabled'])) return 0; // Entry disabled by condition\n\tif ($type_user && $menuentry['module'])\n\t{\n\t\t$tmploops = explode('|', $menuentry['module']);\n\t\t$found = 0;\n\t\tforeach ($tmploops as $tmploop)\n\t\t{\n\t\t\tif (in_array($tmploop, $listofmodulesforexternal)) {\n\t\t\t\t$found++; break;\n\t\t\t}\n\t\t}\n\t\tif (!$found) return 0; // Entry is for menus all excluded to external users\n\t}\n\tif (!$menuentry['perms'] && $type_user) return 0; // No permissions and user is external\n\tif (!$menuentry['perms'] && !empty($conf->global->MAIN_MENU_HIDE_UNAUTHORIZED))\treturn 0; // No permissions and option to hide when not allowed, even for internal user, is on\n\tif (!$menuentry['perms']) return 2; // No permissions and user is external\n\treturn 1;\n}\n\n/**\n * Round to next multiple.\n *\n * @param \tdouble\t\t$n\t\tNumber to round up\n * @param \tinteger\t\t$x\t\tMultiple. For example 60 to round up to nearest exact minute for a date with seconds.\n * @return \tinteger\t\t\t\tValue rounded.\n */\nfunction roundUpToNextMultiple($n, $x = 5)\n{\n\treturn (ceil($n) % $x === 0) ? ceil($n) : round(($n + $x / 2) / $x) * $x;\n}\n\n/**\n * Function dolGetBadge\n *\n * @param   string  $label      label of badge no html : use in alt attribute for accessibility\n * @param   string  $html       optional : label of badge with html\n * @param   string  $type       type of badge : Primary Secondary Success Danger Warning Info Light Dark status0 status1 status2 status3 status4 status5 status6 status7 status8 status9\n * @param   string  $mode       default '' , 'pill', 'dot'\n * @param   string  $url        the url for link\n * @param   array   $params     various params for future : recommended rather than adding more fuction arguments. array('attr'=>array('title'=>'abc'))\n * @return  string              Html badge\n */\nfunction dolGetBadge($label, $html = '', $type = 'primary', $mode = '', $url = '', $params = array())\n{\n    $attr = array(\n    \t'class'=>'badge '.(!empty($mode) ? ' badge-'.$mode : '').(!empty($type) ? ' badge-'.$type : '').(empty($params['css']) ? '' : ' '.$params['css'])\n    );\n\n    if (empty($html)) {\n        $html = $label;\n    }\n\n    if (!empty($url)) {\n        $attr['href'] = $url;\n    }\n\n    if ($mode === 'dot') {\n        $attr['class'] .= ' classfortooltip';\n        $attr['title'] = $html;\n        $attr['aria-label'] = $label;\n        $html = '';\n    }\n\n    // Override attr\n    if (!empty($params['attr']) && is_array($params['attr'])) {\n        foreach ($params['attr']as $key => $value) {\n\t\t\tif ($key == 'class') {\n\t\t\t\t$attr['class'] .= ' '.$value;\n\t\t\t}\n\t\t\telseif ($key == 'classOverride') {\n\t\t\t\t$attr['class'] = $value;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$attr[$key] = $value;\n\t\t\t}\n        }\n    }\n\n    // TODO: add hook\n\n    // escape all attribute\n    $attr = array_map('dol_escape_htmltag', $attr);\n\n    $TCompiledAttr = array();\n    foreach ($attr as $key => $value) {\n        $TCompiledAttr[] = $key.'=\"'.$value.'\"';\n    }\n\n    $compiledAttributes = !empty($TCompiledAttr) ?implode(' ', $TCompiledAttr) : '';\n\n    $tag = !empty($url) ? 'a' : 'span';\n\n    return '<'.$tag.' '.$compiledAttributes.'>'.$html.'</'.$tag.'>';\n}\n\n\n/**\n * Function dolGetStatus\n *\n * @param   string  $statusLabel       Label of badge no html : use in alt attribute for accessibility\n * @param   string  $statusLabelShort  Short label of badge no html\n * @param   string  $html              Optional : label of badge with html\n * @param   string  $statusType        status0 status1 status2 status3 status4 status5 status6 status7 status8 status9 : image name or badge name\n * @param   int\t    $displayMode       0=Long label, 1=Short label, 2=Picto + Short label, 3=Picto, 4=Picto + Long label, 5=Short label + Picto, 6=Long label + Picto\n * @param   string  $url               The url for link\n * @param   array   $params            Various params for future : recommended rather than adding more function arguments\n * @return  string                     Html status string\n */\nfunction dolGetStatus($statusLabel = '', $statusLabelShort = '', $html = '', $statusType = 'status0', $displayMode = 0, $url = '', $params = array())\n{\n    global $conf;\n\n    $return = '';\n    $dolGetBadgeParams = array();\n\n    if (!empty($params['badgeParams'])) {\n        $dolGetBadgeParams = $params['badgeParams'];\n    }\n\n    // TODO : add a hook\n\n    if ($displayMode == 0) {\n        $return = !empty($html) ? $html : $statusLabel;\n    }\n    elseif ($displayMode == 1) {\n        $return = !empty($html) ? $html : (!empty($statusLabelShort) ? $statusLabelShort : $statusLabel);\n    }\n    // Use status with images (for backward compatibility)\n    elseif (!empty($conf->global->MAIN_STATUS_USES_IMAGES)) {\n        $return = '';\n        $htmlLabel      = (in_array($displayMode, array(1, 2, 5)) ? '<span class=\"hideonsmartphone\">' : '').(!empty($html) ? $html : $statusLabel).(in_array($displayMode, array(1, 2, 5)) ? '</span>' : '');\n        $htmlLabelShort = (in_array($displayMode, array(1, 2, 5)) ? '<span class=\"hideonsmartphone\">' : '').(!empty($html) ? $html : (!empty($statusLabelShort) ? $statusLabelShort : $statusLabel)).(in_array($displayMode, array(1, 2, 5)) ? '</span>' : '');\n\n        // For small screen, we always use the short label instead of long label.\n        if (!empty($conf->dol_optimize_smallscreen))\n        {\n        \tif ($displayMode == 0) $displayMode = 1;\n        \telseif ($displayMode == 4) $displayMode = 2;\n        \telseif ($displayMode == 6) $displayMode = 5;\n        }\n\n        // For backward compatibility. Image's filename are still in French, so we use this array to convert\n        $statusImg = array(\n        \t'status0' => 'statut0',\n        \t'status1' => 'statut1',\n        \t'status2' => 'statut2',\n        \t'status3' => 'statut3',\n        \t'status4' => 'statut4',\n        \t'status5' => 'statut5',\n        \t'status6' => 'statut6',\n        \t'status7' => 'statut7',\n        \t'status8' => 'statut8',\n        \t'status9' => 'statut9'\n        );\n\n        if (!empty($statusImg[$statusType])) {\n            $htmlImg = img_picto($statusLabel, $statusImg[$statusType]);\n        } else {\n            $htmlImg = img_picto($statusLabel, $statusType);\n        }\n\n        if ($displayMode === 2) {\n            $return = $htmlImg.' '.$htmlLabelShort;\n        }\n        elseif ($displayMode === 3) {\n            $return = $htmlImg;\n        }\n        elseif ($displayMode === 4) {\n            $return = $htmlImg.' '.$htmlLabel;\n        }\n        elseif ($displayMode === 5) {\n            $return = $htmlLabelShort.' '.$htmlImg;\n        }\n        else { // $displayMode >= 6\n            $return = $htmlLabel.' '.$htmlImg;\n        }\n    }\n    // Use new badge\n    elseif (empty($conf->global->MAIN_STATUS_USES_IMAGES) && !empty($displayMode)) {\n        $statusLabelShort = !empty($statusLabelShort) ? $statusLabelShort : $statusLabel;\n\n\t\t$dolGetBadgeParams['attr']['class'] = 'badge-status';\n\t\t$dolGetBadgeParams['attr']['title'] = $statusLabel;\n\n        if ($displayMode == 3) {\n            $return = dolGetBadge($statusLabel, '', $statusType, 'dot', $url, $dolGetBadgeParams);\n        }\n        elseif ($displayMode === 5) {\n            $return = dolGetBadge($statusLabelShort, $html, $statusType, '', $url, $dolGetBadgeParams);\n        }\n        else {\n            $return = dolGetBadge($statusLabel, $html, $statusType, '', $url, $dolGetBadgeParams);\n        }\n    }\n\n    return $return;\n}\n\n\n/**\n * Function dolGetButtonAction\n *\n * @param string    $label      label of button no html : use in alt attribute for accessibility $html is not empty\n * @param string    $html       optional : content with html\n * @param string    $actionType default, delete, danger\n * @param string    $url        the url for link\n * @param string    $id         attribute id of button\n * @param int       $userRight  user action right\n * @param array     $params     various params for future : recommended rather than adding more function arguments\n * @return string               html button\n */\nfunction dolGetButtonAction($label, $html = '', $actionType = 'default', $url = '', $id = '', $userRight = 1, $params = array())\n{\n    $class = 'butAction';\n    if ($actionType == 'danger' || $actionType == 'delete') {\n        $class = 'butActionDelete';\n    }\n\n    $attr = array(\n        'class' => $class\n        ,'href' => empty($url) ? '' : $url\n    );\n\n    if (empty($html)) {\n        $html = $label;\n    } else {\n        $attr['aria-label'] = $label;\n    }\n\n    if (empty($userRight)) {\n        $attr['class'] = 'butActionRefused';\n        $attr['href'] = '';\n    }\n\n    if (!empty($id)) {\n        $attr['id'] = $id;\n    }\n\n    // Override attr\n    if (!empty($params['attr']) && is_array($params['attr'])) {\n        foreach ($params['attr'] as $key => $value) {\n            if ($key == 'class') {\n                $attr['class'] .= ' '.$value;\n            }\n            elseif ($key == 'classOverride') {\n                $attr['class'] = $value;\n            }\n            else {\n                $attr[$key] = $value;\n            }\n        }\n    }\n\n    if (isset($attr['href']) && empty($attr['href'])) {\n        unset($attr['href']);\n    }\n\n    // TODO : add a hook\n\n    // escape all attribute\n    $attr = array_map('dol_escape_htmltag', $attr);\n\n    $TCompiledAttr = array();\n    foreach ($attr as $key => $value) {\n        $TCompiledAttr[] = $key.'=\"'.$value.'\"';\n    }\n\n    $compiledAttributes = !empty($TCompiledAttr) ?implode(' ', $TCompiledAttr) : '';\n\n    $tag = !empty($attr['href']) ? 'a' : 'span';\n\n    return '<div class=\"inline-block divButAction\"><'.$tag.' '.$compiledAttributes.'>'.$html.'</'.$tag.'></div>';\n}\n\n/**\n * Function dolGetButtonTitle : this kind of buttons are used in title in list\n *\n * @param string    $label      label of button\n * @param string    $helpText   optional : content for help tooltip\n * @param string    $iconClass  class for icon element (Example: 'fa fa-file')\n * @param string    $url        the url for link\n * @param string    $id         attribute id of button\n * @param int       $status     0 no user rights, 1 active, -1 Feature Disabled, -2 disable Other reason use helpText as tooltip\n * @param array     $params     various params for future : recommended rather than adding more function arguments\n * @return string               html button\n */\nfunction dolGetButtonTitle($label, $helpText = '', $iconClass = 'fa fa-file', $url = '', $id = '', $status = 1, $params = array())\n{\n    global $langs, $conf, $user;\n\n    // Actually this conf is used in css too for external module compatibility and smooth transition to this function\n    if (!empty($conf->global->MAIN_BUTTON_HIDE_UNAUTHORIZED) && (!$user->admin) && $status <= 0) {\n        return '';\n    }\n\n    $class = 'btnTitle';\n    if ($iconClass == 'fa fa-plus-circle') $class .= ' btnTitlePlus';\n\n    if (!empty($params['morecss'])) $class .= ' '.$params['morecss'];\n\n    $attr = array(\n        'class' => $class\n        ,'href' => empty($url) ? '' : $url\n    );\n\n    if (!empty($helpText)) {\n        $attr['title'] = dol_escape_htmltag($helpText);\n    }\n\n    if ($status <= 0) {\n        $attr['class'] .= ' refused';\n\n        $attr['href'] = '';\n\n        if ($status == -1) { // disable\n            $attr['title'] = dol_escape_htmltag($langs->transnoentitiesnoconv(\"FeatureDisabled\"));\n        }\n        elseif ($status == 0) { // Not enough permissions\n            $attr['title'] = dol_escape_htmltag($langs->transnoentitiesnoconv(\"NotEnoughPermissions\"));\n        }\n    }\n\n    if (!empty($attr['title'])) {\n        $attr['class'] .= ' classfortooltip';\n    }\n\n    if (!empty($id)) {\n        $attr['id'] = $id;\n    }\n\n    // Override attr\n    if (!empty($params['attr']) && is_array($params['attr'])) {\n        foreach ($params['attr'] as $key => $value) {\n            if ($key == 'class') {\n                $attr['class'] .= ' '.$value;\n            }\n            elseif ($key == 'classOverride') {\n                $attr['class'] = $value;\n            }\n            else {\n                $attr[$key] = $value;\n            }\n        }\n    }\n\n    if (isset($attr['href']) && empty($attr['href'])) {\n        unset($attr['href']);\n    }\n\n    // TODO : add a hook\n\n    // escape all attribute\n    $attr = array_map('dol_escape_htmltag', $attr);\n\n    $TCompiledAttr = array();\n    foreach ($attr as $key => $value) {\n        $TCompiledAttr[] = $key.'=\"'.$value.'\"';\n    }\n\n    $compiledAttributes = (empty($TCompiledAttr) ? '' : implode(' ', $TCompiledAttr));\n\n    $tag = (empty($attr['href']) ? 'span' : 'a');\n\n    $button = '';\n    $button .= '<'.$tag.' '.$compiledAttributes.' >';\n    $button .= '<span class=\"'.$iconClass.' valignmiddle btnTitle-icon\"></span>';\n    $button .= '<span class=\"valignmiddle text-plus-circle btnTitle-label'.(empty($params['forcenohideoftext']) ? ' hideonsmartphone' : '').'\">'.$label.'</span>';\n    $button .= '</'.$tag.'>';\n\n    return $button;\n}\n\n/**\n * Get an array with properties of an element.\n * Called by fetchObjectByElement.\n *\n * @param   string \t$element_type \tElement type (Value of $object->element). Example: 'action', 'facture', 'project_task' or 'object@mymodule'...\n * @return  array\t\t\t\t\t(module, classpath, element, subelement, classfile, classname)\n */\nfunction getElementProperties($element_type)\n{\n\t$regs = array();\n\n\t$classfile = $classname = $classpath = '';\n\n\t// Parse element/subelement (ex: project_task)\n\t$module = $element_type;\n\t$element = $element_type;\n\t$subelement = $element_type;\n\n\t// If we ask an resource form external module (instead of default path)\n\tif (preg_match('/^([^@]+)@([^@]+)$/i', $element_type, $regs)) {\n\t\t$element = $subelement = $regs[1];\n\t\t$module = $regs[2];\n\t}\n\n\t//print '<br>1. element : '.$element.' - module : '.$module .'<br>';\n\tif (preg_match('/^([^_]+)_([^_]+)/i', $element, $regs)) {\n\t\t$module = $element = $regs[1];\n\t\t$subelement = $regs[2];\n\t}\n\n\t// For compat\n\tif ($element_type == \"action\") {\n\t\t$classpath = 'comm/action/class';\n\t\t$subelement = 'Actioncomm';\n\t\t$module = 'agenda';\n\t}\n\n\t// To work with non standard path\n\tif ($element_type == 'facture' || $element_type == 'invoice') {\n\t\t$classpath = 'compta/facture/class';\n\t\t$module = 'facture';\n\t\t$subelement = 'facture';\n\t}\n\tif ($element_type == 'commande' || $element_type == 'order') {\n\t\t$classpath = 'commande/class';\n\t\t$module = 'commande';\n\t\t$subelement = 'commande';\n\t}\n\tif ($element_type == 'propal') {\n\t\t$classpath = 'comm/propal/class';\n\t}\n\tif ($element_type == 'supplier_proposal') {\n\t\t$classpath = 'supplier_proposal/class';\n\t}\n\tif ($element_type == 'shipping') {\n\t\t$classpath = 'expedition/class';\n\t\t$subelement = 'expedition';\n\t\t$module = 'expedition_bon';\n\t}\n\tif ($element_type == 'delivery') {\n\t\t$classpath = 'livraison/class';\n\t\t$subelement = 'livraison';\n\t\t$module = 'livraison_bon';\n\t}\n\tif ($element_type == 'contract') {\n\t\t$classpath = 'contrat/class';\n\t\t$module = 'contrat';\n\t\t$subelement = 'contrat';\n\t}\n\tif ($element_type == 'member') {\n\t\t$classpath = 'adherents/class';\n\t\t$module = 'adherent';\n\t\t$subelement = 'adherent';\n\t}\n\tif ($element_type == 'cabinetmed_cons') {\n\t\t$classpath = 'cabinetmed/class';\n\t\t$module = 'cabinetmed';\n\t\t$subelement = 'cabinetmedcons';\n\t}\n\tif ($element_type == 'fichinter') {\n\t\t$classpath = 'fichinter/class';\n\t\t$module = 'ficheinter';\n\t\t$subelement = 'fichinter';\n\t}\n\tif ($element_type == 'dolresource' || $element_type == 'resource') {\n\t\t$classpath = 'resource/class';\n\t\t$module = 'resource';\n\t\t$subelement = 'dolresource';\n\t}\n\tif ($element_type == 'propaldet') {\n\t\t$classpath = 'comm/propal/class';\n\t\t$module = 'propal';\n\t\t$subelement = 'propaleligne';\n\t}\n\tif ($element_type == 'order_supplier') {\n\t\t$classpath = 'fourn/class';\n\t\t$module = 'fournisseur';\n\t\t$subelement = 'commandefournisseur';\n\t\t$classfile = 'fournisseur.commande';\n\t}\n\tif ($element_type == 'invoice_supplier') {\n\t\t$classpath = 'fourn/class';\n\t\t$module = 'fournisseur';\n\t\t$subelement = 'facturefournisseur';\n\t\t$classfile = 'fournisseur.facture';\n\t}\n\tif ($element_type == \"service\") {\n\t\t$classpath = 'product/class';\n\t\t$subelement = 'product';\n\t}\n\n\tif (empty($classfile)) $classfile = strtolower($subelement);\n\tif (empty($classname)) $classname = ucfirst($subelement);\n\tif (empty($classpath)) $classpath = $module.'/class';\n\n\t$element_properties = array(\n\t\t'module' => $module,\n\t\t'classpath' => $classpath,\n\t\t'element' => $element,\n\t\t'subelement' => $subelement,\n\t\t'classfile' => $classfile,\n\t\t'classname' => $classname\n\t);\n\treturn $element_properties;\n}\n\n/**\n * Fetch an object from its id and element_type\n * Inclusion of classes is automatic\n *\n * @param\tint     \t$element_id \tElement id\n * @param\tstring  \t$element_type \tElement type\n * @param\tstring     \t$element_ref \tElement ref (Use this or element_id but not both)\n * @return \tint|object \t\t\t\t\tobject || 0 || -1 if error\n */\nfunction fetchObjectByElement($element_id, $element_type, $element_ref = '')\n{\n\tglobal $conf, $db;\n\n\t$element_prop = getElementProperties($element_type);\n\tif (is_array($element_prop) && $conf->{$element_prop['module']}->enabled)\n\t{\n\t\tdol_include_once('/'.$element_prop['classpath'].'/'.$element_prop['classfile'].'.class.php');\n\n\t\t$objecttmp = new $element_prop['classname']($db);\n\t\t$ret = $objecttmp->fetch($element_id, $element_ref);\n\t\tif ($ret >= 0)\n\t\t{\n\t\t\treturn $objecttmp;\n\t\t}\n\t}\n\treturn 0;\n}\n\n/**\n * Return if a file can contains executable content\n *\n * @param   string  $filename       File name to test\n * @return  boolean                 True if yes, False if no\n */\nfunction isAFileWithExecutableContent($filename)\n{\n    if (preg_match('/\\.(htm|html|js|phar|php|php\\d+|phtml|pht|pl|py|cgi|ksh|sh|shtml|bash|bat|cmd|wpk|exe|dmg)$/i', $filename))\n    {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Return the value of token currently saved into session with name 'newtoken'.\n * This token must be send by any POST as it will be used by next page for comparison with value in session.\n *\n * @return  string\n */\nfunction newToken()\n{\n\treturn $_SESSION['newtoken'];\n}\n\n/**\n * Return the value of token currently saved into session with name 'token'.\n *\n * @return  string\n */\nfunction currentToken()\n{\n\treturn $_SESSION['token'];\n}\n", "<?php\n/* Copyright (C) 2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *      \\file       test/phpunit/SecurityTest.php\n *\t\t\\ingroup    test\n *      \\brief      PHPUnit test\n *\t\t\\remarks\tTo run this script as CLI:  phpunit filename.php\n */\n\nglobal $conf,$user,$langs,$db;\n//define('TEST_DB_FORCE_TYPE','mysql');\t// This is to force using mysql driver\n//require_once 'PHPUnit/Autoload.php';\nrequire_once dirname(__FILE__).'/../../htdocs/master.inc.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security2.lib.php';\n\nif (! defined('NOREQUIREUSER'))  define('NOREQUIREUSER', '1');\nif (! defined('NOREQUIREDB'))    define('NOREQUIREDB', '1');\nif (! defined('NOREQUIRESOC'))   define('NOREQUIRESOC', '1');\nif (! defined('NOREQUIRETRAN'))  define('NOREQUIRETRAN', '1');\nif (! defined('NOCSRFCHECK'))    define('NOCSRFCHECK', '1');\nif (! defined('NOTOKENRENEWAL')) define('NOTOKENRENEWAL', '1');\nif (! defined('NOREQUIREMENU'))  define('NOREQUIREMENU', '1'); // If there is no menu to show\nif (! defined('NOREQUIREHTML'))  define('NOREQUIREHTML', '1'); // If we don't need to load the html.form.class.php\nif (! defined('NOREQUIREAJAX'))  define('NOREQUIREAJAX', '1');\nif (! defined(\"NOLOGIN\"))        define(\"NOLOGIN\", '1');       // If this page is public (can be called outside logged session)\n\nif (empty($user->id))\n{\n    print \"Load permissions for admin user nb 1\\n\";\n    $user->fetch(1);\n    $user->getrights();\n}\n$conf->global->MAIN_DISABLE_ALL_MAILS=1;\n\n\n/**\n * Class for PHPUnit tests\n *\n * @backupGlobals disabled\n * @backupStaticAttributes enabled\n * @remarks\tbackupGlobals must be disabled to have db,conf,user and lang not erased.\n */\nclass SecurityTest extends PHPUnit\\Framework\\TestCase\n{\n\tprotected $savconf;\n\tprotected $savuser;\n\tprotected $savlangs;\n\tprotected $savdb;\n\n\t/**\n\t * Constructor\n\t * We save global variables into local variables\n\t *\n\t * @return SecurityTest\n\t */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\n\t\t//$this->sharedFixture\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$this->savconf=$conf;\n\t\t$this->savuser=$user;\n\t\t$this->savlangs=$langs;\n\t\t$this->savdb=$db;\n\n\t\tprint __METHOD__.\" db->type=\".$db->type.\" user->id=\".$user->id;\n\t\t//print \" - db \".$db->db;\n\t\tprint \"\\n\";\n\t}\n\n    /**\n     * setUpBeforeClass\n     *\n     * @return void\n     */\n    public static function setUpBeforeClass()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$db->begin();\t// This is to have all actions inside a transaction even if test launched without suite.\n\n    \tprint __METHOD__.\"\\n\";\n    }\n\n    /**\n     * tearDownAfterClass\n     *\n     * @return\tvoid\n     */\n    public static function tearDownAfterClass()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$db->rollback();\n\n\t\tprint __METHOD__.\"\\n\";\n    }\n\n\t/**\n\t * Init phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n    protected function setUp()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tprint __METHOD__.\"\\n\";\n    }\n\n\t/**\n\t * End phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n    protected function tearDown()\n    {\n    \tprint __METHOD__.\"\\n\";\n    }\n\n    /**\n     * testSetLang\n     *\n     * @return string\n     */\n    public function testSetLang()\n    {\n    \tglobal $conf;\n    \t$conf=$this->savconf;\n\n    \t$tmplangs = new Translate('', $conf);\n\n    \t$_SERVER['HTTP_ACCEPT_LANGUAGE'] = \"' malicious text with quote\";\n    \t$tmplangs->setDefaultLang('auto');\n    \tprint __METHOD__.' $tmplangs->defaultlang='.$tmplangs->defaultlang.\"\\n\";\n    \t$this->assertEquals($tmplangs->defaultlang, 'malicioustextwithquote_MALICIOUSTEXTWITHQUOTE');\n    }\n\n    /**\n     * testGETPOST\n     *\n     * @return string\n     */\n    public function testGETPOST()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n        $_COOKIE[\"id\"]=111;\n\t\t$_GET[\"param1\"]=\"222\";\n        $_POST[\"param1\"]=\"333\";\n\t\t$_GET[\"param2\"]='a/b#e(pr)qq-rr\\cc';\n        $_GET[\"param3\"]='\"a/b#e(pr)qq-rr\\cc';    // Same than param2 + \"\n        $_GET[\"param4\"]='../dir';\n        $_GET[\"param5\"]=\"a_1-b\";\n\n        // Test int\n        $result=GETPOST('id', 'int');              // Must return nothing\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param1\", 'int');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 222);\n\n        $result=GETPOST(\"param1\", 'int', 2);\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 333);\n\n        // Test alpha\n        $result=GETPOST(\"param2\", 'alpha');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, $_GET[\"param2\"]);\n\n        $result=GETPOST(\"param3\", 'alpha');  // Must return string sanitized from char \"\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 'a/b#e(pr)qq-rr\\cc');\n\n        $result=GETPOST(\"param4\", 'alpha');  // Must return string sanitized from ../\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, 'dir');\n\n        // Test aZ09\n        $result=GETPOST(\"param1\", 'aZ09');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, $_GET[\"param1\"]);\n\n        $result=GETPOST(\"param2\", 'aZ09');  // Must return '' as string contains car not in aZ09 definition\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param3\", 'aZ09');  // Must return '' as string contains car not in aZ09 definition\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param4\", 'aZ09');  // Must return '' as string contains car not in aZ09 definition\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, '');\n\n        $result=GETPOST(\"param5\", 'aZ09');\n        print __METHOD__.\" result=\".$result.\"\\n\";\n        $this->assertEquals($result, $_GET[\"param5\"]);\n\n        return $result;\n    }\n\n    /**\n     * testCheckLoginPassEntity\n     *\n     * @return\tvoid\n     */\n    public function testCheckLoginPassEntity()\n    {\n        $login=checkLoginPassEntity('loginbidon', 'passwordbidon', 1, array('dolibarr'));\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, '');\n\n        $login=checkLoginPassEntity('admin', 'passwordbidon', 1, array('dolibarr'));\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, '');\n\n        $login=checkLoginPassEntity('admin', 'admin', 1, array('dolibarr'));            // Should works because admin/admin exists\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, 'admin', 'The test to check if pass of user \"admin\" is \"admin\" has failed');\n\n        $login=checkLoginPassEntity('admin', 'admin', 1, array('http','dolibarr'));    // Should work because of second authetntication method\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, 'admin');\n\n        $login=checkLoginPassEntity('admin', 'admin', 1, array('forceuser'));\n        print __METHOD__.\" login=\".$login.\"\\n\";\n        $this->assertEquals($login, '');    // Expected '' because should failed because login 'auto' does not exists\n    }\n\n    /**\n     * testEncodeDecode\n     *\n     * @return number\n     */\n    public function testEncodeDecode()\n    {\n        $stringtotest=\"This is a string to test encode/decode. This is a string to test encode/decode. This is a string to test encode/decode.\";\n\n        $encodedstring=dol_encode($stringtotest);\n        $decodedstring=dol_decode($encodedstring);\n        print __METHOD__.\" encodedstring=\".$encodedstring.\" \".base64_encode($stringtotest).\"\\n\";\n        $this->assertEquals($stringtotest, $decodedstring, 'Use dol_encode/decode with no parameter');\n\n        $encodedstring=dol_encode($stringtotest, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n        $decodedstring=dol_decode($encodedstring, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n        print __METHOD__.\" encodedstring=\".$encodedstring.\" \".base64_encode($stringtotest).\"\\n\";\n        $this->assertEquals($stringtotest, $decodedstring, 'Use dol_encode/decode with a key parameter');\n\n        return 0;\n    }\n\n    /**\n     * testGetRandomPassword\n     *\n     * @return number\n     */\n    public function testGetRandomPassword()\n    {\n        global $conf;\n\n        $genpass1=getRandomPassword(true);\t\t\t\t// Should be a string return by dol_hash (if no option set, will be md5)\n        print __METHOD__.\" genpass1=\".$genpass1.\"\\n\";\n        $this->assertEquals(strlen($genpass1), 32);\n\n        $genpass1=getRandomPassword(true, array('I'));\t// Should be a string return by dol_hash (if no option set, will be md5)\n        print __METHOD__.\" genpass1=\".$genpass1.\"\\n\";\n        $this->assertEquals(strlen($genpass1), 32);\n\n        $conf->global->USER_PASSWORD_GENERATED='None';\n        $genpass2=getRandomPassword(false);\t\t\t\t// Should return an empty string\n        print __METHOD__.\" genpass2=\".$genpass2.\"\\n\";\n        $this->assertEquals($genpass2, '');\n\n        $conf->global->USER_PASSWORD_GENERATED='Standard';\n        $genpass3=getRandomPassword(false);\t\t\t\t// Should return a password of 8 chars\n        print __METHOD__.\" genpass3=\".$genpass3.\"\\n\";\n        $this->assertEquals(strlen($genpass3), 8);\n\n        return 0;\n    }\n\n    /**\n     * testRestrictedArea\n     *\n     * @return void\n     */\n    public function testRestrictedArea()\n    {\n    \tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\t//$dummyuser=new User($db);\n\t\t//$result=restrictedArea($dummyuser,'societe');\n\n\t\t$result=restrictedArea($user, 'societe');\n\t\t$this->assertEquals(1, $result);\n    }\n\n    /**\n     * testDolSanitizeFileName\n     *\n     * @return void\n     */\n    public function testDolSanitizeFileName()\n    {\n    \tglobal $conf,$user,$langs,$db;\n    \t$conf=$this->savconf;\n    \t$user=$this->savuser;\n    \t$langs=$this->savlangs;\n    \t$db=$this->savdb;\n\n    \t//$dummyuser=new User($db);\n    \t//$result=restrictedArea($dummyuser,'societe');\n\n    \t$result=dol_sanitizeFileName('bad file | evilaction');\n    \t$this->assertEquals('bad file _ evilaction', $result);\n\n    \t$result=dol_sanitizeFileName('bad file --evilparam');\n    \t$this->assertEquals('bad file _evilparam', $result);\n    }\n}\n"], "filenames": ["htdocs/admin/tools/export_files.php", "htdocs/core/lib/functions.lib.php", "test/phpunit/SecurityTest.php"], "buggy_code_start_loc": [37, 869, 247], "buggy_code_end_loc": [38, 871, 328], "fixing_code_start_loc": [37, 869, 247], "fixing_code_end_loc": [38, 872, 352], "type": "CWE-88", "message": "Dolibarr 12.0.3 is vulnerable to authenticated Remote Code Execution. An attacker who has the access the admin dashboard can manipulate the backup function by inserting a payload into the filename for the zipfilename_template parameter to admin/tools/dolibarr_export.php.", "other": {"cve": {"id": "CVE-2020-35136", "sourceIdentifier": "cve@mitre.org", "published": "2020-12-23T15:15:16.043", "lastModified": "2022-11-17T17:21:59.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Dolibarr 12.0.3 is vulnerable to authenticated Remote Code Execution. An attacker who has the access the admin dashboard can manipulate the backup function by inserting a payload into the filename for the zipfilename_template parameter to admin/tools/dolibarr_export.php."}, {"lang": "es", "value": "Dolibarr versi\u00f3n 12.0.3, es vulnerable a una Ejecuci\u00f3n de C\u00f3digo Remota autenticada.&#xa0;Un atacante que tenga acceso al panel de administraci\u00f3n puede manipular la funci\u00f3n de copia de seguridad al insertar una carga \u00fatil en el nombre de archivo para el par\u00e1metro zipfilename_template en el archivo admin/tools/dolibarr_export.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 9.0}, "baseSeverity": "HIGH", "exploitabilityScore": 8.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-88"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:12.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "FE2A9F78-F313-44C4-B0C1-6901A3F897A6"}]}]}], "references": [{"url": "http://bilishim.com/2020/12/18/zero-hunting-2.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/4fcd3fe49332baab0e424225ad10b76b47ebcbac", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Dolibarr/dolibarr/releases", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://sourceforge.net/projects/dolibarr/", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/4fcd3fe49332baab0e424225ad10b76b47ebcbac"}}