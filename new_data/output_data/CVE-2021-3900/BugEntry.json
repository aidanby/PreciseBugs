{"buggy_code": ["<?php\n/**\n * CreateController.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Rule;\n\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Http\\Requests\\RuleFormRequest;\nuse FireflyIII\\Models\\Bill;\nuse FireflyIII\\Models\\Rule;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Models\\TransactionJournal;\nuse FireflyIII\\Repositories\\Rule\\RuleRepositoryInterface;\nuse FireflyIII\\Support\\Http\\Controllers\\ModelInformation;\nuse FireflyIII\\Support\\Http\\Controllers\\RuleManagement;\nuse FireflyIII\\Support\\Search\\SearchInterface;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\View\\View;\n\n/**\n * Class CreateController\n */\nclass CreateController extends Controller\n{\n    use RuleManagement, ModelInformation;\n\n    private RuleRepositoryInterface $ruleRepos;\n\n    /**\n     * RuleController constructor.\n     *\n     * @codeCoverageIgnore\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.rules'));\n                app('view')->share('mainTitleIcon', 'fa-random');\n\n                $this->ruleRepos = app(RuleRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request        $request\n     * @param RuleGroup|null $ruleGroup\n     *\n     * @return Factory|View\n     */\n    public function create(Request $request, RuleGroup $ruleGroup = null)\n    {\n        $this->createDefaultRuleGroup();\n        $preFilled   = [\n            'strict' => true,\n        ];\n        $oldTriggers = [];\n        $oldActions  = [];\n\n        // build triggers from query, if present.\n        $query = (string)$request->get('from_query');\n        if ('' !== $query) {\n            $search = app(SearchInterface::class);\n            $search->parseQuery($query);\n            $words     = $search->getWordsAsString();\n            $operators = $search->getOperators()->toArray();\n            if ('' !== $words) {\n                session()->flash('warning', trans('firefly.rule_from_search_words', ['string' => $words]));\n                array_push($operators, ['type' => 'description_contains', 'value' => $words]);\n            }\n            $oldTriggers = $this->parseFromOperators($operators);\n        }\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = count($oldTriggers);\n        $actionCount  = count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n        if (null !== $ruleGroup) {\n            $subTitle = (string)trans('firefly.make_new_rule', ['title' => $ruleGroup->title]);\n        }\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return prefixView(\n            'rules.rule.create',\n            compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'ruleGroup', 'subTitle')\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request $request\n     * @param Bill    $bill\n     *\n     * @return Factory|View\n     */\n    public function createFromBill(Request $request, Bill $bill)\n    {\n        $request->session()->flash('info', (string)trans('firefly.instructions_rule_from_bill', ['name' => e($bill->name)]));\n\n        $this->createDefaultRuleGroup();\n        $preFilled = [\n            'strict'      => true,\n            'title'       => (string)trans('firefly.new_rule_for_bill_title', ['name' => $bill->name]),\n            'description' => (string)trans('firefly.new_rule_for_bill_description', ['name' => $bill->name]),\n        ];\n\n        // make triggers and actions from the bill itself.\n\n        // get triggers and actions for bill:\n        $oldTriggers = $this->getTriggersForBill($bill);\n        $oldActions  = $this->getActionsForBill($bill);\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = count($oldTriggers);\n        $actionCount  = count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return prefixView(\n            'rules.rule.create',\n            compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'subTitle')\n        );\n    }\n\n    /**\n     * @param Request            $request\n     * @param TransactionJournal $journal\n     *\n     * @return Factory|\\Illuminate\\Contracts\\View\\View\n     */\n    public function createFromJournal(Request $request, TransactionJournal $journal)\n    {\n        $request->session()->flash('info', (string)trans('firefly.instructions_rule_from_journal', ['name' => e($journal->description)]));\n\n        $subTitleIcon = 'fa-clone';\n        $subTitle     = (string)trans('firefly.make_new_rule_no_group');\n\n        // get triggers and actions for journal.\n        $oldTriggers = $this->getTriggersForJournal($journal);\n        $oldActions  = [];\n\n        $this->createDefaultRuleGroup();\n\n        // collect pre-filled information:\n        $preFilled = [\n            'strict'      => true,\n            'title'       => (string)trans('firefly.new_rule_for_journal_title', ['description' => $journal->description]),\n            'description' => (string)trans('firefly.new_rule_for_journal_description', ['description' => $journal->description]),\n        ];\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = count($oldTriggers);\n        $actionCount  = count($oldActions);\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return prefixView(\n            'rules.rule.create',\n            compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'subTitle')\n        );\n    }\n\n    /**\n     * @param Rule $rule\n     *\n     * @return RedirectResponse\n     */\n    public function duplicate(Rule $rule): RedirectResponse\n    {\n        $newRule = $this->ruleRepos->duplicate($rule);\n\n        session()->flash('success', trans('firefly.duplicated_rule', ['title' => $rule->title, 'newTitle' => $newRule->title]));\n\n        return redirect(route('rules.index'));\n    }\n\n    /**\n     * Store the new rule.\n     *\n     * @param RuleFormRequest $request\n     *\n     * @return RedirectResponse|Redirector\n     *\n     */\n    public function store(RuleFormRequest $request)\n    {\n        $data = $request->getRuleData();\n        $rule = $this->ruleRepos->store($data);\n        session()->flash('success', (string)trans('firefly.stored_new_rule', ['title' => $rule->title]));\n        app('preferences')->mark();\n\n        // redirect to show bill.\n        if ('true' === $request->get('return_to_bill') && (int)$request->get('bill_id') > 0) {\n            return redirect(route('bills.show', [(int)$request->get('bill_id')]));\n        }\n\n        // redirect to new bill creation.\n        if ((int)$request->get('bill_id') > 0) {\n            return redirect($this->getPreviousUri('bills.create.uri'));\n        }\n\n        $redirect = redirect($this->getPreviousUri('rules.create.uri'));\n\n        if (1 === (int)$request->get('create_another')) {\n\n            session()->put('rules.create.fromStore', true);\n            $redirect = redirect(route('rules.create', [$data['rule_group_id']]))->withInput();\n\n        }\n\n        return $redirect;\n    }\n}\n", "<?php\n/**\n * EditController.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\RuleGroup;\n\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Http\\Requests\\RuleGroupFormRequest;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Repositories\\RuleGroup\\RuleGroupRepositoryInterface;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\View\\View;\n\n/**\n * Class EditController\n */\nclass EditController extends Controller\n{\n    private RuleGroupRepositoryInterface $repository;\n\n    /**\n     * EditController constructor.\n     *\n     * @codeCoverageIgnore\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.rules'));\n                app('view')->share('mainTitleIcon', 'fa-random');\n\n                $this->repository = app(RuleGroupRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Move a rule group down.\n     *\n     * @param RuleGroup $ruleGroup\n     *\n     * @return RedirectResponse|Redirector\n     */\n    public function down(RuleGroup $ruleGroup)\n    {\n        $maxOrder = $this->repository->maxOrder();\n        $order    = (int)$ruleGroup->order;\n        if ($order < $maxOrder) {\n            $newOrder = $order + 1;\n            $this->repository->setOrder($ruleGroup, $newOrder);\n        }\n\n        return redirect(route('rules.index'));\n    }\n\n    /**\n     * Edit a rule group.\n     *\n     * @param Request   $request\n     * @param RuleGroup $ruleGroup\n     *\n     * @return Factory|View\n     */\n    public function edit(Request $request, RuleGroup $ruleGroup)\n    {\n        $subTitle = (string)trans('firefly.edit_rule_group', ['title' => $ruleGroup->title]);\n\n        $hasOldInput = null !== $request->old('_token');\n        $preFilled   = [\n            'active' => $hasOldInput ? (bool)$request->old('active') : $ruleGroup->active,\n        ];\n        // put previous url in session if not redirect from store (not \"return_to_edit\").\n        if (true !== session('rule-groups.edit.fromUpdate')) {\n            $this->rememberPreviousUri('rule-groups.edit.uri');\n        }\n        session()->forget('rule-groups.edit.fromUpdate');\n        session()->flash('preFilled', $preFilled);\n\n        return prefixView('rules.rule-group.edit', compact('ruleGroup', 'subTitle'));\n    }\n\n    /**\n     * Move the rule group up.\n     *\n     * @param RuleGroup $ruleGroup\n     *\n     * @return RedirectResponse|Redirector\n     *\n     */\n    public function up(RuleGroup $ruleGroup)\n    {\n        $order = (int)$ruleGroup->order;\n        if ($order > 1) {\n            $newOrder = $order - 1;\n            $this->repository->setOrder($ruleGroup, $newOrder);\n        }\n\n        return redirect(route('rules.index'));\n    }\n\n    /**\n     * Update the rule group.\n     *\n     * @param RuleGroupFormRequest $request\n     * @param RuleGroup            $ruleGroup\n     *\n     * @return $this|RedirectResponse|Redirector\n     */\n    public function update(RuleGroupFormRequest $request, RuleGroup $ruleGroup)\n    {\n        $data = [\n            'title'       => $request->string('title'),\n            'description' => $request->stringWithNewlines('description'),\n            'active'      => 1 === (int)$request->input('active'),\n        ];\n\n        $this->repository->update($ruleGroup, $data);\n\n        session()->flash('success', (string)trans('firefly.updated_rule_group', ['title' => $ruleGroup->title]));\n        app('preferences')->mark();\n        $redirect = redirect($this->getPreviousUri('rule-groups.edit.uri'));\n        if (1 === (int)$request->get('return_to_edit')) {\n\n            session()->put('rule-groups.edit.fromUpdate', true);\n\n            $redirect = redirect(route('rule-groups.edit', [$ruleGroup->id]))->withInput(['return_to_edit' => 1]);\n\n        }\n\n        // redirect to previous URL.\n        return $redirect;\n    }\n\n}\n", "<?php\n/**\n * RuleGroupRepository.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\RuleGroup;\n\nuse Exception;\nuse FireflyIII\\Models\\Rule;\nuse FireflyIII\\Models\\RuleAction;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Models\\RuleTrigger;\nuse FireflyIII\\User;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Support\\Collection;\nuse Log;\n\n/**\n * Class RuleGroupRepository.\n */\nclass RuleGroupRepository implements RuleGroupRepositoryInterface\n{\n    private User $user;\n\n    /**\n     * @inheritDoc\n     */\n    public function correctRuleGroupOrder(): void\n    {\n        $set   = $this->user\n            ->ruleGroups()\n            ->orderBy('order', 'ASC')\n            ->orderBy('active', 'DESC')\n            ->orderBy('title', 'ASC')\n            ->get(['rule_groups.id']);\n        $index = 1;\n        /** @var RuleGroup $ruleGroup */\n        foreach ($set as $ruleGroup) {\n            if ($ruleGroup->order !== $index) {\n                $ruleGroup->order = $index;\n                $ruleGroup->save();\n            }\n            $index++;\n        }\n    }\n\n    /**\n     * @return int\n     */\n    public function count(): int\n    {\n        return $this->user->ruleGroups()->count();\n    }\n\n    /**\n     * @param RuleGroup      $ruleGroup\n     * @param RuleGroup|null $moveTo\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function destroy(RuleGroup $ruleGroup, ?RuleGroup $moveTo): bool\n    {\n        /** @var Rule $rule */\n        foreach ($ruleGroup->rules as $rule) {\n            if (null === $moveTo) {\n                $rule->delete();\n                continue;\n            }\n            // move\n            $rule->ruleGroup()->associate($moveTo);\n            $rule->save();\n        }\n\n        $ruleGroup->delete();\n\n        $this->resetOrder();\n        if (null !== $moveTo) {\n            $this->resetRuleOrder($moveTo);\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function destroyAll(): void\n    {\n        $groups = $this->get();\n        /** @var RuleGroup $group */\n        foreach ($groups as $group) {\n            $group->rules()->delete();\n            $group->delete();\n        }\n    }\n\n    /**\n     * @param int $ruleGroupId\n     *\n     * @return RuleGroup|null\n     */\n    public function find(int $ruleGroupId): ?RuleGroup\n    {\n        return $this->user->ruleGroups()->find($ruleGroupId);\n    }\n\n    /**\n     * @param string $title\n     *\n     * @return RuleGroup|null\n     */\n    public function findByTitle(string $title): ?RuleGroup\n    {\n        return $this->user->ruleGroups()->where('title', $title)->first();\n    }\n\n    /**\n     * @return Collection\n     */\n    public function get(): Collection\n    {\n        return $this->user->ruleGroups()->orderBy('order', 'ASC')->get();\n    }\n\n    /**\n     * @return Collection\n     */\n    public function getActiveGroups(): Collection\n    {\n        return $this->user->ruleGroups()->with(['rules'])->where('rule_groups.active', true)->orderBy('order', 'ASC')->get(['rule_groups.*']);\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getActiveRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->where('rules.active', true)\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getActiveStoreRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->leftJoin('rule_triggers', 'rules.id', '=', 'rule_triggers.rule_id')\n                     ->where('rule_triggers.trigger_type', 'user_action')\n                     ->where('rule_triggers.trigger_value', 'store-journal')\n                     ->where('rules.active', true)\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getActiveUpdateRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->leftJoin('rule_triggers', 'rules.id', '=', 'rule_triggers.rule_id')\n                     ->where('rule_triggers.trigger_type', 'user_action')\n                     ->where('rule_triggers.trigger_value', 'update-journal')\n                     ->where('rules.active', true)\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @param string|null $filter\n     *\n     * @return Collection\n     */\n    public function getAllRuleGroupsWithRules(?string $filter): Collection\n    {\n        $groups = $this->user->ruleGroups()\n                             ->orderBy('order', 'ASC')\n                             ->with(\n                                 [\n                                     'rules'              => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleTriggers' => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleActions'  => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                 ]\n                             )->get();\n        if (null === $filter) {\n            return $groups;\n        }\n        Log::debug(sprintf('Will filter getRuleGroupsWithRules on \"%s\".', $filter));\n\n        return $groups->map(\n            function (RuleGroup $group) use ($filter) {\n                Log::debug(sprintf('Now filtering group #%d', $group->id));\n                // filter the rules in the rule group:\n                $group->rules = $group->rules->filter(\n                    function (Rule $rule) use ($filter) {\n                        Log::debug(sprintf('Now filtering rule #%d', $rule->id));\n                        foreach ($rule->ruleTriggers as $trigger) {\n                            if ('user_action' === $trigger->trigger_type && $filter === $trigger->trigger_value) {\n                                Log::debug(sprintf('Rule #%d triggers on %s, include it.', $rule->id, $filter));\n\n                                return true;\n                            }\n                        }\n                        Log::debug(sprintf('Rule #%d does not trigger on %s, do not include it.', $rule->id, $filter));\n\n                        return false;\n                    }\n                );\n\n                return $group;\n            }\n        );\n    }\n\n    /**\n     * @return int\n     */\n    public function getHighestOrderRuleGroup(): int\n    {\n        $entry = $this->user->ruleGroups()->max('order');\n\n        return (int)$entry;\n    }\n\n    /**\n     * @param string|null $filter\n     *\n     * @return Collection\n     */\n    public function getRuleGroupsWithRules(?string $filter): Collection\n    {\n        $groups = $this->user->ruleGroups()\n                             ->orderBy('order', 'ASC')\n                             ->where('active', true)\n                             ->with(\n                                 [\n                                     'rules'              => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleTriggers' => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleActions'  => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                 ]\n                             )->get();\n        if (null === $filter) {\n            return $groups;\n        }\n        Log::debug(sprintf('Will filter getRuleGroupsWithRules on \"%s\".', $filter));\n\n        return $groups->map(\n            function (RuleGroup $group) use ($filter) {\n                Log::debug(sprintf('Now filtering group #%d', $group->id));\n                // filter the rules in the rule group:\n                $group->rules = $group->rules->filter(\n                    function (Rule $rule) use ($filter) {\n                        Log::debug(sprintf('Now filtering rule #%d', $rule->id));\n                        foreach ($rule->ruleTriggers as $trigger) {\n                            if ('user_action' === $trigger->trigger_type && $filter === $trigger->trigger_value) {\n                                Log::debug(sprintf('Rule #%d triggers on %s, include it.', $rule->id, $filter));\n\n                                return true;\n                            }\n                        }\n                        Log::debug(sprintf('Rule #%d does not trigger on %s, do not include it.', $rule->id, $filter));\n\n                        return false;\n                    }\n                );\n\n                return $group;\n            }\n        );\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function maxOrder(): int\n    {\n        return (int)$this->user->ruleGroups()->where('active', true)->max('order');\n    }\n\n    /**\n     * @return bool\n     */\n    public function resetOrder(): bool\n    {\n        $this->user->ruleGroups()->where('active', false)->update(['order' => 0]);\n        $set   = $this->user\n            ->ruleGroups()\n            ->where('active', true)\n            ->whereNull('deleted_at')\n            ->orderBy('order', 'ASC')\n            ->orderBy('title', 'DESC')\n            ->get();\n        $count = 1;\n        /** @var RuleGroup $entry */\n        foreach ($set as $entry) {\n            if ($entry->order !== $count) {\n                $entry->order = $count;\n                $entry->save();\n            }\n\n            // also update rules in group.\n            $this->resetRuleOrder($entry);\n\n            ++$count;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param RuleGroup $ruleGroup\n     *\n     * @return bool\n     */\n    public function resetRuleOrder(RuleGroup $ruleGroup): bool\n    {\n        $set   = $ruleGroup->rules()\n                           ->orderBy('order', 'ASC')\n                           ->where('active', true)\n                           ->orderBy('title', 'DESC')\n                           ->orderBy('updated_at', 'DESC')\n                           ->get(['rules.*']);\n        $count = 1;\n        /** @var Rule $entry */\n        foreach ($set as $entry) {\n            if ((int)$entry->order !== $count) {\n                Log::debug(sprintf('Rule #%d was on spot %d but must be on spot %d', $entry->id, $entry->order, $count));\n                $entry->order = $count;\n                $entry->save();\n            }\n            $this->resetRuleActionOrder($entry);\n            $this->resetRuleTriggerOrder($entry);\n\n            ++$count;\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function searchRuleGroup(string $query, int $limit): Collection\n    {\n        $search = $this->user->ruleGroups();\n        if ('' !== $query) {\n            $search->where('rule_groups.title', 'LIKE', sprintf('%%%s%%', $query));\n        }\n        $search->orderBy('rule_groups.order', 'ASC')\n               ->orderBy('rule_groups.title', 'ASC');\n\n        return $search->take($limit)->get(['id', 'title', 'description']);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function setOrder(RuleGroup $ruleGroup, int $newOrder): void\n    {\n        $oldOrder = (int)$ruleGroup->order;\n\n        if ($newOrder > $oldOrder) {\n            $this->user->ruleGroups()->where('rule_groups.order', '<=', $newOrder)->where('rule_groups.order', '>', $oldOrder)\n                       ->where('rule_groups.id', '!=', $ruleGroup->id)\n                       ->decrement('order');\n            $ruleGroup->order = $newOrder;\n            Log::debug(sprintf('Order of group #%d (\"%s\") is now %d', $ruleGroup->id, $ruleGroup->title, $newOrder));\n            $ruleGroup->save();\n\n            return;\n        }\n\n        $this->user->ruleGroups()->where('rule_groups.order', '>=', $newOrder)->where('rule_groups.order', '<', $oldOrder)\n                   ->where('rule_groups.id', '!=', $ruleGroup->id)\n                   ->increment('order');\n        $ruleGroup->order = $newOrder;\n        Log::debug(sprintf('Order of group #%d (\"%s\") is now %d', $ruleGroup->id, $ruleGroup->title, $newOrder));\n        $ruleGroup->save();\n    }\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void\n    {\n        $this->user = $user;\n    }\n\n    /**\n     * @param array $data\n     *\n     * @return RuleGroup\n     */\n    public function store(array $data): RuleGroup\n    {\n        $newRuleGroup = new RuleGroup(\n            [\n                'user_id'     => $this->user->id,\n                'title'       => $data['title'],\n                'description' => $data['description'],\n                'order'       => 31337,\n                'active'      => array_key_exists('active', $data) ? $data['active'] : true,\n            ]\n        );\n        $newRuleGroup->save();\n        $this->resetOrder();\n        if (array_key_exists('order', $data)) {\n            $this->setOrder($newRuleGroup, $data['order']);\n        }\n\n        return $newRuleGroup;\n    }\n\n    /**\n     * @param RuleGroup $ruleGroup\n     * @param array     $data\n     *\n     * @return RuleGroup\n     */\n    public function update(RuleGroup $ruleGroup, array $data): RuleGroup\n    {\n        // update the account:\n        if (array_key_exists('title', $data)) {\n            $ruleGroup->title = $data['title'];\n        }\n        if (array_key_exists('description', $data)) {\n            $ruleGroup->description = $data['description'];\n        }\n        if (array_key_exists('active', $data)) {\n            $ruleGroup->active = $data['active'];\n        }\n        // order\n        if (array_key_exists('order', $data) && $ruleGroup->order !== $data['order']) {\n            $this->resetOrder();\n            $this->setOrder($ruleGroup, (int)$data['order']);\n        }\n\n        $ruleGroup->save();\n\n        return $ruleGroup;\n    }\n\n    /**\n     * @param Rule $rule\n     */\n    private function resetRuleActionOrder(Rule $rule): void\n    {\n        $actions = $rule->ruleActions()\n                        ->orderBy('order', 'ASC')\n                        ->orderBy('active', 'DESC')\n                        ->orderBy('action_type', 'ASC')\n                        ->get();\n        $index   = 1;\n        /** @var RuleAction $action */\n        foreach ($actions as $action) {\n            if ((int)$action->order !== $index) {\n                $action->order = $index;\n                $action->save();\n                Log::debug(sprintf('Rule action #%d was on spot %d but must be on spot %d', $action->id, $action->order, $index));\n            }\n            $index++;\n        }\n    }\n\n    /**\n     * @param Rule $rule\n     */\n    private function resetRuleTriggerOrder(Rule $rule): void\n    {\n        $triggers = $rule->ruleTriggers()\n                         ->orderBy('order', 'ASC')\n                         ->orderBy('active', 'DESC')\n                         ->orderBy('trigger_type', 'ASC')\n                         ->get();\n        $index    = 1;\n        /** @var RuleTrigger $trigger */\n        foreach ($triggers as $trigger) {\n            $order = (int)$trigger->order;\n            if ($order !== $index) {\n                $trigger->order = $index;\n                $trigger->save();\n                Log::debug(sprintf('Rule trigger #%d was on spot %d but must be on spot %d', $trigger->id, $order, $index));\n            }\n            $index++;\n        }\n    }\n}\n", "/*\n * index.js\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n/** global: token */\nvar fixHelper = function (e, tr) {\n    \"use strict\";\n    var $originals = tr.children();\n    var $helper = tr.clone();\n    $helper.children().each(function (index) {\n        // Set helper cell sizes to match the original sizes\n        $(this).width($originals.eq(index).width());\n    });\n    return $helper;\n};\n\nfunction createCookie(name, value, days) {\n    \"use strict\";\n    var expires;\n\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = \"; expires=\" + date.toGMTString();\n    } else {\n        expires = \"\";\n    }\n    document.cookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value) + expires + \"; path=/\";\n}\n\nfunction readCookie(name) {\n    \"use strict\";\n    var nameEQ = encodeURIComponent(name) + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1, c.length);\n        }\n        if (c.indexOf(nameEQ) === 0) {\n            return decodeURIComponent(c.substring(nameEQ.length, c.length));\n        }\n    }\n    return null;\n}\n\n\n$(function () {\n      \"use strict\";\n      $('.group-rules').find('tbody').sortable(\n          {\n              helper: fixHelper,\n              stop: sortStop,\n              handle: '.rule-handle',\n              cursor: \"move\"\n          }\n      );\n\n      $('.rules-box').each(function (i, v) {\n          var box = $(v);\n          var groupId = box.data('group');\n          var cookieName = 'rule-box-collapse-' + groupId;\n          if ('collapsed' === readCookie(cookieName)) {\n              box.addClass('collapsed-box');\n              console.log('Box ' + groupId + ' is collapsed');\n              return;\n          }\n          console.log('Box ' + groupId + ' is not collapsed');\n      });\n\n      $('.rules-box').on('expanded.boxwidget', function (e) {\n          var box = $(e.currentTarget);\n          var groupId = box.data('group');\n          var cookieName = 'rule-box-collapse-' + groupId;\n          createCookie(cookieName, 'expanded', 90);\n          //console.log('Box ' + box.data('group') + ' is now expanded.');\n          //alert('hi!')\n      });\n\n      $('.rules-box').on('collapsed.boxwidget', function (e) {\n          var box = $(e.currentTarget);\n          var groupId = box.data('group');\n          var cookieName = 'rule-box-collapse-' + groupId;\n          createCookie(cookieName, 'collapsed', 90);\n          //console.log('Box ' + box.data('group') + ' is now collapsed.');\n          //alert('ho!')\n      });\n\n      //collapsed-box\n\n\n      // test rule triggers button:\n      $('.test_rule_triggers').click(testRuleTriggers);\n  }\n);\n\nfunction testRuleTriggers(e) {\n\n    var obj = $(e.target);\n    var ruleId = parseInt(obj.data('id'));\n    var icon = obj;\n    if (obj.prop(\"tagName\") === 'A') {\n        icon = $('span', obj);\n    }\n    // change icon:\n    icon.addClass('fa-spinner fa-spin').removeClass('fa-flask');\n\n    var modal = $(\"#testTriggerModal\");\n    // respond to modal:\n    modal.on('hide.bs.modal', function () {\n        disableRuleSpinners();\n    });\n\n    // Find a list of existing transactions that match these triggers\n    $.get('rules/test-rule/' + ruleId).done(function (data) {\n\n\n        // Set title and body\n        modal.find(\".transactions-list\").html(data.html);\n\n        // Show warning if appropriate\n        if (data.warning) {\n            modal.find(\".transaction-warning .warning-contents\").text(data.warning);\n            modal.find(\".transaction-warning\").show();\n        } else {\n            modal.find(\".transaction-warning\").hide();\n        }\n\n        // Show the modal dialog\n        modal.modal();\n    }).fail(function () {\n        alert('Cannot get transactions for given triggers.');\n        disableRuleSpinners();\n    });\n\n    return false;\n}\n\nfunction disableRuleSpinners() {\n    $('i.test_rule_triggers').removeClass('fa-spin fa-spinner').addClass('fa-flask');\n}\n\n\nfunction sortStop(event, ui) {\n    \"use strict\";\n\n    // resort / move rule\n    $.each($('.group-rules'), function (i, v) {\n        $.each($('tr.single-rule', $(v)), function (counter, value) {\n            var holder = $(value);\n            var position = parseInt(holder.data('position'));\n            var ruleGroupId = holder.data('group-id');\n            var ruleId = holder.data('id');\n            var originalOrder = parseInt(holder.data('order'));\n            var newOrder;\n\n            if (position === counter) {\n                // not changed, position is what it should be.\n                return;\n            }\n            if (position < counter) {\n                // position is less.\n                console.log('Rule #' + ruleId + ' moved down from position ' + originalOrder + ' to ' + (counter + 1));\n            }\n            if (position > counter) {\n                console.log('Rule #' + ruleId + ' moved up from position ' + originalOrder + ' to ' + (counter + 1));\n            }\n            // update position:\n            holder.data('position', counter);\n            newOrder = counter + 1;\n\n            $.post('rules/move-rule/' + ruleId + '/' + ruleGroupId, {order: newOrder, _token: token});\n        });\n    });\n\n\n}\n", "{% extends './v1/layout/default' %}\n{% block breadcrumbs %}\n    {{ Breadcrumbs.render(Route.getCurrentRoute.getName) }}\n{% endblock %}\n{% block content %}\n\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-sm-12\">\n            <p>\n                <a href=\"{{ route('rule-groups.create') }}\" id=\"new_rule_group\" class=\"btn btn-success\">{{ 'new_rule_group'|_ }}</a>\n            </p>\n        </div>\n    </div>\n\n    {% if ruleGroups|length == 1 and ruleGroups[0].rules.count() == 0 %}\n    {% include 'v1.partials.empty' with {objectType: 'default', type: 'rules',route: route('rules.create')} %}\n    {# make FF ignore demo for now. #}\n    {% set shownDemo = true %}\n    {% endif %}\n\n    {% for ruleGroup in ruleGroups %}\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12\">\n                <div class=\"box rules-box\" data-group=\"{{ ruleGroup.id }}\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">\n                            {% if ruleGroup.active %}\n                                {{ ruleGroup.title }}\n                            {% else %}\n                                <s>{{ ruleGroup.title }}</s> ({{ 'inactive'|_|lower }})\n                            {% endif %}\n                        </h3>\n\n\n                        <div class=\"box-tools pull-right\">\n                            <div class=\"btn-group\">\n                                <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\"><span class=\"fa fa-minus\"></span>\n                                </button>\n                                <button class=\"btn btn-box-tool dropdown-toggle\" data-toggle=\"dropdown\"><span\n                                            class=\"fa fa-ellipsis-v\"></span></button>\n                                <ul class=\"dropdown-menu\" role=\"menu\">\n                                    <li><a href=\"{{ route('rule-groups.edit',ruleGroup.id) }}\"><span class=\"fa fa-fw fa-pencil\"></span> {{ 'edit'|_ }}</a></li>\n                                    <li><a href=\"{{ route('rule-groups.delete',ruleGroup.id) }}\"><span class=\"fa fa-fw fa-trash\"></span> {{ 'delete'|_ }}</a></li>\n                                    <li><a href=\"{{ route('rule-groups.select-transactions',ruleGroup.id) }}\"><span\n                                                    class=\"fa fa-fw fa-power-off\"></span> {{ trans('firefly.apply_rule_group_selection', {title: ruleGroup.title}) }}\n                                        </a></li>\n                                    {% if ruleGroup.order > 1 %}\n                                        <li><a href=\"{{ route('rule-groups.up',ruleGroup.id) }}\"><span\n                                                        class=\"fa fa-fw fa-arrow-up\"></span> {{ 'move_rule_group_up'|_ }}</a></li>\n                                    {% endif %}\n                                    {% if ruleGroup.order < ruleGroups|length %}\n                                        <li><a href=\"{{ route('rule-groups.down',ruleGroup.id) }}\"><span\n                                                        class=\"fa fa-fw fa-arrow-down\"></span> {{ 'move_rule_group_down'|_ }}\n                                            </a></li>\n                                    {% endif %}\n                                </ul>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div class=\"box-body\">\n                        <p>\n                            <em>{{ ruleGroup.description }}</em>\n                        </p>\n\n                        {% if ruleGroup.rules.count() > 0 %}\n                            <table class=\"table table-hover table-striped group-rules\">\n                                <thead>\n                                <tr>\n                                    <th style=\"width:5%;\">&nbsp;</th>\n                                    <th style=\"width:10%;\">&nbsp;</th>\n                                    <th style=\"width:10%;\">&nbsp;</th>\n                                    <th style=\"width:25%;\">{{ 'rule_name'|_ }}</th>\n                                    <th style=\"width:25%;\" class=\"hidden-xs\">{{ 'rule_triggers'|_ }}</th>\n                                    <th style=\"width:25%;\" class=\"hidden-xs\">{{ 'rule_actions'|_ }}</th>\n                                </tr>\n                                </thead>\n                                <tbody class=\"rule-connected-list\">\n                                {% for rule in ruleGroup.rules %}\n                                    <tr class=\"single-rule\" data-order=\"{{ rule.order }}\"  data-id=\"{{ rule.id }}\" data-group-id=\"{{ ruleGroup.id }}\" data-position=\"{{ loop.index0 }}\">\n                                        <td>\n                                            <div class=\"btn-group btn-group-xs prio_buttons\">\n                                                <span class=\"fa fa-fw fa-bars rule-handle\"></span>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div class=\"btn-group btn-group-xs edit_buttons\">\n                                                <a title=\"{{ 'edit'|_ }}\" href=\"{{ route('rules.edit', rule.id) }}\"\n                                                   class=\"btn btn-default\"><span\n                                                            class=\"fa fa-fw fa-pencil\"></span></a>\n                                                <a title=\"{{ 'delete'|_ }}\"\n                                                   href=\"{{ route('rules.delete', rule.id) }}\"\n                                                   class=\"btn btn-danger\"><span\n                                                            class=\"fa fa-fw fa-trash\"></span></a>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div class=\"btn-group btn-group-xs test_buttons\">\n                                                {% if rule.active %}\n                                                    {# show which transactions would match #}\n                                                    <a href=\"{{ route('rules.search',rule.id) }}\" class=\"btn btn-default {% if false == rule.strict %}test_rule_triggers{% endif %}\" data-id=\"{{ rule.id }}\" title=\"{{ 'test_rule_triggers'|_ }}\"><span data-id=\"{{ rule.id }}\" class=\"fa fa-fw fa-flask\"></span></a>\n\n                                                    {# actually execute rule #}\n                                                <a href=\"{{ route('rules.select-transactions',rule.id) }}\" class=\"btn btn-default\" title=\" {{ trans('firefly.apply_rule_selection', {title: rule.title}) }}\"><span class=\"fa fa-fw fa-power-off \"></span></a>\n                                                {% endif %}\n\n                                                {# duplicate rule #}\n                                                <a href=\"{{ route('rules.duplicate',rule.id) }}\" class=\"btn btn-default\" title=\" {{ trans('firefly.duplicate_rule', {title: rule.title}) }}\"><span class=\"fa fa-fw fa-copy\"></span></a>\n                                            </div>\n                                        </td>\n                                        <td class=\"markdown\">\n                                            {% if rule.active %}\n                                                {{ rule.title }}\n                                            {% else %}\n                                                <s>{{ rule.title }}</s> ({{ 'inactive'|_|lower }})\n                                            {% endif %}\n                                            {% if rule.stop_processing %}\n                                                <span class=\"fa fa-stop-circle-o\"></span>\n                                            {% endif %}\n\n                                            {% if rule.description != \"\" %}\n                                                <small class=\"hidden-xs\"\n                                                        {% if not rule.active %}\n                                                            class=\"text-muted\"\n                                                        {% endif %}\n                                                ><br/>{{ rule.description|default('')|markdown }}</small>\n                                            {% endif %}\n                                            <small><br />{% if rule.strict %}<span class=\"text-danger\">{{ 'rule_is_strict'|_ }}</span>{% else %}<span class=\"text-success\">{{ 'rule_is_not_strict'|_ }}</span>{% endif %}</small>\n                                        </td>\n                                        <td class=\"hidden-xs\">\n                                            {% if rule.ruleTriggers.count() > 0 %}\n                                                <ul class=\"small\" data-id=\"{{ rule.id }}\">\n                                                    {% for trigger in rule.ruleTriggers %}\n                                                        {% if trigger.trigger_type != \"user_action\" %}\n                                                            <li\n                                                                    {% if not rule.active %}\n                                                                        class=\"text-muted\"\n                                                                    {% endif %}\n                                                                    data-id=\"{{ trigger.id }}\">\n                                                                {{ trans(('firefly.rule_trigger_' ~ getRootSearchOperator(trigger.trigger_type)), {trigger_value: trigger.trigger_value}) }}\n\n                                                                {% if trigger.stop_processing %}\n                                                                    <span class=\"fa fa-stop-circle-o\"></span>\n                                                                {% endif %}\n                                                            </li>\n                                                        {% endif %}\n                                                    {% endfor %}\n                                                </ul>\n                                            {% endif %}\n                                        </td>\n                                        <td class=\"hidden-xs\">\n                                            {% if rule.ruleActions.count() > 0 %}\n                                                <ul class=\"small\" data-id=\"{{ rule.id }}\">\n                                                    {% for action in rule.ruleActions %}\n                                                        <li\n                                                                {% if not rule.active %}\n                                                                    class=\"text-muted\"\n                                                                {% endif %}\n                                                                data-id=\"{{ action.id }}\">{{ trans(('firefly.rule_action_' ~ action.action_type), {action_value: action.action_value}) }}\n                                                            {% if action.stop_processing %}\n                                                                <span class=\"fa fa-stop-circle-o\"></span>\n                                                            {% endif %}\n                                                        </li>\n                                                    {% endfor %}\n                                                </ul>\n                                            {% endif %}\n                                        </td>\n                                    </tr>\n                                {% endfor %}\n                                </tbody>\n                            </table>\n                        {% else %}\n                            <p>\n                                <em>{{ 'no_rules_in_group'|_ }}</em>\n                            </p>\n                        {% endif %}\n                        <p>\n                            <br/>\n                            <a href=\"{{ route('rules.create', ruleGroup.id) }}\"\n                               class=\"btn btn-success new_rule\">{{ 'new_rule'|_ }}</a>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    {% endfor %}\n\n    {% include 'v1.rules.partials.test-trigger-modal' %}\n\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-sm-12\">\n            <a href=\"{{ route('rule-groups.create') }}\" class=\"btn btn-success\">{{ 'new_rule_group'|_ }}</a>\n        </div>\n    </div>\n\n{% endblock %}\n{% block scripts %}\n    <script type=\"text/javascript\" src=\"v1/js/lib/jquery-ui.min.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n    <script type=\"text/javascript\" src=\"v1/js/ff/rules/index.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n{% endblock %}\n", "<?php\n/**\n * web.php\n * Copyright (c) 2019 james@firefly-iii.org.\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nRoute::group(\n    ['namespace' => 'FireflyIII\\Http\\Controllers\\System',\n     'as'        => 'installer.', 'prefix' => 'install',],\n    static function () {\n        Route::get('', ['uses' => 'InstallController@index', 'as' => 'index']);\n        Route::post('runCommand', ['uses' => 'InstallController@runCommand', 'as' => 'runCommand']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'binders-only', 'namespace' => 'FireflyIII\\Http\\Controllers\\System', 'as' => 'cron.', 'prefix' => 'cron'],\n    static function () {\n        Route::get('run/{cliToken}', ['uses' => 'CronController@cron', 'as' => 'cron']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'binders-only',  'namespace' => 'FireflyIII\\Http\\Controllers\\System'],\n    static function () {\n        Route::get('offline', fn () => view('errors.offline'));\n        Route::get('health', ['uses' => 'HealthcheckController@check', 'as' => 'healthcheck']);\n    }\n);\n\n/**\n * These routes only work when the user is NOT logged in.\n */\nRoute::group(\n    ['middleware' => 'user-not-logged-in', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n\n    // Authentication Routes...\n        Route::get('login', ['uses' => 'Auth\\LoginController@showLoginForm', 'as' => 'login']);\n        Route::post('login', ['uses' => 'Auth\\LoginController@login', 'as' => 'login.post']);\n\n        // Registration Routes...\n        Route::get('register', ['uses' => 'Auth\\RegisterController@showRegistrationForm', 'as' => 'register']);\n        Route::post('register', 'Auth\\RegisterController@register');\n\n        // Password Reset Routes...\n        Route::get('password/reset/{token}', ['uses' => 'Auth\\ResetPasswordController@showResetForm', 'as' => 'password.reset']);\n        Route::post('password/email', ['uses' => 'Auth\\ForgotPasswordController@sendResetLinkEmail', 'as' => 'password.email']);\n        Route::post('password/reset', ['uses' => 'Auth\\ResetPasswordController@reset', 'as' => 'password.reset.post']);\n        Route::get('password/reset', ['uses' => 'Auth\\ForgotPasswordController@showLinkRequestForm', 'as' => 'password.reset.request']);\n\n        // Change email routes:\n        Route::get('profile/confirm-email-change/{token}', ['uses' => 'ProfileController@confirmEmailChange', 'as' => 'profile.confirm-email-change']);\n        Route::get('profile/undo-email-change/{token}/{oldAddressHash}', ['uses' => 'ProfileController@undoEmailChange', 'as' => 'profile.undo-email-change']);\n\n\n    }\n);\n\n/**\n * For some other routes, it is only relevant that the user is authenticated.\n */\nRoute::group(\n    ['middleware' => 'user-simple-auth', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('error', ['uses' => 'DebugController@displayError', 'as' => 'error']);\n        Route::any('logout', ['uses' => 'Auth\\LoginController@logout', 'as' => 'logout']);\n        Route::get('flush', ['uses' => 'DebugController@flush', 'as' => 'flush']);\n        //Route::get('routes', ['uses' => 'DebugController@routes', 'as' => 'routes']);\n        Route::get('debug', 'DebugController@index')->name('debug');\n    }\n);\n\n/**\n * For the two factor routes, the user must be logged in, but NOT 2FA. Account confirmation does not matter here.\n *\n */\nRoute::group(\n    ['middleware' => 'user-logged-in-no-2fa', 'prefix' => 'two-factor', 'as' => 'two-factor.', 'namespace' => 'FireflyIII\\Http\\Controllers\\Auth'],\n    static function () {\n        Route::post('submit', ['uses' => 'TwoFactorController@submitMFA', 'as' => 'submit']);\n        Route::get('lost', ['uses' => 'TwoFactorController@lostTwoFactor', 'as' => 'lost']); // can be removed when v2 is live.\n    }\n);\n\n/**\n * For all other routes, the user must be fully authenticated and have an activated account.\n */\n\n/**\n * Home Controller.\n */\nRoute::group(\n    ['middleware' => ['user-full-auth'], 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('/', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::get('/flash', ['uses' => 'DebugController@testFlash', 'as' => 'test-flash']);\n        Route::get('/home', ['uses' => 'HomeController@index', 'as' => 'home']);\n        Route::post('/daterange', ['uses' => 'HomeController@dateRange', 'as' => 'daterange']);\n    }\n);\n\n// show inactive\n\n/**\n * Account Controller.\n * DROP ME WHEN v2 hits\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'inactive-accounts', 'as' => 'accounts.'],\n    static function () {\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@inactive', 'as' => 'inactive.index'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n    }\n);\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'accounts', 'as' => 'accounts.'],\n    static function () {\n\n        // show:\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@index', 'as' => 'index'])->where('objectType', 'revenue|asset|expense|liabilities');\n\n        // create\n        Route::get('create/{objectType}', ['uses' => 'Account\\CreateController@create', 'as' => 'create'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n        Route::post('store', ['uses' => 'Account\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{account}', ['uses' => 'Account\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{account}', ['uses' => 'Account\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{account}', ['uses' => 'Account\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{account}', ['uses' => 'Account\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show\n        Route::get('show/{account}/all', ['uses' => 'Account\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{account}/{start_date?}/{end_date?}', ['uses' => 'Account\\ShowController@show', 'as' => 'show']);\n\n        // reconcile routes:\n        Route::get('reconcile/{account}/index/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@reconcile', 'as' => 'reconcile']);\n        Route::post('reconcile/{account}/submit/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@submit', 'as' => 'reconcile.submit']);\n\n        // reconcile JSON routes\n        Route::get('reconcile/{account}/overview/{start_date?}/{end_date?}', ['uses' => 'Json\\ReconcileController@overview', 'as' => 'reconcile.overview']);\n        Route::get(\n            'reconcile/{account}/transactions/{start_date?}/{end_date?}',\n            ['uses' => 'Json\\ReconcileController@transactions', 'as' => 'reconcile.transactions']\n        );\n    }\n);\n\n/**\n * Attachment Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'attachments', 'as' => 'attachments.'],\n    static function () {\n        Route::get('', ['uses' => 'AttachmentController@index', 'as' => 'index']);\n        Route::get('edit/{attachment}', ['uses' => 'AttachmentController@edit', 'as' => 'edit']);\n        Route::get('delete/{attachment}', ['uses' => 'AttachmentController@delete', 'as' => 'delete']);\n        Route::get('download/{attachment}', ['uses' => 'AttachmentController@download', 'as' => 'download']);\n        Route::get('view/{attachment}', ['uses' => 'AttachmentController@view', 'as' => 'view']);\n\n        Route::post('update/{attachment}', ['uses' => 'AttachmentController@update', 'as' => 'update']);\n        Route::post('destroy/{attachment}', ['uses' => 'AttachmentController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Bills Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'bills', 'as' => 'bills.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'subscriptions', 'as' => 'subscriptions.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budgets', 'as' => 'budgets.'],\n    static function () {\n\n    // delete\n        Route::get('delete/{budget}', ['uses' => 'Budget\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{budget}', ['uses' => 'Budget\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // create\n        Route::get('create', ['uses' => 'Budget\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{budget}', ['uses' => 'Budget\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{budget}', ['uses' => 'Budget\\EditController@update', 'as' => 'update']);\n\n        // show\n        Route::get('show/{budget}', ['uses' => 'Budget\\ShowController@show', 'as' => 'show']);\n        Route::get('show/{budget}/{budgetLimit}', ['uses' => 'Budget\\ShowController@showByBudgetLimit', 'as' => 'show.limit']);\n        Route::get('list/no-budget/all', ['uses' => 'Budget\\ShowController@noBudgetAll', 'as' => 'no-budget-all']);\n        Route::get('list/no-budget/{start_date?}/{end_date?}', ['uses' => 'Budget\\ShowController@noBudget', 'as' => 'no-budget']);\n\n        // reorder budgets\n        Route::post('reorder', ['uses' => 'Budget\\IndexController@reorder', 'as' => 'reorder']);\n\n        // index\n        Route::get('{start_date?}/{end_date?}', ['uses' => 'Budget\\IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * Available Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'available-budgets', 'as' => 'available-budgets.'],\n    static function () {\n\n        // create\n        Route::get('create/{start_date}/{end_date}/{currency?}', ['uses' => 'Budget\\AvailableBudgetController@create', 'as' => 'create']);\n        Route::get(\n            'create-alternative/{start_date}/{end_date}',\n            ['uses' => 'Budget\\AvailableBudgetController@createAlternative', 'as' => 'create-alternative']\n        );\n        Route::post('store', ['uses' => 'Budget\\AvailableBudgetController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@edit', 'as' => 'edit']);\n        Route::post('update/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@update', 'as' => 'update']);\n\n        Route::post('delete', ['uses' => 'Budget\\AvailableBudgetController@delete', 'as' => 'delete']);\n    }\n);\n\n/**\n * Budget Limit Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budget-limits', 'as' => 'budget-limits.'],\n    static function () {\n        Route::get('create/{budget}/{start_date}/{end_date}', ['uses' => 'Budget\\BudgetLimitController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\BudgetLimitController@store', 'as' => 'store']);\n\n        Route::post('delete/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@delete', 'as' => 'delete']);\n\n        Route::post('update/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'categories', 'as' => 'categories.'],\n    static function () {\n\n    // index:\n        Route::get('', ['uses' => 'Category\\IndexController@index', 'as' => 'index']);\n\n        // create\n        Route::get('create', ['uses' => 'Category\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Category\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{category}', ['uses' => 'Category\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{category}', ['uses' => 'Category\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{category}', ['uses' => 'Category\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{category}', ['uses' => 'Category\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show category:\n        Route::get('show/{category}/all', ['uses' => 'Category\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{category}/{start_date?}/{end_date?}', ['uses' => 'Category\\ShowController@show', 'as' => 'show']);\n\n        // no category controller:\n        Route::get('list/no-category/all', ['uses' => 'Category\\NoCategoryController@showAll', 'as' => 'no-category.all']);\n        Route::get('list/no-category/{start_date?}/{end_date?}', ['uses' => 'Category\\NoCategoryController@show', 'as' => 'no-category']);\n    }\n);\n\n/**\n * Currency Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'currencies', 'as' => 'currencies.'],\n    static function () {\n        Route::get('', ['uses' => 'CurrencyController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'CurrencyController@create', 'as' => 'create']);\n        Route::get('edit/{currency}', ['uses' => 'CurrencyController@edit', 'as' => 'edit']);\n        Route::get('delete/{currency}', ['uses' => 'CurrencyController@delete', 'as' => 'delete']);\n        Route::post('default', ['uses' => 'CurrencyController@defaultCurrency', 'as' => 'default']);\n        Route::post('enable', ['uses' => 'CurrencyController@enableCurrency', 'as' => 'enable']);\n        Route::post('disable', ['uses' => 'CurrencyController@disableCurrency', 'as' => 'disable']);\n\n        Route::post('store', ['uses' => 'CurrencyController@store', 'as' => 'store']);\n        Route::post('update/{currency}', ['uses' => 'CurrencyController@update', 'as' => 'update']);\n        Route::post('destroy/{currency}', ['uses' => 'CurrencyController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Chart\\Account Controller (default report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/account', 'as' => 'chart.account.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'AccountController@frontpage', 'as' => 'frontpage']);\n        Route::get('expense', ['uses' => 'AccountController@expenseAccounts', 'as' => 'expense']);\n        Route::get('revenue', ['uses' => 'AccountController@revenueAccounts', 'as' => 'revenue']);\n        Route::get('report/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@report', 'as' => 'report']);\n        Route::get('period/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@period', 'as' => 'period']);\n\n        Route::get('income-category/{account}/all/all', ['uses' => 'AccountController@incomeCategoryAll', 'as' => 'income-category-all']);\n        Route::get('expense-category/{account}/all/all', ['uses' => 'AccountController@expenseCategoryAll', 'as' => 'expense-category-all']);\n        Route::get('expense-budget/{account}/all/all', ['uses' => 'AccountController@expenseBudgetAll', 'as' => 'expense-budget-all']);\n\n        Route::get('income-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@incomeCategory', 'as' => 'income-category']);\n        Route::get('expense-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-budget/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseBudget', 'as' => 'expense-budget']);\n    }\n);\n\n/**\n * Chart\\Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/bill', 'as' => 'chart.bill.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BillController@frontpage', 'as' => 'frontpage']);\n        Route::get('single/{bill}', ['uses' => 'BillController@single', 'as' => 'single']);\n    }\n);\n\n/**\n * Chart\\Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/budget', 'as' => 'chart.budget.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BudgetController@frontpage', 'as' => 'frontpage']);\n        Route::get('period/0/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@periodNoBudget', 'as' => 'period.no-budget']);\n        Route::get('period/{budget}/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n        Route::get('budget/{budget}/{budgetLimit}', ['uses' => 'BudgetController@budgetLimit', 'as' => 'budget-limit']);\n        Route::get('budget/{budget}', ['uses' => 'BudgetController@budget', 'as' => 'budget']);\n\n        // these charts are used in budget/show:\n        Route::get('expense-category/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-asset/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseAsset', 'as' => 'expense-asset']);\n        Route::get('expense-expense/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseExpense', 'as' => 'expense-expense']);\n\n        // these charts are used in reports (category reports):\n        Route::get(\n            'category/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@sourceAccountExpense', 'as' => 'source-account-expense']\n        );\n        Route::get(\n            'destination-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@destinationAccountExpense', 'as' => 'destination-account-expense']\n        );\n        Route::get('operations/{accountList}/{budget}/{start_date}/{end_date}', ['uses' => 'BudgetReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/category', 'as' => 'chart.category.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'CategoryController@frontPage', 'as' => 'frontpage']);\n        Route::get('period/{category}', ['uses' => 'CategoryController@currentPeriod', 'as' => 'current']);\n        Route::get('period/{category}/{date}', ['uses' => 'CategoryController@specificPeriod', 'as' => 'specific']);\n        Route::get('all/{category}', ['uses' => 'CategoryController@all', 'as' => 'all']);\n        Route::get(\n            'report-period/0/{accountList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@reportPeriodNoCategory', 'as' => 'period.no-category']\n        );\n        Route::get('report-period/{category}/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@reportPeriod', 'as' => 'period']);\n\n        Route::get(\n            'category/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceExpense', 'as' => 'source-expense']\n        );\n        Route::get(\n            'source/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceIncome', 'as' => 'source-income']\n        );\n        Route::get(\n            'dest/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationExpense', 'as' => 'dest-expense']\n        );\n        Route::get(\n            'dest/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationIncome', 'as' => 'dest-income']\n        );\n        Route::get('operations/{accountList}/{category}/{start_date}/{end_date}', ['uses' => 'CategoryReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/tag', 'as' => 'chart.tag.'],\n    static function () {\n        Route::get('tag/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagIncome', 'as' => 'tag-income']);\n        Route::get(\n            'category/expense/{accountList}/{tagList}/{start_date}/{end_date}',\n            ['uses' => 'TagReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get('category/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@categoryIncome', 'as' => 'category-income']);\n        Route::get('budget/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@budgetExpense', 'as' => 'budget-expense']);\n        Route::get('source/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceExpense', 'as' => 'source-expense']);\n        Route::get('source/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceIncome', 'as' => 'source-income']);\n        Route::get('dest/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationExpense', 'as' => 'dest-expense']);\n        Route::get('dest/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationIncome', 'as' => 'dest-income']);\n\n        Route::get('operations/{accountList}/{tag}/{start_date}/{end_date}', ['uses' => 'TagReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Double Controller (for expense/revenue report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/double', 'as' => 'chart.double.'],\n    static function () {\n        Route::get('main/{accountList}/{account}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@mainChart', 'as' => 'main']);\n\n        Route::get(\n            'category/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n\n        Route::get('tag/expense/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagIncome', 'as' => 'tag-income']);\n    }\n);\n\n/**\n * Chart\\PiggyBank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/piggy-bank', 'as' => 'chart.piggy-bank.'],\n    static function () {\n        Route::get('{piggyBank}', ['uses' => 'PiggyBankController@history', 'as' => 'history']);\n    }\n);\n\n/**\n * Chart\\Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/report', 'as' => 'chart.report.'],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@operations', 'as' => 'operations']);\n        Route::get('net-worth/{accountList}/{start_date}/{end_date}/', ['uses' => 'ReportController@netWorth', 'as' => 'net-worth']);\n    }\n);\n\n/**\n * Chart\\Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/transactions', 'as' => 'chart.transactions.'],\n    static function () {\n        Route::get('categories/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@categories', 'as' => 'categories']);\n        Route::get('budgets/{start_date}/{end_date}', ['uses' => 'TransactionController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'destinationAccounts/{objectType}/{start_date}/{end_date}',\n            ['uses' => 'TransactionController@destinationAccounts', 'as' => 'destinationAccounts']\n        );\n        Route::get('sourceAccounts/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@sourceAccounts', 'as' => 'sourceAccounts']);\n        //\n    }\n);\n\n/**\n * Export controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'export', 'as' => 'export.'],\n    static function () {\n\n    // index\n        Route::get('', ['uses' => 'Export\\IndexController@index', 'as' => 'index']);\n        Route::post('export', ['uses' => 'Export\\IndexController@export', 'as' => 'export']);\n    }\n);\n/**\n * Object group controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'groups', 'as' => 'object-groups.'],\n    static function () {\n\n        // index\n        Route::get('', ['uses' => 'ObjectGroup\\IndexController@index', 'as' => 'index']);\n        Route::post('set-order/{objectGroup}', ['uses' => 'ObjectGroup\\IndexController@setOrder', 'as' => 'set-order']);\n\n        // edit\n        Route::get('edit/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Help Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'help', 'as' => 'help.'],\n    static function () {\n        Route::get('{route}', ['uses' => 'HelpController@show', 'as' => 'show']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v1/jscript', 'as' => 'javascript.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variables', 'as' => 'variables']);\n        Route::get('accounts', ['uses' => 'JavascriptController@accounts', 'as' => 'accounts']);\n        Route::get('currencies', ['uses' => 'JavascriptController@currencies', 'as' => 'currencies']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v2/jscript', 'as' => 'javascript.v2.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variablesV2', 'as' => 'variables']);\n    }\n);\n\n/**\n * JSON Controller(s).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'json', 'as' => 'json.'],\n    static function () {\n\n        // budgets:\n        Route::get(\n            'budget/total-budgeted/{currency}/{start_date}/{end_date}',\n            ['uses' => 'Json\\BudgetController@getBudgetInformation', 'as' => 'budget.total-budgeted']\n        );\n        // boxes\n        Route::get('box/balance', ['uses' => 'Json\\BoxController@balance', 'as' => 'box.balance']);\n        Route::get('box/available', ['uses' => 'Json\\BoxController@available', 'as' => 'box.available']);\n        Route::get('box/net-worth', ['uses' => 'Json\\BoxController@netWorth', 'as' => 'box.net-worth']);\n\n        // rules\n        Route::get('trigger', ['uses' => 'Json\\RuleController@trigger', 'as' => 'trigger']);\n        Route::get('action', ['uses' => 'Json\\RuleController@action', 'as' => 'action']);\n\n        // front page\n        Route::get('frontpage/piggy-banks', ['uses' => 'Json\\FrontpageController@piggyBanks', 'as' => 'fp.piggy-banks']);\n\n        // currency conversion:\n        Route::get('rate/{fromCurrencyCode}/{toCurrencyCode}/{date}', ['uses' => 'Json\\ExchangeController@getRate', 'as' => 'rate']);\n\n        // intro things:\n        Route::any('intro/finished/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postFinished', 'as' => 'intro.finished']);\n        Route::post('intro/enable/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postEnable', 'as' => 'intro.enable']);\n        Route::get('intro/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@getIntroSteps', 'as' => 'intro']);\n    }\n);\n\n/**\n * NewUser Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'new-user', 'as' => 'new-user.'],\n    static function () {\n        Route::get('', ['uses' => 'NewUserController@index', 'as' => 'index']);\n        Route::post('submit', ['uses' => 'NewUserController@submit', 'as' => 'submit']);\n    }\n);\n\n/**\n * Piggy Bank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'piggy-banks', 'as' => 'piggy-banks.'],\n    static function () {\n\n        Route::get('', ['uses' => 'PiggyBank\\IndexController@index', 'as' => 'index']);\n        Route::get('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@add', 'as' => 'add-money']);\n        Route::get('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@remove', 'as' => 'remove-money']);\n        Route::get('add-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@addMobile', 'as' => 'add-money-mobile']);\n        Route::get('remove-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@removeMobile', 'as' => 'remove-money-mobile']);\n        Route::get('create', ['uses' => 'PiggyBank\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{piggyBank}', ['uses' => 'PiggyBank\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{piggyBank}', ['uses' => 'PiggyBank\\ShowController@show', 'as' => 'show']);\n        Route::post('store', ['uses' => 'PiggyBank\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{piggyBank}', ['uses' => 'PiggyBank\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postAdd', 'as' => 'add']);\n        Route::post('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postRemove', 'as' => 'remove']);\n\n        Route::post('set-order/{piggyBank}', ['uses' => 'PiggyBank\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Preferences Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'preferences', 'as' => 'preferences.'],\n    static function () {\n        Route::get('', ['uses' => 'PreferencesController@index', 'as' => 'index']);\n        Route::post('', ['uses' => 'PreferencesController@postIndex', 'as' => 'update']);\n    }\n);\n\n/**\n * Profile Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'profile', 'as' => 'profile.'],\n    static function () {\n        Route::get('', ['uses' => 'ProfileController@index', 'as' => 'index']);\n        Route::get('change-email', ['uses' => 'ProfileController@changeEmail', 'as' => 'change-email']);\n        Route::get('change-password', ['uses' => 'ProfileController@changePassword', 'as' => 'change-password']);\n        Route::get('delete-account', ['uses' => 'ProfileController@deleteAccount', 'as' => 'delete-account']);\n\n        Route::post('delete-account', ['uses' => 'ProfileController@postDeleteAccount', 'as' => 'delete-account.post']);\n        Route::post('change-password', ['uses' => 'ProfileController@postChangePassword', 'as' => 'change-password.post']);\n        Route::post('change-email', ['uses' => 'ProfileController@postChangeEmail', 'as' => 'change-email.post']);\n        Route::post('regenerate', ['uses' => 'ProfileController@regenerate', 'as' => 'regenerate']);\n\n        Route::get('logout-others', ['uses' => 'ProfileController@logoutOtherSessions', 'as' => 'logout-others']);\n        Route::post('logout-others', ['uses' => 'ProfileController@postLogoutOtherSessions', 'as' => 'logout-others.post']);\n\n        // new 2FA routes\n        Route::post('enable2FA', ['uses' => 'ProfileController@enable2FA', 'as' => 'enable2FA']);\n        Route::get('2fa/code', ['uses' => 'ProfileController@code', 'as' => 'code']);\n        Route::post('2fa/code', ['uses' => 'ProfileController@postCode', 'as' => 'code.store']);\n        Route::get('/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\n        Route::get('2fa/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\n\n    }\n);\n\n/**\n * Recurring Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'recurring', 'as' => 'recurring.'],\n    static function () {\n        Route::get('', ['uses' => 'Recurring\\IndexController@index', 'as' => 'index']);\n\n        Route::get('show/{recurrence}', ['uses' => 'Recurring\\ShowController@show', 'as' => 'show']);\n        Route::get('create', ['uses' => 'Recurring\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-transaction/{tj}', ['uses' => 'Recurring\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::get('edit/{recurrence}', ['uses' => 'Recurring\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{recurrence}', ['uses' => 'Recurring\\DeleteController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'Recurring\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{recurrence}', ['uses' => 'Recurring\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{recurrence}', ['uses' => 'Recurring\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // JSON routes:\n        Route::get('events', ['uses' => 'Json\\RecurrenceController@events', 'as' => 'events']);\n        Route::get('suggest', ['uses' => 'Json\\RecurrenceController@suggest', 'as' => 'suggest']);\n    }\n);\n\n/**\n * Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'reports', 'as' => 'reports.'],\n    static function () {\n        Route::get('', ['uses' => 'ReportController@index', 'as' => 'index']);\n        Route::get('options/{reportType}', ['uses' => 'ReportController@options', 'as' => 'options']);\n        Route::get('default/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@defaultReport', 'as' => 'report.default']);\n        Route::get('audit/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@auditReport', 'as' => 'report.audit']);\n        Route::get('category/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'ReportController@categoryReport', 'as' => 'report.category']);\n        Route::get('budget/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'ReportController@budgetReport', 'as' => 'report.budget']);\n        Route::get('tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'ReportController@tagReport', 'as' => 'report.tag']);\n        Route::get('double/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'ReportController@doubleReport', 'as' => 'report.double']);\n\n        Route::post('', ['uses' => 'ReportController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Report Data AccountController.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/account', 'as' => 'report-data.account.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/bill', 'as' => 'report-data.bills.'],\n    static function () {\n        Route::get('overview/{accountList}/{start_date}/{end_date}', ['uses' => 'BillController@overview', 'as' => 'overview']);\n    }\n);\n\n/**\n * Report Double Data Expense / Revenue Account Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/double', 'as' => 'report-data.double.'],\n    static function () {\n\n        // spent + earned per combination.\n        Route::get('operations/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operations', 'as' => 'operations']);\n        Route::get('ops-asset/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operationsPerAsset', 'as' => 'ops-asset']);\n\n        Route::get('top-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Income/Expenses Controller (called financial operations).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/operations',\n     'as'         => 'report-data.operations.',],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@expenses', 'as' => 'expenses']);\n    }\n);\n\n/**\n * Report Data Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/category',\n     'as'         => 'report-data.category.',],\n    static function () {\n\n// See reference nr. 3\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@expenses', 'as' => 'expenses']);\n\n        Route::get('accounts/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@accounts', 'as' => 'accounts']);\n        Route::get('categories/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@categories', 'as' => 'categories']);\n        Route::get(\n            'account-per-category/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@accountPerCategory', 'as' => 'account-per-category']\n        );\n\n        Route::get('top-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data TAG Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/tag',\n     'as'         => 'report-data.tag.',],\n    static function () {\n        Route::get('accounts/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accounts', 'as' => 'accounts']);\n        Route::get('tags/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@tags', 'as' => 'tags']);\n        Route::get('account-per-tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accountPerTag', 'as' => 'account-per-tag']);\n\n        Route::get('top-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Balance Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/balance', 'as' => 'report-data.balance.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'BalanceController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/budget', 'as' => 'report-data.budget.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}/', ['uses' => 'BudgetController@general', 'as' => 'general']);\n// See reference nr. 4\n        Route::get('period/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n\n        Route::get('accounts/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@accounts', 'as' => 'accounts']);\n        Route::get('budgets/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'account-per-budget/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetController@accountPerBudget', 'as' => 'account-per-budget']\n        );\n        Route::get('top-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@avgExpenses', 'as' => 'avg-expenses']);\n    }\n);\n\n/**\n * Rules Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rules', 'as' => 'rules.'],\n    static function () {\n\n    // create controller\n        Route::get('create/{ruleGroup?}', ['uses' => 'Rule\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-bill/{bill}', ['uses' => 'Rule\\CreateController@createFromBill', 'as' => 'create-from-bill']);\n        Route::get('create-from-journal/{tj}', ['uses' => 'Rule\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::post('store', ['uses' => 'Rule\\CreateController@store', 'as' => 'store']);\n        Route::get('duplicate/{rule}', ['uses' => 'Rule\\CreateController@duplicate', 'as' => 'duplicate']);\n\n        // delete controller\n        Route::get('delete/{rule}', ['uses' => 'Rule\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{rule}', ['uses' => 'Rule\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // index controller\n        Route::get('', ['uses' => 'Rule\\IndexController@index', 'as' => 'index']);\n\n        Route::post('move-rule/{rule}/{ruleGroup}', ['uses' => 'Rule\\IndexController@moveRule', 'as' => 'move-rule']);\n        // select controller\n        Route::get('test', ['uses' => 'Rule\\SelectController@testTriggers', 'as' => 'test-triggers']);\n        Route::get('test-rule/{rule}', ['uses' => 'Rule\\SelectController@testTriggersByRule', 'as' => 'test-triggers-rule']);\n        Route::get('search/{rule}', ['uses' => 'Rule\\IndexController@search', 'as' => 'search']);\n        Route::get('select/{rule}', ['uses' => 'Rule\\SelectController@selectTransactions', 'as' => 'select-transactions']);\n        Route::post('execute/{rule}', ['uses' => 'Rule\\SelectController@execute', 'as' => 'execute']);\n\n        // edit controller\n        Route::get('edit/{rule}', ['uses' => 'Rule\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{rule}', ['uses' => 'Rule\\EditController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Rule Groups Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rule-groups', 'as' => 'rule-groups.'],\n    static function () {\n        Route::get('create', ['uses' => 'RuleGroup\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('up/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@up', 'as' => 'up']);\n        Route::get('down/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@down', 'as' => 'down']);\n        Route::get('select/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@selectTransactions', 'as' => 'select-transactions']);\n\n        Route::post('store', ['uses' => 'RuleGroup\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('execute/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@execute', 'as' => 'execute']);\n    }\n);\n\n/**\n * Search Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'search', 'as' => 'search.'],\n    static function () {\n        Route::get('', ['uses' => 'SearchController@index', 'as' => 'index']);\n        Route::any('search', ['uses' => 'SearchController@search', 'as' => 'search']);\n    }\n);\n\n/**\n * Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'tags', 'as' => 'tags.'],\n    static function () {\n        Route::get('', ['uses' => 'TagController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'TagController@create', 'as' => 'create']);\n\n        Route::get('show/{tagOrId}/all', ['uses' => 'TagController@showAll', 'as' => 'show.all']);\n        Route::get('show/{tagOrId}/{start_date?}/{end_date?}', ['uses' => 'TagController@show', 'as' => 'show']);\n\n        Route::get('edit/{tag}', ['uses' => 'TagController@edit', 'as' => 'edit']);\n        Route::get('delete/{tag}', ['uses' => 'TagController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'TagController@store', 'as' => 'store']);\n        Route::post('update/{tag}', ['uses' => 'TagController@update', 'as' => 'update']);\n        Route::post('destroy/{tag}', ['uses' => 'TagController@destroy', 'as' => 'destroy']);\n        Route::post('mass-destroy', ['uses' => 'TagController@massDestroy', 'as' => 'mass-destroy']);\n    }\n);\n\n/**\n * Transaction Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'transactions', 'as' => 'transactions.'],\n    static function () {\n\n    // show groups:\n// See reference nr. 5\n        Route::get('{what}/all', ['uses' => 'Transaction\\IndexController@indexAll', 'as' => 'index.all'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        Route::get('{what}/{start_date?}/{end_date?}', ['uses' => 'Transaction\\IndexController@index', 'as' => 'index'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        // create group:\n        Route::get('create/{objectType}', ['uses' => 'Transaction\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Transaction\\CreateController@store', 'as' => 'store']);\n\n        // clone group\n        Route::post('clone', ['uses' => 'Transaction\\CreateController@cloneGroup', 'as' => 'clone']);\n\n        // edit group\n        Route::get('edit/{transactionGroup}', ['uses' => 'Transaction\\EditController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'Transaction\\EditController@update', 'as' => 'update']);\n\n        // delete group\n        Route::get('delete/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::get('show/{transactionGroup}', ['uses' => 'Transaction\\ShowController@show', 'as' => 'show']);\n        Route::get('debug/{transactionGroup}', ['uses' => 'Transaction\\ShowController@debugShow', 'as' => 'debug']);\n    }\n);\n\n/**\n * Transaction Mass Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/mass', 'as' => 'transactions.mass.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'MassController@edit', 'as' => 'edit']);\n        Route::get('delete/{journalList}', ['uses' => 'MassController@delete', 'as' => 'delete']);\n        Route::post('update', ['uses' => 'MassController@update', 'as' => 'update']);\n        Route::post('destroy', ['uses' => 'MassController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Transaction Bulk Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/bulk', 'as' => 'transactions.bulk.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'BulkController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'BulkController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Transaction Convert Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/convert',\n     'as'         => 'transactions.convert.',],\n    static function () {\n        Route::get('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@index', 'as' => 'index']);\n        Route::post('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Transaction Link Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/link', 'as' => 'transactions.link.'],\n    static function () {\n        Route::get('modal/{tj}', ['uses' => 'LinkController@modal', 'as' => 'modal']);\n\n// See reference nr. 6\n        Route::post('store/{tj}', ['uses' => 'LinkController@store', 'as' => 'store']);\n        Route::get('delete/{journalLink}', ['uses' => 'LinkController@delete', 'as' => 'delete']);\n        Route::get('switch/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\n\n        Route::post('destroy/{journalLink}', ['uses' => 'LinkController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Report Popup Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Popup', 'prefix' => 'popup', 'as' => 'popup.'],\n    static function () {\n        Route::get('general', ['uses' => 'ReportController@general', 'as' => 'general']);\n    }\n);\n\n/*\n * Webhooks management\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Webhooks', 'prefix' => 'webhooks', 'as' => 'webhooks.'],\n    static function () {\n        Route::get('index', ['uses' => 'IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * For the admin routes, the user must be logged in and have the role of 'owner'.\n */\nRoute::group(\n    ['middleware' => 'admin', 'namespace' => 'FireflyIII\\Http\\Controllers\\Admin', 'prefix' => 'admin', 'as' => 'admin.'],\n    static function () {\n\n    // admin home\n        Route::get('', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::post('test-message', ['uses' => 'HomeController@testMessage', 'as' => 'test-message']);\n\n        // check for updates?\n        Route::get('update-check', ['uses' => 'UpdateController@index', 'as' => 'update-check']);\n        Route::any('update-check/manual', ['uses' => 'UpdateController@updateCheck', 'as' => 'update-check.manual']);\n        Route::post('update-check', ['uses' => 'UpdateController@post', 'as' => 'update-check.post']);\n\n        // user manager\n        Route::get('users', ['uses' => 'UserController@index', 'as' => 'users']);\n        Route::get('users/edit/{user}', ['uses' => 'UserController@edit', 'as' => 'users.edit']);\n        Route::get('users/delete/{user}', ['uses' => 'UserController@delete', 'as' => 'users.delete']);\n        Route::get('users/show/{user}', ['uses' => 'UserController@show', 'as' => 'users.show']);\n\n        Route::post('users/update/{user}', ['uses' => 'UserController@update', 'as' => 'users.update']);\n        Route::post('users/destroy/{user}', ['uses' => 'UserController@destroy', 'as' => 'users.destroy']);\n\n        // journal links manager\n        Route::get('links', ['uses' => 'LinkController@index', 'as' => 'links.index']);\n        Route::get('links/create', ['uses' => 'LinkController@create', 'as' => 'links.create']);\n        Route::get('links/show/{linkType}', ['uses' => 'LinkController@show', 'as' => 'links.show']);\n        Route::get('links/edit/{linkType}', ['uses' => 'LinkController@edit', 'as' => 'links.edit']);\n        Route::get('links/delete/{linkType}', ['uses' => 'LinkController@delete', 'as' => 'links.delete']);\n\n        Route::post('links/store', ['uses' => 'LinkController@store', 'as' => 'links.store']);\n        Route::post('links/update/{linkType}', ['uses' => 'LinkController@update', 'as' => 'links.update']);\n        Route::post('links/destroy/{linkType}', ['uses' => 'LinkController@destroy', 'as' => 'links.destroy']);\n\n        // FF configuration:\n        Route::get('configuration', ['uses' => 'ConfigurationController@index', 'as' => 'configuration.index']);\n        Route::post('configuration', ['uses' => 'ConfigurationController@postIndex', 'as' => 'configuration.index.post']);\n    }\n);\n"], "fixing_code": ["<?php\n/**\n * CreateController.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Rule;\n\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Http\\Requests\\RuleFormRequest;\nuse FireflyIII\\Models\\Bill;\nuse FireflyIII\\Models\\Rule;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Models\\TransactionJournal;\nuse FireflyIII\\Repositories\\Rule\\RuleRepositoryInterface;\nuse FireflyIII\\Support\\Http\\Controllers\\ModelInformation;\nuse FireflyIII\\Support\\Http\\Controllers\\RuleManagement;\nuse FireflyIII\\Support\\Search\\SearchInterface;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\View\\View;\n\n/**\n * Class CreateController\n */\nclass CreateController extends Controller\n{\n    use RuleManagement, ModelInformation;\n\n    private RuleRepositoryInterface $ruleRepos;\n\n    /**\n     * RuleController constructor.\n     *\n     * @codeCoverageIgnore\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.rules'));\n                app('view')->share('mainTitleIcon', 'fa-random');\n\n                $this->ruleRepos = app(RuleRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request        $request\n     * @param RuleGroup|null $ruleGroup\n     *\n     * @return Factory|View\n     */\n    public function create(Request $request, RuleGroup $ruleGroup = null)\n    {\n        $this->createDefaultRuleGroup();\n        $preFilled   = [\n            'strict' => true,\n        ];\n        $oldTriggers = [];\n        $oldActions  = [];\n\n        // build triggers from query, if present.\n        $query = (string)$request->get('from_query');\n        if ('' !== $query) {\n            $search = app(SearchInterface::class);\n            $search->parseQuery($query);\n            $words     = $search->getWordsAsString();\n            $operators = $search->getOperators()->toArray();\n            if ('' !== $words) {\n                session()->flash('warning', trans('firefly.rule_from_search_words', ['string' => $words]));\n                array_push($operators, ['type' => 'description_contains', 'value' => $words]);\n            }\n            $oldTriggers = $this->parseFromOperators($operators);\n        }\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = count($oldTriggers);\n        $actionCount  = count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n        if (null !== $ruleGroup) {\n            $subTitle = (string)trans('firefly.make_new_rule', ['title' => $ruleGroup->title]);\n        }\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return prefixView(\n            'rules.rule.create',\n            compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'ruleGroup', 'subTitle')\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request $request\n     * @param Bill    $bill\n     *\n     * @return Factory|View\n     */\n    public function createFromBill(Request $request, Bill $bill)\n    {\n        $request->session()->flash('info', (string)trans('firefly.instructions_rule_from_bill', ['name' => e($bill->name)]));\n\n        $this->createDefaultRuleGroup();\n        $preFilled = [\n            'strict'      => true,\n            'title'       => (string)trans('firefly.new_rule_for_bill_title', ['name' => $bill->name]),\n            'description' => (string)trans('firefly.new_rule_for_bill_description', ['name' => $bill->name]),\n        ];\n\n        // make triggers and actions from the bill itself.\n\n        // get triggers and actions for bill:\n        $oldTriggers = $this->getTriggersForBill($bill);\n        $oldActions  = $this->getActionsForBill($bill);\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = count($oldTriggers);\n        $actionCount  = count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return prefixView(\n            'rules.rule.create',\n            compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'subTitle')\n        );\n    }\n\n    /**\n     * @param Request            $request\n     * @param TransactionJournal $journal\n     *\n     * @return Factory|\\Illuminate\\Contracts\\View\\View\n     */\n    public function createFromJournal(Request $request, TransactionJournal $journal)\n    {\n        $request->session()->flash('info', (string)trans('firefly.instructions_rule_from_journal', ['name' => e($journal->description)]));\n\n        $subTitleIcon = 'fa-clone';\n        $subTitle     = (string)trans('firefly.make_new_rule_no_group');\n\n        // get triggers and actions for journal.\n        $oldTriggers = $this->getTriggersForJournal($journal);\n        $oldActions  = [];\n\n        $this->createDefaultRuleGroup();\n\n        // collect pre-filled information:\n        $preFilled = [\n            'strict'      => true,\n            'title'       => (string)trans('firefly.new_rule_for_journal_title', ['description' => $journal->description]),\n            'description' => (string)trans('firefly.new_rule_for_journal_description', ['description' => $journal->description]),\n        ];\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = count($oldTriggers);\n        $actionCount  = count($oldActions);\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return prefixView(\n            'rules.rule.create',\n            compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'subTitle')\n        );\n    }\n\n    /**\n     * @param Rule $rule\n     *\n     * @return JsonResponse\n     */\n    public function duplicate(Request $request): JsonResponse\n    {\n        $ruleId = (int)$request->get('id');\n        $rule   = $this->ruleRepos->find($ruleId);\n        if (null !== $rule) {\n            $this->ruleRepos->duplicate($rule);\n        }\n\n        return new JsonResponse(['OK']);\n    }\n\n    /**\n     * Store the new rule.\n     *\n     * @param RuleFormRequest $request\n     *\n     * @return RedirectResponse|Redirector\n     *\n     */\n    public function store(RuleFormRequest $request)\n    {\n        $data = $request->getRuleData();\n        $rule = $this->ruleRepos->store($data);\n        session()->flash('success', (string)trans('firefly.stored_new_rule', ['title' => $rule->title]));\n        app('preferences')->mark();\n\n        // redirect to show bill.\n        if ('true' === $request->get('return_to_bill') && (int)$request->get('bill_id') > 0) {\n            return redirect(route('bills.show', [(int)$request->get('bill_id')]));\n        }\n\n        // redirect to new bill creation.\n        if ((int)$request->get('bill_id') > 0) {\n            return redirect($this->getPreviousUri('bills.create.uri'));\n        }\n\n        $redirect = redirect($this->getPreviousUri('rules.create.uri'));\n\n        if (1 === (int)$request->get('create_another')) {\n\n            session()->put('rules.create.fromStore', true);\n            $redirect = redirect(route('rules.create', [$data['rule_group_id']]))->withInput();\n\n        }\n\n        return $redirect;\n    }\n}\n", "<?php\n/**\n * EditController.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\RuleGroup;\n\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Http\\Requests\\RuleGroupFormRequest;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Repositories\\RuleGroup\\RuleGroupRepositoryInterface;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\View\\View;\n\n/**\n * Class EditController\n */\nclass EditController extends Controller\n{\n    private RuleGroupRepositoryInterface $repository;\n\n    /**\n     * EditController constructor.\n     *\n     * @codeCoverageIgnore\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.rules'));\n                app('view')->share('mainTitleIcon', 'fa-random');\n\n                $this->repository = app(RuleGroupRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Move a rule group in either direction.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function moveGroup(Request $request): JsonResponse\n    {\n        $groupId = (int)$request->get('id');\n        $ruleGroup= $this->repository->find($groupId);\n        if(null !== $ruleGroup) {\n            $direction = $request->get('direction');\n            if('down' === $direction) {\n                $maxOrder = $this->repository->maxOrder();\n                $order    = (int)$ruleGroup->order;\n                if ($order < $maxOrder) {\n                    $newOrder = $order + 1;\n                    $this->repository->setOrder($ruleGroup, $newOrder);\n                }\n            }\n            if('up' === $direction) {\n                $order = (int)$ruleGroup->order;\n                if ($order > 1) {\n                    $newOrder = $order - 1;\n                    $this->repository->setOrder($ruleGroup, $newOrder);\n                }\n            }\n        }\n        return new JsonResponse(['OK']);\n    }\n\n\n    /**\n     * Edit a rule group.\n     *\n     * @param Request   $request\n     * @param RuleGroup $ruleGroup\n     *\n     * @return Factory|View\n     */\n    public function edit(Request $request, RuleGroup $ruleGroup)\n    {\n        $subTitle = (string)trans('firefly.edit_rule_group', ['title' => $ruleGroup->title]);\n\n        $hasOldInput = null !== $request->old('_token');\n        $preFilled   = [\n            'active' => $hasOldInput ? (bool)$request->old('active') : $ruleGroup->active,\n        ];\n        // put previous url in session if not redirect from store (not \"return_to_edit\").\n        if (true !== session('rule-groups.edit.fromUpdate')) {\n            $this->rememberPreviousUri('rule-groups.edit.uri');\n        }\n        session()->forget('rule-groups.edit.fromUpdate');\n        session()->flash('preFilled', $preFilled);\n\n        return prefixView('rules.rule-group.edit', compact('ruleGroup', 'subTitle'));\n    }\n\n    /**\n     * Update the rule group.\n     *\n     * @param RuleGroupFormRequest $request\n     * @param RuleGroup            $ruleGroup\n     *\n     * @return $this|RedirectResponse|Redirector\n     */\n    public function update(RuleGroupFormRequest $request, RuleGroup $ruleGroup)\n    {\n        $data = [\n            'title'       => $request->string('title'),\n            'description' => $request->stringWithNewlines('description'),\n            'active'      => 1 === (int)$request->input('active'),\n        ];\n\n        $this->repository->update($ruleGroup, $data);\n\n        session()->flash('success', (string)trans('firefly.updated_rule_group', ['title' => $ruleGroup->title]));\n        app('preferences')->mark();\n        $redirect = redirect($this->getPreviousUri('rule-groups.edit.uri'));\n        if (1 === (int)$request->get('return_to_edit')) {\n\n            session()->put('rule-groups.edit.fromUpdate', true);\n\n            $redirect = redirect(route('rule-groups.edit', [$ruleGroup->id]))->withInput(['return_to_edit' => 1]);\n\n        }\n\n        // redirect to previous URL.\n        return $redirect;\n    }\n\n}\n", "<?php\n/**\n * RuleGroupRepository.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\RuleGroup;\n\nuse Exception;\nuse FireflyIII\\Models\\Rule;\nuse FireflyIII\\Models\\RuleAction;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Models\\RuleTrigger;\nuse FireflyIII\\User;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Support\\Collection;\nuse Log;\n\n/**\n * Class RuleGroupRepository.\n */\nclass RuleGroupRepository implements RuleGroupRepositoryInterface\n{\n    private User $user;\n\n    /**\n     * @inheritDoc\n     */\n    public function correctRuleGroupOrder(): void\n    {\n        $set   = $this->user\n            ->ruleGroups()\n            ->orderBy('order', 'ASC')\n            ->orderBy('active', 'DESC')\n            ->orderBy('title', 'ASC')\n            ->get(['rule_groups.id']);\n        $index = 1;\n        /** @var RuleGroup $ruleGroup */\n        foreach ($set as $ruleGroup) {\n            if ($ruleGroup->order !== $index) {\n                $ruleGroup->order = $index;\n                $ruleGroup->save();\n            }\n            $index++;\n        }\n    }\n\n    /**\n     * @return int\n     */\n    public function count(): int\n    {\n        return $this->user->ruleGroups()->count();\n    }\n\n    /**\n     * @param RuleGroup      $ruleGroup\n     * @param RuleGroup|null $moveTo\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function destroy(RuleGroup $ruleGroup, ?RuleGroup $moveTo): bool\n    {\n        /** @var Rule $rule */\n        foreach ($ruleGroup->rules as $rule) {\n            if (null === $moveTo) {\n                $rule->delete();\n                continue;\n            }\n            // move\n            $rule->ruleGroup()->associate($moveTo);\n            $rule->save();\n        }\n\n        $ruleGroup->delete();\n\n        $this->resetOrder();\n        if (null !== $moveTo) {\n            $this->resetRuleOrder($moveTo);\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function destroyAll(): void\n    {\n        $groups = $this->get();\n        /** @var RuleGroup $group */\n        foreach ($groups as $group) {\n            $group->rules()->delete();\n            $group->delete();\n        }\n    }\n\n    /**\n     * @param int $ruleGroupId\n     *\n     * @return RuleGroup|null\n     */\n    public function find(int $ruleGroupId): ?RuleGroup\n    {\n        return $this->user->ruleGroups()->find($ruleGroupId);\n    }\n\n    /**\n     * @param string $title\n     *\n     * @return RuleGroup|null\n     */\n    public function findByTitle(string $title): ?RuleGroup\n    {\n        return $this->user->ruleGroups()->where('title', $title)->first();\n    }\n\n    /**\n     * @return Collection\n     */\n    public function get(): Collection\n    {\n        return $this->user->ruleGroups()->orderBy('order', 'ASC')->get();\n    }\n\n    /**\n     * @return Collection\n     */\n    public function getActiveGroups(): Collection\n    {\n        return $this->user->ruleGroups()->with(['rules'])->where('rule_groups.active', true)->orderBy('order', 'ASC')->get(['rule_groups.*']);\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getActiveRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->where('rules.active', true)\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getActiveStoreRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->leftJoin('rule_triggers', 'rules.id', '=', 'rule_triggers.rule_id')\n                     ->where('rule_triggers.trigger_type', 'user_action')\n                     ->where('rule_triggers.trigger_value', 'store-journal')\n                     ->where('rules.active', true)\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getActiveUpdateRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->leftJoin('rule_triggers', 'rules.id', '=', 'rule_triggers.rule_id')\n                     ->where('rule_triggers.trigger_type', 'user_action')\n                     ->where('rule_triggers.trigger_value', 'update-journal')\n                     ->where('rules.active', true)\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @param string|null $filter\n     *\n     * @return Collection\n     */\n    public function getAllRuleGroupsWithRules(?string $filter): Collection\n    {\n        $groups = $this->user->ruleGroups()\n                             ->orderBy('order', 'ASC')\n                             ->with(\n                                 [\n                                     'rules'              => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleTriggers' => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleActions'  => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                 ]\n                             )->get();\n        if (null === $filter) {\n            return $groups;\n        }\n        Log::debug(sprintf('Will filter getRuleGroupsWithRules on \"%s\".', $filter));\n\n        return $groups->map(\n            function (RuleGroup $group) use ($filter) {\n                Log::debug(sprintf('Now filtering group #%d', $group->id));\n                // filter the rules in the rule group:\n                $group->rules = $group->rules->filter(\n                    function (Rule $rule) use ($filter) {\n                        Log::debug(sprintf('Now filtering rule #%d', $rule->id));\n                        foreach ($rule->ruleTriggers as $trigger) {\n                            if ('user_action' === $trigger->trigger_type && $filter === $trigger->trigger_value) {\n                                Log::debug(sprintf('Rule #%d triggers on %s, include it.', $rule->id, $filter));\n\n                                return true;\n                            }\n                        }\n                        Log::debug(sprintf('Rule #%d does not trigger on %s, do not include it.', $rule->id, $filter));\n\n                        return false;\n                    }\n                );\n\n                return $group;\n            }\n        );\n    }\n\n    /**\n     * @return int\n     */\n    public function getHighestOrderRuleGroup(): int\n    {\n        $entry = $this->user->ruleGroups()->max('order');\n\n        return (int)$entry;\n    }\n\n    /**\n     * @param string|null $filter\n     *\n     * @return Collection\n     */\n    public function getRuleGroupsWithRules(?string $filter): Collection\n    {\n        $groups = $this->user->ruleGroups()\n                             ->orderBy('order', 'ASC')\n                             ->where('active', true)\n                             ->with(\n                                 [\n                                     'rules'              => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleTriggers' => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                     'rules.ruleActions'  => static function (HasMany $query) {\n                                         $query->orderBy('order', 'ASC');\n                                     },\n                                 ]\n                             )->get();\n        if (null === $filter) {\n            return $groups;\n        }\n        Log::debug(sprintf('Will filter getRuleGroupsWithRules on \"%s\".', $filter));\n\n        return $groups->map(\n            function (RuleGroup $group) use ($filter) {\n                Log::debug(sprintf('Now filtering group #%d', $group->id));\n                // filter the rules in the rule group:\n                $group->rules = $group->rules->filter(\n                    function (Rule $rule) use ($filter) {\n                        Log::debug(sprintf('Now filtering rule #%d', $rule->id));\n                        foreach ($rule->ruleTriggers as $trigger) {\n                            if ('user_action' === $trigger->trigger_type && $filter === $trigger->trigger_value) {\n                                Log::debug(sprintf('Rule #%d triggers on %s, include it.', $rule->id, $filter));\n\n                                return true;\n                            }\n                        }\n                        Log::debug(sprintf('Rule #%d does not trigger on %s, do not include it.', $rule->id, $filter));\n\n                        return false;\n                    }\n                );\n\n                return $group;\n            }\n        );\n    }\n\n    /**\n     * @param RuleGroup $group\n     *\n     * @return Collection\n     */\n    public function getRules(RuleGroup $group): Collection\n    {\n        return $group->rules()\n                     ->get(['rules.*']);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function maxOrder(): int\n    {\n        return (int)$this->user->ruleGroups()->where('active', true)->max('order');\n    }\n\n    /**\n     * @return bool\n     */\n    public function resetOrder(): bool\n    {\n        $set   = $this->user\n            ->ruleGroups()\n            ->whereNull('deleted_at')\n            ->orderBy('order', 'ASC')\n            ->orderBy('title', 'DESC')\n            ->get();\n        $count = 1;\n        /** @var RuleGroup $entry */\n        foreach ($set as $entry) {\n            if ($entry->order !== $count) {\n                $entry->order = $count;\n                $entry->save();\n            }\n\n            // also update rules in group.\n            $this->resetRuleOrder($entry);\n\n            ++$count;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param RuleGroup $ruleGroup\n     *\n     * @return bool\n     */\n    public function resetRuleOrder(RuleGroup $ruleGroup): bool\n    {\n        $set   = $ruleGroup->rules()\n                           ->orderBy('order', 'ASC')\n                           ->orderBy('title', 'DESC')\n                           ->orderBy('updated_at', 'DESC')\n                           ->get(['rules.*']);\n        $count = 1;\n        /** @var Rule $entry */\n        foreach ($set as $entry) {\n            if ((int)$entry->order !== $count) {\n                Log::debug(sprintf('Rule #%d was on spot %d but must be on spot %d', $entry->id, $entry->order, $count));\n                $entry->order = $count;\n                $entry->save();\n            }\n            $this->resetRuleActionOrder($entry);\n            $this->resetRuleTriggerOrder($entry);\n\n            ++$count;\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function searchRuleGroup(string $query, int $limit): Collection\n    {\n        $search = $this->user->ruleGroups();\n        if ('' !== $query) {\n            $search->where('rule_groups.title', 'LIKE', sprintf('%%%s%%', $query));\n        }\n        $search->orderBy('rule_groups.order', 'ASC')\n               ->orderBy('rule_groups.title', 'ASC');\n\n        return $search->take($limit)->get(['id', 'title', 'description']);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function setOrder(RuleGroup $ruleGroup, int $newOrder): void\n    {\n        $oldOrder = (int)$ruleGroup->order;\n\n        if ($newOrder > $oldOrder) {\n            $this->user->ruleGroups()->where('rule_groups.order', '<=', $newOrder)->where('rule_groups.order', '>', $oldOrder)\n                       ->where('rule_groups.id', '!=', $ruleGroup->id)\n                       ->decrement('order');\n            $ruleGroup->order = $newOrder;\n            Log::debug(sprintf('Order of group #%d (\"%s\") is now %d', $ruleGroup->id, $ruleGroup->title, $newOrder));\n            $ruleGroup->save();\n\n            return;\n        }\n\n        $this->user->ruleGroups()->where('rule_groups.order', '>=', $newOrder)->where('rule_groups.order', '<', $oldOrder)\n                   ->where('rule_groups.id', '!=', $ruleGroup->id)\n                   ->increment('order');\n        $ruleGroup->order = $newOrder;\n        Log::debug(sprintf('Order of group #%d (\"%s\") is now %d', $ruleGroup->id, $ruleGroup->title, $newOrder));\n        $ruleGroup->save();\n    }\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void\n    {\n        $this->user = $user;\n    }\n\n    /**\n     * @param array $data\n     *\n     * @return RuleGroup\n     */\n    public function store(array $data): RuleGroup\n    {\n        $newRuleGroup = new RuleGroup(\n            [\n                'user_id'     => $this->user->id,\n                'title'       => $data['title'],\n                'description' => $data['description'],\n                'order'       => 31337,\n                'active'      => array_key_exists('active', $data) ? $data['active'] : true,\n            ]\n        );\n        $newRuleGroup->save();\n        $this->resetOrder();\n        if (array_key_exists('order', $data)) {\n            $this->setOrder($newRuleGroup, $data['order']);\n        }\n\n        return $newRuleGroup;\n    }\n\n    /**\n     * @param RuleGroup $ruleGroup\n     * @param array     $data\n     *\n     * @return RuleGroup\n     */\n    public function update(RuleGroup $ruleGroup, array $data): RuleGroup\n    {\n        // update the account:\n        if (array_key_exists('title', $data)) {\n            $ruleGroup->title = $data['title'];\n        }\n        if (array_key_exists('description', $data)) {\n            $ruleGroup->description = $data['description'];\n        }\n        if (array_key_exists('active', $data)) {\n            $ruleGroup->active = $data['active'];\n        }\n        // order\n        if (array_key_exists('order', $data) && $ruleGroup->order !== $data['order']) {\n            $this->resetOrder();\n            $this->setOrder($ruleGroup, (int)$data['order']);\n        }\n\n        $ruleGroup->save();\n\n        return $ruleGroup;\n    }\n\n    /**\n     * @param Rule $rule\n     */\n    private function resetRuleActionOrder(Rule $rule): void\n    {\n        $actions = $rule->ruleActions()\n                        ->orderBy('order', 'ASC')\n                        ->orderBy('active', 'DESC')\n                        ->orderBy('action_type', 'ASC')\n                        ->get();\n        $index   = 1;\n        /** @var RuleAction $action */\n        foreach ($actions as $action) {\n            if ((int)$action->order !== $index) {\n                $action->order = $index;\n                $action->save();\n                Log::debug(sprintf('Rule action #%d was on spot %d but must be on spot %d', $action->id, $action->order, $index));\n            }\n            $index++;\n        }\n    }\n\n    /**\n     * @param Rule $rule\n     */\n    private function resetRuleTriggerOrder(Rule $rule): void\n    {\n        $triggers = $rule->ruleTriggers()\n                         ->orderBy('order', 'ASC')\n                         ->orderBy('active', 'DESC')\n                         ->orderBy('trigger_type', 'ASC')\n                         ->get();\n        $index    = 1;\n        /** @var RuleTrigger $trigger */\n        foreach ($triggers as $trigger) {\n            $order = (int)$trigger->order;\n            if ($order !== $index) {\n                $trigger->order = $index;\n                $trigger->save();\n                Log::debug(sprintf('Rule trigger #%d was on spot %d but must be on spot %d', $trigger->id, $order, $index));\n            }\n            $index++;\n        }\n    }\n}\n", "/*\n * index.js\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n/** global: token */\nvar fixHelper = function (e, tr) {\n    \"use strict\";\n    var $originals = tr.children();\n    var $helper = tr.clone();\n    $helper.children().each(function (index) {\n        // Set helper cell sizes to match the original sizes\n        $(this).width($originals.eq(index).width());\n    });\n    return $helper;\n};\n\nfunction createCookie(name, value, days) {\n    \"use strict\";\n    var expires;\n\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = \"; expires=\" + date.toGMTString();\n    } else {\n        expires = \"\";\n    }\n    document.cookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value) + expires + \"; path=/\";\n}\n\nfunction readCookie(name) {\n    \"use strict\";\n    var nameEQ = encodeURIComponent(name) + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1, c.length);\n        }\n        if (c.indexOf(nameEQ) === 0) {\n            return decodeURIComponent(c.substring(nameEQ.length, c.length));\n        }\n    }\n    return null;\n}\n\nfunction moveRuleGroup(e) {\n    let box = $(e.currentTarget);\n    var direction = box.data('direction');\n    var groupId = box.data('id');\n\n    $.post(moveRuleGroupUrl, {_token: token, direction: direction, id: groupId}).then(function () {\n        location.reload();\n    }).fail(function() {\n        alert('I failed :(');\n    });\n\n    return false;\n}\n\nfunction duplicateRule(e) {\n    let box = $(e.currentTarget);\n    var ruleId = box.data('id');\n    $.post(duplicateRuleUrl, {_token: token, id: ruleId}).then(function () {\n        location.reload();\n    }).fail(function() {\n        alert('I failed :(');\n    });\n\n    return false;\n}\n\n\n$(function () {\n      \"use strict\";\n      $('.group-rules').find('tbody').sortable(\n          {\n              helper: fixHelper,\n              stop: sortStop,\n              handle: '.rule-handle',\n              cursor: \"move\"\n          }\n      );\n\n      $('.move-group').click(moveRuleGroup);\n      $('.duplicate-rule').click(duplicateRule);\n\n      $('.rules-box').each(function (i, v) {\n          var box = $(v);\n          var groupId = box.data('group');\n          var cookieName = 'rule-box-collapse-' + groupId;\n          if ('collapsed' === readCookie(cookieName)) {\n              box.addClass('collapsed-box');\n              console.log('Box ' + groupId + ' is collapsed');\n              return;\n          }\n          console.log('Box ' + groupId + ' is not collapsed');\n      });\n\n      $('.rules-box').on('expanded.boxwidget', function (e) {\n          var box = $(e.currentTarget);\n          var groupId = box.data('group');\n          var cookieName = 'rule-box-collapse-' + groupId;\n          createCookie(cookieName, 'expanded', 90);\n          //console.log('Box ' + box.data('group') + ' is now expanded.');\n          //alert('hi!')\n      });\n\n      $('.rules-box').on('collapsed.boxwidget', function (e) {\n          var box = $(e.currentTarget);\n          var groupId = box.data('group');\n          var cookieName = 'rule-box-collapse-' + groupId;\n          createCookie(cookieName, 'collapsed', 90);\n          //console.log('Box ' + box.data('group') + ' is now collapsed.');\n          //alert('ho!')\n      });\n\n      //collapsed-box\n\n\n      // test rule triggers button:\n      $('.test_rule_triggers').click(testRuleTriggers);\n  }\n);\n\nfunction testRuleTriggers(e) {\n\n    var obj = $(e.target);\n    var ruleId = parseInt(obj.data('id'));\n    var icon = obj;\n    if (obj.prop(\"tagName\") === 'A') {\n        icon = $('span', obj);\n    }\n    // change icon:\n    icon.addClass('fa-spinner fa-spin').removeClass('fa-flask');\n\n    var modal = $(\"#testTriggerModal\");\n    // respond to modal:\n    modal.on('hide.bs.modal', function () {\n        disableRuleSpinners();\n    });\n\n    // Find a list of existing transactions that match these triggers\n    $.get('rules/test-rule/' + ruleId).done(function (data) {\n\n\n        // Set title and body\n        modal.find(\".transactions-list\").html(data.html);\n\n        // Show warning if appropriate\n        if (data.warning) {\n            modal.find(\".transaction-warning .warning-contents\").text(data.warning);\n            modal.find(\".transaction-warning\").show();\n        } else {\n            modal.find(\".transaction-warning\").hide();\n        }\n\n        // Show the modal dialog\n        modal.modal();\n    }).fail(function () {\n        alert('Cannot get transactions for given triggers.');\n        disableRuleSpinners();\n    });\n\n    return false;\n}\n\nfunction disableRuleSpinners() {\n    $('i.test_rule_triggers').removeClass('fa-spin fa-spinner').addClass('fa-flask');\n}\n\n\nfunction sortStop(event, ui) {\n    \"use strict\";\n\n    // resort / move rule\n    $.each($('.group-rules'), function (i, v) {\n        $.each($('tr.single-rule', $(v)), function (counter, value) {\n            var holder = $(value);\n            var position = parseInt(holder.data('position'));\n            var ruleGroupId = holder.data('group-id');\n            var ruleId = holder.data('id');\n            var originalOrder = parseInt(holder.data('order'));\n            var newOrder;\n\n            if (position === counter) {\n                // not changed, position is what it should be.\n                return;\n            }\n            if (position < counter) {\n                // position is less.\n                console.log('Rule #' + ruleId + ' moved down from position ' + originalOrder + ' to ' + (counter + 1));\n            }\n            if (position > counter) {\n                console.log('Rule #' + ruleId + ' moved up from position ' + originalOrder + ' to ' + (counter + 1));\n            }\n            // update position:\n            holder.data('position', counter);\n            newOrder = counter + 1;\n\n            $.post('rules/move-rule/' + ruleId + '/' + ruleGroupId, {order: newOrder, _token: token});\n        });\n    });\n\n\n}\n", "{% extends './v1/layout/default' %}\n{% block breadcrumbs %}\n    {{ Breadcrumbs.render(Route.getCurrentRoute.getName) }}\n{% endblock %}\n{% block content %}\n\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-sm-12\">\n            <p>\n                <a href=\"{{ route('rule-groups.create') }}\" id=\"new_rule_group\" class=\"btn btn-success\">{{ 'new_rule_group'|_ }}</a>\n            </p>\n        </div>\n    </div>\n\n    {% if ruleGroups|length == 1 and ruleGroups[0].rules.count() == 0 %}\n    {% include 'v1.partials.empty' with {objectType: 'default', type: 'rules',route: route('rules.create')} %}\n    {# make FF ignore demo for now. #}\n    {% set shownDemo = true %}\n    {% endif %}\n\n    {% for ruleGroup in ruleGroups %}\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12\">\n                <div class=\"box rules-box\" data-group=\"{{ ruleGroup.id }}\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">\n                            {% if ruleGroup.active %}\n                                {{ ruleGroup.title }}\n                            {% else %}\n                                <s>{{ ruleGroup.title }}</s> ({{ 'inactive'|_|lower }})\n                            {% endif %}\n                        </h3>\n\n\n                        <div class=\"box-tools pull-right\">\n                            <div class=\"btn-group\">\n                                <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\"><span class=\"fa fa-minus\"></span>\n                                </button>\n                                <button class=\"btn btn-box-tool dropdown-toggle\" data-toggle=\"dropdown\"><span\n                                            class=\"fa fa-ellipsis-v\"></span></button>\n                                <ul class=\"dropdown-menu\" role=\"menu\">\n                                    <li><a href=\"{{ route('rule-groups.edit',ruleGroup.id) }}\"><span class=\"fa fa-fw fa-pencil\"></span> {{ 'edit'|_ }}</a></li>\n                                    <li><a href=\"{{ route('rule-groups.delete',ruleGroup.id) }}\"><span class=\"fa fa-fw fa-trash\"></span> {{ 'delete'|_ }}</a></li>\n                                    <li><a href=\"{{ route('rule-groups.select-transactions',ruleGroup.id) }}\"><span\n                                                    class=\"fa fa-fw fa-power-off\"></span> {{ trans('firefly.apply_rule_group_selection', {title: ruleGroup.title}) }}\n                                        </a></li>\n                                    {% if ruleGroup.order > 1 %}\n                                        <li><a href=\"#\" class=\"move-group\" data-direction=\"up\" data-id=\"{{ ruleGroup.id }}\"><span\n                                                        class=\"fa fa-fw fa-arrow-up\"></span> {{ 'move_rule_group_up'|_ }}</a></li>\n                                    {% endif %}\n                                    {% if ruleGroup.order < ruleGroups|length %}\n                                        <li><a href=\"#\" class=\"move-group\" data-direction=\"down\" data-id=\"{{ ruleGroup.id }}\"><span\n                                                        class=\"fa fa-fw fa-arrow-down\"></span> {{ 'move_rule_group_down'|_ }}\n                                            </a></li>\n                                    {% endif %}\n                                </ul>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div class=\"box-body\">\n                        <p>\n                            <em>{{ ruleGroup.description }}</em>\n                        </p>\n\n                        {% if ruleGroup.rules.count() > 0 %}\n                            <table class=\"table table-hover table-striped group-rules\">\n                                <thead>\n                                <tr>\n                                    <th style=\"width:5%;\">&nbsp;</th>\n                                    <th style=\"width:10%;\">&nbsp;</th>\n                                    <th style=\"width:10%;\">&nbsp;</th>\n                                    <th style=\"width:25%;\">{{ 'rule_name'|_ }}</th>\n                                    <th style=\"width:25%;\" class=\"hidden-xs\">{{ 'rule_triggers'|_ }}</th>\n                                    <th style=\"width:25%;\" class=\"hidden-xs\">{{ 'rule_actions'|_ }}</th>\n                                </tr>\n                                </thead>\n                                <tbody class=\"rule-connected-list\">\n                                {% for rule in ruleGroup.rules %}\n                                    <tr class=\"single-rule\" data-order=\"{{ rule.order }}\"  data-id=\"{{ rule.id }}\" data-group-id=\"{{ ruleGroup.id }}\" data-position=\"{{ loop.index0 }}\">\n                                        <td>\n                                            <div class=\"btn-group btn-group-xs prio_buttons\">\n                                                <span class=\"fa fa-fw fa-bars rule-handle\"></span>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div class=\"btn-group btn-group-xs edit_buttons\">\n                                                <a title=\"{{ 'edit'|_ }}\" href=\"{{ route('rules.edit', rule.id) }}\"\n                                                   class=\"btn btn-default\"><span\n                                                            class=\"fa fa-fw fa-pencil\"></span></a>\n                                                <a title=\"{{ 'delete'|_ }}\"\n                                                   href=\"{{ route('rules.delete', rule.id) }}\"\n                                                   class=\"btn btn-danger\"><span\n                                                            class=\"fa fa-fw fa-trash\"></span></a>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div class=\"btn-group btn-group-xs test_buttons\">\n                                                {% if rule.active %}\n                                                    {# show which transactions would match #}\n                                                    <a href=\"{{ route('rules.search',rule.id) }}\" class=\"btn btn-default {% if false == rule.strict %}test_rule_triggers{% endif %}\" data-id=\"{{ rule.id }}\" title=\"{{ 'test_rule_triggers'|_ }}\"><span data-id=\"{{ rule.id }}\" class=\"fa fa-fw fa-flask\"></span></a>\n\n                                                    {# actually execute rule #}\n                                                <a href=\"{{ route('rules.select-transactions',rule.id) }}\" class=\"btn btn-default\" title=\" {{ trans('firefly.apply_rule_selection', {title: rule.title}) }}\"><span class=\"fa fa-fw fa-power-off \"></span></a>\n                                                {% endif %}\n\n                                                {# duplicate rule #}\n                                                <a href=\"#\" class=\"btn btn-default duplicate-rule\" data-id=\"{{ rule.id }}\" title=\" {{ trans('firefly.duplicate_rule', {title: rule.title}) }}\"><span class=\"fa fa-fw fa-copy\"></span></a>\n                                            </div>\n                                        </td>\n                                        <td class=\"markdown\">\n                                            {% if rule.active %}\n                                                {{ rule.title }}\n                                            {% else %}\n                                                <s>{{ rule.title }}</s> ({{ 'inactive'|_|lower }})\n                                            {% endif %}\n                                            {% if rule.stop_processing %}\n                                                <span class=\"fa fa-stop-circle-o\"></span>\n                                            {% endif %}\n\n                                            {% if rule.description != \"\" %}\n                                                <small class=\"hidden-xs\"\n                                                        {% if not rule.active %}\n                                                            class=\"text-muted\"\n                                                        {% endif %}\n                                                ><br/>{{ rule.description|default('')|markdown }}</small>\n                                            {% endif %}\n                                            <small><br />{% if rule.strict %}<span class=\"text-danger\">{{ 'rule_is_strict'|_ }}</span>{% else %}<span class=\"text-success\">{{ 'rule_is_not_strict'|_ }}</span>{% endif %}</small>\n                                        </td>\n                                        <td class=\"hidden-xs\">\n                                            {% if rule.ruleTriggers.count() > 0 %}\n                                                <ul class=\"small\" data-id=\"{{ rule.id }}\">\n                                                    {% for trigger in rule.ruleTriggers %}\n                                                        {% if trigger.trigger_type != \"user_action\" %}\n                                                            <li\n                                                                    {% if not rule.active %}\n                                                                        class=\"text-muted\"\n                                                                    {% endif %}\n                                                                    data-id=\"{{ trigger.id }}\">\n                                                                {{ trans(('firefly.rule_trigger_' ~ getRootSearchOperator(trigger.trigger_type)), {trigger_value: trigger.trigger_value}) }}\n\n                                                                {% if trigger.stop_processing %}\n                                                                    <span class=\"fa fa-stop-circle-o\"></span>\n                                                                {% endif %}\n                                                            </li>\n                                                        {% endif %}\n                                                    {% endfor %}\n                                                </ul>\n                                            {% endif %}\n                                        </td>\n                                        <td class=\"hidden-xs\">\n                                            {% if rule.ruleActions.count() > 0 %}\n                                                <ul class=\"small\" data-id=\"{{ rule.id }}\">\n                                                    {% for action in rule.ruleActions %}\n                                                        <li\n                                                                {% if not rule.active %}\n                                                                    class=\"text-muted\"\n                                                                {% endif %}\n                                                                data-id=\"{{ action.id }}\">{{ trans(('firefly.rule_action_' ~ action.action_type), {action_value: action.action_value}) }}\n                                                            {% if action.stop_processing %}\n                                                                <span class=\"fa fa-stop-circle-o\"></span>\n                                                            {% endif %}\n                                                        </li>\n                                                    {% endfor %}\n                                                </ul>\n                                            {% endif %}\n                                        </td>\n                                    </tr>\n                                {% endfor %}\n                                </tbody>\n                            </table>\n                        {% else %}\n                            <p>\n                                <em>{{ 'no_rules_in_group'|_ }}</em>\n                            </p>\n                        {% endif %}\n                        <p>\n                            <br/>\n                            <a href=\"{{ route('rules.create', ruleGroup.id) }}\"\n                               class=\"btn btn-success new_rule\">{{ 'new_rule'|_ }}</a>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    {% endfor %}\n\n    {% include 'v1.rules.partials.test-trigger-modal' %}\n\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-sm-12\">\n            <a href=\"{{ route('rule-groups.create') }}\" class=\"btn btn-success\">{{ 'new_rule_group'|_ }}</a>\n        </div>\n    </div>\n\n{% endblock %}\n{% block scripts %}\n    <script type=\"text/javascript\" nonce=\"{{ JS_NONCE }}\">\n        var moveRuleGroupUrl = '{{ route('rule-groups.move') }}';\n        var duplicateRuleUrl = '{{ route('rules.duplicate') }}';\n    </script>\n    <script type=\"text/javascript\" src=\"v1/js/lib/jquery-ui.min.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n    <script type=\"text/javascript\" src=\"v1/js/ff/rules/index.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n{% endblock %}\n", "<?php\n/**\n * web.php\n * Copyright (c) 2019 james@firefly-iii.org.\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nRoute::group(\n    ['namespace' => 'FireflyIII\\Http\\Controllers\\System',\n     'as'        => 'installer.', 'prefix' => 'install',],\n    static function () {\n        Route::get('', ['uses' => 'InstallController@index', 'as' => 'index']);\n        Route::post('runCommand', ['uses' => 'InstallController@runCommand', 'as' => 'runCommand']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'binders-only', 'namespace' => 'FireflyIII\\Http\\Controllers\\System', 'as' => 'cron.', 'prefix' => 'cron'],\n    static function () {\n        Route::get('run/{cliToken}', ['uses' => 'CronController@cron', 'as' => 'cron']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'binders-only',  'namespace' => 'FireflyIII\\Http\\Controllers\\System'],\n    static function () {\n        Route::get('offline', fn () => view('errors.offline'));\n        Route::get('health', ['uses' => 'HealthcheckController@check', 'as' => 'healthcheck']);\n    }\n);\n\n/**\n * These routes only work when the user is NOT logged in.\n */\nRoute::group(\n    ['middleware' => 'user-not-logged-in', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n\n    // Authentication Routes...\n        Route::get('login', ['uses' => 'Auth\\LoginController@showLoginForm', 'as' => 'login']);\n        Route::post('login', ['uses' => 'Auth\\LoginController@login', 'as' => 'login.post']);\n\n        // Registration Routes...\n        Route::get('register', ['uses' => 'Auth\\RegisterController@showRegistrationForm', 'as' => 'register']);\n        Route::post('register', 'Auth\\RegisterController@register');\n\n        // Password Reset Routes...\n        Route::get('password/reset/{token}', ['uses' => 'Auth\\ResetPasswordController@showResetForm', 'as' => 'password.reset']);\n        Route::post('password/email', ['uses' => 'Auth\\ForgotPasswordController@sendResetLinkEmail', 'as' => 'password.email']);\n        Route::post('password/reset', ['uses' => 'Auth\\ResetPasswordController@reset', 'as' => 'password.reset.post']);\n        Route::get('password/reset', ['uses' => 'Auth\\ForgotPasswordController@showLinkRequestForm', 'as' => 'password.reset.request']);\n\n        // Change email routes:\n        Route::get('profile/confirm-email-change/{token}', ['uses' => 'ProfileController@confirmEmailChange', 'as' => 'profile.confirm-email-change']);\n        Route::get('profile/undo-email-change/{token}/{oldAddressHash}', ['uses' => 'ProfileController@undoEmailChange', 'as' => 'profile.undo-email-change']);\n\n\n    }\n);\n\n/**\n * For some other routes, it is only relevant that the user is authenticated.\n */\nRoute::group(\n    ['middleware' => 'user-simple-auth', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('error', ['uses' => 'DebugController@displayError', 'as' => 'error']);\n        Route::any('logout', ['uses' => 'Auth\\LoginController@logout', 'as' => 'logout']);\n        Route::get('flush', ['uses' => 'DebugController@flush', 'as' => 'flush']);\n        //Route::get('routes', ['uses' => 'DebugController@routes', 'as' => 'routes']);\n        Route::get('debug', 'DebugController@index')->name('debug');\n    }\n);\n\n/**\n * For the two factor routes, the user must be logged in, but NOT 2FA. Account confirmation does not matter here.\n *\n */\nRoute::group(\n    ['middleware' => 'user-logged-in-no-2fa', 'prefix' => 'two-factor', 'as' => 'two-factor.', 'namespace' => 'FireflyIII\\Http\\Controllers\\Auth'],\n    static function () {\n        Route::post('submit', ['uses' => 'TwoFactorController@submitMFA', 'as' => 'submit']);\n        Route::get('lost', ['uses' => 'TwoFactorController@lostTwoFactor', 'as' => 'lost']); // can be removed when v2 is live.\n    }\n);\n\n/**\n * For all other routes, the user must be fully authenticated and have an activated account.\n */\n\n/**\n * Home Controller.\n */\nRoute::group(\n    ['middleware' => ['user-full-auth'], 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('/', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::get('/flash', ['uses' => 'DebugController@testFlash', 'as' => 'test-flash']);\n        Route::get('/home', ['uses' => 'HomeController@index', 'as' => 'home']);\n        Route::post('/daterange', ['uses' => 'HomeController@dateRange', 'as' => 'daterange']);\n    }\n);\n\n// show inactive\n\n/**\n * Account Controller.\n * DROP ME WHEN v2 hits\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'inactive-accounts', 'as' => 'accounts.'],\n    static function () {\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@inactive', 'as' => 'inactive.index'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n    }\n);\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'accounts', 'as' => 'accounts.'],\n    static function () {\n\n        // show:\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@index', 'as' => 'index'])->where('objectType', 'revenue|asset|expense|liabilities');\n\n        // create\n        Route::get('create/{objectType}', ['uses' => 'Account\\CreateController@create', 'as' => 'create'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n        Route::post('store', ['uses' => 'Account\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{account}', ['uses' => 'Account\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{account}', ['uses' => 'Account\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{account}', ['uses' => 'Account\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{account}', ['uses' => 'Account\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show\n        Route::get('show/{account}/all', ['uses' => 'Account\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{account}/{start_date?}/{end_date?}', ['uses' => 'Account\\ShowController@show', 'as' => 'show']);\n\n        // reconcile routes:\n        Route::get('reconcile/{account}/index/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@reconcile', 'as' => 'reconcile']);\n        Route::post('reconcile/{account}/submit/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@submit', 'as' => 'reconcile.submit']);\n\n        // reconcile JSON routes\n        Route::get('reconcile/{account}/overview/{start_date?}/{end_date?}', ['uses' => 'Json\\ReconcileController@overview', 'as' => 'reconcile.overview']);\n        Route::get(\n            'reconcile/{account}/transactions/{start_date?}/{end_date?}',\n            ['uses' => 'Json\\ReconcileController@transactions', 'as' => 'reconcile.transactions']\n        );\n    }\n);\n\n/**\n * Attachment Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'attachments', 'as' => 'attachments.'],\n    static function () {\n        Route::get('', ['uses' => 'AttachmentController@index', 'as' => 'index']);\n        Route::get('edit/{attachment}', ['uses' => 'AttachmentController@edit', 'as' => 'edit']);\n        Route::get('delete/{attachment}', ['uses' => 'AttachmentController@delete', 'as' => 'delete']);\n        Route::get('download/{attachment}', ['uses' => 'AttachmentController@download', 'as' => 'download']);\n        Route::get('view/{attachment}', ['uses' => 'AttachmentController@view', 'as' => 'view']);\n\n        Route::post('update/{attachment}', ['uses' => 'AttachmentController@update', 'as' => 'update']);\n        Route::post('destroy/{attachment}', ['uses' => 'AttachmentController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Bills Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'bills', 'as' => 'bills.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'subscriptions', 'as' => 'subscriptions.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budgets', 'as' => 'budgets.'],\n    static function () {\n\n    // delete\n        Route::get('delete/{budget}', ['uses' => 'Budget\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{budget}', ['uses' => 'Budget\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // create\n        Route::get('create', ['uses' => 'Budget\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{budget}', ['uses' => 'Budget\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{budget}', ['uses' => 'Budget\\EditController@update', 'as' => 'update']);\n\n        // show\n        Route::get('show/{budget}', ['uses' => 'Budget\\ShowController@show', 'as' => 'show']);\n        Route::get('show/{budget}/{budgetLimit}', ['uses' => 'Budget\\ShowController@showByBudgetLimit', 'as' => 'show.limit']);\n        Route::get('list/no-budget/all', ['uses' => 'Budget\\ShowController@noBudgetAll', 'as' => 'no-budget-all']);\n        Route::get('list/no-budget/{start_date?}/{end_date?}', ['uses' => 'Budget\\ShowController@noBudget', 'as' => 'no-budget']);\n\n        // reorder budgets\n        Route::post('reorder', ['uses' => 'Budget\\IndexController@reorder', 'as' => 'reorder']);\n\n        // index\n        Route::get('{start_date?}/{end_date?}', ['uses' => 'Budget\\IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * Available Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'available-budgets', 'as' => 'available-budgets.'],\n    static function () {\n\n        // create\n        Route::get('create/{start_date}/{end_date}/{currency?}', ['uses' => 'Budget\\AvailableBudgetController@create', 'as' => 'create']);\n        Route::get(\n            'create-alternative/{start_date}/{end_date}',\n            ['uses' => 'Budget\\AvailableBudgetController@createAlternative', 'as' => 'create-alternative']\n        );\n        Route::post('store', ['uses' => 'Budget\\AvailableBudgetController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@edit', 'as' => 'edit']);\n        Route::post('update/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@update', 'as' => 'update']);\n\n        Route::post('delete', ['uses' => 'Budget\\AvailableBudgetController@delete', 'as' => 'delete']);\n    }\n);\n\n/**\n * Budget Limit Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budget-limits', 'as' => 'budget-limits.'],\n    static function () {\n        Route::get('create/{budget}/{start_date}/{end_date}', ['uses' => 'Budget\\BudgetLimitController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\BudgetLimitController@store', 'as' => 'store']);\n\n        Route::post('delete/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@delete', 'as' => 'delete']);\n\n        Route::post('update/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'categories', 'as' => 'categories.'],\n    static function () {\n\n    // index:\n        Route::get('', ['uses' => 'Category\\IndexController@index', 'as' => 'index']);\n\n        // create\n        Route::get('create', ['uses' => 'Category\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Category\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{category}', ['uses' => 'Category\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{category}', ['uses' => 'Category\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{category}', ['uses' => 'Category\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{category}', ['uses' => 'Category\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show category:\n        Route::get('show/{category}/all', ['uses' => 'Category\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{category}/{start_date?}/{end_date?}', ['uses' => 'Category\\ShowController@show', 'as' => 'show']);\n\n        // no category controller:\n        Route::get('list/no-category/all', ['uses' => 'Category\\NoCategoryController@showAll', 'as' => 'no-category.all']);\n        Route::get('list/no-category/{start_date?}/{end_date?}', ['uses' => 'Category\\NoCategoryController@show', 'as' => 'no-category']);\n    }\n);\n\n/**\n * Currency Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'currencies', 'as' => 'currencies.'],\n    static function () {\n        Route::get('', ['uses' => 'CurrencyController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'CurrencyController@create', 'as' => 'create']);\n        Route::get('edit/{currency}', ['uses' => 'CurrencyController@edit', 'as' => 'edit']);\n        Route::get('delete/{currency}', ['uses' => 'CurrencyController@delete', 'as' => 'delete']);\n        Route::post('default', ['uses' => 'CurrencyController@defaultCurrency', 'as' => 'default']);\n        Route::post('enable', ['uses' => 'CurrencyController@enableCurrency', 'as' => 'enable']);\n        Route::post('disable', ['uses' => 'CurrencyController@disableCurrency', 'as' => 'disable']);\n\n        Route::post('store', ['uses' => 'CurrencyController@store', 'as' => 'store']);\n        Route::post('update/{currency}', ['uses' => 'CurrencyController@update', 'as' => 'update']);\n        Route::post('destroy/{currency}', ['uses' => 'CurrencyController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Chart\\Account Controller (default report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/account', 'as' => 'chart.account.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'AccountController@frontpage', 'as' => 'frontpage']);\n        Route::get('expense', ['uses' => 'AccountController@expenseAccounts', 'as' => 'expense']);\n        Route::get('revenue', ['uses' => 'AccountController@revenueAccounts', 'as' => 'revenue']);\n        Route::get('report/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@report', 'as' => 'report']);\n        Route::get('period/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@period', 'as' => 'period']);\n\n        Route::get('income-category/{account}/all/all', ['uses' => 'AccountController@incomeCategoryAll', 'as' => 'income-category-all']);\n        Route::get('expense-category/{account}/all/all', ['uses' => 'AccountController@expenseCategoryAll', 'as' => 'expense-category-all']);\n        Route::get('expense-budget/{account}/all/all', ['uses' => 'AccountController@expenseBudgetAll', 'as' => 'expense-budget-all']);\n\n        Route::get('income-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@incomeCategory', 'as' => 'income-category']);\n        Route::get('expense-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-budget/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseBudget', 'as' => 'expense-budget']);\n    }\n);\n\n/**\n * Chart\\Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/bill', 'as' => 'chart.bill.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BillController@frontpage', 'as' => 'frontpage']);\n        Route::get('single/{bill}', ['uses' => 'BillController@single', 'as' => 'single']);\n    }\n);\n\n/**\n * Chart\\Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/budget', 'as' => 'chart.budget.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BudgetController@frontpage', 'as' => 'frontpage']);\n        Route::get('period/0/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@periodNoBudget', 'as' => 'period.no-budget']);\n        Route::get('period/{budget}/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n        Route::get('budget/{budget}/{budgetLimit}', ['uses' => 'BudgetController@budgetLimit', 'as' => 'budget-limit']);\n        Route::get('budget/{budget}', ['uses' => 'BudgetController@budget', 'as' => 'budget']);\n\n        // these charts are used in budget/show:\n        Route::get('expense-category/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-asset/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseAsset', 'as' => 'expense-asset']);\n        Route::get('expense-expense/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseExpense', 'as' => 'expense-expense']);\n\n        // these charts are used in reports (category reports):\n        Route::get(\n            'category/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@sourceAccountExpense', 'as' => 'source-account-expense']\n        );\n        Route::get(\n            'destination-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@destinationAccountExpense', 'as' => 'destination-account-expense']\n        );\n        Route::get('operations/{accountList}/{budget}/{start_date}/{end_date}', ['uses' => 'BudgetReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/category', 'as' => 'chart.category.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'CategoryController@frontPage', 'as' => 'frontpage']);\n        Route::get('period/{category}', ['uses' => 'CategoryController@currentPeriod', 'as' => 'current']);\n        Route::get('period/{category}/{date}', ['uses' => 'CategoryController@specificPeriod', 'as' => 'specific']);\n        Route::get('all/{category}', ['uses' => 'CategoryController@all', 'as' => 'all']);\n        Route::get(\n            'report-period/0/{accountList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@reportPeriodNoCategory', 'as' => 'period.no-category']\n        );\n        Route::get('report-period/{category}/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@reportPeriod', 'as' => 'period']);\n\n        Route::get(\n            'category/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceExpense', 'as' => 'source-expense']\n        );\n        Route::get(\n            'source/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceIncome', 'as' => 'source-income']\n        );\n        Route::get(\n            'dest/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationExpense', 'as' => 'dest-expense']\n        );\n        Route::get(\n            'dest/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationIncome', 'as' => 'dest-income']\n        );\n        Route::get('operations/{accountList}/{category}/{start_date}/{end_date}', ['uses' => 'CategoryReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/tag', 'as' => 'chart.tag.'],\n    static function () {\n        Route::get('tag/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagIncome', 'as' => 'tag-income']);\n        Route::get(\n            'category/expense/{accountList}/{tagList}/{start_date}/{end_date}',\n            ['uses' => 'TagReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get('category/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@categoryIncome', 'as' => 'category-income']);\n        Route::get('budget/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@budgetExpense', 'as' => 'budget-expense']);\n        Route::get('source/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceExpense', 'as' => 'source-expense']);\n        Route::get('source/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceIncome', 'as' => 'source-income']);\n        Route::get('dest/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationExpense', 'as' => 'dest-expense']);\n        Route::get('dest/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationIncome', 'as' => 'dest-income']);\n\n        Route::get('operations/{accountList}/{tag}/{start_date}/{end_date}', ['uses' => 'TagReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Double Controller (for expense/revenue report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/double', 'as' => 'chart.double.'],\n    static function () {\n        Route::get('main/{accountList}/{account}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@mainChart', 'as' => 'main']);\n\n        Route::get(\n            'category/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n\n        Route::get('tag/expense/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagIncome', 'as' => 'tag-income']);\n    }\n);\n\n/**\n * Chart\\PiggyBank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/piggy-bank', 'as' => 'chart.piggy-bank.'],\n    static function () {\n        Route::get('{piggyBank}', ['uses' => 'PiggyBankController@history', 'as' => 'history']);\n    }\n);\n\n/**\n * Chart\\Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/report', 'as' => 'chart.report.'],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@operations', 'as' => 'operations']);\n        Route::get('net-worth/{accountList}/{start_date}/{end_date}/', ['uses' => 'ReportController@netWorth', 'as' => 'net-worth']);\n    }\n);\n\n/**\n * Chart\\Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/transactions', 'as' => 'chart.transactions.'],\n    static function () {\n        Route::get('categories/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@categories', 'as' => 'categories']);\n        Route::get('budgets/{start_date}/{end_date}', ['uses' => 'TransactionController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'destinationAccounts/{objectType}/{start_date}/{end_date}',\n            ['uses' => 'TransactionController@destinationAccounts', 'as' => 'destinationAccounts']\n        );\n        Route::get('sourceAccounts/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@sourceAccounts', 'as' => 'sourceAccounts']);\n        //\n    }\n);\n\n/**\n * Export controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'export', 'as' => 'export.'],\n    static function () {\n\n    // index\n        Route::get('', ['uses' => 'Export\\IndexController@index', 'as' => 'index']);\n        Route::post('export', ['uses' => 'Export\\IndexController@export', 'as' => 'export']);\n    }\n);\n/**\n * Object group controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'groups', 'as' => 'object-groups.'],\n    static function () {\n\n        // index\n        Route::get('', ['uses' => 'ObjectGroup\\IndexController@index', 'as' => 'index']);\n        Route::post('set-order/{objectGroup}', ['uses' => 'ObjectGroup\\IndexController@setOrder', 'as' => 'set-order']);\n\n        // edit\n        Route::get('edit/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Help Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'help', 'as' => 'help.'],\n    static function () {\n        Route::get('{route}', ['uses' => 'HelpController@show', 'as' => 'show']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v1/jscript', 'as' => 'javascript.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variables', 'as' => 'variables']);\n        Route::get('accounts', ['uses' => 'JavascriptController@accounts', 'as' => 'accounts']);\n        Route::get('currencies', ['uses' => 'JavascriptController@currencies', 'as' => 'currencies']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v2/jscript', 'as' => 'javascript.v2.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variablesV2', 'as' => 'variables']);\n    }\n);\n\n/**\n * JSON Controller(s).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'json', 'as' => 'json.'],\n    static function () {\n\n        // budgets:\n        Route::get(\n            'budget/total-budgeted/{currency}/{start_date}/{end_date}',\n            ['uses' => 'Json\\BudgetController@getBudgetInformation', 'as' => 'budget.total-budgeted']\n        );\n        // boxes\n        Route::get('box/balance', ['uses' => 'Json\\BoxController@balance', 'as' => 'box.balance']);\n        Route::get('box/available', ['uses' => 'Json\\BoxController@available', 'as' => 'box.available']);\n        Route::get('box/net-worth', ['uses' => 'Json\\BoxController@netWorth', 'as' => 'box.net-worth']);\n\n        // rules\n        Route::get('trigger', ['uses' => 'Json\\RuleController@trigger', 'as' => 'trigger']);\n        Route::get('action', ['uses' => 'Json\\RuleController@action', 'as' => 'action']);\n\n        // front page\n        Route::get('frontpage/piggy-banks', ['uses' => 'Json\\FrontpageController@piggyBanks', 'as' => 'fp.piggy-banks']);\n\n        // currency conversion:\n        Route::get('rate/{fromCurrencyCode}/{toCurrencyCode}/{date}', ['uses' => 'Json\\ExchangeController@getRate', 'as' => 'rate']);\n\n        // intro things:\n        Route::any('intro/finished/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postFinished', 'as' => 'intro.finished']);\n        Route::post('intro/enable/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postEnable', 'as' => 'intro.enable']);\n        Route::get('intro/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@getIntroSteps', 'as' => 'intro']);\n    }\n);\n\n/**\n * NewUser Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'new-user', 'as' => 'new-user.'],\n    static function () {\n        Route::get('', ['uses' => 'NewUserController@index', 'as' => 'index']);\n        Route::post('submit', ['uses' => 'NewUserController@submit', 'as' => 'submit']);\n    }\n);\n\n/**\n * Piggy Bank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'piggy-banks', 'as' => 'piggy-banks.'],\n    static function () {\n\n        Route::get('', ['uses' => 'PiggyBank\\IndexController@index', 'as' => 'index']);\n        Route::get('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@add', 'as' => 'add-money']);\n        Route::get('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@remove', 'as' => 'remove-money']);\n        Route::get('add-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@addMobile', 'as' => 'add-money-mobile']);\n        Route::get('remove-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@removeMobile', 'as' => 'remove-money-mobile']);\n        Route::get('create', ['uses' => 'PiggyBank\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{piggyBank}', ['uses' => 'PiggyBank\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{piggyBank}', ['uses' => 'PiggyBank\\ShowController@show', 'as' => 'show']);\n        Route::post('store', ['uses' => 'PiggyBank\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{piggyBank}', ['uses' => 'PiggyBank\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postAdd', 'as' => 'add']);\n        Route::post('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postRemove', 'as' => 'remove']);\n\n        Route::post('set-order/{piggyBank}', ['uses' => 'PiggyBank\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Preferences Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'preferences', 'as' => 'preferences.'],\n    static function () {\n        Route::get('', ['uses' => 'PreferencesController@index', 'as' => 'index']);\n        Route::post('', ['uses' => 'PreferencesController@postIndex', 'as' => 'update']);\n    }\n);\n\n/**\n * Profile Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'profile', 'as' => 'profile.'],\n    static function () {\n        Route::get('', ['uses' => 'ProfileController@index', 'as' => 'index']);\n        Route::get('change-email', ['uses' => 'ProfileController@changeEmail', 'as' => 'change-email']);\n        Route::get('change-password', ['uses' => 'ProfileController@changePassword', 'as' => 'change-password']);\n        Route::get('delete-account', ['uses' => 'ProfileController@deleteAccount', 'as' => 'delete-account']);\n\n        Route::post('delete-account', ['uses' => 'ProfileController@postDeleteAccount', 'as' => 'delete-account.post']);\n        Route::post('change-password', ['uses' => 'ProfileController@postChangePassword', 'as' => 'change-password.post']);\n        Route::post('change-email', ['uses' => 'ProfileController@postChangeEmail', 'as' => 'change-email.post']);\n        Route::post('regenerate', ['uses' => 'ProfileController@regenerate', 'as' => 'regenerate']);\n\n        Route::get('logout-others', ['uses' => 'ProfileController@logoutOtherSessions', 'as' => 'logout-others']);\n        Route::post('logout-others', ['uses' => 'ProfileController@postLogoutOtherSessions', 'as' => 'logout-others.post']);\n\n        // new 2FA routes\n        Route::post('enable2FA', ['uses' => 'ProfileController@enable2FA', 'as' => 'enable2FA']);\n        Route::get('2fa/code', ['uses' => 'ProfileController@code', 'as' => 'code']);\n        Route::post('2fa/code', ['uses' => 'ProfileController@postCode', 'as' => 'code.store']);\n        Route::get('/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\n        Route::get('2fa/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\n\n    }\n);\n\n/**\n * Recurring Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'recurring', 'as' => 'recurring.'],\n    static function () {\n        Route::get('', ['uses' => 'Recurring\\IndexController@index', 'as' => 'index']);\n\n        Route::get('show/{recurrence}', ['uses' => 'Recurring\\ShowController@show', 'as' => 'show']);\n        Route::get('create', ['uses' => 'Recurring\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-transaction/{tj}', ['uses' => 'Recurring\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::get('edit/{recurrence}', ['uses' => 'Recurring\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{recurrence}', ['uses' => 'Recurring\\DeleteController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'Recurring\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{recurrence}', ['uses' => 'Recurring\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{recurrence}', ['uses' => 'Recurring\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // JSON routes:\n        Route::get('events', ['uses' => 'Json\\RecurrenceController@events', 'as' => 'events']);\n        Route::get('suggest', ['uses' => 'Json\\RecurrenceController@suggest', 'as' => 'suggest']);\n    }\n);\n\n/**\n * Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'reports', 'as' => 'reports.'],\n    static function () {\n        Route::get('', ['uses' => 'ReportController@index', 'as' => 'index']);\n        Route::get('options/{reportType}', ['uses' => 'ReportController@options', 'as' => 'options']);\n        Route::get('default/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@defaultReport', 'as' => 'report.default']);\n        Route::get('audit/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@auditReport', 'as' => 'report.audit']);\n        Route::get('category/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'ReportController@categoryReport', 'as' => 'report.category']);\n        Route::get('budget/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'ReportController@budgetReport', 'as' => 'report.budget']);\n        Route::get('tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'ReportController@tagReport', 'as' => 'report.tag']);\n        Route::get('double/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'ReportController@doubleReport', 'as' => 'report.double']);\n\n        Route::post('', ['uses' => 'ReportController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Report Data AccountController.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/account', 'as' => 'report-data.account.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/bill', 'as' => 'report-data.bills.'],\n    static function () {\n        Route::get('overview/{accountList}/{start_date}/{end_date}', ['uses' => 'BillController@overview', 'as' => 'overview']);\n    }\n);\n\n/**\n * Report Double Data Expense / Revenue Account Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/double', 'as' => 'report-data.double.'],\n    static function () {\n\n        // spent + earned per combination.\n        Route::get('operations/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operations', 'as' => 'operations']);\n        Route::get('ops-asset/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operationsPerAsset', 'as' => 'ops-asset']);\n\n        Route::get('top-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Income/Expenses Controller (called financial operations).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/operations',\n     'as'         => 'report-data.operations.',],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@expenses', 'as' => 'expenses']);\n    }\n);\n\n/**\n * Report Data Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/category',\n     'as'         => 'report-data.category.',],\n    static function () {\n\n// See reference nr. 3\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@expenses', 'as' => 'expenses']);\n\n        Route::get('accounts/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@accounts', 'as' => 'accounts']);\n        Route::get('categories/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@categories', 'as' => 'categories']);\n        Route::get(\n            'account-per-category/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@accountPerCategory', 'as' => 'account-per-category']\n        );\n\n        Route::get('top-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data TAG Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/tag',\n     'as'         => 'report-data.tag.',],\n    static function () {\n        Route::get('accounts/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accounts', 'as' => 'accounts']);\n        Route::get('tags/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@tags', 'as' => 'tags']);\n        Route::get('account-per-tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accountPerTag', 'as' => 'account-per-tag']);\n\n        Route::get('top-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Balance Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/balance', 'as' => 'report-data.balance.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'BalanceController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/budget', 'as' => 'report-data.budget.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}/', ['uses' => 'BudgetController@general', 'as' => 'general']);\n// See reference nr. 4\n        Route::get('period/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n\n        Route::get('accounts/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@accounts', 'as' => 'accounts']);\n        Route::get('budgets/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'account-per-budget/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetController@accountPerBudget', 'as' => 'account-per-budget']\n        );\n        Route::get('top-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@avgExpenses', 'as' => 'avg-expenses']);\n    }\n);\n\n/**\n * Rules Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rules', 'as' => 'rules.'],\n    static function () {\n\n    // create controller\n        Route::get('create/{ruleGroup?}', ['uses' => 'Rule\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-bill/{bill}', ['uses' => 'Rule\\CreateController@createFromBill', 'as' => 'create-from-bill']);\n        Route::get('create-from-journal/{tj}', ['uses' => 'Rule\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::post('store', ['uses' => 'Rule\\CreateController@store', 'as' => 'store']);\n        Route::post('duplicate', ['uses' => 'Rule\\CreateController@duplicate', 'as' => 'duplicate']);\n\n        // delete controller\n        Route::get('delete/{rule}', ['uses' => 'Rule\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{rule}', ['uses' => 'Rule\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // index controller\n        Route::get('', ['uses' => 'Rule\\IndexController@index', 'as' => 'index']);\n\n        Route::post('move-rule/{rule}/{ruleGroup}', ['uses' => 'Rule\\IndexController@moveRule', 'as' => 'move-rule']);\n        // select controller\n        Route::get('test', ['uses' => 'Rule\\SelectController@testTriggers', 'as' => 'test-triggers']);\n        Route::get('test-rule/{rule}', ['uses' => 'Rule\\SelectController@testTriggersByRule', 'as' => 'test-triggers-rule']);\n        Route::get('search/{rule}', ['uses' => 'Rule\\IndexController@search', 'as' => 'search']);\n        Route::get('select/{rule}', ['uses' => 'Rule\\SelectController@selectTransactions', 'as' => 'select-transactions']);\n        Route::post('execute/{rule}', ['uses' => 'Rule\\SelectController@execute', 'as' => 'execute']);\n\n        // edit controller\n        Route::get('edit/{rule}', ['uses' => 'Rule\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{rule}', ['uses' => 'Rule\\EditController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Rule Groups Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rule-groups', 'as' => 'rule-groups.'],\n    static function () {\n        Route::get('create', ['uses' => 'RuleGroup\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@delete', 'as' => 'delete']);\n\n        // new route to move rule groups:\n        Route::post('move', ['uses' => 'RuleGroup\\EditController@moveGroup', 'as' => 'move']);\n\n        Route::get('select/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@selectTransactions', 'as' => 'select-transactions']);\n        Route::post('store', ['uses' => 'RuleGroup\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('execute/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@execute', 'as' => 'execute']);\n    }\n);\n\n/**\n * Search Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'search', 'as' => 'search.'],\n    static function () {\n        Route::get('', ['uses' => 'SearchController@index', 'as' => 'index']);\n        Route::any('search', ['uses' => 'SearchController@search', 'as' => 'search']);\n    }\n);\n\n/**\n * Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'tags', 'as' => 'tags.'],\n    static function () {\n        Route::get('', ['uses' => 'TagController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'TagController@create', 'as' => 'create']);\n\n        Route::get('show/{tagOrId}/all', ['uses' => 'TagController@showAll', 'as' => 'show.all']);\n        Route::get('show/{tagOrId}/{start_date?}/{end_date?}', ['uses' => 'TagController@show', 'as' => 'show']);\n\n        Route::get('edit/{tag}', ['uses' => 'TagController@edit', 'as' => 'edit']);\n        Route::get('delete/{tag}', ['uses' => 'TagController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'TagController@store', 'as' => 'store']);\n        Route::post('update/{tag}', ['uses' => 'TagController@update', 'as' => 'update']);\n        Route::post('destroy/{tag}', ['uses' => 'TagController@destroy', 'as' => 'destroy']);\n        Route::post('mass-destroy', ['uses' => 'TagController@massDestroy', 'as' => 'mass-destroy']);\n    }\n);\n\n/**\n * Transaction Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'transactions', 'as' => 'transactions.'],\n    static function () {\n\n    // show groups:\n// See reference nr. 5\n        Route::get('{what}/all', ['uses' => 'Transaction\\IndexController@indexAll', 'as' => 'index.all'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        Route::get('{what}/{start_date?}/{end_date?}', ['uses' => 'Transaction\\IndexController@index', 'as' => 'index'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        // create group:\n        Route::get('create/{objectType}', ['uses' => 'Transaction\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Transaction\\CreateController@store', 'as' => 'store']);\n\n        // clone group\n        Route::post('clone', ['uses' => 'Transaction\\CreateController@cloneGroup', 'as' => 'clone']);\n\n        // edit group\n        Route::get('edit/{transactionGroup}', ['uses' => 'Transaction\\EditController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'Transaction\\EditController@update', 'as' => 'update']);\n\n        // delete group\n        Route::get('delete/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::get('show/{transactionGroup}', ['uses' => 'Transaction\\ShowController@show', 'as' => 'show']);\n        Route::get('debug/{transactionGroup}', ['uses' => 'Transaction\\ShowController@debugShow', 'as' => 'debug']);\n    }\n);\n\n/**\n * Transaction Mass Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/mass', 'as' => 'transactions.mass.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'MassController@edit', 'as' => 'edit']);\n        Route::get('delete/{journalList}', ['uses' => 'MassController@delete', 'as' => 'delete']);\n        Route::post('update', ['uses' => 'MassController@update', 'as' => 'update']);\n        Route::post('destroy', ['uses' => 'MassController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Transaction Bulk Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/bulk', 'as' => 'transactions.bulk.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'BulkController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'BulkController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Transaction Convert Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/convert',\n     'as'         => 'transactions.convert.',],\n    static function () {\n        Route::get('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@index', 'as' => 'index']);\n        Route::post('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Transaction Link Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/link', 'as' => 'transactions.link.'],\n    static function () {\n        Route::get('modal/{tj}', ['uses' => 'LinkController@modal', 'as' => 'modal']);\n\n// See reference nr. 6\n        Route::post('store/{tj}', ['uses' => 'LinkController@store', 'as' => 'store']);\n        Route::get('delete/{journalLink}', ['uses' => 'LinkController@delete', 'as' => 'delete']);\n        Route::get('switch/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\n\n        Route::post('destroy/{journalLink}', ['uses' => 'LinkController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Report Popup Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Popup', 'prefix' => 'popup', 'as' => 'popup.'],\n    static function () {\n        Route::get('general', ['uses' => 'ReportController@general', 'as' => 'general']);\n    }\n);\n\n/*\n * Webhooks management\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Webhooks', 'prefix' => 'webhooks', 'as' => 'webhooks.'],\n    static function () {\n        Route::get('index', ['uses' => 'IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * For the admin routes, the user must be logged in and have the role of 'owner'.\n */\nRoute::group(\n    ['middleware' => 'admin', 'namespace' => 'FireflyIII\\Http\\Controllers\\Admin', 'prefix' => 'admin', 'as' => 'admin.'],\n    static function () {\n\n    // admin home\n        Route::get('', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::post('test-message', ['uses' => 'HomeController@testMessage', 'as' => 'test-message']);\n\n        // check for updates?\n        Route::get('update-check', ['uses' => 'UpdateController@index', 'as' => 'update-check']);\n        Route::any('update-check/manual', ['uses' => 'UpdateController@updateCheck', 'as' => 'update-check.manual']);\n        Route::post('update-check', ['uses' => 'UpdateController@post', 'as' => 'update-check.post']);\n\n        // user manager\n        Route::get('users', ['uses' => 'UserController@index', 'as' => 'users']);\n        Route::get('users/edit/{user}', ['uses' => 'UserController@edit', 'as' => 'users.edit']);\n        Route::get('users/delete/{user}', ['uses' => 'UserController@delete', 'as' => 'users.delete']);\n        Route::get('users/show/{user}', ['uses' => 'UserController@show', 'as' => 'users.show']);\n\n        Route::post('users/update/{user}', ['uses' => 'UserController@update', 'as' => 'users.update']);\n        Route::post('users/destroy/{user}', ['uses' => 'UserController@destroy', 'as' => 'users.destroy']);\n\n        // journal links manager\n        Route::get('links', ['uses' => 'LinkController@index', 'as' => 'links.index']);\n        Route::get('links/create', ['uses' => 'LinkController@create', 'as' => 'links.create']);\n        Route::get('links/show/{linkType}', ['uses' => 'LinkController@show', 'as' => 'links.show']);\n        Route::get('links/edit/{linkType}', ['uses' => 'LinkController@edit', 'as' => 'links.edit']);\n        Route::get('links/delete/{linkType}', ['uses' => 'LinkController@delete', 'as' => 'links.delete']);\n\n        Route::post('links/store', ['uses' => 'LinkController@store', 'as' => 'links.store']);\n        Route::post('links/update/{linkType}', ['uses' => 'LinkController@update', 'as' => 'links.update']);\n        Route::post('links/destroy/{linkType}', ['uses' => 'LinkController@destroy', 'as' => 'links.destroy']);\n\n        // FF configuration:\n        Route::get('configuration', ['uses' => 'ConfigurationController@index', 'as' => 'configuration.index']);\n        Route::post('configuration', ['uses' => 'ConfigurationController@postIndex', 'as' => 'configuration.index.post']);\n    }\n);\n"], "filenames": ["app/Http/Controllers/Rule/CreateController.php", "app/Http/Controllers/RuleGroup/EditController.php", "app/Repositories/RuleGroup/RuleGroupRepository.php", "public/v1/js/ff/rules/index.js", "resources/views/v1/rules/index.twig", "routes/web.php"], "buggy_code_start_loc": [36, 30, 332, 61, 48, 920], "buggy_code_end_loc": [249, 126, 367, 72, 197, 956], "fixing_code_start_loc": [37, 31, 331, 62, 48, 920], "fixing_code_end_loc": [252, 121, 363, 102, 202, 956], "type": "CWE-352", "message": "firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-3900", "sourceIdentifier": "security@huntr.dev", "published": "2021-10-27T18:15:07.803", "lastModified": "2021-10-28T15:37:40.687", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "firefly-iii es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.6.2", "matchCriteriaId": "C25737DD-713C-479B-84AD-2DDF0E130416"}]}]}], "references": [{"url": "https://github.com/firefly-iii/firefly-iii/commit/c2c8c42ef3194d1aeba8c48240fe2e9063f77635", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/909e55b6-ef02-4143-92e4-bc3e8397db76", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/firefly-iii/firefly-iii/commit/c2c8c42ef3194d1aeba8c48240fe2e9063f77635"}}