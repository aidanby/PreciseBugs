{"buggy_code": ["<?php\n\n/**\n * submitByMail plugin version 1.0b2.9\n * \n *\n * @category  phplist\n * @package   submitByMail Plugin\n * @author    Arnold V. Lesikar\n * @copyright 2014 Arnold V. Lesikar\n * @license   http://www.gnu.org/licenses/gpl.html GNU General Public License, Version 3\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n * For more information about how to use this plugin, see\n * http://resources.phplist.com/plugins/submitByMail .\n * \n */\nrequire_once dirname(__FILE__) . \"/submitByMailPlugin/sbmGlobals.php\";  \t// __DIR__ not consistent with PHP 5.x earlier than 5.3\nrequire_once dirname(__FILE__) . \"/submitByMailPlugin/PEAR/Mail/mimeDecode.php\";\n/**\n * Registers the plugin with phplist\n * \n * @category  phplist\n * @package   conditionalPlaceholderPlugin\n */\n\nclass submitByMailPlugin extends phplistPlugin\n{\n    // Parent properties overridden here\n    public $name = 'Submit by Mail Plugin';\n    public $version = '1.0b2.9';\n    public $enabled = false;\n    public $authors = 'Arnold Lesikar';\n    public $description = 'Allows messages to be submitted to mailing lists by email';\n    public $coderoot; \t// coderoot relative to the phplist admin directory\n    public $DBstruct =array (\t//For creation of the required tables by Phplist\n    \t\t'escrow' => array(\n    \t\t\t\"token\" => array(\"varchar(10) not null primary key\", \"Token sent to confirm escrowed submission\"),\n    \t\t\t\"file_name\" => array(\"varchar(255) not null\",\"File name for escrowed submission\"),\n    \t\t\t\"sender\" => array(\"varchar(255) not null\", \"From whom?\"),\n    \t\t\t\"subject\" => array(\"varchar(255) not null default '(no subject)'\",\"subject\"),\n    \t\t\t\"listid\" => array(\"integer not null\",\"List ID\"),\n    \t\t\t\"listsadressed\" => array(\"blob not null\", \"Array of list ids targeted, serialized\"),\n    \t\t\t\"expires\" => array (\"integer not null\", \"Unix time when submission expires without confirmation\")\n\t\t\t), \n\t\t\t'list' => array(\n\t\t\t\t\"id\" => array(\"integer not null primary key\", \"ID of the list associated with the email address\"),\n\t\t\t\t\"pop3server\" => array (\"varchar(255) not null\", \"Server collecting list submissions\"),\n\t\t\t\t\"submissionadr\" => array (\"varchar(255) not null\", \"Email address for list submission\"),\n\t\t\t\t\"password\" => array (\"varchar(255)\",\"Password associated with the user name\"),\n\t\t\t\t\"pipe_submission\" => array (\"tinyint default 0\", \"Flags messages are submitted by a pipe from the POP3 server\"),\n\t\t\t\t\"confirm\" => array (\"tinyint default 1\", \"Flags email submissions are escrowed for confirmation by submitter\"),\n\t\t\t\t\"queue\" => array (\"tinyint default 0\", \"Flags that messages are queued immediately rather than being saved as drafts\"),\n\t\t\t\t\"template\" => array(\"integer default 0\", \"Template to use with messages submitted to this address\"),\n\t\t\t\t\"footer\" => array(\"text\",\"Footer for a message submitted to this address\")\n\t\t\t),\n\t\t);  \t\t\t\t// Structure of database tables for this plugin\n\t\n\tpublic $tables = array ();\t// Table names are prefixed by Phplist\n\tpublic $commandlinePluginPages = array ('pipeInMsg', 'collectMsgs'); \n\tpublic $publicPages = array ('confirmMsg'); \n\t\n\tpublic $settings = array(\n    \t\"cliPath\" => array (\n      \t\t'value' => '',\n     \t\t'description' => \"Complete path to command line PHP binary (leave empty if you don't know it)\",\n      \t\t'type' => \"text\",\n      \t\t'allowempty' => 1,\n      \t\t'category'=> 'general',),\n      \n    \t\"publicPageProtocol\" => array (\n    \t\t'value' => 1,\n    \t\t'description' => \"Use 'http' for public page links instead of 'https' (Yes or No)\",\n    \t\t'type' => \"boolean\",\n      \t\t'allowempty' => 1,\n      \t\t'category'=> 'general',), \n      \t\n\t\t\"escrowHoldTime\" => array (\n      \t\t'value' => 1,\n     \t\t'description' => 'Days escrowed messages are held before being discarded',\n      \t\t'type' => \"integer\",\n      \t\t'allowempty' => 0,\n      \t\t\"max\" => 7,\n      \t\t\"min\" => 1,\n      \t\t'category'=> 'general',),\n      \n\t\t\"manualMsgCollection\" => array (\n    \t\t'value' => 1,\n    \t\t'description' => 'Use browser to collect messages submitted by POP (Yes or No)',\n    \t\t'type' => \"boolean\",\n      \t\t'allowempty' => 1,\n      \t\t'category'=> 'general',), \n      \t\n      \t\"popTimeout\" => array (\n      \t\t'value' => 0,\n    \t\t'description' => 'POP3 timeout in seconds; set 0 to use default value',\n    \t\t'type' => \"integer\",\n      \t\t'allowempty' => 1,\n      \t\t\"max\" => 120,\n      \t\t\"min\" => 0,\n      \t\t'category'=> 'general',), \n    // Note that the content type of the message must be multipart or text\n    // The settings below apply to attachments.\n    // Note also that we do not allow multipart attachments.\n\t\t\"allowedTextSubtypes\" => array(\n\t\t\t'value' => 'plain, html',\n    \t\t'description' => 'MIME text/subtypes allowed for attachments',\n    \t\t'type' => 'text',\n    \t\t'allowempty' => 0,\n      \t\t'category' => 'general',),\n      \t\t\n\t\t'allowedImageSubtypes' => array(\n\t\t\t'value' => 'gif, jpeg, pjpeg, tiff, png',\n    \t\t'description' => 'image/subtypes allowed for attachments',\n    \t\t'type' => 'text',\n    \t\t'allowempty' => 1,\n      \t\t'category' => 'general',),\n      \t\t\n      \t\"allowedMimeTypes\" => array (\n    \t\t'value' => 'application/pdf',\n    \t\t'description' => 'Additional MIME content-types allowed for attachments',\n    \t\t'type' => 'text',\n    \t\t'allowempty' => 1,\n      \t\t'category' => 'general',),\n      \t);\n\t\n\t// Arrays for the menu system\n\tpublic $pageTitles = array (\"configure_a_list\" => \"Configure a List for Submission by Email\",\n\t\t\t\t\t\t\t\t\"collectMsgs\" => \"Collect Messages Submitted by Email\",\n\t\t\t\t\t\t\t\t\"generateScripts\"=> \"Generate Scripts for Mailbox Pipes and Cron\");\n\tpublic $topMenuLinks = array('configure_a_list' => array ('category' => 'config'),\n\t\t\t\t\t\t\t\t  'collectMsgs' => array ('category' => 'campaigns'), \n\t\t\t\t\t\t\t\t  'generateScripts' => array('category' => 'config')\n\t\t\t\t\t\t\t\t  );\t\n\t\n\t// Properties particular to this plugin  \t\n  \tpublic $escrowdir; \t// Directory for messages escrowed for confirmation\n  \t\n  \tprivate $errMsgs = array(\n  \t\t\t\t\t\t\t\"nopipe\" => 'Msg discarded: pipe not allowed for this list',\n  \t\t\t\t\t\t\t\"nodecode\" => 'Msg discarded: cannot decode',\n  \t\t\t\t\t\t\t\"badbox\" => 'Msg discarded: bad mailbox',\n  \t\t\t\t\t\t\t'nolists' => 'Msg discarded: no lists addressed',\n  \t\t\t\t\t\t\t\"unauth\" => \"List '%s': Msg discarded; unauthorized sender\",\n  \t\t\t\t\t\t\t'unauthp' => \"List '%s': Msg discarded: sent to list(s) sender does not own\",\n  \t\t\t\t\t\t\t\"badmain\" => \"List '%s': Msg discarded; bad type for main message\",\n  \t\t\t\t\t\t\t\"badtyp\" => \"List '%s': Msg discarded; mime type not allowed\",\n  \t\t\t\t\t\t\t\"noattach\" => \"List '%s': Msg discarded; attachments not permitted\",\n  \t\t\t\t\t\t\t\"toodeep\" => \"List '%s': Msg discarded; mime nesting too deep\",\n  \t\t\t\t\t\t\t\"badinlin\" => \"List '%s': Msg discarded; inline type not allowed\"\n  \t\t\t\t\t\t\t);\n    private $days = array ('', 'one day', 'two days', 'three days', 'four days', 'five days', 'six days', 'seven days');\n  \t\t\t\t\t\t\t\n  \tpublic $numberPerList = 20;\t\t// Number of lists tabulated per page in listing\n  \t\n\tprivate $allowedMimes = array(); // Allowed MIME subtypes keyed on types\n\tprivate $allowedMain = array(); // MIME subtypes allowed as main message, keyed\n\t\t\t\t\t\t\t\t\t// on types\n\tpublic $deleteMsgsOnReceipt = CL_EXPUNGE;\t// Applies to POP mailboxes. Normally we\n\t\t\t\t\t\t\t\t\t\t// set this flag to CL_EXPUNGE. It is set to 0 only\n\t\t\t\t\t\t\t\t\t\t// for testing and debugging the POP routines.\n\t// Parameters for the message we are dealing with currently\n\t// If only PHP had genuine scope rules, so many private class properties would not \n\t// be necessary!!\n\tpublic $lid = 0;\t\t// ID of the list whose mailbox is handling the message (the first list sent to)\n\tpublic $alids = array();\t// IDs for the lists receiving current message\n\tpublic $sender = '';\t\t// Sender of the current message\n\tpublic $displayName = '';\t// Name of the sender\n\tpublic $subj = '';\t\t\t// Subject line of the current message\n\tprivate $mid;\t\t\t\t// Message ID for current message being saved or queued\n\tprivate $holdTime;\t\t\t// Days to hold escrowed message\n\tprivate $textmsg;\t// Text version of current message\t\n\tprivate $htmlmsg;\t// HTML version of current message\n\tprivate $embeddedImage; \t// Flag msg constains embedded image. This is an error\n\tprivate $publicScheme;\t\t// phpList does not set public page links from command line pages\n\t\n\tconst ONE_DAY = 86400; \t// 24 hours in seconds\n\n  \tpublic function __construct()\n    {\n    \tif (!function_exists('imap_open') || !$this->isSecureConnection()) { // Don't have prerequisites\n    \t\t$this->uninitialize();\n    \t\tparent::__construct();\n    \t\treturn;\n    \t}\n    \t\n    \t$this->coderoot = dirname(__FILE__) . '/submitByMailPlugin/';\n\t   \t\n\t   \t$this->escrowdir = $this->coderoot . \"escrow/\";\n\t\tif (!is_dir($this->escrowdir))\n\t\t\tmkdir ($this->escrowdir);\n\t\t\n\t\t$this->holdTime =getConfig(\"escrowHoldTime\");\t\n\t\t\n\t\t// Build array of allowed MIME types and subtypes\n\t\t$str = getConfig('allowedTextSubtypes');\n    \t$str = strtolower(str_replace(' ','', $str));\n    \t$this->allowedMimes['text'] = explode(',', $str);\n    \t\n    \t$str = getConfig('allowedImageSubtypes');\n    \t$str = strtolower(str_replace(' ','', $str));\n    \t$this->allowedMimes['image'] = explode(',', $str);\n    \t\n    \t$str = getConfig('allowedMimeTypes');\n    \t$str = strtolower(str_replace(' ','', $str));\n    \t$addTypes = explode (',', $str);\n    \tforeach ($addTypes as $val) {\n    \t\t$partial = explode('/', $val);\n    \t\t$this->allowedMimes[trim($partial[0])][] = trim($partial[1]);    \t\n    \t}\n    \t\n    \t// Don't let the admin add to the multipart types\n    \t$this->allowedMimes['multipart'] = array('mixed', 'alternative', 'related');\n    \t$this->allowedMain = array('text' => array('plain', 'html'), \"multipart\" => $this->allowedMimes['multipart']);\n    \t\n    \t$this->pop_timeout = (int) getConfig(\"popTimeout\");\n    \tif ($this->pop_timeout) {\n    \t\timap_timeout (IMAP_OPENTIMEOUT, $this->pop_timeout);\n    \t\timap_timeout (IMAP_READTIMEOUT, $this->pop_timeout);\n    \t\timap_timeout (IMAP_WRITETIMEOUT, $this->pop_timeout);\n    \t}\n    \t\n    \t// Properly set public scheme; phpList always sets this to 'http' if running\n    \t// from command line\n    \t$this->publicScheme = getConfig(\"publicPageProtocol\")? 'http' : 'https';\n\n    \tparent::__construct();\n\t\n    \t/* Delete escrowed messages that have expired\n    \t   Do this here, because we don't want the user to have to set up a cron script\n    \t   for this. We don't have the name of the relevant database table until after\n    \t   the parent is constructed. */\n    \t\n    \t// This class is constructed before the plugin is initialized. Make\n    \t// sure we have the 'escrow' table before attempting to delete expired msgs\n    \tif (Sql_Table_Exists($this->tables['escrow'])) {\n    \t\t$this->deleteExpired();\n    \t}    \n\t}\n   \t\n   \t// Remove initialization flag into phpList configuration table to prevent\n   \t// use of plug in after it is found that we do not have the proper prequisites\n   \tprivate function uninitialize() {\n   \t\tSql_Query(sprintf(\"delete from %s where item ='%s'\", $GLOBALS['tables']['config'], \n    \t\t\t\t\tmd5('plugin-submitByMailPlugin-initialised')));\n   \t}     \n   \t\n    // Determine if we have a secure https connection.\n    // This code was adapted from the comment by temuraru on the Stack Overflow page\n    // at http://stackoverflow.com/questions/1175096/how-to-find-out-if-youre-using-https-without-serverhttps\n    //\n    // Why do we need this? We cannot tie a list to a POP account without sending a \n    // password between the browser and server. Without a secure connection, the list\n    // might become open to spammers. The danger is less within mail accounts connected to \n    // a pipe, but still spammers could learn that the account is connected to a mailing list.\n    //\n    private function isSecureConnection() {\n    \tif ($GLOBALS['commandline']) return true; \t// Command line is internal and secure (pipe \n    \t\t\t\t\t\t\t\t\t\t\t\t// and cron and assuming SSH if on terminal)\n    \tif (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') return true;\n    \t// The following line applies for servers behind a load balancer\n\t\tif (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' || !empty($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] == 'on') return true;\n\t\treturn false;\n\t}\n\t\n    # Startup code, all other objects are constructed \n    # Returns false when we do not have the prereqs, which means we cannot start\n    # Also returns false when not running off a secure connection\n    public function activate() {\n        return true;\n  \t}\n\n\t// Delete expired messages in escrow\n    private function deleteExpired() {\n    \t$query = sprintf(\"select token, file_name from %s where expires < %d\", $this->tables['escrow'], time());\n    \t$result = Sql_Query ($query);\n    \twhile ($row = Sql_Fetch_Row($result)) {\n    \t\tunlink ($this->escrowdir . $row[1]);\n    \t\t$query = sprintf (\"delete from %s where token = '%s'\", $this->tables['escrow'], $row[0]);\n    \t\tSql_Query($query);\n    \t}\n    }\n\n  \t// Provide complete server name in a form suitable for a SSL/TLS POP call using iMap function\n  \tprivate function completeServerName($server) {\n  \t\treturn '{' . $server . submitByMailGlobals::SERVER_TAIL . '}';\n  \t}\n  \t\n  \tprivate function getCliPhp() {\n  \t\tif ($cmd = getConfig(\"cliPath\"))\n  \t\t\treturn $cmd;\n  \t\texec('which php-cli', $output);\n  \t\tif ($output)\n  \t\t\treturn trim($output[0]);\n  \t\texec('which php', $output);\n  \t\treturn trim($output[0]);\n  \t}\n  \t\n  \tpublic function ckPHPversion() {\n  \t\tif ($cmd = $this->getCliPhp()) {\n  \t\t\texec (\"$cmd -v\", $output);\n  \t\t\tif (preg_match ('/PHP\\s*(\\d\\d?\\.\\d\\d?)/', $output[0], $match))\n  \t\t\t\treturn $match[1];\n  \t\t}\n  \t\treturn \"\";\n  \t}\n  \t\n  \t// Generate a command line PHP command to be used by emailajax.php\n\tpublic function makeCliCommand($page) {\n\t\tif ($cmd = $this->getCliPhp()) {\n\t\t\t$cmd = $cmd . ' -q ' . dirname(dirname($this->coderoot)) . '/index.php ';\n\t\t\t$cmd .= '-c' . realpath($GLOBALS[\"configfile\"]) . \" -p$page -msubmitByMailPlugin\";\n\t\t\treturn $cmd;\n\t\t}\n\t\treturn '';\n\t}\n  \t\n  \tpublic function adminmenu() {\n  \t\t// Adjust what adminMenu returns for different circumstances.\n\t   \tif (!isSuperUser()) { \n    \t\t// Make sure that only super users get to see the adminMenu.\n    \t\t$this->topMenuLinks = $this->pageTitles = array(); \n    \t} else if (!getConfig(\"manualMsgCollection\")) {\n    \t\t\t// Make sure that we don't show the message collection page if we don't allow\n    \t\t\t// manual collection of messages, remove that page from the menus.\n    \t\t\tunset($this->topMenuLinks[\"collectMsgs\"]);\n    \t\t\tunset($this->pageTitles[\"collectMsgs\"]);\n    \t}\n    \treturn $this->pageTitles;\n\t}\n\t\n\tpublic function allowMessageToBeQueued($messagedata = array()) {\n\t\tif (($this->lid) && ($this->embeddedImage)) \n\t\t\treturn \"Message cannot be sent with unprocessed embedded image.\";\n    \tif (($this->lid) && ($this->subj == '(no subject)')) { \n    \t\t\t//$this->lid is nonzero only if it is this plugin that is processing the\n    \t\t\t//message rather than Phplist's send_core.php\n    \t\treturn \"Message cannot be sent with missing subject line.\";\n\t\t}\n    \treturn '';\n  \t}\n\t\t\n\tprivate function generateRandomString($length = 10) {\n    \treturn substr(sha1(mt_rand()), 0, $length);\n\t}\n\t\n  \tpublic function cleanFormString($str) {\n\t\treturn sql_escape(strip_tags(trim($str)));\n\t}\n\t\n\t// Produce button links to pages outside the plugin\n\tpublic function outsideLinkButton($name, $desc, $url = '', $extraclass = '',$title = '' ) {\n\t\t$str = PageLinkButton($name, $desc, $url, $extraclass, $title);\n\t\t$str = str_replace(\"&amp;pi=submitByMailPlugin\", '', $str);\n\t\treturn $str;\n\t}\n\t\n\tpublic function myFormStart($action, $additional) {\n\t\t$html = formStart($additional);\n\t\tpreg_match('/action\\s*=\\s*\".*\"/Ui', $html, $match);\n\t\t$html = str_replace($match[0], 'action=\"' . $action .'\"', $html);\n\t\treturn $html;\n\t}\n    \n    // Get an array of the mailing lists with submission address and list id\n    public function getTheLists($name='') {\n    \tglobal $tables;\n    \t$A = $tables['list']; \t// Phplist table of lists, including name and id\n\t\t$B = $this->tables['list'];\t// My table holds mail submission data for lists\n\t\t$out = array();\n\t\tif (strlen($name)) {\n\t\t\t$where = sprintf(\"WHERE $A.name='%s' \", $name); \n\t\t}\n    \t$query = \"SELECT $A.name,$B.submissionadr,$A.id FROM $A LEFT JOIN $B ON $A.id=$B.id {$where}ORDER BY $A.name\";\n    \tif ($res = Sql_Query($query)) {\n    \t\t$ix = 0;\n    \t\twhile ($row = Sql_Fetch_Row($res)) {\n    \t\t\t$out[$ix] = $row;\n    \t\t\t$ix += 1;\n    \t\t}\t\n    \t}\n    \treturn $out; \n    }\n          \n    // Get the numberical id of a list from its email submission address\n    public function getListID ($email) {\n    \t$out = 0;\n    \tif (preg_match('/<(.*)>/', $email, $match))\n\t\t\t$email = $match[1];$query = sprintf(\"select id from %s where submissionadr='%s'\", $this->tables['list'], trim($email));\n    \t$res = Sql_Query($query);\n    \t$row = Sql_Fetch_Row($res);\n    \treturn $row[0];\n    }\n    \n    public function getCredentials ($email) {\n    \t$query = sprintf(\"select pop3server, password from %s where submissionadr='%s'\",\n    \t\t$this->tables['list'], $email);\n    \treturn Sql_Fetch_Assoc_Query($query);\n    }\n    \n    // Returns array of connection parameters for the lists receiving messages via POP\n    public function getPopData() {\n    \t$out = array();\n    \t$query = sprintf(\"select id, pop3server, submissionadr, password from %s where pipe_submission=0\",\n    \t\t$this->tables['list']);\n    \t$result = Sql_Query($query);\n    \twhile ($row = Sql_Fetch_Assoc($result))\n    \t\t$out[] = $row;\n    \treturn $out;\n    }\n        \n    // What to do with messages for a particular list\n    private function getDisposition ($id) {\n    \t$query = sprintf (\"select confirm, queue from %s where id=%d\", $this->tables['list'], $id);\n    \t$row = Sql_Fetch_Array_Query($query);\n    \tif (is_null($row)) return null;\n    \treturn $row[0]? \"escrow\" : ($row[1]? \"queue\" : \"save\"); \n    }\n    \n    public function doQueueMsg($lid) {\n    \t$query = sprintf (\"select queue from %s where id=%d\", $this->tables['list'], $lid);\n    \t$row = Sql_Fetch_Array_Query($query);\n    \treturn $row[0];\n    }\n    \n    public function pipeOK($lid) {\n    \t$query = sprintf (\"select pipe_submission from %s where id=%d\", $this->tables['list'], $lid);\n    \t$row = Sql_Fetch_Array_Query($query);\n    \treturn $row[0];\n    }\n    \n    private function getListTmpltFtr($id) {\n    \t$query = sprintf (\"select template, footer from %s where id=%d\", $this->tables['list'], $id);\n    \t$row = Sql_Fetch_Row_Query($query);\n    \treturn $row;\n    }\n    \n    private function getListAdminAdr($listId) {\n    \t$A = $GLOBALS['tables']['admin'];\n    \t$B = $GLOBALS['tables']['list'];\n    \t$query = sprintf (\"select email from %s left join %s on %s.id=%s.owner where %s.id=%d\", $A, $B, $A, $B, $B, $listId ); \n    \t$row = Sql_Fetch_Row_Query($query);\t\n\t\treturn $row[0];\n\t}\n    \n    // Get the email addresses of all the admins\n    private function getAdminAdrs() {\n    \t$query = sprintf(\"select email from %s\", $GLOBALS['tables']['admin']);\n    \t$result = Sql_Query($query);\n    \twhile ($row = Sql_Fetch_Row($result))\n    \t\t$out[] = $row[0];\n    \treturn $out;\n    }\n    \n    private function getOwnerLids ($email) {\n    \t$out = array();\n    \t$A = $GLOBALS['tables']['list'];\n    \t$B = $GLOBALS['tables']['admin'];\n    \t$query = sprintf (\"select %s.id from %s left join %s on %s.id=%s.owner where %s.email='%s'\", $A, $A, $B, $B, $A, $B, $email);\n    \t$result = Sql_Query($query);\n    \twhile ($row = Sql_Fetch_Row($result))\n    \t\t$out[] = $row[0];\n    \treturn $out;\n    }\n    \n    // Return addresses of all superusers\n    private function getSuperAdrs() {\n    \t$query = sprintf (\"select email from %s where superuser=1\", $GLOBALS['tables']['admin']);\n    \t$res = Sql_query($query);\n    \twhile ($row = Sql_Fetch_Row($res))\n    \t\t$out[] = trim($row[0]);\n    \treturn $out;\n    }\n    \n    private function getSenderID($sender) {\n    \t$query = sprintf (\"select id from %s where email='%s'\", $GLOBALS['tables']['admin'], $sender);\n    \t$row = Sql_Fetch_Row_Query($query);\n    \treturn $row[0];\n\t}\n   \n    private function std($str) {\n    \treturn strtolower(trim($str));\n    }\n    \n    // Get out the email address from a string of the form Name<email_address>\n    // Modified to show display name of sender\n\tpublic function cleanAdr ($adr, $setDisplayName=false) { \n\t\tif ($setDisplayName)\n\t\t\t$this->displayName = ''; \n\t\t if (preg_match('/<(.*)>/', $adr, $match)) { \n\t\t\tif ($setDisplayName)\n\t\t\t \t$this->displayName = trim(str_replace($match[0],'', $adr)); \n\t\t\t return trim($match[1]); \n\t\t} \n\t\treturn trim($adr); \n\t}    \n\t\n    // Get filename associated with a MIME part if there is one\n    private function getFn($apart) {\n    \tif (isset($apart->d_parameters['filename']))\n    \t\treturn $apart->d_parameters['filename'];\n    \tif (isset($apart->ctype_parameters['name']))\n    \t\treturn $apart->ctype_parameters['name'];\n    \treturn false;\n    }\n    \n    // Check the structure of one mime part of a message.\n    // Returns an error code or false if there is no problem.\n    private function isBadMime($apart, $lvl) {\n    \t$mimes = $this->allowedMimes;\n    \t$mains = $this->allowedMain;\n    \t$c1 = $this->std($apart->ctype_primary); \n    \t$c2 = $this->std($apart->ctype_secondary);\n    \tif (isset($apart->disposition)) $dp = $this->std($apart->disposition);\n\n    \tif ($lvl > 2)\n    \t\treturn \"toodeep\"; \t// Mime parts too deeply nexted\n    \t\n    \t// Is the part an allowed mime type, subtype:\n    \tif ((!array_key_exists( $c1,$mimes)) || (!in_array($c2, $mimes[$c1])))\n    \t\treturn \"badtyp\";\t\t// Message has a forbidden mime type\n    \t\n    \t// If multipart, check the parts\t\n    \tif ($c1 == 'multipart') {\n    \t\tforeach ($apart->parts as $mypart) {\n   \t\t\tif ($result = $this->isBadMime($mypart, $lvl+1))\t// Return if find bad part\n    \t\t\t\treturn $result;\n    \t\t}\n    \t\treturn false;    \t\t\n    \t} else { // if not multipart, is it OK as attachment or inline?\n    \t\n    \t\t// Do we have a file name? Treat the part as an attachment\n    \t\t// But if its an image it could also be inline even with a file name\n    \t\t$havefn = $this->getFn($apart);\n    \t\t// Don't check for inline images. If we have a file name we can treat the\n    \t\t// image as an attachment, ignoring the inline disposition directive, which \n    \t\t// is misused bu user agents anyway.\n    \t\tif ($havefn) {\n    \t\t\tif (!ALLOW_ATTACHMENTS) return \"noattach\";\t// Have an attachment when none or allowed.\n    \t\t\treturn false; \t// If we got here the file type is an acceptable mime type\n    \t\t}\n    \t\t\n    \t\t// If no file name, but have something other than text or multipart\n    \t\t// Treat it as inline and an error. It is at this point that we catch inline images\n    \t\t// without file names. We could create a file name and treat the image as simply\n    \t\t// an attachment, but it's better to inform the sender of the problem.\n    \t\t// Multipart type is excluded by this point; we are only looking for text types\n    \t\tif (!$havefn && ((!array_key_exists( $c1, $mains)) || (!in_array($c2, $mains[$c1]))))\n    \t\t\treturn \"badinlin\"; \t\t// Forbidden inline attachment\n    \t\treturn false;\n    \t}\n    }  \n    \n    // Get the lists addressed by the message. Return an array of submission addresses\n    // for the lists we're sending to.\n    private function getListsAddressed(&$hdrs) { // A bit more efficient here to call by reference.\n    \t// First find the submission addresses for our lists\n\t\t$sbmAdrs = array();\t\n\t\t$arr = $this->getTheLists();\n\t\tforeach ($arr as $val) {\n\t\t\tif (!$val[1]) continue;\n\t\t\t$sbmAdrs[] = $val[1];\t\t\n\t\t}\t\t\n\t\t// What lists are addressed by the message?\n\t\t$listsSentTo = array();\n\t\t// Some user agents spread multiple addressees to separate lines:\n\t\t$str = preg_replace(\"#\\r?\\n#\", '', $hdrs['to'] . ($hdrs['cc']? (',' . $hdrs['cc']): ''));\n\t\t$tos = explode(',', $str);\t\n\t\tforeach ($tos as $adr) {\n\t\t\t$adr = $this->cleanAdr($adr);\n\t\t\tif (in_array($adr, $sbmAdrs)) $listsSentTo[] = $this->getListID($adr);\t \n\t\t}\n\t\treturn $listsSentTo;\n    }\n    \n    private function isUnauthorized($from) {\n    \t$authSenders[] = $this->getListAdminAdr($this->lid); // Admin for this list\n\t\t// Authorized senders are the list administrator and superusers\n\t\t$isSuperUser = in_array($this->sender, $this->getSuperAdrs());\n\t\tif ($isSuperUser) $isAdmin = 1;\t\t\t// Can send to all lists\n\t\telse $isAdmin = in_array($this->sender, $this->getAdminAdrs());\n\t\tif (!$isAdmin) return 'unauth';\t\n\t\tif (!$isSuperUser) {\t\t\t\t\t// If not a super user, can send only to own lists\n\t\t\t$owned = $this->getOwnerLids($this->sender);\n\t\t\t/* We should respond to a list owner, even if the message is not sent\n\t\t\tto lists owned by that person. The code 'unauth' suppresses a response.\n\t\t\tif (!array_intersect ($this->alids, $owned))\n\t\t\t\treturn 'unauth';\t\t\t\t\t*/\t\t\t\n\t\t\tif (array_diff($this->alids, $owned))\n\t\t\t\treturn 'unauthp';\n\t\t}\n\t\treturn false;\n\t}\n   \n \t// Check if the message is acceptable; $mbox is the address at which the email arrived.\n    // We need this so that in case of a submission to multiple lists we can tell\n    // which list we are sending this instance of the message to. In such a case we do\n    // not do anything, unless $mbox represents the first list the message is sent to.\n    // If there is a problem with the message, returns a short error string.\n    //\n    // As a side effect this function sets various class properties for the current message\n    // such as $this->subj and $this->sender\n    private function isBadMessage ($msg, $mbox) {  // Maybe check message and attachment sizes here?\n    \t$isSuperUser = $isAdmin = 0;\n    \t$mbox = $this->cleanAdr($mbox);\t// The user might screw up the argument in a pipe\n    \t$decoder = new Mail_mimeDecode($msg);\n\t\t$params['include_bodies'] = false;\n\t\t$params['decode_bodies']  = false;\n\t\t$params['decode_headers'] = true;\n\t\t$out = $decoder->decode($params);\n\t\t$hdrs = $out->headers;\n\n\t\t$this->sender = $this->cleanAdr($hdrs['from'], true); // Modified to show display name of sender\n\t\tif (!($hdrs['to'] && $this->sender)) return 'nodecode';\n\t\t\n\t\t$this->subj = trim($hdrs['subject']); \n\t\tif (!$this->subj) $this->subj = '(no subject)'; // Need something here, to show in\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// messages.\n\t\t\n\t\t// Find the lists the message is addressed to\n\t\t// Decide which list is going to handle the message for the others\n\t\t$this->lid = $this->getListID($mbox);\n\t\tif (!$this->lid) return \"badbox\";\n\t\t// The first list in the address list is the one which will handle the message\n\t\t// If the current mailbox does not represent that list, quit\n\t\t$this->alids = $this->getListsAddressed($hdrs);\t// List IDs of lists receiving the message\n\t\tif (!$this->alids) {\n\t\t\t$this->sender = '';\t// No lists addressed, so no response needed!\n\t\t\treturn 'nolists';\n\t\t}\n\t\t// Quit if this is not the list that is supposed to handle the message\n\t\tif ($this->lid != $this->alids[0]) return 'not_ours'; \n\t\t\n\t\t// Check authorizations for the lists addressed\t\n\t\tif ($errcode = $this->isUnauthorized($hdrs['from'])) {\n\t\t\tif ($errcode == 'unauth') $this->sender = '';\t// Don't respond to unauthorized senders!\n\t\t\treturn $errcode;\n\t\t}\n\t\t\n\t\t// If we have a message piped in, check if the pipe is allowed.\n\t\tif (($GLOBALS['commandline']) && ($_GET['page'] == 'pipeInMsg') && (!$this->pipeOK($this->lid)))\n\t\t\treturn 'nopipe';\n\t\t\n\t\t// Check that we have an acceptable MIME structure\n\t\t$mains = $this->allowedMain;\n\t\t$c1 = $this->std($out->ctype_primary); \n    \t$c2 = $this->std($out->ctype_secondary);\n\t\tif ((!array_key_exists( $c1, $mains)) || (!in_array($c2, $mains[$c1]))) \n    \t\treturn \"badmain\";\t\t// The main message is not proper text or multipart\n    \tif ($c1 == 'text') \t// Must be plain or html here\n    \t\treturn false;\n    \telse { \t// Multipart\n    \t\tforeach ($out->parts as $mypart) {\n    \t\t\tif ($result = $this->isBadMime($mypart, 1))\t// Return if find bad part\n    \t\t\t\treturn $result;\n    \t\t}\n    \treturn false;\t// All parts OK \n    \t}  \t\n\t}\n\t\n\t// Hold message for confirmation by the sender\n\t// Save msg in the 'escrow' subdirectory and save location and message information\n\t// in the Phplist database. \n\tprivate function escrowMsg($msg) {\n\t\t$tfn = tempnam ($this->escrowdir , \"msg\" );\n\t\tfile_put_contents ($tfn, $msg);\n\t\t$fname = basename($tfn);\n\t\t$tokn = $this->generateRandomString();\n\t\t$xpir = time() + self::ONE_DAY * $this->holdTime;\n\t\t// Modified the lines below so that we can show the display name of the sender\n\t\t$sndr = ($this->displayName? $this->displayName . ' <' . $this->sender . '>' : $this->sender);\n\t\t$query = sprintf (\"insert into %s values ('%s', '%s', '%s','%s', %d, '%s', %d)\", $this->tables['escrow'], $tokn, $fname, \n\t\t\tsql_escape($sndr), sql_escape($this->subj), $this->lid, sql_escape(serialize ($this->alids)), $xpir);\n\t\tSql_Query($query);\n\t\treturn $tokn;\n\t}\n\n\t// Some email user agents separate sections of html messages showing email attachments\n\t// inline. Apple Mail is an example of this. The result can be multiple html and body tags in\n\t// tags in a message. There may even be a DOCTYPE tag. We remove all these tags\n\t// to produce the kind of HTML that the Phplist editor produces.\n\t//\n\t// User agents may produce all sorts of mixtures of plain text and html, for example\n\t// a long text message with an html part at the end, following an inline attachment.\n\t// For Phplist we separate the text and html messages, and there is nothing that we \n\t// can do if the text and html of the message do not have similar content \n\tprivate function cleanHtml($html) {\n\t\t$html = preg_replace('/^\\s*<!doctype[^>]*>\\s*$/im', \"\", $html);\n\t\t$html = preg_replace('#<head[^>]*>.*</head>#imsU', '', $html);\n\t\t$html = preg_replace('#<html.*>|<body.*>#isU', '', $html);\n\t\t$html = str_ireplace(\"</html>\", \"\", $html); \n\t\t$html = str_ireplace(\"</body>\", \"\", $html);\n\t\t$html = preg_replace('/^\\s*\\r?\\n/m', '', $html);\n\t\treturn $html;\n\t}\n\t\n\t/*\tThe following methods are not useable independently. They have been pulled out\n\t\tout of receiveMsg in order to make the logic clearer and to ease testing.    */\n\t// Save the $messagedata array in the database. This code if taken almost verbatim\n\t// from the Phplist file sendcore.php. We save the message data only after setting\n\t// the message status. Requires the class property $this->mid to be set.\n\tprivate function saveMessageData($messagedata) {\n\t\tglobal $tables;\n\t\t$imageWarning = \n\t\t\t'<p style=\"color:red; font-weight:bold;\">Embedded images not allowed in email\n\t\t\tsubmissions. The image below cannot be displayed.</p>';\n\t\t$query = sprintf('update %s  set '\n     \t\t. '  subject = ?'\n     \t\t. ', fromfield = ?'\n     \t\t. ', tofield = ?'\n     \t\t. ', replyto = ?'\n     \t\t. ', embargo = ?'\n     \t\t. ', repeatinterval = ?'\n     \t\t. ', repeatuntil = ?'\n     \t\t. ', message = ?'\n     \t\t. ', textmessage = ?'\n     \t\t. ', footer = ?'\n     \t\t. ', status = ?'\n     \t\t. ', htmlformatted = ?'\n     \t\t. ', sendformat  =  ?'\n     \t\t. ', template  =  ?'\n     \t\t. ' where id = ?', $tables[\"message\"]);\n     \t$htmlformatted = ($messagedata[\"sendformat\"] == 'HTML'); \n     \t\n     \tif ($this->embeddedImage) {\n     \t\t$messagedata[\"message\"] = $imageWarning . $messagedata[\"message\"];\n     \t}\n  \t\t\n  \t\t$result = Sql_Query_Params($query, array(\n       \t\t$messagedata['subject']\n     \t\t, $messagedata['fromfield']\n     \t\t, $messagedata['tofield']\n     \t\t, $messagedata['replyto']\n     \t\t, sprintf('%04d-%02d-%02d %02d:%02d',\n        \t\t$messagedata['embargo']['year'],$messagedata['embargo']['month'],$messagedata['embargo']['day'],\n        \t\t$messagedata['embargo']['hour'],$messagedata['embargo']['minute'])\n     \t\t, $messagedata['repeatinterval']\n     \t\t\t, sprintf('%04d-%02d-%02d %02d:%02d',\n        \t\t$messagedata[\"repeatuntil\"]['year'],$messagedata[\"repeatuntil\"]['month'],$messagedata[\"repeatuntil\"]['day'],\n        \t\t$messagedata[\"repeatuntil\"]['hour'],$messagedata[\"repeatuntil\"]['minute'])\n     \t\t, $messagedata[\"message\"]\n     \t\t, $messagedata[\"textmessage\"]\n     \t\t, $messagedata[\"footer\"]\n     \t\t, $messagedata['status']\n     \t\t, $htmlformatted ? '1' : '0'\n     \t\t, $messagedata[\"sendformat\"]\n     \t\t, $messagedata[\"template\"]\n     \t\t, $this->mid));\n     \t\t\n     \t// Have to save the target lists in the 'listmessage' table.\n     \tforeach ($this->alids as $listid) {\n      \t\t$query = \"replace into %s (messageid,listid,entered) values(?,?,current_timestamp)\";\n      \t\t$query = sprintf($query,$GLOBALS['tables']['listmessage']);\n      \t\tSql_Query_Params($query,array($this->mid,$listid));\n    \t}\n     \treturn $this->mid; \t// Return private message ID so we can use it in other files\n\t}\n\t\n\t// Figure out what is going on with a MIME part and process it accordingly\n\tprivate function parseAPart($apart) {\n\t\tglobal $tables;\n\t\t$c1 = $this->std($apart->ctype_primary); \n    \t$c2 = $this->std($apart->ctype_secondary);\n\n    \t// If multipart, check the parts\t\n   \t\tif ($c1 == 'multipart') {\n    \t\tforeach ($apart->parts as $mypart) {\n  \t\t\t\t$this->parseaPart ($mypart);\n    \t\t}  \t\t\n    \t} else { // if not multipart, is it OK as attachment or inline?\n\t\t\t// Do we have a file name? Treat the part as an attachment\n\t   \t\tif (($attachname = $this->getFn($apart)) && strlen($apart->body)) {\n    \t\t\t// Handle atttachment\n    \t\t\tlist($name,$ext) = explode(\".\",basename($attachname));\n        \t\t# create a temporary file to make sure to use a unique file name to store with\n        \t\t$newfile = tempnam($GLOBALS[\"attachment_repository\"],$name);\n        \t\tunlink ($newfile); \t// Want the name, not the file that tempnam creates\n        \t\t$newfile .= \".\".$ext;\n        \t\tfile_put_contents($newfile, $apart->body);\n         \t\tSql_query(sprintf('insert into %s (filename,remotefile,mimetype,description,size) values(\"%s\",\"%s\",\"%s\",\"%s\",%d)',\n          \t\t\t$tables[\"attachment\"],\n          \t\t\tbasename($newfile), \n          \t\t\t$attachname, \n          \t\t\t$c1 . '/' . $c2, \n          \t\t\t'From submitted email', \n          \t\t\tfilesize($newfile))\n          \t\t);\n          \t\t$attachmentid = Sql_Insert_Id();\n      \t\t \tSql_query(sprintf('insert into %s (messageid,attachmentid) values(%d,%d)',\n          \t\t\t$tables[\"message_attachment\"],$this->mid,$attachmentid));\n          \t}  else {\t// if not multipart and not attachment must be text/plain or text/html\n    \t\t\t\tif ($c2 == 'plain') {\n    \t\t\t\t\t$this->textmsg .= $apart->body;\n    \t\t\t\t} else\n    \t\t\t\t\t$this->htmlmsg .= $apart->body; \n    \t\t} \n    \t} \n    }\n    \n\t// Do the actual decoding of bodies of message\n\t// Before this function is called, we have already determined that all of the \n\t// message parts are acceptable\n\tprivate function decodeMime ($msg) {\n\t\t$decoder = new Mail_mimeDecode($msg);\n\t\t$params['include_bodies'] = true;\n\t\t$params['decode_bodies']  = true;\n\t\t$params['decode_headers'] = true;\n\t\t$out = $decoder->decode($params);\n\t\t$this->parseApart($out);\t\n\t} \n\t\n\t// Put default message values into the Phplist database and get an ID for the \n\t// message. Then load the message data array with values for the message\n\t// that we get directly by decoding the message. Note that we do not complete\n\t// fill the messageData array, overwriting relevant defaults, until the message is\n\t// saved by the saveMessageData() method.\n\t//\n\t// This method provides a message ID, that is saved in the plugin property $mid. This\n\t// corresponds to set of default entries in the database. We do not overwrite these\n\t// default data until the message is actually saved. The purpose of the database\n\t// access in this method, is merely to acquire a message ID.\n\tprivate function loadMessageData ($msg) {\n\t \t\n\t \t// Note that the 'replyto' item appears not to be in use\n  \t\t// This item in $messagedata must exist, but it will remain empty\n  \t\t// So we do nothing further with it\n  \t\t$query\n  \t\t= \" insert into %s\"\n  \t\t. \"    (subject, status, entered, sendformat, embargo\"\n  \t\t. \"    , repeatuntil, owner, template, tofield, replyto,footer)\"\n  \t\t. \" values\"\n  \t\t. \"    ('(no subject)', 'draft', current_timestamp, 'HTML'\"\n  \t\t. \"    , current_timestamp, current_timestamp, ?, ?, '', '', ? )\";\n  \t\t$query = sprintf($query, $GLOBALS['tables']['message']);\n  \t\tSql_Query_Params($query, array($this->getSenderID($this->sender), $defaulttemplate,$defaultfooter));\n  \t\t// Set the current message ID\n  \t\t$this->mid = Sql_Insert_Id();\n      \t// Now create the messageData array with the default values\n      \t// We are going to load it with the template and footer set for the current list\n      \t// and the MIME decoded message\n      \t$messagedata = loadMessageData($this->mid);\n      \t$messagedata['subject'] = $this->subj;\n      \t$messagedata['fromfield'] = ($this->displayName? $this->displayName . ' <' . $this->sender . '>' : $this->sender);\n      \t$tempftr = $this->getListTmpltFtr($this->lid);\n      \t$messagedata['template'] = $tempftr[0];\n      \t$messagedata['footer'] = $tempftr[1];\n      \t\n      \t// Now decode the MIME. Load attachments into database. Get text and html msg\n      \t$this->decodeMime($msg);\n      \t\n      \t$messagedata[\"sendformat\"] = 'HTML';      \t\t\n      \tif ($this->htmlmsg) {\n      \t\t$messagedata[\"message\"] = $this->cleanHtml($this->htmlmsg);\n      \t\t$this->embeddedImage = preg_match('/<img [^>]*src\\s*=\\s*\"cid:/i', $messagedata[\"message\"]); \n      \t\tif ($this->textmsg)\n      \t\t\t$messagedata[\"textmessage\"] = $this->textmsg;\n      \t} else {\n      \t\t$messagedata[\"message\"] = \"<p>\" . preg_replace(\"@<br />\\s*<br />@U\", \"</p><p>\", nl2br($this->textmsg)) . \"</p>\" ;\n      \t\t$messagedata[\"textmessage\"] = $this->textmsg;\n       \t}\n\t\treturn $messagedata;\n\t}  \n\t\n\t// Update the status for the current message\n\tprivate function updateStatus($status) {\n\t\t$query = sprintf(\"update %s set status='%s' where id=%d\", $GLOBALS['tables']['message'], $status, $this->mid);\n\t\tsql_query($query);\n\t}\n\t\n\tpublic function saveDraft($msg) {\n\t\t$msgData = $this->loadMessageData ($msg); \t// Default messagedata['status'] is 'draft'\n\n\t\t// Allow plugins manipulate data or save it somewhere else\n  \t\tforeach ($GLOBALS['plugins'] as $pluginname => $plugin)\n  \t\t\t$plugin->sendMessageTabSave($this->mid,$msgData);\n\t\treturn $this->saveMessageData($msgData);  \t// Return message ID\n\t}\n\t\n\tpublic function queueMsg($msg) {\n\t\t$msgData = $this->loadMessageData ($msg);\n\t\t$this->saveMessageData($msgData);\n\n\t\t// Now can we queue this message. Ask if it's OK with the plugins\n\t\t$queueErr = '';\n\t\tforeach ($GLOBALS['plugins'] as $pluginname => $plugin) {\n  \t\t\t$pluginerror = $plugin->allowMessageToBeQueued($msgdata);\n  \t\t\tif ($pluginerror) \n  \t\t\t\t$queueErr .= $pluginerror . \"\\n\"; \n  \t\t}\n  \t\tif (!$queueErr) {\n \t\t\t$this->updateStatus('submitted');\n\t\t\treturn '';\n\t\t} else\n\t\t\treturn $queueErr;\n\t}\n\t\n\t// This method downloads and processes the messages in an account\n\t// $anAcct is an associative array containing the credentials for the account\n\t// $count is an associative array containing the count of the different \n\t// outcomes from the message processing\n\tpublic function downloadFromAcct ($anAcct, &$count) {\n\t\t// Open the default mailbox, i.e., the inbox\n\t\tif ($hndl = imap_open($this->completeServerName($anAcct['pop3server']), \n\t\t\t$anAcct['submissionadr'], $anAcct['password'] )){\n\t\t\t$nm = imap_num_msg($hndl);\n\t\t\tfor ($i = 1; $i <= $nm; $i++) {\n\t\t\t\tif (($hdr = imap_fetchheader($hndl, $i)) && ($bdy = imap_body ($hndl, $i))) {\n\t\t\t\t\t$msg = $hdr . $bdy;\n\t\t\t\t\t$this->receiveMsg($msg, $anAcct['submissionadr'], $count);\n\t\t\t\t\tif ($this->deleteMsgsOnReceipt) imap_delete($hndl, $i);\n\t\t\t\t} else {\n\t\t\t\t\tlogEvent(\"Lost connection to $anAcct[submissionadr]\");\n\t\t\t\t\t$count['lost']++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\timap_close($hndl, $this->deleteMsgsOnReceipt);\n\t\t} else {\n\t\t\tlogEvent(\"Connection to $anAcct[submissionadr] timed out\");\n\t\t\t$count['lost']++;\n\t\t}\n\t}\n\t\n\t// This function is called for each message as it is received\n\t// to determine whether the message should be escrowed or processed immediately\n\t// $count is an optional array with the proper items to count the outcomes.\n\tpublic function receiveMsg($msg, $mbox, &$count=null) {\n\t\t// If we are processing multiple messages, it's important to reinitialize\n\t\t// the parameters for each message.\n\t\t$this->lid = 0;\t\t\n\t\t$this->alids = array();\n\t\t$this->sender = $this->subj = '';\n\t\t$this->embeddedImage = false;\n\t\tif ($result = $this->isBadMessage($msg, $mbox)) {\n\t\t\tif ($result == 'not_ours') return;\t// Quit if the current message was not sent to the address of the current list\n\t\t\tlogEvent(sprintf($this->errMsgs[$result], listName($this->lid)));\n\t\t\tif ($this->sender) {\t// We have to know who gets the response\n\t\t\t\t// Edit the log entry for the email to the sender\n\t\t\t\t$ofs = strpos($this->errMsgs[$result], 'Msg discarded;') + strlen('Msg discarded;');\n\t\t\t\tsendMail($this->sender, \"Message Received and Discarded\",\n\t\t\t\t\t\"A message with the subject '\" . $this->subj . \"'was received but discarded for the following reason:\" . \n\t\t\t\t\t\tsubstr($this->errMsgs[$result], $ofs));\n\t\t\t}\n\t\t\tif (is_array($count)) $count['error']++;\n\t\t} else { \n\t\t\t$err = '';\n\t\t\tif (count($this->alids) > 1)\n\t\t\t\t$disposn = 'escrow';\n\t\t\telse\n\t\t\t\t$disposn = $this->getDisposition($this->lid); \n\t\t\t\n\t\t\tswitch ($disposn) {\n\t\t\t\tcase 'escrow':\n\t\t\t\t\t$tokn = $this->escrowMsg($msg);\n\t\t\t\t\t$site = getConfig('website');\n\t\t\t\t\t$cfmlink = $this->publicScheme . '://' . $site . $GLOBALS[\"pageroot\"]; \n\t\t\t\t\t$cfmlink .= \"/?p=confirmMsg&pi=submitByMailPlugin&mtk=$tokn\";\n\t\t\t\t\t$escrowMsg = \"A message with the subject '\" . $this->subj . \"' was received and escrowed.\\n\\n\";\n\t\t\t\t\t$escrowMsg .= \"To confirm this message, please click the following link:\\n\\n\" ;\n\t\t\t\t\t$escrowMsg .= \"$cfmlink\\n\\n\";\n\t\t\t\t\t$escrowMsg .=\t\"You must confirm this message within \" . $this->days[$this->holdTime];\n\t\t\t\t\t$escrowMsg .= \" or the message will be deleted.\";\n\t\t\t\t\tsendMail($this->sender, 'Message Received and Escrowed', $escrowMsg); \n\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj . \"' was escrowed.\");\n\t\t\t\t\tif (is_array($count)) $count['escrow']++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'queue': \t\t\t\t\t\t\n\t\t\t\t\tif ($err = $this->queueMsg($msg)) {\n\t\t\t\t\t\tsendMail($this->sender, 'Message Received but NOT Queued', \n\t\t\t\t\t\t\t\"A message with the subject '\" . $this->subj . \n\t\t\t\t\t\t\t\t\"' was received. It was not queued because of the following error(s): \\n\\n$err\\n\" \n\t\t\t\t\t\t\t\t. \"The message will be saved as a draft.\");\n\t\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj .\"' received but not queued because of a problem.\");\n\t\t\t\t\t\tif (is_array($count)) $count['draft']++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsendMail($this->sender, 'Message Received and Queued', \n\t\t\t\t\t\t\"A message with the subject '\" . $this->subj . \"' was received and is queued for distribution.\");\n\t\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj .\"' was received and queued.\");\n\t\t\t\t\t\tif (is_array($count)) $count['queue']++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'save':\t\n\t\t\t\t\t$this->saveDraft($msg);\n\t\t\t\t\tsendMail($this->sender, 'Message Received and Saved as a Draft', \n\t\t\t\t\t\t\"A message with the subject '\" . $this->subj . \"' was received and has been saved as a draft.\");\n\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj .\"' was received and and saved as a draft.\");\n\t\t\t\t\tif (is_array($count)) $count['draft']++;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t} \n}\n\n?>", "<?php\n\n/**\n * \n * @category  phplist\n * @package   submitByMail Plugin\n * @author    Arnold V. Lesikar\n * @copyright 2014 Arnold V. Lesikar\n * @license   http://www.gnu.org/licenses/gpl.html GNU General Public License, Version 3\n *\n * This file is a part of the submitByMailPlugin for Phplist\n *\n * The submitByMailPlugin is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n * For more information about how to use this plugin, see\n * http://resources.phplist.com/plugins/submitByMail .\n * \n */\n\n// This page presents a form allowing a mailing list to be configured for submission\n// of messages by email. On submission, the form is validated for various issues\n// but the form data is actually stored by the page configure_a_list.php\n\nif (!defined('PHPLISTINIT')) die(); ## avoid pages being loaded directly\nif (!isSuperUser()){\n\tprint (\"<p>You do not have sufficient privileges to view this page.</p>\");\n\treturn;\n}\n\n$sbm = $GLOBALS['plugins']['submitByMailPlugin'];\n\n$editid = $_GET['eid'];\n$listArray = $sbm->getTheLists();\n$adrsList = array();\nforeach ($listArray as $val)\n\tif ($val[1]) $adrsList[$val[1]] = $val[0];\n\t\n// Set up defaults for form\n$eml = $user = $pass = $msyes = $pipe = $cfmno = $queue = '';\n$save = $pop = $cfmyes = $msno = $ckd = 'checked';\n$tmplt = 0;\n$footer = getConfig('messagefooter');\n\n$query = sprintf(\"select * from %s where id=%d\", $sbm->tables['list'], $editid);\n\nif ($row = Sql_Fetch_Assoc_Query($query)) {\n\t$eml = $row['pop3server'];\n\t$user = $row['submissionadr'];\n\t$pass = $row['password'];\n\n\tif ($user) {\n\t\t$msyes = $ckd;\n\t\t$msno = '';\n\t} else {\n\t\t$msno = $ckd;\n\t\t$msyes = '';\n\t}\n\tif ($row['pipe_submission']) {\n\t\t$pipe = $ckd;\n\t\t$pop = '';\n\t} else {\n\t\t$pop = $ckd;\n\t\t$pipe = '';\n\t}\n\tif ($row['confirm']) {\n\t\t$cfmyes = $ckd;\n\t\t$cmno = '';\n\t} else {\n\t\t$cfmno = $ckd;\n\t\t$cfmyes = '';\n\t}\n\tif ($row['queue']) {\n\t\t$queue = $ckd;\n\t\t$save = '';\n\t} else {\n\t\t$save = $ckd;\n\t\t$queue = '';\n\t}\n\t$tmplt = $row['template'];\n\t$footer = stripslashes($row['footer']); // Magic quotes apparently! :-(\n}\n\t\t\n$req = Sql_Query(\"select id,title from {$GLOBALS['tables']['template']} order by listorder\");\n$templates_available = Sql_Num_Rows($req);\nif ($templates_available) {\n\t$template_form = '<p><div class=\"field\"><label for=\"template\">Template to use for messages submitted through this address:</label><select name=\"template\"><option value=\"0\">-- Use None</option>';\n\t$req = Sql_Query(\"select id,title, listorder from {$GLOBALS['tables']['template']} order by listorder\");\n\twhile ($row = Sql_Fetch_Assoc($req)) {   // need to fix lines below\n\t\tif ($row[\"title\"]) {\n\t\t\t$template_form .= sprintf('<option value=\"%d\" %s>%s</option>',$row[\"id\"], \n\t\t\t$row[\"id\"]==$tmplt?'selected=\"selected\"':'',$row[\"title\"]);\n\t\t}\n\t}\n\t$template_form .= '</select></div></p>';\n} else\n\t$template_form = '';\n\n$footer_form = '<p><div class=\"field\"><label for=\"footer\">Footer to be used for messages submitted through this address:</label><textarea name=\"footer\" cols=\"65\" rows=\"5\">'. htmlspecialchars($footer).'</textarea></div></p>';\n$dilg = '<div id=\"mydialog\" title=\"Data Not Saved\" style=\"text-align:center;\"></div>'; // Space for modal dialogs using jQueryUI\n// Add a confirmation dialog\n\n$ln = listName($editid);\n$infostr = <<<IOP\n<h3><strong>This configuration applies for messages sent to a single individual list.</strong></h3><p style=\"font-size:14px; margin-top:15px;\">Messages sent to multiple lists at the same time are not affected by the settings here. Such messages are always held for confirmation and then always saved as drafts after confirmation.</p>\nIOP;\nInfo($infostr);\nprint('<noscript>');\nInfo ('<span style=\"font-size:14px;font-weight:bold;\">You do not need to enter a password or POP3 server, if messages are to be collected through a pipe.</span>');\nprint('</noscript>');\n// Now lay out the form\nprint ($sbm->myFormStart(PageURL2('configure_a_list'), 'name=\"sbmConfigEdit\" class=\"submitByMailPlugin\" id=\"sbmConfigEdit\"'));\n\n$mypanel = <<<EOD\n<input type=\"hidden\" name=\"listid\" value=$editid><input type=\"hidden\" name=\"update\" value=0>\n<p><label style=\"display:inline !important;\">Submission by mail allowed:</label> <input type=\"radio\" name=\"submitOK\" value=\"Yes\" $msyes /><label style=\"display:inline !important;\">Yes</label>&nbsp;&nbsp;&nbsp;&nbsp;\n\t<input type=\"radio\" name=\"submitOK\" value=\"No\" $msno /><label style=\"display:inline !important;\">No</label>\n</p>\n<p>\n<label style=\"display:inline !important;\">Collection method:</label>&nbsp;&nbsp;<input type=\"radio\" name=\"cmethod\" value=\"POP\" $pop/><label style=\"display:inline !important;\">POP3 with SSL/TLS</label>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"radio\" name=\"cmethod\" value=\"Pipe\" $pipe/><label style=\"display:inline !important;\">Pipe</label>\n</p><p>\n<label style=\"display:inline !important;\">Submission Address:&nbsp;&nbsp;<input type=\"text\" name=\"submitadr\" style=\"width:200px !important; \ndisplay:inline !important;\" value=\"$user\" maxlength=\"255\" /></label><div id=\"pop\" style=\"margin-top:-25px; margin-bottom: 5px;\"><label style=\"display:inline !important;\">Password:&nbsp;&nbsp;<input type=\"text\" name=\"pw\" \nstyle=\"width:125px !important; display:inline !important;\" value=\"$pass\" maxlength=\"255\" /></label>\n<label>Mail Submission POP3 Server (<span style=\"font-weight:bold; color:red;\">Don't include a port number!</span>):<input type=\"text\" name=\"pop3server\" value=\"$eml\" maxlength=\"255\" /></label></div>\n<div id=\"formbtm\">\n<label style=\"display:inline !important;\">What to do with submitted message:</label>&nbsp;&nbsp;<input type=\"radio\" name=\"mdisposal\" \nvalue=\"Save\" $save /><label style=\"display:inline !important;\">Save</label>&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"radio\" name=\"mdisposal\" value=\"Queue\" $queue /><label style=\"display:inline !important;\">Queue</label>\n<br /><br /><label style=\"display:inline !important;\">Confirm submission:</label>&nbsp;&nbsp;<input type=\"radio\" name=\"confirm\" value=\"Yes\" $cfmyes /><label style=\"display:inline !important;\">Yes</label>&nbsp;&nbsp;&nbsp;&nbsp;\n<input type=\"radio\" name=\"confirm\" value=\"No\" $cfmno /><label style=\"display:inline !important;\">No</label>$template_form $footer_form\n<input class=\"submit\" type=\"submit\" name=\"submitter\" value=\"Save\" />\nEOD;\n\n$mypanel .= PageLinkClass('configure_a_list','Cancel','','button cancel','Do not save, and go back to the lists');\n$mypanel .= \"</div></p>\";\n\n$panel = new UIPanel(\"Submit to List by Mail: <strong id=\\\"mylistname\\\">$ln</strong>\", $mypanel);\nprint($panel->display());\nprint($dilg);\nprint(\"</form>\\n\");\n\nprint ('<script type=\"text/javascript\">');\nprint (\"var adrs = \" . json_encode($adrsList) . \";\\n\");\nif ($user)\n\tprint (\"var prevvals = true;\\n\");\nelse\n\tprint (\"var prevvals = false;\\n\");\n\t\n// The following scripts makes sure that POP credentials can be entered only if the POP \n// radio button has been pressed. They also validate the form for various issues.\n// The submission address is validated and the POP credentials are verified using ajax.\n// See the page verify.php\n$str = <<<EOS\n$(document).ready(function () {\n    toggleFields(); //call this first so we start out with the correct visibility depending on the selected form values\n    //this will call our toggleFields function every time the POP or Pipe radio buttons change\n    $( \"input[type=radio]\" ).change(function () {\n        toggleFields();\n    \t});\n    $(\"#mydialog\").dialog({\n    \t\tmodal: true,\n    \t\tautoOpen: false,\n    \t\twidth: 500,\n    \t}); \n\t$(\".ui-dialog-titlebar-close\").css(\"display\",\"none\");\n\t$(\".ui-dialog-content\").css(\"margin\", \"10px\");\n\t$(\".ui-dialog\").css(\"border\",\"3px solid DarkGray\");\n\t$(\".ui-dialog-content\").css(\"font-size\", \"18px\");\n\t});\n\n\n//this toggles the visibility of our the fields for input of POP credentials depending on the currently \n//selected value of the 'Collection Method' radio buttons\nfunction toggleFields() {\n\tif ($(\"input[name=cmethod]:checked\").val() == \"POP\") {\n\t\t$(\"#formbtm\").css(\"margin-top\", \"\");\n        $(\"#pop\").show();\n    } else {\n        $(\"#formbtm\").css(\"margin-top\", \"-20px\");\n       \t$(\"#pop\").hide();\n    }\n}\n\nfunction mynotice(msg) {\n\t$(\"#mydialog\").html(msg);\n\t$(\"#mydialog\").dialog(\"option\",{buttons:{}});\n\t$(\"#mydialog\").dialog(\"open\");\n}\n\nfunction myalert(msg) {\n\t$(\"#mydialog\").html(msg);\n\t$(\"#mydialog\").dialog(\"option\",{buttons:{\"OK\": function() {\n        \t\t\t\t$(this).dialog(\"close\");}}});\n    $(\"#mydialog\").dialog(\"open\");\n}\n\nfunction mysubmit(upd) {\n\tvar myform = document.getElementById(\"sbmConfigEdit\");\n    if (upd)\n    \t$(\"input[name=update]\").val(1);\n    myform.submit();\n    \t\n}\n\nfunction myconfirm(msg) {\n\t$(\"#mydialog\").html(msg);\n\t$(\"#mydialog\").dialog(\"option\",\n\t\t{buttons:{\"Yes\": function()\n\t\t\t{\n\t\t\t\tmysubmit(1);\n\t\t\t\t$(this).dialog(\"close\");\n            }, \n        \"No\": function()\n        \t{\n        \t\t$(this).dialog(\"close\");\n        \t}\n        }\n    });\n    $(\"#mydialog\").dialog(\"open\");\t\n}\n\n$(\"#sbmConfigEdit\").submit(function( event ) {\n\tvar srvr = $(\"input[name=pop3server]\").val();\n\tvar sadr = $(\"input[name=submitadr]\").val();\n\tvar pwd = $(\"input[name=pw]\").val();\n\tvar ln = $(\"#mylistname\").text();\n\tvar myjob = ($(\"input[name=cmethod]:checked\").val() ==\"Pipe\") ? \"validate\" : \"verify\";\n\t\t    \t\t\n\tif ($(\"input[name=submitOK]:checked\").val() == \"No\") {\n\t\tif (!prevvals) \n\t\t\tmysubmit(0);\n\t\telse {\n\t\t\tmyconfirm (\"Are you <strong>absolutely sure</strong> that you want to delete email submission data for this list?\");\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (sadr=='') {\n\t\tmyalert(\"You cannot allow email submission of messages without specifying a submission address!\");\n\t\treturn false;\n\t}\n\t\n\tif ((adrs != null) && (adrs[sadr] != null) && (adrs[sadr] != ln)) {\n\t\tmyalert(\"This submission address is already used by another list. <strong>Two lists cannot have the same submission address.</strong>\");\n\t\treturn false;\n\t}\n\t\n\tevent.preventDefault();\n\tif (myjob == 'verify') {\n\t\tif ((srvr=='') || (pwd=='')) {\n\t\t\tmyalert(\"You cannot collect messages with POP without specifying a server and a password!\");\n\t\t\treturn false;\n\t\t}\n\t\tmynotice('Verifying POP credentials<img style=\"width:40px; height:40px; display:block; margin-left:auto; margin-right:auto; margin-top: 10px;\" src=\"images/busy.gif\">');\n\t}\n\t\n\t$.post( \"?pi=submitByMailPlugin&page=sbmajax&ajaxed=1\", {job:myjob, server:srvr, user:sadr, pass:pwd}, function (data) { \n\t\t\tif (data == 'OK') {\n\t\t\t\tif (($(\"input[name=mdisposal]:checked\").val() == \"Queue\") && ($(\"input[name=confirm]:checked\").val() == \"No\")) \n\t\t\t\t\tmyconfirm(\"Are you <strong>absolutely sure</strong> that you want to queue messages mailed in, without confirming with the list administrator?\");\n\t\t\t\telse\n\t\t\t\t\tmysubmit(1);\n\t\t\t} else {\n\t\t\t\tif (data == 'NO')\n\t\t\t\t\tmyalert (\"User name, server, and password do not verify!\");\n\t\t\t\telse\n\t\t\t\t\tmyalert(\"Invalid email address for message submission!\");\n\t\t\t}\n\t\t}, \"text\").fail( function() {\n\t\t\t\tmyalert(\"Connection to server failed: cannot verify address!\");\n\t\t\t\t}\n\t\t\t);\n});\n</script>\n<style>\n.ui-dialog{top:30% !important}\n</style>\nEOS;\n// <style> above is there to allow vertical centering of these modal dialogs. Special thanks to \n// Mariela Zarate for coming up with this.\nprint($str);\n?>"], "fixing_code": ["<?php\n\n/**\n * submitByMail plugin version 1.0b2.9a\n * \n *\n * @category  phplist\n * @package   submitByMail Plugin\n * @author    Arnold V. Lesikar\n * @copyright 2014 Arnold V. Lesikar\n * @license   http://www.gnu.org/licenses/gpl.html GNU General Public License, Version 3\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n * For more information about how to use this plugin, see\n * http://resources.phplist.com/plugins/submitByMail .\n * \n */\nrequire_once dirname(__FILE__) . \"/submitByMailPlugin/sbmGlobals.php\";  \t// __DIR__ not consistent with PHP 5.x earlier than 5.3\nrequire_once dirname(__FILE__) . \"/submitByMailPlugin/PEAR/Mail/mimeDecode.php\";\n/**\n * Registers the plugin with phplist\n * \n * @category  phplist\n * @package   conditionalPlaceholderPlugin\n */\n\nclass submitByMailPlugin extends phplistPlugin\n{\n    // Parent properties overridden here\n    public $name = 'Submit by Mail Plugin';\n    public $version = '1.0b2.9a';\n    public $enabled = false;\n    public $authors = 'Arnold Lesikar';\n    public $description = 'Allows messages to be submitted to mailing lists by email';\n    public $coderoot; \t// coderoot relative to the phplist admin directory\n    public $DBstruct =array (\t//For creation of the required tables by Phplist\n    \t\t'escrow' => array(\n    \t\t\t\"token\" => array(\"varchar(10) not null primary key\", \"Token sent to confirm escrowed submission\"),\n    \t\t\t\"file_name\" => array(\"varchar(255) not null\",\"File name for escrowed submission\"),\n    \t\t\t\"sender\" => array(\"varchar(255) not null\", \"From whom?\"),\n    \t\t\t\"subject\" => array(\"varchar(255) not null default '(no subject)'\",\"subject\"),\n    \t\t\t\"listid\" => array(\"integer not null\",\"List ID\"),\n    \t\t\t\"listsadressed\" => array(\"blob not null\", \"Array of list ids targeted, serialized\"),\n    \t\t\t\"expires\" => array (\"integer not null\", \"Unix time when submission expires without confirmation\")\n\t\t\t), \n\t\t\t'list' => array(\n\t\t\t\t\"id\" => array(\"integer not null primary key\", \"ID of the list associated with the email address\"),\n\t\t\t\t\"pop3server\" => array (\"varchar(255) not null\", \"Server collecting list submissions\"),\n\t\t\t\t\"submissionadr\" => array (\"varchar(255) not null\", \"Email address for list submission\"),\n\t\t\t\t\"password\" => array (\"varchar(255)\",\"Password associated with the user name\"),\n\t\t\t\t\"pipe_submission\" => array (\"tinyint default 0\", \"Flags messages are submitted by a pipe from the POP3 server\"),\n\t\t\t\t\"confirm\" => array (\"tinyint default 1\", \"Flags email submissions are escrowed for confirmation by submitter\"),\n\t\t\t\t\"queue\" => array (\"tinyint default 0\", \"Flags that messages are queued immediately rather than being saved as drafts\"),\n\t\t\t\t\"template\" => array(\"integer default 0\", \"Template to use with messages submitted to this address\"),\n\t\t\t\t\"footer\" => array(\"text\",\"Footer for a message submitted to this address\")\n\t\t\t),\n\t\t);  \t\t\t\t// Structure of database tables for this plugin\n\t\n\tpublic $tables = array ();\t// Table names are prefixed by Phplist\n\tpublic $commandlinePluginPages = array ('pipeInMsg', 'collectMsgs'); \n\tpublic $publicPages = array ('confirmMsg'); \n\t\n\tpublic $settings = array(\n    \t\"cliPath\" => array (\n      \t\t'value' => '',\n     \t\t'description' => \"Complete path to command line PHP binary (leave empty if you don't know it)\",\n      \t\t'type' => \"text\",\n      \t\t'allowempty' => 1,\n      \t\t'category'=> 'general',),\n      \n    \t\"publicPageProtocol\" => array (\n    \t\t'value' => 1,\n    \t\t'description' => \"Use 'http' for public page links instead of 'https' (Yes or No)\",\n    \t\t'type' => \"boolean\",\n      \t\t'allowempty' => 1,\n      \t\t'category'=> 'general',), \n      \t\n\t\t\"escrowHoldTime\" => array (\n      \t\t'value' => 1,\n     \t\t'description' => 'Days escrowed messages are held before being discarded',\n      \t\t'type' => \"integer\",\n      \t\t'allowempty' => 0,\n      \t\t\"max\" => 7,\n      \t\t\"min\" => 1,\n      \t\t'category'=> 'general',),\n      \n\t\t\"manualMsgCollection\" => array (\n    \t\t'value' => 1,\n    \t\t'description' => 'Use browser to collect messages submitted by POP (Yes or No)',\n    \t\t'type' => \"boolean\",\n      \t\t'allowempty' => 1,\n      \t\t'category'=> 'general',), \n      \t\n      \t\"popTimeout\" => array (\n      \t\t'value' => 0,\n    \t\t'description' => 'POP3 timeout in seconds; set 0 to use default value',\n    \t\t'type' => \"integer\",\n      \t\t'allowempty' => 1,\n      \t\t\"max\" => 120,\n      \t\t\"min\" => 0,\n      \t\t'category'=> 'general',), \n    // Note that the content type of the message must be multipart or text\n    // The settings below apply to attachments.\n    // Note also that we do not allow multipart attachments.\n\t\t\"allowedTextSubtypes\" => array(\n\t\t\t'value' => 'plain, html',\n    \t\t'description' => 'MIME text/subtypes allowed for attachments',\n    \t\t'type' => 'text',\n    \t\t'allowempty' => 0,\n      \t\t'category' => 'general',),\n      \t\t\n\t\t'allowedImageSubtypes' => array(\n\t\t\t'value' => 'gif, jpeg, pjpeg, tiff, png',\n    \t\t'description' => 'image/subtypes allowed for attachments',\n    \t\t'type' => 'text',\n    \t\t'allowempty' => 1,\n      \t\t'category' => 'general',),\n      \t\t\n      \t\"allowedMimeTypes\" => array (\n    \t\t'value' => 'application/pdf',\n    \t\t'description' => 'Additional MIME content-types allowed for attachments',\n    \t\t'type' => 'text',\n    \t\t'allowempty' => 1,\n      \t\t'category' => 'general',),\n      \t);\n\t\n\t// Arrays for the menu system\n\tpublic $pageTitles = array (\"configure_a_list\" => \"Configure a List for Submission by Email\",\n\t\t\t\t\t\t\t\t\"collectMsgs\" => \"Collect Messages Submitted by Email\",\n\t\t\t\t\t\t\t\t\"generateScripts\"=> \"Generate Scripts for Mailbox Pipes and Cron\");\n\tpublic $topMenuLinks = array('configure_a_list' => array ('category' => 'config'),\n\t\t\t\t\t\t\t\t  'collectMsgs' => array ('category' => 'campaigns'), \n\t\t\t\t\t\t\t\t  'generateScripts' => array('category' => 'config')\n\t\t\t\t\t\t\t\t  );\t\n\t\n\t// Properties particular to this plugin  \t\n  \tpublic $escrowdir; \t// Directory for messages escrowed for confirmation\n  \t\n  \tprivate $errMsgs = array(\n  \t\t\t\t\t\t\t\"nopipe\" => 'Msg discarded: pipe not allowed for this list',\n  \t\t\t\t\t\t\t\"nodecode\" => 'Msg discarded: cannot decode',\n  \t\t\t\t\t\t\t\"badbox\" => 'Msg discarded: bad mailbox',\n  \t\t\t\t\t\t\t'nolists' => 'Msg discarded: no lists addressed',\n  \t\t\t\t\t\t\t\"unauth\" => \"List '%s': Msg discarded; unauthorized sender\",\n  \t\t\t\t\t\t\t'unauthp' => \"List '%s': Msg discarded: sent to list(s) sender does not own\",\n  \t\t\t\t\t\t\t\"badmain\" => \"List '%s': Msg discarded; bad type for main message\",\n  \t\t\t\t\t\t\t\"badtyp\" => \"List '%s': Msg discarded; mime type not allowed\",\n  \t\t\t\t\t\t\t\"noattach\" => \"List '%s': Msg discarded; attachments not permitted\",\n  \t\t\t\t\t\t\t\"toodeep\" => \"List '%s': Msg discarded; mime nesting too deep\",\n  \t\t\t\t\t\t\t\"badinlin\" => \"List '%s': Msg discarded; inline type not allowed\"\n  \t\t\t\t\t\t\t);\n    private $days = array ('', 'one day', 'two days', 'three days', 'four days', 'five days', 'six days', 'seven days');\n  \t\t\t\t\t\t\t\n  \tpublic $numberPerList = 20;\t\t// Number of lists tabulated per page in listing\n  \t\n\tprivate $allowedMimes = array(); // Allowed MIME subtypes keyed on types\n\tprivate $allowedMain = array(); // MIME subtypes allowed as main message, keyed\n\t\t\t\t\t\t\t\t\t// on types\n\tpublic $deleteMsgsOnReceipt = CL_EXPUNGE;\t// Applies to POP mailboxes. Normally we\n\t\t\t\t\t\t\t\t\t\t// set this flag to CL_EXPUNGE. It is set to 0 only\n\t\t\t\t\t\t\t\t\t\t// for testing and debugging the POP routines.\n\t// Parameters for the message we are dealing with currently\n\t// If only PHP had genuine scope rules, so many private class properties would not \n\t// be necessary!!\n\tpublic $lid = 0;\t\t// ID of the list whose mailbox is handling the message (the first list sent to)\n\tpublic $alids = array();\t// IDs for the lists receiving current message\n\tpublic $sender = '';\t\t// Sender of the current message\n\tpublic $displayName = '';\t// Name of the sender\n\tpublic $subj = '';\t\t\t// Subject line of the current message\n\tprivate $mid;\t\t\t\t// Message ID for current message being saved or queued\n\tprivate $holdTime;\t\t\t// Days to hold escrowed message\n\tprivate $textmsg;\t// Text version of current message\t\n\tprivate $htmlmsg;\t// HTML version of current message\n\tprivate $embeddedImage; \t// Flag msg constains embedded image. This is an error\n\tprivate $publicScheme;\t\t// phpList does not set public page links from command line pages\n\t\n\tconst ONE_DAY = 86400; \t// 24 hours in seconds\n\n  \tpublic function __construct()\n    {\n    \tif (!function_exists('imap_open') || !$this->isSecureConnection()) { // Don't have prerequisites\n    \t\t$this->uninitialize();\n    \t\tparent::__construct();\n    \t\treturn;\n    \t}\n    \t\n    \t$this->coderoot = dirname(__FILE__) . '/submitByMailPlugin/';\n\t   \t\n\t   \t$this->escrowdir = $this->coderoot . \"escrow/\";\n\t\tif (!is_dir($this->escrowdir))\n\t\t\tmkdir ($this->escrowdir);\n\t\t\n\t\t$this->holdTime =getConfig(\"escrowHoldTime\");\t\n\t\t\n\t\t// Build array of allowed MIME types and subtypes\n\t\t$str = getConfig('allowedTextSubtypes');\n    \t$str = strtolower(str_replace(' ','', $str));\n    \t$this->allowedMimes['text'] = explode(',', $str);\n    \t\n    \t$str = getConfig('allowedImageSubtypes');\n    \t$str = strtolower(str_replace(' ','', $str));\n    \t$this->allowedMimes['image'] = explode(',', $str);\n    \t\n    \t$str = getConfig('allowedMimeTypes');\n    \t$str = strtolower(str_replace(' ','', $str));\n    \t$addTypes = explode (',', $str);\n    \tforeach ($addTypes as $val) {\n    \t\t$partial = explode('/', $val);\n    \t\t$this->allowedMimes[trim($partial[0])][] = trim($partial[1]);    \t\n    \t}\n    \t\n    \t// Don't let the admin add to the multipart types\n    \t$this->allowedMimes['multipart'] = array('mixed', 'alternative', 'related');\n    \t$this->allowedMain = array('text' => array('plain', 'html'), \"multipart\" => $this->allowedMimes['multipart']);\n    \t\n    \t$this->pop_timeout = (int) getConfig(\"popTimeout\");\n    \tif ($this->pop_timeout) {\n    \t\timap_timeout (IMAP_OPENTIMEOUT, $this->pop_timeout);\n    \t\timap_timeout (IMAP_READTIMEOUT, $this->pop_timeout);\n    \t\timap_timeout (IMAP_WRITETIMEOUT, $this->pop_timeout);\n    \t}\n    \t\n    \t// Properly set public scheme; phpList always sets this to 'http' if running\n    \t// from command line\n    \t$this->publicScheme = getConfig(\"publicPageProtocol\")? 'http' : 'https';\n\n    \tparent::__construct();\n\t\n    \t/* Delete escrowed messages that have expired\n    \t   Do this here, because we don't want the user to have to set up a cron script\n    \t   for this. We don't have the name of the relevant database table until after\n    \t   the parent is constructed. */\n    \t\n    \t// This class is constructed before the plugin is initialized. Make\n    \t// sure we have the 'escrow' table before attempting to delete expired msgs\n    \tif (Sql_Table_Exists($this->tables['escrow'])) {\n    \t\t$this->deleteExpired();\n    \t}    \n\t}\n   \t\n   \t// Remove initialization flag into phpList configuration table to prevent\n   \t// use of plug in after it is found that we do not have the proper prequisites\n   \tprivate function uninitialize() {\n   \t\tSql_Query(sprintf(\"delete from %s where item ='%s'\", $GLOBALS['tables']['config'], \n    \t\t\t\t\tmd5('plugin-submitByMailPlugin-initialised')));\n   \t}     \n   \t\n    // Determine if we have a secure https connection.\n    // This code was adapted from the comment by temuraru on the Stack Overflow page\n    // at http://stackoverflow.com/questions/1175096/how-to-find-out-if-youre-using-https-without-serverhttps\n    //\n    // Why do we need this? We cannot tie a list to a POP account without sending a \n    // password between the browser and server. Without a secure connection, the list\n    // might become open to spammers. The danger is less within mail accounts connected to \n    // a pipe, but still spammers could learn that the account is connected to a mailing list.\n    //\n    private function isSecureConnection() {\n    \tif ($GLOBALS['commandline']) return true; \t// Command line is internal and secure (pipe \n    \t\t\t\t\t\t\t\t\t\t\t\t// and cron and assuming SSH if on terminal)\n    \tif (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') return true;\n    \t// The following line applies for servers behind a load balancer\n\t\tif (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' || !empty($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] == 'on') return true;\n\t\treturn false;\n\t}\n\t\n    # Startup code, all other objects are constructed \n    # Returns false when we do not have the prereqs, which means we cannot start\n    # Also returns false when not running off a secure connection\n    public function activate() {\n        return true;\n  \t}\n\n\t// Delete expired messages in escrow\n    private function deleteExpired() {\n    \t$query = sprintf(\"select token, file_name from %s where expires < %d\", $this->tables['escrow'], time());\n    \t$result = Sql_Query ($query);\n    \twhile ($row = Sql_Fetch_Row($result)) {\n    \t\tunlink ($this->escrowdir . $row[1]);\n    \t\t$query = sprintf (\"delete from %s where token = '%s'\", $this->tables['escrow'], $row[0]);\n    \t\tSql_Query($query);\n    \t}\n    }\n\n  \t// Provide complete server name in a form suitable for a SSL/TLS POP call using iMap function\n  \tprivate function completeServerName($server) {\n  \t\treturn '{' . $server . submitByMailGlobals::SERVER_TAIL . '}';\n  \t}\n  \t\n  \tprivate function getCliPhp() {\n  \t\tif ($cmd = getConfig(\"cliPath\"))\n  \t\t\treturn $cmd;\n  \t\texec('which php-cli', $output);\n  \t\tif ($output)\n  \t\t\treturn trim($output[0]);\n  \t\texec('which php', $output);\n  \t\treturn trim($output[0]);\n  \t}\n  \t\n  \tpublic function ckPHPversion() {\n  \t\tif ($cmd = $this->getCliPhp()) {\n  \t\t\texec (\"$cmd -v\", $output);\n  \t\t\tif (preg_match ('/PHP\\s*(\\d\\d?\\.\\d\\d?)/', $output[0], $match))\n  \t\t\t\treturn $match[1];\n  \t\t}\n  \t\treturn \"\";\n  \t}\n  \t\n  \t// Generate a command line PHP command to be used by emailajax.php\n\tpublic function makeCliCommand($page) {\n\t\tif ($cmd = $this->getCliPhp()) {\n\t\t\t$cmd = $cmd . ' -q ' . dirname(dirname($this->coderoot)) . '/index.php ';\n\t\t\t$cmd .= '-c' . realpath($GLOBALS[\"configfile\"]) . \" -p$page -msubmitByMailPlugin\";\n\t\t\treturn $cmd;\n\t\t}\n\t\treturn '';\n\t}\n  \t\n  \tpublic function adminmenu() {\n  \t\t// Adjust what adminMenu returns for different circumstances.\n\t   \tif (!isSuperUser()) { \n    \t\t// Make sure that only super users get to see the adminMenu.\n    \t\t$this->topMenuLinks = $this->pageTitles = array(); \n    \t} else if (!getConfig(\"manualMsgCollection\")) {\n    \t\t\t// Make sure that we don't show the message collection page if we don't allow\n    \t\t\t// manual collection of messages, remove that page from the menus.\n    \t\t\tunset($this->topMenuLinks[\"collectMsgs\"]);\n    \t\t\tunset($this->pageTitles[\"collectMsgs\"]);\n    \t}\n    \treturn $this->pageTitles;\n\t}\n\t\n\tpublic function allowMessageToBeQueued($messagedata = array()) {\n\t\tif (($this->lid) && ($this->embeddedImage)) \n\t\t\treturn \"Message cannot be sent with unprocessed embedded image.\";\n    \tif (($this->lid) && ($this->subj == '(no subject)')) { \n    \t\t\t//$this->lid is nonzero only if it is this plugin that is processing the\n    \t\t\t//message rather than Phplist's send_core.php\n    \t\treturn \"Message cannot be sent with missing subject line.\";\n\t\t}\n    \treturn '';\n  \t}\n\t\t\n\tprivate function generateRandomString($length = 10) {\n    \treturn substr(sha1(mt_rand()), 0, $length);\n\t}\n\t\n  \tpublic function cleanFormString($str) {\n\t\treturn sql_escape(strip_tags(trim($str)));\n\t}\n\t\n\t// Produce button links to pages outside the plugin\n\tpublic function outsideLinkButton($name, $desc, $url = '', $extraclass = '',$title = '' ) {\n\t\t$str = PageLinkButton($name, $desc, $url, $extraclass, $title);\n\t\t$str = str_replace(\"&amp;pi=submitByMailPlugin\", '', $str);\n\t\treturn $str;\n\t}\n\t\n\tpublic function myFormStart($action, $additional) {\n\t\t$html = formStart($additional);\n\t\tpreg_match('/action\\s*=\\s*\".*\"/Ui', $html, $match);\n\t\t$html = str_replace($match[0], 'action=\"' . $action .'\"', $html);\n\t\treturn $html;\n\t}\n    \n    // Get an array of the mailing lists with submission address and list id\n    public function getTheLists($name='') {\n    \tglobal $tables;\n    \t$A = $tables['list']; \t// Phplist table of lists, including name and id\n\t\t$B = $this->tables['list'];\t// My table holds mail submission data for lists\n\t\t$out = array();\n\t\tif (strlen($name)) {\n\t\t\t$where = sprintf(\"WHERE $A.name='%s' \", $name); \n\t\t}\n    \t$query = \"SELECT $A.name,$B.submissionadr,$A.id FROM $A LEFT JOIN $B ON $A.id=$B.id {$where}ORDER BY $A.name\";\n    \tif ($res = Sql_Query($query)) {\n    \t\t$ix = 0;\n    \t\twhile ($row = Sql_Fetch_Row($res)) {\n    \t\t\t$out[$ix] = $row;\n    \t\t\t$ix += 1;\n    \t\t}\t\n    \t}\n    \treturn $out; \n    }\n          \n    // Get the numberical id of a list from its email submission address\n    public function getListID ($email) {\n    \t$out = 0;\n    \tif (preg_match('/<(.*)>/', $email, $match))\n\t\t\t$email = $match[1];$query = sprintf(\"select id from %s where submissionadr='%s'\", $this->tables['list'], trim($email));\n    \t$res = Sql_Query($query);\n    \t$row = Sql_Fetch_Row($res);\n    \treturn $row[0];\n    }\n    \n    public function getCredentials ($email) {\n    \t$query = sprintf(\"select pop3server, password from %s where submissionadr='%s'\",\n    \t\t$this->tables['list'], $email);\n    \treturn Sql_Fetch_Assoc_Query($query);\n    }\n    \n    // Returns array of connection parameters for the lists receiving messages via POP\n    public function getPopData() {\n    \t$out = array();\n    \t$query = sprintf(\"select id, pop3server, submissionadr, password from %s where pipe_submission=0\",\n    \t\t$this->tables['list']);\n    \t$result = Sql_Query($query);\n    \twhile ($row = Sql_Fetch_Assoc($result))\n    \t\t$out[] = $row;\n    \treturn $out;\n    }\n        \n    // What to do with messages for a particular list\n    private function getDisposition ($id) {\n    \t$query = sprintf (\"select confirm, queue from %s where id=%d\", $this->tables['list'], $id);\n    \t$row = Sql_Fetch_Array_Query($query);\n    \tif (is_null($row)) return null;\n    \treturn $row[0]? \"escrow\" : ($row[1]? \"queue\" : \"save\"); \n    }\n    \n    public function doQueueMsg($lid) {\n    \t$query = sprintf (\"select queue from %s where id=%d\", $this->tables['list'], $lid);\n    \t$row = Sql_Fetch_Array_Query($query);\n    \treturn $row[0];\n    }\n    \n    public function pipeOK($lid) {\n    \t$query = sprintf (\"select pipe_submission from %s where id=%d\", $this->tables['list'], $lid);\n    \t$row = Sql_Fetch_Array_Query($query);\n    \treturn $row[0];\n    }\n    \n    private function getListTmpltFtr($id) {\n    \t$query = sprintf (\"select template, footer from %s where id=%d\", $this->tables['list'], $id);\n    \t$row = Sql_Fetch_Row_Query($query);\n    \treturn $row;\n    }\n    \n    private function getListAdminAdr($listId) {\n    \t$A = $GLOBALS['tables']['admin'];\n    \t$B = $GLOBALS['tables']['list'];\n    \t$query = sprintf (\"select email from %s left join %s on %s.id=%s.owner where %s.id=%d\", $A, $B, $A, $B, $B, $listId ); \n    \t$row = Sql_Fetch_Row_Query($query);\t\n\t\treturn $row[0];\n\t}\n    \n    // Get the email addresses of all the admins\n    private function getAdminAdrs() {\n    \t$query = sprintf(\"select email from %s\", $GLOBALS['tables']['admin']);\n    \t$result = Sql_Query($query);\n    \twhile ($row = Sql_Fetch_Row($result))\n    \t\t$out[] = $row[0];\n    \treturn $out;\n    }\n    \n    private function getOwnerLids ($email) {\n    \t$out = array();\n    \t$A = $GLOBALS['tables']['list'];\n    \t$B = $GLOBALS['tables']['admin'];\n    \t$query = sprintf (\"select %s.id from %s left join %s on %s.id=%s.owner where %s.email='%s'\", $A, $A, $B, $B, $A, $B, $email);\n    \t$result = Sql_Query($query);\n    \twhile ($row = Sql_Fetch_Row($result))\n    \t\t$out[] = $row[0];\n    \treturn $out;\n    }\n    \n    // Return addresses of all superusers\n    private function getSuperAdrs() {\n    \t$query = sprintf (\"select email from %s where superuser=1\", $GLOBALS['tables']['admin']);\n    \t$res = Sql_query($query);\n    \twhile ($row = Sql_Fetch_Row($res))\n    \t\t$out[] = trim($row[0]);\n    \treturn $out;\n    }\n    \n    private function getSenderID($sender) {\n    \t$query = sprintf (\"select id from %s where email='%s'\", $GLOBALS['tables']['admin'], $sender);\n    \t$row = Sql_Fetch_Row_Query($query);\n    \treturn $row[0];\n\t}\n   \n    private function std($str) {\n    \treturn strtolower(trim($str));\n    }\n    \n    // Get out the email address from a string of the form Name<email_address>\n    // Modified to show display name of sender\n\tpublic function cleanAdr ($adr, $setDisplayName=false) { \n\t\tif ($setDisplayName)\n\t\t\t$this->displayName = ''; \n\t\t if (preg_match('/<(.*)>/', $adr, $match)) { \n\t\t\tif ($setDisplayName)\n\t\t\t \t$this->displayName = trim(str_replace($match[0],'', $adr)); \n\t\t\t return trim($match[1]); \n\t\t} \n\t\treturn trim($adr); \n\t}    \n\t\n    // Get filename associated with a MIME part if there is one\n    private function getFn($apart) {\n    \tif (isset($apart->d_parameters['filename']))\n    \t\treturn $apart->d_parameters['filename'];\n    \tif (isset($apart->ctype_parameters['name']))\n    \t\treturn $apart->ctype_parameters['name'];\n    \treturn false;\n    }\n    \n    // Check the structure of one mime part of a message.\n    // Returns an error code or false if there is no problem.\n    private function isBadMime($apart, $lvl) {\n    \t$mimes = $this->allowedMimes;\n    \t$mains = $this->allowedMain;\n    \t$c1 = $this->std($apart->ctype_primary); \n    \t$c2 = $this->std($apart->ctype_secondary);\n    \tif (isset($apart->disposition)) $dp = $this->std($apart->disposition);\n\n    \tif ($lvl > 2)\n    \t\treturn \"toodeep\"; \t// Mime parts too deeply nexted\n    \t\n    \t// Is the part an allowed mime type, subtype:\n    \tif ((!array_key_exists( $c1,$mimes)) || (!in_array($c2, $mimes[$c1])))\n    \t\treturn \"badtyp\";\t\t// Message has a forbidden mime type\n    \t\n    \t// If multipart, check the parts\t\n    \tif ($c1 == 'multipart') {\n    \t\tforeach ($apart->parts as $mypart) {\n   \t\t\tif ($result = $this->isBadMime($mypart, $lvl+1))\t// Return if find bad part\n    \t\t\t\treturn $result;\n    \t\t}\n    \t\treturn false;    \t\t\n    \t} else { // if not multipart, is it OK as attachment or inline?\n    \t\n    \t\t// Do we have a file name? Treat the part as an attachment\n    \t\t// But if its an image it could also be inline even with a file name\n    \t\t$havefn = $this->getFn($apart);\n    \t\t// Don't check for inline images. If we have a file name we can treat the\n    \t\t// image as an attachment, ignoring the inline disposition directive, which \n    \t\t// is misused bu user agents anyway.\n    \t\tif ($havefn) {\n    \t\t\tif (!ALLOW_ATTACHMENTS) return \"noattach\";\t// Have an attachment when none or allowed.\n    \t\t\treturn false; \t// If we got here the file type is an acceptable mime type\n    \t\t}\n    \t\t\n    \t\t// If no file name, but have something other than text or multipart\n    \t\t// Treat it as inline and an error. It is at this point that we catch inline images\n    \t\t// without file names. We could create a file name and treat the image as simply\n    \t\t// an attachment, but it's better to inform the sender of the problem.\n    \t\t// Multipart type is excluded by this point; we are only looking for text types\n    \t\tif (!$havefn && ((!array_key_exists( $c1, $mains)) || (!in_array($c2, $mains[$c1]))))\n    \t\t\treturn \"badinlin\"; \t\t// Forbidden inline attachment\n    \t\treturn false;\n    \t}\n    }  \n    \n    // Get the lists addressed by the message. Return an array of submission addresses\n    // for the lists we're sending to.\n    private function getListsAddressed(&$hdrs) { // A bit more efficient here to call by reference.\n    \t// First find the submission addresses for our lists\n\t\t$sbmAdrs = array();\t\n\t\t$arr = $this->getTheLists();\n\t\tforeach ($arr as $val) {\n\t\t\tif (!$val[1]) continue;\n\t\t\t$sbmAdrs[] = $val[1];\t\t\n\t\t}\t\t\n\t\t// What lists are addressed by the message?\n\t\t$listsSentTo = array();\n\t\t// Some user agents spread multiple addressees to separate lines:\n\t\t$str = preg_replace(\"#\\r?\\n#\", '', $hdrs['to'] . ($hdrs['cc']? (',' . $hdrs['cc']): ''));\n\t\t$tos = explode(',', $str);\t\n\t\tforeach ($tos as $adr) {\n\t\t\t$adr = $this->cleanAdr($adr);\n\t\t\tif (in_array($adr, $sbmAdrs)) $listsSentTo[] = $this->getListID($adr);\t \n\t\t}\n\t\treturn $listsSentTo;\n    }\n    \n    private function isUnauthorized($from) {\n    \t$authSenders[] = $this->getListAdminAdr($this->lid); // Admin for this list\n\t\t// Authorized senders are the list administrator and superusers\n\t\t$isSuperUser = in_array($this->sender, $this->getSuperAdrs());\n\t\tif ($isSuperUser) $isAdmin = 1;\t\t\t// Can send to all lists\n\t\telse $isAdmin = in_array($this->sender, $this->getAdminAdrs());\n\t\tif (!$isAdmin) return 'unauth';\t\n\t\tif (!$isSuperUser) {\t\t\t\t\t// If not a super user, can send only to own lists\n\t\t\t$owned = $this->getOwnerLids($this->sender);\n\t\t\t/* We should respond to a list owner, even if the message is not sent\n\t\t\tto lists owned by that person. The code 'unauth' suppresses a response.\n\t\t\tif (!array_intersect ($this->alids, $owned))\n\t\t\t\treturn 'unauth';\t\t\t\t\t*/\t\t\t\n\t\t\tif (array_diff($this->alids, $owned))\n\t\t\t\treturn 'unauthp';\n\t\t}\n\t\treturn false;\n\t}\n   \n \t// Check if the message is acceptable; $mbox is the address at which the email arrived.\n    // We need this so that in case of a submission to multiple lists we can tell\n    // which list we are sending this instance of the message to. In such a case we do\n    // not do anything, unless $mbox represents the first list the message is sent to.\n    // If there is a problem with the message, returns a short error string.\n    //\n    // As a side effect this function sets various class properties for the current message\n    // such as $this->subj and $this->sender\n    private function isBadMessage ($msg, $mbox) {  // Maybe check message and attachment sizes here?\n    \t$isSuperUser = $isAdmin = 0;\n    \t$mbox = $this->cleanAdr($mbox);\t// The user might screw up the argument in a pipe\n    \t$decoder = new Mail_mimeDecode($msg);\n\t\t$params['include_bodies'] = false;\n\t\t$params['decode_bodies']  = false;\n\t\t$params['decode_headers'] = true;\n\t\t$out = $decoder->decode($params);\n\t\t$hdrs = $out->headers;\n\n\t\t$this->sender = $this->cleanAdr($hdrs['from'], true); // Modified to show display name of sender\n\t\tif (!($hdrs['to'] && $this->sender)) return 'nodecode';\n\t\t\n\t\t$this->subj = trim($hdrs['subject']); \n\t\tif (!$this->subj) $this->subj = '(no subject)'; // Need something here, to show in\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// messages.\n\t\t\n\t\t// Find the lists the message is addressed to\n\t\t// Decide which list is going to handle the message for the others\n\t\t$this->lid = $this->getListID($mbox);\n\t\tif (!$this->lid) return \"badbox\";\n\t\t// The first list in the address list is the one which will handle the message\n\t\t// If the current mailbox does not represent that list, quit\n\t\t$this->alids = $this->getListsAddressed($hdrs);\t// List IDs of lists receiving the message\n\t\tif (!$this->alids) {\n\t\t\t$this->sender = '';\t// No lists addressed, so no response needed!\n\t\t\treturn 'nolists';\n\t\t}\n\t\t// Quit if this is not the list that is supposed to handle the message\n\t\tif ($this->lid != $this->alids[0]) return 'not_ours'; \n\t\t\n\t\t// Check authorizations for the lists addressed\t\n\t\tif ($errcode = $this->isUnauthorized($hdrs['from'])) {\n\t\t\tif ($errcode == 'unauth') $this->sender = '';\t// Don't respond to unauthorized senders!\n\t\t\treturn $errcode;\n\t\t}\n\t\t\n\t\t// If we have a message piped in, check if the pipe is allowed.\n\t\tif (($GLOBALS['commandline']) && ($_GET['page'] == 'pipeInMsg') && (!$this->pipeOK($this->lid)))\n\t\t\treturn 'nopipe';\n\t\t\n\t\t// Check that we have an acceptable MIME structure\n\t\t$mains = $this->allowedMain;\n\t\t$c1 = $this->std($out->ctype_primary); \n    \t$c2 = $this->std($out->ctype_secondary);\n\t\tif ((!array_key_exists( $c1, $mains)) || (!in_array($c2, $mains[$c1]))) \n    \t\treturn \"badmain\";\t\t// The main message is not proper text or multipart\n    \tif ($c1 == 'text') \t// Must be plain or html here\n    \t\treturn false;\n    \telse { \t// Multipart\n    \t\tforeach ($out->parts as $mypart) {\n    \t\t\tif ($result = $this->isBadMime($mypart, 1))\t// Return if find bad part\n    \t\t\t\treturn $result;\n    \t\t}\n    \treturn false;\t// All parts OK \n    \t}  \t\n\t}\n\t\n\t// Hold message for confirmation by the sender\n\t// Save msg in the 'escrow' subdirectory and save location and message information\n\t// in the Phplist database. \n\tprivate function escrowMsg($msg) {\n\t\t$tfn = tempnam ($this->escrowdir , \"msg\" );\n\t\tfile_put_contents ($tfn, $msg);\n\t\t$fname = basename($tfn);\n\t\t$tokn = $this->generateRandomString();\n\t\t$xpir = time() + self::ONE_DAY * $this->holdTime;\n\t\t// Modified the lines below so that we can show the display name of the sender\n\t\t$sndr = ($this->displayName? $this->displayName . ' <' . $this->sender . '>' : $this->sender);\n\t\t$query = sprintf (\"insert into %s values ('%s', '%s', '%s','%s', %d, '%s', %d)\", $this->tables['escrow'], $tokn, $fname, \n\t\t\tsql_escape($sndr), sql_escape($this->subj), $this->lid, sql_escape(serialize ($this->alids)), $xpir);\n\t\tSql_Query($query);\n\t\treturn $tokn;\n\t}\n\n\t// Some email user agents separate sections of html messages showing email attachments\n\t// inline. Apple Mail is an example of this. The result can be multiple html and body tags in\n\t// tags in a message. There may even be a DOCTYPE tag. We remove all these tags\n\t// to produce the kind of HTML that the Phplist editor produces.\n\t//\n\t// User agents may produce all sorts of mixtures of plain text and html, for example\n\t// a long text message with an html part at the end, following an inline attachment.\n\t// For Phplist we separate the text and html messages, and there is nothing that we \n\t// can do if the text and html of the message do not have similar content \n\tprivate function cleanHtml($html) {\n\t\t$html = preg_replace('/^\\s*<!doctype[^>]*>\\s*$/im', \"\", $html);\n\t\t$html = preg_replace('#<head[^>]*>.*</head>#imsU', '', $html);\n\t\t$html = preg_replace('#<html.*>|<body.*>#isU', '', $html);\n\t\t$html = str_ireplace(\"</html>\", \"\", $html); \n\t\t$html = str_ireplace(\"</body>\", \"\", $html);\n\t\t$html = preg_replace('/^\\s*\\r?\\n/m', '', $html);\n\t\treturn $html;\n\t}\n\t\n\t/*\tThe following methods are not useable independently. They have been pulled out\n\t\tout of receiveMsg in order to make the logic clearer and to ease testing.    */\n\t// Save the $messagedata array in the database. This code if taken almost verbatim\n\t// from the Phplist file sendcore.php. We save the message data only after setting\n\t// the message status. Requires the class property $this->mid to be set.\n\tprivate function saveMessageData($messagedata) {\n\t\tglobal $tables;\n\t\t$imageWarning = \n\t\t\t'<p style=\"color:red; font-weight:bold;\">Embedded images not allowed in email\n\t\t\tsubmissions. The image below cannot be displayed.</p>';\n\t\t$query = sprintf('update %s  set '\n     \t\t. '  subject = ?'\n     \t\t. ', fromfield = ?'\n     \t\t. ', tofield = ?'\n     \t\t. ', replyto = ?'\n     \t\t. ', embargo = ?'\n     \t\t. ', repeatinterval = ?'\n     \t\t. ', repeatuntil = ?'\n     \t\t. ', message = ?'\n     \t\t. ', textmessage = ?'\n     \t\t. ', footer = ?'\n     \t\t. ', status = ?'\n     \t\t. ', htmlformatted = ?'\n     \t\t. ', sendformat  =  ?'\n     \t\t. ', template  =  ?'\n     \t\t. ' where id = ?', $tables[\"message\"]);\n     \t$htmlformatted = ($messagedata[\"sendformat\"] == 'HTML'); \n     \t\n     \tif ($this->embeddedImage) {\n     \t\t$messagedata[\"message\"] = $imageWarning . $messagedata[\"message\"];\n     \t}\n  \t\t\n  \t\t$result = Sql_Query_Params($query, array(\n       \t\t$messagedata['subject']\n     \t\t, $messagedata['fromfield']\n     \t\t, $messagedata['tofield']\n     \t\t, $messagedata['replyto']\n     \t\t, sprintf('%04d-%02d-%02d %02d:%02d',\n        \t\t$messagedata['embargo']['year'],$messagedata['embargo']['month'],$messagedata['embargo']['day'],\n        \t\t$messagedata['embargo']['hour'],$messagedata['embargo']['minute'])\n     \t\t, $messagedata['repeatinterval']\n     \t\t\t, sprintf('%04d-%02d-%02d %02d:%02d',\n        \t\t$messagedata[\"repeatuntil\"]['year'],$messagedata[\"repeatuntil\"]['month'],$messagedata[\"repeatuntil\"]['day'],\n        \t\t$messagedata[\"repeatuntil\"]['hour'],$messagedata[\"repeatuntil\"]['minute'])\n     \t\t, $messagedata[\"message\"]\n     \t\t, $messagedata[\"textmessage\"]\n     \t\t, $messagedata[\"footer\"]\n     \t\t, $messagedata['status']\n     \t\t, $htmlformatted ? '1' : '0'\n     \t\t, $messagedata[\"sendformat\"]\n     \t\t, $messagedata[\"template\"]\n     \t\t, $this->mid));\n     \t\t\n     \t// Have to save the target lists in the 'listmessage' table.\n     \tforeach ($this->alids as $listid) {\n      \t\t$query = \"replace into %s (messageid,listid,entered) values(?,?,current_timestamp)\";\n      \t\t$query = sprintf($query,$GLOBALS['tables']['listmessage']);\n      \t\tSql_Query_Params($query,array($this->mid,$listid));\n    \t}\n     \treturn $this->mid; \t// Return private message ID so we can use it in other files\n\t}\n\t\n\t// Figure out what is going on with a MIME part and process it accordingly\n\tprivate function parseAPart($apart) {\n\t\tglobal $tables;\n\t\t$c1 = $this->std($apart->ctype_primary); \n    \t$c2 = $this->std($apart->ctype_secondary);\n\n    \t// If multipart, check the parts\t\n   \t\tif ($c1 == 'multipart') {\n    \t\tforeach ($apart->parts as $mypart) {\n  \t\t\t\t$this->parseaPart ($mypart);\n    \t\t}  \t\t\n    \t} else { // if not multipart, is it OK as attachment or inline?\n\t\t\t// Do we have a file name? Treat the part as an attachment\n\t   \t\tif (($attachname = $this->getFn($apart)) && strlen($apart->body)) {\n    \t\t\t// Handle atttachment\n    \t\t\tlist($name,$ext) = explode(\".\",basename($attachname));\n        \t\t# create a temporary file to make sure to use a unique file name to store with\n        \t\t$newfile = tempnam($GLOBALS[\"attachment_repository\"],$name);\n        \t\tunlink ($newfile); \t// Want the name, not the file that tempnam creates\n        \t\t$newfile .= \".\".$ext;\n        \t\tfile_put_contents($newfile, $apart->body);\n         \t\tSql_query(sprintf('insert into %s (filename,remotefile,mimetype,description,size) values(\"%s\",\"%s\",\"%s\",\"%s\",%d)',\n          \t\t\t$tables[\"attachment\"],\n          \t\t\tbasename($newfile), \n          \t\t\t$attachname, \n          \t\t\t$c1 . '/' . $c2, \n          \t\t\t'From submitted email', \n          \t\t\tfilesize($newfile))\n          \t\t);\n          \t\t$attachmentid = Sql_Insert_Id();\n      \t\t \tSql_query(sprintf('insert into %s (messageid,attachmentid) values(%d,%d)',\n          \t\t\t$tables[\"message_attachment\"],$this->mid,$attachmentid));\n          \t}  else {\t// if not multipart and not attachment must be text/plain or text/html\n    \t\t\t\tif ($c2 == 'plain') {\n    \t\t\t\t\t$this->textmsg .= $apart->body;\n    \t\t\t\t} else\n    \t\t\t\t\t$this->htmlmsg .= $apart->body; \n    \t\t} \n    \t} \n    }\n    \n\t// Do the actual decoding of bodies of message\n\t// Before this function is called, we have already determined that all of the \n\t// message parts are acceptable\n\tprivate function decodeMime ($msg) {\n\t\t$decoder = new Mail_mimeDecode($msg);\n\t\t$params['include_bodies'] = true;\n\t\t$params['decode_bodies']  = true;\n\t\t$params['decode_headers'] = true;\n\t\t$out = $decoder->decode($params);\n\t\t$this->parseApart($out);\t\n\t} \n\t\n\t// Put default message values into the Phplist database and get an ID for the \n\t// message. Then load the message data array with values for the message\n\t// that we get directly by decoding the message. Note that we do not complete\n\t// fill the messageData array, overwriting relevant defaults, until the message is\n\t// saved by the saveMessageData() method.\n\t//\n\t// This method provides a message ID, that is saved in the plugin property $mid. This\n\t// corresponds to set of default entries in the database. We do not overwrite these\n\t// default data until the message is actually saved. The purpose of the database\n\t// access in this method, is merely to acquire a message ID.\n\tprivate function loadMessageData ($msg) {\n\t \t\n\t \t// Note that the 'replyto' item appears not to be in use\n  \t\t// This item in $messagedata must exist, but it will remain empty\n  \t\t// So we do nothing further with it\n  \t\t$query\n  \t\t= \" insert into %s\"\n  \t\t. \"    (subject, status, entered, sendformat, embargo\"\n  \t\t. \"    , repeatuntil, owner, template, tofield, replyto,footer)\"\n  \t\t. \" values\"\n  \t\t. \"    ('(no subject)', 'draft', current_timestamp, 'HTML'\"\n  \t\t. \"    , current_timestamp, current_timestamp, ?, ?, '', '', ? )\";\n  \t\t$query = sprintf($query, $GLOBALS['tables']['message']);\n  \t\tSql_Query_Params($query, array($this->getSenderID($this->sender), $defaulttemplate,$defaultfooter));\n  \t\t// Set the current message ID\n  \t\t$this->mid = Sql_Insert_Id();\n      \t// Now create the messageData array with the default values\n      \t// We are going to load it with the template and footer set for the current list\n      \t// and the MIME decoded message\n      \t$messagedata = loadMessageData($this->mid);\n      \t$messagedata['subject'] = $this->subj;\n      \t$messagedata['fromfield'] = ($this->displayName? $this->displayName . ' <' . $this->sender . '>' : $this->sender);\n      \t$tempftr = $this->getListTmpltFtr($this->lid);\n      \t$messagedata['template'] = $tempftr[0];\n      \t$messagedata['footer'] = $tempftr[1];\n      \t\n      \t// Now decode the MIME. Load attachments into database. Get text and html msg\n      \t$this->decodeMime($msg);\n      \t\n      \t$messagedata[\"sendformat\"] = 'HTML';      \t\t\n      \tif ($this->htmlmsg) {\n      \t\t$messagedata[\"message\"] = $this->cleanHtml($this->htmlmsg);\n      \t\t$this->embeddedImage = preg_match('/<img [^>]*src\\s*=\\s*\"cid:/i', $messagedata[\"message\"]); \n      \t\tif ($this->textmsg)\n      \t\t\t$messagedata[\"textmessage\"] = $this->textmsg;\n      \t} else {\n      \t\t$messagedata[\"message\"] = \"<p>\" . preg_replace(\"@<br />\\s*<br />@U\", \"</p><p>\", nl2br($this->textmsg)) . \"</p>\" ;\n      \t\t$messagedata[\"textmessage\"] = $this->textmsg;\n       \t}\n\t\treturn $messagedata;\n\t}  \n\t\n\t// Update the status for the current message\n\tprivate function updateStatus($status) {\n\t\t$query = sprintf(\"update %s set status='%s' where id=%d\", $GLOBALS['tables']['message'], $status, $this->mid);\n\t\tsql_query($query);\n\t}\n\t\n\tpublic function saveDraft($msg) {\n\t\t$msgData = $this->loadMessageData ($msg); \t// Default messagedata['status'] is 'draft'\n\n\t\t// Allow plugins manipulate data or save it somewhere else\n  \t\tforeach ($GLOBALS['plugins'] as $pluginname => $plugin)\n  \t\t\t$plugin->sendMessageTabSave($this->mid,$msgData);\n\t\treturn $this->saveMessageData($msgData);  \t// Return message ID\n\t}\n\t\n\tpublic function queueMsg($msg) {\n\t\t$msgData = $this->loadMessageData ($msg);\n\t\t$this->saveMessageData($msgData);\n\n\t\t// Now can we queue this message. Ask if it's OK with the plugins\n\t\t$queueErr = '';\n\t\tforeach ($GLOBALS['plugins'] as $pluginname => $plugin) {\n  \t\t\t$pluginerror = $plugin->allowMessageToBeQueued($msgdata);\n  \t\t\tif ($pluginerror) \n  \t\t\t\t$queueErr .= $pluginerror . \"\\n\"; \n  \t\t}\n  \t\tif (!$queueErr) {\n \t\t\t$this->updateStatus('submitted');\n\t\t\treturn '';\n\t\t} else\n\t\t\treturn $queueErr;\n\t}\n\t\n\t// This method downloads and processes the messages in an account\n\t// $anAcct is an associative array containing the credentials for the account\n\t// $count is an associative array containing the count of the different \n\t// outcomes from the message processing\n\tpublic function downloadFromAcct ($anAcct, &$count) {\n\t\t// Open the default mailbox, i.e., the inbox\n\t\tif ($hndl = imap_open($this->completeServerName($anAcct['pop3server']), \n\t\t\t$anAcct['submissionadr'], $anAcct['password'] )){\n\t\t\t$nm = imap_num_msg($hndl);\n\t\t\tfor ($i = 1; $i <= $nm; $i++) {\n\t\t\t\tif (($hdr = imap_fetchheader($hndl, $i)) && ($bdy = imap_body ($hndl, $i))) {\n\t\t\t\t\t$msg = $hdr . $bdy;\n\t\t\t\t\t$this->receiveMsg($msg, $anAcct['submissionadr'], $count);\n\t\t\t\t\tif ($this->deleteMsgsOnReceipt) imap_delete($hndl, $i);\n\t\t\t\t} else {\n\t\t\t\t\tlogEvent(\"Lost connection to $anAcct[submissionadr]\");\n\t\t\t\t\t$count['lost']++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\timap_close($hndl, $this->deleteMsgsOnReceipt);\n\t\t} else {\n\t\t\tlogEvent(\"Connection to $anAcct[submissionadr] timed out\");\n\t\t\t$count['lost']++;\n\t\t}\n\t}\n\t\n\t// This function is called for each message as it is received\n\t// to determine whether the message should be escrowed or processed immediately\n\t// $count is an optional array with the proper items to count the outcomes.\n\tpublic function receiveMsg($msg, $mbox, &$count=null) {\n\t\t// If we are processing multiple messages, it's important to reinitialize\n\t\t// the parameters for each message.\n\t\t$this->lid = 0;\t\t\n\t\t$this->alids = array();\n\t\t$this->sender = $this->subj = '';\n\t\t$this->embeddedImage = false;\n\t\tif ($result = $this->isBadMessage($msg, $mbox)) {\n\t\t\tif ($result == 'not_ours') return;\t// Quit if the current message was not sent to the address of the current list\n\t\t\tlogEvent(sprintf($this->errMsgs[$result], listName($this->lid)));\n\t\t\tif ($this->sender) {\t// We have to know who gets the response\n\t\t\t\t// Edit the log entry for the email to the sender\n\t\t\t\t$ofs = strpos($this->errMsgs[$result], 'Msg discarded;') + strlen('Msg discarded;');\n\t\t\t\tsendMail($this->sender, \"Message Received and Discarded\",\n\t\t\t\t\t\"A message with the subject '\" . $this->subj . \"'was received but discarded for the following reason:\" . \n\t\t\t\t\t\tsubstr($this->errMsgs[$result], $ofs));\n\t\t\t}\n\t\t\tif (is_array($count)) $count['error']++;\n\t\t} else { \n\t\t\t$err = '';\n\t\t\tif (count($this->alids) > 1)\n\t\t\t\t$disposn = 'escrow';\n\t\t\telse\n\t\t\t\t$disposn = $this->getDisposition($this->lid); \n\t\t\t\n\t\t\tswitch ($disposn) {\n\t\t\t\tcase 'escrow':\n\t\t\t\t\t$tokn = $this->escrowMsg($msg);\n\t\t\t\t\t$site = getConfig('website');\n\t\t\t\t\t$cfmlink = $this->publicScheme . '://' . $site . $GLOBALS[\"pageroot\"]; \n\t\t\t\t\t$cfmlink .= \"/?p=confirmMsg&pi=submitByMailPlugin&mtk=$tokn\";\n\t\t\t\t\t$escrowMsg = \"A message with the subject '\" . $this->subj . \"' was received and escrowed.\\n\\n\";\n\t\t\t\t\t$escrowMsg .= \"To confirm this message, please click the following link:\\n\\n\" ;\n\t\t\t\t\t$escrowMsg .= \"$cfmlink\\n\\n\";\n\t\t\t\t\t$escrowMsg .=\t\"You must confirm this message within \" . $this->days[$this->holdTime];\n\t\t\t\t\t$escrowMsg .= \" or the message will be deleted.\";\n\t\t\t\t\tsendMail($this->sender, 'Message Received and Escrowed', $escrowMsg); \n\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj . \"' was escrowed.\");\n\t\t\t\t\tif (is_array($count)) $count['escrow']++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'queue': \t\t\t\t\t\t\n\t\t\t\t\tif ($err = $this->queueMsg($msg)) {\n\t\t\t\t\t\tsendMail($this->sender, 'Message Received but NOT Queued', \n\t\t\t\t\t\t\t\"A message with the subject '\" . $this->subj . \n\t\t\t\t\t\t\t\t\"' was received. It was not queued because of the following error(s): \\n\\n$err\\n\" \n\t\t\t\t\t\t\t\t. \"The message will be saved as a draft.\");\n\t\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj .\"' received but not queued because of a problem.\");\n\t\t\t\t\t\tif (is_array($count)) $count['draft']++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsendMail($this->sender, 'Message Received and Queued', \n\t\t\t\t\t\t\"A message with the subject '\" . $this->subj . \"' was received and is queued for distribution.\");\n\t\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj .\"' was received and queued.\");\n\t\t\t\t\t\tif (is_array($count)) $count['queue']++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'save':\t\n\t\t\t\t\t$this->saveDraft($msg);\n\t\t\t\t\tsendMail($this->sender, 'Message Received and Saved as a Draft', \n\t\t\t\t\t\t\"A message with the subject '\" . $this->subj . \"' was received and has been saved as a draft.\");\n\t\t\t\t\tlogEvent(\"A message with the subject '\" . $this->subj .\"' was received and and saved as a draft.\");\n\t\t\t\t\tif (is_array($count)) $count['draft']++;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\t\n\t} \n}\n\n?>", "<?php\n\n/**\n * \n * @category  phplist\n * @package   submitByMail Plugin\n * @author    Arnold V. Lesikar\n * @copyright 2014 Arnold V. Lesikar\n * @license   http://www.gnu.org/licenses/gpl.html GNU General Public License, Version 3\n *\n * This file is a part of the submitByMailPlugin for Phplist\n *\n * The submitByMailPlugin is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n * For more information about how to use this plugin, see\n * http://resources.phplist.com/plugins/submitByMail .\n * \n */\n\n// This page presents a form allowing a mailing list to be configured for submission\n// of messages by email. On submission, the form is validated for various issues\n// but the form data is actually stored by the page configure_a_list.php\n\nif (!defined('PHPLISTINIT')) die(); ## avoid pages being loaded directly\nif (!isSuperUser()){\n\tprint (\"<p>You do not have sufficient privileges to view this page.</p>\");\n\treturn;\n}\n\nverifyCsrfGetToken();\t// Prevent cross-site request forgery\n\n$sbm = $GLOBALS['plugins']['submitByMailPlugin'];\n\n$editid = $_GET['eid'];\n$listArray = $sbm->getTheLists();\n$adrsList = array();\nforeach ($listArray as $val)\n\tif ($val[1]) $adrsList[$val[1]] = $val[0];\n\t\n// Set up defaults for form\n$eml = $user = $pass = $msyes = $pipe = $cfmno = $queue = '';\n$save = $pop = $cfmyes = $msno = $ckd = 'checked';\n$tmplt = 0;\n$footer = getConfig('messagefooter');\n\n$query = sprintf(\"select * from %s where id=%d\", $sbm->tables['list'], $editid);\n\nif ($row = Sql_Fetch_Assoc_Query($query)) {\n\t$eml = $row['pop3server'];\n\t$user = $row['submissionadr'];\n\t$pass = $row['password'];\n\n\tif ($user) {\n\t\t$msyes = $ckd;\n\t\t$msno = '';\n\t} else {\n\t\t$msno = $ckd;\n\t\t$msyes = '';\n\t}\n\tif ($row['pipe_submission']) {\n\t\t$pipe = $ckd;\n\t\t$pop = '';\n\t} else {\n\t\t$pop = $ckd;\n\t\t$pipe = '';\n\t}\n\tif ($row['confirm']) {\n\t\t$cfmyes = $ckd;\n\t\t$cmno = '';\n\t} else {\n\t\t$cfmno = $ckd;\n\t\t$cfmyes = '';\n\t}\n\tif ($row['queue']) {\n\t\t$queue = $ckd;\n\t\t$save = '';\n\t} else {\n\t\t$save = $ckd;\n\t\t$queue = '';\n\t}\n\t$tmplt = $row['template'];\n\t$footer = stripslashes($row['footer']); // Magic quotes apparently! :-(\n}\n\t\t\n$req = Sql_Query(\"select id,title from {$GLOBALS['tables']['template']} order by listorder\");\n$templates_available = Sql_Num_Rows($req);\nif ($templates_available) {\n\t$template_form = '<p><div class=\"field\"><label for=\"template\">Template to use for messages submitted through this address:</label><select name=\"template\"><option value=\"0\">-- Use None</option>';\n\t$req = Sql_Query(\"select id,title, listorder from {$GLOBALS['tables']['template']} order by listorder\");\n\twhile ($row = Sql_Fetch_Assoc($req)) {   // need to fix lines below\n\t\tif ($row[\"title\"]) {\n\t\t\t$template_form .= sprintf('<option value=\"%d\" %s>%s</option>',$row[\"id\"], \n\t\t\t$row[\"id\"]==$tmplt?'selected=\"selected\"':'',$row[\"title\"]);\n\t\t}\n\t}\n\t$template_form .= '</select></div></p>';\n} else\n\t$template_form = '';\n\n$footer_form = '<p><div class=\"field\"><label for=\"footer\">Footer to be used for messages submitted through this address:</label><textarea name=\"footer\" cols=\"65\" rows=\"5\">'. htmlspecialchars($footer).'</textarea></div></p>';\n$dilg = '<div id=\"mydialog\" title=\"Data Not Saved\" style=\"text-align:center;\"></div>'; // Space for modal dialogs using jQueryUI\n// Add a confirmation dialog\n\n$ln = listName($editid);\n$infostr = <<<IOP\n<h3><strong>This configuration applies for messages sent to a single individual list.</strong></h3><p style=\"font-size:14px; margin-top:15px;\">Messages sent to multiple lists at the same time are not affected by the settings here. Such messages are always held for confirmation and then always saved as drafts after confirmation.</p>\nIOP;\nInfo($infostr);\nprint('<noscript>');\nInfo ('<span style=\"font-size:14px;font-weight:bold;\">You do not need to enter a password or POP3 server, if messages are to be collected through a pipe.</span>');\nprint('</noscript>');\n// Now lay out the form\nprint ($sbm->myFormStart(PageURL2('configure_a_list'), 'name=\"sbmConfigEdit\" class=\"submitByMailPlugin\" id=\"sbmConfigEdit\"'));\n\n$mypanel = <<<EOD\n<input type=\"hidden\" name=\"listid\" value=$editid><input type=\"hidden\" name=\"update\" value=0>\n<p><label style=\"display:inline !important;\">Submission by mail allowed:</label> <input type=\"radio\" name=\"submitOK\" value=\"Yes\" $msyes /><label style=\"display:inline !important;\">Yes</label>&nbsp;&nbsp;&nbsp;&nbsp;\n\t<input type=\"radio\" name=\"submitOK\" value=\"No\" $msno /><label style=\"display:inline !important;\">No</label>\n</p>\n<p>\n<label style=\"display:inline !important;\">Collection method:</label>&nbsp;&nbsp;<input type=\"radio\" name=\"cmethod\" value=\"POP\" $pop/><label style=\"display:inline !important;\">POP3 with SSL/TLS</label>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"radio\" name=\"cmethod\" value=\"Pipe\" $pipe/><label style=\"display:inline !important;\">Pipe</label>\n</p><p>\n<label style=\"display:inline !important;\">Submission Address:&nbsp;&nbsp;<input type=\"text\" name=\"submitadr\" style=\"width:200px !important; \ndisplay:inline !important;\" value=\"$user\" maxlength=\"255\" /></label><div id=\"pop\" style=\"margin-top:-25px; margin-bottom: 5px;\"><label style=\"display:inline !important;\">Password:&nbsp;&nbsp;<input type=\"text\" name=\"pw\" \nstyle=\"width:125px !important; display:inline !important;\" value=\"$pass\" maxlength=\"255\" /></label>\n<label>Mail Submission POP3 Server (<span style=\"font-weight:bold; color:red;\">Don't include a port number!</span>):<input type=\"text\" name=\"pop3server\" value=\"$eml\" maxlength=\"255\" /></label></div>\n<div id=\"formbtm\">\n<label style=\"display:inline !important;\">What to do with submitted message:</label>&nbsp;&nbsp;<input type=\"radio\" name=\"mdisposal\" \nvalue=\"Save\" $save /><label style=\"display:inline !important;\">Save</label>&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"radio\" name=\"mdisposal\" value=\"Queue\" $queue /><label style=\"display:inline !important;\">Queue</label>\n<br /><br /><label style=\"display:inline !important;\">Confirm submission:</label>&nbsp;&nbsp;<input type=\"radio\" name=\"confirm\" value=\"Yes\" $cfmyes /><label style=\"display:inline !important;\">Yes</label>&nbsp;&nbsp;&nbsp;&nbsp;\n<input type=\"radio\" name=\"confirm\" value=\"No\" $cfmno /><label style=\"display:inline !important;\">No</label>$template_form $footer_form\n<input class=\"submit\" type=\"submit\" name=\"submitter\" value=\"Save\" />\nEOD;\n\n$mypanel .= PageLinkClass('configure_a_list','Cancel','','button cancel','Do not save, and go back to the lists');\n$mypanel .= \"</div></p>\";\n\n$panel = new UIPanel(\"Submit to List by Mail: <strong id=\\\"mylistname\\\">$ln</strong>\", $mypanel);\nprint($panel->display());\nprint($dilg);\nprint(\"</form>\\n\");\n\nprint ('<script type=\"text/javascript\">');\nprint (\"var adrs = \" . json_encode($adrsList) . \";\\n\");\nif ($user)\n\tprint (\"var prevvals = true;\\n\");\nelse\n\tprint (\"var prevvals = false;\\n\");\n\t\n// The following scripts makes sure that POP credentials can be entered only if the POP \n// radio button has been pressed. They also validate the form for various issues.\n// The submission address is validated and the POP credentials are verified using ajax.\n// See the page verify.php\n$str = <<<EOS\n$(document).ready(function () {\n    toggleFields(); //call this first so we start out with the correct visibility depending on the selected form values\n    //this will call our toggleFields function every time the POP or Pipe radio buttons change\n    $( \"input[type=radio]\" ).change(function () {\n        toggleFields();\n    \t});\n    $(\"#mydialog\").dialog({\n    \t\tmodal: true,\n    \t\tautoOpen: false,\n    \t\twidth: 500,\n    \t}); \n\t$(\".ui-dialog-titlebar-close\").css(\"display\",\"none\");\n\t$(\".ui-dialog-content\").css(\"margin\", \"10px\");\n\t$(\".ui-dialog\").css(\"border\",\"3px solid DarkGray\");\n\t$(\".ui-dialog-content\").css(\"font-size\", \"18px\");\n\t});\n\n\n//this toggles the visibility of our the fields for input of POP credentials depending on the currently \n//selected value of the 'Collection Method' radio buttons\nfunction toggleFields() {\n\tif ($(\"input[name=cmethod]:checked\").val() == \"POP\") {\n\t\t$(\"#formbtm\").css(\"margin-top\", \"\");\n        $(\"#pop\").show();\n    } else {\n        $(\"#formbtm\").css(\"margin-top\", \"-20px\");\n       \t$(\"#pop\").hide();\n    }\n}\n\nfunction mynotice(msg) {\n\t$(\"#mydialog\").html(msg);\n\t$(\"#mydialog\").dialog(\"option\",{buttons:{}});\n\t$(\"#mydialog\").dialog(\"open\");\n}\n\nfunction myalert(msg) {\n\t$(\"#mydialog\").html(msg);\n\t$(\"#mydialog\").dialog(\"option\",{buttons:{\"OK\": function() {\n        \t\t\t\t$(this).dialog(\"close\");}}});\n    $(\"#mydialog\").dialog(\"open\");\n}\n\nfunction mysubmit(upd) {\n\tvar myform = document.getElementById(\"sbmConfigEdit\");\n    if (upd)\n    \t$(\"input[name=update]\").val(1);\n    myform.submit();\n    \t\n}\n\nfunction myconfirm(msg) {\n\t$(\"#mydialog\").html(msg);\n\t$(\"#mydialog\").dialog(\"option\",\n\t\t{buttons:{\"Yes\": function()\n\t\t\t{\n\t\t\t\tmysubmit(1);\n\t\t\t\t$(this).dialog(\"close\");\n            }, \n        \"No\": function()\n        \t{\n        \t\t$(this).dialog(\"close\");\n        \t}\n        }\n    });\n    $(\"#mydialog\").dialog(\"open\");\t\n}\n\n$(\"#sbmConfigEdit\").submit(function( event ) {\n\tvar srvr = $(\"input[name=pop3server]\").val();\n\tvar sadr = $(\"input[name=submitadr]\").val();\n\tvar pwd = $(\"input[name=pw]\").val();\n\tvar ln = $(\"#mylistname\").text();\n\tvar myjob = ($(\"input[name=cmethod]:checked\").val() ==\"Pipe\") ? \"validate\" : \"verify\";\n\t\t    \t\t\n\tif ($(\"input[name=submitOK]:checked\").val() == \"No\") {\n\t\tif (!prevvals) \n\t\t\tmysubmit(0);\n\t\telse {\n\t\t\tmyconfirm (\"Are you <strong>absolutely sure</strong> that you want to delete email submission data for this list?\");\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (sadr=='') {\n\t\tmyalert(\"You cannot allow email submission of messages without specifying a submission address!\");\n\t\treturn false;\n\t}\n\t\n\tif ((adrs != null) && (adrs[sadr] != null) && (adrs[sadr] != ln)) {\n\t\tmyalert(\"This submission address is already used by another list. <strong>Two lists cannot have the same submission address.</strong>\");\n\t\treturn false;\n\t}\n\t\n\tevent.preventDefault();\n\tif (myjob == 'verify') {\n\t\tif ((srvr=='') || (pwd=='')) {\n\t\t\tmyalert(\"You cannot collect messages with POP without specifying a server and a password!\");\n\t\t\treturn false;\n\t\t}\n\t\tmynotice('Verifying POP credentials<img style=\"width:40px; height:40px; display:block; margin-left:auto; margin-right:auto; margin-top: 10px;\" src=\"images/busy.gif\">');\n\t}\n\t\n\t$.post( \"?pi=submitByMailPlugin&page=sbmajax&ajaxed=1\", {job:myjob, server:srvr, user:sadr, pass:pwd}, function (data) { \n\t\t\tif (data == 'OK') {\n\t\t\t\tif (($(\"input[name=mdisposal]:checked\").val() == \"Queue\") && ($(\"input[name=confirm]:checked\").val() == \"No\")) \n\t\t\t\t\tmyconfirm(\"Are you <strong>absolutely sure</strong> that you want to queue messages mailed in, without confirming with the list administrator?\");\n\t\t\t\telse\n\t\t\t\t\tmysubmit(1);\n\t\t\t} else {\n\t\t\t\tif (data == 'NO')\n\t\t\t\t\tmyalert (\"User name, server, and password do not verify!\");\n\t\t\t\telse\n\t\t\t\t\tmyalert(\"Invalid email address for message submission!\");\n\t\t\t}\n\t\t}, \"text\").fail( function() {\n\t\t\t\tmyalert(\"Connection to server failed: cannot verify address!\");\n\t\t\t\t}\n\t\t\t);\n});\n</script>\n<style>\n.ui-dialog{top:30% !important}\n</style>\nEOS;\n// <style> above is there to allow vertical centering of these modal dialogs. Special thanks to \n// Mariela Zarate for coming up with this.\nprint($str);\n?>"], "filenames": ["plugins/submitByMailPlugin.php", "plugins/submitByMailPlugin/edit_list.php"], "buggy_code_start_loc": [4, 39], "buggy_code_end_loc": [44, 39], "fixing_code_start_loc": [4, 40], "fixing_code_end_loc": [44, 42], "type": "CWE-352", "message": "A vulnerability was found in arnoldle submitByMailPlugin 1.0b2.9 and classified as problematic. This issue affects some unknown processing of the file edit_list.php. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. Upgrading to version 1.0b2.9a is able to address this issue. The name of the patch is a739f680a1623d22f52ff1371e86ca472e63756f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-221495.", "other": {"cve": {"id": "CVE-2015-10081", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-20T17:15:11.173", "lastModified": "2023-03-01T17:47:42.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in arnoldle submitByMailPlugin 1.0b2.9 and classified as problematic. This issue affects some unknown processing of the file edit_list.php. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. Upgrading to version 1.0b2.9a is able to address this issue. The name of the patch is a739f680a1623d22f52ff1371e86ca472e63756f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-221495."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:submitbymailplugin_project:submitbymailplugin:1.0b2.9:*:*:*:*:*:*:*", "matchCriteriaId": "3AF65A05-91C7-4ABD-940D-6B6781220367"}]}]}], "references": [{"url": "https://github.com/arnoldle/phplist-plugin-submitByMailPlugin/commit/a739f680a1623d22f52ff1371e86ca472e63756f", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.221495", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.221495", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/arnoldle/phplist-plugin-submitByMailPlugin/commit/a739f680a1623d22f52ff1371e86ca472e63756f"}}