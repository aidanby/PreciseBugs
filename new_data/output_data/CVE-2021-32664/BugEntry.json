{"buggy_code": ["<?php\n// Copyright (C) 2010-2016 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\n/**\n * Tools to design OQL queries and test them\n *\n * @copyright   Copyright (C) 2010-2016 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/application.inc.php');\nrequire_once(APPROOT.'/application/itopwebpage.class.inc.php');\nrequire_once(APPROOT.'/application/startup.inc.php');\nrequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\n\nLoginWebPage::DoLogin(); // Check user rights and prompt if needed\nApplicationMenu::CheckMenuIdEnabled('RunQueriesMenu');\n\nfunction ShowExamples($oP, $sExpression)\n{\n\t$bUsingExample = false;\n\n\t$aExamples = array(\n\t\t'Pedagogic examples' => array(\n\t\t\t\"Web applications\" => \"SELECT WebApplication\",\n\t\t\t\"Person having an 'A' in their name\" => \"SELECT Person AS B WHERE B.name LIKE '%A%'\",\n\t\t\t\"Servers having a name like dbserver1.demo.com or dbserver023.foo.fr\" => \"SELECT Server WHERE name REGEXP '^dbserver[0-9]+\\\\\\\\..+\\\\\\\\.[a-z]{2,3}$'\",\n\t\t\t\"Changes planned on new year's day\" => \"SELECT Change AS ch WHERE ch.start_date >= '2009-12-31' AND ch.end_date <= '2010-01-01'\",\n\t\t\t\"IPs in a range\" => \"SELECT DatacenterDevice AS dev WHERE INET_ATON(dev.managementip) > INET_ATON('10.22.32.224') AND INET_ATON(dev.managementip) < INET_ATON('10.22.32.255')\",\n\t\t\t\"Persons below a given root organization\" => \"SELECT Person AS P JOIN Organization AS Node ON P.org_id = Node.id JOIN Organization AS Root ON Node.parent_id BELOW Root.id WHERE Root.id=1\",\n\t\t),\n\t\t'Usefull examples' => array(\n\t\t\t\"NW interfaces of equipment in production for customer 'Demo'\" => \"SELECT PhysicalInterface AS if JOIN DatacenterDevice AS dev ON if.connectableci_id = dev.id WHERE dev.status = 'production' AND dev.organization_name = 'Demo'\",\n\t\t\t\"My tickets\" => \"SELECT Ticket AS t WHERE t.agent_id = :current_contact_id\",\n\t\t\t\"People being owner of an active ticket\" => \"SELECT Person AS p JOIN UserRequest AS u ON u.agent_id = p.id WHERE u.status != 'closed'\",\n\t\t\t\"Contracts terminating in the next thirty days\" => \"SELECT Contract AS c WHERE c.end_date > NOW() AND c.end_date < DATE_ADD(NOW(), INTERVAL 30 DAY)\",\n\t\t\t\"Orphan tickets (opened one hour ago, still not assigned)\" => \"SELECT UserRequest AS u WHERE u.start_date < DATE_SUB(NOW(), INTERVAL 60 MINUTE) AND u.status = 'new'\",\n\t\t\t\"Long lasting incidents (duration > 8 hours)\" => \"SELECT UserRequest AS u WHERE u.close_date > DATE_ADD(u.start_date, INTERVAL 8 HOUR)\",\n\t\t),\n\t);\n\n\t$aDisplayData = array();\n\t$oAppContext = new ApplicationContext();\n\t$sContext = $oAppContext->GetForForm();\n\tforeach($aExamples as $sTopic => $aQueries)\n\t{\n\t\tforeach($aQueries as $sDescription => $sOql)\n\t\t{\n\t\t\t$sHighlight = '';\n\t\t\t$sDisable = '';\n\t\t\tif ($sOql == $sExpression)\n\t\t\t{\n\t\t\t\t// this one is currently being tested, highlight it\n\t\t\t\t$sHighlight = \"background-color:yellow;\";\n\t\t\t\t$sDisable = 'disabled';\n\t\t\t\t// and remember we are testing a query of the list\n\t\t\t\t$bUsingExample = true;\n\t\t\t}\n\t\t\t//$aDisplayData[$sTopic][] = array(\n\t\t\t$aDisplayData[Dict::S('UI:RunQuery:QueryExamples')][] = array(\n\t\t\t\t'desc' => \"<div style=\\\"$sHighlight\\\">\".htmlentities($sDescription, ENT_QUOTES, 'UTF-8').\"</div>\",\n\t\t\t\t'oql' => \"<div style=\\\"$sHighlight\\\">\".htmlentities($sOql, ENT_QUOTES, 'UTF-8').\"</div>\",\n\t\t\t\t'go' => \"<form method=\\\"get\\\"><input type=\\\"hidden\\\" name=\\\"expression\\\" value=\\\"$sOql\\\"><input type=\\\"submit\\\" value=\\\"\".Dict::S('UI:Button:Test').\"\\\" $sDisable>$sContext</form>\\n\",\n\t\t\t);\n\t\t}\n\t}\n\t$aDisplayConfig = array();\n\t$aDisplayConfig['desc'] = array('label' => Dict::S('UI:RunQuery:HeaderPurpose'), 'description' => Dict::S('UI:RunQuery:HeaderPurpose+'));\n\t$aDisplayConfig['oql'] = array('label' => Dict::S('UI:RunQuery:HeaderOQLExpression'), 'description' => Dict::S('UI:RunQuery:HeaderOQLExpression+'));\n\t$aDisplayConfig['go'] = array('label' => '', 'description' => '');\n\n\tforeach ($aDisplayData as $sTopic => $aQueriesDisplayData)\n\t{\n\t\t$bShowOpened = $bUsingExample;\n\t\t$oP->StartCollapsibleSection($sTopic, $bShowOpened);\n\t\t$oP->table($aDisplayConfig, $aQueriesDisplayData);\n\t\t$oP->EndCollapsibleSection();\n\t}\n}\n\n$sOperation = utils::ReadParam('operation', 'menu');\n$oAppContext = new ApplicationContext();\n\n$oP = new iTopWebPage(Dict::S('UI:RunQuery:Title'));\n$oP->SetBreadCrumbEntry('ui-tool-runquery', Dict::S('Menu:RunQueriesMenu'), Dict::S('Menu:RunQueriesMenu+'), '', utils::GetAbsoluteUrlAppRoot().'images/wrench.png');\n\n// Main program\n$sExpression = utils::ReadParam('expression', '', false, 'raw_data');\n$sEncoding = utils::ReadParam('encoding', 'oql');\n\nShowExamples($oP, $sExpression);\n\ntry\n{\n\tif ($sEncoding == 'crypted')\n\t{\n\t\t// Translate $sExpression into a oql expression\n\t\t$sClearText = base64_decode($sExpression);\n\t\techo \"<strong>FYI: '$sClearText'</strong><br/>\\n\";\n\t\t$oFilter = DBObjectSearch::unserialize($sExpression);\n\t\t$sExpression = $oFilter->ToOQL();\n\t}\n\telse\n\t{\n\t\t// leave $sExpression as is\n\t}\n\n\t$oFilter = null;\n\t$aArgs = array();\n\t$sSyntaxError = null;\n\n\tif (!empty($sExpression))\n\t{\n\t\ttry\n\t\t{\n\t\t\t$oFilter = DBObjectSearch::FromOQL($sExpression);\n\t\t}\n\t\tcatch(Exception $e)\n\t\t{\n\t\t\tif ($e instanceof OqlException)\n\t\t\t{\n\t\t\t\t$sSyntaxError = $e->getHtmlDesc();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sSyntaxError = $e->getMessage();\n\t\t\t}\n\t\t}\n\n\t\tif ($oFilter)\n\t\t{\n\t\t\t$aArgs = array();\n\t\t\tforeach($oFilter->GetQueryParams() as $sParam => $foo)\n\t\t\t{\n\t\t\t\t$value = utils::ReadParam('arg_'.$sParam, null, true, 'raw_data');\n\t\t\t\tif (!is_null($value))\n\t\t\t\t{\n\t\t\t\t\t$aArgs[$sParam] = $value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aArgs[$sParam] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oFilter->SetInternalParams($aArgs);\n\t\t}\n\t\telseif ($sSyntaxError)\n\t\t{\n\t\t\t// Query arguments taken from the page args\n\t\t}\n\t}\n\n\t$oP->add(\"<form method=\\\"post\\\">\\n\");\n\t$oP->add(Dict::S('UI:RunQuery:ExpressionToEvaluate').\"<br/>\\n\");\n\t$oP->add(\"<textarea cols=\\\"120\\\" rows=\\\"8\\\" id=\\\"expression\\\" name=\\\"expression\\\">\".htmlentities($sExpression, ENT_QUOTES, 'UTF-8').\"</textarea>\\n\");\n\t$oP->add_linked_script(utils::GetAbsoluteUrlAppRoot().\"/js/jquery.hotkeys.js\");\n\t$oP->add_ready_script(<<<EOF\n$(\"#expression\").select();\n$(\"#expression\").on(\"keydown\", null, \"ctrl+return\", function() {\n\t$(this).closest(\"form\").submit();\n});\nEOF\n\t);\n\n\tif (count($aArgs) > 0)\n\t{\n\t\t$oP->add(\"<div class=\\\"wizContainer\\\">\\n\");\n\t\t$oP->add(\"<h3>Query arguments</h3>\\n\");\n\t\tforeach($aArgs as $sParam => $sValue)\n\t\t{\n\t\t\t$oP->p(\"$sParam: <input type=\\\"string\\\" name=\\\"arg_$sParam\\\" value=\\\"$sValue\\\">\\n\");\n\t\t}\n\t\t$oP->add(\"</div>\\n\"); \n\t}\n\n\t$oP->add(\"<input type=\\\"submit\\\" value=\\\"\".Dict::S('UI:Button:Evaluate').\"\\\" title=\\\"\".Dict::S('UI:Button:Evaluate:Title').\"\\\">\\n\");\n\t$oP->add($oAppContext->GetForForm());\n\t$oP->add(\"</form>\\n\");\n\n\tif ($oFilter)\n\t{\n\t\t$oP->add(\"<h3>Query results</h3>\\n\");\n\t\t\n\t\t$oResultBlock = new DisplayBlock($oFilter, 'list', false);\n\t\t$oResultBlock->Display($oP, 'runquery');\n\n\t\t// Breadcrumb\n\t\t//$iCount = $oResultBlock->GetDisplayedCount();\n\t\t$sPageId = \"ui-search-\".$oFilter->GetClass();\n\t\t$sLabel = MetaModel::GetName($oFilter->GetClass());\n\t\t$aArgs = array();\n\t\tforeach (array_merge($_POST, $_GET) as $sKey => $value)\n\t\t{\n\t\t\tif (is_array($value))\n\t\t\t{\n\t\t\t\t$aItems = array();\n\t\t\t\tforeach($value as $sItemKey => $sItemValue)\n\t\t\t\t{\n\t\t\t\t\t$aArgs[] = $sKey.'['.$sItemKey.']='.urlencode($sItemValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aArgs[] = $sKey.'='.urlencode($value);\n\t\t\t}\n\t\t}\n\t\t$sUrl = utils::GetAbsoluteUrlAppRoot().'pages/run_query.php?'.implode('&', $aArgs);\n\t\t$oP->SetBreadCrumbEntry($sPageId, $sLabel, $oFilter->ToOQL(true), $sUrl, '../images/breadcrumb-search.png');\n\n\t\t$oP->p('');\n\t\t$oP->StartCollapsibleSection(Dict::S('UI:RunQuery:MoreInfo'), false, 'runQuery');\n\t\t$oP->p(Dict::S('UI:RunQuery:DevelopedQuery').htmlentities($oFilter->ToOQL(), ENT_QUOTES, 'UTF-8'));\n\t\t$oP->p(Dict::S('UI:RunQuery:SerializedFilter').htmlentities($oFilter->serialize(), ENT_QUOTES, 'UTF-8'));\n\t\t$oP->EndCollapsibleSection();\n\t}\n\telseif ($sSyntaxError)\n\t{\n\t\tif ($e instanceof OqlException)\n\t\t{\n\t\t\t$sWrongWord = $e->GetWrongWord();\n\t\t\t$aSuggestedWords = $e->GetSuggestions();\n\t\t\tif (count($aSuggestedWords) > 0)\n\t\t\t{\n\t\t\t\t$sSuggestedWord = OqlException::FindClosestString($sWrongWord, $aSuggestedWords);\n\t\t\n\t\t\t\tif (strlen($sSuggestedWord) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->GetIssue().' <em>'.$sWrongWord).'</em></b>');\n\t\t\t\t\t$sBefore = substr($sExpression, 0, $e->GetColumn());\n\t\t\t\t\t$sAfter = substr($sExpression, $e->GetColumn() + strlen($sWrongWord));\n\t\t\t\t\t$sFixedExpression = $sBefore.$sSuggestedWord.$sAfter;\n\t\t\t\t\t$sFixedExpressionHtml = $sBefore.'<span style=\"background-color:yellow\">'.$sSuggestedWord.'</span>'.$sAfter;\n\t\t\t\t\t$oP->p(\"Suggesting: $sFixedExpressionHtml\");\n\t\t\t\t\t$oP->add('<button onClick=\"$(\\'textarea[name=expression]\\').val(\\''.htmlentities(addslashes($sFixedExpression)).'\\');\">Use this query</button>');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getHtmlDesc()).'</b>');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getHtmlDesc()).'</b>');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getMessage()).'</b>');\n\t\t}\n\t}\n}\ncatch(Exception $e)\n{\n\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getMessage()).'</b>');\n}\n\n$oP->output();\n?>\n"], "fixing_code": ["<?php\n// Copyright (C) 2010-2016 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\n/**\n * Tools to design OQL queries and test them\n *\n * @copyright   Copyright (C) 2010-2016 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/application.inc.php');\nrequire_once(APPROOT.'/application/itopwebpage.class.inc.php');\nrequire_once(APPROOT.'/application/startup.inc.php');\nrequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\n\nLoginWebPage::DoLogin(); // Check user rights and prompt if needed\nApplicationMenu::CheckMenuIdEnabled('RunQueriesMenu');\n\nfunction ShowExamples($oP, $sExpression)\n{\n\t$bUsingExample = false;\n\n\t$aExamples = array(\n\t\t'Pedagogic examples' => array(\n\t\t\t\"Web applications\" => \"SELECT WebApplication\",\n\t\t\t\"Person having an 'A' in their name\" => \"SELECT Person AS B WHERE B.name LIKE '%A%'\",\n\t\t\t\"Servers having a name like dbserver1.demo.com or dbserver023.foo.fr\" => \"SELECT Server WHERE name REGEXP '^dbserver[0-9]+\\\\\\\\..+\\\\\\\\.[a-z]{2,3}$'\",\n\t\t\t\"Changes planned on new year's day\" => \"SELECT Change AS ch WHERE ch.start_date >= '2009-12-31' AND ch.end_date <= '2010-01-01'\",\n\t\t\t\"IPs in a range\" => \"SELECT DatacenterDevice AS dev WHERE INET_ATON(dev.managementip) > INET_ATON('10.22.32.224') AND INET_ATON(dev.managementip) < INET_ATON('10.22.32.255')\",\n\t\t\t\"Persons below a given root organization\" => \"SELECT Person AS P JOIN Organization AS Node ON P.org_id = Node.id JOIN Organization AS Root ON Node.parent_id BELOW Root.id WHERE Root.id=1\",\n\t\t),\n\t\t'Usefull examples' => array(\n\t\t\t\"NW interfaces of equipment in production for customer 'Demo'\" => \"SELECT PhysicalInterface AS if JOIN DatacenterDevice AS dev ON if.connectableci_id = dev.id WHERE dev.status = 'production' AND dev.organization_name = 'Demo'\",\n\t\t\t\"My tickets\" => \"SELECT Ticket AS t WHERE t.agent_id = :current_contact_id\",\n\t\t\t\"People being owner of an active ticket\" => \"SELECT Person AS p JOIN UserRequest AS u ON u.agent_id = p.id WHERE u.status != 'closed'\",\n\t\t\t\"Contracts terminating in the next thirty days\" => \"SELECT Contract AS c WHERE c.end_date > NOW() AND c.end_date < DATE_ADD(NOW(), INTERVAL 30 DAY)\",\n\t\t\t\"Orphan tickets (opened one hour ago, still not assigned)\" => \"SELECT UserRequest AS u WHERE u.start_date < DATE_SUB(NOW(), INTERVAL 60 MINUTE) AND u.status = 'new'\",\n\t\t\t\"Long lasting incidents (duration > 8 hours)\" => \"SELECT UserRequest AS u WHERE u.close_date > DATE_ADD(u.start_date, INTERVAL 8 HOUR)\",\n\t\t),\n\t);\n\n\t$aDisplayData = array();\n\t$oAppContext = new ApplicationContext();\n\t$sContext = $oAppContext->GetForForm();\n\tforeach($aExamples as $sTopic => $aQueries)\n\t{\n\t\tforeach($aQueries as $sDescription => $sOql)\n\t\t{\n\t\t\t$sHighlight = '';\n\t\t\t$sDisable = '';\n\t\t\tif ($sOql == $sExpression)\n\t\t\t{\n\t\t\t\t// this one is currently being tested, highlight it\n\t\t\t\t$sHighlight = \"background-color:yellow;\";\n\t\t\t\t$sDisable = 'disabled';\n\t\t\t\t// and remember we are testing a query of the list\n\t\t\t\t$bUsingExample = true;\n\t\t\t}\n\t\t\t//$aDisplayData[$sTopic][] = array(\n\t\t\t$aDisplayData[Dict::S('UI:RunQuery:QueryExamples')][] = array(\n\t\t\t\t'desc' => \"<div style=\\\"$sHighlight\\\">\".htmlentities($sDescription, ENT_QUOTES, 'UTF-8').\"</div>\",\n\t\t\t\t'oql' => \"<div style=\\\"$sHighlight\\\">\".htmlentities($sOql, ENT_QUOTES, 'UTF-8').\"</div>\",\n\t\t\t\t'go' => \"<form method=\\\"get\\\"><input type=\\\"hidden\\\" name=\\\"expression\\\" value=\\\"$sOql\\\"><input type=\\\"submit\\\" value=\\\"\".Dict::S('UI:Button:Test').\"\\\" $sDisable>$sContext</form>\\n\",\n\t\t\t);\n\t\t}\n\t}\n\t$aDisplayConfig = array();\n\t$aDisplayConfig['desc'] = array('label' => Dict::S('UI:RunQuery:HeaderPurpose'), 'description' => Dict::S('UI:RunQuery:HeaderPurpose+'));\n\t$aDisplayConfig['oql'] = array('label' => Dict::S('UI:RunQuery:HeaderOQLExpression'), 'description' => Dict::S('UI:RunQuery:HeaderOQLExpression+'));\n\t$aDisplayConfig['go'] = array('label' => '', 'description' => '');\n\n\tforeach ($aDisplayData as $sTopic => $aQueriesDisplayData)\n\t{\n\t\t$bShowOpened = $bUsingExample;\n\t\t$oP->StartCollapsibleSection($sTopic, $bShowOpened);\n\t\t$oP->table($aDisplayConfig, $aQueriesDisplayData);\n\t\t$oP->EndCollapsibleSection();\n\t}\n}\n\n$sOperation = utils::ReadParam('operation', 'menu');\n$oAppContext = new ApplicationContext();\n\n$oP = new iTopWebPage(Dict::S('UI:RunQuery:Title'));\n$oP->SetBreadCrumbEntry('ui-tool-runquery', Dict::S('Menu:RunQueriesMenu'), Dict::S('Menu:RunQueriesMenu+'), '', utils::GetAbsoluteUrlAppRoot().'images/wrench.png');\n\n// Main program\n$sExpression = utils::ReadParam('expression', '', false, 'raw_data');\n$sEncoding = utils::ReadParam('encoding', 'oql');\n\nShowExamples($oP, $sExpression);\n\ntry\n{\n\tif ($sEncoding == 'crypted')\n\t{\n\t\t// Translate $sExpression into a oql expression\n\t\t$sClearText = base64_decode($sExpression);\n\t\t$oFilter = DBObjectSearch::unserialize($sExpression);\n\t\t$sExpression = $oFilter->ToOQL();\n\t}\n\telse\n\t{\n\t\t// leave $sExpression as is\n\t}\n\n\t$oFilter = null;\n\t$aArgs = array();\n\t$sSyntaxError = null;\n\n\tif (!empty($sExpression))\n\t{\n\t\ttry\n\t\t{\n\t\t\t$oFilter = DBObjectSearch::FromOQL($sExpression);\n\t\t}\n\t\tcatch(Exception $e)\n\t\t{\n\t\t\tif ($e instanceof OqlException)\n\t\t\t{\n\t\t\t\t$sSyntaxError = $e->getHtmlDesc();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sSyntaxError = $e->getMessage();\n\t\t\t}\n\t\t}\n\n\t\tif ($oFilter)\n\t\t{\n\t\t\t$aArgs = array();\n\t\t\tforeach($oFilter->GetQueryParams() as $sParam => $foo)\n\t\t\t{\n\t\t\t\t$value = utils::ReadParam('arg_'.$sParam, null, true, 'raw_data');\n\t\t\t\tif (!is_null($value))\n\t\t\t\t{\n\t\t\t\t\t$aArgs[$sParam] = $value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aArgs[$sParam] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oFilter->SetInternalParams($aArgs);\n\t\t}\n\t\telseif ($sSyntaxError)\n\t\t{\n\t\t\t// Query arguments taken from the page args\n\t\t}\n\t}\n\n\t$oP->add(\"<form method=\\\"post\\\">\\n\");\n\t$oP->add(Dict::S('UI:RunQuery:ExpressionToEvaluate').\"<br/>\\n\");\n\t$oP->add(\"<textarea cols=\\\"120\\\" rows=\\\"8\\\" id=\\\"expression\\\" name=\\\"expression\\\">\".htmlentities($sExpression, ENT_QUOTES, 'UTF-8').\"</textarea>\\n\");\n\t$oP->add_linked_script(utils::GetAbsoluteUrlAppRoot().\"/js/jquery.hotkeys.js\");\n\t$oP->add_ready_script(<<<EOF\n$(\"#expression\").select();\n$(\"#expression\").on(\"keydown\", null, \"ctrl+return\", function() {\n\t$(this).closest(\"form\").submit();\n});\nEOF\n\t);\n\n\tif (count($aArgs) > 0)\n\t{\n\t\t$oP->add(\"<div class=\\\"wizContainer\\\">\\n\");\n\t\t$oP->add(\"<h3>Query arguments</h3>\\n\");\n\t\tforeach($aArgs as $sParam => $sValue)\n\t\t{\n\t\t\t$oP->p(\"$sParam: <input type=\\\"string\\\" name=\\\"arg_$sParam\\\" value=\\\"$sValue\\\">\\n\");\n\t\t}\n\t\t$oP->add(\"</div>\\n\"); \n\t}\n\n\t$oP->add(\"<input type=\\\"submit\\\" value=\\\"\".Dict::S('UI:Button:Evaluate').\"\\\" title=\\\"\".Dict::S('UI:Button:Evaluate:Title').\"\\\">\\n\");\n\t$oP->add($oAppContext->GetForForm());\n\t$oP->add(\"</form>\\n\");\n\n\tif ($oFilter)\n\t{\n\t\t$oP->add(\"<h3>Query results</h3>\\n\");\n\t\t\n\t\t$oResultBlock = new DisplayBlock($oFilter, 'list', false);\n\t\t$oResultBlock->Display($oP, 'runquery');\n\n\t\t// Breadcrumb\n\t\t//$iCount = $oResultBlock->GetDisplayedCount();\n\t\t$sPageId = \"ui-search-\".$oFilter->GetClass();\n\t\t$sLabel = MetaModel::GetName($oFilter->GetClass());\n\t\t$aArgs = array();\n\t\tforeach (array_merge($_POST, $_GET) as $sKey => $value)\n\t\t{\n\t\t\tif (is_array($value))\n\t\t\t{\n\t\t\t\t$aItems = array();\n\t\t\t\tforeach($value as $sItemKey => $sItemValue)\n\t\t\t\t{\n\t\t\t\t\t$aArgs[] = $sKey.'['.$sItemKey.']='.urlencode($sItemValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aArgs[] = $sKey.'='.urlencode($value);\n\t\t\t}\n\t\t}\n\t\t$sUrl = utils::GetAbsoluteUrlAppRoot().'pages/run_query.php?'.implode('&', $aArgs);\n\t\t$oP->SetBreadCrumbEntry($sPageId, $sLabel, $oFilter->ToOQL(true), $sUrl, '../images/breadcrumb-search.png');\n\n\t\t$oP->p('');\n\t\t$oP->StartCollapsibleSection(Dict::S('UI:RunQuery:MoreInfo'), false, 'runQuery');\n\t\t$oP->p(Dict::S('UI:RunQuery:DevelopedQuery').htmlentities($oFilter->ToOQL(), ENT_QUOTES, 'UTF-8'));\n\t\t$oP->p(Dict::S('UI:RunQuery:SerializedFilter').htmlentities($oFilter->serialize(), ENT_QUOTES, 'UTF-8'));\n\t\t$oP->EndCollapsibleSection();\n\t}\n\telseif ($sSyntaxError)\n\t{\n\t\tif ($e instanceof OqlException)\n\t\t{\n\t\t\t$sWrongWord = $e->GetWrongWord();\n\t\t\t$aSuggestedWords = $e->GetSuggestions();\n\t\t\tif (count($aSuggestedWords) > 0)\n\t\t\t{\n\t\t\t\t$sSuggestedWord = OqlException::FindClosestString($sWrongWord, $aSuggestedWords);\n\t\t\n\t\t\t\tif (strlen($sSuggestedWord) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->GetIssue().' <em>'.$sWrongWord).'</em></b>');\n\t\t\t\t\t$sBefore = substr($sExpression, 0, $e->GetColumn());\n\t\t\t\t\t$sAfter = substr($sExpression, $e->GetColumn() + strlen($sWrongWord));\n\t\t\t\t\t$sFixedExpression = $sBefore.$sSuggestedWord.$sAfter;\n\t\t\t\t\t$sFixedExpressionHtml = $sBefore.'<span style=\"background-color:yellow\">'.$sSuggestedWord.'</span>'.$sAfter;\n\t\t\t\t\t$oP->p(\"Suggesting: $sFixedExpressionHtml\");\n\t\t\t\t\t$oP->add('<button onClick=\"$(\\'textarea[name=expression]\\').val(\\''.htmlentities(addslashes($sFixedExpression)).'\\');\">Use this query</button>');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getHtmlDesc()).'</b>');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getHtmlDesc()).'</b>');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getMessage()).'</b>');\n\t\t}\n\t}\n}\ncatch(Exception $e)\n{\n\t$oP->p('<b>'.Dict::Format('UI:RunQuery:Error', $e->getMessage()).'</b>');\n}\n\n$oP->output();\n?>\n"], "filenames": ["pages/run_query.php"], "buggy_code_start_loc": [116], "buggy_code_end_loc": [117], "fixing_code_start_loc": [115], "fixing_code_end_loc": [115], "type": "CWE-79", "message": "Combodo iTop is an open source web based IT Service Management tool. In affected versions there is a XSS vulnerability on \"run query\" page when logged as administrator. This has been resolved in versions 2.6.5 and 2.7.5.", "other": {"cve": {"id": "CVE-2021-32664", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-19T18:15:07.853", "lastModified": "2021-10-22T20:45:48.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Combodo iTop is an open source web based IT Service Management tool. In affected versions there is a XSS vulnerability on \"run query\" page when logged as administrator. This has been resolved in versions 2.6.5 and 2.7.5."}, {"lang": "es", "value": "Combodo iTop es una herramienta de Administraci\u00f3n de Servicios de TI de c\u00f3digo abierto basada en la web. En las versiones afectadas se presenta una vulnerabilidad de tipo XSS en la p\u00e1gina \"run query\" cuando se inicia la sesi\u00f3n como administrador. Esto ha sido resuelto en versiones 2.6.5 y 2.7.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.7, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:*:*:*:*:-:*:*:*", "versionEndExcluding": "2.6.5", "matchCriteriaId": "AAB96E6A-21B3-40F1-9833-629464EE4710"}, {"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:*:*:*:*:-:*:*:*", "versionStartIncluding": "2.7.0", "versionEndExcluding": "2.7.5", "matchCriteriaId": "CD3B1BB6-B0AB-49F6-A327-DAC73045502B"}]}]}], "references": [{"url": "https://github.com/Combodo/iTop/commit/4f5c987d8b1bd12814dc606ea69b6cfb88490704", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Combodo/iTop/commit/84741c19f0af6fa8e7082a8807eb089182e7b88a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Combodo/iTop/commit/86f649affc12b5078efc86d9439d67d98f4cb2f6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Combodo/iTop/security/advisories/GHSA-j758-ggwg-9mpj", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Combodo/iTop/commit/4f5c987d8b1bd12814dc606ea69b6cfb88490704"}}