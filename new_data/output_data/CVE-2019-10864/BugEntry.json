{"buggy_code": ["<?php\n/*\n\tThis is the primary set of functions used to calculate the statistics, they are available for other developers to call.\n\t\n\tNOTE:  Many of the functions return an MySQL result object, using this object like a variable (ie. echo $result) will output \n\t\t   the number of rows returned, but you can also use it an a foreach loop to to get the details of the rows.\n*/\n\n/**\n * Get Current Users online\n *\n * @param array $options\n * @return mixed\n */\nfunction wp_statistics_useronline( $options = array() ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Check Parameter\n\t$defaults = array(\n\t\t/**\n\t\t * Type Of Page in Wordpress\n\t\t * @See WP_Statistics_Frontend\\get_page_type\n\t\t *\n\t\t * -- Acceptable values --\n\t\t *\n\t\t * post     -> WordPress Post single page From All of public post Type\n\t\t * page     -> Wordpress page single page\n\t\t * product  -> WooCommerce product single page\n\t\t * home     -> Home Page website\n\t\t * category -> Wordpress Category Page\n\t\t * post_tag -> Wordpress Post Tags Page\n\t\t * tax      -> Wordpress Term Page for all Taxonomies\n\t\t * author   -> Wordpress Users page\n\t\t * 404      -> 404 Not Found Page\n\t\t * archive  -> Wordpress Archive Page\n\t\t * all      -> All Site Page\n\t\t *\n\t\t */\n\t\t'type'         => 'all',\n\t\t/**\n\t\t * Wordpress Query object ID\n\t\t * @example array('type' => 'product', 'ID' => 5)\n\t\t */\n\t\t'ID'           => 0,\n\t\t/**\n\t\t * Get number of logged users or all users\n\t\t *\n\t\t * -- Acceptable values --\n\t\t * false  -> Get Number of all users\n\t\t * true   -> Get Number of all logged users in wordpress\n\t\t */\n\t\t'logged_users' => false,\n\t\t/**\n\t\t * Get number User From Custom Country\n\t\t *\n\t\t * -- Acceptable values --\n\t\t * ISO Country Code -> For Get List @See \\wp-statistics\\includes\\functions\\country-code.php\n\t\t *\n\t\t */\n\t\t'location'     => 'all',\n\t\t/**\n\t\t * Search Filter by User agent name\n\t\t * e.g : Firefox , Chrome , Safari , Unknown ..\n\t\t * @see wp_statistics_get_browser_list()\n\t\t *\n\t\t */\n\t\t'agent'        => 'all',\n\t\t/**\n\t\t * Search filter by User Platform name\n\t\t * e.g : Windows, iPad, Macintosh, Unknown, ..\n\t\t *\n\t\t */\n\t\t'platform'     => 'all'\n\t);\n\n\t// Parse incoming $args into an array and merge it with $defaults\n\t$arg = wp_parse_args( $options, $defaults );\n\n\t//Basic SQL\n\t$sql = \"SELECT COUNT(*) FROM \" . wp_statistics_db_table( 'useronline' );\n\n\t//Check Where Condition\n\t$where = false;\n\n\t//Check Type of Page\n\tif ( $arg['type'] != \"all\" ) {\n\t\t$where[] = \"`type`='\" . $arg['type'] . \"' AND `page_id` = \" . $arg['ID'];\n\t}\n\n\t//Check Custom user\n\tif ( $arg['logged_users'] === true ) {\n\t\t$where[] = \"`user_id` > 0\";\n\t}\n\n\t//Check Location\n\tif ( $arg['location'] != \"all\" ) {\n\t\t$ISOCountryCode = $WP_Statistics->get_country_codes();\n\t\tif ( array_key_exists( $arg['location'], $ISOCountryCode ) ) {\n\t\t\t$where[] = \"`location` = '\" . $arg['location'] . \"'\";\n\t\t}\n\t}\n\n\t//Check User Agent\n\tif ( $arg['agent'] != \"all\" ) {\n\t\t$where[] = \"`agent` = '\" . $arg['agent'] . \"'\";\n\t}\n\n\t//Check User Platform\n\tif ( $arg['platform'] != \"all\" ) {\n\t\t$where[] = \"`platform` = '\" . $arg['platform'] . \"'\";\n\t}\n\n\t//Push Conditions to SQL\n\tif ( ! empty( $where ) ) {\n\t\t$sql .= ' WHERE ' . implode( ' AND ', $where );\n\t}\n\n\t//Return Number od user Online\n\treturn $wpdb->get_var( $sql );\n}\n\n/**\n * Create Condition Where Time in MySql\n *\n * @param string $field : date column name in database table\n * @param string $time : Time return\n * @param array $range : an array contain two Date e.g : array('start' => 'xx-xx-xx', 'end' => 'xx-xx-xx', 'is_day' => true, 'current_date' => true)\n *\n * ---- Time Range -----\n * today\n * yesterday\n * week\n * month\n * year\n * total\n * \u201c-x\u201d (i.e., \u201c-10\u201d for the past 10 days)\n * ----------------------\n *\n * @return string|bool\n */\nfunction wp_statistics_mysql_time_conditions( $field = 'date', $time = 'total', $range = array() ) {\n\tglobal $WP_Statistics;\n\n\t//Get Current Date From WP\n\t$current_date = $WP_Statistics->Current_Date( 'Y-m-d' );\n\n\t//Create Field Sql\n\t$field_sql = function ( $time ) use ( $current_date, $field, $WP_Statistics, $range ) {\n\t\t$is_current = array_key_exists( 'current_date', $range );\n\t\treturn \"`$field` \" . ( $is_current === true ? '=' : 'BETWEEN' ) . \" '{$WP_Statistics->Current_Date( 'Y-m-d', (int) $time )}'\" . ( $is_current === false ? \" AND '{$current_date}'\" : \"\" );\n\t};\n\n\t//Check Time\n\tswitch ( $time ) {\n\t\tcase 'today':\n\t\t\t$where = \"`$field` = '{$current_date}'\";\n\t\t\tbreak;\n\t\tcase 'yesterday':\n\t\t\t$where = \"`$field` = '{$WP_Statistics->Current_Date( 'Y-m-d', -1 )}'\";\n\t\t\tbreak;\n\t\tcase 'week':\n\t\t\t$where = $field_sql( - 7 );\n\t\t\tbreak;\n\t\tcase 'month':\n\t\t\t$where = $field_sql( - 30 );\n\t\t\tbreak;\n\t\tcase 'year':\n\t\t\t$where = $field_sql( - 365 );\n\t\t\tbreak;\n\t\tcase 'total':\n\t\t\t$where = \"\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif ( array_key_exists( 'is_day', $range ) ) {\n\t\t\t\t//Check a day\n\t\t\t\t$where = \"`$field` = '{$WP_Statistics->Current_Date( 'Y-m-d',  $time )}'\";\n\t\t\t} elseif ( array_key_exists( 'start', $range ) and array_key_exists( 'end', $range ) ) {\n\t\t\t\t//Check Between Two Time\n\t\t\t\t$where = \"`$field` BETWEEN '{$WP_Statistics->Current_Date( 'Y-m-d', '-0', strtotime( $range['start'] ) )}' AND '{$WP_Statistics->Current_Date( 'Y-m-d', '-0', strtotime( $range['end'] ) )}'\";\n\t\t\t} else {\n\t\t\t\t//Check From a Date To Now\n\t\t\t\t$where = $field_sql( $time );\n\t\t\t}\n\t}\n\n\treturn $where;\n}\n\n/**\n * This function get the visit statistics for a given time frame\n *\n * @param $time\n * @param null $daily\n * @return int\n */\nfunction wp_statistics_visit( $time, $daily = null ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Date Column Name in visits table\n\t$table_name  = wp_statistics_db_table( 'visit' );\n\t$date_column = 'last_counter';\n\n\t//Prepare Selector Sql\n\t$selector = 'SUM(visit)';\n\tif ( $daily == true ) {\n\t\t$selector = '*';\n\t}\n\n\t//Generate Base Sql\n\t$sql = \"SELECT {$selector} FROM {$table_name}\";\n\n\t//Create Sum Visits variable\n\t$sum = 0;\n\n\t//Check if daily Report\n\tif ( $daily == true ) {\n\n\t\t$result = $wpdb->get_row( $sql . \" WHERE `$date_column` = '{$WP_Statistics->Current_Date( 'Y-m-d', $time )}'\" );\n\t\tif ( null !== $result ) {\n\t\t\t$sum = $result->visit;\n\t\t}\n\n\t} else {\n\n\t\t//Generate MySql Time Conditions\n\t\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time );\n\t\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t\t$sql = $sql . ' WHERE ' . $mysql_time_sql;\n\t\t}\n\n\t\t//Request To database\n\t\t$result = $wpdb->get_var( $sql );\n\n\t\t//Custom Action\n\t\tif ( $time == \"total\" ) {\n\t\t\t$result += $WP_Statistics->Get_Historical_Data( 'visits' );\n\t\t}\n\n\t\t$sum = $result;\n\t}\n\n\treturn $sum;\n}\n\n/**\n * This function gets the visitor statistics for a given time frame.\n *\n * @param $time\n * @param null $daily\n * @param bool $count_only\n * @param array $options\n * @return int|null|string\n */\nfunction wp_statistics_visitor( $time, $daily = null, $count_only = false, $options = array() ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Check Parameter\n\t$defaults = array(\n\t\t/**\n\t\t * Type Of Page in Wordpress\n\t\t * @See WP_Statistics_Frontend\\get_page_type\n\t\t *\n\t\t * -- Acceptable values --\n\t\t *\n\t\t * post     -> WordPress Post single page From All of public post Type\n\t\t * page     -> Wordpress page single page\n\t\t * product  -> WooCommerce product single page\n\t\t * home     -> Home Page website\n\t\t * category -> Wordpress Category Page\n\t\t * post_tag -> Wordpress Post Tags Page\n\t\t * tax      -> Wordpress Term Page for all Taxonomies\n\t\t * author   -> Wordpress Users page\n\t\t * 404      -> 404 Not Found Page\n\t\t * archive  -> Wordpress Archive Page\n\t\t * all      -> All Site Page\n\t\t *\n\t\t */\n\t\t'type'     => 'all',\n\t\t/**\n\t\t * Wordpress Query object ID\n\t\t * @example array('type' => 'product', 'ID' => 5)\n\t\t */\n\t\t'ID'       => 0,\n\t\t/**\n\t\t * Get number User From Custom Country\n\t\t *\n\t\t * -- Acceptable values --\n\t\t * ISO Country Code -> For Get List @See \\wp-statistics\\includes\\functions\\country-code.php\n\t\t *\n\t\t */\n\t\t'location' => 'all',\n\t\t/**\n\t\t * Search Filter by User agent name\n\t\t * e.g : Firefox , Chrome , Safari , Unknown ..\n\t\t * @see wp_statistics_get_browser_list()\n\t\t *\n\t\t */\n\t\t'agent'    => 'all',\n\t\t/**\n\t\t * Search filter by User Platform name\n\t\t * e.g : Windows, iPad, Macintosh, Unknown, ..\n\t\t *\n\t\t */\n\t\t'platform' => 'all'\n\t);\n\n\t// Parse incoming $args into an array and merge it with $defaults\n\t$arg = wp_parse_args( $options, $defaults );\n\n\t//Create History Visitors variable\n\t$history = 0;\n\n\t//Prepare Selector Sql\n\t$date_column = 'last_counter';\n\t$selector    = '*';\n\tif ( $count_only == true ) {\n\t\t$selector = 'count(last_counter)';\n\t}\n\n\t//Generate Base Sql\n\tif ( $arg['type'] != \"all\" and $WP_Statistics->get_option( 'visitors_log' ) == true ) {\n\t\t$sql = \"SELECT {$selector} FROM `\" . wp_statistics_db_table( 'visitor' ) . \"` INNER JOIN `\" . wp_statistics_db_table( \"visitor_relationships\" ) . \"` ON `\" . wp_statistics_db_table( \"visitor_relationships\" ) . \"`.`visitor_id` = `\" . wp_statistics_db_table( 'visitor' ) . \"`.`ID`  INNER JOIN `\" . wp_statistics_db_table( 'pages' ) . \"` ON `\" . wp_statistics_db_table( 'pages' ) . \"`.`page_id` = `\" . wp_statistics_db_table( \"visitor_relationships\" ) . \"` . `page_id`\";\n\t} else {\n\t\t$sql = \"SELECT {$selector} FROM `\" . wp_statistics_db_table( 'visitor' ) . \"`\";\n\t}\n\n\t//Check Where Condition\n\t$where = false;\n\n\t//Check Type of Page\n\tif ( $arg['type'] != \"all\" and $WP_Statistics->get_option( 'visitors_log' ) == true ) {\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'pages' ) . \"`.`type`='\" . $arg['type'] . \"' AND `\" . wp_statistics_db_table( 'pages' ) . \"`.`page_id` = \" . $arg['ID'];\n\t}\n\n\t//Check Location\n\tif ( $arg['location'] != \"all\" ) {\n\t\t$ISOCountryCode = $WP_Statistics->get_country_codes();\n\t\tif ( array_key_exists( $arg['location'], $ISOCountryCode ) ) {\n\t\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`location` = '\" . $arg['location'] . \"'\";\n\t\t}\n\t}\n\n\t//Check User Agent\n\tif ( $arg['agent'] != \"all\" ) {\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`agent` = '\" . $arg['agent'] . \"'\";\n\t}\n\n\t//Check User Platform\n\tif ( $arg['platform'] != \"all\" ) {\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`platform` = '\" . $arg['platform'] . \"'\";\n\t}\n\n\t//Check Date Time report\n\tif ( $daily == true ) {\n\n\t\t//Get Only Current Day Visitors\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`last_counter` = '\" . $WP_Statistics->Current_Date( 'Y-m-d', $time ) . \"'\";\n\t} else {\n\n\t\t//Generate MySql Time Conditions\n\t\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time );\n\t\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t\t$where[] = $mysql_time_sql;\n\t\t}\n\t}\n\n\t//Push Conditions to SQL\n\tif ( ! empty( $where ) ) {\n\t\t$sql .= ' WHERE ' . implode( ' AND ', $where );\n\t}\n\n\t//Custom Action\n\tif ( $time == \"total\" and $arg['type'] == \"all\" ) {\n\t\t$history = $WP_Statistics->Get_Historical_Data( 'visitors' );\n\t}\n\n\t// Execute the SQL call, if we're only counting we can use get_var(), otherwise we use query().\n\tif ( $count_only == true ) {\n\t\t$sum = $wpdb->get_var( $sql );\n\t\t$sum += $history;\n\t} else {\n\t\t$sum = $wpdb->query( $sql );\n\t}\n\n\treturn $sum;\n}\n\n/**\n * This function returns the statistics for a given page.\n *\n * @param $time\n * @param string $page_uri\n * @param int $id\n * @param null $rangestartdate\n * @param null $rangeenddate\n * @param bool $type\n * @return int|null|string\n */\nfunction wp_statistics_pages( $time, $page_uri = '', $id = - 1, $rangestartdate = null, $rangeenddate = null, $type = false ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Date Column Name in visits table\n\t$table_name  = wp_statistics_db_table( 'pages' );\n\t$date_column = 'date';\n\t$history     = 0;\n\n\t//Check Where Condition\n\t$where = false;\n\n\t//Check Query By Page ID or Page Url\n\tif ( $type != false and $id != - 1 ) {\n\t\t$where[] = \"`type`='\" . $type . \"' AND `page_id` = \" . $id;\n\t} else {\n\n\t\t// If no page URI has been passed in, get the current page URI.\n\t\tif ( $page_uri == '' ) {\n\t\t\t$page_uri = wp_statistics_get_uri();\n\t\t}\n\t\t$page_uri_sql = esc_sql( $page_uri );\n\n\t\t// If a page/post ID has been passed, use it to select the rows, otherwise use the URI.\n\t\tif ( $id != - 1 ) {\n\t\t\t$where[]     = \"`id`= \" . absint( $id );\n\t\t\t$history_key = 'page';\n\t\t\t$history_id  = absint( $id );\n\t\t} else {\n\t\t\t$where[]     = \"`URI` = '{$page_uri_sql}'\";\n\t\t\t$history_key = 'uri';\n\t\t\t$history_id  = $page_uri;\n\t\t}\n\n\t\t//Custom Action\n\t\tif ( $time == \"total\" ) {\n\t\t\t$history = $WP_Statistics->Get_Historical_Data( $history_key, $history_id );\n\t\t}\n\t}\n\n\t//Prepare Time\n\t$time_array = array();\n\tif ( is_numeric( $time ) ) {\n\t\t$time_array['is_day'] = true;\n\t}\n\tif ( ! is_null( $rangestartdate ) and ! is_null( $rangeenddate ) ) {\n\t\t$time_array = array( 'start' => $rangestartdate, 'end' => $rangeenddate );\n\t}\n\n\t//Check MySql Time Conditions\n\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time, $time_array );\n\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t$where[] = $mysql_time_sql;\n\t}\n\n\t//Generate Base Sql\n\t$sql = \"SELECT SUM(count) FROM {$table_name}\";\n\n\t//Push Conditions to SQL\n\tif ( ! empty( $where ) ) {\n\t\t$sql .= ' WHERE ' . implode( ' AND ', $where );\n\t}\n\n\t//Request Get data\n\t$sum = $wpdb->get_var( $sql );\n\t$sum += $history;\n\n\t//Return Number Statistic\n\treturn ( $sum == '' ? 0 : $sum );\n}\n\n// This function converts a page URI to a page/post ID.  It does this by looking up in the pages database\n// the URI and getting the associated ID.  This will only work if the page has been visited at least once.\nfunction wp_statistics_uri_to_id( $uri ) {\n\tglobal $wpdb;\n\n\t// Create the SQL query to use.\n\t$sqlstatement = $wpdb->prepare( \"SELECT id FROM {$wpdb->prefix}statistics_pages WHERE `URI` = %s AND id > 0 ORDER BY date DESC\", $uri );\n\n\t// Execute the query.\n\t$result = $wpdb->get_var( $sqlstatement );\n\n\t// If we returned a false or some other 0 equivalent value, make sure $result is set to an integer 0.\n\tif ( $result == 0 ) {\n\t\t$result = 0;\n\t}\n\n\treturn $result;\n}\n\n// We need a quick function to pass to usort to properly sort the most popular pages.\nfunction wp_stats_compare_uri_hits( $a, $b ) {\n\treturn $a[1] < $b[1];\n}\n\n// This function returns a multi-dimensional array, with the total number of pages and an array or URI's sorted in order with their URI, count, id and title.\nfunction wp_statistics_get_top_pages( $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\t// Get every unique URI from the pages database.\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_results( $wpdb->prepare( \"SELECT `uri`,`id`,`type` FROM {$wpdb->prefix}statistics_pages WHERE `date` BETWEEN %s AND %s GROUP BY `uri`\", $rangestartdate, $rangeenddate ), ARRAY_N );\n\t} else {\n\t\t$result = $wpdb->get_results( \"SELECT `uri`,`id`,`type` FROM {$wpdb->prefix}statistics_pages GROUP BY `uri`\", ARRAY_N );\n\t}\n\n\t$total = 0;\n\t$uris  = array();\n\n\t// Now get the total page visit count for each unique URI.\n\tforeach ( $result as $out ) {\n\t\t// Increment the total number of results.\n\t\t$total ++;\n\n\t\t//Prepare item\n\t\tlist( $url, $page_id, $page_type ) = $out;\n\n\t\t//Get Page Title\n\t\t$page_info = wp_statistics_get_page_info( $page_id, $page_type );\n\t\t$title     = mb_substr( $page_info['title'], 0, 200, \"utf-8\" );\n\t\t$page_url  = $page_info['link'];\n\n\t\t// Check age Title if page id or type not exist\n\t\tif ( $page_info['link'] == \"\" ) {\n\t\t\t$page_url = htmlentities( path_join( get_site_url(), $url ), ENT_QUOTES );\n\t\t\t$id       = wp_statistics_uri_to_id( $out[0] );\n\t\t\t$post     = get_post( $id );\n\t\t\tif ( is_object( $post ) ) {\n\t\t\t\t$title = $post->post_title;\n\t\t\t} else {\n\t\t\t\tif ( $out[0] == '/' ) {\n\t\t\t\t\t$title = get_bloginfo();\n\t\t\t\t} else {\n\t\t\t\t\t$title = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Check Title is empty\n\t\tif ( empty( $title ) ) {\n\t\t\t$title = '-';\n\t\t}\n\n\t\t// Add the current post to the array.\n\t\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t\t$uris[] = array(\n\t\t\t\t$out[0],\n\t\t\t\twp_statistics_pages( 'range', $out[0], - 1, $rangestartdate, $rangeenddate ),\n\t\t\t\t$page_id,\n\t\t\t\t$title,\n\t\t\t\t$page_url,\n\t\t\t);\n\t\t} else {\n\t\t\t$uris[] = array( $out[0], wp_statistics_pages( 'total', $out[0] ), $page_id, $title, $page_url );\n\t\t}\n\t}\n\n\t// If we have more than one result, let's sort them using usort.\n\tif ( count( $uris ) > 1 ) {\n\t\t// Sort the URI's based on their hit count.\n\t\tusort( $uris, 'wp_stats_compare_uri_hits' );\n\t}\n\n\treturn array( $total, $uris );\n}\n\n// This function gets the current page URI.\nfunction wp_statistics_get_uri() {\n\t// Get the site's path from the URL.\n\t$site_uri     = parse_url( site_url(), PHP_URL_PATH );\n\t$site_uri_len = strlen( $site_uri );\n\n\t// Get the site's path from the URL.\n\t$home_uri     = parse_url( home_url(), PHP_URL_PATH );\n\t$home_uri_len = strlen( $home_uri );\n\n\t// Get the current page URI.\n\t$page_uri = $_SERVER[\"REQUEST_URI\"];\n\n\t/*\n\t * We need to check which URI is longer in case one contains the other.\n\t *\n\t * For example home_uri might be \"/site/wp\" and site_uri might be \"/site\".\n\t *\n\t * In that case we want to check to see if the page_uri starts with \"/site/wp\" before\n\t * we check for \"/site\", but in the reverse case, we need to swap the order of the check.\n\t */\n\tif ( $site_uri_len > $home_uri_len ) {\n\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t}\n\n\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t}\n\t} else {\n\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t}\n\n\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t}\n\t}\n\n\t//Sanitize Xss injection\n\t$page_uri = filter_var( $page_uri, FILTER_SANITIZE_STRING );\n\n\t// If we're at the root (aka the URI is blank), let's make sure to indicate it.\n\tif ( $page_uri == '' ) {\n\t\t$page_uri = '/';\n\t}\n\n\treturn $page_uri;\n}\n\n// This function returns all unique user agents in the database.\nfunction wp_statistics_ua_list( $rangestartdate = null, $rangeenddate = null ) {\n\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\tif ( $rangeenddate == 'CURDATE()' ) {\n\t\t\t$result = $wpdb->get_results( $wpdb->prepare( \"SELECT DISTINCT agent FROM {$wpdb->prefix}statistics_visitor WHERE `last_counter` BETWEEN %s AND CURDATE()\", $rangestartdate ), ARRAY_N );\n\t\t} else {\n\t\t\t$result = $wpdb->get_results( $wpdb->prepare( \"SELECT DISTINCT agent FROM {$wpdb->prefix}statistics_visitor WHERE `last_counter` BETWEEN %s AND %s\", $rangestartdate, $rangeenddate ), ARRAY_N );\n\t\t}\n\n\t} else {\n\t\t$result = $wpdb->get_results( \"SELECT DISTINCT agent FROM {$wpdb->prefix}statistics_visitor\", ARRAY_N );\n\t}\n\n\t$Browsers        = array();\n\t$default_browser = wp_statistics_get_browser_list();\n\n\tforeach ( $result as $out ) {\n\t\t//Check Browser is defined in wp-statistics\n\t\tif ( array_key_exists( strtolower( $out[0] ), $default_browser ) ) {\n\t\t\t$Browsers[] = $out[0];\n\t\t}\n\t}\n\n\treturn $Browsers;\n}\n\n/**\n * Count User By User Agent\n *\n * @param $agent\n * @param null $rangestartdate\n * @param null $rangeenddate\n * @return mixed\n */\nfunction wp_statistics_useragent( $agent, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(agent) FROM {$wpdb->prefix}statistics_visitor WHERE `agent` = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$agent,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_var( $wpdb->prepare( \"SELECT COUNT(agent) FROM {$wpdb->prefix}statistics_visitor WHERE `agent` = %s\", $agent ) );\n\t}\n\n\treturn $result;\n}\n\n// This function returns all unique platform types from the database.\nfunction wp_statistics_platform_list( $rangestartdate = null, $rangeenddate = null ) {\n\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_results(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT DISTINCT platform FROM {$wpdb->prefix}statistics_visitor WHERE `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t),\n\t\t\tARRAY_N\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_results( \"SELECT DISTINCT platform FROM {$wpdb->prefix}statistics_visitor\", ARRAY_N );\n\t}\n\n\t$Platforms = array();\n\n\tforeach ( $result as $out ) {\n\t\t$Platforms[] = $out[0];\n\t}\n\n\treturn $Platforms;\n}\n\n// This function returns the count of a given platform in the database.\nfunction wp_statistics_platform( $platform, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(platform) FROM {$wpdb->prefix}statistics_visitor WHERE `platform` = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$platform,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(platform) FROM {$wpdb->prefix}statistics_visitor WHERE `platform` = %s\",\n\t\t\t\t$platform\n\t\t\t)\n\t\t);\n\t}\n\n\treturn $result;\n}\n\n// This function returns all unique versions for a given agent from the database.\nfunction wp_statistics_agent_version_list( $agent, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_results(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT DISTINCT version FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$agent,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t),\n\t\t\tARRAY_N\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_results(\n\t\t\t$wpdb->prepare( \"SELECT DISTINCT version FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s\", $agent ),\n\t\t\tARRAY_N\n\t\t);\n\t}\n\n\t$Versions = array();\n\n\tforeach ( $result as $out ) {\n\t\t$Versions[] = $out[0];\n\t}\n\n\treturn $Versions;\n}\n\n// This function returns the statistics for a given agent/version pair from the database.\nfunction wp_statistics_agent_version( $agent, $version, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(version) FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s AND version = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$agent,\n\t\t\t\t$version,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(version) FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s AND version = %s\",\n\t\t\t\t$agent,\n\t\t\t\t$version\n\t\t\t)\n\t\t);\n\t}\n\n\treturn $result;\n}\n\n// This function returns an array or array's which define what search engines we should look for.\n//\n// By default will only return ones that have not been disabled by the user, this can be overridden by the $all parameter.\n//\n// Each sub array is made up of the following items:\n//\t\tname \t\t = The proper name of the search engine\n//\t\ttranslated   = The proper name translated to the local language\n//\t\ttag \t\t = a short one word, all lower case, representation of the search engine\n//\t\tsqlpattern   = either a single SQL style search pattern OR an array or search patterns to match the hostname in a URL against\n//\t\tregexpattern = either a single regex style search pattern OR an array or search patterns to match the hostname in a URL against\n//\t\tquerykey \t = the URL key that contains the search string for the search engine\n//\t\timage\t\t = the name of the image file to associate with this search engine (just the filename, no path info)\n//\nfunction wp_statistics_searchengine_list( $all = false ) {\n\tglobal $WP_Statistics;\n\n\t$default = $engines = array(\n\t\t'ask'        => array(\n\t\t\t'name'         => 'Ask.com',\n\t\t\t'translated'   => __( 'Ask.com', 'wp-statistics' ),\n\t\t\t'tag'          => 'ask',\n\t\t\t'sqlpattern'   => '%ask.com%',\n\t\t\t'regexpattern' => 'ask\\.com',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'ask.png',\n\t\t),\n\t\t'baidu'      => array(\n\t\t\t'name'         => 'Baidu',\n\t\t\t'translated'   => __( 'Baidu', 'wp-statistics' ),\n\t\t\t'tag'          => 'baidu',\n\t\t\t'sqlpattern'   => '%baidu.com%',\n\t\t\t'regexpattern' => 'baidu\\.com',\n\t\t\t'querykey'     => 'wd',\n\t\t\t'image'        => 'baidu.png',\n\t\t),\n\t\t'bing'       => array(\n\t\t\t'name'         => 'Bing',\n\t\t\t'translated'   => __( 'Bing', 'wp-statistics' ),\n\t\t\t'tag'          => 'bing',\n\t\t\t'sqlpattern'   => '%bing.com%',\n\t\t\t'regexpattern' => 'bing\\.com',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'bing.png',\n\t\t),\n\t\t'clearch'    => array(\n\t\t\t'name'         => 'clearch.org',\n\t\t\t'translated'   => __( 'clearch.org', 'wp-statistics' ),\n\t\t\t'tag'          => 'clearch',\n\t\t\t'sqlpattern'   => '%clearch.org%',\n\t\t\t'regexpattern' => 'clearch\\.org',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'clearch.png',\n\t\t),\n\t\t'duckduckgo' => array(\n\t\t\t'name'         => 'DuckDuckGo',\n\t\t\t'translated'   => __( 'DuckDuckGo', 'wp-statistics' ),\n\t\t\t'tag'          => 'duckduckgo',\n\t\t\t'sqlpattern'   => array( '%duckduckgo.com%', '%ddg.gg%' ),\n\t\t\t'regexpattern' => array( 'duckduckgo\\.com', 'ddg\\.gg' ),\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'duckduckgo.png',\n\t\t),\n\t\t'google'     => array(\n\t\t\t'name'         => 'Google',\n\t\t\t'translated'   => __( 'Google', 'wp-statistics' ),\n\t\t\t'tag'          => 'google',\n\t\t\t'sqlpattern'   => '%google.%',\n\t\t\t'regexpattern' => 'google\\.',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'google.png',\n\t\t),\n\t\t'yahoo'      => array(\n\t\t\t'name'         => 'Yahoo!',\n\t\t\t'translated'   => __( 'Yahoo!', 'wp-statistics' ),\n\t\t\t'tag'          => 'yahoo',\n\t\t\t'sqlpattern'   => '%yahoo.com%',\n\t\t\t'regexpattern' => 'yahoo\\.com',\n\t\t\t'querykey'     => 'p',\n\t\t\t'image'        => 'yahoo.png',\n\t\t),\n\t\t'yandex'     => array(\n\t\t\t'name'         => 'Yandex',\n\t\t\t'translated'   => __( 'Yandex', 'wp-statistics' ),\n\t\t\t'tag'          => 'yandex',\n\t\t\t'sqlpattern'   => '%yandex.ru%',\n\t\t\t'regexpattern' => 'yandex\\.ru',\n\t\t\t'querykey'     => 'text',\n\t\t\t'image'        => 'yandex.png',\n\t\t),\n\t\t'qwant'      => array(\n\t\t\t'name'         => 'Qwant',\n\t\t\t'translated'   => __( 'Qwant', 'wp-statistics' ),\n\t\t\t'tag'          => 'qwant',\n\t\t\t'sqlpattern'   => '%qwant.com%',\n\t\t\t'regexpattern' => 'qwant\\.com',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'qwant.png',\n\t\t)\n\t);\n\n\tif ( $all == false ) {\n\t\tforeach ( $engines as $key => $engine ) {\n\t\t\tif ( $WP_Statistics->get_option( 'disable_se_' . $engine['tag'] ) ) {\n\t\t\t\tunset( $engines[ $key ] );\n\t\t\t}\n\t\t}\n\n\t\t// If we've disabled all the search engines, reset the list back to default.\n\t\tif ( count( $engines ) == 0 ) {\n\t\t\t$engines = $default;\n\t\t}\n\t}\n\n\treturn $engines;\n}\n\n// This function will return the SQL WHERE clause for getting the search words for a given search engine.\nfunction wp_statistics_searchword_query( $search_engine = 'all' ) {\n\tGLOBAL $WP_Statistics;\n\n\t// Get a complete list of search engines\n\t$searchengine_list = wp_statistics_searchengine_list();\n\t$search_query      = '';\n\n\tif ( $WP_Statistics->get_option( 'search_converted' ) ) {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\tforeach ( $searchengine_list as $key => $se ) {\n\t\t\t\t$search_query .= \"( `engine` = '{$key}' AND `words` <> '' ) OR \";\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t$search_query .= \"`engine` = '{$search_engine}' AND `words` <> ''\";\n\t\t}\n\t} else {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\t// NOTE:  This SQL query can be *VERY* long.\n\t\t\tforeach ( $searchengine_list as $se ) {\n\t\t\t\t// The SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\t\tif ( is_array( $se['sqlpattern'] ) ) {\n\t\t\t\t\tforeach ( $se['sqlpattern'] as $subse ) {\n\t\t\t\t\t\t$search_query .= \"(`referred` LIKE '{$subse}{$se['querykey']}=%' AND `referred` NOT LIKE '{$subse}{$se['querykey']}=&%' AND `referred` NOT LIKE '{$subse}{$se['querykey']}=') OR \";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$search_query .= \"(`referred` LIKE '{$se['sqlpattern']}{$se['querykey']}=%' AND `referred` NOT LIKE '{$se['sqlpattern']}{$se['querykey']}=&%' AND `referred` NOT LIKE '{$se['sqlpattern']}{$se['querykey']}=')  OR \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t// For just one?  Ok, the SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\tif ( is_array( $searchengine_list[ $search_engine ]['sqlpattern'] ) ) {\n\t\t\t\tforeach ( $searchengine_list[ $search_engine ]['sqlpattern'] as $se ) {\n\t\t\t\t\t$search_query .= \"(`referred` LIKE '{$se}{$searchengine_list[$search_engine]['querykey']}=%' AND `referred` NOT LIKE '{$se}{$searchengine_list[$search_engine]['querykey']}=&%' AND `referred` NOT LIKE '{$se}{$searchengine_list[$search_engine]['querykey']}=') OR \";\n\t\t\t\t}\n\n\t\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t\t} else {\n\t\t\t\t$search_query .= \"(`referred` LIKE '{$searchengine_list[$search_engine]['sqlpattern']}{$searchengine_list[$search_engine]['querykey']}=%' AND `referred` NOT LIKE '{$searchengine_list[$search_engine]['sqlpattern']}{$searchengine_list[$search_engine]['querykey']}=&%' AND `referred` NOT LIKE '{$searchengine_list[$search_engine]['sqlpattern']}{$searchengine_list[$search_engine]['querykey']}=')\";\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $search_query;\n}\n\n// This function will return the SQL WHERE clause for getting the search engine.\nfunction wp_statistics_searchengine_query( $search_engine = 'all' ) {\n\tGLOBAL $WP_Statistics;\n\n\t// Get a complete list of search engines\n\t$searchengine_list = wp_statistics_searchengine_list();\n\t$search_query      = '';\n\n\tif ( $WP_Statistics->get_option( 'search_converted' ) ) {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\tforeach ( $searchengine_list as $key => $se ) {\n\t\t\t\t$key          = esc_sql( $key );\n\t\t\t\t$search_query .= \"`engine` = '{$key}' OR \";\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t$search_engine = esc_sql( $search_engine );\n\t\t\t$search_query  .= \"`engine` = '{$search_engine}'\";\n\t\t}\n\t} else {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\t// NOTE:  This SQL query can be long.\n\t\t\tforeach ( $searchengine_list as $se ) {\n\t\t\t\t// The SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\t\tif ( is_array( $se['sqlpattern'] ) ) {\n\t\t\t\t\tforeach ( $se['sqlpattern'] as $subse ) {\n\t\t\t\t\t\t$subse        = esc_sql( $subse );\n\t\t\t\t\t\t$search_query .= \"`referred` LIKE '{$subse}' OR \";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$se['sqlpattern'] = esc_sql( $se['sqlpattern'] );\n\t\t\t\t\t$search_query     .= \"`referred` LIKE '{$se['sqlpattern']}' OR \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t// For just one?  Ok, the SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\tif ( is_array( $searchengine_list[ $search_engine ]['sqlpattern'] ) ) {\n\t\t\t\tforeach ( $searchengine_list[ $search_engine ]['sqlpattern'] as $se ) {\n\t\t\t\t\t$se           = esc_sql( $se );\n\t\t\t\t\t$search_query .= \"`referred` LIKE '{$se}' OR \";\n\t\t\t\t}\n\n\t\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t\t} else {\n\t\t\t\t$searchengine_list[ $search_engine ]['sqlpattern'] = esc_sql( $searchengine_list[ $search_engine ]['sqlpattern'] );\n\t\t\t\t$search_query                                      .= \"`referred` LIKE '{$searchengine_list[$search_engine]['sqlpattern']}'\";\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $search_query;\n}\n\n// This function will return a regular expression clause for matching one or more search engines.\nfunction wp_statistics_searchengine_regex( $search_engine = 'all' ) {\n\n\t// Get a complete list of search engines\n\t$searchengine_list = wp_statistics_searchengine_list();\n\t$search_query      = '';\n\n\t// Are we getting results for all search engines or a specific one?\n\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\tforeach ( $searchengine_list as $se ) {\n\t\t\t// The SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\tif ( is_array( $se['regexpattern'] ) ) {\n\t\t\t\tforeach ( $se['regexpattern'] as $subse ) {\n\t\t\t\t\t$search_query .= \"{$subse}|\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$search_query .= \"{$se['regexpattern']}|\";\n\t\t\t}\n\t\t}\n\n\t\t// Trim off the last '|' for the loop above.\n\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 1 );\n\t} else {\n\t\t// For just one?  Ok, the SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\tif ( is_array( $searchengine_list[ $search_engine ]['regexpattern'] ) ) {\n\t\t\tforeach ( $searchengine_list[ $search_engine ]['regexpattern'] as $se ) {\n\t\t\t\t$search_query .= \"{$se}|\";\n\t\t\t}\n\n\t\t\t// Trim off the last '|' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 1 );\n\t\t} else {\n\t\t\t$search_query .= $searchengine_list[ $search_engine ]['regexpattern'];\n\t\t}\n\t}\n\n\t// Add the brackets and return\n\treturn \"({$search_query})\";\n}\n\n/**\n * Get Search engine Statistics\n *\n * @param string $search_engine\n * @param string $time\n * @param string $search_by [query / name]\n * @return mixed\n */\nfunction wp_statistics_get_search_engine_query( $search_engine = 'all', $time = 'total', $search_by = 'query' ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Prepare Table Name\n\t$table_name = $wpdb->prefix . 'statistics_';\n\tif ( $WP_Statistics->get_option( 'search_converted' ) ) {\n\t\t$table_name .= 'search';\n\t} else {\n\t\t$table_name .= 'visitor';\n\t}\n\n\t//Date Column table\n\t$date_column = 'last_counter';\n\n\t// Get a complete list of search engines\n\tif ( $search_by == \"query\" ) {\n\t\t$search_query = wp_statistics_searchengine_query( $search_engine );\n\t} else {\n\t\t$search_query = wp_statistics_searchword_query( $search_engine );\n\t}\n\n\t//Generate Base Sql\n\t$sql = \"SELECT * FROM {$table_name} WHERE ({$search_query})\";\n\n\t//Generate MySql Time Conditions\n\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time, array( 'current_date' => true ) );\n\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t$sql = $sql . ' AND (' . $mysql_time_sql . ')';\n\t}\n\n\t//Request Data\n\t$result = $wpdb->query( $sql );\n\treturn $result;\n}\n\n/**\n * This function will return the statistics for a given search engine.\n *\n * @param string $search_engine\n * @param string $time\n * @return mixed\n */\nfunction wp_statistics_searchengine( $search_engine = 'all', $time = 'total' ) {\n\treturn wp_statistics_get_search_engine_query( $search_engine, $time, $search_by = 'query' );\n}\n\n//This Function will return the referrer list\nfunction wp_statistics_referrer( $time = null ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t$timezone = array(\n\t\t'today'     => 0,\n\t\t'yesterday' => - 1,\n\t\t'week'      => - 7,\n\t\t'month'     => - 30,\n\t\t'year'      => - 365,\n\t\t'total'     => 'ALL',\n\t);\n\t$sql      = \"SELECT `referred` FROM `\" . $wpdb->prefix . \"statistics_visitor` WHERE referred <> ''\";\n\tif ( array_key_exists( $time, $timezone ) ) {\n\t\tif ( $time != \"total\" ) {\n\t\t\t$sql .= \" AND (`last_counter` = '{$WP_Statistics->Current_Date( 'Y-m-d', $timezone[$time] )}')\";\n\t\t}\n\t} else {\n\t\t//Set Default\n\t\t$sql .= \" AND (`last_counter` = '{$WP_Statistics->Current_Date( 'Y-m-d', $time )}')\";\n\t}\n\t$result = $wpdb->get_results( $sql );\n\n\t$urls = array();\n\tforeach ( $result as $item ) {\n\t\t$url = parse_url( $item->referred );\n\t\tif ( empty( $url['host'] ) || stristr( get_bloginfo( 'url' ), $url['host'] ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$urls[] = $url['scheme'] . '://' . $url['host'];\n\t}\n\t$get_urls = array_count_values( $urls );\n\n\treturn count( $get_urls );\n}\n\n/**\n * This function will return the statistics for a given search engine for a given time frame.\n *\n * @param string $search_engine\n * @param string $time\n * @return mixed\n */\nfunction wp_statistics_searchword( $search_engine = 'all', $time = 'total' ) {\n\treturn wp_statistics_get_search_engine_query( $search_engine, $time, $search_by = 'word' );\n}\n\n// This function will return the total number of posts in WordPress.\nfunction wp_statistics_countposts() {\n\t$count_posts = wp_count_posts( 'post' );\n\n\t$ret = 0;\n\tif ( is_object( $count_posts ) ) {\n\t\t$ret = $count_posts->publish;\n\t}\n\treturn $ret;\n}\n\n// This function will return the total number of pages in WordPress.\nfunction wp_statistics_countpages() {\n\t$count_pages = wp_count_posts( 'page' );\n\n\t$ret = 0;\n\tif ( is_object( $count_pages ) ) {\n\t\t$ret = $count_pages->publish;\n\t}\n\treturn $ret;\n}\n\n// This function will return the total number of comments in WordPress.\nfunction wp_statistics_countcomment() {\n\tglobal $wpdb;\n\n\t$countcomms = $wpdb->get_var( \"SELECT COUNT(*) FROM {$wpdb->comments} WHERE comment_approved = '1'\" );\n\treturn $countcomms;\n}\n\n// This function will return the total number of spam comments *IF* akismet is installed.\nfunction wp_statistics_countspam() {\n\n\treturn number_format_i18n( get_option( 'akismet_spam_count' ) );\n}\n\n// This function will return the total number of users in WordPress.\nfunction wp_statistics_countusers() {\n\n\t$result = count_users();\n\n\treturn $result['total_users'];\n}\n\n// This function will return the last date a post was published on your site.\nfunction wp_statistics_lastpostdate() {\n\n\tglobal $wpdb, $WP_Statistics;\n\n\t$db_date = $wpdb->get_var(\n\t\t\"SELECT post_date FROM {$wpdb->posts} WHERE post_type='post' AND post_status='publish' ORDER BY post_date DESC LIMIT 1\"\n\t);\n\n\t$date_format = get_option( 'date_format' );\n\n\treturn $WP_Statistics->Current_Date_i18n( $date_format, $db_date, false );\n}\n\n// This function will return the average number of posts per day that are published on your site.\n// Alternatively if $days is set to true it returns the average number of days between posts on your site.\nfunction wp_statistics_average_post( $days = false ) {\n\n\tglobal $wpdb;\n\n\t$get_first_post = $wpdb->get_var(\n\t\t\"SELECT post_date FROM {$wpdb->posts} WHERE post_status = 'publish' ORDER BY post_date LIMIT 1\"\n\t);\n\t$get_total_post = $wpdb->get_var(\n\t\t\"SELECT COUNT(*) FROM {$wpdb->posts} WHERE post_status = 'publish' AND post_type = 'post'\"\n\t);\n\n\t$days_spend = intval(\n\t\t( time() - strtotime( $get_first_post ) ) / 86400\n\t); // 86400 = 60 * 60 * 24 = number of seconds in a day\n\n\tif ( $days == true ) {\n\t\tif ( $get_total_post == 0 ) {\n\t\t\t$get_total_post = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $days_spend / $get_total_post, 0 );\n\t} else {\n\t\tif ( $days_spend == 0 ) {\n\t\t\t$days_spend = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $get_total_post / $days_spend, 2 );\n\t}\n}\n\n// This function will return the average number of comments per day that are published on your site.\n// Alternatively if $days is set to true it returns the average number of days between comments on your site.\nfunction wp_statistics_average_comment( $days = false ) {\n\n\tglobal $wpdb;\n\n\t$get_first_comment = $wpdb->get_var( \"SELECT comment_date FROM {$wpdb->comments} ORDER BY comment_date LIMIT 1\" );\n\t$get_total_comment = $wpdb->get_var( \"SELECT COUNT(*) FROM {$wpdb->comments} WHERE comment_approved = '1'\" );\n\n\t$days_spend = intval(\n\t\t( time() - strtotime( $get_first_comment ) ) / 86400\n\t); // 86400 = 60 * 60 * 24 = number of seconds in a day\n\n\tif ( $days == true ) {\n\t\tif ( $get_total_comment == 0 ) {\n\t\t\t$get_total_comment = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $days_spend / $get_total_comment, 0 );\n\t} else {\n\t\tif ( $days_spend == 0 ) {\n\t\t\t$days_spend = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $get_total_comment / $days_spend, 2 );\n\t}\n}\n\n// This function will return the average number of users per day that are registered on your site.\n// Alternatively if $days is set to true it returns the average number of days between user registrations on your site.\nfunction wp_statistics_average_registeruser( $days = false ) {\n\n\tglobal $wpdb;\n\n\t$get_first_user = $wpdb->get_var( \"SELECT user_registered FROM {$wpdb->users} ORDER BY user_registered LIMIT 1\" );\n\t$get_total_user = $wpdb->get_var( \"SELECT COUNT(*) FROM {$wpdb->users}\" );\n\n\t$days_spend = intval(\n\t\t( time() - strtotime( $get_first_user ) ) / 86400\n\t); // 86400 = 60 * 60 * 24 = number of seconds in a day\n\n\tif ( $days == true ) {\n\t\tif ( $get_total_user == 0 ) {\n\t\t\t$get_total_user = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $days_spend / $get_total_user, 0 );\n\t} else {\n\t\tif ( $days_spend == 0 ) {\n\t\t\t$days_spend = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $get_total_user / $days_spend, 2 );\n\t}\n}\n\n// This function handle's the Dashicons in the overview page.\nfunction wp_statistics_icons( $dashicons, $icon_name = null ) {\n\tif ( null == $icon_name ) {\n\t\t$icon_name = $dashicons;\n\t}\n\n\treturn '<span class=\"dashicons ' . $dashicons . '\"></span>';\n}\n\n// This function checks to see if all the PHP modules we need for GeoIP exists.\nfunction wp_statistics_geoip_supported() {\n\t// Check to see if we can support the GeoIP code, requirements are:\n\t$enabled = true;\n\n\t// PHP's cURL extension installed\n\tif ( ! function_exists( 'curl_init' ) ) {\n\t\t$enabled = false;\n\t}\n\n\t// PHP NOT running in safe mode\n\tif ( ini_get( 'safe_mode' ) ) {\n\t\t// Double check php version, 5.4 and above don't support safe mode but the ini value may still be set after an upgrade.\n\t\tif ( ! version_compare( phpversion(), '5.4', '<' ) ) {\n\t\t\t$enabled = false;\n\t\t}\n\t}\n\n\treturn $enabled;\n}\n\n// This function creates the date range selector 'widget' used in the various statistics pages.\nfunction wp_statistics_date_range_selector( $page, $current, $range = array(), $desc = array(), $extrafields = '', $pre_extra = '', $post_extra = '' ) {\n\tGLOBAL $WP_Statistics;\n\n\t//import DataPicker Jquery Ui Jquery Plugin\n\twp_enqueue_script( 'jquery-ui-datepicker' );\n\twp_register_style( 'jquery-ui-smoothness-css', WP_Statistics::$reg['plugin-url'] . 'assets/css/jquery-ui-smoothness.min.css' );\n\twp_enqueue_style( 'jquery-ui-smoothness-css' );\n\n\t//Create Object List Of Default Hit Day to Display\n\tif ( $range == null or count( $range ) == 0 ) {\n\n\t\t//Get Number Of Time Range\n\t\t$range = array( 10, 20, 30, 60, 90, 180, 270, 365 );\n\n\t\t//Added All time From installed plugin to now\n\t\t$installed_date = WP_Statistics::get_number_days_install_plugin();\n\t\tarray_push( $range, $installed_date['days'] );\n\n\t\t//Get List Of Text Lang time Range\n\t\t$desc = array(\n\t\t\t__( '10 Days', 'wp-statistics' ),\n\t\t\t__( '20 Days', 'wp-statistics' ),\n\t\t\t__( '30 Days', 'wp-statistics' ),\n\t\t\t__( '2 Months', 'wp-statistics' ),\n\t\t\t__( '3 Months', 'wp-statistics' ),\n\t\t\t__( '6 Months', 'wp-statistics' ),\n\t\t\t__( '9 Months', 'wp-statistics' ),\n\t\t\t__( '1 Year', 'wp-statistics' ),\n\t\t\t__( 'All', 'wp-statistics' ),\n\t\t);\n\t}\n\tif ( count( $desc ) == 0 ) {\n\t\t$desc = $range;\n\t}\n\t$rcount = count( $range );\n\t$bold   = true;\n\n\t// Check to see if there's a range in the URL, if so set it, otherwise use the default.\n\tif ( isset( $_GET['rangestart'] ) and strtotime( $_GET['rangestart'] ) != false ) {\n\t\t$rangestart = $_GET['rangestart'];\n\t} else {\n\t\t$rangestart = $WP_Statistics->Current_Date( 'm/d/Y', '-' . $current );\n\t}\n\tif ( isset( $_GET['rangeend'] ) and strtotime( $_GET['rangeend'] ) != false ) {\n\t\t$rangeend = $_GET['rangeend'];\n\t} else {\n\t\t$rangeend = $WP_Statistics->Current_Date( 'm/d/Y' );\n\t}\n\n\t// Convert the text dates to unix timestamps and do some basic sanity checking.\n\t$rangestart_utime = $WP_Statistics->strtotimetz( $rangestart );\n\tif ( false === $rangestart_utime ) {\n\t\t$rangestart_utime = time();\n\t}\n\t$rangeend_utime = $WP_Statistics->strtotimetz( $rangeend );\n\tif ( false === $rangeend_utime || $rangeend_utime < $rangestart_utime ) {\n\t\t$rangeend_utime = time();\n\t}\n\n\t// Now get the number of days in the range.\n\t$daysToDisplay = (int) ( ( $rangeend_utime - $rangestart_utime ) / 24 / 60 / 60 );\n\t$today         = $WP_Statistics->Current_Date( 'm/d/Y' );\n\n\t// Re-create the range start/end strings from our utime's to make sure we get ride of any cruft and have them in the format we want.\n\t$rangestart = $WP_Statistics->Local_Date( get_option( \"date_format\" ), $rangestart_utime );\n\t$rangeend   = $WP_Statistics->Local_Date( get_option( \"date_format\" ), $rangeend_utime );\n\n\t//Calculate hit day if range is exist\n\tif ( isset( $_GET['rangeend'] ) and isset( $_GET['rangestart'] ) and strtotime( $_GET['rangestart'] ) != false and strtotime( $_GET['rangeend'] ) != false ) {\n\t\t$earlier = new DateTime( $_GET['rangestart'] );\n\t\t$later   = new DateTime( $_GET['rangeend'] );\n\t\t$current = $daysToDisplay = $later->diff( $earlier )->format( \"%a\" );\n\t}\n\n\techo '<form method=\"get\"><ul class=\"subsubsub wp-statistics-sub-fullwidth\">' . \"\\r\\n\";\n\t// Output any extra HTML we've been passed after the form element but before the date selector.\n\techo $pre_extra;\n\n\tfor ( $i = 0; $i < $rcount; $i ++ ) {\n\t\techo '<li class=\"all\"><a ';\n\t\tif ( $current == $range[ $i ] ) {\n\t\t\techo 'class=\"current\" ';\n\t\t\t$bold = false;\n\t\t}\n\n\t\t// Don't bother adding he date range to the standard links as they're not needed any may confuse the custom range selector.\n\t\techo 'href=\"?page=' . $page . '&hitdays=' . $range[ $i ] . esc_html( $extrafields ) . '\">' . $desc[ $i ] . '</a></li>';\n\t\tif ( $i < $rcount - 1 ) {\n\t\t\techo ' | ';\n\t\t}\n\t\techo \"\\r\\n\";\n\t}\n\techo ' | ';\n\techo '<input type=\"hidden\" name=\"page\" value=\"' . $page . '\">';\n\n\tparse_str( $extrafields, $parse );\n\tforeach ( $parse as $key => $value ) {\n\t\techo '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . esc_sql( $value ) . '\">';\n\t}\n\n\tif ( $bold ) {\n\t\techo ' <b>' . __( 'Time Frame', 'wp-statistics' ) . ':</b> ';\n\t} else {\n\t\techo ' ' . __( 'Time Frame', 'wp-statistics' ) . ': ';\n\t}\n\n\t//Print Time Range Select Ui\n\techo '<input type=\"text\" size=\"18\" name=\"rangestart\" id=\"datestartpicker\" value=\"' . $rangestart . '\" placeholder=\"' . __( wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ), 'wp-statistics' ) . '\" autocomplete=\"off\"> ' . __( 'to', 'wp-statistics' ) . ' <input type=\"text\" size=\"18\" name=\"rangeend\" id=\"dateendpicker\" value=\"' . $rangeend . '\" placeholder=\"' . __( wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ), 'wp-statistics' ) . '\" autocomplete=\"off\"> <input type=\"submit\" value=\"' . __( 'Go', 'wp-statistics' ) . '\" class=\"button-primary\">' . \"\\r\\n\";\n\n\t//Sanitize Time Request\n\techo '<input type=\"hidden\" name=\"rangestart\" id=\"rangestart\" value=\"' . $WP_Statistics->Local_Date( \"Y-m-d\", $rangestart_utime ) . '\">';\n\techo '<input type=\"hidden\" name=\"rangeend\" id=\"rangeend\" value=\"' . $WP_Statistics->Local_Date( \"Y-m-d\", $rangeend_utime ) . '\">';\n\n\t// Output any extra HTML we've been passed after the date selector but before the submit button.\n\techo $post_extra;\n\n\techo '</form>' . \"\\r\\n\";\n\techo '<script>\n        jQuery(function() { \n        //Get MYSQL Date\n        function wp_statistics_get_mysql_date(timestamp) {\n            var k = timestamp.valueOf() / 1000;\n            var t = new Date(k * 1000);\n            return t.getFullYear() + \"-\" + (\"0\" + (t.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + t.getDate()).slice(-2);\n        }\n        //From Date\n        jQuery( \"#datestartpicker\" ).datepicker({dateFormat: \\'' . wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ) . '\\', onSelect: function(selectedDate) {var v = jQuery(this).val();var d = new Date(v);if (v.length > 0) {jQuery(\"#rangestart\").val(wp_statistics_get_mysql_date(d));}}});\n        //To Date\n        jQuery( \"#dateendpicker\" ).datepicker({dateFormat: \\'' . wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ) . '\\', onSelect: function(selectedDate) {var v = jQuery(this).val();var d = new Date(v);if (v.length > 0) {jQuery(\"#rangeend\").val(wp_statistics_get_mysql_date(d));}}});\n        });\n        </script>' . \"\\r\\n\";\n}\n\n/*\n * Prepare Range Time For Time picker\n */\nfunction wp_statistics_prepare_range_time_picker() {\n\n\t//Get Default Number To display in All\n\t$installed_date = WP_Statistics::get_number_days_install_plugin();\n\t$daysToDisplay  = $installed_date['days'];\n\n\t//List Of Pages For show 20 Days as First Parameter\n\t$list_of_pages = array( 'hits', 'searches', 'pages', 'countries', 'categories', 'tags', 'authors', 'browser', 'exclusions' );\n\tforeach ( $list_of_pages as $page ) {\n\t\tif ( isset( $_GET['page'] ) and $_GET['page'] == WP_Statistics::$page[ $page ] ) {\n\t\t\t$daysToDisplay = 30;\n\t\t}\n\t}\n\n\t//Set Default Object Time Range\n\t$rangestart = '';\n\t$rangeend   = '';\n\n\t//Check Hit Day\n\tif ( isset( $_GET['hitdays'] ) and $_GET['hitdays'] > 0 ) {\n\t\t$daysToDisplay = intval( $_GET['hitdays'] );\n\t}\n\tif ( isset( $_GET['rangeend'] ) and isset( $_GET['rangestart'] ) and strtotime( $_GET['rangestart'] ) != false and strtotime( $_GET['rangeend'] ) != false ) {\n\t\t$rangestart = $_GET['rangestart'];\n\t\t$rangeend   = $_GET['rangeend'];\n\n\t\t//Calculate hit day if range is exist\n\t\t$earlier       = new DateTime( $_GET['rangestart'] );\n\t\t$later         = new DateTime( $_GET['rangeend'] );\n\t\t$daysToDisplay = $later->diff( $earlier )->format( \"%a\" );\n\t}\n\n\treturn array( $daysToDisplay, $rangestart, $rangeend );\n}\n\n/**\n * Convert php date format to Jquery Ui\n *\n * @param $php_format\n * @return string\n */\nfunction wp_statistics_dateformat_php_to_jqueryui( $php_format ) {\n\t$SYMBOLS_MATCHING = array(\n\t\t// Day\n\t\t'd' => 'dd',\n\t\t'D' => 'D',\n\t\t'j' => 'd',\n\t\t'l' => 'DD',\n\t\t'N' => '',\n\t\t'S' => '',\n\t\t'w' => '',\n\t\t'z' => 'o',\n\t\t// Week\n\t\t'W' => '',\n\t\t// Month\n\t\t'F' => 'MM',\n\t\t'm' => 'mm',\n\t\t'M' => 'M',\n\t\t'n' => 'm',\n\t\t't' => '',\n\t\t// Year\n\t\t'L' => '',\n\t\t'o' => '',\n\t\t'Y' => 'yy',\n\t\t'y' => 'y',\n\t\t// Time\n\t\t'a' => '',\n\t\t'A' => '',\n\t\t'B' => '',\n\t\t'g' => '',\n\t\t'G' => '',\n\t\t'h' => '',\n\t\t'H' => '',\n\t\t'i' => '',\n\t\t's' => '',\n\t\t'u' => ''\n\t);\n\t$jqueryui_format  = \"\";\n\t$escaping         = false;\n\tfor ( $i = 0; $i < strlen( $php_format ); $i ++ ) {\n\t\t$char = $php_format[ $i ];\n\t\tif ( $char === '\\\\' ) {\n\t\t\t$i ++;\n\t\t\tif ( $escaping ) {\n\t\t\t\t$jqueryui_format .= $php_format[ $i ];\n\t\t\t} else {\n\t\t\t\t$jqueryui_format .= '\\'' . $php_format[ $i ];\n\t\t\t}\n\t\t\t$escaping = true;\n\t\t} else {\n\t\t\tif ( $escaping ) {\n\t\t\t\t$jqueryui_format .= \"'\";\n\t\t\t\t$escaping        = false;\n\t\t\t}\n\t\t\tif ( isset( $SYMBOLS_MATCHING[ $char ] ) ) {\n\t\t\t\t$jqueryui_format .= $SYMBOLS_MATCHING[ $char ];\n\t\t\t} else {\n\t\t\t\t$jqueryui_format .= $char;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $jqueryui_format;\n}\n\n/**\n * This function is used to calculate the number of days and their respective unix timestamps.\n *\n * @param $days\n * @param $start\n * @param $end\n * @return array\n */\nfunction wp_statistics_date_range_calculator( $days, $start, $end ) {\n\tglobal $WP_Statistics;\n\n\t$daysToDisplay = $days;\n\t$rangestart    = $start;\n\t$rangeend      = $end;\n\n\t//Check Exist params\n\tif ( ! empty( $daysToDisplay ) and ! empty( $rangestart ) and ! empty( $rangeend ) ) {\n\t\treturn array( $daysToDisplay, strtotime( $rangestart ), strtotime( $rangeend ) );\n\t}\n\n\t//Check Not Exist day to display\n\tif ( $daysToDisplay == - 1 ) {\n\t\t$rangestart_utime = $WP_Statistics->strtotimetz( $rangestart );\n\t\t$rangeend_utime   = $WP_Statistics->strtotimetz( $rangeend );\n\t\t$daysToDisplay    = (int) ( ( $rangeend_utime - $rangestart_utime ) / 24 / 60 / 60 );\n\n\t\tif ( $rangestart_utime == false || $rangeend_utime == false ) {\n\t\t\t$daysToDisplay    = 20;\n\t\t\t$rangeend_utime   = $WP_Statistics->timetz();\n\t\t\t$rangestart_utime = $rangeend_utime - ( $daysToDisplay * 24 * 60 * 60 );\n\t\t}\n\t} else {\n\t\t$rangeend_utime   = $WP_Statistics->timetz();\n\t\t$rangestart_utime = $rangeend_utime - ( $daysToDisplay * 24 * 60 * 60 );\n\t}\n\n\treturn array( $daysToDisplay, $rangestart_utime, $rangeend_utime );\n}\n\n\n/**\n * Delete All record From Table\n *\n * @param bool $table_name\n * @return string\n */\nfunction wp_statitiscs_empty_table( $table_name = false ) {\n\tglobal $wpdb;\n\n\tif ( $table_name ) {\n\t\t$result = $wpdb->query( 'DELETE FROM ' . $table_name );\n\n\t\tif ( $result ) {\n\t\t\treturn sprintf( __( '%s table data deleted successfully.', 'wp-statistics' ), '<code>' . $table_name . '</code>' );\n\t\t}\n\t}\n\n\treturn sprintf( __( 'Error, %s not emptied!', 'wp-statistics' ), $table_name );\n}\n\n\n/**\n * This function creates a small JavaScript that will load the contents of a overview or dashboard widget.\n *\n * @param $widget\n * @param null $container_id\n */\nfunction wp_statistics_generate_widget_load_javascript( $widget, $container_id = null ) {\n\tif ( null == $container_id ) {\n\t\t$container_id = str_replace( '.', '_', $widget . '_postbox' );\n\t}\n\t?>\n    <script type=\"text/javascript\">\n        jQuery(document).ready(function () {\n            wp_statistics_get_widget_contents('<?php echo $widget; ?>', '<?php echo $container_id; ?>');\n        });\n    </script>\n\t<?php\n}\n\n/**\n * Generate RGBA colors\n *\n * @param        $num\n * @param string $opacity\n *\n * @return string\n */\nfunction wp_statistics_generate_rgba_color( $num, $opacity = '1' ) {\n\t$hash = md5( 'color' . $num );\n\n\treturn sprintf(\n\t\t\"'rgba(%s, %s, %s, %s)'\",\n\t\thexdec( substr( $hash, 0, 2 ) ),\n\t\thexdec( substr( $hash, 2, 2 ) ),\n\t\thexdec( substr( $hash, 4, 2 ) ),\n\t\t$opacity\n\t);\n}\n\n/**\n * This function will validate that a capability exists,\n * if not it will default to returning the 'manage_options' capability.\n *\n * @param string $capability Capability\n * @return string 'manage_options'\n */\nfunction wp_statistics_validate_capability( $capability ) {\n\tglobal $wp_roles;\n\n\tif ( ! is_object( $wp_roles ) || ! is_array( $wp_roles->roles ) ) {\n\t\treturn 'manage_options';\n\t}\n\n\tforeach ( $wp_roles->roles as $role ) {\n\t\t$cap_list = $role['capabilities'];\n\n\t\tforeach ( $cap_list as $key => $cap ) {\n\t\t\tif ( $capability == $key ) {\n\t\t\t\treturn $capability;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 'manage_options';\n}\n\n/**\n * Check User Access To WP-Statistics Admin\n *\n * @param string $type [manage | read ]\n * @param string|boolean $export\n * @return bool\n */\nfunction wp_statistics_check_access_user( $type = 'both', $export = false ) {\n\tglobal $WP_Statistics;\n\n\t//List Of Default Cap\n\t$list = array(\n\t\t'manage' => array( 'manage_capability', 'manage_options' ),\n\t\t'read'   => array( 'read_capability', 'manage_options' )\n\t);\n\n\t//User User Cap\n\t$cap = 'both';\n\tif ( ! empty( $type ) and array_key_exists( $type, $list ) ) {\n\t\t$cap = $type;\n\t}\n\n\t//Check Export Cap name or Validation current_can_user\n\tif ( $export == \"cap\" ) {\n\t\treturn wp_statistics_validate_capability( $WP_Statistics->get_option( $list[ $cap ][0], $list[ $cap ][1] ) );\n\t}\n\n\t//Check Access\n\tswitch ( $type ) {\n\t\tcase \"manage\":\n\t\tcase \"read\":\n\t\t\treturn current_user_can( wp_statistics_validate_capability( $WP_Statistics->get_option( $list[ $cap ][0], $list[ $cap ][1] ) ) );\n\t\t\tbreak;\n\t\tcase \"both\":\n\t\t\tforeach ( array( 'manage', 'read' ) as $c ) {\n\t\t\t\tif ( wp_statistics_check_access_user( $c ) === true ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn false;\n}\n\n/**\n * Notices displayed near the top of admin pages.\n *\n * @param $type\n * @param $message\n * @area admin\n */\nfunction wp_statistics_admin_notice_result( $type, $message ) {\n\n\tswitch ( $type ) {\n\t\tcase 'error':\n\t\t\t$class = 'notice notice-error';\n\t\t\tbreak;\n\n\t\tcase 'warning':\n\t\t\t$class = 'notice notice-warning';\n\t\t\tbreak;\n\n\t\tcase 'success':\n\t\t\t$class = 'notice notice-success';\n\t\t\tbreak;\n\t}\n\n\tprintf( '<div class=\"%1$s\"><p>%2$s</p></div>', esc_attr( $class ), esc_html( $message ) );\n}\n\n/**\n * Get All Browser List For Detecting\n *\n * @param bool $all\n * @area utility\n * @return array|mixed\n */\nfunction wp_statistics_get_browser_list( $all = true ) {\n\n\t//List Of Detect Browser in WP Statistics\n\t$list        = array(\n\t\t\"chrome\"  => __( \"Chrome\", 'wp-statistics' ),\n\t\t\"firefox\" => __( \"Firefox\", 'wp-statistics' ),\n\t\t\"msie\"    => __( \"Internet Explorer\", 'wp-statistics' ),\n\t\t\"edge\"    => __( \"Edge\", 'wp-statistics' ),\n\t\t\"opera\"   => __( \"Opera\", 'wp-statistics' ),\n\t\t\"safari\"  => __( \"Safari\", 'wp-statistics' )\n\t);\n\t$browser_key = array_keys( $list );\n\n\t//Return All Browser List\n\tif ( $all === true ) {\n\t\treturn $list;\n\t\t//Return Browser Keys For detect\n\t} elseif ( $all == \"key\" ) {\n\t\treturn $browser_key;\n\t} else {\n\t\t//Return Custom Browser Name by key\n\t\tif ( array_search( strtolower( $all ), $browser_key ) !== false ) {\n\t\t\treturn $list[ strtolower( $all ) ];\n\t\t} else {\n\t\t\treturn __( \"Unknown\", 'wp-statistics' );\n\t\t}\n\t}\n}\n\n/**\n * Pagination Link\n *\n * @param array $args\n * @area admin\n * @return string\n */\nfunction wp_statistics_paginate_links( $args = array() ) {\n\n\t//Prepare Arg\n\t$defaults   = array(\n\t\t'item_per_page' => 10,\n\t\t'container'     => 'pagination-wrap',\n\t\t'query_var'     => 'pagination-page',\n\t\t'total'         => 0,\n\t\t'current'       => 0,\n\t\t'show_now_page' => true\n\t);\n\t$args       = wp_parse_args( $args, $defaults );\n\t$total_page = ceil( $args['total'] / $args['item_per_page'] );\n\n\t//Show Pagination Ui\n\tif ( $total_page > 1 ) {\n\t\techo '<div class=\"' . $args['container'] . '\">';\n\t\techo paginate_links( array(\n\t\t\t'base'      => add_query_arg( $args['query_var'], '%#%' ),\n\t\t\t'format'    => '',\n\t\t\t'type'      => 'list',\n\t\t\t'mid_size'  => 3,\n\t\t\t'prev_text' => __( '&laquo;' ),\n\t\t\t'next_text' => __( '&raquo;' ),\n\t\t\t'total'     => $total_page,\n\t\t\t'current'   => $args['current']\n\t\t) );\n\n\t\tif ( $args['show_now_page'] ) {\n\t\t\techo '<p id=\"result-log\">' . sprintf( __( 'Page %1$s of %2$s', 'wp-statistics' ), $args['current'], $total_page ) . '</p>';\n\t\t}\n\n\t\techo '</div>';\n\t}\n}\n\n/**\n * Get Post List From custom Post Type\n *\n * @param array $args\n * @area utility\n * @return mixed\n */\nfunction wp_statistics_get_post_list( $args = array() ) {\n\n\t//Prepare Arg\n\t$defaults = array(\n\t\t'post_type'      => 'page',\n\t\t'post_status'    => 'publish',\n\t\t'posts_per_page' => '-1',\n\t\t'order'          => 'ASC',\n\t\t'fields'         => 'ids'\n\t);\n\t$args     = wp_parse_args( $args, $defaults );\n\n\t//Get Post List\n\t$query = new WP_Query( $args );\n\t$list  = array();\n\tforeach ( $query->posts as $ID ) {\n\t\t$list[ $ID ] = get_the_title( $ID );\n\t}\n\n\treturn $list;\n}\n\n/**\n * Get Page information\n *\n * @param $page_id\n * @param string $type\n * @return array\n */\nfunction wp_statistics_get_page_info( $page_id, $type = 'post' ) {\n\n\t//Create Empty Object\n\t$arg      = array();\n\t$defaults = array(\n\t\t'link'      => '',\n\t\t'edit_link' => '',\n\t\t'object_id' => $page_id,\n\t\t'title'     => '-',\n\t\t'meta'      => array()\n\t);\n\n\tif ( ! empty( $type ) ) {\n\t\tswitch ( $type ) {\n\t\t\tcase \"product\":\n\t\t\tcase \"attachment\":\n\t\t\tcase \"post\":\n\t\t\tcase \"page\":\n\t\t\t\t$arg = array(\n\t\t\t\t\t'title'     => get_the_title( $page_id ),\n\t\t\t\t\t'link'      => get_the_permalink( $page_id ),\n\t\t\t\t\t'edit_link' => get_edit_post_link( $page_id ),\n\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t'post_type' => get_post_type( $page_id )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"category\":\n\t\t\tcase \"post_tag\":\n\t\t\tcase \"tax\":\n\t\t\t\t$term = get_term( $page_id );\n\t\t\t\t$arg  = array(\n\t\t\t\t\t'title'     => $term->name,\n\t\t\t\t\t'link'      => ( is_wp_error( get_term_link( $page_id ) ) === true ? '' : get_term_link( $page_id ) ),\n\t\t\t\t\t'edit_link' => get_edit_term_link( $page_id ),\n\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t'taxonomy'         => $term->taxonomy,\n\t\t\t\t\t\t'term_taxonomy_id' => $term->term_taxonomy_id,\n\t\t\t\t\t\t'count'            => $term->count,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"home\":\n\t\t\t\t$arg = array(\n\t\t\t\t\t'title' => __( 'Home Page', 'wp-statistics' ),\n\t\t\t\t\t'link'  => get_site_url()\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"author\":\n\t\t\t\t$user_info = get_userdata( $page_id );\n\t\t\t\t$arg       = array(\n\t\t\t\t\t'title'     => ( $user_info->display_name != \"\" ? $user_info->display_name : $user_info->first_name . ' ' . $user_info->last_name ),\n\t\t\t\t\t'link'      => get_author_posts_url( $page_id ),\n\t\t\t\t\t'edit_link' => get_edit_user_link( $page_id ),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"search\":\n\t\t\t\t$result['title'] = __( 'Search Page', 'wp-statistics' );\n\t\t\t\tbreak;\n\t\t\tcase \"404\":\n\t\t\t\t$result['title'] = __( '404 not found', 'wp-statistics' );\n\t\t\t\tbreak;\n\t\t\tcase \"archive\":\n\t\t\t\t$result['title'] = __( 'Post Archive', 'wp-statistics' );\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn wp_parse_args( $arg, $defaults );\n}\n\n/**\n * Table List Wp-statistics\n *\n * @param string $export\n * @param array $except\n * @return array|null\n */\nfunction wp_statistics_db_table( $export = 'all', $except = array() ) {\n\tglobal $wpdb;\n\n\t//Create Empty Object\n\t$list = array();\n\n\t//List Of Table\n\tif ( is_string( $except ) ) {\n\t\t$except = array( $except );\n\t}\n\t$mysql_list_table = array_diff( WP_Statistics_Install::$db_table, $except );\n\tforeach ( $mysql_list_table as $tbl ) {\n\t\t$table_name = $wpdb->prefix . 'statistics_' . $tbl;\n\t\tif ( $export == \"all\" ) {\n\t\t\tif ( $wpdb->get_var( \"SHOW TABLES LIKE '$table_name'\" ) == $table_name ) {\n\t\t\t\t$list[ $tbl ] = $table_name;\n\t\t\t}\n\t\t} else {\n\t\t\t$list[ $tbl ] = $table_name;\n\t\t}\n\t}\n\n\t//Export Data\n\tif ( $export == 'all' ) {\n\t\treturn $list;\n\t} else {\n\t\tif ( array_key_exists( $export, $list ) ) {\n\t\t\treturn $list[ $export ];\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Check WP-statistics Option Require\n *\n * @param array $item\n * @param string $condition_key\n * @return array|bool\n */\nfunction wp_statistics_check_option_require( $item = array(), $condition_key = 'require' ) {\n\tglobal $WP_Statistics;\n\n\t$condition = true;\n\tif ( array_key_exists( 'require', $item ) ) {\n\t\tforeach ( $item[ $condition_key ] as $if ) {\n\t\t\tif ( ! $WP_Statistics->get_option( $if ) ) {\n\t\t\t\t$condition = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $condition;\n}\n\n/**\n * Modify For IGNORE insert Query\n *\n * @hook add_action('query', function_name, 10);\n * @param $query\n * @return string\n */\nfunction wp_statistics_ignore_insert( $query ) {\n\t$count = 0;\n\t$query = preg_replace( '/^(INSERT INTO)/i', 'INSERT IGNORE INTO', $query, 1, $count );\n\treturn $query;\n}\n\n/**\n * Get Html Body Page By Url\n *\n * @param $url string e.g : wp-statistics.com\n * @return bool\n */\nfunction wp_statistics_get_html_page( $url ) {\n\n\t//sanitize Url\n\t$parse_url = wp_parse_url( $url );\n\t$urls[]    = esc_url_raw( $url );\n\n\t//Check Protocol Url\n\tif ( ! array_key_exists( 'scheme', $parse_url ) ) {\n\t\t$urls      = array();\n\t\t$url_parse = wp_parse_url( $url );\n\t\tforeach ( array( 'http://', 'https://' ) as $scheme ) {\n\t\t\t$urls[] = preg_replace( '/([^:])(\\/{2,})/', '$1/', $scheme . path_join( ( isset( $url_parse['host'] ) ? $url_parse['host'] : '' ), ( isset( $url_parse['path'] ) ? $url_parse['path'] : '' ) ) );\n\t\t}\n\t}\n\n\t//Send Request for Get Page Html\n\tforeach ( $urls as $page ) {\n\t\t$response = wp_remote_get( $page, array(\n\t\t\t'timeout'    => 30,\n\t\t\t'user-agent' => \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.71 Safari/537.36\"\n\t\t) );\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$data = wp_remote_retrieve_body( $response );\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn ( wp_strip_all_tags( $data ) == \"\" ? false : $data );\n\t}\n\n\treturn false;\n}\n\n/**\n * Get Site title By Url\n *\n * @param $url string e.g : wp-statistics.com\n * @return bool|string\n */\nfunction wp_statistics_get_site_title( $url ) {\n\n\t//Get ody Page\n\t$html = wp_statistics_get_html_page( $url );\n\tif ( $html === false ) {\n\t\treturn false;\n\t}\n\n\t//Get Page Title\n\tif ( class_exists( 'DOMDocument' ) ) {\n\t\t$dom = new DOMDocument;\n\t\t@$dom->loadHTML( $html );\n\t\t$title = '';\n\t\tif ( isset( $dom ) and $dom->getElementsByTagName( 'title' )->length > 0 ) {\n\t\t\t$title = $dom->getElementsByTagName( 'title' )->item( '0' )->nodeValue;\n\t\t}\n\t\treturn ( wp_strip_all_tags( $title ) == \"\" ? false : $title );\n\t}\n\n\treturn false;\n}\n\n\n/**\n * Get WebSite IP Server And Country Name\n *\n * @param $url string domain name e.g : wp-statistics.com\n * @return array\n */\nfunction wp_statistics_get_domain_server( $url ) {\n\tglobal $WP_Statistics;\n\n\t//Create Empty Object\n\t$result = array(\n\t\t'ip'      => '',\n\t\t'country' => ''\n\t);\n\n\t//Get Ip by Domain\n\tif ( function_exists( 'gethostbyname' ) ) {\n\t\t$ip = gethostbyname( $url );\n\t\tif ( filter_var( $ip, FILTER_VALIDATE_IP ) ) {\n\t\t\t$result['ip'] = $ip;\n\t\t\t//Get country Code\n\t\t\tif ( $WP_Statistics->get_option( 'geoip' ) ) {\n\t\t\t\t$geoip_reader = $WP_Statistics::geoip_loader( 'country' );\n\t\t\t\tif ( $geoip_reader != false ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$record            = $geoip_reader->country( $ip );\n\t\t\t\t\t\t$result['country'] = $record->country->isoCode;\n\t\t\t\t\t} catch ( Exception $e ) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n/**\n * Show Site Icon by Url\n *\n * @param $url\n * @param int $size\n * @param string $style\n * @return bool|string\n */\nfunction wp_statistics_show_site_icon( $url, $size = 16, $style = '' ) {\n\t$url = preg_replace( '/^https?:\\/\\//', '', $url );\n\tif ( $url != \"\" ) {\n\t\t$imgurl = \"https://www.google.com/s2/favicons?domain=\" . $url;\n\t\treturn '<img src=\"' . $imgurl . '\" width=\"' . $size . '\" height=\"' . $size . '\" style=\"' . ( $style == \"\" ? 'vertical-align: -3px;' : '' ) . '\" />';\n\t}\n\n\treturn false;\n}\n\n/**\n * Get Number Referer Domain\n *\n * @param $url\n * @param array $time_rang\n * @return integer\n */\nfunction wp_statistics_get_number_referer_from_domain( $url, $time_rang = array() ) {\n\tglobal $wpdb;\n\n\t//Get Domain Name\n\t$search_url = wp_statistics_get_domain_name( esc_url_raw( $url ) );\n\n\t//Prepare SQL\n\t$time_sql = '';\n\tif ( count( $time_rang ) > 0 and ! empty( $time_rang ) ) {\n\t\t$time_sql = sprintf( \"AND `last_counter` BETWEEN '%s' AND '%s'\", $time_rang[0], $time_rang[1] );\n\t}\n\t$sql = $wpdb->prepare( \"SELECT COUNT(*) FROM `{$wpdb->prefix}statistics_visitor` WHERE `referred` REGEXP \\\"^(https?://|www\\\\.)[\\.A-Za-z0-9\\-]+\\\\.[a-zA-Z]{2,4}\\\" AND referred <> '' AND LENGTH(referred) >=12 AND (`referred` LIKE  %s OR `referred` LIKE %s OR `referred` LIKE %s OR `referred` LIKE %s) \" . $time_sql . \" ORDER BY `{$wpdb->prefix}statistics_visitor`.`ID` DESC\", 'https://www.' . $wpdb->esc_like( $search_url ) . '%', 'https://' . $wpdb->esc_like( $search_url ) . '%', 'http://www.' . $wpdb->esc_like( $search_url ) . '%', 'http://' . $wpdb->esc_like( $search_url ) . '%' );\n\n\t//Get Count\n\treturn $wpdb->get_var( $sql );\n}\n\n/**\n * Get Domain name from url\n * e.g : https://wp-statistics.com/add-ons/ -> wp-statistics.com\n *\n * @param $url\n * @return mixed\n */\nfunction wp_statistics_get_domain_name( $url ) {\n\t//Remove protocol\n\t$url = preg_replace( \"(^https?://)\", \"\", trim( $url ) );\n\t//remove w(3)\n\t$url = preg_replace( '#^(http(s)?://)?w{3}\\.#', '$1', $url );\n\t//remove all Query\n\t$url = explode( \"/\", $url );\n\n\treturn $url[0];\n}"], "fixing_code": ["<?php\n/*\n\tThis is the primary set of functions used to calculate the statistics, they are available for other developers to call.\n\t\n\tNOTE:  Many of the functions return an MySQL result object, using this object like a variable (ie. echo $result) will output \n\t\t   the number of rows returned, but you can also use it an a foreach loop to to get the details of the rows.\n*/\n\n/**\n * Get Current Users online\n *\n * @param array $options\n * @return mixed\n */\nfunction wp_statistics_useronline( $options = array() ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Check Parameter\n\t$defaults = array(\n\t\t/**\n\t\t * Type Of Page in Wordpress\n\t\t * @See WP_Statistics_Frontend\\get_page_type\n\t\t *\n\t\t * -- Acceptable values --\n\t\t *\n\t\t * post     -> WordPress Post single page From All of public post Type\n\t\t * page     -> Wordpress page single page\n\t\t * product  -> WooCommerce product single page\n\t\t * home     -> Home Page website\n\t\t * category -> Wordpress Category Page\n\t\t * post_tag -> Wordpress Post Tags Page\n\t\t * tax      -> Wordpress Term Page for all Taxonomies\n\t\t * author   -> Wordpress Users page\n\t\t * 404      -> 404 Not Found Page\n\t\t * archive  -> Wordpress Archive Page\n\t\t * all      -> All Site Page\n\t\t *\n\t\t */\n\t\t'type'         => 'all',\n\t\t/**\n\t\t * Wordpress Query object ID\n\t\t * @example array('type' => 'product', 'ID' => 5)\n\t\t */\n\t\t'ID'           => 0,\n\t\t/**\n\t\t * Get number of logged users or all users\n\t\t *\n\t\t * -- Acceptable values --\n\t\t * false  -> Get Number of all users\n\t\t * true   -> Get Number of all logged users in wordpress\n\t\t */\n\t\t'logged_users' => false,\n\t\t/**\n\t\t * Get number User From Custom Country\n\t\t *\n\t\t * -- Acceptable values --\n\t\t * ISO Country Code -> For Get List @See \\wp-statistics\\includes\\functions\\country-code.php\n\t\t *\n\t\t */\n\t\t'location'     => 'all',\n\t\t/**\n\t\t * Search Filter by User agent name\n\t\t * e.g : Firefox , Chrome , Safari , Unknown ..\n\t\t * @see wp_statistics_get_browser_list()\n\t\t *\n\t\t */\n\t\t'agent'        => 'all',\n\t\t/**\n\t\t * Search filter by User Platform name\n\t\t * e.g : Windows, iPad, Macintosh, Unknown, ..\n\t\t *\n\t\t */\n\t\t'platform'     => 'all'\n\t);\n\n\t// Parse incoming $args into an array and merge it with $defaults\n\t$arg = wp_parse_args( $options, $defaults );\n\n\t//Basic SQL\n\t$sql = \"SELECT COUNT(*) FROM \" . wp_statistics_db_table( 'useronline' );\n\n\t//Check Where Condition\n\t$where = false;\n\n\t//Check Type of Page\n\tif ( $arg['type'] != \"all\" ) {\n\t\t$where[] = \"`type`='\" . $arg['type'] . \"' AND `page_id` = \" . $arg['ID'];\n\t}\n\n\t//Check Custom user\n\tif ( $arg['logged_users'] === true ) {\n\t\t$where[] = \"`user_id` > 0\";\n\t}\n\n\t//Check Location\n\tif ( $arg['location'] != \"all\" ) {\n\t\t$ISOCountryCode = $WP_Statistics->get_country_codes();\n\t\tif ( array_key_exists( $arg['location'], $ISOCountryCode ) ) {\n\t\t\t$where[] = \"`location` = '\" . $arg['location'] . \"'\";\n\t\t}\n\t}\n\n\t//Check User Agent\n\tif ( $arg['agent'] != \"all\" ) {\n\t\t$where[] = \"`agent` = '\" . $arg['agent'] . \"'\";\n\t}\n\n\t//Check User Platform\n\tif ( $arg['platform'] != \"all\" ) {\n\t\t$where[] = \"`platform` = '\" . $arg['platform'] . \"'\";\n\t}\n\n\t//Push Conditions to SQL\n\tif ( ! empty( $where ) ) {\n\t\t$sql .= ' WHERE ' . implode( ' AND ', $where );\n\t}\n\n\t//Return Number od user Online\n\treturn $wpdb->get_var( $sql );\n}\n\n/**\n * Create Condition Where Time in MySql\n *\n * @param string $field : date column name in database table\n * @param string $time : Time return\n * @param array $range : an array contain two Date e.g : array('start' => 'xx-xx-xx', 'end' => 'xx-xx-xx', 'is_day' => true, 'current_date' => true)\n *\n * ---- Time Range -----\n * today\n * yesterday\n * week\n * month\n * year\n * total\n * \u201c-x\u201d (i.e., \u201c-10\u201d for the past 10 days)\n * ----------------------\n *\n * @return string|bool\n */\nfunction wp_statistics_mysql_time_conditions( $field = 'date', $time = 'total', $range = array() ) {\n\tglobal $WP_Statistics;\n\n\t//Get Current Date From WP\n\t$current_date = $WP_Statistics->Current_Date( 'Y-m-d' );\n\n\t//Create Field Sql\n\t$field_sql = function ( $time ) use ( $current_date, $field, $WP_Statistics, $range ) {\n\t\t$is_current = array_key_exists( 'current_date', $range );\n\t\treturn \"`$field` \" . ( $is_current === true ? '=' : 'BETWEEN' ) . \" '{$WP_Statistics->Current_Date( 'Y-m-d', (int) $time )}'\" . ( $is_current === false ? \" AND '{$current_date}'\" : \"\" );\n\t};\n\n\t//Check Time\n\tswitch ( $time ) {\n\t\tcase 'today':\n\t\t\t$where = \"`$field` = '{$current_date}'\";\n\t\t\tbreak;\n\t\tcase 'yesterday':\n\t\t\t$where = \"`$field` = '{$WP_Statistics->Current_Date( 'Y-m-d', -1 )}'\";\n\t\t\tbreak;\n\t\tcase 'week':\n\t\t\t$where = $field_sql( - 7 );\n\t\t\tbreak;\n\t\tcase 'month':\n\t\t\t$where = $field_sql( - 30 );\n\t\t\tbreak;\n\t\tcase 'year':\n\t\t\t$where = $field_sql( - 365 );\n\t\t\tbreak;\n\t\tcase 'total':\n\t\t\t$where = \"\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif ( array_key_exists( 'is_day', $range ) ) {\n\t\t\t\t//Check a day\n\t\t\t\t$where = \"`$field` = '{$WP_Statistics->Current_Date( 'Y-m-d',  $time )}'\";\n\t\t\t} elseif ( array_key_exists( 'start', $range ) and array_key_exists( 'end', $range ) ) {\n\t\t\t\t//Check Between Two Time\n\t\t\t\t$where = \"`$field` BETWEEN '{$WP_Statistics->Current_Date( 'Y-m-d', '-0', strtotime( $range['start'] ) )}' AND '{$WP_Statistics->Current_Date( 'Y-m-d', '-0', strtotime( $range['end'] ) )}'\";\n\t\t\t} else {\n\t\t\t\t//Check From a Date To Now\n\t\t\t\t$where = $field_sql( $time );\n\t\t\t}\n\t}\n\n\treturn $where;\n}\n\n/**\n * This function get the visit statistics for a given time frame\n *\n * @param $time\n * @param null $daily\n * @return int\n */\nfunction wp_statistics_visit( $time, $daily = null ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Date Column Name in visits table\n\t$table_name  = wp_statistics_db_table( 'visit' );\n\t$date_column = 'last_counter';\n\n\t//Prepare Selector Sql\n\t$selector = 'SUM(visit)';\n\tif ( $daily == true ) {\n\t\t$selector = '*';\n\t}\n\n\t//Generate Base Sql\n\t$sql = \"SELECT {$selector} FROM {$table_name}\";\n\n\t//Create Sum Visits variable\n\t$sum = 0;\n\n\t//Check if daily Report\n\tif ( $daily == true ) {\n\n\t\t$result = $wpdb->get_row( $sql . \" WHERE `$date_column` = '{$WP_Statistics->Current_Date( 'Y-m-d', $time )}'\" );\n\t\tif ( null !== $result ) {\n\t\t\t$sum = $result->visit;\n\t\t}\n\n\t} else {\n\n\t\t//Generate MySql Time Conditions\n\t\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time );\n\t\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t\t$sql = $sql . ' WHERE ' . $mysql_time_sql;\n\t\t}\n\n\t\t//Request To database\n\t\t$result = $wpdb->get_var( $sql );\n\n\t\t//Custom Action\n\t\tif ( $time == \"total\" ) {\n\t\t\t$result += $WP_Statistics->Get_Historical_Data( 'visits' );\n\t\t}\n\n\t\t$sum = $result;\n\t}\n\n\treturn $sum;\n}\n\n/**\n * This function gets the visitor statistics for a given time frame.\n *\n * @param $time\n * @param null $daily\n * @param bool $count_only\n * @param array $options\n * @return int|null|string\n */\nfunction wp_statistics_visitor( $time, $daily = null, $count_only = false, $options = array() ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Check Parameter\n\t$defaults = array(\n\t\t/**\n\t\t * Type Of Page in Wordpress\n\t\t * @See WP_Statistics_Frontend\\get_page_type\n\t\t *\n\t\t * -- Acceptable values --\n\t\t *\n\t\t * post     -> WordPress Post single page From All of public post Type\n\t\t * page     -> Wordpress page single page\n\t\t * product  -> WooCommerce product single page\n\t\t * home     -> Home Page website\n\t\t * category -> Wordpress Category Page\n\t\t * post_tag -> Wordpress Post Tags Page\n\t\t * tax      -> Wordpress Term Page for all Taxonomies\n\t\t * author   -> Wordpress Users page\n\t\t * 404      -> 404 Not Found Page\n\t\t * archive  -> Wordpress Archive Page\n\t\t * all      -> All Site Page\n\t\t *\n\t\t */\n\t\t'type'     => 'all',\n\t\t/**\n\t\t * Wordpress Query object ID\n\t\t * @example array('type' => 'product', 'ID' => 5)\n\t\t */\n\t\t'ID'       => 0,\n\t\t/**\n\t\t * Get number User From Custom Country\n\t\t *\n\t\t * -- Acceptable values --\n\t\t * ISO Country Code -> For Get List @See \\wp-statistics\\includes\\functions\\country-code.php\n\t\t *\n\t\t */\n\t\t'location' => 'all',\n\t\t/**\n\t\t * Search Filter by User agent name\n\t\t * e.g : Firefox , Chrome , Safari , Unknown ..\n\t\t * @see wp_statistics_get_browser_list()\n\t\t *\n\t\t */\n\t\t'agent'    => 'all',\n\t\t/**\n\t\t * Search filter by User Platform name\n\t\t * e.g : Windows, iPad, Macintosh, Unknown, ..\n\t\t *\n\t\t */\n\t\t'platform' => 'all'\n\t);\n\n\t// Parse incoming $args into an array and merge it with $defaults\n\t$arg = wp_parse_args( $options, $defaults );\n\n\t//Create History Visitors variable\n\t$history = 0;\n\n\t//Prepare Selector Sql\n\t$date_column = 'last_counter';\n\t$selector    = '*';\n\tif ( $count_only == true ) {\n\t\t$selector = 'count(last_counter)';\n\t}\n\n\t//Generate Base Sql\n\tif ( $arg['type'] != \"all\" and $WP_Statistics->get_option( 'visitors_log' ) == true ) {\n\t\t$sql = \"SELECT {$selector} FROM `\" . wp_statistics_db_table( 'visitor' ) . \"` INNER JOIN `\" . wp_statistics_db_table( \"visitor_relationships\" ) . \"` ON `\" . wp_statistics_db_table( \"visitor_relationships\" ) . \"`.`visitor_id` = `\" . wp_statistics_db_table( 'visitor' ) . \"`.`ID`  INNER JOIN `\" . wp_statistics_db_table( 'pages' ) . \"` ON `\" . wp_statistics_db_table( 'pages' ) . \"`.`page_id` = `\" . wp_statistics_db_table( \"visitor_relationships\" ) . \"` . `page_id`\";\n\t} else {\n\t\t$sql = \"SELECT {$selector} FROM `\" . wp_statistics_db_table( 'visitor' ) . \"`\";\n\t}\n\n\t//Check Where Condition\n\t$where = false;\n\n\t//Check Type of Page\n\tif ( $arg['type'] != \"all\" and $WP_Statistics->get_option( 'visitors_log' ) == true ) {\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'pages' ) . \"`.`type`='\" . $arg['type'] . \"' AND `\" . wp_statistics_db_table( 'pages' ) . \"`.`page_id` = \" . $arg['ID'];\n\t}\n\n\t//Check Location\n\tif ( $arg['location'] != \"all\" ) {\n\t\t$ISOCountryCode = $WP_Statistics->get_country_codes();\n\t\tif ( array_key_exists( $arg['location'], $ISOCountryCode ) ) {\n\t\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`location` = '\" . $arg['location'] . \"'\";\n\t\t}\n\t}\n\n\t//Check User Agent\n\tif ( $arg['agent'] != \"all\" ) {\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`agent` = '\" . $arg['agent'] . \"'\";\n\t}\n\n\t//Check User Platform\n\tif ( $arg['platform'] != \"all\" ) {\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`platform` = '\" . $arg['platform'] . \"'\";\n\t}\n\n\t//Check Date Time report\n\tif ( $daily == true ) {\n\n\t\t//Get Only Current Day Visitors\n\t\t$where[] = \"`\" . wp_statistics_db_table( 'visitor' ) . \"`.`last_counter` = '\" . $WP_Statistics->Current_Date( 'Y-m-d', $time ) . \"'\";\n\t} else {\n\n\t\t//Generate MySql Time Conditions\n\t\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time );\n\t\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t\t$where[] = $mysql_time_sql;\n\t\t}\n\t}\n\n\t//Push Conditions to SQL\n\tif ( ! empty( $where ) ) {\n\t\t$sql .= ' WHERE ' . implode( ' AND ', $where );\n\t}\n\n\t//Custom Action\n\tif ( $time == \"total\" and $arg['type'] == \"all\" ) {\n\t\t$history = $WP_Statistics->Get_Historical_Data( 'visitors' );\n\t}\n\n\t// Execute the SQL call, if we're only counting we can use get_var(), otherwise we use query().\n\tif ( $count_only == true ) {\n\t\t$sum = $wpdb->get_var( $sql );\n\t\t$sum += $history;\n\t} else {\n\t\t$sum = $wpdb->query( $sql );\n\t}\n\n\treturn $sum;\n}\n\n/**\n * This function returns the statistics for a given page.\n *\n * @param $time\n * @param string $page_uri\n * @param int $id\n * @param null $rangestartdate\n * @param null $rangeenddate\n * @param bool $type\n * @return int|null|string\n */\nfunction wp_statistics_pages( $time, $page_uri = '', $id = - 1, $rangestartdate = null, $rangeenddate = null, $type = false ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Date Column Name in visits table\n\t$table_name  = wp_statistics_db_table( 'pages' );\n\t$date_column = 'date';\n\t$history     = 0;\n\n\t//Check Where Condition\n\t$where = false;\n\n\t//Check Query By Page ID or Page Url\n\tif ( $type != false and $id != - 1 ) {\n\t\t$where[] = \"`type`='\" . $type . \"' AND `page_id` = \" . $id;\n\t} else {\n\n\t\t// If no page URI has been passed in, get the current page URI.\n\t\tif ( $page_uri == '' ) {\n\t\t\t$page_uri = wp_statistics_get_uri();\n\t\t}\n\t\t$page_uri_sql = esc_sql( $page_uri );\n\n\t\t// If a page/post ID has been passed, use it to select the rows, otherwise use the URI.\n\t\tif ( $id != - 1 ) {\n\t\t\t$where[]     = \"`id`= \" . absint( $id );\n\t\t\t$history_key = 'page';\n\t\t\t$history_id  = absint( $id );\n\t\t} else {\n\t\t\t$where[]     = \"`URI` = '{$page_uri_sql}'\";\n\t\t\t$history_key = 'uri';\n\t\t\t$history_id  = $page_uri;\n\t\t}\n\n\t\t//Custom Action\n\t\tif ( $time == \"total\" ) {\n\t\t\t$history = $WP_Statistics->Get_Historical_Data( $history_key, $history_id );\n\t\t}\n\t}\n\n\t//Prepare Time\n\t$time_array = array();\n\tif ( is_numeric( $time ) ) {\n\t\t$time_array['is_day'] = true;\n\t}\n\tif ( ! is_null( $rangestartdate ) and ! is_null( $rangeenddate ) ) {\n\t\t$time_array = array( 'start' => $rangestartdate, 'end' => $rangeenddate );\n\t}\n\n\t//Check MySql Time Conditions\n\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time, $time_array );\n\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t$where[] = $mysql_time_sql;\n\t}\n\n\t//Generate Base Sql\n\t$sql = \"SELECT SUM(count) FROM {$table_name}\";\n\n\t//Push Conditions to SQL\n\tif ( ! empty( $where ) ) {\n\t\t$sql .= ' WHERE ' . implode( ' AND ', $where );\n\t}\n\n\t//Request Get data\n\t$sum = $wpdb->get_var( $sql );\n\t$sum += $history;\n\n\t//Return Number Statistic\n\treturn ( $sum == '' ? 0 : $sum );\n}\n\n// This function converts a page URI to a page/post ID.  It does this by looking up in the pages database\n// the URI and getting the associated ID.  This will only work if the page has been visited at least once.\nfunction wp_statistics_uri_to_id( $uri ) {\n\tglobal $wpdb;\n\n\t// Create the SQL query to use.\n\t$sqlstatement = $wpdb->prepare( \"SELECT id FROM {$wpdb->prefix}statistics_pages WHERE `URI` = %s AND id > 0 ORDER BY date DESC\", $uri );\n\n\t// Execute the query.\n\t$result = $wpdb->get_var( $sqlstatement );\n\n\t// If we returned a false or some other 0 equivalent value, make sure $result is set to an integer 0.\n\tif ( $result == 0 ) {\n\t\t$result = 0;\n\t}\n\n\treturn $result;\n}\n\n// We need a quick function to pass to usort to properly sort the most popular pages.\nfunction wp_stats_compare_uri_hits( $a, $b ) {\n\treturn $a[1] < $b[1];\n}\n\n// This function returns a multi-dimensional array, with the total number of pages and an array or URI's sorted in order with their URI, count, id and title.\nfunction wp_statistics_get_top_pages( $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\t// Get every unique URI from the pages database.\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_results( $wpdb->prepare( \"SELECT `uri`,`id`,`type` FROM {$wpdb->prefix}statistics_pages WHERE `date` BETWEEN %s AND %s GROUP BY `uri`\", $rangestartdate, $rangeenddate ), ARRAY_N );\n\t} else {\n\t\t$result = $wpdb->get_results( \"SELECT `uri`,`id`,`type` FROM {$wpdb->prefix}statistics_pages GROUP BY `uri`\", ARRAY_N );\n\t}\n\n\t$total = 0;\n\t$uris  = array();\n\n\t// Now get the total page visit count for each unique URI.\n\tforeach ( $result as $out ) {\n\t\t// Increment the total number of results.\n\t\t$total ++;\n\n\t\t//Prepare item\n\t\tlist( $url, $page_id, $page_type ) = $out;\n\n\t\t//Get Page Title\n\t\t$page_info = wp_statistics_get_page_info( $page_id, $page_type );\n\t\t$title     = mb_substr( $page_info['title'], 0, 200, \"utf-8\" );\n\t\t$page_url  = $page_info['link'];\n\n\t\t// Check age Title if page id or type not exist\n\t\tif ( $page_info['link'] == \"\" ) {\n\t\t\t$page_url = htmlentities( path_join( get_site_url(), $url ), ENT_QUOTES );\n\t\t\t$id       = wp_statistics_uri_to_id( $out[0] );\n\t\t\t$post     = get_post( $id );\n\t\t\tif ( is_object( $post ) ) {\n\t\t\t\t$title = $post->post_title;\n\t\t\t} else {\n\t\t\t\tif ( $out[0] == '/' ) {\n\t\t\t\t\t$title = get_bloginfo();\n\t\t\t\t} else {\n\t\t\t\t\t$title = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Check Title is empty\n\t\tif ( empty( $title ) ) {\n\t\t\t$title = '-';\n\t\t}\n\n\t\t// Add the current post to the array.\n\t\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t\t$uris[] = array(\n\t\t\t\t$out[0],\n\t\t\t\twp_statistics_pages( 'range', $out[0], - 1, $rangestartdate, $rangeenddate ),\n\t\t\t\t$page_id,\n\t\t\t\t$title,\n\t\t\t\t$page_url,\n\t\t\t);\n\t\t} else {\n\t\t\t$uris[] = array( $out[0], wp_statistics_pages( 'total', $out[0] ), $page_id, $title, $page_url );\n\t\t}\n\t}\n\n\t// If we have more than one result, let's sort them using usort.\n\tif ( count( $uris ) > 1 ) {\n\t\t// Sort the URI's based on their hit count.\n\t\tusort( $uris, 'wp_stats_compare_uri_hits' );\n\t}\n\n\treturn array( $total, $uris );\n}\n\n// This function gets the current page URI.\nfunction wp_statistics_get_uri() {\n\t// Get the site's path from the URL.\n\t$site_uri     = parse_url( site_url(), PHP_URL_PATH );\n\t$site_uri_len = strlen( $site_uri );\n\n\t// Get the site's path from the URL.\n\t$home_uri     = parse_url( home_url(), PHP_URL_PATH );\n\t$home_uri_len = strlen( $home_uri );\n\n\t// Get the current page URI.\n\t$page_uri = $_SERVER[\"REQUEST_URI\"];\n\n\t/*\n\t * We need to check which URI is longer in case one contains the other.\n\t *\n\t * For example home_uri might be \"/site/wp\" and site_uri might be \"/site\".\n\t *\n\t * In that case we want to check to see if the page_uri starts with \"/site/wp\" before\n\t * we check for \"/site\", but in the reverse case, we need to swap the order of the check.\n\t */\n\tif ( $site_uri_len > $home_uri_len ) {\n\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t}\n\n\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t}\n\t} else {\n\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t}\n\n\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t}\n\t}\n\n\t//Sanitize Xss injection\n\t$page_uri = filter_var( $page_uri, FILTER_SANITIZE_STRING );\n\n\t// If we're at the root (aka the URI is blank), let's make sure to indicate it.\n\tif ( $page_uri == '' ) {\n\t\t$page_uri = '/';\n\t}\n\n\treturn $page_uri;\n}\n\n// This function returns all unique user agents in the database.\nfunction wp_statistics_ua_list( $rangestartdate = null, $rangeenddate = null ) {\n\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\tif ( $rangeenddate == 'CURDATE()' ) {\n\t\t\t$result = $wpdb->get_results( $wpdb->prepare( \"SELECT DISTINCT agent FROM {$wpdb->prefix}statistics_visitor WHERE `last_counter` BETWEEN %s AND CURDATE()\", $rangestartdate ), ARRAY_N );\n\t\t} else {\n\t\t\t$result = $wpdb->get_results( $wpdb->prepare( \"SELECT DISTINCT agent FROM {$wpdb->prefix}statistics_visitor WHERE `last_counter` BETWEEN %s AND %s\", $rangestartdate, $rangeenddate ), ARRAY_N );\n\t\t}\n\n\t} else {\n\t\t$result = $wpdb->get_results( \"SELECT DISTINCT agent FROM {$wpdb->prefix}statistics_visitor\", ARRAY_N );\n\t}\n\n\t$Browsers        = array();\n\t$default_browser = wp_statistics_get_browser_list();\n\n\tforeach ( $result as $out ) {\n\t\t//Check Browser is defined in wp-statistics\n\t\tif ( array_key_exists( strtolower( $out[0] ), $default_browser ) ) {\n\t\t\t$Browsers[] = $out[0];\n\t\t}\n\t}\n\n\treturn $Browsers;\n}\n\n/**\n * Count User By User Agent\n *\n * @param $agent\n * @param null $rangestartdate\n * @param null $rangeenddate\n * @return mixed\n */\nfunction wp_statistics_useragent( $agent, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(agent) FROM {$wpdb->prefix}statistics_visitor WHERE `agent` = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$agent,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_var( $wpdb->prepare( \"SELECT COUNT(agent) FROM {$wpdb->prefix}statistics_visitor WHERE `agent` = %s\", $agent ) );\n\t}\n\n\treturn $result;\n}\n\n// This function returns all unique platform types from the database.\nfunction wp_statistics_platform_list( $rangestartdate = null, $rangeenddate = null ) {\n\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_results(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT DISTINCT platform FROM {$wpdb->prefix}statistics_visitor WHERE `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t),\n\t\t\tARRAY_N\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_results( \"SELECT DISTINCT platform FROM {$wpdb->prefix}statistics_visitor\", ARRAY_N );\n\t}\n\n\t$Platforms = array();\n\n\tforeach ( $result as $out ) {\n\t\t$Platforms[] = $out[0];\n\t}\n\n\treturn $Platforms;\n}\n\n// This function returns the count of a given platform in the database.\nfunction wp_statistics_platform( $platform, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(platform) FROM {$wpdb->prefix}statistics_visitor WHERE `platform` = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$platform,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(platform) FROM {$wpdb->prefix}statistics_visitor WHERE `platform` = %s\",\n\t\t\t\t$platform\n\t\t\t)\n\t\t);\n\t}\n\n\treturn $result;\n}\n\n// This function returns all unique versions for a given agent from the database.\nfunction wp_statistics_agent_version_list( $agent, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_results(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT DISTINCT version FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$agent,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t),\n\t\t\tARRAY_N\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_results(\n\t\t\t$wpdb->prepare( \"SELECT DISTINCT version FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s\", $agent ),\n\t\t\tARRAY_N\n\t\t);\n\t}\n\n\t$Versions = array();\n\n\tforeach ( $result as $out ) {\n\t\t$Versions[] = $out[0];\n\t}\n\n\treturn $Versions;\n}\n\n// This function returns the statistics for a given agent/version pair from the database.\nfunction wp_statistics_agent_version( $agent, $version, $rangestartdate = null, $rangeenddate = null ) {\n\tglobal $wpdb;\n\n\tif ( $rangestartdate != null && $rangeenddate != null ) {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(version) FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s AND version = %s AND `last_counter` BETWEEN %s AND %s\",\n\t\t\t\t$agent,\n\t\t\t\t$version,\n\t\t\t\t$rangestartdate,\n\t\t\t\t$rangeenddate\n\t\t\t)\n\t\t);\n\t} else {\n\t\t$result = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT COUNT(version) FROM {$wpdb->prefix}statistics_visitor WHERE agent = %s AND version = %s\",\n\t\t\t\t$agent,\n\t\t\t\t$version\n\t\t\t)\n\t\t);\n\t}\n\n\treturn $result;\n}\n\n// This function returns an array or array's which define what search engines we should look for.\n//\n// By default will only return ones that have not been disabled by the user, this can be overridden by the $all parameter.\n//\n// Each sub array is made up of the following items:\n//\t\tname \t\t = The proper name of the search engine\n//\t\ttranslated   = The proper name translated to the local language\n//\t\ttag \t\t = a short one word, all lower case, representation of the search engine\n//\t\tsqlpattern   = either a single SQL style search pattern OR an array or search patterns to match the hostname in a URL against\n//\t\tregexpattern = either a single regex style search pattern OR an array or search patterns to match the hostname in a URL against\n//\t\tquerykey \t = the URL key that contains the search string for the search engine\n//\t\timage\t\t = the name of the image file to associate with this search engine (just the filename, no path info)\n//\nfunction wp_statistics_searchengine_list( $all = false ) {\n\tglobal $WP_Statistics;\n\n\t$default = $engines = array(\n\t\t'ask'        => array(\n\t\t\t'name'         => 'Ask.com',\n\t\t\t'translated'   => __( 'Ask.com', 'wp-statistics' ),\n\t\t\t'tag'          => 'ask',\n\t\t\t'sqlpattern'   => '%ask.com%',\n\t\t\t'regexpattern' => 'ask\\.com',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'ask.png',\n\t\t),\n\t\t'baidu'      => array(\n\t\t\t'name'         => 'Baidu',\n\t\t\t'translated'   => __( 'Baidu', 'wp-statistics' ),\n\t\t\t'tag'          => 'baidu',\n\t\t\t'sqlpattern'   => '%baidu.com%',\n\t\t\t'regexpattern' => 'baidu\\.com',\n\t\t\t'querykey'     => 'wd',\n\t\t\t'image'        => 'baidu.png',\n\t\t),\n\t\t'bing'       => array(\n\t\t\t'name'         => 'Bing',\n\t\t\t'translated'   => __( 'Bing', 'wp-statistics' ),\n\t\t\t'tag'          => 'bing',\n\t\t\t'sqlpattern'   => '%bing.com%',\n\t\t\t'regexpattern' => 'bing\\.com',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'bing.png',\n\t\t),\n\t\t'clearch'    => array(\n\t\t\t'name'         => 'clearch.org',\n\t\t\t'translated'   => __( 'clearch.org', 'wp-statistics' ),\n\t\t\t'tag'          => 'clearch',\n\t\t\t'sqlpattern'   => '%clearch.org%',\n\t\t\t'regexpattern' => 'clearch\\.org',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'clearch.png',\n\t\t),\n\t\t'duckduckgo' => array(\n\t\t\t'name'         => 'DuckDuckGo',\n\t\t\t'translated'   => __( 'DuckDuckGo', 'wp-statistics' ),\n\t\t\t'tag'          => 'duckduckgo',\n\t\t\t'sqlpattern'   => array( '%duckduckgo.com%', '%ddg.gg%' ),\n\t\t\t'regexpattern' => array( 'duckduckgo\\.com', 'ddg\\.gg' ),\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'duckduckgo.png',\n\t\t),\n\t\t'google'     => array(\n\t\t\t'name'         => 'Google',\n\t\t\t'translated'   => __( 'Google', 'wp-statistics' ),\n\t\t\t'tag'          => 'google',\n\t\t\t'sqlpattern'   => '%google.%',\n\t\t\t'regexpattern' => 'google\\.',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'google.png',\n\t\t),\n\t\t'yahoo'      => array(\n\t\t\t'name'         => 'Yahoo!',\n\t\t\t'translated'   => __( 'Yahoo!', 'wp-statistics' ),\n\t\t\t'tag'          => 'yahoo',\n\t\t\t'sqlpattern'   => '%yahoo.com%',\n\t\t\t'regexpattern' => 'yahoo\\.com',\n\t\t\t'querykey'     => 'p',\n\t\t\t'image'        => 'yahoo.png',\n\t\t),\n\t\t'yandex'     => array(\n\t\t\t'name'         => 'Yandex',\n\t\t\t'translated'   => __( 'Yandex', 'wp-statistics' ),\n\t\t\t'tag'          => 'yandex',\n\t\t\t'sqlpattern'   => '%yandex.ru%',\n\t\t\t'regexpattern' => 'yandex\\.ru',\n\t\t\t'querykey'     => 'text',\n\t\t\t'image'        => 'yandex.png',\n\t\t),\n\t\t'qwant'      => array(\n\t\t\t'name'         => 'Qwant',\n\t\t\t'translated'   => __( 'Qwant', 'wp-statistics' ),\n\t\t\t'tag'          => 'qwant',\n\t\t\t'sqlpattern'   => '%qwant.com%',\n\t\t\t'regexpattern' => 'qwant\\.com',\n\t\t\t'querykey'     => 'q',\n\t\t\t'image'        => 'qwant.png',\n\t\t)\n\t);\n\n\tif ( $all == false ) {\n\t\tforeach ( $engines as $key => $engine ) {\n\t\t\tif ( $WP_Statistics->get_option( 'disable_se_' . $engine['tag'] ) ) {\n\t\t\t\tunset( $engines[ $key ] );\n\t\t\t}\n\t\t}\n\n\t\t// If we've disabled all the search engines, reset the list back to default.\n\t\tif ( count( $engines ) == 0 ) {\n\t\t\t$engines = $default;\n\t\t}\n\t}\n\n\treturn $engines;\n}\n\n// This function will return the SQL WHERE clause for getting the search words for a given search engine.\nfunction wp_statistics_searchword_query( $search_engine = 'all' ) {\n\tGLOBAL $WP_Statistics;\n\n\t// Get a complete list of search engines\n\t$searchengine_list = wp_statistics_searchengine_list();\n\t$search_query      = '';\n\n\tif ( $WP_Statistics->get_option( 'search_converted' ) ) {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\tforeach ( $searchengine_list as $key => $se ) {\n\t\t\t\t$search_query .= \"( `engine` = '{$key}' AND `words` <> '' ) OR \";\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t$search_query .= \"`engine` = '{$search_engine}' AND `words` <> ''\";\n\t\t}\n\t} else {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\t// NOTE:  This SQL query can be *VERY* long.\n\t\t\tforeach ( $searchengine_list as $se ) {\n\t\t\t\t// The SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\t\tif ( is_array( $se['sqlpattern'] ) ) {\n\t\t\t\t\tforeach ( $se['sqlpattern'] as $subse ) {\n\t\t\t\t\t\t$search_query .= \"(`referred` LIKE '{$subse}{$se['querykey']}=%' AND `referred` NOT LIKE '{$subse}{$se['querykey']}=&%' AND `referred` NOT LIKE '{$subse}{$se['querykey']}=') OR \";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$search_query .= \"(`referred` LIKE '{$se['sqlpattern']}{$se['querykey']}=%' AND `referred` NOT LIKE '{$se['sqlpattern']}{$se['querykey']}=&%' AND `referred` NOT LIKE '{$se['sqlpattern']}{$se['querykey']}=')  OR \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t// For just one?  Ok, the SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\tif ( is_array( $searchengine_list[ $search_engine ]['sqlpattern'] ) ) {\n\t\t\t\tforeach ( $searchengine_list[ $search_engine ]['sqlpattern'] as $se ) {\n\t\t\t\t\t$search_query .= \"(`referred` LIKE '{$se}{$searchengine_list[$search_engine]['querykey']}=%' AND `referred` NOT LIKE '{$se}{$searchengine_list[$search_engine]['querykey']}=&%' AND `referred` NOT LIKE '{$se}{$searchengine_list[$search_engine]['querykey']}=') OR \";\n\t\t\t\t}\n\n\t\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t\t} else {\n\t\t\t\t$search_query .= \"(`referred` LIKE '{$searchengine_list[$search_engine]['sqlpattern']}{$searchengine_list[$search_engine]['querykey']}=%' AND `referred` NOT LIKE '{$searchengine_list[$search_engine]['sqlpattern']}{$searchengine_list[$search_engine]['querykey']}=&%' AND `referred` NOT LIKE '{$searchengine_list[$search_engine]['sqlpattern']}{$searchengine_list[$search_engine]['querykey']}=')\";\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $search_query;\n}\n\n// This function will return the SQL WHERE clause for getting the search engine.\nfunction wp_statistics_searchengine_query( $search_engine = 'all' ) {\n\tGLOBAL $WP_Statistics;\n\n\t// Get a complete list of search engines\n\t$searchengine_list = wp_statistics_searchengine_list();\n\t$search_query      = '';\n\n\tif ( $WP_Statistics->get_option( 'search_converted' ) ) {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\tforeach ( $searchengine_list as $key => $se ) {\n\t\t\t\t$key          = esc_sql( $key );\n\t\t\t\t$search_query .= \"`engine` = '{$key}' OR \";\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t$search_engine = esc_sql( $search_engine );\n\t\t\t$search_query  .= \"`engine` = '{$search_engine}'\";\n\t\t}\n\t} else {\n\t\t// Are we getting results for all search engines or a specific one?\n\t\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\t\t// For all of them?  Ok, look through the search engine list and create a SQL query string to get them all from the database.\n\t\t\t// NOTE:  This SQL query can be long.\n\t\t\tforeach ( $searchengine_list as $se ) {\n\t\t\t\t// The SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\t\tif ( is_array( $se['sqlpattern'] ) ) {\n\t\t\t\t\tforeach ( $se['sqlpattern'] as $subse ) {\n\t\t\t\t\t\t$subse        = esc_sql( $subse );\n\t\t\t\t\t\t$search_query .= \"`referred` LIKE '{$subse}' OR \";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$se['sqlpattern'] = esc_sql( $se['sqlpattern'] );\n\t\t\t\t\t$search_query     .= \"`referred` LIKE '{$se['sqlpattern']}' OR \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t} else {\n\t\t\t// For just one?  Ok, the SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\tif ( is_array( $searchengine_list[ $search_engine ]['sqlpattern'] ) ) {\n\t\t\t\tforeach ( $searchengine_list[ $search_engine ]['sqlpattern'] as $se ) {\n\t\t\t\t\t$se           = esc_sql( $se );\n\t\t\t\t\t$search_query .= \"`referred` LIKE '{$se}' OR \";\n\t\t\t\t}\n\n\t\t\t\t// Trim off the last ' OR ' for the loop above.\n\t\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 4 );\n\t\t\t} else {\n\t\t\t\t$searchengine_list[ $search_engine ]['sqlpattern'] = esc_sql( $searchengine_list[ $search_engine ]['sqlpattern'] );\n\t\t\t\t$search_query                                      .= \"`referred` LIKE '{$searchengine_list[$search_engine]['sqlpattern']}'\";\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $search_query;\n}\n\n// This function will return a regular expression clause for matching one or more search engines.\nfunction wp_statistics_searchengine_regex( $search_engine = 'all' ) {\n\n\t// Get a complete list of search engines\n\t$searchengine_list = wp_statistics_searchengine_list();\n\t$search_query      = '';\n\n\t// Are we getting results for all search engines or a specific one?\n\tif ( strtolower( $search_engine ) == 'all' ) {\n\t\tforeach ( $searchengine_list as $se ) {\n\t\t\t// The SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\t\tif ( is_array( $se['regexpattern'] ) ) {\n\t\t\t\tforeach ( $se['regexpattern'] as $subse ) {\n\t\t\t\t\t$search_query .= \"{$subse}|\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$search_query .= \"{$se['regexpattern']}|\";\n\t\t\t}\n\t\t}\n\n\t\t// Trim off the last '|' for the loop above.\n\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 1 );\n\t} else {\n\t\t// For just one?  Ok, the SQL pattern for a search engine may be an array if it has to handle multiple domains (like google.com and google.ca) or other factors.\n\t\tif ( is_array( $searchengine_list[ $search_engine ]['regexpattern'] ) ) {\n\t\t\tforeach ( $searchengine_list[ $search_engine ]['regexpattern'] as $se ) {\n\t\t\t\t$search_query .= \"{$se}|\";\n\t\t\t}\n\n\t\t\t// Trim off the last '|' for the loop above.\n\t\t\t$search_query = substr( $search_query, 0, strlen( $search_query ) - 1 );\n\t\t} else {\n\t\t\t$search_query .= $searchengine_list[ $search_engine ]['regexpattern'];\n\t\t}\n\t}\n\n\t// Add the brackets and return\n\treturn \"({$search_query})\";\n}\n\n/**\n * Get Search engine Statistics\n *\n * @param string $search_engine\n * @param string $time\n * @param string $search_by [query / name]\n * @return mixed\n */\nfunction wp_statistics_get_search_engine_query( $search_engine = 'all', $time = 'total', $search_by = 'query' ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t//Prepare Table Name\n\t$table_name = $wpdb->prefix . 'statistics_';\n\tif ( $WP_Statistics->get_option( 'search_converted' ) ) {\n\t\t$table_name .= 'search';\n\t} else {\n\t\t$table_name .= 'visitor';\n\t}\n\n\t//Date Column table\n\t$date_column = 'last_counter';\n\n\t// Get a complete list of search engines\n\tif ( $search_by == \"query\" ) {\n\t\t$search_query = wp_statistics_searchengine_query( $search_engine );\n\t} else {\n\t\t$search_query = wp_statistics_searchword_query( $search_engine );\n\t}\n\n\t//Generate Base Sql\n\t$sql = \"SELECT * FROM {$table_name} WHERE ({$search_query})\";\n\n\t//Generate MySql Time Conditions\n\t$mysql_time_sql = wp_statistics_mysql_time_conditions( $date_column, $time, array( 'current_date' => true ) );\n\tif ( ! empty( $mysql_time_sql ) ) {\n\t\t$sql = $sql . ' AND (' . $mysql_time_sql . ')';\n\t}\n\n\t//Request Data\n\t$result = $wpdb->query( $sql );\n\treturn $result;\n}\n\n/**\n * This function will return the statistics for a given search engine.\n *\n * @param string $search_engine\n * @param string $time\n * @return mixed\n */\nfunction wp_statistics_searchengine( $search_engine = 'all', $time = 'total' ) {\n\treturn wp_statistics_get_search_engine_query( $search_engine, $time, $search_by = 'query' );\n}\n\n//This Function will return the referrer list\nfunction wp_statistics_referrer( $time = null ) {\n\tglobal $wpdb, $WP_Statistics;\n\n\t$timezone = array(\n\t\t'today'     => 0,\n\t\t'yesterday' => - 1,\n\t\t'week'      => - 7,\n\t\t'month'     => - 30,\n\t\t'year'      => - 365,\n\t\t'total'     => 'ALL',\n\t);\n\t$sql      = \"SELECT `referred` FROM `\" . $wpdb->prefix . \"statistics_visitor` WHERE referred <> ''\";\n\tif ( array_key_exists( $time, $timezone ) ) {\n\t\tif ( $time != \"total\" ) {\n\t\t\t$sql .= \" AND (`last_counter` = '{$WP_Statistics->Current_Date( 'Y-m-d', $timezone[$time] )}')\";\n\t\t}\n\t} else {\n\t\t//Set Default\n\t\t$sql .= \" AND (`last_counter` = '{$WP_Statistics->Current_Date( 'Y-m-d', $time )}')\";\n\t}\n\t$result = $wpdb->get_results( $sql );\n\n\t$urls = array();\n\tforeach ( $result as $item ) {\n\t\t$url = parse_url( $item->referred );\n\t\tif ( empty( $url['host'] ) || stristr( get_bloginfo( 'url' ), $url['host'] ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$urls[] = $url['scheme'] . '://' . $url['host'];\n\t}\n\t$get_urls = array_count_values( $urls );\n\n\treturn count( $get_urls );\n}\n\n/**\n * This function will return the statistics for a given search engine for a given time frame.\n *\n * @param string $search_engine\n * @param string $time\n * @return mixed\n */\nfunction wp_statistics_searchword( $search_engine = 'all', $time = 'total' ) {\n\treturn wp_statistics_get_search_engine_query( $search_engine, $time, $search_by = 'word' );\n}\n\n// This function will return the total number of posts in WordPress.\nfunction wp_statistics_countposts() {\n\t$count_posts = wp_count_posts( 'post' );\n\n\t$ret = 0;\n\tif ( is_object( $count_posts ) ) {\n\t\t$ret = $count_posts->publish;\n\t}\n\treturn $ret;\n}\n\n// This function will return the total number of pages in WordPress.\nfunction wp_statistics_countpages() {\n\t$count_pages = wp_count_posts( 'page' );\n\n\t$ret = 0;\n\tif ( is_object( $count_pages ) ) {\n\t\t$ret = $count_pages->publish;\n\t}\n\treturn $ret;\n}\n\n// This function will return the total number of comments in WordPress.\nfunction wp_statistics_countcomment() {\n\tglobal $wpdb;\n\n\t$countcomms = $wpdb->get_var( \"SELECT COUNT(*) FROM {$wpdb->comments} WHERE comment_approved = '1'\" );\n\treturn $countcomms;\n}\n\n// This function will return the total number of spam comments *IF* akismet is installed.\nfunction wp_statistics_countspam() {\n\n\treturn number_format_i18n( get_option( 'akismet_spam_count' ) );\n}\n\n// This function will return the total number of users in WordPress.\nfunction wp_statistics_countusers() {\n\n\t$result = count_users();\n\n\treturn $result['total_users'];\n}\n\n// This function will return the last date a post was published on your site.\nfunction wp_statistics_lastpostdate() {\n\n\tglobal $wpdb, $WP_Statistics;\n\n\t$db_date = $wpdb->get_var(\n\t\t\"SELECT post_date FROM {$wpdb->posts} WHERE post_type='post' AND post_status='publish' ORDER BY post_date DESC LIMIT 1\"\n\t);\n\n\t$date_format = get_option( 'date_format' );\n\n\treturn $WP_Statistics->Current_Date_i18n( $date_format, $db_date, false );\n}\n\n// This function will return the average number of posts per day that are published on your site.\n// Alternatively if $days is set to true it returns the average number of days between posts on your site.\nfunction wp_statistics_average_post( $days = false ) {\n\n\tglobal $wpdb;\n\n\t$get_first_post = $wpdb->get_var(\n\t\t\"SELECT post_date FROM {$wpdb->posts} WHERE post_status = 'publish' ORDER BY post_date LIMIT 1\"\n\t);\n\t$get_total_post = $wpdb->get_var(\n\t\t\"SELECT COUNT(*) FROM {$wpdb->posts} WHERE post_status = 'publish' AND post_type = 'post'\"\n\t);\n\n\t$days_spend = intval(\n\t\t( time() - strtotime( $get_first_post ) ) / 86400\n\t); // 86400 = 60 * 60 * 24 = number of seconds in a day\n\n\tif ( $days == true ) {\n\t\tif ( $get_total_post == 0 ) {\n\t\t\t$get_total_post = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $days_spend / $get_total_post, 0 );\n\t} else {\n\t\tif ( $days_spend == 0 ) {\n\t\t\t$days_spend = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $get_total_post / $days_spend, 2 );\n\t}\n}\n\n// This function will return the average number of comments per day that are published on your site.\n// Alternatively if $days is set to true it returns the average number of days between comments on your site.\nfunction wp_statistics_average_comment( $days = false ) {\n\n\tglobal $wpdb;\n\n\t$get_first_comment = $wpdb->get_var( \"SELECT comment_date FROM {$wpdb->comments} ORDER BY comment_date LIMIT 1\" );\n\t$get_total_comment = $wpdb->get_var( \"SELECT COUNT(*) FROM {$wpdb->comments} WHERE comment_approved = '1'\" );\n\n\t$days_spend = intval(\n\t\t( time() - strtotime( $get_first_comment ) ) / 86400\n\t); // 86400 = 60 * 60 * 24 = number of seconds in a day\n\n\tif ( $days == true ) {\n\t\tif ( $get_total_comment == 0 ) {\n\t\t\t$get_total_comment = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $days_spend / $get_total_comment, 0 );\n\t} else {\n\t\tif ( $days_spend == 0 ) {\n\t\t\t$days_spend = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $get_total_comment / $days_spend, 2 );\n\t}\n}\n\n// This function will return the average number of users per day that are registered on your site.\n// Alternatively if $days is set to true it returns the average number of days between user registrations on your site.\nfunction wp_statistics_average_registeruser( $days = false ) {\n\n\tglobal $wpdb;\n\n\t$get_first_user = $wpdb->get_var( \"SELECT user_registered FROM {$wpdb->users} ORDER BY user_registered LIMIT 1\" );\n\t$get_total_user = $wpdb->get_var( \"SELECT COUNT(*) FROM {$wpdb->users}\" );\n\n\t$days_spend = intval(\n\t\t( time() - strtotime( $get_first_user ) ) / 86400\n\t); // 86400 = 60 * 60 * 24 = number of seconds in a day\n\n\tif ( $days == true ) {\n\t\tif ( $get_total_user == 0 ) {\n\t\t\t$get_total_user = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $days_spend / $get_total_user, 0 );\n\t} else {\n\t\tif ( $days_spend == 0 ) {\n\t\t\t$days_spend = 1;\n\t\t} // Avoid divide by zero errors.\n\n\t\treturn round( $get_total_user / $days_spend, 2 );\n\t}\n}\n\n// This function handle's the Dashicons in the overview page.\nfunction wp_statistics_icons( $dashicons, $icon_name = null ) {\n\tif ( null == $icon_name ) {\n\t\t$icon_name = $dashicons;\n\t}\n\n\treturn '<span class=\"dashicons ' . $dashicons . '\"></span>';\n}\n\n// This function checks to see if all the PHP modules we need for GeoIP exists.\nfunction wp_statistics_geoip_supported() {\n\t// Check to see if we can support the GeoIP code, requirements are:\n\t$enabled = true;\n\n\t// PHP's cURL extension installed\n\tif ( ! function_exists( 'curl_init' ) ) {\n\t\t$enabled = false;\n\t}\n\n\t// PHP NOT running in safe mode\n\tif ( ini_get( 'safe_mode' ) ) {\n\t\t// Double check php version, 5.4 and above don't support safe mode but the ini value may still be set after an upgrade.\n\t\tif ( ! version_compare( phpversion(), '5.4', '<' ) ) {\n\t\t\t$enabled = false;\n\t\t}\n\t}\n\n\treturn $enabled;\n}\n\n// This function creates the date range selector 'widget' used in the various statistics pages.\nfunction wp_statistics_date_range_selector( $page, $current, $range = array(), $desc = array(), $extrafields = '', $pre_extra = '', $post_extra = '' ) {\n\tGLOBAL $WP_Statistics;\n\n\t//import DataPicker Jquery Ui Jquery Plugin\n\twp_enqueue_script( 'jquery-ui-datepicker' );\n\twp_register_style( 'jquery-ui-smoothness-css', WP_Statistics::$reg['plugin-url'] . 'assets/css/jquery-ui-smoothness.min.css' );\n\twp_enqueue_style( 'jquery-ui-smoothness-css' );\n\n\t//Create Object List Of Default Hit Day to Display\n\tif ( $range == null or count( $range ) == 0 ) {\n\n\t\t//Get Number Of Time Range\n\t\t$range = array( 10, 20, 30, 60, 90, 180, 270, 365 );\n\n\t\t//Added All time From installed plugin to now\n\t\t$installed_date = WP_Statistics::get_number_days_install_plugin();\n\t\tarray_push( $range, $installed_date['days'] );\n\n\t\t//Get List Of Text Lang time Range\n\t\t$desc = array(\n\t\t\t__( '10 Days', 'wp-statistics' ),\n\t\t\t__( '20 Days', 'wp-statistics' ),\n\t\t\t__( '30 Days', 'wp-statistics' ),\n\t\t\t__( '2 Months', 'wp-statistics' ),\n\t\t\t__( '3 Months', 'wp-statistics' ),\n\t\t\t__( '6 Months', 'wp-statistics' ),\n\t\t\t__( '9 Months', 'wp-statistics' ),\n\t\t\t__( '1 Year', 'wp-statistics' ),\n\t\t\t__( 'All', 'wp-statistics' ),\n\t\t);\n\t}\n\tif ( count( $desc ) == 0 ) {\n\t\t$desc = $range;\n\t}\n\t$rcount = count( $range );\n\t$bold   = true;\n\n\t// Check to see if there's a range in the URL, if so set it, otherwise use the default.\n\tif ( isset( $_GET['rangestart'] ) and strtotime( $_GET['rangestart'] ) != false ) {\n\t\t$rangestart = $_GET['rangestart'];\n\t} else {\n\t\t$rangestart = $WP_Statistics->Current_Date( 'm/d/Y', '-' . $current );\n\t}\n\tif ( isset( $_GET['rangeend'] ) and strtotime( $_GET['rangeend'] ) != false ) {\n\t\t$rangeend = $_GET['rangeend'];\n\t} else {\n\t\t$rangeend = $WP_Statistics->Current_Date( 'm/d/Y' );\n\t}\n\n\t// Convert the text dates to unix timestamps and do some basic sanity checking.\n\t$rangestart_utime = $WP_Statistics->strtotimetz( $rangestart );\n\tif ( false === $rangestart_utime ) {\n\t\t$rangestart_utime = time();\n\t}\n\t$rangeend_utime = $WP_Statistics->strtotimetz( $rangeend );\n\tif ( false === $rangeend_utime || $rangeend_utime < $rangestart_utime ) {\n\t\t$rangeend_utime = time();\n\t}\n\n\t// Now get the number of days in the range.\n\t$daysToDisplay = (int) ( ( $rangeend_utime - $rangestart_utime ) / 24 / 60 / 60 );\n\t$today         = $WP_Statistics->Current_Date( 'm/d/Y' );\n\n\t// Re-create the range start/end strings from our utime's to make sure we get ride of any cruft and have them in the format we want.\n\t$rangestart = $WP_Statistics->Local_Date( get_option( \"date_format\" ), $rangestart_utime );\n\t$rangeend   = $WP_Statistics->Local_Date( get_option( \"date_format\" ), $rangeend_utime );\n\n\t//Calculate hit day if range is exist\n\tif ( isset( $_GET['rangeend'] ) and isset( $_GET['rangestart'] ) and strtotime( $_GET['rangestart'] ) != false and strtotime( $_GET['rangeend'] ) != false ) {\n\t\t$earlier = new DateTime( $_GET['rangestart'] );\n\t\t$later   = new DateTime( $_GET['rangeend'] );\n\t\t$current = $daysToDisplay = $later->diff( $earlier )->format( \"%a\" );\n\t}\n\n\techo '<form method=\"get\"><ul class=\"subsubsub wp-statistics-sub-fullwidth\">' . \"\\r\\n\";\n\t// Output any extra HTML we've been passed after the form element but before the date selector.\n\techo $pre_extra;\n\n\tfor ( $i = 0; $i < $rcount; $i ++ ) {\n\t\techo '<li class=\"all\"><a ';\n\t\tif ( $current == $range[ $i ] ) {\n\t\t\techo 'class=\"current\" ';\n\t\t\t$bold = false;\n\t\t}\n\n\t\t// Don't bother adding he date range to the standard links as they're not needed any may confuse the custom range selector.\n\t\techo 'href=\"?page=' . $page . '&hitdays=' . $range[ $i ] . esc_html( $extrafields ) . '\">' . $desc[ $i ] . '</a></li>';\n\t\tif ( $i < $rcount - 1 ) {\n\t\t\techo ' | ';\n\t\t}\n\t\techo \"\\r\\n\";\n\t}\n\techo ' | ';\n\techo '<input type=\"hidden\" name=\"page\" value=\"' . $page . '\">';\n\n\tparse_str( $extrafields, $parse );\n\tforeach ( $parse as $key => $value ) {\n\t\techo '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . esc_sql( $value ) . '\">';\n\t}\n\n\tif ( $bold ) {\n\t\techo ' <b>' . __( 'Time Frame', 'wp-statistics' ) . ':</b> ';\n\t} else {\n\t\techo ' ' . __( 'Time Frame', 'wp-statistics' ) . ': ';\n\t}\n\n\t//Print Time Range Select Ui\n\techo '<input type=\"text\" size=\"18\" name=\"rangestart\" id=\"datestartpicker\" value=\"' . $rangestart . '\" placeholder=\"' . __( wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ), 'wp-statistics' ) . '\" autocomplete=\"off\"> ' . __( 'to', 'wp-statistics' ) . ' <input type=\"text\" size=\"18\" name=\"rangeend\" id=\"dateendpicker\" value=\"' . $rangeend . '\" placeholder=\"' . __( wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ), 'wp-statistics' ) . '\" autocomplete=\"off\"> <input type=\"submit\" value=\"' . __( 'Go', 'wp-statistics' ) . '\" class=\"button-primary\">' . \"\\r\\n\";\n\n\t//Sanitize Time Request\n\techo '<input type=\"hidden\" name=\"rangestart\" id=\"rangestart\" value=\"' . $WP_Statistics->Local_Date( \"Y-m-d\", $rangestart_utime ) . '\">';\n\techo '<input type=\"hidden\" name=\"rangeend\" id=\"rangeend\" value=\"' . $WP_Statistics->Local_Date( \"Y-m-d\", $rangeend_utime ) . '\">';\n\n\t// Output any extra HTML we've been passed after the date selector but before the submit button.\n\techo $post_extra;\n\n\techo '</form>' . \"\\r\\n\";\n\techo '<script>\n        jQuery(function() { \n        //Get MYSQL Date\n        function wp_statistics_get_mysql_date(timestamp) {\n            var k = timestamp.valueOf() / 1000;\n            var t = new Date(k * 1000);\n            return t.getFullYear() + \"-\" + (\"0\" + (t.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + t.getDate()).slice(-2);\n        }\n        //From Date\n        jQuery( \"#datestartpicker\" ).datepicker({dateFormat: \\'' . wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ) . '\\', onSelect: function(selectedDate) {var v = jQuery(this).val();var d = new Date(v);if (v.length > 0) {jQuery(\"#rangestart\").val(wp_statistics_get_mysql_date(d));}}});\n        //To Date\n        jQuery( \"#dateendpicker\" ).datepicker({dateFormat: \\'' . wp_statistics_dateformat_php_to_jqueryui( get_option( \"date_format\" ) ) . '\\', onSelect: function(selectedDate) {var v = jQuery(this).val();var d = new Date(v);if (v.length > 0) {jQuery(\"#rangeend\").val(wp_statistics_get_mysql_date(d));}}});\n        });\n        </script>' . \"\\r\\n\";\n}\n\n/*\n * Prepare Range Time For Time picker\n */\nfunction wp_statistics_prepare_range_time_picker() {\n\n\t//Get Default Number To display in All\n\t$installed_date = WP_Statistics::get_number_days_install_plugin();\n\t$daysToDisplay  = $installed_date['days'];\n\n\t//List Of Pages For show 20 Days as First Parameter\n\t$list_of_pages = array( 'hits', 'searches', 'pages', 'countries', 'categories', 'tags', 'authors', 'browser', 'exclusions' );\n\tforeach ( $list_of_pages as $page ) {\n\t\tif ( isset( $_GET['page'] ) and $_GET['page'] == WP_Statistics::$page[ $page ] ) {\n\t\t\t$daysToDisplay = 30;\n\t\t}\n\t}\n\n\t//Set Default Object Time Range\n\t$rangestart = '';\n\t$rangeend   = '';\n\n\t//Check Hit Day\n\tif ( isset( $_GET['hitdays'] ) and $_GET['hitdays'] > 0 ) {\n\t\t$daysToDisplay = intval( $_GET['hitdays'] );\n\t}\n\tif ( isset( $_GET['rangeend'] ) and isset( $_GET['rangestart'] ) and strtotime( $_GET['rangestart'] ) != false and strtotime( $_GET['rangeend'] ) != false ) {\n\t\t$rangestart = $_GET['rangestart'];\n\t\t$rangeend   = $_GET['rangeend'];\n\n\t\t//Calculate hit day if range is exist\n\t\t$earlier       = new DateTime( $_GET['rangestart'] );\n\t\t$later         = new DateTime( $_GET['rangeend'] );\n\t\t$daysToDisplay = $later->diff( $earlier )->format( \"%a\" );\n\t}\n\n\treturn array( $daysToDisplay, $rangestart, $rangeend );\n}\n\n/**\n * Convert php date format to Jquery Ui\n *\n * @param $php_format\n * @return string\n */\nfunction wp_statistics_dateformat_php_to_jqueryui( $php_format ) {\n\t$SYMBOLS_MATCHING = array(\n\t\t// Day\n\t\t'd' => 'dd',\n\t\t'D' => 'D',\n\t\t'j' => 'd',\n\t\t'l' => 'DD',\n\t\t'N' => '',\n\t\t'S' => '',\n\t\t'w' => '',\n\t\t'z' => 'o',\n\t\t// Week\n\t\t'W' => '',\n\t\t// Month\n\t\t'F' => 'MM',\n\t\t'm' => 'mm',\n\t\t'M' => 'M',\n\t\t'n' => 'm',\n\t\t't' => '',\n\t\t// Year\n\t\t'L' => '',\n\t\t'o' => '',\n\t\t'Y' => 'yy',\n\t\t'y' => 'y',\n\t\t// Time\n\t\t'a' => '',\n\t\t'A' => '',\n\t\t'B' => '',\n\t\t'g' => '',\n\t\t'G' => '',\n\t\t'h' => '',\n\t\t'H' => '',\n\t\t'i' => '',\n\t\t's' => '',\n\t\t'u' => ''\n\t);\n\t$jqueryui_format  = \"\";\n\t$escaping         = false;\n\tfor ( $i = 0; $i < strlen( $php_format ); $i ++ ) {\n\t\t$char = $php_format[ $i ];\n\t\tif ( $char === '\\\\' ) {\n\t\t\t$i ++;\n\t\t\tif ( $escaping ) {\n\t\t\t\t$jqueryui_format .= $php_format[ $i ];\n\t\t\t} else {\n\t\t\t\t$jqueryui_format .= '\\'' . $php_format[ $i ];\n\t\t\t}\n\t\t\t$escaping = true;\n\t\t} else {\n\t\t\tif ( $escaping ) {\n\t\t\t\t$jqueryui_format .= \"'\";\n\t\t\t\t$escaping        = false;\n\t\t\t}\n\t\t\tif ( isset( $SYMBOLS_MATCHING[ $char ] ) ) {\n\t\t\t\t$jqueryui_format .= $SYMBOLS_MATCHING[ $char ];\n\t\t\t} else {\n\t\t\t\t$jqueryui_format .= $char;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $jqueryui_format;\n}\n\n/**\n * This function is used to calculate the number of days and their respective unix timestamps.\n *\n * @param $days\n * @param $start\n * @param $end\n * @return array\n */\nfunction wp_statistics_date_range_calculator( $days, $start, $end ) {\n\tglobal $WP_Statistics;\n\n\t$daysToDisplay = $days;\n\t$rangestart    = $start;\n\t$rangeend      = $end;\n\n\t//Check Exist params\n\tif ( ! empty( $daysToDisplay ) and ! empty( $rangestart ) and ! empty( $rangeend ) ) {\n\t\treturn array( $daysToDisplay, strtotime( $rangestart ), strtotime( $rangeend ) );\n\t}\n\n\t//Check Not Exist day to display\n\tif ( $daysToDisplay == - 1 ) {\n\t\t$rangestart_utime = $WP_Statistics->strtotimetz( $rangestart );\n\t\t$rangeend_utime   = $WP_Statistics->strtotimetz( $rangeend );\n\t\t$daysToDisplay    = (int) ( ( $rangeend_utime - $rangestart_utime ) / 24 / 60 / 60 );\n\n\t\tif ( $rangestart_utime == false || $rangeend_utime == false ) {\n\t\t\t$daysToDisplay    = 20;\n\t\t\t$rangeend_utime   = $WP_Statistics->timetz();\n\t\t\t$rangestart_utime = $rangeend_utime - ( $daysToDisplay * 24 * 60 * 60 );\n\t\t}\n\t} else {\n\t\t$rangeend_utime   = $WP_Statistics->timetz();\n\t\t$rangestart_utime = $rangeend_utime - ( $daysToDisplay * 24 * 60 * 60 );\n\t}\n\n\treturn array( $daysToDisplay, $rangestart_utime, $rangeend_utime );\n}\n\n\n/**\n * Delete All record From Table\n *\n * @param bool $table_name\n * @return string\n */\nfunction wp_statitiscs_empty_table( $table_name = false ) {\n\tglobal $wpdb;\n\n\tif ( $table_name ) {\n\t\t$result = $wpdb->query( 'DELETE FROM ' . $table_name );\n\n\t\tif ( $result ) {\n\t\t\treturn sprintf( __( '%s table data deleted successfully.', 'wp-statistics' ), '<code>' . $table_name . '</code>' );\n\t\t}\n\t}\n\n\treturn sprintf( __( 'Error, %s not emptied!', 'wp-statistics' ), $table_name );\n}\n\n\n/**\n * This function creates a small JavaScript that will load the contents of a overview or dashboard widget.\n *\n * @param $widget\n * @param null $container_id\n */\nfunction wp_statistics_generate_widget_load_javascript( $widget, $container_id = null ) {\n\tif ( null == $container_id ) {\n\t\t$container_id = str_replace( '.', '_', $widget . '_postbox' );\n\t}\n\t?>\n    <script type=\"text/javascript\">\n        jQuery(document).ready(function () {\n            wp_statistics_get_widget_contents('<?php echo $widget; ?>', '<?php echo $container_id; ?>');\n        });\n    </script>\n\t<?php\n}\n\n/**\n * Generate RGBA colors\n *\n * @param        $num\n * @param string $opacity\n *\n * @return string\n */\nfunction wp_statistics_generate_rgba_color( $num, $opacity = '1' ) {\n\t$hash = md5( 'color' . $num );\n\n\treturn sprintf(\n\t\t\"'rgba(%s, %s, %s, %s)'\",\n\t\thexdec( substr( $hash, 0, 2 ) ),\n\t\thexdec( substr( $hash, 2, 2 ) ),\n\t\thexdec( substr( $hash, 4, 2 ) ),\n\t\t$opacity\n\t);\n}\n\n/**\n * This function will validate that a capability exists,\n * if not it will default to returning the 'manage_options' capability.\n *\n * @param string $capability Capability\n * @return string 'manage_options'\n */\nfunction wp_statistics_validate_capability( $capability ) {\n\tglobal $wp_roles;\n\n\tif ( ! is_object( $wp_roles ) || ! is_array( $wp_roles->roles ) ) {\n\t\treturn 'manage_options';\n\t}\n\n\tforeach ( $wp_roles->roles as $role ) {\n\t\t$cap_list = $role['capabilities'];\n\n\t\tforeach ( $cap_list as $key => $cap ) {\n\t\t\tif ( $capability == $key ) {\n\t\t\t\treturn $capability;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 'manage_options';\n}\n\n/**\n * Check User Access To WP-Statistics Admin\n *\n * @param string $type [manage | read ]\n * @param string|boolean $export\n * @return bool\n */\nfunction wp_statistics_check_access_user( $type = 'both', $export = false ) {\n\tglobal $WP_Statistics;\n\n\t//List Of Default Cap\n\t$list = array(\n\t\t'manage' => array( 'manage_capability', 'manage_options' ),\n\t\t'read'   => array( 'read_capability', 'manage_options' )\n\t);\n\n\t//User User Cap\n\t$cap = 'both';\n\tif ( ! empty( $type ) and array_key_exists( $type, $list ) ) {\n\t\t$cap = $type;\n\t}\n\n\t//Check Export Cap name or Validation current_can_user\n\tif ( $export == \"cap\" ) {\n\t\treturn wp_statistics_validate_capability( $WP_Statistics->get_option( $list[ $cap ][0], $list[ $cap ][1] ) );\n\t}\n\n\t//Check Access\n\tswitch ( $type ) {\n\t\tcase \"manage\":\n\t\tcase \"read\":\n\t\t\treturn current_user_can( wp_statistics_validate_capability( $WP_Statistics->get_option( $list[ $cap ][0], $list[ $cap ][1] ) ) );\n\t\t\tbreak;\n\t\tcase \"both\":\n\t\t\tforeach ( array( 'manage', 'read' ) as $c ) {\n\t\t\t\tif ( wp_statistics_check_access_user( $c ) === true ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn false;\n}\n\n/**\n * Notices displayed near the top of admin pages.\n *\n * @param $type\n * @param $message\n * @area admin\n */\nfunction wp_statistics_admin_notice_result( $type, $message ) {\n\n\tswitch ( $type ) {\n\t\tcase 'error':\n\t\t\t$class = 'notice notice-error';\n\t\t\tbreak;\n\n\t\tcase 'warning':\n\t\t\t$class = 'notice notice-warning';\n\t\t\tbreak;\n\n\t\tcase 'success':\n\t\t\t$class = 'notice notice-success';\n\t\t\tbreak;\n\t}\n\n\tprintf( '<div class=\"%1$s\"><p>%2$s</p></div>', esc_attr( $class ), esc_html( $message ) );\n}\n\n/**\n * Get All Browser List For Detecting\n *\n * @param bool $all\n * @area utility\n * @return array|mixed\n */\nfunction wp_statistics_get_browser_list( $all = true ) {\n\n\t//List Of Detect Browser in WP Statistics\n\t$list        = array(\n\t\t\"chrome\"  => __( \"Chrome\", 'wp-statistics' ),\n\t\t\"firefox\" => __( \"Firefox\", 'wp-statistics' ),\n\t\t\"msie\"    => __( \"Internet Explorer\", 'wp-statistics' ),\n\t\t\"edge\"    => __( \"Edge\", 'wp-statistics' ),\n\t\t\"opera\"   => __( \"Opera\", 'wp-statistics' ),\n\t\t\"safari\"  => __( \"Safari\", 'wp-statistics' )\n\t);\n\t$browser_key = array_keys( $list );\n\n\t//Return All Browser List\n\tif ( $all === true ) {\n\t\treturn $list;\n\t\t//Return Browser Keys For detect\n\t} elseif ( $all == \"key\" ) {\n\t\treturn $browser_key;\n\t} else {\n\t\t//Return Custom Browser Name by key\n\t\tif ( array_search( strtolower( $all ), $browser_key ) !== false ) {\n\t\t\treturn $list[ strtolower( $all ) ];\n\t\t} else {\n\t\t\treturn __( \"Unknown\", 'wp-statistics' );\n\t\t}\n\t}\n}\n\n/**\n * Pagination Link\n *\n * @param array $args\n * @area admin\n * @return string\n */\nfunction wp_statistics_paginate_links( $args = array() ) {\n\n\t//Prepare Arg\n\t$defaults   = array(\n\t\t'item_per_page' => 10,\n\t\t'container'     => 'pagination-wrap',\n\t\t'query_var'     => 'pagination-page',\n\t\t'total'         => 0,\n\t\t'current'       => 0,\n\t\t'show_now_page' => true\n\t);\n\t$args       = wp_parse_args( $args, $defaults );\n\t$total_page = ceil( $args['total'] / $args['item_per_page'] );\n\n\t//Show Pagination Ui\n\tif ( $total_page > 1 ) {\n\t\techo '<div class=\"' . $args['container'] . '\">';\n\t\techo paginate_links( array(\n\t\t\t'base'      => add_query_arg( $args['query_var'], '%#%' ),\n\t\t\t'format'    => '',\n\t\t\t'type'      => 'list',\n\t\t\t'mid_size'  => 3,\n\t\t\t'prev_text' => __( '&laquo;' ),\n\t\t\t'next_text' => __( '&raquo;' ),\n\t\t\t'total'     => $total_page,\n\t\t\t'current'   => $args['current']\n\t\t) );\n\n\t\tif ( $args['show_now_page'] ) {\n\t\t\techo '<p id=\"result-log\">' . sprintf( __( 'Page %1$s of %2$s', 'wp-statistics' ), $args['current'], $total_page ) . '</p>';\n\t\t}\n\n\t\techo '</div>';\n\t}\n}\n\n/**\n * Get Post List From custom Post Type\n *\n * @param array $args\n * @area utility\n * @return mixed\n */\nfunction wp_statistics_get_post_list( $args = array() ) {\n\n\t//Prepare Arg\n\t$defaults = array(\n\t\t'post_type'      => 'page',\n\t\t'post_status'    => 'publish',\n\t\t'posts_per_page' => '-1',\n\t\t'order'          => 'ASC',\n\t\t'fields'         => 'ids'\n\t);\n\t$args     = wp_parse_args( $args, $defaults );\n\n\t//Get Post List\n\t$query = new WP_Query( $args );\n\t$list  = array();\n\tforeach ( $query->posts as $ID ) {\n\t\t$list[ $ID ] = get_the_title( $ID );\n\t}\n\n\treturn $list;\n}\n\n/**\n * Get Page information\n *\n * @param $page_id\n * @param string $type\n * @return array\n */\nfunction wp_statistics_get_page_info( $page_id, $type = 'post' ) {\n\n\t//Create Empty Object\n\t$arg      = array();\n\t$defaults = array(\n\t\t'link'      => '',\n\t\t'edit_link' => '',\n\t\t'object_id' => $page_id,\n\t\t'title'     => '-',\n\t\t'meta'      => array()\n\t);\n\n\tif ( ! empty( $type ) ) {\n\t\tswitch ( $type ) {\n\t\t\tcase \"product\":\n\t\t\tcase \"attachment\":\n\t\t\tcase \"post\":\n\t\t\tcase \"page\":\n\t\t\t\t$arg = array(\n\t\t\t\t\t'title'     => get_the_title( $page_id ),\n\t\t\t\t\t'link'      => get_the_permalink( $page_id ),\n\t\t\t\t\t'edit_link' => get_edit_post_link( $page_id ),\n\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t'post_type' => get_post_type( $page_id )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"category\":\n\t\t\tcase \"post_tag\":\n\t\t\tcase \"tax\":\n\t\t\t\t$term = get_term( $page_id );\n\t\t\t\t$arg  = array(\n\t\t\t\t\t'title'     => $term->name,\n\t\t\t\t\t'link'      => ( is_wp_error( get_term_link( $page_id ) ) === true ? '' : get_term_link( $page_id ) ),\n\t\t\t\t\t'edit_link' => get_edit_term_link( $page_id ),\n\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t'taxonomy'         => $term->taxonomy,\n\t\t\t\t\t\t'term_taxonomy_id' => $term->term_taxonomy_id,\n\t\t\t\t\t\t'count'            => $term->count,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"home\":\n\t\t\t\t$arg = array(\n\t\t\t\t\t'title' => __( 'Home Page', 'wp-statistics' ),\n\t\t\t\t\t'link'  => get_site_url()\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"author\":\n\t\t\t\t$user_info = get_userdata( $page_id );\n\t\t\t\t$arg       = array(\n\t\t\t\t\t'title'     => ( $user_info->display_name != \"\" ? $user_info->display_name : $user_info->first_name . ' ' . $user_info->last_name ),\n\t\t\t\t\t'link'      => get_author_posts_url( $page_id ),\n\t\t\t\t\t'edit_link' => get_edit_user_link( $page_id ),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"search\":\n\t\t\t\t$result['title'] = __( 'Search Page', 'wp-statistics' );\n\t\t\t\tbreak;\n\t\t\tcase \"404\":\n\t\t\t\t$result['title'] = __( '404 not found', 'wp-statistics' );\n\t\t\t\tbreak;\n\t\t\tcase \"archive\":\n\t\t\t\t$result['title'] = __( 'Post Archive', 'wp-statistics' );\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn wp_parse_args( $arg, $defaults );\n}\n\n/**\n * Table List Wp-statistics\n *\n * @param string $export\n * @param array $except\n * @return array|null\n */\nfunction wp_statistics_db_table( $export = 'all', $except = array() ) {\n\tglobal $wpdb;\n\n\t//Create Empty Object\n\t$list = array();\n\n\t//List Of Table\n\tif ( is_string( $except ) ) {\n\t\t$except = array( $except );\n\t}\n\t$mysql_list_table = array_diff( WP_Statistics_Install::$db_table, $except );\n\tforeach ( $mysql_list_table as $tbl ) {\n\t\t$table_name = $wpdb->prefix . 'statistics_' . $tbl;\n\t\tif ( $export == \"all\" ) {\n\t\t\tif ( $wpdb->get_var( \"SHOW TABLES LIKE '$table_name'\" ) == $table_name ) {\n\t\t\t\t$list[ $tbl ] = $table_name;\n\t\t\t}\n\t\t} else {\n\t\t\t$list[ $tbl ] = $table_name;\n\t\t}\n\t}\n\n\t//Export Data\n\tif ( $export == 'all' ) {\n\t\treturn $list;\n\t} else {\n\t\tif ( array_key_exists( $export, $list ) ) {\n\t\t\treturn $list[ $export ];\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Check WP-statistics Option Require\n *\n * @param array $item\n * @param string $condition_key\n * @return array|bool\n */\nfunction wp_statistics_check_option_require( $item = array(), $condition_key = 'require' ) {\n\tglobal $WP_Statistics;\n\n\t$condition = true;\n\tif ( array_key_exists( 'require', $item ) ) {\n\t\tforeach ( $item[ $condition_key ] as $if ) {\n\t\t\tif ( ! $WP_Statistics->get_option( $if ) ) {\n\t\t\t\t$condition = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $condition;\n}\n\n/**\n * Modify For IGNORE insert Query\n *\n * @hook add_action('query', function_name, 10);\n * @param $query\n * @return string\n */\nfunction wp_statistics_ignore_insert( $query ) {\n\t$count = 0;\n\t$query = preg_replace( '/^(INSERT INTO)/i', 'INSERT IGNORE INTO', $query, 1, $count );\n\treturn $query;\n}\n\n/**\n * Get Html Body Page By Url\n *\n * @param $url string e.g : wp-statistics.com\n * @return bool\n */\nfunction wp_statistics_get_html_page( $url ) {\n\n\t//sanitize Url\n\t$parse_url = wp_parse_url( $url );\n\t$urls[]    = esc_url_raw( $url );\n\n\t//Check Protocol Url\n\tif ( ! array_key_exists( 'scheme', $parse_url ) ) {\n\t\t$urls      = array();\n\t\t$url_parse = wp_parse_url( $url );\n\t\tforeach ( array( 'http://', 'https://' ) as $scheme ) {\n\t\t\t$urls[] = preg_replace( '/([^:])(\\/{2,})/', '$1/', $scheme . path_join( ( isset( $url_parse['host'] ) ? $url_parse['host'] : '' ), ( isset( $url_parse['path'] ) ? $url_parse['path'] : '' ) ) );\n\t\t}\n\t}\n\n\t//Send Request for Get Page Html\n\tforeach ( $urls as $page ) {\n\t\t$response = wp_remote_get( $page, array(\n\t\t\t'timeout'    => 30,\n\t\t\t'user-agent' => \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.71 Safari/537.36\"\n\t\t) );\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$data = wp_remote_retrieve_body( $response );\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn ( wp_strip_all_tags( $data ) == \"\" ? false : $data );\n\t}\n\n\treturn false;\n}\n\n/**\n * Get Site title By Url\n *\n * @param $url string e.g : wp-statistics.com\n * @return bool|string\n */\nfunction wp_statistics_get_site_title( $url ) {\n\n\t//Get ody Page\n\t$html = wp_statistics_get_html_page( $url );\n\tif ( $html === false ) {\n\t\treturn false;\n\t}\n\n\t//Get Page Title\n\tif ( class_exists( 'DOMDocument' ) ) {\n\t\t$dom = new DOMDocument;\n\t\t@$dom->loadHTML( $html );\n\t\t$title = '';\n\t\tif ( isset( $dom ) and $dom->getElementsByTagName( 'title' )->length > 0 ) {\n\t\t\t$title = $dom->getElementsByTagName( 'title' )->item( '0' )->nodeValue;\n\t\t}\n\t\treturn ( wp_strip_all_tags( $title ) == \"\" ? false : wp_strip_all_tags( $title ) );\n\t}\n\n\treturn false;\n}\n\n\n/**\n * Get WebSite IP Server And Country Name\n *\n * @param $url string domain name e.g : wp-statistics.com\n * @return array\n */\nfunction wp_statistics_get_domain_server( $url ) {\n\tglobal $WP_Statistics;\n\n\t//Create Empty Object\n\t$result = array(\n\t\t'ip'      => '',\n\t\t'country' => ''\n\t);\n\n\t//Get Ip by Domain\n\tif ( function_exists( 'gethostbyname' ) ) {\n\t\t$ip = gethostbyname( $url );\n\t\tif ( filter_var( $ip, FILTER_VALIDATE_IP ) ) {\n\t\t\t$result['ip'] = $ip;\n\t\t\t//Get country Code\n\t\t\tif ( $WP_Statistics->get_option( 'geoip' ) ) {\n\t\t\t\t$geoip_reader = $WP_Statistics::geoip_loader( 'country' );\n\t\t\t\tif ( $geoip_reader != false ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$record            = $geoip_reader->country( $ip );\n\t\t\t\t\t\t$result['country'] = $record->country->isoCode;\n\t\t\t\t\t} catch ( Exception $e ) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n/**\n * Show Site Icon by Url\n *\n * @param $url\n * @param int $size\n * @param string $style\n * @return bool|string\n */\nfunction wp_statistics_show_site_icon( $url, $size = 16, $style = '' ) {\n\t$url = preg_replace( '/^https?:\\/\\//', '', $url );\n\tif ( $url != \"\" ) {\n\t\t$imgurl = \"https://www.google.com/s2/favicons?domain=\" . $url;\n\t\treturn '<img src=\"' . $imgurl . '\" width=\"' . $size . '\" height=\"' . $size . '\" style=\"' . ( $style == \"\" ? 'vertical-align: -3px;' : '' ) . '\" />';\n\t}\n\n\treturn false;\n}\n\n/**\n * Get Number Referer Domain\n *\n * @param $url\n * @param array $time_rang\n * @return integer\n */\nfunction wp_statistics_get_number_referer_from_domain( $url, $time_rang = array() ) {\n\tglobal $wpdb;\n\n\t//Get Domain Name\n\t$search_url = wp_statistics_get_domain_name( esc_url_raw( $url ) );\n\n\t//Prepare SQL\n\t$time_sql = '';\n\tif ( count( $time_rang ) > 0 and ! empty( $time_rang ) ) {\n\t\t$time_sql = sprintf( \"AND `last_counter` BETWEEN '%s' AND '%s'\", $time_rang[0], $time_rang[1] );\n\t}\n\t$sql = $wpdb->prepare( \"SELECT COUNT(*) FROM `{$wpdb->prefix}statistics_visitor` WHERE `referred` REGEXP \\\"^(https?://|www\\\\.)[\\.A-Za-z0-9\\-]+\\\\.[a-zA-Z]{2,4}\\\" AND referred <> '' AND LENGTH(referred) >=12 AND (`referred` LIKE  %s OR `referred` LIKE %s OR `referred` LIKE %s OR `referred` LIKE %s) \" . $time_sql . \" ORDER BY `{$wpdb->prefix}statistics_visitor`.`ID` DESC\", 'https://www.' . $wpdb->esc_like( $search_url ) . '%', 'https://' . $wpdb->esc_like( $search_url ) . '%', 'http://www.' . $wpdb->esc_like( $search_url ) . '%', 'http://' . $wpdb->esc_like( $search_url ) . '%' );\n\n\t//Get Count\n\treturn $wpdb->get_var( $sql );\n}\n\n/**\n * Get Domain name from url\n * e.g : https://wp-statistics.com/add-ons/ -> wp-statistics.com\n *\n * @param $url\n * @return mixed\n */\nfunction wp_statistics_get_domain_name( $url ) {\n\t//Remove protocol\n\t$url = preg_replace( \"(^https?://)\", \"\", trim( $url ) );\n\t//remove w(3)\n\t$url = preg_replace( '#^(http(s)?://)?w{3}\\.#', '$1', $url );\n\t//remove all Query\n\t$url = explode( \"/\", $url );\n\n\treturn $url[0];\n}"], "filenames": ["includes/functions/functions.php"], "buggy_code_start_loc": [2097], "buggy_code_end_loc": [2098], "fixing_code_start_loc": [2097], "fixing_code_end_loc": [2098], "type": "CWE-79", "message": "The WP Statistics plugin through 12.6.2 for WordPress has XSS, allowing a remote attacker to inject arbitrary web script or HTML via the Referer header of a GET request.", "other": {"cve": {"id": "CVE-2019-10864", "sourceIdentifier": "cve@mitre.org", "published": "2019-04-23T18:29:00.350", "lastModified": "2019-05-06T13:14:37.077", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The WP Statistics plugin through 12.6.2 for WordPress has XSS, allowing a remote attacker to inject arbitrary web script or HTML via the Referer header of a GET request."}, {"lang": "es", "value": "El plugin WP Statistics en la versi\u00f3n 12.6.2 para WordPress tiene una vulnerabilidad XSS, permitiendo a un atacante remoto inyectar scripts web arbitrarios o HTML a trav\u00e9s del Referer de cabecera mediante una petici\u00f3n GET."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:veronalabs:wp_statistics:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "12.6.2", "matchCriteriaId": "4C05CC93-266F-443C-A901-7CB3CEAC38D7"}]}]}], "references": [{"url": "https://github.com/wp-statistics/wp-statistics/commit/5aec0a08680f0afea387267a8d1b9fbb3379247c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://medium.com/@aramburu/cve-2019-10864-wordpress-7aebc24751c4", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-statistics/wp-statistics/commit/5aec0a08680f0afea387267a8d1b9fbb3379247c"}}