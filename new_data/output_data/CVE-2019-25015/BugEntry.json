{"buggy_code": ["-- Copyright 2009 Jo-Philipp Wich <jow@openwrt.org>\n-- Licensed to the public under the Apache License 2.0.\n\nlocal fs   = require \"nixio.fs\"\nlocal nw   = require \"luci.model.network\"\nlocal fw   = require \"luci.model.firewall\"\nlocal uci  = require \"luci.model.uci\".cursor()\nlocal http = require \"luci.http\"\n\nlocal iw = luci.sys.wifi.getiwinfo(http.formvalue(\"device\"))\n\nlocal has_firewall = fs.access(\"/etc/config/firewall\")\n\nif not iw then\n\tluci.http.redirect(luci.dispatcher.build_url(\"admin/network/wireless\"))\n\treturn\nend\n\nm = SimpleForm(\"network\", translatef(\"Joining Network: %q\", http.formvalue(\"join\")))\nm.cancel = translate(\"Back to scan results\")\nm.reset = false\n\nfunction m.on_cancel()\n\tlocal dev = http.formvalue(\"device\")\n\thttp.redirect(luci.dispatcher.build_url(\n\t\tdev and \"admin/network/wireless_join?device=\" .. dev\n\t\t\tor \"admin/network/wireless\"\n\t))\nend\n\nnw.init(uci)\nfw.init(uci)\n\nm.hidden = {\n\tdevice      = http.formvalue(\"device\"),\n\tjoin        = http.formvalue(\"join\"),\n\tchannel     = http.formvalue(\"channel\"),\n\tmode        = http.formvalue(\"mode\"),\n\tbssid       = http.formvalue(\"bssid\"),\n\twep         = http.formvalue(\"wep\"),\n\twpa_suites\t= http.formvalue(\"wpa_suites\"),\n\twpa_version = http.formvalue(\"wpa_version\")\n}\n\nif iw and iw.mbssid_support then\n\treplace = m:field(Flag, \"replace\", translate(\"Replace wireless configuration\"),\n\t\ttranslate(\"Check this option to delete the existing networks from this radio.\"))\n\n\tfunction replace.cfgvalue() return \"0\" end\nelse\n\treplace = m:field(DummyValue, \"replace\", translate(\"Replace wireless configuration\"))\n\treplace.default = translate(\"The hardware is not multi-SSID capable and the existing \" ..\n\t\t\"configuration will be replaced if you proceed.\")\n\n\tfunction replace.formvalue() return \"1\" end\nend\n\nif http.formvalue(\"wep\") == \"1\" then\n\tkey = m:field(Value, \"key\", translate(\"WEP passphrase\"),\n\t\ttranslate(\"Specify the secret encryption key here.\"))\n\n\tkey.password = true\n\tkey.datatype = \"wepkey\"\n\nelseif (tonumber(m.hidden.wpa_version) or 0) > 0 and\n\t(m.hidden.wpa_suites == \"PSK\" or m.hidden.wpa_suites == \"PSK2\")\nthen\n\tkey = m:field(Value, \"key\", translate(\"WPA passphrase\"),\n\t\ttranslate(\"Specify the secret encryption key here.\"))\n\n\tkey.password = true\n\tkey.datatype = \"wpakey\"\n\t--m.hidden.wpa_suite = (tonumber(http.formvalue(\"wpa_version\")) or 0) >= 2 and \"psk2\" or \"psk\"\nend\n\nnewnet = m:field(Value, \"_netname_new\", translate(\"Name of the new network\"),\n\ttranslate(\"The allowed characters are: <code>A-Z</code>, <code>a-z</code>, \" ..\n\t\t\"<code>0-9</code> and <code>_</code>\"\n\t))\n\nnewnet.default = m.hidden.mode == \"Ad-Hoc\" and \"mesh\" or \"wwan\"\nnewnet.datatype = \"uciname\"\n\nif has_firewall then\n\tfwzone = m:field(Value, \"_fwzone\",\n\t\ttranslate(\"Create / Assign firewall-zone\"),\n\t\ttranslate(\"Choose the firewall zone you want to assign to this interface. Select <em>unspecified</em> to remove the interface from the associated zone or fill out the <em>create</em> field to define a new zone and attach the interface to it.\"))\n\n\tfwzone.template = \"cbi/firewall_zonelist\"\n\tfwzone.default = m.hidden.mode == \"Ad-Hoc\" and \"mesh\" or \"wan\"\nend\n\nfunction newnet.parse(self, section)\n\tlocal net, zone\n\n\tif has_firewall then\n\t\tlocal value = fwzone:formvalue(section)\n\t\tif value and #value > 0 then\n\t\t\tzone = fw:get_zone(value) or fw:add_zone(value)\n\t\tend\n\tend\n\n\tlocal wdev = nw:get_wifidev(m.hidden.device)\n\n\twdev:set(\"disabled\", false)\n\twdev:set(\"channel\", m.hidden.channel)\n\n\tif replace:formvalue(section) then\n\t\tlocal n\n\t\tfor _, n in ipairs(wdev:get_wifinets()) do\n\t\t\twdev:del_wifinet(n)\n\t\tend\n\tend\n\n\tlocal wconf = {\n\t\tdevice  = m.hidden.device,\n\t\tssid    = m.hidden.join,\n\t\tmode    = (m.hidden.mode == \"Ad-Hoc\" and \"adhoc\" or \"sta\")\n\t}\n\n\tif m.hidden.wep == \"1\" then\n\t\twconf.encryption = \"wep-open\"\n\t\twconf.key        = \"1\"\n\t\twconf.key1       = key and key:formvalue(section) or \"\"\n\telseif (tonumber(m.hidden.wpa_version) or 0) > 0 then\n\t\twconf.encryption = (tonumber(m.hidden.wpa_version) or 0) >= 2 and \"psk2\" or \"psk\"\n\t\twconf.key        = key and key:formvalue(section) or \"\"\n\telse\n\t\twconf.encryption = \"none\"\n\tend\n\n\tif wconf.mode == \"adhoc\" or wconf.mode == \"sta\" then\n\t\twconf.bssid = m.hidden.bssid\n\tend\n\n\tlocal value = self:formvalue(section)\n\tnet = nw:add_network(value, { proto = \"dhcp\" })\n\n\tif not net then\n\t\tself.error = { [section] = \"missing\" }\n\telse\n\t\twconf.network = net:name()\n\n\t\tlocal wnet = wdev:add_wifinet(wconf)\n\t\tif wnet then\n\t\t\tif zone then\n\t\t\t\tfw:del_network(net:name())\n\t\t\t\tzone:add_network(net:name())\n\t\t\tend\n\n\t\t\tuci:save(\"wireless\")\n\t\t\tuci:save(\"network\")\n\t\t\tuci:save(\"firewall\")\n\n\t\t\tluci.http.redirect(wnet:adminlink())\n\t\tend\n\tend\nend\n\nif has_firewall then\n\tfunction fwzone.cfgvalue(self, section)\n\t\tself.iface = section\n\t\tlocal z = fw:get_zone_by_network(section)\n\t\treturn z and z:name()\n\tend\nend\n\nreturn m\n", "<%#\n Copyright 2010-2018 Jo-Philipp Wich <jo@mein.io>\n Licensed to the public under the Apache License 2.0.\n-%>\n\n<script type=\"text/javascript\">//<![CDATA[\n\tfunction iface_reconnect(id) {\n\t\tXHR.halt();\n\n\t\tvar d = document.getElementById(id + '-ifc-description');\n\t\tif (d) d.innerHTML = '<em><%:Interface is reconnecting...%></em>';\n\n\t\t(new XHR()).post('<%=url('admin/network/iface_reconnect')%>/' + id,\n\t\t\t{ token: '<%=token%>' }, XHR.run);\n\t}\n\n\tfunction iface_delete(ev) {\n\t\tif (!confirm(<%=luci.http.write_json(translate('Really delete this interface? The deletion cannot be undone! You might lose access to this device if you are connected via this interface'))%>)) {\n\t\t\tev.preventDefault();\n\t\t\treturn false;\n\t\t}\n\n\t\tev.target.previousElementSibling.value = '1';\n\t\treturn true;\n\t}\n\n\tvar networks = [];\n\n\tdocument.querySelectorAll('[data-network]').forEach(function(n) {\n\t\tnetworks.push(n.getAttribute('data-network'));\n\t});\n\n\tfunction render_iface(ifc) {\n\t\treturn E('span', { class: 'cbi-tooltip-container' }, [\n\t\t\tE('img', { 'class' : 'middle', 'src': '<%=resource%>/icons/%s%s.png'.format(\n\t\t\t\tifc.is_alias ? 'alias' : ifc.type,\n\t\t\t\tifc.is_up ? '' : '_disabled') }),\n\t\t\tE('span', { 'class': 'cbi-tooltip ifacebadge large' }, [\n\t\t\t\tE('img', { 'src': '<%=resource%>/icons/%s%s.png'.format(\n\t\t\t\t\tifc.type, ifc.is_up ? '' : '_disabled') }),\n\t\t\t\tE('span', { 'class': 'left' }, [\n\t\t\t\t\tE('strong', '<%:Type%>: '), ifc.typename, E('br'),\n\t\t\t\t\tE('strong', '<%:Device%>: '), ifc.ifname, E('br'),\n\t\t\t\t\tE('strong', '<%:Connected%>: '), ifc.is_up ? '<%:yes%>' : '<%:no%>', E('br'),\n\t\t\t\t\tifc.macaddr ? E('strong', '<%:MAC%>: ') : '',\n\t\t\t\t\tifc.macaddr ? ifc.macaddr : '',\n\t\t\t\t\tifc.macaddr ? E('br') : '',\n\t\t\t\t\tE('strong', '<%:RX%>: '), '%.2mB (%d <%:Pkts.%>)'.format(ifc.rx_bytes, ifc.rx_packets), E('br'),\n\t\t\t\t\tE('strong', '<%:TX%>: '), '%.2mB (%d <%:Pkts.%>)'.format(ifc.tx_bytes, ifc.tx_packets)\n\t\t\t\t])\n\t\t\t])\n\t\t]);\n\t}\n\n\tXHR.poll(5, '<%=url('admin/network/iface_status')%>/' + networks.join(','), null,\n\t\tfunction(x, ifcs)\n\t\t{\n\t\t\tif (ifcs)\n\t\t\t{\n\t\t\t\tfor (var idx = 0; idx < ifcs.length; idx++)\n\t\t\t\t{\n\t\t\t\t\tvar ifc = ifcs[idx];\n\t\t\t\t\tvar html = '';\n\n\t\t\t\t\tvar s = document.getElementById(ifc.id + '-ifc-devices');\n\t\t\t\t\tif (s)\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (s.firstChild)\n\t\t\t\t\t\t\ts.removeChild(s.firstChild);\n\n\t\t\t\t\t\ts.appendChild(render_iface(ifc));\n\n\t\t\t\t\t\tif (ifc.subdevices && ifc.subdevices.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sifs = [ ' (' ];\n\n\t\t\t\t\t\t\tfor (var j = 0; j < ifc.subdevices.length; j++)\n\t\t\t\t\t\t\t\tsifs.push(render_iface(ifc.subdevices[j]));\n\n\t\t\t\t\t\t\tsifs.push(')');\n\n\t\t\t\t\t\t\ts.appendChild(E('span', {}, sifs));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.appendChild(E('br'));\n\t\t\t\t\t\ts.appendChild(E('small', {}, ifc.is_alias ? '<%:Alias of \"%s\"%>'.format(ifc.is_alias) : ifc.name));\n\t\t\t\t\t}\n\n\t\t\t\t\tvar d = document.getElementById(ifc.id + '-ifc-description');\n\t\t\t\t\tif (d && ifc.proto && ifc.ifname)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar desc = null;\n\n\t\t\t\t\t\tif (ifc.is_dynamic)\n\t\t\t\t\t\t\tdesc = '<%:Virtual dynamic interface%>';\n\t\t\t\t\t\telse if (ifc.is_alias)\n\t\t\t\t\t\t\tdesc = '<%:Alias Interface%>';\n\n\t\t\t\t\t\tif (ifc.desc)\n\t\t\t\t\t\t\tdesc = desc ? '%s (%s)'.format(desc, ifc.desc) : ifc.desc;\n\n\t\t\t\t\t\thtml += String.format('<strong><%:Protocol%>:</strong> %h<br />', desc || '?');\n\n\t\t\t\t\t\tif (ifc.is_up)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thtml += String.format('<strong><%:Uptime%>:</strong> %t<br />', ifc.uptime);\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif (!ifc.is_dynamic && !ifc.is_alias)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (ifc.macaddr)\n\t\t\t\t\t\t\t\thtml += String.format('<strong><%:MAC%>:</strong> %s<br />', ifc.macaddr);\n\n\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t'<strong><%:RX%>:</strong> %.2mB (%d <%:Pkts.%>)<br />' +\n\t\t\t\t\t\t\t\t'<strong><%:TX%>:</strong> %.2mB (%d <%:Pkts.%>)<br />',\n\t\t\t\t\t\t\t\t\tifc.rx_bytes, ifc.rx_packets,\n\t\t\t\t\t\t\t\t\tifc.tx_bytes, ifc.tx_packets\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ifc.ipaddrs && ifc.ipaddrs.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < ifc.ipaddrs.length; i++)\n\t\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t\t'<strong><%:IPv4%>:</strong> %s<br />',\n\t\t\t\t\t\t\t\t\tifc.ipaddrs[i]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ifc.ip6addrs && ifc.ip6addrs.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < ifc.ip6addrs.length; i++)\n\t\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t\t'<strong><%:IPv6%>:</strong> %s<br />',\n\t\t\t\t\t\t\t\t\tifc.ip6addrs[i]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ifc.ip6prefix)\n\t\t\t\t\t\t\thtml += String.format('<strong><%:IPv6-PD%>:</strong> %s<br />', ifc.ip6prefix);\n\n\t\t\t\t\t\tif (ifc.errors)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < ifc.errors.length; i++)\n\t\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t\t'<em class=\"error\"><strong><%:Error%>:</strong> %h</em><br />',\n\t\t\t\t\t\t\t\t\tifc.errors[i]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\td.innerHTML = html;\n\t\t\t\t\t}\n\t\t\t\t\telse if (d && !ifc.proto)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = document.getElementById(ifc.id + '-ifc-edit');\n\t\t\t\t\t\tif (e)\n\t\t\t\t\t\t\te.disabled = true;\n\n\t\t\t\t\t\td.innerHTML = String.format(\n\t\t\t\t\t\t\t'<em><%:Unsupported protocol type.%></em><br />' +\n\t\t\t\t\t\t\t'<a href=\"%h\"><%:Install protocol extensions...%></a>',\n\t\t\t\t\t\t\t\t'<%=url(\"admin/system/packages\")%>?query=luci-proto&display=available'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse if (d && !ifc.ifname)\n\t\t\t\t\t{\n\t\t\t\t\t\td.innerHTML = String.format(\n\t\t\t\t\t\t\t'<em><%:Network without interfaces.%></em><br />' +\n\t\t\t\t\t\t\t'<a href=\"<%=url(\"admin/network/network/%s\")%>?tab.network.%s=physical\"><%:Assign interfaces...%></a>',\n\t\t\t\t\t\t\t\tifc.name, ifc.name\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse if (d)\n\t\t\t\t\t{\n\t\t\t\t\t\td.innerHTML = '<em><%:Interface not present or not connected yet.%></em>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n//]]></script>\n"], "fixing_code": ["-- Copyright 2009 Jo-Philipp Wich <jow@openwrt.org>\n-- Licensed to the public under the Apache License 2.0.\n\nlocal fs   = require \"nixio.fs\"\nlocal nw   = require \"luci.model.network\"\nlocal fw   = require \"luci.model.firewall\"\nlocal uci  = require \"luci.model.uci\".cursor()\nlocal http = require \"luci.http\"\nlocal util = require \"luci.util\"\n\nlocal iw = luci.sys.wifi.getiwinfo(http.formvalue(\"device\"))\n\nlocal has_firewall = fs.access(\"/etc/config/firewall\")\n\nif not iw then\n\tluci.http.redirect(luci.dispatcher.build_url(\"admin/network/wireless\"))\n\treturn\nend\n\nm = SimpleForm(\"network\", translatef(\"Joining Network: %q\", util.pcdata(http.formvalue(\"join\"))))\nm.cancel = translate(\"Back to scan results\")\nm.reset = false\n\nfunction m.on_cancel()\n\tlocal dev = http.formvalue(\"device\")\n\thttp.redirect(luci.dispatcher.build_url(\n\t\tdev and \"admin/network/wireless_join?device=\" .. dev\n\t\t\tor \"admin/network/wireless\"\n\t))\nend\n\nnw.init(uci)\nfw.init(uci)\n\nm.hidden = {\n\tdevice      = http.formvalue(\"device\"),\n\tjoin        = http.formvalue(\"join\"),\n\tchannel     = http.formvalue(\"channel\"),\n\tmode        = http.formvalue(\"mode\"),\n\tbssid       = http.formvalue(\"bssid\"),\n\twep         = http.formvalue(\"wep\"),\n\twpa_suites\t= http.formvalue(\"wpa_suites\"),\n\twpa_version = http.formvalue(\"wpa_version\")\n}\n\nif iw and iw.mbssid_support then\n\treplace = m:field(Flag, \"replace\", translate(\"Replace wireless configuration\"),\n\t\ttranslate(\"Check this option to delete the existing networks from this radio.\"))\n\n\tfunction replace.cfgvalue() return \"0\" end\nelse\n\treplace = m:field(DummyValue, \"replace\", translate(\"Replace wireless configuration\"))\n\treplace.default = translate(\"The hardware is not multi-SSID capable and the existing \" ..\n\t\t\"configuration will be replaced if you proceed.\")\n\n\tfunction replace.formvalue() return \"1\" end\nend\n\nif http.formvalue(\"wep\") == \"1\" then\n\tkey = m:field(Value, \"key\", translate(\"WEP passphrase\"),\n\t\ttranslate(\"Specify the secret encryption key here.\"))\n\n\tkey.password = true\n\tkey.datatype = \"wepkey\"\n\nelseif (tonumber(m.hidden.wpa_version) or 0) > 0 and\n\t(m.hidden.wpa_suites == \"PSK\" or m.hidden.wpa_suites == \"PSK2\")\nthen\n\tkey = m:field(Value, \"key\", translate(\"WPA passphrase\"),\n\t\ttranslate(\"Specify the secret encryption key here.\"))\n\n\tkey.password = true\n\tkey.datatype = \"wpakey\"\n\t--m.hidden.wpa_suite = (tonumber(http.formvalue(\"wpa_version\")) or 0) >= 2 and \"psk2\" or \"psk\"\nend\n\nnewnet = m:field(Value, \"_netname_new\", translate(\"Name of the new network\"),\n\ttranslate(\"The allowed characters are: <code>A-Z</code>, <code>a-z</code>, \" ..\n\t\t\"<code>0-9</code> and <code>_</code>\"\n\t))\n\nnewnet.default = m.hidden.mode == \"Ad-Hoc\" and \"mesh\" or \"wwan\"\nnewnet.datatype = \"uciname\"\n\nif has_firewall then\n\tfwzone = m:field(Value, \"_fwzone\",\n\t\ttranslate(\"Create / Assign firewall-zone\"),\n\t\ttranslate(\"Choose the firewall zone you want to assign to this interface. Select <em>unspecified</em> to remove the interface from the associated zone or fill out the <em>create</em> field to define a new zone and attach the interface to it.\"))\n\n\tfwzone.template = \"cbi/firewall_zonelist\"\n\tfwzone.default = m.hidden.mode == \"Ad-Hoc\" and \"mesh\" or \"wan\"\nend\n\nfunction newnet.parse(self, section)\n\tlocal net, zone\n\n\tif has_firewall then\n\t\tlocal value = fwzone:formvalue(section)\n\t\tif value and #value > 0 then\n\t\t\tzone = fw:get_zone(value) or fw:add_zone(value)\n\t\tend\n\tend\n\n\tlocal wdev = nw:get_wifidev(m.hidden.device)\n\n\twdev:set(\"disabled\", false)\n\twdev:set(\"channel\", m.hidden.channel)\n\n\tif replace:formvalue(section) then\n\t\tlocal n\n\t\tfor _, n in ipairs(wdev:get_wifinets()) do\n\t\t\twdev:del_wifinet(n)\n\t\tend\n\tend\n\n\tlocal wconf = {\n\t\tdevice  = m.hidden.device,\n\t\tssid    = m.hidden.join,\n\t\tmode    = (m.hidden.mode == \"Ad-Hoc\" and \"adhoc\" or \"sta\")\n\t}\n\n\tif m.hidden.wep == \"1\" then\n\t\twconf.encryption = \"wep-open\"\n\t\twconf.key        = \"1\"\n\t\twconf.key1       = key and key:formvalue(section) or \"\"\n\telseif (tonumber(m.hidden.wpa_version) or 0) > 0 then\n\t\twconf.encryption = (tonumber(m.hidden.wpa_version) or 0) >= 2 and \"psk2\" or \"psk\"\n\t\twconf.key        = key and key:formvalue(section) or \"\"\n\telse\n\t\twconf.encryption = \"none\"\n\tend\n\n\tif wconf.mode == \"adhoc\" or wconf.mode == \"sta\" then\n\t\twconf.bssid = m.hidden.bssid\n\tend\n\n\tlocal value = self:formvalue(section)\n\tnet = nw:add_network(value, { proto = \"dhcp\" })\n\n\tif not net then\n\t\tself.error = { [section] = \"missing\" }\n\telse\n\t\twconf.network = net:name()\n\n\t\tlocal wnet = wdev:add_wifinet(wconf)\n\t\tif wnet then\n\t\t\tif zone then\n\t\t\t\tfw:del_network(net:name())\n\t\t\t\tzone:add_network(net:name())\n\t\t\tend\n\n\t\t\tuci:save(\"wireless\")\n\t\t\tuci:save(\"network\")\n\t\t\tuci:save(\"firewall\")\n\n\t\t\tluci.http.redirect(wnet:adminlink())\n\t\tend\n\tend\nend\n\nif has_firewall then\n\tfunction fwzone.cfgvalue(self, section)\n\t\tself.iface = section\n\t\tlocal z = fw:get_zone_by_network(section)\n\t\treturn z and z:name()\n\tend\nend\n\nreturn m\n", "<%#\n Copyright 2010-2018 Jo-Philipp Wich <jo@mein.io>\n Licensed to the public under the Apache License 2.0.\n-%>\n\n<script type=\"text/javascript\">//<![CDATA[\n\tfunction iface_reconnect(id) {\n\t\tXHR.halt();\n\n\t\tvar d = document.getElementById(id + '-ifc-description');\n\t\tif (d) d.innerHTML = '<em><%:Interface is reconnecting...%></em>';\n\n\t\t(new XHR()).post('<%=url('admin/network/iface_reconnect')%>/' + id,\n\t\t\t{ token: '<%=token%>' }, XHR.run);\n\t}\n\n\tfunction iface_delete(ev) {\n\t\tif (!confirm(<%=luci.http.write_json(translate('Really delete this interface? The deletion cannot be undone! You might lose access to this device if you are connected via this interface'))%>)) {\n\t\t\tev.preventDefault();\n\t\t\treturn false;\n\t\t}\n\n\t\tev.target.previousElementSibling.value = '1';\n\t\treturn true;\n\t}\n\n\tvar networks = [];\n\n\tdocument.querySelectorAll('[data-network]').forEach(function(n) {\n\t\tnetworks.push(n.getAttribute('data-network'));\n\t});\n\n\tfunction render_iface(ifc) {\n\t\treturn E('span', { class: 'cbi-tooltip-container' }, [\n\t\t\tE('img', { 'class' : 'middle', 'src': '<%=resource%>/icons/%s%s.png'.format(\n\t\t\t\tifc.is_alias ? 'alias' : ifc.type,\n\t\t\t\tifc.is_up ? '' : '_disabled') }),\n\t\t\tE('span', { 'class': 'cbi-tooltip ifacebadge large' }, [\n\t\t\t\tE('img', { 'src': '<%=resource%>/icons/%s%s.png'.format(\n\t\t\t\t\tifc.type, ifc.is_up ? '' : '_disabled') }),\n\t\t\t\tE('span', { 'class': 'left' }, [\n\t\t\t\t\tE('strong', '<%:Type%>: '), ifc.typename, E('br'),\n\t\t\t\t\tE('strong', '<%:Device%>: '), ifc.ifname, E('br'),\n\t\t\t\t\tE('strong', '<%:Connected%>: '), ifc.is_up ? '<%:yes%>' : '<%:no%>', E('br'),\n\t\t\t\t\tifc.macaddr ? E('strong', '<%:MAC%>: ') : '',\n\t\t\t\t\tifc.macaddr ? ifc.macaddr : '',\n\t\t\t\t\tifc.macaddr ? E('br') : '',\n\t\t\t\t\tE('strong', '<%:RX%>: '), '%.2mB (%d <%:Pkts.%>)'.format(ifc.rx_bytes, ifc.rx_packets), E('br'),\n\t\t\t\t\tE('strong', '<%:TX%>: '), '%.2mB (%d <%:Pkts.%>)'.format(ifc.tx_bytes, ifc.tx_packets)\n\t\t\t\t])\n\t\t\t])\n\t\t]);\n\t}\n\n\tXHR.poll(5, '<%=url('admin/network/iface_status')%>/' + networks.join(','), null,\n\t\tfunction(x, ifcs)\n\t\t{\n\t\t\tif (ifcs)\n\t\t\t{\n\t\t\t\tfor (var idx = 0; idx < ifcs.length; idx++)\n\t\t\t\t{\n\t\t\t\t\tvar ifc = ifcs[idx];\n\t\t\t\t\tvar html = '';\n\n\t\t\t\t\tvar s = document.getElementById(ifc.id + '-ifc-devices');\n\t\t\t\t\tif (s)\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (s.firstChild)\n\t\t\t\t\t\t\ts.removeChild(s.firstChild);\n\n\t\t\t\t\t\ts.appendChild(render_iface(ifc));\n\n\t\t\t\t\t\tif (ifc.subdevices && ifc.subdevices.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sifs = [ ' (' ];\n\n\t\t\t\t\t\t\tfor (var j = 0; j < ifc.subdevices.length; j++)\n\t\t\t\t\t\t\t\tsifs.push(render_iface(ifc.subdevices[j]));\n\n\t\t\t\t\t\t\tsifs.push(')');\n\n\t\t\t\t\t\t\ts.appendChild(E('span', {}, sifs));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.appendChild(E('br'));\n\t\t\t\t\t\ts.appendChild(E('small', {}, [ ifc.is_alias ? '<%:Alias of \"%s\"%>'.format(ifc.is_alias) : ifc.name ]));\n\t\t\t\t\t}\n\n\t\t\t\t\tvar d = document.getElementById(ifc.id + '-ifc-description');\n\t\t\t\t\tif (d && ifc.proto && ifc.ifname)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar desc = null;\n\n\t\t\t\t\t\tif (ifc.is_dynamic)\n\t\t\t\t\t\t\tdesc = '<%:Virtual dynamic interface%>';\n\t\t\t\t\t\telse if (ifc.is_alias)\n\t\t\t\t\t\t\tdesc = '<%:Alias Interface%>';\n\n\t\t\t\t\t\tif (ifc.desc)\n\t\t\t\t\t\t\tdesc = desc ? '%s (%s)'.format(desc, ifc.desc) : ifc.desc;\n\n\t\t\t\t\t\thtml += String.format('<strong><%:Protocol%>:</strong> %h<br />', desc || '?');\n\n\t\t\t\t\t\tif (ifc.is_up)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thtml += String.format('<strong><%:Uptime%>:</strong> %t<br />', ifc.uptime);\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif (!ifc.is_dynamic && !ifc.is_alias)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (ifc.macaddr)\n\t\t\t\t\t\t\t\thtml += String.format('<strong><%:MAC%>:</strong> %s<br />', ifc.macaddr);\n\n\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t'<strong><%:RX%>:</strong> %.2mB (%d <%:Pkts.%>)<br />' +\n\t\t\t\t\t\t\t\t'<strong><%:TX%>:</strong> %.2mB (%d <%:Pkts.%>)<br />',\n\t\t\t\t\t\t\t\t\tifc.rx_bytes, ifc.rx_packets,\n\t\t\t\t\t\t\t\t\tifc.tx_bytes, ifc.tx_packets\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ifc.ipaddrs && ifc.ipaddrs.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < ifc.ipaddrs.length; i++)\n\t\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t\t'<strong><%:IPv4%>:</strong> %s<br />',\n\t\t\t\t\t\t\t\t\tifc.ipaddrs[i]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ifc.ip6addrs && ifc.ip6addrs.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < ifc.ip6addrs.length; i++)\n\t\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t\t'<strong><%:IPv6%>:</strong> %s<br />',\n\t\t\t\t\t\t\t\t\tifc.ip6addrs[i]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ifc.ip6prefix)\n\t\t\t\t\t\t\thtml += String.format('<strong><%:IPv6-PD%>:</strong> %s<br />', ifc.ip6prefix);\n\n\t\t\t\t\t\tif (ifc.errors)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < ifc.errors.length; i++)\n\t\t\t\t\t\t\t\thtml += String.format(\n\t\t\t\t\t\t\t\t\t'<em class=\"error\"><strong><%:Error%>:</strong> %h</em><br />',\n\t\t\t\t\t\t\t\t\tifc.errors[i]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\td.innerHTML = html;\n\t\t\t\t\t}\n\t\t\t\t\telse if (d && !ifc.proto)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = document.getElementById(ifc.id + '-ifc-edit');\n\t\t\t\t\t\tif (e)\n\t\t\t\t\t\t\te.disabled = true;\n\n\t\t\t\t\t\td.innerHTML = String.format(\n\t\t\t\t\t\t\t'<em><%:Unsupported protocol type.%></em><br />' +\n\t\t\t\t\t\t\t'<a href=\"%h\"><%:Install protocol extensions...%></a>',\n\t\t\t\t\t\t\t\t'<%=url(\"admin/system/packages\")%>?query=luci-proto&display=available'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse if (d && !ifc.ifname)\n\t\t\t\t\t{\n\t\t\t\t\t\td.innerHTML = String.format(\n\t\t\t\t\t\t\t'<em><%:Network without interfaces.%></em><br />' +\n\t\t\t\t\t\t\t'<a href=\"<%=url(\"admin/network/network/%s\")%>?tab.network.%s=physical\"><%:Assign interfaces...%></a>',\n\t\t\t\t\t\t\t\tifc.name, ifc.name\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse if (d)\n\t\t\t\t\t{\n\t\t\t\t\t\td.innerHTML = '<em><%:Interface not present or not connected yet.%></em>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n//]]></script>\n"], "filenames": ["modules/luci-mod-admin-full/luasrc/model/cbi/admin_network/wifi_add.lua", "modules/luci-mod-admin-full/luasrc/view/admin_network/iface_overview_status.htm"], "buggy_code_start_loc": [8, 86], "buggy_code_end_loc": [20, 87], "fixing_code_start_loc": [9, 86], "fixing_code_end_loc": [21, 87], "type": "CWE-79", "message": "LuCI in OpenWrt 18.06.0 through 18.06.4 allows stored XSS via a crafted SSID.", "other": {"cve": {"id": "CVE-2019-25015", "sourceIdentifier": "cve@mitre.org", "published": "2021-01-26T18:15:31.177", "lastModified": "2023-05-24T15:01:02.763", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LuCI in OpenWrt 18.06.0 through 18.06.4 allows stored XSS via a crafted SSID."}, {"lang": "es", "value": "LuCI en OpenWrt versiones 18.06.0 hasta 18.06.4, permite un ataque de tipo XSS almacenado por medio de un SSID dise\u00f1ado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:openwrt:openwrt:*:*:*:*:*:*:*:*", "versionStartIncluding": "18.06.0", "versionEndIncluding": "18.06.4", "matchCriteriaId": "4994B9A9-1F5C-422D-A31F-E0141F1E0DA2"}]}]}], "references": [{"url": "https://github.com/openwrt/luci/commit/bc17ef673f734ea8e7e696ba5735588da9111dcd", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://openwrt.org/advisory/2019-11-05-1", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/openwrt/luci/commit/bc17ef673f734ea8e7e696ba5735588da9111dcd"}}