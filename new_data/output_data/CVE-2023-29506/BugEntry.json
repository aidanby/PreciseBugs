{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.security.authentication.internal.resource;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.resource.AbstractResourceReferenceHandler;\nimport org.xwiki.resource.ResourceReference;\nimport org.xwiki.resource.ResourceReferenceHandlerChain;\nimport org.xwiki.resource.ResourceReferenceHandlerException;\nimport org.xwiki.resource.ResourceType;\nimport org.xwiki.security.authentication.AuthenticationResourceReference;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiContextInitializer;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * Default component to handle {@link AuthenticationResourceReference}.\n *\n * @version $Id$\n * @since 13.1RC1\n */\n@Component\n@Named(AuthenticationResourceReference.RESOURCE_TYPE_ID)\n@Singleton\npublic class AuthenticationResourceReferenceHandler extends AbstractResourceReferenceHandler<ResourceType>\n{\n    @Inject\n    private XWikiContextInitializer xWikiContextInitializer;\n\n    @Inject\n    private Execution execution;\n\n    @Override\n    public List<ResourceType> getSupportedResourceReferences()\n    {\n        return Collections.singletonList(AuthenticationResourceReference.TYPE);\n    }\n\n    @Override\n    public void handle(ResourceReference reference, ResourceReferenceHandlerChain chain)\n        throws ResourceReferenceHandlerException\n    {\n        AuthenticationResourceReference authenticationResourceReference = (AuthenticationResourceReference) reference;\n\n        switch (authenticationResourceReference.getAction()) {\n            case RETRIEVE_USERNAME:\n                this.handleAction(\"forgotusername\", authenticationResourceReference.getWikiReference());\n                break;\n\n            case RESET_PASSWORD:\n                this.handleAction(\"resetpassword\", authenticationResourceReference.getWikiReference());\n                break;\n\n            default:\n                // nothing to do here.\n        }\n\n        // Be a good citizen, continue the chain, in case some lower-priority Handler has something to do for this\n        // Resource Reference.\n        chain.handleNext(reference);\n    }\n\n    private void handleAction(String templateName, WikiReference wikiReference) throws ResourceReferenceHandlerException\n    {\n        ExecutionContext executionContext = this.execution.getContext();\n        if (executionContext == null) {\n            executionContext = new ExecutionContext();\n        }\n        WikiReference currentWiki = null;\n        XWikiContext context = null;\n        try {\n            context = this.xWikiContextInitializer.initialize(executionContext);\n            currentWiki = context.getWikiReference();\n            context.setWikiReference(wikiReference);\n            // We are directly relying on Utils#parseTemplate because we want the plugin manager to properly\n            // handle the javascript placeholders and it avoids duplicating code.\n            Utils.parseTemplate(templateName, true, context);\n        } catch (Exception e) {\n            throw new ResourceReferenceHandlerException(\n                String.format(\"Error while rendering template [%s]: [%s].\",\n                templateName, ExceptionUtils.getRootCauseMessage(e)), e);\n        } finally {\n            if (currentWiki != null) {\n                context.setWikiReference(currentWiki);\n            }\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.security.authentication.internal.resource;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\n\nimport javax.servlet.ServletOutputStream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.resource.ResourceReferenceHandlerChain;\nimport org.xwiki.security.authentication.AuthenticationAction;\nimport org.xwiki.security.authentication.AuthenticationResourceReference;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiContextInitializer;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.plugin.XWikiPluginManager;\nimport com.xpn.xwiki.web.XWikiResponse;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Tests for {@link AuthenticationResourceReferenceHandler}.\n *\n * @version $Id$\n * @since 13.0RC1\n */\n@ComponentTest\nclass AuthenticationResourceReferenceHandlerTest\n{\n    @InjectMockComponents\n    private AuthenticationResourceReferenceHandler resourceReferenceHandler;\n\n    @MockComponent\n    private XWikiContextInitializer xWikiContextInitializer;\n\n    @MockComponent\n    private Execution execution;\n\n    private XWikiResponse response;\n\n    private XWiki xwiki;\n\n    private XWikiContext context;\n\n    private ServletOutputStream servletOutputStream;\n\n    private WikiReference currentWiki;\n\n    @BeforeEach\n    void setup() throws XWikiException, IOException\n    {\n        ExecutionContext executionContext = mock(ExecutionContext.class);\n        when(this.execution.getContext()).thenReturn(executionContext);\n        this.context = mock(XWikiContext.class);\n        when(this.xWikiContextInitializer.initialize(executionContext)).thenReturn(context);\n        this.response = mock(XWikiResponse.class);\n        when(context.getResponse()).thenReturn(response);\n        this.xwiki = mock(XWiki.class);\n        when(context.getWiki()).thenReturn(xwiki);\n        when(this.xwiki.getEncoding()).thenReturn(\"UTF-8\");\n        XWikiPluginManager pluginManager = mock(XWikiPluginManager.class);\n        when(this.xwiki.getPluginManager()).thenReturn(pluginManager);\n        when(pluginManager.endParsing(any(), eq(context)))\n            .then(invocationOnMock -> invocationOnMock.getArgument(0));\n        this.servletOutputStream = mock(ServletOutputStream.class);\n        when(this.response.getOutputStream()).thenReturn(servletOutputStream);\n        currentWiki = new WikiReference(\"currentWiki\");\n        when(context.getWikiReference()).thenReturn(currentWiki);\n    }\n\n    @Test\n    void getSupportedResourceReferences()\n    {\n        assertEquals(Collections.singletonList(AuthenticationResourceReference.TYPE),\n            this.resourceReferenceHandler.getSupportedResourceReferences());\n    }\n\n    @Test\n    void handleResetPassword() throws Exception\n    {\n        WikiReference wikiReference = new WikiReference(\"foo\");\n        AuthenticationResourceReference resourceReference = new AuthenticationResourceReference(\n            wikiReference,\n            AuthenticationAction.RESET_PASSWORD);\n\n        when(this.xwiki.evaluateTemplate(\"resetpassword.vm\", context)).thenReturn(\"Reset password content\");\n\n        ResourceReferenceHandlerChain chain = mock(ResourceReferenceHandlerChain.class);\n        this.resourceReferenceHandler.handle(resourceReference, chain);\n\n        verify(response).setContentType(\"text/html; charset=UTF-8\");\n        verify(this.xWikiContextInitializer).initialize(any(ExecutionContext.class));\n        verify(servletOutputStream).write(\"Reset password content\".getBytes(StandardCharsets.UTF_8));\n        verify(chain).handleNext(resourceReference);\n        verify(context).setWikiReference(wikiReference);\n        verify(context).setWikiReference(currentWiki);\n    }\n\n    @Test\n    void handleForgotUsername() throws Exception\n    {\n        WikiReference wikiReference = new WikiReference(\"bar\");\n        AuthenticationResourceReference resourceReference = new AuthenticationResourceReference(\n            wikiReference,\n            AuthenticationAction.RETRIEVE_USERNAME);\n\n        when(this.xwiki.evaluateTemplate(\"forgotusername.vm\", context)).thenReturn(\"Forgot user name content\");\n\n        ResourceReferenceHandlerChain chain = mock(ResourceReferenceHandlerChain.class);\n        this.resourceReferenceHandler.handle(resourceReference, chain);\n\n        verify(response).setContentType(\"text/html; charset=UTF-8\");\n        verify(this.xWikiContextInitializer).initialize(any(ExecutionContext.class));\n        verify(servletOutputStream).write(\"Forgot user name content\".getBytes(StandardCharsets.UTF_8));\n        verify(chain).handleNext(resourceReference);\n        verify(context).setWikiReference(wikiReference);\n        verify(context).setWikiReference(currentWiki);\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.security.authentication.internal.resource;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.resource.AbstractResourceReferenceHandler;\nimport org.xwiki.resource.ResourceReference;\nimport org.xwiki.resource.ResourceReferenceHandlerChain;\nimport org.xwiki.resource.ResourceReferenceHandlerException;\nimport org.xwiki.resource.ResourceType;\nimport org.xwiki.security.authentication.AuthenticationResourceReference;\nimport org.xwiki.wiki.descriptor.WikiDescriptorManager;\nimport org.xwiki.wiki.manager.WikiManagerException;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiContextInitializer;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * Default component to handle {@link AuthenticationResourceReference}.\n *\n * @version $Id$\n * @since 13.1RC1\n */\n@Component\n@Named(AuthenticationResourceReference.RESOURCE_TYPE_ID)\n@Singleton\npublic class AuthenticationResourceReferenceHandler extends AbstractResourceReferenceHandler<ResourceType>\n{\n    @Inject\n    private XWikiContextInitializer xWikiContextInitializer;\n\n    @Inject\n    private Execution execution;\n\n    @Inject\n    private WikiDescriptorManager wikiDescriptorManager;\n\n    @Override\n    public List<ResourceType> getSupportedResourceReferences()\n    {\n        return Collections.singletonList(AuthenticationResourceReference.TYPE);\n    }\n\n    @Override\n    public void handle(ResourceReference reference, ResourceReferenceHandlerChain chain)\n        throws ResourceReferenceHandlerException\n    {\n        AuthenticationResourceReference authenticationResourceReference = (AuthenticationResourceReference) reference;\n\n        WikiReference wikiReference = authenticationResourceReference.getWikiReference();\n        try {\n            if (!this.wikiDescriptorManager.exists(wikiReference.getName())) {\n                throw new ResourceReferenceHandlerException(\n                    String.format(\"The wiki [%s] does not exist.\", wikiReference.getName()));\n            }\n        } catch (WikiManagerException e) {\n            throw new ResourceReferenceHandlerException(\n                String.format(\"Error when checking if wiki [%s] exists.\", wikiReference.getName()), e);\n        }\n\n        switch (authenticationResourceReference.getAction()) {\n            case RETRIEVE_USERNAME:\n                this.handleAction(\"forgotusername\", authenticationResourceReference.getWikiReference());\n                break;\n\n            case RESET_PASSWORD:\n                this.handleAction(\"resetpassword\", authenticationResourceReference.getWikiReference());\n                break;\n\n            default:\n                // nothing to do here.\n        }\n\n        // Be a good citizen, continue the chain, in case some lower-priority Handler has something to do for this\n        // Resource Reference.\n        chain.handleNext(reference);\n    }\n\n    private void handleAction(String templateName, WikiReference wikiReference) throws ResourceReferenceHandlerException\n    {\n        ExecutionContext executionContext = this.execution.getContext();\n        if (executionContext == null) {\n            executionContext = new ExecutionContext();\n        }\n        WikiReference currentWiki = null;\n        XWikiContext context = null;\n        try {\n            context = this.xWikiContextInitializer.initialize(executionContext);\n            currentWiki = context.getWikiReference();\n            context.setWikiReference(wikiReference);\n            // We are directly relying on Utils#parseTemplate because we want the plugin manager to properly\n            // handle the javascript placeholders and it avoids duplicating code.\n            Utils.parseTemplate(templateName, true, context);\n        } catch (Exception e) {\n            throw new ResourceReferenceHandlerException(\n                String.format(\"Error while rendering template [%s]: [%s].\",\n                templateName, ExceptionUtils.getRootCauseMessage(e)), e);\n        } finally {\n            if (currentWiki != null) {\n                context.setWikiReference(currentWiki);\n            }\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.security.authentication.internal.resource;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\n\nimport javax.servlet.ServletOutputStream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.resource.ResourceReferenceHandlerChain;\nimport org.xwiki.resource.ResourceReferenceHandlerException;\nimport org.xwiki.security.authentication.AuthenticationAction;\nimport org.xwiki.security.authentication.AuthenticationResourceReference;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.wiki.descriptor.WikiDescriptorManager;\nimport org.xwiki.wiki.manager.WikiManagerException;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiContextInitializer;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.plugin.XWikiPluginManager;\nimport com.xpn.xwiki.web.XWikiResponse;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Tests for {@link AuthenticationResourceReferenceHandler}.\n *\n * @version $Id$\n * @since 13.0RC1\n */\n@ComponentTest\nclass AuthenticationResourceReferenceHandlerTest\n{\n    @InjectMockComponents\n    private AuthenticationResourceReferenceHandler resourceReferenceHandler;\n\n    @MockComponent\n    private XWikiContextInitializer xWikiContextInitializer;\n\n    @MockComponent\n    private Execution execution;\n\n    @MockComponent\n    private WikiDescriptorManager wikiDescriptorManager;\n\n    private XWikiResponse response;\n\n    private XWiki xwiki;\n\n    private XWikiContext context;\n\n    private ServletOutputStream servletOutputStream;\n\n    private WikiReference currentWiki;\n\n    @BeforeEach\n    void setup() throws XWikiException, IOException\n    {\n        ExecutionContext executionContext = mock(ExecutionContext.class);\n        when(this.execution.getContext()).thenReturn(executionContext);\n        this.context = mock(XWikiContext.class);\n        when(this.xWikiContextInitializer.initialize(executionContext)).thenReturn(context);\n        this.response = mock(XWikiResponse.class);\n        when(context.getResponse()).thenReturn(response);\n        this.xwiki = mock(XWiki.class);\n        when(context.getWiki()).thenReturn(xwiki);\n        when(this.xwiki.getEncoding()).thenReturn(\"UTF-8\");\n        XWikiPluginManager pluginManager = mock(XWikiPluginManager.class);\n        when(this.xwiki.getPluginManager()).thenReturn(pluginManager);\n        when(pluginManager.endParsing(any(), eq(context)))\n            .then(invocationOnMock -> invocationOnMock.getArgument(0));\n        this.servletOutputStream = mock(ServletOutputStream.class);\n        when(this.response.getOutputStream()).thenReturn(servletOutputStream);\n        currentWiki = new WikiReference(\"currentWiki\");\n        when(context.getWikiReference()).thenReturn(currentWiki);\n    }\n\n    @Test\n    void getSupportedResourceReferences()\n    {\n        assertEquals(Collections.singletonList(AuthenticationResourceReference.TYPE),\n            this.resourceReferenceHandler.getSupportedResourceReferences());\n    }\n\n    @Test\n    void handleResetPassword() throws Exception\n    {\n        WikiReference wikiReference = new WikiReference(\"foo\");\n        when(this.wikiDescriptorManager.exists(\"foo\")).thenReturn(false);\n        AuthenticationResourceReference resourceReference = new AuthenticationResourceReference(\n            wikiReference,\n            AuthenticationAction.RESET_PASSWORD);\n\n        ResourceReferenceHandlerChain chain = mock(ResourceReferenceHandlerChain.class);\n        ResourceReferenceHandlerException exception =\n            assertThrows(ResourceReferenceHandlerException.class,\n                () -> this.resourceReferenceHandler.handle(resourceReference, chain));\n        assertEquals(\"The wiki [foo] does not exist.\", exception.getMessage());\n\n        when(this.wikiDescriptorManager.exists(\"foo\")).thenReturn(true);\n        when(this.xwiki.evaluateTemplate(\"resetpassword.vm\", context)).thenReturn(\"Reset password content\");\n        this.resourceReferenceHandler.handle(resourceReference, chain);\n\n        verify(response).setContentType(\"text/html; charset=UTF-8\");\n        verify(this.xWikiContextInitializer).initialize(any(ExecutionContext.class));\n        verify(servletOutputStream).write(\"Reset password content\".getBytes(StandardCharsets.UTF_8));\n        verify(chain).handleNext(resourceReference);\n        verify(context).setWikiReference(wikiReference);\n        verify(context).setWikiReference(currentWiki);\n    }\n\n    @Test\n    void handleForgotUsername() throws Exception\n    {\n        WikiReference wikiReference = new WikiReference(\"bar\");\n        when(this.wikiDescriptorManager.exists(\"bar\")).thenReturn(false);\n        AuthenticationResourceReference resourceReference = new AuthenticationResourceReference(\n            wikiReference,\n            AuthenticationAction.RETRIEVE_USERNAME);\n\n        ResourceReferenceHandlerChain chain = mock(ResourceReferenceHandlerChain.class);\n        ResourceReferenceHandlerException exception =\n            assertThrows(ResourceReferenceHandlerException.class,\n                () -> this.resourceReferenceHandler.handle(resourceReference, chain));\n        assertEquals(\"The wiki [bar] does not exist.\", exception.getMessage());\n\n        when(this.wikiDescriptorManager.exists(\"bar\")).thenReturn(true);\n        when(this.xwiki.evaluateTemplate(\"forgotusername.vm\", context)).thenReturn(\"Forgot user name content\");\n\n        this.resourceReferenceHandler.handle(resourceReference, chain);\n        verify(response).setContentType(\"text/html; charset=UTF-8\");\n        verify(this.xWikiContextInitializer).initialize(any(ExecutionContext.class));\n        verify(servletOutputStream).write(\"Forgot user name content\".getBytes(StandardCharsets.UTF_8));\n        verify(chain).handleNext(resourceReference);\n        verify(context).setWikiReference(wikiReference);\n        verify(context).setWikiReference(currentWiki);\n    }\n\n    @Test\n    void handleForgotUsernameWikiDescriptorError() throws Exception\n    {\n        WikiReference wikiReference = new WikiReference(\"bar\");\n        when(this.wikiDescriptorManager.exists(\"bar\")).thenThrow(new WikiManagerException(\"Cannot access wiki\"));\n        AuthenticationResourceReference resourceReference = new AuthenticationResourceReference(\n            wikiReference,\n            AuthenticationAction.RETRIEVE_USERNAME);\n\n        ResourceReferenceHandlerChain chain = mock(ResourceReferenceHandlerChain.class);\n        ResourceReferenceHandlerException exception =\n            assertThrows(ResourceReferenceHandlerException.class,\n                () -> this.resourceReferenceHandler.handle(resourceReference, chain));\n        assertEquals(\"Error when checking if wiki [bar] exists.\", exception.getMessage());\n    }\n}\n"], "filenames": ["xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/resource/AuthenticationResourceReferenceHandler.java", "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/resource/AuthenticationResourceReferenceHandlerTest.java"], "buggy_code_start_loc": [39, 33], "buggy_code_end_loc": [72, 151], "fixing_code_start_loc": [40, 34], "fixing_code_end_loc": [89, 187], "type": "CWE-79", "message": "XWiki Commons are technical libraries common to several other top level XWiki projects. It was possible to inject some code using the URL of authenticated endpoints. This problem has been patched on XWiki 13.10.11, 14.4.7 and 14.10.", "other": {"cve": {"id": "CVE-2023-29506", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-16T07:15:53.123", "lastModified": "2023-04-26T17:45:03.267", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Commons are technical libraries common to several other top level XWiki projects. It was possible to inject some code using the URL of authenticated endpoints. This problem has been patched on XWiki 13.10.11, 14.4.7 and 14.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "13.10.8", "versionEndExcluding": "13.10.11", "matchCriteriaId": "516F12E7-D5E3-4F83-A912-A03EDE466BB3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.4.3", "versionEndExcluding": "14.4.7", "matchCriteriaId": "A72B5F6F-9165-44C9-BD7D-F3EC62867BF4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:14.6:*:*:*:*:*:*:*", "matchCriteriaId": "7BFB8F4B-1392-445B-8FD8-5EFE2D2DDFBE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:14.10:rc1:*:*:*:*:*:*", "matchCriteriaId": "0EC7DC4E-E9FD-407B-B95F-6CBD1B5E08E0"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/1943ea26c967ef868fb5f67c487d98d97cba0380", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-jjm5-5v9v-7hx2", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20335", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/1943ea26c967ef868fb5f67c487d98d97cba0380"}}