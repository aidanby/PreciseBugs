{"buggy_code": ["<?php\n/**\n * WordPress Feed API\n *\n * Many of the functions used in here belong in The Loop, or The Loop for the\n * Feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.1.0\n */\n\n/**\n * RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @since 1.5.1\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n * @return string\n */\nfunction get_bloginfo_rss($show = '') {\n\t$info = strip_tags(get_bloginfo($show));\n\t/**\n\t * Filters the bloginfo for use in RSS feeds.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @see convert_chars()\n\t * @see get_bloginfo()\n\t *\n\t * @param string $info Converted string value of the blog information.\n\t * @param string $show The type of blog information to retrieve.\n\t */\n\treturn apply_filters( 'get_bloginfo_rss', convert_chars( $info ), $show );\n}\n\n/**\n * Display RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @since 0.71\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n */\nfunction bloginfo_rss($show = '') {\n\t/**\n\t * Filters the bloginfo for display in RSS feeds.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @see get_bloginfo()\n\t *\n\t * @param string $rss_container RSS container for the blog information.\n\t * @param string $show          The type of blog information to retrieve.\n\t */\n\techo apply_filters( 'bloginfo_rss', get_bloginfo_rss( $show ), $show );\n}\n\n/**\n * Retrieve the default feed.\n *\n * The default feed is 'rss2', unless a plugin changes it through the\n * {@see 'default_feed'} filter.\n *\n * @since 2.5.0\n *\n * @return string Default feed, or for example 'rss2', 'atom', etc.\n */\nfunction get_default_feed() {\n\t/**\n\t * Filters the default feed type.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $feed_type Type of default feed. Possible values include 'rss2', 'atom'.\n\t *                          Default 'rss2'.\n\t */\n\t$default_feed = apply_filters( 'default_feed', 'rss2' );\n\treturn 'rss' == $default_feed ? 'rss2' : $default_feed;\n}\n\n/**\n * Retrieve the blog title for the feed title.\n *\n * @since 2.2.0\n * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.\n *\n * @param string $deprecated Unused..\n * @return string The document title.\n */\nfunction get_wp_title_rss( $deprecated = '&#8211;' ) {\n\tif ( '&#8211;' !== $deprecated ) {\n\t\t/* translators: %s: 'document_title_separator' filter name */\n\t\t_deprecated_argument( __FUNCTION__, '4.4.0', sprintf( __( 'Use the %s filter instead.' ), '<code>document_title_separator</code>' ) );\n\t}\n\n\t/**\n\t * Filters the blog title for use as the feed title.\n\t *\n\t * @since 2.2.0\n\t * @since 4.4.0 The `$sep` parameter was deprecated and renamed to `$deprecated`.\n\t *\n\t * @param string $title      The current blog title.\n\t * @param string $deprecated Unused.\n\t */\n\treturn apply_filters( 'get_wp_title_rss', wp_get_document_title(), $deprecated );\n}\n\n/**\n * Display the blog title for display of the feed title.\n *\n * @since 2.2.0\n * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.\n *\n * @param string $deprecated Unused.\n */\nfunction wp_title_rss( $deprecated = '&#8211;' ) {\n\tif ( '&#8211;' !== $deprecated ) {\n\t\t/* translators: %s: 'document_title_separator' filter name */\n\t\t_deprecated_argument( __FUNCTION__, '4.4.0', sprintf( __( 'Use the %s filter instead.' ), '<code>document_title_separator</code>' ) );\n\t}\n\n\t/**\n\t * Filters the blog title for display of the feed title.\n\t *\n\t * @since 2.2.0\n\t * @since 4.4.0 The `$sep` parameter was deprecated and renamed to `$deprecated`.\n\t *\n\t * @see get_wp_title_rss()\n\t *\n\t * @param string $wp_title_rss The current blog title.\n\t * @param string $deprecated   Unused.\n\t */\n\techo apply_filters( 'wp_title_rss', get_wp_title_rss(), $deprecated );\n}\n\n/**\n * Retrieve the current post title for the feed.\n *\n * @since 2.0.0\n *\n * @return string Current post title.\n */\nfunction get_the_title_rss() {\n\t$title = get_the_title();\n\n\t/**\n\t * Filters the post title for use in a feed.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $title The current post title.\n\t */\n\t$title = apply_filters( 'the_title_rss', $title );\n\treturn $title;\n}\n\n/**\n * Display the post title in the feed.\n *\n * @since 0.71\n */\nfunction the_title_rss() {\n\techo get_the_title_rss();\n}\n\n/**\n * Retrieve the post content for feeds.\n *\n * @since 2.9.0\n * @see get_the_content()\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n * @return string The filtered content.\n */\nfunction get_the_content_feed($feed_type = null) {\n\tif ( !$feed_type )\n\t\t$feed_type = get_default_feed();\n\n\t/** This filter is documented in wp-includes/post-template.php */\n\t$content = apply_filters( 'the_content', get_the_content() );\n\t$content = str_replace(']]>', ']]&gt;', $content);\n\t/**\n\t * Filters the post content for use in feeds.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $content   The current post content.\n\t * @param string $feed_type Type of feed. Possible values include 'rss2', 'atom'.\n\t *                          Default 'rss2'.\n\t */\n\treturn apply_filters( 'the_content_feed', $content, $feed_type );\n}\n\n/**\n * Display the post content for feeds.\n *\n * @since 2.9.0\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n */\nfunction the_content_feed($feed_type = null) {\n\techo get_the_content_feed($feed_type);\n}\n\n/**\n * Display the post excerpt for the feed.\n *\n * @since 0.71\n */\nfunction the_excerpt_rss() {\n\t$output = get_the_excerpt();\n\t/**\n\t * Filters the post excerpt for a feed.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $output The current post excerpt.\n\t */\n\techo apply_filters( 'the_excerpt_rss', $output );\n}\n\n/**\n * Display the permalink to the post for use in feeds.\n *\n * @since 2.3.0\n */\nfunction the_permalink_rss() {\n\t/**\n\t * Filters the permalink to the post for use in feeds.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $post_permalink The current post permalink.\n\t */\n\techo esc_url( apply_filters( 'the_permalink_rss', get_permalink() ) );\n}\n\n/**\n * Outputs the link to the comments for the current post in an xml safe way\n *\n * @since 3.0.0\n * @return none\n */\nfunction comments_link_feed() {\n\t/**\n\t * Filters the comments permalink for the current post.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $comment_permalink The current comment permalink with\n\t *                                  '#comments' appended.\n\t */\n\techo esc_url( apply_filters( 'comments_link_feed', get_comments_link() ) );\n}\n\n/**\n * Display the feed GUID for the current comment.\n *\n * @since 2.5.0\n *\n * @param int|WP_Comment $comment_id Optional comment object or id. Defaults to global comment object.\n */\nfunction comment_guid($comment_id = null) {\n\techo esc_url( get_comment_guid($comment_id) );\n}\n\n/**\n * Retrieve the feed GUID for the current comment.\n *\n * @since 2.5.0\n *\n * @param int|WP_Comment $comment_id Optional comment object or id. Defaults to global comment object.\n * @return false|string false on failure or guid for comment on success.\n */\nfunction get_comment_guid($comment_id = null) {\n\t$comment = get_comment($comment_id);\n\n\tif ( !is_object($comment) )\n\t\treturn false;\n\n\treturn get_the_guid($comment->comment_post_ID) . '#comment-' . $comment->comment_ID;\n}\n\n/**\n * Display the link to the comments.\n *\n * @since 1.5.0\n * @since 4.4.0 Introduced the `$comment` argument.\n *\n * @param int|WP_Comment $comment Optional. Comment object or id. Defaults to global comment object.\n */\nfunction comment_link( $comment = null ) {\n\t/**\n\t * Filters the current comment's permalink.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @see get_comment_link()\n\t *\n\t * @param string $comment_permalink The current comment permalink.\n\t */\n\techo esc_url( apply_filters( 'comment_link', get_comment_link( $comment ) ) );\n}\n\n/**\n * Retrieve the current comment author for use in the feeds.\n *\n * @since 2.0.0\n *\n * @return string Comment Author\n */\nfunction get_comment_author_rss() {\n\t/**\n\t * Filters the current comment author for use in a feed.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @see get_comment_author()\n\t *\n\t * @param string $comment_author The current comment author.\n\t */\n\treturn apply_filters( 'comment_author_rss', get_comment_author() );\n}\n\n/**\n * Display the current comment author in the feed.\n *\n * @since 1.0.0\n */\nfunction comment_author_rss() {\n\techo get_comment_author_rss();\n}\n\n/**\n * Display the current comment content for use in the feeds.\n *\n * @since 1.0.0\n */\nfunction comment_text_rss() {\n\t$comment_text = get_comment_text();\n\t/**\n\t * Filters the current comment content for use in a feed.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $comment_text The content of the current comment.\n\t */\n\t$comment_text = apply_filters( 'comment_text_rss', $comment_text );\n\techo $comment_text;\n}\n\n/**\n * Retrieve all of the post categories, formatted for use in feeds.\n *\n * All of the categories for the current post in the feed loop, will be\n * retrieved and have feed markup added, so that they can easily be added to the\n * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds.\n *\n * @since 2.1.0\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n * @return string All of the post categories for displaying in the feed.\n */\nfunction get_the_category_rss($type = null) {\n\tif ( empty($type) )\n\t\t$type = get_default_feed();\n\t$categories = get_the_category();\n\t$tags = get_the_tags();\n\t$the_list = '';\n\t$cat_names = array();\n\n\t$filter = 'rss';\n\tif ( 'atom' == $type )\n\t\t$filter = 'raw';\n\n\tif ( !empty($categories) ) foreach ( (array) $categories as $category ) {\n\t\t$cat_names[] = sanitize_term_field('name', $category->name, $category->term_id, 'category', $filter);\n\t}\n\n\tif ( !empty($tags) ) foreach ( (array) $tags as $tag ) {\n\t\t$cat_names[] = sanitize_term_field('name', $tag->name, $tag->term_id, 'post_tag', $filter);\n\t}\n\n\t$cat_names = array_unique($cat_names);\n\n\tforeach ( $cat_names as $cat_name ) {\n\t\tif ( 'rdf' == $type )\n\t\t\t$the_list .= \"\\t\\t<dc:subject><![CDATA[$cat_name]]></dc:subject>\\n\";\n\t\telseif ( 'atom' == $type )\n\t\t\t$the_list .= sprintf( '<category scheme=\"%1$s\" term=\"%2$s\" />', esc_attr( get_bloginfo_rss( 'url' ) ), esc_attr( $cat_name ) );\n\t\telse\n\t\t\t$the_list .= \"\\t\\t<category><![CDATA[\" . @html_entity_decode( $cat_name, ENT_COMPAT, get_option('blog_charset') ) . \"]]></category>\\n\";\n\t}\n\n\t/**\n\t * Filters all of the post categories for display in a feed.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $the_list All of the RSS post categories.\n\t * @param string $type     Type of feed. Possible values include 'rss2', 'atom'.\n\t *                         Default 'rss2'.\n\t */\n\treturn apply_filters( 'the_category_rss', $the_list, $type );\n}\n\n/**\n * Display the post categories in the feed.\n *\n * @since 0.71\n * @see get_the_category_rss() For better explanation.\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n */\nfunction the_category_rss($type = null) {\n\techo get_the_category_rss($type);\n}\n\n/**\n * Display the HTML type based on the blog setting.\n *\n * The two possible values are either 'xhtml' or 'html'.\n *\n * @since 2.2.0\n */\nfunction html_type_rss() {\n\t$type = get_bloginfo('html_type');\n\tif (strpos($type, 'xhtml') !== false)\n\t\t$type = 'xhtml';\n\telse\n\t\t$type = 'html';\n\techo $type;\n}\n\n/**\n * Display the rss enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of enclosure HTML tag(s) with a URI and other\n * attributes.\n *\n * @since 1.5.0\n */\nfunction rss_enclosure() {\n\tif ( post_password_required() )\n\t\treturn;\n\n\tforeach ( (array) get_post_custom() as $key => $val) {\n\t\tif ($key == 'enclosure') {\n\t\t\tforeach ( (array) $val as $enc ) {\n\t\t\t\t$enclosure = explode(\"\\n\", $enc);\n\n\t\t\t\t// only get the first element, e.g. audio/mpeg from 'audio/mpeg mpga mp2 mp3'\n\t\t\t\t$t = preg_split('/[ \\t]/', trim($enclosure[2]) );\n\t\t\t\t$type = $t[0];\n\n\t\t\t\t/**\n\t\t\t\t * Filters the RSS enclosure HTML link tag for the current post.\n\t\t\t\t *\n\t\t\t\t * @since 2.2.0\n\t\t\t\t *\n\t\t\t\t * @param string $html_link_tag The HTML link tag with a URI and other attributes.\n\t\t\t\t */\n\t\t\t\techo apply_filters( 'rss_enclosure', '<enclosure url=\"' . trim( htmlspecialchars( $enclosure[0] ) ) . '\" length=\"' . trim( $enclosure[1] ) . '\" type=\"' . $type . '\" />' . \"\\n\" );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Display the atom enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of link HTML tag(s) with a URI and other attributes.\n *\n * @since 2.2.0\n */\nfunction atom_enclosure() {\n\tif ( post_password_required() )\n\t\treturn;\n\n\tforeach ( (array) get_post_custom() as $key => $val ) {\n\t\tif ($key == 'enclosure') {\n\t\t\tforeach ( (array) $val as $enc ) {\n\t\t\t\t$enclosure = explode(\"\\n\", $enc);\n\t\t\t\t/**\n\t\t\t\t * Filters the atom enclosure HTML link tag for the current post.\n\t\t\t\t *\n\t\t\t\t * @since 2.2.0\n\t\t\t\t *\n\t\t\t\t * @param string $html_link_tag The HTML link tag with a URI and other attributes.\n\t\t\t\t */\n\t\t\t\techo apply_filters( 'atom_enclosure', '<link href=\"' . trim( htmlspecialchars( $enclosure[0] ) ) . '\" rel=\"enclosure\" length=\"' . trim( $enclosure[1] ) . '\" type=\"' . trim( $enclosure[2] ) . '\" />' . \"\\n\" );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Determine the type of a string of data with the data formatted.\n *\n * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1.\n *\n * In the case of WordPress, text is defined as containing no markup,\n * xhtml is defined as \"well formed\", and html as tag soup (i.e., the rest).\n *\n * Container div tags are added to xhtml values, per section 3.1.1.3.\n *\n * @link http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rfc.section.3.1\n *\n * @since 2.5.0\n *\n * @param string $data Input string\n * @return array array(type, value)\n */\nfunction prep_atom_text_construct($data) {\n\tif (strpos($data, '<') === false && strpos($data, '&') === false) {\n\t\treturn array('text', $data);\n\t}\n\n\tif ( ! function_exists( 'xml_parser_create' ) ) {\n\t\ttrigger_error( __( \"PHP's XML extension is not available. Please contact your hosting provider to enable PHP's XML extension.\" ) );\n\n\t\treturn array( 'html', \"<![CDATA[$data]]>\" );\n\t}\n\n\t$parser = xml_parser_create();\n\txml_parse($parser, '<div>' . $data . '</div>', true);\n\t$code = xml_get_error_code($parser);\n\txml_parser_free($parser);\n\n\tif (!$code) {\n\t\tif (strpos($data, '<') === false) {\n\t\t\treturn array('text', $data);\n\t\t} else {\n\t\t\t$data = \"<div xmlns='http://www.w3.org/1999/xhtml'>$data</div>\";\n\t\t\treturn array('xhtml', $data);\n\t\t}\n\t}\n\n\tif (strpos($data, ']]>') === false) {\n\t\treturn array('html', \"<![CDATA[$data]]>\");\n\t} else {\n\t\treturn array('html', htmlspecialchars($data));\n\t}\n}\n\n/**\n * Displays Site Icon in atom feeds.\n *\n * @since 4.3.0\n *\n * @see get_site_icon_url()\n */\nfunction atom_site_icon() {\n\t$url = get_site_icon_url( 32 );\n\tif ( $url ) {\n\t\techo \"<icon>$url</icon>\\n\";\n\t}\n}\n\n/**\n * Displays Site Icon in RSS2.\n *\n * @since 4.3.0\n */\nfunction rss2_site_icon() {\n\t$rss_title = get_wp_title_rss();\n\tif ( empty( $rss_title ) ) {\n\t\t$rss_title = get_bloginfo_rss( 'name' );\n\t}\n\n\t$url = get_site_icon_url( 32 );\n\tif ( $url ) {\n\t\techo '\n<image>\n\t<url>' . convert_chars( $url ) . '</url>\n\t<title>' . $rss_title . '</title>\n\t<link>' . get_bloginfo_rss( 'url' ) . '</link>\n\t<width>32</width>\n\t<height>32</height>\n</image> ' . \"\\n\";\n\t}\n}\n\n/**\n * Display the link for the currently displayed feed in a XSS safe way.\n *\n * Generate a correct link for the atom:self element.\n *\n * @since 2.5.0\n */\nfunction self_link() {\n\t$host = @parse_url(home_url());\n\t/**\n\t * Filters the current feed URL.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @see set_url_scheme()\n\t * @see wp_unslash()\n\t *\n\t * @param string $feed_link The link for the feed with set URL scheme.\n\t */\n\techo esc_url( apply_filters( 'self_link', set_url_scheme( 'http://' . $host['host'] . wp_unslash( $_SERVER['REQUEST_URI'] ) ) ) );\n}\n\n/**\n * Return the content type for specified feed type.\n *\n * @since 2.8.0\n *\n * @param string $type Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.\n */\nfunction feed_content_type( $type = '' ) {\n\tif ( empty($type) )\n\t\t$type = get_default_feed();\n\n\t$types = array(\n\t\t'rss'      => 'application/rss+xml',\n\t\t'rss2'     => 'application/rss+xml',\n\t\t'rss-http' => 'text/xml',\n\t\t'atom'     => 'application/atom+xml',\n\t\t'rdf'      => 'application/rdf+xml'\n\t);\n\n\t$content_type = ( !empty($types[$type]) ) ? $types[$type] : 'application/octet-stream';\n\n\t/**\n\t * Filters the content type for a specific feed type.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $content_type Content type indicating the type of data that a feed contains.\n\t * @param string $type         Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.\n\t */\n\treturn apply_filters( 'feed_content_type', $content_type, $type );\n}\n\n/**\n * Build SimplePie object based on RSS or Atom feed from URL.\n *\n * @since 2.8.0\n *\n * @param mixed $url URL of feed to retrieve. If an array of URLs, the feeds are merged\n * using SimplePie's multifeed feature.\n * See also {@link \u200bhttp://simplepie.org/wiki/faq/typical_multifeed_gotchas}\n *\n * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success\n */\nfunction fetch_feed( $url ) {\n\tif ( ! class_exists( 'SimplePie', false ) ) {\n\t\trequire_once( ABSPATH . WPINC . '/class-simplepie.php' );\n\t}\n\n\trequire_once( ABSPATH . WPINC . '/class-wp-feed-cache.php' );\n\trequire_once( ABSPATH . WPINC . '/class-wp-feed-cache-transient.php' );\n\trequire_once( ABSPATH . WPINC . '/class-wp-simplepie-file.php' );\n\trequire_once( ABSPATH . WPINC . '/class-wp-simplepie-sanitize-kses.php' );\n\n\t$feed = new SimplePie();\n\n\t$feed->set_sanitize_class( 'WP_SimplePie_Sanitize_KSES' );\n\t// We must manually overwrite $feed->sanitize because SimplePie's\n\t// constructor sets it before we have a chance to set the sanitization class\n\t$feed->sanitize = new WP_SimplePie_Sanitize_KSES();\n\n\t$feed->set_cache_class( 'WP_Feed_Cache' );\n\t$feed->set_file_class( 'WP_SimplePie_File' );\n\n\t$feed->set_feed_url( $url );\n\t/** This filter is documented in wp-includes/class-wp-feed-cache-transient.php */\n\t$feed->set_cache_duration( apply_filters( 'wp_feed_cache_transient_lifetime', 12 * HOUR_IN_SECONDS, $url ) );\n\t/**\n\t * Fires just before processing the SimplePie feed object.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param object $feed SimplePie feed object (passed by reference).\n\t * @param mixed  $url  URL of feed to retrieve. If an array of URLs, the feeds are merged.\n\t */\n\tdo_action_ref_array( 'wp_feed_options', array( &$feed, $url ) );\n\t$feed->init();\n\t$feed->set_output_encoding( get_option( 'blog_charset' ) );\n\n\tif ( $feed->error() )\n\t\treturn new WP_Error( 'simplepie-error', $feed->error() );\n\n\treturn $feed;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0-alpha-42259';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20171116';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * WordPress Feed API\n *\n * Many of the functions used in here belong in The Loop, or The Loop for the\n * Feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.1.0\n */\n\n/**\n * RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @since 1.5.1\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n * @return string\n */\nfunction get_bloginfo_rss($show = '') {\n\t$info = strip_tags(get_bloginfo($show));\n\t/**\n\t * Filters the bloginfo for use in RSS feeds.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @see convert_chars()\n\t * @see get_bloginfo()\n\t *\n\t * @param string $info Converted string value of the blog information.\n\t * @param string $show The type of blog information to retrieve.\n\t */\n\treturn apply_filters( 'get_bloginfo_rss', convert_chars( $info ), $show );\n}\n\n/**\n * Display RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @since 0.71\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n */\nfunction bloginfo_rss($show = '') {\n\t/**\n\t * Filters the bloginfo for display in RSS feeds.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @see get_bloginfo()\n\t *\n\t * @param string $rss_container RSS container for the blog information.\n\t * @param string $show          The type of blog information to retrieve.\n\t */\n\techo apply_filters( 'bloginfo_rss', get_bloginfo_rss( $show ), $show );\n}\n\n/**\n * Retrieve the default feed.\n *\n * The default feed is 'rss2', unless a plugin changes it through the\n * {@see 'default_feed'} filter.\n *\n * @since 2.5.0\n *\n * @return string Default feed, or for example 'rss2', 'atom', etc.\n */\nfunction get_default_feed() {\n\t/**\n\t * Filters the default feed type.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $feed_type Type of default feed. Possible values include 'rss2', 'atom'.\n\t *                          Default 'rss2'.\n\t */\n\t$default_feed = apply_filters( 'default_feed', 'rss2' );\n\treturn 'rss' == $default_feed ? 'rss2' : $default_feed;\n}\n\n/**\n * Retrieve the blog title for the feed title.\n *\n * @since 2.2.0\n * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.\n *\n * @param string $deprecated Unused..\n * @return string The document title.\n */\nfunction get_wp_title_rss( $deprecated = '&#8211;' ) {\n\tif ( '&#8211;' !== $deprecated ) {\n\t\t/* translators: %s: 'document_title_separator' filter name */\n\t\t_deprecated_argument( __FUNCTION__, '4.4.0', sprintf( __( 'Use the %s filter instead.' ), '<code>document_title_separator</code>' ) );\n\t}\n\n\t/**\n\t * Filters the blog title for use as the feed title.\n\t *\n\t * @since 2.2.0\n\t * @since 4.4.0 The `$sep` parameter was deprecated and renamed to `$deprecated`.\n\t *\n\t * @param string $title      The current blog title.\n\t * @param string $deprecated Unused.\n\t */\n\treturn apply_filters( 'get_wp_title_rss', wp_get_document_title(), $deprecated );\n}\n\n/**\n * Display the blog title for display of the feed title.\n *\n * @since 2.2.0\n * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.\n *\n * @param string $deprecated Unused.\n */\nfunction wp_title_rss( $deprecated = '&#8211;' ) {\n\tif ( '&#8211;' !== $deprecated ) {\n\t\t/* translators: %s: 'document_title_separator' filter name */\n\t\t_deprecated_argument( __FUNCTION__, '4.4.0', sprintf( __( 'Use the %s filter instead.' ), '<code>document_title_separator</code>' ) );\n\t}\n\n\t/**\n\t * Filters the blog title for display of the feed title.\n\t *\n\t * @since 2.2.0\n\t * @since 4.4.0 The `$sep` parameter was deprecated and renamed to `$deprecated`.\n\t *\n\t * @see get_wp_title_rss()\n\t *\n\t * @param string $wp_title_rss The current blog title.\n\t * @param string $deprecated   Unused.\n\t */\n\techo apply_filters( 'wp_title_rss', get_wp_title_rss(), $deprecated );\n}\n\n/**\n * Retrieve the current post title for the feed.\n *\n * @since 2.0.0\n *\n * @return string Current post title.\n */\nfunction get_the_title_rss() {\n\t$title = get_the_title();\n\n\t/**\n\t * Filters the post title for use in a feed.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $title The current post title.\n\t */\n\t$title = apply_filters( 'the_title_rss', $title );\n\treturn $title;\n}\n\n/**\n * Display the post title in the feed.\n *\n * @since 0.71\n */\nfunction the_title_rss() {\n\techo get_the_title_rss();\n}\n\n/**\n * Retrieve the post content for feeds.\n *\n * @since 2.9.0\n * @see get_the_content()\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n * @return string The filtered content.\n */\nfunction get_the_content_feed($feed_type = null) {\n\tif ( !$feed_type )\n\t\t$feed_type = get_default_feed();\n\n\t/** This filter is documented in wp-includes/post-template.php */\n\t$content = apply_filters( 'the_content', get_the_content() );\n\t$content = str_replace(']]>', ']]&gt;', $content);\n\t/**\n\t * Filters the post content for use in feeds.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $content   The current post content.\n\t * @param string $feed_type Type of feed. Possible values include 'rss2', 'atom'.\n\t *                          Default 'rss2'.\n\t */\n\treturn apply_filters( 'the_content_feed', $content, $feed_type );\n}\n\n/**\n * Display the post content for feeds.\n *\n * @since 2.9.0\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n */\nfunction the_content_feed($feed_type = null) {\n\techo get_the_content_feed($feed_type);\n}\n\n/**\n * Display the post excerpt for the feed.\n *\n * @since 0.71\n */\nfunction the_excerpt_rss() {\n\t$output = get_the_excerpt();\n\t/**\n\t * Filters the post excerpt for a feed.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $output The current post excerpt.\n\t */\n\techo apply_filters( 'the_excerpt_rss', $output );\n}\n\n/**\n * Display the permalink to the post for use in feeds.\n *\n * @since 2.3.0\n */\nfunction the_permalink_rss() {\n\t/**\n\t * Filters the permalink to the post for use in feeds.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $post_permalink The current post permalink.\n\t */\n\techo esc_url( apply_filters( 'the_permalink_rss', get_permalink() ) );\n}\n\n/**\n * Outputs the link to the comments for the current post in an xml safe way\n *\n * @since 3.0.0\n * @return none\n */\nfunction comments_link_feed() {\n\t/**\n\t * Filters the comments permalink for the current post.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $comment_permalink The current comment permalink with\n\t *                                  '#comments' appended.\n\t */\n\techo esc_url( apply_filters( 'comments_link_feed', get_comments_link() ) );\n}\n\n/**\n * Display the feed GUID for the current comment.\n *\n * @since 2.5.0\n *\n * @param int|WP_Comment $comment_id Optional comment object or id. Defaults to global comment object.\n */\nfunction comment_guid($comment_id = null) {\n\techo esc_url( get_comment_guid($comment_id) );\n}\n\n/**\n * Retrieve the feed GUID for the current comment.\n *\n * @since 2.5.0\n *\n * @param int|WP_Comment $comment_id Optional comment object or id. Defaults to global comment object.\n * @return false|string false on failure or guid for comment on success.\n */\nfunction get_comment_guid($comment_id = null) {\n\t$comment = get_comment($comment_id);\n\n\tif ( !is_object($comment) )\n\t\treturn false;\n\n\treturn get_the_guid($comment->comment_post_ID) . '#comment-' . $comment->comment_ID;\n}\n\n/**\n * Display the link to the comments.\n *\n * @since 1.5.0\n * @since 4.4.0 Introduced the `$comment` argument.\n *\n * @param int|WP_Comment $comment Optional. Comment object or id. Defaults to global comment object.\n */\nfunction comment_link( $comment = null ) {\n\t/**\n\t * Filters the current comment's permalink.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @see get_comment_link()\n\t *\n\t * @param string $comment_permalink The current comment permalink.\n\t */\n\techo esc_url( apply_filters( 'comment_link', get_comment_link( $comment ) ) );\n}\n\n/**\n * Retrieve the current comment author for use in the feeds.\n *\n * @since 2.0.0\n *\n * @return string Comment Author\n */\nfunction get_comment_author_rss() {\n\t/**\n\t * Filters the current comment author for use in a feed.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @see get_comment_author()\n\t *\n\t * @param string $comment_author The current comment author.\n\t */\n\treturn apply_filters( 'comment_author_rss', get_comment_author() );\n}\n\n/**\n * Display the current comment author in the feed.\n *\n * @since 1.0.0\n */\nfunction comment_author_rss() {\n\techo get_comment_author_rss();\n}\n\n/**\n * Display the current comment content for use in the feeds.\n *\n * @since 1.0.0\n */\nfunction comment_text_rss() {\n\t$comment_text = get_comment_text();\n\t/**\n\t * Filters the current comment content for use in a feed.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $comment_text The content of the current comment.\n\t */\n\t$comment_text = apply_filters( 'comment_text_rss', $comment_text );\n\techo $comment_text;\n}\n\n/**\n * Retrieve all of the post categories, formatted for use in feeds.\n *\n * All of the categories for the current post in the feed loop, will be\n * retrieved and have feed markup added, so that they can easily be added to the\n * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds.\n *\n * @since 2.1.0\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n * @return string All of the post categories for displaying in the feed.\n */\nfunction get_the_category_rss($type = null) {\n\tif ( empty($type) )\n\t\t$type = get_default_feed();\n\t$categories = get_the_category();\n\t$tags = get_the_tags();\n\t$the_list = '';\n\t$cat_names = array();\n\n\t$filter = 'rss';\n\tif ( 'atom' == $type )\n\t\t$filter = 'raw';\n\n\tif ( !empty($categories) ) foreach ( (array) $categories as $category ) {\n\t\t$cat_names[] = sanitize_term_field('name', $category->name, $category->term_id, 'category', $filter);\n\t}\n\n\tif ( !empty($tags) ) foreach ( (array) $tags as $tag ) {\n\t\t$cat_names[] = sanitize_term_field('name', $tag->name, $tag->term_id, 'post_tag', $filter);\n\t}\n\n\t$cat_names = array_unique($cat_names);\n\n\tforeach ( $cat_names as $cat_name ) {\n\t\tif ( 'rdf' == $type )\n\t\t\t$the_list .= \"\\t\\t<dc:subject><![CDATA[$cat_name]]></dc:subject>\\n\";\n\t\telseif ( 'atom' == $type )\n\t\t\t$the_list .= sprintf( '<category scheme=\"%1$s\" term=\"%2$s\" />', esc_attr( get_bloginfo_rss( 'url' ) ), esc_attr( $cat_name ) );\n\t\telse\n\t\t\t$the_list .= \"\\t\\t<category><![CDATA[\" . @html_entity_decode( $cat_name, ENT_COMPAT, get_option('blog_charset') ) . \"]]></category>\\n\";\n\t}\n\n\t/**\n\t * Filters all of the post categories for display in a feed.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $the_list All of the RSS post categories.\n\t * @param string $type     Type of feed. Possible values include 'rss2', 'atom'.\n\t *                         Default 'rss2'.\n\t */\n\treturn apply_filters( 'the_category_rss', $the_list, $type );\n}\n\n/**\n * Display the post categories in the feed.\n *\n * @since 0.71\n * @see get_the_category_rss() For better explanation.\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n */\nfunction the_category_rss($type = null) {\n\techo get_the_category_rss($type);\n}\n\n/**\n * Display the HTML type based on the blog setting.\n *\n * The two possible values are either 'xhtml' or 'html'.\n *\n * @since 2.2.0\n */\nfunction html_type_rss() {\n\t$type = get_bloginfo('html_type');\n\tif (strpos($type, 'xhtml') !== false)\n\t\t$type = 'xhtml';\n\telse\n\t\t$type = 'html';\n\techo $type;\n}\n\n/**\n * Display the rss enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of enclosure HTML tag(s) with a URI and other\n * attributes.\n *\n * @since 1.5.0\n */\nfunction rss_enclosure() {\n\tif ( post_password_required() )\n\t\treturn;\n\n\tforeach ( (array) get_post_custom() as $key => $val) {\n\t\tif ($key == 'enclosure') {\n\t\t\tforeach ( (array) $val as $enc ) {\n\t\t\t\t$enclosure = explode(\"\\n\", $enc);\n\n\t\t\t\t// only get the first element, e.g. audio/mpeg from 'audio/mpeg mpga mp2 mp3'\n\t\t\t\t$t = preg_split('/[ \\t]/', trim($enclosure[2]) );\n\t\t\t\t$type = $t[0];\n\n\t\t\t\t/**\n\t\t\t\t * Filters the RSS enclosure HTML link tag for the current post.\n\t\t\t\t *\n\t\t\t\t * @since 2.2.0\n\t\t\t\t *\n\t\t\t\t * @param string $html_link_tag The HTML link tag with a URI and other attributes.\n\t\t\t\t */\n\t\t\t\techo apply_filters( 'rss_enclosure', '<enclosure url=\"' . esc_url( trim( $enclosure[0] ) ) . '\" length=\"' . absint( trim( $enclosure[1] ) ) . '\" type=\"' . esc_attr( $type ) . '\" />' . \"\\n\" );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Display the atom enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of link HTML tag(s) with a URI and other attributes.\n *\n * @since 2.2.0\n */\nfunction atom_enclosure() {\n\tif ( post_password_required() )\n\t\treturn;\n\n\tforeach ( (array) get_post_custom() as $key => $val ) {\n\t\tif ($key == 'enclosure') {\n\t\t\tforeach ( (array) $val as $enc ) {\n\t\t\t\t$enclosure = explode(\"\\n\", $enc);\n\t\t\t\t/**\n\t\t\t\t * Filters the atom enclosure HTML link tag for the current post.\n\t\t\t\t *\n\t\t\t\t * @since 2.2.0\n\t\t\t\t *\n\t\t\t\t * @param string $html_link_tag The HTML link tag with a URI and other attributes.\n\t\t\t\t */\n\t\t\t\techo apply_filters( 'atom_enclosure', '<link href=\"' . esc_url( trim( $enclosure[0] ) ) . '\" rel=\"enclosure\" length=\"' . absint( trim( $enclosure[1] ) ) . '\" type=\"' . esc_attr( trim( $enclosure[2] ) ) . '\" />' . \"\\n\" );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Determine the type of a string of data with the data formatted.\n *\n * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1.\n *\n * In the case of WordPress, text is defined as containing no markup,\n * xhtml is defined as \"well formed\", and html as tag soup (i.e., the rest).\n *\n * Container div tags are added to xhtml values, per section 3.1.1.3.\n *\n * @link http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rfc.section.3.1\n *\n * @since 2.5.0\n *\n * @param string $data Input string\n * @return array array(type, value)\n */\nfunction prep_atom_text_construct($data) {\n\tif (strpos($data, '<') === false && strpos($data, '&') === false) {\n\t\treturn array('text', $data);\n\t}\n\n\tif ( ! function_exists( 'xml_parser_create' ) ) {\n\t\ttrigger_error( __( \"PHP's XML extension is not available. Please contact your hosting provider to enable PHP's XML extension.\" ) );\n\n\t\treturn array( 'html', \"<![CDATA[$data]]>\" );\n\t}\n\n\t$parser = xml_parser_create();\n\txml_parse($parser, '<div>' . $data . '</div>', true);\n\t$code = xml_get_error_code($parser);\n\txml_parser_free($parser);\n\n\tif (!$code) {\n\t\tif (strpos($data, '<') === false) {\n\t\t\treturn array('text', $data);\n\t\t} else {\n\t\t\t$data = \"<div xmlns='http://www.w3.org/1999/xhtml'>$data</div>\";\n\t\t\treturn array('xhtml', $data);\n\t\t}\n\t}\n\n\tif (strpos($data, ']]>') === false) {\n\t\treturn array('html', \"<![CDATA[$data]]>\");\n\t} else {\n\t\treturn array('html', htmlspecialchars($data));\n\t}\n}\n\n/**\n * Displays Site Icon in atom feeds.\n *\n * @since 4.3.0\n *\n * @see get_site_icon_url()\n */\nfunction atom_site_icon() {\n\t$url = get_site_icon_url( 32 );\n\tif ( $url ) {\n\t\techo \"<icon>$url</icon>\\n\";\n\t}\n}\n\n/**\n * Displays Site Icon in RSS2.\n *\n * @since 4.3.0\n */\nfunction rss2_site_icon() {\n\t$rss_title = get_wp_title_rss();\n\tif ( empty( $rss_title ) ) {\n\t\t$rss_title = get_bloginfo_rss( 'name' );\n\t}\n\n\t$url = get_site_icon_url( 32 );\n\tif ( $url ) {\n\t\techo '\n<image>\n\t<url>' . convert_chars( $url ) . '</url>\n\t<title>' . $rss_title . '</title>\n\t<link>' . get_bloginfo_rss( 'url' ) . '</link>\n\t<width>32</width>\n\t<height>32</height>\n</image> ' . \"\\n\";\n\t}\n}\n\n/**\n * Display the link for the currently displayed feed in a XSS safe way.\n *\n * Generate a correct link for the atom:self element.\n *\n * @since 2.5.0\n */\nfunction self_link() {\n\t$host = @parse_url(home_url());\n\t/**\n\t * Filters the current feed URL.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @see set_url_scheme()\n\t * @see wp_unslash()\n\t *\n\t * @param string $feed_link The link for the feed with set URL scheme.\n\t */\n\techo esc_url( apply_filters( 'self_link', set_url_scheme( 'http://' . $host['host'] . wp_unslash( $_SERVER['REQUEST_URI'] ) ) ) );\n}\n\n/**\n * Return the content type for specified feed type.\n *\n * @since 2.8.0\n *\n * @param string $type Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.\n */\nfunction feed_content_type( $type = '' ) {\n\tif ( empty($type) )\n\t\t$type = get_default_feed();\n\n\t$types = array(\n\t\t'rss'      => 'application/rss+xml',\n\t\t'rss2'     => 'application/rss+xml',\n\t\t'rss-http' => 'text/xml',\n\t\t'atom'     => 'application/atom+xml',\n\t\t'rdf'      => 'application/rdf+xml'\n\t);\n\n\t$content_type = ( !empty($types[$type]) ) ? $types[$type] : 'application/octet-stream';\n\n\t/**\n\t * Filters the content type for a specific feed type.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $content_type Content type indicating the type of data that a feed contains.\n\t * @param string $type         Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.\n\t */\n\treturn apply_filters( 'feed_content_type', $content_type, $type );\n}\n\n/**\n * Build SimplePie object based on RSS or Atom feed from URL.\n *\n * @since 2.8.0\n *\n * @param mixed $url URL of feed to retrieve. If an array of URLs, the feeds are merged\n * using SimplePie's multifeed feature.\n * See also {@link \u200bhttp://simplepie.org/wiki/faq/typical_multifeed_gotchas}\n *\n * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success\n */\nfunction fetch_feed( $url ) {\n\tif ( ! class_exists( 'SimplePie', false ) ) {\n\t\trequire_once( ABSPATH . WPINC . '/class-simplepie.php' );\n\t}\n\n\trequire_once( ABSPATH . WPINC . '/class-wp-feed-cache.php' );\n\trequire_once( ABSPATH . WPINC . '/class-wp-feed-cache-transient.php' );\n\trequire_once( ABSPATH . WPINC . '/class-wp-simplepie-file.php' );\n\trequire_once( ABSPATH . WPINC . '/class-wp-simplepie-sanitize-kses.php' );\n\n\t$feed = new SimplePie();\n\n\t$feed->set_sanitize_class( 'WP_SimplePie_Sanitize_KSES' );\n\t// We must manually overwrite $feed->sanitize because SimplePie's\n\t// constructor sets it before we have a chance to set the sanitization class\n\t$feed->sanitize = new WP_SimplePie_Sanitize_KSES();\n\n\t$feed->set_cache_class( 'WP_Feed_Cache' );\n\t$feed->set_file_class( 'WP_SimplePie_File' );\n\n\t$feed->set_feed_url( $url );\n\t/** This filter is documented in wp-includes/class-wp-feed-cache-transient.php */\n\t$feed->set_cache_duration( apply_filters( 'wp_feed_cache_transient_lifetime', 12 * HOUR_IN_SECONDS, $url ) );\n\t/**\n\t * Fires just before processing the SimplePie feed object.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param object $feed SimplePie feed object (passed by reference).\n\t * @param mixed  $url  URL of feed to retrieve. If an array of URLs, the feeds are merged.\n\t */\n\tdo_action_ref_array( 'wp_feed_options', array( &$feed, $url ) );\n\t$feed->init();\n\t$feed->set_output_encoding( get_option( 'blog_charset' ) );\n\n\tif ( $feed->error() )\n\t\treturn new WP_Error( 'simplepie-error', $feed->error() );\n\n\treturn $feed;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0-alpha-42260';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20171116';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-includes/feed.php", "wp-includes/version.php"], "buggy_code_start_loc": [479, 7], "buggy_code_end_loc": [514, 8], "fixing_code_start_loc": [479, 7], "fixing_code_end_loc": [514, 8], "type": "CWE-79", "message": "wp-includes/feed.php in WordPress before 4.9.1 does not properly restrict enclosures in RSS and Atom fields, which might allow attackers to conduct XSS attacks via a crafted URL.", "other": {"cve": {"id": "CVE-2017-17094", "sourceIdentifier": "cve@mitre.org", "published": "2017-12-02T06:29:00.347", "lastModified": "2019-04-26T15:18:33.253", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "wp-includes/feed.php in WordPress before 4.9.1 does not properly restrict enclosures in RSS and Atom fields, which might allow attackers to conduct XSS attacks via a crafted URL."}, {"lang": "es", "value": "wp-includes/feed.php en WordPress en versiones anteriores a la 4.9.1 no restringe contenedores en los campos RSS y Atom, lo que puede permitir que los atacantes realicen ataques Cross-Site Scripting (XSS) mediante una URL manipulada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.9.1", "matchCriteriaId": "8FA2AAEC-F362-4B60-B814-F77AB2636E3A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/102024", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.9.1", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/f1de7e42df29395c3314bf85bff3d1f4f90541de", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2017/12/msg00019.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/11/wordpress-4-9-1-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8967", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://www.debian.org/security/2018/dsa-4090", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/f1de7e42df29395c3314bf85bff3d1f4f90541de"}}