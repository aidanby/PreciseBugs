{"buggy_code": ["(function(module) {\n\t\"use strict\";\n\n\tvar Comments = {};\n\n\tvar db = require.main.require('./src/database');\n\tvar meta = require.main.require('./src/meta');\n\tvar posts = require.main.require('./src/posts');\n\tvar topics = require.main.require('./src/topics');\n\tvar user = require.main.require('./src/user');\n\tvar groups = require.main.require('./src/groups');\n\tvar fs = module.parent.require('fs');\n\tvar path = module.parent.require('path');\n\tvar async = module.parent.require('async');\n\tvar winston = module.parent.require('winston');\n\tvar nconf = module.parent.require('nconf');\n\tvar relativePath = nconf.get('relative_path');\n\n\tmodule.exports = Comments;\n\n\tComments.getTopicIDByCommentID = function(commentID, callback) {\n\t\tdb.getObjectField('blog-comments', commentID, function(err, tid) {\n\t\t\tcallback(err, tid);\n\t\t});\n\t};\n\n\tComments.getCommentData = function(req, res, callback) {\n\t\tvar commentID = req.params.id,\n\t\t\tpagination = req.params.pagination ? req.params.pagination : 0,\n\t\t\tuid = req.user ? req.user.uid : 0;\n\n\t\tComments.getTopicIDByCommentID(commentID, function(err, tid) {\n\t\t\tvar disabled = false;\n\n\t\t\tasync.parallel({\n\t\t\t\tposts: function(next) {\n\t\t\t\t\tif (disabled) {\n\t\t\t\t\t\tnext(err, []);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttopics.getTopicPosts(tid, 'tid:' + tid + ':posts', 0 + req.params.pagination * 10, 9 + req.params.pagination * 9, uid, true, next);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpostCount: function(next) {\n\t\t\t\t\ttopics.getTopicField(tid, 'postcount', next);\n\t\t\t\t},\n\t\t\t\tuser: function(next) {\n\t\t\t\t\tuser.getUserData(uid, next);\n\t\t\t\t},\n\t\t\t\tisAdministrator: function(next) {\n\t\t\t\t\tuser.isAdministrator(uid, next);\n\t\t\t\t},\n\t\t\t\tisPublisher: function(next) {\n\t\t\t\t\tgroups.isMember(uid, 'publishers', next);\n\t\t\t\t},\n\t\t\t\tcategory: function(next) {\n\t\t\t\t\ttopics.getCategoryData(tid, next);\n\t\t\t\t},\n\t\t\t\tmainPost: function(next) {\n\t\t\t\t\ttopics.getMainPost(tid, uid, next);\n\t\t\t\t}\n\t\t\t}, function(err, data) {\n\t\t\t\tvar hostUrls = (meta.config['blog-comments:url'] || '').split(','),\n\t\t\t\t\turl;\n\n\t\t\t\thostUrls.forEach(function(hostUrl) {\n\t\t\t\t\thostUrl = hostUrl.trim();\n\t\t\t\t\tif (hostUrl[hostUrl.length - 1] === '/') {\n\t\t\t\t\t\thostUrl = hostUrl.substring(0, hostUrl.length - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hostUrl === req.get('origin')) {\n\t\t\t\t\t\turl = req.get('origin');\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!url) {\n\t\t\t\t\twinston.warn('[nodebb-plugin-blog-comments] Origin (' + req.get('origin') + ') does not match hostUrls: ' + hostUrls.join(', '));\n\t\t\t\t}\n\n\t\t\t\tres.header(\"Access-Control-Allow-Origin\", url);\n\t\t\t\tres.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n\t\t\t\tres.header(\"Access-Control-Allow-Credentials\", \"true\");\n\n\t\t\t\tvar posts = data.posts.filter(function(post) {\n\t\t\t\t\tif (post.user.picture) {\n\t\t\t\t\t\tpost.user.picture = post.user.picture.replace(relativePath, '');\n\t\t\t\t\t}\n\t\t\t\t\treturn !post.deleted;\n\t\t\t\t});\n\n\t\t\t\tif (data.user.picture) {\n\t\t\t\t\tdata.user.picture = data.user.picture.replace(relativePath, '');\n\t\t\t\t}\n\n\t\t\t\tvar top = true;\n\t\t\t\tvar bottom = false;\n\t\t\t\tvar compose_location = meta.config['blog-comments:compose-location'];\n\t\t\t\tif (compose_location == \"bottom\"){ bottom = true; top = false;}\n\n\t\t\t\tres.json({\n\t\t\t\t\tposts: posts,\n\t\t\t\t\tpostCount: data.postCount,\n\t\t\t\t\tuser: data.user,\n\t\t\t\t\ttemplate: Comments.template,\n\t\t\t\t\ttoken: req.csrfToken && req.csrfToken(),\n\t\t\t\t\tisAdmin: !data.isAdministrator ? data.isPublisher : data.isAdministrator,\n\t\t\t\t\tisLoggedIn: !!uid,\n\t\t\t\t\ttid: tid,\n\t\t\t\t\tcategory: data.category,\n\t\t\t\t\tmainPost: data.mainPost ? data.mainPost[0] : null,\n\t\t\t\t\tatBottom: bottom,\n\t\t\t\t\tatTop: top\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\tComments.replyToComment = function(req, res, callback) {\n\t\tvar content = req.body.content,\n\t\t\ttid = req.body.tid,\n\t\t\turl = req.body.url,\n\t\t\tuid = req.user ? req.user.uid : 0;\n\n\t\ttopics.reply({\n\t\t\ttid: tid,\n\t\t\tuid: uid,\n\t\t\tcontent: content,\n\t\t\treq: req,\n\t\t}, function(err, postData) {\n\t\t\tif(err) {\n\t\t\t\treturn res.redirect(url + '?error=' + err.message + '#nodebb-comments');\n\t\t\t}\n\n\t\t\tres.redirect(url + '#nodebb-comments');\n\t\t});\n\t};\n\n\tComments.publishArticle = function(req, res, callback) {\n\t\tvar markdown = req.body.markdown,\n\t\t\ttitle = req.body.title,\n\t\t\turl = req.body.url,\n\t\t\tcommentID = req.body.id,\n\t\t\ttags = req.body.tags,\n\t\t\tuid = req.user ? req.user.uid : 0,\n\t\t\tcid = JSON.parse(req.body.cid);\n\n\t\tif (cid === -1) {\n\t\t\tvar hostUrls = (meta.config['blog-comments:url'] || '').split(','),\n\t\t\t\tposition = 0;\n\n\t\t\thostUrls.forEach(function(hostUrl, i) {\n\t\t\t\thostUrl = hostUrl.trim();\n\t\t\t\tif (hostUrl[hostUrl.length - 1] === '/') {\n\t\t\t\t\thostUrl = hostUrl.substring(0, hostUrl.length - 1);\n\t\t\t\t}\n\n\t\t\t\tif (hostUrl === req.get('origin')) {\n\t\t\t\t\tposition = i;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcid = meta.config['blog-comments:cid'].toString() || '';\n\t\t\tcid = parseInt(cid.split(',')[position], 10) || parseInt(cid.split(',')[0], 10) || 1;\n\t\t}\n\n\t\tasync.parallel({\n\t\t\tisAdministrator: function(next) {\n\t\t\t\tuser.isAdministrator(uid, next);\n\t\t\t},\n\t\t\tisPublisher: function(next) {\n\t\t\t\tgroups.isMember(uid, 'publishers', next);\n\t\t\t}\n\t\t}, function(err, userStatus) {\n\t\t\tif (!userStatus.isAdministrator && !userStatus.isPublisher) {\n\t\t\t\treturn res.json({error: \"Only Administrators or members of the publishers group can publish articles\"});\n\t\t\t}\n\n\t\t\ttopics.post({\n\t\t\t\tuid: uid,\n\t\t\t\ttitle: title,\n\t\t\t\tcontent: markdown,\n\t\t\t\ttags: tags ? JSON.parse(tags) : [],\n\t\t\t\treq: req,\n\t\t\t\tcid: cid\n\t\t\t}, function(err, result) {\n\t\t\t\tif (!err && result && result.postData && result.postData.tid) {\n\t\t\t\t\tposts.setPostField(result.postData.pid, 'blog-comments:url', url, function(err) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn res.json({error: \"Unable to post topic\", result: result});\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tdb.setObjectField('blog-comments', commentID, result.postData.tid);\n\t\t\t\t\t\tres.redirect((req.header('Referer') || '/') + '#nodebb-comments');\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tres.json({error: \"Unable to post topic\", result: result});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t};\n\n\tComments.addLinkbackToArticle = function(post, callback) {\n\t\tvar hostUrls = (meta.config['blog-comments:url'] || '').split(','),\n\t\t\tposition;\n\n\t\tposts.getPostField(post.pid, 'blog-comments:url', function(err, url) {\n\t\t\tif (url) {\n\t\t\t\thostUrls.forEach(function(hostUrl, i) {\n\t\t\t\t\tif (url.indexOf(hostUrl.trim().replace(/^https?:\\/\\//, '')) !== -1) {\n\t\t\t\t\t\tposition = i;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tvar blogName = (meta.config['blog-comments:name'] || '');\n\t\t\t\tblogName = parseInt(blogName.split(',')[position], 10) || parseInt(blogName.split(',')[0], 10) || 1;\n\n\t\t\t\tpost.profile.push({\n\t\t\t\t\tcontent: \"Posted from <strong><a href=\"+ url +\" target='blank'>\" + blogName + \"</a></strong>\"\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcallback(err, post);\n\t\t});\n\t};\n\n\tComments.addAdminLink = function(custom_header, callback) {\n\t\tcustom_header.plugins.push({\n\t\t\t\"route\": \"/blog-comments\",\n\t\t\t\"icon\": \"fa-book\",\n\t\t\t\"name\": \"Blog Comments\"\n\t\t});\n\n\t\tcallback(null, custom_header);\n\t};\n\n\tfunction renderAdmin(req, res, callback) {\n\t\tres.render('comments/admin', {});\n\t}\n\n\tComments.init = function(params, callback) {\n\t\tvar app = params.router,\n\t\t\tmiddleware = params.middleware,\n\t\t\tcontrollers = params.controllers;\n\t\t\t\n\t\tfs.readFile(path.resolve(__dirname, './public/templates/comments/comments.tpl'), function (err, data) {\n\t\t\tComments.template = data.toString();\n\t\t});\n\n\t\tapp.get('/comments/get/:id/:pagination?', middleware.applyCSRF, Comments.getCommentData);\n\t\tapp.post('/comments/reply', Comments.replyToComment);\n\t\tapp.post('/comments/publish', Comments.publishArticle);\n\n\t\tapp.get('/admin/blog-comments', middleware.admin.buildHeader, renderAdmin);\n\t\tapp.get('/api/admin/blog-comments', renderAdmin);\n\n\t\tcallback();\n\t};\n\n}(module));\n"], "fixing_code": ["(function(module) {\n\t\"use strict\";\n\n\tvar Comments = {};\n\n\tvar db = require.main.require('./src/database');\n\tvar meta = require.main.require('./src/meta');\n\tvar posts = require.main.require('./src/posts');\n\tvar topics = require.main.require('./src/topics');\n\tvar user = require.main.require('./src/user');\n\tvar groups = require.main.require('./src/groups');\n\tvar fs = module.parent.require('fs');\n\tvar path = module.parent.require('path');\n\tvar async = module.parent.require('async');\n\tvar winston = module.parent.require('winston');\n\tvar nconf = module.parent.require('nconf');\n\tvar relativePath = nconf.get('relative_path');\n\n\tmodule.exports = Comments;\n\n\tComments.getTopicIDByCommentID = function(commentID, callback) {\n\t\tdb.getObjectField('blog-comments', commentID, function(err, tid) {\n\t\t\tcallback(err, tid);\n\t\t});\n\t};\n\n\tComments.getCommentData = function(req, res, callback) {\n\t\tvar commentID = req.params.id,\n\t\t\tpagination = req.params.pagination ? req.params.pagination : 0,\n\t\t\tuid = req.user ? req.user.uid : 0;\n\n\t\tComments.getTopicIDByCommentID(commentID, function(err, tid) {\n\t\t\tvar disabled = false;\n\n\t\t\tasync.parallel({\n\t\t\t\tposts: function(next) {\n\t\t\t\t\tif (disabled) {\n\t\t\t\t\t\tnext(err, []);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttopics.getTopicPosts(tid, 'tid:' + tid + ':posts', 0 + req.params.pagination * 10, 9 + req.params.pagination * 9, uid, true, next);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpostCount: function(next) {\n\t\t\t\t\ttopics.getTopicField(tid, 'postcount', next);\n\t\t\t\t},\n\t\t\t\tuser: function(next) {\n\t\t\t\t\tuser.getUserData(uid, next);\n\t\t\t\t},\n\t\t\t\tisAdministrator: function(next) {\n\t\t\t\t\tuser.isAdministrator(uid, next);\n\t\t\t\t},\n\t\t\t\tisPublisher: function(next) {\n\t\t\t\t\tgroups.isMember(uid, 'publishers', next);\n\t\t\t\t},\n\t\t\t\tcategory: function(next) {\n\t\t\t\t\ttopics.getCategoryData(tid, next);\n\t\t\t\t},\n\t\t\t\tmainPost: function(next) {\n\t\t\t\t\ttopics.getMainPost(tid, uid, next);\n\t\t\t\t}\n\t\t\t}, function(err, data) {\n\t\t\t\tvar hostUrls = (meta.config['blog-comments:url'] || '').split(','),\n\t\t\t\t\turl;\n\n\t\t\t\thostUrls.forEach(function(hostUrl) {\n\t\t\t\t\thostUrl = hostUrl.trim();\n\t\t\t\t\tif (hostUrl[hostUrl.length - 1] === '/') {\n\t\t\t\t\t\thostUrl = hostUrl.substring(0, hostUrl.length - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hostUrl === req.get('origin')) {\n\t\t\t\t\t\turl = req.get('origin');\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!url) {\n\t\t\t\t\twinston.warn('[nodebb-plugin-blog-comments] Origin (' + req.get('origin') + ') does not match hostUrls: ' + hostUrls.join(', '));\n\t\t\t\t}\n\n\t\t\t\tres.header(\"Access-Control-Allow-Origin\", url);\n\t\t\t\tres.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n\t\t\t\tres.header(\"Access-Control-Allow-Credentials\", \"true\");\n\n\t\t\t\tvar posts = data.posts.filter(function(post) {\n\t\t\t\t\tif (post.user.picture) {\n\t\t\t\t\t\tpost.user.picture = post.user.picture.replace(relativePath, '');\n\t\t\t\t\t}\n\t\t\t\t\treturn !post.deleted;\n\t\t\t\t});\n\n\t\t\t\tif (data.user.picture) {\n\t\t\t\t\tdata.user.picture = data.user.picture.replace(relativePath, '');\n\t\t\t\t}\n\n\t\t\t\tvar top = true;\n\t\t\t\tvar bottom = false;\n\t\t\t\tvar compose_location = meta.config['blog-comments:compose-location'];\n\t\t\t\tif (compose_location == \"bottom\"){ bottom = true; top = false;}\n\n\t\t\t\tres.json({\n\t\t\t\t\tposts: posts,\n\t\t\t\t\tpostCount: data.postCount,\n\t\t\t\t\tuser: data.user,\n\t\t\t\t\ttemplate: Comments.template,\n\t\t\t\t\ttoken: req.csrfToken && req.csrfToken(),\n\t\t\t\t\tisAdmin: !data.isAdministrator ? data.isPublisher : data.isAdministrator,\n\t\t\t\t\tisLoggedIn: !!uid,\n\t\t\t\t\ttid: tid,\n\t\t\t\t\tcategory: data.category,\n\t\t\t\t\tmainPost: data.mainPost ? data.mainPost[0] : null,\n\t\t\t\t\tatBottom: bottom,\n\t\t\t\t\tatTop: top\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\tComments.replyToComment = function(req, res, callback) {\n\t\tvar content = req.body.content,\n\t\t\ttid = req.body.tid,\n\t\t\turl = req.body.url,\n\t\t\tuid = req.user ? req.user.uid : 0;\n\n\t\ttopics.reply({\n\t\t\ttid: tid,\n\t\t\tuid: uid,\n\t\t\tcontent: content,\n\t\t\treq: req,\n\t\t}, function(err, postData) {\n\t\t\tif(err) {\n\t\t\t\treturn res.redirect(url + '?error=' + err.message + '#nodebb-comments');\n\t\t\t}\n\n\t\t\tres.redirect(url + '#nodebb-comments');\n\t\t});\n\t};\n\n\tComments.publishArticle = function(req, res, callback) {\n\t\tvar markdown = req.body.markdown,\n\t\t\ttitle = req.body.title,\n\t\t\turl = req.body.url,\n\t\t\tcommentID = req.body.id,\n\t\t\ttags = req.body.tags,\n\t\t\tuid = req.user ? req.user.uid : 0,\n\t\t\tcid = JSON.parse(req.body.cid);\n\n\t\tif (cid === -1) {\n\t\t\tvar hostUrls = (meta.config['blog-comments:url'] || '').split(','),\n\t\t\t\tposition = 0;\n\n\t\t\thostUrls.forEach(function(hostUrl, i) {\n\t\t\t\thostUrl = hostUrl.trim();\n\t\t\t\tif (hostUrl[hostUrl.length - 1] === '/') {\n\t\t\t\t\thostUrl = hostUrl.substring(0, hostUrl.length - 1);\n\t\t\t\t}\n\n\t\t\t\tif (hostUrl === req.get('origin')) {\n\t\t\t\t\tposition = i;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcid = meta.config['blog-comments:cid'].toString() || '';\n\t\t\tcid = parseInt(cid.split(',')[position], 10) || parseInt(cid.split(',')[0], 10) || 1;\n\t\t}\n\n\t\tasync.parallel({\n\t\t\tisAdministrator: function(next) {\n\t\t\t\tuser.isAdministrator(uid, next);\n\t\t\t},\n\t\t\tisPublisher: function(next) {\n\t\t\t\tgroups.isMember(uid, 'publishers', next);\n\t\t\t}\n\t\t}, function(err, userStatus) {\n\t\t\tif (!userStatus.isAdministrator && !userStatus.isPublisher) {\n\t\t\t\treturn res.json({error: \"Only Administrators or members of the publishers group can publish articles\"});\n\t\t\t}\n\n\t\t\ttopics.post({\n\t\t\t\tuid: uid,\n\t\t\t\ttitle: title,\n\t\t\t\tcontent: markdown,\n\t\t\t\ttags: tags ? JSON.parse(tags) : [],\n\t\t\t\treq: req,\n\t\t\t\tcid: cid\n\t\t\t}, function(err, result) {\n\t\t\t\tif (!err && result && result.postData && result.postData.tid) {\n\t\t\t\t\tposts.setPostField(result.postData.pid, 'blog-comments:url', url, function(err) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn res.json({error: \"Unable to post topic\", result: result});\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tdb.setObjectField('blog-comments', commentID, result.postData.tid);\n\t\t\t\t\t\tres.redirect((req.header('Referer') || '/') + '#nodebb-comments');\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tres.json({error: \"Unable to post topic\", result: result});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t};\n\n\tComments.addLinkbackToArticle = function(post, callback) {\n\t\tvar hostUrls = (meta.config['blog-comments:url'] || '').split(','),\n\t\t\tposition;\n\n\t\tposts.getPostField(post.pid, 'blog-comments:url', function(err, url) {\n\t\t\tif (url) {\n\t\t\t\thostUrls.forEach(function(hostUrl, i) {\n\t\t\t\t\tif (url.indexOf(hostUrl.trim().replace(/^https?:\\/\\//, '')) !== -1) {\n\t\t\t\t\t\tposition = i;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tvar blogName = (meta.config['blog-comments:name'] || '');\n\t\t\t\tblogName = parseInt(blogName.split(',')[position], 10) || parseInt(blogName.split(',')[0], 10) || 1;\n\n\t\t\t\tpost.profile.push({\n\t\t\t\t\tcontent: \"Posted from <strong><a href=\"+ url +\" target='blank'>\" + blogName + \"</a></strong>\"\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcallback(err, post);\n\t\t});\n\t};\n\n\tComments.addAdminLink = function(custom_header, callback) {\n\t\tcustom_header.plugins.push({\n\t\t\t\"route\": \"/blog-comments\",\n\t\t\t\"icon\": \"fa-book\",\n\t\t\t\"name\": \"Blog Comments\"\n\t\t});\n\n\t\tcallback(null, custom_header);\n\t};\n\n\tfunction renderAdmin(req, res, callback) {\n\t\tres.render('comments/admin', {});\n\t}\n\n\tComments.init = function(params, callback) {\n\t\tvar app = params.router,\n\t\t\tmiddleware = params.middleware,\n\t\t\tcontrollers = params.controllers;\n\t\t\t\n\t\tfs.readFile(path.resolve(__dirname, './public/templates/comments/comments.tpl'), function (err, data) {\n\t\t\tComments.template = data.toString();\n\t\t});\n\n\t\tapp.get('/comments/get/:id/:pagination?', middleware.applyCSRF, Comments.getCommentData);\n\t\tapp.post('/comments/reply', middleware.applyCSRF, Comments.replyToComment);\n\t\tapp.post('/comments/publish', middleware.applyCSRF, Comments.publishArticle);\n\n\t\tapp.get('/admin/blog-comments', middleware.admin.buildHeader, renderAdmin);\n\t\tapp.get('/api/admin/blog-comments', renderAdmin);\n\n\t\tcallback();\n\t};\n\n}(module));\n"], "filenames": ["library.js"], "buggy_code_start_loc": [251], "buggy_code_end_loc": [253], "fixing_code_start_loc": [251], "fixing_code_end_loc": [253], "type": "CWE-352", "message": "In nodebb-plugin-blog-comments before version 0.7.0, a logged in user is vulnerable to an XSS attack which could allow a third party to post on their behalf on the forum. This is due to lack of CSRF validation.", "other": {"cve": {"id": "CVE-2020-15156", "sourceIdentifier": "security-advisories@github.com", "published": "2020-08-26T19:15:14.377", "lastModified": "2020-09-01T17:41:57.497", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In nodebb-plugin-blog-comments before version 0.7.0, a logged in user is vulnerable to an XSS attack which could allow a third party to post on their behalf on the forum. This is due to lack of CSRF validation."}, {"lang": "es", "value": "En nodebb-plugin-blog-comments versiones anteriores a 0.7.0, un usuario registrado es vulnerable a un ataque de tipo XSS que podr\u00eda permitir a un tercero publicar en su nombre en el foro. Esto es debido a una falta de comprobaci\u00f3n de CSRF"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nodebb:blog_comments:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.7.0", "matchCriteriaId": "46F96843-0FDB-4AD7-9E41-839A1EA503EF"}]}]}], "references": [{"url": "https://github.com/psychobunny/nodebb-plugin-blog-comments/commit/cf43beedb05131937ef46f365ab0a0c6fa6ac618", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/psychobunny/nodebb-plugin-blog-comments/security/advisories/GHSA-43m5-c88r-cjvv", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/nodebb-plugin-blog-comments", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/psychobunny/nodebb-plugin-blog-comments/commit/cf43beedb05131937ef46f365ab0a0c6fa6ac618"}}