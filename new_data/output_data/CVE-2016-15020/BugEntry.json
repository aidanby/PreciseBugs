{"buggy_code": ["<?php\n\n\t/*\n\t *\n\t *\tLiftKit MVC PHP Framework\n\t *\n\t *\n\t */\n\n\n\tnamespace LiftKit\\Database\\Query;\n\n\tuse LiftKit\\Database\\Connection\\Connection as Database;\n\tuse LiftKit\\Database\\Query\\Exception\\Query as QueryBuilderException;\n\tuse LiftKit\\Database\\Query\\Condition\\Condition as DatabaseQueryCondition;\n\tuse LiftKit\\Database\\Result\\Result as DatabaseResult;\n\n\tuse LiftKit\\Database\\Query\\Raw\\Raw;\n\tuse LiftKit\\Database\\Query\\Join\\Join;\n\n\n\t/**\n\t * Class Query\n\t *\n\t * @package LiftKit\\Database\\Query\n\t *\n\t * @method $this whereEqual(mixed $compare, mixed $against)\n\t * @method $this orWhereEqual(mixed $compare, mixed $against)\n\t * @method $this whereNotEqual(mixed $compare, mixed $against)\n\t * @method $this orWhereNotEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereLessThan(mixed $compare, mixed $against)\n\t * @method $this orWhereLessThan(mixed $compare, mixed $against)\n\t * @method $this whereLessThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereGreaterThan(mixed $compare, mixed $against)\n\t * @method $this orWhereGreaterThan(mixed $compare, mixed $against)\n\t * @method $this whereGreaterThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereIn(mixed $needle, mixed $haystack)\n\t * @method $this orWhereIn(mixed $needle, mixed $haystack)\n\t * @method $this whereNotIn(mixed $needle, mixed $haystack)\n\t * @method $this orWhereNotIn(mixed $needle, mixed $haystack)\n\t *\n\t * @method $this whereIs(mixed $compare, mixed $against)\n\t * @method $this orWhereIs(mixed $compare, mixed $against)\n\t * @method $this whereNotIs(mixed $compare, mixed $against)\n\t * @method $this orWhereNotIs(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereLike(mixed $compare, string $expression)\n\t * @method $this orWhereLike(mixed $compare, string $expression)\n\t * @method $this whereNotLike(mixed $compare, string $expression)\n\t * @method $this orWhereNotLike(mixed $compare, string $expression)\n\t *\n\t * @method $this whereRegexp(mixed $compare, string $regexp)\n\t * @method $this orWhereRegexp(mixed $compare, string $regexp)\n\t * @method $this whereNotRegexp(mixed $compare, string $regexp)\n\t * @method $this orWhereNotRegexp(mixed $compare, string $regexp)\n\t *\n\t * @method $this whereCondition(DatabaseQueryCondition $condition)\n\t * @method $this orWhereCondition(DatabaseQueryCondition $condition)\n\t * @method $this whereNotCondition(DatabaseQueryCondition $condition)\n\t * @method $this orWhereNotCondition(DatabaseQueryCondition $condition)\n\t *\n\t * @method $this whereRaw(string $condition)\n\t * @method $this orWhereRaw(string $condition)\n\t * @method $this whereNotRaw(string $condition)\n\t * @method $this orWhereNotRaw(string $condition)\n\t *\n\t * @method $this whereSearch(array $fields, string $query)\n\t *\n\t * @method $this havingEqual(mixed $compare, mixed $against)\n\t * @method $this orHavingEqual(mixed $compare, mixed $against)\n\t * @method $this havingNotEqual(mixed $compare, mixed $against)\n\t * @method $this orHavingNotEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingLessThan(mixed $compare, mixed $against)\n\t * @method $this orHavingLessThan(mixed $compare, mixed $against)\n\t * @method $this havingLessThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingGreaterThan(mixed $compare, mixed $against)\n\t * @method $this orHavingGreaterThan(mixed $compare, mixed $against)\n\t * @method $this havingGreaterThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingIn(mixed $needle, mixed $haystack)\n\t * @method $this orHavingIn(mixed $needle, mixed $haystack)\n\t * @method $this havingNotIn(mixed $needle, mixed $haystack)\n\t * @method $this orHavingNotIn(mixed $needle, mixed $haystack)\n\t *\n\t * @method $this havingIs(mixed $compare, mixed $against)\n\t * @method $this orHavingIs(mixed $compare, mixed $against)\n\t * @method $this havingNotIs(mixed $compare, mixed $against)\n\t * @method $this orHavingNotIs(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingLike(mixed $compare, string $expression)\n\t * @method $this orHavingLike(mixed $compare, string $expression)\n\t * @method $this havingNotLike(mixed $compare, string $expression)\n\t * @method $this orHavingNotLike(mixed $compare, string $expression)\n\t *\n\t * @method $this havingRegexp(mixed $compare, string $regexp)\n\t * @method $this orHavingRegexp(mixed $compare, string $regexp)\n\t * @method $this havingNotRegexp(mixed $compare, string $regexp)\n\t * @method $this orHavingNotRegexp(mixed $compare, string $regexp)\n\t *\n\t * @method $this havingCondition(DatabaseQueryCondition $condition)\n\t * @method $this orHavingCondition(DatabaseQueryCondition $condition)\n\t * @method $this havingNotCondition(DatabaseQueryCondition $condition)\n\t * @method $this orHavingNotCondition(DatabaseQueryCondition $condition)\n\t *\n\t * @method $this havingRaw(string $condition)\n\t * @method $this orHavingRaw(string $condition)\n\t * @method $this havingNotRaw(string $condition)\n\t * @method $this orHavingNotRaw(string $condition)\n\t *\n\t * @method $this havingSearch(array $fields, string $query)\n\t */\n\tabstract class Query\n\t{\n\t\tconst QUERY_TYPE_SELECT        = 'SELECT';\n\t\tconst QUERY_TYPE_INSERT        = 'INSERT';\n\t\tconst QUERY_TYPE_INSERT_IGNORE = 'INSERT IGNORE';\n\t\tconst QUERY_TYPE_INSERT_UPDATE = 'INSERT UPDATE';\n\t\tconst QUERY_TYPE_UPDATE        = 'UPDATE';\n\t\tconst QUERY_TYPE_DELETE        = 'DELETE';\n\n\t\tconst QUERY_ORDER_ASC  = 'ASC';\n\t\tconst QUERY_ORDER_DESC = 'DESC';\n\n\t\tprotected $database;\n\n\t\tprotected $type;\n\t\tprotected $table;\n\t\tprotected $alias;\n\n\t\tprotected $fields = array();\n\t\tprotected $data   = array();\n\n\t\t/**\n\t\t * @var Join[]\n\t\t */\n\t\tprotected $joins  = array();\n\t\tprotected $unions = array();\n\n\t\tprotected $whereCondition;\n\t\tprotected $havingCondition;\n\n\t\tprotected $groupBys = array();\n\t\tprotected $orderBys = array();\n\n\t\tprotected $start = 0;\n\t\tprotected $limit = null;\n\n\t\tprotected $isCached = false;\n\n\t\tprotected $entityHydrationRule = null;\n\t\tprotected $prependFields       = false;\n\n\t\tprotected $whereConditionMethodMap = array(\n\t\t\t'whereEqual'              => 'equal',\n\t\t\t'orWhereEqual'            => 'orEqual',\n\t\t\t'whereNotEqual'           => 'notEqual',\n\t\t\t'orWhereNotEqual'         => 'orNotEqual',\n\n\t\t\t'whereLessThan'           => 'lessThan',\n\t\t\t'orWhereLessThan'         => 'orLessThan',\n\t\t\t'whereLessThanOrEqual'    => 'lessThanOrEqual',\n\n\t\t\t'whereGreaterThan'        => 'greaterThan',\n\t\t\t'orWhereGreaterThan'      => 'orGreaterThan',\n\t\t\t'whereGreaterThanOrEqual' => 'greaterThanOrEqual',\n\n\t\t\t'whereIn'                 => 'in',\n\t\t\t'orWhereIn'               => 'orIn',\n\t\t\t'whereNotIn'              => 'notIn',\n\t\t\t'orWhereNotIn'            => 'orNotIn',\n\n\t\t\t'whereIs'                 => 'is',\n\t\t\t'orWhereIs'               => 'orIs',\n\t\t\t'whereNotIs'              => 'notIs',\n\t\t\t'orWhereNotIs'            => 'orNotIs',\n\n\t\t\t'whereLike'               => 'like',\n\t\t\t'orWhereLike'             => 'orLike',\n\t\t\t'whereNotLike'            => 'notLike',\n\t\t\t'orWhereNotLike'          => 'orNotLike',\n\n\t\t\t'whereRegexp'             => 'regexp',\n\t\t\t'orWhereRegexp'           => 'orRegexp',\n\t\t\t'whereNotRegexp'          => 'notRegexp',\n\t\t\t'orWhereNotRegexp'        => 'orNotRegexp',\n\n\t\t\t'whereCondition'          => 'condition',\n\t\t\t'orWhereCondition'        => 'orCondition',\n\t\t\t'whereNotCondition'       => 'notCondition',\n\t\t\t'orWhereNotCondition'     => 'orNotCondition',\n\n\t\t\t'whereRaw'                => 'raw',\n\t\t\t'orWhereRaw'              => 'orRaw',\n\t\t\t'notWhereRaw'             => 'notRaw',\n\t\t\t'orWhereNotRaw'           => 'orNotRaw',\n\n\t\t\t'whereSearch'             => 'search',\n\t\t);\n\n\t\tprotected $havingConditionMethodMap = array(\n\t\t\t'havingEqual'              => 'equal',\n\t\t\t'orHavingEqual'            => 'orEqual',\n\t\t\t'havingNotEqual'           => 'notEqual',\n\t\t\t'orHavingNotEqual'         => 'orNotEqual',\n\n\t\t\t'havingLessThan'           => 'lessThan',\n\t\t\t'orHavingLessThan'         => 'orLessThan',\n\t\t\t'havingLessThanOrEqual'    => 'lessThanOrEqual',\n\n\t\t\t'havingGreaterThan'        => 'greaterThan',\n\t\t\t'orHavingGreaterThan'      => 'orGreaterThan',\n\t\t\t'havingGreaterThanOrEqual' => 'greaterThanOrEqual',\n\n\t\t\t'havingIn'                 => 'in',\n\t\t\t'orHavingIn'               => 'orIn',\n\t\t\t'havingNotIn'              => 'notIn',\n\t\t\t'orHavingNotIn'            => 'orNotIn',\n\n\t\t\t'havingIs'                 => 'is',\n\t\t\t'orHavingIs'               => 'orIs',\n\t\t\t'havingNotIs'              => 'notIs',\n\t\t\t'orHavingNotIs'            => 'orNotIs',\n\n\t\t\t'havingLike'               => 'like',\n\t\t\t'orHavingLike'             => 'orLike',\n\t\t\t'havingNotLike'            => 'notLike',\n\t\t\t'orHavingNotLike'          => 'orNotLike',\n\n\t\t\t'havingRegexp'             => 'regexp',\n\t\t\t'orHavingRegexp'           => 'orRegexp',\n\t\t\t'havingNotRegexp'          => 'notRegexp',\n\t\t\t'orHavingNotRegexp'        => 'orNotRegexp',\n\n\t\t\t'havingCondition'          => 'condition',\n\t\t\t'orHavingCondition'        => 'orCondition',\n\t\t\t'havingNotCondition'       => 'notCondition',\n\t\t\t'orHavingNotCondition'     => 'orNotCondition',\n\n\t\t\t'havingRaw'                => 'raw',\n\t\t\t'orHavingRaw'              => 'orRaw',\n\t\t\t'notHavingRaw'             => 'notRaw',\n\t\t\t'orHavingNotRaw'           => 'orNotRaw',\n\t\t);\n\n\n\t\tpublic function __construct (Database $database)\n\t\t{\n\t\t\t$this->database        = $database;\n\t\t\t$this->whereCondition  = $this->database->createCondition();\n\t\t\t$this->havingCondition = $this->database->createCondition();\n\n\t\t}\n\n\n\t\tpublic function __call ($method, $arguments)\n\t\t{\n\t\t\tif (isset($this->whereConditionMethodMap[$method])) {\n\t\t\t\t$condition = $this->database->createCondition();\n\n\t\t\t\tcall_user_func_array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t$condition,\n\t\t\t\t\t\t$this->whereConditionMethodMap[$method]\n\t\t\t\t\t),\n\t\t\t\t\t$arguments\n\t\t\t\t);\n\n\t\t\t\treturn $this->where($condition);\n\n\t\t\t} else if (isset($this->havingConditionMethodMap[$method])) {\n\t\t\t\t$condition = $this->database->createCondition();\n\n\t\t\t\tcall_user_func_array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t$condition,\n\t\t\t\t\t\t$this->havingConditionMethodMap[$method]\n\t\t\t\t\t),\n\t\t\t\t\t$arguments\n\t\t\t\t);\n\n\t\t\t\treturn $this->having($condition);\n\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException('Method ' . $method . ' not found.');\n\t\t\t}\n\t\t}\n\n\n\t\tpublic function setCache ($bool)\n\t\t{\n\t\t\t$this->isCached = $bool;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function isCached ()\n\t\t{\n\t\t\treturn (bool) $this->isCached;\n\t\t}\n\n\n\t\tpublic function setPrependFields ($bool)\n\t\t{\n\t\t\t$this->prependFields = (boolean) $bool;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function setEntity ($dependencyInjectionRule)\n\t\t{\n\t\t\t$this->entityHydrationRule = $dependencyInjectionRule;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function composeWith ($query)\n\t\t{\n\t\t\t$query = $this->database->toQuery($query);\n\n\t\t\t$this->type = $query->type ? $query->type : $this->type;\n\n\t\t\tif ($query->prependFields) {\n\t\t\t\t$this->fields = array_merge($query->fields, $this->fields);\n\t\t\t\t$this->data   = array_merge($query->data, $this->data);\n\t\t\t} else {\n\t\t\t\t$this->fields = array_merge($this->fields, $query->fields);\n\t\t\t\t$this->data   = array_merge($this->data, $query->data);\n\t\t\t}\n\n\t\t\t$this->joins  = array_merge($this->joins, $query->joins);\n\t\t\t$this->unions = array_merge($this->unions, $query->unions);\n\n\t\t\tif (! $query->whereCondition->isEmpty()) {\n\t\t\t\t$this->where($query->whereCondition);\n\t\t\t}\n\n\t\t\tif (! $query->havingCondition->isEmpty()) {\n\t\t\t\t$this->having($query->havingCondition);\n\t\t\t}\n\n\t\t\t$this->groupBys = array_merge($this->groupBys, $query->groupBys);\n\t\t\t$this->orderBys = array_merge($this->orderBys, $query->orderBys);\n\n\t\t\t$this->start = $query->start ? $query->start : $this->start;\n\t\t\t$this->limit = $query->limit ? $query->limit : $this->limit;\n\n\t\t\t$this->entityHydrationRule = $query->entityHydrationRule ?: $this->entityHydrationRule;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function __toString ()\n\t\t{\n\t\t\treturn $this->getRaw();\n\t\t}\n\n\n\t\tpublic function getRaw ()\n\t\t{\n\t\t\tif ($this->type == self::QUERY_TYPE_SELECT) {\n\t\t\t\treturn $this->generateSelectQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_INSERT) {\n\t\t\t\treturn $this->generatInsertQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_INSERT_IGNORE) {\n\t\t\t\treturn $this->generateInsertIgnoreQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_INSERT_UPDATE) {\n\t\t\t\treturn $this->generateInsertUpdateQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_UPDATE) {\n\t\t\t\treturn $this->generateUpdateQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_DELETE) {\n\t\t\t\treturn $this->generateDeleteQuery();\n\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException('Invalid query type '.var_export($this->type, true));\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function generateSelectQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"SELECT \" . $this->processFields();\n\n\t\t\tif ($this->alias) {\n\t\t\t\t$queryLines[] = \"FROM \" . $this->filterIdentifier($this->table) . \" AS \" . $this->filterIdentifier($this->alias);\n\t\t\t} else {\n\t\t\t\t$queryLines[] = \"FROM \" . $this->filterIdentifier($this->table);\n\t\t\t}\n\n\t\t\t$queryLines[] = $this->processJoins();\n\t\t\t$queryLines[] = $this->processWhere();\n\t\t\t$queryLines[] = $this->processGroupBy();\n\t\t\t$queryLines[] = $this->processHaving();\n\t\t\t$queryLines[] = $this->processOrderBy();\n\t\t\t$queryLines[] = $this->processLimit();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generatInsertQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"INSERT INTO \" . $this->filterIdentifier($this->table) . \" \" . $this->processInsertColumns();\n\t\t\t$queryLines[] = \"VALUES \" . $this->processInsertValues();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateInsertIgnoreQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"INSERT IGNORE INTO \".$this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = \"SET \" . $this->processUpdateData();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateInsertUpdateQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"INSERT INTO \" . $this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = \"SET \" . $this->processUpdateData();\n\t\t\t$queryLines[] = \"ON DUPLICATE KEY UPDATE \" . $this->processUpdateData();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateUpdateQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"UPDATE \" . $this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = \"SET \" . $this->processUpdateData();\n\t\t\t$queryLines[] = $this->processJoins();\n\t\t\t$queryLines[] = $this->processWhere();\n\t\t\t$queryLines[] = $this->processGroupBy();\n\t\t\t$queryLines[] = $this->processHaving();\n\t\t\t$queryLines[] = $this->processOrderBy();\n\t\t\t$queryLines[] = $this->processLimit();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateDeleteQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"DELETE \" . $this->processFields();\n\t\t\t$queryLines[] = \"FROM \" . $this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = $this->processJoins();\n\t\t\t$queryLines[] = $this->processWhere();\n\t\t\t$queryLines[] = $this->processGroupBy();\n\t\t\t$queryLines[] = $this->processHaving();\n\t\t\t$queryLines[] = $this->processOrderBy();\n\t\t\t$queryLines[] = $this->processLimit();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tpublic function getJoins ()\n\t\t{\n\t\t\treturn $this->joins;\n\t\t}\n\n\n\t\tpublic function getOrderBys ()\n\t\t{\n\t\t\treturn $this->orderBys;\n\t\t}\n\n\n\t\tpublic function getTable ()\n\t\t{\n\t\t\treturn $this->table;\n\t\t}\n\n\n\t\tpublic function getType ()\n\t\t{\n\t\t\treturn $this->type;\n\t\t}\n\n\n\t\tpublic function execute ()\n\t\t{\n\t\t\t$cache = $this->database->getCache();\n\t\t\t$cache->refreshCache($this);\n\n\t\t\tif ($result = $cache->getCachedResult($this)) {\n\t\t\t\treturn $result;\n\t\t\t} else {\n\t\t\t\t$result = $this->database->query($this, array(), $this->entityHydrationRule);\n\n\t\t\t\tif ($result instanceof DatabaseResult) {\n\t\t\t\t\t$cache->cacheQuery($this, $result);\n\t\t\t\t}\n\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n\n\n\t\tpublic function set ($data)\n\t\t{\n\t\t\t$this->data = array_merge($this->data, (array)$data);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function fields ($fields, $prepend = false)\n\t\t{\n\t\t\tif (!is_array($fields)) {\n\t\t\t\tthrow new QueryBuilderException('The fields parameter must be an array.');\n\t\t\t}\n\n\t\t\tforeach ($fields as $field) {\n\t\t\t\tif (is_array($field)) {\n\t\t\t\t\t$alias = $field[1];\n\t\t\t\t\t$field = $field[0];\n\t\t\t\t}\n\n\t\t\t\tif ($field instanceof self) {\n\t\t\t\t\t$field = '(' . $field->getRaw() . ')';\n\t\t\t\t} else if (! $field instanceof Raw) {\n\t\t\t\t\t$field = $this->filterIdentifier($field);\n\t\t\t\t}\n\n\t\t\t\tif (isset($alias)) {\n\t\t\t\t\t$field .= ' AS ' . $this->filterIdentifier($alias);\n\t\t\t\t}\n\n\t\t\t\tif ($prepend) {\n\t\t\t\t\tarray_unshift($this->fields, $field);\n\t\t\t\t} else {\n\t\t\t\t\t$this->fields[] = $field;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function prependFields ($fields)\n\t\t{\n\t\t\treturn $this->fields($fields, true);\n\t\t}\n\n\n\t\tpublic function addField ($field, $alias = null, $prepend = false)\n\t\t{\n\t\t\tif (!is_null($alias)) {\n\t\t\t\t$field = array($field, $alias);\n\t\t\t}\n\n\t\t\treturn $this->fields(array($field), $prepend);\n\t\t}\n\n\n\t\tpublic function prependField ($field, $alias = null)\n\t\t{\n\t\t\treturn $this->addField($field, $alias, true);\n\t\t}\n\n\n\t\tpublic function select ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_SELECT;\n\t\t\t$this->fields(func_get_args());\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function insert ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_INSERT;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function insertIgnore ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_INSERT_IGNORE;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function insertUpdate ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_INSERT_UPDATE;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function update ($table = null)\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_UPDATE;\n\n\t\t\tif ($table) {\n\t\t\t\t$this->table($table);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function delete ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_DELETE;\n\t\t\t$this->fields(func_get_args());\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function table ($table, $alias = null)\n\t\t{\n\t\t\t$this->table = $table;\n\t\t\t$this->alias = $alias;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function from ($table, $alias = null)\n\t\t{\n\t\t\t$this->table($table, $alias);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function into ($table)\n\t\t{\n\t\t\t$this->table($table);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function leftJoin ($table, $condition, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'LEFT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$condition,\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function leftJoinUsing ($table, $field, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'LEFT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'USING',\n\t\t\t\t$this->filterIdentifier($field),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function leftJoinEqual ($table, $left, $right, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'LEFT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$this->filterIdentifier($left) . ' = ' . $this->filterIdentifier($right),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function rightJoin ($table, $condition, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'RIGHT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$condition,\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function rightJoinUsing ($table, $field, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'RIGHT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'USING',\n\t\t\t\t$this->filterIdentifier($field),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function rightJoinEqual ($table, $left, $right, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'RIGHT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$this->filterIdentifier($left) . ' = ' . $this->filterIdentifier($right),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function innerJoin ($table, $condition, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'INNER JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$condition,\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function innerJoinUsing ($table, $field, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'INNER JOIN',\n\t\t\t\t$table,\n\t\t\t\t'USING',\n\t\t\t\t$this->filterIdentifier($field),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function innerJoinEqual ($table, $left, $right, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'INNER JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$this->filterIdentifier($left) . ' = ' . $this->filterIdentifier($right),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function where ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->condition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->raw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orWhere ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->orCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->orRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function notWhere ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->notCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->notRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orNotWhere ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->orNotCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->orNotRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function having ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->condition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->raw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orHaving ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->orCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->orRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function notHaving ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->notCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->notRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orNotHaving ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->orNotCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->orNotRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function groupBy ($field)\n\t\t{\n\t\t\t$this->groupBys[] = $this->filterIdentifier($field);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orderBy ($field, $direction = 'ASC')\n\t\t{\n\t\t\t$this->orderBys[] = array(\n\t\t\t\t'field'     => $this->filterIdentifier($field),\n\t\t\t\t'direction' => $direction,\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function start ($start)\n\t\t{\n\t\t\t$this->start = intval($start);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function limit ($limit)\n\t\t{\n\t\t\t$this->limit = intval($limit);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t// PROTECTED METHODS\n\n\n\t\tprotected function processFields ()\n\t\t{\n\t\t\tif (empty($this->fields) && $this->getType() == self::QUERY_TYPE_SELECT) {\n\t\t\t\treturn $this->database->quoteIdentifier('*');\n\t\t\t} else {\n\t\t\t\treturn implode(', ', $this->fields);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processUpdateData ()\n\t\t{\n\t\t\tif (empty($this->data)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$fields = array();\n\n\t\t\t\tforeach ($this->data as $key => $value) {\n\t\t\t\t\t$fields[] = $this->database->quoteIdentifier($key) . \" = \" . $this->database->quote($value);\n\t\t\t\t}\n\n\t\t\t\treturn implode(', ', $fields);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processInsertColumns ()\n\t\t{\n\t\t\tif (empty($this->data)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$columns = array_keys($this->data);\n\n\t\t\t\t$columns = array_map(function ($columnName) {\n\t\t\t\t\treturn $this->database->quoteIdentifier($columnName);\n\t\t\t\t}, $columns);\n\n\t\t\t\treturn '(' . implode(', ', $columns) . ')';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processInsertValues ()\n\t\t{\n\t\t\tif (empty($this->data)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$values = $this->data;\n\n\t\t\t\t$values = array_map(function ($columnName) {\n\t\t\t\t\treturn $this->database->quote($columnName);\n\t\t\t\t}, $values);\n\n\t\t\t\treturn '(' . implode(', ', $values) . ')';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processJoins ()\n\t\t{\n\t\t\tif (empty($this->joins)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$joins = array();\n\n\t\t\t\tforeach ($this->joins as $join) {\n\t\t\t\t\t$joins[] = $join->toString();\n\t\t\t\t}\n\n\t\t\t\treturn implode(\"\\n\", $joins);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processWhere ()\n\t\t{\n\t\t\tif (!$this->whereCondition->isEmpty()) {\n\t\t\t\treturn \"WHERE \" . $this->whereCondition->getRaw();\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processHaving ()\n\t\t{\n\t\t\tif (!$this->havingCondition->isEmpty()) {\n\t\t\t\treturn \"HAVING \" . $this->havingCondition->getRaw();\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processGroupBy ()\n\t\t{\n\t\t\tif (empty($this->groupBys)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\treturn \"GROUP BY \" . implode(', ', $this->groupBys);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processOrderBy ()\n\t\t{\n\t\t\tif (empty($this->orderBys)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$sql       = \"ORDER BY \";\n\t\t\t\t$orderBys = array();\n\n\t\t\t\tforeach ($this->orderBys as $orderBy) {\n\t\t\t\t\t$orderBys[] = $orderBy['field'] . ' ' . $orderBy['direction'];\n\t\t\t\t}\n\n\t\t\t\treturn $sql.implode(', ', $orderBys);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processLimit ()\n\t\t{\n\t\t\tif (strval(intval($this->limit)) === strval($this->limit)) {\n\t\t\t\treturn \"LIMIT \" . intval($this->start) . \", \" . intval($this->limit);\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function filterIdentifier ($value)\n\t\t{\n\t\t\treturn $this->database->quoteIdentifier($value);\n\t\t}\n\t}\n\n\n"], "fixing_code": ["<?php\n\n\t/*\n\t *\n\t *\tLiftKit MVC PHP Framework\n\t *\n\t *\n\t */\n\n\n\tnamespace LiftKit\\Database\\Query;\n\n\tuse LiftKit\\Database\\Connection\\Connection as Database;\n\tuse LiftKit\\Database\\Query\\Exception\\Query as QueryBuilderException;\n\tuse LiftKit\\Database\\Query\\Condition\\Condition as DatabaseQueryCondition;\n\tuse LiftKit\\Database\\Result\\Result as DatabaseResult;\n\n\tuse LiftKit\\Database\\Query\\Raw\\Raw;\n\tuse LiftKit\\Database\\Query\\Join\\Join;\n\n\n\t/**\n\t * Class Query\n\t *\n\t * @package LiftKit\\Database\\Query\n\t *\n\t * @method $this whereEqual(mixed $compare, mixed $against)\n\t * @method $this orWhereEqual(mixed $compare, mixed $against)\n\t * @method $this whereNotEqual(mixed $compare, mixed $against)\n\t * @method $this orWhereNotEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereLessThan(mixed $compare, mixed $against)\n\t * @method $this orWhereLessThan(mixed $compare, mixed $against)\n\t * @method $this whereLessThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereGreaterThan(mixed $compare, mixed $against)\n\t * @method $this orWhereGreaterThan(mixed $compare, mixed $against)\n\t * @method $this whereGreaterThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereIn(mixed $needle, mixed $haystack)\n\t * @method $this orWhereIn(mixed $needle, mixed $haystack)\n\t * @method $this whereNotIn(mixed $needle, mixed $haystack)\n\t * @method $this orWhereNotIn(mixed $needle, mixed $haystack)\n\t *\n\t * @method $this whereIs(mixed $compare, mixed $against)\n\t * @method $this orWhereIs(mixed $compare, mixed $against)\n\t * @method $this whereNotIs(mixed $compare, mixed $against)\n\t * @method $this orWhereNotIs(mixed $compare, mixed $against)\n\t *\n\t * @method $this whereLike(mixed $compare, string $expression)\n\t * @method $this orWhereLike(mixed $compare, string $expression)\n\t * @method $this whereNotLike(mixed $compare, string $expression)\n\t * @method $this orWhereNotLike(mixed $compare, string $expression)\n\t *\n\t * @method $this whereRegexp(mixed $compare, string $regexp)\n\t * @method $this orWhereRegexp(mixed $compare, string $regexp)\n\t * @method $this whereNotRegexp(mixed $compare, string $regexp)\n\t * @method $this orWhereNotRegexp(mixed $compare, string $regexp)\n\t *\n\t * @method $this whereCondition(DatabaseQueryCondition $condition)\n\t * @method $this orWhereCondition(DatabaseQueryCondition $condition)\n\t * @method $this whereNotCondition(DatabaseQueryCondition $condition)\n\t * @method $this orWhereNotCondition(DatabaseQueryCondition $condition)\n\t *\n\t * @method $this whereRaw(string $condition)\n\t * @method $this orWhereRaw(string $condition)\n\t * @method $this whereNotRaw(string $condition)\n\t * @method $this orWhereNotRaw(string $condition)\n\t *\n\t * @method $this whereSearch(array $fields, string $query)\n\t *\n\t * @method $this havingEqual(mixed $compare, mixed $against)\n\t * @method $this orHavingEqual(mixed $compare, mixed $against)\n\t * @method $this havingNotEqual(mixed $compare, mixed $against)\n\t * @method $this orHavingNotEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingLessThan(mixed $compare, mixed $against)\n\t * @method $this orHavingLessThan(mixed $compare, mixed $against)\n\t * @method $this havingLessThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingGreaterThan(mixed $compare, mixed $against)\n\t * @method $this orHavingGreaterThan(mixed $compare, mixed $against)\n\t * @method $this havingGreaterThanOrEqual(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingIn(mixed $needle, mixed $haystack)\n\t * @method $this orHavingIn(mixed $needle, mixed $haystack)\n\t * @method $this havingNotIn(mixed $needle, mixed $haystack)\n\t * @method $this orHavingNotIn(mixed $needle, mixed $haystack)\n\t *\n\t * @method $this havingIs(mixed $compare, mixed $against)\n\t * @method $this orHavingIs(mixed $compare, mixed $against)\n\t * @method $this havingNotIs(mixed $compare, mixed $against)\n\t * @method $this orHavingNotIs(mixed $compare, mixed $against)\n\t *\n\t * @method $this havingLike(mixed $compare, string $expression)\n\t * @method $this orHavingLike(mixed $compare, string $expression)\n\t * @method $this havingNotLike(mixed $compare, string $expression)\n\t * @method $this orHavingNotLike(mixed $compare, string $expression)\n\t *\n\t * @method $this havingRegexp(mixed $compare, string $regexp)\n\t * @method $this orHavingRegexp(mixed $compare, string $regexp)\n\t * @method $this havingNotRegexp(mixed $compare, string $regexp)\n\t * @method $this orHavingNotRegexp(mixed $compare, string $regexp)\n\t *\n\t * @method $this havingCondition(DatabaseQueryCondition $condition)\n\t * @method $this orHavingCondition(DatabaseQueryCondition $condition)\n\t * @method $this havingNotCondition(DatabaseQueryCondition $condition)\n\t * @method $this orHavingNotCondition(DatabaseQueryCondition $condition)\n\t *\n\t * @method $this havingRaw(string $condition)\n\t * @method $this orHavingRaw(string $condition)\n\t * @method $this havingNotRaw(string $condition)\n\t * @method $this orHavingNotRaw(string $condition)\n\t *\n\t * @method $this havingSearch(array $fields, string $query)\n\t */\n\tabstract class Query\n\t{\n\t\tconst QUERY_TYPE_SELECT        = 'SELECT';\n\t\tconst QUERY_TYPE_INSERT        = 'INSERT';\n\t\tconst QUERY_TYPE_INSERT_IGNORE = 'INSERT IGNORE';\n\t\tconst QUERY_TYPE_INSERT_UPDATE = 'INSERT UPDATE';\n\t\tconst QUERY_TYPE_UPDATE        = 'UPDATE';\n\t\tconst QUERY_TYPE_DELETE        = 'DELETE';\n\n\t\tconst QUERY_ORDER_ASC  = 'ASC';\n\t\tconst QUERY_ORDER_DESC = 'DESC';\n\n\t\tprotected $database;\n\n\t\tprotected $type;\n\t\tprotected $table;\n\t\tprotected $alias;\n\n\t\tprotected $fields = array();\n\t\tprotected $data   = array();\n\n\t\t/**\n\t\t * @var Join[]\n\t\t */\n\t\tprotected $joins  = array();\n\t\tprotected $unions = array();\n\n\t\tprotected $whereCondition;\n\t\tprotected $havingCondition;\n\n\t\tprotected $groupBys = array();\n\t\tprotected $orderBys = array();\n\n\t\tprotected $start = 0;\n\t\tprotected $limit = null;\n\n\t\tprotected $isCached = false;\n\n\t\tprotected $entityHydrationRule = null;\n\t\tprotected $prependFields       = false;\n\n\t\tprotected $whereConditionMethodMap = array(\n\t\t\t'whereEqual'              => 'equal',\n\t\t\t'orWhereEqual'            => 'orEqual',\n\t\t\t'whereNotEqual'           => 'notEqual',\n\t\t\t'orWhereNotEqual'         => 'orNotEqual',\n\n\t\t\t'whereLessThan'           => 'lessThan',\n\t\t\t'orWhereLessThan'         => 'orLessThan',\n\t\t\t'whereLessThanOrEqual'    => 'lessThanOrEqual',\n\n\t\t\t'whereGreaterThan'        => 'greaterThan',\n\t\t\t'orWhereGreaterThan'      => 'orGreaterThan',\n\t\t\t'whereGreaterThanOrEqual' => 'greaterThanOrEqual',\n\n\t\t\t'whereIn'                 => 'in',\n\t\t\t'orWhereIn'               => 'orIn',\n\t\t\t'whereNotIn'              => 'notIn',\n\t\t\t'orWhereNotIn'            => 'orNotIn',\n\n\t\t\t'whereIs'                 => 'is',\n\t\t\t'orWhereIs'               => 'orIs',\n\t\t\t'whereNotIs'              => 'notIs',\n\t\t\t'orWhereNotIs'            => 'orNotIs',\n\n\t\t\t'whereLike'               => 'like',\n\t\t\t'orWhereLike'             => 'orLike',\n\t\t\t'whereNotLike'            => 'notLike',\n\t\t\t'orWhereNotLike'          => 'orNotLike',\n\n\t\t\t'whereRegexp'             => 'regexp',\n\t\t\t'orWhereRegexp'           => 'orRegexp',\n\t\t\t'whereNotRegexp'          => 'notRegexp',\n\t\t\t'orWhereNotRegexp'        => 'orNotRegexp',\n\n\t\t\t'whereCondition'          => 'condition',\n\t\t\t'orWhereCondition'        => 'orCondition',\n\t\t\t'whereNotCondition'       => 'notCondition',\n\t\t\t'orWhereNotCondition'     => 'orNotCondition',\n\n\t\t\t'whereRaw'                => 'raw',\n\t\t\t'orWhereRaw'              => 'orRaw',\n\t\t\t'notWhereRaw'             => 'notRaw',\n\t\t\t'orWhereNotRaw'           => 'orNotRaw',\n\n\t\t\t'whereSearch'             => 'search',\n\t\t);\n\n\t\tprotected $havingConditionMethodMap = array(\n\t\t\t'havingEqual'              => 'equal',\n\t\t\t'orHavingEqual'            => 'orEqual',\n\t\t\t'havingNotEqual'           => 'notEqual',\n\t\t\t'orHavingNotEqual'         => 'orNotEqual',\n\n\t\t\t'havingLessThan'           => 'lessThan',\n\t\t\t'orHavingLessThan'         => 'orLessThan',\n\t\t\t'havingLessThanOrEqual'    => 'lessThanOrEqual',\n\n\t\t\t'havingGreaterThan'        => 'greaterThan',\n\t\t\t'orHavingGreaterThan'      => 'orGreaterThan',\n\t\t\t'havingGreaterThanOrEqual' => 'greaterThanOrEqual',\n\n\t\t\t'havingIn'                 => 'in',\n\t\t\t'orHavingIn'               => 'orIn',\n\t\t\t'havingNotIn'              => 'notIn',\n\t\t\t'orHavingNotIn'            => 'orNotIn',\n\n\t\t\t'havingIs'                 => 'is',\n\t\t\t'orHavingIs'               => 'orIs',\n\t\t\t'havingNotIs'              => 'notIs',\n\t\t\t'orHavingNotIs'            => 'orNotIs',\n\n\t\t\t'havingLike'               => 'like',\n\t\t\t'orHavingLike'             => 'orLike',\n\t\t\t'havingNotLike'            => 'notLike',\n\t\t\t'orHavingNotLike'          => 'orNotLike',\n\n\t\t\t'havingRegexp'             => 'regexp',\n\t\t\t'orHavingRegexp'           => 'orRegexp',\n\t\t\t'havingNotRegexp'          => 'notRegexp',\n\t\t\t'orHavingNotRegexp'        => 'orNotRegexp',\n\n\t\t\t'havingCondition'          => 'condition',\n\t\t\t'orHavingCondition'        => 'orCondition',\n\t\t\t'havingNotCondition'       => 'notCondition',\n\t\t\t'orHavingNotCondition'     => 'orNotCondition',\n\n\t\t\t'havingRaw'                => 'raw',\n\t\t\t'orHavingRaw'              => 'orRaw',\n\t\t\t'notHavingRaw'             => 'notRaw',\n\t\t\t'orHavingNotRaw'           => 'orNotRaw',\n\t\t);\n\n\n\t\tpublic function __construct (Database $database)\n\t\t{\n\t\t\t$this->database        = $database;\n\t\t\t$this->whereCondition  = $this->database->createCondition();\n\t\t\t$this->havingCondition = $this->database->createCondition();\n\n\t\t}\n\n\n\t\tpublic function __call ($method, $arguments)\n\t\t{\n\t\t\tif (isset($this->whereConditionMethodMap[$method])) {\n\t\t\t\t$condition = $this->database->createCondition();\n\n\t\t\t\tcall_user_func_array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t$condition,\n\t\t\t\t\t\t$this->whereConditionMethodMap[$method]\n\t\t\t\t\t),\n\t\t\t\t\t$arguments\n\t\t\t\t);\n\n\t\t\t\treturn $this->where($condition);\n\n\t\t\t} else if (isset($this->havingConditionMethodMap[$method])) {\n\t\t\t\t$condition = $this->database->createCondition();\n\n\t\t\t\tcall_user_func_array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t$condition,\n\t\t\t\t\t\t$this->havingConditionMethodMap[$method]\n\t\t\t\t\t),\n\t\t\t\t\t$arguments\n\t\t\t\t);\n\n\t\t\t\treturn $this->having($condition);\n\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException('Method ' . $method . ' not found.');\n\t\t\t}\n\t\t}\n\n\n\t\tpublic function setCache ($bool)\n\t\t{\n\t\t\t$this->isCached = $bool;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function isCached ()\n\t\t{\n\t\t\treturn (bool) $this->isCached;\n\t\t}\n\n\n\t\tpublic function setPrependFields ($bool)\n\t\t{\n\t\t\t$this->prependFields = (boolean) $bool;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function setEntity ($dependencyInjectionRule)\n\t\t{\n\t\t\t$this->entityHydrationRule = $dependencyInjectionRule;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function composeWith ($query)\n\t\t{\n\t\t\t$query = $this->database->toQuery($query);\n\n\t\t\t$this->type = $query->type ? $query->type : $this->type;\n\n\t\t\tif ($query->prependFields) {\n\t\t\t\t$this->fields = array_merge($query->fields, $this->fields);\n\t\t\t\t$this->data   = array_merge($query->data, $this->data);\n\t\t\t} else {\n\t\t\t\t$this->fields = array_merge($this->fields, $query->fields);\n\t\t\t\t$this->data   = array_merge($this->data, $query->data);\n\t\t\t}\n\n\t\t\t$this->joins  = array_merge($this->joins, $query->joins);\n\t\t\t$this->unions = array_merge($this->unions, $query->unions);\n\n\t\t\tif (! $query->whereCondition->isEmpty()) {\n\t\t\t\t$this->where($query->whereCondition);\n\t\t\t}\n\n\t\t\tif (! $query->havingCondition->isEmpty()) {\n\t\t\t\t$this->having($query->havingCondition);\n\t\t\t}\n\n\t\t\t$this->groupBys = array_merge($this->groupBys, $query->groupBys);\n\t\t\t$this->orderBys = array_merge($this->orderBys, $query->orderBys);\n\n\t\t\t$this->start = $query->start ? $query->start : $this->start;\n\t\t\t$this->limit = $query->limit ? $query->limit : $this->limit;\n\n\t\t\t$this->entityHydrationRule = $query->entityHydrationRule ?: $this->entityHydrationRule;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function __toString ()\n\t\t{\n\t\t\treturn $this->getRaw();\n\t\t}\n\n\n\t\tpublic function getRaw ()\n\t\t{\n\t\t\tif ($this->type == self::QUERY_TYPE_SELECT) {\n\t\t\t\treturn $this->generateSelectQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_INSERT) {\n\t\t\t\treturn $this->generatInsertQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_INSERT_IGNORE) {\n\t\t\t\treturn $this->generateInsertIgnoreQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_INSERT_UPDATE) {\n\t\t\t\treturn $this->generateInsertUpdateQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_UPDATE) {\n\t\t\t\treturn $this->generateUpdateQuery();\n\n\t\t\t} else if ($this->type == self::QUERY_TYPE_DELETE) {\n\t\t\t\treturn $this->generateDeleteQuery();\n\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException('Invalid query type '.var_export($this->type, true));\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function generateSelectQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"SELECT \" . $this->processFields();\n\n\t\t\tif ($this->alias) {\n\t\t\t\t$queryLines[] = \"FROM \" . $this->filterIdentifier($this->table) . \" AS \" . $this->filterIdentifier($this->alias);\n\t\t\t} else {\n\t\t\t\t$queryLines[] = \"FROM \" . $this->filterIdentifier($this->table);\n\t\t\t}\n\n\t\t\t$queryLines[] = $this->processJoins();\n\t\t\t$queryLines[] = $this->processWhere();\n\t\t\t$queryLines[] = $this->processGroupBy();\n\t\t\t$queryLines[] = $this->processHaving();\n\t\t\t$queryLines[] = $this->processOrderBy();\n\t\t\t$queryLines[] = $this->processLimit();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generatInsertQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"INSERT INTO \" . $this->filterIdentifier($this->table) . \" \" . $this->processInsertColumns();\n\t\t\t$queryLines[] = \"VALUES \" . $this->processInsertValues();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateInsertIgnoreQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"INSERT IGNORE INTO \".$this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = \"SET \" . $this->processUpdateData();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateInsertUpdateQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"INSERT INTO \" . $this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = \"SET \" . $this->processUpdateData();\n\t\t\t$queryLines[] = \"ON DUPLICATE KEY UPDATE \" . $this->processUpdateData();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateUpdateQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"UPDATE \" . $this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = \"SET \" . $this->processUpdateData();\n\t\t\t$queryLines[] = $this->processJoins();\n\t\t\t$queryLines[] = $this->processWhere();\n\t\t\t$queryLines[] = $this->processGroupBy();\n\t\t\t$queryLines[] = $this->processHaving();\n\t\t\t$queryLines[] = $this->processOrderBy();\n\t\t\t$queryLines[] = $this->processLimit();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tprotected function generateDeleteQuery ()\n\t\t{\n\t\t\t$queryLines[] = \"DELETE \" . $this->processFields();\n\t\t\t$queryLines[] = \"FROM \" . $this->filterIdentifier($this->table);\n\t\t\t$queryLines[] = $this->processJoins();\n\t\t\t$queryLines[] = $this->processWhere();\n\t\t\t$queryLines[] = $this->processGroupBy();\n\t\t\t$queryLines[] = $this->processHaving();\n\t\t\t$queryLines[] = $this->processOrderBy();\n\t\t\t$queryLines[] = $this->processLimit();\n\n\t\t\t$queryLines = array_filter($queryLines);\n\n\t\t\treturn implode($queryLines, PHP_EOL);\n\t\t}\n\n\n\t\tpublic function getJoins ()\n\t\t{\n\t\t\treturn $this->joins;\n\t\t}\n\n\n\t\tpublic function getOrderBys ()\n\t\t{\n\t\t\treturn $this->orderBys;\n\t\t}\n\n\n\t\tpublic function getTable ()\n\t\t{\n\t\t\treturn $this->table;\n\t\t}\n\n\n\t\tpublic function getType ()\n\t\t{\n\t\t\treturn $this->type;\n\t\t}\n\n\n\t\tpublic function execute ()\n\t\t{\n\t\t\t$cache = $this->database->getCache();\n\t\t\t$cache->refreshCache($this);\n\n\t\t\tif ($result = $cache->getCachedResult($this)) {\n\t\t\t\treturn $result;\n\t\t\t} else {\n\t\t\t\t$result = $this->database->query($this, array(), $this->entityHydrationRule);\n\n\t\t\t\tif ($result instanceof DatabaseResult) {\n\t\t\t\t\t$cache->cacheQuery($this, $result);\n\t\t\t\t}\n\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n\n\n\t\tpublic function set ($data)\n\t\t{\n\t\t\t$this->data = array_merge($this->data, (array)$data);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function fields ($fields, $prepend = false)\n\t\t{\n\t\t\tif (!is_array($fields)) {\n\t\t\t\tthrow new QueryBuilderException('The fields parameter must be an array.');\n\t\t\t}\n\n\t\t\tforeach ($fields as $field) {\n\t\t\t\tif (is_array($field)) {\n\t\t\t\t\t$alias = $field[1];\n\t\t\t\t\t$field = $field[0];\n\t\t\t\t}\n\n\t\t\t\tif ($field instanceof self) {\n\t\t\t\t\t$field = '(' . $field->getRaw() . ')';\n\t\t\t\t} else if (! $field instanceof Raw) {\n\t\t\t\t\t$field = $this->filterIdentifier($field);\n\t\t\t\t}\n\n\t\t\t\tif (isset($alias)) {\n\t\t\t\t\t$field .= ' AS ' . $this->filterIdentifier($alias);\n\t\t\t\t}\n\n\t\t\t\tif ($prepend) {\n\t\t\t\t\tarray_unshift($this->fields, $field);\n\t\t\t\t} else {\n\t\t\t\t\t$this->fields[] = $field;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function prependFields ($fields)\n\t\t{\n\t\t\treturn $this->fields($fields, true);\n\t\t}\n\n\n\t\tpublic function addField ($field, $alias = null, $prepend = false)\n\t\t{\n\t\t\tif (!is_null($alias)) {\n\t\t\t\t$field = array($field, $alias);\n\t\t\t}\n\n\t\t\treturn $this->fields(array($field), $prepend);\n\t\t}\n\n\n\t\tpublic function prependField ($field, $alias = null)\n\t\t{\n\t\t\treturn $this->addField($field, $alias, true);\n\t\t}\n\n\n\t\tpublic function select ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_SELECT;\n\t\t\t$this->fields(func_get_args());\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function insert ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_INSERT;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function insertIgnore ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_INSERT_IGNORE;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function insertUpdate ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_INSERT_UPDATE;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function update ($table = null)\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_UPDATE;\n\n\t\t\tif ($table) {\n\t\t\t\t$this->table($table);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function delete ()\n\t\t{\n\t\t\t$this->type = self::QUERY_TYPE_DELETE;\n\t\t\t$this->fields(func_get_args());\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function table ($table, $alias = null)\n\t\t{\n\t\t\t$this->table = $table;\n\t\t\t$this->alias = $alias;\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function from ($table, $alias = null)\n\t\t{\n\t\t\t$this->table($table, $alias);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function into ($table)\n\t\t{\n\t\t\t$this->table($table);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function leftJoin ($table, $condition, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'LEFT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$condition,\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function leftJoinUsing ($table, $field, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'LEFT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'USING',\n\t\t\t\t$this->filterIdentifier($field),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function leftJoinEqual ($table, $left, $right, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'LEFT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$this->filterIdentifier($left) . ' = ' . $this->filterIdentifier($right),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function rightJoin ($table, $condition, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'RIGHT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$condition,\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function rightJoinUsing ($table, $field, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'RIGHT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'USING',\n\t\t\t\t$this->filterIdentifier($field),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function rightJoinEqual ($table, $left, $right, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'RIGHT JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$this->filterIdentifier($left) . ' = ' . $this->filterIdentifier($right),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function innerJoin ($table, $condition, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'INNER JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$condition,\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function innerJoinUsing ($table, $field, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'INNER JOIN',\n\t\t\t\t$table,\n\t\t\t\t'USING',\n\t\t\t\t$this->filterIdentifier($field),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function innerJoinEqual ($table, $left, $right, $alias = null)\n\t\t{\n\t\t\t$this->joins[] = new Join(\n\t\t\t\t$this->database,\n\t\t\t\t'INNER JOIN',\n\t\t\t\t$table,\n\t\t\t\t'ON',\n\t\t\t\t$this->filterIdentifier($left) . ' = ' . $this->filterIdentifier($right),\n\t\t\t\t$alias\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function where ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->condition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->raw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orWhere ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->orCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->orRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function notWhere ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->notCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->notRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orNotWhere ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->whereCondition->orNotCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->whereCondition->orNotRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function having ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->condition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->raw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orHaving ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->orCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->orRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function notHaving ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->notCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->notRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orNotHaving ($condition)\n\t\t{\n\t\t\tif ($condition instanceof DatabaseQueryCondition) {\n\t\t\t\t$this->havingCondition->orNotCondition($condition);\n\t\t\t} else if ($condition instanceof Raw || is_string($condition)) {\n\t\t\t\t$this->havingCondition->orNotRaw($condition);\n\t\t\t} else {\n\t\t\t\tthrow new QueryBuilderException(gettype($condition).' is not a valid condition type.');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function groupBy ($field)\n\t\t{\n\t\t\t$this->groupBys[] = $this->filterIdentifier($field);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function orderBy ($field, $direction = self::QUERY_ORDER_ASC)\n\t\t{\n\t\t\t$this->orderBys[] = array(\n\t\t\t\t'field'     => $this->filterIdentifier($field),\n\t\t\t\t'direction' => $direction,\n\t\t\t);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function start ($start)\n\t\t{\n\t\t\t$this->start = intval($start);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\tpublic function limit ($limit)\n\t\t{\n\t\t\t$this->limit = intval($limit);\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t// PROTECTED METHODS\n\n\n\t\tprotected function processFields ()\n\t\t{\n\t\t\tif (empty($this->fields) && $this->getType() == self::QUERY_TYPE_SELECT) {\n\t\t\t\treturn $this->database->quoteIdentifier('*');\n\t\t\t} else {\n\t\t\t\treturn implode(', ', $this->fields);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processUpdateData ()\n\t\t{\n\t\t\tif (empty($this->data)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$fields = array();\n\n\t\t\t\tforeach ($this->data as $key => $value) {\n\t\t\t\t\t$fields[] = $this->database->quoteIdentifier($key) . \" = \" . $this->database->quote($value);\n\t\t\t\t}\n\n\t\t\t\treturn implode(', ', $fields);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processInsertColumns ()\n\t\t{\n\t\t\tif (empty($this->data)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$columns = array_keys($this->data);\n\n\t\t\t\t$columns = array_map(function ($columnName) {\n\t\t\t\t\treturn $this->database->quoteIdentifier($columnName);\n\t\t\t\t}, $columns);\n\n\t\t\t\treturn '(' . implode(', ', $columns) . ')';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processInsertValues ()\n\t\t{\n\t\t\tif (empty($this->data)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$values = $this->data;\n\n\t\t\t\t$values = array_map(function ($columnName) {\n\t\t\t\t\treturn $this->database->quote($columnName);\n\t\t\t\t}, $values);\n\n\t\t\t\treturn '(' . implode(', ', $values) . ')';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processJoins ()\n\t\t{\n\t\t\tif (empty($this->joins)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$joins = array();\n\n\t\t\t\tforeach ($this->joins as $join) {\n\t\t\t\t\t$joins[] = $join->toString();\n\t\t\t\t}\n\n\t\t\t\treturn implode(\"\\n\", $joins);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processWhere ()\n\t\t{\n\t\t\tif (!$this->whereCondition->isEmpty()) {\n\t\t\t\treturn \"WHERE \" . $this->whereCondition->getRaw();\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processHaving ()\n\t\t{\n\t\t\tif (!$this->havingCondition->isEmpty()) {\n\t\t\t\treturn \"HAVING \" . $this->havingCondition->getRaw();\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processGroupBy ()\n\t\t{\n\t\t\tif (empty($this->groupBys)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\treturn \"GROUP BY \" . implode(', ', $this->groupBys);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processOrderBy ()\n\t\t{\n\t\t\tif (empty($this->orderBys)) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\t$sql       = \"ORDER BY \";\n\t\t\t\t$orderBys = array();\n\n\t\t\t\tforeach ($this->orderBys as $orderBy) {\n\t\t\t\t\t$direction = (strtoupper($orderBy['direction']) == self::QUERY_ORDER_DESC)\n\t\t\t\t\t\t? self::QUERY_ORDER_DESC\n\t\t\t\t\t\t: self::QUERY_ORDER_ASC;\n\n\t\t\t\t\t$orderBys[] = $orderBy['field'] . ' ' . $direction;\n\t\t\t\t}\n\n\t\t\t\treturn $sql.implode(', ', $orderBys);\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function processLimit ()\n\t\t{\n\t\t\tif (strval(intval($this->limit)) === strval($this->limit)) {\n\t\t\t\treturn \"LIMIT \" . intval($this->start) . \", \" . intval($this->limit);\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\n\t\tprotected function filterIdentifier ($value)\n\t\t{\n\t\t\treturn $this->database->quoteIdentifier($value);\n\t\t}\n\t}\n\n\n"], "filenames": ["src/Query/Query.php"], "buggy_code_start_loc": [924], "buggy_code_end_loc": [1068], "fixing_code_start_loc": [924], "fixing_code_end_loc": [1072], "type": "CWE-89", "message": "A vulnerability was found in liftkit database up to 2.13.1. It has been classified as critical. This affects the function processOrderBy of the file src/Query/Query.php. The manipulation leads to sql injection. Upgrading to version 2.13.2 is able to address this issue. The name of the patch is 42ec8f2b22e0b0b98fb5b4444ed451c1b21d125a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-218391.", "other": {"cve": {"id": "CVE-2016-15020", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-16T11:15:10.147", "lastModified": "2023-01-24T15:45:07.107", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in liftkit database up to 2.13.1. It has been classified as critical. This affects the function processOrderBy of the file src/Query/Query.php. The manipulation leads to sql injection. Upgrading to version 2.13.2 is able to address this issue. The name of the patch is 42ec8f2b22e0b0b98fb5b4444ed451c1b21d125a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-218391."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:liftkit_database_library_project:liftkit_database_library:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.13.2", "matchCriteriaId": "EEFEBA61-5A0D-40FE-9A41-C4CF83F83FC2"}]}]}], "references": [{"url": "https://github.com/liftkit/database/commit/42ec8f2b22e0b0b98fb5b4444ed451c1b21d125a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/liftkit/database/releases/tag/v2.13.2", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218391", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218391", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/liftkit/database/commit/42ec8f2b22e0b0b98fb5b4444ed451c1b21d125a"}}