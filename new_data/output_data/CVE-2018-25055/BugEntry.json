{"buggy_code": ["<cfcomponent output=\"false\" extends=\"farcry.core.packages.forms.forms\" displayname=\"Solr Pro Search\" hint=\"Handles searching Solr collections\">\n\t<cfproperty ftSeq=\"110\" ftFieldset=\"General\" name=\"q\" type=\"string\" default=\"\" hint=\"The search text criteria\" ftLabel=\"Search\" ftClass=\"solr-search-criteria\" />\n\t<cfproperty ftSeq=\"120\" ftFieldset=\"General\" name=\"operator\" type=\"string\" default=\"\" hint=\"The operator used for the search\" ftLabel=\"Search Operator\" ftType=\"list\" ftList=\"any:Any of these words,all:All of these words,phrase:These words as a phrase\" />\n\t<cfproperty ftSeq=\"130\" ftFieldset=\"General\" name=\"lContentTypes\" type=\"string\" default=\"\" hint=\"The content types to be searched\" ftLabel=\"Content Types\" ftType=\"list\" ftListData=\"getContentTypeList\" />\n\t<cfproperty ftSeq=\"140\" ftFieldset=\"General\" name=\"orderBy\" type=\"string\" default=\"rank\" hint=\"The sort order of the results\" ftLabel=\"Sort Order\" ftType=\"list\" ftList=\"rank:Relevance,date:Date\" />\n\t\n\t<cfproperty name=\"bSearchPerformed\" type=\"boolean\" default=\"false\" hint=\"Will be true if any search has been performed\" />\n\t\n\t<cffunction name=\"getContentTypeList\" access=\"public\" output=\"false\" returntype=\"string\" hint=\"Returns a list used to populate the lCollections field dropdown selection\">\n\t\t<cfargument name=\"objectid\" required=\"true\" hint=\"The objectid of this object\" />\n\t\t\n\t\t<cfset var oContentType = application.fapi.getContentType(\"solrProContentType\") />\n\t\t<cfset var qContentTypes = oContentType.getAllContentTypes() />\n\t\t<cfset var lResult = \":All\" />\n\t\t\n\t\t<cfloop query=\"qContentTypes\">\n\t\t\t<cfif qContentTypes.bEnableSearch eq 1>\n\t\t\t\t<cfset lResult = listAppend(lResult, \"#qContentTypes.contentType[qContentTypes.currentRow]#:#qContentTypes.title[qContentTypes.currentRow]#\") />\n\t\t\t</cfif>\n\t\t</cfloop>\n\t\t\n\t\t<cfreturn lResult />\n\t</cffunction>\n\t\n\t<cffunction name=\"getSearchResults\" access=\"public\" output=\"false\" returntype=\"struct\" hint=\"Returns a structure containing extensive information of the search results\">\n\t\t<cfargument name=\"objectid\" required=\"true\" hint=\"The objectid of the solrProSearch object containing the details of the search\" />\n\t\t<cfargument name=\"bSpellcheck\" required=\"false\" default=\"true\" hint=\"enable/disable spellchecker\" />\n\t\t<cfargument name=\"rows\" required=\"false\" default=\"10\" />\n\t\t<cfargument name=\"page\" required=\"false\" default=\"1\" />\n\t\t<cfargument name=\"bHighlight\" required=\"false\" type=\"boolean\" default=\"true\" hint=\"enable/disable highlighting\" />\n\t\t<cfargument name=\"hlFragSize\" required=\"false\" type=\"numeric\" default=\"200\" hint=\"The length in characters of each highlight snippet\" />\n\t\t<cfargument name=\"hlSnippets\" required=\"false\" type=\"numeric\" default=\"3\" hint=\"The number of highlighting snippets to return\" />\n\t\t<cfargument name=\"hlPre\" required=\"false\" type=\"string\" default=\"<strong>\" hint=\"HTML to use to wrap instances of search terms\" />\n\t\t<cfargument name=\"hlPost\" required=\"false\" type=\"string\" default=\"</strong>\" hint=\"HTML to use to wrap instances of search terms\" />\n\t\t<cfargument name=\"bLogSearch\" required=\"false\" type=\"boolean\" default=\"#application.fapi.getConfig(key = 'solrserver', name = 'bLogSearches', default = true)#\" hint=\"Log the search criteria and number of results?\" />\n\t\t<cfargument name=\"bCleanString\" required=\"false\" type=\"boolean\" default=\"true\" />\n\t\t<cfargument name=\"bFilterBySite\" required=\"false\" type=\"boolean\" default=\"true\" hint=\"If using a single Solr core for multiple sites, do you want to filter results for only this site (true) or for all sites (false)?\" />\n\t\t<cfargument name=\"customQueryString\" required=\"false\" type=\"string\" hint=\"If you want to use a custom query string, you can pass it along here\" />\n\t\t<cfargument name=\"customParams\" required=\"false\" type=\"struct\" hint=\"If you want to use a custom Solr parameters, you can pass them along here\" />\n\t\t<cfargument name=\"bLowerCaseString\" required=\"false\" type=\"boolean\" default=\"true\" />\n\t\t\n\t\t<!--- calculate the start row --->\n\t\t<cfset var startRow = ((arguments.page - 1) * arguments.rows) />\n\t\t<cfset var stResult = { bSearchPerformed = 0 } />\n\t\t<cfset var stSearchForm = getData(objectid = arguments.objectid) />\n\t\t<cfset var oContentType = application.fapi.getContentType(\"solrProContentType\") />\n\t\t<cfset var params = {} />\n\t\t\n\t\t<cfif stSearchForm.bSearchPerformed eq 1>\n\t\t\t\n\t\t\t<!--- convert search criteria into a proper solr query string (using chosen operator (any,all,phrase) and target collection, if specified) --->\n\t\t\t\n\t\t\t<!--- spellcheck --->\n\t\t\t<cfif arguments.bSpellcheck is true>\n\t\t\t\t<cfset params[\"spellcheck\"] = true />\n\t\t\t\t<cfset params[\"spellcheck.count\"] = 1 />\n\t\t\t\t<cfset params[\"spellcheck.q\"] = stSearchForm.q />\n\t\t\t\t<cfif listLen(stSearchForm.q, \" \") gt 1>\n\t\t\t\t\t<cfset params[\"spellcheck.dictionary\"] = \"phrase\" />\n\t\t\t\t<cfelse>\n\t\t\t\t\t<cfset params[\"spellcheck.dictionary\"] = \"default\" />\n\t\t\t\t</cfif>\n\t\t\t\t<cfset params[\"spellcheck.build\"] = false />\n\t\t\t\t<cfset params[\"spellcheck.onlyMorePopular\"] = true />\n\t\t\t\t<cfset params[\"spellcheck.collate\"] = true />\n\t\t\t<cfelse>\n\t\t\t\t<cfset params[\"spellcheck\"] = false />\n\t\t\t</cfif>\n\n\t\t\t<cfif structKeyExists(arguments,\"customQueryString\")>\n\t\t\t\t<cfset var q = arguments.customQueryString />\n\t\t\t<cfelse>\n\t\t\t\t<cfset var q = oContentType.buildQueryString(searchString = stSearchForm.q, operator = stSearchForm.operator, lContentTypes = stSearchForm.lContentTypes, bCleanString = arguments.bCleanString, bFilterBySite = arguments.bFilterBySite, bLowerCaseString = arguments.bLowerCaseString) />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- get the field list for the content type(s) we are searching --->\n\t\t\t<!--- if doing a \"PHRASE\" search, remove all PHONETIC fields. to match Google and other search engine functionality --->\n\t\t\t<cfset var lContentTypeIds = \"\" />\n\t\t\t<cfset var ct = \"\" />\n\t\t\t<cfloop list=\"#stSearchForm.lContentTypes#\" index=\"ct\">\n\t\t\t\t<cfset lContentTypeIds = listAppend(lContentTypeIds, oContentType.getByContentType(ct).objectid) />\n\t\t\t</cfloop>\n\t\t\t<cfset params[\"qf\"] = oContentType.getFieldListForTypes(\n\t\t\t\tlContentTypes = lContentTypeIds,\n\t\t\t\tbIncludePhonetic = (stSearchForm.operator neq \"phrase\"), \n\t\t\t\tbIncludeNonString = false,\n\t\t\t\tbUseCache = true,\n\t\t\t\tbFlushCache = false\n\t\t\t) />\n\n\t\t\t<!--- return the score --->\n\t\t\t<cfset params[\"fl\"] = \"*,score\" />\n\t\t\t\n\t\t\t<!--- apply the sort --->\n\t\t\t<cfif stSearchForm.orderby eq \"date\">\n\t\t\t\t<cfset params[\"sort\"] = \"datetimelastupdated desc\" />\n\t\t\t<cfelseif stSearchForm.orderby eq \"dateAsc\">\n\t\t\t\t<cfset params[\"sort\"] = \"datetimelastupdated asc\" />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- get highlighting --->\n\t\t\t<cfif arguments.bHighlight>\n\t\t\t\t<cfset params[\"hl\"] = true />\n\t\t\t\t<cfset params[\"hl.fragsize\"] = arguments.hlFragSize />\n\t\t\t\t<cfset params[\"hl.snippets\"] = arguments.hlSnippets />\n\t\t\t\t<cfset params[\"hl.fl\"] = \"fcsp_highlight\" />\n\t\t\t\t<cfset params[\"hl.simple.pre\"] = arguments.hlPre />\n\t\t\t\t<cfset params[\"hl.simple.post\"] = arguments.hlPost />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- Custom params override generated params --->\n\t\t\t<cfif structKeyExists(arguments,\"customParams\")>\n\t\t\t\t<cfset structAppend(params,arguments.customParams,\"yes\") />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<cfset stResult = oContentType.search(q = trim(q), start = startRow, rows = arguments.rows, params = params) />\n\t\t\t<cfset stResult.bSearchPerformed = 1 />\n\t\t\t\n\t\t\t<cfif arguments.bSpellcheck and structKeyExists(stResult, \"spellcheck\")>\n\t\t\t\t<cfset stResult.suggestion = getSuggestion(\n\t\t\t\t\tlinkURL = application.fapi.getLink(objectid = request.navid), \n\t\t\t\t\tspellcheck = stResult.spellcheck, \n\t\t\t\t\tq = stSearchForm.q,\n\t\t\t\t\toperator = stSearchForm.operator,\n\t\t\t\t\tlContentTypes = stSearchForm.lContentTypes,\n\t\t\t\t\torderby = stSearchForm.orderby,\n\t\t\t\t\tstartWrap = '<strong>', \n\t\t\t\t\tendWrap = '</strong>'\n\t\t\t\t) />\n\t\t\t<cfelse>\n\t\t\t\t<cfset stResult.suggestion = \"\" />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- ensure log is enabled, only log search for page 1 --->\n\t\t\t<cfif arguments.bLogSearch and arguments.page eq 1>\n\t\t\t\t<!--- log the search and result stats --->\n\t\t\t\t<cfset var oLog = application.fapi.getContentType(\"solrProSearchLog\") />\n\t\t\t\t<cfset var stLog = {\n\t\t\t\t\tnumResults = stResult.totalResults,\n\t\t\t\t\tq = stSearchForm.q,\n\t\t\t\t\tlContentTypes = stSearchForm.lContentTypes,\n\t\t\t\t\toperator = stSearchForm.operator,\n\t\t\t\t\torderBy = stSearchForm.orderBy,\n\t\t\t\t\tsuggestion = stResult.suggestion\n\t\t\t\t} />\n\t\t\t\t<cfset oLog.createData(stLog) />\n\t\t\t</cfif>\n\t\t\t\n\t\t</cfif>\n\t\t\n\t\t<cfreturn stResult />\n\t\t\n\t</cffunction>\n\t\n\t<cffunction name=\"getSuggestion\" access=\"public\" output=\"false\" returntype=\"string\" hint=\"Returns suggestion text based on results from solr\">\n\t\t\n\t\t<cfargument name=\"spellcheck\" type=\"array\" required=\"true\" />\n\t\t\n\t\t<cfargument name=\"q\" type=\"string\" required=\"true\" />\n\t\t<cfargument name=\"operator\" type=\"string\" required=\"false\" default=\"any\" />\n\t\t<cfargument name=\"lContentTypes\" type=\"string\" required=\"false\" default=\"\" />\n\t\t<cfargument name=\"orderby\" type=\"string\" required=\"false\" default=\"rank\" />\n\t\t\n\t\t<cfargument name=\"startWrap\" type=\"string\" required=\"false\" default=\"<strong>\" />\n\t\t<cfargument name=\"endWrap\" type=\"string\" required=\"false\" default=\"</strong>\" />\n\t\t<cfargument name=\"linkUrl\" type=\"string\" required=\"false\" default=\"#application.fapi.getLink(objectid = request.navid)#\" />\n\t\t\n\t\t<!--- if we have no spell check info, just return empty string --->\n\t\t<cfif not arrayLen(arguments.spellcheck)>\n\t\t\t<cfreturn \"\" />\n\t\t</cfif>\n\t\t\n\t\t<!--- build the suggestion --->\n\t\t<cfset var suggestion = arguments.q />\n\t\t<cfset var s = \"\" />\n\t\t<cfloop array=\"#arguments.spellcheck#\" index=\"s\">\n\t\t\t<!--- create one w/ the wrap --->\n\t\t\t<cfset suggestion = trim(reReplaceNoCase(suggestion,\"^#s.token# | #s.token# | #s.token#$|^#s.token#$\",\" \" & arguments.startWrap & s.suggestions[1] & arguments.endWrap & \" \",\"ALL\")) />\n\t\t\t<!--- and one w/o --->\n\t\t\t<cfset arguments.q = trim(reReplaceNoCase(arguments.q,\"^#s.token# | #s.token# | #s.token#$|^#s.token#$\",\" \" & s.suggestions[1] & \" \",\"ALL\")) />\n\t\t</cfloop>\n\t\t\n\t\t<!--- build the url for the link --->\n\t\t<cfset var addValues = {\n\t\t\t\"q\" = arguments.q,\n\t\t\t\"operator\" = arguments.operator,\n\t\t\t\"orderby\" = arguments.orderby\n\t\t} />\n\t\t<cfif len(trim(arguments.lContentTypes))>\n\t\t\t<cfset addValues[\"lContentTypes\"] = arguments.lContentTypes />\n\t\t</cfif>\n\t\t<cfset arguments.linkUrl = application.fapi.fixUrl(\n\t\t\turl = arguments.linkUrl, \n\t\t\taddValues = addValues\n\t\t) />\n\t\t\n\t\t<!--- build the HTML and return it --->\n\t\t<cfset var str = \"\" />\n\t\t<cfsavecontent variable=\"str\">\n\t\t\t<cfoutput>Did you mean <a href=\"#arguments.linkUrl#\">#suggestion#</a>?</cfoutput>\n\t\t</cfsavecontent>\n\t\t\n\t\t<cfreturn trim(str) />\n\t\t\n\t</cffunction>\n\t\n</cfcomponent>"], "fixing_code": ["<cfcomponent output=\"false\" extends=\"farcry.core.packages.forms.forms\" displayname=\"Solr Pro Search\" hint=\"Handles searching Solr collections\">\n\t<cfproperty ftSeq=\"110\" ftFieldset=\"General\" name=\"q\" type=\"string\" default=\"\" hint=\"The search text criteria\" ftLabel=\"Search\" ftClass=\"solr-search-criteria\" />\n\t<cfproperty ftSeq=\"120\" ftFieldset=\"General\" name=\"operator\" type=\"string\" default=\"\" hint=\"The operator used for the search\" ftLabel=\"Search Operator\" ftType=\"list\" ftList=\"any:Any of these words,all:All of these words,phrase:These words as a phrase\" />\n\t<cfproperty ftSeq=\"130\" ftFieldset=\"General\" name=\"lContentTypes\" type=\"string\" default=\"\" hint=\"The content types to be searched\" ftLabel=\"Content Types\" ftType=\"list\" ftListData=\"getContentTypeList\" />\n\t<cfproperty ftSeq=\"140\" ftFieldset=\"General\" name=\"orderBy\" type=\"string\" default=\"rank\" hint=\"The sort order of the results\" ftLabel=\"Sort Order\" ftType=\"list\" ftList=\"rank:Relevance,date:Date\" />\n\t\n\t<cfproperty name=\"bSearchPerformed\" type=\"boolean\" default=\"false\" hint=\"Will be true if any search has been performed\" />\n\t\n\t<cffunction name=\"getContentTypeList\" access=\"public\" output=\"false\" returntype=\"string\" hint=\"Returns a list used to populate the lCollections field dropdown selection\">\n\t\t<cfargument name=\"objectid\" required=\"true\" hint=\"The objectid of this object\" />\n\t\t\n\t\t<cfset var oContentType = application.fapi.getContentType(\"solrProContentType\") />\n\t\t<cfset var qContentTypes = oContentType.getAllContentTypes() />\n\t\t<cfset var lResult = \":All\" />\n\t\t\n\t\t<cfloop query=\"qContentTypes\">\n\t\t\t<cfif qContentTypes.bEnableSearch eq 1>\n\t\t\t\t<cfset lResult = listAppend(lResult, \"#qContentTypes.contentType[qContentTypes.currentRow]#:#qContentTypes.title[qContentTypes.currentRow]#\") />\n\t\t\t</cfif>\n\t\t</cfloop>\n\t\t\n\t\t<cfreturn lResult />\n\t</cffunction>\n\t\n\t<cffunction name=\"getSearchResults\" access=\"public\" output=\"false\" returntype=\"struct\" hint=\"Returns a structure containing extensive information of the search results\">\n\t\t<cfargument name=\"objectid\" required=\"true\" hint=\"The objectid of the solrProSearch object containing the details of the search\" />\n\t\t<cfargument name=\"bSpellcheck\" required=\"false\" default=\"true\" hint=\"enable/disable spellchecker\" />\n\t\t<cfargument name=\"rows\" required=\"false\" default=\"10\" />\n\t\t<cfargument name=\"page\" required=\"false\" default=\"1\" />\n\t\t<cfargument name=\"bHighlight\" required=\"false\" type=\"boolean\" default=\"true\" hint=\"enable/disable highlighting\" />\n\t\t<cfargument name=\"hlFragSize\" required=\"false\" type=\"numeric\" default=\"200\" hint=\"The length in characters of each highlight snippet\" />\n\t\t<cfargument name=\"hlSnippets\" required=\"false\" type=\"numeric\" default=\"3\" hint=\"The number of highlighting snippets to return\" />\n\t\t<cfargument name=\"hlPre\" required=\"false\" type=\"string\" default=\"<strong>\" hint=\"HTML to use to wrap instances of search terms\" />\n\t\t<cfargument name=\"hlPost\" required=\"false\" type=\"string\" default=\"</strong>\" hint=\"HTML to use to wrap instances of search terms\" />\n\t\t<cfargument name=\"bLogSearch\" required=\"false\" type=\"boolean\" default=\"#application.fapi.getConfig(key = 'solrserver', name = 'bLogSearches', default = true)#\" hint=\"Log the search criteria and number of results?\" />\n\t\t<cfargument name=\"bCleanString\" required=\"false\" type=\"boolean\" default=\"true\" />\n\t\t<cfargument name=\"bFilterBySite\" required=\"false\" type=\"boolean\" default=\"true\" hint=\"If using a single Solr core for multiple sites, do you want to filter results for only this site (true) or for all sites (false)?\" />\n\t\t<cfargument name=\"customQueryString\" required=\"false\" type=\"string\" hint=\"If you want to use a custom query string, you can pass it along here\" />\n\t\t<cfargument name=\"customParams\" required=\"false\" type=\"struct\" hint=\"If you want to use a custom Solr parameters, you can pass them along here\" />\n\t\t<cfargument name=\"bLowerCaseString\" required=\"false\" type=\"boolean\" default=\"true\" />\n\t\t\n\t\t<!--- calculate the start row --->\n\t\t<cfset var startRow = ((arguments.page - 1) * arguments.rows) />\n\t\t<cfset var stResult = { bSearchPerformed = 0 } />\n\t\t<cfset var stSearchForm = getData(objectid = arguments.objectid) />\n\t\t<cfset var oContentType = application.fapi.getContentType(\"solrProContentType\") />\n\t\t<cfset var params = {} />\n\t\t\n\t\t<cfif stSearchForm.bSearchPerformed eq 1>\n\t\t\t\n\t\t\t<!--- convert search criteria into a proper solr query string (using chosen operator (any,all,phrase) and target collection, if specified) --->\n\t\t\t\n\t\t\t<!--- spellcheck --->\n\t\t\t<cfif arguments.bSpellcheck is true>\n\t\t\t\t<cfset params[\"spellcheck\"] = true />\n\t\t\t\t<cfset params[\"spellcheck.count\"] = 1 />\n\t\t\t\t<cfset params[\"spellcheck.q\"] = stSearchForm.q />\n\t\t\t\t<cfif listLen(stSearchForm.q, \" \") gt 1>\n\t\t\t\t\t<cfset params[\"spellcheck.dictionary\"] = \"phrase\" />\n\t\t\t\t<cfelse>\n\t\t\t\t\t<cfset params[\"spellcheck.dictionary\"] = \"default\" />\n\t\t\t\t</cfif>\n\t\t\t\t<cfset params[\"spellcheck.build\"] = false />\n\t\t\t\t<cfset params[\"spellcheck.onlyMorePopular\"] = true />\n\t\t\t\t<cfset params[\"spellcheck.collate\"] = true />\n\t\t\t<cfelse>\n\t\t\t\t<cfset params[\"spellcheck\"] = false />\n\t\t\t</cfif>\n\n\t\t\t<cfif structKeyExists(arguments,\"customQueryString\")>\n\t\t\t\t<cfset var q = arguments.customQueryString />\n\t\t\t<cfelse>\n\t\t\t\t<cfset var q = oContentType.buildQueryString(searchString = stSearchForm.q, operator = stSearchForm.operator, lContentTypes = stSearchForm.lContentTypes, bCleanString = arguments.bCleanString, bFilterBySite = arguments.bFilterBySite, bLowerCaseString = arguments.bLowerCaseString) />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- get the field list for the content type(s) we are searching --->\n\t\t\t<!--- if doing a \"PHRASE\" search, remove all PHONETIC fields. to match Google and other search engine functionality --->\n\t\t\t<cfset var lContentTypeIds = \"\" />\n\t\t\t<cfset var ct = \"\" />\n\t\t\t<cfloop list=\"#stSearchForm.lContentTypes#\" index=\"ct\">\n\t\t\t\t<cfset lContentTypeIds = listAppend(lContentTypeIds, oContentType.getByContentType(ct).objectid) />\n\t\t\t</cfloop>\n\t\t\t<cfset params[\"qf\"] = oContentType.getFieldListForTypes(\n\t\t\t\tlContentTypes = lContentTypeIds,\n\t\t\t\tbIncludePhonetic = (stSearchForm.operator neq \"phrase\"), \n\t\t\t\tbIncludeNonString = false,\n\t\t\t\tbUseCache = true,\n\t\t\t\tbFlushCache = false\n\t\t\t) />\n\n\t\t\t<!--- return the score --->\n\t\t\t<cfset params[\"fl\"] = \"*,score\" />\n\t\t\t\n\t\t\t<!--- apply the sort --->\n\t\t\t<cfif stSearchForm.orderby eq \"date\">\n\t\t\t\t<cfset params[\"sort\"] = \"datetimelastupdated desc\" />\n\t\t\t<cfelseif stSearchForm.orderby eq \"dateAsc\">\n\t\t\t\t<cfset params[\"sort\"] = \"datetimelastupdated asc\" />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- get highlighting --->\n\t\t\t<cfif arguments.bHighlight>\n\t\t\t\t<cfset params[\"hl\"] = true />\n\t\t\t\t<cfset params[\"hl.fragsize\"] = arguments.hlFragSize />\n\t\t\t\t<cfset params[\"hl.snippets\"] = arguments.hlSnippets />\n\t\t\t\t<cfset params[\"hl.fl\"] = \"fcsp_highlight\" />\n\t\t\t\t<cfset params[\"hl.simple.pre\"] = arguments.hlPre />\n\t\t\t\t<cfset params[\"hl.simple.post\"] = arguments.hlPost />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- Custom params override generated params --->\n\t\t\t<cfif structKeyExists(arguments,\"customParams\")>\n\t\t\t\t<cfset structAppend(params,arguments.customParams,\"yes\") />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<cfset stResult = oContentType.search(q = trim(q), start = startRow, rows = arguments.rows, params = params) />\n\t\t\t<cfset stResult.bSearchPerformed = 1 />\n\t\t\t\n\t\t\t<cfif arguments.bSpellcheck and structKeyExists(stResult, \"spellcheck\")>\n\t\t\t\t<cfset stResult.suggestion = getSuggestion(\n\t\t\t\t\tlinkURL = application.fapi.getLink(objectid = request.navid), \n\t\t\t\t\tspellcheck = stResult.spellcheck, \n\t\t\t\t\tq = stSearchForm.q,\n\t\t\t\t\toperator = stSearchForm.operator,\n\t\t\t\t\tlContentTypes = stSearchForm.lContentTypes,\n\t\t\t\t\torderby = stSearchForm.orderby,\n\t\t\t\t\tstartWrap = '<strong>', \n\t\t\t\t\tendWrap = '</strong>'\n\t\t\t\t) />\n\t\t\t<cfelse>\n\t\t\t\t<cfset stResult.suggestion = \"\" />\n\t\t\t</cfif>\n\t\t\t\n\t\t\t<!--- ensure log is enabled, only log search for page 1 --->\n\t\t\t<cfif arguments.bLogSearch and arguments.page eq 1>\n\t\t\t\t<!--- log the search and result stats --->\n\t\t\t\t<cfset var oLog = application.fapi.getContentType(\"solrProSearchLog\") />\n\t\t\t\t<cfset var stLog = {\n\t\t\t\t\tnumResults = stResult.totalResults,\n\t\t\t\t\tq = stSearchForm.q,\n\t\t\t\t\tlContentTypes = stSearchForm.lContentTypes,\n\t\t\t\t\toperator = stSearchForm.operator,\n\t\t\t\t\torderBy = stSearchForm.orderBy,\n\t\t\t\t\tsuggestion = stResult.suggestion\n\t\t\t\t} />\n\t\t\t\t<cfset oLog.createData(stLog) />\n\t\t\t</cfif>\n\t\t\t\n\t\t</cfif>\n\t\t\n\t\t<cfreturn stResult />\n\t\t\n\t</cffunction>\n\t\n\t<cffunction name=\"getSuggestion\" access=\"public\" output=\"false\" returntype=\"string\" hint=\"Returns suggestion text based on results from solr\">\n\t\t\n\t\t<cfargument name=\"spellcheck\" type=\"array\" required=\"true\" />\n\t\t\n\t\t<cfargument name=\"q\" type=\"string\" required=\"true\" />\n\t\t<cfargument name=\"operator\" type=\"string\" required=\"false\" default=\"any\" />\n\t\t<cfargument name=\"lContentTypes\" type=\"string\" required=\"false\" default=\"\" />\n\t\t<cfargument name=\"orderby\" type=\"string\" required=\"false\" default=\"rank\" />\n\t\t\n\t\t<cfargument name=\"startWrap\" type=\"string\" required=\"false\" default=\"<strong>\" />\n\t\t<cfargument name=\"endWrap\" type=\"string\" required=\"false\" default=\"</strong>\" />\n\t\t<cfargument name=\"linkUrl\" type=\"string\" required=\"false\" default=\"#application.fapi.getLink(objectid = request.navid)#\" />\n\t\t\n\t\t<!--- if we have no spell check info, just return empty string --->\n\t\t<cfif not arrayLen(arguments.spellcheck)>\n\t\t\t<cfreturn \"\" />\n\t\t</cfif>\n\t\t\n\t\t<!--- build the suggestion --->\n\t\t<cfset var suggestion = arguments.q />\n\t\t<cfset var s = \"\" />\n\t\t<cfloop array=\"#arguments.spellcheck#\" index=\"s\">\n\t\t\t<!--- create one w/ the wrap --->\n\t\t\t<cfset suggestion = trim(reReplaceNoCase(suggestion,\"^#s.token# | #s.token# | #s.token#$|^#s.token#$\",\" \" & arguments.startWrap & s.suggestions[1] & arguments.endWrap & \" \",\"ALL\")) />\n\t\t\t<!--- and one w/o --->\n\t\t\t<cfset arguments.q = trim(reReplaceNoCase(arguments.q,\"^#s.token# | #s.token# | #s.token#$|^#s.token#$\",\" \" & s.suggestions[1] & \" \",\"ALL\")) />\n\t\t</cfloop>\n\t\t\n\t\t<!--- build the url for the link --->\n\t\t<cfset var addValues = {\n\t\t\t\"q\" = arguments.q,\n\t\t\t\"operator\" = arguments.operator,\n\t\t\t\"orderby\" = arguments.orderby\n\t\t} />\n\t\t<cfif len(trim(arguments.lContentTypes))>\n\t\t\t<cfset addValues[\"lContentTypes\"] = arguments.lContentTypes />\n\t\t</cfif>\n\t\t<cfset arguments.linkUrl = application.fapi.fixUrl(\n\t\t\turl = arguments.linkUrl, \n\t\t\taddValues = addValues\n\t\t) />\n\t\t\n\t\t<!--- build the HTML and return it --->\n\t\t<cfset var str = \"\" />\n\t\t<cfsavecontent variable=\"str\">\n\t\t\t<cfoutput>Did you mean <a href=\"#arguments.linkUrl#\">#application.stPlugins.farcrysolrpro.oCustomFunctions.xmlSafeText(suggestion)#</a>?</cfoutput>\n\t\t</cfsavecontent>\n\t\t\n\t\t<cfreturn trim(str) />\n\t\t\n\t</cffunction>\n\t\n</cfcomponent>"], "filenames": ["packages/forms/solrProSearch.cfc"], "buggy_code_start_loc": [200], "buggy_code_end_loc": [201], "fixing_code_start_loc": [200], "fixing_code_end_loc": [201], "type": "CWE-79", "message": "A vulnerability was found in FarCry Solr Pro Plugin up to 1.5.x. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file packages/forms/solrProSearch.cfc of the component Search Handler. The manipulation of the argument suggestion leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.6.0 is able to address this issue. The name of the patch is b8f3d61511c9b02b781ec442bfb803cbff8e08d5. It is recommended to upgrade the affected component. The identifier VDB-216961 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2018-25055", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-28T12:15:08.820", "lastModified": "2023-01-06T20:23:28.353", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in FarCry Solr Pro Plugin up to 1.5.x. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file packages/forms/solrProSearch.cfc of the component Search Handler. The manipulation of the argument suggestion leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.6.0 is able to address this issue. The name of the patch is b8f3d61511c9b02b781ec442bfb803cbff8e08d5. It is recommended to upgrade the affected component. The identifier VDB-216961 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:farcry_solr_pro_project:farcry_solr_pro:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.5.0", "matchCriteriaId": "3323CC15-D43C-4AE6-90DF-2ECB9ADFD0C8"}]}]}], "references": [{"url": "https://github.com/jeffcoughlin/farcrysolrpro/commit/b8f3d61511c9b02b781ec442bfb803cbff8e08d5", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jeffcoughlin/farcrysolrpro/issues/78", "source": "cna@vuldb.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/jeffcoughlin/farcrysolrpro/releases/tag/1.6.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.216961", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216961", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jeffcoughlin/farcrysolrpro/commit/b8f3d61511c9b02b781ec442bfb803cbff8e08d5"}}