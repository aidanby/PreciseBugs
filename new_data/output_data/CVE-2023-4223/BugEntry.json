{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Responses to AJAX calls for the document upload.\n */\nrequire_once __DIR__.'/../global.inc.php';\n\n$action = $_REQUEST['a'];\nswitch ($action) {\n    case 'get_dir_size':\n        api_protect_course_script(true);\n        $path = $_GET['path'] ?? '';\n        $isAllowedToEdit = api_is_allowed_to_edit();\n        $size = DocumentManager::getTotalFolderSize($path, $isAllowedToEdit);\n        echo format_file_size($size);\n        break;\n    case 'get_dirs_size':\n        api_protect_course_script(true);\n        $requests = $_GET['requests'] ?? '';\n        $isAllowedToEdit = api_is_allowed_to_edit();\n        $response = [];\n        $requests = explode(',', $requests);\n        foreach ($requests as $request) {\n            $fileSize = DocumentManager::getTotalFolderSize($request, $isAllowedToEdit);\n            $data = [\n                'id' => $request,\n                'size' => format_file_size($fileSize),\n            ];\n            $response[] = $data;\n        }\n        echo json_encode($response);\n        break;\n    case 'get_document_quota':\n        // Getting the course quota\n        $courseQuota = DocumentManager::get_course_quota();\n\n        // Calculating the total space\n        $total = DocumentManager::documents_total_space(api_get_course_int_id());\n\n        // Displaying the quota\n        echo DocumentManager::displaySimpleQuota($courseQuota, $total);\n        break;\n    case 'upload_file':\n        api_protect_course_script(true);\n\n        if (isset($_REQUEST['chunkAction']) && 'send' === $_REQUEST['chunkAction']) {\n            // It uploads the files in chunks\n            if (!empty($_FILES)) {\n                $tempDirectory = api_get_path(SYS_ARCHIVE_PATH);\n                $files = $_FILES['files'];\n                $fileList = [];\n                foreach ($files as $name => $array) {\n                    $counter = 0;\n                    foreach ($array as $data) {\n                        $fileList[$counter][$name] = $data;\n                        $counter++;\n                    }\n                }\n                if (!empty($fileList)) {\n                    foreach ($fileList as $n => $file) {\n                        $tmpFile = $tempDirectory.$file['name'];\n                        file_put_contents(\n                            $tmpFile,\n                            fopen($file['tmp_name'], 'r'),\n                            FILE_APPEND\n                        );\n                    }\n                }\n            }\n            echo json_encode([\n                'files' => $_FILES,\n                'errorStatus' => 0,\n            ]);\n            exit;\n        } else {\n            // User access same as upload.php\n            $is_allowed_to_edit = api_is_allowed_to_edit(null, true);\n\n            $sessionId = api_get_session_id();\n\n            if (!$is_allowed_to_edit && $sessionId && $_REQUEST['curdirpath'] == \"/basic-course-documents__{$sessionId}__0\") {\n                $session = SessionManager::fetch($sessionId);\n\n                if (!empty($session) && $session['session_admin_id'] == api_get_user_id()) {\n                    $is_allowed_to_edit = true;\n                }\n            }\n\n            // This needs cleaning!\n            if (api_get_group_id()) {\n                $groupInfo = GroupManager::get_group_properties(api_get_group_id());\n                // Only course admin or group members allowed\n                if ($is_allowed_to_edit || GroupManager::is_user_in_group(api_get_user_id(), $groupInfo)) {\n                    if (!GroupManager::allowUploadEditDocument(\n                        api_get_user_id(),\n                        api_get_course_int_id(),\n                        $groupInfo\n                    )) {\n                        exit;\n                    }\n                } else {\n                    exit;\n                }\n            } elseif ($is_allowed_to_edit ||\n                DocumentManager::is_my_shared_folder(api_get_user_id(), $_REQUEST['curdirpath'], api_get_session_id())\n            ) {\n                // ??\n            } else {\n                // No course admin and no group member...\n                exit;\n            }\n\n            $directoryParentId = isset($_POST['directory_parent_id']) ? (int) $_POST['directory_parent_id'] : 0;\n            $currentDirectory = '';\n            if (empty($directoryParentId)) {\n                $currentDirectory = $_REQUEST['curdirpath'] ?? '';\n            } else {\n                $documentData = DocumentManager::get_document_data_by_id($directoryParentId, api_get_course_id());\n                if ($documentData) {\n                    $currentDirectory = $documentData['path'];\n                }\n            }\n            if (empty($currentDirectory)) {\n                $currentDirectory = DIRECTORY_SEPARATOR;\n            }\n            $ifExists = $_POST['if_exists'] ?? '';\n            $unzip = isset($_POST['unzip']) ? 1 : 0;\n\n            if (empty($ifExists)) {\n                $fileExistsOption = api_get_setting('document_if_file_exists_option');\n                $defaultFileExistsOption = 'rename';\n                if (!empty($fileExistsOption)) {\n                    $defaultFileExistsOption = $fileExistsOption;\n                }\n            } else {\n                $defaultFileExistsOption = $ifExists;\n            }\n\n            if (!empty($_FILES)) {\n                $files = $_FILES['files'];\n\n                $fileList = [];\n                foreach ($files as $name => $array) {\n                    $counter = 0;\n                    foreach ($array as $data) {\n                        $fileList[$counter][$name] = $data;\n                        $counter++;\n                    }\n                }\n\n                $resultList = [];\n                foreach ($fileList as $file) {\n                    if (isset($_REQUEST['chunkAction']) && 'done' === $_REQUEST['chunkAction']) {\n                        // to rename and move the finished file\n                        $chunkedFile = api_get_path(SYS_ARCHIVE_PATH).$file['name'];\n                        $file['tmp_name'] = $chunkedFile;\n                        $file['size'] = filesize($chunkedFile);\n                        $file['copy_file'] = true;\n                    }\n\n                    $globalFile = [];\n                    $globalFile['files'] = $file;\n                    $result = DocumentManager::upload_document(\n                        $globalFile,\n                        $currentDirectory,\n                        '',\n                        '', // comment\n                        $unzip,\n                        $defaultFileExistsOption,\n                        false,\n                        false,\n                        'files'\n                    );\n\n                    $json = [];\n                    if (!empty($result) && is_array($result)) {\n                        $json['name'] = api_htmlentities($result['title']);\n                        $json['link'] = Display::url(\n                            api_htmlentities($result['title']),\n                            api_htmlentities($result['url']),\n                            ['target' => '_blank']\n                        );\n                        $json['url'] = $result['url'];\n                        $json['size'] = format_file_size($file['size']);\n                        $json['type'] = api_htmlentities($file['type']);\n                        $json['result'] = Display::return_icon(\n                            'accept.png',\n                            get_lang('Uploaded')\n                        );\n                    } else {\n                        $json['name'] = $file['name'] ?? get_lang('Unknown');\n                        $json['url'] = '';\n                        $json['error'] = get_lang('Error');\n                    }\n                    $resultList[] = $json;\n                }\n\n                echo json_encode(['files' => $resultList]);\n                exit;\n            }\n        }\n        break;\n    case 'ck_uploadimage':\n        api_protect_course_script(true);\n\n        // it comes from uploaimage drag and drop ckeditor\n        $isCkUploadImage = ($_COOKIE['ckCsrfToken'] == $_POST['ckCsrfToken']);\n\n        if (!$isCkUploadImage) {\n            exit;\n        }\n\n        $data = [];\n        $fileUpload = $_FILES['upload'];\n        $currentDirectory = Security::remove_XSS($_REQUEST['curdirpath']);\n        $isAllowedToEdit = api_is_allowed_to_edit(null, true);\n        if ($isAllowedToEdit) {\n            $globalFile = ['files' => $fileUpload];\n            $result = DocumentManager::upload_document(\n                $globalFile,\n                $currentDirectory,\n                '',\n                '',\n                0,\n                'rename',\n                false,\n                false,\n                'files'\n            );\n            if ($result) {\n                $relativeUrl = str_replace(api_get_path(WEB_PATH), '/', $result['direct_url']);\n                $data = [\n                    'uploaded' => 1,\n                    'fileName' => $fileUpload['name'],\n                    'url' => $relativeUrl,\n                ];\n            }\n        } else {\n            $userId = api_get_user_id();\n            $syspath = UserManager::getUserPathById($userId, 'system').'my_files'.$currentDirectory;\n            if (!is_dir($syspath)) {\n                mkdir($syspath, api_get_permissions_for_new_directories(), true);\n            }\n            $webpath = UserManager::getUserPathById($userId, 'web').'my_files'.$currentDirectory;\n            $fileUploadName = $fileUpload['name'];\n            if (file_exists($syspath.$fileUploadName)) {\n                $extension = pathinfo($fileUploadName, PATHINFO_EXTENSION);\n                $fileName = pathinfo($fileUploadName, PATHINFO_FILENAME);\n                $suffix = '_'.uniqid();\n                $fileUploadName = $fileName.$suffix.'.'.$extension;\n            }\n            if (move_uploaded_file($fileUpload['tmp_name'], $syspath.$fileUploadName)) {\n                $url = $webpath.$fileUploadName;\n                $relativeUrl = str_replace(api_get_path(WEB_PATH), '/', $url);\n                $data = [\n                    'uploaded' => 1,\n                    'fileName' => $fileUploadName,\n                    'url' => $relativeUrl,\n                ];\n            }\n        }\n        echo json_encode($data);\n        exit;\n    case 'document_preview':\n        $courseInfo = api_get_course_info_by_id($_REQUEST['course_id']);\n        if (!empty($courseInfo) && is_array($courseInfo)) {\n            echo DocumentManager::get_document_preview(\n                $courseInfo,\n                false,\n                '_blank',\n                $_REQUEST['session_id']\n            );\n        }\n        break;\n    case 'document_destination':\n        //obtained the bootstrap-select selected value via ajax\n        $dirValue = $_POST['dirValue'] ?? null;\n        echo Security::remove_XSS($dirValue);\n        break;\n}\nexit;\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Responses to AJAX calls for the document upload.\n */\nrequire_once __DIR__.'/../global.inc.php';\n\n$action = $_REQUEST['a'];\nswitch ($action) {\n    case 'get_dir_size':\n        api_protect_course_script(true);\n        $path = $_GET['path'] ?? '';\n        $isAllowedToEdit = api_is_allowed_to_edit();\n        $size = DocumentManager::getTotalFolderSize($path, $isAllowedToEdit);\n        echo format_file_size($size);\n        break;\n    case 'get_dirs_size':\n        api_protect_course_script(true);\n        $requests = $_GET['requests'] ?? '';\n        $isAllowedToEdit = api_is_allowed_to_edit();\n        $response = [];\n        $requests = explode(',', $requests);\n        foreach ($requests as $request) {\n            $fileSize = DocumentManager::getTotalFolderSize($request, $isAllowedToEdit);\n            $data = [\n                'id' => $request,\n                'size' => format_file_size($fileSize),\n            ];\n            $response[] = $data;\n        }\n        echo json_encode($response);\n        break;\n    case 'get_document_quota':\n        // Getting the course quota\n        $courseQuota = DocumentManager::get_course_quota();\n\n        // Calculating the total space\n        $total = DocumentManager::documents_total_space(api_get_course_int_id());\n\n        // Displaying the quota\n        echo DocumentManager::displaySimpleQuota($courseQuota, $total);\n        break;\n    case 'upload_file':\n        api_protect_course_script(true);\n\n        if (isset($_REQUEST['chunkAction']) && 'send' === $_REQUEST['chunkAction']) {\n            // It uploads the files in chunks\n            if (!empty($_FILES)) {\n                $tempDirectory = api_get_path(SYS_ARCHIVE_PATH);\n                $files = $_FILES['files'];\n                $fileList = [];\n                foreach ($files as $name => $array) {\n                    $counter = 0;\n                    foreach ($array as $data) {\n                        $fileList[$counter][$name] = $data;\n                        $counter++;\n                    }\n                }\n                if (!empty($fileList)) {\n                    foreach ($fileList as $n => $file) {\n                        $tmpFile = disable_dangerous_file(\n                            api_replace_dangerous_char($file['name'])\n                        );\n\n                        file_put_contents(\n                            $tempDirectory.$tmpFile,\n                            fopen($file['tmp_name'], 'r'),\n                            FILE_APPEND\n                        );\n                    }\n                }\n            }\n            echo json_encode([\n                'files' => $_FILES,\n                'errorStatus' => 0,\n            ]);\n            exit;\n        } else {\n            // User access same as upload.php\n            $is_allowed_to_edit = api_is_allowed_to_edit(null, true);\n\n            $sessionId = api_get_session_id();\n\n            if (!$is_allowed_to_edit && $sessionId && $_REQUEST['curdirpath'] == \"/basic-course-documents__{$sessionId}__0\") {\n                $session = SessionManager::fetch($sessionId);\n\n                if (!empty($session) && $session['session_admin_id'] == api_get_user_id()) {\n                    $is_allowed_to_edit = true;\n                }\n            }\n\n            // This needs cleaning!\n            if (api_get_group_id()) {\n                $groupInfo = GroupManager::get_group_properties(api_get_group_id());\n                // Only course admin or group members allowed\n                if ($is_allowed_to_edit || GroupManager::is_user_in_group(api_get_user_id(), $groupInfo)) {\n                    if (!GroupManager::allowUploadEditDocument(\n                        api_get_user_id(),\n                        api_get_course_int_id(),\n                        $groupInfo\n                    )) {\n                        exit;\n                    }\n                } else {\n                    exit;\n                }\n            } elseif ($is_allowed_to_edit ||\n                DocumentManager::is_my_shared_folder(api_get_user_id(), $_REQUEST['curdirpath'], api_get_session_id())\n            ) {\n                // ??\n            } else {\n                // No course admin and no group member...\n                exit;\n            }\n\n            $directoryParentId = isset($_POST['directory_parent_id']) ? (int) $_POST['directory_parent_id'] : 0;\n            $currentDirectory = '';\n            if (empty($directoryParentId)) {\n                $currentDirectory = $_REQUEST['curdirpath'] ?? '';\n            } else {\n                $documentData = DocumentManager::get_document_data_by_id($directoryParentId, api_get_course_id());\n                if ($documentData) {\n                    $currentDirectory = $documentData['path'];\n                }\n            }\n            if (empty($currentDirectory)) {\n                $currentDirectory = DIRECTORY_SEPARATOR;\n            }\n            $ifExists = $_POST['if_exists'] ?? '';\n            $unzip = isset($_POST['unzip']) ? 1 : 0;\n\n            if (empty($ifExists)) {\n                $fileExistsOption = api_get_setting('document_if_file_exists_option');\n                $defaultFileExistsOption = 'rename';\n                if (!empty($fileExistsOption)) {\n                    $defaultFileExistsOption = $fileExistsOption;\n                }\n            } else {\n                $defaultFileExistsOption = $ifExists;\n            }\n\n            if (!empty($_FILES)) {\n                $files = $_FILES['files'];\n\n                $fileList = [];\n                foreach ($files as $name => $array) {\n                    $counter = 0;\n                    foreach ($array as $data) {\n                        $fileList[$counter][$name] = $data;\n                        $counter++;\n                    }\n                }\n\n                $resultList = [];\n                foreach ($fileList as $file) {\n                    if (isset($_REQUEST['chunkAction']) && 'done' === $_REQUEST['chunkAction']) {\n                        // to rename and move the finished file\n                        $chunkedFile = api_get_path(SYS_ARCHIVE_PATH).$file['name'];\n                        $file['tmp_name'] = $chunkedFile;\n                        $file['size'] = filesize($chunkedFile);\n                        $file['copy_file'] = true;\n                    }\n\n                    $globalFile = [];\n                    $globalFile['files'] = $file;\n                    $result = DocumentManager::upload_document(\n                        $globalFile,\n                        $currentDirectory,\n                        '',\n                        '', // comment\n                        $unzip,\n                        $defaultFileExistsOption,\n                        false,\n                        false,\n                        'files'\n                    );\n\n                    $json = [];\n                    if (!empty($result) && is_array($result)) {\n                        $json['name'] = api_htmlentities($result['title']);\n                        $json['link'] = Display::url(\n                            api_htmlentities($result['title']),\n                            api_htmlentities($result['url']),\n                            ['target' => '_blank']\n                        );\n                        $json['url'] = $result['url'];\n                        $json['size'] = format_file_size($file['size']);\n                        $json['type'] = api_htmlentities($file['type']);\n                        $json['result'] = Display::return_icon(\n                            'accept.png',\n                            get_lang('Uploaded')\n                        );\n                    } else {\n                        $json['name'] = $file['name'] ?? get_lang('Unknown');\n                        $json['url'] = '';\n                        $json['error'] = get_lang('Error');\n                    }\n                    $resultList[] = $json;\n                }\n\n                echo json_encode(['files' => $resultList]);\n                exit;\n            }\n        }\n        break;\n    case 'ck_uploadimage':\n        api_protect_course_script(true);\n\n        // it comes from uploaimage drag and drop ckeditor\n        $isCkUploadImage = ($_COOKIE['ckCsrfToken'] == $_POST['ckCsrfToken']);\n\n        if (!$isCkUploadImage) {\n            exit;\n        }\n\n        $data = [];\n        $fileUpload = $_FILES['upload'];\n        $currentDirectory = Security::remove_XSS($_REQUEST['curdirpath']);\n        $isAllowedToEdit = api_is_allowed_to_edit(null, true);\n        if ($isAllowedToEdit) {\n            $globalFile = ['files' => $fileUpload];\n            $result = DocumentManager::upload_document(\n                $globalFile,\n                $currentDirectory,\n                '',\n                '',\n                0,\n                'rename',\n                false,\n                false,\n                'files'\n            );\n            if ($result) {\n                $relativeUrl = str_replace(api_get_path(WEB_PATH), '/', $result['direct_url']);\n                $data = [\n                    'uploaded' => 1,\n                    'fileName' => $fileUpload['name'],\n                    'url' => $relativeUrl,\n                ];\n            }\n        } else {\n            $userId = api_get_user_id();\n            $syspath = UserManager::getUserPathById($userId, 'system').'my_files'.$currentDirectory;\n            if (!is_dir($syspath)) {\n                mkdir($syspath, api_get_permissions_for_new_directories(), true);\n            }\n            $webpath = UserManager::getUserPathById($userId, 'web').'my_files'.$currentDirectory;\n            $fileUploadName = $fileUpload['name'];\n            if (file_exists($syspath.$fileUploadName)) {\n                $extension = pathinfo($fileUploadName, PATHINFO_EXTENSION);\n                $fileName = pathinfo($fileUploadName, PATHINFO_FILENAME);\n                $suffix = '_'.uniqid();\n                $fileUploadName = $fileName.$suffix.'.'.$extension;\n            }\n            if (move_uploaded_file($fileUpload['tmp_name'], $syspath.$fileUploadName)) {\n                $url = $webpath.$fileUploadName;\n                $relativeUrl = str_replace(api_get_path(WEB_PATH), '/', $url);\n                $data = [\n                    'uploaded' => 1,\n                    'fileName' => $fileUploadName,\n                    'url' => $relativeUrl,\n                ];\n            }\n        }\n        echo json_encode($data);\n        exit;\n    case 'document_preview':\n        $courseInfo = api_get_course_info_by_id($_REQUEST['course_id']);\n        if (!empty($courseInfo) && is_array($courseInfo)) {\n            echo DocumentManager::get_document_preview(\n                $courseInfo,\n                false,\n                '_blank',\n                $_REQUEST['session_id']\n            );\n        }\n        break;\n    case 'document_destination':\n        //obtained the bootstrap-select selected value via ajax\n        $dirValue = $_POST['dirValue'] ?? null;\n        echo Security::remove_XSS($dirValue);\n        break;\n}\nexit;\n"], "filenames": ["main/inc/ajax/document.ajax.php"], "buggy_code_start_loc": [62], "buggy_code_end_loc": [65], "fixing_code_start_loc": [62], "fixing_code_end_loc": [68], "type": "CWE-434", "message": "Unrestricted file upload in `/main/inc/ajax/document.ajax.php` in Chamilo LMS <= v1.11.24 allows authenticated attackers with learner role to obtain remote code execution via uploading of PHP files.", "other": {"cve": {"id": "CVE-2023-4223", "sourceIdentifier": "info@starlabs.sg", "published": "2023-11-28T08:15:08.803", "lastModified": "2023-11-30T05:35:04.377", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestricted file upload in `/main/inc/ajax/document.ajax.php` in Chamilo LMS <= v1.11.24 allows authenticated attackers with learner role to obtain remote code execution via uploading of PHP files."}, {"lang": "es", "value": "La carga de archivos sin restricciones en `/main/inc/ajax/document.ajax.php` en Chamilo LMS en versiones &lt;= 1.11.24 permite a atacantes autenticados con rol de aprendizaje obtener la ejecuci\u00f3n remota de c\u00f3digo mediante la carga de archivos PHP."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "info@starlabs.sg", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}, {"source": "info@starlabs.sg", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.11.24", "matchCriteriaId": "3CA5310C-E5B0-4369-BC5A-F56EBED72EBA"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/3d74fb7d99bd2e287730552f7a66562417a55047", "source": "info@starlabs.sg", "tags": ["Patch"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/6f32625a012d5de2dfe8edbccb4ed14a85e310d4", "source": "info@starlabs.sg", "tags": ["Patch"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/e864127a440c2cab0eb62c113a04e2e904543a1f", "source": "info@starlabs.sg", "tags": ["Patch"]}, {"url": "https://starlabs.sg/advisories/23/23-4223", "source": "info@starlabs.sg", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/chamilo-18/wiki/security_issues#Issue-129-2023-09-04-Critical-impact-Moderate-risk-Authenticated-users-may-gain-unauthenticated-RCE-CVE-2023-4223CVE-2023-4224CVE-2023-4225CVE-2023-4226", "source": "info@starlabs.sg", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/3d74fb7d99bd2e287730552f7a66562417a55047"}}