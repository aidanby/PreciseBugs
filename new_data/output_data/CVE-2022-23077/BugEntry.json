{"buggy_code": ["<template>\n  <div class=\"form-wrapper\">\n    <div id=\"top-background\">\n      <div class=\"seamless_stars_varied_opacity_repeat\"></div>\n    </div>\n    <form\n      v-if=\"!forgotPassword && !resetPasswordSetNewOne\"\n      id=\"login-form\"\n      @submit.prevent.stop=\"handleSubmit\"\n    >\n      <div class=\"text-center\">\n        <div>\n          <div class=\"svg-icon gryphon\"></div>\n        </div>\n        <div>\n          <div\n            class=\"svg-icon habitica-logo\"\n            v-html=\"icons.habiticaIcon\"\n          ></div>\n        </div>\n      </div>\n      <div class=\"form-group row text-center\">\n        <div class=\"col-12 col-md-12\">\n          <div\n            class=\"btn btn-secondary social-button\"\n            @click=\"socialAuth('google')\"\n          >\n            <div\n              class=\"svg-icon social-icon\"\n              v-html=\"icons.googleIcon\"\n            ></div>\n            <div\n              class=\"text\"\n            >\n              {{ registering\n                ? $t('signUpWithSocial', {social: 'Google'})\n                : $t('loginWithSocial', {social: 'Google'}) }}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group row text-center\">\n        <div class=\"col-12 col-md-12\">\n          <div\n            class=\"btn btn-secondary social-button\"\n            @click=\"socialAuth('apple')\"\n          >\n            <div\n              class=\"svg-icon social-icon\"\n              v-html=\"icons.appleIcon\"\n            ></div>\n            <div\n              class=\"text\"\n            >\n              {{ registering\n                ? $t('signUpWithSocial', {social: 'Apple'})\n                : $t('loginWithSocial', {social: 'Apple'}) }}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"strike\">\n        <span>{{ $t('or') }}</span>\n      </div>\n      <div\n        v-if=\"registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"usernameInput\"\n        >{{ $t('username') }}</label>\n        <input\n          id=\"usernameInput\"\n          v-model=\"username\"\n          class=\"form-control input-with-error\"\n          type=\"text\"\n          :placeholder=\"$t('usernamePlaceholder')\"\n          :class=\"{'input-valid': usernameValid, 'input-invalid': usernameInvalid}\"\n        >\n        <div\n          v-for=\"issue in usernameIssues\"\n          :key=\"issue\"\n          class=\"input-error\"\n        >\n          {{ issue }}\n        </div>\n      </div>\n      <div\n        v-if=\"!registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"usernameInput\"\n        >{{ $t('emailOrUsername') }}</label>\n        <input\n          id=\"usernameInput\"\n          v-model=\"username\"\n          class=\"form-control\"\n          type=\"text\"\n          :placeholder=\"$t('emailOrUsername')\"\n        >\n      </div>\n      <div\n        v-if=\"registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"emailInput\"\n        >{{ $t('email') }}</label>\n        <input\n          id=\"emailInput\"\n          v-model=\"email\"\n          class=\"form-control\"\n          type=\"email\"\n          :placeholder=\"$t('emailPlaceholder')\"\n          :class=\"{'input-invalid': emailInvalid, 'input-valid': emailValid}\"\n        >\n      </div>\n      <div class=\"form-group\">\n        <label\n          v-once\n          for=\"passwordInput\"\n        >{{ $t('password') }}</label>\n        <a\n          v-if=\"!registering\"\n          v-once\n          class=\"float-right forgot-password\"\n          @click=\"forgotPassword = true\"\n        >{{ $t('forgotPassword') }}</a>\n        <input\n          id=\"passwordInput\"\n          v-model=\"password\"\n          class=\"form-control\"\n          type=\"password\"\n          :placeholder=\"$t(registering ? 'passwordPlaceholder' : 'password')\"\n          :class=\"{\n            'input-invalid input-with-error': registering && passwordInvalid,\n            'input-valid': registering && passwordValid\n          }\"\n        >\n        <div\n          v-if=\"passwordInvalid && registering\"\n          class=\"input-error\"\n        >\n          {{ $t('minPasswordLength') }}\n        </div>\n      </div>\n      <div\n        v-if=\"registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"confirmPasswordInput\"\n        >{{ $t('confirmPassword') }}</label>\n        <input\n          id=\"confirmPasswordInput\"\n          v-model=\"passwordConfirm\"\n          class=\"form-control input-with-error\"\n          type=\"password\"\n          :placeholder=\"$t('confirmPasswordPlaceholder')\"\n          :class=\"{'input-invalid': passwordConfirmInvalid, 'input-valid': passwordConfirmValid}\"\n        >\n        <div\n          v-if=\"passwordConfirmInvalid\"\n          class=\"input-error\"\n        >\n          {{ $t('passwordConfirmationMatch') }}\n        </div>\n        <small\n          v-once\n          class=\"form-text\"\n          v-html=\"$t('termsAndAgreement')\"\n        ></small>\n      </div>\n      <div class=\"text-center\">\n        <button\n          v-if=\"registering\"\n          type=\"submit\"\n          class=\"btn btn-info\"\n          :disabled=\"signupFormInvalid\"\n        >\n          {{ $t('joinHabitica') }}\n        </button>\n        <button\n          v-if=\"!registering\"\n          v-once\n          type=\"submit\"\n          class=\"btn btn-info\"\n        >\n          {{ $t('login') }}\n        </button>\n        <div class=\"toggle-links\">\n          <router-link\n            v-if=\"registering\"\n            :to=\"{name: 'login'}\"\n            exact=\"exact\"\n          >\n            <a\n              v-once\n              class=\"toggle-link\"\n              v-html=\"$t('alreadyHaveAccountLogin')\"\n            ></a>\n          </router-link>\n          <router-link\n            v-if=\"!registering\"\n            :to=\"{name: 'register'}\"\n            exact=\"exact\"\n          >\n            <a\n              v-once\n              class=\"toggle-link\"\n              v-html=\"$t('dontHaveAccountSignup')\"\n            ></a>\n          </router-link>\n        </div>\n      </div>\n    </form>\n    <form\n      v-if=\"forgotPassword\"\n      id=\"forgot-form\"\n      @submit.prevent=\"handleSubmit\"\n      @keyup.enter=\"handleSubmit\"\n    >\n      <div class=\"text-center\">\n        <div>\n          <div class=\"svg-icon gryphon\"></div>\n        </div>\n        <div>\n          <div\n            class=\"svg-icon habitica-logo\"\n            v-html=\"icons.habiticaIcon\"\n          ></div>\n        </div>\n        <div class=\"header\">\n          <h2 v-once>\n            {{ $t('emailNewPass') }}\n          </h2>\n          <p v-once>\n            {{ $t('forgotPasswordSteps') }}\n          </p>\n        </div>\n      </div>\n      <div class=\"form-group row text-center\">\n        <label\n          v-once\n          for=\"usernameInput\"\n        >{{ $t('emailOrUsername') }}</label>\n        <input\n          id=\"usernameInput\"\n          v-model=\"username\"\n          class=\"form-control\"\n          type=\"text\"\n          :placeholder=\"$t('emailUsernamePlaceholder')\"\n        >\n      </div>\n      <div class=\"text-center\">\n        <div\n          v-once\n          class=\"btn btn-info\"\n          @click=\"forgotPasswordLink()\"\n        >\n          {{ $t('sendLink') }}\n        </div>\n      </div>\n    </form>\n    <form\n      v-if=\"resetPasswordSetNewOne\"\n      id=\"reset-password-set-new-one-form\"\n      @submit.prevent=\"handleSubmit\"\n      @keyup.enter=\"handleSubmit\"\n    >\n      <div class=\"text-center\">\n        <div>\n          <div class=\"svg-icon gryphon\"></div>\n        </div>\n        <div>\n          <div\n            class=\"svg-icon habitica-logo\"\n            v-html=\"icons.habiticaIcon\"\n          ></div>\n        </div>\n        <div class=\"header\">\n          <h2>{{ $t('passwordResetPage') }}</h2>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label\n          v-once\n          for=\"passwordInput\"\n        >{{ $t('newPass') }}</label>\n        <input\n          id=\"passwordInput\"\n          v-model=\"password\"\n          class=\"form-control input-with-error\"\n          type=\"password\"\n          :placeholder=\"$t('password')\"\n          :class=\"{'input-invalid': passwordInvalid, 'input-valid': passwordValid}\"\n        >\n        <div\n          v-if=\"passwordInvalid\"\n          class=\"input-error\"\n        >\n          {{ $t('minPasswordLength') }}\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label\n          v-once\n          for=\"confirmPasswordInput\"\n        >{{ $t('confirmPass') }}</label>\n        <input\n          id=\"confirmPasswordInput\"\n          v-model=\"passwordConfirm\"\n          class=\"form-control input-with-error\"\n          type=\"password\"\n          :placeholder=\"$t('confirmPasswordPlaceholder')\"\n          :class=\"{'input-invalid': passwordConfirmInvalid, 'input-valid': passwordConfirmValid}\"\n        >\n        <div\n          v-if=\"passwordConfirmInvalid\"\n          class=\"input-error\"\n        >\n          {{ $t('passwordConfirmationMatch') }}\n        </div>\n      </div>\n      <div class=\"text-center\">\n        <div\n          class=\"btn btn-info\"\n          :enabled=\"!resetPasswordSetNewOneData.hasError\"\n          @click=\"resetPasswordSetNewOneLink()\"\n        >\n          {{ $t('setNewPass') }}\n        </div>\n      </div>\n    </form>\n    <div\n      id=\"bottom-wrap\"\n      :class=\"`bottom-wrap-${!registering ? 'login' : 'register'}`\"\n    >\n      <div id=\"bottom-background\">\n        <div class=\"seamless_mountains_demo_repeat\"></div>\n        <div class=\"midground_foreground_extended2\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n  html, body, #app {\n    min-height: 100%;\n  }\n\n  small a, small a:hover {\n    color: #fff;\n    text-decoration: underline;\n  }\n</style>\n\n<style lang=\"scss\" scoped>\n  @import '~@/assets/scss/colors.scss';\n\n  @media only screen  and (min-height: 1080px) {\n    .bottom-wrap-register {\n      margin-top: 6em;\n      position: fixed !important;\n      width: 100%;\n      bottom: 0;\n    }\n  }\n\n  @media only screen  and (min-height: 862px) {\n    .bottom-wrap-login {\n      margin-top: 6em;\n      position: fixed !important;\n      width: 100%;\n      bottom: 0;\n    }\n  }\n\n  @media only screen and (max-width: 768px) {\n    #login-form {\n      width: 100% !important;\n    }\n\n    .form-group {\n      padding-left: .5em;\n      padding-right: .5em;\n    }\n  }\n\n  .form-wrapper {\n    background-color: $purple-200;\n    background: $purple-200; /* For browsers that do not support gradients */\n    background: linear-gradient(to bottom, #4f2a93, #6133b4); /* Standard syntax */\n    min-height: 100vh;\n  }\n\n  ::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n    color: $purple-400;\n  }\n  ::-moz-placeholder { /* Firefox 19+ */\n    color: $purple-400;\n  }\n  :-ms-input-placeholder { /* IE 10+ */\n    color: $purple-400;\n  }\n  :-moz-placeholder { /* Firefox 18- */\n    color: $purple-400;\n  }\n  ::placeholder { //  Standard browsers\n    color: $purple-400;\n  }\n\n  #login-form, #forgot-form, #reset-password-set-new-one-form {\n    margin: 0 auto;\n    width: 40em;\n    padding-top: 5em;\n    padding-bottom: 4em;\n    position: relative;\n    z-index: 1;\n\n    .header {\n      h2 {\n        color: $white;\n      }\n\n      color: $white;\n    }\n\n    .gryphon {\n      background-image: url('~@/assets/images/melior@3x.png');\n      width: 63.2px;\n      height: 69.4px;\n      background-size: cover;\n      color: $white;\n      margin: 0 auto;\n    }\n\n    .habitica-logo {\n      width: 144px;\n      height: 31px;\n      margin: 2em auto;\n    }\n\n    label {\n      color: $white;\n      font-weight: bold;\n    }\n\n    input {\n      margin-bottom: 2em;\n      border-radius: 2px;\n      background-color: #432874;\n      border-color: transparent;\n      height: 50px;\n      color: $white;\n    }\n\n    .input-with-error.input-invalid {\n      margin-bottom: 0.5em;\n    }\n\n    #confirmPasswordInput + .input-error {\n      margin-bottom: 2em;\n    }\n\n    .form-text {\n      font-size: 14px;\n      color: $white;\n    }\n\n    .social-button {\n      width: 100%;\n      height: 100%;\n      white-space: inherit;\n      text-align: center;\n\n      .text {\n        display: inline-block;\n      }\n    }\n\n    .social-icon {\n      margin-left: 1em;\n      margin-right: 1em;\n      width: 18px;\n      height: 18px;\n      display: inline-block;\n      vertical-align: top;\n      margin-top: .1em;\n    }\n  }\n\n  #top-background {\n    .seamless_stars_varied_opacity_repeat {\n      background-image: url('~@/assets/images/auth/seamless_stars_varied_opacity.png');\n      background-repeat: repeat-x;\n      position: absolute;\n      height: 500px;\n      width: 100%;\n    }\n  }\n\n  #bottom-wrap {\n    margin-top: 6em;\n    position: static;\n    width: 100%;\n    bottom: 0;\n  }\n\n  #bottom-background {\n    position: relative;\n\n    .seamless_mountains_demo_repeat {\n      background-image: url('~@/assets/images/auth/seamless_mountains_demo.png');\n      background-repeat: repeat-x;\n      width: 100%;\n      height: 300px;\n      position: absolute;\n      z-index: 0;\n      bottom: 0;\n    }\n\n    .midground_foreground_extended2 {\n      background-image: url('~@/assets/images/auth/midground_foreground_extended2.png');\n      position: relative;\n      width: 1500px;\n      max-width: 100%;\n      height: 150px;\n      margin: 0 auto;\n    }\n  }\n\n  .toggle-links {\n    margin-top: 1em;\n  }\n\n  .toggle-link {\n    color: $white !important;\n  }\n\n  .forgot-password {\n    color: #bda8ff !important;\n  }\n\n  .input-error {\n    color: #fff;\n    font-size: 90%;\n    width: 100%;\n  }\n\n  .warning-banner {\n    color: $white;\n    background-color: $maroon-100;\n    height: 2.5rem;\n    width: 100%;\n  }\n\n  .warning-box {\n    font-weight: bold;\n    width: 1rem;\n    height: 1rem;\n    border: 2px solid;\n    border-radius: 2px;\n  }\n\n  .exclamation {\n    width: 2px;\n  }\n\n  .strike {\n    display: block;\n    text-align: center;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-top: 1.5em;\n    margin-bottom: 1.5em;\n  }\n\n  .strike > span {\n    position: relative;\n    display: inline-block;\n    line-height: 1.14;\n    color: #fff;\n  }\n\n  .strike > span:before,\n  .strike > span:after {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    width: 9999px;\n    height: 1px;\n    background: #fff;\n  }\n\n  .strike > span:before {\n    right: 100%;\n    margin-right: 15px;\n  }\n\n  .strike > span:after {\n    left: 100%;\n    margin-left: 15px;\n  }\n</style>\n\n<script>\nimport axios from 'axios';\nimport hello from 'hellojs';\nimport debounce from 'lodash/debounce';\nimport isEmail from 'validator/lib/isEmail';\nimport DOMPurify from 'dompurify';\nimport { buildAppleAuthUrl } from '../../libs/auth';\n\nimport { MINIMUM_PASSWORD_LENGTH } from '@/../../common/script/constants';\nimport exclamation from '@/assets/svg/exclamation.svg';\nimport gryphon from '@/assets/svg/gryphon.svg';\nimport habiticaIcon from '@/assets/svg/habitica-logo.svg';\nimport facebookSquareIcon from '@/assets/svg/facebook-square.svg';\nimport googleIcon from '@/assets/svg/google.svg';\nimport appleIcon from '@/assets/svg/apple_black.svg';\n\nexport default {\n  data () {\n    const data = {\n      username: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      forgotPassword: false,\n      resetPasswordSetNewOneData: {\n        hasError: null,\n        code: null,\n      },\n      usernameIssues: [],\n    };\n\n    data.icons = Object.freeze({\n      exclamation,\n      gryphon,\n      habiticaIcon,\n      facebookIcon: facebookSquareIcon,\n      googleIcon,\n      appleIcon,\n    });\n\n    return data;\n  },\n  computed: {\n    registering () {\n      if (this.$route.path.startsWith('/register')) {\n        return true;\n      }\n      return false;\n    },\n    resetPasswordSetNewOne () {\n      if (this.$route.path.startsWith('/reset-password')) {\n        return true;\n      }\n      return false;\n    },\n    emailValid () {\n      if (this.email.length < 1) return false;\n      return isEmail(this.email);\n    },\n    emailInvalid () {\n      if (this.email.length < 1) return false;\n      return !this.emailValid;\n    },\n    usernameValid () {\n      if (this.username.length < 1) return false;\n      return this.usernameIssues.length === 0;\n    },\n    usernameInvalid () {\n      if (this.username.length < 1) return false;\n      return !this.usernameValid;\n    },\n    passwordValid () {\n      if (this.password.length <= 0) return false;\n      return this.password.length >= MINIMUM_PASSWORD_LENGTH;\n    },\n    passwordInvalid () {\n      if (this.password.length <= 0) return false;\n      return this.password.length < MINIMUM_PASSWORD_LENGTH;\n    },\n    passwordConfirmValid () {\n      if (this.passwordConfirm.length <= 3) return false;\n      return this.passwordConfirm === this.password;\n    },\n    passwordConfirmInvalid () {\n      if (this.passwordConfirm.length <= 3) return false;\n      return !this.passwordConfirmValid;\n    },\n    signupFormInvalid () {\n      return this.usernameInvalid\n        || this.emailInvalid\n        || this.passwordInvalid\n        || this.passwordConfirmInvalid;\n    },\n  },\n  watch: {\n    $route: {\n      handler () {\n        this.setTitle();\n        if (this.resetPasswordSetNewOne) {\n          const { query } = this.$route;\n          const { code } = query;\n          const hasError = query.hasError === 'true';\n          if (hasError) {\n            window.alert(query.message); // eslint-disable-line no-alert\n            this.$router.push({ name: 'login' });\n            return;\n          }\n\n          if (!code) {\n            window.alert(this.$t('invalidPasswordResetCode')); // eslint-disable-line no-alert\n            this.$router.push({ name: 'login' });\n            return;\n          }\n          this.resetPasswordSetNewOneData.code = query.code;\n          this.resetPasswordSetNewOneData.hasError = hasError;\n        }\n      },\n      immediate: true,\n    },\n    username () {\n      this.validateUsername(this.username);\n    },\n  },\n  mounted () {\n    hello.init({\n      facebook: process.env.FACEBOOK_KEY, // eslint-disable-line\n      // windows: WINDOWS_CLIENT_ID,\n      google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line\n    });\n  },\n  methods: {\n    // eslint-disable-next-line func-names\n    validateUsername: debounce(function (username) {\n      if (username.length <= 3 || !this.registering) {\n        return;\n      }\n      this.$store.dispatch('auth:verifyUsername', {\n        username: this.username,\n      }).then(res => {\n        if (res.issues !== undefined) {\n          this.usernameIssues = res.issues;\n        } else {\n          this.usernameIssues = [];\n        }\n      });\n    }, 500),\n    sanitizeRedirect (redirect) {\n      if (!redirect) return '/';\n      let sanitizedString = DOMPurify.sanitize(redirect);\n      if (sanitizedString.slice(0, 1) !== '/') sanitizedString = `/${sanitizedString}`;\n      return sanitizedString;\n    },\n    async register () {\n      // @TODO do not use alert\n      if (!this.email) {\n        window.alert(this.$t('missingEmail')); // eslint-disable-line no-alert\n        return;\n      }\n\n      if (this.password !== this.passwordConfirm) {\n        window.alert(this.$t('passwordConfirmationMatch')); // eslint-disable-line no-alert\n        return;\n      }\n\n      // @TODO: implement language and invite accepting\n      // var url = ApiUrl.get() + \"/api/v4/user/auth/local/register\";\n      // if (location.search && location.search.indexOf('Invite=') !== -1)\n      // { // matches groupInvite and partyInvite\n      //   url += location.search;\n      // }\n      //\n      // if($rootScope.selectedLanguage) {\n      //   var toAppend = url.indexOf('?') !== -1 ? '&' : '?';\n      //   url = url + toAppend + 'lang=' + $rootScope.selectedLanguage.code;\n      // }\n\n      await this.$store.dispatch('auth:register', {\n        username: this.username,\n        email: this.email,\n        password: this.password,\n        passwordConfirm: this.passwordConfirm,\n      });\n\n      const redirectTo = this.sanitizeRedirect(this.$route.query.redirectTo);\n\n      // @TODO do not reload entire page\n      // problem is that app.vue created hook should be called again\n      // after user is logged in / just signed up\n      // ALSO it's the only way to make sure language data\n      // is reloaded and correct for the logged in user\n      // Same situation in login and socialAuth functions\n      window.location.href = redirectTo;\n    },\n    async login () {\n      await this.$store.dispatch('auth:login', {\n        username: this.username,\n        // email: this.email,\n        password: this.password,\n      });\n\n      const redirectTo = this.sanitizeRedirect(this.$route.query.redirectTo);\n\n      window.location.href = redirectTo;\n    },\n    // @TODO: Abstract hello in to action or lib\n    async socialAuth (network) {\n      if (network === 'apple') {\n        window.location.href = buildAppleAuthUrl();\n      } else {\n        try {\n          await hello(network).logout();\n        } catch (e) {} // eslint-disable-line\n\n        const redirectUrl = `${window.location.protocol}//${window.location.host}`;\n        const auth = await hello(network).login({\n          scope: 'email',\n          // explicitly pass the redirect url or it might redirect to /home\n          redirect_uri: redirectUrl, // eslint-disable-line camelcase\n        });\n\n        await this.$store.dispatch('auth:socialAuth', {\n          auth,\n        });\n\n        const redirectTo = this.sanitizeRedirect(this.$route.query.redirectTo);\n\n        window.location.href = redirectTo;\n      }\n    },\n    setTitle () {\n      if (this.resetPasswordSetNewOne) {\n        return;\n      }\n      let title = 'login';\n      if (this.registering) {\n        title = 'register';\n      }\n      this.$store.dispatch('common:setTitle', {\n        section: this.$t(title),\n      });\n    },\n    handleSubmit () {\n      if (this.registering) {\n        this.register();\n        return;\n      }\n\n      if (this.forgotPassword) {\n        this.forgotPasswordLink();\n        return;\n      }\n\n      if (this.resetPasswordSetNewOne) {\n        this.resetPasswordSetNewOneLink();\n        return;\n      }\n\n      this.login();\n    },\n    async forgotPasswordLink () {\n      if (!this.username) {\n        window.alert(this.$t('missingEmail')); // eslint-disable-line no-alert\n        return;\n      }\n\n      await axios.post('/api/v4/user/reset-password', {\n        email: this.username,\n      });\n\n      window.alert(this.$t('newPassSent')); // eslint-disable-line no-alert\n    },\n    async resetPasswordSetNewOneLink () {\n      if (!this.password) {\n        window.alert(this.$t('missingNewPassword')); // eslint-disable-line no-alert\n        return;\n      }\n\n      if (this.password !== this.passwordConfirm) {\n        // @TODO i18n and don't use alerts\n        window.alert(this.$t('passwordConfirmationMatch')); // eslint-disable-line no-alert\n        return;\n      }\n\n      const res = await axios.post('/api/v4/user/auth/reset-password-set-new-one', {\n        newPassword: this.password,\n        confirmPassword: this.passwordConfirm,\n        code: this.resetPasswordSetNewOneData.code,\n      });\n\n      if (res.data.message) {\n        window.alert(res.data.message); // eslint-disable-line no-alert\n      }\n\n      this.password = '';\n      this.passwordConfirm = '';\n      this.resetPasswordSetNewOneData.code = '';\n      this.resetPasswordSetNewOneData.hasError = false;\n      this.$router.push({ name: 'login' });\n    },\n  },\n};\n</script>\n"], "fixing_code": ["<template>\n  <div class=\"form-wrapper\">\n    <div id=\"top-background\">\n      <div class=\"seamless_stars_varied_opacity_repeat\"></div>\n    </div>\n    <form\n      v-if=\"!forgotPassword && !resetPasswordSetNewOne\"\n      id=\"login-form\"\n      @submit.prevent.stop=\"handleSubmit\"\n    >\n      <div class=\"text-center\">\n        <div>\n          <div class=\"svg-icon gryphon\"></div>\n        </div>\n        <div>\n          <div\n            class=\"svg-icon habitica-logo\"\n            v-html=\"icons.habiticaIcon\"\n          ></div>\n        </div>\n      </div>\n      <div class=\"form-group row text-center\">\n        <div class=\"col-12 col-md-12\">\n          <div\n            class=\"btn btn-secondary social-button\"\n            @click=\"socialAuth('google')\"\n          >\n            <div\n              class=\"svg-icon social-icon\"\n              v-html=\"icons.googleIcon\"\n            ></div>\n            <div\n              class=\"text\"\n            >\n              {{ registering\n                ? $t('signUpWithSocial', {social: 'Google'})\n                : $t('loginWithSocial', {social: 'Google'}) }}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group row text-center\">\n        <div class=\"col-12 col-md-12\">\n          <div\n            class=\"btn btn-secondary social-button\"\n            @click=\"socialAuth('apple')\"\n          >\n            <div\n              class=\"svg-icon social-icon\"\n              v-html=\"icons.appleIcon\"\n            ></div>\n            <div\n              class=\"text\"\n            >\n              {{ registering\n                ? $t('signUpWithSocial', {social: 'Apple'})\n                : $t('loginWithSocial', {social: 'Apple'}) }}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"strike\">\n        <span>{{ $t('or') }}</span>\n      </div>\n      <div\n        v-if=\"registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"usernameInput\"\n        >{{ $t('username') }}</label>\n        <input\n          id=\"usernameInput\"\n          v-model=\"username\"\n          class=\"form-control input-with-error\"\n          type=\"text\"\n          :placeholder=\"$t('usernamePlaceholder')\"\n          :class=\"{'input-valid': usernameValid, 'input-invalid': usernameInvalid}\"\n        >\n        <div\n          v-for=\"issue in usernameIssues\"\n          :key=\"issue\"\n          class=\"input-error\"\n        >\n          {{ issue }}\n        </div>\n      </div>\n      <div\n        v-if=\"!registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"usernameInput\"\n        >{{ $t('emailOrUsername') }}</label>\n        <input\n          id=\"usernameInput\"\n          v-model=\"username\"\n          class=\"form-control\"\n          type=\"text\"\n          :placeholder=\"$t('emailOrUsername')\"\n        >\n      </div>\n      <div\n        v-if=\"registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"emailInput\"\n        >{{ $t('email') }}</label>\n        <input\n          id=\"emailInput\"\n          v-model=\"email\"\n          class=\"form-control\"\n          type=\"email\"\n          :placeholder=\"$t('emailPlaceholder')\"\n          :class=\"{'input-invalid': emailInvalid, 'input-valid': emailValid}\"\n        >\n      </div>\n      <div class=\"form-group\">\n        <label\n          v-once\n          for=\"passwordInput\"\n        >{{ $t('password') }}</label>\n        <a\n          v-if=\"!registering\"\n          v-once\n          class=\"float-right forgot-password\"\n          @click=\"forgotPassword = true\"\n        >{{ $t('forgotPassword') }}</a>\n        <input\n          id=\"passwordInput\"\n          v-model=\"password\"\n          class=\"form-control\"\n          type=\"password\"\n          :placeholder=\"$t(registering ? 'passwordPlaceholder' : 'password')\"\n          :class=\"{\n            'input-invalid input-with-error': registering && passwordInvalid,\n            'input-valid': registering && passwordValid\n          }\"\n        >\n        <div\n          v-if=\"passwordInvalid && registering\"\n          class=\"input-error\"\n        >\n          {{ $t('minPasswordLength') }}\n        </div>\n      </div>\n      <div\n        v-if=\"registering\"\n        class=\"form-group\"\n      >\n        <label\n          v-once\n          for=\"confirmPasswordInput\"\n        >{{ $t('confirmPassword') }}</label>\n        <input\n          id=\"confirmPasswordInput\"\n          v-model=\"passwordConfirm\"\n          class=\"form-control input-with-error\"\n          type=\"password\"\n          :placeholder=\"$t('confirmPasswordPlaceholder')\"\n          :class=\"{'input-invalid': passwordConfirmInvalid, 'input-valid': passwordConfirmValid}\"\n        >\n        <div\n          v-if=\"passwordConfirmInvalid\"\n          class=\"input-error\"\n        >\n          {{ $t('passwordConfirmationMatch') }}\n        </div>\n        <small\n          v-once\n          class=\"form-text\"\n          v-html=\"$t('termsAndAgreement')\"\n        ></small>\n      </div>\n      <div class=\"text-center\">\n        <button\n          v-if=\"registering\"\n          type=\"submit\"\n          class=\"btn btn-info\"\n          :disabled=\"signupFormInvalid\"\n        >\n          {{ $t('joinHabitica') }}\n        </button>\n        <button\n          v-if=\"!registering\"\n          v-once\n          type=\"submit\"\n          class=\"btn btn-info\"\n        >\n          {{ $t('login') }}\n        </button>\n        <div class=\"toggle-links\">\n          <router-link\n            v-if=\"registering\"\n            :to=\"{name: 'login'}\"\n            exact=\"exact\"\n          >\n            <a\n              v-once\n              class=\"toggle-link\"\n              v-html=\"$t('alreadyHaveAccountLogin')\"\n            ></a>\n          </router-link>\n          <router-link\n            v-if=\"!registering\"\n            :to=\"{name: 'register'}\"\n            exact=\"exact\"\n          >\n            <a\n              v-once\n              class=\"toggle-link\"\n              v-html=\"$t('dontHaveAccountSignup')\"\n            ></a>\n          </router-link>\n        </div>\n      </div>\n    </form>\n    <form\n      v-if=\"forgotPassword\"\n      id=\"forgot-form\"\n      @submit.prevent=\"handleSubmit\"\n      @keyup.enter=\"handleSubmit\"\n    >\n      <div class=\"text-center\">\n        <div>\n          <div class=\"svg-icon gryphon\"></div>\n        </div>\n        <div>\n          <div\n            class=\"svg-icon habitica-logo\"\n            v-html=\"icons.habiticaIcon\"\n          ></div>\n        </div>\n        <div class=\"header\">\n          <h2 v-once>\n            {{ $t('emailNewPass') }}\n          </h2>\n          <p v-once>\n            {{ $t('forgotPasswordSteps') }}\n          </p>\n        </div>\n      </div>\n      <div class=\"form-group row text-center\">\n        <label\n          v-once\n          for=\"usernameInput\"\n        >{{ $t('emailOrUsername') }}</label>\n        <input\n          id=\"usernameInput\"\n          v-model=\"username\"\n          class=\"form-control\"\n          type=\"text\"\n          :placeholder=\"$t('emailUsernamePlaceholder')\"\n        >\n      </div>\n      <div class=\"text-center\">\n        <div\n          v-once\n          class=\"btn btn-info\"\n          @click=\"forgotPasswordLink()\"\n        >\n          {{ $t('sendLink') }}\n        </div>\n      </div>\n    </form>\n    <form\n      v-if=\"resetPasswordSetNewOne\"\n      id=\"reset-password-set-new-one-form\"\n      @submit.prevent=\"handleSubmit\"\n      @keyup.enter=\"handleSubmit\"\n    >\n      <div class=\"text-center\">\n        <div>\n          <div class=\"svg-icon gryphon\"></div>\n        </div>\n        <div>\n          <div\n            class=\"svg-icon habitica-logo\"\n            v-html=\"icons.habiticaIcon\"\n          ></div>\n        </div>\n        <div class=\"header\">\n          <h2>{{ $t('passwordResetPage') }}</h2>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label\n          v-once\n          for=\"passwordInput\"\n        >{{ $t('newPass') }}</label>\n        <input\n          id=\"passwordInput\"\n          v-model=\"password\"\n          class=\"form-control input-with-error\"\n          type=\"password\"\n          :placeholder=\"$t('password')\"\n          :class=\"{'input-invalid': passwordInvalid, 'input-valid': passwordValid}\"\n        >\n        <div\n          v-if=\"passwordInvalid\"\n          class=\"input-error\"\n        >\n          {{ $t('minPasswordLength') }}\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label\n          v-once\n          for=\"confirmPasswordInput\"\n        >{{ $t('confirmPass') }}</label>\n        <input\n          id=\"confirmPasswordInput\"\n          v-model=\"passwordConfirm\"\n          class=\"form-control input-with-error\"\n          type=\"password\"\n          :placeholder=\"$t('confirmPasswordPlaceholder')\"\n          :class=\"{'input-invalid': passwordConfirmInvalid, 'input-valid': passwordConfirmValid}\"\n        >\n        <div\n          v-if=\"passwordConfirmInvalid\"\n          class=\"input-error\"\n        >\n          {{ $t('passwordConfirmationMatch') }}\n        </div>\n      </div>\n      <div class=\"text-center\">\n        <div\n          class=\"btn btn-info\"\n          :enabled=\"!resetPasswordSetNewOneData.hasError\"\n          @click=\"resetPasswordSetNewOneLink()\"\n        >\n          {{ $t('setNewPass') }}\n        </div>\n      </div>\n    </form>\n    <div\n      id=\"bottom-wrap\"\n      :class=\"`bottom-wrap-${!registering ? 'login' : 'register'}`\"\n    >\n      <div id=\"bottom-background\">\n        <div class=\"seamless_mountains_demo_repeat\"></div>\n        <div class=\"midground_foreground_extended2\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n  html, body, #app {\n    min-height: 100%;\n  }\n\n  small a, small a:hover {\n    color: #fff;\n    text-decoration: underline;\n  }\n</style>\n\n<style lang=\"scss\" scoped>\n  @import '~@/assets/scss/colors.scss';\n\n  @media only screen  and (min-height: 1080px) {\n    .bottom-wrap-register {\n      margin-top: 6em;\n      position: fixed !important;\n      width: 100%;\n      bottom: 0;\n    }\n  }\n\n  @media only screen  and (min-height: 862px) {\n    .bottom-wrap-login {\n      margin-top: 6em;\n      position: fixed !important;\n      width: 100%;\n      bottom: 0;\n    }\n  }\n\n  @media only screen and (max-width: 768px) {\n    #login-form {\n      width: 100% !important;\n    }\n\n    .form-group {\n      padding-left: .5em;\n      padding-right: .5em;\n    }\n  }\n\n  .form-wrapper {\n    background-color: $purple-200;\n    background: $purple-200; /* For browsers that do not support gradients */\n    background: linear-gradient(to bottom, #4f2a93, #6133b4); /* Standard syntax */\n    min-height: 100vh;\n  }\n\n  ::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n    color: $purple-400;\n  }\n  ::-moz-placeholder { /* Firefox 19+ */\n    color: $purple-400;\n  }\n  :-ms-input-placeholder { /* IE 10+ */\n    color: $purple-400;\n  }\n  :-moz-placeholder { /* Firefox 18- */\n    color: $purple-400;\n  }\n  ::placeholder { //  Standard browsers\n    color: $purple-400;\n  }\n\n  #login-form, #forgot-form, #reset-password-set-new-one-form {\n    margin: 0 auto;\n    width: 40em;\n    padding-top: 5em;\n    padding-bottom: 4em;\n    position: relative;\n    z-index: 1;\n\n    .header {\n      h2 {\n        color: $white;\n      }\n\n      color: $white;\n    }\n\n    .gryphon {\n      background-image: url('~@/assets/images/melior@3x.png');\n      width: 63.2px;\n      height: 69.4px;\n      background-size: cover;\n      color: $white;\n      margin: 0 auto;\n    }\n\n    .habitica-logo {\n      width: 144px;\n      height: 31px;\n      margin: 2em auto;\n    }\n\n    label {\n      color: $white;\n      font-weight: bold;\n    }\n\n    input {\n      margin-bottom: 2em;\n      border-radius: 2px;\n      background-color: #432874;\n      border-color: transparent;\n      height: 50px;\n      color: $white;\n    }\n\n    .input-with-error.input-invalid {\n      margin-bottom: 0.5em;\n    }\n\n    #confirmPasswordInput + .input-error {\n      margin-bottom: 2em;\n    }\n\n    .form-text {\n      font-size: 14px;\n      color: $white;\n    }\n\n    .social-button {\n      width: 100%;\n      height: 100%;\n      white-space: inherit;\n      text-align: center;\n\n      .text {\n        display: inline-block;\n      }\n    }\n\n    .social-icon {\n      margin-left: 1em;\n      margin-right: 1em;\n      width: 18px;\n      height: 18px;\n      display: inline-block;\n      vertical-align: top;\n      margin-top: .1em;\n    }\n  }\n\n  #top-background {\n    .seamless_stars_varied_opacity_repeat {\n      background-image: url('~@/assets/images/auth/seamless_stars_varied_opacity.png');\n      background-repeat: repeat-x;\n      position: absolute;\n      height: 500px;\n      width: 100%;\n    }\n  }\n\n  #bottom-wrap {\n    margin-top: 6em;\n    position: static;\n    width: 100%;\n    bottom: 0;\n  }\n\n  #bottom-background {\n    position: relative;\n\n    .seamless_mountains_demo_repeat {\n      background-image: url('~@/assets/images/auth/seamless_mountains_demo.png');\n      background-repeat: repeat-x;\n      width: 100%;\n      height: 300px;\n      position: absolute;\n      z-index: 0;\n      bottom: 0;\n    }\n\n    .midground_foreground_extended2 {\n      background-image: url('~@/assets/images/auth/midground_foreground_extended2.png');\n      position: relative;\n      width: 1500px;\n      max-width: 100%;\n      height: 150px;\n      margin: 0 auto;\n    }\n  }\n\n  .toggle-links {\n    margin-top: 1em;\n  }\n\n  .toggle-link {\n    color: $white !important;\n  }\n\n  .forgot-password {\n    color: #bda8ff !important;\n  }\n\n  .input-error {\n    color: #fff;\n    font-size: 90%;\n    width: 100%;\n  }\n\n  .warning-banner {\n    color: $white;\n    background-color: $maroon-100;\n    height: 2.5rem;\n    width: 100%;\n  }\n\n  .warning-box {\n    font-weight: bold;\n    width: 1rem;\n    height: 1rem;\n    border: 2px solid;\n    border-radius: 2px;\n  }\n\n  .exclamation {\n    width: 2px;\n  }\n\n  .strike {\n    display: block;\n    text-align: center;\n    overflow: hidden;\n    white-space: nowrap;\n    margin-top: 1.5em;\n    margin-bottom: 1.5em;\n  }\n\n  .strike > span {\n    position: relative;\n    display: inline-block;\n    line-height: 1.14;\n    color: #fff;\n  }\n\n  .strike > span:before,\n  .strike > span:after {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    width: 9999px;\n    height: 1px;\n    background: #fff;\n  }\n\n  .strike > span:before {\n    right: 100%;\n    margin-right: 15px;\n  }\n\n  .strike > span:after {\n    left: 100%;\n    margin-left: 15px;\n  }\n</style>\n\n<script>\nimport axios from 'axios';\nimport hello from 'hellojs';\nimport debounce from 'lodash/debounce';\nimport isEmail from 'validator/lib/isEmail';\nimport DOMPurify from 'dompurify';\nimport { buildAppleAuthUrl } from '../../libs/auth';\n\nimport { MINIMUM_PASSWORD_LENGTH } from '@/../../common/script/constants';\nimport exclamation from '@/assets/svg/exclamation.svg';\nimport gryphon from '@/assets/svg/gryphon.svg';\nimport habiticaIcon from '@/assets/svg/habitica-logo.svg';\nimport facebookSquareIcon from '@/assets/svg/facebook-square.svg';\nimport googleIcon from '@/assets/svg/google.svg';\nimport appleIcon from '@/assets/svg/apple_black.svg';\n\nexport default {\n  data () {\n    const data = {\n      username: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      forgotPassword: false,\n      resetPasswordSetNewOneData: {\n        hasError: null,\n        code: null,\n      },\n      usernameIssues: [],\n    };\n\n    data.icons = Object.freeze({\n      exclamation,\n      gryphon,\n      habiticaIcon,\n      facebookIcon: facebookSquareIcon,\n      googleIcon,\n      appleIcon,\n    });\n\n    return data;\n  },\n  computed: {\n    registering () {\n      if (this.$route.path.startsWith('/register')) {\n        return true;\n      }\n      return false;\n    },\n    resetPasswordSetNewOne () {\n      if (this.$route.path.startsWith('/reset-password')) {\n        return true;\n      }\n      return false;\n    },\n    emailValid () {\n      if (this.email.length < 1) return false;\n      return isEmail(this.email);\n    },\n    emailInvalid () {\n      if (this.email.length < 1) return false;\n      return !this.emailValid;\n    },\n    usernameValid () {\n      if (this.username.length < 1) return false;\n      return this.usernameIssues.length === 0;\n    },\n    usernameInvalid () {\n      if (this.username.length < 1) return false;\n      return !this.usernameValid;\n    },\n    passwordValid () {\n      if (this.password.length <= 0) return false;\n      return this.password.length >= MINIMUM_PASSWORD_LENGTH;\n    },\n    passwordInvalid () {\n      if (this.password.length <= 0) return false;\n      return this.password.length < MINIMUM_PASSWORD_LENGTH;\n    },\n    passwordConfirmValid () {\n      if (this.passwordConfirm.length <= 3) return false;\n      return this.passwordConfirm === this.password;\n    },\n    passwordConfirmInvalid () {\n      if (this.passwordConfirm.length <= 3) return false;\n      return !this.passwordConfirmValid;\n    },\n    signupFormInvalid () {\n      return this.usernameInvalid\n        || this.emailInvalid\n        || this.passwordInvalid\n        || this.passwordConfirmInvalid;\n    },\n  },\n  watch: {\n    $route: {\n      handler () {\n        this.setTitle();\n        if (this.resetPasswordSetNewOne) {\n          const { query } = this.$route;\n          const { code } = query;\n          const hasError = query.hasError === 'true';\n          if (hasError) {\n            window.alert(query.message); // eslint-disable-line no-alert\n            this.$router.push({ name: 'login' });\n            return;\n          }\n\n          if (!code) {\n            window.alert(this.$t('invalidPasswordResetCode')); // eslint-disable-line no-alert\n            this.$router.push({ name: 'login' });\n            return;\n          }\n          this.resetPasswordSetNewOneData.code = query.code;\n          this.resetPasswordSetNewOneData.hasError = hasError;\n        }\n      },\n      immediate: true,\n    },\n    username () {\n      this.validateUsername(this.username);\n    },\n  },\n  mounted () {\n    hello.init({\n      facebook: process.env.FACEBOOK_KEY, // eslint-disable-line\n      // windows: WINDOWS_CLIENT_ID,\n      google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line\n    });\n  },\n  methods: {\n    // eslint-disable-next-line func-names\n    validateUsername: debounce(function (username) {\n      if (username.length <= 3 || !this.registering) {\n        return;\n      }\n      this.$store.dispatch('auth:verifyUsername', {\n        username: this.username,\n      }).then(res => {\n        if (res.issues !== undefined) {\n          this.usernameIssues = res.issues;\n        } else {\n          this.usernameIssues = [];\n        }\n      });\n    }, 500),\n    sanitizeRedirect (redirect) {\n      if (!redirect) return '/';\n      let sanitizedString = DOMPurify.sanitize(redirect).replace(/\\\\|\\/\\/|\\./g, '');\n      sanitizedString = `/${sanitizedString}`;\n      return sanitizedString;\n    },\n    async register () {\n      // @TODO do not use alert\n      if (!this.email) {\n        window.alert(this.$t('missingEmail')); // eslint-disable-line no-alert\n        return;\n      }\n\n      if (this.password !== this.passwordConfirm) {\n        window.alert(this.$t('passwordConfirmationMatch')); // eslint-disable-line no-alert\n        return;\n      }\n\n      // @TODO: implement language and invite accepting\n      // var url = ApiUrl.get() + \"/api/v4/user/auth/local/register\";\n      // if (location.search && location.search.indexOf('Invite=') !== -1)\n      // { // matches groupInvite and partyInvite\n      //   url += location.search;\n      // }\n      //\n      // if($rootScope.selectedLanguage) {\n      //   var toAppend = url.indexOf('?') !== -1 ? '&' : '?';\n      //   url = url + toAppend + 'lang=' + $rootScope.selectedLanguage.code;\n      // }\n\n      await this.$store.dispatch('auth:register', {\n        username: this.username,\n        email: this.email,\n        password: this.password,\n        passwordConfirm: this.passwordConfirm,\n      });\n\n      const redirectTo = this.sanitizeRedirect(this.$route.query.redirectTo);\n\n      // @TODO do not reload entire page\n      // problem is that app.vue created hook should be called again\n      // after user is logged in / just signed up\n      // ALSO it's the only way to make sure language data\n      // is reloaded and correct for the logged in user\n      // Same situation in login and socialAuth functions\n      window.location.href = redirectTo;\n    },\n    async login () {\n      await this.$store.dispatch('auth:login', {\n        username: this.username,\n        // email: this.email,\n        password: this.password,\n      });\n\n      const redirectTo = this.sanitizeRedirect(this.$route.query.redirectTo);\n\n      window.location.href = redirectTo;\n    },\n    // @TODO: Abstract hello in to action or lib\n    async socialAuth (network) {\n      if (network === 'apple') {\n        window.location.href = buildAppleAuthUrl();\n      } else {\n        try {\n          await hello(network).logout();\n        } catch (e) {} // eslint-disable-line\n\n        const redirectUrl = `${window.location.protocol}//${window.location.host}`;\n        const auth = await hello(network).login({\n          scope: 'email',\n          // explicitly pass the redirect url or it might redirect to /home\n          redirect_uri: redirectUrl, // eslint-disable-line camelcase\n        });\n\n        await this.$store.dispatch('auth:socialAuth', {\n          auth,\n        });\n\n        const redirectTo = this.sanitizeRedirect(this.$route.query.redirectTo);\n\n        window.location.href = redirectTo;\n      }\n    },\n    setTitle () {\n      if (this.resetPasswordSetNewOne) {\n        return;\n      }\n      let title = 'login';\n      if (this.registering) {\n        title = 'register';\n      }\n      this.$store.dispatch('common:setTitle', {\n        section: this.$t(title),\n      });\n    },\n    handleSubmit () {\n      if (this.registering) {\n        this.register();\n        return;\n      }\n\n      if (this.forgotPassword) {\n        this.forgotPasswordLink();\n        return;\n      }\n\n      if (this.resetPasswordSetNewOne) {\n        this.resetPasswordSetNewOneLink();\n        return;\n      }\n\n      this.login();\n    },\n    async forgotPasswordLink () {\n      if (!this.username) {\n        window.alert(this.$t('missingEmail')); // eslint-disable-line no-alert\n        return;\n      }\n\n      await axios.post('/api/v4/user/reset-password', {\n        email: this.username,\n      });\n\n      window.alert(this.$t('newPassSent')); // eslint-disable-line no-alert\n    },\n    async resetPasswordSetNewOneLink () {\n      if (!this.password) {\n        window.alert(this.$t('missingNewPassword')); // eslint-disable-line no-alert\n        return;\n      }\n\n      if (this.password !== this.passwordConfirm) {\n        // @TODO i18n and don't use alerts\n        window.alert(this.$t('passwordConfirmationMatch')); // eslint-disable-line no-alert\n        return;\n      }\n\n      const res = await axios.post('/api/v4/user/auth/reset-password-set-new-one', {\n        newPassword: this.password,\n        confirmPassword: this.passwordConfirm,\n        code: this.resetPasswordSetNewOneData.code,\n      });\n\n      if (res.data.message) {\n        window.alert(res.data.message); // eslint-disable-line no-alert\n      }\n\n      this.password = '';\n      this.passwordConfirm = '';\n      this.resetPasswordSetNewOneData.code = '';\n      this.resetPasswordSetNewOneData.hasError = false;\n      this.$router.push({ name: 'login' });\n    },\n  },\n};\n</script>\n"], "filenames": ["website/client/src/components/auth/registerLoginReset.vue"], "buggy_code_start_loc": [760], "buggy_code_end_loc": [762], "fixing_code_start_loc": [760], "fixing_code_end_loc": [762], "type": "CWE-79", "message": "In habitica versions v4.119.0 through v4.232.2 are vulnerable to DOM XSS via the login page.", "other": {"cve": {"id": "CVE-2022-23077", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2022-06-22T12:15:07.997", "lastModified": "2022-06-29T15:09:33.907", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In habitica versions v4.119.0 through v4.232.2 are vulnerable to DOM XSS via the login page."}, {"lang": "es", "value": "En habitica versiones v4.119.0 hasta v4.232.2, son vulnerables a un ataque de tipo XSS DOM por medio de la p\u00e1gina de login"}], "metrics": {"cvssMetricV31": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "nvd@nist.gov", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:habitica:habitica:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.119.0", "versionEndExcluding": "4.233.0", "matchCriteriaId": "D35F7004-7C02-47B0-892B-9CA4AD2CA2D3"}]}]}], "references": [{"url": "https://github.com/HabitRPG/habitica/commit/5bcfdbe066e8c899f3ecf3fdcdbacc2ecba7f02f", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.mend.io/vulnerability-database/CVE-2022-23077", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/HabitRPG/habitica/commit/5bcfdbe066e8c899f3ecf3fdcdbacc2ecba7f02f"}}