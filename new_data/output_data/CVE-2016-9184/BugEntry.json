{"buggy_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expHTMLEditorController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nclass expHTMLEditorController extends expController\n{\n    protected $manage_permissions = array(\n        'activate' => \"Activate\",\n        'preview'  => \"Preview Editor Toolbars\"\n    );\n    public $requires_login = array(\n        'preview'=>'Preview Editor',\n    );\n\n    static function displayname()\n    {\n        return gt(\"Editors\");\n    }\n\n    static function description()\n    {\n        return gt(\"Mostly for CKEditor\");\n    }\n\n    static function author()\n    {\n        return \"Phillip Ball\";\n    }\n\n    static function hasSources()\n    {\n        return false;\n    }\n\n    static function hasContent()\n    {\n        return false;\n    }\n\n    function __construct($src = null, $params = array())\n    {\n        parent:: __construct($src, $params);\n        if (empty($this->params['editor'])) {\n            $this->params['editor'] = SITE_WYSIWYG_EDITOR;\n        }\n    }\n\n    function manage()\n    {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        if (SITE_WYSIWYG_EDITOR == \"FCKeditor\") {\n            flash('error', gt('FCKeditor is deprecated!'));\n            redirect_to(array(\"module\" => \"administration\", \"action\" => \"configure_site\"));\n        }\n\n        // otherwise, on to the show\n        $configs = $db->selectObjects('htmleditor_' . $this->params['editor'], 1);\n\n        assign_to_template(\n            array(\n                'configs' => $configs,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function update()\n    {\n        global $db;\n\n        $obj = self::getEditorSettings($this->params['id'], $this->params['editor']);\n        $obj->name = $this->params['name'];\n        $obj->data = stripSlashes($this->params['data']);\n        $obj->skin = $this->params['skin'];\n        $obj->scayt_on = $this->params['scayt_on'];\n        $obj->paste_word = $this->params['paste_word'];\n        $obj->plugins = stripSlashes($this->params['plugins']);\n        $obj->stylesset = stripSlashes($this->params['stylesset']);\n        $obj->formattags = stripSlashes($this->params['formattags']);\n        $obj->fontnames = stripSlashes($this->params['fontnames']);\n        if (empty($this->params['id'])) {\n            $this->params['id'] = $db->insertObject($obj, 'htmleditor_' . $this->params['editor']);\n        } else {\n            $db->updateObject($obj, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        if ($this->params['active']) {\n            $this->activate();\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function edit()\n    {\n        expHistory::set('editable', $this->params);\n        $tool = self::getEditorSettings(!empty($this->params['id'])?$this->params['id']:null, $this->params['editor']);\n        if ($tool == null) $tool = new stdClass();\n        $tool->data = !empty($tool->data) ? @stripSlashes($tool->data) : '';\n        $tool->plugins = !empty($tool->plugins) ? @stripSlashes($tool->plugins) : '';\n        $tool->stylesset = !empty($tool->stylesset) ? @stripSlashes($tool->stylesset) : '';\n        $tool->formattags = !empty($tool->formattags) ? @stripSlashes($tool->formattags) : '';\n        $tool->fontnames = !empty($tool->fontnames) ? @stripSlashes($tool->fontnames) : '';\n        $skins_dir = opendir(BASE . 'external/editors/' . $this->params['editor'] . '/skins');\n        $skins = array();\n        while (($skin = readdir($skins_dir)) !== false) {\n            if ($skin != '.' && $skin != '..') {\n                $skins[] = $skin;\n            }\n        }\n        assign_to_template(\n            array(\n                'record' => $tool,\n                'skins'  => $skins,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function delete()\n    {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        @$db->delete('htmleditor_' . $this->params['editor'], \"id=\" . $this->params['id']);\n        expHistory::returnTo('manageable');\n    }\n\n    function activate()\n    {\n        global $db;\n\n        $db->toggle('htmleditor_' . $this->params['editor'], \"active\", 'active=1');\n        if ($this->params['id'] != \"default\") {\n            $active = self::getEditorSettings($this->params['id'], $this->params['editor']);\n            $active->active = 1;\n            $db->updateObject($active, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function preview()\n    {\n        if ($this->params['id'] == 0) { // we want the default editor\n            $demo = new stdClass();\n            $demo->id = 0;\n            $demo->name = \"Default\";\n            if ($this->params['editor'] == 'ckeditor') {\n                $demo->skin = 'kama';\n            } elseif ($this->params['editor'] == 'tinymce') {\n                $demo->skin = 'lightgray';\n            }\n        } else {\n            $demo = self::getEditorSettings($this->params['id'], expString::escape($this->params['editor']));\n        }\n        assign_to_template(\n            array(\n                'demo' => $demo,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    public static function getEditorSettings($settings_id, $editor)\n    {\n        global $db;\n\n        return @$db->selectObject('htmleditor_' . $editor, \"id=\" . $settings_id);\n    }\n\n    public static function getActiveEditorSettings($editor)\n    {\n        global $db;\n\n        return $db->selectObject('htmleditor_' . $editor, 'active=1');\n    }\n\n}\n\n?>\n"], "fixing_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expHTMLEditorController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nclass expHTMLEditorController extends expController\n{\n    protected $manage_permissions = array(\n        'activate' => \"Activate\",\n        'preview'  => \"Preview Editor Toolbars\"\n    );\n    public $requires_login = array(\n        'preview'=>'Preview Editor',\n    );\n\n    static function displayname()\n    {\n        return gt(\"Editors\");\n    }\n\n    static function description()\n    {\n        return gt(\"Mostly for CKEditor\");\n    }\n\n    static function author()\n    {\n        return \"Phillip Ball\";\n    }\n\n    static function hasSources()\n    {\n        return false;\n    }\n\n    static function hasContent()\n    {\n        return false;\n    }\n\n    function __construct($src = null, $params = array())\n    {\n        parent:: __construct($src, $params);\n        if (empty($this->params['editor'])) {\n            $this->params['editor'] = SITE_WYSIWYG_EDITOR;\n        } else {\n            $this->params['editor'] = preg_replace(\"/[^[:alnum:][:space:]]/u\", '', $this->params['editor']);\n        }\n    }\n\n    function manage()\n    {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        if (SITE_WYSIWYG_EDITOR == \"FCKeditor\") {\n            flash('error', gt('FCKeditor is deprecated!'));\n            redirect_to(array(\"module\" => \"administration\", \"action\" => \"configure_site\"));\n        }\n\n        // otherwise, on to the show\n        $configs = $db->selectObjects('htmleditor_' . $this->params['editor'], 1);\n\n        assign_to_template(\n            array(\n                'configs' => $configs,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function update()\n    {\n        global $db;\n\n        $obj = self::getEditorSettings($this->params['id'], $this->params['editor']);\n        $obj->name = $this->params['name'];\n        $obj->data = stripSlashes($this->params['data']);\n        $obj->skin = $this->params['skin'];\n        $obj->scayt_on = $this->params['scayt_on'];\n        $obj->paste_word = $this->params['paste_word'];\n        $obj->plugins = stripSlashes($this->params['plugins']);\n        $obj->stylesset = stripSlashes($this->params['stylesset']);\n        $obj->formattags = stripSlashes($this->params['formattags']);\n        $obj->fontnames = stripSlashes($this->params['fontnames']);\n        if (empty($this->params['id'])) {\n            $this->params['id'] = $db->insertObject($obj, 'htmleditor_' . $this->params['editor']);\n        } else {\n            $db->updateObject($obj, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        if ($this->params['active']) {\n            $this->activate();\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function edit()\n    {\n        expHistory::set('editable', $this->params);\n        $tool = self::getEditorSettings(!empty($this->params['id'])?$this->params['id']:null, $this->params['editor']);\n        if ($tool == null) $tool = new stdClass();\n        $tool->data = !empty($tool->data) ? @stripSlashes($tool->data) : '';\n        $tool->plugins = !empty($tool->plugins) ? @stripSlashes($tool->plugins) : '';\n        $tool->stylesset = !empty($tool->stylesset) ? @stripSlashes($tool->stylesset) : '';\n        $tool->formattags = !empty($tool->formattags) ? @stripSlashes($tool->formattags) : '';\n        $tool->fontnames = !empty($tool->fontnames) ? @stripSlashes($tool->fontnames) : '';\n        $skins_dir = opendir(BASE . 'external/editors/' . $this->params['editor'] . '/skins');\n        $skins = array();\n        while (($skin = readdir($skins_dir)) !== false) {\n            if ($skin != '.' && $skin != '..') {\n                $skins[] = $skin;\n            }\n        }\n        assign_to_template(\n            array(\n                'record' => $tool,\n                'skins'  => $skins,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function delete()\n    {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        @$db->delete('htmleditor_' . $this->params['editor'], \"id=\" . $this->params['id']);\n        expHistory::returnTo('manageable');\n    }\n\n    function activate()\n    {\n        global $db;\n\n        $db->toggle('htmleditor_' . $this->params['editor'], \"active\", 'active=1');\n        if ($this->params['id'] != \"default\") {\n            $active = self::getEditorSettings($this->params['id'], $this->params['editor']);\n            $active->active = 1;\n            $db->updateObject($active, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function preview()\n    {\n        if ($this->params['id'] == 0) { // we want the default editor\n            $demo = new stdClass();\n            $demo->id = 0;\n            $demo->name = \"Default\";\n            if ($this->params['editor'] == 'ckeditor') {\n                $demo->skin = 'kama';\n            } elseif ($this->params['editor'] == 'tinymce') {\n                $demo->skin = 'lightgray';\n            }\n        } else {\n            $demo = self::getEditorSettings($this->params['id'], $this->params['editor']);\n        }\n        assign_to_template(\n            array(\n                'demo' => $demo,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    public static function getEditorSettings($settings_id, $editor)\n    {\n        global $db;\n\n        return @$db->selectObject('htmleditor_' . $editor, \"id=\" . $settings_id);\n    }\n\n    public static function getActiveEditorSettings($editor)\n    {\n        global $db;\n\n        return $db->selectObject('htmleditor_' . $editor, 'active=1');\n    }\n\n}\n\n?>\n"], "filenames": ["framework/modules/core/controllers/expHTMLEditorController.php"], "buggy_code_start_loc": [64], "buggy_code_end_loc": [175], "fixing_code_start_loc": [65], "fixing_code_end_loc": [177], "type": "CWE-200", "message": "In /framework/modules/core/controllers/expHTMLEditorController.php of Exponent CMS 2.4.0, untrusted input is used to construct a table name, and in the selectObject method in mysqli class, table names are wrapped with a character that common filters do not filter, allowing for SQL Injection. Impact is Information Disclosure.", "other": {"cve": {"id": "CVE-2016-9184", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-04T10:59:04.007", "lastModified": "2016-11-29T18:38:18.137", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In /framework/modules/core/controllers/expHTMLEditorController.php of Exponent CMS 2.4.0, untrusted input is used to construct a table name, and in the selectObject method in mysqli class, table names are wrapped with a character that common filters do not filter, allowing for SQL Injection. Impact is Information Disclosure."}, {"lang": "es", "value": "En /framework/modules/core/controllers/expHTMLEditorController.php de Exponent CMS 2.4.0, la entrada no confiable se usa para construir un nombre de tabla, y en el m\u00e9todo selectObject en la clase mysqli, los nombres de tabla son envueltos con un car\u00e1cter que los archivos comunes no filtran, permitiendo la inyecci\u00f3n de SQL. El impacto es Information Disclosure."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}, {"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFEAA82F-83B2-49B8-B860-2F18C3C66321"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94227", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/0ce8b94d745b818bd207933d9a2e7f32587c2c89", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/0ce8b94d745b818bd207933d9a2e7f32587c2c89"}}