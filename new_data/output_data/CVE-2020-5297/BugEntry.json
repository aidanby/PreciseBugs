{"buggy_code": ["<?php namespace Cms\\Widgets;\n\nuse Str;\nuse Url;\nuse File;\nuse Lang;\nuse Input;\nuse Request;\nuse Response;\nuse Cms\\Classes\\Theme;\nuse Cms\\Classes\\Asset;\nuse Backend\\Classes\\WidgetBase;\nuse ApplicationException;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse October\\Rain\\Filesystem\\Definitions as FileDefinitions;\nuse RecursiveIteratorIterator;\nuse RecursiveDirectoryIterator;\nuse DirectoryIterator;\nuse Exception;\n\n/**\n * CMS asset list widget.\n *\n * @package october\\cms\n * @author Alexey Bobkov, Samuel Georges\n */\nclass AssetList extends WidgetBase\n{\n    use \\Backend\\Traits\\SelectableWidget;\n\n    protected $searchTerm = false;\n\n    protected $theme;\n\n    /**\n     * @var string Message to display when there are no records in the list.\n     */\n    public $noRecordsMessage = 'cms::lang.asset.no_list_records';\n\n    /**\n     * @var string Message to display when the Delete button is clicked.\n     */\n    public $deleteConfirmation = 'cms::lang.asset.delete_confirm';\n\n    /**\n     * @var array Valid asset file extensions\n     */\n    protected $assetExtensions;\n\n    public function __construct($controller, $alias)\n    {\n        $this->alias = $alias;\n        $this->theme = Theme::getEditTheme();\n        $this->selectionInputName = 'file';\n        $this->assetExtensions = FileDefinitions::get('assetExtensions');\n\n        parent::__construct($controller, []);\n\n        $this->bindToController();\n\n        $this->checkUploadPostback();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    protected function loadAssets()\n    {\n        $this->addCss('css/assetlist.css', 'core');\n        $this->addJs('js/assetlist.js', 'core');\n    }\n\n    /**\n     * Renders the widget.\n     * @return string\n     */\n    public function render()\n    {\n        return $this->makePartial('body', [\n           'data' => $this->getData()\n        ]);\n    }\n\n    //\n    // Event handlers\n    //\n\n    public function onOpenDirectory()\n    {\n        $path = Input::get('path');\n        if (!$this->validatePath($path)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        $delay = Input::get('delay');\n        if ($delay) {\n            usleep(1000000*$delay);\n        }\n\n        $this->putSession('currentPath', $path);\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onRefresh()\n    {\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onUpdate()\n    {\n        $this->extendSelection();\n\n        return $this->onRefresh();\n    }\n\n    public function onDeleteFiles()\n    {\n        $this->validateRequestTheme();\n\n        $fileList = Request::input('file');\n        $error = null;\n        $deleted = [];\n\n        try {\n            $assetsPath = $this->getAssetsPath();\n\n            foreach ($fileList as $path => $selected) {\n                if ($selected) {\n                    if (!$this->validatePath($path)) {\n                        throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n                    }\n\n                    $fullPath = $assetsPath.'/'.$path;\n                    if (File::exists($fullPath)) {\n                        if (!File::isDirectory($fullPath)) {\n                            if (!@File::delete($fullPath)) {\n                                throw new ApplicationException(Lang::get(\n                                    'cms::lang.asset.error_deleting_file',\n                                    ['name' => $path]\n                                ));\n                            }\n                        }\n                        else {\n                            $empty = File::isDirectoryEmpty($fullPath);\n                            if ($empty === false) {\n                                throw new ApplicationException(Lang::get(\n                                    'cms::lang.asset.error_deleting_dir_not_empty',\n                                    ['name' => $path]\n                                ));\n                            }\n\n                            if (!@rmdir($fullPath)) {\n                                throw new ApplicationException(Lang::get(\n                                    'cms::lang.asset.error_deleting_dir',\n                                    ['name' => $path]\n                                ));\n                            }\n                        }\n\n                        $deleted[] = $path;\n                        $this->removeSelection($path);\n                    }\n                }\n            }\n        }\n        catch (Exception $ex) {\n            $error = $ex->getMessage();\n        }\n\n        return [\n            'deleted' => $deleted,\n            'error'   => $error,\n            'theme'   => Request::input('theme')\n        ];\n    }\n\n    public function onLoadRenamePopup()\n    {\n        $this->validateRequestTheme();\n\n        $path = Input::get('renamePath');\n        if (!$this->validatePath($path)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        $this->vars['originalPath'] = $path;\n        $this->vars['name'] = basename($path);\n\n        return $this->makePartial('rename_form');\n    }\n\n    public function onApplyName()\n    {\n        $this->validateRequestTheme();\n\n        $newName = trim(Input::get('name'));\n        if (!strlen($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.name_cant_be_empty'));\n        }\n\n        if (!$this->validatePath($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        if (!$this->validateName($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_name'));\n        }\n\n        $originalPath = Input::get('originalPath');\n        if (!$this->validatePath($originalPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        $originalFullPath = $this->getFullPath($originalPath);\n        if (!file_exists($originalFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.original_not_found'));\n        }\n\n        if (!is_dir($originalFullPath) && !$this->validateFileType($newName)) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.asset.type_not_allowed',\n                ['allowed_types' => implode(', ', $this->assetExtensions)]\n            ));\n        }\n\n        $newFullPath = $this->getFullPath(dirname($originalPath).'/'.$newName);\n        if (file_exists($newFullPath) && $newFullPath !== $originalFullPath) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.already_exists'));\n        }\n\n        if (!@rename($originalFullPath, $newFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.error_renaming'));\n        }\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onLoadNewDirPopup()\n    {\n        $this->validateRequestTheme();\n\n        return $this->makePartial('new_dir_form');\n    }\n\n    public function onNewDirectory()\n    {\n        $this->validateRequestTheme();\n\n        $newName = trim(Input::get('name'));\n        if (!strlen($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.name_cant_be_empty'));\n        }\n\n        if (!$this->validatePath($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        if (!$this->validateName($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_name'));\n        }\n\n        $newFullPath = $this->getCurrentPath().'/'.$newName;\n        if (file_exists($newFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.already_exists'));\n        }\n\n        if (!File::makeDirectory($newFullPath)) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.cms_object.error_creating_directory',\n                ['name' => $newName]\n            ));\n        }\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onLoadMovePopup()\n    {\n        $this->validateRequestTheme();\n\n        $fileList = Request::input('file');\n        $directories = [];\n\n        $selectedList = array_filter($fileList, function ($value) {\n            return $value == 1;\n        });\n\n        $this->listDestinationDirectories($directories, $selectedList);\n\n        $this->vars['directories'] = $directories;\n        $this->vars['selectedList'] = base64_encode(json_encode(array_keys($selectedList)));\n\n        return $this->makePartial('move_form');\n    }\n\n    public function onMove()\n    {\n        $this->validateRequestTheme();\n\n        $selectedList = Input::get('selectedList');\n        if (!strlen($selectedList)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.selected_files_not_found'));\n        }\n\n        $destinationDir = Input::get('dest');\n        if (!strlen($destinationDir)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.select_destination_dir'));\n        }\n\n        $destinationFullPath = $this->getFullPath($destinationDir);\n        if (!file_exists($destinationFullPath) || !is_dir($destinationFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.destination_not_found'));\n        }\n\n        $list = @json_decode(@base64_decode($selectedList));\n        if ($list === false) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.selected_files_not_found'));\n        }\n\n        foreach ($list as $path) {\n            if (!$this->validatePath($path)) {\n                throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n            }\n\n            $basename = basename($path);\n            $originalFullPath = $this->getFullPath($path);\n            $newFullPath = rtrim($destinationFullPath, '/').'/'.$basename;\n            $safeDir = $this->getAssetsPath();\n\n            if ($originalFullPath == $newFullPath) {\n                continue;\n            }\n\n            if (is_file($originalFullPath)) {\n                if (!@File::move($originalFullPath, $newFullPath)) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_moving_file',\n                        ['file' => $basename]\n                    ));\n                }\n            }\n            elseif (is_dir($originalFullPath)) {\n                if (!@File::copyDirectory($originalFullPath, $newFullPath)) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_moving_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n\n                if (strpos($originalFullPath, '../') !== false) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_deleting_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n\n                if (strpos($originalFullPath, $safeDir) !== 0) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_deleting_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n\n                if (!@File::deleteDirectory($originalFullPath)) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_deleting_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n            }\n        }\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onSearch()\n    {\n        $this->setSearchTerm(Input::get('search'));\n        $this->extendSelection();\n\n        return $this->onRefresh();\n    }\n\n    /*\n     * Methods for the internal use\n     */\n\n    protected function getData()\n    {\n        $assetsPath = $this->getAssetsPath();\n\n        if (!file_exists($assetsPath) || !is_dir($assetsPath)) {\n            if (!File::makeDirectory($assetsPath)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.error_creating_directory',\n                    ['name' => $assetsPath]\n                ));\n            }\n        }\n\n        $searchTerm = Str::lower($this->getSearchTerm());\n\n        if (!strlen($searchTerm)) {\n            $currentPath = $this->getCurrentPath();\n            return $this->getDirectoryContents(\n                new DirectoryIterator($currentPath)\n            );\n        }\n\n        return $this->findFiles();\n    }\n\n    protected function getAssetsPath()\n    {\n        return $this->theme->getPath().'/assets';\n    }\n\n    protected function getThemeFileUrl($path)\n    {\n        return Url::to('themes/'.$this->theme->getDirName().'/assets'.$path);\n    }\n\n    public function getCurrentRelativePath()\n    {\n        $path = $this->getSession('currentPath', '/');\n\n        if (!$this->validatePath($path)) {\n            return null;\n        }\n\n        if ($path == '.') {\n            return null;\n        }\n\n        return ltrim($path, '/');\n    }\n\n    protected function getCurrentPath()\n    {\n        $assetsPath = $this->getAssetsPath();\n\n        $path = $assetsPath.'/'.$this->getCurrentRelativePath();\n        if (!is_dir($path)) {\n            return $assetsPath;\n        }\n\n        return $path;\n    }\n\n    protected function getRelativePath($path)\n    {\n        $prefix = $this->getAssetsPath();\n\n        if (substr($path, 0, strlen($prefix)) == $prefix) {\n            $path = substr($path, strlen($prefix));\n        }\n\n        return $path;\n    }\n\n    protected function getFullPath($path)\n    {\n        return $this->getAssetsPath().'/'.ltrim($path, '/');\n    }\n\n    protected function validatePath($path)\n    {\n        if (!preg_match('/^[0-9a-z\\.\\s_\\-\\/]+$/i', $path)) {\n            return false;\n        }\n\n        if (strpos($path, '..') !== false || strpos($path, './') !== false) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function validateName($name)\n    {\n        if (!preg_match('/^[0-9a-z\\.\\s_\\-]+$/i', $name)) {\n            return false;\n        }\n\n        if (strpos($name, '..') !== false) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function getDirectoryContents($dir)\n    {\n        $editableAssetTypes = Asset::getEditableExtensions();\n\n        $result = [];\n        $files = [];\n\n        foreach ($dir as $node) {\n            if (substr($node->getFileName(), 0, 1) == '.') {\n                continue;\n            }\n\n            if ($node->isDir() && !$node->isDot()) {\n                $result[$node->getFilename()] = (object)[\n                    'type'     => 'directory',\n                    'path'     => File::normalizePath($this->getRelativePath($node->getPathname())),\n                    'name'     => $node->getFilename(),\n                    'editable' => false\n                ];\n            }\n            elseif ($node->isFile()) {\n                $files[] = (object)[\n                    'type'     => 'file',\n                    'path'     => File::normalizePath($this->getRelativePath($node->getPathname())),\n                    'name'     => $node->getFilename(),\n                    'editable' => in_array(strtolower($node->getExtension()), $editableAssetTypes)\n                ];\n            }\n        }\n\n        foreach ($files as $file) {\n            $result[] = $file;\n        }\n\n        return $result;\n    }\n\n    protected function listDestinationDirectories(&$result, $excludeList, $startDir = null, $level = 0)\n    {\n        if ($startDir === null) {\n            $startDir = $this->getAssetsPath();\n\n            $result['/'] = 'assets';\n            $level = 1;\n        }\n\n        $dirs = new DirectoryIterator($startDir);\n        foreach ($dirs as $node) {\n            if (substr($node->getFileName(), 0, 1) == '.') {\n                continue;\n            }\n\n            if ($node->isDir() && !$node->isDot()) {\n                $fullPath = $node->getPathname();\n                $relativePath = $this->getRelativePath($fullPath);\n                if (array_key_exists($relativePath, $excludeList)) {\n                    continue;\n                }\n\n                $result[$relativePath] = str_repeat('&nbsp;', $level*4).$node->getFilename();\n\n                $this->listDestinationDirectories($result, $excludeList, $fullPath, $level+1);\n            }\n        }\n    }\n\n    protected function getSearchTerm()\n    {\n        return $this->searchTerm !== false ? $this->searchTerm : $this->getSession('search');\n    }\n\n    protected function isSearchMode()\n    {\n        return strlen($this->getSearchTerm());\n    }\n\n    protected function getThemeSessionKey($prefix)\n    {\n        return $prefix.$this->theme->getDirName();\n    }\n\n    protected function getUpPath()\n    {\n        $path = $this->getCurrentRelativePath();\n        if (!strlen(rtrim(ltrim($path, '/'), '/'))) {\n            return null;\n        }\n\n        return dirname($path);\n    }\n\n    protected function validateRequestTheme()\n    {\n        if ($this->theme->getDirName() != Request::input('theme')) {\n            throw new ApplicationException(trans('cms::lang.theme.edit.not_match'));\n        }\n    }\n\n    /**\n     * Check for valid asset file extension\n     * @param string\n     * @return bool\n     */\n    protected function validateFileType($name)\n    {\n        $extension = strtolower(File::extension($name));\n\n        if (!in_array($extension, $this->assetExtensions)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks the current request to see if it is a postback containing a file upload\n     * for this particular widget.\n     */\n    protected function checkUploadPostback()\n    {\n        $fileName = null;\n\n        try {\n            $uploadedFile = Input::file('file_data');\n\n            if (!is_object($uploadedFile)) {\n                return;\n            }\n\n            $fileName = $uploadedFile->getClientOriginalName();\n\n            /*\n             * Check valid upload\n             */\n            if (!$uploadedFile->isValid()) {\n                throw new ApplicationException(Lang::get('cms::lang.asset.file_not_valid'));\n            }\n\n            /*\n             * Check file size\n             */\n            $maxSize = UploadedFile::getMaxFilesize();\n            if ($uploadedFile->getSize() > $maxSize) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.asset.too_large',\n                    ['max_size' => File::sizeToString($maxSize)]\n                ));\n            }\n\n            /*\n             * Check for valid file extensions\n             */\n            if (!$this->validateFileType($fileName)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.asset.type_not_allowed',\n                    ['allowed_types' => implode(', ', $this->assetExtensions)]\n                ));\n            }\n\n            /*\n             * Accept the uploaded file\n             */\n            $uploadedFile = $uploadedFile->move($this->getCurrentPath(), $uploadedFile->getClientOriginalName());\n\n            File::chmod($uploadedFile->getRealPath());\n\n            $response = Response::make('success');\n        }\n        catch (Exception $ex) {\n            $message = $fileName !== null\n                ? Lang::get('cms::lang.asset.error_uploading_file', ['name' => $fileName, 'error' => $ex->getMessage()])\n                : $ex->getMessage();\n\n            $response = Response::make($message);\n        }\n\n        // Override the controller response\n        $this->controller->setResponse($response);\n    }\n\n    protected function setSearchTerm($term)\n    {\n        $this->searchTerm = trim($term);\n        $this->putSession('search', $this->searchTerm);\n    }\n\n    protected function findFiles()\n    {\n        $iterator = new RecursiveIteratorIterator(\n            new RecursiveDirectoryIterator($this->getAssetsPath(), RecursiveDirectoryIterator::SKIP_DOTS),\n            RecursiveIteratorIterator::SELF_FIRST,\n            RecursiveIteratorIterator::CATCH_GET_CHILD\n        );\n\n        $editableAssetTypes = Asset::getEditableExtensions();\n        $searchTerm = Str::lower($this->getSearchTerm());\n        $words = explode(' ', $searchTerm);\n\n        $result = [];\n        foreach ($iterator as $item) {\n            if (!$item->isDir()) {\n                if (substr($item->getFileName(), 0, 1) == '.') {\n                    continue;\n                }\n\n                $path = $this->getRelativePath($item->getPathname());\n\n                if ($this->pathMatchesSearch($words, $path)) {\n                    $result[] = (object)[\n                        'type'     => 'file',\n                        'path'     => File::normalizePath($path),\n                        'name'     => $item->getFilename(),\n                        'editable' => in_array(strtolower($item->getExtension()), $editableAssetTypes)\n                    ];\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    protected function pathMatchesSearch(&$words, $path)\n    {\n        foreach ($words as $word) {\n            $word = trim($word);\n            if (!strlen($word)) {\n                continue;\n            }\n\n            if (!Str::contains(Str::lower($path), $word)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"], "fixing_code": ["<?php namespace Cms\\Widgets;\n\nuse Str;\nuse Url;\nuse File;\nuse Lang;\nuse Input;\nuse Request;\nuse Response;\nuse Cms\\Classes\\Theme;\nuse Cms\\Classes\\Asset;\nuse Backend\\Classes\\WidgetBase;\nuse ApplicationException;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse October\\Rain\\Filesystem\\Definitions as FileDefinitions;\nuse RecursiveIteratorIterator;\nuse RecursiveDirectoryIterator;\nuse DirectoryIterator;\nuse Exception;\n\n/**\n * CMS asset list widget.\n *\n * @package october\\cms\n * @author Alexey Bobkov, Samuel Georges\n */\nclass AssetList extends WidgetBase\n{\n    use \\Backend\\Traits\\SelectableWidget;\n\n    protected $searchTerm = false;\n\n    protected $theme;\n\n    /**\n     * @var string Message to display when there are no records in the list.\n     */\n    public $noRecordsMessage = 'cms::lang.asset.no_list_records';\n\n    /**\n     * @var string Message to display when the Delete button is clicked.\n     */\n    public $deleteConfirmation = 'cms::lang.asset.delete_confirm';\n\n    /**\n     * @var array Valid asset file extensions\n     */\n    protected $assetExtensions;\n\n    public function __construct($controller, $alias)\n    {\n        $this->alias = $alias;\n        $this->theme = Theme::getEditTheme();\n        $this->selectionInputName = 'file';\n        $this->assetExtensions = FileDefinitions::get('assetExtensions');\n\n        parent::__construct($controller, []);\n\n        $this->bindToController();\n\n        $this->checkUploadPostback();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    protected function loadAssets()\n    {\n        $this->addCss('css/assetlist.css', 'core');\n        $this->addJs('js/assetlist.js', 'core');\n    }\n\n    /**\n     * Renders the widget.\n     * @return string\n     */\n    public function render()\n    {\n        return $this->makePartial('body', [\n           'data' => $this->getData()\n        ]);\n    }\n\n    //\n    // Event handlers\n    //\n\n    public function onOpenDirectory()\n    {\n        $path = Input::get('path');\n        if (!$this->validatePath($path)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        $delay = Input::get('delay');\n        if ($delay) {\n            usleep(1000000*$delay);\n        }\n\n        $this->putSession('currentPath', $path);\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onRefresh()\n    {\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onUpdate()\n    {\n        $this->extendSelection();\n\n        return $this->onRefresh();\n    }\n\n    public function onDeleteFiles()\n    {\n        $this->validateRequestTheme();\n\n        $fileList = Request::input('file');\n        $error = null;\n        $deleted = [];\n\n        try {\n            $assetsPath = $this->getAssetsPath();\n\n            foreach ($fileList as $path => $selected) {\n                if ($selected) {\n                    if (!$this->validatePath($path)) {\n                        throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n                    }\n\n                    $fullPath = $assetsPath.'/'.$path;\n                    if (File::exists($fullPath)) {\n                        if (!File::isDirectory($fullPath)) {\n                            if (!@File::delete($fullPath)) {\n                                throw new ApplicationException(Lang::get(\n                                    'cms::lang.asset.error_deleting_file',\n                                    ['name' => $path]\n                                ));\n                            }\n                        }\n                        else {\n                            $empty = File::isDirectoryEmpty($fullPath);\n                            if ($empty === false) {\n                                throw new ApplicationException(Lang::get(\n                                    'cms::lang.asset.error_deleting_dir_not_empty',\n                                    ['name' => $path]\n                                ));\n                            }\n\n                            if (!@rmdir($fullPath)) {\n                                throw new ApplicationException(Lang::get(\n                                    'cms::lang.asset.error_deleting_dir',\n                                    ['name' => $path]\n                                ));\n                            }\n                        }\n\n                        $deleted[] = $path;\n                        $this->removeSelection($path);\n                    }\n                }\n            }\n        }\n        catch (Exception $ex) {\n            $error = $ex->getMessage();\n        }\n\n        return [\n            'deleted' => $deleted,\n            'error'   => $error,\n            'theme'   => Request::input('theme')\n        ];\n    }\n\n    public function onLoadRenamePopup()\n    {\n        $this->validateRequestTheme();\n\n        $path = Input::get('renamePath');\n        if (!$this->validatePath($path)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        $this->vars['originalPath'] = $path;\n        $this->vars['name'] = basename($path);\n\n        return $this->makePartial('rename_form');\n    }\n\n    public function onApplyName()\n    {\n        $this->validateRequestTheme();\n\n        $newName = trim(Input::get('name'));\n        if (!strlen($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.name_cant_be_empty'));\n        }\n\n        if (!$this->validatePath($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        if (!$this->validateName($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_name'));\n        }\n\n        $originalPath = Input::get('originalPath');\n        if (!$this->validatePath($originalPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        $originalFullPath = $this->getFullPath($originalPath);\n        if (!file_exists($originalFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.original_not_found'));\n        }\n\n        if (!is_dir($originalFullPath) && !$this->validateFileType($newName)) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.asset.type_not_allowed',\n                ['allowed_types' => implode(', ', $this->assetExtensions)]\n            ));\n        }\n\n        $newFullPath = $this->getFullPath(dirname($originalPath).'/'.$newName);\n        if (file_exists($newFullPath) && $newFullPath !== $originalFullPath) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.already_exists'));\n        }\n\n        if (!@rename($originalFullPath, $newFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.error_renaming'));\n        }\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onLoadNewDirPopup()\n    {\n        $this->validateRequestTheme();\n\n        return $this->makePartial('new_dir_form');\n    }\n\n    public function onNewDirectory()\n    {\n        $this->validateRequestTheme();\n\n        $newName = trim(Input::get('name'));\n        if (!strlen($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.name_cant_be_empty'));\n        }\n\n        if (!$this->validatePath($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n        }\n\n        if (!$this->validateName($newName)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.invalid_name'));\n        }\n\n        $newFullPath = $this->getCurrentPath().'/'.$newName;\n        if (file_exists($newFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.already_exists'));\n        }\n\n        if (!File::makeDirectory($newFullPath)) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.cms_object.error_creating_directory',\n                ['name' => $newName]\n            ));\n        }\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onLoadMovePopup()\n    {\n        $this->validateRequestTheme();\n\n        $fileList = Request::input('file');\n        $directories = [];\n\n        $selectedList = array_filter($fileList, function ($value) {\n            return $value == 1;\n        });\n\n        $this->listDestinationDirectories($directories, $selectedList);\n\n        $this->vars['directories'] = $directories;\n        $this->vars['selectedList'] = base64_encode(json_encode(array_keys($selectedList)));\n\n        return $this->makePartial('move_form');\n    }\n\n    public function onMove()\n    {\n        $this->validateRequestTheme();\n\n        $selectedList = Input::get('selectedList');\n        if (!strlen($selectedList)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.selected_files_not_found'));\n        }\n\n        $destinationDir = Input::get('dest');\n        if (!strlen($destinationDir)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.select_destination_dir'));\n        }\n\n        $destinationFullPath = $this->getFullPath($destinationDir);\n        if (!file_exists($destinationFullPath) || !is_dir($destinationFullPath)) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.destination_not_found'));\n        }\n\n        $list = @json_decode(@base64_decode($selectedList));\n        if ($list === false) {\n            throw new ApplicationException(Lang::get('cms::lang.asset.selected_files_not_found'));\n        }\n\n        foreach ($list as $path) {\n            if (!$this->validatePath($path)) {\n                throw new ApplicationException(Lang::get('cms::lang.asset.invalid_path'));\n            }\n\n            $basename = basename($path);\n            $originalFullPath = $this->getFullPath($path);\n            $newFullPath = realpath(rtrim($destinationFullPath, '/')) . '/' . $basename;\n            $safeDir = $this->getAssetsPath();\n\n            if ($originalFullPath == $newFullPath) {\n                continue;\n            }\n\n            if (!starts_with($newFullPath, $safeDir)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.asset.error_moving_file',\n                    ['file' => $basename]\n                ));\n            }\n\n            if (is_file($originalFullPath)) {\n                if (!@File::move($originalFullPath, $newFullPath)) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_moving_file',\n                        ['file' => $basename]\n                    ));\n                }\n            }\n            elseif (is_dir($originalFullPath)) {\n                if (!@File::copyDirectory($originalFullPath, $newFullPath)) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_moving_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n\n                if (strpos($originalFullPath, '../') !== false) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_deleting_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n\n                if (strpos($originalFullPath, $safeDir) !== 0) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_deleting_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n\n                if (!@File::deleteDirectory($originalFullPath)) {\n                    throw new ApplicationException(Lang::get(\n                        'cms::lang.asset.error_deleting_directory',\n                        ['dir' => $basename]\n                    ));\n                }\n            }\n        }\n\n        return [\n            '#'.$this->getId('asset-list') => $this->makePartial('items', ['items' => $this->getData()])\n        ];\n    }\n\n    public function onSearch()\n    {\n        $this->setSearchTerm(Input::get('search'));\n        $this->extendSelection();\n\n        return $this->onRefresh();\n    }\n\n    /*\n     * Methods for the internal use\n     */\n\n    protected function getData()\n    {\n        $assetsPath = $this->getAssetsPath();\n\n        if (!file_exists($assetsPath) || !is_dir($assetsPath)) {\n            if (!File::makeDirectory($assetsPath)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.error_creating_directory',\n                    ['name' => $assetsPath]\n                ));\n            }\n        }\n\n        $searchTerm = Str::lower($this->getSearchTerm());\n\n        if (!strlen($searchTerm)) {\n            $currentPath = $this->getCurrentPath();\n            return $this->getDirectoryContents(\n                new DirectoryIterator($currentPath)\n            );\n        }\n\n        return $this->findFiles();\n    }\n\n    protected function getAssetsPath()\n    {\n        return $this->theme->getPath().'/assets';\n    }\n\n    protected function getThemeFileUrl($path)\n    {\n        return Url::to('themes/'.$this->theme->getDirName().'/assets'.$path);\n    }\n\n    public function getCurrentRelativePath()\n    {\n        $path = $this->getSession('currentPath', '/');\n\n        if (!$this->validatePath($path)) {\n            return null;\n        }\n\n        if ($path == '.') {\n            return null;\n        }\n\n        return ltrim($path, '/');\n    }\n\n    protected function getCurrentPath()\n    {\n        $assetsPath = $this->getAssetsPath();\n\n        $path = $assetsPath.'/'.$this->getCurrentRelativePath();\n        if (!is_dir($path)) {\n            return $assetsPath;\n        }\n\n        return $path;\n    }\n\n    protected function getRelativePath($path)\n    {\n        $prefix = $this->getAssetsPath();\n\n        if (substr($path, 0, strlen($prefix)) == $prefix) {\n            $path = substr($path, strlen($prefix));\n        }\n\n        return $path;\n    }\n\n    protected function getFullPath($path)\n    {\n        return $this->getAssetsPath().'/'.ltrim($path, '/');\n    }\n\n    protected function validatePath($path)\n    {\n        if (!preg_match('/^[0-9a-z\\.\\s_\\-\\/]+$/i', $path)) {\n            return false;\n        }\n\n        if (strpos($path, '..') !== false || strpos($path, './') !== false) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function validateName($name)\n    {\n        if (!preg_match('/^[0-9a-z\\.\\s_\\-]+$/i', $name)) {\n            return false;\n        }\n\n        if (strpos($name, '..') !== false) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function getDirectoryContents($dir)\n    {\n        $editableAssetTypes = Asset::getEditableExtensions();\n\n        $result = [];\n        $files = [];\n\n        foreach ($dir as $node) {\n            if (substr($node->getFileName(), 0, 1) == '.') {\n                continue;\n            }\n\n            if ($node->isDir() && !$node->isDot()) {\n                $result[$node->getFilename()] = (object)[\n                    'type'     => 'directory',\n                    'path'     => File::normalizePath($this->getRelativePath($node->getPathname())),\n                    'name'     => $node->getFilename(),\n                    'editable' => false\n                ];\n            }\n            elseif ($node->isFile()) {\n                $files[] = (object)[\n                    'type'     => 'file',\n                    'path'     => File::normalizePath($this->getRelativePath($node->getPathname())),\n                    'name'     => $node->getFilename(),\n                    'editable' => in_array(strtolower($node->getExtension()), $editableAssetTypes)\n                ];\n            }\n        }\n\n        foreach ($files as $file) {\n            $result[] = $file;\n        }\n\n        return $result;\n    }\n\n    protected function listDestinationDirectories(&$result, $excludeList, $startDir = null, $level = 0)\n    {\n        if ($startDir === null) {\n            $startDir = $this->getAssetsPath();\n\n            $result['/'] = 'assets';\n            $level = 1;\n        }\n\n        $dirs = new DirectoryIterator($startDir);\n        foreach ($dirs as $node) {\n            if (substr($node->getFileName(), 0, 1) == '.') {\n                continue;\n            }\n\n            if ($node->isDir() && !$node->isDot()) {\n                $fullPath = $node->getPathname();\n                $relativePath = $this->getRelativePath($fullPath);\n                if (array_key_exists($relativePath, $excludeList)) {\n                    continue;\n                }\n\n                $result[$relativePath] = str_repeat('&nbsp;', $level*4).$node->getFilename();\n\n                $this->listDestinationDirectories($result, $excludeList, $fullPath, $level+1);\n            }\n        }\n    }\n\n    protected function getSearchTerm()\n    {\n        return $this->searchTerm !== false ? $this->searchTerm : $this->getSession('search');\n    }\n\n    protected function isSearchMode()\n    {\n        return strlen($this->getSearchTerm());\n    }\n\n    protected function getThemeSessionKey($prefix)\n    {\n        return $prefix.$this->theme->getDirName();\n    }\n\n    protected function getUpPath()\n    {\n        $path = $this->getCurrentRelativePath();\n        if (!strlen(rtrim(ltrim($path, '/'), '/'))) {\n            return null;\n        }\n\n        return dirname($path);\n    }\n\n    protected function validateRequestTheme()\n    {\n        if ($this->theme->getDirName() != Request::input('theme')) {\n            throw new ApplicationException(trans('cms::lang.theme.edit.not_match'));\n        }\n    }\n\n    /**\n     * Check for valid asset file extension\n     * @param string\n     * @return bool\n     */\n    protected function validateFileType($name)\n    {\n        $extension = strtolower(File::extension($name));\n\n        if (!in_array($extension, $this->assetExtensions)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks the current request to see if it is a postback containing a file upload\n     * for this particular widget.\n     */\n    protected function checkUploadPostback()\n    {\n        $fileName = null;\n\n        try {\n            $uploadedFile = Input::file('file_data');\n\n            if (!is_object($uploadedFile)) {\n                return;\n            }\n\n            $fileName = $uploadedFile->getClientOriginalName();\n\n            /*\n             * Check valid upload\n             */\n            if (!$uploadedFile->isValid()) {\n                throw new ApplicationException(Lang::get('cms::lang.asset.file_not_valid'));\n            }\n\n            /*\n             * Check file size\n             */\n            $maxSize = UploadedFile::getMaxFilesize();\n            if ($uploadedFile->getSize() > $maxSize) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.asset.too_large',\n                    ['max_size' => File::sizeToString($maxSize)]\n                ));\n            }\n\n            /*\n             * Check for valid file extensions\n             */\n            if (!$this->validateFileType($fileName)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.asset.type_not_allowed',\n                    ['allowed_types' => implode(', ', $this->assetExtensions)]\n                ));\n            }\n\n            /*\n             * Accept the uploaded file\n             */\n            $uploadedFile = $uploadedFile->move($this->getCurrentPath(), $uploadedFile->getClientOriginalName());\n\n            File::chmod($uploadedFile->getRealPath());\n\n            $response = Response::make('success');\n        }\n        catch (Exception $ex) {\n            $message = $fileName !== null\n                ? Lang::get('cms::lang.asset.error_uploading_file', ['name' => $fileName, 'error' => $ex->getMessage()])\n                : $ex->getMessage();\n\n            $response = Response::make($message);\n        }\n\n        // Override the controller response\n        $this->controller->setResponse($response);\n    }\n\n    protected function setSearchTerm($term)\n    {\n        $this->searchTerm = trim($term);\n        $this->putSession('search', $this->searchTerm);\n    }\n\n    protected function findFiles()\n    {\n        $iterator = new RecursiveIteratorIterator(\n            new RecursiveDirectoryIterator($this->getAssetsPath(), RecursiveDirectoryIterator::SKIP_DOTS),\n            RecursiveIteratorIterator::SELF_FIRST,\n            RecursiveIteratorIterator::CATCH_GET_CHILD\n        );\n\n        $editableAssetTypes = Asset::getEditableExtensions();\n        $searchTerm = Str::lower($this->getSearchTerm());\n        $words = explode(' ', $searchTerm);\n\n        $result = [];\n        foreach ($iterator as $item) {\n            if (!$item->isDir()) {\n                if (substr($item->getFileName(), 0, 1) == '.') {\n                    continue;\n                }\n\n                $path = $this->getRelativePath($item->getPathname());\n\n                if ($this->pathMatchesSearch($words, $path)) {\n                    $result[] = (object)[\n                        'type'     => 'file',\n                        'path'     => File::normalizePath($path),\n                        'name'     => $item->getFilename(),\n                        'editable' => in_array(strtolower($item->getExtension()), $editableAssetTypes)\n                    ];\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    protected function pathMatchesSearch(&$words, $path)\n    {\n        foreach ($words as $word) {\n            $word = trim($word);\n            if (!strlen($word)) {\n                continue;\n            }\n\n            if (!Str::contains(Str::lower($path), $word)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"], "filenames": ["modules/cms/widgets/AssetList.php"], "buggy_code_start_loc": [336], "buggy_code_end_loc": [340], "fixing_code_start_loc": [336], "fixing_code_end_loc": [348], "type": "CWE-610", "message": "In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to upload jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml files to any directory of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).", "other": {"cve": {"id": "CVE-2020-5297", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-03T22:15:11.753", "lastModified": "2022-06-30T14:46:30.487", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to upload jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml files to any directory of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466)."}, {"lang": "es", "value": "En OctoberCMS (paquete de compositor october/october) versiones desde 1.0.319 y anteriores a 1.0.466, un atacante puede explotar esta vulnerabilidad para cargar archivos jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml hacia cualquier directorio de un servidor de October CMS. La vulnerabilidad solo es explotable por un usuario de backend autenticado con el permiso \"cms.manage_assets\". El problema ha sido parcheado en Build 466 (versi\u00f3n v1.0.466)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.7, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.4, "baseSeverity": "LOW"}, "exploitabilityScore": 1.7, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-610"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-73"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:octobercms:october:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.319", "versionEndExcluding": "1.0.466", "matchCriteriaId": "E3FE9FB6-7669-4FDA-8099-2953B2E0B15C"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/158730/October-CMS-Build-465-XSS-File-Read-File-Deletion-CSV-Injection.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2020/Aug/2", "source": "security-advisories@github.com", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/octobercms/october/commit/6711dae8ef70caf0e94cec434498012a2ccd86b8", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/octobercms/october/security/advisories/GHSA-9722-rr68-rfpg", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/octobercms/october/commit/6711dae8ef70caf0e94cec434498012a2ccd86b8"}}