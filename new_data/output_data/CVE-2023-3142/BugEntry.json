{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\Content;\n\n\nuse Illuminate\\Support\\Facades\\DB;\nuse MicroweberPackages\\Category\\Models\\CategoryItem;\nuse MicroweberPackages\\CustomField\\Models\\CustomField;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\Menu\\Menu;\nuse MicroweberPackages\\App\\Http\\Controllers\\FrontendController;\nuse MicroweberPackages\\Multilanguage\\MultilanguageHelpers;\n\nuse MicroweberPackages\\Content\\Models\\ContentRelated;\n\n\nclass ContentManagerHelpers extends ContentManagerCrud\n{\n    public function add_content_to_menu($content_id, $menu_id = false)\n    {\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        $new_item = false;\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        if (isset($content_id['id'])) {\n            $content_id = $content_id['id'];\n        }\n\n        $content_id = intval($content_id);\n        if ($content_id == 0) {\n            return;\n        }\n        if ($menu_id != false) {\n            //  $_REQUEST['add_content_to_menu'] = array( $menu_id);\n        }\n\n        $menus = 'menus';\n        if (isset($_REQUEST['add_content_to_menu']) and is_array($_REQUEST['add_content_to_menu'])) {\n            $add_to_menus = $_REQUEST['add_content_to_menu'];\n            $add_to_menus_int = array();\n            foreach ($add_to_menus as $value) {\n                if ($value == 'remove_from_all') {\n                    Menu::where('content_id', $content_id)->where('item_type', 'menu_item')->delete();\n                    $this->app->cache_manager->delete('menus');\n                }\n                $value = intval($value);\n                if ($value > 0) {\n                    $add_to_menus_int[] = $value;\n                }\n            }\n        }\n\n        $add_under_parent_page = false;\n        $content_data = false;\n\n        if (isset($_REQUEST['add_content_to_menu_auto_parent']) and ($_REQUEST['add_content_to_menu_auto_parent']) != false) {\n            $add_under_parent_page = true;\n            $content_data = $this->get_by_id($content_id);\n            if ($content_data['is_active'] != 1) {\n                return false;\n            }\n        }\n        if (!isset($add_to_menus_int) or empty($add_to_menus_int)) {\n            if ($menu_id != false) {\n                $add_to_menus_int[] = intval($menu_id);\n            }\n        }\n\n        if (isset($add_to_menus_int) and is_array($add_to_menus_int)) {\n            Menu::where('content_id', $content_id)\n                ->where('item_type', 'menu_item')\n                ->whereNotIn('parent_id', $add_to_menus_int)\n                ->delete();\n            foreach ($add_to_menus_int as $value) {\n                //  $check = $this->app->menu_manager->get_menu_items(\"parent_id={$value}&content_id=$content_id\");\n\n                $check = Menu::where('content_id', $content_id)\n                    ->where('item_type', 'menu_item')\n                    ->where('parent_id', $value)\n                    ->count();\n\n                if ($check == 0) {\n                    $save = array();\n                    $save['item_type'] = 'menu_item';\n                    $save['is_active'] = 1;\n                    $save['parent_id'] = $value;\n                    $save['position'] = 999999;\n                    if ($add_under_parent_page != false and is_array($content_data) and isset($content_data['parent'])) {\n                        $parent_cont = $content_data['parent'];\n                        $check_par = $this->app->menu_manager->get_menu_items(\"limit=1&one=1&content_id=$parent_cont\");\n                        if (is_array($check_par) and isset($check_par['id'])) {\n                            $save['parent_id'] = $check_par['id'];\n                        }\n                    }\n\n                    $save['url'] = '';\n                    $save['content_id'] = $content_id;\n\n                    $new_item = $this->app->database_manager->save($menus, $save);\n\n                    $this->app->cache_manager->delete('menus');\n\n                    $this->app->cache_manager->delete('menus/' . $save['parent_id']);\n\n                    $this->app->cache_manager->delete('menus/' . $value);\n\n                    $this->app->cache_manager->delete('content/' . $content_id);\n                }\n            }\n\n            $this->app->cache_manager->delete('menus');\n            $this->app->cache_manager->delete('menus');\n        }\n\n        return $new_item;\n    }\n\n    public function delete($data)\n    {\n        $to_trash = true;\n        $to_untrash = false;\n\n        if (!is_array($data)) {\n            $del_data = array();\n            $del_data['id'] = intval($data);\n            $data = $del_data;\n            $to_trash = false;\n        }\n\n        if (isset($data['forever']) or isset($data['delete_forever'])) {\n            $to_trash = false;\n        }\n\n        if (isset($data['undelete'])) {\n            $to_trash = true;\n            $to_untrash = true;\n        }\n\n        $del_ids = array();\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $del_ids[] = $c_id;\n            if ($to_trash == false) {\n                \\MicroweberPackages\\Content\\Models\\Content::where('id', $c_id)->first()->delete();\n            }\n        }\n\n        $this->app->event_manager->trigger('content.before.delete', $data);\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n\n            foreach ($data['ids'] as $value) {\n                $c_id = intval($value);\n                if ($c_id) {\n                    $del_ids[] = $c_id;\n                    if ($to_trash == false) {\n                        \\MicroweberPackages\\Content\\Models\\Content::where('id', $c_id)->first()->delete();\n                    }\n                }\n            }\n        }\n//dd($del_ids);\n        if (!empty($del_ids)) {\n            //DB::transaction(function () use ($del_ids, $to_untrash, $to_trash) {\n            foreach ($del_ids as $value) {\n                $c_id = intval($value);\n\n                if ($c_id) {\n                    if ($to_untrash == true) {\n\n                        DB::table('content')->whereId($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        DB::table('content')->whereParent($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        DB::table('categories')->whereRelId($c_id)->whereRelType('content')->whereIsDeleted(1)->update(['is_deleted' => 0]);\n\n                    } elseif ($to_trash == false) {\n                        DB::table('content')->whereParent($c_id)->update(['parent' => 0]);\n\n                        $this->app->database_manager->delete_by_id('menus', $c_id, 'content_id');\n\n\n                            DB::table('media')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n\n\n                            DB::table('categories')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n\n\n                            DB::table('categories_items')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n                            DB::table('custom_fields')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n\n                            DB::table('content_data')->where('content_id', '=', $c_id)->delete();\n\n\n                            DB::table('menus')->where('content_id', '=', $c_id)->delete();\n\n                    } else {\n                        DB::table('content')->whereId($c_id)->update(['is_deleted' => 1]);\n                        DB::table('content')->whereParent($c_id)->update(['is_deleted' => 1]);\n\n\n                            DB::table('categories')->whereRelId($c_id)->whereRelType('content')->update(['is_deleted' => 1]);\n\n                    }\n                    $this->app->cache_manager->delete('content/' . $c_id);\n                }\n            }\n            // });\n        }\n        $this->app->cache_manager->delete('menus');\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('categories');\n        $this->app->cache_manager->delete('content');\n\n        return $del_ids;\n    }\n\n    public function reset_modules_settings($modules_ids)\n    {\n        if (isset($modules_ids['modules_ids'])) {\n            $modules_ids = $modules_ids['modules_ids'];\n        }\n        //data.\n\n        if (is_array($modules_ids) and !empty($modules_ids)) {\n            foreach ($modules_ids as $modules_id) {\n                if ($modules_id) {\n                    \\MicroweberPackages\\Option\\Models\\Option::where('option_group', '=', $modules_id)->delete();\n                    \\MicroweberPackages\\Media\\Models\\Media::where('rel_type', '=', 'modules')->where('rel_id', '=', $modules_id)->delete();\n                    CustomField::where('rel_type', '=', 'module')->where('rel_id', '=', $modules_id)->delete();\n\n                }\n            }\n            event_trigger('mw.reset_modules_settings', $modules_ids);\n\n            $this->app->cache_manager->delete('options');\n            $this->app->cache_manager->delete('media');\n\n        }\n        return true;\n    }\n\n    public function reset_edit_field($data)\n    {\n        if ($data) {\n            if (isset($data['reset'])) {\n                $data = $data['reset'];\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.before', $data);\n\n            foreach ($data as $item) {\n                if (isset($item['rel']) and ($item['rel'])) {\n                    if (isset($item['field']) and ($item['field'])) {\n\n                        $del = \\DB::table('content_fields')\n                            ->where('rel_type', '=', $item['rel'])\n                            ->where('field', '=', $item['field'])->delete();\n\n                    }\n                }\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.after', $data);\n\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('repositories');\n        $this->app->cache_manager->delete('options');\n\n        return true;\n\n\n    }\n\n    public function bulk_assign($data)\n    {\n        if (is_string($data)) {\n            $data = parse_params($data);\n        }\n\n        if (isset($data['content_ids'])) {\n            $content_ids = $data['content_ids'];\n\n            if (is_array($content_ids)) {\n                foreach ($content_ids as $content_id) {\n                    $to_save = array();\n                    $to_save['id'] = $content_id;\n                    $to_save['skip_timestamps'] = true;\n                    if (isset($data['parent_id'])) {\n                        $to_save['parent'] = $data['parent_id'];\n                    }\n                    if (isset($data['categories'])) {\n                        $to_save['categories'] = $data['categories'];\n                        CategoryItem::where('rel_id', $content_id)->where('rel_type', 'content')->delete();\n                    }\n                    $this->app->content_manager->save_content($to_save);\n                }\n            }\n        }\n\n        return array('success' => 'Content is moved');\n    }\n\n    public function create_default_content($what)\n    {\n        if (defined('MW_NO_DEFAULT_CONTENT')) {\n            return true;\n        }\n\n        switch ($what) {\n            case 'shop' :\n                $is_shop = $this->get('content_type=page&is_shop=0');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n\n                    $add_page['title'] = _e('Online shop', true);\n                    $add_page['url'] = 'shop';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = '1';\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (isset($item['layout_file']) and isset($item['is_shop'])) {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('custom_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                $posts = $this->get('content_type=post&parent=' . $new_shop);\n                if ($posts == false and $new_shop != false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = $new_shop;\n                    $add_page['title'] = 'My product';\n                    $add_page['url'] = 'my-product';\n                    $add_page['content_type'] = 'post';\n                    $add_page['subtype'] = 'product';\n                    $add_page['is_active'] = 1;\n                    //$new_shop = $this->save_content($add_page);\n                    //$this->app->cache_manager->delete('content');\n                    //$this->app->cache_manager->clear();\n                }\n\n                break;\n\n            case 'blog' :\n                $is_shop = $this->get('is_deleted=0&content_type=page&subtype=dynamic&is_shop=1&limit=1');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n                    $add_page['title'] = _e('Blog', true);\n                    $add_page['url'] = 'blog';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = 0;\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (!isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n\n                        foreach ($find_layout as $item) {\n                            if (isset($item['name']) and stristr($item['name'], 'blog') and !isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('content_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                break;\n\n            case 'default' :\n            case 'install' :\n                $any = $this->get('count=1&content_type=page&limit=1');\n                if (intval($any) == 0) {\n                    $table = 'content';\n                    mw_var('FORCE_SAVE_CONTENT', $table);\n                    mw_var('FORCE_SAVE', $table);\n\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['title'] = 'Home';\n                    $add_page['url'] = 'home';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'static';\n                    $add_page['is_shop'] = 0;\n                    //$add_page['debug'] = 1;\n                    $add_page['is_active'] = 1;\n                    $add_page['is_home'] = 1;\n                    $add_page['active_site_template'] = 'default';\n                    $new_shop = $this->save_content($add_page);\n                }\n\n                break;\n\n            default :\n                break;\n        }\n    }\n\n    public function copy($data)\n    {\n        $new_cont_id = false;\n\n        if (defined('MW_API_CALL')) {\n            $to_trash = true;\n            $adm = $this->app->user_manager->is_admin();\n            if ($adm == false) {\n                return array('error' => 'You must be admin to copy content!');\n            }\n        }\n        if (isset($data['id'])) {\n            $this->app->event_manager->trigger('content.before.copy', $data);\n            $cont = get_content_by_id($data['id']);\n            if ($cont != false and isset($cont['id'])) {\n                $new_cont = $cont;\n                if (isset($new_cont['title'])) {\n                    $new_cont['title'] = $new_cont['title'] . ' copy';\n                }\n\n                $new_cont['id'] = 0;\n                $content_cats = array();\n\n                $cats = content_categories($cont['id']);\n                if (!empty($cats)) {\n                    foreach ($cats as $cat) {\n                        if (isset($cat['id'])) {\n                            $content_cats[] = $cat['id'];\n                        }\n                    }\n                }\n                if (!empty($content_cats)) {\n                    $new_cont['categories'] = $content_cats;\n                }\n\n                if (isset($new_cont['is_home'])) {\n                    unset($new_cont['is_home']);\n                }\n\n                if (isset($new_cont['content'])) {\n                    $new_cont['content'] = $this->app->parser->make_tags($new_cont['content'], array('change_module_ids' => true));\n\n                }\n\n                if (isset($new_cont['content_body'])) {\n                    $new_cont['content_body'] = $this->app->parser->make_tags($new_cont['content_body'], array('change_module_ids' => true));\n                }\n\n\n                $new_cont_id = $this->save($new_cont);\n\n                $cust_fields = get_custom_fields('content', $data['id'], true);\n                if (!empty($cust_fields)) {\n                    foreach ($cust_fields as $cust_field) {\n                        $new = $cust_field;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_custom_field($new);\n                    }\n                }\n                $images = get_pictures($data['id']);\n                if (!empty($images)) {\n                    foreach ($images as $image) {\n                        $new = $image;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_media($new);\n                    }\n                }\n            }\n        }\n\n        return $new_cont_id;\n    }\n\n    public function related_content_add($data)\n    {\n        if (isset($data['content_id']) and isset($data['related_content_id'])) {\n            $related = ContentRelated::firstOrCreate(\n                ['content_id' => $data['content_id'], 'related_content_id' => $data['related_content_id']]\n            );\n            $related->position = 0;\n            $related->save();\n\n            $this->app->cache_manager->delete('content');\n            $this->app->cache_manager->delete('repositories');\n\n            return $related;\n        }\n    }\n\n    public function related_content_remove($data)\n    {\n        if (isset($data['content_id']) and isset($data['related_content_id'])) {\n            $related = ContentRelated::where(\n                ['content_id' => $data['content_id'], 'related_content_id' => $data['related_content_id']]\n            )->delete();\n\n        } else if (isset($data['id'])) {\n            $related = ContentRelated::where(\n                'id', $data['id']\n            )->delete();\n\n\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('repositories');\n\n        return true;\n    }\n\n\n    public function related_content_reorder($data)\n    {\n        if (isset($data['ids'])) {\n            $value = $data['ids'];\n            if (is_array($value)) {\n                $indx = array();\n                $i = 1;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n\n                    ++$i;\n                }\n                $this->app->database_manager->update_position_field('content_related', $indx);\n                $return_res = $indx;\n            }\n        }\n\n        $this->app->cache_manager->delete('content_related');\n\n        $this->app->cache_manager->delete('content');\n\n\n    }\n\n    public function save_from_live_edit($post_data)\n    {\n        $is_module = false;\n\n\n//        if (php_can_use_func('ini_set')) {\n//            @ini_set('memory_limit', '512M');\n//        }\n//\n//        if (php_can_use_func('set_time_limit')) {\n//            @set_time_limit(60);\n//        }\n\n        $save_as_draft = false;\n        if (isset($post_data['save_draft'])) {\n            $save_as_draft = true;\n            unset($post_data['save_draft']);\n        }\n\n        $json_print = array();\n\n\n        $is_admin = $this->app->user_manager->is_admin();\n        if ($post_data) {\n            if (isset($post_data['data_base64'])) {\n\n                if (!php_can_use_func('base64_decode')) {\n                    return array('error' => 'The base64_decode function must be enabled. Please enable base64_decode function in php.ini');\n                }\n\n                $post_data['json_obj'] = @base64_decode($post_data['data_base64']);\n                if($post_data['json_obj'] == false){\n                    return array('error' => 'The invalid data was sent');\n                }\n\n            }\n            if (isset($post_data['json_obj'])) {\n                $obj = @json_decode($post_data['json_obj'], true);\n                if($obj == false){\n                    return array('error' => 'The invalid data was sent');\n                }\n                $post_data = $obj;\n            }\n            if (isset($post_data['mw_preview_only'])) {\n                $is_no_save = true;\n                unset($post_data['mw_preview_only']);\n            }\n            $is_no_save = false;\n            $is_draft = false;\n            if (isset($post_data['is_draft'])) {\n                unset($post_data['is_draft']);\n                $is_draft = 1;\n            }\n            $the_field_data_all = $post_data;\n            $this->app->event_manager->trigger('mw.content.save_edit.before', $the_field_data_all);\n\n        } else {\n            return array('error' => 'no POST?');\n        }\n\n        $ustr2 = $this->app->url_manager->string(1, 1);\n\n        if (isset($ustr2) and trim($ustr2) == 'favicon.ico') {\n            return false;\n        }\n        $ref_page_url = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_page_url = $_SERVER['HTTP_REFERER'];\n        }\n\n        if (isset($post_data['id']) and intval($post_data['id']) > 0) {\n            $page_id = intval($post_data['id']);\n        } elseif ($ref_page_url != '') {\n            //removing hash from url\n            if (strpos($ref_page_url, '#')) {\n                $ref_page_url = substr($ref_page_url, 0, strpos($ref_page_url, '#'));\n            }\n\n            $slug_page = $this->app->permalink_manager->slug($ref_page_url, 'page');\n            $slug_post = $this->app->permalink_manager->slug($ref_page_url, 'post');\n            $slug_category = $this->app->permalink_manager->slug($ref_page_url, 'category');\n\n            if ($slug_page) {\n                $ref_post = false;\n                if ($slug_post) {\n                    $ref_post = $this->get_by_url($slug_post);\n                }\n\n                if ($ref_post) {\n                    $ref_page2 = $ref_page = $ref_post;\n                } else {\n                    $ref_page2 = $ref_page = $this->get_by_url($slug_page);\n                }\n\n            } elseif ($slug_post) {\n\n                $ref_post = $this->get_by_url($slug_post);\n\n            } elseif ($slug_category) {\n                $cat = $this->app->category_manager->get_by_url($slug_category);\n                if ($cat) {\n                    $content_for_cat = $this->app->category_manager->get_page($cat['id']);\n                    if ($content_for_cat) {\n                        $ref_page2 = $ref_page = $content_for_cat;\n                    }\n                }\n            }\n\n            if (isset($ref_page2)) {\n                if ($ref_page2 == false) {\n                    $ustr = $this->app->url_manager->string(1);\n\n                    if ($this->app->module_manager->is_installed($ustr)) {\n                        $ref_page = false;\n                    }\n                } else {\n                    $ref_page = $ref_page2;\n                }\n            }\n\n\n            if (isset($ustr) and trim($ustr) == 'favicon.ico') {\n                return false;\n            } elseif ($ustr2 == '' or $ustr2 == '/') {\n                $ref_page = $this->app->content_manager->homepage();\n                if ($ref_page_url) {\n                    $page_url_ref = $this->app->url_manager->param('content_id', $ref_page_url);\n                    if ($page_url_ref !== false) {\n                        if ($page_url_ref == 0) {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            if (!isset($ref_page) or $ref_page == false) {\n                $guess_page_data = new FrontendController();\n                // $guess_page_data =  new  $this->app->controller($this->app);\n                $ref_page_url = strtok($ref_page_url, '?');\n\n\n                $guess_page_data->page_url = $ref_page_url;\n                $guess_page_data->return_data = true;\n                $guess_page_data->create_new_page = false;\n                $pd = $guess_page_data->index();\n\n                $newPageCreate = true;\n                if (isset($pd['id']) and $pd['id'] != 0) {\n                    $pd1 = DB::table('content')->where('id', $pd['id'])->first();\n                    $pd1 = (array)$pd1;\n                    if ($pd1) {\n                        $pd = $pd1;\n                        $newPageCreate = false;\n                    }\n\n                }\n\n                $ustr = $this->app->url_manager->string(1);\n                $is_module = false;\n\n                if ($newPageCreate) {\n                    $pd['url'] = $ustr;\n                }\n\n\n                if (isset($pd['active_site_template']) and $pd['active_site_template'] == template_name()) {\n                    $pd['active_site_template'] = '';\n                }\n\n                if ($this->app->module_manager->is_installed($ustr)) {\n                    $is_module = true;\n                    $save_page['layout_file'] = 'clean.php';\n                    $save_page['subtype'] = 'module';\n                    $hp_id = $this->app->content_manager->homepage();\n                    if (isset($hp_id['id'])) {\n                        $page_id = $hp_id['id'];\n                    } else {\n                        $page_id = 1;\n                    }\n                    $is_module = 1;\n                    $save_page = false;\n                }\n\n                if ($is_admin == true and is_array($pd) and $is_module == false) {\n                    $save_page = $pd;\n                    if (!isset($_GET['mw_quick_edit'])) {\n                        if (isset($ref_page_url) and $ref_page_url != false) {\n                            $save_page['url'] = $ref_page_url;\n                        } else {\n                            $save_page['url'] = $this->app->url_manager->string(1);\n                        }\n                        $title = str_replace('%20', ' ', ($this->app->url_manager->string(1)));\n\n                        if ($title == 'editor_tools/wysiwyg' or $title == 'api/module' or $title == 'admin/view:content') {\n                            return false;\n                        }\n                        if (!isset($save_page['title'])) {\n                            $save_page['title'] = $title;\n                        }\n                        if ($save_page['url'] == '' or $save_page['url'] == '/' or $save_page['url'] == $this->app->url_manager->site()) {\n                            $save_page['url'] = 'home';\n                            $home_exists = $this->app->content_manager->homepage();\n                            if ($home_exists == false) {\n                                $save_page['is_home'] = 1;\n                            }\n                        }\n                    }\n                    if ($save_page['title'] == '') {\n                        $save_page['title'] = 'Home';\n                    }\n                    if (!isset($save_page['is_active'])) {\n                        $save_page['is_active'] = 1;\n                    }\n                    if (isset($save_page['content_type']) and $save_page['content_type'] == 'page') {\n                        if (!isset($save_page['subtype'])) {\n                            $save_page['subtype'] = 'static';\n                            if (!isset($save_page['layout_file']) or $save_page['layout_file'] == false) {\n                                $save_page['layout_file'] = 'inherit';\n                            }\n                        }\n                    }\n\n                    if ($save_page != false) {\n                        if (isset($save_page['url']) and $save_page['url']) {\n                            $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            $u = $this->app->permalink_manager->slug($u, 'content');\n\n                            if (!$u) {\n                                $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            }\n\n                            if ($u) {\n                                $try_to_find_page_with_url = $this->app->content_manager->get_by_url($u);\n\n                                if ($try_to_find_page_with_url and isset($try_to_find_page_with_url['id'])) {\n                                    $save_page['id'] = $try_to_find_page_with_url['id'];\n                                }\n                            }\n                        }\n                        if (!isset($save_page['id'])) {\n                            $page_id = $save_page['id'];\n                        } else {\n                            if (!$save_as_draft) {\n\n                                $should_redirect_to_new_url = false;\n                                if (isset($save_page['id']) && $save_page['id'] > 0) {\n                                    unset($save_page['url']);\n                                } else {\n                                    $should_redirect_to_new_url = true;\n\n                                    $multilanguageIsActive = MultilanguageHelpers::multilanguageIsEnabled();\n                                    if ($multilanguageIsActive) {\n                                        if (function_exists('detect_lang_from_url')) {\n                                            $lang_from_url = detect_lang_from_url($save_page['url']);\n                                            if (isset($lang_from_url['target_url'])) {\n\n                                                $save_page['url'] = $lang_from_url['target_url'];\n                                                $save_page['title'] = $lang_from_url['target_url'];\n                                            }\n                                        }\n                                    }\n                                }\n\n\n                                $page_id = $this->app->content_manager->save_content_admin($save_page);\n                                $new_content_link = content_link($page_id);\n                                if ($should_redirect_to_new_url) {\n                                    $json_print['new_page_url'] = $new_content_link;\n                                }\n\n\n                            }\n\n                        }\n                    }\n                }\n            } else {\n                $page_id = $ref_page['id'];\n                $ref_page['custom_fields'] = $this->app->content_manager->custom_fields($page_id, false);\n            }\n        }\n\n        $author_id = user_id();\n        if ($is_admin == false and $page_id != 0 and $author_id != 0) {\n            $page_data_to_check_author = $this->get_by_id($page_id);\n            if (!isset($page_data_to_check_author['created_by']) or ($page_data_to_check_author['created_by'] != $author_id)) {\n                return array('error' => 'You dont have permission to edit this content');\n            }\n        } elseif ($is_admin == false) {\n            return array('error' => 'Not logged in as admin to use ' . __FUNCTION__);\n        }\n\n\n        foreach ($the_field_data_all as $the_field_data) {\n            $save_global = false;\n            $save_layout = false;\n\n            if (isset($page_id) and $page_id != 0 and !empty($the_field_data)) {\n                $save_global = false;\n\n                $content_id = $page_id;\n\n                $url = $this->app->url_manager->string(true);\n                $some_mods = array();\n                if (isset($the_field_data) and is_array($the_field_data) and isset($the_field_data['attributes'])) {\n                    if (isset($the_field_data['html'])) {\n                        $field = false;\n                        if (isset($the_field_data['attributes']['field'])) {\n                            $field = trim($the_field_data['attributes']['field']);\n                        }\n\n                        if (isset($the_field_data['attributes']['data-field'])) {\n                            $field = $the_field_data['attributes']['field'] = trim($the_field_data['attributes']['data-field']);\n                        }\n\n                        if (($field != false)) {\n                            $page_element_id = $field;\n                        }\n                        if (!isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = 'content';\n                        } else {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        if (isset($the_field_data['attributes']['rel-id'])) {\n                            $content_id = $the_field_data['attributes']['rel-id'];\n                        } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                            $content_id = $the_field_data['attributes']['rel_id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel-id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel_id'];\n                        }\n\n                        $save_global = false;\n                        if (isset($the_field_data['attributes']['rel_type']) and (trim($the_field_data['attributes']['rel_type']) == 'global' or trim($the_field_data['attributes']['rel_type'])) == 'module') {\n                            $save_global = true;\n                        } else {\n                            $save_global = false;\n                        }\n                        if (isset($the_field_data['attributes']['rel_type']) and trim($the_field_data['attributes']['rel_type']) == 'layout') {\n                            $save_global = false;\n                            $save_layout = true;\n                        } else {\n                            $save_layout = false;\n                        }\n\n                        $save_module = false;\n\n                        if (isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        $save_module = true;\n\n                        if (isset($the_field_data['attributes']['rel_type'])\n                            and (trim($the_field_data['attributes']['rel_type']) == 'content'\n                                or trim($the_field_data['attributes']['rel_type']) == 'post'\n                                or trim($the_field_data['attributes']['rel_type']) == 'page'\n                                or trim($the_field_data['attributes']['rel_type']) == 'category'\n                                or trim($the_field_data['attributes']['rel_type']) == 'product')) {\n                            $save_module = false;\n                            // this will set the rel_id\n                        }\n\n\n\n\n\n//\n//\n//                        if (isset($the_field_data['attributes']['rel_type'])\n//                            and (trim($the_field_data['attributes']['rel_type']) == 'module')) {\n//                            $save_module = true;\n//                        } else {\n//                            $save_module = false;\n//                        }\n\n\n                        if(!$save_module){\n                            if (!isset($the_field_data['attributes']['data-id'])) {\n                                $the_field_data['attributes']['data-id'] = $content_id;\n                            }\n                        }\n\n\n\n\n                        if (!isset($the_field_data['attributes']['data-id']) and isset($the_field_data['attributes']['rel_id'])) {\n                            $the_field_data['attributes']['data-id'] = $the_field_data['attributes']['rel_id'];\n                        }\n\n\n                        if (isset($the_field_data['attributes']['rel_type']) and isset($the_field_data['attributes']['data-id'])) {\n                            $rel_ch = trim($the_field_data['attributes']['rel_type']);\n                            switch ($rel_ch) {\n                                case 'content':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $the_field_data['attributes']['data-id'];\n                                    break;\n                                case 'page':\n\n                                case 'post':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $page_id;\n                                    break;\n\n                                case 'module':\n                                    $save_global = true;\n                                    $save_module = true;\n                                    break;\n\n                                default:\n                                    $save_global = true;\n                                    $save_module = true;\n                                    break;\n                            }\n                        }\n\n                        $inh = false;\n\n                        if (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'inherit') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $inh = $this->app->content_manager->get_inherited_parent($page_id);\n                            if ($inh != false) {\n                                $content_id_for_con_field = $content_id = $inh;\n                            }\n                        } elseif (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'page') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $check_if_page = $this->get_by_id($content_id);\n                            if (is_array($check_if_page)\n                                and isset($check_if_page['content_type'])\n                                and isset($check_if_page['parent'])\n                                and $check_if_page['content_type'] != ''\n                                and intval($check_if_page['parent']) != 0\n                                and $check_if_page['content_type'] != 'page'\n                            ) {\n                                $inh = $check_if_page['parent'];\n                                if ($inh != false) {\n                                    $content_id_for_con_field = $content_id = $inh;\n                                }\n                            }\n                        }\n\n                        $save_layout = false;\n                        if (isset($post_data['id'])) {\n                            $content_id_for_con_field = $post_data['id'];\n                        } elseif ($inh == false and !isset($content_id_for_con_field)) {\n                            if (isset($ref_page)) {\n\n\n                                if (is_array($ref_page) and isset($ref_page['parent']) and isset($ref_page['content_type']) and $ref_page['content_type'] != 'page') {\n                                    $content_id_for_con_field = intval($ref_page['parent']);\n                                } else {\n                                    $content_id_for_con_field = intval($ref_page['id']);\n                                }\n                            }\n                        }\n                        $html_to_save = $the_field_data['html'];\n\n                        $html_to_save = $content =  $this->app->parser->make_tags($html_to_save);\n\n                        //\\Log::info($html_to_save);\n\n\n                        $xssClean = new XSSClean();\n                        $html_to_save = $content = $xssClean->clean($html_to_save);\n\n\n                      //  \\Log::info($html_to_save);\n\n                        if ($save_module == false and $save_global == false and $save_layout == false) {\n                            if ($content_id) {\n\n                                $for_histroy = get_content_by_id($content_id);\n\n                                $for_histroy['custom_fields'] = $this->app->content_manager->custom_fields($content_id, false);\n\n\n                                $old = false;\n                                $field123 = str_ireplace('custom_field_', '', $field);\n                                if (stristr($field, 'custom_field_')) {\n                                    $old = $for_histroy['custom_fields'][$field123];\n                                } else {\n                                    if (isset($for_histroy['custom_fields'][$field123])) {\n                                        $old = $for_histroy['custom_fields'][$field123];\n                                    } elseif (isset($for_histroy[$field])) {\n                                        $old = $for_histroy[$field];\n                                    }\n                                }\n\n\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'content';\n                                $history_to_save['id'] = $content_id;\n                                $history_to_save['value'] = $old;\n                                $history_to_save['field'] = $field;\n\n                                $cont_field = array();\n                                $cont_field['rel_type'] = $rel_ch;\n                                $cont_field['field'] = $field;\n                                $cont_field['rel_id'] = $content_id_for_con_field;\n                                $cont_field['value'] = $html_to_save;\n\n                                if ($is_draft != false) {\n                                    $cont_id = $content_id_for_con_field;\n                                    $cont_field['is_draft'] = 1;\n                                    $cont_field['rel_type'] = $rel_ch;\n                                    $cont_field['url'] = $url;\n                                    $to_save_draft = true;\n                                    if (isset($cont_field['value'])) {\n                                        $draftmd5 = md5($cont_field['value']);\n\n                                        $draftmd5_last = $this->app->user_manager->session_get('content_draft_save_md5');\n                                        if ($draftmd5_last == $draftmd5) {\n                                            $to_save_draft = false;\n                                        } else {\n                                            $this->app->user_manager->session_set('content_draft_save_md5', $draftmd5);\n                                        }\n                                    }\n                                    if ($to_save_draft) {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    }\n                                } else {\n                                    if ($field != 'content' and $field != 'content_body') {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    } else {\n                                        $cont_table_save = array();\n                                        $cont_table_save[$field]=$html_to_save;\n                                    }\n                                }\n\n\n                                $this->app->event_manager->trigger('mw.content.save_edit', $cont_field);\n\n                                $to_save = array();\n                                $to_save['id'] = $content_id;\n                                if(isset($cont_table_save)  and $cont_table_save){\n                                    $to_save = array_merge($to_save, $cont_table_save);\n                                }\n\n                                $is_native_fld = $this->app->database_manager->get_fields('content');\n                                if (in_array($field, $is_native_fld)) {\n                                    $to_save[$field] = ($html_to_save);\n                                }\n\n                                if ($is_no_save != true and $is_draft == false) {\n                                    $to_save2 = $to_save;\n                                    //   $to_save2['rel_type'] = 'content';\n                                    $to_save2['rel_type'] = $rel_ch;\n                                    $to_save2['rel_id'] = $content_id_for_con_field;\n                                    $to_save2['field'] = $field;\n                                    $json_print[] = $to_save2;\n\n                                    $saved = $this->app->content_manager->save_content_admin($to_save);\n\n                                }\n                            } elseif (isset($category_id)) {\n                                echo __FILE__ . __LINE__ . ' category is not implemented ... not ready yet';\n                            }\n                        } else {\n                            $cont_field = array();\n                            $cont_field['rel_type'] = $the_field_data['attributes']['rel_type'];\n                            $cont_field['rel_id'] = 0;\n                            if (isset($the_field_data['attributes']['rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel-id'];\n                            } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel_id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['content-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['content-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['data-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel_id'];\n                            }\n                            $cont_field['value'] = $this->app->parser->make_tags($html_to_save);\n                            if ((!isset($the_field_data['attributes']['field']) or $the_field_data['attributes']['field'] == '') and isset($the_field_data['attributes']['data-field'])) {\n                                $the_field_data['attributes']['field'] = $the_field_data['attributes']['data-field'];\n                            }\n                            $cont_field['field'] = $the_field_data['attributes']['field'];\n\n                            if ($cont_field['rel_type'] == 'module' and !isset($cont_field['rel_id'])) {\n                                $cont_field['rel_id'] = 0;\n                            }\n\n\n                            if ($save_global and $save_module and isset($cont_field['rel_id']) and $cont_field['rel_id'] == 0 and isset($the_field_data['attributes']['field']) and isset($the_field_data['attributes']['rel_type'])) {\n                                // we check for existing fields with rel_id = 0 and remove them\n                                $getExisting = DB::table('content_fields')\n                                    ->where('field', $the_field_data['attributes']['field'])\n                                    ->where('rel_type', $the_field_data['attributes']['rel_type'])->get();\n                                if ($getExisting) {\n                                    //if we have more than one delete the other ones\n                                    $i = 1;\n                                    foreach ($getExisting as $existing) {\n                                        if($existing->rel_id != $cont_field['rel_id']){\n                                            DB::table('content_fields')->where('id', $existing->id)->delete();\n                                        }\n                                        if ($i > 1) {\n                                            DB::table('content_fields')->where('id', $existing->id)->delete();\n                                        }\n                                        $i++;\n                                    }\n                                }\n\n                            }\n\n\n\n\n                            if ($is_draft != false) {\n                                $cont_field['is_draft'] = 1;\n                                $cont_field['url'] = $this->app->url_manager->string(true);\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            } else {\n\n\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            }\n\n\n                            if ($save_global == true and $save_layout == false) {\n\n\n                                $json_print[] = $cont_field;\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'global';\n                                $history_to_save['value'] = $cont_field['value'];\n                                $history_to_save['field'] = $field;\n                                $history_to_save['page_element_id'] = $page_element_id;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        $this->app->event_manager->trigger('mw.content.save_edit.after', $json_print);\n\n\n        if (isset($opts_saved)) {\n            $this->app->cache_manager->delete('options');\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('repositories');\n        $this->app->content_repository->clearCache();\n        $this->app->category_repository->clearCache();\n        $this->app->menu_repository->clearCache();\n\n        return $json_print;\n    }\n\n    public function get_edit_field_draft($data)\n    {\n        $page = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == $this->app->url_manager->site()) {\n                $page = $this->app->content_manager->homepage();\n\n            } else {\n                $page = $this->get_by_url($url);\n            }\n        } else {\n            $url = $this->app->url_manager->string();\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $table_drafts = 'content_fields_drafts';\n\n        $data = parse_params($data);\n\n        if (isset($data['id']) and $data['id'] == 'latest_content_edit') {\n            if (isset($page['id'])) {\n                $page_data = $this->get_by_id($page['id']);\n\n                $results = array();\n                if (isset($page_data['title'])) {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'title',\n                        'value' => $page_data['title'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                }\n                if (isset($page_data['content']) and $page_data['content'] != '') {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'content',\n                        'value' => $page_data['content'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                }\n                //$results[]\n            }\n        } else {\n            $data['is_draft'] = 1;\n            $data['full'] = 1;\n            $data['all'] = 1;\n            $results = $this->get_edit_field($data);\n        }\n\n        $ret = array();\n\n        if (!isset($results) or $results == false) {\n            return;\n        }\n\n        $i = 0;\n        foreach ($results as $item) {\n            if (isset($item['value'])) {\n                $field_content = htmlspecialchars_decode($item['value']);\n                $field_content = $this->_decode_entities($field_content);\n                $item['value'] = $this->app->parser->process($field_content, $options = false);\n            }\n\n            $ret[$i] = $item;\n            ++$i;\n        }\n\n        return $ret;\n    }\n\n    public function save_content_field($data, $delete_the_cache = true)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        $table = 'content_fields';\n         $table_drafts = 'content_revisions_history';\n\n        if ($adm == false) {\n            return false;\n        }\n\n        if (!is_array($data)) {\n            $data = array();\n        }\n\n        if (isset($data['is_draft']) and $data['is_draft']) {\n            $table = $table_drafts;\n        }\n\n\n        $data = $this->app->format->strip_unsafe($data);\n\n        if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n            $draft_url = $this->app->database_manager->escape_string($data['url']);\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-1 week'));\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-5 min'));\n            $history_files_params = array();\n            $history_files_params['order_by'] = 'id desc';\n            $history_files_params['fields'] = 'id';\n            $history_files_params['field'] = $data['field'];\n            $history_files_params['rel_type'] = $data['rel_type'];\n            $history_files_params['rel_id'] = $data['rel_id'];\n            $history_files_params['is_draft'] = 1;\n            $history_files_params['limit'] = 200;\n            $history_files_params['limit'] = 20;\n            $history_files_params['no_cache'] = true;\n\n            $history_files_params['url'] = $draft_url;\n            $history_files_params['current_page'] = 2;\n            $history_files_params['created_at'] = '[lt]' . $last_saved_date;\n            $history_files = $this->get_edit_field($history_files_params);\n\n            if (is_array($history_files)) {\n                $history_files_ids = $this->app->format->array_values($history_files);\n            }\n\n            if (isset($history_files_ids) and is_array($history_files_ids) and !empty($history_files_ids)) {\n\n                foreach ($history_files_ids as $item) {\n                    $this->app->database_manager->delete_by_id($table, $item);\n                }\n\n            }\n        }\n        if (!isset($data['rel_type']) or !isset($data['rel_id'])) {\n            mw_error('Error: ' . __FUNCTION__ . ' rel and rel_id is required');\n        }\n        /*\n                if (isset($data['field']) and !isset($data['is_draft'])) {\n                    $fld = $this->app->database_manager->escape_string($data['field']);\n                    $fld_rel = $this->app->database_manager->escape_string($data['rel_type']);\n                    $del_params = array();\n                    $del_params['rel_type'] = $fld_rel;\n                    $del_params['field'] = $fld;\n                    $del_params['table'] = $table;\n                    $del_params['no_cache'] = true;\n\n                    if ($fld_rel != 'module') {\n                        if (isset($data['rel_id'])) {\n                            $i = ($data['rel_id']);\n                            $del_params['rel_id'] = $i;\n                        } else {\n                            $del_params['rel_id'] = 0;\n                        }\n                    }\n                    $del = $this->app->database_manager->get($del_params);\n\n\n                    if (!empty($del)) {\n                        foreach ($del as $item) {\n                            // TODO\n                            $this->app->database_manager->delete_by_id($table, $item['id']);\n                        }\n                    }\n                    $cache_group = guess_cache_group('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n                    $this->app->cache_manager->delete($cache_group);\n                }*/\n\n\n        if (isset($fld)) {\n            $this->app->cache_manager->delete('content_fields/' . $fld);\n            $this->app->cache_manager->delete('content_fields/global/' . $fld);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $cache_group = 'content_fields';\n            $this->app->cache_manager->delete($cache_group);\n            $this->app->cache_manager->delete('content/' . $data['rel_id']);\n        }\n        if (isset($data['rel_type'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type']);\n        }\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n            $this->app->cache_manager->delete('content_fields/global/' . $data['rel_type'] . '/' . $data['rel_id']);\n        }\n        if (isset($data['field'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['field']);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        $data['table'] = $table;\n        $data['allow_html'] = 1;\n\n\n        // Find existing\n        $filter = array();\n        $filter['field'] = $data['field'];\n        $filter['rel_type'] = $data['rel_type'];\n        $filter['rel_id'] = $data['rel_id'];\n        $filter['one'] = 1;\n        $filter['no_cache'] = true;\n\n        if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n\n            //   $find = $this->app->database_manager->get($table, $filter);\n\n\n            $find = false;\n            //delete old drafts\n            $old = \\DB::table($table)\n                ->where('rel_type', $data['rel_type'])\n                ->where('rel_id', $data['rel_id'])\n                ->where('field', $data['field'])\n                ->where('url', $data['url'])\n                ->take(1000)\n                ->skip(1000)\n                ->get();\n            if (!empty($old)){\n                foreach ($old as $item) {\n                    \\DB::table($table)->where('id', $item->id)->delete();\n                }\n            }\n\n        }  else {\n\n\n\n            $find = $this->app->database_manager->get($table, $filter);\n\n        }\n\n        if ($find and isset($find['id'])) {\n            $data['id'] = $find['id'];\n        }\n\n\n\n        $save = $this->app->database_manager->save($data);\n\n        $this->app->cache_manager->delete('content_fields');\n\n        return $save;\n    }\n\n    private function _decode_entities($text)\n    {\n        $text = html_entity_decode($text, ENT_QUOTES, 'ISO-8859-1'); #NOTE: UTF-8 does not work!\n        $text = preg_replace('/&#(\\d+);/m', 'chr(\\\\1)', $text); #decimal notation\n        $text = preg_replace('/&#x([a-f0-9]+);/mi', 'chr(0x\\\\1)', $text); #hex notation\n        return $text;\n    }\n\n    public function download_remote_images_from_text($text)\n    {\n        $site_url = $this->app->url_manager->site();\n        $images = $this->app->parser->query($text, 'img');\n        $to_download = array();\n        $to_replace = array();\n        $possible_sources = array();\n\n        if (!empty($images)) {\n            foreach ($images as $image) {\n                $srcs = array();\n                preg_match('/src=\"([^\"]*)\"/i', $image, $srcs);\n                if (!empty($srcs) and isset($srcs[1]) and $srcs[1] != false) {\n                    $possible_sources[] = $srcs[1];\n                }\n            }\n        }\n\n        if (!empty($possible_sources)) {\n            foreach ($possible_sources as $image_src) {\n                if (!stristr($image_src, $site_url)) {\n                    $to_replace[] = $image_src;\n                    $image_src = strtok($image_src, '?');\n                    $ext = get_file_extension($image_src);\n                    switch (strtolower($ext)) {\n                        case 'jpg':\n                        case 'jpeg':\n                        case 'png':\n                        case 'gif':\n                        case 'svg':\n                            $to_download[] = $image_src;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n\n        if (!empty($to_download)) {\n            $to_download = array_unique($to_download);\n\n            if (!empty($to_download)) {\n                foreach ($to_download as $src) {\n                    $dl_dir = media_base_path() . 'downloaded' . DS;\n                    if (!is_dir($dl_dir)) {\n                        mkdir_recursive($dl_dir);\n                    }\n                    $dl_file = $dl_dir . md5($src) . basename($src);\n                    if (!is_file($dl_file)) {\n                        $is_dl = $this->app->url_manager->download($src, false, $dl_file);\n                    }\n                    if (is_file($dl_file)) {\n                        $url_local = dir2url($dl_file);\n                        $text = str_ireplace($src, $url_local, $text);\n                    }\n                }\n            }\n        }\n\n        return $text;\n    }\n}\n", "<?php\n\nnamespace MicroweberPackages\\Content\\tests;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\Auth;\nuse MicroweberPackages\\Category\\Models\\Category;\nuse MicroweberPackages\\Core\\tests\\TestCase;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\Multilanguage\\MultilanguageHelpers;\nuse MicroweberPackages\\Page\\Models\\Page;\nuse MicroweberPackages\\User\\Models\\User;\n\nclass ContentApiControllerLiveEditSaveTest extends TestCase\n{\n    public function testSaveContentOnPageLiveEditSingle()\n    {\n        $this->cleanupAndPrepare();\n\n        $unique = uniqid('testSaveContentOnPage');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'pagecontent222' . $unique,\n            'url' => 'pagecontent222' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'active_site_template' => 'new-world',\n            'is_active' => 1,\n        ]);\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n\n        // Save on default lang\n\n\n        $contentFieldHtml = <<<HTML\n<div class=\"feature-icon bg-primary bg-gradient\">\n <svg fill=\"currentColor\" class=\"bi\" width=\"1em\" height=\"1em\"><use xlink:href=\"#collection\"></use></svg>\n</div>\n<div class=\"feature-icon bg-primary bg-gradient\">\n<h2>Featured title</h2>\n<p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>\n<a href=\"#\" class=\"icon-link\">\nCall to action\n</a>\n<a class=\"mb-2\" href=\"\"><i class=\"mdi mdi-arrow-right\"></i></a>\n<a class=\"mb-2\" href=\"https://example.com\"><i class=\"mdi mdi-arrow-up\"></i>example link</a>\n<a class=\"mb-3\" target=\"_blank\" href=\"https://example.com/2\"><i class=\"mdi mdi-arrow-left-bold-box\"></i>link 2</a>\n <!--a comment here to check -->\n</div>\nHTML;\n\n\n\n\n        $pq = \\phpQuery::newDocument($contentFieldHtml);\n\n        $contentFieldHtml = $pq->htmlOuter();\n\n\n\n        $fieldsData = [\n            'field_data_0' => [\n                'attributes' => [\n                    'class' => 'container edit',\n                    'rel' => 'content',\n                    'rel_id' => $findPage->id,\n                    'field' => 'content',\n                ],\n                'html' => $contentFieldHtml\n            ]\n        ];\n        $encoded = base64_encode(json_encode($fieldsData));\n\n        $response = $this->call(\n            'POST',\n            route('api.content.save_edit'),\n            [\n                'data_base64' => $encoded,\n            ],\n            [],//params\n            $_COOKIE,//cookie\n            [],//files\n            $_SERVER //server\n        );\n\n\n        $fieldSaved = $response->decodeResponseJson();\n\n\n        $this->assertEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n        $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n        $this->assertEquals($fieldSaved[0]['field'], 'content');\n        $findPage = Page::whereId($findPage->id)->first();\n\n        $this->assertTrue(str_contains($findPage->content, 'svg fill=\"currentColor\" class=\"bi\" width=\"1em\" height=\"1em\"'));\n        $this->assertTrue(str_contains($findPage->content, '<h2>Featured title</h2>'));\n        $this->assertTrue(str_contains($findPage->content, '<a class=\"mb-2\" href=\"https://example.com\"><i class=\"mdi mdi-arrow-up\"></i>example link</a>'));\n        $this->assertTrue(str_contains($findPage->content, '<a class=\"mb-3\" target=\"_blank\" href=\"https://example.com/2\"><i class=\"mdi mdi-arrow-left-bold-box\"></i>link 2</a>'));\n        $this->assertTrue(str_contains($findPage->content, '<!--a comment here to check -->'));\n\n\n    }\n\n\n    public function testSaveContentOnPageLiveEditFromBootstrapExamples()\n    {\n        $this->cleanupAndPrepare();\n        $unique = uniqid('testSaveContentOnPage');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'pagecontent-bs-examples-save' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'is_active' => 1,\n        ]);\n\n\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n        $zipname = __DIR__ . '/../../Helper/tests/misc/bootstrap-5.0.2-examples.zip';\n\n\n        //\n\n        $zip = new \\ZipArchive();\n\n        $htmls = [];\n        if ($zip->open($zipname)) {\n            for ($i = 0; $i < $zip->numFiles; $i++) {\n                $fn = $zip->getNameIndex($i);\n                $ext = get_file_extension($fn);\n                if ($ext == 'html') {\n                    $string = $zip->getFromName($fn);\n                    $htmls[$fn] = $string;\n                }\n            }\n        }\n        $zip->close();\n\n\n        $this->assertTrue(!empty($htmls));\n\n\n        foreach ($htmls as $k => $html) {\n\n\n            //remove empty tags\n           $html =  preg_replace('/<[^\\/>]*>([\\s]?)*<\\/[^>]*>/', '', $html);\n\n            // remove script tags\n            $html = preg_replace('/<script\\b[^>]*>(.*?)<\\/script>/is', \"\", $html);\n\n             // remove code tags\n            $html = preg_replace('/<code\\b[^>]*>(.*?)<\\/code>/is', \"\", $html);\n\n\n            $l = $html;\n            $pq = \\phpQuery::newDocument($l);\n\n            // $isolated_html = pq('main')->eq(0)->htmlOuter();\n            $contentFieldHtml = pq('main')->eq(0)->htmlOuter();\n\n\n            $fieldsData = [\n                'field_data_0' => [\n                    'attributes' => [\n                        'class' => 'container edit',\n                        'rel' => 'content',\n                        'rel_id' => $findPage->id,\n                        'field' => 'content',\n                    ],\n                    'html' => $contentFieldHtml\n                ]\n            ];\n\n\n\n\n            $encoded = base64_encode(json_encode($fieldsData));\n\n            $response = $this->call(\n                'POST',\n                route('api.content.save_edit'),\n                [\n                    'data_base64' => $encoded,\n                ],\n                [],//params\n                $_COOKIE,//cookie\n                [],//files\n                $_SERVER //server\n            );\n\n\n            $fieldSaved = $response->decodeResponseJson();\n\n            $this->assertEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n            $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n            $this->assertEquals($fieldSaved[0]['field'], 'content');\n\n\n\n            $pq2 = \\phpQuery::newDocument($contentFieldHtml);\n            $this->assertEquals($contentFieldHtml, $pq2->htmlOuter());\n\n\n            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n            $contentFieldHtml1 = trim($contentFieldHtml);\n            $contentFieldHtml2 = trim($findPage->content);\n\n            $this->assertEquals($contentFieldHtml1, $contentFieldHtml2);\n            $this->assertEquals($contentFieldHtml, $findPage->content);\n\n\n        }\n\n\n    }\n\n\n    public function testSaveContentOnPageLiveEditXssList()\n    {\n\n        $this->cleanupAndPrepare();\n\n        $unique = uniqid('testSaveContentOnPageLiveEditXssList');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'xss-test-' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'is_active' => 1,\n        ]);\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n\n\n        $zip = new \\ZipArchive();\n        $zip->open(__DIR__ . '/../../Helper/tests/misc/xss-test-files.zip');\n        $xssList = $zip->getFromName('xss-payload-list.txt');\n        $zip->close();\n\n        $xssList = preg_replace('~\\R~u', \"\\r\\n\", $xssList);\n        $xssList = explode(PHP_EOL, $xssList);\n\n\n        $xssListChunks = array_chunk($xssList, 100);\n\n\n        foreach ($xssListChunks as $stringChunk) {\n\n            $string = implode(PHP_EOL, $stringChunk);\n             if (empty(trim($string))) {\n                continue;\n            }\n\n            $contentFieldHtml = $string;\n\n\n\n            $fieldsData = [\n                'field_data_0' => [\n                    'attributes' => [\n                        'class' => 'container edit',\n                        'rel' => 'content',\n                        'rel_id' => $findPage->id,\n                        'field' => 'content',\n                    ],\n                    'html' => $contentFieldHtml\n                ]\n            ];\n\n            $encoded = base64_encode(json_encode($fieldsData));\n\n            $response = $this->call(\n                'POST',\n                route('api.content.save_edit'),\n                [\n                    'data_base64' => $encoded,\n                ],\n                [],//params\n                $_COOKIE,//cookie\n                [],//files\n                $_SERVER //server\n            );\n\n            $fieldSaved = $response->decodeResponseJson();\n\n            $this->assertNotEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n            $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n            $this->assertEquals($fieldSaved[0]['field'], 'content');\n\n            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n            $contentFieldHtml1 = trim($contentFieldHtml);\n            $contentFieldHtml2 = trim($findPage->content);\n\n           $this->assertNotEquals($contentFieldHtml1, $contentFieldHtml2);\n\n\n            foreach ($stringChunk as $stringItem) {\n                if (trim($stringItem) == '') {\n                    continue;\n                }\n                $this->assertStringNotContainsString($stringItem, $findPage->content);\n            }\n\n\n\n        }\n    }\n\n\n\n    public function testSaveContentOnPageLiveEditFromOtherExamples()\n    {\n        $this->cleanupAndPrepare();\n\n\n        $unique = uniqid('testSaveContentOnPageLiveEditFromOtherExamples');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'pagecontent-other-examples-save' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'is_active' => 1,\n        ]);\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n        $zipname = __DIR__ . '/../../Helper/tests/misc/edit-fields-other-html.zip';\n\n\n        $zip = new \\ZipArchive();\n\n        $htmls = [];\n        if ($zip->open($zipname)) {\n            for ($i = 0; $i < $zip->numFiles; $i++) {\n                $fn = $zip->getNameIndex($i);\n                $ext = get_file_extension($fn);\n                if ($ext == 'html') {\n                    $string = $zip->getFromName($fn);\n                    if(trim($string) == ''){\n                        continue;\n                    }\n                    $htmls[$fn] = $string;\n                }\n            }\n        }\n        $zip->close();\n\n\n        $this->assertTrue(!empty($htmls));\n\n        foreach ($htmls as $k => $html) {\n\n            $contentFieldHtml = $html;\n            $contentFieldHtml = self::fixLinksPrecentAttributes($contentFieldHtml);\n\n            $contentFieldHtmlTest1 = app()->parser->make_tags($contentFieldHtml);\n            $this->assertEquals($contentFieldHtmlTest1, $contentFieldHtml);\n\n\n            $xssClean = new XSSClean();\n            $contentFieldHtmlTest1 = $xssClean->clean($contentFieldHtml);\n            $this->assertEquals($contentFieldHtmlTest1, $contentFieldHtml);\n\n\n        }\n\n        $htmlsChunks = array_chunk($htmls, 100);\n\n\n\n      foreach ($htmlsChunks as $k => $htmlChunk) {\n\n          $html = implode('--------chunk-------', $htmlChunk);\n         $contentFieldHtml = $html;\n\n\n           // $contentFieldHtml = str_replace('{SITE_URL}', site_url(), $contentFieldHtml);\n            $fieldsData = [\n                'field_data_0' => [\n                    'attributes' => [\n                        'class' => 'container edit',\n                        'rel' => 'content',\n                        'rel_id' => $findPage->id,\n                        'field' => 'content',\n                    ],\n                    'html' => $contentFieldHtml\n                ]\n            ];\n\n            $contentFieldHtml = self::fixLinksPrecentAttributes($contentFieldHtml);\n\n\n            $encoded = base64_encode(json_encode($fieldsData));\n\n            $response = $this->call(\n                'POST',\n                route('api.content.save_edit'),\n                [\n                    'data_base64' => $encoded,\n                ],\n                [],//params\n                $_COOKIE,//cookie\n                [],//files\n                $_SERVER //server\n            );\n\n\n            $fieldSaved = $response->decodeResponseJson();\n\n\n\n            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n            $contentFieldHtml1 = trim($contentFieldHtml);\n            $contentFieldHtml2 = trim($findPage->content);\n\n            $this->assertEquals($contentFieldHtml1, $contentFieldHtml2);\n            $this->assertEquals($contentFieldHtml, $findPage->content);\n\n\n       }\n\n\n    }\n\n\n    private function cleanupAndPrepare(){\n        $user = User::where('is_admin', '=', '1')->first();\n        Auth::login($user);\n        \\Config::set('microweber.disable_model_cache', 1);\n\n\n        MultilanguageHelpers::setMultilanguageEnabled(0);\n        Page::truncate();\n    }\n\n    public static function fixLinksPrecentAttributes($text)\n    {\n        $text = str_ireplace('{SITE_URL}','___mw-site-url-temp-replace-on-clean___', $text);\n        $pq = \\phpQuery::newDocument($text);\n\n        foreach($pq->find('a') as $stuffs)\n        {\n            $href = pq($stuffs)->attr('href');\n            if($href){\n            pq($stuffs)->attr('href', str_replace(' ', '%20', $href));\n            }\n        }\n        $text = $pq->htmlOuter();\n        $text = str_ireplace('___mw-site-url-temp-replace-on-clean___','{SITE_URL}',     $text);\n        return $text;\n\n    }\n\n\n}\n", "<?php\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Database;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse MicroweberPackages\\Category\\Models\\Category;\nuse MicroweberPackages\\Content\\Models\\Content;\nuse MicroweberPackages\\CustomField\\Models\\CustomField;\nuse MicroweberPackages\\CustomField\\Models\\CustomFieldValue;\nuse MicroweberPackages\\Database\\Utils as DbUtils;\nuse MicroweberPackages\\Database\\Traits\\QueryFilter;\nuse MicroweberPackages\\Database\\Traits\\ExtendedSave;\nuse MicroweberPackages\\Helper\\HTMLClean;\nuse MicroweberPackages\\Media\\Models\\Media;\n\nuse MicroweberPackages\\Option\\Models\\Option;\nuse MicroweberPackages\\Repository\\Repositories\\AbstractRepository;\nuse function Opis\\Closure\\serialize as serializeClosure;\nuse function Opis\\Closure\\unserialize as unserializeClosure;\n\nclass DatabaseManager extends DbUtils\n{\n    public $use_cache = true;\n    public $use_model_cache = [];\n\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    use QueryFilter; //trait with db functions\n\n    use ExtendedSave; //trait to save extended data, such as attributes, categories and images\n\n    public function __construct($app = null)\n    {\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n    }\n\n\n\n    /**\n     * Get items from the database.\n     *\n     * You can use this handy function to get whatever you need from any db table.\n     *\n     * @params\n     *\n     * *You can pass those parameters in order to filter the results*\n     *  You can also use all defined database fields as parameters\n     *\n     * .[params-table]\n     *|-----------------------------------------------------------------------------\n     *| Parameter        | Description      | Values\n     *|------------------------------------------------------------------------------\n     *| from            | the name of the db table, without prefix | ex. users, content, categories,etc\n     *| table        | same as above |\n     *| debug            | prints debug information  | true or false\n     *| orderby        | you can order by any field in your table  | ex. get(\"table=content&orderby=id desc\")\n     *| order_by        | same as above  |\n     *| one            | if set returns only the 1st result |\n     *| count            | if set returns results count |  ex. get(\"table=content&count=true\")\n     *| limit            | limit the results |  ex. get(\"table=content&limit=5\")\n     *| curent_page    | get the current page by limit offset |  ex. get(\"table=content&limit=5&curent_page=2\")\n     *\n     * @param string|array $params parameters for the DB\n     * @param string $params ['table'] the table name ex. content\n     * @param string $params ['debug'] if true print the sql\n     * @param string $params ['cache_group'] sets the cache folder to use to cache the query result\n     * @param string $params ['no_cache']  if true it will no cache the sql\n     * @param string $params ['count']  if true it will return results count\n     * @param string $params ['page_count']  if true it will return pages count\n     * @param string|array $params ['limit']  if set it will limit the results\n     *\n     * @function get\n     *\n     * @return mixed Array with data or false or integer if page_count is set\n     *\n     * @example\n     * <code>\n     * //get content\n     *  $results = $this->get(\"table=content&is_active=1\");\n     * </code>\n     * @example\n     *  <code>\n     *  //get users\n     *  $results = $this->get(\"table=users&is_admin=0\");\n     * </code>\n     */\n    public function get($table, $params = null)\n    {\n\n        if ($params === null) {\n            $params = $table;\n        } else {\n            if ($params != false) {\n                $params = parse_params($params);\n            } else {\n                $params = array();\n            }\n            $params['table'] = $table;\n        }\n\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n\n        if (!isset($params['table'])) {\n            return false;\n        } else {\n            $table = trim($params['table']);\n            unset($params['table']);\n        }\n        if (!$table) {\n            return false;\n        }\n\n\n\n        $cache_key_closures = 'cache';\n        if($params){\n            foreach ($params as $k => $v) {\n                if (is_object($v) && $v instanceof \\Closure) {\n\n                  //  $serialized = serializeClosure($v);\n                  //  $cache_key_closures .= crc32($serialized);\n\n                    $serialized = hashClosure($v);\n                    $cache_key_closures .= $serialized;\n                }\n            }\n        }\n        if (!isset($params['no_limit'])) {\n            $cache_key = $table . crc32(json_encode($params) .   $cache_key_closures);\n        } else {\n            $cache_key = $table . crc32(json_encode($params) . $cache_key_closures);\n        }\n\n        $_query_get_cache_key = $cache_key;\n        if (!$this->_query_get_cache_is_disabled) {\n            if (isset($this->_query_get_cache[$table][$_query_get_cache_key]) and $this->_query_get_cache[$table][$_query_get_cache_key]) {\n                // experimental\n                return $this->_query_get_cache[$table][$_query_get_cache_key];\n            }\n        }\n\n\n\n\n        $enable_triggers = true;\n        if (isset($params['enable_triggers'])) {\n            $enable_triggers = $params['enable_triggers'];\n        }\n\n        if (isset($params['disable_triggers']) and $params['disable_triggers']) {\n            $enable_triggers = false;\n        }\n\n        $use_connection = false;\n\n        if (isset($params['connection_name']) and !isset($_REQUEST['connection_name'])) {\n            $use_connection = $params['connection_name'];\n            unset($params['connection_name']);\n        }\n\n        if ($use_connection == false) {\n            $query = $this->table($table, $params);\n        } else {\n            $query = DB::connection($use_connection)->table($table);\n        }\n\n        $orig_params = $params;\n        $items_per_page = false;\n\n\n        $do_not_replace_site_url = false;\n        if (isset($params['do_not_replace_site_url'])) {\n            $do_not_replace_site_url = $params['do_not_replace_site_url'];\n        }\n\n        $limit = $this->default_limit;\n        if (!isset($params['limit'])) {\n            $limit = $params['limit'] = $this->default_limit;\n        } else {\n            $limit = $params['limit'];\n        }\n\n        if (isset($params['nolimit'])) {\n            $params['no_limit'] = $params['nolimit'];\n            unset($params['nolimit']);\n\n        }\n        if (isset($params['no_limit'])) {\n            unset($params['limit']);\n        }\n\n        if (isset($orig_params['page_count'])) {\n            $orig_params['count_paging'] = $orig_params['page_count'];\n        }\n        if (isset($params['limit']) and ($params['limit'] == 'nolimit' or $params['limit'] == 'no_limit')) {\n            unset($params['limit']);\n        }\n        if (isset($orig_params['count_paging']) and ($orig_params['count_paging'])) {\n            if (isset($params['limit'])) {\n                $items_per_page = $params['limit'];\n                unset($params['limit']);\n            }\n            if (isset($params['page'])) {\n                unset($params['page']);\n            }\n            if (isset($params['paging_param'])) {\n                unset($params['paging_param']);\n            }\n\n            if (isset($params['current_page'])) {\n                unset($params['current_page']);\n            }\n            $orig_params['count'] = true;\n        }\n\n        if (isset($params['orderby'])) {\n            $params['order_by'] = $params['orderby'];\n            unset($params['orderby']);\n        }\n\n        if (isset($orig_params['count']) and ($orig_params['count']) and isset($params['order_by'])) {\n            unset($params['order_by']);\n        }\n\n        if (isset($params['groupby'])) {\n            $params['group_by'] = $params['groupby'];\n            unset($params['groupby']);\n        }\n\n        if (isset($orig_params['no_cache']) and ($orig_params['no_cache'])) {\n            $use_cache = $this->use_cache = false;\n        } else {\n            $use_cache = $this->use_cache = true;\n        }\n        $cache_from_model = false;\n        if (isset($this->use_model_cache[$table]) and $this->use_model_cache[$table]) {\n            $use_cache = false;\n            $cache_from_model = true;\n        }\n\n        if (!isset($params['filter'])) {\n            $query = $this->map_filters($query, $params, $table);\n        }\n        $params = $this->map_array_to_table($table, $params);\n        $query = $this->map_values_to_query($query, $params);\n\n        $ttl = $this->table_cache_ttl;\n        if (!$query) {\n            return;\n        }\n\n//        $cache_key_closures = 'cache';\n//        foreach ($orig_params as $k => $v) {\n//            if (is_object($v) && $v instanceof \\Closure) {\n//\n//                $serialized = serializeClosure($v);\n//                $cache_key_closures .= crc32($serialized);\n//            }\n//        }\n\n        if (!isset($params['no_limit'])) {\n            $cache_key = 'db_get_'.$table . crc32(json_encode($orig_params) . $limit . $this->default_limit . $cache_key_closures);\n        } else {\n            $cache_key = 'db_get_'.$table . crc32(json_encode($params) . $cache_key_closures);\n        }\n\n        if (is_array($params) and !empty($params)) {\n            //$query = $query->where($params);\n            foreach ($params as $k => $v) {\n                $query = $query->where($table . '.' . $k, '=', $v);\n            }\n        }\n\n\n        if (isset($orig_params['count']) and ($orig_params['count'])) {\n            if ($use_cache == false and $cache_from_model == false) {\n                $query = $query->count();\n            } else {\n                $query = Cache::tags($table)->remember($cache_key, $ttl, function () use ($query) {\n                    $queryCount = $query->count();\n                    return $queryCount;\n                });\n            }\n            if ($items_per_page != false and is_numeric($query)) {\n                // return the pages count\n                $query = intval(ceil($query / $items_per_page));\n            }\n            return $query;\n        }\n\n        if (isset($orig_params['min']) and ($orig_params['min'])) {\n            $column = $orig_params['min'];\n            $query = $query->min($column);\n            return $query;\n        }\n        if (isset($orig_params['max']) and ($orig_params['max'])) {\n            $column = $orig_params['max'];\n            $query = $query->max($column);\n            return $query;\n        }\n        if (isset($orig_params['avg']) and ($orig_params['avg'])) {\n            $column = $orig_params['avg'];\n            $query = $query->avg($column);\n            return $query;\n        }\n        if (isset($orig_params['sum']) and ($orig_params['sum'])) {\n            $column = $orig_params['sum'];\n             $query = $query->sum($column);\n\n//            $query = Cache::tags($table)->remember($cache_key, $ttl, function () use ($query,$column) {\n//                $queryCount = $query->sum($column);\n//                return $queryCount;\n//            });\n\n\n            return $query;\n        }\n\n        if (isset($orig_params['fields']) and $orig_params['fields'] != false) {\n            if (is_string($orig_params['fields'])) {\n                $is_fields = explode(',', $orig_params['fields']);\n            } else {\n                $is_fields = $orig_params['fields'];\n            }\n            $is_fields_q = [];\n            if ($is_fields) {\n                foreach ($is_fields as $is_field) {\n                    if (is_string($is_field)) {\n                        $is_field = trim($is_field);\n                        if ($is_field != '') {\n                            $is_fields_q[] = $table . '.' . $is_field;\n                        }\n                    }\n                }\n            }\n            if ($is_fields_q) {\n                $query = $query->select($is_fields_q);\n            }\n\n        }\n\n        if ($use_cache == false) {\n\n            $data = $query->get();\n\n            if (isset($orig_params['fields']) and $orig_params['fields'] != false) {\n                if (method_exists($query, 'getModel')) {\n                    $builderModel = $query->getModel();\n                    $data->makeHidden(array_keys($builderModel->attributesToArray()));\n                }\n            }\n\n            if (isset($orig_params['collection']) and ($orig_params['collection'])) {\n\n            } else {\n\n                $data = $data->toArray();\n            }\n\n\n        } else {\n\n            $data = Cache::tags($table)->remember($cache_key, $ttl, function () use ($cache_key, $query, $orig_params) {\n\n                $queryResponse = $query->get();\n\n                if (isset($orig_params['fields']) and $orig_params['fields'] != false) {\n                    if (method_exists($query, 'getModel')) {\n                        $builderModel = $query->getModel();\n                        $queryResponse->makeHidden(array_keys($builderModel->attributesToArray()));\n                    }\n                }\n                if (isset($orig_params['collection']) and ($orig_params['collection'])) {\n                    return $queryResponse;\n                }\n                return $queryResponse->toArray();\n\n            });\n\n\n        }\n\n        if ($data == false or empty($data)) {\n            return false;\n        }\n\n        if (is_object($data)\n        ) {\n            if (isset($orig_params['collection']) and ($orig_params['collection'])) {\n                return $data;\n            } else {\n                $data = $this->_collection_to_array($data);\n            }\n        }\n\n\n\n        if (is_array($data)) {\n            foreach ($data as $k => $v) {\n                $data[$k] = (array)$v;\n            }\n        }\n\n\n        if (empty($data)) {\n            return false;\n        } else {\n            if (!$do_not_replace_site_url) {\n                $data = $this->app->url_manager->replace_site_url_back($data);\n            }\n        }\n\n\n        if (!is_array($data)) {\n            $this->_query_get_cache[$table][$_query_get_cache_key] = $data;\n            return $data;\n        }\n\n        if ($enable_triggers) {\n            $data = $this->app->event_manager->response('mw.database.' . $table . '.get', $data);\n        }\n\n        if (isset($orig_params['single']) || isset($orig_params['one'])) {\n            if (!isset($data[0])) {\n                return false;\n            }\n\n            if (is_object($data[0]) and isset($data[0]->id)) {\n                // might be a bug here?\n                $this->_query_get_cache[$table][$_query_get_cache_key] = (array)$data[0];\n                return (array)$data[0];\n            }\n            $this->_query_get_cache[$table][$_query_get_cache_key] = $data[0];\n            return $data[0];\n        }\n        $this->_query_get_cache[$table][$_query_get_cache_key] = $data;\n\n        return $data;\n    }\n\n    /**\n     * Generic save data function, it saves data to the database.\n     *\n     * @param $table\n     * @param $data\n     * @param bool $data_to_save_options\n     *\n     * @return string|int The id of the saved row.\n     *\n     * @example\n     * <code>\n     * $table = $this->table_prefix.'content';\n     * $data = array();\n     * $data['id'] = 0; //if 0 will create new content\n     * $data['title'] = 'new title';\n     * $data['content'] = '<p>Something</p>';\n     * $save = save($table, $data);\n     * </code>\n     */\n    public function save($table, $data = false, $data_to_save_options = false)\n    {\n        if (is_array($table) and isset($table['table'])) {\n            $data = $table;\n            $table = $table['table'];\n            unset($data['table']);\n        }\n        if (is_string($data)) {\n            $data = parse_params($data);\n        }\n\n        if (!is_array($data)) {\n            return false;\n        }\n        $this->clearCache();\n        $original_data = $data;\n\n        $is_quick = isset($original_data['quick_save']);\n\n        $skip_cache = isset($original_data['skip_cache']);\n\n        /*if (!isset($params['skip_timestamps'])) {\n            if (!isset($params['id']) or (isset($params['id']) and $params['id'] == 0)) {\n                if (!isset($params['created_at'])) {\n                    $params['created_at'] = date('Y-m-d H:i:s');\n                }\n            }\n            if (!isset($params['updated_at'])) {\n                $params['updated_at'] = date('Y-m-d H:i:s');\n            }\n        }*/\n\n\n        if (isset($data['updated_at'])) {\n            try {\n                $carbonUpdatedAt = Carbon::parse($data['updated_at']);\n                $data['updated_at'] = $carbonUpdatedAt->format('Y-m-d H:i:s');\n            } catch (\\Exception $e) {\n                $data['updated_at'] = Carbon::now()->format('Y-m-d H:i:s');\n            }\n        }\n\n\n        if ($is_quick == false) {\n            if (isset($data['updated_at']) == false) {\n                $data['updated_at'] = date('Y-m-d H:i:s');\n            }\n        }\n\n        if ($skip_cache == false and isset($data_to_save_options) and !empty($data_to_save_options)) {\n            if (isset($data_to_save_options['delete_cache_groups']) and !empty($data_to_save_options['delete_cache_groups'])) {\n                foreach ($data_to_save_options ['delete_cache_groups'] as $item) {\n                    $this->app->cache_manager->delete($item);\n                }\n            }\n        }\n\n        $user_sid = $this->app->user_manager->session_id();\n        $the_user_id = $this->app->user_manager->id();\n\n        if (!isset($data['session_id']) and $user_sid) {\n            $data['session_id'] = $user_sid;\n        }\n        if (!isset($data['id'])) {\n\n            $data['id'] = 0;\n\n        }\n        if (isset($data['cf_temp'])) {\n            $cf_temp = $data['cf_temp'];\n        }\n        $allow_html = false;\n        $allow_scripts = false;\n        if (isset($data['allow_html']) and (!isset($_REQUEST['allow_html']))) {\n            $allow_html = $data['allow_html'];\n        }\n        if (isset($data['allow_scripts']) and (!isset($_REQUEST['allow_scripts']))) {\n            $allow_scripts = $data['allow_scripts'];\n        }\n\n        /* if (isset($data['debug']) and $data['debug'] == true) {\n             $dbg = 1;\n             unset($data['debug']);\n         } else {\n             $dbg = false;\n         }\n         if ($dbg != false) {\n             var_dump($data);\n         }*/\n\n        if (!isset($data['user_ip'])) {\n            $data['user_ip'] = user_ip();\n        }\n        if (isset($data['id']) == false or $data['id'] == 0) {\n            $data['id'] = 0;\n            $l = $this->last_id($table);\n            $data['new_id'] = intval($l + 1);\n            $original_data['new_id'] = $data['new_id'];\n        }\n\n        if (!isset($the_user_id)) {\n            $the_user_id = 0;\n        }\n        if (intval($data['id']) == 0) {\n\n            if (isset($data['created_at'])) {\n                try {\n                    $carbonUpdatedAt = Carbon::parse($data['created_at']);\n                    $data['created_at'] = $carbonUpdatedAt->format('Y-m-d H:i:s');\n                } catch (\\Exception $e) {\n                    $data['created_at'] = Carbon::now()->format('Y-m-d H:i:s');\n                }\n            } else {\n                $data['created_at'] = Carbon::now()->format('Y-m-d H:i:s');\n            }\n\n\n//            if (isset($data['created_at']) == false) {\n//                $data['created_at'] = date('Y-m-d H:i:s');\n//            }\n            if ($the_user_id) {\n                $data['created_by'] = $the_user_id;\n            }\n            if ($the_user_id) {\n                $data['edited_by'] = $the_user_id;\n            }\n        } else {\n            if ($the_user_id) {\n                $data['edited_by'] = $the_user_id;\n            }\n        }\n\n        if (isset($data['position'])) {\n            $data['position'] = intval($data['position']);\n        }\n\n        $table_assoc_name = $this->assoc_table_name($table);\n\n        $criteria_orig = $data;\n        $criteria = $this->map_array_to_table($table, $data);\n        if ($allow_html == false) {\n            $criteria = $this->app->format->clean_html($criteria);\n        } else {\n            if ($allow_scripts == false) {\n               $criteria = $this->clean_input($criteria);\n\n               // $evil = ['(?<!\\w)on\\w*', 'xmlns', 'formaction', 'xlink:href', 'FSCommand', 'seekSegmentTime'];\n              //  $clearInput = new HTMLClean();\n               // $criteria = $clearInput->cleanArray($criteria);\n\n            }\n\n        }\n        $criteria = $this->app->url_manager->replace_site_url($criteria);\n\n        if (is_array($data_to_save_options) and $data_to_save_options['use_this_field_for_id'] != false) {\n            $criteria['id'] = $criteria_orig[$data_to_save_options['use_this_field_for_id']];\n        }\n\n\n        if (!isset($criteria['id'])) {\n            $criteria['id'] = 0;\n        }\n        $criteria['id'] = intval($criteria['id']);\n\n        $criteria = $criteria_overwrite = $this->app->event_manager->response('mw.database.' . $table . '.save.params', $criteria);\n        $criteria = $this->map_array_to_table($table, $criteria);\n\n        if(!$criteria){\n            return;\n        }\n\n//        $auto_fields = ['created_by','edited_by','created_at','updated_at','created_by','session_id','id'];\n\n\n        if (intval($criteria['id']) == 0) {\n            unset($criteria['id']);\n            $engine = $this->get_sql_engine();\n            if ($engine == 'pgsql') {\n                $highestId = $this->table($table)->select(DB::raw('MAX(id)'))->first();\n                $next_id = 0;\n                if (!isset($highestId->max)) {\n                    $next_id = 1;\n                } else {\n                    $next_id = $highestId->max + 1;\n                }\n                if (!empty($criteria)) {\n                    $criteria['id'] = $next_id;\n                }\n            }\n            $id_to_return = $this->table($table_assoc_name)->insert($criteria);\n            $id_to_return = $this->last_id($table);\n\n        } else {\n            $insert_or_update = $highestId = $this->table($table)->where('id', $criteria['id'])->count();\n            if ($insert_or_update != 0) {\n                $insert_or_update = 'update';\n            } else {\n                $insert_or_update = 'insert';\n            }\n            $id_to_return = $this->table($table_assoc_name)->where('id', $criteria['id'])->$insert_or_update($criteria);\n            $id_to_return = $criteria['id'];\n        }\n\n        if ($id_to_return == false) {\n            $id_to_return = $this->last_id($table);\n        }\n        $id_to_return = intval($id_to_return);\n\n        $original_data['table'] = $table;\n        $original_data['id'] = $id_to_return;\n        $cache_group = $this->assoc_table_name($table);\n\n\n        $this->app->cache_manager->delete($cache_group);\n\n        if ($skip_cache == false) {\n            $cache_group = $this->assoc_table_name($table);\n            $this->app->cache_manager->delete($cache_group . '');\n            $this->app->cache_manager->delete('content/global/full_page_cache');\n            $this->app->cache_manager->delete($cache_group . '/' . $id_to_return);\n            if (isset($criteria['parent_id'])) {\n                $this->app->cache_manager->delete($cache_group . '/' . intval($criteria['parent_id']));\n            }\n        }\n\n        $criteria_overwrite['id'] = $id_to_return;\n        $this->app->event_manager->trigger('mw.database.' . $table . '.save.after', $criteria_overwrite);\n        $this->app->event_manager->trigger('mw.database.' . $table . '.save.after.data', $data);\n\n        return $id_to_return;\n    }\n\n    /**\n     * Get last id from a table.\n     *\n     * @desc Get last inserted id from a table, you must have 'id' column in it.\n     *\n     * @param $table\n     *\n     * @return bool|int\n     *\n     * @example\n     * <pre>\n     * $table_name = $this->table_prefix . 'content';\n     * $id = $this->last_id($table_name);\n     * </pre>\n     */\n    public function last_id($table)\n    {\n\n        // DB::getPdo()->lastInsertId();\n\n        $last_id = $this->table($table)->select(['id'])->orderBy('id', 'DESC')->take(1)->first();\n        if (isset($last_id->id)) {\n            return $last_id->id;\n        }\n    }\n\n    public function q($q, $silent = false)\n    {\n        if (!$silent) {\n            $q = DB::statement($q);\n            $q = $this->_collection_to_array($q);\n\n            return $q;\n        }\n\n        try {\n            $q = DB::statement($q);\n            $q = $this->_collection_to_array($q);\n\n            return $q;\n        } catch (\\Exception $e) {\n            return;\n        } catch (\\Illuminate\\Database\\QueryException $e) {\n            return;\n        } catch (\\QueryException $e) {\n            return;\n        }\n    }\n\n    /**\n     * Executes plain query in the database.\n     *\n     * You can use this function to make queries in the db by writing your own sql\n     * The results are returned as array or `false` if nothing is found\n     *\n     *\n     * @note Please ensure your variables are escaped before calling this function.\n     * @function $this->query\n     * @desc Executes plain query in the database.\n     *\n     * @param string $q Your SQL query\n     * @param string|bool $cache_id It will save the query result in the cache. Set to false to disable\n     * @param string|bool $cache_group Stores the result in certain cache group. Set to false to disable\n     * @param bool $only_query If set to true, will perform only a query without returning a result\n     * @param array|bool $connection_settings\n     *\n     * @return array|bool|mixed\n     *\n     * @example\n     *  <code>\n     *  //make plain query to the db\n     * $table = $this->table_prefix.'content';\n     *    $sql = \"SELECT id FROM $table WHERE id=1   ORDER BY updated_at DESC LIMIT 0,1 \";\n     *  $q = $this->query($sql, $cache_id=crc32($sql),$cache_group= 'content');\n     *\n     * </code>\n     */\n    public function query($q, $cache_id = false, $cache_group = 'global', $only_query = false, $connection_settings = false)\n    {\n        if (trim($q) == '') {\n            return false;\n        }\n\n        $error['error'] = array();\n        $results = false;\n\n        if ($cache_id != false and $cache_group != false) {\n            $cache_id = $cache_id . crc32($q);\n            $results = $this->app->cache_manager->get($cache_id, $cache_group);\n            if ($results != false) {\n                if ($results == '---empty---' or (is_array($results) and empty($results))) {\n                    return false;\n                } else {\n                    return $results;\n                }\n            }\n        }\n\n        $q = DB::select($q);\n        $q = $this->_collection_to_array($q);\n        if ($only_query != false) {\n            return true;\n        }\n        $q = (array)$q;\n        if (isset($q[0])) {\n            foreach ($q as $k => $v) {\n                $q[$k] = (array)$v;\n            }\n        }\n\n        if ($only_query == false and empty($q) or $q == false and $cache_group != false) {\n            if ($cache_id != false) {\n                $this->app->cache_manager->save('---empty---', $cache_id, $cache_group);\n            }\n\n            return false;\n        }\n        if ($only_query == false) {\n            if ($cache_id != false and $cache_group != false) {\n                if (is_array($q) and !empty($q)) {\n                    $this->app->cache_manager->save($q, $cache_id, $cache_group);\n                } else {\n                    $this->app->cache_manager->save('---empty---', $cache_id, $cache_group);\n                }\n            }\n        }\n        if ($cache_id != false) {\n            $this->app->cache_manager->save($q, $cache_id, $cache_group);\n        }\n\n        return $q;\n    }\n\n    /**\n     * Deletes item by id from db table.\n     *\n     * @param string $table Your da table name\n     * @param int|string $id The id to delete\n     * @param string $field_name You can set custom column to delete by it, default is id\n     *\n     * @return bool\n     *\n     * @example\n     * <code>\n     * //delete content with id 5\n     *  $this->delete_by_id('content', $id=5);\n     * </code>\n     */\n    public function delete_by_id($table, $id = 0, $field_name = 'id')\n    {\n        if ($id === 0) {\n            return false;\n        }\n\n        if (is_array($id)) {\n            foreach ($id as $remove) {\n                $c_id = $this->table($table)->where($field_name, '=', $remove)->delete();\n            }\n        } else {\n            $c_id = $this->table($table)->where($field_name, '=', $id)->delete();\n        }\n\n        Cache::tags($table)->flush();\n        $this->app->cache_manager->delete('content/global/full_page_cache');\n        $this->clearCache();\n\n        return $c_id;\n    }\n\n    /**\n     * Get table row by id.\n     *\n     * It returns full db row from a db table\n     *\n     * @param string $table Your table\n     * @param int|string $id The id to get\n     * @param string $field_name You can set custom column to get by it, default is id\n     *\n     * @return array|bool|mixed\n     *\n     * @example\n     * <code>\n     * //get content with id 5\n     * $cont = $this->get_by_id('content', $id=5);\n     * </code>\n     */\n    public function get_by_id($table, $id = 0, $field_name = 'id')\n    {\n        if (!$id) {\n            return;\n        }\n        if ($field_name == 'id' and $id == 0) {\n            return false;\n        }\n\n        if ($field_name == false) {\n            $field_name = 'id';\n        }\n        if ($field_name == 'id' or is_numeric($id)) {\n            $id = intval($id);\n        }\n        $params = array();\n        $params[$field_name] = $id;\n        $params['table'] = $table;\n        $params['single'] = true;\n\n        $data = $this->get($params);\n\n        return $data;\n    }\n\n\n    public $_query_get_cache = [];\n    public $_query_get_cache_is_disabled = false;\n    public function clearCache($table = false){\n\n\n        $this->_query_get_cache = []; //empty whole local cache\n        $this->_query_get_cache_is_disabled = true; //disable the cache after flush\n\n       AbstractRepository::disableCache();\n\n\n//        if($table){\n//            $this->_query_get_cache[$table] = null;\n//        } else {\n//        // $this->_query_get_cache[$table] = [];\n//        }\n    }\n\n\n    static $model_cache_mem = [];\n\n\n\n    public function table($table, $params = [])\n    {\n     // return DB::table($table);\n\n//        if (isset(self::$model_cache_mem[$table])) {\n//           // $instance = self::$model_cache_mem[$table]->newInstance($params, true);\n//         //   $instance = self::$model_cache_mem[$table]->newModelQuery($params, true);\n//          //  dump($instance);\n//         //   return self::$model_cache_mem[$table];\n//          //  return $instance;\n//        }\n\n        $this->use_model_cache[$table] = false;\n        //@todo move this to external resolver class or array\n        if ($table == 'content' || $table == 'categories' || $table == 'options') {\n\n            $this->use_model_cache[$table]= true;\n\n            if ($table == 'content') {\n              //  $model = new Content($params);\n                 $model = app()->make(Content::class);\n\n                //    $model::boot();\n            } else if ($table == 'categories') {\n                 $model = new Category($params);\n\n\n            }else if ($table == 'options') {\n                 $model = new Option($params);\n\n\n            }\n          //  self::$model_cache_mem[$table] = $model ->newInstance($params, true);;\n\n\n            if ($params and isset($params['filter']) and method_exists($model, 'modelFilter')) {\n                $filterParams = $params;\n                if (!empty($params['filter'])) {\n                    if (is_string($params['filter'])) {\n                        $params['filter'] = html_entity_decode($params['filter'], null, 'UTF-8');\n                        $params['filter'] = urldecode($params['filter']);\n                        $filterParams = parse_params($params['filter']);\n\n                    } else if (is_array($params['filter'])) {\n                        $filterParams = $params['filter'];\n                    }\n                }\n\n                if ($filterParams) {\n                    return $model->filter($filterParams);\n                } else {\n                    return $model->query();\n\n                }\n            } else {\n                return $model->query();\n            }\n        }\n\n        if ($table == 'custom_fields') {\n            $this->use_model_cache[$table] = true;\n            return CustomField::query();\n        }\n\n        if ($table == 'custom_fields_values') {\n            $this->use_model_cache[$table] = true;\n            return CustomFieldValue::query();\n        }\n\n        if ($table == 'media') {\n            $this->use_model_cache[$table]= true;\n            return Media::query();\n        }\n\n\n\n        return DB::table($table);\n    }\n\n    public function supports($table, $feature)\n    {\n        if(is_object($table)){\n            $model = $table;\n        } else {\n            $model = $this->table($table);\n        }\n        $methodVariable = array($model, $feature);\n        if (is_callable($methodVariable, true, $callable_name)) {\n            return true;\n        }\n    }\n\n    private function _collection_to_array($data)\n    {\n        return collection_to_array($data);\n    }\n}\n", "<?php\nnamespace MicroweberPackages\\Module\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Module extends Model\n{\n    public $table = 'modules';\n\n    protected $searchable = [\n        'id',\n        'name',\n        'module',\n        'type',\n        'as_element',\n        'installed',\n        'ui',\n        'ui_admin',\n        'ui_admin_iframe',\n        'is_system',\n        'categories',\n        'settings',\n        'parent_id',\n        'icon',\n        'description',\n    ];\n\n    public static function boot()\n    {\n        // there is some logic in this method, so don't forget this!\n        parent::boot();\n    }\n\n    public function notifications()\n    {\n        return $this->morphMany('Notifications', 'rel');\n    }\n\n    public function icon()\n    {\n        $icon = $this->icon;\n        $icon = str_replace( '{SITE_URL}',site_url(), $icon);\n\n        return $icon;\n    }\n\n    public function getIconInline()\n    {\n        $icon = str_replace( '{SITE_URL}', '', $this->icon);\n        if (get_file_extension($icon) == 'svg') {\n            $content =  file_get_contents($icon);\n            $content = str_replace('<?xml version=\"1.0\" encoding=\"utf-8\"?>', '', $content);\n            return $content;\n        } else {\n            return '<img src=\"' . $icon . '\" />';\n        }\n    }\n\n    public function register($module)\n    {\n  //      return app()->module_manager->register('order/list', 'MicroweberPackages\\Order\\Http\\Controllers\\OrdersController');;\n    }\n\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\Content;\n\n\nuse Illuminate\\Support\\Facades\\DB;\nuse MicroweberPackages\\Category\\Models\\CategoryItem;\nuse MicroweberPackages\\CustomField\\Models\\CustomField;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\Menu\\Menu;\nuse MicroweberPackages\\App\\Http\\Controllers\\FrontendController;\nuse MicroweberPackages\\Multilanguage\\MultilanguageHelpers;\n\nuse MicroweberPackages\\Content\\Models\\ContentRelated;\n\n\nclass ContentManagerHelpers extends ContentManagerCrud\n{\n    public function add_content_to_menu($content_id, $menu_id = false)\n    {\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        $new_item = false;\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        if (isset($content_id['id'])) {\n            $content_id = $content_id['id'];\n        }\n\n        $content_id = intval($content_id);\n        if ($content_id == 0) {\n            return;\n        }\n        if ($menu_id != false) {\n            //  $_REQUEST['add_content_to_menu'] = array( $menu_id);\n        }\n\n        $menus = 'menus';\n        if (isset($_REQUEST['add_content_to_menu']) and is_array($_REQUEST['add_content_to_menu'])) {\n            $add_to_menus = $_REQUEST['add_content_to_menu'];\n            $add_to_menus_int = array();\n            foreach ($add_to_menus as $value) {\n                if ($value == 'remove_from_all') {\n                    Menu::where('content_id', $content_id)->where('item_type', 'menu_item')->delete();\n                    $this->app->cache_manager->delete('menus');\n                }\n                $value = intval($value);\n                if ($value > 0) {\n                    $add_to_menus_int[] = $value;\n                }\n            }\n        }\n\n        $add_under_parent_page = false;\n        $content_data = false;\n\n        if (isset($_REQUEST['add_content_to_menu_auto_parent']) and ($_REQUEST['add_content_to_menu_auto_parent']) != false) {\n            $add_under_parent_page = true;\n            $content_data = $this->get_by_id($content_id);\n            if ($content_data['is_active'] != 1) {\n                return false;\n            }\n        }\n        if (!isset($add_to_menus_int) or empty($add_to_menus_int)) {\n            if ($menu_id != false) {\n                $add_to_menus_int[] = intval($menu_id);\n            }\n        }\n\n        if (isset($add_to_menus_int) and is_array($add_to_menus_int)) {\n            Menu::where('content_id', $content_id)\n                ->where('item_type', 'menu_item')\n                ->whereNotIn('parent_id', $add_to_menus_int)\n                ->delete();\n            foreach ($add_to_menus_int as $value) {\n                //  $check = $this->app->menu_manager->get_menu_items(\"parent_id={$value}&content_id=$content_id\");\n\n                $check = Menu::where('content_id', $content_id)\n                    ->where('item_type', 'menu_item')\n                    ->where('parent_id', $value)\n                    ->count();\n\n                if ($check == 0) {\n                    $save = array();\n                    $save['item_type'] = 'menu_item';\n                    $save['is_active'] = 1;\n                    $save['parent_id'] = $value;\n                    $save['position'] = 999999;\n                    if ($add_under_parent_page != false and is_array($content_data) and isset($content_data['parent'])) {\n                        $parent_cont = $content_data['parent'];\n                        $check_par = $this->app->menu_manager->get_menu_items(\"limit=1&one=1&content_id=$parent_cont\");\n                        if (is_array($check_par) and isset($check_par['id'])) {\n                            $save['parent_id'] = $check_par['id'];\n                        }\n                    }\n\n                    $save['url'] = '';\n                    $save['content_id'] = $content_id;\n\n                    $new_item = $this->app->database_manager->save($menus, $save);\n\n                    $this->app->cache_manager->delete('menus');\n\n                    $this->app->cache_manager->delete('menus/' . $save['parent_id']);\n\n                    $this->app->cache_manager->delete('menus/' . $value);\n\n                    $this->app->cache_manager->delete('content/' . $content_id);\n                }\n            }\n\n            $this->app->cache_manager->delete('menus');\n            $this->app->cache_manager->delete('menus');\n        }\n\n        return $new_item;\n    }\n\n    public function delete($data)\n    {\n        $to_trash = true;\n        $to_untrash = false;\n\n        if (!is_array($data)) {\n            $del_data = array();\n            $del_data['id'] = intval($data);\n            $data = $del_data;\n            $to_trash = false;\n        }\n\n        if (isset($data['forever']) or isset($data['delete_forever'])) {\n            $to_trash = false;\n        }\n\n        if (isset($data['undelete'])) {\n            $to_trash = true;\n            $to_untrash = true;\n        }\n\n        $del_ids = array();\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $del_ids[] = $c_id;\n            if ($to_trash == false) {\n                \\MicroweberPackages\\Content\\Models\\Content::where('id', $c_id)->first()->delete();\n            }\n        }\n\n        $this->app->event_manager->trigger('content.before.delete', $data);\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n\n            foreach ($data['ids'] as $value) {\n                $c_id = intval($value);\n                if ($c_id) {\n                    $del_ids[] = $c_id;\n                    if ($to_trash == false) {\n                        \\MicroweberPackages\\Content\\Models\\Content::where('id', $c_id)->first()->delete();\n                    }\n                }\n            }\n        }\n//dd($del_ids);\n        if (!empty($del_ids)) {\n            //DB::transaction(function () use ($del_ids, $to_untrash, $to_trash) {\n            foreach ($del_ids as $value) {\n                $c_id = intval($value);\n\n                if ($c_id) {\n                    if ($to_untrash == true) {\n\n                        DB::table('content')->whereId($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        DB::table('content')->whereParent($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        DB::table('categories')->whereRelId($c_id)->whereRelType('content')->whereIsDeleted(1)->update(['is_deleted' => 0]);\n\n                    } elseif ($to_trash == false) {\n                        DB::table('content')->whereParent($c_id)->update(['parent' => 0]);\n\n                        $this->app->database_manager->delete_by_id('menus', $c_id, 'content_id');\n\n\n                            DB::table('media')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n\n\n                            DB::table('categories')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n\n\n                            DB::table('categories_items')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n                            DB::table('custom_fields')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n\n\n                            DB::table('content_data')->where('content_id', '=', $c_id)->delete();\n\n\n                            DB::table('menus')->where('content_id', '=', $c_id)->delete();\n\n                    } else {\n                        DB::table('content')->whereId($c_id)->update(['is_deleted' => 1]);\n                        DB::table('content')->whereParent($c_id)->update(['is_deleted' => 1]);\n\n\n                            DB::table('categories')->whereRelId($c_id)->whereRelType('content')->update(['is_deleted' => 1]);\n\n                    }\n                    $this->app->cache_manager->delete('content/' . $c_id);\n                }\n            }\n            // });\n        }\n        $this->app->cache_manager->delete('menus');\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('categories');\n        $this->app->cache_manager->delete('content');\n\n        return $del_ids;\n    }\n\n    public function reset_modules_settings($modules_ids)\n    {\n        if (isset($modules_ids['modules_ids'])) {\n            $modules_ids = $modules_ids['modules_ids'];\n        }\n        //data.\n\n        if (is_array($modules_ids) and !empty($modules_ids)) {\n            foreach ($modules_ids as $modules_id) {\n                if ($modules_id) {\n                    \\MicroweberPackages\\Option\\Models\\Option::where('option_group', '=', $modules_id)->delete();\n                    \\MicroweberPackages\\Media\\Models\\Media::where('rel_type', '=', 'modules')->where('rel_id', '=', $modules_id)->delete();\n                    CustomField::where('rel_type', '=', 'module')->where('rel_id', '=', $modules_id)->delete();\n\n                }\n            }\n            event_trigger('mw.reset_modules_settings', $modules_ids);\n\n            $this->app->cache_manager->delete('options');\n            $this->app->cache_manager->delete('media');\n\n        }\n        return true;\n    }\n\n    public function reset_edit_field($data)\n    {\n        if ($data) {\n            if (isset($data['reset'])) {\n                $data = $data['reset'];\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.before', $data);\n\n            foreach ($data as $item) {\n                if (isset($item['rel']) and ($item['rel'])) {\n                    if (isset($item['field']) and ($item['field'])) {\n\n                        $del = \\DB::table('content_fields')\n                            ->where('rel_type', '=', $item['rel'])\n                            ->where('field', '=', $item['field'])->delete();\n\n                    }\n                }\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.after', $data);\n\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('repositories');\n        $this->app->cache_manager->delete('options');\n\n        return true;\n\n\n    }\n\n    public function bulk_assign($data)\n    {\n        if (is_string($data)) {\n            $data = parse_params($data);\n        }\n\n        if (isset($data['content_ids'])) {\n            $content_ids = $data['content_ids'];\n\n            if (is_array($content_ids)) {\n                foreach ($content_ids as $content_id) {\n                    $to_save = array();\n                    $to_save['id'] = $content_id;\n                    $to_save['skip_timestamps'] = true;\n                    if (isset($data['parent_id'])) {\n                        $to_save['parent'] = $data['parent_id'];\n                    }\n                    if (isset($data['categories'])) {\n                        $to_save['categories'] = $data['categories'];\n                        CategoryItem::where('rel_id', $content_id)->where('rel_type', 'content')->delete();\n                    }\n                    $this->app->content_manager->save_content($to_save);\n                }\n            }\n        }\n\n        return array('success' => 'Content is moved');\n    }\n\n    public function create_default_content($what)\n    {\n        if (defined('MW_NO_DEFAULT_CONTENT')) {\n            return true;\n        }\n\n        switch ($what) {\n            case 'shop' :\n                $is_shop = $this->get('content_type=page&is_shop=0');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n\n                    $add_page['title'] = _e('Online shop', true);\n                    $add_page['url'] = 'shop';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = '1';\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (isset($item['layout_file']) and isset($item['is_shop'])) {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('custom_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                $posts = $this->get('content_type=post&parent=' . $new_shop);\n                if ($posts == false and $new_shop != false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = $new_shop;\n                    $add_page['title'] = 'My product';\n                    $add_page['url'] = 'my-product';\n                    $add_page['content_type'] = 'post';\n                    $add_page['subtype'] = 'product';\n                    $add_page['is_active'] = 1;\n                    //$new_shop = $this->save_content($add_page);\n                    //$this->app->cache_manager->delete('content');\n                    //$this->app->cache_manager->clear();\n                }\n\n                break;\n\n            case 'blog' :\n                $is_shop = $this->get('is_deleted=0&content_type=page&subtype=dynamic&is_shop=1&limit=1');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n                    $add_page['title'] = _e('Blog', true);\n                    $add_page['url'] = 'blog';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = 0;\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (!isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n\n                        foreach ($find_layout as $item) {\n                            if (isset($item['name']) and stristr($item['name'], 'blog') and !isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('content_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                break;\n\n            case 'default' :\n            case 'install' :\n                $any = $this->get('count=1&content_type=page&limit=1');\n                if (intval($any) == 0) {\n                    $table = 'content';\n                    mw_var('FORCE_SAVE_CONTENT', $table);\n                    mw_var('FORCE_SAVE', $table);\n\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['title'] = 'Home';\n                    $add_page['url'] = 'home';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'static';\n                    $add_page['is_shop'] = 0;\n                    //$add_page['debug'] = 1;\n                    $add_page['is_active'] = 1;\n                    $add_page['is_home'] = 1;\n                    $add_page['active_site_template'] = 'default';\n                    $new_shop = $this->save_content($add_page);\n                }\n\n                break;\n\n            default :\n                break;\n        }\n    }\n\n    public function copy($data)\n    {\n        $new_cont_id = false;\n\n        if (defined('MW_API_CALL')) {\n            $to_trash = true;\n            $adm = $this->app->user_manager->is_admin();\n            if ($adm == false) {\n                return array('error' => 'You must be admin to copy content!');\n            }\n        }\n        if (isset($data['id'])) {\n            $this->app->event_manager->trigger('content.before.copy', $data);\n            $cont = get_content_by_id($data['id']);\n            if ($cont != false and isset($cont['id'])) {\n                $new_cont = $cont;\n                if (isset($new_cont['title'])) {\n                    $new_cont['title'] = $new_cont['title'] . ' copy';\n                }\n\n                $new_cont['id'] = 0;\n                $content_cats = array();\n\n                $cats = content_categories($cont['id']);\n                if (!empty($cats)) {\n                    foreach ($cats as $cat) {\n                        if (isset($cat['id'])) {\n                            $content_cats[] = $cat['id'];\n                        }\n                    }\n                }\n                if (!empty($content_cats)) {\n                    $new_cont['categories'] = $content_cats;\n                }\n\n                if (isset($new_cont['is_home'])) {\n                    unset($new_cont['is_home']);\n                }\n\n                if (isset($new_cont['content'])) {\n                    $new_cont['content'] = $this->app->parser->make_tags($new_cont['content'], array('change_module_ids' => true));\n\n                }\n\n                if (isset($new_cont['content_body'])) {\n                    $new_cont['content_body'] = $this->app->parser->make_tags($new_cont['content_body'], array('change_module_ids' => true));\n                }\n\n\n                $new_cont_id = $this->save($new_cont);\n\n                $cust_fields = get_custom_fields('content', $data['id'], true);\n                if (!empty($cust_fields)) {\n                    foreach ($cust_fields as $cust_field) {\n                        $new = $cust_field;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_custom_field($new);\n                    }\n                }\n                $images = get_pictures($data['id']);\n                if (!empty($images)) {\n                    foreach ($images as $image) {\n                        $new = $image;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_media($new);\n                    }\n                }\n            }\n        }\n\n        return $new_cont_id;\n    }\n\n    public function related_content_add($data)\n    {\n        if (isset($data['content_id']) and isset($data['related_content_id'])) {\n            $related = ContentRelated::firstOrCreate(\n                ['content_id' => $data['content_id'], 'related_content_id' => $data['related_content_id']]\n            );\n            $related->position = 0;\n            $related->save();\n\n            $this->app->cache_manager->delete('content');\n            $this->app->cache_manager->delete('repositories');\n\n            return $related;\n        }\n    }\n\n    public function related_content_remove($data)\n    {\n        if (isset($data['content_id']) and isset($data['related_content_id'])) {\n            $related = ContentRelated::where(\n                ['content_id' => $data['content_id'], 'related_content_id' => $data['related_content_id']]\n            )->delete();\n\n        } else if (isset($data['id'])) {\n            $related = ContentRelated::where(\n                'id', $data['id']\n            )->delete();\n\n\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('repositories');\n\n        return true;\n    }\n\n\n    public function related_content_reorder($data)\n    {\n        if (isset($data['ids'])) {\n            $value = $data['ids'];\n            if (is_array($value)) {\n                $indx = array();\n                $i = 1;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n\n                    ++$i;\n                }\n                $this->app->database_manager->update_position_field('content_related', $indx);\n                $return_res = $indx;\n            }\n        }\n\n        $this->app->cache_manager->delete('content_related');\n\n        $this->app->cache_manager->delete('content');\n\n\n    }\n\n    public function save_from_live_edit($post_data)\n    {\n        $is_module = false;\n\n\n//        if (php_can_use_func('ini_set')) {\n//            @ini_set('memory_limit', '512M');\n//        }\n//\n//        if (php_can_use_func('set_time_limit')) {\n//            @set_time_limit(60);\n//        }\n\n        $save_as_draft = false;\n        if (isset($post_data['save_draft'])) {\n            $save_as_draft = true;\n            unset($post_data['save_draft']);\n        }\n\n        $json_print = array();\n\n\n        $is_admin = $this->app->user_manager->is_admin();\n        if ($post_data) {\n            if (isset($post_data['data_base64'])) {\n\n                if (!php_can_use_func('base64_decode')) {\n                    return array('error' => 'The base64_decode function must be enabled. Please enable base64_decode function in php.ini');\n                }\n\n                $post_data['json_obj'] = @base64_decode($post_data['data_base64']);\n                if($post_data['json_obj'] == false){\n                    return array('error' => 'The invalid data was sent');\n                }\n\n            }\n            if (isset($post_data['json_obj'])) {\n                $obj = @json_decode($post_data['json_obj'], true);\n                if($obj == false){\n                    return array('error' => 'The invalid data was sent');\n                }\n                $post_data = $obj;\n            }\n            if (isset($post_data['mw_preview_only'])) {\n                $is_no_save = true;\n                unset($post_data['mw_preview_only']);\n            }\n            $is_no_save = false;\n            $is_draft = false;\n            if (isset($post_data['is_draft'])) {\n                unset($post_data['is_draft']);\n                $is_draft = 1;\n            }\n            $the_field_data_all = $post_data;\n            $this->app->event_manager->trigger('mw.content.save_edit.before', $the_field_data_all);\n\n        } else {\n            return array('error' => 'no POST?');\n        }\n\n        $ustr2 = $this->app->url_manager->string(1, 1);\n\n        if (isset($ustr2) and trim($ustr2) == 'favicon.ico') {\n            return false;\n        }\n        $ref_page_url = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_page_url = $_SERVER['HTTP_REFERER'];\n            $ref_page_url = xss_clean($ref_page_url);\n        }\n\n        if (isset($post_data['id']) and intval($post_data['id']) > 0) {\n            $page_id = intval($post_data['id']);\n        } elseif ($ref_page_url != '') {\n            //removing hash from url\n            if (strpos($ref_page_url, '#')) {\n                $ref_page_url = substr($ref_page_url, 0, strpos($ref_page_url, '#'));\n            }\n\n            $slug_page = $this->app->permalink_manager->slug($ref_page_url, 'page');\n            $slug_post = $this->app->permalink_manager->slug($ref_page_url, 'post');\n            $slug_category = $this->app->permalink_manager->slug($ref_page_url, 'category');\n\n            if ($slug_page) {\n                $ref_post = false;\n                if ($slug_post) {\n                    $ref_post = $this->get_by_url($slug_post);\n                }\n\n                if ($ref_post) {\n                    $ref_page2 = $ref_page = $ref_post;\n                } else {\n                    $ref_page2 = $ref_page = $this->get_by_url($slug_page);\n                }\n\n            } elseif ($slug_post) {\n\n                $ref_post = $this->get_by_url($slug_post);\n\n            } elseif ($slug_category) {\n                $cat = $this->app->category_manager->get_by_url($slug_category);\n                if ($cat) {\n                    $content_for_cat = $this->app->category_manager->get_page($cat['id']);\n                    if ($content_for_cat) {\n                        $ref_page2 = $ref_page = $content_for_cat;\n                    }\n                }\n            }\n\n            if (isset($ref_page2)) {\n                if ($ref_page2 == false) {\n                    $ustr = $this->app->url_manager->string(1);\n\n                    if ($this->app->module_manager->is_installed($ustr)) {\n                        $ref_page = false;\n                    }\n                } else {\n                    $ref_page = $ref_page2;\n                }\n            }\n\n\n            if (isset($ustr) and trim($ustr) == 'favicon.ico') {\n                return false;\n            } elseif ($ustr2 == '' or $ustr2 == '/') {\n                $ref_page = $this->app->content_manager->homepage();\n                if ($ref_page_url) {\n                    $page_url_ref = $this->app->url_manager->param('content_id', $ref_page_url);\n                    if ($page_url_ref !== false) {\n                        if ($page_url_ref == 0) {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            if (!isset($ref_page) or $ref_page == false) {\n                $guess_page_data = new FrontendController();\n                // $guess_page_data =  new  $this->app->controller($this->app);\n                $ref_page_url = strtok($ref_page_url, '?');\n\n\n                $guess_page_data->page_url = $ref_page_url;\n                $guess_page_data->return_data = true;\n                $guess_page_data->create_new_page = false;\n                $pd = $guess_page_data->index();\n\n                $newPageCreate = true;\n                if (isset($pd['id']) and $pd['id'] != 0) {\n                    $pd1 = DB::table('content')->where('id', $pd['id'])->first();\n                    $pd1 = (array)$pd1;\n                    if ($pd1) {\n                        $pd = $pd1;\n                        $newPageCreate = false;\n                    }\n\n                }\n\n                $ustr = $this->app->url_manager->string(1);\n                $is_module = false;\n\n                if ($newPageCreate) {\n                    $pd['url'] = $ustr;\n                }\n\n\n                if (isset($pd['active_site_template']) and $pd['active_site_template'] == template_name()) {\n                    $pd['active_site_template'] = '';\n                }\n\n                if ($this->app->module_manager->is_installed($ustr)) {\n                    $is_module = true;\n                    $save_page['layout_file'] = 'clean.php';\n                    $save_page['subtype'] = 'module';\n                    $hp_id = $this->app->content_manager->homepage();\n                    if (isset($hp_id['id'])) {\n                        $page_id = $hp_id['id'];\n                    } else {\n                        $page_id = 1;\n                    }\n                    $is_module = 1;\n                    $save_page = false;\n                }\n\n                if ($is_admin == true and is_array($pd) and $is_module == false) {\n                    $save_page = $pd;\n                    if (!isset($_GET['mw_quick_edit'])) {\n                        if (isset($ref_page_url) and $ref_page_url != false) {\n                            $save_page['url'] = $ref_page_url;\n                        } else {\n                            $save_page['url'] = $this->app->url_manager->string(1);\n                        }\n                        $title = str_replace('%20', ' ', ($this->app->url_manager->string(1)));\n\n                        if ($title == 'editor_tools/wysiwyg' or $title == 'api/module' or $title == 'admin/view:content') {\n                            return false;\n                        }\n                        if (!isset($save_page['title'])) {\n                            $save_page['title'] = $title;\n                        }\n                        if ($save_page['url'] == '' or $save_page['url'] == '/' or $save_page['url'] == $this->app->url_manager->site()) {\n                            $save_page['url'] = 'home';\n                            $home_exists = $this->app->content_manager->homepage();\n                            if ($home_exists == false) {\n                                $save_page['is_home'] = 1;\n                            }\n                        }\n                    }\n                    if ($save_page['title'] == '') {\n                        $save_page['title'] = 'Home';\n                    }\n                    if (!isset($save_page['is_active'])) {\n                        $save_page['is_active'] = 1;\n                    }\n                    if (isset($save_page['content_type']) and $save_page['content_type'] == 'page') {\n                        if (!isset($save_page['subtype'])) {\n                            $save_page['subtype'] = 'static';\n                            if (!isset($save_page['layout_file']) or $save_page['layout_file'] == false) {\n                                $save_page['layout_file'] = 'inherit';\n                            }\n                        }\n                    }\n\n                    if ($save_page != false) {\n                        if (isset($save_page['url']) and $save_page['url']) {\n                            $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            $u = $this->app->permalink_manager->slug($u, 'content');\n\n                            if (!$u) {\n                                $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            }\n\n                            if ($u) {\n                                $try_to_find_page_with_url = $this->app->content_manager->get_by_url($u);\n\n                                if ($try_to_find_page_with_url and isset($try_to_find_page_with_url['id'])) {\n                                    $save_page['id'] = $try_to_find_page_with_url['id'];\n                                }\n                            }\n                        }\n                        if (!isset($save_page['id'])) {\n                            $page_id = $save_page['id'];\n                        } else {\n                            if (!$save_as_draft) {\n\n                                $should_redirect_to_new_url = false;\n                                if (isset($save_page['id']) && $save_page['id'] > 0) {\n                                    unset($save_page['url']);\n                                } else {\n                                    $should_redirect_to_new_url = true;\n\n                                    $multilanguageIsActive = MultilanguageHelpers::multilanguageIsEnabled();\n                                    if ($multilanguageIsActive) {\n                                        if (function_exists('detect_lang_from_url')) {\n                                            $lang_from_url = detect_lang_from_url($save_page['url']);\n                                            if (isset($lang_from_url['target_url'])) {\n\n                                                $save_page['url'] = $lang_from_url['target_url'];\n                                                $save_page['title'] = $lang_from_url['target_url'];\n                                            }\n                                        }\n                                    }\n                                }\n\n\n                                $page_id = $this->app->content_manager->save_content_admin($save_page);\n                                $new_content_link = content_link($page_id);\n                                if ($should_redirect_to_new_url) {\n                                    $json_print['new_page_url'] = $new_content_link;\n                                }\n\n\n                            }\n\n                        }\n                    }\n                }\n            } else {\n                $page_id = $ref_page['id'];\n                $ref_page['custom_fields'] = $this->app->content_manager->custom_fields($page_id, false);\n            }\n        }\n\n        $author_id = user_id();\n        if ($is_admin == false and $page_id != 0 and $author_id != 0) {\n            $page_data_to_check_author = $this->get_by_id($page_id);\n            if (!isset($page_data_to_check_author['created_by']) or ($page_data_to_check_author['created_by'] != $author_id)) {\n                return array('error' => 'You dont have permission to edit this content');\n            }\n        } elseif ($is_admin == false) {\n            return array('error' => 'Not logged in as admin to use ' . __FUNCTION__);\n        }\n\n\n        foreach ($the_field_data_all as $the_field_data) {\n            $save_global = false;\n            $save_layout = false;\n\n            if (isset($page_id) and $page_id != 0 and !empty($the_field_data)) {\n                $save_global = false;\n\n                $content_id = $page_id;\n\n                $url = $this->app->url_manager->string(true);\n                $some_mods = array();\n                if (isset($the_field_data) and is_array($the_field_data) and isset($the_field_data['attributes'])) {\n                    if (isset($the_field_data['html'])) {\n                        $field = false;\n                        if (isset($the_field_data['attributes']['field'])) {\n                            $field = trim($the_field_data['attributes']['field']);\n                        }\n\n                        if (isset($the_field_data['attributes']['data-field'])) {\n                            $field = $the_field_data['attributes']['field'] = trim($the_field_data['attributes']['data-field']);\n                        }\n\n                        if (($field != false)) {\n                            $page_element_id = $field;\n                        }\n                        if (!isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = 'content';\n                        } else {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        if (isset($the_field_data['attributes']['rel-id'])) {\n                            $content_id = $the_field_data['attributes']['rel-id'];\n                        } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                            $content_id = $the_field_data['attributes']['rel_id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel-id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel_id'];\n                        }\n\n                        $save_global = false;\n                        if (isset($the_field_data['attributes']['rel_type']) and (trim($the_field_data['attributes']['rel_type']) == 'global' or trim($the_field_data['attributes']['rel_type'])) == 'module') {\n                            $save_global = true;\n                        } else {\n                            $save_global = false;\n                        }\n                        if (isset($the_field_data['attributes']['rel_type']) and trim($the_field_data['attributes']['rel_type']) == 'layout') {\n                            $save_global = false;\n                            $save_layout = true;\n                        } else {\n                            $save_layout = false;\n                        }\n\n                        $save_module = false;\n\n                        if (isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        $save_module = true;\n\n                        if (isset($the_field_data['attributes']['rel_type'])\n                            and (trim($the_field_data['attributes']['rel_type']) == 'content'\n                                or trim($the_field_data['attributes']['rel_type']) == 'post'\n                                or trim($the_field_data['attributes']['rel_type']) == 'page'\n                                or trim($the_field_data['attributes']['rel_type']) == 'category'\n                                or trim($the_field_data['attributes']['rel_type']) == 'product')) {\n                            $save_module = false;\n                            // this will set the rel_id\n                        }\n\n\n\n\n\n//\n//\n//                        if (isset($the_field_data['attributes']['rel_type'])\n//                            and (trim($the_field_data['attributes']['rel_type']) == 'module')) {\n//                            $save_module = true;\n//                        } else {\n//                            $save_module = false;\n//                        }\n\n\n                        if(!$save_module){\n                            if (!isset($the_field_data['attributes']['data-id'])) {\n                                $the_field_data['attributes']['data-id'] = $content_id;\n                            }\n                        }\n\n\n\n\n                        if (!isset($the_field_data['attributes']['data-id']) and isset($the_field_data['attributes']['rel_id'])) {\n                            $the_field_data['attributes']['data-id'] = $the_field_data['attributes']['rel_id'];\n                        }\n\n\n                        if (isset($the_field_data['attributes']['rel_type']) and isset($the_field_data['attributes']['data-id'])) {\n                            $rel_ch = trim($the_field_data['attributes']['rel_type']);\n                            switch ($rel_ch) {\n                                case 'content':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $the_field_data['attributes']['data-id'];\n                                    break;\n                                case 'page':\n\n                                case 'post':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $page_id;\n                                    break;\n\n                                case 'module':\n                                    $save_global = true;\n                                    $save_module = true;\n                                    break;\n\n                                default:\n                                    $save_global = true;\n                                    $save_module = true;\n                                    break;\n                            }\n                        }\n\n                        $inh = false;\n\n                        if (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'inherit') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $inh = $this->app->content_manager->get_inherited_parent($page_id);\n                            if ($inh != false) {\n                                $content_id_for_con_field = $content_id = $inh;\n                            }\n                        } elseif (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'page') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $check_if_page = $this->get_by_id($content_id);\n                            if (is_array($check_if_page)\n                                and isset($check_if_page['content_type'])\n                                and isset($check_if_page['parent'])\n                                and $check_if_page['content_type'] != ''\n                                and intval($check_if_page['parent']) != 0\n                                and $check_if_page['content_type'] != 'page'\n                            ) {\n                                $inh = $check_if_page['parent'];\n                                if ($inh != false) {\n                                    $content_id_for_con_field = $content_id = $inh;\n                                }\n                            }\n                        }\n\n                        $save_layout = false;\n                        if (isset($post_data['id'])) {\n                            $content_id_for_con_field = $post_data['id'];\n                        } elseif ($inh == false and !isset($content_id_for_con_field)) {\n                            if (isset($ref_page)) {\n\n\n                                if (is_array($ref_page) and isset($ref_page['parent']) and isset($ref_page['content_type']) and $ref_page['content_type'] != 'page') {\n                                    $content_id_for_con_field = intval($ref_page['parent']);\n                                } else {\n                                    $content_id_for_con_field = intval($ref_page['id']);\n                                }\n                            }\n                        }\n                        $html_to_save = $the_field_data['html'];\n\n                        $html_to_save = $content =  $this->app->parser->make_tags($html_to_save);\n\n                        //\\Log::info($html_to_save);\n\n\n                        $xssClean = new XSSClean();\n                        $html_to_save = $content = $xssClean->clean($html_to_save);\n\n\n                      //  \\Log::info($html_to_save);\n\n                        if ($save_module == false and $save_global == false and $save_layout == false) {\n                            if ($content_id) {\n\n                                $for_histroy = get_content_by_id($content_id);\n\n                                $for_histroy['custom_fields'] = $this->app->content_manager->custom_fields($content_id, false);\n\n\n                                $old = false;\n                                $field123 = str_ireplace('custom_field_', '', $field);\n                                if (stristr($field, 'custom_field_')) {\n                                    $old = $for_histroy['custom_fields'][$field123];\n                                } else {\n                                    if (isset($for_histroy['custom_fields'][$field123])) {\n                                        $old = $for_histroy['custom_fields'][$field123];\n                                    } elseif (isset($for_histroy[$field])) {\n                                        $old = $for_histroy[$field];\n                                    }\n                                }\n\n\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'content';\n                                $history_to_save['id'] = $content_id;\n                                $history_to_save['value'] = $old;\n                                $history_to_save['field'] = $field;\n\n                                $cont_field = array();\n                                $cont_field['rel_type'] = $rel_ch;\n                                $cont_field['field'] = $field;\n                                $cont_field['rel_id'] = $content_id_for_con_field;\n                                $cont_field['value'] = $html_to_save;\n\n                                if ($is_draft != false) {\n                                    $cont_id = $content_id_for_con_field;\n                                    $cont_field['is_draft'] = 1;\n                                    $cont_field['rel_type'] = $rel_ch;\n                                    $cont_field['url'] = $url;\n                                    $to_save_draft = true;\n                                    if (isset($cont_field['value'])) {\n                                        $draftmd5 = md5($cont_field['value']);\n\n                                        $draftmd5_last = $this->app->user_manager->session_get('content_draft_save_md5');\n                                        if ($draftmd5_last == $draftmd5) {\n                                            $to_save_draft = false;\n                                        } else {\n                                            $this->app->user_manager->session_set('content_draft_save_md5', $draftmd5);\n                                        }\n                                    }\n                                    if ($to_save_draft) {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    }\n                                } else {\n                                    if ($field != 'content' and $field != 'content_body') {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    } else {\n                                        $cont_table_save = array();\n                                        $cont_table_save[$field]=$html_to_save;\n                                    }\n                                }\n\n\n                                $this->app->event_manager->trigger('mw.content.save_edit', $cont_field);\n\n                                $to_save = array();\n                                $to_save['id'] = $content_id;\n                                if(isset($cont_table_save)  and $cont_table_save){\n                                    $to_save = array_merge($to_save, $cont_table_save);\n                                }\n\n                                $is_native_fld = $this->app->database_manager->get_fields('content');\n                                if (in_array($field, $is_native_fld)) {\n                                    $to_save[$field] = ($html_to_save);\n                                }\n\n                                if ($is_no_save != true and $is_draft == false) {\n                                    $to_save2 = $to_save;\n                                    //   $to_save2['rel_type'] = 'content';\n                                    $to_save2['rel_type'] = $rel_ch;\n                                    $to_save2['rel_id'] = $content_id_for_con_field;\n                                    $to_save2['field'] = $field;\n                                    $json_print[] = $to_save2;\n\n                                    $saved = $this->app->content_manager->save_content_admin($to_save);\n\n                                }\n                            } elseif (isset($category_id)) {\n                                echo __FILE__ . __LINE__ . ' category is not implemented ... not ready yet';\n                            }\n                        } else {\n                            $cont_field = array();\n                            $cont_field['rel_type'] = $the_field_data['attributes']['rel_type'];\n                            $cont_field['rel_id'] = 0;\n                            if (isset($the_field_data['attributes']['rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel-id'];\n                            } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel_id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['content-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['content-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['data-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel_id'];\n                            }\n                            $cont_field['value'] = $this->app->parser->make_tags($html_to_save);\n                            if ((!isset($the_field_data['attributes']['field']) or $the_field_data['attributes']['field'] == '') and isset($the_field_data['attributes']['data-field'])) {\n                                $the_field_data['attributes']['field'] = $the_field_data['attributes']['data-field'];\n                            }\n                            $cont_field['field'] = $the_field_data['attributes']['field'];\n\n                            if ($cont_field['rel_type'] == 'module' and !isset($cont_field['rel_id'])) {\n                                $cont_field['rel_id'] = 0;\n                            }\n\n\n                            if ($save_global and $save_module and isset($cont_field['rel_id']) and $cont_field['rel_id'] == 0 and isset($the_field_data['attributes']['field']) and isset($the_field_data['attributes']['rel_type'])) {\n                                // we check for existing fields with rel_id = 0 and remove them\n                                $getExisting = DB::table('content_fields')\n                                    ->where('field', $the_field_data['attributes']['field'])\n                                    ->where('rel_type', $the_field_data['attributes']['rel_type'])->get();\n                                if ($getExisting) {\n                                    //if we have more than one delete the other ones\n                                    $i = 1;\n                                    foreach ($getExisting as $existing) {\n                                        if($existing->rel_id != $cont_field['rel_id']){\n                                            DB::table('content_fields')->where('id', $existing->id)->delete();\n                                        }\n                                        if ($i > 1) {\n                                            DB::table('content_fields')->where('id', $existing->id)->delete();\n                                        }\n                                        $i++;\n                                    }\n                                }\n\n                            }\n\n\n\n\n                            if ($is_draft != false) {\n                                $cont_field['is_draft'] = 1;\n                                $cont_field['url'] = $this->app->url_manager->string(true);\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            } else {\n\n\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            }\n\n\n                            if ($save_global == true and $save_layout == false) {\n\n\n                                $json_print[] = $cont_field;\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'global';\n                                $history_to_save['value'] = $cont_field['value'];\n                                $history_to_save['field'] = $field;\n                                $history_to_save['page_element_id'] = $page_element_id;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        $this->app->event_manager->trigger('mw.content.save_edit.after', $json_print);\n\n\n        if (isset($opts_saved)) {\n            $this->app->cache_manager->delete('options');\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('repositories');\n        $this->app->content_repository->clearCache();\n        $this->app->category_repository->clearCache();\n        $this->app->menu_repository->clearCache();\n\n        return $json_print;\n    }\n\n    public function get_edit_field_draft($data)\n    {\n        $page = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == $this->app->url_manager->site()) {\n                $page = $this->app->content_manager->homepage();\n\n            } else {\n                $page = $this->get_by_url($url);\n            }\n        } else {\n            $url = $this->app->url_manager->string();\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $table_drafts = 'content_fields_drafts';\n\n        $data = parse_params($data);\n\n        if (isset($data['id']) and $data['id'] == 'latest_content_edit') {\n            if (isset($page['id'])) {\n                $page_data = $this->get_by_id($page['id']);\n\n                $results = array();\n                if (isset($page_data['title'])) {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'title',\n                        'value' => $page_data['title'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                }\n                if (isset($page_data['content']) and $page_data['content'] != '') {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'content',\n                        'value' => $page_data['content'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                }\n                //$results[]\n            }\n        } else {\n            $data['is_draft'] = 1;\n            $data['full'] = 1;\n            $data['all'] = 1;\n            $results = $this->get_edit_field($data);\n        }\n\n        $ret = array();\n\n        if (!isset($results) or $results == false) {\n            return;\n        }\n\n        $i = 0;\n        foreach ($results as $item) {\n            if (isset($item['value'])) {\n                $field_content = htmlspecialchars_decode($item['value']);\n                $field_content = $this->_decode_entities($field_content);\n                $item['value'] = $this->app->parser->process($field_content, $options = false);\n            }\n\n            $ret[$i] = $item;\n            ++$i;\n        }\n\n        return $ret;\n    }\n\n    public function save_content_field($data, $delete_the_cache = true)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        $table = 'content_fields';\n         $table_drafts = 'content_revisions_history';\n\n        if ($adm == false) {\n            return false;\n        }\n\n        if (!is_array($data)) {\n            $data = array();\n        }\n\n        if (isset($data['is_draft']) and $data['is_draft']) {\n            $table = $table_drafts;\n        }\n\n\n        $data = $this->app->format->strip_unsafe($data);\n\n        if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n            $draft_url = $this->app->database_manager->escape_string($data['url']);\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-1 week'));\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-5 min'));\n            $history_files_params = array();\n            $history_files_params['order_by'] = 'id desc';\n            $history_files_params['fields'] = 'id';\n            $history_files_params['field'] = $data['field'];\n            $history_files_params['rel_type'] = $data['rel_type'];\n            $history_files_params['rel_id'] = $data['rel_id'];\n            $history_files_params['is_draft'] = 1;\n            $history_files_params['limit'] = 200;\n            $history_files_params['limit'] = 20;\n            $history_files_params['no_cache'] = true;\n\n            $history_files_params['url'] = $draft_url;\n            $history_files_params['current_page'] = 2;\n            $history_files_params['created_at'] = '[lt]' . $last_saved_date;\n            $history_files = $this->get_edit_field($history_files_params);\n\n            if (is_array($history_files)) {\n                $history_files_ids = $this->app->format->array_values($history_files);\n            }\n\n            if (isset($history_files_ids) and is_array($history_files_ids) and !empty($history_files_ids)) {\n\n                foreach ($history_files_ids as $item) {\n                    $this->app->database_manager->delete_by_id($table, $item);\n                }\n\n            }\n        }\n        if (!isset($data['rel_type']) or !isset($data['rel_id'])) {\n            mw_error('Error: ' . __FUNCTION__ . ' rel and rel_id is required');\n        }\n        /*\n                if (isset($data['field']) and !isset($data['is_draft'])) {\n                    $fld = $this->app->database_manager->escape_string($data['field']);\n                    $fld_rel = $this->app->database_manager->escape_string($data['rel_type']);\n                    $del_params = array();\n                    $del_params['rel_type'] = $fld_rel;\n                    $del_params['field'] = $fld;\n                    $del_params['table'] = $table;\n                    $del_params['no_cache'] = true;\n\n                    if ($fld_rel != 'module') {\n                        if (isset($data['rel_id'])) {\n                            $i = ($data['rel_id']);\n                            $del_params['rel_id'] = $i;\n                        } else {\n                            $del_params['rel_id'] = 0;\n                        }\n                    }\n                    $del = $this->app->database_manager->get($del_params);\n\n\n                    if (!empty($del)) {\n                        foreach ($del as $item) {\n                            // TODO\n                            $this->app->database_manager->delete_by_id($table, $item['id']);\n                        }\n                    }\n                    $cache_group = guess_cache_group('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n                    $this->app->cache_manager->delete($cache_group);\n                }*/\n\n\n        if (isset($fld)) {\n            $this->app->cache_manager->delete('content_fields/' . $fld);\n            $this->app->cache_manager->delete('content_fields/global/' . $fld);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $cache_group = 'content_fields';\n            $this->app->cache_manager->delete($cache_group);\n            $this->app->cache_manager->delete('content/' . $data['rel_id']);\n        }\n        if (isset($data['rel_type'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type']);\n        }\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n            $this->app->cache_manager->delete('content_fields/global/' . $data['rel_type'] . '/' . $data['rel_id']);\n        }\n        if (isset($data['field'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['field']);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        $data['table'] = $table;\n        $data['allow_html'] = 1;\n\n\n        // Find existing\n        $filter = array();\n        $filter['field'] = $data['field'];\n        $filter['rel_type'] = $data['rel_type'];\n        $filter['rel_id'] = $data['rel_id'];\n        $filter['one'] = 1;\n        $filter['no_cache'] = true;\n\n        if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n\n            //   $find = $this->app->database_manager->get($table, $filter);\n\n\n            $find = false;\n            //delete old drafts\n            $old = \\DB::table($table)\n                ->where('rel_type', $data['rel_type'])\n                ->where('rel_id', $data['rel_id'])\n                ->where('field', $data['field'])\n                ->where('url', $data['url'])\n                ->take(1000)\n                ->skip(1000)\n                ->get();\n            if (!empty($old)){\n                foreach ($old as $item) {\n                    \\DB::table($table)->where('id', $item->id)->delete();\n                }\n            }\n\n        }  else {\n\n\n\n            $find = $this->app->database_manager->get($table, $filter);\n\n        }\n\n        if ($find and isset($find['id'])) {\n            $data['id'] = $find['id'];\n        }\n\n\n\n        $save = $this->app->database_manager->save($data);\n\n        $this->app->cache_manager->delete('content_fields');\n\n        return $save;\n    }\n\n    private function _decode_entities($text)\n    {\n        $text = html_entity_decode($text, ENT_QUOTES, 'ISO-8859-1'); #NOTE: UTF-8 does not work!\n        $text = preg_replace('/&#(\\d+);/m', 'chr(\\\\1)', $text); #decimal notation\n        $text = preg_replace('/&#x([a-f0-9]+);/mi', 'chr(0x\\\\1)', $text); #hex notation\n        return $text;\n    }\n\n    public function download_remote_images_from_text($text)\n    {\n        $site_url = $this->app->url_manager->site();\n        $images = $this->app->parser->query($text, 'img');\n        $to_download = array();\n        $to_replace = array();\n        $possible_sources = array();\n\n        if (!empty($images)) {\n            foreach ($images as $image) {\n                $srcs = array();\n                preg_match('/src=\"([^\"]*)\"/i', $image, $srcs);\n                if (!empty($srcs) and isset($srcs[1]) and $srcs[1] != false) {\n                    $possible_sources[] = $srcs[1];\n                }\n            }\n        }\n\n        if (!empty($possible_sources)) {\n            foreach ($possible_sources as $image_src) {\n                if (!stristr($image_src, $site_url)) {\n                    $to_replace[] = $image_src;\n                    $image_src = strtok($image_src, '?');\n                    $ext = get_file_extension($image_src);\n                    switch (strtolower($ext)) {\n                        case 'jpg':\n                        case 'jpeg':\n                        case 'png':\n                        case 'gif':\n                        case 'svg':\n                            $to_download[] = $image_src;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n\n        if (!empty($to_download)) {\n            $to_download = array_unique($to_download);\n\n            if (!empty($to_download)) {\n                foreach ($to_download as $src) {\n                    $dl_dir = media_base_path() . 'downloaded' . DS;\n                    if (!is_dir($dl_dir)) {\n                        mkdir_recursive($dl_dir);\n                    }\n                    $dl_file = $dl_dir . md5($src) . basename($src);\n                    if (!is_file($dl_file)) {\n                        $is_dl = $this->app->url_manager->download($src, false, $dl_file);\n                    }\n                    if (is_file($dl_file)) {\n                        $url_local = dir2url($dl_file);\n                        $text = str_ireplace($src, $url_local, $text);\n                    }\n                }\n            }\n        }\n\n        return $text;\n    }\n}\n", "<?php\n\nnamespace MicroweberPackages\\Content\\tests;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse MicroweberPackages\\Core\\tests\\TestCase;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\Multilanguage\\MultilanguageHelpers;\nuse MicroweberPackages\\Page\\Models\\Page;\nuse MicroweberPackages\\User\\Models\\User;\n\nclass ContentApiControllerLiveEditSaveTest extends TestCase\n{\n    public function testSaveContentOnPageLiveEditSingle()\n    {\n        $this->cleanupAndPrepare();\n\n        $unique = uniqid('testSaveContentOnPage');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'pagecontent222' . $unique,\n            'url' => 'pagecontent222' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'active_site_template' => 'new-world',\n            'is_active' => 1,\n        ]);\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n\n        // Save on default lang\n\n\n        $contentFieldHtml = <<<HTML\n<div class=\"feature-icon bg-primary bg-gradient\">\n <svg fill=\"currentColor\" class=\"bi\" width=\"1em\" height=\"1em\"><use xlink:href=\"#collection\"></use></svg>\n</div>\n<div class=\"feature-icon bg-primary bg-gradient\">\n<h2>Featured title</h2>\n<p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>\n<a href=\"#\" class=\"icon-link\">\nCall to action\n</a>\n<a class=\"mb-2\" href=\"\"><i class=\"mdi mdi-arrow-right\"></i></a>\n<a class=\"mb-2\" href=\"https://example.com\"><i class=\"mdi mdi-arrow-up\"></i>example link</a>\n<a class=\"mb-3\" target=\"_blank\" href=\"https://example.com/2\"><i class=\"mdi mdi-arrow-left-bold-box\"></i>link 2</a>\n <!--a comment here to check -->\n</div>\nHTML;\n\n\n        $pq = \\phpQuery::newDocument($contentFieldHtml);\n\n        $contentFieldHtml = $pq->htmlOuter();\n\n\n        $fieldsData = [\n            'field_data_0' => [\n                'attributes' => [\n                    'class' => 'container edit',\n                    'rel' => 'content',\n                    'rel_id' => $findPage->id,\n                    'field' => 'content',\n                ],\n                'html' => $contentFieldHtml\n            ]\n        ];\n        $encoded = base64_encode(json_encode($fieldsData));\n\n        $response = $this->call(\n            'POST',\n            route('api.content.save_edit'),\n            [\n                'data_base64' => $encoded,\n            ],\n            [],//params\n            $_COOKIE,//cookie\n            [],//files\n            $_SERVER //server\n        );\n\n\n        $fieldSaved = $response->decodeResponseJson();\n\n\n        $this->assertEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n        $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n        $this->assertEquals($fieldSaved[0]['field'], 'content');\n        $findPage = Page::whereId($findPage->id)->first();\n\n        $this->assertTrue(str_contains($findPage->content, 'svg fill=\"currentColor\" class=\"bi\" width=\"1em\" height=\"1em\"'));\n        $this->assertTrue(str_contains($findPage->content, '<h2>Featured title</h2>'));\n        $this->assertTrue(str_contains($findPage->content, '<a class=\"mb-2\" href=\"https://example.com\"><i class=\"mdi mdi-arrow-up\"></i>example link</a>'));\n        $this->assertTrue(str_contains($findPage->content, '<a class=\"mb-3\" target=\"_blank\" href=\"https://example.com/2\"><i class=\"mdi mdi-arrow-left-bold-box\"></i>link 2</a>'));\n        $this->assertTrue(str_contains($findPage->content, '<!--a comment here to check -->'));\n\n\n    }\n\n\n    public function testSaveContentOnPageLiveEditFromBootstrapExamples()\n    {\n        $this->cleanupAndPrepare();\n        $unique = uniqid('testSaveContentOnPage');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'pagecontent-bs-examples-save' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'is_active' => 1,\n        ]);\n\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n        $zipname = __DIR__ . '/../../Helper/tests/misc/bootstrap-5.0.2-examples.zip';\n\n\n        //\n\n        $zip = new \\ZipArchive();\n\n        $htmls = [];\n        if ($zip->open($zipname)) {\n            for ($i = 0; $i < $zip->numFiles; $i++) {\n                $fn = $zip->getNameIndex($i);\n                $ext = get_file_extension($fn);\n                if ($ext == 'html') {\n                    $string = $zip->getFromName($fn);\n                    $htmls[$fn] = $string;\n                }\n            }\n        }\n        $zip->close();\n\n\n        $this->assertTrue(!empty($htmls));\n\n\n        foreach ($htmls as $k => $html) {\n\n\n            //remove empty tags\n            $html = preg_replace('/<[^\\/>]*>([\\s]?)*<\\/[^>]*>/', '', $html);\n\n            // remove script tags\n            $html = preg_replace('/<script\\b[^>]*>(.*?)<\\/script>/is', \"\", $html);\n\n            // remove code tags\n            $html = preg_replace('/<code\\b[^>]*>(.*?)<\\/code>/is', \"\", $html);\n\n\n            $l = $html;\n            $pq = \\phpQuery::newDocument($l);\n\n            // $isolated_html = pq('main')->eq(0)->htmlOuter();\n            $contentFieldHtml = pq('main')->eq(0)->htmlOuter();\n\n\n            $fieldsData = [\n                'field_data_0' => [\n                    'attributes' => [\n                        'class' => 'container edit',\n                        'rel' => 'content',\n                        'rel_id' => $findPage->id,\n                        'field' => 'content',\n                    ],\n                    'html' => $contentFieldHtml\n                ]\n            ];\n\n\n            $encoded = base64_encode(json_encode($fieldsData));\n\n            $response = $this->call(\n                'POST',\n                route('api.content.save_edit'),\n                [\n                    'data_base64' => $encoded,\n                ],\n                [],//params\n                $_COOKIE,//cookie\n                [],//files\n                $_SERVER //server\n            );\n\n\n            $fieldSaved = $response->decodeResponseJson();\n\n            $this->assertEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n            $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n            $this->assertEquals($fieldSaved[0]['field'], 'content');\n\n\n            $pq2 = \\phpQuery::newDocument($contentFieldHtml);\n            $this->assertEquals($contentFieldHtml, $pq2->htmlOuter());\n\n\n            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n            $contentFieldHtml1 = trim($contentFieldHtml);\n            $contentFieldHtml2 = trim($findPage->content);\n\n            $this->assertEquals($contentFieldHtml1, $contentFieldHtml2);\n            $this->assertEquals($contentFieldHtml, $findPage->content);\n\n\n        }\n\n\n    }\n\n\n    public function testSaveContentOnPageLiveEditXssList()\n    {\n\n        $this->cleanupAndPrepare();\n\n        $unique = uniqid('testSaveContentOnPageLiveEditXssList');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'xss-test-' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'is_active' => 1,\n        ]);\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n\n        $zip = new \\ZipArchive();\n        $zip->open(__DIR__ . '/../../Helper/tests/misc/xss-test-files.zip');\n        $xssList = $zip->getFromName('xss-payload-list.txt');\n        $zip->close();\n\n        $xssList = preg_replace('~\\R~u', \"\\r\\n\", $xssList);\n        $xssList = explode(PHP_EOL, $xssList);\n\n\n        $xssListChunks = array_chunk($xssList, 100);\n\n\n        foreach ($xssListChunks as $stringChunk) {\n\n            $string = implode(PHP_EOL, $stringChunk);\n            if (empty(trim($string))) {\n                continue;\n            }\n\n            $contentFieldHtml = $string;\n\n\n            $fieldsData = [\n                'field_data_0' => [\n                    'attributes' => [\n                        'class' => 'container edit',\n                        'rel' => 'content',\n                        'rel_id' => $findPage->id,\n                        'field' => 'content',\n                    ],\n                    'html' => $contentFieldHtml\n                ]\n            ];\n\n            $encoded = base64_encode(json_encode($fieldsData));\n\n            $response = $this->call(\n                'POST',\n                route('api.content.save_edit'),\n                [\n                    'data_base64' => $encoded,\n                ],\n                [],//params\n                $_COOKIE,//cookie\n                [],//files\n                $_SERVER //server\n            );\n\n            $fieldSaved = $response->decodeResponseJson();\n\n            $this->assertNotEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n            $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n            $this->assertEquals($fieldSaved[0]['field'], 'content');\n\n            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n            $contentFieldHtml1 = trim($contentFieldHtml);\n            $contentFieldHtml2 = trim($findPage->content);\n\n            $this->assertNotEquals($contentFieldHtml1, $contentFieldHtml2);\n\n\n            foreach ($stringChunk as $stringItem) {\n                if (trim($stringItem) == '') {\n                    continue;\n                }\n                $this->assertStringNotContainsString($stringItem, $findPage->content);\n            }\n\n\n        }\n    }\n\n\n    public function testSaveContentOnPageLiveEditFromOtherExamples()\n    {\n        $this->cleanupAndPrepare();\n\n\n        $unique = uniqid('testSaveContentOnPageLiveEditFromOtherExamples');\n        $newCleanMlPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'pagecontent-other-examples-save' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'is_active' => 1,\n        ]);\n\n        $findPage = Page::whereId($newCleanMlPage)->first();\n\n        $pageId = $findPage->id;\n        $this->assertEquals($findPage->id, $newCleanMlPage);\n\n        $pageLink = content_link($pageId);\n        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n\n        $_SERVER['PHP_SELF'] = '/index.php';\n        $_SERVER['REQ`UEST_URI'] = $pageLink;\n        $_SERVER['REDIRECT_URL'] = $pageLink;\n        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n\n        $zipname = __DIR__ . '/../../Helper/tests/misc/edit-fields-other-html.zip';\n\n\n        $zip = new \\ZipArchive();\n\n        $htmls = [];\n        if ($zip->open($zipname)) {\n            for ($i = 0; $i < $zip->numFiles; $i++) {\n                $fn = $zip->getNameIndex($i);\n                $ext = get_file_extension($fn);\n                if ($ext == 'html') {\n                    $string = $zip->getFromName($fn);\n                    if (trim($string) == '') {\n                        continue;\n                    }\n                    $htmls[$fn] = $string;\n                }\n            }\n        }\n        $zip->close();\n\n\n        $this->assertTrue(!empty($htmls));\n\n        foreach ($htmls as $k => $html) {\n\n            $contentFieldHtml = $html;\n            $contentFieldHtml = self::fixLinksPrecentAttributes($contentFieldHtml);\n\n            $contentFieldHtmlTest1 = app()->parser->make_tags($contentFieldHtml);\n            $this->assertEquals($contentFieldHtmlTest1, $contentFieldHtml);\n\n\n            $xssClean = new XSSClean();\n            $contentFieldHtmlTest1 = $xssClean->clean($contentFieldHtml);\n            $this->assertEquals($contentFieldHtmlTest1, $contentFieldHtml);\n\n\n        }\n\n        $htmlsChunks = array_chunk($htmls, 100);\n\n\n        foreach ($htmlsChunks as $k => $htmlChunk) {\n\n            $html = implode('--------chunk-------', $htmlChunk);\n            $contentFieldHtml = $html;\n\n\n            // $contentFieldHtml = str_replace('{SITE_URL}', site_url(), $contentFieldHtml);\n            $fieldsData = [\n                'field_data_0' => [\n                    'attributes' => [\n                        'class' => 'container edit',\n                        'rel' => 'content',\n                        'rel_id' => $findPage->id,\n                        'field' => 'content',\n                    ],\n                    'html' => $contentFieldHtml\n                ]\n            ];\n\n            $contentFieldHtml = self::fixLinksPrecentAttributes($contentFieldHtml);\n\n\n            $encoded = base64_encode(json_encode($fieldsData));\n\n            $response = $this->call(\n                'POST',\n                route('api.content.save_edit'),\n                [\n                    'data_base64' => $encoded,\n                ],\n                [],//params\n                $_COOKIE,//cookie\n                [],//files\n                $_SERVER //server\n            );\n\n\n            $fieldSaved = $response->decodeResponseJson();\n\n\n            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n            $contentFieldHtml1 = trim($contentFieldHtml);\n            $contentFieldHtml2 = trim($findPage->content);\n\n            $this->assertEquals($contentFieldHtml1, $contentFieldHtml2);\n            $this->assertEquals($contentFieldHtml, $findPage->content);\n\n\n        }\n\n\n    }\n\n\n    public function testSaveContentXssSpaceInUrlAttribute()\n    {\n\n        $this->cleanupAndPrepare();\n        $unique = uniqid('testSaveContentXssInUrlAttribute');\n        $newCleanPage = save_content([\n            'subtype' => 'static',\n            'content_type' => 'page',\n            'layout_file' => 'clean.php',\n            'title' => 'testSaveContentXssInUrlAttribute-save' . $unique,\n            'preview_layout_file' => 'clean.php',\n            'url' => 'url with space ' . $unique . '  <script>alert(1)</script>',\n            'is_active' => 1,\n        ]);\n\n        $findPage = Page::whereId($newCleanPage)->first();\n\n        $this->assertEquals($findPage->url, 'url-with-space-' . strtolower($unique));\n\n    }\n\n\n\n    private function cleanupAndPrepare()\n    {\n        $user = User::where('is_admin', '=', '1')->first();\n        Auth::login($user);\n        \\Config::set('microweber.disable_model_cache', 1);\n\n\n        MultilanguageHelpers::setMultilanguageEnabled(0);\n        Page::truncate();\n    }\n\n    public static function fixLinksPrecentAttributes($text)\n    {\n        $text = str_ireplace('{SITE_URL}', '___mw-site-url-temp-replace-on-clean___', $text);\n        $pq = \\phpQuery::newDocument($text);\n\n        foreach ($pq->find('a') as $stuffs) {\n            $href = pq($stuffs)->attr('href');\n            if ($href) {\n                pq($stuffs)->attr('href', str_replace(' ', '%20', $href));\n            }\n        }\n        $text = $pq->htmlOuter();\n        $text = str_ireplace('___mw-site-url-temp-replace-on-clean___', '{SITE_URL}', $text);\n        return $text;\n\n    }\n\n\n}\n", "<?php\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Database;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse MicroweberPackages\\Category\\Models\\Category;\nuse MicroweberPackages\\Content\\Models\\Content;\nuse MicroweberPackages\\CustomField\\Models\\CustomField;\nuse MicroweberPackages\\CustomField\\Models\\CustomFieldValue;\nuse MicroweberPackages\\Database\\Utils as DbUtils;\nuse MicroweberPackages\\Database\\Traits\\QueryFilter;\nuse MicroweberPackages\\Database\\Traits\\ExtendedSave;\nuse MicroweberPackages\\Helper\\HTMLClean;\nuse MicroweberPackages\\Media\\Models\\Media;\n\nuse MicroweberPackages\\Option\\Models\\Option;\nuse MicroweberPackages\\Repository\\Repositories\\AbstractRepository;\nuse function Opis\\Closure\\serialize as serializeClosure;\nuse function Opis\\Closure\\unserialize as unserializeClosure;\n\nclass DatabaseManager extends DbUtils\n{\n    public $use_cache = true;\n    public $use_model_cache = [];\n\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    use QueryFilter; //trait with db functions\n\n    use ExtendedSave; //trait to save extended data, such as attributes, categories and images\n\n    public function __construct($app = null)\n    {\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n    }\n\n\n\n    /**\n     * Get items from the database.\n     *\n     * You can use this handy function to get whatever you need from any db table.\n     *\n     * @params\n     *\n     * *You can pass those parameters in order to filter the results*\n     *  You can also use all defined database fields as parameters\n     *\n     * .[params-table]\n     *|-----------------------------------------------------------------------------\n     *| Parameter        | Description      | Values\n     *|------------------------------------------------------------------------------\n     *| from            | the name of the db table, without prefix | ex. users, content, categories,etc\n     *| table        | same as above |\n     *| debug            | prints debug information  | true or false\n     *| orderby        | you can order by any field in your table  | ex. get(\"table=content&orderby=id desc\")\n     *| order_by        | same as above  |\n     *| one            | if set returns only the 1st result |\n     *| count            | if set returns results count |  ex. get(\"table=content&count=true\")\n     *| limit            | limit the results |  ex. get(\"table=content&limit=5\")\n     *| curent_page    | get the current page by limit offset |  ex. get(\"table=content&limit=5&curent_page=2\")\n     *\n     * @param string|array $params parameters for the DB\n     * @param string $params ['table'] the table name ex. content\n     * @param string $params ['debug'] if true print the sql\n     * @param string $params ['cache_group'] sets the cache folder to use to cache the query result\n     * @param string $params ['no_cache']  if true it will no cache the sql\n     * @param string $params ['count']  if true it will return results count\n     * @param string $params ['page_count']  if true it will return pages count\n     * @param string|array $params ['limit']  if set it will limit the results\n     *\n     * @function get\n     *\n     * @return mixed Array with data or false or integer if page_count is set\n     *\n     * @example\n     * <code>\n     * //get content\n     *  $results = $this->get(\"table=content&is_active=1\");\n     * </code>\n     * @example\n     *  <code>\n     *  //get users\n     *  $results = $this->get(\"table=users&is_admin=0\");\n     * </code>\n     */\n    public function get($table, $params = null)\n    {\n\n        if ($params === null) {\n            $params = $table;\n        } else {\n            if ($params != false) {\n                $params = parse_params($params);\n            } else {\n                $params = array();\n            }\n            $params['table'] = $table;\n        }\n\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n\n        if (!isset($params['table'])) {\n            return false;\n        } else {\n            $table = trim($params['table']);\n            unset($params['table']);\n        }\n        if (!$table) {\n            return false;\n        }\n\n\n\n        $cache_key_closures = 'cache';\n        if($params){\n            foreach ($params as $k => $v) {\n                if (is_object($v) && $v instanceof \\Closure) {\n\n                  //  $serialized = serializeClosure($v);\n                  //  $cache_key_closures .= crc32($serialized);\n\n                    $serialized = hashClosure($v);\n                    $cache_key_closures .= $serialized;\n                }\n            }\n        }\n        if (!isset($params['no_limit'])) {\n            $cache_key = $table . crc32(json_encode($params) .   $cache_key_closures);\n        } else {\n            $cache_key = $table . crc32(json_encode($params) . $cache_key_closures);\n        }\n\n        $_query_get_cache_key = $cache_key;\n        if (!$this->_query_get_cache_is_disabled) {\n            if (isset($this->_query_get_cache[$table][$_query_get_cache_key]) and $this->_query_get_cache[$table][$_query_get_cache_key]) {\n                // experimental\n                return $this->_query_get_cache[$table][$_query_get_cache_key];\n            }\n        }\n\n\n\n\n        $enable_triggers = true;\n        if (isset($params['enable_triggers'])) {\n            $enable_triggers = $params['enable_triggers'];\n        }\n\n        if (isset($params['disable_triggers']) and $params['disable_triggers']) {\n            $enable_triggers = false;\n        }\n\n        $use_connection = false;\n\n        if (isset($params['connection_name']) and !isset($_REQUEST['connection_name'])) {\n            $use_connection = $params['connection_name'];\n            unset($params['connection_name']);\n        }\n\n        if ($use_connection == false) {\n            $query = $this->table($table, $params);\n        } else {\n            $query = DB::connection($use_connection)->table($table);\n        }\n\n        $orig_params = $params;\n        $items_per_page = false;\n\n\n        $do_not_replace_site_url = false;\n        if (isset($params['do_not_replace_site_url'])) {\n            $do_not_replace_site_url = $params['do_not_replace_site_url'];\n        }\n\n        $limit = $this->default_limit;\n        if (!isset($params['limit'])) {\n            $limit = $params['limit'] = $this->default_limit;\n        } else {\n            $limit = $params['limit'];\n        }\n\n        if (isset($params['nolimit'])) {\n            $params['no_limit'] = $params['nolimit'];\n            unset($params['nolimit']);\n\n        }\n        if (isset($params['no_limit'])) {\n            unset($params['limit']);\n        }\n\n        if (isset($orig_params['page_count'])) {\n            $orig_params['count_paging'] = $orig_params['page_count'];\n        }\n        if (isset($params['limit']) and ($params['limit'] == 'nolimit' or $params['limit'] == 'no_limit')) {\n            unset($params['limit']);\n        }\n        if (isset($orig_params['count_paging']) and ($orig_params['count_paging'])) {\n            if (isset($params['limit'])) {\n                $items_per_page = $params['limit'];\n                unset($params['limit']);\n            }\n            if (isset($params['page'])) {\n                unset($params['page']);\n            }\n            if (isset($params['paging_param'])) {\n                unset($params['paging_param']);\n            }\n\n            if (isset($params['current_page'])) {\n                unset($params['current_page']);\n            }\n            $orig_params['count'] = true;\n        }\n\n        if (isset($params['orderby'])) {\n            $params['order_by'] = $params['orderby'];\n            unset($params['orderby']);\n        }\n\n        if (isset($orig_params['count']) and ($orig_params['count']) and isset($params['order_by'])) {\n            unset($params['order_by']);\n        }\n\n        if (isset($params['groupby'])) {\n            $params['group_by'] = $params['groupby'];\n            unset($params['groupby']);\n        }\n\n        if (isset($orig_params['no_cache']) and ($orig_params['no_cache'])) {\n            $use_cache = $this->use_cache = false;\n        } else {\n            $use_cache = $this->use_cache = true;\n        }\n        $cache_from_model = false;\n        if (isset($this->use_model_cache[$table]) and $this->use_model_cache[$table]) {\n            $use_cache = false;\n            $cache_from_model = true;\n        }\n\n        if (!isset($params['filter'])) {\n            $query = $this->map_filters($query, $params, $table);\n        }\n        $params = $this->map_array_to_table($table, $params);\n        $query = $this->map_values_to_query($query, $params);\n\n        $ttl = $this->table_cache_ttl;\n        if (!$query) {\n            return;\n        }\n\n//        $cache_key_closures = 'cache';\n//        foreach ($orig_params as $k => $v) {\n//            if (is_object($v) && $v instanceof \\Closure) {\n//\n//                $serialized = serializeClosure($v);\n//                $cache_key_closures .= crc32($serialized);\n//            }\n//        }\n\n        if (!isset($params['no_limit'])) {\n            $cache_key = 'db_get_'.$table . crc32(json_encode($orig_params) . $limit . $this->default_limit . $cache_key_closures);\n        } else {\n            $cache_key = 'db_get_'.$table . crc32(json_encode($params) . $cache_key_closures);\n        }\n\n        if (is_array($params) and !empty($params)) {\n            //$query = $query->where($params);\n            foreach ($params as $k => $v) {\n                $query = $query->where($table . '.' . $k, '=', $v);\n            }\n        }\n\n\n        if (isset($orig_params['count']) and ($orig_params['count'])) {\n            if ($use_cache == false and $cache_from_model == false) {\n                $query = $query->count();\n            } else {\n                $query = Cache::tags($table)->remember($cache_key, $ttl, function () use ($query) {\n                    $queryCount = $query->count();\n                    return $queryCount;\n                });\n            }\n            if ($items_per_page != false and is_numeric($query)) {\n                // return the pages count\n                $query = intval(ceil($query / $items_per_page));\n            }\n            return $query;\n        }\n\n        if (isset($orig_params['min']) and ($orig_params['min'])) {\n            $column = $orig_params['min'];\n            $query = $query->min($column);\n            return $query;\n        }\n        if (isset($orig_params['max']) and ($orig_params['max'])) {\n            $column = $orig_params['max'];\n            $query = $query->max($column);\n            return $query;\n        }\n        if (isset($orig_params['avg']) and ($orig_params['avg'])) {\n            $column = $orig_params['avg'];\n            $query = $query->avg($column);\n            return $query;\n        }\n        if (isset($orig_params['sum']) and ($orig_params['sum'])) {\n            $column = $orig_params['sum'];\n             $query = $query->sum($column);\n\n//            $query = Cache::tags($table)->remember($cache_key, $ttl, function () use ($query,$column) {\n//                $queryCount = $query->sum($column);\n//                return $queryCount;\n//            });\n\n\n            return $query;\n        }\n\n        if (isset($orig_params['fields']) and $orig_params['fields'] != false) {\n            if (is_string($orig_params['fields'])) {\n                $is_fields = explode(',', $orig_params['fields']);\n            } else {\n                $is_fields = $orig_params['fields'];\n            }\n            $is_fields_q = [];\n            if ($is_fields) {\n                foreach ($is_fields as $is_field) {\n                    if (is_string($is_field)) {\n                        $is_field = trim($is_field);\n                        if ($is_field != '') {\n                            $is_fields_q[] = $table . '.' . $is_field;\n                        }\n                    }\n                }\n            }\n            if ($is_fields_q) {\n                $query = $query->select($is_fields_q);\n            }\n\n        }\n\n        if ($use_cache == false) {\n\n            $data = $query->get();\n\n            if (isset($orig_params['fields']) and $orig_params['fields'] != false) {\n                if (method_exists($query, 'getModel')) {\n                    $builderModel = $query->getModel();\n                    $data->makeHidden(array_keys($builderModel->attributesToArray()));\n                }\n            }\n\n            if (isset($orig_params['collection']) and ($orig_params['collection'])) {\n\n            } else {\n\n                $data = $data->toArray();\n            }\n\n\n        } else {\n\n            $data = Cache::tags($table)->remember($cache_key, $ttl, function () use ($cache_key, $query, $orig_params) {\n\n                $queryResponse = $query->get();\n\n                if (isset($orig_params['fields']) and $orig_params['fields'] != false) {\n                    if (method_exists($query, 'getModel')) {\n                        $builderModel = $query->getModel();\n                        $queryResponse->makeHidden(array_keys($builderModel->attributesToArray()));\n                    }\n                }\n                if (isset($orig_params['collection']) and ($orig_params['collection'])) {\n                    return $queryResponse;\n                }\n                return $queryResponse->toArray();\n\n            });\n\n\n        }\n\n        if ($data == false or empty($data)) {\n            return false;\n        }\n\n        if (is_object($data)\n        ) {\n            if (isset($orig_params['collection']) and ($orig_params['collection'])) {\n                return $data;\n            } else {\n                $data = $this->_collection_to_array($data);\n            }\n        }\n\n\n\n        if (is_array($data)) {\n            foreach ($data as $k => $v) {\n                $data[$k] = (array)$v;\n            }\n        }\n\n\n        if (empty($data)) {\n            return false;\n        } else {\n            if (!$do_not_replace_site_url) {\n                $data = $this->app->url_manager->replace_site_url_back($data);\n            }\n        }\n\n\n        if (!is_array($data)) {\n            $this->_query_get_cache[$table][$_query_get_cache_key] = $data;\n            return $data;\n        }\n\n        if ($enable_triggers) {\n            $data = $this->app->event_manager->response('mw.database.' . $table . '.get', $data);\n        }\n\n        if (isset($orig_params['single']) || isset($orig_params['one'])) {\n            if (!isset($data[0])) {\n                return false;\n            }\n\n            if (is_object($data[0]) and isset($data[0]->id)) {\n                // might be a bug here?\n                $this->_query_get_cache[$table][$_query_get_cache_key] = (array)$data[0];\n                return (array)$data[0];\n            }\n            $this->_query_get_cache[$table][$_query_get_cache_key] = $data[0];\n            return $data[0];\n        }\n        $this->_query_get_cache[$table][$_query_get_cache_key] = $data;\n\n        return $data;\n    }\n\n    /**\n     * Generic save data function, it saves data to the database.\n     *\n     * @param $table\n     * @param $data\n     * @param bool $data_to_save_options\n     *\n     * @return string|int The id of the saved row.\n     *\n     * @example\n     * <code>\n     * $table = $this->table_prefix.'content';\n     * $data = array();\n     * $data['id'] = 0; //if 0 will create new content\n     * $data['title'] = 'new title';\n     * $data['content'] = '<p>Something</p>';\n     * $save = save($table, $data);\n     * </code>\n     */\n    public function save($table, $data = false, $data_to_save_options = false)\n    {\n        if (is_array($table) and isset($table['table'])) {\n            $data = $table;\n            $table = $table['table'];\n            unset($data['table']);\n        }\n        if (is_string($data)) {\n            $data = parse_params($data);\n        }\n\n        if (!is_array($data)) {\n            return false;\n        }\n        $this->clearCache();\n        $original_data = $data;\n\n        $is_quick = isset($original_data['quick_save']);\n\n        $skip_cache = isset($original_data['skip_cache']);\n\n        /*if (!isset($params['skip_timestamps'])) {\n            if (!isset($params['id']) or (isset($params['id']) and $params['id'] == 0)) {\n                if (!isset($params['created_at'])) {\n                    $params['created_at'] = date('Y-m-d H:i:s');\n                }\n            }\n            if (!isset($params['updated_at'])) {\n                $params['updated_at'] = date('Y-m-d H:i:s');\n            }\n        }*/\n\n\n        if (isset($data['updated_at'])) {\n            try {\n                $carbonUpdatedAt = Carbon::parse($data['updated_at']);\n                $data['updated_at'] = $carbonUpdatedAt->format('Y-m-d H:i:s');\n            } catch (\\Exception $e) {\n                $data['updated_at'] = Carbon::now()->format('Y-m-d H:i:s');\n            }\n        }\n\n\n        if ($is_quick == false) {\n            if (isset($data['updated_at']) == false) {\n                $data['updated_at'] = date('Y-m-d H:i:s');\n            }\n        }\n\n        if ($skip_cache == false and isset($data_to_save_options) and !empty($data_to_save_options)) {\n            if (isset($data_to_save_options['delete_cache_groups']) and !empty($data_to_save_options['delete_cache_groups'])) {\n                foreach ($data_to_save_options ['delete_cache_groups'] as $item) {\n                    $this->app->cache_manager->delete($item);\n                }\n            }\n        }\n\n        $user_sid = $this->app->user_manager->session_id();\n        $the_user_id = $this->app->user_manager->id();\n\n        if (!isset($data['session_id']) and $user_sid) {\n            $data['session_id'] = $user_sid;\n        }\n        if (!isset($data['id'])) {\n\n            $data['id'] = 0;\n\n        }\n        if (isset($data['cf_temp'])) {\n            $cf_temp = $data['cf_temp'];\n        }\n        $allow_html = false;\n        $allow_scripts = false;\n        if (isset($data['allow_html']) and (!isset($_REQUEST['allow_html']))) {\n            $allow_html = $data['allow_html'];\n        }\n        if (isset($data['allow_scripts']) and (!isset($_REQUEST['allow_scripts']))) {\n            $allow_scripts = $data['allow_scripts'];\n        }\n\n        /* if (isset($data['debug']) and $data['debug'] == true) {\n             $dbg = 1;\n             unset($data['debug']);\n         } else {\n             $dbg = false;\n         }\n         if ($dbg != false) {\n             var_dump($data);\n         }*/\n\n        if (!isset($data['user_ip'])) {\n            $data['user_ip'] = user_ip();\n        }\n        if (isset($data['id']) == false or $data['id'] == 0) {\n            $data['id'] = 0;\n            $l = $this->last_id($table);\n            $data['new_id'] = intval($l + 1);\n            $original_data['new_id'] = $data['new_id'];\n        }\n\n        if (!isset($the_user_id)) {\n            $the_user_id = 0;\n        }\n        if (intval($data['id']) == 0) {\n\n            if (isset($data['created_at'])) {\n                try {\n                    $carbonUpdatedAt = Carbon::parse($data['created_at']);\n                    $data['created_at'] = $carbonUpdatedAt->format('Y-m-d H:i:s');\n                } catch (\\Exception $e) {\n                    $data['created_at'] = Carbon::now()->format('Y-m-d H:i:s');\n                }\n            } else {\n                $data['created_at'] = Carbon::now()->format('Y-m-d H:i:s');\n            }\n\n\n//            if (isset($data['created_at']) == false) {\n//                $data['created_at'] = date('Y-m-d H:i:s');\n//            }\n            if ($the_user_id) {\n                $data['created_by'] = $the_user_id;\n            }\n            if ($the_user_id) {\n                $data['edited_by'] = $the_user_id;\n            }\n        } else {\n            if ($the_user_id) {\n                $data['edited_by'] = $the_user_id;\n            }\n        }\n\n        if (isset($data['position'])) {\n            $data['position'] = intval($data['position']);\n        }\n\n        $table_assoc_name = $this->assoc_table_name($table);\n\n        $criteria_orig = $data;\n        $criteria = $this->map_array_to_table($table, $data);\n        if ($allow_html == false) {\n            $criteria = $this->app->format->clean_html($criteria);\n        } else {\n            if ($allow_scripts == false) {\n               $criteria = $this->clean_input($criteria);\n\n               // $evil = ['(?<!\\w)on\\w*', 'xmlns', 'formaction', 'xlink:href', 'FSCommand', 'seekSegmentTime'];\n              //  $clearInput = new HTMLClean();\n               // $criteria = $clearInput->cleanArray($criteria);\n\n            }\n\n        }\n        $criteria = $this->app->url_manager->replace_site_url($criteria);\n\n        if (is_array($data_to_save_options) and $data_to_save_options['use_this_field_for_id'] != false) {\n            $criteria['id'] = $criteria_orig[$data_to_save_options['use_this_field_for_id']];\n        }\n\n\n        if (!isset($criteria['id'])) {\n            $criteria['id'] = 0;\n        }\n        $criteria['id'] = intval($criteria['id']);\n\n        $criteria = $criteria_overwrite = $this->app->event_manager->response('mw.database.' . $table . '.save.params', $criteria);\n        $criteria = $this->map_array_to_table($table, $criteria);\n\n        if(!$criteria){\n            return;\n        }\n\n//        $auto_fields = ['created_by','edited_by','created_at','updated_at','created_by','session_id','id'];\n\n\n        if (intval($criteria['id']) == 0) {\n            unset($criteria['id']);\n            $engine = $this->get_sql_engine();\n            if ($engine == 'pgsql') {\n                $highestId = $this->table($table)->select(DB::raw('MAX(id)'))->first();\n                $next_id = 0;\n                if (!isset($highestId->max)) {\n                    $next_id = 1;\n                } else {\n                    $next_id = $highestId->max + 1;\n                }\n                if (!empty($criteria)) {\n                    $criteria['id'] = $next_id;\n                }\n            }\n\n            if(method_exists($this->table($table),'create')){\n                $id_to_return = $this->table($table)->create($criteria);\n            } else {\n                $id_to_return = $this->table($table)->insert($criteria);\n            }\n             //$id_to_return = $this->table($table_assoc_name)->insert($criteria);\n         //   $id_to_return = $this->table($table_assoc_name)->create($criteria);\n            $id_to_return = $this->last_id($table);\n\n        } else {\n\n            $insert_or_update = $highestId = $this->table($table)->where('id', $criteria['id'])->count();\n            if ($insert_or_update != 0) {\n                $insert_or_update = 'update';\n            } else {\n              $insert_or_update = 'insert';\n              if(method_exists($this->table($table),'create')){\n                    $insert_or_update = 'create';\n              }\n          //  $insert_or_update = 'create';\n            }\n\n\n\n\n            $id_to_return = $this->table($table_assoc_name)->where('id', $criteria['id'])->$insert_or_update($criteria);\n            $id_to_return = $criteria['id'];\n        }\n\n        if ($id_to_return == false) {\n            $id_to_return = $this->last_id($table);\n        }\n        $id_to_return = intval($id_to_return);\n\n        $original_data['table'] = $table;\n        $original_data['id'] = $id_to_return;\n        $cache_group = $this->assoc_table_name($table);\n\n\n        $this->app->cache_manager->delete($cache_group);\n\n        if ($skip_cache == false) {\n            $cache_group = $this->assoc_table_name($table);\n            $this->app->cache_manager->delete($cache_group . '');\n            $this->app->cache_manager->delete('content/global/full_page_cache');\n            $this->app->cache_manager->delete($cache_group . '/' . $id_to_return);\n            if (isset($criteria['parent_id'])) {\n                $this->app->cache_manager->delete($cache_group . '/' . intval($criteria['parent_id']));\n            }\n        }\n\n        $criteria_overwrite['id'] = $id_to_return;\n        $this->app->event_manager->trigger('mw.database.' . $table . '.save.after', $criteria_overwrite);\n        $this->app->event_manager->trigger('mw.database.' . $table . '.save.after.data', $data);\n\n        return $id_to_return;\n    }\n\n    /**\n     * Get last id from a table.\n     *\n     * @desc Get last inserted id from a table, you must have 'id' column in it.\n     *\n     * @param $table\n     *\n     * @return bool|int\n     *\n     * @example\n     * <pre>\n     * $table_name = $this->table_prefix . 'content';\n     * $id = $this->last_id($table_name);\n     * </pre>\n     */\n    public function last_id($table)\n    {\n\n        // DB::getPdo()->lastInsertId();\n\n        $last_id = $this->table($table)->select(['id'])->orderBy('id', 'DESC')->take(1)->first();\n        if (isset($last_id->id)) {\n            return $last_id->id;\n        }\n    }\n\n    public function q($q, $silent = false)\n    {\n        if (!$silent) {\n            $q = DB::statement($q);\n            $q = $this->_collection_to_array($q);\n\n            return $q;\n        }\n\n        try {\n            $q = DB::statement($q);\n            $q = $this->_collection_to_array($q);\n\n            return $q;\n        } catch (\\Exception $e) {\n            return;\n        } catch (\\Illuminate\\Database\\QueryException $e) {\n            return;\n        } catch (\\QueryException $e) {\n            return;\n        }\n    }\n\n    /**\n     * Executes plain query in the database.\n     *\n     * You can use this function to make queries in the db by writing your own sql\n     * The results are returned as array or `false` if nothing is found\n     *\n     *\n     * @note Please ensure your variables are escaped before calling this function.\n     * @function $this->query\n     * @desc Executes plain query in the database.\n     *\n     * @param string $q Your SQL query\n     * @param string|bool $cache_id It will save the query result in the cache. Set to false to disable\n     * @param string|bool $cache_group Stores the result in certain cache group. Set to false to disable\n     * @param bool $only_query If set to true, will perform only a query without returning a result\n     * @param array|bool $connection_settings\n     *\n     * @return array|bool|mixed\n     *\n     * @example\n     *  <code>\n     *  //make plain query to the db\n     * $table = $this->table_prefix.'content';\n     *    $sql = \"SELECT id FROM $table WHERE id=1   ORDER BY updated_at DESC LIMIT 0,1 \";\n     *  $q = $this->query($sql, $cache_id=crc32($sql),$cache_group= 'content');\n     *\n     * </code>\n     */\n    public function query($q, $cache_id = false, $cache_group = 'global', $only_query = false, $connection_settings = false)\n    {\n        if (trim($q) == '') {\n            return false;\n        }\n\n        $error['error'] = array();\n        $results = false;\n\n        if ($cache_id != false and $cache_group != false) {\n            $cache_id = $cache_id . crc32($q);\n            $results = $this->app->cache_manager->get($cache_id, $cache_group);\n            if ($results != false) {\n                if ($results == '---empty---' or (is_array($results) and empty($results))) {\n                    return false;\n                } else {\n                    return $results;\n                }\n            }\n        }\n\n        $q = DB::select($q);\n        $q = $this->_collection_to_array($q);\n        if ($only_query != false) {\n            return true;\n        }\n        $q = (array)$q;\n        if (isset($q[0])) {\n            foreach ($q as $k => $v) {\n                $q[$k] = (array)$v;\n            }\n        }\n\n        if ($only_query == false and empty($q) or $q == false and $cache_group != false) {\n            if ($cache_id != false) {\n                $this->app->cache_manager->save('---empty---', $cache_id, $cache_group);\n            }\n\n            return false;\n        }\n        if ($only_query == false) {\n            if ($cache_id != false and $cache_group != false) {\n                if (is_array($q) and !empty($q)) {\n                    $this->app->cache_manager->save($q, $cache_id, $cache_group);\n                } else {\n                    $this->app->cache_manager->save('---empty---', $cache_id, $cache_group);\n                }\n            }\n        }\n        if ($cache_id != false) {\n            $this->app->cache_manager->save($q, $cache_id, $cache_group);\n        }\n\n        return $q;\n    }\n\n    /**\n     * Deletes item by id from db table.\n     *\n     * @param string $table Your da table name\n     * @param int|string $id The id to delete\n     * @param string $field_name You can set custom column to delete by it, default is id\n     *\n     * @return bool\n     *\n     * @example\n     * <code>\n     * //delete content with id 5\n     *  $this->delete_by_id('content', $id=5);\n     * </code>\n     */\n    public function delete_by_id($table, $id = 0, $field_name = 'id')\n    {\n        if ($id === 0) {\n            return false;\n        }\n\n        if (is_array($id)) {\n            foreach ($id as $remove) {\n                $c_id = $this->table($table)->where($field_name, '=', $remove)->delete();\n            }\n        } else {\n            $c_id = $this->table($table)->where($field_name, '=', $id)->delete();\n        }\n\n        Cache::tags($table)->flush();\n        $this->app->cache_manager->delete('content/global/full_page_cache');\n        $this->clearCache();\n\n        return $c_id;\n    }\n\n    /**\n     * Get table row by id.\n     *\n     * It returns full db row from a db table\n     *\n     * @param string $table Your table\n     * @param int|string $id The id to get\n     * @param string $field_name You can set custom column to get by it, default is id\n     *\n     * @return array|bool|mixed\n     *\n     * @example\n     * <code>\n     * //get content with id 5\n     * $cont = $this->get_by_id('content', $id=5);\n     * </code>\n     */\n    public function get_by_id($table, $id = 0, $field_name = 'id')\n    {\n        if (!$id) {\n            return;\n        }\n        if ($field_name == 'id' and $id == 0) {\n            return false;\n        }\n\n        if ($field_name == false) {\n            $field_name = 'id';\n        }\n        if ($field_name == 'id' or is_numeric($id)) {\n            $id = intval($id);\n        }\n        $params = array();\n        $params[$field_name] = $id;\n        $params['table'] = $table;\n        $params['single'] = true;\n\n        $data = $this->get($params);\n\n        return $data;\n    }\n\n\n    public $_query_get_cache = [];\n    public $_query_get_cache_is_disabled = false;\n    public function clearCache($table = false){\n\n\n        $this->_query_get_cache = []; //empty whole local cache\n        $this->_query_get_cache_is_disabled = true; //disable the cache after flush\n\n       AbstractRepository::disableCache();\n\n\n//        if($table){\n//            $this->_query_get_cache[$table] = null;\n//        } else {\n//        // $this->_query_get_cache[$table] = [];\n//        }\n    }\n\n\n    static $model_cache_mem = [];\n\n\n\n    public function table($table, $params = [])\n    {\n     // return DB::table($table);\n\n//        if (isset(self::$model_cache_mem[$table])) {\n//           // $instance = self::$model_cache_mem[$table]->newInstance($params, true);\n//         //   $instance = self::$model_cache_mem[$table]->newModelQuery($params, true);\n//          //  dump($instance);\n//         //   return self::$model_cache_mem[$table];\n//          //  return $instance;\n//        }\n\n        $this->use_model_cache[$table] = false;\n        //@todo move this to external resolver class or array\n        if ($table == 'content' || $table == 'categories' || $table == 'options') {\n\n            $this->use_model_cache[$table]= true;\n\n            if ($table == 'content') {\n                 $model = new Content($params);\n              //   $model = app()->make(Content::class);\n\n                //    $model::boot();\n            } else if ($table == 'categories') {\n                 $model = new Category($params);\n\n\n            }else if ($table == 'options') {\n                 $model = new Option($params);\n\n\n            }\n          //  self::$model_cache_mem[$table] = $model ->newInstance($params, true);;\n\n\n            if ($params and isset($params['filter']) and method_exists($model, 'modelFilter')) {\n                $filterParams = $params;\n                if (!empty($params['filter'])) {\n                    if (is_string($params['filter'])) {\n                        $params['filter'] = html_entity_decode($params['filter'], null, 'UTF-8');\n                        $params['filter'] = urldecode($params['filter']);\n                        $filterParams = parse_params($params['filter']);\n\n                    } else if (is_array($params['filter'])) {\n                        $filterParams = $params['filter'];\n                    }\n                }\n\n                if ($filterParams) {\n                    return $model->filter($filterParams);\n                } else {\n                    return $model->query();\n\n                }\n            } else {\n                return $model->query();\n            }\n        }\n\n        if ($table == 'custom_fields') {\n            $this->use_model_cache[$table] = true;\n            return CustomField::query();\n        }\n\n        if ($table == 'custom_fields_values') {\n            $this->use_model_cache[$table] = true;\n            return CustomFieldValue::query();\n        }\n\n        if ($table == 'media') {\n            $this->use_model_cache[$table]= true;\n            return Media::query();\n        }\n\n\n\n        return DB::table($table);\n    }\n\n    public function supports($table, $feature)\n    {\n        if(is_object($table)){\n            $model = $table;\n        } else {\n            $model = $this->table($table);\n        }\n        $methodVariable = array($model, $feature);\n        if (is_callable($methodVariable, true, $callable_name)) {\n            return true;\n        }\n    }\n\n    private function _collection_to_array($data)\n    {\n        return collection_to_array($data);\n    }\n}\n", "<?php\nnamespace MicroweberPackages\\Module\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Module extends Model\n{\n    public $table = 'modules';\n\n    protected $searchable = [\n        'id',\n        'name',\n        'module',\n        'type',\n        'as_element',\n        'installed',\n        'ui',\n        'ui_admin',\n        'ui_admin_iframe',\n        'is_system',\n        'categories',\n        'settings',\n        'parent_id',\n        'icon',\n        'description',\n    ];\n\n    public static function boot()\n    {\n        // there is some logic in this method, so don't forget this!\n        parent::boot();\n    }\n\n    public function notifications()\n    {\n        return $this->morphMany('Notifications', 'rel');\n    }\n\n    public function icon()\n    {\n        $icon = $this->icon;\n        $icon = str_replace( '{SITE_URL}',site_url(), $icon);\n\n        return $icon;\n    }\n\n    public function getIconInline()\n    {\n        $icon = str_replace('{SITE_URL}', '', $this->icon);\n        if (file_exists($icon)) {\n            if (get_file_extension($icon) == 'svg') {\n                $content = file_get_contents($icon);\n                $content = str_replace('<?xml version=\"1.0\" encoding=\"utf-8\"?>', '', $content);\n                return $content;\n            } else {\n                return '<img src=\"' . $icon . '\" />';\n            }\n        }\n    }\n\n    public function register($module)\n    {\n  //      return app()->module_manager->register('order/list', 'MicroweberPackages\\Order\\Http\\Controllers\\OrdersController');;\n    }\n\n}\n"], "filenames": ["src/MicroweberPackages/Content/ContentManagerHelpers.php", "src/MicroweberPackages/Content/tests/ContentApiControllerLiveEditSaveTest.php", "src/MicroweberPackages/Database/DatabaseManager.php", "src/MicroweberPackages/Module/Models/Module.php"], "buggy_code_start_loc": [661, 5, 671, 49], "buggy_code_end_loc": [661, 504, 970, 56], "fixing_code_start_loc": [662, 4, 671, 49], "fixing_code_end_loc": [663, 512, 986, 58], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 2.0.", "other": {"cve": {"id": "CVE-2023-3142", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-07T15:15:09.533", "lastModified": "2023-06-14T13:37:31.593", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 2.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 3.8, "baseSeverity": "LOW"}, "exploitabilityScore": 0.3, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0", "matchCriteriaId": "A3C150C1-4763-474B-91B5-B571C53BEC4D"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/42efa981a2239d042d910069952d6276497bdcf1", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/d00686b0-f89a-4e14-98d7-b8dd3f92a6e5", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/42efa981a2239d042d910069952d6276497bdcf1"}}