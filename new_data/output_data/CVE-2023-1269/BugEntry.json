{"buggy_code": ["<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.3.2\n * ---------------------------------------------------------------------------- */\n\nrequire_once __DIR__ . '/Google.php';\n\n/**\n * Console controller.\n *\n * Handles all the Console related operations.\n */\nclass Console extends EA_Controller {\n    /**\n     * Console constructor.\n     */\n    public function __construct()\n    {\n        if ( ! is_cli())\n        {\n            exit('No direct script access allowed');\n        }\n\n        parent::__construct();\n\n        $this->load->dbutil();\n\n        $this->load->library('instance');\n\n        $this->load->model('admins_model');\n        $this->load->model('customers_model');\n        $this->load->model('providers_model');\n        $this->load->model('services_model');\n        $this->load->model('settings_model');\n    }\n\n    /**\n     * Perform a console installation.\n     *\n     * Use this method to install Easy!Appointments directly from the terminal.\n     *\n     * Usage:\n     *\n     * php index.php console install\n     */\n    public function install()\n    {\n        $this->instance->migrate('fresh');\n\n        $this->instance->seed();\n\n        response(PHP_EOL . '\u21fe Installation completed, login with \"administrator\" / \"administrator\".' . PHP_EOL . PHP_EOL);\n    }\n\n    /**\n     * Migrate the database to the latest state.\n     *\n     * Use this method to upgrade an Easy!Appointments instance to the latest database state.\n     *\n     * Notice:\n     *\n     * Do not use this method to install the app as it will not seed the database with the initial entries (admin,\n     * provider, service, settings etc).\n     *\n     * Usage:\n     *\n     * php index.php console migrate\n     *\n     * php index.php console migrate fresh\n     *\n     * @param string $type\n     */\n    public function migrate(string $type = '')\n    {\n        $this->instance->migrate($type);\n    }\n\n    /**\n     * Seed the database with test data.\n     *\n     * Use this method to add test data to your database\n     *\n     * Usage:\n     *\n     * php index.php console seed\n     */\n    public function seed()\n    {\n        $this->instance->seed();\n    }\n\n    /**\n     * Create a database backup file.\n     *\n     * Use this method to back up your Easy!Appointments data.\n     *\n     * Usage:\n     *\n     * php index.php console backup\n     *\n     * php index.php console backup /path/to/backup/folder\n     *\n     * @throws Exception\n     */\n    public function backup()\n    {\n        $this->instance->backup($GLOBALS['argv'][3]);\n    }\n\n    /**\n     * Trigger the synchronization of all provider calendars with Google Calendar.\n     *\n     * Use this method in a cronjob to automatically sync events between Easy!Appointments and Google Calendar.\n     *\n     * Notice:\n     *\n     * Google syncing must first be enabled for each individual provider from inside the backend calendar page.\n     *\n     * Usage:\n     *\n     * php index.php console sync\n     */\n    public function sync()\n    {\n        $providers = $this->providers_model->get();\n\n        foreach ($providers as $provider)\n        {\n            if ( ! filter_var($provider['settings']['google_sync'], FILTER_VALIDATE_BOOLEAN))\n            {\n                continue;\n            }\n\n            Google::sync((string)$provider['id']);\n        }\n    }\n\n\n    /**\n     * Show help information about the console capabilities.\n     *\n     * Use this method to see the available commands.\n     *\n     * Usage:\n     *\n     * php index.php console help\n     */\n    public function help()\n    {\n        $help = [\n            '',\n            'Easy!Appointments ' . config('version'),\n            '',\n            'Usage:',\n            '',\n            '\u21fe php index.php console [command] [arguments]',\n            '',\n            'Commands:',\n            '',\n            '\u21fe php index.php console migrate',\n            '\u21fe php index.php console migrate fresh',\n            '\u21fe php index.php console migrate up',\n            '\u21fe php index.php console migrate down',\n            '\u21fe php index.php console seed',\n            '\u21fe php index.php console install',\n            '\u21fe php index.php console backup',\n            '\u21fe php index.php console sync',\n            '',\n            '',\n        ];\n\n        response(implode(PHP_EOL, $help));\n    }\n}\n", "<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.1.0\n * ---------------------------------------------------------------------------- */\n\n/**\n * Installation controller.\n *\n * Handles the installation related operations.\n *\n * @package Controllers\n */\nclass Installation extends EA_Controller {\n    /**\n     * Installation constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        \n        $this->load->model('admins_model');\n        $this->load->model('settings_model');\n        $this->load->model('services_model');\n        $this->load->model('providers_model');\n        $this->load->model('customers_model');\n        \n        $this->load->library('instance');\n    }\n\n    /**\n     * Display the installation page.\n     */\n    public function index()\n    {\n        if (is_app_installed())\n        {\n            redirect('');\n            return;\n        }\n\n        $this->load->view('pages/installation', [\n            'base_url' => config('base_url')\n        ]);\n    }\n\n    /**\n     * Installs Easy!Appointments on the server.\n     */\n    public function perform()\n    {\n        try\n        {\n            if (is_app_installed())\n            {\n                return;\n            }\n\n            $admin = request('admin');\n            $company = request('company');\n\n            $this->instance->migrate(); \n\n            // Insert admin\n            $admin['timezone'] = 'UTC';\n            $admin['settings']['username'] = $admin['username'];\n            $admin['settings']['password'] = $admin['password'];\n            $admin['settings']['notifications'] = TRUE;\n            $admin['settings']['calendar_view'] = CALENDAR_VIEW_DEFAULT;\n            unset($admin['username'], $admin['password']);\n            $admin['id'] = $this->admins_model->save($admin);\n\n            session([\n                'user_id' => $admin['id'],\n                'user_email' => $admin['email'],\n                'role_slug' => DB_SLUG_ADMIN,\n                'timezone' => $admin['timezone'],\n                'username' => $admin['settings']['username']                \n            ]);\n\n            // Save company settings\n            setting([\n                'company_name' => $company['company_name'],\n                'company_email' => $company['company_email'],\n                'company_link' => $company['company_link'],\n            ]);\n\n            // Service\n            $service_id = $this->services_model->save([\n                'name' => 'Service',\n                'duration' => '30',\n                'price' => '0',\n                'currency' => '',\n                'availabilities_type' => 'flexible',\n                'attendants_number' => '1'\n            ]);\n\n            // Provider\n            $this->providers_model->save([\n                'first_name' => 'Jane',\n                'last_name' => 'Doe',\n                'email' => 'jane@example.org',\n                'phone_number' => '+1 (000) 000-0000',\n                'services' => [\n                    $service_id\n                ],\n                'settings' => [\n                    'username' => 'janedoe',\n                    'password' => 'janedoe',\n                    'working_plan' => setting('company_working_plan'),\n                    'notifications' => TRUE,\n                    'google_sync' => FALSE,\n                    'sync_past_days' => 30,\n                    'sync_future_days' => 90,\n                    'calendar_view' => CALENDAR_VIEW_DEFAULT\n                ],\n            ]);\n\n            // Customer\n            $this->customers_model->save([\n                'first_name' => 'James',\n                'last_name' => 'Doe',\n                'email' => 'james@example.org',\n                'phone_number' => '+1 (000) 000-0000',\n            ]);\n\n            json_response([\n                'success' => true\n            ]);\n        }\n        catch (Throwable $e)\n        {\n            json_exception($e);\n        }\n    }\n}\n", "<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.4.0\n * ---------------------------------------------------------------------------- */\n\nrequire_once __DIR__ . '/../core/EA_Migration.php';\n\n/**\n * Instance library.\n *\n * Handles all Easy!Appointments instance related functionality.\n *\n * @package Libraries\n */\nclass Instance {\n    /**\n     * @var EA_Controller\n     */\n    protected $CI;\n\n    /**\n     * Installation constructor.\n     */\n    public function __construct()\n    {\n        $this->CI =& get_instance();\n\n        $this->CI->load->model('admins_model');\n        $this->CI->load->model('services_model');\n        $this->CI->load->model('providers_model');\n        $this->CI->load->model('customers_model');\n\n        $this->CI->load->library('timezones');\n        $this->CI->load->library('migration');\n    }\n\n    /**\n     * Migrate the database to the latest state.\n     *\n     * @param string $type Provide \"fresh\" to revert previous migrations and start from the beginning or \"up\"/\"down\" to step.\n     */\n    public function migrate(string $type = '')\n    {\n        $current_version = $this->CI->migration->current_version();\n\n        if ($type === 'up')\n        {\n            if ( ! $this->CI->migration->version($current_version + 1))\n            {\n                show_error($this->CI->migration->error_string());\n            }\n\n            return;\n        }\n\n        if ($type === 'down')\n        {\n            if ( ! $this->CI->migration->version($current_version - 1))\n            {\n                show_error($this->CI->migration->error_string());\n            }\n\n            return;\n        }\n\n        if ($type === 'fresh' && ! $this->CI->migration->version(0))\n        {\n            show_error($this->CI->migration->error_string());\n        }\n\n        if ($this->CI->migration->latest() === FALSE)\n        {\n            show_error($this->CI->migration->error_string());\n        }\n    }\n\n    /**\n     * Seed the database with test data.\n     */\n    public function seed()\n    {\n        // Settings\n        setting([\n            'company_name' => 'Company Name',\n            'company_email' => 'info@example.org',\n            'company_link' => 'https://example.org',\n        ]);\n\n        // Admin\n        $this->CI->admins_model->save([\n            'first_name' => 'John',\n            'last_name' => 'Doe',\n            'email' => 'john@example.org',\n            'phone_number' => '+10000000000',\n            'settings' => [\n                'username' => 'administrator',\n                'password' => 'administrator',\n                'notifications' => TRUE,\n                'calendar_view' => CALENDAR_VIEW_DEFAULT\n            ],\n        ]);\n\n        // Service\n        $service_id = $this->CI->services_model->save([\n            'name' => 'Service',\n            'duration' => '30',\n            'price' => '0',\n            'currency' => '',\n            'availabilities_type' => 'flexible',\n            'attendants_number' => '1'\n        ]);\n\n        // Provider\n        $this->CI->providers_model->save([\n            'first_name' => 'Jane',\n            'last_name' => 'Doe',\n            'email' => 'jane@example.org',\n            'phone_number' => '+10000000000',\n            'services' => [\n                $service_id\n            ],\n            'settings' => [\n                'username' => 'janedoe',\n                'password' => 'janedoe',\n                'working_plan' => setting('company_working_plan'),\n                'notifications' => TRUE,\n                'google_sync' => FALSE,\n                'sync_past_days' => 30,\n                'sync_future_days' => 90,\n                'calendar_view' => CALENDAR_VIEW_DEFAULT\n            ],\n        ]);\n\n        // Customer\n        $this->CI->customers_model->save([\n            'first_name' => 'James',\n            'last_name' => 'Doe',\n            'email' => 'james@example.org',\n            'phone_number' => '+10000000000',\n        ]);\n    }\n\n    /**\n     * Create a database backup file.\n     *\n     * @param string|null $path Override the default backup path (storage/backups/*).\n     *\n     * @throws Exception\n     */\n    public function backup(string $path = NULL)\n    {\n        $path = $path ?? APPPATH . '/../storage/backups';\n\n        if ( ! file_exists($path))\n        {\n            throw new InvalidArgumentException('The backup path does not exist: ' . $path);\n        }\n\n        if ( ! is_writable($path))\n        {\n            throw new RuntimeException('The backup path is not writable: ' . $path);\n        }\n\n        $contents = $this->CI->dbutil->backup();\n\n        $filename = 'easyappointments-backup-' . date('Y-m-d-His') . '.gz';\n\n        write_file(rtrim($path, '/') . '/' . $filename, $contents);\n    }\n}\n"], "fixing_code": ["<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.3.2\n * ---------------------------------------------------------------------------- */\n\nrequire_once __DIR__ . '/Google.php';\n\n/**\n * Console controller.\n *\n * Handles all the Console related operations.\n */\nclass Console extends EA_Controller {\n    /**\n     * Console constructor.\n     */\n    public function __construct()\n    {\n        if ( ! is_cli())\n        {\n            exit('No direct script access allowed');\n        }\n\n        parent::__construct();\n\n        $this->load->dbutil();\n\n        $this->load->library('instance');\n\n        $this->load->model('admins_model');\n        $this->load->model('customers_model');\n        $this->load->model('providers_model');\n        $this->load->model('services_model');\n        $this->load->model('settings_model');\n    }\n\n    /**\n     * Perform a console installation.\n     *\n     * Use this method to install Easy!Appointments directly from the terminal.\n     *\n     * Usage:\n     *\n     * php index.php console install\n     */\n    public function install()\n    {\n        $this->instance->migrate('fresh');\n\n        $password = $this->instance->seed();\n\n        response(PHP_EOL . '\u21fe Installation completed, login with \"administrator\" / \"' . $password . '\".' . PHP_EOL . PHP_EOL);\n    }\n\n    /**\n     * Migrate the database to the latest state.\n     *\n     * Use this method to upgrade an Easy!Appointments instance to the latest database state.\n     *\n     * Notice:\n     *\n     * Do not use this method to install the app as it will not seed the database with the initial entries (admin,\n     * provider, service, settings etc).\n     *\n     * Usage:\n     *\n     * php index.php console migrate\n     *\n     * php index.php console migrate fresh\n     *\n     * @param string $type\n     */\n    public function migrate(string $type = '')\n    {\n        $this->instance->migrate($type);\n    }\n\n    /**\n     * Seed the database with test data.\n     *\n     * Use this method to add test data to your database\n     *\n     * Usage:\n     *\n     * php index.php console seed\n     */\n    public function seed()\n    {\n        $this->instance->seed();\n    }\n\n    /**\n     * Create a database backup file.\n     *\n     * Use this method to back up your Easy!Appointments data.\n     *\n     * Usage:\n     *\n     * php index.php console backup\n     *\n     * php index.php console backup /path/to/backup/folder\n     *\n     * @throws Exception\n     */\n    public function backup()\n    {\n        $this->instance->backup($GLOBALS['argv'][3]);\n    }\n\n    /**\n     * Trigger the synchronization of all provider calendars with Google Calendar.\n     *\n     * Use this method in a cronjob to automatically sync events between Easy!Appointments and Google Calendar.\n     *\n     * Notice:\n     *\n     * Google syncing must first be enabled for each individual provider from inside the backend calendar page.\n     *\n     * Usage:\n     *\n     * php index.php console sync\n     */\n    public function sync()\n    {\n        $providers = $this->providers_model->get();\n\n        foreach ($providers as $provider)\n        {\n            if ( ! filter_var($provider['settings']['google_sync'], FILTER_VALIDATE_BOOLEAN))\n            {\n                continue;\n            }\n\n            Google::sync((string)$provider['id']);\n        }\n    }\n\n\n    /**\n     * Show help information about the console capabilities.\n     *\n     * Use this method to see the available commands.\n     *\n     * Usage:\n     *\n     * php index.php console help\n     */\n    public function help()\n    {\n        $help = [\n            '',\n            'Easy!Appointments ' . config('version'),\n            '',\n            'Usage:',\n            '',\n            '\u21fe php index.php console [command] [arguments]',\n            '',\n            'Commands:',\n            '',\n            '\u21fe php index.php console migrate',\n            '\u21fe php index.php console migrate fresh',\n            '\u21fe php index.php console migrate up',\n            '\u21fe php index.php console migrate down',\n            '\u21fe php index.php console seed',\n            '\u21fe php index.php console install',\n            '\u21fe php index.php console backup',\n            '\u21fe php index.php console sync',\n            '',\n            '',\n        ];\n\n        response(implode(PHP_EOL, $help));\n    }\n}\n", "<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.1.0\n * ---------------------------------------------------------------------------- */\n\n/**\n * Installation controller.\n *\n * Handles the installation related operations.\n *\n * @package Controllers\n */\nclass Installation extends EA_Controller {\n    /**\n     * Installation constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        \n        $this->load->model('admins_model');\n        $this->load->model('settings_model');\n        $this->load->model('services_model');\n        $this->load->model('providers_model');\n        $this->load->model('customers_model');\n        \n        $this->load->library('instance');\n    }\n\n    /**\n     * Display the installation page.\n     */\n    public function index()\n    {\n        if (is_app_installed())\n        {\n            redirect('');\n            return;\n        }\n\n        $this->load->view('pages/installation', [\n            'base_url' => config('base_url')\n        ]);\n    }\n\n    /**\n     * Installs Easy!Appointments on the server.\n     */\n    public function perform()\n    {\n        try\n        {\n            if (is_app_installed())\n            {\n                return;\n            }\n\n            $admin = request('admin');\n            $company = request('company');\n\n            $this->instance->migrate(); \n\n            // Insert admin\n            $admin['timezone'] = 'UTC';\n            $admin['settings']['username'] = $admin['username'];\n            $admin['settings']['password'] = $admin['password'];\n            $admin['settings']['notifications'] = TRUE;\n            $admin['settings']['calendar_view'] = CALENDAR_VIEW_DEFAULT;\n            unset($admin['username'], $admin['password']);\n            $admin['id'] = $this->admins_model->save($admin);\n\n            session([\n                'user_id' => $admin['id'],\n                'user_email' => $admin['email'],\n                'role_slug' => DB_SLUG_ADMIN,\n                'timezone' => $admin['timezone'],\n                'username' => $admin['settings']['username']                \n            ]);\n\n            // Save company settings\n            setting([\n                'company_name' => $company['company_name'],\n                'company_email' => $company['company_email'],\n                'company_link' => $company['company_link'],\n            ]);\n\n            // Service\n            $service_id = $this->services_model->save([\n                'name' => 'Service',\n                'duration' => '30',\n                'price' => '0',\n                'currency' => '',\n                'availabilities_type' => 'flexible',\n                'attendants_number' => '1'\n            ]);\n\n            // Provider\n            $this->providers_model->save([\n                'first_name' => 'Jane',\n                'last_name' => 'Doe',\n                'email' => 'jane@example.org',\n                'phone_number' => '+1 (000) 000-0000',\n                'services' => [\n                    $service_id\n                ],\n                'settings' => [\n                    'username' => 'janedoe',\n                    'password' => random_string(),\n                    'working_plan' => setting('company_working_plan'),\n                    'notifications' => TRUE,\n                    'google_sync' => FALSE,\n                    'sync_past_days' => 30,\n                    'sync_future_days' => 90,\n                    'calendar_view' => CALENDAR_VIEW_DEFAULT\n                ],\n            ]);\n\n            // Customer\n            $this->customers_model->save([\n                'first_name' => 'James',\n                'last_name' => 'Doe',\n                'email' => 'james@example.org',\n                'phone_number' => '+1 (000) 000-0000',\n            ]);\n\n            json_response([\n                'success' => true\n            ]);\n        }\n        catch (Throwable $e)\n        {\n            json_exception($e);\n        }\n    }\n}\n", "<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.4.0\n * ---------------------------------------------------------------------------- */\n\nrequire_once __DIR__ . '/../core/EA_Migration.php';\n\n/**\n * Instance library.\n *\n * Handles all Easy!Appointments instance related functionality.\n *\n * @package Libraries\n */\nclass Instance {\n    /**\n     * @var EA_Controller\n     */\n    protected $CI;\n\n    /**\n     * Installation constructor.\n     */\n    public function __construct()\n    {\n        $this->CI =& get_instance();\n\n        $this->CI->load->model('admins_model');\n        $this->CI->load->model('services_model');\n        $this->CI->load->model('providers_model');\n        $this->CI->load->model('customers_model');\n\n        $this->CI->load->library('timezones');\n        $this->CI->load->library('migration');\n    }\n\n    /**\n     * Migrate the database to the latest state.\n     *\n     * @param string $type Provide \"fresh\" to revert previous migrations and start from the beginning or \"up\"/\"down\" to step.\n     */\n    public function migrate(string $type = '')\n    {\n        $current_version = $this->CI->migration->current_version();\n\n        if ($type === 'up')\n        {\n            if ( ! $this->CI->migration->version($current_version + 1))\n            {\n                show_error($this->CI->migration->error_string());\n            }\n\n            return;\n        }\n\n        if ($type === 'down')\n        {\n            if ( ! $this->CI->migration->version($current_version - 1))\n            {\n                show_error($this->CI->migration->error_string());\n            }\n\n            return;\n        }\n\n        if ($type === 'fresh' && ! $this->CI->migration->version(0))\n        {\n            show_error($this->CI->migration->error_string());\n        }\n\n        if ($this->CI->migration->latest() === FALSE)\n        {\n            show_error($this->CI->migration->error_string());\n        }\n    }\n\n    /**\n     * Seed the database with test data.\n     *\n     * @return string Return's the administrator user password.\n     */\n    public function seed(): string\n    {\n        // Settings\n        \n        setting([\n            'company_name' => 'Company Name',\n            'company_email' => 'info@example.org',\n            'company_link' => 'https://example.org',\n        ]);\n\n        $password = random_string();\n\n        // Admin\n\n        $this->CI->admins_model->save([\n            'first_name' => 'John',\n            'last_name' => 'Doe',\n            'email' => 'john@example.org',\n            'phone_number' => '+10000000000',\n            'settings' => [\n                'username' => 'administrator',\n                'password' => $password,\n                'notifications' => TRUE,\n                'calendar_view' => CALENDAR_VIEW_DEFAULT\n            ],\n        ]);\n\n        // Service\n\n        $service_id = $this->CI->services_model->save([\n            'name' => 'Service',\n            'duration' => '30',\n            'price' => '0',\n            'currency' => '',\n            'availabilities_type' => 'flexible',\n            'attendants_number' => '1'\n        ]);\n\n        // Provider\n\n        $this->CI->providers_model->save([\n            'first_name' => 'Jane',\n            'last_name' => 'Doe',\n            'email' => 'jane@example.org',\n            'phone_number' => '+10000000000',\n            'services' => [\n                $service_id\n            ],\n            'settings' => [\n                'username' => 'janedoe',\n                'password' => random_string(),\n                'working_plan' => setting('company_working_plan'),\n                'notifications' => TRUE,\n                'google_sync' => FALSE,\n                'sync_past_days' => 30,\n                'sync_future_days' => 90,\n                'calendar_view' => CALENDAR_VIEW_DEFAULT\n            ],\n        ]);\n\n        // Customer\n\n        $this->CI->customers_model->save([\n            'first_name' => 'James',\n            'last_name' => 'Doe',\n            'email' => 'james@example.org',\n            'phone_number' => '+10000000000',\n        ]);\n\n        return $password;\n    }\n\n    /**\n     * Create a database backup file.\n     *\n     * @param string|null $path Override the default backup path (storage/backups/*).\n     *\n     * @throws Exception\n     */\n    public function backup(string $path = NULL)\n    {\n        $path = $path ?? APPPATH . '/../storage/backups';\n\n        if ( ! file_exists($path))\n        {\n            throw new InvalidArgumentException('The backup path does not exist: ' . $path);\n        }\n\n        if ( ! is_writable($path))\n        {\n            throw new RuntimeException('The backup path is not writable: ' . $path);\n        }\n\n        $contents = $this->CI->dbutil->backup();\n\n        $filename = 'easyappointments-backup-' . date('Y-m-d-His') . '.gz';\n\n        write_file(rtrim($path, '/') . '/' . $filename, $contents);\n    }\n}\n"], "filenames": ["application/controllers/Console.php", "application/controllers/Installation.php", "application/libraries/Instance.php"], "buggy_code_start_loc": [58, 116, 86], "buggy_code_end_loc": [61, 117, 148], "fixing_code_start_loc": [58, 116, 87], "fixing_code_end_loc": [61, 117, 160], "type": "CWE-798", "message": "Use of Hard-coded Credentials in GitHub repository alextselegidis/easyappointments prior to 1.5.0.", "other": {"cve": {"id": "CVE-2023-1269", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-08T11:15:09.883", "lastModified": "2023-03-14T18:01:53.503", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Use of Hard-coded Credentials in GitHub repository alextselegidis/easyappointments prior to 1.5.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-798"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:easyappointments:easyappointments:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.0", "matchCriteriaId": "063BC3E9-AA71-49D6-9CEE-F2E7E7B9D687"}]}]}], "references": [{"url": "https://github.com/alextselegidis/easyappointments/commit/2731d2f17c5140c562426b857e9f5d63da5c4593", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/91c31eb6-024d-4ad3-88fe-f15b03fd20f5", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/alextselegidis/easyappointments/commit/2731d2f17c5140c562426b857e9f5d63da5c4593"}}