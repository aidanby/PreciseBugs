{"buggy_code": ["<?php\n\nnamespace Wallabag\\CoreBundle\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\n/**\n * The try/catch can be removed once all formats will be implemented.\n * Still need implementation: txt.\n */\nclass ExportController extends Controller\n{\n    /**\n     * Gets one entry content.\n     *\n     * @param string $format\n     *\n     * @Route(\"/export/{id}.{format}\", name=\"export_entry\", requirements={\n     *     \"format\": \"epub|mobi|pdf|json|xml|txt|csv\",\n     *     \"id\": \"\\d+\"\n     * })\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function downloadEntryAction(Entry $entry, $format)\n    {\n        try {\n            return $this->get('wallabag_core.helper.entries_export')\n                ->setEntries($entry)\n                ->updateTitle('entry')\n                ->updateAuthor('entry')\n                ->exportAs($format);\n        } catch (\\InvalidArgumentException $e) {\n            throw new NotFoundHttpException($e->getMessage());\n        }\n    }\n\n    /**\n     * Export all entries for current user.\n     *\n     * @param string $format\n     * @param string $category\n     *\n     * @Route(\"/export/{category}.{format}\", name=\"export_entries\", requirements={\n     *     \"format\": \"epub|mobi|pdf|json|xml|txt|csv\",\n     *     \"category\": \"all|unread|starred|archive|tag_entries|untagged|search|annotated|same_domain\"\n     * })\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function downloadEntriesAction(Request $request, $format, $category)\n    {\n        $method = ucfirst($category);\n        $methodBuilder = 'getBuilderFor' . $method . 'ByUser';\n        $repository = $this->get('wallabag_core.entry_repository');\n        $title = $method;\n\n        if ('tag_entries' === $category) {\n            $tag = $this->get('wallabag_core.tag_repository')->findOneBySlug($request->query->get('tag'));\n\n            $entries = $repository->findAllByTagId(\n                $this->getUser()->getId(),\n                $tag->getId()\n            );\n\n            $title = 'Tag ' . $tag->getLabel();\n        } elseif ('search' === $category) {\n            $searchTerm = (isset($request->get('search_entry')['term']) ? $request->get('search_entry')['term'] : '');\n            $currentRoute = (null !== $request->query->get('currentRoute') ? $request->query->get('currentRoute') : '');\n\n            $entries = $repository->getBuilderForSearchByUser(\n                    $this->getUser()->getId(),\n                    $searchTerm,\n                    $currentRoute\n            )->getQuery()\n             ->getResult();\n\n            $title = 'Search ' . $searchTerm;\n        } elseif ('annotated' === $category) {\n            $entries = $repository->getBuilderForAnnotationsByUser(\n                $this->getUser()->getId()\n            )->getQuery()\n             ->getResult();\n\n            $title = 'With annotations';\n        } else {\n            $entries = $repository\n                ->$methodBuilder($this->getUser()->getId())\n                ->getQuery()\n                ->getResult();\n        }\n\n        try {\n            return $this->get('wallabag_core.helper.entries_export')\n                ->setEntries($entries)\n                ->updateTitle($title)\n                ->updateAuthor($method)\n                ->exportAs($format);\n        } catch (\\InvalidArgumentException $e) {\n            throw new NotFoundHttpException($e->getMessage());\n        }\n    }\n}\n", "<?php\n\nnamespace Tests\\Wallabag\\CoreBundle\\Controller;\n\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass ExportControllerTest extends WallabagCoreTestCase\n{\n    private $adminEntry;\n    private $bobEntry;\n\n    public function testLogin()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/unread.csv');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('login', $client->getResponse()->headers->get('location'));\n    }\n\n    public function testUnknownCategoryExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/awesomeness.epub');\n\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testUnknownFormatExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/unread.xslx');\n\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testUnsupportedFormatExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/unread.doc');\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n\n        $content = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $client->request('GET', '/export/' . $content->getId() . '.doc');\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testBadEntryId()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/0.mobi');\n\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testEpubExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/archive.epub');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/epub+zip', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Archive articles.epub\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testMobiExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $content = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/' . $content->getId() . '.mobi');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/x-mobipocket-ebook', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"' . $this->getSanitizedFilename($content->getTitle()) . '.mobi\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testPdfExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/all.pdf');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/pdf', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"All articles.pdf\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/tag_entries.pdf?tag=foo-bar');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/pdf', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Tag foo bar articles.pdf\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testTxtExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/all.txt');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('text/plain; charset=UTF-8', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"All articles.txt\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testCsvExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        // to be sure results are the same\n        $contentInDB = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->createQueryBuilder('e')\n            ->select('e, t')\n            ->leftJoin('e.user', 'u')\n            ->leftJoin('e.tags', 't')\n            ->where('u.username = :username')->setParameter('username', 'admin')\n            ->andWhere('e.isArchived = true')\n            ->getQuery()\n            ->getArrayResult();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/archive.csv');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/csv', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Archive articles.csv\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $csv = str_getcsv($client->getResponse()->getContent(), \"\\n\");\n\n        $this->assertGreaterThan(1, $csv);\n        // +1 for title line\n        $this->assertCount(\\count($contentInDB) + 1, $csv);\n        $this->assertSame('Title;URL;Content;Tags;\"MIME Type\";Language;\"Creation date\"', $csv[0]);\n        $this->assertStringContainsString($contentInDB[0]['title'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['url'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['content'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['mimetype'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['language'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['createdAt']->format('d/m/Y h:i:s'), $csv[1]);\n\n        foreach ($contentInDB[0]['tags'] as $tag) {\n            $this->assertStringContainsString($tag['label'], $csv[1]);\n        }\n    }\n\n    public function testJsonExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $contentInDB = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUrlAndUserId('http://0.0.0.0/entry1', $this->getLoggedInUserId());\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/' . $contentInDB->getId() . '.json');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"' . $this->getSanitizedFilename($contentInDB->getTitle()) . '.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('id', $content[0]);\n        $this->assertArrayHasKey('title', $content[0]);\n        $this->assertArrayHasKey('url', $content[0]);\n        $this->assertArrayHasKey('is_archived', $content[0]);\n        $this->assertArrayHasKey('is_starred', $content[0]);\n        $this->assertArrayHasKey('content', $content[0]);\n        $this->assertArrayHasKey('mimetype', $content[0]);\n        $this->assertArrayHasKey('language', $content[0]);\n        $this->assertArrayHasKey('reading_time', $content[0]);\n        $this->assertArrayHasKey('domain_name', $content[0]);\n        $this->assertArrayHasKey('tags', $content[0]);\n        $this->assertArrayHasKey('created_at', $content[0]);\n        $this->assertArrayHasKey('updated_at', $content[0]);\n\n        $this->assertSame((int) $contentInDB->isArchived(), $content[0]['is_archived']);\n        $this->assertSame((int) $contentInDB->isStarred(), $content[0]['is_starred']);\n        $this->assertSame($contentInDB->getTitle(), $content[0]['title']);\n        $this->assertSame($contentInDB->getUrl(), $content[0]['url']);\n        $this->assertSame([['text' => 'This is my annotation /o/', 'quote' => 'content']], $content[0]['annotations']);\n        $this->assertSame($contentInDB->getMimetype(), $content[0]['mimetype']);\n        $this->assertSame($contentInDB->getLanguage(), $content[0]['language']);\n        $this->assertSame($contentInDB->getReadingtime(), $content[0]['reading_time']);\n        $this->assertSame($contentInDB->getDomainname(), $content[0]['domain_name']);\n        $this->assertContains('baz', $content[0]['tags']);\n        $this->assertContains('foo', $content[0]['tags']);\n    }\n\n    public function testJsonExportFromSearch()\n    {\n        $this->setUpForJsonExportFromSearch();\n\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/search.json?search_entry[term]=entry+search&currentRoute=homepage');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Search entry search articles.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertCount(1, $content);\n\n        $this->tearDownForJsonExportFromSearch();\n    }\n\n    public function testXmlExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        // to be sure results are the same\n        $contentInDB = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->createQueryBuilder('e')\n            ->leftJoin('e.user', 'u')\n            ->where('u.username = :username')->setParameter('username', 'admin')\n            ->andWhere('e.isArchived = false')\n            ->getQuery()\n            ->getArrayResult();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/unread.xml');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/xml', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Unread articles.xml\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = new \\SimpleXMLElement($client->getResponse()->getContent());\n        $this->assertGreaterThan(0, $content->count());\n        $this->assertCount(\\count($contentInDB), $content);\n        $this->assertNotEmpty('id', (string) $content->entry[0]->id);\n        $this->assertNotEmpty('title', (string) $content->entry[0]->title);\n        $this->assertNotEmpty('url', (string) $content->entry[0]->url);\n        $this->assertNotEmpty('content', (string) $content->entry[0]->content);\n        $this->assertNotEmpty('domain_name', (string) $content->entry[0]->domain_name);\n        $this->assertNotEmpty('created_at', (string) $content->entry[0]->created_at);\n        $this->assertNotEmpty('updated_at', (string) $content->entry[0]->updated_at);\n    }\n\n    private function setUpForJsonExportFromSearch()\n    {\n        $client = $this->getClient();\n        $em = $this->getEntityManager();\n\n        $userRepository = $client->getContainer()\n            ->get('wallabag_user.user_repository.test');\n\n        $user = $userRepository->findOneByUserName('admin');\n        $this->adminEntry = new Entry($user);\n        $this->adminEntry->setUrl('http://0.0.0.0/entry-search-admin');\n        $this->adminEntry->setTitle('test title entry search admin');\n        $this->adminEntry->setContent('this is my content /o/');\n        $em->persist($this->adminEntry);\n\n        $user = $userRepository->findOneByUserName('bob');\n        $this->bobEntry = new Entry($user);\n        $this->bobEntry->setUrl('http://0.0.0.0/entry-search-bob');\n        $this->bobEntry->setTitle('test title entry search bob');\n        $this->bobEntry->setContent('this is my content /o/');\n        $em->persist($this->bobEntry);\n\n        $em->flush();\n    }\n\n    private function tearDownForJsonExportFromSearch()\n    {\n        $em = $this->getEntityManager();\n\n        $em->remove($this->adminEntry);\n        $em->remove($this->bobEntry);\n\n        $em->flush();\n    }\n\n    private function getSanitizedFilename($title)\n    {\n        $transliterator = \\Transliterator::createFromRules(':: Any-Latin; :: Latin-ASCII; :: NFD; :: [:Nonspacing Mark:] Remove; :: NFC;', \\Transliterator::FORWARD);\n\n        return preg_replace('/[^A-Za-z0-9\\- \\']/', '', $transliterator->transliterate($title));\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Wallabag\\CoreBundle\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * The try/catch can be removed once all formats will be implemented.\n * Still need implementation: txt.\n */\nclass ExportController extends Controller\n{\n    /**\n     * Gets one entry content.\n     *\n     * @param string $format\n     *\n     * @Route(\"/export/{id}.{format}\", name=\"export_entry\", requirements={\n     *     \"format\": \"epub|mobi|pdf|json|xml|txt|csv\",\n     *     \"id\": \"\\d+\"\n     * })\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function downloadEntryAction(Request $request, $format)\n    {\n         try {\n            $entry = $this->get('wallabag_core.entry_repository')\n                ->find((int) $request->query->get('id'));\n\n            /**\n             * We duplicate EntryController::checkUserAction here as a quick fix for an improper authorization vulnerability\n             *\n             * This should be eventually rewritten\n            */\n            if (null === $entry || null === $this->getUser() || $this->getUser()->getId() !== $entry->getUser()->getId()) {\n                throw new NotFoundHttpException();\n            }\n\n            return $this->get('wallabag_core.helper.entries_export')\n                ->setEntries($entry)\n                ->updateTitle('entry')\n                ->updateAuthor('entry')\n                ->exportAs($format);\n        } catch (\\InvalidArgumentException $e) {\n            throw new NotFoundHttpException($e->getMessage());\n        }\n    }\n\n    /**\n     * Export all entries for current user.\n     *\n     * @param string $format\n     * @param string $category\n     *\n     * @Route(\"/export/{category}.{format}\", name=\"export_entries\", requirements={\n     *     \"format\": \"epub|mobi|pdf|json|xml|txt|csv\",\n     *     \"category\": \"all|unread|starred|archive|tag_entries|untagged|search|annotated|same_domain\"\n     * })\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function downloadEntriesAction(Request $request, $format, $category)\n    {\n        $method = ucfirst($category);\n        $methodBuilder = 'getBuilderFor' . $method . 'ByUser';\n        $repository = $this->get('wallabag_core.entry_repository');\n        $title = $method;\n\n        if ('tag_entries' === $category) {\n            $tag = $this->get('wallabag_core.tag_repository')->findOneBySlug($request->query->get('tag'));\n\n            $entries = $repository->findAllByTagId(\n                $this->getUser()->getId(),\n                $tag->getId()\n            );\n\n            $title = 'Tag ' . $tag->getLabel();\n        } elseif ('search' === $category) {\n            $searchTerm = (isset($request->get('search_entry')['term']) ? $request->get('search_entry')['term'] : '');\n            $currentRoute = (null !== $request->query->get('currentRoute') ? $request->query->get('currentRoute') : '');\n\n            $entries = $repository->getBuilderForSearchByUser(\n                    $this->getUser()->getId(),\n                    $searchTerm,\n                    $currentRoute\n            )->getQuery()\n             ->getResult();\n\n            $title = 'Search ' . $searchTerm;\n        } elseif ('annotated' === $category) {\n            $entries = $repository->getBuilderForAnnotationsByUser(\n                $this->getUser()->getId()\n            )->getQuery()\n             ->getResult();\n\n            $title = 'With annotations';\n        } else {\n            $entries = $repository\n                ->$methodBuilder($this->getUser()->getId())\n                ->getQuery()\n                ->getResult();\n        }\n\n        try {\n            return $this->get('wallabag_core.helper.entries_export')\n                ->setEntries($entries)\n                ->updateTitle($title)\n                ->updateAuthor($method)\n                ->exportAs($format);\n        } catch (\\InvalidArgumentException $e) {\n            throw new NotFoundHttpException($e->getMessage());\n        }\n    }\n}\n", "<?php\n\nnamespace Tests\\Wallabag\\CoreBundle\\Controller;\n\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass ExportControllerTest extends WallabagCoreTestCase\n{\n    private $adminEntry;\n    private $bobEntry;\n\n    public function testLogin()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/unread.csv');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('login', $client->getResponse()->headers->get('location'));\n    }\n\n    public function testUnknownCategoryExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/awesomeness.epub');\n\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testUnknownFormatExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/unread.xslx');\n\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testUnsupportedFormatExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/unread.doc');\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n\n        $content = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $client->request('GET', '/export/' . $content->getId() . '.doc');\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testNonExistingEntryId()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request('GET', '/export/0.mobi');\n\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testForbiddenEntryId()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        // Entry with id 3 is owned by the user bob\n        // See EntryFixtures\n        $client->request('GET', '/export/3.mobi');\n\n        $this->assertSame(404, $client->getResponse()->getStatusCode());\n    }\n\n    public function testEpubExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/archive.epub');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/epub+zip', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Archive articles.epub\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testMobiExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $content = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/' . $content->getId() . '.mobi');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/x-mobipocket-ebook', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"' . $this->getSanitizedFilename($content->getTitle()) . '.mobi\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testPdfExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/all.pdf');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/pdf', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"All articles.pdf\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/tag_entries.pdf?tag=foo-bar');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/pdf', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Tag foo bar articles.pdf\"', $headers->get('content-disposition'));\n        $this->assertSame('binary', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testTxtExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/all.txt');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('text/plain; charset=UTF-8', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"All articles.txt\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n    }\n\n    public function testCsvExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        // to be sure results are the same\n        $contentInDB = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->createQueryBuilder('e')\n            ->select('e, t')\n            ->leftJoin('e.user', 'u')\n            ->leftJoin('e.tags', 't')\n            ->where('u.username = :username')->setParameter('username', 'admin')\n            ->andWhere('e.isArchived = true')\n            ->getQuery()\n            ->getArrayResult();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/archive.csv');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/csv', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Archive articles.csv\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $csv = str_getcsv($client->getResponse()->getContent(), \"\\n\");\n\n        $this->assertGreaterThan(1, $csv);\n        // +1 for title line\n        $this->assertCount(\\count($contentInDB) + 1, $csv);\n        $this->assertSame('Title;URL;Content;Tags;\"MIME Type\";Language;\"Creation date\"', $csv[0]);\n        $this->assertStringContainsString($contentInDB[0]['title'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['url'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['content'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['mimetype'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['language'], $csv[1]);\n        $this->assertStringContainsString($contentInDB[0]['createdAt']->format('d/m/Y h:i:s'), $csv[1]);\n\n        foreach ($contentInDB[0]['tags'] as $tag) {\n            $this->assertStringContainsString($tag['label'], $csv[1]);\n        }\n    }\n\n    public function testJsonExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $contentInDB = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUrlAndUserId('http://0.0.0.0/entry1', $this->getLoggedInUserId());\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/' . $contentInDB->getId() . '.json');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"' . $this->getSanitizedFilename($contentInDB->getTitle()) . '.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('id', $content[0]);\n        $this->assertArrayHasKey('title', $content[0]);\n        $this->assertArrayHasKey('url', $content[0]);\n        $this->assertArrayHasKey('is_archived', $content[0]);\n        $this->assertArrayHasKey('is_starred', $content[0]);\n        $this->assertArrayHasKey('content', $content[0]);\n        $this->assertArrayHasKey('mimetype', $content[0]);\n        $this->assertArrayHasKey('language', $content[0]);\n        $this->assertArrayHasKey('reading_time', $content[0]);\n        $this->assertArrayHasKey('domain_name', $content[0]);\n        $this->assertArrayHasKey('tags', $content[0]);\n        $this->assertArrayHasKey('created_at', $content[0]);\n        $this->assertArrayHasKey('updated_at', $content[0]);\n\n        $this->assertSame((int) $contentInDB->isArchived(), $content[0]['is_archived']);\n        $this->assertSame((int) $contentInDB->isStarred(), $content[0]['is_starred']);\n        $this->assertSame($contentInDB->getTitle(), $content[0]['title']);\n        $this->assertSame($contentInDB->getUrl(), $content[0]['url']);\n        $this->assertSame([['text' => 'This is my annotation /o/', 'quote' => 'content']], $content[0]['annotations']);\n        $this->assertSame($contentInDB->getMimetype(), $content[0]['mimetype']);\n        $this->assertSame($contentInDB->getLanguage(), $content[0]['language']);\n        $this->assertSame($contentInDB->getReadingtime(), $content[0]['reading_time']);\n        $this->assertSame($contentInDB->getDomainname(), $content[0]['domain_name']);\n        $this->assertContains('baz', $content[0]['tags']);\n        $this->assertContains('foo', $content[0]['tags']);\n    }\n\n    public function testJsonExportFromSearch()\n    {\n        $this->setUpForJsonExportFromSearch();\n\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/search.json?search_entry[term]=entry+search&currentRoute=homepage');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Search entry search articles.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertCount(1, $content);\n\n        $this->tearDownForJsonExportFromSearch();\n    }\n\n    public function testXmlExport()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        // to be sure results are the same\n        $contentInDB = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->createQueryBuilder('e')\n            ->leftJoin('e.user', 'u')\n            ->where('u.username = :username')->setParameter('username', 'admin')\n            ->andWhere('e.isArchived = false')\n            ->getQuery()\n            ->getArrayResult();\n\n        ob_start();\n        $crawler = $client->request('GET', '/export/unread.xml');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/xml', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"Unread articles.xml\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = new \\SimpleXMLElement($client->getResponse()->getContent());\n        $this->assertGreaterThan(0, $content->count());\n        $this->assertCount(\\count($contentInDB), $content);\n        $this->assertNotEmpty('id', (string) $content->entry[0]->id);\n        $this->assertNotEmpty('title', (string) $content->entry[0]->title);\n        $this->assertNotEmpty('url', (string) $content->entry[0]->url);\n        $this->assertNotEmpty('content', (string) $content->entry[0]->content);\n        $this->assertNotEmpty('domain_name', (string) $content->entry[0]->domain_name);\n        $this->assertNotEmpty('created_at', (string) $content->entry[0]->created_at);\n        $this->assertNotEmpty('updated_at', (string) $content->entry[0]->updated_at);\n    }\n\n    private function setUpForJsonExportFromSearch()\n    {\n        $client = $this->getClient();\n        $em = $this->getEntityManager();\n\n        $userRepository = $client->getContainer()\n            ->get('wallabag_user.user_repository.test');\n\n        $user = $userRepository->findOneByUserName('admin');\n        $this->adminEntry = new Entry($user);\n        $this->adminEntry->setUrl('http://0.0.0.0/entry-search-admin');\n        $this->adminEntry->setTitle('test title entry search admin');\n        $this->adminEntry->setContent('this is my content /o/');\n        $em->persist($this->adminEntry);\n\n        $user = $userRepository->findOneByUserName('bob');\n        $this->bobEntry = new Entry($user);\n        $this->bobEntry->setUrl('http://0.0.0.0/entry-search-bob');\n        $this->bobEntry->setTitle('test title entry search bob');\n        $this->bobEntry->setContent('this is my content /o/');\n        $em->persist($this->bobEntry);\n\n        $em->flush();\n    }\n\n    private function tearDownForJsonExportFromSearch()\n    {\n        $em = $this->getEntityManager();\n\n        $em->remove($this->adminEntry);\n        $em->remove($this->bobEntry);\n\n        $em->flush();\n    }\n\n    private function getSanitizedFilename($title)\n    {\n        $transliterator = \\Transliterator::createFromRules(':: Any-Latin; :: Latin-ASCII; :: NFD; :: [:Nonspacing Mark:] Remove; :: NFC;', \\Transliterator::FORWARD);\n\n        return preg_replace('/[^A-Za-z0-9\\- \\']/', '', $transliterator->transliterate($title));\n    }\n}\n"], "filenames": ["src/Wallabag/CoreBundle/Controller/ExportController.php", "tests/Wallabag/CoreBundle/Controller/ExportControllerTest.php"], "buggy_code_start_loc": [9, 60], "buggy_code_end_loc": [32, 65], "fixing_code_start_loc": [8, 60], "fixing_code_end_loc": [43, 78], "type": "CWE-285", "message": "Improper Authorization in GitHub repository wallabag/wallabag prior to 2.5.3.", "other": {"cve": {"id": "CVE-2023-0609", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-01T12:15:09.150", "lastModified": "2023-02-08T15:32:49.323", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authorization in GitHub repository wallabag/wallabag prior to 2.5.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wallabag:wallabag:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.3", "matchCriteriaId": "D7AC40AC-B5ED-41CB-B044-3D6B8D807FEC"}]}]}], "references": [{"url": "https://github.com/wallabag/wallabag/commit/0f7460dbab9e29f4f7d2944aca20210f828b6abb", "source": "security@huntr.dev", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://huntr.dev/bounties/3adef66f-fc86-4e6d-a540-2ffa59342ff0", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wallabag/wallabag/commit/0f7460dbab9e29f4f7d2944aca20210f828b6abb"}}