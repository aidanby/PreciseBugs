{"buggy_code": ["<?php\n/*-------------------------------------------------------+\n| PHPFusion Content Management System\n| Copyright (C) PHP Fusion Inc\n| https://phpfusion.com/\n+--------------------------------------------------------+\n| Filename: UserFieldsInput.php\n| Author: Hans Kristian Flaatten (Starefossen)\n+--------------------------------------------------------+\n| This program is released as free software under the\n| Affero GPL license. You can redistribute it and/or\n| modify it under the terms of this license which you\n| can read by viewing the included agpl.txt or online\n| at www.gnu.org/licenses/agpl.html. Removal of this\n| copyright header is strictly prohibited without\n| written permission from the original author(s).\n+--------------------------------------------------------*/\n\nnamespace PHPFusion;\n\nuse Defender;\n\n/**\n * Class UserFieldsInput\n *\n * @package PHPFusion\n */\nclass UserFieldsInput {\n\n    public $adminActivation = 1;\n\n    public $emailVerification = 1;\n\n    public $verifyNewEmail = FALSE;\n\n    public $userData = ['user_name' => NULL];\n\n    public $validation = 0;\n\n    public $registration = FALSE;\n\n    // On insert or admin edit\n    public $skipCurrentPass = FALSE; // FALSE to skip pass. True to validate password. New Register always FALSE.\n\n    public $isAdminPanel = FALSE;\n\n    private $_completeMessage;\n\n    private $_method;\n\n    private $_userEmail;\n\n    private $_userName;\n\n    // Passwords\n    private $data = [];\n    private $_isValidCurrentPassword = FALSE;\n    private $_newUserPassword = FALSE;\n    private $_newUserPassword2 = FALSE;\n\n    private $username_change = TRUE;\n\n    private $_themeChanged = FALSE;\n\n    /**\n     * Save User Fields\n     *\n     * @return bool\n     */\n    public function saveInsert() {\n\n        $settings = fusion_get_settings();\n\n        $locale = fusion_get_locale();\n\n        $this->_method = \"validate_insert\";\n\n        $this->data = $this->setEmptyFields();\n\n        if ($this->username_change) {\n\n            $this->setUserName();\n        }\n\n        $this->setPassword();\n\n        $this->setUserEmail();\n\n        /**\n         * For validation purposes only to show required field errors\n         *\n         * @todo - look further for optimization\n         */\n        $quantum = new QuantumFields();\n        $quantum->setCategoryDb(DB_USER_FIELD_CATS);\n        $quantum->setFieldDb(DB_USER_FIELDS);\n        $quantum->setPluginFolder(INCLUDES.\"user_fields/\");\n        $quantum->setPluginLocaleFolder(LOCALE.LOCALESET.\"user_fields/\");\n        $quantum->loadFields();\n        $quantum->loadFieldCats();\n        $quantum->setCallbackData($this->data);\n\n        $fields_input = $quantum->returnFieldsInput(DB_USERS, 'user_id');\n\n        if (!empty($fields_input)) {\n            foreach ($fields_input as $fields_array) {\n                $this->data += $fields_array;\n            }\n        }\n\n        if ($this->validation == 1) {\n            $this->setValidationError();\n        }\n\n        if (fusion_safe()) {\n\n            if ($this->emailVerification) {\n\n                $this->setEmailVerification();\n\n            } else {\n\n                /**\n                 * Create user\n                 */\n                dbquery_insert(DB_USERS, $this->data, 'save', ['keep_session' => TRUE]);\n                $this->_completeMessage = $locale['u160'].\" - \".$locale['u161'];\n\n                if (defined(\"ADMIN_PANEL\")) {\n                    $aidlink = fusion_get_aidlink();\n                    $locale = fusion_get_locale('', LOCALE.LOCALESET.\"admin/members_email.php\");\n                    require_once INCLUDES.\"sendmail_include.php\";\n                    $subject = str_replace(\"[SITENAME]\", $settings['sitename'], $locale['email_create_subject']);\n                    $replace_this = [\"[USER_NAME]\", \"[PASSWORD]\", \"[SITENAME]\", \"[SITEUSERNAME]\"];\n                    $replace_with = [\n                        $this->_userName, $this->_newUserPassword, $settings['sitename'], $settings['siteusername']\n                    ];\n                    $message = str_replace($replace_this, $replace_with, $locale['email_create_message']);\n                    sendemail($this->_userName, $this->_userEmail, $settings['siteusername'], $settings['siteemail'],\n                        $subject, $message);\n\n                    // Administrator complete message\n                    $this->_completeMessage = $locale['u172'];\n                    unset($aidlink);\n\n                } else {\n                    // got admin activation and not\n                    if ($this->adminActivation) {\n                        $this->_completeMessage = $locale['u160'].\" - \".$locale['u162'];\n                    }\n                }\n\n            }\n            $this->data['new_password'] = $this->getPasswordInput('user_password1');\n\n            if ($this->_completeMessage) {\n                addnotice(\"info\", $this->_completeMessage, fusion_get_settings(\"opening_page\"));\n            }\n\n            return TRUE;\n        }\n\n        return FALSE;\n    }\n\n    /**\n     * Initialise empty fields\n     *\n     * @return array\n     */\n    private function setEmptyFields() {\n\n        $userStatus = $this->adminActivation == 1 ? 2 : 0;\n\n        /** Prepare initial variables for settings */\n        if ($this->_method == \"validate_insert\") {\n\n            $forum_settings = [];\n            if (defined('FORUM_EXISTS')) {\n                $forum_settings = get_settings('forum');\n            }\n\n            // Compulsory Core Fields\n            return [\n                'user_id'         => 0,\n                'user_hide_email' => 1,\n                'user_avatar'     => '',\n                'user_posts'      => 0,\n                'user_threads'    => 0,\n                'user_joined'     => time(),\n                'user_lastvisit'  => 0,\n                'user_ip'         => USER_IP,\n                'user_ip_type'    => USER_IP_TYPE,\n                'user_rights'     => '',\n                'user_groups'     => '',\n                'user_level'      => USER_LEVEL_MEMBER,\n                'user_status'     => $userStatus,\n                'user_theme'      => 'Default',\n                'user_language'   => LANGUAGE,\n                'user_timezone'   => fusion_get_settings('timeoffset'),\n                'user_reputation' => (!empty($forum_settings['default_points']) ? $forum_settings['default_points'] : '')\n            ];\n\n        } else {\n            return NULL;\n        }\n    }\n\n    /**\n     * Handle Username Input and Validation\n     */\n    private function setUserName() {\n\n        $locale = fusion_get_locale();\n\n        $defender = Defender::getInstance();\n\n        if (post(\"user_name\")) {\n\n            $this->_userName = sanitizer(\"user_name\", \"\", \"user_name\");\n\n            if (!empty($this->_userName)) {\n\n                $uban = explode(',', fusion_get_settings('username_ban'));\n\n                if (!defined('ADMIN_PANEL') && $this->registration) {\n                    $this->userData[\"user_name\"] = fusion_get_userdata(\"user_name\");\n                }\n\n                if ($this->_userName != $this->userData['user_name']) {\n\n                    if (!preg_match('/^[-a-z\\p{L}\\p{N}_]*$/ui', $this->_userName)) {\n\n                        // Check for invalid characters\n                        fusion_stop();\n\n                        $defender::setInputError('user_name');\n                        $defender::setErrorText('user_name', $locale['u120']);\n\n                    } else if (in_array($this->_userName, $uban)) {\n\n                        // Check for prohibited usernames\n                        fusion_stop();\n\n                        $defender::setInputError('user_name');\n                        $defender::setErrorText('user_name', $locale['u119']);\n\n                    } else {\n\n                        // Make sure the username is not used already\n                        $name_active = dbcount(\"(user_id)\", DB_USERS, \"user_name='\".$this->_userName.\"'\");\n                        $name_inactive = dbcount(\"(user_code)\", DB_NEW_USERS, \"user_name='\".$this->_userName.\"'\");\n\n                        if ($name_active == 0 && $name_inactive == 0) {\n\n                            $this->data['user_name'] = $this->_userName;\n\n                        } else {\n\n                            fusion_stop();\n\n                            $defender::setInputError('user_name');\n\n                            $defender::setErrorText('user_name', $locale['u121']);\n                        }\n                    }\n\n                } else {\n\n                    if ($this->_method == 'validate_update') {\n                        $this->data['user_name'] = $this->_userName;\n                    }\n\n                }\n            }\n\n        } else {\n\n            $defender::setErrorText('user_name', $locale['u122']);\n            $defender::setInputError('user_name');\n        }\n    }\n\n    /**\n     * Handle User Password Input and Validation\n     */\n    private function setPassword() {\n\n        $locale = fusion_get_locale();\n\n        if ($this->_method == 'validate_insert') {\n\n            $this->_newUserPassword = self::getPasswordInput('user_password1');\n\n            $this->_newUserPassword2 = self::getPasswordInput('user_password2');\n\n            if (!empty($this->_newUserPassword)) {\n\n                $passAuth = new PasswordAuth();\n                $passAuth->inputNewPassword = $this->_newUserPassword;\n                $passAuth->inputNewPassword2 = $this->_newUserPassword2;\n\n                $passAuth->currentPassCheckLength = 8;\n                $passAuth->currentPassCheckNum = TRUE;\n                $passAuth->currentPassCheckCase = TRUE;\n                $passAuth->currentPassCheckSpecialchar = TRUE;\n\n                if ($passAuth->checkInputPassword($this->_newUserPassword)) {\n\n                    $_isValidNewPassword = $passAuth->isValidNewPassword();\n\n                    switch ($_isValidNewPassword) {\n                        case '0':\n                            // New password is valid\n                            $_newUserPasswordHash = $passAuth->getNewHash();\n                            $_newUserPasswordAlgo = $passAuth->getNewAlgo();\n                            $_newUserPasswordSalt = $passAuth->getNewSalt();\n\n                            $this->data['user_algo'] = $_newUserPasswordAlgo;\n                            $this->data['user_salt'] = $_newUserPasswordSalt;\n                            $this->data['user_password'] = $_newUserPasswordHash;\n\n                            $this->_isValidCurrentPassword = 1;\n                            if (!defined('ADMIN_PANEL') && !$this->skipCurrentPass) {\n                                Authenticate::setUserCookie($this->userData['user_id'], $passAuth->getNewSalt(), $passAuth->getNewAlgo());\n                            }\n                            break;\n                        case '1':\n                            // New Password equal old password\n                            fusion_stop();\n                            Defender::setInputError('user_password2');\n                            Defender::setInputError('user_password2');\n                            Defender::setErrorText('user_password', $locale['u134'].$locale['u146'].$locale['u133']);\n                            Defender::setErrorText('user_password2', $locale['u134'].$locale['u146'].$locale['u133']);\n                            break;\n                        case '2':\n                            // The two new passwords are not identical\n                            fusion_stop();\n                            Defender::setInputError('user_password1');\n                            Defender::setInputError('user_password2');\n                            Defender::setErrorText('user_password1', $locale['u148']);\n                            Defender::setErrorText('user_password2', $locale['u148']);\n                            break;\n                        case '3':\n                            // New password contains invalid chars / symbols\n                            fusion_stop();\n                            Defender::setInputError('user_password1');\n                            Defender::setErrorText('user_password1', $locale['u134'].$locale['u142'].\"<br />\".$locale['u147']);\n                            break;\n                    }\n                } else {\n                    fusion_stop();\n                    Defender::setInputError('user_password1');\n                    Defender::setErrorText('user_password1', $passAuth->getError());\n                }\n            } else {\n                fusion_stop($locale['u134'].$locale['u143a']);\n            }\n\n        } else if ($this->_method == 'validate_update') {\n\n            $_userPassword = self::getPasswordInput('user_password');\n\n            $this->_newUserPassword = self::getPasswordInput('user_password1');\n\n            $this->_newUserPassword2 = self::getPasswordInput('user_password2');\n\n            if ($this->isAdminPanel or $_userPassword or $this->_newUserPassword or $this->_newUserPassword2) {\n\n                /**\n                 * Validation of Password\n                 */\n                $passAuth = new PasswordAuth();\n                $passAuth->inputPassword = $_userPassword;\n                $passAuth->inputNewPassword = $this->_newUserPassword;\n                $passAuth->inputNewPassword2 = $this->_newUserPassword2;\n                $passAuth->currentPasswordHash = $this->userData['user_password'];\n                $passAuth->currentAlgo = $this->userData['user_algo'];\n                $passAuth->currentSalt = $this->userData['user_salt'];\n                $passAuth->currentPassCheckLength = 8;\n                $passAuth->currentPassCheckSpecialchar = TRUE;\n                $passAuth->currentPassCheckNum = TRUE;\n                $passAuth->currentPassCheckCase = TRUE;\n\n                if ($passAuth->checkInputPassword($this->_newUserPassword)) {\n\n                    if ($this->isAdminPanel or $passAuth->isValidCurrentPassword()) {\n\n                        // Just for validation purposes for example email change\n                        $this->_isValidCurrentPassword = 1;\n\n                        // Change new password\n                        if (!empty($this->_newUserPassword)) {\n\n                            $_isValidNewPassword = $passAuth->isValidNewPassword();\n\n                            switch ($_isValidNewPassword) {\n                                case '0':\n                                    // New password is valid\n                                    $_newUserPasswordHash = $passAuth->getNewHash();\n                                    $_newUserPasswordAlgo = $passAuth->getNewAlgo();\n                                    $_newUserPasswordSalt = $passAuth->getNewSalt();\n                                    $this->data['user_algo'] = $_newUserPasswordAlgo;\n                                    $this->data['user_salt'] = $_newUserPasswordSalt;\n                                    $this->data['user_password'] = $_newUserPasswordHash;\n\n                                    // Reset cookie for current session and logs out user\n                                    if (!defined('ADMIN_PANEL') && !$this->skipCurrentPass) {\n                                        Authenticate::setUserCookie($this->userData['user_id'], $passAuth->getNewSalt(), $passAuth->getNewAlgo());\n                                    }\n\n                                    break;\n                                case '1':\n                                    // New Password equal old password\n                                    fusion_stop();\n                                    Defender::setInputError('user_password');\n                                    Defender::setInputError('user_password1');\n                                    Defender::setErrorText('user_password', $locale['u134'].$locale['u146'].$locale['u133']);\n                                    Defender::setErrorText('user_password1', $locale['u134'].$locale['u146'].$locale['u133']);\n                                    break;\n                                case '2':\n                                    // The two new passwords are not identical\n                                    fusion_stop();\n                                    Defender::setInputError('user_password1');\n                                    Defender::setInputError('user_password2');\n                                    Defender::setErrorText('user_password1', $locale['u148']);\n                                    Defender::setErrorText('user_password2', $locale['u148']);\n                                    break;\n                                case '3':\n                                    // New password contains invalid chars / symbols\n                                    fusion_stop();\n                                    Defender::setInputError('user_password1');\n                                    Defender::setErrorText('user_password1', $locale['u134'].$locale['u142'].\"<br />\".$locale['u147']);\n                                    break;\n                            }\n                        }\n                    } else {\n                        fusion_stop();\n                        Defender::setInputError('user_password');\n                        Defender::setErrorText('user_password', $locale['u149']);\n                    }\n\n                } else {\n\n                    fusion_stop();\n                    Defender::setInputError('user_password1');\n                    Defender::setErrorText('user_password1', $passAuth->getError());\n                }\n            }\n        }\n    }\n\n    /**\n     * @param string $field\n     *\n     * @return false|mixed\n     */\n    private function getPasswordInput($field) {\n        return isset($_POST[$field]) && $_POST[$field] != \"\" ? $_POST[$field] : FALSE;\n    }\n\n    /**\n     * Handle User Email Input and Validation\n     */\n    private function setUserEmail() {\n        $locale = fusion_get_locale();\n        $settings = fusion_get_settings();\n        $is_core_page = (get(\"section\") == 1 || !check_get(\"section\"));\n        if (check_post('user_email') || $this->registration) {\n            $this->_userEmail = sanitizer('user_email', '', 'user_email');\n        }\n        if ($this->_userEmail) {\n\n            $this->userData['user_email'] = !empty($this->userData['user_email']) ? $this->userData['user_email'] : '';\n\n            if ($this->_userEmail != $this->userData['user_email']) {\n\n                // override the requirements of password to change email address of a member in admin panel\n\n                if (defined('ADMIN_PANEL') && (iADMIN && checkrights('M'))) {\n                    $this->_isValidCurrentPassword = TRUE; // changing an email in administration panel\n                } else if (!$this->registration) {\n                    $this->verifyEmailPass();\n                }\n\n                // Require user password for email change\n                if ($this->_isValidCurrentPassword || $this->registration) {\n                    // Require a valid email account\n                    if (dbcount(\"(blacklist_id)\", DB_BLACKLIST,\n                        \":email like replace(if (blacklist_email like '%@%' or blacklist_email like '%\\\\%%', blacklist_email, concat('%@', blacklist_email)), '_', '\\\\_')\",\n                        [':email' => $this->_userEmail])) {\n                        // this email blacklisted.\n                        fusion_stop();\n                        Defender::setInputError('user_email');\n                        Defender::setErrorText('user_email', $locale['u124']);\n\n                    } else {\n\n                        $email_active = dbcount(\"(user_id)\", DB_USERS, \"user_email='\".$this->_userEmail.\"'\");\n                        $email_inactive = dbcount(\"(user_code)\", DB_NEW_USERS, \"user_email='\".$this->_userEmail.\"'\");\n\n                        if ($email_active == 0 && $email_inactive == 0) {\n                            if ($this->verifyNewEmail && $settings['email_verification'] == 1 && !iSUPERADMIN) {\n                                $this->verifyNewEmail();\n                            } else {\n                                $this->data['user_email'] = $this->_userEmail;\n                            }\n\n                        } else {\n                            // email taken\n                            fusion_stop();\n                            Defender::setInputError('user_email');\n                            Defender::setErrorText('user_email', $locale['u125']);\n                        }\n                    }\n\n                } else {\n                    // must have a valid password to change email\n                    fusion_stop();\n\n                    Defender::setInputError('user_email_password');\n\n                    if ($is_core_page) {\n                        Defender::setErrorText('user_email_password', $locale['u149']);\n                    } else {\n                        Defender::setErrorText('user_email_password', $locale['u156']);\n                    }\n\n                }\n            }\n        }\n\n        if (!$this->registration) {\n            $this->data['user_hide_email'] = post('user_hide_email') ? 1 : 0;\n        }\n    }\n\n    /**\n     * Handle new email verification procedures\n     */\n    private function verifyNewEmail() {\n        $settings = fusion_get_settings();\n        $userdata = fusion_get_userdata();\n        $locale = fusion_get_locale();\n        require_once INCLUDES.\"sendmail_include.php\";\n        mt_srand((double)microtime() * 1000000);\n        $salt = \"\";\n        for ($i = 0; $i <= 10; $i++) {\n            $salt .= chr(rand(97, 122));\n        }\n        $user_code = md5($this->_userEmail.$salt);\n        $email_verify_link = $settings['siteurl'].\"edit_profile.php?code=\".$user_code;\n        $mailbody = str_replace(\"[EMAIL_VERIFY_LINK]\", $email_verify_link, $locale['u203']);\n        $mailbody = str_replace(\"[SITENAME]\", $settings['sitename'], $mailbody);\n        $mailbody = str_replace(\"[SITEUSERNAME]\", $settings['siteusername'], $mailbody);\n        $mailbody = str_replace(\"[USER_NAME]\", $userdata['user_name'], $mailbody);\n        $mailSubject = str_replace(\"[SITENAME]\", $settings['sitename'], $locale['u202']);\n        sendemail($this->_userName, $this->_userEmail, $settings['siteusername'], $settings['siteemail'], $mailSubject, $mailbody);\n        addnotice('warning', strtr($locale['u200'], ['(%s)' => $this->_userEmail]));\n        dbquery(\"DELETE FROM \".DB_EMAIL_VERIFY.\" WHERE user_id='\".$this->userData['user_id'].\"'\");\n        dbquery(\"INSERT INTO \".DB_EMAIL_VERIFY.\" (user_id, user_code, user_email, user_datestamp) VALUES('\".$this->userData['user_id'].\"', '$user_code', '\".$this->_userEmail.\"', '\".time().\"')\");\n    }\n\n    /**\n     * Set validation error\n     */\n    private function setValidationError() {\n        $locale = fusion_get_locale();\n        $settings = fusion_get_settings();\n        $_CAPTCHA_IS_VALID = FALSE;\n        include INCLUDES.\"captchas/\".$settings['captcha'].\"/captcha_check.php\";\n        if ($_CAPTCHA_IS_VALID == FALSE) {\n            fusion_stop($locale['u194']);\n            Defender::setInputError('user_captcha');\n        }\n    }\n\n    /**\n     * Handle request for email verification\n     * Sends Verification code when you change email\n     * Sends Verification code when you register\n     */\n    private function setEmailVerification() {\n        $settings = fusion_get_settings();\n        $locale = fusion_get_locale();\n        require_once INCLUDES.\"sendmail_include.php\";\n        $userCode = hash_hmac(\"sha1\", PasswordAuth::getNewPassword(), $this->_userEmail);\n        $activationUrl = $settings['siteurl'].\"register.php?email=\".$this->_userEmail.\"&code=\".$userCode;\n        $message = str_replace(\"USER_NAME\", $this->_userName, $locale['u152']);\n        $message = str_replace(\"SITENAME\", $settings['sitename'], $message);\n        $message = str_replace(\"SITEUSERNAME\", $settings['siteusername'], $message);\n        $message = str_replace(\"USER_PASSWORD\", $this->_newUserPassword, $message);\n        $message = str_replace(\"ACTIVATION_LINK\", $activationUrl, $message);\n        $subject = str_replace(\"[SITENAME]\", $settings['sitename'], $locale['u151']);\n        if (!sendemail($this->_userName, $this->_userEmail, $settings['siteusername'], $settings['siteemail'], $subject, $message)) {\n            $message = strtr($locale['u154'], [\n                '[LINK]'  => \"<a href='\".BASEDIR.\"contact.php'><strong>\",\n                '[/LINK]' => \"</strong></a>\"\n            ]);\n            addnotice('warning', $locale['u153'].\"<br />\".$message, 'all');\n        }\n        $userInfo = base64_encode(serialize($this->data));\n        if (fusion_safe()) {\n            dbquery(\"INSERT INTO \".DB_NEW_USERS.\"\n\t\t\t\t\t(user_code, user_name, user_email, user_datestamp, user_info)\n\t\t\t\t\tVALUES\n\t\t\t\t\t('\".$userCode.\"', '\".$this->data['user_name'].\"', '\".$this->data['user_email'].\"', '\".time().\"', '\".$userInfo.\"')\n\t\t\t\t\t\");\n\n        }\n        $this->_completeMessage = $locale['u150'];\n    }\n\n    /**\n     * Update User Fields\n     *\n     * @return bool\n     */\n    public function saveUpdate() {\n\n        $locale = fusion_get_locale();\n\n        $settings = fusion_get_settings();\n\n        $this->_method = \"validate_update\";\n\n        $is_core_page = (post(\"user_name\") || post(\"user_password\") || post('user_password1') || post('user_password2') || post(\"user_admin_password\") || post(\"user_email\"));\n\n        // Non-applicable to any other custom UF section\n        if ($is_core_page) {\n\n            $this->setUserName();\n\n            $this->setPassword();\n\n            if (!defined('ADMIN_PANEL')) {\n                $this->setAdminPassword();\n            }\n\n            $this->setUserEmail();\n\n            $this->setUserAvatar();\n        }\n\n        if ($this->validation == 1) {\n            $this->setValidationError();\n        }\n\n        $quantum = new QuantumFields();\n        $quantum->setCategoryDb(DB_USER_FIELD_CATS);\n        $quantum->setFieldDb(DB_USER_FIELDS);\n        $quantum->setPluginFolder(INCLUDES.\"user_fields/\");\n        $quantum->setPluginLocaleFolder(LOCALE.LOCALESET.\"user_fields/\");\n        $quantum->loadFields();\n        $quantum->loadFieldCats();\n        $quantum->setCallbackData($this->userData);\n        $_input = $quantum->returnFieldsInput(DB_USERS, 'user_id');\n\n        if (!empty($_input)) {\n            foreach ($_input as $input) {\n                $this->data += $input;\n            }\n        }\n\n        $this->data = $this->getData();\n\n        // hidden input tamper check - user_hash must not be changed.\n        // id request spoofing request\n        $a_check = ($this->userData[\"user_password\"] != sanitizer(\"user_hash\", \"\", \"user_hash\"));\n        $b_check = ($this->userData['user_id'] != fusion_get_userdata('user_id'));\n        // for admin with sufficient rights, skip all these formats\n        if (iADMIN && checkrights(\"M\")) {\n            $a_check = FALSE;\n            $b_check = FALSE;\n        }\n        if ($a_check or $b_check) {\n            fusion_stop();\n        }\n\n        // check for password match\n        if (fusion_safe()) {\n\n            if ($is_core_page) {\n                // Logs Username change\n                if ($this->_userName !== $this->userData['user_name']) {\n                    save_user_log($this->userData['user_id'], \"user_name\", $this->_userName, $this->userData['user_name']);\n                }\n                // Logs Email change\n                if ($this->_userEmail !== $this->userData['user_email']) {\n                    save_user_log($this->userData['user_id'], \"user_email\", $this->_userEmail, $this->userData['user_email']);\n                }\n            }\n\n            // Logs Field changes\n            $quantum->logUserAction(DB_USERS, \"user_id\");\n\n            // Update Table\n            dbquery_insert(DB_USERS, $this->data, 'update', ['keep_session' => TRUE]);\n\n            $this->_completeMessage = $locale['u163'];\n\n            if ($this->isAdminPanel && $this->_isValidCurrentPassword && $this->_newUserPassword && $this->_newUserPassword2) {\n                // inform user that password has changed. and tell him your new password\n                include INCLUDES.\"sendmail_include.php\";\n                addnotice(\"success\", str_replace(\"USER_NAME\", $this->userData['user_name'], $locale['global_458']));\n\n                $input = [\n                    \"mailname\" => $this->userData['user_name'],\n                    \"email\"    => $this->userData['user_email'],\n                    \"subject\"  => str_replace(\"[SITENAME]\", $settings['sitename'], $locale['global_456']),\n                    \"message\"  => str_replace(\n                        [\n                            \"[SITENAME]\",\n                            \"[SITEUSERNAME]\",\n                            \"USER_NAME\",\n                            \"[PASSWORD]\"\n                        ],\n                        [\n                            $settings['sitename'],\n                            $settings['siteusername'],\n                            $this->userData['user_name'],\n                            $this->_newUserPassword,\n                        ],\n                        $locale['global_457']\n                    )\n                ];\n\n                if (!sendemail($input['mailname'], $input['email'], $settings['siteusername'], $settings['siteemail'], $input['subject'],\n                    $input['message'])\n                ) {\n                    addnotice('warning', str_replace(\"USER_NAME\", $this->userData['user_name'], $locale['global_459']));\n                }\n\n                redirect(FUSION_REQUEST);\n\n                return FALSE;\n            }\n\n            addnotice('success', $locale['u169']);\n\n            return TRUE;\n        }\n\n        return FALSE;\n    }\n\n    /**\n     * Set admin password\n     */\n    private function setAdminPassword() {\n        $locale = fusion_get_locale();\n        if ($this->getPasswordInput(\"user_admin_password\")) { // if submit current admin password\n\n            $_userAdminPassword = $this->getPasswordInput(\"user_admin_password\");      // var1\n            $_newUserAdminPassword = $this->getPasswordInput(\"user_admin_password1\");  // var2\n            $_newUserAdminPassword2 = $this->getPasswordInput(\"user_admin_password2\"); // var3\n            $adminpassAuth = new PasswordAuth();\n\n            if (!$this->userData['user_admin_password'] && !$this->userData['user_admin_salt']) {\n                // New Admin\n                $adminpassAuth->inputPassword = 'fake';\n                $adminpassAuth->inputNewPassword = $_userAdminPassword;\n                $adminpassAuth->inputNewPassword2 = $_newUserAdminPassword2;\n                $valid_current_password = TRUE;\n\n            } else {\n\n                // Old Admin changing password\n                $adminpassAuth->inputPassword = $_userAdminPassword;         // var1\n                $adminpassAuth->inputNewPassword = $_newUserAdminPassword;   // var2\n                $adminpassAuth->inputNewPassword2 = $_newUserAdminPassword2; // var3\n                $adminpassAuth->currentPasswordHash = $this->userData['user_admin_password'];\n                $adminpassAuth->currentAlgo = $this->userData['user_admin_algo'];\n                $adminpassAuth->currentSalt = $this->userData['user_admin_salt'];\n                $valid_current_password = $adminpassAuth->isValidCurrentPassword();\n            }\n\n            if ($valid_current_password) {\n\n                //$_isValidCurrentAdminPassword = 1;\n\n                // authenticated. now do the integrity check\n                $_isValidNewPassword = $adminpassAuth->isValidNewPassword();\n                switch ($_isValidNewPassword) {\n                    case '0':\n                        // New password is valid\n                        $new_admin_password = $adminpassAuth->getNewHash();\n                        $new_admin_salt = $adminpassAuth->getNewSalt();\n                        $new_admin_algo = $adminpassAuth->getNewAlgo();\n                        $this->data['user_admin_algo'] = $new_admin_algo;\n                        $this->data['user_admin_salt'] = $new_admin_salt;\n                        $this->data['user_admin_password'] = $new_admin_password;\n                        break;\n                    case '1':\n                        // new password is old password\n                        fusion_stop();\n                        Defender::setInputError('user_admin_password');\n                        Defender::setInputError('user_admin_password1');\n                        Defender::setErrorText('user_admin_password', $locale['u144'].$locale['u146'].$locale['u133']);\n                        Defender::setErrorText('user_admin_password1', $locale['u144'].$locale['u146'].$locale['u133']);\n                        break;\n                    case '2':\n                        // The two new passwords are not identical\n                        fusion_stop();\n                        Defender::setInputError('user_admin_password1');\n                        Defender::setInputError('user_admin_password2');\n                        Defender::setErrorText('user_admin_password1', $locale['u144'].$locale['u148a']);\n                        Defender::setErrorText('user_admin_password2', $locale['u144'].$locale['u148a']);\n                        break;\n                    case '3':\n                        // New password contains invalid chars / symbols\n                        fusion_stop();\n                        Defender::setInputError('user_admin_password1');\n                        Defender::setErrorText('user_admin_password1', $locale['u144'].$locale['u142'].\"<br />\".$locale['u147']);\n                        break;\n                }\n            } else {\n                fusion_stop();\n                Defender::setInputError('user_admin_password');\n                Defender::setErrorText('user_admin_password', $locale['u149a']);\n            }\n        } else { // check db only - admin cannot save profile page without password\n\n            if (iADMIN) {\n                $require_valid_password = $this->userData['user_admin_password'];\n                if (!$require_valid_password) {\n                    // 149 for admin\n                    fusion_stop();\n                    Defender::setInputError('user_admin_password');\n                    Defender::setErrorText('user_admin_password', $locale['u149a']);\n                }\n            }\n        }\n    }\n\n    /**\n     * Set user avatar\n     */\n    private function setUserAvatar() {\n        if (isset($_POST['delAvatar'])) {\n            if ($this->userData['user_avatar'] != \"\" && file_exists(IMAGES.\"avatars/\".$this->userData['user_avatar']) && is_file(IMAGES.\"avatars/\".$this->userData['user_avatar'])) {\n                unlink(IMAGES.\"avatars/\".$this->userData['user_avatar']);\n            }\n            $this->data['user_avatar'] = '';\n        }\n        if (isset($_FILES['user_avatar']) && $_FILES['user_avatar']['name']) { // uploaded avatar\n            if (!empty($_FILES['user_avatar']) && is_uploaded_file($_FILES['user_avatar']['tmp_name'])) {\n                $upload = form_sanitizer($_FILES['user_avatar'], '', 'user_avatar');\n                if (isset($upload['error']) && !$upload['error']) {\n                    // ^ maybe use empty($upload['error']) also can but maybe low end php version has problem on empty.\n                    $this->data['user_avatar'] = $upload['image_name'];\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns userhash added userdata array\n     *\n     * @return array\n     */\n    public function getData() {\n        if (!empty($this->userData['user_password'])) {\n            // when edit profile\n            $this->data['user_hash'] = $this->userData['user_password'];\n        } else if (isset($_POST['user_hash'])) {\n            // when new registration\n            $this->data['user_hash'] = sanitizer('user_hash', '', 'user_hash');\n        }\n\n        return $this->data;\n    }\n\n    /**\n     * @param string $value\n     */\n    public function setUserNameChange($value) {\n        $this->username_change = $value;\n    }\n\n    /**\n     * @param string $value\n     */\n    public function verifyCode($value) {\n        $locale = fusion_get_locale();\n        $userdata = fusion_get_userdata();\n        if (!preg_check(\"/^[0-9a-z]{32}$/i\", $value)) {\n            redirect(BASEDIR.'index.php');\n        }\n        $result = dbquery(\"SELECT * FROM \".DB_EMAIL_VERIFY.\" WHERE user_code=:usercode\", [':usercode' => $value]);\n        if (dbrows($result)) {\n            $data = dbarray($result);\n            if ($data['user_id'] == $userdata['user_id']) {\n                if ($data['user_email'] != $userdata['user_email']) {\n                    $result = dbquery(\"SELECT user_email FROM \".DB_USERS.\" WHERE user_email=:useremail\", [':useremail' => $data['user_email']]);\n                    if (dbrows($result) > 0) {\n                        addnotice(\"danger\", $locale['u164'].\"<br />\\n\".$locale['u121']);\n                    } else {\n                        $this->_completeMessage = $locale['u169'];\n                    }\n                    dbquery(\"UPDATE \".DB_USERS.\" SET user_email='\".$data['user_email'].\"' WHERE user_id='\".$data['user_id'].\"'\");\n                    dbquery(\"DELETE FROM \".DB_EMAIL_VERIFY.\" WHERE user_id='\".$data['user_id'].\"'\");\n                }\n            } else {\n                redirect(BASEDIR.'index.php');\n            }\n        } else {\n            redirect(BASEDIR.'index.php');\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public function themeChanged() {\n        return $this->_themeChanged;\n    }\n\n    /**\n     * To validate only when _setUserEmail is true\n     * Changing Email address\n     */\n    private function verifyEmailPass() {\n        // Validation of password change\n        if ($_userPassword = self::getPasswordInput('user_password')) {\n            /**\n             * Validation of Password\n             */\n            $passAuth = new PasswordAuth();\n            $passAuth->inputPassword = $_userPassword;\n            $passAuth->currentAlgo = $this->userData['user_algo'];\n            $passAuth->currentSalt = $this->userData['user_salt'];\n            $passAuth->currentPasswordHash = $this->userData['user_password'];\n\n            $passAuth->currentPassCheckLength = 1;          // add settings\n            $passAuth->currentPassCheckCase = FALSE;        // add settings\n            $passAuth->currentPassCheckNum = FALSE;         // add settings\n            $passAuth->currentPassCheckSpecialchar = FALSE; // add settings\n\n            if ($passAuth->isValidCurrentPassword()) {\n                $this->_isValidCurrentPassword = 1;\n            } else {\n                fusion_stop($passAuth->getError());\n                Defender::setInputError('user_password');\n                Defender::setErrorText('user_password', $passAuth->getError());\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/*-------------------------------------------------------+\n| PHPFusion Content Management System\n| Copyright (C) PHP Fusion Inc\n| https://phpfusion.com/\n+--------------------------------------------------------+\n| Filename: UserFieldsInput.php\n| Author: Hans Kristian Flaatten (Starefossen)\n+--------------------------------------------------------+\n| This program is released as free software under the\n| Affero GPL license. You can redistribute it and/or\n| modify it under the terms of this license which you\n| can read by viewing the included agpl.txt or online\n| at www.gnu.org/licenses/agpl.html. Removal of this\n| copyright header is strictly prohibited without\n| written permission from the original author(s).\n+--------------------------------------------------------*/\n\nnamespace PHPFusion;\n\nuse Defender;\n\n/**\n * Class UserFieldsInput\n *\n * @package PHPFusion\n */\nclass UserFieldsInput {\n\n    public $adminActivation = 1;\n\n    public $emailVerification = 1;\n\n    public $verifyNewEmail = FALSE;\n\n    public $userData = ['user_name' => NULL];\n\n    public $validation = 0;\n\n    public $registration = FALSE;\n\n    // On insert or admin edit\n    public $skipCurrentPass = FALSE; // FALSE to skip pass. True to validate password. New Register always FALSE.\n\n    public $isAdminPanel = FALSE;\n\n    private $_completeMessage;\n\n    private $_method;\n\n    private $_userEmail;\n\n    private $_userName;\n\n    // Passwords\n    private $data = [];\n    private $_isValidCurrentPassword = FALSE;\n    private $_newUserPassword = FALSE;\n    private $_newUserPassword2 = FALSE;\n\n    private $username_change = TRUE;\n\n    private $_themeChanged = FALSE;\n\n    /**\n     * Save User Fields\n     *\n     * @return bool\n     */\n    public function saveInsert() {\n\n        $settings = fusion_get_settings();\n\n        $locale = fusion_get_locale();\n\n        $this->_method = \"validate_insert\";\n\n        $this->data = $this->setEmptyFields();\n\n        if ($this->username_change) {\n\n            $this->setUserName();\n        }\n\n        $this->setPassword();\n\n        $this->setUserEmail();\n\n        /**\n         * For validation purposes only to show required field errors\n         *\n         * @todo - look further for optimization\n         */\n        $quantum = new QuantumFields();\n        $quantum->setCategoryDb(DB_USER_FIELD_CATS);\n        $quantum->setFieldDb(DB_USER_FIELDS);\n        $quantum->setPluginFolder(INCLUDES.\"user_fields/\");\n        $quantum->setPluginLocaleFolder(LOCALE.LOCALESET.\"user_fields/\");\n        $quantum->loadFields();\n        $quantum->loadFieldCats();\n        $quantum->setCallbackData($this->data);\n\n        $fields_input = $quantum->returnFieldsInput(DB_USERS, 'user_id');\n\n        if (!empty($fields_input)) {\n            foreach ($fields_input as $fields_array) {\n                $this->data += $fields_array;\n            }\n        }\n\n        if ($this->validation == 1) {\n            $this->setValidationError();\n        }\n\n        if (fusion_safe()) {\n\n            if ($this->emailVerification) {\n\n                $this->setEmailVerification();\n\n            } else {\n\n                /**\n                 * Create user\n                 */\n                dbquery_insert(DB_USERS, $this->data, 'save', ['keep_session' => TRUE]);\n                $this->_completeMessage = $locale['u160'].\" - \".$locale['u161'];\n\n                if (defined(\"ADMIN_PANEL\")) {\n                    $aidlink = fusion_get_aidlink();\n                    $locale = fusion_get_locale('', LOCALE.LOCALESET.\"admin/members_email.php\");\n                    require_once INCLUDES.\"sendmail_include.php\";\n                    $subject = str_replace(\"[SITENAME]\", $settings['sitename'], $locale['email_create_subject']);\n                    $replace_this = [\"[USER_NAME]\", \"[PASSWORD]\", \"[SITENAME]\", \"[SITEUSERNAME]\"];\n                    $replace_with = [\n                        $this->_userName, $this->_newUserPassword, $settings['sitename'], $settings['siteusername']\n                    ];\n                    $message = str_replace($replace_this, $replace_with, $locale['email_create_message']);\n                    sendemail($this->_userName, $this->_userEmail, $settings['siteusername'], $settings['siteemail'],\n                        $subject, $message);\n\n                    // Administrator complete message\n                    $this->_completeMessage = $locale['u172'];\n                    unset($aidlink);\n\n                } else {\n                    // got admin activation and not\n                    if ($this->adminActivation) {\n                        $this->_completeMessage = $locale['u160'].\" - \".$locale['u162'];\n                    }\n                }\n\n            }\n            $this->data['new_password'] = $this->getPasswordInput('user_password1');\n\n            if ($this->_completeMessage) {\n                addnotice(\"info\", $this->_completeMessage, fusion_get_settings(\"opening_page\"));\n            }\n\n            return TRUE;\n        }\n\n        return FALSE;\n    }\n\n    /**\n     * Initialise empty fields\n     *\n     * @return array\n     */\n    private function setEmptyFields() {\n\n        $userStatus = $this->adminActivation == 1 ? 2 : 0;\n\n        /** Prepare initial variables for settings */\n        if ($this->_method == \"validate_insert\") {\n\n            $forum_settings = [];\n            if (defined('FORUM_EXISTS')) {\n                $forum_settings = get_settings('forum');\n            }\n\n            // Compulsory Core Fields\n            return [\n                'user_id'         => 0,\n                'user_hide_email' => 1,\n                'user_avatar'     => '',\n                'user_posts'      => 0,\n                'user_threads'    => 0,\n                'user_joined'     => time(),\n                'user_lastvisit'  => 0,\n                'user_ip'         => USER_IP,\n                'user_ip_type'    => USER_IP_TYPE,\n                'user_rights'     => '',\n                'user_groups'     => '',\n                'user_level'      => USER_LEVEL_MEMBER,\n                'user_status'     => $userStatus,\n                'user_theme'      => 'Default',\n                'user_language'   => LANGUAGE,\n                'user_timezone'   => fusion_get_settings('timeoffset'),\n                'user_reputation' => (!empty($forum_settings['default_points']) ? $forum_settings['default_points'] : '')\n            ];\n\n        } else {\n            return NULL;\n        }\n    }\n\n    /**\n     * Handle Username Input and Validation\n     */\n    private function setUserName() {\n\n        $locale = fusion_get_locale();\n\n        $defender = Defender::getInstance();\n\n        if (post(\"user_name\")) {\n\n            $this->_userName = sanitizer(\"user_name\", \"\", \"user_name\");\n\n            if (!empty($this->_userName)) {\n\n                $uban = explode(',', fusion_get_settings('username_ban'));\n\n                if (!defined('ADMIN_PANEL') && $this->registration) {\n                    $this->userData[\"user_name\"] = fusion_get_userdata(\"user_name\");\n                }\n\n                if ($this->_userName != $this->userData['user_name']) {\n\n                    if (!preg_match('/^[-a-z\\p{L}\\p{N}_]*$/ui', $this->_userName)) {\n\n                        // Check for invalid characters\n                        fusion_stop();\n\n                        $defender::setInputError('user_name');\n                        $defender::setErrorText('user_name', $locale['u120']);\n\n                    } else if (in_array($this->_userName, $uban)) {\n\n                        // Check for prohibited usernames\n                        fusion_stop();\n\n                        $defender::setInputError('user_name');\n                        $defender::setErrorText('user_name', $locale['u119']);\n\n                    } else {\n\n                        // Make sure the username is not used already\n                        $name_active = dbcount(\"(user_id)\", DB_USERS, \"user_name='\".$this->_userName.\"'\");\n                        $name_inactive = dbcount(\"(user_code)\", DB_NEW_USERS, \"user_name='\".$this->_userName.\"'\");\n\n                        if ($name_active == 0 && $name_inactive == 0) {\n\n                            $this->data['user_name'] = $this->_userName;\n\n                        } else {\n\n                            fusion_stop();\n\n                            $defender::setInputError('user_name');\n\n                            $defender::setErrorText('user_name', $locale['u121']);\n                        }\n                    }\n\n                } else {\n\n                    if ($this->_method == 'validate_update') {\n                        $this->data['user_name'] = $this->_userName;\n                    }\n\n                }\n            }\n\n        } else {\n\n            $defender::setErrorText('user_name', $locale['u122']);\n            $defender::setInputError('user_name');\n        }\n    }\n\n    /**\n     * Handle User Password Input and Validation\n     */\n    private function setPassword() {\n\n        $locale = fusion_get_locale();\n\n        if ($this->_method == 'validate_insert') {\n\n            $this->_newUserPassword = self::getPasswordInput('user_password1');\n\n            $this->_newUserPassword2 = self::getPasswordInput('user_password2');\n\n            if (!empty($this->_newUserPassword)) {\n\n                $passAuth = new PasswordAuth();\n                $passAuth->inputNewPassword = $this->_newUserPassword;\n                $passAuth->inputNewPassword2 = $this->_newUserPassword2;\n\n                $passAuth->currentPassCheckLength = 8;\n                $passAuth->currentPassCheckNum = TRUE;\n                $passAuth->currentPassCheckCase = TRUE;\n                $passAuth->currentPassCheckSpecialchar = TRUE;\n\n                if ($passAuth->checkInputPassword($this->_newUserPassword)) {\n\n                    $_isValidNewPassword = $passAuth->isValidNewPassword();\n\n                    switch ($_isValidNewPassword) {\n                        case '0':\n                            // New password is valid\n                            $_newUserPasswordHash = $passAuth->getNewHash();\n                            $_newUserPasswordAlgo = $passAuth->getNewAlgo();\n                            $_newUserPasswordSalt = $passAuth->getNewSalt();\n\n                            $this->data['user_algo'] = $_newUserPasswordAlgo;\n                            $this->data['user_salt'] = $_newUserPasswordSalt;\n                            $this->data['user_password'] = $_newUserPasswordHash;\n\n                            $this->_isValidCurrentPassword = 1;\n                            if (!defined('ADMIN_PANEL') && !$this->skipCurrentPass) {\n                                Authenticate::setUserCookie($this->userData['user_id'], $passAuth->getNewSalt(), $passAuth->getNewAlgo());\n                            }\n                            break;\n                        case '1':\n                            // New Password equal old password\n                            fusion_stop();\n                            Defender::setInputError('user_password2');\n                            Defender::setInputError('user_password2');\n                            Defender::setErrorText('user_password', $locale['u134'].$locale['u146'].$locale['u133']);\n                            Defender::setErrorText('user_password2', $locale['u134'].$locale['u146'].$locale['u133']);\n                            break;\n                        case '2':\n                            // The two new passwords are not identical\n                            fusion_stop();\n                            Defender::setInputError('user_password1');\n                            Defender::setInputError('user_password2');\n                            Defender::setErrorText('user_password1', $locale['u148']);\n                            Defender::setErrorText('user_password2', $locale['u148']);\n                            break;\n                        case '3':\n                            // New password contains invalid chars / symbols\n                            fusion_stop();\n                            Defender::setInputError('user_password1');\n                            Defender::setErrorText('user_password1', $locale['u134'].$locale['u142'].\"<br />\".$locale['u147']);\n                            break;\n                    }\n                } else {\n                    fusion_stop();\n                    Defender::setInputError('user_password1');\n                    Defender::setErrorText('user_password1', $passAuth->getError());\n                }\n            } else {\n                fusion_stop($locale['u134'].$locale['u143a']);\n            }\n\n        } else if ($this->_method == 'validate_update') {\n\n            $_userPassword = self::getPasswordInput('user_password');\n\n            $this->_newUserPassword = self::getPasswordInput('user_password1');\n\n            $this->_newUserPassword2 = self::getPasswordInput('user_password2');\n\n            if ($this->isAdminPanel or $_userPassword or $this->_newUserPassword or $this->_newUserPassword2) {\n\n                /**\n                 * Validation of Password\n                 */\n                $passAuth = new PasswordAuth();\n                $passAuth->inputPassword = $_userPassword;\n                $passAuth->inputNewPassword = $this->_newUserPassword;\n                $passAuth->inputNewPassword2 = $this->_newUserPassword2;\n                $passAuth->currentPasswordHash = $this->userData['user_password'];\n                $passAuth->currentAlgo = $this->userData['user_algo'];\n                $passAuth->currentSalt = $this->userData['user_salt'];\n                $passAuth->currentPassCheckLength = 8;\n                $passAuth->currentPassCheckSpecialchar = TRUE;\n                $passAuth->currentPassCheckNum = TRUE;\n                $passAuth->currentPassCheckCase = TRUE;\n\n                if ($passAuth->checkInputPassword($this->_newUserPassword)) {\n\n                    if ($this->isAdminPanel or $passAuth->isValidCurrentPassword()) {\n\n                        // Just for validation purposes for example email change\n                        $this->_isValidCurrentPassword = 1;\n\n                        // Change new password\n                        if (!empty($this->_newUserPassword)) {\n\n                            $_isValidNewPassword = $passAuth->isValidNewPassword();\n\n                            switch ($_isValidNewPassword) {\n                                case '0':\n                                    // New password is valid\n                                    $_newUserPasswordHash = $passAuth->getNewHash();\n                                    $_newUserPasswordAlgo = $passAuth->getNewAlgo();\n                                    $_newUserPasswordSalt = $passAuth->getNewSalt();\n                                    $this->data['user_algo'] = $_newUserPasswordAlgo;\n                                    $this->data['user_salt'] = $_newUserPasswordSalt;\n                                    $this->data['user_password'] = $_newUserPasswordHash;\n\n                                    // Reset cookie for current session and logs out user\n                                    if (!defined('ADMIN_PANEL') && !$this->skipCurrentPass) {\n                                        Authenticate::setUserCookie($this->userData['user_id'], $passAuth->getNewSalt(), $passAuth->getNewAlgo());\n                                    }\n\n                                    break;\n                                case '1':\n                                    // New Password equal old password\n                                    fusion_stop();\n                                    Defender::setInputError('user_password');\n                                    Defender::setInputError('user_password1');\n                                    Defender::setErrorText('user_password', $locale['u134'].$locale['u146'].$locale['u133']);\n                                    Defender::setErrorText('user_password1', $locale['u134'].$locale['u146'].$locale['u133']);\n                                    break;\n                                case '2':\n                                    // The two new passwords are not identical\n                                    fusion_stop();\n                                    Defender::setInputError('user_password1');\n                                    Defender::setInputError('user_password2');\n                                    Defender::setErrorText('user_password1', $locale['u148']);\n                                    Defender::setErrorText('user_password2', $locale['u148']);\n                                    break;\n                                case '3':\n                                    // New password contains invalid chars / symbols\n                                    fusion_stop();\n                                    Defender::setInputError('user_password1');\n                                    Defender::setErrorText('user_password1', $locale['u134'].$locale['u142'].\"<br />\".$locale['u147']);\n                                    break;\n                            }\n                        }\n                    } else {\n                        fusion_stop();\n                        Defender::setInputError('user_password');\n                        Defender::setErrorText('user_password', $locale['u149']);\n                    }\n\n                } else {\n\n                    fusion_stop();\n                    Defender::setInputError('user_password1');\n                    Defender::setErrorText('user_password1', $passAuth->getError());\n                }\n            }\n        }\n    }\n\n    /**\n     * @param string $field\n     *\n     * @return false|mixed\n     */\n    private function getPasswordInput($field) {\n        return isset($_POST[$field]) && $_POST[$field] != \"\" ? $_POST[$field] : FALSE;\n    }\n\n    /**\n     * Handle User Email Input and Validation\n     */\n    private function setUserEmail() {\n        $locale = fusion_get_locale();\n        $settings = fusion_get_settings();\n        $is_core_page = (get(\"section\") == 1 || !check_get(\"section\"));\n        if (check_post('user_email') || $this->registration) {\n            $this->_userEmail = sanitizer('user_email', '', 'user_email');\n        }\n        if ($this->_userEmail) {\n\n            $this->userData['user_email'] = !empty($this->userData['user_email']) ? $this->userData['user_email'] : '';\n\n            if ($this->_userEmail != $this->userData['user_email']) {\n\n                // override the requirements of password to change email address of a member in admin panel\n\n                if (defined('ADMIN_PANEL') && (iADMIN && checkrights('M'))) {\n                    $this->_isValidCurrentPassword = TRUE; // changing an email in administration panel\n                } else if (!$this->registration) {\n                    $this->verifyEmailPass();\n                }\n\n                // Require user password for email change\n                if ($this->_isValidCurrentPassword || $this->registration) {\n                    // Require a valid email account\n                    if (dbcount(\"(blacklist_id)\", DB_BLACKLIST,\n                        \":email like replace(if (blacklist_email like '%@%' or blacklist_email like '%\\\\%%', blacklist_email, concat('%@', blacklist_email)), '_', '\\\\_')\",\n                        [':email' => $this->_userEmail])) {\n                        // this email blacklisted.\n                        fusion_stop();\n                        Defender::setInputError('user_email');\n                        Defender::setErrorText('user_email', $locale['u124']);\n\n                    } else {\n\n                        $email_active = dbcount(\"(user_id)\", DB_USERS, \"user_email='\".$this->_userEmail.\"'\");\n                        $email_inactive = dbcount(\"(user_code)\", DB_NEW_USERS, \"user_email='\".$this->_userEmail.\"'\");\n\n                        if ($email_active == 0 && $email_inactive == 0) {\n                            if ($this->verifyNewEmail && $settings['email_verification'] == 1 && !iSUPERADMIN) {\n                                $this->verifyNewEmail();\n                            } else {\n                                $this->data['user_email'] = $this->_userEmail;\n                            }\n\n                        } else {\n                            // email taken\n                            fusion_stop();\n                            Defender::setInputError('user_email');\n                            Defender::setErrorText('user_email', $locale['u125']);\n                        }\n                    }\n\n                } else {\n                    // must have a valid password to change email\n                    fusion_stop();\n\n                    Defender::setInputError('user_email_password');\n\n                    if ($is_core_page) {\n                        Defender::setErrorText('user_email_password', $locale['u149']);\n                    } else {\n                        Defender::setErrorText('user_email_password', $locale['u156']);\n                    }\n\n                }\n            }\n        }\n\n        if (!$this->registration) {\n            $this->data['user_hide_email'] = post('user_hide_email') ? 1 : 0;\n        }\n    }\n\n    /**\n     * Handle new email verification procedures\n     */\n    private function verifyNewEmail() {\n        $settings = fusion_get_settings();\n        $userdata = fusion_get_userdata();\n        $locale = fusion_get_locale();\n        require_once INCLUDES.\"sendmail_include.php\";\n        mt_srand((double)microtime() * 1000000);\n        $salt = \"\";\n        for ($i = 0; $i <= 10; $i++) {\n            $salt .= chr(rand(97, 122));\n        }\n        $user_code = md5($this->_userEmail.$salt);\n        $email_verify_link = $settings['siteurl'].\"edit_profile.php?code=\".$user_code;\n        $mailbody = str_replace(\"[EMAIL_VERIFY_LINK]\", $email_verify_link, $locale['u203']);\n        $mailbody = str_replace(\"[SITENAME]\", $settings['sitename'], $mailbody);\n        $mailbody = str_replace(\"[SITEUSERNAME]\", $settings['siteusername'], $mailbody);\n        $mailbody = str_replace(\"[USER_NAME]\", $userdata['user_name'], $mailbody);\n        $mailSubject = str_replace(\"[SITENAME]\", $settings['sitename'], $locale['u202']);\n        sendemail($this->_userName, $this->_userEmail, $settings['siteusername'], $settings['siteemail'], $mailSubject, $mailbody);\n        addnotice('warning', strtr($locale['u200'], ['(%s)' => $this->_userEmail]));\n        dbquery(\"DELETE FROM \".DB_EMAIL_VERIFY.\" WHERE user_id='\".$this->userData['user_id'].\"'\");\n        dbquery(\"INSERT INTO \".DB_EMAIL_VERIFY.\" (user_id, user_code, user_email, user_datestamp) VALUES('\".$this->userData['user_id'].\"', '$user_code', '\".$this->_userEmail.\"', '\".time().\"')\");\n    }\n\n    /**\n     * Set validation error\n     */\n    private function setValidationError() {\n        $locale = fusion_get_locale();\n        $settings = fusion_get_settings();\n        $_CAPTCHA_IS_VALID = FALSE;\n        include INCLUDES.\"captchas/\".$settings['captcha'].\"/captcha_check.php\";\n        if ($_CAPTCHA_IS_VALID == FALSE) {\n            fusion_stop($locale['u194']);\n            Defender::setInputError('user_captcha');\n        }\n    }\n\n    /**\n     * Handle request for email verification\n     * Sends Verification code when you change email\n     * Sends Verification code when you register\n     */\n    private function setEmailVerification() {\n        $settings = fusion_get_settings();\n        $locale = fusion_get_locale();\n        require_once INCLUDES.\"sendmail_include.php\";\n        $userCode = hash_hmac(\"sha1\", PasswordAuth::getNewPassword(), $this->_userEmail);\n        $activationUrl = $settings['siteurl'].\"register.php?email=\".$this->_userEmail.\"&code=\".$userCode;\n        $message = str_replace(\"USER_NAME\", $this->_userName, $locale['u152']);\n        $message = str_replace(\"SITENAME\", $settings['sitename'], $message);\n        $message = str_replace(\"SITEUSERNAME\", $settings['siteusername'], $message);\n        $message = str_replace(\"USER_PASSWORD\", $this->_newUserPassword, $message);\n        $message = str_replace(\"ACTIVATION_LINK\", $activationUrl, $message);\n        $subject = str_replace(\"[SITENAME]\", $settings['sitename'], $locale['u151']);\n        if (!sendemail($this->_userName, $this->_userEmail, $settings['siteusername'], $settings['siteemail'], $subject, $message)) {\n            $message = strtr($locale['u154'], [\n                '[LINK]'  => \"<a href='\".BASEDIR.\"contact.php'><strong>\",\n                '[/LINK]' => \"</strong></a>\"\n            ]);\n            addnotice('warning', $locale['u153'].\"<br />\".$message, 'all');\n        }\n        $userInfo = base64_encode(serialize($this->data));\n        if (fusion_safe()) {\n            dbquery(\"INSERT INTO \".DB_NEW_USERS.\"\n\t\t\t\t\t(user_code, user_name, user_email, user_datestamp, user_info)\n\t\t\t\t\tVALUES\n\t\t\t\t\t('\".$userCode.\"', '\".$this->data['user_name'].\"', '\".$this->data['user_email'].\"', '\".time().\"', '\".$userInfo.\"')\n\t\t\t\t\t\");\n\n        }\n        $this->_completeMessage = $locale['u150'];\n    }\n\n    /**\n     * Update User Fields\n     *\n     * @return bool\n     */\n    public function saveUpdate() {\n\n        $locale = fusion_get_locale();\n\n        $settings = fusion_get_settings();\n\n        $this->_method = \"validate_update\";\n\n        $is_core_page = (post(\"user_name\") || post(\"user_password\") || post('user_password1') || post('user_password2') || post(\"user_admin_password\") || post(\"user_email\"));\n\n        // Non-applicable to any other custom UF section\n        if ($is_core_page) {\n\n            $this->setUserName();\n\n            $this->setPassword();\n\n            if (!defined('ADMIN_PANEL')) {\n                $this->setAdminPassword();\n            }\n\n            $this->setUserEmail();\n\n            $this->setUserAvatar();\n        }\n\n        if ($this->validation == 1) {\n            $this->setValidationError();\n        }\n\n        $quantum = new QuantumFields();\n        $quantum->setCategoryDb(DB_USER_FIELD_CATS);\n        $quantum->setFieldDb(DB_USER_FIELDS);\n        $quantum->setPluginFolder(INCLUDES.\"user_fields/\");\n        $quantum->setPluginLocaleFolder(LOCALE.LOCALESET.\"user_fields/\");\n        $quantum->loadFields();\n        $quantum->loadFieldCats();\n        $quantum->setCallbackData($this->userData);\n        $_input = $quantum->returnFieldsInput(DB_USERS, 'user_id');\n\n        if (!empty($_input)) {\n            foreach ($_input as $input) {\n                $this->data += $input;\n            }\n        }\n\n        $this->data = $this->getData();\n\n        // hidden input tamper check - user_hash must not be changed.\n        // id request spoofing request\n        if (!(iADMIN && checkrights('M')) ||\n            ($this->userData['user_password'] != sanitizer(\"user_hash\", \"\", \"user_hash\")) ||\n            ($this->data['user_id'] != fusion_get_userdata('user_id'))) {\n            fusion_stop($locale['error_request']);\n\n            return FALSE;\n        }\n\n        // check for password match\n        if (fusion_safe()) {\n\n            if ($is_core_page) {\n                // Logs Username change\n                if ($this->_userName !== $this->userData['user_name']) {\n                    save_user_log($this->userData['user_id'], \"user_name\", $this->_userName, $this->userData['user_name']);\n                }\n                // Logs Email change\n                if ($this->_userEmail !== $this->userData['user_email']) {\n                    save_user_log($this->userData['user_id'], \"user_email\", $this->_userEmail, $this->userData['user_email']);\n                }\n            }\n\n            // Logs Field changes\n            $quantum->logUserAction(DB_USERS, \"user_id\");\n\n            // Update Table\n            dbquery_insert(DB_USERS, $this->data, 'update', ['keep_session' => TRUE]);\n\n            $this->_completeMessage = $locale['u163'];\n\n            if ($this->isAdminPanel && $this->_isValidCurrentPassword && $this->_newUserPassword && $this->_newUserPassword2) {\n                // inform user that password has changed. and tell him your new password\n                include INCLUDES.\"sendmail_include.php\";\n                addnotice(\"success\", str_replace(\"USER_NAME\", $this->userData['user_name'], $locale['global_458']));\n\n                $input = [\n                    \"mailname\" => $this->userData['user_name'],\n                    \"email\"    => $this->userData['user_email'],\n                    \"subject\"  => str_replace(\"[SITENAME]\", $settings['sitename'], $locale['global_456']),\n                    \"message\"  => str_replace(\n                        [\n                            \"[SITENAME]\",\n                            \"[SITEUSERNAME]\",\n                            \"USER_NAME\",\n                            \"[PASSWORD]\"\n                        ],\n                        [\n                            $settings['sitename'],\n                            $settings['siteusername'],\n                            $this->userData['user_name'],\n                            $this->_newUserPassword,\n                        ],\n                        $locale['global_457']\n                    )\n                ];\n\n                if (!sendemail($input['mailname'], $input['email'], $settings['siteusername'], $settings['siteemail'], $input['subject'],\n                    $input['message'])\n                ) {\n                    addnotice('warning', str_replace(\"USER_NAME\", $this->userData['user_name'], $locale['global_459']));\n                }\n\n                redirect(FUSION_REQUEST);\n\n                return FALSE;\n            }\n\n            addnotice('success', $locale['u169']);\n\n            return TRUE;\n        }\n\n        return FALSE;\n    }\n\n    /**\n     * Set admin password\n     */\n    private function setAdminPassword() {\n        $locale = fusion_get_locale();\n        if ($this->getPasswordInput(\"user_admin_password\")) { // if submit current admin password\n\n            $_userAdminPassword = $this->getPasswordInput(\"user_admin_password\");      // var1\n            $_newUserAdminPassword = $this->getPasswordInput(\"user_admin_password1\");  // var2\n            $_newUserAdminPassword2 = $this->getPasswordInput(\"user_admin_password2\"); // var3\n            $adminpassAuth = new PasswordAuth();\n\n            if (!$this->userData['user_admin_password'] && !$this->userData['user_admin_salt']) {\n                // New Admin\n                $adminpassAuth->inputPassword = 'fake';\n                $adminpassAuth->inputNewPassword = $_userAdminPassword;\n                $adminpassAuth->inputNewPassword2 = $_newUserAdminPassword2;\n                $valid_current_password = TRUE;\n\n            } else {\n\n                // Old Admin changing password\n                $adminpassAuth->inputPassword = $_userAdminPassword;         // var1\n                $adminpassAuth->inputNewPassword = $_newUserAdminPassword;   // var2\n                $adminpassAuth->inputNewPassword2 = $_newUserAdminPassword2; // var3\n                $adminpassAuth->currentPasswordHash = $this->userData['user_admin_password'];\n                $adminpassAuth->currentAlgo = $this->userData['user_admin_algo'];\n                $adminpassAuth->currentSalt = $this->userData['user_admin_salt'];\n                $valid_current_password = $adminpassAuth->isValidCurrentPassword();\n            }\n\n            if ($valid_current_password) {\n\n                //$_isValidCurrentAdminPassword = 1;\n\n                // authenticated. now do the integrity check\n                $_isValidNewPassword = $adminpassAuth->isValidNewPassword();\n                switch ($_isValidNewPassword) {\n                    case '0':\n                        // New password is valid\n                        $new_admin_password = $adminpassAuth->getNewHash();\n                        $new_admin_salt = $adminpassAuth->getNewSalt();\n                        $new_admin_algo = $adminpassAuth->getNewAlgo();\n                        $this->data['user_admin_algo'] = $new_admin_algo;\n                        $this->data['user_admin_salt'] = $new_admin_salt;\n                        $this->data['user_admin_password'] = $new_admin_password;\n                        break;\n                    case '1':\n                        // new password is old password\n                        fusion_stop();\n                        Defender::setInputError('user_admin_password');\n                        Defender::setInputError('user_admin_password1');\n                        Defender::setErrorText('user_admin_password', $locale['u144'].$locale['u146'].$locale['u133']);\n                        Defender::setErrorText('user_admin_password1', $locale['u144'].$locale['u146'].$locale['u133']);\n                        break;\n                    case '2':\n                        // The two new passwords are not identical\n                        fusion_stop();\n                        Defender::setInputError('user_admin_password1');\n                        Defender::setInputError('user_admin_password2');\n                        Defender::setErrorText('user_admin_password1', $locale['u144'].$locale['u148a']);\n                        Defender::setErrorText('user_admin_password2', $locale['u144'].$locale['u148a']);\n                        break;\n                    case '3':\n                        // New password contains invalid chars / symbols\n                        fusion_stop();\n                        Defender::setInputError('user_admin_password1');\n                        Defender::setErrorText('user_admin_password1', $locale['u144'].$locale['u142'].\"<br />\".$locale['u147']);\n                        break;\n                }\n            } else {\n                fusion_stop();\n                Defender::setInputError('user_admin_password');\n                Defender::setErrorText('user_admin_password', $locale['u149a']);\n            }\n        } else { // check db only - admin cannot save profile page without password\n\n            if (iADMIN) {\n                $require_valid_password = $this->userData['user_admin_password'];\n                if (!$require_valid_password) {\n                    // 149 for admin\n                    fusion_stop();\n                    Defender::setInputError('user_admin_password');\n                    Defender::setErrorText('user_admin_password', $locale['u149a']);\n                }\n            }\n        }\n    }\n\n    /**\n     * Set user avatar\n     */\n    private function setUserAvatar() {\n        if (isset($_POST['delAvatar'])) {\n            if ($this->userData['user_avatar'] != \"\" && file_exists(IMAGES.\"avatars/\".$this->userData['user_avatar']) && is_file(IMAGES.\"avatars/\".$this->userData['user_avatar'])) {\n                unlink(IMAGES.\"avatars/\".$this->userData['user_avatar']);\n            }\n            $this->data['user_avatar'] = '';\n        }\n        if (isset($_FILES['user_avatar']) && $_FILES['user_avatar']['name']) { // uploaded avatar\n            if (!empty($_FILES['user_avatar']) && is_uploaded_file($_FILES['user_avatar']['tmp_name'])) {\n                $upload = form_sanitizer($_FILES['user_avatar'], '', 'user_avatar');\n                if (isset($upload['error']) && !$upload['error']) {\n                    // ^ maybe use empty($upload['error']) also can but maybe low end php version has problem on empty.\n                    $this->data['user_avatar'] = $upload['image_name'];\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns userhash added userdata array\n     *\n     * @return array\n     */\n    public function getData() {\n        if (!empty($this->userData['user_password'])) {\n            // when edit profile\n            $this->data['user_hash'] = $this->userData['user_password'];\n        } else if (isset($_POST['user_hash'])) {\n            // when new registration\n            $this->data['user_hash'] = sanitizer('user_hash', '', 'user_hash');\n        }\n\n        return $this->data;\n    }\n\n    /**\n     * @param string $value\n     */\n    public function setUserNameChange($value) {\n        $this->username_change = $value;\n    }\n\n    /**\n     * @param string $value\n     */\n    public function verifyCode($value) {\n        $locale = fusion_get_locale();\n        $userdata = fusion_get_userdata();\n        if (!preg_check(\"/^[0-9a-z]{32}$/i\", $value)) {\n            redirect(BASEDIR.'index.php');\n        }\n        $result = dbquery(\"SELECT * FROM \".DB_EMAIL_VERIFY.\" WHERE user_code=:usercode\", [':usercode' => $value]);\n        if (dbrows($result)) {\n            $data = dbarray($result);\n            if ($data['user_id'] == $userdata['user_id']) {\n                if ($data['user_email'] != $userdata['user_email']) {\n                    $result = dbquery(\"SELECT user_email FROM \".DB_USERS.\" WHERE user_email=:useremail\", [':useremail' => $data['user_email']]);\n                    if (dbrows($result) > 0) {\n                        addnotice(\"danger\", $locale['u164'].\"<br />\\n\".$locale['u121']);\n                    } else {\n                        $this->_completeMessage = $locale['u169'];\n                    }\n                    dbquery(\"UPDATE \".DB_USERS.\" SET user_email='\".$data['user_email'].\"' WHERE user_id='\".$data['user_id'].\"'\");\n                    dbquery(\"DELETE FROM \".DB_EMAIL_VERIFY.\" WHERE user_id='\".$data['user_id'].\"'\");\n                }\n            } else {\n                redirect(BASEDIR.'index.php');\n            }\n        } else {\n            redirect(BASEDIR.'index.php');\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public function themeChanged() {\n        return $this->_themeChanged;\n    }\n\n    /**\n     * To validate only when _setUserEmail is true\n     * Changing Email address\n     */\n    private function verifyEmailPass() {\n        // Validation of password change\n        if ($_userPassword = self::getPasswordInput('user_password')) {\n            /**\n             * Validation of Password\n             */\n            $passAuth = new PasswordAuth();\n            $passAuth->inputPassword = $_userPassword;\n            $passAuth->currentAlgo = $this->userData['user_algo'];\n            $passAuth->currentSalt = $this->userData['user_salt'];\n            $passAuth->currentPasswordHash = $this->userData['user_password'];\n\n            $passAuth->currentPassCheckLength = 1;          // add settings\n            $passAuth->currentPassCheckCase = FALSE;        // add settings\n            $passAuth->currentPassCheckNum = FALSE;         // add settings\n            $passAuth->currentPassCheckSpecialchar = FALSE; // add settings\n\n            if ($passAuth->isValidCurrentPassword()) {\n                $this->_isValidCurrentPassword = 1;\n            } else {\n                fusion_stop($passAuth->getError());\n                Defender::setInputError('user_password');\n                Defender::setErrorText('user_password', $passAuth->getError());\n            }\n        }\n    }\n}\n"], "filenames": ["includes/classes/PHPFusion/UserFieldsInput.php"], "buggy_code_start_loc": [669], "buggy_code_end_loc": [678], "fixing_code_start_loc": [669], "fixing_code_end_loc": [675], "type": "CWE-287", "message": "Unverified Password Change in GitHub repository phpfusion/phpfusion prior to 9.10.20.", "other": {"cve": {"id": "CVE-2022-3152", "sourceIdentifier": "security@huntr.dev", "published": "2022-09-07T15:15:08.430", "lastModified": "2022-09-12T19:39:12.723", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unverified Password Change in GitHub repository phpfusion/phpfusion prior to 9.10.20."}, {"lang": "es", "value": "Un Cambio de Contrase\u00f1a no Verificado en el repositorio de GitHub phpfusion/phpfusion versiones anteriores a 9.10.20"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.8}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-620"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php-fusion:phpfusion:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.10.20", "matchCriteriaId": "3DA34C2B-F897-4586-B025-C564999ACC4D"}]}]}], "references": [{"url": "https://github.com/phpfusion/phpfusion/commit/57c96d4a0c00e8e1e25100087654688123c6e991", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b3f888d2-5c71-4682-8287-42613401fd5a", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/phpfusion/phpfusion/commit/57c96d4a0c00e8e1e25100087654688123c6e991"}}