{"buggy_code": ["<?php\n\nnamespace Roots\\Soil\\Modules;\n\nuse DOMDocument;\nuse Roots\\Soil\\DOM;\n\nuse function add_action;\nuse function add_filter;\nuse function esc_url;\nuse function get_bloginfo;\nuse function get_default_feed;\nuse function get_feed_link;\nuse function get_option;\nuse function get_permalink;\nuse function is_front_page;\nuse function is_page;\nuse function is_rtl;\nuse function is_single;\nuse function remove_action;\nuse function __;\n\n/**\n * Clean up wp_head()\n *\n * Remove unnecessary <link>'s\n * Remove inline CSS and JS from WP emoji support\n * Remove inline CSS used by Recent Comments widget\n * Remove inline CSS used by posts with galleries\n * Remove self-closing tag\n */\nclass CleanUpModule extends AbstractModule\n{\n    /**\n     * Name of the module.\n     *\n     * @var string\n     */\n    protected $name = 'clean-up';\n\n    /**\n     * Default options.\n     *\n     * @var array\n     */\n    protected $defaults = [\n        /**\n         * Enable this module.\n         *\n         * @var bool\n         */\n        'enabled' => true,\n\n        /**\n         * Obscure and suppress WordPress information.\n         *\n         * @var bool\n         */\n        'wp_obscurity' => true,\n\n        /**\n         * Disable WordPress emojis.\n         *\n         * @var bool\n         */\n        'disable_emojis' => true,\n\n        /**\n         * Disable Gutenberg block library CSS.\n         *\n         * @var bool\n         */\n        'disable_gutenberg_block_css' => true,\n\n        /**\n         * Disable extra RSS feeds.\n         *\n         * @var bool\n         */\n        'disable_extra_rss' => true,\n\n        /**\n         * Disable recent comments CSS.\n         *\n         * @var bool\n         */\n        'disable_recent_comments_css' => true,\n\n        /**\n         * Disable gallery CSS.\n         *\n         * @var bool\n         */\n        'disable_gallery_css' => true,\n\n        /**\n         * Clean HTML5 markup.\n         *\n         * @var bool\n         */\n        'clean_html5_markup' => true,\n    ];\n\n    /**\n     * Module handle.\n     *\n     * @return void\n     */\n    public function handle()\n    {\n        $tasks = [\n            'wp_obscurity' => 'wpObscurity',\n            'disable_emojis' => 'disableEmojis',\n            'disable_gutenberg_block_css' => 'disableGutenbergBlockCss',\n            'disable_extra_rss' => 'disableExtraRss',\n            'disable_recent_comments_css' => 'disableRecentCommentsCss',\n            'disable_gallery_css' => 'disableGalleryCss',\n            'clean_html5_markup' => 'cleanHtmlMarkup',\n        ];\n\n        $enabled_tasks = array_keys(array_filter($this->options->all()));\n\n        foreach ($enabled_tasks as $task) {\n            if (isset($tasks[$task])) {\n                $this->{$tasks[$task]}();\n            }\n        }\n    }\n\n    /**\n     * Obscure and suppress WordPress information.\n     *\n     * @return void\n     */\n    protected function wpObscurity()\n    {\n        $this->filter('get_bloginfo_rss', 'removeDefaultSiteTagline');\n        add_filter('the_generator', '__return_false');\n        remove_action('wp_head', 'rsd_link');\n        remove_action('wp_head', 'wlwmanifest_link');\n        remove_action('wp_head', 'adjacent_posts_rel_link_wp_head', 10);\n        remove_action('wp_head', 'wp_generator');\n        remove_action('wp_head', 'wp_shortlink_wp_head', 10);\n        remove_action('wp_head', 'rest_output_link_wp_head', 10);\n        remove_action('wp_head', 'wp_oembed_add_discovery_links');\n        remove_action('wp_head', 'wp_oembed_add_host_js');\n    }\n\n    /**\n     * Disable WordPress emojis.\n     *\n     * @return void\n     */\n    protected function disableEmojis()\n    {\n        remove_action('wp_head', 'print_emoji_detection_script', 7);\n        remove_action('admin_print_scripts', 'print_emoji_detection_script');\n        remove_action('wp_print_styles', 'print_emoji_styles');\n        remove_action('admin_print_styles', 'print_emoji_styles');\n        remove_filter('the_content_feed', 'wp_staticize_emoji');\n        remove_filter('comment_text_rss', 'wp_staticize_emoji');\n        remove_filter('wp_mail', 'wp_staticize_emoji_for_email');\n        add_filter('emoji_svg_url', '__return_false');\n    }\n\n    /**\n     * Disable Gutenberg block library CSS.\n     *\n     * @return void\n     */\n    protected function disableGutenbergBlockCss()\n    {\n        add_action('wp_enqueue_scripts', function () {\n            wp_dequeue_style('wp-block-library');\n        }, 200);\n    }\n\n    /**\n     * Disable extra RSS feeds.\n     *\n     * @return void\n     */\n    protected function disableExtraRss()\n    {\n        add_filter('feed_links_show_comments_feed', '__return_false');\n        remove_action('wp_head', 'feed_links_extra', 3);\n    }\n\n    /**\n     * Disable recent comments CSS.\n     *\n     * @return void\n     */\n    protected function disableRecentCommentsCss()\n    {\n        add_filter('show_recent_comments_widget_style', '__return_false');\n    }\n\n    /**\n     * Disable gallery CSS.\n     *\n     * @return void\n     */\n    protected function disableGalleryCss()\n    {\n        add_filter('use_default_gallery_style', '__return_false');\n    }\n\n    /**\n     * Clean HTML5 markup.\n     *\n     * @return void\n     */\n    protected function cleanHtmlMarkup()\n    {\n        $this->filter('body_class', 'bodyClass');\n        $this->filter('language_attributes', 'languageAttributes');\n\n        if (class_exists(DOMDocument::class)) {\n            $this->filter('style_loader_tag', 'cleanStylesheetLinks');\n            $this->filter('script_loader_tag', 'cleanScriptTags');\n        }\n\n        $this->filters([\n            'get_avatar',          // <img />\n            'comment_id_fields',   // <input />\n            'post_thumbnail_html', // <img />\n        ], 'removeSelfClosingTags');\n\n        add_filter('site_icon_meta_tags', function ($meta_tags) {\n            return array_map([$this, 'removeSelfClosingTags'], $meta_tags);\n        }, 20);\n    }\n\n    /**\n     * Clean up language_attributes() used in <html> tag\n     *\n     * Remove dir=\"ltr\"\n     *\n     * @internal Used by `language_attributes`\n     *\n     * @return void\n     */\n    public function languageAttributes()\n    {\n        $attributes = [];\n\n        if (is_rtl()) {\n            $attributes[] = 'dir=\"rtl\"';\n        }\n\n        $lang = get_bloginfo('language');\n\n        if ($lang) {\n            $attributes[] = \"lang=\\\"{$lang}\\\"\";\n        }\n\n        return implode(' ', $attributes);\n    }\n\n    /**\n     * Clean up output of stylesheet <link> tags\n     *\n     * @internal Used by `style_loader_tag`\n     *\n     * @param string $html\n     * @return string\n     */\n    public function cleanStylesheetLinks($html)\n    {\n        return (new DOM($html))->each(static function ($link) {\n            $link->removeAttribute('type');\n            $link->removeAttribute('id');\n\n            if (($media = $link->getAttribute('media')) && $media !== 'all') {\n                return;\n            }\n\n            $link->removeAttribute('media');\n        })->html();\n    }\n\n    /**\n     * Clean up output of <script> tags\n     *\n     * @internal Used by `script_loader_tag`\n     *\n     * @param string $html\n     * @return string\n     */\n    public function cleanScriptTags($html)\n    {\n        return (new DOM($html))->each(static function ($script) {\n            $script->removeAttribute('type');\n            $script->removeAttribute('id');\n        })->html();\n    }\n\n    /**\n     * Add and remove body_class() classes.\n     *\n     * @internal Used by `body_class`\n     *\n     * @param array $classes\n     * @return array\n     */\n    public function bodyClass($classes)\n    {\n        $remove_classes = [\n            'page-template-default'\n        ];\n\n        // Add post/page slug if not present\n        if (is_single() || is_page() && !is_front_page()) {\n            if (!in_array($slug = basename(get_permalink()), $classes)) {\n                $classes[] = $slug;\n            }\n        }\n\n        if (is_front_page()) {\n            $remove_classes[] = 'page-id-' . get_option('page_on_front');\n        }\n\n        $classes = array_values(array_diff($classes, $remove_classes));\n\n        return $classes;\n    }\n\n    /**\n     * Remove the default site tagline from RSS feed.\n     *\n     * @internal Used by `get_bloginfo_rss`\n     *\n     * @param string $bloginfo\n     * @return string\n     */\n    public function removeDefaultSiteTagline($bloginfo)\n    {\n        $default_tagline = __('Just another WordPress site');\n        return ($bloginfo === $default_tagline) ? '' : $bloginfo;\n    }\n\n    /**\n     * Remove self-closing tags.\n     *\n     * @internal Used by `get_avatar`, `comment_id_fields`, and `post_thumbnail_html`\n     *\n     * @param string|string[] $html\n     * @return string|string[]\n     */\n    public function removeSelfClosingTags($html)\n    {\n        return str_replace(' />', '>', $html);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Roots\\Soil\\Modules;\n\nuse DOMDocument;\nuse Roots\\Soil\\DOM;\n\nuse function add_action;\nuse function add_filter;\nuse function esc_url;\nuse function get_bloginfo;\nuse function get_default_feed;\nuse function get_feed_link;\nuse function get_option;\nuse function get_permalink;\nuse function is_front_page;\nuse function is_page;\nuse function is_rtl;\nuse function is_single;\nuse function remove_action;\nuse function __;\n\n/**\n * Clean up wp_head()\n *\n * Remove unnecessary <link>'s\n * Remove inline CSS and JS from WP emoji support\n * Remove inline CSS used by Recent Comments widget\n * Remove inline CSS used by posts with galleries\n * Remove self-closing tag\n */\nclass CleanUpModule extends AbstractModule\n{\n    /**\n     * Name of the module.\n     *\n     * @var string\n     */\n    protected $name = 'clean-up';\n\n    /**\n     * Default options.\n     *\n     * @var array\n     */\n    protected $defaults = [\n        /**\n         * Enable this module.\n         *\n         * @var bool\n         */\n        'enabled' => true,\n\n        /**\n         * Obscure and suppress WordPress information.\n         *\n         * @var bool\n         */\n        'wp_obscurity' => true,\n\n        /**\n         * Disable WordPress emojis.\n         *\n         * @var bool\n         */\n        'disable_emojis' => true,\n\n        /**\n         * Disable Gutenberg block library CSS.\n         *\n         * @var bool\n         */\n        'disable_gutenberg_block_css' => true,\n\n        /**\n         * Disable extra RSS feeds.\n         *\n         * @var bool\n         */\n        'disable_extra_rss' => true,\n\n        /**\n         * Disable recent comments CSS.\n         *\n         * @var bool\n         */\n        'disable_recent_comments_css' => true,\n\n        /**\n         * Disable gallery CSS.\n         *\n         * @var bool\n         */\n        'disable_gallery_css' => true,\n\n        /**\n         * Clean HTML5 markup.\n         *\n         * @var bool\n         */\n        'clean_html5_markup' => true,\n    ];\n\n    /**\n     * Module handle.\n     *\n     * @return void\n     */\n    public function handle()\n    {\n        $tasks = [\n            'wp_obscurity' => 'wpObscurity',\n            'disable_emojis' => 'disableEmojis',\n            'disable_gutenberg_block_css' => 'disableGutenbergBlockCss',\n            'disable_extra_rss' => 'disableExtraRss',\n            'disable_recent_comments_css' => 'disableRecentCommentsCss',\n            'disable_gallery_css' => 'disableGalleryCss',\n            'clean_html5_markup' => 'cleanHtmlMarkup',\n        ];\n\n        $enabled_tasks = array_keys(array_filter($this->options->all()));\n\n        foreach ($enabled_tasks as $task) {\n            if (isset($tasks[$task])) {\n                $this->{$tasks[$task]}();\n            }\n        }\n    }\n\n    /**\n     * Obscure and suppress WordPress information.\n     *\n     * @return void\n     */\n    protected function wpObscurity()\n    {\n        $this->filter('get_bloginfo_rss', 'removeDefaultSiteTagline');\n        add_filter('the_generator', '__return_false');\n        remove_action('wp_head', 'rsd_link');\n        remove_action('wp_head', 'wlwmanifest_link');\n        remove_action('wp_head', 'adjacent_posts_rel_link_wp_head', 10);\n        remove_action('wp_head', 'wp_generator');\n        remove_action('wp_head', 'wp_shortlink_wp_head', 10);\n        remove_action('wp_head', 'rest_output_link_wp_head', 10);\n        remove_action('wp_head', 'wp_oembed_add_discovery_links');\n        remove_action('wp_head', 'wp_oembed_add_host_js');\n    }\n\n    /**\n     * Disable WordPress emojis.\n     *\n     * @return void\n     */\n    protected function disableEmojis()\n    {\n        remove_action('wp_head', 'print_emoji_detection_script', 7);\n        remove_action('admin_print_scripts', 'print_emoji_detection_script');\n        remove_action('wp_print_styles', 'print_emoji_styles');\n        remove_action('admin_print_styles', 'print_emoji_styles');\n        remove_filter('the_content_feed', 'wp_staticize_emoji');\n        remove_filter('comment_text_rss', 'wp_staticize_emoji');\n        remove_filter('wp_mail', 'wp_staticize_emoji_for_email');\n        add_filter('emoji_svg_url', '__return_false');\n    }\n\n    /**\n     * Disable Gutenberg block library CSS.\n     *\n     * @return void\n     */\n    protected function disableGutenbergBlockCss()\n    {\n        add_action('wp_enqueue_scripts', function () {\n            wp_dequeue_style('wp-block-library');\n        }, 200);\n    }\n\n    /**\n     * Disable extra RSS feeds.\n     *\n     * @return void\n     */\n    protected function disableExtraRss()\n    {\n        add_filter('feed_links_show_comments_feed', '__return_false');\n        remove_action('wp_head', 'feed_links_extra', 3);\n    }\n\n    /**\n     * Disable recent comments CSS.\n     *\n     * @return void\n     */\n    protected function disableRecentCommentsCss()\n    {\n        add_filter('show_recent_comments_widget_style', '__return_false');\n    }\n\n    /**\n     * Disable gallery CSS.\n     *\n     * @return void\n     */\n    protected function disableGalleryCss()\n    {\n        add_filter('use_default_gallery_style', '__return_false');\n    }\n\n    /**\n     * Clean HTML5 markup.\n     *\n     * @return void\n     */\n    protected function cleanHtmlMarkup()\n    {\n        $this->filter('body_class', 'bodyClass');\n        $this->filter('language_attributes', 'languageAttributes');\n\n        if (class_exists(DOMDocument::class)) {\n            $this->filter('style_loader_tag', 'cleanStylesheetLinks');\n            $this->filter('script_loader_tag', 'cleanScriptTags');\n        }\n\n        $this->filters([\n            'get_avatar',          // <img />\n            'comment_id_fields',   // <input />\n            'post_thumbnail_html', // <img />\n        ], 'removeSelfClosingTags');\n\n        add_filter('site_icon_meta_tags', function ($meta_tags) {\n            return array_map([$this, 'removeSelfClosingTags'], $meta_tags);\n        }, 20);\n    }\n\n    /**\n     * Clean up language_attributes() used in <html> tag\n     *\n     * Remove dir=\"ltr\"\n     *\n     * @internal Used by `language_attributes`\n     *\n     * @return void\n     */\n    public function languageAttributes()\n    {\n        $attributes = [];\n\n        if (is_rtl()) {\n            $attributes[] = 'dir=\"rtl\"';\n        }\n\n        $lang = esc_attr(get_bloginfo('language'));\n\n        if ($lang) {\n            $attributes[] = \"lang=\\\"{$lang}\\\"\";\n        }\n\n        return implode(' ', $attributes);\n    }\n\n    /**\n     * Clean up output of stylesheet <link> tags\n     *\n     * @internal Used by `style_loader_tag`\n     *\n     * @param string $html\n     * @return string\n     */\n    public function cleanStylesheetLinks($html)\n    {\n        return (new DOM($html))->each(static function ($link) {\n            $link->removeAttribute('type');\n            $link->removeAttribute('id');\n\n            if (($media = $link->getAttribute('media')) && $media !== 'all') {\n                return;\n            }\n\n            $link->removeAttribute('media');\n        })->html();\n    }\n\n    /**\n     * Clean up output of <script> tags\n     *\n     * @internal Used by `script_loader_tag`\n     *\n     * @param string $html\n     * @return string\n     */\n    public function cleanScriptTags($html)\n    {\n        return (new DOM($html))->each(static function ($script) {\n            $script->removeAttribute('type');\n            $script->removeAttribute('id');\n        })->html();\n    }\n\n    /**\n     * Add and remove body_class() classes.\n     *\n     * @internal Used by `body_class`\n     *\n     * @param array $classes\n     * @return array\n     */\n    public function bodyClass($classes)\n    {\n        $remove_classes = [\n            'page-template-default'\n        ];\n\n        // Add post/page slug if not present\n        if (is_single() || is_page() && !is_front_page()) {\n            if (!in_array($slug = basename(get_permalink()), $classes)) {\n                $classes[] = $slug;\n            }\n        }\n\n        if (is_front_page()) {\n            $remove_classes[] = 'page-id-' . get_option('page_on_front');\n        }\n\n        $classes = array_values(array_diff($classes, $remove_classes));\n\n        return $classes;\n    }\n\n    /**\n     * Remove the default site tagline from RSS feed.\n     *\n     * @internal Used by `get_bloginfo_rss`\n     *\n     * @param string $bloginfo\n     * @return string\n     */\n    public function removeDefaultSiteTagline($bloginfo)\n    {\n        $default_tagline = __('Just another WordPress site');\n        return ($bloginfo === $default_tagline) ? '' : $bloginfo;\n    }\n\n    /**\n     * Remove self-closing tags.\n     *\n     * @internal Used by `get_avatar`, `comment_id_fields`, and `post_thumbnail_html`\n     *\n     * @param string|string[] $html\n     * @return string|string[]\n     */\n    public function removeSelfClosingTags($html)\n    {\n        return str_replace(' />', '>', $html);\n    }\n}\n"], "filenames": ["src/Modules/CleanUpModule.php"], "buggy_code_start_loc": [252], "buggy_code_end_loc": [253], "fixing_code_start_loc": [252], "fixing_code_end_loc": [253], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, was found in Roots soil Plugin up to 4.0.x. Affected is the function language_attributes of the file src/Modules/CleanUpModule.php. The manipulation of the argument language leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 4.1.0 is able to address this issue. The name of the patch is 0c9151e00ab047da253e5cdbfccb204dd423269d. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-215904.", "other": {"cve": {"id": "CVE-2022-4524", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-15T21:15:13.017", "lastModified": "2023-03-01T02:36:54.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in Roots soil Plugin up to 4.0.x. Affected is the function language_attributes of the file src/Modules/CleanUpModule.php. The manipulation of the argument language leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 4.1.0 is able to address this issue. The name of the patch is 0c9151e00ab047da253e5cdbfccb204dd423269d. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-215904."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:roots:soil:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "4.1.0", "matchCriteriaId": "71313562-2AE8-4D62-9CAE-D30C005B038A"}]}]}], "references": [{"url": "https://github.com/roots/soil/commit/0c9151e00ab047da253e5cdbfccb204dd423269d", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/roots/soil/pull/285", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/roots/soil/releases/tag/4.1.0", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?id.215904", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/roots/soil/commit/0c9151e00ab047da253e5cdbfccb204dd423269d"}}