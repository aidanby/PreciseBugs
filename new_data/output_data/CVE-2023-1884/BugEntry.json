{"buggy_code": ["<?php\n\n/**\n * The main stop words configuration frontend.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Anatoliy Belsky <ab@php.net>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2009-04-01\n */\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n?>\n\n  <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n      <i aria-hidden=\"true\" class=\"fa fa-wrench\"></i>\n        <?= $PMF_LANG['ad_menu_stopwordsconfig'] ?>\n    </h1>\n  </div>\n\n<?php\nif ($user->perm->hasPermission($user->getUserId(), 'editconfig')) {\n    $sortedLanguageCodes = $languageCodes;\n    asort($sortedLanguageCodes);\n    reset($sortedLanguageCodes);\n    ?>\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n\n      <p>\n        <?= $PMF_LANG['ad_stopwords_desc'] ?>\n      </p>\n      <p>\n        <label for=\"stopwords_lang_selector\"><?= $PMF_LANG['ad_entry_locale'] ?>:</label>\n        <select onchange=\"loadStopWordsByLang(this.options[this.selectedIndex].value)\"\n                id=\"stopwords_lang_selector\">\n          <option value=\"none\">---</option>\n            <?php foreach ($sortedLanguageCodes as $key => $value) { ?>\n              <option value=\"<?= strtolower($key) ?>\"><?= $value ?></option>\n            <?php } ?>\n        </select>\n        <span id=\"stopwords_loading_indicator\"></span>\n      </p>\n\n      <div class=\"mb-3\" id=\"stopwords_content\"></div>\n\n      <script>\n\n        /**\n         * column count in the stop words table\n         */\n        const maxCols = 4;\n\n        /**\n         * Load stop words by language, build html and put\n         * it into stop words_content container\n         *\n         * @param lang language to retrieve the stop words by\n         * @return void\n         */\n        function loadStopWordsByLang(lang) {\n          if ('none' === lang) {\n            return;\n          }\n\n          $('#stopwords_loading_indicator').html('<i class=\"fa fa-cog fa-spin fa-fw\"></i><span class=\"sr-only\">Loading...</span>');\n\n          $.get('index.php',\n            { action: 'ajax', ajax: 'config', ajaxaction: 'load_stop_words_by_lang', stopwords_lang: lang },\n            (data) => {\n              $('#stopwords_content').html(buildStopWordsHTML(data));\n              $('#stopwords_loading_indicator').html('<i class=\"fa fa-spell-check\" aria-hidden=\"true\"></i>');\n            },\n            'json',\n          );\n        }\n\n        /**\n         * Build complete html contents to view and edit stop words\n         *\n         * @param data Supposed is stop words json data\n         *\n         * @return string\n         */\n        function buildStopWordsHTML(data) {\n          if ('object' != typeof (data)) {\n            return '';\n          }\n\n          let html = '<table class=\"table table-hover\">';\n          let elem_id;\n          for (let i = 0; i < data.length; i++) {\n\n            if (i % maxCols === 0) {\n              html += '<tr id=\"stopwords_group_' + i + '\">';\n            }\n\n            // id attribute is of the format stopword_<id>_<lang>\n            elem_id = buildStopWordInputElemId(data[i].id, data[i].lang);\n\n            html += '<td>';\n            html += buildStopWordInputElement(elem_id, data[i].stopword);\n            html += '</td>';\n\n            if (i % maxCols === maxCols - 1) {\n              html += '</tr>';\n            }\n          }\n\n          html += '</table>';\n          html += '<a class=\"btn btn-primary\" href=\"javascript: addStopWordInputElem();\"><i aria-hidden=\"true\" class=\"fa fa-plus\"></i> <?= $PMF_LANG['ad_config_stopword_input'] ?></a>';\n\n          return html;\n        }\n\n\n        /**\n         * Build an input element to view and edit stop word\n         *\n         * @param elementId id of the html element\n         * @param stopword\n         *\n         * @return string\n         */\n        function buildStopWordInputElement(elementId, stopword) {\n          elementId = elementId || buildStopWordInputElemId();\n          stopword = stopword || '';\n          const attrs = 'onblur=\"saveStopWord(this.id)\" onkeydown=\"saveStopWordHandleEnter(this.id, event)\" onfocus=\"saveOldValue(this.id)\"';\n          return '<input class=\"form-control form-control-sm\" id=\"' + elementId + '\" value=\"' + stopword + '\" ' + attrs + '>';\n        }\n\n        /**\n         * Id attribute is of the format stopword_<id>_<lang>\n         *\n         * @param id database id of the word\n         * @param lang\n         *\n         * @return string\n         */\n        function buildStopWordInputElemId(id, lang) {\n          id = id || -1;\n          lang = lang || $('#stopwords_lang_selector').val();\n\n          return 'stopword_' + id + '_' + lang;\n        }\n\n        /**\n         * Parse the stopword element id and return a clean object\n         *\n         * @param elem_id input element id\n         *\n         * @return object\n         */\n        function parseStopWordInputElemId(elem_id) {\n          const info = elem_id.split('_');\n\n          return { id: info[1], lang: info[2] };\n        }\n\n        /**\n         * Handle enter press on a stop word input element\n         *\n         * @param elem_id input element id\n         * @param event\n         *\n         * @return void\n         */\n        function saveStopWordHandleEnter(elem_id, event) {\n          const element = $('#' + elem_id);\n          event = event || window.event || undefined;\n\n          if (undefined !== event) {\n            const key = event.charCode || event.keyCode || 0;\n            if (13 === key) {\n              if ('' === element.val()) {\n                deleteStopWord(elem_id);\n              } else {\n                // this blur action will cause saveStopWord() call\n                element.blur();\n              }\n            }\n          }\n        }\n\n        /**\n         * Save stopword doing an ajax call\n         *\n         * @param elem_id input element id\n         * @return void\n         */\n        function saveStopWord(elem_id) {\n          const info = parseStopWordInputElemId(elem_id);\n          const element = $('#' + elem_id);\n\n          if (element.attr('old_value') !== element.val()) {\n            $.get('index.php', {\n                action: 'ajax',\n                ajax: 'config',\n                ajaxaction: 'save_stop_word',\n                stopword_id: info.id,\n                stopword: element.val(),\n                stopwords_lang: info.lang,\n                csrf: '<?= $user->getCsrfTokenFromSession();\n                ?>',\n              },\n            );\n          } else {\n            if (0 > info.id && '' === element.val()) {\n              element.remove();\n            }\n          }\n        }\n\n        /**\n         * Save the value of the stop word input element.\n         * This is bound on onfocus.\n         *\n         * @param elem_id input element id\n         *\n         * @return void\n         */\n        function saveOldValue(elem_id) {\n          const element = $('#' + elem_id);\n          element.attr('old_value', element.val());\n        }\n\n\n        /**\n         * Handle stop word delete doing an ajax request.\n         *\n         * @param elem_id input element id\n         *\n         * @return void\n         */\n        function deleteStopWord(elem_id) {\n          const info = parseStopWordInputElemId(elem_id);\n          const element = $('#' + elem_id);\n\n          element.fadeOut('slow');\n\n          $.get('index.php', {\n              action: 'ajax',\n              ajax: 'config',\n              ajaxaction: 'delete_stop_word',\n              stopword_id: info.id,\n              stopwords_lang: info.lang,\n              csrf: '<?= $user->getCsrfTokenFromSession() ?>',\n            },\n            function() {\n              loadStopWordsByLang(info.lang);\n            },\n          );\n        }\n\n        /**\n         * Handle stop word add prompting for a new word and doing an ajax request.\n         *\n         * @return void\n         */\n        function addStopWordInputElem() {\n          const word = prompt('<?= $PMF_LANG['ad_config_stopword_input']?>', '');\n          const lang = $('#stopwords_lang_selector').val();\n\n          if (!!word) {\n            $.get('index.php', {\n                action: 'ajax',\n                ajax: 'config',\n                ajaxaction: 'save_stop_word',\n                stopword: word,\n                stopwords_lang: lang,\n                csrf: '<?= $user->getCsrfTokenFromSession() ?>',\n              },\n              function() {\n                loadStopWordsByLang(lang);\n              },\n            );\n          }\n        }\n      </script>\n    </div>\n  </div>\n    <?php\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n", "<?php\n\n/**\n * The main Stopwords class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Anatoliy Belsky\n * @author    Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-01\n */\n\nnamespace phpMyFAQ;\n\n/**\n * Class Stopwords\n *\n * @package phpMyFAQ\n */\nclass Stopwords\n{\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * @var string\n     */\n    private $language;\n\n    /**\n     * Table name.\n     *\n     * @var string\n     */\n    private $tableName;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n        $this->tableName = Database::getTablePrefix() . 'faqstopwords';\n    }\n\n    /**\n     * @return string\n     */\n    public function getLanguage(): string\n    {\n        return $this->language;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTableName(): string\n    {\n        return $this->tableName;\n    }\n\n    /**\n     * @param string $language\n     */\n    public function setLanguage(string $language): void\n    {\n        $this->language = $language;\n    }\n\n    /**\n     * @param string $tableName\n     */\n    public function setTableName(string $tableName): void\n    {\n        $this->tableName = $tableName;\n    }\n\n    /**\n     * Add a word to the stop words dictionary.\n     * If the given word already exists, false is returned.\n     *\n     * @param string $word\n     * @return bool\n     */\n    public function add(string $word): bool\n    {\n        if (!$this->match($word)) {\n            $sql = sprintf(\n                \"INSERT INTO %s VALUES(%d, '%s', '%s')\",\n                $this->tableName,\n                $this->config->getDb()->nextId($this->tableName, 'id'),\n                $this->language,\n                $word\n            );\n            $this->config->getDb()->query($sql);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Update a word in the stop words dictionary.\n     *\n     * @param int    $id\n     * @param string $word\n     * @return bool\n     */\n    public function update(int $id, string $word): bool\n    {\n        $sql = \"UPDATE %s SET stopword = '%s' WHERE id = %d AND lang = '%s'\";\n        $sql = sprintf(\n            $sql,\n            $this->tableName,\n            $word,\n            $id,\n            $this->language\n        );\n\n        return (bool) $this->config->getDb()->query($sql);\n    }\n\n    /**\n     * Remove a word from the stop word dictionary.\n     *\n     * @param int $id\n     * @return bool\n     */\n    public function remove(int $id): bool\n    {\n        $sql = sprintf(\n            \"DELETE FROM %s WHERE id = %d AND lang = '%s'\",\n            $this->tableName,\n            $id,\n            $this->language\n        );\n\n        return (bool) $this->config->getDb()->query($sql);\n    }\n\n    /**\n     * Match a word against the stop words dictionary.\n     *\n     * @param string $word\n     * @return bool\n     */\n    public function match(string $word): bool\n    {\n        $sql = sprintf(\n            \"SELECT id FROM %s WHERE LOWER(stopword) = LOWER('%s') AND lang = '%s'\",\n            $this->tableName,\n            $word,\n            $this->language\n        );\n\n        $result = $this->config->getDb()->query($sql);\n\n        return $this->config->getDb()->numRows($result) > 0;\n    }\n\n    /**\n     * Retrieve all the stop words by a certain language.\n     *\n     * @param string $lang      Language to retrieve stop words by\n     * @param bool   $wordsOnly\n     *\n     * @return string[]\n     */\n    public function getByLang($lang = null, $wordsOnly = false): array\n    {\n        $lang = is_null($lang) ? $this->config->getLanguage()->getLanguage() : $lang;\n        $sql = sprintf(\n            \"SELECT id, lang, LOWER(stopword) AS stopword FROM %s WHERE lang = '%s'\",\n            $this->tableName,\n            $lang\n        );\n\n        $result = $this->config->getDb()->query($sql);\n\n        $stopWords = [];\n\n        if ($wordsOnly) {\n            while (($row = $this->config->getDb()->fetchObject($result)) == true) {\n                $stopWords[] = $row->stopword;\n            }\n        } else {\n            return $this->config->getDb()->fetchAll($result);\n        }\n\n        return $stopWords;\n    }\n\n    /**\n     * Filter some text cutting out all non words and stop words.\n     *\n     * @param string $input text to filter\n     * @return string[]\n     */\n    public function clean(string $input): array\n    {\n        $words = explode(' ', $input);\n        $stop_words = $this->getByLang(null, true);\n        $retval = [];\n\n        foreach ($words as $word) {\n            $word = Strings::strtolower($word);\n            if (\n                !is_numeric($word) && 1 < Strings::strlen($word)\n                && !in_array($word, $stop_words) && !in_array($word, $retval)\n            ) {\n                $retval[] = $word;\n            }\n        }\n\n        return $retval;\n    }\n\n    /**\n     * This function checks the content against a bad word list if the banned\n     * word spam protection has been activated from the general phpMyFAQ\n     * configuration.\n     *\n     * @param string $content\n     * @return bool\n     */\n    public function checkBannedWord(string $content): bool\n    {\n        // Sanity checks\n        $content = Strings::strtolower(trim($content));\n        if (('' === $content) || (!$this->config->get('spam.checkBannedWords'))) {\n            return true;\n        }\n\n        // Check if we check more than one word\n        $checkWords = explode(' ', $content);\n        if (1 === count($checkWords)) {\n            $checkWords = [$content];\n        }\n\n        $bannedWords = $this->getBannedWords();\n        // We just search a match of, at least, one banned word into $content\n        if (is_array($bannedWords)) {\n            foreach ($bannedWords as $bannedWord) {\n                foreach ($checkWords as $word) {\n                    if (Strings::strtolower($word) === Strings::strtolower($bannedWord)) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This function returns the banned words dictionary as an array.\n     *\n     * @return string[]\n     */\n    private function getBannedWords(): array\n    {\n        $bannedTrimmedWords = [];\n        $bannedWordsFile = PMF_SRC_DIR . '/blockedwords.txt';\n        $bannedWords = [];\n\n        // Read the dictionary\n        if (file_exists($bannedWordsFile) && is_readable($bannedWordsFile)) {\n            $bannedWords = file_get_contents($bannedWordsFile);\n        }\n\n        // Trim it\n        foreach (explode(\"\\n\", $bannedWords) as $word) {\n            $bannedTrimmedWords[] = trim($word);\n        }\n\n        return $bannedTrimmedWords;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The main stop words configuration frontend.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Anatoliy Belsky <ab@php.net>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2009-04-01\n */\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n?>\n\n  <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n      <i aria-hidden=\"true\" class=\"fa fa-wrench\"></i>\n        <?= $PMF_LANG['ad_menu_stopwordsconfig'] ?>\n    </h1>\n  </div>\n\n<?php\nif ($user->perm->hasPermission($user->getUserId(), 'editconfig')) {\n    $sortedLanguageCodes = $languageCodes;\n    asort($sortedLanguageCodes);\n    reset($sortedLanguageCodes);\n    ?>\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n\n      <p>\n        <?= $PMF_LANG['ad_stopwords_desc'] ?>\n      </p>\n      <p>\n        <label for=\"stopwords_lang_selector\"><?= $PMF_LANG['ad_entry_locale'] ?>:</label>\n        <select onchange=\"loadStopWordsByLang(this.options[this.selectedIndex].value)\"\n                id=\"stopwords_lang_selector\">\n          <option value=\"none\">---</option>\n            <?php foreach ($sortedLanguageCodes as $key => $value) { ?>\n              <option value=\"<?= strtolower($key) ?>\"><?= $value ?></option>\n            <?php } ?>\n        </select>\n        <span id=\"stopwords_loading_indicator\"></span>\n      </p>\n\n      <div class=\"mb-3\" id=\"stopwords_content\"></div>\n\n      <script>\n\n        /**\n         * column count in the stop words table\n         */\n        const maxCols = 4;\n\n        /**\n         * Load stop words by language, build html and put\n         * it into stop words_content container\n         *\n         * @param lang language to retrieve the stop words by\n         * @return void\n         */\n        function loadStopWordsByLang(lang) {\n          if ('none' === lang) {\n            return;\n          }\n\n          $('#stopwords_loading_indicator').html('<i class=\"fa fa-cog fa-spin fa-fw\"></i><span class=\"sr-only\">Loading...</span>');\n\n          $.get('index.php',\n            { action: 'ajax', ajax: 'config', ajaxaction: 'load_stop_words_by_lang', stopwords_lang: lang },\n            (data) => {\n              $('#stopwords_content').html(buildStopWordsHTML(data));\n              $('#stopwords_loading_indicator').html('<i class=\"fa fa-spell-check\" aria-hidden=\"true\"></i>');\n            },\n            'json',\n          );\n        }\n\n        /**\n         * Build complete html contents to view and edit stop words\n         *\n         * @param data Supposed is stop words json data\n         *\n         * @return string\n         */\n        function buildStopWordsHTML(data) {\n          if ('object' != typeof (data)) {\n            return '';\n          }\n\n          let html = '<table class=\"table table-hover\">';\n          let elem_id;\n          for (let i = 0; i < data.length; i++) {\n\n            if (i % maxCols === 0) {\n              html += '<tr id=\"stopwords_group_' + i + '\">';\n            }\n\n            // id attribute is of the format stopword_<id>_<lang>\n            elem_id = buildStopWordInputElemId(data[i].id, escape(data[i].lang));\n\n            html += '<td>';\n            html += buildStopWordInputElement(elem_id, escape(data[i].stopword));\n            html += '</td>';\n\n            if (i % maxCols === maxCols - 1) {\n              html += '</tr>';\n            }\n          }\n\n          html += '</table>';\n          html += '<a class=\"btn btn-primary\" href=\"javascript: addStopWordInputElem();\"><i aria-hidden=\"true\" class=\"fa fa-plus\"></i> <?= $PMF_LANG['ad_config_stopword_input'] ?></a>';\n\n          return html;\n        }\n\n\n        /**\n         * Build an input element to view and edit stop word\n         *\n         * @param elementId id of the html element\n         * @param stopword\n         *\n         * @return string\n         */\n        function buildStopWordInputElement(elementId, stopword) {\n          elementId = elementId || buildStopWordInputElemId();\n          stopword = stopword || '';\n          const attrs = 'onblur=\"saveStopWord(this.id)\" onkeydown=\"saveStopWordHandleEnter(this.id, event)\" onfocus=\"saveOldValue(this.id)\"';\n          return '<input class=\"form-control form-control-sm\" id=\"' + elementId + '\" value=\"' + escape(stopword) + '\" ' + attrs + '>';\n        }\n\n        /**\n         * Id attribute is of the format stopword_<id>_<lang>\n         *\n         * @param id database id of the word\n         * @param lang\n         *\n         * @return string\n         */\n        function buildStopWordInputElemId(id, lang) {\n          id = id || -1;\n          lang = lang || $('#stopwords_lang_selector').val();\n\n          return 'stopword_' + id + '_' + lang;\n        }\n\n        /**\n         * Parse the stopword element id and return a clean object\n         *\n         * @param elem_id input element id\n         *\n         * @return object\n         */\n        function parseStopWordInputElemId(elem_id) {\n          const info = elem_id.split('_');\n\n          return { id: info[1], lang: info[2] };\n        }\n\n        /**\n         * Handle enter press on a stop word input element\n         *\n         * @param elem_id input element id\n         * @param event\n         *\n         * @return void\n         */\n        function saveStopWordHandleEnter(elem_id, event) {\n          const element = $('#' + elem_id);\n          event = event || window.event || undefined;\n\n          if (undefined !== event) {\n            const key = event.charCode || event.keyCode || 0;\n            if (13 === key) {\n              if ('' === element.val()) {\n                deleteStopWord(elem_id);\n              } else {\n                // this blur action will cause saveStopWord() call\n                element.blur();\n              }\n            }\n          }\n        }\n\n        /**\n         * Save stopword doing an ajax call\n         *\n         * @param elem_id input element id\n         * @return void\n         */\n        function saveStopWord(elem_id) {\n          const info = parseStopWordInputElemId(elem_id);\n          const element = $('#' + elem_id);\n\n          if (element.attr('old_value') !== element.val()) {\n            $.get('index.php', {\n                action: 'ajax',\n                ajax: 'config',\n                ajaxaction: 'save_stop_word',\n                stopword_id: info.id,\n                stopword: element.val(),\n                stopwords_lang: info.lang,\n                csrf: '<?= $user->getCsrfTokenFromSession();\n                ?>',\n              },\n            );\n          } else {\n            if (0 > info.id && '' === element.val()) {\n              element.remove();\n            }\n          }\n        }\n\n        /**\n         * Save the value of the stop word input element.\n         * This is bound on onfocus.\n         *\n         * @param elem_id input element id\n         *\n         * @return void\n         */\n        function saveOldValue(elem_id) {\n          const element = $('#' + elem_id);\n          element.attr('old_value', element.val());\n        }\n\n\n        /**\n         * Handle stop word delete doing an ajax request.\n         *\n         * @param elem_id input element id\n         *\n         * @return void\n         */\n        function deleteStopWord(elem_id) {\n          const info = parseStopWordInputElemId(elem_id);\n          const element = $('#' + elem_id);\n\n          element.fadeOut('slow');\n\n          $.get('index.php', {\n              action: 'ajax',\n              ajax: 'config',\n              ajaxaction: 'delete_stop_word',\n              stopword_id: info.id,\n              stopwords_lang: info.lang,\n              csrf: '<?= $user->getCsrfTokenFromSession() ?>',\n            },\n            function() {\n              loadStopWordsByLang(info.lang);\n            },\n          );\n        }\n\n        /**\n         * Handle stop word add prompting for a new word and doing an ajax request.\n         *\n         * @return void\n         */\n        function addStopWordInputElem() {\n          const word = prompt('<?= $PMF_LANG['ad_config_stopword_input']?>', '');\n          const lang = $('#stopwords_lang_selector').val();\n\n          if (!!word) {\n            $.get('index.php', {\n                action: 'ajax',\n                ajax: 'config',\n                ajaxaction: 'save_stop_word',\n                stopword: word,\n                stopwords_lang: lang,\n                csrf: '<?= $user->getCsrfTokenFromSession() ?>',\n              },\n              function() {\n                loadStopWordsByLang(lang);\n              },\n            );\n          }\n        }\n\n        const escape = (text) => {\n          const map = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#039;',\n          };\n\n          return text.replace(/[&<>\"']/g, (mapped) => {\n            return map[mapped];\n          });\n        };\n\n      </script>\n    </div>\n  </div>\n    <?php\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n", "<?php\n\n/**\n * The main Stopwords class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Anatoliy Belsky\n * @author    Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-01\n */\n\nnamespace phpMyFAQ;\n\n/**\n * Class Stopwords\n *\n * @package phpMyFAQ\n */\nclass Stopwords\n{\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * @var string\n     */\n    private $language;\n\n    /**\n     * Table name.\n     *\n     * @var string\n     */\n    private $tableName;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n        $this->tableName = Database::getTablePrefix() . 'faqstopwords';\n    }\n\n    /**\n     * @return string\n     */\n    public function getLanguage(): string\n    {\n        return $this->language;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTableName(): string\n    {\n        return $this->tableName;\n    }\n\n    /**\n     * @param string $language\n     */\n    public function setLanguage(string $language): void\n    {\n        $this->language = $language;\n    }\n\n    /**\n     * @param string $tableName\n     */\n    public function setTableName(string $tableName): void\n    {\n        $this->tableName = $tableName;\n    }\n\n    /**\n     * Add a word to the stop words dictionary.\n     * If the given word already exists, false is returned.\n     *\n     * @param string $word\n     * @return bool\n     */\n    public function add(string $word): bool\n    {\n        if (!$this->match($word)) {\n            $sql = sprintf(\n                \"INSERT INTO %s VALUES(%d, '%s', '%s')\",\n                $this->tableName,\n                $this->config->getDb()->nextId($this->tableName, 'id'),\n                $this->language,\n                $word\n            );\n            $this->config->getDb()->query($sql);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Update a word in the stop words dictionary.\n     *\n     * @param int    $id\n     * @param string $word\n     * @return bool\n     */\n    public function update(int $id, string $word): bool\n    {\n        $sql = \"UPDATE %s SET stopword = '%s' WHERE id = %d AND lang = '%s'\";\n        $sql = sprintf(\n            $sql,\n            $this->tableName,\n            $word,\n            $id,\n            $this->language\n        );\n\n        return (bool) $this->config->getDb()->query($sql);\n    }\n\n    /**\n     * Remove a word from the stop word dictionary.\n     *\n     * @param int $id\n     * @return bool\n     */\n    public function remove(int $id): bool\n    {\n        $sql = sprintf(\n            \"DELETE FROM %s WHERE id = %d AND lang = '%s'\",\n            $this->tableName,\n            $id,\n            $this->language\n        );\n\n        return (bool) $this->config->getDb()->query($sql);\n    }\n\n    /**\n     * Match a word against the stop words dictionary.\n     *\n     * @param string $word\n     * @return bool\n     */\n    public function match(string $word): bool\n    {\n        $sql = sprintf(\n            \"SELECT id FROM %s WHERE LOWER(stopword) = LOWER('%s') AND lang = '%s'\",\n            $this->tableName,\n            $word,\n            $this->language\n        );\n\n        $result = $this->config->getDb()->query($sql);\n\n        return $this->config->getDb()->numRows($result) > 0;\n    }\n\n    /**\n     * Retrieve all the stop words by a certain language.\n     *\n     * @param string $lang      Language to retrieve stop words by\n     * @param bool   $wordsOnly\n     *\n     * @return string[]\n     */\n    public function getByLang($lang = null, $wordsOnly = false): array\n    {\n        $lang = is_null($lang) ? $this->config->getLanguage()->getLanguage() : $lang;\n        $sql = sprintf(\n            \"SELECT id, lang, LOWER(stopword) AS stopword FROM %s WHERE lang = '%s'\",\n            $this->tableName,\n            $lang\n        );\n\n        $result = $this->config->getDb()->query($sql);\n\n        $stopWords = [];\n\n        if ($wordsOnly) {\n            while (($row = $this->config->getDb()->fetchObject($result)) == true) {\n                $stopWords[] = Strings::htmlentities($row->stopword);\n            }\n        } else {\n            return $this->config->getDb()->fetchAll($result);\n        }\n\n        return $stopWords;\n    }\n\n    /**\n     * Filter some text cutting out all non words and stop words.\n     *\n     * @param string $input text to filter\n     * @return string[]\n     */\n    public function clean(string $input): array\n    {\n        $words = explode(' ', $input);\n        $stop_words = $this->getByLang(null, true);\n        $retval = [];\n\n        foreach ($words as $word) {\n            $word = Strings::strtolower($word);\n            if (\n                !is_numeric($word) && 1 < Strings::strlen($word)\n                && !in_array($word, $stop_words) && !in_array($word, $retval)\n            ) {\n                $retval[] = $word;\n            }\n        }\n\n        return $retval;\n    }\n\n    /**\n     * This function checks the content against a bad word list if the banned\n     * word spam protection has been activated from the general phpMyFAQ\n     * configuration.\n     *\n     * @param string $content\n     * @return bool\n     */\n    public function checkBannedWord(string $content): bool\n    {\n        // Sanity checks\n        $content = Strings::strtolower(trim($content));\n        if (('' === $content) || (!$this->config->get('spam.checkBannedWords'))) {\n            return true;\n        }\n\n        // Check if we check more than one word\n        $checkWords = explode(' ', $content);\n        if (1 === count($checkWords)) {\n            $checkWords = [$content];\n        }\n\n        $bannedWords = $this->getBannedWords();\n        // We just search a match of, at least, one banned word into $content\n        if (is_array($bannedWords)) {\n            foreach ($bannedWords as $bannedWord) {\n                foreach ($checkWords as $word) {\n                    if (Strings::strtolower($word) === Strings::strtolower($bannedWord)) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This function returns the banned words dictionary as an array.\n     *\n     * @return string[]\n     */\n    private function getBannedWords(): array\n    {\n        $bannedTrimmedWords = [];\n        $bannedWordsFile = PMF_SRC_DIR . '/blockedwords.txt';\n        $bannedWords = [];\n\n        // Read the dictionary\n        if (file_exists($bannedWordsFile) && is_readable($bannedWordsFile)) {\n            $bannedWords = file_get_contents($bannedWordsFile);\n        }\n\n        // Trim it\n        foreach (explode(\"\\n\", $bannedWords) as $word) {\n            $bannedTrimmedWords[] = trim($word);\n        }\n\n        return $bannedTrimmedWords;\n    }\n}\n"], "filenames": ["phpmyfaq/admin/stopwords.php", "phpmyfaq/src/phpMyFAQ/Stopwords.php"], "buggy_code_start_loc": [109, 195], "buggy_code_end_loc": [288, 196], "fixing_code_start_loc": [109, 195], "fixing_code_end_loc": [304, 196], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository thorsten/phpmyfaq prior to 3.1.12.", "other": {"cve": {"id": "CVE-2023-1884", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-05T17:15:07.323", "lastModified": "2023-04-11T16:39:18.543", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository thorsten/phpmyfaq prior to 3.1.12."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.12", "matchCriteriaId": "653EC167-06FC-4D30-AAF8-B75F596519AE"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/7f0f921de74c88038826c46bbd2a123518d9d611", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/dda73cb6-9344-4822-97a1-2e31efb6a73e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/7f0f921de74c88038826c46bbd2a123518d9d611"}}