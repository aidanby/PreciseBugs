{"buggy_code": ["<?php\n\n\nnamespace GO\\Files\\Controller;\n\nuse GO\\Base\\Exception\\AccessDenied;\nuse GO\\Base\\Exception\\NotFound;\nuse go\\core\\http\\Client;\nuse go\\core\\http\\Request;\nuse go\\core\\http\\Response;\nuse go\\core\\util\\StringUtil;\nuse GO\\Email\\Model\\Account;\nuse GO\\Files\\Model\\File;\nuse go\\core\\fs\\Blob;\nuse go\\core\\fs\\File as GoFile;\nuse go\\core\\fs\\Folder;\nuse GO\\Email\\Controller\\MessageController;\nuse go\\modules\\community\\history\\Module;\nuse Exception;\n\nclass FileController extends \\GO\\Base\\Controller\\AbstractModelController {\n\n\tprotected $model = 'GO\\Files\\Model\\File';\n\t\n\tprotected function allowGuests() {\n\t\treturn array('download'); //permissions will be checked manually in that action\n\t}\n\t\n\tprotected function ignoreAclPermissions() {\n\t\treturn array('correctquotauser');\n\t}\n\t\n\tprotected function actionTest($params) {\n\n\t\t$md = new \\go\\core\\fs\\MetaData($this);\n\t\t$tag = $md->extractID3(__DIR__.'/test.mp3');\n\t\tvar_dump($tag->toArray());\n\t}\n\tprotected function actionExif(){\n\t\t\n\t\t$md = new \\go\\core\\fs\\MetaData($this);\n\t\t$exif = $md->extractExif(__DIR__.'/test.jpg');\n\t\t\n\t}\n\n\tpublic function actionCreateBlob($ids) {\n\t\t$ids = explode(',', $ids);\n\t\t$blobs = [];\n\t\tforeach($ids as $id) {\n\t\t\t$file = File::model()->findByPk($id);\n\n\t\t\t$fsFile = new GOFile($file->fsFile->path());\n\t\t\t$blob = Blob::fromFile($fsFile);\n\t\t\t$blob->save();\t\t\t\n\n\t\t\t$blobs[] = ['name' => $file->name, 'blobId' => $blob->id];\n\t\t}\n\n\t\treturn array_merge(['success' => true, 'blobs' => $blobs], $blob->toArray());\n\t}\n\t\n\t\n\tprotected function actionExpiredList($params){\n\t\t\t\t\n\t\t$store = \\GO\\Base\\Data\\Store::newInstance(\\GO\\Files\\Model\\File::model());\n\t\t$store->getColumnModel()->formatColumn('path', '$model->path', array(), array('first_name', 'last_name'));\n\n//\t\t$findParams = $store->getDefaultParams($params);\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()->ignoreAcl();\n\n\n\t\t$joinSearchCacheCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t->addRawCondition('`t`.`id`', '`sc`.`entityId`')\n\t\t\t\t\t->addCondition('entityTypeId', \\GO\\Files\\Model\\File::model()->modelTypeId(),'=','sc');\n\n\t\t$findParams->join(\\GO\\Base\\Model\\SearchCacheRecord::model()->tableName(), $joinSearchCacheCriteria, 'sc', 'INNER');\n\n\n\t\t$aclJoinCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t\t\t->addRawCondition('a.aclId', 'sc.aclId','=', false);\n\n\t\t$aclWhereCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t\t->addInCondition(\"groupId\", \\GO\\Base\\Model\\User::getGroupIds(\\GO::user()->id),\"a\", false);\n\n\t\t$findParams->join(\\GO\\Base\\Model\\AclUsersGroups::model()->tableName(), $aclJoinCriteria, 'a', 'INNER');\n\n\t\t$findParams->criteria(\\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t\t\t\t->addModel(\\GO\\Files\\Model\\Folder::model())\n\t\t\t\t\t\t\t\t->mergeWith($aclWhereCriteria));\n\n\t\t$findParams->group(array('t.id'))->order('mtime','DESC');\n\t\t\n\t\t$findParams->getCriteria()->addCondition('content_expire_date', time() ,'<');\n\n\t\t$store->setStatement (\\GO\\Files\\Model\\File::model()->find($findParams));\n\t\t\n\t\t$response = $store->getData();\n\t\t$response['total'] = $store->getTotal();\n\t\t\n\t\treturn $response;\n\t\t\n\t}\n\t\n\t/**\n\t * Will calculate the used diskspace per user\n\t * If no ID is passed diskspace will be recalculated for all user\n\t * @param integer $id id of the user to recalculate used space for\n\t */\n\tprotected function actionRecalculateDiskUsage($id=false) {\n\t\t\n\t\t\\GO::session()->closeWriting();\n\t\t\n\t\t$users = array();\n\t\tif(!empty($id)) {\n\t\t\t$user = \\GO\\Base\\Model\\User::model()->findByPk($id);\n\t\t\tif(!empty($user)) {\n\t\t\t\t$users[] = $user;\n\t\t\t}\n\t\t} else {\n\t\t\t$users = \\GO\\Base\\Model\\User::model()->find();\n\t\t}\n\t\t\n\t\tforeach($users as $user) {\n\t\t\tif($user->calculatedDiskUsage()->save())\n\t\t\t\techo $user->getName() . ' uses ' . $user->disk_usage. \"<br>\\n\";\n\t\t}\n\t}\n\t\n\tprotected function actionCorrectQuotaUser() {\n\t\t$time_start = microtime(true); \n\t\t$count = 0;\n\t\t\n\t\t$userFolder = \\GO\\Files\\Model\\Folder::model()->findByPath('users');\n\t\tforeach($userFolder->folders() as $homeFolder) {\n\t\t\t$homeId = $homeFolder->user_id;\n\t\t\t\n\t\t\t$walkSubfolders = function($folder) use($homeId, &$walkSubfolders, &$count) {\n\t\t\t\t\n\t\t\t\t//echo $folder->path.' -> '.$homeId.'<br />';\n\t\t\t\t$folder->quota_user_id = $homeId;\n\t\t\t\tif(!$folder->save()) {\n\t\t\t\t\tthrow new \\Exception(\"Could not save folder: \".var_export($folder->getValidationErrors(), true));\n\t\t\t\t}\n\n\t\t\t\tforeach($folder->folders() as $subFolder) {\n\t\t\t\t\t$walkSubfolders($subFolder);\t\t\t\t\t\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t};\n\t\t\t$walkSubfolders($homeFolder);\n\t\t}\n\t\t$time_end = microtime(true);\n\t\t$execution_time = ($time_end - $time_start);\n\t\t//echo '<b>'.$count.' Folders updated in:</b> '.$execution_time.' Seconds';\n\t}\n\t\n\tprotected function actionDisplay($params) {\n\t\t\n\t\t//custom fields send path as ID.\n\t\tif(!empty($params['id']) && !is_numeric($params['id'])){\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($params['id']);\n\t\t\t$params['id']=$file->id;\n\t\t}\n\t\t\n\t\treturn parent::actionDisplay($params);\n\t}\n\n\tprivate function isAnimatedGif($filename) {\n\t\tif(!($fh = @fopen($filename, 'rb')))\n\t\t\treturn false;\n\t\t$count = 0;\n\t\t//an animated gif contains multiple \"frames\", with each frame having a\n\t\t//header made up of:\n\t\t// * a static 4-byte sequence (\\x00\\x21\\xF9\\x04)\n\t\t// * 4 variable bytes\n\t\t// * a static 2-byte sequence (\\x00\\x2C)\n\n\t\t// We read through the file til we reach the end of the file, or we've found\n\t\t// at least 2 frame headers\n\t\twhile(!feof($fh) && $count < 2) {\n\t\t\t$chunk = fread($fh, 1024 * 100); //read 100kb at a time\n\t\t\t$count += preg_match_all('#\\x00\\x21\\xF9\\x04.{4}\\x00[\\x2C\\x21]#s', $chunk, $matches);\n\t\t}\n\n\t\tfclose($fh);\n\t\treturn $count > 1;\n\t}\n\t\n\tprotected function afterDisplay(&$response, &$model, &$params) {\n\n\t\t$response['data']['path'] = $model->path;\n\t\t$response['data']['size'] = $model->fsFile->size();\n\t\t$response['data']['extension'] = strtolower($model->fsFile->extension());\n\t\t$response['data']['type'] = \\GO::t($response['data']['extension'], 'base', 'filetypes');\n\t\t\n\t\t$response['data']['locked_user_name']=$model->lockedByUser ? $model->lockedByUser->name : '';\n\t\t$response['data']['locked']=$model->isLocked();\n\t\t$response['data']['unlock_allowed']=$model->unlockAllowed();\n\t\t\n\n\t\tif (!empty($model->random_code) && time() < $model->expire_time) {\n\t\t\t$response['data']['expire_time'] = \\GO\\Base\\Util\\Date::get_timestamp(\\GO\\Base\\Util\\Date::date_add($model->expire_time, -1),false);\n\t\t\t$response['data']['download_link'] = $model->emailDownloadURL;\n\t\t} else {\n\t\t\t$response['data']['expire_time'] = \"\";\n\t\t\t$response['data']['download_link'] = \"\";\n\t\t}\n\t\t\n\t\t$response['data']['url']=\\GO::url('files/file/download',array('id'=>$model->id), false, true);\n\n\t\tif ($model->fsFile->isImage()) {\n\t\t\tif($response['data']['extension'] == 'gif' && $this->isAnimatedGif(\\GO::config()->file_storage_path . $model->path)) {\n\t\t\t\t$response['data']['thumbnail_url'] = $model->getDownloadURL(false);\n\t\t\t} else {\n\t\t\t\t$response['data']['thumbnail_url'] = $model->thumbURL;\n\t\t\t}\n\t\t}else\n\t\t\t$response['data']['thumbnail_url'] = \"\";\n\t\t\n\t\t$response['data']['handler']='startjs:function(){'.$model->getDefaultHandler()->getHandler($model).'}:endjs';\n\t\t\n\t\ttry{\n\t\t\tif(\\GO::modules()->filesearch){\n\t\t\t\t$filesearch = \\GO\\Filesearch\\Model\\Filesearch::model()->findByPk($model->id);\n//\t\t\t\tif(!$filesearch){\n//\t\t\t\t\t$filesearch = \\GO\\Filesearch\\Model\\Filesearch::model()->createFromFile($model);\n//\t\t\t\t}\n\t\t\t\tif($filesearch){\n\t\t\t\t\t$response['data']=array_merge($filesearch->getAttributes('formatted'), $response['data']);\n\t\t\t\t\n\n\t\t\t\t\tif (!empty($params['query_params'])) {\n\t\t\t\t\t\t$qp = json_decode($params['query_params'], true);\n\t\t\t\t\t\tif (isset($qp['content_all'])){\n\n\t\t\t\t\t\t\t$c = new \\GO\\Filesearch\\Controller\\FilesearchController();\n\n\t\t\t\t\t\t\t$response['data']['text'] = $c->highlightSearchParams($qp, $response['data']['text']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else\n\t\t\t\t{\n\t\t\t\t\t$response['data']['text'] = \\GO::t(\"This file has not been indexed yet\", \"filesearch\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(\\Exception $e){\n\t\t\t\\GO::debug((string) $e);\n\t\t\t\n\t\t\t$response['data']['text'] = \"Index out of date. Please rebuild it using the admin tools.\";\n\t\t}\n\n\t\treturn parent::afterDisplay($response, $model, $params);\n\t}\n\n\tprotected function afterLoad(&$response, &$model, &$params) {\n\n\t\t$response['data']['path'] = $model->path;\n\t\t$response['data']['size'] = \\GO\\Base\\Util\\Number::formatSize($model->fsFile->size());\n\t\t$response['data']['extension'] = strtolower($model->fsFile->extension());\n\t\t$response['data']['type'] = \\GO::t($response['data']['extension'], 'base', 'filetypes');\n\t\t\n\t\t$response['data']['name']=$model->fsFile->nameWithoutExtension();\n\t\t\n\t\tif (!empty($model->user))\n\t\t\t$response['data']['username']=$model->user->name;\n\t\tif (!empty($model->mUser))\n\t\t\t$response['data']['musername'] = $model->mUser->name;\n\t\t$response['data']['locked_user_name']=$model->lockedByUser ? $model->lockedByUser->name : '';\n\t\t\n\t\t\n\t\t\n\t\t$fh = \\GO\\Files\\Model\\FileHandler::model()->findByPk(\n\t\t\t\t\t\tarray('extension'=>$model->extension, 'user_id'=>\\GO::user()->id));\n\t\tif($fh){\n\t\t\t$fileHandler = new $fh->cls;\n\t\t\t\n\t\t\t$response['data']['handlerCls']=$fh->cls;\n\t\t\t$response['data']['handlerName']=$fileHandler->getName();\n\t\t}else\n\t\t{\n\t\t\t$response['data']['handlerCls']=\"\";\n\t\t\t$response['data']['handlerName']=\"\";\n\t\t}\n\t\t\n\n\t\treturn parent::afterLoad($response, $model, $params);\n\t}\n\t\n\tprotected function beforeSubmit(&$response, &$model, &$params) {\n\t\t\n\t\tif(isset($params['name'])){\t\t\n\t\t\t$params['name'] = \\GO\\Base\\Fs\\File::stripInvalidChars($params['name']); // Strip invalid chars\n\t\t\tif(isset($params['extension'])) {\n\t\t\t\t$params['name'].='.'.$params['extension'];\n\t\t\t\t$model->extension = $params['extension'];\n\t\t\t} else if(!empty($model->fsFile->extension())) {\n\t\t\t\t$params['name'].='.'.$model->fsFile->extension();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(isset($params['lock'])){\n\t\t\t//GOTA sends lock parameter It does not know the user ID.\n\t\t\t$model->locked_user_id=empty($params['lock']) ? 0 : \\GO::user()->id;\n\t\t}\n\t\t\n\t\t\n\t\t$fh = \\GO\\Files\\Model\\FileHandler::model()->findByPk(array(\n\t\t\t'extension' => strtolower($model->extension), \n\t\t\t'user_id' => \\GO::user()->id\n\t\t));\n\t\t\n\t\tif(!$fh)\n\t\t\t$fh = new \\GO\\Files\\Model\\FileHandler();\n\t\t\n\t\t$fh->extension=strtolower($model->extension);\n\t\t\n\t\tif(isset($params['handlerCls']))\n\t\t\t$fh->cls=$params['handlerCls'];\n\t\t\n\t\tif(empty($params['handlerCls']))\n\t\t\t$fh->delete();\n\t\telse\n\t\t\t$fh->save();\n\t\t\n\t\treturn parent::beforeSubmit($response, $model, $params);\n\t}\n\n\tprotected function actionSaveAttachmentToTmp($params) {\n\n\t\t$tmpFolder = \\GO\\Files\\Model\\Folder::model()->tmpFolder();\n\t\tforeach($tmpFolder->files as $file) {\n\t\t\t//clean up older temp files\n\t\t\tif($file->mtime < strtotime(\"-4 hours\")) {\n\t\t\t\t$file->delete(true);\n\t\t\t}\n\t\t}\n\n\t\t$params['filename'] = \\GO\\Base\\Fs\\File::stripInvalidChars($params['filename']);\n\t\t$file = new \\GO\\Base\\Fs\\File(\\GO::config()->file_storage_path . $tmpFolder->path.'/'.$params['filename']);\n\t\t$file->parent()->create();\n\n\t\tif(empty($params['tmp_file'])){\n\t\t\t$account = Account::model()->findByPk($params['account_id']);\n\t\t\t$imap = $account->openImapConnection($params['mailbox']);\n\t\t\tif(!$imap->save_to_file($params['uid'], $file->path(), $params['number'], $params['encoding'])) {\n\t\t\t\tthrow new Exception(\"Could not save file from IMAP\");\n\t\t\t}\n\t\t}else\n\t\t{\n\t\t\t$tmpfile = new \\GO\\Base\\Fs\\File(\\GO::config()->tmpdir.$params['tmp_file']);\n\t\t\t$file = $tmpfile->copy($file->parent(), $file->name());\n\t\t\tif(!$file) {\n\t\t\t\tthrow new Exception(\"IO error\");\n\t\t\t}\n\t\t}\n\t\t$maxLength = go()->getDatabase()->getTable(\"fs_files\")->getColumn(\"name\")->length;\n\t\t$file->shortenFileName($maxLength);\n\n\t\t$dbFile = $tmpFolder->hasFile($file->name());\n\t\tif($dbFile) {\n\t\t\tFile::$deleteInDatabaseOnly = true;\n\t\t\t$dbFile->delete();\n\t\t}\n\t\t$dbFile = $tmpFolder->addFile($file->name(), true);\n\n\t\treturn ['success' => true, 'data' => $dbFile->getAttributes()];\n\t}\n\t\n\tprotected function actionHandlers($params){\n\t\tif(!empty($params['path'])){\n\t\t\t$folder = \\GO\\Files\\Model\\Folder::model()->findByPath(dirname($params['path']));\n\t\t\t$file = $folder->hasFile(\\GO\\Base\\Fs\\File::utf8Basename($params['path']));\n\t\t}else\n\t\t{\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($params['id'], false, true);\n\t\t}\n\n\t\tif(empty($params['all'])){\n\t\t\t$fileHandlers = array($file->getDefaultHandler());\n\t\t}else\n\t\t{\n\t\t\t$fileHandlers = $file->getHandlers();\n\t\t}\n//\tvar_dump($fileHandlers);\n\t\t\n\t\t$store = new \\GO\\Base\\Data\\ArrayStore();\n\t\t\n\t\tforeach($fileHandlers as $fileHandler){\t\n\t\t\t$store->addRecord(array(\n\t\t\t\t\t'name'=>$fileHandler->getName(),\n\t\t\t\t\t'handler'=>$fileHandler->getHandler($file),\n\t\t\t\t\t'iconCls'=>$fileHandler->getIconCls(),\n\t\t\t\t\t'cls'=>  get_class($fileHandler),\n\t\t\t\t\t'extension'=>$file->extension\n\t\t\t));\t\n\t\t}\t\n\t\t\n\t\treturn $store->getData();\t\t\n\t}\n\t\n\tprotected function actionSaveHandler($params){\n//\t\t\\GO::config()->save_setting('fh_'.$, $value)\n\t\t\n\t\t$fh = \\GO\\Files\\Model\\FileHandler::model()->findByPk(\n\t\t\t\t\t\tarray('extension'=>strtolower($params['extension']), 'user_id'=>\\GO::user()->id));\n\t\t\n\t\tif(!$fh)\n\t\t\t$fh = new \\GO\\Files\\Model\\FileHandler();\n\t\t\n\t\t$fh->extension=strtolower($params['extension']);\n\t\t$fh->cls=$params['cls'];\n\t\treturn array('success'=>empty($params['cls']) ? $fh->delete() : $fh->save());\n\t}\n\t\n\t\n\tprotected function actionOpen($params) {\n\t\tif(!empty($params['path'])) {\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($params['path']);\n\t\t} else\n\t\t{\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($params['id']);\n\t\t}\n\n\t\tif(!$file){\n\t\t\tthrow new \\Exception(\"File not found\");\n\t\t}\n\t\t\n\t\t$response = [\n\t\t\t\t'success' => true,\n\t\t\t\t'file' => $file->getAttributes(),\n\t\t\t\t'handler' => 'startjs:function(){'.$file->getDefaultHandler()->getHandler($file).'}:endjs'\n\t\t];\n\t\t\n\t\treturn $response;\n\t}\n\t\n\n\tprotected function actionDownload($params) {\n\n\t\t\\GO::session()->closeWriting();\n\t\t\n\t\t\\GO::setMaxExecutionTime(0);\n\n\t\ttry {\n\t\t\tif (isset($params['path'])) {\n\t\t\t\t$folder = \\GO\\Files\\Model\\Folder::model()->findByPath(dirname($params['path']));\n\t\t\t\tif (!$folder) {\n\t\t\t\t\tthrow new NotFound($params['path']);\n\t\t\t\t}\n\t\t\t\t$file = $folder->hasFile(\\GO\\Base\\Fs\\File::utf8Basename($params['path']));\n\t\t\t} else {\n\t\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($params['id'], false, true);\n\t\t\t}\n\n\t\t\tif (!$file)\n\t\t\t\tthrow new \\GO\\Base\\Exception\\NotFound();\n\n\t\t\tif (!empty($params['random_code'])) {\n\t\t\t\tif ($file->random_code != $params['random_code'])\n\t\t\t\t\tthrow new \\GO\\Base\\Exception\\NotFound();\n\n\t\t\t\tif (time() > $file->expire_time)\n\t\t\t\t\tthrow new \\Exception(\\GO::t(\"Sorry, the download link for this file has expired\", \"files\"));\n\t\t\t} else {\n\t\t\t\t$public = substr($file->path, 0, 6) == 'public';\n\n\t\t\t\tif (!$public) {\n\t\t\t\t\tif (!\\GO::user() || !$file->checkPermissionLevel(\\GO\\Base\\Model\\Acl::READ_PERMISSION)) {\n\t\t\t\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$ua_info = \\donatj\\UserAgent\\parse_user_agent();\n\t\t\tif($ua_info['browser'] == 'Safari' && $file->extension == 'webm' && !strstr(Request::get()->getUri(), 'webm')) {\n\t\t\t\t//workaround webm bug in safari that needs a webm extension :(\n\t\t\t\theader(\"Location: \" . str_replace('index.php?', 'index.php/' . rawurlencode($file->name) . '?', Request::get()->getFullUrl()));\n\t\t\t\texit();\n\t\t\t}\n\n\n\t\t\t// Show the file inside the browser or give it as a download\n\t\t\t$inline = true; // Defaults to show inside the browser\n\t\t\tif (isset($params['inline']) && ((bool)$params['inline'] === false || $params['inline'] == 'false')) {\n\t\t\t\t$inline = false;\n\t\t\t}\n\n//\t\t\t\\GO\\Base\\Util\\Http::outputDownloadHeaders($file->fsFile, $inline, !empty($params['cache']));\n\t\t\t$file->open();\n\n\t\t\t$this->fireEvent('beforedownload', array(\n\t\t\t\t&$this,\n\t\t\t\t&$params,\n\t\t\t\t&$file\n\t\t\t));\n\n\t\t\tif(\\go\\core\\model\\Module::isInstalled('community', 'history')) {\n\t\t\t\tModule::logActiveRecord($file, 'download');\n\t\t\t}\n\n\t\t\t//Supports range download\n\t\t\t$coreFsFile = new \\go\\core\\fs\\File($file->fsFile->path());\n\n\t\t\t// prevent html to render on same domain having access to all global JS stuff\n\t\t\tif($coreFsFile->getContentType() == 'text/html') {\n\t\t\t\t$inline = false;\n\t\t\t}\n\n\t\t\t$coreFsFile->output(true, !array_key_exists('cache', $params) || !empty($params['cache']), [], $inline);\n\n\t\t}catch(NotFound $e) {\n\t\t\tResponse::get()->setStatus(404);\n\n\t\t\techo $e->getMessage();\n\n\t\t}catch (AccessDenied $e) {\n\t\t\tResponse::get()->setStatus(403);\n\n\t\t\techo $e->getMessage();\n\n\t\t}catch(\\Throwable $e) {\n\t\t\tResponse::get()->setStatus(500);\n\n\t\t\techo $e->getMessage();\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param type $params \n\t * @todo\n\t */\n\tprotected function actionCreateDownloadLink($params){\n\t\t\n\t\t$response=array();\n\t\t\n\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($params['id']);\n\t\t\n\t\t$url = $file->getEmailDownloadURL(true,\\GO\\Base\\Util\\Date::date_add($params['expire_time'],1),$params['delete_when_expired']);\n\t\t\n\t\t$response['url']=$url;\n\t\t$response['success']=true;\n\t\t\n\t\treturn $response;\n\t\t\n\t}\t\n\t\n\t/**\n\t * This action will generate multiple Email Download link and return a JSON\n\t * response with the generated links in the email subject\n\t * @param array $params\n\t * - string ids: json encode file ids to mail\n\t * - timestamp expire_time: chosen email link expire time \n\t * - int template_id: id of used template\n\t * - int alias_id: id of alias to mail from\n\t * - string content_type : html | plain  \n\t * @return StringHelper Json response\n\t */\n\tprotected function actionEmailDownloadLink($params){\n\t\t$msgController = new MessageController();\n\t\t$templateContent = $msgController->loadTemplate($params);\n\t\t$files = \\GO\\Files\\Model\\File::model()->findByAttribute('id', json_decode($params['ids']));\n\t\t\n\t\t$html=$params['content_type']=='html';\n\t\t$bodyindex = $html ? 'htmlbody' : 'plainbody';\n\t\t$lb = $html ? '<br />' : \"\\n\";\n\n\t\t$text = $html ? \\GO::t(\"Click on the link to download the file\", \"files\") : \\GO::t(\"Click the secured link below or copy it to your browser's address bar to download the file.\", \"files\");\n\t\t$linktext = $html ? \"<ul>\" : $lb;\n\t\t\n\t\tforeach($files as $file) {\n\t\t\t$url = $file->getEmailDownloadURL($html,\\GO\\Base\\Util\\Date::date_add($params['expire_time'],1),$params['delete_when_expired']);\n\t\t\t$linktext .= $html ?  '<li><a href=\"'.$url.'\">'.$file->name.'</a></li>'.$lb : $url.$lb;\n\t\t}\n\t\t$linktext .= $html ? \"</ul>\" : \"\\n\";\n\t\t$text .= ' ('.\\GO::t(\"possible until\", \"files\").' '.\\GO\\Base\\Util\\Date::get_timestamp(\\GO\\Base\\Util\\Date::date_add($file->expire_time,-1), false).')'.$lb;\n\t\t$text .= $linktext;\n\n\t\t$params['body']= $text;\n\n    $msgController = new MessageController();\n    $response = $msgController->loadTemplate($params);\n\n//\t\t$response['data'][$bodyindex]=$text;\n\t\t\t\t\n\t\t$response['data']['subject'] = \\GO::t(\"Download link\", \"files\"); //.' '.$file->name;\n\t\t$response['success']=true;\n\t\t\n\t\treturn $response;\n\t}\n\t\n\t\n\tpublic function actionRecent($params){\n\t\t\n\t\t$start = !empty($params['start']) ? $params['start'] : 0;\n\t\t$limit = !empty($params['limit']) ? $params['limit'] : 20;\n\t\t\n\t\t$store = \\GO\\Base\\Data\\Store::newInstance(\\GO\\Files\\Model\\File::model());\n\n\t\t$store->getColumnModel()->formatColumn('path', '$model->path', array(), array('first_name', 'last_name'));\n\t\t$store->getColumnModel()->formatColumn('weekday', '$fullDays[date(\"w\", $model->mtime)].\" \".\\GO\\Base\\Util\\Date::get_timestamp($model->mtime, false);', array('fullDays'=>\\GO::t(\"full_days\")),array('first_name', 'last_name'));\n\t\t\n\t\t$store->setStatement(\\GO\\Files\\Model\\File::model()->findRecent($start,$limit));\n\n\t\t$response = $store->getData();\n\t\t\n\t\t$store->setStatement(\\GO\\Files\\Model\\File::model()->findRecent());\n\t\t$response['total'] = $store->getTotal();\n\t\t\n\t\treturn $response;\n\t}\n\t\n\tpublic function actionCleanup() {\n\t\t\n\t\t$cleanupRoot = \\GO::config()->file_storage_path.'cleanup/';\n\t\t\n\t\t\\GO\\Files\\Model\\File::$deleteInDatabaseOnly = true;\n\t\t\t\t\t\t\n\t\t\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance();\n\t\t\n\t\t\n\t\t$findCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()->addRawCondition(\"t.name REGEXP '^.+ \\\\\\([0-9]+\\\\\\)\\\\\\..+'\");\n\t\t$findParams->criteria($findCriteria);\n\t\t$stmt = \\GO\\Files\\Model\\File::model()->find($findParams);\n\t\t\n\t\tforeach ($stmt as $copySubfixFile) {\n\t\t\t\n\t\t\t\n\t\t\t$name = preg_replace('/(\\w+) (\\\\([0-9]+\\)).(\\w+)/i', '${1}.$3', $copySubfixFile->name);\n\t\t\t\n\t\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance();\n\t\t\t$findCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()->addCondition('name', $name)->addCondition('folder_id', $copySubfixFile->folder_id);\n\t\t\t$findParams->criteria($findCriteria);\n\t\t\t$stmt2 = \\GO\\Files\\Model\\File::model()->find($findParams);\n\t\t\t\n\t\t\tforeach ($stmt2 as $file) {\n\t\t\t\t\n\t\t\t\tif($file->fsFile->md5Hash() == $copySubfixFile->fsFile->md5Hash()) {\n\t\t\t\t\techo $copySubfixFile->path . ' ## ' . $copySubfixFile->folder_id. \"<br/>\";\n\t\t\t\t\t\n\t\t\t\t\t$cleanupPath = $cleanupRoot.$copySubfixFile->folder->getFullPath(); //projects2/Projectnaam/bestand (1).jpg\n\t\t\t\t\t\n\t\t\t\t\t$folderTo = new \\GO\\Base\\Fs\\Folder($cleanupPath);\n\t\t\t\t\t$folderTo->create();\n\t\t\t\t\t\n\t\t\t\t\tif($folderTo->exists()) {\n\t\t\t\t\t\tif(!$copySubfixFile->fsFile->move($folderTo)) {\n\t\t\t\t\t\t\tthrow new Exception('file move error from: '. $copySubfixFile->path . ' to '. $folderTo->getFullPath());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$copySubfixFile->delete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Exception('Folder do not exists: '.$cleanupPath);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * @param $params\n\t * @throws AccessDenied\n\t * @throws \\go\\core\\exception\\NotFound\n\t */\n\tpublic function actionConvert($params)\n\t{\n\t\t$fileId = !empty($params['id']) ? $params['id'] : 0;\n\t\t$format = !empty($params['format']) ? $params['format'] : 'pdf';\n\n\t\t//check if file exists\n\t\t$fileRecord = \\GO\\Files\\Model\\File::model()->findByPk($fileId);\n\t\tif (!$fileRecord) {\n\t\t\tthrow new \\go\\core\\exception\\NotFound();\n\t\t}\n\n\t\t//check user permissions\n\t\tif (!\\GO::user() || !$fileRecord->checkPermissionLevel(\\GO\\Base\\Model\\Acl::READ_PERMISSION)) {\n\t\t\tthrow new AccessDenied();\n\t\t}\n\n\t\t$nameWithoutExtension = $fileRecord->fsFile->nameWithoutExtension();\n\t\t$outputFileName = $nameWithoutExtension . '.' . $format;\n\n\t\t//create temporary file\n\t\t$tmpFile = \\GO\\Base\\Fs\\File::tempFile();\n\n\t\t//convert file -> put output to temporary\n\t\t$fileRecord->convertTo($tmpFile, $format);\n\n\t\t$outputFileRecord = $fileRecord->folder->addFilesystemFile($tmpFile, true, $outputFileName);\n\t\tif (!$outputFileRecord) {\n\t\t\tthrow new Exception('File move error from: '. $tmpFile->path() . ' to '. $fileRecord->folder->getFullPath());\n\t\t}\n\n\t\t$response['file'] = $outputFileRecord->getAttributes();\n\t\t$response['success'] = true;\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * @param $params\n\t * @throws AccessDenied\n\t * @throws \\go\\core\\exception\\NotFound\n\t */\n\tpublic function actionConvertAndDownload($params)\n\t{\n\t\t$fileId = !empty($params['id']) ? $params['id'] : 0;\n\t\t$format = !empty($params['format']) ? $params['format'] : 'pdf';\n\n\t\t//check if file exists\n\t\t$fileRecord = \\GO\\Files\\Model\\File::model()->findByPk($fileId);\n\t\tif (!$fileRecord) {\n\t\t\tthrow new \\go\\core\\exception\\NotFound();\n\t\t}\n\n\t\t//check user permissions\n\t\tif (!\\GO::user() || !$fileRecord->checkPermissionLevel(\\GO\\Base\\Model\\Acl::READ_PERMISSION)) {\n\t\t\tthrow new AccessDenied();\n\t\t}\n\n\t\t//create temporary file\n\t\t$tmpFile = \\GO\\Base\\Fs\\File::tempFile();\n\n\t\t//convert file -> put output to temporary\n\t\t$fileRecord->convertTo($tmpFile, $format);\n\n\t\t//get pdf file name\n\t\t$nameWithoutExtension = $fileRecord->fsFile->nameWithoutExtension();\n\t\t$outputFileName = $nameWithoutExtension . '.' . $format;\n\n\t\t//override previous headers because tempoary\n\t\t$extraHeaders = [\n\t\t\t'Content-Disposition' => 'inline; filename=\"' . $outputFileName . '\"',\n\t\t];\n\n\t\t//download\n\t\t\\GO\\Base\\Util\\Http::outputDownloadHeaders($tmpFile, true, !empty($params['cache']), $extraHeaders);\n\t\t$tmpFile->output();\n\t}\n}\n\n", "<?php\n\n\nnamespace GO\\Files\\Controller;\n\nuse Exception;\nuse GO;\nuse GO\\Base\\Db\\FindCriteria;\nuse GO\\Base\\Exception\\AccessDenied;\nuse go\\core\\fs\\Blob;\nuse go\\core\\jmap\\Entity;\nuse go\\core\\model\\Alert as CoreAlert;\nuse go\\core\\orm\\SearchableTrait;\nuse go\\core\\orm\\EntityType;\nuse go\\core\\util\\StringUtil;\nuse GO\\Files\\Model\\Folder;\n\nclass FolderController extends \\GO\\Base\\Controller\\AbstractModelController {\n\n\tprotected $model = 'GO\\Files\\Model\\Folder';\n\t\n\t\n\n\tprotected function allowGuests() {\n\t\tif($this->isCli())\n\t\t\treturn array('syncfilesystem', 'removeempty');\n\t\telse\n\t\t\treturn parent::allowGuests();\n\t}\n\n  protected function allowWithoutModuleAccess() {\n    return ['images'];\n  }\n\n\n\tpublic function actionRemoveEmpty() {\n\n\t\t\\GO\\Base\\Fs\\File::setAllowDeletes(false);\n\t\tGO::session()->runAsRoot();\n\n\t\t// Speed things up.\n\t\tEntity::$trackChanges = false;\n\t\t\\go\\modules\\community\\history\\Module::$enabled = false;\n\n\t\t$count = $total = $this->removeEmpty();\n\t\twhile($count != 0) {\n\t\t\t$count = $this->removeEmpty();\n\t\t\t$total += $count;\n\t\t}\n\n\t\techo \"Removed \" . $count .\" empty folders\\n\";\n\n\t}\n\n\tprivate function removeEmpty() {\n\t\t$ids = go()->getDbConnection()->query(\"select id FROM fs_folders f\n    where not exists(\n            select * from fs_folders sub where sub.parent_id=f.id\n        ) and\n        not exists(\n                select * from fs_files fi where fi.folder_id=f.id\n            )\")->fetchAll(\\PDO::FETCH_COLUMN);\n\n\t\tif(empty($ids)) {\n\t\t\techo \"Nothing empty\\n\";\n\t\t\treturn;\n\t\t}\n\n\t\t$count = 0;\n\t\t$folders = Folder::model()->findByAttribute('id', $ids);\n\t\tforeach($folders as $folder) {\n\n\t\t\tif($folder->hasFolderChildren() || $folder->hasFileChildren()) {\n\t\t\t\t//should never happen\n\t\t\t\tvar_dump($folder->getAttributes());\n\t\t\t\tthrow new \\Exception(\"FOlder has children!\");\n\t\t\t}\n\t\t\t$folder->readonly= true;//prevent acl delete\n\t\t\techo \".\";\n\t\t\t$folder->delete(true);\n\t\t\t$count++;\n\t\t}\n\n\t\techo \"\\n\";\n\n\t\treturn $count;\n\t}\n\n\tprotected function actionGetURL($path){\n\t\t\n\t\tif (substr($path,0,1)=='/')\n\t\t\t$path = substr($path,1);\n\t\tif (substr($path,-1,1)=='/')\n\t\t\t$path = substr($path,0,-1);\n\t\t\n\t\t$folderModel = Folder::model()->findByPath($path,true);\n\t\t\n\t\treturn array('success'=>true,'url'=>  \\GO\\Base\\Util\\Http::addParamsToUrl($folderModel->getExternalURL(),array('GOSID'=>session_id(), 'security_token'=>\\GO::session()->values['security_token'])));\n\t}\n\t\n\tprotected function actionCache($params){\n\t\t\\GO\\Files\\Model\\SharedRootFolder::model()->rebuildCache(\\GO::user()->id);\n\t}\n\n\tprotected function actionSyncFilesystem($params){\t\n\t\t\n\t\tif(!$this->isCli() && !\\GO::user()->isAdmin())\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\t\t\n\t\t$oldAllowDeletes = \\GO\\Base\\Fs\\File::setAllowDeletes(false);\n\n\t\t\\GO::$disableModelCache=true; //for less memory usage\n\t\t//disable history logging\n\t\tini_set('max_execution_time', '0');\n\n\t\t\\GO::session()->runAsRoot();\n\n\t\tif(isset($params['path'])){\n\t\t\t$folders = array($params['path']);\n\t\t}else\n\t\t{\n//\t\t\t$folders = array('users','projects2','addressbook','notes','tickets', 'calendar', 'tasks', 'projects', 'log');\n\n\t\t\t$folders = go()->getDbConnection()->selectSingleValue('name')\n\t\t\t\t->from('fs_folders')\n\t\t\t\t->where('(parent_id=0 OR parent_id is null) and name != \"billing\" and name != \"email\"')\n\t\t\t\t->all();\n\n\t\t\t$billingFolder = new \\GO\\Base\\Fs\\Folder(\\GO::config()->file_storage_path.'billing');\n\t\t\tif($billingFolder->exists()){\n\t\t\t\t$bFolders = $billingFolder->ls();\n\n\t\t\t\tforeach($bFolders as $folder){\t\t\n\t\t\t\t\t\tif($folder->isFolder() && $folder->name()!='notifications'){\n\t\t\t\t\t\t\t$folders[]='billing/'.$folder->name();\n\t\t\t\t\t\t}\n\t\t\t\t}\t\t\n\t\t\t}\n\t\t}\n\n\t\techo \"<pre>\";\n\t\tforeach($folders as $name){\n\t\t\techo \"Syncing \".$name.\"\\n\";\n\t\t\ttry{\n\t\t\t\t$folder = Folder::model()->findByPath($name, true);\n\t\t\t\t\n\t\t\t\tif(!$folder)\n\t\t\t\t\tthrow new \\Exception(\"Could not find or create folder\");\n\t\t\t\t\n\t\t\t\t$folder->syncFilesystem(true);\n\t\t\t\t\n\t\t\t\tEntityType::push();\n\t\t\t}\n\t\t\tcatch(\\Exception $e){\n\t\t\t\tif (PHP_SAPI != 'cli')\n\t\t\t\t\techo \"<span style='color:red;'>\".$e->getMessage().\"</span>\\n\";\n\t\t\t\telse\n\t\t\t\t\techo $e->getMessage().\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\techo \"Done\\n\";\n\n\n\t\tif(!isset($params['path'])){\n\t\t\t\\GO\\Base\\Fs\\File::setAllowDeletes($oldAllowDeletes);\n\t\t\t$folders = array('email', 'billing/notifications');\n\n\t\t\tforeach($folders as $name){\n\n\t\t\t\techo \"Deleting \".$name.\"\\n\";\n\t\t\t\tFolder::$deleteInDatabaseOnly=true;\n\t\t\t\t\\GO\\Files\\Model\\File::$deleteInDatabaseOnly=true;\n\t\t\t\ttry{\n\t\t\t\t\t$folder = Folder::model()->findByPath($name);\n\t\t\t\t\tif($folder)\n\t\t\t\t\t\t\t$folder->delete();\n\n\t\t\t\t\tEntityType::push();\n\t\t\t\t}\n\t\t\t\tcatch(\\Exception $e){\n\t\t\t\t\tif (PHP_SAPI != 'cli')\n\t\t\t\t\t\techo \"<span style='color:red;'>\".$e->getMessage().\"</span>\\n\";\n\t\t\t\t\telse\n\t\t\t\t\t\techo $e->getMessage().\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic function actionDeleteInvalid(){\n\t\t$folders = array('email', 'billing/notifications');\n\n\t\tforeach($folders as $name){\n\n\t\t\techo \"Deleting \".$name.\"\\n\";\n\t\t\tFolder::$deleteInDatabaseOnly=true;\n\t\t\t\\GO\\Files\\Model\\File::$deleteInDatabaseOnly=true;\n\t\t\ttry{\n\t\t\t\t$folder = Folder::model()->findByPath($name);\n\t\t\t\tif($folder)\n\t\t\t\t\t\t$folder->delete();\n\t\t\t}\n\t\t\tcatch(\\Exception $e){\n\t\t\t\tif (PHP_SAPI != 'cli')\n\t\t\t\t\techo \"<span style='color:red;'>\".$e->getMessage().\"</span>\\n\";\n\t\t\t\telse\n\t\t\t\t\techo $e->getMessage().\"\\n\";\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance();\n\n\t\t$findParams->getCriteria()->addCondition('parent_id', null,'IS');\n\n\t\t$stmt = Folder::model()->find($findParams);\n\n\t\tforeach($stmt as $folder){\n\n\t\t\tif(!$folder->fsFolder->exists()){\n\n\t\t\t\techo \"Deleting \".$folder->path.\"\\n\";\n\t\t\t\t$folder->delete();\n\t\t\t}\n\n\t\t}\t\n\t}\n\n\tprivate function _getExpandFolderIds($params){\n\t\t$expandFolderIds=array();\n\t\tif(!empty($params['expand_folder_id']) && $params['expand_folder_id']!='shared') {\n\t\t\t$expandFolderIds=  Folder::model()->getFolderIdsInPath($params['expand_folder_id']);\n\t\t}\n\t\treturn $expandFolderIds;\n\t}\n\n\tprivate function _buildSharedTree($expandFolderIds){\n\t\t\n\t\t\n\t\t\\GO\\Files\\Model\\SharedRootFolder::model()->rebuildCache(\\GO::user()->id);\n\t\t\n\t\t$response=array();\n\t\t\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t->joinRelation('sharedRootFolders')\n\t\t\t\t\t\t->ignoreAcl()\n\t\t\t\t\t\t->order('name','ASC')\n\t\t\t\t\t\t->limit(500);\n\t\t\n\t\t$findParams->getCriteria()\n\t\t\t\t\t->addCondition('user_id', \\GO::user()->id,'=','sharedRootFolders');\n\t\t\n\t\t\n\t\t\n\t\t$shares = Folder::model()->find($findParams);\n\t\tforeach($shares as $folder){\n\t\t\t$node = $this->_folderToNode($folder, $expandFolderIds, false);\n\t\t\t$node['path'] = $folder->path;\n\t\t\t$response[]=$node;\n\t\t}\n\n\t\treturn $response;\n\n\t}\n\n\n\tprotected function actionTree($params) {\n\n\t\t//refresh forces sync with db\n\t\tif(!empty($params['sync_folder_id'])){\n\t\t\tif($params['sync_folder_id']==\"shared\"){\n\t\t\t\t\\GO\\Files\\Model\\SharedRootFolder::model()->rebuildCache(\\GO::user()->id, true);\n\t\t\t}else\n\t\t\t{\n\t\t\t\tif(empty(GO::config()->files_disable_filesystem_sync)){\n\t\t\t\t\t$syncFolder = Folder::model()->findByPk($params['sync_folder_id']);\n\t\t\t\t\tif($syncFolder)\n\t\t\t\t\t\t$syncFolder->syncFilesystem();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$response = array();\n\n\t\t$expandFolderIds = $this->_getExpandFolderIds($params);\n\n\t\t$showFiles = isset($params['showFiles']);\n\n\t\tswitch ($params['node']) {\n\t\t\tcase 'shared':\n\t\t\t\t$response=$this->_buildSharedTree($expandFolderIds);\n\t\t\t\tbreak;\n\t\t\tcase 'root':\n\t\t\t\tif (!empty($params['root_folder_id'])) {\n\t\t\t\t\t$folder = Folder::model()->findByPk($params['root_folder_id']);\n//\t\t\t\t\t$folder->checkFsSync();\n\t\t\t\t\t$node = $this->_folderToNode($folder, $expandFolderIds, true, $showFiles);\n\t\t\t\t\t$response[] = $node;\n\t\t\t\t} else {\n\t\t\t\t\t$folder = Folder::model()->findHomeFolder(\\GO::user());\n\n//\t\t\t\t\t$folder->checkFsSync();\n\n\t\t\t\t\t$node = $this->_folderToNode($folder, $expandFolderIds, true, $showFiles);\n\t\t\t\t\t$node['text'] = \\GO::t(\"Personal\", \"files\");\n\t\t\t\t\t$node['iconCls'] = 'ic-home';\n\t\t\t\t\t$node['path'] = $folder->path;\n\t\t\t\t\t$response[] = $node;\n\n\n\t\t\t\t\t$node = array(\n\t\t\t\t\t\t\t'text' => \\GO::t(\"Shared\", \"files\"),\n\t\t\t\t\t\t\t'id' => 'shared',\n\t\t\t\t\t\t\t'readonly' => true,\n\t\t\t\t\t\t\t'draggable' => false,\n\t\t\t\t\t\t\t'allowDrop' => false,\n\t\t\t\t\t\t\t'parent_id'=>0,\n\t\t\t\t\t\t\t'iconCls' => 'ic-folder-shared',\n\t\t\t\t\t\t\t'path'=>\"shared\"\t\t\t\t\t\t\t\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\t//expand shares for non admins only. Admin may see too many folders.\n\t\t\t\t\tif(!\\GO::user()->isAdmin()){\n\t\t\t\t\t\t$node['expanded']=true;\n\t\t\t\t\t\t$node['children']=$this->_buildSharedTree($expandFolderIds);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$response[] = $node;\n\n\t\t\t\t\tif (GO::config()->files_show_addressbooks && GO::modules()->addressbook) {\n\t\t\t\t\t\t$contactsFolder = Folder::model()->findByPath('addressbook');\n\n\t\t\t\t\t\tif ($contactsFolder) {\n\t\t\t\t\t\t\t$node = $this->_folderToNode($contactsFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t\t$node['path'] = $contactsFolder->path;\n\t\t\t\t\t\t\t$node['text'] = \\GO::t(\"Address book\", \"addressbook\");\n\t\t\t\t\t\t\t$response[] = $node;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (GO::config()->files_show_projects && GO::modules()->projects) {\n\t\t\t\t\t\t$projectsFolder =  Folder::model()->findByPath('projects');\n\n\t\t\t\t\t\tif ($projectsFolder) {\n\t\t\t\t\t\t\t$node = $this->_folderToNode($projectsFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t\t$node['path'] = $projectsFolder->path;\n\t\t\t\t\t\t\t$node['text'] = \\GO::t(\"projects\", \"projects\");\n\t\t\t\t\t\t\t$response[] = $node;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\tif (GO::config()->files_show_projects && GO::modules()->projects2) {\n\t\t\t\t\t\t$projectsFolder = Folder::model()->findByPath('projects2');\n\n\t\t\t\t\t\tif ($projectsFolder) {\n\t\t\t\t\t\t\t$node = $this->_folderToNode($projectsFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t\t\t$node['path'] = $projectsFolder->path;\n\t\t\t\t\t\t\t$node['text'] = \\GO::t(\"Projects\", \"projects2\");\n\t\t\t\t\t\t\t$response[] = $node;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(\\GO::user()->isAdmin()){\n\t\t\t\t\t\t$logFolder = Folder::model()->findByPath('log', true);\n//\t\t\t\t\t\t$logFolder->syncFilesystem();\n\t\t\t\t\t\t\n\t\t\t\t\t\t$node = $this->_folderToNode($logFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t$node['path'] = $logFolder->path;\n\t\t\t\t\t\t$node['text']=\\GO::t(\"Log files\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t$response[]=$node;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$folder = Folder::model()->findByPk($params['node']);\n\t\t\t\tif(!$folder)\n\t\t\t\t\treturn false;\n\t\t\t\t\n//\t\t\t\t$folder->checkFsSync();\n\n\t\t\t\t$stmt = $folder->getSubFolders(\\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t\t->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ASC')));\n\n\t\t\t\twhile ($subfolder = $stmt->fetch()) {\n\t\t\t\t\t$response[] = $this->_folderToNode($subfolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tif ($showFiles) {\n\t\t\t\t\t\t$response = array_merge($response, $this->_addFileNodes($folder));\n\t\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\tprivate function _folderToNode($folder, $expandFolderIds=array(), $withChildren=true, $withFiles = false) {\n\t\t$expanded = $withChildren || in_array($folder->id, $expandFolderIds);\n\t\t$node = array(\n\t\t\t\t'text' => $folder->name,\n\t\t\t\t'id' => $folder->id,\n\t\t\t\t'draggable' => false,\n\t\t\t\t'iconCls' => !$folder->acl_id || $folder->readonly ? 'ic-folder' : 'ic-folder-shared',\n\t\t\t\t'expanded' => $expanded,\n\t\t\t\t'parent_id'=>$folder->parent_id,\n\t\t\t\t'path'=>$folder->path\n\t\t);\n\n\t\tif ($expanded) {\n\t\t\t$node['children'] = array();\n\t\t\t$stmt = $folder->getSubFolders(\\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t\t->limit(300)//not so nice hardcoded limit\n\t\t\t\t\t\t\t->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ASC')));\n\t\t\twhile ($subfolder = $stmt->fetch()) {\n\t\t\t\t$node['children'][] = $this->_folderToNode($subfolder, $expandFolderIds, false, $withFiles);\n\t\t\t}\n\n\t\t\tif ($withFiles) {\n\t\t\t\t$node['children'] = array_merge($node['children'], $this->_addFileNodes($folder));\n\t\t\t}\n\t\t} else {\n\t\t\tif (!$folder->hasChildren()) {\n\t\t\t\t//it doesn't habe any subfolders so instruct the client about this\n\t\t\t\t//so it can present the node as a leaf.\n\t\t\t\t$node['children'] = array();\n\t\t\t\t$node['expanded'] = true;\n\n\t\t\t\tif ($withFiles) {\n\t\t\t\t\t$node['children'] = array_merge($node['children'], $this->_addFileNodes($folder));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $node;\n\t}\n\n\tprivate function _addFileNodes($folder) {\n\t\t$stmt = $folder->files();\n\n\t\t$files = array();\n\t\twhile($file = $stmt->fetch()) {\n\t\t\t$fileNode = array(\n\t\t\t\t'text' => $file->name,\n\t\t\t\t'name' => $file->name,\n\t\t\t\t'id' => $file->id,\n\t\t\t\t'size' => $file->size,\n\t\t\t\t'extension' => $file->extension,\n\t\t\t\t'draggable' => false,\n\t\t\t\t'leaf' => true,\n\t\t\t\t'path'=> $folder->path . '/' . $file->name,\n\t\t\t\t'iconCls' => 'filetype-' . strtolower($file->extension),\n\t\t\t\t'checked' => false\n\t\t\t);\n\n\t\t\t$files[] = $fileNode;\n\t\t\t\\GO::debug($file);\n\t\t}\n\t\treturn $files;\n\t}\n\n\tprotected function beforeSubmit(&$response, &$model, &$params) {\n\n\t\tif(isset($params['share']) && !$model->readonly && !$model->isSomeonesHomeFolder() && $model->checkPermissionLevel(\\GO\\Base\\Model\\Acl::MANAGE_PERMISSION)){\n\t\t\tif ($params['share']==1 && $model->acl_id == 0) {\n\t\t\t\t$model->visible = 1;\n\t\t\t\tif(GO::modules()->isInstalled('hidesharedprojectfs')) {\n\t\t\t\t\t$parentId = ($model->getIsNew()) ? $params['parent_id'] : $model->parent_id;\n\t\t\t\t\t$parent = Folder::model()->findByPk($parentId);\n\t\t\t\t\tif(!empty($parent)) { \n\t\t\t\t\t\twhile($parent = $parent->parent) {\n\t\t\t\t\t\t\tif($parent->parent_id == 0 && in_array($parent->name, array('projects2', 'addressbook'))) {\n\t\t\t\t\t\t\t\t$model->visible = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n//\t\t\t\t$acl = new \\GO\\Base\\Model\\Acl();\n//\t\t\t\t$acl->description = $model->tableName() . '.' . $model->aclField();\n//\t\t\t\t$acl->user_id = \\GO::user() ? \\GO::user()->id : 1;\n//\t\t\t\t$acl->save();\n\t\t\t\t$shared_folder = $model;\n\t\t\t\twhile(!$shared_folder->isSomeonesHomeFolder() && $shared_folder->parent_id!=0) {\n\t\t\t\t\t$shared_folder = $shared_folder->parent;\n\t\t\t\t}\n\t\t\t\t$acl = $model->setNewAcl($shared_folder->user_id);\n\t\t\t\t$userGroup = \\GO\\Base\\Model\\Group::model()->findSingleByAttribute('isUserGroupFor', \\GO::user()->id);\n\t\t\t\tif($userGroup) {\n\t\t\t\t\t$acl->addGroup($userGroup->id, \\GO\\Base\\Model\\Acl::MANAGE_PERMISSION);\n\t\t\t\t}\n\t\t\t\t$acl->save(); // again\n\t\t\t\t\n\t\t\t\t//for enabling the acl permissions panel\n\t\t\t\t$response['acl_id']=$model->acl_id;\n\t\t\t}\n\n\t\t\tif ($params['share']==0 && $model->acl_id > 0) {\n\t\t\t\t$model->acl->delete();\n\t\t\t\t$model->acl_id = $response['acl_id'] = 0;\n\t\t\t}\n\t\t}\n\n\t\tif(!empty($params['name']) && \\GO::config()->convert_utf8_filenames_to_ascii)\n\t\t\t$params['name']=\\GO\\Base\\Util\\StringHelper::utf8ToASCII ($params['name']);\n\n\t\treturn parent::beforeSubmit($response, $model, $params);\n\t}\n\n\tprotected function afterSubmit(&$response, &$model, &$params, $modifiedAttributes) {\n\n\t\t//output the new path of the file if we changed the name.\n\t\tif (isset($modifiedAttributes['name']))\n\t\t\t$response['new_path'] = $model->path;\n\n\t\t$notifyRecursive = !empty($params['notifyRecursive']) && $params['notifyRecursive']=='true' ? true : false;\n\n\t\tif(isset($params['notify'])){\n\t\t\tif ($params['notify']==1)\n\t\t\t\t$model->addNotifyUser(\\GO::user()->id,$notifyRecursive);\n\n\t\t\tif ($params['notify']==0)\n\t\t\t\t$model->removeNotifyUser(\\GO::user()->id,$notifyRecursive);\n\t\t}\n\n\t\tparent::afterSubmit($response, $model, $params, $modifiedAttributes);\n\t}\n\n\tprotected function afterLoad(&$response, &$model, &$params) {\n\n\t\t$response['data']['path'] = $model->path;\n\t\t$response['data']['notify'] = $model->hasNotifyUser(\\GO::user()->id);\n\t\t$response['data']['is_someones_home_dir'] = $model->isSomeonesHomeFolder();\n\t\t$response['data']['username'] = !empty($model->user) ? $model->user->name : '';\n\t\t$response['data']['musername'] = !empty($model->mUser) ? $model->mUser->name : '';\n\t\t\n\t\t$response['data']['url']=$model->externalUrl;\n\n\t\treturn parent::afterLoad($response, $model, $params);\n\t}\n\n\tprotected function afterDisplay(&$response, &$model, &$params) {\n\t\t$response['data']['path'] = $model->path;\n\t\t$response['data']['type'] = \\GO::t(\"Folder\", \"files\");\n\t\t$response['data']['notify'] = $model->hasNotifyUser(\\GO::user()->id);\n\t\t$response['data']['url']=$model->externalUrl;\n\n\t\treturn parent::afterDisplay($response, $model, $params);\n\t}\n\n\tprotected function actionPaste($params) {\n\n\t\t$response['success'] = true;\n\n\t\tif (!isset($params['overwrite']))\n\t\t\t$params['overwrite'] = 'ask'; //can be ask, yes, no\n\n\n\t\tif (isset($params['ids']) && $params['overwrite'] == 'ask')\n\t\t\t\\GO::session()->values['files']['pasteIds'] = $this->_splitFolderAndFileIds(json_decode($params['ids'], true));\n\n\t\t$destinationFolder = Folder::model()->findByPk($params['destination_folder_id']);\n\n\t\tif (!$destinationFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::WRITE_PERMISSION))\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\n\t\twhile ($file_id = array_shift(\\GO::session()->values['files']['pasteIds']['files'])) {\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($file_id);\n\n\t\t\t$newFileName=$file->name;\n\n\t\t\t$existingFile = $destinationFolder->hasFile($file->name);\n\n\t\t\t//if it's a copy-paste in the same folder then append a number.\n\t\t\tif($existingFile && $existingFile->id==$file->id){\n\t\t\t\tif($params['paste_mode'] == 'cut')\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$fsFile = $existingFile->fsFile;\n\t\t\t\t\t$fsFile->appendNumberToNameIfExists();\n\t\t\t\t\t$newFileName = $fsFile->name();\n\t\t\t\t\t$existingFile=false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($existingFile) {\n\t\t\t\tswitch ($params['overwrite']) {\n\t\t\t\t\tcase 'ask':\n\t\t\t\t\t\tarray_unshift(\\GO::session()->values['files']['pasteIds']['files'], $file_id);\n\t\t\t\t\t\t$response['fileExists'] = $file->name;\n\t\t\t\t\t\treturn $response;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'yestoall':\n\t\t\t\t\tcase 'yes':\n\t\t\t\t\t\t$existingFile->delete();\n\n\t\t\t\t\t\tif ($params['overwrite'] == 'yes')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'notoall':\n\t\t\t\t\tcase 'no':\n\t\t\t\t\t\tif ($params['overwrite'] == 'no')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($params['paste_mode'] == 'cut') {\n\t\t\t\tif (!$file->move($destinationFolder))\n\t\t\t\t\tthrow new \\Exception(\"Could not move \" . $file->name);\n\t\t\t}else {\n\t\t\t\tif (!$file->copy($destinationFolder,$newFileName))\n\t\t\t\t\tthrow new \\Exception(\"Could not copy \" . $file->name);\n\t\t\t}\n\t\t}\n\n\t\twhile ($folder_id = array_shift(\\GO::session()->values['files']['pasteIds']['folders'])) {\n\t\t\t$folder = Folder::model()->findByPk($folder_id);\n\t\t\t\n\t\t\tif($params['paste_mode']=='copy' && $folder->parent_id==$destinationFolder->id){\n\t\t\t\t//pasting in the same folder. Append (1).\n\t\t\t\t$fsFolder = $folder->fsFolder;\n\t\t\t\t$fsFolder->appendNumberToNameIfExists();\n\t\t\t\t$folderName=$fsFolder->name();\t\t\t\t\n\t\t\t}  else {\n\t\t\t\t$folderName = $folder->name;\n\t\t\t}\n\n\t\t\t$existingFolder = $destinationFolder->hasFolder($folderName);\n\t\t\tif ($existingFolder) {\n\t\t\t\tswitch ($params['overwrite']) {\n\t\t\t\t\tcase 'ask':\n\t\t\t\t\t\tarray_unshift(\\GO::session()->values['files']['pasteIds']['folders'], $folder_id);\n\t\t\t\t\t\t$response['fileExists'] = $folderName;\n\t\t\t\t\t\treturn $response;\n\n\t\t\t\t\tcase 'yestoall':\n\t\t\t\t\tcase 'yes':\n\t\t\t\t\t\t//$existingFolder->delete();\n\n\t\t\t\t\t\tif ($params['overwrite'] == 'yes')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'notoall':\n\t\t\t\t\tcase 'no':\n\t\t\t\t\t\tif ($params['overwrite'] == 'no')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($params['paste_mode'] == 'cut') {\n\t\t\t\tif (!$folder->move($destinationFolder))\n\t\t\t\t\tthrow new \\Exception(\"Could not move \" . $folder->name);\n\t\t\t}else {\n\t\t\t\tif (!$folder->copy($destinationFolder, $folderName))\n\t\t\t\t\tthrow new \\Exception(\"Could not copy \" . $folder->name);\n\t\t\t}\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\tprivate function _splitFolderAndFileIds($ids) {\n\t\t$fileIds = array();\n\t\t$folderIds = array();\n\n\n\t\tforeach ($ids as $typeId) {\n\t\t\tif (substr($typeId, 0, 1) == 'd') {\n\t\t\t\t$folderIds[] = substr($typeId, 2);\n\t\t\t} else {\n\t\t\t\t$fileIds[] = substr($typeId, 2);\n\t\t\t}\n\t\t}\n\n\t\treturn array('files' => $fileIds, 'folders' => $folderIds);\n\t}\n\n\tprivate function _listShares($params) {\n\t\t$cm = new \\GO\\Base\\Data\\ColumnModel('GO\\Files\\Model\\Folder');\n\t\t$cm->setFormatRecordFunction(array($this, 'formatListRecord'));\n\t\t\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t->joinRelation('sharedRootFolders')\n\t\t\t\t\t\t->ignoreAcl()\n\t\t\t\t\t\t->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ASC'));\n\t\t\n\t\t$findParams->getCriteria()\n\t\t\t\t\t->addCondition('user_id', \\GO::user()->id,'=','sharedRootFolders');\n\t\t\n\t\t\n\t\t$store = new \\GO\\Base\\Data\\DbStore('GO\\Files\\Model\\Folder',$cm, $params, $findParams);\n\t\t$response = $store->getData();\n\t\t$response['permission_level']=\\GO\\Base\\Model\\Acl::READ_PERMISSION;\n\t\treturn $response;\n\t}\n\n\tprivate $_listFolderPermissionLevel;\n\n\tprotected function actionList($params) {\n\n\t\tif (!empty($params['query'])) {\n\t\t\treturn $this->_searchFiles($params);\n\t\t}\n            \n\n\t\t\n\t\t//get the folder that contains the files and folders to list.\n\t\t//This will check permissions too.\n\t\tif(empty($params['folder_id'])) {\n\t\t\t$folder = Folder::model()->findHomeFolder (GO::user());\n\t\t}else {\n\t\t\tif ($params['folder_id'] == 'shared') {\n\t\t\t\treturn $this->_listShares($params);\n\t\t\t}\n\t\t\t$folder = Folder::model()->findByPk($params['folder_id']);\n\t\t}\n\t\t\n\t\tif(!$folder) {\n\t\t\tthrow new \\Exception('No Folder found with id ' . $params['folder_id']);\n\t\t}\n\n\n\n\t\t// if it is the users folder tha get the shared folders\n\t\tif($folder->name == 'users' && $folder->parent_id == 0) {\n\t\t\treturn $this->_listShares($params);\n\t\t}\n\n\t\t\n\t\t$user = $folder->quotaUser;\n\t\t$this->_listFolderPermissionLevel=$folder->permissionLevel;\n\n\t\t$response['permission_level']=$folder->permissionLevel;//$folder->readonly ? \\GO\\Base\\Model\\Acl::READ_PERMISSION : $folder->permissionLevel;\n\n\t\tif(empty($params['skip_fs_sync']) && empty(GO::config()->files_disable_filesystem_sync))\n\t\t\t$folder->checkFsSync();\n\n\t\t//useful information for the view.\n\t\t$response['path'] = $folder->path;\n\n\t\t//Show this page in thumbnails or list\n\t\t$folderPreference = \\GO\\Files\\Model\\FolderPreference::model()->findByPk(array('user_id'=>\\GO::user()->id,'folder_id'=>$folder->id));\n\t\tif($folderPreference)\n\t\t\t$response['thumbs']=$folderPreference->thumbs;\n\t\telse\n\t\t\t$response['thumbs']=0;\n\n\t\t$response['parent_id'] = $folder->parent_id;\n\n\t\t//locked state\n\t\t$response['lock_state']=!empty($folder->apply_state);\n\t\t$response['cm_state']=isset($folder->cm_state) && !empty($folder->apply_state) ? $folder->cm_state : \"\";\n\t\t$response['may_apply_state']=\\GO\\Base\\Model\\Acl::hasPermission($folder->getPermissionLevel(), \\GO\\Base\\Model\\Acl::MANAGE_PERMISSION);\n\n\t\t$store = \\GO\\Base\\Data\\Store::newInstance(Folder::model());\n\n\t\t//set sort aliases\n\t\t$store->getColumnModel()->formatColumn('type', '',array(),'name');\n\t\t$store->getColumnModel()->formatColumn('size', '\"-\"',array(),'name');\n\t\t$store->getColumnModel()->formatColumn('locked_user_id', '\"0\"');\n\n\n\t\t//handle delete request for both files and folder\n\t\t$this->_processDeletes($params, $store);\n\n\t\t$store->getColumnModel()->setFormatRecordFunction(array($this, 'formatListRecord'));\n\n\t\t$findParams = $store->getDefaultParams($params);\n\n\t\t//sorting on custom fields doesn't work for folders\n\t\t//TODO\n\t\tif(!isset($params['sort']) || substr($params['sort'],0,13)=='customFields.' || $params['sort'] == 'name') {\n\t\t\t$findParams->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ' . (!isset($params['dir']) || $params['dir'] == 'ASC' ? 'ASC' : 'DESC')));\n\t\t}\n\n\n\t\t$findParamsArray = $findParams->getParams();\n\t\tif(!isset($findParamsArray['start']))\n\t\t\t$findParamsArray['start']=0;\n\n\t\tif(!isset($findParamsArray['limit']))\n\t\t\t$findParamsArray['limit']=0;\n\n\t\t//$stmt = $folder->folders($findParams);\n\n\t\t$stmt = $folder->getSubFolders($findParams);\n\n\t\t$store->setStatement($stmt);\n\n\t\t$response = array_merge($response, $store->getData());\n\n\t\t//add files to the listing if it fits\n\t\t$folderPages = floor($stmt->foundRows / $findParamsArray['limit']);\n\t\t$foldersOnLastPage = $stmt->foundRows - ($folderPages * $findParamsArray['limit']);\n\n\t\t//$isOnLastPageofFolders = $stmt->foundRows < ($findParams['limit'] + $findParams['start']);\n\n\t\tif (count($response['results'])) {\n\t\t\t$fileStart = $findParamsArray['start'] - $folderPages * $findParamsArray['limit'];\n\t\t\t$fileLimit = $findParamsArray['limit'] - $foldersOnLastPage;\n\t\t} else {\n\t\t\t$fileStart = $findParamsArray['start'] - $stmt->foundRows;\n\t\t\t$fileLimit = $findParamsArray['limit'];\n\t\t}\n\n\t\tif ($fileStart >= 0) {\n\n\t\t\t$store->resetResults();\n\n\t\t\t$store->getColumnModel()->formatColumn('size', '\"-\"',array(),'size');\n\t\t\t$store->getColumnModel()->formatColumn('type', '',array(),'extension');\n\t\t\t$store->getColumnModel()->formatColumn('locked', '$model->isLocked()');\n\t\t\t$store->getColumnModel()->formatColumn('locked_user_id', '$model->locked_user_id');\n\t\t\t$store->getColumnModel()->formatColumn('folder_id', '$model->folder_id');\n\t\t\t$store->getColumnModel()->formatColumn('username', '$model->user->displayName');\n\t\t\t$store->getColumnModel()->formatColumn('musername', '$model->mUser->displayName');\n\n\t\t\t$findParams = $store->getDefaultParams($params)\n\t\t\t\t\t\t\t->limit($fileLimit)\n\t\t\t\t\t\t\t->start($fileStart);\n\t\t\t\n\t\t\t// Handle the files filter\n\t\t\tif(!empty($params['files_filter'])){\n\t\t\t\t$extensions= explode(',',$params['files_filter']);\n\t\t\t\t$findParams->getCriteria()->addInCondition('extension', $extensions);\n\t\t\t}\n\n\t\t\tif(!isset($params['sort']) || $params['sort'] == 'name') {\n\t\t\t\t$findParams->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ' . (!isset($params['dir']) || $params['dir'] == 'ASC' ? 'ASC' : 'DESC')));\n\t\t\t}\n\n\t\t\t$stmt = $folder->files($findParams);\n\t\t\t$store->setStatement($stmt);\n\n\t\t\t$filesResponse = $store->getData();\n\n\t\t\t$response['total']+=$filesResponse['total'];\n\t\t\t$response['results'] = array_merge($response['results'], $filesResponse['results']);\n\t\t} else {\n\t\t\t$record = $folder->files(\\GO\\Base\\Db\\FindParams::newInstance()->single()->select('count(*) as total'));\n\t\t\t$response['total']+=$record->total;\n\t\t}\n\t\tif(empty($user)) {\n\t\t\t$user = \\GO::user();\n\t\t}\n\t\t\n\t\t$response['owner_id'] = $user->id;\n\t\t$response['disk_usage']=round($user->disk_usage/1024/1024,2);\n\t\t$response['disk_quota']=$user->disk_quota;\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Process deletes, separate function because it needs to be called from different places.\n\t *\n\t * @param array $params\n\t * @param type $store\n\t */\n\tprivate function _processDeletes($params, $store=false){\n\t\tif(!$store){\n\t\t\t$store = \\GO\\Base\\Data\\Store::newInstance(Folder::model());\n\t\t}\n\n\t\t//handle delete request for both files and folder\n\t\tif (isset($params['delete_keys'])) {\n\n\t\t\t$ids = $this->_splitFolderAndFileIds(json_decode($params['delete_keys'], true));\n\n\t\t\t$params['delete_keys'] = json_encode($ids['folders']);\n\t\t\t$store->processDeleteActions($params, \"GO\\Files\\Model\\Folder\");\n\n\t\t\t$params['delete_keys'] = json_encode($ids['files']);\n\t\t\t$store->processDeleteActions($params, \"GO\\Files\\Model\\File\");\n\t\t\t$this->fireEvent('afterListDeleteActionFolder', [$params]);\n\t\t}\n\t}\n\n\tprivate function _searchFiles($params) {\n\t\t$searchInSharedFolders = $params['folder_id'] === 'shared';\n\t\tif(!$searchInSharedFolders) {\n\t\t\t$params['folder_id'] = intval($params['folder_id']);\n\t\t\t$folder = Folder::model()->findByPk($params['folder_id']);\n\n\t\t\t$stripPath = $folder->path;\n\t\t}\n\t\t//handle delete request for both files and folder\n\t\t$this->_processDeletes($params);\n\n\t\t$response['success'] = true;\n\n\t\t$queryStr = !empty($params['query']) ? $params['query'] : '';\n\t\t$limit = !empty($params['limit']) ? $params['limit'] : 30;\n\t\t$start = !empty($params['start']) ? $params['start'] : 0;\n\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t->calcFoundRows()\n\t\t\t\t->select('t.*')\n\t\t\t\t->joinCustomFields()\n\t\t\t\t->join(\"core_search\", \"s.entityId = t.id AND s.entityTypeId = \" . \\GO\\Files\\Model\\File::entityType()->getId(), \"s\")\n\t\t\t->start($start)\n\t\t\t->limit($limit)\n\t\t\t->group(['t.id']);\n\n\t\tif(!$searchInSharedFolders) {\n\t\t\t$findParams->getCriteria()->addCondition(\"filter\", $folder->getIdPath() .\"/%\", \"LIKE\", \"s\");\n\t\t}\n\t\t// restrict to the current folder hierarchy\n\n\t\tif(!go()->getAuthState()->isAdmin()) {\n\t\t\t$aclJoinCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()->addRawCondition('a.aclId', 's.aclId', '=', false);\n\n\t\t\t$aclWhereCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t->addInCondition(\"groupId\", \\GO\\Base\\Model\\User::getGroupIds(\\GO::user()->id), \"a\", false);\n\n\n\t\t\t$findParams->ignoreAcl()\n\t\t\t\t->join(\\GO\\Base\\Model\\AclUsersGroups::model()->tableName(), $aclJoinCriteria, 'a', 'INNER')->debugSql()\n\t\t\t\t->criteria($aclWhereCriteria);\n\t\t}\n\n\t\t$i = 0;\n\n\t\t$words = StringUtil::splitTextKeywords($queryStr, false);\n\n\t\tforeach($words as $word) {\n\n\t\t\t$findParams->join(\"core_search_word\", 'w'.$i.'.searchId = s.id', 'w'.$i);\n\t\t\t$findParams->getCriteria()->addCondition('word', $word . '%', 'LIKE', 'w'.$i);\n\t\t\t$i++;\n\t\t}\n\n\t\tif(isset($params['sort'])){\n\n\t\t\tif($params['sort'] == 'name') {\n\t\t\t\t $findParams->order(new \\go\\core\\db\\Expression('t.name COLLATE utf8mb4_unicode_ci ' . (!isset($params['dir']) || $params['dir'] == 'ASC' ? 'ASC' : 'DESC')));\n\t\t\t}else {\n\t\t\t\t$findParams->order(\"t.\".$params['sort'], $params['dir']);\n\t\t\t}\n\t\t}\n\n\t\t$filesStmt = \\GO\\Files\\Model\\File::model()->find($findParams);\n\n\t\t$response['total'] = $filesStmt->foundRows;\n\t\t$response['results'] = array();\n\t\t$response['cm_state'] = '';\n\t\t$response['may_apply_state'] = false;\n\t\t$response['lock_state'] = false;\n\t\t$response['permission_level'] = 0;\n\n\t\tforeach ($filesStmt as $searchFileModel) {\n\t\t\t$record = $searchFileModel->getAttributes();\n\t\t\t$record['customFields'] = $searchFileModel->getCustomFields()->toArray();\n\t\t\t$record = $this->formatListRecord($record, $searchFileModel);\n\t\t\tif(!$searchInSharedFolders) {\n\t\t\t\t$record['name'] = substr($searchFileModel->path, strlen($stripPath) + 1);\n\t\t\t} else {\n\t\t\t\t$arPath = explode(\"/\", $searchFileModel->path);\n\t\t\t\t$record['name'] = array_pop($arPath);\n\t\t\t}\n\t\t\t$response['results'][] = $record;\n\t\t}\n\n\t\treturn $response;\n\t}\n        \n\tpublic function formatListRecord($record, $model) {\n\n\t\t$record['path'] = $model->path;\n\n\t\tif ($model instanceof Folder) {\n\t\t\t$record['type_id'] = 'd:' . $model->id;\n\t\t\t$record['type'] = \\GO::t(\"Folder\", \"files\");\n\t\t\t$record['size'] = '-';\n\t\t\t$record['extension'] = 'folder';\n\t\t\t$record['readonly']=$model->readonly;\n\t\t} else {\n\t\t\t$record['type_id'] = 'f:' . $model->id;\n\t\t\t$record['type'] = \\GO\\Base\\Fs\\File::getFileTypeDescription($model->extension);\n\t\t\t$record['extension'] = strtolower($model->extension);\n\t\t\t$record['size']=$model->size;\n\t\t\t$record['permission_level']=$this->_listFolderPermissionLevel;\n\t\t\t$record['unlock_allowed']=$model->unlockAllowed();\n\n\t\t\tif(empty($_REQUEST['noHandler'])){ // Added this line because the json_decode function cannot handle javascript. When noHandler is set to true, this line will be skipped\n\t\t\t\t$record['handler']='startjs:function(){'.$model->getDefaultHandler()->getHandler($model).'}:endjs';\n\t\t\t}\n\t\t}\n\t\t$record['thumb_url'] = $model->thumbURL;\n\n\t\treturn $record;\n\t}\n\n\tprivate function _checkExistingModelFolder($model, $folder, $mustExist=false) {\n\n\t\t\\GO::debug(\"Check existing model folder \".$model->className().\"(ID:\".$model->id.\" Folder ID: \".$folder->id.\" ACL ID: \".$model->findAclId().\")\");\n\n\t\tif(!$folder->fsFolder->exists())\n\t\t{\n\t\t\t//throw new \\Exception(\"Fs folder doesn't exist! \".$folder->fsFolder->path());\n\t\t\t\\GO::debug(\"Deleting it because filesystem folder doesn't exist\");\n\t\t\t$folder->readonly = 1; //makes sure acl is not deleted\n\t\t\t$folder->delete(true);\n\t\t\tif($mustExist)\n\t\t\t\treturn $this->_createNewModelFolder($model);\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\t//todo test this:\n//      if(!isset($model->acl_id) && empty($params['mustExist'])){\n//          //if this model is not a container like an addressbook but a contact\n//          //then delete the folder if it's empty.\n//          $ls = $folder->fsFolder->ls();\n//          if(!count($ls) && $folder->fsFolder->mtime()<time()-60){\n//              $folder->delete();\n//              $response['files_folder_id']=$model->files_folder_id=0;\n//              $model->save();\n//              return $response['files_folder_id'];\n//          }\n//      }\n\n\n\n\t\t$currentPath = $folder->path;\n\t\t$newPath = \\go\\core\\util\\StringUtil::normalize(rtrim($model->buildFilesPath(),'.'));\n\t\t\n\n\t\tif(!$newPath)\n\t\t\treturn false;\n\n\t\tif(\\GO::router()->getControllerAction()=='checkdatabase'){\n\t\t\t//Always ensure folder exists on check database\n\t\t\t$destinationFolder = Folder::model()->findByPath(\n\t\t\t\t\t\t\tdirname($newPath), true, array('acl_id'=>$model->findAclId(),'readonly'=>1));\n\t\t}\n\n\t\tif ($currentPath != $newPath) {\n\n\t\t\t\\GO::debug(\"Moving folder \".$currentPath.\" to \".$newPath);\n\n\t\t\t//model has a new path. We must move the current folder\n\t\t\t$destinationFolder = Folder::model()->findByPath(\n\t\t\t\t\t\t\tdirname($newPath), true, array('acl_id'=>$model->findAclId(),'readonly'=>1));\n\n\n\t\t\t//sometimes the folder must be moved into a folder with the same. name\n\t\t\t//for example:\n\t\t\t//projects/Name must be moved into projects/Name/Name\n\t\t\t//then we temporarily move it to a temp name\n\t\t\tif($destinationFolder->id==$folder->id || $destinationFolder->fsFolder->isSubFolderOf($folder->fsFolder)){\n\t\t\t\t\\GO::debug(\"Destination folder is the same!\");\n\t\t\t\t$folder->name=uniqid();\n\t\t\t\t$folder->systemSave=true;\n\t\t\t\t$folder->save(true);\n\n\t\t\t\t\\GO::debug(\"Moved folder to temp:\".$folder->fsFolder->path());\n\n\t\t\t\t\\GO::modelCache()->remove(\"GO\\Files\\Model\\Folder\");\n\n\t\t\t\t$destinationFolder = Folder::model()->findByPath(\n\t\t\t\t\t\t\tdirname($newPath), true);\n\t\t\t\t\n\n\t\t\t\t\\GO::debug(\"Now moving to:\".$destinationFolder->fsFolder->path());\n\n\t\t\t}\n\n\t\t\tif($destinationFolder->id==$folder->id){\n\t\t\t\tthrow new \\Exception(\"Same ID's!\");\n\t\t\t}\n\n\t\t\t$fsFolder = new \\GO\\Base\\Fs\\Folder($newPath);\n//          $fsFolder->appendNumberToNameIfExists();\n\n\t\t\tif(($existingFolder = $destinationFolder->hasFolder($fsFolder->name()))){\n\t\t\t\t\\GO::debug(\"Merging into existing folder.\".$folder->path.' ('.$folder->id.') -> '.$existingFolder->path.' ('.$existingFolder->id.')');\n\t\t\t\t//if (!empty($model->acl_id))\n\t\t\t\t$existingFolder->acl_id = $model->findAclId();\n\t\t\t\t$existingFolder->visible = 0;\n\t\t\t\t$existingFolder->readonly = 1;\n\t\t\t\t$existingFolder->save(true);\n\n\t\t\t\t$folder->systemSave = true;\n\n\t\t\t\t$existingFolder->moveContentsFrom($folder, true);\n\n\t\t\t\t//delete empty folder.\n\t\t\t\t$folder->readonly = 1; //makes sure acl is not deleted\n\t\t\t\t$folder->delete(true);\n\n\t\t\t\treturn $existingFolder->id;\n\n\t\t\t}else\n\t\t\t{\n//              if ($model->acl_id>0)\n//                  $folder->acl_id = $model->acl_id;\n//              else\n//                  $folder->acl_id=0;\n\t\t\t\t$folder->acl_id = $model->findAclId();\n\n\t\t\t\t$folder->name = $fsFolder->name();\n\t\t\t\t$folder->parent_id = $destinationFolder->id;\n\t\t\t\t$folder->systemSave = true;\n\t\t\t\t$folder->visible = 0;\n\t\t\t\t$folder->readonly = 1;\n\t\t\t\tif($folder->isModified())\n\t\t\t\t\tif(!$folder->save(true)){\n\t\t\t\t\t\tthrow new \\Exception(var_export($folder->getValidationErrors(), true));\n\t\t\t\t\t}\n\t\t\t}\n\t\t}else\n\t\t{\n\t\t\t\\GO::debug(\"No change needed\");\n//          if ($model->acl_id>0)\n//              $folder->acl_id = $model->acl_id;\n//          else\n//              $folder->acl_id=0;\n\t\t\t$folder->acl_id = $model->findAclId();\n\t\t\t$folder->systemSave = true;\n\t\t\t$folder->visible = 0;\n\t\t\t$folder->readonly = 1;\n\t\t\tif($folder->isModified())\n\t\t\t\t$folder->save(true);\n\t\t}\n\n\t\treturn $folder->id;\n\t}\n\n\tprivate function _createNewModelFolder(\\GO\\Base\\Db\\ActiveRecord $model) {\n\n\t\tGO::debug(\"Create new model folder \".$model->className().\"(ID:\".$model->id.\")\");\n\t\t$filesPath = \\go\\core\\util\\StringUtil::normalize(rtrim($model->buildFilesPath(),'.'));\n\t\t$folder = Folder::model()->findByPath($filesPath,true, array('readonly'=>1));\n\t\t\n\t\tif(!$folder){\n\t\t\tthrow new \\Exception(\"Failed to create folder \".$filesPath);\n\t\t}\n//      if (!empty($model->acl_id))\n//          $folder->acl_id = $model->acl_id;\n\n\t\t$folder->acl_id=$model->findAclId();\n\t\t\n\t\t$folder->visible = 0;\n\t\t$folder->readonly = 1;\n\t\t$folder->systemSave = true;\n\t\t$folder->save(true);\n\t\t\n\t\treturn $folder->id;\n\t}\n\n\t/**\n\t * @param array $params\n\t * @return array\n\t * @throws AccessDenied\n\t */\n\tprotected function checkEntityFolder($params)\n\t{\n\t\t$entityType = \\go\\core\\orm\\EntityType::findByName($params['model']);\n\t\t$cls = $entityType->getClassName();\n\n\t\t$entity = $cls::findById($params['id']);\n\n\t\t$folder = Folder::model()->findForEntity($entity);\n\t\treturn [\n\t\t\t\"success\" => true,\n\t\t\t\"files_folder_id\" => $folder->id,\n\t\t\t\"path\" =>  $folder->path\n\t\t];\n\t}\n\n\t/**\n\t * check if a model folder exists\n\t *\n\t * @param array $params\n\t * @return array\n\t * @throws Exception\n\t */\n\tprotected function actionCheckModelFolder($params)\n\t{\n\n\t\t$cls = $params['model'];\n\t\t$entityType = \\go\\core\\orm\\EntityType::findByName($params['model']);\n\t\tif(!empty($entityType)) {\n\t\t\t$cls = $entityType->getClassName();\n\t\t}\n\n\t\tif(strpos($params['model'], '\\\\') === false && is_a($cls, '\\\\go\\\\core\\\\orm\\\\Entity', true)) {\n\t\t\treturn $this->checkEntityFolder($params);\n\t\t}\n\n\t\t$obj = new $cls(false);\n\t\t$model = $obj->findByPk($params['id'],false, true);\n\n\t\t$folderId =  $this->checkModelFolder($model, true, !empty($params['mustExist']));\n\t\t$folder = Folder::model()->findByPk($folderId);\n\n\t\t$response = [\n\t\t\t'success' => true,\n\t\t\t'files_folder_id' => $folderId,\n\t\t\t'path' => $folder->path\n\t\t];\n\t\t$this->fireEvent('afterCheckModelFolder', [$model, $folder, &$response]);\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * @param GO\\Base\\Db\\ActiveRecord $model\n\t * @param false $saveModel\n\t * @param false $mustExist\n\t * @return bool|int|mixed|string|null\n\t * @throws AccessDenied\n\t */\n\tpublic function checkModelFolder(\\GO\\Base\\Db\\ActiveRecord $model, $saveModel=false, $mustExist=false) {\n\t\t$oldAllowDeletes = \\GO\\Base\\Fs\\File::setAllowDeletes(false);\n\t\n\t\t$newFolder = false;\n\t\t$folder = false;\n\t\tif ($model->files_folder_id > 0){\n\t\t\t\n\t\t\tGO::debug('Model has files_folder_id '.$model->files_folder_id);\n\n\t\t\t$folder = Folder::model()->findByPk($model->files_folder_id, false, true);\n\t\t\t\n\t\t\t//record has an ID but the folder is missing from the database. Attempt to create new one.\n\t\t\t$mustExist = true;\n\t\t}\n\n\t\tif ($folder) {\n\t\t\t\n\t\t\tGO::debug('Folder exists in database');\n\t\t\t\t\t\n\t\t\t$model->files_folder_id = $this->_checkExistingModelFolder($model, $folder, $mustExist);\n\n\t\t\tif ($saveModel && $model->isModified()) {\n\t\t\t\t$model->save(true);\n\t\t\t}\n\t\t} elseif ($model->alwaysCreateFilesFolder() || $mustExist) {\n\t\t\t\n\t\t\tGO::debug('Folder does not exist in database. Will create it.');\n\t\t\n\t\t\t//this model has an acl_id. So we should create a shared folder with this acl.\n\t\t\t//this folder should always exist.\n\t\t\t//only new models that have it's own acl field should always have a folder.\n\t\t\t//otherwise it will be created when first accessed.\n\t\t\t$model->files_folder_id = $this->_createNewModelFolder($model);\n\t\t\t\n\t\t\t$newFolder = true;\n\n\t\t\tif ($saveModel && $model->isModified())\n\t\t\t\t$model->save(true);\n\t\t}\n\n\t\tif (empty($model->files_folder_id)) {\n\t\t\t$model->files_folder_id = 0;\n\t\t}\n\n\t\t \\GO\\Base\\Fs\\File::setAllowDeletes($oldAllowDeletes);\n\t\t \n\t\t if($model->files_folder_id) {\n\t\t\t$this->fireEvent('checkmodelfolder', array($model, $folder, $newFolder));\n\t\t }\n\n\t\treturn $model->files_folder_id;\n\t}\n\n\tprotected function actionProcessUploadQueue($params) {\n\n\t\tGO::setMaxExecutionTime(3600);\n\n\t\t$response['success'] = true;\n\n\t\tif (!isset($params['overwrite'])) {\n\t\t\t$params['overwrite'] = 'ask'; //can be ask, yes, no\n\t\t}\n\n\t\t$destinationFolder = Folder::model()->findByPk($params['destination_folder_id']);\n\n\t\tif (!$destinationFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::CREATE_PERMISSION)) {\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\t\t}\n\n\t\tif(isset($params['blobs'])) {\n\t\t\t$paths = json_decode($params['blobs']);\n\t\t} else if(isset(\\GO::session()->values['files']['uploadqueue'])) {\n\t\t\t$paths = \\GO::session()->values['files']['uploadqueue'];\n\t\t} else {\n\t\t\tthrow new \\Exception(\"Nothing to process\");\n\t\t}\n\n\t\t$this->processPaths($paths, $destinationFolder, $params['overwrite'], $response);\n\t\t$this->fireEvent('afterUpload', [$params, $destinationFolder]);\n\t\treturn $response;\n\t}\n\n\tprivate function processPaths($paths, Folder $currentFolder, $overwrite, &$response) {\n\n\t\t$removeBlobs = [];\n\n\t\twhile ($tmpfile = array_shift($paths)){\n\t\t\tif(!is_string($tmpfile)) {\n\t\t\t\t// its a json object with blob data\n\t\t\t\t$blob = $tmpfile;\n\n\t\t\t\t$tmpfile = Blob::buildPath($blob->id);\n\t\t\t} else{\n\t\t\t\tunset($blob);\n\t\t\t}\n\n\t\t\t$destinationFolder = $currentFolder;\n\t\t\tif (is_dir($tmpfile)) {\n\t\t\t\t$folder = new \\GO\\Base\\Fs\\Folder($tmpfile);\n\t\t\t\tif ($folder->exists()) {\n\t\t\t\t\t$folder->move($destinationFolder->fsFolder, false, true);\n\t\t\t\t\t$destinationFolder->addFileSystemFolder($folder);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$file = new \\GO\\Base\\Fs\\File($tmpfile);\n\t\t\t\t$filename = $file->name();\n\t\t\t\tif(isset($blob)) {\n\t\t\t\t\tif(isset($blob->subfolder)) {\n\t\t\t\t\t\twhile($fname = array_shift($blob->subfolder)){\n\t\t\t\t\t\t\tif($f = $destinationFolder->hasFolder($fname)) {\n\t\t\t\t\t\t\t\t$destinationFolder = $f;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$destinationFolder = $destinationFolder->addFolder($fname);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$filename = $blob->name;\n\n\t\t\t\t}\n\n\t\t\t\tif ($file->exists()) {\n\n\t\t\t\t\t$existingFile = $destinationFolder->hasFile($filename);\n\t\t\t\t\tif ($existingFile) {\n\t\t\t\t\t\tswitch ($overwrite) {\n\t\t\t\t\t\t\tcase 'ask':\n//\t\t\t\t\t\t\t\tarray_unshift($paths, $tmpfile);\n\t\t\t\t\t\t\t\t$response['fileExists'] = $filename;\n\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t\tcase 'yes':\n\t\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\t\tcase 'yestoall':\n\t\t\t\t\t\t\t\t//we dont want overwrite file in no case\n\t\t\t\t\t\t\t\t$newFile = GO\\Base\\Fs\\File::tempFile();\n\t\t\t\t\t\t\t\t$file = $file->linkOrCopy($newFile);\n\n\t\t\t\t\t\t\t\t$existingFile->replace($file);\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'no':\n\t\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\t\tcase 'notoall':\n\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$newFile = GO\\Base\\Fs\\File::tempFile();\n\t\t\t\t\t\t$file = $file->linkOrCopy($newFile);\n\n\t\t\t\t\t\t$destinationFolder->addFileSystemFile($file, false, $filename);\n\n\t\t\t\t\t}\n\t\t\t\t\t$response['success'] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Check if user uploaded the same blob more than once so the blob must be copied\n\t *\n\t * @param $id\n\t * @param $blobs\n\t */\n\tprivate function blobIsNeededAgain($id, $blobs) {\n\t\tforeach($blobs as $blob) {\n\t\t\tif($blob->id == $id) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate function removeBlob($blobId) {\n\t\t$blob = Blob::findById($blobId);\n\t\tif(!$blobId) {\n\t\t\tthrow new \\Exception(\"Blob not found\");\n\t\t}\n\t\treturn isset($blob->staleAt) ? $blob : false;\n\n\t}\n\n\tprotected function actionCompress($params) {\n\n\t\tini_set('max_execution_time', 600);\n\t\tini_set('memory_limit', '512M');\n\t\t//So other actions can run simultanuously\n\t\tGO::session()->closeWriting();\n\n\t\t$sources = json_decode($params['compress_sources'], true);\n\n\t\t$workingFolder = Folder::model()->findByPk($params['working_folder_id']);\n\t\t$destinationFolder = Folder::model()->findByPk($params['destination_folder_id']);\n\t\t$archiveFile = new \\GO\\Base\\Fs\\File(\\GO::config()->file_storage_path.$destinationFolder->path . '/' . $params['archive_name'] . '.zip');\n\n\t\tif(!$destinationFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::WRITE_PERMISSION)){\n\t\t\tthrow new AccessDenied();\n\t\t}\n\n\t\tif($archiveFile->exists())\n\t\t\tthrow new \\Exception(sprintf(\\GO::t(\"Filename %s already exists\", \"files\"), $archiveFile->stripFileStoragePath()));\n\t\t\n\t\t$sourceObjects = array();\n\t\tfor($i=0;$i<count($sources);$i++){\n\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($sources[$i]);\n\t\t\tif(!$file) {\n\t\t\t\t$file = Folder::model()->findByPath($sources[$i], false, [], true);\n\t\t\t\tif(!$file) {\n\t\t\t\t\tthrow new NotFound(\"Couldn't find '\" . $sources[$i] . \"'\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$file->getPermissionLevel()) {\n\t\t\t\tthrow new AccessDenied();\n\t\t\t}\n\n\t\t\t$path = \\GO::config()->file_storage_path.$sources[$i];\t\t\t\n\t\t\t$sourceObjects[]=\\GO\\Base\\Fs\\Base::createFromPath($path);\n\t\t}\n\n\t\tif(\\GO\\Base\\Fs\\Zip::create($archiveFile, $workingFolder->fsFolder, $sourceObjects)){\n\t\t\t\\GO\\Files\\Model\\File::importFromFilesystem($archiveFile);\n\t\t\t$response['success']=true;\n\t\t}  else {\n\t\t\tthrow new \\Exception(\"ZIP creation failed\");\n\t\t}\n\n\n\t\treturn $response;\n\t}\n\t\n\t/**\n\t * Compress the selected files and return as download\n\t * \n\t * @param array $params\n\t * @return boolean\n\t * @throws \\Exception\n\t */\n\tprotected function actionCompressAndDownload($params) {\n\n\t\tif(!isset($params['archive_name']))\n\t\t\tThrow new \\Exception('No name for the archive given');\n\t\t\n\t\tini_set('max_execution_time', 600);\n\t\tini_set('memory_limit', '512M');\n\t\tGO::session()->closeWriting();\n\n\t\t$sources = json_decode($params['sources'], true);\n\t\t\n\t\t$workingFolder = false;\n\t\t\n\t\t// Read the sources and create objects from them\n\t\t$sourceObjects = array();\n\t\t\n\t\t// The total filesize in bytes\n\t\t$totalFileSize = 0;\n\t\t\n\t\t// The maximum filesize that is allowed to zip (Default is 256MB)\n\t\t$maxFilesize = GO::config()->zip_max_file_size;\n\t\t\n\t\tfor($i=0;$i<count($sources);$i++){\n\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($sources[$i]);\n\t\t\tif(!$file) {\n\t\t\t\t$file = Folder::model()->findByPath($sources[$i], false, [], true);\n\t\t\t\tif(!$file) {\n\t\t\t\t\tthrow new NotFound(\"Couldn't find '\" . $sources[$i] . \"'\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$file->getPermissionLevel()) {\n\t\t\t\tthrow new AccessDenied();\n\t\t\t}\n\n\t\t\t$path = \\GO::config()->file_storage_path.$sources[$i];\n\t\t\t\n\t\t\t$sourceFile = \\GO\\Base\\Fs\\Base::createFromPath($path);\n\t\t\t\n\t\t\t// Increase the total filesize\n\t\t\t$totalFileSize += $sourceFile->size();\n\t\t\t\n\t\t\tif($totalFileSize >= $maxFilesize){\n\t\t\t\tthrow new \\Exception(sprintf(\n\t\t\t\t\t\\GO::t(\"The total size of the files that are selected to be zipped is too big. (Only %s is allowed.)\"),\n\t\t\t\t\t\\GO\\Base\\Util\\Number::formatSize($maxFilesize,2)\n\t\t\t\t));\n\t\t\t}\n\t\t\t\n\t\t\t// Set the workingFolder\n\t\t\tif(!$workingFolder){\n\t\t\t\t$workingFolder = $sourceFile->parent();\n\t\t\t}\n\t\t\t\n\t\t\t$sourceObjects[]= $sourceFile;\n\t\t}\n\t\t\n\t\t// Create the zipped temp file object\n\t\t$archiveFile = \\GO\\Base\\Fs\\File::tempFile($params['archive_name'],'zip');\n\t\tif($archiveFile->exists())\n\t\t\tthrow new \\Exception(sprintf(\\GO::t(\"Filename %s already exists\", \"files\"), $archiveFile->stripFileStoragePath()));\n\t\t\n\t\t// Create the zipfile\n\t\tif(\\GO\\Base\\Fs\\Zip::create($archiveFile, $workingFolder, $sourceObjects)){\n\t\t\t\n\t\t\t// Output download headers\n//\t\t\t\\GO\\Base\\Util\\Http::outputDownloadHeaders($archiveFile,false,true);\n//\t\t\t$archiveFile->output();\n\t\t\t$response['archive'] = $archiveFile->stripTempPath();\n\t\t\t$response['success'] = true;\n\t\t} else {\n\t\t\tthrow new \\Exception(\"ZIP creation failed\");\n\t\t}\n\t\t\n\t\treturn $response;\n\t}\n\n\n\tprotected function actionDecompress($params){\n\n\t\t//So other actions can run simultanuously\n\t\tGO::session()->closeWriting();\n\n\n\t\tif (!\\GO\\Base\\Util\\Common::isWindows())\n\t\t\tputenv('LANG=en_US.UTF-8');\n\n\t\t$sources = json_decode($params['decompress_sources'], true);\n\n\n\t\t$workingFolder = Folder::model()->findByPk($params['working_folder_id']);\n\t\t\n\t\tif(!$workingFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::WRITE_PERMISSION)){\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied(\"No permission to write in the target folder.\");\n\t\t}\n\n\t\t$workingPath = \\GO::config()->file_storage_path.$workingFolder->path;\n\t\tchdir($workingPath);\n\n\n\t\twhile ($filePath = array_shift($sources)) {\n\t\t\t$file = new \\GO\\Base\\Fs\\File(\\GO::config()->file_storage_path.$filePath);\n\t\t\tswitch(strtolower($file->extension())) {\n\t\t\t\tcase 'zip':\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t$folder = \\GO\\Base\\Fs\\Folder::tempFolder(uniqid());\n\t\t\t\t\t\n\t\t\t\t\tif(class_exists(\"\\ZipArchive\")){\n\t\t\t\t\t\t$zip = new \\ZipArchive;\n\t\t\t\t\t\t$zip->open($file->path());\n\t\t\t\t\t\t$zip->extractTo($folder->path());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t$this->_convertZipEncoding($folder);\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\tchdir($folder->path());\t\t\t\t\t\n\t\t\t\t\t\t$cmd = \\GO::config()->cmd_unzip.' -n '.escapeshellarg($file->path());\n\t\t\t\t\t\texec($cmd, $output, $ret);\n\t\t\t\t\t\tif($ret!=0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new \\Exception(\"Could not decompress\\n\".implode(\"\\n\",$output));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$items = $folder->ls();\n\t\t\t\t\t\n\t\t\t\t\tforeach($items as $item){\n\t\t\t\t\t\t$item->move(new \\GO\\Base\\Fs\\Folder($workingPath));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$folder->delete();\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gz':\n\t\t\t\tcase 'tgz':\n\t\t\t\t\t$cmd = \\GO::config()->cmd_tar.' zxf '.escapeshellarg($file->path());\n\t\t\t\t\texec($cmd, $output, $ret);\n\n\t\t\t\t\tif($ret!=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception(\"Could not decompress\\n\".implode(\"\\n\",$output));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tar':\n\t\t\t\t\t$cmd = \\GO::config()->cmd_tar.' xf '.escapeshellarg($file->path());\n\t\t\t\t\t\n\t\t\t\t\texec($cmd, $output, $ret);\n\n\t\t\t\t\tif($ret!=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception(\"Could not decompress\\n\".implode(\"\\n\",$output));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$workingFolder->syncFilesystem(true);\n\n\t\treturn array('success'=>true);\n\n\t}\n\t\n\tprivate function _convertZipEncoding(\\GO\\Base\\Fs\\Folder $folder, $charset='CP850'){\n\t\t$items = $folder->ls();\n\t\t\n\t\tforeach($items as $item){\n\t\t\t\n\t\t\tif(!\\GO\\Base\\Util\\StringHelper::isUtf8($item->name()))\n\t\t\t\t$item->rename(\\GO\\Base\\Util\\StringHelper::clean_utf8($item->name(), $charset));\n\n\t\t\tif($item->isFolder()){\n\t\t\t\t$this->_convertZipEncoding($item, $charset);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * The savemailas module can send attachments along to be stored as files with\n\t * a note, task, event etc.\n\t *\n\t * @param type $response\n\t * @param type $model\n\t * @param type $params\n\t */\n\tpublic function processAttachments(&$response, &$model, &$params){\n\t\t//Does this belong in the controller?\n\t\tif (!empty($params['tmp_files'])) {\n\t\t\t$tmp_files = json_decode($params['tmp_files'], true);\n\n\t\t\tif(count($tmp_files)){\n\t\t\t\t$folder_id = $this->checkModelFolder($model, true, true);\n\n\t\t\t\t$folder = Folder::model()->findByPk($folder_id);\n\n\t\t\t\twhile ($tmp_file = array_shift($tmp_files)) {\n\t\t\t\t\tif (!empty($tmp_file['tmp_file'])) {\n\n\t\t\t\t\t\t$file = new \\GO\\Base\\Fs\\File(\\GO::config()->tmpdir.$tmp_file['tmp_file']);\n\t\t\t\t\t\t$file->move(new \\GO\\Base\\Fs\\Folder(\\GO::config()->file_storage_path . $folder->path));\n\t\t\t\t\t\t$file->shortenFileName();\n\t\t\t\t\t\t$folder->addFile($file->name());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprotected function actionImages($params){\n\t\tif(isset($params[\"id\"])){\n\t\t\t$currentFile = \\GO\\Files\\Model\\File::model()->findByPk($params[\"id\"]);\n\t\t}else\n\t\t{\n\t\t\t$currentFile = \\GO\\Files\\Model\\File::model()->findByPath($params[\"path\"]);\n\t\t}\n\n\t\t$folder = $currentFile->folder();\n\n\t\t$thumbParams = json_decode($params['thumbParams'], true);\n\n\t\t$response[\"success\"]=true;\n\t\t$response['images']=array();\n\t\t$response['index']=$index=0;\n\n\t\tif(!isset($params[\"sort\"]))\n\t\t\t$params[\"sort\"]=\"name\";\n\n\t\tif(!isset($params[\"dir\"]))\n\t\t\t$params[\"dir\"]=\"ASC\";\n\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t->order($params[\"sort\"], $params[\"dir\"]);\n\n\t\t$stmt = $folder->files($findParams);\n\t\twhile($file = $stmt->fetch()){\n\t\t\tif($file->isImage()){\n\t\t\t\tif($file->id == $currentFile->id)\n\t\t\t\t\t$response['index']=$index;\n\n\t\t\t\t$index++;\n\n\t\t\t\t$response['images'][]=array(\n\t\t\t\t\t\"name\"=>$file->name,\n\t\t\t\t\t\"download_path\"=>$file->getDownloadURL(false),\n\t\t\t\t\t\"src\"=>$file->getThumbUrl($thumbParams)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn $response;\n\t}\n\t\n\t\n\t/**\n\t * Delete a single not. Must be a POST request\n\t *\n\t * @param int $id\n\t * @throws Exception\n\t * @throws \\GO\\Base\\Exception\\NotFound\n\t */\n\tprotected function actionDelete($id) {\n\n\t\tif (!GO::request()->isPost() && !GO::environment()->isCli()) {\n\t\t\tthrow new Exception('Delete must be a POST request');\n\t\t}\n\n\t\t$model = Folder::model()->findByPk($id);\n\t\tif (!$model)\n\t\t\tthrow new \\GO\\Base\\Exception\\NotFound();\n\n\t\t$model->delete();\n\n\t\techo $this->render('delete', array('success'=> true, 'model' => $model));\n\t}\n\n\t/**\n\t * @param $model\n\t * @return mixed\n\t */\n\tprotected function checkLoadPermissionLevel($model)\n\t{\n\t\treturn $model->checkPermissionLevel($model->isNew() ?\\GO\\Base\\Model\\Acl::CREATE_PERMISSION : \\GO\\Base\\Model\\Acl::READ_PERMISSION);\n\t}\n\n}\n"], "fixing_code": ["<?php\n\n\nnamespace GO\\Files\\Controller;\n\nuse GO\\Base\\Exception\\AccessDenied;\nuse GO\\Base\\Exception\\NotFound;\nuse go\\core\\http\\Client;\nuse go\\core\\http\\Request;\nuse go\\core\\http\\Response;\nuse go\\core\\util\\StringUtil;\nuse GO\\Email\\Model\\Account;\nuse GO\\Files\\Model\\File;\nuse go\\core\\fs\\Blob;\nuse go\\core\\fs\\File as GoFile;\nuse go\\core\\fs\\Folder;\nuse GO\\Email\\Controller\\MessageController;\nuse go\\modules\\community\\history\\Module;\nuse Exception;\n\nclass FileController extends \\GO\\Base\\Controller\\AbstractModelController {\n\n\tprotected $model = 'GO\\Files\\Model\\File';\n\t\n\tprotected function allowGuests() {\n\t\treturn array('download'); //permissions will be checked manually in that action\n\t}\n\t\n\tprotected function ignoreAclPermissions() {\n\t\treturn array('correctquotauser');\n\t}\n\t\n\tprotected function actionTest($params) {\n\n\t\t$md = new \\go\\core\\fs\\MetaData($this);\n\t\t$tag = $md->extractID3(__DIR__.'/test.mp3');\n\t\tvar_dump($tag->toArray());\n\t}\n\tprotected function actionExif(){\n\t\t\n\t\t$md = new \\go\\core\\fs\\MetaData($this);\n\t\t$exif = $md->extractExif(__DIR__.'/test.jpg');\n\t\t\n\t}\n\n\tpublic function actionCreateBlob($ids) {\n\t\t$ids = explode(',', $ids);\n\t\t$blobs = [];\n\t\tforeach($ids as $id) {\n\t\t\t$file = File::model()->findByPk($id);\n\n\t\t\t$fsFile = new GOFile($file->fsFile->path());\n\t\t\t$blob = Blob::fromFile($fsFile);\n\t\t\t$blob->save();\t\t\t\n\n\t\t\t$blobs[] = ['name' => $file->name, 'blobId' => $blob->id];\n\t\t}\n\n\t\treturn array_merge(['success' => true, 'blobs' => $blobs], $blob->toArray());\n\t}\n\t\n\t\n\tprotected function actionExpiredList($params){\n\t\t\t\t\n\t\t$store = \\GO\\Base\\Data\\Store::newInstance(\\GO\\Files\\Model\\File::model());\n\t\t$store->getColumnModel()->formatColumn('path', '$model->path', array(), array('first_name', 'last_name'));\n\n//\t\t$findParams = $store->getDefaultParams($params);\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()->ignoreAcl();\n\n\n\t\t$joinSearchCacheCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t->addRawCondition('`t`.`id`', '`sc`.`entityId`')\n\t\t\t\t\t->addCondition('entityTypeId', \\GO\\Files\\Model\\File::model()->modelTypeId(),'=','sc');\n\n\t\t$findParams->join(\\GO\\Base\\Model\\SearchCacheRecord::model()->tableName(), $joinSearchCacheCriteria, 'sc', 'INNER');\n\n\n\t\t$aclJoinCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t\t\t->addRawCondition('a.aclId', 'sc.aclId','=', false);\n\n\t\t$aclWhereCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t\t->addInCondition(\"groupId\", \\GO\\Base\\Model\\User::getGroupIds(\\GO::user()->id),\"a\", false);\n\n\t\t$findParams->join(\\GO\\Base\\Model\\AclUsersGroups::model()->tableName(), $aclJoinCriteria, 'a', 'INNER');\n\n\t\t$findParams->criteria(\\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t\t\t\t\t->addModel(\\GO\\Files\\Model\\Folder::model())\n\t\t\t\t\t\t\t\t->mergeWith($aclWhereCriteria));\n\n\t\t$findParams->group(array('t.id'))->order('mtime','DESC');\n\t\t\n\t\t$findParams->getCriteria()->addCondition('content_expire_date', time() ,'<');\n\n\t\t$store->setStatement (\\GO\\Files\\Model\\File::model()->find($findParams));\n\t\t\n\t\t$response = $store->getData();\n\t\t$response['total'] = $store->getTotal();\n\t\t\n\t\treturn $response;\n\t\t\n\t}\n\t\n\t/**\n\t * Will calculate the used diskspace per user\n\t * If no ID is passed diskspace will be recalculated for all user\n\t * @param integer $id id of the user to recalculate used space for\n\t */\n\tprotected function actionRecalculateDiskUsage($id=false) {\n\t\t\n\t\t\\GO::session()->closeWriting();\n\t\t\n\t\t$users = array();\n\t\tif(!empty($id)) {\n\t\t\t$user = \\GO\\Base\\Model\\User::model()->findByPk($id);\n\t\t\tif(!empty($user)) {\n\t\t\t\t$users[] = $user;\n\t\t\t}\n\t\t} else {\n\t\t\t$users = \\GO\\Base\\Model\\User::model()->find();\n\t\t}\n\t\t\n\t\tforeach($users as $user) {\n\t\t\tif($user->calculatedDiskUsage()->save())\n\t\t\t\techo $user->getName() . ' uses ' . $user->disk_usage. \"<br>\\n\";\n\t\t}\n\t}\n\t\n\tprotected function actionCorrectQuotaUser() {\n\t\t$time_start = microtime(true); \n\t\t$count = 0;\n\t\t\n\t\t$userFolder = \\GO\\Files\\Model\\Folder::model()->findByPath('users');\n\t\tforeach($userFolder->folders() as $homeFolder) {\n\t\t\t$homeId = $homeFolder->user_id;\n\t\t\t\n\t\t\t$walkSubfolders = function($folder) use($homeId, &$walkSubfolders, &$count) {\n\t\t\t\t\n\t\t\t\t//echo $folder->path.' -> '.$homeId.'<br />';\n\t\t\t\t$folder->quota_user_id = $homeId;\n\t\t\t\tif(!$folder->save()) {\n\t\t\t\t\tthrow new \\Exception(\"Could not save folder: \".var_export($folder->getValidationErrors(), true));\n\t\t\t\t}\n\n\t\t\t\tforeach($folder->folders() as $subFolder) {\n\t\t\t\t\t$walkSubfolders($subFolder);\t\t\t\t\t\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t};\n\t\t\t$walkSubfolders($homeFolder);\n\t\t}\n\t\t$time_end = microtime(true);\n\t\t$execution_time = ($time_end - $time_start);\n\t\t//echo '<b>'.$count.' Folders updated in:</b> '.$execution_time.' Seconds';\n\t}\n\t\n\tprotected function actionDisplay($params) {\n\t\t\n\t\t//custom fields send path as ID.\n\t\tif(!empty($params['id']) && !is_numeric($params['id'])){\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($params['id']);\n\t\t\t$params['id']=$file->id;\n\t\t}\n\t\t\n\t\treturn parent::actionDisplay($params);\n\t}\n\n\tprivate function isAnimatedGif($filename) {\n\t\tif(!($fh = @fopen($filename, 'rb')))\n\t\t\treturn false;\n\t\t$count = 0;\n\t\t//an animated gif contains multiple \"frames\", with each frame having a\n\t\t//header made up of:\n\t\t// * a static 4-byte sequence (\\x00\\x21\\xF9\\x04)\n\t\t// * 4 variable bytes\n\t\t// * a static 2-byte sequence (\\x00\\x2C)\n\n\t\t// We read through the file til we reach the end of the file, or we've found\n\t\t// at least 2 frame headers\n\t\twhile(!feof($fh) && $count < 2) {\n\t\t\t$chunk = fread($fh, 1024 * 100); //read 100kb at a time\n\t\t\t$count += preg_match_all('#\\x00\\x21\\xF9\\x04.{4}\\x00[\\x2C\\x21]#s', $chunk, $matches);\n\t\t}\n\n\t\tfclose($fh);\n\t\treturn $count > 1;\n\t}\n\t\n\tprotected function afterDisplay(&$response, &$model, &$params) {\n\n\t\t$response['data']['path'] = htmlspecialchars($model->path);\n\t\t$response['data']['size'] = $model->fsFile->size();\n\t\t$response['data']['extension'] = strtolower($model->fsFile->extension());\n\t\t$response['data']['type'] = \\GO::t($response['data']['extension'], 'base', 'filetypes');\n\t\t\n\t\t$response['data']['locked_user_name']=$model->lockedByUser ? $model->lockedByUser->name : '';\n\t\t$response['data']['locked']=$model->isLocked();\n\t\t$response['data']['unlock_allowed']=$model->unlockAllowed();\n\t\t\n\n\t\tif (!empty($model->random_code) && time() < $model->expire_time) {\n\t\t\t$response['data']['expire_time'] = \\GO\\Base\\Util\\Date::get_timestamp(\\GO\\Base\\Util\\Date::date_add($model->expire_time, -1),false);\n\t\t\t$response['data']['download_link'] = $model->emailDownloadURL;\n\t\t} else {\n\t\t\t$response['data']['expire_time'] = \"\";\n\t\t\t$response['data']['download_link'] = \"\";\n\t\t}\n\t\t\n\t\t$response['data']['url']=\\GO::url('files/file/download',array('id'=>$model->id), false, true);\n\n\t\tif ($model->fsFile->isImage()) {\n\t\t\tif($response['data']['extension'] == 'gif' && $this->isAnimatedGif(\\GO::config()->file_storage_path . $model->path)) {\n\t\t\t\t$response['data']['thumbnail_url'] = $model->getDownloadURL(false);\n\t\t\t} else {\n\t\t\t\t$response['data']['thumbnail_url'] = $model->thumbURL;\n\t\t\t}\n\t\t}else\n\t\t\t$response['data']['thumbnail_url'] = \"\";\n\t\t\n\t\t$response['data']['handler']='startjs:function(){'.$model->getDefaultHandler()->getHandler($model).'}:endjs';\n\t\t\n\t\ttry{\n\t\t\tif(\\GO::modules()->filesearch){\n\t\t\t\t$filesearch = \\GO\\Filesearch\\Model\\Filesearch::model()->findByPk($model->id);\n//\t\t\t\tif(!$filesearch){\n//\t\t\t\t\t$filesearch = \\GO\\Filesearch\\Model\\Filesearch::model()->createFromFile($model);\n//\t\t\t\t}\n\t\t\t\tif($filesearch){\n\t\t\t\t\t$response['data']=array_merge($filesearch->getAttributes('formatted'), $response['data']);\n\t\t\t\t\n\n\t\t\t\t\tif (!empty($params['query_params'])) {\n\t\t\t\t\t\t$qp = json_decode($params['query_params'], true);\n\t\t\t\t\t\tif (isset($qp['content_all'])){\n\n\t\t\t\t\t\t\t$c = new \\GO\\Filesearch\\Controller\\FilesearchController();\n\n\t\t\t\t\t\t\t$response['data']['text'] = $c->highlightSearchParams($qp, $response['data']['text']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else\n\t\t\t\t{\n\t\t\t\t\t$response['data']['text'] = \\GO::t(\"This file has not been indexed yet\", \"filesearch\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(\\Exception $e){\n\t\t\t\\GO::debug((string) $e);\n\t\t\t\n\t\t\t$response['data']['text'] = \"Index out of date. Please rebuild it using the admin tools.\";\n\t\t}\n\n\t\treturn parent::afterDisplay($response, $model, $params);\n\t}\n\n\tprotected function afterLoad(&$response, &$model, &$params) {\n\n\t\t$response['data']['path'] = $model->path;\n\t\t$response['data']['size'] = \\GO\\Base\\Util\\Number::formatSize($model->fsFile->size());\n\t\t$response['data']['extension'] = strtolower($model->fsFile->extension());\n\t\t$response['data']['type'] = \\GO::t($response['data']['extension'], 'base', 'filetypes');\n\t\t\n\t\t$response['data']['name']=$model->fsFile->nameWithoutExtension();\n\t\t\n\t\tif (!empty($model->user))\n\t\t\t$response['data']['username']=$model->user->name;\n\t\tif (!empty($model->mUser))\n\t\t\t$response['data']['musername'] = $model->mUser->name;\n\t\t$response['data']['locked_user_name']=$model->lockedByUser ? $model->lockedByUser->name : '';\n\t\t\n\t\t\n\t\t\n\t\t$fh = \\GO\\Files\\Model\\FileHandler::model()->findByPk(\n\t\t\t\t\t\tarray('extension'=>$model->extension, 'user_id'=>\\GO::user()->id));\n\t\tif($fh){\n\t\t\t$fileHandler = new $fh->cls;\n\t\t\t\n\t\t\t$response['data']['handlerCls']=$fh->cls;\n\t\t\t$response['data']['handlerName']=$fileHandler->getName();\n\t\t}else\n\t\t{\n\t\t\t$response['data']['handlerCls']=\"\";\n\t\t\t$response['data']['handlerName']=\"\";\n\t\t}\n\t\t\n\n\t\treturn parent::afterLoad($response, $model, $params);\n\t}\n\t\n\tprotected function beforeSubmit(&$response, &$model, &$params) {\n\t\t\n\t\tif(isset($params['name'])){\t\t\n\t\t\t$params['name'] = \\GO\\Base\\Fs\\File::stripInvalidChars($params['name']); // Strip invalid chars\n\t\t\tif(isset($params['extension'])) {\n\t\t\t\t$params['name'].='.'.$params['extension'];\n\t\t\t\t$model->extension = $params['extension'];\n\t\t\t} else if(!empty($model->fsFile->extension())) {\n\t\t\t\t$params['name'].='.'.$model->fsFile->extension();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(isset($params['lock'])){\n\t\t\t//GOTA sends lock parameter It does not know the user ID.\n\t\t\t$model->locked_user_id=empty($params['lock']) ? 0 : \\GO::user()->id;\n\t\t}\n\t\t\n\t\t\n\t\t$fh = \\GO\\Files\\Model\\FileHandler::model()->findByPk(array(\n\t\t\t'extension' => strtolower($model->extension), \n\t\t\t'user_id' => \\GO::user()->id\n\t\t));\n\t\t\n\t\tif(!$fh)\n\t\t\t$fh = new \\GO\\Files\\Model\\FileHandler();\n\t\t\n\t\t$fh->extension=strtolower($model->extension);\n\t\t\n\t\tif(isset($params['handlerCls']))\n\t\t\t$fh->cls=$params['handlerCls'];\n\t\t\n\t\tif(empty($params['handlerCls']))\n\t\t\t$fh->delete();\n\t\telse\n\t\t\t$fh->save();\n\t\t\n\t\treturn parent::beforeSubmit($response, $model, $params);\n\t}\n\n\tprotected function actionSaveAttachmentToTmp($params) {\n\n\t\t$tmpFolder = \\GO\\Files\\Model\\Folder::model()->tmpFolder();\n\t\tforeach($tmpFolder->files as $file) {\n\t\t\t//clean up older temp files\n\t\t\tif($file->mtime < strtotime(\"-4 hours\")) {\n\t\t\t\t$file->delete(true);\n\t\t\t}\n\t\t}\n\n\t\t$params['filename'] = \\GO\\Base\\Fs\\File::stripInvalidChars($params['filename']);\n\t\t$file = new \\GO\\Base\\Fs\\File(\\GO::config()->file_storage_path . $tmpFolder->path.'/'.$params['filename']);\n\t\t$file->parent()->create();\n\n\t\tif(empty($params['tmp_file'])){\n\t\t\t$account = Account::model()->findByPk($params['account_id']);\n\t\t\t$imap = $account->openImapConnection($params['mailbox']);\n\t\t\tif(!$imap->save_to_file($params['uid'], $file->path(), $params['number'], $params['encoding'])) {\n\t\t\t\tthrow new Exception(\"Could not save file from IMAP\");\n\t\t\t}\n\t\t}else\n\t\t{\n\t\t\t$tmpfile = new \\GO\\Base\\Fs\\File(\\GO::config()->tmpdir.$params['tmp_file']);\n\t\t\t$file = $tmpfile->copy($file->parent(), $file->name());\n\t\t\tif(!$file) {\n\t\t\t\tthrow new Exception(\"IO error\");\n\t\t\t}\n\t\t}\n\t\t$maxLength = go()->getDatabase()->getTable(\"fs_files\")->getColumn(\"name\")->length;\n\t\t$file->shortenFileName($maxLength);\n\n\t\t$dbFile = $tmpFolder->hasFile($file->name());\n\t\tif($dbFile) {\n\t\t\tFile::$deleteInDatabaseOnly = true;\n\t\t\t$dbFile->delete();\n\t\t}\n\t\t$dbFile = $tmpFolder->addFile($file->name(), true);\n\n\t\treturn ['success' => true, 'data' => $dbFile->getAttributes()];\n\t}\n\t\n\tprotected function actionHandlers($params){\n\t\tif(!empty($params['path'])){\n\t\t\t$folder = \\GO\\Files\\Model\\Folder::model()->findByPath(dirname($params['path']));\n\t\t\t$file = $folder->hasFile(\\GO\\Base\\Fs\\File::utf8Basename($params['path']));\n\t\t}else\n\t\t{\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($params['id'], false, true);\n\t\t}\n\n\t\tif(empty($params['all'])){\n\t\t\t$fileHandlers = array($file->getDefaultHandler());\n\t\t}else\n\t\t{\n\t\t\t$fileHandlers = $file->getHandlers();\n\t\t}\n//\tvar_dump($fileHandlers);\n\t\t\n\t\t$store = new \\GO\\Base\\Data\\ArrayStore();\n\t\t\n\t\tforeach($fileHandlers as $fileHandler){\t\n\t\t\t$store->addRecord(array(\n\t\t\t\t\t'name'=>$fileHandler->getName(),\n\t\t\t\t\t'handler'=>$fileHandler->getHandler($file),\n\t\t\t\t\t'iconCls'=>$fileHandler->getIconCls(),\n\t\t\t\t\t'cls'=>  get_class($fileHandler),\n\t\t\t\t\t'extension'=>$file->extension\n\t\t\t));\t\n\t\t}\t\n\t\t\n\t\treturn $store->getData();\t\t\n\t}\n\t\n\tprotected function actionSaveHandler($params){\n//\t\t\\GO::config()->save_setting('fh_'.$, $value)\n\t\t\n\t\t$fh = \\GO\\Files\\Model\\FileHandler::model()->findByPk(\n\t\t\t\t\t\tarray('extension'=>strtolower($params['extension']), 'user_id'=>\\GO::user()->id));\n\t\t\n\t\tif(!$fh)\n\t\t\t$fh = new \\GO\\Files\\Model\\FileHandler();\n\t\t\n\t\t$fh->extension=strtolower($params['extension']);\n\t\t$fh->cls=$params['cls'];\n\t\treturn array('success'=>empty($params['cls']) ? $fh->delete() : $fh->save());\n\t}\n\t\n\t\n\tprotected function actionOpen($params) {\n\t\tif(!empty($params['path'])) {\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($params['path']);\n\t\t} else\n\t\t{\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($params['id']);\n\t\t}\n\n\t\tif(!$file){\n\t\t\tthrow new \\Exception(\"File not found\");\n\t\t}\n\t\t\n\t\t$response = [\n\t\t\t\t'success' => true,\n\t\t\t\t'file' => $file->getAttributes(),\n\t\t\t\t'handler' => 'startjs:function(){'.$file->getDefaultHandler()->getHandler($file).'}:endjs'\n\t\t];\n\t\t\n\t\treturn $response;\n\t}\n\t\n\n\tprotected function actionDownload($params) {\n\n\t\t\\GO::session()->closeWriting();\n\t\t\n\t\t\\GO::setMaxExecutionTime(0);\n\n\t\ttry {\n\t\t\tif (isset($params['path'])) {\n\t\t\t\t$folder = \\GO\\Files\\Model\\Folder::model()->findByPath(dirname($params['path']));\n\t\t\t\tif (!$folder) {\n\t\t\t\t\tthrow new NotFound($params['path']);\n\t\t\t\t}\n\t\t\t\t$file = $folder->hasFile(\\GO\\Base\\Fs\\File::utf8Basename($params['path']));\n\t\t\t} else {\n\t\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($params['id'], false, true);\n\t\t\t}\n\n\t\t\tif (!$file)\n\t\t\t\tthrow new \\GO\\Base\\Exception\\NotFound();\n\n\t\t\tif (!empty($params['random_code'])) {\n\t\t\t\tif ($file->random_code != $params['random_code'])\n\t\t\t\t\tthrow new \\GO\\Base\\Exception\\NotFound();\n\n\t\t\t\tif (time() > $file->expire_time)\n\t\t\t\t\tthrow new \\Exception(\\GO::t(\"Sorry, the download link for this file has expired\", \"files\"));\n\t\t\t} else {\n\t\t\t\t$public = substr($file->path, 0, 6) == 'public';\n\n\t\t\t\tif (!$public) {\n\t\t\t\t\tif (!\\GO::user() || !$file->checkPermissionLevel(\\GO\\Base\\Model\\Acl::READ_PERMISSION)) {\n\t\t\t\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$ua_info = \\donatj\\UserAgent\\parse_user_agent();\n\t\t\tif($ua_info['browser'] == 'Safari' && $file->extension == 'webm' && !strstr(Request::get()->getUri(), 'webm')) {\n\t\t\t\t//workaround webm bug in safari that needs a webm extension :(\n\t\t\t\theader(\"Location: \" . str_replace('index.php?', 'index.php/' . rawurlencode($file->name) . '?', Request::get()->getFullUrl()));\n\t\t\t\texit();\n\t\t\t}\n\n\n\t\t\t// Show the file inside the browser or give it as a download\n\t\t\t$inline = true; // Defaults to show inside the browser\n\t\t\tif (isset($params['inline']) && ((bool)$params['inline'] === false || $params['inline'] == 'false')) {\n\t\t\t\t$inline = false;\n\t\t\t}\n\n//\t\t\t\\GO\\Base\\Util\\Http::outputDownloadHeaders($file->fsFile, $inline, !empty($params['cache']));\n\t\t\t$file->open();\n\n\t\t\t$this->fireEvent('beforedownload', array(\n\t\t\t\t&$this,\n\t\t\t\t&$params,\n\t\t\t\t&$file\n\t\t\t));\n\n\t\t\tif(\\go\\core\\model\\Module::isInstalled('community', 'history')) {\n\t\t\t\tModule::logActiveRecord($file, 'download');\n\t\t\t}\n\n\t\t\t//Supports range download\n\t\t\t$coreFsFile = new \\go\\core\\fs\\File($file->fsFile->path());\n\n\t\t\t// prevent html to render on same domain having access to all global JS stuff\n\t\t\tif($coreFsFile->getContentType() == 'text/html') {\n\t\t\t\t$inline = false;\n\t\t\t}\n\n\t\t\t$coreFsFile->output(true, !array_key_exists('cache', $params) || !empty($params['cache']), [], $inline);\n\n\t\t}catch(NotFound $e) {\n\t\t\tResponse::get()->setStatus(404);\n\n\t\t\techo $e->getMessage();\n\n\t\t}catch (AccessDenied $e) {\n\t\t\tResponse::get()->setStatus(403);\n\n\t\t\techo $e->getMessage();\n\n\t\t}catch(\\Throwable $e) {\n\t\t\tResponse::get()->setStatus(500);\n\n\t\t\techo $e->getMessage();\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param type $params \n\t * @todo\n\t */\n\tprotected function actionCreateDownloadLink($params){\n\t\t\n\t\t$response=array();\n\t\t\n\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($params['id']);\n\t\t\n\t\t$url = $file->getEmailDownloadURL(true,\\GO\\Base\\Util\\Date::date_add($params['expire_time'],1),$params['delete_when_expired']);\n\t\t\n\t\t$response['url']=$url;\n\t\t$response['success']=true;\n\t\t\n\t\treturn $response;\n\t\t\n\t}\t\n\t\n\t/**\n\t * This action will generate multiple Email Download link and return a JSON\n\t * response with the generated links in the email subject\n\t * @param array $params\n\t * - string ids: json encode file ids to mail\n\t * - timestamp expire_time: chosen email link expire time \n\t * - int template_id: id of used template\n\t * - int alias_id: id of alias to mail from\n\t * - string content_type : html | plain  \n\t * @return StringHelper Json response\n\t */\n\tprotected function actionEmailDownloadLink($params){\n\t\t$msgController = new MessageController();\n\t\t$templateContent = $msgController->loadTemplate($params);\n\t\t$files = \\GO\\Files\\Model\\File::model()->findByAttribute('id', json_decode($params['ids']));\n\t\t\n\t\t$html=$params['content_type']=='html';\n\t\t$bodyindex = $html ? 'htmlbody' : 'plainbody';\n\t\t$lb = $html ? '<br />' : \"\\n\";\n\n\t\t$text = $html ? \\GO::t(\"Click on the link to download the file\", \"files\") : \\GO::t(\"Click the secured link below or copy it to your browser's address bar to download the file.\", \"files\");\n\t\t$linktext = $html ? \"<ul>\" : $lb;\n\t\t\n\t\tforeach($files as $file) {\n\t\t\t$url = $file->getEmailDownloadURL($html,\\GO\\Base\\Util\\Date::date_add($params['expire_time'],1),$params['delete_when_expired']);\n\t\t\t$linktext .= $html ?  '<li><a href=\"'.$url.'\">'.$file->name.'</a></li>'.$lb : $url.$lb;\n\t\t}\n\t\t$linktext .= $html ? \"</ul>\" : \"\\n\";\n\t\t$text .= ' ('.\\GO::t(\"possible until\", \"files\").' '.\\GO\\Base\\Util\\Date::get_timestamp(\\GO\\Base\\Util\\Date::date_add($file->expire_time,-1), false).')'.$lb;\n\t\t$text .= $linktext;\n\n\t\t$params['body']= $text;\n\n    $msgController = new MessageController();\n    $response = $msgController->loadTemplate($params);\n\n//\t\t$response['data'][$bodyindex]=$text;\n\t\t\t\t\n\t\t$response['data']['subject'] = \\GO::t(\"Download link\", \"files\"); //.' '.$file->name;\n\t\t$response['success']=true;\n\t\t\n\t\treturn $response;\n\t}\n\t\n\t\n\tpublic function actionRecent($params){\n\t\t\n\t\t$start = !empty($params['start']) ? $params['start'] : 0;\n\t\t$limit = !empty($params['limit']) ? $params['limit'] : 20;\n\t\t\n\t\t$store = \\GO\\Base\\Data\\Store::newInstance(\\GO\\Files\\Model\\File::model());\n\n\t\t$store->getColumnModel()->formatColumn('path', '$model->path', array(), array('first_name', 'last_name'));\n\t\t$store->getColumnModel()->formatColumn('weekday', '$fullDays[date(\"w\", $model->mtime)].\" \".\\GO\\Base\\Util\\Date::get_timestamp($model->mtime, false);', array('fullDays'=>\\GO::t(\"full_days\")),array('first_name', 'last_name'));\n\t\t\n\t\t$store->setStatement(\\GO\\Files\\Model\\File::model()->findRecent($start,$limit));\n\n\t\t$response = $store->getData();\n\t\t\n\t\t$store->setStatement(\\GO\\Files\\Model\\File::model()->findRecent());\n\t\t$response['total'] = $store->getTotal();\n\t\t\n\t\treturn $response;\n\t}\n\t\n\tpublic function actionCleanup() {\n\t\t\n\t\t$cleanupRoot = \\GO::config()->file_storage_path.'cleanup/';\n\t\t\n\t\t\\GO\\Files\\Model\\File::$deleteInDatabaseOnly = true;\n\t\t\t\t\t\t\n\t\t\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance();\n\t\t\n\t\t\n\t\t$findCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()->addRawCondition(\"t.name REGEXP '^.+ \\\\\\([0-9]+\\\\\\)\\\\\\..+'\");\n\t\t$findParams->criteria($findCriteria);\n\t\t$stmt = \\GO\\Files\\Model\\File::model()->find($findParams);\n\t\t\n\t\tforeach ($stmt as $copySubfixFile) {\n\t\t\t\n\t\t\t\n\t\t\t$name = preg_replace('/(\\w+) (\\\\([0-9]+\\)).(\\w+)/i', '${1}.$3', $copySubfixFile->name);\n\t\t\t\n\t\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance();\n\t\t\t$findCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()->addCondition('name', $name)->addCondition('folder_id', $copySubfixFile->folder_id);\n\t\t\t$findParams->criteria($findCriteria);\n\t\t\t$stmt2 = \\GO\\Files\\Model\\File::model()->find($findParams);\n\t\t\t\n\t\t\tforeach ($stmt2 as $file) {\n\t\t\t\t\n\t\t\t\tif($file->fsFile->md5Hash() == $copySubfixFile->fsFile->md5Hash()) {\n\t\t\t\t\techo $copySubfixFile->path . ' ## ' . $copySubfixFile->folder_id. \"<br/>\";\n\t\t\t\t\t\n\t\t\t\t\t$cleanupPath = $cleanupRoot.$copySubfixFile->folder->getFullPath(); //projects2/Projectnaam/bestand (1).jpg\n\t\t\t\t\t\n\t\t\t\t\t$folderTo = new \\GO\\Base\\Fs\\Folder($cleanupPath);\n\t\t\t\t\t$folderTo->create();\n\t\t\t\t\t\n\t\t\t\t\tif($folderTo->exists()) {\n\t\t\t\t\t\tif(!$copySubfixFile->fsFile->move($folderTo)) {\n\t\t\t\t\t\t\tthrow new Exception('file move error from: '. $copySubfixFile->path . ' to '. $folderTo->getFullPath());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$copySubfixFile->delete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Exception('Folder do not exists: '.$cleanupPath);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * @param $params\n\t * @throws AccessDenied\n\t * @throws \\go\\core\\exception\\NotFound\n\t */\n\tpublic function actionConvert($params)\n\t{\n\t\t$fileId = !empty($params['id']) ? $params['id'] : 0;\n\t\t$format = !empty($params['format']) ? $params['format'] : 'pdf';\n\n\t\t//check if file exists\n\t\t$fileRecord = \\GO\\Files\\Model\\File::model()->findByPk($fileId);\n\t\tif (!$fileRecord) {\n\t\t\tthrow new \\go\\core\\exception\\NotFound();\n\t\t}\n\n\t\t//check user permissions\n\t\tif (!\\GO::user() || !$fileRecord->checkPermissionLevel(\\GO\\Base\\Model\\Acl::READ_PERMISSION)) {\n\t\t\tthrow new AccessDenied();\n\t\t}\n\n\t\t$nameWithoutExtension = $fileRecord->fsFile->nameWithoutExtension();\n\t\t$outputFileName = $nameWithoutExtension . '.' . $format;\n\n\t\t//create temporary file\n\t\t$tmpFile = \\GO\\Base\\Fs\\File::tempFile();\n\n\t\t//convert file -> put output to temporary\n\t\t$fileRecord->convertTo($tmpFile, $format);\n\n\t\t$outputFileRecord = $fileRecord->folder->addFilesystemFile($tmpFile, true, $outputFileName);\n\t\tif (!$outputFileRecord) {\n\t\t\tthrow new Exception('File move error from: '. $tmpFile->path() . ' to '. $fileRecord->folder->getFullPath());\n\t\t}\n\n\t\t$response['file'] = $outputFileRecord->getAttributes();\n\t\t$response['success'] = true;\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * @param $params\n\t * @throws AccessDenied\n\t * @throws \\go\\core\\exception\\NotFound\n\t */\n\tpublic function actionConvertAndDownload($params)\n\t{\n\t\t$fileId = !empty($params['id']) ? $params['id'] : 0;\n\t\t$format = !empty($params['format']) ? $params['format'] : 'pdf';\n\n\t\t//check if file exists\n\t\t$fileRecord = \\GO\\Files\\Model\\File::model()->findByPk($fileId);\n\t\tif (!$fileRecord) {\n\t\t\tthrow new \\go\\core\\exception\\NotFound();\n\t\t}\n\n\t\t//check user permissions\n\t\tif (!\\GO::user() || !$fileRecord->checkPermissionLevel(\\GO\\Base\\Model\\Acl::READ_PERMISSION)) {\n\t\t\tthrow new AccessDenied();\n\t\t}\n\n\t\t//create temporary file\n\t\t$tmpFile = \\GO\\Base\\Fs\\File::tempFile();\n\n\t\t//convert file -> put output to temporary\n\t\t$fileRecord->convertTo($tmpFile, $format);\n\n\t\t//get pdf file name\n\t\t$nameWithoutExtension = $fileRecord->fsFile->nameWithoutExtension();\n\t\t$outputFileName = $nameWithoutExtension . '.' . $format;\n\n\t\t//override previous headers because tempoary\n\t\t$extraHeaders = [\n\t\t\t'Content-Disposition' => 'inline; filename=\"' . $outputFileName . '\"',\n\t\t];\n\n\t\t//download\n\t\t\\GO\\Base\\Util\\Http::outputDownloadHeaders($tmpFile, true, !empty($params['cache']), $extraHeaders);\n\t\t$tmpFile->output();\n\t}\n}\n\n", "<?php\n\n\nnamespace GO\\Files\\Controller;\n\nuse Exception;\nuse GO;\nuse GO\\Base\\Db\\FindCriteria;\nuse GO\\Base\\Exception\\AccessDenied;\nuse go\\core\\fs\\Blob;\nuse go\\core\\jmap\\Entity;\nuse go\\core\\model\\Alert as CoreAlert;\nuse go\\core\\orm\\SearchableTrait;\nuse go\\core\\orm\\EntityType;\nuse go\\core\\util\\StringUtil;\nuse GO\\Files\\Model\\Folder;\n\nclass FolderController extends \\GO\\Base\\Controller\\AbstractModelController {\n\n\tprotected $model = 'GO\\Files\\Model\\Folder';\n\t\n\t\n\n\tprotected function allowGuests() {\n\t\tif($this->isCli())\n\t\t\treturn array('syncfilesystem', 'removeempty');\n\t\telse\n\t\t\treturn parent::allowGuests();\n\t}\n\n  protected function allowWithoutModuleAccess() {\n    return ['images'];\n  }\n\n\n\tpublic function actionRemoveEmpty() {\n\n\t\t\\GO\\Base\\Fs\\File::setAllowDeletes(false);\n\t\tGO::session()->runAsRoot();\n\n\t\t// Speed things up.\n\t\tEntity::$trackChanges = false;\n\t\t\\go\\modules\\community\\history\\Module::$enabled = false;\n\n\t\t$count = $total = $this->removeEmpty();\n\t\twhile($count != 0) {\n\t\t\t$count = $this->removeEmpty();\n\t\t\t$total += $count;\n\t\t}\n\n\t\techo \"Removed \" . $count .\" empty folders\\n\";\n\n\t}\n\n\tprivate function removeEmpty() {\n\t\t$ids = go()->getDbConnection()->query(\"select id FROM fs_folders f\n    where not exists(\n            select * from fs_folders sub where sub.parent_id=f.id\n        ) and\n        not exists(\n                select * from fs_files fi where fi.folder_id=f.id\n            )\")->fetchAll(\\PDO::FETCH_COLUMN);\n\n\t\tif(empty($ids)) {\n\t\t\techo \"Nothing empty\\n\";\n\t\t\treturn;\n\t\t}\n\n\t\t$count = 0;\n\t\t$folders = Folder::model()->findByAttribute('id', $ids);\n\t\tforeach($folders as $folder) {\n\n\t\t\tif($folder->hasFolderChildren() || $folder->hasFileChildren()) {\n\t\t\t\t//should never happen\n\t\t\t\tvar_dump($folder->getAttributes());\n\t\t\t\tthrow new \\Exception(\"FOlder has children!\");\n\t\t\t}\n\t\t\t$folder->readonly= true;//prevent acl delete\n\t\t\techo \".\";\n\t\t\t$folder->delete(true);\n\t\t\t$count++;\n\t\t}\n\n\t\techo \"\\n\";\n\n\t\treturn $count;\n\t}\n\n\tprotected function actionGetURL($path){\n\t\t\n\t\tif (substr($path,0,1)=='/')\n\t\t\t$path = substr($path,1);\n\t\tif (substr($path,-1,1)=='/')\n\t\t\t$path = substr($path,0,-1);\n\t\t\n\t\t$folderModel = Folder::model()->findByPath($path,true);\n\t\t\n\t\treturn array('success'=>true,'url'=>  \\GO\\Base\\Util\\Http::addParamsToUrl($folderModel->getExternalURL(),array('GOSID'=>session_id(), 'security_token'=>\\GO::session()->values['security_token'])));\n\t}\n\t\n\tprotected function actionCache($params){\n\t\t\\GO\\Files\\Model\\SharedRootFolder::model()->rebuildCache(\\GO::user()->id);\n\t}\n\n\tprotected function actionSyncFilesystem($params){\t\n\t\t\n\t\tif(!$this->isCli() && !\\GO::user()->isAdmin())\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\t\t\n\t\t$oldAllowDeletes = \\GO\\Base\\Fs\\File::setAllowDeletes(false);\n\n\t\t\\GO::$disableModelCache=true; //for less memory usage\n\t\t//disable history logging\n\t\tini_set('max_execution_time', '0');\n\n\t\t\\GO::session()->runAsRoot();\n\n\t\tif(isset($params['path'])){\n\t\t\t$folders = array($params['path']);\n\t\t}else\n\t\t{\n//\t\t\t$folders = array('users','projects2','addressbook','notes','tickets', 'calendar', 'tasks', 'projects', 'log');\n\n\t\t\t$folders = go()->getDbConnection()->selectSingleValue('name')\n\t\t\t\t->from('fs_folders')\n\t\t\t\t->where('(parent_id=0 OR parent_id is null) and name != \"billing\" and name != \"email\"')\n\t\t\t\t->all();\n\n\t\t\t$billingFolder = new \\GO\\Base\\Fs\\Folder(\\GO::config()->file_storage_path.'billing');\n\t\t\tif($billingFolder->exists()){\n\t\t\t\t$bFolders = $billingFolder->ls();\n\n\t\t\t\tforeach($bFolders as $folder){\t\t\n\t\t\t\t\t\tif($folder->isFolder() && $folder->name()!='notifications'){\n\t\t\t\t\t\t\t$folders[]='billing/'.$folder->name();\n\t\t\t\t\t\t}\n\t\t\t\t}\t\t\n\t\t\t}\n\t\t}\n\n\t\techo \"<pre>\";\n\t\tforeach($folders as $name){\n\t\t\techo \"Syncing \".$name.\"\\n\";\n\t\t\ttry{\n\t\t\t\t$folder = Folder::model()->findByPath($name, true);\n\t\t\t\t\n\t\t\t\tif(!$folder)\n\t\t\t\t\tthrow new \\Exception(\"Could not find or create folder\");\n\t\t\t\t\n\t\t\t\t$folder->syncFilesystem(true);\n\t\t\t\t\n\t\t\t\tEntityType::push();\n\t\t\t}\n\t\t\tcatch(\\Exception $e){\n\t\t\t\tif (PHP_SAPI != 'cli')\n\t\t\t\t\techo \"<span style='color:red;'>\".$e->getMessage().\"</span>\\n\";\n\t\t\t\telse\n\t\t\t\t\techo $e->getMessage().\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\techo \"Done\\n\";\n\n\n\t\tif(!isset($params['path'])){\n\t\t\t\\GO\\Base\\Fs\\File::setAllowDeletes($oldAllowDeletes);\n\t\t\t$folders = array('email', 'billing/notifications');\n\n\t\t\tforeach($folders as $name){\n\n\t\t\t\techo \"Deleting \".$name.\"\\n\";\n\t\t\t\tFolder::$deleteInDatabaseOnly=true;\n\t\t\t\t\\GO\\Files\\Model\\File::$deleteInDatabaseOnly=true;\n\t\t\t\ttry{\n\t\t\t\t\t$folder = Folder::model()->findByPath($name);\n\t\t\t\t\tif($folder)\n\t\t\t\t\t\t\t$folder->delete();\n\n\t\t\t\t\tEntityType::push();\n\t\t\t\t}\n\t\t\t\tcatch(\\Exception $e){\n\t\t\t\t\tif (PHP_SAPI != 'cli')\n\t\t\t\t\t\techo \"<span style='color:red;'>\".$e->getMessage().\"</span>\\n\";\n\t\t\t\t\telse\n\t\t\t\t\t\techo $e->getMessage().\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic function actionDeleteInvalid(){\n\t\t$folders = array('email', 'billing/notifications');\n\n\t\tforeach($folders as $name){\n\n\t\t\techo \"Deleting \".$name.\"\\n\";\n\t\t\tFolder::$deleteInDatabaseOnly=true;\n\t\t\t\\GO\\Files\\Model\\File::$deleteInDatabaseOnly=true;\n\t\t\ttry{\n\t\t\t\t$folder = Folder::model()->findByPath($name);\n\t\t\t\tif($folder)\n\t\t\t\t\t\t$folder->delete();\n\t\t\t}\n\t\t\tcatch(\\Exception $e){\n\t\t\t\tif (PHP_SAPI != 'cli')\n\t\t\t\t\techo \"<span style='color:red;'>\".$e->getMessage().\"</span>\\n\";\n\t\t\t\telse\n\t\t\t\t\techo $e->getMessage().\"\\n\";\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance();\n\n\t\t$findParams->getCriteria()->addCondition('parent_id', null,'IS');\n\n\t\t$stmt = Folder::model()->find($findParams);\n\n\t\tforeach($stmt as $folder){\n\n\t\t\tif(!$folder->fsFolder->exists()){\n\n\t\t\t\techo \"Deleting \".$folder->path.\"\\n\";\n\t\t\t\t$folder->delete();\n\t\t\t}\n\n\t\t}\t\n\t}\n\n\tprivate function _getExpandFolderIds($params){\n\t\t$expandFolderIds=array();\n\t\tif(!empty($params['expand_folder_id']) && $params['expand_folder_id']!='shared') {\n\t\t\t$expandFolderIds=  Folder::model()->getFolderIdsInPath($params['expand_folder_id']);\n\t\t}\n\t\treturn $expandFolderIds;\n\t}\n\n\tprivate function _buildSharedTree($expandFolderIds){\n\t\t\n\t\t\n\t\t\\GO\\Files\\Model\\SharedRootFolder::model()->rebuildCache(\\GO::user()->id);\n\t\t\n\t\t$response=array();\n\t\t\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t->joinRelation('sharedRootFolders')\n\t\t\t\t\t\t->ignoreAcl()\n\t\t\t\t\t\t->order('name','ASC')\n\t\t\t\t\t\t->limit(500);\n\t\t\n\t\t$findParams->getCriteria()\n\t\t\t\t\t->addCondition('user_id', \\GO::user()->id,'=','sharedRootFolders');\n\t\t\n\t\t\n\t\t\n\t\t$shares = Folder::model()->find($findParams);\n\t\tforeach($shares as $folder){\n\t\t\t$node = $this->_folderToNode($folder, $expandFolderIds, false);\n\t\t\t$node['path'] = $folder->path;\n\t\t\t$response[]=$node;\n\t\t}\n\n\t\treturn $response;\n\n\t}\n\n\n\tprotected function actionTree($params) {\n\n\t\t//refresh forces sync with db\n\t\tif(!empty($params['sync_folder_id'])){\n\t\t\tif($params['sync_folder_id']==\"shared\"){\n\t\t\t\t\\GO\\Files\\Model\\SharedRootFolder::model()->rebuildCache(\\GO::user()->id, true);\n\t\t\t}else\n\t\t\t{\n\t\t\t\tif(empty(GO::config()->files_disable_filesystem_sync)){\n\t\t\t\t\t$syncFolder = Folder::model()->findByPk($params['sync_folder_id']);\n\t\t\t\t\tif($syncFolder)\n\t\t\t\t\t\t$syncFolder->syncFilesystem();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$response = array();\n\n\t\t$expandFolderIds = $this->_getExpandFolderIds($params);\n\n\t\t$showFiles = isset($params['showFiles']);\n\n\t\tswitch ($params['node']) {\n\t\t\tcase 'shared':\n\t\t\t\t$response=$this->_buildSharedTree($expandFolderIds);\n\t\t\t\tbreak;\n\t\t\tcase 'root':\n\t\t\t\tif (!empty($params['root_folder_id'])) {\n\t\t\t\t\t$folder = Folder::model()->findByPk($params['root_folder_id']);\n//\t\t\t\t\t$folder->checkFsSync();\n\t\t\t\t\t$node = $this->_folderToNode($folder, $expandFolderIds, true, $showFiles);\n\t\t\t\t\t$response[] = $node;\n\t\t\t\t} else {\n\t\t\t\t\t$folder = Folder::model()->findHomeFolder(\\GO::user());\n\n//\t\t\t\t\t$folder->checkFsSync();\n\n\t\t\t\t\t$node = $this->_folderToNode($folder, $expandFolderIds, true, $showFiles);\n\t\t\t\t\t$node['text'] = \\GO::t(\"Personal\", \"files\");\n\t\t\t\t\t$node['iconCls'] = 'ic-home';\n\t\t\t\t\t$node['path'] = $folder->path;\n\t\t\t\t\t$response[] = $node;\n\n\n\t\t\t\t\t$node = array(\n\t\t\t\t\t\t\t'text' => \\GO::t(\"Shared\", \"files\"),\n\t\t\t\t\t\t\t'id' => 'shared',\n\t\t\t\t\t\t\t'readonly' => true,\n\t\t\t\t\t\t\t'draggable' => false,\n\t\t\t\t\t\t\t'allowDrop' => false,\n\t\t\t\t\t\t\t'parent_id'=>0,\n\t\t\t\t\t\t\t'iconCls' => 'ic-folder-shared',\n\t\t\t\t\t\t\t'path'=>\"shared\"\t\t\t\t\t\t\t\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\t//expand shares for non admins only. Admin may see too many folders.\n\t\t\t\t\tif(!\\GO::user()->isAdmin()){\n\t\t\t\t\t\t$node['expanded']=true;\n\t\t\t\t\t\t$node['children']=$this->_buildSharedTree($expandFolderIds);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$response[] = $node;\n\n\t\t\t\t\tif (GO::config()->files_show_addressbooks && GO::modules()->addressbook) {\n\t\t\t\t\t\t$contactsFolder = Folder::model()->findByPath('addressbook');\n\n\t\t\t\t\t\tif ($contactsFolder) {\n\t\t\t\t\t\t\t$node = $this->_folderToNode($contactsFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t\t$node['path'] = $contactsFolder->path;\n\t\t\t\t\t\t\t$node['text'] = \\GO::t(\"Address book\", \"addressbook\");\n\t\t\t\t\t\t\t$response[] = $node;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (GO::config()->files_show_projects && GO::modules()->projects) {\n\t\t\t\t\t\t$projectsFolder =  Folder::model()->findByPath('projects');\n\n\t\t\t\t\t\tif ($projectsFolder) {\n\t\t\t\t\t\t\t$node = $this->_folderToNode($projectsFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t\t$node['path'] = $projectsFolder->path;\n\t\t\t\t\t\t\t$node['text'] = \\GO::t(\"projects\", \"projects\");\n\t\t\t\t\t\t\t$response[] = $node;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\tif (GO::config()->files_show_projects && GO::modules()->projects2) {\n\t\t\t\t\t\t$projectsFolder = Folder::model()->findByPath('projects2');\n\n\t\t\t\t\t\tif ($projectsFolder) {\n\t\t\t\t\t\t\t$node = $this->_folderToNode($projectsFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t\t\t$node['path'] = $projectsFolder->path;\n\t\t\t\t\t\t\t$node['text'] = \\GO::t(\"Projects\", \"projects2\");\n\t\t\t\t\t\t\t$response[] = $node;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(\\GO::user()->isAdmin()){\n\t\t\t\t\t\t$logFolder = Folder::model()->findByPath('log', true);\n//\t\t\t\t\t\t$logFolder->syncFilesystem();\n\t\t\t\t\t\t\n\t\t\t\t\t\t$node = $this->_folderToNode($logFolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\t$node['path'] = $logFolder->path;\n\t\t\t\t\t\t$node['text']=\\GO::t(\"Log files\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t$response[]=$node;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$folder = Folder::model()->findByPk($params['node']);\n\t\t\t\tif(!$folder)\n\t\t\t\t\treturn false;\n\t\t\t\t\n//\t\t\t\t$folder->checkFsSync();\n\n\t\t\t\t$stmt = $folder->getSubFolders(\\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t\t->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ASC')));\n\n\t\t\t\twhile ($subfolder = $stmt->fetch()) {\n\t\t\t\t\t$response[] = $this->_folderToNode($subfolder, $expandFolderIds, false, $showFiles);\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tif ($showFiles) {\n\t\t\t\t\t\t$response = array_merge($response, $this->_addFileNodes($folder));\n\t\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\tprivate function _folderToNode($folder, $expandFolderIds=array(), $withChildren=true, $withFiles = false) {\n\t\t$expanded = $withChildren || in_array($folder->id, $expandFolderIds);\n\t\t$node = array(\n\t\t\t\t'text' => $folder->name,\n\t\t\t\t'id' => $folder->id,\n\t\t\t\t'draggable' => false,\n\t\t\t\t'iconCls' => !$folder->acl_id || $folder->readonly ? 'ic-folder' : 'ic-folder-shared',\n\t\t\t\t'expanded' => $expanded,\n\t\t\t\t'parent_id'=>$folder->parent_id,\n\t\t\t\t'path'=>$folder->path\n\t\t);\n\n\t\tif ($expanded) {\n\t\t\t$node['children'] = array();\n\t\t\t$stmt = $folder->getSubFolders(\\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t\t->limit(300)//not so nice hardcoded limit\n\t\t\t\t\t\t\t->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ASC')));\n\t\t\twhile ($subfolder = $stmt->fetch()) {\n\t\t\t\t$node['children'][] = $this->_folderToNode($subfolder, $expandFolderIds, false, $withFiles);\n\t\t\t}\n\n\t\t\tif ($withFiles) {\n\t\t\t\t$node['children'] = array_merge($node['children'], $this->_addFileNodes($folder));\n\t\t\t}\n\t\t} else {\n\t\t\tif (!$folder->hasChildren()) {\n\t\t\t\t//it doesn't habe any subfolders so instruct the client about this\n\t\t\t\t//so it can present the node as a leaf.\n\t\t\t\t$node['children'] = array();\n\t\t\t\t$node['expanded'] = true;\n\n\t\t\t\tif ($withFiles) {\n\t\t\t\t\t$node['children'] = array_merge($node['children'], $this->_addFileNodes($folder));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $node;\n\t}\n\n\tprivate function _addFileNodes($folder) {\n\t\t$stmt = $folder->files();\n\n\t\t$files = array();\n\t\twhile($file = $stmt->fetch()) {\n\t\t\t$fileNode = array(\n\t\t\t\t'text' => $file->name,\n\t\t\t\t'name' => $file->name,\n\t\t\t\t'id' => $file->id,\n\t\t\t\t'size' => $file->size,\n\t\t\t\t'extension' => $file->extension,\n\t\t\t\t'draggable' => false,\n\t\t\t\t'leaf' => true,\n\t\t\t\t'path'=> $folder->path . '/' . $file->name,\n\t\t\t\t'iconCls' => 'filetype-' . strtolower($file->extension),\n\t\t\t\t'checked' => false\n\t\t\t);\n\n\t\t\t$files[] = $fileNode;\n\t\t\t\\GO::debug($file);\n\t\t}\n\t\treturn $files;\n\t}\n\n\tprotected function beforeSubmit(&$response, &$model, &$params) {\n\n\t\tif(isset($params['share']) && !$model->readonly && !$model->isSomeonesHomeFolder() && $model->checkPermissionLevel(\\GO\\Base\\Model\\Acl::MANAGE_PERMISSION)){\n\t\t\tif ($params['share']==1 && $model->acl_id == 0) {\n\t\t\t\t$model->visible = 1;\n\t\t\t\tif(GO::modules()->isInstalled('hidesharedprojectfs')) {\n\t\t\t\t\t$parentId = ($model->getIsNew()) ? $params['parent_id'] : $model->parent_id;\n\t\t\t\t\t$parent = Folder::model()->findByPk($parentId);\n\t\t\t\t\tif(!empty($parent)) { \n\t\t\t\t\t\twhile($parent = $parent->parent) {\n\t\t\t\t\t\t\tif($parent->parent_id == 0 && in_array($parent->name, array('projects2', 'addressbook'))) {\n\t\t\t\t\t\t\t\t$model->visible = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n//\t\t\t\t$acl = new \\GO\\Base\\Model\\Acl();\n//\t\t\t\t$acl->description = $model->tableName() . '.' . $model->aclField();\n//\t\t\t\t$acl->user_id = \\GO::user() ? \\GO::user()->id : 1;\n//\t\t\t\t$acl->save();\n\t\t\t\t$shared_folder = $model;\n\t\t\t\twhile(!$shared_folder->isSomeonesHomeFolder() && $shared_folder->parent_id!=0) {\n\t\t\t\t\t$shared_folder = $shared_folder->parent;\n\t\t\t\t}\n\t\t\t\t$acl = $model->setNewAcl($shared_folder->user_id);\n\t\t\t\t$userGroup = \\GO\\Base\\Model\\Group::model()->findSingleByAttribute('isUserGroupFor', \\GO::user()->id);\n\t\t\t\tif($userGroup) {\n\t\t\t\t\t$acl->addGroup($userGroup->id, \\GO\\Base\\Model\\Acl::MANAGE_PERMISSION);\n\t\t\t\t}\n\t\t\t\t$acl->save(); // again\n\t\t\t\t\n\t\t\t\t//for enabling the acl permissions panel\n\t\t\t\t$response['acl_id']=$model->acl_id;\n\t\t\t}\n\n\t\t\tif ($params['share']==0 && $model->acl_id > 0) {\n\t\t\t\t$model->acl->delete();\n\t\t\t\t$model->acl_id = $response['acl_id'] = 0;\n\t\t\t}\n\t\t}\n\n\t\tif(!empty($params['name']) && \\GO::config()->convert_utf8_filenames_to_ascii)\n\t\t\t$params['name']=\\GO\\Base\\Util\\StringHelper::utf8ToASCII ($params['name']);\n\n\t\treturn parent::beforeSubmit($response, $model, $params);\n\t}\n\n\tprotected function afterSubmit(&$response, &$model, &$params, $modifiedAttributes) {\n\n\t\t//output the new path of the file if we changed the name.\n\t\tif (isset($modifiedAttributes['name']))\n\t\t\t$response['new_path'] = $model->path;\n\n\t\t$notifyRecursive = !empty($params['notifyRecursive']) && $params['notifyRecursive']=='true' ? true : false;\n\n\t\tif(isset($params['notify'])){\n\t\t\tif ($params['notify']==1)\n\t\t\t\t$model->addNotifyUser(\\GO::user()->id,$notifyRecursive);\n\n\t\t\tif ($params['notify']==0)\n\t\t\t\t$model->removeNotifyUser(\\GO::user()->id,$notifyRecursive);\n\t\t}\n\n\t\tparent::afterSubmit($response, $model, $params, $modifiedAttributes);\n\t}\n\n\tprotected function afterLoad(&$response, &$model, &$params) {\n\n\t\t$response['data']['path'] = $model->path;\n\t\t$response['data']['notify'] = $model->hasNotifyUser(\\GO::user()->id);\n\t\t$response['data']['is_someones_home_dir'] = $model->isSomeonesHomeFolder();\n\t\t$response['data']['username'] = !empty($model->user) ? $model->user->name : '';\n\t\t$response['data']['musername'] = !empty($model->mUser) ? $model->mUser->name : '';\n\t\t\n\t\t$response['data']['url']=$model->externalUrl;\n\n\t\treturn parent::afterLoad($response, $model, $params);\n\t}\n\n\tprotected function afterDisplay(&$response, &$model, &$params) {\n\t\t$response['data']['path'] = $model->path;\n\t\t$response['data']['type'] = \\GO::t(\"Folder\", \"files\");\n\t\t$response['data']['notify'] = $model->hasNotifyUser(\\GO::user()->id);\n\t\t$response['data']['url']=$model->externalUrl;\n\n\t\treturn parent::afterDisplay($response, $model, $params);\n\t}\n\n\tprotected function actionPaste($params) {\n\n\t\t$response['success'] = true;\n\n\t\tif (!isset($params['overwrite']))\n\t\t\t$params['overwrite'] = 'ask'; //can be ask, yes, no\n\n\n\t\tif (isset($params['ids']) && $params['overwrite'] == 'ask')\n\t\t\t\\GO::session()->values['files']['pasteIds'] = $this->_splitFolderAndFileIds(json_decode($params['ids'], true));\n\n\t\t$destinationFolder = Folder::model()->findByPk($params['destination_folder_id']);\n\n\t\tif (!$destinationFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::WRITE_PERMISSION))\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\n\t\twhile ($file_id = array_shift(\\GO::session()->values['files']['pasteIds']['files'])) {\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPk($file_id);\n\n\t\t\t$newFileName=$file->name;\n\n\t\t\t$existingFile = $destinationFolder->hasFile($file->name);\n\n\t\t\t//if it's a copy-paste in the same folder then append a number.\n\t\t\tif($existingFile && $existingFile->id==$file->id){\n\t\t\t\tif($params['paste_mode'] == 'cut')\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$fsFile = $existingFile->fsFile;\n\t\t\t\t\t$fsFile->appendNumberToNameIfExists();\n\t\t\t\t\t$newFileName = $fsFile->name();\n\t\t\t\t\t$existingFile=false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($existingFile) {\n\t\t\t\tswitch ($params['overwrite']) {\n\t\t\t\t\tcase 'ask':\n\t\t\t\t\t\tarray_unshift(\\GO::session()->values['files']['pasteIds']['files'], $file_id);\n\t\t\t\t\t\t$response['fileExists'] = $file->name;\n\t\t\t\t\t\treturn $response;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'yestoall':\n\t\t\t\t\tcase 'yes':\n\t\t\t\t\t\t$existingFile->delete();\n\n\t\t\t\t\t\tif ($params['overwrite'] == 'yes')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'notoall':\n\t\t\t\t\tcase 'no':\n\t\t\t\t\t\tif ($params['overwrite'] == 'no')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($params['paste_mode'] == 'cut') {\n\t\t\t\tif (!$file->move($destinationFolder))\n\t\t\t\t\tthrow new \\Exception(\"Could not move \" . $file->name);\n\t\t\t}else {\n\t\t\t\tif (!$file->copy($destinationFolder,$newFileName))\n\t\t\t\t\tthrow new \\Exception(\"Could not copy \" . $file->name);\n\t\t\t}\n\t\t}\n\n\t\twhile ($folder_id = array_shift(\\GO::session()->values['files']['pasteIds']['folders'])) {\n\t\t\t$folder = Folder::model()->findByPk($folder_id);\n\t\t\t\n\t\t\tif($params['paste_mode']=='copy' && $folder->parent_id==$destinationFolder->id){\n\t\t\t\t//pasting in the same folder. Append (1).\n\t\t\t\t$fsFolder = $folder->fsFolder;\n\t\t\t\t$fsFolder->appendNumberToNameIfExists();\n\t\t\t\t$folderName=$fsFolder->name();\t\t\t\t\n\t\t\t}  else {\n\t\t\t\t$folderName = $folder->name;\n\t\t\t}\n\n\t\t\t$existingFolder = $destinationFolder->hasFolder($folderName);\n\t\t\tif ($existingFolder) {\n\t\t\t\tswitch ($params['overwrite']) {\n\t\t\t\t\tcase 'ask':\n\t\t\t\t\t\tarray_unshift(\\GO::session()->values['files']['pasteIds']['folders'], $folder_id);\n\t\t\t\t\t\t$response['fileExists'] = $folderName;\n\t\t\t\t\t\treturn $response;\n\n\t\t\t\t\tcase 'yestoall':\n\t\t\t\t\tcase 'yes':\n\t\t\t\t\t\t//$existingFolder->delete();\n\n\t\t\t\t\t\tif ($params['overwrite'] == 'yes')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'notoall':\n\t\t\t\t\tcase 'no':\n\t\t\t\t\t\tif ($params['overwrite'] == 'no')\n\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($params['paste_mode'] == 'cut') {\n\t\t\t\tif (!$folder->move($destinationFolder))\n\t\t\t\t\tthrow new \\Exception(\"Could not move \" . $folder->name);\n\t\t\t}else {\n\t\t\t\tif (!$folder->copy($destinationFolder, $folderName))\n\t\t\t\t\tthrow new \\Exception(\"Could not copy \" . $folder->name);\n\t\t\t}\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\tprivate function _splitFolderAndFileIds($ids) {\n\t\t$fileIds = array();\n\t\t$folderIds = array();\n\n\n\t\tforeach ($ids as $typeId) {\n\t\t\tif (substr($typeId, 0, 1) == 'd') {\n\t\t\t\t$folderIds[] = substr($typeId, 2);\n\t\t\t} else {\n\t\t\t\t$fileIds[] = substr($typeId, 2);\n\t\t\t}\n\t\t}\n\n\t\treturn array('files' => $fileIds, 'folders' => $folderIds);\n\t}\n\n\tprivate function _listShares($params) {\n\t\t$cm = new \\GO\\Base\\Data\\ColumnModel('GO\\Files\\Model\\Folder');\n\t\t$cm->setFormatRecordFunction(array($this, 'formatListRecord'));\n\t\t\n\t\t\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t->joinRelation('sharedRootFolders')\n\t\t\t\t\t\t->ignoreAcl()\n\t\t\t\t\t\t->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ASC'));\n\t\t\n\t\t$findParams->getCriteria()\n\t\t\t\t\t->addCondition('user_id', \\GO::user()->id,'=','sharedRootFolders');\n\t\t\n\t\t\n\t\t$store = new \\GO\\Base\\Data\\DbStore('GO\\Files\\Model\\Folder',$cm, $params, $findParams);\n\t\t$response = $store->getData();\n\t\t$response['permission_level']=\\GO\\Base\\Model\\Acl::READ_PERMISSION;\n\t\treturn $response;\n\t}\n\n\tprivate $_listFolderPermissionLevel;\n\n\tprotected function actionList($params) {\n\n\t\tif (!empty($params['query'])) {\n\t\t\treturn $this->_searchFiles($params);\n\t\t}\n            \n\n\t\t\n\t\t//get the folder that contains the files and folders to list.\n\t\t//This will check permissions too.\n\t\tif(empty($params['folder_id'])) {\n\t\t\t$folder = Folder::model()->findHomeFolder (GO::user());\n\t\t}else {\n\t\t\tif ($params['folder_id'] == 'shared') {\n\t\t\t\treturn $this->_listShares($params);\n\t\t\t}\n\t\t\t$folder = Folder::model()->findByPk($params['folder_id']);\n\t\t}\n\t\t\n\t\tif(!$folder) {\n\t\t\tthrow new \\Exception('No Folder found with id ' . $params['folder_id']);\n\t\t}\n\n\n\n\t\t// if it is the users folder tha get the shared folders\n\t\tif($folder->name == 'users' && $folder->parent_id == 0) {\n\t\t\treturn $this->_listShares($params);\n\t\t}\n\n\t\t\n\t\t$user = $folder->quotaUser;\n\t\t$this->_listFolderPermissionLevel=$folder->permissionLevel;\n\n\t\t$response['permission_level']=$folder->permissionLevel;//$folder->readonly ? \\GO\\Base\\Model\\Acl::READ_PERMISSION : $folder->permissionLevel;\n\n\t\tif(empty($params['skip_fs_sync']) && empty(GO::config()->files_disable_filesystem_sync))\n\t\t\t$folder->checkFsSync();\n\n\t\t//useful information for the view.\n\t\t$response['path'] = htmlentities($folder->path);\n\n\t\t//Show this page in thumbnails or list\n\t\t$folderPreference = \\GO\\Files\\Model\\FolderPreference::model()->findByPk(array('user_id'=>\\GO::user()->id,'folder_id'=>$folder->id));\n\t\tif($folderPreference)\n\t\t\t$response['thumbs']=$folderPreference->thumbs;\n\t\telse\n\t\t\t$response['thumbs']=0;\n\n\t\t$response['parent_id'] = $folder->parent_id;\n\n\t\t//locked state\n\t\t$response['lock_state']=!empty($folder->apply_state);\n\t\t$response['cm_state']=isset($folder->cm_state) && !empty($folder->apply_state) ? $folder->cm_state : \"\";\n\t\t$response['may_apply_state']=\\GO\\Base\\Model\\Acl::hasPermission($folder->getPermissionLevel(), \\GO\\Base\\Model\\Acl::MANAGE_PERMISSION);\n\n\t\t$store = \\GO\\Base\\Data\\Store::newInstance(Folder::model());\n\n\t\t//set sort aliases\n\t\t$store->getColumnModel()->formatColumn('type', '',array(),'name');\n\t\t$store->getColumnModel()->formatColumn('size', '\"-\"',array(),'name');\n\t\t$store->getColumnModel()->formatColumn('locked_user_id', '\"0\"');\n\n\n\t\t//handle delete request for both files and folder\n\t\t$this->_processDeletes($params, $store);\n\n\t\t$store->getColumnModel()->setFormatRecordFunction(array($this, 'formatListRecord'));\n\n\t\t$findParams = $store->getDefaultParams($params);\n\n\t\t//sorting on custom fields doesn't work for folders\n\t\t//TODO\n\t\tif(!isset($params['sort']) || substr($params['sort'],0,13)=='customFields.' || $params['sort'] == 'name') {\n\t\t\t$findParams->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ' . (!isset($params['dir']) || $params['dir'] == 'ASC' ? 'ASC' : 'DESC')));\n\t\t}\n\n\n\t\t$findParamsArray = $findParams->getParams();\n\t\tif(!isset($findParamsArray['start']))\n\t\t\t$findParamsArray['start']=0;\n\n\t\tif(!isset($findParamsArray['limit']))\n\t\t\t$findParamsArray['limit']=0;\n\n\t\t//$stmt = $folder->folders($findParams);\n\n\t\t$stmt = $folder->getSubFolders($findParams);\n\n\t\t$store->setStatement($stmt);\n\n\t\t$response = array_merge($response, $store->getData());\n\n\t\t//add files to the listing if it fits\n\t\t$folderPages = floor($stmt->foundRows / $findParamsArray['limit']);\n\t\t$foldersOnLastPage = $stmt->foundRows - ($folderPages * $findParamsArray['limit']);\n\n\t\t//$isOnLastPageofFolders = $stmt->foundRows < ($findParams['limit'] + $findParams['start']);\n\n\t\tif (count($response['results'])) {\n\t\t\t$fileStart = $findParamsArray['start'] - $folderPages * $findParamsArray['limit'];\n\t\t\t$fileLimit = $findParamsArray['limit'] - $foldersOnLastPage;\n\t\t} else {\n\t\t\t$fileStart = $findParamsArray['start'] - $stmt->foundRows;\n\t\t\t$fileLimit = $findParamsArray['limit'];\n\t\t}\n\n\t\tif ($fileStart >= 0) {\n\n\t\t\t$store->resetResults();\n\n\t\t\t$store->getColumnModel()->formatColumn('size', '\"-\"',array(),'size');\n\t\t\t$store->getColumnModel()->formatColumn('type', '',array(),'extension');\n\t\t\t$store->getColumnModel()->formatColumn('locked', '$model->isLocked()');\n\t\t\t$store->getColumnModel()->formatColumn('locked_user_id', '$model->locked_user_id');\n\t\t\t$store->getColumnModel()->formatColumn('folder_id', '$model->folder_id');\n\t\t\t$store->getColumnModel()->formatColumn('username', '$model->user->displayName');\n\t\t\t$store->getColumnModel()->formatColumn('musername', '$model->mUser->displayName');\n\n\t\t\t$findParams = $store->getDefaultParams($params)\n\t\t\t\t\t\t\t->limit($fileLimit)\n\t\t\t\t\t\t\t->start($fileStart);\n\t\t\t\n\t\t\t// Handle the files filter\n\t\t\tif(!empty($params['files_filter'])){\n\t\t\t\t$extensions= explode(',',$params['files_filter']);\n\t\t\t\t$findParams->getCriteria()->addInCondition('extension', $extensions);\n\t\t\t}\n\n\t\t\tif(!isset($params['sort']) || $params['sort'] == 'name') {\n\t\t\t\t$findParams->order(new \\go\\core\\db\\Expression('name COLLATE utf8mb4_unicode_ci ' . (!isset($params['dir']) || $params['dir'] == 'ASC' ? 'ASC' : 'DESC')));\n\t\t\t}\n\n\t\t\t$stmt = $folder->files($findParams);\n\t\t\t$store->setStatement($stmt);\n\n\t\t\t$filesResponse = $store->getData();\n\n\t\t\t$response['total']+=$filesResponse['total'];\n\t\t\t$response['results'] = array_merge($response['results'], $filesResponse['results']);\n\t\t} else {\n\t\t\t$record = $folder->files(\\GO\\Base\\Db\\FindParams::newInstance()->single()->select('count(*) as total'));\n\t\t\t$response['total']+=$record->total;\n\t\t}\n\t\tif(empty($user)) {\n\t\t\t$user = \\GO::user();\n\t\t}\n\t\t\n\t\t$response['owner_id'] = $user->id;\n\t\t$response['disk_usage']=round($user->disk_usage/1024/1024,2);\n\t\t$response['disk_quota']=$user->disk_quota;\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Process deletes, separate function because it needs to be called from different places.\n\t *\n\t * @param array $params\n\t * @param type $store\n\t */\n\tprivate function _processDeletes($params, $store=false){\n\t\tif(!$store){\n\t\t\t$store = \\GO\\Base\\Data\\Store::newInstance(Folder::model());\n\t\t}\n\n\t\t//handle delete request for both files and folder\n\t\tif (isset($params['delete_keys'])) {\n\n\t\t\t$ids = $this->_splitFolderAndFileIds(json_decode($params['delete_keys'], true));\n\n\t\t\t$params['delete_keys'] = json_encode($ids['folders']);\n\t\t\t$store->processDeleteActions($params, \"GO\\Files\\Model\\Folder\");\n\n\t\t\t$params['delete_keys'] = json_encode($ids['files']);\n\t\t\t$store->processDeleteActions($params, \"GO\\Files\\Model\\File\");\n\t\t\t$this->fireEvent('afterListDeleteActionFolder', [$params]);\n\t\t}\n\t}\n\n\tprivate function _searchFiles($params) {\n\t\t$searchInSharedFolders = $params['folder_id'] === 'shared';\n\t\tif(!$searchInSharedFolders) {\n\t\t\t$params['folder_id'] = intval($params['folder_id']);\n\t\t\t$folder = Folder::model()->findByPk($params['folder_id']);\n\n\t\t\t$stripPath = $folder->path;\n\t\t}\n\t\t//handle delete request for both files and folder\n\t\t$this->_processDeletes($params);\n\n\t\t$response['success'] = true;\n\n\t\t$queryStr = !empty($params['query']) ? $params['query'] : '';\n\t\t$limit = !empty($params['limit']) ? $params['limit'] : 30;\n\t\t$start = !empty($params['start']) ? $params['start'] : 0;\n\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t->calcFoundRows()\n\t\t\t\t->select('t.*')\n\t\t\t\t->joinCustomFields()\n\t\t\t\t->join(\"core_search\", \"s.entityId = t.id AND s.entityTypeId = \" . \\GO\\Files\\Model\\File::entityType()->getId(), \"s\")\n\t\t\t->start($start)\n\t\t\t->limit($limit)\n\t\t\t->group(['t.id']);\n\n\t\tif(!$searchInSharedFolders) {\n\t\t\t$findParams->getCriteria()->addCondition(\"filter\", $folder->getIdPath() .\"/%\", \"LIKE\", \"s\");\n\t\t}\n\t\t// restrict to the current folder hierarchy\n\n\t\tif(!go()->getAuthState()->isAdmin()) {\n\t\t\t$aclJoinCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()->addRawCondition('a.aclId', 's.aclId', '=', false);\n\n\t\t\t$aclWhereCriteria = \\GO\\Base\\Db\\FindCriteria::newInstance()\n\t\t\t\t->addInCondition(\"groupId\", \\GO\\Base\\Model\\User::getGroupIds(\\GO::user()->id), \"a\", false);\n\n\n\t\t\t$findParams->ignoreAcl()\n\t\t\t\t->join(\\GO\\Base\\Model\\AclUsersGroups::model()->tableName(), $aclJoinCriteria, 'a', 'INNER')->debugSql()\n\t\t\t\t->criteria($aclWhereCriteria);\n\t\t}\n\n\t\t$i = 0;\n\n\t\t$words = StringUtil::splitTextKeywords($queryStr, false);\n\n\t\tforeach($words as $word) {\n\n\t\t\t$findParams->join(\"core_search_word\", 'w'.$i.'.searchId = s.id', 'w'.$i);\n\t\t\t$findParams->getCriteria()->addCondition('word', $word . '%', 'LIKE', 'w'.$i);\n\t\t\t$i++;\n\t\t}\n\n\t\tif(isset($params['sort'])){\n\n\t\t\tif($params['sort'] == 'name') {\n\t\t\t\t $findParams->order(new \\go\\core\\db\\Expression('t.name COLLATE utf8mb4_unicode_ci ' . (!isset($params['dir']) || $params['dir'] == 'ASC' ? 'ASC' : 'DESC')));\n\t\t\t}else {\n\t\t\t\t$findParams->order(\"t.\".$params['sort'], $params['dir']);\n\t\t\t}\n\t\t}\n\n\t\t$filesStmt = \\GO\\Files\\Model\\File::model()->find($findParams);\n\n\t\t$response['total'] = $filesStmt->foundRows;\n\t\t$response['results'] = array();\n\t\t$response['cm_state'] = '';\n\t\t$response['may_apply_state'] = false;\n\t\t$response['lock_state'] = false;\n\t\t$response['permission_level'] = 0;\n\n\t\tforeach ($filesStmt as $searchFileModel) {\n\t\t\t$record = $searchFileModel->getAttributes();\n\t\t\t$record['customFields'] = $searchFileModel->getCustomFields()->toArray();\n\t\t\t$record = $this->formatListRecord($record, $searchFileModel);\n\t\t\tif(!$searchInSharedFolders) {\n\t\t\t\t$record['name'] = substr($searchFileModel->path, strlen($stripPath) + 1);\n\t\t\t} else {\n\t\t\t\t$arPath = explode(\"/\", $searchFileModel->path);\n\t\t\t\t$record['name'] = array_pop($arPath);\n\t\t\t}\n\t\t\t$response['results'][] = $record;\n\t\t}\n\n\t\treturn $response;\n\t}\n        \n\tpublic function formatListRecord($record, $model) {\n\n\t\t$record['path'] = htmlspecialchars($model->path);\n\n\t\tif ($model instanceof Folder) {\n\t\t\t$record['type_id'] = 'd:' . $model->id;\n\t\t\t$record['type'] = \\GO::t(\"Folder\", \"files\");\n\t\t\t$record['size'] = '-';\n\t\t\t$record['extension'] = 'folder';\n\t\t\t$record['readonly']=$model->readonly;\n\t\t} else {\n\t\t\t$record['type_id'] = 'f:' . $model->id;\n\t\t\t$record['type'] = \\GO\\Base\\Fs\\File::getFileTypeDescription($model->extension);\n\t\t\t$record['extension'] = strtolower($model->extension);\n\t\t\t$record['size']=$model->size;\n\t\t\t$record['permission_level']=$this->_listFolderPermissionLevel;\n\t\t\t$record['unlock_allowed']=$model->unlockAllowed();\n\n\t\t\tif(empty($_REQUEST['noHandler'])){ // Added this line because the json_decode function cannot handle javascript. When noHandler is set to true, this line will be skipped\n\t\t\t\t$record['handler']='startjs:function(){'.$model->getDefaultHandler()->getHandler($model).'}:endjs';\n\t\t\t}\n\t\t}\n\t\t$record['thumb_url'] = $model->thumbURL;\n\n\t\treturn $record;\n\t}\n\n\tprivate function _checkExistingModelFolder($model, $folder, $mustExist=false) {\n\n\t\t\\GO::debug(\"Check existing model folder \".$model->className().\"(ID:\".$model->id.\" Folder ID: \".$folder->id.\" ACL ID: \".$model->findAclId().\")\");\n\n\t\tif(!$folder->fsFolder->exists())\n\t\t{\n\t\t\t//throw new \\Exception(\"Fs folder doesn't exist! \".$folder->fsFolder->path());\n\t\t\t\\GO::debug(\"Deleting it because filesystem folder doesn't exist\");\n\t\t\t$folder->readonly = 1; //makes sure acl is not deleted\n\t\t\t$folder->delete(true);\n\t\t\tif($mustExist)\n\t\t\t\treturn $this->_createNewModelFolder($model);\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\t//todo test this:\n//      if(!isset($model->acl_id) && empty($params['mustExist'])){\n//          //if this model is not a container like an addressbook but a contact\n//          //then delete the folder if it's empty.\n//          $ls = $folder->fsFolder->ls();\n//          if(!count($ls) && $folder->fsFolder->mtime()<time()-60){\n//              $folder->delete();\n//              $response['files_folder_id']=$model->files_folder_id=0;\n//              $model->save();\n//              return $response['files_folder_id'];\n//          }\n//      }\n\n\n\n\t\t$currentPath = $folder->path;\n\t\t$newPath = \\go\\core\\util\\StringUtil::normalize(rtrim($model->buildFilesPath(),'.'));\n\t\t\n\n\t\tif(!$newPath)\n\t\t\treturn false;\n\n\t\tif(\\GO::router()->getControllerAction()=='checkdatabase'){\n\t\t\t//Always ensure folder exists on check database\n\t\t\t$destinationFolder = Folder::model()->findByPath(\n\t\t\t\t\t\t\tdirname($newPath), true, array('acl_id'=>$model->findAclId(),'readonly'=>1));\n\t\t}\n\n\t\tif ($currentPath != $newPath) {\n\n\t\t\t\\GO::debug(\"Moving folder \".$currentPath.\" to \".$newPath);\n\n\t\t\t//model has a new path. We must move the current folder\n\t\t\t$destinationFolder = Folder::model()->findByPath(\n\t\t\t\t\t\t\tdirname($newPath), true, array('acl_id'=>$model->findAclId(),'readonly'=>1));\n\n\n\t\t\t//sometimes the folder must be moved into a folder with the same. name\n\t\t\t//for example:\n\t\t\t//projects/Name must be moved into projects/Name/Name\n\t\t\t//then we temporarily move it to a temp name\n\t\t\tif($destinationFolder->id==$folder->id || $destinationFolder->fsFolder->isSubFolderOf($folder->fsFolder)){\n\t\t\t\t\\GO::debug(\"Destination folder is the same!\");\n\t\t\t\t$folder->name=uniqid();\n\t\t\t\t$folder->systemSave=true;\n\t\t\t\t$folder->save(true);\n\n\t\t\t\t\\GO::debug(\"Moved folder to temp:\".$folder->fsFolder->path());\n\n\t\t\t\t\\GO::modelCache()->remove(\"GO\\Files\\Model\\Folder\");\n\n\t\t\t\t$destinationFolder = Folder::model()->findByPath(\n\t\t\t\t\t\t\tdirname($newPath), true);\n\t\t\t\t\n\n\t\t\t\t\\GO::debug(\"Now moving to:\".$destinationFolder->fsFolder->path());\n\n\t\t\t}\n\n\t\t\tif($destinationFolder->id==$folder->id){\n\t\t\t\tthrow new \\Exception(\"Same ID's!\");\n\t\t\t}\n\n\t\t\t$fsFolder = new \\GO\\Base\\Fs\\Folder($newPath);\n//          $fsFolder->appendNumberToNameIfExists();\n\n\t\t\tif(($existingFolder = $destinationFolder->hasFolder($fsFolder->name()))){\n\t\t\t\t\\GO::debug(\"Merging into existing folder.\".$folder->path.' ('.$folder->id.') -> '.$existingFolder->path.' ('.$existingFolder->id.')');\n\t\t\t\t//if (!empty($model->acl_id))\n\t\t\t\t$existingFolder->acl_id = $model->findAclId();\n\t\t\t\t$existingFolder->visible = 0;\n\t\t\t\t$existingFolder->readonly = 1;\n\t\t\t\t$existingFolder->save(true);\n\n\t\t\t\t$folder->systemSave = true;\n\n\t\t\t\t$existingFolder->moveContentsFrom($folder, true);\n\n\t\t\t\t//delete empty folder.\n\t\t\t\t$folder->readonly = 1; //makes sure acl is not deleted\n\t\t\t\t$folder->delete(true);\n\n\t\t\t\treturn $existingFolder->id;\n\n\t\t\t}else\n\t\t\t{\n//              if ($model->acl_id>0)\n//                  $folder->acl_id = $model->acl_id;\n//              else\n//                  $folder->acl_id=0;\n\t\t\t\t$folder->acl_id = $model->findAclId();\n\n\t\t\t\t$folder->name = $fsFolder->name();\n\t\t\t\t$folder->parent_id = $destinationFolder->id;\n\t\t\t\t$folder->systemSave = true;\n\t\t\t\t$folder->visible = 0;\n\t\t\t\t$folder->readonly = 1;\n\t\t\t\tif($folder->isModified())\n\t\t\t\t\tif(!$folder->save(true)){\n\t\t\t\t\t\tthrow new \\Exception(var_export($folder->getValidationErrors(), true));\n\t\t\t\t\t}\n\t\t\t}\n\t\t}else\n\t\t{\n\t\t\t\\GO::debug(\"No change needed\");\n//          if ($model->acl_id>0)\n//              $folder->acl_id = $model->acl_id;\n//          else\n//              $folder->acl_id=0;\n\t\t\t$folder->acl_id = $model->findAclId();\n\t\t\t$folder->systemSave = true;\n\t\t\t$folder->visible = 0;\n\t\t\t$folder->readonly = 1;\n\t\t\tif($folder->isModified())\n\t\t\t\t$folder->save(true);\n\t\t}\n\n\t\treturn $folder->id;\n\t}\n\n\tprivate function _createNewModelFolder(\\GO\\Base\\Db\\ActiveRecord $model) {\n\n\t\tGO::debug(\"Create new model folder \".$model->className().\"(ID:\".$model->id.\")\");\n\t\t$filesPath = \\go\\core\\util\\StringUtil::normalize(rtrim($model->buildFilesPath(),'.'));\n\t\t$folder = Folder::model()->findByPath($filesPath,true, array('readonly'=>1));\n\t\t\n\t\tif(!$folder){\n\t\t\tthrow new \\Exception(\"Failed to create folder \".$filesPath);\n\t\t}\n//      if (!empty($model->acl_id))\n//          $folder->acl_id = $model->acl_id;\n\n\t\t$folder->acl_id=$model->findAclId();\n\t\t\n\t\t$folder->visible = 0;\n\t\t$folder->readonly = 1;\n\t\t$folder->systemSave = true;\n\t\t$folder->save(true);\n\t\t\n\t\treturn $folder->id;\n\t}\n\n\t/**\n\t * @param array $params\n\t * @return array\n\t * @throws AccessDenied\n\t */\n\tprotected function checkEntityFolder($params)\n\t{\n\t\t$entityType = \\go\\core\\orm\\EntityType::findByName($params['model']);\n\t\t$cls = $entityType->getClassName();\n\n\t\t$entity = $cls::findById($params['id']);\n\n\t\t$folder = Folder::model()->findForEntity($entity);\n\t\treturn [\n\t\t\t\"success\" => true,\n\t\t\t\"files_folder_id\" => $folder->id,\n\t\t\t\"path\" =>  $folder->path\n\t\t];\n\t}\n\n\t/**\n\t * check if a model folder exists\n\t *\n\t * @param array $params\n\t * @return array\n\t * @throws Exception\n\t */\n\tprotected function actionCheckModelFolder($params)\n\t{\n\n\t\t$cls = $params['model'];\n\t\t$entityType = \\go\\core\\orm\\EntityType::findByName($params['model']);\n\t\tif(!empty($entityType)) {\n\t\t\t$cls = $entityType->getClassName();\n\t\t}\n\n\t\tif(strpos($params['model'], '\\\\') === false && is_a($cls, '\\\\go\\\\core\\\\orm\\\\Entity', true)) {\n\t\t\treturn $this->checkEntityFolder($params);\n\t\t}\n\n\t\t$obj = new $cls(false);\n\t\t$model = $obj->findByPk($params['id'],false, true);\n\n\t\t$folderId =  $this->checkModelFolder($model, true, !empty($params['mustExist']));\n\t\t$folder = Folder::model()->findByPk($folderId);\n\n\t\t$response = [\n\t\t\t'success' => true,\n\t\t\t'files_folder_id' => $folderId,\n\t\t\t'path' => $folder->path\n\t\t];\n\t\t$this->fireEvent('afterCheckModelFolder', [$model, $folder, &$response]);\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * @param GO\\Base\\Db\\ActiveRecord $model\n\t * @param false $saveModel\n\t * @param false $mustExist\n\t * @return bool|int|mixed|string|null\n\t * @throws AccessDenied\n\t */\n\tpublic function checkModelFolder(\\GO\\Base\\Db\\ActiveRecord $model, $saveModel=false, $mustExist=false) {\n\t\t$oldAllowDeletes = \\GO\\Base\\Fs\\File::setAllowDeletes(false);\n\t\n\t\t$newFolder = false;\n\t\t$folder = false;\n\t\tif ($model->files_folder_id > 0){\n\t\t\t\n\t\t\tGO::debug('Model has files_folder_id '.$model->files_folder_id);\n\n\t\t\t$folder = Folder::model()->findByPk($model->files_folder_id, false, true);\n\t\t\t\n\t\t\t//record has an ID but the folder is missing from the database. Attempt to create new one.\n\t\t\t$mustExist = true;\n\t\t}\n\n\t\tif ($folder) {\n\t\t\t\n\t\t\tGO::debug('Folder exists in database');\n\t\t\t\t\t\n\t\t\t$model->files_folder_id = $this->_checkExistingModelFolder($model, $folder, $mustExist);\n\n\t\t\tif ($saveModel && $model->isModified()) {\n\t\t\t\t$model->save(true);\n\t\t\t}\n\t\t} elseif ($model->alwaysCreateFilesFolder() || $mustExist) {\n\t\t\t\n\t\t\tGO::debug('Folder does not exist in database. Will create it.');\n\t\t\n\t\t\t//this model has an acl_id. So we should create a shared folder with this acl.\n\t\t\t//this folder should always exist.\n\t\t\t//only new models that have it's own acl field should always have a folder.\n\t\t\t//otherwise it will be created when first accessed.\n\t\t\t$model->files_folder_id = $this->_createNewModelFolder($model);\n\t\t\t\n\t\t\t$newFolder = true;\n\n\t\t\tif ($saveModel && $model->isModified())\n\t\t\t\t$model->save(true);\n\t\t}\n\n\t\tif (empty($model->files_folder_id)) {\n\t\t\t$model->files_folder_id = 0;\n\t\t}\n\n\t\t \\GO\\Base\\Fs\\File::setAllowDeletes($oldAllowDeletes);\n\t\t \n\t\t if($model->files_folder_id) {\n\t\t\t$this->fireEvent('checkmodelfolder', array($model, $folder, $newFolder));\n\t\t }\n\n\t\treturn $model->files_folder_id;\n\t}\n\n\tprotected function actionProcessUploadQueue($params) {\n\n\t\tGO::setMaxExecutionTime(3600);\n\n\t\t$response['success'] = true;\n\n\t\tif (!isset($params['overwrite'])) {\n\t\t\t$params['overwrite'] = 'ask'; //can be ask, yes, no\n\t\t}\n\n\t\t$destinationFolder = Folder::model()->findByPk($params['destination_folder_id']);\n\n\t\tif (!$destinationFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::CREATE_PERMISSION)) {\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied();\n\t\t}\n\n\t\tif(isset($params['blobs'])) {\n\t\t\t$paths = json_decode($params['blobs']);\n\t\t} else if(isset(\\GO::session()->values['files']['uploadqueue'])) {\n\t\t\t$paths = \\GO::session()->values['files']['uploadqueue'];\n\t\t} else {\n\t\t\tthrow new \\Exception(\"Nothing to process\");\n\t\t}\n\n\t\t$this->processPaths($paths, $destinationFolder, $params['overwrite'], $response);\n\t\t$this->fireEvent('afterUpload', [$params, $destinationFolder]);\n\t\treturn $response;\n\t}\n\n\tprivate function processPaths($paths, Folder $currentFolder, $overwrite, &$response) {\n\n\t\t$removeBlobs = [];\n\n\t\twhile ($tmpfile = array_shift($paths)){\n\t\t\tif(!is_string($tmpfile)) {\n\t\t\t\t// its a json object with blob data\n\t\t\t\t$blob = $tmpfile;\n\n\t\t\t\t$tmpfile = Blob::buildPath($blob->id);\n\t\t\t} else{\n\t\t\t\tunset($blob);\n\t\t\t}\n\n\t\t\t$destinationFolder = $currentFolder;\n\t\t\tif (is_dir($tmpfile)) {\n\t\t\t\t$folder = new \\GO\\Base\\Fs\\Folder($tmpfile);\n\t\t\t\tif ($folder->exists()) {\n\t\t\t\t\t$folder->move($destinationFolder->fsFolder, false, true);\n\t\t\t\t\t$destinationFolder->addFileSystemFolder($folder);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$file = new \\GO\\Base\\Fs\\File($tmpfile);\n\t\t\t\t$filename = $file->name();\n\t\t\t\tif(isset($blob)) {\n\t\t\t\t\tif(isset($blob->subfolder)) {\n\t\t\t\t\t\twhile($fname = array_shift($blob->subfolder)){\n\t\t\t\t\t\t\tif($f = $destinationFolder->hasFolder($fname)) {\n\t\t\t\t\t\t\t\t$destinationFolder = $f;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$destinationFolder = $destinationFolder->addFolder($fname);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$filename = $blob->name;\n\n\t\t\t\t}\n\n\t\t\t\tif ($file->exists()) {\n\n\t\t\t\t\t$existingFile = $destinationFolder->hasFile($filename);\n\t\t\t\t\tif ($existingFile) {\n\t\t\t\t\t\tswitch ($overwrite) {\n\t\t\t\t\t\t\tcase 'ask':\n//\t\t\t\t\t\t\t\tarray_unshift($paths, $tmpfile);\n\t\t\t\t\t\t\t\t$response['fileExists'] = $filename;\n\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t\tcase 'yes':\n\t\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\t\tcase 'yestoall':\n\t\t\t\t\t\t\t\t//we dont want overwrite file in no case\n\t\t\t\t\t\t\t\t$newFile = GO\\Base\\Fs\\File::tempFile();\n\t\t\t\t\t\t\t\t$file = $file->linkOrCopy($newFile);\n\n\t\t\t\t\t\t\t\t$existingFile->replace($file);\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'no':\n\t\t\t\t\t\t\t\t$params['overwrite'] = 'ask';\n\t\t\t\t\t\t\tcase 'notoall':\n\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$newFile = GO\\Base\\Fs\\File::tempFile();\n\t\t\t\t\t\t$file = $file->linkOrCopy($newFile);\n\n\t\t\t\t\t\t$destinationFolder->addFileSystemFile($file, false, $filename);\n\n\t\t\t\t\t}\n\t\t\t\t\t$response['success'] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Check if user uploaded the same blob more than once so the blob must be copied\n\t *\n\t * @param $id\n\t * @param $blobs\n\t */\n\tprivate function blobIsNeededAgain($id, $blobs) {\n\t\tforeach($blobs as $blob) {\n\t\t\tif($blob->id == $id) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate function removeBlob($blobId) {\n\t\t$blob = Blob::findById($blobId);\n\t\tif(!$blobId) {\n\t\t\tthrow new \\Exception(\"Blob not found\");\n\t\t}\n\t\treturn isset($blob->staleAt) ? $blob : false;\n\n\t}\n\n\tprotected function actionCompress($params) {\n\n\t\tini_set('max_execution_time', 600);\n\t\tini_set('memory_limit', '512M');\n\t\t//So other actions can run simultanuously\n\t\tGO::session()->closeWriting();\n\n\t\t$sources = json_decode($params['compress_sources'], true);\n\n\t\t$workingFolder = Folder::model()->findByPk($params['working_folder_id']);\n\t\t$destinationFolder = Folder::model()->findByPk($params['destination_folder_id']);\n\t\t$archiveFile = new \\GO\\Base\\Fs\\File(\\GO::config()->file_storage_path.$destinationFolder->path . '/' . $params['archive_name'] . '.zip');\n\n\t\tif(!$destinationFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::WRITE_PERMISSION)){\n\t\t\tthrow new AccessDenied();\n\t\t}\n\n\t\tif($archiveFile->exists())\n\t\t\tthrow new \\Exception(sprintf(\\GO::t(\"Filename %s already exists\", \"files\"), $archiveFile->stripFileStoragePath()));\n\t\t\n\t\t$sourceObjects = array();\n\t\tfor($i=0;$i<count($sources);$i++){\n\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($sources[$i]);\n\t\t\tif(!$file) {\n\t\t\t\t$file = Folder::model()->findByPath($sources[$i], false, [], true);\n\t\t\t\tif(!$file) {\n\t\t\t\t\tthrow new NotFound(\"Couldn't find '\" . $sources[$i] . \"'\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$file->getPermissionLevel()) {\n\t\t\t\tthrow new AccessDenied();\n\t\t\t}\n\n\t\t\t$path = \\GO::config()->file_storage_path.$sources[$i];\t\t\t\n\t\t\t$sourceObjects[]=\\GO\\Base\\Fs\\Base::createFromPath($path);\n\t\t}\n\n\t\tif(\\GO\\Base\\Fs\\Zip::create($archiveFile, $workingFolder->fsFolder, $sourceObjects)){\n\t\t\t\\GO\\Files\\Model\\File::importFromFilesystem($archiveFile);\n\t\t\t$response['success']=true;\n\t\t}  else {\n\t\t\tthrow new \\Exception(\"ZIP creation failed\");\n\t\t}\n\n\n\t\treturn $response;\n\t}\n\t\n\t/**\n\t * Compress the selected files and return as download\n\t * \n\t * @param array $params\n\t * @return boolean\n\t * @throws \\Exception\n\t */\n\tprotected function actionCompressAndDownload($params) {\n\n\t\tif(!isset($params['archive_name']))\n\t\t\tThrow new \\Exception('No name for the archive given');\n\t\t\n\t\tini_set('max_execution_time', 600);\n\t\tini_set('memory_limit', '512M');\n\t\tGO::session()->closeWriting();\n\n\t\t$sources = json_decode($params['sources'], true);\n\t\t\n\t\t$workingFolder = false;\n\t\t\n\t\t// Read the sources and create objects from them\n\t\t$sourceObjects = array();\n\t\t\n\t\t// The total filesize in bytes\n\t\t$totalFileSize = 0;\n\t\t\n\t\t// The maximum filesize that is allowed to zip (Default is 256MB)\n\t\t$maxFilesize = GO::config()->zip_max_file_size;\n\t\t\n\t\tfor($i=0;$i<count($sources);$i++){\n\n\t\t\t$file = \\GO\\Files\\Model\\File::model()->findByPath($sources[$i]);\n\t\t\tif(!$file) {\n\t\t\t\t$file = Folder::model()->findByPath($sources[$i], false, [], true);\n\t\t\t\tif(!$file) {\n\t\t\t\t\tthrow new NotFound(\"Couldn't find '\" . $sources[$i] . \"'\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$file->getPermissionLevel()) {\n\t\t\t\tthrow new AccessDenied();\n\t\t\t}\n\n\t\t\t$path = \\GO::config()->file_storage_path.$sources[$i];\n\t\t\t\n\t\t\t$sourceFile = \\GO\\Base\\Fs\\Base::createFromPath($path);\n\t\t\t\n\t\t\t// Increase the total filesize\n\t\t\t$totalFileSize += $sourceFile->size();\n\t\t\t\n\t\t\tif($totalFileSize >= $maxFilesize){\n\t\t\t\tthrow new \\Exception(sprintf(\n\t\t\t\t\t\\GO::t(\"The total size of the files that are selected to be zipped is too big. (Only %s is allowed.)\"),\n\t\t\t\t\t\\GO\\Base\\Util\\Number::formatSize($maxFilesize,2)\n\t\t\t\t));\n\t\t\t}\n\t\t\t\n\t\t\t// Set the workingFolder\n\t\t\tif(!$workingFolder){\n\t\t\t\t$workingFolder = $sourceFile->parent();\n\t\t\t}\n\t\t\t\n\t\t\t$sourceObjects[]= $sourceFile;\n\t\t}\n\t\t\n\t\t// Create the zipped temp file object\n\t\t$archiveFile = \\GO\\Base\\Fs\\File::tempFile($params['archive_name'],'zip');\n\t\tif($archiveFile->exists())\n\t\t\tthrow new \\Exception(sprintf(\\GO::t(\"Filename %s already exists\", \"files\"), $archiveFile->stripFileStoragePath()));\n\t\t\n\t\t// Create the zipfile\n\t\tif(\\GO\\Base\\Fs\\Zip::create($archiveFile, $workingFolder, $sourceObjects)){\n\t\t\t\n\t\t\t// Output download headers\n//\t\t\t\\GO\\Base\\Util\\Http::outputDownloadHeaders($archiveFile,false,true);\n//\t\t\t$archiveFile->output();\n\t\t\t$response['archive'] = $archiveFile->stripTempPath();\n\t\t\t$response['success'] = true;\n\t\t} else {\n\t\t\tthrow new \\Exception(\"ZIP creation failed\");\n\t\t}\n\t\t\n\t\treturn $response;\n\t}\n\n\n\tprotected function actionDecompress($params){\n\n\t\t//So other actions can run simultanuously\n\t\tGO::session()->closeWriting();\n\n\n\t\tif (!\\GO\\Base\\Util\\Common::isWindows())\n\t\t\tputenv('LANG=en_US.UTF-8');\n\n\t\t$sources = json_decode($params['decompress_sources'], true);\n\n\n\t\t$workingFolder = Folder::model()->findByPk($params['working_folder_id']);\n\t\t\n\t\tif(!$workingFolder->checkPermissionLevel(\\GO\\Base\\Model\\Acl::WRITE_PERMISSION)){\n\t\t\tthrow new \\GO\\Base\\Exception\\AccessDenied(\"No permission to write in the target folder.\");\n\t\t}\n\n\t\t$workingPath = \\GO::config()->file_storage_path.$workingFolder->path;\n\t\tchdir($workingPath);\n\n\n\t\twhile ($filePath = array_shift($sources)) {\n\t\t\t$file = new \\GO\\Base\\Fs\\File(\\GO::config()->file_storage_path.$filePath);\n\t\t\tswitch(strtolower($file->extension())) {\n\t\t\t\tcase 'zip':\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t$folder = \\GO\\Base\\Fs\\Folder::tempFolder(uniqid());\n\t\t\t\t\t\n\t\t\t\t\tif(class_exists(\"\\ZipArchive\")){\n\t\t\t\t\t\t$zip = new \\ZipArchive;\n\t\t\t\t\t\t$zip->open($file->path());\n\t\t\t\t\t\t$zip->extractTo($folder->path());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t$this->_convertZipEncoding($folder);\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\tchdir($folder->path());\t\t\t\t\t\n\t\t\t\t\t\t$cmd = \\GO::config()->cmd_unzip.' -n '.escapeshellarg($file->path());\n\t\t\t\t\t\texec($cmd, $output, $ret);\n\t\t\t\t\t\tif($ret!=0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new \\Exception(\"Could not decompress\\n\".implode(\"\\n\",$output));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$items = $folder->ls();\n\t\t\t\t\t\n\t\t\t\t\tforeach($items as $item){\n\t\t\t\t\t\t$item->move(new \\GO\\Base\\Fs\\Folder($workingPath));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$folder->delete();\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gz':\n\t\t\t\tcase 'tgz':\n\t\t\t\t\t$cmd = \\GO::config()->cmd_tar.' zxf '.escapeshellarg($file->path());\n\t\t\t\t\texec($cmd, $output, $ret);\n\n\t\t\t\t\tif($ret!=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception(\"Could not decompress\\n\".implode(\"\\n\",$output));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tar':\n\t\t\t\t\t$cmd = \\GO::config()->cmd_tar.' xf '.escapeshellarg($file->path());\n\t\t\t\t\t\n\t\t\t\t\texec($cmd, $output, $ret);\n\n\t\t\t\t\tif($ret!=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception(\"Could not decompress\\n\".implode(\"\\n\",$output));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$workingFolder->syncFilesystem(true);\n\n\t\treturn array('success'=>true);\n\n\t}\n\t\n\tprivate function _convertZipEncoding(\\GO\\Base\\Fs\\Folder $folder, $charset='CP850'){\n\t\t$items = $folder->ls();\n\t\t\n\t\tforeach($items as $item){\n\t\t\t\n\t\t\tif(!\\GO\\Base\\Util\\StringHelper::isUtf8($item->name()))\n\t\t\t\t$item->rename(\\GO\\Base\\Util\\StringHelper::clean_utf8($item->name(), $charset));\n\n\t\t\tif($item->isFolder()){\n\t\t\t\t$this->_convertZipEncoding($item, $charset);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * The savemailas module can send attachments along to be stored as files with\n\t * a note, task, event etc.\n\t *\n\t * @param type $response\n\t * @param type $model\n\t * @param type $params\n\t */\n\tpublic function processAttachments(&$response, &$model, &$params){\n\t\t//Does this belong in the controller?\n\t\tif (!empty($params['tmp_files'])) {\n\t\t\t$tmp_files = json_decode($params['tmp_files'], true);\n\n\t\t\tif(count($tmp_files)){\n\t\t\t\t$folder_id = $this->checkModelFolder($model, true, true);\n\n\t\t\t\t$folder = Folder::model()->findByPk($folder_id);\n\n\t\t\t\twhile ($tmp_file = array_shift($tmp_files)) {\n\t\t\t\t\tif (!empty($tmp_file['tmp_file'])) {\n\n\t\t\t\t\t\t$file = new \\GO\\Base\\Fs\\File(\\GO::config()->tmpdir.$tmp_file['tmp_file']);\n\t\t\t\t\t\t$file->move(new \\GO\\Base\\Fs\\Folder(\\GO::config()->file_storage_path . $folder->path));\n\t\t\t\t\t\t$file->shortenFileName();\n\t\t\t\t\t\t$folder->addFile($file->name());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprotected function actionImages($params){\n\t\tif(isset($params[\"id\"])){\n\t\t\t$currentFile = \\GO\\Files\\Model\\File::model()->findByPk($params[\"id\"]);\n\t\t}else\n\t\t{\n\t\t\t$currentFile = \\GO\\Files\\Model\\File::model()->findByPath($params[\"path\"]);\n\t\t}\n\n\t\t$folder = $currentFile->folder();\n\n\t\t$thumbParams = json_decode($params['thumbParams'], true);\n\n\t\t$response[\"success\"]=true;\n\t\t$response['images']=array();\n\t\t$response['index']=$index=0;\n\n\t\tif(!isset($params[\"sort\"]))\n\t\t\t$params[\"sort\"]=\"name\";\n\n\t\tif(!isset($params[\"dir\"]))\n\t\t\t$params[\"dir\"]=\"ASC\";\n\n\t\t$findParams = \\GO\\Base\\Db\\FindParams::newInstance()\n\t\t\t\t\t\t->order($params[\"sort\"], $params[\"dir\"]);\n\n\t\t$stmt = $folder->files($findParams);\n\t\twhile($file = $stmt->fetch()){\n\t\t\tif($file->isImage()){\n\t\t\t\tif($file->id == $currentFile->id)\n\t\t\t\t\t$response['index']=$index;\n\n\t\t\t\t$index++;\n\n\t\t\t\t$response['images'][]=array(\n\t\t\t\t\t\"name\"=>$file->name,\n\t\t\t\t\t\"download_path\"=>$file->getDownloadURL(false),\n\t\t\t\t\t\"src\"=>$file->getThumbUrl($thumbParams)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn $response;\n\t}\n\t\n\t\n\t/**\n\t * Delete a single not. Must be a POST request\n\t *\n\t * @param int $id\n\t * @throws Exception\n\t * @throws \\GO\\Base\\Exception\\NotFound\n\t */\n\tprotected function actionDelete($id) {\n\n\t\tif (!GO::request()->isPost() && !GO::environment()->isCli()) {\n\t\t\tthrow new Exception('Delete must be a POST request');\n\t\t}\n\n\t\t$model = Folder::model()->findByPk($id);\n\t\tif (!$model)\n\t\t\tthrow new \\GO\\Base\\Exception\\NotFound();\n\n\t\t$model->delete();\n\n\t\techo $this->render('delete', array('success'=> true, 'model' => $model));\n\t}\n\n\t/**\n\t * @param $model\n\t * @return mixed\n\t */\n\tprotected function checkLoadPermissionLevel($model)\n\t{\n\t\treturn $model->checkPermissionLevel($model->isNew() ?\\GO\\Base\\Model\\Acl::CREATE_PERMISSION : \\GO\\Base\\Model\\Acl::READ_PERMISSION);\n\t}\n\n}\n"], "filenames": ["www/modules/files/controller/FileController.php", "www/modules/files/controller/FolderController.php"], "buggy_code_start_loc": [192, 757], "buggy_code_end_loc": [193, 988], "fixing_code_start_loc": [192, 757], "fixing_code_end_loc": [193, 988], "type": "CWE-79", "message": "Group-Office is an enterprise CRM and groupware tool. Affected versions are subject to a vulnerability which is present in the file upload mechanism of Group Office. It allows an attacker to execute arbitrary JavaScript code by embedding it within a file's name. For instance, using a filename such as \u201c><img src=x onerror=prompt('XSS')>.jpg\u201d triggers the vulnerability. When this file is uploaded, the JavaScript code within the filename is executed. This issue has been addressed in version 6.8.29. All users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2024-22418", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-18T21:15:09.323", "lastModified": "2024-01-25T22:20:11.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Group-Office is an enterprise CRM and groupware tool. Affected versions are subject to a vulnerability which is present in the file upload mechanism of Group Office. It allows an attacker to execute arbitrary JavaScript code by embedding it within a file's name. For instance, using a filename such as \u201c><img src=x onerror=prompt('XSS')>.jpg\u201d triggers the vulnerability. When this file is uploaded, the JavaScript code within the filename is executed. This issue has been addressed in version 6.8.29. All users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Group-Office es una herramienta de software colaborativo y CRM empresarial. Las versiones afectadas est\u00e1n sujetas a una vulnerabilidad que est\u00e1 presente en el mecanismo de carga de archivos de Group Office. Permite a un atacante ejecutar c\u00f3digo JavaScript arbitrario incrust\u00e1ndolo en el nombre de un archivo. Por ejemplo, el uso de un nombre de archivo como \u201c&gt;.jpg\u201d desencadena la vulnerabilidad. Cuando se carga este archivo, se ejecuta el c\u00f3digo JavaScript dentro del nombre del archivo. Este problema se solucion\u00f3 en la versi\u00f3n 6.8.29. Se recomienda a todos los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:group-office:group_office:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.8.29", "matchCriteriaId": "1AE49BB1-ACBD-414E-AEC5-DD52DC23E670"}]}]}], "references": [{"url": "https://github.com/Intermesh/groupoffice/commit/2a52a5d42d080db6738d70eba30294bcd94ebd09", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Intermesh/groupoffice/security/advisories/GHSA-p7w9-h6c3-wqpp", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Intermesh/groupoffice/commit/2a52a5d42d080db6738d70eba30294bcd94ebd09"}}