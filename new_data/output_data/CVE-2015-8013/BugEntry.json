{"buggy_code": ["// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n// \n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n// \n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n// \n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * Implementation of the String-to-key specifier ({@link http://tools.ietf.org/html/rfc4880#section-3.7|RFC4880 3.7})<br/>\n * <br/>\n * String-to-key (S2K) specifiers are used to convert passphrase strings\n * into symmetric-key encryption/decryption keys.  They are used in two\n * places, currently: to encrypt the secret part of private keys in the\n * private keyring, and to convert passphrases to encryption keys for\n * symmetrically encrypted messages.\n * @requires crypto\n * @requires enums\n * @requires util\n * @module type/s2k\n */\n\nmodule.exports = S2K;\n\nvar enums = require('../enums.js'),\n  util = require('../util.js'),\n  crypto = require('../crypto');\n\n/**\n * @constructor\n */\nfunction S2K() {\n  /** @type {module:enums.hash} */\n  this.algorithm = 'sha256';\n  /** @type {module:enums.s2k} */\n  this.type = 'iterated';\n  this.c = 96;\n  /** Eight bytes of salt in a binary string.\n   * @type {String}\n   */\n  this.salt = crypto.random.getRandomBytes(8);\n}\n\nS2K.prototype.get_count = function () {\n  // Exponent bias, defined in RFC4880\n  var expbias = 6;\n\n  return (16 + (this.c & 15)) << ((this.c >> 4) + expbias);\n};\n\n/**\n * Parsing function for a string-to-key specifier ({@link http://tools.ietf.org/html/rfc4880#section-3.7|RFC 4880 3.7}).\n * @param {String} input Payload of string-to-key specifier\n * @return {Integer} Actual length of the object\n */\nS2K.prototype.read = function (bytes) {\n  var i = 0;\n  this.type = enums.read(enums.s2k, bytes.charCodeAt(i++));\n  this.algorithm = enums.read(enums.hash, bytes.charCodeAt(i++));\n\n  switch (this.type) {\n    case 'simple':\n      break;\n\n    case 'salted':\n      this.salt = bytes.substr(i, 8);\n      i += 8;\n      break;\n\n    case 'iterated':\n      this.salt = bytes.substr(i, 8);\n      i += 8;\n\n      // Octet 10: count, a one-octet, coded value\n      this.c = bytes.charCodeAt(i++);\n      break;\n\n    case 'gnu':\n      if (bytes.substr(i, 3) == \"GNU\") {\n        i += 3; // GNU\n        var gnuExtType = 1000 + bytes.charCodeAt(i++);\n        if (gnuExtType == 1001) {\n          this.type = gnuExtType;\n          // GnuPG extension mode 1001 -- don't write secret key at all\n        } else {\n          throw new Error(\"Unknown s2k gnu protection mode.\");\n        }\n      } else {\n        throw new Error(\"Unknown s2k type.\");\n      }\n      break;\n\n    default:\n      throw new Error(\"Unknown s2k type.\");\n  }\n\n  return i;\n};\n\n\n/**\n * writes an s2k hash based on the inputs.\n * @return {String} Produced key of hashAlgorithm hash length\n */\nS2K.prototype.write = function () {\n  var bytes = String.fromCharCode(enums.write(enums.s2k, this.type));\n  bytes += String.fromCharCode(enums.write(enums.hash, this.algorithm));\n\n  switch (this.type) {\n    case 'simple':\n      break;\n    case 'salted':\n      bytes += this.salt;\n      break;\n    case 'iterated':\n      bytes += this.salt;\n      bytes += String.fromCharCode(this.c);\n      break;\n  }\n\n  return bytes;\n};\n\n/**\n * Produces a key using the specified passphrase and the defined\n * hashAlgorithm\n * @param {String} passphrase Passphrase containing user input\n * @return {String} Produced key with a length corresponding to\n * hashAlgorithm hash length\n */\nS2K.prototype.produce_key = function (passphrase, numBytes) {\n  passphrase = util.encode_utf8(passphrase);\n\n  function round(prefix, s2k) {\n    var algorithm = enums.write(enums.hash, s2k.algorithm);\n\n    switch (s2k.type) {\n      case 'simple':\n        return crypto.hash.digest(algorithm, prefix + passphrase);\n\n      case 'salted':\n        return crypto.hash.digest(algorithm,\n          prefix + s2k.salt + passphrase);\n\n      case 'iterated':\n        var isp = [],\n          count = s2k.get_count(),\n          data = s2k.salt + passphrase;\n\n        while (isp.length * data.length < count)\n          isp.push(data);\n\n        isp = isp.join('');\n\n        if (isp.length > count)\n          isp = isp.substr(0, count);\n\n        return crypto.hash.digest(algorithm, prefix + isp);\n    }\n  }\n\n  var result = '',\n    prefix = '';\n\n  while (result.length <= numBytes) {\n    result += round(prefix, this);\n    prefix += String.fromCharCode(0);\n  }\n\n  return result.substr(0, numBytes);\n};\n\nmodule.exports.fromClone = function (clone) {\n  var s2k = new S2K();\n  this.algorithm = clone.algorithm;\n  this.type = clone.type;\n  this.c = clone.c;\n  this.salt = clone.salt;\n  return s2k;\n};\n"], "fixing_code": ["// GPG4Browsers - An OpenPGP implementation in javascript\n// Copyright (C) 2011 Recurity Labs GmbH\n// \n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3.0 of the License, or (at your option) any later version.\n// \n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n// \n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/**\n * Implementation of the String-to-key specifier ({@link http://tools.ietf.org/html/rfc4880#section-3.7|RFC4880 3.7})<br/>\n * <br/>\n * String-to-key (S2K) specifiers are used to convert passphrase strings\n * into symmetric-key encryption/decryption keys.  They are used in two\n * places, currently: to encrypt the secret part of private keys in the\n * private keyring, and to convert passphrases to encryption keys for\n * symmetrically encrypted messages.\n * @requires crypto\n * @requires enums\n * @requires util\n * @module type/s2k\n */\n\nmodule.exports = S2K;\n\nvar enums = require('../enums.js'),\n  util = require('../util.js'),\n  crypto = require('../crypto');\n\n/**\n * @constructor\n */\nfunction S2K() {\n  /** @type {module:enums.hash} */\n  this.algorithm = 'sha256';\n  /** @type {module:enums.s2k} */\n  this.type = 'iterated';\n  this.c = 96;\n  /** Eight bytes of salt in a binary string.\n   * @type {String}\n   */\n  this.salt = crypto.random.getRandomBytes(8);\n}\n\nS2K.prototype.get_count = function () {\n  // Exponent bias, defined in RFC4880\n  var expbias = 6;\n\n  return (16 + (this.c & 15)) << ((this.c >> 4) + expbias);\n};\n\n/**\n * Parsing function for a string-to-key specifier ({@link http://tools.ietf.org/html/rfc4880#section-3.7|RFC 4880 3.7}).\n * @param {String} input Payload of string-to-key specifier\n * @return {Integer} Actual length of the object\n */\nS2K.prototype.read = function (bytes) {\n  var i = 0;\n  this.type = enums.read(enums.s2k, bytes.charCodeAt(i++));\n  this.algorithm = enums.read(enums.hash, bytes.charCodeAt(i++));\n\n  switch (this.type) {\n    case 'simple':\n      break;\n\n    case 'salted':\n      this.salt = bytes.substr(i, 8);\n      i += 8;\n      break;\n\n    case 'iterated':\n      this.salt = bytes.substr(i, 8);\n      i += 8;\n\n      // Octet 10: count, a one-octet, coded value\n      this.c = bytes.charCodeAt(i++);\n      break;\n\n    case 'gnu':\n      if (bytes.substr(i, 3) == \"GNU\") {\n        i += 3; // GNU\n        var gnuExtType = 1000 + bytes.charCodeAt(i++);\n        if (gnuExtType == 1001) {\n          this.type = gnuExtType;\n          // GnuPG extension mode 1001 -- don't write secret key at all\n        } else {\n          throw new Error(\"Unknown s2k gnu protection mode.\");\n        }\n      } else {\n        throw new Error(\"Unknown s2k type.\");\n      }\n      break;\n\n    default:\n      throw new Error(\"Unknown s2k type.\");\n  }\n\n  return i;\n};\n\n\n/**\n * writes an s2k hash based on the inputs.\n * @return {String} Produced key of hashAlgorithm hash length\n */\nS2K.prototype.write = function () {\n  var bytes = String.fromCharCode(enums.write(enums.s2k, this.type));\n  bytes += String.fromCharCode(enums.write(enums.hash, this.algorithm));\n\n  switch (this.type) {\n    case 'simple':\n      break;\n    case 'salted':\n      bytes += this.salt;\n      break;\n    case 'iterated':\n      bytes += this.salt;\n      bytes += String.fromCharCode(this.c);\n      break;\n    case 'gnu':\n      throw new Error(\"GNU s2k type not supported.\");\n    default:\n      throw new Error(\"Unknown s2k type.\");\n  }\n\n  return bytes;\n};\n\n/**\n * Produces a key using the specified passphrase and the defined\n * hashAlgorithm\n * @param {String} passphrase Passphrase containing user input\n * @return {String} Produced key with a length corresponding to\n * hashAlgorithm hash length\n */\nS2K.prototype.produce_key = function (passphrase, numBytes) {\n  passphrase = util.encode_utf8(passphrase);\n\n  function round(prefix, s2k) {\n    var algorithm = enums.write(enums.hash, s2k.algorithm);\n\n    switch (s2k.type) {\n      case 'simple':\n        return crypto.hash.digest(algorithm, prefix + passphrase);\n\n      case 'salted':\n        return crypto.hash.digest(algorithm,\n          prefix + s2k.salt + passphrase);\n\n      case 'iterated':\n        var isp = [],\n          count = s2k.get_count(),\n          data = s2k.salt + passphrase;\n\n        while (isp.length * data.length < count)\n          isp.push(data);\n\n        isp = isp.join('');\n\n        if (isp.length > count)\n          isp = isp.substr(0, count);\n\n        return crypto.hash.digest(algorithm, prefix + isp);\n\n      case 'gnu':\n        throw new Error(\"GNU s2k type not supported.\");\n\n      default:\n        throw new Error(\"Unknown s2k type.\");\n    }\n  }\n\n  var result = '',\n    prefix = '';\n\n  while (result.length <= numBytes) {\n    result += round(prefix, this);\n    prefix += String.fromCharCode(0);\n  }\n\n  return result.substr(0, numBytes);\n};\n\nmodule.exports.fromClone = function (clone) {\n  var s2k = new S2K();\n  this.algorithm = clone.algorithm;\n  this.type = clone.type;\n  this.c = clone.c;\n  this.salt = clone.salt;\n  return s2k;\n};\n"], "filenames": ["src/type/s2k.js"], "buggy_code_start_loc": [127], "buggy_code_end_loc": [167], "fixing_code_start_loc": [128], "fixing_code_end_loc": [178], "type": "CWE-310", "message": "s2k.js in OpenPGP.js will decrypt arbitrary messages regardless of passphrase for crafted PGP keys which allows remote attackers to bypass authentication if message decryption is used as an authentication mechanism via a crafted symmetrically encrypted PGP message.", "other": {"cve": {"id": "CVE-2015-8013", "sourceIdentifier": "cve@mitre.org", "published": "2017-07-25T18:29:00.993", "lastModified": "2017-08-10T13:15:49.297", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "s2k.js in OpenPGP.js will decrypt arbitrary messages regardless of passphrase for crafted PGP keys which allows remote attackers to bypass authentication if message decryption is used as an authentication mechanism via a crafted symmetrically encrypted PGP message."}, {"lang": "es", "value": "El archivo s2k.js en biblioteca OpenPGP.js descifrar\u00e1 mensajes arbitrarios independientemente de la contrase\u00f1a para claves PGP creadas, lo que permite a los atacantes remotos omitir la autenticaci\u00f3n si el descifrado de mensajes es usado como un mecanismo de autenticaci\u00f3n por medio de un mensaje PGP cifrado sim\u00e9tricamente."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-310"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openpgpjs:openpgpjs:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.0", "matchCriteriaId": "4BCC1CCC-1F7B-4C3D-8F75-029BCB2E335A"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2015/10/30/5", "source": "cve@mitre.org", "tags": ["Mailing List"]}, {"url": "http://www.securityfocus.com/bid/77088", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/openpgpjs/openpgpjs/commit/668a9bbe7033f3f475576209305eb57a54306d29", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openpgpjs/openpgpjs/commit/668a9bbe7033f3f475576209305eb57a54306d29"}}