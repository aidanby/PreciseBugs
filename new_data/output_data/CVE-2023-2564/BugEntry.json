{"buggy_code": ["const log = require('loglevel').getLogger('CmdBuilder');\n\nmodule.exports = class CommandBuilder {\n\n  /**\n   * @param {string} cmd\n   */\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.args = [];\n  }\n\n  /**\n   * @param {string|number} [value]\n   * @returns {string}\n   */\n  _format(value) {\n    if (typeof value === 'string') {\n      if (value.includes('\\'')) {\n        throw Error('Argument must not contain single quote \"\\'\"');\n      } else if (['$', ' ', '#', '\\\\', ';'].some(c => value.includes(c))) {\n        return `'${value}'`;\n      }\n    }\n    return `${value}`;\n  }\n\n  /**\n   * @param {Array<string|number>} values\n   * @returns {CmdBuilder}\n   */\n  arg(...values) {\n    this.args.push(...values\n      .filter(s => s !== undefined)\n      .map(this._format));\n    return this;\n  }\n\n  /**\n   * @param {boolean} [ignoreStderr]\n   * @returns {string}\n   */\n  build(ignoreStderr) {\n    log.trace('build()', this);\n    let cmd = this.cmd;\n    for (const arg of this.args) {\n      cmd += ' ' + arg;\n    }\n    if (ignoreStderr) {\n      cmd += ' 2>/dev/null';\n    }\n    log.trace('build()', cmd);\n    return cmd;\n  }\n};\n", "const log = require('loglevel').getLogger('ScanimageCommand');\n\nconst CommandBuilder = require('./command-builder');\nconst Constants = require('../constants');\nconst LogFormatter = require('./log-formatter');\nconst Process = require('./process');\nconst semver = require('semver');\n\nclass Scanimage {\n\n  /**\n   * @param {Configuration} config\n   */\n  constructor(config) {\n    this.config = config;\n  }\n\n  get version() {\n    if (this._version === undefined) {\n      const result = Process.executeSync(`${this.config.scanimage} -V`);\n      this._version = /.*backend version (.*)/.exec(result)[1];\n    }\n    return this._version;\n  }\n\n  get supportsOutputFlag() {\n    return semver.satisfies(this.version, '>=1.0.28');\n  }\n}\n\nmodule.exports = class ScanimageCommand {\n  constructor(config) {\n    this.config = config;\n    this.scanimage = new Scanimage(config);\n  }\n\n  /**\n   * @returns {string}\n   */\n  devices() {\n    return new CommandBuilder(this.config.scanimage)\n      .arg('-L')\n      .build();\n  }\n\n  /**\n   * @param {string} deviceId\n   * @returns {string}\n   */\n  features(deviceId) {\n    return new CommandBuilder(this.config.scanimage)\n      .arg('-d', deviceId)\n      .arg('-A')\n      .build();\n  }\n\n  /**\n   * @param {number} page\n   * @returns {string}\n   */\n  filename(page) {\n    const number = `000${page}`.slice(-4);\n    return `${this.config.tempDirectory}/${Constants.TEMP_FILESTEM}-0-${number}.tif`;\n  }\n\n  /**\n   * @param {ScanRequest} request\n   * @returns {string}\n   */\n  scan(request) {\n    log.debug(LogFormatter.format().full(request));\n    const params = request.params;\n    const cmdBuilder = new CommandBuilder(this.config.scanimage);\n    cmdBuilder.arg('-d', params.deviceId);\n\n    if ('source' in params) {\n      cmdBuilder.arg('--source', params.source);\n    }\n    if ('mode' in params) {\n      cmdBuilder.arg('--mode', params.mode);\n    }\n    if ('adfMode' in params) {\n      cmdBuilder.arg('--adf-mode', params.adfMode);\n    }\n\n    cmdBuilder.arg('--resolution', params.resolution);\n\n    if ('pageWidth' in params) {\n      cmdBuilder.arg('--page-width', params.pageWidth);\n    }\n    if ('pageHeight' in params) {\n      cmdBuilder.arg('--page-height', params.pageHeight);\n    }\n    if ('left' in params) {\n      cmdBuilder.arg('-l', params.left);\n    }\n    if ('top' in params) {\n      cmdBuilder.arg('-t', params.top);\n    }\n    if ('width' in params) {\n      cmdBuilder.arg('-x', params.width);\n    }\n    if ('height' in params) {\n      cmdBuilder.arg('-y', params.height);\n    }\n\n    cmdBuilder.arg('--format', params.format);\n\n    if ('ald' in params) {\n      cmdBuilder.arg(`--ald=${params.ald}`);\n    }\n    if ('depth' in params) {\n      cmdBuilder.arg('--depth', params.depth);\n    }\n    if ('brightness' in params) {\n      cmdBuilder.arg('--brightness', params.brightness);\n    }\n    if ('contrast' in params) {\n      cmdBuilder.arg('--contrast', params.contrast);\n    }\n    if (params.mode === 'Lineart' && params.dynamicLineart === false) {\n      cmdBuilder.arg('--disable-dynamic-lineart=yes');\n    }\n    if ([Constants.BATCH_AUTO, Constants.BATCH_COLLATE_STANDARD, Constants.BATCH_COLLATE_REVERSE].includes(request.batch)) {\n      const pattern = `${this.config.tempDirectory}/${Constants.TEMP_FILESTEM}-${request.index}-%04d.tif`;\n      cmdBuilder.arg(`--batch=${pattern}`);\n    } else {\n      const outputFile = 'isPreview' in params && params.isPreview\n        ? `${this.config.previewDirectory}/preview.tif`\n        : this.filename(request.index);\n\n      if (this.scanimage.supportsOutputFlag) {\n        cmdBuilder.arg('-o', outputFile);\n      } else {\n        cmdBuilder.arg('>', outputFile);\n      }\n    }\n    return cmdBuilder.build();\n  }\n};\n", "/* eslint-env mocha */\nconst assert = require('assert');\nconst CommandBuilder = require('../src/classes/command-builder');\n\ndescribe('CommandBuilder', () => {\n  it('command-only', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').build(),\n      'echo');\n  });\n\n  it('command-arg', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('hello world').build(),\n      'echo \\'hello world\\'');\n  });\n\n  it('command-arg-hash', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('-n', 'hello#world').build(),\n      'echo -n \\'hello#world\\'');\n  });\n\n  it('command-arg-comma', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('-n', 'hello;world').build(),\n      'echo -n \\'hello;world\\'');\n  });\n\n  it('command-security-1', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('-n', 'hello\" && ls -al;# world').build(),\n      'echo -n \\'hello\" && ls -al;# world\\'');\n  });\n\n  it('command-security-2', async () => {\n    assert.throws(\n      () => new CommandBuilder('echo').arg('-n', 'hello\\' && echo break shell').build(),\n      Error,\n      'Broke shell');\n  });\n\n  it('command-quotes\"', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('\"1\\n2\\n3\"').build(),\n      'echo \"1\\n2\\n3\"');\n  });\n});\n", "/* eslint-env mocha */\nconst assert = require('assert');\nconst CmdBuilder = require('../src/classes/command-builder');\nconst Process = require('../src/classes/process');\n\ndescribe('Process', () => {\n  it('echo', async () => {\n    const result = await Process.execute(new CmdBuilder('echo').arg('hello world').build());\n    assert.strictEqual(result, 'hello world\\n');\n  });\n\n  it('echo-security', async () => {\n    let result = null;\n    result = await Process.execute(new CmdBuilder('echo').arg('-n', 'hello\" && ls -al;# world').build());\n    assert.strictEqual(result, 'hello\" && ls -al;# world');\n\n    result = await Process.execute(new CmdBuilder('echo').arg('-n', '`ls -al`').build());\n    assert.strictEqual(result, '`ls -al`');\n\n    result = await Process.execute(new CmdBuilder('echo').arg('-n', '$(date)').build());\n    assert.strictEqual(result, '$(date)');\n  });\n\n  it('echo \"1\\\\n2\\\\n3\" | wc -l', async () => {\n    const cmd = new CmdBuilder('echo').arg('\"1\\n2\\n3\"').build();\n    assert.strictEqual(cmd, 'echo \"1\\n2\\n3\"');\n    const ls = await Process.spawn(cmd);\n    const result = await Process.spawn('wc -l', ls);\n    assert.strictEqual(result.toString(), '3\\n');\n  });\n\n  it('error', async () => {\n    assert.rejects(async () => {\n      await Process.spawn('hello');\n    }, Error, '/bin/sh: 1: hello');\n  });\n\n  it('ignore error', async () => {\n    await Process.spawn('hello', null, { ignoreErrors: true });\n  });\n\n  it('cwd', async () => {\n    const ls = await Process.spawn('ls -al', null, { cwd: './test/resource' });\n    assert.strictEqual(ls.indexOf('logo.png') > -1, true);\n  });\n\n  it('cat ./test/resource/logo.png', async () => {\n    const png = await Process.spawn('cat ./test/resource/logo.png');\n    assert.strictEqual(png.length, 3451);\n  });\n\n  it('spawn: cat ./test/resource/logo.png | convert - -quality 50 jpg:-', async function () {\n    this.timeout(5000);\n    const png = await Process.spawn('cat ./test/resource/logo.png');\n    const jpg = await Process.spawn('convert - -quality 50 jpg:-', png);\n    // It should be about 4179 but different convert implementations may vary\n    assert.strictEqual(jpg.length > 4000, true);\n  });\n\n  it('chain: cat ./test/resource/logo.png | convert - -quality 50 jpg:-', async function () {\n    this.timeout(5000);\n    const cmds = [\n      'cat ./test/resource/logo.png',\n      'convert - -quality 50 jpg:-'\n    ];\n    const jpg = await Process.chain(cmds);\n    // It should be about 4179 but different convert implementations may vary\n    assert.strictEqual(jpg.length > 4000, true);\n  });\n\n  it('chain: cat ./test/resource/logo.png | convert - pdf:-', async function () {\n    this.timeout(5000);\n    const cmds = [\n      'cat ./test/resource/logo.png',\n      'convert - pdf:-'\n    ];\n    const pdf = await Process.chain(cmds);\n    assert.strictEqual(pdf.length > 4000, true);\n  });\n\n});\n", "/* eslint-env mocha */\nconst assert = require('assert');\nconst Context = require('../src/classes/context');\nconst Device = require('../src/classes/device');\nconst FileInfo = require('../src/classes/file-info');\nconst Request = require('../src/classes/request');\nconst UserOptions = require('../src/classes/user-options');\n\nconst application = require('../src/application');\nconst scanimageCommand = application.scanimageCommand();\n\nconst requestScan = {\n  params: {\n    deviceId: 'deviceId',\n    resolution: '150',\n    format: 'TIF',\n    isPreview: false\n  }\n};\n\nconst requestPreview = {\n  params: {\n    deviceId: 'deviceId',\n    resolution: '150',\n    format: 'TIF',\n    isPreview: true\n  }\n};\n\nfunction commandFor(version, request) {\n  const temp = scanimageCommand.scanimage._version;\n  scanimageCommand.scanimage._version = version;\n  const command = scanimageCommand.scan(request);\n  scanimageCommand.scanimage._version = temp;\n  return command;\n}\n\ndescribe('ScanimageCommand', () => {\n  it('scanimageVersion:1.0.27:scan', () => {\n    const command = commandFor('1.0.27', requestScan);\n    assert.ok(command.match(/.*scanimage.* > data\\/temp\\/~tmp-scan-0-ined.tif/));\n  });\n\n  it('scanimageVersion:1.0.27:preview', () => {\n    const command = commandFor('1.0.27', requestPreview);\n    assert.ok(command.match(/.*scanimage.* > data\\/preview\\/preview.tif/));\n  });\n\n  it('scanimageVersion:1.0.28:scan', () => {\n    const command = commandFor('1.0.28', requestScan);\n    assert.ok(command.match(/.*scanimage.* -o data\\/temp\\/~tmp-scan-0-ined.tif/));\n  });\n\n  it('scanimageVersion:1.0.28:preview', () => {\n    const command = commandFor('1.0.28', requestPreview);\n    assert.ok(command.match(/.*scanimage.* -o data\\/preview\\/preview.tif/));\n  });\n\n  it('scanimageVersion:1.0.31:scan', () => {\n    const command = commandFor('1.0.31', requestScan);\n    assert.ok(command.match(/.*scanimage.* -o data\\/temp\\/~tmp-scan-0-ined.tif/));\n  });\n\n  it('scanimageVersion:1.0.31:preview', () => {\n    const command = commandFor('1.0.31', requestPreview);\n    assert.ok(command.match(/.*scanimage.* -o data\\/preview\\/preview.tif/));\n  });\n\n  it('scanimage-a10.txt', () => {\n    const file = FileInfo.create('test/resource/scanimage-a10.txt');\n    const device = Device.from(file.toText());\n    const context = new Context(application.config(), [device], new UserOptions());\n    const request = new Request(context, {\n      params: {\n        mode: 'Color'\n      }\n    });\n    const command = commandFor('1.0.31', request);\n\n    // eslint-disable-next-line quotes\n    assert.strictEqual(command, `/usr/bin/scanimage -d epjitsu:libusb:001:003 --source 'ADF Front' --mode Color --resolution 300 --page-width 215.8 --page-height 292 -t 0 --format tiff --brightness 0 --contrast 0 -o data/temp/~tmp-scan-0-0001.tif`);\n  });\n\n  it('scanimage-a14.txt', () => {\n    const file = FileInfo.create('test/resource/scanimage-a14.txt');\n    const device = Device.from(file.toText());\n    const context = new Context(application.config(), [device], new UserOptions());\n    const request = new Request(context, {\n      params: {\n        ald: 'yes'\n      }\n    });\n    const command = commandFor('1.1.1', request);\n    // eslint-disable-next-line quotes\n    assert.strictEqual(command, `/usr/bin/scanimage -d 'fujitsu:ScanSnap S1500:8176' --source 'ADF Front' --mode Lineart --resolution 600 --page-width 215.8 --page-height 279.3 -l 0 -t 0 -x 215.8 -y 279.3 --format tiff --ald=yes --brightness 0 -o data/temp/~tmp-scan-0-0001.tif`);\n  });\n\n});\n"], "fixing_code": ["const log = require('loglevel').getLogger('CmdBuilder');\n\nmodule.exports = class CommandBuilder {\n\n  /**\n   * @param {string} cmd\n   */\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.args = [];\n  }\n\n  /**\n   * @param {string|number} [value]\n   * @returns {string}\n   */\n  _format(value) {\n    if (['boolean', 'number'].includes(typeof value)) {\n      return `${value}`;\n    } else if ('string' === typeof value) {\n      if (value.includes('\\'')) {\n        throw Error('Argument must not contain single quote \"\\'\"');\n      } else if (/^[0-9a-z-=/~.:]+$/i.test(value)) {\n        return `${value}`;\n      }\n      return `'${value}'`;\n    }\n    throw Error(`Invalid argument type: '${typeof value}'`);\n  }\n\n  /**\n   * @param {Array<string|number>} values\n   * @returns {CmdBuilder}\n   */\n  arg(...values) {\n    this.args.push(...values\n      .filter(s => s !== undefined)\n      .map(this._format));\n    return this;\n  }\n\n  /**\n   * @param {string} operator\n   * @returns {CmdBuilder}\n   */\n  redirect(operator) {\n    if (typeof operator !== 'string' || !/^[&<>|]+$/.test(operator)) {\n      throw Error(`Invalid argument: '${operator}'`);\n    }\n    this.args.push(operator);\n    return this;\n  }\n\n  /**\n   * @param {boolean} [ignoreStderr]\n   * @returns {string}\n   */\n  build(ignoreStderr) {\n    log.trace('build()', this);\n    let cmd = this.cmd;\n    for (const arg of this.args) {\n      cmd += ' ' + arg;\n    }\n    if (ignoreStderr) {\n      cmd += ' 2>/dev/null';\n    }\n    log.trace('build()', cmd);\n    return cmd;\n  }\n};\n", "const log = require('loglevel').getLogger('ScanimageCommand');\n\nconst CommandBuilder = require('./command-builder');\nconst Constants = require('../constants');\nconst LogFormatter = require('./log-formatter');\nconst Process = require('./process');\nconst semver = require('semver');\n\nclass Scanimage {\n\n  /**\n   * @param {Configuration} config\n   */\n  constructor(config) {\n    this.config = config;\n  }\n\n  get version() {\n    if (this._version === undefined) {\n      const result = Process.executeSync(`${this.config.scanimage} -V`);\n      this._version = /.*backend version (.*)/.exec(result)[1];\n    }\n    return this._version;\n  }\n\n  get supportsOutputFlag() {\n    return semver.satisfies(this.version, '>=1.0.28');\n  }\n}\n\nmodule.exports = class ScanimageCommand {\n  constructor(config) {\n    this.config = config;\n    this.scanimage = new Scanimage(config);\n  }\n\n  /**\n   * @returns {string}\n   */\n  devices() {\n    return new CommandBuilder(this.config.scanimage)\n      .arg('-L')\n      .build();\n  }\n\n  /**\n   * @param {string} deviceId\n   * @returns {string}\n   */\n  features(deviceId) {\n    return new CommandBuilder(this.config.scanimage)\n      .arg('-d', deviceId)\n      .arg('-A')\n      .build();\n  }\n\n  /**\n   * @param {number} page\n   * @returns {string}\n   */\n  filename(page) {\n    const number = `000${page}`.slice(-4);\n    return `${this.config.tempDirectory}/${Constants.TEMP_FILESTEM}-0-${number}.tif`;\n  }\n\n  /**\n   * @param {ScanRequest} request\n   * @returns {string}\n   */\n  scan(request) {\n    log.debug(LogFormatter.format().full(request));\n    const params = request.params;\n    const cmdBuilder = new CommandBuilder(this.config.scanimage);\n    cmdBuilder.arg('-d', params.deviceId);\n\n    if ('source' in params) {\n      cmdBuilder.arg('--source', params.source);\n    }\n    if ('mode' in params) {\n      cmdBuilder.arg('--mode', params.mode);\n    }\n    if ('adfMode' in params) {\n      cmdBuilder.arg('--adf-mode', params.adfMode);\n    }\n\n    cmdBuilder.arg('--resolution', params.resolution);\n\n    if ('pageWidth' in params) {\n      cmdBuilder.arg('--page-width', params.pageWidth);\n    }\n    if ('pageHeight' in params) {\n      cmdBuilder.arg('--page-height', params.pageHeight);\n    }\n    if ('left' in params) {\n      cmdBuilder.arg('-l', params.left);\n    }\n    if ('top' in params) {\n      cmdBuilder.arg('-t', params.top);\n    }\n    if ('width' in params) {\n      cmdBuilder.arg('-x', params.width);\n    }\n    if ('height' in params) {\n      cmdBuilder.arg('-y', params.height);\n    }\n\n    cmdBuilder.arg('--format', params.format);\n\n    if ('ald' in params) {\n      cmdBuilder.arg(`--ald=${params.ald}`);\n    }\n    if ('depth' in params) {\n      cmdBuilder.arg('--depth', params.depth);\n    }\n    if ('brightness' in params) {\n      cmdBuilder.arg('--brightness', params.brightness);\n    }\n    if ('contrast' in params) {\n      cmdBuilder.arg('--contrast', params.contrast);\n    }\n    if (params.mode === 'Lineart' && params.dynamicLineart === false) {\n      cmdBuilder.arg('--disable-dynamic-lineart=yes');\n    }\n    if ([Constants.BATCH_AUTO, Constants.BATCH_COLLATE_STANDARD, Constants.BATCH_COLLATE_REVERSE].includes(request.batch)) {\n      const pattern = `${this.config.tempDirectory}/${Constants.TEMP_FILESTEM}-${request.index}-%04d.tif`;\n      cmdBuilder.arg(`--batch=${pattern}`);\n    } else {\n      const outputFile = 'isPreview' in params && params.isPreview\n        ? `${this.config.previewDirectory}/preview.tif`\n        : this.filename(request.index);\n\n      if (this.scanimage.supportsOutputFlag) {\n        cmdBuilder.arg('-o', outputFile);\n      } else {\n        cmdBuilder.redirect('>').arg(outputFile);\n      }\n    }\n    return cmdBuilder.build();\n  }\n};\n", "/* eslint-env mocha */\nconst assert = require('assert');\nconst CommandBuilder = require('../src/classes/command-builder');\n\ndescribe('CommandBuilder', () => {\n  it('command-only', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').build(),\n      'echo');\n  });\n\n  it('command-arg-number', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg(1).build(),\n      'echo 1');\n  });\n\n  it('command-arg-boolean', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg(true).build(),\n      'echo true');\n  });\n\n  it('command-arg-string-no-space', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('hello-world').build(),\n      'echo hello-world');\n  });\n\n  it('command-arg-string-space', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('hello world').build(),\n      'echo \\'hello world\\'');\n  });\n\n  it('command-arg-string-tab-backtick', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('`cat\\t/etc/os-release\\t1>&2`').build(),\n      'echo \\'`cat\\t/etc/os-release\\t1>&2`\\'');\n  });\n\n  it('command-arg-hash', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('-n', 'hello#world').build(),\n      'echo -n \\'hello#world\\'');\n  });\n\n  it('command-arg-comma', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('-n', 'hello;world').build(),\n      'echo -n \\'hello;world\\'');\n  });\n\n  it('command-arg-redirect', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('> thing').build(),\n      'echo \\'> thing\\'');\n  });\n\n  it('command-security-1', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('-n', 'hello\" && ls -al;# world').build(),\n      'echo -n \\'hello\" && ls -al;# world\\'');\n  });\n\n  it('command-security-2', async () => {\n    assert.throws(\n      () => new CommandBuilder('echo').arg('-n', 'hello\\' && echo break shell').build(),\n      /Error: Argument.*single quote.*/);\n  });\n\n  it('command-security-array', async () => {\n    assert.throws(\n      () => new CommandBuilder('echo').arg(['`cat /etc/os-release 1>&2`']).build(),\n      /Error: Invalid argument.*object.*/);\n  });\n\n  it('command-security-object', async () => {\n    assert.throws(\n      () => new CommandBuilder('echo').arg({arg: '`cat /etc/os-release 1>&2`'}).build(),\n      /Error: Invalid argument.*object.*/);\n  });\n\n  it('command-quotes\"', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('\"1\\n2\\n3\"').build(),\n      'echo \\'\"1\\n2\\n3\"\\'');\n  });\n\n  it('command-redirect-good\"', async () => {\n    assert.strictEqual(\n      new CommandBuilder('echo').arg('\"hello\"').redirect('>').arg('output').build(),\n      'echo \\'\"hello\"\\' > output');\n  });\n\n  it('command-redirect-bad-string', async () => {\n    assert.throws(\n      () => new CommandBuilder('echo').redirect('a').build(),\n      /Error: Invalid argument.*/);\n  });\n\n  it('command-redirect-bad-number', async () => {\n    assert.throws(\n      () => new CommandBuilder('echo').redirect(1).build(),\n      /Error: Invalid argument.*/);\n  });\n\n  it('command-redirect-bad-array', async () => {\n    assert.throws(\n      () => new CommandBuilder('echo').redirect(['invalid']).build(),\n      /Error: Invalid argument.*/);\n  });\n});\n", "/* eslint-env mocha */\nconst assert = require('assert');\nconst CmdBuilder = require('../src/classes/command-builder');\nconst Process = require('../src/classes/process');\n\ndescribe('Process', () => {\n  it('echo', async () => {\n    const result = await Process.execute(new CmdBuilder('echo').arg('hello world').build());\n    assert.strictEqual(result, 'hello world\\n');\n  });\n\n  it('echo-security', async () => {\n    let result = null;\n    result = await Process.execute(new CmdBuilder('echo').arg('-n', 'hello\" && ls -al;# world').build());\n    assert.strictEqual(result, 'hello\" && ls -al;# world');\n\n    result = await Process.execute(new CmdBuilder('echo').arg('-n', '`ls -al`').build());\n    assert.strictEqual(result, '`ls -al`');\n\n    result = await Process.execute(new CmdBuilder('echo').arg('-n', '`ls\\t-al`').build());\n    assert.strictEqual(result, '`ls\\t-al`');\n\n    result = await Process.execute(new CmdBuilder('echo').arg('-n', '$(date)').build());\n    assert.strictEqual(result, '$(date)');\n  });\n\n  it('echo \"1\\\\n2\\\\n3\" | wc -l', async () => {\n    const cmd = new CmdBuilder('echo').arg('\"1\\n2\\n3\"').build();\n    const ls = await Process.spawn(cmd);\n    const result = await Process.spawn('wc -l', ls);\n    assert.strictEqual(result.toString(), '3\\n');\n  });\n\n  it('error', async () => {\n    assert.rejects(async () => {\n      await Process.spawn('hello');\n    }, Error, '/bin/sh: 1: hello');\n  });\n\n  it('ignore error', async () => {\n    await Process.spawn('hello', null, { ignoreErrors: true });\n  });\n\n  it('cwd', async () => {\n    const ls = await Process.spawn('ls -al', null, { cwd: './test/resource' });\n    assert.strictEqual(ls.indexOf('logo.png') > -1, true);\n  });\n\n  it('cat ./test/resource/logo.png', async () => {\n    const png = await Process.spawn('cat ./test/resource/logo.png');\n    assert.strictEqual(png.length, 3451);\n  });\n\n  it('spawn: cat ./test/resource/logo.png | convert - -quality 50 jpg:-', async function () {\n    this.timeout(5000);\n    const png = await Process.spawn('cat ./test/resource/logo.png');\n    const jpg = await Process.spawn('convert - -quality 50 jpg:-', png);\n    // It should be about 4179 but different convert implementations may vary\n    assert.strictEqual(jpg.length > 4000, true);\n  });\n\n  it('chain: cat ./test/resource/logo.png | convert - -quality 50 jpg:-', async function () {\n    this.timeout(5000);\n    const cmds = [\n      'cat ./test/resource/logo.png',\n      'convert - -quality 50 jpg:-'\n    ];\n    const jpg = await Process.chain(cmds);\n    // It should be about 4179 but different convert implementations may vary\n    assert.strictEqual(jpg.length > 4000, true);\n  });\n\n  it('chain: cat ./test/resource/logo.png | convert - pdf:-', async function () {\n    this.timeout(5000);\n    const cmds = [\n      'cat ./test/resource/logo.png',\n      'convert - pdf:-'\n    ];\n    const pdf = await Process.chain(cmds);\n    assert.strictEqual(pdf.length > 4000, true);\n  });\n\n});\n", "/* eslint-env mocha */\nconst assert = require('assert');\nconst Context = require('../src/classes/context');\nconst Device = require('../src/classes/device');\nconst FileInfo = require('../src/classes/file-info');\nconst Request = require('../src/classes/request');\nconst UserOptions = require('../src/classes/user-options');\n\nconst application = require('../src/application');\nconst scanimageCommand = application.scanimageCommand();\n\nconst requestScan = {\n  params: {\n    deviceId: 'deviceId',\n    resolution: '150',\n    format: 'TIF',\n    isPreview: false\n  }\n};\n\nconst requestPreview = {\n  params: {\n    deviceId: 'deviceId',\n    resolution: '150',\n    format: 'TIF',\n    isPreview: true\n  }\n};\n\nfunction commandFor(version, request) {\n  const temp = scanimageCommand.scanimage._version;\n  scanimageCommand.scanimage._version = version;\n  const command = scanimageCommand.scan(request);\n  scanimageCommand.scanimage._version = temp;\n  return command;\n}\n\ndescribe('ScanimageCommand', () => {\n  it('scanimageVersion:1.0.27:scan', () => {\n    const command = commandFor('1.0.27', requestScan);\n    assert.match(command, /.*scanimage.* > data\\/temp\\/~tmp-scan-0-ined.tif/);\n  });\n\n  it('scanimageVersion:1.0.27:preview', () => {\n    const command = commandFor('1.0.27', requestPreview);\n    assert.match(command, /.*scanimage.* > data\\/preview\\/preview.tif/);\n  });\n\n  it('scanimageVersion:1.0.28:scan', () => {\n    const command = commandFor('1.0.28', requestScan);\n    assert.match(command, /.*scanimage.* -o data\\/temp\\/~tmp-scan-0-ined.tif/);\n  });\n\n  it('scanimageVersion:1.0.28:preview', () => {\n    const command = commandFor('1.0.28', requestPreview);\n    assert.match(command, /.*scanimage.* -o data\\/preview\\/preview.tif/);\n  });\n\n  it('scanimageVersion:1.0.31:scan', () => {\n    const command = commandFor('1.0.31', requestScan);\n    assert.match(command, /.*scanimage.* -o data\\/temp\\/~tmp-scan-0-ined.tif/);\n  });\n\n  it('scanimageVersion:1.0.31:preview', () => {\n    const command = commandFor('1.0.31', requestPreview);\n    assert.match(command, /.*scanimage.* -o data\\/preview\\/preview.tif/);\n  });\n\n  it('scanimage-a10.txt', () => {\n    const file = FileInfo.create('test/resource/scanimage-a10.txt');\n    const device = Device.from(file.toText());\n    const context = new Context(application.config(), [device], new UserOptions());\n    const request = new Request(context, {\n      params: {\n        mode: 'Color'\n      }\n    });\n    const command = commandFor('1.0.31', request);\n\n    // eslint-disable-next-line quotes\n    assert.strictEqual(command, `/usr/bin/scanimage -d epjitsu:libusb:001:003 --source 'ADF Front' --mode Color --resolution 300 --page-width 215.8 --page-height 292 -t 0 --format tiff --brightness 0 --contrast 0 -o data/temp/~tmp-scan-0-0001.tif`);\n  });\n\n  it('scanimage-a14.txt', () => {\n    const file = FileInfo.create('test/resource/scanimage-a14.txt');\n    const device = Device.from(file.toText());\n    const context = new Context(application.config(), [device], new UserOptions());\n    const request = new Request(context, {\n      params: {\n        ald: 'yes'\n      }\n    });\n    const command = commandFor('1.1.1', request);\n    // eslint-disable-next-line quotes\n    assert.strictEqual(command, `/usr/bin/scanimage -d 'fujitsu:ScanSnap S1500:8176' --source 'ADF Front' --mode Lineart --resolution 600 --page-width 215.8 --page-height 279.3 -l 0 -t 0 -x 215.8 -y 279.3 --format tiff --ald=yes --brightness 0 -o data/temp/~tmp-scan-0-0001.tif`);\n  });\n\n});\n"], "filenames": ["packages/server/src/classes/command-builder.js", "packages/server/src/classes/scanimage-command.js", "packages/server/test/command-builder.test.js", "packages/server/test/process.test.js", "packages/server/test/scanimage-command.test.js"], "buggy_code_start_loc": [18, 135, 12, 19, 41], "buggy_code_end_loc": [35, 136, 47, 27, 67], "fixing_code_start_loc": [18, 135, 12, 20, 41], "fixing_code_end_loc": [51, 136, 112, 28, 67], "type": "CWE-78", "message": "OS Command Injection in GitHub repository sbs20/scanservjs prior to v2.27.0.", "other": {"cve": {"id": "CVE-2023-2564", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-07T14:15:42.343", "lastModified": "2023-05-12T14:43:05.987", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OS Command Injection in GitHub repository sbs20/scanservjs prior to v2.27.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scanservjs_project:scanservjs:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.27.0", "matchCriteriaId": "1ACA3B76-7107-4A6B-BAAB-AC0852DA005A"}]}]}], "references": [{"url": "https://github.com/sbs20/scanservjs/commit/d51fd52c1569813990b8f74e64ae6979c665dca1", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/d13113ad-a107-416b-acc1-01e4c16ec461", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sbs20/scanservjs/commit/d51fd52c1569813990b8f74e64ae6979c665dca1"}}