{"buggy_code": ["# Copyright 2018 Florian Bruhin (The Compiler) <mail@qutebrowser.org>\n#\n# This file is part of qutebrowser.\n#\n# qutebrowser is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# qutebrowser is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with qutebrowser.  If not, see <https://www.gnu.org/licenses/>.\n\n# NSIS installer header. Uses NsisMultiUser plugin and contains portions of\n# its demo code, copyright 2017 Richard Drizin, Alex Mitev.\n\n; Variables\nvar KeepReg\n\n; Languages (first is default language) - must be inserted after all pages\n!insertmacro MUI_LANGUAGE \"English\"\n!insertmacro MULTIUSER_LANGUAGE_INIT\n\n; Reserve files\n!insertmacro MUI_RESERVEFILE_LANGDLL\n\n; Macros\n!macro UpdateRegStr ROOT_KEY SUBKEY KEY_NAME KEY_VALUE\n  ClearErrors\n  ReadRegStr $R0 ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\"\n  ${if} ${errors}\n  ${orif} $R0 != \"${KEY_VALUE}\"\n    WriteRegStr ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\" \"${KEY_VALUE}\"\n  ${endif}\n!macroend\n\n!macro UpdateRegDWORD ROOT_KEY SUBKEY KEY_NAME KEY_VALUE\n  ClearErrors\n  ReadRegDWORD $R0 ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\"\n  ${if} ${errors}\n  ${orif} $R0 != ${KEY_VALUE}\n    WriteRegDWORD ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\" ${KEY_VALUE}\n  ${endif}\n!macroend\n\n; Push the 32-bit MSI Product Codes on the stack.\n!macro MSI32_STACK\n  Push \"${MSI32_010}\"\n  Push \"${MSI32_011}\"\n  Push \"${MSI32_012}\"\n  Push \"${MSI32_013}\"\n  Push \"${MSI32_014}\"\n  Push \"${MSI32_020}\"\n  Push \"${MSI32_021}\"\n  Push \"${MSI32_030}\"\n  Push \"${MSI32_040}\"\n  Push \"${MSI32_041}\"\n  Push \"${MSI32_050}\"\n  Push \"${MSI32_051}\"\n  Push \"${MSI32_060}\"\n  Push \"${MSI32_061}\"\n  Push \"${MSI32_062}\"\n  Push \"${MSI32_070}\"\n  Push \"${MSI32_080}\"\n  Push \"${MSI32_081}\"\n  Push \"${MSI32_082}\"\n  Push \"${MSI32_084}\"\n  Push \"${MSI32_090}\"\n  Push \"${MSI32_091}\"\n  Push \"${MSI32_100}\"\n  Push \"${MSI32_101}\"\n!macroend\n\n; Push the 64-bit MSI Product Codes on the stack.\n!macro MSI64_STACK\n  Push \"${MSI64_010}\"\n  Push \"${MSI64_011}\"\n  Push \"${MSI64_012}\"\n  Push \"${MSI64_013}\"\n  Push \"${MSI64_014}\"\n  Push \"${MSI64_020}\"\n  Push \"${MSI64_021}\"\n  Push \"${MSI64_030}\"\n  Push \"${MSI64_040}\"\n  Push \"${MSI64_041}\"\n  Push \"${MSI64_050}\"\n  Push \"${MSI64_051}\"\n  Push \"${MSI64_060}\"\n  Push \"${MSI64_061}\"\n  Push \"${MSI64_062}\"\n  Push \"${MSI64_070}\"\n  Push \"${MSI64_080}\"\n  Push \"${MSI64_081}\"\n  Push \"${MSI64_082}\"\n  Push \"${MSI64_084}\"\n  Push \"${MSI64_090}\"\n  Push \"${MSI64_091}\"\n  Push \"${MSI64_100}\"\n  Push \"${MSI64_101}\"\n!macroend\n\n; Check the existence of MSI installations.\n; Must be inserted after MSI32_STACK and MSI64_STACK.\n; Returns the detected code in $R1 or an empty string if none is found.\n!macro CheckMSI\n  ${foreach} $9 ${MSI_COUNT} 1 - 1\n    Pop $R1\n    ReadRegStr $0 HKLM \"${REG_UN}\\$R1\" \"DisplayName\"\n    ${if} $0 == \"${PRODUCT_NAME}\"\n      ${exitfor}\n    ${else}\n      StrCpy $R1 \"\"\n    ${endif}\n  ${next}\n!macroend\n\n; Check the existence of the previous NSIS installations.\n; Returns the uninstaller path in $R0 or an empty string if not found.\n!macro CheckOldNSIS\n  ReadRegStr $R0 HKLM \"${REG_UN}\\${PRODUCT_NAME}\" \"QuietUninstallString\"\n  ${if} $R0 != \"\"\n    ReadRegStr $R0 HKLM \"${REG_UN}\\${PRODUCT_NAME}\" \"UninstallString\"\n    ${if} $R0 != \"\"\n      ; Remove the quotes from path in $R0\n      System::Call 'Shlwapi::PathUnquoteSpaces(t r10r10)'\n      IfFileExists $R0 +2 0\n      ; Return 0 if the uninstaller is missing.\n      StrCpy $R0 \"\"\n    ${endif}\n  ${endif}\n!macroend\n\n!macro RemoveOld PRG ARGS\n  ClearErrors\n  ; Using ExecShellWait so the EXE will get the elevation prompt.\n  ExecShellWait \"open\" \"${PRG}\" \"${ARGS}\"\n  ${if} ${errors}\n    MessageBox MB_ICONSTOP \\\n      \"The uninstaller has failed to complete.$\\r$\\n\\\n      Please restart Windows and try again.\" \\\n      /SD IDOK\n    Abort\n  ${endif}\n!macroend\n\n; Functions\nFunction CheckInstallation\n  ; if there's an installed version, uninstall it first (I chose not to start the uninstaller silently, so that user sees what failed)\n  ; if both per-user and per-machine versions are installed, unistall the one that matches $MultiUser.InstallMode\n  StrCpy $0 \"\"\n  ${if} $HasCurrentModeInstallation = 1\n    StrCpy $0 \"$MultiUser.InstallMode\"\n  ${else}\n    !if ${MULTIUSER_INSTALLMODE_ALLOW_BOTH_INSTALLATIONS} = 0\n      ${if} $HasPerMachineInstallation = 1\n        StrCpy $0 \"AllUsers\" ; if there's no per-user installation, but there's per-machine installation, uninstall it\n      ${elseif} $HasPerUserInstallation = 1\n        StrCpy $0 \"CurrentUser\" ; if there's no per-machine installation, but there's per-user installation, uninstall it\n      ${endif}\n    !endif\n  ${endif}\n\n  ${if} \"$0\" != \"\"\n    ${if} $0 == \"AllUsers\"\n      StrCpy $1 \"$PerMachineUninstallString\"\n      StrCpy $3 \"$PerMachineInstallationFolder\"\n    ${else}\n      StrCpy $1 \"$PerUserUninstallString\"\n      StrCpy $3 \"$PerUserInstallationFolder\"\n    ${endif}\n    ${if} ${silent}\n      StrCpy $2 \"/S\"\n    ${else}\n      StrCpy $2 \"\"\n    ${endif}\n    ${if} $KeepReg = 1\n      StrCpy $4 \"/upgrade\"\n    ${endif}\n  ${endif}\nFunctionEnd\n\nFunction RunUninstaller\n  StrCpy $0 0\n  ; $1 is quoted in registry; the _? param stops the uninstaller from copying\n  ; itself to the temporary directory, which is the only way for ExecWait to work\n  ExecWait '$1 /SS $2 _?=$3' $0 ; $1 is quoted in registry; the _? param stops the uninstaller from copying itself to the temporary directory, which is the only way for ExecWait to work\nFunctionEnd\n\nFunction GetDefaultBrowser\n  ReadRegStr $0 HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice\" \"ProgId\"\n  ReadRegStr $1 HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice\" \"ProgId\"\n  ReadRegStr $2 HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.htm\\UserChoice\" \"ProgId\"\n  ReadRegStr $3 HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.html\\UserChoice\" \"ProgId\"\nFunctionEnd\n\nFunction SetDefaultBrowser\n  StrCmp $0 \"${PRODUCT_NAME}URL\" +2 0\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}URL\"\n  StrCmp $1 \"${PRODUCT_NAME}URL\" +2 0\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}URL\"\n  StrCmp $2 \"${PRODUCT_NAME}HTML\" +3 0\n  DeleteRegKey HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.htm\\UserChoice\"\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.htm\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}HTML\"\n  StrCmp $3 \"${PRODUCT_NAME}HTML\" +3 0\n  DeleteRegKey HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.html\\UserChoice\"\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.html\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}HTML\"\nFunctionEnd\n\n; Sections\nInstType \"Full\"\nInstType \"Typical\"\nInstType \"Minimal\"\n\nSection \"Core Files (required)\" SectionCoreFiles\n  SectionIn 1 2 3 RO\n\n  !insertmacro UAC_AsUser_Call Function CheckInstallation ${UAC_SYNCREGISTERS}\n  ${if} \"$0\" != \"\"\n    ; Make sure the uninstaller is there before attempting to run it\n    ${if} ${FileExists} \"$3\\${UNINSTALL_FILENAME}\"\n      HideWindow\n      ClearErrors\n      ${if} $0 == \"AllUsers\"\n        Call RunUninstaller\n      ${else}\n        !insertmacro UAC_AsUser_Call Function RunUninstaller ${UAC_SYNCREGISTERS}\n      ${endif}\n      ${if} ${errors} ; stay in installer\n        SetErrorLevel 2 ; Installation aborted by script\n        BringToFront\n        Abort \"Error executing uninstaller.\"\n      ${else}\n        ${Switch} $0\n          ${Case} 0 ; uninstaller completed successfully - continue with installation\n            BringToFront\n            Sleep 1000 ; wait for cmd.exe (called by the uninstaller) to finish\n            ${Break}\n          ${Case} 1 ; Installation aborted by user (cancel button)\n          ${Case} 2 ; Installation aborted by script\n            SetErrorLevel $0\n            Quit ; uninstaller was started, but completed with errors - Quit installer\n          ${Default} ; all other error codes - uninstaller could not start, elevate, etc. - Abort installer\n            SetErrorLevel $0\n            BringToFront\n            Abort \"Error executing uninstaller.\"\n        ${EndSwitch}\n      ${endif}\n\n      ${if} $IsAdmin = 1\n        !insertmacro DeleteRetryAbort \"$3\\${UNINSTALL_FILENAME}\"\n        RMDir \"$3\"\n      ${endif}\n    ${endif}\n  ${endif}\n\n  ; Remove any leftovers from the old NSIS installer\n  IfFileExists \"$INSTDIR\\uninst.exe\" 0 +2\n  Delete \"$INSTDIR\\uninst.exe\"\n  ${if} $MultiUser.InstallMode == \"AllUsers\"\n    SetRegView 32 ; The old NSIS installer writes to 32-bit registry space\n    ReadRegStr $R0 HKLM \"${REG_UN}\\${PRODUCT_NAME}\" \"QuietUninstallString\"\n    ${if} $R0 != \"\"\n      DeleteRegKey HKLM \"${REG_UN}\\${PRODUCT_NAME}\"\n    ${endif}\n    SetRegView lastused\n  ${endif}\n\n  SetOutPath $INSTDIR\n  ; Write uninstaller and registry uninstall info as the first step,\n  ; so that the user has the option to run the uninstaller if something goes wrong\n  WriteUninstaller \"${UNINSTALL_FILENAME}\"\n  ; or this if you're using signing:\n  ; File \"${UNINSTALL_FILENAME}\"\n  !insertmacro MULTIUSER_RegistryAddInstallInfo ; add registry keys\n  ${if} ${silent} ; MUI doesn't write language in silent mode\n    WriteRegStr \"${MUI_LANGDLL_REGISTRY_ROOT}\" \"${MUI_LANGDLL_REGISTRY_KEY}\" \\\n      \"${MUI_LANGDLL_REGISTRY_VALUENAME}\" $LANGUAGE\n  ${endif}\n\n  File /r \"${DIST_DIR}\\*.*\"\nSectionEnd\n\nSectionGroup /e \"System Integration\" SectionGroupIntegration\n\nSection \"Register with Windows\" SectionWindowsRegister\n  SectionIn 1 2\n\n  ; No HKCU support for Windows versions earlier than Win8\n  ${if} $MultiUser.InstallMode == \"AllUsers\"\n  ${orif} ${AtLeastWin8}\n    ;StartMenuInternet\n    StrCpy $0 \"$INSTDIR\\${PROGEXE}\"\n    System::Call 'kernel32::GetLongPathNameW(t r0, t .r1, i ${NSIS_MAX_STRLEN}) i .r2'\n\n    StrCpy $0 \"SOFTWARE\\Clients\\StartMenuInternet\\${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\" \"\" \"${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\DefaultIcon\" \"\" \"$1,0\"\n\n    !insertmacro UpdateRegDWORD SHCTX \"$0\\InstallInfo\" \"IconsVisible\" 1\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\shell\\open\\command\" \"\" \"$\\\"$1$\\\"\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\" \"ApplicationDescription\" \"${COMMENTS}\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\" \"ApplicationIcon\" \"$1,0\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\" \"ApplicationName\" \"${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".htm\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".html\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".pdf\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".shtml\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".svg\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".xht\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".xhtml\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".webp\" \"${PRODUCT_NAME}HTML\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\StartMenu\" \"StartMenuInternet\" \"${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\URLAssociations\" \"ftp\" \"${PRODUCT_NAME}URL\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\URLAssociations\" \"http\" \"${PRODUCT_NAME}URL\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\URLAssociations\" \"https\" \"${PRODUCT_NAME}URL\"\n\n    ; Register Application\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\RegisteredApplications\" \"${PRODUCT_NAME}\" \"$0\\Capabilities\"\n\n    ; Associate file types\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.htm\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.html\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.pdf\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.shtml\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.svg\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.xht\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.xhtml\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.webp\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n\n    ; HTML and URL handlers\n    StrCpy $2 \"${PRODUCT_NAME}HTML\"\n    StrCpy $3 \"${PRODUCT_NAME} HTML Document\"\n    WriteRegHandler:\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\" \"\" \"$3\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\" \"FriendlyTypeName\" \"$3\"\n    !insertmacro UpdateRegDWORD SHCTX \"SOFTWARE\\Classes\\$2\" \"EditFlags\" 0x00000002\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\DefaultIcon\" \"\" \"$1,0\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\shell\" \"\" \"open\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\shell\\open\\command\" \"\" \"$\\\"$1$\\\" $\\\"%1$\\\"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\shell\\open\\ddeexec\" \"\" \"\"\n    StrCmp $2 \"${PRODUCT_NAME}HTML\" 0 +4\n    StrCpy $2 \"${PRODUCT_NAME}URL\"\n    StrCpy $3 \"${PRODUCT_NAME} URL\"\n    Goto WriteRegHandler\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\" \"URL Protocol\" \"\"\n  ${endif}\nSectionEnd\n\nSection /o \"Open Default Browser Settings\" SectionDefaultBrowser\n  SectionIn 1\n\n  !insertmacro UAC_AsUser_Call Function GetDefaultBrowser ${UAC_SYNCREGISTERS}\n  ${ifnot} $0 == \"${PRODUCT_NAME}URL\"\n  ${orifnot} $1 == \"${PRODUCT_NAME}URL\"\n  ${orifnot} $2 == \"${PRODUCT_NAME}HTML\"\n  ${orifnot} $3 == \"${PRODUCT_NAME}HTML\"\n    ${if} ${AtLeastWin10}\n      ExecShell \"open\" \"ms-settings:defaultapps\"\n    ${elseif} ${AtLeastWin8}\n      ExecShell \"open\" \"control.exe\" \"/name Microsoft.DefaultPrograms /page \\\n        pageDefaultProgram\\pageAdvancedSettings?pszAppName=${PRODUCT_NAME}\"\n    ${else}\n      !insertmacro UAC_AsUser_Call Function SetDefaultBrowser ${UAC_SYNCREGISTERS}\n    ${endif}\n  ${endif}\nSectionEnd\n\nSectionGroupEnd\n\nSectionGroup /e \"Shortcuts\" SectionGroupShortcuts\n\nSection \"Desktop Icon\" SectionDesktopIcon\n  SectionIn 1 2\n\n  !insertmacro MULTIUSER_GetCurrentUserString $0\n  CreateShortCut \"$DESKTOP\\${PRODUCT_NAME}$0.lnk\" \"$INSTDIR\\${PROGEXE}\"\nSectionEnd\n\nSection \"Start Menu Icon\" SectionStartMenuIcon\n  SectionIn 1 2\n\n  !insertmacro MULTIUSER_GetCurrentUserString $0\n  CreateShortCut \"$STARTMENU\\${PRODUCT_NAME}$0.lnk\" \"$INSTDIR\\${PROGEXE}\"\nSectionEnd\n\nSectionGroupEnd\n\nSection \"-Write Install Info\" ; hidden section, write install info as the final step\n  !insertmacro MULTIUSER_RegistryAddInstallSizeInfo\n  !insertmacro MULTIUSER_GetCurrentUserString $0\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"HelpLink\" \"${HELP_LINK}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"URLInfoAbout\" \"${URL_ABOUT}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"URLUpdateInfo\" \"${URL_UPDATE}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"Comments\" \"${COMMENTS}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"Contact\" \"${CONTACT}\"\n\n  ; Add InstallDate String\n  System::Call /NOUNLOAD '*(&i2,&i2,&i2,&i2,&i2,&i2,&i2,&i2) i .r9'\n  System::Call /NOUNLOAD 'kernel32::GetLocalTime(i)i(r9)'\n  System::Call /NOUNLOAD '*$9(&i2,&i2,&i2,&i2,&i2,&i2,&i2,&i2)i(.r1,.r2,.r3,.r4,.r5,.r6,.r7,)'\n  System::Free $9\n  IntCmp $2 9 0 0 +2\n  StrCpy $2 '0$2'\n  IntCmp $4 9 0 0 +2\n  StrCpy $4 '0$4'\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"InstallDate\" \"$1$2$4\"\n\n  ${RefreshShellIcons}\nSectionEnd\n\n; Modern install component descriptions\n!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionCoreFiles} \\\n    \"Core files required to run ${PRODUCT_NAME}.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionGroupIntegration} \\\n    \"Integrate ${PRODUCT_NAME} with the Operating System.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionWindowsRegister} \\\n    \"Register protocols and file extensions with ${PRODUCT_NAME}.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionDefaultBrowser} \\\n    \"Set ${PRODUCT_NAME} as the default Web browser.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionGroupShortcuts} \\\n    \"Create shortcut icons to run ${PRODUCT_NAME}.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionDesktopIcon} \\\n    \"Create ${PRODUCT_NAME} icon on the Desktop.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionStartMenuIcon} \\\n    \"Create ${PRODUCT_NAME} icon in the Start Menu.\"\n!insertmacro MUI_FUNCTION_DESCRIPTION_END\n\n; Callbacks\nFunction .onInit\n  StrCpy $KeepReg 1\n  !insertmacro CheckPlatform ${PLATFORM}\n  !insertmacro CheckMinWinVer ${MIN_WIN_VER}\n  ${ifnot} ${UAC_IsInnerInstance}\n    !insertmacro CheckSingleInstance \"Setup\" \"Global\" \"${SETUP_MUTEX}\"\n    !insertmacro CheckSingleInstance \"Application\" \"Local\" \"${APP_MUTEX}\"\n  ${endif}\n\n  ; Detect existing setup from previous installers\n  !insertmacro CheckOldNSIS\n  !insertmacro MSI32_STACK\n  !insertmacro CheckMSI\n  ${if} $R1 == \"\"\n  ${andif} ${RunningX64}\n    SetRegView 64 ; Will be set again by MULTIUSER_INIT\n    !insertmacro MSI64_STACK\n    !insertmacro CheckMSI\n  ${endif}\n  ${if} $R0 != \"\"\n  ${orif} $R1 != \"\"\n    MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \\\n      \"An older version of ${PRODUCT_NAME} is already installed.$\\r$\\n$\\r$\\n\\\n      Click `OK` to remove the previous version and continue,$\\r$\\n\\\n      or `Cancel` to cancel this upgrade.\" \\\n      IDOK +2\n    Abort\n    ${if} $R0 != \"\"\n      ${GetParent} $R0 $0\n      !insertmacro RemoveOld $R0 \"/S _?=$0\"\n    ${endif}\n    ${if} $R1 != \"\"\n      !insertmacro RemoveOld \"$SYSDIR\\msiexec.exe\" \"/X$R1 /passive /promptrestart\"\n    ${endif}\n  ${endif}\n\n  !insertmacro MULTIUSER_INIT\n\n  ${if} $IsInnerInstance = 0\n    !insertmacro MUI_LANGDLL_DISPLAY\n  ${endif}\nFunctionEnd\n\nFunction .onSelChange\n  ${if} ${SectionIsSelected} ${SectionWindowsRegister}\n    StrCpy $KeepReg 1\n  ${else}\n    StrCpy $KeepReg 0\n  ${endif}\n\n  ${if} ${SectionIsSelected} ${SectionDefaultBrowser}\n    !insertmacro SetSectionFlag ${SectionWindowsRegister} ${SF_RO}\n    !insertmacro SelectSection ${SectionWindowsRegister}\n  ${else}\n    !insertmacro ClearSectionFlag ${SectionWindowsRegister} ${SF_RO}\n  ${endif}\nFunctionEnd\n\nFunction PageWelcomeLicensePre\n  ${if} $InstallShowPagesBeforeComponents = 0\n    Abort ; don't display the Welcome and License pages for the inner instance\n  ${endif}\nFunctionEnd\n\nFunction PageInstallModeChangeMode\n  ; Disable integration for single user install on Win7 and older, as it's not supported\n  ${if} ${AtMostWin7}\n    SectionSetText ${SectionDefaultBrowser} \"Set as Default Browser\"\n    ${if} $MultiUser.InstallMode == \"CurrentUser\"\n      SectionSetText ${SectionGroupIntegration} \"System Integration (not supported)\"\n      IntOP $0 ${SF_RO} & ${SECTION_OFF}\n      SectionSetFlags ${SectionWindowsRegister} $0\n      SectionSetFlags ${SectionDefaultBrowser} $0\n      !insertmacro SetSectionFlag ${SectionGroupIntegration} ${SF_RO}\n      !insertmacro ClearSectionFlag ${SectionGroupIntegration} ${SF_EXPAND}\n    ${else}\n      ; This is necessary because if the installer started under Win7/Vista as Administrator with UAC disabled,\n      ; going back to All users after first selecting Single user, the integration component would still be disabled\n      SectionSetText ${SectionGroupIntegration} \"System Integration\"\n      !insertmacro ClearSectionFlag ${SectionWindowsRegister} ${SF_RO}\n      !insertmacro ClearSectionFlag ${SectionDefaultBrowser} ${SF_RO}\n      !insertmacro ClearSectionFlag ${SectionGroupIntegration} ${SF_RO}\n      !insertmacro SetSectionFlag ${SectionGroupIntegration} ${SF_EXPAND}\n      !insertmacro SelectSection ${SectionWindowsRegister}\n\n      ; Select 'Default browser' if already set in registry\n      !insertmacro UAC_AsUser_Call Function GetDefaultBrowser ${UAC_SYNCREGISTERS}\n      ${if} $0 == \"${PRODUCT_NAME}URL\"\n      ${orif} $1 == \"${PRODUCT_NAME}URL\"\n      ${orif} $2 == \"${PRODUCT_NAME}HTML\"\n      ${orif} $3 == \"${PRODUCT_NAME}HTML\"\n        !insertmacro SetSectionFlag ${SectionWindowsRegister} ${SF_RO}\n        !insertmacro SelectSection ${SectionDefaultBrowser}\n      ${else}\n        !insertmacro UnselectSection ${SectionDefaultBrowser}\n      ${endif}\n    ${endif}\n  ${endif}\nFunctionEnd\n\nFunction PageComponentsPre\n  GetDlgItem $0 $HWNDPARENT 1\n  SendMessage $0 ${BCM_SETSHIELD} 0 0 ; hide SHIELD (Windows Vista and above)\nFunctionEnd\n\nFunction PageDirectoryPre\n  GetDlgItem $1 $HWNDPARENT 1\n  SendMessage $1 ${WM_SETTEXT} 0 \"STR:$(^InstallBtn)\" ; this is the last page before installing\n  Call MultiUser.CheckPageElevationRequired\n  ${if} $0 = 2\n    SendMessage $1 ${BCM_SETSHIELD} 0 1 ; display SHIELD (Windows Vista and above)\n  ${endif}\nFunctionEnd\n\nFunction PageDirectoryShow\n  ${if} $CmdLineDir != \"\"\n    FindWindow $R1 \"#32770\" \"\" $HWNDPARENT\n\n    GetDlgItem $0 $R1 1019 ; Directory edit\n    SendMessage $0 ${EM_SETREADONLY} 1 0 ; read-only is better than disabled, as user can copy contents\n\n    GetDlgItem $0 $R1 1001 ; Browse button\n    EnableWindow $0 0\n  ${endif}\nFunctionEnd\n\nFunction PageInstFilesPre\n  GetDlgItem $0 $HWNDPARENT 1\n  SendMessage $0 ${BCM_SETSHIELD} 0 0 ; hide SHIELD (Windows Vista and above)\nFunctionEnd\n\nFunction PageFinishRun\n  ; the installer might exit too soon before the application starts and it loses\n  ; the right to be the foreground window and starts in the background\n  ; however, if there's no active window when the application starts, it will\n  ; become the active window, so we hide the installer\n  HideWindow\n  ; the installer will show itself again quickly before closing (w/o Taskbar button), we move it offscreen\n  !define SWP_NOSIZE 0x0001\n  !define SWP_NOZORDER 0x0004\n  System::Call \"User32::SetWindowPos(i, i, i, i, i, i, i) b \\\n    ($HWNDPARENT, 0, -1000, -1000, 0, 0, ${SWP_NOZORDER}|${SWP_NOSIZE})\"\n\n  !insertmacro UAC_AsUser_ExecShell \"open\" \"$INSTDIR\\${PROGEXE}\" \"\" \"$INSTDIR\" \"\"\nFunctionEnd\n\nFunction .onInstFailed\n  MessageBox MB_ICONSTOP \\\n    \"${PRODUCT_NAME} ${VERSION} could not be fully installed.$\\r$\\n\\\n    Please, restart Windows and run the setup program again.\" \\\n    /SD IDOK\nFunctionEnd\n", "[Desktop Entry]\nName=qutebrowser\nStartupWMClass=qutebrowser\nGenericName=Web Browser\nGenericName[ar]=\ufee2\ufe98\ufebc\ufed4\ufea3 \ufe8e\ufee0\ufeb8\ufe92\ufedb\ufe93\nGenericName[bg]=\u0423\u0435\u0431 \u0431\u0440\u0430\u0443\u0437\u044a\u0440\nGenericName[ca]=Navegador web\nGenericName[cs]=WWW prohl\u00ed\u017ee\u010d\nGenericName[da]=Browser\nGenericName[de]=Web-Browser\nGenericName[el]=\u03a0\u03b5\u03c1\u03b9\u03b7\u03b3\u03b7\u03c4\u03ae\u03c2 \u03b9\u03c3\u03c4\u03bf\u03cd\nGenericName[en_GB]=Web Browser\nGenericName[es]=Navegador web\nGenericName[et]=Veebibrauser\nGenericName[fi]=WWW-selain\nGenericName[fr]=Navigateur Web\nGenericName[gu]=\u0ab5\u0ac7\u0aac \u0aac\u0acd\u0ab0\u0abe\u0a89\u0a9d\u0ab0\nGenericName[he]=\u05d3\u05e4\u05d3\u05e4\u05df \u05d0\u05d9\u05e0\u05d8\u05e8\u05e0\u05d8\nGenericName[hi]=\u0935\u0947\u092c \u092c\u094d\u0930\u093e\u0909\u091c\u093c\u0930\nGenericName[hu]=Webb\u00f6ng\u00e9sz\u0151\nGenericName[it]=Browser Web\nGenericName[ja]=\u30a6\u30a7\u30d6\u30d6\u30e9\u30a6\u30b6\nGenericName[kn]=\u0c9c\u0cbe\u0cb2 \u0cb5\u0cc0\u0c95\u0ccd\u0cb7\u0c95\nGenericName[ko]=\uc6f9 \ube0c\ub77c\uc6b0\uc800\nGenericName[lt]=\u017diniatinklio nar\u0161ykl\u0117\nGenericName[lv]=T\u012bmek\u013ca p\u0101rl\u016bks\nGenericName[ml]=\u0d35\u0d46\u0d2c\u0d4d \u0d2c\u0d4d\u0d30\u0d4c\u0d38\u0d30\u0d4d<200d>\nGenericName[mr]=\u0935\u0947\u092c \u092c\u094d\u0930\u093e\u090a\u091c\u0930\nGenericName[nb]=Nettleser\nGenericName[nl]=Webbrowser\nGenericName[pl]=Przegl\u0105darka WWW\nGenericName[pt]=Navegador Web\nGenericName[pt_BR]=Navegador da Internet\nGenericName[ro]=Navigator de Internet\nGenericName[ru]=\u0412\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440\nGenericName[sl]=Spletni brskalnik\nGenericName[sv]=Webbl\u00e4sare\nGenericName[ta]=\u0b87\u0ba3\u0bc8\u0baf \u0b89\u0bb2\u0bbe\u0bb5\u0bbf\nGenericName[th]=\u0e40\u0e27\u0e47\u0e1a\u0e40\u0e1a\u0e23\u0e32\u0e27\u0e4c\u0e40\u0e0b\u0e2d\u0e23\u0e4c\nGenericName[tr]=Web Taray\u0131c\u0131\nGenericName[uk]=\u041d\u0430\u0432\u0456\u0433\u0430\u0442\u043e\u0440 \u0422\u0435\u043d\u0435\u0442\u700f\u89bd\u5668\nComment=A keyboard-driven, vim-like browser based on PyQt5\nComment[de]=Ein Tastatur-gesteuerter, vim-\u00e4hnlicher Browser basierend auf PyQt5\nComment[it]= Un browser web vim-like utilizzabile da tastiera basato su PyQt5\nIcon=qutebrowser\nType=Application\nCategories=Network;WebBrowser;\nExec=qutebrowser %u\nTerminal=false\nStartupNotify=true\nMimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/qute;\nKeywords=Browser\nActions=new-window;preferences;\n\n[Desktop Action new-window]\nName=New Window\nName[am]=\u12a0\u12f2\u1235 \u1218\u1235\u12ae\u1275\nName[ar]=\ufee5\ufe8e\ufed3\ufeab\ufe93 \ufe9d\ufeaa\ufef3\ufea9\ufe93\nName[bg]=\u041d\u043e\u0432 \u043f\u0440\u043e\u0437\u043e\u0440\u0435\u0446\nName[bn]=\u09a8\u09a4\u09c1\u09a8 \u0989\u0987\u09a8\u09cd\u09a1\u09cb\nName[ca]=Finestra nova\nName[cs]=Nov\u00e9 okno\nName[da]=Nyt vindue\nName[de]=Neues Fenster\nName[el]=\u039d\u03ad\u03bf \u03a0\u03b1\u03c1\u03ac\u03b8\u03c5\u03c1\u03bf\nName[en_GB]=New Window\nName[es]=Nueva ventana\nName[et]=Uus aken\nName[fa]=\u067e\ufee6\ufe9f\ufeae\ufeeb \ufe9d\ufea9\u06cc\ufea9\nName[fi]=Uusi ikkuna\nName[fil]=New Window\nName[fr]=Nouvelle fen\u00eatre\nName[gu]=\u0aa8\u0ab5\u0ac0 \u0ab5\u0abf\u0a82\u0aa1\u0acb\nName[hi]=\u0928\u0908 \u0935\u093f\u0902\u0921\u094b\nName[hr]=Novi prozor\nName[hu]=\u00daj ablak\nName[id]=Jendela Baru\nName[it]=Nuova finestra\nName[iw]=\u05d7\u05dc\u05d5\u05df \u05d7\u05d3\u05e9\nName[ja]=\u65b0\u898f\u30a6\u30a4\u30f3\u30c9\u30a6\nName[kn]=\u0cb9\u0cca\u0cb8 \u0cb5\u0cbf\u0c82\u0ca1\u0cca\nName[ko]=\uc0c8 \ucc3d\nName[lt]=Naujas langas\nName[lv]=Jauns logs\nName[ml]=\u0d2a\u0d41\u0d24\u0d3f\u0d2f \u0d35\u0d3f\u0d28\u0d4d<200d>\u0d21\u0d4b\nName[mr]=\u0928\u0935\u0940\u0928 \u0935\u093f\u0902\u0921\u094b\nName[nl]=Nieuw venster\nName[no]=Nytt vindu\nName[pl]=Nowe okno\nName[pt]=Nova janela\nName[pt_BR]=Nova janela\nName[ro]=Fereastr\u0103 nou\u0103\nName[ru]=\u041d\u043e\u0432\u043e\u0435 \u043e\u043a\u043d\u043e\nName[sk]=Nov\u00e9 okno\nName[sl]=Novo okno\nName[sr]=\u041d\u043e\u0432\u0438 \u043f\u0440\u043e\u0437\u043e\u0440\nName[sv]=Nytt f\u00f6nster\nName[sw]=Dirisha Jipya\nName[ta]=\u0baa\u0bc1\u0ba4\u0bbf\u0baf \u0b9a\u0bbe\u0bb3\u0bb0\u0bae\u0bcd\nName[te]=\u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24 \u0c35\u0c3f\u0c02\u0c21\u0c4b\nName[th]=\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07\u0e43\u0e2b\u0e21\u0e48\nName[tr]=Yeni Pencere\nName[uk]=\u041d\u043e\u0432\u0435 \u0432\u0456\u043a\u043d\u043e\nName[vi]=C\u1eeda s\u1ed5 M\u1edbi\nExec=qutebrowser\n\n[Desktop Action preferences]\nName=Preferences\nName[an]=Preferencias\nName[ar]=\ufe8e\ufee0\ufe98\ufed4\ufec0\ufef3\ufefc\ufe97\nName[as]=\u09aa\u099b\u09a8\u09cd\u09a6\u09b8\u09ae\u09c2\u09b9\nName[be]=\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0456\nName[bg]=\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\nName[bn_IN]=\u09aa\u099b\u09a8\u09cd\u09a6\nName[bs]=Postavke\nName[ca]=Prefer\u00e8ncies\nName[ca@valencia]=Prefer\u00e8ncies\nName[cs]=P\u0159edvolby\nName[da]=Indstillinger\nName[de]=Einstellungen\nName[el]=\u03a0\u03c1\u03bf\u03c4\u03b9\u03bc\u03ae\u03c3\u03b5\u03b9\u03c2\nName[en_GB]=Preferences\nName[eo]=Agordoj\nName[es]=Preferencias\nName[et]=Eelistused\nName[eu]=Hobespenak\nName[fa]=\ufe95\ufeae\ufe9f\u06cc\ufea1\ufe8e\ufe97\nName[fi]=Asetukset\nName[fr]=Pr\u00e9f\u00e9rences\nName[fur]=Preferencis\nName[ga]=Sainroghanna\nName[gd]=Roghainnean\nName[gl]=Preferencias\nName[gu]=\u0aaa\u0ab8\u0a82\u0aa6\u0a97\u0ac0\u0a93\nName[he]=\u05d4\u05e2\u05d3\u05e4\u05d5\u05ea\nName[hi]=\u0935\u0930\u0940\u092f\u0924\u093e\u090f\u0901\nName[hr]=Osobitosti\nName[hu]=Be\u00e1ll\u00edt\u00e1sok\nName[id]=Preferensi\nName[is]=Kj\u00f6rstillingar\nName[it]=Preferenze\nName[ja]=\u8a2d\u5b9a\nName[kk]=\u0411\u0430\u043f\u0442\u0430\u0443\u043b\u0430\u0440\nName[km]=\u1785\u17c6\u178e\u17bc\u179b\u1785\u17b7\u178f\u17d2\u178f\nName[kn]=\u0c86\u0ca6\u0ccd\u0caf\u0ca4\u0cc6\u0c97\u0cb3\u0cc1\nName[ko]=\uae30\ubcf8 \uc124\uc815\nName[lt]=Nuostatos\nName[lv]=Iestat\u012bjumi\nName[ml]=\u0d2e\u0d41\u0d28\u0d4d<200d>\u0d17\u0d23\u0d28\u0d15\u0d33\u0d4d<200d>\nName[mr]=\u092a\u0938\u0902\u0924\u0940\nName[nb]=Brukervalg\nName[ne]=\u092a\u094d\u0930\u093e\u0925\u092e\u093f\u0915\u0924\u093e\u0939\u0930\u0942\nName[nl]=Voorkeuren\nName[oc]=Prefer\u00e9ncias\nName[or]=\u0b2a\u0b38\u0b28\u0b4d\u0b26\nName[pa]=\u0a2e\u0a47\u0a30\u0a40 \u0a2a\u0a38\u0a70\u0a26\nName[pl]=Preferencje\nName[pt]=Prefer\u00eancias\nName[pt_BR]=Prefer\u00eancias\nName[ro]=Preferin\u021be\nName[ru]=\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nName[sk]=Nastavenia\nName[sl]=Mo\u017enosti\nName[sr]=\u041f\u043e\u0441\u0442\u0430\u0432\u043a\u0435\nName[sr@latin]=Postavke\nName[sv]=Inst\u00e4llningar\nName[ta]=\u0bb5\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0b99\u0bcd\u0b95\u0bb3\u0bcd\nName[te]=\u0c05\u0c2d\u0c40\u0c37\u0c4d\u0c1f\u0c3e\u0c32\u0c41\nName[tg]=\u0425\u0443\u0441\u0443\u0441\u0438\u044f\u0442\u04b3\u043e\nName[th]=\u0e1b\u0e23\u0e31\u0e1a\u0e41\u0e15\u0e48\u0e07\nName[tr]=Tercihler\nName[ug]=\ufee1\ufe8e\ufef3\ufef0\ufee0\ufedf\ufef0\ufed7\nName[uk]=\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\nName[vi]=T\u00f9y th\u00edch\nName[zh_CN]=\u9996\u9009\u9879\nName[zh_HK]=\u504f\u597d\u8a2d\u5b9a\nName[zh_TW]=\u504f\u597d\u8a2d\u5b9a\nExec=qutebrowser \"qute://settings\"\n", "# vim: ft=python fileencoding=utf-8 sts=4 sw=4 et:\n\n# Copyright 2014-2021 Florian Bruhin (The Compiler) <mail@qutebrowser.org>\n\n# This file is part of qutebrowser.\n#\n# qutebrowser is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# qutebrowser is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with qutebrowser.  If not, see <https://www.gnu.org/licenses/>.\n\n\"\"\"Early initialization and main entry point.\n\nqutebrowser's initialization process roughly looks like this:\n\n- This file gets imported, either via the setuptools entry point or\n  __main__.py.\n- At import time, we check for the correct Python version and show an error if\n  it's too old.\n- The main() function in this file gets invoked\n- Argument parsing takes place\n- earlyinit.early_init() gets invoked to do various low-level initialization\n  and checks whether all dependencies are met.\n- app.run() gets called, which takes over.\n  See the docstring of app.py for details.\n\"\"\"\n\nimport sys\nimport json\n\nimport qutebrowser\ntry:\n    from qutebrowser.misc.checkpyver import check_python_version\nexcept ImportError:\n    try:\n        # python2\n        from .misc.checkpyver import check_python_version\n    except (SystemError, ValueError):\n        # Import without module - SystemError on Python3, ValueError (?!?) on\n        # Python2\n        sys.stderr.write(\"Please don't run this script directly, do something \"\n                         \"like   python3 -m qutebrowser   instead.\\n\")\n        sys.stderr.flush()\n        sys.exit(100)\ncheck_python_version()\n\nimport argparse  # pylint: disable=wrong-import-order\nfrom qutebrowser.misc import earlyinit\n\n\ndef get_argparser():\n    \"\"\"Get the argparse parser.\"\"\"\n    parser = argparse.ArgumentParser(prog='qutebrowser',\n                                     description=qutebrowser.__description__)\n    parser.add_argument('-B', '--basedir', help=\"Base directory for all \"\n                        \"storage.\")\n    parser.add_argument('-C', '--config-py', help=\"Path to config.py.\",\n                        metavar='CONFIG')\n    parser.add_argument('-V', '--version', help=\"Show version and quit.\",\n                        action='store_true')\n    parser.add_argument('-s', '--set', help=\"Set a temporary setting for \"\n                        \"this session.\", nargs=2, action='append',\n                        dest='temp_settings', default=[],\n                        metavar=('OPTION', 'VALUE'))\n    parser.add_argument('-r', '--restore', help=\"Restore a named session.\",\n                        dest='session')\n    parser.add_argument('-R', '--override-restore', help=\"Don't restore a \"\n                        \"session even if one would be restored.\",\n                        action='store_true')\n    parser.add_argument('--target', choices=['auto', 'tab', 'tab-bg',\n                                             'tab-silent', 'tab-bg-silent',\n                                             'window', 'private-window'],\n                        help=\"How URLs should be opened if there is already a \"\n                             \"qutebrowser instance running.\")\n    parser.add_argument('--backend', choices=['webkit', 'webengine'],\n                        help=\"Which backend to use.\")\n    parser.add_argument('--desktop-file-name',\n                        default=\"org.qutebrowser.qutebrowser\",\n                        help=\"Set the base name of the desktop entry for this \"\n                        \"application. Used to set the app_id under Wayland. See \"\n                        \"https://doc.qt.io/qt-5/qguiapplication.html#desktopFileName-prop\")\n\n    parser.add_argument('--json-args', help=argparse.SUPPRESS)\n    parser.add_argument('--temp-basedir-restarted',\n                        help=argparse.SUPPRESS,\n                        action='store_true')\n\n    # WORKAROUND to be able to restart from older qutebrowser versions into this one.\n    # Should be removed at some point.\n    parser.add_argument('--enable-webengine-inspector',\n                        help=argparse.SUPPRESS,\n                        action='store_true')\n\n    debug = parser.add_argument_group('debug arguments')\n    debug.add_argument('-l', '--loglevel', dest='loglevel',\n                       help=\"Override the configured console loglevel\",\n                       choices=['critical', 'error', 'warning', 'info',\n                                'debug', 'vdebug'])\n    debug.add_argument('--logfilter', type=logfilter_error,\n                       help=\"Comma-separated list of things to be logged \"\n                       \"to the debug log on stdout.\")\n    debug.add_argument('--loglines',\n                       help=\"How many lines of the debug log to keep in RAM \"\n                       \"(-1: unlimited).\",\n                       default=2000, type=int)\n    debug.add_argument('-d', '--debug', help=\"Turn on debugging options.\",\n                       action='store_true')\n    debug.add_argument('--json-logging', action='store_true', help=\"Output log\"\n                       \" lines in JSON format (one object per line).\")\n    debug.add_argument('--nocolor', help=\"Turn off colored logging.\",\n                       action='store_false', dest='color')\n    debug.add_argument('--force-color', help=\"Force colored logging\",\n                       action='store_true')\n    debug.add_argument('--nowindow', action='store_true', help=\"Don't show \"\n                       \"the main window.\")\n    debug.add_argument('-T', '--temp-basedir', action='store_true', help=\"Use \"\n                       \"a temporary basedir.\")\n    debug.add_argument('--no-err-windows', action='store_true', help=\"Don't \"\n                       \"show any error windows (used for tests/smoke.py).\")\n    debug.add_argument('--qt-arg', help=\"Pass an argument with a value to Qt. \"\n                       \"For example, you can do \"\n                       \"`--qt-arg geometry 650x555+200+300` to set the window \"\n                       \"geometry.\", nargs=2, metavar=('NAME', 'VALUE'),\n                       action='append')\n    debug.add_argument('--qt-flag', help=\"Pass an argument to Qt as flag.\",\n                       nargs=1, action='append')\n    debug.add_argument('-D', '--debug-flag', type=debug_flag_error,\n                       default=[], help=\"Pass name of debugging feature to be\"\n                       \" turned on.\", action='append', dest='debug_flags')\n    parser.add_argument('command', nargs='*', help=\"Commands to execute on \"\n                        \"startup.\", metavar=':command')\n    # URLs will actually be in command\n    parser.add_argument('url', nargs='*', help=\"URLs to open on startup \"\n                        \"(empty as a window separator).\")\n    return parser\n\n\ndef directory(arg):\n    if not arg:\n        raise argparse.ArgumentTypeError(\"Invalid empty value\")\n\n\ndef logfilter_error(logfilter):\n    \"\"\"Validate logger names passed to --logfilter.\n\n    Args:\n        logfilter: A comma separated list of logger names.\n    \"\"\"\n    from qutebrowser.utils import log\n    try:\n        log.LogFilter.parse(logfilter)\n    except log.InvalidLogFilterError as e:\n        raise argparse.ArgumentTypeError(e)\n    return logfilter\n\n\ndef debug_flag_error(flag):\n    \"\"\"Validate flags passed to --debug-flag.\n\n    Available flags:\n        debug-exit: Turn on debugging of late exit.\n        pdb-postmortem: Drop into pdb on exceptions.\n        no-sql-history: Don't store history items.\n        no-scroll-filtering: Process all scrolling updates.\n        log-requests: Log all network requests.\n        log-cookies: Log cookies in cookie filter.\n        log-scroll-pos: Log all scrolling changes.\n        log-sensitive-keys: Log keypresses in passthrough modes.\n        stack: Enable Chromium stack logging.\n        chromium: Enable Chromium logging.\n        wait-renderer-process: Wait for debugger in renderer process.\n        avoid-chromium-init: Enable `--version` without initializing Chromium.\n        werror: Turn Python warnings into errors.\n        test-notification-service: Use the testing libnotify service.\n    \"\"\"\n    valid_flags = ['debug-exit', 'pdb-postmortem', 'no-sql-history',\n                   'no-scroll-filtering', 'log-requests', 'log-cookies',\n                   'log-scroll-pos', 'log-sensitive-keys', 'stack', 'chromium',\n                   'wait-renderer-process', 'avoid-chromium-init', 'werror',\n                   'test-notification-service']\n\n    if flag in valid_flags:\n        return flag\n    else:\n        raise argparse.ArgumentTypeError(\"Invalid debug flag - valid flags: {}\"\n                                         .format(', '.join(valid_flags)))\n\n\ndef _unpack_json_args(args):\n    \"\"\"Restore arguments from --json-args after a restart.\n\n    When restarting, we serialize the argparse namespace into json, and\n    construct a \"fake\" argparse.Namespace here based on the data loaded\n    from json.\n    \"\"\"\n    new_args = vars(args)\n    data = json.loads(args.json_args)\n    new_args.update(data)\n    return argparse.Namespace(**new_args)\n\n\ndef main():\n    parser = get_argparser()\n    argv = sys.argv[1:]\n    args = parser.parse_args(argv)\n    if args.json_args is not None:\n        args = _unpack_json_args(args)\n    earlyinit.early_init(args)\n    # We do this imports late as earlyinit needs to be run first (because of\n    # version checking and other early initialization)\n    from qutebrowser import app\n    return app.run(args)\n", "# vim: ft=python fileencoding=utf-8 sts=4 sw=4 et:\n\n# Copyright 2020-2021 Florian Bruhin (The Compiler) <mail@qutebrowser.org>\n#\n# This file is part of qutebrowser.\n#\n# qutebrowser is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# qutebrowser is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with qutebrowser.  If not, see <https://www.gnu.org/licenses/>.\n\n\"\"\"Tests for qutebrowser.qutebrowser.\n\n(Mainly commandline flag parsing)\n\"\"\"\n\nimport pytest\n\nfrom qutebrowser import qutebrowser\n\n\n@pytest.fixture\ndef parser():\n    return qutebrowser.get_argparser()\n\n\nclass TestDebugFlag:\n\n    def test_valid(self, parser):\n        args = parser.parse_args(['--debug-flag', 'chromium',\n                                  '--debug-flag', 'stack'])\n        assert args.debug_flags == ['chromium', 'stack']\n\n    def test_invalid(self, parser, capsys):\n        with pytest.raises(SystemExit):\n            parser.parse_args(['--debug-flag', 'invalid'])\n\n        _out, err = capsys.readouterr()\n        assert 'Invalid debug flag - valid flags:' in err\n\n\nclass TestLogFilter:\n\n    def test_valid(self, parser):\n        args = parser.parse_args(['--logfilter', 'misc'])\n        assert args.logfilter == 'misc'\n\n    def test_invalid(self, parser, capsys):\n        with pytest.raises(SystemExit):\n            parser.parse_args(['--logfilter', 'invalid'])\n\n        _out, err = capsys.readouterr()\n        print(err)\n        assert 'Invalid log category invalid - valid categories' in err\n\n\nclass TestJsonArgs:\n\n    def test_partial(self, parser):\n        \"\"\"Make sure we can provide a subset of all arguments.\n\n        This ensures that it's possible to restart into an older version of qutebrowser\n        when a new argument was added.\n        \"\"\"\n        args = parser.parse_args(['--json-args', '{\"debug\": true}'])\n        args = qutebrowser._unpack_json_args(args)\n        # pylint: disable=no-member\n        assert args.debug\n        assert not args.temp_basedir\n"], "fixing_code": ["# Copyright 2018 Florian Bruhin (The Compiler) <mail@qutebrowser.org>\n#\n# This file is part of qutebrowser.\n#\n# qutebrowser is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# qutebrowser is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with qutebrowser.  If not, see <https://www.gnu.org/licenses/>.\n\n# NSIS installer header. Uses NsisMultiUser plugin and contains portions of\n# its demo code, copyright 2017 Richard Drizin, Alex Mitev.\n\n; Variables\nvar KeepReg\n\n; Languages (first is default language) - must be inserted after all pages\n!insertmacro MUI_LANGUAGE \"English\"\n!insertmacro MULTIUSER_LANGUAGE_INIT\n\n; Reserve files\n!insertmacro MUI_RESERVEFILE_LANGDLL\n\n; Macros\n!macro UpdateRegStr ROOT_KEY SUBKEY KEY_NAME KEY_VALUE\n  ClearErrors\n  ReadRegStr $R0 ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\"\n  ${if} ${errors}\n  ${orif} $R0 != \"${KEY_VALUE}\"\n    WriteRegStr ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\" \"${KEY_VALUE}\"\n  ${endif}\n!macroend\n\n!macro UpdateRegDWORD ROOT_KEY SUBKEY KEY_NAME KEY_VALUE\n  ClearErrors\n  ReadRegDWORD $R0 ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\"\n  ${if} ${errors}\n  ${orif} $R0 != ${KEY_VALUE}\n    WriteRegDWORD ${ROOT_KEY} \"${SUBKEY}\" \"${KEY_NAME}\" ${KEY_VALUE}\n  ${endif}\n!macroend\n\n; Push the 32-bit MSI Product Codes on the stack.\n!macro MSI32_STACK\n  Push \"${MSI32_010}\"\n  Push \"${MSI32_011}\"\n  Push \"${MSI32_012}\"\n  Push \"${MSI32_013}\"\n  Push \"${MSI32_014}\"\n  Push \"${MSI32_020}\"\n  Push \"${MSI32_021}\"\n  Push \"${MSI32_030}\"\n  Push \"${MSI32_040}\"\n  Push \"${MSI32_041}\"\n  Push \"${MSI32_050}\"\n  Push \"${MSI32_051}\"\n  Push \"${MSI32_060}\"\n  Push \"${MSI32_061}\"\n  Push \"${MSI32_062}\"\n  Push \"${MSI32_070}\"\n  Push \"${MSI32_080}\"\n  Push \"${MSI32_081}\"\n  Push \"${MSI32_082}\"\n  Push \"${MSI32_084}\"\n  Push \"${MSI32_090}\"\n  Push \"${MSI32_091}\"\n  Push \"${MSI32_100}\"\n  Push \"${MSI32_101}\"\n!macroend\n\n; Push the 64-bit MSI Product Codes on the stack.\n!macro MSI64_STACK\n  Push \"${MSI64_010}\"\n  Push \"${MSI64_011}\"\n  Push \"${MSI64_012}\"\n  Push \"${MSI64_013}\"\n  Push \"${MSI64_014}\"\n  Push \"${MSI64_020}\"\n  Push \"${MSI64_021}\"\n  Push \"${MSI64_030}\"\n  Push \"${MSI64_040}\"\n  Push \"${MSI64_041}\"\n  Push \"${MSI64_050}\"\n  Push \"${MSI64_051}\"\n  Push \"${MSI64_060}\"\n  Push \"${MSI64_061}\"\n  Push \"${MSI64_062}\"\n  Push \"${MSI64_070}\"\n  Push \"${MSI64_080}\"\n  Push \"${MSI64_081}\"\n  Push \"${MSI64_082}\"\n  Push \"${MSI64_084}\"\n  Push \"${MSI64_090}\"\n  Push \"${MSI64_091}\"\n  Push \"${MSI64_100}\"\n  Push \"${MSI64_101}\"\n!macroend\n\n; Check the existence of MSI installations.\n; Must be inserted after MSI32_STACK and MSI64_STACK.\n; Returns the detected code in $R1 or an empty string if none is found.\n!macro CheckMSI\n  ${foreach} $9 ${MSI_COUNT} 1 - 1\n    Pop $R1\n    ReadRegStr $0 HKLM \"${REG_UN}\\$R1\" \"DisplayName\"\n    ${if} $0 == \"${PRODUCT_NAME}\"\n      ${exitfor}\n    ${else}\n      StrCpy $R1 \"\"\n    ${endif}\n  ${next}\n!macroend\n\n; Check the existence of the previous NSIS installations.\n; Returns the uninstaller path in $R0 or an empty string if not found.\n!macro CheckOldNSIS\n  ReadRegStr $R0 HKLM \"${REG_UN}\\${PRODUCT_NAME}\" \"QuietUninstallString\"\n  ${if} $R0 != \"\"\n    ReadRegStr $R0 HKLM \"${REG_UN}\\${PRODUCT_NAME}\" \"UninstallString\"\n    ${if} $R0 != \"\"\n      ; Remove the quotes from path in $R0\n      System::Call 'Shlwapi::PathUnquoteSpaces(t r10r10)'\n      IfFileExists $R0 +2 0\n      ; Return 0 if the uninstaller is missing.\n      StrCpy $R0 \"\"\n    ${endif}\n  ${endif}\n!macroend\n\n!macro RemoveOld PRG ARGS\n  ClearErrors\n  ; Using ExecShellWait so the EXE will get the elevation prompt.\n  ExecShellWait \"open\" \"${PRG}\" \"${ARGS}\"\n  ${if} ${errors}\n    MessageBox MB_ICONSTOP \\\n      \"The uninstaller has failed to complete.$\\r$\\n\\\n      Please restart Windows and try again.\" \\\n      /SD IDOK\n    Abort\n  ${endif}\n!macroend\n\n; Functions\nFunction CheckInstallation\n  ; if there's an installed version, uninstall it first (I chose not to start the uninstaller silently, so that user sees what failed)\n  ; if both per-user and per-machine versions are installed, unistall the one that matches $MultiUser.InstallMode\n  StrCpy $0 \"\"\n  ${if} $HasCurrentModeInstallation = 1\n    StrCpy $0 \"$MultiUser.InstallMode\"\n  ${else}\n    !if ${MULTIUSER_INSTALLMODE_ALLOW_BOTH_INSTALLATIONS} = 0\n      ${if} $HasPerMachineInstallation = 1\n        StrCpy $0 \"AllUsers\" ; if there's no per-user installation, but there's per-machine installation, uninstall it\n      ${elseif} $HasPerUserInstallation = 1\n        StrCpy $0 \"CurrentUser\" ; if there's no per-machine installation, but there's per-user installation, uninstall it\n      ${endif}\n    !endif\n  ${endif}\n\n  ${if} \"$0\" != \"\"\n    ${if} $0 == \"AllUsers\"\n      StrCpy $1 \"$PerMachineUninstallString\"\n      StrCpy $3 \"$PerMachineInstallationFolder\"\n    ${else}\n      StrCpy $1 \"$PerUserUninstallString\"\n      StrCpy $3 \"$PerUserInstallationFolder\"\n    ${endif}\n    ${if} ${silent}\n      StrCpy $2 \"/S\"\n    ${else}\n      StrCpy $2 \"\"\n    ${endif}\n    ${if} $KeepReg = 1\n      StrCpy $4 \"/upgrade\"\n    ${endif}\n  ${endif}\nFunctionEnd\n\nFunction RunUninstaller\n  StrCpy $0 0\n  ; $1 is quoted in registry; the _? param stops the uninstaller from copying\n  ; itself to the temporary directory, which is the only way for ExecWait to work\n  ExecWait '$1 /SS $2 _?=$3' $0 ; $1 is quoted in registry; the _? param stops the uninstaller from copying itself to the temporary directory, which is the only way for ExecWait to work\nFunctionEnd\n\nFunction GetDefaultBrowser\n  ReadRegStr $0 HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice\" \"ProgId\"\n  ReadRegStr $1 HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice\" \"ProgId\"\n  ReadRegStr $2 HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.htm\\UserChoice\" \"ProgId\"\n  ReadRegStr $3 HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.html\\UserChoice\" \"ProgId\"\nFunctionEnd\n\nFunction SetDefaultBrowser\n  StrCmp $0 \"${PRODUCT_NAME}URL\" +2 0\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}URL\"\n  StrCmp $1 \"${PRODUCT_NAME}URL\" +2 0\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\https\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}URL\"\n  StrCmp $2 \"${PRODUCT_NAME}HTML\" +3 0\n  DeleteRegKey HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.htm\\UserChoice\"\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.htm\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}HTML\"\n  StrCmp $3 \"${PRODUCT_NAME}HTML\" +3 0\n  DeleteRegKey HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.html\\UserChoice\"\n  WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.html\\UserChoice\" \\\n    \"ProgId\" \"${PRODUCT_NAME}HTML\"\nFunctionEnd\n\n; Sections\nInstType \"Full\"\nInstType \"Typical\"\nInstType \"Minimal\"\n\nSection \"Core Files (required)\" SectionCoreFiles\n  SectionIn 1 2 3 RO\n\n  !insertmacro UAC_AsUser_Call Function CheckInstallation ${UAC_SYNCREGISTERS}\n  ${if} \"$0\" != \"\"\n    ; Make sure the uninstaller is there before attempting to run it\n    ${if} ${FileExists} \"$3\\${UNINSTALL_FILENAME}\"\n      HideWindow\n      ClearErrors\n      ${if} $0 == \"AllUsers\"\n        Call RunUninstaller\n      ${else}\n        !insertmacro UAC_AsUser_Call Function RunUninstaller ${UAC_SYNCREGISTERS}\n      ${endif}\n      ${if} ${errors} ; stay in installer\n        SetErrorLevel 2 ; Installation aborted by script\n        BringToFront\n        Abort \"Error executing uninstaller.\"\n      ${else}\n        ${Switch} $0\n          ${Case} 0 ; uninstaller completed successfully - continue with installation\n            BringToFront\n            Sleep 1000 ; wait for cmd.exe (called by the uninstaller) to finish\n            ${Break}\n          ${Case} 1 ; Installation aborted by user (cancel button)\n          ${Case} 2 ; Installation aborted by script\n            SetErrorLevel $0\n            Quit ; uninstaller was started, but completed with errors - Quit installer\n          ${Default} ; all other error codes - uninstaller could not start, elevate, etc. - Abort installer\n            SetErrorLevel $0\n            BringToFront\n            Abort \"Error executing uninstaller.\"\n        ${EndSwitch}\n      ${endif}\n\n      ${if} $IsAdmin = 1\n        !insertmacro DeleteRetryAbort \"$3\\${UNINSTALL_FILENAME}\"\n        RMDir \"$3\"\n      ${endif}\n    ${endif}\n  ${endif}\n\n  ; Remove any leftovers from the old NSIS installer\n  IfFileExists \"$INSTDIR\\uninst.exe\" 0 +2\n  Delete \"$INSTDIR\\uninst.exe\"\n  ${if} $MultiUser.InstallMode == \"AllUsers\"\n    SetRegView 32 ; The old NSIS installer writes to 32-bit registry space\n    ReadRegStr $R0 HKLM \"${REG_UN}\\${PRODUCT_NAME}\" \"QuietUninstallString\"\n    ${if} $R0 != \"\"\n      DeleteRegKey HKLM \"${REG_UN}\\${PRODUCT_NAME}\"\n    ${endif}\n    SetRegView lastused\n  ${endif}\n\n  SetOutPath $INSTDIR\n  ; Write uninstaller and registry uninstall info as the first step,\n  ; so that the user has the option to run the uninstaller if something goes wrong\n  WriteUninstaller \"${UNINSTALL_FILENAME}\"\n  ; or this if you're using signing:\n  ; File \"${UNINSTALL_FILENAME}\"\n  !insertmacro MULTIUSER_RegistryAddInstallInfo ; add registry keys\n  ${if} ${silent} ; MUI doesn't write language in silent mode\n    WriteRegStr \"${MUI_LANGDLL_REGISTRY_ROOT}\" \"${MUI_LANGDLL_REGISTRY_KEY}\" \\\n      \"${MUI_LANGDLL_REGISTRY_VALUENAME}\" $LANGUAGE\n  ${endif}\n\n  File /r \"${DIST_DIR}\\*.*\"\nSectionEnd\n\nSectionGroup /e \"System Integration\" SectionGroupIntegration\n\nSection \"Register with Windows\" SectionWindowsRegister\n  SectionIn 1 2\n\n  ; No HKCU support for Windows versions earlier than Win8\n  ${if} $MultiUser.InstallMode == \"AllUsers\"\n  ${orif} ${AtLeastWin8}\n    ;StartMenuInternet\n    StrCpy $0 \"$INSTDIR\\${PROGEXE}\"\n    System::Call 'kernel32::GetLongPathNameW(t r0, t .r1, i ${NSIS_MAX_STRLEN}) i .r2'\n\n    StrCpy $0 \"SOFTWARE\\Clients\\StartMenuInternet\\${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\" \"\" \"${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\DefaultIcon\" \"\" \"$1,0\"\n\n    !insertmacro UpdateRegDWORD SHCTX \"$0\\InstallInfo\" \"IconsVisible\" 1\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\shell\\open\\command\" \"\" \"$\\\"$1$\\\"\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\" \"ApplicationDescription\" \"${COMMENTS}\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\" \"ApplicationIcon\" \"$1,0\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\" \"ApplicationName\" \"${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".htm\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".html\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".pdf\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".shtml\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".svg\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".xht\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".xhtml\" \"${PRODUCT_NAME}HTML\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\FileAssociations\" \".webp\" \"${PRODUCT_NAME}HTML\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\StartMenu\" \"StartMenuInternet\" \"${PRODUCT_NAME}\"\n\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\URLAssociations\" \"ftp\" \"${PRODUCT_NAME}URL\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\URLAssociations\" \"http\" \"${PRODUCT_NAME}URL\"\n    !insertmacro UpdateRegStr SHCTX \"$0\\Capabilities\\URLAssociations\" \"https\" \"${PRODUCT_NAME}URL\"\n\n    ; Register Application\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\RegisteredApplications\" \"${PRODUCT_NAME}\" \"$0\\Capabilities\"\n\n    ; Associate file types\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.htm\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.html\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.pdf\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.shtml\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.svg\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.xht\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.xhtml\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\.webp\\OpenWithProgids\" \"${PRODUCT_NAME}HTML\" \"\"\n\n    ; HTML and URL handlers\n    StrCpy $2 \"${PRODUCT_NAME}HTML\"\n    StrCpy $3 \"${PRODUCT_NAME} HTML Document\"\n    WriteRegHandler:\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\" \"\" \"$3\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\" \"FriendlyTypeName\" \"$3\"\n    !insertmacro UpdateRegDWORD SHCTX \"SOFTWARE\\Classes\\$2\" \"EditFlags\" 0x00000002\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\DefaultIcon\" \"\" \"$1,0\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\shell\" \"\" \"open\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\shell\\open\\command\" \"\" \"$\\\"$1$\\\" --untrusted-args $\\\"%1$\\\"\"\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\\shell\\open\\ddeexec\" \"\" \"\"\n    StrCmp $2 \"${PRODUCT_NAME}HTML\" 0 +4\n    StrCpy $2 \"${PRODUCT_NAME}URL\"\n    StrCpy $3 \"${PRODUCT_NAME} URL\"\n    Goto WriteRegHandler\n    !insertmacro UpdateRegStr SHCTX \"SOFTWARE\\Classes\\$2\" \"URL Protocol\" \"\"\n  ${endif}\nSectionEnd\n\nSection /o \"Open Default Browser Settings\" SectionDefaultBrowser\n  SectionIn 1\n\n  !insertmacro UAC_AsUser_Call Function GetDefaultBrowser ${UAC_SYNCREGISTERS}\n  ${ifnot} $0 == \"${PRODUCT_NAME}URL\"\n  ${orifnot} $1 == \"${PRODUCT_NAME}URL\"\n  ${orifnot} $2 == \"${PRODUCT_NAME}HTML\"\n  ${orifnot} $3 == \"${PRODUCT_NAME}HTML\"\n    ${if} ${AtLeastWin10}\n      ExecShell \"open\" \"ms-settings:defaultapps\"\n    ${elseif} ${AtLeastWin8}\n      ExecShell \"open\" \"control.exe\" \"/name Microsoft.DefaultPrograms /page \\\n        pageDefaultProgram\\pageAdvancedSettings?pszAppName=${PRODUCT_NAME}\"\n    ${else}\n      !insertmacro UAC_AsUser_Call Function SetDefaultBrowser ${UAC_SYNCREGISTERS}\n    ${endif}\n  ${endif}\nSectionEnd\n\nSectionGroupEnd\n\nSectionGroup /e \"Shortcuts\" SectionGroupShortcuts\n\nSection \"Desktop Icon\" SectionDesktopIcon\n  SectionIn 1 2\n\n  !insertmacro MULTIUSER_GetCurrentUserString $0\n  CreateShortCut \"$DESKTOP\\${PRODUCT_NAME}$0.lnk\" \"$INSTDIR\\${PROGEXE}\"\nSectionEnd\n\nSection \"Start Menu Icon\" SectionStartMenuIcon\n  SectionIn 1 2\n\n  !insertmacro MULTIUSER_GetCurrentUserString $0\n  CreateShortCut \"$STARTMENU\\${PRODUCT_NAME}$0.lnk\" \"$INSTDIR\\${PROGEXE}\"\nSectionEnd\n\nSectionGroupEnd\n\nSection \"-Write Install Info\" ; hidden section, write install info as the final step\n  !insertmacro MULTIUSER_RegistryAddInstallSizeInfo\n  !insertmacro MULTIUSER_GetCurrentUserString $0\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"HelpLink\" \"${HELP_LINK}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"URLInfoAbout\" \"${URL_ABOUT}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"URLUpdateInfo\" \"${URL_UPDATE}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"Comments\" \"${COMMENTS}\"\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"Contact\" \"${CONTACT}\"\n\n  ; Add InstallDate String\n  System::Call /NOUNLOAD '*(&i2,&i2,&i2,&i2,&i2,&i2,&i2,&i2) i .r9'\n  System::Call /NOUNLOAD 'kernel32::GetLocalTime(i)i(r9)'\n  System::Call /NOUNLOAD '*$9(&i2,&i2,&i2,&i2,&i2,&i2,&i2,&i2)i(.r1,.r2,.r3,.r4,.r5,.r6,.r7,)'\n  System::Free $9\n  IntCmp $2 9 0 0 +2\n  StrCpy $2 '0$2'\n  IntCmp $4 9 0 0 +2\n  StrCpy $4 '0$4'\n  WriteRegStr SHCTX \"${MULTIUSER_INSTALLMODE_UNINSTALL_REGISTRY_KEY_PATH}$0\" \"InstallDate\" \"$1$2$4\"\n\n  ${RefreshShellIcons}\nSectionEnd\n\n; Modern install component descriptions\n!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionCoreFiles} \\\n    \"Core files required to run ${PRODUCT_NAME}.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionGroupIntegration} \\\n    \"Integrate ${PRODUCT_NAME} with the Operating System.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionWindowsRegister} \\\n    \"Register protocols and file extensions with ${PRODUCT_NAME}.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionDefaultBrowser} \\\n    \"Set ${PRODUCT_NAME} as the default Web browser.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionGroupShortcuts} \\\n    \"Create shortcut icons to run ${PRODUCT_NAME}.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionDesktopIcon} \\\n    \"Create ${PRODUCT_NAME} icon on the Desktop.\"\n  !insertmacro MUI_DESCRIPTION_TEXT ${SectionStartMenuIcon} \\\n    \"Create ${PRODUCT_NAME} icon in the Start Menu.\"\n!insertmacro MUI_FUNCTION_DESCRIPTION_END\n\n; Callbacks\nFunction .onInit\n  StrCpy $KeepReg 1\n  !insertmacro CheckPlatform ${PLATFORM}\n  !insertmacro CheckMinWinVer ${MIN_WIN_VER}\n  ${ifnot} ${UAC_IsInnerInstance}\n    !insertmacro CheckSingleInstance \"Setup\" \"Global\" \"${SETUP_MUTEX}\"\n    !insertmacro CheckSingleInstance \"Application\" \"Local\" \"${APP_MUTEX}\"\n  ${endif}\n\n  ; Detect existing setup from previous installers\n  !insertmacro CheckOldNSIS\n  !insertmacro MSI32_STACK\n  !insertmacro CheckMSI\n  ${if} $R1 == \"\"\n  ${andif} ${RunningX64}\n    SetRegView 64 ; Will be set again by MULTIUSER_INIT\n    !insertmacro MSI64_STACK\n    !insertmacro CheckMSI\n  ${endif}\n  ${if} $R0 != \"\"\n  ${orif} $R1 != \"\"\n    MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \\\n      \"An older version of ${PRODUCT_NAME} is already installed.$\\r$\\n$\\r$\\n\\\n      Click `OK` to remove the previous version and continue,$\\r$\\n\\\n      or `Cancel` to cancel this upgrade.\" \\\n      IDOK +2\n    Abort\n    ${if} $R0 != \"\"\n      ${GetParent} $R0 $0\n      !insertmacro RemoveOld $R0 \"/S _?=$0\"\n    ${endif}\n    ${if} $R1 != \"\"\n      !insertmacro RemoveOld \"$SYSDIR\\msiexec.exe\" \"/X$R1 /passive /promptrestart\"\n    ${endif}\n  ${endif}\n\n  !insertmacro MULTIUSER_INIT\n\n  ${if} $IsInnerInstance = 0\n    !insertmacro MUI_LANGDLL_DISPLAY\n  ${endif}\nFunctionEnd\n\nFunction .onSelChange\n  ${if} ${SectionIsSelected} ${SectionWindowsRegister}\n    StrCpy $KeepReg 1\n  ${else}\n    StrCpy $KeepReg 0\n  ${endif}\n\n  ${if} ${SectionIsSelected} ${SectionDefaultBrowser}\n    !insertmacro SetSectionFlag ${SectionWindowsRegister} ${SF_RO}\n    !insertmacro SelectSection ${SectionWindowsRegister}\n  ${else}\n    !insertmacro ClearSectionFlag ${SectionWindowsRegister} ${SF_RO}\n  ${endif}\nFunctionEnd\n\nFunction PageWelcomeLicensePre\n  ${if} $InstallShowPagesBeforeComponents = 0\n    Abort ; don't display the Welcome and License pages for the inner instance\n  ${endif}\nFunctionEnd\n\nFunction PageInstallModeChangeMode\n  ; Disable integration for single user install on Win7 and older, as it's not supported\n  ${if} ${AtMostWin7}\n    SectionSetText ${SectionDefaultBrowser} \"Set as Default Browser\"\n    ${if} $MultiUser.InstallMode == \"CurrentUser\"\n      SectionSetText ${SectionGroupIntegration} \"System Integration (not supported)\"\n      IntOP $0 ${SF_RO} & ${SECTION_OFF}\n      SectionSetFlags ${SectionWindowsRegister} $0\n      SectionSetFlags ${SectionDefaultBrowser} $0\n      !insertmacro SetSectionFlag ${SectionGroupIntegration} ${SF_RO}\n      !insertmacro ClearSectionFlag ${SectionGroupIntegration} ${SF_EXPAND}\n    ${else}\n      ; This is necessary because if the installer started under Win7/Vista as Administrator with UAC disabled,\n      ; going back to All users after first selecting Single user, the integration component would still be disabled\n      SectionSetText ${SectionGroupIntegration} \"System Integration\"\n      !insertmacro ClearSectionFlag ${SectionWindowsRegister} ${SF_RO}\n      !insertmacro ClearSectionFlag ${SectionDefaultBrowser} ${SF_RO}\n      !insertmacro ClearSectionFlag ${SectionGroupIntegration} ${SF_RO}\n      !insertmacro SetSectionFlag ${SectionGroupIntegration} ${SF_EXPAND}\n      !insertmacro SelectSection ${SectionWindowsRegister}\n\n      ; Select 'Default browser' if already set in registry\n      !insertmacro UAC_AsUser_Call Function GetDefaultBrowser ${UAC_SYNCREGISTERS}\n      ${if} $0 == \"${PRODUCT_NAME}URL\"\n      ${orif} $1 == \"${PRODUCT_NAME}URL\"\n      ${orif} $2 == \"${PRODUCT_NAME}HTML\"\n      ${orif} $3 == \"${PRODUCT_NAME}HTML\"\n        !insertmacro SetSectionFlag ${SectionWindowsRegister} ${SF_RO}\n        !insertmacro SelectSection ${SectionDefaultBrowser}\n      ${else}\n        !insertmacro UnselectSection ${SectionDefaultBrowser}\n      ${endif}\n    ${endif}\n  ${endif}\nFunctionEnd\n\nFunction PageComponentsPre\n  GetDlgItem $0 $HWNDPARENT 1\n  SendMessage $0 ${BCM_SETSHIELD} 0 0 ; hide SHIELD (Windows Vista and above)\nFunctionEnd\n\nFunction PageDirectoryPre\n  GetDlgItem $1 $HWNDPARENT 1\n  SendMessage $1 ${WM_SETTEXT} 0 \"STR:$(^InstallBtn)\" ; this is the last page before installing\n  Call MultiUser.CheckPageElevationRequired\n  ${if} $0 = 2\n    SendMessage $1 ${BCM_SETSHIELD} 0 1 ; display SHIELD (Windows Vista and above)\n  ${endif}\nFunctionEnd\n\nFunction PageDirectoryShow\n  ${if} $CmdLineDir != \"\"\n    FindWindow $R1 \"#32770\" \"\" $HWNDPARENT\n\n    GetDlgItem $0 $R1 1019 ; Directory edit\n    SendMessage $0 ${EM_SETREADONLY} 1 0 ; read-only is better than disabled, as user can copy contents\n\n    GetDlgItem $0 $R1 1001 ; Browse button\n    EnableWindow $0 0\n  ${endif}\nFunctionEnd\n\nFunction PageInstFilesPre\n  GetDlgItem $0 $HWNDPARENT 1\n  SendMessage $0 ${BCM_SETSHIELD} 0 0 ; hide SHIELD (Windows Vista and above)\nFunctionEnd\n\nFunction PageFinishRun\n  ; the installer might exit too soon before the application starts and it loses\n  ; the right to be the foreground window and starts in the background\n  ; however, if there's no active window when the application starts, it will\n  ; become the active window, so we hide the installer\n  HideWindow\n  ; the installer will show itself again quickly before closing (w/o Taskbar button), we move it offscreen\n  !define SWP_NOSIZE 0x0001\n  !define SWP_NOZORDER 0x0004\n  System::Call \"User32::SetWindowPos(i, i, i, i, i, i, i) b \\\n    ($HWNDPARENT, 0, -1000, -1000, 0, 0, ${SWP_NOZORDER}|${SWP_NOSIZE})\"\n\n  !insertmacro UAC_AsUser_ExecShell \"open\" \"$INSTDIR\\${PROGEXE}\" \"\" \"$INSTDIR\" \"\"\nFunctionEnd\n\nFunction .onInstFailed\n  MessageBox MB_ICONSTOP \\\n    \"${PRODUCT_NAME} ${VERSION} could not be fully installed.$\\r$\\n\\\n    Please, restart Windows and run the setup program again.\" \\\n    /SD IDOK\nFunctionEnd\n", "[Desktop Entry]\nName=qutebrowser\nStartupWMClass=qutebrowser\nGenericName=Web Browser\nGenericName[ar]=\ufee2\ufe98\ufebc\ufed4\ufea3 \ufe8e\ufee0\ufeb8\ufe92\ufedb\ufe93\nGenericName[bg]=\u0423\u0435\u0431 \u0431\u0440\u0430\u0443\u0437\u044a\u0440\nGenericName[ca]=Navegador web\nGenericName[cs]=WWW prohl\u00ed\u017ee\u010d\nGenericName[da]=Browser\nGenericName[de]=Web-Browser\nGenericName[el]=\u03a0\u03b5\u03c1\u03b9\u03b7\u03b3\u03b7\u03c4\u03ae\u03c2 \u03b9\u03c3\u03c4\u03bf\u03cd\nGenericName[en_GB]=Web Browser\nGenericName[es]=Navegador web\nGenericName[et]=Veebibrauser\nGenericName[fi]=WWW-selain\nGenericName[fr]=Navigateur Web\nGenericName[gu]=\u0ab5\u0ac7\u0aac \u0aac\u0acd\u0ab0\u0abe\u0a89\u0a9d\u0ab0\nGenericName[he]=\u05d3\u05e4\u05d3\u05e4\u05df \u05d0\u05d9\u05e0\u05d8\u05e8\u05e0\u05d8\nGenericName[hi]=\u0935\u0947\u092c \u092c\u094d\u0930\u093e\u0909\u091c\u093c\u0930\nGenericName[hu]=Webb\u00f6ng\u00e9sz\u0151\nGenericName[it]=Browser Web\nGenericName[ja]=\u30a6\u30a7\u30d6\u30d6\u30e9\u30a6\u30b6\nGenericName[kn]=\u0c9c\u0cbe\u0cb2 \u0cb5\u0cc0\u0c95\u0ccd\u0cb7\u0c95\nGenericName[ko]=\uc6f9 \ube0c\ub77c\uc6b0\uc800\nGenericName[lt]=\u017diniatinklio nar\u0161ykl\u0117\nGenericName[lv]=T\u012bmek\u013ca p\u0101rl\u016bks\nGenericName[ml]=\u0d35\u0d46\u0d2c\u0d4d \u0d2c\u0d4d\u0d30\u0d4c\u0d38\u0d30\u0d4d<200d>\nGenericName[mr]=\u0935\u0947\u092c \u092c\u094d\u0930\u093e\u090a\u091c\u0930\nGenericName[nb]=Nettleser\nGenericName[nl]=Webbrowser\nGenericName[pl]=Przegl\u0105darka WWW\nGenericName[pt]=Navegador Web\nGenericName[pt_BR]=Navegador da Internet\nGenericName[ro]=Navigator de Internet\nGenericName[ru]=\u0412\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440\nGenericName[sl]=Spletni brskalnik\nGenericName[sv]=Webbl\u00e4sare\nGenericName[ta]=\u0b87\u0ba3\u0bc8\u0baf \u0b89\u0bb2\u0bbe\u0bb5\u0bbf\nGenericName[th]=\u0e40\u0e27\u0e47\u0e1a\u0e40\u0e1a\u0e23\u0e32\u0e27\u0e4c\u0e40\u0e0b\u0e2d\u0e23\u0e4c\nGenericName[tr]=Web Taray\u0131c\u0131\nGenericName[uk]=\u041d\u0430\u0432\u0456\u0433\u0430\u0442\u043e\u0440 \u0422\u0435\u043d\u0435\u0442\u700f\u89bd\u5668\nComment=A keyboard-driven, vim-like browser based on PyQt5\nComment[de]=Ein Tastatur-gesteuerter, vim-\u00e4hnlicher Browser basierend auf PyQt5\nComment[it]= Un browser web vim-like utilizzabile da tastiera basato su PyQt5\nIcon=qutebrowser\nType=Application\nCategories=Network;WebBrowser;\nExec=qutebrowser --untrusted-args %u\nTerminal=false\nStartupNotify=true\nMimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/qute;\nKeywords=Browser\nActions=new-window;preferences;\n\n[Desktop Action new-window]\nName=New Window\nName[am]=\u12a0\u12f2\u1235 \u1218\u1235\u12ae\u1275\nName[ar]=\ufee5\ufe8e\ufed3\ufeab\ufe93 \ufe9d\ufeaa\ufef3\ufea9\ufe93\nName[bg]=\u041d\u043e\u0432 \u043f\u0440\u043e\u0437\u043e\u0440\u0435\u0446\nName[bn]=\u09a8\u09a4\u09c1\u09a8 \u0989\u0987\u09a8\u09cd\u09a1\u09cb\nName[ca]=Finestra nova\nName[cs]=Nov\u00e9 okno\nName[da]=Nyt vindue\nName[de]=Neues Fenster\nName[el]=\u039d\u03ad\u03bf \u03a0\u03b1\u03c1\u03ac\u03b8\u03c5\u03c1\u03bf\nName[en_GB]=New Window\nName[es]=Nueva ventana\nName[et]=Uus aken\nName[fa]=\u067e\ufee6\ufe9f\ufeae\ufeeb \ufe9d\ufea9\u06cc\ufea9\nName[fi]=Uusi ikkuna\nName[fil]=New Window\nName[fr]=Nouvelle fen\u00eatre\nName[gu]=\u0aa8\u0ab5\u0ac0 \u0ab5\u0abf\u0a82\u0aa1\u0acb\nName[hi]=\u0928\u0908 \u0935\u093f\u0902\u0921\u094b\nName[hr]=Novi prozor\nName[hu]=\u00daj ablak\nName[id]=Jendela Baru\nName[it]=Nuova finestra\nName[iw]=\u05d7\u05dc\u05d5\u05df \u05d7\u05d3\u05e9\nName[ja]=\u65b0\u898f\u30a6\u30a4\u30f3\u30c9\u30a6\nName[kn]=\u0cb9\u0cca\u0cb8 \u0cb5\u0cbf\u0c82\u0ca1\u0cca\nName[ko]=\uc0c8 \ucc3d\nName[lt]=Naujas langas\nName[lv]=Jauns logs\nName[ml]=\u0d2a\u0d41\u0d24\u0d3f\u0d2f \u0d35\u0d3f\u0d28\u0d4d<200d>\u0d21\u0d4b\nName[mr]=\u0928\u0935\u0940\u0928 \u0935\u093f\u0902\u0921\u094b\nName[nl]=Nieuw venster\nName[no]=Nytt vindu\nName[pl]=Nowe okno\nName[pt]=Nova janela\nName[pt_BR]=Nova janela\nName[ro]=Fereastr\u0103 nou\u0103\nName[ru]=\u041d\u043e\u0432\u043e\u0435 \u043e\u043a\u043d\u043e\nName[sk]=Nov\u00e9 okno\nName[sl]=Novo okno\nName[sr]=\u041d\u043e\u0432\u0438 \u043f\u0440\u043e\u0437\u043e\u0440\nName[sv]=Nytt f\u00f6nster\nName[sw]=Dirisha Jipya\nName[ta]=\u0baa\u0bc1\u0ba4\u0bbf\u0baf \u0b9a\u0bbe\u0bb3\u0bb0\u0bae\u0bcd\nName[te]=\u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24 \u0c35\u0c3f\u0c02\u0c21\u0c4b\nName[th]=\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07\u0e43\u0e2b\u0e21\u0e48\nName[tr]=Yeni Pencere\nName[uk]=\u041d\u043e\u0432\u0435 \u0432\u0456\u043a\u043d\u043e\nName[vi]=C\u1eeda s\u1ed5 M\u1edbi\nExec=qutebrowser\n\n[Desktop Action preferences]\nName=Preferences\nName[an]=Preferencias\nName[ar]=\ufe8e\ufee0\ufe98\ufed4\ufec0\ufef3\ufefc\ufe97\nName[as]=\u09aa\u099b\u09a8\u09cd\u09a6\u09b8\u09ae\u09c2\u09b9\nName[be]=\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0456\nName[bg]=\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\nName[bn_IN]=\u09aa\u099b\u09a8\u09cd\u09a6\nName[bs]=Postavke\nName[ca]=Prefer\u00e8ncies\nName[ca@valencia]=Prefer\u00e8ncies\nName[cs]=P\u0159edvolby\nName[da]=Indstillinger\nName[de]=Einstellungen\nName[el]=\u03a0\u03c1\u03bf\u03c4\u03b9\u03bc\u03ae\u03c3\u03b5\u03b9\u03c2\nName[en_GB]=Preferences\nName[eo]=Agordoj\nName[es]=Preferencias\nName[et]=Eelistused\nName[eu]=Hobespenak\nName[fa]=\ufe95\ufeae\ufe9f\u06cc\ufea1\ufe8e\ufe97\nName[fi]=Asetukset\nName[fr]=Pr\u00e9f\u00e9rences\nName[fur]=Preferencis\nName[ga]=Sainroghanna\nName[gd]=Roghainnean\nName[gl]=Preferencias\nName[gu]=\u0aaa\u0ab8\u0a82\u0aa6\u0a97\u0ac0\u0a93\nName[he]=\u05d4\u05e2\u05d3\u05e4\u05d5\u05ea\nName[hi]=\u0935\u0930\u0940\u092f\u0924\u093e\u090f\u0901\nName[hr]=Osobitosti\nName[hu]=Be\u00e1ll\u00edt\u00e1sok\nName[id]=Preferensi\nName[is]=Kj\u00f6rstillingar\nName[it]=Preferenze\nName[ja]=\u8a2d\u5b9a\nName[kk]=\u0411\u0430\u043f\u0442\u0430\u0443\u043b\u0430\u0440\nName[km]=\u1785\u17c6\u178e\u17bc\u179b\u1785\u17b7\u178f\u17d2\u178f\nName[kn]=\u0c86\u0ca6\u0ccd\u0caf\u0ca4\u0cc6\u0c97\u0cb3\u0cc1\nName[ko]=\uae30\ubcf8 \uc124\uc815\nName[lt]=Nuostatos\nName[lv]=Iestat\u012bjumi\nName[ml]=\u0d2e\u0d41\u0d28\u0d4d<200d>\u0d17\u0d23\u0d28\u0d15\u0d33\u0d4d<200d>\nName[mr]=\u092a\u0938\u0902\u0924\u0940\nName[nb]=Brukervalg\nName[ne]=\u092a\u094d\u0930\u093e\u0925\u092e\u093f\u0915\u0924\u093e\u0939\u0930\u0942\nName[nl]=Voorkeuren\nName[oc]=Prefer\u00e9ncias\nName[or]=\u0b2a\u0b38\u0b28\u0b4d\u0b26\nName[pa]=\u0a2e\u0a47\u0a30\u0a40 \u0a2a\u0a38\u0a70\u0a26\nName[pl]=Preferencje\nName[pt]=Prefer\u00eancias\nName[pt_BR]=Prefer\u00eancias\nName[ro]=Preferin\u021be\nName[ru]=\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nName[sk]=Nastavenia\nName[sl]=Mo\u017enosti\nName[sr]=\u041f\u043e\u0441\u0442\u0430\u0432\u043a\u0435\nName[sr@latin]=Postavke\nName[sv]=Inst\u00e4llningar\nName[ta]=\u0bb5\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0b99\u0bcd\u0b95\u0bb3\u0bcd\nName[te]=\u0c05\u0c2d\u0c40\u0c37\u0c4d\u0c1f\u0c3e\u0c32\u0c41\nName[tg]=\u0425\u0443\u0441\u0443\u0441\u0438\u044f\u0442\u04b3\u043e\nName[th]=\u0e1b\u0e23\u0e31\u0e1a\u0e41\u0e15\u0e48\u0e07\nName[tr]=Tercihler\nName[ug]=\ufee1\ufe8e\ufef3\ufef0\ufee0\ufedf\ufef0\ufed7\nName[uk]=\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\nName[vi]=T\u00f9y th\u00edch\nName[zh_CN]=\u9996\u9009\u9879\nName[zh_HK]=\u504f\u597d\u8a2d\u5b9a\nName[zh_TW]=\u504f\u597d\u8a2d\u5b9a\nExec=qutebrowser \"qute://settings\"\n", "# vim: ft=python fileencoding=utf-8 sts=4 sw=4 et:\n\n# Copyright 2014-2021 Florian Bruhin (The Compiler) <mail@qutebrowser.org>\n\n# This file is part of qutebrowser.\n#\n# qutebrowser is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# qutebrowser is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with qutebrowser.  If not, see <https://www.gnu.org/licenses/>.\n\n\"\"\"Early initialization and main entry point.\n\nqutebrowser's initialization process roughly looks like this:\n\n- This file gets imported, either via the setuptools entry point or\n  __main__.py.\n- At import time, we check for the correct Python version and show an error if\n  it's too old.\n- The main() function in this file gets invoked\n- Argument parsing takes place\n- earlyinit.early_init() gets invoked to do various low-level initialization\n  and checks whether all dependencies are met.\n- app.run() gets called, which takes over.\n  See the docstring of app.py for details.\n\"\"\"\n\nimport sys\nimport json\n\nimport qutebrowser\ntry:\n    from qutebrowser.misc.checkpyver import check_python_version\nexcept ImportError:\n    try:\n        # python2\n        from .misc.checkpyver import check_python_version\n    except (SystemError, ValueError):\n        # Import without module - SystemError on Python3, ValueError (?!?) on\n        # Python2\n        sys.stderr.write(\"Please don't run this script directly, do something \"\n                         \"like   python3 -m qutebrowser   instead.\\n\")\n        sys.stderr.flush()\n        sys.exit(100)\ncheck_python_version()\n\nimport argparse  # pylint: disable=wrong-import-order\nfrom qutebrowser.misc import earlyinit\n\n\ndef get_argparser():\n    \"\"\"Get the argparse parser.\"\"\"\n    parser = argparse.ArgumentParser(prog='qutebrowser',\n                                     description=qutebrowser.__description__)\n    parser.add_argument('-B', '--basedir', help=\"Base directory for all \"\n                        \"storage.\")\n    parser.add_argument('-C', '--config-py', help=\"Path to config.py.\",\n                        metavar='CONFIG')\n    parser.add_argument('-V', '--version', help=\"Show version and quit.\",\n                        action='store_true')\n    parser.add_argument('-s', '--set', help=\"Set a temporary setting for \"\n                        \"this session.\", nargs=2, action='append',\n                        dest='temp_settings', default=[],\n                        metavar=('OPTION', 'VALUE'))\n    parser.add_argument('-r', '--restore', help=\"Restore a named session.\",\n                        dest='session')\n    parser.add_argument('-R', '--override-restore', help=\"Don't restore a \"\n                        \"session even if one would be restored.\",\n                        action='store_true')\n    parser.add_argument('--target', choices=['auto', 'tab', 'tab-bg',\n                                             'tab-silent', 'tab-bg-silent',\n                                             'window', 'private-window'],\n                        help=\"How URLs should be opened if there is already a \"\n                             \"qutebrowser instance running.\")\n    parser.add_argument('--backend', choices=['webkit', 'webengine'],\n                        help=\"Which backend to use.\")\n    parser.add_argument('--desktop-file-name',\n                        default=\"org.qutebrowser.qutebrowser\",\n                        help=\"Set the base name of the desktop entry for this \"\n                        \"application. Used to set the app_id under Wayland. See \"\n                        \"https://doc.qt.io/qt-5/qguiapplication.html#desktopFileName-prop\")\n    parser.add_argument('--untrusted-args',\n                        action='store_true',\n                        help=\"Mark all following arguments as untrusted, which \"\n                        \"enforces that they are URLs/search terms (and not flags or \"\n                        \"commands)\")\n\n    parser.add_argument('--json-args', help=argparse.SUPPRESS)\n    parser.add_argument('--temp-basedir-restarted',\n                        help=argparse.SUPPRESS,\n                        action='store_true')\n\n    # WORKAROUND to be able to restart from older qutebrowser versions into this one.\n    # Should be removed at some point.\n    parser.add_argument('--enable-webengine-inspector',\n                        help=argparse.SUPPRESS,\n                        action='store_true')\n\n    debug = parser.add_argument_group('debug arguments')\n    debug.add_argument('-l', '--loglevel', dest='loglevel',\n                       help=\"Override the configured console loglevel\",\n                       choices=['critical', 'error', 'warning', 'info',\n                                'debug', 'vdebug'])\n    debug.add_argument('--logfilter', type=logfilter_error,\n                       help=\"Comma-separated list of things to be logged \"\n                       \"to the debug log on stdout.\")\n    debug.add_argument('--loglines',\n                       help=\"How many lines of the debug log to keep in RAM \"\n                       \"(-1: unlimited).\",\n                       default=2000, type=int)\n    debug.add_argument('-d', '--debug', help=\"Turn on debugging options.\",\n                       action='store_true')\n    debug.add_argument('--json-logging', action='store_true', help=\"Output log\"\n                       \" lines in JSON format (one object per line).\")\n    debug.add_argument('--nocolor', help=\"Turn off colored logging.\",\n                       action='store_false', dest='color')\n    debug.add_argument('--force-color', help=\"Force colored logging\",\n                       action='store_true')\n    debug.add_argument('--nowindow', action='store_true', help=\"Don't show \"\n                       \"the main window.\")\n    debug.add_argument('-T', '--temp-basedir', action='store_true', help=\"Use \"\n                       \"a temporary basedir.\")\n    debug.add_argument('--no-err-windows', action='store_true', help=\"Don't \"\n                       \"show any error windows (used for tests/smoke.py).\")\n    debug.add_argument('--qt-arg', help=\"Pass an argument with a value to Qt. \"\n                       \"For example, you can do \"\n                       \"`--qt-arg geometry 650x555+200+300` to set the window \"\n                       \"geometry.\", nargs=2, metavar=('NAME', 'VALUE'),\n                       action='append')\n    debug.add_argument('--qt-flag', help=\"Pass an argument to Qt as flag.\",\n                       nargs=1, action='append')\n    debug.add_argument('-D', '--debug-flag', type=debug_flag_error,\n                       default=[], help=\"Pass name of debugging feature to be\"\n                       \" turned on.\", action='append', dest='debug_flags')\n    parser.add_argument('command', nargs='*', help=\"Commands to execute on \"\n                        \"startup.\", metavar=':command')\n    # URLs will actually be in command\n    parser.add_argument('url', nargs='*', help=\"URLs to open on startup \"\n                        \"(empty as a window separator).\")\n    return parser\n\n\ndef directory(arg):\n    if not arg:\n        raise argparse.ArgumentTypeError(\"Invalid empty value\")\n\n\ndef logfilter_error(logfilter):\n    \"\"\"Validate logger names passed to --logfilter.\n\n    Args:\n        logfilter: A comma separated list of logger names.\n    \"\"\"\n    from qutebrowser.utils import log\n    try:\n        log.LogFilter.parse(logfilter)\n    except log.InvalidLogFilterError as e:\n        raise argparse.ArgumentTypeError(e)\n    return logfilter\n\n\ndef debug_flag_error(flag):\n    \"\"\"Validate flags passed to --debug-flag.\n\n    Available flags:\n        debug-exit: Turn on debugging of late exit.\n        pdb-postmortem: Drop into pdb on exceptions.\n        no-sql-history: Don't store history items.\n        no-scroll-filtering: Process all scrolling updates.\n        log-requests: Log all network requests.\n        log-cookies: Log cookies in cookie filter.\n        log-scroll-pos: Log all scrolling changes.\n        log-sensitive-keys: Log keypresses in passthrough modes.\n        stack: Enable Chromium stack logging.\n        chromium: Enable Chromium logging.\n        wait-renderer-process: Wait for debugger in renderer process.\n        avoid-chromium-init: Enable `--version` without initializing Chromium.\n        werror: Turn Python warnings into errors.\n        test-notification-service: Use the testing libnotify service.\n    \"\"\"\n    valid_flags = ['debug-exit', 'pdb-postmortem', 'no-sql-history',\n                   'no-scroll-filtering', 'log-requests', 'log-cookies',\n                   'log-scroll-pos', 'log-sensitive-keys', 'stack', 'chromium',\n                   'wait-renderer-process', 'avoid-chromium-init', 'werror',\n                   'test-notification-service']\n\n    if flag in valid_flags:\n        return flag\n    else:\n        raise argparse.ArgumentTypeError(\"Invalid debug flag - valid flags: {}\"\n                                         .format(', '.join(valid_flags)))\n\n\ndef _unpack_json_args(args):\n    \"\"\"Restore arguments from --json-args after a restart.\n\n    When restarting, we serialize the argparse namespace into json, and\n    construct a \"fake\" argparse.Namespace here based on the data loaded\n    from json.\n    \"\"\"\n    new_args = vars(args)\n    data = json.loads(args.json_args)\n    new_args.update(data)\n    return argparse.Namespace(**new_args)\n\n\ndef _validate_untrusted_args(argv):\n    # NOTE: Do not use f-strings here, as this should run with older Python\n    # versions (so that a proper error can be displayed)\n    try:\n        untrusted_idx = argv.index('--untrusted-args')\n    except ValueError:\n        return\n\n    rest = argv[untrusted_idx + 1:]\n    if len(rest) > 1:\n        sys.exit(\n            \"Found multiple arguments ({}) after --untrusted-args, \"\n            \"aborting.\".format(' '.join(rest)))\n\n    for arg in rest:\n        if arg.startswith(('-', ':')):\n            sys.exit(\"Found {} after --untrusted-args, aborting.\".format(arg))\n\n\ndef main():\n    _validate_untrusted_args(sys.argv)\n    parser = get_argparser()\n    argv = sys.argv[1:]\n    args = parser.parse_args(argv)\n    if args.json_args is not None:\n        args = _unpack_json_args(args)\n    earlyinit.early_init(args)\n    # We do this imports late as earlyinit needs to be run first (because of\n    # version checking and other early initialization)\n    from qutebrowser import app\n    return app.run(args)\n", "# vim: ft=python fileencoding=utf-8 sts=4 sw=4 et:\n\n# Copyright 2020-2021 Florian Bruhin (The Compiler) <mail@qutebrowser.org>\n#\n# This file is part of qutebrowser.\n#\n# qutebrowser is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# qutebrowser is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with qutebrowser.  If not, see <https://www.gnu.org/licenses/>.\n\n\"\"\"Tests for qutebrowser.qutebrowser.\n\n(Mainly commandline flag parsing)\n\"\"\"\n\nimport re\n\nimport pytest\n\nfrom qutebrowser import qutebrowser\n\n\n@pytest.fixture\ndef parser():\n    return qutebrowser.get_argparser()\n\n\nclass TestDebugFlag:\n\n    def test_valid(self, parser):\n        args = parser.parse_args(['--debug-flag', 'chromium',\n                                  '--debug-flag', 'stack'])\n        assert args.debug_flags == ['chromium', 'stack']\n\n    def test_invalid(self, parser, capsys):\n        with pytest.raises(SystemExit):\n            parser.parse_args(['--debug-flag', 'invalid'])\n\n        _out, err = capsys.readouterr()\n        assert 'Invalid debug flag - valid flags:' in err\n\n\nclass TestLogFilter:\n\n    def test_valid(self, parser):\n        args = parser.parse_args(['--logfilter', 'misc'])\n        assert args.logfilter == 'misc'\n\n    def test_invalid(self, parser, capsys):\n        with pytest.raises(SystemExit):\n            parser.parse_args(['--logfilter', 'invalid'])\n\n        _out, err = capsys.readouterr()\n        print(err)\n        assert 'Invalid log category invalid - valid categories' in err\n\n\nclass TestJsonArgs:\n\n    def test_partial(self, parser):\n        \"\"\"Make sure we can provide a subset of all arguments.\n\n        This ensures that it's possible to restart into an older version of qutebrowser\n        when a new argument was added.\n        \"\"\"\n        args = parser.parse_args(['--json-args', '{\"debug\": true}'])\n        args = qutebrowser._unpack_json_args(args)\n        # pylint: disable=no-member\n        assert args.debug\n        assert not args.temp_basedir\n\n\nclass TestValidateUntrustedArgs:\n\n    @pytest.mark.parametrize('args', [\n        [],\n        [':nop'],\n        [':nop', '--untrusted-args'],\n        [':nop', '--debug', '--untrusted-args'],\n        [':nop', '--untrusted-args', 'foo'],\n        ['--debug', '--untrusted-args', 'foo'],\n        ['foo', '--untrusted-args', 'bar'],\n    ])\n    def test_valid(self, args):\n        qutebrowser._validate_untrusted_args(args)\n\n    @pytest.mark.parametrize('args, message', [\n        (\n            ['--untrusted-args', '--debug'],\n            \"Found --debug after --untrusted-args, aborting.\",\n        ),\n        (\n            ['--untrusted-args', ':nop'],\n            \"Found :nop after --untrusted-args, aborting.\",\n        ),\n        (\n            ['--debug', '--untrusted-args', '--debug'],\n            \"Found --debug after --untrusted-args, aborting.\",\n        ),\n        (\n            [':nop', '--untrusted-args', '--debug'],\n            \"Found --debug after --untrusted-args, aborting.\",\n        ),\n        (\n            [':nop', '--untrusted-args', ':nop'],\n            \"Found :nop after --untrusted-args, aborting.\",\n        ),\n        (\n            [\n                ':nop',\n                '--untrusted-args',\n                ':nop',\n                '--untrusted-args',\n                'https://www.example.org',\n            ],\n            (\n                \"Found multiple arguments (:nop --untrusted-args \"\n                \"https://www.example.org) after --untrusted-args, aborting.\"\n            )\n        ),\n        (\n            ['--untrusted-args', 'okay1', 'okay2'],\n            \"Found multiple arguments (okay1 okay2) after --untrusted-args, aborting.\",\n        ),\n    ])\n    def test_invalid(self, args, message):\n        with pytest.raises(SystemExit, match=re.escape(message)):\n            qutebrowser._validate_untrusted_args(args)\n"], "filenames": ["misc/nsis/install.nsh", "misc/org.qutebrowser.qutebrowser.desktop", "qutebrowser/qutebrowser.py", "tests/unit/test_qutebrowser.py"], "buggy_code_start_loc": [354, 48, 89, 23], "buggy_code_end_loc": [355, 49, 210, 77], "fixing_code_start_loc": [354, 48, 90, 24], "fixing_code_end_loc": [355, 49, 236, 138], "type": "CWE-77", "message": "qutebrowser is an open source keyboard-focused browser with a minimal GUI. Starting with qutebrowser v1.7.0, the Windows installer for qutebrowser registers a `qutebrowserurl:` URL handler. With certain applications, opening a specially crafted `qutebrowserurl:...` URL can lead to execution of qutebrowser commands, which in turn allows arbitrary code execution via commands such as `:spawn` or `:debug-pyeval`. Only Windows installs where qutebrowser is registered as URL handler are affected. The issue has been fixed in qutebrowser v2.4.0. The fix also adds additional hardening for potential similar issues on Linux (by adding the new --untrusted-args flag to the .desktop file), though no such vulnerabilities are known.", "other": {"cve": {"id": "CVE-2021-41146", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-21T18:15:10.303", "lastModified": "2022-10-24T18:43:15.700", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "qutebrowser is an open source keyboard-focused browser with a minimal GUI. Starting with qutebrowser v1.7.0, the Windows installer for qutebrowser registers a `qutebrowserurl:` URL handler. With certain applications, opening a specially crafted `qutebrowserurl:...` URL can lead to execution of qutebrowser commands, which in turn allows arbitrary code execution via commands such as `:spawn` or `:debug-pyeval`. Only Windows installs where qutebrowser is registered as URL handler are affected. The issue has been fixed in qutebrowser v2.4.0. The fix also adds additional hardening for potential similar issues on Linux (by adding the new --untrusted-args flag to the .desktop file), though no such vulnerabilities are known."}, {"lang": "es", "value": "qutebrowser es un navegador de c\u00f3digo abierto centrado en el teclado con una Interfaz de Usuario Gr\u00e1fica m\u00ednima. A partir de qutebrowser versi\u00f3n v1.7.0, el instalador de Windows para qutebrowser registra un manejador de URL \"qutebrowserurl:\". Con determinadas aplicaciones, la apertura de una URL \"qutebrowserurl:...\" especialmente dise\u00f1ada puede conllevar a una ejecuci\u00f3n de comandos de qutebrowser, lo que a su vez permite una ejecuci\u00f3n de c\u00f3digo arbitrario por medio de comandos como \":spawn\" o \":debug-pyeval\". S\u00f3lo est\u00e1n afectadas las instalaciones de Windows en las que qutebrowser est\u00e1 registrado como manejador de URL. El problema ha sido corregido en qutebrowser versi\u00f3n v2.4.0. La correcci\u00f3n tambi\u00e9n a\u00f1ade un refuerzo adicional para posibles problemas similares en Linux (al a\u00f1adir la nueva flag --untrusted-args al archivo .desktop), aunque no se conoce ninguna vulnerabilidad de este tipo"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-641"}, {"lang": "en", "value": "CWE-77"}, {"lang": "en", "value": "CWE-88"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:qutebrowser:qutebrowser:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.7.0", "matchCriteriaId": "3A51F2F8-D1B6-4749-87C5-6745A246B3FE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:qutebrowser:qutebrowser:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.4.0", "matchCriteriaId": "F643B197-DBB9-48A2-AD9B-CF2639EDD35A"}]}]}], "references": [{"url": "https://github.com/qutebrowser/qutebrowser/commit/8f46ba3f6dc7b18375f7aa63c48a1fe461190430", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/qutebrowser/qutebrowser/security/advisories/GHSA-vw27-fwjf-5qxm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/qutebrowser/qutebrowser/commit/8f46ba3f6dc7b18375f7aa63c48a1fe461190430"}}