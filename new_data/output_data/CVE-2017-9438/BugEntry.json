{"buggy_code": ["/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */\n\n/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */\n\n/* Identify Bison output.  */\n#define YYBISON 1\n\n/* Bison version.  */\n#define YYBISON_VERSION \"3.0.4\"\n\n/* Skeleton name.  */\n#define YYSKELETON_NAME \"yacc.c\"\n\n/* Pure parsers.  */\n#define YYPURE 1\n\n/* Push parsers.  */\n#define YYPUSH 0\n\n/* Pull parsers.  */\n#define YYPULL 1\n\n\n/* Substitute the variable and function names.  */\n#define yyparse         hex_yyparse\n#define yylex           hex_yylex\n#define yyerror         hex_yyerror\n#define yydebug         hex_yydebug\n#define yynerrs         hex_yynerrs\n\n\n/* Copy the first part of user declarations.  */\n#line 30 \"hex_grammar.y\" /* yacc.c:339  */\n\n\n#include <string.h>\n#include <limits.h>\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/hex_lexer.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/error.h>\n\n\n#define STR_EXPAND(tok) #tok\n#define STR(tok) STR_EXPAND(tok)\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n\n#line 111 \"hex_grammar.c\" /* yacc.c:339  */\n\n# ifndef YY_NULLPTR\n#  if defined __cplusplus && 201103L <= __cplusplus\n#   define YY_NULLPTR nullptr\n#  else\n#   define YY_NULLPTR 0\n#  endif\n# endif\n\n/* Enabling verbose error messages.  */\n#ifdef YYERROR_VERBOSE\n# undef YYERROR_VERBOSE\n# define YYERROR_VERBOSE 1\n#else\n# define YYERROR_VERBOSE 0\n#endif\n\n/* In a future release of Bison, this section will be replaced\n   by #include \"y.tab.h\".  */\n#ifndef YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n# define YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int hex_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _BYTE_ = 258,\n    _MASKED_BYTE_ = 259,\n    _NUMBER_ = 260\n  };\n#endif\n/* Tokens.  */\n#define _BYTE_ 258\n#define _MASKED_BYTE_ 259\n#define _NUMBER_ 260\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 78 \"hex_grammar.y\" /* yacc.c:355  */\n\n  int64_t integer;\n  RE_NODE *re_node;\n\n#line 166 \"hex_grammar.c\" /* yacc.c:355  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED  */\n\n/* Copy the second part of user declarations.  */\n\n#line 182 \"hex_grammar.c\" /* yacc.c:358  */\n\n#ifdef short\n# undef short\n#endif\n\n#ifdef YYTYPE_UINT8\ntypedef YYTYPE_UINT8 yytype_uint8;\n#else\ntypedef unsigned char yytype_uint8;\n#endif\n\n#ifdef YYTYPE_INT8\ntypedef YYTYPE_INT8 yytype_int8;\n#else\ntypedef signed char yytype_int8;\n#endif\n\n#ifdef YYTYPE_UINT16\ntypedef YYTYPE_UINT16 yytype_uint16;\n#else\ntypedef unsigned short int yytype_uint16;\n#endif\n\n#ifdef YYTYPE_INT16\ntypedef YYTYPE_INT16 yytype_int16;\n#else\ntypedef short int yytype_int16;\n#endif\n\n#ifndef YYSIZE_T\n# ifdef __SIZE_TYPE__\n#  define YYSIZE_T __SIZE_TYPE__\n# elif defined size_t\n#  define YYSIZE_T size_t\n# elif ! defined YYSIZE_T\n#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYSIZE_T size_t\n# else\n#  define YYSIZE_T unsigned int\n# endif\n#endif\n\n#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)\n\n#ifndef YY_\n# if defined YYENABLE_NLS && YYENABLE_NLS\n#  if ENABLE_NLS\n#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */\n#   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)\n#  endif\n# endif\n# ifndef YY_\n#  define YY_(Msgid) Msgid\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE\n# if (defined __GNUC__                                               \\\n      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\\n     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C\n#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)\n# else\n#  define YY_ATTRIBUTE(Spec) /* empty */\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE_PURE\n# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))\n#endif\n\n#ifndef YY_ATTRIBUTE_UNUSED\n# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))\n#endif\n\n#if !defined _Noreturn \\\n     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)\n# if defined _MSC_VER && 1200 <= _MSC_VER\n#  define _Noreturn __declspec (noreturn)\n# else\n#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))\n# endif\n#endif\n\n/* Suppress unused-variable warnings by \"using\" E.  */\n#if ! defined lint || defined __GNUC__\n# define YYUSE(E) ((void) (E))\n#else\n# define YYUSE(E) /* empty */\n#endif\n\n#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__\n/* Suppress an incorrect diagnostic about yylval being uninitialized.  */\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\\n    _Pragma (\"GCC diagnostic push\") \\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n    _Pragma (\"GCC diagnostic pop\")\n#else\n# define YY_INITIAL_VALUE(Value) Value\n#endif\n#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END\n#endif\n#ifndef YY_INITIAL_VALUE\n# define YY_INITIAL_VALUE(Value) /* Nothing. */\n#endif\n\n\n#if ! defined yyoverflow || YYERROR_VERBOSE\n\n/* The parser invokes alloca or malloc; define the necessary symbols.  */\n\n# ifdef YYSTACK_USE_ALLOCA\n#  if YYSTACK_USE_ALLOCA\n#   ifdef __GNUC__\n#    define YYSTACK_ALLOC __builtin_alloca\n#   elif defined __BUILTIN_VA_ARG_INCR\n#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */\n#   elif defined _AIX\n#    define YYSTACK_ALLOC __alloca\n#   elif defined _MSC_VER\n#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */\n#    define alloca _alloca\n#   else\n#    define YYSTACK_ALLOC alloca\n#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS\n#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */\n#     ifndef EXIT_SUCCESS\n#      define EXIT_SUCCESS 0\n#     endif\n#    endif\n#   endif\n#  endif\n# endif\n\n# ifdef YYSTACK_ALLOC\n   /* Pacify GCC's 'empty if-body' warning.  */\n#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n    /* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */\n#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */\n#  endif\n# else\n#  define YYSTACK_ALLOC YYMALLOC\n#  define YYSTACK_FREE YYFREE\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM\n#  endif\n#  if (defined __cplusplus && ! defined EXIT_SUCCESS \\\n       && ! ((defined YYMALLOC || defined malloc) \\\n             && (defined YYFREE || defined free)))\n#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n#   ifndef EXIT_SUCCESS\n#    define EXIT_SUCCESS 0\n#   endif\n#  endif\n#  ifndef YYMALLOC\n#   define YYMALLOC malloc\n#   if ! defined malloc && ! defined EXIT_SUCCESS\nvoid *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n#  ifndef YYFREE\n#   define YYFREE free\n#   if ! defined free && ! defined EXIT_SUCCESS\nvoid free (void *); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n# endif\n#endif /* ! defined yyoverflow || YYERROR_VERBOSE */\n\n\n#if (! defined yyoverflow \\\n     && (! defined __cplusplus \\\n         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))\n\n/* A type that is properly aligned for any stack member.  */\nunion yyalloc\n{\n  yytype_int16 yyss_alloc;\n  YYSTYPE yyvs_alloc;\n};\n\n/* The size of the maximum gap between one aligned stack and the next.  */\n# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)\n\n/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */\n# define YYSTACK_BYTES(N) \\\n     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\\n      + YYSTACK_GAP_MAXIMUM)\n\n# define YYCOPY_NEEDED 1\n\n/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */\n# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\\n    do                                                                  \\\n      {                                                                 \\\n        YYSIZE_T yynewbytes;                                            \\\n        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\\n        Stack = &yyptr->Stack_alloc;                                    \\\n        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\\n        yyptr += yynewbytes / sizeof (*yyptr);                          \\\n      }                                                                 \\\n    while (0)\n\n#endif\n\n#if defined YYCOPY_NEEDED && YYCOPY_NEEDED\n/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */\n# ifndef YYCOPY\n#  if defined __GNUC__ && 1 < __GNUC__\n#   define YYCOPY(Dst, Src, Count) \\\n      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))\n#  else\n#   define YYCOPY(Dst, Src, Count)              \\\n      do                                        \\\n        {                                       \\\n          YYSIZE_T yyi;                         \\\n          for (yyi = 0; yyi < (Count); yyi++)   \\\n            (Dst)[yyi] = (Src)[yyi];            \\\n        }                                       \\\n      while (0)\n#  endif\n# endif\n#endif /* !YYCOPY_NEEDED */\n\n/* YYFINAL -- State number of the termination state.  */\n#define YYFINAL  9\n/* YYLAST -- Last index in YYTABLE.  */\n#define YYLAST   30\n\n/* YYNTOKENS -- Number of terminals.  */\n#define YYNTOKENS  14\n/* YYNNTS -- Number of nonterminals.  */\n#define YYNNTS  10\n/* YYNRULES -- Number of rules.  */\n#define YYNRULES  20\n/* YYNSTATES -- Number of states.  */\n#define YYNSTATES  32\n\n/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */\n#define YYUNDEFTOK  2\n#define YYMAXUTOK   260\n\n#define YYTRANSLATE(YYX)                                                \\\n  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)\n\n/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */\nstatic const yytype_uint8 yytranslate[] =\n{\n       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       8,     9,     2,     2,     2,    12,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,    10,     2,    11,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     6,    13,     7,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,\n       5\n};\n\n#if YYDEBUG\n  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\nstatic const yytype_uint16 yyrline[] =\n{\n       0,   105,   105,   114,   118,   127,   189,   193,   206,   210,\n     219,   233,   232,   245,   268,   300,   322,   342,   346,   360,\n     368\n};\n#endif\n\n#if YYDEBUG || YYERROR_VERBOSE || 0\n/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */\nstatic const char *const yytname[] =\n{\n  \"$end\", \"error\", \"$undefined\", \"_BYTE_\", \"_MASKED_BYTE_\", \"_NUMBER_\",\n  \"'{'\", \"'}'\", \"'('\", \"')'\", \"'['\", \"']'\", \"'-'\", \"'|'\", \"$accept\",\n  \"hex_string\", \"tokens\", \"token_sequence\", \"token_or_range\", \"token\",\n  \"$@1\", \"range\", \"alternatives\", \"byte\", YY_NULLPTR\n};\n#endif\n\n# ifdef YYPRINT\n/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */\nstatic const yytype_uint16 yytoknum[] =\n{\n       0,   256,   257,   258,   259,   260,   123,   125,    40,    41,\n      91,    93,    45,   124\n};\n# endif\n\n#define YYPACT_NINF -11\n\n#define yypact_value_is_default(Yystate) \\\n  (!!((Yystate) == (-11)))\n\n#define YYTABLE_NINF -6\n\n#define yytable_value_is_error(Yytable_value) \\\n  0\n\n  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */\nstatic const yytype_int8 yypact[] =\n{\n      20,    14,    27,   -11,   -11,   -11,    21,    -2,   -11,   -11,\n      14,   -11,    -1,    -2,   -11,    -4,   -11,   -11,    10,    13,\n       9,   -11,     3,   -11,    14,   -11,     2,   -11,   -11,    18,\n     -11,   -11\n};\n\n  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */\nstatic const yytype_uint8 yydefact[] =\n{\n       0,     0,     0,    19,    20,    11,     0,     3,    10,     1,\n       0,     2,     0,     0,     6,     8,     9,    17,     0,     0,\n       0,     7,     8,    12,     0,    13,     0,    16,    18,     0,\n      15,    14\n};\n\n  /* YYPGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yypgoto[] =\n{\n     -11,   -11,   -10,   -11,    17,     8,   -11,   -11,   -11,   -11\n};\n\n  /* YYDEFGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yydefgoto[] =\n{\n      -1,     2,     6,    13,    14,     7,    10,    16,    18,     8\n};\n\n  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */\nstatic const yytype_int8 yytable[] =\n{\n      17,     3,     4,    -4,    19,    -4,     5,    29,    12,    -4,\n      -5,    20,    -5,    30,    28,    15,    -5,     3,     4,    23,\n      27,    22,     5,    24,    25,    26,     1,     9,    11,    31,\n      21\n};\n\nstatic const yytype_uint8 yycheck[] =\n{\n      10,     3,     4,     7,     5,     9,     8,     5,    10,    13,\n       7,    12,     9,    11,    24,     7,    13,     3,     4,     9,\n      11,    13,     8,    13,    11,    12,     6,     0,     7,    11,\n      13\n};\n\n  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */\nstatic const yytype_uint8 yystos[] =\n{\n       0,     6,    15,     3,     4,     8,    16,    19,    23,     0,\n      20,     7,    10,    17,    18,    19,    21,    16,    22,     5,\n      12,    18,    19,     9,    13,    11,    12,    11,    16,     5,\n      11,    11\n};\n\n  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */\nstatic const yytype_uint8 yyr1[] =\n{\n       0,    14,    15,    16,    16,    16,    17,    17,    18,    18,\n      19,    20,    19,    21,    21,    21,    21,    22,    22,    23,\n      23\n};\n\n  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */\nstatic const yytype_uint8 yyr2[] =\n{\n       0,     2,     3,     1,     2,     3,     1,     2,     1,     1,\n       1,     0,     4,     3,     5,     4,     3,     1,     3,     1,\n       1\n};\n\n\n#define yyerrok         (yyerrstatus = 0)\n#define yyclearin       (yychar = YYEMPTY)\n#define YYEMPTY         (-2)\n#define YYEOF           0\n\n#define YYACCEPT        goto yyacceptlab\n#define YYABORT         goto yyabortlab\n#define YYERROR         goto yyerrorlab\n\n\n#define YYRECOVERING()  (!!yyerrstatus)\n\n#define YYBACKUP(Token, Value)                                  \\\ndo                                                              \\\n  if (yychar == YYEMPTY)                                        \\\n    {                                                           \\\n      yychar = (Token);                                         \\\n      yylval = (Value);                                         \\\n      YYPOPSTACK (yylen);                                       \\\n      yystate = *yyssp;                                         \\\n      goto yybackup;                                            \\\n    }                                                           \\\n  else                                                          \\\n    {                                                           \\\n      yyerror (yyscanner, lex_env, YY_(\"syntax error: cannot back up\")); \\\n      YYERROR;                                                  \\\n    }                                                           \\\nwhile (0)\n\n/* Error token number */\n#define YYTERROR        1\n#define YYERRCODE       256\n\n\n\n/* Enable debugging if requested.  */\n#if YYDEBUG\n\n# ifndef YYFPRINTF\n#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYFPRINTF fprintf\n# endif\n\n# define YYDPRINTF(Args)                        \\\ndo {                                            \\\n  if (yydebug)                                  \\\n    YYFPRINTF Args;                             \\\n} while (0)\n\n/* This macro is provided for backward compatibility. */\n#ifndef YY_LOCATION_PRINT\n# define YY_LOCATION_PRINT(File, Loc) ((void) 0)\n#endif\n\n\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\\ndo {                                                                      \\\n  if (yydebug)                                                            \\\n    {                                                                     \\\n      YYFPRINTF (stderr, \"%s \", Title);                                   \\\n      yy_symbol_print (stderr,                                            \\\n                  Type, Value, yyscanner, lex_env); \\\n      YYFPRINTF (stderr, \"\\n\");                                           \\\n    }                                                                     \\\n} while (0)\n\n\n/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/\n\nstatic void\nyy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  FILE *yyo = yyoutput;\n  YYUSE (yyo);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yyvaluep)\n    return;\n# ifdef YYPRINT\n  if (yytype < YYNTOKENS)\n    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);\n# endif\n  YYUSE (yytype);\n}\n\n\n/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/\n\nstatic void\nyy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  YYFPRINTF (yyoutput, \"%s %s (\",\n             yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);\n\n  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env);\n  YYFPRINTF (yyoutput, \")\");\n}\n\n/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/\n\nstatic void\nyy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)\n{\n  YYFPRINTF (stderr, \"Stack now\");\n  for (; yybottom <= yytop; yybottom++)\n    {\n      int yybot = *yybottom;\n      YYFPRINTF (stderr, \" %d\", yybot);\n    }\n  YYFPRINTF (stderr, \"\\n\");\n}\n\n# define YY_STACK_PRINT(Bottom, Top)                            \\\ndo {                                                            \\\n  if (yydebug)                                                  \\\n    yy_stack_print ((Bottom), (Top));                           \\\n} while (0)\n\n\n/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/\n\nstatic void\nyy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  unsigned long int yylno = yyrline[yyrule];\n  int yynrhs = yyr2[yyrule];\n  int yyi;\n  YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n             yyrule - 1, yylno);\n  /* The symbols being reduced.  */\n  for (yyi = 0; yyi < yynrhs; yyi++)\n    {\n      YYFPRINTF (stderr, \"   $%d = \", yyi + 1);\n      yy_symbol_print (stderr,\n                       yystos[yyssp[yyi + 1 - yynrhs]],\n                       &(yyvsp[(yyi + 1) - (yynrhs)])\n                                              , yyscanner, lex_env);\n      YYFPRINTF (stderr, \"\\n\");\n    }\n}\n\n# define YY_REDUCE_PRINT(Rule)          \\\ndo {                                    \\\n  if (yydebug)                          \\\n    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, lex_env); \\\n} while (0)\n\n/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */\nint yydebug;\n#else /* !YYDEBUG */\n# define YYDPRINTF(Args)\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)\n# define YY_STACK_PRINT(Bottom, Top)\n# define YY_REDUCE_PRINT(Rule)\n#endif /* !YYDEBUG */\n\n\n/* YYINITDEPTH -- initial size of the parser's stacks.  */\n#ifndef YYINITDEPTH\n# define YYINITDEPTH 200\n#endif\n\n/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */\n\n#ifndef YYMAXDEPTH\n# define YYMAXDEPTH 10000\n#endif\n\n\n#if YYERROR_VERBOSE\n\n# ifndef yystrlen\n#  if defined __GLIBC__ && defined _STRING_H\n#   define yystrlen strlen\n#  else\n/* Return the length of YYSTR.  */\nstatic YYSIZE_T\nyystrlen (const char *yystr)\n{\n  YYSIZE_T yylen;\n  for (yylen = 0; yystr[yylen]; yylen++)\n    continue;\n  return yylen;\n}\n#  endif\n# endif\n\n# ifndef yystpcpy\n#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE\n#   define yystpcpy stpcpy\n#  else\n/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */\nstatic char *\nyystpcpy (char *yydest, const char *yysrc)\n{\n  char *yyd = yydest;\n  const char *yys = yysrc;\n\n  while ((*yyd++ = *yys++) != '\\0')\n    continue;\n\n  return yyd - 1;\n}\n#  endif\n# endif\n\n# ifndef yytnamerr\n/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */\nstatic YYSIZE_T\nyytnamerr (char *yyres, const char *yystr)\n{\n  if (*yystr == '\"')\n    {\n      YYSIZE_T yyn = 0;\n      char const *yyp = yystr;\n\n      for (;;)\n        switch (*++yyp)\n          {\n          case '\\'':\n          case ',':\n            goto do_not_strip_quotes;\n\n          case '\\\\':\n            if (*++yyp != '\\\\')\n              goto do_not_strip_quotes;\n            /* Fall through.  */\n          default:\n            if (yyres)\n              yyres[yyn] = *yyp;\n            yyn++;\n            break;\n\n          case '\"':\n            if (yyres)\n              yyres[yyn] = '\\0';\n            return yyn;\n          }\n    do_not_strip_quotes: ;\n    }\n\n  if (! yyres)\n    return yystrlen (yystr);\n\n  return yystpcpy (yyres, yystr) - yyres;\n}\n# endif\n\n/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */\nstatic int\nyysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,\n                yytype_int16 *yyssp, int yytoken)\n{\n  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);\n  YYSIZE_T yysize = yysize0;\n  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };\n  /* Internationalized format string. */\n  const char *yyformat = YY_NULLPTR;\n  /* Arguments of yyformat. */\n  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];\n  /* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */\n  int yycount = 0;\n\n  /* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */\n  if (yytoken != YYEMPTY)\n    {\n      int yyn = yypact[*yyssp];\n      yyarg[yycount++] = yytname[yytoken];\n      if (!yypact_value_is_default (yyn))\n        {\n          /* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */\n          int yyxbegin = yyn < 0 ? -yyn : 0;\n          /* Stay within bounds of both yycheck and yytname.  */\n          int yychecklim = YYLAST - yyn + 1;\n          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;\n          int yyx;\n\n          for (yyx = yyxbegin; yyx < yyxend; ++yyx)\n            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR\n                && !yytable_value_is_error (yytable[yyx + yyn]))\n              {\n                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)\n                  {\n                    yycount = 1;\n                    yysize = yysize0;\n                    break;\n                  }\n                yyarg[yycount++] = yytname[yyx];\n                {\n                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);\n                  if (! (yysize <= yysize1\n                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n                    return 2;\n                  yysize = yysize1;\n                }\n              }\n        }\n    }\n\n  switch (yycount)\n    {\n# define YYCASE_(N, S)                      \\\n      case N:                               \\\n        yyformat = S;                       \\\n      break\n      YYCASE_(0, YY_(\"syntax error\"));\n      YYCASE_(1, YY_(\"syntax error, unexpected %s\"));\n      YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));\n      YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));\n      YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));\n      YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));\n# undef YYCASE_\n    }\n\n  {\n    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);\n    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n      return 2;\n    yysize = yysize1;\n  }\n\n  if (*yymsg_alloc < yysize)\n    {\n      *yymsg_alloc = 2 * yysize;\n      if (! (yysize <= *yymsg_alloc\n             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))\n        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;\n      return 1;\n    }\n\n  /* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */\n  {\n    char *yyp = *yymsg;\n    int yyi = 0;\n    while ((*yyp = *yyformat) != '\\0')\n      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)\n        {\n          yyp += yytnamerr (yyp, yyarg[yyi++]);\n          yyformat += 2;\n        }\n      else\n        {\n          yyp++;\n          yyformat++;\n        }\n  }\n  return 0;\n}\n#endif /* YYERROR_VERBOSE */\n\n/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/\n\nstatic void\nyydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  YYUSE (yyvaluep);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yymsg)\n    yymsg = \"Deleting\";\n  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  switch (yytype)\n    {\n          case 16: /* tokens  */\n#line 94 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1023 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 17: /* token_sequence  */\n#line 95 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1029 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 18: /* token_or_range  */\n#line 96 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1035 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 19: /* token  */\n#line 97 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1041 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 21: /* range  */\n#line 100 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1047 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 22: /* alternatives  */\n#line 99 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1053 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 23: /* byte  */\n#line 98 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1059 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n\n      default:\n        break;\n    }\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n}\n\n\n\n\n/*----------.\n| yyparse.  |\n`----------*/\n\nint\nyyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n/* The lookahead symbol.  */\nint yychar;\n\n\n/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */\nYY_INITIAL_VALUE (static YYSTYPE yyval_default;)\nYYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n\n    /* Number of syntax errors so far.  */\n    int yynerrs;\n\n    int yystate;\n    /* Number of tokens to shift before error messages enabled.  */\n    int yyerrstatus;\n\n    /* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */\n\n    /* The state stack.  */\n    yytype_int16 yyssa[YYINITDEPTH];\n    yytype_int16 *yyss;\n    yytype_int16 *yyssp;\n\n    /* The semantic value stack.  */\n    YYSTYPE yyvsa[YYINITDEPTH];\n    YYSTYPE *yyvs;\n    YYSTYPE *yyvsp;\n\n    YYSIZE_T yystacksize;\n\n  int yyn;\n  int yyresult;\n  /* Lookahead token as an internal (translated) token number.  */\n  int yytoken = 0;\n  /* The variables used to return semantic value and location from the\n     action routines.  */\n  YYSTYPE yyval;\n\n#if YYERROR_VERBOSE\n  /* Buffer for error messages, and its allocated size.  */\n  char yymsgbuf[128];\n  char *yymsg = yymsgbuf;\n  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;\n#endif\n\n#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))\n\n  /* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */\n  int yylen = 0;\n\n  yyssp = yyss = yyssa;\n  yyvsp = yyvs = yyvsa;\n  yystacksize = YYINITDEPTH;\n\n  YYDPRINTF ((stderr, \"Starting parse\\n\"));\n\n  yystate = 0;\n  yyerrstatus = 0;\n  yynerrs = 0;\n  yychar = YYEMPTY; /* Cause a token to be read.  */\n  goto yysetstate;\n\n/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/\n yynewstate:\n  /* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */\n  yyssp++;\n\n yysetstate:\n  *yyssp = yystate;\n\n  if (yyss + yystacksize - 1 <= yyssp)\n    {\n      /* Get the current used size of the three stacks, in elements.  */\n      YYSIZE_T yysize = yyssp - yyss + 1;\n\n#ifdef yyoverflow\n      {\n        /* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */\n        YYSTYPE *yyvs1 = yyvs;\n        yytype_int16 *yyss1 = yyss;\n\n        /* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */\n        yyoverflow (YY_(\"memory exhausted\"),\n                    &yyss1, yysize * sizeof (*yyssp),\n                    &yyvs1, yysize * sizeof (*yyvsp),\n                    &yystacksize);\n\n        yyss = yyss1;\n        yyvs = yyvs1;\n      }\n#else /* no yyoverflow */\n# ifndef YYSTACK_RELOCATE\n      goto yyexhaustedlab;\n# else\n      /* Extend the stack our own way.  */\n      if (YYMAXDEPTH <= yystacksize)\n        goto yyexhaustedlab;\n      yystacksize *= 2;\n      if (YYMAXDEPTH < yystacksize)\n        yystacksize = YYMAXDEPTH;\n\n      {\n        yytype_int16 *yyss1 = yyss;\n        union yyalloc *yyptr =\n          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));\n        if (! yyptr)\n          goto yyexhaustedlab;\n        YYSTACK_RELOCATE (yyss_alloc, yyss);\n        YYSTACK_RELOCATE (yyvs_alloc, yyvs);\n#  undef YYSTACK_RELOCATE\n        if (yyss1 != yyssa)\n          YYSTACK_FREE (yyss1);\n      }\n# endif\n#endif /* no yyoverflow */\n\n      yyssp = yyss + yysize - 1;\n      yyvsp = yyvs + yysize - 1;\n\n      YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",\n                  (unsigned long int) yystacksize));\n\n      if (yyss + yystacksize - 1 <= yyssp)\n        YYABORT;\n    }\n\n  YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));\n\n  if (yystate == YYFINAL)\n    YYACCEPT;\n\n  goto yybackup;\n\n/*-----------.\n| yybackup.  |\n`-----------*/\nyybackup:\n\n  /* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */\n\n  /* First try to decide what to do without reference to lookahead token.  */\n  yyn = yypact[yystate];\n  if (yypact_value_is_default (yyn))\n    goto yydefault;\n\n  /* Not known => get a lookahead token if don't already have one.  */\n\n  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */\n  if (yychar == YYEMPTY)\n    {\n      YYDPRINTF ((stderr, \"Reading a token: \"));\n      yychar = yylex (&yylval, yyscanner, lex_env);\n    }\n\n  if (yychar <= YYEOF)\n    {\n      yychar = yytoken = YYEOF;\n      YYDPRINTF ((stderr, \"Now at end of input.\\n\"));\n    }\n  else\n    {\n      yytoken = YYTRANSLATE (yychar);\n      YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);\n    }\n\n  /* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */\n  yyn += yytoken;\n  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)\n    goto yydefault;\n  yyn = yytable[yyn];\n  if (yyn <= 0)\n    {\n      if (yytable_value_is_error (yyn))\n        goto yyerrlab;\n      yyn = -yyn;\n      goto yyreduce;\n    }\n\n  /* Count tokens shifted since error; after three, turn off error\n     status.  */\n  if (yyerrstatus)\n    yyerrstatus--;\n\n  /* Shift the lookahead token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);\n\n  /* Discard the shifted token.  */\n  yychar = YYEMPTY;\n\n  yystate = yyn;\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n  goto yynewstate;\n\n\n/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/\nyydefault:\n  yyn = yydefact[yystate];\n  if (yyn == 0)\n    goto yyerrlab;\n  goto yyreduce;\n\n\n/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/\nyyreduce:\n  /* yyn is the number of a rule to reduce with.  */\n  yylen = yyr2[yyn];\n\n  /* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */\n  yyval = yyvsp[1-yylen];\n\n\n  YY_REDUCE_PRINT (yyn);\n  switch (yyn)\n    {\n        case 2:\n#line 106 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = (yyvsp[-1].re_node);\n      }\n#line 1330 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 3:\n#line 115 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1338 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 4:\n#line 119 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1351 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 5:\n#line 128 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_NODE* new_concat;\n        RE_NODE* leftmost_concat = NULL;\n        RE_NODE* leftmost_node = (yyvsp[-1].re_node);\n\n        (yyval.re_node) = NULL;\n\n        /*\n        Some portions of the code (i.e: yr_re_split_at_chaining_point)\n        expect a left-unbalanced tree where the right child of a concat node\n        can't be another concat node. A concat node must be always the left\n        child of its parent if the parent is also a concat. For this reason\n        the can't simply create two new concat nodes arranged like this:\n\n                concat\n                 /   \\\n                /     \\\n            token's    \\\n            subtree  concat\n                     /    \\\n                    /      \\\n                   /        \\\n           token_sequence's  token's\n               subtree       subtree\n\n        Instead we must insert the subtree for the first token as the\n        leftmost node of the token_sequence subtree.\n        */\n\n        while (leftmost_node->type == RE_NODE_CONCAT)\n        {\n          leftmost_concat = leftmost_node;\n          leftmost_node = leftmost_node->left;\n        }\n\n        new_concat = yr_re_node_create(\n            RE_NODE_CONCAT, (yyvsp[-2].re_node), leftmost_node);\n\n        if (new_concat != NULL)\n        {\n          if (leftmost_concat != NULL)\n          {\n            leftmost_concat->left = new_concat;\n            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n          }\n          else\n          {\n            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, new_concat, (yyvsp[0].re_node));\n          }\n        }\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1413 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 6:\n#line 190 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1421 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 7:\n#line 194 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1434 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 8:\n#line 207 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1442 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 9:\n#line 211 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1451 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 10:\n#line 220 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        lex_env->token_count++;\n\n        if (lex_env->token_count > MAX_HEX_STRING_TOKENS)\n        {\n          yr_re_node_destroy((yyvsp[0].re_node));\n          yyerror(yyscanner, lex_env, \"string too long\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1468 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 11:\n#line 233 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        lex_env->inside_or++;\n      }\n#line 1476 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 12:\n#line 237 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[-1].re_node);\n        lex_env->inside_or--;\n      }\n#line 1485 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 13:\n#line 246 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        if ((yyvsp[-1].integer) <= 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump length\");\n          YYABORT;\n        }\n\n        if (lex_env->inside_or && (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD)\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (int) (yyvsp[-1].integer);\n        (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n      }\n#line 1512 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 14:\n#line 269 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        if (lex_env->inside_or &&\n            ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||\n             (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD) )\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n\n          YYABORT;\n        }\n\n        if ((yyvsp[-3].integer) < 0 || (yyvsp[-1].integer) < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        if ((yyvsp[-3].integer) > (yyvsp[-1].integer))\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump range\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (int) (yyvsp[-3].integer);\n        (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n      }\n#line 1548 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 15:\n#line 301 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        if ((yyvsp[-2].integer) < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (int) (yyvsp[-2].integer);\n        (yyval.re_node)->end = INT_MAX;\n      }\n#line 1574 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 16:\n#line 323 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = 0;\n        (yyval.re_node)->end = INT_MAX;\n      }\n#line 1594 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 17:\n#line 343 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n          (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1602 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 18:\n#line 347 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        mark_as_not_fast_regexp();\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1617 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 19:\n#line 361 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->value = (int) (yyvsp[0].integer);\n      }\n#line 1629 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 20:\n#line 369 \"hex_grammar.y\" /* yacc.c:1646  */\n    {\n        uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);\n\n        if (mask == 0x00)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n        }\n        else\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);\n\n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n          (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;\n          (yyval.re_node)->mask = mask;\n        }\n      }\n#line 1653 \"hex_grammar.c\" /* yacc.c:1646  */\n    break;\n\n\n#line 1657 \"hex_grammar.c\" /* yacc.c:1646  */\n      default: break;\n    }\n  /* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */\n  YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\n\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n\n  *++yyvsp = yyval;\n\n  /* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */\n\n  yyn = yyr1[yyn];\n\n  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;\n  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)\n    yystate = yytable[yystate];\n  else\n    yystate = yydefgoto[yyn - YYNTOKENS];\n\n  goto yynewstate;\n\n\n/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/\nyyerrlab:\n  /* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */\n  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);\n\n  /* If not already recovering from an error, report this error.  */\n  if (!yyerrstatus)\n    {\n      ++yynerrs;\n#if ! YYERROR_VERBOSE\n      yyerror (yyscanner, lex_env, YY_(\"syntax error\"));\n#else\n# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\\n                                        yyssp, yytoken)\n      {\n        char const *yymsgp = YY_(\"syntax error\");\n        int yysyntax_error_status;\n        yysyntax_error_status = YYSYNTAX_ERROR;\n        if (yysyntax_error_status == 0)\n          yymsgp = yymsg;\n        else if (yysyntax_error_status == 1)\n          {\n            if (yymsg != yymsgbuf)\n              YYSTACK_FREE (yymsg);\n            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);\n            if (!yymsg)\n              {\n                yymsg = yymsgbuf;\n                yymsg_alloc = sizeof yymsgbuf;\n                yysyntax_error_status = 2;\n              }\n            else\n              {\n                yysyntax_error_status = YYSYNTAX_ERROR;\n                yymsgp = yymsg;\n              }\n          }\n        yyerror (yyscanner, lex_env, yymsgp);\n        if (yysyntax_error_status == 2)\n          goto yyexhaustedlab;\n      }\n# undef YYSYNTAX_ERROR\n#endif\n    }\n\n\n\n  if (yyerrstatus == 3)\n    {\n      /* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */\n\n      if (yychar <= YYEOF)\n        {\n          /* Return failure if at end of input.  */\n          if (yychar == YYEOF)\n            YYABORT;\n        }\n      else\n        {\n          yydestruct (\"Error: discarding\",\n                      yytoken, &yylval, yyscanner, lex_env);\n          yychar = YYEMPTY;\n        }\n    }\n\n  /* Else will try to reuse lookahead token after shifting the error\n     token.  */\n  goto yyerrlab1;\n\n\n/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/\nyyerrorlab:\n\n  /* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */\n  if (/*CONSTCOND*/ 0)\n     goto yyerrorlab;\n\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n  yystate = *yyssp;\n  goto yyerrlab1;\n\n\n/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/\nyyerrlab1:\n  yyerrstatus = 3;      /* Each real token shifted decrements this.  */\n\n  for (;;)\n    {\n      yyn = yypact[yystate];\n      if (!yypact_value_is_default (yyn))\n        {\n          yyn += YYTERROR;\n          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)\n            {\n              yyn = yytable[yyn];\n              if (0 < yyn)\n                break;\n            }\n        }\n\n      /* Pop the current state because it cannot handle the error token.  */\n      if (yyssp == yyss)\n        YYABORT;\n\n\n      yydestruct (\"Error: popping\",\n                  yystos[yystate], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n      yystate = *yyssp;\n      YY_STACK_PRINT (yyss, yyssp);\n    }\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n\n  /* Shift the error token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yystos[yyn], yyvsp, yylsp);\n\n  yystate = yyn;\n  goto yynewstate;\n\n\n/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/\nyyacceptlab:\n  yyresult = 0;\n  goto yyreturn;\n\n/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/\nyyabortlab:\n  yyresult = 1;\n  goto yyreturn;\n\n#if !defined yyoverflow || YYERROR_VERBOSE\n/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/\nyyexhaustedlab:\n  yyerror (yyscanner, lex_env, YY_(\"memory exhausted\"));\n  yyresult = 2;\n  /* Fall through.  */\n#endif\n\nyyreturn:\n  if (yychar != YYEMPTY)\n    {\n      /* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */\n      yytoken = YYTRANSLATE (yychar);\n      yydestruct (\"Cleanup: discarding lookahead\",\n                  yytoken, &yylval, yyscanner, lex_env);\n    }\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */\n  YYPOPSTACK (yylen);\n  YY_STACK_PRINT (yyss, yyssp);\n  while (yyssp != yyss)\n    {\n      yydestruct (\"Cleanup: popping\",\n                  yystos[*yyssp], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n    }\n#ifndef yyoverflow\n  if (yyss != yyssa)\n    YYSTACK_FREE (yyss);\n#endif\n#if YYERROR_VERBOSE\n  if (yymsg != yymsgbuf)\n    YYSTACK_FREE (yymsg);\n#endif\n  return yyresult;\n}\n#line 390 \"hex_grammar.y\" /* yacc.c:1906  */\n\n", "/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison interface for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n#ifndef YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n# define YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int hex_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _BYTE_ = 258,\n    _MASKED_BYTE_ = 259,\n    _NUMBER_ = 260\n  };\n#endif\n/* Tokens.  */\n#define _BYTE_ 258\n#define _MASKED_BYTE_ 259\n#define _NUMBER_ 260\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 78 \"hex_grammar.y\" /* yacc.c:1909  */\n\n  int64_t integer;\n  RE_NODE *re_node;\n\n#line 69 \"hex_grammar.h\" /* yacc.c:1909  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED  */\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n%{\n\n#include <string.h>\n#include <limits.h>\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/hex_lexer.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/error.h>\n\n\n#define STR_EXPAND(tok) #tok\n#define STR(tok) STR_EXPAND(tok)\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n%}\n\n%name-prefix=\"hex_yy\"\n%pure-parser\n\n%parse-param {void *yyscanner}\n%parse-param {HEX_LEX_ENVIRONMENT *lex_env}\n\n%lex-param {yyscan_t yyscanner}\n%lex-param {HEX_LEX_ENVIRONMENT *lex_env}\n\n%union {\n  int64_t integer;\n  RE_NODE *re_node;\n}\n\n%token <integer> _BYTE_\n%token <integer> _MASKED_BYTE_\n%token <integer> _NUMBER_\n\n%type <re_node> tokens\n%type <re_node> token_sequence\n%type <re_node> token_or_range\n%type <re_node> token byte\n%type <re_node> alternatives\n%type <re_node> range\n\n%destructor { yr_re_node_destroy($$); } tokens\n%destructor { yr_re_node_destroy($$); } token_sequence\n%destructor { yr_re_node_destroy($$); } token_or_range\n%destructor { yr_re_node_destroy($$); } token\n%destructor { yr_re_node_destroy($$); } byte\n%destructor { yr_re_node_destroy($$); } alternatives\n%destructor { yr_re_node_destroy($$); } range\n\n%%\n\nhex_string\n    : '{' tokens '}'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = $2;\n      }\n    ;\n\n\ntokens\n    : token\n      {\n        $$ = $1;\n      }\n    | token token\n      {\n        $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | token token_sequence token\n      {\n        RE_NODE* new_concat;\n        RE_NODE* leftmost_concat = NULL;\n        RE_NODE* leftmost_node = $2;\n\n        $$ = NULL;\n\n        /*\n        Some portions of the code (i.e: yr_re_split_at_chaining_point)\n        expect a left-unbalanced tree where the right child of a concat node\n        can't be another concat node. A concat node must be always the left\n        child of its parent if the parent is also a concat. For this reason\n        the can't simply create two new concat nodes arranged like this:\n\n                concat\n                 /   \\\n                /     \\\n            token's    \\\n            subtree  concat\n                     /    \\\n                    /      \\\n                   /        \\\n           token_sequence's  token's\n               subtree       subtree\n\n        Instead we must insert the subtree for the first token as the\n        leftmost node of the token_sequence subtree.\n        */\n\n        while (leftmost_node->type == RE_NODE_CONCAT)\n        {\n          leftmost_concat = leftmost_node;\n          leftmost_node = leftmost_node->left;\n        }\n\n        new_concat = yr_re_node_create(\n            RE_NODE_CONCAT, $1, leftmost_node);\n\n        if (new_concat != NULL)\n        {\n          if (leftmost_concat != NULL)\n          {\n            leftmost_concat->left = new_concat;\n            $$ = yr_re_node_create(RE_NODE_CONCAT, $2, $3);\n          }\n          else\n          {\n            $$ = yr_re_node_create(RE_NODE_CONCAT, new_concat, $3);\n          }\n        }\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n        DESTROY_NODE_IF($$ == NULL, $3);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\n\ntoken_sequence\n    : token_or_range\n      {\n        $$ = $1;\n      }\n    | token_sequence token_or_range\n      {\n        $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\n\ntoken_or_range\n    : token\n      {\n        $$ = $1;\n      }\n    |  range\n      {\n        $$ = $1;\n        $$->greedy = FALSE;\n      }\n    ;\n\n\ntoken\n    : byte\n      {\n        lex_env->token_count++;\n\n        if (lex_env->token_count > MAX_HEX_STRING_TOKENS)\n        {\n          yr_re_node_destroy($1);\n          yyerror(yyscanner, lex_env, \"string too long\");\n          YYABORT;\n        }\n\n        $$ = $1;\n      }\n    | '('\n      {\n        lex_env->inside_or++;\n      }\n      alternatives ')'\n      {\n        $$ = $3;\n        lex_env->inside_or--;\n      }\n    ;\n\n\nrange\n    : '[' _NUMBER_ ']'\n      {\n        if ($2 <= 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump length\");\n          YYABORT;\n        }\n\n        if (lex_env->inside_or && $2 > STRING_CHAINING_THRESHOLD)\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = (int) $2;\n        $$->end = (int) $2;\n      }\n    | '[' _NUMBER_ '-' _NUMBER_ ']'\n      {\n        if (lex_env->inside_or &&\n            ($2 > STRING_CHAINING_THRESHOLD ||\n             $4 > STRING_CHAINING_THRESHOLD) )\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n\n          YYABORT;\n        }\n\n        if ($2 < 0 || $4 < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        if ($2 > $4)\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump range\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = (int) $2;\n        $$->end = (int) $4;\n      }\n    | '[' _NUMBER_ '-' ']'\n      {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        if ($2 < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = (int) $2;\n        $$->end = INT_MAX;\n      }\n    | '[' '-' ']'\n      {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = 0;\n        $$->end = INT_MAX;\n      }\n    ;\n\n\nalternatives\n    : tokens\n      {\n          $$ = $1;\n      }\n    | alternatives '|' tokens\n      {\n        mark_as_not_fast_regexp();\n\n        $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $3);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nbyte\n    : _BYTE_\n      {\n        $$ = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->value = (int) $1;\n      }\n    | _MASKED_BYTE_\n      {\n        uint8_t mask = (uint8_t) ($1 >> 8);\n\n        if (mask == 0x00)\n        {\n          $$ = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n          ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n        }\n        else\n        {\n          $$ = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);\n\n          ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n          $$->value = $1 & 0xFF;\n          $$->mask = mask;\n        }\n      }\n    ;\n\n%%\n"], "fixing_code": ["/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */\n\n/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */\n\n/* Identify Bison output.  */\n#define YYBISON 1\n\n/* Bison version.  */\n#define YYBISON_VERSION \"3.0.4\"\n\n/* Skeleton name.  */\n#define YYSKELETON_NAME \"yacc.c\"\n\n/* Pure parsers.  */\n#define YYPURE 1\n\n/* Push parsers.  */\n#define YYPUSH 0\n\n/* Pull parsers.  */\n#define YYPULL 1\n\n\n/* Substitute the variable and function names.  */\n#define yyparse         hex_yyparse\n#define yylex           hex_yylex\n#define yyerror         hex_yyerror\n#define yydebug         hex_yydebug\n#define yynerrs         hex_yynerrs\n\n\n/* Copy the first part of user declarations.  */\n#line 30 \"hex_grammar.y\" /* yacc.c:339  */\n\n\n#include <string.h>\n#include <limits.h>\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/hex_lexer.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/error.h>\n\n\n#define STR_EXPAND(tok) #tok\n#define STR(tok) STR_EXPAND(tok)\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define incr_ast_levels() \\\n    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n    { \\\n      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\\n      YYABORT; \\\n    }\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n\n#line 118 \"hex_grammar.c\" /* yacc.c:339  */\n\n# ifndef YY_NULLPTR\n#  if defined __cplusplus && 201103L <= __cplusplus\n#   define YY_NULLPTR nullptr\n#  else\n#   define YY_NULLPTR 0\n#  endif\n# endif\n\n/* Enabling verbose error messages.  */\n#ifdef YYERROR_VERBOSE\n# undef YYERROR_VERBOSE\n# define YYERROR_VERBOSE 1\n#else\n# define YYERROR_VERBOSE 0\n#endif\n\n/* In a future release of Bison, this section will be replaced\n   by #include \"y.tab.h\".  */\n#ifndef YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n# define YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int hex_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _BYTE_ = 258,\n    _MASKED_BYTE_ = 259,\n    _NUMBER_ = 260\n  };\n#endif\n/* Tokens.  */\n#define _BYTE_ 258\n#define _MASKED_BYTE_ 259\n#define _NUMBER_ 260\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 85 \"hex_grammar.y\" /* yacc.c:355  */\n\n  int64_t integer;\n  RE_NODE *re_node;\n\n#line 173 \"hex_grammar.c\" /* yacc.c:355  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED  */\n\n/* Copy the second part of user declarations.  */\n\n#line 189 \"hex_grammar.c\" /* yacc.c:358  */\n\n#ifdef short\n# undef short\n#endif\n\n#ifdef YYTYPE_UINT8\ntypedef YYTYPE_UINT8 yytype_uint8;\n#else\ntypedef unsigned char yytype_uint8;\n#endif\n\n#ifdef YYTYPE_INT8\ntypedef YYTYPE_INT8 yytype_int8;\n#else\ntypedef signed char yytype_int8;\n#endif\n\n#ifdef YYTYPE_UINT16\ntypedef YYTYPE_UINT16 yytype_uint16;\n#else\ntypedef unsigned short int yytype_uint16;\n#endif\n\n#ifdef YYTYPE_INT16\ntypedef YYTYPE_INT16 yytype_int16;\n#else\ntypedef short int yytype_int16;\n#endif\n\n#ifndef YYSIZE_T\n# ifdef __SIZE_TYPE__\n#  define YYSIZE_T __SIZE_TYPE__\n# elif defined size_t\n#  define YYSIZE_T size_t\n# elif ! defined YYSIZE_T\n#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYSIZE_T size_t\n# else\n#  define YYSIZE_T unsigned int\n# endif\n#endif\n\n#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)\n\n#ifndef YY_\n# if defined YYENABLE_NLS && YYENABLE_NLS\n#  if ENABLE_NLS\n#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */\n#   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)\n#  endif\n# endif\n# ifndef YY_\n#  define YY_(Msgid) Msgid\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE\n# if (defined __GNUC__                                               \\\n      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\\n     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C\n#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)\n# else\n#  define YY_ATTRIBUTE(Spec) /* empty */\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE_PURE\n# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))\n#endif\n\n#ifndef YY_ATTRIBUTE_UNUSED\n# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))\n#endif\n\n#if !defined _Noreturn \\\n     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)\n# if defined _MSC_VER && 1200 <= _MSC_VER\n#  define _Noreturn __declspec (noreturn)\n# else\n#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))\n# endif\n#endif\n\n/* Suppress unused-variable warnings by \"using\" E.  */\n#if ! defined lint || defined __GNUC__\n# define YYUSE(E) ((void) (E))\n#else\n# define YYUSE(E) /* empty */\n#endif\n\n#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__\n/* Suppress an incorrect diagnostic about yylval being uninitialized.  */\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\\n    _Pragma (\"GCC diagnostic push\") \\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n    _Pragma (\"GCC diagnostic pop\")\n#else\n# define YY_INITIAL_VALUE(Value) Value\n#endif\n#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END\n#endif\n#ifndef YY_INITIAL_VALUE\n# define YY_INITIAL_VALUE(Value) /* Nothing. */\n#endif\n\n\n#if ! defined yyoverflow || YYERROR_VERBOSE\n\n/* The parser invokes alloca or malloc; define the necessary symbols.  */\n\n# ifdef YYSTACK_USE_ALLOCA\n#  if YYSTACK_USE_ALLOCA\n#   ifdef __GNUC__\n#    define YYSTACK_ALLOC __builtin_alloca\n#   elif defined __BUILTIN_VA_ARG_INCR\n#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */\n#   elif defined _AIX\n#    define YYSTACK_ALLOC __alloca\n#   elif defined _MSC_VER\n#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */\n#    define alloca _alloca\n#   else\n#    define YYSTACK_ALLOC alloca\n#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS\n#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */\n#     ifndef EXIT_SUCCESS\n#      define EXIT_SUCCESS 0\n#     endif\n#    endif\n#   endif\n#  endif\n# endif\n\n# ifdef YYSTACK_ALLOC\n   /* Pacify GCC's 'empty if-body' warning.  */\n#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n    /* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */\n#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */\n#  endif\n# else\n#  define YYSTACK_ALLOC YYMALLOC\n#  define YYSTACK_FREE YYFREE\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM\n#  endif\n#  if (defined __cplusplus && ! defined EXIT_SUCCESS \\\n       && ! ((defined YYMALLOC || defined malloc) \\\n             && (defined YYFREE || defined free)))\n#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n#   ifndef EXIT_SUCCESS\n#    define EXIT_SUCCESS 0\n#   endif\n#  endif\n#  ifndef YYMALLOC\n#   define YYMALLOC malloc\n#   if ! defined malloc && ! defined EXIT_SUCCESS\nvoid *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n#  ifndef YYFREE\n#   define YYFREE free\n#   if ! defined free && ! defined EXIT_SUCCESS\nvoid free (void *); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n# endif\n#endif /* ! defined yyoverflow || YYERROR_VERBOSE */\n\n\n#if (! defined yyoverflow \\\n     && (! defined __cplusplus \\\n         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))\n\n/* A type that is properly aligned for any stack member.  */\nunion yyalloc\n{\n  yytype_int16 yyss_alloc;\n  YYSTYPE yyvs_alloc;\n};\n\n/* The size of the maximum gap between one aligned stack and the next.  */\n# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)\n\n/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */\n# define YYSTACK_BYTES(N) \\\n     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\\n      + YYSTACK_GAP_MAXIMUM)\n\n# define YYCOPY_NEEDED 1\n\n/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */\n# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\\n    do                                                                  \\\n      {                                                                 \\\n        YYSIZE_T yynewbytes;                                            \\\n        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\\n        Stack = &yyptr->Stack_alloc;                                    \\\n        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\\n        yyptr += yynewbytes / sizeof (*yyptr);                          \\\n      }                                                                 \\\n    while (0)\n\n#endif\n\n#if defined YYCOPY_NEEDED && YYCOPY_NEEDED\n/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */\n# ifndef YYCOPY\n#  if defined __GNUC__ && 1 < __GNUC__\n#   define YYCOPY(Dst, Src, Count) \\\n      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))\n#  else\n#   define YYCOPY(Dst, Src, Count)              \\\n      do                                        \\\n        {                                       \\\n          YYSIZE_T yyi;                         \\\n          for (yyi = 0; yyi < (Count); yyi++)   \\\n            (Dst)[yyi] = (Src)[yyi];            \\\n        }                                       \\\n      while (0)\n#  endif\n# endif\n#endif /* !YYCOPY_NEEDED */\n\n/* YYFINAL -- State number of the termination state.  */\n#define YYFINAL  9\n/* YYLAST -- Last index in YYTABLE.  */\n#define YYLAST   30\n\n/* YYNTOKENS -- Number of terminals.  */\n#define YYNTOKENS  14\n/* YYNNTS -- Number of nonterminals.  */\n#define YYNNTS  10\n/* YYNRULES -- Number of rules.  */\n#define YYNRULES  20\n/* YYNSTATES -- Number of states.  */\n#define YYNSTATES  32\n\n/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */\n#define YYUNDEFTOK  2\n#define YYMAXUTOK   260\n\n#define YYTRANSLATE(YYX)                                                \\\n  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)\n\n/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */\nstatic const yytype_uint8 yytranslate[] =\n{\n       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       8,     9,     2,     2,     2,    12,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,    10,     2,    11,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     6,    13,     7,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,\n       5\n};\n\n#if YYDEBUG\n  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\nstatic const yytype_uint16 yyrline[] =\n{\n       0,   112,   112,   121,   125,   136,   200,   204,   219,   223,\n     232,   246,   245,   258,   281,   313,   335,   355,   359,   374,\n     382\n};\n#endif\n\n#if YYDEBUG || YYERROR_VERBOSE || 0\n/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */\nstatic const char *const yytname[] =\n{\n  \"$end\", \"error\", \"$undefined\", \"_BYTE_\", \"_MASKED_BYTE_\", \"_NUMBER_\",\n  \"'{'\", \"'}'\", \"'('\", \"')'\", \"'['\", \"']'\", \"'-'\", \"'|'\", \"$accept\",\n  \"hex_string\", \"tokens\", \"token_sequence\", \"token_or_range\", \"token\",\n  \"$@1\", \"range\", \"alternatives\", \"byte\", YY_NULLPTR\n};\n#endif\n\n# ifdef YYPRINT\n/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */\nstatic const yytype_uint16 yytoknum[] =\n{\n       0,   256,   257,   258,   259,   260,   123,   125,    40,    41,\n      91,    93,    45,   124\n};\n# endif\n\n#define YYPACT_NINF -11\n\n#define yypact_value_is_default(Yystate) \\\n  (!!((Yystate) == (-11)))\n\n#define YYTABLE_NINF -6\n\n#define yytable_value_is_error(Yytable_value) \\\n  0\n\n  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */\nstatic const yytype_int8 yypact[] =\n{\n      20,    14,    27,   -11,   -11,   -11,    21,    -2,   -11,   -11,\n      14,   -11,    -1,    -2,   -11,    -4,   -11,   -11,    10,    13,\n       9,   -11,     3,   -11,    14,   -11,     2,   -11,   -11,    18,\n     -11,   -11\n};\n\n  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */\nstatic const yytype_uint8 yydefact[] =\n{\n       0,     0,     0,    19,    20,    11,     0,     3,    10,     1,\n       0,     2,     0,     0,     6,     8,     9,    17,     0,     0,\n       0,     7,     8,    12,     0,    13,     0,    16,    18,     0,\n      15,    14\n};\n\n  /* YYPGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yypgoto[] =\n{\n     -11,   -11,   -10,   -11,    17,     8,   -11,   -11,   -11,   -11\n};\n\n  /* YYDEFGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yydefgoto[] =\n{\n      -1,     2,     6,    13,    14,     7,    10,    16,    18,     8\n};\n\n  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */\nstatic const yytype_int8 yytable[] =\n{\n      17,     3,     4,    -4,    19,    -4,     5,    29,    12,    -4,\n      -5,    20,    -5,    30,    28,    15,    -5,     3,     4,    23,\n      27,    22,     5,    24,    25,    26,     1,     9,    11,    31,\n      21\n};\n\nstatic const yytype_uint8 yycheck[] =\n{\n      10,     3,     4,     7,     5,     9,     8,     5,    10,    13,\n       7,    12,     9,    11,    24,     7,    13,     3,     4,     9,\n      11,    13,     8,    13,    11,    12,     6,     0,     7,    11,\n      13\n};\n\n  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */\nstatic const yytype_uint8 yystos[] =\n{\n       0,     6,    15,     3,     4,     8,    16,    19,    23,     0,\n      20,     7,    10,    17,    18,    19,    21,    16,    22,     5,\n      12,    18,    19,     9,    13,    11,    12,    11,    16,     5,\n      11,    11\n};\n\n  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */\nstatic const yytype_uint8 yyr1[] =\n{\n       0,    14,    15,    16,    16,    16,    17,    17,    18,    18,\n      19,    20,    19,    21,    21,    21,    21,    22,    22,    23,\n      23\n};\n\n  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */\nstatic const yytype_uint8 yyr2[] =\n{\n       0,     2,     3,     1,     2,     3,     1,     2,     1,     1,\n       1,     0,     4,     3,     5,     4,     3,     1,     3,     1,\n       1\n};\n\n\n#define yyerrok         (yyerrstatus = 0)\n#define yyclearin       (yychar = YYEMPTY)\n#define YYEMPTY         (-2)\n#define YYEOF           0\n\n#define YYACCEPT        goto yyacceptlab\n#define YYABORT         goto yyabortlab\n#define YYERROR         goto yyerrorlab\n\n\n#define YYRECOVERING()  (!!yyerrstatus)\n\n#define YYBACKUP(Token, Value)                                  \\\ndo                                                              \\\n  if (yychar == YYEMPTY)                                        \\\n    {                                                           \\\n      yychar = (Token);                                         \\\n      yylval = (Value);                                         \\\n      YYPOPSTACK (yylen);                                       \\\n      yystate = *yyssp;                                         \\\n      goto yybackup;                                            \\\n    }                                                           \\\n  else                                                          \\\n    {                                                           \\\n      yyerror (yyscanner, lex_env, YY_(\"syntax error: cannot back up\")); \\\n      YYERROR;                                                  \\\n    }                                                           \\\nwhile (0)\n\n/* Error token number */\n#define YYTERROR        1\n#define YYERRCODE       256\n\n\n\n/* Enable debugging if requested.  */\n#if YYDEBUG\n\n# ifndef YYFPRINTF\n#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYFPRINTF fprintf\n# endif\n\n# define YYDPRINTF(Args)                        \\\ndo {                                            \\\n  if (yydebug)                                  \\\n    YYFPRINTF Args;                             \\\n} while (0)\n\n/* This macro is provided for backward compatibility. */\n#ifndef YY_LOCATION_PRINT\n# define YY_LOCATION_PRINT(File, Loc) ((void) 0)\n#endif\n\n\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\\ndo {                                                                      \\\n  if (yydebug)                                                            \\\n    {                                                                     \\\n      YYFPRINTF (stderr, \"%s \", Title);                                   \\\n      yy_symbol_print (stderr,                                            \\\n                  Type, Value, yyscanner, lex_env); \\\n      YYFPRINTF (stderr, \"\\n\");                                           \\\n    }                                                                     \\\n} while (0)\n\n\n/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/\n\nstatic void\nyy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  FILE *yyo = yyoutput;\n  YYUSE (yyo);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yyvaluep)\n    return;\n# ifdef YYPRINT\n  if (yytype < YYNTOKENS)\n    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);\n# endif\n  YYUSE (yytype);\n}\n\n\n/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/\n\nstatic void\nyy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  YYFPRINTF (yyoutput, \"%s %s (\",\n             yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);\n\n  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env);\n  YYFPRINTF (yyoutput, \")\");\n}\n\n/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/\n\nstatic void\nyy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)\n{\n  YYFPRINTF (stderr, \"Stack now\");\n  for (; yybottom <= yytop; yybottom++)\n    {\n      int yybot = *yybottom;\n      YYFPRINTF (stderr, \" %d\", yybot);\n    }\n  YYFPRINTF (stderr, \"\\n\");\n}\n\n# define YY_STACK_PRINT(Bottom, Top)                            \\\ndo {                                                            \\\n  if (yydebug)                                                  \\\n    yy_stack_print ((Bottom), (Top));                           \\\n} while (0)\n\n\n/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/\n\nstatic void\nyy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  unsigned long int yylno = yyrline[yyrule];\n  int yynrhs = yyr2[yyrule];\n  int yyi;\n  YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n             yyrule - 1, yylno);\n  /* The symbols being reduced.  */\n  for (yyi = 0; yyi < yynrhs; yyi++)\n    {\n      YYFPRINTF (stderr, \"   $%d = \", yyi + 1);\n      yy_symbol_print (stderr,\n                       yystos[yyssp[yyi + 1 - yynrhs]],\n                       &(yyvsp[(yyi + 1) - (yynrhs)])\n                                              , yyscanner, lex_env);\n      YYFPRINTF (stderr, \"\\n\");\n    }\n}\n\n# define YY_REDUCE_PRINT(Rule)          \\\ndo {                                    \\\n  if (yydebug)                          \\\n    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, lex_env); \\\n} while (0)\n\n/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */\nint yydebug;\n#else /* !YYDEBUG */\n# define YYDPRINTF(Args)\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)\n# define YY_STACK_PRINT(Bottom, Top)\n# define YY_REDUCE_PRINT(Rule)\n#endif /* !YYDEBUG */\n\n\n/* YYINITDEPTH -- initial size of the parser's stacks.  */\n#ifndef YYINITDEPTH\n# define YYINITDEPTH 200\n#endif\n\n/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */\n\n#ifndef YYMAXDEPTH\n# define YYMAXDEPTH 10000\n#endif\n\n\n#if YYERROR_VERBOSE\n\n# ifndef yystrlen\n#  if defined __GLIBC__ && defined _STRING_H\n#   define yystrlen strlen\n#  else\n/* Return the length of YYSTR.  */\nstatic YYSIZE_T\nyystrlen (const char *yystr)\n{\n  YYSIZE_T yylen;\n  for (yylen = 0; yystr[yylen]; yylen++)\n    continue;\n  return yylen;\n}\n#  endif\n# endif\n\n# ifndef yystpcpy\n#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE\n#   define yystpcpy stpcpy\n#  else\n/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */\nstatic char *\nyystpcpy (char *yydest, const char *yysrc)\n{\n  char *yyd = yydest;\n  const char *yys = yysrc;\n\n  while ((*yyd++ = *yys++) != '\\0')\n    continue;\n\n  return yyd - 1;\n}\n#  endif\n# endif\n\n# ifndef yytnamerr\n/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */\nstatic YYSIZE_T\nyytnamerr (char *yyres, const char *yystr)\n{\n  if (*yystr == '\"')\n    {\n      YYSIZE_T yyn = 0;\n      char const *yyp = yystr;\n\n      for (;;)\n        switch (*++yyp)\n          {\n          case '\\'':\n          case ',':\n            goto do_not_strip_quotes;\n\n          case '\\\\':\n            if (*++yyp != '\\\\')\n              goto do_not_strip_quotes;\n            /* Fall through.  */\n          default:\n            if (yyres)\n              yyres[yyn] = *yyp;\n            yyn++;\n            break;\n\n          case '\"':\n            if (yyres)\n              yyres[yyn] = '\\0';\n            return yyn;\n          }\n    do_not_strip_quotes: ;\n    }\n\n  if (! yyres)\n    return yystrlen (yystr);\n\n  return yystpcpy (yyres, yystr) - yyres;\n}\n# endif\n\n/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */\nstatic int\nyysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,\n                yytype_int16 *yyssp, int yytoken)\n{\n  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);\n  YYSIZE_T yysize = yysize0;\n  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };\n  /* Internationalized format string. */\n  const char *yyformat = YY_NULLPTR;\n  /* Arguments of yyformat. */\n  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];\n  /* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */\n  int yycount = 0;\n\n  /* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */\n  if (yytoken != YYEMPTY)\n    {\n      int yyn = yypact[*yyssp];\n      yyarg[yycount++] = yytname[yytoken];\n      if (!yypact_value_is_default (yyn))\n        {\n          /* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */\n          int yyxbegin = yyn < 0 ? -yyn : 0;\n          /* Stay within bounds of both yycheck and yytname.  */\n          int yychecklim = YYLAST - yyn + 1;\n          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;\n          int yyx;\n\n          for (yyx = yyxbegin; yyx < yyxend; ++yyx)\n            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR\n                && !yytable_value_is_error (yytable[yyx + yyn]))\n              {\n                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)\n                  {\n                    yycount = 1;\n                    yysize = yysize0;\n                    break;\n                  }\n                yyarg[yycount++] = yytname[yyx];\n                {\n                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);\n                  if (! (yysize <= yysize1\n                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n                    return 2;\n                  yysize = yysize1;\n                }\n              }\n        }\n    }\n\n  switch (yycount)\n    {\n# define YYCASE_(N, S)                      \\\n      case N:                               \\\n        yyformat = S;                       \\\n      break\n      YYCASE_(0, YY_(\"syntax error\"));\n      YYCASE_(1, YY_(\"syntax error, unexpected %s\"));\n      YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));\n      YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));\n      YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));\n      YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));\n# undef YYCASE_\n    }\n\n  {\n    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);\n    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n      return 2;\n    yysize = yysize1;\n  }\n\n  if (*yymsg_alloc < yysize)\n    {\n      *yymsg_alloc = 2 * yysize;\n      if (! (yysize <= *yymsg_alloc\n             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))\n        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;\n      return 1;\n    }\n\n  /* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */\n  {\n    char *yyp = *yymsg;\n    int yyi = 0;\n    while ((*yyp = *yyformat) != '\\0')\n      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)\n        {\n          yyp += yytnamerr (yyp, yyarg[yyi++]);\n          yyformat += 2;\n        }\n      else\n        {\n          yyp++;\n          yyformat++;\n        }\n  }\n  return 0;\n}\n#endif /* YYERROR_VERBOSE */\n\n/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/\n\nstatic void\nyydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n  YYUSE (yyvaluep);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yymsg)\n    yymsg = \"Deleting\";\n  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  switch (yytype)\n    {\n          case 16: /* tokens  */\n#line 101 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1030 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 17: /* token_sequence  */\n#line 102 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1036 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 18: /* token_or_range  */\n#line 103 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1042 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 19: /* token  */\n#line 104 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1048 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 21: /* range  */\n#line 107 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1054 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 22: /* alternatives  */\n#line 106 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1060 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 23: /* byte  */\n#line 105 \"hex_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1066 \"hex_grammar.c\" /* yacc.c:1257  */\n        break;\n\n\n      default:\n        break;\n    }\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n}\n\n\n\n\n/*----------.\n| yyparse.  |\n`----------*/\n\nint\nyyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)\n{\n/* The lookahead symbol.  */\nint yychar;\n\n\n/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */\nYY_INITIAL_VALUE (static YYSTYPE yyval_default;)\nYYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n\n    /* Number of syntax errors so far.  */\n    int yynerrs;\n\n    int yystate;\n    /* Number of tokens to shift before error messages enabled.  */\n    int yyerrstatus;\n\n    /* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */\n\n    /* The state stack.  */\n    yytype_int16 yyssa[YYINITDEPTH];\n    yytype_int16 *yyss;\n    yytype_int16 *yyssp;\n\n    /* The semantic value stack.  */\n    YYSTYPE yyvsa[YYINITDEPTH];\n    YYSTYPE *yyvs;\n    YYSTYPE *yyvsp;\n\n    YYSIZE_T yystacksize;\n\n  int yyn;\n  int yyresult;\n  /* Lookahead token as an internal (translated) token number.  */\n  int yytoken = 0;\n  /* The variables used to return semantic value and location from the\n     action routines.  */\n  YYSTYPE yyval;\n\n#if YYERROR_VERBOSE\n  /* Buffer for error messages, and its allocated size.  */\n  char yymsgbuf[128];\n  char *yymsg = yymsgbuf;\n  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;\n#endif\n\n#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))\n\n  /* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */\n  int yylen = 0;\n\n  yyssp = yyss = yyssa;\n  yyvsp = yyvs = yyvsa;\n  yystacksize = YYINITDEPTH;\n\n  YYDPRINTF ((stderr, \"Starting parse\\n\"));\n\n  yystate = 0;\n  yyerrstatus = 0;\n  yynerrs = 0;\n  yychar = YYEMPTY; /* Cause a token to be read.  */\n  goto yysetstate;\n\n/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/\n yynewstate:\n  /* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */\n  yyssp++;\n\n yysetstate:\n  *yyssp = yystate;\n\n  if (yyss + yystacksize - 1 <= yyssp)\n    {\n      /* Get the current used size of the three stacks, in elements.  */\n      YYSIZE_T yysize = yyssp - yyss + 1;\n\n#ifdef yyoverflow\n      {\n        /* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */\n        YYSTYPE *yyvs1 = yyvs;\n        yytype_int16 *yyss1 = yyss;\n\n        /* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */\n        yyoverflow (YY_(\"memory exhausted\"),\n                    &yyss1, yysize * sizeof (*yyssp),\n                    &yyvs1, yysize * sizeof (*yyvsp),\n                    &yystacksize);\n\n        yyss = yyss1;\n        yyvs = yyvs1;\n      }\n#else /* no yyoverflow */\n# ifndef YYSTACK_RELOCATE\n      goto yyexhaustedlab;\n# else\n      /* Extend the stack our own way.  */\n      if (YYMAXDEPTH <= yystacksize)\n        goto yyexhaustedlab;\n      yystacksize *= 2;\n      if (YYMAXDEPTH < yystacksize)\n        yystacksize = YYMAXDEPTH;\n\n      {\n        yytype_int16 *yyss1 = yyss;\n        union yyalloc *yyptr =\n          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));\n        if (! yyptr)\n          goto yyexhaustedlab;\n        YYSTACK_RELOCATE (yyss_alloc, yyss);\n        YYSTACK_RELOCATE (yyvs_alloc, yyvs);\n#  undef YYSTACK_RELOCATE\n        if (yyss1 != yyssa)\n          YYSTACK_FREE (yyss1);\n      }\n# endif\n#endif /* no yyoverflow */\n\n      yyssp = yyss + yysize - 1;\n      yyvsp = yyvs + yysize - 1;\n\n      YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",\n                  (unsigned long int) yystacksize));\n\n      if (yyss + yystacksize - 1 <= yyssp)\n        YYABORT;\n    }\n\n  YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));\n\n  if (yystate == YYFINAL)\n    YYACCEPT;\n\n  goto yybackup;\n\n/*-----------.\n| yybackup.  |\n`-----------*/\nyybackup:\n\n  /* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */\n\n  /* First try to decide what to do without reference to lookahead token.  */\n  yyn = yypact[yystate];\n  if (yypact_value_is_default (yyn))\n    goto yydefault;\n\n  /* Not known => get a lookahead token if don't already have one.  */\n\n  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */\n  if (yychar == YYEMPTY)\n    {\n      YYDPRINTF ((stderr, \"Reading a token: \"));\n      yychar = yylex (&yylval, yyscanner, lex_env);\n    }\n\n  if (yychar <= YYEOF)\n    {\n      yychar = yytoken = YYEOF;\n      YYDPRINTF ((stderr, \"Now at end of input.\\n\"));\n    }\n  else\n    {\n      yytoken = YYTRANSLATE (yychar);\n      YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);\n    }\n\n  /* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */\n  yyn += yytoken;\n  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)\n    goto yydefault;\n  yyn = yytable[yyn];\n  if (yyn <= 0)\n    {\n      if (yytable_value_is_error (yyn))\n        goto yyerrlab;\n      yyn = -yyn;\n      goto yyreduce;\n    }\n\n  /* Count tokens shifted since error; after three, turn off error\n     status.  */\n  if (yyerrstatus)\n    yyerrstatus--;\n\n  /* Shift the lookahead token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);\n\n  /* Discard the shifted token.  */\n  yychar = YYEMPTY;\n\n  yystate = yyn;\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n  goto yynewstate;\n\n\n/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/\nyydefault:\n  yyn = yydefact[yystate];\n  if (yyn == 0)\n    goto yyerrlab;\n  goto yyreduce;\n\n\n/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/\nyyreduce:\n  /* yyn is the number of a rule to reduce with.  */\n  yylen = yyr2[yyn];\n\n  /* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */\n  yyval = yyvsp[1-yylen];\n\n\n  YY_REDUCE_PRINT (yyn);\n  switch (yyn)\n    {\n        case 2:\n#line 113 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = (yyvsp[-1].re_node);\n      }\n#line 1337 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 3:\n#line 122 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1345 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 4:\n#line 126 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        incr_ast_levels();\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1360 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 5:\n#line 137 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        RE_NODE* new_concat;\n        RE_NODE* leftmost_concat = NULL;\n        RE_NODE* leftmost_node = (yyvsp[-1].re_node);\n\n        incr_ast_levels();\n\n        (yyval.re_node) = NULL;\n\n        /*\n        Some portions of the code (i.e: yr_re_split_at_chaining_point)\n        expect a left-unbalanced tree where the right child of a concat node\n        can't be another concat node. A concat node must be always the left\n        child of its parent if the parent is also a concat. For this reason\n        the can't simply create two new concat nodes arranged like this:\n\n                concat\n                 /   \\\n                /     \\\n            token's    \\\n            subtree  concat\n                     /    \\\n                    /      \\\n                   /        \\\n           token_sequence's  token's\n               subtree       subtree\n\n        Instead we must insert the subtree for the first token as the\n        leftmost node of the token_sequence subtree.\n        */\n\n        while (leftmost_node->type == RE_NODE_CONCAT)\n        {\n          leftmost_concat = leftmost_node;\n          leftmost_node = leftmost_node->left;\n        }\n\n        new_concat = yr_re_node_create(\n            RE_NODE_CONCAT, (yyvsp[-2].re_node), leftmost_node);\n\n        if (new_concat != NULL)\n        {\n          if (leftmost_concat != NULL)\n          {\n            leftmost_concat->left = new_concat;\n            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n          }\n          else\n          {\n            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, new_concat, (yyvsp[0].re_node));\n          }\n        }\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1424 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 6:\n#line 201 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1432 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 7:\n#line 205 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        incr_ast_levels();\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1447 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 8:\n#line 220 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1455 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 9:\n#line 224 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1464 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 10:\n#line 233 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        lex_env->token_count++;\n\n        if (lex_env->token_count > MAX_HEX_STRING_TOKENS)\n        {\n          yr_re_node_destroy((yyvsp[0].re_node));\n          yyerror(yyscanner, lex_env, \"string too long\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1481 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 11:\n#line 246 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        lex_env->inside_or++;\n      }\n#line 1489 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 12:\n#line 250 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        (yyval.re_node) = (yyvsp[-1].re_node);\n        lex_env->inside_or--;\n      }\n#line 1498 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 13:\n#line 259 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        if ((yyvsp[-1].integer) <= 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump length\");\n          YYABORT;\n        }\n\n        if (lex_env->inside_or && (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD)\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (int) (yyvsp[-1].integer);\n        (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n      }\n#line 1525 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 14:\n#line 282 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        if (lex_env->inside_or &&\n            ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||\n             (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD) )\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n\n          YYABORT;\n        }\n\n        if ((yyvsp[-3].integer) < 0 || (yyvsp[-1].integer) < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        if ((yyvsp[-3].integer) > (yyvsp[-1].integer))\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump range\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (int) (yyvsp[-3].integer);\n        (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n      }\n#line 1561 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 15:\n#line 314 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        if ((yyvsp[-2].integer) < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (int) (yyvsp[-2].integer);\n        (yyval.re_node)->end = INT_MAX;\n      }\n#line 1587 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 16:\n#line 336 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = 0;\n        (yyval.re_node)->end = INT_MAX;\n      }\n#line 1607 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 17:\n#line 356 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n          (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1615 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 18:\n#line 360 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        mark_as_not_fast_regexp();\n        incr_ast_levels();\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1631 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 19:\n#line 375 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->value = (int) (yyvsp[0].integer);\n      }\n#line 1643 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n  case 20:\n#line 383 \"hex_grammar.y\" /* yacc.c:1661  */\n    {\n        uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);\n\n        if (mask == 0x00)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n        }\n        else\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);\n\n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n          (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;\n          (yyval.re_node)->mask = mask;\n        }\n      }\n#line 1667 \"hex_grammar.c\" /* yacc.c:1661  */\n    break;\n\n\n#line 1671 \"hex_grammar.c\" /* yacc.c:1661  */\n      default: break;\n    }\n  /* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */\n  YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\n\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n\n  *++yyvsp = yyval;\n\n  /* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */\n\n  yyn = yyr1[yyn];\n\n  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;\n  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)\n    yystate = yytable[yystate];\n  else\n    yystate = yydefgoto[yyn - YYNTOKENS];\n\n  goto yynewstate;\n\n\n/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/\nyyerrlab:\n  /* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */\n  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);\n\n  /* If not already recovering from an error, report this error.  */\n  if (!yyerrstatus)\n    {\n      ++yynerrs;\n#if ! YYERROR_VERBOSE\n      yyerror (yyscanner, lex_env, YY_(\"syntax error\"));\n#else\n# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\\n                                        yyssp, yytoken)\n      {\n        char const *yymsgp = YY_(\"syntax error\");\n        int yysyntax_error_status;\n        yysyntax_error_status = YYSYNTAX_ERROR;\n        if (yysyntax_error_status == 0)\n          yymsgp = yymsg;\n        else if (yysyntax_error_status == 1)\n          {\n            if (yymsg != yymsgbuf)\n              YYSTACK_FREE (yymsg);\n            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);\n            if (!yymsg)\n              {\n                yymsg = yymsgbuf;\n                yymsg_alloc = sizeof yymsgbuf;\n                yysyntax_error_status = 2;\n              }\n            else\n              {\n                yysyntax_error_status = YYSYNTAX_ERROR;\n                yymsgp = yymsg;\n              }\n          }\n        yyerror (yyscanner, lex_env, yymsgp);\n        if (yysyntax_error_status == 2)\n          goto yyexhaustedlab;\n      }\n# undef YYSYNTAX_ERROR\n#endif\n    }\n\n\n\n  if (yyerrstatus == 3)\n    {\n      /* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */\n\n      if (yychar <= YYEOF)\n        {\n          /* Return failure if at end of input.  */\n          if (yychar == YYEOF)\n            YYABORT;\n        }\n      else\n        {\n          yydestruct (\"Error: discarding\",\n                      yytoken, &yylval, yyscanner, lex_env);\n          yychar = YYEMPTY;\n        }\n    }\n\n  /* Else will try to reuse lookahead token after shifting the error\n     token.  */\n  goto yyerrlab1;\n\n\n/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/\nyyerrorlab:\n\n  /* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */\n  if (/*CONSTCOND*/ 0)\n     goto yyerrorlab;\n\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n  yystate = *yyssp;\n  goto yyerrlab1;\n\n\n/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/\nyyerrlab1:\n  yyerrstatus = 3;      /* Each real token shifted decrements this.  */\n\n  for (;;)\n    {\n      yyn = yypact[yystate];\n      if (!yypact_value_is_default (yyn))\n        {\n          yyn += YYTERROR;\n          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)\n            {\n              yyn = yytable[yyn];\n              if (0 < yyn)\n                break;\n            }\n        }\n\n      /* Pop the current state because it cannot handle the error token.  */\n      if (yyssp == yyss)\n        YYABORT;\n\n\n      yydestruct (\"Error: popping\",\n                  yystos[yystate], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n      yystate = *yyssp;\n      YY_STACK_PRINT (yyss, yyssp);\n    }\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n\n  /* Shift the error token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yystos[yyn], yyvsp, yylsp);\n\n  yystate = yyn;\n  goto yynewstate;\n\n\n/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/\nyyacceptlab:\n  yyresult = 0;\n  goto yyreturn;\n\n/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/\nyyabortlab:\n  yyresult = 1;\n  goto yyreturn;\n\n#if !defined yyoverflow || YYERROR_VERBOSE\n/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/\nyyexhaustedlab:\n  yyerror (yyscanner, lex_env, YY_(\"memory exhausted\"));\n  yyresult = 2;\n  /* Fall through.  */\n#endif\n\nyyreturn:\n  if (yychar != YYEMPTY)\n    {\n      /* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */\n      yytoken = YYTRANSLATE (yychar);\n      yydestruct (\"Cleanup: discarding lookahead\",\n                  yytoken, &yylval, yyscanner, lex_env);\n    }\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */\n  YYPOPSTACK (yylen);\n  YY_STACK_PRINT (yyss, yyssp);\n  while (yyssp != yyss)\n    {\n      yydestruct (\"Cleanup: popping\",\n                  yystos[*yyssp], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n    }\n#ifndef yyoverflow\n  if (yyss != yyssa)\n    YYSTACK_FREE (yyss);\n#endif\n#if YYERROR_VERBOSE\n  if (yymsg != yymsgbuf)\n    YYSTACK_FREE (yymsg);\n#endif\n  return yyresult;\n}\n#line 404 \"hex_grammar.y\" /* yacc.c:1906  */\n\n", "/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison interface for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n#ifndef YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n# define YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int hex_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _BYTE_ = 258,\n    _MASKED_BYTE_ = 259,\n    _NUMBER_ = 260\n  };\n#endif\n/* Tokens.  */\n#define _BYTE_ 258\n#define _MASKED_BYTE_ 259\n#define _NUMBER_ 260\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 85 \"hex_grammar.y\" /* yacc.c:1915  */\n\n  int64_t integer;\n  RE_NODE *re_node;\n\n#line 69 \"hex_grammar.h\" /* yacc.c:1915  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED  */\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n%{\n\n#include <string.h>\n#include <limits.h>\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/hex_lexer.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/error.h>\n\n\n#define STR_EXPAND(tok) #tok\n#define STR(tok) STR_EXPAND(tok)\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define incr_ast_levels() \\\n    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n    { \\\n      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\\n      YYABORT; \\\n    }\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n%}\n\n%name-prefix=\"hex_yy\"\n%pure-parser\n\n%parse-param {void *yyscanner}\n%parse-param {HEX_LEX_ENVIRONMENT *lex_env}\n\n%lex-param {yyscan_t yyscanner}\n%lex-param {HEX_LEX_ENVIRONMENT *lex_env}\n\n%union {\n  int64_t integer;\n  RE_NODE *re_node;\n}\n\n%token <integer> _BYTE_\n%token <integer> _MASKED_BYTE_\n%token <integer> _NUMBER_\n\n%type <re_node> tokens\n%type <re_node> token_sequence\n%type <re_node> token_or_range\n%type <re_node> token byte\n%type <re_node> alternatives\n%type <re_node> range\n\n%destructor { yr_re_node_destroy($$); } tokens\n%destructor { yr_re_node_destroy($$); } token_sequence\n%destructor { yr_re_node_destroy($$); } token_or_range\n%destructor { yr_re_node_destroy($$); } token\n%destructor { yr_re_node_destroy($$); } byte\n%destructor { yr_re_node_destroy($$); } alternatives\n%destructor { yr_re_node_destroy($$); } range\n\n%%\n\nhex_string\n    : '{' tokens '}'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = $2;\n      }\n    ;\n\n\ntokens\n    : token\n      {\n        $$ = $1;\n      }\n    | token token\n      {\n        incr_ast_levels();\n\n        $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | token token_sequence token\n      {\n        RE_NODE* new_concat;\n        RE_NODE* leftmost_concat = NULL;\n        RE_NODE* leftmost_node = $2;\n\n        incr_ast_levels();\n\n        $$ = NULL;\n\n        /*\n        Some portions of the code (i.e: yr_re_split_at_chaining_point)\n        expect a left-unbalanced tree where the right child of a concat node\n        can't be another concat node. A concat node must be always the left\n        child of its parent if the parent is also a concat. For this reason\n        the can't simply create two new concat nodes arranged like this:\n\n                concat\n                 /   \\\n                /     \\\n            token's    \\\n            subtree  concat\n                     /    \\\n                    /      \\\n                   /        \\\n           token_sequence's  token's\n               subtree       subtree\n\n        Instead we must insert the subtree for the first token as the\n        leftmost node of the token_sequence subtree.\n        */\n\n        while (leftmost_node->type == RE_NODE_CONCAT)\n        {\n          leftmost_concat = leftmost_node;\n          leftmost_node = leftmost_node->left;\n        }\n\n        new_concat = yr_re_node_create(\n            RE_NODE_CONCAT, $1, leftmost_node);\n\n        if (new_concat != NULL)\n        {\n          if (leftmost_concat != NULL)\n          {\n            leftmost_concat->left = new_concat;\n            $$ = yr_re_node_create(RE_NODE_CONCAT, $2, $3);\n          }\n          else\n          {\n            $$ = yr_re_node_create(RE_NODE_CONCAT, new_concat, $3);\n          }\n        }\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n        DESTROY_NODE_IF($$ == NULL, $3);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\n\ntoken_sequence\n    : token_or_range\n      {\n        $$ = $1;\n      }\n    | token_sequence token_or_range\n      {\n        incr_ast_levels();\n\n        $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\n\ntoken_or_range\n    : token\n      {\n        $$ = $1;\n      }\n    |  range\n      {\n        $$ = $1;\n        $$->greedy = FALSE;\n      }\n    ;\n\n\ntoken\n    : byte\n      {\n        lex_env->token_count++;\n\n        if (lex_env->token_count > MAX_HEX_STRING_TOKENS)\n        {\n          yr_re_node_destroy($1);\n          yyerror(yyscanner, lex_env, \"string too long\");\n          YYABORT;\n        }\n\n        $$ = $1;\n      }\n    | '('\n      {\n        lex_env->inside_or++;\n      }\n      alternatives ')'\n      {\n        $$ = $3;\n        lex_env->inside_or--;\n      }\n    ;\n\n\nrange\n    : '[' _NUMBER_ ']'\n      {\n        if ($2 <= 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump length\");\n          YYABORT;\n        }\n\n        if (lex_env->inside_or && $2 > STRING_CHAINING_THRESHOLD)\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = (int) $2;\n        $$->end = (int) $2;\n      }\n    | '[' _NUMBER_ '-' _NUMBER_ ']'\n      {\n        if (lex_env->inside_or &&\n            ($2 > STRING_CHAINING_THRESHOLD ||\n             $4 > STRING_CHAINING_THRESHOLD) )\n        {\n          yyerror(yyscanner, lex_env, \"jumps over \"\n              STR(STRING_CHAINING_THRESHOLD)\n              \" now allowed inside alternation (|)\");\n\n          YYABORT;\n        }\n\n        if ($2 < 0 || $4 < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        if ($2 > $4)\n        {\n          yyerror(yyscanner, lex_env, \"invalid jump range\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = (int) $2;\n        $$->end = (int) $4;\n      }\n    | '[' _NUMBER_ '-' ']'\n      {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        if ($2 < 0)\n        {\n          yyerror(yyscanner, lex_env, \"invalid negative jump length\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = (int) $2;\n        $$->end = INT_MAX;\n      }\n    | '[' '-' ']'\n      {\n        if (lex_env->inside_or)\n        {\n          yyerror(yyscanner, lex_env,\n              \"unbounded jumps not allowed inside alternation (|)\");\n          YYABORT;\n        }\n\n        $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = 0;\n        $$->end = INT_MAX;\n      }\n    ;\n\n\nalternatives\n    : tokens\n      {\n          $$ = $1;\n      }\n    | alternatives '|' tokens\n      {\n        mark_as_not_fast_regexp();\n        incr_ast_levels();\n\n        $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $3);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nbyte\n    : _BYTE_\n      {\n        $$ = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->value = (int) $1;\n      }\n    | _MASKED_BYTE_\n      {\n        uint8_t mask = (uint8_t) ($1 >> 8);\n\n        if (mask == 0x00)\n        {\n          $$ = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n          ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n        }\n        else\n        {\n          $$ = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);\n\n          ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n          $$->value = $1 & 0xFF;\n          $$->mask = mask;\n        }\n      }\n    ;\n\n%%\n"], "filenames": ["libyara/hex_grammar.c", "libyara/hex_grammar.h", "libyara/hex_grammar.y"], "buggy_code_start_loc": [95, 63, 53], "buggy_code_end_loc": [1886, 69, 348], "fixing_code_start_loc": [96, 63, 54], "fixing_code_end_loc": [1900, 69, 363], "type": "CWE-674", "message": "libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule (involving hex strings) that is mishandled in the _yr_re_emit function, a different vulnerability than CVE-2017-9304.", "other": {"cve": {"id": "CVE-2017-9438", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-05T17:29:00.183", "lastModified": "2021-05-06T14:15:07.577", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule (involving hex strings) that is mishandled in the _yr_re_emit function, a different vulnerability than CVE-2017-9304."}, {"lang": "es", "value": "En el archivo libyara/re.c en el m\u00f3dulo regexp en YARA versi\u00f3n 3.5.0, permite a los atacantes remotos causar una denegaci\u00f3n de servicio (consumo de pila) por medio de una regla especialmente dise\u00f1ada (involucrando a cadenas hexadecimales) que se maneja inapropiadamente en la funci\u00f3n _yr_re_emit, una vulnerabilidad diferente que CVE- 2017-9304."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-674"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:virustotal:yara:3.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "0254F781-4B89-4557-8F17-1F228A3A8216"}]}]}], "references": [{"url": "https://github.com/VirusTotal/yara/commit/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/VirusTotal/yara/issues/674", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FKNXSH5ERG6NELTXCYVJLUPJJJ2TNEBD/", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XXM224OLGI6KAOROLDPPGGCZ2OQVQ6HH/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/VirusTotal/yara/commit/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7"}}