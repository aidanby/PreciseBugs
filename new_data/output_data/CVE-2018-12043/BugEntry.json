{"buggy_code": ["<?php\n\n/**\n * @package content\n */\n\n/**\n * Developers can create new Frontend pages from this class. It provides\n * an index view of all the pages in this Symphony install as well as the\n * forms for the creation/editing of a Page\n */\n\nclass contentBlueprintsPages extends AdministrationPage\n{\n    public $_errors = array();\n    protected $_hilights = array();\n\n    public function insertBreadcrumbsUsingPageIdentifier($page_id, $preserve_last = true)\n    {\n        if ($page_id == 0) {\n            return $this->insertBreadcrumbs(\n                array(Widget::Anchor(__('Pages'), SYMPHONY_URL . '/blueprints/pages/'))\n            );\n        }\n\n        $pages = PageManager::resolvePage($page_id, 'handle');\n\n        foreach ($pages as &$page) {\n            // If we are viewing the Page Editor, the Breadcrumbs should link\n            // to the parent's Page Editor.\n            if ($this->_context[0] == 'edit') {\n                $page = Widget::Anchor(\n                    PageManager::fetchTitleFromHandle($page),\n                    SYMPHONY_URL . '/blueprints/pages/edit/' . PageManager::fetchIDFromHandle($page) . '/'\n                );\n\n                // If the pages index is nested, the Breadcrumb should link to the\n                // Pages Index filtered by parent\n            } elseif (Symphony::Configuration()->get('pages_table_nest_children', 'symphony') == 'yes') {\n                $page = Widget::Anchor(\n                    PageManager::fetchTitleFromHandle($page),\n                    SYMPHONY_URL . '/blueprints/pages/?parent=' . PageManager::fetchIDFromHandle($page)\n                );\n\n                // If there is no nesting on the Pages Index, the breadcrumb is\n                // not a link, just plain text\n            } else {\n                $page = new XMLElement('span', PageManager::fetchTitleFromHandle($page));\n            }\n        }\n\n        if (!$preserve_last) {\n            array_pop($pages);\n        }\n\n        $this->insertBreadcrumbs(array_merge(\n            array(Widget::Anchor(__('Pages'), SYMPHONY_URL . '/blueprints/pages/')),\n            $pages\n        ));\n    }\n\n    public function __viewIndex()\n    {\n        $this->setPageType('table');\n        $this->setTitle(__('%1$s &ndash; %2$s', array(__('Pages'), __('Symphony'))));\n\n        $nesting = Symphony::Configuration()->get('pages_table_nest_children', 'symphony') == 'yes';\n\n        if ($nesting && isset($_GET['parent']) && is_numeric($_GET['parent'])) {\n            $parent = PageManager::fetchPageByID((int)$_GET['parent'], array('title', 'id'));\n        }\n\n        $this->appendSubheading(isset($parent) ? $parent['title'] : __('Pages'), Widget::Anchor(\n            __('Create New'), Administration::instance()->getCurrentPageURL() . 'new/' . ($nesting && isset($parent) ? \"?parent={$parent['id']}\" : null),\n            __('Create a new page'), 'create button', null, array('accesskey' => 'c')\n        ));\n\n        if (isset($parent)) {\n            $this->insertBreadcrumbsUsingPageIdentifier($parent['id'], false);\n        }\n\n        $aTableHead = array(\n            array(__('Name'), 'col'),\n            array(__('Template'), 'col'),\n            array('<abbr title=\"' . __('Universal Resource Locator') . '\">' . __('URL') . '</abbr>', 'col'),\n            array(__('Parameters'), 'col'),\n            array(__('Type'), 'col')\n        );\n        $aTableBody = array();\n\n        if ($nesting) {\n            $aTableHead[] = array(__('Children'), 'col');\n            $where = array(\n                'parent ' . (isset($parent) ? \" = {$parent['id']} \" : ' IS NULL ')\n            );\n        } else {\n            $where = array();\n        }\n\n        $pages = PageManager::fetch(true, array('*'), $where);\n\n        if (!is_array($pages) || empty($pages)) {\n            $aTableBody = array(Widget::TableRow(array(\n                Widget::TableData(__('None found.'), 'inactive', null, count($aTableHead))\n            ), 'odd'));\n        } else {\n            foreach ($pages as $page) {\n                $class = array();\n\n                $page_title = ($nesting ? $page['title'] : PageManager::resolvePageTitle($page['id']));\n                $page_url = URL . '/' . PageManager::resolvePagePath($page['id']) . '/';\n                $page_edit_url = Administration::instance()->getCurrentPageURL() . 'edit/' . $page['id'] . '/';\n                $page_template = PageManager::createFilePath($page['path'], $page['handle']);\n\n                $col_title = Widget::TableData(Widget::Anchor($page_title, $page_edit_url, $page['handle']));\n                $col_title->appendChild(Widget::Label(__('Select Page %s', array($page_title)), null, 'accessible', null, array(\n                    'for' => 'page-' . $page['id']\n                )));\n                $col_title->appendChild(Widget::Input('items['.$page['id'].']', 'on', 'checkbox', array(\n                    'id' => 'page-' . $page['id']\n                )));\n\n                $col_template = Widget::TableData($page_template . '.xsl');\n\n                $col_url = Widget::TableData(Widget::Anchor($page_url, $page_url));\n\n                if ($page['params']) {\n                    $col_params = Widget::TableData(trim($page['params'], '/'));\n                } else {\n                    $col_params = Widget::TableData(__('None'), 'inactive');\n                }\n\n                if (!empty($page['type'])) {\n                    $col_types = Widget::TableData(implode(', ', $page['type']));\n                } else {\n                    $col_types = Widget::TableData(__('None'), 'inactive');\n                }\n\n                if (in_array($page['id'], $this->_hilights)) {\n                    $class[] = 'failed';\n                }\n\n                $columns = array($col_title, $col_template, $col_url, $col_params, $col_types);\n\n                if ($nesting) {\n                    if (PageManager::hasChildPages($page['id'])) {\n                        $col_children = Widget::TableData(\n                            Widget::Anchor(PageManager::getChildPagesCount($page['id']) . ' &rarr;',\n                            SYMPHONY_URL . '/blueprints/pages/?parent=' . $page['id'])\n                        );\n                    } else {\n                        $col_children = Widget::TableData(__('None'), 'inactive');\n                    }\n\n                    $columns[] = $col_children;\n                }\n\n                $aTableBody[] = Widget::TableRow(\n                    $columns,\n                    implode(' ', $class)\n                );\n            }\n        }\n\n        $table = Widget::Table(\n            Widget::TableHead($aTableHead), null,\n            Widget::TableBody($aTableBody), 'orderable selectable',\n            null, array('role' => 'directory', 'aria-labelledby' => 'symphony-subheading', 'data-interactive' => 'data-interactive')\n        );\n\n        $this->Form->appendChild($table);\n\n        $version = new XMLElement('p', 'Symphony ' . Symphony::Configuration()->get('version', 'symphony'), array(\n            'id' => 'version'\n        ));\n        $this->Form->appendChild($version);\n\n        $tableActions = new XMLElement('div');\n        $tableActions->setAttribute('class', 'actions');\n\n        $options = array(\n            array(null, false, __('With Selected...')),\n            array('delete', false, __('Delete'), 'confirm', null, array(\n                'data-message' => __('Are you sure you want to delete the selected pages?')\n            ))\n        );\n\n        /**\n         * Allows an extension to modify the existing options for this page's\n         * With Selected menu. If the `$options` parameter is an empty array,\n         * the 'With Selected' menu will not be rendered.\n         *\n         * @delegate AddCustomActions\n         * @since Symphony 2.3.2\n         * @param string $context\n         * '/blueprints/pages/'\n         * @param array $options\n         *  An array of arrays, where each child array represents an option\n         *  in the With Selected menu. Options should follow the same format\n         *  expected by `Widget::__SelectBuildOption`. Passed by reference.\n         */\n        Symphony::ExtensionManager()->notifyMembers('AddCustomActions', '/blueprints/pages/', array(\n            'options' => &$options\n        ));\n\n        if (!empty($options)) {\n            $tableActions->appendChild(Widget::Apply($options));\n            $this->Form->appendChild($tableActions);\n        }\n    }\n\n    public function __viewNew()\n    {\n        $this->__viewEdit();\n    }\n\n    public function __viewEdit()\n    {\n        $this->setPageType('form');\n        $fields = array(\"title\"=>null, \"handle\"=>null, \"parent\"=>null, \"params\"=>null, \"type\"=>null, \"data_sources\"=>null);\n        $existing = $fields;\n        $canonical_link = '/blueprints/pages/';\n        $nesting = (Symphony::Configuration()->get('pages_table_nest_children', 'symphony') == 'yes');\n\n        // Verify page exists:\n        if ($this->_context[0] === 'edit') {\n            if (!$page_id = (int)$this->_context[1]) {\n                redirect(SYMPHONY_URL . '/blueprints/pages/');\n            }\n\n            $existing = PageManager::fetchPageByID($page_id);\n            $canonical_link .= 'edit/' . $page_id . '/';\n\n            if (!$existing) {\n                Administration::instance()->errorPageNotFound();\n            } else {\n                $existing['type'] = PageManager::fetchPageTypes($page_id);\n            }\n        } else {\n            $canonical_link .= 'new/';\n        }\n\n        // Status message:\n        if (isset($this->_context[2])) {\n            $flag = $this->_context[2];\n            $parent_link_suffix = $message = '';\n            $time = Widget::Time();\n\n            if (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n                $parent_link_suffix = \"?parent=\" . $_REQUEST['parent'];\n            } elseif ($nesting && isset($existing) && !is_null($existing['parent'])) {\n                $parent_link_suffix = '?parent=' . $existing['parent'];\n            }\n\n            switch ($flag) {\n                case 'saved':\n                    $message = __('Page updated at %s.', array($time->generate()));\n                    break;\n                case 'created':\n                    $message = __('Page created at %s.', array($time->generate()));\n            }\n\n            $this->pageAlert(\n                $message\n                . ' <a href=\"' . SYMPHONY_URL . '/blueprints/pages/new/' . $parent_link_suffix . '\" accesskey=\"c\">'\n                . __('Create another?')\n                . '</a> <a href=\"' . SYMPHONY_URL . '/blueprints/pages/\" accesskey=\"a\">'\n                . __('View all Pages')\n                . '</a>',\n                Alert::SUCCESS\n            );\n        }\n\n        // Find values:\n        if (isset($_POST['fields'])) {\n            $fields = $_POST['fields'];\n        } elseif ($this->_context[0] == 'edit') {\n            $fields = $existing;\n\n            if (!is_null($fields['type'])) {\n                $fields['type'] = implode(', ', $fields['type']);\n            }\n\n            $fields['data_sources'] = preg_split('/,/i', $fields['data_sources'], -1, PREG_SPLIT_NO_EMPTY);\n            $fields['events'] = preg_split('/,/i', $fields['events'], -1, PREG_SPLIT_NO_EMPTY);\n        } elseif (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n            $fields['parent'] = $_REQUEST['parent'];\n            $canonical_link .= '?parent=' . urlencode($_REQUEST['parent']);\n        }\n\n        $title = $fields['title'];\n\n        if (trim($title) == '') {\n            $title = $existing['title'];\n        }\n\n        $this->setTitle(__(\n            ($title ? '%1$s &ndash; %2$s &ndash; %3$s' : '%2$s &ndash; %3$s'),\n            array(\n                $title,\n                __('Pages'),\n                __('Symphony')\n            )\n        ));\n        $this->addElementToHead(new XMLElement('link', null, array(\n            'rel' => 'canonical',\n            'href' => SYMPHONY_URL . $canonical_link,\n        )));\n\n        $page_id = isset($page_id) ? $page_id : null;\n\n        if (!empty($title)) {\n            $page_url = URL . '/' . PageManager::resolvePagePath($page_id) . '/';\n\n            $this->appendSubheading($title, array(\n                Widget::Anchor(__('View Page'), $page_url, __('View Page on Frontend'), 'button', null, array('target' => '_blank', 'accesskey' => 'v'))\n            ));\n        } else {\n            $this->appendSubheading(!empty($title) ? $title : __('Untitled'));\n        }\n\n        if (isset($page_id)) {\n            $this->insertBreadcrumbsUsingPageIdentifier($page_id, false);\n        } else {\n            $_GET['parent'] = isset($_GET['parent']) ? $_GET['parent'] : null;\n            $this->insertBreadcrumbsUsingPageIdentifier((int)$_GET['parent'], true);\n        }\n\n        // Title --------------------------------------------------------------\n\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Page Settings')));\n\n        $label = Widget::Label(__('Name'));\n        $label->appendChild(Widget::Input(\n            'fields[title]', General::sanitize($fields['title'])\n        ));\n\n        if (isset($this->_errors['title'])) {\n            $label = Widget::Error($label, $this->_errors['title']);\n        }\n\n        $fieldset->appendChild($label);\n\n        // Handle -------------------------------------------------------------\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns');\n        $column = new XMLElement('div');\n        $column->setAttribute('class', 'column');\n\n        $label = Widget::Label(__('Handle'));\n        $label->appendChild(Widget::Input(\n            'fields[handle]', $fields['handle']\n        ));\n\n        if (isset($this->_errors['handle'])) {\n            $label = Widget::Error($label, $this->_errors['handle']);\n        }\n\n        $column->appendChild($label);\n\n        // Parent ---------------------------------------------------------\n\n        $label = Widget::Label(__('Parent Page'));\n\n        $where = array(\n            sprintf('id != %d', $page_id)\n        );\n        $pages = PageManager::fetch(false, array('id'), $where, 'title ASC');\n\n        $options = array(\n            array('', false, '/')\n        );\n\n        if (!empty($pages)) {\n            foreach ($pages as $page) {\n                $options[] = array(\n                    $page['id'], $fields['parent'] == $page['id'],\n                    '/' . PageManager::resolvePagePath($page['id'])\n                );\n            }\n\n            usort($options, array($this, '__compare_pages'));\n        }\n\n        $label->appendChild(Widget::Select(\n            'fields[parent]', $options\n        ));\n        $column->appendChild($label);\n        $group->appendChild($column);\n\n        // Parameters ---------------------------------------------------------\n\n        $column = new XMLElement('div');\n        $column->setAttribute('class', 'column');\n\n        $label = Widget::Label(__('Parameters'));\n        $label->appendChild(Widget::Input(\n            'fields[params]', $fields['params'], 'text', array('placeholder' => 'param1/param2')\n        ));\n        $column->appendChild($label);\n\n        // Type -----------------------------------------------------------\n\n        $label = Widget::Label(__('Type'));\n        $label->appendChild(Widget::Input('fields[type]', $fields['type']));\n\n        if (isset($this->_errors['type'])) {\n            $label = Widget::Error($label, $this->_errors['type']);\n        }\n\n        $column->appendChild($label);\n\n        $tags = new XMLElement('ul');\n        $tags->setAttribute('class', 'tags');\n        $tags->setAttribute('data-interactive', 'data-interactive');\n\n        $types = PageManager::fetchAvailablePageTypes();\n\n        foreach ($types as $type) {\n            $tags->appendChild(new XMLElement('li', $type));\n        }\n\n        $column->appendChild($tags);\n        $group->appendChild($column);\n        $fieldset->appendChild($group);\n        $this->Form->appendChild($fieldset);\n\n        // Events -------------------------------------------------------------\n\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Page Resources')));\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns');\n\n        $label = Widget::Label(__('Events'));\n        $label->setAttribute('class', 'column');\n\n        $events = ResourceManager::fetch(ResourceManager::RESOURCE_TYPE_EVENT, array(), array(), 'name ASC');\n        $options = array();\n\n        if (is_array($events) && !empty($events)) {\n            if (!isset($fields['events'])) {\n                $fields['events'] = array();\n            }\n\n            foreach ($events as $name => $about) {\n                $options[] = array(\n                    $name, in_array($name, $fields['events']), $about['name']\n                );\n            }\n        }\n\n        $label->appendChild(Widget::Select('fields[events][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n\n        // Data Sources -------------------------------------------------------\n\n        $label = Widget::Label(__('Data Sources'));\n        $label->setAttribute('class', 'column');\n\n        $datasources = ResourceManager::fetch(ResourceManager::RESOURCE_TYPE_DS, array(), array(), 'name ASC');\n        $options = array();\n\n        if (is_array($datasources) && !empty($datasources)) {\n            if (!isset($fields['data_sources'])) {\n                $fields['data_sources'] = array();\n            }\n\n            foreach ($datasources as $name => $about) {\n                $options[] = array(\n                    $name, in_array($name, $fields['data_sources']), $about['name']\n                );\n            }\n        }\n\n        $label->appendChild(Widget::Select('fields[data_sources][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n        $fieldset->appendChild($group);\n        $this->Form->appendChild($fieldset);\n\n        // Controls -----------------------------------------------------------\n\n        /**\n         * After all Page related Fields have been added to the DOM, just before the\n         * actions.\n         *\n         * @delegate AppendPageContent\n         * @param string $context\n         *  '/blueprints/pages/'\n         * @param XMLElement $form\n         * @param array $fields\n         * @param array $errors\n         */\n        Symphony::ExtensionManager()->notifyMembers(\n            'AppendPageContent',\n            '/blueprints/pages/',\n            array(\n                'form'        => &$this->Form,\n                'fields'    => &$fields,\n                'errors'    => $this->_errors\n            )\n        );\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'actions');\n        $div->appendChild(Widget::Input(\n            'action[save]', ($this->_context[0] == 'edit' ? __('Save Changes') : __('Create Page')),\n            'submit', array('accesskey' => 's')\n        ));\n\n        if ($this->_context[0] == 'edit') {\n            $button = new XMLElement('button', __('Delete'));\n            $button->setAttributeArray(array('name' => 'action[delete]', 'class' => 'button confirm delete', 'title' => __('Delete this page'), 'accesskey' => 'd', 'data-message' => __('Are you sure you want to delete this page?')));\n            $div->appendChild($button);\n        }\n\n        $this->Form->appendChild($div);\n\n        if (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n            $this->Form->appendChild(new XMLElement('input', null, array('type' => 'hidden', 'name' => 'parent', 'value' => $_REQUEST['parent'])));\n        }\n    }\n\n    public function __compare_pages($a, $b)\n    {\n        return strnatcasecmp($a[2], $b[2]);\n    }\n\n    public function __actionIndex()\n    {\n        $checked = (is_array($_POST['items'])) ? array_keys($_POST['items']) : null;\n\n        if (is_array($checked) && !empty($checked)) {\n            /**\n             * Extensions can listen for any custom actions that were added\n             * through `AddCustomPreferenceFieldsets` or `AddCustomActions`\n             * delegates.\n             *\n             * @delegate CustomActions\n             * @since Symphony 2.3.2\n             * @param string $context\n             *  '/blueprints/pages/'\n             * @param array $checked\n             *  An array of the selected rows. The value is usually the ID of the\n             *  the associated object.\n             */\n            Symphony::ExtensionManager()->notifyMembers('CustomActions', '/blueprints/pages/', array(\n                'checked' => $checked\n            ));\n\n            switch ($_POST['with-selected']) {\n                case 'delete':\n                    $this->__actionDelete($checked, SYMPHONY_URL . '/blueprints/pages/');\n                    break;\n            }\n        }\n    }\n\n    public function __actionTemplate()\n    {\n        $filename = $this->_context[1] . '.xsl';\n        $file_abs = PAGES . '/' . $filename;\n        $fields = $_POST['fields'];\n        $this->_errors = array();\n\n        if (!isset($fields['body']) || trim($fields['body']) == '') {\n            $this->_errors['body'] = __('This is a required field.');\n        } elseif (!General::validateXML($fields['body'], $errors, false, new XSLTProcess())) {\n            $this->_errors['body'] = __('This document is not well formed.') . ' ' . __('The following error was returned:') . ' <code>' . $errors[0]['message'] . '</code>';\n        }\n\n        if (empty($this->_errors)) {\n            /**\n             * Just before a Page Template is about to written to disk\n             *\n             * @delegate PageTemplatePreEdit\n             * @since Symphony 2.2.2\n             * @param string $context\n             * '/blueprints/pages/template/'\n             * @param string $file\n             *  The path to the Page Template file\n             * @param string $contents\n             *  The contents of the `$fields['body']`, passed by reference\n             */\n            Symphony::ExtensionManager()->notifyMembers('PageTemplatePreEdit', '/blueprints/pages/template/', array('file' => $file_abs, 'contents' => &$fields['body']));\n\n            if (!PageManager::writePageFiles($file_abs, $fields['body'])) {\n                $this->pageAlert(\n                    __('Page Template could not be written to disk.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/pages</code>')),\n                    Alert::ERROR\n                );\n            } else {\n                /**\n                 * Just after a Page Template has been edited and written to disk\n                 *\n                 * @delegate PageTemplatePostEdit\n                 * @since Symphony 2.2.2\n                 * @param string $context\n                 * '/blueprints/pages/template/'\n                 * @param string $file\n                 *  The path to the Page Template file\n                 */\n                Symphony::ExtensionManager()->notifyMembers('PageTemplatePostEdit', '/blueprints/pages/template/', array('file' => $file_abs));\n\n                redirect(SYMPHONY_URL . '/blueprints/pages/template/' . $this->_context[1] . '/saved/');\n            }\n        }\n    }\n\n    public function __actionNew()\n    {\n        $this->__actionEdit();\n    }\n\n    public function __actionEdit()\n    {\n        if ($this->_context[0] != 'new' && !$page_id = (integer)$this->_context[1]) {\n            redirect(SYMPHONY_URL . '/blueprints/pages/');\n        }\n\n        $parent_link_suffix = null;\n\n        if (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n            $parent_link_suffix = '?parent=' . $_REQUEST['parent'];\n        }\n\n        if (@array_key_exists('delete', $_POST['action'])) {\n            $this->__actionDelete($page_id, SYMPHONY_URL  . '/blueprints/pages/' . $parent_link_suffix);\n        }\n\n        if (@array_key_exists('save', $_POST['action'])) {\n            $fields = $_POST['fields'];\n            $this->_errors = array();\n\n            if (!isset($fields['title']) || trim($fields['title']) == '') {\n                $this->_errors['title'] = __('This is a required field');\n            }\n\n            if (trim($fields['type']) != '' && preg_match('/(index|404|403)/i', $fields['type'])) {\n                $types = preg_split('/\\s*,\\s*/', strtolower($fields['type']), -1, PREG_SPLIT_NO_EMPTY);\n\n                if (in_array('index', $types) && PageManager::hasPageTypeBeenUsed($page_id, 'index')) {\n                    $this->_errors['type'] = __('An index type page already exists.');\n                } elseif (in_array('404', $types) && PageManager::hasPageTypeBeenUsed($page_id, '404')) {\n                    $this->_errors['type'] = __('A 404 type page already exists.');\n                } elseif (in_array('403', $types) && PageManager::hasPageTypeBeenUsed($page_id, '403')) {\n                    $this->_errors['type'] = __('A 403 type page already exists.');\n                }\n            }\n\n            if (trim($fields['handle']) == '') {\n                $fields['handle'] = $fields['title'];\n            }\n\n            $fields['handle'] = PageManager::createHandle($fields['handle']);\n\n            if (empty($fields['handle']) && !isset($this->_errors['title'])) {\n                $this->_errors['handle'] = __('Please ensure handle contains at least one Latin-based character.');\n            }\n\n            /**\n             * Just after the Symphony validation has run, allows Developers\n             * to run custom validation logic on a Page\n             *\n             * @delegate PagePostValidate\n             * @since Symphony 2.2\n             * @param string $context\n             * '/blueprints/pages/'\n             * @param array $fields\n             *  The `$_POST['fields']` array. This should be read-only and not changed\n             *  through this delegate.\n             * @param array $errors\n             *  An associative array of errors, with the key matching a key in the\n             *  `$fields` array, and the value being the string of the error. `$errors`\n             *  is passed by reference.\n             */\n            Symphony::ExtensionManager()->notifyMembers('PagePostValidate', '/blueprints/pages/', array('fields' => $fields, 'errors' => &$errors));\n\n            if (empty($this->_errors)) {\n\n                if ($fields['params']) {\n                    $fields['params'] = trim(preg_replace('@\\/{2,}@', '/', $fields['params']), '/');\n                }\n\n                // Clean up type list\n                $types = preg_split('/\\s*,\\s*/', $fields['type'], -1, PREG_SPLIT_NO_EMPTY);\n                $types = @array_map('trim', $types);\n                unset($fields['type']);\n\n                $fields['parent'] = ($fields['parent'] != __('None') ? $fields['parent'] : null);\n                $fields['data_sources'] = is_array($fields['data_sources']) ? implode(',', $fields['data_sources']) : null;\n                $fields['events'] = is_array($fields['events']) ? implode(',', $fields['events']) : null;\n                $fields['path'] = null;\n\n                if ($fields['parent']) {\n                    $fields['path'] = PageManager::resolvePagePath((integer)$fields['parent']);\n                }\n\n                // Check for duplicates:\n                $current = PageManager::fetchPageByID($page_id);\n\n                if (empty($current)) {\n                    $fields['sortorder'] = PageManager::fetchNextSortOrder();\n                }\n\n                $where = array();\n\n                if (!empty($current)) {\n                    $where[] = \"p.id != {$page_id}\";\n                }\n\n                $where[] = \"p.handle = '\" . $fields['handle'] . \"'\";\n                $where[] = (is_null($fields['path']))\n                    ? \"p.path IS null\"\n                    : \"p.path = '\" . $fields['path'] . \"'\";\n                $duplicate = PageManager::fetch(false, array('*'), $where);\n\n                // If duplicate\n                if (!empty($duplicate)) {\n                    $this->_errors['handle'] = __('A page with that handle already exists');\n\n                    // Create or move files:\n                } else {\n                    // New page?\n                    if (empty($current)) {\n                        $file_created = PageManager::createPageFiles(\n                            $fields['path'],\n                            $fields['handle']\n                        );\n\n                        // Existing page, potentially rename files\n                    } else {\n                        $file_created = PageManager::createPageFiles(\n                            $fields['path'],\n                            $fields['handle'],\n                            $current['path'],\n                            $current['handle']\n                        );\n                    }\n\n                    // If the file wasn't created, it's usually permissions related\n                    if (!$file_created) {\n                        return $this->pageAlert(\n                            __('Page Template could not be written to disk.')\n                            . ' ' . __('Please check permissions on %s.', array('<code>/workspace/pages</code>')),\n                            Alert::ERROR\n                        );\n                    }\n\n                    // Insert the new data:\n                    if (empty($current)) {\n                        /**\n                         * Just prior to creating a new Page record in `tbl_pages`, provided\n                         * with the `$fields` associative array. Use with caution, as no\n                         * duplicate page checks are run after this delegate has fired\n                         *\n                         * @delegate PagePreCreate\n                         * @since Symphony 2.2\n                         * @param string $context\n                         * '/blueprints/pages/'\n                         * @param array $fields\n                         *  The `$_POST['fields']` array passed by reference\n                         */\n                        Symphony::ExtensionManager()->notifyMembers('PagePreCreate', '/blueprints/pages/', array('fields' => &$fields));\n\n                        if (!$page_id = PageManager::add($fields)) {\n                            $this->pageAlert(\n                                __('Unknown errors occurred while attempting to save.')\n                                . '<a href=\"' . SYMPHONY_URL . '/system/log/\">'\n                                . __('Check your activity log')\n                                . '</a>.',\n                                Alert::ERROR\n                            );\n                        } else {\n                            /**\n                             * Just after the creation of a new page in `tbl_pages`\n                             *\n                             * @delegate PagePostCreate\n                             * @since Symphony 2.2\n                             * @param string $context\n                             * '/blueprints/pages/'\n                             * @param integer $page_id\n                             *  The ID of the newly created Page\n                             * @param array $fields\n                             *  An associative array of data that was just saved for this page\n                             */\n                            Symphony::ExtensionManager()->notifyMembers('PagePostCreate', '/blueprints/pages/', array('page_id' => $page_id, 'fields' => &$fields));\n\n                            $redirect = \"/blueprints/pages/edit/{$page_id}/created/{$parent_link_suffix}\";\n                        }\n\n                        // Update existing:\n                    } else {\n                        /**\n                         * Just prior to updating a Page record in `tbl_pages`, provided\n                         * with the `$fields` associative array. Use with caution, as no\n                         * duplicate page checks are run after this delegate has fired\n                         *\n                         * @delegate PagePreEdit\n                         * @since Symphony 2.2\n                         * @param string $context\n                         * '/blueprints/pages/'\n                         * @param integer $page_id\n                         *  The ID of the Page that is about to be updated\n                         * @param array $fields\n                         *  The `$_POST['fields']` array passed by reference\n                         */\n                        Symphony::ExtensionManager()->notifyMembers('PagePreEdit', '/blueprints/pages/', array('page_id' => $page_id, 'fields' => &$fields));\n\n                        if (!PageManager::edit($page_id, $fields, true)) {\n                            return $this->pageAlert(\n                                __('Unknown errors occurred while attempting to save.')\n                                . '<a href=\"' . SYMPHONY_URL . '/system/log/\">'\n                                . __('Check your activity log')\n                                . '</a>.',\n                                Alert::ERROR\n                            );\n                        } else {\n                            /**\n                             * Just after updating a page in `tbl_pages`\n                             *\n                             * @delegate PagePostEdit\n                             * @since Symphony 2.2\n                             * @param string $context\n                             * '/blueprints/pages/'\n                             * @param integer $page_id\n                             *  The ID of the Page that was just updated\n                             * @param array $fields\n                             *  An associative array of data that was just saved for this page\n                             */\n                            Symphony::ExtensionManager()->notifyMembers('PagePostEdit', '/blueprints/pages/', array('page_id' => $page_id, 'fields' => $fields));\n\n                            $redirect = \"/blueprints/pages/edit/{$page_id}/saved/{$parent_link_suffix}\";\n                        }\n                    }\n                }\n\n                // Only proceed if there was no errors saving/creating the page\n                if (empty($this->_errors)) {\n                    /**\n                     * Just before the page's types are saved into `tbl_pages_types`.\n                     * Use with caution as no further processing is done on the `$types`\n                     * array to prevent duplicate `$types` from occurring (ie. two index\n                     * page types). Your logic can use the PageManger::hasPageTypeBeenUsed\n                     * function to perform this logic.\n                     *\n                     * @delegate PageTypePreCreate\n                     * @since Symphony 2.2\n                     * @see toolkit.PageManager#hasPageTypeBeenUsed\n                     * @param string $context\n                     * '/blueprints/pages/'\n                     * @param integer $page_id\n                     *  The ID of the Page that was just created or updated\n                     * @param array $types\n                     *  An associative array of the types for this page passed by reference.\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('PageTypePreCreate', '/blueprints/pages/', array('page_id' => $page_id, 'types' => &$types));\n\n                    // Assign page types:\n                    PageManager::addPageTypesToPage($page_id, $types);\n\n                    // Find and update children:\n                    if ($this->_context[0] == 'edit') {\n                        PageManager::editPageChildren($page_id, $fields['path'] . '/' . $fields['handle']);\n                    }\n\n                    if ($redirect) {\n                        redirect(SYMPHONY_URL . $redirect);\n                    }\n                }\n            }\n\n            // If there was any errors, either with pre processing or because of a\n            // duplicate page, return.\n            if (is_array($this->_errors) && !empty($this->_errors)) {\n                return $this->pageAlert(\n                    __('An error occurred while processing this form. See below for details.'),\n                    Alert::ERROR\n                );\n            }\n        }\n    }\n\n    public function __actionDelete($pages, $redirect)\n    {\n        $success = true;\n        $deleted_page_ids = array();\n\n        if (!is_array($pages)) {\n            $pages = array($pages);\n        }\n\n        /**\n         * Prior to deleting Pages\n         *\n         * @delegate PagePreDelete\n         * @since Symphony 2.2\n         * @param string $context\n         * '/blueprints/pages/'\n         * @param array $page_ids\n         *  An array of Page ID's that are about to be deleted, passed\n         *  by reference\n         * @param string $redirect\n         *  The absolute path that the Developer will be redirected to\n         *  after the Pages are deleted\n         */\n        Symphony::ExtensionManager()->notifyMembers('PagePreDelete', '/blueprints/pages/', array('page_ids' => &$pages, 'redirect' => &$redirect));\n\n        foreach ($pages as $page_id) {\n            $page = PageManager::fetchPageByID($page_id);\n\n            if (empty($page)) {\n                $success = false;\n                $this->pageAlert(\n                    __('Page could not be deleted because it does not exist.'),\n                    Alert::ERROR\n                );\n\n                break;\n            }\n\n            if (PageManager::hasChildPages($page_id)) {\n                $this->_hilights[] = $page['id'];\n                $success = false;\n                $this->pageAlert(\n                    __('Page could not be deleted because it has children.'),\n                    Alert::ERROR\n                );\n\n                continue;\n            }\n\n            if (!PageManager::deletePageFiles($page['path'], $page['handle'])) {\n                $this->_hilights[] = $page['id'];\n                $success = false;\n                $this->pageAlert(\n                    __('One or more pages could not be deleted.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/pages</code>')),\n                    Alert::ERROR\n                );\n\n                continue;\n            }\n\n            if (PageManager::delete($page_id, false)) {\n                $deleted_page_ids[] = $page_id;\n            }\n        }\n\n        if ($success) {\n            /**\n             * Fires after all Pages have been deleted\n             *\n             * @delegate PagePostDelete\n             * @since Symphony 2.3\n             * @param string $context\n             * '/blueprints/pages/'\n             * @param array $page_ids\n             *  The page ID's that were just deleted\n             */\n            Symphony::ExtensionManager()->notifyMembers('PagePostDelete', '/blueprints/pages/', array('page_ids' => $deleted_page_ids));\n            redirect($redirect);\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * @package content\n */\n\n/**\n * Developers can create new Frontend pages from this class. It provides\n * an index view of all the pages in this Symphony install as well as the\n * forms for the creation/editing of a Page\n */\n\nclass contentBlueprintsPages extends AdministrationPage\n{\n    public $_errors = array();\n    protected $_hilights = array();\n\n    public function insertBreadcrumbsUsingPageIdentifier($page_id, $preserve_last = true)\n    {\n        if ($page_id == 0) {\n            return $this->insertBreadcrumbs(\n                array(Widget::Anchor(__('Pages'), SYMPHONY_URL . '/blueprints/pages/'))\n            );\n        }\n\n        $pages = PageManager::resolvePage($page_id, 'handle');\n\n        foreach ($pages as &$page) {\n            // If we are viewing the Page Editor, the Breadcrumbs should link\n            // to the parent's Page Editor.\n            if ($this->_context[0] == 'edit') {\n                $page = Widget::Anchor(\n                    General::sanitize(PageManager::fetchTitleFromHandle($page)),\n                    SYMPHONY_URL . '/blueprints/pages/edit/' . PageManager::fetchIDFromHandle($page) . '/'\n                );\n\n                // If the pages index is nested, the Breadcrumb should link to the\n                // Pages Index filtered by parent\n            } elseif (Symphony::Configuration()->get('pages_table_nest_children', 'symphony') == 'yes') {\n                $page = Widget::Anchor(\n                    General::sanitize(PageManager::fetchTitleFromHandle($page)),\n                    SYMPHONY_URL . '/blueprints/pages/?parent=' . PageManager::fetchIDFromHandle($page)\n                );\n\n                // If there is no nesting on the Pages Index, the breadcrumb is\n                // not a link, just plain text\n            } else {\n                $page = new XMLElement('span', General::sanitize(PageManager::fetchTitleFromHandle($page)));\n            }\n        }\n\n        if (!$preserve_last) {\n            array_pop($pages);\n        }\n\n        $this->insertBreadcrumbs(array_merge(\n            array(Widget::Anchor(__('Pages'), SYMPHONY_URL . '/blueprints/pages/')),\n            $pages\n        ));\n    }\n\n    public function __viewIndex()\n    {\n        $this->setPageType('table');\n        $this->setTitle(__('%1$s &ndash; %2$s', array(__('Pages'), __('Symphony'))));\n\n        $nesting = Symphony::Configuration()->get('pages_table_nest_children', 'symphony') == 'yes';\n\n        if ($nesting && isset($_GET['parent']) && is_numeric($_GET['parent'])) {\n            $parent = PageManager::fetchPageByID((int)$_GET['parent'], array('title', 'id'));\n        }\n\n        $this->appendSubheading(\n            isset($parent)\n                ? General::sanitize($parent['title'])\n                : __('Pages'),\n            Widget::Anchor(\n                __('Create New'),\n                Administration::instance()->getCurrentPageURL() . 'new/' . ($nesting && isset($parent) ? \"?parent={$parent['id']}\" : null),\n                __('Create a new page'),\n                'create button',\n                null,\n                ['accesskey' => 'c']\n            )\n        );\n\n        if (isset($parent)) {\n            $this->insertBreadcrumbsUsingPageIdentifier($parent['id'], false);\n        }\n\n        $aTableHead = array(\n            array(__('Name'), 'col'),\n            array(__('Template'), 'col'),\n            array('<abbr title=\"' . __('Universal Resource Locator') . '\">' . __('URL') . '</abbr>', 'col'),\n            array(__('Parameters'), 'col'),\n            array(__('Type'), 'col')\n        );\n        $aTableBody = array();\n\n        if ($nesting) {\n            $aTableHead[] = array(__('Children'), 'col');\n            $where = array(\n                'parent ' . (isset($parent) ? \" = {$parent['id']} \" : ' IS NULL ')\n            );\n        } else {\n            $where = array();\n        }\n\n        $pages = PageManager::fetch(true, array('*'), $where);\n\n        if (!is_array($pages) || empty($pages)) {\n            $aTableBody = array(Widget::TableRow(array(\n                Widget::TableData(__('None found.'), 'inactive', null, count($aTableHead))\n            ), 'odd'));\n        } else {\n            foreach ($pages as $page) {\n                $class = array();\n\n                $page_title = ($nesting ? $page['title'] : PageManager::resolvePageTitle($page['id']));\n                $page_url = URL . '/' . PageManager::resolvePagePath($page['id']) . '/';\n                $page_edit_url = Administration::instance()->getCurrentPageURL() . 'edit/' . $page['id'] . '/';\n                $page_template = PageManager::createFilePath($page['path'], $page['handle']);\n\n                $col_title = Widget::TableData(\n                    Widget::Anchor(General::sanitize($page_title), $page_edit_url, $page['handle'])\n                );\n                $col_title->appendChild(\n                    Widget::Label(\n                        __('Select Page %s', [General::sanitize($page_title)]),\n                        null,\n                        'accessible',\n                        null,\n                        ['for' => 'page-' . $page['id']]\n                    )\n                );\n                $col_title->appendChild(Widget::Input('items['.$page['id'].']', 'on', 'checkbox', array(\n                    'id' => 'page-' . $page['id']\n                )));\n\n                $col_template = Widget::TableData($page_template . '.xsl');\n\n                $col_url = Widget::TableData(Widget::Anchor($page_url, $page_url));\n\n                if ($page['params']) {\n                    $col_params = Widget::TableData(trim(General::sanitize($page['params']), '/'));\n                } else {\n                    $col_params = Widget::TableData(__('None'), 'inactive');\n                }\n\n                if (!empty($page['type'])) {\n                    $col_types = Widget::TableData(implode(', ', array_map(['General', 'sanitize'], $page['type'])));\n                } else {\n                    $col_types = Widget::TableData(__('None'), 'inactive');\n                }\n\n                if (in_array($page['id'], $this->_hilights)) {\n                    $class[] = 'failed';\n                }\n\n                $columns = array($col_title, $col_template, $col_url, $col_params, $col_types);\n\n                if ($nesting) {\n                    if (PageManager::hasChildPages($page['id'])) {\n                        $col_children = Widget::TableData(\n                            Widget::Anchor(PageManager::getChildPagesCount($page['id']) . ' &rarr;',\n                            SYMPHONY_URL . '/blueprints/pages/?parent=' . $page['id'])\n                        );\n                    } else {\n                        $col_children = Widget::TableData(__('None'), 'inactive');\n                    }\n\n                    $columns[] = $col_children;\n                }\n\n                $aTableBody[] = Widget::TableRow(\n                    $columns,\n                    implode(' ', $class)\n                );\n            }\n        }\n\n        $table = Widget::Table(\n            Widget::TableHead($aTableHead), null,\n            Widget::TableBody($aTableBody), 'orderable selectable',\n            null, array('role' => 'directory', 'aria-labelledby' => 'symphony-subheading', 'data-interactive' => 'data-interactive')\n        );\n\n        $this->Form->appendChild($table);\n\n        $version = new XMLElement('p', 'Symphony ' . Symphony::Configuration()->get('version', 'symphony'), array(\n            'id' => 'version'\n        ));\n        $this->Form->appendChild($version);\n\n        $tableActions = new XMLElement('div');\n        $tableActions->setAttribute('class', 'actions');\n\n        $options = array(\n            array(null, false, __('With Selected...')),\n            array('delete', false, __('Delete'), 'confirm', null, array(\n                'data-message' => __('Are you sure you want to delete the selected pages?')\n            ))\n        );\n\n        /**\n         * Allows an extension to modify the existing options for this page's\n         * With Selected menu. If the `$options` parameter is an empty array,\n         * the 'With Selected' menu will not be rendered.\n         *\n         * @delegate AddCustomActions\n         * @since Symphony 2.3.2\n         * @param string $context\n         * '/blueprints/pages/'\n         * @param array $options\n         *  An array of arrays, where each child array represents an option\n         *  in the With Selected menu. Options should follow the same format\n         *  expected by `Widget::__SelectBuildOption`. Passed by reference.\n         */\n        Symphony::ExtensionManager()->notifyMembers('AddCustomActions', '/blueprints/pages/', array(\n            'options' => &$options\n        ));\n\n        if (!empty($options)) {\n            $tableActions->appendChild(Widget::Apply($options));\n            $this->Form->appendChild($tableActions);\n        }\n    }\n\n    public function __viewNew()\n    {\n        $this->__viewEdit();\n    }\n\n    public function __viewEdit()\n    {\n        $this->setPageType('form');\n        $fields = array(\"title\"=>null, \"handle\"=>null, \"parent\"=>null, \"params\"=>null, \"type\"=>null, \"data_sources\"=>null);\n        $existing = $fields;\n        $canonical_link = '/blueprints/pages/';\n        $nesting = (Symphony::Configuration()->get('pages_table_nest_children', 'symphony') == 'yes');\n\n        // Verify page exists:\n        if ($this->_context[0] === 'edit') {\n            if (!$page_id = (int)$this->_context[1]) {\n                redirect(SYMPHONY_URL . '/blueprints/pages/');\n            }\n\n            $existing = PageManager::fetchPageByID($page_id);\n            $canonical_link .= 'edit/' . $page_id . '/';\n\n            if (!$existing) {\n                Administration::instance()->errorPageNotFound();\n            } else {\n                $existing['type'] = PageManager::fetchPageTypes($page_id);\n            }\n        } else {\n            $canonical_link .= 'new/';\n        }\n\n        // Status message:\n        if (isset($this->_context[2])) {\n            $flag = $this->_context[2];\n            $parent_link_suffix = $message = '';\n            $time = Widget::Time();\n\n            if (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n                $parent_link_suffix = \"?parent=\" . $_REQUEST['parent'];\n            } elseif ($nesting && isset($existing) && !is_null($existing['parent'])) {\n                $parent_link_suffix = '?parent=' . $existing['parent'];\n            }\n\n            switch ($flag) {\n                case 'saved':\n                    $message = __('Page updated at %s.', array($time->generate()));\n                    break;\n                case 'created':\n                    $message = __('Page created at %s.', array($time->generate()));\n            }\n\n            $this->pageAlert(\n                $message\n                . ' <a href=\"' . SYMPHONY_URL . '/blueprints/pages/new/' . $parent_link_suffix . '\" accesskey=\"c\">'\n                . __('Create another?')\n                . '</a> <a href=\"' . SYMPHONY_URL . '/blueprints/pages/\" accesskey=\"a\">'\n                . __('View all Pages')\n                . '</a>',\n                Alert::SUCCESS\n            );\n        }\n\n        // Find values:\n        if (isset($_POST['fields'])) {\n            $fields = $_POST['fields'];\n        } elseif ($this->_context[0] == 'edit') {\n            $fields = $existing;\n\n            if (!is_null($fields['type'])) {\n                $fields['type'] = implode(', ', $fields['type']);\n            }\n\n            $fields['data_sources'] = preg_split('/,/i', $fields['data_sources'], -1, PREG_SPLIT_NO_EMPTY);\n            $fields['events'] = preg_split('/,/i', $fields['events'], -1, PREG_SPLIT_NO_EMPTY);\n        } elseif (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n            $fields['parent'] = $_REQUEST['parent'];\n            $canonical_link .= '?parent=' . urlencode($_REQUEST['parent']);\n        }\n\n        $title = $fields['title'];\n\n        if (trim($title) == '') {\n            $title = $existing['title'];\n        }\n\n        $this->setTitle(\n            __(\n                $title\n                    ? '%1$s &ndash; %2$s &ndash; %3$s'\n                    : '%2$s &ndash; %3$s',\n                [General::sanitize($title), __('Pages'), __('Symphony')]\n            )\n        );\n        $this->addElementToHead(new XMLElement('link', null, array(\n            'rel' => 'canonical',\n            'href' => SYMPHONY_URL . $canonical_link,\n        )));\n\n        $page_id = isset($page_id) ? $page_id : null;\n\n        if (!empty($title)) {\n            $page_url = URL . '/' . PageManager::resolvePagePath($page_id) . '/';\n\n            $this->appendSubheading(\n                General::sanitize($title),\n                Widget::Anchor(\n                    __('View Page'),\n                    $page_url,\n                    __('View Page on Frontend'),\n                    'button',\n                    null,\n                    ['target' => '_blank', 'accesskey' => 'v']\n                )\n            );\n        } else {\n            $this->appendSubheading(!empty($title) ? General::sanitize($title) : __('Untitled'));\n        }\n\n        if (isset($page_id)) {\n            $this->insertBreadcrumbsUsingPageIdentifier($page_id, false);\n        } else {\n            $_GET['parent'] = isset($_GET['parent']) ? $_GET['parent'] : null;\n            $this->insertBreadcrumbsUsingPageIdentifier((int)$_GET['parent'], true);\n        }\n\n        // Title --------------------------------------------------------------\n\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Page Settings')));\n\n        $label = Widget::Label(__('Name'));\n        $label->appendChild(Widget::Input(\n            'fields[title]', General::sanitize($fields['title'])\n        ));\n\n        if (isset($this->_errors['title'])) {\n            $label = Widget::Error($label, $this->_errors['title']);\n        }\n\n        $fieldset->appendChild($label);\n\n        // Handle -------------------------------------------------------------\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns');\n        $column = new XMLElement('div');\n        $column->setAttribute('class', 'column');\n\n        $label = Widget::Label(__('Handle'));\n        $label->appendChild(Widget::Input(\n            'fields[handle]', $fields['handle']\n        ));\n\n        if (isset($this->_errors['handle'])) {\n            $label = Widget::Error($label, $this->_errors['handle']);\n        }\n\n        $column->appendChild($label);\n\n        // Parent ---------------------------------------------------------\n\n        $label = Widget::Label(__('Parent Page'));\n\n        $where = array(\n            sprintf('id != %d', $page_id)\n        );\n        $pages = PageManager::fetch(false, array('id'), $where, 'title ASC');\n\n        $options = array(\n            array('', false, '/')\n        );\n\n        if (!empty($pages)) {\n            foreach ($pages as $page) {\n                $options[] = array(\n                    $page['id'], $fields['parent'] == $page['id'],\n                    '/' . PageManager::resolvePagePath($page['id'])\n                );\n            }\n\n            usort($options, array($this, '__compare_pages'));\n        }\n\n        $label->appendChild(Widget::Select(\n            'fields[parent]', $options\n        ));\n        $column->appendChild($label);\n        $group->appendChild($column);\n\n        // Parameters ---------------------------------------------------------\n\n        $column = new XMLElement('div');\n        $column->setAttribute('class', 'column');\n\n        $label = Widget::Label(__('Parameters'));\n        $label->appendChild(Widget::Input(\n            'fields[params]', $fields['params'], 'text', array('placeholder' => 'param1/param2')\n        ));\n        $column->appendChild($label);\n\n        // Type -----------------------------------------------------------\n\n        $label = Widget::Label(__('Type'));\n        $label->appendChild(Widget::Input('fields[type]', $fields['type']));\n\n        if (isset($this->_errors['type'])) {\n            $label = Widget::Error($label, $this->_errors['type']);\n        }\n\n        $column->appendChild($label);\n\n        $tags = new XMLElement('ul');\n        $tags->setAttribute('class', 'tags');\n        $tags->setAttribute('data-interactive', 'data-interactive');\n\n        $types = PageManager::fetchAvailablePageTypes();\n\n        foreach ($types as $type) {\n            $tags->appendChild(new XMLElement('li', General::sanitize($type)));\n        }\n\n        $column->appendChild($tags);\n        $group->appendChild($column);\n        $fieldset->appendChild($group);\n        $this->Form->appendChild($fieldset);\n\n        // Events -------------------------------------------------------------\n\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Page Resources')));\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns');\n\n        $label = Widget::Label(__('Events'));\n        $label->setAttribute('class', 'column');\n\n        $events = ResourceManager::fetch(ResourceManager::RESOURCE_TYPE_EVENT, array(), array(), 'name ASC');\n        $options = array();\n\n        if (is_array($events) && !empty($events)) {\n            if (!isset($fields['events'])) {\n                $fields['events'] = array();\n            }\n\n            foreach ($events as $name => $about) {\n                $options[] = array(\n                    $name, in_array($name, $fields['events']), $about['name']\n                );\n            }\n        }\n\n        $label->appendChild(Widget::Select('fields[events][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n\n        // Data Sources -------------------------------------------------------\n\n        $label = Widget::Label(__('Data Sources'));\n        $label->setAttribute('class', 'column');\n\n        $datasources = ResourceManager::fetch(ResourceManager::RESOURCE_TYPE_DS, array(), array(), 'name ASC');\n        $options = array();\n\n        if (is_array($datasources) && !empty($datasources)) {\n            if (!isset($fields['data_sources'])) {\n                $fields['data_sources'] = array();\n            }\n\n            foreach ($datasources as $name => $about) {\n                $options[] = array(\n                    $name, in_array($name, $fields['data_sources']), $about['name']\n                );\n            }\n        }\n\n        $label->appendChild(Widget::Select('fields[data_sources][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n        $fieldset->appendChild($group);\n        $this->Form->appendChild($fieldset);\n\n        // Controls -----------------------------------------------------------\n\n        /**\n         * After all Page related Fields have been added to the DOM, just before the\n         * actions.\n         *\n         * @delegate AppendPageContent\n         * @param string $context\n         *  '/blueprints/pages/'\n         * @param XMLElement $form\n         * @param array $fields\n         * @param array $errors\n         */\n        Symphony::ExtensionManager()->notifyMembers(\n            'AppendPageContent',\n            '/blueprints/pages/',\n            array(\n                'form'        => &$this->Form,\n                'fields'    => &$fields,\n                'errors'    => $this->_errors\n            )\n        );\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'actions');\n        $div->appendChild(Widget::Input(\n            'action[save]',\n            ($this->_context[0] == 'edit' ? __('Save Changes') : __('Create Page')),\n            'submit',\n            ['accesskey' => 's']\n        ));\n\n        if ($this->_context[0] == 'edit') {\n            $button = new XMLElement('button', __('Delete'));\n            $button->setAttributeArray(array('name' => 'action[delete]', 'class' => 'button confirm delete', 'title' => __('Delete this page'), 'accesskey' => 'd', 'data-message' => __('Are you sure you want to delete this page?')));\n            $div->appendChild($button);\n        }\n\n        $this->Form->appendChild($div);\n\n        if (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n            $this->Form->appendChild(new XMLElement('input', null, array('type' => 'hidden', 'name' => 'parent', 'value' => $_REQUEST['parent'])));\n        }\n    }\n\n    public function __compare_pages($a, $b)\n    {\n        return strnatcasecmp($a[2], $b[2]);\n    }\n\n    public function __actionIndex()\n    {\n        $checked = (is_array($_POST['items'])) ? array_keys($_POST['items']) : null;\n\n        if (is_array($checked) && !empty($checked)) {\n            /**\n             * Extensions can listen for any custom actions that were added\n             * through `AddCustomPreferenceFieldsets` or `AddCustomActions`\n             * delegates.\n             *\n             * @delegate CustomActions\n             * @since Symphony 2.3.2\n             * @param string $context\n             *  '/blueprints/pages/'\n             * @param array $checked\n             *  An array of the selected rows. The value is usually the ID of the\n             *  the associated object.\n             */\n            Symphony::ExtensionManager()->notifyMembers('CustomActions', '/blueprints/pages/', array(\n                'checked' => $checked\n            ));\n\n            switch ($_POST['with-selected']) {\n                case 'delete':\n                    $this->__actionDelete($checked, SYMPHONY_URL . '/blueprints/pages/');\n                    break;\n            }\n        }\n    }\n\n    public function __actionTemplate()\n    {\n        $filename = $this->_context[1] . '.xsl';\n        $file_abs = PAGES . '/' . $filename;\n        $fields = $_POST['fields'];\n        $this->_errors = array();\n\n        if (!isset($fields['body']) || trim($fields['body']) == '') {\n            $this->_errors['body'] = __('This is a required field.');\n        } elseif (!General::validateXML($fields['body'], $errors, false, new XSLTProcess())) {\n            $this->_errors['body'] = __('This document is not well formed.') . ' ' . __('The following error was returned:') . ' <code>' . $errors[0]['message'] . '</code>';\n        }\n\n        if (empty($this->_errors)) {\n            /**\n             * Just before a Page Template is about to written to disk\n             *\n             * @delegate PageTemplatePreEdit\n             * @since Symphony 2.2.2\n             * @param string $context\n             * '/blueprints/pages/template/'\n             * @param string $file\n             *  The path to the Page Template file\n             * @param string $contents\n             *  The contents of the `$fields['body']`, passed by reference\n             */\n            Symphony::ExtensionManager()->notifyMembers('PageTemplatePreEdit', '/blueprints/pages/template/', array('file' => $file_abs, 'contents' => &$fields['body']));\n\n            if (!PageManager::writePageFiles($file_abs, $fields['body'])) {\n                $this->pageAlert(\n                    __('Page Template could not be written to disk.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/pages</code>')),\n                    Alert::ERROR\n                );\n            } else {\n                /**\n                 * Just after a Page Template has been edited and written to disk\n                 *\n                 * @delegate PageTemplatePostEdit\n                 * @since Symphony 2.2.2\n                 * @param string $context\n                 * '/blueprints/pages/template/'\n                 * @param string $file\n                 *  The path to the Page Template file\n                 */\n                Symphony::ExtensionManager()->notifyMembers('PageTemplatePostEdit', '/blueprints/pages/template/', array('file' => $file_abs));\n\n                redirect(SYMPHONY_URL . '/blueprints/pages/template/' . $this->_context[1] . '/saved/');\n            }\n        }\n    }\n\n    public function __actionNew()\n    {\n        $this->__actionEdit();\n    }\n\n    public function __actionEdit()\n    {\n        if ($this->_context[0] != 'new' && !$page_id = (integer)$this->_context[1]) {\n            redirect(SYMPHONY_URL . '/blueprints/pages/');\n        }\n\n        $parent_link_suffix = null;\n\n        if (isset($_REQUEST['parent']) && is_numeric($_REQUEST['parent'])) {\n            $parent_link_suffix = '?parent=' . $_REQUEST['parent'];\n        }\n\n        if (@array_key_exists('delete', $_POST['action'])) {\n            $this->__actionDelete($page_id, SYMPHONY_URL  . '/blueprints/pages/' . $parent_link_suffix);\n        }\n\n        if (@array_key_exists('save', $_POST['action'])) {\n            $fields = $_POST['fields'];\n            $this->_errors = array();\n\n            if (!isset($fields['title']) || trim($fields['title']) == '') {\n                $this->_errors['title'] = __('This is a required field');\n            }\n\n            if (trim($fields['type']) != '' && preg_match('/(index|404|403)/i', $fields['type'])) {\n                $types = preg_split('/\\s*,\\s*/', strtolower($fields['type']), -1, PREG_SPLIT_NO_EMPTY);\n\n                if (in_array('index', $types) && PageManager::hasPageTypeBeenUsed($page_id, 'index')) {\n                    $this->_errors['type'] = __('An index type page already exists.');\n                } elseif (in_array('404', $types) && PageManager::hasPageTypeBeenUsed($page_id, '404')) {\n                    $this->_errors['type'] = __('A 404 type page already exists.');\n                } elseif (in_array('403', $types) && PageManager::hasPageTypeBeenUsed($page_id, '403')) {\n                    $this->_errors['type'] = __('A 403 type page already exists.');\n                }\n            }\n\n            if (trim($fields['handle']) == '') {\n                $fields['handle'] = $fields['title'];\n            }\n\n            $fields['handle'] = PageManager::createHandle($fields['handle']);\n\n            if (empty($fields['handle']) && !isset($this->_errors['title'])) {\n                $this->_errors['handle'] = __('Please ensure handle contains at least one Latin-based character.');\n            }\n\n            /**\n             * Just after the Symphony validation has run, allows Developers\n             * to run custom validation logic on a Page\n             *\n             * @delegate PagePostValidate\n             * @since Symphony 2.2\n             * @param string $context\n             * '/blueprints/pages/'\n             * @param array $fields\n             *  The `$_POST['fields']` array. This should be read-only and not changed\n             *  through this delegate.\n             * @param array $errors\n             *  An associative array of errors, with the key matching a key in the\n             *  `$fields` array, and the value being the string of the error. `$errors`\n             *  is passed by reference.\n             */\n            Symphony::ExtensionManager()->notifyMembers('PagePostValidate', '/blueprints/pages/', array('fields' => $fields, 'errors' => &$errors));\n\n            if (empty($this->_errors)) {\n\n                if ($fields['params']) {\n                    $fields['params'] = trim(preg_replace('@\\/{2,}@', '/', $fields['params']), '/');\n                }\n\n                // Clean up type list\n                $types = preg_split('/\\s*,\\s*/', $fields['type'], -1, PREG_SPLIT_NO_EMPTY);\n                $types = @array_map('trim', $types);\n                unset($fields['type']);\n\n                $fields['parent'] = ($fields['parent'] != __('None') ? $fields['parent'] : null);\n                $fields['data_sources'] = is_array($fields['data_sources']) ? implode(',', $fields['data_sources']) : null;\n                $fields['events'] = is_array($fields['events']) ? implode(',', $fields['events']) : null;\n                $fields['path'] = null;\n\n                if ($fields['parent']) {\n                    $fields['path'] = PageManager::resolvePagePath((integer)$fields['parent']);\n                }\n\n                // Check for duplicates:\n                $current = PageManager::fetchPageByID($page_id);\n\n                if (empty($current)) {\n                    $fields['sortorder'] = PageManager::fetchNextSortOrder();\n                }\n\n                $where = array();\n\n                if (!empty($current)) {\n                    $where[] = \"p.id != {$page_id}\";\n                }\n\n                $where[] = \"p.handle = '\" . $fields['handle'] . \"'\";\n                $where[] = (is_null($fields['path']))\n                    ? \"p.path IS null\"\n                    : \"p.path = '\" . $fields['path'] . \"'\";\n                $duplicate = PageManager::fetch(false, array('*'), $where);\n\n                // If duplicate\n                if (!empty($duplicate)) {\n                    $this->_errors['handle'] = __('A page with that handle already exists');\n\n                    // Create or move files:\n                } else {\n                    // New page?\n                    if (empty($current)) {\n                        $file_created = PageManager::createPageFiles(\n                            $fields['path'],\n                            $fields['handle']\n                        );\n\n                        // Existing page, potentially rename files\n                    } else {\n                        $file_created = PageManager::createPageFiles(\n                            $fields['path'],\n                            $fields['handle'],\n                            $current['path'],\n                            $current['handle']\n                        );\n                    }\n\n                    // If the file wasn't created, it's usually permissions related\n                    if (!$file_created) {\n                        return $this->pageAlert(\n                            __('Page Template could not be written to disk.')\n                            . ' ' . __('Please check permissions on %s.', array('<code>/workspace/pages</code>')),\n                            Alert::ERROR\n                        );\n                    }\n\n                    // Insert the new data:\n                    if (empty($current)) {\n                        /**\n                         * Just prior to creating a new Page record in `tbl_pages`, provided\n                         * with the `$fields` associative array. Use with caution, as no\n                         * duplicate page checks are run after this delegate has fired\n                         *\n                         * @delegate PagePreCreate\n                         * @since Symphony 2.2\n                         * @param string $context\n                         * '/blueprints/pages/'\n                         * @param array $fields\n                         *  The `$_POST['fields']` array passed by reference\n                         */\n                        Symphony::ExtensionManager()->notifyMembers('PagePreCreate', '/blueprints/pages/', array('fields' => &$fields));\n\n                        if (!$page_id = PageManager::add($fields)) {\n                            $this->pageAlert(\n                                __('Unknown errors occurred while attempting to save.')\n                                . '<a href=\"' . SYMPHONY_URL . '/system/log/\">'\n                                . __('Check your activity log')\n                                . '</a>.',\n                                Alert::ERROR\n                            );\n                        } else {\n                            /**\n                             * Just after the creation of a new page in `tbl_pages`\n                             *\n                             * @delegate PagePostCreate\n                             * @since Symphony 2.2\n                             * @param string $context\n                             * '/blueprints/pages/'\n                             * @param integer $page_id\n                             *  The ID of the newly created Page\n                             * @param array $fields\n                             *  An associative array of data that was just saved for this page\n                             */\n                            Symphony::ExtensionManager()->notifyMembers('PagePostCreate', '/blueprints/pages/', array('page_id' => $page_id, 'fields' => &$fields));\n\n                            $redirect = \"/blueprints/pages/edit/{$page_id}/created/{$parent_link_suffix}\";\n                        }\n\n                        // Update existing:\n                    } else {\n                        /**\n                         * Just prior to updating a Page record in `tbl_pages`, provided\n                         * with the `$fields` associative array. Use with caution, as no\n                         * duplicate page checks are run after this delegate has fired\n                         *\n                         * @delegate PagePreEdit\n                         * @since Symphony 2.2\n                         * @param string $context\n                         * '/blueprints/pages/'\n                         * @param integer $page_id\n                         *  The ID of the Page that is about to be updated\n                         * @param array $fields\n                         *  The `$_POST['fields']` array passed by reference\n                         */\n                        Symphony::ExtensionManager()->notifyMembers('PagePreEdit', '/blueprints/pages/', array('page_id' => $page_id, 'fields' => &$fields));\n\n                        if (!PageManager::edit($page_id, $fields, true)) {\n                            return $this->pageAlert(\n                                __('Unknown errors occurred while attempting to save.')\n                                . '<a href=\"' . SYMPHONY_URL . '/system/log/\">'\n                                . __('Check your activity log')\n                                . '</a>.',\n                                Alert::ERROR\n                            );\n                        } else {\n                            /**\n                             * Just after updating a page in `tbl_pages`\n                             *\n                             * @delegate PagePostEdit\n                             * @since Symphony 2.2\n                             * @param string $context\n                             * '/blueprints/pages/'\n                             * @param integer $page_id\n                             *  The ID of the Page that was just updated\n                             * @param array $fields\n                             *  An associative array of data that was just saved for this page\n                             */\n                            Symphony::ExtensionManager()->notifyMembers('PagePostEdit', '/blueprints/pages/', array('page_id' => $page_id, 'fields' => $fields));\n\n                            $redirect = \"/blueprints/pages/edit/{$page_id}/saved/{$parent_link_suffix}\";\n                        }\n                    }\n                }\n\n                // Only proceed if there was no errors saving/creating the page\n                if (empty($this->_errors)) {\n                    /**\n                     * Just before the page's types are saved into `tbl_pages_types`.\n                     * Use with caution as no further processing is done on the `$types`\n                     * array to prevent duplicate `$types` from occurring (ie. two index\n                     * page types). Your logic can use the PageManger::hasPageTypeBeenUsed\n                     * function to perform this logic.\n                     *\n                     * @delegate PageTypePreCreate\n                     * @since Symphony 2.2\n                     * @see toolkit.PageManager#hasPageTypeBeenUsed\n                     * @param string $context\n                     * '/blueprints/pages/'\n                     * @param integer $page_id\n                     *  The ID of the Page that was just created or updated\n                     * @param array $types\n                     *  An associative array of the types for this page passed by reference.\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('PageTypePreCreate', '/blueprints/pages/', array('page_id' => $page_id, 'types' => &$types));\n\n                    // Assign page types:\n                    PageManager::addPageTypesToPage($page_id, $types);\n\n                    // Find and update children:\n                    if ($this->_context[0] == 'edit') {\n                        PageManager::editPageChildren($page_id, $fields['path'] . '/' . $fields['handle']);\n                    }\n\n                    if ($redirect) {\n                        redirect(SYMPHONY_URL . $redirect);\n                    }\n                }\n            }\n\n            // If there was any errors, either with pre processing or because of a\n            // duplicate page, return.\n            if (is_array($this->_errors) && !empty($this->_errors)) {\n                return $this->pageAlert(\n                    __('An error occurred while processing this form. See below for details.'),\n                    Alert::ERROR\n                );\n            }\n        }\n    }\n\n    public function __actionDelete($pages, $redirect)\n    {\n        $success = true;\n        $deleted_page_ids = array();\n\n        if (!is_array($pages)) {\n            $pages = array($pages);\n        }\n\n        /**\n         * Prior to deleting Pages\n         *\n         * @delegate PagePreDelete\n         * @since Symphony 2.2\n         * @param string $context\n         * '/blueprints/pages/'\n         * @param array $page_ids\n         *  An array of Page ID's that are about to be deleted, passed\n         *  by reference\n         * @param string $redirect\n         *  The absolute path that the Developer will be redirected to\n         *  after the Pages are deleted\n         */\n        Symphony::ExtensionManager()->notifyMembers('PagePreDelete', '/blueprints/pages/', array('page_ids' => &$pages, 'redirect' => &$redirect));\n\n        foreach ($pages as $page_id) {\n            $page = PageManager::fetchPageByID($page_id);\n\n            if (empty($page)) {\n                $success = false;\n                $this->pageAlert(\n                    __('Page could not be deleted because it does not exist.'),\n                    Alert::ERROR\n                );\n\n                break;\n            }\n\n            if (PageManager::hasChildPages($page_id)) {\n                $this->_hilights[] = $page['id'];\n                $success = false;\n                $this->pageAlert(\n                    __('Page could not be deleted because it has children.'),\n                    Alert::ERROR\n                );\n\n                continue;\n            }\n\n            if (!PageManager::deletePageFiles($page['path'], $page['handle'])) {\n                $this->_hilights[] = $page['id'];\n                $success = false;\n                $this->pageAlert(\n                    __('One or more pages could not be deleted.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/pages</code>')),\n                    Alert::ERROR\n                );\n\n                continue;\n            }\n\n            if (PageManager::delete($page_id, false)) {\n                $deleted_page_ids[] = $page_id;\n            }\n        }\n\n        if ($success) {\n            /**\n             * Fires after all Pages have been deleted\n             *\n             * @delegate PagePostDelete\n             * @since Symphony 2.3\n             * @param string $context\n             * '/blueprints/pages/'\n             * @param array $page_ids\n             *  The page ID's that were just deleted\n             */\n            Symphony::ExtensionManager()->notifyMembers('PagePostDelete', '/blueprints/pages/', array('page_ids' => $deleted_page_ids));\n            redirect($redirect);\n        }\n    }\n}\n"], "filenames": ["symphony/content/content.blueprintspages.php"], "buggy_code_start_loc": [33], "buggy_code_end_loc": [514], "fixing_code_start_loc": [33], "fixing_code_end_loc": [541], "type": "CWE-79", "message": "content/content.blueprintspages.php in Symphony 2.7.6 has XSS via the pages content page.", "other": {"cve": {"id": "CVE-2018-12043", "sourceIdentifier": "cve@mitre.org", "published": "2018-06-07T20:29:00.323", "lastModified": "2018-07-12T14:44:09.820", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "content/content.blueprintspages.php in Symphony 2.7.6 has XSS via the pages content page."}, {"lang": "es", "value": "content/content.blueprintspages.php en Symphony 2.7.6 tiene Cross-Site Scripting (XSS) mediante la p\u00e1gina de contenido de p\u00e1ginas."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:getsymphony:symphony:2.7.6:*:*:*:*:*:*:*", "matchCriteriaId": "B2D7D3E9-265F-4F2C-8CF3-2AFD22525048"}]}]}], "references": [{"url": "https://github.com/symphonycms/symphony-2/commit/1ace6b31867cc83267b3550686271c9c65ac3ec0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/symphonycms/symphony-2/commit/1ace6b31867cc83267b3550686271c9c65ac3ec0"}}