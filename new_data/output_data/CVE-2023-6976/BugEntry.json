{"buggy_code": ["# Define all the service endpoint handlers here.\nimport json\nimport logging\nimport os\nimport pathlib\nimport posixpath\nimport re\nimport tempfile\nimport time\nimport urllib\nfrom functools import wraps\n\nimport requests\nfrom flask import Response, current_app, request, send_file\nfrom google.protobuf import descriptor\nfrom google.protobuf.json_format import ParseError\n\nfrom mlflow.entities import DatasetInput, ExperimentTag, FileInfo, Metric, Param, RunTag, ViewType\nfrom mlflow.entities.model_registry import ModelVersionTag, RegisteredModelTag\nfrom mlflow.entities.multipart_upload import MultipartUploadPart\nfrom mlflow.environment_variables import (\n    MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE,\n    MLFLOW_DEPLOYMENTS_TARGET,\n)\nfrom mlflow.exceptions import MlflowException, _UnsupportedMultipartUploadException\nfrom mlflow.models import Model\nfrom mlflow.protos import databricks_pb2\nfrom mlflow.protos.databricks_pb2 import (\n    INVALID_PARAMETER_VALUE,\n    RESOURCE_DOES_NOT_EXIST,\n)\nfrom mlflow.protos.mlflow_artifacts_pb2 import (\n    AbortMultipartUpload,\n    CompleteMultipartUpload,\n    CreateMultipartUpload,\n    DeleteArtifact,\n    DownloadArtifact,\n    MlflowArtifactsService,\n    UploadArtifact,\n)\nfrom mlflow.protos.mlflow_artifacts_pb2 import (\n    ListArtifacts as ListArtifactsMlflowArtifacts,\n)\nfrom mlflow.protos.model_registry_pb2 import (\n    CreateModelVersion,\n    CreateRegisteredModel,\n    DeleteModelVersion,\n    DeleteModelVersionTag,\n    DeleteRegisteredModel,\n    DeleteRegisteredModelAlias,\n    DeleteRegisteredModelTag,\n    GetLatestVersions,\n    GetModelVersion,\n    GetModelVersionByAlias,\n    GetModelVersionDownloadUri,\n    GetRegisteredModel,\n    ModelRegistryService,\n    RenameRegisteredModel,\n    SearchModelVersions,\n    SearchRegisteredModels,\n    SetModelVersionTag,\n    SetRegisteredModelAlias,\n    SetRegisteredModelTag,\n    TransitionModelVersionStage,\n    UpdateModelVersion,\n    UpdateRegisteredModel,\n)\nfrom mlflow.protos.service_pb2 import (\n    CreateExperiment,\n    CreateRun,\n    DeleteExperiment,\n    DeleteRun,\n    DeleteTag,\n    GetExperiment,\n    GetExperimentByName,\n    GetMetricHistory,\n    GetRun,\n    ListArtifacts,\n    LogBatch,\n    LogInputs,\n    LogMetric,\n    LogModel,\n    LogParam,\n    MlflowService,\n    RestoreExperiment,\n    RestoreRun,\n    SearchExperiments,\n    SearchRuns,\n    SetExperimentTag,\n    SetTag,\n    UpdateExperiment,\n    UpdateRun,\n)\nfrom mlflow.server.validation import _validate_content_type\nfrom mlflow.store.artifact.artifact_repo import MultipartUploadMixin\nfrom mlflow.store.artifact.artifact_repository_registry import get_artifact_repository\nfrom mlflow.store.db.db_types import DATABASE_ENGINES\nfrom mlflow.tracking._model_registry import utils as registry_utils\nfrom mlflow.tracking._model_registry.registry import ModelRegistryStoreRegistry\nfrom mlflow.tracking._tracking_service import utils\nfrom mlflow.tracking._tracking_service.registry import TrackingStoreRegistry\nfrom mlflow.tracking.registry import UnsupportedModelRegistryStoreURIException\nfrom mlflow.utils.file_utils import local_file_uri_to_path\nfrom mlflow.utils.mime_type_utils import _guess_mime_type\nfrom mlflow.utils.promptlab_utils import _create_promptlab_run_impl\nfrom mlflow.utils.proto_json_utils import message_to_json, parse_dict\nfrom mlflow.utils.string_utils import is_string_type\nfrom mlflow.utils.uri import is_file_uri, is_local_uri, validate_path_is_safe, validate_query_string\nfrom mlflow.utils.validation import _validate_batch_log_api_req\n\n_logger = logging.getLogger(__name__)\n_tracking_store = None\n_model_registry_store = None\n_artifact_repo = None\nSTATIC_PREFIX_ENV_VAR = \"_MLFLOW_STATIC_PREFIX\"\n\n\nclass TrackingStoreRegistryWrapper(TrackingStoreRegistry):\n    def __init__(self):\n        super().__init__()\n        self.register(\"\", self._get_file_store)\n        self.register(\"file\", self._get_file_store)\n        for scheme in DATABASE_ENGINES:\n            self.register(scheme, self._get_sqlalchemy_store)\n        self.register_entrypoints()\n\n    @classmethod\n    def _get_file_store(cls, store_uri, artifact_uri):\n        from mlflow.store.tracking.file_store import FileStore\n\n        return FileStore(store_uri, artifact_uri)\n\n    @classmethod\n    def _get_sqlalchemy_store(cls, store_uri, artifact_uri):\n        from mlflow.store.tracking.sqlalchemy_store import SqlAlchemyStore\n\n        return SqlAlchemyStore(store_uri, artifact_uri)\n\n\nclass ModelRegistryStoreRegistryWrapper(ModelRegistryStoreRegistry):\n    def __init__(self):\n        super().__init__()\n        self.register(\"\", self._get_file_store)\n        self.register(\"file\", self._get_file_store)\n        for scheme in DATABASE_ENGINES:\n            self.register(scheme, self._get_sqlalchemy_store)\n        self.register_entrypoints()\n\n    @classmethod\n    def _get_file_store(cls, store_uri):\n        from mlflow.store.model_registry.file_store import FileStore\n\n        return FileStore(store_uri)\n\n    @classmethod\n    def _get_sqlalchemy_store(cls, store_uri):\n        from mlflow.store.model_registry.sqlalchemy_store import SqlAlchemyStore\n\n        return SqlAlchemyStore(store_uri)\n\n\n_tracking_store_registry = TrackingStoreRegistryWrapper()\n_model_registry_store_registry = ModelRegistryStoreRegistryWrapper()\n\n\ndef _get_artifact_repo_mlflow_artifacts():\n    \"\"\"\n    Get an artifact repository specified by ``--artifacts-destination`` option for ``mlflow server``\n    command.\n    \"\"\"\n    from mlflow.server import ARTIFACTS_DESTINATION_ENV_VAR\n\n    global _artifact_repo\n    if _artifact_repo is None:\n        _artifact_repo = get_artifact_repository(os.environ[ARTIFACTS_DESTINATION_ENV_VAR])\n    return _artifact_repo\n\n\ndef _is_serving_proxied_artifacts():\n    \"\"\"\n    :return: ``True`` if the MLflow server is serving proxied artifacts (i.e. acting as a proxy for\n             artifact upload / download / list operations), as would be enabled by specifying the\n             ``--serve-artifacts`` configuration option. ``False`` otherwise.\n    \"\"\"\n    from mlflow.server import SERVE_ARTIFACTS_ENV_VAR\n\n    return os.environ.get(SERVE_ARTIFACTS_ENV_VAR, \"false\") == \"true\"\n\n\ndef _is_servable_proxied_run_artifact_root(run_artifact_root):\n    \"\"\"\n    Determines whether or not the following are true:\n\n    - The specified Run artifact root is a proxied artifact root (i.e. an artifact root with scheme\n      ``http``, ``https``, or ``mlflow-artifacts``).\n\n    - The MLflow server is capable of resolving and accessing the underlying storage location\n      corresponding to the proxied artifact root, allowing it to fulfill artifact list and\n      download requests by using this storage location directly.\n\n    :param run_artifact_root: The Run artifact root location (URI).\n    :return: ``True`` if the specified Run artifact root refers to proxied artifacts that can be\n             served by this MLflow server (i.e. the server has access to the destination and\n             can respond to list and download requests for the artifact). ``False`` otherwise.\n    \"\"\"\n    parsed_run_artifact_root = urllib.parse.urlparse(run_artifact_root)\n    # NB: If the run artifact root is a proxied artifact root (has scheme `http`, `https`, or\n    # `mlflow-artifacts`) *and* the MLflow server is configured to serve artifacts, the MLflow\n    # server always assumes that it has access to the underlying storage location for the proxied\n    # artifacts. This may not always be accurate. For example:\n    #\n    # An organization may initially use the MLflow server to serve Tracking API requests and proxy\n    # access to artifacts stored in Location A (via `mlflow server --serve-artifacts`). Then, for\n    # scalability and / or security purposes, the organization may decide to store artifacts in a\n    # new location B and set up a separate server (e.g. `mlflow server --artifacts-only`) to proxy\n    # access to artifacts stored in Location B.\n    #\n    # In this scenario, requests for artifacts stored in Location B that are sent to the original\n    # MLflow server will fail if the original MLflow server does not have access to Location B\n    # because it will assume that it can serve all proxied artifacts regardless of the underlying\n    # location. Such failures can be remediated by granting the original MLflow server access to\n    # Location B.\n    return (\n        parsed_run_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]\n        and _is_serving_proxied_artifacts()\n    )\n\n\ndef _get_proxied_run_artifact_destination_path(proxied_artifact_root, relative_path=None):\n    \"\"\"\n    Resolves the specified proxied artifact location within a Run to a concrete storage location.\n\n    :param proxied_artifact_root: The Run artifact root location (URI) with scheme ``http``,\n                                  ``https``, or `mlflow-artifacts` that can be resolved by the\n                                  MLflow server to a concrete storage location.\n    :param relative_path: The relative path of the destination within the specified\n                          ``proxied_artifact_root``. If ``None``, the destination is assumed to be\n                          the resolved ``proxied_artifact_root``.\n    :return: The storage location of the specified artifact.\n    \"\"\"\n    parsed_proxied_artifact_root = urllib.parse.urlparse(proxied_artifact_root)\n    assert parsed_proxied_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]\n\n    if parsed_proxied_artifact_root.scheme == \"mlflow-artifacts\":\n        # If the proxied artifact root is an `mlflow-artifacts` URI, the run artifact root path is\n        # simply the path component of the URI, since the fully-qualified format of an\n        # `mlflow-artifacts` URI is `mlflow-artifacts://<netloc>/path/to/artifact`\n        proxied_run_artifact_root_path = parsed_proxied_artifact_root.path.lstrip(\"/\")\n    else:\n        # In this case, the proxied artifact root is an HTTP(S) URL referring to an mlflow-artifacts\n        # API route that can be used to download the artifact. These routes are always anchored at\n        # `/api/2.0/mlflow-artifacts/artifacts`. Accordingly, we split the path on this route anchor\n        # and interpret the rest of the path (everything after the route anchor) as the run artifact\n        # root path\n        mlflow_artifacts_http_route_anchor = \"/api/2.0/mlflow-artifacts/artifacts/\"\n        assert mlflow_artifacts_http_route_anchor in parsed_proxied_artifact_root.path\n\n        proxied_run_artifact_root_path = parsed_proxied_artifact_root.path.split(\n            mlflow_artifacts_http_route_anchor\n        )[1].lstrip(\"/\")\n\n    return (\n        posixpath.join(proxied_run_artifact_root_path, relative_path)\n        if relative_path is not None\n        else proxied_run_artifact_root_path\n    )\n\n\ndef _get_tracking_store(backend_store_uri=None, default_artifact_root=None):\n    from mlflow.server import ARTIFACT_ROOT_ENV_VAR, BACKEND_STORE_URI_ENV_VAR\n\n    global _tracking_store\n    if _tracking_store is None:\n        store_uri = backend_store_uri or os.environ.get(BACKEND_STORE_URI_ENV_VAR, None)\n        artifact_root = default_artifact_root or os.environ.get(ARTIFACT_ROOT_ENV_VAR, None)\n        _tracking_store = _tracking_store_registry.get_store(store_uri, artifact_root)\n        utils.set_tracking_uri(store_uri)\n    return _tracking_store\n\n\ndef _get_model_registry_store(registry_store_uri=None):\n    from mlflow.server import BACKEND_STORE_URI_ENV_VAR, REGISTRY_STORE_URI_ENV_VAR\n\n    global _model_registry_store\n    if _model_registry_store is None:\n        store_uri = (\n            registry_store_uri\n            or os.environ.get(REGISTRY_STORE_URI_ENV_VAR, None)\n            or os.environ.get(BACKEND_STORE_URI_ENV_VAR, None)\n        )\n        _model_registry_store = _model_registry_store_registry.get_store(store_uri)\n        registry_utils.set_registry_uri(store_uri)\n    return _model_registry_store\n\n\ndef initialize_backend_stores(\n    backend_store_uri=None, registry_store_uri=None, default_artifact_root=None\n):\n    _get_tracking_store(backend_store_uri, default_artifact_root)\n    try:\n        _get_model_registry_store(registry_store_uri)\n    except UnsupportedModelRegistryStoreURIException:\n        pass\n\n\ndef _assert_string(x):\n    assert isinstance(x, str)\n\n\ndef _assert_intlike(x):\n    try:\n        x = int(x)\n    except ValueError:\n        pass\n\n    assert isinstance(x, int)\n\n\ndef _assert_bool(x):\n    assert isinstance(x, bool)\n\n\ndef _assert_floatlike(x):\n    try:\n        x = float(x)\n    except ValueError:\n        pass\n\n    assert isinstance(x, float)\n\n\ndef _assert_array(x):\n    assert isinstance(x, list)\n\n\ndef _assert_required(x):\n    assert x is not None\n    # When parsing JSON payloads via proto, absent string fields\n    # are expressed as empty strings\n    assert x != \"\"\n\n\ndef _assert_less_than_or_equal(x, max_value):\n    assert x <= max_value\n\n\ndef _assert_item_type_string(x):\n    assert all(isinstance(item, str) for item in x)\n\n\n_TYPE_VALIDATORS = {\n    _assert_intlike,\n    _assert_string,\n    _assert_bool,\n    _assert_floatlike,\n    _assert_array,\n    _assert_item_type_string,\n}\n\n\ndef _validate_param_against_schema(schema, param, value, proto_parsing_succeeded=False):\n    \"\"\"\n    Attempts to validate a single parameter against a specified schema.\n    Examples of the elements of the schema are type assertions and checks for required parameters.\n    Returns None on validation success. Otherwise, raises an MLFlowException if an assertion fails.\n    This method is intended to be called for side effects.\n\n            Parameters:\n    :param schema: A list of functions to validate the parameter against.\n    :param param: The string name of the parameter being validated.\n    :param value: The corresponding value of the `param` being validated.\n    :param proto_parsing_succeeded: A boolean value indicating whether proto parsing succeeded.\n                                    If the proto was successfully parsed, we assume all of the types\n                                    of the parameters in the request body were correctly specified,\n                                    and thus we skip validating types. If proto parsing failed,\n                                    then we validate types in addition to the rest of the schema.\n                                    For details, see https://github.com/mlflow/mlflow/pull/\n                                    5458#issuecomment-1080880870.\n    \"\"\"\n\n    for f in schema:\n        if f in _TYPE_VALIDATORS and proto_parsing_succeeded:\n            continue\n\n        try:\n            f(value)\n        except AssertionError:\n            if f == _assert_required:\n                message = f\"Missing value for required parameter '{param}'.\"\n            else:\n                message = (\n                    f\"Invalid value {value} for parameter '{param}' supplied.\"\n                    f\" Hint: Value was of type '{type(value).__name__}'.\"\n                )\n            raise MlflowException(\n                message=(\n                    message + \" See the API docs for more information about request parameters.\"\n                ),\n                error_code=INVALID_PARAMETER_VALUE,\n            )\n\n    return None\n\n\ndef _get_request_json(flask_request=request):\n    _validate_content_type(flask_request, [\"application/json\"])\n    return flask_request.get_json(force=True, silent=True)\n\n\ndef _get_request_message(request_message, flask_request=request, schema=None):\n    from querystring_parser import parser\n\n    if flask_request.method == \"GET\" and len(flask_request.query_string) > 0:\n        # This is a hack to make arrays of length 1 work with the parser.\n        # for example experiment_ids%5B%5D=0 should be parsed to {experiment_ids: [0]}\n        # but it gets parsed to {experiment_ids: 0}\n        # but it doesn't. However, experiment_ids%5B0%5D=0 will get parsed to the right\n        # result.\n        query_string = re.sub(\"%5B%5D\", \"%5B0%5D\", flask_request.query_string.decode(\"utf-8\"))\n        request_dict = parser.parse(query_string, normalized=True)\n        # Convert atomic values of repeated fields to lists before calling protobuf deserialization.\n        # Context: We parse the parameter string into a dictionary outside of protobuf since\n        # protobuf does not know how to read the query parameters directly. The query parser above\n        # has no type information and hence any parameter that occurs exactly once is parsed as an\n        # atomic value. Since protobuf requires that the values of repeated fields are lists,\n        # deserialization will fail unless we do the fix below.\n        for field in request_message.DESCRIPTOR.fields:\n            if (\n                field.label == descriptor.FieldDescriptor.LABEL_REPEATED\n                and field.name in request_dict\n            ):\n                if not isinstance(request_dict[field.name], list):\n                    request_dict[field.name] = [request_dict[field.name]]\n        parse_dict(request_dict, request_message)\n        return request_message\n\n    request_json = _get_request_json(flask_request)\n\n    # Older clients may post their JSON double-encoded as strings, so the get_json\n    # above actually converts it to a string. Therefore, we check this condition\n    # (which we can tell for sure because any proper request should be a dictionary),\n    # and decode it a second time.\n    if is_string_type(request_json):\n        request_json = json.loads(request_json)\n\n    # If request doesn't have json body then assume it's empty.\n    if request_json is None:\n        request_json = {}\n\n    proto_parsing_succeeded = True\n    try:\n        parse_dict(request_json, request_message)\n    except ParseError:\n        proto_parsing_succeeded = False\n\n    schema = schema or {}\n    for schema_key, schema_validation_fns in schema.items():\n        if schema_key in request_json or _assert_required in schema_validation_fns:\n            value = request_json.get(schema_key)\n            if schema_key == \"run_id\" and value is None and \"run_uuid\" in request_json:\n                value = request_json.get(\"run_uuid\")\n            _validate_param_against_schema(\n                schema=schema_validation_fns,\n                param=schema_key,\n                value=value,\n                proto_parsing_succeeded=proto_parsing_succeeded,\n            )\n\n    return request_message\n\n\ndef _response_with_file_attachment_headers(file_path, response):\n    mime_type = _guess_mime_type(file_path)\n    filename = pathlib.Path(file_path).name\n    response.mimetype = mime_type\n    content_disposition_header_name = \"Content-Disposition\"\n    if content_disposition_header_name not in response.headers:\n        response.headers[content_disposition_header_name] = f\"attachment; filename={filename}\"\n    response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n    response.headers[\"Content-Type\"] = mime_type\n    return response\n\n\ndef _send_artifact(artifact_repository, path):\n    file_path = os.path.abspath(artifact_repository.download_artifacts(path))\n    # Always send artifacts as attachments to prevent the browser from displaying them on our web\n    # server's domain, which might enable XSS.\n    mime_type = _guess_mime_type(file_path)\n    file_sender_response = send_file(file_path, mimetype=mime_type, as_attachment=True)\n    return _response_with_file_attachment_headers(file_path, file_sender_response)\n\n\ndef catch_mlflow_exception(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except MlflowException as e:\n            response = Response(mimetype=\"application/json\")\n            response.set_data(e.serialize_as_json())\n            response.status_code = e.get_http_status_code()\n            return response\n\n    return wrapper\n\n\ndef _disable_unless_serve_artifacts(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        if not _is_serving_proxied_artifacts():\n            return Response(\n                (\n                    f\"Endpoint: {request.url_rule} disabled due to the mlflow server running \"\n                    \"with `--no-serve-artifacts`. To enable artifacts server functionality, \"\n                    \"run `mlflow server` with `--serve-artifacts`\"\n                ),\n                503,\n            )\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\ndef _disable_if_artifacts_only(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        from mlflow.server import ARTIFACTS_ONLY_ENV_VAR\n\n        if os.environ.get(ARTIFACTS_ONLY_ENV_VAR):\n            return Response(\n                (\n                    f\"Endpoint: {request.url_rule} disabled due to the mlflow server running \"\n                    \"in `--artifacts-only` mode. To enable tracking server functionality, run \"\n                    \"`mlflow server` without `--artifacts-only`\"\n                ),\n                503,\n            )\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\n@catch_mlflow_exception\ndef get_artifact_handler():\n    from querystring_parser import parser\n\n    query_string = request.query_string.decode(\"utf-8\")\n    request_dict = parser.parse(query_string, normalized=True)\n    run_id = request_dict.get(\"run_id\") or request_dict.get(\"run_uuid\")\n    path = request_dict[\"path\"]\n    validate_path_is_safe(path)\n    run = _get_tracking_store().get_run(run_id)\n\n    if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):\n        artifact_repo = _get_artifact_repo_mlflow_artifacts()\n        artifact_path = _get_proxied_run_artifact_destination_path(\n            proxied_artifact_root=run.info.artifact_uri,\n            relative_path=path,\n        )\n    else:\n        artifact_repo = _get_artifact_repo(run)\n        artifact_path = path\n\n    return _send_artifact(artifact_repo, artifact_path)\n\n\ndef _not_implemented():\n    response = Response()\n    response.status_code = 404\n    return response\n\n\n# Tracking Server APIs\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_experiment():\n    request_message = _get_request_message(\n        CreateExperiment(),\n        schema={\n            \"name\": [_assert_required, _assert_string],\n            \"artifact_location\": [_assert_string],\n            \"tags\": [_assert_array],\n        },\n    )\n\n    tags = [ExperimentTag(tag.key, tag.value) for tag in request_message.tags]\n\n    # Validate query string in artifact location to prevent attacks\n    parsed_artifact_locaion = urllib.parse.urlparse(request_message.artifact_location)\n    validate_query_string(parsed_artifact_locaion.query)\n\n    experiment_id = _get_tracking_store().create_experiment(\n        request_message.name, request_message.artifact_location, tags\n    )\n    response_message = CreateExperiment.Response()\n    response_message.experiment_id = experiment_id\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_experiment():\n    request_message = _get_request_message(\n        GetExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}\n    )\n    response_message = GetExperiment.Response()\n    experiment = _get_tracking_store().get_experiment(request_message.experiment_id).to_proto()\n    response_message.experiment.MergeFrom(experiment)\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_experiment_by_name():\n    request_message = _get_request_message(\n        GetExperimentByName(), schema={\"experiment_name\": [_assert_required, _assert_string]}\n    )\n    response_message = GetExperimentByName.Response()\n    store_exp = _get_tracking_store().get_experiment_by_name(request_message.experiment_name)\n    if store_exp is None:\n        raise MlflowException(\n            f\"Could not find experiment with name '{request_message.experiment_name}'\",\n            error_code=RESOURCE_DOES_NOT_EXIST,\n        )\n    experiment = store_exp.to_proto()\n    response_message.experiment.MergeFrom(experiment)\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_experiment():\n    request_message = _get_request_message(\n        DeleteExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().delete_experiment(request_message.experiment_id)\n    response_message = DeleteExperiment.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _restore_experiment():\n    request_message = _get_request_message(\n        RestoreExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().restore_experiment(request_message.experiment_id)\n    response_message = RestoreExperiment.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_experiment():\n    request_message = _get_request_message(\n        UpdateExperiment(),\n        schema={\n            \"experiment_id\": [_assert_required, _assert_string],\n            \"new_name\": [_assert_string, _assert_required],\n        },\n    )\n    if request_message.new_name:\n        _get_tracking_store().rename_experiment(\n            request_message.experiment_id, request_message.new_name\n        )\n    response_message = UpdateExperiment.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_run():\n    request_message = _get_request_message(\n        CreateRun(),\n        schema={\n            \"experiment_id\": [_assert_string],\n            \"start_time\": [_assert_intlike],\n            \"run_name\": [_assert_string],\n        },\n    )\n\n    tags = [RunTag(tag.key, tag.value) for tag in request_message.tags]\n    run = _get_tracking_store().create_run(\n        experiment_id=request_message.experiment_id,\n        user_id=request_message.user_id,\n        start_time=request_message.start_time,\n        tags=tags,\n        run_name=request_message.run_name,\n    )\n\n    response_message = CreateRun.Response()\n    response_message.run.MergeFrom(run.to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_run():\n    request_message = _get_request_message(\n        UpdateRun(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"end_time\": [_assert_intlike],\n            \"status\": [_assert_string],\n            \"run_name\": [_assert_string],\n        },\n    )\n    run_id = request_message.run_id or request_message.run_uuid\n    run_name = request_message.run_name if request_message.HasField(\"run_name\") else None\n    end_time = request_message.end_time if request_message.HasField(\"end_time\") else None\n    status = request_message.status if request_message.HasField(\"status\") else None\n    updated_info = _get_tracking_store().update_run_info(run_id, status, end_time, run_name)\n    response_message = UpdateRun.Response(run_info=updated_info.to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_run():\n    request_message = _get_request_message(\n        DeleteRun(), schema={\"run_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().delete_run(request_message.run_id)\n    response_message = DeleteRun.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _restore_run():\n    request_message = _get_request_message(\n        RestoreRun(), schema={\"run_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().restore_run(request_message.run_id)\n    response_message = RestoreRun.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_metric():\n    request_message = _get_request_message(\n        LogMetric(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_required, _assert_floatlike],\n            \"timestamp\": [_assert_intlike, _assert_required],\n            \"step\": [_assert_intlike],\n        },\n    )\n    metric = Metric(\n        request_message.key, request_message.value, request_message.timestamp, request_message.step\n    )\n    run_id = request_message.run_id or request_message.run_uuid\n    _get_tracking_store().log_metric(run_id, metric)\n    response_message = LogMetric.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_param():\n    request_message = _get_request_message(\n        LogParam(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_string],\n        },\n    )\n    param = Param(request_message.key, request_message.value)\n    run_id = request_message.run_id or request_message.run_uuid\n    _get_tracking_store().log_param(run_id, param)\n    response_message = LogParam.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_inputs():\n    request_message = _get_request_message(\n        LogInputs(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"datasets\": [_assert_required, _assert_array],\n        },\n    )\n    run_id = request_message.run_id\n    datasets = [\n        DatasetInput.from_proto(proto_dataset_input)\n        for proto_dataset_input in request_message.datasets\n    ]\n\n    _get_tracking_store().log_inputs(run_id, datasets=datasets)\n    response_message = LogInputs.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_experiment_tag():\n    request_message = _get_request_message(\n        SetExperimentTag(),\n        schema={\n            \"experiment_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = ExperimentTag(request_message.key, request_message.value)\n    _get_tracking_store().set_experiment_tag(request_message.experiment_id, tag)\n    response_message = SetExperimentTag.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_tag():\n    request_message = _get_request_message(\n        SetTag(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = RunTag(request_message.key, request_message.value)\n    run_id = request_message.run_id or request_message.run_uuid\n    _get_tracking_store().set_tag(run_id, tag)\n    response_message = SetTag.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_tag():\n    request_message = _get_request_message(\n        DeleteTag(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n        },\n    )\n    _get_tracking_store().delete_tag(request_message.run_id, request_message.key)\n    response_message = DeleteTag.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_run():\n    request_message = _get_request_message(\n        GetRun(), schema={\"run_id\": [_assert_required, _assert_string]}\n    )\n    response_message = GetRun.Response()\n    run_id = request_message.run_id or request_message.run_uuid\n    response_message.run.MergeFrom(_get_tracking_store().get_run(run_id).to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_runs():\n    request_message = _get_request_message(\n        SearchRuns(),\n        schema={\n            \"experiment_ids\": [_assert_array],\n            \"filter\": [_assert_string],\n            \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 50000)],\n            \"order_by\": [_assert_array, _assert_item_type_string],\n        },\n    )\n    response_message = SearchRuns.Response()\n    run_view_type = ViewType.ACTIVE_ONLY\n    if request_message.HasField(\"run_view_type\"):\n        run_view_type = ViewType.from_proto(request_message.run_view_type)\n    filter_string = request_message.filter\n    max_results = request_message.max_results\n    experiment_ids = request_message.experiment_ids\n    order_by = request_message.order_by\n    page_token = request_message.page_token\n    run_entities = _get_tracking_store().search_runs(\n        experiment_ids, filter_string, run_view_type, max_results, order_by, page_token\n    )\n    response_message.runs.extend([r.to_proto() for r in run_entities])\n    if run_entities.token:\n        response_message.next_page_token = run_entities.token\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _list_artifacts():\n    request_message = _get_request_message(\n        ListArtifacts(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"path\": [_assert_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    response_message = ListArtifacts.Response()\n    if request_message.HasField(\"path\"):\n        path = request_message.path\n        validate_path_is_safe(path)\n    else:\n        path = None\n    run_id = request_message.run_id or request_message.run_uuid\n    run = _get_tracking_store().get_run(run_id)\n\n    if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):\n        artifact_entities = _list_artifacts_for_proxied_run_artifact_root(\n            proxied_artifact_root=run.info.artifact_uri,\n            relative_path=path,\n        )\n    else:\n        artifact_entities = _get_artifact_repo(run).list_artifacts(path)\n\n    response_message.files.extend([a.to_proto() for a in artifact_entities])\n    response_message.root_uri = run.info.artifact_uri\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\ndef _list_artifacts_for_proxied_run_artifact_root(proxied_artifact_root, relative_path=None):\n    \"\"\"\n    Lists artifacts from the specified ``relative_path`` within the specified proxied Run artifact\n    root (i.e. a Run artifact root with scheme ``http``, ``https``, or ``mlflow-artifacts``).\n\n    :param proxied_artifact_root: The Run artifact root location (URI) with scheme ``http``,\n                                  ``https``, or ``mlflow-artifacts`` that can be resolved by the\n                                  MLflow server to a concrete storage location.\n    :param relative_path: The relative path within the specified ``proxied_artifact_root`` under\n                          which to list artifact contents. If ``None``, artifacts are listed from\n                          the ``proxied_artifact_root`` directory.\n    \"\"\"\n    parsed_proxied_artifact_root = urllib.parse.urlparse(proxied_artifact_root)\n    assert parsed_proxied_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]\n\n    artifact_destination_repo = _get_artifact_repo_mlflow_artifacts()\n    artifact_destination_path = _get_proxied_run_artifact_destination_path(\n        proxied_artifact_root=proxied_artifact_root,\n        relative_path=relative_path,\n    )\n\n    artifact_entities = []\n    for file_info in artifact_destination_repo.list_artifacts(artifact_destination_path):\n        basename = posixpath.basename(file_info.path)\n        run_relative_artifact_path = (\n            posixpath.join(relative_path, basename) if relative_path else basename\n        )\n        artifact_entities.append(\n            FileInfo(run_relative_artifact_path, file_info.is_dir, file_info.file_size)\n        )\n\n    return artifact_entities\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_metric_history():\n    request_message = _get_request_message(\n        GetMetricHistory(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"metric_key\": [_assert_string, _assert_required],\n        },\n    )\n    response_message = GetMetricHistory.Response()\n    run_id = request_message.run_id or request_message.run_uuid\n    metric_entities = _get_tracking_store().get_metric_history(run_id, request_message.metric_key)\n    response_message.metrics.extend([m.to_proto() for m in metric_entities])\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef get_metric_history_bulk_handler():\n    MAX_HISTORY_RESULTS = 25000\n    MAX_RUN_IDS_PER_REQUEST = 20\n    run_ids = request.args.to_dict(flat=False).get(\"run_id\", [])\n    if not run_ids:\n        raise MlflowException(\n            message=\"GetMetricHistoryBulk request must specify at least one run_id.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    if len(run_ids) > MAX_RUN_IDS_PER_REQUEST:\n        raise MlflowException(\n            message=(\n                f\"GetMetricHistoryBulk request cannot specify more than {MAX_RUN_IDS_PER_REQUEST}\"\n                f\" run_ids. Received {len(run_ids)} run_ids.\"\n            ),\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    metric_key = request.args.get(\"metric_key\")\n    if metric_key is None:\n        raise MlflowException(\n            message=\"GetMetricHistoryBulk request must specify a metric_key.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    max_results = int(request.args.get(\"max_results\", MAX_HISTORY_RESULTS))\n    max_results = min(max_results, MAX_HISTORY_RESULTS)\n\n    store = _get_tracking_store()\n\n    def _default_history_bulk_impl():\n        metrics_with_run_ids = []\n        for run_id in sorted(run_ids):\n            metrics_for_run = sorted(\n                store.get_metric_history(\n                    run_id=run_id,\n                    metric_key=metric_key,\n                    max_results=max_results,\n                ),\n                key=lambda metric: (metric.timestamp, metric.step, metric.value),\n            )\n            metrics_with_run_ids.extend(\n                [\n                    {\n                        \"key\": metric.key,\n                        \"value\": metric.value,\n                        \"timestamp\": metric.timestamp,\n                        \"step\": metric.step,\n                        \"run_id\": run_id,\n                    }\n                    for metric in metrics_for_run\n                ]\n            )\n        return metrics_with_run_ids\n\n    if hasattr(store, \"get_metric_history_bulk\"):\n        metrics_with_run_ids = [\n            metric.to_dict()\n            for metric in store.get_metric_history_bulk(\n                run_ids=run_ids,\n                metric_key=metric_key,\n                max_results=max_results,\n            )\n        ]\n    else:\n        metrics_with_run_ids = _default_history_bulk_impl()\n\n    return {\n        \"metrics\": metrics_with_run_ids[:max_results],\n    }\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef search_datasets_handler():\n    MAX_EXPERIMENT_IDS_PER_REQUEST = 20\n    _validate_content_type(request, [\"application/json\"])\n    experiment_ids = request.json.get(\"experiment_ids\", [])\n    if not experiment_ids:\n        raise MlflowException(\n            message=\"SearchDatasets request must specify at least one experiment_id.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    if len(experiment_ids) > MAX_EXPERIMENT_IDS_PER_REQUEST:\n        raise MlflowException(\n            message=(\n                f\"SearchDatasets request cannot specify more than {MAX_EXPERIMENT_IDS_PER_REQUEST}\"\n                f\" experiment_ids. Received {len(experiment_ids)} experiment_ids.\"\n            ),\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    store = _get_tracking_store()\n\n    if hasattr(store, \"_search_datasets\"):\n        return {\n            \"dataset_summaries\": [\n                summary.to_dict() for summary in store._search_datasets(experiment_ids)\n            ]\n        }\n    else:\n        return _not_implemented()\n\n\n@catch_mlflow_exception\ndef gateway_proxy_handler():\n    target_uri = MLFLOW_DEPLOYMENTS_TARGET.get()\n    if not target_uri:\n        # Pretend an empty gateway service is running\n        return {\"endpoints\": []}\n\n    args = request.args if request.method == \"GET\" else request.json\n\n    gateway_path = args.get(\"gateway_path\")\n    if not gateway_path:\n        raise MlflowException(\n            message=\"Deployments proxy request must specify a gateway_path.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    request_type = request.method\n    json_data = args.get(\"json_data\", None)\n\n    response = requests.request(request_type, f\"{target_uri}/{gateway_path}\", json=json_data)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise MlflowException(\n            message=f\"Deployments proxy request failed with error code {response.status_code}. \"\n            f\"Error message: {response.text}\",\n            error_code=response.status_code,\n        )\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef create_promptlab_run_handler():\n    def assert_arg_exists(arg_name, arg):\n        if not arg:\n            raise MlflowException(\n                message=f\"CreatePromptlabRun request must specify {arg_name}.\",\n                error_code=INVALID_PARAMETER_VALUE,\n            )\n\n    _validate_content_type(request, [\"application/json\"])\n\n    args = request.json\n    experiment_id = args.get(\"experiment_id\")\n    assert_arg_exists(\"experiment_id\", experiment_id)\n    run_name = args.get(\"run_name\", None)\n    tags = args.get(\"tags\", [])\n    prompt_template = args.get(\"prompt_template\")\n    assert_arg_exists(\"prompt_template\", prompt_template)\n    raw_prompt_parameters = args.get(\"prompt_parameters\")\n    assert_arg_exists(\"prompt_parameters\", raw_prompt_parameters)\n    prompt_parameters = [\n        Param(param.get(\"key\"), param.get(\"value\")) for param in args.get(\"prompt_parameters\")\n    ]\n    model_route = args.get(\"model_route\")\n    assert_arg_exists(\"model_route\", model_route)\n    raw_model_parameters = args.get(\"model_parameters\", [])\n    model_parameters = [\n        Param(param.get(\"key\"), param.get(\"value\")) for param in raw_model_parameters\n    ]\n    model_input = args.get(\"model_input\")\n    assert_arg_exists(\"model_input\", model_input)\n    model_output = args.get(\"model_output\", None)\n    raw_model_output_parameters = args.get(\"model_output_parameters\", [])\n    model_output_parameters = [\n        Param(param.get(\"key\"), param.get(\"value\")) for param in raw_model_output_parameters\n    ]\n    mlflow_version = args.get(\"mlflow_version\")\n    assert_arg_exists(\"mlflow_version\", mlflow_version)\n    user_id = args.get(\"user_id\", \"unknown\")\n\n    # use current time if not provided\n    start_time = args.get(\"start_time\", int(time.time() * 1000))\n\n    store = _get_tracking_store()\n\n    run = _create_promptlab_run_impl(\n        store,\n        experiment_id=experiment_id,\n        run_name=run_name,\n        tags=tags,\n        prompt_template=prompt_template,\n        prompt_parameters=prompt_parameters,\n        model_route=model_route,\n        model_parameters=model_parameters,\n        model_input=model_input,\n        model_output=model_output,\n        model_output_parameters=model_output_parameters,\n        mlflow_version=mlflow_version,\n        user_id=user_id,\n        start_time=start_time,\n    )\n    response_message = CreateRun.Response()\n    response_message.run.MergeFrom(run.to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\ndef upload_artifact_handler():\n    args = request.args\n    run_uuid = args.get(\"run_uuid\")\n    if not run_uuid:\n        raise MlflowException(\n            message=\"Request must specify run_uuid.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    path = args.get(\"path\")\n    if not path:\n        raise MlflowException(\n            message=\"Request must specify path.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    validate_path_is_safe(path)\n\n    if request.content_length and request.content_length > 10 * 1024 * 1024:\n        raise MlflowException(\n            message=\"Artifact size is too large. Max size is 10MB.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    data = request.data\n    if not data:\n        raise MlflowException(\n            message=\"Request must specify data.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    run = _get_tracking_store().get_run(run_uuid)\n    artifact_dir = run.info.artifact_uri\n\n    basename = posixpath.basename(path)\n    dirname = posixpath.dirname(path)\n\n    def _log_artifact_to_repo(file, run, dirname, artifact_dir):\n        if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):\n            artifact_repo = _get_artifact_repo_mlflow_artifacts()\n            path_to_log = (\n                os.path.join(run.info.experiment_id, run.info.run_id, \"artifacts\", dirname)\n                if dirname\n                else os.path.join(run.info.experiment_id, run.info.run_id, \"artifacts\")\n            )\n        else:\n            artifact_repo = get_artifact_repository(artifact_dir)\n            path_to_log = dirname\n\n        artifact_repo.log_artifact(file, path_to_log)\n\n    with tempfile.TemporaryDirectory() as tmpdir:\n        dir_path = os.path.join(tmpdir, dirname) if dirname else tmpdir\n        file_path = os.path.join(dir_path, basename)\n\n        os.makedirs(dir_path, exist_ok=True)\n\n        with open(file_path, \"wb\") as f:\n            f.write(data)\n\n        _log_artifact_to_repo(file_path, run, dirname, artifact_dir)\n\n    return Response(mimetype=\"application/json\")\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_experiments():\n    request_message = _get_request_message(\n        SearchExperiments(),\n        schema={\n            \"view_type\": [_assert_intlike],\n            \"max_results\": [_assert_intlike],\n            \"order_by\": [_assert_array],\n            \"filter\": [_assert_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    experiment_entities = _get_tracking_store().search_experiments(\n        view_type=request_message.view_type,\n        max_results=request_message.max_results,\n        order_by=request_message.order_by,\n        filter_string=request_message.filter,\n        page_token=request_message.page_token,\n    )\n    response_message = SearchExperiments.Response()\n    response_message.experiments.extend([e.to_proto() for e in experiment_entities])\n    if experiment_entities.token:\n        response_message.next_page_token = experiment_entities.token\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\ndef _get_artifact_repo(run):\n    return get_artifact_repository(run.info.artifact_uri)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_batch():\n    def _assert_metrics_fields_present(metrics):\n        for m in metrics:\n            _assert_required(m.get(\"key\"))\n            _assert_required(m.get(\"value\"))\n            _assert_required(m.get(\"timestamp\"))\n\n    def _assert_params_tags_fields_present(params_or_tags):\n        for param_or_tag in params_or_tags:\n            _assert_required(param_or_tag.get(\"key\"))\n\n    _validate_batch_log_api_req(_get_request_json())\n    request_message = _get_request_message(\n        LogBatch(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"metrics\": [_assert_array, _assert_metrics_fields_present],\n            \"params\": [_assert_array, _assert_params_tags_fields_present],\n            \"tags\": [_assert_array, _assert_params_tags_fields_present],\n        },\n    )\n    metrics = [Metric.from_proto(proto_metric) for proto_metric in request_message.metrics]\n    params = [Param.from_proto(proto_param) for proto_param in request_message.params]\n    tags = [RunTag.from_proto(proto_tag) for proto_tag in request_message.tags]\n    _get_tracking_store().log_batch(\n        run_id=request_message.run_id, metrics=metrics, params=params, tags=tags\n    )\n    response_message = LogBatch.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_model():\n    request_message = _get_request_message(\n        LogModel(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"model_json\": [_assert_string, _assert_required],\n        },\n    )\n    try:\n        model = json.loads(request_message.model_json)\n    except Exception:\n        raise MlflowException(\n            f\"Malformed model info. \\n {request_message.model_json} \\n is not a valid JSON.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    missing_fields = {\"artifact_path\", \"flavors\", \"utc_time_created\", \"run_id\"} - set(model.keys())\n\n    if missing_fields:\n        raise MlflowException(\n            f\"Model json is missing mandatory fields: {missing_fields}\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    _get_tracking_store().record_logged_model(\n        run_id=request_message.run_id, mlflow_model=Model.from_dict(model)\n    )\n    response_message = LogModel.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\ndef _wrap_response(response_message):\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n# Model Registry APIs\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_registered_model():\n    request_message = _get_request_message(\n        CreateRegisteredModel(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"tags\": [_assert_array],\n            \"description\": [_assert_string],\n        },\n    )\n    registered_model = _get_model_registry_store().create_registered_model(\n        name=request_message.name,\n        tags=request_message.tags,\n        description=request_message.description,\n    )\n    response_message = CreateRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_registered_model():\n    request_message = _get_request_message(\n        GetRegisteredModel(), schema={\"name\": [_assert_string, _assert_required]}\n    )\n    registered_model = _get_model_registry_store().get_registered_model(name=request_message.name)\n    response_message = GetRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_registered_model():\n    request_message = _get_request_message(\n        UpdateRegisteredModel(),\n        schema={\"name\": [_assert_string, _assert_required], \"description\": [_assert_string]},\n    )\n    name = request_message.name\n    new_description = request_message.description\n    registered_model = _get_model_registry_store().update_registered_model(\n        name=name, description=new_description\n    )\n    response_message = UpdateRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _rename_registered_model():\n    request_message = _get_request_message(\n        RenameRegisteredModel(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"new_name\": [_assert_string, _assert_required],\n        },\n    )\n    name = request_message.name\n    new_name = request_message.new_name\n    registered_model = _get_model_registry_store().rename_registered_model(\n        name=name, new_name=new_name\n    )\n    response_message = RenameRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_registered_model():\n    request_message = _get_request_message(\n        DeleteRegisteredModel(), schema={\"name\": [_assert_string, _assert_required]}\n    )\n    _get_model_registry_store().delete_registered_model(name=request_message.name)\n    return _wrap_response(DeleteRegisteredModel.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_registered_models():\n    request_message = _get_request_message(\n        SearchRegisteredModels(),\n        schema={\n            \"filter\": [_assert_string],\n            \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 1000)],\n            \"order_by\": [_assert_array, _assert_item_type_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    store = _get_model_registry_store()\n    registered_models = store.search_registered_models(\n        filter_string=request_message.filter,\n        max_results=request_message.max_results,\n        order_by=request_message.order_by,\n        page_token=request_message.page_token,\n    )\n    response_message = SearchRegisteredModels.Response()\n    response_message.registered_models.extend([e.to_proto() for e in registered_models])\n    if registered_models.token:\n        response_message.next_page_token = registered_models.token\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_latest_versions():\n    request_message = _get_request_message(\n        GetLatestVersions(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"stages\": [_assert_array, _assert_item_type_string],\n        },\n    )\n    latest_versions = _get_model_registry_store().get_latest_versions(\n        name=request_message.name, stages=request_message.stages\n    )\n    response_message = GetLatestVersions.Response()\n    response_message.model_versions.extend([e.to_proto() for e in latest_versions])\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_registered_model_tag():\n    request_message = _get_request_message(\n        SetRegisteredModelTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = RegisteredModelTag(key=request_message.key, value=request_message.value)\n    _get_model_registry_store().set_registered_model_tag(name=request_message.name, tag=tag)\n    return _wrap_response(SetRegisteredModelTag.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_registered_model_tag():\n    request_message = _get_request_message(\n        DeleteRegisteredModelTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_registered_model_tag(\n        name=request_message.name, key=request_message.key\n    )\n    return _wrap_response(DeleteRegisteredModelTag.Response())\n\n\ndef _validate_non_local_source_contains_relative_paths(source: str):\n    \"\"\"\n    Validation check to ensure that sources that are provided that conform to the schemes:\n    http, https, or mlflow-artifacts do not contain relative path designations that are intended\n    to access local file system paths on the tracking server.\n\n    Example paths that this validation function is intended to find and raise an Exception if\n    passed:\n    \"mlflow-artifacts://host:port/../../../../\"\n    \"http://host:port/api/2.0/mlflow-artifacts/artifacts/../../../../\"\n    \"https://host:port/api/2.0/mlflow-artifacts/artifacts/../../../../\"\n    \"/models/artifacts/../../../\"\n    \"s3:/my_bucket/models/path/../../other/path\"\n    \"file://path/to/../../../../some/where/you/should/not/be\"\n    \"mlflow-artifacts://host:port/..%2f..%2f..%2f..%2f\"\n    \"http://host:port/api/2.0/mlflow-artifacts/artifacts%00\"\n    \"\"\"\n    invalid_source_error_message = (\n        f\"Invalid model version source: '{source}'. If supplying a source as an http, https, \"\n        \"local file path, ftp, objectstore, or mlflow-artifacts uri, an absolute path must be \"\n        \"provided without relative path references present. \"\n        \"Please provide an absolute path.\"\n    )\n\n    while (unquoted := urllib.parse.unquote_plus(source)) != source:\n        source = unquoted\n    source_path = re.sub(r\"/+\", \"/\", urllib.parse.urlparse(source).path.rstrip(\"/\"))\n    if \"\\x00\" in source_path:\n        raise MlflowException(invalid_source_error_message, INVALID_PARAMETER_VALUE)\n    resolved_source = pathlib.Path(source_path).resolve().as_posix()\n    # NB: drive split is specifically for Windows since WindowsPath.resolve() will append the\n    # drive path of the pwd to a given path. We don't care about the drive here, though.\n    _, resolved_path = os.path.splitdrive(resolved_source)\n\n    if resolved_path != source_path:\n        raise MlflowException(invalid_source_error_message, INVALID_PARAMETER_VALUE)\n\n\ndef _validate_source(source: str, run_id: str) -> None:\n    if is_local_uri(source):\n        if run_id:\n            store = _get_tracking_store()\n            run = store.get_run(run_id)\n            source = pathlib.Path(local_file_uri_to_path(source)).resolve()\n            run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()\n            if run_artifact_dir in [source, *source.parents]:\n                return\n\n        raise MlflowException(\n            f\"Invalid model version source: '{source}'. To use a local path as a model version \"\n            \"source, the run_id request parameter has to be specified and the local path has to be \"\n            \"contained within the artifact directory of the run specified by the run_id.\",\n            INVALID_PARAMETER_VALUE,\n        )\n\n    # There might be file URIs that are local but can bypass the above check. To prevent this, we\n    # disallow using file URIs as model version sources by default unless it's explicitly allowed\n    # by setting the MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE environment variable to True.\n    if not MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE.get() and is_file_uri(source):\n        raise MlflowException(\n            f\"Invalid model version source: '{source}'. MLflow tracking server doesn't allow using \"\n            \"a file URI as a model version source for security reasons. To disable this check, set \"\n            f\"the {MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE} environment variable to \"\n            \"True.\",\n            INVALID_PARAMETER_VALUE,\n        )\n\n    # Checks if relative paths are present in the source (a security threat). If any are present,\n    # raises an Exception.\n    _validate_non_local_source_contains_relative_paths(source)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_model_version():\n    request_message = _get_request_message(\n        CreateModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"source\": [_assert_string, _assert_required],\n            \"run_id\": [_assert_string],\n            \"tags\": [_assert_array],\n            \"run_link\": [_assert_string],\n            \"description\": [_assert_string],\n        },\n    )\n\n    _validate_source(request_message.source, request_message.run_id)\n\n    model_version = _get_model_registry_store().create_model_version(\n        name=request_message.name,\n        source=request_message.source,\n        run_id=request_message.run_id,\n        run_link=request_message.run_link,\n        tags=request_message.tags,\n        description=request_message.description,\n    )\n    response_message = CreateModelVersion.Response(model_version=model_version.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef get_model_version_artifact_handler():\n    from querystring_parser import parser\n\n    query_string = request.query_string.decode(\"utf-8\")\n    request_dict = parser.parse(query_string, normalized=True)\n    name = request_dict.get(\"name\")\n    version = request_dict.get(\"version\")\n    path = request_dict[\"path\"]\n    validate_path_is_safe(path)\n    artifact_uri = _get_model_registry_store().get_model_version_download_uri(name, version)\n    if _is_servable_proxied_run_artifact_root(artifact_uri):\n        artifact_repo = _get_artifact_repo_mlflow_artifacts()\n        artifact_path = _get_proxied_run_artifact_destination_path(\n            proxied_artifact_root=artifact_uri,\n            relative_path=path,\n        )\n    else:\n        artifact_repo = get_artifact_repository(artifact_uri)\n        artifact_path = path\n\n    return _send_artifact(artifact_repo, artifact_path)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_model_version():\n    request_message = _get_request_message(\n        GetModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n        },\n    )\n    model_version = _get_model_registry_store().get_model_version(\n        name=request_message.name, version=request_message.version\n    )\n    response_proto = model_version.to_proto()\n    response_message = GetModelVersion.Response(model_version=response_proto)\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_model_version():\n    request_message = _get_request_message(\n        UpdateModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"description\": [_assert_string],\n        },\n    )\n    new_description = None\n    if request_message.HasField(\"description\"):\n        new_description = request_message.description\n    model_version = _get_model_registry_store().update_model_version(\n        name=request_message.name, version=request_message.version, description=new_description\n    )\n    return _wrap_response(UpdateModelVersion.Response(model_version=model_version.to_proto()))\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _transition_stage():\n    request_message = _get_request_message(\n        TransitionModelVersionStage(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"stage\": [_assert_string, _assert_required],\n            \"archive_existing_versions\": [_assert_bool],\n        },\n    )\n    model_version = _get_model_registry_store().transition_model_version_stage(\n        name=request_message.name,\n        version=request_message.version,\n        stage=request_message.stage,\n        archive_existing_versions=request_message.archive_existing_versions,\n    )\n    return _wrap_response(\n        TransitionModelVersionStage.Response(model_version=model_version.to_proto())\n    )\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_model_version():\n    request_message = _get_request_message(\n        DeleteModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_model_version(\n        name=request_message.name, version=request_message.version\n    )\n    return _wrap_response(DeleteModelVersion.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_model_version_download_uri():\n    request_message = _get_request_message(GetModelVersionDownloadUri())\n    download_uri = _get_model_registry_store().get_model_version_download_uri(\n        name=request_message.name, version=request_message.version\n    )\n    response_message = GetModelVersionDownloadUri.Response(artifact_uri=download_uri)\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_model_versions():\n    request_message = _get_request_message(\n        SearchModelVersions(),\n        schema={\n            \"filter\": [_assert_string],\n            \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 200_000)],\n            \"order_by\": [_assert_array, _assert_item_type_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    store = _get_model_registry_store()\n    model_versions = store.search_model_versions(\n        filter_string=request_message.filter,\n        max_results=request_message.max_results,\n        order_by=request_message.order_by,\n        page_token=request_message.page_token,\n    )\n    response_message = SearchModelVersions.Response()\n    response_message.model_versions.extend([e.to_proto() for e in model_versions])\n    if model_versions.token:\n        response_message.next_page_token = model_versions.token\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_model_version_tag():\n    request_message = _get_request_message(\n        SetModelVersionTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = ModelVersionTag(key=request_message.key, value=request_message.value)\n    _get_model_registry_store().set_model_version_tag(\n        name=request_message.name, version=request_message.version, tag=tag\n    )\n    return _wrap_response(SetModelVersionTag.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_model_version_tag():\n    request_message = _get_request_message(\n        DeleteModelVersionTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_model_version_tag(\n        name=request_message.name, version=request_message.version, key=request_message.key\n    )\n    return _wrap_response(DeleteModelVersionTag.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_registered_model_alias():\n    request_message = _get_request_message(\n        SetRegisteredModelAlias(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"alias\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().set_registered_model_alias(\n        name=request_message.name, alias=request_message.alias, version=request_message.version\n    )\n    return _wrap_response(SetRegisteredModelAlias.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_registered_model_alias():\n    request_message = _get_request_message(\n        DeleteRegisteredModelAlias(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"alias\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_registered_model_alias(\n        name=request_message.name, alias=request_message.alias\n    )\n    return _wrap_response(DeleteRegisteredModelAlias.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_model_version_by_alias():\n    request_message = _get_request_message(\n        GetModelVersionByAlias(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"alias\": [_assert_string, _assert_required],\n        },\n    )\n    model_version = _get_model_registry_store().get_model_version_by_alias(\n        name=request_message.name, alias=request_message.alias\n    )\n    response_proto = model_version.to_proto()\n    response_message = GetModelVersionByAlias.Response(model_version=response_proto)\n    return _wrap_response(response_message)\n\n\n# MLflow Artifacts APIs\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _download_artifact(artifact_path):\n    \"\"\"\n    A request handler for `GET /mlflow-artifacts/artifacts/<artifact_path>` to download an artifact\n    from `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    validate_path_is_safe(artifact_path)\n    tmp_dir = tempfile.TemporaryDirectory()\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    dst = artifact_repo.download_artifacts(artifact_path, tmp_dir.name)\n\n    # Ref: https://stackoverflow.com/a/24613980/6943581\n    file_handle = open(dst, \"rb\")  # noqa: SIM115\n\n    def stream_and_remove_file():\n        yield from file_handle\n        file_handle.close()\n        tmp_dir.cleanup()\n\n    file_sender_response = current_app.response_class(stream_and_remove_file())\n\n    return _response_with_file_attachment_headers(artifact_path, file_sender_response)\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `PUT /mlflow-artifacts/artifacts/<artifact_path>` to upload an artifact\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    validate_path_is_safe(artifact_path)\n    head, tail = posixpath.split(artifact_path)\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        tmp_path = os.path.join(tmp_dir, tail)\n        with open(tmp_path, \"wb\") as f:\n            chunk_size = 1024 * 1024  # 1 MB\n            while True:\n                chunk = request.stream.read(chunk_size)\n                if len(chunk) == 0:\n                    break\n                f.write(chunk)\n\n        artifact_repo = _get_artifact_repo_mlflow_artifacts()\n        artifact_repo.log_artifact(tmp_path, artifact_path=head or None)\n\n    return _wrap_response(UploadArtifact.Response())\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _list_artifacts_mlflow_artifacts():\n    \"\"\"\n    A request handler for `GET /mlflow-artifacts/artifacts?path=<value>` to list artifacts in `path`\n    (a relative path from the root artifact directory).\n    \"\"\"\n    request_message = _get_request_message(ListArtifactsMlflowArtifacts())\n    if request_message.HasField(\"path\"):\n        validate_path_is_safe(request_message.path)\n        path = request_message.path\n    else:\n        path = None\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    files = []\n    for file_info in artifact_repo.list_artifacts(path):\n        basename = posixpath.basename(file_info.path)\n        new_file_info = FileInfo(basename, file_info.is_dir, file_info.file_size)\n        files.append(new_file_info.to_proto())\n    response_message = ListArtifacts.Response()\n    response_message.files.extend(files)\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _delete_artifact_mlflow_artifacts(artifact_path):\n    \"\"\"\n    A request handler for `DELETE /mlflow-artifacts/artifacts?path=<value>` to delete artifacts in\n    `path` (a relative path from the root artifact directory).\n    \"\"\"\n    validate_path_is_safe(artifact_path)\n    _get_request_message(DeleteArtifact())\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    artifact_repo.delete_artifacts(artifact_path)\n    response_message = DeleteArtifact.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\ndef _validate_support_multipart_upload(artifact_repo):\n    if not isinstance(artifact_repo, MultipartUploadMixin):\n        raise _UnsupportedMultipartUploadException()\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _create_multipart_upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `POST /mlflow-artifacts/mpu/create` to create a multipart upload\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    validate_path_is_safe(artifact_path)\n\n    request_message = _get_request_message(\n        CreateMultipartUpload(),\n        schema={\n            \"path\": [_assert_required, _assert_string],\n            \"num_parts\": [_assert_intlike],\n        },\n    )\n    path = request_message.path\n    num_parts = request_message.num_parts\n\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    _validate_support_multipart_upload(artifact_repo)\n\n    create_response = artifact_repo.create_multipart_upload(\n        path,\n        num_parts,\n        artifact_path,\n    )\n    response_message = create_response.to_proto()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _complete_multipart_upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `POST /mlflow-artifacts/mpu/complete` to complete a multipart upload\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    validate_path_is_safe(artifact_path)\n\n    request_message = _get_request_message(\n        CompleteMultipartUpload(),\n        schema={\n            \"path\": [_assert_required, _assert_string],\n            \"upload_id\": [_assert_string],\n            \"parts\": [_assert_required],\n        },\n    )\n    path = request_message.path\n    upload_id = request_message.upload_id\n    parts = [MultipartUploadPart.from_proto(part) for part in request_message.parts]\n\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    _validate_support_multipart_upload(artifact_repo)\n\n    artifact_repo.complete_multipart_upload(\n        path,\n        upload_id,\n        parts,\n        artifact_path,\n    )\n    return _wrap_response(CompleteMultipartUpload.Response())\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _abort_multipart_upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `POST /mlflow-artifacts/mpu/abort` to abort a multipart upload\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    validate_path_is_safe(artifact_path)\n\n    request_message = _get_request_message(\n        AbortMultipartUpload(),\n        schema={\n            \"path\": [_assert_required, _assert_string],\n            \"upload_id\": [_assert_string],\n        },\n    )\n    path = request_message.path\n    upload_id = request_message.upload_id\n\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    _validate_support_multipart_upload(artifact_repo)\n\n    artifact_repo.abort_multipart_upload(\n        path,\n        upload_id,\n        artifact_path,\n    )\n    return _wrap_response(AbortMultipartUpload.Response())\n\n\ndef _get_rest_path(base_path):\n    return f\"/api/2.0{base_path}\"\n\n\ndef _get_ajax_path(base_path):\n    return _add_static_prefix(f\"/ajax-api/2.0{base_path}\")\n\n\ndef _add_static_prefix(route):\n    prefix = os.environ.get(STATIC_PREFIX_ENV_VAR)\n    if prefix:\n        return prefix + route\n    return route\n\n\ndef _get_paths(base_path):\n    \"\"\"\n    A service endpoints base path is typically something like /mlflow/experiment.\n    We should register paths like /api/2.0/mlflow/experiment and\n    /ajax-api/2.0/mlflow/experiment in the Flask router.\n    \"\"\"\n    return [_get_rest_path(base_path), _get_ajax_path(base_path)]\n\n\ndef get_handler(request_class):\n    \"\"\"\n    :param request_class: The type of protobuf message\n    :return:\n    \"\"\"\n    return HANDLERS.get(request_class, _not_implemented)\n\n\ndef get_service_endpoints(service, get_handler):\n    ret = []\n    for service_method in service.DESCRIPTOR.methods:\n        endpoints = service_method.GetOptions().Extensions[databricks_pb2.rpc].endpoints\n        for endpoint in endpoints:\n            for http_path in _get_paths(endpoint.path):\n                handler = get_handler(service().GetRequestClass(service_method))\n                ret.append((http_path, handler, [endpoint.method]))\n    return ret\n\n\ndef get_endpoints(get_handler=get_handler):\n    \"\"\"\n    :return: List of tuples (path, handler, methods)\n    \"\"\"\n    return (\n        get_service_endpoints(MlflowService, get_handler)\n        + get_service_endpoints(ModelRegistryService, get_handler)\n        + get_service_endpoints(MlflowArtifactsService, get_handler)\n    )\n\n\nHANDLERS = {\n    # Tracking Server APIs\n    CreateExperiment: _create_experiment,\n    GetExperiment: _get_experiment,\n    GetExperimentByName: _get_experiment_by_name,\n    DeleteExperiment: _delete_experiment,\n    RestoreExperiment: _restore_experiment,\n    UpdateExperiment: _update_experiment,\n    CreateRun: _create_run,\n    UpdateRun: _update_run,\n    DeleteRun: _delete_run,\n    RestoreRun: _restore_run,\n    LogParam: _log_param,\n    LogMetric: _log_metric,\n    SetExperimentTag: _set_experiment_tag,\n    SetTag: _set_tag,\n    DeleteTag: _delete_tag,\n    LogBatch: _log_batch,\n    LogModel: _log_model,\n    GetRun: _get_run,\n    SearchRuns: _search_runs,\n    ListArtifacts: _list_artifacts,\n    GetMetricHistory: _get_metric_history,\n    SearchExperiments: _search_experiments,\n    LogInputs: _log_inputs,\n    # Model Registry APIs\n    CreateRegisteredModel: _create_registered_model,\n    GetRegisteredModel: _get_registered_model,\n    DeleteRegisteredModel: _delete_registered_model,\n    UpdateRegisteredModel: _update_registered_model,\n    RenameRegisteredModel: _rename_registered_model,\n    SearchRegisteredModels: _search_registered_models,\n    GetLatestVersions: _get_latest_versions,\n    CreateModelVersion: _create_model_version,\n    GetModelVersion: _get_model_version,\n    DeleteModelVersion: _delete_model_version,\n    UpdateModelVersion: _update_model_version,\n    TransitionModelVersionStage: _transition_stage,\n    GetModelVersionDownloadUri: _get_model_version_download_uri,\n    SearchModelVersions: _search_model_versions,\n    SetRegisteredModelTag: _set_registered_model_tag,\n    DeleteRegisteredModelTag: _delete_registered_model_tag,\n    SetModelVersionTag: _set_model_version_tag,\n    DeleteModelVersionTag: _delete_model_version_tag,\n    SetRegisteredModelAlias: _set_registered_model_alias,\n    DeleteRegisteredModelAlias: _delete_registered_model_alias,\n    GetModelVersionByAlias: _get_model_version_by_alias,\n    # MLflow Artifacts APIs\n    DownloadArtifact: _download_artifact,\n    UploadArtifact: _upload_artifact,\n    ListArtifactsMlflowArtifacts: _list_artifacts_mlflow_artifacts,\n    DeleteArtifact: _delete_artifact_mlflow_artifacts,\n    CreateMultipartUpload: _create_multipart_upload_artifact,\n    CompleteMultipartUpload: _complete_multipart_upload_artifact,\n    AbortMultipartUpload: _abort_multipart_upload_artifact,\n}\n", "import logging\nimport os\nimport posixpath\n\nimport requests\nfrom requests import HTTPError\n\nfrom mlflow.entities import FileInfo\nfrom mlflow.entities.multipart_upload import (\n    CreateMultipartUploadResponse,\n    MultipartUploadCredential,\n    MultipartUploadPart,\n)\nfrom mlflow.environment_variables import (\n    MLFLOW_ENABLE_PROXY_MULTIPART_UPLOAD,\n    MLFLOW_MULTIPART_UPLOAD_CHUNK_SIZE,\n    MLFLOW_MULTIPART_UPLOAD_MINIMUM_FILE_SIZE,\n)\nfrom mlflow.exceptions import MlflowException, _UnsupportedMultipartUploadException\nfrom mlflow.store.artifact.artifact_repo import (\n    ArtifactRepository,\n    MultipartUploadMixin,\n    verify_artifact_path,\n)\nfrom mlflow.store.artifact.cloud_artifact_repo import _complete_futures, _compute_num_chunks\nfrom mlflow.tracking._tracking_service.utils import _get_default_host_creds\nfrom mlflow.utils.file_utils import read_chunk, relative_path_to_artifact_path\nfrom mlflow.utils.mime_type_utils import _guess_mime_type\nfrom mlflow.utils.rest_utils import augmented_raise_for_status, http_request\nfrom mlflow.utils.uri import validate_path_is_safe\n\n_logger = logging.getLogger(__name__)\n\n\nclass HttpArtifactRepository(ArtifactRepository, MultipartUploadMixin):\n    \"\"\"Stores artifacts in a remote artifact storage using HTTP requests\"\"\"\n\n    @property\n    def _host_creds(self):\n        return _get_default_host_creds(self.artifact_uri)\n\n    def log_artifact(self, local_file, artifact_path=None):\n        verify_artifact_path(artifact_path)\n\n        # Try to perform multipart upload if the file is large.\n        # If the server does not support, or if the upload failed, revert to normal upload.\n        if (\n            MLFLOW_ENABLE_PROXY_MULTIPART_UPLOAD.get()\n            and os.path.getsize(local_file) >= MLFLOW_MULTIPART_UPLOAD_MINIMUM_FILE_SIZE.get()\n        ):\n            try:\n                self._try_multipart_upload(local_file, artifact_path)\n                return\n            except _UnsupportedMultipartUploadException:\n                pass\n\n        file_name = os.path.basename(local_file)\n        mime_type = _guess_mime_type(file_name)\n        paths = (artifact_path, file_name) if artifact_path else (file_name,)\n        endpoint = posixpath.join(\"/\", *paths)\n        extra_headers = {\"Content-Type\": mime_type}\n        with open(local_file, \"rb\") as f:\n            resp = http_request(\n                self._host_creds, endpoint, \"PUT\", data=f, extra_headers=extra_headers\n            )\n            augmented_raise_for_status(resp)\n\n    def log_artifacts(self, local_dir, artifact_path=None):\n        local_dir = os.path.abspath(local_dir)\n        for root, _, filenames in os.walk(local_dir):\n            if root == local_dir:\n                artifact_dir = artifact_path\n            else:\n                rel_path = os.path.relpath(root, local_dir)\n                rel_path = relative_path_to_artifact_path(rel_path)\n                artifact_dir = (\n                    posixpath.join(artifact_path, rel_path) if artifact_path else rel_path\n                )\n            for f in filenames:\n                self.log_artifact(os.path.join(root, f), artifact_dir)\n\n    def list_artifacts(self, path=None):\n        endpoint = \"/mlflow-artifacts/artifacts\"\n        url, tail = self.artifact_uri.split(endpoint, maxsplit=1)\n        root = tail.lstrip(\"/\")\n        params = {\"path\": posixpath.join(root, path) if path else root}\n        host_creds = _get_default_host_creds(url)\n        resp = http_request(host_creds, endpoint, \"GET\", params=params)\n        augmented_raise_for_status(resp)\n        file_infos = []\n        for f in resp.json().get(\"files\", []):\n            validate_path_is_safe(f[\"path\"])\n            file_info = FileInfo(\n                posixpath.join(path, f[\"path\"]) if path else f[\"path\"],\n                f[\"is_dir\"],\n                int(f[\"file_size\"]) if (\"file_size\" in f) else None,\n            )\n            file_infos.append(file_info)\n\n        return sorted(file_infos, key=lambda f: f.path)\n\n    def _download_file(self, remote_file_path, local_path):\n        endpoint = posixpath.join(\"/\", remote_file_path)\n        resp = http_request(self._host_creds, endpoint, \"GET\", stream=True)\n        augmented_raise_for_status(resp)\n        with open(local_path, \"wb\") as f:\n            chunk_size = 1024 * 1024  # 1 MB\n            for chunk in resp.iter_content(chunk_size=chunk_size):\n                f.write(chunk)\n\n    def delete_artifacts(self, artifact_path=None):\n        endpoint = posixpath.join(\"/\", artifact_path) if artifact_path else \"/\"\n        resp = http_request(self._host_creds, endpoint, \"DELETE\", stream=True)\n        augmented_raise_for_status(resp)\n\n    def create_multipart_upload(self, local_file, num_parts=1, artifact_path=None):\n        url, _ = self.artifact_uri.split(\"/mlflow-artifacts\", maxsplit=1)\n        host_creds = _get_default_host_creds(url)\n        base_endpoint = \"/mlflow-artifacts/mpu/create\"\n        endpoint = posixpath.join(base_endpoint, artifact_path) if artifact_path else base_endpoint\n        params = {\n            \"path\": local_file,\n            \"num_parts\": num_parts,\n        }\n        resp = http_request(host_creds, endpoint, \"POST\", json=params)\n        augmented_raise_for_status(resp)\n        return CreateMultipartUploadResponse.from_dict(resp.json())\n\n    def complete_multipart_upload(self, local_file, upload_id, parts=None, artifact_path=None):\n        url, _ = self.artifact_uri.split(\"/mlflow-artifacts\", maxsplit=1)\n        host_creds = _get_default_host_creds(url)\n        base_endpoint = \"/mlflow-artifacts/mpu/complete\"\n        endpoint = posixpath.join(base_endpoint, artifact_path) if artifact_path else base_endpoint\n        params = {\n            \"path\": local_file,\n            \"upload_id\": upload_id,\n            \"parts\": [part.to_dict() for part in parts],\n        }\n        resp = http_request(host_creds, endpoint, \"POST\", json=params)\n        augmented_raise_for_status(resp)\n\n    def abort_multipart_upload(self, local_file, upload_id, artifact_path=None):\n        url, _ = self.artifact_uri.split(\"/mlflow-artifacts\", maxsplit=1)\n        host_creds = _get_default_host_creds(url)\n        base_endpoint = \"/mlflow-artifacts/mpu/abort\"\n        endpoint = posixpath.join(base_endpoint, artifact_path) if artifact_path else base_endpoint\n        params = {\n            \"path\": local_file,\n            \"upload_id\": upload_id,\n        }\n        resp = http_request(host_creds, endpoint, \"POST\", json=params)\n        augmented_raise_for_status(resp)\n\n    @staticmethod\n    def _upload_part(credential: MultipartUploadCredential, local_file, size, start_byte):\n        data = read_chunk(local_file, size, start_byte)\n        response = requests.put(credential.url, data=data, headers=credential.headers)\n        augmented_raise_for_status(response)\n        return MultipartUploadPart(\n            part_number=credential.part_number,\n            etag=response.headers.get(\"ETag\", \"\"),\n            url=credential.url,\n        )\n\n    def _try_multipart_upload(self, local_file, artifact_path=None):\n        \"\"\"\n        Attempts to perform multipart upload to log an artifact.\n        Returns if the multipart upload is successful.\n        Raises UnsupportedMultipartUploadException if multipart upload is unsupported.\n        \"\"\"\n        chunk_size = MLFLOW_MULTIPART_UPLOAD_CHUNK_SIZE.get()\n        num_parts = _compute_num_chunks(local_file, chunk_size)\n\n        try:\n            create = self.create_multipart_upload(local_file, num_parts, artifact_path)\n        except HTTPError as e:\n            # return False if server does not support multipart upload\n            error_message = e.response.json().get(\"message\", \"\")\n            if isinstance(error_message, str) and error_message.startswith(\n                _UnsupportedMultipartUploadException.MESSAGE\n            ):\n                raise _UnsupportedMultipartUploadException()\n            raise\n\n        try:\n            futures = {}\n            for i, credential in enumerate(create.credentials):\n                future = self.thread_pool.submit(\n                    self._upload_part,\n                    credential=credential,\n                    local_file=local_file,\n                    size=chunk_size,\n                    start_byte=chunk_size * i,\n                )\n                futures[future] = credential.part_number\n\n            parts, errors = _complete_futures(futures, local_file)\n            if errors:\n                raise MlflowException(\n                    f\"Failed to upload at least one part of {local_file}. Errors: {errors}\"\n                )\n\n            parts = sorted(parts.values(), key=lambda part: part.part_number)\n            self.complete_multipart_upload(local_file, create.upload_id, parts, artifact_path)\n        except Exception as e:\n            self.abort_multipart_upload(local_file, create.upload_id, artifact_path)\n            _logger.warning(f\"Failed to upload file {local_file} using multipart upload: {e}\")\n            raise\n", "import os\nimport pathlib\nimport posixpath\nimport re\nimport urllib.parse\nimport uuid\nfrom typing import Any, Tuple\n\nfrom mlflow.exceptions import MlflowException\nfrom mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE\nfrom mlflow.store.db.db_types import DATABASE_ENGINES\nfrom mlflow.utils.os import is_windows\nfrom mlflow.utils.validation import _validate_db_type_string\n\n_INVALID_DB_URI_MSG = (\n    \"Please refer to https://mlflow.org/docs/latest/tracking.html#storage for \"\n    \"format specifications.\"\n)\n\n_DBFS_FUSE_PREFIX = \"/dbfs/\"\n_DBFS_HDFS_URI_PREFIX = \"dbfs:/\"\n_UC_VOLUMES_URI_PREFIX = \"/Volumes/\"\n_UC_DBFS_SYMLINK_PREFIX = \"/.fuse-mounts/\"\n_DATABRICKS_UNITY_CATALOG_SCHEME = \"databricks-uc\"\n\n\ndef is_local_uri(uri, is_tracking_or_registry_uri=True):\n    \"\"\"\n    Returns true if the specified URI is a local file path (/foo or file:/foo).\n\n    :param uri: The URI.\n    :param is_tracking_uri: Whether or not the specified URI is an MLflow Tracking or MLflow\n                            Model Registry URI. Examples of other URIs are MLflow artifact URIs,\n                            filesystem paths, etc.\n    \"\"\"\n    if uri == \"databricks\" and is_tracking_or_registry_uri:\n        return False\n\n    if is_windows() and uri.startswith(\"\\\\\\\\\"):\n        # windows network drive path looks like: \"\\\\<server name>\\path\\...\"\n        return False\n\n    parsed_uri = urllib.parse.urlparse(uri)\n    scheme = parsed_uri.scheme\n    if scheme == \"\":\n        return True\n\n    if parsed_uri.hostname and not (\n        parsed_uri.hostname == \".\"\n        or parsed_uri.hostname.startswith(\"localhost\")\n        or parsed_uri.hostname.startswith(\"127.0.0.1\")\n    ):\n        return False\n\n    if scheme == \"file\":\n        return True\n\n    if is_windows() and len(scheme) == 1 and scheme.lower() == pathlib.Path(uri).drive.lower()[0]:\n        return True\n\n    return False\n\n\ndef is_file_uri(uri):\n    return urllib.parse.urlparse(uri).scheme == \"file\"\n\n\ndef is_http_uri(uri):\n    scheme = urllib.parse.urlparse(uri).scheme\n    return scheme == \"http\" or scheme == \"https\"\n\n\ndef is_databricks_uri(uri):\n    \"\"\"\n    Databricks URIs look like 'databricks' (default profile) or 'databricks://profile'\n    or 'databricks://secret_scope:secret_key_prefix'.\n    \"\"\"\n    scheme = urllib.parse.urlparse(uri).scheme\n    return scheme == \"databricks\" or uri == \"databricks\"\n\n\ndef is_fuse_or_uc_volumes_uri(uri):\n    \"\"\"\n    Validates whether a provided URI is directed to a FUSE mount point or a UC volumes mount point.\n    Multiple directory paths are collapsed into a single designator for root path validation.\n    example:\n    \"////Volumes/\" will resolve to \"/Volumes/\" for validation purposes.\n    \"\"\"\n    resolved_uri = re.sub(\"/+\", \"/\", uri)\n    return any(\n        resolved_uri.startswith(x)\n        for x in [\n            _DBFS_FUSE_PREFIX,\n            _DBFS_HDFS_URI_PREFIX,\n            _UC_VOLUMES_URI_PREFIX,\n            _UC_DBFS_SYMLINK_PREFIX,\n        ]\n    )\n\n\ndef is_databricks_unity_catalog_uri(uri):\n    scheme = urllib.parse.urlparse(uri).scheme\n    return scheme == _DATABRICKS_UNITY_CATALOG_SCHEME or uri == _DATABRICKS_UNITY_CATALOG_SCHEME\n\n\ndef construct_db_uri_from_profile(profile):\n    if profile:\n        return \"databricks://\" + profile\n\n\n# Both scope and key_prefix should not contain special chars for URIs, like '/'\n# and ':'.\ndef validate_db_scope_prefix_info(scope, prefix):\n    for c in [\"/\", \":\", \" \"]:\n        if c in scope:\n            raise MlflowException(\n                f\"Unsupported Databricks profile name: {scope}.\"\n                f\" Profile names cannot contain '{c}'.\"\n            )\n        if prefix and c in prefix:\n            raise MlflowException(\n                f\"Unsupported Databricks profile key prefix: {prefix}.\"\n                f\" Key prefixes cannot contain '{c}'.\"\n            )\n    if prefix is not None and prefix.strip() == \"\":\n        raise MlflowException(\n            f\"Unsupported Databricks profile key prefix: '{prefix}'.\"\n            \" Key prefixes cannot be empty.\"\n        )\n\n\ndef get_db_info_from_uri(uri):\n    \"\"\"\n    Get the Databricks profile specified by the tracking URI (if any), otherwise\n    returns None.\n    \"\"\"\n    parsed_uri = urllib.parse.urlparse(uri)\n    if parsed_uri.scheme == \"databricks\" or parsed_uri.scheme == _DATABRICKS_UNITY_CATALOG_SCHEME:\n        # netloc should not be an empty string unless URI is formatted incorrectly.\n        if parsed_uri.netloc == \"\":\n            raise MlflowException(\n                f\"URI is formatted incorrectly: no netloc in URI '{uri}'.\"\n                \" This may be the case if there is only one slash in the URI.\"\n            )\n        profile_tokens = parsed_uri.netloc.split(\":\")\n        parsed_scope = profile_tokens[0]\n        if len(profile_tokens) == 1:\n            parsed_key_prefix = None\n        elif len(profile_tokens) == 2:\n            parsed_key_prefix = profile_tokens[1]\n        else:\n            # parse the content before the first colon as the profile.\n            parsed_key_prefix = \":\".join(profile_tokens[1:])\n        validate_db_scope_prefix_info(parsed_scope, parsed_key_prefix)\n        return parsed_scope, parsed_key_prefix\n    return None, None\n\n\ndef get_databricks_profile_uri_from_artifact_uri(uri, result_scheme=\"databricks\"):\n    \"\"\"\n    Retrieves the netloc portion of the URI as a ``databricks://`` or `databricks-uc://` URI,\n    if it is a proper Databricks profile specification, e.g.\n    ``profile@databricks`` or ``secret_scope:key_prefix@databricks``.\n    \"\"\"\n    parsed = urllib.parse.urlparse(uri)\n    if not parsed.netloc or parsed.hostname != result_scheme:\n        return None\n    if not parsed.username:  # no profile or scope:key\n        return result_scheme  # the default tracking/registry URI\n    validate_db_scope_prefix_info(parsed.username, parsed.password)\n    key_prefix = \":\" + parsed.password if parsed.password else \"\"\n    return f\"{result_scheme}://\" + parsed.username + key_prefix\n\n\ndef remove_databricks_profile_info_from_artifact_uri(artifact_uri):\n    \"\"\"\n    Only removes the netloc portion of the URI if it is a Databricks\n    profile specification, e.g.\n    ``profile@databricks`` or ``secret_scope:key_prefix@databricks``.\n    \"\"\"\n    parsed = urllib.parse.urlparse(artifact_uri)\n    if not parsed.netloc or parsed.hostname != \"databricks\":\n        return artifact_uri\n    return urllib.parse.urlunparse(parsed._replace(netloc=\"\"))\n\n\ndef add_databricks_profile_info_to_artifact_uri(artifact_uri, databricks_profile_uri):\n    \"\"\"\n    Throws an exception if ``databricks_profile_uri`` is not valid.\n    \"\"\"\n    if not databricks_profile_uri or not is_databricks_uri(databricks_profile_uri):\n        return artifact_uri\n    artifact_uri_parsed = urllib.parse.urlparse(artifact_uri)\n    # Do not overwrite the authority section if there is already one\n    if artifact_uri_parsed.netloc:\n        return artifact_uri\n\n    scheme = artifact_uri_parsed.scheme\n    if scheme == \"dbfs\" or scheme == \"runs\" or scheme == \"models\":\n        if databricks_profile_uri == \"databricks\":\n            netloc = \"databricks\"\n        else:\n            (profile, key_prefix) = get_db_info_from_uri(databricks_profile_uri)\n            prefix = \":\" + key_prefix if key_prefix else \"\"\n            netloc = profile + prefix + \"@databricks\"\n        new_parsed = artifact_uri_parsed._replace(netloc=netloc)\n        return urllib.parse.urlunparse(new_parsed)\n    else:\n        return artifact_uri\n\n\ndef extract_db_type_from_uri(db_uri):\n    \"\"\"\n    Parse the specified DB URI to extract the database type. Confirm the database type is\n    supported. If a driver is specified, confirm it passes a plausible regex.\n    \"\"\"\n    scheme = urllib.parse.urlparse(db_uri).scheme\n    scheme_plus_count = scheme.count(\"+\")\n\n    if scheme_plus_count == 0:\n        db_type = scheme\n    elif scheme_plus_count == 1:\n        db_type, _ = scheme.split(\"+\")\n    else:\n        error_msg = f\"Invalid database URI: '{db_uri}'. {_INVALID_DB_URI_MSG}\"\n        raise MlflowException(error_msg, INVALID_PARAMETER_VALUE)\n\n    _validate_db_type_string(db_type)\n\n    return db_type\n\n\ndef get_uri_scheme(uri_or_path):\n    scheme = urllib.parse.urlparse(uri_or_path).scheme\n    if any(scheme.lower().startswith(db) for db in DATABASE_ENGINES):\n        return extract_db_type_from_uri(uri_or_path)\n    return scheme\n\n\ndef extract_and_normalize_path(uri):\n    parsed_uri_path = urllib.parse.urlparse(uri).path\n    normalized_path = posixpath.normpath(parsed_uri_path)\n    return normalized_path.lstrip(\"/\")\n\n\ndef append_to_uri_path(uri, *paths):\n    \"\"\"\n    Appends the specified POSIX `paths` to the path component of the specified `uri`.\n\n    :param uri: The input URI, represented as a string.\n    :param paths: The POSIX paths to append to the specified `uri`'s path component.\n    :return: A new URI with a path component consisting of the specified `paths` appended to\n             the path component of the specified `uri`.\n\n    >>> uri1 = \"s3://root/base/path?param=value\"\n    >>> uri1 = append_to_uri_path(uri1, \"some/subpath\", \"/anotherpath\")\n    >>> assert uri1 == \"s3://root/base/path/some/subpath/anotherpath?param=value\"\n    >>> uri2 = \"a/posix/path\"\n    >>> uri2 = append_to_uri_path(uri2, \"/some\", \"subpath\")\n    >>> assert uri2 == \"a/posixpath/some/subpath\"\n    \"\"\"\n    path = \"\"\n    for subpath in paths:\n        path = _join_posixpaths_and_append_absolute_suffixes(path, subpath)\n\n    parsed_uri = urllib.parse.urlparse(uri)\n\n    # Validate query string not to contain any traveral path (../) before appending\n    # to the end of the path, otherwise they will be resolved as part of the path.\n    validate_query_string(parsed_uri.query)\n\n    if len(parsed_uri.scheme) == 0:\n        # If the input URI does not define a scheme, we assume that it is a POSIX path\n        # and join it with the specified input paths\n        return _join_posixpaths_and_append_absolute_suffixes(uri, path)\n\n    prefix = \"\"\n    if not parsed_uri.path.startswith(\"/\"):\n        # For certain URI schemes (e.g., \"file:\"), urllib's unparse routine does\n        # not preserve the relative URI path component properly. In certain cases,\n        # urlunparse converts relative paths to absolute paths. We introduce this logic\n        # to circumvent urlunparse's erroneous conversion\n        prefix = parsed_uri.scheme + \":\"\n        parsed_uri = parsed_uri._replace(scheme=\"\")\n\n    new_uri_path = _join_posixpaths_and_append_absolute_suffixes(parsed_uri.path, path)\n    new_parsed_uri = parsed_uri._replace(path=new_uri_path)\n    return prefix + urllib.parse.urlunparse(new_parsed_uri)\n\n\ndef append_to_uri_query_params(uri, *query_params: Tuple[str, Any]) -> str:\n    \"\"\"\n    Appends the specified query parameters to an existing URI.\n\n    :param uri: The URI to which to append query parameters.\n    :param query_params: Query parameters to append. Each parameter should\n                         be a 2-element tuple. For example, ``(\"key\", \"value\")``.\n    \"\"\"\n    parsed_uri = urllib.parse.urlparse(uri)\n    parsed_query = urllib.parse.parse_qsl(parsed_uri.query)\n    new_parsed_query = parsed_query + list(query_params)\n    new_query = urllib.parse.urlencode(new_parsed_query)\n    new_parsed_uri = parsed_uri._replace(query=new_query)\n    return urllib.parse.urlunparse(new_parsed_uri)\n\n\ndef _join_posixpaths_and_append_absolute_suffixes(prefix_path, suffix_path):\n    \"\"\"\n    Joins the POSIX path `prefix_path` with the POSIX path `suffix_path`. Unlike posixpath.join(),\n    if `suffix_path` is an absolute path, it is appended to prefix_path.\n\n    >>> result1 = _join_posixpaths_and_append_absolute_suffixes(\"relpath1\", \"relpath2\")\n    >>> assert result1 == \"relpath1/relpath2\"\n    >>> result2 = _join_posixpaths_and_append_absolute_suffixes(\"relpath\", \"/absolutepath\")\n    >>> assert result2 == \"relpath/absolutepath\"\n    >>> result3 = _join_posixpaths_and_append_absolute_suffixes(\"/absolutepath\", \"relpath\")\n    >>> assert result3 == \"/absolutepath/relpath\"\n    >>> result4 = _join_posixpaths_and_append_absolute_suffixes(\"/absolutepath1\", \"/absolutepath2\")\n    >>> assert result4 == \"/absolutepath1/absolutepath2\"\n    \"\"\"\n    if len(prefix_path) == 0:\n        return suffix_path\n\n    # If the specified prefix path is non-empty, we must relativize the suffix path by removing\n    # the leading slash, if present. Otherwise, posixpath.join() would omit the prefix from the\n    # joined path\n    suffix_path = suffix_path.lstrip(posixpath.sep)\n    return posixpath.join(prefix_path, suffix_path)\n\n\ndef is_databricks_acled_artifacts_uri(artifact_uri):\n    _ACLED_ARTIFACT_URI = \"databricks/mlflow-tracking/\"\n    artifact_uri_path = extract_and_normalize_path(artifact_uri)\n    return artifact_uri_path.startswith(_ACLED_ARTIFACT_URI)\n\n\ndef is_databricks_model_registry_artifacts_uri(artifact_uri):\n    _MODEL_REGISTRY_ARTIFACT_URI = \"databricks/mlflow-registry/\"\n    artifact_uri_path = extract_and_normalize_path(artifact_uri)\n    return artifact_uri_path.startswith(_MODEL_REGISTRY_ARTIFACT_URI)\n\n\ndef is_valid_dbfs_uri(uri):\n    parsed = urllib.parse.urlparse(uri)\n    if parsed.scheme != \"dbfs\":\n        return False\n    try:\n        db_profile_uri = get_databricks_profile_uri_from_artifact_uri(uri)\n    except MlflowException:\n        db_profile_uri = None\n    return not parsed.netloc or db_profile_uri is not None\n\n\ndef dbfs_hdfs_uri_to_fuse_path(dbfs_uri):\n    \"\"\"\n    Converts the provided DBFS URI into a DBFS FUSE path\n    :param dbfs_uri: A DBFS URI like \"dbfs:/my-directory\". Can also be a scheme-less URI like\n                     \"/my-directory\" if running in an environment where the default HDFS filesystem\n                     is \"dbfs:/\" (e.g. Databricks)\n    :return A DBFS FUSE-style path, e.g. \"/dbfs/my-directory\"\n    \"\"\"\n    if not is_valid_dbfs_uri(dbfs_uri) and dbfs_uri == posixpath.abspath(dbfs_uri):\n        # Convert posixpaths (e.g. \"/tmp/mlflow\") to DBFS URIs by adding \"dbfs:/\" as a prefix\n        dbfs_uri = \"dbfs:\" + dbfs_uri\n    if not dbfs_uri.startswith(_DBFS_HDFS_URI_PREFIX):\n        raise MlflowException(\n            f\"Path '{dbfs_uri}' did not start with expected DBFS URI \"\n            f\"prefix '{_DBFS_HDFS_URI_PREFIX}'\",\n        )\n\n    return _DBFS_FUSE_PREFIX + dbfs_uri[len(_DBFS_HDFS_URI_PREFIX) :]\n\n\ndef resolve_uri_if_local(local_uri):\n    \"\"\"\n    if `local_uri` is passed in as a relative local path, this function\n    resolves it to absolute path relative to current working directory.\n\n    :param local_uri: Relative or absolute path or local file uri\n\n    :return: a fully-formed absolute uri path or an absolute filesystem path\n    \"\"\"\n    from mlflow.utils.file_utils import local_file_uri_to_path\n\n    if local_uri is not None and is_local_uri(local_uri):\n        scheme = get_uri_scheme(local_uri)\n        cwd = pathlib.Path.cwd()\n        local_path = local_file_uri_to_path(local_uri)\n        if not pathlib.Path(local_path).is_absolute():\n            if scheme == \"\":\n                if is_windows():\n                    return urllib.parse.urlunsplit(\n                        (\n                            \"file\",\n                            None,\n                            cwd.joinpath(local_path).as_posix(),\n                            None,\n                            None,\n                        )\n                    )\n                return cwd.joinpath(local_path).as_posix()\n            local_uri_split = urllib.parse.urlsplit(local_uri)\n            return urllib.parse.urlunsplit(\n                (\n                    local_uri_split.scheme,\n                    None,\n                    cwd.joinpath(local_path).as_posix(),\n                    local_uri_split.query,\n                    local_uri_split.fragment,\n                )\n            )\n    return local_uri\n\n\ndef generate_tmp_dfs_path(dfs_tmp):\n    return posixpath.join(dfs_tmp, str(uuid.uuid4()))\n\n\ndef join_paths(*paths: str) -> str:\n    stripped = (p.strip(\"/\") for p in paths)\n    return \"/\" + posixpath.normpath(posixpath.join(*stripped))\n\n\n_OS_ALT_SEPS = [sep for sep in [os.sep, os.path.altsep] if sep is not None and sep != \"/\"]\n\n\ndef validate_path_is_safe(path):\n    \"\"\"\n    Validates that the specified path is safe to join with a trusted prefix. This is a security\n    measure to prevent path traversal attacks.\n    A valid path should:\n        not contain separators other than '/'\n        not contain .. to navigate to parent dir in path\n        not be an absolute path\n    \"\"\"\n    from mlflow.utils.file_utils import local_file_uri_to_path\n\n    # We must decode path before validating it\n    path = _decode(path)\n\n    exc = MlflowException(\"Invalid path\", error_code=INVALID_PARAMETER_VALUE)\n    if \"#\" in path:\n        raise exc\n\n    if is_file_uri(path):\n        path = local_file_uri_to_path(path)\n    if (\n        any((s in path) for s in _OS_ALT_SEPS)\n        or \"..\" in path.split(\"/\")\n        or pathlib.PureWindowsPath(path).is_absolute()\n        or pathlib.PurePosixPath(path).is_absolute()\n        or (is_windows() and len(path) >= 2 and path[1] == \":\")\n    ):\n        raise exc\n\n\ndef validate_query_string(query):\n    query = _decode(query)\n    # Block query strings contain any traveral path (../) because they\n    # could be resolved as part of the path and allow path traversal.\n    if \"..\" in query:\n        raise MlflowException(\"Invalid query string\", error_code=INVALID_PARAMETER_VALUE)\n\n\ndef _decode(url):\n    # Keep decoding until the url stops changing (with a max of 10 iterations)\n    for _ in range(10):\n        decoded = urllib.parse.unquote(url)\n        if decoded == url:\n            return url\n        url = decoded\n\n    raise ValueError(\"Failed to decode url\")\n"], "fixing_code": ["# Define all the service endpoint handlers here.\nimport json\nimport logging\nimport os\nimport pathlib\nimport posixpath\nimport re\nimport tempfile\nimport time\nimport urllib\nfrom functools import wraps\n\nimport requests\nfrom flask import Response, current_app, request, send_file\nfrom google.protobuf import descriptor\nfrom google.protobuf.json_format import ParseError\n\nfrom mlflow.entities import DatasetInput, ExperimentTag, FileInfo, Metric, Param, RunTag, ViewType\nfrom mlflow.entities.model_registry import ModelVersionTag, RegisteredModelTag\nfrom mlflow.entities.multipart_upload import MultipartUploadPart\nfrom mlflow.environment_variables import (\n    MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE,\n    MLFLOW_DEPLOYMENTS_TARGET,\n)\nfrom mlflow.exceptions import MlflowException, _UnsupportedMultipartUploadException\nfrom mlflow.models import Model\nfrom mlflow.protos import databricks_pb2\nfrom mlflow.protos.databricks_pb2 import (\n    INVALID_PARAMETER_VALUE,\n    RESOURCE_DOES_NOT_EXIST,\n)\nfrom mlflow.protos.mlflow_artifacts_pb2 import (\n    AbortMultipartUpload,\n    CompleteMultipartUpload,\n    CreateMultipartUpload,\n    DeleteArtifact,\n    DownloadArtifact,\n    MlflowArtifactsService,\n    UploadArtifact,\n)\nfrom mlflow.protos.mlflow_artifacts_pb2 import (\n    ListArtifacts as ListArtifactsMlflowArtifacts,\n)\nfrom mlflow.protos.model_registry_pb2 import (\n    CreateModelVersion,\n    CreateRegisteredModel,\n    DeleteModelVersion,\n    DeleteModelVersionTag,\n    DeleteRegisteredModel,\n    DeleteRegisteredModelAlias,\n    DeleteRegisteredModelTag,\n    GetLatestVersions,\n    GetModelVersion,\n    GetModelVersionByAlias,\n    GetModelVersionDownloadUri,\n    GetRegisteredModel,\n    ModelRegistryService,\n    RenameRegisteredModel,\n    SearchModelVersions,\n    SearchRegisteredModels,\n    SetModelVersionTag,\n    SetRegisteredModelAlias,\n    SetRegisteredModelTag,\n    TransitionModelVersionStage,\n    UpdateModelVersion,\n    UpdateRegisteredModel,\n)\nfrom mlflow.protos.service_pb2 import (\n    CreateExperiment,\n    CreateRun,\n    DeleteExperiment,\n    DeleteRun,\n    DeleteTag,\n    GetExperiment,\n    GetExperimentByName,\n    GetMetricHistory,\n    GetRun,\n    ListArtifacts,\n    LogBatch,\n    LogInputs,\n    LogMetric,\n    LogModel,\n    LogParam,\n    MlflowService,\n    RestoreExperiment,\n    RestoreRun,\n    SearchExperiments,\n    SearchRuns,\n    SetExperimentTag,\n    SetTag,\n    UpdateExperiment,\n    UpdateRun,\n)\nfrom mlflow.server.validation import _validate_content_type\nfrom mlflow.store.artifact.artifact_repo import MultipartUploadMixin\nfrom mlflow.store.artifact.artifact_repository_registry import get_artifact_repository\nfrom mlflow.store.db.db_types import DATABASE_ENGINES\nfrom mlflow.tracking._model_registry import utils as registry_utils\nfrom mlflow.tracking._model_registry.registry import ModelRegistryStoreRegistry\nfrom mlflow.tracking._tracking_service import utils\nfrom mlflow.tracking._tracking_service.registry import TrackingStoreRegistry\nfrom mlflow.tracking.registry import UnsupportedModelRegistryStoreURIException\nfrom mlflow.utils.file_utils import local_file_uri_to_path\nfrom mlflow.utils.mime_type_utils import _guess_mime_type\nfrom mlflow.utils.promptlab_utils import _create_promptlab_run_impl\nfrom mlflow.utils.proto_json_utils import message_to_json, parse_dict\nfrom mlflow.utils.string_utils import is_string_type\nfrom mlflow.utils.uri import is_file_uri, is_local_uri, validate_path_is_safe, validate_query_string\nfrom mlflow.utils.validation import _validate_batch_log_api_req\n\n_logger = logging.getLogger(__name__)\n_tracking_store = None\n_model_registry_store = None\n_artifact_repo = None\nSTATIC_PREFIX_ENV_VAR = \"_MLFLOW_STATIC_PREFIX\"\n\n\nclass TrackingStoreRegistryWrapper(TrackingStoreRegistry):\n    def __init__(self):\n        super().__init__()\n        self.register(\"\", self._get_file_store)\n        self.register(\"file\", self._get_file_store)\n        for scheme in DATABASE_ENGINES:\n            self.register(scheme, self._get_sqlalchemy_store)\n        self.register_entrypoints()\n\n    @classmethod\n    def _get_file_store(cls, store_uri, artifact_uri):\n        from mlflow.store.tracking.file_store import FileStore\n\n        return FileStore(store_uri, artifact_uri)\n\n    @classmethod\n    def _get_sqlalchemy_store(cls, store_uri, artifact_uri):\n        from mlflow.store.tracking.sqlalchemy_store import SqlAlchemyStore\n\n        return SqlAlchemyStore(store_uri, artifact_uri)\n\n\nclass ModelRegistryStoreRegistryWrapper(ModelRegistryStoreRegistry):\n    def __init__(self):\n        super().__init__()\n        self.register(\"\", self._get_file_store)\n        self.register(\"file\", self._get_file_store)\n        for scheme in DATABASE_ENGINES:\n            self.register(scheme, self._get_sqlalchemy_store)\n        self.register_entrypoints()\n\n    @classmethod\n    def _get_file_store(cls, store_uri):\n        from mlflow.store.model_registry.file_store import FileStore\n\n        return FileStore(store_uri)\n\n    @classmethod\n    def _get_sqlalchemy_store(cls, store_uri):\n        from mlflow.store.model_registry.sqlalchemy_store import SqlAlchemyStore\n\n        return SqlAlchemyStore(store_uri)\n\n\n_tracking_store_registry = TrackingStoreRegistryWrapper()\n_model_registry_store_registry = ModelRegistryStoreRegistryWrapper()\n\n\ndef _get_artifact_repo_mlflow_artifacts():\n    \"\"\"\n    Get an artifact repository specified by ``--artifacts-destination`` option for ``mlflow server``\n    command.\n    \"\"\"\n    from mlflow.server import ARTIFACTS_DESTINATION_ENV_VAR\n\n    global _artifact_repo\n    if _artifact_repo is None:\n        _artifact_repo = get_artifact_repository(os.environ[ARTIFACTS_DESTINATION_ENV_VAR])\n    return _artifact_repo\n\n\ndef _is_serving_proxied_artifacts():\n    \"\"\"\n    :return: ``True`` if the MLflow server is serving proxied artifacts (i.e. acting as a proxy for\n             artifact upload / download / list operations), as would be enabled by specifying the\n             ``--serve-artifacts`` configuration option. ``False`` otherwise.\n    \"\"\"\n    from mlflow.server import SERVE_ARTIFACTS_ENV_VAR\n\n    return os.environ.get(SERVE_ARTIFACTS_ENV_VAR, \"false\") == \"true\"\n\n\ndef _is_servable_proxied_run_artifact_root(run_artifact_root):\n    \"\"\"\n    Determines whether or not the following are true:\n\n    - The specified Run artifact root is a proxied artifact root (i.e. an artifact root with scheme\n      ``http``, ``https``, or ``mlflow-artifacts``).\n\n    - The MLflow server is capable of resolving and accessing the underlying storage location\n      corresponding to the proxied artifact root, allowing it to fulfill artifact list and\n      download requests by using this storage location directly.\n\n    :param run_artifact_root: The Run artifact root location (URI).\n    :return: ``True`` if the specified Run artifact root refers to proxied artifacts that can be\n             served by this MLflow server (i.e. the server has access to the destination and\n             can respond to list and download requests for the artifact). ``False`` otherwise.\n    \"\"\"\n    parsed_run_artifact_root = urllib.parse.urlparse(run_artifact_root)\n    # NB: If the run artifact root is a proxied artifact root (has scheme `http`, `https`, or\n    # `mlflow-artifacts`) *and* the MLflow server is configured to serve artifacts, the MLflow\n    # server always assumes that it has access to the underlying storage location for the proxied\n    # artifacts. This may not always be accurate. For example:\n    #\n    # An organization may initially use the MLflow server to serve Tracking API requests and proxy\n    # access to artifacts stored in Location A (via `mlflow server --serve-artifacts`). Then, for\n    # scalability and / or security purposes, the organization may decide to store artifacts in a\n    # new location B and set up a separate server (e.g. `mlflow server --artifacts-only`) to proxy\n    # access to artifacts stored in Location B.\n    #\n    # In this scenario, requests for artifacts stored in Location B that are sent to the original\n    # MLflow server will fail if the original MLflow server does not have access to Location B\n    # because it will assume that it can serve all proxied artifacts regardless of the underlying\n    # location. Such failures can be remediated by granting the original MLflow server access to\n    # Location B.\n    return (\n        parsed_run_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]\n        and _is_serving_proxied_artifacts()\n    )\n\n\ndef _get_proxied_run_artifact_destination_path(proxied_artifact_root, relative_path=None):\n    \"\"\"\n    Resolves the specified proxied artifact location within a Run to a concrete storage location.\n\n    :param proxied_artifact_root: The Run artifact root location (URI) with scheme ``http``,\n                                  ``https``, or `mlflow-artifacts` that can be resolved by the\n                                  MLflow server to a concrete storage location.\n    :param relative_path: The relative path of the destination within the specified\n                          ``proxied_artifact_root``. If ``None``, the destination is assumed to be\n                          the resolved ``proxied_artifact_root``.\n    :return: The storage location of the specified artifact.\n    \"\"\"\n    parsed_proxied_artifact_root = urllib.parse.urlparse(proxied_artifact_root)\n    assert parsed_proxied_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]\n\n    if parsed_proxied_artifact_root.scheme == \"mlflow-artifacts\":\n        # If the proxied artifact root is an `mlflow-artifacts` URI, the run artifact root path is\n        # simply the path component of the URI, since the fully-qualified format of an\n        # `mlflow-artifacts` URI is `mlflow-artifacts://<netloc>/path/to/artifact`\n        proxied_run_artifact_root_path = parsed_proxied_artifact_root.path.lstrip(\"/\")\n    else:\n        # In this case, the proxied artifact root is an HTTP(S) URL referring to an mlflow-artifacts\n        # API route that can be used to download the artifact. These routes are always anchored at\n        # `/api/2.0/mlflow-artifacts/artifacts`. Accordingly, we split the path on this route anchor\n        # and interpret the rest of the path (everything after the route anchor) as the run artifact\n        # root path\n        mlflow_artifacts_http_route_anchor = \"/api/2.0/mlflow-artifacts/artifacts/\"\n        assert mlflow_artifacts_http_route_anchor in parsed_proxied_artifact_root.path\n\n        proxied_run_artifact_root_path = parsed_proxied_artifact_root.path.split(\n            mlflow_artifacts_http_route_anchor\n        )[1].lstrip(\"/\")\n\n    return (\n        posixpath.join(proxied_run_artifact_root_path, relative_path)\n        if relative_path is not None\n        else proxied_run_artifact_root_path\n    )\n\n\ndef _get_tracking_store(backend_store_uri=None, default_artifact_root=None):\n    from mlflow.server import ARTIFACT_ROOT_ENV_VAR, BACKEND_STORE_URI_ENV_VAR\n\n    global _tracking_store\n    if _tracking_store is None:\n        store_uri = backend_store_uri or os.environ.get(BACKEND_STORE_URI_ENV_VAR, None)\n        artifact_root = default_artifact_root or os.environ.get(ARTIFACT_ROOT_ENV_VAR, None)\n        _tracking_store = _tracking_store_registry.get_store(store_uri, artifact_root)\n        utils.set_tracking_uri(store_uri)\n    return _tracking_store\n\n\ndef _get_model_registry_store(registry_store_uri=None):\n    from mlflow.server import BACKEND_STORE_URI_ENV_VAR, REGISTRY_STORE_URI_ENV_VAR\n\n    global _model_registry_store\n    if _model_registry_store is None:\n        store_uri = (\n            registry_store_uri\n            or os.environ.get(REGISTRY_STORE_URI_ENV_VAR, None)\n            or os.environ.get(BACKEND_STORE_URI_ENV_VAR, None)\n        )\n        _model_registry_store = _model_registry_store_registry.get_store(store_uri)\n        registry_utils.set_registry_uri(store_uri)\n    return _model_registry_store\n\n\ndef initialize_backend_stores(\n    backend_store_uri=None, registry_store_uri=None, default_artifact_root=None\n):\n    _get_tracking_store(backend_store_uri, default_artifact_root)\n    try:\n        _get_model_registry_store(registry_store_uri)\n    except UnsupportedModelRegistryStoreURIException:\n        pass\n\n\ndef _assert_string(x):\n    assert isinstance(x, str)\n\n\ndef _assert_intlike(x):\n    try:\n        x = int(x)\n    except ValueError:\n        pass\n\n    assert isinstance(x, int)\n\n\ndef _assert_bool(x):\n    assert isinstance(x, bool)\n\n\ndef _assert_floatlike(x):\n    try:\n        x = float(x)\n    except ValueError:\n        pass\n\n    assert isinstance(x, float)\n\n\ndef _assert_array(x):\n    assert isinstance(x, list)\n\n\ndef _assert_required(x):\n    assert x is not None\n    # When parsing JSON payloads via proto, absent string fields\n    # are expressed as empty strings\n    assert x != \"\"\n\n\ndef _assert_less_than_or_equal(x, max_value):\n    assert x <= max_value\n\n\ndef _assert_item_type_string(x):\n    assert all(isinstance(item, str) for item in x)\n\n\n_TYPE_VALIDATORS = {\n    _assert_intlike,\n    _assert_string,\n    _assert_bool,\n    _assert_floatlike,\n    _assert_array,\n    _assert_item_type_string,\n}\n\n\ndef _validate_param_against_schema(schema, param, value, proto_parsing_succeeded=False):\n    \"\"\"\n    Attempts to validate a single parameter against a specified schema.\n    Examples of the elements of the schema are type assertions and checks for required parameters.\n    Returns None on validation success. Otherwise, raises an MLFlowException if an assertion fails.\n    This method is intended to be called for side effects.\n\n            Parameters:\n    :param schema: A list of functions to validate the parameter against.\n    :param param: The string name of the parameter being validated.\n    :param value: The corresponding value of the `param` being validated.\n    :param proto_parsing_succeeded: A boolean value indicating whether proto parsing succeeded.\n                                    If the proto was successfully parsed, we assume all of the types\n                                    of the parameters in the request body were correctly specified,\n                                    and thus we skip validating types. If proto parsing failed,\n                                    then we validate types in addition to the rest of the schema.\n                                    For details, see https://github.com/mlflow/mlflow/pull/\n                                    5458#issuecomment-1080880870.\n    \"\"\"\n\n    for f in schema:\n        if f in _TYPE_VALIDATORS and proto_parsing_succeeded:\n            continue\n\n        try:\n            f(value)\n        except AssertionError:\n            if f == _assert_required:\n                message = f\"Missing value for required parameter '{param}'.\"\n            else:\n                message = (\n                    f\"Invalid value {value} for parameter '{param}' supplied.\"\n                    f\" Hint: Value was of type '{type(value).__name__}'.\"\n                )\n            raise MlflowException(\n                message=(\n                    message + \" See the API docs for more information about request parameters.\"\n                ),\n                error_code=INVALID_PARAMETER_VALUE,\n            )\n\n    return None\n\n\ndef _get_request_json(flask_request=request):\n    _validate_content_type(flask_request, [\"application/json\"])\n    return flask_request.get_json(force=True, silent=True)\n\n\ndef _get_request_message(request_message, flask_request=request, schema=None):\n    from querystring_parser import parser\n\n    if flask_request.method == \"GET\" and len(flask_request.query_string) > 0:\n        # This is a hack to make arrays of length 1 work with the parser.\n        # for example experiment_ids%5B%5D=0 should be parsed to {experiment_ids: [0]}\n        # but it gets parsed to {experiment_ids: 0}\n        # but it doesn't. However, experiment_ids%5B0%5D=0 will get parsed to the right\n        # result.\n        query_string = re.sub(\"%5B%5D\", \"%5B0%5D\", flask_request.query_string.decode(\"utf-8\"))\n        request_dict = parser.parse(query_string, normalized=True)\n        # Convert atomic values of repeated fields to lists before calling protobuf deserialization.\n        # Context: We parse the parameter string into a dictionary outside of protobuf since\n        # protobuf does not know how to read the query parameters directly. The query parser above\n        # has no type information and hence any parameter that occurs exactly once is parsed as an\n        # atomic value. Since protobuf requires that the values of repeated fields are lists,\n        # deserialization will fail unless we do the fix below.\n        for field in request_message.DESCRIPTOR.fields:\n            if (\n                field.label == descriptor.FieldDescriptor.LABEL_REPEATED\n                and field.name in request_dict\n            ):\n                if not isinstance(request_dict[field.name], list):\n                    request_dict[field.name] = [request_dict[field.name]]\n        parse_dict(request_dict, request_message)\n        return request_message\n\n    request_json = _get_request_json(flask_request)\n\n    # Older clients may post their JSON double-encoded as strings, so the get_json\n    # above actually converts it to a string. Therefore, we check this condition\n    # (which we can tell for sure because any proper request should be a dictionary),\n    # and decode it a second time.\n    if is_string_type(request_json):\n        request_json = json.loads(request_json)\n\n    # If request doesn't have json body then assume it's empty.\n    if request_json is None:\n        request_json = {}\n\n    proto_parsing_succeeded = True\n    try:\n        parse_dict(request_json, request_message)\n    except ParseError:\n        proto_parsing_succeeded = False\n\n    schema = schema or {}\n    for schema_key, schema_validation_fns in schema.items():\n        if schema_key in request_json or _assert_required in schema_validation_fns:\n            value = request_json.get(schema_key)\n            if schema_key == \"run_id\" and value is None and \"run_uuid\" in request_json:\n                value = request_json.get(\"run_uuid\")\n            _validate_param_against_schema(\n                schema=schema_validation_fns,\n                param=schema_key,\n                value=value,\n                proto_parsing_succeeded=proto_parsing_succeeded,\n            )\n\n    return request_message\n\n\ndef _response_with_file_attachment_headers(file_path, response):\n    mime_type = _guess_mime_type(file_path)\n    filename = pathlib.Path(file_path).name\n    response.mimetype = mime_type\n    content_disposition_header_name = \"Content-Disposition\"\n    if content_disposition_header_name not in response.headers:\n        response.headers[content_disposition_header_name] = f\"attachment; filename={filename}\"\n    response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n    response.headers[\"Content-Type\"] = mime_type\n    return response\n\n\ndef _send_artifact(artifact_repository, path):\n    file_path = os.path.abspath(artifact_repository.download_artifacts(path))\n    # Always send artifacts as attachments to prevent the browser from displaying them on our web\n    # server's domain, which might enable XSS.\n    mime_type = _guess_mime_type(file_path)\n    file_sender_response = send_file(file_path, mimetype=mime_type, as_attachment=True)\n    return _response_with_file_attachment_headers(file_path, file_sender_response)\n\n\ndef catch_mlflow_exception(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except MlflowException as e:\n            response = Response(mimetype=\"application/json\")\n            response.set_data(e.serialize_as_json())\n            response.status_code = e.get_http_status_code()\n            return response\n\n    return wrapper\n\n\ndef _disable_unless_serve_artifacts(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        if not _is_serving_proxied_artifacts():\n            return Response(\n                (\n                    f\"Endpoint: {request.url_rule} disabled due to the mlflow server running \"\n                    \"with `--no-serve-artifacts`. To enable artifacts server functionality, \"\n                    \"run `mlflow server` with `--serve-artifacts`\"\n                ),\n                503,\n            )\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\ndef _disable_if_artifacts_only(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        from mlflow.server import ARTIFACTS_ONLY_ENV_VAR\n\n        if os.environ.get(ARTIFACTS_ONLY_ENV_VAR):\n            return Response(\n                (\n                    f\"Endpoint: {request.url_rule} disabled due to the mlflow server running \"\n                    \"in `--artifacts-only` mode. To enable tracking server functionality, run \"\n                    \"`mlflow server` without `--artifacts-only`\"\n                ),\n                503,\n            )\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\n@catch_mlflow_exception\ndef get_artifact_handler():\n    from querystring_parser import parser\n\n    query_string = request.query_string.decode(\"utf-8\")\n    request_dict = parser.parse(query_string, normalized=True)\n    run_id = request_dict.get(\"run_id\") or request_dict.get(\"run_uuid\")\n    path = request_dict[\"path\"]\n    path = validate_path_is_safe(path)\n    run = _get_tracking_store().get_run(run_id)\n\n    if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):\n        artifact_repo = _get_artifact_repo_mlflow_artifacts()\n        artifact_path = _get_proxied_run_artifact_destination_path(\n            proxied_artifact_root=run.info.artifact_uri,\n            relative_path=path,\n        )\n    else:\n        artifact_repo = _get_artifact_repo(run)\n        artifact_path = path\n\n    return _send_artifact(artifact_repo, artifact_path)\n\n\ndef _not_implemented():\n    response = Response()\n    response.status_code = 404\n    return response\n\n\n# Tracking Server APIs\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_experiment():\n    request_message = _get_request_message(\n        CreateExperiment(),\n        schema={\n            \"name\": [_assert_required, _assert_string],\n            \"artifact_location\": [_assert_string],\n            \"tags\": [_assert_array],\n        },\n    )\n\n    tags = [ExperimentTag(tag.key, tag.value) for tag in request_message.tags]\n\n    # Validate query string in artifact location to prevent attacks\n    parsed_artifact_locaion = urllib.parse.urlparse(request_message.artifact_location)\n    validate_query_string(parsed_artifact_locaion.query)\n\n    experiment_id = _get_tracking_store().create_experiment(\n        request_message.name, request_message.artifact_location, tags\n    )\n    response_message = CreateExperiment.Response()\n    response_message.experiment_id = experiment_id\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_experiment():\n    request_message = _get_request_message(\n        GetExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}\n    )\n    response_message = GetExperiment.Response()\n    experiment = _get_tracking_store().get_experiment(request_message.experiment_id).to_proto()\n    response_message.experiment.MergeFrom(experiment)\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_experiment_by_name():\n    request_message = _get_request_message(\n        GetExperimentByName(), schema={\"experiment_name\": [_assert_required, _assert_string]}\n    )\n    response_message = GetExperimentByName.Response()\n    store_exp = _get_tracking_store().get_experiment_by_name(request_message.experiment_name)\n    if store_exp is None:\n        raise MlflowException(\n            f\"Could not find experiment with name '{request_message.experiment_name}'\",\n            error_code=RESOURCE_DOES_NOT_EXIST,\n        )\n    experiment = store_exp.to_proto()\n    response_message.experiment.MergeFrom(experiment)\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_experiment():\n    request_message = _get_request_message(\n        DeleteExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().delete_experiment(request_message.experiment_id)\n    response_message = DeleteExperiment.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _restore_experiment():\n    request_message = _get_request_message(\n        RestoreExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().restore_experiment(request_message.experiment_id)\n    response_message = RestoreExperiment.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_experiment():\n    request_message = _get_request_message(\n        UpdateExperiment(),\n        schema={\n            \"experiment_id\": [_assert_required, _assert_string],\n            \"new_name\": [_assert_string, _assert_required],\n        },\n    )\n    if request_message.new_name:\n        _get_tracking_store().rename_experiment(\n            request_message.experiment_id, request_message.new_name\n        )\n    response_message = UpdateExperiment.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_run():\n    request_message = _get_request_message(\n        CreateRun(),\n        schema={\n            \"experiment_id\": [_assert_string],\n            \"start_time\": [_assert_intlike],\n            \"run_name\": [_assert_string],\n        },\n    )\n\n    tags = [RunTag(tag.key, tag.value) for tag in request_message.tags]\n    run = _get_tracking_store().create_run(\n        experiment_id=request_message.experiment_id,\n        user_id=request_message.user_id,\n        start_time=request_message.start_time,\n        tags=tags,\n        run_name=request_message.run_name,\n    )\n\n    response_message = CreateRun.Response()\n    response_message.run.MergeFrom(run.to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_run():\n    request_message = _get_request_message(\n        UpdateRun(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"end_time\": [_assert_intlike],\n            \"status\": [_assert_string],\n            \"run_name\": [_assert_string],\n        },\n    )\n    run_id = request_message.run_id or request_message.run_uuid\n    run_name = request_message.run_name if request_message.HasField(\"run_name\") else None\n    end_time = request_message.end_time if request_message.HasField(\"end_time\") else None\n    status = request_message.status if request_message.HasField(\"status\") else None\n    updated_info = _get_tracking_store().update_run_info(run_id, status, end_time, run_name)\n    response_message = UpdateRun.Response(run_info=updated_info.to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_run():\n    request_message = _get_request_message(\n        DeleteRun(), schema={\"run_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().delete_run(request_message.run_id)\n    response_message = DeleteRun.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _restore_run():\n    request_message = _get_request_message(\n        RestoreRun(), schema={\"run_id\": [_assert_required, _assert_string]}\n    )\n    _get_tracking_store().restore_run(request_message.run_id)\n    response_message = RestoreRun.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_metric():\n    request_message = _get_request_message(\n        LogMetric(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_required, _assert_floatlike],\n            \"timestamp\": [_assert_intlike, _assert_required],\n            \"step\": [_assert_intlike],\n        },\n    )\n    metric = Metric(\n        request_message.key, request_message.value, request_message.timestamp, request_message.step\n    )\n    run_id = request_message.run_id or request_message.run_uuid\n    _get_tracking_store().log_metric(run_id, metric)\n    response_message = LogMetric.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_param():\n    request_message = _get_request_message(\n        LogParam(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_string],\n        },\n    )\n    param = Param(request_message.key, request_message.value)\n    run_id = request_message.run_id or request_message.run_uuid\n    _get_tracking_store().log_param(run_id, param)\n    response_message = LogParam.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_inputs():\n    request_message = _get_request_message(\n        LogInputs(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"datasets\": [_assert_required, _assert_array],\n        },\n    )\n    run_id = request_message.run_id\n    datasets = [\n        DatasetInput.from_proto(proto_dataset_input)\n        for proto_dataset_input in request_message.datasets\n    ]\n\n    _get_tracking_store().log_inputs(run_id, datasets=datasets)\n    response_message = LogInputs.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_experiment_tag():\n    request_message = _get_request_message(\n        SetExperimentTag(),\n        schema={\n            \"experiment_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = ExperimentTag(request_message.key, request_message.value)\n    _get_tracking_store().set_experiment_tag(request_message.experiment_id, tag)\n    response_message = SetExperimentTag.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_tag():\n    request_message = _get_request_message(\n        SetTag(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = RunTag(request_message.key, request_message.value)\n    run_id = request_message.run_id or request_message.run_uuid\n    _get_tracking_store().set_tag(run_id, tag)\n    response_message = SetTag.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_tag():\n    request_message = _get_request_message(\n        DeleteTag(),\n        schema={\n            \"run_id\": [_assert_required, _assert_string],\n            \"key\": [_assert_required, _assert_string],\n        },\n    )\n    _get_tracking_store().delete_tag(request_message.run_id, request_message.key)\n    response_message = DeleteTag.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_run():\n    request_message = _get_request_message(\n        GetRun(), schema={\"run_id\": [_assert_required, _assert_string]}\n    )\n    response_message = GetRun.Response()\n    run_id = request_message.run_id or request_message.run_uuid\n    response_message.run.MergeFrom(_get_tracking_store().get_run(run_id).to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_runs():\n    request_message = _get_request_message(\n        SearchRuns(),\n        schema={\n            \"experiment_ids\": [_assert_array],\n            \"filter\": [_assert_string],\n            \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 50000)],\n            \"order_by\": [_assert_array, _assert_item_type_string],\n        },\n    )\n    response_message = SearchRuns.Response()\n    run_view_type = ViewType.ACTIVE_ONLY\n    if request_message.HasField(\"run_view_type\"):\n        run_view_type = ViewType.from_proto(request_message.run_view_type)\n    filter_string = request_message.filter\n    max_results = request_message.max_results\n    experiment_ids = request_message.experiment_ids\n    order_by = request_message.order_by\n    page_token = request_message.page_token\n    run_entities = _get_tracking_store().search_runs(\n        experiment_ids, filter_string, run_view_type, max_results, order_by, page_token\n    )\n    response_message.runs.extend([r.to_proto() for r in run_entities])\n    if run_entities.token:\n        response_message.next_page_token = run_entities.token\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _list_artifacts():\n    request_message = _get_request_message(\n        ListArtifacts(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"path\": [_assert_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    response_message = ListArtifacts.Response()\n    if request_message.HasField(\"path\"):\n        path = request_message.path\n        path = validate_path_is_safe(path)\n    else:\n        path = None\n    run_id = request_message.run_id or request_message.run_uuid\n    run = _get_tracking_store().get_run(run_id)\n\n    if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):\n        artifact_entities = _list_artifacts_for_proxied_run_artifact_root(\n            proxied_artifact_root=run.info.artifact_uri,\n            relative_path=path,\n        )\n    else:\n        artifact_entities = _get_artifact_repo(run).list_artifacts(path)\n\n    response_message.files.extend([a.to_proto() for a in artifact_entities])\n    response_message.root_uri = run.info.artifact_uri\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\ndef _list_artifacts_for_proxied_run_artifact_root(proxied_artifact_root, relative_path=None):\n    \"\"\"\n    Lists artifacts from the specified ``relative_path`` within the specified proxied Run artifact\n    root (i.e. a Run artifact root with scheme ``http``, ``https``, or ``mlflow-artifacts``).\n\n    :param proxied_artifact_root: The Run artifact root location (URI) with scheme ``http``,\n                                  ``https``, or ``mlflow-artifacts`` that can be resolved by the\n                                  MLflow server to a concrete storage location.\n    :param relative_path: The relative path within the specified ``proxied_artifact_root`` under\n                          which to list artifact contents. If ``None``, artifacts are listed from\n                          the ``proxied_artifact_root`` directory.\n    \"\"\"\n    parsed_proxied_artifact_root = urllib.parse.urlparse(proxied_artifact_root)\n    assert parsed_proxied_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]\n\n    artifact_destination_repo = _get_artifact_repo_mlflow_artifacts()\n    artifact_destination_path = _get_proxied_run_artifact_destination_path(\n        proxied_artifact_root=proxied_artifact_root,\n        relative_path=relative_path,\n    )\n\n    artifact_entities = []\n    for file_info in artifact_destination_repo.list_artifacts(artifact_destination_path):\n        basename = posixpath.basename(file_info.path)\n        run_relative_artifact_path = (\n            posixpath.join(relative_path, basename) if relative_path else basename\n        )\n        artifact_entities.append(\n            FileInfo(run_relative_artifact_path, file_info.is_dir, file_info.file_size)\n        )\n\n    return artifact_entities\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_metric_history():\n    request_message = _get_request_message(\n        GetMetricHistory(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"metric_key\": [_assert_string, _assert_required],\n        },\n    )\n    response_message = GetMetricHistory.Response()\n    run_id = request_message.run_id or request_message.run_uuid\n    metric_entities = _get_tracking_store().get_metric_history(run_id, request_message.metric_key)\n    response_message.metrics.extend([m.to_proto() for m in metric_entities])\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef get_metric_history_bulk_handler():\n    MAX_HISTORY_RESULTS = 25000\n    MAX_RUN_IDS_PER_REQUEST = 20\n    run_ids = request.args.to_dict(flat=False).get(\"run_id\", [])\n    if not run_ids:\n        raise MlflowException(\n            message=\"GetMetricHistoryBulk request must specify at least one run_id.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    if len(run_ids) > MAX_RUN_IDS_PER_REQUEST:\n        raise MlflowException(\n            message=(\n                f\"GetMetricHistoryBulk request cannot specify more than {MAX_RUN_IDS_PER_REQUEST}\"\n                f\" run_ids. Received {len(run_ids)} run_ids.\"\n            ),\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    metric_key = request.args.get(\"metric_key\")\n    if metric_key is None:\n        raise MlflowException(\n            message=\"GetMetricHistoryBulk request must specify a metric_key.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    max_results = int(request.args.get(\"max_results\", MAX_HISTORY_RESULTS))\n    max_results = min(max_results, MAX_HISTORY_RESULTS)\n\n    store = _get_tracking_store()\n\n    def _default_history_bulk_impl():\n        metrics_with_run_ids = []\n        for run_id in sorted(run_ids):\n            metrics_for_run = sorted(\n                store.get_metric_history(\n                    run_id=run_id,\n                    metric_key=metric_key,\n                    max_results=max_results,\n                ),\n                key=lambda metric: (metric.timestamp, metric.step, metric.value),\n            )\n            metrics_with_run_ids.extend(\n                [\n                    {\n                        \"key\": metric.key,\n                        \"value\": metric.value,\n                        \"timestamp\": metric.timestamp,\n                        \"step\": metric.step,\n                        \"run_id\": run_id,\n                    }\n                    for metric in metrics_for_run\n                ]\n            )\n        return metrics_with_run_ids\n\n    if hasattr(store, \"get_metric_history_bulk\"):\n        metrics_with_run_ids = [\n            metric.to_dict()\n            for metric in store.get_metric_history_bulk(\n                run_ids=run_ids,\n                metric_key=metric_key,\n                max_results=max_results,\n            )\n        ]\n    else:\n        metrics_with_run_ids = _default_history_bulk_impl()\n\n    return {\n        \"metrics\": metrics_with_run_ids[:max_results],\n    }\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef search_datasets_handler():\n    MAX_EXPERIMENT_IDS_PER_REQUEST = 20\n    _validate_content_type(request, [\"application/json\"])\n    experiment_ids = request.json.get(\"experiment_ids\", [])\n    if not experiment_ids:\n        raise MlflowException(\n            message=\"SearchDatasets request must specify at least one experiment_id.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    if len(experiment_ids) > MAX_EXPERIMENT_IDS_PER_REQUEST:\n        raise MlflowException(\n            message=(\n                f\"SearchDatasets request cannot specify more than {MAX_EXPERIMENT_IDS_PER_REQUEST}\"\n                f\" experiment_ids. Received {len(experiment_ids)} experiment_ids.\"\n            ),\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    store = _get_tracking_store()\n\n    if hasattr(store, \"_search_datasets\"):\n        return {\n            \"dataset_summaries\": [\n                summary.to_dict() for summary in store._search_datasets(experiment_ids)\n            ]\n        }\n    else:\n        return _not_implemented()\n\n\n@catch_mlflow_exception\ndef gateway_proxy_handler():\n    target_uri = MLFLOW_DEPLOYMENTS_TARGET.get()\n    if not target_uri:\n        # Pretend an empty gateway service is running\n        return {\"endpoints\": []}\n\n    args = request.args if request.method == \"GET\" else request.json\n\n    gateway_path = args.get(\"gateway_path\")\n    if not gateway_path:\n        raise MlflowException(\n            message=\"Deployments proxy request must specify a gateway_path.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    request_type = request.method\n    json_data = args.get(\"json_data\", None)\n\n    response = requests.request(request_type, f\"{target_uri}/{gateway_path}\", json=json_data)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise MlflowException(\n            message=f\"Deployments proxy request failed with error code {response.status_code}. \"\n            f\"Error message: {response.text}\",\n            error_code=response.status_code,\n        )\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef create_promptlab_run_handler():\n    def assert_arg_exists(arg_name, arg):\n        if not arg:\n            raise MlflowException(\n                message=f\"CreatePromptlabRun request must specify {arg_name}.\",\n                error_code=INVALID_PARAMETER_VALUE,\n            )\n\n    _validate_content_type(request, [\"application/json\"])\n\n    args = request.json\n    experiment_id = args.get(\"experiment_id\")\n    assert_arg_exists(\"experiment_id\", experiment_id)\n    run_name = args.get(\"run_name\", None)\n    tags = args.get(\"tags\", [])\n    prompt_template = args.get(\"prompt_template\")\n    assert_arg_exists(\"prompt_template\", prompt_template)\n    raw_prompt_parameters = args.get(\"prompt_parameters\")\n    assert_arg_exists(\"prompt_parameters\", raw_prompt_parameters)\n    prompt_parameters = [\n        Param(param.get(\"key\"), param.get(\"value\")) for param in args.get(\"prompt_parameters\")\n    ]\n    model_route = args.get(\"model_route\")\n    assert_arg_exists(\"model_route\", model_route)\n    raw_model_parameters = args.get(\"model_parameters\", [])\n    model_parameters = [\n        Param(param.get(\"key\"), param.get(\"value\")) for param in raw_model_parameters\n    ]\n    model_input = args.get(\"model_input\")\n    assert_arg_exists(\"model_input\", model_input)\n    model_output = args.get(\"model_output\", None)\n    raw_model_output_parameters = args.get(\"model_output_parameters\", [])\n    model_output_parameters = [\n        Param(param.get(\"key\"), param.get(\"value\")) for param in raw_model_output_parameters\n    ]\n    mlflow_version = args.get(\"mlflow_version\")\n    assert_arg_exists(\"mlflow_version\", mlflow_version)\n    user_id = args.get(\"user_id\", \"unknown\")\n\n    # use current time if not provided\n    start_time = args.get(\"start_time\", int(time.time() * 1000))\n\n    store = _get_tracking_store()\n\n    run = _create_promptlab_run_impl(\n        store,\n        experiment_id=experiment_id,\n        run_name=run_name,\n        tags=tags,\n        prompt_template=prompt_template,\n        prompt_parameters=prompt_parameters,\n        model_route=model_route,\n        model_parameters=model_parameters,\n        model_input=model_input,\n        model_output=model_output,\n        model_output_parameters=model_output_parameters,\n        mlflow_version=mlflow_version,\n        user_id=user_id,\n        start_time=start_time,\n    )\n    response_message = CreateRun.Response()\n    response_message.run.MergeFrom(run.to_proto())\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\ndef upload_artifact_handler():\n    args = request.args\n    run_uuid = args.get(\"run_uuid\")\n    if not run_uuid:\n        raise MlflowException(\n            message=\"Request must specify run_uuid.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    path = args.get(\"path\")\n    if not path:\n        raise MlflowException(\n            message=\"Request must specify path.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    path = validate_path_is_safe(path)\n\n    if request.content_length and request.content_length > 10 * 1024 * 1024:\n        raise MlflowException(\n            message=\"Artifact size is too large. Max size is 10MB.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    data = request.data\n    if not data:\n        raise MlflowException(\n            message=\"Request must specify data.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    run = _get_tracking_store().get_run(run_uuid)\n    artifact_dir = run.info.artifact_uri\n\n    basename = posixpath.basename(path)\n    dirname = posixpath.dirname(path)\n\n    def _log_artifact_to_repo(file, run, dirname, artifact_dir):\n        if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):\n            artifact_repo = _get_artifact_repo_mlflow_artifacts()\n            path_to_log = (\n                os.path.join(run.info.experiment_id, run.info.run_id, \"artifacts\", dirname)\n                if dirname\n                else os.path.join(run.info.experiment_id, run.info.run_id, \"artifacts\")\n            )\n        else:\n            artifact_repo = get_artifact_repository(artifact_dir)\n            path_to_log = dirname\n\n        artifact_repo.log_artifact(file, path_to_log)\n\n    with tempfile.TemporaryDirectory() as tmpdir:\n        dir_path = os.path.join(tmpdir, dirname) if dirname else tmpdir\n        file_path = os.path.join(dir_path, basename)\n\n        os.makedirs(dir_path, exist_ok=True)\n\n        with open(file_path, \"wb\") as f:\n            f.write(data)\n\n        _log_artifact_to_repo(file_path, run, dirname, artifact_dir)\n\n    return Response(mimetype=\"application/json\")\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_experiments():\n    request_message = _get_request_message(\n        SearchExperiments(),\n        schema={\n            \"view_type\": [_assert_intlike],\n            \"max_results\": [_assert_intlike],\n            \"order_by\": [_assert_array],\n            \"filter\": [_assert_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    experiment_entities = _get_tracking_store().search_experiments(\n        view_type=request_message.view_type,\n        max_results=request_message.max_results,\n        order_by=request_message.order_by,\n        filter_string=request_message.filter,\n        page_token=request_message.page_token,\n    )\n    response_message = SearchExperiments.Response()\n    response_message.experiments.extend([e.to_proto() for e in experiment_entities])\n    if experiment_entities.token:\n        response_message.next_page_token = experiment_entities.token\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\ndef _get_artifact_repo(run):\n    return get_artifact_repository(run.info.artifact_uri)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_batch():\n    def _assert_metrics_fields_present(metrics):\n        for m in metrics:\n            _assert_required(m.get(\"key\"))\n            _assert_required(m.get(\"value\"))\n            _assert_required(m.get(\"timestamp\"))\n\n    def _assert_params_tags_fields_present(params_or_tags):\n        for param_or_tag in params_or_tags:\n            _assert_required(param_or_tag.get(\"key\"))\n\n    _validate_batch_log_api_req(_get_request_json())\n    request_message = _get_request_message(\n        LogBatch(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"metrics\": [_assert_array, _assert_metrics_fields_present],\n            \"params\": [_assert_array, _assert_params_tags_fields_present],\n            \"tags\": [_assert_array, _assert_params_tags_fields_present],\n        },\n    )\n    metrics = [Metric.from_proto(proto_metric) for proto_metric in request_message.metrics]\n    params = [Param.from_proto(proto_param) for proto_param in request_message.params]\n    tags = [RunTag.from_proto(proto_tag) for proto_tag in request_message.tags]\n    _get_tracking_store().log_batch(\n        run_id=request_message.run_id, metrics=metrics, params=params, tags=tags\n    )\n    response_message = LogBatch.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _log_model():\n    request_message = _get_request_message(\n        LogModel(),\n        schema={\n            \"run_id\": [_assert_string, _assert_required],\n            \"model_json\": [_assert_string, _assert_required],\n        },\n    )\n    try:\n        model = json.loads(request_message.model_json)\n    except Exception:\n        raise MlflowException(\n            f\"Malformed model info. \\n {request_message.model_json} \\n is not a valid JSON.\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n\n    missing_fields = {\"artifact_path\", \"flavors\", \"utc_time_created\", \"run_id\"} - set(model.keys())\n\n    if missing_fields:\n        raise MlflowException(\n            f\"Model json is missing mandatory fields: {missing_fields}\",\n            error_code=INVALID_PARAMETER_VALUE,\n        )\n    _get_tracking_store().record_logged_model(\n        run_id=request_message.run_id, mlflow_model=Model.from_dict(model)\n    )\n    response_message = LogModel.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\ndef _wrap_response(response_message):\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n# Model Registry APIs\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_registered_model():\n    request_message = _get_request_message(\n        CreateRegisteredModel(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"tags\": [_assert_array],\n            \"description\": [_assert_string],\n        },\n    )\n    registered_model = _get_model_registry_store().create_registered_model(\n        name=request_message.name,\n        tags=request_message.tags,\n        description=request_message.description,\n    )\n    response_message = CreateRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_registered_model():\n    request_message = _get_request_message(\n        GetRegisteredModel(), schema={\"name\": [_assert_string, _assert_required]}\n    )\n    registered_model = _get_model_registry_store().get_registered_model(name=request_message.name)\n    response_message = GetRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_registered_model():\n    request_message = _get_request_message(\n        UpdateRegisteredModel(),\n        schema={\"name\": [_assert_string, _assert_required], \"description\": [_assert_string]},\n    )\n    name = request_message.name\n    new_description = request_message.description\n    registered_model = _get_model_registry_store().update_registered_model(\n        name=name, description=new_description\n    )\n    response_message = UpdateRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _rename_registered_model():\n    request_message = _get_request_message(\n        RenameRegisteredModel(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"new_name\": [_assert_string, _assert_required],\n        },\n    )\n    name = request_message.name\n    new_name = request_message.new_name\n    registered_model = _get_model_registry_store().rename_registered_model(\n        name=name, new_name=new_name\n    )\n    response_message = RenameRegisteredModel.Response(registered_model=registered_model.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_registered_model():\n    request_message = _get_request_message(\n        DeleteRegisteredModel(), schema={\"name\": [_assert_string, _assert_required]}\n    )\n    _get_model_registry_store().delete_registered_model(name=request_message.name)\n    return _wrap_response(DeleteRegisteredModel.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_registered_models():\n    request_message = _get_request_message(\n        SearchRegisteredModels(),\n        schema={\n            \"filter\": [_assert_string],\n            \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 1000)],\n            \"order_by\": [_assert_array, _assert_item_type_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    store = _get_model_registry_store()\n    registered_models = store.search_registered_models(\n        filter_string=request_message.filter,\n        max_results=request_message.max_results,\n        order_by=request_message.order_by,\n        page_token=request_message.page_token,\n    )\n    response_message = SearchRegisteredModels.Response()\n    response_message.registered_models.extend([e.to_proto() for e in registered_models])\n    if registered_models.token:\n        response_message.next_page_token = registered_models.token\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_latest_versions():\n    request_message = _get_request_message(\n        GetLatestVersions(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"stages\": [_assert_array, _assert_item_type_string],\n        },\n    )\n    latest_versions = _get_model_registry_store().get_latest_versions(\n        name=request_message.name, stages=request_message.stages\n    )\n    response_message = GetLatestVersions.Response()\n    response_message.model_versions.extend([e.to_proto() for e in latest_versions])\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_registered_model_tag():\n    request_message = _get_request_message(\n        SetRegisteredModelTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = RegisteredModelTag(key=request_message.key, value=request_message.value)\n    _get_model_registry_store().set_registered_model_tag(name=request_message.name, tag=tag)\n    return _wrap_response(SetRegisteredModelTag.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_registered_model_tag():\n    request_message = _get_request_message(\n        DeleteRegisteredModelTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_registered_model_tag(\n        name=request_message.name, key=request_message.key\n    )\n    return _wrap_response(DeleteRegisteredModelTag.Response())\n\n\ndef _validate_non_local_source_contains_relative_paths(source: str):\n    \"\"\"\n    Validation check to ensure that sources that are provided that conform to the schemes:\n    http, https, or mlflow-artifacts do not contain relative path designations that are intended\n    to access local file system paths on the tracking server.\n\n    Example paths that this validation function is intended to find and raise an Exception if\n    passed:\n    \"mlflow-artifacts://host:port/../../../../\"\n    \"http://host:port/api/2.0/mlflow-artifacts/artifacts/../../../../\"\n    \"https://host:port/api/2.0/mlflow-artifacts/artifacts/../../../../\"\n    \"/models/artifacts/../../../\"\n    \"s3:/my_bucket/models/path/../../other/path\"\n    \"file://path/to/../../../../some/where/you/should/not/be\"\n    \"mlflow-artifacts://host:port/..%2f..%2f..%2f..%2f\"\n    \"http://host:port/api/2.0/mlflow-artifacts/artifacts%00\"\n    \"\"\"\n    invalid_source_error_message = (\n        f\"Invalid model version source: '{source}'. If supplying a source as an http, https, \"\n        \"local file path, ftp, objectstore, or mlflow-artifacts uri, an absolute path must be \"\n        \"provided without relative path references present. \"\n        \"Please provide an absolute path.\"\n    )\n\n    while (unquoted := urllib.parse.unquote_plus(source)) != source:\n        source = unquoted\n    source_path = re.sub(r\"/+\", \"/\", urllib.parse.urlparse(source).path.rstrip(\"/\"))\n    if \"\\x00\" in source_path:\n        raise MlflowException(invalid_source_error_message, INVALID_PARAMETER_VALUE)\n    resolved_source = pathlib.Path(source_path).resolve().as_posix()\n    # NB: drive split is specifically for Windows since WindowsPath.resolve() will append the\n    # drive path of the pwd to a given path. We don't care about the drive here, though.\n    _, resolved_path = os.path.splitdrive(resolved_source)\n\n    if resolved_path != source_path:\n        raise MlflowException(invalid_source_error_message, INVALID_PARAMETER_VALUE)\n\n\ndef _validate_source(source: str, run_id: str) -> None:\n    if is_local_uri(source):\n        if run_id:\n            store = _get_tracking_store()\n            run = store.get_run(run_id)\n            source = pathlib.Path(local_file_uri_to_path(source)).resolve()\n            run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()\n            if run_artifact_dir in [source, *source.parents]:\n                return\n\n        raise MlflowException(\n            f\"Invalid model version source: '{source}'. To use a local path as a model version \"\n            \"source, the run_id request parameter has to be specified and the local path has to be \"\n            \"contained within the artifact directory of the run specified by the run_id.\",\n            INVALID_PARAMETER_VALUE,\n        )\n\n    # There might be file URIs that are local but can bypass the above check. To prevent this, we\n    # disallow using file URIs as model version sources by default unless it's explicitly allowed\n    # by setting the MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE environment variable to True.\n    if not MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE.get() and is_file_uri(source):\n        raise MlflowException(\n            f\"Invalid model version source: '{source}'. MLflow tracking server doesn't allow using \"\n            \"a file URI as a model version source for security reasons. To disable this check, set \"\n            f\"the {MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE} environment variable to \"\n            \"True.\",\n            INVALID_PARAMETER_VALUE,\n        )\n\n    # Checks if relative paths are present in the source (a security threat). If any are present,\n    # raises an Exception.\n    _validate_non_local_source_contains_relative_paths(source)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _create_model_version():\n    request_message = _get_request_message(\n        CreateModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"source\": [_assert_string, _assert_required],\n            \"run_id\": [_assert_string],\n            \"tags\": [_assert_array],\n            \"run_link\": [_assert_string],\n            \"description\": [_assert_string],\n        },\n    )\n\n    _validate_source(request_message.source, request_message.run_id)\n\n    model_version = _get_model_registry_store().create_model_version(\n        name=request_message.name,\n        source=request_message.source,\n        run_id=request_message.run_id,\n        run_link=request_message.run_link,\n        tags=request_message.tags,\n        description=request_message.description,\n    )\n    response_message = CreateModelVersion.Response(model_version=model_version.to_proto())\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef get_model_version_artifact_handler():\n    from querystring_parser import parser\n\n    query_string = request.query_string.decode(\"utf-8\")\n    request_dict = parser.parse(query_string, normalized=True)\n    name = request_dict.get(\"name\")\n    version = request_dict.get(\"version\")\n    path = request_dict[\"path\"]\n    path = validate_path_is_safe(path)\n    artifact_uri = _get_model_registry_store().get_model_version_download_uri(name, version)\n    if _is_servable_proxied_run_artifact_root(artifact_uri):\n        artifact_repo = _get_artifact_repo_mlflow_artifacts()\n        artifact_path = _get_proxied_run_artifact_destination_path(\n            proxied_artifact_root=artifact_uri,\n            relative_path=path,\n        )\n    else:\n        artifact_repo = get_artifact_repository(artifact_uri)\n        artifact_path = path\n\n    return _send_artifact(artifact_repo, artifact_path)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_model_version():\n    request_message = _get_request_message(\n        GetModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n        },\n    )\n    model_version = _get_model_registry_store().get_model_version(\n        name=request_message.name, version=request_message.version\n    )\n    response_proto = model_version.to_proto()\n    response_message = GetModelVersion.Response(model_version=response_proto)\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _update_model_version():\n    request_message = _get_request_message(\n        UpdateModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"description\": [_assert_string],\n        },\n    )\n    new_description = None\n    if request_message.HasField(\"description\"):\n        new_description = request_message.description\n    model_version = _get_model_registry_store().update_model_version(\n        name=request_message.name, version=request_message.version, description=new_description\n    )\n    return _wrap_response(UpdateModelVersion.Response(model_version=model_version.to_proto()))\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _transition_stage():\n    request_message = _get_request_message(\n        TransitionModelVersionStage(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"stage\": [_assert_string, _assert_required],\n            \"archive_existing_versions\": [_assert_bool],\n        },\n    )\n    model_version = _get_model_registry_store().transition_model_version_stage(\n        name=request_message.name,\n        version=request_message.version,\n        stage=request_message.stage,\n        archive_existing_versions=request_message.archive_existing_versions,\n    )\n    return _wrap_response(\n        TransitionModelVersionStage.Response(model_version=model_version.to_proto())\n    )\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_model_version():\n    request_message = _get_request_message(\n        DeleteModelVersion(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_model_version(\n        name=request_message.name, version=request_message.version\n    )\n    return _wrap_response(DeleteModelVersion.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_model_version_download_uri():\n    request_message = _get_request_message(GetModelVersionDownloadUri())\n    download_uri = _get_model_registry_store().get_model_version_download_uri(\n        name=request_message.name, version=request_message.version\n    )\n    response_message = GetModelVersionDownloadUri.Response(artifact_uri=download_uri)\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _search_model_versions():\n    request_message = _get_request_message(\n        SearchModelVersions(),\n        schema={\n            \"filter\": [_assert_string],\n            \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 200_000)],\n            \"order_by\": [_assert_array, _assert_item_type_string],\n            \"page_token\": [_assert_string],\n        },\n    )\n    store = _get_model_registry_store()\n    model_versions = store.search_model_versions(\n        filter_string=request_message.filter,\n        max_results=request_message.max_results,\n        order_by=request_message.order_by,\n        page_token=request_message.page_token,\n    )\n    response_message = SearchModelVersions.Response()\n    response_message.model_versions.extend([e.to_proto() for e in model_versions])\n    if model_versions.token:\n        response_message.next_page_token = model_versions.token\n    return _wrap_response(response_message)\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_model_version_tag():\n    request_message = _get_request_message(\n        SetModelVersionTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n            \"value\": [_assert_string],\n        },\n    )\n    tag = ModelVersionTag(key=request_message.key, value=request_message.value)\n    _get_model_registry_store().set_model_version_tag(\n        name=request_message.name, version=request_message.version, tag=tag\n    )\n    return _wrap_response(SetModelVersionTag.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_model_version_tag():\n    request_message = _get_request_message(\n        DeleteModelVersionTag(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n            \"key\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_model_version_tag(\n        name=request_message.name, version=request_message.version, key=request_message.key\n    )\n    return _wrap_response(DeleteModelVersionTag.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _set_registered_model_alias():\n    request_message = _get_request_message(\n        SetRegisteredModelAlias(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"alias\": [_assert_string, _assert_required],\n            \"version\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().set_registered_model_alias(\n        name=request_message.name, alias=request_message.alias, version=request_message.version\n    )\n    return _wrap_response(SetRegisteredModelAlias.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _delete_registered_model_alias():\n    request_message = _get_request_message(\n        DeleteRegisteredModelAlias(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"alias\": [_assert_string, _assert_required],\n        },\n    )\n    _get_model_registry_store().delete_registered_model_alias(\n        name=request_message.name, alias=request_message.alias\n    )\n    return _wrap_response(DeleteRegisteredModelAlias.Response())\n\n\n@catch_mlflow_exception\n@_disable_if_artifacts_only\ndef _get_model_version_by_alias():\n    request_message = _get_request_message(\n        GetModelVersionByAlias(),\n        schema={\n            \"name\": [_assert_string, _assert_required],\n            \"alias\": [_assert_string, _assert_required],\n        },\n    )\n    model_version = _get_model_registry_store().get_model_version_by_alias(\n        name=request_message.name, alias=request_message.alias\n    )\n    response_proto = model_version.to_proto()\n    response_message = GetModelVersionByAlias.Response(model_version=response_proto)\n    return _wrap_response(response_message)\n\n\n# MLflow Artifacts APIs\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _download_artifact(artifact_path):\n    \"\"\"\n    A request handler for `GET /mlflow-artifacts/artifacts/<artifact_path>` to download an artifact\n    from `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    artifact_path = validate_path_is_safe(artifact_path)\n    tmp_dir = tempfile.TemporaryDirectory()\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    dst = artifact_repo.download_artifacts(artifact_path, tmp_dir.name)\n\n    # Ref: https://stackoverflow.com/a/24613980/6943581\n    file_handle = open(dst, \"rb\")  # noqa: SIM115\n\n    def stream_and_remove_file():\n        yield from file_handle\n        file_handle.close()\n        tmp_dir.cleanup()\n\n    file_sender_response = current_app.response_class(stream_and_remove_file())\n\n    return _response_with_file_attachment_headers(artifact_path, file_sender_response)\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `PUT /mlflow-artifacts/artifacts/<artifact_path>` to upload an artifact\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    artifact_path = validate_path_is_safe(artifact_path)\n    head, tail = posixpath.split(artifact_path)\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        tmp_path = os.path.join(tmp_dir, tail)\n        with open(tmp_path, \"wb\") as f:\n            chunk_size = 1024 * 1024  # 1 MB\n            while True:\n                chunk = request.stream.read(chunk_size)\n                if len(chunk) == 0:\n                    break\n                f.write(chunk)\n\n        artifact_repo = _get_artifact_repo_mlflow_artifacts()\n        artifact_repo.log_artifact(tmp_path, artifact_path=head or None)\n\n    return _wrap_response(UploadArtifact.Response())\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _list_artifacts_mlflow_artifacts():\n    \"\"\"\n    A request handler for `GET /mlflow-artifacts/artifacts?path=<value>` to list artifacts in `path`\n    (a relative path from the root artifact directory).\n    \"\"\"\n    request_message = _get_request_message(ListArtifactsMlflowArtifacts())\n    path = validate_path_is_safe(request_message.path) if request_message.HasField(\"path\") else None\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    files = []\n    for file_info in artifact_repo.list_artifacts(path):\n        basename = posixpath.basename(file_info.path)\n        new_file_info = FileInfo(basename, file_info.is_dir, file_info.file_size)\n        files.append(new_file_info.to_proto())\n    response_message = ListArtifacts.Response()\n    response_message.files.extend(files)\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _delete_artifact_mlflow_artifacts(artifact_path):\n    \"\"\"\n    A request handler for `DELETE /mlflow-artifacts/artifacts?path=<value>` to delete artifacts in\n    `path` (a relative path from the root artifact directory).\n    \"\"\"\n    artifact_path = validate_path_is_safe(artifact_path)\n    _get_request_message(DeleteArtifact())\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    artifact_repo.delete_artifacts(artifact_path)\n    response_message = DeleteArtifact.Response()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\ndef _validate_support_multipart_upload(artifact_repo):\n    if not isinstance(artifact_repo, MultipartUploadMixin):\n        raise _UnsupportedMultipartUploadException()\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _create_multipart_upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `POST /mlflow-artifacts/mpu/create` to create a multipart upload\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    artifact_path = validate_path_is_safe(artifact_path)\n\n    request_message = _get_request_message(\n        CreateMultipartUpload(),\n        schema={\n            \"path\": [_assert_required, _assert_string],\n            \"num_parts\": [_assert_intlike],\n        },\n    )\n    path = request_message.path\n    num_parts = request_message.num_parts\n\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    _validate_support_multipart_upload(artifact_repo)\n\n    create_response = artifact_repo.create_multipart_upload(\n        path,\n        num_parts,\n        artifact_path,\n    )\n    response_message = create_response.to_proto()\n    response = Response(mimetype=\"application/json\")\n    response.set_data(message_to_json(response_message))\n    return response\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _complete_multipart_upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `POST /mlflow-artifacts/mpu/complete` to complete a multipart upload\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    artifact_path = validate_path_is_safe(artifact_path)\n\n    request_message = _get_request_message(\n        CompleteMultipartUpload(),\n        schema={\n            \"path\": [_assert_required, _assert_string],\n            \"upload_id\": [_assert_string],\n            \"parts\": [_assert_required],\n        },\n    )\n    path = request_message.path\n    upload_id = request_message.upload_id\n    parts = [MultipartUploadPart.from_proto(part) for part in request_message.parts]\n\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    _validate_support_multipart_upload(artifact_repo)\n\n    artifact_repo.complete_multipart_upload(\n        path,\n        upload_id,\n        parts,\n        artifact_path,\n    )\n    return _wrap_response(CompleteMultipartUpload.Response())\n\n\n@catch_mlflow_exception\n@_disable_unless_serve_artifacts\ndef _abort_multipart_upload_artifact(artifact_path):\n    \"\"\"\n    A request handler for `POST /mlflow-artifacts/mpu/abort` to abort a multipart upload\n    to `artifact_path` (a relative path from the root artifact directory).\n    \"\"\"\n    artifact_path = validate_path_is_safe(artifact_path)\n\n    request_message = _get_request_message(\n        AbortMultipartUpload(),\n        schema={\n            \"path\": [_assert_required, _assert_string],\n            \"upload_id\": [_assert_string],\n        },\n    )\n    path = request_message.path\n    upload_id = request_message.upload_id\n\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    _validate_support_multipart_upload(artifact_repo)\n\n    artifact_repo.abort_multipart_upload(\n        path,\n        upload_id,\n        artifact_path,\n    )\n    return _wrap_response(AbortMultipartUpload.Response())\n\n\ndef _get_rest_path(base_path):\n    return f\"/api/2.0{base_path}\"\n\n\ndef _get_ajax_path(base_path):\n    return _add_static_prefix(f\"/ajax-api/2.0{base_path}\")\n\n\ndef _add_static_prefix(route):\n    prefix = os.environ.get(STATIC_PREFIX_ENV_VAR)\n    if prefix:\n        return prefix + route\n    return route\n\n\ndef _get_paths(base_path):\n    \"\"\"\n    A service endpoints base path is typically something like /mlflow/experiment.\n    We should register paths like /api/2.0/mlflow/experiment and\n    /ajax-api/2.0/mlflow/experiment in the Flask router.\n    \"\"\"\n    return [_get_rest_path(base_path), _get_ajax_path(base_path)]\n\n\ndef get_handler(request_class):\n    \"\"\"\n    :param request_class: The type of protobuf message\n    :return:\n    \"\"\"\n    return HANDLERS.get(request_class, _not_implemented)\n\n\ndef get_service_endpoints(service, get_handler):\n    ret = []\n    for service_method in service.DESCRIPTOR.methods:\n        endpoints = service_method.GetOptions().Extensions[databricks_pb2.rpc].endpoints\n        for endpoint in endpoints:\n            for http_path in _get_paths(endpoint.path):\n                handler = get_handler(service().GetRequestClass(service_method))\n                ret.append((http_path, handler, [endpoint.method]))\n    return ret\n\n\ndef get_endpoints(get_handler=get_handler):\n    \"\"\"\n    :return: List of tuples (path, handler, methods)\n    \"\"\"\n    return (\n        get_service_endpoints(MlflowService, get_handler)\n        + get_service_endpoints(ModelRegistryService, get_handler)\n        + get_service_endpoints(MlflowArtifactsService, get_handler)\n    )\n\n\nHANDLERS = {\n    # Tracking Server APIs\n    CreateExperiment: _create_experiment,\n    GetExperiment: _get_experiment,\n    GetExperimentByName: _get_experiment_by_name,\n    DeleteExperiment: _delete_experiment,\n    RestoreExperiment: _restore_experiment,\n    UpdateExperiment: _update_experiment,\n    CreateRun: _create_run,\n    UpdateRun: _update_run,\n    DeleteRun: _delete_run,\n    RestoreRun: _restore_run,\n    LogParam: _log_param,\n    LogMetric: _log_metric,\n    SetExperimentTag: _set_experiment_tag,\n    SetTag: _set_tag,\n    DeleteTag: _delete_tag,\n    LogBatch: _log_batch,\n    LogModel: _log_model,\n    GetRun: _get_run,\n    SearchRuns: _search_runs,\n    ListArtifacts: _list_artifacts,\n    GetMetricHistory: _get_metric_history,\n    SearchExperiments: _search_experiments,\n    LogInputs: _log_inputs,\n    # Model Registry APIs\n    CreateRegisteredModel: _create_registered_model,\n    GetRegisteredModel: _get_registered_model,\n    DeleteRegisteredModel: _delete_registered_model,\n    UpdateRegisteredModel: _update_registered_model,\n    RenameRegisteredModel: _rename_registered_model,\n    SearchRegisteredModels: _search_registered_models,\n    GetLatestVersions: _get_latest_versions,\n    CreateModelVersion: _create_model_version,\n    GetModelVersion: _get_model_version,\n    DeleteModelVersion: _delete_model_version,\n    UpdateModelVersion: _update_model_version,\n    TransitionModelVersionStage: _transition_stage,\n    GetModelVersionDownloadUri: _get_model_version_download_uri,\n    SearchModelVersions: _search_model_versions,\n    SetRegisteredModelTag: _set_registered_model_tag,\n    DeleteRegisteredModelTag: _delete_registered_model_tag,\n    SetModelVersionTag: _set_model_version_tag,\n    DeleteModelVersionTag: _delete_model_version_tag,\n    SetRegisteredModelAlias: _set_registered_model_alias,\n    DeleteRegisteredModelAlias: _delete_registered_model_alias,\n    GetModelVersionByAlias: _get_model_version_by_alias,\n    # MLflow Artifacts APIs\n    DownloadArtifact: _download_artifact,\n    UploadArtifact: _upload_artifact,\n    ListArtifactsMlflowArtifacts: _list_artifacts_mlflow_artifacts,\n    DeleteArtifact: _delete_artifact_mlflow_artifacts,\n    CreateMultipartUpload: _create_multipart_upload_artifact,\n    CompleteMultipartUpload: _complete_multipart_upload_artifact,\n    AbortMultipartUpload: _abort_multipart_upload_artifact,\n}\n", "import logging\nimport os\nimport posixpath\n\nimport requests\nfrom requests import HTTPError\n\nfrom mlflow.entities import FileInfo\nfrom mlflow.entities.multipart_upload import (\n    CreateMultipartUploadResponse,\n    MultipartUploadCredential,\n    MultipartUploadPart,\n)\nfrom mlflow.environment_variables import (\n    MLFLOW_ENABLE_PROXY_MULTIPART_UPLOAD,\n    MLFLOW_MULTIPART_UPLOAD_CHUNK_SIZE,\n    MLFLOW_MULTIPART_UPLOAD_MINIMUM_FILE_SIZE,\n)\nfrom mlflow.exceptions import MlflowException, _UnsupportedMultipartUploadException\nfrom mlflow.store.artifact.artifact_repo import (\n    ArtifactRepository,\n    MultipartUploadMixin,\n    verify_artifact_path,\n)\nfrom mlflow.store.artifact.cloud_artifact_repo import _complete_futures, _compute_num_chunks\nfrom mlflow.tracking._tracking_service.utils import _get_default_host_creds\nfrom mlflow.utils.file_utils import read_chunk, relative_path_to_artifact_path\nfrom mlflow.utils.mime_type_utils import _guess_mime_type\nfrom mlflow.utils.rest_utils import augmented_raise_for_status, http_request\nfrom mlflow.utils.uri import validate_path_is_safe\n\n_logger = logging.getLogger(__name__)\n\n\nclass HttpArtifactRepository(ArtifactRepository, MultipartUploadMixin):\n    \"\"\"Stores artifacts in a remote artifact storage using HTTP requests\"\"\"\n\n    @property\n    def _host_creds(self):\n        return _get_default_host_creds(self.artifact_uri)\n\n    def log_artifact(self, local_file, artifact_path=None):\n        verify_artifact_path(artifact_path)\n\n        # Try to perform multipart upload if the file is large.\n        # If the server does not support, or if the upload failed, revert to normal upload.\n        if (\n            MLFLOW_ENABLE_PROXY_MULTIPART_UPLOAD.get()\n            and os.path.getsize(local_file) >= MLFLOW_MULTIPART_UPLOAD_MINIMUM_FILE_SIZE.get()\n        ):\n            try:\n                self._try_multipart_upload(local_file, artifact_path)\n                return\n            except _UnsupportedMultipartUploadException:\n                pass\n\n        file_name = os.path.basename(local_file)\n        mime_type = _guess_mime_type(file_name)\n        paths = (artifact_path, file_name) if artifact_path else (file_name,)\n        endpoint = posixpath.join(\"/\", *paths)\n        extra_headers = {\"Content-Type\": mime_type}\n        with open(local_file, \"rb\") as f:\n            resp = http_request(\n                self._host_creds, endpoint, \"PUT\", data=f, extra_headers=extra_headers\n            )\n            augmented_raise_for_status(resp)\n\n    def log_artifacts(self, local_dir, artifact_path=None):\n        local_dir = os.path.abspath(local_dir)\n        for root, _, filenames in os.walk(local_dir):\n            if root == local_dir:\n                artifact_dir = artifact_path\n            else:\n                rel_path = os.path.relpath(root, local_dir)\n                rel_path = relative_path_to_artifact_path(rel_path)\n                artifact_dir = (\n                    posixpath.join(artifact_path, rel_path) if artifact_path else rel_path\n                )\n            for f in filenames:\n                self.log_artifact(os.path.join(root, f), artifact_dir)\n\n    def list_artifacts(self, path=None):\n        endpoint = \"/mlflow-artifacts/artifacts\"\n        url, tail = self.artifact_uri.split(endpoint, maxsplit=1)\n        root = tail.lstrip(\"/\")\n        params = {\"path\": posixpath.join(root, path) if path else root}\n        host_creds = _get_default_host_creds(url)\n        resp = http_request(host_creds, endpoint, \"GET\", params=params)\n        augmented_raise_for_status(resp)\n        file_infos = []\n        for f in resp.json().get(\"files\", []):\n            validated_path = validate_path_is_safe(f[\"path\"])\n            file_info = FileInfo(\n                posixpath.join(path, validated_path) if path else validated_path,\n                f[\"is_dir\"],\n                int(f[\"file_size\"]) if (\"file_size\" in f) else None,\n            )\n            file_infos.append(file_info)\n\n        return sorted(file_infos, key=lambda f: f.path)\n\n    def _download_file(self, remote_file_path, local_path):\n        endpoint = posixpath.join(\"/\", remote_file_path)\n        resp = http_request(self._host_creds, endpoint, \"GET\", stream=True)\n        augmented_raise_for_status(resp)\n        with open(local_path, \"wb\") as f:\n            chunk_size = 1024 * 1024  # 1 MB\n            for chunk in resp.iter_content(chunk_size=chunk_size):\n                f.write(chunk)\n\n    def delete_artifacts(self, artifact_path=None):\n        endpoint = posixpath.join(\"/\", artifact_path) if artifact_path else \"/\"\n        resp = http_request(self._host_creds, endpoint, \"DELETE\", stream=True)\n        augmented_raise_for_status(resp)\n\n    def create_multipart_upload(self, local_file, num_parts=1, artifact_path=None):\n        url, _ = self.artifact_uri.split(\"/mlflow-artifacts\", maxsplit=1)\n        host_creds = _get_default_host_creds(url)\n        base_endpoint = \"/mlflow-artifacts/mpu/create\"\n        endpoint = posixpath.join(base_endpoint, artifact_path) if artifact_path else base_endpoint\n        params = {\n            \"path\": local_file,\n            \"num_parts\": num_parts,\n        }\n        resp = http_request(host_creds, endpoint, \"POST\", json=params)\n        augmented_raise_for_status(resp)\n        return CreateMultipartUploadResponse.from_dict(resp.json())\n\n    def complete_multipart_upload(self, local_file, upload_id, parts=None, artifact_path=None):\n        url, _ = self.artifact_uri.split(\"/mlflow-artifacts\", maxsplit=1)\n        host_creds = _get_default_host_creds(url)\n        base_endpoint = \"/mlflow-artifacts/mpu/complete\"\n        endpoint = posixpath.join(base_endpoint, artifact_path) if artifact_path else base_endpoint\n        params = {\n            \"path\": local_file,\n            \"upload_id\": upload_id,\n            \"parts\": [part.to_dict() for part in parts],\n        }\n        resp = http_request(host_creds, endpoint, \"POST\", json=params)\n        augmented_raise_for_status(resp)\n\n    def abort_multipart_upload(self, local_file, upload_id, artifact_path=None):\n        url, _ = self.artifact_uri.split(\"/mlflow-artifacts\", maxsplit=1)\n        host_creds = _get_default_host_creds(url)\n        base_endpoint = \"/mlflow-artifacts/mpu/abort\"\n        endpoint = posixpath.join(base_endpoint, artifact_path) if artifact_path else base_endpoint\n        params = {\n            \"path\": local_file,\n            \"upload_id\": upload_id,\n        }\n        resp = http_request(host_creds, endpoint, \"POST\", json=params)\n        augmented_raise_for_status(resp)\n\n    @staticmethod\n    def _upload_part(credential: MultipartUploadCredential, local_file, size, start_byte):\n        data = read_chunk(local_file, size, start_byte)\n        response = requests.put(credential.url, data=data, headers=credential.headers)\n        augmented_raise_for_status(response)\n        return MultipartUploadPart(\n            part_number=credential.part_number,\n            etag=response.headers.get(\"ETag\", \"\"),\n            url=credential.url,\n        )\n\n    def _try_multipart_upload(self, local_file, artifact_path=None):\n        \"\"\"\n        Attempts to perform multipart upload to log an artifact.\n        Returns if the multipart upload is successful.\n        Raises UnsupportedMultipartUploadException if multipart upload is unsupported.\n        \"\"\"\n        chunk_size = MLFLOW_MULTIPART_UPLOAD_CHUNK_SIZE.get()\n        num_parts = _compute_num_chunks(local_file, chunk_size)\n\n        try:\n            create = self.create_multipart_upload(local_file, num_parts, artifact_path)\n        except HTTPError as e:\n            # return False if server does not support multipart upload\n            error_message = e.response.json().get(\"message\", \"\")\n            if isinstance(error_message, str) and error_message.startswith(\n                _UnsupportedMultipartUploadException.MESSAGE\n            ):\n                raise _UnsupportedMultipartUploadException()\n            raise\n\n        try:\n            futures = {}\n            for i, credential in enumerate(create.credentials):\n                future = self.thread_pool.submit(\n                    self._upload_part,\n                    credential=credential,\n                    local_file=local_file,\n                    size=chunk_size,\n                    start_byte=chunk_size * i,\n                )\n                futures[future] = credential.part_number\n\n            parts, errors = _complete_futures(futures, local_file)\n            if errors:\n                raise MlflowException(\n                    f\"Failed to upload at least one part of {local_file}. Errors: {errors}\"\n                )\n\n            parts = sorted(parts.values(), key=lambda part: part.part_number)\n            self.complete_multipart_upload(local_file, create.upload_id, parts, artifact_path)\n        except Exception as e:\n            self.abort_multipart_upload(local_file, create.upload_id, artifact_path)\n            _logger.warning(f\"Failed to upload file {local_file} using multipart upload: {e}\")\n            raise\n", "import os\nimport pathlib\nimport posixpath\nimport re\nimport urllib.parse\nimport uuid\nfrom typing import Any, Tuple\n\nfrom mlflow.exceptions import MlflowException\nfrom mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE\nfrom mlflow.store.db.db_types import DATABASE_ENGINES\nfrom mlflow.utils.os import is_windows\nfrom mlflow.utils.validation import _validate_db_type_string\n\n_INVALID_DB_URI_MSG = (\n    \"Please refer to https://mlflow.org/docs/latest/tracking.html#storage for \"\n    \"format specifications.\"\n)\n\n_DBFS_FUSE_PREFIX = \"/dbfs/\"\n_DBFS_HDFS_URI_PREFIX = \"dbfs:/\"\n_UC_VOLUMES_URI_PREFIX = \"/Volumes/\"\n_UC_DBFS_SYMLINK_PREFIX = \"/.fuse-mounts/\"\n_DATABRICKS_UNITY_CATALOG_SCHEME = \"databricks-uc\"\n\n\ndef is_local_uri(uri, is_tracking_or_registry_uri=True):\n    \"\"\"\n    Returns true if the specified URI is a local file path (/foo or file:/foo).\n\n    :param uri: The URI.\n    :param is_tracking_uri: Whether or not the specified URI is an MLflow Tracking or MLflow\n                            Model Registry URI. Examples of other URIs are MLflow artifact URIs,\n                            filesystem paths, etc.\n    \"\"\"\n    if uri == \"databricks\" and is_tracking_or_registry_uri:\n        return False\n\n    if is_windows() and uri.startswith(\"\\\\\\\\\"):\n        # windows network drive path looks like: \"\\\\<server name>\\path\\...\"\n        return False\n\n    parsed_uri = urllib.parse.urlparse(uri)\n    scheme = parsed_uri.scheme\n    if scheme == \"\":\n        return True\n\n    if parsed_uri.hostname and not (\n        parsed_uri.hostname == \".\"\n        or parsed_uri.hostname.startswith(\"localhost\")\n        or parsed_uri.hostname.startswith(\"127.0.0.1\")\n    ):\n        return False\n\n    if scheme == \"file\":\n        return True\n\n    if is_windows() and len(scheme) == 1 and scheme.lower() == pathlib.Path(uri).drive.lower()[0]:\n        return True\n\n    return False\n\n\ndef is_file_uri(uri):\n    return urllib.parse.urlparse(uri).scheme == \"file\"\n\n\ndef is_http_uri(uri):\n    scheme = urllib.parse.urlparse(uri).scheme\n    return scheme == \"http\" or scheme == \"https\"\n\n\ndef is_databricks_uri(uri):\n    \"\"\"\n    Databricks URIs look like 'databricks' (default profile) or 'databricks://profile'\n    or 'databricks://secret_scope:secret_key_prefix'.\n    \"\"\"\n    scheme = urllib.parse.urlparse(uri).scheme\n    return scheme == \"databricks\" or uri == \"databricks\"\n\n\ndef is_fuse_or_uc_volumes_uri(uri):\n    \"\"\"\n    Validates whether a provided URI is directed to a FUSE mount point or a UC volumes mount point.\n    Multiple directory paths are collapsed into a single designator for root path validation.\n    example:\n    \"////Volumes/\" will resolve to \"/Volumes/\" for validation purposes.\n    \"\"\"\n    resolved_uri = re.sub(\"/+\", \"/\", uri)\n    return any(\n        resolved_uri.startswith(x)\n        for x in [\n            _DBFS_FUSE_PREFIX,\n            _DBFS_HDFS_URI_PREFIX,\n            _UC_VOLUMES_URI_PREFIX,\n            _UC_DBFS_SYMLINK_PREFIX,\n        ]\n    )\n\n\ndef is_databricks_unity_catalog_uri(uri):\n    scheme = urllib.parse.urlparse(uri).scheme\n    return scheme == _DATABRICKS_UNITY_CATALOG_SCHEME or uri == _DATABRICKS_UNITY_CATALOG_SCHEME\n\n\ndef construct_db_uri_from_profile(profile):\n    if profile:\n        return \"databricks://\" + profile\n\n\n# Both scope and key_prefix should not contain special chars for URIs, like '/'\n# and ':'.\ndef validate_db_scope_prefix_info(scope, prefix):\n    for c in [\"/\", \":\", \" \"]:\n        if c in scope:\n            raise MlflowException(\n                f\"Unsupported Databricks profile name: {scope}.\"\n                f\" Profile names cannot contain '{c}'.\"\n            )\n        if prefix and c in prefix:\n            raise MlflowException(\n                f\"Unsupported Databricks profile key prefix: {prefix}.\"\n                f\" Key prefixes cannot contain '{c}'.\"\n            )\n    if prefix is not None and prefix.strip() == \"\":\n        raise MlflowException(\n            f\"Unsupported Databricks profile key prefix: '{prefix}'.\"\n            \" Key prefixes cannot be empty.\"\n        )\n\n\ndef get_db_info_from_uri(uri):\n    \"\"\"\n    Get the Databricks profile specified by the tracking URI (if any), otherwise\n    returns None.\n    \"\"\"\n    parsed_uri = urllib.parse.urlparse(uri)\n    if parsed_uri.scheme == \"databricks\" or parsed_uri.scheme == _DATABRICKS_UNITY_CATALOG_SCHEME:\n        # netloc should not be an empty string unless URI is formatted incorrectly.\n        if parsed_uri.netloc == \"\":\n            raise MlflowException(\n                f\"URI is formatted incorrectly: no netloc in URI '{uri}'.\"\n                \" This may be the case if there is only one slash in the URI.\"\n            )\n        profile_tokens = parsed_uri.netloc.split(\":\")\n        parsed_scope = profile_tokens[0]\n        if len(profile_tokens) == 1:\n            parsed_key_prefix = None\n        elif len(profile_tokens) == 2:\n            parsed_key_prefix = profile_tokens[1]\n        else:\n            # parse the content before the first colon as the profile.\n            parsed_key_prefix = \":\".join(profile_tokens[1:])\n        validate_db_scope_prefix_info(parsed_scope, parsed_key_prefix)\n        return parsed_scope, parsed_key_prefix\n    return None, None\n\n\ndef get_databricks_profile_uri_from_artifact_uri(uri, result_scheme=\"databricks\"):\n    \"\"\"\n    Retrieves the netloc portion of the URI as a ``databricks://`` or `databricks-uc://` URI,\n    if it is a proper Databricks profile specification, e.g.\n    ``profile@databricks`` or ``secret_scope:key_prefix@databricks``.\n    \"\"\"\n    parsed = urllib.parse.urlparse(uri)\n    if not parsed.netloc or parsed.hostname != result_scheme:\n        return None\n    if not parsed.username:  # no profile or scope:key\n        return result_scheme  # the default tracking/registry URI\n    validate_db_scope_prefix_info(parsed.username, parsed.password)\n    key_prefix = \":\" + parsed.password if parsed.password else \"\"\n    return f\"{result_scheme}://\" + parsed.username + key_prefix\n\n\ndef remove_databricks_profile_info_from_artifact_uri(artifact_uri):\n    \"\"\"\n    Only removes the netloc portion of the URI if it is a Databricks\n    profile specification, e.g.\n    ``profile@databricks`` or ``secret_scope:key_prefix@databricks``.\n    \"\"\"\n    parsed = urllib.parse.urlparse(artifact_uri)\n    if not parsed.netloc or parsed.hostname != \"databricks\":\n        return artifact_uri\n    return urllib.parse.urlunparse(parsed._replace(netloc=\"\"))\n\n\ndef add_databricks_profile_info_to_artifact_uri(artifact_uri, databricks_profile_uri):\n    \"\"\"\n    Throws an exception if ``databricks_profile_uri`` is not valid.\n    \"\"\"\n    if not databricks_profile_uri or not is_databricks_uri(databricks_profile_uri):\n        return artifact_uri\n    artifact_uri_parsed = urllib.parse.urlparse(artifact_uri)\n    # Do not overwrite the authority section if there is already one\n    if artifact_uri_parsed.netloc:\n        return artifact_uri\n\n    scheme = artifact_uri_parsed.scheme\n    if scheme == \"dbfs\" or scheme == \"runs\" or scheme == \"models\":\n        if databricks_profile_uri == \"databricks\":\n            netloc = \"databricks\"\n        else:\n            (profile, key_prefix) = get_db_info_from_uri(databricks_profile_uri)\n            prefix = \":\" + key_prefix if key_prefix else \"\"\n            netloc = profile + prefix + \"@databricks\"\n        new_parsed = artifact_uri_parsed._replace(netloc=netloc)\n        return urllib.parse.urlunparse(new_parsed)\n    else:\n        return artifact_uri\n\n\ndef extract_db_type_from_uri(db_uri):\n    \"\"\"\n    Parse the specified DB URI to extract the database type. Confirm the database type is\n    supported. If a driver is specified, confirm it passes a plausible regex.\n    \"\"\"\n    scheme = urllib.parse.urlparse(db_uri).scheme\n    scheme_plus_count = scheme.count(\"+\")\n\n    if scheme_plus_count == 0:\n        db_type = scheme\n    elif scheme_plus_count == 1:\n        db_type, _ = scheme.split(\"+\")\n    else:\n        error_msg = f\"Invalid database URI: '{db_uri}'. {_INVALID_DB_URI_MSG}\"\n        raise MlflowException(error_msg, INVALID_PARAMETER_VALUE)\n\n    _validate_db_type_string(db_type)\n\n    return db_type\n\n\ndef get_uri_scheme(uri_or_path):\n    scheme = urllib.parse.urlparse(uri_or_path).scheme\n    if any(scheme.lower().startswith(db) for db in DATABASE_ENGINES):\n        return extract_db_type_from_uri(uri_or_path)\n    return scheme\n\n\ndef extract_and_normalize_path(uri):\n    parsed_uri_path = urllib.parse.urlparse(uri).path\n    normalized_path = posixpath.normpath(parsed_uri_path)\n    return normalized_path.lstrip(\"/\")\n\n\ndef append_to_uri_path(uri, *paths):\n    \"\"\"\n    Appends the specified POSIX `paths` to the path component of the specified `uri`.\n\n    :param uri: The input URI, represented as a string.\n    :param paths: The POSIX paths to append to the specified `uri`'s path component.\n    :return: A new URI with a path component consisting of the specified `paths` appended to\n             the path component of the specified `uri`.\n\n    >>> uri1 = \"s3://root/base/path?param=value\"\n    >>> uri1 = append_to_uri_path(uri1, \"some/subpath\", \"/anotherpath\")\n    >>> assert uri1 == \"s3://root/base/path/some/subpath/anotherpath?param=value\"\n    >>> uri2 = \"a/posix/path\"\n    >>> uri2 = append_to_uri_path(uri2, \"/some\", \"subpath\")\n    >>> assert uri2 == \"a/posixpath/some/subpath\"\n    \"\"\"\n    path = \"\"\n    for subpath in paths:\n        path = _join_posixpaths_and_append_absolute_suffixes(path, subpath)\n\n    parsed_uri = urllib.parse.urlparse(uri)\n\n    # Validate query string not to contain any traveral path (../) before appending\n    # to the end of the path, otherwise they will be resolved as part of the path.\n    validate_query_string(parsed_uri.query)\n\n    if len(parsed_uri.scheme) == 0:\n        # If the input URI does not define a scheme, we assume that it is a POSIX path\n        # and join it with the specified input paths\n        return _join_posixpaths_and_append_absolute_suffixes(uri, path)\n\n    prefix = \"\"\n    if not parsed_uri.path.startswith(\"/\"):\n        # For certain URI schemes (e.g., \"file:\"), urllib's unparse routine does\n        # not preserve the relative URI path component properly. In certain cases,\n        # urlunparse converts relative paths to absolute paths. We introduce this logic\n        # to circumvent urlunparse's erroneous conversion\n        prefix = parsed_uri.scheme + \":\"\n        parsed_uri = parsed_uri._replace(scheme=\"\")\n\n    new_uri_path = _join_posixpaths_and_append_absolute_suffixes(parsed_uri.path, path)\n    new_parsed_uri = parsed_uri._replace(path=new_uri_path)\n    return prefix + urllib.parse.urlunparse(new_parsed_uri)\n\n\ndef append_to_uri_query_params(uri, *query_params: Tuple[str, Any]) -> str:\n    \"\"\"\n    Appends the specified query parameters to an existing URI.\n\n    :param uri: The URI to which to append query parameters.\n    :param query_params: Query parameters to append. Each parameter should\n                         be a 2-element tuple. For example, ``(\"key\", \"value\")``.\n    \"\"\"\n    parsed_uri = urllib.parse.urlparse(uri)\n    parsed_query = urllib.parse.parse_qsl(parsed_uri.query)\n    new_parsed_query = parsed_query + list(query_params)\n    new_query = urllib.parse.urlencode(new_parsed_query)\n    new_parsed_uri = parsed_uri._replace(query=new_query)\n    return urllib.parse.urlunparse(new_parsed_uri)\n\n\ndef _join_posixpaths_and_append_absolute_suffixes(prefix_path, suffix_path):\n    \"\"\"\n    Joins the POSIX path `prefix_path` with the POSIX path `suffix_path`. Unlike posixpath.join(),\n    if `suffix_path` is an absolute path, it is appended to prefix_path.\n\n    >>> result1 = _join_posixpaths_and_append_absolute_suffixes(\"relpath1\", \"relpath2\")\n    >>> assert result1 == \"relpath1/relpath2\"\n    >>> result2 = _join_posixpaths_and_append_absolute_suffixes(\"relpath\", \"/absolutepath\")\n    >>> assert result2 == \"relpath/absolutepath\"\n    >>> result3 = _join_posixpaths_and_append_absolute_suffixes(\"/absolutepath\", \"relpath\")\n    >>> assert result3 == \"/absolutepath/relpath\"\n    >>> result4 = _join_posixpaths_and_append_absolute_suffixes(\"/absolutepath1\", \"/absolutepath2\")\n    >>> assert result4 == \"/absolutepath1/absolutepath2\"\n    \"\"\"\n    if len(prefix_path) == 0:\n        return suffix_path\n\n    # If the specified prefix path is non-empty, we must relativize the suffix path by removing\n    # the leading slash, if present. Otherwise, posixpath.join() would omit the prefix from the\n    # joined path\n    suffix_path = suffix_path.lstrip(posixpath.sep)\n    return posixpath.join(prefix_path, suffix_path)\n\n\ndef is_databricks_acled_artifacts_uri(artifact_uri):\n    _ACLED_ARTIFACT_URI = \"databricks/mlflow-tracking/\"\n    artifact_uri_path = extract_and_normalize_path(artifact_uri)\n    return artifact_uri_path.startswith(_ACLED_ARTIFACT_URI)\n\n\ndef is_databricks_model_registry_artifacts_uri(artifact_uri):\n    _MODEL_REGISTRY_ARTIFACT_URI = \"databricks/mlflow-registry/\"\n    artifact_uri_path = extract_and_normalize_path(artifact_uri)\n    return artifact_uri_path.startswith(_MODEL_REGISTRY_ARTIFACT_URI)\n\n\ndef is_valid_dbfs_uri(uri):\n    parsed = urllib.parse.urlparse(uri)\n    if parsed.scheme != \"dbfs\":\n        return False\n    try:\n        db_profile_uri = get_databricks_profile_uri_from_artifact_uri(uri)\n    except MlflowException:\n        db_profile_uri = None\n    return not parsed.netloc or db_profile_uri is not None\n\n\ndef dbfs_hdfs_uri_to_fuse_path(dbfs_uri):\n    \"\"\"\n    Converts the provided DBFS URI into a DBFS FUSE path\n    :param dbfs_uri: A DBFS URI like \"dbfs:/my-directory\". Can also be a scheme-less URI like\n                     \"/my-directory\" if running in an environment where the default HDFS filesystem\n                     is \"dbfs:/\" (e.g. Databricks)\n    :return A DBFS FUSE-style path, e.g. \"/dbfs/my-directory\"\n    \"\"\"\n    if not is_valid_dbfs_uri(dbfs_uri) and dbfs_uri == posixpath.abspath(dbfs_uri):\n        # Convert posixpaths (e.g. \"/tmp/mlflow\") to DBFS URIs by adding \"dbfs:/\" as a prefix\n        dbfs_uri = \"dbfs:\" + dbfs_uri\n    if not dbfs_uri.startswith(_DBFS_HDFS_URI_PREFIX):\n        raise MlflowException(\n            f\"Path '{dbfs_uri}' did not start with expected DBFS URI \"\n            f\"prefix '{_DBFS_HDFS_URI_PREFIX}'\",\n        )\n\n    return _DBFS_FUSE_PREFIX + dbfs_uri[len(_DBFS_HDFS_URI_PREFIX) :]\n\n\ndef resolve_uri_if_local(local_uri):\n    \"\"\"\n    if `local_uri` is passed in as a relative local path, this function\n    resolves it to absolute path relative to current working directory.\n\n    :param local_uri: Relative or absolute path or local file uri\n\n    :return: a fully-formed absolute uri path or an absolute filesystem path\n    \"\"\"\n    from mlflow.utils.file_utils import local_file_uri_to_path\n\n    if local_uri is not None and is_local_uri(local_uri):\n        scheme = get_uri_scheme(local_uri)\n        cwd = pathlib.Path.cwd()\n        local_path = local_file_uri_to_path(local_uri)\n        if not pathlib.Path(local_path).is_absolute():\n            if scheme == \"\":\n                if is_windows():\n                    return urllib.parse.urlunsplit(\n                        (\n                            \"file\",\n                            None,\n                            cwd.joinpath(local_path).as_posix(),\n                            None,\n                            None,\n                        )\n                    )\n                return cwd.joinpath(local_path).as_posix()\n            local_uri_split = urllib.parse.urlsplit(local_uri)\n            return urllib.parse.urlunsplit(\n                (\n                    local_uri_split.scheme,\n                    None,\n                    cwd.joinpath(local_path).as_posix(),\n                    local_uri_split.query,\n                    local_uri_split.fragment,\n                )\n            )\n    return local_uri\n\n\ndef generate_tmp_dfs_path(dfs_tmp):\n    return posixpath.join(dfs_tmp, str(uuid.uuid4()))\n\n\ndef join_paths(*paths: str) -> str:\n    stripped = (p.strip(\"/\") for p in paths)\n    return \"/\" + posixpath.normpath(posixpath.join(*stripped))\n\n\n_OS_ALT_SEPS = [sep for sep in [os.sep, os.path.altsep] if sep is not None and sep != \"/\"]\n\n\ndef validate_path_is_safe(path):\n    \"\"\"\n    Validates that the specified path is safe to join with a trusted prefix. This is a security\n    measure to prevent path traversal attacks.\n    A valid path should:\n        not contain separators other than '/'\n        not contain .. to navigate to parent dir in path\n        not be an absolute path\n    \"\"\"\n    from mlflow.utils.file_utils import local_file_uri_to_path\n\n    # We must decode path before validating it\n    path = _decode(path)\n\n    exc = MlflowException(\"Invalid path\", error_code=INVALID_PARAMETER_VALUE)\n    if \"#\" in path:\n        raise exc\n\n    if is_file_uri(path):\n        path = local_file_uri_to_path(path)\n    if (\n        any((s in path) for s in _OS_ALT_SEPS)\n        or \"..\" in path.split(\"/\")\n        or pathlib.PureWindowsPath(path).is_absolute()\n        or pathlib.PurePosixPath(path).is_absolute()\n        or (is_windows() and len(path) >= 2 and path[1] == \":\")\n    ):\n        raise exc\n\n    return path\n\n\ndef validate_query_string(query):\n    query = _decode(query)\n    # Block query strings contain any traveral path (../) because they\n    # could be resolved as part of the path and allow path traversal.\n    if \"..\" in query:\n        raise MlflowException(\"Invalid query string\", error_code=INVALID_PARAMETER_VALUE)\n\n\ndef _decode(url):\n    # Keep decoding until the url stops changing (with a max of 10 iterations)\n    for _ in range(10):\n        decoded = urllib.parse.unquote(url)\n        if decoded == url:\n            return url\n        url = decoded\n\n    raise ValueError(\"Failed to decode url\")\n"], "filenames": ["mlflow/server/handlers.py", "mlflow/store/artifact/http_artifact_repo.py", "mlflow/utils/uri.py"], "buggy_code_start_loc": [551, 92, 455], "buggy_code_end_loc": [2054, 95, 455], "fixing_code_start_loc": [551, 92, 456], "fixing_code_end_loc": [2050, 95, 458], "type": "CWE-434", "message": "This vulnerability is capable of writing arbitrary files into arbitrary locations on the remote filesystem in the context of the server process.", "other": {"cve": {"id": "CVE-2023-6976", "sourceIdentifier": "security@huntr.dev", "published": "2023-12-20T06:15:45.730", "lastModified": "2023-12-29T16:44:03.743", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This vulnerability is capable of writing arbitrary files into arbitrary locations on the remote filesystem in the context of the server process."}, {"lang": "es", "value": "Esta vulnerabilidad es capaz de escribir archivos arbitrarios en ubicaciones arbitrarias en el sistema de archivos remoto en el contexto del proceso del servidor."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:lfprojects:mlflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.9.2", "matchCriteriaId": "6B5585E2-CC70-4BED-AA89-B791F081ACFC"}]}]}], "references": [{"url": "https://github.com/mlflow/mlflow/commit/5044878da0c1851ccfdd5c0a867157ed9a502fbc", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/2408a52b-f05b-4cac-9765-4f74bac3f20f", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mlflow/mlflow/commit/5044878da0c1851ccfdd5c0a867157ed9a502fbc"}}