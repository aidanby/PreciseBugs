{"buggy_code": ["<?php\ndefine('SCRATCH_COMMENT_API_URL', 'https://api.scratch.mit.edu/users/%s/projects/%s/comments?offset=0&limit=20');\ndefine('PROJECT_LINK', 'https://scratch.mit.edu/projects/%s/');\n\nfunction randomVerificationCode() {\n\t// translate 0->A, 1->B, etc to bypass Scratch phone number censor\n\treturn strtr(hash('sha256', random_bytes(16)), '0123456789', 'ABCDEFGHIJ');\n}\n\nfunction generateNewCodeForSession(&$session) {\n\t$session->persist();\n\t$session->set('vercode', randomVerificationCode());\n\t$session->save();\n}\n\nfunction sessionVerificationCode(&$session) {\n\tif (!$session->exists('vercode')) {\n\t\tgenerateNewCodeForSession($session);\n\t}\n\treturn $session->get('vercode');\n}\n\nfunction commentsForProject($author, $project_id) {\n\treturn json_decode(file_get_contents(sprintf(\n\t\tSCRATCH_COMMENT_API_URL, $author, $project_id\n\t)), true);\n}\n\nfunction verifComments() {\n\treturn commentsForProject(\n\t\twfMessage('scratchlogin-project-author')->text(),\n\t\twfMessage('scratchlogin-project-id')->text()\n\t);\n}\n\nfunction topVerifCommenter($req_comment) {\n\t$comments = verifComments();\n\n\t$matching_comments = array_filter($comments, function(&$comment) use($req_comment) {\n\t\treturn stristr($comment['content'], $req_comment);\n\t});\n\tif (empty($matching_comments)) {\n\t\treturn null;\n\t}\n\treturn $matching_comments[0]['author']['username'];\n}\n\nclass ScratchSpecialPage extends SpecialPage {\n\n\tfunction execute($par) {\n\t\t$request = $this->getRequest();\n\t\t$out = $this->getOutput();\n\t\t$out->disallowUserJs();\n\t\t$this->setHeaders();\n\n\t\tif ($par == 'reset') {\n\t\t\t$this->resetCode( $out, $request );\n\t\t} else if ($request->wasPosted()) {\n\t\t\t$this->onPost( $out, $request );\n\t\t} else {\n\t\t\t$this->showForm( $out, $request );\n\t\t}\n\t}\n\n\t// show an error followed by the login form again\n\tfunction showError($error, $out, $request) {\n\t\t$out->addHTML(Html::rawElement('p', [ 'class' => 'error' ], $error));\n\t\t$this->showForm($out, $request);\n\t}\n\n\t// $instructions: message key giving instructions for this page\n\t// $action: message key for button value\n\tfunction verifForm($out, $request, $instructions, $action) {\n\t\t// this all takes place in a form\n\t\t$out->addHTML(Html::openElement(\n\t\t\t\t'form',\n\t\t\t\t[ 'method' => 'POST' ]\n\t\t));\n\n\t\t// create a link to the user verification project\n\t\t$link = Html::openElement('a', [\n\t\t\t'href' => sprintf(PROJECT_LINK, wfMessage('scratchlogin-project-id')->text()),\n\t\t\t'target' => '_blank'\n\t\t]);\n\n\t\t// show the instructions to comment the verification code\n\t\t// on the project (using the link we generated above)\n\t\t$out->addHTML(wfMessage($instructions)->rawParams(\n\t\t\t$link, Html::closeElement( 'a' ),\n\t\t\tsessionVerificationCode($request->getSession())\n\t\t)->inContentLanguage()->parseAsBlock());\n\n\t\t// show the submit button\n\t\t$out->addHTML(Html::rawElement(\n\t\t\t'input',\n\t\t\t[\n\t\t\t\t'type' => 'submit',\n\t\t\t\t'id' => 'mw-scratchlogin-form-submit',\n\t\t\t\t'value' => wfMessage($action)->inContentLanguage()->plain()\n\t\t\t]\n\t\t));\n\n\t\t//close the form\n\t\t$out->addHTML(Html::closeElement( 'form' ));\n\t}\n\n\tfunction verifSucceeded($out, $request) {\n\t\t// see the first person to comment the verification code\n\t\t$username = topVerifCommenter(sessionVerificationCode($request->getSession()));\n\n\t\t// if nobody commented the verification code, show an error\n\t\tif ($username == null) {\n\t\t\t$this->showError(\n\t\t\t\twfMessage('scratchlogin-uncommented')\n\t\t\t\t->inContentLanguage()->plain(),\n\t\t\t\t$out, $request\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\n\t\t// now attempt to retrieve the MediaWiki user\n\t\t// associated with whoever commented the verification code\n\t\t$user = User::newFromName($username);\n\n\t\t// ...if that user does not exist, then show an error\n\t\t// that this account does not exist on the wiki\n\t\tif ($user->getId() == 0) {\n\t\t\t$this->showError(\n\t\t\t\twfMessage('scratchlogin-unregistered', $username)\n\t\t\t\t->inContentLanguage()->parse(),\n\t\t\t\t$out, $request\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\n\t\t// clear the verification code in the session so that they have to\n\t\t// use a different code to login as a different user\n\t\t$request->getSession()->clear('vercode');\n\t\treturn $user;\n\t}\n\n\t// reset the code associated with the current user's session\n\tfunction doCodeReset($out, $request, $returnto) {\n\t\tgenerateNewCodeForSession($request->getSession());\n\t\t$out->addWikiMsg('scratchlogin-code-reset', $returnto);\n\t}\n}"], "fixing_code": ["<?php\ndefine('SCRATCH_COMMENT_API_URL', 'https://api.scratch.mit.edu/users/%s/projects/%s/comments?offset=0&limit=20');\ndefine('PROJECT_LINK', 'https://scratch.mit.edu/projects/%s/');\n\nfunction randomVerificationCode() {\n\t// translate 0->A, 1->B, etc to bypass Scratch phone number censor\n\treturn strtr(hash('sha256', random_bytes(16)), '0123456789', 'ABCDEFGHIJ');\n}\n\nfunction generateNewCodeForSession(&$session) {\n\t$session->persist();\n\t$session->set('vercode', randomVerificationCode());\n\t$session->save();\n}\n\nfunction sessionVerificationCode(&$session) {\n\tif (!$session->exists('vercode')) {\n\t\tgenerateNewCodeForSession($session);\n\t}\n\treturn $session->get('vercode');\n}\n\nfunction commentsForProject($author, $project_id) {\n\treturn json_decode(file_get_contents(sprintf(\n\t\tSCRATCH_COMMENT_API_URL, $author, $project_id\n\t)), true);\n}\n\nfunction verifComments() {\n\treturn commentsForProject(\n\t\twfMessage('scratchlogin-project-author')->text(),\n\t\twfMessage('scratchlogin-project-id')->text()\n\t);\n}\n\nfunction topVerifCommenter($req_comment) {\n\t$comments = verifComments();\n\n\t$matching_comments = array_filter($comments, function(&$comment) use($req_comment) {\n\t\tif (preg_match('/^_+|_+$|__+/', $comment['author']['username'])) return false;\n\t\treturn stristr($comment['content'], $req_comment);\n\t});\n\tif (empty($matching_comments)) {\n\t\treturn null;\n\t}\n\treturn $matching_comments[0]['author']['username'];\n}\n\nclass ScratchSpecialPage extends SpecialPage {\n\n\tfunction execute($par) {\n\t\t$request = $this->getRequest();\n\t\t$out = $this->getOutput();\n\t\t$out->disallowUserJs();\n\t\t$this->setHeaders();\n\n\t\tif ($par == 'reset') {\n\t\t\t$this->resetCode( $out, $request );\n\t\t} else if ($request->wasPosted()) {\n\t\t\t$this->onPost( $out, $request );\n\t\t} else {\n\t\t\t$this->showForm( $out, $request );\n\t\t}\n\t}\n\n\t// show an error followed by the login form again\n\tfunction showError($error, $out, $request) {\n\t\t$out->addHTML(Html::rawElement('p', [ 'class' => 'error' ], $error));\n\t\t$this->showForm($out, $request);\n\t}\n\n\t// $instructions: message key giving instructions for this page\n\t// $action: message key for button value\n\tfunction verifForm($out, $request, $instructions, $action) {\n\t\t// this all takes place in a form\n\t\t$out->addHTML(Html::openElement(\n\t\t\t\t'form',\n\t\t\t\t[ 'method' => 'POST' ]\n\t\t));\n\n\t\t// create a link to the user verification project\n\t\t$link = Html::openElement('a', [\n\t\t\t'href' => sprintf(PROJECT_LINK, wfMessage('scratchlogin-project-id')->text()),\n\t\t\t'target' => '_blank'\n\t\t]);\n\n\t\t// show the instructions to comment the verification code\n\t\t// on the project (using the link we generated above)\n\t\t$out->addHTML(wfMessage($instructions)->rawParams(\n\t\t\t$link, Html::closeElement( 'a' ),\n\t\t\tsessionVerificationCode($request->getSession())\n\t\t)->inContentLanguage()->parseAsBlock());\n\n\t\t// show the submit button\n\t\t$out->addHTML(Html::rawElement(\n\t\t\t'input',\n\t\t\t[\n\t\t\t\t'type' => 'submit',\n\t\t\t\t'id' => 'mw-scratchlogin-form-submit',\n\t\t\t\t'value' => wfMessage($action)->inContentLanguage()->plain()\n\t\t\t]\n\t\t));\n\n\t\t//close the form\n\t\t$out->addHTML(Html::closeElement( 'form' ));\n\t}\n\n\tfunction verifSucceeded($out, $request) {\n\t\t// see the first person to comment the verification code\n\t\t$username = topVerifCommenter(sessionVerificationCode($request->getSession()));\n\n\t\t// if nobody commented the verification code, show an error\n\t\tif ($username == null) {\n\t\t\t$this->showError(\n\t\t\t\twfMessage('scratchlogin-uncommented')\n\t\t\t\t->inContentLanguage()->plain(),\n\t\t\t\t$out, $request\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\n\t\t// now attempt to retrieve the MediaWiki user\n\t\t// associated with whoever commented the verification code\n\t\t$user = User::newFromName($username);\n\n\t\t// ...if that user does not exist, then show an error\n\t\t// that this account does not exist on the wiki\n\t\tif ($user->getId() == 0) {\n\t\t\t$this->showError(\n\t\t\t\twfMessage('scratchlogin-unregistered', $username)\n\t\t\t\t->inContentLanguage()->parse(),\n\t\t\t\t$out, $request\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\n\t\t// clear the verification code in the session so that they have to\n\t\t// use a different code to login as a different user\n\t\t$request->getSession()->clear('vercode');\n\t\treturn $user;\n\t}\n\n\t// reset the code associated with the current user's session\n\tfunction doCodeReset($out, $request, $returnto) {\n\t\tgenerateNewCodeForSession($request->getSession());\n\t\t$out->addWikiMsg('scratchlogin-code-reset', $returnto);\n\t}\n}\n"], "filenames": ["ScratchLogin.common.php"], "buggy_code_start_loc": [39], "buggy_code_end_loc": [148], "fixing_code_start_loc": [40], "fixing_code_end_loc": [149], "type": "CWE-74", "message": "in Scratch Login (MediaWiki extension) before version 1.1, any account can be logged into by using the same username with leading, trailing, or repeated underscore(s), since those are treated as whitespace and trimmed by MediaWiki. This affects all users on any wiki using this extension. Since version 1.1, comments by users whose usernames would be trimmed on MediaWiki are ignored when searching for the verification code.", "other": {"cve": {"id": "CVE-2020-15164", "sourceIdentifier": "security-advisories@github.com", "published": "2020-08-28T17:15:11.920", "lastModified": "2021-11-18T17:42:27.957", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "in Scratch Login (MediaWiki extension) before version 1.1, any account can be logged into by using the same username with leading, trailing, or repeated underscore(s), since those are treated as whitespace and trimmed by MediaWiki. This affects all users on any wiki using this extension. Since version 1.1, comments by users whose usernames would be trimmed on MediaWiki are ignored when searching for the verification code."}, {"lang": "es", "value": "En Scratch Login (extensi\u00f3n de MediaWiki) versiones anteriores a versi\u00f3n 1.1, cualquier cuenta puede ser registrada usando el mismo nombre de usuario con guiones bajos al principio, al final o repetidos, ya que MediaWiki los trata como espacios en blanco y los recorta. Esto afecta a todos los usuarios de cualquier wiki que usan esta extensi\u00f3n. Desde la versi\u00f3n 1.1, los comentarios de los usuarios cuyos nombres de usuario se recortar\u00edan en MediaWiki se ignoran cuando se buscan por el c\u00f3digo de comprobaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratch-wiki:scratch_login:*:*:*:*:*:mediawiki:*:*", "versionEndExcluding": "1.1", "matchCriteriaId": "20B714AF-3991-4F6C-904B-9ACAD052FECB"}]}]}], "references": [{"url": "https://github.com/InternationalScratchWiki/mediawiki-scratch-login/commit/70849ef375016a1061490c8c4744046dbfc3e679", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/InternationalScratchWiki/mediawiki-scratch-login/security/advisories/GHSA-8fq5-g4m5-6j43", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/InternationalScratchWiki/mediawiki-scratch-login/commit/70849ef375016a1061490c8c4744046dbfc3e679"}}