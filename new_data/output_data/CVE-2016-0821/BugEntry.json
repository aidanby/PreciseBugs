{"buggy_code": ["#ifndef _LINUX_POISON_H\n#define _LINUX_POISON_H\n\n/********** include/linux/list.h **********/\n\n/*\n * Architectures might want to move the poison pointer offset\n * into some well-recognized area such as 0xdead000000000000,\n * that is also not mappable by user-space exploits:\n */\n#ifdef CONFIG_ILLEGAL_POINTER_VALUE\n# define POISON_POINTER_DELTA _AC(CONFIG_ILLEGAL_POINTER_VALUE, UL)\n#else\n# define POISON_POINTER_DELTA 0\n#endif\n\n/*\n * These are non-NULL pointers that will result in page faults\n * under normal circumstances, used to verify that nobody uses\n * non-initialized list entries.\n */\n#define LIST_POISON1  ((void *) 0x00100100 + POISON_POINTER_DELTA)\n#define LIST_POISON2  ((void *) 0x00200200 + POISON_POINTER_DELTA)\n\n/********** include/linux/timer.h **********/\n/*\n * Magic number \"tsta\" to indicate a static timer initializer\n * for the object debugging code.\n */\n#define TIMER_ENTRY_STATIC\t((void *) 0x74737461)\n\n/********** mm/debug-pagealloc.c **********/\n#define PAGE_POISON 0xaa\n\n/********** mm/slab.c **********/\n/*\n * Magic nums for obj red zoning.\n * Placed in the first word before and the first word after an obj.\n */\n#define\tRED_INACTIVE\t0x09F911029D74E35BULL\t/* when obj is inactive */\n#define\tRED_ACTIVE\t0xD84156C5635688C0ULL\t/* when obj is active */\n\n#define SLUB_RED_INACTIVE\t0xbb\n#define SLUB_RED_ACTIVE\t\t0xcc\n\n/* ...and for poisoning */\n#define\tPOISON_INUSE\t0x5a\t/* for use-uninitialised poisoning */\n#define POISON_FREE\t0x6b\t/* for use-after-free poisoning */\n#define\tPOISON_END\t0xa5\t/* end-byte of poisoning */\n\n/********** arch/$ARCH/mm/init.c **********/\n#define POISON_FREE_INITMEM\t0xcc\n\n/********** arch/ia64/hp/common/sba_iommu.c **********/\n/*\n * arch/ia64/hp/common/sba_iommu.c uses a 16-byte poison string with a\n * value of \"SBAIOMMU POISON\\0\" for spill-over poisoning.\n */\n\n/********** fs/jbd/journal.c **********/\n#define JBD_POISON_FREE\t\t0x5b\n#define JBD2_POISON_FREE\t0x5c\n\n/********** drivers/base/dmapool.c **********/\n#define\tPOOL_POISON_FREED\t0xa7\t/* !inuse */\n#define\tPOOL_POISON_ALLOCATED\t0xa9\t/* !initted */\n\n/********** drivers/atm/ **********/\n#define ATM_POISON_FREE\t\t0x12\n#define ATM_POISON\t\t0xdeadbeef\n\n/********** net/ **********/\n#define NEIGHBOR_DEAD\t\t0xdeadbeef\n#define NETFILTER_LINK_POISON\t0xdead57ac\n\n/********** kernel/mutexes **********/\n#define MUTEX_DEBUG_INIT\t0x11\n#define MUTEX_DEBUG_FREE\t0x22\n\n/********** lib/flex_array.c **********/\n#define FLEX_ARRAY_FREE\t0x6c\t/* for use-after-free poisoning */\n\n/********** security/ **********/\n#define KEY_DESTROY\t\t0xbd\n\n/********** sound/oss/ **********/\n#define OSS_POISON_FREE\t\t0xAB\n\n#endif\n"], "fixing_code": ["#ifndef _LINUX_POISON_H\n#define _LINUX_POISON_H\n\n/********** include/linux/list.h **********/\n\n/*\n * Architectures might want to move the poison pointer offset\n * into some well-recognized area such as 0xdead000000000000,\n * that is also not mappable by user-space exploits:\n */\n#ifdef CONFIG_ILLEGAL_POINTER_VALUE\n# define POISON_POINTER_DELTA _AC(CONFIG_ILLEGAL_POINTER_VALUE, UL)\n#else\n# define POISON_POINTER_DELTA 0\n#endif\n\n/*\n * These are non-NULL pointers that will result in page faults\n * under normal circumstances, used to verify that nobody uses\n * non-initialized list entries.\n */\n#define LIST_POISON1  ((void *) 0x100 + POISON_POINTER_DELTA)\n#define LIST_POISON2  ((void *) 0x200 + POISON_POINTER_DELTA)\n\n/********** include/linux/timer.h **********/\n/*\n * Magic number \"tsta\" to indicate a static timer initializer\n * for the object debugging code.\n */\n#define TIMER_ENTRY_STATIC\t((void *) 0x74737461)\n\n/********** mm/debug-pagealloc.c **********/\n#define PAGE_POISON 0xaa\n\n/********** mm/slab.c **********/\n/*\n * Magic nums for obj red zoning.\n * Placed in the first word before and the first word after an obj.\n */\n#define\tRED_INACTIVE\t0x09F911029D74E35BULL\t/* when obj is inactive */\n#define\tRED_ACTIVE\t0xD84156C5635688C0ULL\t/* when obj is active */\n\n#define SLUB_RED_INACTIVE\t0xbb\n#define SLUB_RED_ACTIVE\t\t0xcc\n\n/* ...and for poisoning */\n#define\tPOISON_INUSE\t0x5a\t/* for use-uninitialised poisoning */\n#define POISON_FREE\t0x6b\t/* for use-after-free poisoning */\n#define\tPOISON_END\t0xa5\t/* end-byte of poisoning */\n\n/********** arch/$ARCH/mm/init.c **********/\n#define POISON_FREE_INITMEM\t0xcc\n\n/********** arch/ia64/hp/common/sba_iommu.c **********/\n/*\n * arch/ia64/hp/common/sba_iommu.c uses a 16-byte poison string with a\n * value of \"SBAIOMMU POISON\\0\" for spill-over poisoning.\n */\n\n/********** fs/jbd/journal.c **********/\n#define JBD_POISON_FREE\t\t0x5b\n#define JBD2_POISON_FREE\t0x5c\n\n/********** drivers/base/dmapool.c **********/\n#define\tPOOL_POISON_FREED\t0xa7\t/* !inuse */\n#define\tPOOL_POISON_ALLOCATED\t0xa9\t/* !initted */\n\n/********** drivers/atm/ **********/\n#define ATM_POISON_FREE\t\t0x12\n#define ATM_POISON\t\t0xdeadbeef\n\n/********** net/ **********/\n#define NEIGHBOR_DEAD\t\t0xdeadbeef\n#define NETFILTER_LINK_POISON\t0xdead57ac\n\n/********** kernel/mutexes **********/\n#define MUTEX_DEBUG_INIT\t0x11\n#define MUTEX_DEBUG_FREE\t0x22\n\n/********** lib/flex_array.c **********/\n#define FLEX_ARRAY_FREE\t0x6c\t/* for use-after-free poisoning */\n\n/********** security/ **********/\n#define KEY_DESTROY\t\t0xbd\n\n/********** sound/oss/ **********/\n#define OSS_POISON_FREE\t\t0xAB\n\n#endif\n"], "filenames": ["include/linux/poison.h"], "buggy_code_start_loc": [22], "buggy_code_end_loc": [24], "fixing_code_start_loc": [22], "fixing_code_end_loc": [24], "type": "CWE-908", "message": "The LIST_POISON feature in include/linux/poison.h in the Linux kernel before 4.3, as used in Android 6.0.1 before 2016-03-01, does not properly consider the relationship to the mmap_min_addr value, which makes it easier for attackers to bypass a poison-pointer protection mechanism by triggering the use of an uninitialized list entry, aka Android internal bug 26186802, a different vulnerability than CVE-2015-3636.", "other": {"cve": {"id": "CVE-2016-0821", "sourceIdentifier": "security@android.com", "published": "2016-03-12T21:59:05.900", "lastModified": "2022-01-31T17:54:43.870", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The LIST_POISON feature in include/linux/poison.h in the Linux kernel before 4.3, as used in Android 6.0.1 before 2016-03-01, does not properly consider the relationship to the mmap_min_addr value, which makes it easier for attackers to bypass a poison-pointer protection mechanism by triggering the use of an uninitialized list entry, aka Android internal bug 26186802, a different vulnerability than CVE-2015-3636."}, {"lang": "es", "value": "La funcionalidad LIST_POISON en include/linux/poison.h en el kernel de Linux en versiones anteriores a 4.3, como se utiliza en Android 6.0.1 en versiones anteriores a 2016-03-01, no considera adecuadamente la relaci\u00f3n del valor mmap_min_addr, lo que hace m\u00e1s f\u00e1cil a atacantes eludir un mecanismo de protecci\u00f3n poison-pointer desencadenando el uso de una entrada de lista no inicializada, tambi\u00e9n conocido como error interno de Android 26186802, una vulnerabilidad diferente a CVE-2015-3636."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-908"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.3", "matchCriteriaId": "24716AE4-6BBB-4E20-B9CC-8D2D43014BBD"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:google:android:6.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "691FA41B-C2CE-413F-ABB1-0B22CB322807"}]}]}], "references": [{"url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8a5e5e02fc83aaf67053ab53b359af08c6c49aaf", "source": "security@android.com", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}, {"url": "http://source.android.com/security/bulletin/2016-03-01.html", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.debian.org/security/2016/dsa-3607", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2015/05/02/6", "source": "security@android.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/84260", "source": "security@android.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.ubuntu.com/usn/USN-2967-1", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2967-2", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2968-1", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2968-2", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2969-1", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2970-1", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2971-1", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2971-2", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2971-3", "source": "security@android.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/8a5e5e02fc83aaf67053ab53b359af08c6c49aaf", "source": "security@android.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/8a5e5e02fc83aaf67053ab53b359af08c6c49aaf"}}