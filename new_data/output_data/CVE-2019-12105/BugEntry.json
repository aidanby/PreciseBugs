{"buggy_code": ["Configuration File\n==================\n\nThe Supervisor configuration file is conventionally named\n:file:`supervisord.conf`.  It is used by both :program:`supervisord`\nand :program:`supervisorctl`.  If either application is started\nwithout the ``-c`` option (the option which is used to tell the\napplication the configuration filename explicitly), the application\nwill look for a file named :file:`supervisord.conf` within the\nfollowing locations, in the specified order.  It will use the first\nfile it finds.\n\n#. :file:`$CWD/supervisord.conf`\n\n#. :file:`$CWD/etc/supervisord.conf`\n\n#. :file:`/etc/supervisord.conf`\n\n#. :file:`/etc/supervisor/supervisord.conf` (since Supervisor 3.3.0)\n\n#. :file:`../etc/supervisord.conf` (Relative to the executable)\n\n#. :file:`../supervisord.conf` (Relative to the executable)\n\n.. note::\n\n  Many versions of Supervisor packaged for Debian and Ubuntu included a patch\n  that added ``/etc/supervisor/supervisord.conf`` to the search paths.  The\n  first PyPI package of Supervisor to include it was Supervisor 3.3.0.\n\nFile Format\n-----------\n\n:file:`supervisord.conf` is a Windows-INI-style (Python ConfigParser)\nfile.  It has sections (each denoted by a ``[header]``) and key / value\npairs within the sections.  The sections and their allowable values\nare described below.\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\nEnvironment variables that are present in the environment at the time that\n:program:`supervisord` is started can be used in the configuration file\nusing the Python string expression syntax ``%(ENV_X)s``:\n\n.. code-block:: ini\n\n    [program:example]\n    command=/usr/bin/example --loglevel=%(ENV_LOGLEVEL)s\n\nIn the example above, the expression ``%(ENV_LOGLEVEL)s`` would be expanded\nto the value of the environment variable ``LOGLEVEL``.\n\n.. note::\n\n    In Supervisor 3.2 and later, ``%(ENV_X)s`` expressions are supported in\n    all options.  In prior versions, some options support them, but most\n    do not.  See the documentation for each option below.\n\n\n``[unix_http_server]`` Section Settings\n---------------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[unix_http_server]`` under which configuration parameters for an\nHTTP server that listens on a UNIX domain socket should be inserted.\nIf the configuration file has no ``[unix_http_server]`` section, a\nUNIX domain socket HTTP server will not be started.  The allowable\nconfiguration values are as follows.\n\n``[unix_http_server]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``file``\n\n  A path to a UNIX domain socket (e.g. :file:`/tmp/supervisord.sock`)\n  on which supervisor will listen for HTTP/XML-RPC requests.\n  :program:`supervisorctl` uses XML-RPC to communicate with\n  :program:`supervisord` over this port.  This option can include the\n  value ``%(here)s``, which expands to the directory in which the\n  :program:`supervisord` configuration file was found.\n\n  *Default*:  None.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``chmod``\n\n  Change the UNIX permission mode bits of the UNIX domain socket to\n  this value at startup.\n\n  *Default*: ``0700``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``chown``\n\n  Change the user and group of the socket file to this value.  May be\n  a UNIX username (e.g. ``chrism``) or a UNIX username and group\n  separated by a colon (e.g. ``chrism:wheel``).\n\n  *Default*:  Use the username and group of the user who starts supervisord.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username required for authentication to this HTTP server.\n\n  *Default*:  No username required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password required for authentication to this HTTP server.  This\n  can be a cleartext password, or can be specified as a SHA-1 hash if\n  prefixed by the string ``{SHA}``.  For example,\n  ``{SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d`` is the SHA-stored\n  version of the password \"thepassword\".\n\n  Note that hashed password must be in hex format.\n\n  *Default*:  No password required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[unix_http_server]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [unix_http_server]\n   file = /tmp/supervisor.sock\n   chmod = 0777\n   chown= nobody:nogroup\n   username = user\n   password = 123\n\n``[inet_http_server]`` Section Settings\n---------------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[inet_http_server]`` under which configuration parameters for an\nHTTP server that listens on a TCP (internet) socket should be\ninserted.  If the configuration file has no ``[inet_http_server]``\nsection, an inet HTTP server will not be started.  The allowable\nconfiguration values are as follows.\n\n``[inet_http_server]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``port``\n\n  A TCP host:port value or (e.g. ``127.0.0.1:9001``) on which\n  supervisor will listen for HTTP/XML-RPC requests.\n  :program:`supervisorctl` will use XML-RPC to communicate with\n  :program:`supervisord` over this port.  To listen on all interfaces\n  in the machine, use ``:9001`` or ``*:9001``.\n\n  *Default*:  No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username required for authentication to this HTTP server.\n\n  *Default*:  No username required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password required for authentication to this HTTP server.  This\n  can be a cleartext password, or can be specified as a SHA-1 hash if\n  prefixed by the string ``{SHA}``.  For example,\n  ``{SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d`` is the SHA-stored\n  version of the password \"thepassword\".\n\n  Note that hashed password must be in hex format.\n\n  *Default*:  No password required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[inet_http_server]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [inet_http_server]\n   port = 127.0.0.1:9001\n   username = user\n   password = 123\n\n``[supervisord]`` Section Settings\n----------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[supervisord]`` in which global settings related to the\n:program:`supervisord` process should be inserted.  These are as\nfollows.\n\n``[supervisord]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``logfile``\n\n  The path to the activity log of the supervisord process.  This\n  option can include the value ``%(here)s``, which expands to the\n  directory in which the supervisord configuration file was found.\n\n  .. note::\n\n    If ``logfile`` is set to a special file like ``/dev/stdout`` that is\n    not seekable, log rotation must be disabled by setting\n    ``logfile_maxbytes = 0``.\n\n  *Default*:  :file:`$CWD/supervisord.log`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``logfile_maxbytes``\n\n  The maximum number of bytes that may be consumed by the activity log\n  file before it is rotated (suffix multipliers like \"KB\", \"MB\", and\n  \"GB\" can be used in the value).  Set this value to 0 to indicate an\n  unlimited log size.\n\n  *Default*:  50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``logfile_backups``\n\n  The number of backups to keep around resulting from activity log\n  file rotation.  If set to 0, no backups will be kept.\n\n  *Default*:  10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``loglevel``\n\n  The logging level, dictating what is written to the supervisord\n  activity log.  One of ``critical``, ``error``, ``warn``, ``info``,\n  ``debug``, ``trace``, or ``blather``.  Note that at log level\n  ``debug``, the supervisord log file will record the stderr/stdout\n  output of its child processes and extended info info about process\n  state changes, which is useful for debugging a process which isn't\n  starting properly.  See also: :ref:`activity_log_levels`.\n\n  *Default*:  info\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``pidfile``\n\n  The location in which supervisord keeps its pid file.  This option\n  can include the value ``%(here)s``, which expands to the directory\n  in which the supervisord configuration file was found.\n\n  *Default*:  :file:`$CWD/supervisord.pid`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``umask``\n\n  The :term:`umask` of the supervisord process.\n\n  *Default*:  ``022``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``nodaemon``\n\n  If true, supervisord will start in the foreground instead of\n  daemonizing.\n\n  *Default*:  false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``minfds``\n\n  The minimum number of file descriptors that must be available before\n  supervisord will start successfully.  A call to setrlimit will be made\n  to attempt to raise the soft and hard limits of the supervisord process to\n  satisfy ``minfds``.  The hard limit may only be raised if supervisord\n  is run as root.  supervisord uses file descriptors liberally, and will\n  enter a failure mode when one cannot be obtained from the OS, so it's\n  useful to be able to specify a minimum value to ensure it doesn't run out\n  of them during execution.  These limits will be inherited by the managed\n  subprocesses.  This option is particularly useful on Solaris,\n  which has a low per-process fd limit by default.\n\n  *Default*:  1024\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``minprocs``\n\n  The minimum number of process descriptors that must be available\n  before supervisord will start successfully.  A call to setrlimit will be\n  made to attempt to raise the soft and hard limits of the supervisord process\n  to satisfy ``minprocs``.  The hard limit may only be raised if supervisord\n  is run as root.  supervisord will enter a failure mode when the OS runs out\n  of process descriptors, so it's useful to ensure that enough process\n  descriptors are available upon :program:`supervisord` startup.\n\n  *Default*:  200\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``nocleanup``\n\n  Prevent supervisord from clearing any existing ``AUTO``\n  child log files at startup time.  Useful for debugging.\n\n  *Default*:  false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``childlogdir``\n\n  The directory used for ``AUTO`` child log files.  This option can\n  include the value ``%(here)s``, which expands to the directory in\n  which the :program:`supervisord` configuration file was found.\n\n  *Default*: value of Python's :func:`tempfile.get_tempdir`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``user``\n\n  Instruct :program:`supervisord` to switch users to this UNIX user\n  account before doing any meaningful processing.  The user can only\n  be switched if :program:`supervisord` is started as the root user.\n\n  *Default*: do not switch users\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n  *Changed*: 3.3.4.  If :program:`supervisord` can't switch to the\n  specified user, it will write an error message to ``stderr`` and\n  then exit immediately.  In earlier versions, it would continue to\n  run but would log a message at the ``critical`` level.\n\n``directory``\n\n  When :program:`supervisord` daemonizes, switch to this directory.\n  This option can include the value ``%(here)s``, which expands to the\n  directory in which the :program:`supervisord` configuration file was\n  found.\n\n  *Default*: do not cd\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``strip_ansi``\n\n  Strip all ANSI escape sequences from child log files.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``environment``\n\n  A list of key/value pairs in the form ``KEY=\"val\",KEY2=\"val2\"`` that\n  will be placed in the :program:`supervisord` process' environment\n  (and as a result in all of its child process' environments).  This\n  option can include the value ``%(here)s``, which expands to the\n  directory in which the supervisord configuration file was found.\n  Values containing non-alphanumeric characters should be quoted\n  (e.g. ``KEY=\"val:123\",KEY2=\"val,456\"``).  Otherwise, quoting the\n  values is optional but recommended.  To escape percent characters,\n  simply use two. (e.g. ``URI=\"/first%%20name\"``) **Note** that\n  subprocesses will inherit the environment variables of the shell\n  used to start :program:`supervisord` except for the ones overridden\n  here and within the program's ``environment`` option.  See\n  :ref:`subprocess_environment`.\n\n  *Default*: no values\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``identifier``\n\n  The identifier string for this supervisor process, used by the RPC\n  interface.\n\n  *Default*: supervisor\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[supervisord]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [supervisord]\n   logfile = /tmp/supervisord.log\n   logfile_maxbytes = 50MB\n   logfile_backups=10\n   loglevel = info\n   pidfile = /tmp/supervisord.pid\n   nodaemon = false\n   minfds = 1024\n   minprocs = 200\n   umask = 022\n   user = chrism\n   identifier = supervisor\n   directory = /tmp\n   nocleanup = true\n   childlogdir = /tmp\n   strip_ansi = false\n   environment = KEY1=\"value1\",KEY2=\"value2\"\n\n``[supervisorctl]`` Section Settings\n------------------------------------\n\n  The configuration file may contain settings for the\n  :program:`supervisorctl` interactive shell program.  These options\n  are listed below.\n\n``[supervisorctl]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``serverurl``\n\n  The URL that should be used to access the supervisord server,\n  e.g. ``http://localhost:9001``.  For UNIX domain sockets, use\n  ``unix:///absolute/path/to/file.sock``.\n\n  *Default*: ``http://localhost:9001``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username to pass to the supervisord server for use in\n  authentication.  This should be same as ``username`` from the\n  supervisord server configuration for the port or UNIX domain socket\n  you're attempting to access.\n\n  *Default*: No username\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password to pass to the supervisord server for use in\n  authentication. This should be the cleartext version of ``password``\n  from the supervisord server configuration for the port or UNIX\n  domain socket you're attempting to access.  This value cannot be\n  passed as a SHA hash.  Unlike other passwords specified in this\n  file, it must be provided in cleartext.\n\n  *Default*: No password\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``prompt``\n\n  String used as supervisorctl prompt.\n\n  *Default*: ``supervisor``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``history_file``\n\n  A path to use as the ``readline`` persistent history file.  If you\n  enable this feature by choosing a path, your supervisorctl commands\n  will be kept in the file, and you can use readline (e.g. arrow-up)\n  to invoke commands you performed in your last supervisorctl session.\n\n  *Default*: No file\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a5\n\n``[supervisorctl]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [supervisorctl]\n   serverurl = unix:///tmp/supervisor.sock\n   username = chris\n   password = 123\n   prompt = mysupervisor\n\n.. _programx_section:\n\n``[program:x]`` Section Settings\n--------------------------------\n\nThe configuration file must contain one or more ``program`` sections\nin order for supervisord to know which programs it should start and\ncontrol.  The header value is composite value.  It is the word\n\"program\", followed directly by a colon, then the program name.  A\nheader value of ``[program:foo]`` describes a program with the name of\n\"foo\".  The name is used within client applications that control the\nprocesses that are created as a result of this configuration.  It is\nan error to create a ``program`` section that does not have a name.\nThe name must not include a colon character or a bracket character.\nThe value of the name is used as the value for the\n``%(program_name)s`` string expression expansion within other values\nwhere specified.\n\n.. note::\n\n   A ``[program:x]`` section actually represents a \"homogeneous\n   process group\" to supervisor (as of 3.0).  The members of the group\n   are defined by the combination of the ``numprocs`` and\n   ``process_name`` parameters in the configuration.  By default, if\n   numprocs and process_name are left unchanged from their defaults,\n   the group represented by ``[program:x]`` will be named ``x`` and\n   will have a single process named ``x`` in it.  This provides a\n   modicum of backwards compatibility with older supervisor releases,\n   which did not treat program sections as homogeneous process group\n   definitions.\n\n   But for instance, if you have a ``[program:foo]`` section with a\n   ``numprocs`` of 3 and a ``process_name`` expression of\n   ``%(program_name)s_%(process_num)02d``, the \"foo\" group will\n   contain three processes, named ``foo_00``, ``foo_01``, and\n   ``foo_02``.  This makes it possible to start a number of very\n   similar processes using a single ``[program:x]`` section.  All\n   logfile names, all environment strings, and the command of programs\n   can also contain similar Python string expressions, to pass\n   slightly different parameters to each process.\n\n``[program:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``command``\n\n  The command that will be run when this program is started.  The\n  command can be either absolute (e.g. ``/path/to/programname``) or\n  relative (e.g. ``programname``).  If it is relative, the\n  supervisord's environment ``$PATH`` will be searched for the\n  executable.  Programs can accept arguments, e.g. ``/path/to/program\n  foo bar``.  The command line can use double quotes to group\n  arguments with spaces in them to pass to the program,\n  e.g. ``/path/to/program/name -p \"foo bar\"``.  Note that the value of\n  ``command`` may include Python string expressions,\n  e.g. ``/path/to/programname --port=80%(process_num)02d`` might\n  expand to ``/path/to/programname --port=8000`` at runtime.  String\n  expressions are evaluated against a dictionary containing the keys\n  ``group_name``, ``host_node_name``, ``process_num``, ``program_name``,\n  ``here`` (the directory of the supervisord config file), and all\n  supervisord's environment variables prefixed with ``ENV_``.  Controlled\n  programs should themselves not be daemons, as supervisord assumes it is\n  responsible for daemonizing its subprocesses (see\n  :ref:`nondaemonizing_of_subprocesses`).\n\n  .. note::\n\n    The command will be truncated if it looks like a config file comment,\n    e.g. ``command=bash -c 'foo ; bar'`` will be truncated to\n    ``command=bash -c 'foo``.  Quoting will not prevent this behavior,\n    since the configuration file reader does not parse the command like\n    a shell would.\n\n  *Default*: No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``process_name``\n\n  A Python string expression that is used to compose the supervisor\n  process name for this process.  You usually don't need to worry\n  about setting this unless you change ``numprocs``.  The string\n  expression is evaluated against a dictionary that includes\n  ``group_name``, ``host_node_name``, ``process_num``, ``program_name``,\n  and ``here`` (the directory of the supervisord config file).\n\n  *Default*: ``%(program_name)s``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``numprocs``\n\n  Supervisor will start as many instances of this program as named by\n  numprocs.  Note that if numprocs > 1, the ``process_name``\n  expression must include ``%(process_num)s`` (or any other\n  valid Python string expression that includes ``process_num``) within\n  it.\n\n  *Default*: 1\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``numprocs_start``\n\n  An integer offset that is used to compute the number at which\n  ``numprocs`` starts.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``priority``\n\n  The relative priority of the program in the start and shutdown\n  ordering.  Lower priorities indicate programs that start first and\n  shut down last at startup and when aggregate commands are used in\n  various clients (e.g. \"start all\"/\"stop all\").  Higher priorities\n  indicate programs that start last and shut down first.\n\n  *Default*: 999\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``autostart``\n\n  If true, this program will start automatically when supervisord is\n  started.\n\n  *Default*: true\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``startsecs``\n\n  The total number of seconds which the program needs to stay running\n  after a startup to consider the start successful (moving the process\n  from the ``STARTING`` state to the ``RUNNING`` state).  Set to ``0``\n  to indicate that the program needn't stay running for any particular\n  amount of time.\n\n  .. note::\n\n      Even if a process exits with an \"expected\" exit code (see\n      ``exitcodes``), the start will still be considered a failure\n      if the process exits quicker than ``startsecs``.\n\n  *Default*: 1\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``startretries``\n\n  The number of serial failure attempts that :program:`supervisord`\n  will allow when attempting to start the program before giving up and\n  putting the process into an ``FATAL`` state.  See\n  :ref:`process_states` for explanation of the ``FATAL`` state.\n\n  *Default*: 3\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``autorestart``\n\n  Specifies if :program:`supervisord` should automatically restart a\n  process if it exits when it is in the ``RUNNING`` state.  May be\n  one of ``false``, ``unexpected``, or ``true``.  If ``false``, the\n  process will not be autorestarted.  If ``unexpected``, the process\n  will be restarted when the program exits with an exit code that is\n  not one of the exit codes associated with this process' configuration\n  (see ``exitcodes``).  If ``true``, the process will be unconditionally\n  restarted when it exits, without regard to its exit code.\n\n  .. note::\n\n      ``autorestart`` controls whether :program:`supervisord` will\n      autorestart a program if it exits after it has successfully started\n      up (the process is in the ``RUNNING`` state).\n\n      :program:`supervisord` has a different restart mechanism for when the\n      process is starting up (the process is in the ``STARTING`` state).\n      Retries during process startup are controlled by ``startsecs``\n      and ``startretries``.\n\n  *Default*: unexpected\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``exitcodes``\n\n  The list of \"expected\" exit codes for this program used with ``autorestart``.\n  If the ``autorestart`` parameter is set to ``unexpected``, and the process\n  exits in any other way than as a result of a supervisor stop\n  request, :program:`supervisord` will restart the process if it exits\n  with an exit code that is not defined in this list.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n  .. note::\n\n      In Supervisor versions prior to 4.0, the default was ``0,2``.  In\n      Supervisor 4.0, the default was changed to ``0``.\n\n``stopsignal``\n\n  The signal used to kill the program when a stop is requested.  This\n  can be any of TERM, HUP, INT, QUIT, KILL, USR1, or USR2.\n\n  *Default*: TERM\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stopwaitsecs``\n\n  The number of seconds to wait for the OS to return a SIGCHLD to\n  :program:`supervisord` after the program has been sent a stopsignal.\n  If this number of seconds elapses before :program:`supervisord`\n  receives a SIGCHLD from the process, :program:`supervisord` will\n  attempt to kill it with a final SIGKILL.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stopasgroup``\n\n  If true, the flag causes supervisor to send the stop signal to the\n  whole process group and implies ``killasgroup`` is true.  This is useful\n  for programs, such as Flask in debug mode, that do not propagate\n  stop signals to their children, leaving them orphaned.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0b1\n\n``killasgroup``\n\n  If true, when resorting to send SIGKILL to the program to terminate\n  it send it to its whole process group instead, taking care of its\n  children as well, useful e.g with Python programs using\n  :mod:`multiprocessing`.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a11\n\n``user``\n\n  Instruct :program:`supervisord` to use this UNIX user account as the\n  account which runs the program.  The user can only be switched if\n  :program:`supervisord` is run as the root user.  If :program:`supervisord`\n  can't switch to the specified user, the program will not be started.\n\n  .. note::\n\n      The user will be changed using ``setuid`` only.  This does not start\n      a login shell and does not change environment variables like\n      ``USER`` or ``HOME``.  See :ref:`subprocess_environment` for details.\n\n  *Default*: Do not switch users\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``redirect_stderr``\n\n  If true, cause the process' stderr output to be sent back to\n  :program:`supervisord` on its stdout file descriptor (in UNIX shell\n  terms, this is the equivalent of executing ``/the/program 2>&1``).\n\n  .. note::\n\n     Do not set ``redirect_stderr=true`` in an ``[eventlistener:x]`` section.\n     Eventlisteners use ``stdout`` and ``stdin`` to communicate with\n     ``supervisord``.  If ``stderr`` is redirected, output from\n     ``stderr`` will interfere with the eventlistener protocol.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``log_stdout`` and ``log_stderr``\n\n``stdout_logfile``\n\n  Put process stdout output in this file (and if redirect_stderr is\n  true, also place stderr output in this file).  If ``stdout_logfile``\n  is unset or set to ``AUTO``, supervisor will automatically choose a\n  file location.  If this is set to ``NONE``, supervisord will create\n  no log file.  ``AUTO`` log files and their backups will be deleted\n  when :program:`supervisord` restarts.  The ``stdout_logfile`` value\n  can contain Python string expressions that will evaluated against a\n  dictionary that contains the keys ``group_name``, ``host_node_name``,\n  ``process_num``, ``program_name``, and ``here`` (the directory of the\n  supervisord config file).\n\n  .. note::\n\n     It is not possible for two processes to share a single log file\n     (``stdout_logfile``) when rotation (``stdout_logfile_maxbytes``)\n     is enabled.  This will result in the file being corrupted.\n\n  .. note::\n\n    If ``stdout_logfile`` is set to a special file like ``/dev/stdout``\n    that is not seekable, log rotation must be disabled by setting\n    ``stdout_logfile_maxbytes = 0``.\n\n  *Default*: ``AUTO``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``logfile``\n\n``stdout_logfile_maxbytes``\n\n  The maximum number of bytes that may be consumed by\n  ``stdout_logfile`` before it is rotated (suffix multipliers like\n  \"KB\", \"MB\", and \"GB\" can be used in the value).  Set this value to 0\n  to indicate an unlimited log size.\n\n  *Default*: 50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``logfile_maxbytes``\n\n``stdout_logfile_backups``\n\n  The number of ``stdout_logfile`` backups to keep around resulting\n  from process stdout log file rotation.  If set to 0, no backups\n  will be kept.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``logfile_backups``\n\n``stdout_capture_maxbytes``\n\n  Max number of bytes written to capture FIFO when process is in\n  \"stdout capture mode\" (see :ref:`capture_mode`).  Should be an\n  integer (suffix multipliers like \"KB\", \"MB\" and \"GB\" can used in the\n  value).  If this value is 0, process capture mode will be off.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stdout_events_enabled``\n\n  If true, PROCESS_LOG_STDOUT events will be emitted when the process\n  writes to its stdout file descriptor.  The events will only be\n  emitted if the file descriptor is not in capture mode at the time\n  the data is received (see :ref:`capture_mode`).\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a7\n\n``stdout_syslog``\n\n  If true, stdout will be directed to syslog along with the process name.\n\n  *Default*: False\n\n  *Required*:  No.\n\n  *Introduced*: 4.0.0\n\n``stderr_logfile``\n\n  Put process stderr output in this file unless ``redirect_stderr`` is\n  true.  Accepts the same value types as ``stdout_logfile`` and may\n  contain the same Python string expressions.\n\n  .. note::\n\n     It is not possible for two processes to share a single log file\n     (``stderr_logfile``) when rotation (``stderr_logfile_maxbytes``)\n     is enabled.  This will result in the file being corrupted.\n\n  .. note::\n\n    If ``stderr_logfile`` is set to a special file like ``/dev/stderr``\n    that is not seekable, log rotation must be disabled by setting\n    ``stderr_logfile_maxbytes = 0``.\n\n  *Default*: ``AUTO``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_logfile_maxbytes``\n\n  The maximum number of bytes before logfile rotation for\n  ``stderr_logfile``.  Accepts the same value types as\n  ``stdout_logfile_maxbytes``.\n\n  *Default*: 50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_logfile_backups``\n\n  The number of backups to keep around resulting from process stderr\n  log file rotation.  If set to 0, no backups will be kept.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_capture_maxbytes``\n\n  Max number of bytes written to capture FIFO when process is in\n  \"stderr capture mode\" (see :ref:`capture_mode`).  Should be an\n  integer (suffix multipliers like \"KB\", \"MB\" and \"GB\" can used in the\n  value).  If this value is 0, process capture mode will be off.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_events_enabled``\n\n  If true, PROCESS_LOG_STDERR events will be emitted when the process\n  writes to its stderr file descriptor.  The events will only be\n  emitted if the file descriptor is not in capture mode at the time\n  the data is received (see :ref:`capture_mode`).\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a7\n\n``stderr_syslog``\n\n  If true, stderr will be directed to syslog along with the process name.\n\n  *Default*: False\n\n  *Required*:  No.\n\n  *Introduced*: 4.0.0\n\n``environment``\n\n  A list of key/value pairs in the form ``KEY=\"val\",KEY2=\"val2\"`` that\n  will be placed in the child process' environment.  The environment\n  string may contain Python string expressions that will be evaluated\n  against a dictionary containing ``group_name``, ``host_node_name``,\n  ``process_num``, ``program_name``, and ``here`` (the directory of the\n  supervisord config file).  Values containing non-alphanumeric characters\n  should be quoted (e.g. ``KEY=\"val:123\",KEY2=\"val,456\"``).  Otherwise,\n  quoting the values is optional but recommended.  **Note** that the\n  subprocess will inherit the environment variables of the shell used to\n  start \"supervisord\" except for the ones overridden here.  See\n  :ref:`subprocess_environment`.\n\n  *Default*: No extra environment\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``directory``\n\n  A file path representing a directory to which :program:`supervisord`\n  should temporarily chdir before exec'ing the child.\n\n  *Default*: No chdir (inherit supervisor's)\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``umask``\n\n  An octal number (e.g. 002, 022) representing the umask of the\n  process.\n\n  *Default*: No special umask (inherit supervisor's)\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``serverurl``\n\n  The URL passed in the environment to the subprocess process as\n  ``SUPERVISOR_SERVER_URL`` (see :mod:`supervisor.childutils`) to\n  allow the subprocess to easily communicate with the internal HTTP\n  server.  If provided, it should have the same syntax and structure\n  as the ``[supervisorctl]`` section option of the same name.  If this\n  is set to AUTO, or is unset, supervisor will automatically construct\n  a server URL, giving preference to a server that listens on UNIX\n  domain sockets over one that listens on an internet socket.\n\n  *Default*: AUTO\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[program:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [program:cat]\n   command=/bin/cat\n   process_name=%(program_name)s\n   numprocs=1\n   directory=/tmp\n   umask=022\n   priority=999\n   autostart=true\n   autorestart=unexpected\n   startsecs=10\n   startretries=3\n   exitcodes=0\n   stopsignal=TERM\n   stopwaitsecs=10\n   stopasgroup=false\n   killasgroup=false\n   user=chrism\n   redirect_stderr=false\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_capture_maxbytes=1MB\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_capture_maxbytes=1MB\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[include]`` Section Settings\n------------------------------\n\nThe :file:`supervisord.conf` file may contain a section named\n``[include]``.  If the configuration file contains an ``[include]``\nsection, it must contain a single key named \"files\".  The values in\nthis key specify other configuration files to be included within the\nconfiguration.\n\n.. note::\n\n    The ``[include]`` section is processed only by ``supervisord``.  It is\n    ignored by ``supervisorctl``.\n\n\n``[include]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``files``\n\n  A space-separated sequence of file globs.  Each file glob may be\n  absolute or relative.  If the file glob is relative, it is\n  considered relative to the location of the configuration file which\n  includes it.  A \"glob\" is a file pattern which matches a specified\n  pattern according to the rules used by the Unix shell. No tilde\n  expansion is done, but ``*``, ``?``, and character ranges expressed\n  with ``[]`` will be correctly matched.  The string expression is\n  evaluated against a dictionary that includes ``host_node_name``\n  and ``here`` (the directory of the supervisord config file).  Recursive\n  includes from included files are not supported.\n\n  *Default*: No default (required)\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n  *Changed*: 3.3.0.  Added support for the ``host_node_name`` expansion.\n\n``[include]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [include]\n   files = /an/absolute/filename.conf /an/absolute/*.conf foo.conf config??.conf\n\n``[group:x]`` Section Settings\n------------------------------\n\nIt is often useful to group \"homogeneous\" process groups (aka\n\"programs\") together into a \"heterogeneous\" process group so they can\nbe controlled as a unit from Supervisor's various controller\ninterfaces.\n\nTo place programs into a group so you can treat them as a unit, define\na ``[group:x]`` section in your configuration file.  The group header\nvalue is a composite.  It is the word \"group\", followed directly by a\ncolon, then the group name.  A header value of ``[group:foo]``\ndescribes a group with the name of \"foo\".  The name is used within\nclient applications that control the processes that are created as a\nresult of this configuration.  It is an error to create a ``group``\nsection that does not have a name.  The name must not include a colon\ncharacter or a bracket character.\n\nFor a ``[group:x]``, there must be one or more ``[program:x]``\nsections elsewhere in your configuration file, and the group must\nrefer to them by name in the ``programs`` value.\n\nIf \"homogeneous\" process groups (represented by program sections) are\nplaced into a \"heterogeneous\" group via ``[group:x]`` section's\n``programs`` line, the homogeneous groups that are implied by the\nprogram section will not exist at runtime in supervisor.  Instead, all\nprocesses belonging to each of the homogeneous groups will be placed\ninto the heterogeneous group.  For example, given the following group\nconfiguration:\n\n.. code-block:: ini\n\n   [group:foo]\n   programs=bar,baz\n   priority=999\n\nGiven the above, at supervisord startup, the ``bar`` and ``baz``\nhomogeneous groups will not exist, and the processes that would have\nbeen under them will now be moved into the ``foo`` group.\n\n``[group:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``programs``\n\n  A comma-separated list of program names.  The programs which are\n  listed become members of the group.\n\n  *Default*: No default (required)\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``priority``\n\n  A priority number analogous to a ``[program:x]`` priority value\n  assigned to the group.\n\n  *Default*: 999\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[group:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [group:foo]\n   programs=bar,baz\n   priority=999\n\n\n``[fcgi-program:x]`` Section Settings\n-------------------------------------\n\nSupervisor can manage groups of `FastCGI <http://www.fastcgi.com>`_\nprocesses that all listen on the same socket.  Until now, deployment\nflexibility for FastCGI was limited.  To get full process management,\nyou could use mod_fastcgi under Apache but then you were stuck with\nApache's inefficient concurrency model of one process or thread per\nconnection.  In addition to requiring more CPU and memory resources,\nthe process/thread per connection model can be quickly saturated by a\nslow resource, preventing other resources from being served.  In order\nto take advantage of newer event-driven web servers such as lighttpd\nor nginx which don't include a built-in process manager, you had to\nuse scripts like cgi-fcgi or spawn-fcgi.  These can be used in\nconjunction with a process manager such as supervisord or daemontools\nbut require each FastCGI child process to bind to its own socket.\nThe disadvantages of this are: unnecessarily complicated web server\nconfiguration, ungraceful restarts, and reduced fault tolerance.  With\nfewer sockets to configure, web server configurations are much smaller\nif groups of FastCGI processes can share sockets.  Shared sockets\nallow for graceful restarts because the socket remains bound by the\nparent process while any of the child processes are being restarted.\nFinally, shared sockets are more fault tolerant because if a given\nprocess fails, other processes can continue to serve inbound\nconnections.\n\nWith integrated FastCGI spawning support, Supervisor gives you the\nbest of both worlds.  You get full-featured process management with\ngroups of FastCGI processes sharing sockets without being tied to a\nparticular web server.  It's a clean separation of concerns, allowing\nthe web server and the process manager to each do what they do best.\n\n.. note::\n\n   The socket manager in Supervisor was originally developed to support\n   FastCGI processes but it is not limited to FastCGI.  Other protocols may\n   be used as well with no special configuration.  Any program that can\n   access an open socket from a file descriptor (e.g. with\n   `socket.fromfd <http://docs.python.org/library/socket.html#socket.fromfd>`_\n   in Python) can use the socket manager.  Supervisor will automatically\n   create the socket, bind, and listen before forking the first child in a\n   group.  The socket will be passed to each child on file descriptor\n   number ``0`` (zero).  When the last child in the group exits,\n   Supervisor will close the socket.\n\n.. note::\n\n   Prior to Supervisor 3.4.0, FastCGI programs (``[fcgi-program:x]``)\n   could not be referenced in groups (``[group:x]``).\n\nAll the options available to ``[program:x]`` sections are\nalso respected by ``fcgi-program`` sections.\n\n``[fcgi-program:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``[fcgi-program:x]`` sections have a few keys which ``[program:x]``\nsections do not have.\n\n``socket``\n\n  The FastCGI socket for this program, either TCP or UNIX domain\n  socket. For TCP sockets, use this format: ``tcp://localhost:9002``.\n  For UNIX domain sockets, use ``unix:///absolute/path/to/file.sock``.\n  String expressions are evaluated against a dictionary containing the\n  keys \"program_name\" and \"here\" (the directory of the supervisord\n  config file).\n\n  *Default*: No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``socket_backlog``\n\n  Sets socket listen(2) backlog.\n\n  *Default*: socket.SOMAXCONN\n\n  *Required*:  No.\n\n  *Introduced*: 3.4.0\n\n``socket_owner``\n\n  For UNIX domain sockets, this parameter can be used to specify the user\n  and group for the FastCGI socket. May be a UNIX username (e.g. chrism)\n  or a UNIX username and group separated by a colon (e.g. chrism:wheel).\n\n  *Default*: Uses the user and group set for the fcgi-program\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``socket_mode``\n\n  For UNIX domain sockets, this parameter can be used to specify the\n  permission mode.\n\n  *Default*: 0700\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\nConsult :ref:`programx_section` for other allowable keys, delta the\nabove constraints and additions.\n\n``[fcgi-program:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [fcgi-program:fcgiprogramname]\n   command=/usr/bin/example.fcgi\n   socket=unix:///var/run/supervisor/%(program_name)s.sock\n   socket_owner=chrism\n   socket_mode=0700\n   process_name=%(program_name)s_%(process_num)02d\n   numprocs=5\n   directory=/tmp\n   umask=022\n   priority=999\n   autostart=true\n   autorestart=unexpected\n   startsecs=1\n   startretries=3\n   exitcodes=0\n   stopsignal=QUIT\n   stopasgroup=false\n   killasgroup=false\n   stopwaitsecs=10\n   user=chrism\n   redirect_stderr=true\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[eventlistener:x]`` Section Settings\n--------------------------------------\n\nSupervisor allows specialized homogeneous process groups (\"event\nlistener pools\") to be defined within the configuration file.  These\npools contain processes that are meant to receive and respond to event\nnotifications from supervisor's event system.  See :ref:`events` for\nan explanation of how events work and how to implement programs that\ncan be declared as event listeners.\n\nNote that all the options available to ``[program:x]`` sections are\nrespected by eventlistener sections *except* for ``stdout_capture_maxbytes``.\nEventlisteners cannot emit process communication events on ``stdout``,\nbut can emit on ``stderr`` (see :ref:`capture_mode`).\n\n``[eventlistener:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``[eventlistener:x]`` sections have a few keys which ``[program:x]``\nsections do not have.\n\n``buffer_size``\n\n  The event listener pool's event queue buffer size.  When a listener\n  pool's event buffer is overflowed (as can happen when an event\n  listener pool cannot keep up with all of the events sent to it), the\n  oldest event in the buffer is discarded.\n\n``events``\n\n  A comma-separated list of event type names that this listener is\n  \"interested\" in receiving notifications for (see\n  :ref:`event_types` for a list of valid event type names).\n\n``result_handler``\n\n  A `pkg_resources entry point string\n  <http://peak.telecommunity.com/DevCenter/PkgResources>`_ that\n  resolves to a Python callable.  The default value is\n  ``supervisor.dispatchers:default_handler``.  Specifying an alternate\n  result handler is a very uncommon thing to need to do, and as a\n  result, how to create one is not documented.\n\nConsult :ref:`programx_section` for other allowable keys, delta the\nabove constraints and additions.\n\n``[eventlistener:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [eventlistener:theeventlistenername]\n   command=/bin/eventlistener\n   process_name=%(program_name)s_%(process_num)02d\n   numprocs=5\n   events=PROCESS_STATE\n   buffer_size=10\n   directory=/tmp\n   umask=022\n   priority=-1\n   autostart=true\n   autorestart=unexpected\n   startsecs=1\n   startretries=3\n   exitcodes=0\n   stopsignal=QUIT\n   stopwaitsecs=10\n   stopasgroup=false\n   killasgroup=false\n   user=chrism\n   redirect_stderr=false\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[rpcinterface:x]`` Section Settings\n-------------------------------------\n\nAdding ``rpcinterface:x`` settings in the configuration file is only\nuseful for people who wish to extend supervisor with additional custom\nbehavior.\n\nIn the sample config file, there is a section which is named\n``[rpcinterface:supervisor]``.  By default it looks like the\nfollowing.\n\n.. code-block:: ini\n\n   [rpcinterface:supervisor]\n   supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\nThe ``[rpcinterface:supervisor]`` section *must* remain in the\nconfiguration for the standard setup of supervisor to work properly.\nIf you don't want supervisor to do anything it doesn't already do out\nof the box, this is all you need to know about this type of section.\n\nHowever, if you wish to add rpc interface namespaces in order to\ncustomize supervisor, you may add additional ``[rpcinterface:foo]``\nsections, where \"foo\" represents the namespace of the interface (from\nthe web root), and the value named by\n``supervisor.rpcinterface_factory`` is a factory callable which should\nhave a function signature that accepts a single positional argument\n``supervisord`` and as many keyword arguments as required to perform\nconfiguration.  Any extra key/value pairs defined within the\n``[rpcinterface:x]`` section will be passed as keyword arguments to\nthe factory.\n\nHere's an example of a factory function, created in the\n``__init__.py`` file of the Python package ``my.package``.\n\n.. code-block:: python\n\n   from my.package.rpcinterface import AnotherRPCInterface\n\n   def make_another_rpcinterface(supervisord, **config):\n       retries = int(config.get('retries', 0))\n       another_rpc_interface = AnotherRPCInterface(supervisord, retries)\n       return another_rpc_interface\n\nAnd a section in the config file meant to configure it.\n\n.. code-block:: ini\n\n   [rpcinterface:another]\n   supervisor.rpcinterface_factory = my.package:make_another_rpcinterface\n   retries = 1\n\n``[rpcinterface:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``supervisor.rpcinterface_factory``\n\n  ``pkg_resources`` \"entry point\" dotted name to your RPC interface's\n  factory function.\n\n  *Default*: N/A\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[rpcinterface:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [rpcinterface:another]\n   supervisor.rpcinterface_factory = my.package:make_another_rpcinterface\n   retries = 1\n", "; Sample supervisor config file.\n;\n; For more information on the config file, please see:\n; http://supervisord.org/configuration.html\n;\n; Notes:\n;  - Shell expansion (\"~\" or \"$HOME\") is not supported.  Environment\n;    variables can be expanded using this syntax: \"%(ENV_HOME)s\".\n;  - Quotes around values are not supported, except in the case of\n;    the environment= options as shown below.\n;  - Comments must have a leading space: \"a=b ;comment\" not \"a=b;comment\".\n;  - Command will be truncated if it looks like a config file comment, e.g.\n;    \"command=bash -c 'foo ; bar'\" will truncate to \"command=bash -c 'foo \".\n\n[unix_http_server]\nfile=/tmp/supervisor.sock   ; the path to the socket file\n;chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\nlogfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB\nlogfile_backups=10           ; # of main logfile backups; 0 means none, default 10\nloglevel=info                ; log level; default info; others: debug,warn,trace\npidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid\nnodaemon=false               ; start in foreground if true; default false\nminfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\n;umask=022                   ; process file creation umask; default 022\n;user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP\n;environment=KEY=\"value\"     ; key value pairs to add to environment\n;strip_ansi=false            ; strip ansi escape codes in logs; def. false\n\n; The rpcinterface:supervisor section must remain in the config file for\n; RPC (supervisorctl/web interface) to work.  Additional interfaces may be\n; added by defining them in separate [rpcinterface:x] sections.\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n; The supervisorctl section configures how supervisorctl will connect to\n; supervisord.  configure it match the settings in either the unix_http_server\n; or inet_http_server section.\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n; Create one or more 'real' program: sections to be able to control them under\n; supervisor.\n\n;[program:theprogramname]\n;command=/bin/cat              ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)\n;exitcodes=0                   ; 'expected' exit codes used with autorestart (default 0)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;stopasgroup=false             ; send stop signal to the UNIX process group (default false)\n;killasgroup=false             ; SIGKILL the UNIX process group (def false)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=true          ; redirect proc stderr to stdout (default false)\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)\n;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stdout_syslog=false           ; send stdout to syslog with process name (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)\n;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;stderr_syslog=false           ; send stderr to syslog with process name (default false)\n;environment=A=\"1\",B=\"2\"       ; process environment additions (def no adds)\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The sample eventlistener section below shows all possible eventlistener\n; subsection values.  Create one or more 'real' eventlistener: sections to be\n; able to handle event notifications sent by supervisord.\n\n;[eventlistener:theeventlistenername]\n;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;events=EVENT                  ; event notif. types to subscribe to (req'd)\n;buffer_size=10                ; event buffer queue size (default 10)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)\n;exitcodes=0                   ; 'expected' exit codes used with autorestart (default 0)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;stopasgroup=false             ; send stop signal to the UNIX process group (default false)\n;killasgroup=false             ; SIGKILL the UNIX process group (def false)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stdout_syslog=false           ; send stdout to syslog with process name (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;stderr_syslog=false           ; send stderr to syslog with process name (default false)\n;environment=A=\"1\",B=\"2\"       ; process environment additions\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The sample group section below shows all possible group values.  Create one\n; or more 'real' group: sections to create \"heterogeneous\" process groups.\n\n;[group:thegroupname]\n;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions\n;priority=999                  ; the relative start priority (default 999)\n\n; The [include] section can just contain the \"files\" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n;[include]\n;files = relative/directory/*.ini\n"], "fixing_code": ["Configuration File\n==================\n\nThe Supervisor configuration file is conventionally named\n:file:`supervisord.conf`.  It is used by both :program:`supervisord`\nand :program:`supervisorctl`.  If either application is started\nwithout the ``-c`` option (the option which is used to tell the\napplication the configuration filename explicitly), the application\nwill look for a file named :file:`supervisord.conf` within the\nfollowing locations, in the specified order.  It will use the first\nfile it finds.\n\n#. :file:`$CWD/supervisord.conf`\n\n#. :file:`$CWD/etc/supervisord.conf`\n\n#. :file:`/etc/supervisord.conf`\n\n#. :file:`/etc/supervisor/supervisord.conf` (since Supervisor 3.3.0)\n\n#. :file:`../etc/supervisord.conf` (Relative to the executable)\n\n#. :file:`../supervisord.conf` (Relative to the executable)\n\n.. note::\n\n  Many versions of Supervisor packaged for Debian and Ubuntu included a patch\n  that added ``/etc/supervisor/supervisord.conf`` to the search paths.  The\n  first PyPI package of Supervisor to include it was Supervisor 3.3.0.\n\nFile Format\n-----------\n\n:file:`supervisord.conf` is a Windows-INI-style (Python ConfigParser)\nfile.  It has sections (each denoted by a ``[header]``) and key / value\npairs within the sections.  The sections and their allowable values\nare described below.\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\nEnvironment variables that are present in the environment at the time that\n:program:`supervisord` is started can be used in the configuration file\nusing the Python string expression syntax ``%(ENV_X)s``:\n\n.. code-block:: ini\n\n    [program:example]\n    command=/usr/bin/example --loglevel=%(ENV_LOGLEVEL)s\n\nIn the example above, the expression ``%(ENV_LOGLEVEL)s`` would be expanded\nto the value of the environment variable ``LOGLEVEL``.\n\n.. note::\n\n    In Supervisor 3.2 and later, ``%(ENV_X)s`` expressions are supported in\n    all options.  In prior versions, some options support them, but most\n    do not.  See the documentation for each option below.\n\n\n``[unix_http_server]`` Section Settings\n---------------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[unix_http_server]`` under which configuration parameters for an\nHTTP server that listens on a UNIX domain socket should be inserted.\nIf the configuration file has no ``[unix_http_server]`` section, a\nUNIX domain socket HTTP server will not be started.  The allowable\nconfiguration values are as follows.\n\n``[unix_http_server]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``file``\n\n  A path to a UNIX domain socket (e.g. :file:`/tmp/supervisord.sock`)\n  on which supervisor will listen for HTTP/XML-RPC requests.\n  :program:`supervisorctl` uses XML-RPC to communicate with\n  :program:`supervisord` over this port.  This option can include the\n  value ``%(here)s``, which expands to the directory in which the\n  :program:`supervisord` configuration file was found.\n\n  *Default*:  None.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``chmod``\n\n  Change the UNIX permission mode bits of the UNIX domain socket to\n  this value at startup.\n\n  *Default*: ``0700``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``chown``\n\n  Change the user and group of the socket file to this value.  May be\n  a UNIX username (e.g. ``chrism``) or a UNIX username and group\n  separated by a colon (e.g. ``chrism:wheel``).\n\n  *Default*:  Use the username and group of the user who starts supervisord.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username required for authentication to this HTTP server.\n\n  *Default*:  No username required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password required for authentication to this HTTP server.  This\n  can be a cleartext password, or can be specified as a SHA-1 hash if\n  prefixed by the string ``{SHA}``.  For example,\n  ``{SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d`` is the SHA-stored\n  version of the password \"thepassword\".\n\n  Note that hashed password must be in hex format.\n\n  *Default*:  No password required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[unix_http_server]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [unix_http_server]\n   file = /tmp/supervisor.sock\n   chmod = 0777\n   chown= nobody:nogroup\n   username = user\n   password = 123\n\n``[inet_http_server]`` Section Settings\n---------------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[inet_http_server]`` under which configuration parameters for an\nHTTP server that listens on a TCP (internet) socket should be\ninserted.  If the configuration file has no ``[inet_http_server]``\nsection, an inet HTTP server will not be started.  The allowable\nconfiguration values are as follows.\n\n.. warning::\n\n  The inet HTTP server is not enabled by default.  If you choose to enable it,\n  please read the following security warning.  The inet HTTP server is intended\n  for use within a trusted environment only.  It should only be bound to localhost\n  or only accessible from within an isolated, trusted network.  The inet HTTP server\n  does not support any form of encryption.  The inet HTTP server does not use\n  authentication by default (see the ``username=`` and ``password=`` options).\n  The inet HTTP server can be controlled remotely from :program:`supervisorctl`.\n  It also serves a web interface that allows subprocesses to be started or stopped,\n  and subprocess logs to be viewed.  **Never expose the inet HTTP server to the\n  public internet.**\n\n``[inet_http_server]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``port``\n\n  A TCP host:port value or (e.g. ``127.0.0.1:9001``) on which\n  supervisor will listen for HTTP/XML-RPC requests.\n  :program:`supervisorctl` will use XML-RPC to communicate with\n  :program:`supervisord` over this port.  To listen on all interfaces\n  in the machine, use ``:9001`` or ``*:9001``.  Please read the security\n  warning above.\n\n  *Default*:  No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username required for authentication to this HTTP server.\n\n  *Default*:  No username required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password required for authentication to this HTTP server.  This\n  can be a cleartext password, or can be specified as a SHA-1 hash if\n  prefixed by the string ``{SHA}``.  For example,\n  ``{SHA}82ab876d1387bfafe46cc1c8a2ef074eae50cb1d`` is the SHA-stored\n  version of the password \"thepassword\".\n\n  Note that hashed password must be in hex format.\n\n  *Default*:  No password required.\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[inet_http_server]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [inet_http_server]\n   port = 127.0.0.1:9001\n   username = user\n   password = 123\n\n``[supervisord]`` Section Settings\n----------------------------------\n\nThe :file:`supervisord.conf` file contains a section named\n``[supervisord]`` in which global settings related to the\n:program:`supervisord` process should be inserted.  These are as\nfollows.\n\n``[supervisord]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``logfile``\n\n  The path to the activity log of the supervisord process.  This\n  option can include the value ``%(here)s``, which expands to the\n  directory in which the supervisord configuration file was found.\n\n  .. note::\n\n    If ``logfile`` is set to a special file like ``/dev/stdout`` that is\n    not seekable, log rotation must be disabled by setting\n    ``logfile_maxbytes = 0``.\n\n  *Default*:  :file:`$CWD/supervisord.log`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``logfile_maxbytes``\n\n  The maximum number of bytes that may be consumed by the activity log\n  file before it is rotated (suffix multipliers like \"KB\", \"MB\", and\n  \"GB\" can be used in the value).  Set this value to 0 to indicate an\n  unlimited log size.\n\n  *Default*:  50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``logfile_backups``\n\n  The number of backups to keep around resulting from activity log\n  file rotation.  If set to 0, no backups will be kept.\n\n  *Default*:  10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``loglevel``\n\n  The logging level, dictating what is written to the supervisord\n  activity log.  One of ``critical``, ``error``, ``warn``, ``info``,\n  ``debug``, ``trace``, or ``blather``.  Note that at log level\n  ``debug``, the supervisord log file will record the stderr/stdout\n  output of its child processes and extended info info about process\n  state changes, which is useful for debugging a process which isn't\n  starting properly.  See also: :ref:`activity_log_levels`.\n\n  *Default*:  info\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``pidfile``\n\n  The location in which supervisord keeps its pid file.  This option\n  can include the value ``%(here)s``, which expands to the directory\n  in which the supervisord configuration file was found.\n\n  *Default*:  :file:`$CWD/supervisord.pid`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``umask``\n\n  The :term:`umask` of the supervisord process.\n\n  *Default*:  ``022``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``nodaemon``\n\n  If true, supervisord will start in the foreground instead of\n  daemonizing.\n\n  *Default*:  false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``minfds``\n\n  The minimum number of file descriptors that must be available before\n  supervisord will start successfully.  A call to setrlimit will be made\n  to attempt to raise the soft and hard limits of the supervisord process to\n  satisfy ``minfds``.  The hard limit may only be raised if supervisord\n  is run as root.  supervisord uses file descriptors liberally, and will\n  enter a failure mode when one cannot be obtained from the OS, so it's\n  useful to be able to specify a minimum value to ensure it doesn't run out\n  of them during execution.  These limits will be inherited by the managed\n  subprocesses.  This option is particularly useful on Solaris,\n  which has a low per-process fd limit by default.\n\n  *Default*:  1024\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``minprocs``\n\n  The minimum number of process descriptors that must be available\n  before supervisord will start successfully.  A call to setrlimit will be\n  made to attempt to raise the soft and hard limits of the supervisord process\n  to satisfy ``minprocs``.  The hard limit may only be raised if supervisord\n  is run as root.  supervisord will enter a failure mode when the OS runs out\n  of process descriptors, so it's useful to ensure that enough process\n  descriptors are available upon :program:`supervisord` startup.\n\n  *Default*:  200\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``nocleanup``\n\n  Prevent supervisord from clearing any existing ``AUTO``\n  child log files at startup time.  Useful for debugging.\n\n  *Default*:  false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``childlogdir``\n\n  The directory used for ``AUTO`` child log files.  This option can\n  include the value ``%(here)s``, which expands to the directory in\n  which the :program:`supervisord` configuration file was found.\n\n  *Default*: value of Python's :func:`tempfile.get_tempdir`\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``user``\n\n  Instruct :program:`supervisord` to switch users to this UNIX user\n  account before doing any meaningful processing.  The user can only\n  be switched if :program:`supervisord` is started as the root user.\n\n  *Default*: do not switch users\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n  *Changed*: 3.3.4.  If :program:`supervisord` can't switch to the\n  specified user, it will write an error message to ``stderr`` and\n  then exit immediately.  In earlier versions, it would continue to\n  run but would log a message at the ``critical`` level.\n\n``directory``\n\n  When :program:`supervisord` daemonizes, switch to this directory.\n  This option can include the value ``%(here)s``, which expands to the\n  directory in which the :program:`supervisord` configuration file was\n  found.\n\n  *Default*: do not cd\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``strip_ansi``\n\n  Strip all ANSI escape sequences from child log files.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``environment``\n\n  A list of key/value pairs in the form ``KEY=\"val\",KEY2=\"val2\"`` that\n  will be placed in the :program:`supervisord` process' environment\n  (and as a result in all of its child process' environments).  This\n  option can include the value ``%(here)s``, which expands to the\n  directory in which the supervisord configuration file was found.\n  Values containing non-alphanumeric characters should be quoted\n  (e.g. ``KEY=\"val:123\",KEY2=\"val,456\"``).  Otherwise, quoting the\n  values is optional but recommended.  To escape percent characters,\n  simply use two. (e.g. ``URI=\"/first%%20name\"``) **Note** that\n  subprocesses will inherit the environment variables of the shell\n  used to start :program:`supervisord` except for the ones overridden\n  here and within the program's ``environment`` option.  See\n  :ref:`subprocess_environment`.\n\n  *Default*: no values\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``identifier``\n\n  The identifier string for this supervisor process, used by the RPC\n  interface.\n\n  *Default*: supervisor\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[supervisord]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [supervisord]\n   logfile = /tmp/supervisord.log\n   logfile_maxbytes = 50MB\n   logfile_backups=10\n   loglevel = info\n   pidfile = /tmp/supervisord.pid\n   nodaemon = false\n   minfds = 1024\n   minprocs = 200\n   umask = 022\n   user = chrism\n   identifier = supervisor\n   directory = /tmp\n   nocleanup = true\n   childlogdir = /tmp\n   strip_ansi = false\n   environment = KEY1=\"value1\",KEY2=\"value2\"\n\n``[supervisorctl]`` Section Settings\n------------------------------------\n\n  The configuration file may contain settings for the\n  :program:`supervisorctl` interactive shell program.  These options\n  are listed below.\n\n``[supervisorctl]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``serverurl``\n\n  The URL that should be used to access the supervisord server,\n  e.g. ``http://localhost:9001``.  For UNIX domain sockets, use\n  ``unix:///absolute/path/to/file.sock``.\n\n  *Default*: ``http://localhost:9001``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``username``\n\n  The username to pass to the supervisord server for use in\n  authentication.  This should be same as ``username`` from the\n  supervisord server configuration for the port or UNIX domain socket\n  you're attempting to access.\n\n  *Default*: No username\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``password``\n\n  The password to pass to the supervisord server for use in\n  authentication. This should be the cleartext version of ``password``\n  from the supervisord server configuration for the port or UNIX\n  domain socket you're attempting to access.  This value cannot be\n  passed as a SHA hash.  Unlike other passwords specified in this\n  file, it must be provided in cleartext.\n\n  *Default*: No password\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``prompt``\n\n  String used as supervisorctl prompt.\n\n  *Default*: ``supervisor``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``history_file``\n\n  A path to use as the ``readline`` persistent history file.  If you\n  enable this feature by choosing a path, your supervisorctl commands\n  will be kept in the file, and you can use readline (e.g. arrow-up)\n  to invoke commands you performed in your last supervisorctl session.\n\n  *Default*: No file\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a5\n\n``[supervisorctl]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [supervisorctl]\n   serverurl = unix:///tmp/supervisor.sock\n   username = chris\n   password = 123\n   prompt = mysupervisor\n\n.. _programx_section:\n\n``[program:x]`` Section Settings\n--------------------------------\n\nThe configuration file must contain one or more ``program`` sections\nin order for supervisord to know which programs it should start and\ncontrol.  The header value is composite value.  It is the word\n\"program\", followed directly by a colon, then the program name.  A\nheader value of ``[program:foo]`` describes a program with the name of\n\"foo\".  The name is used within client applications that control the\nprocesses that are created as a result of this configuration.  It is\nan error to create a ``program`` section that does not have a name.\nThe name must not include a colon character or a bracket character.\nThe value of the name is used as the value for the\n``%(program_name)s`` string expression expansion within other values\nwhere specified.\n\n.. note::\n\n   A ``[program:x]`` section actually represents a \"homogeneous\n   process group\" to supervisor (as of 3.0).  The members of the group\n   are defined by the combination of the ``numprocs`` and\n   ``process_name`` parameters in the configuration.  By default, if\n   numprocs and process_name are left unchanged from their defaults,\n   the group represented by ``[program:x]`` will be named ``x`` and\n   will have a single process named ``x`` in it.  This provides a\n   modicum of backwards compatibility with older supervisor releases,\n   which did not treat program sections as homogeneous process group\n   definitions.\n\n   But for instance, if you have a ``[program:foo]`` section with a\n   ``numprocs`` of 3 and a ``process_name`` expression of\n   ``%(program_name)s_%(process_num)02d``, the \"foo\" group will\n   contain three processes, named ``foo_00``, ``foo_01``, and\n   ``foo_02``.  This makes it possible to start a number of very\n   similar processes using a single ``[program:x]`` section.  All\n   logfile names, all environment strings, and the command of programs\n   can also contain similar Python string expressions, to pass\n   slightly different parameters to each process.\n\n``[program:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``command``\n\n  The command that will be run when this program is started.  The\n  command can be either absolute (e.g. ``/path/to/programname``) or\n  relative (e.g. ``programname``).  If it is relative, the\n  supervisord's environment ``$PATH`` will be searched for the\n  executable.  Programs can accept arguments, e.g. ``/path/to/program\n  foo bar``.  The command line can use double quotes to group\n  arguments with spaces in them to pass to the program,\n  e.g. ``/path/to/program/name -p \"foo bar\"``.  Note that the value of\n  ``command`` may include Python string expressions,\n  e.g. ``/path/to/programname --port=80%(process_num)02d`` might\n  expand to ``/path/to/programname --port=8000`` at runtime.  String\n  expressions are evaluated against a dictionary containing the keys\n  ``group_name``, ``host_node_name``, ``process_num``, ``program_name``,\n  ``here`` (the directory of the supervisord config file), and all\n  supervisord's environment variables prefixed with ``ENV_``.  Controlled\n  programs should themselves not be daemons, as supervisord assumes it is\n  responsible for daemonizing its subprocesses (see\n  :ref:`nondaemonizing_of_subprocesses`).\n\n  .. note::\n\n    The command will be truncated if it looks like a config file comment,\n    e.g. ``command=bash -c 'foo ; bar'`` will be truncated to\n    ``command=bash -c 'foo``.  Quoting will not prevent this behavior,\n    since the configuration file reader does not parse the command like\n    a shell would.\n\n  *Default*: No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``process_name``\n\n  A Python string expression that is used to compose the supervisor\n  process name for this process.  You usually don't need to worry\n  about setting this unless you change ``numprocs``.  The string\n  expression is evaluated against a dictionary that includes\n  ``group_name``, ``host_node_name``, ``process_num``, ``program_name``,\n  and ``here`` (the directory of the supervisord config file).\n\n  *Default*: ``%(program_name)s``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``numprocs``\n\n  Supervisor will start as many instances of this program as named by\n  numprocs.  Note that if numprocs > 1, the ``process_name``\n  expression must include ``%(process_num)s`` (or any other\n  valid Python string expression that includes ``process_num``) within\n  it.\n\n  *Default*: 1\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``numprocs_start``\n\n  An integer offset that is used to compute the number at which\n  ``numprocs`` starts.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``priority``\n\n  The relative priority of the program in the start and shutdown\n  ordering.  Lower priorities indicate programs that start first and\n  shut down last at startup and when aggregate commands are used in\n  various clients (e.g. \"start all\"/\"stop all\").  Higher priorities\n  indicate programs that start last and shut down first.\n\n  *Default*: 999\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``autostart``\n\n  If true, this program will start automatically when supervisord is\n  started.\n\n  *Default*: true\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``startsecs``\n\n  The total number of seconds which the program needs to stay running\n  after a startup to consider the start successful (moving the process\n  from the ``STARTING`` state to the ``RUNNING`` state).  Set to ``0``\n  to indicate that the program needn't stay running for any particular\n  amount of time.\n\n  .. note::\n\n      Even if a process exits with an \"expected\" exit code (see\n      ``exitcodes``), the start will still be considered a failure\n      if the process exits quicker than ``startsecs``.\n\n  *Default*: 1\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``startretries``\n\n  The number of serial failure attempts that :program:`supervisord`\n  will allow when attempting to start the program before giving up and\n  putting the process into an ``FATAL`` state.  See\n  :ref:`process_states` for explanation of the ``FATAL`` state.\n\n  *Default*: 3\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``autorestart``\n\n  Specifies if :program:`supervisord` should automatically restart a\n  process if it exits when it is in the ``RUNNING`` state.  May be\n  one of ``false``, ``unexpected``, or ``true``.  If ``false``, the\n  process will not be autorestarted.  If ``unexpected``, the process\n  will be restarted when the program exits with an exit code that is\n  not one of the exit codes associated with this process' configuration\n  (see ``exitcodes``).  If ``true``, the process will be unconditionally\n  restarted when it exits, without regard to its exit code.\n\n  .. note::\n\n      ``autorestart`` controls whether :program:`supervisord` will\n      autorestart a program if it exits after it has successfully started\n      up (the process is in the ``RUNNING`` state).\n\n      :program:`supervisord` has a different restart mechanism for when the\n      process is starting up (the process is in the ``STARTING`` state).\n      Retries during process startup are controlled by ``startsecs``\n      and ``startretries``.\n\n  *Default*: unexpected\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``exitcodes``\n\n  The list of \"expected\" exit codes for this program used with ``autorestart``.\n  If the ``autorestart`` parameter is set to ``unexpected``, and the process\n  exits in any other way than as a result of a supervisor stop\n  request, :program:`supervisord` will restart the process if it exits\n  with an exit code that is not defined in this list.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n  .. note::\n\n      In Supervisor versions prior to 4.0, the default was ``0,2``.  In\n      Supervisor 4.0, the default was changed to ``0``.\n\n``stopsignal``\n\n  The signal used to kill the program when a stop is requested.  This\n  can be any of TERM, HUP, INT, QUIT, KILL, USR1, or USR2.\n\n  *Default*: TERM\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stopwaitsecs``\n\n  The number of seconds to wait for the OS to return a SIGCHLD to\n  :program:`supervisord` after the program has been sent a stopsignal.\n  If this number of seconds elapses before :program:`supervisord`\n  receives a SIGCHLD from the process, :program:`supervisord` will\n  attempt to kill it with a final SIGKILL.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stopasgroup``\n\n  If true, the flag causes supervisor to send the stop signal to the\n  whole process group and implies ``killasgroup`` is true.  This is useful\n  for programs, such as Flask in debug mode, that do not propagate\n  stop signals to their children, leaving them orphaned.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0b1\n\n``killasgroup``\n\n  If true, when resorting to send SIGKILL to the program to terminate\n  it send it to its whole process group instead, taking care of its\n  children as well, useful e.g with Python programs using\n  :mod:`multiprocessing`.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a11\n\n``user``\n\n  Instruct :program:`supervisord` to use this UNIX user account as the\n  account which runs the program.  The user can only be switched if\n  :program:`supervisord` is run as the root user.  If :program:`supervisord`\n  can't switch to the specified user, the program will not be started.\n\n  .. note::\n\n      The user will be changed using ``setuid`` only.  This does not start\n      a login shell and does not change environment variables like\n      ``USER`` or ``HOME``.  See :ref:`subprocess_environment` for details.\n\n  *Default*: Do not switch users\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``redirect_stderr``\n\n  If true, cause the process' stderr output to be sent back to\n  :program:`supervisord` on its stdout file descriptor (in UNIX shell\n  terms, this is the equivalent of executing ``/the/program 2>&1``).\n\n  .. note::\n\n     Do not set ``redirect_stderr=true`` in an ``[eventlistener:x]`` section.\n     Eventlisteners use ``stdout`` and ``stdin`` to communicate with\n     ``supervisord``.  If ``stderr`` is redirected, output from\n     ``stderr`` will interfere with the eventlistener protocol.\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``log_stdout`` and ``log_stderr``\n\n``stdout_logfile``\n\n  Put process stdout output in this file (and if redirect_stderr is\n  true, also place stderr output in this file).  If ``stdout_logfile``\n  is unset or set to ``AUTO``, supervisor will automatically choose a\n  file location.  If this is set to ``NONE``, supervisord will create\n  no log file.  ``AUTO`` log files and their backups will be deleted\n  when :program:`supervisord` restarts.  The ``stdout_logfile`` value\n  can contain Python string expressions that will evaluated against a\n  dictionary that contains the keys ``group_name``, ``host_node_name``,\n  ``process_num``, ``program_name``, and ``here`` (the directory of the\n  supervisord config file).\n\n  .. note::\n\n     It is not possible for two processes to share a single log file\n     (``stdout_logfile``) when rotation (``stdout_logfile_maxbytes``)\n     is enabled.  This will result in the file being corrupted.\n\n  .. note::\n\n    If ``stdout_logfile`` is set to a special file like ``/dev/stdout``\n    that is not seekable, log rotation must be disabled by setting\n    ``stdout_logfile_maxbytes = 0``.\n\n  *Default*: ``AUTO``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``logfile``\n\n``stdout_logfile_maxbytes``\n\n  The maximum number of bytes that may be consumed by\n  ``stdout_logfile`` before it is rotated (suffix multipliers like\n  \"KB\", \"MB\", and \"GB\" can be used in the value).  Set this value to 0\n  to indicate an unlimited log size.\n\n  *Default*: 50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``logfile_maxbytes``\n\n``stdout_logfile_backups``\n\n  The number of ``stdout_logfile`` backups to keep around resulting\n  from process stdout log file rotation.  If set to 0, no backups\n  will be kept.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0, replaces 2.0's ``logfile_backups``\n\n``stdout_capture_maxbytes``\n\n  Max number of bytes written to capture FIFO when process is in\n  \"stdout capture mode\" (see :ref:`capture_mode`).  Should be an\n  integer (suffix multipliers like \"KB\", \"MB\" and \"GB\" can used in the\n  value).  If this value is 0, process capture mode will be off.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stdout_events_enabled``\n\n  If true, PROCESS_LOG_STDOUT events will be emitted when the process\n  writes to its stdout file descriptor.  The events will only be\n  emitted if the file descriptor is not in capture mode at the time\n  the data is received (see :ref:`capture_mode`).\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a7\n\n``stdout_syslog``\n\n  If true, stdout will be directed to syslog along with the process name.\n\n  *Default*: False\n\n  *Required*:  No.\n\n  *Introduced*: 4.0.0\n\n``stderr_logfile``\n\n  Put process stderr output in this file unless ``redirect_stderr`` is\n  true.  Accepts the same value types as ``stdout_logfile`` and may\n  contain the same Python string expressions.\n\n  .. note::\n\n     It is not possible for two processes to share a single log file\n     (``stderr_logfile``) when rotation (``stderr_logfile_maxbytes``)\n     is enabled.  This will result in the file being corrupted.\n\n  .. note::\n\n    If ``stderr_logfile`` is set to a special file like ``/dev/stderr``\n    that is not seekable, log rotation must be disabled by setting\n    ``stderr_logfile_maxbytes = 0``.\n\n  *Default*: ``AUTO``\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_logfile_maxbytes``\n\n  The maximum number of bytes before logfile rotation for\n  ``stderr_logfile``.  Accepts the same value types as\n  ``stdout_logfile_maxbytes``.\n\n  *Default*: 50MB\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_logfile_backups``\n\n  The number of backups to keep around resulting from process stderr\n  log file rotation.  If set to 0, no backups will be kept.\n\n  *Default*: 10\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_capture_maxbytes``\n\n  Max number of bytes written to capture FIFO when process is in\n  \"stderr capture mode\" (see :ref:`capture_mode`).  Should be an\n  integer (suffix multipliers like \"KB\", \"MB\" and \"GB\" can used in the\n  value).  If this value is 0, process capture mode will be off.\n\n  *Default*: 0\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``stderr_events_enabled``\n\n  If true, PROCESS_LOG_STDERR events will be emitted when the process\n  writes to its stderr file descriptor.  The events will only be\n  emitted if the file descriptor is not in capture mode at the time\n  the data is received (see :ref:`capture_mode`).\n\n  *Default*: false\n\n  *Required*:  No.\n\n  *Introduced*: 3.0a7\n\n``stderr_syslog``\n\n  If true, stderr will be directed to syslog along with the process name.\n\n  *Default*: False\n\n  *Required*:  No.\n\n  *Introduced*: 4.0.0\n\n``environment``\n\n  A list of key/value pairs in the form ``KEY=\"val\",KEY2=\"val2\"`` that\n  will be placed in the child process' environment.  The environment\n  string may contain Python string expressions that will be evaluated\n  against a dictionary containing ``group_name``, ``host_node_name``,\n  ``process_num``, ``program_name``, and ``here`` (the directory of the\n  supervisord config file).  Values containing non-alphanumeric characters\n  should be quoted (e.g. ``KEY=\"val:123\",KEY2=\"val,456\"``).  Otherwise,\n  quoting the values is optional but recommended.  **Note** that the\n  subprocess will inherit the environment variables of the shell used to\n  start \"supervisord\" except for the ones overridden here.  See\n  :ref:`subprocess_environment`.\n\n  *Default*: No extra environment\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``directory``\n\n  A file path representing a directory to which :program:`supervisord`\n  should temporarily chdir before exec'ing the child.\n\n  *Default*: No chdir (inherit supervisor's)\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``umask``\n\n  An octal number (e.g. 002, 022) representing the umask of the\n  process.\n\n  *Default*: No special umask (inherit supervisor's)\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``serverurl``\n\n  The URL passed in the environment to the subprocess process as\n  ``SUPERVISOR_SERVER_URL`` (see :mod:`supervisor.childutils`) to\n  allow the subprocess to easily communicate with the internal HTTP\n  server.  If provided, it should have the same syntax and structure\n  as the ``[supervisorctl]`` section option of the same name.  If this\n  is set to AUTO, or is unset, supervisor will automatically construct\n  a server URL, giving preference to a server that listens on UNIX\n  domain sockets over one that listens on an internet socket.\n\n  *Default*: AUTO\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[program:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [program:cat]\n   command=/bin/cat\n   process_name=%(program_name)s\n   numprocs=1\n   directory=/tmp\n   umask=022\n   priority=999\n   autostart=true\n   autorestart=unexpected\n   startsecs=10\n   startretries=3\n   exitcodes=0\n   stopsignal=TERM\n   stopwaitsecs=10\n   stopasgroup=false\n   killasgroup=false\n   user=chrism\n   redirect_stderr=false\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_capture_maxbytes=1MB\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_capture_maxbytes=1MB\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[include]`` Section Settings\n------------------------------\n\nThe :file:`supervisord.conf` file may contain a section named\n``[include]``.  If the configuration file contains an ``[include]``\nsection, it must contain a single key named \"files\".  The values in\nthis key specify other configuration files to be included within the\nconfiguration.\n\n.. note::\n\n    The ``[include]`` section is processed only by ``supervisord``.  It is\n    ignored by ``supervisorctl``.\n\n\n``[include]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``files``\n\n  A space-separated sequence of file globs.  Each file glob may be\n  absolute or relative.  If the file glob is relative, it is\n  considered relative to the location of the configuration file which\n  includes it.  A \"glob\" is a file pattern which matches a specified\n  pattern according to the rules used by the Unix shell. No tilde\n  expansion is done, but ``*``, ``?``, and character ranges expressed\n  with ``[]`` will be correctly matched.  The string expression is\n  evaluated against a dictionary that includes ``host_node_name``\n  and ``here`` (the directory of the supervisord config file).  Recursive\n  includes from included files are not supported.\n\n  *Default*: No default (required)\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n  *Changed*: 3.3.0.  Added support for the ``host_node_name`` expansion.\n\n``[include]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [include]\n   files = /an/absolute/filename.conf /an/absolute/*.conf foo.conf config??.conf\n\n``[group:x]`` Section Settings\n------------------------------\n\nIt is often useful to group \"homogeneous\" process groups (aka\n\"programs\") together into a \"heterogeneous\" process group so they can\nbe controlled as a unit from Supervisor's various controller\ninterfaces.\n\nTo place programs into a group so you can treat them as a unit, define\na ``[group:x]`` section in your configuration file.  The group header\nvalue is a composite.  It is the word \"group\", followed directly by a\ncolon, then the group name.  A header value of ``[group:foo]``\ndescribes a group with the name of \"foo\".  The name is used within\nclient applications that control the processes that are created as a\nresult of this configuration.  It is an error to create a ``group``\nsection that does not have a name.  The name must not include a colon\ncharacter or a bracket character.\n\nFor a ``[group:x]``, there must be one or more ``[program:x]``\nsections elsewhere in your configuration file, and the group must\nrefer to them by name in the ``programs`` value.\n\nIf \"homogeneous\" process groups (represented by program sections) are\nplaced into a \"heterogeneous\" group via ``[group:x]`` section's\n``programs`` line, the homogeneous groups that are implied by the\nprogram section will not exist at runtime in supervisor.  Instead, all\nprocesses belonging to each of the homogeneous groups will be placed\ninto the heterogeneous group.  For example, given the following group\nconfiguration:\n\n.. code-block:: ini\n\n   [group:foo]\n   programs=bar,baz\n   priority=999\n\nGiven the above, at supervisord startup, the ``bar`` and ``baz``\nhomogeneous groups will not exist, and the processes that would have\nbeen under them will now be moved into the ``foo`` group.\n\n``[group:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``programs``\n\n  A comma-separated list of program names.  The programs which are\n  listed become members of the group.\n\n  *Default*: No default (required)\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``priority``\n\n  A priority number analogous to a ``[program:x]`` priority value\n  assigned to the group.\n\n  *Default*: 999\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[group:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [group:foo]\n   programs=bar,baz\n   priority=999\n\n\n``[fcgi-program:x]`` Section Settings\n-------------------------------------\n\nSupervisor can manage groups of `FastCGI <http://www.fastcgi.com>`_\nprocesses that all listen on the same socket.  Until now, deployment\nflexibility for FastCGI was limited.  To get full process management,\nyou could use mod_fastcgi under Apache but then you were stuck with\nApache's inefficient concurrency model of one process or thread per\nconnection.  In addition to requiring more CPU and memory resources,\nthe process/thread per connection model can be quickly saturated by a\nslow resource, preventing other resources from being served.  In order\nto take advantage of newer event-driven web servers such as lighttpd\nor nginx which don't include a built-in process manager, you had to\nuse scripts like cgi-fcgi or spawn-fcgi.  These can be used in\nconjunction with a process manager such as supervisord or daemontools\nbut require each FastCGI child process to bind to its own socket.\nThe disadvantages of this are: unnecessarily complicated web server\nconfiguration, ungraceful restarts, and reduced fault tolerance.  With\nfewer sockets to configure, web server configurations are much smaller\nif groups of FastCGI processes can share sockets.  Shared sockets\nallow for graceful restarts because the socket remains bound by the\nparent process while any of the child processes are being restarted.\nFinally, shared sockets are more fault tolerant because if a given\nprocess fails, other processes can continue to serve inbound\nconnections.\n\nWith integrated FastCGI spawning support, Supervisor gives you the\nbest of both worlds.  You get full-featured process management with\ngroups of FastCGI processes sharing sockets without being tied to a\nparticular web server.  It's a clean separation of concerns, allowing\nthe web server and the process manager to each do what they do best.\n\n.. note::\n\n   The socket manager in Supervisor was originally developed to support\n   FastCGI processes but it is not limited to FastCGI.  Other protocols may\n   be used as well with no special configuration.  Any program that can\n   access an open socket from a file descriptor (e.g. with\n   `socket.fromfd <http://docs.python.org/library/socket.html#socket.fromfd>`_\n   in Python) can use the socket manager.  Supervisor will automatically\n   create the socket, bind, and listen before forking the first child in a\n   group.  The socket will be passed to each child on file descriptor\n   number ``0`` (zero).  When the last child in the group exits,\n   Supervisor will close the socket.\n\n.. note::\n\n   Prior to Supervisor 3.4.0, FastCGI programs (``[fcgi-program:x]``)\n   could not be referenced in groups (``[group:x]``).\n\nAll the options available to ``[program:x]`` sections are\nalso respected by ``fcgi-program`` sections.\n\n``[fcgi-program:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``[fcgi-program:x]`` sections have a few keys which ``[program:x]``\nsections do not have.\n\n``socket``\n\n  The FastCGI socket for this program, either TCP or UNIX domain\n  socket. For TCP sockets, use this format: ``tcp://localhost:9002``.\n  For UNIX domain sockets, use ``unix:///absolute/path/to/file.sock``.\n  String expressions are evaluated against a dictionary containing the\n  keys \"program_name\" and \"here\" (the directory of the supervisord\n  config file).\n\n  *Default*: No default.\n\n  *Required*:  Yes.\n\n  *Introduced*: 3.0\n\n``socket_backlog``\n\n  Sets socket listen(2) backlog.\n\n  *Default*: socket.SOMAXCONN\n\n  *Required*:  No.\n\n  *Introduced*: 3.4.0\n\n``socket_owner``\n\n  For UNIX domain sockets, this parameter can be used to specify the user\n  and group for the FastCGI socket. May be a UNIX username (e.g. chrism)\n  or a UNIX username and group separated by a colon (e.g. chrism:wheel).\n\n  *Default*: Uses the user and group set for the fcgi-program\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``socket_mode``\n\n  For UNIX domain sockets, this parameter can be used to specify the\n  permission mode.\n\n  *Default*: 0700\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\nConsult :ref:`programx_section` for other allowable keys, delta the\nabove constraints and additions.\n\n``[fcgi-program:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [fcgi-program:fcgiprogramname]\n   command=/usr/bin/example.fcgi\n   socket=unix:///var/run/supervisor/%(program_name)s.sock\n   socket_owner=chrism\n   socket_mode=0700\n   process_name=%(program_name)s_%(process_num)02d\n   numprocs=5\n   directory=/tmp\n   umask=022\n   priority=999\n   autostart=true\n   autorestart=unexpected\n   startsecs=1\n   startretries=3\n   exitcodes=0\n   stopsignal=QUIT\n   stopasgroup=false\n   killasgroup=false\n   stopwaitsecs=10\n   user=chrism\n   redirect_stderr=true\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[eventlistener:x]`` Section Settings\n--------------------------------------\n\nSupervisor allows specialized homogeneous process groups (\"event\nlistener pools\") to be defined within the configuration file.  These\npools contain processes that are meant to receive and respond to event\nnotifications from supervisor's event system.  See :ref:`events` for\nan explanation of how events work and how to implement programs that\ncan be declared as event listeners.\n\nNote that all the options available to ``[program:x]`` sections are\nrespected by eventlistener sections *except* for ``stdout_capture_maxbytes``.\nEventlisteners cannot emit process communication events on ``stdout``,\nbut can emit on ``stderr`` (see :ref:`capture_mode`).\n\n``[eventlistener:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``[eventlistener:x]`` sections have a few keys which ``[program:x]``\nsections do not have.\n\n``buffer_size``\n\n  The event listener pool's event queue buffer size.  When a listener\n  pool's event buffer is overflowed (as can happen when an event\n  listener pool cannot keep up with all of the events sent to it), the\n  oldest event in the buffer is discarded.\n\n``events``\n\n  A comma-separated list of event type names that this listener is\n  \"interested\" in receiving notifications for (see\n  :ref:`event_types` for a list of valid event type names).\n\n``result_handler``\n\n  A `pkg_resources entry point string\n  <http://peak.telecommunity.com/DevCenter/PkgResources>`_ that\n  resolves to a Python callable.  The default value is\n  ``supervisor.dispatchers:default_handler``.  Specifying an alternate\n  result handler is a very uncommon thing to need to do, and as a\n  result, how to create one is not documented.\n\nConsult :ref:`programx_section` for other allowable keys, delta the\nabove constraints and additions.\n\n``[eventlistener:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [eventlistener:theeventlistenername]\n   command=/bin/eventlistener\n   process_name=%(program_name)s_%(process_num)02d\n   numprocs=5\n   events=PROCESS_STATE\n   buffer_size=10\n   directory=/tmp\n   umask=022\n   priority=-1\n   autostart=true\n   autorestart=unexpected\n   startsecs=1\n   startretries=3\n   exitcodes=0\n   stopsignal=QUIT\n   stopwaitsecs=10\n   stopasgroup=false\n   killasgroup=false\n   user=chrism\n   redirect_stderr=false\n   stdout_logfile=/a/path\n   stdout_logfile_maxbytes=1MB\n   stdout_logfile_backups=10\n   stdout_events_enabled=false\n   stderr_logfile=/a/path\n   stderr_logfile_maxbytes=1MB\n   stderr_logfile_backups=10\n   stderr_events_enabled=false\n   environment=A=\"1\",B=\"2\"\n   serverurl=AUTO\n\n``[rpcinterface:x]`` Section Settings\n-------------------------------------\n\nAdding ``rpcinterface:x`` settings in the configuration file is only\nuseful for people who wish to extend supervisor with additional custom\nbehavior.\n\nIn the sample config file, there is a section which is named\n``[rpcinterface:supervisor]``.  By default it looks like the\nfollowing.\n\n.. code-block:: ini\n\n   [rpcinterface:supervisor]\n   supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\nThe ``[rpcinterface:supervisor]`` section *must* remain in the\nconfiguration for the standard setup of supervisor to work properly.\nIf you don't want supervisor to do anything it doesn't already do out\nof the box, this is all you need to know about this type of section.\n\nHowever, if you wish to add rpc interface namespaces in order to\ncustomize supervisor, you may add additional ``[rpcinterface:foo]``\nsections, where \"foo\" represents the namespace of the interface (from\nthe web root), and the value named by\n``supervisor.rpcinterface_factory`` is a factory callable which should\nhave a function signature that accepts a single positional argument\n``supervisord`` and as many keyword arguments as required to perform\nconfiguration.  Any extra key/value pairs defined within the\n``[rpcinterface:x]`` section will be passed as keyword arguments to\nthe factory.\n\nHere's an example of a factory function, created in the\n``__init__.py`` file of the Python package ``my.package``.\n\n.. code-block:: python\n\n   from my.package.rpcinterface import AnotherRPCInterface\n\n   def make_another_rpcinterface(supervisord, **config):\n       retries = int(config.get('retries', 0))\n       another_rpc_interface = AnotherRPCInterface(supervisord, retries)\n       return another_rpc_interface\n\nAnd a section in the config file meant to configure it.\n\n.. code-block:: ini\n\n   [rpcinterface:another]\n   supervisor.rpcinterface_factory = my.package:make_another_rpcinterface\n   retries = 1\n\n``[rpcinterface:x]`` Section Values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``supervisor.rpcinterface_factory``\n\n  ``pkg_resources`` \"entry point\" dotted name to your RPC interface's\n  factory function.\n\n  *Default*: N/A\n\n  *Required*:  No.\n\n  *Introduced*: 3.0\n\n``[rpcinterface:x]`` Section Example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: ini\n\n   [rpcinterface:another]\n   supervisor.rpcinterface_factory = my.package:make_another_rpcinterface\n   retries = 1\n", "; Sample supervisor config file.\n;\n; For more information on the config file, please see:\n; http://supervisord.org/configuration.html\n;\n; Notes:\n;  - Shell expansion (\"~\" or \"$HOME\") is not supported.  Environment\n;    variables can be expanded using this syntax: \"%(ENV_HOME)s\".\n;  - Quotes around values are not supported, except in the case of\n;    the environment= options as shown below.\n;  - Comments must have a leading space: \"a=b ;comment\" not \"a=b;comment\".\n;  - Command will be truncated if it looks like a config file comment, e.g.\n;    \"command=bash -c 'foo ; bar'\" will truncate to \"command=bash -c 'foo \".\n;\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n;  enabled by uncommenting the [inet_http_server] section below.  The inet\n;  HTTP server is intended for use within a trusted environment only.  It\n;  should only be bound to localhost or only accessible from within an\n;  isolated, trusted network.  The inet HTTP server does not support any\n;  form of encryption.  The inet HTTP server does not use authentication\n;  by default (see the username= and password= options to add authentication).\n;  Never expose the inet HTTP server to the public internet.\n\n[unix_http_server]\nfile=/tmp/supervisor.sock   ; the path to the socket file\n;chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\nlogfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB\nlogfile_backups=10           ; # of main logfile backups; 0 means none, default 10\nloglevel=info                ; log level; default info; others: debug,warn,trace\npidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid\nnodaemon=false               ; start in foreground if true; default false\nminfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\n;umask=022                   ; process file creation umask; default 022\n;user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP\n;environment=KEY=\"value\"     ; key value pairs to add to environment\n;strip_ansi=false            ; strip ansi escape codes in logs; def. false\n\n; The rpcinterface:supervisor section must remain in the config file for\n; RPC (supervisorctl/web interface) to work.  Additional interfaces may be\n; added by defining them in separate [rpcinterface:x] sections.\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n; The supervisorctl section configures how supervisorctl will connect to\n; supervisord.  configure it match the settings in either the unix_http_server\n; or inet_http_server section.\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n; Create one or more 'real' program: sections to be able to control them under\n; supervisor.\n\n;[program:theprogramname]\n;command=/bin/cat              ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)\n;exitcodes=0                   ; 'expected' exit codes used with autorestart (default 0)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;stopasgroup=false             ; send stop signal to the UNIX process group (default false)\n;killasgroup=false             ; SIGKILL the UNIX process group (def false)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=true          ; redirect proc stderr to stdout (default false)\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)\n;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stdout_syslog=false           ; send stdout to syslog with process name (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)\n;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;stderr_syslog=false           ; send stderr to syslog with process name (default false)\n;environment=A=\"1\",B=\"2\"       ; process environment additions (def no adds)\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The sample eventlistener section below shows all possible eventlistener\n; subsection values.  Create one or more 'real' eventlistener: sections to be\n; able to handle event notifications sent by supervisord.\n\n;[eventlistener:theeventlistenername]\n;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;events=EVENT                  ; event notif. types to subscribe to (req'd)\n;buffer_size=10                ; event buffer queue size (default 10)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)\n;exitcodes=0                   ; 'expected' exit codes used with autorestart (default 0)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;stopasgroup=false             ; send stop signal to the UNIX process group (default false)\n;killasgroup=false             ; SIGKILL the UNIX process group (def false)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stdout_syslog=false           ; send stdout to syslog with process name (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;stderr_syslog=false           ; send stderr to syslog with process name (default false)\n;environment=A=\"1\",B=\"2\"       ; process environment additions\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The sample group section below shows all possible group values.  Create one\n; or more 'real' group: sections to create \"heterogeneous\" process groups.\n\n;[group:thegroupname]\n;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions\n;priority=999                  ; the relative start priority (default 999)\n\n; The [include] section can just contain the \"files\" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n;[include]\n;files = relative/directory/*.ini\n"], "filenames": ["docs/configuration.rst", "supervisor/skel/sample.conf"], "buggy_code_start_loc": [159, 13], "buggy_code_end_loc": [170, 13], "fixing_code_start_loc": [160, 14], "fixing_code_end_loc": [184, 24], "type": "CWE-306", "message": "** DISPUTED ** In Supervisor through 4.0.2, an unauthenticated user can read log files or restart a service. Note: The maintainer responded that the affected component, inet_http_server, is not enabled by default but if the user enables it and does not set a password, Supervisor logs a warning message. The maintainer indicated the ability to run an open server will not be removed but an additional warning was added to the documentation.", "other": {"cve": {"id": "CVE-2019-12105", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-10T17:15:11.517", "lastModified": "2019-09-17T22:15:10.853", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "** DISPUTED ** In Supervisor through 4.0.2, an unauthenticated user can read log files or restart a service. Note: The maintainer responded that the affected component, inet_http_server, is not enabled by default but if the user enables it and does not set a password, Supervisor logs a warning message. The maintainer indicated the ability to run an open server will not be removed but an additional warning was added to the documentation."}, {"lang": "es", "value": "** EN DISPUTA ** En Supervisor hasta la versi\u00f3n 4.0.2, un usuario no autenticado puede leer archivos de registro o reiniciar un servicio. Nota: El responsable de mantenimiento respondi\u00f3 que el componente afectado, inet_http_server, no est\u00e1 habilitado de manera predeterminada, pero si el usuario lo habilita y no establece una contrase\u00f1a, Supervisor registra un mensaje de advertencia. El responsable de mantenimiento indic\u00f3 que la capacidad de ejecutar un servidor abierto no se eliminar\u00e1, pero se agreg\u00f3 una advertencia adicional a la documentaci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-306"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:supervisord:supervisor:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.0.2", "matchCriteriaId": "4BB007CD-542E-4152-82F7-0E2236F48BCA"}]}]}], "references": [{"url": "http://supervisord.org/configuration.html#inet-http-server-section-settings", "source": "cve@mitre.org"}, {"url": "https://github.com/Supervisor/supervisor/commit/4e334d9cf2a1daff685893e35e72398437df3dcb", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Supervisor/supervisor/issues/1245", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Supervisor/supervisor/commit/4e334d9cf2a1daff685893e35e72398437df3dcb"}}