{"buggy_code": ["<?php\n/* Copyright (C) 2007-2011\tLaurent Destailleur\t<eldy@users.sourceforge.net>\n * Copyright (C) 2008-2012\tRegis Houssin\t\t<regis.houssin@inodbox.com>\n * Copyright (C) 2008-2011\tJuanjo Menent\t\t<jmenent@2byte.es>\n * Copyright (C) 2014       Teddy Andreotti    \t<125155@supinfo.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/passwordforgotten.php\n *       \\brief      Page to ask a new password\n */\n\ndefine(\"NOLOGIN\", 1); // This means this output page does not require to be logged.\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/usergroups.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\nif (!empty($conf->ldap->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/ldap.class.php';\n}\n\n// Load translation files required by page\n$langs->loadLangs(array('errors', 'users', 'companies', 'ldap', 'other'));\n\n// Security check\nif (!empty($conf->global->MAIN_SECURITY_DISABLEFORGETPASSLINK)) {\n\theader(\"Location: \".DOL_URL_ROOT.'/');\n\texit;\n}\n\n$action = GETPOST('action', 'aZ09');\n$mode = $dolibarr_main_authentication;\nif (!$mode) {\n\t$mode = 'http';\n}\n\n$username = GETPOST('username', 'alphanohtml');\n$passworduidhash = GETPOST('passworduidhash', 'alpha');\n$conf->entity = (GETPOST('entity', 'int') ? GETPOST('entity', 'int') : 1);\n\n// Instantiate hooks of thirdparty module only if not already define\n$hookmanager->initHooks(array('passwordforgottenpage'));\n\n\nif (GETPOST('dol_hide_leftmenu', 'alpha') || !empty($_SESSION['dol_hide_leftmenu'])) {\n\t$conf->dol_hide_leftmenu = 1;\n}\nif (GETPOST('dol_hide_topmenu', 'alpha') || !empty($_SESSION['dol_hide_topmenu'])) {\n\t$conf->dol_hide_topmenu = 1;\n}\nif (GETPOST('dol_optimize_smallscreen', 'alpha') || !empty($_SESSION['dol_optimize_smallscreen'])) {\n\t$conf->dol_optimize_smallscreen = 1;\n}\nif (GETPOST('dol_no_mouse_hover', 'alpha') || !empty($_SESSION['dol_no_mouse_hover'])) {\n\t$conf->dol_no_mouse_hover = 1;\n}\nif (GETPOST('dol_use_jmobile', 'alpha') || !empty($_SESSION['dol_use_jmobile'])) {\n\t$conf->dol_use_jmobile = 1;\n}\n\n\n/**\n * Actions\n */\n\n$parameters = array('username' => $username);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\t$message = $hookmanager->error;\n}\n\nif (empty($reshook)) {\n\t// Validate new password\n\tif ($action == 'validatenewpassword' && $username && $passworduidhash) {\n\t\t$edituser = new User($db);\n\t\t$result = $edituser->fetch('', $_GET[\"username\"]);\n\t\tif ($result < 0) {\n\t\t\t$message = '<div class=\"error\">'.dol_escape_htmltag($langs->trans(\"ErrorLoginDoesNotExists\", $username)).'</div>';\n\t\t} else {\n\t\t\tglobal $dolibarr_main_instance_unique_id;\n\n\t\t\t//print $edituser->pass_temp.'-'.$edituser->id.'-'.$dolibarr_main_instance_unique_id.' '.$passworduidhash;\n\t\t\tif (dol_verifyHash($edituser->pass_temp.'-'.$edituser->id.'-'.$dolibarr_main_instance_unique_id, $passworduidhash)) {\n\t\t\t\t// Clear session\n\t\t\t\tunset($_SESSION['dol_login']);\n\t\t\t\t$_SESSION['dol_loginmesg'] = $langs->trans('NewPasswordValidated'); // Save message for the session page\n\n\t\t\t\t$newpassword = $edituser->setPassword($user, $edituser->pass_temp, 0);\n\t\t\t\tdol_syslog(\"passwordforgotten.php new password for user->id=\".$edituser->id.\" validated in database\");\n\n\t\t\t\theader(\"Location: \".DOL_URL_ROOT.'/');\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorFailedToValidatePasswordReset\").'</div>';\n\t\t\t}\n\t\t}\n\t}\n\t// Action modif mot de passe\n\tif ($action == 'buildnewpassword' && $username) {\n\t\t$sessionkey = 'dol_antispam_value';\n\t\t$ok = (array_key_exists($sessionkey, $_SESSION) === true && (strtolower($_SESSION[$sessionkey]) == strtolower($_POST['code'])));\n\n\t\t// Verify code\n\t\tif (!$ok) {\n\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorBadValueForCode\").'</div>';\n\t\t} else {\n\t\t\t$isanemail = preg_match('/@/', $username);\n\n\t\t\t$edituser = new User($db);\n\t\t\t$result = $edituser->fetch('', $username, '', 1);\n\t\t\tif ($result == 0 && $isanemail) {\n\t\t\t\t$result = $edituser->fetch('', '', '', 1, -1, $username);\n\t\t\t}\n\n\t\t\tif ($result <= 0 && $edituser->error == 'USERNOTFOUND') {\n\t\t\t\t$message = '<div class=\"warning paddingtopbottom'.(empty($conf->global->MAIN_LOGIN_BACKGROUND) ? '' : ' backgroundsemitransparent').'\">';\n\t\t\t\tif (!$isanemail) {\n\t\t\t\t\t$message .= $langs->trans(\"IfLoginExistPasswordRequestSent\");\n\t\t\t\t} else {\n\t\t\t\t\t$message .= $langs->trans(\"IfEmailExistPasswordRequestSent\");\n\t\t\t\t}\n\t\t\t\t$message .= '</div>';\n\t\t\t\t$username = '';\n\t\t\t} else {\n\t\t\t\tif (!$edituser->email) {\n\t\t\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorLoginHasNoEmail\").'</div>';\n\t\t\t\t} else {\n\t\t\t\t\t$newpassword = $edituser->setPassword($user, '', 1);\n\t\t\t\t\tif ($newpassword < 0) {\n\t\t\t\t\t\t// Failed\n\t\t\t\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorFailedToChangePassword\").'</div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Success\n\t\t\t\t\t\tif ($edituser->send_password($user, $newpassword, 1) > 0) {\n\t\t\t\t\t\t\t$message = '<div class=\"warning paddingtopbottom'.(empty($conf->global->MAIN_LOGIN_BACKGROUND) ? '' : ' backgroundsemitransparent').'\">';\n\t\t\t\t\t\t\tif (!$isanemail) {\n\t\t\t\t\t\t\t\t$message .= $langs->trans(\"IfLoginExistPasswordRequestSent\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$message .= $langs->trans(\"IfEmailExistPasswordRequestSent\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//$message .= $langs->trans(\"PasswordChangeRequestSent\", $edituser->login, dolObfuscateEmail($edituser->email));\n\t\t\t\t\t\t\t$message .= '</div>';\n\t\t\t\t\t\t\t$username = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$message .= '<div class=\"error\">'.$edituser->error.'</div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * View\n */\n\n$dol_url_root = DOL_URL_ROOT;\n\n// Title\n$title = 'Dolibarr '.DOL_VERSION;\nif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t$title = $conf->global->MAIN_APPLICATION_TITLE;\n}\n\n// Select templates\nif (file_exists(DOL_DOCUMENT_ROOT.\"/theme/\".$conf->theme.\"/tpl/passwordforgotten.tpl.php\")) {\n\t$template_dir = DOL_DOCUMENT_ROOT.\"/theme/\".$conf->theme.\"/tpl/\";\n} else {\n\t$template_dir = DOL_DOCUMENT_ROOT.\"/core/tpl/\";\n}\n\nif (!$username) {\n\t$focus_element = 'username';\n} else {\n\t$focus_element = 'password';\n}\n\n// Send password button enabled ?\n$disabled = 'disabled';\nif (preg_match('/dolibarr/i', $mode)) {\n\t$disabled = '';\n}\nif (!empty($conf->global->MAIN_SECURITY_ENABLE_SENDPASSWORD)) {\n\t$disabled = ''; // To force button enabled\n}\n\n// Show logo (search in order: small company logo, large company logo, theme logo, common logo)\n$width = 0;\n$rowspan = 2;\n$urllogo = DOL_URL_ROOT.'/theme/common/login_logo.png';\nif (!empty($mysoc->logo_small) && is_readable($conf->mycompany->dir_output.'/logos/thumbs/'.$mysoc->logo_small)) {\n\t$urllogo = DOL_URL_ROOT.'/viewimage.php?cache=1&amp;modulepart=mycompany&amp;file='.urlencode('logos/thumbs/'.$mysoc->logo_small);\n} elseif (!empty($mysoc->logo_small) && is_readable($conf->mycompany->dir_output.'/logos/'.$mysoc->logo)) {\n\t$urllogo = DOL_URL_ROOT.'/viewimage.php?cache=1&amp;modulepart=mycompany&amp;file='.urlencode('logos/'.$mysoc->logo);\n\t$width = 128;\n} elseif (is_readable(DOL_DOCUMENT_ROOT.'/theme/'.$conf->theme.'/img/dolibarr_logo.svg')) {\n\t$urllogo = DOL_URL_ROOT.'/theme/'.$conf->theme.'/img/dolibarr_logo.svg';\n} elseif (is_readable(DOL_DOCUMENT_ROOT.'/theme/dolibarr_logo.svg')) {\n\t$urllogo = DOL_URL_ROOT.'/theme/dolibarr_logo.svg';\n}\n\n// Security graphical code\nif (function_exists(\"imagecreatefrompng\") && !$disabled) {\n\t$captcha = 1;\n\t$captcha_refresh = img_picto($langs->trans(\"Refresh\"), 'refresh', 'id=\"captcha_refresh_img\"');\n}\n\n// Execute hook getPasswordForgottenPageOptions (for table)\n$parameters = array('entity' => GETPOST('entity', 'int'));\n$hookmanager->executeHooks('getPasswordForgottenPageOptions', $parameters); // Note that $action and $object may have been modified by some hooks\nif (is_array($hookmanager->resArray) && !empty($hookmanager->resArray)) {\n\t$morelogincontent = $hookmanager->resArray; // (deprecated) For compatibility\n} else {\n\t$morelogincontent = $hookmanager->resPrint;\n}\n\n// Execute hook getPasswordForgottenPageExtraOptions (eg for js)\n$parameters = array('entity' => GETPOST('entity', 'int'));\n$reshook = $hookmanager->executeHooks('getPasswordForgottenPageExtraOptions', $parameters); // Note that $action and $object may have been modified by some hooks.\n$moreloginextracontent = $hookmanager->resPrint;\n\ninclude $template_dir.'passwordforgotten.tpl.php'; // To use native PHP\n"], "fixing_code": ["<?php\n/* Copyright (C) 2007-2011\tLaurent Destailleur\t<eldy@users.sourceforge.net>\n * Copyright (C) 2008-2012\tRegis Houssin\t\t<regis.houssin@inodbox.com>\n * Copyright (C) 2008-2011\tJuanjo Menent\t\t<jmenent@2byte.es>\n * Copyright (C) 2014       Teddy Andreotti    \t<125155@supinfo.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/passwordforgotten.php\n *       \\brief      Page to ask a new password\n */\n\ndefine(\"NOLOGIN\", 1); // This means this output page does not require to be logged.\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/usergroups.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\nif (!empty($conf->ldap->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/ldap.class.php';\n}\n\n// Load translation files required by page\n$langs->loadLangs(array('errors', 'users', 'companies', 'ldap', 'other'));\n\n// Security check\nif (!empty($conf->global->MAIN_SECURITY_DISABLEFORGETPASSLINK)) {\n\theader(\"Location: \".DOL_URL_ROOT.'/');\n\texit;\n}\n\n$action = GETPOST('action', 'aZ09');\n$mode = $dolibarr_main_authentication;\nif (!$mode) {\n\t$mode = 'http';\n}\n\n$username = GETPOST('username', 'alphanohtml');\n$passworduidhash = GETPOST('passworduidhash', 'alpha');\n$conf->entity = (GETPOST('entity', 'int') ? GETPOST('entity', 'int') : 1);\n\n// Instantiate hooks of thirdparty module only if not already define\n$hookmanager->initHooks(array('passwordforgottenpage'));\n\n\nif (GETPOST('dol_hide_leftmenu', 'alpha') || !empty($_SESSION['dol_hide_leftmenu'])) {\n\t$conf->dol_hide_leftmenu = 1;\n}\nif (GETPOST('dol_hide_topmenu', 'alpha') || !empty($_SESSION['dol_hide_topmenu'])) {\n\t$conf->dol_hide_topmenu = 1;\n}\nif (GETPOST('dol_optimize_smallscreen', 'alpha') || !empty($_SESSION['dol_optimize_smallscreen'])) {\n\t$conf->dol_optimize_smallscreen = 1;\n}\nif (GETPOST('dol_no_mouse_hover', 'alpha') || !empty($_SESSION['dol_no_mouse_hover'])) {\n\t$conf->dol_no_mouse_hover = 1;\n}\nif (GETPOST('dol_use_jmobile', 'alpha') || !empty($_SESSION['dol_use_jmobile'])) {\n\t$conf->dol_use_jmobile = 1;\n}\n\n\n/**\n * Actions\n */\n\n$parameters = array('username' => $username);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\t$message = $hookmanager->error;\n}\n\nif (empty($reshook)) {\n\t// Validate new password\n\tif ($action == 'validatenewpassword' && $username && $passworduidhash) {\n\t\t$edituser = new User($db);\n\t\t$result = $edituser->fetch('', $username);\n\t\tif ($result < 0) {\n\t\t\t$message = '<div class=\"error\">'.dol_escape_htmltag($langs->trans(\"ErrorLoginDoesNotExists\", $username)).'</div>';\n\t\t} else {\n\t\t\tglobal $dolibarr_main_instance_unique_id;\n\n\t\t\t//print $edituser->pass_temp.'-'.$edituser->id.'-'.$dolibarr_main_instance_unique_id.' '.$passworduidhash;\n\t\t\tif ($edituser->pass_temp && dol_verifyHash($edituser->pass_temp.'-'.$edituser->id.'-'.$dolibarr_main_instance_unique_id, $passworduidhash)) {\n\t\t\t\t// Clear session\n\t\t\t\tunset($_SESSION['dol_login']);\n\t\t\t\t$_SESSION['dol_loginmesg'] = $langs->trans('NewPasswordValidated'); // Save message for the session page\n\n\t\t\t\t$newpassword = $edituser->setPassword($user, $edituser->pass_temp, 0);\n\t\t\t\tdol_syslog(\"passwordforgotten.php new password for user->id=\".$edituser->id.\" validated in database\");\n\n\t\t\t\theader(\"Location: \".DOL_URL_ROOT.'/');\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorFailedToValidatePasswordReset\").'</div>';\n\t\t\t}\n\t\t}\n\t}\n\t// Action modif mot de passe\n\tif ($action == 'buildnewpassword' && $username) {\n\t\t$sessionkey = 'dol_antispam_value';\n\t\t$ok = (array_key_exists($sessionkey, $_SESSION) === true && (strtolower($_SESSION[$sessionkey]) == strtolower($_POST['code'])));\n\n\t\t// Verify code\n\t\tif (!$ok) {\n\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorBadValueForCode\").'</div>';\n\t\t} else {\n\t\t\t$isanemail = preg_match('/@/', $username);\n\n\t\t\t$edituser = new User($db);\n\t\t\t$result = $edituser->fetch('', $username, '', 1);\n\t\t\tif ($result == 0 && $isanemail) {\n\t\t\t\t$result = $edituser->fetch('', '', '', 1, -1, $username);\n\t\t\t}\n\n\t\t\tif ($result <= 0 && $edituser->error == 'USERNOTFOUND') {\n\t\t\t\t$message = '<div class=\"warning paddingtopbottom'.(empty($conf->global->MAIN_LOGIN_BACKGROUND) ? '' : ' backgroundsemitransparent').'\">';\n\t\t\t\tif (!$isanemail) {\n\t\t\t\t\t$message .= $langs->trans(\"IfLoginExistPasswordRequestSent\");\n\t\t\t\t} else {\n\t\t\t\t\t$message .= $langs->trans(\"IfEmailExistPasswordRequestSent\");\n\t\t\t\t}\n\t\t\t\t$message .= '</div>';\n\t\t\t\t$username = '';\n\t\t\t} else {\n\t\t\t\tif (!$edituser->email) {\n\t\t\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorLoginHasNoEmail\").'</div>';\n\t\t\t\t} else {\n\t\t\t\t\t$newpassword = $edituser->setPassword($user, '', 1);\n\t\t\t\t\tif ($newpassword < 0) {\n\t\t\t\t\t\t// Failed\n\t\t\t\t\t\t$message = '<div class=\"error\">'.$langs->trans(\"ErrorFailedToChangePassword\").'</div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Success\n\t\t\t\t\t\tif ($edituser->send_password($user, $newpassword, 1) > 0) {\n\t\t\t\t\t\t\t$message = '<div class=\"warning paddingtopbottom'.(empty($conf->global->MAIN_LOGIN_BACKGROUND) ? '' : ' backgroundsemitransparent').'\">';\n\t\t\t\t\t\t\tif (!$isanemail) {\n\t\t\t\t\t\t\t\t$message .= $langs->trans(\"IfLoginExistPasswordRequestSent\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$message .= $langs->trans(\"IfEmailExistPasswordRequestSent\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//$message .= $langs->trans(\"PasswordChangeRequestSent\", $edituser->login, dolObfuscateEmail($edituser->email));\n\t\t\t\t\t\t\t$message .= '</div>';\n\t\t\t\t\t\t\t$username = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$message .= '<div class=\"error\">'.$edituser->error.'</div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * View\n */\n\n$dol_url_root = DOL_URL_ROOT;\n\n// Title\n$title = 'Dolibarr '.DOL_VERSION;\nif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t$title = $conf->global->MAIN_APPLICATION_TITLE;\n}\n\n// Select templates\nif (file_exists(DOL_DOCUMENT_ROOT.\"/theme/\".$conf->theme.\"/tpl/passwordforgotten.tpl.php\")) {\n\t$template_dir = DOL_DOCUMENT_ROOT.\"/theme/\".$conf->theme.\"/tpl/\";\n} else {\n\t$template_dir = DOL_DOCUMENT_ROOT.\"/core/tpl/\";\n}\n\nif (!$username) {\n\t$focus_element = 'username';\n} else {\n\t$focus_element = 'password';\n}\n\n// Send password button enabled ?\n$disabled = 'disabled';\nif (preg_match('/dolibarr/i', $mode)) {\n\t$disabled = '';\n}\nif (!empty($conf->global->MAIN_SECURITY_ENABLE_SENDPASSWORD)) {\n\t$disabled = ''; // To force button enabled\n}\n\n// Show logo (search in order: small company logo, large company logo, theme logo, common logo)\n$width = 0;\n$rowspan = 2;\n$urllogo = DOL_URL_ROOT.'/theme/common/login_logo.png';\nif (!empty($mysoc->logo_small) && is_readable($conf->mycompany->dir_output.'/logos/thumbs/'.$mysoc->logo_small)) {\n\t$urllogo = DOL_URL_ROOT.'/viewimage.php?cache=1&amp;modulepart=mycompany&amp;file='.urlencode('logos/thumbs/'.$mysoc->logo_small);\n} elseif (!empty($mysoc->logo_small) && is_readable($conf->mycompany->dir_output.'/logos/'.$mysoc->logo)) {\n\t$urllogo = DOL_URL_ROOT.'/viewimage.php?cache=1&amp;modulepart=mycompany&amp;file='.urlencode('logos/'.$mysoc->logo);\n\t$width = 128;\n} elseif (is_readable(DOL_DOCUMENT_ROOT.'/theme/'.$conf->theme.'/img/dolibarr_logo.svg')) {\n\t$urllogo = DOL_URL_ROOT.'/theme/'.$conf->theme.'/img/dolibarr_logo.svg';\n} elseif (is_readable(DOL_DOCUMENT_ROOT.'/theme/dolibarr_logo.svg')) {\n\t$urllogo = DOL_URL_ROOT.'/theme/dolibarr_logo.svg';\n}\n\n// Security graphical code\nif (function_exists(\"imagecreatefrompng\") && !$disabled) {\n\t$captcha = 1;\n\t$captcha_refresh = img_picto($langs->trans(\"Refresh\"), 'refresh', 'id=\"captcha_refresh_img\"');\n}\n\n// Execute hook getPasswordForgottenPageOptions (for table)\n$parameters = array('entity' => GETPOST('entity', 'int'));\n$hookmanager->executeHooks('getPasswordForgottenPageOptions', $parameters); // Note that $action and $object may have been modified by some hooks\nif (is_array($hookmanager->resArray) && !empty($hookmanager->resArray)) {\n\t$morelogincontent = $hookmanager->resArray; // (deprecated) For compatibility\n} else {\n\t$morelogincontent = $hookmanager->resPrint;\n}\n\n// Execute hook getPasswordForgottenPageExtraOptions (eg for js)\n$parameters = array('entity' => GETPOST('entity', 'int'));\n$reshook = $hookmanager->executeHooks('getPasswordForgottenPageExtraOptions', $parameters); // Note that $action and $object may have been modified by some hooks.\n$moreloginextracontent = $hookmanager->resPrint;\n\ninclude $template_dir.'passwordforgotten.tpl.php'; // To use native PHP\n"], "filenames": ["htdocs/user/passwordforgotten.php"], "buggy_code_start_loc": [90], "buggy_code_end_loc": [98], "fixing_code_start_loc": [90], "fixing_code_end_loc": [98], "type": "CWE-640", "message": "In \u201cDolibarr\u201d application, v2.8.1 to v13.0.2 are vulnerable to account takeover via password reset functionality. A low privileged attacker can reset the password of any user in the application using the password reset link the user received through email when requested for a forgotten password.", "other": {"cve": {"id": "CVE-2021-25957", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-08-17T15:15:08.040", "lastModified": "2021-08-24T20:49:40.680", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In \u201cDolibarr\u201d application, v2.8.1 to v13.0.2 are vulnerable to account takeover via password reset functionality. A low privileged attacker can reset the password of any user in the application using the password reset link the user received through email when requested for a forgotten password."}, {"lang": "es", "value": "En la aplicaci\u00f3n \"Dolibarr\", versiones v2.8.1 a v13.0.2, son vulnerables a la toma de cuenta por medio de la funcionalidad password reset. Un atacante poco privilegiado puede restablecer la contrase\u00f1a de cualquier usuario de la aplicaci\u00f3n usando el enlace de restablecimiento de contrase\u00f1a que el usuario recibi\u00f3 mediante correo electr\u00f3nico cuando se le solicit\u00f3 una contrase\u00f1a olvidada."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-640"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-640"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.8.1", "versionEndIncluding": "13.0.2", "matchCriteriaId": "730BE634-E4DD-4AC7-89A0-74ED7ED1EB2D"}]}]}], "references": [{"url": "https://github.com/Dolibarr/dolibarr/commit/87f9530272925f0d651f59337a35661faeb6f377", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25957", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/87f9530272925f0d651f59337a35661faeb6f377"}}