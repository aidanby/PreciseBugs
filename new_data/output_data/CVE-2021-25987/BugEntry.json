{"buggy_code": ["'use strict';\n\nconst { url_for } = require('hexo-util');\n\nfunction listTagsHelper(tags, options) {\n  if (!options && (!tags || !Object.prototype.hasOwnProperty.call(tags, 'length'))) {\n    options = tags;\n    tags = this.site.tags;\n  }\n\n  if (!tags || !tags.length) return '';\n  options = options || {};\n\n  const { style = 'list', transform, separator = ', ', suffix = '' } = options;\n  const showCount = Object.prototype.hasOwnProperty.call(options, 'show_count') ? options.show_count : true;\n  const classStyle = typeof style === 'string' ? `-${style}` : '';\n  let className, ulClass, liClass, aClass, labelClass, countClass, labelSpan;\n  if (typeof options.class !== 'undefined') {\n    if (typeof options.class === 'string') {\n      className = options.class;\n    } else {\n      className = 'tag';\n    }\n\n    ulClass = options.class.ul || `${className}${classStyle}`;\n    liClass = options.class.li || `${className}${classStyle}-item`;\n    aClass = options.class.a || `${className}${classStyle}-link`;\n    labelClass = options.class.label || `${className}${classStyle}-label`;\n    countClass = options.class.count || `${className}${classStyle}-count`;\n\n    labelSpan = Object.prototype.hasOwnProperty.call(options.class, 'label');\n  } else {\n    className = 'tag';\n    ulClass = `${className}${classStyle}`;\n    liClass = `${className}${classStyle}-item`;\n    aClass = `${className}${classStyle}-link`;\n    labelClass = `${className}${classStyle}-label`;\n    countClass = `${className}${classStyle}-count`;\n\n    labelSpan = false;\n  }\n  const orderby = options.orderby || 'name';\n  const order = options.order || 1;\n  let result = '';\n\n  // Sort the tags\n  tags = tags.sort(orderby, order);\n\n  // Ignore tags with zero posts\n  tags = tags.filter(tag => tag.length);\n\n  // Limit the number of tags\n  if (options.amount) tags = tags.limit(options.amount);\n\n  if (style === 'list') {\n    result += `<ul class=\"${ulClass}\" itemprop=\"keywords\">`;\n\n    tags.forEach(tag => {\n      result += `<li class=\"${liClass}\">`;\n\n      result += `<a class=\"${aClass}\" href=\"${url_for.call(this, tag.path)}${suffix}\" rel=\"tag\">`;\n      result += transform ? transform(tag.name) : tag.name;\n      result += '</a>';\n\n      if (showCount) {\n        result += `<span class=\"${countClass}\">${tag.length}</span>`;\n      }\n\n      result += '</li>';\n    });\n\n    result += '</ul>';\n  } else {\n    tags.forEach((tag, i) => {\n      if (i) result += separator;\n\n      result += `<a class=\"${aClass}\" href=\"${url_for.call(this, tag.path)}${suffix}\" rel=\"tag\">`;\n      if (labelSpan) {\n        result += `<span class=\"${labelClass}\">${transform ? transform(tag.name) : tag.name}</span>`;\n      } else {\n        result += transform ? transform(tag.name) : tag.name;\n      }\n\n      if (showCount) {\n        result += `<span class=\"${countClass}\">${tag.length}</span>`;\n      }\n\n      result += '</a>';\n    });\n  }\n\n  return result;\n}\n\nmodule.exports = listTagsHelper;\n", "'use strict';\n\ndescribe('list_tags', () => {\n  const Hexo = require('../../../lib/hexo');\n  const hexo = new Hexo(__dirname);\n  const Post = hexo.model('Post');\n  const Tag = hexo.model('Tag');\n\n  const ctx = {\n    config: hexo.config\n  };\n\n  const listTags = require('../../../lib/plugins/helper/list_tags').bind(ctx);\n\n  before(async () => {\n    await hexo.init();\n    const posts = await Post.insert([\n      {source: 'foo', slug: 'foo'},\n      {source: 'bar', slug: 'bar'},\n      {source: 'baz', slug: 'baz'},\n      {source: 'boo', slug: 'boo'}\n    ]);\n    // TODO: Warehouse needs to add a mutex lock when writing data to avoid data sync problem\n    await Promise.all([\n      ['foo'],\n      ['baz'],\n      ['baz'],\n      ['bar']\n    ].map((tags, i) => posts[i].setTags(tags)));\n\n    hexo.locals.invalidate();\n    ctx.site = hexo.locals.toObject();\n  });\n\n  it('default', () => {\n    const result = listTags();\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"tag-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('specified collection', () => {\n    const result = listTags(Tag.find({\n      name: /^b/\n    }));\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('style: false', () => {\n    const result = listTags({\n      style: false\n    });\n\n    result.should.eql([\n      '<a class=\"tag-link\" href=\"/tags/bar/\" rel=\"tag\">bar<span class=\"tag-count\">1</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/baz/\" rel=\"tag\">baz<span class=\"tag-count\">2</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/foo/\" rel=\"tag\">foo<span class=\"tag-count\">1</span></a>'\n    ].join(', '));\n  });\n\n  it('show_count: false', () => {\n    const result = listTags({\n      show_count: false\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('class', () => {\n    const result = listTags({\n      class: 'test'\n    });\n\n    result.should.eql([\n      '<ul class=\"test-list\" itemprop=\"keywords\">',\n      '<li class=\"test-list-item\"><a class=\"test-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"test-list-count\">1</span></li>',\n      '<li class=\"test-list-item\"><a class=\"test-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"test-list-count\">2</span></li>',\n      '<li class=\"test-list-item\"><a class=\"test-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"test-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('custom class', () => {\n    const result = listTags({\n      class: {\n        ul: 'lorem',\n        li: 'ipsum',\n        a: 'tempor',\n        count: 'dolor'\n      }\n    });\n\n    result.should.eql([\n      '<ul class=\"lorem\" itemprop=\"keywords\">',\n      '<li class=\"ipsum\"><a class=\"tempor\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"dolor\">1</span></li>',\n      '<li class=\"ipsum\"><a class=\"tempor\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"dolor\">2</span></li>',\n      '<li class=\"ipsum\"><a class=\"tempor\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"dolor\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('custom class not list', () => {\n    const result = listTags({\n      style: false,\n      show_count: true,\n      separator: '',\n      class: {\n        a: 'tempor',\n        label: 'lorem',\n        count: 'dolor'\n      }\n    });\n\n    result.should.eql([\n      '<a class=\"tempor\" href=\"/tags/bar/\" rel=\"tag\"><span class=\"lorem\">bar</span><span class=\"dolor\">1</span></a>',\n      '<a class=\"tempor\" href=\"/tags/baz/\" rel=\"tag\"><span class=\"lorem\">baz</span><span class=\"dolor\">2</span></a>',\n      '<a class=\"tempor\" href=\"/tags/foo/\" rel=\"tag\"><span class=\"lorem\">foo</span><span class=\"dolor\">1</span></a>'\n    ].join(''));\n  });\n\n  it('orderby', () => {\n    const result = listTags({\n      orderby: 'length'\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('order', () => {\n    const result = listTags({\n      order: -1\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('transform', () => {\n    const result = listTags({\n      transform(name) {\n        return name.toUpperCase();\n      }\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">BAR</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">BAZ</a><span class=\"tag-list-count\">2</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">FOO</a><span class=\"tag-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('separator', () => {\n    const result = listTags({\n      style: false,\n      separator: ''\n    });\n\n    result.should.eql([\n      '<a class=\"tag-link\" href=\"/tags/bar/\" rel=\"tag\">bar<span class=\"tag-count\">1</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/baz/\" rel=\"tag\">baz<span class=\"tag-count\">2</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/foo/\" rel=\"tag\">foo<span class=\"tag-count\">1</span></a>'\n    ].join(''));\n  });\n\n  it('amount', () => {\n    const result = listTags({\n      amount: 2\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n});\n"], "fixing_code": ["'use strict';\n\nconst { url_for, escapeHTML } = require('hexo-util');\n\nfunction listTagsHelper(tags, options) {\n  if (!options && (!tags || !Object.prototype.hasOwnProperty.call(tags, 'length'))) {\n    options = tags;\n    tags = this.site.tags;\n  }\n\n  if (!tags || !tags.length) return '';\n  options = options || {};\n\n  const { style = 'list', transform, separator = ', ', suffix = '' } = options;\n  const showCount = Object.prototype.hasOwnProperty.call(options, 'show_count') ? options.show_count : true;\n  const classStyle = typeof style === 'string' ? `-${style}` : '';\n  let className, ulClass, liClass, aClass, labelClass, countClass, labelSpan;\n  if (typeof options.class !== 'undefined') {\n    if (typeof options.class === 'string') {\n      className = options.class;\n    } else {\n      className = 'tag';\n    }\n\n    ulClass = options.class.ul || `${className}${classStyle}`;\n    liClass = options.class.li || `${className}${classStyle}-item`;\n    aClass = options.class.a || `${className}${classStyle}-link`;\n    labelClass = options.class.label || `${className}${classStyle}-label`;\n    countClass = options.class.count || `${className}${classStyle}-count`;\n\n    labelSpan = Object.prototype.hasOwnProperty.call(options.class, 'label');\n  } else {\n    className = 'tag';\n    ulClass = `${className}${classStyle}`;\n    liClass = `${className}${classStyle}-item`;\n    aClass = `${className}${classStyle}-link`;\n    labelClass = `${className}${classStyle}-label`;\n    countClass = `${className}${classStyle}-count`;\n\n    labelSpan = false;\n  }\n  const orderby = options.orderby || 'name';\n  const order = options.order || 1;\n  let result = '';\n\n  // Sort the tags\n  tags = tags.sort(orderby, order);\n\n  // Ignore tags with zero posts\n  tags = tags.filter(tag => tag.length);\n\n  // Limit the number of tags\n  if (options.amount) tags = tags.limit(options.amount);\n\n  if (style === 'list') {\n    result += `<ul class=\"${ulClass}\" itemprop=\"keywords\">`;\n\n    tags.forEach(tag => {\n      result += `<li class=\"${liClass}\">`;\n\n      result += `<a class=\"${aClass}\" href=\"${url_for.call(this, tag.path)}${suffix}\" rel=\"tag\">`;\n      result += transform ? transform(tag.name) : escapeHTML(tag.name);\n      result += '</a>';\n\n      if (showCount) {\n        result += `<span class=\"${countClass}\">${tag.length}</span>`;\n      }\n\n      result += '</li>';\n    });\n\n    result += '</ul>';\n  } else {\n    tags.forEach((tag, i) => {\n      if (i) result += separator;\n\n      result += `<a class=\"${aClass}\" href=\"${url_for.call(this, tag.path)}${suffix}\" rel=\"tag\">`;\n      if (labelSpan) {\n        result += `<span class=\"${labelClass}\">${transform ? transform(tag.name) : tag.name}</span>`;\n      } else {\n        result += transform ? transform(tag.name) : tag.name;\n      }\n\n      if (showCount) {\n        result += `<span class=\"${countClass}\">${tag.length}</span>`;\n      }\n\n      result += '</a>';\n    });\n  }\n\n  return result;\n}\n\nmodule.exports = listTagsHelper;\n", "'use strict';\n\ndescribe('list_tags', () => {\n  const Hexo = require('../../../lib/hexo');\n  const hexo = new Hexo(__dirname);\n  const Post = hexo.model('Post');\n  const Tag = hexo.model('Tag');\n\n  const ctx = {\n    config: hexo.config\n  };\n\n  const listTags = require('../../../lib/plugins/helper/list_tags').bind(ctx);\n\n  before(async () => {\n    await hexo.init();\n    const posts = await Post.insert([\n      {source: 'foo', slug: 'foo'},\n      {source: 'bar', slug: 'bar'},\n      {source: 'baz', slug: 'baz'},\n      {source: 'boo', slug: 'boo'}\n    ]);\n    // TODO: Warehouse needs to add a mutex lock when writing data to avoid data sync problem\n    await Promise.all([\n      ['foo'],\n      ['baz'],\n      ['baz'],\n      ['bar']\n    ].map((tags, i) => posts[i].setTags(tags)));\n\n    hexo.locals.invalidate();\n    ctx.site = hexo.locals.toObject();\n  });\n\n  it('default', () => {\n    const result = listTags();\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"tag-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('specified collection', () => {\n    const result = listTags(Tag.find({\n      name: /^b/\n    }));\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('style: false', () => {\n    const result = listTags({\n      style: false\n    });\n\n    result.should.eql([\n      '<a class=\"tag-link\" href=\"/tags/bar/\" rel=\"tag\">bar<span class=\"tag-count\">1</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/baz/\" rel=\"tag\">baz<span class=\"tag-count\">2</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/foo/\" rel=\"tag\">foo<span class=\"tag-count\">1</span></a>'\n    ].join(', '));\n  });\n\n  it('show_count: false', () => {\n    const result = listTags({\n      show_count: false\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('class', () => {\n    const result = listTags({\n      class: 'test'\n    });\n\n    result.should.eql([\n      '<ul class=\"test-list\" itemprop=\"keywords\">',\n      '<li class=\"test-list-item\"><a class=\"test-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"test-list-count\">1</span></li>',\n      '<li class=\"test-list-item\"><a class=\"test-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"test-list-count\">2</span></li>',\n      '<li class=\"test-list-item\"><a class=\"test-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"test-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('custom class', () => {\n    const result = listTags({\n      class: {\n        ul: 'lorem',\n        li: 'ipsum',\n        a: 'tempor',\n        count: 'dolor'\n      }\n    });\n\n    result.should.eql([\n      '<ul class=\"lorem\" itemprop=\"keywords\">',\n      '<li class=\"ipsum\"><a class=\"tempor\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"dolor\">1</span></li>',\n      '<li class=\"ipsum\"><a class=\"tempor\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"dolor\">2</span></li>',\n      '<li class=\"ipsum\"><a class=\"tempor\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"dolor\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('custom class not list', () => {\n    const result = listTags({\n      style: false,\n      show_count: true,\n      separator: '',\n      class: {\n        a: 'tempor',\n        label: 'lorem',\n        count: 'dolor'\n      }\n    });\n\n    result.should.eql([\n      '<a class=\"tempor\" href=\"/tags/bar/\" rel=\"tag\"><span class=\"lorem\">bar</span><span class=\"dolor\">1</span></a>',\n      '<a class=\"tempor\" href=\"/tags/baz/\" rel=\"tag\"><span class=\"lorem\">baz</span><span class=\"dolor\">2</span></a>',\n      '<a class=\"tempor\" href=\"/tags/foo/\" rel=\"tag\"><span class=\"lorem\">foo</span><span class=\"dolor\">1</span></a>'\n    ].join(''));\n  });\n\n  it('orderby', () => {\n    const result = listTags({\n      orderby: 'length'\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('order', () => {\n    const result = listTags({\n      order: -1\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">foo</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('transform', () => {\n    const result = listTags({\n      transform(name) {\n        return name.toUpperCase();\n      }\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">BAR</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">BAZ</a><span class=\"tag-list-count\">2</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/foo/\" rel=\"tag\">FOO</a><span class=\"tag-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n\n  it('separator', () => {\n    const result = listTags({\n      style: false,\n      separator: ''\n    });\n\n    result.should.eql([\n      '<a class=\"tag-link\" href=\"/tags/bar/\" rel=\"tag\">bar<span class=\"tag-count\">1</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/baz/\" rel=\"tag\">baz<span class=\"tag-count\">2</span></a>',\n      '<a class=\"tag-link\" href=\"/tags/foo/\" rel=\"tag\">foo<span class=\"tag-count\">1</span></a>'\n    ].join(''));\n  });\n\n  it('amount', () => {\n    const result = listTags({\n      amount: 2\n    });\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bar/\" rel=\"tag\">bar</a><span class=\"tag-list-count\">1</span></li>',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/baz/\" rel=\"tag\">baz</a><span class=\"tag-list-count\">2</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n});\n\ndescribe('list_tags transform', () => {\n  const Hexo = require('../../../lib/hexo');\n  const hexo = new Hexo(__dirname);\n  const Post = hexo.model('Post');\n\n  const ctx = {\n    config: hexo.config\n  };\n\n  const listTags = require('../../../lib/plugins/helper/list_tags').bind(ctx);\n\n  before(async () => {\n    await hexo.init();\n    const posts = await Post.insert([\n      {source: 'foo', slug: 'foo'}\n    ]);\n\n    // TODO: Warehouse needs to add a mutex lock when writing data to avoid data sync problem\n    await Promise.all([\n      ['bad<b>HTML</b>']\n    ].map((tags, i) => posts[i].setTags(tags)));\n\n    hexo.locals.invalidate();\n    ctx.site = hexo.locals.toObject();\n  });\n\n  // no transform should escape HTML\n  it('no transform', () => {\n    const result = listTags();\n\n    result.should.eql([\n      '<ul class=\"tag-list\" itemprop=\"keywords\">',\n      '<li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/bad-b-HTML-b/\" rel=\"tag\">bad&lt;b&gt;HTML&lt;&#x2F;b&gt;</a><span class=\"tag-list-count\">1</span></li>',\n      '</ul>'\n    ].join(''));\n  });\n});\n"], "filenames": ["lib/plugins/helper/list_tags.js", "test/scripts/helpers/list_tags.js"], "buggy_code_start_loc": [3, 207], "buggy_code_end_loc": [63, 207], "fixing_code_start_loc": [3, 208], "fixing_code_end_loc": [63, 246], "type": "CWE-79", "message": "Hexo versions 0.0.1 to 5.4.0 are vulnerable against stored XSS. The post \u201cbody\u201d and \u201ctags\u201d don\u2019t sanitize malicious javascript during web page generation. Local unprivileged attacker can inject arbitrary code.", "other": {"cve": {"id": "CVE-2021-25987", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-11-30T14:15:07.530", "lastModified": "2021-11-30T16:00:48.943", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Hexo versions 0.0.1 to 5.4.0 are vulnerable against stored XSS. The post \u201cbody\u201d and \u201ctags\u201d don\u2019t sanitize malicious javascript during web page generation. Local unprivileged attacker can inject arbitrary code."}, {"lang": "es", "value": "Hexo versiones 0.0.1 a 5.4.0, son vulnerables a un ataque de tipo XSS almacenado. Los post \"body\" y \"tags\" no sanean el javascript malicioso durante la generaci\u00f3n de la p\u00e1gina web. Un atacante local no privilegiado puede inyectar c\u00f3digo arbitrario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.5, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 1.9}, "baseSeverity": "LOW", "exploitabilityScore": 3.4, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hexo:hexo:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "0.0.1", "versionEndIncluding": "5.4.0", "matchCriteriaId": "2C801F4C-6A2C-4D13-AF6C-9F0490FBEA8B"}]}]}], "references": [{"url": "https://github.com/hexojs/hexo/commit/5170df2d3fa9c69e855c4b7c2b084ebfd92d5200", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25987", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hexojs/hexo/commit/5170df2d3fa9c69e855c4b7c2b084ebfd92d5200"}}