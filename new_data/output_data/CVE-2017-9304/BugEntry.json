{"buggy_code": ["/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef YR_LIMITS_H\n#define YR_LIMITS_H\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n#include <windows.h>\n#endif\n\n#include \"utils.h\"\n\n// MAX_THREADS is the number of threads that can use a YR_RULES\n// object simultaneously.\n\n#ifndef MAX_THREADS\n#define MAX_THREADS 32\n#endif\n\n\n#ifndef MAX_PATH\n#define MAX_PATH 1024\n#endif\n\n#define MAX_COMPILER_ERROR_EXTRA_INFO   256\n#define MAX_ATOM_LENGTH                 4\n#define MAX_LOOP_NESTING                4\n#define MAX_ARENA_PAGES                 32\n#define MAX_INCLUDE_DEPTH               16\n#define MAX_STRING_MATCHES              1000000\n#define MAX_FUNCTION_ARGS               128\n#define MAX_FAST_RE_STACK               300\n#define MAX_OVERLOADED_FUNCTIONS        10\n#define MAX_HEX_STRING_TOKENS           10000\n#define MAX_MATCH_DATA                  4096\n\n#define LOOP_LOCAL_VARS                 4\n#define STRING_CHAINING_THRESHOLD       200\n#define LEX_BUF_SIZE                    8192\n\n\n#endif\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef YR_RE_H\n#define YR_RE_H\n\n#include <ctype.h>\n\n#include <yara/arena.h>\n#include <yara/sizedstr.h>\n\n#define RE_NODE_LITERAL             1\n#define RE_NODE_MASKED_LITERAL      2\n#define RE_NODE_ANY                 3\n#define RE_NODE_CONCAT              4\n#define RE_NODE_ALT                 5\n#define RE_NODE_RANGE               6\n#define RE_NODE_STAR                7\n#define RE_NODE_PLUS                8\n#define RE_NODE_CLASS               9\n#define RE_NODE_WORD_CHAR           10\n#define RE_NODE_NON_WORD_CHAR       11\n#define RE_NODE_SPACE               12\n#define RE_NODE_NON_SPACE           13\n#define RE_NODE_DIGIT               14\n#define RE_NODE_NON_DIGIT           15\n#define RE_NODE_EMPTY               16\n#define RE_NODE_ANCHOR_START        17\n#define RE_NODE_ANCHOR_END          18\n#define RE_NODE_WORD_BOUNDARY       19\n#define RE_NODE_NON_WORD_BOUNDARY   20\n#define RE_NODE_RANGE_ANY           21\n\n\n#define RE_OPCODE_ANY                   0xA0\n#define RE_OPCODE_ANY_EXCEPT_NEW_LINE   0xA1\n#define RE_OPCODE_LITERAL               0xA2\n#define RE_OPCODE_MASKED_LITERAL        0xA4\n#define RE_OPCODE_CLASS                 0xA5\n#define RE_OPCODE_WORD_CHAR             0xA7\n#define RE_OPCODE_NON_WORD_CHAR         0xA8\n#define RE_OPCODE_SPACE                 0xA9\n#define RE_OPCODE_NON_SPACE             0xAA\n#define RE_OPCODE_DIGIT                 0xAB\n#define RE_OPCODE_NON_DIGIT             0xAC\n#define RE_OPCODE_MATCH                 0xAD\n\n#define RE_OPCODE_MATCH_AT_END          0xB0\n#define RE_OPCODE_MATCH_AT_START        0xB1\n#define RE_OPCODE_WORD_BOUNDARY         0xB2\n#define RE_OPCODE_NON_WORD_BOUNDARY     0xB3\n#define RE_OPCODE_REPEAT_ANY_GREEDY     0xB4\n#define RE_OPCODE_REPEAT_ANY_UNGREEDY   0xB5\n\n#define RE_OPCODE_SPLIT_A               0xC0\n#define RE_OPCODE_SPLIT_B               0xC1\n#define RE_OPCODE_JUMP                  0xC2\n#define RE_OPCODE_REPEAT_START_GREEDY   0xC3\n#define RE_OPCODE_REPEAT_END_GREEDY     0xC4\n#define RE_OPCODE_REPEAT_START_UNGREEDY 0xC5\n#define RE_OPCODE_REPEAT_END_UNGREEDY   0xC6\n\n\n#define RE_FLAGS_FAST_REGEXP            0x02\n#define RE_FLAGS_BACKWARDS              0x04\n#define RE_FLAGS_EXHAUSTIVE             0x08\n#define RE_FLAGS_WIDE                   0x10\n#define RE_FLAGS_NO_CASE                0x20\n#define RE_FLAGS_SCAN                   0x40\n#define RE_FLAGS_DOT_ALL                0x80\n#define RE_FLAGS_GREEDY                0x400\n#define RE_FLAGS_UNGREEDY              0x800\n\n\ntypedef struct RE RE;\ntypedef struct RE_AST RE_AST;\ntypedef struct RE_NODE RE_NODE;\ntypedef struct RE_ERROR RE_ERROR;\n\ntypedef uint8_t RE_SPLIT_ID_TYPE;\n\n\nstruct RE_NODE\n{\n  int type;\n\n  union {\n    int value;\n    int count;\n    int start;\n  };\n\n  union {\n    int mask;\n    int end;\n  };\n\n  int greedy;\n\n  uint8_t* class_vector;\n\n  RE_NODE* left;\n  RE_NODE* right;\n\n  uint8_t* forward_code;\n  uint8_t* backward_code;\n};\n\n\nstruct RE_AST\n{\n  uint32_t flags;\n  RE_NODE* root_node;\n};\n\n\n// Disable warning due to zero length array in Microsoft's compiler\n\n#ifdef _MSC_VER\n#pragma warning(push)\n#pragma warning(disable:4200)\n#endif\n\nstruct RE\n{\n  uint32_t flags;\n  uint8_t code[0];\n};\n\n#ifdef _MSC_VER\n#pragma warning(pop)\n#endif\n\n\nstruct RE_ERROR\n{\n  char message[512];\n};\n\n\ntypedef int RE_MATCH_CALLBACK_FUNC(\n    uint8_t* match,\n    int match_length,\n    int flags,\n    void* args);\n\n\nint yr_re_ast_create(\n    RE_AST** re_ast);\n\nvoid yr_re_ast_destroy(\n    RE_AST* re_ast);\n\nvoid yr_re_ast_print(\n    RE_AST* re_ast);\n\nSIZED_STRING* yr_re_ast_extract_literal(\n    RE_AST* re_ast);\n\n\nint yr_re_ast_contains_dot_star(\n    RE_AST* re_ast);\n\n\nint yr_re_ast_split_at_chaining_point(\n    RE_AST* re_ast,\n    RE_AST** result_re_ast,\n    RE_AST** remainder_re_ast,\n    int32_t* min_gap,\n    int32_t* max_gap);\n\n\nint yr_re_ast_emit_code(\n    RE_AST* re_ast,\n    YR_ARENA* arena,\n    int backwards_code);\n\n\nRE_NODE* yr_re_node_create(\n    int type,\n    RE_NODE* left,\n    RE_NODE* right);\n\n\nvoid yr_re_node_destroy(\n    RE_NODE* node);\n\n\nint yr_re_exec(\n    uint8_t* re_code,\n    uint8_t* input,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches);\n\n\nint yr_re_fast_exec(\n    uint8_t* code,\n    uint8_t* input_data,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches);\n\n\nint yr_re_parse(\n    const char* re_string,\n    RE_AST** re_ast,\n    RE_ERROR* error);\n\n\nint yr_re_parse_hex(\n    const char* hex_string,\n    RE_AST** re_ast,\n    RE_ERROR* error);\n\n\nint yr_re_compile(\n    const char* re_string,\n    int flags,\n    YR_ARENA* code_arena,\n    RE** re,\n    RE_ERROR* error);\n\n\nint yr_re_match(\n    RE* re,\n    const char* target);\n\n\nint yr_re_initialize(void);\n\n\nint yr_re_finalize(void);\n\n\nint yr_re_finalize_thread(void);\n\n#endif\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\n/*\n\nThis module implements a regular expressions engine based on Thompson's\nalgorithm as described by Russ Cox in http://swtch.com/~rsc/regexp/regexp2.html.\n\nWhat the article names a \"thread\" has been named a \"fiber\" in this code, in\norder to avoid confusion with operating system threads.\n\n*/\n\n#include <assert.h>\n#include <string.h>\n#include <limits.h>\n\n#include <yara/limits.h>\n#include <yara/globals.h>\n#include <yara/utils.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/error.h>\n#include <yara/threading.h>\n#include <yara/re_lexer.h>\n#include <yara/hex_lexer.h>\n\n// Maximum allowed split ID, also limiting the number of split instructions\n// allowed in a regular expression. This number can't be increased\n// over 255 without changing RE_SPLIT_ID_TYPE.\n#define RE_MAX_SPLIT_ID     128\n\n// Maximum stack size for regexp evaluation\n#define RE_MAX_STACK      1024\n\n// Maximum code size for a compiled regexp\n#define RE_MAX_CODE_SIZE  32768\n\n// Maximum input size scanned by yr_re_exec\n#define RE_SCAN_LIMIT     4096\n\n// Maximum number of fibers\n#define RE_MAX_FIBERS     1024\n\n\n#define EMIT_BACKWARDS                  0x01\n#define EMIT_DONT_SET_FORWARDS_CODE     0x02\n#define EMIT_DONT_SET_BACKWARDS_CODE    0x04\n\n\ntypedef struct _RE_REPEAT_ARGS\n{\n  uint16_t  min;\n  uint16_t  max;\n  int32_t   offset;\n\n} RE_REPEAT_ARGS;\n\n\ntypedef struct _RE_REPEAT_ANY_ARGS\n{\n  uint16_t   min;\n  uint16_t   max;\n\n} RE_REPEAT_ANY_ARGS;\n\n\ntypedef struct _RE_EMIT_CONTEXT {\n\n  YR_ARENA*         arena;\n  RE_SPLIT_ID_TYPE  next_split_id;\n\n} RE_EMIT_CONTEXT;\n\n\ntypedef struct _RE_FIBER\n{\n  uint8_t* ip;    // instruction pointer\n  int32_t  sp;    // stack pointer\n  int32_t  rc;    // repeat counter\n\n  uint16_t stack[RE_MAX_STACK];\n\n  struct _RE_FIBER* prev;\n  struct _RE_FIBER* next;\n\n} RE_FIBER;\n\n\ntypedef struct _RE_FIBER_LIST\n{\n  RE_FIBER* head;\n  RE_FIBER* tail;\n\n} RE_FIBER_LIST;\n\n\ntypedef struct _RE_FIBER_POOL\n{\n  int fiber_count;\n  RE_FIBER_LIST fibers;\n\n} RE_FIBER_POOL;\n\n\ntypedef struct _RE_THREAD_STORAGE\n{\n  RE_FIBER_POOL fiber_pool;\n\n} RE_THREAD_STORAGE;\n\n\nYR_THREAD_STORAGE_KEY thread_storage_key = 0;\n\n\n#define CHAR_IN_CLASS(chr, cls)  \\\n    ((cls)[(chr) / 8] & 1 << ((chr) % 8))\n\n\nint _yr_re_is_word_char(\n    uint8_t* input,\n    uint8_t character_size)\n{\n  int result = ((isalnum(*input) || (*input) == '_'));\n\n  if (character_size == 2)\n    result = result && (*(input + 1) == 0);\n\n  return result;\n}\n\n\n\n//\n// yr_re_initialize\n//\n// Should be called by main thread before any other\n// function from this module.\n//\n\nint yr_re_initialize(void)\n{\n  return yr_thread_storage_create(&thread_storage_key);\n}\n\n//\n// yr_re_finalize\n//\n// Should be called by main thread after every other thread\n// stopped using functions from this module.\n//\n\nint yr_re_finalize(void)\n{\n  yr_thread_storage_destroy(&thread_storage_key);\n\n  thread_storage_key = 0;\n  return ERROR_SUCCESS;\n}\n\n//\n// yr_re_finalize_thread\n//\n// Should be called by every thread using this module\n// before exiting.\n//\n\nint yr_re_finalize_thread(void)\n{\n  RE_FIBER* fiber;\n  RE_FIBER* next_fiber;\n  RE_THREAD_STORAGE* storage;\n\n  if (thread_storage_key != 0)\n    storage = (RE_THREAD_STORAGE*) yr_thread_storage_get_value(\n        &thread_storage_key);\n  else\n    return ERROR_SUCCESS;\n\n  if (storage != NULL)\n  {\n    fiber = storage->fiber_pool.fibers.head;\n\n    while (fiber != NULL)\n    {\n      next_fiber = fiber->next;\n      yr_free(fiber);\n      fiber = next_fiber;\n    }\n\n    yr_free(storage);\n  }\n\n  return yr_thread_storage_set_value(&thread_storage_key, NULL);\n}\n\n\nRE_NODE* yr_re_node_create(\n    int type,\n    RE_NODE* left,\n    RE_NODE* right)\n{\n  RE_NODE* result = (RE_NODE*) yr_malloc(sizeof(RE_NODE));\n\n  if (result != NULL)\n  {\n    result->type = type;\n    result->left = left;\n    result->right = right;\n    result->greedy = TRUE;\n    result->forward_code = NULL;\n    result->backward_code = NULL;\n  }\n\n  return result;\n}\n\n\nvoid yr_re_node_destroy(\n    RE_NODE* node)\n{\n  if (node->left != NULL)\n    yr_re_node_destroy(node->left);\n\n  if (node->right != NULL)\n    yr_re_node_destroy(node->right);\n\n  if (node->type == RE_NODE_CLASS)\n    yr_free(node->class_vector);\n\n  yr_free(node);\n}\n\n\nint yr_re_ast_create(\n    RE_AST** re_ast)\n{\n  *re_ast = (RE_AST*) yr_malloc(sizeof(RE_AST));\n\n  if (*re_ast == NULL)\n    return ERROR_INSUFFICIENT_MEMORY;\n\n  (*re_ast)->flags = 0;\n  (*re_ast)->root_node = NULL;\n\n  return ERROR_SUCCESS;\n}\n\n\nvoid yr_re_ast_destroy(\n    RE_AST* re_ast)\n{\n  if (re_ast->root_node != NULL)\n    yr_re_node_destroy(re_ast->root_node);\n\n  yr_free(re_ast);\n}\n\n\n//\n// yr_re_parse\n//\n// Parses a regexp but don't emit its code. A further call to\n// yr_re_emit_code is required to get the code.\n//\n\nint yr_re_parse(\n    const char* re_string,\n    RE_AST** re_ast,\n    RE_ERROR* error)\n{\n  return yr_parse_re_string(re_string, re_ast, error);\n}\n\n\n//\n// yr_re_parse_hex\n//\n// Parses a hex string but don't emit its code. A further call to\n// yr_re_emit_code is required to get the code.\n//\n\nint yr_re_parse_hex(\n    const char* hex_string,\n    RE_AST** re_ast,\n    RE_ERROR* error)\n{\n  return yr_parse_hex_string(hex_string, re_ast, error);\n}\n\n\n//\n// yr_re_compile\n//\n// Parses the regexp and emit its code to the provided code_arena.\n//\n\nint yr_re_compile(\n    const char* re_string,\n    int flags,\n    YR_ARENA* code_arena,\n    RE** re,\n    RE_ERROR* error)\n{\n  RE_AST* re_ast;\n  RE _re;\n\n  FAIL_ON_ERROR(yr_arena_reserve_memory(\n      code_arena, sizeof(int64_t) + RE_MAX_CODE_SIZE));\n\n  FAIL_ON_ERROR(yr_re_parse(re_string, &re_ast, error));\n\n  _re.flags = flags;\n\n  FAIL_ON_ERROR_WITH_CLEANUP(\n      yr_arena_write_data(\n          code_arena,\n          &_re,\n          sizeof(_re),\n          (void**) re),\n      yr_re_ast_destroy(re_ast));\n\n  FAIL_ON_ERROR_WITH_CLEANUP(\n      yr_re_ast_emit_code(re_ast, code_arena, FALSE),\n      yr_re_ast_destroy(re_ast));\n\n  yr_re_ast_destroy(re_ast);\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// yr_re_match\n//\n// Verifies if the target string matches the pattern\n//\n// Args:\n//    RE* re          -  A pointer to a compiled regexp\n//    char* target    -  Target string\n//\n// Returns:\n//    See return codes for yr_re_exec\n\n\nint yr_re_match(\n    RE* re,\n    const char* target)\n{\n  int result;\n\n  yr_re_exec(\n      re->code,\n      (uint8_t*) target,\n      strlen(target),\n      0,\n      re->flags | RE_FLAGS_SCAN,\n      NULL,\n      NULL,\n      &result);\n\n  return result;\n}\n\n\n//\n// yr_re_ast_extract_literal\n//\n// Verifies if the provided regular expression is just a literal string\n// like \"abc\", \"12345\", without any wildcard, operator, etc. In that case\n// returns the string as a SIZED_STRING, or returns NULL if otherwise.\n//\n// The caller is responsible for deallocating the returned SIZED_STRING by\n// calling yr_free.\n//\n\nSIZED_STRING* yr_re_ast_extract_literal(\n    RE_AST* re_ast)\n{\n  SIZED_STRING* string;\n  RE_NODE* node = re_ast->root_node;\n\n  int i, length = 0;\n  char tmp;\n\n  while (node != NULL)\n  {\n    length++;\n\n    if (node->type == RE_NODE_LITERAL)\n      break;\n\n    if (node->type != RE_NODE_CONCAT)\n      return NULL;\n\n    if (node->right == NULL ||\n        node->right->type != RE_NODE_LITERAL)\n      return NULL;\n\n    node = node->left;\n  }\n\n  string = (SIZED_STRING*) yr_malloc(sizeof(SIZED_STRING) + length);\n\n  if (string == NULL)\n    return NULL;\n\n  string->length = 0;\n\n  node = re_ast->root_node;\n\n  while (node->type == RE_NODE_CONCAT)\n  {\n    string->c_string[string->length++] = node->right->value;\n    node = node->left;\n  }\n\n  string->c_string[string->length++] = node->value;\n\n  // The string ends up reversed. Reverse it back to its original value.\n\n  for (i = 0; i < length / 2; i++)\n  {\n    tmp = string->c_string[i];\n    string->c_string[i] = string->c_string[length - i - 1];\n    string->c_string[length - i - 1] = tmp;\n  }\n\n  return string;\n}\n\n\nint _yr_re_node_contains_dot_star(\n    RE_NODE* re_node)\n{\n  if (re_node->type == RE_NODE_STAR && re_node->left->type == RE_NODE_ANY)\n    return TRUE;\n\n  if (re_node->left != NULL && _yr_re_node_contains_dot_star(re_node->left))\n    return TRUE;\n\n  if (re_node->right != NULL && _yr_re_node_contains_dot_star(re_node->right))\n    return TRUE;\n\n  return FALSE;\n}\n\n\nint yr_re_ast_contains_dot_star(\n    RE_AST* re_ast)\n{\n  return _yr_re_node_contains_dot_star(re_ast->root_node);\n}\n\n\n//\n// yr_re_ast_split_at_chaining_point\n//\n// In some cases splitting a regular expression in two is more efficient that\n// having a single regular expression. This happens when the regular expression\n// contains a large repetition of any character, for example: /foo.{0,1000}bar/\n// In this case the regexp is split in /foo/ and /bar/ where /bar/ is \"chained\"\n// to /foo/. This means that /foo/ and /bar/ are handled as individual regexps\n// and when both matches YARA verifies if the distance between the matches\n// complies with the {0,1000} restriction.\n\n// This function traverses the regexp's tree looking for nodes where the regxp\n// should be split. It expects a left-unbalanced tree where the right child of\n// a RE_NODE_CONCAT can't be another RE_NODE_CONCAT. A RE_NODE_CONCAT must be\n// always the left child of its parent if the parent is also a RE_NODE_CONCAT.\n//\n\nint yr_re_ast_split_at_chaining_point(\n    RE_AST* re_ast,\n    RE_AST** result_re_ast,\n    RE_AST** remainder_re_ast,\n    int32_t* min_gap,\n    int32_t* max_gap)\n{\n  RE_NODE* node = re_ast->root_node;\n  RE_NODE* child = re_ast->root_node->left;\n  RE_NODE* parent = NULL;\n\n  int result;\n\n  *result_re_ast = re_ast;\n  *remainder_re_ast = NULL;\n  *min_gap = 0;\n  *max_gap = 0;\n\n  while (child != NULL && child->type == RE_NODE_CONCAT)\n  {\n    if (child->right != NULL &&\n        child->right->type == RE_NODE_RANGE_ANY &&\n        child->right->greedy == FALSE &&\n        (child->right->start > STRING_CHAINING_THRESHOLD ||\n         child->right->end > STRING_CHAINING_THRESHOLD))\n    {\n      result = yr_re_ast_create(remainder_re_ast);\n\n      if (result != ERROR_SUCCESS)\n        return result;\n\n      (*remainder_re_ast)->root_node = child->left;\n      (*remainder_re_ast)->flags = re_ast->flags;\n\n      child->left = NULL;\n\n      if (parent != NULL)\n        parent->left = node->right;\n      else\n        (*result_re_ast)->root_node = node->right;\n\n      node->right = NULL;\n\n      *min_gap = child->right->start;\n      *max_gap = child->right->end;\n\n      yr_re_node_destroy(node);\n\n      return ERROR_SUCCESS;\n    }\n\n    parent = node;\n    node = child;\n    child = child->left;\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint8_t** instruction_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  *code_size = sizeof(uint8_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_uint8(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint8_t argument,\n    uint8_t** instruction_addr,\n    uint8_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(uint8_t),\n      (void**) argument_addr));\n\n  *code_size = 2 * sizeof(uint8_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_uint16(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint16_t argument,\n    uint8_t** instruction_addr,\n    uint16_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(uint16_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(uint16_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_uint32(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint32_t argument,\n    uint8_t** instruction_addr,\n    uint32_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(uint32_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(uint32_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_int16(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    int16_t argument,\n    uint8_t** instruction_addr,\n    int16_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(int16_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(int16_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_struct(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    void* structure,\n    size_t structure_size,\n    uint8_t** instruction_addr,\n    void** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      structure,\n      structure_size,\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + structure_size;\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_split(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    int16_t argument,\n    uint8_t** instruction_addr,\n    int16_t** argument_addr,\n    size_t* code_size)\n{\n  assert(opcode == RE_OPCODE_SPLIT_A || opcode == RE_OPCODE_SPLIT_B);\n\n  if (emit_context->next_split_id == RE_MAX_SPLIT_ID)\n    return ERROR_REGULAR_EXPRESSION_TOO_COMPLEX;\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &emit_context->next_split_id,\n      sizeof(RE_SPLIT_ID_TYPE),\n      NULL));\n\n  emit_context->next_split_id++;\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(int16_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(RE_SPLIT_ID_TYPE) + sizeof(int16_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_re_emit(\n    RE_EMIT_CONTEXT* emit_context,\n    RE_NODE* re_node,\n    int flags,\n    uint8_t** code_addr,\n    size_t* code_size)\n{\n  size_t branch_size;\n  size_t split_size;\n  size_t inst_size;\n  size_t jmp_size;\n\n  int emit_split;\n  int emit_repeat;\n  int emit_prolog;\n  int emit_epilog;\n\n  RE_REPEAT_ARGS repeat_args;\n  RE_REPEAT_ARGS* repeat_start_args_addr;\n  RE_REPEAT_ANY_ARGS repeat_any_args;\n\n  RE_NODE* left;\n  RE_NODE* right;\n\n  int16_t* split_offset_addr = NULL;\n  int16_t* jmp_offset_addr = NULL;\n  uint8_t* instruction_addr = NULL;\n\n  *code_size = 0;\n\n  switch(re_node->type)\n  {\n  case RE_NODE_LITERAL:\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_uint8(\n        emit_context,\n        RE_OPCODE_LITERAL,\n        re_node->value,\n        &instruction_addr,\n        NULL,\n        code_size));\n    break;\n\n  case RE_NODE_MASKED_LITERAL:\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_uint16(\n        emit_context,\n        RE_OPCODE_MASKED_LITERAL,\n        re_node->mask << 8 | re_node->value,\n        &instruction_addr,\n        NULL,\n        code_size));\n    break;\n\n  case RE_NODE_WORD_CHAR:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_WORD_CHAR,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_WORD_CHAR:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_WORD_CHAR,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_WORD_BOUNDARY:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_WORD_BOUNDARY,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_WORD_BOUNDARY:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_WORD_BOUNDARY,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_SPACE:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_SPACE,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_SPACE:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_SPACE,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_DIGIT:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_DIGIT,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_DIGIT:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_DIGIT,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_ANY:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_ANY,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_CLASS:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_CLASS,\n        &instruction_addr,\n        code_size));\n\n    FAIL_ON_ERROR(yr_arena_write_data(\n        emit_context->arena,\n        re_node->class_vector,\n        32,\n        NULL));\n\n    *code_size += 32;\n    break;\n\n  case RE_NODE_ANCHOR_START:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_MATCH_AT_START,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_ANCHOR_END:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_MATCH_AT_END,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_CONCAT:\n\n    if (flags & EMIT_BACKWARDS)\n    {\n      left = re_node->right;\n      right = re_node->left;\n    }\n    else\n    {\n      left = re_node->left;\n      right = re_node->right;\n    }\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        left,\n        flags,\n        &instruction_addr,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        right,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    break;\n\n  case RE_NODE_PLUS:\n\n    // Code for e+ looks like:\n    //\n    //          L1: code for e\n    //              split L1, L2\n    //          L2:\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->left,\n        flags,\n        &instruction_addr,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    FAIL_ON_ERROR(_yr_emit_split(\n        emit_context,\n        re_node->greedy ? RE_OPCODE_SPLIT_B : RE_OPCODE_SPLIT_A,\n        -((int16_t) branch_size),\n        NULL,\n        &split_offset_addr,\n        &split_size));\n\n    *code_size += split_size;\n    break;\n\n  case RE_NODE_STAR:\n\n    // Code for e* looks like:\n    //\n    //          L1: split L1, L2\n    //              code for e\n    //              jmp L1\n    //          L2:\n\n    FAIL_ON_ERROR(_yr_emit_split(\n        emit_context,\n        re_node->greedy ? RE_OPCODE_SPLIT_A : RE_OPCODE_SPLIT_B,\n        0,\n        &instruction_addr,\n        &split_offset_addr,\n        &split_size));\n\n    *code_size += split_size;\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->left,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    // Emit jump with offset set to 0.\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_int16(\n        emit_context,\n        RE_OPCODE_JUMP,\n        -((uint16_t)(branch_size + split_size)),\n        NULL,\n        &jmp_offset_addr,\n        &jmp_size));\n\n    *code_size += jmp_size;\n\n    assert(split_size + branch_size + jmp_size < INT16_MAX);\n\n    // Update split offset.\n    *split_offset_addr = (int16_t) (split_size + branch_size + jmp_size);\n    break;\n\n  case RE_NODE_ALT:\n\n    // Code for e1|e2 looks like:\n    //\n    //              split L1, L2\n    //          L1: code for e1\n    //              jmp L3\n    //          L2: code for e2\n    //          L3:\n\n    // Emit a split instruction with offset set to 0 temporarily. Offset\n    // will be updated after we know the size of the code generated for\n    // the left node (e1).\n\n    FAIL_ON_ERROR(_yr_emit_split(\n        emit_context,\n        RE_OPCODE_SPLIT_A,\n        0,\n        &instruction_addr,\n        &split_offset_addr,\n        &split_size));\n\n    *code_size += split_size;\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->left,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    // Emit jump with offset set to 0.\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_int16(\n        emit_context,\n        RE_OPCODE_JUMP,\n        0,\n        NULL,\n        &jmp_offset_addr,\n        &jmp_size));\n\n    *code_size += jmp_size;\n\n    assert(split_size + branch_size + jmp_size < INT16_MAX);\n\n    // Update split offset.\n    *split_offset_addr = (int16_t) (split_size + branch_size + jmp_size);\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->right,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    assert(branch_size + jmp_size < INT16_MAX);\n\n    // Update offset for jmp instruction.\n    *jmp_offset_addr = (int16_t) (branch_size + jmp_size);\n    break;\n\n  case RE_NODE_RANGE_ANY:\n\n    repeat_any_args.min = re_node->start;\n    repeat_any_args.max = re_node->end;\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_struct(\n        emit_context,\n        re_node->greedy ?\n            RE_OPCODE_REPEAT_ANY_GREEDY :\n            RE_OPCODE_REPEAT_ANY_UNGREEDY,\n        &repeat_any_args,\n        sizeof(repeat_any_args),\n        &instruction_addr,\n        NULL,\n        &inst_size));\n\n    *code_size += inst_size;\n    break;\n\n  case RE_NODE_RANGE:\n\n    // Code for e{n,m} looks like:\n    //\n    //            code for e              ---   prolog\n    //            repeat_start n, m, L1   --+\n    //        L0: code for e                |   repeat\n    //            repeat_end n, m, L0     --+\n    //        L1: split L2, L3            ---   split\n    //        L2: code for e              ---   epilog\n    //        L3:\n    //\n    // Not all sections (prolog, repeat, split and epilog) are generated in all\n    // cases, it depends on the values of n and m. The following table shows\n    // which sections are generated for the first few values of n and m.\n    //\n    //        n,m   prolog  repeat      split  epilog\n    //                      (min,max)\n    //        ---------------------------------------\n    //        0,0     -       -           -      -\n    //        0,1     -       -           X      X\n    //        0,2     -       0,1         X      X\n    //        0,3     -       0,2         X      X\n    //        0,M     -       0,M-1       X      X\n    //\n    //        1,1     X       -           -      -\n    //        1,2     X       -           X      X\n    //        1,3     X       0,1         X      X\n    //        1,4     X       1,2         X      X\n    //        1,M     X       1,M-2       X      X\n    //\n    //        2,2     X       -           -      X\n    //        2,3     X       1,1         X      X\n    //        2,4     X       1,2         X      X\n    //        2,M     X       1,M-2       X      X\n    //\n    //        3,3     X       1,1         -      X\n    //        3,4     X       2,2         X      X\n    //        3,M     X       2,M-1       X      X\n    //\n    // The code can't consists simply in the repeat section, the prolog and\n    // epilog are required because we can't have atoms pointing to code inside\n    // the repeat loop. Atoms' forwards_code will point to code in the prolog\n    // and backwards_code will point to code in the epilog (or in prolog if\n    // epilog wasn't generated, like in n=1,m=1)\n\n    emit_prolog = re_node->start > 0;\n    emit_repeat = re_node->end > re_node->start + 1 || re_node->end > 2;\n    emit_split = re_node->end > re_node->start;\n    emit_epilog = re_node->end > re_node->start || re_node->end > 1;\n\n    if (emit_prolog)\n    {\n      FAIL_ON_ERROR(_yr_re_emit(\n          emit_context,\n          re_node->left,\n          flags,\n          &instruction_addr,\n          &branch_size));\n\n       *code_size += branch_size;\n    }\n\n    if (emit_repeat)\n    {\n      repeat_args.min = re_node->start;\n      repeat_args.max = re_node->end;\n\n      if (emit_prolog)\n      {\n        repeat_args.max--;\n        repeat_args.min--;\n      }\n\n      if (emit_split)\n        repeat_args.max--;\n      else\n        repeat_args.min--;\n\n      repeat_args.offset = 0;\n\n      FAIL_ON_ERROR(_yr_emit_inst_arg_struct(\n          emit_context,\n          re_node->greedy ?\n              RE_OPCODE_REPEAT_START_GREEDY :\n              RE_OPCODE_REPEAT_START_UNGREEDY,\n          &repeat_args,\n          sizeof(repeat_args),\n          emit_prolog ? NULL : &instruction_addr,\n          (void**) &repeat_start_args_addr,\n          &inst_size));\n\n      *code_size += inst_size;\n\n      FAIL_ON_ERROR(_yr_re_emit(\n          emit_context,\n          re_node->left,\n          flags | EMIT_DONT_SET_FORWARDS_CODE | EMIT_DONT_SET_BACKWARDS_CODE,\n          NULL,\n          &branch_size));\n\n      *code_size += branch_size;\n\n      repeat_start_args_addr->offset = (int32_t)(2 * inst_size + branch_size);\n      repeat_args.offset = -((int32_t) branch_size);\n\n      FAIL_ON_ERROR(_yr_emit_inst_arg_struct(\n          emit_context,\n          re_node->greedy ?\n              RE_OPCODE_REPEAT_END_GREEDY :\n              RE_OPCODE_REPEAT_END_UNGREEDY,\n          &repeat_args,\n          sizeof(repeat_args),\n          NULL,\n          NULL,\n          &inst_size));\n\n      *code_size += inst_size;\n    }\n\n    if (emit_split)\n    {\n      FAIL_ON_ERROR(_yr_emit_split(\n          emit_context,\n          re_node->greedy ?\n              RE_OPCODE_SPLIT_A :\n              RE_OPCODE_SPLIT_B,\n          0,\n          NULL,\n          &split_offset_addr,\n          &split_size));\n\n      *code_size += split_size;\n    }\n\n    if (emit_epilog)\n    {\n      FAIL_ON_ERROR(_yr_re_emit(\n          emit_context,\n          re_node->left,\n          emit_prolog ? flags | EMIT_DONT_SET_FORWARDS_CODE : flags,\n          emit_prolog || emit_repeat ? NULL : &instruction_addr,\n          &branch_size));\n\n      *code_size += branch_size;\n    }\n\n    if (emit_split)\n    {\n      assert(split_size + branch_size  < INT16_MAX);\n      *split_offset_addr = (int16_t) (split_size + branch_size);\n    }\n\n    break;\n  }\n\n  if (flags & EMIT_BACKWARDS)\n  {\n    if (!(flags & EMIT_DONT_SET_BACKWARDS_CODE))\n      re_node->backward_code = instruction_addr + *code_size;\n  }\n  else\n  {\n    if (!(flags & EMIT_DONT_SET_FORWARDS_CODE))\n      re_node->forward_code = instruction_addr;\n  }\n\n  if (code_addr != NULL)\n    *code_addr = instruction_addr;\n\n  return ERROR_SUCCESS;\n}\n\n\nint yr_re_ast_emit_code(\n    RE_AST* re_ast,\n    YR_ARENA* arena,\n    int backwards_code)\n{\n  RE_EMIT_CONTEXT emit_context;\n\n  size_t code_size;\n  size_t total_size;\n\n  // Ensure that we have enough contiguous memory space in the arena to\n  // contain the regular expression code. The code can't span over multiple\n  // non-contiguous pages.\n\n  FAIL_ON_ERROR(yr_arena_reserve_memory(arena, RE_MAX_CODE_SIZE));\n\n  // Emit code for matching the regular expressions forwards.\n\n  total_size = 0;\n  emit_context.arena = arena;\n  emit_context.next_split_id = 0;\n\n  FAIL_ON_ERROR(_yr_re_emit(\n      &emit_context,\n      re_ast->root_node,\n      backwards_code ? EMIT_BACKWARDS : 0,\n      NULL,\n      &code_size));\n\n  total_size += code_size;\n\n  FAIL_ON_ERROR(_yr_emit_inst(\n      &emit_context,\n      RE_OPCODE_MATCH,\n      NULL,\n      &code_size));\n\n  total_size += code_size;\n\n  if (total_size > RE_MAX_CODE_SIZE)\n    return ERROR_REGULAR_EXPRESSION_TOO_LARGE;\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_re_alloc_storage(\n    RE_THREAD_STORAGE** storage)\n{\n  *storage = (RE_THREAD_STORAGE*) yr_thread_storage_get_value(\n      &thread_storage_key);\n\n  if (*storage == NULL)\n  {\n    *storage = (RE_THREAD_STORAGE*) yr_malloc(sizeof(RE_THREAD_STORAGE));\n\n    if (*storage == NULL)\n      return ERROR_INSUFFICIENT_MEMORY;\n\n    (*storage)->fiber_pool.fiber_count = 0;\n    (*storage)->fiber_pool.fibers.head = NULL;\n    (*storage)->fiber_pool.fibers.tail = NULL;\n\n    FAIL_ON_ERROR(\n        yr_thread_storage_set_value(&thread_storage_key, *storage));\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_re_fiber_create(\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER** new_fiber)\n{\n  RE_FIBER* fiber;\n\n  if (fiber_pool->fibers.head != NULL)\n  {\n    fiber = fiber_pool->fibers.head;\n    fiber_pool->fibers.head = fiber->next;\n\n    if (fiber_pool->fibers.tail == fiber)\n      fiber_pool->fibers.tail = NULL;\n  }\n  else\n  {\n    if (fiber_pool->fiber_count == RE_MAX_FIBERS)\n      return ERROR_TOO_MANY_RE_FIBERS;\n\n    fiber = (RE_FIBER*) yr_malloc(sizeof(RE_FIBER));\n\n    if (fiber == NULL)\n      return ERROR_INSUFFICIENT_MEMORY;\n\n    fiber_pool->fiber_count++;\n  }\n\n  fiber->ip = NULL;\n  fiber->sp = -1;\n  fiber->rc = -1;\n  fiber->next = NULL;\n  fiber->prev = NULL;\n\n  *new_fiber = fiber;\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// _yr_re_fiber_append\n//\n// Appends 'fiber' to 'fiber_list'\n//\n\nvoid _yr_re_fiber_append(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER* fiber)\n{\n  assert(fiber->prev == NULL);\n  assert(fiber->next == NULL);\n\n  fiber->prev = fiber_list->tail;\n\n  if (fiber_list->tail != NULL)\n    fiber_list->tail->next = fiber;\n\n  fiber_list->tail = fiber;\n\n  if (fiber_list->head == NULL)\n    fiber_list->head = fiber;\n\n  assert(fiber_list->tail->next == NULL);\n  assert(fiber_list->head->prev == NULL);\n}\n\n\n//\n// _yr_re_fiber_exists\n//\n// Verifies if a fiber with the same properties (ip, rc, sp, and stack values)\n// than 'target_fiber' exists in 'fiber_list'. The list is iterated from\n// the start until 'last_fiber' (inclusive). Fibers past 'last_fiber' are not\n// taken into account.\n//\n\nint _yr_re_fiber_exists(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER* target_fiber,\n    RE_FIBER* last_fiber)\n{\n  RE_FIBER* fiber = fiber_list->head;\n\n  int equal_stacks;\n  int i;\n\n\n  if (last_fiber == NULL)\n    return FALSE;\n\n  while (fiber != last_fiber->next)\n  {\n    if (fiber->ip == target_fiber->ip &&\n        fiber->sp == target_fiber->sp &&\n        fiber->rc == target_fiber->rc)\n    {\n      equal_stacks = TRUE;\n\n      for (i = 0; i <= fiber->sp; i++)\n      {\n        if (fiber->stack[i] != target_fiber->stack[i])\n        {\n          equal_stacks = FALSE;\n          break;\n        }\n      }\n\n      if (equal_stacks)\n        return TRUE;\n    }\n\n    fiber = fiber->next;\n  }\n\n  return FALSE;\n}\n\n\n//\n// _yr_re_fiber_split\n//\n// Clones a fiber in fiber_list and inserts the cloned fiber just after.\n// the original one. If fiber_list is:\n//\n//   f1 -> f2 -> f3 -> f4\n//\n// Splitting f2 will result in:\n//\n//   f1 -> f2 -> cloned f2 -> f3 -> f4\n//\n\nint _yr_re_fiber_split(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER* fiber,\n    RE_FIBER** new_fiber)\n{\n  int32_t i;\n\n  FAIL_ON_ERROR(_yr_re_fiber_create(fiber_pool, new_fiber));\n\n  (*new_fiber)->sp = fiber->sp;\n  (*new_fiber)->ip = fiber->ip;\n  (*new_fiber)->rc = fiber->rc;\n\n  for (i = 0; i <= fiber->sp; i++)\n    (*new_fiber)->stack[i] = fiber->stack[i];\n\n  (*new_fiber)->next = fiber->next;\n  (*new_fiber)->prev = fiber;\n\n  if (fiber->next != NULL)\n    fiber->next->prev = *new_fiber;\n\n  fiber->next = *new_fiber;\n\n  if (fiber_list->tail == fiber)\n    fiber_list->tail = *new_fiber;\n\n  assert(fiber_list->tail->next == NULL);\n  assert(fiber_list->head->prev == NULL);\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// _yr_re_fiber_kill\n//\n// Kills a given fiber by removing it from the fiber list and putting it\n// in the fiber pool.\n//\n\nRE_FIBER* _yr_re_fiber_kill(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER* fiber)\n{\n  RE_FIBER* next_fiber = fiber->next;\n\n  if (fiber->prev != NULL)\n    fiber->prev->next = next_fiber;\n\n  if (next_fiber != NULL)\n    next_fiber->prev = fiber->prev;\n\n  if (fiber_pool->fibers.tail != NULL)\n    fiber_pool->fibers.tail->next = fiber;\n\n  if (fiber_list->tail == fiber)\n    fiber_list->tail = fiber->prev;\n\n  if (fiber_list->head == fiber)\n    fiber_list->head = next_fiber;\n\n  fiber->next = NULL;\n  fiber->prev = fiber_pool->fibers.tail;\n  fiber_pool->fibers.tail = fiber;\n\n  if (fiber_pool->fibers.head == NULL)\n    fiber_pool->fibers.head = fiber;\n\n  return next_fiber;\n}\n\n\n//\n// _yr_re_fiber_kill_tail\n//\n// Kills all fibers from the given one up to the end of the fiber list.\n//\n\nvoid _yr_re_fiber_kill_tail(\n  RE_FIBER_LIST* fiber_list,\n  RE_FIBER_POOL* fiber_pool,\n  RE_FIBER* fiber)\n{\n  RE_FIBER* prev_fiber = fiber->prev;\n\n  if (prev_fiber != NULL)\n    prev_fiber->next = NULL;\n\n  fiber->prev = fiber_pool->fibers.tail;\n\n  if (fiber_pool->fibers.tail != NULL)\n    fiber_pool->fibers.tail->next = fiber;\n\n  fiber_pool->fibers.tail = fiber_list->tail;\n  fiber_list->tail = prev_fiber;\n\n  if (fiber_list->head == fiber)\n    fiber_list->head = NULL;\n\n  if (fiber_pool->fibers.head == NULL)\n    fiber_pool->fibers.head = fiber;\n}\n\n\n//\n// _yr_re_fiber_kill_all\n//\n// Kills all fibers in the fiber list.\n//\n\nvoid _yr_re_fiber_kill_all(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool)\n{\n  if (fiber_list->head != NULL)\n    _yr_re_fiber_kill_tail(fiber_list, fiber_pool, fiber_list->head);\n}\n\n\n//\n// _yr_re_fiber_sync\n//\n// Executes a fiber until reaching an \"matching\" instruction. A \"matching\"\n// instruction is one that actually reads a byte from the input and performs\n// some matching. If the fiber reaches a split instruction, the new fiber is\n// also synced.\n//\n\nint _yr_re_fiber_sync(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER* fiber_to_sync)\n{\n  // A array for keeping track of which split instructions has been already\n  // executed. Each split instruction within a regexp has an associated ID\n  // between 0 and RE_MAX_SPLIT_ID. Keeping track of executed splits is\n  // required to avoid infinite loops in regexps like (a*)* or (a|)*\n\n  RE_SPLIT_ID_TYPE splits_executed[RE_MAX_SPLIT_ID];\n  RE_SPLIT_ID_TYPE splits_executed_count = 0;\n  RE_SPLIT_ID_TYPE split_id, splits_executed_idx;\n\n  int split_already_executed;\n\n  RE_REPEAT_ARGS* repeat_args;\n  RE_REPEAT_ANY_ARGS* repeat_any_args;\n\n  RE_FIBER* fiber;\n  RE_FIBER* last;\n  RE_FIBER* prev;\n  RE_FIBER* next;\n  RE_FIBER* branch_a;\n  RE_FIBER* branch_b;\n\n  fiber = fiber_to_sync;\n  prev = fiber_to_sync->prev;\n  last = fiber_to_sync->next;\n\n  while(fiber != last)\n  {\n    uint8_t opcode = *fiber->ip;\n\n    switch(opcode)\n    {\n      case RE_OPCODE_SPLIT_A:\n      case RE_OPCODE_SPLIT_B:\n\n        split_id = *(RE_SPLIT_ID_TYPE*)(fiber->ip + 1);\n        split_already_executed = FALSE;\n\n        for (splits_executed_idx = 0;\n             splits_executed_idx < splits_executed_count;\n             splits_executed_idx++)\n        {\n          if (split_id == splits_executed[splits_executed_idx])\n          {\n            split_already_executed = TRUE;\n            break;\n          }\n        }\n\n        if (split_already_executed)\n        {\n          fiber = _yr_re_fiber_kill(fiber_list, fiber_pool, fiber);\n        }\n        else\n        {\n          branch_a = fiber;\n\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          // With RE_OPCODE_SPLIT_A the current fiber continues at the next\n          // instruction in the stream (branch A), while the newly created\n          // fiber starts at the address indicated by the instruction (branch B)\n          // RE_OPCODE_SPLIT_B has the opposite behavior.\n\n          if (opcode == RE_OPCODE_SPLIT_B)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          // Branch A continues at the next instruction\n\n          branch_a->ip += (sizeof(RE_SPLIT_ID_TYPE) + 3);\n\n          // Branch B adds the offset encoded in the opcode to its instruction\n          // pointer.\n\n          branch_b->ip += *(int16_t*)(\n              branch_b->ip\n              + 1  // opcode size\n              + sizeof(RE_SPLIT_ID_TYPE));\n\n          splits_executed[splits_executed_count] = split_id;\n          splits_executed_count++;\n        }\n\n        break;\n\n      case RE_OPCODE_REPEAT_START_GREEDY:\n      case RE_OPCODE_REPEAT_START_UNGREEDY:\n\n        repeat_args = (RE_REPEAT_ARGS*)(fiber->ip + 1);\n        assert(repeat_args->max > 0);\n        branch_a = fiber;\n\n        if (repeat_args->min == 0)\n        {\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          if (opcode == RE_OPCODE_REPEAT_START_UNGREEDY)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          branch_b->ip += repeat_args->offset;\n        }\n\n        branch_a->stack[++branch_a->sp] = 0;\n        branch_a->ip += (1 + sizeof(RE_REPEAT_ARGS));\n        break;\n\n      case RE_OPCODE_REPEAT_END_GREEDY:\n      case RE_OPCODE_REPEAT_END_UNGREEDY:\n\n        repeat_args = (RE_REPEAT_ARGS*)(fiber->ip + 1);\n        fiber->stack[fiber->sp]++;\n\n        if (fiber->stack[fiber->sp] < repeat_args->min)\n        {\n          fiber->ip += repeat_args->offset;\n          break;\n        }\n\n        branch_a = fiber;\n\n        if (fiber->stack[fiber->sp] < repeat_args->max)\n        {\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          if (opcode == RE_OPCODE_REPEAT_END_GREEDY)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          branch_a->sp--;\n          branch_b->ip += repeat_args->offset;\n        }\n\n        branch_a->ip += (1 + sizeof(RE_REPEAT_ARGS));\n        break;\n\n      case RE_OPCODE_REPEAT_ANY_GREEDY:\n      case RE_OPCODE_REPEAT_ANY_UNGREEDY:\n\n        repeat_any_args = (RE_REPEAT_ANY_ARGS*)(fiber->ip + 1);\n\n        // If repetition counter (rc) is -1 it means that we are reaching this\n        // instruction from the previous one in the instructions stream. In\n        // this case let's initialize the counter to 0 and start looping.\n\n        if (fiber->rc == -1)\n          fiber->rc = 0;\n\n        if (fiber->rc < repeat_any_args->min)\n        {\n          // Increase repetition counter and continue with next fiber. The\n          // instruction pointer for this fiber is not incremented yet, this\n          // fiber spins in this same instruction until reaching the minimum\n          // number of repetitions.\n\n          fiber->rc++;\n          fiber = fiber->next;\n        }\n        else if (fiber->rc < repeat_any_args->max)\n        {\n          // Once the minimum number of repetitions are matched one fiber\n          // remains spinning in this instruction until reaching the maximum\n          // number of repetitions while new fibers are created. New fibers\n          // start executing at the next instruction.\n\n          next = fiber->next;\n          branch_a = fiber;\n\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          if (opcode == RE_OPCODE_REPEAT_ANY_UNGREEDY)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          branch_a->rc++;\n          branch_b->ip += (1 + sizeof(RE_REPEAT_ANY_ARGS));\n          branch_b->rc = -1;\n\n          FAIL_ON_ERROR(_yr_re_fiber_sync(\n              fiber_list, fiber_pool, branch_b));\n\n          fiber = next;\n        }\n        else\n        {\n          // When the maximum number of repetitions is reached the fiber keeps\n          // executing at the next instruction. The repetition counter is set\n          // to -1 indicating that we are not spinning in a repeat instruction\n          // anymore.\n\n          fiber->ip += (1 + sizeof(RE_REPEAT_ANY_ARGS));\n          fiber->rc = -1;\n        }\n\n        break;\n\n      case RE_OPCODE_JUMP:\n        fiber->ip += *(int16_t*)(fiber->ip + 1);\n        break;\n\n      default:\n        if (_yr_re_fiber_exists(fiber_list, fiber, prev))\n          fiber = _yr_re_fiber_kill(fiber_list, fiber_pool, fiber);\n        else\n          fiber = fiber->next;\n    }\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// yr_re_exec\n//\n// Executes a regular expression. The specified regular expression will try to\n// match the data starting at the address specified by \"input\". The \"input\"\n// pointer can point to any address inside a memory buffer. Arguments\n// \"input_forwards_size\" and \"input_backwards_size\" indicate how many bytes\n// can be accesible starting at \"input\" and going forwards and backwards\n// respectively.\n//\n//   <--- input_backwards_size -->|<----------- input_forwards_size -------->\n//  |--------  memory buffer  -----------------------------------------------|\n//                                ^\n//                              input\n//\n// Args:\n//   uint8_t* re_code                 - Regexp code be executed\n//   uint8_t* input                   - Pointer to input data\n//   size_t input_forwards_size       - Number of accessible bytes starting at\n//                                      \"input\" and going forwards.\n//   size_t input_backwards_size      - Number of accessible bytes starting at\n//                                      \"input\" and going backwards\n//   int flags                        - Flags:\n//      RE_FLAGS_SCAN\n//      RE_FLAGS_BACKWARDS\n//      RE_FLAGS_EXHAUSTIVE\n//      RE_FLAGS_WIDE\n//      RE_FLAGS_NO_CASE\n//      RE_FLAGS_DOT_ALL\n//   RE_MATCH_CALLBACK_FUNC callback  - Callback function\n//   void* callback_args              - Callback argument\n//   int*  matches                    - Pointer to an integer receiving the\n//                                      number of matching bytes. Notice that\n//                                      0 means a zero-length match, while no\n//                                      matches is -1.\n// Returns:\n//    ERROR_SUCCESS or any other error code.\n\nint yr_re_exec(\n    uint8_t* re_code,\n    uint8_t* input_data,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches)\n{\n  uint8_t* ip;\n  uint8_t* input;\n  uint8_t mask;\n  uint8_t value;\n  uint8_t character_size;\n\n  RE_FIBER_LIST fibers;\n  RE_THREAD_STORAGE* storage;\n  RE_FIBER* fiber;\n  RE_FIBER* next_fiber;\n\n  int bytes_matched;\n  int max_bytes_matched;\n  int match;\n  int input_incr;\n  int kill;\n  int action;\n\n  #define ACTION_NONE       0\n  #define ACTION_CONTINUE   1\n  #define ACTION_KILL       2\n  #define ACTION_KILL_TAIL  3\n\n  #define prolog { \\\n      if ((bytes_matched >= max_bytes_matched) || \\\n          (character_size == 2 && *(input + 1) != 0)) \\\n      { \\\n        action = ACTION_KILL; \\\n        break; \\\n      } \\\n    }\n\n  if (matches != NULL)\n    *matches = -1;\n\n  if (_yr_re_alloc_storage(&storage) != ERROR_SUCCESS)\n    return -2;\n\n  if (flags & RE_FLAGS_WIDE)\n    character_size = 2;\n  else\n    character_size = 1;\n\n  input = input_data;\n  input_incr = character_size;\n\n  if (flags & RE_FLAGS_BACKWARDS)\n  {\n    max_bytes_matched = (int) yr_min(input_backwards_size, RE_SCAN_LIMIT);\n    input -= character_size;\n    input_incr = -input_incr;\n  }\n  else\n  {\n    max_bytes_matched = (int) yr_min(input_forwards_size, RE_SCAN_LIMIT);\n  }\n\n  // Round down max_bytes_matched to a multiple of character_size, this way if\n  // character_size is 2 and max_bytes_matched is odd we are ignoring the\n  // extra byte which can't match anyways.\n\n  max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size;\n  bytes_matched = 0;\n\n  FAIL_ON_ERROR(_yr_re_fiber_create(&storage->fiber_pool, &fiber));\n\n  fiber->ip = re_code;\n  fibers.head = fiber;\n  fibers.tail = fiber;\n\n  FAIL_ON_ERROR_WITH_CLEANUP(\n      _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n      _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n\n  while (fibers.head != NULL)\n  {\n    fiber = fibers.head;\n\n    while(fiber != NULL)\n    {\n      ip = fiber->ip;\n      action = ACTION_NONE;\n\n      switch(*ip)\n      {\n        case RE_OPCODE_ANY:\n          prolog;\n          match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_REPEAT_ANY_GREEDY:\n        case RE_OPCODE_REPEAT_ANY_UNGREEDY:\n          prolog;\n          match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);\n          action = match ? ACTION_NONE : ACTION_KILL;\n\n          // The instruction pointer is not incremented here. The current fiber\n          // spins in this instruction until reaching the required number of\n          // repetitions. The code controlling the number of repetitions is in\n          // _yr_re_fiber_sync.\n\n          break;\n\n        case RE_OPCODE_LITERAL:\n          prolog;\n          if (flags & RE_FLAGS_NO_CASE)\n            match = yr_lowercase[*input] == yr_lowercase[*(ip + 1)];\n          else\n            match = (*input == *(ip + 1));\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 2;\n          break;\n\n        case RE_OPCODE_MASKED_LITERAL:\n          prolog;\n          value = *(int16_t*)(ip + 1) & 0xFF;\n          mask = *(int16_t*)(ip + 1) >> 8;\n\n          // We don't need to take into account the case-insensitive\n          // case because this opcode is only used with hex strings,\n          // which can't be case-insensitive.\n\n          match = ((*input & mask) == value);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 3;\n          break;\n\n        case RE_OPCODE_CLASS:\n          prolog;\n          match = CHAR_IN_CLASS(*input, ip + 1);\n          if (!match && (flags & RE_FLAGS_NO_CASE))\n            match = CHAR_IN_CLASS(yr_altercase[*input], ip + 1);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 33;\n          break;\n\n        case RE_OPCODE_WORD_CHAR:\n          prolog;\n          match = _yr_re_is_word_char(input, character_size);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_NON_WORD_CHAR:\n          prolog;\n          match = !_yr_re_is_word_char(input, character_size);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_SPACE:\n        case RE_OPCODE_NON_SPACE:\n\n          prolog;\n\n          switch(*input)\n          {\n            case ' ':\n            case '\\t':\n            case '\\r':\n            case '\\n':\n            case '\\v':\n            case '\\f':\n              match = TRUE;\n              break;\n            default:\n              match = FALSE;\n          }\n\n          if (*ip == RE_OPCODE_NON_SPACE)\n            match = !match;\n\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_DIGIT:\n          prolog;\n          match = isdigit(*input);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_NON_DIGIT:\n          prolog;\n          match = !isdigit(*input);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_WORD_BOUNDARY:\n        case RE_OPCODE_NON_WORD_BOUNDARY:\n\n          if (bytes_matched == 0 && input_backwards_size < character_size)\n          {\n            match = TRUE;\n          }\n          else if (bytes_matched >= max_bytes_matched)\n          {\n            match = TRUE;\n          }\n          else\n          {\n            assert(input <  input_data + input_forwards_size);\n            assert(input >= input_data - input_backwards_size);\n\n            assert(input - input_incr <  input_data + input_forwards_size);\n            assert(input - input_incr >= input_data - input_backwards_size);\n\n            match = _yr_re_is_word_char(input, character_size) != \\\n                    _yr_re_is_word_char(input - input_incr, character_size);\n          }\n\n          if (*ip == RE_OPCODE_NON_WORD_BOUNDARY)\n            match = !match;\n\n          action = match ? ACTION_CONTINUE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_MATCH_AT_START:\n          if (flags & RE_FLAGS_BACKWARDS)\n            kill = input_backwards_size > (size_t) bytes_matched;\n          else\n            kill = input_backwards_size > 0 || (bytes_matched != 0);\n          action = kill ? ACTION_KILL : ACTION_CONTINUE;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_MATCH_AT_END:\n          kill = flags & RE_FLAGS_BACKWARDS ||\n                 input_forwards_size > (size_t) bytes_matched;\n          action = kill ? ACTION_KILL : ACTION_CONTINUE;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_MATCH:\n\n          if (matches != NULL)\n            *matches = bytes_matched;\n\n          if (flags & RE_FLAGS_EXHAUSTIVE)\n          {\n            if (callback != NULL)\n            {\n              if (flags & RE_FLAGS_BACKWARDS)\n              {\n                FAIL_ON_ERROR_WITH_CLEANUP(\n                    callback(\n                        input + character_size,\n                        bytes_matched,\n                        flags,\n                        callback_args),\n                    _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n              }\n              else\n              {\n                FAIL_ON_ERROR_WITH_CLEANUP(\n                    callback(\n                        input_data,\n                        bytes_matched,\n                        flags,\n                        callback_args),\n                    _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n              }\n            }\n\n            action = ACTION_KILL;\n          }\n          else\n          {\n            action = ACTION_KILL_TAIL;\n          }\n\n          break;\n\n        default:\n          assert(FALSE);\n      }\n\n      switch(action)\n      {\n        case ACTION_KILL:\n          fiber = _yr_re_fiber_kill(&fibers, &storage->fiber_pool, fiber);\n          break;\n\n        case ACTION_KILL_TAIL:\n          _yr_re_fiber_kill_tail(&fibers, &storage->fiber_pool, fiber);\n          fiber = NULL;\n          break;\n\n        case ACTION_CONTINUE:\n          FAIL_ON_ERROR_WITH_CLEANUP(\n              _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n              _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n          break;\n\n        default:\n          next_fiber = fiber->next;\n          FAIL_ON_ERROR_WITH_CLEANUP(\n              _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n              _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n          fiber = next_fiber;\n      }\n    }\n\n    input += input_incr;\n    bytes_matched += character_size;\n\n    if (flags & RE_FLAGS_SCAN && bytes_matched < max_bytes_matched)\n    {\n      FAIL_ON_ERROR_WITH_CLEANUP(\n          _yr_re_fiber_create(&storage->fiber_pool, &fiber),\n          _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n\n      fiber->ip = re_code;\n      _yr_re_fiber_append(&fibers, fiber);\n\n      FAIL_ON_ERROR_WITH_CLEANUP(\n          _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n          _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n    }\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\nint yr_re_fast_exec(\n    uint8_t* code,\n    uint8_t* input_data,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches)\n{\n  RE_REPEAT_ANY_ARGS* repeat_any_args;\n\n  uint8_t* code_stack[MAX_FAST_RE_STACK];\n  uint8_t* input_stack[MAX_FAST_RE_STACK];\n  int matches_stack[MAX_FAST_RE_STACK];\n\n  uint8_t* ip = code;\n  uint8_t* input = input_data;\n  uint8_t* next_input;\n  uint8_t* next_opcode;\n  uint8_t mask;\n  uint8_t value;\n\n  int i;\n  int stop;\n  int input_incr;\n  int sp = 0;\n  int bytes_matched;\n  int max_bytes_matched;\n\n  max_bytes_matched = flags & RE_FLAGS_BACKWARDS ?\n      (int) input_backwards_size :\n      (int) input_forwards_size;\n\n  input_incr = flags & RE_FLAGS_BACKWARDS ? -1 : 1;\n\n  if (flags & RE_FLAGS_BACKWARDS)\n    input--;\n\n  code_stack[sp] = code;\n  input_stack[sp] = input;\n  matches_stack[sp] = 0;\n  sp++;\n\n  while (sp > 0)\n  {\n    sp--;\n    ip = code_stack[sp];\n    input = input_stack[sp];\n    bytes_matched = matches_stack[sp];\n    stop = FALSE;\n\n    while(!stop)\n    {\n      if (*ip == RE_OPCODE_MATCH)\n      {\n        if (flags & RE_FLAGS_EXHAUSTIVE)\n        {\n          FAIL_ON_ERROR(callback(\n             flags & RE_FLAGS_BACKWARDS ? input + 1 : input_data,\n             bytes_matched,\n             flags,\n             callback_args));\n\n          break;\n        }\n        else\n        {\n          if (matches != NULL)\n            *matches = bytes_matched;\n\n          return ERROR_SUCCESS;\n        }\n      }\n\n      if (bytes_matched >= max_bytes_matched)\n        break;\n\n      switch(*ip)\n      {\n        case RE_OPCODE_LITERAL:\n\n          if (*input == *(ip + 1))\n          {\n            bytes_matched++;\n            input += input_incr;\n            ip += 2;\n          }\n          else\n          {\n            stop = TRUE;\n          }\n\n          break;\n\n        case RE_OPCODE_MASKED_LITERAL:\n\n          value = *(int16_t*)(ip + 1) & 0xFF;\n          mask = *(int16_t*)(ip + 1) >> 8;\n\n          if ((*input & mask) == value)\n          {\n            bytes_matched++;\n            input += input_incr;\n            ip += 3;\n          }\n          else\n          {\n            stop = TRUE;\n          }\n\n          break;\n\n        case RE_OPCODE_ANY:\n\n          bytes_matched++;\n          input += input_incr;\n          ip += 1;\n\n          break;\n\n        case RE_OPCODE_REPEAT_ANY_UNGREEDY:\n\n          repeat_any_args = (RE_REPEAT_ANY_ARGS*)(ip + 1);\n          next_opcode = ip + 1 + sizeof(RE_REPEAT_ANY_ARGS);\n\n          for (i = repeat_any_args->min + 1; i <= repeat_any_args->max; i++)\n          {\n            next_input = input + i * input_incr;\n\n            if (bytes_matched + i >= max_bytes_matched)\n              break;\n\n            if ( *(next_opcode) != RE_OPCODE_LITERAL ||\n                (*(next_opcode) == RE_OPCODE_LITERAL &&\n                 *(next_opcode + 1) == *next_input))\n            {\n              if (sp >= MAX_FAST_RE_STACK)\n                return -4;\n\n              code_stack[sp] = next_opcode;\n              input_stack[sp] = next_input;\n              matches_stack[sp] = bytes_matched + i;\n              sp++;\n            }\n          }\n\n          input += input_incr * repeat_any_args->min;\n          bytes_matched += repeat_any_args->min;\n          ip = next_opcode;\n\n          break;\n\n        default:\n          assert(FALSE);\n      }\n    }\n  }\n\n  if (matches != NULL)\n    *matches = -1;\n\n  return ERROR_SUCCESS;\n}\n\n\nvoid _yr_re_print_node(\n    RE_NODE* re_node)\n{\n  int i;\n\n  if (re_node == NULL)\n    return;\n\n  switch(re_node->type)\n  {\n  case RE_NODE_ALT:\n    printf(\"Alt(\");\n    _yr_re_print_node(re_node->left);\n    printf(\", \");\n    _yr_re_print_node(re_node->right);\n    printf(\")\");\n    break;\n\n  case RE_NODE_CONCAT:\n    printf(\"Cat(\");\n    _yr_re_print_node(re_node->left);\n    printf(\", \");\n    _yr_re_print_node(re_node->right);\n    printf(\")\");\n    break;\n\n  case RE_NODE_STAR:\n    printf(\"Star(\");\n    _yr_re_print_node(re_node->left);\n    printf(\")\");\n    break;\n\n  case RE_NODE_PLUS:\n    printf(\"Plus(\");\n    _yr_re_print_node(re_node->left);\n    printf(\")\");\n    break;\n\n  case RE_NODE_LITERAL:\n    printf(\"Lit(%02X)\", re_node->value);\n    break;\n\n  case RE_NODE_MASKED_LITERAL:\n    printf(\"MaskedLit(%02X,%02X)\", re_node->value, re_node->mask);\n    break;\n\n  case RE_NODE_WORD_CHAR:\n    printf(\"WordChar\");\n    break;\n\n  case RE_NODE_NON_WORD_CHAR:\n    printf(\"NonWordChar\");\n    break;\n\n  case RE_NODE_SPACE:\n    printf(\"Space\");\n    break;\n\n  case RE_NODE_NON_SPACE:\n    printf(\"NonSpace\");\n    break;\n\n  case RE_NODE_DIGIT:\n    printf(\"Digit\");\n    break;\n\n  case RE_NODE_NON_DIGIT:\n    printf(\"NonDigit\");\n    break;\n\n  case RE_NODE_ANY:\n    printf(\"Any\");\n    break;\n\n  case RE_NODE_RANGE:\n    printf(\"Range(%d-%d, \", re_node->start, re_node->end);\n    _yr_re_print_node(re_node->left);\n    printf(\")\");\n    break;\n\n  case RE_NODE_CLASS:\n    printf(\"Class(\");\n    for (i = 0; i < 256; i++)\n      if (CHAR_IN_CLASS(i, re_node->class_vector))\n        printf(\"%02X,\", i);\n    printf(\")\");\n    break;\n\n  default:\n    printf(\"???\");\n    break;\n  }\n}\n\nvoid yr_re_print(\n    RE_AST* re_ast)\n{\n  _yr_re_print_node(re_ast->root_node);\n}\n", "/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */\n\n/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */\n\n/* Identify Bison output.  */\n#define YYBISON 1\n\n/* Bison version.  */\n#define YYBISON_VERSION \"3.0.4\"\n\n/* Skeleton name.  */\n#define YYSKELETON_NAME \"yacc.c\"\n\n/* Pure parsers.  */\n#define YYPURE 1\n\n/* Push parsers.  */\n#define YYPUSH 0\n\n/* Pull parsers.  */\n#define YYPULL 1\n\n\n/* Substitute the variable and function names.  */\n#define yyparse         re_yyparse\n#define yylex           re_yylex\n#define yyerror         re_yyerror\n#define yydebug         re_yydebug\n#define yynerrs         re_yynerrs\n\n\n/* Copy the first part of user declarations.  */\n#line 30 \"re_grammar.y\" /* yacc.c:339  */\n\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n\n#line 106 \"re_grammar.c\" /* yacc.c:339  */\n\n# ifndef YY_NULLPTR\n#  if defined __cplusplus && 201103L <= __cplusplus\n#   define YY_NULLPTR nullptr\n#  else\n#   define YY_NULLPTR 0\n#  endif\n# endif\n\n/* Enabling verbose error messages.  */\n#ifdef YYERROR_VERBOSE\n# undef YYERROR_VERBOSE\n# define YYERROR_VERBOSE 1\n#else\n# define YYERROR_VERBOSE 0\n#endif\n\n/* In a future release of Bison, this section will be replaced\n   by #include \"y.tab.h\".  */\n#ifndef YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n# define YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int re_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _CHAR_ = 258,\n    _ANY_ = 259,\n    _RANGE_ = 260,\n    _CLASS_ = 261,\n    _WORD_CHAR_ = 262,\n    _NON_WORD_CHAR_ = 263,\n    _SPACE_ = 264,\n    _NON_SPACE_ = 265,\n    _DIGIT_ = 266,\n    _NON_DIGIT_ = 267,\n    _WORD_BOUNDARY_ = 268,\n    _NON_WORD_BOUNDARY_ = 269\n  };\n#endif\n/* Tokens.  */\n#define _CHAR_ 258\n#define _ANY_ 259\n#define _RANGE_ 260\n#define _CLASS_ 261\n#define _WORD_CHAR_ 262\n#define _NON_WORD_CHAR_ 263\n#define _SPACE_ 264\n#define _NON_SPACE_ 265\n#define _DIGIT_ 266\n#define _NON_DIGIT_ 267\n#define _WORD_BOUNDARY_ 268\n#define _NON_WORD_BOUNDARY_ 269\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 73 \"re_grammar.y\" /* yacc.c:355  */\n\n  int integer;\n  uint32_t range;\n  RE_NODE* re_node;\n  uint8_t* class_vector;\n\n#line 181 \"re_grammar.c\" /* yacc.c:355  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_RE_YY_RE_GRAMMAR_H_INCLUDED  */\n\n/* Copy the second part of user declarations.  */\n\n#line 197 \"re_grammar.c\" /* yacc.c:358  */\n\n#ifdef short\n# undef short\n#endif\n\n#ifdef YYTYPE_UINT8\ntypedef YYTYPE_UINT8 yytype_uint8;\n#else\ntypedef unsigned char yytype_uint8;\n#endif\n\n#ifdef YYTYPE_INT8\ntypedef YYTYPE_INT8 yytype_int8;\n#else\ntypedef signed char yytype_int8;\n#endif\n\n#ifdef YYTYPE_UINT16\ntypedef YYTYPE_UINT16 yytype_uint16;\n#else\ntypedef unsigned short int yytype_uint16;\n#endif\n\n#ifdef YYTYPE_INT16\ntypedef YYTYPE_INT16 yytype_int16;\n#else\ntypedef short int yytype_int16;\n#endif\n\n#ifndef YYSIZE_T\n# ifdef __SIZE_TYPE__\n#  define YYSIZE_T __SIZE_TYPE__\n# elif defined size_t\n#  define YYSIZE_T size_t\n# elif ! defined YYSIZE_T\n#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYSIZE_T size_t\n# else\n#  define YYSIZE_T unsigned int\n# endif\n#endif\n\n#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)\n\n#ifndef YY_\n# if defined YYENABLE_NLS && YYENABLE_NLS\n#  if ENABLE_NLS\n#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */\n#   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)\n#  endif\n# endif\n# ifndef YY_\n#  define YY_(Msgid) Msgid\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE\n# if (defined __GNUC__                                               \\\n      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\\n     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C\n#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)\n# else\n#  define YY_ATTRIBUTE(Spec) /* empty */\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE_PURE\n# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))\n#endif\n\n#ifndef YY_ATTRIBUTE_UNUSED\n# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))\n#endif\n\n#if !defined _Noreturn \\\n     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)\n# if defined _MSC_VER && 1200 <= _MSC_VER\n#  define _Noreturn __declspec (noreturn)\n# else\n#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))\n# endif\n#endif\n\n/* Suppress unused-variable warnings by \"using\" E.  */\n#if ! defined lint || defined __GNUC__\n# define YYUSE(E) ((void) (E))\n#else\n# define YYUSE(E) /* empty */\n#endif\n\n#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__\n/* Suppress an incorrect diagnostic about yylval being uninitialized.  */\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\\n    _Pragma (\"GCC diagnostic push\") \\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n    _Pragma (\"GCC diagnostic pop\")\n#else\n# define YY_INITIAL_VALUE(Value) Value\n#endif\n#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END\n#endif\n#ifndef YY_INITIAL_VALUE\n# define YY_INITIAL_VALUE(Value) /* Nothing. */\n#endif\n\n\n#if ! defined yyoverflow || YYERROR_VERBOSE\n\n/* The parser invokes alloca or malloc; define the necessary symbols.  */\n\n# ifdef YYSTACK_USE_ALLOCA\n#  if YYSTACK_USE_ALLOCA\n#   ifdef __GNUC__\n#    define YYSTACK_ALLOC __builtin_alloca\n#   elif defined __BUILTIN_VA_ARG_INCR\n#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */\n#   elif defined _AIX\n#    define YYSTACK_ALLOC __alloca\n#   elif defined _MSC_VER\n#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */\n#    define alloca _alloca\n#   else\n#    define YYSTACK_ALLOC alloca\n#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS\n#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */\n#     ifndef EXIT_SUCCESS\n#      define EXIT_SUCCESS 0\n#     endif\n#    endif\n#   endif\n#  endif\n# endif\n\n# ifdef YYSTACK_ALLOC\n   /* Pacify GCC's 'empty if-body' warning.  */\n#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n    /* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */\n#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */\n#  endif\n# else\n#  define YYSTACK_ALLOC YYMALLOC\n#  define YYSTACK_FREE YYFREE\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM\n#  endif\n#  if (defined __cplusplus && ! defined EXIT_SUCCESS \\\n       && ! ((defined YYMALLOC || defined malloc) \\\n             && (defined YYFREE || defined free)))\n#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n#   ifndef EXIT_SUCCESS\n#    define EXIT_SUCCESS 0\n#   endif\n#  endif\n#  ifndef YYMALLOC\n#   define YYMALLOC malloc\n#   if ! defined malloc && ! defined EXIT_SUCCESS\nvoid *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n#  ifndef YYFREE\n#   define YYFREE free\n#   if ! defined free && ! defined EXIT_SUCCESS\nvoid free (void *); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n# endif\n#endif /* ! defined yyoverflow || YYERROR_VERBOSE */\n\n\n#if (! defined yyoverflow \\\n     && (! defined __cplusplus \\\n         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))\n\n/* A type that is properly aligned for any stack member.  */\nunion yyalloc\n{\n  yytype_int16 yyss_alloc;\n  YYSTYPE yyvs_alloc;\n};\n\n/* The size of the maximum gap between one aligned stack and the next.  */\n# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)\n\n/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */\n# define YYSTACK_BYTES(N) \\\n     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\\n      + YYSTACK_GAP_MAXIMUM)\n\n# define YYCOPY_NEEDED 1\n\n/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */\n# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\\n    do                                                                  \\\n      {                                                                 \\\n        YYSIZE_T yynewbytes;                                            \\\n        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\\n        Stack = &yyptr->Stack_alloc;                                    \\\n        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\\n        yyptr += yynewbytes / sizeof (*yyptr);                          \\\n      }                                                                 \\\n    while (0)\n\n#endif\n\n#if defined YYCOPY_NEEDED && YYCOPY_NEEDED\n/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */\n# ifndef YYCOPY\n#  if defined __GNUC__ && 1 < __GNUC__\n#   define YYCOPY(Dst, Src, Count) \\\n      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))\n#  else\n#   define YYCOPY(Dst, Src, Count)              \\\n      do                                        \\\n        {                                       \\\n          YYSIZE_T yyi;                         \\\n          for (yyi = 0; yyi < (Count); yyi++)   \\\n            (Dst)[yyi] = (Src)[yyi];            \\\n        }                                       \\\n      while (0)\n#  endif\n# endif\n#endif /* !YYCOPY_NEEDED */\n\n/* YYFINAL -- State number of the termination state.  */\n#define YYFINAL  22\n/* YYLAST -- Last index in YYTABLE.  */\n#define YYLAST   45\n\n/* YYNTOKENS -- Number of terminals.  */\n#define YYNTOKENS  24\n/* YYNNTS -- Number of nonterminals.  */\n#define YYNNTS  6\n/* YYNRULES -- Number of rules.  */\n#define YYNRULES  31\n/* YYNSTATES -- Number of states.  */\n#define YYNSTATES  35\n\n/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */\n#define YYUNDEFTOK  2\n#define YYMAXUTOK   269\n\n#define YYTRANSLATE(YYX)                                                \\\n  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)\n\n/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */\nstatic const yytype_uint8 yytranslate[] =\n{\n       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,    20,     2,     2,     2,\n      21,    22,    16,    18,     2,     2,    23,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,    17,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,    19,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,    15,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,\n       5,     6,     7,     8,     9,    10,    11,    12,    13,    14\n};\n\n#if YYDEBUG\n  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\nstatic const yytype_uint16 yyrline[] =\n{\n       0,   104,   104,   109,   113,   117,   128,   146,   150,   161,\n     175,   191,   205,   221,   244,   268,   290,   313,   317,   323,\n     329,   335,   344,   348,   354,   362,   368,   374,   380,   386,\n     392,   398\n};\n#endif\n\n#if YYDEBUG || YYERROR_VERBOSE || 0\n/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */\nstatic const char *const yytname[] =\n{\n  \"$end\", \"error\", \"$undefined\", \"_CHAR_\", \"_ANY_\", \"_RANGE_\", \"_CLASS_\",\n  \"_WORD_CHAR_\", \"_NON_WORD_CHAR_\", \"_SPACE_\", \"_NON_SPACE_\", \"_DIGIT_\",\n  \"_NON_DIGIT_\", \"_WORD_BOUNDARY_\", \"_NON_WORD_BOUNDARY_\", \"'|'\", \"'*'\",\n  \"'?'\", \"'+'\", \"'^'\", \"'$'\", \"'('\", \"')'\", \"'.'\", \"$accept\", \"re\",\n  \"alternative\", \"concatenation\", \"repeat\", \"single\", YY_NULLPTR\n};\n#endif\n\n# ifdef YYPRINT\n/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */\nstatic const yytype_uint16 yytoknum[] =\n{\n       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n     265,   266,   267,   268,   269,   124,    42,    63,    43,    94,\n      36,    40,    41,    46\n};\n# endif\n\n#define YYPACT_NINF -12\n\n#define yypact_value_is_default(Yystate) \\\n  (!!((Yystate) == (-12)))\n\n#define YYTABLE_NINF -1\n\n#define yytable_value_is_error(Yytable_value) \\\n  0\n\n  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */\nstatic const yytype_int8 yypact[] =\n{\n      -1,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,\n     -12,   -12,   -12,   -12,    18,   -12,     1,   -11,    18,   -12,\n      -2,    21,   -12,    18,   -12,     0,    16,    17,    23,   -12,\n      18,   -12,   -12,   -12,   -12\n};\n\n  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */\nstatic const yytype_uint8 yydefact[] =\n{\n       0,     3,    24,    31,    25,    26,    27,    28,    29,    30,\n      18,    19,    20,    21,     0,    23,     0,     2,     4,     7,\n      17,     0,     1,     6,     8,    15,     9,    13,    11,    22,\n       5,    16,    10,    14,    12\n};\n\n  /* YYPGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yypgoto[] =\n{\n     -12,   -12,    28,    22,     5,   -12\n};\n\n  /* YYDEFGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yydefgoto[] =\n{\n      -1,    16,    17,    18,    19,    20\n};\n\n  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */\nstatic const yytype_uint8 yytable[] =\n{\n       1,    22,     2,    25,    23,     3,     4,     5,     6,     7,\n       8,     9,    10,    11,    26,    27,    28,    31,    12,    13,\n      14,     2,    15,    24,     3,     4,     5,     6,     7,     8,\n       9,    10,    11,    32,    33,    24,    23,    12,    13,    14,\n      34,    15,    21,    29,     0,    30\n};\n\nstatic const yytype_int8 yycheck[] =\n{\n       1,     0,     3,     5,    15,     6,     7,     8,     9,    10,\n      11,    12,    13,    14,    16,    17,    18,    17,    19,    20,\n      21,     3,    23,    18,     6,     7,     8,     9,    10,    11,\n      12,    13,    14,    17,    17,    30,    15,    19,    20,    21,\n      17,    23,    14,    22,    -1,    23\n};\n\n  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */\nstatic const yytype_uint8 yystos[] =\n{\n       0,     1,     3,     6,     7,     8,     9,    10,    11,    12,\n      13,    14,    19,    20,    21,    23,    25,    26,    27,    28,\n      29,    26,     0,    15,    28,     5,    16,    17,    18,    22,\n      27,    17,    17,    17,    17\n};\n\n  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */\nstatic const yytype_uint8 yyr1[] =\n{\n       0,    24,    25,    25,    26,    26,    26,    27,    27,    28,\n      28,    28,    28,    28,    28,    28,    28,    28,    28,    28,\n      28,    28,    29,    29,    29,    29,    29,    29,    29,    29,\n      29,    29\n};\n\n  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */\nstatic const yytype_uint8 yyr2[] =\n{\n       0,     2,     1,     1,     1,     3,     2,     1,     2,     2,\n       3,     2,     3,     2,     3,     2,     3,     1,     1,     1,\n       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,\n       1,     1\n};\n\n\n#define yyerrok         (yyerrstatus = 0)\n#define yyclearin       (yychar = YYEMPTY)\n#define YYEMPTY         (-2)\n#define YYEOF           0\n\n#define YYACCEPT        goto yyacceptlab\n#define YYABORT         goto yyabortlab\n#define YYERROR         goto yyerrorlab\n\n\n#define YYRECOVERING()  (!!yyerrstatus)\n\n#define YYBACKUP(Token, Value)                                  \\\ndo                                                              \\\n  if (yychar == YYEMPTY)                                        \\\n    {                                                           \\\n      yychar = (Token);                                         \\\n      yylval = (Value);                                         \\\n      YYPOPSTACK (yylen);                                       \\\n      yystate = *yyssp;                                         \\\n      goto yybackup;                                            \\\n    }                                                           \\\n  else                                                          \\\n    {                                                           \\\n      yyerror (yyscanner, lex_env, YY_(\"syntax error: cannot back up\")); \\\n      YYERROR;                                                  \\\n    }                                                           \\\nwhile (0)\n\n/* Error token number */\n#define YYTERROR        1\n#define YYERRCODE       256\n\n\n\n/* Enable debugging if requested.  */\n#if YYDEBUG\n\n# ifndef YYFPRINTF\n#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYFPRINTF fprintf\n# endif\n\n# define YYDPRINTF(Args)                        \\\ndo {                                            \\\n  if (yydebug)                                  \\\n    YYFPRINTF Args;                             \\\n} while (0)\n\n/* This macro is provided for backward compatibility. */\n#ifndef YY_LOCATION_PRINT\n# define YY_LOCATION_PRINT(File, Loc) ((void) 0)\n#endif\n\n\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\\ndo {                                                                      \\\n  if (yydebug)                                                            \\\n    {                                                                     \\\n      YYFPRINTF (stderr, \"%s \", Title);                                   \\\n      yy_symbol_print (stderr,                                            \\\n                  Type, Value, yyscanner, lex_env); \\\n      YYFPRINTF (stderr, \"\\n\");                                           \\\n    }                                                                     \\\n} while (0)\n\n\n/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/\n\nstatic void\nyy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  FILE *yyo = yyoutput;\n  YYUSE (yyo);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yyvaluep)\n    return;\n# ifdef YYPRINT\n  if (yytype < YYNTOKENS)\n    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);\n# endif\n  YYUSE (yytype);\n}\n\n\n/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/\n\nstatic void\nyy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  YYFPRINTF (yyoutput, \"%s %s (\",\n             yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);\n\n  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env);\n  YYFPRINTF (yyoutput, \")\");\n}\n\n/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/\n\nstatic void\nyy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)\n{\n  YYFPRINTF (stderr, \"Stack now\");\n  for (; yybottom <= yytop; yybottom++)\n    {\n      int yybot = *yybottom;\n      YYFPRINTF (stderr, \" %d\", yybot);\n    }\n  YYFPRINTF (stderr, \"\\n\");\n}\n\n# define YY_STACK_PRINT(Bottom, Top)                            \\\ndo {                                                            \\\n  if (yydebug)                                                  \\\n    yy_stack_print ((Bottom), (Top));                           \\\n} while (0)\n\n\n/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/\n\nstatic void\nyy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  unsigned long int yylno = yyrline[yyrule];\n  int yynrhs = yyr2[yyrule];\n  int yyi;\n  YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n             yyrule - 1, yylno);\n  /* The symbols being reduced.  */\n  for (yyi = 0; yyi < yynrhs; yyi++)\n    {\n      YYFPRINTF (stderr, \"   $%d = \", yyi + 1);\n      yy_symbol_print (stderr,\n                       yystos[yyssp[yyi + 1 - yynrhs]],\n                       &(yyvsp[(yyi + 1) - (yynrhs)])\n                                              , yyscanner, lex_env);\n      YYFPRINTF (stderr, \"\\n\");\n    }\n}\n\n# define YY_REDUCE_PRINT(Rule)          \\\ndo {                                    \\\n  if (yydebug)                          \\\n    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, lex_env); \\\n} while (0)\n\n/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */\nint yydebug;\n#else /* !YYDEBUG */\n# define YYDPRINTF(Args)\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)\n# define YY_STACK_PRINT(Bottom, Top)\n# define YY_REDUCE_PRINT(Rule)\n#endif /* !YYDEBUG */\n\n\n/* YYINITDEPTH -- initial size of the parser's stacks.  */\n#ifndef YYINITDEPTH\n# define YYINITDEPTH 200\n#endif\n\n/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */\n\n#ifndef YYMAXDEPTH\n# define YYMAXDEPTH 10000\n#endif\n\n\n#if YYERROR_VERBOSE\n\n# ifndef yystrlen\n#  if defined __GLIBC__ && defined _STRING_H\n#   define yystrlen strlen\n#  else\n/* Return the length of YYSTR.  */\nstatic YYSIZE_T\nyystrlen (const char *yystr)\n{\n  YYSIZE_T yylen;\n  for (yylen = 0; yystr[yylen]; yylen++)\n    continue;\n  return yylen;\n}\n#  endif\n# endif\n\n# ifndef yystpcpy\n#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE\n#   define yystpcpy stpcpy\n#  else\n/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */\nstatic char *\nyystpcpy (char *yydest, const char *yysrc)\n{\n  char *yyd = yydest;\n  const char *yys = yysrc;\n\n  while ((*yyd++ = *yys++) != '\\0')\n    continue;\n\n  return yyd - 1;\n}\n#  endif\n# endif\n\n# ifndef yytnamerr\n/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */\nstatic YYSIZE_T\nyytnamerr (char *yyres, const char *yystr)\n{\n  if (*yystr == '\"')\n    {\n      YYSIZE_T yyn = 0;\n      char const *yyp = yystr;\n\n      for (;;)\n        switch (*++yyp)\n          {\n          case '\\'':\n          case ',':\n            goto do_not_strip_quotes;\n\n          case '\\\\':\n            if (*++yyp != '\\\\')\n              goto do_not_strip_quotes;\n            /* Fall through.  */\n          default:\n            if (yyres)\n              yyres[yyn] = *yyp;\n            yyn++;\n            break;\n\n          case '\"':\n            if (yyres)\n              yyres[yyn] = '\\0';\n            return yyn;\n          }\n    do_not_strip_quotes: ;\n    }\n\n  if (! yyres)\n    return yystrlen (yystr);\n\n  return yystpcpy (yyres, yystr) - yyres;\n}\n# endif\n\n/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */\nstatic int\nyysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,\n                yytype_int16 *yyssp, int yytoken)\n{\n  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);\n  YYSIZE_T yysize = yysize0;\n  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };\n  /* Internationalized format string. */\n  const char *yyformat = YY_NULLPTR;\n  /* Arguments of yyformat. */\n  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];\n  /* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */\n  int yycount = 0;\n\n  /* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */\n  if (yytoken != YYEMPTY)\n    {\n      int yyn = yypact[*yyssp];\n      yyarg[yycount++] = yytname[yytoken];\n      if (!yypact_value_is_default (yyn))\n        {\n          /* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */\n          int yyxbegin = yyn < 0 ? -yyn : 0;\n          /* Stay within bounds of both yycheck and yytname.  */\n          int yychecklim = YYLAST - yyn + 1;\n          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;\n          int yyx;\n\n          for (yyx = yyxbegin; yyx < yyxend; ++yyx)\n            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR\n                && !yytable_value_is_error (yytable[yyx + yyn]))\n              {\n                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)\n                  {\n                    yycount = 1;\n                    yysize = yysize0;\n                    break;\n                  }\n                yyarg[yycount++] = yytname[yyx];\n                {\n                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);\n                  if (! (yysize <= yysize1\n                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n                    return 2;\n                  yysize = yysize1;\n                }\n              }\n        }\n    }\n\n  switch (yycount)\n    {\n# define YYCASE_(N, S)                      \\\n      case N:                               \\\n        yyformat = S;                       \\\n      break\n      YYCASE_(0, YY_(\"syntax error\"));\n      YYCASE_(1, YY_(\"syntax error, unexpected %s\"));\n      YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));\n      YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));\n      YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));\n      YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));\n# undef YYCASE_\n    }\n\n  {\n    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);\n    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n      return 2;\n    yysize = yysize1;\n  }\n\n  if (*yymsg_alloc < yysize)\n    {\n      *yymsg_alloc = 2 * yysize;\n      if (! (yysize <= *yymsg_alloc\n             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))\n        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;\n      return 1;\n    }\n\n  /* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */\n  {\n    char *yyp = *yymsg;\n    int yyi = 0;\n    while ((*yyp = *yyformat) != '\\0')\n      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)\n        {\n          yyp += yytnamerr (yyp, yyarg[yyi++]);\n          yyformat += 2;\n        }\n      else\n        {\n          yyp++;\n          yyformat++;\n        }\n  }\n  return 0;\n}\n#endif /* YYERROR_VERBOSE */\n\n/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/\n\nstatic void\nyydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  YYUSE (yyvaluep);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yymsg)\n    yymsg = \"Deleting\";\n  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  switch (yytype)\n    {\n          case 6: /* _CLASS_  */\n#line 96 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).class_vector)); }\n#line 1045 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 26: /* alternative  */\n#line 97 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1051 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 27: /* concatenation  */\n#line 98 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1057 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 28: /* repeat  */\n#line 99 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1063 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 29: /* single  */\n#line 100 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1069 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n\n      default:\n        break;\n    }\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n}\n\n\n\n\n/*----------.\n| yyparse.  |\n`----------*/\n\nint\nyyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n/* The lookahead symbol.  */\nint yychar;\n\n\n/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */\nYY_INITIAL_VALUE (static YYSTYPE yyval_default;)\nYYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n\n    /* Number of syntax errors so far.  */\n    int yynerrs;\n\n    int yystate;\n    /* Number of tokens to shift before error messages enabled.  */\n    int yyerrstatus;\n\n    /* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */\n\n    /* The state stack.  */\n    yytype_int16 yyssa[YYINITDEPTH];\n    yytype_int16 *yyss;\n    yytype_int16 *yyssp;\n\n    /* The semantic value stack.  */\n    YYSTYPE yyvsa[YYINITDEPTH];\n    YYSTYPE *yyvs;\n    YYSTYPE *yyvsp;\n\n    YYSIZE_T yystacksize;\n\n  int yyn;\n  int yyresult;\n  /* Lookahead token as an internal (translated) token number.  */\n  int yytoken = 0;\n  /* The variables used to return semantic value and location from the\n     action routines.  */\n  YYSTYPE yyval;\n\n#if YYERROR_VERBOSE\n  /* Buffer for error messages, and its allocated size.  */\n  char yymsgbuf[128];\n  char *yymsg = yymsgbuf;\n  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;\n#endif\n\n#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))\n\n  /* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */\n  int yylen = 0;\n\n  yyssp = yyss = yyssa;\n  yyvsp = yyvs = yyvsa;\n  yystacksize = YYINITDEPTH;\n\n  YYDPRINTF ((stderr, \"Starting parse\\n\"));\n\n  yystate = 0;\n  yyerrstatus = 0;\n  yynerrs = 0;\n  yychar = YYEMPTY; /* Cause a token to be read.  */\n  goto yysetstate;\n\n/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/\n yynewstate:\n  /* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */\n  yyssp++;\n\n yysetstate:\n  *yyssp = yystate;\n\n  if (yyss + yystacksize - 1 <= yyssp)\n    {\n      /* Get the current used size of the three stacks, in elements.  */\n      YYSIZE_T yysize = yyssp - yyss + 1;\n\n#ifdef yyoverflow\n      {\n        /* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */\n        YYSTYPE *yyvs1 = yyvs;\n        yytype_int16 *yyss1 = yyss;\n\n        /* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */\n        yyoverflow (YY_(\"memory exhausted\"),\n                    &yyss1, yysize * sizeof (*yyssp),\n                    &yyvs1, yysize * sizeof (*yyvsp),\n                    &yystacksize);\n\n        yyss = yyss1;\n        yyvs = yyvs1;\n      }\n#else /* no yyoverflow */\n# ifndef YYSTACK_RELOCATE\n      goto yyexhaustedlab;\n# else\n      /* Extend the stack our own way.  */\n      if (YYMAXDEPTH <= yystacksize)\n        goto yyexhaustedlab;\n      yystacksize *= 2;\n      if (YYMAXDEPTH < yystacksize)\n        yystacksize = YYMAXDEPTH;\n\n      {\n        yytype_int16 *yyss1 = yyss;\n        union yyalloc *yyptr =\n          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));\n        if (! yyptr)\n          goto yyexhaustedlab;\n        YYSTACK_RELOCATE (yyss_alloc, yyss);\n        YYSTACK_RELOCATE (yyvs_alloc, yyvs);\n#  undef YYSTACK_RELOCATE\n        if (yyss1 != yyssa)\n          YYSTACK_FREE (yyss1);\n      }\n# endif\n#endif /* no yyoverflow */\n\n      yyssp = yyss + yysize - 1;\n      yyvsp = yyvs + yysize - 1;\n\n      YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",\n                  (unsigned long int) yystacksize));\n\n      if (yyss + yystacksize - 1 <= yyssp)\n        YYABORT;\n    }\n\n  YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));\n\n  if (yystate == YYFINAL)\n    YYACCEPT;\n\n  goto yybackup;\n\n/*-----------.\n| yybackup.  |\n`-----------*/\nyybackup:\n\n  /* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */\n\n  /* First try to decide what to do without reference to lookahead token.  */\n  yyn = yypact[yystate];\n  if (yypact_value_is_default (yyn))\n    goto yydefault;\n\n  /* Not known => get a lookahead token if don't already have one.  */\n\n  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */\n  if (yychar == YYEMPTY)\n    {\n      YYDPRINTF ((stderr, \"Reading a token: \"));\n      yychar = yylex (&yylval, yyscanner, lex_env);\n    }\n\n  if (yychar <= YYEOF)\n    {\n      yychar = yytoken = YYEOF;\n      YYDPRINTF ((stderr, \"Now at end of input.\\n\"));\n    }\n  else\n    {\n      yytoken = YYTRANSLATE (yychar);\n      YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);\n    }\n\n  /* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */\n  yyn += yytoken;\n  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)\n    goto yydefault;\n  yyn = yytable[yyn];\n  if (yyn <= 0)\n    {\n      if (yytable_value_is_error (yyn))\n        goto yyerrlab;\n      yyn = -yyn;\n      goto yyreduce;\n    }\n\n  /* Count tokens shifted since error; after three, turn off error\n     status.  */\n  if (yyerrstatus)\n    yyerrstatus--;\n\n  /* Shift the lookahead token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);\n\n  /* Discard the shifted token.  */\n  yychar = YYEMPTY;\n\n  yystate = yyn;\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n  goto yynewstate;\n\n\n/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/\nyydefault:\n  yyn = yydefact[yystate];\n  if (yyn == 0)\n    goto yyerrlab;\n  goto yyreduce;\n\n\n/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/\nyyreduce:\n  /* yyn is the number of a rule to reduce with.  */\n  yylen = yyr2[yyn];\n\n  /* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */\n  yyval = yyvsp[1-yylen];\n\n\n  YY_REDUCE_PRINT (yyn);\n  switch (yyn)\n    {\n        case 2:\n#line 105 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = (yyvsp[0].re_node);\n      }\n#line 1340 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 4:\n#line 114 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1348 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 5:\n#line 118 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        mark_as_not_fast_regexp();\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1363 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 6:\n#line 129 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_NODE* node;\n\n        mark_as_not_fast_regexp();\n\n        node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF(node == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-1].re_node), node);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1382 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 7:\n#line 147 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1390 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 8:\n#line 151 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1402 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 9:\n#line 162 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-1].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1420 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 10:\n#line 176 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-2].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1440 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 11:\n#line 192 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-1].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1458 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 12:\n#line 206 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-2].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1478 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 13:\n#line 222 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        }\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = 0;\n        (yyval.re_node)->end = 1;\n      }\n#line 1505 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 14:\n#line 245 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        }\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = 0;\n        (yyval.re_node)->end = 1;\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1533 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 15:\n#line 269 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        }\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;\n        (yyval.re_node)->end = (yyvsp[0].range) >> 16;;\n      }\n#line 1559 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 16:\n#line 291 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        }\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (yyvsp[-1].range) & 0xFFFF;;\n        (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1586 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 17:\n#line 314 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1594 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 18:\n#line 318 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1604 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 19:\n#line 324 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1614 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 20:\n#line 330 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1624 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 21:\n#line 336 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1634 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 22:\n#line 345 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[-1].re_node);\n      }\n#line 1642 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 23:\n#line 349 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1652 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 24:\n#line 355 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->value = (yyvsp[0].integer);\n      }\n#line 1664 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 25:\n#line 363 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1674 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 26:\n#line 369 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1684 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 27:\n#line 375 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1694 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 28:\n#line 381 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1704 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 29:\n#line 387 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1714 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 30:\n#line 393 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1724 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 31:\n#line 399 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->class_vector = (yyvsp[0].class_vector);\n      }\n#line 1736 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n\n#line 1740 \"re_grammar.c\" /* yacc.c:1646  */\n      default: break;\n    }\n  /* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */\n  YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\n\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n\n  *++yyvsp = yyval;\n\n  /* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */\n\n  yyn = yyr1[yyn];\n\n  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;\n  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)\n    yystate = yytable[yystate];\n  else\n    yystate = yydefgoto[yyn - YYNTOKENS];\n\n  goto yynewstate;\n\n\n/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/\nyyerrlab:\n  /* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */\n  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);\n\n  /* If not already recovering from an error, report this error.  */\n  if (!yyerrstatus)\n    {\n      ++yynerrs;\n#if ! YYERROR_VERBOSE\n      yyerror (yyscanner, lex_env, YY_(\"syntax error\"));\n#else\n# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\\n                                        yyssp, yytoken)\n      {\n        char const *yymsgp = YY_(\"syntax error\");\n        int yysyntax_error_status;\n        yysyntax_error_status = YYSYNTAX_ERROR;\n        if (yysyntax_error_status == 0)\n          yymsgp = yymsg;\n        else if (yysyntax_error_status == 1)\n          {\n            if (yymsg != yymsgbuf)\n              YYSTACK_FREE (yymsg);\n            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);\n            if (!yymsg)\n              {\n                yymsg = yymsgbuf;\n                yymsg_alloc = sizeof yymsgbuf;\n                yysyntax_error_status = 2;\n              }\n            else\n              {\n                yysyntax_error_status = YYSYNTAX_ERROR;\n                yymsgp = yymsg;\n              }\n          }\n        yyerror (yyscanner, lex_env, yymsgp);\n        if (yysyntax_error_status == 2)\n          goto yyexhaustedlab;\n      }\n# undef YYSYNTAX_ERROR\n#endif\n    }\n\n\n\n  if (yyerrstatus == 3)\n    {\n      /* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */\n\n      if (yychar <= YYEOF)\n        {\n          /* Return failure if at end of input.  */\n          if (yychar == YYEOF)\n            YYABORT;\n        }\n      else\n        {\n          yydestruct (\"Error: discarding\",\n                      yytoken, &yylval, yyscanner, lex_env);\n          yychar = YYEMPTY;\n        }\n    }\n\n  /* Else will try to reuse lookahead token after shifting the error\n     token.  */\n  goto yyerrlab1;\n\n\n/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/\nyyerrorlab:\n\n  /* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */\n  if (/*CONSTCOND*/ 0)\n     goto yyerrorlab;\n\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n  yystate = *yyssp;\n  goto yyerrlab1;\n\n\n/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/\nyyerrlab1:\n  yyerrstatus = 3;      /* Each real token shifted decrements this.  */\n\n  for (;;)\n    {\n      yyn = yypact[yystate];\n      if (!yypact_value_is_default (yyn))\n        {\n          yyn += YYTERROR;\n          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)\n            {\n              yyn = yytable[yyn];\n              if (0 < yyn)\n                break;\n            }\n        }\n\n      /* Pop the current state because it cannot handle the error token.  */\n      if (yyssp == yyss)\n        YYABORT;\n\n\n      yydestruct (\"Error: popping\",\n                  yystos[yystate], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n      yystate = *yyssp;\n      YY_STACK_PRINT (yyss, yyssp);\n    }\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n\n  /* Shift the error token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yystos[yyn], yyvsp, yylsp);\n\n  yystate = yyn;\n  goto yynewstate;\n\n\n/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/\nyyacceptlab:\n  yyresult = 0;\n  goto yyreturn;\n\n/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/\nyyabortlab:\n  yyresult = 1;\n  goto yyreturn;\n\n#if !defined yyoverflow || YYERROR_VERBOSE\n/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/\nyyexhaustedlab:\n  yyerror (yyscanner, lex_env, YY_(\"memory exhausted\"));\n  yyresult = 2;\n  /* Fall through.  */\n#endif\n\nyyreturn:\n  if (yychar != YYEMPTY)\n    {\n      /* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */\n      yytoken = YYTRANSLATE (yychar);\n      yydestruct (\"Cleanup: discarding lookahead\",\n                  yytoken, &yylval, yyscanner, lex_env);\n    }\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */\n  YYPOPSTACK (yylen);\n  YY_STACK_PRINT (yyss, yyssp);\n  while (yyssp != yyss)\n    {\n      yydestruct (\"Cleanup: popping\",\n                  yystos[*yyssp], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n    }\n#ifndef yyoverflow\n  if (yyss != yyssa)\n    YYSTACK_FREE (yyss);\n#endif\n#if YYERROR_VERBOSE\n  if (yymsg != yymsgbuf)\n    YYSTACK_FREE (yymsg);\n#endif\n  return yyresult;\n}\n#line 407 \"re_grammar.y\" /* yacc.c:1906  */\n\n", "/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison interface for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n#ifndef YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n# define YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int re_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _CHAR_ = 258,\n    _ANY_ = 259,\n    _RANGE_ = 260,\n    _CLASS_ = 261,\n    _WORD_CHAR_ = 262,\n    _NON_WORD_CHAR_ = 263,\n    _SPACE_ = 264,\n    _NON_SPACE_ = 265,\n    _DIGIT_ = 266,\n    _NON_DIGIT_ = 267,\n    _WORD_BOUNDARY_ = 268,\n    _NON_WORD_BOUNDARY_ = 269\n  };\n#endif\n/* Tokens.  */\n#define _CHAR_ 258\n#define _ANY_ 259\n#define _RANGE_ 260\n#define _CLASS_ 261\n#define _WORD_CHAR_ 262\n#define _NON_WORD_CHAR_ 263\n#define _SPACE_ 264\n#define _NON_SPACE_ 265\n#define _DIGIT_ 266\n#define _NON_DIGIT_ 267\n#define _WORD_BOUNDARY_ 268\n#define _NON_WORD_BOUNDARY_ 269\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 73 \"re_grammar.y\" /* yacc.c:1909  */\n\n  int integer;\n  uint32_t range;\n  RE_NODE* re_node;\n  uint8_t* class_vector;\n\n#line 89 \"re_grammar.h\" /* yacc.c:1909  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_RE_YY_RE_GRAMMAR_H_INCLUDED  */\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n%{\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n%}\n\n%name-prefix=\"re_yy\"\n%pure-parser\n\n%parse-param {void *yyscanner}\n%parse-param {RE_LEX_ENVIRONMENT *lex_env}\n\n%lex-param {yyscan_t yyscanner}\n%lex-param {RE_LEX_ENVIRONMENT *lex_env}\n\n%union {\n  int integer;\n  uint32_t range;\n  RE_NODE* re_node;\n  uint8_t* class_vector;\n}\n\n\n%token <integer> _CHAR_ _ANY_\n%token <range> _RANGE_\n%token <class_vector> _CLASS_\n\n%token _WORD_CHAR_\n%token _NON_WORD_CHAR_\n%token _SPACE_\n%token _NON_SPACE_\n%token _DIGIT_\n%token _NON_DIGIT_\n%token _WORD_BOUNDARY_\n%token _NON_WORD_BOUNDARY_\n\n%type <re_node>  alternative concatenation repeat single\n\n%destructor { yr_free($$); } _CLASS_\n%destructor { yr_re_node_destroy($$); } alternative\n%destructor { yr_re_node_destroy($$); } concatenation\n%destructor { yr_re_node_destroy($$); } repeat\n%destructor { yr_re_node_destroy($$); } single\n\n%%\n\nre  : alternative\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = $1;\n      }\n    | error\n    ;\n\nalternative\n    : concatenation\n      {\n        $$ = $1;\n      }\n    | alternative '|' concatenation\n      {\n        mark_as_not_fast_regexp();\n\n        $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $3);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | alternative '|'\n      {\n        RE_NODE* node;\n\n        mark_as_not_fast_regexp();\n\n        node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF(node == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$ = yr_re_node_create(RE_NODE_ALT, $1, node);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nconcatenation\n    : repeat\n      {\n        $$ = $1;\n      }\n    | concatenation repeat\n      {\n        $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nrepeat\n    : single '*'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_STAR, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | single '*' '?'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_STAR, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->greedy = FALSE;\n      }\n    | single '+'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_PLUS, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | single '+' '?'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_PLUS, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->greedy = FALSE;\n      }\n    | single '?'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = 0;\n        $$->end = 1;\n      }\n    | single '?' '?'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = 0;\n        $$->end = 1;\n        $$->greedy = FALSE;\n      }\n    | single _RANGE_\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = $2 & 0xFFFF;;\n        $$->end = $2 >> 16;;\n      }\n    | single _RANGE_ '?'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = $2 & 0xFFFF;;\n        $$->end = $2 >> 16;;\n        $$->greedy = FALSE;\n      }\n    | single\n      {\n        $$ = $1;\n      }\n    | _WORD_BOUNDARY_\n      {\n        $$ = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_WORD_BOUNDARY_\n      {\n        $$ = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | '^'\n      {\n        $$ = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | '$'\n      {\n        $$ = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nsingle\n    : '(' alternative ')'\n      {\n        $$ = $2;\n      }\n    | '.'\n      {\n        $$ = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _CHAR_\n      {\n        $$ = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->value = $1;\n      }\n    | _WORD_CHAR_\n      {\n        $$ = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_WORD_CHAR_\n      {\n        $$ = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _SPACE_\n      {\n        $$ = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_SPACE_\n      {\n         $$ = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n\n         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _DIGIT_\n      {\n        $$ = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_DIGIT_\n      {\n        $$ = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _CLASS_\n      {\n        $$ = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->class_vector = $1;\n      }\n    ;\n%%\n"], "fixing_code": ["/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef YR_LIMITS_H\n#define YR_LIMITS_H\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n#include <windows.h>\n#endif\n\n#include \"utils.h\"\n\n// MAX_THREADS is the number of threads that can use a YR_RULES\n// object simultaneously.\n\n#ifndef MAX_THREADS\n#define MAX_THREADS 32\n#endif\n\n\n#ifndef MAX_PATH\n#define MAX_PATH 1024\n#endif\n\n#define MAX_COMPILER_ERROR_EXTRA_INFO   256\n#define MAX_ATOM_LENGTH                 4\n#define MAX_LOOP_NESTING                4\n#define MAX_ARENA_PAGES                 32\n#define MAX_INCLUDE_DEPTH               16\n#define MAX_STRING_MATCHES              1000000\n#define MAX_FUNCTION_ARGS               128\n#define MAX_FAST_RE_STACK               300\n#define MAX_OVERLOADED_FUNCTIONS        10\n#define MAX_HEX_STRING_TOKENS           10000\n#define MAX_MATCH_DATA                  4096\n\n#define LOOP_LOCAL_VARS                 4\n#define STRING_CHAINING_THRESHOLD       200\n#define LEX_BUF_SIZE                    8192\n\n\n// Maximum allowed split ID, also limiting the number of split instructions\n// allowed in a regular expression. This number can't be increased\n// over 255 without changing RE_SPLIT_ID_TYPE.\n#define RE_MAX_SPLIT_ID                 128\n\n// Maximum stack size for regexp evaluation\n#define RE_MAX_STACK                    1024\n\n// Maximum code size for a compiled regexp\n#define RE_MAX_CODE_SIZE                32768\n\n// Maximum input size scanned by yr_re_exec\n#define RE_SCAN_LIMIT                   4096\n\n// Maximum number of fibers\n#define RE_MAX_FIBERS                   1024\n\n// Maximum number of levels in regexp's AST\n#define RE_MAX_AST_LEVELS               2000\n\n#endif\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef YR_RE_H\n#define YR_RE_H\n\n#include <ctype.h>\n\n#include <yara/arena.h>\n#include <yara/sizedstr.h>\n\n#define RE_NODE_LITERAL             1\n#define RE_NODE_MASKED_LITERAL      2\n#define RE_NODE_ANY                 3\n#define RE_NODE_CONCAT              4\n#define RE_NODE_ALT                 5\n#define RE_NODE_RANGE               6\n#define RE_NODE_STAR                7\n#define RE_NODE_PLUS                8\n#define RE_NODE_CLASS               9\n#define RE_NODE_WORD_CHAR           10\n#define RE_NODE_NON_WORD_CHAR       11\n#define RE_NODE_SPACE               12\n#define RE_NODE_NON_SPACE           13\n#define RE_NODE_DIGIT               14\n#define RE_NODE_NON_DIGIT           15\n#define RE_NODE_EMPTY               16\n#define RE_NODE_ANCHOR_START        17\n#define RE_NODE_ANCHOR_END          18\n#define RE_NODE_WORD_BOUNDARY       19\n#define RE_NODE_NON_WORD_BOUNDARY   20\n#define RE_NODE_RANGE_ANY           21\n\n\n#define RE_OPCODE_ANY                   0xA0\n#define RE_OPCODE_ANY_EXCEPT_NEW_LINE   0xA1\n#define RE_OPCODE_LITERAL               0xA2\n#define RE_OPCODE_MASKED_LITERAL        0xA4\n#define RE_OPCODE_CLASS                 0xA5\n#define RE_OPCODE_WORD_CHAR             0xA7\n#define RE_OPCODE_NON_WORD_CHAR         0xA8\n#define RE_OPCODE_SPACE                 0xA9\n#define RE_OPCODE_NON_SPACE             0xAA\n#define RE_OPCODE_DIGIT                 0xAB\n#define RE_OPCODE_NON_DIGIT             0xAC\n#define RE_OPCODE_MATCH                 0xAD\n\n#define RE_OPCODE_MATCH_AT_END          0xB0\n#define RE_OPCODE_MATCH_AT_START        0xB1\n#define RE_OPCODE_WORD_BOUNDARY         0xB2\n#define RE_OPCODE_NON_WORD_BOUNDARY     0xB3\n#define RE_OPCODE_REPEAT_ANY_GREEDY     0xB4\n#define RE_OPCODE_REPEAT_ANY_UNGREEDY   0xB5\n\n#define RE_OPCODE_SPLIT_A               0xC0\n#define RE_OPCODE_SPLIT_B               0xC1\n#define RE_OPCODE_JUMP                  0xC2\n#define RE_OPCODE_REPEAT_START_GREEDY   0xC3\n#define RE_OPCODE_REPEAT_END_GREEDY     0xC4\n#define RE_OPCODE_REPEAT_START_UNGREEDY 0xC5\n#define RE_OPCODE_REPEAT_END_UNGREEDY   0xC6\n\n\n#define RE_FLAGS_FAST_REGEXP            0x02\n#define RE_FLAGS_BACKWARDS              0x04\n#define RE_FLAGS_EXHAUSTIVE             0x08\n#define RE_FLAGS_WIDE                   0x10\n#define RE_FLAGS_NO_CASE                0x20\n#define RE_FLAGS_SCAN                   0x40\n#define RE_FLAGS_DOT_ALL                0x80\n#define RE_FLAGS_GREEDY                0x400\n#define RE_FLAGS_UNGREEDY              0x800\n\n\ntypedef struct RE RE;\ntypedef struct RE_AST RE_AST;\ntypedef struct RE_NODE RE_NODE;\ntypedef struct RE_ERROR RE_ERROR;\n\ntypedef uint8_t RE_SPLIT_ID_TYPE;\n\n\nstruct RE_NODE\n{\n  int type;\n\n  union {\n    int value;\n    int count;\n    int start;\n  };\n\n  union {\n    int mask;\n    int end;\n  };\n\n  int greedy;\n\n  uint8_t* class_vector;\n\n  RE_NODE* left;\n  RE_NODE* right;\n\n  uint8_t* forward_code;\n  uint8_t* backward_code;\n};\n\n\nstruct RE_AST\n{\n  uint32_t flags;\n  uint16_t levels;\n  RE_NODE* root_node;\n};\n\n\n// Disable warning due to zero length array in Microsoft's compiler\n\n#ifdef _MSC_VER\n#pragma warning(push)\n#pragma warning(disable:4200)\n#endif\n\nstruct RE\n{\n  uint32_t flags;\n  uint8_t code[0];\n};\n\n#ifdef _MSC_VER\n#pragma warning(pop)\n#endif\n\n\nstruct RE_ERROR\n{\n  char message[512];\n};\n\n\ntypedef int RE_MATCH_CALLBACK_FUNC(\n    uint8_t* match,\n    int match_length,\n    int flags,\n    void* args);\n\n\nint yr_re_ast_create(\n    RE_AST** re_ast);\n\nvoid yr_re_ast_destroy(\n    RE_AST* re_ast);\n\nvoid yr_re_ast_print(\n    RE_AST* re_ast);\n\nSIZED_STRING* yr_re_ast_extract_literal(\n    RE_AST* re_ast);\n\n\nint yr_re_ast_contains_dot_star(\n    RE_AST* re_ast);\n\n\nint yr_re_ast_split_at_chaining_point(\n    RE_AST* re_ast,\n    RE_AST** result_re_ast,\n    RE_AST** remainder_re_ast,\n    int32_t* min_gap,\n    int32_t* max_gap);\n\n\nint yr_re_ast_emit_code(\n    RE_AST* re_ast,\n    YR_ARENA* arena,\n    int backwards_code);\n\n\nRE_NODE* yr_re_node_create(\n    int type,\n    RE_NODE* left,\n    RE_NODE* right);\n\n\nvoid yr_re_node_destroy(\n    RE_NODE* node);\n\n\nint yr_re_exec(\n    uint8_t* re_code,\n    uint8_t* input,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches);\n\n\nint yr_re_fast_exec(\n    uint8_t* code,\n    uint8_t* input_data,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches);\n\n\nint yr_re_parse(\n    const char* re_string,\n    RE_AST** re_ast,\n    RE_ERROR* error);\n\n\nint yr_re_parse_hex(\n    const char* hex_string,\n    RE_AST** re_ast,\n    RE_ERROR* error);\n\n\nint yr_re_compile(\n    const char* re_string,\n    int flags,\n    YR_ARENA* code_arena,\n    RE** re,\n    RE_ERROR* error);\n\n\nint yr_re_match(\n    RE* re,\n    const char* target);\n\n\nint yr_re_initialize(void);\n\n\nint yr_re_finalize(void);\n\n\nint yr_re_finalize_thread(void);\n\n#endif\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\n/*\n\nThis module implements a regular expressions engine based on Thompson's\nalgorithm as described by Russ Cox in http://swtch.com/~rsc/regexp/regexp2.html.\n\nWhat the article names a \"thread\" has been named a \"fiber\" in this code, in\norder to avoid confusion with operating system threads.\n\n*/\n\n#include <assert.h>\n#include <string.h>\n#include <limits.h>\n\n#include <yara/limits.h>\n#include <yara/globals.h>\n#include <yara/utils.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/error.h>\n#include <yara/threading.h>\n#include <yara/re_lexer.h>\n#include <yara/hex_lexer.h>\n\n\n#define EMIT_BACKWARDS                  0x01\n#define EMIT_DONT_SET_FORWARDS_CODE     0x02\n#define EMIT_DONT_SET_BACKWARDS_CODE    0x04\n\n\ntypedef struct _RE_REPEAT_ARGS\n{\n  uint16_t  min;\n  uint16_t  max;\n  int32_t   offset;\n\n} RE_REPEAT_ARGS;\n\n\ntypedef struct _RE_REPEAT_ANY_ARGS\n{\n  uint16_t   min;\n  uint16_t   max;\n\n} RE_REPEAT_ANY_ARGS;\n\n\ntypedef struct _RE_EMIT_CONTEXT {\n\n  YR_ARENA*         arena;\n  RE_SPLIT_ID_TYPE  next_split_id;\n\n} RE_EMIT_CONTEXT;\n\n\ntypedef struct _RE_FIBER\n{\n  uint8_t* ip;    // instruction pointer\n  int32_t  sp;    // stack pointer\n  int32_t  rc;    // repeat counter\n\n  uint16_t stack[RE_MAX_STACK];\n\n  struct _RE_FIBER* prev;\n  struct _RE_FIBER* next;\n\n} RE_FIBER;\n\n\ntypedef struct _RE_FIBER_LIST\n{\n  RE_FIBER* head;\n  RE_FIBER* tail;\n\n} RE_FIBER_LIST;\n\n\ntypedef struct _RE_FIBER_POOL\n{\n  int fiber_count;\n  RE_FIBER_LIST fibers;\n\n} RE_FIBER_POOL;\n\n\ntypedef struct _RE_THREAD_STORAGE\n{\n  RE_FIBER_POOL fiber_pool;\n\n} RE_THREAD_STORAGE;\n\n\nYR_THREAD_STORAGE_KEY thread_storage_key = 0;\n\n\n#define CHAR_IN_CLASS(chr, cls)  \\\n    ((cls)[(chr) / 8] & 1 << ((chr) % 8))\n\n\nint _yr_re_is_word_char(\n    uint8_t* input,\n    uint8_t character_size)\n{\n  int result = ((isalnum(*input) || (*input) == '_'));\n\n  if (character_size == 2)\n    result = result && (*(input + 1) == 0);\n\n  return result;\n}\n\n\n\n//\n// yr_re_initialize\n//\n// Should be called by main thread before any other\n// function from this module.\n//\n\nint yr_re_initialize(void)\n{\n  return yr_thread_storage_create(&thread_storage_key);\n}\n\n//\n// yr_re_finalize\n//\n// Should be called by main thread after every other thread\n// stopped using functions from this module.\n//\n\nint yr_re_finalize(void)\n{\n  yr_thread_storage_destroy(&thread_storage_key);\n\n  thread_storage_key = 0;\n  return ERROR_SUCCESS;\n}\n\n//\n// yr_re_finalize_thread\n//\n// Should be called by every thread using this module\n// before exiting.\n//\n\nint yr_re_finalize_thread(void)\n{\n  RE_FIBER* fiber;\n  RE_FIBER* next_fiber;\n  RE_THREAD_STORAGE* storage;\n\n  if (thread_storage_key != 0)\n    storage = (RE_THREAD_STORAGE*) yr_thread_storage_get_value(\n        &thread_storage_key);\n  else\n    return ERROR_SUCCESS;\n\n  if (storage != NULL)\n  {\n    fiber = storage->fiber_pool.fibers.head;\n\n    while (fiber != NULL)\n    {\n      next_fiber = fiber->next;\n      yr_free(fiber);\n      fiber = next_fiber;\n    }\n\n    yr_free(storage);\n  }\n\n  return yr_thread_storage_set_value(&thread_storage_key, NULL);\n}\n\n\nRE_NODE* yr_re_node_create(\n    int type,\n    RE_NODE* left,\n    RE_NODE* right)\n{\n  RE_NODE* result = (RE_NODE*) yr_malloc(sizeof(RE_NODE));\n\n  if (result != NULL)\n  {\n    result->type = type;\n    result->left = left;\n    result->right = right;\n    result->greedy = TRUE;\n    result->forward_code = NULL;\n    result->backward_code = NULL;\n  }\n\n  return result;\n}\n\n\nvoid yr_re_node_destroy(\n    RE_NODE* node)\n{\n  if (node->left != NULL)\n    yr_re_node_destroy(node->left);\n\n  if (node->right != NULL)\n    yr_re_node_destroy(node->right);\n\n  if (node->type == RE_NODE_CLASS)\n    yr_free(node->class_vector);\n\n  yr_free(node);\n}\n\n\nint yr_re_ast_create(\n    RE_AST** re_ast)\n{\n  *re_ast = (RE_AST*) yr_malloc(sizeof(RE_AST));\n\n  if (*re_ast == NULL)\n    return ERROR_INSUFFICIENT_MEMORY;\n\n  (*re_ast)->flags = 0;\n  (*re_ast)->levels = 0;\n  (*re_ast)->root_node = NULL;\n\n  return ERROR_SUCCESS;\n}\n\n\nvoid yr_re_ast_destroy(\n    RE_AST* re_ast)\n{\n  if (re_ast->root_node != NULL)\n    yr_re_node_destroy(re_ast->root_node);\n\n  yr_free(re_ast);\n}\n\n\n//\n// yr_re_parse\n//\n// Parses a regexp but don't emit its code. A further call to\n// yr_re_emit_code is required to get the code.\n//\n\nint yr_re_parse(\n    const char* re_string,\n    RE_AST** re_ast,\n    RE_ERROR* error)\n{\n  return yr_parse_re_string(re_string, re_ast, error);\n}\n\n\n//\n// yr_re_parse_hex\n//\n// Parses a hex string but don't emit its code. A further call to\n// yr_re_emit_code is required to get the code.\n//\n\nint yr_re_parse_hex(\n    const char* hex_string,\n    RE_AST** re_ast,\n    RE_ERROR* error)\n{\n  return yr_parse_hex_string(hex_string, re_ast, error);\n}\n\n\n//\n// yr_re_compile\n//\n// Parses the regexp and emit its code to the provided code_arena.\n//\n\nint yr_re_compile(\n    const char* re_string,\n    int flags,\n    YR_ARENA* code_arena,\n    RE** re,\n    RE_ERROR* error)\n{\n  RE_AST* re_ast;\n  RE _re;\n\n  FAIL_ON_ERROR(yr_arena_reserve_memory(\n      code_arena, sizeof(int64_t) + RE_MAX_CODE_SIZE));\n\n  FAIL_ON_ERROR(yr_re_parse(re_string, &re_ast, error));\n\n  _re.flags = flags;\n\n  FAIL_ON_ERROR_WITH_CLEANUP(\n      yr_arena_write_data(\n          code_arena,\n          &_re,\n          sizeof(_re),\n          (void**) re),\n      yr_re_ast_destroy(re_ast));\n\n  FAIL_ON_ERROR_WITH_CLEANUP(\n      yr_re_ast_emit_code(re_ast, code_arena, FALSE),\n      yr_re_ast_destroy(re_ast));\n\n  yr_re_ast_destroy(re_ast);\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// yr_re_match\n//\n// Verifies if the target string matches the pattern\n//\n// Args:\n//    RE* re          -  A pointer to a compiled regexp\n//    char* target    -  Target string\n//\n// Returns:\n//    See return codes for yr_re_exec\n\n\nint yr_re_match(\n    RE* re,\n    const char* target)\n{\n  int result;\n\n  yr_re_exec(\n      re->code,\n      (uint8_t*) target,\n      strlen(target),\n      0,\n      re->flags | RE_FLAGS_SCAN,\n      NULL,\n      NULL,\n      &result);\n\n  return result;\n}\n\n\n//\n// yr_re_ast_extract_literal\n//\n// Verifies if the provided regular expression is just a literal string\n// like \"abc\", \"12345\", without any wildcard, operator, etc. In that case\n// returns the string as a SIZED_STRING, or returns NULL if otherwise.\n//\n// The caller is responsible for deallocating the returned SIZED_STRING by\n// calling yr_free.\n//\n\nSIZED_STRING* yr_re_ast_extract_literal(\n    RE_AST* re_ast)\n{\n  SIZED_STRING* string;\n  RE_NODE* node = re_ast->root_node;\n\n  int i, length = 0;\n  char tmp;\n\n  while (node != NULL)\n  {\n    length++;\n\n    if (node->type == RE_NODE_LITERAL)\n      break;\n\n    if (node->type != RE_NODE_CONCAT)\n      return NULL;\n\n    if (node->right == NULL ||\n        node->right->type != RE_NODE_LITERAL)\n      return NULL;\n\n    node = node->left;\n  }\n\n  string = (SIZED_STRING*) yr_malloc(sizeof(SIZED_STRING) + length);\n\n  if (string == NULL)\n    return NULL;\n\n  string->length = 0;\n\n  node = re_ast->root_node;\n\n  while (node->type == RE_NODE_CONCAT)\n  {\n    string->c_string[string->length++] = node->right->value;\n    node = node->left;\n  }\n\n  string->c_string[string->length++] = node->value;\n\n  // The string ends up reversed. Reverse it back to its original value.\n\n  for (i = 0; i < length / 2; i++)\n  {\n    tmp = string->c_string[i];\n    string->c_string[i] = string->c_string[length - i - 1];\n    string->c_string[length - i - 1] = tmp;\n  }\n\n  return string;\n}\n\n\nint _yr_re_node_contains_dot_star(\n    RE_NODE* re_node)\n{\n  if (re_node->type == RE_NODE_STAR && re_node->left->type == RE_NODE_ANY)\n    return TRUE;\n\n  if (re_node->left != NULL && _yr_re_node_contains_dot_star(re_node->left))\n    return TRUE;\n\n  if (re_node->right != NULL && _yr_re_node_contains_dot_star(re_node->right))\n    return TRUE;\n\n  return FALSE;\n}\n\n\nint yr_re_ast_contains_dot_star(\n    RE_AST* re_ast)\n{\n  return _yr_re_node_contains_dot_star(re_ast->root_node);\n}\n\n\n//\n// yr_re_ast_split_at_chaining_point\n//\n// In some cases splitting a regular expression in two is more efficient that\n// having a single regular expression. This happens when the regular expression\n// contains a large repetition of any character, for example: /foo.{0,1000}bar/\n// In this case the regexp is split in /foo/ and /bar/ where /bar/ is \"chained\"\n// to /foo/. This means that /foo/ and /bar/ are handled as individual regexps\n// and when both matches YARA verifies if the distance between the matches\n// complies with the {0,1000} restriction.\n\n// This function traverses the regexp's tree looking for nodes where the regxp\n// should be split. It expects a left-unbalanced tree where the right child of\n// a RE_NODE_CONCAT can't be another RE_NODE_CONCAT. A RE_NODE_CONCAT must be\n// always the left child of its parent if the parent is also a RE_NODE_CONCAT.\n//\n\nint yr_re_ast_split_at_chaining_point(\n    RE_AST* re_ast,\n    RE_AST** result_re_ast,\n    RE_AST** remainder_re_ast,\n    int32_t* min_gap,\n    int32_t* max_gap)\n{\n  RE_NODE* node = re_ast->root_node;\n  RE_NODE* child = re_ast->root_node->left;\n  RE_NODE* parent = NULL;\n\n  int result;\n\n  *result_re_ast = re_ast;\n  *remainder_re_ast = NULL;\n  *min_gap = 0;\n  *max_gap = 0;\n\n  while (child != NULL && child->type == RE_NODE_CONCAT)\n  {\n    if (child->right != NULL &&\n        child->right->type == RE_NODE_RANGE_ANY &&\n        child->right->greedy == FALSE &&\n        (child->right->start > STRING_CHAINING_THRESHOLD ||\n         child->right->end > STRING_CHAINING_THRESHOLD))\n    {\n      result = yr_re_ast_create(remainder_re_ast);\n\n      if (result != ERROR_SUCCESS)\n        return result;\n\n      (*remainder_re_ast)->root_node = child->left;\n      (*remainder_re_ast)->flags = re_ast->flags;\n\n      child->left = NULL;\n\n      if (parent != NULL)\n        parent->left = node->right;\n      else\n        (*result_re_ast)->root_node = node->right;\n\n      node->right = NULL;\n\n      *min_gap = child->right->start;\n      *max_gap = child->right->end;\n\n      yr_re_node_destroy(node);\n\n      return ERROR_SUCCESS;\n    }\n\n    parent = node;\n    node = child;\n    child = child->left;\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint8_t** instruction_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  *code_size = sizeof(uint8_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_uint8(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint8_t argument,\n    uint8_t** instruction_addr,\n    uint8_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(uint8_t),\n      (void**) argument_addr));\n\n  *code_size = 2 * sizeof(uint8_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_uint16(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint16_t argument,\n    uint8_t** instruction_addr,\n    uint16_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(uint16_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(uint16_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_uint32(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    uint32_t argument,\n    uint8_t** instruction_addr,\n    uint32_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(uint32_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(uint32_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_int16(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    int16_t argument,\n    uint8_t** instruction_addr,\n    int16_t** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(int16_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(int16_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_inst_arg_struct(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    void* structure,\n    size_t structure_size,\n    uint8_t** instruction_addr,\n    void** argument_addr,\n    size_t* code_size)\n{\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      structure,\n      structure_size,\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + structure_size;\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_emit_split(\n    RE_EMIT_CONTEXT* emit_context,\n    uint8_t opcode,\n    int16_t argument,\n    uint8_t** instruction_addr,\n    int16_t** argument_addr,\n    size_t* code_size)\n{\n  assert(opcode == RE_OPCODE_SPLIT_A || opcode == RE_OPCODE_SPLIT_B);\n\n  if (emit_context->next_split_id == RE_MAX_SPLIT_ID)\n    return ERROR_REGULAR_EXPRESSION_TOO_COMPLEX;\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &opcode,\n      sizeof(uint8_t),\n      (void**) instruction_addr));\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &emit_context->next_split_id,\n      sizeof(RE_SPLIT_ID_TYPE),\n      NULL));\n\n  emit_context->next_split_id++;\n\n  FAIL_ON_ERROR(yr_arena_write_data(\n      emit_context->arena,\n      &argument,\n      sizeof(int16_t),\n      (void**) argument_addr));\n\n  *code_size = sizeof(uint8_t) + sizeof(RE_SPLIT_ID_TYPE) + sizeof(int16_t);\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_re_emit(\n    RE_EMIT_CONTEXT* emit_context,\n    RE_NODE* re_node,\n    int flags,\n    uint8_t** code_addr,\n    size_t* code_size)\n{\n  size_t branch_size;\n  size_t split_size;\n  size_t inst_size;\n  size_t jmp_size;\n\n  int emit_split;\n  int emit_repeat;\n  int emit_prolog;\n  int emit_epilog;\n\n  RE_REPEAT_ARGS repeat_args;\n  RE_REPEAT_ARGS* repeat_start_args_addr;\n  RE_REPEAT_ANY_ARGS repeat_any_args;\n\n  RE_NODE* left;\n  RE_NODE* right;\n\n  int16_t* split_offset_addr = NULL;\n  int16_t* jmp_offset_addr = NULL;\n  uint8_t* instruction_addr = NULL;\n\n  *code_size = 0;\n\n  switch(re_node->type)\n  {\n  case RE_NODE_LITERAL:\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_uint8(\n        emit_context,\n        RE_OPCODE_LITERAL,\n        re_node->value,\n        &instruction_addr,\n        NULL,\n        code_size));\n    break;\n\n  case RE_NODE_MASKED_LITERAL:\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_uint16(\n        emit_context,\n        RE_OPCODE_MASKED_LITERAL,\n        re_node->mask << 8 | re_node->value,\n        &instruction_addr,\n        NULL,\n        code_size));\n    break;\n\n  case RE_NODE_WORD_CHAR:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_WORD_CHAR,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_WORD_CHAR:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_WORD_CHAR,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_WORD_BOUNDARY:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_WORD_BOUNDARY,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_WORD_BOUNDARY:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_WORD_BOUNDARY,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_SPACE:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_SPACE,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_SPACE:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_SPACE,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_DIGIT:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_DIGIT,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_NON_DIGIT:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_NON_DIGIT,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_ANY:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_ANY,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_CLASS:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_CLASS,\n        &instruction_addr,\n        code_size));\n\n    FAIL_ON_ERROR(yr_arena_write_data(\n        emit_context->arena,\n        re_node->class_vector,\n        32,\n        NULL));\n\n    *code_size += 32;\n    break;\n\n  case RE_NODE_ANCHOR_START:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_MATCH_AT_START,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_ANCHOR_END:\n\n    FAIL_ON_ERROR(_yr_emit_inst(\n        emit_context,\n        RE_OPCODE_MATCH_AT_END,\n        &instruction_addr,\n        code_size));\n    break;\n\n  case RE_NODE_CONCAT:\n\n    if (flags & EMIT_BACKWARDS)\n    {\n      left = re_node->right;\n      right = re_node->left;\n    }\n    else\n    {\n      left = re_node->left;\n      right = re_node->right;\n    }\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        left,\n        flags,\n        &instruction_addr,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        right,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    break;\n\n  case RE_NODE_PLUS:\n\n    // Code for e+ looks like:\n    //\n    //          L1: code for e\n    //              split L1, L2\n    //          L2:\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->left,\n        flags,\n        &instruction_addr,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    FAIL_ON_ERROR(_yr_emit_split(\n        emit_context,\n        re_node->greedy ? RE_OPCODE_SPLIT_B : RE_OPCODE_SPLIT_A,\n        -((int16_t) branch_size),\n        NULL,\n        &split_offset_addr,\n        &split_size));\n\n    *code_size += split_size;\n    break;\n\n  case RE_NODE_STAR:\n\n    // Code for e* looks like:\n    //\n    //          L1: split L1, L2\n    //              code for e\n    //              jmp L1\n    //          L2:\n\n    FAIL_ON_ERROR(_yr_emit_split(\n        emit_context,\n        re_node->greedy ? RE_OPCODE_SPLIT_A : RE_OPCODE_SPLIT_B,\n        0,\n        &instruction_addr,\n        &split_offset_addr,\n        &split_size));\n\n    *code_size += split_size;\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->left,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    // Emit jump with offset set to 0.\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_int16(\n        emit_context,\n        RE_OPCODE_JUMP,\n        -((uint16_t)(branch_size + split_size)),\n        NULL,\n        &jmp_offset_addr,\n        &jmp_size));\n\n    *code_size += jmp_size;\n\n    assert(split_size + branch_size + jmp_size < INT16_MAX);\n\n    // Update split offset.\n    *split_offset_addr = (int16_t) (split_size + branch_size + jmp_size);\n    break;\n\n  case RE_NODE_ALT:\n\n    // Code for e1|e2 looks like:\n    //\n    //              split L1, L2\n    //          L1: code for e1\n    //              jmp L3\n    //          L2: code for e2\n    //          L3:\n\n    // Emit a split instruction with offset set to 0 temporarily. Offset\n    // will be updated after we know the size of the code generated for\n    // the left node (e1).\n\n    FAIL_ON_ERROR(_yr_emit_split(\n        emit_context,\n        RE_OPCODE_SPLIT_A,\n        0,\n        &instruction_addr,\n        &split_offset_addr,\n        &split_size));\n\n    *code_size += split_size;\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->left,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    // Emit jump with offset set to 0.\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_int16(\n        emit_context,\n        RE_OPCODE_JUMP,\n        0,\n        NULL,\n        &jmp_offset_addr,\n        &jmp_size));\n\n    *code_size += jmp_size;\n\n    assert(split_size + branch_size + jmp_size < INT16_MAX);\n\n    // Update split offset.\n    *split_offset_addr = (int16_t) (split_size + branch_size + jmp_size);\n\n    FAIL_ON_ERROR(_yr_re_emit(\n        emit_context,\n        re_node->right,\n        flags,\n        NULL,\n        &branch_size));\n\n    *code_size += branch_size;\n\n    assert(branch_size + jmp_size < INT16_MAX);\n\n    // Update offset for jmp instruction.\n    *jmp_offset_addr = (int16_t) (branch_size + jmp_size);\n    break;\n\n  case RE_NODE_RANGE_ANY:\n\n    repeat_any_args.min = re_node->start;\n    repeat_any_args.max = re_node->end;\n\n    FAIL_ON_ERROR(_yr_emit_inst_arg_struct(\n        emit_context,\n        re_node->greedy ?\n            RE_OPCODE_REPEAT_ANY_GREEDY :\n            RE_OPCODE_REPEAT_ANY_UNGREEDY,\n        &repeat_any_args,\n        sizeof(repeat_any_args),\n        &instruction_addr,\n        NULL,\n        &inst_size));\n\n    *code_size += inst_size;\n    break;\n\n  case RE_NODE_RANGE:\n\n    // Code for e{n,m} looks like:\n    //\n    //            code for e              ---   prolog\n    //            repeat_start n, m, L1   --+\n    //        L0: code for e                |   repeat\n    //            repeat_end n, m, L0     --+\n    //        L1: split L2, L3            ---   split\n    //        L2: code for e              ---   epilog\n    //        L3:\n    //\n    // Not all sections (prolog, repeat, split and epilog) are generated in all\n    // cases, it depends on the values of n and m. The following table shows\n    // which sections are generated for the first few values of n and m.\n    //\n    //        n,m   prolog  repeat      split  epilog\n    //                      (min,max)\n    //        ---------------------------------------\n    //        0,0     -       -           -      -\n    //        0,1     -       -           X      X\n    //        0,2     -       0,1         X      X\n    //        0,3     -       0,2         X      X\n    //        0,M     -       0,M-1       X      X\n    //\n    //        1,1     X       -           -      -\n    //        1,2     X       -           X      X\n    //        1,3     X       0,1         X      X\n    //        1,4     X       1,2         X      X\n    //        1,M     X       1,M-2       X      X\n    //\n    //        2,2     X       -           -      X\n    //        2,3     X       1,1         X      X\n    //        2,4     X       1,2         X      X\n    //        2,M     X       1,M-2       X      X\n    //\n    //        3,3     X       1,1         -      X\n    //        3,4     X       2,2         X      X\n    //        3,M     X       2,M-1       X      X\n    //\n    // The code can't consists simply in the repeat section, the prolog and\n    // epilog are required because we can't have atoms pointing to code inside\n    // the repeat loop. Atoms' forwards_code will point to code in the prolog\n    // and backwards_code will point to code in the epilog (or in prolog if\n    // epilog wasn't generated, like in n=1,m=1)\n\n    emit_prolog = re_node->start > 0;\n    emit_repeat = re_node->end > re_node->start + 1 || re_node->end > 2;\n    emit_split = re_node->end > re_node->start;\n    emit_epilog = re_node->end > re_node->start || re_node->end > 1;\n\n    if (emit_prolog)\n    {\n      FAIL_ON_ERROR(_yr_re_emit(\n          emit_context,\n          re_node->left,\n          flags,\n          &instruction_addr,\n          &branch_size));\n\n       *code_size += branch_size;\n    }\n\n    if (emit_repeat)\n    {\n      repeat_args.min = re_node->start;\n      repeat_args.max = re_node->end;\n\n      if (emit_prolog)\n      {\n        repeat_args.max--;\n        repeat_args.min--;\n      }\n\n      if (emit_split)\n        repeat_args.max--;\n      else\n        repeat_args.min--;\n\n      repeat_args.offset = 0;\n\n      FAIL_ON_ERROR(_yr_emit_inst_arg_struct(\n          emit_context,\n          re_node->greedy ?\n              RE_OPCODE_REPEAT_START_GREEDY :\n              RE_OPCODE_REPEAT_START_UNGREEDY,\n          &repeat_args,\n          sizeof(repeat_args),\n          emit_prolog ? NULL : &instruction_addr,\n          (void**) &repeat_start_args_addr,\n          &inst_size));\n\n      *code_size += inst_size;\n\n      FAIL_ON_ERROR(_yr_re_emit(\n          emit_context,\n          re_node->left,\n          flags | EMIT_DONT_SET_FORWARDS_CODE | EMIT_DONT_SET_BACKWARDS_CODE,\n          NULL,\n          &branch_size));\n\n      *code_size += branch_size;\n\n      repeat_start_args_addr->offset = (int32_t)(2 * inst_size + branch_size);\n      repeat_args.offset = -((int32_t) branch_size);\n\n      FAIL_ON_ERROR(_yr_emit_inst_arg_struct(\n          emit_context,\n          re_node->greedy ?\n              RE_OPCODE_REPEAT_END_GREEDY :\n              RE_OPCODE_REPEAT_END_UNGREEDY,\n          &repeat_args,\n          sizeof(repeat_args),\n          NULL,\n          NULL,\n          &inst_size));\n\n      *code_size += inst_size;\n    }\n\n    if (emit_split)\n    {\n      FAIL_ON_ERROR(_yr_emit_split(\n          emit_context,\n          re_node->greedy ?\n              RE_OPCODE_SPLIT_A :\n              RE_OPCODE_SPLIT_B,\n          0,\n          NULL,\n          &split_offset_addr,\n          &split_size));\n\n      *code_size += split_size;\n    }\n\n    if (emit_epilog)\n    {\n      FAIL_ON_ERROR(_yr_re_emit(\n          emit_context,\n          re_node->left,\n          emit_prolog ? flags | EMIT_DONT_SET_FORWARDS_CODE : flags,\n          emit_prolog || emit_repeat ? NULL : &instruction_addr,\n          &branch_size));\n\n      *code_size += branch_size;\n    }\n\n    if (emit_split)\n    {\n      assert(split_size + branch_size  < INT16_MAX);\n      *split_offset_addr = (int16_t) (split_size + branch_size);\n    }\n\n    break;\n  }\n\n  if (flags & EMIT_BACKWARDS)\n  {\n    if (!(flags & EMIT_DONT_SET_BACKWARDS_CODE))\n      re_node->backward_code = instruction_addr + *code_size;\n  }\n  else\n  {\n    if (!(flags & EMIT_DONT_SET_FORWARDS_CODE))\n      re_node->forward_code = instruction_addr;\n  }\n\n  if (code_addr != NULL)\n    *code_addr = instruction_addr;\n\n  return ERROR_SUCCESS;\n}\n\n\nint yr_re_ast_emit_code(\n    RE_AST* re_ast,\n    YR_ARENA* arena,\n    int backwards_code)\n{\n  RE_EMIT_CONTEXT emit_context;\n\n  size_t code_size;\n  size_t total_size;\n\n  // Ensure that we have enough contiguous memory space in the arena to\n  // contain the regular expression code. The code can't span over multiple\n  // non-contiguous pages.\n\n  FAIL_ON_ERROR(yr_arena_reserve_memory(arena, RE_MAX_CODE_SIZE));\n\n  // Emit code for matching the regular expressions forwards.\n\n  total_size = 0;\n  emit_context.arena = arena;\n  emit_context.next_split_id = 0;\n\n  FAIL_ON_ERROR(_yr_re_emit(\n      &emit_context,\n      re_ast->root_node,\n      backwards_code ? EMIT_BACKWARDS : 0,\n      NULL,\n      &code_size));\n\n  total_size += code_size;\n\n  FAIL_ON_ERROR(_yr_emit_inst(\n      &emit_context,\n      RE_OPCODE_MATCH,\n      NULL,\n      &code_size));\n\n  total_size += code_size;\n\n  if (total_size > RE_MAX_CODE_SIZE)\n    return ERROR_REGULAR_EXPRESSION_TOO_LARGE;\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_re_alloc_storage(\n    RE_THREAD_STORAGE** storage)\n{\n  *storage = (RE_THREAD_STORAGE*) yr_thread_storage_get_value(\n      &thread_storage_key);\n\n  if (*storage == NULL)\n  {\n    *storage = (RE_THREAD_STORAGE*) yr_malloc(sizeof(RE_THREAD_STORAGE));\n\n    if (*storage == NULL)\n      return ERROR_INSUFFICIENT_MEMORY;\n\n    (*storage)->fiber_pool.fiber_count = 0;\n    (*storage)->fiber_pool.fibers.head = NULL;\n    (*storage)->fiber_pool.fibers.tail = NULL;\n\n    FAIL_ON_ERROR(\n        yr_thread_storage_set_value(&thread_storage_key, *storage));\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\nint _yr_re_fiber_create(\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER** new_fiber)\n{\n  RE_FIBER* fiber;\n\n  if (fiber_pool->fibers.head != NULL)\n  {\n    fiber = fiber_pool->fibers.head;\n    fiber_pool->fibers.head = fiber->next;\n\n    if (fiber_pool->fibers.tail == fiber)\n      fiber_pool->fibers.tail = NULL;\n  }\n  else\n  {\n    if (fiber_pool->fiber_count == RE_MAX_FIBERS)\n      return ERROR_TOO_MANY_RE_FIBERS;\n\n    fiber = (RE_FIBER*) yr_malloc(sizeof(RE_FIBER));\n\n    if (fiber == NULL)\n      return ERROR_INSUFFICIENT_MEMORY;\n\n    fiber_pool->fiber_count++;\n  }\n\n  fiber->ip = NULL;\n  fiber->sp = -1;\n  fiber->rc = -1;\n  fiber->next = NULL;\n  fiber->prev = NULL;\n\n  *new_fiber = fiber;\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// _yr_re_fiber_append\n//\n// Appends 'fiber' to 'fiber_list'\n//\n\nvoid _yr_re_fiber_append(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER* fiber)\n{\n  assert(fiber->prev == NULL);\n  assert(fiber->next == NULL);\n\n  fiber->prev = fiber_list->tail;\n\n  if (fiber_list->tail != NULL)\n    fiber_list->tail->next = fiber;\n\n  fiber_list->tail = fiber;\n\n  if (fiber_list->head == NULL)\n    fiber_list->head = fiber;\n\n  assert(fiber_list->tail->next == NULL);\n  assert(fiber_list->head->prev == NULL);\n}\n\n\n//\n// _yr_re_fiber_exists\n//\n// Verifies if a fiber with the same properties (ip, rc, sp, and stack values)\n// than 'target_fiber' exists in 'fiber_list'. The list is iterated from\n// the start until 'last_fiber' (inclusive). Fibers past 'last_fiber' are not\n// taken into account.\n//\n\nint _yr_re_fiber_exists(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER* target_fiber,\n    RE_FIBER* last_fiber)\n{\n  RE_FIBER* fiber = fiber_list->head;\n\n  int equal_stacks;\n  int i;\n\n\n  if (last_fiber == NULL)\n    return FALSE;\n\n  while (fiber != last_fiber->next)\n  {\n    if (fiber->ip == target_fiber->ip &&\n        fiber->sp == target_fiber->sp &&\n        fiber->rc == target_fiber->rc)\n    {\n      equal_stacks = TRUE;\n\n      for (i = 0; i <= fiber->sp; i++)\n      {\n        if (fiber->stack[i] != target_fiber->stack[i])\n        {\n          equal_stacks = FALSE;\n          break;\n        }\n      }\n\n      if (equal_stacks)\n        return TRUE;\n    }\n\n    fiber = fiber->next;\n  }\n\n  return FALSE;\n}\n\n\n//\n// _yr_re_fiber_split\n//\n// Clones a fiber in fiber_list and inserts the cloned fiber just after.\n// the original one. If fiber_list is:\n//\n//   f1 -> f2 -> f3 -> f4\n//\n// Splitting f2 will result in:\n//\n//   f1 -> f2 -> cloned f2 -> f3 -> f4\n//\n\nint _yr_re_fiber_split(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER* fiber,\n    RE_FIBER** new_fiber)\n{\n  int32_t i;\n\n  FAIL_ON_ERROR(_yr_re_fiber_create(fiber_pool, new_fiber));\n\n  (*new_fiber)->sp = fiber->sp;\n  (*new_fiber)->ip = fiber->ip;\n  (*new_fiber)->rc = fiber->rc;\n\n  for (i = 0; i <= fiber->sp; i++)\n    (*new_fiber)->stack[i] = fiber->stack[i];\n\n  (*new_fiber)->next = fiber->next;\n  (*new_fiber)->prev = fiber;\n\n  if (fiber->next != NULL)\n    fiber->next->prev = *new_fiber;\n\n  fiber->next = *new_fiber;\n\n  if (fiber_list->tail == fiber)\n    fiber_list->tail = *new_fiber;\n\n  assert(fiber_list->tail->next == NULL);\n  assert(fiber_list->head->prev == NULL);\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// _yr_re_fiber_kill\n//\n// Kills a given fiber by removing it from the fiber list and putting it\n// in the fiber pool.\n//\n\nRE_FIBER* _yr_re_fiber_kill(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER* fiber)\n{\n  RE_FIBER* next_fiber = fiber->next;\n\n  if (fiber->prev != NULL)\n    fiber->prev->next = next_fiber;\n\n  if (next_fiber != NULL)\n    next_fiber->prev = fiber->prev;\n\n  if (fiber_pool->fibers.tail != NULL)\n    fiber_pool->fibers.tail->next = fiber;\n\n  if (fiber_list->tail == fiber)\n    fiber_list->tail = fiber->prev;\n\n  if (fiber_list->head == fiber)\n    fiber_list->head = next_fiber;\n\n  fiber->next = NULL;\n  fiber->prev = fiber_pool->fibers.tail;\n  fiber_pool->fibers.tail = fiber;\n\n  if (fiber_pool->fibers.head == NULL)\n    fiber_pool->fibers.head = fiber;\n\n  return next_fiber;\n}\n\n\n//\n// _yr_re_fiber_kill_tail\n//\n// Kills all fibers from the given one up to the end of the fiber list.\n//\n\nvoid _yr_re_fiber_kill_tail(\n  RE_FIBER_LIST* fiber_list,\n  RE_FIBER_POOL* fiber_pool,\n  RE_FIBER* fiber)\n{\n  RE_FIBER* prev_fiber = fiber->prev;\n\n  if (prev_fiber != NULL)\n    prev_fiber->next = NULL;\n\n  fiber->prev = fiber_pool->fibers.tail;\n\n  if (fiber_pool->fibers.tail != NULL)\n    fiber_pool->fibers.tail->next = fiber;\n\n  fiber_pool->fibers.tail = fiber_list->tail;\n  fiber_list->tail = prev_fiber;\n\n  if (fiber_list->head == fiber)\n    fiber_list->head = NULL;\n\n  if (fiber_pool->fibers.head == NULL)\n    fiber_pool->fibers.head = fiber;\n}\n\n\n//\n// _yr_re_fiber_kill_all\n//\n// Kills all fibers in the fiber list.\n//\n\nvoid _yr_re_fiber_kill_all(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool)\n{\n  if (fiber_list->head != NULL)\n    _yr_re_fiber_kill_tail(fiber_list, fiber_pool, fiber_list->head);\n}\n\n\n//\n// _yr_re_fiber_sync\n//\n// Executes a fiber until reaching an \"matching\" instruction. A \"matching\"\n// instruction is one that actually reads a byte from the input and performs\n// some matching. If the fiber reaches a split instruction, the new fiber is\n// also synced.\n//\n\nint _yr_re_fiber_sync(\n    RE_FIBER_LIST* fiber_list,\n    RE_FIBER_POOL* fiber_pool,\n    RE_FIBER* fiber_to_sync)\n{\n  // A array for keeping track of which split instructions has been already\n  // executed. Each split instruction within a regexp has an associated ID\n  // between 0 and RE_MAX_SPLIT_ID. Keeping track of executed splits is\n  // required to avoid infinite loops in regexps like (a*)* or (a|)*\n\n  RE_SPLIT_ID_TYPE splits_executed[RE_MAX_SPLIT_ID];\n  RE_SPLIT_ID_TYPE splits_executed_count = 0;\n  RE_SPLIT_ID_TYPE split_id, splits_executed_idx;\n\n  int split_already_executed;\n\n  RE_REPEAT_ARGS* repeat_args;\n  RE_REPEAT_ANY_ARGS* repeat_any_args;\n\n  RE_FIBER* fiber;\n  RE_FIBER* last;\n  RE_FIBER* prev;\n  RE_FIBER* next;\n  RE_FIBER* branch_a;\n  RE_FIBER* branch_b;\n\n  fiber = fiber_to_sync;\n  prev = fiber_to_sync->prev;\n  last = fiber_to_sync->next;\n\n  while(fiber != last)\n  {\n    uint8_t opcode = *fiber->ip;\n\n    switch(opcode)\n    {\n      case RE_OPCODE_SPLIT_A:\n      case RE_OPCODE_SPLIT_B:\n\n        split_id = *(RE_SPLIT_ID_TYPE*)(fiber->ip + 1);\n        split_already_executed = FALSE;\n\n        for (splits_executed_idx = 0;\n             splits_executed_idx < splits_executed_count;\n             splits_executed_idx++)\n        {\n          if (split_id == splits_executed[splits_executed_idx])\n          {\n            split_already_executed = TRUE;\n            break;\n          }\n        }\n\n        if (split_already_executed)\n        {\n          fiber = _yr_re_fiber_kill(fiber_list, fiber_pool, fiber);\n        }\n        else\n        {\n          branch_a = fiber;\n\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          // With RE_OPCODE_SPLIT_A the current fiber continues at the next\n          // instruction in the stream (branch A), while the newly created\n          // fiber starts at the address indicated by the instruction (branch B)\n          // RE_OPCODE_SPLIT_B has the opposite behavior.\n\n          if (opcode == RE_OPCODE_SPLIT_B)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          // Branch A continues at the next instruction\n\n          branch_a->ip += (sizeof(RE_SPLIT_ID_TYPE) + 3);\n\n          // Branch B adds the offset encoded in the opcode to its instruction\n          // pointer.\n\n          branch_b->ip += *(int16_t*)(\n              branch_b->ip\n              + 1  // opcode size\n              + sizeof(RE_SPLIT_ID_TYPE));\n\n          splits_executed[splits_executed_count] = split_id;\n          splits_executed_count++;\n        }\n\n        break;\n\n      case RE_OPCODE_REPEAT_START_GREEDY:\n      case RE_OPCODE_REPEAT_START_UNGREEDY:\n\n        repeat_args = (RE_REPEAT_ARGS*)(fiber->ip + 1);\n        assert(repeat_args->max > 0);\n        branch_a = fiber;\n\n        if (repeat_args->min == 0)\n        {\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          if (opcode == RE_OPCODE_REPEAT_START_UNGREEDY)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          branch_b->ip += repeat_args->offset;\n        }\n\n        branch_a->stack[++branch_a->sp] = 0;\n        branch_a->ip += (1 + sizeof(RE_REPEAT_ARGS));\n        break;\n\n      case RE_OPCODE_REPEAT_END_GREEDY:\n      case RE_OPCODE_REPEAT_END_UNGREEDY:\n\n        repeat_args = (RE_REPEAT_ARGS*)(fiber->ip + 1);\n        fiber->stack[fiber->sp]++;\n\n        if (fiber->stack[fiber->sp] < repeat_args->min)\n        {\n          fiber->ip += repeat_args->offset;\n          break;\n        }\n\n        branch_a = fiber;\n\n        if (fiber->stack[fiber->sp] < repeat_args->max)\n        {\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          if (opcode == RE_OPCODE_REPEAT_END_GREEDY)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          branch_a->sp--;\n          branch_b->ip += repeat_args->offset;\n        }\n\n        branch_a->ip += (1 + sizeof(RE_REPEAT_ARGS));\n        break;\n\n      case RE_OPCODE_REPEAT_ANY_GREEDY:\n      case RE_OPCODE_REPEAT_ANY_UNGREEDY:\n\n        repeat_any_args = (RE_REPEAT_ANY_ARGS*)(fiber->ip + 1);\n\n        // If repetition counter (rc) is -1 it means that we are reaching this\n        // instruction from the previous one in the instructions stream. In\n        // this case let's initialize the counter to 0 and start looping.\n\n        if (fiber->rc == -1)\n          fiber->rc = 0;\n\n        if (fiber->rc < repeat_any_args->min)\n        {\n          // Increase repetition counter and continue with next fiber. The\n          // instruction pointer for this fiber is not incremented yet, this\n          // fiber spins in this same instruction until reaching the minimum\n          // number of repetitions.\n\n          fiber->rc++;\n          fiber = fiber->next;\n        }\n        else if (fiber->rc < repeat_any_args->max)\n        {\n          // Once the minimum number of repetitions are matched one fiber\n          // remains spinning in this instruction until reaching the maximum\n          // number of repetitions while new fibers are created. New fibers\n          // start executing at the next instruction.\n\n          next = fiber->next;\n          branch_a = fiber;\n\n          FAIL_ON_ERROR(_yr_re_fiber_split(\n              fiber_list, fiber_pool, branch_a, &branch_b));\n\n          if (opcode == RE_OPCODE_REPEAT_ANY_UNGREEDY)\n            yr_swap(branch_a, branch_b, RE_FIBER*);\n\n          branch_a->rc++;\n          branch_b->ip += (1 + sizeof(RE_REPEAT_ANY_ARGS));\n          branch_b->rc = -1;\n\n          FAIL_ON_ERROR(_yr_re_fiber_sync(\n              fiber_list, fiber_pool, branch_b));\n\n          fiber = next;\n        }\n        else\n        {\n          // When the maximum number of repetitions is reached the fiber keeps\n          // executing at the next instruction. The repetition counter is set\n          // to -1 indicating that we are not spinning in a repeat instruction\n          // anymore.\n\n          fiber->ip += (1 + sizeof(RE_REPEAT_ANY_ARGS));\n          fiber->rc = -1;\n        }\n\n        break;\n\n      case RE_OPCODE_JUMP:\n        fiber->ip += *(int16_t*)(fiber->ip + 1);\n        break;\n\n      default:\n        if (_yr_re_fiber_exists(fiber_list, fiber, prev))\n          fiber = _yr_re_fiber_kill(fiber_list, fiber_pool, fiber);\n        else\n          fiber = fiber->next;\n    }\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\n//\n// yr_re_exec\n//\n// Executes a regular expression. The specified regular expression will try to\n// match the data starting at the address specified by \"input\". The \"input\"\n// pointer can point to any address inside a memory buffer. Arguments\n// \"input_forwards_size\" and \"input_backwards_size\" indicate how many bytes\n// can be accesible starting at \"input\" and going forwards and backwards\n// respectively.\n//\n//   <--- input_backwards_size -->|<----------- input_forwards_size -------->\n//  |--------  memory buffer  -----------------------------------------------|\n//                                ^\n//                              input\n//\n// Args:\n//   uint8_t* re_code                 - Regexp code be executed\n//   uint8_t* input                   - Pointer to input data\n//   size_t input_forwards_size       - Number of accessible bytes starting at\n//                                      \"input\" and going forwards.\n//   size_t input_backwards_size      - Number of accessible bytes starting at\n//                                      \"input\" and going backwards\n//   int flags                        - Flags:\n//      RE_FLAGS_SCAN\n//      RE_FLAGS_BACKWARDS\n//      RE_FLAGS_EXHAUSTIVE\n//      RE_FLAGS_WIDE\n//      RE_FLAGS_NO_CASE\n//      RE_FLAGS_DOT_ALL\n//   RE_MATCH_CALLBACK_FUNC callback  - Callback function\n//   void* callback_args              - Callback argument\n//   int*  matches                    - Pointer to an integer receiving the\n//                                      number of matching bytes. Notice that\n//                                      0 means a zero-length match, while no\n//                                      matches is -1.\n// Returns:\n//    ERROR_SUCCESS or any other error code.\n\nint yr_re_exec(\n    uint8_t* re_code,\n    uint8_t* input_data,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches)\n{\n  uint8_t* ip;\n  uint8_t* input;\n  uint8_t mask;\n  uint8_t value;\n  uint8_t character_size;\n\n  RE_FIBER_LIST fibers;\n  RE_THREAD_STORAGE* storage;\n  RE_FIBER* fiber;\n  RE_FIBER* next_fiber;\n\n  int bytes_matched;\n  int max_bytes_matched;\n  int match;\n  int input_incr;\n  int kill;\n  int action;\n\n  #define ACTION_NONE       0\n  #define ACTION_CONTINUE   1\n  #define ACTION_KILL       2\n  #define ACTION_KILL_TAIL  3\n\n  #define prolog { \\\n      if ((bytes_matched >= max_bytes_matched) || \\\n          (character_size == 2 && *(input + 1) != 0)) \\\n      { \\\n        action = ACTION_KILL; \\\n        break; \\\n      } \\\n    }\n\n  if (matches != NULL)\n    *matches = -1;\n\n  if (_yr_re_alloc_storage(&storage) != ERROR_SUCCESS)\n    return -2;\n\n  if (flags & RE_FLAGS_WIDE)\n    character_size = 2;\n  else\n    character_size = 1;\n\n  input = input_data;\n  input_incr = character_size;\n\n  if (flags & RE_FLAGS_BACKWARDS)\n  {\n    max_bytes_matched = (int) yr_min(input_backwards_size, RE_SCAN_LIMIT);\n    input -= character_size;\n    input_incr = -input_incr;\n  }\n  else\n  {\n    max_bytes_matched = (int) yr_min(input_forwards_size, RE_SCAN_LIMIT);\n  }\n\n  // Round down max_bytes_matched to a multiple of character_size, this way if\n  // character_size is 2 and max_bytes_matched is odd we are ignoring the\n  // extra byte which can't match anyways.\n\n  max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size;\n  bytes_matched = 0;\n\n  FAIL_ON_ERROR(_yr_re_fiber_create(&storage->fiber_pool, &fiber));\n\n  fiber->ip = re_code;\n  fibers.head = fiber;\n  fibers.tail = fiber;\n\n  FAIL_ON_ERROR_WITH_CLEANUP(\n      _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n      _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n\n  while (fibers.head != NULL)\n  {\n    fiber = fibers.head;\n\n    while(fiber != NULL)\n    {\n      ip = fiber->ip;\n      action = ACTION_NONE;\n\n      switch(*ip)\n      {\n        case RE_OPCODE_ANY:\n          prolog;\n          match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_REPEAT_ANY_GREEDY:\n        case RE_OPCODE_REPEAT_ANY_UNGREEDY:\n          prolog;\n          match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);\n          action = match ? ACTION_NONE : ACTION_KILL;\n\n          // The instruction pointer is not incremented here. The current fiber\n          // spins in this instruction until reaching the required number of\n          // repetitions. The code controlling the number of repetitions is in\n          // _yr_re_fiber_sync.\n\n          break;\n\n        case RE_OPCODE_LITERAL:\n          prolog;\n          if (flags & RE_FLAGS_NO_CASE)\n            match = yr_lowercase[*input] == yr_lowercase[*(ip + 1)];\n          else\n            match = (*input == *(ip + 1));\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 2;\n          break;\n\n        case RE_OPCODE_MASKED_LITERAL:\n          prolog;\n          value = *(int16_t*)(ip + 1) & 0xFF;\n          mask = *(int16_t*)(ip + 1) >> 8;\n\n          // We don't need to take into account the case-insensitive\n          // case because this opcode is only used with hex strings,\n          // which can't be case-insensitive.\n\n          match = ((*input & mask) == value);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 3;\n          break;\n\n        case RE_OPCODE_CLASS:\n          prolog;\n          match = CHAR_IN_CLASS(*input, ip + 1);\n          if (!match && (flags & RE_FLAGS_NO_CASE))\n            match = CHAR_IN_CLASS(yr_altercase[*input], ip + 1);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 33;\n          break;\n\n        case RE_OPCODE_WORD_CHAR:\n          prolog;\n          match = _yr_re_is_word_char(input, character_size);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_NON_WORD_CHAR:\n          prolog;\n          match = !_yr_re_is_word_char(input, character_size);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_SPACE:\n        case RE_OPCODE_NON_SPACE:\n\n          prolog;\n\n          switch(*input)\n          {\n            case ' ':\n            case '\\t':\n            case '\\r':\n            case '\\n':\n            case '\\v':\n            case '\\f':\n              match = TRUE;\n              break;\n            default:\n              match = FALSE;\n          }\n\n          if (*ip == RE_OPCODE_NON_SPACE)\n            match = !match;\n\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_DIGIT:\n          prolog;\n          match = isdigit(*input);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_NON_DIGIT:\n          prolog;\n          match = !isdigit(*input);\n          action = match ? ACTION_NONE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_WORD_BOUNDARY:\n        case RE_OPCODE_NON_WORD_BOUNDARY:\n\n          if (bytes_matched == 0 && input_backwards_size < character_size)\n          {\n            match = TRUE;\n          }\n          else if (bytes_matched >= max_bytes_matched)\n          {\n            match = TRUE;\n          }\n          else\n          {\n            assert(input <  input_data + input_forwards_size);\n            assert(input >= input_data - input_backwards_size);\n\n            assert(input - input_incr <  input_data + input_forwards_size);\n            assert(input - input_incr >= input_data - input_backwards_size);\n\n            match = _yr_re_is_word_char(input, character_size) != \\\n                    _yr_re_is_word_char(input - input_incr, character_size);\n          }\n\n          if (*ip == RE_OPCODE_NON_WORD_BOUNDARY)\n            match = !match;\n\n          action = match ? ACTION_CONTINUE : ACTION_KILL;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_MATCH_AT_START:\n          if (flags & RE_FLAGS_BACKWARDS)\n            kill = input_backwards_size > (size_t) bytes_matched;\n          else\n            kill = input_backwards_size > 0 || (bytes_matched != 0);\n          action = kill ? ACTION_KILL : ACTION_CONTINUE;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_MATCH_AT_END:\n          kill = flags & RE_FLAGS_BACKWARDS ||\n                 input_forwards_size > (size_t) bytes_matched;\n          action = kill ? ACTION_KILL : ACTION_CONTINUE;\n          fiber->ip += 1;\n          break;\n\n        case RE_OPCODE_MATCH:\n\n          if (matches != NULL)\n            *matches = bytes_matched;\n\n          if (flags & RE_FLAGS_EXHAUSTIVE)\n          {\n            if (callback != NULL)\n            {\n              if (flags & RE_FLAGS_BACKWARDS)\n              {\n                FAIL_ON_ERROR_WITH_CLEANUP(\n                    callback(\n                        input + character_size,\n                        bytes_matched,\n                        flags,\n                        callback_args),\n                    _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n              }\n              else\n              {\n                FAIL_ON_ERROR_WITH_CLEANUP(\n                    callback(\n                        input_data,\n                        bytes_matched,\n                        flags,\n                        callback_args),\n                    _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n              }\n            }\n\n            action = ACTION_KILL;\n          }\n          else\n          {\n            action = ACTION_KILL_TAIL;\n          }\n\n          break;\n\n        default:\n          assert(FALSE);\n      }\n\n      switch(action)\n      {\n        case ACTION_KILL:\n          fiber = _yr_re_fiber_kill(&fibers, &storage->fiber_pool, fiber);\n          break;\n\n        case ACTION_KILL_TAIL:\n          _yr_re_fiber_kill_tail(&fibers, &storage->fiber_pool, fiber);\n          fiber = NULL;\n          break;\n\n        case ACTION_CONTINUE:\n          FAIL_ON_ERROR_WITH_CLEANUP(\n              _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n              _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n          break;\n\n        default:\n          next_fiber = fiber->next;\n          FAIL_ON_ERROR_WITH_CLEANUP(\n              _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n              _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n          fiber = next_fiber;\n      }\n    }\n\n    input += input_incr;\n    bytes_matched += character_size;\n\n    if (flags & RE_FLAGS_SCAN && bytes_matched < max_bytes_matched)\n    {\n      FAIL_ON_ERROR_WITH_CLEANUP(\n          _yr_re_fiber_create(&storage->fiber_pool, &fiber),\n          _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n\n      fiber->ip = re_code;\n      _yr_re_fiber_append(&fibers, fiber);\n\n      FAIL_ON_ERROR_WITH_CLEANUP(\n          _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber),\n          _yr_re_fiber_kill_all(&fibers, &storage->fiber_pool));\n    }\n  }\n\n  return ERROR_SUCCESS;\n}\n\n\nint yr_re_fast_exec(\n    uint8_t* code,\n    uint8_t* input_data,\n    size_t input_forwards_size,\n    size_t input_backwards_size,\n    int flags,\n    RE_MATCH_CALLBACK_FUNC callback,\n    void* callback_args,\n    int* matches)\n{\n  RE_REPEAT_ANY_ARGS* repeat_any_args;\n\n  uint8_t* code_stack[MAX_FAST_RE_STACK];\n  uint8_t* input_stack[MAX_FAST_RE_STACK];\n  int matches_stack[MAX_FAST_RE_STACK];\n\n  uint8_t* ip = code;\n  uint8_t* input = input_data;\n  uint8_t* next_input;\n  uint8_t* next_opcode;\n  uint8_t mask;\n  uint8_t value;\n\n  int i;\n  int stop;\n  int input_incr;\n  int sp = 0;\n  int bytes_matched;\n  int max_bytes_matched;\n\n  max_bytes_matched = flags & RE_FLAGS_BACKWARDS ?\n      (int) input_backwards_size :\n      (int) input_forwards_size;\n\n  input_incr = flags & RE_FLAGS_BACKWARDS ? -1 : 1;\n\n  if (flags & RE_FLAGS_BACKWARDS)\n    input--;\n\n  code_stack[sp] = code;\n  input_stack[sp] = input;\n  matches_stack[sp] = 0;\n  sp++;\n\n  while (sp > 0)\n  {\n    sp--;\n    ip = code_stack[sp];\n    input = input_stack[sp];\n    bytes_matched = matches_stack[sp];\n    stop = FALSE;\n\n    while(!stop)\n    {\n      if (*ip == RE_OPCODE_MATCH)\n      {\n        if (flags & RE_FLAGS_EXHAUSTIVE)\n        {\n          FAIL_ON_ERROR(callback(\n             flags & RE_FLAGS_BACKWARDS ? input + 1 : input_data,\n             bytes_matched,\n             flags,\n             callback_args));\n\n          break;\n        }\n        else\n        {\n          if (matches != NULL)\n            *matches = bytes_matched;\n\n          return ERROR_SUCCESS;\n        }\n      }\n\n      if (bytes_matched >= max_bytes_matched)\n        break;\n\n      switch(*ip)\n      {\n        case RE_OPCODE_LITERAL:\n\n          if (*input == *(ip + 1))\n          {\n            bytes_matched++;\n            input += input_incr;\n            ip += 2;\n          }\n          else\n          {\n            stop = TRUE;\n          }\n\n          break;\n\n        case RE_OPCODE_MASKED_LITERAL:\n\n          value = *(int16_t*)(ip + 1) & 0xFF;\n          mask = *(int16_t*)(ip + 1) >> 8;\n\n          if ((*input & mask) == value)\n          {\n            bytes_matched++;\n            input += input_incr;\n            ip += 3;\n          }\n          else\n          {\n            stop = TRUE;\n          }\n\n          break;\n\n        case RE_OPCODE_ANY:\n\n          bytes_matched++;\n          input += input_incr;\n          ip += 1;\n\n          break;\n\n        case RE_OPCODE_REPEAT_ANY_UNGREEDY:\n\n          repeat_any_args = (RE_REPEAT_ANY_ARGS*)(ip + 1);\n          next_opcode = ip + 1 + sizeof(RE_REPEAT_ANY_ARGS);\n\n          for (i = repeat_any_args->min + 1; i <= repeat_any_args->max; i++)\n          {\n            next_input = input + i * input_incr;\n\n            if (bytes_matched + i >= max_bytes_matched)\n              break;\n\n            if ( *(next_opcode) != RE_OPCODE_LITERAL ||\n                (*(next_opcode) == RE_OPCODE_LITERAL &&\n                 *(next_opcode + 1) == *next_input))\n            {\n              if (sp >= MAX_FAST_RE_STACK)\n                return -4;\n\n              code_stack[sp] = next_opcode;\n              input_stack[sp] = next_input;\n              matches_stack[sp] = bytes_matched + i;\n              sp++;\n            }\n          }\n\n          input += input_incr * repeat_any_args->min;\n          bytes_matched += repeat_any_args->min;\n          ip = next_opcode;\n\n          break;\n\n        default:\n          assert(FALSE);\n      }\n    }\n  }\n\n  if (matches != NULL)\n    *matches = -1;\n\n  return ERROR_SUCCESS;\n}\n\n\nvoid _yr_re_print_node(\n    RE_NODE* re_node)\n{\n  int i;\n\n  if (re_node == NULL)\n    return;\n\n  switch(re_node->type)\n  {\n  case RE_NODE_ALT:\n    printf(\"Alt(\");\n    _yr_re_print_node(re_node->left);\n    printf(\", \");\n    _yr_re_print_node(re_node->right);\n    printf(\")\");\n    break;\n\n  case RE_NODE_CONCAT:\n    printf(\"Cat(\");\n    _yr_re_print_node(re_node->left);\n    printf(\", \");\n    _yr_re_print_node(re_node->right);\n    printf(\")\");\n    break;\n\n  case RE_NODE_STAR:\n    printf(\"Star(\");\n    _yr_re_print_node(re_node->left);\n    printf(\")\");\n    break;\n\n  case RE_NODE_PLUS:\n    printf(\"Plus(\");\n    _yr_re_print_node(re_node->left);\n    printf(\")\");\n    break;\n\n  case RE_NODE_LITERAL:\n    printf(\"Lit(%02X)\", re_node->value);\n    break;\n\n  case RE_NODE_MASKED_LITERAL:\n    printf(\"MaskedLit(%02X,%02X)\", re_node->value, re_node->mask);\n    break;\n\n  case RE_NODE_WORD_CHAR:\n    printf(\"WordChar\");\n    break;\n\n  case RE_NODE_NON_WORD_CHAR:\n    printf(\"NonWordChar\");\n    break;\n\n  case RE_NODE_SPACE:\n    printf(\"Space\");\n    break;\n\n  case RE_NODE_NON_SPACE:\n    printf(\"NonSpace\");\n    break;\n\n  case RE_NODE_DIGIT:\n    printf(\"Digit\");\n    break;\n\n  case RE_NODE_NON_DIGIT:\n    printf(\"NonDigit\");\n    break;\n\n  case RE_NODE_ANY:\n    printf(\"Any\");\n    break;\n\n  case RE_NODE_RANGE:\n    printf(\"Range(%d-%d, \", re_node->start, re_node->end);\n    _yr_re_print_node(re_node->left);\n    printf(\")\");\n    break;\n\n  case RE_NODE_CLASS:\n    printf(\"Class(\");\n    for (i = 0; i < 256; i++)\n      if (CHAR_IN_CLASS(i, re_node->class_vector))\n        printf(\"%02X,\", i);\n    printf(\")\");\n    break;\n\n  default:\n    printf(\"???\");\n    break;\n  }\n}\n\nvoid yr_re_print(\n    RE_AST* re_ast)\n{\n  _yr_re_print_node(re_ast->root_node);\n}\n", "/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */\n\n/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */\n\n/* Identify Bison output.  */\n#define YYBISON 1\n\n/* Bison version.  */\n#define YYBISON_VERSION \"3.0.4\"\n\n/* Skeleton name.  */\n#define YYSKELETON_NAME \"yacc.c\"\n\n/* Pure parsers.  */\n#define YYPURE 1\n\n/* Push parsers.  */\n#define YYPUSH 0\n\n/* Pull parsers.  */\n#define YYPULL 1\n\n\n/* Substitute the variable and function names.  */\n#define yyparse         re_yyparse\n#define yylex           re_yylex\n#define yyerror         re_yyerror\n#define yydebug         re_yydebug\n#define yynerrs         re_yynerrs\n\n\n/* Copy the first part of user declarations.  */\n#line 30 \"re_grammar.y\" /* yacc.c:339  */\n\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define incr_ast_levels() \\\n    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n    { \\\n      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n      YYABORT; \\\n    }\n\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n\n#line 114 \"re_grammar.c\" /* yacc.c:339  */\n\n# ifndef YY_NULLPTR\n#  if defined __cplusplus && 201103L <= __cplusplus\n#   define YY_NULLPTR nullptr\n#  else\n#   define YY_NULLPTR 0\n#  endif\n# endif\n\n/* Enabling verbose error messages.  */\n#ifdef YYERROR_VERBOSE\n# undef YYERROR_VERBOSE\n# define YYERROR_VERBOSE 1\n#else\n# define YYERROR_VERBOSE 0\n#endif\n\n/* In a future release of Bison, this section will be replaced\n   by #include \"y.tab.h\".  */\n#ifndef YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n# define YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int re_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _CHAR_ = 258,\n    _ANY_ = 259,\n    _RANGE_ = 260,\n    _CLASS_ = 261,\n    _WORD_CHAR_ = 262,\n    _NON_WORD_CHAR_ = 263,\n    _SPACE_ = 264,\n    _NON_SPACE_ = 265,\n    _DIGIT_ = 266,\n    _NON_DIGIT_ = 267,\n    _WORD_BOUNDARY_ = 268,\n    _NON_WORD_BOUNDARY_ = 269\n  };\n#endif\n/* Tokens.  */\n#define _CHAR_ 258\n#define _ANY_ 259\n#define _RANGE_ 260\n#define _CLASS_ 261\n#define _WORD_CHAR_ 262\n#define _NON_WORD_CHAR_ 263\n#define _SPACE_ 264\n#define _NON_SPACE_ 265\n#define _DIGIT_ 266\n#define _NON_DIGIT_ 267\n#define _WORD_BOUNDARY_ 268\n#define _NON_WORD_BOUNDARY_ 269\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 81 \"re_grammar.y\" /* yacc.c:355  */\n\n  int integer;\n  uint32_t range;\n  RE_NODE* re_node;\n  uint8_t* class_vector;\n\n#line 189 \"re_grammar.c\" /* yacc.c:355  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_RE_YY_RE_GRAMMAR_H_INCLUDED  */\n\n/* Copy the second part of user declarations.  */\n\n#line 205 \"re_grammar.c\" /* yacc.c:358  */\n\n#ifdef short\n# undef short\n#endif\n\n#ifdef YYTYPE_UINT8\ntypedef YYTYPE_UINT8 yytype_uint8;\n#else\ntypedef unsigned char yytype_uint8;\n#endif\n\n#ifdef YYTYPE_INT8\ntypedef YYTYPE_INT8 yytype_int8;\n#else\ntypedef signed char yytype_int8;\n#endif\n\n#ifdef YYTYPE_UINT16\ntypedef YYTYPE_UINT16 yytype_uint16;\n#else\ntypedef unsigned short int yytype_uint16;\n#endif\n\n#ifdef YYTYPE_INT16\ntypedef YYTYPE_INT16 yytype_int16;\n#else\ntypedef short int yytype_int16;\n#endif\n\n#ifndef YYSIZE_T\n# ifdef __SIZE_TYPE__\n#  define YYSIZE_T __SIZE_TYPE__\n# elif defined size_t\n#  define YYSIZE_T size_t\n# elif ! defined YYSIZE_T\n#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYSIZE_T size_t\n# else\n#  define YYSIZE_T unsigned int\n# endif\n#endif\n\n#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)\n\n#ifndef YY_\n# if defined YYENABLE_NLS && YYENABLE_NLS\n#  if ENABLE_NLS\n#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */\n#   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)\n#  endif\n# endif\n# ifndef YY_\n#  define YY_(Msgid) Msgid\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE\n# if (defined __GNUC__                                               \\\n      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\\n     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C\n#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)\n# else\n#  define YY_ATTRIBUTE(Spec) /* empty */\n# endif\n#endif\n\n#ifndef YY_ATTRIBUTE_PURE\n# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))\n#endif\n\n#ifndef YY_ATTRIBUTE_UNUSED\n# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))\n#endif\n\n#if !defined _Noreturn \\\n     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)\n# if defined _MSC_VER && 1200 <= _MSC_VER\n#  define _Noreturn __declspec (noreturn)\n# else\n#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))\n# endif\n#endif\n\n/* Suppress unused-variable warnings by \"using\" E.  */\n#if ! defined lint || defined __GNUC__\n# define YYUSE(E) ((void) (E))\n#else\n# define YYUSE(E) /* empty */\n#endif\n\n#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__\n/* Suppress an incorrect diagnostic about yylval being uninitialized.  */\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\\n    _Pragma (\"GCC diagnostic push\") \\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n    _Pragma (\"GCC diagnostic pop\")\n#else\n# define YY_INITIAL_VALUE(Value) Value\n#endif\n#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n# define YY_IGNORE_MAYBE_UNINITIALIZED_END\n#endif\n#ifndef YY_INITIAL_VALUE\n# define YY_INITIAL_VALUE(Value) /* Nothing. */\n#endif\n\n\n#if ! defined yyoverflow || YYERROR_VERBOSE\n\n/* The parser invokes alloca or malloc; define the necessary symbols.  */\n\n# ifdef YYSTACK_USE_ALLOCA\n#  if YYSTACK_USE_ALLOCA\n#   ifdef __GNUC__\n#    define YYSTACK_ALLOC __builtin_alloca\n#   elif defined __BUILTIN_VA_ARG_INCR\n#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */\n#   elif defined _AIX\n#    define YYSTACK_ALLOC __alloca\n#   elif defined _MSC_VER\n#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */\n#    define alloca _alloca\n#   else\n#    define YYSTACK_ALLOC alloca\n#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS\n#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */\n#     ifndef EXIT_SUCCESS\n#      define EXIT_SUCCESS 0\n#     endif\n#    endif\n#   endif\n#  endif\n# endif\n\n# ifdef YYSTACK_ALLOC\n   /* Pacify GCC's 'empty if-body' warning.  */\n#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n    /* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */\n#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */\n#  endif\n# else\n#  define YYSTACK_ALLOC YYMALLOC\n#  define YYSTACK_FREE YYFREE\n#  ifndef YYSTACK_ALLOC_MAXIMUM\n#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM\n#  endif\n#  if (defined __cplusplus && ! defined EXIT_SUCCESS \\\n       && ! ((defined YYMALLOC || defined malloc) \\\n             && (defined YYFREE || defined free)))\n#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */\n#   ifndef EXIT_SUCCESS\n#    define EXIT_SUCCESS 0\n#   endif\n#  endif\n#  ifndef YYMALLOC\n#   define YYMALLOC malloc\n#   if ! defined malloc && ! defined EXIT_SUCCESS\nvoid *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n#  ifndef YYFREE\n#   define YYFREE free\n#   if ! defined free && ! defined EXIT_SUCCESS\nvoid free (void *); /* INFRINGES ON USER NAME SPACE */\n#   endif\n#  endif\n# endif\n#endif /* ! defined yyoverflow || YYERROR_VERBOSE */\n\n\n#if (! defined yyoverflow \\\n     && (! defined __cplusplus \\\n         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))\n\n/* A type that is properly aligned for any stack member.  */\nunion yyalloc\n{\n  yytype_int16 yyss_alloc;\n  YYSTYPE yyvs_alloc;\n};\n\n/* The size of the maximum gap between one aligned stack and the next.  */\n# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)\n\n/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */\n# define YYSTACK_BYTES(N) \\\n     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\\n      + YYSTACK_GAP_MAXIMUM)\n\n# define YYCOPY_NEEDED 1\n\n/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */\n# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\\n    do                                                                  \\\n      {                                                                 \\\n        YYSIZE_T yynewbytes;                                            \\\n        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\\n        Stack = &yyptr->Stack_alloc;                                    \\\n        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\\n        yyptr += yynewbytes / sizeof (*yyptr);                          \\\n      }                                                                 \\\n    while (0)\n\n#endif\n\n#if defined YYCOPY_NEEDED && YYCOPY_NEEDED\n/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */\n# ifndef YYCOPY\n#  if defined __GNUC__ && 1 < __GNUC__\n#   define YYCOPY(Dst, Src, Count) \\\n      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))\n#  else\n#   define YYCOPY(Dst, Src, Count)              \\\n      do                                        \\\n        {                                       \\\n          YYSIZE_T yyi;                         \\\n          for (yyi = 0; yyi < (Count); yyi++)   \\\n            (Dst)[yyi] = (Src)[yyi];            \\\n        }                                       \\\n      while (0)\n#  endif\n# endif\n#endif /* !YYCOPY_NEEDED */\n\n/* YYFINAL -- State number of the termination state.  */\n#define YYFINAL  22\n/* YYLAST -- Last index in YYTABLE.  */\n#define YYLAST   45\n\n/* YYNTOKENS -- Number of terminals.  */\n#define YYNTOKENS  24\n/* YYNNTS -- Number of nonterminals.  */\n#define YYNNTS  6\n/* YYNRULES -- Number of rules.  */\n#define YYNRULES  31\n/* YYNSTATES -- Number of states.  */\n#define YYNSTATES  35\n\n/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */\n#define YYUNDEFTOK  2\n#define YYMAXUTOK   269\n\n#define YYTRANSLATE(YYX)                                                \\\n  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)\n\n/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */\nstatic const yytype_uint8 yytranslate[] =\n{\n       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,    20,     2,     2,     2,\n      21,    22,    16,    18,     2,     2,    23,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,    17,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,    19,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,    15,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,\n       5,     6,     7,     8,     9,    10,    11,    12,    13,    14\n};\n\n#if YYDEBUG\n  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\nstatic const yytype_uint16 yyrline[] =\n{\n       0,   112,   112,   117,   121,   125,   137,   156,   160,   173,\n     187,   203,   217,   233,   256,   280,   302,   325,   329,   335,\n     341,   347,   356,   362,   368,   376,   382,   388,   394,   400,\n     406,   412\n};\n#endif\n\n#if YYDEBUG || YYERROR_VERBOSE || 0\n/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */\nstatic const char *const yytname[] =\n{\n  \"$end\", \"error\", \"$undefined\", \"_CHAR_\", \"_ANY_\", \"_RANGE_\", \"_CLASS_\",\n  \"_WORD_CHAR_\", \"_NON_WORD_CHAR_\", \"_SPACE_\", \"_NON_SPACE_\", \"_DIGIT_\",\n  \"_NON_DIGIT_\", \"_WORD_BOUNDARY_\", \"_NON_WORD_BOUNDARY_\", \"'|'\", \"'*'\",\n  \"'?'\", \"'+'\", \"'^'\", \"'$'\", \"'('\", \"')'\", \"'.'\", \"$accept\", \"re\",\n  \"alternative\", \"concatenation\", \"repeat\", \"single\", YY_NULLPTR\n};\n#endif\n\n# ifdef YYPRINT\n/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */\nstatic const yytype_uint16 yytoknum[] =\n{\n       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n     265,   266,   267,   268,   269,   124,    42,    63,    43,    94,\n      36,    40,    41,    46\n};\n# endif\n\n#define YYPACT_NINF -12\n\n#define yypact_value_is_default(Yystate) \\\n  (!!((Yystate) == (-12)))\n\n#define YYTABLE_NINF -1\n\n#define yytable_value_is_error(Yytable_value) \\\n  0\n\n  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */\nstatic const yytype_int8 yypact[] =\n{\n      -1,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,\n     -12,   -12,   -12,   -12,    18,   -12,     1,   -11,    18,   -12,\n      -2,    21,   -12,    18,   -12,     0,    16,    17,    23,   -12,\n      18,   -12,   -12,   -12,   -12\n};\n\n  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */\nstatic const yytype_uint8 yydefact[] =\n{\n       0,     3,    24,    31,    25,    26,    27,    28,    29,    30,\n      18,    19,    20,    21,     0,    23,     0,     2,     4,     7,\n      17,     0,     1,     6,     8,    15,     9,    13,    11,    22,\n       5,    16,    10,    14,    12\n};\n\n  /* YYPGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yypgoto[] =\n{\n     -12,   -12,    28,    22,     5,   -12\n};\n\n  /* YYDEFGOTO[NTERM-NUM].  */\nstatic const yytype_int8 yydefgoto[] =\n{\n      -1,    16,    17,    18,    19,    20\n};\n\n  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */\nstatic const yytype_uint8 yytable[] =\n{\n       1,    22,     2,    25,    23,     3,     4,     5,     6,     7,\n       8,     9,    10,    11,    26,    27,    28,    31,    12,    13,\n      14,     2,    15,    24,     3,     4,     5,     6,     7,     8,\n       9,    10,    11,    32,    33,    24,    23,    12,    13,    14,\n      34,    15,    21,    29,     0,    30\n};\n\nstatic const yytype_int8 yycheck[] =\n{\n       1,     0,     3,     5,    15,     6,     7,     8,     9,    10,\n      11,    12,    13,    14,    16,    17,    18,    17,    19,    20,\n      21,     3,    23,    18,     6,     7,     8,     9,    10,    11,\n      12,    13,    14,    17,    17,    30,    15,    19,    20,    21,\n      17,    23,    14,    22,    -1,    23\n};\n\n  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */\nstatic const yytype_uint8 yystos[] =\n{\n       0,     1,     3,     6,     7,     8,     9,    10,    11,    12,\n      13,    14,    19,    20,    21,    23,    25,    26,    27,    28,\n      29,    26,     0,    15,    28,     5,    16,    17,    18,    22,\n      27,    17,    17,    17,    17\n};\n\n  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */\nstatic const yytype_uint8 yyr1[] =\n{\n       0,    24,    25,    25,    26,    26,    26,    27,    27,    28,\n      28,    28,    28,    28,    28,    28,    28,    28,    28,    28,\n      28,    28,    29,    29,    29,    29,    29,    29,    29,    29,\n      29,    29\n};\n\n  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */\nstatic const yytype_uint8 yyr2[] =\n{\n       0,     2,     1,     1,     1,     3,     2,     1,     2,     2,\n       3,     2,     3,     2,     3,     2,     3,     1,     1,     1,\n       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,\n       1,     1\n};\n\n\n#define yyerrok         (yyerrstatus = 0)\n#define yyclearin       (yychar = YYEMPTY)\n#define YYEMPTY         (-2)\n#define YYEOF           0\n\n#define YYACCEPT        goto yyacceptlab\n#define YYABORT         goto yyabortlab\n#define YYERROR         goto yyerrorlab\n\n\n#define YYRECOVERING()  (!!yyerrstatus)\n\n#define YYBACKUP(Token, Value)                                  \\\ndo                                                              \\\n  if (yychar == YYEMPTY)                                        \\\n    {                                                           \\\n      yychar = (Token);                                         \\\n      yylval = (Value);                                         \\\n      YYPOPSTACK (yylen);                                       \\\n      yystate = *yyssp;                                         \\\n      goto yybackup;                                            \\\n    }                                                           \\\n  else                                                          \\\n    {                                                           \\\n      yyerror (yyscanner, lex_env, YY_(\"syntax error: cannot back up\")); \\\n      YYERROR;                                                  \\\n    }                                                           \\\nwhile (0)\n\n/* Error token number */\n#define YYTERROR        1\n#define YYERRCODE       256\n\n\n\n/* Enable debugging if requested.  */\n#if YYDEBUG\n\n# ifndef YYFPRINTF\n#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n#  define YYFPRINTF fprintf\n# endif\n\n# define YYDPRINTF(Args)                        \\\ndo {                                            \\\n  if (yydebug)                                  \\\n    YYFPRINTF Args;                             \\\n} while (0)\n\n/* This macro is provided for backward compatibility. */\n#ifndef YY_LOCATION_PRINT\n# define YY_LOCATION_PRINT(File, Loc) ((void) 0)\n#endif\n\n\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\\ndo {                                                                      \\\n  if (yydebug)                                                            \\\n    {                                                                     \\\n      YYFPRINTF (stderr, \"%s \", Title);                                   \\\n      yy_symbol_print (stderr,                                            \\\n                  Type, Value, yyscanner, lex_env); \\\n      YYFPRINTF (stderr, \"\\n\");                                           \\\n    }                                                                     \\\n} while (0)\n\n\n/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/\n\nstatic void\nyy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  FILE *yyo = yyoutput;\n  YYUSE (yyo);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yyvaluep)\n    return;\n# ifdef YYPRINT\n  if (yytype < YYNTOKENS)\n    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);\n# endif\n  YYUSE (yytype);\n}\n\n\n/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/\n\nstatic void\nyy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  YYFPRINTF (yyoutput, \"%s %s (\",\n             yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);\n\n  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env);\n  YYFPRINTF (yyoutput, \")\");\n}\n\n/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/\n\nstatic void\nyy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)\n{\n  YYFPRINTF (stderr, \"Stack now\");\n  for (; yybottom <= yytop; yybottom++)\n    {\n      int yybot = *yybottom;\n      YYFPRINTF (stderr, \" %d\", yybot);\n    }\n  YYFPRINTF (stderr, \"\\n\");\n}\n\n# define YY_STACK_PRINT(Bottom, Top)                            \\\ndo {                                                            \\\n  if (yydebug)                                                  \\\n    yy_stack_print ((Bottom), (Top));                           \\\n} while (0)\n\n\n/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/\n\nstatic void\nyy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  unsigned long int yylno = yyrline[yyrule];\n  int yynrhs = yyr2[yyrule];\n  int yyi;\n  YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n             yyrule - 1, yylno);\n  /* The symbols being reduced.  */\n  for (yyi = 0; yyi < yynrhs; yyi++)\n    {\n      YYFPRINTF (stderr, \"   $%d = \", yyi + 1);\n      yy_symbol_print (stderr,\n                       yystos[yyssp[yyi + 1 - yynrhs]],\n                       &(yyvsp[(yyi + 1) - (yynrhs)])\n                                              , yyscanner, lex_env);\n      YYFPRINTF (stderr, \"\\n\");\n    }\n}\n\n# define YY_REDUCE_PRINT(Rule)          \\\ndo {                                    \\\n  if (yydebug)                          \\\n    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, lex_env); \\\n} while (0)\n\n/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */\nint yydebug;\n#else /* !YYDEBUG */\n# define YYDPRINTF(Args)\n# define YY_SYMBOL_PRINT(Title, Type, Value, Location)\n# define YY_STACK_PRINT(Bottom, Top)\n# define YY_REDUCE_PRINT(Rule)\n#endif /* !YYDEBUG */\n\n\n/* YYINITDEPTH -- initial size of the parser's stacks.  */\n#ifndef YYINITDEPTH\n# define YYINITDEPTH 200\n#endif\n\n/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */\n\n#ifndef YYMAXDEPTH\n# define YYMAXDEPTH 10000\n#endif\n\n\n#if YYERROR_VERBOSE\n\n# ifndef yystrlen\n#  if defined __GLIBC__ && defined _STRING_H\n#   define yystrlen strlen\n#  else\n/* Return the length of YYSTR.  */\nstatic YYSIZE_T\nyystrlen (const char *yystr)\n{\n  YYSIZE_T yylen;\n  for (yylen = 0; yystr[yylen]; yylen++)\n    continue;\n  return yylen;\n}\n#  endif\n# endif\n\n# ifndef yystpcpy\n#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE\n#   define yystpcpy stpcpy\n#  else\n/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */\nstatic char *\nyystpcpy (char *yydest, const char *yysrc)\n{\n  char *yyd = yydest;\n  const char *yys = yysrc;\n\n  while ((*yyd++ = *yys++) != '\\0')\n    continue;\n\n  return yyd - 1;\n}\n#  endif\n# endif\n\n# ifndef yytnamerr\n/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */\nstatic YYSIZE_T\nyytnamerr (char *yyres, const char *yystr)\n{\n  if (*yystr == '\"')\n    {\n      YYSIZE_T yyn = 0;\n      char const *yyp = yystr;\n\n      for (;;)\n        switch (*++yyp)\n          {\n          case '\\'':\n          case ',':\n            goto do_not_strip_quotes;\n\n          case '\\\\':\n            if (*++yyp != '\\\\')\n              goto do_not_strip_quotes;\n            /* Fall through.  */\n          default:\n            if (yyres)\n              yyres[yyn] = *yyp;\n            yyn++;\n            break;\n\n          case '\"':\n            if (yyres)\n              yyres[yyn] = '\\0';\n            return yyn;\n          }\n    do_not_strip_quotes: ;\n    }\n\n  if (! yyres)\n    return yystrlen (yystr);\n\n  return yystpcpy (yyres, yystr) - yyres;\n}\n# endif\n\n/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */\nstatic int\nyysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,\n                yytype_int16 *yyssp, int yytoken)\n{\n  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);\n  YYSIZE_T yysize = yysize0;\n  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };\n  /* Internationalized format string. */\n  const char *yyformat = YY_NULLPTR;\n  /* Arguments of yyformat. */\n  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];\n  /* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */\n  int yycount = 0;\n\n  /* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */\n  if (yytoken != YYEMPTY)\n    {\n      int yyn = yypact[*yyssp];\n      yyarg[yycount++] = yytname[yytoken];\n      if (!yypact_value_is_default (yyn))\n        {\n          /* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */\n          int yyxbegin = yyn < 0 ? -yyn : 0;\n          /* Stay within bounds of both yycheck and yytname.  */\n          int yychecklim = YYLAST - yyn + 1;\n          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;\n          int yyx;\n\n          for (yyx = yyxbegin; yyx < yyxend; ++yyx)\n            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR\n                && !yytable_value_is_error (yytable[yyx + yyn]))\n              {\n                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)\n                  {\n                    yycount = 1;\n                    yysize = yysize0;\n                    break;\n                  }\n                yyarg[yycount++] = yytname[yyx];\n                {\n                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);\n                  if (! (yysize <= yysize1\n                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n                    return 2;\n                  yysize = yysize1;\n                }\n              }\n        }\n    }\n\n  switch (yycount)\n    {\n# define YYCASE_(N, S)                      \\\n      case N:                               \\\n        yyformat = S;                       \\\n      break\n      YYCASE_(0, YY_(\"syntax error\"));\n      YYCASE_(1, YY_(\"syntax error, unexpected %s\"));\n      YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));\n      YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));\n      YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));\n      YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));\n# undef YYCASE_\n    }\n\n  {\n    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);\n    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))\n      return 2;\n    yysize = yysize1;\n  }\n\n  if (*yymsg_alloc < yysize)\n    {\n      *yymsg_alloc = 2 * yysize;\n      if (! (yysize <= *yymsg_alloc\n             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))\n        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;\n      return 1;\n    }\n\n  /* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */\n  {\n    char *yyp = *yymsg;\n    int yyi = 0;\n    while ((*yyp = *yyformat) != '\\0')\n      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)\n        {\n          yyp += yytnamerr (yyp, yyarg[yyi++]);\n          yyformat += 2;\n        }\n      else\n        {\n          yyp++;\n          yyformat++;\n        }\n  }\n  return 0;\n}\n#endif /* YYERROR_VERBOSE */\n\n/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/\n\nstatic void\nyydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n  YYUSE (yyvaluep);\n  YYUSE (yyscanner);\n  YYUSE (lex_env);\n  if (!yymsg)\n    yymsg = \"Deleting\";\n  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  switch (yytype)\n    {\n          case 6: /* _CLASS_  */\n#line 104 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_free(((*yyvaluep).class_vector)); }\n#line 1053 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 26: /* alternative  */\n#line 105 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1059 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 27: /* concatenation  */\n#line 106 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1065 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 28: /* repeat  */\n#line 107 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1071 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n    case 29: /* single  */\n#line 108 \"re_grammar.y\" /* yacc.c:1257  */\n      { yr_re_node_destroy(((*yyvaluep).re_node)); }\n#line 1077 \"re_grammar.c\" /* yacc.c:1257  */\n        break;\n\n\n      default:\n        break;\n    }\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n}\n\n\n\n\n/*----------.\n| yyparse.  |\n`----------*/\n\nint\nyyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)\n{\n/* The lookahead symbol.  */\nint yychar;\n\n\n/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */\nYY_INITIAL_VALUE (static YYSTYPE yyval_default;)\nYYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n\n    /* Number of syntax errors so far.  */\n    int yynerrs;\n\n    int yystate;\n    /* Number of tokens to shift before error messages enabled.  */\n    int yyerrstatus;\n\n    /* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */\n\n    /* The state stack.  */\n    yytype_int16 yyssa[YYINITDEPTH];\n    yytype_int16 *yyss;\n    yytype_int16 *yyssp;\n\n    /* The semantic value stack.  */\n    YYSTYPE yyvsa[YYINITDEPTH];\n    YYSTYPE *yyvs;\n    YYSTYPE *yyvsp;\n\n    YYSIZE_T yystacksize;\n\n  int yyn;\n  int yyresult;\n  /* Lookahead token as an internal (translated) token number.  */\n  int yytoken = 0;\n  /* The variables used to return semantic value and location from the\n     action routines.  */\n  YYSTYPE yyval;\n\n#if YYERROR_VERBOSE\n  /* Buffer for error messages, and its allocated size.  */\n  char yymsgbuf[128];\n  char *yymsg = yymsgbuf;\n  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;\n#endif\n\n#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))\n\n  /* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */\n  int yylen = 0;\n\n  yyssp = yyss = yyssa;\n  yyvsp = yyvs = yyvsa;\n  yystacksize = YYINITDEPTH;\n\n  YYDPRINTF ((stderr, \"Starting parse\\n\"));\n\n  yystate = 0;\n  yyerrstatus = 0;\n  yynerrs = 0;\n  yychar = YYEMPTY; /* Cause a token to be read.  */\n  goto yysetstate;\n\n/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/\n yynewstate:\n  /* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */\n  yyssp++;\n\n yysetstate:\n  *yyssp = yystate;\n\n  if (yyss + yystacksize - 1 <= yyssp)\n    {\n      /* Get the current used size of the three stacks, in elements.  */\n      YYSIZE_T yysize = yyssp - yyss + 1;\n\n#ifdef yyoverflow\n      {\n        /* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */\n        YYSTYPE *yyvs1 = yyvs;\n        yytype_int16 *yyss1 = yyss;\n\n        /* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */\n        yyoverflow (YY_(\"memory exhausted\"),\n                    &yyss1, yysize * sizeof (*yyssp),\n                    &yyvs1, yysize * sizeof (*yyvsp),\n                    &yystacksize);\n\n        yyss = yyss1;\n        yyvs = yyvs1;\n      }\n#else /* no yyoverflow */\n# ifndef YYSTACK_RELOCATE\n      goto yyexhaustedlab;\n# else\n      /* Extend the stack our own way.  */\n      if (YYMAXDEPTH <= yystacksize)\n        goto yyexhaustedlab;\n      yystacksize *= 2;\n      if (YYMAXDEPTH < yystacksize)\n        yystacksize = YYMAXDEPTH;\n\n      {\n        yytype_int16 *yyss1 = yyss;\n        union yyalloc *yyptr =\n          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));\n        if (! yyptr)\n          goto yyexhaustedlab;\n        YYSTACK_RELOCATE (yyss_alloc, yyss);\n        YYSTACK_RELOCATE (yyvs_alloc, yyvs);\n#  undef YYSTACK_RELOCATE\n        if (yyss1 != yyssa)\n          YYSTACK_FREE (yyss1);\n      }\n# endif\n#endif /* no yyoverflow */\n\n      yyssp = yyss + yysize - 1;\n      yyvsp = yyvs + yysize - 1;\n\n      YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",\n                  (unsigned long int) yystacksize));\n\n      if (yyss + yystacksize - 1 <= yyssp)\n        YYABORT;\n    }\n\n  YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));\n\n  if (yystate == YYFINAL)\n    YYACCEPT;\n\n  goto yybackup;\n\n/*-----------.\n| yybackup.  |\n`-----------*/\nyybackup:\n\n  /* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */\n\n  /* First try to decide what to do without reference to lookahead token.  */\n  yyn = yypact[yystate];\n  if (yypact_value_is_default (yyn))\n    goto yydefault;\n\n  /* Not known => get a lookahead token if don't already have one.  */\n\n  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */\n  if (yychar == YYEMPTY)\n    {\n      YYDPRINTF ((stderr, \"Reading a token: \"));\n      yychar = yylex (&yylval, yyscanner, lex_env);\n    }\n\n  if (yychar <= YYEOF)\n    {\n      yychar = yytoken = YYEOF;\n      YYDPRINTF ((stderr, \"Now at end of input.\\n\"));\n    }\n  else\n    {\n      yytoken = YYTRANSLATE (yychar);\n      YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);\n    }\n\n  /* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */\n  yyn += yytoken;\n  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)\n    goto yydefault;\n  yyn = yytable[yyn];\n  if (yyn <= 0)\n    {\n      if (yytable_value_is_error (yyn))\n        goto yyerrlab;\n      yyn = -yyn;\n      goto yyreduce;\n    }\n\n  /* Count tokens shifted since error; after three, turn off error\n     status.  */\n  if (yyerrstatus)\n    yyerrstatus--;\n\n  /* Shift the lookahead token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);\n\n  /* Discard the shifted token.  */\n  yychar = YYEMPTY;\n\n  yystate = yyn;\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n  goto yynewstate;\n\n\n/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/\nyydefault:\n  yyn = yydefact[yystate];\n  if (yyn == 0)\n    goto yyerrlab;\n  goto yyreduce;\n\n\n/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/\nyyreduce:\n  /* yyn is the number of a rule to reduce with.  */\n  yylen = yyr2[yyn];\n\n  /* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */\n  yyval = yyvsp[1-yylen];\n\n\n  YY_REDUCE_PRINT (yyn);\n  switch (yyn)\n    {\n        case 2:\n#line 113 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = (yyvsp[0].re_node);\n      }\n#line 1348 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 4:\n#line 122 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1356 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 5:\n#line 126 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        mark_as_not_fast_regexp();\n        incr_ast_levels();\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1372 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 6:\n#line 138 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_NODE* node;\n\n        mark_as_not_fast_regexp();\n        incr_ast_levels();\n\n        node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF(node == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-1].re_node), node);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1392 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 7:\n#line 157 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1400 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 8:\n#line 161 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        incr_ast_levels();\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1414 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 9:\n#line 174 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-1].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1432 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 10:\n#line 188 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-2].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1452 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 11:\n#line 204 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-1].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1470 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 12:\n#line 218 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-2].re_node), NULL);\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1490 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 13:\n#line 234 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        }\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = 0;\n        (yyval.re_node)->end = 1;\n      }\n#line 1517 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 14:\n#line 257 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        }\n\n        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = 0;\n        (yyval.re_node)->end = 1;\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1545 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 15:\n#line 281 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n        }\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;\n        (yyval.re_node)->end = (yyvsp[0].range) >> 16;;\n      }\n#line 1571 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 16:\n#line 303 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)\n        {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);\n          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));\n        }\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->start = (yyvsp[-1].range) & 0xFFFF;;\n        (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;\n        (yyval.re_node)->greedy = FALSE;\n      }\n#line 1598 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 17:\n#line 326 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = (yyvsp[0].re_node);\n      }\n#line 1606 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 18:\n#line 330 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1616 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 19:\n#line 336 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1626 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 20:\n#line 342 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1636 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 21:\n#line 348 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1646 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 22:\n#line 357 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        incr_ast_levels();\n\n        (yyval.re_node) = (yyvsp[-1].re_node);\n      }\n#line 1656 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 23:\n#line 363 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1666 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 24:\n#line 369 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->value = (yyvsp[0].integer);\n      }\n#line 1678 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 25:\n#line 377 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1688 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 26:\n#line 383 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1698 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 27:\n#line 389 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1708 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 28:\n#line 395 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1718 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 29:\n#line 401 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1728 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 30:\n#line 407 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n#line 1738 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n  case 31:\n#line 413 \"re_grammar.y\" /* yacc.c:1646  */\n    {\n        (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n\n        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        (yyval.re_node)->class_vector = (yyvsp[0].class_vector);\n      }\n#line 1750 \"re_grammar.c\" /* yacc.c:1646  */\n    break;\n\n\n#line 1754 \"re_grammar.c\" /* yacc.c:1646  */\n      default: break;\n    }\n  /* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */\n  YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\n\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n\n  *++yyvsp = yyval;\n\n  /* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */\n\n  yyn = yyr1[yyn];\n\n  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;\n  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)\n    yystate = yytable[yystate];\n  else\n    yystate = yydefgoto[yyn - YYNTOKENS];\n\n  goto yynewstate;\n\n\n/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/\nyyerrlab:\n  /* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */\n  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);\n\n  /* If not already recovering from an error, report this error.  */\n  if (!yyerrstatus)\n    {\n      ++yynerrs;\n#if ! YYERROR_VERBOSE\n      yyerror (yyscanner, lex_env, YY_(\"syntax error\"));\n#else\n# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\\n                                        yyssp, yytoken)\n      {\n        char const *yymsgp = YY_(\"syntax error\");\n        int yysyntax_error_status;\n        yysyntax_error_status = YYSYNTAX_ERROR;\n        if (yysyntax_error_status == 0)\n          yymsgp = yymsg;\n        else if (yysyntax_error_status == 1)\n          {\n            if (yymsg != yymsgbuf)\n              YYSTACK_FREE (yymsg);\n            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);\n            if (!yymsg)\n              {\n                yymsg = yymsgbuf;\n                yymsg_alloc = sizeof yymsgbuf;\n                yysyntax_error_status = 2;\n              }\n            else\n              {\n                yysyntax_error_status = YYSYNTAX_ERROR;\n                yymsgp = yymsg;\n              }\n          }\n        yyerror (yyscanner, lex_env, yymsgp);\n        if (yysyntax_error_status == 2)\n          goto yyexhaustedlab;\n      }\n# undef YYSYNTAX_ERROR\n#endif\n    }\n\n\n\n  if (yyerrstatus == 3)\n    {\n      /* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */\n\n      if (yychar <= YYEOF)\n        {\n          /* Return failure if at end of input.  */\n          if (yychar == YYEOF)\n            YYABORT;\n        }\n      else\n        {\n          yydestruct (\"Error: discarding\",\n                      yytoken, &yylval, yyscanner, lex_env);\n          yychar = YYEMPTY;\n        }\n    }\n\n  /* Else will try to reuse lookahead token after shifting the error\n     token.  */\n  goto yyerrlab1;\n\n\n/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/\nyyerrorlab:\n\n  /* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */\n  if (/*CONSTCOND*/ 0)\n     goto yyerrorlab;\n\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */\n  YYPOPSTACK (yylen);\n  yylen = 0;\n  YY_STACK_PRINT (yyss, yyssp);\n  yystate = *yyssp;\n  goto yyerrlab1;\n\n\n/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/\nyyerrlab1:\n  yyerrstatus = 3;      /* Each real token shifted decrements this.  */\n\n  for (;;)\n    {\n      yyn = yypact[yystate];\n      if (!yypact_value_is_default (yyn))\n        {\n          yyn += YYTERROR;\n          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)\n            {\n              yyn = yytable[yyn];\n              if (0 < yyn)\n                break;\n            }\n        }\n\n      /* Pop the current state because it cannot handle the error token.  */\n      if (yyssp == yyss)\n        YYABORT;\n\n\n      yydestruct (\"Error: popping\",\n                  yystos[yystate], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n      yystate = *yyssp;\n      YY_STACK_PRINT (yyss, yyssp);\n    }\n\n  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n  *++yyvsp = yylval;\n  YY_IGNORE_MAYBE_UNINITIALIZED_END\n\n\n  /* Shift the error token.  */\n  YY_SYMBOL_PRINT (\"Shifting\", yystos[yyn], yyvsp, yylsp);\n\n  yystate = yyn;\n  goto yynewstate;\n\n\n/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/\nyyacceptlab:\n  yyresult = 0;\n  goto yyreturn;\n\n/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/\nyyabortlab:\n  yyresult = 1;\n  goto yyreturn;\n\n#if !defined yyoverflow || YYERROR_VERBOSE\n/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/\nyyexhaustedlab:\n  yyerror (yyscanner, lex_env, YY_(\"memory exhausted\"));\n  yyresult = 2;\n  /* Fall through.  */\n#endif\n\nyyreturn:\n  if (yychar != YYEMPTY)\n    {\n      /* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */\n      yytoken = YYTRANSLATE (yychar);\n      yydestruct (\"Cleanup: discarding lookahead\",\n                  yytoken, &yylval, yyscanner, lex_env);\n    }\n  /* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */\n  YYPOPSTACK (yylen);\n  YY_STACK_PRINT (yyss, yyssp);\n  while (yyssp != yyss)\n    {\n      yydestruct (\"Cleanup: popping\",\n                  yystos[*yyssp], yyvsp, yyscanner, lex_env);\n      YYPOPSTACK (1);\n    }\n#ifndef yyoverflow\n  if (yyss != yyssa)\n    YYSTACK_FREE (yyss);\n#endif\n#if YYERROR_VERBOSE\n  if (yymsg != yymsgbuf)\n    YYSTACK_FREE (yymsg);\n#endif\n  return yyresult;\n}\n#line 421 \"re_grammar.y\" /* yacc.c:1906  */\n\n", "/* A Bison parser, made by GNU Bison 3.0.4.  */\n\n/* Bison interface for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */\n\n#ifndef YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n# define YY_RE_YY_RE_GRAMMAR_H_INCLUDED\n/* Debug traces.  */\n#ifndef YYDEBUG\n# define YYDEBUG 0\n#endif\n#if YYDEBUG\nextern int re_yydebug;\n#endif\n\n/* Token type.  */\n#ifndef YYTOKENTYPE\n# define YYTOKENTYPE\n  enum yytokentype\n  {\n    _CHAR_ = 258,\n    _ANY_ = 259,\n    _RANGE_ = 260,\n    _CLASS_ = 261,\n    _WORD_CHAR_ = 262,\n    _NON_WORD_CHAR_ = 263,\n    _SPACE_ = 264,\n    _NON_SPACE_ = 265,\n    _DIGIT_ = 266,\n    _NON_DIGIT_ = 267,\n    _WORD_BOUNDARY_ = 268,\n    _NON_WORD_BOUNDARY_ = 269\n  };\n#endif\n/* Tokens.  */\n#define _CHAR_ 258\n#define _ANY_ 259\n#define _RANGE_ 260\n#define _CLASS_ 261\n#define _WORD_CHAR_ 262\n#define _NON_WORD_CHAR_ 263\n#define _SPACE_ 264\n#define _NON_SPACE_ 265\n#define _DIGIT_ 266\n#define _NON_DIGIT_ 267\n#define _WORD_BOUNDARY_ 268\n#define _NON_WORD_BOUNDARY_ 269\n\n/* Value type.  */\n#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED\n\nunion YYSTYPE\n{\n#line 81 \"re_grammar.y\" /* yacc.c:1909  */\n\n  int integer;\n  uint32_t range;\n  RE_NODE* re_node;\n  uint8_t* class_vector;\n\n#line 89 \"re_grammar.h\" /* yacc.c:1909  */\n};\n\ntypedef union YYSTYPE YYSTYPE;\n# define YYSTYPE_IS_TRIVIAL 1\n# define YYSTYPE_IS_DECLARED 1\n#endif\n\n\n\nint re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n\n#endif /* !YY_RE_YY_RE_GRAMMAR_H_INCLUDED  */\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n%{\n\n#include <yara/integers.h>\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n\n\n#define YYERROR_VERBOSE\n\n#define YYMALLOC yr_malloc\n#define YYFREE yr_free\n\n#define mark_as_not_fast_regexp() \\\n    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n\n#define incr_ast_levels() \\\n    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n    { \\\n      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n      YYABORT; \\\n    }\n\n\n#define ERROR_IF(x, error) \\\n    if (x) \\\n    { \\\n      lex_env->last_error_code = error; \\\n      YYABORT; \\\n    } \\\n\n#define DESTROY_NODE_IF(x, node) \\\n    if (x) \\\n    { \\\n      yr_re_node_destroy(node); \\\n    } \\\n\n%}\n\n%name-prefix=\"re_yy\"\n%pure-parser\n\n%parse-param {void *yyscanner}\n%parse-param {RE_LEX_ENVIRONMENT *lex_env}\n\n%lex-param {yyscan_t yyscanner}\n%lex-param {RE_LEX_ENVIRONMENT *lex_env}\n\n%union {\n  int integer;\n  uint32_t range;\n  RE_NODE* re_node;\n  uint8_t* class_vector;\n}\n\n\n%token <integer> _CHAR_ _ANY_\n%token <range> _RANGE_\n%token <class_vector> _CLASS_\n\n%token _WORD_CHAR_\n%token _NON_WORD_CHAR_\n%token _SPACE_\n%token _NON_SPACE_\n%token _DIGIT_\n%token _NON_DIGIT_\n%token _WORD_BOUNDARY_\n%token _NON_WORD_BOUNDARY_\n\n%type <re_node>  alternative concatenation repeat single\n\n%destructor { yr_free($$); } _CLASS_\n%destructor { yr_re_node_destroy($$); } alternative\n%destructor { yr_re_node_destroy($$); } concatenation\n%destructor { yr_re_node_destroy($$); } repeat\n%destructor { yr_re_node_destroy($$); } single\n\n%%\n\nre  : alternative\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->root_node = $1;\n      }\n    | error\n    ;\n\nalternative\n    : concatenation\n      {\n        $$ = $1;\n      }\n    | alternative '|' concatenation\n      {\n        mark_as_not_fast_regexp();\n        incr_ast_levels();\n\n        $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $3);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | alternative '|'\n      {\n        RE_NODE* node;\n\n        mark_as_not_fast_regexp();\n        incr_ast_levels();\n\n        node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF(node == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$ = yr_re_node_create(RE_NODE_ALT, $1, node);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nconcatenation\n    : repeat\n      {\n        $$ = $1;\n      }\n    | concatenation repeat\n      {\n        incr_ast_levels();\n\n        $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        DESTROY_NODE_IF($$ == NULL, $2);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nrepeat\n    : single '*'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_STAR, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | single '*' '?'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_STAR, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->greedy = FALSE;\n      }\n    | single '+'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_PLUS, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | single '+' '?'\n      {\n        RE_AST* re_ast;\n\n        mark_as_not_fast_regexp();\n\n        re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        $$ = yr_re_node_create(RE_NODE_PLUS, $1, NULL);\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->greedy = FALSE;\n      }\n    | single '?'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = 0;\n        $$->end = 1;\n      }\n    | single '?' '?'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        DESTROY_NODE_IF($$ == NULL, $1);\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = 0;\n        $$->end = 1;\n        $$->greedy = FALSE;\n      }\n    | single _RANGE_\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_GREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = $2 & 0xFFFF;;\n        $$->end = $2 >> 16;;\n      }\n    | single _RANGE_ '?'\n      {\n        RE_AST* re_ast = yyget_extra(yyscanner);\n        re_ast->flags |= RE_FLAGS_UNGREEDY;\n\n        if ($1->type == RE_NODE_ANY)\n        {\n          $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);\n          DESTROY_NODE_IF(TRUE, $1);\n        }\n        else\n        {\n          mark_as_not_fast_regexp();\n          $$ = yr_re_node_create(RE_NODE_RANGE, $1, NULL);\n          DESTROY_NODE_IF($$ == NULL, $1);\n        }\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->start = $2 & 0xFFFF;;\n        $$->end = $2 >> 16;;\n        $$->greedy = FALSE;\n      }\n    | single\n      {\n        $$ = $1;\n      }\n    | _WORD_BOUNDARY_\n      {\n        $$ = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_WORD_BOUNDARY_\n      {\n        $$ = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | '^'\n      {\n        $$ = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | '$'\n      {\n        $$ = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    ;\n\nsingle\n    : '(' alternative ')'\n      {\n        incr_ast_levels();\n\n        $$ = $2;\n      }\n    | '.'\n      {\n        $$ = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _CHAR_\n      {\n        $$ = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->value = $1;\n      }\n    | _WORD_CHAR_\n      {\n        $$ = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_WORD_CHAR_\n      {\n        $$ = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _SPACE_\n      {\n        $$ = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_SPACE_\n      {\n         $$ = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n\n         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _DIGIT_\n      {\n        $$ = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _NON_DIGIT_\n      {\n        $$ = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n      }\n    | _CLASS_\n      {\n        $$ = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n\n        ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);\n\n        $$->class_vector = $1;\n      }\n    ;\n%%\n"], "filenames": ["libyara/include/yara/limits.h", "libyara/include/yara/re.h", "libyara/re.c", "libyara/re_grammar.c", "libyara/re_grammar.h", "libyara/re_grammar.y"], "buggy_code_start_loc": [67, 138, 55, 90, 81, 48], "buggy_code_end_loc": [67, 138, 270, 1969, 82, 345], "fixing_code_start_loc": [68, 139, 54, 91, 81, 49], "fixing_code_end_loc": [88, 140, 255, 1983, 82, 360], "type": "CWE-674", "message": "libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule that is mishandled in the _yr_re_emit function.", "other": {"cve": {"id": "CVE-2017-9304", "sourceIdentifier": "cve@mitre.org", "published": "2017-05-31T04:29:00.257", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule that is mishandled in the _yr_re_emit function."}, {"lang": "es", "value": "Libyara/re.c en el m\u00f3dulo regexp de YARA 3.5.0 permitir\u00eda a un atacante remoto provocar una denegaci\u00f3n de servicio (consumo de pila) a trav\u00e9s de una regla hecha a mano que se maneja incorrectamente en la funci\u00f3n _yr_re_emit."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-674"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:virustotal:yara:3.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "0254F781-4B89-4557-8F17-1F228A3A8216"}]}]}], "references": [{"url": "https://github.com/VirusTotal/yara/commit/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/VirusTotal/yara/issues/674", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/VirusTotal/yara/commit/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"}}