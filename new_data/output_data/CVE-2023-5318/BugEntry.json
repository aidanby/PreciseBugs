{"buggy_code": ["<?php\n\nrequire_once(__DIR__ . DS . 'TwitterAPIExchange.php');\n\nfunction twitter_feed_perform_api_request($url = 'https://api.twitter.com/1.1/search/tweets.json', $getfield = false) {\n\n\n    $oauth_access_token = get_option('access_token', 'twitter_feed');\n    $oauth_access_token_secret = get_option('access_token_secret', 'twitter_feed');\n    $consumer_key = get_option('consumer_key', 'twitter_feed');\n    $consumer_secret = get_option('consumer_secret', 'twitter_feed');\n\n\n    if ($oauth_access_token==false){\n        $oauth_access_token = \"220111598-87eLa7MgXZmd7YeRSkenTSVxhZikok61PXMKZFti\";\n    }\n\n    if ($oauth_access_token_secret==false){\n        $oauth_access_token_secret = \"KsDrxrxoGqVVK0ethvcTTrV58RBH3WUjnPeI616fnxIFS\";\n    }\n\n    if ($consumer_key==false){\n        $consumer_key = \"WgDmyOjMgX1N7RhcLpQqzUrtR\"; \n    }\n\n\n    if ($consumer_secret==false){\n        $consumer_secret = \"0e8PlzIeKlmGGyH1ajS2Ggaw0anPTX23p3gp2WqZ0PCNxkYYX1\";\n    }\n\n\n    if (!$oauth_access_token || !$oauth_access_token_secret || !$consumer_key || !$consumer_secret){\n        return false;\n    }\n\n\n    $cache_expiration_minutes = 1500;\n    $cache_id = md5($url . $getfield);\n    $cache_group = 'twitter_feed_2';\n    $cached_results = cache_get($cache_id, $cache_group,$cache_expiration_minutes);\n    if ($cached_results!=false){\n        return $cached_results;\n    }\n\n    $settings = array(\n        'oauth_access_token'        => $oauth_access_token,\n        'oauth_access_token_secret' => $oauth_access_token_secret,\n        'consumer_key'              => $consumer_key,\n        'consumer_secret'           => $consumer_secret\n    );\n\n    $requestMethod = 'GET';\n\n    $twitter = new TwitterAPIExchange($settings);\n    $response = $twitter->setGetfield($getfield)\n        ->buildOauth($url, $requestMethod)\n        ->performRequest();\n\n\n    $return = json_decode($response, true);\n\n\t\n\n    if (!empty($return)){\n        cache_save($return, $cache_id, $cache_group, $cache_expiration_minutes);\n    }\n\n\n\n\n    return $return;\n}\n\nfunction twitter_feed_get_items($keyword = false, $results_count = 5) {\n\n\n    $count = intval($results_count);\n    $query = urlencode($keyword);\n    $url = 'https://api.twitter.com/1.1/search/tweets.json';\n    $getfield = '?count=' . $count . '&q=' . $query;\n    $items = twitter_feed_perform_api_request($url, $getfield);\n    $return = array();\n    if (isset($items['statuses'])){\n        foreach ($items['statuses'] as $status => $statusData) {\n            $tweet = array();\n            $tweet['url'] = false;\n            $tweet['media'] = false;\n            $tweet['name'] = false;\n            $tweet['profile_image'] = false;\n            $tweet['screen_name'] = false;\n\n            $tweet['id'] = $statusData['id'];\n            $tweet['created_at'] = $statusData['created_at'];\n            $tweet['ago'] = mw()->format->ago($statusData['created_at']);\n\n            if (isset($statusData['entities']['urls'][0])){\n\n                if (is_array($statusData['entities']['urls'][0])){\n                    $tweet['url'] = $statusData['entities']['urls'][0]['url'];\n                } else {\n                    $tweet['url'] = $statusData['entities']['urls'][0];\n\n                }\n            }\n            if (isset($statusData['entities']['media'][0])){\n                $tweet['media'] = $statusData['entities']['media'][0]['media_url'];\n                if ($tweet['url']==false){\n                    $tweet['url'] = $statusData['entities']['media'][0]['expanded_url'];\n                }\n            }\n            if (isset($statusData['user'])){\n                $tweet['user_data'] = $statusData['user'];\n                $tweet['screen_name'] = $statusData['user']['screen_name'];\n                $tweet['name'] = $statusData['user']['name'];\n                $tweet['profile_image'] = $statusData['user']['profile_image_url_https'];\n                if ($tweet['url']==false){\n                    $tweet['url'] = 'https://twitter.com/' . $tweet['screen_name'] . '/status/' . $statusData['id_str'];\n                }\n            }\n            if (isset($statusData['text'])){\n                $tweet['text'] = $statusData['text'];\n            }\n            $return[] = $tweet;\n        }\n    }\n\n\n    return $return;\n}\n\nfunction twitter_feed_get_user_tweets($twitter_handle = false, $results_count = 5) {\n\n    $count = intval($results_count);\n    $url = 'https://api.twitter.com/1.1/statuses/user_timeline.json';\n\t \n \n    $getfield = '?include_entities=true&include_rts=false&count=' . $count . '&exxclude_replies=true&nofilter=retweets&screen_name=' . $twitter_handle;\n\t//dd($url, $getfield); \n    $items = twitter_feed_perform_api_request($url, $getfield);\n\t\t\n\tif(isset($items[\"errors\"])){\n\t\treturn;\n\t}\n    return $items;\n}"], "fixing_code": ["<?php\n\nrequire_once(__DIR__ . DS . 'TwitterAPIExchange.php');\n\nfunction twitter_feed_perform_api_request($url = 'https://api.twitter.com/1.1/search/tweets.json', $getfield = false) {\n\n\n    $oauth_access_token = get_option('access_token', 'twitter_feed');\n    $oauth_access_token_secret = get_option('access_token_secret', 'twitter_feed');\n    $consumer_key = get_option('consumer_key', 'twitter_feed');\n    $consumer_secret = get_option('consumer_secret', 'twitter_feed');\n\n\n    if ($oauth_access_token==false){\n        $oauth_access_token = \"\";\n    }\n\n    if ($oauth_access_token_secret==false){\n        $oauth_access_token_secret = \"\";\n    }\n\n    if ($consumer_key==false){\n        $consumer_key = \"\";\n    }\n\n\n    if ($consumer_secret==false){\n        $consumer_secret = \"\";\n    }\n\n\n    if (!$oauth_access_token || !$oauth_access_token_secret || !$consumer_key || !$consumer_secret){\n        return false;\n    }\n\n\n    $cache_expiration_minutes = 1500;\n    $cache_id = md5($url . $getfield);\n    $cache_group = 'twitter_feed_2';\n    $cached_results = cache_get($cache_id, $cache_group,$cache_expiration_minutes);\n    if ($cached_results!=false){\n        return $cached_results;\n    }\n\n    $settings = array(\n        'oauth_access_token'        => $oauth_access_token,\n        'oauth_access_token_secret' => $oauth_access_token_secret,\n        'consumer_key'              => $consumer_key,\n        'consumer_secret'           => $consumer_secret\n    );\n\n    $requestMethod = 'GET';\n\n    $twitter = new TwitterAPIExchange($settings);\n    $response = $twitter->setGetfield($getfield)\n        ->buildOauth($url, $requestMethod)\n        ->performRequest();\n\n\n    $return = json_decode($response, true);\n\n\n\n    if (!empty($return)){\n        cache_save($return, $cache_id, $cache_group, $cache_expiration_minutes);\n    }\n\n\n\n\n    return $return;\n}\n\nfunction twitter_feed_get_items($keyword = false, $results_count = 5) {\n\n\n    $count = intval($results_count);\n    $query = urlencode($keyword);\n    $url = 'https://api.twitter.com/1.1/search/tweets.json';\n    $getfield = '?count=' . $count . '&q=' . $query;\n    $items = twitter_feed_perform_api_request($url, $getfield);\n    $return = array();\n    if (isset($items['statuses'])){\n        foreach ($items['statuses'] as $status => $statusData) {\n            $tweet = array();\n            $tweet['url'] = false;\n            $tweet['media'] = false;\n            $tweet['name'] = false;\n            $tweet['profile_image'] = false;\n            $tweet['screen_name'] = false;\n\n            $tweet['id'] = $statusData['id'];\n            $tweet['created_at'] = $statusData['created_at'];\n            $tweet['ago'] = mw()->format->ago($statusData['created_at']);\n\n            if (isset($statusData['entities']['urls'][0])){\n\n                if (is_array($statusData['entities']['urls'][0])){\n                    $tweet['url'] = $statusData['entities']['urls'][0]['url'];\n                } else {\n                    $tweet['url'] = $statusData['entities']['urls'][0];\n\n                }\n            }\n            if (isset($statusData['entities']['media'][0])){\n                $tweet['media'] = $statusData['entities']['media'][0]['media_url'];\n                if ($tweet['url']==false){\n                    $tweet['url'] = $statusData['entities']['media'][0]['expanded_url'];\n                }\n            }\n            if (isset($statusData['user'])){\n                $tweet['user_data'] = $statusData['user'];\n                $tweet['screen_name'] = $statusData['user']['screen_name'];\n                $tweet['name'] = $statusData['user']['name'];\n                $tweet['profile_image'] = $statusData['user']['profile_image_url_https'];\n                if ($tweet['url']==false){\n                    $tweet['url'] = 'https://twitter.com/' . $tweet['screen_name'] . '/status/' . $statusData['id_str'];\n                }\n            }\n            if (isset($statusData['text'])){\n                $tweet['text'] = $statusData['text'];\n            }\n            $return[] = $tweet;\n        }\n    }\n\n\n    return $return;\n}\n\nfunction twitter_feed_get_user_tweets($twitter_handle = false, $results_count = 5) {\n\n    $count = intval($results_count);\n    $url = 'https://api.twitter.com/1.1/statuses/user_timeline.json';\n\n\n    $getfield = '?include_entities=true&include_rts=false&count=' . $count . '&exxclude_replies=true&nofilter=retweets&screen_name=' . $twitter_handle;\n\t//dd($url, $getfield);\n    $items = twitter_feed_perform_api_request($url, $getfield);\n\n\tif(isset($items[\"errors\"])){\n\t\treturn;\n\t}\n    return $items;\n}\n"], "filenames": ["userfiles/modules/twitter_feed/functions.php"], "buggy_code_start_loc": [15], "buggy_code_end_loc": [146], "fixing_code_start_loc": [15], "fixing_code_end_loc": [146], "type": "CWE-798", "message": "Use of Hard-coded Credentials in GitHub repository microweber/microweber prior to 2.0.", "other": {"cve": {"id": "CVE-2023-5318", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-30T01:15:39.293", "lastModified": "2023-10-02T20:13:44.510", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Use of Hard-coded Credentials in GitHub repository microweber/microweber prior to 2.0."}, {"lang": "es", "value": "Uso de credenciales codificadas en el repositorio de GitHub microweber/microweber anterior a 2.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-798"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-798"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0", "matchCriteriaId": "A3C150C1-4763-474B-91B5-B571C53BEC4D"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/c48b34dfd6cae7a55b452280d692dc62512574b0", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/17826bdd-8136-48ae-afb9-af627cb6fd5d", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/c48b34dfd6cae7a55b452280d692dc62512574b0"}}