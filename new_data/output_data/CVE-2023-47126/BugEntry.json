{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Install\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager;\nuse TYPO3\\CMS\\Core\\Core\\Environment;\nuse TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory;\nuse TYPO3\\CMS\\Core\\Http\\JsonResponse;\nuse TYPO3\\CMS\\Install\\Service\\EnableFileService;\n\n/**\n * Login controller\n * @internal This class is a specific controller implementation and is not considered part of the Public TYPO3 API.\n */\nclass LoginController extends AbstractController\n{\n    public function __construct(\n        private readonly FormProtectionFactory $formProtectionFactory,\n        private readonly ConfigurationManager $configurationManager,\n    ) {}\n\n    /**\n     * Render the \"Create an \"enable install tool file\" action\n     */\n    public function showEnableInstallToolFileAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $view = $this->initializeView($request);\n        $path = str_replace(Environment::getPublicPath() . '/', '', dirname(EnableFileService::getBestLocationForInstallToolEnableFile())) . '/';\n        $view->assign('enableInstallToolPath', $path);\n        return new JsonResponse([\n            'success' => true,\n            'html' => $view->render('Login/ShowEnableInstallToolFile'),\n        ]);\n    }\n\n    /**\n     * Render login view\n     */\n    public function showLoginAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $formProtection = $this->formProtectionFactory->createFromRequest($request);\n        $view = $this->initializeView($request);\n        $view->assignMultiple([\n            'siteName' => $GLOBALS['TYPO3_CONF_VARS']['SYS']['sitename'],\n            'loginToken' => $formProtection->generateToken('installTool', 'login'),\n            'installToolEnableFilePermanent' => EnableFileService::isInstallToolEnableFilePermanent(),\n            'configFile' => $this->configurationManager->getSystemConfigurationFileLocation(true),\n        ]);\n        return new JsonResponse([\n            'success' => true,\n            'html' => $view->render('Login/ShowLogin'),\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Install\\Service;\n\nuse TYPO3\\CMS\\Core\\Core\\Environment;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n/**\n * Basic Service to check and create install tool files\n * @internal This class is only meant to be used within EXT:install and is not part of the TYPO3 Core API.\n */\nclass EnableFileService\n{\n    /**\n     * @var string file name of the ENABLE_INSTALL_TOOL file\n     */\n    public const INSTALL_TOOL_ENABLE_FILE_PATH = 'ENABLE_INSTALL_TOOL';\n\n    /**\n     * @var string Relative path to  FIRST_INSTALL file\n     */\n    public const FIRST_INSTALL_FILE_PATH = 'FIRST_INSTALL';\n\n    /**\n     * @var int Maximum age of ENABLE_INSTALL_TOOL file before it gets removed (in seconds)\n     */\n    public const INSTALL_TOOL_ENABLE_FILE_LIFETIME = 3600;\n\n    public static function isFirstInstallAllowed(): bool\n    {\n        $files = self::getFirstInstallFilePaths();\n        if (!empty($files)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the INSTALL_TOOL_ENABLE file\n     */\n    public static function createInstallToolEnableFile(): bool\n    {\n        $installEnableFilePath = self::getInstallToolEnableFilePath();\n        if (!is_file($installEnableFilePath)) {\n            $result = touch($installEnableFilePath);\n        } else {\n            $result = true;\n            self::extendInstallToolEnableFileLifetime();\n        }\n        GeneralUtility::fixPermissions($installEnableFilePath);\n        return $result;\n    }\n\n    /**\n     * Removes the INSTALL_TOOL_ENABLE file from all locations\n     */\n    public static function removeInstallToolEnableFile(): bool\n    {\n        $result = false;\n        while (is_file(self::getInstallToolEnableFilePath())) {\n            $result = unlink(self::getInstallToolEnableFilePath());\n        }\n        return $result;\n    }\n\n    /**\n     * Removes the FIRST_INSTALL file\n     */\n    public static function removeFirstInstallFile(): bool\n    {\n        $result = true;\n        $files = self::getFirstInstallFilePaths();\n        foreach ($files as $file) {\n            $result = unlink(Environment::getPublicPath() . '/' . $file) && $result;\n        }\n        return $result;\n    }\n\n    /**\n     * Checks if the install tool file exists\n     */\n    public static function installToolEnableFileExists(): bool\n    {\n        return @is_file(self::getInstallToolEnableFilePath());\n    }\n\n    /**\n     * Checks if the install tool file exists\n     */\n    public static function checkInstallToolEnableFile(): bool\n    {\n        if (!self::installToolEnableFileExists()) {\n            return false;\n        }\n        if (!self::isInstallToolEnableFilePermanent()) {\n            if (self::installToolEnableFileLifetimeExpired()) {\n                self::removeInstallToolEnableFile();\n                return false;\n            }\n            self::extendInstallToolEnableFileLifetime();\n        }\n        return true;\n    }\n\n    /**\n     * Checks if the install tool file should be kept\n     */\n    public static function isInstallToolEnableFilePermanent(): bool\n    {\n        if (self::installToolEnableFileExists()) {\n            $content = (string)@file_get_contents(self::getInstallToolEnableFilePath());\n            if (str_contains($content, 'KEEP_FILE')) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks if the lifetime of the install tool file is expired\n     */\n    public static function installToolEnableFileLifetimeExpired(): bool\n    {\n        if (time() - @filemtime(self::getInstallToolEnableFilePath()) > self::INSTALL_TOOL_ENABLE_FILE_LIFETIME) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the last modification of the ENABLE_INSTALL_TOOL file\n     */\n    protected static function extendInstallToolEnableFileLifetime()\n    {\n        $enableFile = self::getInstallToolEnableFilePath();\n        // Extend the age of the ENABLE_INSTALL_TOOL file by one hour\n        if (is_file($enableFile)) {\n            $couldTouch = @touch($enableFile);\n            if (!$couldTouch) {\n                // If we can't remove the creation method will call us again.\n                if (self::removeInstallToolEnableFile()) {\n                    self::createInstallToolEnableFile();\n                }\n            }\n        }\n    }\n\n    public static function getBestLocationForInstallToolEnableFile(): string\n    {\n        $possibleLocations = [\n            'default' => Environment::getVarPath() . '/transient/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n            'permanent' => Environment::getConfigPath() . '/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n        ];\n        return Environment::isComposerMode() ? $possibleLocations['default'] : $possibleLocations['permanent'];\n    }\n\n    /**\n     * Returns the absolute path to the INSTALL_TOOL_ENABLE file\n     */\n    protected static function getInstallToolEnableFilePath(): string\n    {\n        $possibleLocations = [\n            'default' => Environment::getVarPath() . '/transient/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n            'permanent' => Environment::getConfigPath() . '/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n            'legacy' => Environment::getLegacyConfigPath() . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n        ];\n        foreach ($possibleLocations as $location) {\n            if (@is_file($location)) {\n                return $location;\n            }\n        }\n        return self::getBestLocationForInstallToolEnableFile();\n    }\n\n    /**\n     * Returns the paths to the FIRST_INSTALL files\n     */\n    protected static function getFirstInstallFilePaths(): array\n    {\n        $files = scandir(Environment::getPublicPath() . '/');\n        $files = is_array($files) ? $files : [];\n        $files = array_filter($files, static function ($file) {\n            return @is_file(Environment::getPublicPath() . '/' . $file) && preg_match('~^' . self::FIRST_INSTALL_FILE_PATH . '.*~i', $file);\n        });\n        return $files;\n    }\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Install\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager;\nuse TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory;\nuse TYPO3\\CMS\\Core\\Http\\JsonResponse;\nuse TYPO3\\CMS\\Install\\Service\\EnableFileService;\n\n/**\n * Login controller\n * @internal This class is a specific controller implementation and is not considered part of the Public TYPO3 API.\n */\nclass LoginController extends AbstractController\n{\n    public function __construct(\n        private readonly FormProtectionFactory $formProtectionFactory,\n        private readonly ConfigurationManager $configurationManager,\n    ) {}\n\n    /**\n     * Render the \"Create an \"enable install tool file\" action\n     */\n    public function showEnableInstallToolFileAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $view = $this->initializeView($request);\n        $view->assign('enableInstallToolPath', EnableFileService::getStaticLocationForInstallToolEnableFileDirectory());\n        return new JsonResponse([\n            'success' => true,\n            'html' => $view->render('Login/ShowEnableInstallToolFile'),\n        ]);\n    }\n\n    /**\n     * Render login view\n     */\n    public function showLoginAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $formProtection = $this->formProtectionFactory->createFromRequest($request);\n        $view = $this->initializeView($request);\n        $view->assignMultiple([\n            'siteName' => $GLOBALS['TYPO3_CONF_VARS']['SYS']['sitename'],\n            'loginToken' => $formProtection->generateToken('installTool', 'login'),\n            'installToolEnableFilePermanent' => EnableFileService::isInstallToolEnableFilePermanent(),\n            'configFile' => $this->configurationManager->getSystemConfigurationFileLocation(true),\n        ]);\n        return new JsonResponse([\n            'success' => true,\n            'html' => $view->render('Login/ShowLogin'),\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Install\\Service;\n\nuse TYPO3\\CMS\\Core\\Core\\Environment;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n/**\n * Basic Service to check and create install tool files\n * @internal This class is only meant to be used within EXT:install and is not part of the TYPO3 Core API.\n */\nclass EnableFileService\n{\n    /**\n     * @var string file name of the ENABLE_INSTALL_TOOL file\n     */\n    public const INSTALL_TOOL_ENABLE_FILE_PATH = 'ENABLE_INSTALL_TOOL';\n\n    /**\n     * @var string Relative path to  FIRST_INSTALL file\n     */\n    public const FIRST_INSTALL_FILE_PATH = 'FIRST_INSTALL';\n\n    /**\n     * @var int Maximum age of ENABLE_INSTALL_TOOL file before it gets removed (in seconds)\n     */\n    public const INSTALL_TOOL_ENABLE_FILE_LIFETIME = 3600;\n\n    public static function isFirstInstallAllowed(): bool\n    {\n        $files = self::getFirstInstallFilePaths();\n        if (!empty($files)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the INSTALL_TOOL_ENABLE file\n     */\n    public static function createInstallToolEnableFile(): bool\n    {\n        $installEnableFilePath = self::getInstallToolEnableFilePath();\n        if (!is_file($installEnableFilePath)) {\n            $result = touch($installEnableFilePath);\n        } else {\n            $result = true;\n            self::extendInstallToolEnableFileLifetime();\n        }\n        GeneralUtility::fixPermissions($installEnableFilePath);\n        return $result;\n    }\n\n    /**\n     * Removes the INSTALL_TOOL_ENABLE file from all locations\n     */\n    public static function removeInstallToolEnableFile(): bool\n    {\n        $result = false;\n        while (is_file(self::getInstallToolEnableFilePath())) {\n            $result = unlink(self::getInstallToolEnableFilePath());\n        }\n        return $result;\n    }\n\n    /**\n     * Removes the FIRST_INSTALL file\n     */\n    public static function removeFirstInstallFile(): bool\n    {\n        $result = true;\n        $files = self::getFirstInstallFilePaths();\n        foreach ($files as $file) {\n            $result = unlink(Environment::getPublicPath() . '/' . $file) && $result;\n        }\n        return $result;\n    }\n\n    /**\n     * Checks if the install tool file exists\n     */\n    public static function installToolEnableFileExists(): bool\n    {\n        return @is_file(self::getInstallToolEnableFilePath());\n    }\n\n    /**\n     * Checks if the install tool file exists\n     */\n    public static function checkInstallToolEnableFile(): bool\n    {\n        if (!self::installToolEnableFileExists()) {\n            return false;\n        }\n        if (!self::isInstallToolEnableFilePermanent()) {\n            if (self::installToolEnableFileLifetimeExpired()) {\n                self::removeInstallToolEnableFile();\n                return false;\n            }\n            self::extendInstallToolEnableFileLifetime();\n        }\n        return true;\n    }\n\n    /**\n     * Checks if the install tool file should be kept\n     */\n    public static function isInstallToolEnableFilePermanent(): bool\n    {\n        if (self::installToolEnableFileExists()) {\n            $content = (string)@file_get_contents(self::getInstallToolEnableFilePath());\n            if (str_contains($content, 'KEEP_FILE')) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks if the lifetime of the install tool file is expired\n     */\n    public static function installToolEnableFileLifetimeExpired(): bool\n    {\n        if (time() - @filemtime(self::getInstallToolEnableFilePath()) > self::INSTALL_TOOL_ENABLE_FILE_LIFETIME) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the last modification of the ENABLE_INSTALL_TOOL file\n     */\n    protected static function extendInstallToolEnableFileLifetime()\n    {\n        $enableFile = self::getInstallToolEnableFilePath();\n        // Extend the age of the ENABLE_INSTALL_TOOL file by one hour\n        if (is_file($enableFile)) {\n            $couldTouch = @touch($enableFile);\n            if (!$couldTouch) {\n                // If we can't remove the creation method will call us again.\n                if (self::removeInstallToolEnableFile()) {\n                    self::createInstallToolEnableFile();\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns a static directory path that is suitable to be presented to\n     * unauthenticated visitors, in order to circumvent \"Full Path Disclosure\" issues.\n     */\n    public static function getStaticLocationForInstallToolEnableFileDirectory(): string\n    {\n        return Environment::isComposerMode() ? 'var/transient/' : 'typo3conf/';\n    }\n\n    public static function getBestLocationForInstallToolEnableFile(): string\n    {\n        $possibleLocations = [\n            'default' => Environment::getVarPath() . '/transient/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n            'permanent' => Environment::getConfigPath() . '/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n        ];\n        return Environment::isComposerMode() ? $possibleLocations['default'] : $possibleLocations['permanent'];\n    }\n\n    /**\n     * Returns the absolute path to the INSTALL_TOOL_ENABLE file\n     */\n    protected static function getInstallToolEnableFilePath(): string\n    {\n        $possibleLocations = [\n            'default' => Environment::getVarPath() . '/transient/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n            'permanent' => Environment::getConfigPath() . '/' . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n            'legacy' => Environment::getLegacyConfigPath() . self::INSTALL_TOOL_ENABLE_FILE_PATH,\n        ];\n        foreach ($possibleLocations as $location) {\n            if (@is_file($location)) {\n                return $location;\n            }\n        }\n        return self::getBestLocationForInstallToolEnableFile();\n    }\n\n    /**\n     * Returns the paths to the FIRST_INSTALL files\n     */\n    protected static function getFirstInstallFilePaths(): array\n    {\n        $files = scandir(Environment::getPublicPath() . '/');\n        $files = is_array($files) ? $files : [];\n        $files = array_filter($files, static function ($file) {\n            return @is_file(Environment::getPublicPath() . '/' . $file) && preg_match('~^' . self::FIRST_INSTALL_FILE_PATH . '.*~i', $file);\n        });\n        return $files;\n    }\n}\n"], "filenames": ["typo3/sysext/install/Classes/Controller/LoginController.php", "typo3/sysext/install/Classes/Service/EnableFileService.php"], "buggy_code_start_loc": [23, 160], "buggy_code_end_loc": [47, 160], "fixing_code_start_loc": [22, 161], "fixing_code_end_loc": [45, 170], "type": "NVD-CWE-noinfo", "message": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. In affected versions the login screen of the standalone install tool discloses the full path of the transient data directory (e.g. /var/www/html/var/transient/). This applies to composer-based scenarios only - \u201cclassic\u201d non-composer installations are not affected. This issue has been addressed in version 12.4.8. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n", "other": {"cve": {"id": "CVE-2023-47126", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-14T20:15:08.037", "lastModified": "2023-11-21T03:01:46.133", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. In affected versions the login screen of the standalone install tool discloses the full path of the transient data directory (e.g. /var/www/html/var/transient/). This applies to composer-based scenarios only - \u201cclassic\u201d non-composer installations are not affected. This issue has been addressed in version 12.4.8. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n"}, {"lang": "es", "value": "TYPO3 es un sistema de gesti\u00f3n de contenido web basado en PHP de c\u00f3digo abierto publicado bajo GNU GPL. En las versiones afectadas, la pantalla de inicio de sesi\u00f3n de la herramienta de instalaci\u00f3n independiente revela la ruta completa del directorio de datos transitorios (por ejemplo, /var/www/html/var/transient/). Esto se aplica \u00fanicamente a escenarios basados en compositores: las instalaciones \u201ccl\u00e1sicas\u201d que no son de compositores no se ven afectadas. Este problema se solucion\u00f3 en la versi\u00f3n 12.4.8. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.7, "baseSeverity": "LOW"}, "exploitabilityScore": 2.2, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.2.0", "versionEndExcluding": "12.4.8", "matchCriteriaId": "25218828-9AFC-458B-A14F-7FE95B422B5D"}]}]}], "references": [{"url": "https://github.com/TYPO3/typo3/commit/1a735dac01ec7b337ed0d80c738caa8967dea423", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-p2jh-95jg-2w55", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2023-005", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/typo3/commit/1a735dac01ec7b337ed0d80c738caa8967dea423"}}