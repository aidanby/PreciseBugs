{"buggy_code": ["<?php\n/*\n\tFusionPBX\n\tVersion: MPL 1.1\n\n\tThe contents of this file are subject to the Mozilla Public License Version\n\t1.1 (the \"License\"); you may not use this file except in compliance with\n\tthe License. You may obtain a copy of the License at\n\thttp://www.mozilla.org/MPL/\n\n\tSoftware distributed under the License is distributed on an \"AS IS\" basis,\n\tWITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n\tfor the specific language governing rights and limitations under the\n\tLicense.\n\n\tThe Original Code is FusionPBX\n\n\tThe Initial Developer of the Original Code is\n\tMark J Crane <markjcrane@fusionpbx.com>\n\tPortions created by the Initial Developer are Copyright (C) 2008-2022\n\tthe Initial Developer. All Rights Reserved.\n\n\tContributor(s):\n\tMark J Crane <markjcrane@fusionpbx.com>\n\tJames Rose <james.o.rose@gmail.com>\n*/\n\n$output_type = \"file\"; //file or console\n\nif (defined('STDIN')) {\n\t//get the document root php file must be executed with the full path\n\t\t$document_root = str_replace(\"\\\\\", \"/\", $_SERVER[\"PHP_SELF\"]);\n\t\t$document_root = str_replace(\"\\\\\", \"/\", $_SERVER[\"PHP_SELF\"]);\n\t\tpreg_match(\"/^(.*)\\/secure\\/.*$/\", $document_root, $matches);\n\t\t$document_root = $matches[1];\n\t//set the include path\n\t\tset_include_path($document_root);\n\t\t$_SERVER[\"DOCUMENT_ROOT\"] = $document_root;\n\t\t//echo \"$document_root is document_root\\n\";\n}\n\n$IS_WINDOWS = stristr(PHP_OS, 'WIN') ? true : false;\n\nif (!function_exists('exec_in_dir')) {\n\tfunction exec_in_dir($dir, $cmd, &$ok) {\n\t\t$args = func_get_args();\n\t\t$cwd = getcwd();\n\t\tchdir($dir);\n\t\t$output = array();\n\t\t$ret = 0;\n\t\t$result = exec($cmd, $output, $ret);\n\t\tif ($cwd)\n\t\t\tchdir($cwd);\n\t\t$ok = ($ret == 0);\n\t\treturn implode(\"\\n\", $output);\n\t}\n}\n\nif (!function_exists('correct_path')) {\n\tfunction correct_path($p) {\n\t\tglobal $IS_WINDOWS;\n\t\tif ($IS_WINDOWS) {\n\t\t\treturn str_replace('/', '\\\\', $p);\n\t\t}\n\t\treturn $p;\n\t}\n}\n\nif (!function_exists('path_join')) {\n\tfunction path_join() {\n\t\t$args = func_get_args();\n\t\t$paths = array();\n\t\tforeach ($args as $arg) {\n\t\t\t$paths = array_merge($paths, (array)$arg);\n\t\t}\n\n\t\t$prefix = null;\n\t\tforeach($paths as &$path) {\n\t\t\tif ($prefix === null && strlen($path) > 0) {\n\t\t\t\tif (substr($path, 0, 1) == '/') $prefix = '/';\n\t\t\t\telse $prefix = '';\n\t\t\t}\n\t\t\t$path = trim( $path, '/' );\n\t\t}\n\n\t\tif ($prefix === null) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$paths = array_filter($paths);\n\t\treturn $prefix . implode('/', $paths);\n\t}\n}\n\nif (!function_exists('tiff2pdf')) {\n\tfunction tiff2pdf($tiff_file_name) {\n\t\t//convert the tif to a pdf\n\t\t//Ubuntu: apt-get install libtiff-tools\n\n\t\tglobal $IS_WINDOWS;\n\n\t\tif (!file_exists($tiff_file_name)) {\n\t\t\techo \"tiff file does not exists\";\n\t\t\treturn false; // \"tiff file does not exists\";\n\t\t}\n\n\t\t$GS = $IS_WINDOWS ? 'gswin32c' : 'gs';\n\t\t$tiff_file = pathinfo($tiff_file_name);\n\t\t$dir_fax = $tiff_file['dirname'];\n\t\t$fax_file_name = $tiff_file['filename'];\n\t\t$pdf_file_name = path_join($dir_fax, $fax_file_name . '.pdf');\n\n\t\tif (file_exists($pdf_file_name)) {\n\t\t\treturn $pdf_file_name;\n\t\t}\n\n\t\t$dir_fax_temp = $_SESSION['server']['temp']['dir'];\n\t\tif (!$dir_fax_temp) {\n\t\t\t$dir_fax_temp = path_join(dirname($dir_fax), 'temp');\n\t\t}\n\n\t\tif (!file_exists($dir_fax_temp)) {\n\t\t\techo \"can not create temporary directory\";\n\t\t\treturn false; //\n\t\t}\n\n\t\t$cmd  = \"tiffinfo \" . correct_path($tiff_file_name) . ' | grep \"Resolution:\"';\n\t\t$ok   = false;\n\t\t$resp = exec_in_dir($dir_fax, $cmd, $ok);\n\t\tif (!$ok) {\n\t\t\techo \"can not find fax resoulution\";\n\t\t\treturn false; // \"can not find fax resoulution\"\n\t\t}\n\n\t\t$ppi_w = 0;\n\t\t$ppi_h = 0;\n\t\t$tmp = array();\n\t\tif (preg_match('/Resolution.*?(\\d+).*?(\\d+)/', $resp, $tmp)) {\n\t\t\t$ppi_w = $tmp[1];\n\t\t\t$ppi_h = $tmp[2];\n\t\t}\n\n\t\t$cmd = \"tiffinfo \" . $tiff_file_name . ' | grep \"Image Width:\"';\n\t\t$resp = exec_in_dir($dir_fax, $cmd, $ok);\n\t\tif (!$ok) {\n\t\t\techo \"can not find fax size\";\n\t\t\treturn false; // \"can not find fax size\"\n\t\t}\n\n\t\t$pix_w = 0;\n\t\t$pix_h = 0;\n\t\t$tmp = array();\n\t\tif (preg_match('/Width.*?(\\d+).*?Length.*?(\\d+)/', $resp, $tmp)) {\n\t\t\t$pix_w = $tmp[1];\n\t\t\t$pix_h = $tmp[2];\n\t\t}\n\n\t\t$page_width  = $pix_w / $ppi_w;\n\t\t$page_height = $pix_h / $ppi_h;\n\t\t$page_size   = 'a4';\n\n\t\tif (($page_width > 8.4) && ($page_height > 13)) {\n\t\t\t$page_width  = 8.5;\n\t\t\t$page_height = 14;\n\t\t\t$page_size   = 'legal';\n\t\t}\n\t\telseif (($page_width > 8.4) && ($page_height < 12)) {\n\t\t\t$page_width  = 8.5;\n\t\t\t$page_height = 11;\n\t\t\t$page_size   = 'letter';\n\t\t}\n\t\telseif (($page_width < 8.4) && ($page_height > 11)) {\n\t\t\t$page_width  = 8.3;\n\t\t\t$page_height = 11.7;\n\t\t\t$page_size   = 'a4';\n\t\t}\n\t\t$page_width  = sprintf('%.4f', $page_width);\n\t\t$page_height = sprintf('%.4f', $page_height);\n\n\t\t$cmd = implode(' ', array('tiff2pdf', \n\t\t\t'-o', correct_path($pdf_file_name),\n\t\t\tcorrect_path($tiff_file_name),\n\t\t));\n\n\t\t$resp = exec_in_dir($dir_fax, $cmd, $ok);\n\n\t\tif (!file_exists($pdf_file_name)) {\n\t\t\techo \"can not create pdf: $resp\";\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $pdf_file_name;\n\t}\n}\n\nif (!function_exists('fax_split_dtmf')) {\n\tfunction fax_split_dtmf(&$fax_number, &$fax_dtmf) {\n\t\t$tmp = array();\n\t\t$fax_dtmf = '';\n\t\tif (preg_match('/^\\s*(.*?)\\s*\\((.*)\\)\\s*$/', $fax_number, $tmp)) {\n\t\t\t$fax_number = $tmp[1];\n\t\t\t$fax_dtmf = $tmp[2];\n\t\t}\n\t}\n}\n\n//includes\n\tif (!defined('STDIN')) { include \"root.php\"; }\n\trequire_once \"resources/require.php\";\n\tinclude \"resources/classes/event_socket.php\";\n\tinclude \"resources/phpmailer/class.phpmailer.php\";\n\tinclude \"resources/phpmailer/class.smtp.php\"; // optional, gets called from within class.phpmailer.php if not already loaded\n\n//set php ini values\n\tini_set(max_execution_time,900); //15 minutes\n\tini_set('memory_limit', '96M');\n\n//start the to cache the output\n\tif ($output_type == \"file\") {\n\t\tob_end_clean();\n\t\tob_start();\n\t}\n\n//add a delimeter to the log\n\techo \"\\n---------------------------------\\n\";\n\n//get the parameters and save them as variables\n\t$php_version = substr(phpversion(), 0, 1);\n\tif ($php_version == '4') {\n\t\t$domain_name = $_REQUEST[\"domain\"];\n\t\t$fax_email = $_REQUEST[\"email\"];\n\t\t$fax_extension = $_REQUEST[\"extension\"];\n\t\t$fax_file = $_REQUEST[\"name\"];\n\t\t$fax_messages = $_REQUEST[\"messages\"];\n\t\t$caller_id_name = $_REQUEST[\"caller_id_name\"];\n\t\t$caller_id_number = $_REQUEST[\"caller_id_number\"];\n\t\t$fax_relay = $_REQUEST[\"retry\"];\n\t\t$mail_from_address = $_REQUEST[\"mailfrom_address\"];\n\t}\n\telse {\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][1]);\n\t\t$fax_email = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][2]);\n\t\t$fax_extension = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][3]);\n\t\t$fax_file = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][4]);\n\t\t$fax_messages = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][5]);\n\t\t$domain_name = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][6]);\n\t\t$caller_id_name = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][7]);\n\t\t$caller_id_number = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][8]);\n\t\t$fax_relay = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][9]);\n\t\t$fax_prefix = $tmp_array[1];\n\t\tunset($tmp_array);\n\t\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][10]);\n\t\t$mail_from_address = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t//$tmp_array = explode(\"=\", $_SERVER[\"argv\"][10]);\n\t\t//$destination_number = $tmp_array[1];\n\t\t//unset($tmp_array);\n\t}\n\n//get the fax file name (only) if a full path\n\t$fax_path = pathinfo($fax_file);\n\t$fax_file_only = $fax_path['basename'];\n\t$fax_file_name = $fax_path['filename'];\n\t$dir_fax = $fax_path['dirname'];\n\n//get the domain_uuid from the database\n\t$sql = \"select * from v_domains \";\n\t$sql .= \"where domain_name = :domain_name \";\n\t$parameters['domain_name'] = $domain_name;\n\t$database = new database;\n\t$result = $database->select($sql, $parameters, 'all');\n\tif (is_array($result) && @sizeof($result) != 0) {\n\t\tforeach ($result as &$row) {\n\t\t\t//set the domain variables\n\t\t\t\t$domain_uuid = $row[\"domain_uuid\"];\n\t\t\t\t$_SESSION[\"domain_uuid\"] = $row[\"domain_uuid\"];\n\t\t\t\t$_SESSION[\"domain_name\"] = $domain_name;\n\t\t\t//set the setting arrays\n\t\t\t\t$domain = new domains();\n\t\t\t\t$domain->db = $db;\n\t\t\t\t$domain->set();\n\t\t}\n\t}\n\tunset($sql, $parameters, $result);\n\n//prepare smtp server settings\n\t$email_from_address = $_SESSION['email']['smtp_from']['text'];\n\t$email_from_name = $_SESSION['email']['smtp_from_name']['text'];\n\tif (isset($_SESSION['fax']['smtp_from']['text']) && strlen($_SESSION['fax']['smtp_from']['text']) > 0) {\n\t\t$email_from_address = $_SESSION['fax']['smtp_from']['text'];\n\t}\n\tif (isset($_SESSION['fax']['smtp_from_name']['text']) && strlen($_SESSION['fax']['smtp_from_name']['text']) > 0) {\n\t\t$email_from_name = $_SESSION['fax']['smtp_from_name']['text'];\n\t}\n\n//get the fax settings from the database\n\t$sql = \"select * from v_fax \";\n\t$sql .= \"where domain_uuid = :domain_uuid \";\n\t$sql .= \"and fax_extension = :fax_extension \";\n\t$parameters['domain_uuid'] = $domain_uuid;\n\t$parameters['fax_extension'] = $fax_extension;\n\t$database = new database;\n\t$row = $database->select($sql, $parameters, 'row');\n\tif (is_array($row) && @sizeof($row) != 0) {\n\t\t$fax_email = $row[\"fax_email\"];\n\t\t$fax_uuid = $row[\"fax_uuid\"];\n\t\t$fax_accountcode = $row[\"fax_accountcode\"];\n\t\t$fax_prefix = $row[\"fax_prefix\"];\n\t\t$fax_pin_number = $row[\"fax_pin_number\"];\n\t\t$fax_caller_id_name = $row[\"fax_caller_id_name\"];\n\t\t$fax_caller_id_number = $row[\"fax_caller_id_number\"];\n\t\t$fax_forward_number = $row[\"fax_forward_number\"];\n\t\t$fax_description = $row[\"fax_description\"];\n\t\t$fax_email_inbound_subject_tag = $row['fax_email_inbound_subject_tag'];\n\t\t$mail_to_address = $fax_email;\n\t}\n\tunset($sql, $parameters, $row);\n\n//set the fax directory\n\tif (!file_exists($dir_fax) || !file_exists(path_join($dir_fax, $fax_file_only))) {\n\t\t$dir_fax = $_SESSION['switch']['storage']['dir'].'/fax/'.$domain_name.'/'.$fax_extension.'/inbox';\n\t\tif (!file_exists($dir_fax) || !file_exists(path_join($dir_fax, $fax_file_only))) {\n\t\t\t$dir_fax = $_SESSION['switch']['storage']['dir'].'/fax/'.$fax_extension.'/inbox';\n\t\t}\n\t}\n\t$fax_file = path_join($dir_fax, $fax_file_only);\n\n//used for debug\n\techo \"fax_prefix: $fax_prefix\\n\";\n\techo \"mail_to_adress: $mail_to_address\\n\";\n\techo \"fax_email: $fax_email\\n\";\n\techo \"fax_extension: $fax_extension\\n\";\n\techo \"fax_name: $fax_file_only\\n\";\n\techo \"dir_fax: $dir_fax\\n\";\n\techo \"full_path: $fax_file\\n\";\n\n\t$pdf_file = tiff2pdf($fax_file);\n\techo \"file: $pdf_file \\n\";\n\tif (!$pdf_file) {\n\t\t$fax_file_warning = 'warning: Fax image not available on server.';\n\t}\n\telse{\n\t\t$fax_file_warning = '';\n\t}\n\n\techo \"pdf file: $pdf_file\\n\";\n\n//forward the fax\n\tif (file_exists($fax_file)) {\n\t\tif (strpos($fax_file_name,'#') !== false) {\n\t\t\t$tmp = explode(\"#\",$fax_file_name);\n\t\t\t$fax_forward_number = $fax_prefix.$tmp[0];\n\t\t}\n\n\t\tif (isset($fax_forward_number) && strlen($fax_forward_number) > 0) {\n\t\t\t//show info\n\t\t\t\techo \"fax_forward_number: $fax_forward_number\\n\";\n\t\t\n\t\t\t//add fax to the fax queue or send it directly\n\t\t\tif ($_SESSION['fax_queue']['enabled']['boolean'] == 'true') {\n\t\t\t\t//build an array to add the fax to the queue\n\t\t\t\t$array['fax_queue'][0]['fax_queue_uuid'] = uuid();\n\t\t\t\t$array['fax_queue'][0]['domain_uuid'] = $domain_uuid;\n\t\t\t\t$array['fax_queue'][0]['fax_uuid'] = $fax_uuid;\n\t\t\t\t$array['fax_queue'][0]['fax_date'] = 'now()';\n\t\t\t\t$array['fax_queue'][0]['hostname'] = gethostname();\n\t\t\t\t$array['fax_queue'][0]['fax_caller_id_name'] = $fax_caller_id_name;\n\t\t\t\t$array['fax_queue'][0]['fax_caller_id_number'] = $fax_caller_id_number;\n\t\t\t\t$array['fax_queue'][0]['fax_number'] = $fax_forward_number;\n\t\t\t\t$array['fax_queue'][0]['fax_prefix'] = $fax_prefix;\n\t\t\t\t$array['fax_queue'][0]['fax_email_address'] = $mail_to_address;\n\t\t\t\t$array['fax_queue'][0]['fax_file'] = $fax_file;\n\t\t\t\t$array['fax_queue'][0]['fax_status'] = 'waiting';\n\t\t\t\t$array['fax_queue'][0]['fax_retry_count'] = 0;\n\t\t\t\t$array['fax_queue'][0]['fax_accountcode'] = $fax_accountcode;\n\n\t\t\t\t//add temporary permisison\n\t\t\t\t$p = new permissions;\n\t\t\t\t$p->add('fax_queue_add', 'temp');\n\n\t\t\t\t//save the data\n\t\t\t\t$database = new database;\n\t\t\t\t$database->app_name = 'fax queue';\n\t\t\t\t$database->app_uuid = '3656287f-4b22-4cf1-91f6-00386bf488f4';\n\t\t\t\t$database->save($array);\n\n\t\t\t\t//remove temporary permisison\n\t\t\t\t$p->delete('fax_queue_add', 'temp');\n\t\t\t\t\n\t\t\t\t//add message to show in the browser\n\t\t\t\tmessage::add($text['confirm-queued']);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfax_split_dtmf($fax_forward_number, $fax_dtmf);\n\n\t\t\t\t$fax_send_mode = $_SESSION['fax']['send_mode']['text'];\n\t\t\t\tif (strlen($fax_send_mode) == 0) {\n\t\t\t\t\t$fax_send_mode = 'direct';\n\t\t\t\t}\n\n\t\t\t\t$route_array = outbound_route_to_bridge($domain_uuid, $fax_forward_number);\n\t\t\t\tif (count($route_array) == 0) {\n\t\t\t\t\t//send the internal call to the registered extension\n\t\t\t\t\t\t$fax_uri = \"user/\".$fax_forward_number.\"@\".$domain_name;\n\t\t\t\t\t\t$fax_variables = \"\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//send the external call\n\t\t\t\t\t\t$fax_uri = $route_array[0];\n\t\t\t\t\t\t$fax_variables = \"\";\n\t\t\t\t\t\tforeach($_SESSION['fax']['variable'] as $variable) {\n\t\t\t\t\t\t\t$fax_variables .= $variable.\",\";\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//build the dial string\n\t\t\t\t$dial_string = \"absolute_codec_string='PCMU,PCMA',\";\n\t\t\t\t$dial_string .= \"accountcode='\"                  . $fax_accountcode         . \"',\";\n\t\t\t\t$dial_string .= \"sip_h_X-accountcode='\"          . $fax_accountcode         . \"',\";\n\t\t\t\t$dial_string .= \"domain_uuid=\"                   . $domain_uuid . \",\";\n\t\t\t\t$dial_string .= \"domain_name=\"                   . $domain_name . \",\";\n\t\t\t\t$dial_string .= \"origination_caller_id_name='\"   . $fax_caller_id_name      . \"',\";\n\t\t\t\t$dial_string .= \"origination_caller_id_number='\" . $fax_caller_id_number    . \"',\";\n\t\t\t\t$dial_string .= \"fax_ident='\"                    . $fax_caller_id_number    . \"',\";\n\t\t\t\t$dial_string .= \"fax_header='\"                   . $fax_caller_id_name      . \"',\";\n\t\t\t\t$dial_string .= \"fax_file='\"                     . $fax_file                . \"',\";\n\n\t\t\t\tif ($fax_send_mode != 'queue') {\n\t\t\t\t\t//add more ot the dial string\n\t\t\t\t\t\t$dial_string .= $fax_variables;\n\t\t\t\t\t\t$dial_string .= \"mailto_address='\"     . $mail_to_address   . \"',\";\n\t\t\t\t\t\t$dial_string .= \"mailfrom_address='\"   . $mail_from_address . \"',\";\n\t\t\t\t\t\t$dial_string .= \"fax_uri=\" . $fax_uri  . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_retry_attempts=1\" . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_retry_limit=20\"   . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_retry_sleep=180\"  . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_verbose=true\"     . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_use_ecm=off\"      . \",\";\n\t\t\t\t\t\t$dial_string .= \"api_hangup_hook='lua fax_retry.lua'\";\n\t\t\t\t\t\t$dial_string = \"{\" . $dial_string . \"}\" . $fax_uri.\" &txfax('\".$fax_file.\"')\";\n\n\t\t\t\t\t//get the event socket information\n\t\t\t\t\t\t$sql = \"select * from v_settings \";\n\t\t\t\t\t\t$database = new database;\n\t\t\t\t\t\t$row = $database->select($sql, $parameters, 'row');\n\t\t\t\t\t\tif (is_array($row) && @sizeof($row) != 0) {\n\t\t\t\t\t\t\t$event_socket_ip_address = $row[\"event_socket_ip_address\"];\n\t\t\t\t\t\t\t$event_socket_port = $row[\"event_socket_port\"];\n\t\t\t\t\t\t\t$event_socket_password = $row[\"event_socket_password\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunset($sql);\n\n\t\t\t\t\t//create the event socket connection\n\t\t\t\t\t\t$fp = event_socket_create($event_socket_ip_address, $event_socket_port, $event_socket_password);\n\n\t\t\t\t\t//send the command with event socket\n\t\t\t\t\t\tif ($fp) {\n\t\t\t\t\t\t\t//prepare the fax originate command\n\t\t\t\t\t\t\t\t$cmd = \"api originate \".$dial_string;\n\t\t\t\t\t\t\t//send info to the log\n\t\t\t\t\t\t\t\techo \"fax forward\\n\";\n\t\t\t\t\t\t\t\techo $cmd.\"\\n\";\n\t\t\t\t\t\t\t//send the command to event socket\n\t\t\t\t\t\t\t\t$response = event_socket_request($fp, $cmd);\n\t\t\t\t\t\t\t\t$response = str_replace(\"\\n\", \"\", $response);\n\t\t\t\t\t\t\t//send info to the log\n\t\t\t\t\t\t\t\techo \"response: \".$response.\"\\n\";\n\t\t\t\t\t\t\t//get the uuid\n\t\t\t\t\t\t\t\t$uuid = str_replace(\"+OK \", \"\", $response);\n\t\t\t\t\t\t\t//close event socket\n\t\t\t\t\t\t\t\tfclose($fp);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n//send the email\n\tif (strlen($fax_email) > 0 && file_exists($fax_file)) {\n\n\t\t//get the language code\n\t\t\t$language_code = $_SESSION['domain']['language']['code'];\n\n\t\t//get the template subcategory\n\t\t\tif ($fax_relay == 'true') {\n\t\t\t\t$template_subcategory = 'relay';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$template_subcategory = 'inbound';\n\t\t\t}\n\n\t\t//get the email template from the database\n\t\t\tif (isset($fax_email) && strlen($fax_email) > 0) {\n\t\t\t\t$sql = \"select template_subject, template_body from v_email_templates \";\n\t\t\t\t$sql .= \"where (domain_uuid = :domain_uuid or domain_uuid is null) \";\n\t\t\t\t$sql .= \"and template_language = :template_language \";\n\t\t\t\t$sql .= \"and template_category = :template_category \";\n\t\t\t\t$sql .= \"and template_subcategory = :template_subcategory \";\n\t\t\t\t$sql .= \"and template_type = :template_type \";\n\t\t\t\t$sql .= \"and template_enabled = 'true' \";\n\t\t\t\t$parameters['domain_uuid'] = $domain_uuid;\n\t\t\t\t$parameters['template_language'] = $language_code;\n\t\t\t\t$parameters['template_category'] = 'fax';\n\t\t\t\t$parameters['template_subcategory'] = $template_subcategory;\n\t\t\t\t$parameters['template_type'] = 'html';\n\t\t\t\t$database = new database;\n\t\t\t\t$row = $database->select($sql, $parameters, 'row');\n\t\t\t\tif (is_array($row)) {\n\t\t\t\t\t$email_subject = $row['template_subject'];\n\t\t\t\t\t$email_body = $row['template_body'];\n\t\t\t\t}\n\t\t\t\tunset($sql, $parameters);\n\t\t\t}\n\n\t\t//replace variables in email subject\n\t\t\t$email_subject = str_replace('${domain_name}', $domain_name, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_file_name}', $fax_file_name, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_extension}', $fax_extension, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_messages}', $fax_messages, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_file_warning}', $fax_file_warning, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_subject_tag}', $fax_email_inbound_subject_tag, $email_subject);\n\n\t\t//replace variables in email body\n\t\t\t$email_body = str_replace('${domain_name}', $domain_name, $email_body);\n\t\t\t$email_body = str_replace('${fax_file_name}', $fax_file_name, $email_body);\n\t\t\t$email_body = str_replace('${fax_extension}', $fax_extension, $email_body);\n\t\t\t$email_body = str_replace('${fax_messages}', $fax_messages, $email_body);\n\t\t\t$email_body = str_replace('${fax_file_warning}', $fax_file_warning, $email_body);\n\t\t\t$email_body = str_replace('${fax_subject_tag}', $fax_email_inbound_subject_tag, $email_body);\n\n\t\t//debug info\n\t\t\t//echo \"<hr />\\n\";\n\t\t\t//echo \"email_address \".$fax_email.\"<br />\\n\";\n\t\t\t//echo \"email_subject \".$email_subject.\"<br />\\n\";\n\t\t\t//echo \"email_body \".$email_body.\"<br />\\n\";\n\t\t\t//echo \"<hr />\\n\";\n\n\t\t//send the email\n\t\t\tif (isset($fax_email) && strlen($fax_email) > 0) {\n\t\t\t\t//add the attachment\n\t\t\t\tif (strlen($fax_file_name) > 0) {\n\t\t\t\t\t$email_attachments[0]['type'] = 'file';\n\t\t\t\t\tif ($pdf_file && file_exists($pdf_file)) {\n\t\t\t\t\t\t$email_attachments[0]['name'] = $fax_file_name.'.pdf';\n\t\t\t\t\t\t$email_attachments[0]['value'] = $pdf_file;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$email_attachments[0]['name'] = $fax_file_name.'.tif';\n\t\t\t\t\t\t$email_attachments[0]['value'] = $fax_file;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//$email_response = send_email($email_address, $email_subject, $email_body);\n\t\t\t\t$email = new email;\n\t\t\t\t$email->recipients = $fax_email;\n\t\t\t\t$email->subject = $email_subject;\n\t\t\t\t$email->body = $email_body;\n\t\t\t\t$email->from_address = $email_from_address;\n\t\t\t\t$email->from_name = $email_from_name;\n\t\t\t\t$email->attachments = $email_attachments;\n\t\t\t\t//$email->debug_level = 3;\n\t\t\t\t$response = $mail->error;\n\t\t\t\t$sent = $email->send();\n\t\t\t}\n\n\t\t//output to the log\n\t\t\techo \"email_from_address: \".$email_from_address.\"\\n\";\n\t\t\techo \"email_from_name: \".$email_from_address.\"\\n\";\n\t\t\techo \"email_subject: $email_subject\\n\";\n\n\t\t//send the email\n\t\t\tif ($sent) {\n\t\t\t\techo \"Mailer Error\";\n\t\t\t\t$email_status='failed';\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo \"Message sent!\";\n\t\t\t\t$email_status='ok';\n\t\t\t}\n\t}\n\n//when sending an email the following files are created:\n\t//     /usr/local/freeswitch/storage/fax\n\t//        emailed_faxes.log - this is a log of all the faxes we have successfully emailed.  (note that we need to work out how to rotate this log)\n\t//        failed_fax_emails.log - this is a log of all the faxes we have failed to email.  This log is in the form of instructions that we can re-execute in order to retry.\n\t//            Whenever this exists there should be an at job present to run it sometime in the next 3 minutes (check with atq).  If we succeed in sending the messages\n\t//            this file will be removed.\n\t//     /tmp\n\t//        fax_email_retry.sh - this is the renamed failed_fax_emails.log and is created only at the point in time that we are trying to re-send the emails.  Note however\n\t//            that this will continue to exist even if we succeed as we do not delete it when finished.\n\t//        failed_fax_emails.sh - this is created when we have a email we need to re-send.  At the time it is created, an at job is created to execute it in 3 minutes time,\n\t//            this allows us to try sending the email again at that time.  If the file exists but there is no at job this is because there are no longer any emails queued\n\t//            as we have successfully sent them all.\n\tif ($_SESSION['fax_queue']['enabled']['boolean'] != 'true' && strlen($fax_email) > 0 && file_exists($fax_file)) {\n\t\tif (stristr(PHP_OS, 'WIN')) {\n\t\t\t//not compatible with windows\n\t\t}\n\t\telse {\n\t\t\t$fax_to_email_queue_dir = $_SESSION['switch']['storage']['dir'].\"/fax\";\n\t\t\tif ($email_status == 'ok') {\n\t\t\t\t//log the success\n\t\t\t\t\t$fp = fopen($fax_to_email_queue_dir.\"/emailed_faxes.log\", \"a\");\n\t\t\t\t\tfwrite($fp, $fax_file_name.\" received on \".$fax_extension.\" emailed to \".$fax_email.\" \".$fax_messages.\"\\n\");\n\t\t\t\t\tfclose($fp);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//create an instruction log to email messages once the connection to the mail server has been restored\n\t\t\t\t\t$fp = fopen($fax_to_email_queue_dir.\"/failed_fax_emails.log\", \"a\");\n\t\t\t\t\tfwrite($fp, PHP_BINDIR.\"/php \".$_SERVER[\"DOCUMENT_ROOT\"].PROJECT_PATH.\"/secure/fax_to_email.php email='\".$fax_email.\"' extension=\".$fax_extension.\" name='\".$fax_file.\"' messages='\".$fax_messages.\"' domain=\".$domain_name.\" caller_id_name='\".$caller_id_name.\"' caller_id_number=\".$caller_id_number.\" retry=true\\n\");\n\t\t\t\t\tfclose($fp);\n\t\t\t\t//create a script to do the delayed mailing\n\t\t\t\t\t$fp = fopen($_SESSION['server']['temp']['dir'].\"/failed_fax_emails.sh\", \"w\");\n\t\t\t\t\tfwrite($fp, \"rm \".$_SESSION['server']['temp']['dir'].\"/fax_email_retry.sh\\n\");\n\t\t\t\t\tfwrite($fp, \"mv \".$fax_to_email_queue_dir.\"/failed_fax_emails.log \".$_SESSION['server']['temp']['dir'].\"/fax_email_retry.sh\\n\");\n\t\t\t\t\tfwrite($fp, \"chmod 777 \".$_SESSION['server']['temp']['dir'].\"/fax_email_retry.sh\\n\");\n\t\t\t\t\tfwrite($fp, $_SESSION['server']['temp']['dir'].\"/fax_email_retry.sh\\n\");\n\t\t\t\t\tfclose($fp);\n\t\t\t\t\t$tmp_response = exec(\"chmod 777 \".$_SESSION['server']['temp']['dir'].\"/failed_fax_emails.sh\");\n\t\t\t\t//note we use batch in order to execute when system load is low.  Alternatively this could be replaced with AT.\n\t\t\t\t\t$tmp_response = exec(\"at -f \".$_SESSION['server']['temp']['dir'].\"/failed_fax_emails.sh now + 3 minutes\");\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n//open the file for writing\n\tif ($output_type == \"file\") {\n\t\t//open the file\n\t\t\t$fp = fopen($_SESSION['server']['temp']['dir'].\"/fax_to_email.log\", \"w\");\n\t\t//get the output from the buffer\n\t\t\t$content = ob_get_contents();\n\t\t//clean the buffer\n\t\t\tob_end_clean();\n\t\t//write the contents of the buffer\n\t\t\tfwrite($fp, $content);\n\t\t\tfclose($fp);\n\t}\n\n?>\n"], "fixing_code": ["<?php\n/*\n\tFusionPBX\n\tVersion: MPL 1.1\n\n\tThe contents of this file are subject to the Mozilla Public License Version\n\t1.1 (the \"License\"); you may not use this file except in compliance with\n\tthe License. You may obtain a copy of the License at\n\thttp://www.mozilla.org/MPL/\n\n\tSoftware distributed under the License is distributed on an \"AS IS\" basis,\n\tWITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n\tfor the specific language governing rights and limitations under the\n\tLicense.\n\n\tThe Original Code is FusionPBX\n\n\tThe Initial Developer of the Original Code is\n\tMark J Crane <markjcrane@fusionpbx.com>\n\tPortions created by the Initial Developer are Copyright (C) 2008-2022\n\tthe Initial Developer. All Rights Reserved.\n\n\tContributor(s):\n\tMark J Crane <markjcrane@fusionpbx.com>\n\tJames Rose <james.o.rose@gmail.com>\n*/\n\n$output_type = \"file\"; //file or console\n\nif (defined('STDIN')) {\n\t//get the document root php file must be executed with the full path\n\t\t$document_root = str_replace(\"\\\\\", \"/\", $_SERVER[\"PHP_SELF\"]);\n\t\t$document_root = str_replace(\"\\\\\", \"/\", $_SERVER[\"PHP_SELF\"]);\n\t\tpreg_match(\"/^(.*)\\/secure\\/.*$/\", $document_root, $matches);\n\t\t$document_root = $matches[1];\n\t//set the include path\n\t\tset_include_path($document_root);\n\t\t$_SERVER[\"DOCUMENT_ROOT\"] = $document_root;\n\t\t//echo \"$document_root is document_root\\n\";\n}\n\n$IS_WINDOWS = stristr(PHP_OS, 'WIN') ? true : false;\n\nif (!function_exists('exec_in_dir')) {\n\tfunction exec_in_dir($dir, $cmd, &$ok) {\n\t\t$args = func_get_args();\n\t\t$cwd = getcwd();\n\t\tchdir($dir);\n\t\t$output = array();\n\t\t$ret = 0;\n\t\t$result = exec($cmd, $output, $ret);\n\t\tif ($cwd)\n\t\t\tchdir($cwd);\n\t\t$ok = ($ret == 0);\n\t\treturn implode(\"\\n\", $output);\n\t}\n}\n\nif (!function_exists('correct_path')) {\n\tfunction correct_path($p) {\n\t\tglobal $IS_WINDOWS;\n\t\tif ($IS_WINDOWS) {\n\t\t\treturn str_replace('/', '\\\\', $p);\n\t\t}\n\t\treturn $p;\n\t}\n}\n\nif (!function_exists('path_join')) {\n\tfunction path_join() {\n\t\t$args = func_get_args();\n\t\t$paths = array();\n\t\tforeach ($args as $arg) {\n\t\t\t$paths = array_merge($paths, (array)$arg);\n\t\t}\n\n\t\t$prefix = null;\n\t\tforeach($paths as &$path) {\n\t\t\tif ($prefix === null && strlen($path) > 0) {\n\t\t\t\tif (substr($path, 0, 1) == '/') $prefix = '/';\n\t\t\t\telse $prefix = '';\n\t\t\t}\n\t\t\t$path = trim( $path, '/' );\n\t\t}\n\n\t\tif ($prefix === null) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$paths = array_filter($paths);\n\t\treturn $prefix . implode('/', $paths);\n\t}\n}\n\nif (!function_exists('tiff2pdf')) {\n\tfunction tiff2pdf($tiff_file_name) {\n\t\t//convert the tif to a pdf\n\t\t//Ubuntu: apt-get install libtiff-tools\n\n\t\tglobal $IS_WINDOWS;\n\n\t\tif (!file_exists($tiff_file_name)) {\n\t\t\techo \"tiff file does not exists\";\n\t\t\treturn false; // \"tiff file does not exists\";\n\t\t}\n\n\t\t$GS = $IS_WINDOWS ? 'gswin32c' : 'gs';\n\t\t$tiff_file = pathinfo($tiff_file_name);\n\t\t$dir_fax = $tiff_file['dirname'];\n\t\t$fax_file_name = $tiff_file['filename'];\n\t\t$pdf_file_name = path_join($dir_fax, $fax_file_name . '.pdf');\n\n\t\tif (file_exists($pdf_file_name)) {\n\t\t\treturn $pdf_file_name;\n\t\t}\n\n\t\t$dir_fax_temp = $_SESSION['server']['temp']['dir'];\n\t\tif (!$dir_fax_temp) {\n\t\t\t$dir_fax_temp = path_join(dirname($dir_fax), 'temp');\n\t\t}\n\n\t\tif (!file_exists($dir_fax_temp)) {\n\t\t\techo \"can not create temporary directory\";\n\t\t\treturn false; //\n\t\t}\n\n\t\t$cmd  = \"tiffinfo \" . correct_path($tiff_file_name) . ' | grep \"Resolution:\"';\n\t\t$ok   = false;\n\t\t$resp = exec_in_dir($dir_fax, $cmd, $ok);\n\t\tif (!$ok) {\n\t\t\techo \"can not find fax resoulution\";\n\t\t\treturn false; // \"can not find fax resoulution\"\n\t\t}\n\n\t\t$ppi_w = 0;\n\t\t$ppi_h = 0;\n\t\t$tmp = array();\n\t\tif (preg_match('/Resolution.*?(\\d+).*?(\\d+)/', $resp, $tmp)) {\n\t\t\t$ppi_w = $tmp[1];\n\t\t\t$ppi_h = $tmp[2];\n\t\t}\n\n\t\t$cmd = \"tiffinfo \" . $tiff_file_name . ' | grep \"Image Width:\"';\n\t\t$resp = exec_in_dir($dir_fax, $cmd, $ok);\n\t\tif (!$ok) {\n\t\t\techo \"can not find fax size\";\n\t\t\treturn false; // \"can not find fax size\"\n\t\t}\n\n\t\t$pix_w = 0;\n\t\t$pix_h = 0;\n\t\t$tmp = array();\n\t\tif (preg_match('/Width.*?(\\d+).*?Length.*?(\\d+)/', $resp, $tmp)) {\n\t\t\t$pix_w = $tmp[1];\n\t\t\t$pix_h = $tmp[2];\n\t\t}\n\n\t\t$page_width  = $pix_w / $ppi_w;\n\t\t$page_height = $pix_h / $ppi_h;\n\t\t$page_size   = 'a4';\n\n\t\tif (($page_width > 8.4) && ($page_height > 13)) {\n\t\t\t$page_width  = 8.5;\n\t\t\t$page_height = 14;\n\t\t\t$page_size   = 'legal';\n\t\t}\n\t\telseif (($page_width > 8.4) && ($page_height < 12)) {\n\t\t\t$page_width  = 8.5;\n\t\t\t$page_height = 11;\n\t\t\t$page_size   = 'letter';\n\t\t}\n\t\telseif (($page_width < 8.4) && ($page_height > 11)) {\n\t\t\t$page_width  = 8.3;\n\t\t\t$page_height = 11.7;\n\t\t\t$page_size   = 'a4';\n\t\t}\n\t\t$page_width  = sprintf('%.4f', $page_width);\n\t\t$page_height = sprintf('%.4f', $page_height);\n\n\t\t$cmd = implode(' ', array('tiff2pdf', \n\t\t\t'-o', correct_path($pdf_file_name),\n\t\t\tcorrect_path($tiff_file_name),\n\t\t));\n\n\t\t$resp = exec_in_dir($dir_fax, $cmd, $ok);\n\n\t\tif (!file_exists($pdf_file_name)) {\n\t\t\techo \"can not create pdf: $resp\";\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $pdf_file_name;\n\t}\n}\n\nif (!function_exists('fax_split_dtmf')) {\n\tfunction fax_split_dtmf(&$fax_number, &$fax_dtmf) {\n\t\t$tmp = array();\n\t\t$fax_dtmf = '';\n\t\tif (preg_match('/^\\s*(.*?)\\s*\\((.*)\\)\\s*$/', $fax_number, $tmp)) {\n\t\t\t$fax_number = $tmp[1];\n\t\t\t$fax_dtmf = $tmp[2];\n\t\t}\n\t}\n}\n\n//includes\n\tif (!defined('STDIN')) { include \"root.php\"; }\n\trequire_once \"resources/require.php\";\n\tinclude \"resources/classes/event_socket.php\";\n\tinclude \"resources/phpmailer/class.phpmailer.php\";\n\tinclude \"resources/phpmailer/class.smtp.php\"; // optional, gets called from within class.phpmailer.php if not already loaded\n\n//set php ini values\n\tini_set(max_execution_time,900); //15 minutes\n\tini_set('memory_limit', '96M');\n\n//start the to cache the output\n\tif ($output_type == \"file\") {\n\t\tob_end_clean();\n\t\tob_start();\n\t}\n\n//add a delimeter to the log\n\techo \"\\n---------------------------------\\n\";\n\n//get the parameters and save them as variables\n\t$php_version = substr(phpversion(), 0, 1);\n\tif ($php_version == '4') {\n\t\t$domain_name = $_REQUEST[\"domain\"];\n\t\t$fax_email = $_REQUEST[\"email\"];\n\t\t$fax_extension = $_REQUEST[\"extension\"];\n\t\t$fax_file = $_REQUEST[\"name\"];\n\t\t$fax_messages = $_REQUEST[\"messages\"];\n\t\t$caller_id_name = $_REQUEST[\"caller_id_name\"];\n\t\t$caller_id_number = $_REQUEST[\"caller_id_number\"];\n\t\t$fax_relay = $_REQUEST[\"retry\"];\n\t\t$mail_from_address = $_REQUEST[\"mailfrom_address\"];\n\t}\n\telse {\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][1]);\n\t\t$fax_email = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][2]);\n\t\t$fax_extension = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][3]);\n\t\t$fax_file = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][4]);\n\t\t$fax_messages = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][5]);\n\t\t$domain_name = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][6]);\n\t\t$caller_id_name = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][7]);\n\t\t$caller_id_number = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][8]);\n\t\t$fax_relay = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][9]);\n\t\t$fax_prefix = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t$tmp_array = explode(\"=\", $_SERVER[\"argv\"][10]);\n\t\t$mail_from_address = $tmp_array[1];\n\t\tunset($tmp_array);\n\n\t\t//$tmp_array = explode(\"=\", $_SERVER[\"argv\"][10]);\n\t\t//$destination_number = $tmp_array[1];\n\t\t//unset($tmp_array);\n\t}\n\n//get the fax file name (only) if a full path\n\t$fax_path = pathinfo($fax_file);\n\t$fax_file_only = $fax_path['basename'];\n\t$fax_file_name = $fax_path['filename'];\n\t$dir_fax = $fax_path['dirname'];\n\n//get the domain_uuid from the database\n\t$sql = \"select * from v_domains \";\n\t$sql .= \"where domain_name = :domain_name \";\n\t$parameters['domain_name'] = $domain_name;\n\t$database = new database;\n\t$result = $database->select($sql, $parameters, 'all');\n\tif (is_array($result) && @sizeof($result) != 0) {\n\t\tforeach ($result as &$row) {\n\t\t\t//set the domain variables\n\t\t\t\t$domain_uuid = $row[\"domain_uuid\"];\n\t\t\t\t$_SESSION[\"domain_uuid\"] = $row[\"domain_uuid\"];\n\t\t\t\t$_SESSION[\"domain_name\"] = $domain_name;\n\t\t\t//set the setting arrays\n\t\t\t\t$domain = new domains();\n\t\t\t\t$domain->db = $db;\n\t\t\t\t$domain->set();\n\t\t}\n\t}\n\tunset($sql, $parameters, $result);\n\n//prepare smtp server settings\n\t$email_from_address = $_SESSION['email']['smtp_from']['text'];\n\t$email_from_name = $_SESSION['email']['smtp_from_name']['text'];\n\tif (isset($_SESSION['fax']['smtp_from']['text']) && strlen($_SESSION['fax']['smtp_from']['text']) > 0) {\n\t\t$email_from_address = $_SESSION['fax']['smtp_from']['text'];\n\t}\n\tif (isset($_SESSION['fax']['smtp_from_name']['text']) && strlen($_SESSION['fax']['smtp_from_name']['text']) > 0) {\n\t\t$email_from_name = $_SESSION['fax']['smtp_from_name']['text'];\n\t}\n\n//get the fax settings from the database\n\t$sql = \"select * from v_fax \";\n\t$sql .= \"where domain_uuid = :domain_uuid \";\n\t$sql .= \"and fax_extension = :fax_extension \";\n\t$parameters['domain_uuid'] = $domain_uuid;\n\t$parameters['fax_extension'] = $fax_extension;\n\t$database = new database;\n\t$row = $database->select($sql, $parameters, 'row');\n\tif (is_array($row) && @sizeof($row) != 0) {\n\t\t$fax_email = $row[\"fax_email\"];\n\t\t$fax_uuid = $row[\"fax_uuid\"];\n\t\t$fax_accountcode = $row[\"fax_accountcode\"];\n\t\t$fax_prefix = $row[\"fax_prefix\"];\n\t\t$fax_pin_number = $row[\"fax_pin_number\"];\n\t\t$fax_caller_id_name = $row[\"fax_caller_id_name\"];\n\t\t$fax_caller_id_number = $row[\"fax_caller_id_number\"];\n\t\t$fax_forward_number = $row[\"fax_forward_number\"];\n\t\t$fax_description = $row[\"fax_description\"];\n\t\t$fax_email_inbound_subject_tag = $row['fax_email_inbound_subject_tag'];\n\t\t$mail_to_address = $fax_email;\n\t}\n\tunset($sql, $parameters, $row);\n\n//set the fax directory\n\tif (!file_exists($dir_fax) || !file_exists(path_join($dir_fax, $fax_file_only))) {\n\t\t$dir_fax = $_SESSION['switch']['storage']['dir'].'/fax/'.$domain_name.'/'.$fax_extension.'/inbox';\n\t\tif (!file_exists($dir_fax) || !file_exists(path_join($dir_fax, $fax_file_only))) {\n\t\t\t$dir_fax = $_SESSION['switch']['storage']['dir'].'/fax/'.$fax_extension.'/inbox';\n\t\t}\n\t}\n\t$fax_file = path_join($dir_fax, $fax_file_only);\n\n//used for debug\n\techo \"fax_prefix: $fax_prefix\\n\";\n\techo \"mail_to_adress: $mail_to_address\\n\";\n\techo \"fax_email: $fax_email\\n\";\n\techo \"fax_extension: $fax_extension\\n\";\n\techo \"fax_name: $fax_file_only\\n\";\n\techo \"dir_fax: $dir_fax\\n\";\n\techo \"full_path: $fax_file\\n\";\n\n\t$pdf_file = tiff2pdf($fax_file);\n\techo \"file: $pdf_file \\n\";\n\tif (!$pdf_file) {\n\t\t$fax_file_warning = 'warning: Fax image not available on server.';\n\t}\n\telse{\n\t\t$fax_file_warning = '';\n\t}\n\n\techo \"pdf file: $pdf_file\\n\";\n\n//forward the fax\n\tif (file_exists($fax_file)) {\n\t\tif (strpos($fax_file_name,'#') !== false) {\n\t\t\t$tmp = explode(\"#\",$fax_file_name);\n\t\t\t$fax_forward_number = $fax_prefix.$tmp[0];\n\t\t}\n\n\t\tif (isset($fax_forward_number) && strlen($fax_forward_number) > 0) {\n\t\t\t//show info\n\t\t\t\techo \"fax_forward_number: $fax_forward_number\\n\";\n\n\t\t\t//add fax to the fax queue or send it directly\n\t\t\tif ($_SESSION['fax_queue']['enabled']['boolean'] == 'true') {\n\t\t\t\t//build an array to add the fax to the queue\n\t\t\t\t$array['fax_queue'][0]['fax_queue_uuid'] = uuid();\n\t\t\t\t$array['fax_queue'][0]['domain_uuid'] = $domain_uuid;\n\t\t\t\t$array['fax_queue'][0]['fax_uuid'] = $fax_uuid;\n\t\t\t\t$array['fax_queue'][0]['fax_date'] = 'now()';\n\t\t\t\t$array['fax_queue'][0]['hostname'] = gethostname();\n\t\t\t\t$array['fax_queue'][0]['fax_caller_id_name'] = $fax_caller_id_name;\n\t\t\t\t$array['fax_queue'][0]['fax_caller_id_number'] = $fax_caller_id_number;\n\t\t\t\t$array['fax_queue'][0]['fax_number'] = $fax_forward_number;\n\t\t\t\t$array['fax_queue'][0]['fax_prefix'] = $fax_prefix;\n\t\t\t\t$array['fax_queue'][0]['fax_email_address'] = $mail_to_address;\n\t\t\t\t$array['fax_queue'][0]['fax_file'] = $fax_file;\n\t\t\t\t$array['fax_queue'][0]['fax_status'] = 'waiting';\n\t\t\t\t$array['fax_queue'][0]['fax_retry_count'] = 0;\n\t\t\t\t$array['fax_queue'][0]['fax_accountcode'] = $fax_accountcode;\n\n\t\t\t\t//add temporary permisison\n\t\t\t\t$p = new permissions;\n\t\t\t\t$p->add('fax_queue_add', 'temp');\n\n\t\t\t\t//save the data\n\t\t\t\t$database = new database;\n\t\t\t\t$database->app_name = 'fax queue';\n\t\t\t\t$database->app_uuid = '3656287f-4b22-4cf1-91f6-00386bf488f4';\n\t\t\t\t$database->save($array);\n\n\t\t\t\t//remove temporary permisison\n\t\t\t\t$p->delete('fax_queue_add', 'temp');\n\t\t\t\t\n\t\t\t\t//add message to show in the browser\n\t\t\t\tmessage::add($text['confirm-queued']);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfax_split_dtmf($fax_forward_number, $fax_dtmf);\n\n\t\t\t\t$fax_send_mode = $_SESSION['fax']['send_mode']['text'];\n\t\t\t\tif (strlen($fax_send_mode) == 0) {\n\t\t\t\t\t$fax_send_mode = 'direct';\n\t\t\t\t}\n\n\t\t\t\t$route_array = outbound_route_to_bridge($domain_uuid, $fax_forward_number);\n\t\t\t\tif (count($route_array) == 0) {\n\t\t\t\t\t//send the internal call to the registered extension\n\t\t\t\t\t\t$fax_uri = \"user/\".escapeshellarg($fax_forward_number).\"@\".escapeshellarg($domain_name);\n\t\t\t\t\t\t$fax_variables = \"\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//send the external call\n\t\t\t\t\t\t$fax_uri = $route_array[0];\n\t\t\t\t\t\t$fax_variables = \"\";\n\t\t\t\t\t\tforeach($_SESSION['fax']['variable'] as $variable) {\n\t\t\t\t\t\t\t$fax_variables .= escapeshellarg($variable).\",\";\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//build the dial string\n\t\t\t\t$dial_string = \"absolute_codec_string='PCMU,PCMA',\";\n\t\t\t\t$dial_string .= \"accountcode='\"                  . escapeshellarg($fax_accountcode)         . \"',\";\n\t\t\t\t$dial_string .= \"sip_h_X-accountcode='\"          . escapeshellarg($fax_accountcode)         . \"',\";\n\t\t\t\t$dial_string .= \"domain_uuid=\"                   . escapeshellarg($domain_uuid)             . \",\";\n\t\t\t\t$dial_string .= \"domain_name=\"                   . escapeshellarg($domain_name)             . \",\";\n\t\t\t\t$dial_string .= \"origination_caller_id_name='\"   . escapeshellarg($fax_caller_id_name)      . \"',\";\n\t\t\t\t$dial_string .= \"origination_caller_id_number='\" . escapeshellarg($fax_caller_id_number)    . \"',\";\n\t\t\t\t$dial_string .= \"fax_ident='\"                    . escapeshellarg($fax_caller_id_number)    . \"',\";\n\t\t\t\t$dial_string .= \"fax_header='\"                   . escapeshellarg($fax_caller_id_name)      . \"',\";\n\t\t\t\t$dial_string .= \"fax_file='\"                     . escapeshellarg($fax_file)                . \"',\";\n\n\t\t\t\tif ($fax_send_mode != 'queue') {\n\t\t\t\t\t//add more ot the dial string\n\t\t\t\t\t\t$dial_string .= $fax_variables;\n\t\t\t\t\t\t$dial_string .= \"mailto_address='\"     . escapeshellarg($mail_to_address)   . \"',\";\n\t\t\t\t\t\t$dial_string .= \"mailfrom_address='\"   . escapeshellarg($mail_from_address) . \"',\";\n\t\t\t\t\t\t$dial_string .= \"fax_uri=\"             . escapeshellarg($fax_uri)  . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_retry_attempts=1\" . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_retry_limit=20\"   . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_retry_sleep=180\"  . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_verbose=true\"     . \",\";\n\t\t\t\t\t\t$dial_string .= \"fax_use_ecm=off\"      . \",\";\n\t\t\t\t\t\t$dial_string .= \"api_hangup_hook='lua fax_retry.lua'\";\n\t\t\t\t\t\t$dial_string = \"{\" . $dial_string . \"}\" . escapeshellarg($fax_uri).\" &txfax('\".escapeshellarg($fax_file).\"')\";\n\n\t\t\t\t\t//get the event socket information\n\t\t\t\t\t\t$sql = \"select * from v_settings \";\n\t\t\t\t\t\t$database = new database;\n\t\t\t\t\t\t$row = $database->select($sql, $parameters, 'row');\n\t\t\t\t\t\tif (is_array($row) && @sizeof($row) != 0) {\n\t\t\t\t\t\t\t$event_socket_ip_address = $row[\"event_socket_ip_address\"];\n\t\t\t\t\t\t\t$event_socket_port = $row[\"event_socket_port\"];\n\t\t\t\t\t\t\t$event_socket_password = $row[\"event_socket_password\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunset($sql);\n\n\t\t\t\t\t//create the event socket connection\n\t\t\t\t\t\t$fp = event_socket_create($event_socket_ip_address, $event_socket_port, $event_socket_password);\n\n\t\t\t\t\t//send the command with event socket\n\t\t\t\t\t\tif ($fp) {\n\t\t\t\t\t\t\t//prepare the fax originate command\n\t\t\t\t\t\t\t\t$cmd = \"api originate \".$dial_string;\n\t\t\t\t\t\t\t//send info to the log\n\t\t\t\t\t\t\t\techo \"fax forward\\n\";\n\t\t\t\t\t\t\t\techo $cmd.\"\\n\";\n\t\t\t\t\t\t\t//send the command to event socket\n\t\t\t\t\t\t\t\t$response = event_socket_request($fp, $cmd);\n\t\t\t\t\t\t\t\t$response = str_replace(\"\\n\", \"\", $response);\n\t\t\t\t\t\t\t//send info to the log\n\t\t\t\t\t\t\t\techo \"response: \".$response.\"\\n\";\n\t\t\t\t\t\t\t//get the uuid\n\t\t\t\t\t\t\t\t$uuid = str_replace(\"+OK \", \"\", $response);\n\t\t\t\t\t\t\t//close event socket\n\t\t\t\t\t\t\t\tfclose($fp);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n//send the email\n\tif (strlen($fax_email) > 0 && file_exists($fax_file)) {\n\n\t\t//get the language code\n\t\t\t$language_code = $_SESSION['domain']['language']['code'];\n\n\t\t//get the template subcategory\n\t\t\tif ($fax_relay == 'true') {\n\t\t\t\t$template_subcategory = 'relay';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$template_subcategory = 'inbound';\n\t\t\t}\n\n\t\t//get the email template from the database\n\t\t\tif (isset($fax_email) && strlen($fax_email) > 0) {\n\t\t\t\t$sql = \"select template_subject, template_body from v_email_templates \";\n\t\t\t\t$sql .= \"where (domain_uuid = :domain_uuid or domain_uuid is null) \";\n\t\t\t\t$sql .= \"and template_language = :template_language \";\n\t\t\t\t$sql .= \"and template_category = :template_category \";\n\t\t\t\t$sql .= \"and template_subcategory = :template_subcategory \";\n\t\t\t\t$sql .= \"and template_type = :template_type \";\n\t\t\t\t$sql .= \"and template_enabled = 'true' \";\n\t\t\t\t$parameters['domain_uuid'] = $domain_uuid;\n\t\t\t\t$parameters['template_language'] = $language_code;\n\t\t\t\t$parameters['template_category'] = 'fax';\n\t\t\t\t$parameters['template_subcategory'] = $template_subcategory;\n\t\t\t\t$parameters['template_type'] = 'html';\n\t\t\t\t$database = new database;\n\t\t\t\t$row = $database->select($sql, $parameters, 'row');\n\t\t\t\tif (is_array($row)) {\n\t\t\t\t\t$email_subject = $row['template_subject'];\n\t\t\t\t\t$email_body = $row['template_body'];\n\t\t\t\t}\n\t\t\t\tunset($sql, $parameters);\n\t\t\t}\n\n\t\t//replace variables in email subject\n\t\t\t$email_subject = str_replace('${domain_name}', $domain_name, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_file_name}', $fax_file_name, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_extension}', $fax_extension, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_messages}', $fax_messages, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_file_warning}', $fax_file_warning, $email_subject);\n\t\t\t$email_subject = str_replace('${fax_subject_tag}', $fax_email_inbound_subject_tag, $email_subject);\n\n\t\t//replace variables in email body\n\t\t\t$email_body = str_replace('${domain_name}', $domain_name, $email_body);\n\t\t\t$email_body = str_replace('${fax_file_name}', $fax_file_name, $email_body);\n\t\t\t$email_body = str_replace('${fax_extension}', $fax_extension, $email_body);\n\t\t\t$email_body = str_replace('${fax_messages}', $fax_messages, $email_body);\n\t\t\t$email_body = str_replace('${fax_file_warning}', $fax_file_warning, $email_body);\n\t\t\t$email_body = str_replace('${fax_subject_tag}', $fax_email_inbound_subject_tag, $email_body);\n\n\t\t//debug info\n\t\t\t//echo \"<hr />\\n\";\n\t\t\t//echo \"email_address \".$fax_email.\"<br />\\n\";\n\t\t\t//echo \"email_subject \".$email_subject.\"<br />\\n\";\n\t\t\t//echo \"email_body \".$email_body.\"<br />\\n\";\n\t\t\t//echo \"<hr />\\n\";\n\n\t\t//send the email\n\t\t\tif (isset($fax_email) && strlen($fax_email) > 0) {\n\t\t\t\t//add the attachment\n\t\t\t\tif (strlen($fax_file_name) > 0) {\n\t\t\t\t\t$email_attachments[0]['type'] = 'file';\n\t\t\t\t\tif ($pdf_file && file_exists($pdf_file)) {\n\t\t\t\t\t\t$email_attachments[0]['name'] = $fax_file_name.'.pdf';\n\t\t\t\t\t\t$email_attachments[0]['value'] = $pdf_file;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$email_attachments[0]['name'] = $fax_file_name.'.tif';\n\t\t\t\t\t\t$email_attachments[0]['value'] = $fax_file;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//$email_response = send_email($email_address, $email_subject, $email_body);\n\t\t\t\t$email = new email;\n\t\t\t\t$email->recipients = $fax_email;\n\t\t\t\t$email->subject = $email_subject;\n\t\t\t\t$email->body = $email_body;\n\t\t\t\t$email->from_address = $email_from_address;\n\t\t\t\t$email->from_name = $email_from_name;\n\t\t\t\t$email->attachments = $email_attachments;\n\t\t\t\t//$email->debug_level = 3;\n\t\t\t\t$response = $mail->error;\n\t\t\t\t$sent = $email->send();\n\t\t\t}\n\n\t\t//output to the log\n\t\t\techo \"email_from_address: \".$email_from_address.\"\\n\";\n\t\t\techo \"email_from_name: \".$email_from_address.\"\\n\";\n\t\t\techo \"email_subject: $email_subject\\n\";\n\n\t\t//send the email\n\t\t\tif ($sent) {\n\t\t\t\techo \"Mailer Error\";\n\t\t\t\t$email_status='failed';\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo \"Message sent!\";\n\t\t\t\t$email_status='ok';\n\t\t\t}\n\t}\n\n//when sending an email the following files are created:\n\t//     /usr/local/freeswitch/storage/fax\n\t//        emailed_faxes.log - this is a log of all the faxes we have successfully emailed.  (note that we need to work out how to rotate this log)\n\t//        failed_fax_emails.log - this is a log of all the faxes we have failed to email.  This log is in the form of instructions that we can re-execute in order to retry.\n\t//            Whenever this exists there should be an at job present to run it sometime in the next 3 minutes (check with atq).  If we succeed in sending the messages\n\t//            this file will be removed.\n\t//     /tmp\n\t//        fax_email_retry.sh - this is the renamed failed_fax_emails.log and is created only at the point in time that we are trying to re-send the emails.  Note however\n\t//            that this will continue to exist even if we succeed as we do not delete it when finished.\n\t//        failed_fax_emails.sh - this is created when we have a email we need to re-send.  At the time it is created, an at job is created to execute it in 3 minutes time,\n\t//            this allows us to try sending the email again at that time.  If the file exists but there is no at job this is because there are no longer any emails queued\n\t//            as we have successfully sent them all.\n\tif ($_SESSION['fax_queue']['enabled']['boolean'] != 'true' && strlen($fax_email) > 0 && file_exists($fax_file)) {\n\t\tif (stristr(PHP_OS, 'WIN')) {\n\t\t\t//not compatible with windows\n\t\t}\n\t\telse {\n\t\t\t$fax_to_email_queue_dir = $_SESSION['switch']['storage']['dir'].\"/fax\";\n\t\t\tif ($email_status == 'ok') {\n\t\t\t\t//log the success\n\t\t\t\t\t$fp = fopen($fax_to_email_queue_dir.\"/emailed_faxes.log\", \"a\");\n\t\t\t\t\tfwrite($fp, $fax_file_name.\" received on \".$fax_extension.\" emailed to \".$fax_email.\" \".$fax_messages.\"\\n\");\n\t\t\t\t\tfclose($fp);\n\t\t\t}\n\t\t}\n\t}\n\n//open the file for writing\n\tif ($output_type == \"file\") {\n\t\t//open the file\n\t\t\t$fp = fopen($_SESSION['server']['temp']['dir'].\"/fax_to_email.log\", \"w\");\n\t\t//get the output from the buffer\n\t\t\t$content = ob_get_contents();\n\t\t//clean the buffer\n\t\t\tob_end_clean();\n\t\t//write the contents of the buffer\n\t\t\tfwrite($fp, $content);\n\t\t\tfclose($fp);\n\t}\n\n?>\n"], "filenames": ["secure/fax_to_email.php"], "buggy_code_start_loc": [276], "buggy_code_end_loc": [649], "fixing_code_start_loc": [276], "fixing_code_end_loc": [631], "type": "CWE-77", "message": "FusionPBX 5.0.1 was discovered to contain a command injection vulnerability via /fax/fax_send.php.", "other": {"cve": {"id": "CVE-2022-35153", "sourceIdentifier": "cve@mitre.org", "published": "2022-08-18T05:15:07.497", "lastModified": "2022-08-19T16:35:18.027", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "FusionPBX 5.0.1 was discovered to contain a command injection vulnerability via /fax/fax_send.php."}, {"lang": "es", "value": "Se ha detectado que FusionPBX versi\u00f3n 5.0.1, contiene una vulnerabilidad de inyecci\u00f3n de comandos por medio del archivo /fax/fax_send.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fusionpbx:fusionpbx:5.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "FE82C4FC-EB1A-46AA-AA4B-2AD4CB4AFA1E"}]}]}], "references": [{"url": "https://github.com/fusionpbx/fusionpbx/commit/07679fe80dadb08ca23d0fc16c0f832348bfec78", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fusionpbx/fusionpbx/commit/de22a9121a091e7fedddff22329dd6149dc5ab28", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fusionpbx/fusionpbx/commit/07679fe80dadb08ca23d0fc16c0f832348bfec78"}}