{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\TicketBundle\\Entity\\MessageAttachment;\nuse Chamilo\\TicketBundle\\Entity\\Priority;\nuse Chamilo\\TicketBundle\\Entity\\Project;\nuse Chamilo\\TicketBundle\\Entity\\Status;\nuse Chamilo\\TicketBundle\\Entity\\Ticket;\n\n/**\n * Class TicketManager.\n *\n * @package chamilo.plugin.ticket\n */\nclass TicketManager\n{\n    const PRIORITY_NORMAL = 'NRM';\n    const PRIORITY_HIGH = 'HGH';\n    const PRIORITY_LOW = 'LOW';\n\n    const SOURCE_EMAIL = 'MAI';\n    const SOURCE_PHONE = 'TEL';\n    const SOURCE_PLATFORM = 'PLA';\n    const SOURCE_PRESENTIAL = 'PRE';\n\n    const STATUS_NEW = 'NAT';\n    const STATUS_PENDING = 'PND';\n    const STATUS_UNCONFIRMED = 'XCF';\n    const STATUS_CLOSE = 'CLS';\n    const STATUS_FORWARDED = 'REE';\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Get categories of tickets.\n     *\n     * @param int    $projectId\n     * @param string $order\n     *\n     * @return array\n     */\n    public static function get_all_tickets_categories($projectId, $order = '')\n    {\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_project = Database::get_main_table(TABLE_TICKET_PROJECT);\n\n        $order = empty($order) ? 'category.total_tickets DESC' : $order;\n        $projectId = (int) $projectId;\n\n        $sql = \"SELECT \n                    category.*, \n                    category.id category_id,\n                    project.other_area, \n                    project.email\n                FROM \n                $table_support_category category \n                INNER JOIN $table_support_project project\n                ON project.id = category.project_id\n                WHERE project.id  = $projectId\n                ORDER BY $order\";\n        $result = Database::query($sql);\n        $types = [];\n        while ($row = Database::fetch_assoc($result)) {\n            $types[] = $row;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param $from\n     * @param $numberItems\n     * @param $column\n     * @param $direction\n     *\n     * @return array\n     */\n    public static function getCategories($from, $numberItems, $column, $direction)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $sql = \"SELECT id, name, description, total_tickets\n                FROM $table\";\n\n        if (!in_array($direction, ['ASC', 'DESC'])) {\n            $direction = 'ASC';\n        }\n        $column = intval($column);\n        $from = intval($from);\n        $numberItems = intval($numberItems);\n\n        //$sql .= \" ORDER BY col$column $direction \";\n        $sql .= \" LIMIT $from,$numberItems\";\n\n        $result = Database::query($sql);\n        $types = [];\n        while ($row = Database::fetch_array($result)) {\n            $types[] = $row;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array|mixed\n     */\n    public static function getCategory($id)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $id = (int) $id;\n        $sql = \"SELECT id, name, description, total_tickets\n                FROM $table WHERE id = $id\";\n\n        $result = Database::query($sql);\n        $category = Database::fetch_array($result);\n\n        return $category;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getCategoriesCount()\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n\n        $sql = \"SELECT count(id) count\n                FROM $table \";\n\n        $result = Database::query($sql);\n        $category = Database::fetch_array($result);\n\n        return $category['count'];\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updateCategory($id, $params)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $id = (int) $id;\n        Database::update($table, $params, ['id = ?' => $id]);\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addCategory($params)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        Database::insert($table, $params);\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    public static function deleteCategory($id)\n    {\n        $id = intval($id);\n        if (empty($id)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_TICKET_TICKET);\n        $sql = \"UPDATE $table SET category_id = NULL WHERE category_id = $id\";\n        Database::query($sql);\n\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $sql = \"DELETE FROM $table WHERE id = $id\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * @param int   $categoryId\n     * @param array $users\n     *\n     * @return bool\n     */\n    public static function addUsersToCategory($categoryId, $users)\n    {\n        if (empty($users) || empty($categoryId)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        foreach ($users as $userId) {\n            if (self::userIsAssignedToCategory($userId, $categoryId) === false) {\n                $params = [\n                    'category_id' => $categoryId,\n                    'user_id' => $userId,\n                ];\n                Database::insert($table, $params);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $categoryId\n     *\n     * @return bool\n     */\n    public static function userIsAssignedToCategory($userId, $categoryId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        $userId = (int) $userId;\n        $categoryId = (int) $categoryId;\n        $sql = \"SELECT * FROM $table \n                WHERE category_id = $categoryId AND user_id = $userId\";\n        $result = Database::query($sql);\n\n        return Database::num_rows($result) > 0;\n    }\n\n    /**\n     * @param int $categoryId\n     *\n     * @return array\n     */\n    public static function getUsersInCategory($categoryId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        $categoryId = (int) $categoryId;\n        $sql = \"SELECT * FROM $table WHERE category_id = $categoryId\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param int $categoryId\n     */\n    public static function deleteAllUserInCategory($categoryId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        $categoryId = (int) $categoryId;\n        $sql = \"DELETE FROM $table WHERE category_id = $categoryId\";\n        Database::query($sql);\n    }\n\n    /**\n     * Get all possible tickets statuses.\n     *\n     * @return array\n     */\n    public static function get_all_tickets_status()\n    {\n        $table = Database::get_main_table(TABLE_TICKET_STATUS);\n        $sql = \"SELECT * FROM \".$table;\n        $result = Database::query($sql);\n        $types = [];\n        while ($row = Database::fetch_assoc($result)) {\n            $types[] = $row;\n        }\n\n        return $types;\n    }\n\n    /**\n     * Inserts a new ticket in the corresponding tables.\n     *\n     * @param int    $category_id\n     * @param int    $course_id\n     * @param int    $sessionId\n     * @param int    $project_id\n     * @param string $other_area\n     * @param string $subject\n     * @param string $content\n     * @param string $personalEmail\n     * @param array  $fileAttachments\n     * @param string $source\n     * @param string $priority\n     * @param string $status\n     * @param int    $assignedUserId\n     *\n     * @return bool\n     */\n    public static function add(\n        $category_id,\n        $course_id,\n        $sessionId,\n        $project_id,\n        $other_area,\n        $subject,\n        $content,\n        $personalEmail = '',\n        $fileAttachments = [],\n        $source = '',\n        $priority = '',\n        $status = '',\n        $assignedUserId = 0\n    ) {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n\n        if (empty($category_id)) {\n            return false;\n        }\n\n        $currentUserId = api_get_user_id();\n        $currentUserInfo = api_get_user_info();\n        $now = api_get_utc_datetime();\n        $course_id = (int) $course_id;\n        $category_id = (int) $category_id;\n        $project_id = (int) $project_id;\n        $priority = empty($priority) ? self::PRIORITY_NORMAL : (int) $priority;\n\n        if ($status === '') {\n            $status = self::STATUS_NEW;\n            if ($other_area > 0) {\n                $status = self::STATUS_FORWARDED;\n            }\n        }\n\n        if (!empty($category_id)) {\n            if (empty($assignedUserId)) {\n                $usersInCategory = self::getUsersInCategory($category_id);\n                if (!empty($usersInCategory) && count($usersInCategory) > 0) {\n                    $userCategoryInfo = $usersInCategory[0];\n                    if (isset($userCategoryInfo['user_id'])) {\n                        $assignedUserId = $userCategoryInfo['user_id'];\n                    }\n                }\n            }\n        }\n\n        $assignedUserInfo = [];\n        if (!empty($assignedUserId)) {\n            $assignedUserInfo = api_get_user_info($assignedUserId);\n            if (empty($assignedUserInfo)) {\n                return false;\n            }\n        }\n\n        // insert_ticket\n        $params = [\n            'project_id' => $project_id,\n            'category_id' => $category_id,\n            'priority_id' => $priority,\n            'personal_email' => $personalEmail,\n            'status_id' => $status,\n            'start_date' => $now,\n            'sys_insert_user_id' => $currentUserId,\n            'sys_insert_datetime' => $now,\n            'sys_lastedit_user_id' => $currentUserId,\n            'sys_lastedit_datetime' => $now,\n            'source' => $source,\n            'assigned_last_user' => $assignedUserId,\n            'subject' => $subject,\n            'message' => $content,\n        ];\n\n        if (!empty($course_id)) {\n            $params['course_id'] = $course_id;\n        }\n\n        if (!empty($sessionId)) {\n            $params['session_id'] = $sessionId;\n        }\n        $ticketId = Database::insert($table_support_tickets, $params);\n\n        if ($ticketId) {\n            $ticket_code = \"A\".str_pad($ticketId, 11, '0', STR_PAD_LEFT);\n            $titleCreated = sprintf(\n                get_lang('TicketXCreated'),\n                $ticket_code\n            );\n\n            Display::addFlash(Display::return_message(\n                $titleCreated,\n                'normal',\n                false\n            ));\n\n            if ($assignedUserId != 0) {\n                self::assignTicketToUser(\n                    $ticketId,\n                    $assignedUserId\n                );\n\n                Display::addFlash(Display::return_message(\n                    sprintf(\n                        get_lang('TicketXAssignedToUserX'),\n                        $ticket_code,\n                        $assignedUserInfo['complete_name']\n                    ),\n                    'normal',\n                    false\n                ));\n            }\n\n            if (!empty($fileAttachments)) {\n                $attachmentCount = 0;\n                foreach ($fileAttachments as $attach) {\n                    if (!empty($attach['tmp_name'])) {\n                        $attachmentCount++;\n                    }\n                }\n                if ($attachmentCount > 0) {\n                    self::insertMessage(\n                        $ticketId,\n                        '',\n                        '',\n                        $fileAttachments,\n                        $currentUserId\n                    );\n                }\n            }\n\n            // Update code\n            $sql = \"UPDATE $table_support_tickets\n                    SET code = '$ticket_code'\n                    WHERE id = '$ticketId'\";\n            Database::query($sql);\n\n            // Update total\n            $sql = \"UPDATE $table_support_category\n                    SET total_tickets = total_tickets + 1\n                    WHERE id = $category_id\";\n            Database::query($sql);\n\n            $helpDeskMessage =\n                '<table>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('User').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['complete_name'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Username').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['username'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Email').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['email'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Phone').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['phone'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Date').'</b></td>\n                            <td width=\"400px\">'.api_convert_and_format_date($now, DATE_TIME_FORMAT_LONG).'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Title').'</b></td>\n                            <td width=\"400px\">'.Security::remove_XSS($subject).'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Description').'</b></td>\n                            <td width=\"400px\">'.Security::remove_XSS($content).'</td>\n                        </tr>\n                    </table>';\n\n            if ($assignedUserId != 0) {\n                $href = api_get_path(WEB_CODE_PATH).'/ticket/ticket_details.php?ticket_id='.$ticketId;\n                $helpDeskMessage .= sprintf(\n                    get_lang('TicketAssignedToXCheckZAtLinkY'),\n                    $assignedUserInfo['complete_name'],\n                    $href,\n                    $ticketId\n                );\n            }\n\n            if (empty($category_id)) {\n                if (api_get_setting('ticket_send_warning_to_all_admins') === 'true') {\n                    $warningSubject = sprintf(\n                        get_lang('TicketXCreatedWithNoCategory'),\n                        $ticket_code\n                    );\n                    Display::addFlash(Display::return_message($warningSubject));\n\n                    $admins = UserManager::get_all_administrators();\n                    foreach ($admins as $userId => $data) {\n                        if ($data['active']) {\n                            MessageManager::send_message_simple(\n                                $userId,\n                                $warningSubject,\n                                $helpDeskMessage\n                            );\n                        }\n                    }\n                }\n            } else {\n                $categoryInfo = self::getCategory($category_id);\n                $usersInCategory = self::getUsersInCategory($category_id);\n\n                $message = '<h2>'.get_lang('TicketInformation').'</h2><br />'.$helpDeskMessage;\n\n                if (api_get_setting('ticket_warn_admin_no_user_in_category') === 'true') {\n                    $usersInCategory = self::getUsersInCategory($category_id);\n                    if (empty($usersInCategory)) {\n                        $subject = sprintf(\n                            get_lang('WarningCategoryXDoesntHaveUsers'),\n                            $categoryInfo['name']\n                        );\n\n                        if (api_get_setting('ticket_send_warning_to_all_admins') === 'true') {\n                            Display::addFlash(Display::return_message(\n                                sprintf(\n                                    get_lang('CategoryWithNoUserNotificationSentToAdmins'),\n                                    $categoryInfo['name']\n                                ),\n                                null,\n                                false\n                            ));\n\n                            $admins = UserManager::get_all_administrators();\n                            foreach ($admins as $userId => $data) {\n                                if ($data['active']) {\n                                    self::sendNotification(\n                                        $ticketId,\n                                        $subject,\n                                        $message,\n                                        $userId\n                                    );\n                                }\n                            }\n                        } else {\n                            Display::addFlash(Display::return_message($subject));\n                        }\n                    }\n                }\n\n                // Send notification to all users\n                if (!empty($usersInCategory)) {\n                    foreach ($usersInCategory as $data) {\n                        if ($data['user_id']) {\n                            self::sendNotification(\n                                $ticketId,\n                                $subject,\n                                $message,\n                                $data['user_id']\n                            );\n                        }\n                    }\n                }\n            }\n\n            if (!empty($personalEmail)) {\n                api_mail_html(\n                    get_lang('VirtualSupport'),\n                    $personalEmail,\n                    get_lang('IncidentResentToVirtualSupport'),\n                    $helpDeskMessage\n                );\n            }\n\n            self::sendNotification(\n                $ticketId,\n                $titleCreated,\n                $helpDeskMessage\n            );\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Assign ticket to admin.\n     *\n     * @param int $ticketId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function assignTicketToUser(\n        $ticketId,\n        $userId\n    ) {\n        $ticketId = (int) $ticketId;\n        $userId = (int) $userId;\n\n        if (empty($ticketId)) {\n            return false;\n        }\n\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $ticket = self::get_ticket_detail_by_id($ticketId);\n\n        if ($ticket) {\n            $sql = \"UPDATE $table_support_tickets\n                    SET assigned_last_user = $userId\n                    WHERE id = $ticketId\";\n            Database::query($sql);\n\n            $table = Database::get_main_table(TABLE_TICKET_ASSIGNED_LOG);\n            $params = [\n                'ticket_id' => $ticketId,\n                'user_id' => $userId,\n                'sys_insert_user_id' => api_get_user_id(),\n                'assigned_date' => api_get_utc_datetime(),\n            ];\n            Database::insert($table, $params);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Insert message between Users and Admins.\n     *\n     * @param int    $ticketId\n     * @param string $subject\n     * @param string $content\n     * @param array  $fileAttachments\n     * @param int    $userId\n     * @param string $status\n     * @param bool   $sendConfirmation\n     *\n     * @return bool\n     */\n    public static function insertMessage(\n        $ticketId,\n        $subject,\n        $content,\n        $fileAttachments,\n        $userId,\n        $status = 'NOL',\n        $sendConfirmation = false\n    ) {\n        $ticketId = (int) $ticketId;\n        $userId = (int) $userId;\n        $table_support_messages = Database::get_main_table(TABLE_TICKET_MESSAGE);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        if ($sendConfirmation) {\n            $form = '<form action=\"ticket_details.php?ticket_id='.$ticketId.'\" id=\"confirmticket\" method=\"POST\" >\n                         <p>'.get_lang('TicketWasThisAnswerSatisfying').'</p>\n                         <button class=\"btn btn-primary responseyes\" name=\"response\" id=\"responseyes\" value=\"1\">'.get_lang('Yes').'</button>\n                         <button class=\"btn btn-danger responseno\" name=\"response\" id=\"responseno\" value=\"0\">'.get_lang('No').'</button>\n                     </form>';\n            $content .= $form;\n        }\n\n        $now = api_get_utc_datetime();\n\n        $params = [\n            'ticket_id' => $ticketId,\n            'subject' => $subject,\n            'message' => $content,\n            'ip_address' => api_get_real_ip(),\n            'sys_insert_user_id' => $userId,\n            'sys_insert_datetime' => $now,\n            'sys_lastedit_user_id' => $userId,\n            'sys_lastedit_datetime' => $now,\n            'status' => $status,\n        ];\n        $messageId = Database::insert($table_support_messages, $params);\n        if ($messageId) {\n            // update_total_message\n            $sql = \"UPDATE $table_support_tickets\n                    SET \n                        sys_lastedit_user_id = $userId,\n                        sys_lastedit_datetime = '$now',\n                        total_messages = (\n                            SELECT COUNT(*) as total_messages\n                            FROM $table_support_messages\n                            WHERE ticket_id = $ticketId\n                        )\n                    WHERE id = $ticketId \";\n            Database::query($sql);\n\n            if (is_array($fileAttachments)) {\n                foreach ($fileAttachments as $file_attach) {\n                    if ($file_attach['error'] == 0) {\n                        self::saveMessageAttachmentFile(\n                            $file_attach,\n                            $ticketId,\n                            $messageId\n                        );\n                    } else {\n                        if ($file_attach['error'] != UPLOAD_ERR_NO_FILE) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Attachment files when a message is sent.\n     *\n     * @param $file_attach\n     * @param $ticketId\n     * @param $message_id\n     *\n     * @return bool\n     */\n    public static function saveMessageAttachmentFile(\n        $file_attach,\n        $ticketId,\n        $message_id\n    ) {\n        $now = api_get_utc_datetime();\n        $userId = api_get_user_id();\n        $ticketId = intval($ticketId);\n        $new_file_name = add_ext_on_mime(\n            stripslashes($file_attach['name']),\n            $file_attach['type']\n        );\n        $table_support_message_attachments = Database::get_main_table(TABLE_TICKET_MESSAGE_ATTACHMENTS);\n        if (!filter_extension($new_file_name)) {\n            echo Display::return_message(\n                get_lang('UplUnableToSaveFileFilteredExtension'),\n                'error'\n            );\n        } else {\n            $result = api_upload_file('ticket_attachment', $file_attach, $ticketId);\n            if ($result) {\n                $safe_file_name = Database::escape_string($new_file_name);\n                $safe_new_file_name = Database::escape_string($result['path_to_save']);\n                $sql = \"INSERT INTO $table_support_message_attachments (\n                        filename,\n                        path,\n                        ticket_id,\n                        message_id,\n                        size,\n                        sys_insert_user_id,\n                        sys_insert_datetime,\n                        sys_lastedit_user_id,\n                        sys_lastedit_datetime\n                    ) VALUES (\n                        '$safe_file_name',\n                        '$safe_new_file_name',\n                        '$ticketId',\n                        '$message_id',\n                        '\".$file_attach['size'].\"',\n                        '$userId',\n                        '$now',\n                        '$userId',\n                        '$now'\n                    )\";\n                Database::query($sql);\n\n                return true;\n            }\n        }\n    }\n\n    /**\n     * Get tickets by userId.\n     *\n     * @param int $from\n     * @param int $number_of_items\n     * @param $column\n     * @param $direction\n     *\n     * @return array\n     */\n    public static function getTicketsByCurrentUser(\n        $from,\n        $number_of_items,\n        $column,\n        $direction\n    ) {\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(TABLE_TICKET_PRIORITY);\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n        $direction = !empty($direction) ? $direction : 'DESC';\n        $userId = api_get_user_id();\n        $userInfo = api_get_user_info($userId);\n\n        if (empty($userInfo)) {\n            return [];\n        }\n        $isAdmin = UserManager::is_admin($userId);\n\n        if (!isset($_GET['project_id'])) {\n            return [];\n        }\n\n        switch ($column) {\n            case 0:\n                $column = 'ticket_id';\n                break;\n            case 1:\n                $column = 'status_name';\n                break;\n            case 2:\n                $column = 'start_date';\n                break;\n            case 3:\n                $column = 'sys_lastedit_datetime';\n                break;\n            case 4:\n                $column = 'category_name';\n                break;\n            case 5:\n                $column = 'sys_insert_user_id';\n                break;\n            case 6:\n                $column = 'assigned_last_user';\n                break;\n            case 7:\n                $column = 'total_messages';\n                break;\n            case 8:\n                $column = 'subject';\n                break;\n            default:\n                $column = 'ticket_id';\n        }\n\n        $sql = \"SELECT DISTINCT \n                ticket.*,\n                ticket.id ticket_id,\n                status.name AS status_name,\n                ticket.start_date,\n                ticket.sys_lastedit_datetime,\n                cat.name AS category_name,\n                priority.name AS priority_name,                           \n                ticket.total_messages AS total_messages,\n                ticket.message AS message,\n                ticket.subject AS subject,\n                ticket.assigned_last_user\n            FROM $table_support_tickets ticket \n            INNER JOIN $table_support_category cat\n            ON (cat.id = ticket.category_id)\n            INNER JOIN $table_support_priority priority\n            ON (ticket.priority_id = priority.id)\n            INNER JOIN $table_support_status status\n            ON (ticket.status_id = status.id)\n            WHERE 1=1                                \n        \";\n\n        $projectId = (int) $_GET['project_id'];\n        $userIsAllowInProject = self::userIsAllowInProject($userInfo, $projectId);\n\n        // Check if a role was set to the project\n        if ($userIsAllowInProject == false) {\n            $sql .= \" AND (ticket.assigned_last_user = $userId OR ticket.sys_insert_user_id = $userId )\";\n        }\n\n        // Search simple\n        if (isset($_GET['submit_simple']) && $_GET['keyword'] != '') {\n            $keyword = Database::escape_string(trim($_GET['keyword']));\n            $sql .= \" AND (\n                      ticket.id LIKE '%$keyword%' OR\n                      ticket.code LIKE '%$keyword%' OR\n                      ticket.subject LIKE '%$keyword%' OR\n                      ticket.message LIKE '%$keyword%' OR\n                      ticket.keyword LIKE '%$keyword%' OR\n                      ticket.source LIKE '%$keyword%' OR\n                      cat.name LIKE '%$keyword%' OR\n                      status.name LIKE '%$keyword%' OR\n                      priority.name LIKE '%$keyword%' OR\n                      ticket.personal_email LIKE '%$keyword%'                          \n            )\";\n        }\n\n        $keywords = [\n            'project_id' => 'ticket.project_id',\n            'keyword_category' => 'ticket.category_id',\n            'keyword_assigned_to' => 'ticket.assigned_last_user',\n            'keyword_source' => 'ticket.source ',\n            'keyword_status' => 'ticket.status_id',\n            'keyword_priority' => 'ticket.priority_id',\n        ];\n\n        foreach ($keywords as $keyword => $label) {\n            if (isset($_GET[$keyword])) {\n                $data = Database::escape_string(trim($_GET[$keyword]));\n                if (!empty($data)) {\n                    $sql .= \" AND $label = '$data' \";\n                }\n            }\n        }\n\n        // Search advanced\n        $keyword_start_date_start = isset($_GET['keyword_start_date_start']) ? Database::escape_string(trim($_GET['keyword_start_date_start'])) : '';\n        $keyword_start_date_end = isset($_GET['keyword_start_date_end']) ? Database::escape_string(trim($_GET['keyword_start_date_end'])) : '';\n        $keyword_course = isset($_GET['keyword_course']) ? Database::escape_string(trim($_GET['keyword_course'])) : '';\n        $keyword_range = !empty($keyword_start_date_start) && !empty($keyword_start_date_end);\n\n        if ($keyword_range == false && $keyword_start_date_start != '') {\n            $sql .= \" AND DATE_FORMAT(ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start' \";\n        }\n        if ($keyword_range && $keyword_start_date_start != '' && $keyword_start_date_end != '') {\n            $sql .= \" AND DATE_FORMAT(ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start'\n                      AND DATE_FORMAT(ticket.start_date,'%d/%m/%Y') <= '$keyword_start_date_end'\";\n        }\n\n        if ($keyword_course != '') {\n            $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n            $sql .= \" AND ticket.course_id IN ( \n                     SELECT id FROM $course_table\n                     WHERE (\n                        title LIKE '%$keyword_course%' OR \n                        code LIKE '%$keyword_course%' OR \n                        visual_code LIKE '%$keyword_course%'\n                     )\n            )\";\n        }\n        $sql .= \" ORDER BY $column $direction\";\n        $sql .= \" LIMIT $from, $number_of_items\";\n\n        $result = Database::query($sql);\n        $tickets = [];\n        $webPath = api_get_path(WEB_PATH);\n        while ($row = Database::fetch_assoc($result)) {\n            $userInfo = api_get_user_info($row['sys_insert_user_id']);\n            $hrefUser = $webPath.'main/admin/user_information.php?user_id='.$userInfo['user_id'];\n            $name = \"<a href='$hrefUser'> {$userInfo['complete_name_with_username']} </a>\";\n            if ($row['assigned_last_user'] != 0) {\n                $assignedUserInfo = api_get_user_info($row['assigned_last_user']);\n                if (!empty($assignedUserInfo)) {\n                    $hrefResp = $webPath.'main/admin/user_information.php?user_id='.$assignedUserInfo['user_id'];\n                    $row['assigned_last_user'] = \"<a href='$hrefResp'> {$assignedUserInfo['complete_name_with_username']} </a>\";\n                } else {\n                    $row['assigned_last_user'] = get_lang('UnknownUser');\n                }\n            } else {\n                if ($row['status_id'] !== self::STATUS_FORWARDED) {\n                    $row['assigned_last_user'] = '<span style=\"color:#ff0000;\">'.get_lang('ToBeAssigned').'</span>';\n                } else {\n                    $row['assigned_last_user'] = '<span style=\"color:#00ff00;\">'.get_lang('MessageResent').'</span>';\n                }\n            }\n\n            switch ($row['source']) {\n                case self::SOURCE_PRESENTIAL:\n                    $img_source = 'icons/32/user.png';\n                    break;\n                case self::SOURCE_EMAIL:\n                    $img_source = 'icons/32/mail.png';\n                    break;\n                case self::SOURCE_PHONE:\n                    $img_source = 'icons/32/event.png';\n                    break;\n                default:\n                    $img_source = 'icons/32/ticket.png';\n                    break;\n            }\n\n            $row['start_date'] = Display::dateToStringAgoAndLongDate($row['start_date']);\n            $row['sys_lastedit_datetime'] = Display::dateToStringAgoAndLongDate($row['sys_lastedit_datetime']);\n\n            $icon = Display::return_icon(\n                $img_source,\n                get_lang('Info'),\n                ['style' => 'margin-right: 10px; float: left;']\n            );\n\n            $icon .= '<a href=\"ticket_details.php?ticket_id='.$row['id'].'\">'.$row['code'].'</a>';\n\n            if ($isAdmin) {\n                $ticket = [\n                    $icon.' '.$row['subject'],\n                    $row['status_name'],\n                    $row['start_date'],\n                    $row['sys_lastedit_datetime'],\n                    $row['category_name'],\n                    $name,\n                    $row['assigned_last_user'],\n                    $row['total_messages'],\n                ];\n            } else {\n                $ticket = [\n                    $icon.' '.$row['subject'],\n                    $row['status_name'],\n                    $row['start_date'],\n                    $row['sys_lastedit_datetime'],\n                    $row['category_name'],\n                ];\n            }\n            if ($isAdmin) {\n                $ticket['0'] .= '&nbsp;&nbsp;<a  href=\"javascript:void(0)\" onclick=\"load_history_ticket(\\'div_'.$row['ticket_id'].'\\','.$row['ticket_id'].')\">\n\t\t\t\t\t<img onclick=\"load_course_list(\\'div_'.$row['ticket_id'].'\\','.$row['ticket_id'].')\" onmouseover=\"clear_course_list (\\'div_'.$row['ticket_id'].'\\')\" src=\"'.Display::returnIconPath('history.gif').'\" title=\"'.get_lang('Historial').'\" alt=\"'.get_lang('Historial').'\"/>\n\t\t\t\t\t<div class=\"blackboard_hide\" id=\"div_'.$row['ticket_id'].'\">&nbsp;&nbsp;</div>\n\t\t\t\t\t</a>&nbsp;&nbsp;';\n            }\n            $tickets[] = $ticket;\n        }\n\n        return $tickets;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getTotalTicketsCurrentUser()\n    {\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(TABLE_TICKET_PRIORITY);\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n\n        $userInfo = api_get_user_info();\n        if (empty($userInfo)) {\n            return 0;\n        }\n        $userId = $userInfo['id'];\n\n        if (!isset($_GET['project_id'])) {\n            return 0;\n        }\n\n        $sql = \"SELECT COUNT(ticket.id) AS total\n                FROM $table_support_tickets ticket\n                INNER JOIN $table_support_category cat\n                ON (cat.id = ticket.category_id)\n                INNER JOIN $table_support_priority priority\n                ON (ticket.priority_id = priority.id)\n                INNER JOIN $table_support_status status\n                ON (ticket.status_id = status.id)\n\t            WHERE 1 = 1\";\n\n        $projectId = (int) $_GET['project_id'];\n        $allowRoleList = self::getAllowedRolesFromProject($projectId);\n\n        // Check if a role was set to the project\n        if (!empty($allowRoleList) && is_array($allowRoleList)) {\n            if (!in_array($userInfo['status'], $allowRoleList)) {\n                $sql .= \" AND (ticket.assigned_last_user = $userId OR ticket.sys_insert_user_id = $userId )\";\n            }\n        } else {\n            if (!api_is_platform_admin()) {\n                $sql .= \" AND (ticket.assigned_last_user = $userId OR ticket.sys_insert_user_id = $userId )\";\n            }\n        }\n\n        // Search simple\n        if (isset($_GET['submit_simple'])) {\n            if ($_GET['keyword'] != '') {\n                $keyword = Database::escape_string(trim($_GET['keyword']));\n                $sql .= \" AND (\n                          ticket.code LIKE '%$keyword%' OR\n                          ticket.subject LIKE '%$keyword%' OR\n                          ticket.message LIKE '%$keyword%' OR\n                          ticket.keyword LIKE '%$keyword%' OR\n                          ticket.personal_email LIKE '%$keyword%' OR\n                          ticket.source LIKE '%$keyword%'\n                )\";\n            }\n        }\n\n        $keywords = [\n            'project_id' => 'ticket.project_id',\n            'keyword_category' => 'ticket.category_id',\n            'keyword_assigned_to' => 'ticket.assigned_last_user',\n            'keyword_source' => 'ticket.source',\n            'keyword_status' => 'ticket.status_id',\n            'keyword_priority' => 'ticket.priority_id',\n        ];\n\n        foreach ($keywords as $keyword => $sqlLabel) {\n            if (isset($_GET[$keyword])) {\n                $data = Database::escape_string(trim($_GET[$keyword]));\n                $sql .= \" AND $sqlLabel = '$data' \";\n            }\n        }\n\n        // Search advanced\n        $keyword_start_date_start = isset($_GET['keyword_start_date_start']) ? Database::escape_string(trim($_GET['keyword_start_date_start'])) : '';\n        $keyword_start_date_end = isset($_GET['keyword_start_date_end']) ? Database::escape_string(trim($_GET['keyword_start_date_end'])) : '';\n        $keyword_range = isset($_GET['keyword_dates']) ? Database::escape_string(trim($_GET['keyword_dates'])) : '';\n        $keyword_course = isset($_GET['keyword_course']) ? Database::escape_string(trim($_GET['keyword_course'])) : '';\n\n        if ($keyword_range == false && $keyword_start_date_start != '') {\n            $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') = '$keyword_start_date_start' \";\n        }\n        if ($keyword_range && $keyword_start_date_start != '' && $keyword_start_date_end != '') {\n            $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start'\n                      AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') <= '$keyword_start_date_end'\";\n        }\n        if ($keyword_course != '') {\n            $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n            $sql .= \" AND ticket.course_id IN (  \n                        SELECT id\n                        FROM $course_table\n                        WHERE (\n                            title LIKE '%$keyword_course%' OR \n                            code LIKE '%$keyword_course%' OR \n                            visual_code LIKE '%$keyword_course%'\n                        )\n                   ) \";\n        }\n\n        $res = Database::query($sql);\n        $obj = Database::fetch_object($res);\n\n        return (int) $obj->total;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return false|MessageAttachment\n     */\n    public static function getTicketMessageAttachment($id)\n    {\n        $id = (int) $id;\n        $em = Database::getManager();\n        $item = $em->getRepository('ChamiloTicketBundle:MessageAttachment')->find($id);\n        if ($item) {\n            return $item;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array\n     */\n    public static function getTicketMessageAttachmentsByTicketId($id)\n    {\n        $id = (int) $id;\n        $em = Database::getManager();\n        $items = $em->getRepository('ChamiloTicketBundle:MessageAttachment')->findBy(['ticket' => $id]);\n        if ($items) {\n            return $items;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $ticketId\n     *\n     * @return array\n     */\n    public static function get_ticket_detail_by_id($ticketId)\n    {\n        $ticketId = intval($ticketId);\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(TABLE_TICKET_PRIORITY);\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n        $table_support_messages = Database::get_main_table(TABLE_TICKET_MESSAGE);\n        $table_support_message_attachments = Database::get_main_table(TABLE_TICKET_MESSAGE_ATTACHMENTS);\n        $table_main_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        $sql = \"SELECT\n                    ticket.*, \n                    cat.name,\n                    status.name as status, \n                    priority.name priority\n                FROM $table_support_tickets ticket\n                INNER JOIN $table_support_category cat\n                ON (cat.id = ticket.category_id)\n                INNER JOIN $table_support_priority priority\n                ON (priority.id = ticket.priority_id)\n                INNER JOIN $table_support_status status\n                ON (status.id = ticket.status_id)\n\t\t        WHERE\n                    ticket.id = $ticketId \";\n        $result = Database::query($sql);\n        $ticket = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_assoc($result)) {\n                $row['course'] = null;\n                $row['start_date_from_db'] = $row['start_date'];\n                $row['start_date'] = api_convert_and_format_date(\n                    api_get_local_time($row['start_date']),\n                    DATE_TIME_FORMAT_LONG,\n                    api_get_timezone()\n                );\n                $row['end_date_from_db'] = $row['end_date'];\n                $row['end_date'] = api_convert_and_format_date(\n                    api_get_local_time($row['end_date']),\n                    DATE_TIME_FORMAT_LONG,\n                    api_get_timezone()\n                );\n                $row['sys_lastedit_datetime_from_db'] = $row['sys_lastedit_datetime'];\n                $row['sys_lastedit_datetime'] = api_convert_and_format_date(\n                    api_get_local_time($row['sys_lastedit_datetime']),\n                    DATE_TIME_FORMAT_LONG,\n                    api_get_timezone()\n                );\n                $row['course_url'] = null;\n                if ($row['course_id'] != 0) {\n                    $course = api_get_course_info_by_id($row['course_id']);\n                    $sessionId = 0;\n                    if ($row['session_id']) {\n                        $sessionId = $row['session_id'];\n                    }\n                    if ($course) {\n                        $row['course_url'] = '<a href=\"'.$course['course_public_url'].'?id_session='.$sessionId.'\">'.$course['name'].'</a>';\n                    }\n                }\n\n                $userInfo = api_get_user_info($row['sys_insert_user_id']);\n                $row['user_url'] = '<a href=\"'.api_get_path(WEB_PATH).'main/admin/user_information.php?user_id='.$userInfo['user_id'].'\">\n                '.$userInfo['complete_name'].'</a>';\n                $ticket['usuario'] = $userInfo;\n                $ticket['ticket'] = $row;\n            }\n\n            $sql = \"SELECT *, message.id as message_id \n                    FROM $table_support_messages message \n                    INNER JOIN $table_main_user user\n                    ON (message.sys_insert_user_id = user.user_id)\n                    WHERE\n                        message.ticket_id = '$ticketId' \";\n            $result = Database::query($sql);\n            $ticket['messages'] = [];\n            $attach_icon = Display::return_icon('attachment.gif', '');\n            $webPath = api_get_path(WEB_CODE_PATH);\n            while ($row = Database::fetch_assoc($result)) {\n                $message = $row;\n                $message['admin'] = UserManager::is_admin($message['user_id']);\n                $message['user_info'] = api_get_user_info($message['user_id']);\n                $sql = \"SELECT *\n                        FROM $table_support_message_attachments\n                        WHERE\n                            message_id = \".$row['message_id'].\" AND\n                            ticket_id = $ticketId\";\n\n                $result_attach = Database::query($sql);\n                while ($row2 = Database::fetch_assoc($result_attach)) {\n                    $archiveURL = $webPath.'ticket/download.php?ticket_id='.$ticketId.'&id='.$row2['id'];\n                    $row2['attachment_link'] = $attach_icon.'&nbsp;<a href=\"'.$archiveURL.'\">'.$row2['filename'].'</a>&nbsp;('.$row2['size'].')';\n                    $message['attachments'][] = $row2;\n                }\n                $ticket['messages'][] = $message;\n            }\n        }\n\n        return $ticket;\n    }\n\n    /**\n     * @param int $ticketId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function update_message_status($ticketId, $userId)\n    {\n        $ticketId = intval($ticketId);\n        $userId = intval($userId);\n        $table_support_messages = Database::get_main_table(\n            TABLE_TICKET_MESSAGE\n        );\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n        $sql = \"UPDATE $table_support_messages\n                SET\n                    status = 'LEI',\n                    sys_lastedit_user_id ='\".api_get_user_id().\"',\n                    sys_lastedit_datetime ='\".$now.\"'\n                WHERE ticket_id ='$ticketId' \";\n\n        if (api_is_platform_admin()) {\n            $sql .= \" AND sys_insert_user_id = '$userId'\";\n        } else {\n            $sql .= \" AND sys_insert_user_id != '$userId'\";\n        }\n        $result = Database::query($sql);\n        if (Database::affected_rows($result) > 0) {\n            Database::query(\n                \"UPDATE $table_support_tickets SET\n                    status_id = '\".self::STATUS_PENDING.\"'\n                 WHERE id ='$ticketId' AND status_id = '\".self::STATUS_NEW.\"'\"\n            );\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Send notification to a user through the internal messaging system.\n     *\n     * @param int    $ticketId\n     * @param string $title\n     * @param string $message\n     * @param int    $onlyToUserId\n     *\n     * @return bool\n     */\n    public static function sendNotification($ticketId, $title, $message, $onlyToUserId = 0)\n    {\n        $ticketInfo = self::get_ticket_detail_by_id($ticketId);\n\n        if (empty($ticketInfo)) {\n            return false;\n        }\n\n        $assignedUserInfo = api_get_user_info($ticketInfo['ticket']['assigned_last_user']);\n        $requestUserInfo = $ticketInfo['usuario'];\n        $ticketCode = $ticketInfo['ticket']['code'];\n        $status = $ticketInfo['ticket']['status'];\n        $priority = $ticketInfo['ticket']['priority'];\n\n        // Subject\n        $titleEmail = \"[$ticketCode] $title\";\n\n        // Content\n        $href = api_get_path(WEB_CODE_PATH).'/ticket/ticket_details.php?ticket_id='.$ticketId;\n        $ticketUrl = Display::url($ticketCode, $href);\n        $messageEmail = get_lang('TicketNum').\": $ticketUrl <br />\";\n        $messageEmail .= get_lang('Status').\": $status <br />\";\n        $messageEmail .= get_lang('Priority').\": $priority <br />\";\n        $messageEmail .= '<hr /><br />';\n        $messageEmail .= $message;\n        $currentUserId = api_get_user_id();\n        $attachmentList = [];\n        $attachments = self::getTicketMessageAttachmentsByTicketId($ticketId);\n        if (!empty($attachments)) {\n            /** @var MessageAttachment $attachment */\n            foreach ($attachments as $attachment) {\n                $file = api_get_uploaded_file(\n                    'ticket_attachment',\n                    $ticketId,\n                    $attachment->getPath()\n                );\n                if (!empty($file)) {\n                    $attachmentList[] = [\n                        'tmp_name' => api_get_uploaded_file(\n                            'ticket_attachment',\n                            $ticketId,\n                            $attachment->getPath()\n                        ),\n                        'size' => $attachment->getSize(),\n                        'name' => $attachment->getFilename(),\n                        'error' => 0,\n                    ];\n                }\n            }\n        }\n\n        if (!empty($onlyToUserId)) {\n            // Send only to specific user\n            if ($currentUserId != $onlyToUserId) {\n                MessageManager::send_message_simple(\n                    $onlyToUserId,\n                    $titleEmail,\n                    $messageEmail,\n                    0,\n                    false,\n                    false,\n                    [],\n                    false,\n                    $attachmentList\n                );\n            }\n        } else {\n            // Send to assigned user and to author\n            if ($requestUserInfo && $currentUserId != $requestUserInfo['id']) {\n                MessageManager::send_message_simple(\n                    $requestUserInfo['id'],\n                    $titleEmail,\n                    $messageEmail,\n                    0,\n                    false,\n                    false,\n                    [],\n                    false,\n                    $attachmentList\n                );\n            }\n\n            if ($assignedUserInfo &&\n                $requestUserInfo['id'] != $assignedUserInfo['id'] &&\n                $currentUserId != $assignedUserInfo['id']\n            ) {\n                MessageManager::send_message_simple(\n                    $assignedUserInfo['id'],\n                    $titleEmail,\n                    $messageEmail,\n                    0,\n                    false,\n                    false,\n                    [],\n                    false,\n                    $attachmentList\n                );\n            }\n        }\n    }\n\n    /**\n     * @param array $params\n     * @param int   $ticketId\n     * @param int   $userId\n     *\n     * @return bool\n     */\n    public static function updateTicket(\n        $params,\n        $ticketId,\n        $userId\n    ) {\n        $now = api_get_utc_datetime();\n        $table = Database::get_main_table(TABLE_TICKET_TICKET);\n        $newParams = [\n            'priority_id' => isset($params['priority_id']) ? (int) $params['priority_id'] : '',\n            'status_id' => isset($params['status_id']) ? (int) $params['status_id'] : '',\n            'sys_lastedit_user_id' => (int) $userId,\n            'sys_lastedit_datetime' => $now,\n        ];\n        Database::update($table, $newParams, ['id = ? ' => $ticketId]);\n\n        return true;\n    }\n\n    /**\n     * @param int $status_id\n     * @param int $ticketId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function update_ticket_status(\n        $status_id,\n        $ticketId,\n        $userId\n    ) {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n\n        $ticketId = intval($ticketId);\n        $status_id = intval($status_id);\n        $userId = intval($userId);\n\n        $now = api_get_utc_datetime();\n        $sql = \"UPDATE $table_support_tickets\n                SET\n                    status_id = '$status_id',\n                    sys_lastedit_user_id ='$userId',\n                    sys_lastedit_datetime ='\".$now.\"'\n                WHERE id ='$ticketId'\";\n        $result = Database::query($sql);\n\n        if (Database::affected_rows($result) > 0) {\n            self::sendNotification(\n                $ticketId,\n                get_lang('TicketUpdated'),\n                get_lang('TicketUpdated')\n            );\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @return mixed\n     */\n    public static function getNumberOfMessages()\n    {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_messages = Database::get_main_table(\n            TABLE_TICKET_MESSAGE\n        );\n        $table_main_user = Database::get_main_table(TABLE_MAIN_USER);\n        $table_main_admin = Database::get_main_table(TABLE_MAIN_ADMIN);\n        $user_info = api_get_user_info();\n        $userId = $user_info['user_id'];\n        $sql = \"SELECT COUNT(DISTINCT ticket.id) AS unread\n                FROM $table_support_tickets ticket,\n                $table_support_messages message ,\n                $table_main_user user\n                WHERE\n                    ticket.id = message.ticket_id AND\n                    message.status = 'NOL' AND\n                    user.user_id = message.sys_insert_user_id \";\n        if (!api_is_platform_admin()) {\n            $sql .= \" AND ticket.request_user = '$userId'\n                      AND user_id IN (SELECT user_id FROM $table_main_admin)  \";\n        } else {\n            $sql .= \" AND user_id NOT IN (SELECT user_id FROM $table_main_admin)\n                      AND ticket.status_id != '\".self::STATUS_FORWARDED.\"'\";\n        }\n        $sql .= \"  AND ticket.project_id != '' \";\n        $res = Database::query($sql);\n        $obj = Database::fetch_object($res);\n\n        return $obj->unread;\n    }\n\n    /**\n     * @param int $ticketId\n     * @param int $userId\n     */\n    public static function send_alert($ticketId, $userId)\n    {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n\n        $ticketId = (int) $ticketId;\n        $userId = (int) $userId;\n\n        $sql = \"UPDATE $table_support_tickets SET\n                  priority_id = '\".self::PRIORITY_HIGH.\"',\n                  sys_lastedit_user_id = $userId,\n                  sys_lastedit_datetime = '$now'\n                WHERE id = $ticketId\";\n        Database::query($sql);\n    }\n\n    /**\n     * @param int $ticketId\n     * @param int $userId\n     */\n    public static function close_ticket($ticketId, $userId)\n    {\n        $ticketId = intval($ticketId);\n        $userId = intval($userId);\n\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n        $sql = \"UPDATE $table_support_tickets SET\n                    status_id = '\".self::STATUS_CLOSE.\"',\n                    sys_lastedit_user_id ='$userId',\n                    sys_lastedit_datetime ='\".$now.\"',\n                    end_date ='$now'\n                WHERE id ='$ticketId'\";\n        Database::query($sql);\n\n        self::sendNotification(\n            $ticketId,\n            get_lang('TicketClosed'),\n            get_lang('TicketClosed')\n        );\n    }\n\n    /**\n     * Close old tickets.\n     */\n    public static function close_old_tickets()\n    {\n        $table = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n        $userId = api_get_user_id();\n        $sql = \"UPDATE $table\n                SET\n                    status_id = '\".self::STATUS_CLOSE.\"',\n                    sys_lastedit_user_id ='$userId',\n                    sys_lastedit_datetime ='$now',\n                    end_date = '$now'\n                WHERE\n                    DATEDIFF('$now', sys_lastedit_datetime) > 7 AND\n                    status_id != '\".self::STATUS_CLOSE.\"' AND\n                    status_id != '\".self::STATUS_NEW.\"' AND\n                    status_id != '\".self::STATUS_FORWARDED.\"'\";\n        Database::query($sql);\n    }\n\n    /**\n     * @param int $ticketId\n     *\n     * @return array\n     */\n    public static function get_assign_log($ticketId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_ASSIGNED_LOG);\n        $ticketId = intval($ticketId);\n\n        $sql = \"SELECT * FROM $table\n                WHERE ticket_id = $ticketId\n                ORDER BY assigned_date DESC\";\n        $result = Database::query($sql);\n        $history = [];\n        $webpath = api_get_path(WEB_PATH);\n        while ($row = Database::fetch_assoc($result)) {\n            if ($row['user_id'] != 0) {\n                $assignuser = api_get_user_info($row['user_id']);\n                $row['assignuser'] = '<a href=\"'.$webpath.'main/admin/user_information.php?user_id='.$row['user_id'].'\"  target=\"_blank\">'.\n                $assignuser['username'].'</a>';\n            } else {\n                $row['assignuser'] = get_lang('Unassign');\n            }\n            $row['assigned_date'] = Display::dateToStringAgoAndLongDate($row['assigned_date']);\n            $insertuser = api_get_user_info($row['sys_insert_user_id']);\n            $row['insertuser'] = '<a href=\"'.$webpath.'main/admin/user_information.php?user_id='.$row['sys_insert_user_id'].'\"  target=\"_blank\">'.\n                $insertuser['username'].'</a>';\n            $history[] = $row;\n        }\n\n        return $history;\n    }\n\n    /**\n     * @param $from\n     * @param $number_of_items\n     * @param $column\n     * @param $direction\n     * @param null $userId\n     *\n     * @return array\n     */\n    public static function export_tickets_by_user_id(\n        $from,\n        $number_of_items,\n        $column,\n        $direction,\n        $userId = null\n    ) {\n        $from = intval($from);\n        $number_of_items = intval($number_of_items);\n        $table_support_category = Database::get_main_table(\n            TABLE_TICKET_CATEGORY\n        );\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(\n            TABLE_TICKET_PRIORITY\n        );\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n        $table_support_messages = Database::get_main_table(\n            TABLE_TICKET_MESSAGE\n        );\n        $table_main_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        if (is_null($direction)) {\n            $direction = \"DESC\";\n        }\n        if (is_null($userId) || $userId == 0) {\n            $userId = api_get_user_id();\n        }\n\n        $sql = \"SELECT\n                    ticket.code,\n                    ticket.sys_insert_datetime,\n                    ticket.sys_lastedit_datetime,\n                    cat.name as category,\n                    CONCAT(user.lastname,' ', user.firstname) AS fullname,\n                    status.name as status,\n                    ticket.total_messages as messages,\n                    ticket.assigned_last_user as responsable\n                FROM $table_support_tickets ticket,\n                $table_support_category cat ,\n                $table_support_priority priority,\n                $table_support_status status ,\n                $table_main_user user\n                WHERE\n                    cat.id = ticket.category_id\n                    AND ticket.priority_id = priority.id\n                    AND ticket.status_id = status.id\n                    AND user.user_id = ticket.request_user \";\n        // Search simple\n        if (isset($_GET['submit_simple'])) {\n            if ($_GET['keyword'] !== '') {\n                $keyword = Database::escape_string(trim($_GET['keyword']));\n                $sql .= \" AND (ticket.code = '$keyword'\n                          OR user.firstname LIKE '%$keyword%'\n                          OR user.lastname LIKE '%$keyword%'\n                          OR concat(user.firstname,' ',user.lastname) LIKE '%$keyword%'\n                          OR concat(user.lastname,' ',user.firstname) LIKE '%$keyword%'\n                          OR user.username LIKE '%$keyword%')  \";\n            }\n        }\n        // Search advanced\n        if (isset($_GET['submit_advanced'])) {\n            $keyword_category = Database::escape_string(\n                trim($_GET['keyword_category'])\n            );\n            $keyword_request_user = Database::escape_string(\n                trim($_GET['keyword_request_user'])\n            );\n            $keywordAssignedTo = (int) $_GET['keyword_assigned_to'];\n            $keyword_start_date_start = Database::escape_string(\n                trim($_GET['keyword_start_date_start'])\n            );\n            $keyword_start_date_end = Database::escape_string(\n                trim($_GET['keyword_start_date_end'])\n            );\n            $keyword_status = Database::escape_string(\n                trim($_GET['keyword_status'])\n            );\n            $keyword_source = Database::escape_string(\n                trim($_GET['keyword_source'])\n            );\n            $keyword_priority = Database::escape_string(\n                trim($_GET['keyword_priority'])\n            );\n            $keyword_range = Database::escape_string(\n                trim($_GET['keyword_dates'])\n            );\n            $keyword_unread = Database::escape_string(\n                trim($_GET['keyword_unread'])\n            );\n            $keyword_course = Database::escape_string(\n                trim($_GET['keyword_course'])\n            );\n\n            if ($keyword_category != '') {\n                $sql .= \" AND ticket.category_id = '$keyword_category'  \";\n            }\n            if ($keyword_request_user != '') {\n                $sql .= \" AND (ticket.request_user = '$keyword_request_user'\n                          OR user.firstname LIKE '%$keyword_request_user%'\n                          OR user.official_code LIKE '%$keyword_request_user%'\n                          OR user.lastname LIKE '%$keyword_request_user%'\n                          OR concat(user.firstname,' ',user.lastname) LIKE '%$keyword_request_user%'\n                          OR concat(user.lastname,' ',user.firstname) LIKE '%$keyword_request_user%'\n                          OR user.username LIKE '%$keyword_request_user%') \";\n            }\n            if (!empty($keywordAssignedTo)) {\n                $sql .= \" AND ticket.assigned_last_user = $keywordAssignedTo \";\n            }\n            if ($keyword_status != '') {\n                $sql .= \" AND ticket.status_id = '$keyword_status'  \";\n            }\n            if ($keyword_range == '' && $keyword_start_date_start != '') {\n                $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') = '$keyword_start_date_start' \";\n            }\n            if ($keyword_range == '1' && $keyword_start_date_start != '' && $keyword_start_date_end != '') {\n                $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start'\n                          AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') <= '$keyword_start_date_end'\";\n            }\n            if ($keyword_priority != '') {\n                $sql .= \" AND ticket.priority_id = '$keyword_priority'  \";\n            }\n            if ($keyword_source != '') {\n                $sql .= \" AND ticket.source = '$keyword_source' \";\n            }\n            if ($keyword_priority != '') {\n                $sql .= \" AND ticket.priority_id = '$keyword_priority' \";\n            }\n            if ($keyword_course != '') {\n                $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n                $sql .= \" AND ticket.course_id IN ( \";\n                $sql .= \"SELECT id\n                         FROM $course_table\n                         WHERE (title LIKE '%$keyword_course%'\n                         OR code LIKE '%$keyword_course%'\n                         OR visual_code LIKE '%$keyword_course%' )) \";\n            }\n            if ($keyword_unread == 'yes') {\n                $sql .= \" AND ticket.id IN (\n                          SELECT ticket.id\n                          FROM $table_support_tickets ticket,\n                          $table_support_messages message,\n                          $table_main_user user\n                          WHERE ticket.id = message.ticket_id\n                          AND message.status = 'NOL'\n                          AND message.sys_insert_user_id = user.user_id\n                          AND user.status != 1   AND ticket.status_id != '\".self::STATUS_FORWARDED.\"'\n                          GROUP BY ticket.id)\";\n            } else {\n                if ($keyword_unread == 'no') {\n                    $sql .= \" AND ticket.id NOT IN (\n                              SELECT ticket.id\n                              FROM  $table_support_tickets ticket,\n                              $table_support_messages message,\n                              $table_main_user user\n                              WHERE ticket.id = message.ticket_id\n                              AND message.status = 'NOL'\n                              AND message.sys_insert_user_id = user.user_id\n                              AND user.status != 1\n                              AND ticket.status_id != '\".self::STATUS_FORWARDED.\"'\n                             GROUP BY ticket.id)\";\n                }\n            }\n        }\n\n        $sql .= \" LIMIT $from,$number_of_items\";\n\n        $result = Database::query($sql);\n        $tickets[0] = [\n            utf8_decode('Ticket#'),\n            utf8_decode('Fecha'),\n            utf8_decode('Fecha Edicion'),\n            utf8_decode('Categoria'),\n            utf8_decode('Usuario'),\n            utf8_decode('Estado'),\n            utf8_decode('Mensajes'),\n            utf8_decode('Responsable'),\n            utf8_decode('Programa'),\n        ];\n\n        while ($row = Database::fetch_assoc($result)) {\n            if ($row['responsable'] != 0) {\n                $row['responsable'] = api_get_user_info($row['responsable']);\n                $row['responsable'] = $row['responsable']['firstname'].' '.$row['responsable']['lastname'];\n            }\n            $row['sys_insert_datetime'] = api_format_date(\n                $row['sys_insert_datetime'],\n                '%d/%m/%y - %I:%M:%S %p'\n            );\n            $row['sys_lastedit_datetime'] = api_format_date(\n                $row['sys_lastedit_datetime'],\n                '%d/%m/%y - %I:%M:%S %p'\n            );\n            $row['category'] = utf8_decode($row['category']);\n            $row['programa'] = utf8_decode($row['fullname']);\n            $row['fullname'] = utf8_decode($row['fullname']);\n            $row['responsable'] = utf8_decode($row['responsable']);\n            $tickets[] = $row;\n        }\n\n        return $tickets;\n    }\n\n    /**\n     * @param string $url\n     * @param int    $projectId\n     *\n     * @return FormValidator\n     */\n    public static function getCategoryForm($url, $projectId)\n    {\n        $form = new FormValidator('category', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addHidden('project_id', $projectId);\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getStatusList()\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->findAll();\n\n        $list = [];\n        /** @var Status $row */\n        foreach ($items as $row) {\n            $list[$row->getId()] = $row->getName();\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getTicketsFromCriteria($criteria)\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Ticket')->findBy($criteria);\n\n        $list = [];\n        /** @var Ticket $row */\n        foreach ($items as $row) {\n            $list[$row->getId()] = $row->getCode();\n        }\n\n        return $list;\n    }\n\n    /**\n     * @param string $code\n     *\n     * @return int\n     */\n    public static function getStatusIdFromCode($code)\n    {\n        $item = Database::getManager()\n            ->getRepository('ChamiloTicketBundle:Status')\n            ->findOneBy(['code' => $code])\n        ;\n        if ($item) {\n            return $item->getId();\n        }\n\n        return 0;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getPriorityList()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->findAll();\n\n        $list = [];\n        /** @var Priority $row */\n        foreach ($projects as $row) {\n            $list[$row->getId()] = $row->getName();\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getProjects()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Project')->findAll();\n\n        $list = [];\n        /** @var Project $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => $row->getName(),\n                '2' => $row->getDescription(),\n                '3' => $row->getId(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getProjectsSimple()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Project')->findAll();\n\n        $list = [];\n        /** @var Project $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => Display::url(\n                    $row->getName(),\n                    api_get_path(WEB_CODE_PATH).'ticket/tickets.php?project_id='.$row->getId()\n                ),\n                '2' => $row->getDescription(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getProjectsCount()\n    {\n        $count = Database::getManager()->getRepository('ChamiloTicketBundle:Project')->createQueryBuilder('p')\n            ->select('COUNT(p.id)')\n            ->getQuery()\n            ->getSingleScalarResult();\n\n        return $count;\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addProject($params)\n    {\n        $project = new Project();\n        $project->setName($params['name']);\n        $project->setDescription($params['description']);\n        $project->setInsertUserId(api_get_user_id());\n        Database::getManager()->persist($project);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param $id\n     *\n     * @return Project\n     */\n    public static function getProject($id)\n    {\n        return Database::getManager()->getRepository('ChamiloTicketBundle:Project')->find($id);\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updateProject($id, $params)\n    {\n        $project = self::getProject($id);\n        $project->setName($params['name']);\n        $project->setDescription($params['description']);\n        $project->setLastEditDateTime(new DateTime($params['sys_lastedit_datetime']));\n        $project->setLastEditUserId($params['sys_lastedit_user_id']);\n\n        Database::getManager()->merge($project);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param int $id\n     */\n    public static function deleteProject($id)\n    {\n        $project = self::getProject($id);\n        if ($project) {\n            Database::getManager()->remove($project);\n            Database::getManager()->flush();\n        }\n    }\n\n    /**\n     * @param string $url\n     *\n     * @return FormValidator\n     */\n    public static function getProjectForm($url)\n    {\n        $form = new FormValidator('project', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getStatusAdminList()\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->findAll();\n\n        $list = [];\n        /** @var Status $row */\n        foreach ($items as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                'code' => $row->getCode(),\n                '0' => $row->getId(),\n                '1' => $row->getName(),\n                '2' => $row->getDescription(),\n                '3' => $row->getId(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getStatusSimple()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->findAll();\n\n        $list = [];\n        /** @var Project $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => Display::url($row->getName()),\n                '2' => $row->getDescription(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getStatusCount()\n    {\n        $count = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->createQueryBuilder('p')\n            ->select('COUNT(p.id)')\n            ->getQuery()\n            ->getSingleScalarResult();\n\n        return $count;\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addStatus($params)\n    {\n        $item = new Status();\n        $item->setCode(URLify::filter($params['name']));\n        $item->setName($params['name']);\n        $item->setDescription($params['description']);\n\n        Database::getManager()->persist($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param $id\n     *\n     * @return Project\n     */\n    public static function getStatus($id)\n    {\n        return Database::getManager()->getRepository('ChamiloTicketBundle:Status')->find($id);\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updateStatus($id, $params)\n    {\n        $item = self::getStatus($id);\n        $item->setName($params['name']);\n        $item->setDescription($params['description']);\n\n        Database::getManager()->merge($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param int $id\n     */\n    public static function deleteStatus($id)\n    {\n        $item = self::getStatus($id);\n        if ($item) {\n            Database::getManager()->remove($item);\n            Database::getManager()->flush();\n        }\n    }\n\n    /**\n     * @param string $url\n     *\n     * @return FormValidator\n     */\n    public static function getStatusForm($url)\n    {\n        $form = new FormValidator('status', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getPriorityAdminList()\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->findAll();\n\n        $list = [];\n        /** @var Status $row */\n        foreach ($items as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                'code' => $row->getCode(),\n                '0' => $row->getId(),\n                '1' => $row->getName(),\n                '2' => $row->getDescription(),\n                '3' => $row->getId(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getPrioritySimple()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->findAll();\n\n        $list = [];\n        /** @var Priority $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => Display::url($row->getName()),\n                '2' => $row->getDescription(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getPriorityCount()\n    {\n        $count = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->createQueryBuilder('p')\n            ->select('COUNT(p.id)')\n            ->getQuery()\n            ->getSingleScalarResult();\n\n        return $count;\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addPriority($params)\n    {\n        $item = new Priority();\n        $item\n            ->setCode(URLify::filter($params['name']))\n            ->setName($params['name'])\n            ->setDescription($params['description'])\n            ->setColor('')\n            ->setInsertUserId(api_get_user_id())\n            ->setUrgency('')\n        ;\n\n        Database::getManager()->persist($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param $id\n     *\n     * @return Priority\n     */\n    public static function getPriority($id)\n    {\n        return Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->find($id);\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updatePriority($id, $params)\n    {\n        $item = self::getPriority($id);\n        $item->setName($params['name']);\n        $item->setDescription($params['description']);\n\n        Database::getManager()->merge($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param int $id\n     */\n    public static function deletePriority($id)\n    {\n        $item = self::getPriority($id);\n        if ($item) {\n            Database::getManager()->remove($item);\n            Database::getManager()->flush();\n        }\n    }\n\n    /**\n     * @param string $url\n     *\n     * @return FormValidator\n     */\n    public static function getPriorityForm($url)\n    {\n        $form = new FormValidator('priority', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * Returns a list of menu elements for the tickets system's configuration.\n     *\n     * @param string $exclude The element to exclude from the list\n     *\n     * @return array\n     */\n    public static function getSettingsMenuItems($exclude = null)\n    {\n        $items = [];\n        $project = [\n            'icon' => 'project.png',\n            'url' => 'projects.php',\n            'content' => get_lang('Projects'),\n        ];\n        $status = [\n            'icon' => 'check-circle.png',\n            'url' => 'status.php',\n            'content' => get_lang('Status'),\n        ];\n        $priority = [\n            'icon' => 'tickets_urgent.png',\n            'url' => 'priorities.php',\n            'content' => get_lang('Priority'),\n        ];\n        switch ($exclude) {\n            case 'project':\n                $items = [$status, $priority];\n                break;\n            case 'status':\n                $items = [$project, $priority];\n                break;\n            case 'priority':\n                $items = [$project, $status];\n                break;\n            default:\n                $items = [$project, $status, $priority];\n                break;\n        }\n\n        return $items;\n    }\n\n    /**\n     * Returns a list of strings representing the default statuses.\n     *\n     * @return array\n     */\n    public static function getDefaultStatusList()\n    {\n        return [\n            self::STATUS_NEW,\n            self::STATUS_PENDING,\n            self::STATUS_UNCONFIRMED,\n            self::STATUS_CLOSE,\n            self::STATUS_FORWARDED,\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public static function getDefaultPriorityList()\n    {\n        return [\n            self::PRIORITY_NORMAL,\n            self::PRIORITY_HIGH,\n            self::PRIORITY_LOW,\n            self::STATUS_CLOSE,\n            self::STATUS_FORWARDED,\n        ];\n    }\n\n    /**\n     * Deletes the user from all the ticket system.\n     *\n     * @param int $userId\n     */\n    public static function deleteUserFromTicketSystem($userId)\n    {\n        $userId = (int) $userId;\n        $schema = Database::getManager()->getConnection()->getSchemaManager();\n\n        if ($schema->tablesExist('ticket_assigned_log')) {\n            $sql = \"UPDATE ticket_assigned_log SET user_id = NULL WHERE user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_assigned_log SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_ticket')) {\n            $sql = \"UPDATE ticket_ticket SET assigned_last_user = NULL WHERE assigned_last_user = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_ticket SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_ticket SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_category')) {\n            $sql = \"UPDATE ticket_category SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_category SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_category_rel_user')) {\n            $sql = \"DELETE FROM ticket_category_rel_user WHERE user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_message')) {\n            $sql = \"UPDATE ticket_message SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_message SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_message_attachments')) {\n            $sql = \"UPDATE ticket_message_attachments SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_message_attachments SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_priority')) {\n            $sql = \"UPDATE ticket_priority SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_priority SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_project')) {\n            $sql = \"UPDATE ticket_project SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_project SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n    }\n\n    /**\n     * @param array $userInfo\n     * @param int   $projectId\n     *\n     * @return bool\n     */\n    public static function userIsAllowInProject($userInfo, $projectId)\n    {\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        $allowRoleList = self::getAllowedRolesFromProject($projectId);\n\n        // Check if a role was set to the project\n        // Project 1 is considered the default and is accessible to all users\n        if (!empty($allowRoleList) && is_array($allowRoleList)) {\n            if (in_array($userInfo['status'], $allowRoleList)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $projectId\n     *\n     * @todo load from database instead of configuration.php setting\n     *\n     * @return array\n     */\n    public static function getAllowedRolesFromProject($projectId)\n    {\n        $options = api_get_configuration_value('ticket_project_user_roles');\n        if ($options) {\n            if (isset($options['permissions'][$projectId])) {\n                return $options['permissions'][$projectId];\n            }\n        }\n\n        return [];\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * @package chamilo.messages\n */\n\n/**\n * This script shows a compose area (wysiwyg editor if supported, otherwise\n * a simple textarea) where the user can type a message.\n * There are three modes\n * - standard: type a message, select a user to send it to, press send\n * - reply on message (when pressing reply when viewing a message)\n * - send to specific user (when pressing send message in the who is online list).\n */\n$cidReset = true;\nrequire_once __DIR__.'/../inc/global.inc.php';\n\napi_block_anonymous_users();\n\nif (api_get_setting('allow_message_tool') !== 'true') {\n    api_not_allowed(true);\n}\n\n$logInfo = [\n    'tool' => 'Messages',\n    'tool_id' => 0,\n    'tool_id_detail' => 0,\n    'action' => 'new_message',\n    'action_details' => isset($_GET['re_id']) ? 're_id' : '',\n    'current_id' => isset($_GET['re_id']) ? (int) $_GET['re_id'] : 0,\n    'info' => '',\n];\nEvent::registerLog($logInfo);\n\n$allowSocial = api_get_setting('allow_social_tool') == 'true';\n$nameTools = api_xml_http_response_encode(get_lang('Messages'));\n\n$htmlHeadXtra[] = '<script>\nvar counter_image = 1;\nfunction add_image_form() {\n    // Multiple filepaths for image form\n    var filepaths = document.getElementById(\"file_uploads\");\n    if (document.getElementById(\"filepath_\"+counter_image)) {\n        counter_image = counter_image + 1;\n    }  else {\n        counter_image = counter_image;\n    }\n    var elem1 = document.createElement(\"div\");\n    elem1.setAttribute(\"id\",\"filepath_\"+counter_image);\n    filepaths.appendChild(elem1);\n    id_elem1 = \"filepath_\"+counter_image;\n    id_elem1 = \"\\'\"+id_elem1+\"\\'\";\n    document.getElementById(\"filepath_\"+counter_image).innerHTML = \"<div class=\\\"form-group\\\" ><label class=\\\"col-sm-4\\\">'.get_lang('FilesAttachment').'</label><input class=\\\"col-sm-8\\\" type=\\\"file\\\" name=\\\"attach_\"+counter_image+\"\\\" /></div><div class=\\\"form-group\\\" ><label class=\\\"col-sm-4\\\">'.get_lang('Description').'</label><div class=\\\"col-sm-8\\\"><input style=\\\"width:100%\\\" type=\\\"text\\\" name=\\\"legend[]\\\" /></div></div>\";\n    if (filepaths.childNodes.length == 6) {\n        var link_attach = document.getElementById(\"link-more-attach\");\n        if (link_attach) {\n            link_attach.innerHTML=\"\";\n        }\n    }\n}\n</script>';\n$nameTools = get_lang('ComposeMessage');\n\n$tpl = new Template(get_lang('ComposeMessage'));\n\n/**\n * Shows the compose area + a list of users to select from.\n */\nfunction show_compose_to_any($tpl)\n{\n    $default['user_list'] = 0;\n    $html = manageForm($default, null, null, $tpl);\n\n    return $html;\n}\n\nfunction show_compose_reply_to_message($message_id, $receiver_id, $tpl)\n{\n    $table = Database::get_main_table(TABLE_MESSAGE);\n    $receiver_id = (int) $receiver_id;\n    $message_id = (int) $message_id;\n\n    $query = \"SELECT user_sender_id\n              FROM $table\n              WHERE user_receiver_id = \".$receiver_id.\" AND id = \".$message_id;\n    $result = Database::query($query);\n    $row = Database::fetch_array($result, 'ASSOC');\n    $userInfo = api_get_user_info($row['user_sender_id']);\n    if (empty($row['user_sender_id']) || empty($userInfo)) {\n        $html = get_lang('InvalidMessageId');\n\n        return $html;\n    }\n\n    $default['users'] = [$row['user_sender_id']];\n    $html = manageForm($default, null, $userInfo['complete_name_with_username'], $tpl);\n\n    return $html;\n}\n\nfunction show_compose_to_user($receiver_id, $tpl)\n{\n    $userInfo = api_get_user_info($receiver_id);\n    $html = get_lang('To').':&nbsp;<strong>'.$userInfo['complete_name'].'</strong>';\n    $default['title'] = api_xml_http_response_encode(get_lang('EnterTitle'));\n    $default['users'] = [$receiver_id];\n    $html .= manageForm($default, null, '', $tpl);\n\n    return $html;\n}\n\n/**\n * @param          $default\n * @param null     $select_from_user_list\n * @param string   $sent_to\n * @param Template $tpl\n *\n * @return string\n */\nfunction manageForm($default, $select_from_user_list = null, $sent_to = '', $tpl = null)\n{\n    $group_id = isset($_REQUEST['group_id']) ? (int) $_REQUEST['group_id'] : null;\n    $message_id = isset($_GET['message_id']) ? (int) $_GET['message_id'] : null;\n\n    $form = new FormValidator(\n        'compose_message',\n        null,\n        api_get_self(),\n        null,\n        ['enctype' => 'multipart/form-data']\n    );\n\n    if (empty($group_id)) {\n        if (isset($select_from_user_list)) {\n            $form->addText(\n                'id_text_name',\n                get_lang('SendMessageTo'),\n                true,\n                [\n                    'id' => 'id_text_name',\n                    'onkeyup' => 'send_request_and_search()',\n                    'autocomplete' => 'off',\n                ]\n            );\n            $form->addRule('id_text_name', get_lang('ThisFieldIsRequired'), 'required');\n            $form->addElement('html', '<div id=\"id_div_search\" style=\"padding:0px\" class=\"message-select-box\" >&nbsp;</div>');\n            $form->addElement('hidden', 'user_list', 0, ['id' => 'user_list']);\n        } else {\n            if (!empty($sent_to)) {\n                $form->addLabel(get_lang('SendMessageTo'), $sent_to);\n            }\n            if (empty($default['users'])) {\n                //fb select\n                $form->addElement(\n                    'select_ajax',\n                    'users',\n                    get_lang('SendMessageTo'),\n                    [],\n                    [\n                        'multiple' => 'multiple',\n                        'url' => api_get_path(WEB_AJAX_PATH).'message.ajax.php?a=find_users',\n                    ]\n                );\n            } else {\n                $form->addElement('hidden', 'hidden_user', $default['users'][0], ['id' => 'hidden_user']);\n            }\n        }\n    } else {\n        $userGroup = new UserGroup();\n        $group_info = $userGroup->get($group_id);\n\n        $form->addElement('label', get_lang('ToGroup'), api_xml_http_response_encode($group_info['name']));\n        $form->addElement('hidden', 'group_id', $group_id);\n        $form->addElement('hidden', 'parent_id', $message_id);\n    }\n\n    $form->addText('title', get_lang('Subject'), true);\n    $form->addHtmlEditor(\n        'content',\n        get_lang('Message'),\n        false,\n        false,\n        ['ToolbarSet' => 'Messages', 'Width' => '100%', 'Height' => '250']\n    );\n\n    if (isset($_GET['re_id'])) {\n        $message_reply_info = MessageManager::get_message_by_id($_GET['re_id']);\n        $default['title'] = get_lang('MailSubjectReplyShort').' '.$message_reply_info['title'];\n        $form->addHidden('re_id', (int) $_GET['re_id']);\n        $form->addHidden('save_form', 'save_form');\n\n        // Adding reply mail\n        $user_reply_info = api_get_user_info($message_reply_info['user_sender_id']);\n        $default['content'] = '<p><br/></p>'.sprintf(\n            get_lang('XWroteY'),\n            $user_reply_info['complete_name'],\n            Security::filter_terms($message_reply_info['content'])\n        );\n    }\n\n    if (isset($_GET['forward_id'])) {\n        $forwardId = (int) $_GET['forward_id'];\n        $message_reply_info = MessageManager::get_message_by_id($forwardId);\n        $attachments = MessageManager::getAttachmentLinkList($forwardId);\n        if (!empty($attachments)) {\n            $fileListToString = !empty($attachments) ? implode('<br />', $attachments) : '';\n            $form->addLabel('', $fileListToString);\n        }\n        $default['title'] = '['.get_lang('MailSubjectForwardShort').\": \".$message_reply_info['title'].']';\n        $form->addHidden('forward_id', $forwardId);\n        $form->addHidden('save_form', 'save_form');\n        $receiverInfo = api_get_user_info($message_reply_info['user_receiver_id']);\n\n        $forwardMessage = '---------- '.get_lang('ForwardedMessage').' ---------'.'<br />';\n        $forwardMessage .= get_lang('Date').': '.api_get_local_time($message_reply_info['send_date']).'<br />';\n        $forwardMessage .= get_lang('Subject').': '.$message_reply_info['title'].'<br />';\n        $forwardMessage .= get_lang('To').': '.$receiverInfo['complete_name'].' - '.$receiverInfo['email'].' <br />';\n        $default['content'] = '<p><br/></p>'.$forwardMessage.'<br />'.Security::filter_terms($message_reply_info['content']);\n    }\n\n    if (empty($group_id)) {\n        $form->addLabel(\n            '',\n            '<div id=\"file_uploads\"><div id=\"filepath_1\">\n                <div id=\"filepaths\" class=\"form-horizontal\">\n                    <div id=\"paths-file\" class=\"form-group\">\n                    <label class=\"col-sm-4\">'.get_lang('FilesAttachment').'</label>\n                    <input class=\"col-sm-8\" type=\"file\" name=\"attach_1\"/>\n                    </div>\n                </div>\n                <div id=\"paths-description\" class=\"form-group\">\n                    <label class=\"col-sm-4\">'.get_lang('Description').'</label>\n                    <div class=\"col-sm-8\">\n                    <input id=\"file-descrtiption\" class=\"form-control\" type=\"text\" name=\"legend[]\" />\n                    </div>\n                </div>\n            </div>\n            </div>'\n        );\n\n        $form->addLabel(\n            '',\n            '<span id=\"link-more-attach\"><a class=\"btn btn-default\" href=\"javascript://\" onclick=\"return add_image_form()\">'.\n            get_lang('AddOneMoreFile').'</a></span>&nbsp;('.\n            sprintf(\n                get_lang('MaximunFileSizeX'),\n                format_file_size(api_get_setting('message_max_upload_filesize'))\n            ).')'\n        );\n    }\n\n    $form->addLabel(\n        '',\n        '<iframe \n            frameborder=\"0\" height=\"200\" width=\"100%\" scrolling=\"no\" \n            src=\"'.api_get_path(WEB_CODE_PATH).'messages/record_audio.php\"></iframe>'\n    );\n\n    $form->addButtonSend(get_lang('SendMessage'), 'compose');\n    $form->setRequiredNote('<span class=\"form_required\">*</span> <small>'.get_lang('ThisFieldIsRequired').'</small>');\n\n    if (!empty($group_id) && !empty($message_id)) {\n        $message_info = MessageManager::get_message_by_id($message_id);\n        $default['title'] = get_lang('MailSubjectReplyShort').\" \".$message_info['title'];\n    }\n    $form->setDefaults($default);\n    $html = '';\n    if ($form->validate()) {\n        $check = Security::check_token('post');\n        $disabled = api_get_configuration_value('disable_token_in_new_message');\n        if ($disabled) {\n            $check = true;\n        }\n\n        if ($check) {\n            $user_list = $default['users'];\n            $file_comments = $_POST['legend'];\n            $title = $default['title'];\n            $content = $default['content'];\n            $group_id = isset($default['group_id']) ? $default['group_id'] : null;\n            $parent_id = isset($default['parent_id']) ? $default['parent_id'] : null;\n            $forwardId = isset($_POST['forward_id']) ? $_POST['forward_id'] : false;\n\n            if (is_array($user_list) && count($user_list) > 0) {\n                // All is well, send the message\n                foreach ($user_list as $userId) {\n                    $res = MessageManager::send_message(\n                        $userId,\n                        $title,\n                        $content,\n                        $_FILES,\n                        $file_comments,\n                        $group_id,\n                        $parent_id,\n                        0,\n                        0,\n                        null,\n                        false,\n                        $forwardId,\n                        [],\n                        true\n                    );\n\n                    if ($res) {\n                        $userInfo = api_get_user_info($userId);\n                        Display::addFlash(Display::return_message(\n                            get_lang('MessageSentTo').\"&nbsp;<b>\".$userInfo['complete_name_with_username'].\"</b>\",\n                            'confirmation',\n                            false\n                        ));\n                    }\n                }\n                MessageManager::cleanAudioMessage();\n            } else {\n                Display::addFlash(Display::return_message('ErrorSendingMessage', 'error'));\n            }\n        }\n        Security::clear_token();\n        header('Location: '.api_get_path(WEB_PATH).'main/messages/inbox.php');\n        exit;\n    } else {\n        $token = Security::get_token();\n        $form->addElement('hidden', 'sec_token');\n        $form->setConstants(['sec_token' => $token]);\n        $html .= $form->returnForm();\n    }\n\n    return $html;\n}\n\nif ($allowSocial) {\n    $this_section = SECTION_SOCIAL;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/social/home.php',\n        'name' => get_lang('SocialNetwork'),\n    ];\n} else {\n    $this_section = SECTION_MYPROFILE;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/auth/profile.php',\n        'name' => get_lang('Profile'),\n    ];\n}\n\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_PATH).'main/messages/inbox.php',\n    'name' => get_lang('Messages'),\n];\n\n$group_id = isset($_REQUEST['group_id']) ? (int) $_REQUEST['group_id'] : 0;\n$social_right_content = null;\nif ($group_id != 0) {\n    $social_right_content .= '<div class=actions>';\n    $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/social/group_view.php?id='.$group_id.'\">'.\n        Display::return_icon('back.png', api_xml_http_response_encode(get_lang('ComposeMessage'))).'</a>';\n    $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/new_message.php?group_id='.$group_id.'\">'.\n        Display::return_icon('message_new.png', api_xml_http_response_encode(get_lang('ComposeMessage'))).'</a>';\n    $social_right_content .= '</div>';\n} else {\n    if ($allowSocial) {\n    } else {\n        $social_right_content .= '<div class=actions>';\n        if (api_get_setting('allow_message_tool') === 'true') {\n            $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/new_message.php\">'.\n                Display::return_icon('message_new.png', get_lang('ComposeMessage')).'</a>';\n            $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/inbox.php\">'.\n                Display::return_icon('inbox.png', get_lang('Inbox')).'</a>';\n            $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/outbox.php\">'.\n                Display::return_icon('outbox.png', get_lang('Outbox')).'</a>';\n        }\n        $social_right_content .= '</div>';\n    }\n}\n\n// LEFT COLUMN\n$social_left_content = '';\nif ($allowSocial) {\n    // Block Social Menu\n    $social_menu_block = SocialManager::show_social_menu('messages');\n    $social_right_content .= '<div class=\"row\">';\n    $social_right_content .= '<div class=\"col-md-12\">';\n    $social_right_content .= '<div class=\"actions\">';\n    $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/inbox.php\">'.\n        Display::return_icon('back.png', get_lang('Back'), [], 32).'</a>';\n    $social_right_content .= '</div>';\n    $social_right_content .= '</div>';\n    $social_right_content .= '<div class=\"col-md-12\">';\n}\n\n// MAIN CONTENT\nif (!isset($_POST['compose'])) {\n    if (isset($_GET['re_id'])) {\n        $social_right_content .= show_compose_reply_to_message(\n            $_GET['re_id'],\n            api_get_user_id(),\n            $tpl\n        );\n    } elseif (isset($_GET['send_to_user'])) {\n        $social_right_content .= show_compose_to_user($_GET['send_to_user'], $tpl);\n    } else {\n        $social_right_content .= show_compose_to_any($tpl);\n    }\n} else {\n    $restrict = false;\n    if (isset($_POST['users'])) {\n        $restrict = true;\n    } elseif (isset($_POST['group_id'])) {\n        $restrict = true;\n    } elseif (isset($_POST['hidden_user'])) {\n        $restrict = true;\n    }\n\n    $default['title'] = $_POST['title'];\n    $default['content'] = $_POST['content'];\n\n    // comes from a reply button\n    if (isset($_GET['re_id']) || isset($_GET['forward_id'])) {\n        $social_right_content .= manageForm($default, null, null, $tpl);\n    } else {\n        // post\n        if ($restrict) {\n            if (!isset($_POST['group_id'])) {\n                $default['users'] = isset($_POST['users']) ? $_POST['users'] : null;\n            } else {\n                $default['group_id'] = (int) $_POST['group_id'];\n            }\n            if (isset($_POST['hidden_user'])) {\n                $default['users'] = [$_POST['hidden_user']];\n            }\n            $social_right_content .= manageForm($default, null, null, $tpl);\n        } else {\n            $social_right_content .= Display::return_message(get_lang('ErrorSendingMessage'), 'error');\n        }\n    }\n}\n\nif ($allowSocial) {\n    $social_right_content .= '</div>';\n    $social_right_content .= '</div>';\n}\n\n// Block Social Avatar\nSocialManager::setSocialUserBlock($tpl, api_get_user_id(), 'messages');\n\nMessageManager::cleanAudioMessage();\nif ($allowSocial) {\n    $tpl->assign('social_menu_block', $social_menu_block);\n    $tpl->assign('social_right_content', $social_right_content);\n    $social_layout = $tpl->get_template('social/inbox.tpl');\n    $tpl->display($social_layout);\n} else {\n    $content = $social_right_content;\n    $tpl->assign('content', $content);\n    $tpl->display_one_col_template();\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Repository\\LegalRepository;\n\n/**\n * @package chamilo.messages\n */\n$cidReset = true;\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n\napi_block_anonymous_users();\n\nif (api_get_configuration_value('disable_gdpr')) {\n    api_not_allowed(true);\n}\n\n$userId = api_get_user_id();\n$userInfo = api_get_user_info($userId);\n\nif (empty($userInfo)) {\n    api_not_allowed(true);\n}\n\n$substitutionTerms = [\n    'password' => get_lang('EncryptedData'),\n    'salt' => get_lang('RandomData'),\n    'empty' => get_lang('NoData'),\n];\n\n$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';\n$formToString = '';\n\nif (api_get_setting('allow_terms_conditions') === 'true') {\n    $form = new FormValidator('delete_term', 'post', api_get_self().'?action=delete_legal&user_id='.$userId);\n    $form->addHtml(Display::return_message(get_lang('WhyYouWantToDeleteYourLegalAgreement'), 'normal', false));\n    $form->addTextarea('explanation', [get_lang('DeleteLegal'), get_lang('ExplanationDeleteLegal')], [], true);\n    $form->addHidden('action', 'delete_legal');\n    $form->addButtonSave(get_lang('DeleteLegal'));\n    $formToString = $form->returnForm();\n\n    $formDelete = new FormValidator('delete_account', 'post', api_get_self().'?action=delete_account&user_id='.$userId);\n    $formDelete->addTextarea(\n        'explanation',\n        [get_lang('DeleteAccount'), get_lang('ExplanationDeleteAccount')],\n        [],\n        true\n    );\n    $formDelete->addHidden('action', 'delete_account');\n    $formDelete->addButtonDelete(get_lang('DeleteAccount'));\n    $formToString .= $formDelete->returnForm();\n}\nswitch ($action) {\n    case 'send_legal':\n        $language = api_get_interface_language();\n        $language = api_get_language_id($language);\n        $terms = LegalManager::get_last_condition($language);\n        if (!$terms) {\n            //look for the default language\n            $language = api_get_setting('platformLanguage');\n            $language = api_get_language_id($language);\n            $terms = LegalManager::get_last_condition($language);\n        }\n\n        $legalAcceptType = $terms['version'].':'.$terms['language_id'].':'.time();\n        UserManager::update_extra_field_value(\n            $userId,\n            'legal_accept',\n            $legalAcceptType\n        );\n\n        Event::addEvent(\n            LOG_TERM_CONDITION_ACCEPTED,\n            LOG_USER_OBJECT,\n            api_get_user_info($userId),\n            api_get_utc_datetime()\n        );\n\n        $bossList = UserManager::getStudentBossList($userId);\n        if (!empty($bossList)) {\n            $bossList = array_column($bossList, 'boss_id');\n            $currentUserInfo = api_get_user_info($userId);\n            foreach ($bossList as $bossId) {\n                $subjectEmail = sprintf(\n                    get_lang('UserXSignedTheAgreement'),\n                    $currentUserInfo['complete_name']\n                );\n                $contentEmail = sprintf(\n                    get_lang('UserXSignedTheAgreementTheDateY'),\n                    $currentUserInfo['complete_name'],\n                    api_get_local_time($time)\n                );\n\n                MessageManager::send_message_simple(\n                    $bossId,\n                    $subjectEmail,\n                    $contentEmail,\n                    $user_id\n                );\n            }\n        }\n        Display::addFlash(Display::return_message(get_lang('Saved')));\n        header('Location: '.api_get_self());\n        exit;\n        break;\n    case 'delete_account':\n        if ($formDelete->validate()) {\n            $explanation = $formDelete->getSubmitValue('explanation');\n            UserManager::createDataPrivacyExtraFields();\n\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_delete_account',\n                1\n            );\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_delete_account_justification',\n                $explanation\n            );\n\n            Display::addFlash(Display::return_message(get_lang('Saved')));\n            Event::addEvent(\n                LOG_USER_DELETE_ACCOUNT_REQUEST,\n                LOG_USER_OBJECT,\n                $userInfo\n            );\n\n            $url = api_get_path(WEB_CODE_PATH).'admin/user_list_consent.php';\n            $link = Display::url($url, $url);\n            $subject = get_lang('RequestForAccountDeletion');\n            $content = sprintf(\n                get_lang('TheUserXAskedForAccountDeletionWithJustificationXGoHereX'),\n                $userInfo['complete_name'],\n                $explanation,\n                $link\n            );\n\n            $email = api_get_configuration_value('data_protection_officer_email');\n            if (!empty($email)) {\n                api_mail_html('', $email, $subject, $content);\n            } else {\n                MessageManager::sendMessageToAllAdminUsers(api_get_user_id(), $subject, $content);\n            }\n            header('Location: '.api_get_self());\n            exit;\n        }\n        break;\n    case 'delete_legal':\n        if ($form->validate()) {\n            $explanation = $form->getSubmitValue('explanation');\n\n            UserManager::createDataPrivacyExtraFields();\n\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_legal_agreement_consent_removal',\n                1\n            );\n\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_legal_agreement_consent_removal_justification',\n                $explanation\n            );\n\n            Display::addFlash(Display::return_message(get_lang('Sent')));\n\n            Event::addEvent(\n                LOG_USER_REMOVED_LEGAL_ACCEPT,\n                LOG_USER_OBJECT,\n                $userInfo\n            );\n\n            $url = api_get_path(WEB_CODE_PATH).'admin/user_list_consent.php';\n            $link = Display::url($url, $url);\n            $subject = get_lang('RequestForLegalConsentWithdrawal');\n            $content = sprintf(\n                get_lang('TheUserXAskedLegalConsentWithdrawalWithJustificationXGoHereX'),\n                $userInfo['complete_name'],\n                $explanation,\n                $link\n            );\n\n            $email = api_get_configuration_value('data_protection_officer_email');\n            if (!empty($email)) {\n                api_mail_html('', $email, $subject, $content);\n            } else {\n                MessageManager::sendMessageToAllAdminUsers(api_get_user_id(), $subject, $content);\n            }\n            header('Location: '.api_get_self());\n            exit;\n        }\n        break;\n}\n\n$propertiesToJson = UserManager::getRepository()->getPersonalDataToJson($userId, $substitutionTerms);\n\nif (!empty($_GET['export'])) {\n    $filename = md5(mt_rand(0, 1000000)).'.json';\n    $path = api_get_path(SYS_ARCHIVE_PATH).$filename;\n    $writeResult = file_put_contents($path, $propertiesToJson);\n    if ($writeResult !== false) {\n        DocumentManager::file_send_for_download($path, true, $filename);\n        exit;\n    }\n}\n\n$allowSocial = api_get_setting('allow_social_tool') === 'true';\n\n$nameTools = get_lang('PersonalDataReport');\n$show_message = null;\n\nif ($allowSocial) {\n    $this_section = SECTION_SOCIAL;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/social/home.php',\n        'name' => get_lang('SocialNetwork'),\n    ];\n} else {\n    $this_section = SECTION_MYPROFILE;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/auth/profile.php',\n        'name' => get_lang('Profile'),\n    ];\n}\n\n$interbreadcrumb[] = ['url' => '#', 'name' => get_lang('PersonalDataReport')];\n\n// LEFT CONTENT\n$socialMenuBlock = '';\nif ($allowSocial) {\n    // Block Social Menu\n    $socialMenuBlock = SocialManager::show_social_menu('personal-data');\n}\n\n// MAIN CONTENT\n$personalDataContent = '<ul>';\n$properties = json_decode($propertiesToJson);\n$webCoursePath = api_get_path(WEB_COURSE_PATH);\n$showWarningMessage = false;\nforeach ($properties as $key => $value) {\n    if (is_array($value) || is_object($value)) {\n        switch ($key) {\n            case 'classes':\n                foreach ($value as $category => $subValue) {\n                    $categoryName = 'Social group';\n                    if ($category == 0) {\n                        $categoryName = 'Class';\n                    }\n                    $personalDataContent .= '<li class=\"advanced_options\" id=\"personal-data-list-'.$category.'\">';\n                    $personalDataContent .= '<u>'.$categoryName.'</u> &gt;</li>';\n                    $personalDataContent .= '<ul id=\"personal-data-list-'.$category.'_options\" style=\"display:none;\">';\n                    if (empty($subValue)) {\n                        $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                    } else {\n                        foreach ($subValue as $subSubValue) {\n                            $personalDataContent .= '<li>'.$subSubValue.'</li>';\n                        }\n                    }\n                    $personalDataContent .= '</ul>';\n                }\n                break;\n            case 'extraFields':\n                $personalDataContent .= '<li>'.$key.': </li><ul>';\n                if (empty($value)) {\n                    $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                } else {\n                    foreach ($value as $subValue) {\n                        $personalDataContent .= '<li>'.$subValue->variable.': '.$subValue->value.'</li>';\n                    }\n                }\n                $personalDataContent .= '</ul>';\n                break;\n            case 'dropBoxSentFiles':\n                foreach ($value as $category => $subValue) {\n                    $personalDataContent .= '<li class=\"advanced_options\" id=\"personal-data-list-'.$category.'\">';\n                    $personalDataContent .= '<u>'.get_lang($category).'</u> &gt;</li>';\n                    $personalDataContent .= '<ul id=\"personal-data-list-'.$category.'_options\" style=\"display:none;\">';\n                    if (empty($subValue)) {\n                        $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                    } else {\n                        if (count($subValue) === 1000) {\n                            $showWarningMessage = true;\n                        }\n                        foreach ($subValue as $subSubValue) {\n                            if ($category === 'DocumentsAdded') {\n                                $documentLink = Display::url(\n                                    $subSubValue->code_path,\n                                    $webCoursePath.$subSubValue->directory.'/document'.$subSubValue->path\n                                );\n                                $personalDataContent .= '<li>'.$documentLink.'</li>';\n                            } else {\n                                $personalDataContent .= '<li>'.$subSubValue.'</li>';\n                            }\n                        }\n                    }\n                    $personalDataContent .= '</ul>';\n                }\n\n                break;\n            case 'portals':\n            case 'roles':\n            case 'achievedSkills':\n            case 'sessionAsGeneralCoach':\n            case 'courses':\n            case 'groupNames':\n            case 'groups':\n                $personalDataContent .= '<li>'.$key.': </li><ul>';\n                if (empty($subValue)) {\n                    $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                } else {\n                    foreach ($value as $subValue) {\n                        $personalDataContent .= '<li>'.$subValue.'</li>';\n                    }\n                }\n                $personalDataContent .= '</ul>';\n                break;\n            case 'sessionCourseSubscriptions':\n                $personalDataContent .= '<li>'.$key.': </li><ul>';\n                foreach ($value as $session => $courseList) {\n                    $personalDataContent .= '<li>'.$session.'<ul>';\n                    if (empty($courseList)) {\n                        $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                    } else {\n                        foreach ($courseList as $course) {\n                            $personalDataContent .= '<li>'.$course.'</li>';\n                        }\n                    }\n                    $personalDataContent .= '</ul>';\n                }\n                $personalDataContent .= '</ul>';\n                break;\n            default:\n                //var_dump($key);\n                break;\n        }\n\n        /*foreach ($value as $subValue) {\n            foreach ($subValue as $subSubValue) {\n                var_dump($subSubValue);\n                //$personalDataContent .= '<li>'.$subSubValue.'</li>';\n            }\n        }*/\n        //skip in some cases\n        /*sif (!empty($value['date'])) {\n            $personalDataContent .= '<li>'.$key.': '.$value['date'].'</li>';\n        } else {\n            $personalDataContent .= '<li>'.$key.': '.get_lang('ComplexDataNotShown').'</li>';\n        }*/\n    } else {\n        $personalDataContent .= '<li>'.$key.': '.$value.'</li>';\n    }\n}\n$personalDataContent .= '</ul>';\n\n// Check terms acceptation\n$permissionBlock = '';\nif (api_get_setting('allow_terms_conditions') === 'true') {\n    $extraFieldValue = new ExtraFieldValue('user');\n    $value = $extraFieldValue->get_values_by_handler_and_field_variable(\n        $userId,\n        'legal_accept'\n    );\n    $permissionBlock .= Display::return_icon('accept_na.png', get_lang('NotAccepted'));\n    if (isset($value['value']) && !empty($value['value'])) {\n        list($legalId, $legalLanguageId, $legalTime) = explode(':', $value['value']);\n        $permissionBlock = '<h4>'.get_lang('CurrentStatus').'</h4>'.\n            get_lang('LegalAgreementAccepted').' '.Display::return_icon('accept.png', get_lang('LegalAgreementAccepted'), [], ICON_SIZE_TINY).\n            '<br />';\n        $permissionBlock .= get_lang('Date').': '.api_get_local_time($legalTime).'<br /><br />';\n        $permissionBlock .= $formToString;\n\n    /*$permissionBlock .= Display::url(\n        get_lang('DeleteLegal'),\n        api_get_self().'?action=delete_legal&user_id='.$userId,\n        ['class' => 'btn btn-danger btn-xs']\n    );*/\n    } else {\n        // @TODO add action handling for button\n        $permissionBlock .= Display::url(\n            get_lang('SendLegal'),\n            api_get_self().'?action=send_legal&user_id='.$userId,\n            ['class' => 'btn btn-primary btn-xs']\n        );\n    }\n} else {\n    $permissionBlock .= get_lang('NoTermsAndConditionsAvailable');\n}\n\n//Build the final array to pass to template\n$personalData = [];\n$personalData['data'] = $personalDataContent;\n//$personalData['responsible'] = api_get_setting('personal_data_responsible_org');\n\n$em = Database::getManager();\n/** @var LegalRepository $legalTermsRepo */\n$legalTermsRepo = $em->getRepository('ChamiloCoreBundle:Legal');\n// Get data about the treatment of data\n$treatmentTypes = LegalManager::getTreatmentTypeList();\n\n/*foreach ($treatmentTypes as $id => $item) {\n    $personalData['treatment'][$item]['title'] = get_lang('PersonalData'.ucfirst($item).'Title');\n    $legalTerm = $legalTermsRepo->findOneByTypeAndLanguage($id, api_get_language_id($user_language));\n    $legalTermContent = '';\n    if (!empty($legalTerm[0]) && is_array($legalTerm[0])) {\n        $legalTermContent = $legalTerm[0]['content'];\n    }\n    $personalData['treatment'][$item]['content'] = $legalTermContent;\n}*/\n\n$officerName = api_get_configuration_value('data_protection_officer_name');\n$officerRole = api_get_configuration_value('data_protection_officer_role');\n$officerEmail = api_get_configuration_value('data_protection_officer_email');\nif (!empty($officerName)) {\n    $personalData['officer_name'] = $officerName;\n    $personalData['officer_role'] = $officerRole;\n    $personalData['officer_email'] = $officerEmail;\n}\n\n$tpl = new Template(null);\n\n$actions = Display::url(\n    Display::return_icon('excel.png', get_lang('Export'), [], ICON_SIZE_MEDIUM),\n    api_get_path(WEB_CODE_PATH).'social/personal_data.php?export=1'\n);\n\n$tpl->assign('actions', Display::toolbarAction('toolbar', [$actions]));\n\n$termLink = '';\nif (api_get_setting('allow_terms_conditions') === 'true') {\n    $url = api_get_path(WEB_CODE_PATH).'social/terms.php';\n    $termLink = Display::url(get_lang('ReadTermsAndConditions'), $url);\n}\n\nif ($showWarningMessage) {\n    Display::addFlash(Display::return_message(get_lang('MoreDataAvailableInTheDatabaseButTrunkedForEfficiencyReasons')));\n}\n\n// Block Social Avatar\nSocialManager::setSocialUserBlock($tpl, api_get_user_id(), 'messages');\nif (api_get_setting('allow_social_tool') === 'true') {\n    $tpl->assign('social_menu_block', $socialMenuBlock);\n} else {\n    $tpl->assign('social_menu_block', '');\n    $tpl->assign('personal_data_block', $personalDataContent);\n}\n\n$tpl->assign('personal_data', $personalData);\n$tpl->assign('permission', $permissionBlock);\n$tpl->assign('term_link', $termLink);\n$socialLayout = $tpl->get_template('social/personal_data.tpl');\n$tpl->display($socialLayout);\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * @package chamilo.plugin.ticket\n */\n$cidReset = true;\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n\napi_block_anonymous_users();\n\n$user_id = api_get_user_id();\n$isAdmin = api_is_platform_admin();\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_CODE_PATH).'ticket/tickets.php',\n    'name' => get_lang('MyTickets'),\n];\n$interbreadcrumb[] = ['url' => '#', 'name' => get_lang('TicketDetail')];\n\n$disableReponseButtons = '';\n$htmlHeadXtra[] = '<script>\n$(document).ready(function() {\n\t$(\"#dialog-form\").dialog({\n\t\tautoOpen: false,\n\t\theight: 450,\n\t\twidth: 600,\n\t\tmodal: true,\n\t\tbuttons: {\n            '.get_lang('Accept').': function(){\n                $(\"#frmResponsable\").submit()\n            },\n            '.ucfirst(get_lang('Close')).': function() {\n                $(this).dialog(\"close\");\n            }\n            }\n        });\n\n        $(\"a#assign\").click(function () {\n            $( \"#dialog-form\" ).dialog( \"open\" );\n        });\n\n        $(\".responseyes\").click(function () {\n            if(!confirm(\"'.get_lang('AreYouSure').' : '.strtoupper(get_lang('Yes')).'. '.get_lang('IfYouAreSureTheTicketWillBeClosed').'\")){\n                return false;\n            }\n        });\n\n        $(\".responseno\").click(function () {\n            if(!confirm(\"'.get_lang('AreYouSure').' : '.strtoupper(get_lang('No')).'\")){\n                return false;\n            }\n        });     \n       \n        '.$disableReponseButtons.'\n});\n\nvar counter_image = 1;\n\nfunction remove_image_form(element_id) {\n    $(\"#\" + element_id).remove();\n    counter_image = counter_image - 1;\n    $(\"#link-more-attach\").css(\"display\", \"block\");\n}\n\nfunction add_image_form() {\n    // Multiple filepaths for image form\n    var filepaths = $(\"#filepaths\");\n    var new_elem, input_file, link_remove, img_remove, new_filepath_id;\n\n    if ($(\"#filepath_\"+counter_image)) {\n        counter_image = counter_image + 1;\n    }  else {\n        counter_image = counter_image;\n    }\n\n    new_elem = \"filepath_\"+counter_image;\n\n    $(\"<div/>\", {\n        id: new_elem,\n        class: \"controls\"\n    }).appendTo(filepaths);\n\n    input_file = $(\"<input/>\", {\n        type: \"file\",\n        name: \"attach_\" + counter_image,\n        size: 20\n    });\n\n    link_remove = $(\"<a/>\", {\n        onclick: \"remove_image_form(\\'\" + new_elem + \"\\')\",\n        style: \"cursor: pointer\"\n    });\n\n    img_remove = $(\"<img/>\", {\n        src: \"'.Display::returnIconPath('delete.png').'\"\n    });\n\n    new_filepath_id = $(\"#filepath_\" + counter_image);\n    new_filepath_id.append(input_file, link_remove.append(img_remove));\n\n    if (counter_image === 6) {\n        var link_attach = $(\"#link-more-attach\");\n        if (link_attach) {\n            $(link_attach).css(\"display\", \"none\");\n        }\n    }\n}\n</script>';\n\n$htmlHeadXtra[] = '<style>\n.attachment-link {\n    margin: 12px;\n}\n#link-more-attach {\n    color: white;\n    cursor: pointer;\n    width: 120px;\n}\n</style>';\n\n$ticket_id = (int) $_REQUEST['ticket_id'];\n$ticket = TicketManager::get_ticket_detail_by_id($ticket_id);\nif (!isset($ticket['ticket'])) {\n    api_not_allowed(true);\n}\nif (!isset($_REQUEST['ticket_id'])) {\n    header('Location: '.api_get_path(WEB_CODE_PATH).'ticket/tickets.php');\n    exit;\n}\n\n/*if (isset($_POST['response'])) {\n    if ($user_id == $ticket['ticket']['assigned_last_user'] || api_is_platform_admin()) {\n        $response = $_POST['response'] === '1' ? true : false;\n        $newStatus = TicketManager::STATUS_PENDING;\n        if ($response) {\n            $newStatus = TicketManager::STATUS_CLOSE;\n        }\n        TicketManager::update_ticket_status(\n            TicketManager::getStatusIdFromCode($newStatus),\n            $ticket_id,\n            $user_id\n        );\n        Display::addFlash(Display::return_message(get_lang('Updated')));\n        header(\"Location:\".api_get_self().\"?ticket_id=\".$ticket_id);\n        exit;\n    }\n}*/\n\n$title = 'Ticket #'.$ticket['ticket']['code'];\n\nif (isset($_REQUEST['close'])) {\n    TicketManager::close_ticket($ticket_id, $user_id);\n    $ticket['ticket']['status_id'] = TicketManager::STATUS_CLOSE;\n    $ticket['ticket']['status'] = get_lang('Closed');\n}\n\n$projectId = $ticket['ticket']['project_id'];\n$messages = $ticket['messages'];\n$counter = 1;\n$messageToShow = '';\n$formToShow = '';\nforeach ($messages as $message) {\n    $date = Display::url(\n        date_to_str_ago($message['sys_insert_datetime']),\n        '#',\n        ['title' => api_get_local_time($message['sys_insert_datetime']), 'class' => 'boot-tooltip']\n    );\n\n    $receivedMessage = '';\n    if (!empty($message['subject'])) {\n        $receivedMessage = '<b>'.get_lang('Subject').': </b> '.Security::remove_XSS($message['subject']).'<br />';\n    }\n\n    if (!empty($message['message'])) {\n        $receivedMessage = '<b>'.get_lang('Message').':</b><br />'.Security::remove_XSS($message['message']).'<br />';\n    }\n\n    $attachmentLinks = '';\n    if (isset($message['attachments'])) {\n        $attributeClass = [\n            'class' => 'attachment-link',\n        ];\n        foreach ($message['attachments'] as $attach) {\n            $attachmentLinks .= Display::tag('div', $attach['attachment_link'], $attributeClass);\n        }\n    }\n\n    $entireMessage = $receivedMessage.$attachmentLinks;\n    $counterLink = Display::url('#'.$counter, api_get_self().'?ticket_id='.$ticket_id.'#note-'.$counter);\n\n    $messageToShow .= '<a id=\"note-'.$counter.'\"> </a><h4>'.sprintf(\n        get_lang('UpdatedByX'),\n        $message['user_info']['complete_name_with_message_link']\n    );\n\n    $messageToShow .= ' '.$date.' <span class=\"pull-right\">'.$counterLink.'</span></h4>';\n    $messageToShow .= '<hr />';\n\n    if (!empty($entireMessage)) {\n        $messageToShow .= Display::div(\n            $entireMessage,\n            ['class' => 'well']\n        );\n    }\n    $counter++;\n}\n\n$subject = get_lang('ReplyShort').': '.Security::remove_XSS($ticket['ticket']['subject']);\n\nif ($ticket['ticket']['status_id'] != TicketManager::STATUS_FORWARDED &&\n    $ticket['ticket']['status_id'] != TicketManager::STATUS_CLOSE\n) {\n    if ($ticket['ticket']['assigned_last_user'] == $user_id ||\n        $ticket['ticket']['sys_insert_user_id'] == $user_id ||\n        $isAdmin\n    ) {\n        $form = getForm($ticket['ticket']);\n        $formToShow = $form->returnForm();\n\n        if ($form->validate()) {\n            $ticket_id = (int) $_POST['ticket_id'];\n            $messageToSend = '';\n            $message = isset($_POST['confirmation']) ? true : false;\n            $file_attachments = $_FILES;\n\n            if ($isAdmin) {\n                $oldUserId = $ticket['ticket']['assigned_last_user'];\n                if (isset($_POST['assigned_last_user']) && !empty($_POST['assigned_last_user']) &&\n                    $_POST['assigned_last_user'] != $oldUserId\n                ) {\n                    TicketManager::assignTicketToUser(\n                        $ticket_id,\n                        $_POST['assigned_last_user']\n                    );\n                    $oldUserName = '-';\n                    if (!empty($oldUserId)) {\n                        $oldUserInfo = api_get_user_info($oldUserId);\n                        $oldUserName = $oldUserInfo['complete_name_with_message_link'];\n                    }\n\n                    $userCompleteName = '-';\n                    if (!empty($_POST['assigned_last_user'])) {\n                        $userInfo = api_get_user_info(\n                            $_POST['assigned_last_user']\n                        );\n                        $userCompleteName = $userInfo['complete_name_with_message_link'];\n                    }\n\n                    $messageToSend .= sprintf(\n                        get_lang('AssignedChangeFromXToY'),\n                        $oldUserName,\n                        $userCompleteName\n                    ).'<br />';\n                }\n\n                TicketManager::updateTicket(\n                    [\n                        'priority_id' => (int) $_POST['priority_id'],\n                        'status_id' => (int) $_POST['status_id'],\n                    ],\n                    $ticket_id,\n                    api_get_user_id()\n                );\n\n                if ($_POST['priority_id'] != $ticket['ticket']['priority_id']) {\n                    $newPriority = TicketManager::getPriority(\n                        $_POST['priority_id']\n                    );\n                    $newPriorityTitle = '-';\n                    if ($newPriority) {\n                        $newPriorityTitle = $newPriority->getName();\n                    }\n                    $oldPriority = TicketManager::getPriority(\n                        $ticket['ticket']['priority_id']\n                    );\n                    $oldPriorityTitle = '-';\n                    if ($oldPriority) {\n                        $oldPriorityTitle = $oldPriority->getName();\n                    }\n                    $messageToSend .= sprintf(\n                        get_lang('PriorityChangeFromXToY'),\n                        $oldPriorityTitle,\n                        $newPriorityTitle\n                    ).'<br />';\n                }\n\n                if ($_POST['status_id'] != $ticket['ticket']['status_id']) {\n                    $newStatus = TicketManager::getStatus(\n                        $_POST['status_id']\n                    );\n                    $newTitle = '-';\n                    if ($newStatus) {\n                        $newTitle = $newStatus->getName();\n                    }\n                    $oldStatus = TicketManager::getStatus(\n                        $ticket['ticket']['status_id']\n                    );\n                    $oldStatusTitle = '-';\n                    if ($oldStatus) {\n                        $oldStatusTitle = $oldStatus->getName();\n                    }\n\n                    $messageToSend .= sprintf(\n                        get_lang('StatusChangeFromXToY'),\n                        $oldStatusTitle,\n                        $newTitle\n                    ).'<br />';\n                }\n            }\n\n            $messageToSend .= $_POST['content'];\n\n            TicketManager::insertMessage(\n                $ticket_id,\n                $_POST['subject'],\n                $messageToSend,\n                $file_attachments,\n                $user_id,\n                'NOL',\n                $message\n            );\n\n            TicketManager::sendNotification(\n                $ticket_id,\n                get_lang('TicketUpdated'),\n                $messageToSend\n            );\n\n            Display::addFlash(Display::return_message(get_lang('Saved')));\n            header(\"Location:\".api_get_self().\"?ticket_id=\".$ticket_id);\n            exit;\n        }\n    }\n}\n\nDisplay::display_header();\necho '<div class=\"actions\">';\necho Display::url(\n    Display::return_icon('back.png', get_lang('Tickets'), [], ICON_SIZE_MEDIUM),\n    api_get_path(WEB_CODE_PATH).'ticket/tickets.php?project_id='.$projectId\n);\necho '</div>';\n$bold = '';\nif ($ticket['ticket']['status_id'] == TicketManager::STATUS_CLOSE) {\n    $bold = 'style = \"font-weight: bold;\"';\n}\n$senderData = get_lang('AddedBy').' '.$ticket['usuario']['complete_name_with_message_link'];\n\necho '<table width=\"100%\" >\n        <tr>\n          <td colspan=\"3\">\n          <h1>'.$title.'</h1>\n          <h2>'.$ticket['ticket']['subject'].'</h2>\n          <p>\n            '.$senderData.' '.\n            get_lang('Created').' '.\n            Display::url(\n                date_to_str_ago($ticket['ticket']['start_date_from_db']),\n                '#',\n                ['title' => $ticket['ticket']['start_date'], 'class' => 'boot-tooltip']\n            ).'. '.\n            get_lang('TicketUpdated').' '.\n            Display::url(\n                date_to_str_ago($ticket['ticket']['sys_lastedit_datetime_from_db']),\n                '#',\n                ['title' => $ticket['ticket']['sys_lastedit_datetime'], 'class' => 'boot-tooltip']\n            ).'\n          </p>\n          </td>\n        </tr>\n        <tr>\n           <td><p><b>'.get_lang('Category').': </b>'.$ticket['ticket']['name'].'</p></td>\n        </tr>\n        <tr>\n           <td><p '.$bold.'><b>'.get_lang('Status').':</b> '.$ticket['ticket']['status'].'</p></td>\n        </tr>\n        <tr>\n            <td><p><b>'.get_lang('Priority').': </b>'.$ticket['ticket']['priority'].'<p></td>\n        </tr>';\n\nif (!empty($ticket['ticket']['assigned_last_user'])) {\n    $assignedUser = api_get_user_info($ticket['ticket']['assigned_last_user']);\n    echo '<tr>\n            <td><p><b>'.get_lang('AssignedTo').': </b>'.$assignedUser['complete_name_with_message_link'].'<p></td>\n        </tr>';\n} else {\n    echo '<tr>\n            <td><p><b>'.get_lang('AssignedTo').': </b>-<p></td>\n        </tr>';\n}\nif ($ticket['ticket']['course_url'] != null) {\n    if (!empty($ticket['ticket']['session_id'])) {\n        $sessionInfo = api_get_session_info($ticket['ticket']['session_id']);\n        echo '<tr>\n            <td><b>'.get_lang('Session').':</b> '.$sessionInfo['name'].' </td>\n            <td></td>\n            <td colspan=\"2\"></td>\n          </tr>';\n    }\n\n    echo '<tr>\n            <td><b>'.get_lang('Course').':</b> '.$ticket['ticket']['course_url'].' </td>\n            <td></td>\n            <td colspan=\"2\"></td>\n          </tr>';\n}\necho '<tr>\n        <td>\n        <hr />\n        <b>'.get_lang('Description').':</b> <br />\n        '.$ticket['ticket']['message'].'\n        <hr />\n        </td>            \n     </tr>\n    ';\necho '</table>';\n\necho $messageToShow;\n\necho $formToShow;\n\nDisplay::display_footer();\n\n/**\n * @param array $ticket\n *\n * @return FormValidator\n */\nfunction getForm($ticket)\n{\n    $isAdmin = api_is_platform_admin();\n    global $subject;\n\n    $form = new FormValidator(\n        'send_ticket',\n        'POST',\n        api_get_self().'?ticket_id='.$ticket['id'],\n        '',\n        [\n            'enctype' => 'multipart/form-data',\n            'class' => 'form-horizontal',\n        ]\n    );\n\n    if ($isAdmin) {\n        $statusList = TicketManager::getStatusList();\n        $form->addElement(\n            'select',\n            'status_id',\n            get_lang('Status'),\n            $statusList\n        );\n\n        $priorityList = TicketManager::getPriorityList();\n        $form->addElement(\n            'select',\n            'priority_id',\n            get_lang('Priority'),\n            $priorityList,\n            [\n                'id' => 'priority_id',\n                'for' => 'priority_id',\n            ]\n        );\n\n        $form->addSelectAjax(\n            'assigned_last_user',\n            get_lang('Assign'),\n            null,\n            ['url' => api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php?a=get_user_like']\n        );\n\n        $form->setDefaults(\n            [\n                'priority_id' => $ticket['priority_id'],\n                'status_id' => $ticket['status_id'],\n                'assigned_last_user' => $ticket['assigned_last_user'],\n            ]\n        );\n    }\n\n    $form->addElement(\n        'text',\n        'subject',\n        get_lang('Subject'),\n        [\n            'for' => 'subject',\n            'value' => $subject,\n            'style' => 'width: 540px;',\n        ]\n    );\n\n    $form->addElement('hidden', 'ticket_id', $ticket['id']);\n\n    $form->addHtmlEditor(\n        'content',\n        get_lang('Message'),\n        false,\n        false,\n        [\n            'ToolbarSet' => 'Profile',\n            'Width' => '550',\n            'Height' => '250',\n        ]\n    );\n\n    if ($isAdmin) {\n        $form->addElement(\n            'checkbox',\n            'confirmation',\n            null,\n            get_lang('RequestConfirmation')\n        );\n    }\n\n    $form->addElement('file', 'attach_1', get_lang('FilesAttachment'));\n    $form->addLabel(\n        '',\n        '<span id=\"filepaths\"><div id=\"filepath_1\"></div></span>'\n    );\n    $form->addLabel(\n        '',\n        '<span id=\"link-more-attach\">\n         <span class=\"btn btn-success\" onclick=\"return add_image_form()\">'.get_lang('AddOneMoreFile').'</span>\n         </span>\n         ('.sprintf(get_lang('MaximunFileSizeX'), format_file_size(api_get_setting('message_max_upload_filesize'))).')'\n    );\n\n    $form->addElement('html', '<br/>');\n    $form->addButtonSend(get_lang('Send'));\n\n    return $form;\n}\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\TicketBundle\\Entity\\MessageAttachment;\nuse Chamilo\\TicketBundle\\Entity\\Priority;\nuse Chamilo\\TicketBundle\\Entity\\Project;\nuse Chamilo\\TicketBundle\\Entity\\Status;\nuse Chamilo\\TicketBundle\\Entity\\Ticket;\n\n/**\n * Class TicketManager.\n *\n * @package chamilo.plugin.ticket\n */\nclass TicketManager\n{\n    const PRIORITY_NORMAL = 'NRM';\n    const PRIORITY_HIGH = 'HGH';\n    const PRIORITY_LOW = 'LOW';\n\n    const SOURCE_EMAIL = 'MAI';\n    const SOURCE_PHONE = 'TEL';\n    const SOURCE_PLATFORM = 'PLA';\n    const SOURCE_PRESENTIAL = 'PRE';\n\n    const STATUS_NEW = 'NAT';\n    const STATUS_PENDING = 'PND';\n    const STATUS_UNCONFIRMED = 'XCF';\n    const STATUS_CLOSE = 'CLS';\n    const STATUS_FORWARDED = 'REE';\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Get categories of tickets.\n     *\n     * @param int    $projectId\n     * @param string $order\n     *\n     * @return array\n     */\n    public static function get_all_tickets_categories($projectId, $order = '')\n    {\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_project = Database::get_main_table(TABLE_TICKET_PROJECT);\n\n        $order = empty($order) ? 'category.total_tickets DESC' : $order;\n        $projectId = (int) $projectId;\n\n        $sql = \"SELECT \n                    category.*, \n                    category.id category_id,\n                    project.other_area, \n                    project.email\n                FROM \n                $table_support_category category \n                INNER JOIN $table_support_project project\n                ON project.id = category.project_id\n                WHERE project.id  = $projectId\n                ORDER BY $order\";\n        $result = Database::query($sql);\n        $types = [];\n        while ($row = Database::fetch_assoc($result)) {\n            $types[] = $row;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param $from\n     * @param $numberItems\n     * @param $column\n     * @param $direction\n     *\n     * @return array\n     */\n    public static function getCategories($from, $numberItems, $column, $direction)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $sql = \"SELECT id, name, description, total_tickets\n                FROM $table\";\n\n        if (!in_array($direction, ['ASC', 'DESC'])) {\n            $direction = 'ASC';\n        }\n        $column = intval($column);\n        $from = intval($from);\n        $numberItems = intval($numberItems);\n\n        //$sql .= \" ORDER BY col$column $direction \";\n        $sql .= \" LIMIT $from,$numberItems\";\n\n        $result = Database::query($sql);\n        $types = [];\n        while ($row = Database::fetch_array($result)) {\n            $types[] = $row;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array|mixed\n     */\n    public static function getCategory($id)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $id = (int) $id;\n        $sql = \"SELECT id, name, description, total_tickets\n                FROM $table WHERE id = $id\";\n\n        $result = Database::query($sql);\n        $category = Database::fetch_array($result);\n\n        return $category;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getCategoriesCount()\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n\n        $sql = \"SELECT count(id) count\n                FROM $table \";\n\n        $result = Database::query($sql);\n        $category = Database::fetch_array($result);\n\n        return $category['count'];\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updateCategory($id, $params)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $id = (int) $id;\n        Database::update($table, $params, ['id = ?' => $id]);\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addCategory($params)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        Database::insert($table, $params);\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    public static function deleteCategory($id)\n    {\n        $id = intval($id);\n        if (empty($id)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_TICKET_TICKET);\n        $sql = \"UPDATE $table SET category_id = NULL WHERE category_id = $id\";\n        Database::query($sql);\n\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $sql = \"DELETE FROM $table WHERE id = $id\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * @param int   $categoryId\n     * @param array $users\n     *\n     * @return bool\n     */\n    public static function addUsersToCategory($categoryId, $users)\n    {\n        if (empty($users) || empty($categoryId)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        foreach ($users as $userId) {\n            if (self::userIsAssignedToCategory($userId, $categoryId) === false) {\n                $params = [\n                    'category_id' => $categoryId,\n                    'user_id' => $userId,\n                ];\n                Database::insert($table, $params);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $categoryId\n     *\n     * @return bool\n     */\n    public static function userIsAssignedToCategory($userId, $categoryId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        $userId = (int) $userId;\n        $categoryId = (int) $categoryId;\n        $sql = \"SELECT * FROM $table \n                WHERE category_id = $categoryId AND user_id = $userId\";\n        $result = Database::query($sql);\n\n        return Database::num_rows($result) > 0;\n    }\n\n    /**\n     * @param int $categoryId\n     *\n     * @return array\n     */\n    public static function getUsersInCategory($categoryId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        $categoryId = (int) $categoryId;\n        $sql = \"SELECT * FROM $table WHERE category_id = $categoryId\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param int $categoryId\n     */\n    public static function deleteAllUserInCategory($categoryId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_CATEGORY_REL_USER);\n        $categoryId = (int) $categoryId;\n        $sql = \"DELETE FROM $table WHERE category_id = $categoryId\";\n        Database::query($sql);\n    }\n\n    /**\n     * Get all possible tickets statuses.\n     *\n     * @return array\n     */\n    public static function get_all_tickets_status()\n    {\n        $table = Database::get_main_table(TABLE_TICKET_STATUS);\n        $sql = \"SELECT * FROM \".$table;\n        $result = Database::query($sql);\n        $types = [];\n        while ($row = Database::fetch_assoc($result)) {\n            $types[] = $row;\n        }\n\n        return $types;\n    }\n\n    /**\n     * Inserts a new ticket in the corresponding tables.\n     *\n     * @param int    $category_id\n     * @param int    $course_id\n     * @param int    $sessionId\n     * @param int    $project_id\n     * @param string $other_area\n     * @param string $subject\n     * @param string $content\n     * @param string $personalEmail\n     * @param array  $fileAttachments\n     * @param string $source\n     * @param string $priority\n     * @param string $status\n     * @param int    $assignedUserId\n     *\n     * @return bool\n     */\n    public static function add(\n        $category_id,\n        $course_id,\n        $sessionId,\n        $project_id,\n        $other_area,\n        $subject,\n        $content,\n        $personalEmail = '',\n        $fileAttachments = [],\n        $source = '',\n        $priority = '',\n        $status = '',\n        $assignedUserId = 0\n    ) {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n\n        if (empty($category_id)) {\n            return false;\n        }\n\n        $currentUserId = api_get_user_id();\n        $currentUserInfo = api_get_user_info();\n        $now = api_get_utc_datetime();\n        $course_id = (int) $course_id;\n        $category_id = (int) $category_id;\n        $project_id = (int) $project_id;\n        $priority = empty($priority) ? self::PRIORITY_NORMAL : (int) $priority;\n\n        if ($status === '') {\n            $status = self::STATUS_NEW;\n            if ($other_area > 0) {\n                $status = self::STATUS_FORWARDED;\n            }\n        }\n\n        if (!empty($category_id)) {\n            if (empty($assignedUserId)) {\n                $usersInCategory = self::getUsersInCategory($category_id);\n                if (!empty($usersInCategory) && count($usersInCategory) > 0) {\n                    $userCategoryInfo = $usersInCategory[0];\n                    if (isset($userCategoryInfo['user_id'])) {\n                        $assignedUserId = $userCategoryInfo['user_id'];\n                    }\n                }\n            }\n        }\n\n        $assignedUserInfo = [];\n        if (!empty($assignedUserId)) {\n            $assignedUserInfo = api_get_user_info($assignedUserId);\n            if (empty($assignedUserInfo)) {\n                return false;\n            }\n        }\n\n        // insert_ticket\n        $params = [\n            'project_id' => $project_id,\n            'category_id' => $category_id,\n            'priority_id' => $priority,\n            'personal_email' => $personalEmail,\n            'status_id' => $status,\n            'start_date' => $now,\n            'sys_insert_user_id' => $currentUserId,\n            'sys_insert_datetime' => $now,\n            'sys_lastedit_user_id' => $currentUserId,\n            'sys_lastedit_datetime' => $now,\n            'source' => $source,\n            'assigned_last_user' => $assignedUserId,\n            'subject' => $subject,\n            'message' => $content,\n        ];\n\n        if (!empty($course_id)) {\n            $params['course_id'] = $course_id;\n        }\n\n        if (!empty($sessionId)) {\n            $params['session_id'] = $sessionId;\n        }\n        $ticketId = Database::insert($table_support_tickets, $params);\n\n        if ($ticketId) {\n            $ticket_code = \"A\".str_pad($ticketId, 11, '0', STR_PAD_LEFT);\n            $titleCreated = sprintf(\n                get_lang('TicketXCreated'),\n                $ticket_code\n            );\n\n            Display::addFlash(Display::return_message(\n                $titleCreated,\n                'normal',\n                false\n            ));\n\n            if ($assignedUserId != 0) {\n                self::assignTicketToUser(\n                    $ticketId,\n                    $assignedUserId\n                );\n\n                Display::addFlash(Display::return_message(\n                    sprintf(\n                        get_lang('TicketXAssignedToUserX'),\n                        $ticket_code,\n                        $assignedUserInfo['complete_name']\n                    ),\n                    'normal',\n                    false\n                ));\n            }\n\n            if (!empty($fileAttachments)) {\n                $attachmentCount = 0;\n                foreach ($fileAttachments as $attach) {\n                    if (!empty($attach['tmp_name'])) {\n                        $attachmentCount++;\n                    }\n                }\n                if ($attachmentCount > 0) {\n                    self::insertMessage(\n                        $ticketId,\n                        '',\n                        '',\n                        $fileAttachments,\n                        $currentUserId\n                    );\n                }\n            }\n\n            // Update code\n            $sql = \"UPDATE $table_support_tickets\n                    SET code = '$ticket_code'\n                    WHERE id = '$ticketId'\";\n            Database::query($sql);\n\n            // Update total\n            $sql = \"UPDATE $table_support_category\n                    SET total_tickets = total_tickets + 1\n                    WHERE id = $category_id\";\n            Database::query($sql);\n\n            $helpDeskMessage =\n                '<table>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('User').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['complete_name'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Username').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['username'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Email').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['email'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Phone').'</b></td>\n                            <td width=\"400px\">'.$currentUserInfo['phone'].'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Date').'</b></td>\n                            <td width=\"400px\">'.api_convert_and_format_date($now, DATE_TIME_FORMAT_LONG).'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Title').'</b></td>\n                            <td width=\"400px\">'.Security::remove_XSS($subject).'</td>\n                        </tr>\n                        <tr>\n                            <td width=\"100px\"><b>'.get_lang('Description').'</b></td>\n                            <td width=\"400px\">'.Security::remove_XSS($content).'</td>\n                        </tr>\n                    </table>';\n\n            if ($assignedUserId != 0) {\n                $href = api_get_path(WEB_CODE_PATH).'/ticket/ticket_details.php?ticket_id='.$ticketId;\n                $helpDeskMessage .= sprintf(\n                    get_lang('TicketAssignedToXCheckZAtLinkY'),\n                    $assignedUserInfo['complete_name'],\n                    $href,\n                    $ticketId\n                );\n            }\n\n            if (empty($category_id)) {\n                if (api_get_setting('ticket_send_warning_to_all_admins') === 'true') {\n                    $warningSubject = sprintf(\n                        get_lang('TicketXCreatedWithNoCategory'),\n                        $ticket_code\n                    );\n                    Display::addFlash(Display::return_message($warningSubject));\n\n                    $admins = UserManager::get_all_administrators();\n                    foreach ($admins as $userId => $data) {\n                        if ($data['active']) {\n                            MessageManager::send_message_simple(\n                                $userId,\n                                $warningSubject,\n                                $helpDeskMessage\n                            );\n                        }\n                    }\n                }\n            } else {\n                $categoryInfo = self::getCategory($category_id);\n                $usersInCategory = self::getUsersInCategory($category_id);\n\n                $message = '<h2>'.get_lang('TicketInformation').'</h2><br />'.$helpDeskMessage;\n\n                if (api_get_setting('ticket_warn_admin_no_user_in_category') === 'true') {\n                    $usersInCategory = self::getUsersInCategory($category_id);\n                    if (empty($usersInCategory)) {\n                        $subject = sprintf(\n                            get_lang('WarningCategoryXDoesntHaveUsers'),\n                            $categoryInfo['name']\n                        );\n\n                        if (api_get_setting('ticket_send_warning_to_all_admins') === 'true') {\n                            Display::addFlash(Display::return_message(\n                                sprintf(\n                                    get_lang('CategoryWithNoUserNotificationSentToAdmins'),\n                                    $categoryInfo['name']\n                                ),\n                                null,\n                                false\n                            ));\n\n                            $admins = UserManager::get_all_administrators();\n                            foreach ($admins as $userId => $data) {\n                                if ($data['active']) {\n                                    self::sendNotification(\n                                        $ticketId,\n                                        $subject,\n                                        $message,\n                                        $userId\n                                    );\n                                }\n                            }\n                        } else {\n                            Display::addFlash(Display::return_message($subject));\n                        }\n                    }\n                }\n\n                // Send notification to all users\n                if (!empty($usersInCategory)) {\n                    foreach ($usersInCategory as $data) {\n                        if ($data['user_id']) {\n                            self::sendNotification(\n                                $ticketId,\n                                $subject,\n                                $message,\n                                $data['user_id']\n                            );\n                        }\n                    }\n                }\n            }\n\n            if (!empty($personalEmail)) {\n                api_mail_html(\n                    get_lang('VirtualSupport'),\n                    $personalEmail,\n                    get_lang('IncidentResentToVirtualSupport'),\n                    $helpDeskMessage\n                );\n            }\n\n            self::sendNotification(\n                $ticketId,\n                $titleCreated,\n                $helpDeskMessage\n            );\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Assign ticket to admin.\n     *\n     * @param int $ticketId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function assignTicketToUser(\n        $ticketId,\n        $userId\n    ) {\n        $ticketId = (int) $ticketId;\n        $userId = (int) $userId;\n\n        if (empty($ticketId)) {\n            return false;\n        }\n\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $ticket = self::get_ticket_detail_by_id($ticketId);\n\n        if ($ticket) {\n            $sql = \"UPDATE $table_support_tickets\n                    SET assigned_last_user = $userId\n                    WHERE id = $ticketId\";\n            Database::query($sql);\n\n            $table = Database::get_main_table(TABLE_TICKET_ASSIGNED_LOG);\n            $params = [\n                'ticket_id' => $ticketId,\n                'user_id' => $userId,\n                'sys_insert_user_id' => api_get_user_id(),\n                'assigned_date' => api_get_utc_datetime(),\n            ];\n            Database::insert($table, $params);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Insert message between Users and Admins.\n     *\n     * @param int    $ticketId\n     * @param string $subject\n     * @param string $content\n     * @param array  $fileAttachments\n     * @param int    $userId\n     * @param string $status\n     * @param bool   $sendConfirmation\n     *\n     * @return bool\n     */\n    public static function insertMessage(\n        $ticketId,\n        $subject,\n        $content,\n        $fileAttachments,\n        $userId,\n        $status = 'NOL',\n        $sendConfirmation = false\n    ) {\n        $ticketId = (int) $ticketId;\n        $userId = (int) $userId;\n        $table_support_messages = Database::get_main_table(TABLE_TICKET_MESSAGE);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        if ($sendConfirmation) {\n            $form = '<form action=\"ticket_details.php?ticket_id='.$ticketId.'\" id=\"confirmticket\" method=\"POST\" >\n                         <p>'.get_lang('TicketWasThisAnswerSatisfying').'</p>\n                         <button class=\"btn btn-primary responseyes\" name=\"response\" id=\"responseyes\" value=\"1\">'.get_lang('Yes').'</button>\n                         <button class=\"btn btn-danger responseno\" name=\"response\" id=\"responseno\" value=\"0\">'.get_lang('No').'</button>\n                     </form>';\n            $content .= $form;\n        }\n\n        $now = api_get_utc_datetime();\n\n        $params = [\n            'ticket_id' => $ticketId,\n            'subject' => $subject,\n            'message' => $content,\n            'ip_address' => api_get_real_ip(),\n            'sys_insert_user_id' => $userId,\n            'sys_insert_datetime' => $now,\n            'sys_lastedit_user_id' => $userId,\n            'sys_lastedit_datetime' => $now,\n            'status' => $status,\n        ];\n        $messageId = Database::insert($table_support_messages, $params);\n        if ($messageId) {\n            // update_total_message\n            $sql = \"UPDATE $table_support_tickets\n                    SET \n                        sys_lastedit_user_id = $userId,\n                        sys_lastedit_datetime = '$now',\n                        total_messages = (\n                            SELECT COUNT(*) as total_messages\n                            FROM $table_support_messages\n                            WHERE ticket_id = $ticketId\n                        )\n                    WHERE id = $ticketId \";\n            Database::query($sql);\n\n            if (is_array($fileAttachments)) {\n                foreach ($fileAttachments as $file_attach) {\n                    if ($file_attach['error'] == 0) {\n                        self::saveMessageAttachmentFile(\n                            $file_attach,\n                            $ticketId,\n                            $messageId\n                        );\n                    } else {\n                        if ($file_attach['error'] != UPLOAD_ERR_NO_FILE) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Attachment files when a message is sent.\n     *\n     * @param $file_attach\n     * @param $ticketId\n     * @param $message_id\n     *\n     * @return bool\n     */\n    public static function saveMessageAttachmentFile(\n        $file_attach,\n        $ticketId,\n        $message_id\n    ) {\n        $now = api_get_utc_datetime();\n        $userId = api_get_user_id();\n        $ticketId = intval($ticketId);\n        $new_file_name = add_ext_on_mime(\n            stripslashes($file_attach['name']),\n            $file_attach['type']\n        );\n        $table_support_message_attachments = Database::get_main_table(TABLE_TICKET_MESSAGE_ATTACHMENTS);\n        if (!filter_extension($new_file_name)) {\n            echo Display::return_message(\n                get_lang('UplUnableToSaveFileFilteredExtension'),\n                'error'\n            );\n        } else {\n            $result = api_upload_file('ticket_attachment', $file_attach, $ticketId);\n            if ($result) {\n                $safe_file_name = Database::escape_string($new_file_name);\n                $safe_new_file_name = Database::escape_string($result['path_to_save']);\n                $sql = \"INSERT INTO $table_support_message_attachments (\n                        filename,\n                        path,\n                        ticket_id,\n                        message_id,\n                        size,\n                        sys_insert_user_id,\n                        sys_insert_datetime,\n                        sys_lastedit_user_id,\n                        sys_lastedit_datetime\n                    ) VALUES (\n                        '$safe_file_name',\n                        '$safe_new_file_name',\n                        '$ticketId',\n                        '$message_id',\n                        '\".$file_attach['size'].\"',\n                        '$userId',\n                        '$now',\n                        '$userId',\n                        '$now'\n                    )\";\n                Database::query($sql);\n\n                return true;\n            }\n        }\n    }\n\n    /**\n     * Get tickets by userId.\n     *\n     * @param int $from\n     * @param int $number_of_items\n     * @param $column\n     * @param $direction\n     *\n     * @return array\n     */\n    public static function getTicketsByCurrentUser(\n        $from,\n        $number_of_items,\n        $column,\n        $direction\n    ) {\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(TABLE_TICKET_PRIORITY);\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n        $direction = !empty($direction) ? $direction : 'DESC';\n        $userId = api_get_user_id();\n        $userInfo = api_get_user_info($userId);\n\n        if (empty($userInfo)) {\n            return [];\n        }\n        $isAdmin = UserManager::is_admin($userId);\n\n        if (!isset($_GET['project_id'])) {\n            return [];\n        }\n\n        switch ($column) {\n            case 0:\n                $column = 'ticket_id';\n                break;\n            case 1:\n                $column = 'status_name';\n                break;\n            case 2:\n                $column = 'start_date';\n                break;\n            case 3:\n                $column = 'sys_lastedit_datetime';\n                break;\n            case 4:\n                $column = 'category_name';\n                break;\n            case 5:\n                $column = 'sys_insert_user_id';\n                break;\n            case 6:\n                $column = 'assigned_last_user';\n                break;\n            case 7:\n                $column = 'total_messages';\n                break;\n            case 8:\n                $column = 'subject';\n                break;\n            default:\n                $column = 'ticket_id';\n        }\n\n        $sql = \"SELECT DISTINCT \n                ticket.*,\n                ticket.id ticket_id,\n                status.name AS status_name,\n                ticket.start_date,\n                ticket.sys_lastedit_datetime,\n                cat.name AS category_name,\n                priority.name AS priority_name,                           \n                ticket.total_messages AS total_messages,\n                ticket.message AS message,\n                ticket.subject AS subject,\n                ticket.assigned_last_user\n            FROM $table_support_tickets ticket \n            INNER JOIN $table_support_category cat\n            ON (cat.id = ticket.category_id)\n            INNER JOIN $table_support_priority priority\n            ON (ticket.priority_id = priority.id)\n            INNER JOIN $table_support_status status\n            ON (ticket.status_id = status.id)\n            WHERE 1=1                                \n        \";\n\n        $projectId = (int) $_GET['project_id'];\n        $userIsAllowInProject = self::userIsAllowInProject($userInfo, $projectId);\n\n        // Check if a role was set to the project\n        if ($userIsAllowInProject == false) {\n            $sql .= \" AND (ticket.assigned_last_user = $userId OR ticket.sys_insert_user_id = $userId )\";\n        }\n\n        // Search simple\n        if (isset($_GET['submit_simple']) && $_GET['keyword'] != '') {\n            $keyword = Database::escape_string(trim($_GET['keyword']));\n            $sql .= \" AND (\n                      ticket.id LIKE '%$keyword%' OR\n                      ticket.code LIKE '%$keyword%' OR\n                      ticket.subject LIKE '%$keyword%' OR\n                      ticket.message LIKE '%$keyword%' OR\n                      ticket.keyword LIKE '%$keyword%' OR\n                      ticket.source LIKE '%$keyword%' OR\n                      cat.name LIKE '%$keyword%' OR\n                      status.name LIKE '%$keyword%' OR\n                      priority.name LIKE '%$keyword%' OR\n                      ticket.personal_email LIKE '%$keyword%'                          \n            )\";\n        }\n\n        $keywords = [\n            'project_id' => 'ticket.project_id',\n            'keyword_category' => 'ticket.category_id',\n            'keyword_assigned_to' => 'ticket.assigned_last_user',\n            'keyword_source' => 'ticket.source ',\n            'keyword_status' => 'ticket.status_id',\n            'keyword_priority' => 'ticket.priority_id',\n        ];\n\n        foreach ($keywords as $keyword => $label) {\n            if (isset($_GET[$keyword])) {\n                $data = Database::escape_string(trim($_GET[$keyword]));\n                if (!empty($data)) {\n                    $sql .= \" AND $label = '$data' \";\n                }\n            }\n        }\n\n        // Search advanced\n        $keyword_start_date_start = isset($_GET['keyword_start_date_start']) ? Database::escape_string(trim($_GET['keyword_start_date_start'])) : '';\n        $keyword_start_date_end = isset($_GET['keyword_start_date_end']) ? Database::escape_string(trim($_GET['keyword_start_date_end'])) : '';\n        $keyword_course = isset($_GET['keyword_course']) ? Database::escape_string(trim($_GET['keyword_course'])) : '';\n        $keyword_range = !empty($keyword_start_date_start) && !empty($keyword_start_date_end);\n\n        if ($keyword_range == false && $keyword_start_date_start != '') {\n            $sql .= \" AND DATE_FORMAT(ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start' \";\n        }\n        if ($keyword_range && $keyword_start_date_start != '' && $keyword_start_date_end != '') {\n            $sql .= \" AND DATE_FORMAT(ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start'\n                      AND DATE_FORMAT(ticket.start_date,'%d/%m/%Y') <= '$keyword_start_date_end'\";\n        }\n\n        if ($keyword_course != '') {\n            $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n            $sql .= \" AND ticket.course_id IN ( \n                     SELECT id FROM $course_table\n                     WHERE (\n                        title LIKE '%$keyword_course%' OR \n                        code LIKE '%$keyword_course%' OR \n                        visual_code LIKE '%$keyword_course%'\n                     )\n            )\";\n        }\n        $sql .= \" ORDER BY $column $direction\";\n        $sql .= \" LIMIT $from, $number_of_items\";\n\n        $result = Database::query($sql);\n        $tickets = [];\n        $webPath = api_get_path(WEB_PATH);\n        while ($row = Database::fetch_assoc($result)) {\n            $userInfo = api_get_user_info($row['sys_insert_user_id']);\n            $hrefUser = $webPath.'main/admin/user_information.php?user_id='.$userInfo['user_id'];\n            $name = \"<a href='$hrefUser'> {$userInfo['complete_name_with_username']} </a>\";\n            if ($row['assigned_last_user'] != 0) {\n                $assignedUserInfo = api_get_user_info($row['assigned_last_user']);\n                if (!empty($assignedUserInfo)) {\n                    $hrefResp = $webPath.'main/admin/user_information.php?user_id='.$assignedUserInfo['user_id'];\n                    $row['assigned_last_user'] = \"<a href='$hrefResp'> {$assignedUserInfo['complete_name_with_username']} </a>\";\n                } else {\n                    $row['assigned_last_user'] = get_lang('UnknownUser');\n                }\n            } else {\n                if ($row['status_id'] !== self::STATUS_FORWARDED) {\n                    $row['assigned_last_user'] = '<span style=\"color:#ff0000;\">'.get_lang('ToBeAssigned').'</span>';\n                } else {\n                    $row['assigned_last_user'] = '<span style=\"color:#00ff00;\">'.get_lang('MessageResent').'</span>';\n                }\n            }\n\n            switch ($row['source']) {\n                case self::SOURCE_PRESENTIAL:\n                    $img_source = 'icons/32/user.png';\n                    break;\n                case self::SOURCE_EMAIL:\n                    $img_source = 'icons/32/mail.png';\n                    break;\n                case self::SOURCE_PHONE:\n                    $img_source = 'icons/32/event.png';\n                    break;\n                default:\n                    $img_source = 'icons/32/ticket.png';\n                    break;\n            }\n\n            $row['start_date'] = Display::dateToStringAgoAndLongDate($row['start_date']);\n            $row['sys_lastedit_datetime'] = Display::dateToStringAgoAndLongDate($row['sys_lastedit_datetime']);\n\n            $icon = Display::return_icon(\n                $img_source,\n                get_lang('Info'),\n                ['style' => 'margin-right: 10px; float: left;']\n            );\n\n            $icon .= '<a href=\"ticket_details.php?ticket_id='.$row['id'].'\">'.$row['code'].'</a>';\n\n            if ($isAdmin) {\n                $ticket = [\n                    $icon.' '.Security::remove_XSS($row['subject']),\n                    $row['status_name'],\n                    $row['start_date'],\n                    $row['sys_lastedit_datetime'],\n                    $row['category_name'],\n                    $name,\n                    $row['assigned_last_user'],\n                    $row['total_messages'],\n                ];\n            } else {\n                $ticket = [\n                    $icon.' '.Security::remove_XSS($row['subject']),\n                    $row['status_name'],\n                    $row['start_date'],\n                    $row['sys_lastedit_datetime'],\n                    $row['category_name'],\n                ];\n            }\n            if ($isAdmin) {\n                $ticket['0'] .= '&nbsp;&nbsp;<a  href=\"javascript:void(0)\" onclick=\"load_history_ticket(\\'div_'.$row['ticket_id'].'\\','.$row['ticket_id'].')\">\n\t\t\t\t\t<img onclick=\"load_course_list(\\'div_'.$row['ticket_id'].'\\','.$row['ticket_id'].')\" onmouseover=\"clear_course_list (\\'div_'.$row['ticket_id'].'\\')\" src=\"'.Display::returnIconPath('history.gif').'\" title=\"'.get_lang('Historial').'\" alt=\"'.get_lang('Historial').'\"/>\n\t\t\t\t\t<div class=\"blackboard_hide\" id=\"div_'.$row['ticket_id'].'\">&nbsp;&nbsp;</div>\n\t\t\t\t\t</a>&nbsp;&nbsp;';\n            }\n            $tickets[] = $ticket;\n        }\n\n        return $tickets;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getTotalTicketsCurrentUser()\n    {\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(TABLE_TICKET_PRIORITY);\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n\n        $userInfo = api_get_user_info();\n        if (empty($userInfo)) {\n            return 0;\n        }\n        $userId = $userInfo['id'];\n\n        if (!isset($_GET['project_id'])) {\n            return 0;\n        }\n\n        $sql = \"SELECT COUNT(ticket.id) AS total\n                FROM $table_support_tickets ticket\n                INNER JOIN $table_support_category cat\n                ON (cat.id = ticket.category_id)\n                INNER JOIN $table_support_priority priority\n                ON (ticket.priority_id = priority.id)\n                INNER JOIN $table_support_status status\n                ON (ticket.status_id = status.id)\n\t            WHERE 1 = 1\";\n\n        $projectId = (int) $_GET['project_id'];\n        $allowRoleList = self::getAllowedRolesFromProject($projectId);\n\n        // Check if a role was set to the project\n        if (!empty($allowRoleList) && is_array($allowRoleList)) {\n            if (!in_array($userInfo['status'], $allowRoleList)) {\n                $sql .= \" AND (ticket.assigned_last_user = $userId OR ticket.sys_insert_user_id = $userId )\";\n            }\n        } else {\n            if (!api_is_platform_admin()) {\n                $sql .= \" AND (ticket.assigned_last_user = $userId OR ticket.sys_insert_user_id = $userId )\";\n            }\n        }\n\n        // Search simple\n        if (isset($_GET['submit_simple'])) {\n            if ($_GET['keyword'] != '') {\n                $keyword = Database::escape_string(trim($_GET['keyword']));\n                $sql .= \" AND (\n                          ticket.code LIKE '%$keyword%' OR\n                          ticket.subject LIKE '%$keyword%' OR\n                          ticket.message LIKE '%$keyword%' OR\n                          ticket.keyword LIKE '%$keyword%' OR\n                          ticket.personal_email LIKE '%$keyword%' OR\n                          ticket.source LIKE '%$keyword%'\n                )\";\n            }\n        }\n\n        $keywords = [\n            'project_id' => 'ticket.project_id',\n            'keyword_category' => 'ticket.category_id',\n            'keyword_assigned_to' => 'ticket.assigned_last_user',\n            'keyword_source' => 'ticket.source',\n            'keyword_status' => 'ticket.status_id',\n            'keyword_priority' => 'ticket.priority_id',\n        ];\n\n        foreach ($keywords as $keyword => $sqlLabel) {\n            if (isset($_GET[$keyword])) {\n                $data = Database::escape_string(trim($_GET[$keyword]));\n                $sql .= \" AND $sqlLabel = '$data' \";\n            }\n        }\n\n        // Search advanced\n        $keyword_start_date_start = isset($_GET['keyword_start_date_start']) ? Database::escape_string(trim($_GET['keyword_start_date_start'])) : '';\n        $keyword_start_date_end = isset($_GET['keyword_start_date_end']) ? Database::escape_string(trim($_GET['keyword_start_date_end'])) : '';\n        $keyword_range = isset($_GET['keyword_dates']) ? Database::escape_string(trim($_GET['keyword_dates'])) : '';\n        $keyword_course = isset($_GET['keyword_course']) ? Database::escape_string(trim($_GET['keyword_course'])) : '';\n\n        if ($keyword_range == false && $keyword_start_date_start != '') {\n            $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') = '$keyword_start_date_start' \";\n        }\n        if ($keyword_range && $keyword_start_date_start != '' && $keyword_start_date_end != '') {\n            $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start'\n                      AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') <= '$keyword_start_date_end'\";\n        }\n        if ($keyword_course != '') {\n            $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n            $sql .= \" AND ticket.course_id IN (  \n                        SELECT id\n                        FROM $course_table\n                        WHERE (\n                            title LIKE '%$keyword_course%' OR \n                            code LIKE '%$keyword_course%' OR \n                            visual_code LIKE '%$keyword_course%'\n                        )\n                   ) \";\n        }\n\n        $res = Database::query($sql);\n        $obj = Database::fetch_object($res);\n\n        return (int) $obj->total;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return false|MessageAttachment\n     */\n    public static function getTicketMessageAttachment($id)\n    {\n        $id = (int) $id;\n        $em = Database::getManager();\n        $item = $em->getRepository('ChamiloTicketBundle:MessageAttachment')->find($id);\n        if ($item) {\n            return $item;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array\n     */\n    public static function getTicketMessageAttachmentsByTicketId($id)\n    {\n        $id = (int) $id;\n        $em = Database::getManager();\n        $items = $em->getRepository('ChamiloTicketBundle:MessageAttachment')->findBy(['ticket' => $id]);\n        if ($items) {\n            return $items;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $ticketId\n     *\n     * @return array\n     */\n    public static function get_ticket_detail_by_id($ticketId)\n    {\n        $ticketId = intval($ticketId);\n        $table_support_category = Database::get_main_table(TABLE_TICKET_CATEGORY);\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(TABLE_TICKET_PRIORITY);\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n        $table_support_messages = Database::get_main_table(TABLE_TICKET_MESSAGE);\n        $table_support_message_attachments = Database::get_main_table(TABLE_TICKET_MESSAGE_ATTACHMENTS);\n        $table_main_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        $sql = \"SELECT\n                    ticket.*, \n                    cat.name,\n                    status.name as status, \n                    priority.name priority\n                FROM $table_support_tickets ticket\n                INNER JOIN $table_support_category cat\n                ON (cat.id = ticket.category_id)\n                INNER JOIN $table_support_priority priority\n                ON (priority.id = ticket.priority_id)\n                INNER JOIN $table_support_status status\n                ON (status.id = ticket.status_id)\n\t\t        WHERE\n                    ticket.id = $ticketId \";\n        $result = Database::query($sql);\n        $ticket = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_assoc($result)) {\n                $row['course'] = null;\n                $row['start_date_from_db'] = $row['start_date'];\n                $row['start_date'] = api_convert_and_format_date(\n                    api_get_local_time($row['start_date']),\n                    DATE_TIME_FORMAT_LONG,\n                    api_get_timezone()\n                );\n                $row['end_date_from_db'] = $row['end_date'];\n                $row['end_date'] = api_convert_and_format_date(\n                    api_get_local_time($row['end_date']),\n                    DATE_TIME_FORMAT_LONG,\n                    api_get_timezone()\n                );\n                $row['sys_lastedit_datetime_from_db'] = $row['sys_lastedit_datetime'];\n                $row['sys_lastedit_datetime'] = api_convert_and_format_date(\n                    api_get_local_time($row['sys_lastedit_datetime']),\n                    DATE_TIME_FORMAT_LONG,\n                    api_get_timezone()\n                );\n                $row['course_url'] = null;\n                if ($row['course_id'] != 0) {\n                    $course = api_get_course_info_by_id($row['course_id']);\n                    $sessionId = 0;\n                    if ($row['session_id']) {\n                        $sessionId = $row['session_id'];\n                    }\n                    if ($course) {\n                        $row['course_url'] = '<a href=\"'.$course['course_public_url'].'?id_session='.$sessionId.'\">'.$course['name'].'</a>';\n                    }\n                }\n\n                $userInfo = api_get_user_info($row['sys_insert_user_id']);\n                $row['user_url'] = '<a href=\"'.api_get_path(WEB_PATH).'main/admin/user_information.php?user_id='.$userInfo['user_id'].'\">\n                '.$userInfo['complete_name'].'</a>';\n                $ticket['usuario'] = $userInfo;\n                $ticket['ticket'] = $row;\n            }\n\n            $sql = \"SELECT *, message.id as message_id \n                    FROM $table_support_messages message \n                    INNER JOIN $table_main_user user\n                    ON (message.sys_insert_user_id = user.user_id)\n                    WHERE\n                        message.ticket_id = '$ticketId' \";\n            $result = Database::query($sql);\n            $ticket['messages'] = [];\n            $attach_icon = Display::return_icon('attachment.gif', '');\n            $webPath = api_get_path(WEB_CODE_PATH);\n            while ($row = Database::fetch_assoc($result)) {\n                $message = $row;\n                $message['admin'] = UserManager::is_admin($message['user_id']);\n                $message['user_info'] = api_get_user_info($message['user_id']);\n                $sql = \"SELECT *\n                        FROM $table_support_message_attachments\n                        WHERE\n                            message_id = \".$row['message_id'].\" AND\n                            ticket_id = $ticketId\";\n\n                $result_attach = Database::query($sql);\n                while ($row2 = Database::fetch_assoc($result_attach)) {\n                    $archiveURL = $webPath.'ticket/download.php?ticket_id='.$ticketId.'&id='.$row2['id'];\n                    $row2['attachment_link'] = $attach_icon.'&nbsp;<a href=\"'.$archiveURL.'\">'.$row2['filename'].'</a>&nbsp;('.$row2['size'].')';\n                    $message['attachments'][] = $row2;\n                }\n                $ticket['messages'][] = $message;\n            }\n        }\n\n        return $ticket;\n    }\n\n    /**\n     * @param int $ticketId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function update_message_status($ticketId, $userId)\n    {\n        $ticketId = intval($ticketId);\n        $userId = intval($userId);\n        $table_support_messages = Database::get_main_table(\n            TABLE_TICKET_MESSAGE\n        );\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n        $sql = \"UPDATE $table_support_messages\n                SET\n                    status = 'LEI',\n                    sys_lastedit_user_id ='\".api_get_user_id().\"',\n                    sys_lastedit_datetime ='\".$now.\"'\n                WHERE ticket_id ='$ticketId' \";\n\n        if (api_is_platform_admin()) {\n            $sql .= \" AND sys_insert_user_id = '$userId'\";\n        } else {\n            $sql .= \" AND sys_insert_user_id != '$userId'\";\n        }\n        $result = Database::query($sql);\n        if (Database::affected_rows($result) > 0) {\n            Database::query(\n                \"UPDATE $table_support_tickets SET\n                    status_id = '\".self::STATUS_PENDING.\"'\n                 WHERE id ='$ticketId' AND status_id = '\".self::STATUS_NEW.\"'\"\n            );\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Send notification to a user through the internal messaging system.\n     *\n     * @param int    $ticketId\n     * @param string $title\n     * @param string $message\n     * @param int    $onlyToUserId\n     *\n     * @return bool\n     */\n    public static function sendNotification($ticketId, $title, $message, $onlyToUserId = 0)\n    {\n        $ticketInfo = self::get_ticket_detail_by_id($ticketId);\n\n        if (empty($ticketInfo)) {\n            return false;\n        }\n\n        $assignedUserInfo = api_get_user_info($ticketInfo['ticket']['assigned_last_user']);\n        $requestUserInfo = $ticketInfo['usuario'];\n        $ticketCode = $ticketInfo['ticket']['code'];\n        $status = $ticketInfo['ticket']['status'];\n        $priority = $ticketInfo['ticket']['priority'];\n\n        // Subject\n        $titleEmail = \"[$ticketCode] $title\";\n\n        // Content\n        $href = api_get_path(WEB_CODE_PATH).'/ticket/ticket_details.php?ticket_id='.$ticketId;\n        $ticketUrl = Display::url($ticketCode, $href);\n        $messageEmail = get_lang('TicketNum').\": $ticketUrl <br />\";\n        $messageEmail .= get_lang('Status').\": $status <br />\";\n        $messageEmail .= get_lang('Priority').\": $priority <br />\";\n        $messageEmail .= '<hr /><br />';\n        $messageEmail .= $message;\n        $currentUserId = api_get_user_id();\n        $attachmentList = [];\n        $attachments = self::getTicketMessageAttachmentsByTicketId($ticketId);\n        if (!empty($attachments)) {\n            /** @var MessageAttachment $attachment */\n            foreach ($attachments as $attachment) {\n                $file = api_get_uploaded_file(\n                    'ticket_attachment',\n                    $ticketId,\n                    $attachment->getPath()\n                );\n                if (!empty($file)) {\n                    $attachmentList[] = [\n                        'tmp_name' => api_get_uploaded_file(\n                            'ticket_attachment',\n                            $ticketId,\n                            $attachment->getPath()\n                        ),\n                        'size' => $attachment->getSize(),\n                        'name' => $attachment->getFilename(),\n                        'error' => 0,\n                    ];\n                }\n            }\n        }\n\n        if (!empty($onlyToUserId)) {\n            // Send only to specific user\n            if ($currentUserId != $onlyToUserId) {\n                MessageManager::send_message_simple(\n                    $onlyToUserId,\n                    $titleEmail,\n                    $messageEmail,\n                    0,\n                    false,\n                    false,\n                    [],\n                    false,\n                    $attachmentList\n                );\n            }\n        } else {\n            // Send to assigned user and to author\n            if ($requestUserInfo && $currentUserId != $requestUserInfo['id']) {\n                MessageManager::send_message_simple(\n                    $requestUserInfo['id'],\n                    $titleEmail,\n                    $messageEmail,\n                    0,\n                    false,\n                    false,\n                    [],\n                    false,\n                    $attachmentList\n                );\n            }\n\n            if ($assignedUserInfo &&\n                $requestUserInfo['id'] != $assignedUserInfo['id'] &&\n                $currentUserId != $assignedUserInfo['id']\n            ) {\n                MessageManager::send_message_simple(\n                    $assignedUserInfo['id'],\n                    $titleEmail,\n                    $messageEmail,\n                    0,\n                    false,\n                    false,\n                    [],\n                    false,\n                    $attachmentList\n                );\n            }\n        }\n    }\n\n    /**\n     * @param array $params\n     * @param int   $ticketId\n     * @param int   $userId\n     *\n     * @return bool\n     */\n    public static function updateTicket(\n        $params,\n        $ticketId,\n        $userId\n    ) {\n        $now = api_get_utc_datetime();\n        $table = Database::get_main_table(TABLE_TICKET_TICKET);\n        $newParams = [\n            'priority_id' => isset($params['priority_id']) ? (int) $params['priority_id'] : '',\n            'status_id' => isset($params['status_id']) ? (int) $params['status_id'] : '',\n            'sys_lastedit_user_id' => (int) $userId,\n            'sys_lastedit_datetime' => $now,\n        ];\n        Database::update($table, $newParams, ['id = ? ' => $ticketId]);\n\n        return true;\n    }\n\n    /**\n     * @param int $status_id\n     * @param int $ticketId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function update_ticket_status(\n        $status_id,\n        $ticketId,\n        $userId\n    ) {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n\n        $ticketId = intval($ticketId);\n        $status_id = intval($status_id);\n        $userId = intval($userId);\n\n        $now = api_get_utc_datetime();\n        $sql = \"UPDATE $table_support_tickets\n                SET\n                    status_id = '$status_id',\n                    sys_lastedit_user_id ='$userId',\n                    sys_lastedit_datetime ='\".$now.\"'\n                WHERE id ='$ticketId'\";\n        $result = Database::query($sql);\n\n        if (Database::affected_rows($result) > 0) {\n            self::sendNotification(\n                $ticketId,\n                get_lang('TicketUpdated'),\n                get_lang('TicketUpdated')\n            );\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @return mixed\n     */\n    public static function getNumberOfMessages()\n    {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_messages = Database::get_main_table(\n            TABLE_TICKET_MESSAGE\n        );\n        $table_main_user = Database::get_main_table(TABLE_MAIN_USER);\n        $table_main_admin = Database::get_main_table(TABLE_MAIN_ADMIN);\n        $user_info = api_get_user_info();\n        $userId = $user_info['user_id'];\n        $sql = \"SELECT COUNT(DISTINCT ticket.id) AS unread\n                FROM $table_support_tickets ticket,\n                $table_support_messages message ,\n                $table_main_user user\n                WHERE\n                    ticket.id = message.ticket_id AND\n                    message.status = 'NOL' AND\n                    user.user_id = message.sys_insert_user_id \";\n        if (!api_is_platform_admin()) {\n            $sql .= \" AND ticket.request_user = '$userId'\n                      AND user_id IN (SELECT user_id FROM $table_main_admin)  \";\n        } else {\n            $sql .= \" AND user_id NOT IN (SELECT user_id FROM $table_main_admin)\n                      AND ticket.status_id != '\".self::STATUS_FORWARDED.\"'\";\n        }\n        $sql .= \"  AND ticket.project_id != '' \";\n        $res = Database::query($sql);\n        $obj = Database::fetch_object($res);\n\n        return $obj->unread;\n    }\n\n    /**\n     * @param int $ticketId\n     * @param int $userId\n     */\n    public static function send_alert($ticketId, $userId)\n    {\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n\n        $ticketId = (int) $ticketId;\n        $userId = (int) $userId;\n\n        $sql = \"UPDATE $table_support_tickets SET\n                  priority_id = '\".self::PRIORITY_HIGH.\"',\n                  sys_lastedit_user_id = $userId,\n                  sys_lastedit_datetime = '$now'\n                WHERE id = $ticketId\";\n        Database::query($sql);\n    }\n\n    /**\n     * @param int $ticketId\n     * @param int $userId\n     */\n    public static function close_ticket($ticketId, $userId)\n    {\n        $ticketId = intval($ticketId);\n        $userId = intval($userId);\n\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n        $sql = \"UPDATE $table_support_tickets SET\n                    status_id = '\".self::STATUS_CLOSE.\"',\n                    sys_lastedit_user_id ='$userId',\n                    sys_lastedit_datetime ='\".$now.\"',\n                    end_date ='$now'\n                WHERE id ='$ticketId'\";\n        Database::query($sql);\n\n        self::sendNotification(\n            $ticketId,\n            get_lang('TicketClosed'),\n            get_lang('TicketClosed')\n        );\n    }\n\n    /**\n     * Close old tickets.\n     */\n    public static function close_old_tickets()\n    {\n        $table = Database::get_main_table(TABLE_TICKET_TICKET);\n        $now = api_get_utc_datetime();\n        $userId = api_get_user_id();\n        $sql = \"UPDATE $table\n                SET\n                    status_id = '\".self::STATUS_CLOSE.\"',\n                    sys_lastedit_user_id ='$userId',\n                    sys_lastedit_datetime ='$now',\n                    end_date = '$now'\n                WHERE\n                    DATEDIFF('$now', sys_lastedit_datetime) > 7 AND\n                    status_id != '\".self::STATUS_CLOSE.\"' AND\n                    status_id != '\".self::STATUS_NEW.\"' AND\n                    status_id != '\".self::STATUS_FORWARDED.\"'\";\n        Database::query($sql);\n    }\n\n    /**\n     * @param int $ticketId\n     *\n     * @return array\n     */\n    public static function get_assign_log($ticketId)\n    {\n        $table = Database::get_main_table(TABLE_TICKET_ASSIGNED_LOG);\n        $ticketId = intval($ticketId);\n\n        $sql = \"SELECT * FROM $table\n                WHERE ticket_id = $ticketId\n                ORDER BY assigned_date DESC\";\n        $result = Database::query($sql);\n        $history = [];\n        $webpath = api_get_path(WEB_PATH);\n        while ($row = Database::fetch_assoc($result)) {\n            if ($row['user_id'] != 0) {\n                $assignuser = api_get_user_info($row['user_id']);\n                $row['assignuser'] = '<a href=\"'.$webpath.'main/admin/user_information.php?user_id='.$row['user_id'].'\"  target=\"_blank\">'.\n                $assignuser['username'].'</a>';\n            } else {\n                $row['assignuser'] = get_lang('Unassign');\n            }\n            $row['assigned_date'] = Display::dateToStringAgoAndLongDate($row['assigned_date']);\n            $insertuser = api_get_user_info($row['sys_insert_user_id']);\n            $row['insertuser'] = '<a href=\"'.$webpath.'main/admin/user_information.php?user_id='.$row['sys_insert_user_id'].'\"  target=\"_blank\">'.\n                $insertuser['username'].'</a>';\n            $history[] = $row;\n        }\n\n        return $history;\n    }\n\n    /**\n     * @param $from\n     * @param $number_of_items\n     * @param $column\n     * @param $direction\n     * @param null $userId\n     *\n     * @return array\n     */\n    public static function export_tickets_by_user_id(\n        $from,\n        $number_of_items,\n        $column,\n        $direction,\n        $userId = null\n    ) {\n        $from = intval($from);\n        $number_of_items = intval($number_of_items);\n        $table_support_category = Database::get_main_table(\n            TABLE_TICKET_CATEGORY\n        );\n        $table_support_tickets = Database::get_main_table(TABLE_TICKET_TICKET);\n        $table_support_priority = Database::get_main_table(\n            TABLE_TICKET_PRIORITY\n        );\n        $table_support_status = Database::get_main_table(TABLE_TICKET_STATUS);\n        $table_support_messages = Database::get_main_table(\n            TABLE_TICKET_MESSAGE\n        );\n        $table_main_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        if (is_null($direction)) {\n            $direction = \"DESC\";\n        }\n        if (is_null($userId) || $userId == 0) {\n            $userId = api_get_user_id();\n        }\n\n        $sql = \"SELECT\n                    ticket.code,\n                    ticket.sys_insert_datetime,\n                    ticket.sys_lastedit_datetime,\n                    cat.name as category,\n                    CONCAT(user.lastname,' ', user.firstname) AS fullname,\n                    status.name as status,\n                    ticket.total_messages as messages,\n                    ticket.assigned_last_user as responsable\n                FROM $table_support_tickets ticket,\n                $table_support_category cat ,\n                $table_support_priority priority,\n                $table_support_status status ,\n                $table_main_user user\n                WHERE\n                    cat.id = ticket.category_id\n                    AND ticket.priority_id = priority.id\n                    AND ticket.status_id = status.id\n                    AND user.user_id = ticket.request_user \";\n        // Search simple\n        if (isset($_GET['submit_simple'])) {\n            if ($_GET['keyword'] !== '') {\n                $keyword = Database::escape_string(trim($_GET['keyword']));\n                $sql .= \" AND (ticket.code = '$keyword'\n                          OR user.firstname LIKE '%$keyword%'\n                          OR user.lastname LIKE '%$keyword%'\n                          OR concat(user.firstname,' ',user.lastname) LIKE '%$keyword%'\n                          OR concat(user.lastname,' ',user.firstname) LIKE '%$keyword%'\n                          OR user.username LIKE '%$keyword%')  \";\n            }\n        }\n        // Search advanced\n        if (isset($_GET['submit_advanced'])) {\n            $keyword_category = Database::escape_string(\n                trim($_GET['keyword_category'])\n            );\n            $keyword_request_user = Database::escape_string(\n                trim($_GET['keyword_request_user'])\n            );\n            $keywordAssignedTo = (int) $_GET['keyword_assigned_to'];\n            $keyword_start_date_start = Database::escape_string(\n                trim($_GET['keyword_start_date_start'])\n            );\n            $keyword_start_date_end = Database::escape_string(\n                trim($_GET['keyword_start_date_end'])\n            );\n            $keyword_status = Database::escape_string(\n                trim($_GET['keyword_status'])\n            );\n            $keyword_source = Database::escape_string(\n                trim($_GET['keyword_source'])\n            );\n            $keyword_priority = Database::escape_string(\n                trim($_GET['keyword_priority'])\n            );\n            $keyword_range = Database::escape_string(\n                trim($_GET['keyword_dates'])\n            );\n            $keyword_unread = Database::escape_string(\n                trim($_GET['keyword_unread'])\n            );\n            $keyword_course = Database::escape_string(\n                trim($_GET['keyword_course'])\n            );\n\n            if ($keyword_category != '') {\n                $sql .= \" AND ticket.category_id = '$keyword_category'  \";\n            }\n            if ($keyword_request_user != '') {\n                $sql .= \" AND (ticket.request_user = '$keyword_request_user'\n                          OR user.firstname LIKE '%$keyword_request_user%'\n                          OR user.official_code LIKE '%$keyword_request_user%'\n                          OR user.lastname LIKE '%$keyword_request_user%'\n                          OR concat(user.firstname,' ',user.lastname) LIKE '%$keyword_request_user%'\n                          OR concat(user.lastname,' ',user.firstname) LIKE '%$keyword_request_user%'\n                          OR user.username LIKE '%$keyword_request_user%') \";\n            }\n            if (!empty($keywordAssignedTo)) {\n                $sql .= \" AND ticket.assigned_last_user = $keywordAssignedTo \";\n            }\n            if ($keyword_status != '') {\n                $sql .= \" AND ticket.status_id = '$keyword_status'  \";\n            }\n            if ($keyword_range == '' && $keyword_start_date_start != '') {\n                $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') = '$keyword_start_date_start' \";\n            }\n            if ($keyword_range == '1' && $keyword_start_date_start != '' && $keyword_start_date_end != '') {\n                $sql .= \" AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') >= '$keyword_start_date_start'\n                          AND DATE_FORMAT( ticket.start_date,'%d/%m/%Y') <= '$keyword_start_date_end'\";\n            }\n            if ($keyword_priority != '') {\n                $sql .= \" AND ticket.priority_id = '$keyword_priority'  \";\n            }\n            if ($keyword_source != '') {\n                $sql .= \" AND ticket.source = '$keyword_source' \";\n            }\n            if ($keyword_priority != '') {\n                $sql .= \" AND ticket.priority_id = '$keyword_priority' \";\n            }\n            if ($keyword_course != '') {\n                $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n                $sql .= \" AND ticket.course_id IN ( \";\n                $sql .= \"SELECT id\n                         FROM $course_table\n                         WHERE (title LIKE '%$keyword_course%'\n                         OR code LIKE '%$keyword_course%'\n                         OR visual_code LIKE '%$keyword_course%' )) \";\n            }\n            if ($keyword_unread == 'yes') {\n                $sql .= \" AND ticket.id IN (\n                          SELECT ticket.id\n                          FROM $table_support_tickets ticket,\n                          $table_support_messages message,\n                          $table_main_user user\n                          WHERE ticket.id = message.ticket_id\n                          AND message.status = 'NOL'\n                          AND message.sys_insert_user_id = user.user_id\n                          AND user.status != 1   AND ticket.status_id != '\".self::STATUS_FORWARDED.\"'\n                          GROUP BY ticket.id)\";\n            } else {\n                if ($keyword_unread == 'no') {\n                    $sql .= \" AND ticket.id NOT IN (\n                              SELECT ticket.id\n                              FROM  $table_support_tickets ticket,\n                              $table_support_messages message,\n                              $table_main_user user\n                              WHERE ticket.id = message.ticket_id\n                              AND message.status = 'NOL'\n                              AND message.sys_insert_user_id = user.user_id\n                              AND user.status != 1\n                              AND ticket.status_id != '\".self::STATUS_FORWARDED.\"'\n                             GROUP BY ticket.id)\";\n                }\n            }\n        }\n\n        $sql .= \" LIMIT $from,$number_of_items\";\n\n        $result = Database::query($sql);\n        $tickets[0] = [\n            utf8_decode('Ticket#'),\n            utf8_decode('Fecha'),\n            utf8_decode('Fecha Edicion'),\n            utf8_decode('Categoria'),\n            utf8_decode('Usuario'),\n            utf8_decode('Estado'),\n            utf8_decode('Mensajes'),\n            utf8_decode('Responsable'),\n            utf8_decode('Programa'),\n        ];\n\n        while ($row = Database::fetch_assoc($result)) {\n            if ($row['responsable'] != 0) {\n                $row['responsable'] = api_get_user_info($row['responsable']);\n                $row['responsable'] = $row['responsable']['firstname'].' '.$row['responsable']['lastname'];\n            }\n            $row['sys_insert_datetime'] = api_format_date(\n                $row['sys_insert_datetime'],\n                '%d/%m/%y - %I:%M:%S %p'\n            );\n            $row['sys_lastedit_datetime'] = api_format_date(\n                $row['sys_lastedit_datetime'],\n                '%d/%m/%y - %I:%M:%S %p'\n            );\n            $row['category'] = utf8_decode($row['category']);\n            $row['programa'] = utf8_decode($row['fullname']);\n            $row['fullname'] = utf8_decode($row['fullname']);\n            $row['responsable'] = utf8_decode($row['responsable']);\n            $tickets[] = $row;\n        }\n\n        return $tickets;\n    }\n\n    /**\n     * @param string $url\n     * @param int    $projectId\n     *\n     * @return FormValidator\n     */\n    public static function getCategoryForm($url, $projectId)\n    {\n        $form = new FormValidator('category', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addHidden('project_id', $projectId);\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getStatusList()\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->findAll();\n\n        $list = [];\n        /** @var Status $row */\n        foreach ($items as $row) {\n            $list[$row->getId()] = $row->getName();\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getTicketsFromCriteria($criteria)\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Ticket')->findBy($criteria);\n\n        $list = [];\n        /** @var Ticket $row */\n        foreach ($items as $row) {\n            $list[$row->getId()] = $row->getCode();\n        }\n\n        return $list;\n    }\n\n    /**\n     * @param string $code\n     *\n     * @return int\n     */\n    public static function getStatusIdFromCode($code)\n    {\n        $item = Database::getManager()\n            ->getRepository('ChamiloTicketBundle:Status')\n            ->findOneBy(['code' => $code])\n        ;\n        if ($item) {\n            return $item->getId();\n        }\n\n        return 0;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getPriorityList()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->findAll();\n\n        $list = [];\n        /** @var Priority $row */\n        foreach ($projects as $row) {\n            $list[$row->getId()] = $row->getName();\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getProjects()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Project')->findAll();\n\n        $list = [];\n        /** @var Project $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => $row->getName(),\n                '2' => $row->getDescription(),\n                '3' => $row->getId(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getProjectsSimple()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Project')->findAll();\n\n        $list = [];\n        /** @var Project $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => Display::url(\n                    $row->getName(),\n                    api_get_path(WEB_CODE_PATH).'ticket/tickets.php?project_id='.$row->getId()\n                ),\n                '2' => $row->getDescription(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getProjectsCount()\n    {\n        $count = Database::getManager()->getRepository('ChamiloTicketBundle:Project')->createQueryBuilder('p')\n            ->select('COUNT(p.id)')\n            ->getQuery()\n            ->getSingleScalarResult();\n\n        return $count;\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addProject($params)\n    {\n        $project = new Project();\n        $project->setName($params['name']);\n        $project->setDescription($params['description']);\n        $project->setInsertUserId(api_get_user_id());\n        Database::getManager()->persist($project);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param $id\n     *\n     * @return Project\n     */\n    public static function getProject($id)\n    {\n        return Database::getManager()->getRepository('ChamiloTicketBundle:Project')->find($id);\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updateProject($id, $params)\n    {\n        $project = self::getProject($id);\n        $project->setName($params['name']);\n        $project->setDescription($params['description']);\n        $project->setLastEditDateTime(new DateTime($params['sys_lastedit_datetime']));\n        $project->setLastEditUserId($params['sys_lastedit_user_id']);\n\n        Database::getManager()->merge($project);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param int $id\n     */\n    public static function deleteProject($id)\n    {\n        $project = self::getProject($id);\n        if ($project) {\n            Database::getManager()->remove($project);\n            Database::getManager()->flush();\n        }\n    }\n\n    /**\n     * @param string $url\n     *\n     * @return FormValidator\n     */\n    public static function getProjectForm($url)\n    {\n        $form = new FormValidator('project', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getStatusAdminList()\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->findAll();\n\n        $list = [];\n        /** @var Status $row */\n        foreach ($items as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                'code' => $row->getCode(),\n                '0' => $row->getId(),\n                '1' => $row->getName(),\n                '2' => $row->getDescription(),\n                '3' => $row->getId(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getStatusSimple()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->findAll();\n\n        $list = [];\n        /** @var Project $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => Display::url($row->getName()),\n                '2' => $row->getDescription(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getStatusCount()\n    {\n        $count = Database::getManager()->getRepository('ChamiloTicketBundle:Status')->createQueryBuilder('p')\n            ->select('COUNT(p.id)')\n            ->getQuery()\n            ->getSingleScalarResult();\n\n        return $count;\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addStatus($params)\n    {\n        $item = new Status();\n        $item->setCode(URLify::filter($params['name']));\n        $item->setName($params['name']);\n        $item->setDescription($params['description']);\n\n        Database::getManager()->persist($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param $id\n     *\n     * @return Project\n     */\n    public static function getStatus($id)\n    {\n        return Database::getManager()->getRepository('ChamiloTicketBundle:Status')->find($id);\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updateStatus($id, $params)\n    {\n        $item = self::getStatus($id);\n        $item->setName($params['name']);\n        $item->setDescription($params['description']);\n\n        Database::getManager()->merge($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param int $id\n     */\n    public static function deleteStatus($id)\n    {\n        $item = self::getStatus($id);\n        if ($item) {\n            Database::getManager()->remove($item);\n            Database::getManager()->flush();\n        }\n    }\n\n    /**\n     * @param string $url\n     *\n     * @return FormValidator\n     */\n    public static function getStatusForm($url)\n    {\n        $form = new FormValidator('status', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getPriorityAdminList()\n    {\n        $items = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->findAll();\n\n        $list = [];\n        /** @var Status $row */\n        foreach ($items as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                'code' => $row->getCode(),\n                '0' => $row->getId(),\n                '1' => $row->getName(),\n                '2' => $row->getDescription(),\n                '3' => $row->getId(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getPrioritySimple()\n    {\n        $projects = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->findAll();\n\n        $list = [];\n        /** @var Priority $row */\n        foreach ($projects as $row) {\n            $list[] = [\n                'id' => $row->getId(),\n                '0' => $row->getId(),\n                '1' => Display::url($row->getName()),\n                '2' => $row->getDescription(),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * @return int\n     */\n    public static function getPriorityCount()\n    {\n        $count = Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->createQueryBuilder('p')\n            ->select('COUNT(p.id)')\n            ->getQuery()\n            ->getSingleScalarResult();\n\n        return $count;\n    }\n\n    /**\n     * @param array $params\n     */\n    public static function addPriority($params)\n    {\n        $item = new Priority();\n        $item\n            ->setCode(URLify::filter($params['name']))\n            ->setName($params['name'])\n            ->setDescription($params['description'])\n            ->setColor('')\n            ->setInsertUserId(api_get_user_id())\n            ->setUrgency('')\n        ;\n\n        Database::getManager()->persist($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param $id\n     *\n     * @return Priority\n     */\n    public static function getPriority($id)\n    {\n        return Database::getManager()->getRepository('ChamiloTicketBundle:Priority')->find($id);\n    }\n\n    /**\n     * @param int   $id\n     * @param array $params\n     */\n    public static function updatePriority($id, $params)\n    {\n        $item = self::getPriority($id);\n        $item->setName($params['name']);\n        $item->setDescription($params['description']);\n\n        Database::getManager()->merge($item);\n        Database::getManager()->flush();\n    }\n\n    /**\n     * @param int $id\n     */\n    public static function deletePriority($id)\n    {\n        $item = self::getPriority($id);\n        if ($item) {\n            Database::getManager()->remove($item);\n            Database::getManager()->flush();\n        }\n    }\n\n    /**\n     * @param string $url\n     *\n     * @return FormValidator\n     */\n    public static function getPriorityForm($url)\n    {\n        $form = new FormValidator('priority', 'post', $url);\n        $form->addText('name', get_lang('Name'));\n        $form->addHtmlEditor('description', get_lang('Description'));\n        $form->addButtonUpdate(get_lang('Save'));\n\n        return $form;\n    }\n\n    /**\n     * Returns a list of menu elements for the tickets system's configuration.\n     *\n     * @param string $exclude The element to exclude from the list\n     *\n     * @return array\n     */\n    public static function getSettingsMenuItems($exclude = null)\n    {\n        $items = [];\n        $project = [\n            'icon' => 'project.png',\n            'url' => 'projects.php',\n            'content' => get_lang('Projects'),\n        ];\n        $status = [\n            'icon' => 'check-circle.png',\n            'url' => 'status.php',\n            'content' => get_lang('Status'),\n        ];\n        $priority = [\n            'icon' => 'tickets_urgent.png',\n            'url' => 'priorities.php',\n            'content' => get_lang('Priority'),\n        ];\n        switch ($exclude) {\n            case 'project':\n                $items = [$status, $priority];\n                break;\n            case 'status':\n                $items = [$project, $priority];\n                break;\n            case 'priority':\n                $items = [$project, $status];\n                break;\n            default:\n                $items = [$project, $status, $priority];\n                break;\n        }\n\n        return $items;\n    }\n\n    /**\n     * Returns a list of strings representing the default statuses.\n     *\n     * @return array\n     */\n    public static function getDefaultStatusList()\n    {\n        return [\n            self::STATUS_NEW,\n            self::STATUS_PENDING,\n            self::STATUS_UNCONFIRMED,\n            self::STATUS_CLOSE,\n            self::STATUS_FORWARDED,\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public static function getDefaultPriorityList()\n    {\n        return [\n            self::PRIORITY_NORMAL,\n            self::PRIORITY_HIGH,\n            self::PRIORITY_LOW,\n            self::STATUS_CLOSE,\n            self::STATUS_FORWARDED,\n        ];\n    }\n\n    /**\n     * Deletes the user from all the ticket system.\n     *\n     * @param int $userId\n     */\n    public static function deleteUserFromTicketSystem($userId)\n    {\n        $userId = (int) $userId;\n        $schema = Database::getManager()->getConnection()->getSchemaManager();\n\n        if ($schema->tablesExist('ticket_assigned_log')) {\n            $sql = \"UPDATE ticket_assigned_log SET user_id = NULL WHERE user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_assigned_log SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_ticket')) {\n            $sql = \"UPDATE ticket_ticket SET assigned_last_user = NULL WHERE assigned_last_user = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_ticket SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_ticket SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_category')) {\n            $sql = \"UPDATE ticket_category SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_category SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_category_rel_user')) {\n            $sql = \"DELETE FROM ticket_category_rel_user WHERE user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_message')) {\n            $sql = \"UPDATE ticket_message SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_message SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_message_attachments')) {\n            $sql = \"UPDATE ticket_message_attachments SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_message_attachments SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_priority')) {\n            $sql = \"UPDATE ticket_priority SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_priority SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n\n        if ($schema->tablesExist('ticket_project')) {\n            $sql = \"UPDATE ticket_project SET sys_insert_user_id = NULL WHERE sys_insert_user_id = $userId\";\n            Database::query($sql);\n\n            $sql = \"UPDATE ticket_project SET sys_lastedit_user_id = NULL WHERE sys_lastedit_user_id = $userId\";\n            Database::query($sql);\n        }\n    }\n\n    /**\n     * @param array $userInfo\n     * @param int   $projectId\n     *\n     * @return bool\n     */\n    public static function userIsAllowInProject($userInfo, $projectId)\n    {\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        $allowRoleList = self::getAllowedRolesFromProject($projectId);\n\n        // Check if a role was set to the project\n        // Project 1 is considered the default and is accessible to all users\n        if (!empty($allowRoleList) && is_array($allowRoleList)) {\n            if (in_array($userInfo['status'], $allowRoleList)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $projectId\n     *\n     * @todo load from database instead of configuration.php setting\n     *\n     * @return array\n     */\n    public static function getAllowedRolesFromProject($projectId)\n    {\n        $options = api_get_configuration_value('ticket_project_user_roles');\n        if ($options) {\n            if (isset($options['permissions'][$projectId])) {\n                return $options['permissions'][$projectId];\n            }\n        }\n\n        return [];\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * @package chamilo.messages\n */\n\n/**\n * This script shows a compose area (wysiwyg editor if supported, otherwise\n * a simple textarea) where the user can type a message.\n * There are three modes\n * - standard: type a message, select a user to send it to, press send\n * - reply on message (when pressing reply when viewing a message)\n * - send to specific user (when pressing send message in the who is online list).\n */\n$cidReset = true;\nrequire_once __DIR__.'/../inc/global.inc.php';\n\napi_block_anonymous_users();\n\nif (api_get_setting('allow_message_tool') !== 'true') {\n    api_not_allowed(true);\n}\n\n$logInfo = [\n    'tool' => 'Messages',\n    'tool_id' => 0,\n    'tool_id_detail' => 0,\n    'action' => 'new_message',\n    'action_details' => isset($_GET['re_id']) ? 're_id' : '',\n    'current_id' => isset($_GET['re_id']) ? (int) $_GET['re_id'] : 0,\n    'info' => '',\n];\nEvent::registerLog($logInfo);\n\n$allowSocial = api_get_setting('allow_social_tool') == 'true';\n$nameTools = api_xml_http_response_encode(get_lang('Messages'));\n\n$htmlHeadXtra[] = '<script>\nvar counter_image = 1;\nfunction add_image_form() {\n    // Multiple filepaths for image form\n    var filepaths = document.getElementById(\"file_uploads\");\n    if (document.getElementById(\"filepath_\"+counter_image)) {\n        counter_image = counter_image + 1;\n    }  else {\n        counter_image = counter_image;\n    }\n    var elem1 = document.createElement(\"div\");\n    elem1.setAttribute(\"id\",\"filepath_\"+counter_image);\n    filepaths.appendChild(elem1);\n    id_elem1 = \"filepath_\"+counter_image;\n    id_elem1 = \"\\'\"+id_elem1+\"\\'\";\n    document.getElementById(\"filepath_\"+counter_image).innerHTML = \"<div class=\\\"form-group\\\" ><label class=\\\"col-sm-4\\\">'.get_lang('FilesAttachment').'</label><input class=\\\"col-sm-8\\\" type=\\\"file\\\" name=\\\"attach_\"+counter_image+\"\\\" /></div><div class=\\\"form-group\\\" ><label class=\\\"col-sm-4\\\">'.get_lang('Description').'</label><div class=\\\"col-sm-8\\\"><input style=\\\"width:100%\\\" type=\\\"text\\\" name=\\\"legend[]\\\" /></div></div>\";\n    if (filepaths.childNodes.length == 6) {\n        var link_attach = document.getElementById(\"link-more-attach\");\n        if (link_attach) {\n            link_attach.innerHTML=\"\";\n        }\n    }\n}\n</script>';\n$nameTools = get_lang('ComposeMessage');\n\n$tpl = new Template(get_lang('ComposeMessage'));\n\n/**\n * Shows the compose area + a list of users to select from.\n */\nfunction show_compose_to_any($tpl)\n{\n    $default['user_list'] = 0;\n    $html = manageForm($default, null, null, $tpl);\n\n    return $html;\n}\n\nfunction show_compose_reply_to_message($message_id, $receiver_id, $tpl)\n{\n    $table = Database::get_main_table(TABLE_MESSAGE);\n    $receiver_id = (int) $receiver_id;\n    $message_id = (int) $message_id;\n\n    $query = \"SELECT user_sender_id\n              FROM $table\n              WHERE user_receiver_id = \".$receiver_id.\" AND id = \".$message_id;\n    $result = Database::query($query);\n    $row = Database::fetch_array($result, 'ASSOC');\n    $userInfo = api_get_user_info($row['user_sender_id']);\n    if (empty($row['user_sender_id']) || empty($userInfo)) {\n        $html = get_lang('InvalidMessageId');\n\n        return $html;\n    }\n\n    $default['users'] = [$row['user_sender_id']];\n    $html = manageForm($default, null, $userInfo['complete_name_with_username'], $tpl);\n\n    return $html;\n}\n\nfunction show_compose_to_user($receiver_id, $tpl)\n{\n    $userInfo = api_get_user_info($receiver_id);\n    $html = get_lang('To').':&nbsp;<strong>'.$userInfo['complete_name'].'</strong>';\n    $default['title'] = api_xml_http_response_encode(get_lang('EnterTitle'));\n    $default['users'] = [$receiver_id];\n    $html .= manageForm($default, null, '', $tpl);\n\n    return $html;\n}\n\n/**\n * @param          $default\n * @param null     $select_from_user_list\n * @param string   $sent_to\n * @param Template $tpl\n *\n * @return string\n */\nfunction manageForm($default, $select_from_user_list = null, $sent_to = '', $tpl = null)\n{\n    $group_id = isset($_REQUEST['group_id']) ? (int) $_REQUEST['group_id'] : null;\n    $message_id = isset($_GET['message_id']) ? (int) $_GET['message_id'] : null;\n\n    $form = new FormValidator(\n        'compose_message',\n        null,\n        api_get_self(),\n        null,\n        ['enctype' => 'multipart/form-data']\n    );\n\n    if (empty($group_id)) {\n        if (isset($select_from_user_list)) {\n            $form->addText(\n                'id_text_name',\n                get_lang('SendMessageTo'),\n                true,\n                [\n                    'id' => 'id_text_name',\n                    'onkeyup' => 'send_request_and_search()',\n                    'autocomplete' => 'off',\n                ]\n            );\n            $form->addRule('id_text_name', get_lang('ThisFieldIsRequired'), 'required');\n            $form->addElement('html', '<div id=\"id_div_search\" style=\"padding:0px\" class=\"message-select-box\" >&nbsp;</div>');\n            $form->addElement('hidden', 'user_list', 0, ['id' => 'user_list']);\n        } else {\n            if (!empty($sent_to)) {\n                $form->addLabel(get_lang('SendMessageTo'), $sent_to);\n            }\n            if (empty($default['users'])) {\n                //fb select\n                $form->addElement(\n                    'select_ajax',\n                    'users',\n                    get_lang('SendMessageTo'),\n                    [],\n                    [\n                        'multiple' => 'multiple',\n                        'url' => api_get_path(WEB_AJAX_PATH).'message.ajax.php?a=find_users',\n                    ]\n                );\n            } else {\n                $form->addElement('hidden', 'hidden_user', $default['users'][0], ['id' => 'hidden_user']);\n            }\n        }\n    } else {\n        $userGroup = new UserGroup();\n        $group_info = $userGroup->get($group_id);\n\n        $form->addElement('label', get_lang('ToGroup'), api_xml_http_response_encode($group_info['name']));\n        $form->addElement('hidden', 'group_id', $group_id);\n        $form->addElement('hidden', 'parent_id', $message_id);\n    }\n\n    $form->addText('title', get_lang('Subject'), true);\n    $form->addHtmlEditor(\n        'content',\n        get_lang('Message'),\n        false,\n        false,\n        ['ToolbarSet' => 'Messages', 'Width' => '100%', 'Height' => '250']\n    );\n\n    if (isset($_GET['re_id'])) {\n        $message_reply_info = MessageManager::get_message_by_id($_GET['re_id']);\n        $default['title'] = get_lang('MailSubjectReplyShort').' '.Security::remove_XSS($message_reply_info['title']);\n        $form->addHidden('re_id', (int) $_GET['re_id']);\n        $form->addHidden('save_form', 'save_form');\n\n        // Adding reply mail\n        $user_reply_info = api_get_user_info($message_reply_info['user_sender_id']);\n        $default['content'] = '<p><br/></p>'.sprintf(\n            get_lang('XWroteY'),\n            $user_reply_info['complete_name'],\n            Security::filter_terms($message_reply_info['content'])\n        );\n    }\n\n    if (isset($_GET['forward_id'])) {\n        $forwardId = (int) $_GET['forward_id'];\n        $message_reply_info = MessageManager::get_message_by_id($forwardId);\n        $attachments = MessageManager::getAttachmentLinkList($forwardId);\n        if (!empty($attachments)) {\n            $fileListToString = !empty($attachments) ? implode('<br />', $attachments) : '';\n            $form->addLabel('', $fileListToString);\n        }\n        $default['title'] = '['.get_lang('MailSubjectForwardShort').\": \".Security::remove_XSS($message_reply_info['title']).']';\n        $form->addHidden('forward_id', $forwardId);\n        $form->addHidden('save_form', 'save_form');\n        $receiverInfo = api_get_user_info($message_reply_info['user_receiver_id']);\n\n        $forwardMessage = '---------- '.get_lang('ForwardedMessage').' ---------'.'<br />';\n        $forwardMessage .= get_lang('Date').': '.api_get_local_time($message_reply_info['send_date']).'<br />';\n        $forwardMessage .= get_lang('Subject').': '.Security::remove_XSS($message_reply_info['title']).'<br />';\n        $forwardMessage .= get_lang('To').': '.$receiverInfo['complete_name'].' - '.$receiverInfo['email'].' <br />';\n        $default['content'] = '<p><br/></p>'.$forwardMessage.'<br />'.Security::filter_terms($message_reply_info['content']);\n    }\n\n    if (empty($group_id)) {\n        $form->addLabel(\n            '',\n            '<div id=\"file_uploads\"><div id=\"filepath_1\">\n                <div id=\"filepaths\" class=\"form-horizontal\">\n                    <div id=\"paths-file\" class=\"form-group\">\n                    <label class=\"col-sm-4\">'.get_lang('FilesAttachment').'</label>\n                    <input class=\"col-sm-8\" type=\"file\" name=\"attach_1\"/>\n                    </div>\n                </div>\n                <div id=\"paths-description\" class=\"form-group\">\n                    <label class=\"col-sm-4\">'.get_lang('Description').'</label>\n                    <div class=\"col-sm-8\">\n                    <input id=\"file-descrtiption\" class=\"form-control\" type=\"text\" name=\"legend[]\" />\n                    </div>\n                </div>\n            </div>\n            </div>'\n        );\n\n        $form->addLabel(\n            '',\n            '<span id=\"link-more-attach\"><a class=\"btn btn-default\" href=\"javascript://\" onclick=\"return add_image_form()\">'.\n            get_lang('AddOneMoreFile').'</a></span>&nbsp;('.\n            sprintf(\n                get_lang('MaximunFileSizeX'),\n                format_file_size(api_get_setting('message_max_upload_filesize'))\n            ).')'\n        );\n    }\n\n    $form->addLabel(\n        '',\n        '<iframe \n            frameborder=\"0\" height=\"200\" width=\"100%\" scrolling=\"no\" \n            src=\"'.api_get_path(WEB_CODE_PATH).'messages/record_audio.php\"></iframe>'\n    );\n\n    $form->addButtonSend(get_lang('SendMessage'), 'compose');\n    $form->setRequiredNote('<span class=\"form_required\">*</span> <small>'.get_lang('ThisFieldIsRequired').'</small>');\n\n    if (!empty($group_id) && !empty($message_id)) {\n        $message_info = MessageManager::get_message_by_id($message_id);\n        $default['title'] = get_lang('MailSubjectReplyShort').\" \".$message_info['title'];\n    }\n    $form->setDefaults($default);\n    $html = '';\n    if ($form->validate()) {\n        $check = Security::check_token('post');\n        $disabled = api_get_configuration_value('disable_token_in_new_message');\n        if ($disabled) {\n            $check = true;\n        }\n\n        if ($check) {\n            $user_list = $default['users'];\n            $file_comments = $_POST['legend'];\n            $title = $default['title'];\n            $content = $default['content'];\n            $group_id = isset($default['group_id']) ? $default['group_id'] : null;\n            $parent_id = isset($default['parent_id']) ? $default['parent_id'] : null;\n            $forwardId = isset($_POST['forward_id']) ? $_POST['forward_id'] : false;\n\n            if (is_array($user_list) && count($user_list) > 0) {\n                // All is well, send the message\n                foreach ($user_list as $userId) {\n                    $res = MessageManager::send_message(\n                        $userId,\n                        $title,\n                        $content,\n                        $_FILES,\n                        $file_comments,\n                        $group_id,\n                        $parent_id,\n                        0,\n                        0,\n                        null,\n                        false,\n                        $forwardId,\n                        [],\n                        true\n                    );\n\n                    if ($res) {\n                        $userInfo = api_get_user_info($userId);\n                        Display::addFlash(Display::return_message(\n                            get_lang('MessageSentTo').\"&nbsp;<b>\".$userInfo['complete_name_with_username'].\"</b>\",\n                            'confirmation',\n                            false\n                        ));\n                    }\n                }\n                MessageManager::cleanAudioMessage();\n            } else {\n                Display::addFlash(Display::return_message('ErrorSendingMessage', 'error'));\n            }\n        }\n        Security::clear_token();\n        header('Location: '.api_get_path(WEB_PATH).'main/messages/inbox.php');\n        exit;\n    } else {\n        $token = Security::get_token();\n        $form->addElement('hidden', 'sec_token');\n        $form->setConstants(['sec_token' => $token]);\n        $html .= $form->returnForm();\n    }\n\n    return $html;\n}\n\nif ($allowSocial) {\n    $this_section = SECTION_SOCIAL;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/social/home.php',\n        'name' => get_lang('SocialNetwork'),\n    ];\n} else {\n    $this_section = SECTION_MYPROFILE;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/auth/profile.php',\n        'name' => get_lang('Profile'),\n    ];\n}\n\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_PATH).'main/messages/inbox.php',\n    'name' => get_lang('Messages'),\n];\n\n$group_id = isset($_REQUEST['group_id']) ? (int) $_REQUEST['group_id'] : 0;\n$social_right_content = null;\nif ($group_id != 0) {\n    $social_right_content .= '<div class=actions>';\n    $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/social/group_view.php?id='.$group_id.'\">'.\n        Display::return_icon('back.png', api_xml_http_response_encode(get_lang('ComposeMessage'))).'</a>';\n    $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/new_message.php?group_id='.$group_id.'\">'.\n        Display::return_icon('message_new.png', api_xml_http_response_encode(get_lang('ComposeMessage'))).'</a>';\n    $social_right_content .= '</div>';\n} else {\n    if ($allowSocial) {\n    } else {\n        $social_right_content .= '<div class=actions>';\n        if (api_get_setting('allow_message_tool') === 'true') {\n            $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/new_message.php\">'.\n                Display::return_icon('message_new.png', get_lang('ComposeMessage')).'</a>';\n            $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/inbox.php\">'.\n                Display::return_icon('inbox.png', get_lang('Inbox')).'</a>';\n            $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/outbox.php\">'.\n                Display::return_icon('outbox.png', get_lang('Outbox')).'</a>';\n        }\n        $social_right_content .= '</div>';\n    }\n}\n\n// LEFT COLUMN\n$social_left_content = '';\nif ($allowSocial) {\n    // Block Social Menu\n    $social_menu_block = SocialManager::show_social_menu('messages');\n    $social_right_content .= '<div class=\"row\">';\n    $social_right_content .= '<div class=\"col-md-12\">';\n    $social_right_content .= '<div class=\"actions\">';\n    $social_right_content .= '<a href=\"'.api_get_path(WEB_PATH).'main/messages/inbox.php\">'.\n        Display::return_icon('back.png', get_lang('Back'), [], 32).'</a>';\n    $social_right_content .= '</div>';\n    $social_right_content .= '</div>';\n    $social_right_content .= '<div class=\"col-md-12\">';\n}\n\n// MAIN CONTENT\nif (!isset($_POST['compose'])) {\n    if (isset($_GET['re_id'])) {\n        $social_right_content .= show_compose_reply_to_message(\n            $_GET['re_id'],\n            api_get_user_id(),\n            $tpl\n        );\n    } elseif (isset($_GET['send_to_user'])) {\n        $social_right_content .= show_compose_to_user($_GET['send_to_user'], $tpl);\n    } else {\n        $social_right_content .= show_compose_to_any($tpl);\n    }\n} else {\n    $restrict = false;\n    if (isset($_POST['users'])) {\n        $restrict = true;\n    } elseif (isset($_POST['group_id'])) {\n        $restrict = true;\n    } elseif (isset($_POST['hidden_user'])) {\n        $restrict = true;\n    }\n\n    $default['title'] = $_POST['title'];\n    $default['content'] = $_POST['content'];\n\n    // comes from a reply button\n    if (isset($_GET['re_id']) || isset($_GET['forward_id'])) {\n        $social_right_content .= manageForm($default, null, null, $tpl);\n    } else {\n        // post\n        if ($restrict) {\n            if (!isset($_POST['group_id'])) {\n                $default['users'] = isset($_POST['users']) ? $_POST['users'] : null;\n            } else {\n                $default['group_id'] = (int) $_POST['group_id'];\n            }\n            if (isset($_POST['hidden_user'])) {\n                $default['users'] = [$_POST['hidden_user']];\n            }\n            $social_right_content .= manageForm($default, null, null, $tpl);\n        } else {\n            $social_right_content .= Display::return_message(get_lang('ErrorSendingMessage'), 'error');\n        }\n    }\n}\n\nif ($allowSocial) {\n    $social_right_content .= '</div>';\n    $social_right_content .= '</div>';\n}\n\n// Block Social Avatar\nSocialManager::setSocialUserBlock($tpl, api_get_user_id(), 'messages');\n\nMessageManager::cleanAudioMessage();\nif ($allowSocial) {\n    $tpl->assign('social_menu_block', $social_menu_block);\n    $tpl->assign('social_right_content', $social_right_content);\n    $social_layout = $tpl->get_template('social/inbox.tpl');\n    $tpl->display($social_layout);\n} else {\n    $content = $social_right_content;\n    $tpl->assign('content', $content);\n    $tpl->display_one_col_template();\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Repository\\LegalRepository;\n\n/**\n * @package chamilo.messages\n */\n$cidReset = true;\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n\napi_block_anonymous_users();\n\nif (api_get_configuration_value('disable_gdpr')) {\n    api_not_allowed(true);\n}\n\n$userId = api_get_user_id();\n$userInfo = api_get_user_info($userId);\n\nif (empty($userInfo)) {\n    api_not_allowed(true);\n}\n\n$substitutionTerms = [\n    'password' => get_lang('EncryptedData'),\n    'salt' => get_lang('RandomData'),\n    'empty' => get_lang('NoData'),\n];\n\n$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';\n$formToString = '';\n\nif (api_get_setting('allow_terms_conditions') === 'true') {\n    $form = new FormValidator('delete_term', 'post', api_get_self().'?action=delete_legal&user_id='.$userId);\n    $form->addHtml(Display::return_message(get_lang('WhyYouWantToDeleteYourLegalAgreement'), 'normal', false));\n    $form->addTextarea('explanation', [get_lang('DeleteLegal'), get_lang('ExplanationDeleteLegal')], [], true);\n    $form->addHidden('action', 'delete_legal');\n    $form->addButtonSave(get_lang('DeleteLegal'));\n    $formToString = $form->returnForm();\n\n    $formDelete = new FormValidator('delete_account', 'post', api_get_self().'?action=delete_account&user_id='.$userId);\n    $formDelete->addTextarea(\n        'explanation',\n        [get_lang('DeleteAccount'), get_lang('ExplanationDeleteAccount')],\n        [],\n        true\n    );\n    $formDelete->addHidden('action', 'delete_account');\n    $formDelete->addButtonDelete(get_lang('DeleteAccount'));\n    $formToString .= $formDelete->returnForm();\n}\nswitch ($action) {\n    case 'send_legal':\n        $language = api_get_interface_language();\n        $language = api_get_language_id($language);\n        $terms = LegalManager::get_last_condition($language);\n        if (!$terms) {\n            //look for the default language\n            $language = api_get_setting('platformLanguage');\n            $language = api_get_language_id($language);\n            $terms = LegalManager::get_last_condition($language);\n        }\n\n        $legalAcceptType = $terms['version'].':'.$terms['language_id'].':'.time();\n        UserManager::update_extra_field_value(\n            $userId,\n            'legal_accept',\n            $legalAcceptType\n        );\n\n        Event::addEvent(\n            LOG_TERM_CONDITION_ACCEPTED,\n            LOG_USER_OBJECT,\n            api_get_user_info($userId),\n            api_get_utc_datetime()\n        );\n\n        $bossList = UserManager::getStudentBossList($userId);\n        if (!empty($bossList)) {\n            $bossList = array_column($bossList, 'boss_id');\n            $currentUserInfo = api_get_user_info($userId);\n            foreach ($bossList as $bossId) {\n                $subjectEmail = sprintf(\n                    get_lang('UserXSignedTheAgreement'),\n                    $currentUserInfo['complete_name']\n                );\n                $contentEmail = sprintf(\n                    get_lang('UserXSignedTheAgreementTheDateY'),\n                    $currentUserInfo['complete_name'],\n                    api_get_local_time($time)\n                );\n\n                MessageManager::send_message_simple(\n                    $bossId,\n                    $subjectEmail,\n                    $contentEmail,\n                    $user_id\n                );\n            }\n        }\n        Display::addFlash(Display::return_message(get_lang('Saved')));\n        header('Location: '.api_get_self());\n        exit;\n        break;\n    case 'delete_account':\n        if ($formDelete->validate()) {\n            $explanation = $formDelete->getSubmitValue('explanation');\n            UserManager::createDataPrivacyExtraFields();\n\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_delete_account',\n                1\n            );\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_delete_account_justification',\n                $explanation\n            );\n\n            Display::addFlash(Display::return_message(get_lang('Saved')));\n            Event::addEvent(\n                LOG_USER_DELETE_ACCOUNT_REQUEST,\n                LOG_USER_OBJECT,\n                $userInfo\n            );\n\n            $url = api_get_path(WEB_CODE_PATH).'admin/user_list_consent.php';\n            $link = Display::url($url, $url);\n            $subject = get_lang('RequestForAccountDeletion');\n            $content = sprintf(\n                get_lang('TheUserXAskedForAccountDeletionWithJustificationXGoHereX'),\n                $userInfo['complete_name'],\n                $explanation,\n                $link\n            );\n\n            $email = api_get_configuration_value('data_protection_officer_email');\n            if (!empty($email)) {\n                api_mail_html('', $email, $subject, $content);\n            } else {\n                MessageManager::sendMessageToAllAdminUsers(api_get_user_id(), $subject, $content);\n            }\n            header('Location: '.api_get_self());\n            exit;\n        }\n        break;\n    case 'delete_legal':\n        if ($form->validate()) {\n            $explanation = $form->getSubmitValue('explanation');\n\n            UserManager::createDataPrivacyExtraFields();\n\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_legal_agreement_consent_removal',\n                1\n            );\n\n            UserManager::update_extra_field_value(\n                $userId,\n                'request_for_legal_agreement_consent_removal_justification',\n                $explanation\n            );\n\n            Display::addFlash(Display::return_message(get_lang('Sent')));\n\n            Event::addEvent(\n                LOG_USER_REMOVED_LEGAL_ACCEPT,\n                LOG_USER_OBJECT,\n                $userInfo\n            );\n\n            $url = api_get_path(WEB_CODE_PATH).'admin/user_list_consent.php';\n            $link = Display::url($url, $url);\n            $subject = get_lang('RequestForLegalConsentWithdrawal');\n            $content = sprintf(\n                get_lang('TheUserXAskedLegalConsentWithdrawalWithJustificationXGoHereX'),\n                $userInfo['complete_name'],\n                $explanation,\n                $link\n            );\n\n            $email = api_get_configuration_value('data_protection_officer_email');\n            if (!empty($email)) {\n                api_mail_html('', $email, $subject, $content);\n            } else {\n                MessageManager::sendMessageToAllAdminUsers(api_get_user_id(), $subject, $content);\n            }\n            header('Location: '.api_get_self());\n            exit;\n        }\n        break;\n}\n\n$propertiesToJson = UserManager::getRepository()->getPersonalDataToJson($userId, $substitutionTerms);\n\nif (!empty($_GET['export'])) {\n    $filename = md5(mt_rand(0, 1000000)).'.json';\n    $path = api_get_path(SYS_ARCHIVE_PATH).$filename;\n    $writeResult = file_put_contents($path, $propertiesToJson);\n    if ($writeResult !== false) {\n        DocumentManager::file_send_for_download($path, true, $filename);\n        exit;\n    }\n}\n\n$allowSocial = api_get_setting('allow_social_tool') === 'true';\n\n$nameTools = get_lang('PersonalDataReport');\n$show_message = null;\n\nif ($allowSocial) {\n    $this_section = SECTION_SOCIAL;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/social/home.php',\n        'name' => get_lang('SocialNetwork'),\n    ];\n} else {\n    $this_section = SECTION_MYPROFILE;\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_PATH).'main/auth/profile.php',\n        'name' => get_lang('Profile'),\n    ];\n}\n\n$interbreadcrumb[] = ['url' => '#', 'name' => get_lang('PersonalDataReport')];\n\n// LEFT CONTENT\n$socialMenuBlock = '';\nif ($allowSocial) {\n    // Block Social Menu\n    $socialMenuBlock = SocialManager::show_social_menu('personal-data');\n}\n\n// MAIN CONTENT\n$personalDataContent = '<ul>';\n$properties = json_decode($propertiesToJson);\n$webCoursePath = api_get_path(WEB_COURSE_PATH);\n$showWarningMessage = false;\nforeach ($properties as $key => $value) {\n    if (is_array($value) || is_object($value)) {\n        switch ($key) {\n            case 'classes':\n                foreach ($value as $category => $subValue) {\n                    $categoryName = 'Social group';\n                    if ($category == 0) {\n                        $categoryName = 'Class';\n                    }\n                    $personalDataContent .= '<li class=\"advanced_options\" id=\"personal-data-list-'.$category.'\">';\n                    $personalDataContent .= '<u>'.$categoryName.'</u> &gt;</li>';\n                    $personalDataContent .= '<ul id=\"personal-data-list-'.$category.'_options\" style=\"display:none;\">';\n                    if (empty($subValue)) {\n                        $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                    } else {\n                        foreach ($subValue as $subSubValue) {\n                            $personalDataContent .= '<li>'.Security::remove_XSS($subSubValue).'</li>';\n                        }\n                    }\n                    $personalDataContent .= '</ul>';\n                }\n                break;\n            case 'extraFields':\n                $personalDataContent .= '<li>'.$key.': </li><ul>';\n                if (empty($value)) {\n                    $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                } else {\n                    foreach ($value as $subValue) {\n                        $personalDataContent .= '<li>'.$subValue->variable.': '.Security::remove_XSS($subValue->value).'</li>';\n                    }\n                }\n                $personalDataContent .= '</ul>';\n                break;\n            case 'dropBoxSentFiles':\n                foreach ($value as $category => $subValue) {\n                    $personalDataContent .= '<li class=\"advanced_options\" id=\"personal-data-list-'.$category.'\">';\n                    $personalDataContent .= '<u>'.get_lang($category).'</u> &gt;</li>';\n                    $personalDataContent .= '<ul id=\"personal-data-list-'.$category.'_options\" style=\"display:none;\">';\n                    if (empty($subValue)) {\n                        $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                    } else {\n                        if (count($subValue) === 1000) {\n                            $showWarningMessage = true;\n                        }\n                        foreach ($subValue as $subSubValue) {\n                            if ($category === 'DocumentsAdded') {\n                                $documentLink = Display::url(\n                                    $subSubValue->code_path,\n                                    $webCoursePath.$subSubValue->directory.'/document'.$subSubValue->path\n                                );\n                                $personalDataContent .= '<li>'.$documentLink.'</li>';\n                            } else {\n                                $personalDataContent .= '<li>'.Security::remove_XSS($subSubValue).'</li>';\n                            }\n                        }\n                    }\n                    $personalDataContent .= '</ul>';\n                }\n\n                break;\n            case 'portals':\n            case 'roles':\n            case 'achievedSkills':\n            case 'sessionAsGeneralCoach':\n            case 'courses':\n            case 'groupNames':\n            case 'groups':\n                $personalDataContent .= '<li>'.$key.': </li><ul>';\n                if (empty($subValue)) {\n                    $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                } else {\n                    foreach ($value as $subValue) {\n                        $personalDataContent .= '<li>'.Security::remove_XSS($subValue).'</li>';\n                    }\n                }\n                $personalDataContent .= '</ul>';\n                break;\n            case 'sessionCourseSubscriptions':\n                $personalDataContent .= '<li>'.$key.': </li><ul>';\n                foreach ($value as $session => $courseList) {\n                    $personalDataContent .= '<li>'.$session.'<ul>';\n                    if (empty($courseList)) {\n                        $personalDataContent .= '<li>'.get_lang('NoData').'</li>';\n                    } else {\n                        foreach ($courseList as $course) {\n                            $personalDataContent .= '<li>'.$course.'</li>';\n                        }\n                    }\n                    $personalDataContent .= '</ul>';\n                }\n                $personalDataContent .= '</ul>';\n                break;\n            default:\n                //var_dump($key);\n                break;\n        }\n\n        /*foreach ($value as $subValue) {\n            foreach ($subValue as $subSubValue) {\n                var_dump($subSubValue);\n                //$personalDataContent .= '<li>'.$subSubValue.'</li>';\n            }\n        }*/\n        //skip in some cases\n        /*sif (!empty($value['date'])) {\n            $personalDataContent .= '<li>'.$key.': '.$value['date'].'</li>';\n        } else {\n            $personalDataContent .= '<li>'.$key.': '.get_lang('ComplexDataNotShown').'</li>';\n        }*/\n    } else {\n        $personalDataContent .= '<li>'.$key.': '.Security::remove_XSS($value).'</li>';\n    }\n}\n$personalDataContent .= '</ul>';\n\n// Check terms acceptation\n$permissionBlock = '';\nif (api_get_setting('allow_terms_conditions') === 'true') {\n    $extraFieldValue = new ExtraFieldValue('user');\n    $value = $extraFieldValue->get_values_by_handler_and_field_variable(\n        $userId,\n        'legal_accept'\n    );\n    $permissionBlock .= Display::return_icon('accept_na.png', get_lang('NotAccepted'));\n    if (isset($value['value']) && !empty($value['value'])) {\n        list($legalId, $legalLanguageId, $legalTime) = explode(':', $value['value']);\n        $permissionBlock = '<h4>'.get_lang('CurrentStatus').'</h4>'.\n            get_lang('LegalAgreementAccepted').' '.Display::return_icon('accept.png', get_lang('LegalAgreementAccepted'), [], ICON_SIZE_TINY).\n            '<br />';\n        $permissionBlock .= get_lang('Date').': '.api_get_local_time($legalTime).'<br /><br />';\n        $permissionBlock .= $formToString;\n\n    /*$permissionBlock .= Display::url(\n        get_lang('DeleteLegal'),\n        api_get_self().'?action=delete_legal&user_id='.$userId,\n        ['class' => 'btn btn-danger btn-xs']\n    );*/\n    } else {\n        // @TODO add action handling for button\n        $permissionBlock .= Display::url(\n            get_lang('SendLegal'),\n            api_get_self().'?action=send_legal&user_id='.$userId,\n            ['class' => 'btn btn-primary btn-xs']\n        );\n    }\n} else {\n    $permissionBlock .= get_lang('NoTermsAndConditionsAvailable');\n}\n\n//Build the final array to pass to template\n$personalData = [];\n$personalData['data'] = $personalDataContent;\n//$personalData['responsible'] = api_get_setting('personal_data_responsible_org');\n\n$em = Database::getManager();\n/** @var LegalRepository $legalTermsRepo */\n$legalTermsRepo = $em->getRepository('ChamiloCoreBundle:Legal');\n// Get data about the treatment of data\n$treatmentTypes = LegalManager::getTreatmentTypeList();\n\n/*foreach ($treatmentTypes as $id => $item) {\n    $personalData['treatment'][$item]['title'] = get_lang('PersonalData'.ucfirst($item).'Title');\n    $legalTerm = $legalTermsRepo->findOneByTypeAndLanguage($id, api_get_language_id($user_language));\n    $legalTermContent = '';\n    if (!empty($legalTerm[0]) && is_array($legalTerm[0])) {\n        $legalTermContent = $legalTerm[0]['content'];\n    }\n    $personalData['treatment'][$item]['content'] = $legalTermContent;\n}*/\n\n$officerName = api_get_configuration_value('data_protection_officer_name');\n$officerRole = api_get_configuration_value('data_protection_officer_role');\n$officerEmail = api_get_configuration_value('data_protection_officer_email');\nif (!empty($officerName)) {\n    $personalData['officer_name'] = $officerName;\n    $personalData['officer_role'] = $officerRole;\n    $personalData['officer_email'] = $officerEmail;\n}\n\n$tpl = new Template(null);\n\n$actions = Display::url(\n    Display::return_icon('excel.png', get_lang('Export'), [], ICON_SIZE_MEDIUM),\n    api_get_path(WEB_CODE_PATH).'social/personal_data.php?export=1'\n);\n\n$tpl->assign('actions', Display::toolbarAction('toolbar', [$actions]));\n\n$termLink = '';\nif (api_get_setting('allow_terms_conditions') === 'true') {\n    $url = api_get_path(WEB_CODE_PATH).'social/terms.php';\n    $termLink = Display::url(get_lang('ReadTermsAndConditions'), $url);\n}\n\nif ($showWarningMessage) {\n    Display::addFlash(Display::return_message(get_lang('MoreDataAvailableInTheDatabaseButTrunkedForEfficiencyReasons')));\n}\n\n// Block Social Avatar\nSocialManager::setSocialUserBlock($tpl, api_get_user_id(), 'messages');\nif (api_get_setting('allow_social_tool') === 'true') {\n    $tpl->assign('social_menu_block', $socialMenuBlock);\n} else {\n    $tpl->assign('social_menu_block', '');\n    $tpl->assign('personal_data_block', $personalDataContent);\n}\n\n$tpl->assign('personal_data', $personalData);\n$tpl->assign('permission', $permissionBlock);\n$tpl->assign('term_link', $termLink);\n$socialLayout = $tpl->get_template('social/personal_data.tpl');\n$tpl->display($socialLayout);\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * @package chamilo.plugin.ticket\n */\n$cidReset = true;\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n\napi_block_anonymous_users();\n\n$user_id = api_get_user_id();\n$isAdmin = api_is_platform_admin();\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_CODE_PATH).'ticket/tickets.php',\n    'name' => get_lang('MyTickets'),\n];\n$interbreadcrumb[] = ['url' => '#', 'name' => get_lang('TicketDetail')];\n\n$disableReponseButtons = '';\n$htmlHeadXtra[] = '<script>\n$(document).ready(function() {\n\t$(\"#dialog-form\").dialog({\n\t\tautoOpen: false,\n\t\theight: 450,\n\t\twidth: 600,\n\t\tmodal: true,\n\t\tbuttons: {\n            '.get_lang('Accept').': function(){\n                $(\"#frmResponsable\").submit()\n            },\n            '.ucfirst(get_lang('Close')).': function() {\n                $(this).dialog(\"close\");\n            }\n            }\n        });\n\n        $(\"a#assign\").click(function () {\n            $( \"#dialog-form\" ).dialog( \"open\" );\n        });\n\n        $(\".responseyes\").click(function () {\n            if(!confirm(\"'.get_lang('AreYouSure').' : '.strtoupper(get_lang('Yes')).'. '.get_lang('IfYouAreSureTheTicketWillBeClosed').'\")){\n                return false;\n            }\n        });\n\n        $(\".responseno\").click(function () {\n            if(!confirm(\"'.get_lang('AreYouSure').' : '.strtoupper(get_lang('No')).'\")){\n                return false;\n            }\n        });     \n       \n        '.$disableReponseButtons.'\n});\n\nvar counter_image = 1;\n\nfunction remove_image_form(element_id) {\n    $(\"#\" + element_id).remove();\n    counter_image = counter_image - 1;\n    $(\"#link-more-attach\").css(\"display\", \"block\");\n}\n\nfunction add_image_form() {\n    // Multiple filepaths for image form\n    var filepaths = $(\"#filepaths\");\n    var new_elem, input_file, link_remove, img_remove, new_filepath_id;\n\n    if ($(\"#filepath_\"+counter_image)) {\n        counter_image = counter_image + 1;\n    }  else {\n        counter_image = counter_image;\n    }\n\n    new_elem = \"filepath_\"+counter_image;\n\n    $(\"<div/>\", {\n        id: new_elem,\n        class: \"controls\"\n    }).appendTo(filepaths);\n\n    input_file = $(\"<input/>\", {\n        type: \"file\",\n        name: \"attach_\" + counter_image,\n        size: 20\n    });\n\n    link_remove = $(\"<a/>\", {\n        onclick: \"remove_image_form(\\'\" + new_elem + \"\\')\",\n        style: \"cursor: pointer\"\n    });\n\n    img_remove = $(\"<img/>\", {\n        src: \"'.Display::returnIconPath('delete.png').'\"\n    });\n\n    new_filepath_id = $(\"#filepath_\" + counter_image);\n    new_filepath_id.append(input_file, link_remove.append(img_remove));\n\n    if (counter_image === 6) {\n        var link_attach = $(\"#link-more-attach\");\n        if (link_attach) {\n            $(link_attach).css(\"display\", \"none\");\n        }\n    }\n}\n</script>';\n\n$htmlHeadXtra[] = '<style>\n.attachment-link {\n    margin: 12px;\n}\n#link-more-attach {\n    color: white;\n    cursor: pointer;\n    width: 120px;\n}\n</style>';\n\n$ticket_id = (int) $_REQUEST['ticket_id'];\n$ticket = TicketManager::get_ticket_detail_by_id($ticket_id);\nif (!isset($ticket['ticket']) ||\n    // make sure it's either a user assigned to this ticket, or the reporter, or and admin\n    !($ticket['ticket']['assigned_last_user'] == $user_id ||\n      $ticket['ticket']['sys_insert_user_id'] == $user_id ||\n      $isAdmin)\n    ) {\n    api_not_allowed(true);\n}\nif (!isset($_REQUEST['ticket_id'])) {\n    header('Location: '.api_get_path(WEB_CODE_PATH).'ticket/tickets.php');\n    exit;\n}\n\n/*if (isset($_POST['response'])) {\n    if ($user_id == $ticket['ticket']['assigned_last_user'] || api_is_platform_admin()) {\n        $response = $_POST['response'] === '1' ? true : false;\n        $newStatus = TicketManager::STATUS_PENDING;\n        if ($response) {\n            $newStatus = TicketManager::STATUS_CLOSE;\n        }\n        TicketManager::update_ticket_status(\n            TicketManager::getStatusIdFromCode($newStatus),\n            $ticket_id,\n            $user_id\n        );\n        Display::addFlash(Display::return_message(get_lang('Updated')));\n        header(\"Location:\".api_get_self().\"?ticket_id=\".$ticket_id);\n        exit;\n    }\n}*/\n\n$title = 'Ticket #'.$ticket['ticket']['code'];\n\nif (isset($_REQUEST['close'])) {\n    TicketManager::close_ticket($ticket_id, $user_id);\n    $ticket['ticket']['status_id'] = TicketManager::STATUS_CLOSE;\n    $ticket['ticket']['status'] = get_lang('Closed');\n}\n\n$projectId = $ticket['ticket']['project_id'];\n$messages = $ticket['messages'];\n$counter = 1;\n$messageToShow = '';\n$formToShow = '';\nforeach ($messages as $message) {\n    $date = Display::url(\n        date_to_str_ago($message['sys_insert_datetime']),\n        '#',\n        ['title' => api_get_local_time($message['sys_insert_datetime']), 'class' => 'boot-tooltip']\n    );\n\n    $receivedMessage = '';\n    if (!empty($message['subject'])) {\n        $receivedMessage = '<b>'.get_lang('Subject').': </b> '.Security::remove_XSS($message['subject']).'<br />';\n    }\n\n    if (!empty($message['message'])) {\n        $receivedMessage = '<b>'.get_lang('Message').':</b><br />'.Security::remove_XSS($message['message']).'<br />';\n    }\n\n    $attachmentLinks = '';\n    if (isset($message['attachments'])) {\n        $attributeClass = [\n            'class' => 'attachment-link',\n        ];\n        foreach ($message['attachments'] as $attach) {\n            $attachmentLinks .= Display::tag('div', $attach['attachment_link'], $attributeClass);\n        }\n    }\n\n    $entireMessage = $receivedMessage.$attachmentLinks;\n    $counterLink = Display::url('#'.$counter, api_get_self().'?ticket_id='.$ticket_id.'#note-'.$counter);\n\n    $messageToShow .= '<a id=\"note-'.$counter.'\"> </a><h4>'.sprintf(\n        get_lang('UpdatedByX'),\n        $message['user_info']['complete_name_with_message_link']\n    );\n\n    $messageToShow .= ' '.$date.' <span class=\"pull-right\">'.$counterLink.'</span></h4>';\n    $messageToShow .= '<hr />';\n\n    if (!empty($entireMessage)) {\n        $messageToShow .= Display::div(\n            $entireMessage,\n            ['class' => 'well']\n        );\n    }\n    $counter++;\n}\n\n$subject = get_lang('ReplyShort').': '.Security::remove_XSS($ticket['ticket']['subject']);\n\nif ($ticket['ticket']['status_id'] != TicketManager::STATUS_FORWARDED &&\n    $ticket['ticket']['status_id'] != TicketManager::STATUS_CLOSE\n) {\n    if ($ticket['ticket']['assigned_last_user'] == $user_id ||\n        $ticket['ticket']['sys_insert_user_id'] == $user_id ||\n        $isAdmin\n    ) {\n        $form = getForm($ticket['ticket']);\n        $formToShow = $form->returnForm();\n\n        if ($form->validate()) {\n            $ticket_id = (int) $_POST['ticket_id'];\n            $messageToSend = '';\n            $message = isset($_POST['confirmation']) ? true : false;\n            $file_attachments = $_FILES;\n\n            if ($isAdmin) {\n                $oldUserId = $ticket['ticket']['assigned_last_user'];\n                if (isset($_POST['assigned_last_user']) && !empty($_POST['assigned_last_user']) &&\n                    $_POST['assigned_last_user'] != $oldUserId\n                ) {\n                    TicketManager::assignTicketToUser(\n                        $ticket_id,\n                        $_POST['assigned_last_user']\n                    );\n                    $oldUserName = '-';\n                    if (!empty($oldUserId)) {\n                        $oldUserInfo = api_get_user_info($oldUserId);\n                        $oldUserName = $oldUserInfo['complete_name_with_message_link'];\n                    }\n\n                    $userCompleteName = '-';\n                    if (!empty($_POST['assigned_last_user'])) {\n                        $userInfo = api_get_user_info(\n                            $_POST['assigned_last_user']\n                        );\n                        $userCompleteName = $userInfo['complete_name_with_message_link'];\n                    }\n\n                    $messageToSend .= sprintf(\n                        get_lang('AssignedChangeFromXToY'),\n                        $oldUserName,\n                        $userCompleteName\n                    ).'<br />';\n                }\n\n                TicketManager::updateTicket(\n                    [\n                        'priority_id' => (int) $_POST['priority_id'],\n                        'status_id' => (int) $_POST['status_id'],\n                    ],\n                    $ticket_id,\n                    api_get_user_id()\n                );\n\n                if ($_POST['priority_id'] != $ticket['ticket']['priority_id']) {\n                    $newPriority = TicketManager::getPriority(\n                        $_POST['priority_id']\n                    );\n                    $newPriorityTitle = '-';\n                    if ($newPriority) {\n                        $newPriorityTitle = $newPriority->getName();\n                    }\n                    $oldPriority = TicketManager::getPriority(\n                        $ticket['ticket']['priority_id']\n                    );\n                    $oldPriorityTitle = '-';\n                    if ($oldPriority) {\n                        $oldPriorityTitle = $oldPriority->getName();\n                    }\n                    $messageToSend .= sprintf(\n                        get_lang('PriorityChangeFromXToY'),\n                        $oldPriorityTitle,\n                        $newPriorityTitle\n                    ).'<br />';\n                }\n\n                if ($_POST['status_id'] != $ticket['ticket']['status_id']) {\n                    $newStatus = TicketManager::getStatus(\n                        $_POST['status_id']\n                    );\n                    $newTitle = '-';\n                    if ($newStatus) {\n                        $newTitle = $newStatus->getName();\n                    }\n                    $oldStatus = TicketManager::getStatus(\n                        $ticket['ticket']['status_id']\n                    );\n                    $oldStatusTitle = '-';\n                    if ($oldStatus) {\n                        $oldStatusTitle = $oldStatus->getName();\n                    }\n\n                    $messageToSend .= sprintf(\n                        get_lang('StatusChangeFromXToY'),\n                        $oldStatusTitle,\n                        $newTitle\n                    ).'<br />';\n                }\n            }\n\n            $messageToSend .= $_POST['content'];\n\n            TicketManager::insertMessage(\n                $ticket_id,\n                $_POST['subject'],\n                $messageToSend,\n                $file_attachments,\n                $user_id,\n                'NOL',\n                $message\n            );\n\n            TicketManager::sendNotification(\n                $ticket_id,\n                get_lang('TicketUpdated'),\n                $messageToSend\n            );\n\n            Display::addFlash(Display::return_message(get_lang('Saved')));\n            header(\"Location:\".api_get_self().\"?ticket_id=\".$ticket_id);\n            exit;\n        }\n    }\n}\n\nDisplay::display_header();\necho '<div class=\"actions\">';\necho Display::url(\n    Display::return_icon('back.png', get_lang('Tickets'), [], ICON_SIZE_MEDIUM),\n    api_get_path(WEB_CODE_PATH).'ticket/tickets.php?project_id='.$projectId\n);\necho '</div>';\n$bold = '';\nif ($ticket['ticket']['status_id'] == TicketManager::STATUS_CLOSE) {\n    $bold = 'style = \"font-weight: bold;\"';\n}\n$senderData = get_lang('AddedBy').' '.$ticket['usuario']['complete_name_with_message_link'];\n\n\necho '<table width=\"100%\" >\n        <tr>\n          <td colspan=\"3\">\n          <h1>'.$title.'</h1>\n          <h2>'.Security::remove_XSS($ticket['ticket']['subject']).'</h2>\n          <p>\n            '.$senderData.' '.\n            get_lang('Created').' '.\n            Display::url(\n                date_to_str_ago($ticket['ticket']['start_date_from_db']),\n                '#',\n                ['title' => $ticket['ticket']['start_date'], 'class' => 'boot-tooltip']\n            ).'. '.\n            get_lang('TicketUpdated').' '.\n            Display::url(\n                date_to_str_ago($ticket['ticket']['sys_lastedit_datetime_from_db']),\n                '#',\n                ['title' => $ticket['ticket']['sys_lastedit_datetime'], 'class' => 'boot-tooltip']\n            ).'\n          </p>\n          </td>\n        </tr>\n        <tr>\n           <td><p><b>'.get_lang('Category').': </b>'.$ticket['ticket']['name'].'</p></td>\n        </tr>\n        <tr>\n           <td><p '.$bold.'><b>'.get_lang('Status').':</b> '.$ticket['ticket']['status'].'</p></td>\n        </tr>\n        <tr>\n            <td><p><b>'.get_lang('Priority').': </b>'.$ticket['ticket']['priority'].'<p></td>\n        </tr>';\n\nif (!empty($ticket['ticket']['assigned_last_user'])) {\n    $assignedUser = api_get_user_info($ticket['ticket']['assigned_last_user']);\n    echo '<tr>\n            <td><p><b>'.get_lang('AssignedTo').': </b>'.$assignedUser['complete_name_with_message_link'].'<p></td>\n        </tr>';\n} else {\n    echo '<tr>\n            <td><p><b>'.get_lang('AssignedTo').': </b>-<p></td>\n        </tr>';\n}\nif ($ticket['ticket']['course_url'] != null) {\n    if (!empty($ticket['ticket']['session_id'])) {\n        $sessionInfo = api_get_session_info($ticket['ticket']['session_id']);\n        echo '<tr>\n            <td><b>'.get_lang('Session').':</b> '.$sessionInfo['name'].' </td>\n            <td></td>\n            <td colspan=\"2\"></td>\n          </tr>';\n    }\n\n    echo '<tr>\n            <td><b>'.get_lang('Course').':</b> '.$ticket['ticket']['course_url'].' </td>\n            <td></td>\n            <td colspan=\"2\"></td>\n          </tr>';\n}\n\necho '<tr>\n        <td>\n        <hr />\n        <b>'.get_lang('Description').':</b> <br />\n        '.Security::remove_XSS($ticket['ticket']['message']).'\n        <hr />\n        </td>            \n     </tr>\n    ';\necho '</table>';\n\necho $messageToShow;\n\necho $formToShow;\n\nDisplay::display_footer();\n\n/**\n * @param array $ticket\n *\n * @return FormValidator\n */\nfunction getForm($ticket)\n{\n    $isAdmin = api_is_platform_admin();\n    global $subject;\n\n    $form = new FormValidator(\n        'send_ticket',\n        'POST',\n        api_get_self().'?ticket_id='.$ticket['id'],\n        '',\n        [\n            'enctype' => 'multipart/form-data',\n            'class' => 'form-horizontal',\n        ]\n    );\n\n    if ($isAdmin) {\n        $statusList = TicketManager::getStatusList();\n        $form->addElement(\n            'select',\n            'status_id',\n            get_lang('Status'),\n            $statusList\n        );\n\n        $priorityList = TicketManager::getPriorityList();\n        $form->addElement(\n            'select',\n            'priority_id',\n            get_lang('Priority'),\n            $priorityList,\n            [\n                'id' => 'priority_id',\n                'for' => 'priority_id',\n            ]\n        );\n\n        $form->addSelectAjax(\n            'assigned_last_user',\n            get_lang('Assign'),\n            null,\n            ['url' => api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php?a=get_user_like']\n        );\n\n        $form->setDefaults(\n            [\n                'priority_id' => $ticket['priority_id'],\n                'status_id' => $ticket['status_id'],\n                'assigned_last_user' => $ticket['assigned_last_user'],\n            ]\n        );\n    }\n\n    $form->addElement(\n        'text',\n        'subject',\n        get_lang('Subject'),\n        [\n            'for' => 'subject',\n            'value' => $subject,\n            'style' => 'width: 540px;',\n        ]\n    );\n\n    $form->addElement('hidden', 'ticket_id', $ticket['id']);\n\n    $form->addHtmlEditor(\n        'content',\n        get_lang('Message'),\n        false,\n        false,\n        [\n            'ToolbarSet' => 'Profile',\n            'Width' => '550',\n            'Height' => '250',\n        ]\n    );\n\n    if ($isAdmin) {\n        $form->addElement(\n            'checkbox',\n            'confirmation',\n            null,\n            get_lang('RequestConfirmation')\n        );\n    }\n\n    $form->addElement('file', 'attach_1', get_lang('FilesAttachment'));\n    $form->addLabel(\n        '',\n        '<span id=\"filepaths\"><div id=\"filepath_1\"></div></span>'\n    );\n    $form->addLabel(\n        '',\n        '<span id=\"link-more-attach\">\n         <span class=\"btn btn-success\" onclick=\"return add_image_form()\">'.get_lang('AddOneMoreFile').'</span>\n         </span>\n         ('.sprintf(get_lang('MaximunFileSizeX'), format_file_size(api_get_setting('message_max_upload_filesize'))).')'\n    );\n\n    $form->addElement('html', '<br/>');\n    $form->addButtonSend(get_lang('Send'));\n\n    return $form;\n}\n"], "filenames": ["main/inc/lib/TicketManager.php", "main/messages/new_message.php", "main/social/personal_data.php", "main/ticket/ticket_details.php"], "buggy_code_start_loc": [969, 189, 259, 124], "buggy_code_end_loc": [981, 218, 354, 413], "fixing_code_start_loc": [969, 189, 259, 124], "fixing_code_end_loc": [981, 218, 354, 420], "type": "CWE-862", "message": "Chamilo Chamilo-lms version 1.11.8 and earlier contains an Incorrect Access Control vulnerability in Tickets component that can result in an authenticated user can read all tickets available on the platform, due to lack of access controls. This attack appears to be exploitable via ticket_id=[ticket number]. This vulnerability appears to have been fixed in 1.11.x after commit 33e2692a37b5b6340cf5bec1a84e541460983c03.", "other": {"cve": {"id": "CVE-2019-1000017", "sourceIdentifier": "cve@mitre.org", "published": "2019-02-04T21:29:01.330", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo Chamilo-lms version 1.11.8 and earlier contains an Incorrect Access Control vulnerability in Tickets component that can result in an authenticated user can read all tickets available on the platform, due to lack of access controls. This attack appears to be exploitable via ticket_id=[ticket number]. This vulnerability appears to have been fixed in 1.11.x after commit 33e2692a37b5b6340cf5bec1a84e541460983c03."}, {"lang": "es", "value": "Chamilo Chamilo-lms, en versiones 1.11.8 y anteriores, contiene una vulnerabilidad de control de acceso incorrecto en el componente Tickets que puede resultar en que un usuario autenticado pueda leer todos los tickets disponibles en la plataforma debido a la falta de control de acceso. Este ataque parece ser explotable mediante ticket_id=[ticket number]. La vulnerabilidad parece haber sido solucionada en las versiones 1.11.x tras el commit con ID 33e2692a37b5b6340cf5bec1a84e541460983c03."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.11.8", "matchCriteriaId": "A757321A-581B-4C7A-BCC8-F44AC4FC1AB5"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/33e2692a37b5b6340cf5bec1a84e541460983c03", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-34-2019-01-14-Moderate-risk-moderate-impact-XSS-and-unauthorized-access", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/33e2692a37b5b6340cf5bec1a84e541460983c03"}}