{"buggy_code": ["package server\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/go-logr/zerologr\"\n\tgrpczerolog \"github.com/grpc-ecosystem/go-grpc-middleware/providers/zerolog/v2\"\n\tgrpcauth \"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/auth\"\n\tgrpclog \"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\tgrpcprom \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/jzelinskie/cobrautil/v2\"\n\t\"github.com/jzelinskie/cobrautil/v2/cobraotel\"\n\t\"github.com/jzelinskie/cobrautil/v2/cobrazerolog\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/rs/zerolog\"\n\t\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\n\t\"github.com/authzed/spicedb/internal/dispatch\"\n\t\"github.com/authzed/spicedb/internal/logging\"\n\tconsistencymw \"github.com/authzed/spicedb/internal/middleware/consistency\"\n\tdatastoremw \"github.com/authzed/spicedb/internal/middleware/datastore\"\n\tdispatchmw \"github.com/authzed/spicedb/internal/middleware/dispatcher\"\n\t\"github.com/authzed/spicedb/internal/middleware/servicespecific\"\n\t\"github.com/authzed/spicedb/pkg/datastore\"\n\tlogmw \"github.com/authzed/spicedb/pkg/middleware/logging\"\n\t\"github.com/authzed/spicedb/pkg/middleware/requestid\"\n\t\"github.com/authzed/spicedb/pkg/middleware/serverversion\"\n\t\"github.com/authzed/spicedb/pkg/releases\"\n)\n\nvar DisableTelemetryHandler *prometheus.Registry\n\n// ServeExample creates an example usage string with the provided program name.\nfunc ServeExample(programName string) string {\n\treturn fmt.Sprintf(`\t%[1]s:\n\t\t%[3]s serve --grpc-preshared-key \"somerandomkeyhere\"\n\n\t%[2]s:\n\t\t%[3]s serve --grpc-preshared-key \"realkeyhere\" --grpc-tls-cert-path path/to/tls/cert --grpc-tls-key-path path/to/tls/key \\\n\t\t\t--http-tls-cert-path path/to/tls/cert --http-tls-key-path path/to/tls/key \\\n\t\t\t--datastore-engine postgres --datastore-conn-uri \"postgres-connection-string-here\"\n`,\n\t\tcolor.YellowString(\"No TLS and in-memory\"),\n\t\tcolor.GreenString(\"TLS and a real datastore\"),\n\t\tprogramName,\n\t)\n}\n\n// DefaultPreRunE sets up viper, zerolog, and OpenTelemetry flag handling for a\n// command.\nfunc DefaultPreRunE(programName string) cobrautil.CobraRunFunc {\n\treturn cobrautil.CommandStack(\n\t\tcobrautil.SyncViperPreRunE(programName),\n\t\tcobrazerolog.New(\n\t\t\tcobrazerolog.WithTarget(func(logger zerolog.Logger) {\n\t\t\t\tlogging.SetGlobalLogger(logger)\n\t\t\t}),\n\t\t).RunE(),\n\t\tcobraotel.New(\"spicedb\",\n\t\t\tcobraotel.WithLogger(zerologr.New(&logging.Logger)),\n\t\t).RunE(),\n\t\treleases.CheckAndLogRunE(),\n\t)\n}\n\n// MetricsHandler sets up an HTTP server that handles serving Prometheus\n// metrics and pprof endpoints.\nfunc MetricsHandler(telemetryRegistry *prometheus.Registry) http.Handler {\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/metrics\", promhttp.Handler())\n\tmux.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\tmux.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n\tmux.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\n\tmux.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\n\tmux.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n\tif telemetryRegistry != nil {\n\t\tmux.Handle(\"/telemetry\", promhttp.HandlerFor(telemetryRegistry, promhttp.HandlerOpts{}))\n\t}\n\treturn mux\n}\n\nvar defaultGRPCLogOptions = []grpclog.Option{\n\t// the server has a deadline set, so we consider it a normal condition\n\t// this makes sure we don't log them as errors\n\tgrpclog.WithLevels(func(code codes.Code) grpclog.Level {\n\t\tif code == codes.DeadlineExceeded {\n\t\t\treturn grpclog.INFO\n\t\t}\n\t\treturn grpclog.DefaultServerCodeToLevel(code)\n\t}),\n\t// changes default logging behaviour to only log finish call message\n\tgrpclog.WithDecider(func(_ string, _ error) grpclog.Decision {\n\t\treturn grpclog.LogFinishCall\n\t}),\n}\n\nconst (\n\tDefaultMiddlewareRequestID     = \"requestid\"\n\tDefaultMiddlewareLog           = \"log\"\n\tDefaultMiddlewareGRPCLog       = \"grpclog\"\n\tDefaultMiddlewareOTelGRPC      = \"otelgrpc\"\n\tDefaultMiddlewareGRPCAuth      = \"grpcauth\"\n\tDefaultMiddlewareGRPCProm      = \"grpcprom\"\n\tDefaultMiddlewareServerVersion = \"serverversion\"\n\n\tDefaultInternalMiddlewareDispatch       = \"dispatch\"\n\tDefaultInternalMiddlewareDatastore      = \"datastore\"\n\tDefaultInternalMiddlewareConsistency    = \"consistency\"\n\tDefaultInternalMiddlewareServerSpecific = \"servicespecific\"\n)\n\n// DefaultMiddleware generates the default middleware chain used for the public SpiceDB gRPC API\nfunc DefaultMiddleware(logger zerolog.Logger, authFunc grpcauth.AuthFunc, enableVersionResponse bool, dispatcher dispatch.Dispatcher, ds datastore.Datastore) (*MiddlewareChain, error) {\n\tchain, err := NewMiddlewareChain([]ReferenceableMiddleware{\n\t\t{\n\t\t\tName:                DefaultMiddlewareRequestID,\n\t\t\tUnaryMiddleware:     requestid.UnaryServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t\tStreamingMiddleware: requestid.StreamServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareLog,\n\t\t\tUnaryMiddleware:     logmw.UnaryServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t\tStreamingMiddleware: logmw.StreamServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareGRPCLog,\n\t\t\tUnaryMiddleware:     grpclog.UnaryServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t\tStreamingMiddleware: grpclog.StreamServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareOTelGRPC,\n\t\t\tUnaryMiddleware:     otelgrpc.UnaryServerInterceptor(),\n\t\t\tStreamingMiddleware: otelgrpc.StreamServerInterceptor(),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareGRPCProm,\n\t\t\tUnaryMiddleware:     grpcprom.UnaryServerInterceptor,\n\t\t\tStreamingMiddleware: grpcprom.StreamServerInterceptor,\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareGRPCAuth,\n\t\t\tUnaryMiddleware:     grpcauth.UnaryServerInterceptor(authFunc),\n\t\t\tStreamingMiddleware: grpcauth.StreamServerInterceptor(authFunc),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareServerVersion,\n\t\t\tUnaryMiddleware:     serverversion.UnaryServerInterceptor(enableVersionResponse),\n\t\t\tStreamingMiddleware: serverversion.StreamServerInterceptor(enableVersionResponse),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareDispatch,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     dispatchmw.UnaryServerInterceptor(dispatcher),\n\t\t\tStreamingMiddleware: dispatchmw.StreamServerInterceptor(dispatcher),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareDatastore,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     datastoremw.UnaryServerInterceptor(ds),\n\t\t\tStreamingMiddleware: datastoremw.StreamServerInterceptor(ds),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareConsistency,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     consistencymw.UnaryServerInterceptor(),\n\t\t\tStreamingMiddleware: consistencymw.StreamServerInterceptor(),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareServerSpecific,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     servicespecific.UnaryServerInterceptor,\n\t\t\tStreamingMiddleware: servicespecific.StreamServerInterceptor,\n\t\t},\n\t}...)\n\treturn &chain, err\n}\n\n// DefaultDispatchMiddleware generates the default middleware chain used for the internal dispatch SpiceDB gRPC API\nfunc DefaultDispatchMiddleware(logger zerolog.Logger, authFunc grpcauth.AuthFunc, ds datastore.Datastore) ([]grpc.UnaryServerInterceptor, []grpc.StreamServerInterceptor) {\n\treturn []grpc.UnaryServerInterceptor{\n\t\t\trequestid.UnaryServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t\tlogmw.UnaryServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t\tgrpclog.UnaryServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t\totelgrpc.UnaryServerInterceptor(),\n\t\t\tgrpcprom.UnaryServerInterceptor,\n\t\t\tgrpcauth.UnaryServerInterceptor(authFunc),\n\t\t\tdatastoremw.UnaryServerInterceptor(ds),\n\t\t\tservicespecific.UnaryServerInterceptor,\n\t\t}, []grpc.StreamServerInterceptor{\n\t\t\trequestid.StreamServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t\tlogmw.StreamServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t\tgrpclog.StreamServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t\totelgrpc.StreamServerInterceptor(),\n\t\t\tgrpcprom.StreamServerInterceptor,\n\t\t\tgrpcauth.StreamServerInterceptor(authFunc),\n\t\t\tdatastoremw.StreamServerInterceptor(ds),\n\t\t\tservicespecific.StreamServerInterceptor,\n\t\t}\n}\n"], "fixing_code": ["package server\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/go-logr/zerologr\"\n\tgrpczerolog \"github.com/grpc-ecosystem/go-grpc-middleware/providers/zerolog/v2\"\n\tgrpcauth \"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/auth\"\n\tgrpclog \"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\tgrpcprom \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/jzelinskie/cobrautil/v2\"\n\t\"github.com/jzelinskie/cobrautil/v2/cobraotel\"\n\t\"github.com/jzelinskie/cobrautil/v2/cobrazerolog\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/rs/zerolog\"\n\t\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\n\t\"github.com/authzed/spicedb/internal/dispatch\"\n\t\"github.com/authzed/spicedb/internal/logging\"\n\tconsistencymw \"github.com/authzed/spicedb/internal/middleware/consistency\"\n\tdatastoremw \"github.com/authzed/spicedb/internal/middleware/datastore\"\n\tdispatchmw \"github.com/authzed/spicedb/internal/middleware/dispatcher\"\n\t\"github.com/authzed/spicedb/internal/middleware/servicespecific\"\n\t\"github.com/authzed/spicedb/pkg/datastore\"\n\tlogmw \"github.com/authzed/spicedb/pkg/middleware/logging\"\n\t\"github.com/authzed/spicedb/pkg/middleware/requestid\"\n\t\"github.com/authzed/spicedb/pkg/middleware/serverversion\"\n\t\"github.com/authzed/spicedb/pkg/releases\"\n)\n\nvar DisableTelemetryHandler *prometheus.Registry\n\n// ServeExample creates an example usage string with the provided program name.\nfunc ServeExample(programName string) string {\n\treturn fmt.Sprintf(`\t%[1]s:\n\t\t%[3]s serve --grpc-preshared-key \"somerandomkeyhere\"\n\n\t%[2]s:\n\t\t%[3]s serve --grpc-preshared-key \"realkeyhere\" --grpc-tls-cert-path path/to/tls/cert --grpc-tls-key-path path/to/tls/key \\\n\t\t\t--http-tls-cert-path path/to/tls/cert --http-tls-key-path path/to/tls/key \\\n\t\t\t--datastore-engine postgres --datastore-conn-uri \"postgres-connection-string-here\"\n`,\n\t\tcolor.YellowString(\"No TLS and in-memory\"),\n\t\tcolor.GreenString(\"TLS and a real datastore\"),\n\t\tprogramName,\n\t)\n}\n\n// DefaultPreRunE sets up viper, zerolog, and OpenTelemetry flag handling for a\n// command.\nfunc DefaultPreRunE(programName string) cobrautil.CobraRunFunc {\n\treturn cobrautil.CommandStack(\n\t\tcobrautil.SyncViperPreRunE(programName),\n\t\tcobrazerolog.New(\n\t\t\tcobrazerolog.WithTarget(func(logger zerolog.Logger) {\n\t\t\t\tlogging.SetGlobalLogger(logger)\n\t\t\t}),\n\t\t).RunE(),\n\t\tcobraotel.New(\"spicedb\",\n\t\t\tcobraotel.WithLogger(zerologr.New(&logging.Logger)),\n\t\t).RunE(),\n\t\treleases.CheckAndLogRunE(),\n\t)\n}\n\n// MetricsHandler sets up an HTTP server that handles serving Prometheus\n// metrics and pprof endpoints.\nfunc MetricsHandler(telemetryRegistry *prometheus.Registry) http.Handler {\n\tmux := http.NewServeMux()\n\n\tmux.Handle(\"/metrics\", promhttp.Handler())\n\tif telemetryRegistry != nil {\n\t\tmux.Handle(\"/telemetry\", promhttp.HandlerFor(telemetryRegistry, promhttp.HandlerOpts{}))\n\t}\n\n\tmux.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\tmux.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\n\tmux.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\n\tmux.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n\tmux.HandleFunc(\"/debug/pprof/cmdline\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\tfmt.Fprintf(w, \"This profile type has been disabled to avoid leaking private command-line arguments\")\n\t})\n\n\treturn mux\n}\n\nvar defaultGRPCLogOptions = []grpclog.Option{\n\t// the server has a deadline set, so we consider it a normal condition\n\t// this makes sure we don't log them as errors\n\tgrpclog.WithLevels(func(code codes.Code) grpclog.Level {\n\t\tif code == codes.DeadlineExceeded {\n\t\t\treturn grpclog.INFO\n\t\t}\n\t\treturn grpclog.DefaultServerCodeToLevel(code)\n\t}),\n\t// changes default logging behaviour to only log finish call message\n\tgrpclog.WithDecider(func(_ string, _ error) grpclog.Decision {\n\t\treturn grpclog.LogFinishCall\n\t}),\n}\n\nconst (\n\tDefaultMiddlewareRequestID     = \"requestid\"\n\tDefaultMiddlewareLog           = \"log\"\n\tDefaultMiddlewareGRPCLog       = \"grpclog\"\n\tDefaultMiddlewareOTelGRPC      = \"otelgrpc\"\n\tDefaultMiddlewareGRPCAuth      = \"grpcauth\"\n\tDefaultMiddlewareGRPCProm      = \"grpcprom\"\n\tDefaultMiddlewareServerVersion = \"serverversion\"\n\n\tDefaultInternalMiddlewareDispatch       = \"dispatch\"\n\tDefaultInternalMiddlewareDatastore      = \"datastore\"\n\tDefaultInternalMiddlewareConsistency    = \"consistency\"\n\tDefaultInternalMiddlewareServerSpecific = \"servicespecific\"\n)\n\n// DefaultMiddleware generates the default middleware chain used for the public SpiceDB gRPC API\nfunc DefaultMiddleware(logger zerolog.Logger, authFunc grpcauth.AuthFunc, enableVersionResponse bool, dispatcher dispatch.Dispatcher, ds datastore.Datastore) (*MiddlewareChain, error) {\n\tchain, err := NewMiddlewareChain([]ReferenceableMiddleware{\n\t\t{\n\t\t\tName:                DefaultMiddlewareRequestID,\n\t\t\tUnaryMiddleware:     requestid.UnaryServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t\tStreamingMiddleware: requestid.StreamServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareLog,\n\t\t\tUnaryMiddleware:     logmw.UnaryServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t\tStreamingMiddleware: logmw.StreamServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareGRPCLog,\n\t\t\tUnaryMiddleware:     grpclog.UnaryServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t\tStreamingMiddleware: grpclog.StreamServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareOTelGRPC,\n\t\t\tUnaryMiddleware:     otelgrpc.UnaryServerInterceptor(),\n\t\t\tStreamingMiddleware: otelgrpc.StreamServerInterceptor(),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareGRPCProm,\n\t\t\tUnaryMiddleware:     grpcprom.UnaryServerInterceptor,\n\t\t\tStreamingMiddleware: grpcprom.StreamServerInterceptor,\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareGRPCAuth,\n\t\t\tUnaryMiddleware:     grpcauth.UnaryServerInterceptor(authFunc),\n\t\t\tStreamingMiddleware: grpcauth.StreamServerInterceptor(authFunc),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultMiddlewareServerVersion,\n\t\t\tUnaryMiddleware:     serverversion.UnaryServerInterceptor(enableVersionResponse),\n\t\t\tStreamingMiddleware: serverversion.StreamServerInterceptor(enableVersionResponse),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareDispatch,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     dispatchmw.UnaryServerInterceptor(dispatcher),\n\t\t\tStreamingMiddleware: dispatchmw.StreamServerInterceptor(dispatcher),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareDatastore,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     datastoremw.UnaryServerInterceptor(ds),\n\t\t\tStreamingMiddleware: datastoremw.StreamServerInterceptor(ds),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareConsistency,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     consistencymw.UnaryServerInterceptor(),\n\t\t\tStreamingMiddleware: consistencymw.StreamServerInterceptor(),\n\t\t},\n\t\t{\n\t\t\tName:                DefaultInternalMiddlewareServerSpecific,\n\t\t\tInternal:            true,\n\t\t\tUnaryMiddleware:     servicespecific.UnaryServerInterceptor,\n\t\t\tStreamingMiddleware: servicespecific.StreamServerInterceptor,\n\t\t},\n\t}...)\n\treturn &chain, err\n}\n\n// DefaultDispatchMiddleware generates the default middleware chain used for the internal dispatch SpiceDB gRPC API\nfunc DefaultDispatchMiddleware(logger zerolog.Logger, authFunc grpcauth.AuthFunc, ds datastore.Datastore) ([]grpc.UnaryServerInterceptor, []grpc.StreamServerInterceptor) {\n\treturn []grpc.UnaryServerInterceptor{\n\t\t\trequestid.UnaryServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t\tlogmw.UnaryServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t\tgrpclog.UnaryServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t\totelgrpc.UnaryServerInterceptor(),\n\t\t\tgrpcprom.UnaryServerInterceptor,\n\t\t\tgrpcauth.UnaryServerInterceptor(authFunc),\n\t\t\tdatastoremw.UnaryServerInterceptor(ds),\n\t\t\tservicespecific.UnaryServerInterceptor,\n\t\t}, []grpc.StreamServerInterceptor{\n\t\t\trequestid.StreamServerInterceptor(requestid.GenerateIfMissing(true)),\n\t\t\tlogmw.StreamServerInterceptor(logmw.ExtractMetadataField(\"x-request-id\", \"requestID\")),\n\t\t\tgrpclog.StreamServerInterceptor(grpczerolog.InterceptorLogger(logger), defaultGRPCLogOptions...),\n\t\t\totelgrpc.StreamServerInterceptor(),\n\t\t\tgrpcprom.StreamServerInterceptor,\n\t\t\tgrpcauth.StreamServerInterceptor(authFunc),\n\t\t\tdatastoremw.StreamServerInterceptor(ds),\n\t\t\tservicespecific.StreamServerInterceptor,\n\t\t}\n}\n"], "filenames": ["pkg/cmd/server/defaults.go"], "buggy_code_start_loc": [75], "buggy_code_end_loc": [85], "fixing_code_start_loc": [76], "fixing_code_end_loc": [91], "type": "CWE-209", "message": "SpiceDB is an open source, Google Zanzibar-inspired, database system for creating and managing security-critical application permissions. The `spicedb serve` command contains a flag named `--grpc-preshared-key` which is used to protect the gRPC API from being accessed by unauthorized requests. The values of this flag are to be considered sensitive, secret data. The `/debug/pprof/cmdline` endpoint served by the metrics service (defaulting running on port `9090`) reveals the command-line flags provided for debugging purposes. If a password is set via the `--grpc-preshared-key` then the key is revealed by this endpoint along with any other flags provided to the SpiceDB binary. This issue has been fixed in version 1.19.1.\n\n### Impact\n\nAll deployments abiding by the recommended best practices for production usage are **NOT affected**:\n- Authzed's SpiceDB Serverless\n- Authzed's SpiceDB Dedicated\n- SpiceDB Operator\n\nUsers configuring SpiceDB via environment variables are **NOT affected**.\n\nUsers **MAY be affected** if they expose their metrics port to an untrusted network and are configuring `--grpc-preshared-key` via command-line flag.\n\n### Patches\n\nTODO\n\n### Workarounds\n\nTo workaround this issue you can do one of the following:\n\n- Configure the preshared key via an environment variable (e.g. `SPICEDB_GRPC_PRESHARED_KEY=yoursecret spicedb serve`)\n- Reconfigure the `--metrics-addr` flag to bind to a trusted network (e.g. `--metrics-addr=localhost:9090`)\n- Disable the metrics service via the flag (e.g. `--metrics-enabled=false`)\n- Adopt one of the recommended deployment models: [Authzed's managed services](https://authzed.com/pricing) or the [SpiceDB Operator](https://github.com/authzed/spicedb-operator)\n\n### References\n\n- [GitHub Security Advisory issued for SpiceDB](https://github.com/authzed/spicedb/security/advisories/GHSA-cjr9-mr35-7xh6)\n- [Go issue #22085](https://github.com/golang/go/issues/22085) for documenting the risks of exposing pprof to the internet\n- [Go issue #42834](https://github.com/golang/go/issues/42834) discusses preventing pprof registration to the default serve mux\n- [semgrep rule go.lang.security.audit.net.pprof.pprof-debug-exposure](https://semgrep.dev/r?q=go.lang.security.audit.net.pprof) checks for a variation of this issue\n\n### Credit\n\nWe'd like to thank Amit Laish, a security researcher at GE Vernova for responsibly disclosing this vulnerability.\n", "other": {"cve": {"id": "CVE-2023-29193", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-14T20:15:09.670", "lastModified": "2023-04-24T16:22:01.430", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SpiceDB is an open source, Google Zanzibar-inspired, database system for creating and managing security-critical application permissions. The `spicedb serve` command contains a flag named `--grpc-preshared-key` which is used to protect the gRPC API from being accessed by unauthorized requests. The values of this flag are to be considered sensitive, secret data. The `/debug/pprof/cmdline` endpoint served by the metrics service (defaulting running on port `9090`) reveals the command-line flags provided for debugging purposes. If a password is set via the `--grpc-preshared-key` then the key is revealed by this endpoint along with any other flags provided to the SpiceDB binary. This issue has been fixed in version 1.19.1.\n\n### Impact\n\nAll deployments abiding by the recommended best practices for production usage are **NOT affected**:\n- Authzed's SpiceDB Serverless\n- Authzed's SpiceDB Dedicated\n- SpiceDB Operator\n\nUsers configuring SpiceDB via environment variables are **NOT affected**.\n\nUsers **MAY be affected** if they expose their metrics port to an untrusted network and are configuring `--grpc-preshared-key` via command-line flag.\n\n### Patches\n\nTODO\n\n### Workarounds\n\nTo workaround this issue you can do one of the following:\n\n- Configure the preshared key via an environment variable (e.g. `SPICEDB_GRPC_PRESHARED_KEY=yoursecret spicedb serve`)\n- Reconfigure the `--metrics-addr` flag to bind to a trusted network (e.g. `--metrics-addr=localhost:9090`)\n- Disable the metrics service via the flag (e.g. `--metrics-enabled=false`)\n- Adopt one of the recommended deployment models: [Authzed's managed services](https://authzed.com/pricing) or the [SpiceDB Operator](https://github.com/authzed/spicedb-operator)\n\n### References\n\n- [GitHub Security Advisory issued for SpiceDB](https://github.com/authzed/spicedb/security/advisories/GHSA-cjr9-mr35-7xh6)\n- [Go issue #22085](https://github.com/golang/go/issues/22085) for documenting the risks of exposing pprof to the internet\n- [Go issue #42834](https://github.com/golang/go/issues/42834) discusses preventing pprof registration to the default serve mux\n- [semgrep rule go.lang.security.audit.net.pprof.pprof-debug-exposure](https://semgrep.dev/r?q=go.lang.security.audit.net.pprof) checks for a variation of this issue\n\n### Credit\n\nWe'd like to thank Amit Laish, a security researcher at GE Vernova for responsibly disclosing this vulnerability.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-209"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:authzed:spicedb:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.19.1", "matchCriteriaId": "2A4C3AFF-BFA8-4CDD-8429-BAE623029B9B"}]}]}], "references": [{"url": "https://github.com/authzed/spicedb/commit/9bbd7d76b6eaba33fe0236014f9b175d21232999", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/authzed/spicedb/releases/tag/v1.19.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/authzed/spicedb/security/advisories/GHSA-cjr9-mr35-7xh6", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/authzed/spicedb/commit/9bbd7d76b6eaba33fe0236014f9b175d21232999"}}