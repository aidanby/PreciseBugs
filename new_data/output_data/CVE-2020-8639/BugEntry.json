{"buggy_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later. \n *\n * Scope: Import keywords page\n *\n * @filesource  keywordsImport.php\n * @package     TestLink\n * @copyright   2005,2015 TestLink community \n * @link        http://www.testlink.org/\n *\n */\nrequire_once('../../config.inc.php');\nrequire_once('common.php');\nrequire_once('csv.inc.php');\nrequire_once('xml.inc.php');\n\ntestlinkInitPage($db);\n$templateCfg = templateConfiguration();\n\n$args = init_args($db);\n$gui = initializeGui($args);\n\nif(!$gui->msg && $args->UploadFile)\n{\n  if(($args->source != 'none') && ($args->source != ''))\n  { \n    if (move_uploaded_file($args->source, $args->dest))\n    {\n      $pfn = null;\n      switch($args->importType)\n      {\n        case 'iSerializationToCSV':\n          $pfn = \"importKeywordsFromCSV\";\n          break;\n \n        case 'iSerializationToXML':\n          $pfn = \"importKeywordsFromXMLFile\";\n          break;\n      }\n \n      if($pfn)\n      {\n        $tproject = new testproject($db);\n        $result = $tproject->$pfn($args->tproject_id,$args->dest);\n        if ($result != tl::OK)\n        {  \n          $gui->msg = lang_get('wrong_keywords_file'); \n        }\n        else\n        {\n          header(\"Location: keywordsView.php?tproject_id={$gui->tproject_id}\");\n          exit();   \n        }\n      }\n      @unlink($args->dest);\n    }\n  } \n  else\n  {  \n    $gui->msg = lang_get('please_choose_keywords_file');\n  }\n}\n      \n$smarty = new TLSmarty();\n$smarty->assign('gui',$gui);  \n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n/**\n * @return object returns the arguments for the page\n */\nfunction init_args(&$dbHandler)\n{\n  $_REQUEST = strings_stripSlashes($_REQUEST);\n\n  $ipcfg = array(\"UploadFile\" => array(tlInputParameter::STRING_N,0,1),\n                 \"importType\" => array(tlInputParameter::STRING_N,0,100),\n                 \"tproject_id\" => array(tlInputParameter::INT_N));\n\n  $args = new stdClass();\n  R_PARAMS($ipcfg,$args);\n\n  if( $args->tproject_id <= 0 )\n  {\n    throw new Exception(\" Error Invalid Test Project ID\", 1);\n  }\n\n  // Check rights before doing anything else\n  // Abort if rights are not enough \n  $user = $_SESSION['currentUser'];\n  $env['tproject_id'] = $args->tproject_id;\n  $env['tplan_id'] = 0;\n  \n  $check = new stdClass();\n  $check->items = array('mgt_modify_key');\n  $check->mode = 'and';\n  checkAccess($dbHandler,$user,$env,$check);\n \n  $tproj_mgr = new testproject($dbHandler);\n  $dm = $tproj_mgr->get_by_id($args->tproject_id,array('output' => 'name'));\n  $args->tproject_name = $dm['name'];\n\n  $args->UploadFile = ($args->UploadFile != \"\") ? 1 : 0; \n  $args->fInfo = isset($_FILES['uploadedFile']) ? $_FILES['uploadedFile'] : null;\n  $args->source = isset($args->fInfo['tmp_name']) ? $args->fInfo['tmp_name'] : null;\n  $args->dest = TL_TEMP_PATH . session_id() . \"-importkeywords.\" . $args->importType;\n\n  return $args;\n}\n\n/**\n *\n */\nfunction initializeGui(&$argsObj)\n{\n  $gui = new stdClass();\n  $gui->tproject_id = $argsObj->tproject_id;\n  $gui->tproject_name = $argsObj->tproject_name;\n\n  $gui->main_descr = lang_get('testproject') . TITLE_SEP . $gui->tproject_name;\n  $gui->viewUrl = \"lib/keywords/keywordsView.php?tproject_id={$gui->tproject_id}\";\n  $gui->import_type_selected = $argsObj->importType;\n  $gui->msg = getFileUploadErrorMessage($argsObj->fInfo);\n\n  $tlkw = new tlKeyword();\n  $gui->importTypes = $tlkw->getSupportedSerializationInterfaces();\n  $gui->keywordFormatStrings = $tlkw->getSupportedSerializationFormatDescriptions();\n\n  $fslimit = config_get('import_file_max_size_bytes');\n  $gui->fileSizeLimitMsg = \n    sprintf(lang_get('max_file_size_is'), $fslimit/1024 . ' KB ');\n  $gui->importLimit = $fslimit;\n\n\n\n\n  return $gui;\n}"], "fixing_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later. \n *\n * Scope: Import keywords page\n *\n * @filesource  keywordsImport.php\n * @package     TestLink\n * @copyright   2005,2020 TestLink community \n * @link        http://www.testlink.org/\n *\n */\nrequire_once('../../config.inc.php');\nrequire_once('common.php');\nrequire_once('csv.inc.php');\nrequire_once('xml.inc.php');\n\ntestlinkInitPage($db);\n$templateCfg = templateConfiguration();\n\n$args = init_args($db);\n$gui = initializeGui($args);\n\nif (!$gui->msg && $args->UploadFile) {\n\n  if(($args->source != 'none') && ($args->source != '')) { \n    if (move_uploaded_file($args->source, $args->dest)) {\n      $pfn = null;\n      switch($args->importType) {\n        case 'iSerializationToCSV':\n          $pfn = \"importKeywordsFromCSV\";\n        break;\n \n        case 'iSerializationToXML':\n          $pfn = \"importKeywordsFromXMLFile\";\n        break;\n      }\n \n      if ($pfn) {\n        $tproject = new testproject($db);\n        $result = $tproject->$pfn($args->tproject_id,$args->dest);\n        if ($result != tl::OK) {  \n          $gui->msg = lang_get('wrong_keywords_file'); \n        } else {\n          header(\"Location: keywordsView.php?tproject_id={$gui->tproject_id}\");\n          exit();   \n        }\n      }\n      @unlink($args->dest);\n    }\n  } else {  \n    $gui->msg = lang_get('please_choose_keywords_file');\n  }\n}\n      \n$smarty = new TLSmarty();\n$smarty->assign('gui',$gui);  \n$smarty->display($templateCfg->tpl);\n\n/**\n * @return object returns the arguments for the page\n */\nfunction init_args(&$dbHandler)\n{\n  $_REQUEST = strings_stripSlashes($_REQUEST);\n\n  $ipcfg = \n    array(\"UploadFile\" => array(tlInputParameter::STRING_N,0,1),\n          \"importType\" => array(tlInputParameter::STRING_N,0,100),\n          \"tproject_id\" => array(tlInputParameter::INT_N));\n\n  $args = new stdClass();\n  R_PARAMS($ipcfg,$args);\n\n  if ($args->tproject_id <= 0) {\n    throw new Exception(\" Error Invalid Test Project ID\", 1);\n  }\n\n  // Check rights before doing anything else\n  // Abort if rights are not enough \n  $user = $_SESSION['currentUser'];\n  $env['tproject_id'] = $args->tproject_id;\n  $env['tplan_id'] = 0;\n  \n  $check = new stdClass();\n  $check->items = array('mgt_modify_key');\n  $check->mode = 'and';\n  checkAccess($dbHandler,$user,$env,$check);\n \n  $tproj_mgr = new testproject($dbHandler);\n  $dm = $tproj_mgr->get_by_id($args->tproject_id,\n                              array('output' => 'name'));\n  $args->tproject_name = $dm['name'];\n\n  $args->UploadFile = ($args->UploadFile != \"\") ? 1 : 0; \n  $args->fInfo = isset($_FILES['uploadedFile']) ? $_FILES['uploadedFile'] : null;\n  $args->source = isset($args->fInfo['tmp_name']) ? $args->fInfo['tmp_name'] : null;\n\n  // whitelist\n  switch($args->importType) {\n    case 'iSerializationToCSV':\n    case 'iSerializationToXML':\n    break;\n\n    default:\n      $args->importType = 'iSerializationToXML';\n    break;\n  }\n\n  $tlkw = new tlKeyword();\n  $args->importTypes = $tlkw->getSupportedSerializationInterfaces();\n  $args->keywordFormatStrings = $tlkw->getSupportedSerializationFormatDescriptions();\n\n  $args->dest = TL_TEMP_PATH . session_id() . \n                \"-importkeywords.\" . \n                $args->importTypes[$args->importType];\n\n  return $args;\n}\n\n/**\n *\n */\nfunction initializeGui(&$argsObj)\n{\n  $gui = new stdClass();\n  $gui->tproject_id = $argsObj->tproject_id;\n  $gui->tproject_name = $argsObj->tproject_name;\n\n  $gui->main_descr = lang_get('testproject') . TITLE_SEP . $gui->tproject_name;\n  $gui->viewUrl = \"lib/keywords/keywordsView.php?tproject_id={$gui->tproject_id}\";\n  $gui->import_type_selected = $argsObj->importType;\n  $gui->msg = getFileUploadErrorMessage($argsObj->fInfo);\n\n  $gui->importTypes = $argsObj->importTypes;\n  $gui->keywordFormatStrings = $argsObj->keywordFormatStrings;;\n\n  $fslimit = config_get('import_file_max_size_bytes');\n  $gui->fileSizeLimitMsg = \n    sprintf(lang_get('max_file_size_is'), $fslimit/1024 . ' KB ');\n  $gui->importLimit = $fslimit;\n\n\n\n\n  return $gui;\n}"], "filenames": ["lib/keywords/keywordsImport.php"], "buggy_code_start_loc": [10], "buggy_code_end_loc": [129], "fixing_code_start_loc": [10], "fixing_code_end_loc": [138], "type": "CWE-434", "message": "An unrestricted file upload vulnerability in keywordsImport.php in TestLink 1.9.20 allows remote attackers to execute arbitrary code by uploading a file with an executable extension. This allows an authenticated attacker to upload a malicious file (containing PHP code to execute operating system commands) to a publicly accessible directory of the application.", "other": {"cve": {"id": "CVE-2020-8639", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-03T19:15:13.593", "lastModified": "2021-02-22T19:16:40.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An unrestricted file upload vulnerability in keywordsImport.php in TestLink 1.9.20 allows remote attackers to execute arbitrary code by uploading a file with an executable extension. This allows an authenticated attacker to upload a malicious file (containing PHP code to execute operating system commands) to a publicly accessible directory of the application."}, {"lang": "es", "value": "Una vulnerabilidad de carga de archivos no restringida en el archivo keywordsImport.php en TestLink versi\u00f3n 1.9.20, permite a atacantes remotos ejecutar c\u00f3digo arbitrario al cargar un archivo con una extensi\u00f3n ejecutable. Esto permite a un atacante autenticado cargar un archivo malicioso (que contiene c\u00f3digo PHP para ejecutar comandos del sistema operativo) en un directorio de la aplicaci\u00f3n accesible p\u00fablicamente."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:testlink:testlink:1.9.20:*:*:*:*:*:*:*", "matchCriteriaId": "1007C963-3BC2-41CF-9C5F-C8F54EAAAF8A"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/161401/TestLink-1.9.20-Shell-Upload.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://ackcent.com/blog/testlink-1.9.20-unrestricted-file-upload-and-sql-injection/", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/57d81ae350d569c5c95087997fe051c49e14516d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/57d81ae350d569c5c95087997fe051c49e14516d"}}