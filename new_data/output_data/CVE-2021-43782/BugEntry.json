{"buggy_code": ["<?php\n/**\n * Copyright (c) STMicroelectronics, 2008. All Rights Reserved.\n * Copyright (c) Enalean, 2017 - Present. All Rights Reserved.\n *\n * Originally written by Manuel Vacelet, 2008\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\DB\\Compat\\Legacy2018\\LegacyDataAccessInterface;\nuse Tuleap\\Project\\UserRemover;\n\n/**\n * Database access to ldap user group\n *\n */\nclass LDAP_ProjectGroupDao extends DataAccessObject\n{\n    /**\n     * @var UserRemover\n     */\n    private $user_removal;\n\n    public function __construct(LegacyDataAccessInterface $da, UserRemover $user_removal)\n    {\n        parent::__construct($da);\n\n        $this->user_removal = $user_removal;\n    }\n\n    /**\n     * Search one user group by id\n     *\n     * @param int $groupId Project id\n     *\n     * @return array|false\n     */\n    public function searchByGroupId($groupId)\n    {\n        $sql = 'SELECT * FROM plugin_ldap_project_group' .\n            ' WHERE group_id = ' . db_ei($groupId);\n        $dar = $this->retrieve($sql);\n        if ($dar && ! $dar->isError() && $dar->rowCount() == 1) {\n            return $dar->getRow();\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Associate one Codendi user group to an LDAP group\n     *\n     * @return bool\n     */\n    public function linkGroupLdap($project_id, $ldap_dn, $bind, $synchronization)\n    {\n        $project_id      = $this->da->escapeInt($project_id);\n        $ldap_dn         = $this->da->quoteSmart($ldap_dn);\n        $synchronization = $this->da->quoteSmart($synchronization);\n        $bind            = $this->da->quoteSmart($bind);\n\n        $sql = \"INSERT INTO plugin_ldap_project_group (group_id, ldap_group_dn, synchro_policy, bind_option)\n                VALUES ($project_id, $ldap_dn, $synchronization, $bind)\";\n\n        return $this->update($sql);\n    }\n\n    /**\n     * Remove link between project members and a LDAP group\n     *\n     * @param int $groupId Project id\n     *\n     * @return bool\n     */\n    public function unlinkGroupLdap($groupId)\n    {\n        $sql = 'DELETE FROM plugin_ldap_project_group' .\n            ' WHERE group_id = ' . db_ei($groupId);\n        return $this->update($sql);\n    }\n\n    /**\n     * Object oriented wrapper for account_add_user_to_group\n     *\n     * @param int $groupId Project id\n     * @param String  $name    User unix name\n     *\n     * @return bool\n     */\n    public function addUserToGroup($groupId, $name)\n    {\n        include_once __DIR__ . '/../../../src/www/include/account.php';\n        return account_add_user_to_group($groupId, $name);\n    }\n\n    /**\n     * Object oriented wrapper for account_remove_user_from_group\n     *\n     * @param int $project_id Project id\n     * @param int $user_id User id\n     *\n     * @return bool\n     */\n    public function removeUserFromGroup($project_id, $user_id)\n    {\n        return $this->user_removal->removeUserFromProject($project_id, $user_id);\n    }\n\n    public function isProjectBindingSynchronized($project_id)\n    {\n        $project_id              = $this->da->escapeInt($project_id);\n        $auto_synchronized_value = $this->da->quoteSmart(LDAP_GroupManager::AUTO_SYNCHRONIZATION);\n\n        $sql = \"SELECT NULL\n                FROM plugin_ldap_project_group\n                WHERE group_id = $project_id\n                  AND synchro_policy = $auto_synchronized_value\n                LIMIT 1\";\n\n        return count($this->retrieve($sql)) > 0;\n    }\n\n    public function doesProjectBindingKeepUsers($project_id)\n    {\n        $project_id       = $this->da->escapeInt($project_id);\n        $keep_users_value = $this->da->quoteSmart(LDAP_GroupManager::PRESERVE_MEMBERS_OPTION);\n\n        $sql = \"SELECT NULL\n                FROM plugin_ldap_project_group\n                WHERE group_id = $project_id\n                  AND bind_option = $keep_users_value\n                LIMIT 1\";\n\n        return count($this->retrieve($sql)) > 0;\n    }\n\n    public function getSynchronizedProjects()\n    {\n        $auto_synchronized_value = $this->da->quoteSmart(LDAP_GroupManager::AUTO_SYNCHRONIZATION);\n\n        $sql = \"SELECT *\n                FROM plugin_ldap_project_group\n                  INNER JOIN `groups` ON (`groups`.group_id = plugin_ldap_project_group.group_id)\n                WHERE synchro_policy = $auto_synchronized_value\n                  AND `groups`.status IN ('A', 's')\";\n\n        return $this->retrieve($sql);\n    }\n}\n", "<?php\n/**\n * Copyright (c) STMicroelectronics, 2008. All Rights Reserved.\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * Originally written by Manuel Vacelet, 2008\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Cryptography\\ConcealedString;\nuse Tuleap\\LDAP\\Exception\\IdentifierTypeNotFoundException;\nuse Tuleap\\LDAP\\Exception\\IdentifierTypeNotRecognizedException;\nuse Tuleap\\User\\DataIncompatibleWithUsernameGenerationException;\nuse Tuleap\\User\\UserNameNormalizer;\n\n/**\n * Manage interaction between an LDAP group and Codendi user_group.\n */\nclass LDAP_UserManager\n{\n    public const EVENT_UPDATE_LOGIN = 'PLUGIN_LDAP_UPDATE_LOGIN';\n\n    /**\n     * @type LDAP\n     */\n    private $ldap;\n\n    /**\n     * @var array<string, LDAPResult|false>\n     */\n    private $ldapResultCache = [];\n\n    /**\n     * @var PFUser[]\n     */\n    private $usersLoginChanged = [];\n\n    /**\n     * @var LDAP_UserSync\n     */\n    private $user_sync;\n\n    public function __construct(LDAP $ldap, LDAP_UserSync $user_sync, private UserNameNormalizer $username_generator)\n    {\n        $this->ldap      = $ldap;\n        $this->user_sync = $user_sync;\n    }\n\n    /**\n     * Create an LDAP_User object out of a regular user if this user comes as\n     * a corresponding LDAP entry\n     */\n    public function getLDAPUserFromUser(PFUser $user): ?LDAP_User\n    {\n        $ldap_result = $this->getLdapFromUser($user);\n        if ($ldap_result) {\n            return new LDAP_User($user, $ldap_result);\n        }\n        return null;\n    }\n\n    /**\n     * Get LDAPResult object corresponding to an LDAP ID\n     *\n     * @param  $ldapId    The LDAP identifier\n     * @return LDAPResult|false\n     */\n    public function getLdapFromLdapId($ldapId)\n    {\n        if (! isset($this->ldapResultCache[$ldapId])) {\n            $lri = $this->getLdap()->searchEdUid($ldapId);\n            if ($lri && $lri->count() == 1) {\n                $this->ldapResultCache[$ldapId] = $lri->current();\n            } else {\n                $this->ldapResultCache[$ldapId] = false;\n            }\n        }\n        return $this->ldapResultCache[$ldapId];\n    }\n\n    /**\n     * Get LDAPResult object corresponding to a User object\n     *\n     * @param  PFUser $user\n     * @return LDAPResult|false\n     */\n    public function getLdapFromUser($user)\n    {\n        if ($user && ! $user->isAnonymous()) {\n            return $this->getLdapFromLdapId($user->getLdapId());\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get LDAPResult object corresponding to a user name\n     *\n     * @param  string $userName  The user name\n     * @return LDAPResult|false\n     */\n    public function getLdapFromUserName($userName)\n    {\n        $user = $this->getUserManager()->getUserByUserName($userName);\n        return $this->getLdapFromUser($user);\n    }\n\n    /**\n     * Get LDAPResult object corresponding to a user id\n     *\n     * @param  int $userId    The user id\n     * @return LDAPResult|false\n     */\n    public function getLdapFromUserId($userId)\n    {\n        $user = $this->getUserManager()->getUserById($userId);\n        return $this->getLdapFromUser($user);\n    }\n\n    /**\n     * Get a User object from an LDAP result\n     *\n     * @param LDAPResult $lr The LDAP result\n     *\n     * @return PFUser|false\n     */\n    public function getUserFromLdap(LDAPResult $lr)\n    {\n        $user = $this->getUserManager()->getUserByLdapId($lr->getEdUid());\n        if (! $user) {\n            $user = $this->createAccountFromLdap($lr);\n        }\n        return $user;\n    }\n\n    /**\n     * Get the list of Codendi users corresponding to the given list of LDAP users.\n     *\n     * When a user doesn't exist, his account is created automaticaly.\n     *\n     * @param Array $ldapIds\n     * @return Array\n     */\n    public function getUserIdsForLdapUser($ldapIds)\n    {\n        $userIds = [];\n        $dao     = $this->getDao();\n        foreach ($ldapIds as $lr) {\n            $user = $this->getUserManager()->getUserByLdapId($lr->getEdUid());\n            if ($user) {\n                $userIds[$user->getId()] = $user->getId();\n            } else {\n                $user = $this->createAccountFromLdap($lr);\n                if ($user) {\n                    $userIds[$user->getId()] = $user->getId();\n                }\n            }\n        }\n        return $userIds;\n    }\n\n    /**\n     * Return an array of user ids corresponding to the give list of user identifiers\n     *\n     * @param String $userList A comma separated list of user identifiers\n     *\n     * @return Array\n     */\n    public function getUserIdsFromUserList($userList)\n    {\n        $userIds  = [];\n        $userList = array_map('trim', preg_split('/[,;]/', $userList));\n        foreach ($userList as $u) {\n            $user = $this->getUserManager()->findUser($u);\n            if ($user) {\n                $userIds[] = $user->getId();\n            } else {\n                $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-ldap', 'User not found: %1$s'), $u));\n            }\n        }\n        return $userIds;\n    }\n\n    /**\n     * Return LDAP logins stored in DB corresponding to given userIds.\n     *\n     * @param array $userIds Array of user ids\n     * @return DataAccessResult ldap logins\n     */\n    public function getLdapLoginFromUserIds(array $userIds)\n    {\n        $dao = $this->getDao();\n        return $dao->searchLdapLoginFromUserIds($userIds);\n    }\n\n    /**\n     * Check if a given name is not already a user name or a project name\n     *\n     * This should be in UserManager\n     *\n     * @param String $name Name to test\n     * @return bool\n     */\n    public function userNameIsAvailable($name)\n    {\n        $dao = $this->getDao();\n        return $dao->userNameIsAvailable($name);\n    }\n\n    /**\n     * Create user account based on LDAPResult info.\n     *\n     * @return PFUser|false\n     */\n    public function createAccountFromLdap(LDAPResult $lr)\n    {\n        $user = $this->createAccount($lr->getEdUid(), $lr->getLogin(), $lr->getCommonName(), $lr->getEmail());\n        return $user;\n    }\n\n    /**\n     * Create user account based on LDAP info.\n     *\n     * @param  String $eduid\n     * @param  String $uid\n     * @param  String $cn\n     * @param  String $email\n     * @return PFUser|false\n     */\n    public function createAccount($eduid, $uid, $cn, $email)\n    {\n        if (trim($uid) == '' || trim($eduid) == '') {\n            return false;\n        }\n\n        $user = new PFUser();\n        try {\n            $user->setUserName($this->username_generator->normalize($uid));\n        } catch (DataIncompatibleWithUsernameGenerationException $exception) {\n            return false;\n        }\n\n        $user->setLdapId($eduid);\n        $user->setRealName($cn);\n        $user->setEmail($email);\n        $mail_confirm_code_generator = new MailConfirmationCodeGenerator(\n            $this->getUserManager(),\n            new RandomNumberGenerator()\n        );\n        $mail_confirm_code           = $mail_confirm_code_generator->getConfirmationCode();\n        $user->setConfirmHash($mail_confirm_code);\n\n        // Default LDAP\n        $user->setStatus($this->getLdap()->getLDAPParam('default_user_status'));\n        $user->setRegisterPurpose('LDAP');\n        $user->setUnixStatus('S');\n        $user->setTimezone('GMT');\n        $user->setLanguageID($GLOBALS['Language']->getText('conf', 'language_id'));\n\n        $um   = $this->getUserManager();\n        $user = $um->createAccount($user);\n        if (! $user) {\n            return false;\n        }\n\n        return $user;\n    }\n\n    public function createLdapUser(LDAP_User $ldap_user): void\n    {\n        if (! $this->getDao()->hasLoginConfirmationDate($ldap_user)) {\n            $this->getDao()->createLdapUser($ldap_user->getId(), 0, $ldap_user->getUid());\n        }\n    }\n\n    /**\n     * @throws LDAP_AuthenticationFailedException\n     * @throws LDAP_UserNotFoundException\n     */\n    public function authenticate($username, ConcealedString $password): ?PFUser\n    {\n        if (! $this->ldap->authenticate($username, $password)) {\n            throw new LDAP_AuthenticationFailedException();\n        }\n\n        $ldap_user = $this->getUserFromServer($username);\n        $user      = $this->getUserManager()->getUserByLdapId($ldap_user->getEdUid());\n\n        if ($user === null) {\n            $user = $this->createAccountFromLdap($ldap_user);\n        }\n\n        if ($user) {\n            $this->synchronizeUser($user, $ldap_user, $password);\n            return $user;\n        }\n\n        return null;\n    }\n\n    private function mergeDefaultAttributesAndSiteAttributes()\n    {\n        return array_values(\n            array_unique(\n                array_merge(\n                    $this->ldap->getDefaultAttributes(),\n                    $this->user_sync->getSyncAttributes($this->ldap)\n                )\n            )\n        );\n    }\n\n    private function getUserFromServer($username)\n    {\n        $ldap_results_iterator = $this->ldap->searchLogin(\n            $username,\n            $this->mergeDefaultAttributesAndSiteAttributes()\n        );\n\n        if ($ldap_results_iterator === false || count($ldap_results_iterator) !== 1) {\n            throw new LDAP_UserNotFoundException();\n        }\n\n        return $ldap_results_iterator->current();\n    }\n\n    /**\n     * Synchronize user account with LDAP informations\n     *\n     * @return bool\n     */\n    public function synchronizeUser(PFUser $user, LDAPResult $lr, ConcealedString $password)\n    {\n        $user->setPassword($password);\n\n        $sync = LDAP_UserSync::instance();\n        $sync->sync($user, $lr);\n\n        // Perform DB update\n        $userUpdated = $this->getUserManager()->updateDb($user);\n\n        $ldapUpdated = true;\n        $user_id     = $this->getLdapLoginFromUserIds([$user->getId()])->getRow();\n        if ($user_id['ldap_uid'] != $lr->getLogin()) {\n            $ldapUpdated = $this->updateLdapUid($user, $lr->getLogin());\n            $this->triggerRenameOfUsers();\n        }\n\n        return ($userUpdated || $ldapUpdated);\n    }\n\n    /**\n     * Store new LDAP login in database\n     *\n     * Force update of SVNAccessFile in project the user belongs to as\n     * project member or user group member\n     *\n     * @param PFUser    $user    The user to update\n     * @param String  $ldapUid New LDAP login\n     *\n     * @return bool\n     */\n    public function updateLdapUid(PFUser $user, $ldapUid)\n    {\n        if ($this->getDao()->updateLdapUid($user->getId(), $ldapUid)) {\n            $this->addUserToRename($user);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Get the list of users whom LDAP uid changed\n     *\n     * @return Array of User\n     */\n    public function getUsersToRename()\n    {\n        return $this->usersLoginChanged;\n    }\n\n    /**\n     * Add a user whom login changed to the rename pipe\n     *\n     * @param PFUser $user A user to rename\n     */\n    public function addUserToRename(PFUser $user)\n    {\n        $this->usersLoginChanged[] = $user;\n    }\n\n    /**\n     * Create PLUGIN_LDAP_UPDATE_LOGIN event if there are user login updates pending\n     */\n    public function triggerRenameOfUsers()\n    {\n        if (count($this->usersLoginChanged)) {\n            $userIds = [];\n            foreach ($this->usersLoginChanged as $user) {\n                $userIds[] = $user->getId();\n            }\n            $sem = $this->getSystemEventManager();\n            $sem->createEvent(self::EVENT_UPDATE_LOGIN, implode(SystemEvent::PARAMETER_SEPARATOR, $userIds), SystemEvent::PRIORITY_MEDIUM);\n        }\n    }\n\n    /**\n     * Return array of users that will be suspended\n     *\n     * @return array of PFUser\n     *\n     */\n    public function getUsersToBeSuspended()\n    {\n        $users_to_be_suspended = [];\n        $active_users          = $this->getDao()->getActiveUsers();\n        foreach ($active_users as $active_user) {\n            if ($this->isUserDeletedFromLdap($active_user)) {\n                $user = new PFUser($active_user);\n                array_push($users_to_be_suspended, $user);\n            }\n        }\n        return $users_to_be_suspended;\n    }\n\n    /**\n     * Return number of active users\n     *\n     * @return int\n     *\n     */\n    public function getNbrActiveUsers()\n    {\n        $row = $this->getDao()->getNbrActiveUsers()->getRow();\n        return $row[\"count\"];\n    }\n\n    /**\n     * Return true if users could be suspended\n     *\n     * @param int $nbr_all_users\n     *\n     * @return bool\n     *\n     */\n    public function areUsersSupendable($nbr_all_users)\n    {\n        $nbr_users_to_suspend = count($this->getUsersToBeSuspended());\n        if ((! $threshold_users_suspension = $this->ldap->getLDAPParam('threshold_users_suspension')) || $nbr_users_to_suspend == 0) {\n            return true;\n        }\n        return $this->checkThreshold($nbr_users_to_suspend, $nbr_all_users);\n    }\n\n    /**\n     * Check that threshold is upper then percentage of users that will be suspended\n     *\n     * @param int $nbr_users_to_suspend\n     * @param int $nbr_all_users\n     *\n     * @return bool\n     *\n     */\n    public function checkThreshold($nbr_users_to_suspend, $nbr_all_users)\n    {\n        if ($nbr_users_to_suspend == 0 || $nbr_all_users == 0) {\n            return true;\n        }\n        $percentage_users_to_suspend = ($nbr_users_to_suspend / $nbr_all_users) * 100;\n        $threshold_users_suspension  = $this->ldap->getLDAPParam('threshold_users_suspension');\n        $logger                      = new \\Tuleap\\LDAP\\LdapLogger();\n        if ($percentage_users_to_suspend <= $threshold_users_suspension) {\n            $logger->info(\"[LDAP] Percentage of suspended users is ( \" . $percentage_users_to_suspend . \"% ) and threshold is ( \" . $threshold_users_suspension . \"% )\");\n            $logger->info(\"[LDAP] Number of suspended users is ( \" . $nbr_users_to_suspend . \" ) and number of active users is ( \" . $nbr_all_users . \" )\");\n            return true;\n        } else {\n            $logger->warning(\"[LDAP] Users not suspended: the percentage of users to suspend is ( \" . $percentage_users_to_suspend . \"% ) higher then threshold ( \" . $threshold_users_suspension . \"% )\");\n            $logger->warning(\"[LDAP] Number of users not suspended is ( \" . $nbr_users_to_suspend . \" ) and number of active users is ( \" . $nbr_all_users . \" )\");\n            return false;\n        }\n    }\n\n\n    /**\n     * Return true if user is deleted from ldap server\n     *\n     * @param array $row\n     *\n     * @return bool\n     *\n     */\n    public function isUserDeletedFromLdap($row)\n    {\n        $ldap_query = $this->ldap->getLDAPParam('eduid') . '=' . $row['ldap_id'];\n        $attributes = $this->user_sync->getSyncAttributes($this->ldap);\n        $ldapSearch = false;\n\n        foreach (explode(';', $this->ldap->getLDAPParam('people_dn') ?? '') as $people_dn) {\n            $ldapSearch = $this->ldap->search($people_dn, $ldap_query, LDAP::SCOPE_ONELEVEL, $attributes);\n            if ($ldapSearch !== false && count($ldapSearch) === 1) {\n                break;\n            }\n        }\n        if ($this->ldap->getErrno() === LDAP::ERR_SUCCESS && $ldapSearch) {\n            if (count($ldapSearch) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Wrapper for DAO\n     *\n     * @return LDAP_UserDao\n     */\n    public function getDao()\n    {\n        return new LDAP_UserDao(CodendiDataAccess::instance());\n    }\n\n    /**\n     * Wrapper for LDAP object\n     *\n     * @return LDAP\n     */\n    protected function getLdap()\n    {\n        return $this->ldap;\n    }\n\n    /**\n     * Wrapper for UserManager object\n     *\n     * @return UserManager\n     */\n    protected function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    /**\n     * Wrapper for SystemEventManager object\n     *\n     * @return SystemEventManager\n     */\n    protected function getSystemEventManager()\n    {\n        return SystemEventManager::instance();\n    }\n\n    /**\n     * @return PFUser|null\n     */\n    public function getUserByIdentifier($identifier)\n    {\n        $separator_position = strpos($identifier, ':');\n        $type               = strtolower(substr($identifier, 0, $separator_position));\n        $value              = strtolower(substr($identifier, $separator_position + 1));\n\n        if (! $type) {\n            throw new IdentifierTypeNotFoundException();\n        }\n\n        $ldap = $this->getLdap();\n        $lri  = null;\n        switch ($type) {\n            case 'ldapid':\n                $lri = $ldap->searchEdUid($value);\n                break;\n            case 'ldapdn':\n                $lri = $ldap->searchDn($value);\n                break;\n            case 'ldapuid':\n                $lri = $ldap->searchLogin($value);\n                break;\n            default:\n                throw new IdentifierTypeNotRecognizedException();\n        }\n\n        if ($lri === false) {\n            return null;\n        }\n\n        return $this->getUserFromLdapIterator($lri);\n    }\n\n    /**\n     * Get a User object from an LDAP iterator\n     *\n     * @param LDAPResultIterator $lri An LDAP result iterator\n     *\n     * @return PFUser|null\n     */\n    public function getUserFromLdapIterator(?LDAPResultIterator $lri = null)\n    {\n        if ($lri && count($lri) === 1 && (($user = $this->getUserFromLdap($lri->current())) !== false)) {\n            return $user;\n        }\n\n        return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\DB\\Compat\\Legacy2018;\n\nuse Tuleap\\DB\\DBConnection;\n\n/**\n * @deprecated\n */\nfinal class CompatPDODataAccess implements LegacyDataAccessInterface\n{\n    /**\n     * @var DBConnection\n     */\n    private $db_connection;\n    /**\n     * @var \\PDOStatement\n     */\n    private $latest_statement;\n\n    public function __construct(DBConnection $db_connection)\n    {\n        $this->db_connection = $db_connection;\n    }\n\n    /**\n     * Fetches a query resources and stores it in a local member\n     * @param $sql string the database query to run\n     * @deprecated\n     * @return object MySQLDataAccessResultInterface\n     *\n     * @psalm-taint-sink sql $sql\n     * @psalm-taint-sink sql $params\n     */\n    public function query($sql, $params = [])\n    {\n        if (! empty($params)) {\n            $args = [];\n            $i    = 1;\n            foreach ($params as $param) {\n                $args[] = '$' . $i;\n            }\n            $sql = str_replace($args, $params, $sql);\n        }\n\n        try {\n            $this->latest_statement = $this->db_connection->getDB()->query($sql);\n        } catch (\\PDOException $ex) {\n            $this->latest_statement = null;\n            if ($ex->getCode() == 2006) {\n                throw new \\DataAccessException('Unable to access the database . Please contact your administrator.');\n            }\n        }\n\n        try {\n            $this->db_connection->getDB()->getPdo()->setAttribute(\\PDO::ATTR_STRINGIFY_FETCHES, true);\n            $data_access_result = new CompatPDODataAccessResult($this->latest_statement);\n        } finally {\n            $this->db_connection->getDB()->getPdo()->setAttribute(\\PDO::ATTR_STRINGIFY_FETCHES, false);\n        }\n        return $data_access_result;\n    }\n\n    /**\n     * Return ID generated from the previous INSERT operation.\n     *\n     * @deprecated\n     *\n     * @return false|int or 0 if the previous query does not generate an AUTO_INCREMENT value, or FALSE if no MySQL connection was established\n     */\n    public function lastInsertId()\n    {\n        try {\n            return (int) $this->db_connection->getDB()->lastInsertId();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Return number of rows affected by the last INSERT, UPDATE or DELETE.\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function affectedRows()\n    {\n        if ($this->latest_statement === null) {\n            return -1;\n        }\n        try {\n            return $this->latest_statement->rowCount();\n        } catch (\\PDOException $ex) {\n            return -1;\n        }\n    }\n\n    /**\n     * Returns any MySQL errors\n     * @deprecated\n     * @return string a MySQL error\n     */\n    public function isError()\n    {\n        $error_info = [];\n        if ($this->latest_statement !== null) {\n            $error_info = $this->latest_statement->errorInfo();\n        }\n\n        if (! isset($error_info[0]) || $error_info[0] === '00000') {\n            $error_info = $this->db_connection->getDB()->getPdo()->errorInfo();\n        }\n\n        $has_error = isset($error_info[0]) && $error_info[0] !== '00000';\n        if (! $has_error) {\n            return '';\n        }\n        return 'DB error';\n    }\n\n    /**\n     * @deprecated\n     */\n    public function getErrorMessage()\n    {\n        $error_info = [];\n        if ($this->latest_statement !== null) {\n            $error_info = $this->latest_statement->errorInfo();\n        }\n\n        if (! isset($error_info[0]) || $error_info[0] === '00000') {\n            $error_info = $this->db_connection->getDB()->getPdo()->errorInfo();\n        }\n\n        return $error_info[2] . ' - ' . $error_info[1];\n    }\n\n    /**\n     * Quote variable to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmart($value, $params = [])\n    {\n        return $this->db_connection->getDB()->quote((string) $value);\n    }\n\n    /**\n     * Quote schema name to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmartSchema($value, $params = [])\n    {\n        return $this->db_connection->getDB()->escapeIdentifier((string) $value);\n    }\n\n    /**\n     * Safe implode function to use with SQL queries\n     * @deprecated\n     * @static\n     */\n    public function quoteSmartImplode($glue, $pieces, $params = [])\n    {\n        $str         = '';\n        $after_first = false;\n        foreach ($pieces as $piece) {\n            if ($after_first) {\n                $str .= $glue;\n            }\n            $str        .= $this->quoteSmart($piece, $params);\n            $after_first = true;\n        }\n        return $str;\n    }\n\n    /**\n     * cast to int\n     *\n     * @deprecated\n     */\n    public function escapeInt($v, $null = CODENDI_DB_NOT_NULL): string\n    {\n        if ($null === CODENDI_DB_NULL && $v === '') {\n            return 'NULL';\n        }\n        return (string) (int) $v;\n    }\n\n    /**\n     * @deprecated\n     */\n    public function escapeFloat($value)\n    {\n        if ($value === '') {\n            return 'NULL';\n        }\n\n        return (float) $value;\n    }\n\n    /**\n     * Escape the ints, and implode them.\n     *\n     * @param array $ints\n     *\n     * @deprecated\n     *\n     * $return string\n     */\n    public function escapeIntImplode(array $ints)\n    {\n        return implode(',', array_map([$this, 'escapeInt'], $ints));\n    }\n\n    /**\n     * Escape a value that will be used in a LIKE condition\n     *\n     * WARNING: This must be use only before quoteSmart otherwise you are still at risk of SQL injections\n     *\n     * Example escape chain:\n     * $this->getDa()->quoteSmart($this->getDa()->escapeLikeValue($value));\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function escapeLikeValue($value)\n    {\n        $value = $value ?? '';\n        return $this->db_connection->getDB()->escapeLikeValue($value);\n    }\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSurround($value)\n    {\n        return $this->quoteSmart('%' . $this->escapeLikeValue($value) . '%');\n    }\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSuffix($value)\n    {\n        return $this->quoteSmart($this->escapeLikeValue($value) . '%');\n    }\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValuePrefix($value)\n    {\n        return $this->quoteSmart('%' . $this->escapeLikeValue($value));\n    }\n\n    /**\n     * Retrieves the number of rows from a result set.\n     *\n     * @param CompatPDODataAccessResult|false $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return int The number of rows in a result set on success, or FALSE on failure.\n     */\n    public function numRows($result)\n    {\n        if (! $result) {\n            return false;\n        }\n\n        return $result->rowCount();\n    }\n\n    /**\n     * Fetch a result row as an associative array\n     *\n     * @param CompatPDODataAccessResult|false $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return array Returns an associative array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n     */\n    public function fetch($result)\n    {\n        if (! $result) {\n            return false;\n        }\n        if (! $result->valid()) {\n            return false;\n        }\n        $value = $result->current();\n        $result->next();\n        return $value;\n    }\n\n    /**\n     * Backward compatibility with database.php\n     *\n     * @deprecated since version 4.0\n     * @param type $result\n     *\n     * @return type\n     */\n    public function fetchArray($result)\n    {\n        return $this->fetch($result);\n    }\n\n    /**\n     * Move internal result pointer\n     *\n     * @param CompatPDODataAccessResult|false $result The result resource that is being evaluated. This result comes from a call to query().\n     * @param int $row_number The desired row number of the new result pointer.\n     *\n     * @deprecated\n     *\n     * @return bool Returns TRUE on success or FALSE on failure.\n     */\n    public function dataSeek($result, $row_number)\n    {\n        if (! $result) {\n            return false;\n        }\n        $result->seek($row_number);\n        return $result->valid();\n    }\n\n    /**\n     * Start a sql transaction\n     * @deprecated\n     */\n    public function startTransaction()\n    {\n        if ($this->db_connection->getDB()->getPdo()->inTransaction()) {\n            $this->commit();\n        }\n        try {\n            return $this->db_connection->getDB()->beginTransaction();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Rollback a sql transaction\n     * @deprecated\n     */\n    public function rollback()\n    {\n        if (! $this->db_connection->getDB()->getPdo()->inTransaction()) {\n            return true;\n        }\n        try {\n            return $this->db_connection->getDB()->rollBack();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Commit a sql transaction\n     * @deprecated\n     */\n    public function commit()\n    {\n        if (! $this->db_connection->getDB()->getPdo()->inTransaction()) {\n            return true;\n        }\n        try {\n            return $this->db_connection->getDB()->commit();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\DB\\Compat\\Legacy2018;\n\n/**\n * @deprecated See \\Tuleap\\DB\\DBFactory\n */\ninterface LegacyDataAccessInterface\n{\n    /**\n     * Fetches a query resources and stores it in a local member\n     * @param $sql string the database query to run\n     * @deprecated\n     * @return object MySQLDataAccessResultInterface\n     *\n     * @psalm-taint-sink sql $sql\n     * @psalm-taint-sink sql $params\n     */\n    public function query($sql, $params = []);\n\n    /**\n     * Return ID generated from the previous INSERT operation.\n     *\n     * @deprecated\n     *\n     * @return false|int or 0 if the previous query does not generate an AUTO_INCREMENT value, or FALSE if no MySQL connection was established\n     */\n    public function lastInsertId();\n\n    /**\n     * Return number of rows affected by the last INSERT, UPDATE or DELETE.\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function affectedRows();\n\n    /**\n     * Returns any MySQL errors\n     * @deprecated\n     * @return string a MySQL error\n     */\n    public function isError();\n\n    /**\n     * @deprecated\n     */\n    public function getErrorMessage();\n\n    /**\n     * Quote variable to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmart($value, $params = []);\n\n    /**\n     * Quote schema name to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmartSchema($value, $params = []);\n\n    /**\n     * Safe implode function to use with SQL queries\n     * @deprecated\n     * @static\n     */\n    public function quoteSmartImplode($glue, $pieces, $params = []);\n\n    /**\n     * cast to int\n     *\n     * @deprecated\n     */\n    public function escapeInt($v, $null = CODENDI_DB_NOT_NULL): string;\n\n    /**\n     * @deprecated\n     */\n    public function escapeFloat($value);\n\n    /**\n     * Escape the ints, and implode them.\n     *\n     * @param array $ints\n     *\n     * @deprecated\n     *\n     * $return string\n     */\n    public function escapeIntImplode(array $ints);\n\n    /**\n     * Escape a value that will be used in a LIKE condition\n     *\n     * WARNING: This must be use only before quoteSmart otherwise you are still at risk of SQL injections\n     *\n     * Example escape chain:\n     * $this->getDa()->quoteSmart($this->getDa()->escapeLikeValue($value));\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function escapeLikeValue($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSurround($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSuffix($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValuePrefix($value);\n\n    /**\n     * Retrieves the number of rows from a result set.\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return int The number of rows in a result set on success, or FALSE on failure.\n     */\n    public function numRows($result);\n\n    /**\n     * Fetch a result row as an associative array\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return array Returns an associative array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n     */\n    public function fetch($result);\n\n    /**\n     * Backward compatibility with database.php\n     *\n     * @deprecated since version 4.0\n     * @param type $result\n     *\n     * @return type\n     * @psalm-taint-source ldap\n     */\n    public function fetchArray($result);\n\n    /**\n     * Move internal result pointer\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     * @param int $row_number The desired row number of the new result pointer.\n     *\n     * @deprecated\n     *\n     * @return bool Returns TRUE on success or FALSE on failure.\n     */\n    public function dataSeek($result, $row_number);\n\n    /**\n     * Start a sql transaction\n     * @deprecated\n     */\n    public function startTransaction();\n\n    /**\n     * Rollback a sql transaction\n     * @deprecated\n     */\n    public function rollback();\n\n    /**\n     * Commit a sql transaction\n     * @deprecated\n     */\n    public function commit();\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) STMicroelectronics, 2008. All Rights Reserved.\n * Copyright (c) Enalean, 2017 - Present. All Rights Reserved.\n *\n * Originally written by Manuel Vacelet, 2008\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\DB\\Compat\\Legacy2018\\LegacyDataAccessInterface;\nuse Tuleap\\Project\\UserRemover;\n\n/**\n * Database access to ldap user group\n *\n */\nclass LDAP_ProjectGroupDao extends DataAccessObject\n{\n    /**\n     * @var UserRemover\n     */\n    private $user_removal;\n\n    public function __construct(LegacyDataAccessInterface $da, UserRemover $user_removal)\n    {\n        parent::__construct($da);\n\n        $this->user_removal = $user_removal;\n    }\n\n    /**\n     * Search one user group by id\n     *\n     * @param int $groupId Project id\n     *\n     * @return array|false\n     */\n    public function searchByGroupId($groupId)\n    {\n        $sql = 'SELECT * FROM plugin_ldap_project_group' .\n            ' WHERE group_id = ' . db_ei($groupId);\n        $dar = $this->retrieve($sql);\n        if ($dar && ! $dar->isError() && $dar->rowCount() == 1) {\n            return $dar->getRow();\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Associate one Codendi user group to an LDAP group\n     *\n     * @return bool\n     */\n    public function linkGroupLdap($project_id, $ldap_dn, $bind, $synchronization)\n    {\n        $project_id      = $this->da->escapeInt($project_id);\n        $ldap_dn         = $this->da->quoteSmart($ldap_dn);\n        $synchronization = $this->da->quoteSmart($synchronization);\n        $bind            = $this->da->quoteSmart($bind);\n\n        $sql = \"INSERT INTO plugin_ldap_project_group (group_id, ldap_group_dn, synchro_policy, bind_option)\n                VALUES ($project_id, $ldap_dn, $synchronization, $bind)\";\n\n        return $this->update($sql);\n    }\n\n    /**\n     * Remove link between project members and a LDAP group\n     *\n     * @param int $groupId Project id\n     *\n     * @return bool\n     */\n    public function unlinkGroupLdap($groupId)\n    {\n        $sql = 'DELETE FROM plugin_ldap_project_group' .\n            ' WHERE group_id = ' . db_ei($groupId);\n        return $this->update($sql);\n    }\n\n    /**\n     * Object oriented wrapper for account_add_user_to_group\n     *\n     * @param int $groupId Project id\n     * @param String  $name    User unix name\n     *\n     * @return bool\n     */\n    public function addUserToGroup($groupId, $name)\n    {\n        include_once __DIR__ . '/../../../src/www/include/account.php';\n        return account_add_user_to_group($groupId, $name);\n    }\n\n    /**\n     * Object oriented wrapper for account_remove_user_from_group\n     *\n     * @param int $project_id Project id\n     * @param int $user_id User id\n     *\n     * @return bool\n     */\n    public function removeUserFromGroup($project_id, $user_id)\n    {\n        return $this->user_removal->removeUserFromProject($project_id, $user_id);\n    }\n\n    public function isProjectBindingSynchronized($project_id)\n    {\n        $project_id              = $this->da->escapeInt($project_id);\n        $auto_synchronized_value = $this->da->quoteSmart(LDAP_GroupManager::AUTO_SYNCHRONIZATION);\n\n        $sql = \"SELECT NULL\n                FROM plugin_ldap_project_group\n                WHERE group_id = $project_id\n                  AND synchro_policy = $auto_synchronized_value\n                LIMIT 1\";\n\n        return count($this->retrieve($sql)) > 0;\n    }\n\n    public function doesProjectBindingKeepUsers($project_id)\n    {\n        $project_id       = $this->da->escapeInt($project_id);\n        $keep_users_value = $this->da->quoteSmart(LDAP_GroupManager::PRESERVE_MEMBERS_OPTION);\n\n        $sql = \"SELECT NULL\n                FROM plugin_ldap_project_group\n                WHERE group_id = $project_id\n                  AND bind_option = $keep_users_value\n                LIMIT 1\";\n\n        return count($this->retrieve($sql)) > 0;\n    }\n\n    /**\n     * @psalm-taint-escape ldap DN is stored directly in plugin_ldap_project_group.ldap_group_dn, so we are forced to remove the taint\n     */\n    public function getSynchronizedProjects()\n    {\n        $auto_synchronized_value = $this->da->quoteSmart(LDAP_GroupManager::AUTO_SYNCHRONIZATION);\n\n        $sql = \"SELECT *\n                FROM plugin_ldap_project_group\n                  INNER JOIN `groups` ON (`groups`.group_id = plugin_ldap_project_group.group_id)\n                WHERE synchro_policy = $auto_synchronized_value\n                  AND `groups`.status IN ('A', 's')\";\n\n        return $this->retrieve($sql);\n    }\n}\n", "<?php\n/**\n * Copyright (c) STMicroelectronics, 2008. All Rights Reserved.\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * Originally written by Manuel Vacelet, 2008\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Cryptography\\ConcealedString;\nuse Tuleap\\LDAP\\Exception\\IdentifierTypeNotFoundException;\nuse Tuleap\\LDAP\\Exception\\IdentifierTypeNotRecognizedException;\nuse Tuleap\\User\\DataIncompatibleWithUsernameGenerationException;\nuse Tuleap\\User\\UserNameNormalizer;\n\n/**\n * Manage interaction between an LDAP group and Codendi user_group.\n */\nclass LDAP_UserManager\n{\n    public const EVENT_UPDATE_LOGIN = 'PLUGIN_LDAP_UPDATE_LOGIN';\n\n    /**\n     * @type LDAP\n     */\n    private $ldap;\n\n    /**\n     * @var array<string, LDAPResult|false>\n     */\n    private $ldapResultCache = [];\n\n    /**\n     * @var PFUser[]\n     */\n    private $usersLoginChanged = [];\n\n    /**\n     * @var LDAP_UserSync\n     */\n    private $user_sync;\n\n    public function __construct(LDAP $ldap, LDAP_UserSync $user_sync, private UserNameNormalizer $username_generator)\n    {\n        $this->ldap      = $ldap;\n        $this->user_sync = $user_sync;\n    }\n\n    /**\n     * Create an LDAP_User object out of a regular user if this user comes as\n     * a corresponding LDAP entry\n     */\n    public function getLDAPUserFromUser(PFUser $user): ?LDAP_User\n    {\n        $ldap_result = $this->getLdapFromUser($user);\n        if ($ldap_result) {\n            return new LDAP_User($user, $ldap_result);\n        }\n        return null;\n    }\n\n    /**\n     * Get LDAPResult object corresponding to an LDAP ID\n     *\n     * @param  $ldapId    The LDAP identifier\n     * @return LDAPResult|false\n     */\n    public function getLdapFromLdapId($ldapId)\n    {\n        if (! isset($this->ldapResultCache[$ldapId])) {\n            $lri = $this->getLdap()->searchEdUid($ldapId);\n            if ($lri && $lri->count() == 1) {\n                $this->ldapResultCache[$ldapId] = $lri->current();\n            } else {\n                $this->ldapResultCache[$ldapId] = false;\n            }\n        }\n        return $this->ldapResultCache[$ldapId];\n    }\n\n    /**\n     * Get LDAPResult object corresponding to a User object\n     *\n     * @param  PFUser $user\n     * @return LDAPResult|false\n     */\n    public function getLdapFromUser($user)\n    {\n        if ($user && ! $user->isAnonymous()) {\n            return $this->getLdapFromLdapId($user->getLdapId());\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get LDAPResult object corresponding to a user name\n     *\n     * @param  string $userName  The user name\n     * @return LDAPResult|false\n     */\n    public function getLdapFromUserName($userName)\n    {\n        $user = $this->getUserManager()->getUserByUserName($userName);\n        return $this->getLdapFromUser($user);\n    }\n\n    /**\n     * Get LDAPResult object corresponding to a user id\n     *\n     * @param  int $userId    The user id\n     * @return LDAPResult|false\n     */\n    public function getLdapFromUserId($userId)\n    {\n        $user = $this->getUserManager()->getUserById($userId);\n        return $this->getLdapFromUser($user);\n    }\n\n    /**\n     * Get a User object from an LDAP result\n     *\n     * @param LDAPResult $lr The LDAP result\n     *\n     * @return PFUser|false\n     */\n    public function getUserFromLdap(LDAPResult $lr)\n    {\n        $user = $this->getUserManager()->getUserByLdapId($lr->getEdUid());\n        if (! $user) {\n            $user = $this->createAccountFromLdap($lr);\n        }\n        return $user;\n    }\n\n    /**\n     * Get the list of Codendi users corresponding to the given list of LDAP users.\n     *\n     * When a user doesn't exist, his account is created automaticaly.\n     *\n     * @param Array $ldapIds\n     * @return Array\n     */\n    public function getUserIdsForLdapUser($ldapIds)\n    {\n        $userIds = [];\n        $dao     = $this->getDao();\n        foreach ($ldapIds as $lr) {\n            $user = $this->getUserManager()->getUserByLdapId($lr->getEdUid());\n            if ($user) {\n                $userIds[$user->getId()] = $user->getId();\n            } else {\n                $user = $this->createAccountFromLdap($lr);\n                if ($user) {\n                    $userIds[$user->getId()] = $user->getId();\n                }\n            }\n        }\n        return $userIds;\n    }\n\n    /**\n     * Return an array of user ids corresponding to the give list of user identifiers\n     *\n     * @param String $userList A comma separated list of user identifiers\n     *\n     * @return Array\n     */\n    public function getUserIdsFromUserList($userList)\n    {\n        $userIds  = [];\n        $userList = array_map('trim', preg_split('/[,;]/', $userList));\n        foreach ($userList as $u) {\n            $user = $this->getUserManager()->findUser($u);\n            if ($user) {\n                $userIds[] = $user->getId();\n            } else {\n                $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-ldap', 'User not found: %1$s'), $u));\n            }\n        }\n        return $userIds;\n    }\n\n    /**\n     * Return LDAP logins stored in DB corresponding to given userIds.\n     *\n     * @param array $userIds Array of user ids\n     * @return DataAccessResult ldap logins\n     */\n    public function getLdapLoginFromUserIds(array $userIds)\n    {\n        $dao = $this->getDao();\n        return $dao->searchLdapLoginFromUserIds($userIds);\n    }\n\n    /**\n     * Check if a given name is not already a user name or a project name\n     *\n     * This should be in UserManager\n     *\n     * @param String $name Name to test\n     * @return bool\n     */\n    public function userNameIsAvailable($name)\n    {\n        $dao = $this->getDao();\n        return $dao->userNameIsAvailable($name);\n    }\n\n    /**\n     * Create user account based on LDAPResult info.\n     *\n     * @return PFUser|false\n     */\n    public function createAccountFromLdap(LDAPResult $lr)\n    {\n        $user = $this->createAccount($lr->getEdUid(), $lr->getLogin(), $lr->getCommonName(), $lr->getEmail());\n        return $user;\n    }\n\n    /**\n     * Create user account based on LDAP info.\n     *\n     * @param  String $eduid\n     * @param  String $uid\n     * @param  String $cn\n     * @param  String $email\n     * @return PFUser|false\n     */\n    public function createAccount($eduid, $uid, $cn, $email)\n    {\n        if (trim($uid) == '' || trim($eduid) == '') {\n            return false;\n        }\n\n        $user = new PFUser();\n        try {\n            $user->setUserName($this->username_generator->normalize($uid));\n        } catch (DataIncompatibleWithUsernameGenerationException $exception) {\n            return false;\n        }\n\n        $user->setLdapId($eduid);\n        $user->setRealName($cn);\n        $user->setEmail($email);\n        $mail_confirm_code_generator = new MailConfirmationCodeGenerator(\n            $this->getUserManager(),\n            new RandomNumberGenerator()\n        );\n        $mail_confirm_code           = $mail_confirm_code_generator->getConfirmationCode();\n        $user->setConfirmHash($mail_confirm_code);\n\n        // Default LDAP\n        $user->setStatus($this->getLdap()->getLDAPParam('default_user_status'));\n        $user->setRegisterPurpose('LDAP');\n        $user->setUnixStatus('S');\n        $user->setTimezone('GMT');\n        $user->setLanguageID($GLOBALS['Language']->getText('conf', 'language_id'));\n\n        $um   = $this->getUserManager();\n        $user = $um->createAccount($user);\n        if (! $user) {\n            return false;\n        }\n\n        return $user;\n    }\n\n    public function createLdapUser(LDAP_User $ldap_user): void\n    {\n        if (! $this->getDao()->hasLoginConfirmationDate($ldap_user)) {\n            $this->getDao()->createLdapUser($ldap_user->getId(), 0, $ldap_user->getUid());\n        }\n    }\n\n    /**\n     * @throws LDAP_AuthenticationFailedException\n     * @throws LDAP_UserNotFoundException\n     */\n    public function authenticate($username, ConcealedString $password): ?PFUser\n    {\n        if (! $this->ldap->authenticate($username, $password)) {\n            throw new LDAP_AuthenticationFailedException();\n        }\n\n        $ldap_user = $this->getUserFromServer($username);\n        $user      = $this->getUserManager()->getUserByLdapId($ldap_user->getEdUid());\n\n        if ($user === null) {\n            $user = $this->createAccountFromLdap($ldap_user);\n        }\n\n        if ($user) {\n            $this->synchronizeUser($user, $ldap_user, $password);\n            return $user;\n        }\n\n        return null;\n    }\n\n    private function mergeDefaultAttributesAndSiteAttributes()\n    {\n        return array_values(\n            array_unique(\n                array_merge(\n                    $this->ldap->getDefaultAttributes(),\n                    $this->user_sync->getSyncAttributes($this->ldap)\n                )\n            )\n        );\n    }\n\n    private function getUserFromServer($username)\n    {\n        $ldap_results_iterator = $this->ldap->searchLogin(\n            $username,\n            $this->mergeDefaultAttributesAndSiteAttributes()\n        );\n\n        if ($ldap_results_iterator === false || count($ldap_results_iterator) !== 1) {\n            throw new LDAP_UserNotFoundException();\n        }\n\n        return $ldap_results_iterator->current();\n    }\n\n    /**\n     * Synchronize user account with LDAP informations\n     *\n     * @return bool\n     */\n    public function synchronizeUser(PFUser $user, LDAPResult $lr, ConcealedString $password)\n    {\n        $user->setPassword($password);\n\n        $sync = LDAP_UserSync::instance();\n        $sync->sync($user, $lr);\n\n        // Perform DB update\n        $userUpdated = $this->getUserManager()->updateDb($user);\n\n        $ldapUpdated = true;\n        $user_id     = $this->getLdapLoginFromUserIds([$user->getId()])->getRow();\n        if ($user_id['ldap_uid'] != $lr->getLogin()) {\n            $ldapUpdated = $this->updateLdapUid($user, $lr->getLogin());\n            $this->triggerRenameOfUsers();\n        }\n\n        return ($userUpdated || $ldapUpdated);\n    }\n\n    /**\n     * Store new LDAP login in database\n     *\n     * Force update of SVNAccessFile in project the user belongs to as\n     * project member or user group member\n     *\n     * @param PFUser    $user    The user to update\n     * @param String  $ldapUid New LDAP login\n     *\n     * @return bool\n     */\n    public function updateLdapUid(PFUser $user, $ldapUid)\n    {\n        if ($this->getDao()->updateLdapUid($user->getId(), $ldapUid)) {\n            $this->addUserToRename($user);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Get the list of users whom LDAP uid changed\n     *\n     * @return Array of User\n     */\n    public function getUsersToRename()\n    {\n        return $this->usersLoginChanged;\n    }\n\n    /**\n     * Add a user whom login changed to the rename pipe\n     *\n     * @param PFUser $user A user to rename\n     */\n    public function addUserToRename(PFUser $user)\n    {\n        $this->usersLoginChanged[] = $user;\n    }\n\n    /**\n     * Create PLUGIN_LDAP_UPDATE_LOGIN event if there are user login updates pending\n     */\n    public function triggerRenameOfUsers()\n    {\n        if (count($this->usersLoginChanged)) {\n            $userIds = [];\n            foreach ($this->usersLoginChanged as $user) {\n                $userIds[] = $user->getId();\n            }\n            $sem = $this->getSystemEventManager();\n            $sem->createEvent(self::EVENT_UPDATE_LOGIN, implode(SystemEvent::PARAMETER_SEPARATOR, $userIds), SystemEvent::PRIORITY_MEDIUM);\n        }\n    }\n\n    /**\n     * Return array of users that will be suspended\n     *\n     * @return array of PFUser\n     *\n     */\n    public function getUsersToBeSuspended()\n    {\n        $users_to_be_suspended = [];\n        $active_users          = $this->getDao()->getActiveUsers();\n        foreach ($active_users as $active_user) {\n            if ($this->isUserDeletedFromLdap($active_user)) {\n                $user = new PFUser($active_user);\n                array_push($users_to_be_suspended, $user);\n            }\n        }\n        return $users_to_be_suspended;\n    }\n\n    /**\n     * Return number of active users\n     *\n     * @return int\n     *\n     */\n    public function getNbrActiveUsers()\n    {\n        $row = $this->getDao()->getNbrActiveUsers()->getRow();\n        return $row[\"count\"];\n    }\n\n    /**\n     * Return true if users could be suspended\n     *\n     * @param int $nbr_all_users\n     *\n     * @return bool\n     *\n     */\n    public function areUsersSupendable($nbr_all_users)\n    {\n        $nbr_users_to_suspend = count($this->getUsersToBeSuspended());\n        if ((! $threshold_users_suspension = $this->ldap->getLDAPParam('threshold_users_suspension')) || $nbr_users_to_suspend == 0) {\n            return true;\n        }\n        return $this->checkThreshold($nbr_users_to_suspend, $nbr_all_users);\n    }\n\n    /**\n     * Check that threshold is upper then percentage of users that will be suspended\n     *\n     * @param int $nbr_users_to_suspend\n     * @param int $nbr_all_users\n     *\n     * @return bool\n     *\n     */\n    public function checkThreshold($nbr_users_to_suspend, $nbr_all_users)\n    {\n        if ($nbr_users_to_suspend == 0 || $nbr_all_users == 0) {\n            return true;\n        }\n        $percentage_users_to_suspend = ($nbr_users_to_suspend / $nbr_all_users) * 100;\n        $threshold_users_suspension  = $this->ldap->getLDAPParam('threshold_users_suspension');\n        $logger                      = new \\Tuleap\\LDAP\\LdapLogger();\n        if ($percentage_users_to_suspend <= $threshold_users_suspension) {\n            $logger->info(\"[LDAP] Percentage of suspended users is ( \" . $percentage_users_to_suspend . \"% ) and threshold is ( \" . $threshold_users_suspension . \"% )\");\n            $logger->info(\"[LDAP] Number of suspended users is ( \" . $nbr_users_to_suspend . \" ) and number of active users is ( \" . $nbr_all_users . \" )\");\n            return true;\n        } else {\n            $logger->warning(\"[LDAP] Users not suspended: the percentage of users to suspend is ( \" . $percentage_users_to_suspend . \"% ) higher then threshold ( \" . $threshold_users_suspension . \"% )\");\n            $logger->warning(\"[LDAP] Number of users not suspended is ( \" . $nbr_users_to_suspend . \" ) and number of active users is ( \" . $nbr_all_users . \" )\");\n            return false;\n        }\n    }\n\n\n    /**\n     * Return true if user is deleted from ldap server\n     *\n     * @param array $row\n     *\n     * @return bool\n     *\n     */\n    public function isUserDeletedFromLdap($row)\n    {\n        $ldap_query = $this->ldap->getLDAPParam('eduid') . '=' . ldap_escape($row['ldap_id'], '', LDAP_ESCAPE_FILTER);\n        $attributes = $this->user_sync->getSyncAttributes($this->ldap);\n        $ldapSearch = false;\n\n        foreach (explode(';', $this->ldap->getLDAPParam('people_dn') ?? '') as $people_dn) {\n            $ldapSearch = $this->ldap->search($people_dn, $ldap_query, LDAP::SCOPE_ONELEVEL, $attributes);\n            if ($ldapSearch !== false && count($ldapSearch) === 1) {\n                break;\n            }\n        }\n        if ($this->ldap->getErrno() === LDAP::ERR_SUCCESS && $ldapSearch) {\n            if (count($ldapSearch) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Wrapper for DAO\n     *\n     * @return LDAP_UserDao\n     */\n    public function getDao()\n    {\n        return new LDAP_UserDao(CodendiDataAccess::instance());\n    }\n\n    /**\n     * Wrapper for LDAP object\n     *\n     * @return LDAP\n     */\n    protected function getLdap()\n    {\n        return $this->ldap;\n    }\n\n    /**\n     * Wrapper for UserManager object\n     *\n     * @return UserManager\n     */\n    protected function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    /**\n     * Wrapper for SystemEventManager object\n     *\n     * @return SystemEventManager\n     */\n    protected function getSystemEventManager()\n    {\n        return SystemEventManager::instance();\n    }\n\n    /**\n     * @return PFUser|null\n     */\n    public function getUserByIdentifier($identifier)\n    {\n        $separator_position = strpos($identifier, ':');\n        $type               = strtolower(substr($identifier, 0, $separator_position));\n        $value              = strtolower(substr($identifier, $separator_position + 1));\n\n        if (! $type) {\n            throw new IdentifierTypeNotFoundException();\n        }\n\n        $ldap = $this->getLdap();\n        $lri  = null;\n        switch ($type) {\n            case 'ldapid':\n                $lri = $ldap->searchEdUid($value);\n                break;\n            case 'ldapdn':\n                $lri = $ldap->searchDn($value);\n                break;\n            case 'ldapuid':\n                $lri = $ldap->searchLogin($value);\n                break;\n            default:\n                throw new IdentifierTypeNotRecognizedException();\n        }\n\n        if ($lri === false) {\n            return null;\n        }\n\n        return $this->getUserFromLdapIterator($lri);\n    }\n\n    /**\n     * Get a User object from an LDAP iterator\n     *\n     * @param LDAPResultIterator $lri An LDAP result iterator\n     *\n     * @return PFUser|null\n     */\n    public function getUserFromLdapIterator(?LDAPResultIterator $lri = null)\n    {\n        if ($lri && count($lri) === 1 && (($user = $this->getUserFromLdap($lri->current())) !== false)) {\n            return $user;\n        }\n\n        return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\DB\\Compat\\Legacy2018;\n\nuse Tuleap\\DB\\DBConnection;\n\n/**\n * @deprecated\n */\nfinal class CompatPDODataAccess implements LegacyDataAccessInterface\n{\n    /**\n     * @var DBConnection\n     */\n    private $db_connection;\n    /**\n     * @var \\PDOStatement\n     */\n    private $latest_statement;\n\n    public function __construct(DBConnection $db_connection)\n    {\n        $this->db_connection = $db_connection;\n    }\n\n    /**\n     * Fetches a query resources and stores it in a local member\n     * @param $sql string the database query to run\n     * @deprecated\n     * @return object MySQLDataAccessResultInterface\n     *\n     * @psalm-taint-sink sql $sql\n     * @psalm-taint-sink sql $params\n     * @psalm-taint-source ldap\n     */\n    public function query($sql, $params = [])\n    {\n        if (! empty($params)) {\n            $args = [];\n            $i    = 1;\n            foreach ($params as $param) {\n                $args[] = '$' . $i;\n            }\n            $sql = str_replace($args, $params, $sql);\n        }\n\n        try {\n            $this->latest_statement = $this->db_connection->getDB()->query($sql);\n        } catch (\\PDOException $ex) {\n            $this->latest_statement = null;\n            if ($ex->getCode() == 2006) {\n                throw new \\DataAccessException('Unable to access the database . Please contact your administrator.');\n            }\n        }\n\n        try {\n            $this->db_connection->getDB()->getPdo()->setAttribute(\\PDO::ATTR_STRINGIFY_FETCHES, true);\n            $data_access_result = new CompatPDODataAccessResult($this->latest_statement);\n        } finally {\n            $this->db_connection->getDB()->getPdo()->setAttribute(\\PDO::ATTR_STRINGIFY_FETCHES, false);\n        }\n        return $data_access_result;\n    }\n\n    /**\n     * Return ID generated from the previous INSERT operation.\n     *\n     * @deprecated\n     *\n     * @return false|int or 0 if the previous query does not generate an AUTO_INCREMENT value, or FALSE if no MySQL connection was established\n     */\n    public function lastInsertId()\n    {\n        try {\n            return (int) $this->db_connection->getDB()->lastInsertId();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Return number of rows affected by the last INSERT, UPDATE or DELETE.\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function affectedRows()\n    {\n        if ($this->latest_statement === null) {\n            return -1;\n        }\n        try {\n            return $this->latest_statement->rowCount();\n        } catch (\\PDOException $ex) {\n            return -1;\n        }\n    }\n\n    /**\n     * Returns any MySQL errors\n     * @deprecated\n     * @return string a MySQL error\n     */\n    public function isError()\n    {\n        $error_info = [];\n        if ($this->latest_statement !== null) {\n            $error_info = $this->latest_statement->errorInfo();\n        }\n\n        if (! isset($error_info[0]) || $error_info[0] === '00000') {\n            $error_info = $this->db_connection->getDB()->getPdo()->errorInfo();\n        }\n\n        $has_error = isset($error_info[0]) && $error_info[0] !== '00000';\n        if (! $has_error) {\n            return '';\n        }\n        return 'DB error';\n    }\n\n    /**\n     * @deprecated\n     */\n    public function getErrorMessage()\n    {\n        $error_info = [];\n        if ($this->latest_statement !== null) {\n            $error_info = $this->latest_statement->errorInfo();\n        }\n\n        if (! isset($error_info[0]) || $error_info[0] === '00000') {\n            $error_info = $this->db_connection->getDB()->getPdo()->errorInfo();\n        }\n\n        return $error_info[2] . ' - ' . $error_info[1];\n    }\n\n    /**\n     * Quote variable to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmart($value, $params = [])\n    {\n        return $this->db_connection->getDB()->quote((string) $value);\n    }\n\n    /**\n     * Quote schema name to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmartSchema($value, $params = [])\n    {\n        return $this->db_connection->getDB()->escapeIdentifier((string) $value);\n    }\n\n    /**\n     * Safe implode function to use with SQL queries\n     * @deprecated\n     * @static\n     */\n    public function quoteSmartImplode($glue, $pieces, $params = [])\n    {\n        $str         = '';\n        $after_first = false;\n        foreach ($pieces as $piece) {\n            if ($after_first) {\n                $str .= $glue;\n            }\n            $str        .= $this->quoteSmart($piece, $params);\n            $after_first = true;\n        }\n        return $str;\n    }\n\n    /**\n     * cast to int\n     *\n     * @deprecated\n     */\n    public function escapeInt($v, $null = CODENDI_DB_NOT_NULL): string\n    {\n        if ($null === CODENDI_DB_NULL && $v === '') {\n            return 'NULL';\n        }\n        return (string) (int) $v;\n    }\n\n    /**\n     * @deprecated\n     */\n    public function escapeFloat($value)\n    {\n        if ($value === '') {\n            return 'NULL';\n        }\n\n        return (float) $value;\n    }\n\n    /**\n     * Escape the ints, and implode them.\n     *\n     * @param array $ints\n     *\n     * @deprecated\n     *\n     * $return string\n     */\n    public function escapeIntImplode(array $ints)\n    {\n        return implode(',', array_map([$this, 'escapeInt'], $ints));\n    }\n\n    /**\n     * Escape a value that will be used in a LIKE condition\n     *\n     * WARNING: This must be use only before quoteSmart otherwise you are still at risk of SQL injections\n     *\n     * Example escape chain:\n     * $this->getDa()->quoteSmart($this->getDa()->escapeLikeValue($value));\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function escapeLikeValue($value)\n    {\n        $value = $value ?? '';\n        return $this->db_connection->getDB()->escapeLikeValue($value);\n    }\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSurround($value)\n    {\n        return $this->quoteSmart('%' . $this->escapeLikeValue($value) . '%');\n    }\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSuffix($value)\n    {\n        return $this->quoteSmart($this->escapeLikeValue($value) . '%');\n    }\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValuePrefix($value)\n    {\n        return $this->quoteSmart('%' . $this->escapeLikeValue($value));\n    }\n\n    /**\n     * Retrieves the number of rows from a result set.\n     *\n     * @param CompatPDODataAccessResult|false $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return int The number of rows in a result set on success, or FALSE on failure.\n     */\n    public function numRows($result)\n    {\n        if (! $result) {\n            return false;\n        }\n\n        return $result->rowCount();\n    }\n\n    /**\n     * Fetch a result row as an associative array\n     *\n     * @param CompatPDODataAccessResult|false $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return array Returns an associative array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n     * @psalm-taint-source ldap\n     */\n    public function fetch($result)\n    {\n        if (! $result) {\n            return false;\n        }\n        if (! $result->valid()) {\n            return false;\n        }\n        $value = $result->current();\n        $result->next();\n        return $value;\n    }\n\n    /**\n     * Backward compatibility with database.php\n     *\n     * @deprecated since version 4.0\n     * @param type $result\n     *\n     * @return type\n     * @psalm-taint-source ldap\n     */\n    public function fetchArray($result)\n    {\n        return $this->fetch($result);\n    }\n\n    /**\n     * Move internal result pointer\n     *\n     * @param CompatPDODataAccessResult|false $result The result resource that is being evaluated. This result comes from a call to query().\n     * @param int $row_number The desired row number of the new result pointer.\n     *\n     * @deprecated\n     *\n     * @return bool Returns TRUE on success or FALSE on failure.\n     */\n    public function dataSeek($result, $row_number)\n    {\n        if (! $result) {\n            return false;\n        }\n        $result->seek($row_number);\n        return $result->valid();\n    }\n\n    /**\n     * Start a sql transaction\n     * @deprecated\n     */\n    public function startTransaction()\n    {\n        if ($this->db_connection->getDB()->getPdo()->inTransaction()) {\n            $this->commit();\n        }\n        try {\n            return $this->db_connection->getDB()->beginTransaction();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Rollback a sql transaction\n     * @deprecated\n     */\n    public function rollback()\n    {\n        if (! $this->db_connection->getDB()->getPdo()->inTransaction()) {\n            return true;\n        }\n        try {\n            return $this->db_connection->getDB()->rollBack();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Commit a sql transaction\n     * @deprecated\n     */\n    public function commit()\n    {\n        if (! $this->db_connection->getDB()->getPdo()->inTransaction()) {\n            return true;\n        }\n        try {\n            return $this->db_connection->getDB()->commit();\n        } catch (\\PDOException $ex) {\n            return false;\n        }\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\DB\\Compat\\Legacy2018;\n\n/**\n * @deprecated See \\Tuleap\\DB\\DBFactory\n */\ninterface LegacyDataAccessInterface\n{\n    /**\n     * Fetches a query resources and stores it in a local member\n     * @param $sql string the database query to run\n     * @deprecated\n     * @return object MySQLDataAccessResultInterface\n     *\n     * @psalm-taint-sink sql $sql\n     * @psalm-taint-sink sql $params\n     * @psalm-taint-source ldap\n     */\n    public function query($sql, $params = []);\n\n    /**\n     * Return ID generated from the previous INSERT operation.\n     *\n     * @deprecated\n     *\n     * @return false|int or 0 if the previous query does not generate an AUTO_INCREMENT value, or FALSE if no MySQL connection was established\n     */\n    public function lastInsertId();\n\n    /**\n     * Return number of rows affected by the last INSERT, UPDATE or DELETE.\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function affectedRows();\n\n    /**\n     * Returns any MySQL errors\n     * @deprecated\n     * @return string a MySQL error\n     */\n    public function isError();\n\n    /**\n     * @deprecated\n     */\n    public function getErrorMessage();\n\n    /**\n     * Quote variable to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmart($value, $params = []);\n\n    /**\n     * Quote schema name to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmartSchema($value, $params = []);\n\n    /**\n     * Safe implode function to use with SQL queries\n     * @deprecated\n     * @static\n     */\n    public function quoteSmartImplode($glue, $pieces, $params = []);\n\n    /**\n     * cast to int\n     *\n     * @deprecated\n     */\n    public function escapeInt($v, $null = CODENDI_DB_NOT_NULL): string;\n\n    /**\n     * @deprecated\n     */\n    public function escapeFloat($value);\n\n    /**\n     * Escape the ints, and implode them.\n     *\n     * @param array $ints\n     *\n     * @deprecated\n     *\n     * $return string\n     */\n    public function escapeIntImplode(array $ints);\n\n    /**\n     * Escape a value that will be used in a LIKE condition\n     *\n     * WARNING: This must be use only before quoteSmart otherwise you are still at risk of SQL injections\n     *\n     * Example escape chain:\n     * $this->getDa()->quoteSmart($this->getDa()->escapeLikeValue($value));\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function escapeLikeValue($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSurround($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSuffix($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValuePrefix($value);\n\n    /**\n     * Retrieves the number of rows from a result set.\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return int The number of rows in a result set on success, or FALSE on failure.\n     */\n    public function numRows($result);\n\n    /**\n     * Fetch a result row as an associative array\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return array Returns an associative array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n     * @psalm-taint-source ldap\n     */\n    public function fetch($result);\n\n    /**\n     * Backward compatibility with database.php\n     *\n     * @deprecated since version 4.0\n     * @param type $result\n     *\n     * @return type\n     * @psalm-taint-source ldap\n     */\n    public function fetchArray($result);\n\n    /**\n     * Move internal result pointer\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     * @param int $row_number The desired row number of the new result pointer.\n     *\n     * @deprecated\n     *\n     * @return bool Returns TRUE on success or FALSE on failure.\n     */\n    public function dataSeek($result, $row_number);\n\n    /**\n     * Start a sql transaction\n     * @deprecated\n     */\n    public function startTransaction();\n\n    /**\n     * Rollback a sql transaction\n     * @deprecated\n     */\n    public function rollback();\n\n    /**\n     * Commit a sql transaction\n     * @deprecated\n     */\n    public function commit();\n}\n"], "filenames": ["plugins/ldap/include/LDAP_ProjectGroupDao.class.php", "plugins/ldap/include/LDAP_UserManager.class.php", "src/common/DB/Compat/Legacy2018/CompatPDODataAccess.php", "src/common/DB/Compat/Legacy2018/LegacyDataAccessInterface.php"], "buggy_code_start_loc": [150, 508, 51, 35], "buggy_code_end_loc": [150, 509, 332, 169], "fixing_code_start_loc": [151, 508, 52, 36], "fixing_code_end_loc": [154, 509, 336, 172], "type": "CWE-74", "message": "Tuleap is a Libre and Open Source tool for end to end traceability of application and system developments. This is a follow up to GHSA-887w-pv2r-x8pm/CVE-2021-41276, the initial fix was incomplete. Tuleap does not sanitize properly the search filter built from the ldap_id attribute of a user during the daily synchronization. A malicious user could force accounts to be suspended or take over another account by forcing the update of the ldap_uid attribute. Note that the malicious user either need to have site administrator capability on the Tuleap instance or be an LDAP operator with the capability to create/modify account. The Tuleap instance needs to have the LDAP plugin activated and enabled for this issue to be exploitable. The following versions contain the fix: Tuleap Community Edition 13.2.99.83, Tuleap Enterprise Edition 13.1-6, and Tuleap Enterprise Edition 13.2-4.", "other": {"cve": {"id": "CVE-2021-43782", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-15T20:15:08.490", "lastModified": "2022-08-09T13:23:12.970", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap is a Libre and Open Source tool for end to end traceability of application and system developments. This is a follow up to GHSA-887w-pv2r-x8pm/CVE-2021-41276, the initial fix was incomplete. Tuleap does not sanitize properly the search filter built from the ldap_id attribute of a user during the daily synchronization. A malicious user could force accounts to be suspended or take over another account by forcing the update of the ldap_uid attribute. Note that the malicious user either need to have site administrator capability on the Tuleap instance or be an LDAP operator with the capability to create/modify account. The Tuleap instance needs to have the LDAP plugin activated and enabled for this issue to be exploitable. The following versions contain the fix: Tuleap Community Edition 13.2.99.83, Tuleap Enterprise Edition 13.1-6, and Tuleap Enterprise Edition 13.2-4."}, {"lang": "es", "value": "Tuleap es una herramienta libre y de c\u00f3digo abierto para la trazabilidad de extremo a extremo de los desarrollos de aplicaciones y sistemas. Esto es un seguimiento de GHSA-887w-pv2r-x8pm/CVE-2021-41276, la correcci\u00f3n inicial era incompleta. Tuleap no sanea adecuadamente el filtro de b\u00fasqueda construido a partir del atributo ldap_id de un usuario durante la sincronizaci\u00f3n diaria. Un usuario malicioso podr\u00eda forzar la suspensi\u00f3n de cuentas o tomar el control de otra cuenta al forzar la actualizaci\u00f3n del atributo ldap_uid. Ten en cuenta que el usuario malicioso debe tener capacidad de administrador del sitio en la instancia de Tuleap o ser un operador LDAP con capacidad para crear/modificar cuentas. La instancia de Tuleap necesita tener el plugin LDAP activado y habilitado para que este problema sea explotable. Las siguientes versiones contienen la correcci\u00f3n: Tuleap Community Edition versi\u00f3n 13.2.99.83, Tuleap Enterprise Edition versi\u00f3n 13.1-6, y Tuleap Enterprise Edition versi\u00f3n 13.2-4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-90"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "13.2.99.83", "matchCriteriaId": "57E21628-895D-4866-8311-00FEDF3172CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "13.1-1", "versionEndExcluding": "13.1-6", "matchCriteriaId": "EC827F38-6CE3-4CA7-971D-614DFC80FE33"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "13.2-1", "versionEndExcluding": "13.2-4", "matchCriteriaId": "E9CA970A-6199-4407-8C95-49B36EFE0134"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/64e77561eba9f8233199c2962b3497ed7294a7d2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-887w-pv2r-x8pm", "source": "security-advisories@github.com", "tags": ["Not Applicable", "Third Party Advisory"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-cwv9-hhm4-jr84", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=64e77561eba9f8233199c2962b3497ed7294a7d2", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=24168", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/64e77561eba9f8233199c2962b3497ed7294a7d2"}}